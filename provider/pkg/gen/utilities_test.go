// Copyright 2016-2022, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// nolint: lll
package gen

import (
	"testing"

	"github.com/pulumi/pulumi/pkg/v3/codegen"
	"github.com/pulumi/pulumi/pkg/v3/codegen/schema"
	"github.com/stretchr/testify/assert"
)

var apiParamToSdkNames = map[string]string{
	"projectsId":               "project",
	"locationId":               "location",
	"managedZonesId":           "managedZone",
	"zoneId":                   "zone",
	"gameServerDeploymentsId":  "gameServerDeploymentId",
	"schemaId":                 "schemaId",
	"certificateAuthoritiesId": "certificateAuthorityId",
	"sourceContents":           "sourceContents",
	"dataId":                   "dataId",
}

func TestApiParamNameToSdkName(t *testing.T) {
	for name, expected := range apiParamToSdkNames {
		actual := apiParamNameToSdkName(name)
		assert.Equal(t, expected, actual)
	}
}

var apiPropToSdkNames = map[string]string{
	"projectId":         "project",
	"locationId":        "location",
	"managedZoneId":     "managedZone",
	"zoneId":            "zone",
	"ApiName":           "apiName",
	"IPAddress":         "ipAddress",
	"custom_attributes": "customAttributes",
}

func TestApiPropNameToSdkName(t *testing.T) {
	for name, expected := range apiPropToSdkNames {
		actual := apiPropNameToSdkName("typeName", name)
		assert.Equal(t, expected, actual)
	}

	assert.Equal(t, "projectId", apiPropNameToSdkName("Project", "projectId"))
}

var namePropertyPatternsValid = map[string]string{
	// Artificial cases.
	"This is a plain property without a pattern": "{name}",
	"Single basic format foo/fooId":              "foo/{name}",
	// Real cases.
	"The resource name of the workflow. Format: projects/{project}/locations/{location}/workflows/{workflow}":                                                                                                                                                                                                                                  "projects/{project}/locations/{location}/workflows/{name}",
	"The resource name in the format `projects/*/locations/*/connectors/*`.":                                                                                                                                                                                                                                                                   "projects/{project}/locations/{location}/connectors/{name}",
	"The resource name for the endpoint in the format `projects/*/locations/*/namespaces/*/services/*/endpoints/*`.":                                                                                                                                                                                                                           "projects/{project}/locations/{location}/namespaces/{namespaceId}/services/{serviceId}/endpoints/{name}",
	"Unique name for the patch deployment resource in a project. The patch deployment name is in the form: `projects/{project_id}/patchDeployments/{patch_deployment_id}`. This field is ignored when you create a new patch deployment.":                                                                                                      "projects/{project}/patchDeployments/{name}",
	"The relative resource name of the metastore service, of the form:projects/{project_number}/locations/{location_id}/services/{service_id}.":                                                                                                                                                                                                "projects/{project}/locations/{location}/services/{name}",
	"The resource name of the ScanConfig. The name follows the format of 'projects/{projectId}/scanConfigs/{scanConfigId}'. The ScanConfig IDs are generated by the system.":                                                                                                                                                                   "projects/{project}/scanConfigs/{name}",
	"The resource name of the ProductSet. Format is: `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`. This field is ignored when creating a ProductSet.":                                                                                                                                                                     "projects/{project}/locations/{location}/productSets/{name}",
	"The resource name of the glossary. Glossary names have the form `projects/{project-number-or-id}/locations/{location-id}/glossaries/{glossary-id}`":                                                                                                                                                                                       "projects/{project}/locations/{location}/glossaries/{name}",
	"Resource name of the repository, of the form `projects//repos/`. The repo name may contain slashes.":                                                                                                                                                                                                                                      "projects/{project}/repos/{name}",
	"The name of the repository, for example: \"projects/p1/locations/us-central1/repositories/repo1\".":                                                                                                                                                                                                                                       "projects/{project}/locations/{location}/repositories/{name}",
	"The resource name of the reservation, e.g., `projects/*/locations/*/reservations/team1-prod`. []":                                                                                                                                                                                                                                         "projects/{project}/locations/{location}/reservations/{name}",
	"Full resource name of the product, such as `projects/*/locations/global/catalogs/default_catalog/branches/default_branch/products/product_id`. The branch ID must be \"default_branch\".":                                                                                                                                                 "projects/{project}/locations/{location}/catalogs/{catalogId}/branches/{branchId}/products/{name}",
	"WorkerPool resource name formatted as: `projects/[PROJECT_ID]/instances/[INSTANCE_ID]/workerpools/[POOL_ID]`. name should not be populated when creating a worker pool since it is provided in the `poolId` field.":                                                                                                                       "projects/{project}/instances/{instanceId}/workerpools/{name}",
	"The name of the topic. Structured like: projects/{project_number}/locations/{location}/topics/{topic_id}":                                                                                                                                                                                                                                 "projects/{project}/locations/{location}/topics/{name}",
	"Unique name of the resource in this project using one of the following forms: `projects/{project_number}/guestPolicies/{guest_policy_id}`.":                                                                                                                                                                                               "projects/{project}/guestPolicies/{name}",
	"The resource name of the trigger. Must be unique within the location on the project and must in `projects/{project}/locations/{location}/triggers/{trigger}` format":                                                                                                                                                                      "projects/{project}/locations/{location}/triggers/{name}",
	"The format will be projects/{project_number}/feeds/{client-assigned_feed_identifier} or folders/{folder_number}/feeds/{client-assigned_feed_identifier} or organizations/{organization_number}/feeds/{client-assigned_feed_identifier} The client-assigned feed identifier must be unique within the parent project/folder/organization.": "projects/{project}/feeds/{name}",
	"Resource name for this Service. The format is: projects/[PROJECT_ID_OR_NUMBER]/services/[SERVICE_ID]":                                                                                                                                                                                                                                     "projects/{project}/services/{name}",
}

func TestNamePropertyPatterns_Valid(t *testing.T) {
	for desc, expected := range namePropertyPatternsValid {
		inputProperties := map[string]schema.PropertySpec{
			"project":     {},
			"location":    {},
			"connectorId": {},
			"namespaceId": {},
			"serviceId":   {},
			"catalogId":   {},
			"branchId":    {},
			"instanceId":  {},
			"name": {
				Description: desc,
			},
		}
		actual, err := namePropertyPattern(inputProperties)
		assert.NoError(t, err)
		assert.Equal(t, expected, actual)
	}
}

var namePropertyPatternsInvalid = []string{
	"Unknown property format nonexisting/*/foo/fooId",
	"Random / in text",
	"Format project/*/locations/services/* is invalid because it has odd number of segments (5)",
}

func TestNamePropertyPatterns_Invalid(t *testing.T) {
	for _, desc := range namePropertyPatternsInvalid {
		inputProperties := map[string]schema.PropertySpec{
			"project":  {},
			"location": {},
			"name": {
				Description: desc,
			},
		}
		actual, err := namePropertyPattern(inputProperties)
		assert.Error(t, err)
		assert.Empty(t, actual)
	}

	// No 'name' property
	inputProperties := map[string]schema.PropertySpec{}
	actual, err := namePropertyPattern(inputProperties)
	assert.Error(t, err)
	assert.Empty(t, actual)
}

var propertyPatterns = map[string]string{
	"URL of the machine type resource, in the format: zones/zone/machineTypes/machine-type. This is provided by the client when the instance is created.": "zones/{zone}/machineTypes/{machineType}",
	"Plain property without a pattern": "",
	"Format project/*/locations/services/* is invalid because it has odd number of segments (5)": "",
	"Unknown parameter, in the format: things/thing/machineTypes/machine-type":                   "",
	"Wrong property name, in the format: zones/zone/things/thing":                                "",
}

func TestPropertyPatterns(t *testing.T) {
	for desc, expected := range propertyPatterns {
		knownParams := codegen.NewStringSet("zone")
		actual := propertyPattern("machineType", desc, knownParams)
		assert.Equal(t, expected, actual)
	}
}
