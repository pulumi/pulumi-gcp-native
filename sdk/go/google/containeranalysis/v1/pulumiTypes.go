// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// An alias to a repo revision.
type AliasContext struct {
	// The alias kind.
	Kind *AliasContextKind `pulumi:"kind"`
	// The alias name.
	Name *string `pulumi:"name"`
}

// AliasContextInput is an input type that accepts AliasContextArgs and AliasContextOutput values.
// You can construct a concrete instance of `AliasContextInput` via:
//
//	AliasContextArgs{...}
type AliasContextInput interface {
	pulumi.Input

	ToAliasContextOutput() AliasContextOutput
	ToAliasContextOutputWithContext(context.Context) AliasContextOutput
}

// An alias to a repo revision.
type AliasContextArgs struct {
	// The alias kind.
	Kind AliasContextKindPtrInput `pulumi:"kind"`
	// The alias name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (AliasContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AliasContext)(nil)).Elem()
}

func (i AliasContextArgs) ToAliasContextOutput() AliasContextOutput {
	return i.ToAliasContextOutputWithContext(context.Background())
}

func (i AliasContextArgs) ToAliasContextOutputWithContext(ctx context.Context) AliasContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AliasContextOutput)
}

func (i AliasContextArgs) ToAliasContextPtrOutput() AliasContextPtrOutput {
	return i.ToAliasContextPtrOutputWithContext(context.Background())
}

func (i AliasContextArgs) ToAliasContextPtrOutputWithContext(ctx context.Context) AliasContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AliasContextOutput).ToAliasContextPtrOutputWithContext(ctx)
}

// AliasContextPtrInput is an input type that accepts AliasContextArgs, AliasContextPtr and AliasContextPtrOutput values.
// You can construct a concrete instance of `AliasContextPtrInput` via:
//
//	        AliasContextArgs{...}
//
//	or:
//
//	        nil
type AliasContextPtrInput interface {
	pulumi.Input

	ToAliasContextPtrOutput() AliasContextPtrOutput
	ToAliasContextPtrOutputWithContext(context.Context) AliasContextPtrOutput
}

type aliasContextPtrType AliasContextArgs

func AliasContextPtr(v *AliasContextArgs) AliasContextPtrInput {
	return (*aliasContextPtrType)(v)
}

func (*aliasContextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AliasContext)(nil)).Elem()
}

func (i *aliasContextPtrType) ToAliasContextPtrOutput() AliasContextPtrOutput {
	return i.ToAliasContextPtrOutputWithContext(context.Background())
}

func (i *aliasContextPtrType) ToAliasContextPtrOutputWithContext(ctx context.Context) AliasContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AliasContextPtrOutput)
}

// An alias to a repo revision.
type AliasContextOutput struct{ *pulumi.OutputState }

func (AliasContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AliasContext)(nil)).Elem()
}

func (o AliasContextOutput) ToAliasContextOutput() AliasContextOutput {
	return o
}

func (o AliasContextOutput) ToAliasContextOutputWithContext(ctx context.Context) AliasContextOutput {
	return o
}

func (o AliasContextOutput) ToAliasContextPtrOutput() AliasContextPtrOutput {
	return o.ToAliasContextPtrOutputWithContext(context.Background())
}

func (o AliasContextOutput) ToAliasContextPtrOutputWithContext(ctx context.Context) AliasContextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AliasContext) *AliasContext {
		return &v
	}).(AliasContextPtrOutput)
}

// The alias kind.
func (o AliasContextOutput) Kind() AliasContextKindPtrOutput {
	return o.ApplyT(func(v AliasContext) *AliasContextKind { return v.Kind }).(AliasContextKindPtrOutput)
}

// The alias name.
func (o AliasContextOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AliasContext) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type AliasContextPtrOutput struct{ *pulumi.OutputState }

func (AliasContextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AliasContext)(nil)).Elem()
}

func (o AliasContextPtrOutput) ToAliasContextPtrOutput() AliasContextPtrOutput {
	return o
}

func (o AliasContextPtrOutput) ToAliasContextPtrOutputWithContext(ctx context.Context) AliasContextPtrOutput {
	return o
}

func (o AliasContextPtrOutput) Elem() AliasContextOutput {
	return o.ApplyT(func(v *AliasContext) AliasContext {
		if v != nil {
			return *v
		}
		var ret AliasContext
		return ret
	}).(AliasContextOutput)
}

// The alias kind.
func (o AliasContextPtrOutput) Kind() AliasContextKindPtrOutput {
	return o.ApplyT(func(v *AliasContext) *AliasContextKind {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(AliasContextKindPtrOutput)
}

// The alias name.
func (o AliasContextPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AliasContext) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// An alias to a repo revision.
type AliasContextResponse struct {
	// The alias kind.
	Kind string `pulumi:"kind"`
	// The alias name.
	Name string `pulumi:"name"`
}

// An alias to a repo revision.
type AliasContextResponseOutput struct{ *pulumi.OutputState }

func (AliasContextResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AliasContextResponse)(nil)).Elem()
}

func (o AliasContextResponseOutput) ToAliasContextResponseOutput() AliasContextResponseOutput {
	return o
}

func (o AliasContextResponseOutput) ToAliasContextResponseOutputWithContext(ctx context.Context) AliasContextResponseOutput {
	return o
}

// The alias kind.
func (o AliasContextResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v AliasContextResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// The alias name.
func (o AliasContextResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AliasContextResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Indicates which analysis completed successfully. Multiple types of analysis can be performed on a single resource.
type AnalysisCompleted struct {
	AnalysisType []string `pulumi:"analysisType"`
}

// AnalysisCompletedInput is an input type that accepts AnalysisCompletedArgs and AnalysisCompletedOutput values.
// You can construct a concrete instance of `AnalysisCompletedInput` via:
//
//	AnalysisCompletedArgs{...}
type AnalysisCompletedInput interface {
	pulumi.Input

	ToAnalysisCompletedOutput() AnalysisCompletedOutput
	ToAnalysisCompletedOutputWithContext(context.Context) AnalysisCompletedOutput
}

// Indicates which analysis completed successfully. Multiple types of analysis can be performed on a single resource.
type AnalysisCompletedArgs struct {
	AnalysisType pulumi.StringArrayInput `pulumi:"analysisType"`
}

func (AnalysisCompletedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisCompleted)(nil)).Elem()
}

func (i AnalysisCompletedArgs) ToAnalysisCompletedOutput() AnalysisCompletedOutput {
	return i.ToAnalysisCompletedOutputWithContext(context.Background())
}

func (i AnalysisCompletedArgs) ToAnalysisCompletedOutputWithContext(ctx context.Context) AnalysisCompletedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisCompletedOutput)
}

func (i AnalysisCompletedArgs) ToAnalysisCompletedPtrOutput() AnalysisCompletedPtrOutput {
	return i.ToAnalysisCompletedPtrOutputWithContext(context.Background())
}

func (i AnalysisCompletedArgs) ToAnalysisCompletedPtrOutputWithContext(ctx context.Context) AnalysisCompletedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisCompletedOutput).ToAnalysisCompletedPtrOutputWithContext(ctx)
}

// AnalysisCompletedPtrInput is an input type that accepts AnalysisCompletedArgs, AnalysisCompletedPtr and AnalysisCompletedPtrOutput values.
// You can construct a concrete instance of `AnalysisCompletedPtrInput` via:
//
//	        AnalysisCompletedArgs{...}
//
//	or:
//
//	        nil
type AnalysisCompletedPtrInput interface {
	pulumi.Input

	ToAnalysisCompletedPtrOutput() AnalysisCompletedPtrOutput
	ToAnalysisCompletedPtrOutputWithContext(context.Context) AnalysisCompletedPtrOutput
}

type analysisCompletedPtrType AnalysisCompletedArgs

func AnalysisCompletedPtr(v *AnalysisCompletedArgs) AnalysisCompletedPtrInput {
	return (*analysisCompletedPtrType)(v)
}

func (*analysisCompletedPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AnalysisCompleted)(nil)).Elem()
}

func (i *analysisCompletedPtrType) ToAnalysisCompletedPtrOutput() AnalysisCompletedPtrOutput {
	return i.ToAnalysisCompletedPtrOutputWithContext(context.Background())
}

func (i *analysisCompletedPtrType) ToAnalysisCompletedPtrOutputWithContext(ctx context.Context) AnalysisCompletedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisCompletedPtrOutput)
}

// Indicates which analysis completed successfully. Multiple types of analysis can be performed on a single resource.
type AnalysisCompletedOutput struct{ *pulumi.OutputState }

func (AnalysisCompletedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisCompleted)(nil)).Elem()
}

func (o AnalysisCompletedOutput) ToAnalysisCompletedOutput() AnalysisCompletedOutput {
	return o
}

func (o AnalysisCompletedOutput) ToAnalysisCompletedOutputWithContext(ctx context.Context) AnalysisCompletedOutput {
	return o
}

func (o AnalysisCompletedOutput) ToAnalysisCompletedPtrOutput() AnalysisCompletedPtrOutput {
	return o.ToAnalysisCompletedPtrOutputWithContext(context.Background())
}

func (o AnalysisCompletedOutput) ToAnalysisCompletedPtrOutputWithContext(ctx context.Context) AnalysisCompletedPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AnalysisCompleted) *AnalysisCompleted {
		return &v
	}).(AnalysisCompletedPtrOutput)
}

func (o AnalysisCompletedOutput) AnalysisType() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AnalysisCompleted) []string { return v.AnalysisType }).(pulumi.StringArrayOutput)
}

type AnalysisCompletedPtrOutput struct{ *pulumi.OutputState }

func (AnalysisCompletedPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnalysisCompleted)(nil)).Elem()
}

func (o AnalysisCompletedPtrOutput) ToAnalysisCompletedPtrOutput() AnalysisCompletedPtrOutput {
	return o
}

func (o AnalysisCompletedPtrOutput) ToAnalysisCompletedPtrOutputWithContext(ctx context.Context) AnalysisCompletedPtrOutput {
	return o
}

func (o AnalysisCompletedPtrOutput) Elem() AnalysisCompletedOutput {
	return o.ApplyT(func(v *AnalysisCompleted) AnalysisCompleted {
		if v != nil {
			return *v
		}
		var ret AnalysisCompleted
		return ret
	}).(AnalysisCompletedOutput)
}

func (o AnalysisCompletedPtrOutput) AnalysisType() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AnalysisCompleted) []string {
		if v == nil {
			return nil
		}
		return v.AnalysisType
	}).(pulumi.StringArrayOutput)
}

// Indicates which analysis completed successfully. Multiple types of analysis can be performed on a single resource.
type AnalysisCompletedResponse struct {
	AnalysisType []string `pulumi:"analysisType"`
}

// Indicates which analysis completed successfully. Multiple types of analysis can be performed on a single resource.
type AnalysisCompletedResponseOutput struct{ *pulumi.OutputState }

func (AnalysisCompletedResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisCompletedResponse)(nil)).Elem()
}

func (o AnalysisCompletedResponseOutput) ToAnalysisCompletedResponseOutput() AnalysisCompletedResponseOutput {
	return o
}

func (o AnalysisCompletedResponseOutput) ToAnalysisCompletedResponseOutputWithContext(ctx context.Context) AnalysisCompletedResponseOutput {
	return o
}

func (o AnalysisCompletedResponseOutput) AnalysisType() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AnalysisCompletedResponse) []string { return v.AnalysisType }).(pulumi.StringArrayOutput)
}

// Artifact describes a build product.
type Artifact struct {
	// Hash or checksum value of a binary, or Docker Registry 2.0 digest of a container.
	Checksum *string `pulumi:"checksum"`
	// Artifact ID, if any; for container images, this will be a URL by digest like `gcr.io/projectID/imagename@sha256:123456`.
	Id *string `pulumi:"id"`
	// Related artifact names. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. Note that a single Artifact ID can have multiple names, for example if two tags are applied to one image.
	Names []string `pulumi:"names"`
}

// ArtifactInput is an input type that accepts ArtifactArgs and ArtifactOutput values.
// You can construct a concrete instance of `ArtifactInput` via:
//
//	ArtifactArgs{...}
type ArtifactInput interface {
	pulumi.Input

	ToArtifactOutput() ArtifactOutput
	ToArtifactOutputWithContext(context.Context) ArtifactOutput
}

// Artifact describes a build product.
type ArtifactArgs struct {
	// Hash or checksum value of a binary, or Docker Registry 2.0 digest of a container.
	Checksum pulumi.StringPtrInput `pulumi:"checksum"`
	// Artifact ID, if any; for container images, this will be a URL by digest like `gcr.io/projectID/imagename@sha256:123456`.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Related artifact names. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. Note that a single Artifact ID can have multiple names, for example if two tags are applied to one image.
	Names pulumi.StringArrayInput `pulumi:"names"`
}

func (ArtifactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Artifact)(nil)).Elem()
}

func (i ArtifactArgs) ToArtifactOutput() ArtifactOutput {
	return i.ToArtifactOutputWithContext(context.Background())
}

func (i ArtifactArgs) ToArtifactOutputWithContext(ctx context.Context) ArtifactOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactOutput)
}

// ArtifactArrayInput is an input type that accepts ArtifactArray and ArtifactArrayOutput values.
// You can construct a concrete instance of `ArtifactArrayInput` via:
//
//	ArtifactArray{ ArtifactArgs{...} }
type ArtifactArrayInput interface {
	pulumi.Input

	ToArtifactArrayOutput() ArtifactArrayOutput
	ToArtifactArrayOutputWithContext(context.Context) ArtifactArrayOutput
}

type ArtifactArray []ArtifactInput

func (ArtifactArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Artifact)(nil)).Elem()
}

func (i ArtifactArray) ToArtifactArrayOutput() ArtifactArrayOutput {
	return i.ToArtifactArrayOutputWithContext(context.Background())
}

func (i ArtifactArray) ToArtifactArrayOutputWithContext(ctx context.Context) ArtifactArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactArrayOutput)
}

// Artifact describes a build product.
type ArtifactOutput struct{ *pulumi.OutputState }

func (ArtifactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Artifact)(nil)).Elem()
}

func (o ArtifactOutput) ToArtifactOutput() ArtifactOutput {
	return o
}

func (o ArtifactOutput) ToArtifactOutputWithContext(ctx context.Context) ArtifactOutput {
	return o
}

// Hash or checksum value of a binary, or Docker Registry 2.0 digest of a container.
func (o ArtifactOutput) Checksum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Artifact) *string { return v.Checksum }).(pulumi.StringPtrOutput)
}

// Artifact ID, if any; for container images, this will be a URL by digest like `gcr.io/projectID/imagename@sha256:123456`.
func (o ArtifactOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Artifact) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Related artifact names. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. Note that a single Artifact ID can have multiple names, for example if two tags are applied to one image.
func (o ArtifactOutput) Names() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Artifact) []string { return v.Names }).(pulumi.StringArrayOutput)
}

type ArtifactArrayOutput struct{ *pulumi.OutputState }

func (ArtifactArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Artifact)(nil)).Elem()
}

func (o ArtifactArrayOutput) ToArtifactArrayOutput() ArtifactArrayOutput {
	return o
}

func (o ArtifactArrayOutput) ToArtifactArrayOutputWithContext(ctx context.Context) ArtifactArrayOutput {
	return o
}

func (o ArtifactArrayOutput) Index(i pulumi.IntInput) ArtifactOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Artifact {
		return vs[0].([]Artifact)[vs[1].(int)]
	}).(ArtifactOutput)
}

// Artifact describes a build product.
type ArtifactResponse struct {
	// Hash or checksum value of a binary, or Docker Registry 2.0 digest of a container.
	Checksum string `pulumi:"checksum"`
	// Related artifact names. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. Note that a single Artifact ID can have multiple names, for example if two tags are applied to one image.
	Names []string `pulumi:"names"`
}

// Artifact describes a build product.
type ArtifactResponseOutput struct{ *pulumi.OutputState }

func (ArtifactResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArtifactResponse)(nil)).Elem()
}

func (o ArtifactResponseOutput) ToArtifactResponseOutput() ArtifactResponseOutput {
	return o
}

func (o ArtifactResponseOutput) ToArtifactResponseOutputWithContext(ctx context.Context) ArtifactResponseOutput {
	return o
}

// Hash or checksum value of a binary, or Docker Registry 2.0 digest of a container.
func (o ArtifactResponseOutput) Checksum() pulumi.StringOutput {
	return o.ApplyT(func(v ArtifactResponse) string { return v.Checksum }).(pulumi.StringOutput)
}

// Related artifact names. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. Note that a single Artifact ID can have multiple names, for example if two tags are applied to one image.
func (o ArtifactResponseOutput) Names() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ArtifactResponse) []string { return v.Names }).(pulumi.StringArrayOutput)
}

type ArtifactResponseArrayOutput struct{ *pulumi.OutputState }

func (ArtifactResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ArtifactResponse)(nil)).Elem()
}

func (o ArtifactResponseArrayOutput) ToArtifactResponseArrayOutput() ArtifactResponseArrayOutput {
	return o
}

func (o ArtifactResponseArrayOutput) ToArtifactResponseArrayOutputWithContext(ctx context.Context) ArtifactResponseArrayOutput {
	return o
}

func (o ArtifactResponseArrayOutput) Index(i pulumi.IntInput) ArtifactResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ArtifactResponse {
		return vs[0].([]ArtifactResponse)[vs[1].(int)]
	}).(ArtifactResponseOutput)
}

// Assessment provides all information that is related to a single vulnerability for this product.
type Assessment struct {
	// Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.
	//
	// Deprecated: Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.
	Cve *string `pulumi:"cve"`
	// Contains information about the impact of this vulnerability, this will change with time.
	Impacts []string `pulumi:"impacts"`
	// Justification provides the justification when the state of the assessment if NOT_AFFECTED.
	Justification *Justification `pulumi:"justification"`
	// A detailed description of this Vex.
	LongDescription *string `pulumi:"longDescription"`
	// Holds a list of references associated with this vulnerability item and assessment. These uris have additional information about the vulnerability and the assessment itself. E.g. Link to a document which details how this assessment concluded the state of this vulnerability.
	RelatedUris []RelatedUrl `pulumi:"relatedUris"`
	// Specifies details on how to handle (and presumably, fix) a vulnerability.
	Remediations []Remediation `pulumi:"remediations"`
	// A one sentence description of this Vex.
	ShortDescription *string `pulumi:"shortDescription"`
	// Provides the state of this Vulnerability assessment.
	State *AssessmentState `pulumi:"state"`
	// The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc.
	VulnerabilityId *string `pulumi:"vulnerabilityId"`
}

// AssessmentInput is an input type that accepts AssessmentArgs and AssessmentOutput values.
// You can construct a concrete instance of `AssessmentInput` via:
//
//	AssessmentArgs{...}
type AssessmentInput interface {
	pulumi.Input

	ToAssessmentOutput() AssessmentOutput
	ToAssessmentOutputWithContext(context.Context) AssessmentOutput
}

// Assessment provides all information that is related to a single vulnerability for this product.
type AssessmentArgs struct {
	// Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.
	//
	// Deprecated: Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.
	Cve pulumi.StringPtrInput `pulumi:"cve"`
	// Contains information about the impact of this vulnerability, this will change with time.
	Impacts pulumi.StringArrayInput `pulumi:"impacts"`
	// Justification provides the justification when the state of the assessment if NOT_AFFECTED.
	Justification JustificationPtrInput `pulumi:"justification"`
	// A detailed description of this Vex.
	LongDescription pulumi.StringPtrInput `pulumi:"longDescription"`
	// Holds a list of references associated with this vulnerability item and assessment. These uris have additional information about the vulnerability and the assessment itself. E.g. Link to a document which details how this assessment concluded the state of this vulnerability.
	RelatedUris RelatedUrlArrayInput `pulumi:"relatedUris"`
	// Specifies details on how to handle (and presumably, fix) a vulnerability.
	Remediations RemediationArrayInput `pulumi:"remediations"`
	// A one sentence description of this Vex.
	ShortDescription pulumi.StringPtrInput `pulumi:"shortDescription"`
	// Provides the state of this Vulnerability assessment.
	State AssessmentStatePtrInput `pulumi:"state"`
	// The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc.
	VulnerabilityId pulumi.StringPtrInput `pulumi:"vulnerabilityId"`
}

func (AssessmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Assessment)(nil)).Elem()
}

func (i AssessmentArgs) ToAssessmentOutput() AssessmentOutput {
	return i.ToAssessmentOutputWithContext(context.Background())
}

func (i AssessmentArgs) ToAssessmentOutputWithContext(ctx context.Context) AssessmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentOutput)
}

func (i AssessmentArgs) ToAssessmentPtrOutput() AssessmentPtrOutput {
	return i.ToAssessmentPtrOutputWithContext(context.Background())
}

func (i AssessmentArgs) ToAssessmentPtrOutputWithContext(ctx context.Context) AssessmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentOutput).ToAssessmentPtrOutputWithContext(ctx)
}

// AssessmentPtrInput is an input type that accepts AssessmentArgs, AssessmentPtr and AssessmentPtrOutput values.
// You can construct a concrete instance of `AssessmentPtrInput` via:
//
//	        AssessmentArgs{...}
//
//	or:
//
//	        nil
type AssessmentPtrInput interface {
	pulumi.Input

	ToAssessmentPtrOutput() AssessmentPtrOutput
	ToAssessmentPtrOutputWithContext(context.Context) AssessmentPtrOutput
}

type assessmentPtrType AssessmentArgs

func AssessmentPtr(v *AssessmentArgs) AssessmentPtrInput {
	return (*assessmentPtrType)(v)
}

func (*assessmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Assessment)(nil)).Elem()
}

func (i *assessmentPtrType) ToAssessmentPtrOutput() AssessmentPtrOutput {
	return i.ToAssessmentPtrOutputWithContext(context.Background())
}

func (i *assessmentPtrType) ToAssessmentPtrOutputWithContext(ctx context.Context) AssessmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentPtrOutput)
}

// Assessment provides all information that is related to a single vulnerability for this product.
type AssessmentOutput struct{ *pulumi.OutputState }

func (AssessmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Assessment)(nil)).Elem()
}

func (o AssessmentOutput) ToAssessmentOutput() AssessmentOutput {
	return o
}

func (o AssessmentOutput) ToAssessmentOutputWithContext(ctx context.Context) AssessmentOutput {
	return o
}

func (o AssessmentOutput) ToAssessmentPtrOutput() AssessmentPtrOutput {
	return o.ToAssessmentPtrOutputWithContext(context.Background())
}

func (o AssessmentOutput) ToAssessmentPtrOutputWithContext(ctx context.Context) AssessmentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Assessment) *Assessment {
		return &v
	}).(AssessmentPtrOutput)
}

// Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.
//
// Deprecated: Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.
func (o AssessmentOutput) Cve() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Assessment) *string { return v.Cve }).(pulumi.StringPtrOutput)
}

// Contains information about the impact of this vulnerability, this will change with time.
func (o AssessmentOutput) Impacts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Assessment) []string { return v.Impacts }).(pulumi.StringArrayOutput)
}

// Justification provides the justification when the state of the assessment if NOT_AFFECTED.
func (o AssessmentOutput) Justification() JustificationPtrOutput {
	return o.ApplyT(func(v Assessment) *Justification { return v.Justification }).(JustificationPtrOutput)
}

// A detailed description of this Vex.
func (o AssessmentOutput) LongDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Assessment) *string { return v.LongDescription }).(pulumi.StringPtrOutput)
}

// Holds a list of references associated with this vulnerability item and assessment. These uris have additional information about the vulnerability and the assessment itself. E.g. Link to a document which details how this assessment concluded the state of this vulnerability.
func (o AssessmentOutput) RelatedUris() RelatedUrlArrayOutput {
	return o.ApplyT(func(v Assessment) []RelatedUrl { return v.RelatedUris }).(RelatedUrlArrayOutput)
}

// Specifies details on how to handle (and presumably, fix) a vulnerability.
func (o AssessmentOutput) Remediations() RemediationArrayOutput {
	return o.ApplyT(func(v Assessment) []Remediation { return v.Remediations }).(RemediationArrayOutput)
}

// A one sentence description of this Vex.
func (o AssessmentOutput) ShortDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Assessment) *string { return v.ShortDescription }).(pulumi.StringPtrOutput)
}

// Provides the state of this Vulnerability assessment.
func (o AssessmentOutput) State() AssessmentStatePtrOutput {
	return o.ApplyT(func(v Assessment) *AssessmentState { return v.State }).(AssessmentStatePtrOutput)
}

// The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc.
func (o AssessmentOutput) VulnerabilityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Assessment) *string { return v.VulnerabilityId }).(pulumi.StringPtrOutput)
}

type AssessmentPtrOutput struct{ *pulumi.OutputState }

func (AssessmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Assessment)(nil)).Elem()
}

func (o AssessmentPtrOutput) ToAssessmentPtrOutput() AssessmentPtrOutput {
	return o
}

func (o AssessmentPtrOutput) ToAssessmentPtrOutputWithContext(ctx context.Context) AssessmentPtrOutput {
	return o
}

func (o AssessmentPtrOutput) Elem() AssessmentOutput {
	return o.ApplyT(func(v *Assessment) Assessment {
		if v != nil {
			return *v
		}
		var ret Assessment
		return ret
	}).(AssessmentOutput)
}

// Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.
//
// Deprecated: Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.
func (o AssessmentPtrOutput) Cve() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Assessment) *string {
		if v == nil {
			return nil
		}
		return v.Cve
	}).(pulumi.StringPtrOutput)
}

// Contains information about the impact of this vulnerability, this will change with time.
func (o AssessmentPtrOutput) Impacts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Assessment) []string {
		if v == nil {
			return nil
		}
		return v.Impacts
	}).(pulumi.StringArrayOutput)
}

// Justification provides the justification when the state of the assessment if NOT_AFFECTED.
func (o AssessmentPtrOutput) Justification() JustificationPtrOutput {
	return o.ApplyT(func(v *Assessment) *Justification {
		if v == nil {
			return nil
		}
		return v.Justification
	}).(JustificationPtrOutput)
}

// A detailed description of this Vex.
func (o AssessmentPtrOutput) LongDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Assessment) *string {
		if v == nil {
			return nil
		}
		return v.LongDescription
	}).(pulumi.StringPtrOutput)
}

// Holds a list of references associated with this vulnerability item and assessment. These uris have additional information about the vulnerability and the assessment itself. E.g. Link to a document which details how this assessment concluded the state of this vulnerability.
func (o AssessmentPtrOutput) RelatedUris() RelatedUrlArrayOutput {
	return o.ApplyT(func(v *Assessment) []RelatedUrl {
		if v == nil {
			return nil
		}
		return v.RelatedUris
	}).(RelatedUrlArrayOutput)
}

// Specifies details on how to handle (and presumably, fix) a vulnerability.
func (o AssessmentPtrOutput) Remediations() RemediationArrayOutput {
	return o.ApplyT(func(v *Assessment) []Remediation {
		if v == nil {
			return nil
		}
		return v.Remediations
	}).(RemediationArrayOutput)
}

// A one sentence description of this Vex.
func (o AssessmentPtrOutput) ShortDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Assessment) *string {
		if v == nil {
			return nil
		}
		return v.ShortDescription
	}).(pulumi.StringPtrOutput)
}

// Provides the state of this Vulnerability assessment.
func (o AssessmentPtrOutput) State() AssessmentStatePtrOutput {
	return o.ApplyT(func(v *Assessment) *AssessmentState {
		if v == nil {
			return nil
		}
		return v.State
	}).(AssessmentStatePtrOutput)
}

// The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc.
func (o AssessmentPtrOutput) VulnerabilityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Assessment) *string {
		if v == nil {
			return nil
		}
		return v.VulnerabilityId
	}).(pulumi.StringPtrOutput)
}

// Assessment provides all information that is related to a single vulnerability for this product.
type AssessmentResponse struct {
	// Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.
	//
	// Deprecated: Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.
	Cve string `pulumi:"cve"`
	// Contains information about the impact of this vulnerability, this will change with time.
	Impacts []string `pulumi:"impacts"`
	// Justification provides the justification when the state of the assessment if NOT_AFFECTED.
	Justification JustificationResponse `pulumi:"justification"`
	// A detailed description of this Vex.
	LongDescription string `pulumi:"longDescription"`
	// Holds a list of references associated with this vulnerability item and assessment. These uris have additional information about the vulnerability and the assessment itself. E.g. Link to a document which details how this assessment concluded the state of this vulnerability.
	RelatedUris []RelatedUrlResponse `pulumi:"relatedUris"`
	// Specifies details on how to handle (and presumably, fix) a vulnerability.
	Remediations []RemediationResponse `pulumi:"remediations"`
	// A one sentence description of this Vex.
	ShortDescription string `pulumi:"shortDescription"`
	// Provides the state of this Vulnerability assessment.
	State string `pulumi:"state"`
	// The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc.
	VulnerabilityId string `pulumi:"vulnerabilityId"`
}

// Assessment provides all information that is related to a single vulnerability for this product.
type AssessmentResponseOutput struct{ *pulumi.OutputState }

func (AssessmentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentResponse)(nil)).Elem()
}

func (o AssessmentResponseOutput) ToAssessmentResponseOutput() AssessmentResponseOutput {
	return o
}

func (o AssessmentResponseOutput) ToAssessmentResponseOutputWithContext(ctx context.Context) AssessmentResponseOutput {
	return o
}

// Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.
//
// Deprecated: Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.
func (o AssessmentResponseOutput) Cve() pulumi.StringOutput {
	return o.ApplyT(func(v AssessmentResponse) string { return v.Cve }).(pulumi.StringOutput)
}

// Contains information about the impact of this vulnerability, this will change with time.
func (o AssessmentResponseOutput) Impacts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AssessmentResponse) []string { return v.Impacts }).(pulumi.StringArrayOutput)
}

// Justification provides the justification when the state of the assessment if NOT_AFFECTED.
func (o AssessmentResponseOutput) Justification() JustificationResponseOutput {
	return o.ApplyT(func(v AssessmentResponse) JustificationResponse { return v.Justification }).(JustificationResponseOutput)
}

// A detailed description of this Vex.
func (o AssessmentResponseOutput) LongDescription() pulumi.StringOutput {
	return o.ApplyT(func(v AssessmentResponse) string { return v.LongDescription }).(pulumi.StringOutput)
}

// Holds a list of references associated with this vulnerability item and assessment. These uris have additional information about the vulnerability and the assessment itself. E.g. Link to a document which details how this assessment concluded the state of this vulnerability.
func (o AssessmentResponseOutput) RelatedUris() RelatedUrlResponseArrayOutput {
	return o.ApplyT(func(v AssessmentResponse) []RelatedUrlResponse { return v.RelatedUris }).(RelatedUrlResponseArrayOutput)
}

// Specifies details on how to handle (and presumably, fix) a vulnerability.
func (o AssessmentResponseOutput) Remediations() RemediationResponseArrayOutput {
	return o.ApplyT(func(v AssessmentResponse) []RemediationResponse { return v.Remediations }).(RemediationResponseArrayOutput)
}

// A one sentence description of this Vex.
func (o AssessmentResponseOutput) ShortDescription() pulumi.StringOutput {
	return o.ApplyT(func(v AssessmentResponse) string { return v.ShortDescription }).(pulumi.StringOutput)
}

// Provides the state of this Vulnerability assessment.
func (o AssessmentResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v AssessmentResponse) string { return v.State }).(pulumi.StringOutput)
}

// The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc.
func (o AssessmentResponseOutput) VulnerabilityId() pulumi.StringOutput {
	return o.ApplyT(func(v AssessmentResponse) string { return v.VulnerabilityId }).(pulumi.StringOutput)
}

// Note kind that represents a logical attestation "role" or "authority". For example, an organization might have one `Authority` for "QA" and one for "build". This note is intended to act strictly as a grouping mechanism for the attached occurrences (Attestations). This grouping mechanism also provides a security boundary, since IAM ACLs gate the ability for a principle to attach an occurrence to a given note. It also provides a single point of lookup to find all attached attestation occurrences, even if they don't all live in the same project.
type AttestationNote struct {
	// Hint hints at the purpose of the attestation authority.
	Hint *Hint `pulumi:"hint"`
}

// AttestationNoteInput is an input type that accepts AttestationNoteArgs and AttestationNoteOutput values.
// You can construct a concrete instance of `AttestationNoteInput` via:
//
//	AttestationNoteArgs{...}
type AttestationNoteInput interface {
	pulumi.Input

	ToAttestationNoteOutput() AttestationNoteOutput
	ToAttestationNoteOutputWithContext(context.Context) AttestationNoteOutput
}

// Note kind that represents a logical attestation "role" or "authority". For example, an organization might have one `Authority` for "QA" and one for "build". This note is intended to act strictly as a grouping mechanism for the attached occurrences (Attestations). This grouping mechanism also provides a security boundary, since IAM ACLs gate the ability for a principle to attach an occurrence to a given note. It also provides a single point of lookup to find all attached attestation occurrences, even if they don't all live in the same project.
type AttestationNoteArgs struct {
	// Hint hints at the purpose of the attestation authority.
	Hint HintPtrInput `pulumi:"hint"`
}

func (AttestationNoteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AttestationNote)(nil)).Elem()
}

func (i AttestationNoteArgs) ToAttestationNoteOutput() AttestationNoteOutput {
	return i.ToAttestationNoteOutputWithContext(context.Background())
}

func (i AttestationNoteArgs) ToAttestationNoteOutputWithContext(ctx context.Context) AttestationNoteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttestationNoteOutput)
}

func (i AttestationNoteArgs) ToAttestationNotePtrOutput() AttestationNotePtrOutput {
	return i.ToAttestationNotePtrOutputWithContext(context.Background())
}

func (i AttestationNoteArgs) ToAttestationNotePtrOutputWithContext(ctx context.Context) AttestationNotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttestationNoteOutput).ToAttestationNotePtrOutputWithContext(ctx)
}

// AttestationNotePtrInput is an input type that accepts AttestationNoteArgs, AttestationNotePtr and AttestationNotePtrOutput values.
// You can construct a concrete instance of `AttestationNotePtrInput` via:
//
//	        AttestationNoteArgs{...}
//
//	or:
//
//	        nil
type AttestationNotePtrInput interface {
	pulumi.Input

	ToAttestationNotePtrOutput() AttestationNotePtrOutput
	ToAttestationNotePtrOutputWithContext(context.Context) AttestationNotePtrOutput
}

type attestationNotePtrType AttestationNoteArgs

func AttestationNotePtr(v *AttestationNoteArgs) AttestationNotePtrInput {
	return (*attestationNotePtrType)(v)
}

func (*attestationNotePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AttestationNote)(nil)).Elem()
}

func (i *attestationNotePtrType) ToAttestationNotePtrOutput() AttestationNotePtrOutput {
	return i.ToAttestationNotePtrOutputWithContext(context.Background())
}

func (i *attestationNotePtrType) ToAttestationNotePtrOutputWithContext(ctx context.Context) AttestationNotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttestationNotePtrOutput)
}

// Note kind that represents a logical attestation "role" or "authority". For example, an organization might have one `Authority` for "QA" and one for "build". This note is intended to act strictly as a grouping mechanism for the attached occurrences (Attestations). This grouping mechanism also provides a security boundary, since IAM ACLs gate the ability for a principle to attach an occurrence to a given note. It also provides a single point of lookup to find all attached attestation occurrences, even if they don't all live in the same project.
type AttestationNoteOutput struct{ *pulumi.OutputState }

func (AttestationNoteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AttestationNote)(nil)).Elem()
}

func (o AttestationNoteOutput) ToAttestationNoteOutput() AttestationNoteOutput {
	return o
}

func (o AttestationNoteOutput) ToAttestationNoteOutputWithContext(ctx context.Context) AttestationNoteOutput {
	return o
}

func (o AttestationNoteOutput) ToAttestationNotePtrOutput() AttestationNotePtrOutput {
	return o.ToAttestationNotePtrOutputWithContext(context.Background())
}

func (o AttestationNoteOutput) ToAttestationNotePtrOutputWithContext(ctx context.Context) AttestationNotePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AttestationNote) *AttestationNote {
		return &v
	}).(AttestationNotePtrOutput)
}

// Hint hints at the purpose of the attestation authority.
func (o AttestationNoteOutput) Hint() HintPtrOutput {
	return o.ApplyT(func(v AttestationNote) *Hint { return v.Hint }).(HintPtrOutput)
}

type AttestationNotePtrOutput struct{ *pulumi.OutputState }

func (AttestationNotePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AttestationNote)(nil)).Elem()
}

func (o AttestationNotePtrOutput) ToAttestationNotePtrOutput() AttestationNotePtrOutput {
	return o
}

func (o AttestationNotePtrOutput) ToAttestationNotePtrOutputWithContext(ctx context.Context) AttestationNotePtrOutput {
	return o
}

func (o AttestationNotePtrOutput) Elem() AttestationNoteOutput {
	return o.ApplyT(func(v *AttestationNote) AttestationNote {
		if v != nil {
			return *v
		}
		var ret AttestationNote
		return ret
	}).(AttestationNoteOutput)
}

// Hint hints at the purpose of the attestation authority.
func (o AttestationNotePtrOutput) Hint() HintPtrOutput {
	return o.ApplyT(func(v *AttestationNote) *Hint {
		if v == nil {
			return nil
		}
		return v.Hint
	}).(HintPtrOutput)
}

// Note kind that represents a logical attestation "role" or "authority". For example, an organization might have one `Authority` for "QA" and one for "build". This note is intended to act strictly as a grouping mechanism for the attached occurrences (Attestations). This grouping mechanism also provides a security boundary, since IAM ACLs gate the ability for a principle to attach an occurrence to a given note. It also provides a single point of lookup to find all attached attestation occurrences, even if they don't all live in the same project.
type AttestationNoteResponse struct {
	// Hint hints at the purpose of the attestation authority.
	Hint HintResponse `pulumi:"hint"`
}

// Note kind that represents a logical attestation "role" or "authority". For example, an organization might have one `Authority` for "QA" and one for "build". This note is intended to act strictly as a grouping mechanism for the attached occurrences (Attestations). This grouping mechanism also provides a security boundary, since IAM ACLs gate the ability for a principle to attach an occurrence to a given note. It also provides a single point of lookup to find all attached attestation occurrences, even if they don't all live in the same project.
type AttestationNoteResponseOutput struct{ *pulumi.OutputState }

func (AttestationNoteResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AttestationNoteResponse)(nil)).Elem()
}

func (o AttestationNoteResponseOutput) ToAttestationNoteResponseOutput() AttestationNoteResponseOutput {
	return o
}

func (o AttestationNoteResponseOutput) ToAttestationNoteResponseOutputWithContext(ctx context.Context) AttestationNoteResponseOutput {
	return o
}

// Hint hints at the purpose of the attestation authority.
func (o AttestationNoteResponseOutput) Hint() HintResponseOutput {
	return o.ApplyT(func(v AttestationNoteResponse) HintResponse { return v.Hint }).(HintResponseOutput)
}

// Occurrence that represents a single "attestation". The authenticity of an attestation can be verified using the attached signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish trust. In this circumstance, the authority to which this attestation is attached is primarily useful for lookup (how to find this attestation if you already know the authority and artifact to be verified) and intent (for which authority this attestation was intended to sign.
type AttestationOccurrence struct {
	// One or more JWTs encoding a self-contained attestation. Each JWT encodes the payload that it verifies within the JWT itself. Verifier implementation SHOULD ignore the `serialized_payload` field when verifying these JWTs. If only JWTs are present on this AttestationOccurrence, then the `serialized_payload` SHOULD be left empty. Each JWT SHOULD encode a claim specific to the `resource_uri` of this Occurrence, but this is not validated by Grafeas metadata API implementations. The JWT itself is opaque to Grafeas.
	Jwts []Jwt `pulumi:"jwts"`
	// The serialized payload that is verified by one or more `signatures`.
	SerializedPayload string `pulumi:"serializedPayload"`
	// One or more signatures over `serialized_payload`. Verifier implementations should consider this attestation message verified if at least one `signature` verifies `serialized_payload`. See `Signature` in common.proto for more details on signature structure and verification.
	Signatures []Signature `pulumi:"signatures"`
}

// AttestationOccurrenceInput is an input type that accepts AttestationOccurrenceArgs and AttestationOccurrenceOutput values.
// You can construct a concrete instance of `AttestationOccurrenceInput` via:
//
//	AttestationOccurrenceArgs{...}
type AttestationOccurrenceInput interface {
	pulumi.Input

	ToAttestationOccurrenceOutput() AttestationOccurrenceOutput
	ToAttestationOccurrenceOutputWithContext(context.Context) AttestationOccurrenceOutput
}

// Occurrence that represents a single "attestation". The authenticity of an attestation can be verified using the attached signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish trust. In this circumstance, the authority to which this attestation is attached is primarily useful for lookup (how to find this attestation if you already know the authority and artifact to be verified) and intent (for which authority this attestation was intended to sign.
type AttestationOccurrenceArgs struct {
	// One or more JWTs encoding a self-contained attestation. Each JWT encodes the payload that it verifies within the JWT itself. Verifier implementation SHOULD ignore the `serialized_payload` field when verifying these JWTs. If only JWTs are present on this AttestationOccurrence, then the `serialized_payload` SHOULD be left empty. Each JWT SHOULD encode a claim specific to the `resource_uri` of this Occurrence, but this is not validated by Grafeas metadata API implementations. The JWT itself is opaque to Grafeas.
	Jwts JwtArrayInput `pulumi:"jwts"`
	// The serialized payload that is verified by one or more `signatures`.
	SerializedPayload pulumi.StringInput `pulumi:"serializedPayload"`
	// One or more signatures over `serialized_payload`. Verifier implementations should consider this attestation message verified if at least one `signature` verifies `serialized_payload`. See `Signature` in common.proto for more details on signature structure and verification.
	Signatures SignatureArrayInput `pulumi:"signatures"`
}

func (AttestationOccurrenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AttestationOccurrence)(nil)).Elem()
}

func (i AttestationOccurrenceArgs) ToAttestationOccurrenceOutput() AttestationOccurrenceOutput {
	return i.ToAttestationOccurrenceOutputWithContext(context.Background())
}

func (i AttestationOccurrenceArgs) ToAttestationOccurrenceOutputWithContext(ctx context.Context) AttestationOccurrenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttestationOccurrenceOutput)
}

func (i AttestationOccurrenceArgs) ToAttestationOccurrencePtrOutput() AttestationOccurrencePtrOutput {
	return i.ToAttestationOccurrencePtrOutputWithContext(context.Background())
}

func (i AttestationOccurrenceArgs) ToAttestationOccurrencePtrOutputWithContext(ctx context.Context) AttestationOccurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttestationOccurrenceOutput).ToAttestationOccurrencePtrOutputWithContext(ctx)
}

// AttestationOccurrencePtrInput is an input type that accepts AttestationOccurrenceArgs, AttestationOccurrencePtr and AttestationOccurrencePtrOutput values.
// You can construct a concrete instance of `AttestationOccurrencePtrInput` via:
//
//	        AttestationOccurrenceArgs{...}
//
//	or:
//
//	        nil
type AttestationOccurrencePtrInput interface {
	pulumi.Input

	ToAttestationOccurrencePtrOutput() AttestationOccurrencePtrOutput
	ToAttestationOccurrencePtrOutputWithContext(context.Context) AttestationOccurrencePtrOutput
}

type attestationOccurrencePtrType AttestationOccurrenceArgs

func AttestationOccurrencePtr(v *AttestationOccurrenceArgs) AttestationOccurrencePtrInput {
	return (*attestationOccurrencePtrType)(v)
}

func (*attestationOccurrencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AttestationOccurrence)(nil)).Elem()
}

func (i *attestationOccurrencePtrType) ToAttestationOccurrencePtrOutput() AttestationOccurrencePtrOutput {
	return i.ToAttestationOccurrencePtrOutputWithContext(context.Background())
}

func (i *attestationOccurrencePtrType) ToAttestationOccurrencePtrOutputWithContext(ctx context.Context) AttestationOccurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttestationOccurrencePtrOutput)
}

// Occurrence that represents a single "attestation". The authenticity of an attestation can be verified using the attached signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish trust. In this circumstance, the authority to which this attestation is attached is primarily useful for lookup (how to find this attestation if you already know the authority and artifact to be verified) and intent (for which authority this attestation was intended to sign.
type AttestationOccurrenceOutput struct{ *pulumi.OutputState }

func (AttestationOccurrenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AttestationOccurrence)(nil)).Elem()
}

func (o AttestationOccurrenceOutput) ToAttestationOccurrenceOutput() AttestationOccurrenceOutput {
	return o
}

func (o AttestationOccurrenceOutput) ToAttestationOccurrenceOutputWithContext(ctx context.Context) AttestationOccurrenceOutput {
	return o
}

func (o AttestationOccurrenceOutput) ToAttestationOccurrencePtrOutput() AttestationOccurrencePtrOutput {
	return o.ToAttestationOccurrencePtrOutputWithContext(context.Background())
}

func (o AttestationOccurrenceOutput) ToAttestationOccurrencePtrOutputWithContext(ctx context.Context) AttestationOccurrencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AttestationOccurrence) *AttestationOccurrence {
		return &v
	}).(AttestationOccurrencePtrOutput)
}

// One or more JWTs encoding a self-contained attestation. Each JWT encodes the payload that it verifies within the JWT itself. Verifier implementation SHOULD ignore the `serialized_payload` field when verifying these JWTs. If only JWTs are present on this AttestationOccurrence, then the `serialized_payload` SHOULD be left empty. Each JWT SHOULD encode a claim specific to the `resource_uri` of this Occurrence, but this is not validated by Grafeas metadata API implementations. The JWT itself is opaque to Grafeas.
func (o AttestationOccurrenceOutput) Jwts() JwtArrayOutput {
	return o.ApplyT(func(v AttestationOccurrence) []Jwt { return v.Jwts }).(JwtArrayOutput)
}

// The serialized payload that is verified by one or more `signatures`.
func (o AttestationOccurrenceOutput) SerializedPayload() pulumi.StringOutput {
	return o.ApplyT(func(v AttestationOccurrence) string { return v.SerializedPayload }).(pulumi.StringOutput)
}

// One or more signatures over `serialized_payload`. Verifier implementations should consider this attestation message verified if at least one `signature` verifies `serialized_payload`. See `Signature` in common.proto for more details on signature structure and verification.
func (o AttestationOccurrenceOutput) Signatures() SignatureArrayOutput {
	return o.ApplyT(func(v AttestationOccurrence) []Signature { return v.Signatures }).(SignatureArrayOutput)
}

type AttestationOccurrencePtrOutput struct{ *pulumi.OutputState }

func (AttestationOccurrencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AttestationOccurrence)(nil)).Elem()
}

func (o AttestationOccurrencePtrOutput) ToAttestationOccurrencePtrOutput() AttestationOccurrencePtrOutput {
	return o
}

func (o AttestationOccurrencePtrOutput) ToAttestationOccurrencePtrOutputWithContext(ctx context.Context) AttestationOccurrencePtrOutput {
	return o
}

func (o AttestationOccurrencePtrOutput) Elem() AttestationOccurrenceOutput {
	return o.ApplyT(func(v *AttestationOccurrence) AttestationOccurrence {
		if v != nil {
			return *v
		}
		var ret AttestationOccurrence
		return ret
	}).(AttestationOccurrenceOutput)
}

// One or more JWTs encoding a self-contained attestation. Each JWT encodes the payload that it verifies within the JWT itself. Verifier implementation SHOULD ignore the `serialized_payload` field when verifying these JWTs. If only JWTs are present on this AttestationOccurrence, then the `serialized_payload` SHOULD be left empty. Each JWT SHOULD encode a claim specific to the `resource_uri` of this Occurrence, but this is not validated by Grafeas metadata API implementations. The JWT itself is opaque to Grafeas.
func (o AttestationOccurrencePtrOutput) Jwts() JwtArrayOutput {
	return o.ApplyT(func(v *AttestationOccurrence) []Jwt {
		if v == nil {
			return nil
		}
		return v.Jwts
	}).(JwtArrayOutput)
}

// The serialized payload that is verified by one or more `signatures`.
func (o AttestationOccurrencePtrOutput) SerializedPayload() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AttestationOccurrence) *string {
		if v == nil {
			return nil
		}
		return &v.SerializedPayload
	}).(pulumi.StringPtrOutput)
}

// One or more signatures over `serialized_payload`. Verifier implementations should consider this attestation message verified if at least one `signature` verifies `serialized_payload`. See `Signature` in common.proto for more details on signature structure and verification.
func (o AttestationOccurrencePtrOutput) Signatures() SignatureArrayOutput {
	return o.ApplyT(func(v *AttestationOccurrence) []Signature {
		if v == nil {
			return nil
		}
		return v.Signatures
	}).(SignatureArrayOutput)
}

// Occurrence that represents a single "attestation". The authenticity of an attestation can be verified using the attached signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish trust. In this circumstance, the authority to which this attestation is attached is primarily useful for lookup (how to find this attestation if you already know the authority and artifact to be verified) and intent (for which authority this attestation was intended to sign.
type AttestationOccurrenceResponse struct {
	// One or more JWTs encoding a self-contained attestation. Each JWT encodes the payload that it verifies within the JWT itself. Verifier implementation SHOULD ignore the `serialized_payload` field when verifying these JWTs. If only JWTs are present on this AttestationOccurrence, then the `serialized_payload` SHOULD be left empty. Each JWT SHOULD encode a claim specific to the `resource_uri` of this Occurrence, but this is not validated by Grafeas metadata API implementations. The JWT itself is opaque to Grafeas.
	Jwts []JwtResponse `pulumi:"jwts"`
	// The serialized payload that is verified by one or more `signatures`.
	SerializedPayload string `pulumi:"serializedPayload"`
	// One or more signatures over `serialized_payload`. Verifier implementations should consider this attestation message verified if at least one `signature` verifies `serialized_payload`. See `Signature` in common.proto for more details on signature structure and verification.
	Signatures []SignatureResponse `pulumi:"signatures"`
}

// Occurrence that represents a single "attestation". The authenticity of an attestation can be verified using the attached signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish trust. In this circumstance, the authority to which this attestation is attached is primarily useful for lookup (how to find this attestation if you already know the authority and artifact to be verified) and intent (for which authority this attestation was intended to sign.
type AttestationOccurrenceResponseOutput struct{ *pulumi.OutputState }

func (AttestationOccurrenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AttestationOccurrenceResponse)(nil)).Elem()
}

func (o AttestationOccurrenceResponseOutput) ToAttestationOccurrenceResponseOutput() AttestationOccurrenceResponseOutput {
	return o
}

func (o AttestationOccurrenceResponseOutput) ToAttestationOccurrenceResponseOutputWithContext(ctx context.Context) AttestationOccurrenceResponseOutput {
	return o
}

// One or more JWTs encoding a self-contained attestation. Each JWT encodes the payload that it verifies within the JWT itself. Verifier implementation SHOULD ignore the `serialized_payload` field when verifying these JWTs. If only JWTs are present on this AttestationOccurrence, then the `serialized_payload` SHOULD be left empty. Each JWT SHOULD encode a claim specific to the `resource_uri` of this Occurrence, but this is not validated by Grafeas metadata API implementations. The JWT itself is opaque to Grafeas.
func (o AttestationOccurrenceResponseOutput) Jwts() JwtResponseArrayOutput {
	return o.ApplyT(func(v AttestationOccurrenceResponse) []JwtResponse { return v.Jwts }).(JwtResponseArrayOutput)
}

// The serialized payload that is verified by one or more `signatures`.
func (o AttestationOccurrenceResponseOutput) SerializedPayload() pulumi.StringOutput {
	return o.ApplyT(func(v AttestationOccurrenceResponse) string { return v.SerializedPayload }).(pulumi.StringOutput)
}

// One or more signatures over `serialized_payload`. Verifier implementations should consider this attestation message verified if at least one `signature` verifies `serialized_payload`. See `Signature` in common.proto for more details on signature structure and verification.
func (o AttestationOccurrenceResponseOutput) Signatures() SignatureResponseArrayOutput {
	return o.ApplyT(func(v AttestationOccurrenceResponse) []SignatureResponse { return v.Signatures }).(SignatureResponseArrayOutput)
}

// Associates `members`, or principals, with a `role`.
type Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//	BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates `members`, or principals, with a `role`.
type BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//	BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingResponse struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprResponse `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role string `pulumi:"role"`
}

// Associates `members`, or principals, with a `role`.
type BindingResponseOutput struct{ *pulumi.OutputState }

func (BindingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingResponse)(nil)).Elem()
}

func (o BindingResponseOutput) ToBindingResponseOutput() BindingResponseOutput {
	return o
}

func (o BindingResponseOutput) ToBindingResponseOutputWithContext(ctx context.Context) BindingResponseOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingResponseOutput) Condition() ExprResponseOutput {
	return o.ApplyT(func(v BindingResponse) ExprResponse { return v.Condition }).(ExprResponseOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
func (o BindingResponseOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BindingResponse) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingResponseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v BindingResponse) string { return v.Role }).(pulumi.StringOutput)
}

type BindingResponseArrayOutput struct{ *pulumi.OutputState }

func (BindingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingResponse)(nil)).Elem()
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutput() BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutputWithContext(ctx context.Context) BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) Index(i pulumi.IntInput) BindingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BindingResponse {
		return vs[0].([]BindingResponse)[vs[1].(int)]
	}).(BindingResponseOutput)
}

type BuildDefinition struct {
	BuildType            *string                `pulumi:"buildType"`
	ExternalParameters   map[string]interface{} `pulumi:"externalParameters"`
	InternalParameters   map[string]interface{} `pulumi:"internalParameters"`
	ResolvedDependencies []ResourceDescriptor   `pulumi:"resolvedDependencies"`
}

// BuildDefinitionInput is an input type that accepts BuildDefinitionArgs and BuildDefinitionOutput values.
// You can construct a concrete instance of `BuildDefinitionInput` via:
//
//	BuildDefinitionArgs{...}
type BuildDefinitionInput interface {
	pulumi.Input

	ToBuildDefinitionOutput() BuildDefinitionOutput
	ToBuildDefinitionOutputWithContext(context.Context) BuildDefinitionOutput
}

type BuildDefinitionArgs struct {
	BuildType            pulumi.StringPtrInput        `pulumi:"buildType"`
	ExternalParameters   pulumi.MapInput              `pulumi:"externalParameters"`
	InternalParameters   pulumi.MapInput              `pulumi:"internalParameters"`
	ResolvedDependencies ResourceDescriptorArrayInput `pulumi:"resolvedDependencies"`
}

func (BuildDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildDefinition)(nil)).Elem()
}

func (i BuildDefinitionArgs) ToBuildDefinitionOutput() BuildDefinitionOutput {
	return i.ToBuildDefinitionOutputWithContext(context.Background())
}

func (i BuildDefinitionArgs) ToBuildDefinitionOutputWithContext(ctx context.Context) BuildDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildDefinitionOutput)
}

func (i BuildDefinitionArgs) ToBuildDefinitionPtrOutput() BuildDefinitionPtrOutput {
	return i.ToBuildDefinitionPtrOutputWithContext(context.Background())
}

func (i BuildDefinitionArgs) ToBuildDefinitionPtrOutputWithContext(ctx context.Context) BuildDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildDefinitionOutput).ToBuildDefinitionPtrOutputWithContext(ctx)
}

// BuildDefinitionPtrInput is an input type that accepts BuildDefinitionArgs, BuildDefinitionPtr and BuildDefinitionPtrOutput values.
// You can construct a concrete instance of `BuildDefinitionPtrInput` via:
//
//	        BuildDefinitionArgs{...}
//
//	or:
//
//	        nil
type BuildDefinitionPtrInput interface {
	pulumi.Input

	ToBuildDefinitionPtrOutput() BuildDefinitionPtrOutput
	ToBuildDefinitionPtrOutputWithContext(context.Context) BuildDefinitionPtrOutput
}

type buildDefinitionPtrType BuildDefinitionArgs

func BuildDefinitionPtr(v *BuildDefinitionArgs) BuildDefinitionPtrInput {
	return (*buildDefinitionPtrType)(v)
}

func (*buildDefinitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildDefinition)(nil)).Elem()
}

func (i *buildDefinitionPtrType) ToBuildDefinitionPtrOutput() BuildDefinitionPtrOutput {
	return i.ToBuildDefinitionPtrOutputWithContext(context.Background())
}

func (i *buildDefinitionPtrType) ToBuildDefinitionPtrOutputWithContext(ctx context.Context) BuildDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildDefinitionPtrOutput)
}

type BuildDefinitionOutput struct{ *pulumi.OutputState }

func (BuildDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildDefinition)(nil)).Elem()
}

func (o BuildDefinitionOutput) ToBuildDefinitionOutput() BuildDefinitionOutput {
	return o
}

func (o BuildDefinitionOutput) ToBuildDefinitionOutputWithContext(ctx context.Context) BuildDefinitionOutput {
	return o
}

func (o BuildDefinitionOutput) ToBuildDefinitionPtrOutput() BuildDefinitionPtrOutput {
	return o.ToBuildDefinitionPtrOutputWithContext(context.Background())
}

func (o BuildDefinitionOutput) ToBuildDefinitionPtrOutputWithContext(ctx context.Context) BuildDefinitionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BuildDefinition) *BuildDefinition {
		return &v
	}).(BuildDefinitionPtrOutput)
}

func (o BuildDefinitionOutput) BuildType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildDefinition) *string { return v.BuildType }).(pulumi.StringPtrOutput)
}

func (o BuildDefinitionOutput) ExternalParameters() pulumi.MapOutput {
	return o.ApplyT(func(v BuildDefinition) map[string]interface{} { return v.ExternalParameters }).(pulumi.MapOutput)
}

func (o BuildDefinitionOutput) InternalParameters() pulumi.MapOutput {
	return o.ApplyT(func(v BuildDefinition) map[string]interface{} { return v.InternalParameters }).(pulumi.MapOutput)
}

func (o BuildDefinitionOutput) ResolvedDependencies() ResourceDescriptorArrayOutput {
	return o.ApplyT(func(v BuildDefinition) []ResourceDescriptor { return v.ResolvedDependencies }).(ResourceDescriptorArrayOutput)
}

type BuildDefinitionPtrOutput struct{ *pulumi.OutputState }

func (BuildDefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildDefinition)(nil)).Elem()
}

func (o BuildDefinitionPtrOutput) ToBuildDefinitionPtrOutput() BuildDefinitionPtrOutput {
	return o
}

func (o BuildDefinitionPtrOutput) ToBuildDefinitionPtrOutputWithContext(ctx context.Context) BuildDefinitionPtrOutput {
	return o
}

func (o BuildDefinitionPtrOutput) Elem() BuildDefinitionOutput {
	return o.ApplyT(func(v *BuildDefinition) BuildDefinition {
		if v != nil {
			return *v
		}
		var ret BuildDefinition
		return ret
	}).(BuildDefinitionOutput)
}

func (o BuildDefinitionPtrOutput) BuildType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildDefinition) *string {
		if v == nil {
			return nil
		}
		return v.BuildType
	}).(pulumi.StringPtrOutput)
}

func (o BuildDefinitionPtrOutput) ExternalParameters() pulumi.MapOutput {
	return o.ApplyT(func(v *BuildDefinition) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.ExternalParameters
	}).(pulumi.MapOutput)
}

func (o BuildDefinitionPtrOutput) InternalParameters() pulumi.MapOutput {
	return o.ApplyT(func(v *BuildDefinition) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.InternalParameters
	}).(pulumi.MapOutput)
}

func (o BuildDefinitionPtrOutput) ResolvedDependencies() ResourceDescriptorArrayOutput {
	return o.ApplyT(func(v *BuildDefinition) []ResourceDescriptor {
		if v == nil {
			return nil
		}
		return v.ResolvedDependencies
	}).(ResourceDescriptorArrayOutput)
}

type BuildDefinitionResponse struct {
	BuildType            string                       `pulumi:"buildType"`
	ExternalParameters   map[string]interface{}       `pulumi:"externalParameters"`
	InternalParameters   map[string]interface{}       `pulumi:"internalParameters"`
	ResolvedDependencies []ResourceDescriptorResponse `pulumi:"resolvedDependencies"`
}

type BuildDefinitionResponseOutput struct{ *pulumi.OutputState }

func (BuildDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildDefinitionResponse)(nil)).Elem()
}

func (o BuildDefinitionResponseOutput) ToBuildDefinitionResponseOutput() BuildDefinitionResponseOutput {
	return o
}

func (o BuildDefinitionResponseOutput) ToBuildDefinitionResponseOutputWithContext(ctx context.Context) BuildDefinitionResponseOutput {
	return o
}

func (o BuildDefinitionResponseOutput) BuildType() pulumi.StringOutput {
	return o.ApplyT(func(v BuildDefinitionResponse) string { return v.BuildType }).(pulumi.StringOutput)
}

func (o BuildDefinitionResponseOutput) ExternalParameters() pulumi.MapOutput {
	return o.ApplyT(func(v BuildDefinitionResponse) map[string]interface{} { return v.ExternalParameters }).(pulumi.MapOutput)
}

func (o BuildDefinitionResponseOutput) InternalParameters() pulumi.MapOutput {
	return o.ApplyT(func(v BuildDefinitionResponse) map[string]interface{} { return v.InternalParameters }).(pulumi.MapOutput)
}

func (o BuildDefinitionResponseOutput) ResolvedDependencies() ResourceDescriptorResponseArrayOutput {
	return o.ApplyT(func(v BuildDefinitionResponse) []ResourceDescriptorResponse { return v.ResolvedDependencies }).(ResourceDescriptorResponseArrayOutput)
}

type BuildMetadata struct {
	FinishedOn   *string `pulumi:"finishedOn"`
	InvocationId *string `pulumi:"invocationId"`
	StartedOn    *string `pulumi:"startedOn"`
}

// BuildMetadataInput is an input type that accepts BuildMetadataArgs and BuildMetadataOutput values.
// You can construct a concrete instance of `BuildMetadataInput` via:
//
//	BuildMetadataArgs{...}
type BuildMetadataInput interface {
	pulumi.Input

	ToBuildMetadataOutput() BuildMetadataOutput
	ToBuildMetadataOutputWithContext(context.Context) BuildMetadataOutput
}

type BuildMetadataArgs struct {
	FinishedOn   pulumi.StringPtrInput `pulumi:"finishedOn"`
	InvocationId pulumi.StringPtrInput `pulumi:"invocationId"`
	StartedOn    pulumi.StringPtrInput `pulumi:"startedOn"`
}

func (BuildMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildMetadata)(nil)).Elem()
}

func (i BuildMetadataArgs) ToBuildMetadataOutput() BuildMetadataOutput {
	return i.ToBuildMetadataOutputWithContext(context.Background())
}

func (i BuildMetadataArgs) ToBuildMetadataOutputWithContext(ctx context.Context) BuildMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildMetadataOutput)
}

func (i BuildMetadataArgs) ToBuildMetadataPtrOutput() BuildMetadataPtrOutput {
	return i.ToBuildMetadataPtrOutputWithContext(context.Background())
}

func (i BuildMetadataArgs) ToBuildMetadataPtrOutputWithContext(ctx context.Context) BuildMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildMetadataOutput).ToBuildMetadataPtrOutputWithContext(ctx)
}

// BuildMetadataPtrInput is an input type that accepts BuildMetadataArgs, BuildMetadataPtr and BuildMetadataPtrOutput values.
// You can construct a concrete instance of `BuildMetadataPtrInput` via:
//
//	        BuildMetadataArgs{...}
//
//	or:
//
//	        nil
type BuildMetadataPtrInput interface {
	pulumi.Input

	ToBuildMetadataPtrOutput() BuildMetadataPtrOutput
	ToBuildMetadataPtrOutputWithContext(context.Context) BuildMetadataPtrOutput
}

type buildMetadataPtrType BuildMetadataArgs

func BuildMetadataPtr(v *BuildMetadataArgs) BuildMetadataPtrInput {
	return (*buildMetadataPtrType)(v)
}

func (*buildMetadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildMetadata)(nil)).Elem()
}

func (i *buildMetadataPtrType) ToBuildMetadataPtrOutput() BuildMetadataPtrOutput {
	return i.ToBuildMetadataPtrOutputWithContext(context.Background())
}

func (i *buildMetadataPtrType) ToBuildMetadataPtrOutputWithContext(ctx context.Context) BuildMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildMetadataPtrOutput)
}

type BuildMetadataOutput struct{ *pulumi.OutputState }

func (BuildMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildMetadata)(nil)).Elem()
}

func (o BuildMetadataOutput) ToBuildMetadataOutput() BuildMetadataOutput {
	return o
}

func (o BuildMetadataOutput) ToBuildMetadataOutputWithContext(ctx context.Context) BuildMetadataOutput {
	return o
}

func (o BuildMetadataOutput) ToBuildMetadataPtrOutput() BuildMetadataPtrOutput {
	return o.ToBuildMetadataPtrOutputWithContext(context.Background())
}

func (o BuildMetadataOutput) ToBuildMetadataPtrOutputWithContext(ctx context.Context) BuildMetadataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BuildMetadata) *BuildMetadata {
		return &v
	}).(BuildMetadataPtrOutput)
}

func (o BuildMetadataOutput) FinishedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildMetadata) *string { return v.FinishedOn }).(pulumi.StringPtrOutput)
}

func (o BuildMetadataOutput) InvocationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildMetadata) *string { return v.InvocationId }).(pulumi.StringPtrOutput)
}

func (o BuildMetadataOutput) StartedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildMetadata) *string { return v.StartedOn }).(pulumi.StringPtrOutput)
}

type BuildMetadataPtrOutput struct{ *pulumi.OutputState }

func (BuildMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildMetadata)(nil)).Elem()
}

func (o BuildMetadataPtrOutput) ToBuildMetadataPtrOutput() BuildMetadataPtrOutput {
	return o
}

func (o BuildMetadataPtrOutput) ToBuildMetadataPtrOutputWithContext(ctx context.Context) BuildMetadataPtrOutput {
	return o
}

func (o BuildMetadataPtrOutput) Elem() BuildMetadataOutput {
	return o.ApplyT(func(v *BuildMetadata) BuildMetadata {
		if v != nil {
			return *v
		}
		var ret BuildMetadata
		return ret
	}).(BuildMetadataOutput)
}

func (o BuildMetadataPtrOutput) FinishedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildMetadata) *string {
		if v == nil {
			return nil
		}
		return v.FinishedOn
	}).(pulumi.StringPtrOutput)
}

func (o BuildMetadataPtrOutput) InvocationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildMetadata) *string {
		if v == nil {
			return nil
		}
		return v.InvocationId
	}).(pulumi.StringPtrOutput)
}

func (o BuildMetadataPtrOutput) StartedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildMetadata) *string {
		if v == nil {
			return nil
		}
		return v.StartedOn
	}).(pulumi.StringPtrOutput)
}

type BuildMetadataResponse struct {
	FinishedOn   string `pulumi:"finishedOn"`
	InvocationId string `pulumi:"invocationId"`
	StartedOn    string `pulumi:"startedOn"`
}

type BuildMetadataResponseOutput struct{ *pulumi.OutputState }

func (BuildMetadataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildMetadataResponse)(nil)).Elem()
}

func (o BuildMetadataResponseOutput) ToBuildMetadataResponseOutput() BuildMetadataResponseOutput {
	return o
}

func (o BuildMetadataResponseOutput) ToBuildMetadataResponseOutputWithContext(ctx context.Context) BuildMetadataResponseOutput {
	return o
}

func (o BuildMetadataResponseOutput) FinishedOn() pulumi.StringOutput {
	return o.ApplyT(func(v BuildMetadataResponse) string { return v.FinishedOn }).(pulumi.StringOutput)
}

func (o BuildMetadataResponseOutput) InvocationId() pulumi.StringOutput {
	return o.ApplyT(func(v BuildMetadataResponse) string { return v.InvocationId }).(pulumi.StringOutput)
}

func (o BuildMetadataResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v BuildMetadataResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Note holding the version of the provider's builder and the signature of the provenance message in the build details occurrence.
type BuildNote struct {
	// Immutable. Version of the builder which produced this build.
	BuilderVersion string `pulumi:"builderVersion"`
}

// BuildNoteInput is an input type that accepts BuildNoteArgs and BuildNoteOutput values.
// You can construct a concrete instance of `BuildNoteInput` via:
//
//	BuildNoteArgs{...}
type BuildNoteInput interface {
	pulumi.Input

	ToBuildNoteOutput() BuildNoteOutput
	ToBuildNoteOutputWithContext(context.Context) BuildNoteOutput
}

// Note holding the version of the provider's builder and the signature of the provenance message in the build details occurrence.
type BuildNoteArgs struct {
	// Immutable. Version of the builder which produced this build.
	BuilderVersion pulumi.StringInput `pulumi:"builderVersion"`
}

func (BuildNoteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildNote)(nil)).Elem()
}

func (i BuildNoteArgs) ToBuildNoteOutput() BuildNoteOutput {
	return i.ToBuildNoteOutputWithContext(context.Background())
}

func (i BuildNoteArgs) ToBuildNoteOutputWithContext(ctx context.Context) BuildNoteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildNoteOutput)
}

func (i BuildNoteArgs) ToBuildNotePtrOutput() BuildNotePtrOutput {
	return i.ToBuildNotePtrOutputWithContext(context.Background())
}

func (i BuildNoteArgs) ToBuildNotePtrOutputWithContext(ctx context.Context) BuildNotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildNoteOutput).ToBuildNotePtrOutputWithContext(ctx)
}

// BuildNotePtrInput is an input type that accepts BuildNoteArgs, BuildNotePtr and BuildNotePtrOutput values.
// You can construct a concrete instance of `BuildNotePtrInput` via:
//
//	        BuildNoteArgs{...}
//
//	or:
//
//	        nil
type BuildNotePtrInput interface {
	pulumi.Input

	ToBuildNotePtrOutput() BuildNotePtrOutput
	ToBuildNotePtrOutputWithContext(context.Context) BuildNotePtrOutput
}

type buildNotePtrType BuildNoteArgs

func BuildNotePtr(v *BuildNoteArgs) BuildNotePtrInput {
	return (*buildNotePtrType)(v)
}

func (*buildNotePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildNote)(nil)).Elem()
}

func (i *buildNotePtrType) ToBuildNotePtrOutput() BuildNotePtrOutput {
	return i.ToBuildNotePtrOutputWithContext(context.Background())
}

func (i *buildNotePtrType) ToBuildNotePtrOutputWithContext(ctx context.Context) BuildNotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildNotePtrOutput)
}

// Note holding the version of the provider's builder and the signature of the provenance message in the build details occurrence.
type BuildNoteOutput struct{ *pulumi.OutputState }

func (BuildNoteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildNote)(nil)).Elem()
}

func (o BuildNoteOutput) ToBuildNoteOutput() BuildNoteOutput {
	return o
}

func (o BuildNoteOutput) ToBuildNoteOutputWithContext(ctx context.Context) BuildNoteOutput {
	return o
}

func (o BuildNoteOutput) ToBuildNotePtrOutput() BuildNotePtrOutput {
	return o.ToBuildNotePtrOutputWithContext(context.Background())
}

func (o BuildNoteOutput) ToBuildNotePtrOutputWithContext(ctx context.Context) BuildNotePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BuildNote) *BuildNote {
		return &v
	}).(BuildNotePtrOutput)
}

// Immutable. Version of the builder which produced this build.
func (o BuildNoteOutput) BuilderVersion() pulumi.StringOutput {
	return o.ApplyT(func(v BuildNote) string { return v.BuilderVersion }).(pulumi.StringOutput)
}

type BuildNotePtrOutput struct{ *pulumi.OutputState }

func (BuildNotePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildNote)(nil)).Elem()
}

func (o BuildNotePtrOutput) ToBuildNotePtrOutput() BuildNotePtrOutput {
	return o
}

func (o BuildNotePtrOutput) ToBuildNotePtrOutputWithContext(ctx context.Context) BuildNotePtrOutput {
	return o
}

func (o BuildNotePtrOutput) Elem() BuildNoteOutput {
	return o.ApplyT(func(v *BuildNote) BuildNote {
		if v != nil {
			return *v
		}
		var ret BuildNote
		return ret
	}).(BuildNoteOutput)
}

// Immutable. Version of the builder which produced this build.
func (o BuildNotePtrOutput) BuilderVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildNote) *string {
		if v == nil {
			return nil
		}
		return &v.BuilderVersion
	}).(pulumi.StringPtrOutput)
}

// Note holding the version of the provider's builder and the signature of the provenance message in the build details occurrence.
type BuildNoteResponse struct {
	// Immutable. Version of the builder which produced this build.
	BuilderVersion string `pulumi:"builderVersion"`
}

// Note holding the version of the provider's builder and the signature of the provenance message in the build details occurrence.
type BuildNoteResponseOutput struct{ *pulumi.OutputState }

func (BuildNoteResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildNoteResponse)(nil)).Elem()
}

func (o BuildNoteResponseOutput) ToBuildNoteResponseOutput() BuildNoteResponseOutput {
	return o
}

func (o BuildNoteResponseOutput) ToBuildNoteResponseOutputWithContext(ctx context.Context) BuildNoteResponseOutput {
	return o
}

// Immutable. Version of the builder which produced this build.
func (o BuildNoteResponseOutput) BuilderVersion() pulumi.StringOutput {
	return o.ApplyT(func(v BuildNoteResponse) string { return v.BuilderVersion }).(pulumi.StringOutput)
}

// Details of a build occurrence.
type BuildOccurrence struct {
	// In-Toto Slsa Provenance V1 represents a slsa provenance meeting the slsa spec, wrapped in an in-toto statement. This allows for direct jsonification of a to-spec in-toto slsa statement with a to-spec slsa provenance.
	InTotoSlsaProvenanceV1 *InTotoSlsaProvenanceV1 `pulumi:"inTotoSlsaProvenanceV1"`
	// Deprecated. See InTotoStatement for the replacement. In-toto Provenance representation as defined in spec.
	//
	// Deprecated: Deprecated. See InTotoStatement for the replacement. In-toto Provenance representation as defined in spec.
	IntotoProvenance *InTotoProvenance `pulumi:"intotoProvenance"`
	// In-toto Statement representation as defined in spec. The intoto_statement can contain any type of provenance. The serialized payload of the statement can be stored and signed in the Occurrence's envelope.
	IntotoStatement *InTotoStatement `pulumi:"intotoStatement"`
	// The actual provenance for the build.
	Provenance *BuildProvenance `pulumi:"provenance"`
	// Serialized JSON representation of the provenance, used in generating the build signature in the corresponding build note. After verifying the signature, `provenance_bytes` can be unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json as well to prevent incompatibilities with future changes.
	ProvenanceBytes *string `pulumi:"provenanceBytes"`
}

// BuildOccurrenceInput is an input type that accepts BuildOccurrenceArgs and BuildOccurrenceOutput values.
// You can construct a concrete instance of `BuildOccurrenceInput` via:
//
//	BuildOccurrenceArgs{...}
type BuildOccurrenceInput interface {
	pulumi.Input

	ToBuildOccurrenceOutput() BuildOccurrenceOutput
	ToBuildOccurrenceOutputWithContext(context.Context) BuildOccurrenceOutput
}

// Details of a build occurrence.
type BuildOccurrenceArgs struct {
	// In-Toto Slsa Provenance V1 represents a slsa provenance meeting the slsa spec, wrapped in an in-toto statement. This allows for direct jsonification of a to-spec in-toto slsa statement with a to-spec slsa provenance.
	InTotoSlsaProvenanceV1 InTotoSlsaProvenanceV1PtrInput `pulumi:"inTotoSlsaProvenanceV1"`
	// Deprecated. See InTotoStatement for the replacement. In-toto Provenance representation as defined in spec.
	//
	// Deprecated: Deprecated. See InTotoStatement for the replacement. In-toto Provenance representation as defined in spec.
	IntotoProvenance InTotoProvenancePtrInput `pulumi:"intotoProvenance"`
	// In-toto Statement representation as defined in spec. The intoto_statement can contain any type of provenance. The serialized payload of the statement can be stored and signed in the Occurrence's envelope.
	IntotoStatement InTotoStatementPtrInput `pulumi:"intotoStatement"`
	// The actual provenance for the build.
	Provenance BuildProvenancePtrInput `pulumi:"provenance"`
	// Serialized JSON representation of the provenance, used in generating the build signature in the corresponding build note. After verifying the signature, `provenance_bytes` can be unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json as well to prevent incompatibilities with future changes.
	ProvenanceBytes pulumi.StringPtrInput `pulumi:"provenanceBytes"`
}

func (BuildOccurrenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildOccurrence)(nil)).Elem()
}

func (i BuildOccurrenceArgs) ToBuildOccurrenceOutput() BuildOccurrenceOutput {
	return i.ToBuildOccurrenceOutputWithContext(context.Background())
}

func (i BuildOccurrenceArgs) ToBuildOccurrenceOutputWithContext(ctx context.Context) BuildOccurrenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildOccurrenceOutput)
}

func (i BuildOccurrenceArgs) ToBuildOccurrencePtrOutput() BuildOccurrencePtrOutput {
	return i.ToBuildOccurrencePtrOutputWithContext(context.Background())
}

func (i BuildOccurrenceArgs) ToBuildOccurrencePtrOutputWithContext(ctx context.Context) BuildOccurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildOccurrenceOutput).ToBuildOccurrencePtrOutputWithContext(ctx)
}

// BuildOccurrencePtrInput is an input type that accepts BuildOccurrenceArgs, BuildOccurrencePtr and BuildOccurrencePtrOutput values.
// You can construct a concrete instance of `BuildOccurrencePtrInput` via:
//
//	        BuildOccurrenceArgs{...}
//
//	or:
//
//	        nil
type BuildOccurrencePtrInput interface {
	pulumi.Input

	ToBuildOccurrencePtrOutput() BuildOccurrencePtrOutput
	ToBuildOccurrencePtrOutputWithContext(context.Context) BuildOccurrencePtrOutput
}

type buildOccurrencePtrType BuildOccurrenceArgs

func BuildOccurrencePtr(v *BuildOccurrenceArgs) BuildOccurrencePtrInput {
	return (*buildOccurrencePtrType)(v)
}

func (*buildOccurrencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildOccurrence)(nil)).Elem()
}

func (i *buildOccurrencePtrType) ToBuildOccurrencePtrOutput() BuildOccurrencePtrOutput {
	return i.ToBuildOccurrencePtrOutputWithContext(context.Background())
}

func (i *buildOccurrencePtrType) ToBuildOccurrencePtrOutputWithContext(ctx context.Context) BuildOccurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildOccurrencePtrOutput)
}

// Details of a build occurrence.
type BuildOccurrenceOutput struct{ *pulumi.OutputState }

func (BuildOccurrenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildOccurrence)(nil)).Elem()
}

func (o BuildOccurrenceOutput) ToBuildOccurrenceOutput() BuildOccurrenceOutput {
	return o
}

func (o BuildOccurrenceOutput) ToBuildOccurrenceOutputWithContext(ctx context.Context) BuildOccurrenceOutput {
	return o
}

func (o BuildOccurrenceOutput) ToBuildOccurrencePtrOutput() BuildOccurrencePtrOutput {
	return o.ToBuildOccurrencePtrOutputWithContext(context.Background())
}

func (o BuildOccurrenceOutput) ToBuildOccurrencePtrOutputWithContext(ctx context.Context) BuildOccurrencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BuildOccurrence) *BuildOccurrence {
		return &v
	}).(BuildOccurrencePtrOutput)
}

// In-Toto Slsa Provenance V1 represents a slsa provenance meeting the slsa spec, wrapped in an in-toto statement. This allows for direct jsonification of a to-spec in-toto slsa statement with a to-spec slsa provenance.
func (o BuildOccurrenceOutput) InTotoSlsaProvenanceV1() InTotoSlsaProvenanceV1PtrOutput {
	return o.ApplyT(func(v BuildOccurrence) *InTotoSlsaProvenanceV1 { return v.InTotoSlsaProvenanceV1 }).(InTotoSlsaProvenanceV1PtrOutput)
}

// Deprecated. See InTotoStatement for the replacement. In-toto Provenance representation as defined in spec.
//
// Deprecated: Deprecated. See InTotoStatement for the replacement. In-toto Provenance representation as defined in spec.
func (o BuildOccurrenceOutput) IntotoProvenance() InTotoProvenancePtrOutput {
	return o.ApplyT(func(v BuildOccurrence) *InTotoProvenance { return v.IntotoProvenance }).(InTotoProvenancePtrOutput)
}

// In-toto Statement representation as defined in spec. The intoto_statement can contain any type of provenance. The serialized payload of the statement can be stored and signed in the Occurrence's envelope.
func (o BuildOccurrenceOutput) IntotoStatement() InTotoStatementPtrOutput {
	return o.ApplyT(func(v BuildOccurrence) *InTotoStatement { return v.IntotoStatement }).(InTotoStatementPtrOutput)
}

// The actual provenance for the build.
func (o BuildOccurrenceOutput) Provenance() BuildProvenancePtrOutput {
	return o.ApplyT(func(v BuildOccurrence) *BuildProvenance { return v.Provenance }).(BuildProvenancePtrOutput)
}

// Serialized JSON representation of the provenance, used in generating the build signature in the corresponding build note. After verifying the signature, `provenance_bytes` can be unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json as well to prevent incompatibilities with future changes.
func (o BuildOccurrenceOutput) ProvenanceBytes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildOccurrence) *string { return v.ProvenanceBytes }).(pulumi.StringPtrOutput)
}

type BuildOccurrencePtrOutput struct{ *pulumi.OutputState }

func (BuildOccurrencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildOccurrence)(nil)).Elem()
}

func (o BuildOccurrencePtrOutput) ToBuildOccurrencePtrOutput() BuildOccurrencePtrOutput {
	return o
}

func (o BuildOccurrencePtrOutput) ToBuildOccurrencePtrOutputWithContext(ctx context.Context) BuildOccurrencePtrOutput {
	return o
}

func (o BuildOccurrencePtrOutput) Elem() BuildOccurrenceOutput {
	return o.ApplyT(func(v *BuildOccurrence) BuildOccurrence {
		if v != nil {
			return *v
		}
		var ret BuildOccurrence
		return ret
	}).(BuildOccurrenceOutput)
}

// In-Toto Slsa Provenance V1 represents a slsa provenance meeting the slsa spec, wrapped in an in-toto statement. This allows for direct jsonification of a to-spec in-toto slsa statement with a to-spec slsa provenance.
func (o BuildOccurrencePtrOutput) InTotoSlsaProvenanceV1() InTotoSlsaProvenanceV1PtrOutput {
	return o.ApplyT(func(v *BuildOccurrence) *InTotoSlsaProvenanceV1 {
		if v == nil {
			return nil
		}
		return v.InTotoSlsaProvenanceV1
	}).(InTotoSlsaProvenanceV1PtrOutput)
}

// Deprecated. See InTotoStatement for the replacement. In-toto Provenance representation as defined in spec.
//
// Deprecated: Deprecated. See InTotoStatement for the replacement. In-toto Provenance representation as defined in spec.
func (o BuildOccurrencePtrOutput) IntotoProvenance() InTotoProvenancePtrOutput {
	return o.ApplyT(func(v *BuildOccurrence) *InTotoProvenance {
		if v == nil {
			return nil
		}
		return v.IntotoProvenance
	}).(InTotoProvenancePtrOutput)
}

// In-toto Statement representation as defined in spec. The intoto_statement can contain any type of provenance. The serialized payload of the statement can be stored and signed in the Occurrence's envelope.
func (o BuildOccurrencePtrOutput) IntotoStatement() InTotoStatementPtrOutput {
	return o.ApplyT(func(v *BuildOccurrence) *InTotoStatement {
		if v == nil {
			return nil
		}
		return v.IntotoStatement
	}).(InTotoStatementPtrOutput)
}

// The actual provenance for the build.
func (o BuildOccurrencePtrOutput) Provenance() BuildProvenancePtrOutput {
	return o.ApplyT(func(v *BuildOccurrence) *BuildProvenance {
		if v == nil {
			return nil
		}
		return v.Provenance
	}).(BuildProvenancePtrOutput)
}

// Serialized JSON representation of the provenance, used in generating the build signature in the corresponding build note. After verifying the signature, `provenance_bytes` can be unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json as well to prevent incompatibilities with future changes.
func (o BuildOccurrencePtrOutput) ProvenanceBytes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildOccurrence) *string {
		if v == nil {
			return nil
		}
		return v.ProvenanceBytes
	}).(pulumi.StringPtrOutput)
}

// Details of a build occurrence.
type BuildOccurrenceResponse struct {
	// In-Toto Slsa Provenance V1 represents a slsa provenance meeting the slsa spec, wrapped in an in-toto statement. This allows for direct jsonification of a to-spec in-toto slsa statement with a to-spec slsa provenance.
	InTotoSlsaProvenanceV1 InTotoSlsaProvenanceV1Response `pulumi:"inTotoSlsaProvenanceV1"`
	// Deprecated. See InTotoStatement for the replacement. In-toto Provenance representation as defined in spec.
	//
	// Deprecated: Deprecated. See InTotoStatement for the replacement. In-toto Provenance representation as defined in spec.
	IntotoProvenance InTotoProvenanceResponse `pulumi:"intotoProvenance"`
	// In-toto Statement representation as defined in spec. The intoto_statement can contain any type of provenance. The serialized payload of the statement can be stored and signed in the Occurrence's envelope.
	IntotoStatement InTotoStatementResponse `pulumi:"intotoStatement"`
	// The actual provenance for the build.
	Provenance BuildProvenanceResponse `pulumi:"provenance"`
	// Serialized JSON representation of the provenance, used in generating the build signature in the corresponding build note. After verifying the signature, `provenance_bytes` can be unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json as well to prevent incompatibilities with future changes.
	ProvenanceBytes string `pulumi:"provenanceBytes"`
}

// Details of a build occurrence.
type BuildOccurrenceResponseOutput struct{ *pulumi.OutputState }

func (BuildOccurrenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildOccurrenceResponse)(nil)).Elem()
}

func (o BuildOccurrenceResponseOutput) ToBuildOccurrenceResponseOutput() BuildOccurrenceResponseOutput {
	return o
}

func (o BuildOccurrenceResponseOutput) ToBuildOccurrenceResponseOutputWithContext(ctx context.Context) BuildOccurrenceResponseOutput {
	return o
}

// In-Toto Slsa Provenance V1 represents a slsa provenance meeting the slsa spec, wrapped in an in-toto statement. This allows for direct jsonification of a to-spec in-toto slsa statement with a to-spec slsa provenance.
func (o BuildOccurrenceResponseOutput) InTotoSlsaProvenanceV1() InTotoSlsaProvenanceV1ResponseOutput {
	return o.ApplyT(func(v BuildOccurrenceResponse) InTotoSlsaProvenanceV1Response { return v.InTotoSlsaProvenanceV1 }).(InTotoSlsaProvenanceV1ResponseOutput)
}

// Deprecated. See InTotoStatement for the replacement. In-toto Provenance representation as defined in spec.
//
// Deprecated: Deprecated. See InTotoStatement for the replacement. In-toto Provenance representation as defined in spec.
func (o BuildOccurrenceResponseOutput) IntotoProvenance() InTotoProvenanceResponseOutput {
	return o.ApplyT(func(v BuildOccurrenceResponse) InTotoProvenanceResponse { return v.IntotoProvenance }).(InTotoProvenanceResponseOutput)
}

// In-toto Statement representation as defined in spec. The intoto_statement can contain any type of provenance. The serialized payload of the statement can be stored and signed in the Occurrence's envelope.
func (o BuildOccurrenceResponseOutput) IntotoStatement() InTotoStatementResponseOutput {
	return o.ApplyT(func(v BuildOccurrenceResponse) InTotoStatementResponse { return v.IntotoStatement }).(InTotoStatementResponseOutput)
}

// The actual provenance for the build.
func (o BuildOccurrenceResponseOutput) Provenance() BuildProvenanceResponseOutput {
	return o.ApplyT(func(v BuildOccurrenceResponse) BuildProvenanceResponse { return v.Provenance }).(BuildProvenanceResponseOutput)
}

// Serialized JSON representation of the provenance, used in generating the build signature in the corresponding build note. After verifying the signature, `provenance_bytes` can be unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json as well to prevent incompatibilities with future changes.
func (o BuildOccurrenceResponseOutput) ProvenanceBytes() pulumi.StringOutput {
	return o.ApplyT(func(v BuildOccurrenceResponse) string { return v.ProvenanceBytes }).(pulumi.StringOutput)
}

// Provenance of a build. Contains all information needed to verify the full details about the build from source to completion.
type BuildProvenance struct {
	// Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.
	BuildOptions map[string]string `pulumi:"buildOptions"`
	// Version string of the builder at the time this build was executed.
	BuilderVersion *string `pulumi:"builderVersion"`
	// Output of the build.
	BuiltArtifacts []Artifact `pulumi:"builtArtifacts"`
	// Commands requested by the build.
	Commands []Command `pulumi:"commands"`
	// Time at which the build was created.
	CreateTime *string `pulumi:"createTime"`
	// E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.
	Creator *string `pulumi:"creator"`
	// Time at which execution of the build was finished.
	EndTime *string `pulumi:"endTime"`
	// Unique identifier of the build.
	Id string `pulumi:"id"`
	// URI where any logs for this provenance were written.
	LogsUri *string `pulumi:"logsUri"`
	// ID of the project.
	Project *string `pulumi:"project"`
	// Details of the Source input to the build.
	SourceProvenance *Source `pulumi:"sourceProvenance"`
	// Time at which execution of the build was started.
	StartTime *string `pulumi:"startTime"`
	// Trigger identifier if the build was triggered automatically; empty if not.
	TriggerId *string `pulumi:"triggerId"`
}

// BuildProvenanceInput is an input type that accepts BuildProvenanceArgs and BuildProvenanceOutput values.
// You can construct a concrete instance of `BuildProvenanceInput` via:
//
//	BuildProvenanceArgs{...}
type BuildProvenanceInput interface {
	pulumi.Input

	ToBuildProvenanceOutput() BuildProvenanceOutput
	ToBuildProvenanceOutputWithContext(context.Context) BuildProvenanceOutput
}

// Provenance of a build. Contains all information needed to verify the full details about the build from source to completion.
type BuildProvenanceArgs struct {
	// Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.
	BuildOptions pulumi.StringMapInput `pulumi:"buildOptions"`
	// Version string of the builder at the time this build was executed.
	BuilderVersion pulumi.StringPtrInput `pulumi:"builderVersion"`
	// Output of the build.
	BuiltArtifacts ArtifactArrayInput `pulumi:"builtArtifacts"`
	// Commands requested by the build.
	Commands CommandArrayInput `pulumi:"commands"`
	// Time at which the build was created.
	CreateTime pulumi.StringPtrInput `pulumi:"createTime"`
	// E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.
	Creator pulumi.StringPtrInput `pulumi:"creator"`
	// Time at which execution of the build was finished.
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// Unique identifier of the build.
	Id pulumi.StringInput `pulumi:"id"`
	// URI where any logs for this provenance were written.
	LogsUri pulumi.StringPtrInput `pulumi:"logsUri"`
	// ID of the project.
	Project pulumi.StringPtrInput `pulumi:"project"`
	// Details of the Source input to the build.
	SourceProvenance SourcePtrInput `pulumi:"sourceProvenance"`
	// Time at which execution of the build was started.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
	// Trigger identifier if the build was triggered automatically; empty if not.
	TriggerId pulumi.StringPtrInput `pulumi:"triggerId"`
}

func (BuildProvenanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildProvenance)(nil)).Elem()
}

func (i BuildProvenanceArgs) ToBuildProvenanceOutput() BuildProvenanceOutput {
	return i.ToBuildProvenanceOutputWithContext(context.Background())
}

func (i BuildProvenanceArgs) ToBuildProvenanceOutputWithContext(ctx context.Context) BuildProvenanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildProvenanceOutput)
}

func (i BuildProvenanceArgs) ToBuildProvenancePtrOutput() BuildProvenancePtrOutput {
	return i.ToBuildProvenancePtrOutputWithContext(context.Background())
}

func (i BuildProvenanceArgs) ToBuildProvenancePtrOutputWithContext(ctx context.Context) BuildProvenancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildProvenanceOutput).ToBuildProvenancePtrOutputWithContext(ctx)
}

// BuildProvenancePtrInput is an input type that accepts BuildProvenanceArgs, BuildProvenancePtr and BuildProvenancePtrOutput values.
// You can construct a concrete instance of `BuildProvenancePtrInput` via:
//
//	        BuildProvenanceArgs{...}
//
//	or:
//
//	        nil
type BuildProvenancePtrInput interface {
	pulumi.Input

	ToBuildProvenancePtrOutput() BuildProvenancePtrOutput
	ToBuildProvenancePtrOutputWithContext(context.Context) BuildProvenancePtrOutput
}

type buildProvenancePtrType BuildProvenanceArgs

func BuildProvenancePtr(v *BuildProvenanceArgs) BuildProvenancePtrInput {
	return (*buildProvenancePtrType)(v)
}

func (*buildProvenancePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildProvenance)(nil)).Elem()
}

func (i *buildProvenancePtrType) ToBuildProvenancePtrOutput() BuildProvenancePtrOutput {
	return i.ToBuildProvenancePtrOutputWithContext(context.Background())
}

func (i *buildProvenancePtrType) ToBuildProvenancePtrOutputWithContext(ctx context.Context) BuildProvenancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildProvenancePtrOutput)
}

// Provenance of a build. Contains all information needed to verify the full details about the build from source to completion.
type BuildProvenanceOutput struct{ *pulumi.OutputState }

func (BuildProvenanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildProvenance)(nil)).Elem()
}

func (o BuildProvenanceOutput) ToBuildProvenanceOutput() BuildProvenanceOutput {
	return o
}

func (o BuildProvenanceOutput) ToBuildProvenanceOutputWithContext(ctx context.Context) BuildProvenanceOutput {
	return o
}

func (o BuildProvenanceOutput) ToBuildProvenancePtrOutput() BuildProvenancePtrOutput {
	return o.ToBuildProvenancePtrOutputWithContext(context.Background())
}

func (o BuildProvenanceOutput) ToBuildProvenancePtrOutputWithContext(ctx context.Context) BuildProvenancePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BuildProvenance) *BuildProvenance {
		return &v
	}).(BuildProvenancePtrOutput)
}

// Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.
func (o BuildProvenanceOutput) BuildOptions() pulumi.StringMapOutput {
	return o.ApplyT(func(v BuildProvenance) map[string]string { return v.BuildOptions }).(pulumi.StringMapOutput)
}

// Version string of the builder at the time this build was executed.
func (o BuildProvenanceOutput) BuilderVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildProvenance) *string { return v.BuilderVersion }).(pulumi.StringPtrOutput)
}

// Output of the build.
func (o BuildProvenanceOutput) BuiltArtifacts() ArtifactArrayOutput {
	return o.ApplyT(func(v BuildProvenance) []Artifact { return v.BuiltArtifacts }).(ArtifactArrayOutput)
}

// Commands requested by the build.
func (o BuildProvenanceOutput) Commands() CommandArrayOutput {
	return o.ApplyT(func(v BuildProvenance) []Command { return v.Commands }).(CommandArrayOutput)
}

// Time at which the build was created.
func (o BuildProvenanceOutput) CreateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildProvenance) *string { return v.CreateTime }).(pulumi.StringPtrOutput)
}

// E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.
func (o BuildProvenanceOutput) Creator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildProvenance) *string { return v.Creator }).(pulumi.StringPtrOutput)
}

// Time at which execution of the build was finished.
func (o BuildProvenanceOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildProvenance) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// Unique identifier of the build.
func (o BuildProvenanceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v BuildProvenance) string { return v.Id }).(pulumi.StringOutput)
}

// URI where any logs for this provenance were written.
func (o BuildProvenanceOutput) LogsUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildProvenance) *string { return v.LogsUri }).(pulumi.StringPtrOutput)
}

// ID of the project.
func (o BuildProvenanceOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildProvenance) *string { return v.Project }).(pulumi.StringPtrOutput)
}

// Details of the Source input to the build.
func (o BuildProvenanceOutput) SourceProvenance() SourcePtrOutput {
	return o.ApplyT(func(v BuildProvenance) *Source { return v.SourceProvenance }).(SourcePtrOutput)
}

// Time at which execution of the build was started.
func (o BuildProvenanceOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildProvenance) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// Trigger identifier if the build was triggered automatically; empty if not.
func (o BuildProvenanceOutput) TriggerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildProvenance) *string { return v.TriggerId }).(pulumi.StringPtrOutput)
}

type BuildProvenancePtrOutput struct{ *pulumi.OutputState }

func (BuildProvenancePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildProvenance)(nil)).Elem()
}

func (o BuildProvenancePtrOutput) ToBuildProvenancePtrOutput() BuildProvenancePtrOutput {
	return o
}

func (o BuildProvenancePtrOutput) ToBuildProvenancePtrOutputWithContext(ctx context.Context) BuildProvenancePtrOutput {
	return o
}

func (o BuildProvenancePtrOutput) Elem() BuildProvenanceOutput {
	return o.ApplyT(func(v *BuildProvenance) BuildProvenance {
		if v != nil {
			return *v
		}
		var ret BuildProvenance
		return ret
	}).(BuildProvenanceOutput)
}

// Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.
func (o BuildProvenancePtrOutput) BuildOptions() pulumi.StringMapOutput {
	return o.ApplyT(func(v *BuildProvenance) map[string]string {
		if v == nil {
			return nil
		}
		return v.BuildOptions
	}).(pulumi.StringMapOutput)
}

// Version string of the builder at the time this build was executed.
func (o BuildProvenancePtrOutput) BuilderVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildProvenance) *string {
		if v == nil {
			return nil
		}
		return v.BuilderVersion
	}).(pulumi.StringPtrOutput)
}

// Output of the build.
func (o BuildProvenancePtrOutput) BuiltArtifacts() ArtifactArrayOutput {
	return o.ApplyT(func(v *BuildProvenance) []Artifact {
		if v == nil {
			return nil
		}
		return v.BuiltArtifacts
	}).(ArtifactArrayOutput)
}

// Commands requested by the build.
func (o BuildProvenancePtrOutput) Commands() CommandArrayOutput {
	return o.ApplyT(func(v *BuildProvenance) []Command {
		if v == nil {
			return nil
		}
		return v.Commands
	}).(CommandArrayOutput)
}

// Time at which the build was created.
func (o BuildProvenancePtrOutput) CreateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildProvenance) *string {
		if v == nil {
			return nil
		}
		return v.CreateTime
	}).(pulumi.StringPtrOutput)
}

// E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.
func (o BuildProvenancePtrOutput) Creator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildProvenance) *string {
		if v == nil {
			return nil
		}
		return v.Creator
	}).(pulumi.StringPtrOutput)
}

// Time at which execution of the build was finished.
func (o BuildProvenancePtrOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildProvenance) *string {
		if v == nil {
			return nil
		}
		return v.EndTime
	}).(pulumi.StringPtrOutput)
}

// Unique identifier of the build.
func (o BuildProvenancePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildProvenance) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// URI where any logs for this provenance were written.
func (o BuildProvenancePtrOutput) LogsUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildProvenance) *string {
		if v == nil {
			return nil
		}
		return v.LogsUri
	}).(pulumi.StringPtrOutput)
}

// ID of the project.
func (o BuildProvenancePtrOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildProvenance) *string {
		if v == nil {
			return nil
		}
		return v.Project
	}).(pulumi.StringPtrOutput)
}

// Details of the Source input to the build.
func (o BuildProvenancePtrOutput) SourceProvenance() SourcePtrOutput {
	return o.ApplyT(func(v *BuildProvenance) *Source {
		if v == nil {
			return nil
		}
		return v.SourceProvenance
	}).(SourcePtrOutput)
}

// Time at which execution of the build was started.
func (o BuildProvenancePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildProvenance) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Trigger identifier if the build was triggered automatically; empty if not.
func (o BuildProvenancePtrOutput) TriggerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildProvenance) *string {
		if v == nil {
			return nil
		}
		return v.TriggerId
	}).(pulumi.StringPtrOutput)
}

// Provenance of a build. Contains all information needed to verify the full details about the build from source to completion.
type BuildProvenanceResponse struct {
	// Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.
	BuildOptions map[string]string `pulumi:"buildOptions"`
	// Version string of the builder at the time this build was executed.
	BuilderVersion string `pulumi:"builderVersion"`
	// Output of the build.
	BuiltArtifacts []ArtifactResponse `pulumi:"builtArtifacts"`
	// Commands requested by the build.
	Commands []CommandResponse `pulumi:"commands"`
	// Time at which the build was created.
	CreateTime string `pulumi:"createTime"`
	// E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.
	Creator string `pulumi:"creator"`
	// Time at which execution of the build was finished.
	EndTime string `pulumi:"endTime"`
	// URI where any logs for this provenance were written.
	LogsUri string `pulumi:"logsUri"`
	// ID of the project.
	Project string `pulumi:"project"`
	// Details of the Source input to the build.
	SourceProvenance SourceResponse `pulumi:"sourceProvenance"`
	// Time at which execution of the build was started.
	StartTime string `pulumi:"startTime"`
	// Trigger identifier if the build was triggered automatically; empty if not.
	TriggerId string `pulumi:"triggerId"`
}

// Provenance of a build. Contains all information needed to verify the full details about the build from source to completion.
type BuildProvenanceResponseOutput struct{ *pulumi.OutputState }

func (BuildProvenanceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildProvenanceResponse)(nil)).Elem()
}

func (o BuildProvenanceResponseOutput) ToBuildProvenanceResponseOutput() BuildProvenanceResponseOutput {
	return o
}

func (o BuildProvenanceResponseOutput) ToBuildProvenanceResponseOutputWithContext(ctx context.Context) BuildProvenanceResponseOutput {
	return o
}

// Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.
func (o BuildProvenanceResponseOutput) BuildOptions() pulumi.StringMapOutput {
	return o.ApplyT(func(v BuildProvenanceResponse) map[string]string { return v.BuildOptions }).(pulumi.StringMapOutput)
}

// Version string of the builder at the time this build was executed.
func (o BuildProvenanceResponseOutput) BuilderVersion() pulumi.StringOutput {
	return o.ApplyT(func(v BuildProvenanceResponse) string { return v.BuilderVersion }).(pulumi.StringOutput)
}

// Output of the build.
func (o BuildProvenanceResponseOutput) BuiltArtifacts() ArtifactResponseArrayOutput {
	return o.ApplyT(func(v BuildProvenanceResponse) []ArtifactResponse { return v.BuiltArtifacts }).(ArtifactResponseArrayOutput)
}

// Commands requested by the build.
func (o BuildProvenanceResponseOutput) Commands() CommandResponseArrayOutput {
	return o.ApplyT(func(v BuildProvenanceResponse) []CommandResponse { return v.Commands }).(CommandResponseArrayOutput)
}

// Time at which the build was created.
func (o BuildProvenanceResponseOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v BuildProvenanceResponse) string { return v.CreateTime }).(pulumi.StringOutput)
}

// E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.
func (o BuildProvenanceResponseOutput) Creator() pulumi.StringOutput {
	return o.ApplyT(func(v BuildProvenanceResponse) string { return v.Creator }).(pulumi.StringOutput)
}

// Time at which execution of the build was finished.
func (o BuildProvenanceResponseOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v BuildProvenanceResponse) string { return v.EndTime }).(pulumi.StringOutput)
}

// URI where any logs for this provenance were written.
func (o BuildProvenanceResponseOutput) LogsUri() pulumi.StringOutput {
	return o.ApplyT(func(v BuildProvenanceResponse) string { return v.LogsUri }).(pulumi.StringOutput)
}

// ID of the project.
func (o BuildProvenanceResponseOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v BuildProvenanceResponse) string { return v.Project }).(pulumi.StringOutput)
}

// Details of the Source input to the build.
func (o BuildProvenanceResponseOutput) SourceProvenance() SourceResponseOutput {
	return o.ApplyT(func(v BuildProvenanceResponse) SourceResponse { return v.SourceProvenance }).(SourceResponseOutput)
}

// Time at which execution of the build was started.
func (o BuildProvenanceResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v BuildProvenanceResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

// Trigger identifier if the build was triggered automatically; empty if not.
func (o BuildProvenanceResponseOutput) TriggerId() pulumi.StringOutput {
	return o.ApplyT(func(v BuildProvenanceResponse) string { return v.TriggerId }).(pulumi.StringOutput)
}

type BuilderConfig struct {
	Id *string `pulumi:"id"`
}

// BuilderConfigInput is an input type that accepts BuilderConfigArgs and BuilderConfigOutput values.
// You can construct a concrete instance of `BuilderConfigInput` via:
//
//	BuilderConfigArgs{...}
type BuilderConfigInput interface {
	pulumi.Input

	ToBuilderConfigOutput() BuilderConfigOutput
	ToBuilderConfigOutputWithContext(context.Context) BuilderConfigOutput
}

type BuilderConfigArgs struct {
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (BuilderConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BuilderConfig)(nil)).Elem()
}

func (i BuilderConfigArgs) ToBuilderConfigOutput() BuilderConfigOutput {
	return i.ToBuilderConfigOutputWithContext(context.Background())
}

func (i BuilderConfigArgs) ToBuilderConfigOutputWithContext(ctx context.Context) BuilderConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuilderConfigOutput)
}

func (i BuilderConfigArgs) ToBuilderConfigPtrOutput() BuilderConfigPtrOutput {
	return i.ToBuilderConfigPtrOutputWithContext(context.Background())
}

func (i BuilderConfigArgs) ToBuilderConfigPtrOutputWithContext(ctx context.Context) BuilderConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuilderConfigOutput).ToBuilderConfigPtrOutputWithContext(ctx)
}

// BuilderConfigPtrInput is an input type that accepts BuilderConfigArgs, BuilderConfigPtr and BuilderConfigPtrOutput values.
// You can construct a concrete instance of `BuilderConfigPtrInput` via:
//
//	        BuilderConfigArgs{...}
//
//	or:
//
//	        nil
type BuilderConfigPtrInput interface {
	pulumi.Input

	ToBuilderConfigPtrOutput() BuilderConfigPtrOutput
	ToBuilderConfigPtrOutputWithContext(context.Context) BuilderConfigPtrOutput
}

type builderConfigPtrType BuilderConfigArgs

func BuilderConfigPtr(v *BuilderConfigArgs) BuilderConfigPtrInput {
	return (*builderConfigPtrType)(v)
}

func (*builderConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BuilderConfig)(nil)).Elem()
}

func (i *builderConfigPtrType) ToBuilderConfigPtrOutput() BuilderConfigPtrOutput {
	return i.ToBuilderConfigPtrOutputWithContext(context.Background())
}

func (i *builderConfigPtrType) ToBuilderConfigPtrOutputWithContext(ctx context.Context) BuilderConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuilderConfigPtrOutput)
}

type BuilderConfigOutput struct{ *pulumi.OutputState }

func (BuilderConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuilderConfig)(nil)).Elem()
}

func (o BuilderConfigOutput) ToBuilderConfigOutput() BuilderConfigOutput {
	return o
}

func (o BuilderConfigOutput) ToBuilderConfigOutputWithContext(ctx context.Context) BuilderConfigOutput {
	return o
}

func (o BuilderConfigOutput) ToBuilderConfigPtrOutput() BuilderConfigPtrOutput {
	return o.ToBuilderConfigPtrOutputWithContext(context.Background())
}

func (o BuilderConfigOutput) ToBuilderConfigPtrOutputWithContext(ctx context.Context) BuilderConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BuilderConfig) *BuilderConfig {
		return &v
	}).(BuilderConfigPtrOutput)
}

func (o BuilderConfigOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuilderConfig) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type BuilderConfigPtrOutput struct{ *pulumi.OutputState }

func (BuilderConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BuilderConfig)(nil)).Elem()
}

func (o BuilderConfigPtrOutput) ToBuilderConfigPtrOutput() BuilderConfigPtrOutput {
	return o
}

func (o BuilderConfigPtrOutput) ToBuilderConfigPtrOutputWithContext(ctx context.Context) BuilderConfigPtrOutput {
	return o
}

func (o BuilderConfigPtrOutput) Elem() BuilderConfigOutput {
	return o.ApplyT(func(v *BuilderConfig) BuilderConfig {
		if v != nil {
			return *v
		}
		var ret BuilderConfig
		return ret
	}).(BuilderConfigOutput)
}

func (o BuilderConfigPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuilderConfig) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

type BuilderConfigResponse struct {
}

type BuilderConfigResponseOutput struct{ *pulumi.OutputState }

func (BuilderConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuilderConfigResponse)(nil)).Elem()
}

func (o BuilderConfigResponseOutput) ToBuilderConfigResponseOutput() BuilderConfigResponseOutput {
	return o
}

func (o BuilderConfigResponseOutput) ToBuilderConfigResponseOutputWithContext(ctx context.Context) BuilderConfigResponseOutput {
	return o
}

// Common Vulnerability Scoring System. For details, see https://www.first.org/cvss/specification-document This is a message we will try to use for storing various versions of CVSS rather than making a separate proto for storing a specific version.
type CVSS struct {
	AttackComplexity *CVSSAttackComplexity `pulumi:"attackComplexity"`
	// Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments.
	AttackVector       *CVSSAttackVector       `pulumi:"attackVector"`
	Authentication     *CVSSAuthentication     `pulumi:"authentication"`
	AvailabilityImpact *CVSSAvailabilityImpact `pulumi:"availabilityImpact"`
	// The base score is a function of the base metric scores.
	BaseScore             *float64                   `pulumi:"baseScore"`
	ConfidentialityImpact *CVSSConfidentialityImpact `pulumi:"confidentialityImpact"`
	ExploitabilityScore   *float64                   `pulumi:"exploitabilityScore"`
	ImpactScore           *float64                   `pulumi:"impactScore"`
	IntegrityImpact       *CVSSIntegrityImpact       `pulumi:"integrityImpact"`
	PrivilegesRequired    *CVSSPrivilegesRequired    `pulumi:"privilegesRequired"`
	Scope                 *CVSSScope                 `pulumi:"scope"`
	UserInteraction       *CVSSUserInteraction       `pulumi:"userInteraction"`
}

// CVSSInput is an input type that accepts CVSSArgs and CVSSOutput values.
// You can construct a concrete instance of `CVSSInput` via:
//
//	CVSSArgs{...}
type CVSSInput interface {
	pulumi.Input

	ToCVSSOutput() CVSSOutput
	ToCVSSOutputWithContext(context.Context) CVSSOutput
}

// Common Vulnerability Scoring System. For details, see https://www.first.org/cvss/specification-document This is a message we will try to use for storing various versions of CVSS rather than making a separate proto for storing a specific version.
type CVSSArgs struct {
	AttackComplexity CVSSAttackComplexityPtrInput `pulumi:"attackComplexity"`
	// Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments.
	AttackVector       CVSSAttackVectorPtrInput       `pulumi:"attackVector"`
	Authentication     CVSSAuthenticationPtrInput     `pulumi:"authentication"`
	AvailabilityImpact CVSSAvailabilityImpactPtrInput `pulumi:"availabilityImpact"`
	// The base score is a function of the base metric scores.
	BaseScore             pulumi.Float64PtrInput            `pulumi:"baseScore"`
	ConfidentialityImpact CVSSConfidentialityImpactPtrInput `pulumi:"confidentialityImpact"`
	ExploitabilityScore   pulumi.Float64PtrInput            `pulumi:"exploitabilityScore"`
	ImpactScore           pulumi.Float64PtrInput            `pulumi:"impactScore"`
	IntegrityImpact       CVSSIntegrityImpactPtrInput       `pulumi:"integrityImpact"`
	PrivilegesRequired    CVSSPrivilegesRequiredPtrInput    `pulumi:"privilegesRequired"`
	Scope                 CVSSScopePtrInput                 `pulumi:"scope"`
	UserInteraction       CVSSUserInteractionPtrInput       `pulumi:"userInteraction"`
}

func (CVSSArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CVSS)(nil)).Elem()
}

func (i CVSSArgs) ToCVSSOutput() CVSSOutput {
	return i.ToCVSSOutputWithContext(context.Background())
}

func (i CVSSArgs) ToCVSSOutputWithContext(ctx context.Context) CVSSOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CVSSOutput)
}

func (i CVSSArgs) ToCVSSPtrOutput() CVSSPtrOutput {
	return i.ToCVSSPtrOutputWithContext(context.Background())
}

func (i CVSSArgs) ToCVSSPtrOutputWithContext(ctx context.Context) CVSSPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CVSSOutput).ToCVSSPtrOutputWithContext(ctx)
}

// CVSSPtrInput is an input type that accepts CVSSArgs, CVSSPtr and CVSSPtrOutput values.
// You can construct a concrete instance of `CVSSPtrInput` via:
//
//	        CVSSArgs{...}
//
//	or:
//
//	        nil
type CVSSPtrInput interface {
	pulumi.Input

	ToCVSSPtrOutput() CVSSPtrOutput
	ToCVSSPtrOutputWithContext(context.Context) CVSSPtrOutput
}

type cvssPtrType CVSSArgs

func CVSSPtr(v *CVSSArgs) CVSSPtrInput {
	return (*cvssPtrType)(v)
}

func (*cvssPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CVSS)(nil)).Elem()
}

func (i *cvssPtrType) ToCVSSPtrOutput() CVSSPtrOutput {
	return i.ToCVSSPtrOutputWithContext(context.Background())
}

func (i *cvssPtrType) ToCVSSPtrOutputWithContext(ctx context.Context) CVSSPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CVSSPtrOutput)
}

// Common Vulnerability Scoring System. For details, see https://www.first.org/cvss/specification-document This is a message we will try to use for storing various versions of CVSS rather than making a separate proto for storing a specific version.
type CVSSOutput struct{ *pulumi.OutputState }

func (CVSSOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CVSS)(nil)).Elem()
}

func (o CVSSOutput) ToCVSSOutput() CVSSOutput {
	return o
}

func (o CVSSOutput) ToCVSSOutputWithContext(ctx context.Context) CVSSOutput {
	return o
}

func (o CVSSOutput) ToCVSSPtrOutput() CVSSPtrOutput {
	return o.ToCVSSPtrOutputWithContext(context.Background())
}

func (o CVSSOutput) ToCVSSPtrOutputWithContext(ctx context.Context) CVSSPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CVSS) *CVSS {
		return &v
	}).(CVSSPtrOutput)
}

func (o CVSSOutput) AttackComplexity() CVSSAttackComplexityPtrOutput {
	return o.ApplyT(func(v CVSS) *CVSSAttackComplexity { return v.AttackComplexity }).(CVSSAttackComplexityPtrOutput)
}

// Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments.
func (o CVSSOutput) AttackVector() CVSSAttackVectorPtrOutput {
	return o.ApplyT(func(v CVSS) *CVSSAttackVector { return v.AttackVector }).(CVSSAttackVectorPtrOutput)
}

func (o CVSSOutput) Authentication() CVSSAuthenticationPtrOutput {
	return o.ApplyT(func(v CVSS) *CVSSAuthentication { return v.Authentication }).(CVSSAuthenticationPtrOutput)
}

func (o CVSSOutput) AvailabilityImpact() CVSSAvailabilityImpactPtrOutput {
	return o.ApplyT(func(v CVSS) *CVSSAvailabilityImpact { return v.AvailabilityImpact }).(CVSSAvailabilityImpactPtrOutput)
}

// The base score is a function of the base metric scores.
func (o CVSSOutput) BaseScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v CVSS) *float64 { return v.BaseScore }).(pulumi.Float64PtrOutput)
}

func (o CVSSOutput) ConfidentialityImpact() CVSSConfidentialityImpactPtrOutput {
	return o.ApplyT(func(v CVSS) *CVSSConfidentialityImpact { return v.ConfidentialityImpact }).(CVSSConfidentialityImpactPtrOutput)
}

func (o CVSSOutput) ExploitabilityScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v CVSS) *float64 { return v.ExploitabilityScore }).(pulumi.Float64PtrOutput)
}

func (o CVSSOutput) ImpactScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v CVSS) *float64 { return v.ImpactScore }).(pulumi.Float64PtrOutput)
}

func (o CVSSOutput) IntegrityImpact() CVSSIntegrityImpactPtrOutput {
	return o.ApplyT(func(v CVSS) *CVSSIntegrityImpact { return v.IntegrityImpact }).(CVSSIntegrityImpactPtrOutput)
}

func (o CVSSOutput) PrivilegesRequired() CVSSPrivilegesRequiredPtrOutput {
	return o.ApplyT(func(v CVSS) *CVSSPrivilegesRequired { return v.PrivilegesRequired }).(CVSSPrivilegesRequiredPtrOutput)
}

func (o CVSSOutput) Scope() CVSSScopePtrOutput {
	return o.ApplyT(func(v CVSS) *CVSSScope { return v.Scope }).(CVSSScopePtrOutput)
}

func (o CVSSOutput) UserInteraction() CVSSUserInteractionPtrOutput {
	return o.ApplyT(func(v CVSS) *CVSSUserInteraction { return v.UserInteraction }).(CVSSUserInteractionPtrOutput)
}

type CVSSPtrOutput struct{ *pulumi.OutputState }

func (CVSSPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CVSS)(nil)).Elem()
}

func (o CVSSPtrOutput) ToCVSSPtrOutput() CVSSPtrOutput {
	return o
}

func (o CVSSPtrOutput) ToCVSSPtrOutputWithContext(ctx context.Context) CVSSPtrOutput {
	return o
}

func (o CVSSPtrOutput) Elem() CVSSOutput {
	return o.ApplyT(func(v *CVSS) CVSS {
		if v != nil {
			return *v
		}
		var ret CVSS
		return ret
	}).(CVSSOutput)
}

func (o CVSSPtrOutput) AttackComplexity() CVSSAttackComplexityPtrOutput {
	return o.ApplyT(func(v *CVSS) *CVSSAttackComplexity {
		if v == nil {
			return nil
		}
		return v.AttackComplexity
	}).(CVSSAttackComplexityPtrOutput)
}

// Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments.
func (o CVSSPtrOutput) AttackVector() CVSSAttackVectorPtrOutput {
	return o.ApplyT(func(v *CVSS) *CVSSAttackVector {
		if v == nil {
			return nil
		}
		return v.AttackVector
	}).(CVSSAttackVectorPtrOutput)
}

func (o CVSSPtrOutput) Authentication() CVSSAuthenticationPtrOutput {
	return o.ApplyT(func(v *CVSS) *CVSSAuthentication {
		if v == nil {
			return nil
		}
		return v.Authentication
	}).(CVSSAuthenticationPtrOutput)
}

func (o CVSSPtrOutput) AvailabilityImpact() CVSSAvailabilityImpactPtrOutput {
	return o.ApplyT(func(v *CVSS) *CVSSAvailabilityImpact {
		if v == nil {
			return nil
		}
		return v.AvailabilityImpact
	}).(CVSSAvailabilityImpactPtrOutput)
}

// The base score is a function of the base metric scores.
func (o CVSSPtrOutput) BaseScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *CVSS) *float64 {
		if v == nil {
			return nil
		}
		return v.BaseScore
	}).(pulumi.Float64PtrOutput)
}

func (o CVSSPtrOutput) ConfidentialityImpact() CVSSConfidentialityImpactPtrOutput {
	return o.ApplyT(func(v *CVSS) *CVSSConfidentialityImpact {
		if v == nil {
			return nil
		}
		return v.ConfidentialityImpact
	}).(CVSSConfidentialityImpactPtrOutput)
}

func (o CVSSPtrOutput) ExploitabilityScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *CVSS) *float64 {
		if v == nil {
			return nil
		}
		return v.ExploitabilityScore
	}).(pulumi.Float64PtrOutput)
}

func (o CVSSPtrOutput) ImpactScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *CVSS) *float64 {
		if v == nil {
			return nil
		}
		return v.ImpactScore
	}).(pulumi.Float64PtrOutput)
}

func (o CVSSPtrOutput) IntegrityImpact() CVSSIntegrityImpactPtrOutput {
	return o.ApplyT(func(v *CVSS) *CVSSIntegrityImpact {
		if v == nil {
			return nil
		}
		return v.IntegrityImpact
	}).(CVSSIntegrityImpactPtrOutput)
}

func (o CVSSPtrOutput) PrivilegesRequired() CVSSPrivilegesRequiredPtrOutput {
	return o.ApplyT(func(v *CVSS) *CVSSPrivilegesRequired {
		if v == nil {
			return nil
		}
		return v.PrivilegesRequired
	}).(CVSSPrivilegesRequiredPtrOutput)
}

func (o CVSSPtrOutput) Scope() CVSSScopePtrOutput {
	return o.ApplyT(func(v *CVSS) *CVSSScope {
		if v == nil {
			return nil
		}
		return v.Scope
	}).(CVSSScopePtrOutput)
}

func (o CVSSPtrOutput) UserInteraction() CVSSUserInteractionPtrOutput {
	return o.ApplyT(func(v *CVSS) *CVSSUserInteraction {
		if v == nil {
			return nil
		}
		return v.UserInteraction
	}).(CVSSUserInteractionPtrOutput)
}

// Common Vulnerability Scoring System. For details, see https://www.first.org/cvss/specification-document This is a message we will try to use for storing various versions of CVSS rather than making a separate proto for storing a specific version.
type CVSSResponse struct {
	AttackComplexity string `pulumi:"attackComplexity"`
	// Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments.
	AttackVector       string `pulumi:"attackVector"`
	Authentication     string `pulumi:"authentication"`
	AvailabilityImpact string `pulumi:"availabilityImpact"`
	// The base score is a function of the base metric scores.
	BaseScore             float64 `pulumi:"baseScore"`
	ConfidentialityImpact string  `pulumi:"confidentialityImpact"`
	ExploitabilityScore   float64 `pulumi:"exploitabilityScore"`
	ImpactScore           float64 `pulumi:"impactScore"`
	IntegrityImpact       string  `pulumi:"integrityImpact"`
	PrivilegesRequired    string  `pulumi:"privilegesRequired"`
	Scope                 string  `pulumi:"scope"`
	UserInteraction       string  `pulumi:"userInteraction"`
}

// Common Vulnerability Scoring System. For details, see https://www.first.org/cvss/specification-document This is a message we will try to use for storing various versions of CVSS rather than making a separate proto for storing a specific version.
type CVSSResponseOutput struct{ *pulumi.OutputState }

func (CVSSResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CVSSResponse)(nil)).Elem()
}

func (o CVSSResponseOutput) ToCVSSResponseOutput() CVSSResponseOutput {
	return o
}

func (o CVSSResponseOutput) ToCVSSResponseOutputWithContext(ctx context.Context) CVSSResponseOutput {
	return o
}

func (o CVSSResponseOutput) AttackComplexity() pulumi.StringOutput {
	return o.ApplyT(func(v CVSSResponse) string { return v.AttackComplexity }).(pulumi.StringOutput)
}

// Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments.
func (o CVSSResponseOutput) AttackVector() pulumi.StringOutput {
	return o.ApplyT(func(v CVSSResponse) string { return v.AttackVector }).(pulumi.StringOutput)
}

func (o CVSSResponseOutput) Authentication() pulumi.StringOutput {
	return o.ApplyT(func(v CVSSResponse) string { return v.Authentication }).(pulumi.StringOutput)
}

func (o CVSSResponseOutput) AvailabilityImpact() pulumi.StringOutput {
	return o.ApplyT(func(v CVSSResponse) string { return v.AvailabilityImpact }).(pulumi.StringOutput)
}

// The base score is a function of the base metric scores.
func (o CVSSResponseOutput) BaseScore() pulumi.Float64Output {
	return o.ApplyT(func(v CVSSResponse) float64 { return v.BaseScore }).(pulumi.Float64Output)
}

func (o CVSSResponseOutput) ConfidentialityImpact() pulumi.StringOutput {
	return o.ApplyT(func(v CVSSResponse) string { return v.ConfidentialityImpact }).(pulumi.StringOutput)
}

func (o CVSSResponseOutput) ExploitabilityScore() pulumi.Float64Output {
	return o.ApplyT(func(v CVSSResponse) float64 { return v.ExploitabilityScore }).(pulumi.Float64Output)
}

func (o CVSSResponseOutput) ImpactScore() pulumi.Float64Output {
	return o.ApplyT(func(v CVSSResponse) float64 { return v.ImpactScore }).(pulumi.Float64Output)
}

func (o CVSSResponseOutput) IntegrityImpact() pulumi.StringOutput {
	return o.ApplyT(func(v CVSSResponse) string { return v.IntegrityImpact }).(pulumi.StringOutput)
}

func (o CVSSResponseOutput) PrivilegesRequired() pulumi.StringOutput {
	return o.ApplyT(func(v CVSSResponse) string { return v.PrivilegesRequired }).(pulumi.StringOutput)
}

func (o CVSSResponseOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v CVSSResponse) string { return v.Scope }).(pulumi.StringOutput)
}

func (o CVSSResponseOutput) UserInteraction() pulumi.StringOutput {
	return o.ApplyT(func(v CVSSResponse) string { return v.UserInteraction }).(pulumi.StringOutput)
}

// Common Vulnerability Scoring System version 3. For details, see https://www.first.org/cvss/specification-document
type CVSSv3 struct {
	AttackComplexity *CVSSv3AttackComplexity `pulumi:"attackComplexity"`
	// Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments.
	AttackVector       *CVSSv3AttackVector       `pulumi:"attackVector"`
	AvailabilityImpact *CVSSv3AvailabilityImpact `pulumi:"availabilityImpact"`
	// The base score is a function of the base metric scores.
	BaseScore             *float64                     `pulumi:"baseScore"`
	ConfidentialityImpact *CVSSv3ConfidentialityImpact `pulumi:"confidentialityImpact"`
	ExploitabilityScore   *float64                     `pulumi:"exploitabilityScore"`
	ImpactScore           *float64                     `pulumi:"impactScore"`
	IntegrityImpact       *CVSSv3IntegrityImpact       `pulumi:"integrityImpact"`
	PrivilegesRequired    *CVSSv3PrivilegesRequired    `pulumi:"privilegesRequired"`
	Scope                 *CVSSv3Scope                 `pulumi:"scope"`
	UserInteraction       *CVSSv3UserInteraction       `pulumi:"userInteraction"`
}

// CVSSv3Input is an input type that accepts CVSSv3Args and CVSSv3Output values.
// You can construct a concrete instance of `CVSSv3Input` via:
//
//	CVSSv3Args{...}
type CVSSv3Input interface {
	pulumi.Input

	ToCVSSv3Output() CVSSv3Output
	ToCVSSv3OutputWithContext(context.Context) CVSSv3Output
}

// Common Vulnerability Scoring System version 3. For details, see https://www.first.org/cvss/specification-document
type CVSSv3Args struct {
	AttackComplexity CVSSv3AttackComplexityPtrInput `pulumi:"attackComplexity"`
	// Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments.
	AttackVector       CVSSv3AttackVectorPtrInput       `pulumi:"attackVector"`
	AvailabilityImpact CVSSv3AvailabilityImpactPtrInput `pulumi:"availabilityImpact"`
	// The base score is a function of the base metric scores.
	BaseScore             pulumi.Float64PtrInput              `pulumi:"baseScore"`
	ConfidentialityImpact CVSSv3ConfidentialityImpactPtrInput `pulumi:"confidentialityImpact"`
	ExploitabilityScore   pulumi.Float64PtrInput              `pulumi:"exploitabilityScore"`
	ImpactScore           pulumi.Float64PtrInput              `pulumi:"impactScore"`
	IntegrityImpact       CVSSv3IntegrityImpactPtrInput       `pulumi:"integrityImpact"`
	PrivilegesRequired    CVSSv3PrivilegesRequiredPtrInput    `pulumi:"privilegesRequired"`
	Scope                 CVSSv3ScopePtrInput                 `pulumi:"scope"`
	UserInteraction       CVSSv3UserInteractionPtrInput       `pulumi:"userInteraction"`
}

func (CVSSv3Args) ElementType() reflect.Type {
	return reflect.TypeOf((*CVSSv3)(nil)).Elem()
}

func (i CVSSv3Args) ToCVSSv3Output() CVSSv3Output {
	return i.ToCVSSv3OutputWithContext(context.Background())
}

func (i CVSSv3Args) ToCVSSv3OutputWithContext(ctx context.Context) CVSSv3Output {
	return pulumi.ToOutputWithContext(ctx, i).(CVSSv3Output)
}

func (i CVSSv3Args) ToCVSSv3PtrOutput() CVSSv3PtrOutput {
	return i.ToCVSSv3PtrOutputWithContext(context.Background())
}

func (i CVSSv3Args) ToCVSSv3PtrOutputWithContext(ctx context.Context) CVSSv3PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CVSSv3Output).ToCVSSv3PtrOutputWithContext(ctx)
}

// CVSSv3PtrInput is an input type that accepts CVSSv3Args, CVSSv3Ptr and CVSSv3PtrOutput values.
// You can construct a concrete instance of `CVSSv3PtrInput` via:
//
//	        CVSSv3Args{...}
//
//	or:
//
//	        nil
type CVSSv3PtrInput interface {
	pulumi.Input

	ToCVSSv3PtrOutput() CVSSv3PtrOutput
	ToCVSSv3PtrOutputWithContext(context.Context) CVSSv3PtrOutput
}

type cvssv3PtrType CVSSv3Args

func CVSSv3Ptr(v *CVSSv3Args) CVSSv3PtrInput {
	return (*cvssv3PtrType)(v)
}

func (*cvssv3PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CVSSv3)(nil)).Elem()
}

func (i *cvssv3PtrType) ToCVSSv3PtrOutput() CVSSv3PtrOutput {
	return i.ToCVSSv3PtrOutputWithContext(context.Background())
}

func (i *cvssv3PtrType) ToCVSSv3PtrOutputWithContext(ctx context.Context) CVSSv3PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CVSSv3PtrOutput)
}

// Common Vulnerability Scoring System version 3. For details, see https://www.first.org/cvss/specification-document
type CVSSv3Output struct{ *pulumi.OutputState }

func (CVSSv3Output) ElementType() reflect.Type {
	return reflect.TypeOf((*CVSSv3)(nil)).Elem()
}

func (o CVSSv3Output) ToCVSSv3Output() CVSSv3Output {
	return o
}

func (o CVSSv3Output) ToCVSSv3OutputWithContext(ctx context.Context) CVSSv3Output {
	return o
}

func (o CVSSv3Output) ToCVSSv3PtrOutput() CVSSv3PtrOutput {
	return o.ToCVSSv3PtrOutputWithContext(context.Background())
}

func (o CVSSv3Output) ToCVSSv3PtrOutputWithContext(ctx context.Context) CVSSv3PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CVSSv3) *CVSSv3 {
		return &v
	}).(CVSSv3PtrOutput)
}

func (o CVSSv3Output) AttackComplexity() CVSSv3AttackComplexityPtrOutput {
	return o.ApplyT(func(v CVSSv3) *CVSSv3AttackComplexity { return v.AttackComplexity }).(CVSSv3AttackComplexityPtrOutput)
}

// Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments.
func (o CVSSv3Output) AttackVector() CVSSv3AttackVectorPtrOutput {
	return o.ApplyT(func(v CVSSv3) *CVSSv3AttackVector { return v.AttackVector }).(CVSSv3AttackVectorPtrOutput)
}

func (o CVSSv3Output) AvailabilityImpact() CVSSv3AvailabilityImpactPtrOutput {
	return o.ApplyT(func(v CVSSv3) *CVSSv3AvailabilityImpact { return v.AvailabilityImpact }).(CVSSv3AvailabilityImpactPtrOutput)
}

// The base score is a function of the base metric scores.
func (o CVSSv3Output) BaseScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v CVSSv3) *float64 { return v.BaseScore }).(pulumi.Float64PtrOutput)
}

func (o CVSSv3Output) ConfidentialityImpact() CVSSv3ConfidentialityImpactPtrOutput {
	return o.ApplyT(func(v CVSSv3) *CVSSv3ConfidentialityImpact { return v.ConfidentialityImpact }).(CVSSv3ConfidentialityImpactPtrOutput)
}

func (o CVSSv3Output) ExploitabilityScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v CVSSv3) *float64 { return v.ExploitabilityScore }).(pulumi.Float64PtrOutput)
}

func (o CVSSv3Output) ImpactScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v CVSSv3) *float64 { return v.ImpactScore }).(pulumi.Float64PtrOutput)
}

func (o CVSSv3Output) IntegrityImpact() CVSSv3IntegrityImpactPtrOutput {
	return o.ApplyT(func(v CVSSv3) *CVSSv3IntegrityImpact { return v.IntegrityImpact }).(CVSSv3IntegrityImpactPtrOutput)
}

func (o CVSSv3Output) PrivilegesRequired() CVSSv3PrivilegesRequiredPtrOutput {
	return o.ApplyT(func(v CVSSv3) *CVSSv3PrivilegesRequired { return v.PrivilegesRequired }).(CVSSv3PrivilegesRequiredPtrOutput)
}

func (o CVSSv3Output) Scope() CVSSv3ScopePtrOutput {
	return o.ApplyT(func(v CVSSv3) *CVSSv3Scope { return v.Scope }).(CVSSv3ScopePtrOutput)
}

func (o CVSSv3Output) UserInteraction() CVSSv3UserInteractionPtrOutput {
	return o.ApplyT(func(v CVSSv3) *CVSSv3UserInteraction { return v.UserInteraction }).(CVSSv3UserInteractionPtrOutput)
}

type CVSSv3PtrOutput struct{ *pulumi.OutputState }

func (CVSSv3PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CVSSv3)(nil)).Elem()
}

func (o CVSSv3PtrOutput) ToCVSSv3PtrOutput() CVSSv3PtrOutput {
	return o
}

func (o CVSSv3PtrOutput) ToCVSSv3PtrOutputWithContext(ctx context.Context) CVSSv3PtrOutput {
	return o
}

func (o CVSSv3PtrOutput) Elem() CVSSv3Output {
	return o.ApplyT(func(v *CVSSv3) CVSSv3 {
		if v != nil {
			return *v
		}
		var ret CVSSv3
		return ret
	}).(CVSSv3Output)
}

func (o CVSSv3PtrOutput) AttackComplexity() CVSSv3AttackComplexityPtrOutput {
	return o.ApplyT(func(v *CVSSv3) *CVSSv3AttackComplexity {
		if v == nil {
			return nil
		}
		return v.AttackComplexity
	}).(CVSSv3AttackComplexityPtrOutput)
}

// Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments.
func (o CVSSv3PtrOutput) AttackVector() CVSSv3AttackVectorPtrOutput {
	return o.ApplyT(func(v *CVSSv3) *CVSSv3AttackVector {
		if v == nil {
			return nil
		}
		return v.AttackVector
	}).(CVSSv3AttackVectorPtrOutput)
}

func (o CVSSv3PtrOutput) AvailabilityImpact() CVSSv3AvailabilityImpactPtrOutput {
	return o.ApplyT(func(v *CVSSv3) *CVSSv3AvailabilityImpact {
		if v == nil {
			return nil
		}
		return v.AvailabilityImpact
	}).(CVSSv3AvailabilityImpactPtrOutput)
}

// The base score is a function of the base metric scores.
func (o CVSSv3PtrOutput) BaseScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *CVSSv3) *float64 {
		if v == nil {
			return nil
		}
		return v.BaseScore
	}).(pulumi.Float64PtrOutput)
}

func (o CVSSv3PtrOutput) ConfidentialityImpact() CVSSv3ConfidentialityImpactPtrOutput {
	return o.ApplyT(func(v *CVSSv3) *CVSSv3ConfidentialityImpact {
		if v == nil {
			return nil
		}
		return v.ConfidentialityImpact
	}).(CVSSv3ConfidentialityImpactPtrOutput)
}

func (o CVSSv3PtrOutput) ExploitabilityScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *CVSSv3) *float64 {
		if v == nil {
			return nil
		}
		return v.ExploitabilityScore
	}).(pulumi.Float64PtrOutput)
}

func (o CVSSv3PtrOutput) ImpactScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *CVSSv3) *float64 {
		if v == nil {
			return nil
		}
		return v.ImpactScore
	}).(pulumi.Float64PtrOutput)
}

func (o CVSSv3PtrOutput) IntegrityImpact() CVSSv3IntegrityImpactPtrOutput {
	return o.ApplyT(func(v *CVSSv3) *CVSSv3IntegrityImpact {
		if v == nil {
			return nil
		}
		return v.IntegrityImpact
	}).(CVSSv3IntegrityImpactPtrOutput)
}

func (o CVSSv3PtrOutput) PrivilegesRequired() CVSSv3PrivilegesRequiredPtrOutput {
	return o.ApplyT(func(v *CVSSv3) *CVSSv3PrivilegesRequired {
		if v == nil {
			return nil
		}
		return v.PrivilegesRequired
	}).(CVSSv3PrivilegesRequiredPtrOutput)
}

func (o CVSSv3PtrOutput) Scope() CVSSv3ScopePtrOutput {
	return o.ApplyT(func(v *CVSSv3) *CVSSv3Scope {
		if v == nil {
			return nil
		}
		return v.Scope
	}).(CVSSv3ScopePtrOutput)
}

func (o CVSSv3PtrOutput) UserInteraction() CVSSv3UserInteractionPtrOutput {
	return o.ApplyT(func(v *CVSSv3) *CVSSv3UserInteraction {
		if v == nil {
			return nil
		}
		return v.UserInteraction
	}).(CVSSv3UserInteractionPtrOutput)
}

// Common Vulnerability Scoring System version 3. For details, see https://www.first.org/cvss/specification-document
type CVSSv3Response struct {
	AttackComplexity string `pulumi:"attackComplexity"`
	// Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments.
	AttackVector       string `pulumi:"attackVector"`
	AvailabilityImpact string `pulumi:"availabilityImpact"`
	// The base score is a function of the base metric scores.
	BaseScore             float64 `pulumi:"baseScore"`
	ConfidentialityImpact string  `pulumi:"confidentialityImpact"`
	ExploitabilityScore   float64 `pulumi:"exploitabilityScore"`
	ImpactScore           float64 `pulumi:"impactScore"`
	IntegrityImpact       string  `pulumi:"integrityImpact"`
	PrivilegesRequired    string  `pulumi:"privilegesRequired"`
	Scope                 string  `pulumi:"scope"`
	UserInteraction       string  `pulumi:"userInteraction"`
}

// Common Vulnerability Scoring System version 3. For details, see https://www.first.org/cvss/specification-document
type CVSSv3ResponseOutput struct{ *pulumi.OutputState }

func (CVSSv3ResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CVSSv3Response)(nil)).Elem()
}

func (o CVSSv3ResponseOutput) ToCVSSv3ResponseOutput() CVSSv3ResponseOutput {
	return o
}

func (o CVSSv3ResponseOutput) ToCVSSv3ResponseOutputWithContext(ctx context.Context) CVSSv3ResponseOutput {
	return o
}

func (o CVSSv3ResponseOutput) AttackComplexity() pulumi.StringOutput {
	return o.ApplyT(func(v CVSSv3Response) string { return v.AttackComplexity }).(pulumi.StringOutput)
}

// Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments.
func (o CVSSv3ResponseOutput) AttackVector() pulumi.StringOutput {
	return o.ApplyT(func(v CVSSv3Response) string { return v.AttackVector }).(pulumi.StringOutput)
}

func (o CVSSv3ResponseOutput) AvailabilityImpact() pulumi.StringOutput {
	return o.ApplyT(func(v CVSSv3Response) string { return v.AvailabilityImpact }).(pulumi.StringOutput)
}

// The base score is a function of the base metric scores.
func (o CVSSv3ResponseOutput) BaseScore() pulumi.Float64Output {
	return o.ApplyT(func(v CVSSv3Response) float64 { return v.BaseScore }).(pulumi.Float64Output)
}

func (o CVSSv3ResponseOutput) ConfidentialityImpact() pulumi.StringOutput {
	return o.ApplyT(func(v CVSSv3Response) string { return v.ConfidentialityImpact }).(pulumi.StringOutput)
}

func (o CVSSv3ResponseOutput) ExploitabilityScore() pulumi.Float64Output {
	return o.ApplyT(func(v CVSSv3Response) float64 { return v.ExploitabilityScore }).(pulumi.Float64Output)
}

func (o CVSSv3ResponseOutput) ImpactScore() pulumi.Float64Output {
	return o.ApplyT(func(v CVSSv3Response) float64 { return v.ImpactScore }).(pulumi.Float64Output)
}

func (o CVSSv3ResponseOutput) IntegrityImpact() pulumi.StringOutput {
	return o.ApplyT(func(v CVSSv3Response) string { return v.IntegrityImpact }).(pulumi.StringOutput)
}

func (o CVSSv3ResponseOutput) PrivilegesRequired() pulumi.StringOutput {
	return o.ApplyT(func(v CVSSv3Response) string { return v.PrivilegesRequired }).(pulumi.StringOutput)
}

func (o CVSSv3ResponseOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v CVSSv3Response) string { return v.Scope }).(pulumi.StringOutput)
}

func (o CVSSv3ResponseOutput) UserInteraction() pulumi.StringOutput {
	return o.ApplyT(func(v CVSSv3Response) string { return v.UserInteraction }).(pulumi.StringOutput)
}

// The category to which the update belongs.
type Category struct {
	// The identifier of the category.
	CategoryId *string `pulumi:"categoryId"`
	// The localized name of the category.
	Name *string `pulumi:"name"`
}

// CategoryInput is an input type that accepts CategoryArgs and CategoryOutput values.
// You can construct a concrete instance of `CategoryInput` via:
//
//	CategoryArgs{...}
type CategoryInput interface {
	pulumi.Input

	ToCategoryOutput() CategoryOutput
	ToCategoryOutputWithContext(context.Context) CategoryOutput
}

// The category to which the update belongs.
type CategoryArgs struct {
	// The identifier of the category.
	CategoryId pulumi.StringPtrInput `pulumi:"categoryId"`
	// The localized name of the category.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (CategoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Category)(nil)).Elem()
}

func (i CategoryArgs) ToCategoryOutput() CategoryOutput {
	return i.ToCategoryOutputWithContext(context.Background())
}

func (i CategoryArgs) ToCategoryOutputWithContext(ctx context.Context) CategoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CategoryOutput)
}

// CategoryArrayInput is an input type that accepts CategoryArray and CategoryArrayOutput values.
// You can construct a concrete instance of `CategoryArrayInput` via:
//
//	CategoryArray{ CategoryArgs{...} }
type CategoryArrayInput interface {
	pulumi.Input

	ToCategoryArrayOutput() CategoryArrayOutput
	ToCategoryArrayOutputWithContext(context.Context) CategoryArrayOutput
}

type CategoryArray []CategoryInput

func (CategoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Category)(nil)).Elem()
}

func (i CategoryArray) ToCategoryArrayOutput() CategoryArrayOutput {
	return i.ToCategoryArrayOutputWithContext(context.Background())
}

func (i CategoryArray) ToCategoryArrayOutputWithContext(ctx context.Context) CategoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CategoryArrayOutput)
}

// The category to which the update belongs.
type CategoryOutput struct{ *pulumi.OutputState }

func (CategoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Category)(nil)).Elem()
}

func (o CategoryOutput) ToCategoryOutput() CategoryOutput {
	return o
}

func (o CategoryOutput) ToCategoryOutputWithContext(ctx context.Context) CategoryOutput {
	return o
}

// The identifier of the category.
func (o CategoryOutput) CategoryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Category) *string { return v.CategoryId }).(pulumi.StringPtrOutput)
}

// The localized name of the category.
func (o CategoryOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Category) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type CategoryArrayOutput struct{ *pulumi.OutputState }

func (CategoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Category)(nil)).Elem()
}

func (o CategoryArrayOutput) ToCategoryArrayOutput() CategoryArrayOutput {
	return o
}

func (o CategoryArrayOutput) ToCategoryArrayOutputWithContext(ctx context.Context) CategoryArrayOutput {
	return o
}

func (o CategoryArrayOutput) Index(i pulumi.IntInput) CategoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Category {
		return vs[0].([]Category)[vs[1].(int)]
	}).(CategoryOutput)
}

// The category to which the update belongs.
type CategoryResponse struct {
	// The identifier of the category.
	CategoryId string `pulumi:"categoryId"`
	// The localized name of the category.
	Name string `pulumi:"name"`
}

// The category to which the update belongs.
type CategoryResponseOutput struct{ *pulumi.OutputState }

func (CategoryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CategoryResponse)(nil)).Elem()
}

func (o CategoryResponseOutput) ToCategoryResponseOutput() CategoryResponseOutput {
	return o
}

func (o CategoryResponseOutput) ToCategoryResponseOutputWithContext(ctx context.Context) CategoryResponseOutput {
	return o
}

// The identifier of the category.
func (o CategoryResponseOutput) CategoryId() pulumi.StringOutput {
	return o.ApplyT(func(v CategoryResponse) string { return v.CategoryId }).(pulumi.StringOutput)
}

// The localized name of the category.
func (o CategoryResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CategoryResponse) string { return v.Name }).(pulumi.StringOutput)
}

type CategoryResponseArrayOutput struct{ *pulumi.OutputState }

func (CategoryResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CategoryResponse)(nil)).Elem()
}

func (o CategoryResponseArrayOutput) ToCategoryResponseArrayOutput() CategoryResponseArrayOutput {
	return o
}

func (o CategoryResponseArrayOutput) ToCategoryResponseArrayOutputWithContext(ctx context.Context) CategoryResponseArrayOutput {
	return o
}

func (o CategoryResponseArrayOutput) Index(i pulumi.IntInput) CategoryResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CategoryResponse {
		return vs[0].([]CategoryResponse)[vs[1].(int)]
	}).(CategoryResponseOutput)
}

// A compliance check that is a CIS benchmark.
type CisBenchmark struct {
	ProfileLevel *int                  `pulumi:"profileLevel"`
	Severity     *CisBenchmarkSeverity `pulumi:"severity"`
}

// CisBenchmarkInput is an input type that accepts CisBenchmarkArgs and CisBenchmarkOutput values.
// You can construct a concrete instance of `CisBenchmarkInput` via:
//
//	CisBenchmarkArgs{...}
type CisBenchmarkInput interface {
	pulumi.Input

	ToCisBenchmarkOutput() CisBenchmarkOutput
	ToCisBenchmarkOutputWithContext(context.Context) CisBenchmarkOutput
}

// A compliance check that is a CIS benchmark.
type CisBenchmarkArgs struct {
	ProfileLevel pulumi.IntPtrInput           `pulumi:"profileLevel"`
	Severity     CisBenchmarkSeverityPtrInput `pulumi:"severity"`
}

func (CisBenchmarkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CisBenchmark)(nil)).Elem()
}

func (i CisBenchmarkArgs) ToCisBenchmarkOutput() CisBenchmarkOutput {
	return i.ToCisBenchmarkOutputWithContext(context.Background())
}

func (i CisBenchmarkArgs) ToCisBenchmarkOutputWithContext(ctx context.Context) CisBenchmarkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CisBenchmarkOutput)
}

func (i CisBenchmarkArgs) ToCisBenchmarkPtrOutput() CisBenchmarkPtrOutput {
	return i.ToCisBenchmarkPtrOutputWithContext(context.Background())
}

func (i CisBenchmarkArgs) ToCisBenchmarkPtrOutputWithContext(ctx context.Context) CisBenchmarkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CisBenchmarkOutput).ToCisBenchmarkPtrOutputWithContext(ctx)
}

// CisBenchmarkPtrInput is an input type that accepts CisBenchmarkArgs, CisBenchmarkPtr and CisBenchmarkPtrOutput values.
// You can construct a concrete instance of `CisBenchmarkPtrInput` via:
//
//	        CisBenchmarkArgs{...}
//
//	or:
//
//	        nil
type CisBenchmarkPtrInput interface {
	pulumi.Input

	ToCisBenchmarkPtrOutput() CisBenchmarkPtrOutput
	ToCisBenchmarkPtrOutputWithContext(context.Context) CisBenchmarkPtrOutput
}

type cisBenchmarkPtrType CisBenchmarkArgs

func CisBenchmarkPtr(v *CisBenchmarkArgs) CisBenchmarkPtrInput {
	return (*cisBenchmarkPtrType)(v)
}

func (*cisBenchmarkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CisBenchmark)(nil)).Elem()
}

func (i *cisBenchmarkPtrType) ToCisBenchmarkPtrOutput() CisBenchmarkPtrOutput {
	return i.ToCisBenchmarkPtrOutputWithContext(context.Background())
}

func (i *cisBenchmarkPtrType) ToCisBenchmarkPtrOutputWithContext(ctx context.Context) CisBenchmarkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CisBenchmarkPtrOutput)
}

// A compliance check that is a CIS benchmark.
type CisBenchmarkOutput struct{ *pulumi.OutputState }

func (CisBenchmarkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CisBenchmark)(nil)).Elem()
}

func (o CisBenchmarkOutput) ToCisBenchmarkOutput() CisBenchmarkOutput {
	return o
}

func (o CisBenchmarkOutput) ToCisBenchmarkOutputWithContext(ctx context.Context) CisBenchmarkOutput {
	return o
}

func (o CisBenchmarkOutput) ToCisBenchmarkPtrOutput() CisBenchmarkPtrOutput {
	return o.ToCisBenchmarkPtrOutputWithContext(context.Background())
}

func (o CisBenchmarkOutput) ToCisBenchmarkPtrOutputWithContext(ctx context.Context) CisBenchmarkPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CisBenchmark) *CisBenchmark {
		return &v
	}).(CisBenchmarkPtrOutput)
}

func (o CisBenchmarkOutput) ProfileLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CisBenchmark) *int { return v.ProfileLevel }).(pulumi.IntPtrOutput)
}

func (o CisBenchmarkOutput) Severity() CisBenchmarkSeverityPtrOutput {
	return o.ApplyT(func(v CisBenchmark) *CisBenchmarkSeverity { return v.Severity }).(CisBenchmarkSeverityPtrOutput)
}

type CisBenchmarkPtrOutput struct{ *pulumi.OutputState }

func (CisBenchmarkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CisBenchmark)(nil)).Elem()
}

func (o CisBenchmarkPtrOutput) ToCisBenchmarkPtrOutput() CisBenchmarkPtrOutput {
	return o
}

func (o CisBenchmarkPtrOutput) ToCisBenchmarkPtrOutputWithContext(ctx context.Context) CisBenchmarkPtrOutput {
	return o
}

func (o CisBenchmarkPtrOutput) Elem() CisBenchmarkOutput {
	return o.ApplyT(func(v *CisBenchmark) CisBenchmark {
		if v != nil {
			return *v
		}
		var ret CisBenchmark
		return ret
	}).(CisBenchmarkOutput)
}

func (o CisBenchmarkPtrOutput) ProfileLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CisBenchmark) *int {
		if v == nil {
			return nil
		}
		return v.ProfileLevel
	}).(pulumi.IntPtrOutput)
}

func (o CisBenchmarkPtrOutput) Severity() CisBenchmarkSeverityPtrOutput {
	return o.ApplyT(func(v *CisBenchmark) *CisBenchmarkSeverity {
		if v == nil {
			return nil
		}
		return v.Severity
	}).(CisBenchmarkSeverityPtrOutput)
}

// A compliance check that is a CIS benchmark.
type CisBenchmarkResponse struct {
	ProfileLevel int    `pulumi:"profileLevel"`
	Severity     string `pulumi:"severity"`
}

// A compliance check that is a CIS benchmark.
type CisBenchmarkResponseOutput struct{ *pulumi.OutputState }

func (CisBenchmarkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CisBenchmarkResponse)(nil)).Elem()
}

func (o CisBenchmarkResponseOutput) ToCisBenchmarkResponseOutput() CisBenchmarkResponseOutput {
	return o
}

func (o CisBenchmarkResponseOutput) ToCisBenchmarkResponseOutputWithContext(ctx context.Context) CisBenchmarkResponseOutput {
	return o
}

func (o CisBenchmarkResponseOutput) ProfileLevel() pulumi.IntOutput {
	return o.ApplyT(func(v CisBenchmarkResponse) int { return v.ProfileLevel }).(pulumi.IntOutput)
}

func (o CisBenchmarkResponseOutput) Severity() pulumi.StringOutput {
	return o.ApplyT(func(v CisBenchmarkResponse) string { return v.Severity }).(pulumi.StringOutput)
}

// A CloudRepoSourceContext denotes a particular revision in a Google Cloud Source Repo.
type CloudRepoSourceContext struct {
	// An alias, which may be a branch or tag.
	AliasContext *AliasContext `pulumi:"aliasContext"`
	// The ID of the repo.
	RepoId *RepoId `pulumi:"repoId"`
	// A revision ID.
	RevisionId *string `pulumi:"revisionId"`
}

// CloudRepoSourceContextInput is an input type that accepts CloudRepoSourceContextArgs and CloudRepoSourceContextOutput values.
// You can construct a concrete instance of `CloudRepoSourceContextInput` via:
//
//	CloudRepoSourceContextArgs{...}
type CloudRepoSourceContextInput interface {
	pulumi.Input

	ToCloudRepoSourceContextOutput() CloudRepoSourceContextOutput
	ToCloudRepoSourceContextOutputWithContext(context.Context) CloudRepoSourceContextOutput
}

// A CloudRepoSourceContext denotes a particular revision in a Google Cloud Source Repo.
type CloudRepoSourceContextArgs struct {
	// An alias, which may be a branch or tag.
	AliasContext AliasContextPtrInput `pulumi:"aliasContext"`
	// The ID of the repo.
	RepoId RepoIdPtrInput `pulumi:"repoId"`
	// A revision ID.
	RevisionId pulumi.StringPtrInput `pulumi:"revisionId"`
}

func (CloudRepoSourceContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudRepoSourceContext)(nil)).Elem()
}

func (i CloudRepoSourceContextArgs) ToCloudRepoSourceContextOutput() CloudRepoSourceContextOutput {
	return i.ToCloudRepoSourceContextOutputWithContext(context.Background())
}

func (i CloudRepoSourceContextArgs) ToCloudRepoSourceContextOutputWithContext(ctx context.Context) CloudRepoSourceContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudRepoSourceContextOutput)
}

func (i CloudRepoSourceContextArgs) ToCloudRepoSourceContextPtrOutput() CloudRepoSourceContextPtrOutput {
	return i.ToCloudRepoSourceContextPtrOutputWithContext(context.Background())
}

func (i CloudRepoSourceContextArgs) ToCloudRepoSourceContextPtrOutputWithContext(ctx context.Context) CloudRepoSourceContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudRepoSourceContextOutput).ToCloudRepoSourceContextPtrOutputWithContext(ctx)
}

// CloudRepoSourceContextPtrInput is an input type that accepts CloudRepoSourceContextArgs, CloudRepoSourceContextPtr and CloudRepoSourceContextPtrOutput values.
// You can construct a concrete instance of `CloudRepoSourceContextPtrInput` via:
//
//	        CloudRepoSourceContextArgs{...}
//
//	or:
//
//	        nil
type CloudRepoSourceContextPtrInput interface {
	pulumi.Input

	ToCloudRepoSourceContextPtrOutput() CloudRepoSourceContextPtrOutput
	ToCloudRepoSourceContextPtrOutputWithContext(context.Context) CloudRepoSourceContextPtrOutput
}

type cloudRepoSourceContextPtrType CloudRepoSourceContextArgs

func CloudRepoSourceContextPtr(v *CloudRepoSourceContextArgs) CloudRepoSourceContextPtrInput {
	return (*cloudRepoSourceContextPtrType)(v)
}

func (*cloudRepoSourceContextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudRepoSourceContext)(nil)).Elem()
}

func (i *cloudRepoSourceContextPtrType) ToCloudRepoSourceContextPtrOutput() CloudRepoSourceContextPtrOutput {
	return i.ToCloudRepoSourceContextPtrOutputWithContext(context.Background())
}

func (i *cloudRepoSourceContextPtrType) ToCloudRepoSourceContextPtrOutputWithContext(ctx context.Context) CloudRepoSourceContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudRepoSourceContextPtrOutput)
}

// A CloudRepoSourceContext denotes a particular revision in a Google Cloud Source Repo.
type CloudRepoSourceContextOutput struct{ *pulumi.OutputState }

func (CloudRepoSourceContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudRepoSourceContext)(nil)).Elem()
}

func (o CloudRepoSourceContextOutput) ToCloudRepoSourceContextOutput() CloudRepoSourceContextOutput {
	return o
}

func (o CloudRepoSourceContextOutput) ToCloudRepoSourceContextOutputWithContext(ctx context.Context) CloudRepoSourceContextOutput {
	return o
}

func (o CloudRepoSourceContextOutput) ToCloudRepoSourceContextPtrOutput() CloudRepoSourceContextPtrOutput {
	return o.ToCloudRepoSourceContextPtrOutputWithContext(context.Background())
}

func (o CloudRepoSourceContextOutput) ToCloudRepoSourceContextPtrOutputWithContext(ctx context.Context) CloudRepoSourceContextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CloudRepoSourceContext) *CloudRepoSourceContext {
		return &v
	}).(CloudRepoSourceContextPtrOutput)
}

// An alias, which may be a branch or tag.
func (o CloudRepoSourceContextOutput) AliasContext() AliasContextPtrOutput {
	return o.ApplyT(func(v CloudRepoSourceContext) *AliasContext { return v.AliasContext }).(AliasContextPtrOutput)
}

// The ID of the repo.
func (o CloudRepoSourceContextOutput) RepoId() RepoIdPtrOutput {
	return o.ApplyT(func(v CloudRepoSourceContext) *RepoId { return v.RepoId }).(RepoIdPtrOutput)
}

// A revision ID.
func (o CloudRepoSourceContextOutput) RevisionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CloudRepoSourceContext) *string { return v.RevisionId }).(pulumi.StringPtrOutput)
}

type CloudRepoSourceContextPtrOutput struct{ *pulumi.OutputState }

func (CloudRepoSourceContextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudRepoSourceContext)(nil)).Elem()
}

func (o CloudRepoSourceContextPtrOutput) ToCloudRepoSourceContextPtrOutput() CloudRepoSourceContextPtrOutput {
	return o
}

func (o CloudRepoSourceContextPtrOutput) ToCloudRepoSourceContextPtrOutputWithContext(ctx context.Context) CloudRepoSourceContextPtrOutput {
	return o
}

func (o CloudRepoSourceContextPtrOutput) Elem() CloudRepoSourceContextOutput {
	return o.ApplyT(func(v *CloudRepoSourceContext) CloudRepoSourceContext {
		if v != nil {
			return *v
		}
		var ret CloudRepoSourceContext
		return ret
	}).(CloudRepoSourceContextOutput)
}

// An alias, which may be a branch or tag.
func (o CloudRepoSourceContextPtrOutput) AliasContext() AliasContextPtrOutput {
	return o.ApplyT(func(v *CloudRepoSourceContext) *AliasContext {
		if v == nil {
			return nil
		}
		return v.AliasContext
	}).(AliasContextPtrOutput)
}

// The ID of the repo.
func (o CloudRepoSourceContextPtrOutput) RepoId() RepoIdPtrOutput {
	return o.ApplyT(func(v *CloudRepoSourceContext) *RepoId {
		if v == nil {
			return nil
		}
		return v.RepoId
	}).(RepoIdPtrOutput)
}

// A revision ID.
func (o CloudRepoSourceContextPtrOutput) RevisionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudRepoSourceContext) *string {
		if v == nil {
			return nil
		}
		return v.RevisionId
	}).(pulumi.StringPtrOutput)
}

// A CloudRepoSourceContext denotes a particular revision in a Google Cloud Source Repo.
type CloudRepoSourceContextResponse struct {
	// An alias, which may be a branch or tag.
	AliasContext AliasContextResponse `pulumi:"aliasContext"`
	// The ID of the repo.
	RepoId RepoIdResponse `pulumi:"repoId"`
	// A revision ID.
	RevisionId string `pulumi:"revisionId"`
}

// A CloudRepoSourceContext denotes a particular revision in a Google Cloud Source Repo.
type CloudRepoSourceContextResponseOutput struct{ *pulumi.OutputState }

func (CloudRepoSourceContextResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudRepoSourceContextResponse)(nil)).Elem()
}

func (o CloudRepoSourceContextResponseOutput) ToCloudRepoSourceContextResponseOutput() CloudRepoSourceContextResponseOutput {
	return o
}

func (o CloudRepoSourceContextResponseOutput) ToCloudRepoSourceContextResponseOutputWithContext(ctx context.Context) CloudRepoSourceContextResponseOutput {
	return o
}

// An alias, which may be a branch or tag.
func (o CloudRepoSourceContextResponseOutput) AliasContext() AliasContextResponseOutput {
	return o.ApplyT(func(v CloudRepoSourceContextResponse) AliasContextResponse { return v.AliasContext }).(AliasContextResponseOutput)
}

// The ID of the repo.
func (o CloudRepoSourceContextResponseOutput) RepoId() RepoIdResponseOutput {
	return o.ApplyT(func(v CloudRepoSourceContextResponse) RepoIdResponse { return v.RepoId }).(RepoIdResponseOutput)
}

// A revision ID.
func (o CloudRepoSourceContextResponseOutput) RevisionId() pulumi.StringOutput {
	return o.ApplyT(func(v CloudRepoSourceContextResponse) string { return v.RevisionId }).(pulumi.StringOutput)
}

// Command describes a step performed as part of the build pipeline.
type Command struct {
	// Command-line arguments used when executing this command.
	Args []string `pulumi:"args"`
	// Working directory (relative to project source root) used when running this command.
	Dir *string `pulumi:"dir"`
	// Environment variables set before running this command.
	Env []string `pulumi:"env"`
	// Optional unique identifier for this command, used in wait_for to reference this command as a dependency.
	Id *string `pulumi:"id"`
	// Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`.
	Name string `pulumi:"name"`
	// The ID(s) of the command(s) that this command depends on.
	WaitFor []string `pulumi:"waitFor"`
}

// CommandInput is an input type that accepts CommandArgs and CommandOutput values.
// You can construct a concrete instance of `CommandInput` via:
//
//	CommandArgs{...}
type CommandInput interface {
	pulumi.Input

	ToCommandOutput() CommandOutput
	ToCommandOutputWithContext(context.Context) CommandOutput
}

// Command describes a step performed as part of the build pipeline.
type CommandArgs struct {
	// Command-line arguments used when executing this command.
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Working directory (relative to project source root) used when running this command.
	Dir pulumi.StringPtrInput `pulumi:"dir"`
	// Environment variables set before running this command.
	Env pulumi.StringArrayInput `pulumi:"env"`
	// Optional unique identifier for this command, used in wait_for to reference this command as a dependency.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`.
	Name pulumi.StringInput `pulumi:"name"`
	// The ID(s) of the command(s) that this command depends on.
	WaitFor pulumi.StringArrayInput `pulumi:"waitFor"`
}

func (CommandArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Command)(nil)).Elem()
}

func (i CommandArgs) ToCommandOutput() CommandOutput {
	return i.ToCommandOutputWithContext(context.Background())
}

func (i CommandArgs) ToCommandOutputWithContext(ctx context.Context) CommandOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandOutput)
}

// CommandArrayInput is an input type that accepts CommandArray and CommandArrayOutput values.
// You can construct a concrete instance of `CommandArrayInput` via:
//
//	CommandArray{ CommandArgs{...} }
type CommandArrayInput interface {
	pulumi.Input

	ToCommandArrayOutput() CommandArrayOutput
	ToCommandArrayOutputWithContext(context.Context) CommandArrayOutput
}

type CommandArray []CommandInput

func (CommandArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Command)(nil)).Elem()
}

func (i CommandArray) ToCommandArrayOutput() CommandArrayOutput {
	return i.ToCommandArrayOutputWithContext(context.Background())
}

func (i CommandArray) ToCommandArrayOutputWithContext(ctx context.Context) CommandArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandArrayOutput)
}

// Command describes a step performed as part of the build pipeline.
type CommandOutput struct{ *pulumi.OutputState }

func (CommandOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Command)(nil)).Elem()
}

func (o CommandOutput) ToCommandOutput() CommandOutput {
	return o
}

func (o CommandOutput) ToCommandOutputWithContext(ctx context.Context) CommandOutput {
	return o
}

// Command-line arguments used when executing this command.
func (o CommandOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Command) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Working directory (relative to project source root) used when running this command.
func (o CommandOutput) Dir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Command) *string { return v.Dir }).(pulumi.StringPtrOutput)
}

// Environment variables set before running this command.
func (o CommandOutput) Env() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Command) []string { return v.Env }).(pulumi.StringArrayOutput)
}

// Optional unique identifier for this command, used in wait_for to reference this command as a dependency.
func (o CommandOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Command) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`.
func (o CommandOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Command) string { return v.Name }).(pulumi.StringOutput)
}

// The ID(s) of the command(s) that this command depends on.
func (o CommandOutput) WaitFor() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Command) []string { return v.WaitFor }).(pulumi.StringArrayOutput)
}

type CommandArrayOutput struct{ *pulumi.OutputState }

func (CommandArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Command)(nil)).Elem()
}

func (o CommandArrayOutput) ToCommandArrayOutput() CommandArrayOutput {
	return o
}

func (o CommandArrayOutput) ToCommandArrayOutputWithContext(ctx context.Context) CommandArrayOutput {
	return o
}

func (o CommandArrayOutput) Index(i pulumi.IntInput) CommandOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Command {
		return vs[0].([]Command)[vs[1].(int)]
	}).(CommandOutput)
}

// Command describes a step performed as part of the build pipeline.
type CommandResponse struct {
	// Command-line arguments used when executing this command.
	Args []string `pulumi:"args"`
	// Working directory (relative to project source root) used when running this command.
	Dir string `pulumi:"dir"`
	// Environment variables set before running this command.
	Env []string `pulumi:"env"`
	// Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`.
	Name string `pulumi:"name"`
	// The ID(s) of the command(s) that this command depends on.
	WaitFor []string `pulumi:"waitFor"`
}

// Command describes a step performed as part of the build pipeline.
type CommandResponseOutput struct{ *pulumi.OutputState }

func (CommandResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommandResponse)(nil)).Elem()
}

func (o CommandResponseOutput) ToCommandResponseOutput() CommandResponseOutput {
	return o
}

func (o CommandResponseOutput) ToCommandResponseOutputWithContext(ctx context.Context) CommandResponseOutput {
	return o
}

// Command-line arguments used when executing this command.
func (o CommandResponseOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CommandResponse) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Working directory (relative to project source root) used when running this command.
func (o CommandResponseOutput) Dir() pulumi.StringOutput {
	return o.ApplyT(func(v CommandResponse) string { return v.Dir }).(pulumi.StringOutput)
}

// Environment variables set before running this command.
func (o CommandResponseOutput) Env() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CommandResponse) []string { return v.Env }).(pulumi.StringArrayOutput)
}

// Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`.
func (o CommandResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CommandResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The ID(s) of the command(s) that this command depends on.
func (o CommandResponseOutput) WaitFor() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CommandResponse) []string { return v.WaitFor }).(pulumi.StringArrayOutput)
}

type CommandResponseArrayOutput struct{ *pulumi.OutputState }

func (CommandResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CommandResponse)(nil)).Elem()
}

func (o CommandResponseArrayOutput) ToCommandResponseArrayOutput() CommandResponseArrayOutput {
	return o
}

func (o CommandResponseArrayOutput) ToCommandResponseArrayOutputWithContext(ctx context.Context) CommandResponseArrayOutput {
	return o
}

func (o CommandResponseArrayOutput) Index(i pulumi.IntInput) CommandResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CommandResponse {
		return vs[0].([]CommandResponse)[vs[1].(int)]
	}).(CommandResponseOutput)
}

// Indicates that the builder claims certain fields in this message to be complete.
type Completeness struct {
	// If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe.
	Arguments *bool `pulumi:"arguments"`
	// If true, the builder claims that recipe.environment is claimed to be complete.
	Environment *bool `pulumi:"environment"`
	// If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called "hermetic".
	Materials *bool `pulumi:"materials"`
}

// CompletenessInput is an input type that accepts CompletenessArgs and CompletenessOutput values.
// You can construct a concrete instance of `CompletenessInput` via:
//
//	CompletenessArgs{...}
type CompletenessInput interface {
	pulumi.Input

	ToCompletenessOutput() CompletenessOutput
	ToCompletenessOutputWithContext(context.Context) CompletenessOutput
}

// Indicates that the builder claims certain fields in this message to be complete.
type CompletenessArgs struct {
	// If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe.
	Arguments pulumi.BoolPtrInput `pulumi:"arguments"`
	// If true, the builder claims that recipe.environment is claimed to be complete.
	Environment pulumi.BoolPtrInput `pulumi:"environment"`
	// If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called "hermetic".
	Materials pulumi.BoolPtrInput `pulumi:"materials"`
}

func (CompletenessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Completeness)(nil)).Elem()
}

func (i CompletenessArgs) ToCompletenessOutput() CompletenessOutput {
	return i.ToCompletenessOutputWithContext(context.Background())
}

func (i CompletenessArgs) ToCompletenessOutputWithContext(ctx context.Context) CompletenessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CompletenessOutput)
}

func (i CompletenessArgs) ToCompletenessPtrOutput() CompletenessPtrOutput {
	return i.ToCompletenessPtrOutputWithContext(context.Background())
}

func (i CompletenessArgs) ToCompletenessPtrOutputWithContext(ctx context.Context) CompletenessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CompletenessOutput).ToCompletenessPtrOutputWithContext(ctx)
}

// CompletenessPtrInput is an input type that accepts CompletenessArgs, CompletenessPtr and CompletenessPtrOutput values.
// You can construct a concrete instance of `CompletenessPtrInput` via:
//
//	        CompletenessArgs{...}
//
//	or:
//
//	        nil
type CompletenessPtrInput interface {
	pulumi.Input

	ToCompletenessPtrOutput() CompletenessPtrOutput
	ToCompletenessPtrOutputWithContext(context.Context) CompletenessPtrOutput
}

type completenessPtrType CompletenessArgs

func CompletenessPtr(v *CompletenessArgs) CompletenessPtrInput {
	return (*completenessPtrType)(v)
}

func (*completenessPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Completeness)(nil)).Elem()
}

func (i *completenessPtrType) ToCompletenessPtrOutput() CompletenessPtrOutput {
	return i.ToCompletenessPtrOutputWithContext(context.Background())
}

func (i *completenessPtrType) ToCompletenessPtrOutputWithContext(ctx context.Context) CompletenessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CompletenessPtrOutput)
}

// Indicates that the builder claims certain fields in this message to be complete.
type CompletenessOutput struct{ *pulumi.OutputState }

func (CompletenessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Completeness)(nil)).Elem()
}

func (o CompletenessOutput) ToCompletenessOutput() CompletenessOutput {
	return o
}

func (o CompletenessOutput) ToCompletenessOutputWithContext(ctx context.Context) CompletenessOutput {
	return o
}

func (o CompletenessOutput) ToCompletenessPtrOutput() CompletenessPtrOutput {
	return o.ToCompletenessPtrOutputWithContext(context.Background())
}

func (o CompletenessOutput) ToCompletenessPtrOutputWithContext(ctx context.Context) CompletenessPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Completeness) *Completeness {
		return &v
	}).(CompletenessPtrOutput)
}

// If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe.
func (o CompletenessOutput) Arguments() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Completeness) *bool { return v.Arguments }).(pulumi.BoolPtrOutput)
}

// If true, the builder claims that recipe.environment is claimed to be complete.
func (o CompletenessOutput) Environment() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Completeness) *bool { return v.Environment }).(pulumi.BoolPtrOutput)
}

// If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called "hermetic".
func (o CompletenessOutput) Materials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Completeness) *bool { return v.Materials }).(pulumi.BoolPtrOutput)
}

type CompletenessPtrOutput struct{ *pulumi.OutputState }

func (CompletenessPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Completeness)(nil)).Elem()
}

func (o CompletenessPtrOutput) ToCompletenessPtrOutput() CompletenessPtrOutput {
	return o
}

func (o CompletenessPtrOutput) ToCompletenessPtrOutputWithContext(ctx context.Context) CompletenessPtrOutput {
	return o
}

func (o CompletenessPtrOutput) Elem() CompletenessOutput {
	return o.ApplyT(func(v *Completeness) Completeness {
		if v != nil {
			return *v
		}
		var ret Completeness
		return ret
	}).(CompletenessOutput)
}

// If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe.
func (o CompletenessPtrOutput) Arguments() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Completeness) *bool {
		if v == nil {
			return nil
		}
		return v.Arguments
	}).(pulumi.BoolPtrOutput)
}

// If true, the builder claims that recipe.environment is claimed to be complete.
func (o CompletenessPtrOutput) Environment() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Completeness) *bool {
		if v == nil {
			return nil
		}
		return v.Environment
	}).(pulumi.BoolPtrOutput)
}

// If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called "hermetic".
func (o CompletenessPtrOutput) Materials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Completeness) *bool {
		if v == nil {
			return nil
		}
		return v.Materials
	}).(pulumi.BoolPtrOutput)
}

// Indicates that the builder claims certain fields in this message to be complete.
type CompletenessResponse struct {
	// If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe.
	Arguments bool `pulumi:"arguments"`
	// If true, the builder claims that recipe.environment is claimed to be complete.
	Environment bool `pulumi:"environment"`
	// If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called "hermetic".
	Materials bool `pulumi:"materials"`
}

// Indicates that the builder claims certain fields in this message to be complete.
type CompletenessResponseOutput struct{ *pulumi.OutputState }

func (CompletenessResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CompletenessResponse)(nil)).Elem()
}

func (o CompletenessResponseOutput) ToCompletenessResponseOutput() CompletenessResponseOutput {
	return o
}

func (o CompletenessResponseOutput) ToCompletenessResponseOutputWithContext(ctx context.Context) CompletenessResponseOutput {
	return o
}

// If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe.
func (o CompletenessResponseOutput) Arguments() pulumi.BoolOutput {
	return o.ApplyT(func(v CompletenessResponse) bool { return v.Arguments }).(pulumi.BoolOutput)
}

// If true, the builder claims that recipe.environment is claimed to be complete.
func (o CompletenessResponseOutput) Environment() pulumi.BoolOutput {
	return o.ApplyT(func(v CompletenessResponse) bool { return v.Environment }).(pulumi.BoolOutput)
}

// If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called "hermetic".
func (o CompletenessResponseOutput) Materials() pulumi.BoolOutput {
	return o.ApplyT(func(v CompletenessResponse) bool { return v.Materials }).(pulumi.BoolOutput)
}

type ComplianceNote struct {
	CisBenchmark *CisBenchmark `pulumi:"cisBenchmark"`
	// A description about this compliance check.
	Description *string `pulumi:"description"`
	// A rationale for the existence of this compliance check.
	Rationale *string `pulumi:"rationale"`
	// A description of remediation steps if the compliance check fails.
	Remediation *string `pulumi:"remediation"`
	// Serialized scan instructions with a predefined format.
	ScanInstructions *string `pulumi:"scanInstructions"`
	// The title that identifies this compliance check.
	Title *string `pulumi:"title"`
	// The OS and config versions the benchmark applies to.
	Version []ComplianceVersion `pulumi:"version"`
}

// ComplianceNoteInput is an input type that accepts ComplianceNoteArgs and ComplianceNoteOutput values.
// You can construct a concrete instance of `ComplianceNoteInput` via:
//
//	ComplianceNoteArgs{...}
type ComplianceNoteInput interface {
	pulumi.Input

	ToComplianceNoteOutput() ComplianceNoteOutput
	ToComplianceNoteOutputWithContext(context.Context) ComplianceNoteOutput
}

type ComplianceNoteArgs struct {
	CisBenchmark CisBenchmarkPtrInput `pulumi:"cisBenchmark"`
	// A description about this compliance check.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// A rationale for the existence of this compliance check.
	Rationale pulumi.StringPtrInput `pulumi:"rationale"`
	// A description of remediation steps if the compliance check fails.
	Remediation pulumi.StringPtrInput `pulumi:"remediation"`
	// Serialized scan instructions with a predefined format.
	ScanInstructions pulumi.StringPtrInput `pulumi:"scanInstructions"`
	// The title that identifies this compliance check.
	Title pulumi.StringPtrInput `pulumi:"title"`
	// The OS and config versions the benchmark applies to.
	Version ComplianceVersionArrayInput `pulumi:"version"`
}

func (ComplianceNoteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComplianceNote)(nil)).Elem()
}

func (i ComplianceNoteArgs) ToComplianceNoteOutput() ComplianceNoteOutput {
	return i.ToComplianceNoteOutputWithContext(context.Background())
}

func (i ComplianceNoteArgs) ToComplianceNoteOutputWithContext(ctx context.Context) ComplianceNoteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComplianceNoteOutput)
}

func (i ComplianceNoteArgs) ToComplianceNotePtrOutput() ComplianceNotePtrOutput {
	return i.ToComplianceNotePtrOutputWithContext(context.Background())
}

func (i ComplianceNoteArgs) ToComplianceNotePtrOutputWithContext(ctx context.Context) ComplianceNotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComplianceNoteOutput).ToComplianceNotePtrOutputWithContext(ctx)
}

// ComplianceNotePtrInput is an input type that accepts ComplianceNoteArgs, ComplianceNotePtr and ComplianceNotePtrOutput values.
// You can construct a concrete instance of `ComplianceNotePtrInput` via:
//
//	        ComplianceNoteArgs{...}
//
//	or:
//
//	        nil
type ComplianceNotePtrInput interface {
	pulumi.Input

	ToComplianceNotePtrOutput() ComplianceNotePtrOutput
	ToComplianceNotePtrOutputWithContext(context.Context) ComplianceNotePtrOutput
}

type complianceNotePtrType ComplianceNoteArgs

func ComplianceNotePtr(v *ComplianceNoteArgs) ComplianceNotePtrInput {
	return (*complianceNotePtrType)(v)
}

func (*complianceNotePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComplianceNote)(nil)).Elem()
}

func (i *complianceNotePtrType) ToComplianceNotePtrOutput() ComplianceNotePtrOutput {
	return i.ToComplianceNotePtrOutputWithContext(context.Background())
}

func (i *complianceNotePtrType) ToComplianceNotePtrOutputWithContext(ctx context.Context) ComplianceNotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComplianceNotePtrOutput)
}

type ComplianceNoteOutput struct{ *pulumi.OutputState }

func (ComplianceNoteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComplianceNote)(nil)).Elem()
}

func (o ComplianceNoteOutput) ToComplianceNoteOutput() ComplianceNoteOutput {
	return o
}

func (o ComplianceNoteOutput) ToComplianceNoteOutputWithContext(ctx context.Context) ComplianceNoteOutput {
	return o
}

func (o ComplianceNoteOutput) ToComplianceNotePtrOutput() ComplianceNotePtrOutput {
	return o.ToComplianceNotePtrOutputWithContext(context.Background())
}

func (o ComplianceNoteOutput) ToComplianceNotePtrOutputWithContext(ctx context.Context) ComplianceNotePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComplianceNote) *ComplianceNote {
		return &v
	}).(ComplianceNotePtrOutput)
}

func (o ComplianceNoteOutput) CisBenchmark() CisBenchmarkPtrOutput {
	return o.ApplyT(func(v ComplianceNote) *CisBenchmark { return v.CisBenchmark }).(CisBenchmarkPtrOutput)
}

// A description about this compliance check.
func (o ComplianceNoteOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComplianceNote) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// A rationale for the existence of this compliance check.
func (o ComplianceNoteOutput) Rationale() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComplianceNote) *string { return v.Rationale }).(pulumi.StringPtrOutput)
}

// A description of remediation steps if the compliance check fails.
func (o ComplianceNoteOutput) Remediation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComplianceNote) *string { return v.Remediation }).(pulumi.StringPtrOutput)
}

// Serialized scan instructions with a predefined format.
func (o ComplianceNoteOutput) ScanInstructions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComplianceNote) *string { return v.ScanInstructions }).(pulumi.StringPtrOutput)
}

// The title that identifies this compliance check.
func (o ComplianceNoteOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComplianceNote) *string { return v.Title }).(pulumi.StringPtrOutput)
}

// The OS and config versions the benchmark applies to.
func (o ComplianceNoteOutput) Version() ComplianceVersionArrayOutput {
	return o.ApplyT(func(v ComplianceNote) []ComplianceVersion { return v.Version }).(ComplianceVersionArrayOutput)
}

type ComplianceNotePtrOutput struct{ *pulumi.OutputState }

func (ComplianceNotePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComplianceNote)(nil)).Elem()
}

func (o ComplianceNotePtrOutput) ToComplianceNotePtrOutput() ComplianceNotePtrOutput {
	return o
}

func (o ComplianceNotePtrOutput) ToComplianceNotePtrOutputWithContext(ctx context.Context) ComplianceNotePtrOutput {
	return o
}

func (o ComplianceNotePtrOutput) Elem() ComplianceNoteOutput {
	return o.ApplyT(func(v *ComplianceNote) ComplianceNote {
		if v != nil {
			return *v
		}
		var ret ComplianceNote
		return ret
	}).(ComplianceNoteOutput)
}

func (o ComplianceNotePtrOutput) CisBenchmark() CisBenchmarkPtrOutput {
	return o.ApplyT(func(v *ComplianceNote) *CisBenchmark {
		if v == nil {
			return nil
		}
		return v.CisBenchmark
	}).(CisBenchmarkPtrOutput)
}

// A description about this compliance check.
func (o ComplianceNotePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComplianceNote) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// A rationale for the existence of this compliance check.
func (o ComplianceNotePtrOutput) Rationale() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComplianceNote) *string {
		if v == nil {
			return nil
		}
		return v.Rationale
	}).(pulumi.StringPtrOutput)
}

// A description of remediation steps if the compliance check fails.
func (o ComplianceNotePtrOutput) Remediation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComplianceNote) *string {
		if v == nil {
			return nil
		}
		return v.Remediation
	}).(pulumi.StringPtrOutput)
}

// Serialized scan instructions with a predefined format.
func (o ComplianceNotePtrOutput) ScanInstructions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComplianceNote) *string {
		if v == nil {
			return nil
		}
		return v.ScanInstructions
	}).(pulumi.StringPtrOutput)
}

// The title that identifies this compliance check.
func (o ComplianceNotePtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComplianceNote) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// The OS and config versions the benchmark applies to.
func (o ComplianceNotePtrOutput) Version() ComplianceVersionArrayOutput {
	return o.ApplyT(func(v *ComplianceNote) []ComplianceVersion {
		if v == nil {
			return nil
		}
		return v.Version
	}).(ComplianceVersionArrayOutput)
}

type ComplianceNoteResponse struct {
	CisBenchmark CisBenchmarkResponse `pulumi:"cisBenchmark"`
	// A description about this compliance check.
	Description string `pulumi:"description"`
	// A rationale for the existence of this compliance check.
	Rationale string `pulumi:"rationale"`
	// A description of remediation steps if the compliance check fails.
	Remediation string `pulumi:"remediation"`
	// Serialized scan instructions with a predefined format.
	ScanInstructions string `pulumi:"scanInstructions"`
	// The title that identifies this compliance check.
	Title string `pulumi:"title"`
	// The OS and config versions the benchmark applies to.
	Version []ComplianceVersionResponse `pulumi:"version"`
}

type ComplianceNoteResponseOutput struct{ *pulumi.OutputState }

func (ComplianceNoteResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComplianceNoteResponse)(nil)).Elem()
}

func (o ComplianceNoteResponseOutput) ToComplianceNoteResponseOutput() ComplianceNoteResponseOutput {
	return o
}

func (o ComplianceNoteResponseOutput) ToComplianceNoteResponseOutputWithContext(ctx context.Context) ComplianceNoteResponseOutput {
	return o
}

func (o ComplianceNoteResponseOutput) CisBenchmark() CisBenchmarkResponseOutput {
	return o.ApplyT(func(v ComplianceNoteResponse) CisBenchmarkResponse { return v.CisBenchmark }).(CisBenchmarkResponseOutput)
}

// A description about this compliance check.
func (o ComplianceNoteResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ComplianceNoteResponse) string { return v.Description }).(pulumi.StringOutput)
}

// A rationale for the existence of this compliance check.
func (o ComplianceNoteResponseOutput) Rationale() pulumi.StringOutput {
	return o.ApplyT(func(v ComplianceNoteResponse) string { return v.Rationale }).(pulumi.StringOutput)
}

// A description of remediation steps if the compliance check fails.
func (o ComplianceNoteResponseOutput) Remediation() pulumi.StringOutput {
	return o.ApplyT(func(v ComplianceNoteResponse) string { return v.Remediation }).(pulumi.StringOutput)
}

// Serialized scan instructions with a predefined format.
func (o ComplianceNoteResponseOutput) ScanInstructions() pulumi.StringOutput {
	return o.ApplyT(func(v ComplianceNoteResponse) string { return v.ScanInstructions }).(pulumi.StringOutput)
}

// The title that identifies this compliance check.
func (o ComplianceNoteResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ComplianceNoteResponse) string { return v.Title }).(pulumi.StringOutput)
}

// The OS and config versions the benchmark applies to.
func (o ComplianceNoteResponseOutput) Version() ComplianceVersionResponseArrayOutput {
	return o.ApplyT(func(v ComplianceNoteResponse) []ComplianceVersionResponse { return v.Version }).(ComplianceVersionResponseArrayOutput)
}

// An indication that the compliance checks in the associated ComplianceNote were not satisfied for particular resources or a specified reason.
type ComplianceOccurrence struct {
	NonComplianceReason *string            `pulumi:"nonComplianceReason"`
	NonCompliantFiles   []NonCompliantFile `pulumi:"nonCompliantFiles"`
}

// ComplianceOccurrenceInput is an input type that accepts ComplianceOccurrenceArgs and ComplianceOccurrenceOutput values.
// You can construct a concrete instance of `ComplianceOccurrenceInput` via:
//
//	ComplianceOccurrenceArgs{...}
type ComplianceOccurrenceInput interface {
	pulumi.Input

	ToComplianceOccurrenceOutput() ComplianceOccurrenceOutput
	ToComplianceOccurrenceOutputWithContext(context.Context) ComplianceOccurrenceOutput
}

// An indication that the compliance checks in the associated ComplianceNote were not satisfied for particular resources or a specified reason.
type ComplianceOccurrenceArgs struct {
	NonComplianceReason pulumi.StringPtrInput      `pulumi:"nonComplianceReason"`
	NonCompliantFiles   NonCompliantFileArrayInput `pulumi:"nonCompliantFiles"`
}

func (ComplianceOccurrenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComplianceOccurrence)(nil)).Elem()
}

func (i ComplianceOccurrenceArgs) ToComplianceOccurrenceOutput() ComplianceOccurrenceOutput {
	return i.ToComplianceOccurrenceOutputWithContext(context.Background())
}

func (i ComplianceOccurrenceArgs) ToComplianceOccurrenceOutputWithContext(ctx context.Context) ComplianceOccurrenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComplianceOccurrenceOutput)
}

func (i ComplianceOccurrenceArgs) ToComplianceOccurrencePtrOutput() ComplianceOccurrencePtrOutput {
	return i.ToComplianceOccurrencePtrOutputWithContext(context.Background())
}

func (i ComplianceOccurrenceArgs) ToComplianceOccurrencePtrOutputWithContext(ctx context.Context) ComplianceOccurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComplianceOccurrenceOutput).ToComplianceOccurrencePtrOutputWithContext(ctx)
}

// ComplianceOccurrencePtrInput is an input type that accepts ComplianceOccurrenceArgs, ComplianceOccurrencePtr and ComplianceOccurrencePtrOutput values.
// You can construct a concrete instance of `ComplianceOccurrencePtrInput` via:
//
//	        ComplianceOccurrenceArgs{...}
//
//	or:
//
//	        nil
type ComplianceOccurrencePtrInput interface {
	pulumi.Input

	ToComplianceOccurrencePtrOutput() ComplianceOccurrencePtrOutput
	ToComplianceOccurrencePtrOutputWithContext(context.Context) ComplianceOccurrencePtrOutput
}

type complianceOccurrencePtrType ComplianceOccurrenceArgs

func ComplianceOccurrencePtr(v *ComplianceOccurrenceArgs) ComplianceOccurrencePtrInput {
	return (*complianceOccurrencePtrType)(v)
}

func (*complianceOccurrencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComplianceOccurrence)(nil)).Elem()
}

func (i *complianceOccurrencePtrType) ToComplianceOccurrencePtrOutput() ComplianceOccurrencePtrOutput {
	return i.ToComplianceOccurrencePtrOutputWithContext(context.Background())
}

func (i *complianceOccurrencePtrType) ToComplianceOccurrencePtrOutputWithContext(ctx context.Context) ComplianceOccurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComplianceOccurrencePtrOutput)
}

// An indication that the compliance checks in the associated ComplianceNote were not satisfied for particular resources or a specified reason.
type ComplianceOccurrenceOutput struct{ *pulumi.OutputState }

func (ComplianceOccurrenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComplianceOccurrence)(nil)).Elem()
}

func (o ComplianceOccurrenceOutput) ToComplianceOccurrenceOutput() ComplianceOccurrenceOutput {
	return o
}

func (o ComplianceOccurrenceOutput) ToComplianceOccurrenceOutputWithContext(ctx context.Context) ComplianceOccurrenceOutput {
	return o
}

func (o ComplianceOccurrenceOutput) ToComplianceOccurrencePtrOutput() ComplianceOccurrencePtrOutput {
	return o.ToComplianceOccurrencePtrOutputWithContext(context.Background())
}

func (o ComplianceOccurrenceOutput) ToComplianceOccurrencePtrOutputWithContext(ctx context.Context) ComplianceOccurrencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComplianceOccurrence) *ComplianceOccurrence {
		return &v
	}).(ComplianceOccurrencePtrOutput)
}

func (o ComplianceOccurrenceOutput) NonComplianceReason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComplianceOccurrence) *string { return v.NonComplianceReason }).(pulumi.StringPtrOutput)
}

func (o ComplianceOccurrenceOutput) NonCompliantFiles() NonCompliantFileArrayOutput {
	return o.ApplyT(func(v ComplianceOccurrence) []NonCompliantFile { return v.NonCompliantFiles }).(NonCompliantFileArrayOutput)
}

type ComplianceOccurrencePtrOutput struct{ *pulumi.OutputState }

func (ComplianceOccurrencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComplianceOccurrence)(nil)).Elem()
}

func (o ComplianceOccurrencePtrOutput) ToComplianceOccurrencePtrOutput() ComplianceOccurrencePtrOutput {
	return o
}

func (o ComplianceOccurrencePtrOutput) ToComplianceOccurrencePtrOutputWithContext(ctx context.Context) ComplianceOccurrencePtrOutput {
	return o
}

func (o ComplianceOccurrencePtrOutput) Elem() ComplianceOccurrenceOutput {
	return o.ApplyT(func(v *ComplianceOccurrence) ComplianceOccurrence {
		if v != nil {
			return *v
		}
		var ret ComplianceOccurrence
		return ret
	}).(ComplianceOccurrenceOutput)
}

func (o ComplianceOccurrencePtrOutput) NonComplianceReason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComplianceOccurrence) *string {
		if v == nil {
			return nil
		}
		return v.NonComplianceReason
	}).(pulumi.StringPtrOutput)
}

func (o ComplianceOccurrencePtrOutput) NonCompliantFiles() NonCompliantFileArrayOutput {
	return o.ApplyT(func(v *ComplianceOccurrence) []NonCompliantFile {
		if v == nil {
			return nil
		}
		return v.NonCompliantFiles
	}).(NonCompliantFileArrayOutput)
}

// An indication that the compliance checks in the associated ComplianceNote were not satisfied for particular resources or a specified reason.
type ComplianceOccurrenceResponse struct {
	NonComplianceReason string                     `pulumi:"nonComplianceReason"`
	NonCompliantFiles   []NonCompliantFileResponse `pulumi:"nonCompliantFiles"`
}

// An indication that the compliance checks in the associated ComplianceNote were not satisfied for particular resources or a specified reason.
type ComplianceOccurrenceResponseOutput struct{ *pulumi.OutputState }

func (ComplianceOccurrenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComplianceOccurrenceResponse)(nil)).Elem()
}

func (o ComplianceOccurrenceResponseOutput) ToComplianceOccurrenceResponseOutput() ComplianceOccurrenceResponseOutput {
	return o
}

func (o ComplianceOccurrenceResponseOutput) ToComplianceOccurrenceResponseOutputWithContext(ctx context.Context) ComplianceOccurrenceResponseOutput {
	return o
}

func (o ComplianceOccurrenceResponseOutput) NonComplianceReason() pulumi.StringOutput {
	return o.ApplyT(func(v ComplianceOccurrenceResponse) string { return v.NonComplianceReason }).(pulumi.StringOutput)
}

func (o ComplianceOccurrenceResponseOutput) NonCompliantFiles() NonCompliantFileResponseArrayOutput {
	return o.ApplyT(func(v ComplianceOccurrenceResponse) []NonCompliantFileResponse { return v.NonCompliantFiles }).(NonCompliantFileResponseArrayOutput)
}

// Describes the CIS benchmark version that is applicable to a given OS and os version.
type ComplianceVersion struct {
	// The name of the document that defines this benchmark, e.g. "CIS Container-Optimized OS".
	BenchmarkDocument *string `pulumi:"benchmarkDocument"`
	// The CPE URI (https://cpe.mitre.org/specification/) this benchmark is applicable to.
	CpeUri *string `pulumi:"cpeUri"`
	// The version of the benchmark. This is set to the version of the OS-specific CIS document the benchmark is defined in.
	Version *string `pulumi:"version"`
}

// ComplianceVersionInput is an input type that accepts ComplianceVersionArgs and ComplianceVersionOutput values.
// You can construct a concrete instance of `ComplianceVersionInput` via:
//
//	ComplianceVersionArgs{...}
type ComplianceVersionInput interface {
	pulumi.Input

	ToComplianceVersionOutput() ComplianceVersionOutput
	ToComplianceVersionOutputWithContext(context.Context) ComplianceVersionOutput
}

// Describes the CIS benchmark version that is applicable to a given OS and os version.
type ComplianceVersionArgs struct {
	// The name of the document that defines this benchmark, e.g. "CIS Container-Optimized OS".
	BenchmarkDocument pulumi.StringPtrInput `pulumi:"benchmarkDocument"`
	// The CPE URI (https://cpe.mitre.org/specification/) this benchmark is applicable to.
	CpeUri pulumi.StringPtrInput `pulumi:"cpeUri"`
	// The version of the benchmark. This is set to the version of the OS-specific CIS document the benchmark is defined in.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (ComplianceVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComplianceVersion)(nil)).Elem()
}

func (i ComplianceVersionArgs) ToComplianceVersionOutput() ComplianceVersionOutput {
	return i.ToComplianceVersionOutputWithContext(context.Background())
}

func (i ComplianceVersionArgs) ToComplianceVersionOutputWithContext(ctx context.Context) ComplianceVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComplianceVersionOutput)
}

// ComplianceVersionArrayInput is an input type that accepts ComplianceVersionArray and ComplianceVersionArrayOutput values.
// You can construct a concrete instance of `ComplianceVersionArrayInput` via:
//
//	ComplianceVersionArray{ ComplianceVersionArgs{...} }
type ComplianceVersionArrayInput interface {
	pulumi.Input

	ToComplianceVersionArrayOutput() ComplianceVersionArrayOutput
	ToComplianceVersionArrayOutputWithContext(context.Context) ComplianceVersionArrayOutput
}

type ComplianceVersionArray []ComplianceVersionInput

func (ComplianceVersionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComplianceVersion)(nil)).Elem()
}

func (i ComplianceVersionArray) ToComplianceVersionArrayOutput() ComplianceVersionArrayOutput {
	return i.ToComplianceVersionArrayOutputWithContext(context.Background())
}

func (i ComplianceVersionArray) ToComplianceVersionArrayOutputWithContext(ctx context.Context) ComplianceVersionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComplianceVersionArrayOutput)
}

// Describes the CIS benchmark version that is applicable to a given OS and os version.
type ComplianceVersionOutput struct{ *pulumi.OutputState }

func (ComplianceVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComplianceVersion)(nil)).Elem()
}

func (o ComplianceVersionOutput) ToComplianceVersionOutput() ComplianceVersionOutput {
	return o
}

func (o ComplianceVersionOutput) ToComplianceVersionOutputWithContext(ctx context.Context) ComplianceVersionOutput {
	return o
}

// The name of the document that defines this benchmark, e.g. "CIS Container-Optimized OS".
func (o ComplianceVersionOutput) BenchmarkDocument() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComplianceVersion) *string { return v.BenchmarkDocument }).(pulumi.StringPtrOutput)
}

// The CPE URI (https://cpe.mitre.org/specification/) this benchmark is applicable to.
func (o ComplianceVersionOutput) CpeUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComplianceVersion) *string { return v.CpeUri }).(pulumi.StringPtrOutput)
}

// The version of the benchmark. This is set to the version of the OS-specific CIS document the benchmark is defined in.
func (o ComplianceVersionOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComplianceVersion) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type ComplianceVersionArrayOutput struct{ *pulumi.OutputState }

func (ComplianceVersionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComplianceVersion)(nil)).Elem()
}

func (o ComplianceVersionArrayOutput) ToComplianceVersionArrayOutput() ComplianceVersionArrayOutput {
	return o
}

func (o ComplianceVersionArrayOutput) ToComplianceVersionArrayOutputWithContext(ctx context.Context) ComplianceVersionArrayOutput {
	return o
}

func (o ComplianceVersionArrayOutput) Index(i pulumi.IntInput) ComplianceVersionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ComplianceVersion {
		return vs[0].([]ComplianceVersion)[vs[1].(int)]
	}).(ComplianceVersionOutput)
}

// Describes the CIS benchmark version that is applicable to a given OS and os version.
type ComplianceVersionResponse struct {
	// The name of the document that defines this benchmark, e.g. "CIS Container-Optimized OS".
	BenchmarkDocument string `pulumi:"benchmarkDocument"`
	// The CPE URI (https://cpe.mitre.org/specification/) this benchmark is applicable to.
	CpeUri string `pulumi:"cpeUri"`
	// The version of the benchmark. This is set to the version of the OS-specific CIS document the benchmark is defined in.
	Version string `pulumi:"version"`
}

// Describes the CIS benchmark version that is applicable to a given OS and os version.
type ComplianceVersionResponseOutput struct{ *pulumi.OutputState }

func (ComplianceVersionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComplianceVersionResponse)(nil)).Elem()
}

func (o ComplianceVersionResponseOutput) ToComplianceVersionResponseOutput() ComplianceVersionResponseOutput {
	return o
}

func (o ComplianceVersionResponseOutput) ToComplianceVersionResponseOutputWithContext(ctx context.Context) ComplianceVersionResponseOutput {
	return o
}

// The name of the document that defines this benchmark, e.g. "CIS Container-Optimized OS".
func (o ComplianceVersionResponseOutput) BenchmarkDocument() pulumi.StringOutput {
	return o.ApplyT(func(v ComplianceVersionResponse) string { return v.BenchmarkDocument }).(pulumi.StringOutput)
}

// The CPE URI (https://cpe.mitre.org/specification/) this benchmark is applicable to.
func (o ComplianceVersionResponseOutput) CpeUri() pulumi.StringOutput {
	return o.ApplyT(func(v ComplianceVersionResponse) string { return v.CpeUri }).(pulumi.StringOutput)
}

// The version of the benchmark. This is set to the version of the OS-specific CIS document the benchmark is defined in.
func (o ComplianceVersionResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v ComplianceVersionResponse) string { return v.Version }).(pulumi.StringOutput)
}

type ComplianceVersionResponseArrayOutput struct{ *pulumi.OutputState }

func (ComplianceVersionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComplianceVersionResponse)(nil)).Elem()
}

func (o ComplianceVersionResponseArrayOutput) ToComplianceVersionResponseArrayOutput() ComplianceVersionResponseArrayOutput {
	return o
}

func (o ComplianceVersionResponseArrayOutput) ToComplianceVersionResponseArrayOutputWithContext(ctx context.Context) ComplianceVersionResponseArrayOutput {
	return o
}

func (o ComplianceVersionResponseArrayOutput) Index(i pulumi.IntInput) ComplianceVersionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ComplianceVersionResponse {
		return vs[0].([]ComplianceVersionResponse)[vs[1].(int)]
	}).(ComplianceVersionResponseOutput)
}

type DSSEAttestationNote struct {
	// DSSEHint hints at the purpose of the attestation authority.
	Hint *DSSEHint `pulumi:"hint"`
}

// DSSEAttestationNoteInput is an input type that accepts DSSEAttestationNoteArgs and DSSEAttestationNoteOutput values.
// You can construct a concrete instance of `DSSEAttestationNoteInput` via:
//
//	DSSEAttestationNoteArgs{...}
type DSSEAttestationNoteInput interface {
	pulumi.Input

	ToDSSEAttestationNoteOutput() DSSEAttestationNoteOutput
	ToDSSEAttestationNoteOutputWithContext(context.Context) DSSEAttestationNoteOutput
}

type DSSEAttestationNoteArgs struct {
	// DSSEHint hints at the purpose of the attestation authority.
	Hint DSSEHintPtrInput `pulumi:"hint"`
}

func (DSSEAttestationNoteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DSSEAttestationNote)(nil)).Elem()
}

func (i DSSEAttestationNoteArgs) ToDSSEAttestationNoteOutput() DSSEAttestationNoteOutput {
	return i.ToDSSEAttestationNoteOutputWithContext(context.Background())
}

func (i DSSEAttestationNoteArgs) ToDSSEAttestationNoteOutputWithContext(ctx context.Context) DSSEAttestationNoteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DSSEAttestationNoteOutput)
}

func (i DSSEAttestationNoteArgs) ToDSSEAttestationNotePtrOutput() DSSEAttestationNotePtrOutput {
	return i.ToDSSEAttestationNotePtrOutputWithContext(context.Background())
}

func (i DSSEAttestationNoteArgs) ToDSSEAttestationNotePtrOutputWithContext(ctx context.Context) DSSEAttestationNotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DSSEAttestationNoteOutput).ToDSSEAttestationNotePtrOutputWithContext(ctx)
}

// DSSEAttestationNotePtrInput is an input type that accepts DSSEAttestationNoteArgs, DSSEAttestationNotePtr and DSSEAttestationNotePtrOutput values.
// You can construct a concrete instance of `DSSEAttestationNotePtrInput` via:
//
//	        DSSEAttestationNoteArgs{...}
//
//	or:
//
//	        nil
type DSSEAttestationNotePtrInput interface {
	pulumi.Input

	ToDSSEAttestationNotePtrOutput() DSSEAttestationNotePtrOutput
	ToDSSEAttestationNotePtrOutputWithContext(context.Context) DSSEAttestationNotePtrOutput
}

type dsseattestationNotePtrType DSSEAttestationNoteArgs

func DSSEAttestationNotePtr(v *DSSEAttestationNoteArgs) DSSEAttestationNotePtrInput {
	return (*dsseattestationNotePtrType)(v)
}

func (*dsseattestationNotePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DSSEAttestationNote)(nil)).Elem()
}

func (i *dsseattestationNotePtrType) ToDSSEAttestationNotePtrOutput() DSSEAttestationNotePtrOutput {
	return i.ToDSSEAttestationNotePtrOutputWithContext(context.Background())
}

func (i *dsseattestationNotePtrType) ToDSSEAttestationNotePtrOutputWithContext(ctx context.Context) DSSEAttestationNotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DSSEAttestationNotePtrOutput)
}

type DSSEAttestationNoteOutput struct{ *pulumi.OutputState }

func (DSSEAttestationNoteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DSSEAttestationNote)(nil)).Elem()
}

func (o DSSEAttestationNoteOutput) ToDSSEAttestationNoteOutput() DSSEAttestationNoteOutput {
	return o
}

func (o DSSEAttestationNoteOutput) ToDSSEAttestationNoteOutputWithContext(ctx context.Context) DSSEAttestationNoteOutput {
	return o
}

func (o DSSEAttestationNoteOutput) ToDSSEAttestationNotePtrOutput() DSSEAttestationNotePtrOutput {
	return o.ToDSSEAttestationNotePtrOutputWithContext(context.Background())
}

func (o DSSEAttestationNoteOutput) ToDSSEAttestationNotePtrOutputWithContext(ctx context.Context) DSSEAttestationNotePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DSSEAttestationNote) *DSSEAttestationNote {
		return &v
	}).(DSSEAttestationNotePtrOutput)
}

// DSSEHint hints at the purpose of the attestation authority.
func (o DSSEAttestationNoteOutput) Hint() DSSEHintPtrOutput {
	return o.ApplyT(func(v DSSEAttestationNote) *DSSEHint { return v.Hint }).(DSSEHintPtrOutput)
}

type DSSEAttestationNotePtrOutput struct{ *pulumi.OutputState }

func (DSSEAttestationNotePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DSSEAttestationNote)(nil)).Elem()
}

func (o DSSEAttestationNotePtrOutput) ToDSSEAttestationNotePtrOutput() DSSEAttestationNotePtrOutput {
	return o
}

func (o DSSEAttestationNotePtrOutput) ToDSSEAttestationNotePtrOutputWithContext(ctx context.Context) DSSEAttestationNotePtrOutput {
	return o
}

func (o DSSEAttestationNotePtrOutput) Elem() DSSEAttestationNoteOutput {
	return o.ApplyT(func(v *DSSEAttestationNote) DSSEAttestationNote {
		if v != nil {
			return *v
		}
		var ret DSSEAttestationNote
		return ret
	}).(DSSEAttestationNoteOutput)
}

// DSSEHint hints at the purpose of the attestation authority.
func (o DSSEAttestationNotePtrOutput) Hint() DSSEHintPtrOutput {
	return o.ApplyT(func(v *DSSEAttestationNote) *DSSEHint {
		if v == nil {
			return nil
		}
		return v.Hint
	}).(DSSEHintPtrOutput)
}

type DSSEAttestationNoteResponse struct {
	// DSSEHint hints at the purpose of the attestation authority.
	Hint DSSEHintResponse `pulumi:"hint"`
}

type DSSEAttestationNoteResponseOutput struct{ *pulumi.OutputState }

func (DSSEAttestationNoteResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DSSEAttestationNoteResponse)(nil)).Elem()
}

func (o DSSEAttestationNoteResponseOutput) ToDSSEAttestationNoteResponseOutput() DSSEAttestationNoteResponseOutput {
	return o
}

func (o DSSEAttestationNoteResponseOutput) ToDSSEAttestationNoteResponseOutputWithContext(ctx context.Context) DSSEAttestationNoteResponseOutput {
	return o
}

// DSSEHint hints at the purpose of the attestation authority.
func (o DSSEAttestationNoteResponseOutput) Hint() DSSEHintResponseOutput {
	return o.ApplyT(func(v DSSEAttestationNoteResponse) DSSEHintResponse { return v.Hint }).(DSSEHintResponseOutput)
}

// Deprecated. Prefer to use a regular Occurrence, and populate the Envelope at the top level of the Occurrence.
type DSSEAttestationOccurrence struct {
	// If doing something security critical, make sure to verify the signatures in this metadata.
	Envelope  *Envelope        `pulumi:"envelope"`
	Statement *InTotoStatement `pulumi:"statement"`
}

// DSSEAttestationOccurrenceInput is an input type that accepts DSSEAttestationOccurrenceArgs and DSSEAttestationOccurrenceOutput values.
// You can construct a concrete instance of `DSSEAttestationOccurrenceInput` via:
//
//	DSSEAttestationOccurrenceArgs{...}
type DSSEAttestationOccurrenceInput interface {
	pulumi.Input

	ToDSSEAttestationOccurrenceOutput() DSSEAttestationOccurrenceOutput
	ToDSSEAttestationOccurrenceOutputWithContext(context.Context) DSSEAttestationOccurrenceOutput
}

// Deprecated. Prefer to use a regular Occurrence, and populate the Envelope at the top level of the Occurrence.
type DSSEAttestationOccurrenceArgs struct {
	// If doing something security critical, make sure to verify the signatures in this metadata.
	Envelope  EnvelopePtrInput        `pulumi:"envelope"`
	Statement InTotoStatementPtrInput `pulumi:"statement"`
}

func (DSSEAttestationOccurrenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DSSEAttestationOccurrence)(nil)).Elem()
}

func (i DSSEAttestationOccurrenceArgs) ToDSSEAttestationOccurrenceOutput() DSSEAttestationOccurrenceOutput {
	return i.ToDSSEAttestationOccurrenceOutputWithContext(context.Background())
}

func (i DSSEAttestationOccurrenceArgs) ToDSSEAttestationOccurrenceOutputWithContext(ctx context.Context) DSSEAttestationOccurrenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DSSEAttestationOccurrenceOutput)
}

func (i DSSEAttestationOccurrenceArgs) ToDSSEAttestationOccurrencePtrOutput() DSSEAttestationOccurrencePtrOutput {
	return i.ToDSSEAttestationOccurrencePtrOutputWithContext(context.Background())
}

func (i DSSEAttestationOccurrenceArgs) ToDSSEAttestationOccurrencePtrOutputWithContext(ctx context.Context) DSSEAttestationOccurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DSSEAttestationOccurrenceOutput).ToDSSEAttestationOccurrencePtrOutputWithContext(ctx)
}

// DSSEAttestationOccurrencePtrInput is an input type that accepts DSSEAttestationOccurrenceArgs, DSSEAttestationOccurrencePtr and DSSEAttestationOccurrencePtrOutput values.
// You can construct a concrete instance of `DSSEAttestationOccurrencePtrInput` via:
//
//	        DSSEAttestationOccurrenceArgs{...}
//
//	or:
//
//	        nil
type DSSEAttestationOccurrencePtrInput interface {
	pulumi.Input

	ToDSSEAttestationOccurrencePtrOutput() DSSEAttestationOccurrencePtrOutput
	ToDSSEAttestationOccurrencePtrOutputWithContext(context.Context) DSSEAttestationOccurrencePtrOutput
}

type dsseattestationOccurrencePtrType DSSEAttestationOccurrenceArgs

func DSSEAttestationOccurrencePtr(v *DSSEAttestationOccurrenceArgs) DSSEAttestationOccurrencePtrInput {
	return (*dsseattestationOccurrencePtrType)(v)
}

func (*dsseattestationOccurrencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DSSEAttestationOccurrence)(nil)).Elem()
}

func (i *dsseattestationOccurrencePtrType) ToDSSEAttestationOccurrencePtrOutput() DSSEAttestationOccurrencePtrOutput {
	return i.ToDSSEAttestationOccurrencePtrOutputWithContext(context.Background())
}

func (i *dsseattestationOccurrencePtrType) ToDSSEAttestationOccurrencePtrOutputWithContext(ctx context.Context) DSSEAttestationOccurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DSSEAttestationOccurrencePtrOutput)
}

// Deprecated. Prefer to use a regular Occurrence, and populate the Envelope at the top level of the Occurrence.
type DSSEAttestationOccurrenceOutput struct{ *pulumi.OutputState }

func (DSSEAttestationOccurrenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DSSEAttestationOccurrence)(nil)).Elem()
}

func (o DSSEAttestationOccurrenceOutput) ToDSSEAttestationOccurrenceOutput() DSSEAttestationOccurrenceOutput {
	return o
}

func (o DSSEAttestationOccurrenceOutput) ToDSSEAttestationOccurrenceOutputWithContext(ctx context.Context) DSSEAttestationOccurrenceOutput {
	return o
}

func (o DSSEAttestationOccurrenceOutput) ToDSSEAttestationOccurrencePtrOutput() DSSEAttestationOccurrencePtrOutput {
	return o.ToDSSEAttestationOccurrencePtrOutputWithContext(context.Background())
}

func (o DSSEAttestationOccurrenceOutput) ToDSSEAttestationOccurrencePtrOutputWithContext(ctx context.Context) DSSEAttestationOccurrencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DSSEAttestationOccurrence) *DSSEAttestationOccurrence {
		return &v
	}).(DSSEAttestationOccurrencePtrOutput)
}

// If doing something security critical, make sure to verify the signatures in this metadata.
func (o DSSEAttestationOccurrenceOutput) Envelope() EnvelopePtrOutput {
	return o.ApplyT(func(v DSSEAttestationOccurrence) *Envelope { return v.Envelope }).(EnvelopePtrOutput)
}

func (o DSSEAttestationOccurrenceOutput) Statement() InTotoStatementPtrOutput {
	return o.ApplyT(func(v DSSEAttestationOccurrence) *InTotoStatement { return v.Statement }).(InTotoStatementPtrOutput)
}

type DSSEAttestationOccurrencePtrOutput struct{ *pulumi.OutputState }

func (DSSEAttestationOccurrencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DSSEAttestationOccurrence)(nil)).Elem()
}

func (o DSSEAttestationOccurrencePtrOutput) ToDSSEAttestationOccurrencePtrOutput() DSSEAttestationOccurrencePtrOutput {
	return o
}

func (o DSSEAttestationOccurrencePtrOutput) ToDSSEAttestationOccurrencePtrOutputWithContext(ctx context.Context) DSSEAttestationOccurrencePtrOutput {
	return o
}

func (o DSSEAttestationOccurrencePtrOutput) Elem() DSSEAttestationOccurrenceOutput {
	return o.ApplyT(func(v *DSSEAttestationOccurrence) DSSEAttestationOccurrence {
		if v != nil {
			return *v
		}
		var ret DSSEAttestationOccurrence
		return ret
	}).(DSSEAttestationOccurrenceOutput)
}

// If doing something security critical, make sure to verify the signatures in this metadata.
func (o DSSEAttestationOccurrencePtrOutput) Envelope() EnvelopePtrOutput {
	return o.ApplyT(func(v *DSSEAttestationOccurrence) *Envelope {
		if v == nil {
			return nil
		}
		return v.Envelope
	}).(EnvelopePtrOutput)
}

func (o DSSEAttestationOccurrencePtrOutput) Statement() InTotoStatementPtrOutput {
	return o.ApplyT(func(v *DSSEAttestationOccurrence) *InTotoStatement {
		if v == nil {
			return nil
		}
		return v.Statement
	}).(InTotoStatementPtrOutput)
}

// Deprecated. Prefer to use a regular Occurrence, and populate the Envelope at the top level of the Occurrence.
type DSSEAttestationOccurrenceResponse struct {
	// If doing something security critical, make sure to verify the signatures in this metadata.
	Envelope  EnvelopeResponse        `pulumi:"envelope"`
	Statement InTotoStatementResponse `pulumi:"statement"`
}

// Deprecated. Prefer to use a regular Occurrence, and populate the Envelope at the top level of the Occurrence.
type DSSEAttestationOccurrenceResponseOutput struct{ *pulumi.OutputState }

func (DSSEAttestationOccurrenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DSSEAttestationOccurrenceResponse)(nil)).Elem()
}

func (o DSSEAttestationOccurrenceResponseOutput) ToDSSEAttestationOccurrenceResponseOutput() DSSEAttestationOccurrenceResponseOutput {
	return o
}

func (o DSSEAttestationOccurrenceResponseOutput) ToDSSEAttestationOccurrenceResponseOutputWithContext(ctx context.Context) DSSEAttestationOccurrenceResponseOutput {
	return o
}

// If doing something security critical, make sure to verify the signatures in this metadata.
func (o DSSEAttestationOccurrenceResponseOutput) Envelope() EnvelopeResponseOutput {
	return o.ApplyT(func(v DSSEAttestationOccurrenceResponse) EnvelopeResponse { return v.Envelope }).(EnvelopeResponseOutput)
}

func (o DSSEAttestationOccurrenceResponseOutput) Statement() InTotoStatementResponseOutput {
	return o.ApplyT(func(v DSSEAttestationOccurrenceResponse) InTotoStatementResponse { return v.Statement }).(InTotoStatementResponseOutput)
}

// This submessage provides human-readable hints about the purpose of the authority. Because the name of a note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from "readable" names more suitable for debug output. Note that these hints should not be used to look up authorities in security sensitive contexts, such as when looking up attestations to verify.
type DSSEHint struct {
	// The human readable name of this attestation authority, for example "cloudbuild-prod".
	HumanReadableName string `pulumi:"humanReadableName"`
}

// DSSEHintInput is an input type that accepts DSSEHintArgs and DSSEHintOutput values.
// You can construct a concrete instance of `DSSEHintInput` via:
//
//	DSSEHintArgs{...}
type DSSEHintInput interface {
	pulumi.Input

	ToDSSEHintOutput() DSSEHintOutput
	ToDSSEHintOutputWithContext(context.Context) DSSEHintOutput
}

// This submessage provides human-readable hints about the purpose of the authority. Because the name of a note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from "readable" names more suitable for debug output. Note that these hints should not be used to look up authorities in security sensitive contexts, such as when looking up attestations to verify.
type DSSEHintArgs struct {
	// The human readable name of this attestation authority, for example "cloudbuild-prod".
	HumanReadableName pulumi.StringInput `pulumi:"humanReadableName"`
}

func (DSSEHintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DSSEHint)(nil)).Elem()
}

func (i DSSEHintArgs) ToDSSEHintOutput() DSSEHintOutput {
	return i.ToDSSEHintOutputWithContext(context.Background())
}

func (i DSSEHintArgs) ToDSSEHintOutputWithContext(ctx context.Context) DSSEHintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DSSEHintOutput)
}

func (i DSSEHintArgs) ToDSSEHintPtrOutput() DSSEHintPtrOutput {
	return i.ToDSSEHintPtrOutputWithContext(context.Background())
}

func (i DSSEHintArgs) ToDSSEHintPtrOutputWithContext(ctx context.Context) DSSEHintPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DSSEHintOutput).ToDSSEHintPtrOutputWithContext(ctx)
}

// DSSEHintPtrInput is an input type that accepts DSSEHintArgs, DSSEHintPtr and DSSEHintPtrOutput values.
// You can construct a concrete instance of `DSSEHintPtrInput` via:
//
//	        DSSEHintArgs{...}
//
//	or:
//
//	        nil
type DSSEHintPtrInput interface {
	pulumi.Input

	ToDSSEHintPtrOutput() DSSEHintPtrOutput
	ToDSSEHintPtrOutputWithContext(context.Context) DSSEHintPtrOutput
}

type dssehintPtrType DSSEHintArgs

func DSSEHintPtr(v *DSSEHintArgs) DSSEHintPtrInput {
	return (*dssehintPtrType)(v)
}

func (*dssehintPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DSSEHint)(nil)).Elem()
}

func (i *dssehintPtrType) ToDSSEHintPtrOutput() DSSEHintPtrOutput {
	return i.ToDSSEHintPtrOutputWithContext(context.Background())
}

func (i *dssehintPtrType) ToDSSEHintPtrOutputWithContext(ctx context.Context) DSSEHintPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DSSEHintPtrOutput)
}

// This submessage provides human-readable hints about the purpose of the authority. Because the name of a note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from "readable" names more suitable for debug output. Note that these hints should not be used to look up authorities in security sensitive contexts, such as when looking up attestations to verify.
type DSSEHintOutput struct{ *pulumi.OutputState }

func (DSSEHintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DSSEHint)(nil)).Elem()
}

func (o DSSEHintOutput) ToDSSEHintOutput() DSSEHintOutput {
	return o
}

func (o DSSEHintOutput) ToDSSEHintOutputWithContext(ctx context.Context) DSSEHintOutput {
	return o
}

func (o DSSEHintOutput) ToDSSEHintPtrOutput() DSSEHintPtrOutput {
	return o.ToDSSEHintPtrOutputWithContext(context.Background())
}

func (o DSSEHintOutput) ToDSSEHintPtrOutputWithContext(ctx context.Context) DSSEHintPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DSSEHint) *DSSEHint {
		return &v
	}).(DSSEHintPtrOutput)
}

// The human readable name of this attestation authority, for example "cloudbuild-prod".
func (o DSSEHintOutput) HumanReadableName() pulumi.StringOutput {
	return o.ApplyT(func(v DSSEHint) string { return v.HumanReadableName }).(pulumi.StringOutput)
}

type DSSEHintPtrOutput struct{ *pulumi.OutputState }

func (DSSEHintPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DSSEHint)(nil)).Elem()
}

func (o DSSEHintPtrOutput) ToDSSEHintPtrOutput() DSSEHintPtrOutput {
	return o
}

func (o DSSEHintPtrOutput) ToDSSEHintPtrOutputWithContext(ctx context.Context) DSSEHintPtrOutput {
	return o
}

func (o DSSEHintPtrOutput) Elem() DSSEHintOutput {
	return o.ApplyT(func(v *DSSEHint) DSSEHint {
		if v != nil {
			return *v
		}
		var ret DSSEHint
		return ret
	}).(DSSEHintOutput)
}

// The human readable name of this attestation authority, for example "cloudbuild-prod".
func (o DSSEHintPtrOutput) HumanReadableName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DSSEHint) *string {
		if v == nil {
			return nil
		}
		return &v.HumanReadableName
	}).(pulumi.StringPtrOutput)
}

// This submessage provides human-readable hints about the purpose of the authority. Because the name of a note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from "readable" names more suitable for debug output. Note that these hints should not be used to look up authorities in security sensitive contexts, such as when looking up attestations to verify.
type DSSEHintResponse struct {
	// The human readable name of this attestation authority, for example "cloudbuild-prod".
	HumanReadableName string `pulumi:"humanReadableName"`
}

// This submessage provides human-readable hints about the purpose of the authority. Because the name of a note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from "readable" names more suitable for debug output. Note that these hints should not be used to look up authorities in security sensitive contexts, such as when looking up attestations to verify.
type DSSEHintResponseOutput struct{ *pulumi.OutputState }

func (DSSEHintResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DSSEHintResponse)(nil)).Elem()
}

func (o DSSEHintResponseOutput) ToDSSEHintResponseOutput() DSSEHintResponseOutput {
	return o
}

func (o DSSEHintResponseOutput) ToDSSEHintResponseOutputWithContext(ctx context.Context) DSSEHintResponseOutput {
	return o
}

// The human readable name of this attestation authority, for example "cloudbuild-prod".
func (o DSSEHintResponseOutput) HumanReadableName() pulumi.StringOutput {
	return o.ApplyT(func(v DSSEHintResponse) string { return v.HumanReadableName }).(pulumi.StringOutput)
}

// An artifact that can be deployed in some runtime.
type DeploymentNote struct {
	// Resource URI for the artifact being deployed.
	ResourceUri []string `pulumi:"resourceUri"`
}

// DeploymentNoteInput is an input type that accepts DeploymentNoteArgs and DeploymentNoteOutput values.
// You can construct a concrete instance of `DeploymentNoteInput` via:
//
//	DeploymentNoteArgs{...}
type DeploymentNoteInput interface {
	pulumi.Input

	ToDeploymentNoteOutput() DeploymentNoteOutput
	ToDeploymentNoteOutputWithContext(context.Context) DeploymentNoteOutput
}

// An artifact that can be deployed in some runtime.
type DeploymentNoteArgs struct {
	// Resource URI for the artifact being deployed.
	ResourceUri pulumi.StringArrayInput `pulumi:"resourceUri"`
}

func (DeploymentNoteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentNote)(nil)).Elem()
}

func (i DeploymentNoteArgs) ToDeploymentNoteOutput() DeploymentNoteOutput {
	return i.ToDeploymentNoteOutputWithContext(context.Background())
}

func (i DeploymentNoteArgs) ToDeploymentNoteOutputWithContext(ctx context.Context) DeploymentNoteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentNoteOutput)
}

func (i DeploymentNoteArgs) ToDeploymentNotePtrOutput() DeploymentNotePtrOutput {
	return i.ToDeploymentNotePtrOutputWithContext(context.Background())
}

func (i DeploymentNoteArgs) ToDeploymentNotePtrOutputWithContext(ctx context.Context) DeploymentNotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentNoteOutput).ToDeploymentNotePtrOutputWithContext(ctx)
}

// DeploymentNotePtrInput is an input type that accepts DeploymentNoteArgs, DeploymentNotePtr and DeploymentNotePtrOutput values.
// You can construct a concrete instance of `DeploymentNotePtrInput` via:
//
//	        DeploymentNoteArgs{...}
//
//	or:
//
//	        nil
type DeploymentNotePtrInput interface {
	pulumi.Input

	ToDeploymentNotePtrOutput() DeploymentNotePtrOutput
	ToDeploymentNotePtrOutputWithContext(context.Context) DeploymentNotePtrOutput
}

type deploymentNotePtrType DeploymentNoteArgs

func DeploymentNotePtr(v *DeploymentNoteArgs) DeploymentNotePtrInput {
	return (*deploymentNotePtrType)(v)
}

func (*deploymentNotePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentNote)(nil)).Elem()
}

func (i *deploymentNotePtrType) ToDeploymentNotePtrOutput() DeploymentNotePtrOutput {
	return i.ToDeploymentNotePtrOutputWithContext(context.Background())
}

func (i *deploymentNotePtrType) ToDeploymentNotePtrOutputWithContext(ctx context.Context) DeploymentNotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentNotePtrOutput)
}

// An artifact that can be deployed in some runtime.
type DeploymentNoteOutput struct{ *pulumi.OutputState }

func (DeploymentNoteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentNote)(nil)).Elem()
}

func (o DeploymentNoteOutput) ToDeploymentNoteOutput() DeploymentNoteOutput {
	return o
}

func (o DeploymentNoteOutput) ToDeploymentNoteOutputWithContext(ctx context.Context) DeploymentNoteOutput {
	return o
}

func (o DeploymentNoteOutput) ToDeploymentNotePtrOutput() DeploymentNotePtrOutput {
	return o.ToDeploymentNotePtrOutputWithContext(context.Background())
}

func (o DeploymentNoteOutput) ToDeploymentNotePtrOutputWithContext(ctx context.Context) DeploymentNotePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeploymentNote) *DeploymentNote {
		return &v
	}).(DeploymentNotePtrOutput)
}

// Resource URI for the artifact being deployed.
func (o DeploymentNoteOutput) ResourceUri() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeploymentNote) []string { return v.ResourceUri }).(pulumi.StringArrayOutput)
}

type DeploymentNotePtrOutput struct{ *pulumi.OutputState }

func (DeploymentNotePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentNote)(nil)).Elem()
}

func (o DeploymentNotePtrOutput) ToDeploymentNotePtrOutput() DeploymentNotePtrOutput {
	return o
}

func (o DeploymentNotePtrOutput) ToDeploymentNotePtrOutputWithContext(ctx context.Context) DeploymentNotePtrOutput {
	return o
}

func (o DeploymentNotePtrOutput) Elem() DeploymentNoteOutput {
	return o.ApplyT(func(v *DeploymentNote) DeploymentNote {
		if v != nil {
			return *v
		}
		var ret DeploymentNote
		return ret
	}).(DeploymentNoteOutput)
}

// Resource URI for the artifact being deployed.
func (o DeploymentNotePtrOutput) ResourceUri() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DeploymentNote) []string {
		if v == nil {
			return nil
		}
		return v.ResourceUri
	}).(pulumi.StringArrayOutput)
}

// An artifact that can be deployed in some runtime.
type DeploymentNoteResponse struct {
	// Resource URI for the artifact being deployed.
	ResourceUri []string `pulumi:"resourceUri"`
}

// An artifact that can be deployed in some runtime.
type DeploymentNoteResponseOutput struct{ *pulumi.OutputState }

func (DeploymentNoteResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentNoteResponse)(nil)).Elem()
}

func (o DeploymentNoteResponseOutput) ToDeploymentNoteResponseOutput() DeploymentNoteResponseOutput {
	return o
}

func (o DeploymentNoteResponseOutput) ToDeploymentNoteResponseOutputWithContext(ctx context.Context) DeploymentNoteResponseOutput {
	return o
}

// Resource URI for the artifact being deployed.
func (o DeploymentNoteResponseOutput) ResourceUri() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeploymentNoteResponse) []string { return v.ResourceUri }).(pulumi.StringArrayOutput)
}

// The period during which some deployable was active in a runtime.
type DeploymentOccurrence struct {
	// Address of the runtime element hosting this deployment.
	Address *string `pulumi:"address"`
	// Configuration used to create this deployment.
	Config *string `pulumi:"config"`
	// Beginning of the lifetime of this deployment.
	DeployTime string `pulumi:"deployTime"`
	// Platform hosting this deployment.
	Platform *DeploymentOccurrencePlatform `pulumi:"platform"`
	// End of the lifetime of this deployment.
	UndeployTime *string `pulumi:"undeployTime"`
	// Identity of the user that triggered this deployment.
	UserEmail *string `pulumi:"userEmail"`
}

// DeploymentOccurrenceInput is an input type that accepts DeploymentOccurrenceArgs and DeploymentOccurrenceOutput values.
// You can construct a concrete instance of `DeploymentOccurrenceInput` via:
//
//	DeploymentOccurrenceArgs{...}
type DeploymentOccurrenceInput interface {
	pulumi.Input

	ToDeploymentOccurrenceOutput() DeploymentOccurrenceOutput
	ToDeploymentOccurrenceOutputWithContext(context.Context) DeploymentOccurrenceOutput
}

// The period during which some deployable was active in a runtime.
type DeploymentOccurrenceArgs struct {
	// Address of the runtime element hosting this deployment.
	Address pulumi.StringPtrInput `pulumi:"address"`
	// Configuration used to create this deployment.
	Config pulumi.StringPtrInput `pulumi:"config"`
	// Beginning of the lifetime of this deployment.
	DeployTime pulumi.StringInput `pulumi:"deployTime"`
	// Platform hosting this deployment.
	Platform DeploymentOccurrencePlatformPtrInput `pulumi:"platform"`
	// End of the lifetime of this deployment.
	UndeployTime pulumi.StringPtrInput `pulumi:"undeployTime"`
	// Identity of the user that triggered this deployment.
	UserEmail pulumi.StringPtrInput `pulumi:"userEmail"`
}

func (DeploymentOccurrenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentOccurrence)(nil)).Elem()
}

func (i DeploymentOccurrenceArgs) ToDeploymentOccurrenceOutput() DeploymentOccurrenceOutput {
	return i.ToDeploymentOccurrenceOutputWithContext(context.Background())
}

func (i DeploymentOccurrenceArgs) ToDeploymentOccurrenceOutputWithContext(ctx context.Context) DeploymentOccurrenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentOccurrenceOutput)
}

func (i DeploymentOccurrenceArgs) ToDeploymentOccurrencePtrOutput() DeploymentOccurrencePtrOutput {
	return i.ToDeploymentOccurrencePtrOutputWithContext(context.Background())
}

func (i DeploymentOccurrenceArgs) ToDeploymentOccurrencePtrOutputWithContext(ctx context.Context) DeploymentOccurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentOccurrenceOutput).ToDeploymentOccurrencePtrOutputWithContext(ctx)
}

// DeploymentOccurrencePtrInput is an input type that accepts DeploymentOccurrenceArgs, DeploymentOccurrencePtr and DeploymentOccurrencePtrOutput values.
// You can construct a concrete instance of `DeploymentOccurrencePtrInput` via:
//
//	        DeploymentOccurrenceArgs{...}
//
//	or:
//
//	        nil
type DeploymentOccurrencePtrInput interface {
	pulumi.Input

	ToDeploymentOccurrencePtrOutput() DeploymentOccurrencePtrOutput
	ToDeploymentOccurrencePtrOutputWithContext(context.Context) DeploymentOccurrencePtrOutput
}

type deploymentOccurrencePtrType DeploymentOccurrenceArgs

func DeploymentOccurrencePtr(v *DeploymentOccurrenceArgs) DeploymentOccurrencePtrInput {
	return (*deploymentOccurrencePtrType)(v)
}

func (*deploymentOccurrencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentOccurrence)(nil)).Elem()
}

func (i *deploymentOccurrencePtrType) ToDeploymentOccurrencePtrOutput() DeploymentOccurrencePtrOutput {
	return i.ToDeploymentOccurrencePtrOutputWithContext(context.Background())
}

func (i *deploymentOccurrencePtrType) ToDeploymentOccurrencePtrOutputWithContext(ctx context.Context) DeploymentOccurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentOccurrencePtrOutput)
}

// The period during which some deployable was active in a runtime.
type DeploymentOccurrenceOutput struct{ *pulumi.OutputState }

func (DeploymentOccurrenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentOccurrence)(nil)).Elem()
}

func (o DeploymentOccurrenceOutput) ToDeploymentOccurrenceOutput() DeploymentOccurrenceOutput {
	return o
}

func (o DeploymentOccurrenceOutput) ToDeploymentOccurrenceOutputWithContext(ctx context.Context) DeploymentOccurrenceOutput {
	return o
}

func (o DeploymentOccurrenceOutput) ToDeploymentOccurrencePtrOutput() DeploymentOccurrencePtrOutput {
	return o.ToDeploymentOccurrencePtrOutputWithContext(context.Background())
}

func (o DeploymentOccurrenceOutput) ToDeploymentOccurrencePtrOutputWithContext(ctx context.Context) DeploymentOccurrencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeploymentOccurrence) *DeploymentOccurrence {
		return &v
	}).(DeploymentOccurrencePtrOutput)
}

// Address of the runtime element hosting this deployment.
func (o DeploymentOccurrenceOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentOccurrence) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// Configuration used to create this deployment.
func (o DeploymentOccurrenceOutput) Config() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentOccurrence) *string { return v.Config }).(pulumi.StringPtrOutput)
}

// Beginning of the lifetime of this deployment.
func (o DeploymentOccurrenceOutput) DeployTime() pulumi.StringOutput {
	return o.ApplyT(func(v DeploymentOccurrence) string { return v.DeployTime }).(pulumi.StringOutput)
}

// Platform hosting this deployment.
func (o DeploymentOccurrenceOutput) Platform() DeploymentOccurrencePlatformPtrOutput {
	return o.ApplyT(func(v DeploymentOccurrence) *DeploymentOccurrencePlatform { return v.Platform }).(DeploymentOccurrencePlatformPtrOutput)
}

// End of the lifetime of this deployment.
func (o DeploymentOccurrenceOutput) UndeployTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentOccurrence) *string { return v.UndeployTime }).(pulumi.StringPtrOutput)
}

// Identity of the user that triggered this deployment.
func (o DeploymentOccurrenceOutput) UserEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentOccurrence) *string { return v.UserEmail }).(pulumi.StringPtrOutput)
}

type DeploymentOccurrencePtrOutput struct{ *pulumi.OutputState }

func (DeploymentOccurrencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentOccurrence)(nil)).Elem()
}

func (o DeploymentOccurrencePtrOutput) ToDeploymentOccurrencePtrOutput() DeploymentOccurrencePtrOutput {
	return o
}

func (o DeploymentOccurrencePtrOutput) ToDeploymentOccurrencePtrOutputWithContext(ctx context.Context) DeploymentOccurrencePtrOutput {
	return o
}

func (o DeploymentOccurrencePtrOutput) Elem() DeploymentOccurrenceOutput {
	return o.ApplyT(func(v *DeploymentOccurrence) DeploymentOccurrence {
		if v != nil {
			return *v
		}
		var ret DeploymentOccurrence
		return ret
	}).(DeploymentOccurrenceOutput)
}

// Address of the runtime element hosting this deployment.
func (o DeploymentOccurrencePtrOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeploymentOccurrence) *string {
		if v == nil {
			return nil
		}
		return v.Address
	}).(pulumi.StringPtrOutput)
}

// Configuration used to create this deployment.
func (o DeploymentOccurrencePtrOutput) Config() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeploymentOccurrence) *string {
		if v == nil {
			return nil
		}
		return v.Config
	}).(pulumi.StringPtrOutput)
}

// Beginning of the lifetime of this deployment.
func (o DeploymentOccurrencePtrOutput) DeployTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeploymentOccurrence) *string {
		if v == nil {
			return nil
		}
		return &v.DeployTime
	}).(pulumi.StringPtrOutput)
}

// Platform hosting this deployment.
func (o DeploymentOccurrencePtrOutput) Platform() DeploymentOccurrencePlatformPtrOutput {
	return o.ApplyT(func(v *DeploymentOccurrence) *DeploymentOccurrencePlatform {
		if v == nil {
			return nil
		}
		return v.Platform
	}).(DeploymentOccurrencePlatformPtrOutput)
}

// End of the lifetime of this deployment.
func (o DeploymentOccurrencePtrOutput) UndeployTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeploymentOccurrence) *string {
		if v == nil {
			return nil
		}
		return v.UndeployTime
	}).(pulumi.StringPtrOutput)
}

// Identity of the user that triggered this deployment.
func (o DeploymentOccurrencePtrOutput) UserEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeploymentOccurrence) *string {
		if v == nil {
			return nil
		}
		return v.UserEmail
	}).(pulumi.StringPtrOutput)
}

// The period during which some deployable was active in a runtime.
type DeploymentOccurrenceResponse struct {
	// Address of the runtime element hosting this deployment.
	Address string `pulumi:"address"`
	// Configuration used to create this deployment.
	Config string `pulumi:"config"`
	// Beginning of the lifetime of this deployment.
	DeployTime string `pulumi:"deployTime"`
	// Platform hosting this deployment.
	Platform string `pulumi:"platform"`
	// Resource URI for the artifact being deployed taken from the deployable field with the same name.
	ResourceUri []string `pulumi:"resourceUri"`
	// End of the lifetime of this deployment.
	UndeployTime string `pulumi:"undeployTime"`
	// Identity of the user that triggered this deployment.
	UserEmail string `pulumi:"userEmail"`
}

// The period during which some deployable was active in a runtime.
type DeploymentOccurrenceResponseOutput struct{ *pulumi.OutputState }

func (DeploymentOccurrenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentOccurrenceResponse)(nil)).Elem()
}

func (o DeploymentOccurrenceResponseOutput) ToDeploymentOccurrenceResponseOutput() DeploymentOccurrenceResponseOutput {
	return o
}

func (o DeploymentOccurrenceResponseOutput) ToDeploymentOccurrenceResponseOutputWithContext(ctx context.Context) DeploymentOccurrenceResponseOutput {
	return o
}

// Address of the runtime element hosting this deployment.
func (o DeploymentOccurrenceResponseOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v DeploymentOccurrenceResponse) string { return v.Address }).(pulumi.StringOutput)
}

// Configuration used to create this deployment.
func (o DeploymentOccurrenceResponseOutput) Config() pulumi.StringOutput {
	return o.ApplyT(func(v DeploymentOccurrenceResponse) string { return v.Config }).(pulumi.StringOutput)
}

// Beginning of the lifetime of this deployment.
func (o DeploymentOccurrenceResponseOutput) DeployTime() pulumi.StringOutput {
	return o.ApplyT(func(v DeploymentOccurrenceResponse) string { return v.DeployTime }).(pulumi.StringOutput)
}

// Platform hosting this deployment.
func (o DeploymentOccurrenceResponseOutput) Platform() pulumi.StringOutput {
	return o.ApplyT(func(v DeploymentOccurrenceResponse) string { return v.Platform }).(pulumi.StringOutput)
}

// Resource URI for the artifact being deployed taken from the deployable field with the same name.
func (o DeploymentOccurrenceResponseOutput) ResourceUri() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeploymentOccurrenceResponse) []string { return v.ResourceUri }).(pulumi.StringArrayOutput)
}

// End of the lifetime of this deployment.
func (o DeploymentOccurrenceResponseOutput) UndeployTime() pulumi.StringOutput {
	return o.ApplyT(func(v DeploymentOccurrenceResponse) string { return v.UndeployTime }).(pulumi.StringOutput)
}

// Identity of the user that triggered this deployment.
func (o DeploymentOccurrenceResponseOutput) UserEmail() pulumi.StringOutput {
	return o.ApplyT(func(v DeploymentOccurrenceResponse) string { return v.UserEmail }).(pulumi.StringOutput)
}

// A detail for a distro and package affected by this vulnerability and its associated fix (if one is available).
type Detail struct {
	// The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability affects.
	AffectedCpeUri string `pulumi:"affectedCpeUri"`
	// The package this vulnerability affects.
	AffectedPackage string `pulumi:"affectedPackage"`
	// The version number at the end of an interval in which this vulnerability exists. A vulnerability can affect a package between version numbers that are disjoint sets of intervals (example: [1.0.0-1.1.0], [2.4.6-2.4.8] and [4.5.6-4.6.8]) each of which will be represented in its own Detail. If a specific affected version is provided by a vulnerability database, affected_version_start and affected_version_end will be the same in that Detail.
	AffectedVersionEnd *Version `pulumi:"affectedVersionEnd"`
	// The version number at the start of an interval in which this vulnerability exists. A vulnerability can affect a package between version numbers that are disjoint sets of intervals (example: [1.0.0-1.1.0], [2.4.6-2.4.8] and [4.5.6-4.6.8]) each of which will be represented in its own Detail. If a specific affected version is provided by a vulnerability database, affected_version_start and affected_version_end will be the same in that Detail.
	AffectedVersionStart *Version `pulumi:"affectedVersionStart"`
	// A vendor-specific description of this vulnerability.
	Description *string `pulumi:"description"`
	// The distro recommended [CPE URI](https://cpe.mitre.org/specification/) to update to that contains a fix for this vulnerability. It is possible for this to be different from the affected_cpe_uri.
	FixedCpeUri *string `pulumi:"fixedCpeUri"`
	// The distro recommended package to update to that contains a fix for this vulnerability. It is possible for this to be different from the affected_package.
	FixedPackage *string `pulumi:"fixedPackage"`
	// The distro recommended version to update to that contains a fix for this vulnerability. Setting this to VersionKind.MAXIMUM means no such version is yet available.
	FixedVersion *Version `pulumi:"fixedVersion"`
	// Whether this detail is obsolete. Occurrences are expected not to point to obsolete details.
	IsObsolete *bool `pulumi:"isObsolete"`
	// The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
	PackageType *string `pulumi:"packageType"`
	// The distro assigned severity of this vulnerability.
	SeverityName *string `pulumi:"severityName"`
	// The source from which the information in this Detail was obtained.
	Source *string `pulumi:"source"`
	// The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.
	SourceUpdateTime *string `pulumi:"sourceUpdateTime"`
	// The name of the vendor of the product.
	Vendor *string `pulumi:"vendor"`
}

// DetailInput is an input type that accepts DetailArgs and DetailOutput values.
// You can construct a concrete instance of `DetailInput` via:
//
//	DetailArgs{...}
type DetailInput interface {
	pulumi.Input

	ToDetailOutput() DetailOutput
	ToDetailOutputWithContext(context.Context) DetailOutput
}

// A detail for a distro and package affected by this vulnerability and its associated fix (if one is available).
type DetailArgs struct {
	// The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability affects.
	AffectedCpeUri pulumi.StringInput `pulumi:"affectedCpeUri"`
	// The package this vulnerability affects.
	AffectedPackage pulumi.StringInput `pulumi:"affectedPackage"`
	// The version number at the end of an interval in which this vulnerability exists. A vulnerability can affect a package between version numbers that are disjoint sets of intervals (example: [1.0.0-1.1.0], [2.4.6-2.4.8] and [4.5.6-4.6.8]) each of which will be represented in its own Detail. If a specific affected version is provided by a vulnerability database, affected_version_start and affected_version_end will be the same in that Detail.
	AffectedVersionEnd VersionPtrInput `pulumi:"affectedVersionEnd"`
	// The version number at the start of an interval in which this vulnerability exists. A vulnerability can affect a package between version numbers that are disjoint sets of intervals (example: [1.0.0-1.1.0], [2.4.6-2.4.8] and [4.5.6-4.6.8]) each of which will be represented in its own Detail. If a specific affected version is provided by a vulnerability database, affected_version_start and affected_version_end will be the same in that Detail.
	AffectedVersionStart VersionPtrInput `pulumi:"affectedVersionStart"`
	// A vendor-specific description of this vulnerability.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The distro recommended [CPE URI](https://cpe.mitre.org/specification/) to update to that contains a fix for this vulnerability. It is possible for this to be different from the affected_cpe_uri.
	FixedCpeUri pulumi.StringPtrInput `pulumi:"fixedCpeUri"`
	// The distro recommended package to update to that contains a fix for this vulnerability. It is possible for this to be different from the affected_package.
	FixedPackage pulumi.StringPtrInput `pulumi:"fixedPackage"`
	// The distro recommended version to update to that contains a fix for this vulnerability. Setting this to VersionKind.MAXIMUM means no such version is yet available.
	FixedVersion VersionPtrInput `pulumi:"fixedVersion"`
	// Whether this detail is obsolete. Occurrences are expected not to point to obsolete details.
	IsObsolete pulumi.BoolPtrInput `pulumi:"isObsolete"`
	// The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
	PackageType pulumi.StringPtrInput `pulumi:"packageType"`
	// The distro assigned severity of this vulnerability.
	SeverityName pulumi.StringPtrInput `pulumi:"severityName"`
	// The source from which the information in this Detail was obtained.
	Source pulumi.StringPtrInput `pulumi:"source"`
	// The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.
	SourceUpdateTime pulumi.StringPtrInput `pulumi:"sourceUpdateTime"`
	// The name of the vendor of the product.
	Vendor pulumi.StringPtrInput `pulumi:"vendor"`
}

func (DetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Detail)(nil)).Elem()
}

func (i DetailArgs) ToDetailOutput() DetailOutput {
	return i.ToDetailOutputWithContext(context.Background())
}

func (i DetailArgs) ToDetailOutputWithContext(ctx context.Context) DetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DetailOutput)
}

// DetailArrayInput is an input type that accepts DetailArray and DetailArrayOutput values.
// You can construct a concrete instance of `DetailArrayInput` via:
//
//	DetailArray{ DetailArgs{...} }
type DetailArrayInput interface {
	pulumi.Input

	ToDetailArrayOutput() DetailArrayOutput
	ToDetailArrayOutputWithContext(context.Context) DetailArrayOutput
}

type DetailArray []DetailInput

func (DetailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Detail)(nil)).Elem()
}

func (i DetailArray) ToDetailArrayOutput() DetailArrayOutput {
	return i.ToDetailArrayOutputWithContext(context.Background())
}

func (i DetailArray) ToDetailArrayOutputWithContext(ctx context.Context) DetailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DetailArrayOutput)
}

// A detail for a distro and package affected by this vulnerability and its associated fix (if one is available).
type DetailOutput struct{ *pulumi.OutputState }

func (DetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Detail)(nil)).Elem()
}

func (o DetailOutput) ToDetailOutput() DetailOutput {
	return o
}

func (o DetailOutput) ToDetailOutputWithContext(ctx context.Context) DetailOutput {
	return o
}

// The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability affects.
func (o DetailOutput) AffectedCpeUri() pulumi.StringOutput {
	return o.ApplyT(func(v Detail) string { return v.AffectedCpeUri }).(pulumi.StringOutput)
}

// The package this vulnerability affects.
func (o DetailOutput) AffectedPackage() pulumi.StringOutput {
	return o.ApplyT(func(v Detail) string { return v.AffectedPackage }).(pulumi.StringOutput)
}

// The version number at the end of an interval in which this vulnerability exists. A vulnerability can affect a package between version numbers that are disjoint sets of intervals (example: [1.0.0-1.1.0], [2.4.6-2.4.8] and [4.5.6-4.6.8]) each of which will be represented in its own Detail. If a specific affected version is provided by a vulnerability database, affected_version_start and affected_version_end will be the same in that Detail.
func (o DetailOutput) AffectedVersionEnd() VersionPtrOutput {
	return o.ApplyT(func(v Detail) *Version { return v.AffectedVersionEnd }).(VersionPtrOutput)
}

// The version number at the start of an interval in which this vulnerability exists. A vulnerability can affect a package between version numbers that are disjoint sets of intervals (example: [1.0.0-1.1.0], [2.4.6-2.4.8] and [4.5.6-4.6.8]) each of which will be represented in its own Detail. If a specific affected version is provided by a vulnerability database, affected_version_start and affected_version_end will be the same in that Detail.
func (o DetailOutput) AffectedVersionStart() VersionPtrOutput {
	return o.ApplyT(func(v Detail) *Version { return v.AffectedVersionStart }).(VersionPtrOutput)
}

// A vendor-specific description of this vulnerability.
func (o DetailOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Detail) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The distro recommended [CPE URI](https://cpe.mitre.org/specification/) to update to that contains a fix for this vulnerability. It is possible for this to be different from the affected_cpe_uri.
func (o DetailOutput) FixedCpeUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Detail) *string { return v.FixedCpeUri }).(pulumi.StringPtrOutput)
}

// The distro recommended package to update to that contains a fix for this vulnerability. It is possible for this to be different from the affected_package.
func (o DetailOutput) FixedPackage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Detail) *string { return v.FixedPackage }).(pulumi.StringPtrOutput)
}

// The distro recommended version to update to that contains a fix for this vulnerability. Setting this to VersionKind.MAXIMUM means no such version is yet available.
func (o DetailOutput) FixedVersion() VersionPtrOutput {
	return o.ApplyT(func(v Detail) *Version { return v.FixedVersion }).(VersionPtrOutput)
}

// Whether this detail is obsolete. Occurrences are expected not to point to obsolete details.
func (o DetailOutput) IsObsolete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Detail) *bool { return v.IsObsolete }).(pulumi.BoolPtrOutput)
}

// The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
func (o DetailOutput) PackageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Detail) *string { return v.PackageType }).(pulumi.StringPtrOutput)
}

// The distro assigned severity of this vulnerability.
func (o DetailOutput) SeverityName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Detail) *string { return v.SeverityName }).(pulumi.StringPtrOutput)
}

// The source from which the information in this Detail was obtained.
func (o DetailOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Detail) *string { return v.Source }).(pulumi.StringPtrOutput)
}

// The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.
func (o DetailOutput) SourceUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Detail) *string { return v.SourceUpdateTime }).(pulumi.StringPtrOutput)
}

// The name of the vendor of the product.
func (o DetailOutput) Vendor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Detail) *string { return v.Vendor }).(pulumi.StringPtrOutput)
}

type DetailArrayOutput struct{ *pulumi.OutputState }

func (DetailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Detail)(nil)).Elem()
}

func (o DetailArrayOutput) ToDetailArrayOutput() DetailArrayOutput {
	return o
}

func (o DetailArrayOutput) ToDetailArrayOutputWithContext(ctx context.Context) DetailArrayOutput {
	return o
}

func (o DetailArrayOutput) Index(i pulumi.IntInput) DetailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Detail {
		return vs[0].([]Detail)[vs[1].(int)]
	}).(DetailOutput)
}

// A detail for a distro and package affected by this vulnerability and its associated fix (if one is available).
type DetailResponse struct {
	// The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability affects.
	AffectedCpeUri string `pulumi:"affectedCpeUri"`
	// The package this vulnerability affects.
	AffectedPackage string `pulumi:"affectedPackage"`
	// The version number at the end of an interval in which this vulnerability exists. A vulnerability can affect a package between version numbers that are disjoint sets of intervals (example: [1.0.0-1.1.0], [2.4.6-2.4.8] and [4.5.6-4.6.8]) each of which will be represented in its own Detail. If a specific affected version is provided by a vulnerability database, affected_version_start and affected_version_end will be the same in that Detail.
	AffectedVersionEnd VersionResponse `pulumi:"affectedVersionEnd"`
	// The version number at the start of an interval in which this vulnerability exists. A vulnerability can affect a package between version numbers that are disjoint sets of intervals (example: [1.0.0-1.1.0], [2.4.6-2.4.8] and [4.5.6-4.6.8]) each of which will be represented in its own Detail. If a specific affected version is provided by a vulnerability database, affected_version_start and affected_version_end will be the same in that Detail.
	AffectedVersionStart VersionResponse `pulumi:"affectedVersionStart"`
	// A vendor-specific description of this vulnerability.
	Description string `pulumi:"description"`
	// The distro recommended [CPE URI](https://cpe.mitre.org/specification/) to update to that contains a fix for this vulnerability. It is possible for this to be different from the affected_cpe_uri.
	FixedCpeUri string `pulumi:"fixedCpeUri"`
	// The distro recommended package to update to that contains a fix for this vulnerability. It is possible for this to be different from the affected_package.
	FixedPackage string `pulumi:"fixedPackage"`
	// The distro recommended version to update to that contains a fix for this vulnerability. Setting this to VersionKind.MAXIMUM means no such version is yet available.
	FixedVersion VersionResponse `pulumi:"fixedVersion"`
	// Whether this detail is obsolete. Occurrences are expected not to point to obsolete details.
	IsObsolete bool `pulumi:"isObsolete"`
	// The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
	PackageType string `pulumi:"packageType"`
	// The distro assigned severity of this vulnerability.
	SeverityName string `pulumi:"severityName"`
	// The source from which the information in this Detail was obtained.
	Source string `pulumi:"source"`
	// The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.
	SourceUpdateTime string `pulumi:"sourceUpdateTime"`
	// The name of the vendor of the product.
	Vendor string `pulumi:"vendor"`
}

// A detail for a distro and package affected by this vulnerability and its associated fix (if one is available).
type DetailResponseOutput struct{ *pulumi.OutputState }

func (DetailResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DetailResponse)(nil)).Elem()
}

func (o DetailResponseOutput) ToDetailResponseOutput() DetailResponseOutput {
	return o
}

func (o DetailResponseOutput) ToDetailResponseOutputWithContext(ctx context.Context) DetailResponseOutput {
	return o
}

// The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability affects.
func (o DetailResponseOutput) AffectedCpeUri() pulumi.StringOutput {
	return o.ApplyT(func(v DetailResponse) string { return v.AffectedCpeUri }).(pulumi.StringOutput)
}

// The package this vulnerability affects.
func (o DetailResponseOutput) AffectedPackage() pulumi.StringOutput {
	return o.ApplyT(func(v DetailResponse) string { return v.AffectedPackage }).(pulumi.StringOutput)
}

// The version number at the end of an interval in which this vulnerability exists. A vulnerability can affect a package between version numbers that are disjoint sets of intervals (example: [1.0.0-1.1.0], [2.4.6-2.4.8] and [4.5.6-4.6.8]) each of which will be represented in its own Detail. If a specific affected version is provided by a vulnerability database, affected_version_start and affected_version_end will be the same in that Detail.
func (o DetailResponseOutput) AffectedVersionEnd() VersionResponseOutput {
	return o.ApplyT(func(v DetailResponse) VersionResponse { return v.AffectedVersionEnd }).(VersionResponseOutput)
}

// The version number at the start of an interval in which this vulnerability exists. A vulnerability can affect a package between version numbers that are disjoint sets of intervals (example: [1.0.0-1.1.0], [2.4.6-2.4.8] and [4.5.6-4.6.8]) each of which will be represented in its own Detail. If a specific affected version is provided by a vulnerability database, affected_version_start and affected_version_end will be the same in that Detail.
func (o DetailResponseOutput) AffectedVersionStart() VersionResponseOutput {
	return o.ApplyT(func(v DetailResponse) VersionResponse { return v.AffectedVersionStart }).(VersionResponseOutput)
}

// A vendor-specific description of this vulnerability.
func (o DetailResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v DetailResponse) string { return v.Description }).(pulumi.StringOutput)
}

// The distro recommended [CPE URI](https://cpe.mitre.org/specification/) to update to that contains a fix for this vulnerability. It is possible for this to be different from the affected_cpe_uri.
func (o DetailResponseOutput) FixedCpeUri() pulumi.StringOutput {
	return o.ApplyT(func(v DetailResponse) string { return v.FixedCpeUri }).(pulumi.StringOutput)
}

// The distro recommended package to update to that contains a fix for this vulnerability. It is possible for this to be different from the affected_package.
func (o DetailResponseOutput) FixedPackage() pulumi.StringOutput {
	return o.ApplyT(func(v DetailResponse) string { return v.FixedPackage }).(pulumi.StringOutput)
}

// The distro recommended version to update to that contains a fix for this vulnerability. Setting this to VersionKind.MAXIMUM means no such version is yet available.
func (o DetailResponseOutput) FixedVersion() VersionResponseOutput {
	return o.ApplyT(func(v DetailResponse) VersionResponse { return v.FixedVersion }).(VersionResponseOutput)
}

// Whether this detail is obsolete. Occurrences are expected not to point to obsolete details.
func (o DetailResponseOutput) IsObsolete() pulumi.BoolOutput {
	return o.ApplyT(func(v DetailResponse) bool { return v.IsObsolete }).(pulumi.BoolOutput)
}

// The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
func (o DetailResponseOutput) PackageType() pulumi.StringOutput {
	return o.ApplyT(func(v DetailResponse) string { return v.PackageType }).(pulumi.StringOutput)
}

// The distro assigned severity of this vulnerability.
func (o DetailResponseOutput) SeverityName() pulumi.StringOutput {
	return o.ApplyT(func(v DetailResponse) string { return v.SeverityName }).(pulumi.StringOutput)
}

// The source from which the information in this Detail was obtained.
func (o DetailResponseOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v DetailResponse) string { return v.Source }).(pulumi.StringOutput)
}

// The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.
func (o DetailResponseOutput) SourceUpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v DetailResponse) string { return v.SourceUpdateTime }).(pulumi.StringOutput)
}

// The name of the vendor of the product.
func (o DetailResponseOutput) Vendor() pulumi.StringOutput {
	return o.ApplyT(func(v DetailResponse) string { return v.Vendor }).(pulumi.StringOutput)
}

type DetailResponseArrayOutput struct{ *pulumi.OutputState }

func (DetailResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DetailResponse)(nil)).Elem()
}

func (o DetailResponseArrayOutput) ToDetailResponseArrayOutput() DetailResponseArrayOutput {
	return o
}

func (o DetailResponseArrayOutput) ToDetailResponseArrayOutputWithContext(ctx context.Context) DetailResponseArrayOutput {
	return o
}

func (o DetailResponseArrayOutput) Index(i pulumi.IntInput) DetailResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DetailResponse {
		return vs[0].([]DetailResponse)[vs[1].(int)]
	}).(DetailResponseOutput)
}

// Digest information.
type Digest struct {
	// `SHA1`, `SHA512` etc.
	Algo *string `pulumi:"algo"`
	// Value of the digest.
	DigestBytes *string `pulumi:"digestBytes"`
}

// DigestInput is an input type that accepts DigestArgs and DigestOutput values.
// You can construct a concrete instance of `DigestInput` via:
//
//	DigestArgs{...}
type DigestInput interface {
	pulumi.Input

	ToDigestOutput() DigestOutput
	ToDigestOutputWithContext(context.Context) DigestOutput
}

// Digest information.
type DigestArgs struct {
	// `SHA1`, `SHA512` etc.
	Algo pulumi.StringPtrInput `pulumi:"algo"`
	// Value of the digest.
	DigestBytes pulumi.StringPtrInput `pulumi:"digestBytes"`
}

func (DigestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Digest)(nil)).Elem()
}

func (i DigestArgs) ToDigestOutput() DigestOutput {
	return i.ToDigestOutputWithContext(context.Background())
}

func (i DigestArgs) ToDigestOutputWithContext(ctx context.Context) DigestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DigestOutput)
}

// DigestArrayInput is an input type that accepts DigestArray and DigestArrayOutput values.
// You can construct a concrete instance of `DigestArrayInput` via:
//
//	DigestArray{ DigestArgs{...} }
type DigestArrayInput interface {
	pulumi.Input

	ToDigestArrayOutput() DigestArrayOutput
	ToDigestArrayOutputWithContext(context.Context) DigestArrayOutput
}

type DigestArray []DigestInput

func (DigestArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Digest)(nil)).Elem()
}

func (i DigestArray) ToDigestArrayOutput() DigestArrayOutput {
	return i.ToDigestArrayOutputWithContext(context.Background())
}

func (i DigestArray) ToDigestArrayOutputWithContext(ctx context.Context) DigestArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DigestArrayOutput)
}

// Digest information.
type DigestOutput struct{ *pulumi.OutputState }

func (DigestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Digest)(nil)).Elem()
}

func (o DigestOutput) ToDigestOutput() DigestOutput {
	return o
}

func (o DigestOutput) ToDigestOutputWithContext(ctx context.Context) DigestOutput {
	return o
}

// `SHA1`, `SHA512` etc.
func (o DigestOutput) Algo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Digest) *string { return v.Algo }).(pulumi.StringPtrOutput)
}

// Value of the digest.
func (o DigestOutput) DigestBytes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Digest) *string { return v.DigestBytes }).(pulumi.StringPtrOutput)
}

type DigestArrayOutput struct{ *pulumi.OutputState }

func (DigestArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Digest)(nil)).Elem()
}

func (o DigestArrayOutput) ToDigestArrayOutput() DigestArrayOutput {
	return o
}

func (o DigestArrayOutput) ToDigestArrayOutputWithContext(ctx context.Context) DigestArrayOutput {
	return o
}

func (o DigestArrayOutput) Index(i pulumi.IntInput) DigestOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Digest {
		return vs[0].([]Digest)[vs[1].(int)]
	}).(DigestOutput)
}

// Digest information.
type DigestResponse struct {
	// `SHA1`, `SHA512` etc.
	Algo string `pulumi:"algo"`
	// Value of the digest.
	DigestBytes string `pulumi:"digestBytes"`
}

// Digest information.
type DigestResponseOutput struct{ *pulumi.OutputState }

func (DigestResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DigestResponse)(nil)).Elem()
}

func (o DigestResponseOutput) ToDigestResponseOutput() DigestResponseOutput {
	return o
}

func (o DigestResponseOutput) ToDigestResponseOutputWithContext(ctx context.Context) DigestResponseOutput {
	return o
}

// `SHA1`, `SHA512` etc.
func (o DigestResponseOutput) Algo() pulumi.StringOutput {
	return o.ApplyT(func(v DigestResponse) string { return v.Algo }).(pulumi.StringOutput)
}

// Value of the digest.
func (o DigestResponseOutput) DigestBytes() pulumi.StringOutput {
	return o.ApplyT(func(v DigestResponse) string { return v.DigestBytes }).(pulumi.StringOutput)
}

type DigestResponseArrayOutput struct{ *pulumi.OutputState }

func (DigestResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DigestResponse)(nil)).Elem()
}

func (o DigestResponseArrayOutput) ToDigestResponseArrayOutput() DigestResponseArrayOutput {
	return o
}

func (o DigestResponseArrayOutput) ToDigestResponseArrayOutputWithContext(ctx context.Context) DigestResponseArrayOutput {
	return o
}

func (o DigestResponseArrayOutput) Index(i pulumi.IntInput) DigestResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DigestResponse {
		return vs[0].([]DigestResponse)[vs[1].(int)]
	}).(DigestResponseOutput)
}

// A note that indicates a type of analysis a provider would perform. This note exists in a provider's project. A `Discovery` occurrence is created in a consumer's project at the start of analysis.
type DiscoveryNote struct {
	// Immutable. The kind of analysis that is handled by this discovery.
	AnalysisKind DiscoveryNoteAnalysisKind `pulumi:"analysisKind"`
}

// DiscoveryNoteInput is an input type that accepts DiscoveryNoteArgs and DiscoveryNoteOutput values.
// You can construct a concrete instance of `DiscoveryNoteInput` via:
//
//	DiscoveryNoteArgs{...}
type DiscoveryNoteInput interface {
	pulumi.Input

	ToDiscoveryNoteOutput() DiscoveryNoteOutput
	ToDiscoveryNoteOutputWithContext(context.Context) DiscoveryNoteOutput
}

// A note that indicates a type of analysis a provider would perform. This note exists in a provider's project. A `Discovery` occurrence is created in a consumer's project at the start of analysis.
type DiscoveryNoteArgs struct {
	// Immutable. The kind of analysis that is handled by this discovery.
	AnalysisKind DiscoveryNoteAnalysisKindInput `pulumi:"analysisKind"`
}

func (DiscoveryNoteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiscoveryNote)(nil)).Elem()
}

func (i DiscoveryNoteArgs) ToDiscoveryNoteOutput() DiscoveryNoteOutput {
	return i.ToDiscoveryNoteOutputWithContext(context.Background())
}

func (i DiscoveryNoteArgs) ToDiscoveryNoteOutputWithContext(ctx context.Context) DiscoveryNoteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiscoveryNoteOutput)
}

func (i DiscoveryNoteArgs) ToDiscoveryNotePtrOutput() DiscoveryNotePtrOutput {
	return i.ToDiscoveryNotePtrOutputWithContext(context.Background())
}

func (i DiscoveryNoteArgs) ToDiscoveryNotePtrOutputWithContext(ctx context.Context) DiscoveryNotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiscoveryNoteOutput).ToDiscoveryNotePtrOutputWithContext(ctx)
}

// DiscoveryNotePtrInput is an input type that accepts DiscoveryNoteArgs, DiscoveryNotePtr and DiscoveryNotePtrOutput values.
// You can construct a concrete instance of `DiscoveryNotePtrInput` via:
//
//	        DiscoveryNoteArgs{...}
//
//	or:
//
//	        nil
type DiscoveryNotePtrInput interface {
	pulumi.Input

	ToDiscoveryNotePtrOutput() DiscoveryNotePtrOutput
	ToDiscoveryNotePtrOutputWithContext(context.Context) DiscoveryNotePtrOutput
}

type discoveryNotePtrType DiscoveryNoteArgs

func DiscoveryNotePtr(v *DiscoveryNoteArgs) DiscoveryNotePtrInput {
	return (*discoveryNotePtrType)(v)
}

func (*discoveryNotePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DiscoveryNote)(nil)).Elem()
}

func (i *discoveryNotePtrType) ToDiscoveryNotePtrOutput() DiscoveryNotePtrOutput {
	return i.ToDiscoveryNotePtrOutputWithContext(context.Background())
}

func (i *discoveryNotePtrType) ToDiscoveryNotePtrOutputWithContext(ctx context.Context) DiscoveryNotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiscoveryNotePtrOutput)
}

// A note that indicates a type of analysis a provider would perform. This note exists in a provider's project. A `Discovery` occurrence is created in a consumer's project at the start of analysis.
type DiscoveryNoteOutput struct{ *pulumi.OutputState }

func (DiscoveryNoteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiscoveryNote)(nil)).Elem()
}

func (o DiscoveryNoteOutput) ToDiscoveryNoteOutput() DiscoveryNoteOutput {
	return o
}

func (o DiscoveryNoteOutput) ToDiscoveryNoteOutputWithContext(ctx context.Context) DiscoveryNoteOutput {
	return o
}

func (o DiscoveryNoteOutput) ToDiscoveryNotePtrOutput() DiscoveryNotePtrOutput {
	return o.ToDiscoveryNotePtrOutputWithContext(context.Background())
}

func (o DiscoveryNoteOutput) ToDiscoveryNotePtrOutputWithContext(ctx context.Context) DiscoveryNotePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DiscoveryNote) *DiscoveryNote {
		return &v
	}).(DiscoveryNotePtrOutput)
}

// Immutable. The kind of analysis that is handled by this discovery.
func (o DiscoveryNoteOutput) AnalysisKind() DiscoveryNoteAnalysisKindOutput {
	return o.ApplyT(func(v DiscoveryNote) DiscoveryNoteAnalysisKind { return v.AnalysisKind }).(DiscoveryNoteAnalysisKindOutput)
}

type DiscoveryNotePtrOutput struct{ *pulumi.OutputState }

func (DiscoveryNotePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiscoveryNote)(nil)).Elem()
}

func (o DiscoveryNotePtrOutput) ToDiscoveryNotePtrOutput() DiscoveryNotePtrOutput {
	return o
}

func (o DiscoveryNotePtrOutput) ToDiscoveryNotePtrOutputWithContext(ctx context.Context) DiscoveryNotePtrOutput {
	return o
}

func (o DiscoveryNotePtrOutput) Elem() DiscoveryNoteOutput {
	return o.ApplyT(func(v *DiscoveryNote) DiscoveryNote {
		if v != nil {
			return *v
		}
		var ret DiscoveryNote
		return ret
	}).(DiscoveryNoteOutput)
}

// Immutable. The kind of analysis that is handled by this discovery.
func (o DiscoveryNotePtrOutput) AnalysisKind() DiscoveryNoteAnalysisKindPtrOutput {
	return o.ApplyT(func(v *DiscoveryNote) *DiscoveryNoteAnalysisKind {
		if v == nil {
			return nil
		}
		return &v.AnalysisKind
	}).(DiscoveryNoteAnalysisKindPtrOutput)
}

// A note that indicates a type of analysis a provider would perform. This note exists in a provider's project. A `Discovery` occurrence is created in a consumer's project at the start of analysis.
type DiscoveryNoteResponse struct {
	// Immutable. The kind of analysis that is handled by this discovery.
	AnalysisKind string `pulumi:"analysisKind"`
}

// A note that indicates a type of analysis a provider would perform. This note exists in a provider's project. A `Discovery` occurrence is created in a consumer's project at the start of analysis.
type DiscoveryNoteResponseOutput struct{ *pulumi.OutputState }

func (DiscoveryNoteResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiscoveryNoteResponse)(nil)).Elem()
}

func (o DiscoveryNoteResponseOutput) ToDiscoveryNoteResponseOutput() DiscoveryNoteResponseOutput {
	return o
}

func (o DiscoveryNoteResponseOutput) ToDiscoveryNoteResponseOutputWithContext(ctx context.Context) DiscoveryNoteResponseOutput {
	return o
}

// Immutable. The kind of analysis that is handled by this discovery.
func (o DiscoveryNoteResponseOutput) AnalysisKind() pulumi.StringOutput {
	return o.ApplyT(func(v DiscoveryNoteResponse) string { return v.AnalysisKind }).(pulumi.StringOutput)
}

// Provides information about the analysis status of a discovered resource.
type DiscoveryOccurrence struct {
	AnalysisCompleted *AnalysisCompleted `pulumi:"analysisCompleted"`
	// Indicates any errors encountered during analysis of a resource. There could be 0 or more of these errors.
	AnalysisError []Status `pulumi:"analysisError"`
	// The status of discovery for the resource.
	AnalysisStatus *DiscoveryOccurrenceAnalysisStatus `pulumi:"analysisStatus"`
	// When an error is encountered this will contain a LocalizedMessage under details to show to the user. The LocalizedMessage is output only and populated by the API.
	AnalysisStatusError *Status `pulumi:"analysisStatusError"`
	// Whether the resource is continuously analyzed.
	ContinuousAnalysis *DiscoveryOccurrenceContinuousAnalysis `pulumi:"continuousAnalysis"`
	// The CPE of the resource being scanned.
	Cpe *string `pulumi:"cpe"`
	// The last time this resource was scanned.
	LastScanTime *string `pulumi:"lastScanTime"`
	// The status of an SBOM generation.
	SbomStatus *SBOMStatus `pulumi:"sbomStatus"`
}

// DiscoveryOccurrenceInput is an input type that accepts DiscoveryOccurrenceArgs and DiscoveryOccurrenceOutput values.
// You can construct a concrete instance of `DiscoveryOccurrenceInput` via:
//
//	DiscoveryOccurrenceArgs{...}
type DiscoveryOccurrenceInput interface {
	pulumi.Input

	ToDiscoveryOccurrenceOutput() DiscoveryOccurrenceOutput
	ToDiscoveryOccurrenceOutputWithContext(context.Context) DiscoveryOccurrenceOutput
}

// Provides information about the analysis status of a discovered resource.
type DiscoveryOccurrenceArgs struct {
	AnalysisCompleted AnalysisCompletedPtrInput `pulumi:"analysisCompleted"`
	// Indicates any errors encountered during analysis of a resource. There could be 0 or more of these errors.
	AnalysisError StatusArrayInput `pulumi:"analysisError"`
	// The status of discovery for the resource.
	AnalysisStatus DiscoveryOccurrenceAnalysisStatusPtrInput `pulumi:"analysisStatus"`
	// When an error is encountered this will contain a LocalizedMessage under details to show to the user. The LocalizedMessage is output only and populated by the API.
	AnalysisStatusError StatusPtrInput `pulumi:"analysisStatusError"`
	// Whether the resource is continuously analyzed.
	ContinuousAnalysis DiscoveryOccurrenceContinuousAnalysisPtrInput `pulumi:"continuousAnalysis"`
	// The CPE of the resource being scanned.
	Cpe pulumi.StringPtrInput `pulumi:"cpe"`
	// The last time this resource was scanned.
	LastScanTime pulumi.StringPtrInput `pulumi:"lastScanTime"`
	// The status of an SBOM generation.
	SbomStatus SBOMStatusPtrInput `pulumi:"sbomStatus"`
}

func (DiscoveryOccurrenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiscoveryOccurrence)(nil)).Elem()
}

func (i DiscoveryOccurrenceArgs) ToDiscoveryOccurrenceOutput() DiscoveryOccurrenceOutput {
	return i.ToDiscoveryOccurrenceOutputWithContext(context.Background())
}

func (i DiscoveryOccurrenceArgs) ToDiscoveryOccurrenceOutputWithContext(ctx context.Context) DiscoveryOccurrenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiscoveryOccurrenceOutput)
}

func (i DiscoveryOccurrenceArgs) ToDiscoveryOccurrencePtrOutput() DiscoveryOccurrencePtrOutput {
	return i.ToDiscoveryOccurrencePtrOutputWithContext(context.Background())
}

func (i DiscoveryOccurrenceArgs) ToDiscoveryOccurrencePtrOutputWithContext(ctx context.Context) DiscoveryOccurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiscoveryOccurrenceOutput).ToDiscoveryOccurrencePtrOutputWithContext(ctx)
}

// DiscoveryOccurrencePtrInput is an input type that accepts DiscoveryOccurrenceArgs, DiscoveryOccurrencePtr and DiscoveryOccurrencePtrOutput values.
// You can construct a concrete instance of `DiscoveryOccurrencePtrInput` via:
//
//	        DiscoveryOccurrenceArgs{...}
//
//	or:
//
//	        nil
type DiscoveryOccurrencePtrInput interface {
	pulumi.Input

	ToDiscoveryOccurrencePtrOutput() DiscoveryOccurrencePtrOutput
	ToDiscoveryOccurrencePtrOutputWithContext(context.Context) DiscoveryOccurrencePtrOutput
}

type discoveryOccurrencePtrType DiscoveryOccurrenceArgs

func DiscoveryOccurrencePtr(v *DiscoveryOccurrenceArgs) DiscoveryOccurrencePtrInput {
	return (*discoveryOccurrencePtrType)(v)
}

func (*discoveryOccurrencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DiscoveryOccurrence)(nil)).Elem()
}

func (i *discoveryOccurrencePtrType) ToDiscoveryOccurrencePtrOutput() DiscoveryOccurrencePtrOutput {
	return i.ToDiscoveryOccurrencePtrOutputWithContext(context.Background())
}

func (i *discoveryOccurrencePtrType) ToDiscoveryOccurrencePtrOutputWithContext(ctx context.Context) DiscoveryOccurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiscoveryOccurrencePtrOutput)
}

// Provides information about the analysis status of a discovered resource.
type DiscoveryOccurrenceOutput struct{ *pulumi.OutputState }

func (DiscoveryOccurrenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiscoveryOccurrence)(nil)).Elem()
}

func (o DiscoveryOccurrenceOutput) ToDiscoveryOccurrenceOutput() DiscoveryOccurrenceOutput {
	return o
}

func (o DiscoveryOccurrenceOutput) ToDiscoveryOccurrenceOutputWithContext(ctx context.Context) DiscoveryOccurrenceOutput {
	return o
}

func (o DiscoveryOccurrenceOutput) ToDiscoveryOccurrencePtrOutput() DiscoveryOccurrencePtrOutput {
	return o.ToDiscoveryOccurrencePtrOutputWithContext(context.Background())
}

func (o DiscoveryOccurrenceOutput) ToDiscoveryOccurrencePtrOutputWithContext(ctx context.Context) DiscoveryOccurrencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DiscoveryOccurrence) *DiscoveryOccurrence {
		return &v
	}).(DiscoveryOccurrencePtrOutput)
}

func (o DiscoveryOccurrenceOutput) AnalysisCompleted() AnalysisCompletedPtrOutput {
	return o.ApplyT(func(v DiscoveryOccurrence) *AnalysisCompleted { return v.AnalysisCompleted }).(AnalysisCompletedPtrOutput)
}

// Indicates any errors encountered during analysis of a resource. There could be 0 or more of these errors.
func (o DiscoveryOccurrenceOutput) AnalysisError() StatusArrayOutput {
	return o.ApplyT(func(v DiscoveryOccurrence) []Status { return v.AnalysisError }).(StatusArrayOutput)
}

// The status of discovery for the resource.
func (o DiscoveryOccurrenceOutput) AnalysisStatus() DiscoveryOccurrenceAnalysisStatusPtrOutput {
	return o.ApplyT(func(v DiscoveryOccurrence) *DiscoveryOccurrenceAnalysisStatus { return v.AnalysisStatus }).(DiscoveryOccurrenceAnalysisStatusPtrOutput)
}

// When an error is encountered this will contain a LocalizedMessage under details to show to the user. The LocalizedMessage is output only and populated by the API.
func (o DiscoveryOccurrenceOutput) AnalysisStatusError() StatusPtrOutput {
	return o.ApplyT(func(v DiscoveryOccurrence) *Status { return v.AnalysisStatusError }).(StatusPtrOutput)
}

// Whether the resource is continuously analyzed.
func (o DiscoveryOccurrenceOutput) ContinuousAnalysis() DiscoveryOccurrenceContinuousAnalysisPtrOutput {
	return o.ApplyT(func(v DiscoveryOccurrence) *DiscoveryOccurrenceContinuousAnalysis { return v.ContinuousAnalysis }).(DiscoveryOccurrenceContinuousAnalysisPtrOutput)
}

// The CPE of the resource being scanned.
func (o DiscoveryOccurrenceOutput) Cpe() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiscoveryOccurrence) *string { return v.Cpe }).(pulumi.StringPtrOutput)
}

// The last time this resource was scanned.
func (o DiscoveryOccurrenceOutput) LastScanTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiscoveryOccurrence) *string { return v.LastScanTime }).(pulumi.StringPtrOutput)
}

// The status of an SBOM generation.
func (o DiscoveryOccurrenceOutput) SbomStatus() SBOMStatusPtrOutput {
	return o.ApplyT(func(v DiscoveryOccurrence) *SBOMStatus { return v.SbomStatus }).(SBOMStatusPtrOutput)
}

type DiscoveryOccurrencePtrOutput struct{ *pulumi.OutputState }

func (DiscoveryOccurrencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiscoveryOccurrence)(nil)).Elem()
}

func (o DiscoveryOccurrencePtrOutput) ToDiscoveryOccurrencePtrOutput() DiscoveryOccurrencePtrOutput {
	return o
}

func (o DiscoveryOccurrencePtrOutput) ToDiscoveryOccurrencePtrOutputWithContext(ctx context.Context) DiscoveryOccurrencePtrOutput {
	return o
}

func (o DiscoveryOccurrencePtrOutput) Elem() DiscoveryOccurrenceOutput {
	return o.ApplyT(func(v *DiscoveryOccurrence) DiscoveryOccurrence {
		if v != nil {
			return *v
		}
		var ret DiscoveryOccurrence
		return ret
	}).(DiscoveryOccurrenceOutput)
}

func (o DiscoveryOccurrencePtrOutput) AnalysisCompleted() AnalysisCompletedPtrOutput {
	return o.ApplyT(func(v *DiscoveryOccurrence) *AnalysisCompleted {
		if v == nil {
			return nil
		}
		return v.AnalysisCompleted
	}).(AnalysisCompletedPtrOutput)
}

// Indicates any errors encountered during analysis of a resource. There could be 0 or more of these errors.
func (o DiscoveryOccurrencePtrOutput) AnalysisError() StatusArrayOutput {
	return o.ApplyT(func(v *DiscoveryOccurrence) []Status {
		if v == nil {
			return nil
		}
		return v.AnalysisError
	}).(StatusArrayOutput)
}

// The status of discovery for the resource.
func (o DiscoveryOccurrencePtrOutput) AnalysisStatus() DiscoveryOccurrenceAnalysisStatusPtrOutput {
	return o.ApplyT(func(v *DiscoveryOccurrence) *DiscoveryOccurrenceAnalysisStatus {
		if v == nil {
			return nil
		}
		return v.AnalysisStatus
	}).(DiscoveryOccurrenceAnalysisStatusPtrOutput)
}

// When an error is encountered this will contain a LocalizedMessage under details to show to the user. The LocalizedMessage is output only and populated by the API.
func (o DiscoveryOccurrencePtrOutput) AnalysisStatusError() StatusPtrOutput {
	return o.ApplyT(func(v *DiscoveryOccurrence) *Status {
		if v == nil {
			return nil
		}
		return v.AnalysisStatusError
	}).(StatusPtrOutput)
}

// Whether the resource is continuously analyzed.
func (o DiscoveryOccurrencePtrOutput) ContinuousAnalysis() DiscoveryOccurrenceContinuousAnalysisPtrOutput {
	return o.ApplyT(func(v *DiscoveryOccurrence) *DiscoveryOccurrenceContinuousAnalysis {
		if v == nil {
			return nil
		}
		return v.ContinuousAnalysis
	}).(DiscoveryOccurrenceContinuousAnalysisPtrOutput)
}

// The CPE of the resource being scanned.
func (o DiscoveryOccurrencePtrOutput) Cpe() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiscoveryOccurrence) *string {
		if v == nil {
			return nil
		}
		return v.Cpe
	}).(pulumi.StringPtrOutput)
}

// The last time this resource was scanned.
func (o DiscoveryOccurrencePtrOutput) LastScanTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiscoveryOccurrence) *string {
		if v == nil {
			return nil
		}
		return v.LastScanTime
	}).(pulumi.StringPtrOutput)
}

// The status of an SBOM generation.
func (o DiscoveryOccurrencePtrOutput) SbomStatus() SBOMStatusPtrOutput {
	return o.ApplyT(func(v *DiscoveryOccurrence) *SBOMStatus {
		if v == nil {
			return nil
		}
		return v.SbomStatus
	}).(SBOMStatusPtrOutput)
}

// Provides information about the analysis status of a discovered resource.
type DiscoveryOccurrenceResponse struct {
	AnalysisCompleted AnalysisCompletedResponse `pulumi:"analysisCompleted"`
	// Indicates any errors encountered during analysis of a resource. There could be 0 or more of these errors.
	AnalysisError []StatusResponse `pulumi:"analysisError"`
	// The status of discovery for the resource.
	AnalysisStatus string `pulumi:"analysisStatus"`
	// When an error is encountered this will contain a LocalizedMessage under details to show to the user. The LocalizedMessage is output only and populated by the API.
	AnalysisStatusError StatusResponse `pulumi:"analysisStatusError"`
	// The time occurrences related to this discovery occurrence were archived.
	ArchiveTime string `pulumi:"archiveTime"`
	// Whether the resource is continuously analyzed.
	ContinuousAnalysis string `pulumi:"continuousAnalysis"`
	// The CPE of the resource being scanned.
	Cpe string `pulumi:"cpe"`
	// The last time this resource was scanned.
	LastScanTime string `pulumi:"lastScanTime"`
	// The status of an SBOM generation.
	SbomStatus SBOMStatusResponse `pulumi:"sbomStatus"`
}

// Provides information about the analysis status of a discovered resource.
type DiscoveryOccurrenceResponseOutput struct{ *pulumi.OutputState }

func (DiscoveryOccurrenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiscoveryOccurrenceResponse)(nil)).Elem()
}

func (o DiscoveryOccurrenceResponseOutput) ToDiscoveryOccurrenceResponseOutput() DiscoveryOccurrenceResponseOutput {
	return o
}

func (o DiscoveryOccurrenceResponseOutput) ToDiscoveryOccurrenceResponseOutputWithContext(ctx context.Context) DiscoveryOccurrenceResponseOutput {
	return o
}

func (o DiscoveryOccurrenceResponseOutput) AnalysisCompleted() AnalysisCompletedResponseOutput {
	return o.ApplyT(func(v DiscoveryOccurrenceResponse) AnalysisCompletedResponse { return v.AnalysisCompleted }).(AnalysisCompletedResponseOutput)
}

// Indicates any errors encountered during analysis of a resource. There could be 0 or more of these errors.
func (o DiscoveryOccurrenceResponseOutput) AnalysisError() StatusResponseArrayOutput {
	return o.ApplyT(func(v DiscoveryOccurrenceResponse) []StatusResponse { return v.AnalysisError }).(StatusResponseArrayOutput)
}

// The status of discovery for the resource.
func (o DiscoveryOccurrenceResponseOutput) AnalysisStatus() pulumi.StringOutput {
	return o.ApplyT(func(v DiscoveryOccurrenceResponse) string { return v.AnalysisStatus }).(pulumi.StringOutput)
}

// When an error is encountered this will contain a LocalizedMessage under details to show to the user. The LocalizedMessage is output only and populated by the API.
func (o DiscoveryOccurrenceResponseOutput) AnalysisStatusError() StatusResponseOutput {
	return o.ApplyT(func(v DiscoveryOccurrenceResponse) StatusResponse { return v.AnalysisStatusError }).(StatusResponseOutput)
}

// The time occurrences related to this discovery occurrence were archived.
func (o DiscoveryOccurrenceResponseOutput) ArchiveTime() pulumi.StringOutput {
	return o.ApplyT(func(v DiscoveryOccurrenceResponse) string { return v.ArchiveTime }).(pulumi.StringOutput)
}

// Whether the resource is continuously analyzed.
func (o DiscoveryOccurrenceResponseOutput) ContinuousAnalysis() pulumi.StringOutput {
	return o.ApplyT(func(v DiscoveryOccurrenceResponse) string { return v.ContinuousAnalysis }).(pulumi.StringOutput)
}

// The CPE of the resource being scanned.
func (o DiscoveryOccurrenceResponseOutput) Cpe() pulumi.StringOutput {
	return o.ApplyT(func(v DiscoveryOccurrenceResponse) string { return v.Cpe }).(pulumi.StringOutput)
}

// The last time this resource was scanned.
func (o DiscoveryOccurrenceResponseOutput) LastScanTime() pulumi.StringOutput {
	return o.ApplyT(func(v DiscoveryOccurrenceResponse) string { return v.LastScanTime }).(pulumi.StringOutput)
}

// The status of an SBOM generation.
func (o DiscoveryOccurrenceResponseOutput) SbomStatus() SBOMStatusResponseOutput {
	return o.ApplyT(func(v DiscoveryOccurrenceResponse) SBOMStatusResponse { return v.SbomStatus }).(SBOMStatusResponseOutput)
}

// This represents a particular channel of distribution for a given package. E.g., Debian's jessie-backports dpkg mirror.
type Distribution struct {
	// The CPU architecture for which packages in this distribution channel were built.
	Architecture *DistributionArchitecture `pulumi:"architecture"`
	// The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
	CpeUri string `pulumi:"cpeUri"`
	// The distribution channel-specific description of this package.
	Description *string `pulumi:"description"`
	// The latest available version of this package in this distribution channel.
	LatestVersion *Version `pulumi:"latestVersion"`
	// A freeform string denoting the maintainer of this package.
	Maintainer *string `pulumi:"maintainer"`
	// The distribution channel-specific homepage for this package.
	Url *string `pulumi:"url"`
}

// DistributionInput is an input type that accepts DistributionArgs and DistributionOutput values.
// You can construct a concrete instance of `DistributionInput` via:
//
//	DistributionArgs{...}
type DistributionInput interface {
	pulumi.Input

	ToDistributionOutput() DistributionOutput
	ToDistributionOutputWithContext(context.Context) DistributionOutput
}

// This represents a particular channel of distribution for a given package. E.g., Debian's jessie-backports dpkg mirror.
type DistributionArgs struct {
	// The CPU architecture for which packages in this distribution channel were built.
	Architecture DistributionArchitecturePtrInput `pulumi:"architecture"`
	// The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
	CpeUri pulumi.StringInput `pulumi:"cpeUri"`
	// The distribution channel-specific description of this package.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The latest available version of this package in this distribution channel.
	LatestVersion VersionPtrInput `pulumi:"latestVersion"`
	// A freeform string denoting the maintainer of this package.
	Maintainer pulumi.StringPtrInput `pulumi:"maintainer"`
	// The distribution channel-specific homepage for this package.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (DistributionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Distribution)(nil)).Elem()
}

func (i DistributionArgs) ToDistributionOutput() DistributionOutput {
	return i.ToDistributionOutputWithContext(context.Background())
}

func (i DistributionArgs) ToDistributionOutputWithContext(ctx context.Context) DistributionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionOutput)
}

// DistributionArrayInput is an input type that accepts DistributionArray and DistributionArrayOutput values.
// You can construct a concrete instance of `DistributionArrayInput` via:
//
//	DistributionArray{ DistributionArgs{...} }
type DistributionArrayInput interface {
	pulumi.Input

	ToDistributionArrayOutput() DistributionArrayOutput
	ToDistributionArrayOutputWithContext(context.Context) DistributionArrayOutput
}

type DistributionArray []DistributionInput

func (DistributionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Distribution)(nil)).Elem()
}

func (i DistributionArray) ToDistributionArrayOutput() DistributionArrayOutput {
	return i.ToDistributionArrayOutputWithContext(context.Background())
}

func (i DistributionArray) ToDistributionArrayOutputWithContext(ctx context.Context) DistributionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionArrayOutput)
}

// This represents a particular channel of distribution for a given package. E.g., Debian's jessie-backports dpkg mirror.
type DistributionOutput struct{ *pulumi.OutputState }

func (DistributionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Distribution)(nil)).Elem()
}

func (o DistributionOutput) ToDistributionOutput() DistributionOutput {
	return o
}

func (o DistributionOutput) ToDistributionOutputWithContext(ctx context.Context) DistributionOutput {
	return o
}

// The CPU architecture for which packages in this distribution channel were built.
func (o DistributionOutput) Architecture() DistributionArchitecturePtrOutput {
	return o.ApplyT(func(v Distribution) *DistributionArchitecture { return v.Architecture }).(DistributionArchitecturePtrOutput)
}

// The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
func (o DistributionOutput) CpeUri() pulumi.StringOutput {
	return o.ApplyT(func(v Distribution) string { return v.CpeUri }).(pulumi.StringOutput)
}

// The distribution channel-specific description of this package.
func (o DistributionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Distribution) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The latest available version of this package in this distribution channel.
func (o DistributionOutput) LatestVersion() VersionPtrOutput {
	return o.ApplyT(func(v Distribution) *Version { return v.LatestVersion }).(VersionPtrOutput)
}

// A freeform string denoting the maintainer of this package.
func (o DistributionOutput) Maintainer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Distribution) *string { return v.Maintainer }).(pulumi.StringPtrOutput)
}

// The distribution channel-specific homepage for this package.
func (o DistributionOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Distribution) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type DistributionArrayOutput struct{ *pulumi.OutputState }

func (DistributionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Distribution)(nil)).Elem()
}

func (o DistributionArrayOutput) ToDistributionArrayOutput() DistributionArrayOutput {
	return o
}

func (o DistributionArrayOutput) ToDistributionArrayOutputWithContext(ctx context.Context) DistributionArrayOutput {
	return o
}

func (o DistributionArrayOutput) Index(i pulumi.IntInput) DistributionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Distribution {
		return vs[0].([]Distribution)[vs[1].(int)]
	}).(DistributionOutput)
}

// This represents a particular channel of distribution for a given package. E.g., Debian's jessie-backports dpkg mirror.
type DistributionResponse struct {
	// The CPU architecture for which packages in this distribution channel were built.
	Architecture string `pulumi:"architecture"`
	// The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
	CpeUri string `pulumi:"cpeUri"`
	// The distribution channel-specific description of this package.
	Description string `pulumi:"description"`
	// The latest available version of this package in this distribution channel.
	LatestVersion VersionResponse `pulumi:"latestVersion"`
	// A freeform string denoting the maintainer of this package.
	Maintainer string `pulumi:"maintainer"`
	// The distribution channel-specific homepage for this package.
	Url string `pulumi:"url"`
}

// This represents a particular channel of distribution for a given package. E.g., Debian's jessie-backports dpkg mirror.
type DistributionResponseOutput struct{ *pulumi.OutputState }

func (DistributionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionResponse)(nil)).Elem()
}

func (o DistributionResponseOutput) ToDistributionResponseOutput() DistributionResponseOutput {
	return o
}

func (o DistributionResponseOutput) ToDistributionResponseOutputWithContext(ctx context.Context) DistributionResponseOutput {
	return o
}

// The CPU architecture for which packages in this distribution channel were built.
func (o DistributionResponseOutput) Architecture() pulumi.StringOutput {
	return o.ApplyT(func(v DistributionResponse) string { return v.Architecture }).(pulumi.StringOutput)
}

// The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
func (o DistributionResponseOutput) CpeUri() pulumi.StringOutput {
	return o.ApplyT(func(v DistributionResponse) string { return v.CpeUri }).(pulumi.StringOutput)
}

// The distribution channel-specific description of this package.
func (o DistributionResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v DistributionResponse) string { return v.Description }).(pulumi.StringOutput)
}

// The latest available version of this package in this distribution channel.
func (o DistributionResponseOutput) LatestVersion() VersionResponseOutput {
	return o.ApplyT(func(v DistributionResponse) VersionResponse { return v.LatestVersion }).(VersionResponseOutput)
}

// A freeform string denoting the maintainer of this package.
func (o DistributionResponseOutput) Maintainer() pulumi.StringOutput {
	return o.ApplyT(func(v DistributionResponse) string { return v.Maintainer }).(pulumi.StringOutput)
}

// The distribution channel-specific homepage for this package.
func (o DistributionResponseOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v DistributionResponse) string { return v.Url }).(pulumi.StringOutput)
}

type DistributionResponseArrayOutput struct{ *pulumi.OutputState }

func (DistributionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DistributionResponse)(nil)).Elem()
}

func (o DistributionResponseArrayOutput) ToDistributionResponseArrayOutput() DistributionResponseArrayOutput {
	return o
}

func (o DistributionResponseArrayOutput) ToDistributionResponseArrayOutputWithContext(ctx context.Context) DistributionResponseArrayOutput {
	return o
}

func (o DistributionResponseArrayOutput) Index(i pulumi.IntInput) DistributionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DistributionResponse {
		return vs[0].([]DistributionResponse)[vs[1].(int)]
	}).(DistributionResponseOutput)
}

// MUST match https://github.com/secure-systems-lab/dsse/blob/master/envelope.proto. An authenticated message of arbitrary type.
type Envelope struct {
	Payload     *string             `pulumi:"payload"`
	PayloadType *string             `pulumi:"payloadType"`
	Signatures  []EnvelopeSignature `pulumi:"signatures"`
}

// EnvelopeInput is an input type that accepts EnvelopeArgs and EnvelopeOutput values.
// You can construct a concrete instance of `EnvelopeInput` via:
//
//	EnvelopeArgs{...}
type EnvelopeInput interface {
	pulumi.Input

	ToEnvelopeOutput() EnvelopeOutput
	ToEnvelopeOutputWithContext(context.Context) EnvelopeOutput
}

// MUST match https://github.com/secure-systems-lab/dsse/blob/master/envelope.proto. An authenticated message of arbitrary type.
type EnvelopeArgs struct {
	Payload     pulumi.StringPtrInput       `pulumi:"payload"`
	PayloadType pulumi.StringPtrInput       `pulumi:"payloadType"`
	Signatures  EnvelopeSignatureArrayInput `pulumi:"signatures"`
}

func (EnvelopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Envelope)(nil)).Elem()
}

func (i EnvelopeArgs) ToEnvelopeOutput() EnvelopeOutput {
	return i.ToEnvelopeOutputWithContext(context.Background())
}

func (i EnvelopeArgs) ToEnvelopeOutputWithContext(ctx context.Context) EnvelopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvelopeOutput)
}

func (i EnvelopeArgs) ToEnvelopePtrOutput() EnvelopePtrOutput {
	return i.ToEnvelopePtrOutputWithContext(context.Background())
}

func (i EnvelopeArgs) ToEnvelopePtrOutputWithContext(ctx context.Context) EnvelopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvelopeOutput).ToEnvelopePtrOutputWithContext(ctx)
}

// EnvelopePtrInput is an input type that accepts EnvelopeArgs, EnvelopePtr and EnvelopePtrOutput values.
// You can construct a concrete instance of `EnvelopePtrInput` via:
//
//	        EnvelopeArgs{...}
//
//	or:
//
//	        nil
type EnvelopePtrInput interface {
	pulumi.Input

	ToEnvelopePtrOutput() EnvelopePtrOutput
	ToEnvelopePtrOutputWithContext(context.Context) EnvelopePtrOutput
}

type envelopePtrType EnvelopeArgs

func EnvelopePtr(v *EnvelopeArgs) EnvelopePtrInput {
	return (*envelopePtrType)(v)
}

func (*envelopePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Envelope)(nil)).Elem()
}

func (i *envelopePtrType) ToEnvelopePtrOutput() EnvelopePtrOutput {
	return i.ToEnvelopePtrOutputWithContext(context.Background())
}

func (i *envelopePtrType) ToEnvelopePtrOutputWithContext(ctx context.Context) EnvelopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvelopePtrOutput)
}

// MUST match https://github.com/secure-systems-lab/dsse/blob/master/envelope.proto. An authenticated message of arbitrary type.
type EnvelopeOutput struct{ *pulumi.OutputState }

func (EnvelopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Envelope)(nil)).Elem()
}

func (o EnvelopeOutput) ToEnvelopeOutput() EnvelopeOutput {
	return o
}

func (o EnvelopeOutput) ToEnvelopeOutputWithContext(ctx context.Context) EnvelopeOutput {
	return o
}

func (o EnvelopeOutput) ToEnvelopePtrOutput() EnvelopePtrOutput {
	return o.ToEnvelopePtrOutputWithContext(context.Background())
}

func (o EnvelopeOutput) ToEnvelopePtrOutputWithContext(ctx context.Context) EnvelopePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Envelope) *Envelope {
		return &v
	}).(EnvelopePtrOutput)
}

func (o EnvelopeOutput) Payload() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Envelope) *string { return v.Payload }).(pulumi.StringPtrOutput)
}

func (o EnvelopeOutput) PayloadType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Envelope) *string { return v.PayloadType }).(pulumi.StringPtrOutput)
}

func (o EnvelopeOutput) Signatures() EnvelopeSignatureArrayOutput {
	return o.ApplyT(func(v Envelope) []EnvelopeSignature { return v.Signatures }).(EnvelopeSignatureArrayOutput)
}

type EnvelopePtrOutput struct{ *pulumi.OutputState }

func (EnvelopePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Envelope)(nil)).Elem()
}

func (o EnvelopePtrOutput) ToEnvelopePtrOutput() EnvelopePtrOutput {
	return o
}

func (o EnvelopePtrOutput) ToEnvelopePtrOutputWithContext(ctx context.Context) EnvelopePtrOutput {
	return o
}

func (o EnvelopePtrOutput) Elem() EnvelopeOutput {
	return o.ApplyT(func(v *Envelope) Envelope {
		if v != nil {
			return *v
		}
		var ret Envelope
		return ret
	}).(EnvelopeOutput)
}

func (o EnvelopePtrOutput) Payload() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Envelope) *string {
		if v == nil {
			return nil
		}
		return v.Payload
	}).(pulumi.StringPtrOutput)
}

func (o EnvelopePtrOutput) PayloadType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Envelope) *string {
		if v == nil {
			return nil
		}
		return v.PayloadType
	}).(pulumi.StringPtrOutput)
}

func (o EnvelopePtrOutput) Signatures() EnvelopeSignatureArrayOutput {
	return o.ApplyT(func(v *Envelope) []EnvelopeSignature {
		if v == nil {
			return nil
		}
		return v.Signatures
	}).(EnvelopeSignatureArrayOutput)
}

// MUST match https://github.com/secure-systems-lab/dsse/blob/master/envelope.proto. An authenticated message of arbitrary type.
type EnvelopeResponse struct {
	Payload     string                      `pulumi:"payload"`
	PayloadType string                      `pulumi:"payloadType"`
	Signatures  []EnvelopeSignatureResponse `pulumi:"signatures"`
}

// MUST match https://github.com/secure-systems-lab/dsse/blob/master/envelope.proto. An authenticated message of arbitrary type.
type EnvelopeResponseOutput struct{ *pulumi.OutputState }

func (EnvelopeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvelopeResponse)(nil)).Elem()
}

func (o EnvelopeResponseOutput) ToEnvelopeResponseOutput() EnvelopeResponseOutput {
	return o
}

func (o EnvelopeResponseOutput) ToEnvelopeResponseOutputWithContext(ctx context.Context) EnvelopeResponseOutput {
	return o
}

func (o EnvelopeResponseOutput) Payload() pulumi.StringOutput {
	return o.ApplyT(func(v EnvelopeResponse) string { return v.Payload }).(pulumi.StringOutput)
}

func (o EnvelopeResponseOutput) PayloadType() pulumi.StringOutput {
	return o.ApplyT(func(v EnvelopeResponse) string { return v.PayloadType }).(pulumi.StringOutput)
}

func (o EnvelopeResponseOutput) Signatures() EnvelopeSignatureResponseArrayOutput {
	return o.ApplyT(func(v EnvelopeResponse) []EnvelopeSignatureResponse { return v.Signatures }).(EnvelopeSignatureResponseArrayOutput)
}

type EnvelopeSignature struct {
	Keyid *string `pulumi:"keyid"`
	Sig   *string `pulumi:"sig"`
}

// EnvelopeSignatureInput is an input type that accepts EnvelopeSignatureArgs and EnvelopeSignatureOutput values.
// You can construct a concrete instance of `EnvelopeSignatureInput` via:
//
//	EnvelopeSignatureArgs{...}
type EnvelopeSignatureInput interface {
	pulumi.Input

	ToEnvelopeSignatureOutput() EnvelopeSignatureOutput
	ToEnvelopeSignatureOutputWithContext(context.Context) EnvelopeSignatureOutput
}

type EnvelopeSignatureArgs struct {
	Keyid pulumi.StringPtrInput `pulumi:"keyid"`
	Sig   pulumi.StringPtrInput `pulumi:"sig"`
}

func (EnvelopeSignatureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvelopeSignature)(nil)).Elem()
}

func (i EnvelopeSignatureArgs) ToEnvelopeSignatureOutput() EnvelopeSignatureOutput {
	return i.ToEnvelopeSignatureOutputWithContext(context.Background())
}

func (i EnvelopeSignatureArgs) ToEnvelopeSignatureOutputWithContext(ctx context.Context) EnvelopeSignatureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvelopeSignatureOutput)
}

// EnvelopeSignatureArrayInput is an input type that accepts EnvelopeSignatureArray and EnvelopeSignatureArrayOutput values.
// You can construct a concrete instance of `EnvelopeSignatureArrayInput` via:
//
//	EnvelopeSignatureArray{ EnvelopeSignatureArgs{...} }
type EnvelopeSignatureArrayInput interface {
	pulumi.Input

	ToEnvelopeSignatureArrayOutput() EnvelopeSignatureArrayOutput
	ToEnvelopeSignatureArrayOutputWithContext(context.Context) EnvelopeSignatureArrayOutput
}

type EnvelopeSignatureArray []EnvelopeSignatureInput

func (EnvelopeSignatureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvelopeSignature)(nil)).Elem()
}

func (i EnvelopeSignatureArray) ToEnvelopeSignatureArrayOutput() EnvelopeSignatureArrayOutput {
	return i.ToEnvelopeSignatureArrayOutputWithContext(context.Background())
}

func (i EnvelopeSignatureArray) ToEnvelopeSignatureArrayOutputWithContext(ctx context.Context) EnvelopeSignatureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvelopeSignatureArrayOutput)
}

type EnvelopeSignatureOutput struct{ *pulumi.OutputState }

func (EnvelopeSignatureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvelopeSignature)(nil)).Elem()
}

func (o EnvelopeSignatureOutput) ToEnvelopeSignatureOutput() EnvelopeSignatureOutput {
	return o
}

func (o EnvelopeSignatureOutput) ToEnvelopeSignatureOutputWithContext(ctx context.Context) EnvelopeSignatureOutput {
	return o
}

func (o EnvelopeSignatureOutput) Keyid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvelopeSignature) *string { return v.Keyid }).(pulumi.StringPtrOutput)
}

func (o EnvelopeSignatureOutput) Sig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvelopeSignature) *string { return v.Sig }).(pulumi.StringPtrOutput)
}

type EnvelopeSignatureArrayOutput struct{ *pulumi.OutputState }

func (EnvelopeSignatureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvelopeSignature)(nil)).Elem()
}

func (o EnvelopeSignatureArrayOutput) ToEnvelopeSignatureArrayOutput() EnvelopeSignatureArrayOutput {
	return o
}

func (o EnvelopeSignatureArrayOutput) ToEnvelopeSignatureArrayOutputWithContext(ctx context.Context) EnvelopeSignatureArrayOutput {
	return o
}

func (o EnvelopeSignatureArrayOutput) Index(i pulumi.IntInput) EnvelopeSignatureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnvelopeSignature {
		return vs[0].([]EnvelopeSignature)[vs[1].(int)]
	}).(EnvelopeSignatureOutput)
}

type EnvelopeSignatureResponse struct {
	Keyid string `pulumi:"keyid"`
	Sig   string `pulumi:"sig"`
}

type EnvelopeSignatureResponseOutput struct{ *pulumi.OutputState }

func (EnvelopeSignatureResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvelopeSignatureResponse)(nil)).Elem()
}

func (o EnvelopeSignatureResponseOutput) ToEnvelopeSignatureResponseOutput() EnvelopeSignatureResponseOutput {
	return o
}

func (o EnvelopeSignatureResponseOutput) ToEnvelopeSignatureResponseOutputWithContext(ctx context.Context) EnvelopeSignatureResponseOutput {
	return o
}

func (o EnvelopeSignatureResponseOutput) Keyid() pulumi.StringOutput {
	return o.ApplyT(func(v EnvelopeSignatureResponse) string { return v.Keyid }).(pulumi.StringOutput)
}

func (o EnvelopeSignatureResponseOutput) Sig() pulumi.StringOutput {
	return o.ApplyT(func(v EnvelopeSignatureResponse) string { return v.Sig }).(pulumi.StringOutput)
}

type EnvelopeSignatureResponseArrayOutput struct{ *pulumi.OutputState }

func (EnvelopeSignatureResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvelopeSignatureResponse)(nil)).Elem()
}

func (o EnvelopeSignatureResponseArrayOutput) ToEnvelopeSignatureResponseArrayOutput() EnvelopeSignatureResponseArrayOutput {
	return o
}

func (o EnvelopeSignatureResponseArrayOutput) ToEnvelopeSignatureResponseArrayOutputWithContext(ctx context.Context) EnvelopeSignatureResponseArrayOutput {
	return o
}

func (o EnvelopeSignatureResponseArrayOutput) Index(i pulumi.IntInput) EnvelopeSignatureResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnvelopeSignatureResponse {
		return vs[0].([]EnvelopeSignatureResponse)[vs[1].(int)]
	}).(EnvelopeSignatureResponseOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//	ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//	        ExprArgs{...}
//
//	or:
//
//	        nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr {
		if v != nil {
			return *v
		}
		var ret Expr
		return ret
	}).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponse struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title string `pulumi:"title"`
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseOutput struct{ *pulumi.OutputState }

func (ExprResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (o ExprResponseOutput) ToExprResponseOutput() ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return o
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Title }).(pulumi.StringOutput)
}

// Container message for hashes of byte content of files, used in source messages to verify integrity of source input to the build.
type FileHashes struct {
	// Collection of file hashes.
	FileHash []Hash `pulumi:"fileHash"`
}

// FileHashesInput is an input type that accepts FileHashesArgs and FileHashesOutput values.
// You can construct a concrete instance of `FileHashesInput` via:
//
//	FileHashesArgs{...}
type FileHashesInput interface {
	pulumi.Input

	ToFileHashesOutput() FileHashesOutput
	ToFileHashesOutputWithContext(context.Context) FileHashesOutput
}

// Container message for hashes of byte content of files, used in source messages to verify integrity of source input to the build.
type FileHashesArgs struct {
	// Collection of file hashes.
	FileHash HashArrayInput `pulumi:"fileHash"`
}

func (FileHashesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileHashes)(nil)).Elem()
}

func (i FileHashesArgs) ToFileHashesOutput() FileHashesOutput {
	return i.ToFileHashesOutputWithContext(context.Background())
}

func (i FileHashesArgs) ToFileHashesOutputWithContext(ctx context.Context) FileHashesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileHashesOutput)
}

func (i FileHashesArgs) ToFileHashesPtrOutput() FileHashesPtrOutput {
	return i.ToFileHashesPtrOutputWithContext(context.Background())
}

func (i FileHashesArgs) ToFileHashesPtrOutputWithContext(ctx context.Context) FileHashesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileHashesOutput).ToFileHashesPtrOutputWithContext(ctx)
}

// FileHashesPtrInput is an input type that accepts FileHashesArgs, FileHashesPtr and FileHashesPtrOutput values.
// You can construct a concrete instance of `FileHashesPtrInput` via:
//
//	        FileHashesArgs{...}
//
//	or:
//
//	        nil
type FileHashesPtrInput interface {
	pulumi.Input

	ToFileHashesPtrOutput() FileHashesPtrOutput
	ToFileHashesPtrOutputWithContext(context.Context) FileHashesPtrOutput
}

type fileHashesPtrType FileHashesArgs

func FileHashesPtr(v *FileHashesArgs) FileHashesPtrInput {
	return (*fileHashesPtrType)(v)
}

func (*fileHashesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FileHashes)(nil)).Elem()
}

func (i *fileHashesPtrType) ToFileHashesPtrOutput() FileHashesPtrOutput {
	return i.ToFileHashesPtrOutputWithContext(context.Background())
}

func (i *fileHashesPtrType) ToFileHashesPtrOutputWithContext(ctx context.Context) FileHashesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileHashesPtrOutput)
}

// Container message for hashes of byte content of files, used in source messages to verify integrity of source input to the build.
type FileHashesOutput struct{ *pulumi.OutputState }

func (FileHashesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileHashes)(nil)).Elem()
}

func (o FileHashesOutput) ToFileHashesOutput() FileHashesOutput {
	return o
}

func (o FileHashesOutput) ToFileHashesOutputWithContext(ctx context.Context) FileHashesOutput {
	return o
}

func (o FileHashesOutput) ToFileHashesPtrOutput() FileHashesPtrOutput {
	return o.ToFileHashesPtrOutputWithContext(context.Background())
}

func (o FileHashesOutput) ToFileHashesPtrOutputWithContext(ctx context.Context) FileHashesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FileHashes) *FileHashes {
		return &v
	}).(FileHashesPtrOutput)
}

// Collection of file hashes.
func (o FileHashesOutput) FileHash() HashArrayOutput {
	return o.ApplyT(func(v FileHashes) []Hash { return v.FileHash }).(HashArrayOutput)
}

type FileHashesPtrOutput struct{ *pulumi.OutputState }

func (FileHashesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileHashes)(nil)).Elem()
}

func (o FileHashesPtrOutput) ToFileHashesPtrOutput() FileHashesPtrOutput {
	return o
}

func (o FileHashesPtrOutput) ToFileHashesPtrOutputWithContext(ctx context.Context) FileHashesPtrOutput {
	return o
}

func (o FileHashesPtrOutput) Elem() FileHashesOutput {
	return o.ApplyT(func(v *FileHashes) FileHashes {
		if v != nil {
			return *v
		}
		var ret FileHashes
		return ret
	}).(FileHashesOutput)
}

// Collection of file hashes.
func (o FileHashesPtrOutput) FileHash() HashArrayOutput {
	return o.ApplyT(func(v *FileHashes) []Hash {
		if v == nil {
			return nil
		}
		return v.FileHash
	}).(HashArrayOutput)
}

// Container message for hashes of byte content of files, used in source messages to verify integrity of source input to the build.
type FileHashesResponse struct {
	// Collection of file hashes.
	FileHash []HashResponse `pulumi:"fileHash"`
}

// Container message for hashes of byte content of files, used in source messages to verify integrity of source input to the build.
type FileHashesResponseOutput struct{ *pulumi.OutputState }

func (FileHashesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileHashesResponse)(nil)).Elem()
}

func (o FileHashesResponseOutput) ToFileHashesResponseOutput() FileHashesResponseOutput {
	return o
}

func (o FileHashesResponseOutput) ToFileHashesResponseOutputWithContext(ctx context.Context) FileHashesResponseOutput {
	return o
}

// Collection of file hashes.
func (o FileHashesResponseOutput) FileHash() HashResponseArrayOutput {
	return o.ApplyT(func(v FileHashesResponse) []HashResponse { return v.FileHash }).(HashResponseArrayOutput)
}

// A set of properties that uniquely identify a given Docker image.
type Fingerprint struct {
	// The layer ID of the final layer in the Docker image's v1 representation.
	V1Name string `pulumi:"v1Name"`
	// The ordered list of v2 blobs that represent a given image.
	V2Blob []string `pulumi:"v2Blob"`
}

// FingerprintInput is an input type that accepts FingerprintArgs and FingerprintOutput values.
// You can construct a concrete instance of `FingerprintInput` via:
//
//	FingerprintArgs{...}
type FingerprintInput interface {
	pulumi.Input

	ToFingerprintOutput() FingerprintOutput
	ToFingerprintOutputWithContext(context.Context) FingerprintOutput
}

// A set of properties that uniquely identify a given Docker image.
type FingerprintArgs struct {
	// The layer ID of the final layer in the Docker image's v1 representation.
	V1Name pulumi.StringInput `pulumi:"v1Name"`
	// The ordered list of v2 blobs that represent a given image.
	V2Blob pulumi.StringArrayInput `pulumi:"v2Blob"`
}

func (FingerprintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Fingerprint)(nil)).Elem()
}

func (i FingerprintArgs) ToFingerprintOutput() FingerprintOutput {
	return i.ToFingerprintOutputWithContext(context.Background())
}

func (i FingerprintArgs) ToFingerprintOutputWithContext(ctx context.Context) FingerprintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FingerprintOutput)
}

func (i FingerprintArgs) ToFingerprintPtrOutput() FingerprintPtrOutput {
	return i.ToFingerprintPtrOutputWithContext(context.Background())
}

func (i FingerprintArgs) ToFingerprintPtrOutputWithContext(ctx context.Context) FingerprintPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FingerprintOutput).ToFingerprintPtrOutputWithContext(ctx)
}

// FingerprintPtrInput is an input type that accepts FingerprintArgs, FingerprintPtr and FingerprintPtrOutput values.
// You can construct a concrete instance of `FingerprintPtrInput` via:
//
//	        FingerprintArgs{...}
//
//	or:
//
//	        nil
type FingerprintPtrInput interface {
	pulumi.Input

	ToFingerprintPtrOutput() FingerprintPtrOutput
	ToFingerprintPtrOutputWithContext(context.Context) FingerprintPtrOutput
}

type fingerprintPtrType FingerprintArgs

func FingerprintPtr(v *FingerprintArgs) FingerprintPtrInput {
	return (*fingerprintPtrType)(v)
}

func (*fingerprintPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Fingerprint)(nil)).Elem()
}

func (i *fingerprintPtrType) ToFingerprintPtrOutput() FingerprintPtrOutput {
	return i.ToFingerprintPtrOutputWithContext(context.Background())
}

func (i *fingerprintPtrType) ToFingerprintPtrOutputWithContext(ctx context.Context) FingerprintPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FingerprintPtrOutput)
}

// A set of properties that uniquely identify a given Docker image.
type FingerprintOutput struct{ *pulumi.OutputState }

func (FingerprintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Fingerprint)(nil)).Elem()
}

func (o FingerprintOutput) ToFingerprintOutput() FingerprintOutput {
	return o
}

func (o FingerprintOutput) ToFingerprintOutputWithContext(ctx context.Context) FingerprintOutput {
	return o
}

func (o FingerprintOutput) ToFingerprintPtrOutput() FingerprintPtrOutput {
	return o.ToFingerprintPtrOutputWithContext(context.Background())
}

func (o FingerprintOutput) ToFingerprintPtrOutputWithContext(ctx context.Context) FingerprintPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Fingerprint) *Fingerprint {
		return &v
	}).(FingerprintPtrOutput)
}

// The layer ID of the final layer in the Docker image's v1 representation.
func (o FingerprintOutput) V1Name() pulumi.StringOutput {
	return o.ApplyT(func(v Fingerprint) string { return v.V1Name }).(pulumi.StringOutput)
}

// The ordered list of v2 blobs that represent a given image.
func (o FingerprintOutput) V2Blob() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Fingerprint) []string { return v.V2Blob }).(pulumi.StringArrayOutput)
}

type FingerprintPtrOutput struct{ *pulumi.OutputState }

func (FingerprintPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Fingerprint)(nil)).Elem()
}

func (o FingerprintPtrOutput) ToFingerprintPtrOutput() FingerprintPtrOutput {
	return o
}

func (o FingerprintPtrOutput) ToFingerprintPtrOutputWithContext(ctx context.Context) FingerprintPtrOutput {
	return o
}

func (o FingerprintPtrOutput) Elem() FingerprintOutput {
	return o.ApplyT(func(v *Fingerprint) Fingerprint {
		if v != nil {
			return *v
		}
		var ret Fingerprint
		return ret
	}).(FingerprintOutput)
}

// The layer ID of the final layer in the Docker image's v1 representation.
func (o FingerprintPtrOutput) V1Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Fingerprint) *string {
		if v == nil {
			return nil
		}
		return &v.V1Name
	}).(pulumi.StringPtrOutput)
}

// The ordered list of v2 blobs that represent a given image.
func (o FingerprintPtrOutput) V2Blob() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Fingerprint) []string {
		if v == nil {
			return nil
		}
		return v.V2Blob
	}).(pulumi.StringArrayOutput)
}

// A set of properties that uniquely identify a given Docker image.
type FingerprintResponse struct {
	// The layer ID of the final layer in the Docker image's v1 representation.
	V1Name string `pulumi:"v1Name"`
	// The ordered list of v2 blobs that represent a given image.
	V2Blob []string `pulumi:"v2Blob"`
	// The name of the image's v2 blobs computed via: [bottom] := v2_blobbottom := sha256(v2_blob[N] + " " + v2_name[N+1]) Only the name of the final blob is kept.
	V2Name string `pulumi:"v2Name"`
}

// A set of properties that uniquely identify a given Docker image.
type FingerprintResponseOutput struct{ *pulumi.OutputState }

func (FingerprintResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FingerprintResponse)(nil)).Elem()
}

func (o FingerprintResponseOutput) ToFingerprintResponseOutput() FingerprintResponseOutput {
	return o
}

func (o FingerprintResponseOutput) ToFingerprintResponseOutputWithContext(ctx context.Context) FingerprintResponseOutput {
	return o
}

// The layer ID of the final layer in the Docker image's v1 representation.
func (o FingerprintResponseOutput) V1Name() pulumi.StringOutput {
	return o.ApplyT(func(v FingerprintResponse) string { return v.V1Name }).(pulumi.StringOutput)
}

// The ordered list of v2 blobs that represent a given image.
func (o FingerprintResponseOutput) V2Blob() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FingerprintResponse) []string { return v.V2Blob }).(pulumi.StringArrayOutput)
}

// The name of the image's v2 blobs computed via: [bottom] := v2_blobbottom := sha256(v2_blob[N] + " " + v2_name[N+1]) Only the name of the final blob is kept.
func (o FingerprintResponseOutput) V2Name() pulumi.StringOutput {
	return o.ApplyT(func(v FingerprintResponse) string { return v.V2Name }).(pulumi.StringOutput)
}

// A SourceContext referring to a Gerrit project.
type GerritSourceContext struct {
	// An alias, which may be a branch or tag.
	AliasContext *AliasContext `pulumi:"aliasContext"`
	// The full project name within the host. Projects may be nested, so "project/subproject" is a valid project name. The "repo name" is the hostURI/project.
	GerritProject *string `pulumi:"gerritProject"`
	// The URI of a running Gerrit instance.
	HostUri *string `pulumi:"hostUri"`
	// A revision (commit) ID.
	RevisionId *string `pulumi:"revisionId"`
}

// GerritSourceContextInput is an input type that accepts GerritSourceContextArgs and GerritSourceContextOutput values.
// You can construct a concrete instance of `GerritSourceContextInput` via:
//
//	GerritSourceContextArgs{...}
type GerritSourceContextInput interface {
	pulumi.Input

	ToGerritSourceContextOutput() GerritSourceContextOutput
	ToGerritSourceContextOutputWithContext(context.Context) GerritSourceContextOutput
}

// A SourceContext referring to a Gerrit project.
type GerritSourceContextArgs struct {
	// An alias, which may be a branch or tag.
	AliasContext AliasContextPtrInput `pulumi:"aliasContext"`
	// The full project name within the host. Projects may be nested, so "project/subproject" is a valid project name. The "repo name" is the hostURI/project.
	GerritProject pulumi.StringPtrInput `pulumi:"gerritProject"`
	// The URI of a running Gerrit instance.
	HostUri pulumi.StringPtrInput `pulumi:"hostUri"`
	// A revision (commit) ID.
	RevisionId pulumi.StringPtrInput `pulumi:"revisionId"`
}

func (GerritSourceContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GerritSourceContext)(nil)).Elem()
}

func (i GerritSourceContextArgs) ToGerritSourceContextOutput() GerritSourceContextOutput {
	return i.ToGerritSourceContextOutputWithContext(context.Background())
}

func (i GerritSourceContextArgs) ToGerritSourceContextOutputWithContext(ctx context.Context) GerritSourceContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GerritSourceContextOutput)
}

func (i GerritSourceContextArgs) ToGerritSourceContextPtrOutput() GerritSourceContextPtrOutput {
	return i.ToGerritSourceContextPtrOutputWithContext(context.Background())
}

func (i GerritSourceContextArgs) ToGerritSourceContextPtrOutputWithContext(ctx context.Context) GerritSourceContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GerritSourceContextOutput).ToGerritSourceContextPtrOutputWithContext(ctx)
}

// GerritSourceContextPtrInput is an input type that accepts GerritSourceContextArgs, GerritSourceContextPtr and GerritSourceContextPtrOutput values.
// You can construct a concrete instance of `GerritSourceContextPtrInput` via:
//
//	        GerritSourceContextArgs{...}
//
//	or:
//
//	        nil
type GerritSourceContextPtrInput interface {
	pulumi.Input

	ToGerritSourceContextPtrOutput() GerritSourceContextPtrOutput
	ToGerritSourceContextPtrOutputWithContext(context.Context) GerritSourceContextPtrOutput
}

type gerritSourceContextPtrType GerritSourceContextArgs

func GerritSourceContextPtr(v *GerritSourceContextArgs) GerritSourceContextPtrInput {
	return (*gerritSourceContextPtrType)(v)
}

func (*gerritSourceContextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GerritSourceContext)(nil)).Elem()
}

func (i *gerritSourceContextPtrType) ToGerritSourceContextPtrOutput() GerritSourceContextPtrOutput {
	return i.ToGerritSourceContextPtrOutputWithContext(context.Background())
}

func (i *gerritSourceContextPtrType) ToGerritSourceContextPtrOutputWithContext(ctx context.Context) GerritSourceContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GerritSourceContextPtrOutput)
}

// A SourceContext referring to a Gerrit project.
type GerritSourceContextOutput struct{ *pulumi.OutputState }

func (GerritSourceContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GerritSourceContext)(nil)).Elem()
}

func (o GerritSourceContextOutput) ToGerritSourceContextOutput() GerritSourceContextOutput {
	return o
}

func (o GerritSourceContextOutput) ToGerritSourceContextOutputWithContext(ctx context.Context) GerritSourceContextOutput {
	return o
}

func (o GerritSourceContextOutput) ToGerritSourceContextPtrOutput() GerritSourceContextPtrOutput {
	return o.ToGerritSourceContextPtrOutputWithContext(context.Background())
}

func (o GerritSourceContextOutput) ToGerritSourceContextPtrOutputWithContext(ctx context.Context) GerritSourceContextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GerritSourceContext) *GerritSourceContext {
		return &v
	}).(GerritSourceContextPtrOutput)
}

// An alias, which may be a branch or tag.
func (o GerritSourceContextOutput) AliasContext() AliasContextPtrOutput {
	return o.ApplyT(func(v GerritSourceContext) *AliasContext { return v.AliasContext }).(AliasContextPtrOutput)
}

// The full project name within the host. Projects may be nested, so "project/subproject" is a valid project name. The "repo name" is the hostURI/project.
func (o GerritSourceContextOutput) GerritProject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GerritSourceContext) *string { return v.GerritProject }).(pulumi.StringPtrOutput)
}

// The URI of a running Gerrit instance.
func (o GerritSourceContextOutput) HostUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GerritSourceContext) *string { return v.HostUri }).(pulumi.StringPtrOutput)
}

// A revision (commit) ID.
func (o GerritSourceContextOutput) RevisionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GerritSourceContext) *string { return v.RevisionId }).(pulumi.StringPtrOutput)
}

type GerritSourceContextPtrOutput struct{ *pulumi.OutputState }

func (GerritSourceContextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GerritSourceContext)(nil)).Elem()
}

func (o GerritSourceContextPtrOutput) ToGerritSourceContextPtrOutput() GerritSourceContextPtrOutput {
	return o
}

func (o GerritSourceContextPtrOutput) ToGerritSourceContextPtrOutputWithContext(ctx context.Context) GerritSourceContextPtrOutput {
	return o
}

func (o GerritSourceContextPtrOutput) Elem() GerritSourceContextOutput {
	return o.ApplyT(func(v *GerritSourceContext) GerritSourceContext {
		if v != nil {
			return *v
		}
		var ret GerritSourceContext
		return ret
	}).(GerritSourceContextOutput)
}

// An alias, which may be a branch or tag.
func (o GerritSourceContextPtrOutput) AliasContext() AliasContextPtrOutput {
	return o.ApplyT(func(v *GerritSourceContext) *AliasContext {
		if v == nil {
			return nil
		}
		return v.AliasContext
	}).(AliasContextPtrOutput)
}

// The full project name within the host. Projects may be nested, so "project/subproject" is a valid project name. The "repo name" is the hostURI/project.
func (o GerritSourceContextPtrOutput) GerritProject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GerritSourceContext) *string {
		if v == nil {
			return nil
		}
		return v.GerritProject
	}).(pulumi.StringPtrOutput)
}

// The URI of a running Gerrit instance.
func (o GerritSourceContextPtrOutput) HostUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GerritSourceContext) *string {
		if v == nil {
			return nil
		}
		return v.HostUri
	}).(pulumi.StringPtrOutput)
}

// A revision (commit) ID.
func (o GerritSourceContextPtrOutput) RevisionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GerritSourceContext) *string {
		if v == nil {
			return nil
		}
		return v.RevisionId
	}).(pulumi.StringPtrOutput)
}

// A SourceContext referring to a Gerrit project.
type GerritSourceContextResponse struct {
	// An alias, which may be a branch or tag.
	AliasContext AliasContextResponse `pulumi:"aliasContext"`
	// The full project name within the host. Projects may be nested, so "project/subproject" is a valid project name. The "repo name" is the hostURI/project.
	GerritProject string `pulumi:"gerritProject"`
	// The URI of a running Gerrit instance.
	HostUri string `pulumi:"hostUri"`
	// A revision (commit) ID.
	RevisionId string `pulumi:"revisionId"`
}

// A SourceContext referring to a Gerrit project.
type GerritSourceContextResponseOutput struct{ *pulumi.OutputState }

func (GerritSourceContextResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GerritSourceContextResponse)(nil)).Elem()
}

func (o GerritSourceContextResponseOutput) ToGerritSourceContextResponseOutput() GerritSourceContextResponseOutput {
	return o
}

func (o GerritSourceContextResponseOutput) ToGerritSourceContextResponseOutputWithContext(ctx context.Context) GerritSourceContextResponseOutput {
	return o
}

// An alias, which may be a branch or tag.
func (o GerritSourceContextResponseOutput) AliasContext() AliasContextResponseOutput {
	return o.ApplyT(func(v GerritSourceContextResponse) AliasContextResponse { return v.AliasContext }).(AliasContextResponseOutput)
}

// The full project name within the host. Projects may be nested, so "project/subproject" is a valid project name. The "repo name" is the hostURI/project.
func (o GerritSourceContextResponseOutput) GerritProject() pulumi.StringOutput {
	return o.ApplyT(func(v GerritSourceContextResponse) string { return v.GerritProject }).(pulumi.StringOutput)
}

// The URI of a running Gerrit instance.
func (o GerritSourceContextResponseOutput) HostUri() pulumi.StringOutput {
	return o.ApplyT(func(v GerritSourceContextResponse) string { return v.HostUri }).(pulumi.StringOutput)
}

// A revision (commit) ID.
func (o GerritSourceContextResponseOutput) RevisionId() pulumi.StringOutput {
	return o.ApplyT(func(v GerritSourceContextResponse) string { return v.RevisionId }).(pulumi.StringOutput)
}

// A GitSourceContext denotes a particular revision in a third party Git repository (e.g., GitHub).
type GitSourceContext struct {
	// Git commit hash.
	RevisionId *string `pulumi:"revisionId"`
	// Git repository URL.
	Url *string `pulumi:"url"`
}

// GitSourceContextInput is an input type that accepts GitSourceContextArgs and GitSourceContextOutput values.
// You can construct a concrete instance of `GitSourceContextInput` via:
//
//	GitSourceContextArgs{...}
type GitSourceContextInput interface {
	pulumi.Input

	ToGitSourceContextOutput() GitSourceContextOutput
	ToGitSourceContextOutputWithContext(context.Context) GitSourceContextOutput
}

// A GitSourceContext denotes a particular revision in a third party Git repository (e.g., GitHub).
type GitSourceContextArgs struct {
	// Git commit hash.
	RevisionId pulumi.StringPtrInput `pulumi:"revisionId"`
	// Git repository URL.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (GitSourceContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitSourceContext)(nil)).Elem()
}

func (i GitSourceContextArgs) ToGitSourceContextOutput() GitSourceContextOutput {
	return i.ToGitSourceContextOutputWithContext(context.Background())
}

func (i GitSourceContextArgs) ToGitSourceContextOutputWithContext(ctx context.Context) GitSourceContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitSourceContextOutput)
}

func (i GitSourceContextArgs) ToGitSourceContextPtrOutput() GitSourceContextPtrOutput {
	return i.ToGitSourceContextPtrOutputWithContext(context.Background())
}

func (i GitSourceContextArgs) ToGitSourceContextPtrOutputWithContext(ctx context.Context) GitSourceContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitSourceContextOutput).ToGitSourceContextPtrOutputWithContext(ctx)
}

// GitSourceContextPtrInput is an input type that accepts GitSourceContextArgs, GitSourceContextPtr and GitSourceContextPtrOutput values.
// You can construct a concrete instance of `GitSourceContextPtrInput` via:
//
//	        GitSourceContextArgs{...}
//
//	or:
//
//	        nil
type GitSourceContextPtrInput interface {
	pulumi.Input

	ToGitSourceContextPtrOutput() GitSourceContextPtrOutput
	ToGitSourceContextPtrOutputWithContext(context.Context) GitSourceContextPtrOutput
}

type gitSourceContextPtrType GitSourceContextArgs

func GitSourceContextPtr(v *GitSourceContextArgs) GitSourceContextPtrInput {
	return (*gitSourceContextPtrType)(v)
}

func (*gitSourceContextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitSourceContext)(nil)).Elem()
}

func (i *gitSourceContextPtrType) ToGitSourceContextPtrOutput() GitSourceContextPtrOutput {
	return i.ToGitSourceContextPtrOutputWithContext(context.Background())
}

func (i *gitSourceContextPtrType) ToGitSourceContextPtrOutputWithContext(ctx context.Context) GitSourceContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitSourceContextPtrOutput)
}

// A GitSourceContext denotes a particular revision in a third party Git repository (e.g., GitHub).
type GitSourceContextOutput struct{ *pulumi.OutputState }

func (GitSourceContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitSourceContext)(nil)).Elem()
}

func (o GitSourceContextOutput) ToGitSourceContextOutput() GitSourceContextOutput {
	return o
}

func (o GitSourceContextOutput) ToGitSourceContextOutputWithContext(ctx context.Context) GitSourceContextOutput {
	return o
}

func (o GitSourceContextOutput) ToGitSourceContextPtrOutput() GitSourceContextPtrOutput {
	return o.ToGitSourceContextPtrOutputWithContext(context.Background())
}

func (o GitSourceContextOutput) ToGitSourceContextPtrOutputWithContext(ctx context.Context) GitSourceContextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitSourceContext) *GitSourceContext {
		return &v
	}).(GitSourceContextPtrOutput)
}

// Git commit hash.
func (o GitSourceContextOutput) RevisionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitSourceContext) *string { return v.RevisionId }).(pulumi.StringPtrOutput)
}

// Git repository URL.
func (o GitSourceContextOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitSourceContext) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type GitSourceContextPtrOutput struct{ *pulumi.OutputState }

func (GitSourceContextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitSourceContext)(nil)).Elem()
}

func (o GitSourceContextPtrOutput) ToGitSourceContextPtrOutput() GitSourceContextPtrOutput {
	return o
}

func (o GitSourceContextPtrOutput) ToGitSourceContextPtrOutputWithContext(ctx context.Context) GitSourceContextPtrOutput {
	return o
}

func (o GitSourceContextPtrOutput) Elem() GitSourceContextOutput {
	return o.ApplyT(func(v *GitSourceContext) GitSourceContext {
		if v != nil {
			return *v
		}
		var ret GitSourceContext
		return ret
	}).(GitSourceContextOutput)
}

// Git commit hash.
func (o GitSourceContextPtrOutput) RevisionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitSourceContext) *string {
		if v == nil {
			return nil
		}
		return v.RevisionId
	}).(pulumi.StringPtrOutput)
}

// Git repository URL.
func (o GitSourceContextPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitSourceContext) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// A GitSourceContext denotes a particular revision in a third party Git repository (e.g., GitHub).
type GitSourceContextResponse struct {
	// Git commit hash.
	RevisionId string `pulumi:"revisionId"`
	// Git repository URL.
	Url string `pulumi:"url"`
}

// A GitSourceContext denotes a particular revision in a third party Git repository (e.g., GitHub).
type GitSourceContextResponseOutput struct{ *pulumi.OutputState }

func (GitSourceContextResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitSourceContextResponse)(nil)).Elem()
}

func (o GitSourceContextResponseOutput) ToGitSourceContextResponseOutput() GitSourceContextResponseOutput {
	return o
}

func (o GitSourceContextResponseOutput) ToGitSourceContextResponseOutputWithContext(ctx context.Context) GitSourceContextResponseOutput {
	return o
}

// Git commit hash.
func (o GitSourceContextResponseOutput) RevisionId() pulumi.StringOutput {
	return o.ApplyT(func(v GitSourceContextResponse) string { return v.RevisionId }).(pulumi.StringOutput)
}

// Git repository URL.
func (o GitSourceContextResponseOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v GitSourceContextResponse) string { return v.Url }).(pulumi.StringOutput)
}

// Indicates the location at which a package was found.
type GrafeasV1FileLocation struct {
	// For jars that are contained inside .war files, this filepath can indicate the path to war file combined with the path to jar file.
	FilePath *string `pulumi:"filePath"`
}

// GrafeasV1FileLocationInput is an input type that accepts GrafeasV1FileLocationArgs and GrafeasV1FileLocationOutput values.
// You can construct a concrete instance of `GrafeasV1FileLocationInput` via:
//
//	GrafeasV1FileLocationArgs{...}
type GrafeasV1FileLocationInput interface {
	pulumi.Input

	ToGrafeasV1FileLocationOutput() GrafeasV1FileLocationOutput
	ToGrafeasV1FileLocationOutputWithContext(context.Context) GrafeasV1FileLocationOutput
}

// Indicates the location at which a package was found.
type GrafeasV1FileLocationArgs struct {
	// For jars that are contained inside .war files, this filepath can indicate the path to war file combined with the path to jar file.
	FilePath pulumi.StringPtrInput `pulumi:"filePath"`
}

func (GrafeasV1FileLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1FileLocation)(nil)).Elem()
}

func (i GrafeasV1FileLocationArgs) ToGrafeasV1FileLocationOutput() GrafeasV1FileLocationOutput {
	return i.ToGrafeasV1FileLocationOutputWithContext(context.Background())
}

func (i GrafeasV1FileLocationArgs) ToGrafeasV1FileLocationOutputWithContext(ctx context.Context) GrafeasV1FileLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1FileLocationOutput)
}

// GrafeasV1FileLocationArrayInput is an input type that accepts GrafeasV1FileLocationArray and GrafeasV1FileLocationArrayOutput values.
// You can construct a concrete instance of `GrafeasV1FileLocationArrayInput` via:
//
//	GrafeasV1FileLocationArray{ GrafeasV1FileLocationArgs{...} }
type GrafeasV1FileLocationArrayInput interface {
	pulumi.Input

	ToGrafeasV1FileLocationArrayOutput() GrafeasV1FileLocationArrayOutput
	ToGrafeasV1FileLocationArrayOutputWithContext(context.Context) GrafeasV1FileLocationArrayOutput
}

type GrafeasV1FileLocationArray []GrafeasV1FileLocationInput

func (GrafeasV1FileLocationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GrafeasV1FileLocation)(nil)).Elem()
}

func (i GrafeasV1FileLocationArray) ToGrafeasV1FileLocationArrayOutput() GrafeasV1FileLocationArrayOutput {
	return i.ToGrafeasV1FileLocationArrayOutputWithContext(context.Background())
}

func (i GrafeasV1FileLocationArray) ToGrafeasV1FileLocationArrayOutputWithContext(ctx context.Context) GrafeasV1FileLocationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1FileLocationArrayOutput)
}

// Indicates the location at which a package was found.
type GrafeasV1FileLocationOutput struct{ *pulumi.OutputState }

func (GrafeasV1FileLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1FileLocation)(nil)).Elem()
}

func (o GrafeasV1FileLocationOutput) ToGrafeasV1FileLocationOutput() GrafeasV1FileLocationOutput {
	return o
}

func (o GrafeasV1FileLocationOutput) ToGrafeasV1FileLocationOutputWithContext(ctx context.Context) GrafeasV1FileLocationOutput {
	return o
}

// For jars that are contained inside .war files, this filepath can indicate the path to war file combined with the path to jar file.
func (o GrafeasV1FileLocationOutput) FilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GrafeasV1FileLocation) *string { return v.FilePath }).(pulumi.StringPtrOutput)
}

type GrafeasV1FileLocationArrayOutput struct{ *pulumi.OutputState }

func (GrafeasV1FileLocationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GrafeasV1FileLocation)(nil)).Elem()
}

func (o GrafeasV1FileLocationArrayOutput) ToGrafeasV1FileLocationArrayOutput() GrafeasV1FileLocationArrayOutput {
	return o
}

func (o GrafeasV1FileLocationArrayOutput) ToGrafeasV1FileLocationArrayOutputWithContext(ctx context.Context) GrafeasV1FileLocationArrayOutput {
	return o
}

func (o GrafeasV1FileLocationArrayOutput) Index(i pulumi.IntInput) GrafeasV1FileLocationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GrafeasV1FileLocation {
		return vs[0].([]GrafeasV1FileLocation)[vs[1].(int)]
	}).(GrafeasV1FileLocationOutput)
}

// Indicates the location at which a package was found.
type GrafeasV1FileLocationResponse struct {
	// For jars that are contained inside .war files, this filepath can indicate the path to war file combined with the path to jar file.
	FilePath string `pulumi:"filePath"`
}

// Indicates the location at which a package was found.
type GrafeasV1FileLocationResponseOutput struct{ *pulumi.OutputState }

func (GrafeasV1FileLocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1FileLocationResponse)(nil)).Elem()
}

func (o GrafeasV1FileLocationResponseOutput) ToGrafeasV1FileLocationResponseOutput() GrafeasV1FileLocationResponseOutput {
	return o
}

func (o GrafeasV1FileLocationResponseOutput) ToGrafeasV1FileLocationResponseOutputWithContext(ctx context.Context) GrafeasV1FileLocationResponseOutput {
	return o
}

// For jars that are contained inside .war files, this filepath can indicate the path to war file combined with the path to jar file.
func (o GrafeasV1FileLocationResponseOutput) FilePath() pulumi.StringOutput {
	return o.ApplyT(func(v GrafeasV1FileLocationResponse) string { return v.FilePath }).(pulumi.StringOutput)
}

type GrafeasV1FileLocationResponseArrayOutput struct{ *pulumi.OutputState }

func (GrafeasV1FileLocationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GrafeasV1FileLocationResponse)(nil)).Elem()
}

func (o GrafeasV1FileLocationResponseArrayOutput) ToGrafeasV1FileLocationResponseArrayOutput() GrafeasV1FileLocationResponseArrayOutput {
	return o
}

func (o GrafeasV1FileLocationResponseArrayOutput) ToGrafeasV1FileLocationResponseArrayOutputWithContext(ctx context.Context) GrafeasV1FileLocationResponseArrayOutput {
	return o
}

func (o GrafeasV1FileLocationResponseArrayOutput) Index(i pulumi.IntInput) GrafeasV1FileLocationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GrafeasV1FileLocationResponse {
		return vs[0].([]GrafeasV1FileLocationResponse)[vs[1].(int)]
	}).(GrafeasV1FileLocationResponseOutput)
}

// Identifies the entity that executed the recipe, which is trusted to have correctly performed the operation and populated this provenance.
type GrafeasV1SlsaProvenanceZeroTwoSlsaBuilder struct {
	Id *string `pulumi:"id"`
}

// GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderInput is an input type that accepts GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderArgs and GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderOutput values.
// You can construct a concrete instance of `GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderInput` via:
//
//	GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderArgs{...}
type GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderInput interface {
	pulumi.Input

	ToGrafeasV1SlsaProvenanceZeroTwoSlsaBuilderOutput() GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderOutput
	ToGrafeasV1SlsaProvenanceZeroTwoSlsaBuilderOutputWithContext(context.Context) GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderOutput
}

// Identifies the entity that executed the recipe, which is trusted to have correctly performed the operation and populated this provenance.
type GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderArgs struct {
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1SlsaProvenanceZeroTwoSlsaBuilder)(nil)).Elem()
}

func (i GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderArgs) ToGrafeasV1SlsaProvenanceZeroTwoSlsaBuilderOutput() GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderOutput {
	return i.ToGrafeasV1SlsaProvenanceZeroTwoSlsaBuilderOutputWithContext(context.Background())
}

func (i GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderArgs) ToGrafeasV1SlsaProvenanceZeroTwoSlsaBuilderOutputWithContext(ctx context.Context) GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderOutput)
}

func (i GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderArgs) ToGrafeasV1SlsaProvenanceZeroTwoSlsaBuilderPtrOutput() GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderPtrOutput {
	return i.ToGrafeasV1SlsaProvenanceZeroTwoSlsaBuilderPtrOutputWithContext(context.Background())
}

func (i GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderArgs) ToGrafeasV1SlsaProvenanceZeroTwoSlsaBuilderPtrOutputWithContext(ctx context.Context) GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderOutput).ToGrafeasV1SlsaProvenanceZeroTwoSlsaBuilderPtrOutputWithContext(ctx)
}

// GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderPtrInput is an input type that accepts GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderArgs, GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderPtr and GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderPtrOutput values.
// You can construct a concrete instance of `GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderPtrInput` via:
//
//	        GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderArgs{...}
//
//	or:
//
//	        nil
type GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderPtrInput interface {
	pulumi.Input

	ToGrafeasV1SlsaProvenanceZeroTwoSlsaBuilderPtrOutput() GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderPtrOutput
	ToGrafeasV1SlsaProvenanceZeroTwoSlsaBuilderPtrOutputWithContext(context.Context) GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderPtrOutput
}

type grafeasV1SlsaProvenanceZeroTwoSlsaBuilderPtrType GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderArgs

func GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderPtr(v *GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderArgs) GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderPtrInput {
	return (*grafeasV1SlsaProvenanceZeroTwoSlsaBuilderPtrType)(v)
}

func (*grafeasV1SlsaProvenanceZeroTwoSlsaBuilderPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GrafeasV1SlsaProvenanceZeroTwoSlsaBuilder)(nil)).Elem()
}

func (i *grafeasV1SlsaProvenanceZeroTwoSlsaBuilderPtrType) ToGrafeasV1SlsaProvenanceZeroTwoSlsaBuilderPtrOutput() GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderPtrOutput {
	return i.ToGrafeasV1SlsaProvenanceZeroTwoSlsaBuilderPtrOutputWithContext(context.Background())
}

func (i *grafeasV1SlsaProvenanceZeroTwoSlsaBuilderPtrType) ToGrafeasV1SlsaProvenanceZeroTwoSlsaBuilderPtrOutputWithContext(ctx context.Context) GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderPtrOutput)
}

// Identifies the entity that executed the recipe, which is trusted to have correctly performed the operation and populated this provenance.
type GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderOutput struct{ *pulumi.OutputState }

func (GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1SlsaProvenanceZeroTwoSlsaBuilder)(nil)).Elem()
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderOutput) ToGrafeasV1SlsaProvenanceZeroTwoSlsaBuilderOutput() GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderOutput {
	return o
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderOutput) ToGrafeasV1SlsaProvenanceZeroTwoSlsaBuilderOutputWithContext(ctx context.Context) GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderOutput {
	return o
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderOutput) ToGrafeasV1SlsaProvenanceZeroTwoSlsaBuilderPtrOutput() GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderPtrOutput {
	return o.ToGrafeasV1SlsaProvenanceZeroTwoSlsaBuilderPtrOutputWithContext(context.Background())
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderOutput) ToGrafeasV1SlsaProvenanceZeroTwoSlsaBuilderPtrOutputWithContext(ctx context.Context) GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GrafeasV1SlsaProvenanceZeroTwoSlsaBuilder) *GrafeasV1SlsaProvenanceZeroTwoSlsaBuilder {
		return &v
	}).(GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderPtrOutput)
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GrafeasV1SlsaProvenanceZeroTwoSlsaBuilder) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderPtrOutput struct{ *pulumi.OutputState }

func (GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GrafeasV1SlsaProvenanceZeroTwoSlsaBuilder)(nil)).Elem()
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderPtrOutput) ToGrafeasV1SlsaProvenanceZeroTwoSlsaBuilderPtrOutput() GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderPtrOutput {
	return o
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderPtrOutput) ToGrafeasV1SlsaProvenanceZeroTwoSlsaBuilderPtrOutputWithContext(ctx context.Context) GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderPtrOutput {
	return o
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderPtrOutput) Elem() GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderOutput {
	return o.ApplyT(func(v *GrafeasV1SlsaProvenanceZeroTwoSlsaBuilder) GrafeasV1SlsaProvenanceZeroTwoSlsaBuilder {
		if v != nil {
			return *v
		}
		var ret GrafeasV1SlsaProvenanceZeroTwoSlsaBuilder
		return ret
	}).(GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderOutput)
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GrafeasV1SlsaProvenanceZeroTwoSlsaBuilder) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Identifies the entity that executed the recipe, which is trusted to have correctly performed the operation and populated this provenance.
type GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderResponse struct {
}

// Identifies the entity that executed the recipe, which is trusted to have correctly performed the operation and populated this provenance.
type GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderResponseOutput struct{ *pulumi.OutputState }

func (GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderResponse)(nil)).Elem()
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderResponseOutput) ToGrafeasV1SlsaProvenanceZeroTwoSlsaBuilderResponseOutput() GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderResponseOutput {
	return o
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderResponseOutput) ToGrafeasV1SlsaProvenanceZeroTwoSlsaBuilderResponseOutputWithContext(ctx context.Context) GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderResponseOutput {
	return o
}

// Indicates that the builder claims certain fields in this message to be complete.
type GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness struct {
	Environment *bool `pulumi:"environment"`
	Materials   *bool `pulumi:"materials"`
	Parameters  *bool `pulumi:"parameters"`
}

// GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessInput is an input type that accepts GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessArgs and GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessOutput values.
// You can construct a concrete instance of `GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessInput` via:
//
//	GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessArgs{...}
type GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessInput interface {
	pulumi.Input

	ToGrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessOutput() GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessOutput
	ToGrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessOutputWithContext(context.Context) GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessOutput
}

// Indicates that the builder claims certain fields in this message to be complete.
type GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessArgs struct {
	Environment pulumi.BoolPtrInput `pulumi:"environment"`
	Materials   pulumi.BoolPtrInput `pulumi:"materials"`
	Parameters  pulumi.BoolPtrInput `pulumi:"parameters"`
}

func (GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness)(nil)).Elem()
}

func (i GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessArgs) ToGrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessOutput() GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessOutput {
	return i.ToGrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessOutputWithContext(context.Background())
}

func (i GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessArgs) ToGrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessOutputWithContext(ctx context.Context) GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessOutput)
}

func (i GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessArgs) ToGrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutput() GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutput {
	return i.ToGrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutputWithContext(context.Background())
}

func (i GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessArgs) ToGrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutputWithContext(ctx context.Context) GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessOutput).ToGrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutputWithContext(ctx)
}

// GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessPtrInput is an input type that accepts GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessArgs, GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessPtr and GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutput values.
// You can construct a concrete instance of `GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessPtrInput` via:
//
//	        GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessArgs{...}
//
//	or:
//
//	        nil
type GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessPtrInput interface {
	pulumi.Input

	ToGrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutput() GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutput
	ToGrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutputWithContext(context.Context) GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutput
}

type grafeasV1SlsaProvenanceZeroTwoSlsaCompletenessPtrType GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessArgs

func GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessPtr(v *GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessArgs) GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessPtrInput {
	return (*grafeasV1SlsaProvenanceZeroTwoSlsaCompletenessPtrType)(v)
}

func (*grafeasV1SlsaProvenanceZeroTwoSlsaCompletenessPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness)(nil)).Elem()
}

func (i *grafeasV1SlsaProvenanceZeroTwoSlsaCompletenessPtrType) ToGrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutput() GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutput {
	return i.ToGrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutputWithContext(context.Background())
}

func (i *grafeasV1SlsaProvenanceZeroTwoSlsaCompletenessPtrType) ToGrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutputWithContext(ctx context.Context) GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutput)
}

// Indicates that the builder claims certain fields in this message to be complete.
type GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessOutput struct{ *pulumi.OutputState }

func (GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness)(nil)).Elem()
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessOutput) ToGrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessOutput() GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessOutput {
	return o
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessOutput) ToGrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessOutputWithContext(ctx context.Context) GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessOutput {
	return o
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessOutput) ToGrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutput() GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutput {
	return o.ToGrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutputWithContext(context.Background())
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessOutput) ToGrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutputWithContext(ctx context.Context) GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness) *GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness {
		return &v
	}).(GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutput)
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessOutput) Environment() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness) *bool { return v.Environment }).(pulumi.BoolPtrOutput)
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessOutput) Materials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness) *bool { return v.Materials }).(pulumi.BoolPtrOutput)
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessOutput) Parameters() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness) *bool { return v.Parameters }).(pulumi.BoolPtrOutput)
}

type GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutput struct{ *pulumi.OutputState }

func (GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness)(nil)).Elem()
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutput) ToGrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutput() GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutput {
	return o
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutput) ToGrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutputWithContext(ctx context.Context) GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutput {
	return o
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutput) Elem() GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessOutput {
	return o.ApplyT(func(v *GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness) GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness {
		if v != nil {
			return *v
		}
		var ret GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness
		return ret
	}).(GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessOutput)
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutput) Environment() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness) *bool {
		if v == nil {
			return nil
		}
		return v.Environment
	}).(pulumi.BoolPtrOutput)
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutput) Materials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness) *bool {
		if v == nil {
			return nil
		}
		return v.Materials
	}).(pulumi.BoolPtrOutput)
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutput) Parameters() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness) *bool {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.BoolPtrOutput)
}

// Indicates that the builder claims certain fields in this message to be complete.
type GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessResponse struct {
	Environment bool `pulumi:"environment"`
	Materials   bool `pulumi:"materials"`
	Parameters  bool `pulumi:"parameters"`
}

// Indicates that the builder claims certain fields in this message to be complete.
type GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessResponseOutput struct{ *pulumi.OutputState }

func (GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessResponse)(nil)).Elem()
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessResponseOutput) ToGrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessResponseOutput() GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessResponseOutput {
	return o
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessResponseOutput) ToGrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessResponseOutputWithContext(ctx context.Context) GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessResponseOutput {
	return o
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessResponseOutput) Environment() pulumi.BoolOutput {
	return o.ApplyT(func(v GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessResponse) bool { return v.Environment }).(pulumi.BoolOutput)
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessResponseOutput) Materials() pulumi.BoolOutput {
	return o.ApplyT(func(v GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessResponse) bool { return v.Materials }).(pulumi.BoolOutput)
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessResponseOutput) Parameters() pulumi.BoolOutput {
	return o.ApplyT(func(v GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessResponse) bool { return v.Parameters }).(pulumi.BoolOutput)
}

// Describes where the config file that kicked off the build came from. This is effectively a pointer to the source where buildConfig came from.
type GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource struct {
	Digest     map[string]string `pulumi:"digest"`
	EntryPoint *string           `pulumi:"entryPoint"`
	Uri        *string           `pulumi:"uri"`
}

// GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceInput is an input type that accepts GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceArgs and GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceOutput values.
// You can construct a concrete instance of `GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceInput` via:
//
//	GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceArgs{...}
type GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceInput interface {
	pulumi.Input

	ToGrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceOutput() GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceOutput
	ToGrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceOutputWithContext(context.Context) GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceOutput
}

// Describes where the config file that kicked off the build came from. This is effectively a pointer to the source where buildConfig came from.
type GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceArgs struct {
	Digest     pulumi.StringMapInput `pulumi:"digest"`
	EntryPoint pulumi.StringPtrInput `pulumi:"entryPoint"`
	Uri        pulumi.StringPtrInput `pulumi:"uri"`
}

func (GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource)(nil)).Elem()
}

func (i GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceArgs) ToGrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceOutput() GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceOutput {
	return i.ToGrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceOutputWithContext(context.Background())
}

func (i GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceArgs) ToGrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceOutputWithContext(ctx context.Context) GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceOutput)
}

func (i GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceArgs) ToGrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutput() GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutput {
	return i.ToGrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutputWithContext(context.Background())
}

func (i GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceArgs) ToGrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutputWithContext(ctx context.Context) GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceOutput).ToGrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutputWithContext(ctx)
}

// GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourcePtrInput is an input type that accepts GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceArgs, GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourcePtr and GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutput values.
// You can construct a concrete instance of `GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourcePtrInput` via:
//
//	        GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceArgs{...}
//
//	or:
//
//	        nil
type GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourcePtrInput interface {
	pulumi.Input

	ToGrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutput() GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutput
	ToGrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutputWithContext(context.Context) GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutput
}

type grafeasV1SlsaProvenanceZeroTwoSlsaConfigSourcePtrType GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceArgs

func GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourcePtr(v *GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceArgs) GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourcePtrInput {
	return (*grafeasV1SlsaProvenanceZeroTwoSlsaConfigSourcePtrType)(v)
}

func (*grafeasV1SlsaProvenanceZeroTwoSlsaConfigSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource)(nil)).Elem()
}

func (i *grafeasV1SlsaProvenanceZeroTwoSlsaConfigSourcePtrType) ToGrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutput() GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutput {
	return i.ToGrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutputWithContext(context.Background())
}

func (i *grafeasV1SlsaProvenanceZeroTwoSlsaConfigSourcePtrType) ToGrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutputWithContext(ctx context.Context) GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutput)
}

// Describes where the config file that kicked off the build came from. This is effectively a pointer to the source where buildConfig came from.
type GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceOutput struct{ *pulumi.OutputState }

func (GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource)(nil)).Elem()
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceOutput) ToGrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceOutput() GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceOutput {
	return o
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceOutput) ToGrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceOutputWithContext(ctx context.Context) GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceOutput {
	return o
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceOutput) ToGrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutput() GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutput {
	return o.ToGrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutputWithContext(context.Background())
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceOutput) ToGrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutputWithContext(ctx context.Context) GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource) *GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource {
		return &v
	}).(GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutput)
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceOutput) Digest() pulumi.StringMapOutput {
	return o.ApplyT(func(v GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource) map[string]string { return v.Digest }).(pulumi.StringMapOutput)
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceOutput) EntryPoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource) *string { return v.EntryPoint }).(pulumi.StringPtrOutput)
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutput struct{ *pulumi.OutputState }

func (GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource)(nil)).Elem()
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutput) ToGrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutput() GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutput {
	return o
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutput) ToGrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutputWithContext(ctx context.Context) GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutput {
	return o
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutput) Elem() GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceOutput {
	return o.ApplyT(func(v *GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource) GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource {
		if v != nil {
			return *v
		}
		var ret GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource
		return ret
	}).(GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceOutput)
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutput) Digest() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource) map[string]string {
		if v == nil {
			return nil
		}
		return v.Digest
	}).(pulumi.StringMapOutput)
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutput) EntryPoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource) *string {
		if v == nil {
			return nil
		}
		return v.EntryPoint
	}).(pulumi.StringPtrOutput)
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

// Describes where the config file that kicked off the build came from. This is effectively a pointer to the source where buildConfig came from.
type GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceResponse struct {
	Digest     map[string]string `pulumi:"digest"`
	EntryPoint string            `pulumi:"entryPoint"`
	Uri        string            `pulumi:"uri"`
}

// Describes where the config file that kicked off the build came from. This is effectively a pointer to the source where buildConfig came from.
type GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceResponseOutput struct{ *pulumi.OutputState }

func (GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceResponse)(nil)).Elem()
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceResponseOutput) ToGrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceResponseOutput() GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceResponseOutput {
	return o
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceResponseOutput) ToGrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceResponseOutputWithContext(ctx context.Context) GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceResponseOutput {
	return o
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceResponseOutput) Digest() pulumi.StringMapOutput {
	return o.ApplyT(func(v GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceResponse) map[string]string { return v.Digest }).(pulumi.StringMapOutput)
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceResponseOutput) EntryPoint() pulumi.StringOutput {
	return o.ApplyT(func(v GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceResponse) string { return v.EntryPoint }).(pulumi.StringOutput)
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceResponse) string { return v.Uri }).(pulumi.StringOutput)
}

// Identifies the event that kicked off the build.
type GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation struct {
	ConfigSource *GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource `pulumi:"configSource"`
	Environment  map[string]interface{}                          `pulumi:"environment"`
	Parameters   map[string]interface{}                          `pulumi:"parameters"`
}

// GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationInput is an input type that accepts GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationArgs and GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationOutput values.
// You can construct a concrete instance of `GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationInput` via:
//
//	GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationArgs{...}
type GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationInput interface {
	pulumi.Input

	ToGrafeasV1SlsaProvenanceZeroTwoSlsaInvocationOutput() GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationOutput
	ToGrafeasV1SlsaProvenanceZeroTwoSlsaInvocationOutputWithContext(context.Context) GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationOutput
}

// Identifies the event that kicked off the build.
type GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationArgs struct {
	ConfigSource GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourcePtrInput `pulumi:"configSource"`
	Environment  pulumi.MapInput                                        `pulumi:"environment"`
	Parameters   pulumi.MapInput                                        `pulumi:"parameters"`
}

func (GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation)(nil)).Elem()
}

func (i GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationArgs) ToGrafeasV1SlsaProvenanceZeroTwoSlsaInvocationOutput() GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationOutput {
	return i.ToGrafeasV1SlsaProvenanceZeroTwoSlsaInvocationOutputWithContext(context.Background())
}

func (i GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationArgs) ToGrafeasV1SlsaProvenanceZeroTwoSlsaInvocationOutputWithContext(ctx context.Context) GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationOutput)
}

func (i GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationArgs) ToGrafeasV1SlsaProvenanceZeroTwoSlsaInvocationPtrOutput() GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationPtrOutput {
	return i.ToGrafeasV1SlsaProvenanceZeroTwoSlsaInvocationPtrOutputWithContext(context.Background())
}

func (i GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationArgs) ToGrafeasV1SlsaProvenanceZeroTwoSlsaInvocationPtrOutputWithContext(ctx context.Context) GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationOutput).ToGrafeasV1SlsaProvenanceZeroTwoSlsaInvocationPtrOutputWithContext(ctx)
}

// GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationPtrInput is an input type that accepts GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationArgs, GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationPtr and GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationPtrOutput values.
// You can construct a concrete instance of `GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationPtrInput` via:
//
//	        GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationArgs{...}
//
//	or:
//
//	        nil
type GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationPtrInput interface {
	pulumi.Input

	ToGrafeasV1SlsaProvenanceZeroTwoSlsaInvocationPtrOutput() GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationPtrOutput
	ToGrafeasV1SlsaProvenanceZeroTwoSlsaInvocationPtrOutputWithContext(context.Context) GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationPtrOutput
}

type grafeasV1SlsaProvenanceZeroTwoSlsaInvocationPtrType GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationArgs

func GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationPtr(v *GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationArgs) GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationPtrInput {
	return (*grafeasV1SlsaProvenanceZeroTwoSlsaInvocationPtrType)(v)
}

func (*grafeasV1SlsaProvenanceZeroTwoSlsaInvocationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation)(nil)).Elem()
}

func (i *grafeasV1SlsaProvenanceZeroTwoSlsaInvocationPtrType) ToGrafeasV1SlsaProvenanceZeroTwoSlsaInvocationPtrOutput() GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationPtrOutput {
	return i.ToGrafeasV1SlsaProvenanceZeroTwoSlsaInvocationPtrOutputWithContext(context.Background())
}

func (i *grafeasV1SlsaProvenanceZeroTwoSlsaInvocationPtrType) ToGrafeasV1SlsaProvenanceZeroTwoSlsaInvocationPtrOutputWithContext(ctx context.Context) GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationPtrOutput)
}

// Identifies the event that kicked off the build.
type GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationOutput struct{ *pulumi.OutputState }

func (GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation)(nil)).Elem()
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationOutput) ToGrafeasV1SlsaProvenanceZeroTwoSlsaInvocationOutput() GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationOutput {
	return o
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationOutput) ToGrafeasV1SlsaProvenanceZeroTwoSlsaInvocationOutputWithContext(ctx context.Context) GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationOutput {
	return o
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationOutput) ToGrafeasV1SlsaProvenanceZeroTwoSlsaInvocationPtrOutput() GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationPtrOutput {
	return o.ToGrafeasV1SlsaProvenanceZeroTwoSlsaInvocationPtrOutputWithContext(context.Background())
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationOutput) ToGrafeasV1SlsaProvenanceZeroTwoSlsaInvocationPtrOutputWithContext(ctx context.Context) GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation) *GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation {
		return &v
	}).(GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationPtrOutput)
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationOutput) ConfigSource() GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutput {
	return o.ApplyT(func(v GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation) *GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource {
		return v.ConfigSource
	}).(GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutput)
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationOutput) Environment() pulumi.MapOutput {
	return o.ApplyT(func(v GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation) map[string]interface{} { return v.Environment }).(pulumi.MapOutput)
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation) map[string]interface{} { return v.Parameters }).(pulumi.MapOutput)
}

type GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationPtrOutput struct{ *pulumi.OutputState }

func (GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation)(nil)).Elem()
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationPtrOutput) ToGrafeasV1SlsaProvenanceZeroTwoSlsaInvocationPtrOutput() GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationPtrOutput {
	return o
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationPtrOutput) ToGrafeasV1SlsaProvenanceZeroTwoSlsaInvocationPtrOutputWithContext(ctx context.Context) GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationPtrOutput {
	return o
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationPtrOutput) Elem() GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationOutput {
	return o.ApplyT(func(v *GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation) GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation {
		if v != nil {
			return *v
		}
		var ret GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation
		return ret
	}).(GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationOutput)
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationPtrOutput) ConfigSource() GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutput {
	return o.ApplyT(func(v *GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation) *GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource {
		if v == nil {
			return nil
		}
		return v.ConfigSource
	}).(GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutput)
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationPtrOutput) Environment() pulumi.MapOutput {
	return o.ApplyT(func(v *GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Environment
	}).(pulumi.MapOutput)
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationPtrOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v *GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.MapOutput)
}

// Identifies the event that kicked off the build.
type GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationResponse struct {
	ConfigSource GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceResponse `pulumi:"configSource"`
	Environment  map[string]interface{}                                 `pulumi:"environment"`
	Parameters   map[string]interface{}                                 `pulumi:"parameters"`
}

// Identifies the event that kicked off the build.
type GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationResponseOutput struct{ *pulumi.OutputState }

func (GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationResponse)(nil)).Elem()
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationResponseOutput) ToGrafeasV1SlsaProvenanceZeroTwoSlsaInvocationResponseOutput() GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationResponseOutput {
	return o
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationResponseOutput) ToGrafeasV1SlsaProvenanceZeroTwoSlsaInvocationResponseOutputWithContext(ctx context.Context) GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationResponseOutput {
	return o
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationResponseOutput) ConfigSource() GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceResponseOutput {
	return o.ApplyT(func(v GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationResponse) GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceResponse {
		return v.ConfigSource
	}).(GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceResponseOutput)
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationResponseOutput) Environment() pulumi.MapOutput {
	return o.ApplyT(func(v GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationResponse) map[string]interface{} {
		return v.Environment
	}).(pulumi.MapOutput)
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationResponseOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationResponse) map[string]interface{} {
		return v.Parameters
	}).(pulumi.MapOutput)
}

// The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on.
type GrafeasV1SlsaProvenanceZeroTwoSlsaMaterial struct {
	Digest map[string]string `pulumi:"digest"`
	Uri    *string           `pulumi:"uri"`
}

// GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialInput is an input type that accepts GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialArgs and GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialOutput values.
// You can construct a concrete instance of `GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialInput` via:
//
//	GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialArgs{...}
type GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialInput interface {
	pulumi.Input

	ToGrafeasV1SlsaProvenanceZeroTwoSlsaMaterialOutput() GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialOutput
	ToGrafeasV1SlsaProvenanceZeroTwoSlsaMaterialOutputWithContext(context.Context) GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialOutput
}

// The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on.
type GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialArgs struct {
	Digest pulumi.StringMapInput `pulumi:"digest"`
	Uri    pulumi.StringPtrInput `pulumi:"uri"`
}

func (GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1SlsaProvenanceZeroTwoSlsaMaterial)(nil)).Elem()
}

func (i GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialArgs) ToGrafeasV1SlsaProvenanceZeroTwoSlsaMaterialOutput() GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialOutput {
	return i.ToGrafeasV1SlsaProvenanceZeroTwoSlsaMaterialOutputWithContext(context.Background())
}

func (i GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialArgs) ToGrafeasV1SlsaProvenanceZeroTwoSlsaMaterialOutputWithContext(ctx context.Context) GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialOutput)
}

// GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialArrayInput is an input type that accepts GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialArray and GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialArrayOutput values.
// You can construct a concrete instance of `GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialArrayInput` via:
//
//	GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialArray{ GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialArgs{...} }
type GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialArrayInput interface {
	pulumi.Input

	ToGrafeasV1SlsaProvenanceZeroTwoSlsaMaterialArrayOutput() GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialArrayOutput
	ToGrafeasV1SlsaProvenanceZeroTwoSlsaMaterialArrayOutputWithContext(context.Context) GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialArrayOutput
}

type GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialArray []GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialInput

func (GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GrafeasV1SlsaProvenanceZeroTwoSlsaMaterial)(nil)).Elem()
}

func (i GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialArray) ToGrafeasV1SlsaProvenanceZeroTwoSlsaMaterialArrayOutput() GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialArrayOutput {
	return i.ToGrafeasV1SlsaProvenanceZeroTwoSlsaMaterialArrayOutputWithContext(context.Background())
}

func (i GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialArray) ToGrafeasV1SlsaProvenanceZeroTwoSlsaMaterialArrayOutputWithContext(ctx context.Context) GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialArrayOutput)
}

// The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on.
type GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialOutput struct{ *pulumi.OutputState }

func (GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1SlsaProvenanceZeroTwoSlsaMaterial)(nil)).Elem()
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialOutput) ToGrafeasV1SlsaProvenanceZeroTwoSlsaMaterialOutput() GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialOutput {
	return o
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialOutput) ToGrafeasV1SlsaProvenanceZeroTwoSlsaMaterialOutputWithContext(ctx context.Context) GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialOutput {
	return o
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialOutput) Digest() pulumi.StringMapOutput {
	return o.ApplyT(func(v GrafeasV1SlsaProvenanceZeroTwoSlsaMaterial) map[string]string { return v.Digest }).(pulumi.StringMapOutput)
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GrafeasV1SlsaProvenanceZeroTwoSlsaMaterial) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialArrayOutput struct{ *pulumi.OutputState }

func (GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GrafeasV1SlsaProvenanceZeroTwoSlsaMaterial)(nil)).Elem()
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialArrayOutput) ToGrafeasV1SlsaProvenanceZeroTwoSlsaMaterialArrayOutput() GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialArrayOutput {
	return o
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialArrayOutput) ToGrafeasV1SlsaProvenanceZeroTwoSlsaMaterialArrayOutputWithContext(ctx context.Context) GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialArrayOutput {
	return o
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialArrayOutput) Index(i pulumi.IntInput) GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GrafeasV1SlsaProvenanceZeroTwoSlsaMaterial {
		return vs[0].([]GrafeasV1SlsaProvenanceZeroTwoSlsaMaterial)[vs[1].(int)]
	}).(GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialOutput)
}

// The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on.
type GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialResponse struct {
	Digest map[string]string `pulumi:"digest"`
	Uri    string            `pulumi:"uri"`
}

// The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on.
type GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialResponseOutput struct{ *pulumi.OutputState }

func (GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialResponse)(nil)).Elem()
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialResponseOutput) ToGrafeasV1SlsaProvenanceZeroTwoSlsaMaterialResponseOutput() GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialResponseOutput {
	return o
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialResponseOutput) ToGrafeasV1SlsaProvenanceZeroTwoSlsaMaterialResponseOutputWithContext(ctx context.Context) GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialResponseOutput {
	return o
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialResponseOutput) Digest() pulumi.StringMapOutput {
	return o.ApplyT(func(v GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialResponse) map[string]string { return v.Digest }).(pulumi.StringMapOutput)
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialResponse) string { return v.Uri }).(pulumi.StringOutput)
}

type GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialResponseArrayOutput struct{ *pulumi.OutputState }

func (GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialResponse)(nil)).Elem()
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialResponseArrayOutput) ToGrafeasV1SlsaProvenanceZeroTwoSlsaMaterialResponseArrayOutput() GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialResponseArrayOutput {
	return o
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialResponseArrayOutput) ToGrafeasV1SlsaProvenanceZeroTwoSlsaMaterialResponseArrayOutputWithContext(ctx context.Context) GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialResponseArrayOutput {
	return o
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialResponseArrayOutput) Index(i pulumi.IntInput) GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialResponse {
		return vs[0].([]GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialResponse)[vs[1].(int)]
	}).(GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialResponseOutput)
}

// Other properties of the build.
type GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata struct {
	BuildFinishedOn   *string                                         `pulumi:"buildFinishedOn"`
	BuildInvocationId *string                                         `pulumi:"buildInvocationId"`
	BuildStartedOn    *string                                         `pulumi:"buildStartedOn"`
	Completeness      *GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness `pulumi:"completeness"`
	Reproducible      *bool                                           `pulumi:"reproducible"`
}

// GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataInput is an input type that accepts GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataArgs and GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataOutput values.
// You can construct a concrete instance of `GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataInput` via:
//
//	GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataArgs{...}
type GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataInput interface {
	pulumi.Input

	ToGrafeasV1SlsaProvenanceZeroTwoSlsaMetadataOutput() GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataOutput
	ToGrafeasV1SlsaProvenanceZeroTwoSlsaMetadataOutputWithContext(context.Context) GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataOutput
}

// Other properties of the build.
type GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataArgs struct {
	BuildFinishedOn   pulumi.StringPtrInput                                  `pulumi:"buildFinishedOn"`
	BuildInvocationId pulumi.StringPtrInput                                  `pulumi:"buildInvocationId"`
	BuildStartedOn    pulumi.StringPtrInput                                  `pulumi:"buildStartedOn"`
	Completeness      GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessPtrInput `pulumi:"completeness"`
	Reproducible      pulumi.BoolPtrInput                                    `pulumi:"reproducible"`
}

func (GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata)(nil)).Elem()
}

func (i GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataArgs) ToGrafeasV1SlsaProvenanceZeroTwoSlsaMetadataOutput() GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataOutput {
	return i.ToGrafeasV1SlsaProvenanceZeroTwoSlsaMetadataOutputWithContext(context.Background())
}

func (i GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataArgs) ToGrafeasV1SlsaProvenanceZeroTwoSlsaMetadataOutputWithContext(ctx context.Context) GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataOutput)
}

func (i GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataArgs) ToGrafeasV1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput() GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput {
	return i.ToGrafeasV1SlsaProvenanceZeroTwoSlsaMetadataPtrOutputWithContext(context.Background())
}

func (i GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataArgs) ToGrafeasV1SlsaProvenanceZeroTwoSlsaMetadataPtrOutputWithContext(ctx context.Context) GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataOutput).ToGrafeasV1SlsaProvenanceZeroTwoSlsaMetadataPtrOutputWithContext(ctx)
}

// GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataPtrInput is an input type that accepts GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataArgs, GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataPtr and GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput values.
// You can construct a concrete instance of `GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataPtrInput` via:
//
//	        GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataArgs{...}
//
//	or:
//
//	        nil
type GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataPtrInput interface {
	pulumi.Input

	ToGrafeasV1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput() GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput
	ToGrafeasV1SlsaProvenanceZeroTwoSlsaMetadataPtrOutputWithContext(context.Context) GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput
}

type grafeasV1SlsaProvenanceZeroTwoSlsaMetadataPtrType GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataArgs

func GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataPtr(v *GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataArgs) GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataPtrInput {
	return (*grafeasV1SlsaProvenanceZeroTwoSlsaMetadataPtrType)(v)
}

func (*grafeasV1SlsaProvenanceZeroTwoSlsaMetadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata)(nil)).Elem()
}

func (i *grafeasV1SlsaProvenanceZeroTwoSlsaMetadataPtrType) ToGrafeasV1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput() GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput {
	return i.ToGrafeasV1SlsaProvenanceZeroTwoSlsaMetadataPtrOutputWithContext(context.Background())
}

func (i *grafeasV1SlsaProvenanceZeroTwoSlsaMetadataPtrType) ToGrafeasV1SlsaProvenanceZeroTwoSlsaMetadataPtrOutputWithContext(ctx context.Context) GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput)
}

// Other properties of the build.
type GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataOutput struct{ *pulumi.OutputState }

func (GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata)(nil)).Elem()
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataOutput) ToGrafeasV1SlsaProvenanceZeroTwoSlsaMetadataOutput() GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataOutput {
	return o
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataOutput) ToGrafeasV1SlsaProvenanceZeroTwoSlsaMetadataOutputWithContext(ctx context.Context) GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataOutput {
	return o
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataOutput) ToGrafeasV1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput() GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput {
	return o.ToGrafeasV1SlsaProvenanceZeroTwoSlsaMetadataPtrOutputWithContext(context.Background())
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataOutput) ToGrafeasV1SlsaProvenanceZeroTwoSlsaMetadataPtrOutputWithContext(ctx context.Context) GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata) *GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata {
		return &v
	}).(GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput)
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataOutput) BuildFinishedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata) *string { return v.BuildFinishedOn }).(pulumi.StringPtrOutput)
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataOutput) BuildInvocationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata) *string { return v.BuildInvocationId }).(pulumi.StringPtrOutput)
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataOutput) BuildStartedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata) *string { return v.BuildStartedOn }).(pulumi.StringPtrOutput)
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataOutput) Completeness() GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutput {
	return o.ApplyT(func(v GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata) *GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness {
		return v.Completeness
	}).(GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutput)
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataOutput) Reproducible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata) *bool { return v.Reproducible }).(pulumi.BoolPtrOutput)
}

type GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput struct{ *pulumi.OutputState }

func (GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata)(nil)).Elem()
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput) ToGrafeasV1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput() GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput {
	return o
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput) ToGrafeasV1SlsaProvenanceZeroTwoSlsaMetadataPtrOutputWithContext(ctx context.Context) GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput {
	return o
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput) Elem() GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataOutput {
	return o.ApplyT(func(v *GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata) GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata {
		if v != nil {
			return *v
		}
		var ret GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata
		return ret
	}).(GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataOutput)
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput) BuildFinishedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata) *string {
		if v == nil {
			return nil
		}
		return v.BuildFinishedOn
	}).(pulumi.StringPtrOutput)
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput) BuildInvocationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata) *string {
		if v == nil {
			return nil
		}
		return v.BuildInvocationId
	}).(pulumi.StringPtrOutput)
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput) BuildStartedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata) *string {
		if v == nil {
			return nil
		}
		return v.BuildStartedOn
	}).(pulumi.StringPtrOutput)
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput) Completeness() GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutput {
	return o.ApplyT(func(v *GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata) *GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness {
		if v == nil {
			return nil
		}
		return v.Completeness
	}).(GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutput)
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput) Reproducible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata) *bool {
		if v == nil {
			return nil
		}
		return v.Reproducible
	}).(pulumi.BoolPtrOutput)
}

// Other properties of the build.
type GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataResponse struct {
	BuildFinishedOn   string                                                 `pulumi:"buildFinishedOn"`
	BuildInvocationId string                                                 `pulumi:"buildInvocationId"`
	BuildStartedOn    string                                                 `pulumi:"buildStartedOn"`
	Completeness      GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessResponse `pulumi:"completeness"`
	Reproducible      bool                                                   `pulumi:"reproducible"`
}

// Other properties of the build.
type GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataResponseOutput struct{ *pulumi.OutputState }

func (GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataResponse)(nil)).Elem()
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataResponseOutput) ToGrafeasV1SlsaProvenanceZeroTwoSlsaMetadataResponseOutput() GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataResponseOutput {
	return o
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataResponseOutput) ToGrafeasV1SlsaProvenanceZeroTwoSlsaMetadataResponseOutputWithContext(ctx context.Context) GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataResponseOutput {
	return o
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataResponseOutput) BuildFinishedOn() pulumi.StringOutput {
	return o.ApplyT(func(v GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataResponse) string { return v.BuildFinishedOn }).(pulumi.StringOutput)
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataResponseOutput) BuildInvocationId() pulumi.StringOutput {
	return o.ApplyT(func(v GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataResponse) string { return v.BuildInvocationId }).(pulumi.StringOutput)
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataResponseOutput) BuildStartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataResponse) string { return v.BuildStartedOn }).(pulumi.StringOutput)
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataResponseOutput) Completeness() GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessResponseOutput {
	return o.ApplyT(func(v GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataResponse) GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessResponse {
		return v.Completeness
	}).(GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessResponseOutput)
}

func (o GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataResponseOutput) Reproducible() pulumi.BoolOutput {
	return o.ApplyT(func(v GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataResponse) bool { return v.Reproducible }).(pulumi.BoolOutput)
}

// Container message for hash values.
type Hash struct {
	// The type of hash that was performed, e.g. "SHA-256".
	Type string `pulumi:"type"`
	// The hash value.
	Value string `pulumi:"value"`
}

// HashInput is an input type that accepts HashArgs and HashOutput values.
// You can construct a concrete instance of `HashInput` via:
//
//	HashArgs{...}
type HashInput interface {
	pulumi.Input

	ToHashOutput() HashOutput
	ToHashOutputWithContext(context.Context) HashOutput
}

// Container message for hash values.
type HashArgs struct {
	// The type of hash that was performed, e.g. "SHA-256".
	Type pulumi.StringInput `pulumi:"type"`
	// The hash value.
	Value pulumi.StringInput `pulumi:"value"`
}

func (HashArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Hash)(nil)).Elem()
}

func (i HashArgs) ToHashOutput() HashOutput {
	return i.ToHashOutputWithContext(context.Background())
}

func (i HashArgs) ToHashOutputWithContext(ctx context.Context) HashOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HashOutput)
}

// HashArrayInput is an input type that accepts HashArray and HashArrayOutput values.
// You can construct a concrete instance of `HashArrayInput` via:
//
//	HashArray{ HashArgs{...} }
type HashArrayInput interface {
	pulumi.Input

	ToHashArrayOutput() HashArrayOutput
	ToHashArrayOutputWithContext(context.Context) HashArrayOutput
}

type HashArray []HashInput

func (HashArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Hash)(nil)).Elem()
}

func (i HashArray) ToHashArrayOutput() HashArrayOutput {
	return i.ToHashArrayOutputWithContext(context.Background())
}

func (i HashArray) ToHashArrayOutputWithContext(ctx context.Context) HashArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HashArrayOutput)
}

// Container message for hash values.
type HashOutput struct{ *pulumi.OutputState }

func (HashOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Hash)(nil)).Elem()
}

func (o HashOutput) ToHashOutput() HashOutput {
	return o
}

func (o HashOutput) ToHashOutputWithContext(ctx context.Context) HashOutput {
	return o
}

// The type of hash that was performed, e.g. "SHA-256".
func (o HashOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v Hash) string { return v.Type }).(pulumi.StringOutput)
}

// The hash value.
func (o HashOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v Hash) string { return v.Value }).(pulumi.StringOutput)
}

type HashArrayOutput struct{ *pulumi.OutputState }

func (HashArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Hash)(nil)).Elem()
}

func (o HashArrayOutput) ToHashArrayOutput() HashArrayOutput {
	return o
}

func (o HashArrayOutput) ToHashArrayOutputWithContext(ctx context.Context) HashArrayOutput {
	return o
}

func (o HashArrayOutput) Index(i pulumi.IntInput) HashOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Hash {
		return vs[0].([]Hash)[vs[1].(int)]
	}).(HashOutput)
}

// Container message for hash values.
type HashResponse struct {
	// The type of hash that was performed, e.g. "SHA-256".
	Type string `pulumi:"type"`
	// The hash value.
	Value string `pulumi:"value"`
}

// Container message for hash values.
type HashResponseOutput struct{ *pulumi.OutputState }

func (HashResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HashResponse)(nil)).Elem()
}

func (o HashResponseOutput) ToHashResponseOutput() HashResponseOutput {
	return o
}

func (o HashResponseOutput) ToHashResponseOutputWithContext(ctx context.Context) HashResponseOutput {
	return o
}

// The type of hash that was performed, e.g. "SHA-256".
func (o HashResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HashResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The hash value.
func (o HashResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v HashResponse) string { return v.Value }).(pulumi.StringOutput)
}

type HashResponseArrayOutput struct{ *pulumi.OutputState }

func (HashResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HashResponse)(nil)).Elem()
}

func (o HashResponseArrayOutput) ToHashResponseArrayOutput() HashResponseArrayOutput {
	return o
}

func (o HashResponseArrayOutput) ToHashResponseArrayOutputWithContext(ctx context.Context) HashResponseArrayOutput {
	return o
}

func (o HashResponseArrayOutput) Index(i pulumi.IntInput) HashResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HashResponse {
		return vs[0].([]HashResponse)[vs[1].(int)]
	}).(HashResponseOutput)
}

// This submessage provides human-readable hints about the purpose of the authority. Because the name of a note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from "readable" names more suitable for debug output. Note that these hints should not be used to look up authorities in security sensitive contexts, such as when looking up attestations to verify.
type Hint struct {
	// The human readable name of this attestation authority, for example "qa".
	HumanReadableName string `pulumi:"humanReadableName"`
}

// HintInput is an input type that accepts HintArgs and HintOutput values.
// You can construct a concrete instance of `HintInput` via:
//
//	HintArgs{...}
type HintInput interface {
	pulumi.Input

	ToHintOutput() HintOutput
	ToHintOutputWithContext(context.Context) HintOutput
}

// This submessage provides human-readable hints about the purpose of the authority. Because the name of a note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from "readable" names more suitable for debug output. Note that these hints should not be used to look up authorities in security sensitive contexts, such as when looking up attestations to verify.
type HintArgs struct {
	// The human readable name of this attestation authority, for example "qa".
	HumanReadableName pulumi.StringInput `pulumi:"humanReadableName"`
}

func (HintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Hint)(nil)).Elem()
}

func (i HintArgs) ToHintOutput() HintOutput {
	return i.ToHintOutputWithContext(context.Background())
}

func (i HintArgs) ToHintOutputWithContext(ctx context.Context) HintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HintOutput)
}

func (i HintArgs) ToHintPtrOutput() HintPtrOutput {
	return i.ToHintPtrOutputWithContext(context.Background())
}

func (i HintArgs) ToHintPtrOutputWithContext(ctx context.Context) HintPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HintOutput).ToHintPtrOutputWithContext(ctx)
}

// HintPtrInput is an input type that accepts HintArgs, HintPtr and HintPtrOutput values.
// You can construct a concrete instance of `HintPtrInput` via:
//
//	        HintArgs{...}
//
//	or:
//
//	        nil
type HintPtrInput interface {
	pulumi.Input

	ToHintPtrOutput() HintPtrOutput
	ToHintPtrOutputWithContext(context.Context) HintPtrOutput
}

type hintPtrType HintArgs

func HintPtr(v *HintArgs) HintPtrInput {
	return (*hintPtrType)(v)
}

func (*hintPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Hint)(nil)).Elem()
}

func (i *hintPtrType) ToHintPtrOutput() HintPtrOutput {
	return i.ToHintPtrOutputWithContext(context.Background())
}

func (i *hintPtrType) ToHintPtrOutputWithContext(ctx context.Context) HintPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HintPtrOutput)
}

// This submessage provides human-readable hints about the purpose of the authority. Because the name of a note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from "readable" names more suitable for debug output. Note that these hints should not be used to look up authorities in security sensitive contexts, such as when looking up attestations to verify.
type HintOutput struct{ *pulumi.OutputState }

func (HintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Hint)(nil)).Elem()
}

func (o HintOutput) ToHintOutput() HintOutput {
	return o
}

func (o HintOutput) ToHintOutputWithContext(ctx context.Context) HintOutput {
	return o
}

func (o HintOutput) ToHintPtrOutput() HintPtrOutput {
	return o.ToHintPtrOutputWithContext(context.Background())
}

func (o HintOutput) ToHintPtrOutputWithContext(ctx context.Context) HintPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Hint) *Hint {
		return &v
	}).(HintPtrOutput)
}

// The human readable name of this attestation authority, for example "qa".
func (o HintOutput) HumanReadableName() pulumi.StringOutput {
	return o.ApplyT(func(v Hint) string { return v.HumanReadableName }).(pulumi.StringOutput)
}

type HintPtrOutput struct{ *pulumi.OutputState }

func (HintPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Hint)(nil)).Elem()
}

func (o HintPtrOutput) ToHintPtrOutput() HintPtrOutput {
	return o
}

func (o HintPtrOutput) ToHintPtrOutputWithContext(ctx context.Context) HintPtrOutput {
	return o
}

func (o HintPtrOutput) Elem() HintOutput {
	return o.ApplyT(func(v *Hint) Hint {
		if v != nil {
			return *v
		}
		var ret Hint
		return ret
	}).(HintOutput)
}

// The human readable name of this attestation authority, for example "qa".
func (o HintPtrOutput) HumanReadableName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Hint) *string {
		if v == nil {
			return nil
		}
		return &v.HumanReadableName
	}).(pulumi.StringPtrOutput)
}

// This submessage provides human-readable hints about the purpose of the authority. Because the name of a note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from "readable" names more suitable for debug output. Note that these hints should not be used to look up authorities in security sensitive contexts, such as when looking up attestations to verify.
type HintResponse struct {
	// The human readable name of this attestation authority, for example "qa".
	HumanReadableName string `pulumi:"humanReadableName"`
}

// This submessage provides human-readable hints about the purpose of the authority. Because the name of a note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from "readable" names more suitable for debug output. Note that these hints should not be used to look up authorities in security sensitive contexts, such as when looking up attestations to verify.
type HintResponseOutput struct{ *pulumi.OutputState }

func (HintResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HintResponse)(nil)).Elem()
}

func (o HintResponseOutput) ToHintResponseOutput() HintResponseOutput {
	return o
}

func (o HintResponseOutput) ToHintResponseOutputWithContext(ctx context.Context) HintResponseOutput {
	return o
}

// The human readable name of this attestation authority, for example "qa".
func (o HintResponseOutput) HumanReadableName() pulumi.StringOutput {
	return o.ApplyT(func(v HintResponse) string { return v.HumanReadableName }).(pulumi.StringOutput)
}

// The unique identifier of the update.
type Identity struct {
	// The revision number of the update.
	Revision *int `pulumi:"revision"`
	// The revision independent identifier of the update.
	UpdateId *string `pulumi:"updateId"`
}

// IdentityInput is an input type that accepts IdentityArgs and IdentityOutput values.
// You can construct a concrete instance of `IdentityInput` via:
//
//	IdentityArgs{...}
type IdentityInput interface {
	pulumi.Input

	ToIdentityOutput() IdentityOutput
	ToIdentityOutputWithContext(context.Context) IdentityOutput
}

// The unique identifier of the update.
type IdentityArgs struct {
	// The revision number of the update.
	Revision pulumi.IntPtrInput `pulumi:"revision"`
	// The revision independent identifier of the update.
	UpdateId pulumi.StringPtrInput `pulumi:"updateId"`
}

func (IdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Identity)(nil)).Elem()
}

func (i IdentityArgs) ToIdentityOutput() IdentityOutput {
	return i.ToIdentityOutputWithContext(context.Background())
}

func (i IdentityArgs) ToIdentityOutputWithContext(ctx context.Context) IdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityOutput)
}

func (i IdentityArgs) ToIdentityPtrOutput() IdentityPtrOutput {
	return i.ToIdentityPtrOutputWithContext(context.Background())
}

func (i IdentityArgs) ToIdentityPtrOutputWithContext(ctx context.Context) IdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityOutput).ToIdentityPtrOutputWithContext(ctx)
}

// IdentityPtrInput is an input type that accepts IdentityArgs, IdentityPtr and IdentityPtrOutput values.
// You can construct a concrete instance of `IdentityPtrInput` via:
//
//	        IdentityArgs{...}
//
//	or:
//
//	        nil
type IdentityPtrInput interface {
	pulumi.Input

	ToIdentityPtrOutput() IdentityPtrOutput
	ToIdentityPtrOutputWithContext(context.Context) IdentityPtrOutput
}

type identityPtrType IdentityArgs

func IdentityPtr(v *IdentityArgs) IdentityPtrInput {
	return (*identityPtrType)(v)
}

func (*identityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Identity)(nil)).Elem()
}

func (i *identityPtrType) ToIdentityPtrOutput() IdentityPtrOutput {
	return i.ToIdentityPtrOutputWithContext(context.Background())
}

func (i *identityPtrType) ToIdentityPtrOutputWithContext(ctx context.Context) IdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityPtrOutput)
}

// The unique identifier of the update.
type IdentityOutput struct{ *pulumi.OutputState }

func (IdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Identity)(nil)).Elem()
}

func (o IdentityOutput) ToIdentityOutput() IdentityOutput {
	return o
}

func (o IdentityOutput) ToIdentityOutputWithContext(ctx context.Context) IdentityOutput {
	return o
}

func (o IdentityOutput) ToIdentityPtrOutput() IdentityPtrOutput {
	return o.ToIdentityPtrOutputWithContext(context.Background())
}

func (o IdentityOutput) ToIdentityPtrOutputWithContext(ctx context.Context) IdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Identity) *Identity {
		return &v
	}).(IdentityPtrOutput)
}

// The revision number of the update.
func (o IdentityOutput) Revision() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Identity) *int { return v.Revision }).(pulumi.IntPtrOutput)
}

// The revision independent identifier of the update.
func (o IdentityOutput) UpdateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Identity) *string { return v.UpdateId }).(pulumi.StringPtrOutput)
}

type IdentityPtrOutput struct{ *pulumi.OutputState }

func (IdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Identity)(nil)).Elem()
}

func (o IdentityPtrOutput) ToIdentityPtrOutput() IdentityPtrOutput {
	return o
}

func (o IdentityPtrOutput) ToIdentityPtrOutputWithContext(ctx context.Context) IdentityPtrOutput {
	return o
}

func (o IdentityPtrOutput) Elem() IdentityOutput {
	return o.ApplyT(func(v *Identity) Identity {
		if v != nil {
			return *v
		}
		var ret Identity
		return ret
	}).(IdentityOutput)
}

// The revision number of the update.
func (o IdentityPtrOutput) Revision() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Identity) *int {
		if v == nil {
			return nil
		}
		return v.Revision
	}).(pulumi.IntPtrOutput)
}

// The revision independent identifier of the update.
func (o IdentityPtrOutput) UpdateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Identity) *string {
		if v == nil {
			return nil
		}
		return v.UpdateId
	}).(pulumi.StringPtrOutput)
}

// The unique identifier of the update.
type IdentityResponse struct {
	// The revision number of the update.
	Revision int `pulumi:"revision"`
	// The revision independent identifier of the update.
	UpdateId string `pulumi:"updateId"`
}

// The unique identifier of the update.
type IdentityResponseOutput struct{ *pulumi.OutputState }

func (IdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityResponse)(nil)).Elem()
}

func (o IdentityResponseOutput) ToIdentityResponseOutput() IdentityResponseOutput {
	return o
}

func (o IdentityResponseOutput) ToIdentityResponseOutputWithContext(ctx context.Context) IdentityResponseOutput {
	return o
}

// The revision number of the update.
func (o IdentityResponseOutput) Revision() pulumi.IntOutput {
	return o.ApplyT(func(v IdentityResponse) int { return v.Revision }).(pulumi.IntOutput)
}

// The revision independent identifier of the update.
func (o IdentityResponseOutput) UpdateId() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityResponse) string { return v.UpdateId }).(pulumi.StringOutput)
}

// Basis describes the base image portion (Note) of the DockerImage relationship. Linked occurrences are derived from this or an equivalent image via: FROM Or an equivalent reference, e.g., a tag of the resource_url.
type ImageNote struct {
	// Immutable. The fingerprint of the base image.
	Fingerprint Fingerprint `pulumi:"fingerprint"`
	// Immutable. The resource_url for the resource representing the basis of associated occurrence images.
	ResourceUrl string `pulumi:"resourceUrl"`
}

// ImageNoteInput is an input type that accepts ImageNoteArgs and ImageNoteOutput values.
// You can construct a concrete instance of `ImageNoteInput` via:
//
//	ImageNoteArgs{...}
type ImageNoteInput interface {
	pulumi.Input

	ToImageNoteOutput() ImageNoteOutput
	ToImageNoteOutputWithContext(context.Context) ImageNoteOutput
}

// Basis describes the base image portion (Note) of the DockerImage relationship. Linked occurrences are derived from this or an equivalent image via: FROM Or an equivalent reference, e.g., a tag of the resource_url.
type ImageNoteArgs struct {
	// Immutable. The fingerprint of the base image.
	Fingerprint FingerprintInput `pulumi:"fingerprint"`
	// Immutable. The resource_url for the resource representing the basis of associated occurrence images.
	ResourceUrl pulumi.StringInput `pulumi:"resourceUrl"`
}

func (ImageNoteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageNote)(nil)).Elem()
}

func (i ImageNoteArgs) ToImageNoteOutput() ImageNoteOutput {
	return i.ToImageNoteOutputWithContext(context.Background())
}

func (i ImageNoteArgs) ToImageNoteOutputWithContext(ctx context.Context) ImageNoteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageNoteOutput)
}

func (i ImageNoteArgs) ToImageNotePtrOutput() ImageNotePtrOutput {
	return i.ToImageNotePtrOutputWithContext(context.Background())
}

func (i ImageNoteArgs) ToImageNotePtrOutputWithContext(ctx context.Context) ImageNotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageNoteOutput).ToImageNotePtrOutputWithContext(ctx)
}

// ImageNotePtrInput is an input type that accepts ImageNoteArgs, ImageNotePtr and ImageNotePtrOutput values.
// You can construct a concrete instance of `ImageNotePtrInput` via:
//
//	        ImageNoteArgs{...}
//
//	or:
//
//	        nil
type ImageNotePtrInput interface {
	pulumi.Input

	ToImageNotePtrOutput() ImageNotePtrOutput
	ToImageNotePtrOutputWithContext(context.Context) ImageNotePtrOutput
}

type imageNotePtrType ImageNoteArgs

func ImageNotePtr(v *ImageNoteArgs) ImageNotePtrInput {
	return (*imageNotePtrType)(v)
}

func (*imageNotePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageNote)(nil)).Elem()
}

func (i *imageNotePtrType) ToImageNotePtrOutput() ImageNotePtrOutput {
	return i.ToImageNotePtrOutputWithContext(context.Background())
}

func (i *imageNotePtrType) ToImageNotePtrOutputWithContext(ctx context.Context) ImageNotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageNotePtrOutput)
}

// Basis describes the base image portion (Note) of the DockerImage relationship. Linked occurrences are derived from this or an equivalent image via: FROM Or an equivalent reference, e.g., a tag of the resource_url.
type ImageNoteOutput struct{ *pulumi.OutputState }

func (ImageNoteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageNote)(nil)).Elem()
}

func (o ImageNoteOutput) ToImageNoteOutput() ImageNoteOutput {
	return o
}

func (o ImageNoteOutput) ToImageNoteOutputWithContext(ctx context.Context) ImageNoteOutput {
	return o
}

func (o ImageNoteOutput) ToImageNotePtrOutput() ImageNotePtrOutput {
	return o.ToImageNotePtrOutputWithContext(context.Background())
}

func (o ImageNoteOutput) ToImageNotePtrOutputWithContext(ctx context.Context) ImageNotePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageNote) *ImageNote {
		return &v
	}).(ImageNotePtrOutput)
}

// Immutable. The fingerprint of the base image.
func (o ImageNoteOutput) Fingerprint() FingerprintOutput {
	return o.ApplyT(func(v ImageNote) Fingerprint { return v.Fingerprint }).(FingerprintOutput)
}

// Immutable. The resource_url for the resource representing the basis of associated occurrence images.
func (o ImageNoteOutput) ResourceUrl() pulumi.StringOutput {
	return o.ApplyT(func(v ImageNote) string { return v.ResourceUrl }).(pulumi.StringOutput)
}

type ImageNotePtrOutput struct{ *pulumi.OutputState }

func (ImageNotePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageNote)(nil)).Elem()
}

func (o ImageNotePtrOutput) ToImageNotePtrOutput() ImageNotePtrOutput {
	return o
}

func (o ImageNotePtrOutput) ToImageNotePtrOutputWithContext(ctx context.Context) ImageNotePtrOutput {
	return o
}

func (o ImageNotePtrOutput) Elem() ImageNoteOutput {
	return o.ApplyT(func(v *ImageNote) ImageNote {
		if v != nil {
			return *v
		}
		var ret ImageNote
		return ret
	}).(ImageNoteOutput)
}

// Immutable. The fingerprint of the base image.
func (o ImageNotePtrOutput) Fingerprint() FingerprintPtrOutput {
	return o.ApplyT(func(v *ImageNote) *Fingerprint {
		if v == nil {
			return nil
		}
		return &v.Fingerprint
	}).(FingerprintPtrOutput)
}

// Immutable. The resource_url for the resource representing the basis of associated occurrence images.
func (o ImageNotePtrOutput) ResourceUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageNote) *string {
		if v == nil {
			return nil
		}
		return &v.ResourceUrl
	}).(pulumi.StringPtrOutput)
}

// Basis describes the base image portion (Note) of the DockerImage relationship. Linked occurrences are derived from this or an equivalent image via: FROM Or an equivalent reference, e.g., a tag of the resource_url.
type ImageNoteResponse struct {
	// Immutable. The fingerprint of the base image.
	Fingerprint FingerprintResponse `pulumi:"fingerprint"`
	// Immutable. The resource_url for the resource representing the basis of associated occurrence images.
	ResourceUrl string `pulumi:"resourceUrl"`
}

// Basis describes the base image portion (Note) of the DockerImage relationship. Linked occurrences are derived from this or an equivalent image via: FROM Or an equivalent reference, e.g., a tag of the resource_url.
type ImageNoteResponseOutput struct{ *pulumi.OutputState }

func (ImageNoteResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageNoteResponse)(nil)).Elem()
}

func (o ImageNoteResponseOutput) ToImageNoteResponseOutput() ImageNoteResponseOutput {
	return o
}

func (o ImageNoteResponseOutput) ToImageNoteResponseOutputWithContext(ctx context.Context) ImageNoteResponseOutput {
	return o
}

// Immutable. The fingerprint of the base image.
func (o ImageNoteResponseOutput) Fingerprint() FingerprintResponseOutput {
	return o.ApplyT(func(v ImageNoteResponse) FingerprintResponse { return v.Fingerprint }).(FingerprintResponseOutput)
}

// Immutable. The resource_url for the resource representing the basis of associated occurrence images.
func (o ImageNoteResponseOutput) ResourceUrl() pulumi.StringOutput {
	return o.ApplyT(func(v ImageNoteResponse) string { return v.ResourceUrl }).(pulumi.StringOutput)
}

// Details of the derived image portion of the DockerImage relationship. This image would be produced from a Dockerfile with FROM .
type ImageOccurrence struct {
	// The fingerprint of the derived image.
	Fingerprint Fingerprint `pulumi:"fingerprint"`
	// This contains layer-specific metadata, if populated it has length "distance" and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer.
	LayerInfo []Layer `pulumi:"layerInfo"`
}

// ImageOccurrenceInput is an input type that accepts ImageOccurrenceArgs and ImageOccurrenceOutput values.
// You can construct a concrete instance of `ImageOccurrenceInput` via:
//
//	ImageOccurrenceArgs{...}
type ImageOccurrenceInput interface {
	pulumi.Input

	ToImageOccurrenceOutput() ImageOccurrenceOutput
	ToImageOccurrenceOutputWithContext(context.Context) ImageOccurrenceOutput
}

// Details of the derived image portion of the DockerImage relationship. This image would be produced from a Dockerfile with FROM .
type ImageOccurrenceArgs struct {
	// The fingerprint of the derived image.
	Fingerprint FingerprintInput `pulumi:"fingerprint"`
	// This contains layer-specific metadata, if populated it has length "distance" and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer.
	LayerInfo LayerArrayInput `pulumi:"layerInfo"`
}

func (ImageOccurrenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageOccurrence)(nil)).Elem()
}

func (i ImageOccurrenceArgs) ToImageOccurrenceOutput() ImageOccurrenceOutput {
	return i.ToImageOccurrenceOutputWithContext(context.Background())
}

func (i ImageOccurrenceArgs) ToImageOccurrenceOutputWithContext(ctx context.Context) ImageOccurrenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageOccurrenceOutput)
}

func (i ImageOccurrenceArgs) ToImageOccurrencePtrOutput() ImageOccurrencePtrOutput {
	return i.ToImageOccurrencePtrOutputWithContext(context.Background())
}

func (i ImageOccurrenceArgs) ToImageOccurrencePtrOutputWithContext(ctx context.Context) ImageOccurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageOccurrenceOutput).ToImageOccurrencePtrOutputWithContext(ctx)
}

// ImageOccurrencePtrInput is an input type that accepts ImageOccurrenceArgs, ImageOccurrencePtr and ImageOccurrencePtrOutput values.
// You can construct a concrete instance of `ImageOccurrencePtrInput` via:
//
//	        ImageOccurrenceArgs{...}
//
//	or:
//
//	        nil
type ImageOccurrencePtrInput interface {
	pulumi.Input

	ToImageOccurrencePtrOutput() ImageOccurrencePtrOutput
	ToImageOccurrencePtrOutputWithContext(context.Context) ImageOccurrencePtrOutput
}

type imageOccurrencePtrType ImageOccurrenceArgs

func ImageOccurrencePtr(v *ImageOccurrenceArgs) ImageOccurrencePtrInput {
	return (*imageOccurrencePtrType)(v)
}

func (*imageOccurrencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageOccurrence)(nil)).Elem()
}

func (i *imageOccurrencePtrType) ToImageOccurrencePtrOutput() ImageOccurrencePtrOutput {
	return i.ToImageOccurrencePtrOutputWithContext(context.Background())
}

func (i *imageOccurrencePtrType) ToImageOccurrencePtrOutputWithContext(ctx context.Context) ImageOccurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageOccurrencePtrOutput)
}

// Details of the derived image portion of the DockerImage relationship. This image would be produced from a Dockerfile with FROM .
type ImageOccurrenceOutput struct{ *pulumi.OutputState }

func (ImageOccurrenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageOccurrence)(nil)).Elem()
}

func (o ImageOccurrenceOutput) ToImageOccurrenceOutput() ImageOccurrenceOutput {
	return o
}

func (o ImageOccurrenceOutput) ToImageOccurrenceOutputWithContext(ctx context.Context) ImageOccurrenceOutput {
	return o
}

func (o ImageOccurrenceOutput) ToImageOccurrencePtrOutput() ImageOccurrencePtrOutput {
	return o.ToImageOccurrencePtrOutputWithContext(context.Background())
}

func (o ImageOccurrenceOutput) ToImageOccurrencePtrOutputWithContext(ctx context.Context) ImageOccurrencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageOccurrence) *ImageOccurrence {
		return &v
	}).(ImageOccurrencePtrOutput)
}

// The fingerprint of the derived image.
func (o ImageOccurrenceOutput) Fingerprint() FingerprintOutput {
	return o.ApplyT(func(v ImageOccurrence) Fingerprint { return v.Fingerprint }).(FingerprintOutput)
}

// This contains layer-specific metadata, if populated it has length "distance" and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer.
func (o ImageOccurrenceOutput) LayerInfo() LayerArrayOutput {
	return o.ApplyT(func(v ImageOccurrence) []Layer { return v.LayerInfo }).(LayerArrayOutput)
}

type ImageOccurrencePtrOutput struct{ *pulumi.OutputState }

func (ImageOccurrencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageOccurrence)(nil)).Elem()
}

func (o ImageOccurrencePtrOutput) ToImageOccurrencePtrOutput() ImageOccurrencePtrOutput {
	return o
}

func (o ImageOccurrencePtrOutput) ToImageOccurrencePtrOutputWithContext(ctx context.Context) ImageOccurrencePtrOutput {
	return o
}

func (o ImageOccurrencePtrOutput) Elem() ImageOccurrenceOutput {
	return o.ApplyT(func(v *ImageOccurrence) ImageOccurrence {
		if v != nil {
			return *v
		}
		var ret ImageOccurrence
		return ret
	}).(ImageOccurrenceOutput)
}

// The fingerprint of the derived image.
func (o ImageOccurrencePtrOutput) Fingerprint() FingerprintPtrOutput {
	return o.ApplyT(func(v *ImageOccurrence) *Fingerprint {
		if v == nil {
			return nil
		}
		return &v.Fingerprint
	}).(FingerprintPtrOutput)
}

// This contains layer-specific metadata, if populated it has length "distance" and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer.
func (o ImageOccurrencePtrOutput) LayerInfo() LayerArrayOutput {
	return o.ApplyT(func(v *ImageOccurrence) []Layer {
		if v == nil {
			return nil
		}
		return v.LayerInfo
	}).(LayerArrayOutput)
}

// Details of the derived image portion of the DockerImage relationship. This image would be produced from a Dockerfile with FROM .
type ImageOccurrenceResponse struct {
	// This contains the base image URL for the derived image occurrence.
	BaseResourceUrl string `pulumi:"baseResourceUrl"`
	// The number of layers by which this image differs from the associated image basis.
	Distance int `pulumi:"distance"`
	// The fingerprint of the derived image.
	Fingerprint FingerprintResponse `pulumi:"fingerprint"`
	// This contains layer-specific metadata, if populated it has length "distance" and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer.
	LayerInfo []LayerResponse `pulumi:"layerInfo"`
}

// Details of the derived image portion of the DockerImage relationship. This image would be produced from a Dockerfile with FROM .
type ImageOccurrenceResponseOutput struct{ *pulumi.OutputState }

func (ImageOccurrenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageOccurrenceResponse)(nil)).Elem()
}

func (o ImageOccurrenceResponseOutput) ToImageOccurrenceResponseOutput() ImageOccurrenceResponseOutput {
	return o
}

func (o ImageOccurrenceResponseOutput) ToImageOccurrenceResponseOutputWithContext(ctx context.Context) ImageOccurrenceResponseOutput {
	return o
}

// This contains the base image URL for the derived image occurrence.
func (o ImageOccurrenceResponseOutput) BaseResourceUrl() pulumi.StringOutput {
	return o.ApplyT(func(v ImageOccurrenceResponse) string { return v.BaseResourceUrl }).(pulumi.StringOutput)
}

// The number of layers by which this image differs from the associated image basis.
func (o ImageOccurrenceResponseOutput) Distance() pulumi.IntOutput {
	return o.ApplyT(func(v ImageOccurrenceResponse) int { return v.Distance }).(pulumi.IntOutput)
}

// The fingerprint of the derived image.
func (o ImageOccurrenceResponseOutput) Fingerprint() FingerprintResponseOutput {
	return o.ApplyT(func(v ImageOccurrenceResponse) FingerprintResponse { return v.Fingerprint }).(FingerprintResponseOutput)
}

// This contains layer-specific metadata, if populated it has length "distance" and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer.
func (o ImageOccurrenceResponseOutput) LayerInfo() LayerResponseArrayOutput {
	return o.ApplyT(func(v ImageOccurrenceResponse) []LayerResponse { return v.LayerInfo }).(LayerResponseArrayOutput)
}

type InTotoProvenance struct {
	// required
	BuilderConfig *BuilderConfig `pulumi:"builderConfig"`
	// The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.
	Materials []string  `pulumi:"materials"`
	Metadata  *Metadata `pulumi:"metadata"`
	// Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit identical output (if the build is reproducible). required
	Recipe *Recipe `pulumi:"recipe"`
}

// InTotoProvenanceInput is an input type that accepts InTotoProvenanceArgs and InTotoProvenanceOutput values.
// You can construct a concrete instance of `InTotoProvenanceInput` via:
//
//	InTotoProvenanceArgs{...}
type InTotoProvenanceInput interface {
	pulumi.Input

	ToInTotoProvenanceOutput() InTotoProvenanceOutput
	ToInTotoProvenanceOutputWithContext(context.Context) InTotoProvenanceOutput
}

type InTotoProvenanceArgs struct {
	// required
	BuilderConfig BuilderConfigPtrInput `pulumi:"builderConfig"`
	// The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.
	Materials pulumi.StringArrayInput `pulumi:"materials"`
	Metadata  MetadataPtrInput        `pulumi:"metadata"`
	// Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit identical output (if the build is reproducible). required
	Recipe RecipePtrInput `pulumi:"recipe"`
}

func (InTotoProvenanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InTotoProvenance)(nil)).Elem()
}

func (i InTotoProvenanceArgs) ToInTotoProvenanceOutput() InTotoProvenanceOutput {
	return i.ToInTotoProvenanceOutputWithContext(context.Background())
}

func (i InTotoProvenanceArgs) ToInTotoProvenanceOutputWithContext(ctx context.Context) InTotoProvenanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InTotoProvenanceOutput)
}

func (i InTotoProvenanceArgs) ToInTotoProvenancePtrOutput() InTotoProvenancePtrOutput {
	return i.ToInTotoProvenancePtrOutputWithContext(context.Background())
}

func (i InTotoProvenanceArgs) ToInTotoProvenancePtrOutputWithContext(ctx context.Context) InTotoProvenancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InTotoProvenanceOutput).ToInTotoProvenancePtrOutputWithContext(ctx)
}

// InTotoProvenancePtrInput is an input type that accepts InTotoProvenanceArgs, InTotoProvenancePtr and InTotoProvenancePtrOutput values.
// You can construct a concrete instance of `InTotoProvenancePtrInput` via:
//
//	        InTotoProvenanceArgs{...}
//
//	or:
//
//	        nil
type InTotoProvenancePtrInput interface {
	pulumi.Input

	ToInTotoProvenancePtrOutput() InTotoProvenancePtrOutput
	ToInTotoProvenancePtrOutputWithContext(context.Context) InTotoProvenancePtrOutput
}

type inTotoProvenancePtrType InTotoProvenanceArgs

func InTotoProvenancePtr(v *InTotoProvenanceArgs) InTotoProvenancePtrInput {
	return (*inTotoProvenancePtrType)(v)
}

func (*inTotoProvenancePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InTotoProvenance)(nil)).Elem()
}

func (i *inTotoProvenancePtrType) ToInTotoProvenancePtrOutput() InTotoProvenancePtrOutput {
	return i.ToInTotoProvenancePtrOutputWithContext(context.Background())
}

func (i *inTotoProvenancePtrType) ToInTotoProvenancePtrOutputWithContext(ctx context.Context) InTotoProvenancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InTotoProvenancePtrOutput)
}

type InTotoProvenanceOutput struct{ *pulumi.OutputState }

func (InTotoProvenanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InTotoProvenance)(nil)).Elem()
}

func (o InTotoProvenanceOutput) ToInTotoProvenanceOutput() InTotoProvenanceOutput {
	return o
}

func (o InTotoProvenanceOutput) ToInTotoProvenanceOutputWithContext(ctx context.Context) InTotoProvenanceOutput {
	return o
}

func (o InTotoProvenanceOutput) ToInTotoProvenancePtrOutput() InTotoProvenancePtrOutput {
	return o.ToInTotoProvenancePtrOutputWithContext(context.Background())
}

func (o InTotoProvenanceOutput) ToInTotoProvenancePtrOutputWithContext(ctx context.Context) InTotoProvenancePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InTotoProvenance) *InTotoProvenance {
		return &v
	}).(InTotoProvenancePtrOutput)
}

// required
func (o InTotoProvenanceOutput) BuilderConfig() BuilderConfigPtrOutput {
	return o.ApplyT(func(v InTotoProvenance) *BuilderConfig { return v.BuilderConfig }).(BuilderConfigPtrOutput)
}

// The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.
func (o InTotoProvenanceOutput) Materials() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InTotoProvenance) []string { return v.Materials }).(pulumi.StringArrayOutput)
}

func (o InTotoProvenanceOutput) Metadata() MetadataPtrOutput {
	return o.ApplyT(func(v InTotoProvenance) *Metadata { return v.Metadata }).(MetadataPtrOutput)
}

// Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit identical output (if the build is reproducible). required
func (o InTotoProvenanceOutput) Recipe() RecipePtrOutput {
	return o.ApplyT(func(v InTotoProvenance) *Recipe { return v.Recipe }).(RecipePtrOutput)
}

type InTotoProvenancePtrOutput struct{ *pulumi.OutputState }

func (InTotoProvenancePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InTotoProvenance)(nil)).Elem()
}

func (o InTotoProvenancePtrOutput) ToInTotoProvenancePtrOutput() InTotoProvenancePtrOutput {
	return o
}

func (o InTotoProvenancePtrOutput) ToInTotoProvenancePtrOutputWithContext(ctx context.Context) InTotoProvenancePtrOutput {
	return o
}

func (o InTotoProvenancePtrOutput) Elem() InTotoProvenanceOutput {
	return o.ApplyT(func(v *InTotoProvenance) InTotoProvenance {
		if v != nil {
			return *v
		}
		var ret InTotoProvenance
		return ret
	}).(InTotoProvenanceOutput)
}

// required
func (o InTotoProvenancePtrOutput) BuilderConfig() BuilderConfigPtrOutput {
	return o.ApplyT(func(v *InTotoProvenance) *BuilderConfig {
		if v == nil {
			return nil
		}
		return v.BuilderConfig
	}).(BuilderConfigPtrOutput)
}

// The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.
func (o InTotoProvenancePtrOutput) Materials() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InTotoProvenance) []string {
		if v == nil {
			return nil
		}
		return v.Materials
	}).(pulumi.StringArrayOutput)
}

func (o InTotoProvenancePtrOutput) Metadata() MetadataPtrOutput {
	return o.ApplyT(func(v *InTotoProvenance) *Metadata {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(MetadataPtrOutput)
}

// Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit identical output (if the build is reproducible). required
func (o InTotoProvenancePtrOutput) Recipe() RecipePtrOutput {
	return o.ApplyT(func(v *InTotoProvenance) *Recipe {
		if v == nil {
			return nil
		}
		return v.Recipe
	}).(RecipePtrOutput)
}

type InTotoProvenanceResponse struct {
	// required
	BuilderConfig BuilderConfigResponse `pulumi:"builderConfig"`
	// The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.
	Materials []string         `pulumi:"materials"`
	Metadata  MetadataResponse `pulumi:"metadata"`
	// Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit identical output (if the build is reproducible). required
	Recipe RecipeResponse `pulumi:"recipe"`
}

type InTotoProvenanceResponseOutput struct{ *pulumi.OutputState }

func (InTotoProvenanceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InTotoProvenanceResponse)(nil)).Elem()
}

func (o InTotoProvenanceResponseOutput) ToInTotoProvenanceResponseOutput() InTotoProvenanceResponseOutput {
	return o
}

func (o InTotoProvenanceResponseOutput) ToInTotoProvenanceResponseOutputWithContext(ctx context.Context) InTotoProvenanceResponseOutput {
	return o
}

// required
func (o InTotoProvenanceResponseOutput) BuilderConfig() BuilderConfigResponseOutput {
	return o.ApplyT(func(v InTotoProvenanceResponse) BuilderConfigResponse { return v.BuilderConfig }).(BuilderConfigResponseOutput)
}

// The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.
func (o InTotoProvenanceResponseOutput) Materials() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InTotoProvenanceResponse) []string { return v.Materials }).(pulumi.StringArrayOutput)
}

func (o InTotoProvenanceResponseOutput) Metadata() MetadataResponseOutput {
	return o.ApplyT(func(v InTotoProvenanceResponse) MetadataResponse { return v.Metadata }).(MetadataResponseOutput)
}

// Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit identical output (if the build is reproducible). required
func (o InTotoProvenanceResponseOutput) Recipe() RecipeResponseOutput {
	return o.ApplyT(func(v InTotoProvenanceResponse) RecipeResponse { return v.Recipe }).(RecipeResponseOutput)
}

type InTotoSlsaProvenanceV1 struct {
	Predicate     *SlsaProvenanceV1 `pulumi:"predicate"`
	PredicateType *string           `pulumi:"predicateType"`
	Subject       []Subject         `pulumi:"subject"`
	// InToto spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement
	Type *string `pulumi:"type"`
}

// InTotoSlsaProvenanceV1Input is an input type that accepts InTotoSlsaProvenanceV1Args and InTotoSlsaProvenanceV1Output values.
// You can construct a concrete instance of `InTotoSlsaProvenanceV1Input` via:
//
//	InTotoSlsaProvenanceV1Args{...}
type InTotoSlsaProvenanceV1Input interface {
	pulumi.Input

	ToInTotoSlsaProvenanceV1Output() InTotoSlsaProvenanceV1Output
	ToInTotoSlsaProvenanceV1OutputWithContext(context.Context) InTotoSlsaProvenanceV1Output
}

type InTotoSlsaProvenanceV1Args struct {
	Predicate     SlsaProvenanceV1PtrInput `pulumi:"predicate"`
	PredicateType pulumi.StringPtrInput    `pulumi:"predicateType"`
	Subject       SubjectArrayInput        `pulumi:"subject"`
	// InToto spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (InTotoSlsaProvenanceV1Args) ElementType() reflect.Type {
	return reflect.TypeOf((*InTotoSlsaProvenanceV1)(nil)).Elem()
}

func (i InTotoSlsaProvenanceV1Args) ToInTotoSlsaProvenanceV1Output() InTotoSlsaProvenanceV1Output {
	return i.ToInTotoSlsaProvenanceV1OutputWithContext(context.Background())
}

func (i InTotoSlsaProvenanceV1Args) ToInTotoSlsaProvenanceV1OutputWithContext(ctx context.Context) InTotoSlsaProvenanceV1Output {
	return pulumi.ToOutputWithContext(ctx, i).(InTotoSlsaProvenanceV1Output)
}

func (i InTotoSlsaProvenanceV1Args) ToInTotoSlsaProvenanceV1PtrOutput() InTotoSlsaProvenanceV1PtrOutput {
	return i.ToInTotoSlsaProvenanceV1PtrOutputWithContext(context.Background())
}

func (i InTotoSlsaProvenanceV1Args) ToInTotoSlsaProvenanceV1PtrOutputWithContext(ctx context.Context) InTotoSlsaProvenanceV1PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InTotoSlsaProvenanceV1Output).ToInTotoSlsaProvenanceV1PtrOutputWithContext(ctx)
}

// InTotoSlsaProvenanceV1PtrInput is an input type that accepts InTotoSlsaProvenanceV1Args, InTotoSlsaProvenanceV1Ptr and InTotoSlsaProvenanceV1PtrOutput values.
// You can construct a concrete instance of `InTotoSlsaProvenanceV1PtrInput` via:
//
//	        InTotoSlsaProvenanceV1Args{...}
//
//	or:
//
//	        nil
type InTotoSlsaProvenanceV1PtrInput interface {
	pulumi.Input

	ToInTotoSlsaProvenanceV1PtrOutput() InTotoSlsaProvenanceV1PtrOutput
	ToInTotoSlsaProvenanceV1PtrOutputWithContext(context.Context) InTotoSlsaProvenanceV1PtrOutput
}

type inTotoSlsaProvenanceV1PtrType InTotoSlsaProvenanceV1Args

func InTotoSlsaProvenanceV1Ptr(v *InTotoSlsaProvenanceV1Args) InTotoSlsaProvenanceV1PtrInput {
	return (*inTotoSlsaProvenanceV1PtrType)(v)
}

func (*inTotoSlsaProvenanceV1PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InTotoSlsaProvenanceV1)(nil)).Elem()
}

func (i *inTotoSlsaProvenanceV1PtrType) ToInTotoSlsaProvenanceV1PtrOutput() InTotoSlsaProvenanceV1PtrOutput {
	return i.ToInTotoSlsaProvenanceV1PtrOutputWithContext(context.Background())
}

func (i *inTotoSlsaProvenanceV1PtrType) ToInTotoSlsaProvenanceV1PtrOutputWithContext(ctx context.Context) InTotoSlsaProvenanceV1PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InTotoSlsaProvenanceV1PtrOutput)
}

type InTotoSlsaProvenanceV1Output struct{ *pulumi.OutputState }

func (InTotoSlsaProvenanceV1Output) ElementType() reflect.Type {
	return reflect.TypeOf((*InTotoSlsaProvenanceV1)(nil)).Elem()
}

func (o InTotoSlsaProvenanceV1Output) ToInTotoSlsaProvenanceV1Output() InTotoSlsaProvenanceV1Output {
	return o
}

func (o InTotoSlsaProvenanceV1Output) ToInTotoSlsaProvenanceV1OutputWithContext(ctx context.Context) InTotoSlsaProvenanceV1Output {
	return o
}

func (o InTotoSlsaProvenanceV1Output) ToInTotoSlsaProvenanceV1PtrOutput() InTotoSlsaProvenanceV1PtrOutput {
	return o.ToInTotoSlsaProvenanceV1PtrOutputWithContext(context.Background())
}

func (o InTotoSlsaProvenanceV1Output) ToInTotoSlsaProvenanceV1PtrOutputWithContext(ctx context.Context) InTotoSlsaProvenanceV1PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InTotoSlsaProvenanceV1) *InTotoSlsaProvenanceV1 {
		return &v
	}).(InTotoSlsaProvenanceV1PtrOutput)
}

func (o InTotoSlsaProvenanceV1Output) Predicate() SlsaProvenanceV1PtrOutput {
	return o.ApplyT(func(v InTotoSlsaProvenanceV1) *SlsaProvenanceV1 { return v.Predicate }).(SlsaProvenanceV1PtrOutput)
}

func (o InTotoSlsaProvenanceV1Output) PredicateType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InTotoSlsaProvenanceV1) *string { return v.PredicateType }).(pulumi.StringPtrOutput)
}

func (o InTotoSlsaProvenanceV1Output) Subject() SubjectArrayOutput {
	return o.ApplyT(func(v InTotoSlsaProvenanceV1) []Subject { return v.Subject }).(SubjectArrayOutput)
}

// InToto spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement
func (o InTotoSlsaProvenanceV1Output) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InTotoSlsaProvenanceV1) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type InTotoSlsaProvenanceV1PtrOutput struct{ *pulumi.OutputState }

func (InTotoSlsaProvenanceV1PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InTotoSlsaProvenanceV1)(nil)).Elem()
}

func (o InTotoSlsaProvenanceV1PtrOutput) ToInTotoSlsaProvenanceV1PtrOutput() InTotoSlsaProvenanceV1PtrOutput {
	return o
}

func (o InTotoSlsaProvenanceV1PtrOutput) ToInTotoSlsaProvenanceV1PtrOutputWithContext(ctx context.Context) InTotoSlsaProvenanceV1PtrOutput {
	return o
}

func (o InTotoSlsaProvenanceV1PtrOutput) Elem() InTotoSlsaProvenanceV1Output {
	return o.ApplyT(func(v *InTotoSlsaProvenanceV1) InTotoSlsaProvenanceV1 {
		if v != nil {
			return *v
		}
		var ret InTotoSlsaProvenanceV1
		return ret
	}).(InTotoSlsaProvenanceV1Output)
}

func (o InTotoSlsaProvenanceV1PtrOutput) Predicate() SlsaProvenanceV1PtrOutput {
	return o.ApplyT(func(v *InTotoSlsaProvenanceV1) *SlsaProvenanceV1 {
		if v == nil {
			return nil
		}
		return v.Predicate
	}).(SlsaProvenanceV1PtrOutput)
}

func (o InTotoSlsaProvenanceV1PtrOutput) PredicateType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InTotoSlsaProvenanceV1) *string {
		if v == nil {
			return nil
		}
		return v.PredicateType
	}).(pulumi.StringPtrOutput)
}

func (o InTotoSlsaProvenanceV1PtrOutput) Subject() SubjectArrayOutput {
	return o.ApplyT(func(v *InTotoSlsaProvenanceV1) []Subject {
		if v == nil {
			return nil
		}
		return v.Subject
	}).(SubjectArrayOutput)
}

// InToto spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement
func (o InTotoSlsaProvenanceV1PtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InTotoSlsaProvenanceV1) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type InTotoSlsaProvenanceV1Response struct {
	Predicate     SlsaProvenanceV1Response `pulumi:"predicate"`
	PredicateType string                   `pulumi:"predicateType"`
	Subject       []SubjectResponse        `pulumi:"subject"`
	// InToto spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement
	Type string `pulumi:"type"`
}

type InTotoSlsaProvenanceV1ResponseOutput struct{ *pulumi.OutputState }

func (InTotoSlsaProvenanceV1ResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InTotoSlsaProvenanceV1Response)(nil)).Elem()
}

func (o InTotoSlsaProvenanceV1ResponseOutput) ToInTotoSlsaProvenanceV1ResponseOutput() InTotoSlsaProvenanceV1ResponseOutput {
	return o
}

func (o InTotoSlsaProvenanceV1ResponseOutput) ToInTotoSlsaProvenanceV1ResponseOutputWithContext(ctx context.Context) InTotoSlsaProvenanceV1ResponseOutput {
	return o
}

func (o InTotoSlsaProvenanceV1ResponseOutput) Predicate() SlsaProvenanceV1ResponseOutput {
	return o.ApplyT(func(v InTotoSlsaProvenanceV1Response) SlsaProvenanceV1Response { return v.Predicate }).(SlsaProvenanceV1ResponseOutput)
}

func (o InTotoSlsaProvenanceV1ResponseOutput) PredicateType() pulumi.StringOutput {
	return o.ApplyT(func(v InTotoSlsaProvenanceV1Response) string { return v.PredicateType }).(pulumi.StringOutput)
}

func (o InTotoSlsaProvenanceV1ResponseOutput) Subject() SubjectResponseArrayOutput {
	return o.ApplyT(func(v InTotoSlsaProvenanceV1Response) []SubjectResponse { return v.Subject }).(SubjectResponseArrayOutput)
}

// InToto spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement
func (o InTotoSlsaProvenanceV1ResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v InTotoSlsaProvenanceV1Response) string { return v.Type }).(pulumi.StringOutput)
}

// Spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement The serialized InTotoStatement will be stored as Envelope.payload. Envelope.payloadType is always "application/vnd.in-toto+json".
type InTotoStatement struct {
	// `https://slsa.dev/provenance/v0.1` for SlsaProvenance.
	PredicateType         *string                `pulumi:"predicateType"`
	Provenance            *InTotoProvenance      `pulumi:"provenance"`
	SlsaProvenance        *SlsaProvenance        `pulumi:"slsaProvenance"`
	SlsaProvenanceZeroTwo *SlsaProvenanceZeroTwo `pulumi:"slsaProvenanceZeroTwo"`
	Subject               []Subject              `pulumi:"subject"`
	// Always `https://in-toto.io/Statement/v0.1`.
	Type *string `pulumi:"type"`
}

// InTotoStatementInput is an input type that accepts InTotoStatementArgs and InTotoStatementOutput values.
// You can construct a concrete instance of `InTotoStatementInput` via:
//
//	InTotoStatementArgs{...}
type InTotoStatementInput interface {
	pulumi.Input

	ToInTotoStatementOutput() InTotoStatementOutput
	ToInTotoStatementOutputWithContext(context.Context) InTotoStatementOutput
}

// Spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement The serialized InTotoStatement will be stored as Envelope.payload. Envelope.payloadType is always "application/vnd.in-toto+json".
type InTotoStatementArgs struct {
	// `https://slsa.dev/provenance/v0.1` for SlsaProvenance.
	PredicateType         pulumi.StringPtrInput         `pulumi:"predicateType"`
	Provenance            InTotoProvenancePtrInput      `pulumi:"provenance"`
	SlsaProvenance        SlsaProvenancePtrInput        `pulumi:"slsaProvenance"`
	SlsaProvenanceZeroTwo SlsaProvenanceZeroTwoPtrInput `pulumi:"slsaProvenanceZeroTwo"`
	Subject               SubjectArrayInput             `pulumi:"subject"`
	// Always `https://in-toto.io/Statement/v0.1`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (InTotoStatementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InTotoStatement)(nil)).Elem()
}

func (i InTotoStatementArgs) ToInTotoStatementOutput() InTotoStatementOutput {
	return i.ToInTotoStatementOutputWithContext(context.Background())
}

func (i InTotoStatementArgs) ToInTotoStatementOutputWithContext(ctx context.Context) InTotoStatementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InTotoStatementOutput)
}

func (i InTotoStatementArgs) ToInTotoStatementPtrOutput() InTotoStatementPtrOutput {
	return i.ToInTotoStatementPtrOutputWithContext(context.Background())
}

func (i InTotoStatementArgs) ToInTotoStatementPtrOutputWithContext(ctx context.Context) InTotoStatementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InTotoStatementOutput).ToInTotoStatementPtrOutputWithContext(ctx)
}

// InTotoStatementPtrInput is an input type that accepts InTotoStatementArgs, InTotoStatementPtr and InTotoStatementPtrOutput values.
// You can construct a concrete instance of `InTotoStatementPtrInput` via:
//
//	        InTotoStatementArgs{...}
//
//	or:
//
//	        nil
type InTotoStatementPtrInput interface {
	pulumi.Input

	ToInTotoStatementPtrOutput() InTotoStatementPtrOutput
	ToInTotoStatementPtrOutputWithContext(context.Context) InTotoStatementPtrOutput
}

type inTotoStatementPtrType InTotoStatementArgs

func InTotoStatementPtr(v *InTotoStatementArgs) InTotoStatementPtrInput {
	return (*inTotoStatementPtrType)(v)
}

func (*inTotoStatementPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InTotoStatement)(nil)).Elem()
}

func (i *inTotoStatementPtrType) ToInTotoStatementPtrOutput() InTotoStatementPtrOutput {
	return i.ToInTotoStatementPtrOutputWithContext(context.Background())
}

func (i *inTotoStatementPtrType) ToInTotoStatementPtrOutputWithContext(ctx context.Context) InTotoStatementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InTotoStatementPtrOutput)
}

// Spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement The serialized InTotoStatement will be stored as Envelope.payload. Envelope.payloadType is always "application/vnd.in-toto+json".
type InTotoStatementOutput struct{ *pulumi.OutputState }

func (InTotoStatementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InTotoStatement)(nil)).Elem()
}

func (o InTotoStatementOutput) ToInTotoStatementOutput() InTotoStatementOutput {
	return o
}

func (o InTotoStatementOutput) ToInTotoStatementOutputWithContext(ctx context.Context) InTotoStatementOutput {
	return o
}

func (o InTotoStatementOutput) ToInTotoStatementPtrOutput() InTotoStatementPtrOutput {
	return o.ToInTotoStatementPtrOutputWithContext(context.Background())
}

func (o InTotoStatementOutput) ToInTotoStatementPtrOutputWithContext(ctx context.Context) InTotoStatementPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InTotoStatement) *InTotoStatement {
		return &v
	}).(InTotoStatementPtrOutput)
}

// `https://slsa.dev/provenance/v0.1` for SlsaProvenance.
func (o InTotoStatementOutput) PredicateType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InTotoStatement) *string { return v.PredicateType }).(pulumi.StringPtrOutput)
}

func (o InTotoStatementOutput) Provenance() InTotoProvenancePtrOutput {
	return o.ApplyT(func(v InTotoStatement) *InTotoProvenance { return v.Provenance }).(InTotoProvenancePtrOutput)
}

func (o InTotoStatementOutput) SlsaProvenance() SlsaProvenancePtrOutput {
	return o.ApplyT(func(v InTotoStatement) *SlsaProvenance { return v.SlsaProvenance }).(SlsaProvenancePtrOutput)
}

func (o InTotoStatementOutput) SlsaProvenanceZeroTwo() SlsaProvenanceZeroTwoPtrOutput {
	return o.ApplyT(func(v InTotoStatement) *SlsaProvenanceZeroTwo { return v.SlsaProvenanceZeroTwo }).(SlsaProvenanceZeroTwoPtrOutput)
}

func (o InTotoStatementOutput) Subject() SubjectArrayOutput {
	return o.ApplyT(func(v InTotoStatement) []Subject { return v.Subject }).(SubjectArrayOutput)
}

// Always `https://in-toto.io/Statement/v0.1`.
func (o InTotoStatementOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InTotoStatement) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type InTotoStatementPtrOutput struct{ *pulumi.OutputState }

func (InTotoStatementPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InTotoStatement)(nil)).Elem()
}

func (o InTotoStatementPtrOutput) ToInTotoStatementPtrOutput() InTotoStatementPtrOutput {
	return o
}

func (o InTotoStatementPtrOutput) ToInTotoStatementPtrOutputWithContext(ctx context.Context) InTotoStatementPtrOutput {
	return o
}

func (o InTotoStatementPtrOutput) Elem() InTotoStatementOutput {
	return o.ApplyT(func(v *InTotoStatement) InTotoStatement {
		if v != nil {
			return *v
		}
		var ret InTotoStatement
		return ret
	}).(InTotoStatementOutput)
}

// `https://slsa.dev/provenance/v0.1` for SlsaProvenance.
func (o InTotoStatementPtrOutput) PredicateType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InTotoStatement) *string {
		if v == nil {
			return nil
		}
		return v.PredicateType
	}).(pulumi.StringPtrOutput)
}

func (o InTotoStatementPtrOutput) Provenance() InTotoProvenancePtrOutput {
	return o.ApplyT(func(v *InTotoStatement) *InTotoProvenance {
		if v == nil {
			return nil
		}
		return v.Provenance
	}).(InTotoProvenancePtrOutput)
}

func (o InTotoStatementPtrOutput) SlsaProvenance() SlsaProvenancePtrOutput {
	return o.ApplyT(func(v *InTotoStatement) *SlsaProvenance {
		if v == nil {
			return nil
		}
		return v.SlsaProvenance
	}).(SlsaProvenancePtrOutput)
}

func (o InTotoStatementPtrOutput) SlsaProvenanceZeroTwo() SlsaProvenanceZeroTwoPtrOutput {
	return o.ApplyT(func(v *InTotoStatement) *SlsaProvenanceZeroTwo {
		if v == nil {
			return nil
		}
		return v.SlsaProvenanceZeroTwo
	}).(SlsaProvenanceZeroTwoPtrOutput)
}

func (o InTotoStatementPtrOutput) Subject() SubjectArrayOutput {
	return o.ApplyT(func(v *InTotoStatement) []Subject {
		if v == nil {
			return nil
		}
		return v.Subject
	}).(SubjectArrayOutput)
}

// Always `https://in-toto.io/Statement/v0.1`.
func (o InTotoStatementPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InTotoStatement) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement The serialized InTotoStatement will be stored as Envelope.payload. Envelope.payloadType is always "application/vnd.in-toto+json".
type InTotoStatementResponse struct {
	// `https://slsa.dev/provenance/v0.1` for SlsaProvenance.
	PredicateType         string                        `pulumi:"predicateType"`
	Provenance            InTotoProvenanceResponse      `pulumi:"provenance"`
	SlsaProvenance        SlsaProvenanceResponse        `pulumi:"slsaProvenance"`
	SlsaProvenanceZeroTwo SlsaProvenanceZeroTwoResponse `pulumi:"slsaProvenanceZeroTwo"`
	Subject               []SubjectResponse             `pulumi:"subject"`
	// Always `https://in-toto.io/Statement/v0.1`.
	Type string `pulumi:"type"`
}

// Spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement The serialized InTotoStatement will be stored as Envelope.payload. Envelope.payloadType is always "application/vnd.in-toto+json".
type InTotoStatementResponseOutput struct{ *pulumi.OutputState }

func (InTotoStatementResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InTotoStatementResponse)(nil)).Elem()
}

func (o InTotoStatementResponseOutput) ToInTotoStatementResponseOutput() InTotoStatementResponseOutput {
	return o
}

func (o InTotoStatementResponseOutput) ToInTotoStatementResponseOutputWithContext(ctx context.Context) InTotoStatementResponseOutput {
	return o
}

// `https://slsa.dev/provenance/v0.1` for SlsaProvenance.
func (o InTotoStatementResponseOutput) PredicateType() pulumi.StringOutput {
	return o.ApplyT(func(v InTotoStatementResponse) string { return v.PredicateType }).(pulumi.StringOutput)
}

func (o InTotoStatementResponseOutput) Provenance() InTotoProvenanceResponseOutput {
	return o.ApplyT(func(v InTotoStatementResponse) InTotoProvenanceResponse { return v.Provenance }).(InTotoProvenanceResponseOutput)
}

func (o InTotoStatementResponseOutput) SlsaProvenance() SlsaProvenanceResponseOutput {
	return o.ApplyT(func(v InTotoStatementResponse) SlsaProvenanceResponse { return v.SlsaProvenance }).(SlsaProvenanceResponseOutput)
}

func (o InTotoStatementResponseOutput) SlsaProvenanceZeroTwo() SlsaProvenanceZeroTwoResponseOutput {
	return o.ApplyT(func(v InTotoStatementResponse) SlsaProvenanceZeroTwoResponse { return v.SlsaProvenanceZeroTwo }).(SlsaProvenanceZeroTwoResponseOutput)
}

func (o InTotoStatementResponseOutput) Subject() SubjectResponseArrayOutput {
	return o.ApplyT(func(v InTotoStatementResponse) []SubjectResponse { return v.Subject }).(SubjectResponseArrayOutput)
}

// Always `https://in-toto.io/Statement/v0.1`.
func (o InTotoStatementResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v InTotoStatementResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Justification provides the justification when the state of the assessment if NOT_AFFECTED.
type Justification struct {
	// Additional details on why this justification was chosen.
	Details *string `pulumi:"details"`
	// The justification type for this vulnerability.
	JustificationType *JustificationJustificationType `pulumi:"justificationType"`
}

// JustificationInput is an input type that accepts JustificationArgs and JustificationOutput values.
// You can construct a concrete instance of `JustificationInput` via:
//
//	JustificationArgs{...}
type JustificationInput interface {
	pulumi.Input

	ToJustificationOutput() JustificationOutput
	ToJustificationOutputWithContext(context.Context) JustificationOutput
}

// Justification provides the justification when the state of the assessment if NOT_AFFECTED.
type JustificationArgs struct {
	// Additional details on why this justification was chosen.
	Details pulumi.StringPtrInput `pulumi:"details"`
	// The justification type for this vulnerability.
	JustificationType JustificationJustificationTypePtrInput `pulumi:"justificationType"`
}

func (JustificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Justification)(nil)).Elem()
}

func (i JustificationArgs) ToJustificationOutput() JustificationOutput {
	return i.ToJustificationOutputWithContext(context.Background())
}

func (i JustificationArgs) ToJustificationOutputWithContext(ctx context.Context) JustificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JustificationOutput)
}

func (i JustificationArgs) ToJustificationPtrOutput() JustificationPtrOutput {
	return i.ToJustificationPtrOutputWithContext(context.Background())
}

func (i JustificationArgs) ToJustificationPtrOutputWithContext(ctx context.Context) JustificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JustificationOutput).ToJustificationPtrOutputWithContext(ctx)
}

// JustificationPtrInput is an input type that accepts JustificationArgs, JustificationPtr and JustificationPtrOutput values.
// You can construct a concrete instance of `JustificationPtrInput` via:
//
//	        JustificationArgs{...}
//
//	or:
//
//	        nil
type JustificationPtrInput interface {
	pulumi.Input

	ToJustificationPtrOutput() JustificationPtrOutput
	ToJustificationPtrOutputWithContext(context.Context) JustificationPtrOutput
}

type justificationPtrType JustificationArgs

func JustificationPtr(v *JustificationArgs) JustificationPtrInput {
	return (*justificationPtrType)(v)
}

func (*justificationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Justification)(nil)).Elem()
}

func (i *justificationPtrType) ToJustificationPtrOutput() JustificationPtrOutput {
	return i.ToJustificationPtrOutputWithContext(context.Background())
}

func (i *justificationPtrType) ToJustificationPtrOutputWithContext(ctx context.Context) JustificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JustificationPtrOutput)
}

// Justification provides the justification when the state of the assessment if NOT_AFFECTED.
type JustificationOutput struct{ *pulumi.OutputState }

func (JustificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Justification)(nil)).Elem()
}

func (o JustificationOutput) ToJustificationOutput() JustificationOutput {
	return o
}

func (o JustificationOutput) ToJustificationOutputWithContext(ctx context.Context) JustificationOutput {
	return o
}

func (o JustificationOutput) ToJustificationPtrOutput() JustificationPtrOutput {
	return o.ToJustificationPtrOutputWithContext(context.Background())
}

func (o JustificationOutput) ToJustificationPtrOutputWithContext(ctx context.Context) JustificationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Justification) *Justification {
		return &v
	}).(JustificationPtrOutput)
}

// Additional details on why this justification was chosen.
func (o JustificationOutput) Details() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Justification) *string { return v.Details }).(pulumi.StringPtrOutput)
}

// The justification type for this vulnerability.
func (o JustificationOutput) JustificationType() JustificationJustificationTypePtrOutput {
	return o.ApplyT(func(v Justification) *JustificationJustificationType { return v.JustificationType }).(JustificationJustificationTypePtrOutput)
}

type JustificationPtrOutput struct{ *pulumi.OutputState }

func (JustificationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Justification)(nil)).Elem()
}

func (o JustificationPtrOutput) ToJustificationPtrOutput() JustificationPtrOutput {
	return o
}

func (o JustificationPtrOutput) ToJustificationPtrOutputWithContext(ctx context.Context) JustificationPtrOutput {
	return o
}

func (o JustificationPtrOutput) Elem() JustificationOutput {
	return o.ApplyT(func(v *Justification) Justification {
		if v != nil {
			return *v
		}
		var ret Justification
		return ret
	}).(JustificationOutput)
}

// Additional details on why this justification was chosen.
func (o JustificationPtrOutput) Details() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Justification) *string {
		if v == nil {
			return nil
		}
		return v.Details
	}).(pulumi.StringPtrOutput)
}

// The justification type for this vulnerability.
func (o JustificationPtrOutput) JustificationType() JustificationJustificationTypePtrOutput {
	return o.ApplyT(func(v *Justification) *JustificationJustificationType {
		if v == nil {
			return nil
		}
		return v.JustificationType
	}).(JustificationJustificationTypePtrOutput)
}

// Justification provides the justification when the state of the assessment if NOT_AFFECTED.
type JustificationResponse struct {
	// Additional details on why this justification was chosen.
	Details string `pulumi:"details"`
	// The justification type for this vulnerability.
	JustificationType string `pulumi:"justificationType"`
}

// Justification provides the justification when the state of the assessment if NOT_AFFECTED.
type JustificationResponseOutput struct{ *pulumi.OutputState }

func (JustificationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JustificationResponse)(nil)).Elem()
}

func (o JustificationResponseOutput) ToJustificationResponseOutput() JustificationResponseOutput {
	return o
}

func (o JustificationResponseOutput) ToJustificationResponseOutputWithContext(ctx context.Context) JustificationResponseOutput {
	return o
}

// Additional details on why this justification was chosen.
func (o JustificationResponseOutput) Details() pulumi.StringOutput {
	return o.ApplyT(func(v JustificationResponse) string { return v.Details }).(pulumi.StringOutput)
}

// The justification type for this vulnerability.
func (o JustificationResponseOutput) JustificationType() pulumi.StringOutput {
	return o.ApplyT(func(v JustificationResponse) string { return v.JustificationType }).(pulumi.StringOutput)
}

type Jwt struct {
	// The compact encoding of a JWS, which is always three base64 encoded strings joined by periods. For details, see: https://tools.ietf.org/html/rfc7515.html#section-3.1
	CompactJwt *string `pulumi:"compactJwt"`
}

// JwtInput is an input type that accepts JwtArgs and JwtOutput values.
// You can construct a concrete instance of `JwtInput` via:
//
//	JwtArgs{...}
type JwtInput interface {
	pulumi.Input

	ToJwtOutput() JwtOutput
	ToJwtOutputWithContext(context.Context) JwtOutput
}

type JwtArgs struct {
	// The compact encoding of a JWS, which is always three base64 encoded strings joined by periods. For details, see: https://tools.ietf.org/html/rfc7515.html#section-3.1
	CompactJwt pulumi.StringPtrInput `pulumi:"compactJwt"`
}

func (JwtArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Jwt)(nil)).Elem()
}

func (i JwtArgs) ToJwtOutput() JwtOutput {
	return i.ToJwtOutputWithContext(context.Background())
}

func (i JwtArgs) ToJwtOutputWithContext(ctx context.Context) JwtOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JwtOutput)
}

// JwtArrayInput is an input type that accepts JwtArray and JwtArrayOutput values.
// You can construct a concrete instance of `JwtArrayInput` via:
//
//	JwtArray{ JwtArgs{...} }
type JwtArrayInput interface {
	pulumi.Input

	ToJwtArrayOutput() JwtArrayOutput
	ToJwtArrayOutputWithContext(context.Context) JwtArrayOutput
}

type JwtArray []JwtInput

func (JwtArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Jwt)(nil)).Elem()
}

func (i JwtArray) ToJwtArrayOutput() JwtArrayOutput {
	return i.ToJwtArrayOutputWithContext(context.Background())
}

func (i JwtArray) ToJwtArrayOutputWithContext(ctx context.Context) JwtArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JwtArrayOutput)
}

type JwtOutput struct{ *pulumi.OutputState }

func (JwtOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Jwt)(nil)).Elem()
}

func (o JwtOutput) ToJwtOutput() JwtOutput {
	return o
}

func (o JwtOutput) ToJwtOutputWithContext(ctx context.Context) JwtOutput {
	return o
}

// The compact encoding of a JWS, which is always three base64 encoded strings joined by periods. For details, see: https://tools.ietf.org/html/rfc7515.html#section-3.1
func (o JwtOutput) CompactJwt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Jwt) *string { return v.CompactJwt }).(pulumi.StringPtrOutput)
}

type JwtArrayOutput struct{ *pulumi.OutputState }

func (JwtArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Jwt)(nil)).Elem()
}

func (o JwtArrayOutput) ToJwtArrayOutput() JwtArrayOutput {
	return o
}

func (o JwtArrayOutput) ToJwtArrayOutputWithContext(ctx context.Context) JwtArrayOutput {
	return o
}

func (o JwtArrayOutput) Index(i pulumi.IntInput) JwtOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Jwt {
		return vs[0].([]Jwt)[vs[1].(int)]
	}).(JwtOutput)
}

type JwtResponse struct {
	// The compact encoding of a JWS, which is always three base64 encoded strings joined by periods. For details, see: https://tools.ietf.org/html/rfc7515.html#section-3.1
	CompactJwt string `pulumi:"compactJwt"`
}

type JwtResponseOutput struct{ *pulumi.OutputState }

func (JwtResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JwtResponse)(nil)).Elem()
}

func (o JwtResponseOutput) ToJwtResponseOutput() JwtResponseOutput {
	return o
}

func (o JwtResponseOutput) ToJwtResponseOutputWithContext(ctx context.Context) JwtResponseOutput {
	return o
}

// The compact encoding of a JWS, which is always three base64 encoded strings joined by periods. For details, see: https://tools.ietf.org/html/rfc7515.html#section-3.1
func (o JwtResponseOutput) CompactJwt() pulumi.StringOutput {
	return o.ApplyT(func(v JwtResponse) string { return v.CompactJwt }).(pulumi.StringOutput)
}

type JwtResponseArrayOutput struct{ *pulumi.OutputState }

func (JwtResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JwtResponse)(nil)).Elem()
}

func (o JwtResponseArrayOutput) ToJwtResponseArrayOutput() JwtResponseArrayOutput {
	return o
}

func (o JwtResponseArrayOutput) ToJwtResponseArrayOutputWithContext(ctx context.Context) JwtResponseArrayOutput {
	return o
}

func (o JwtResponseArrayOutput) Index(i pulumi.IntInput) JwtResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JwtResponse {
		return vs[0].([]JwtResponse)[vs[1].(int)]
	}).(JwtResponseOutput)
}

type KnowledgeBase struct {
	// The KB name (generally of the form KB[0-9]+ (e.g., KB123456)).
	Name *string `pulumi:"name"`
	// A link to the KB in the [Windows update catalog] (https://www.catalog.update.microsoft.com/).
	Url *string `pulumi:"url"`
}

// KnowledgeBaseInput is an input type that accepts KnowledgeBaseArgs and KnowledgeBaseOutput values.
// You can construct a concrete instance of `KnowledgeBaseInput` via:
//
//	KnowledgeBaseArgs{...}
type KnowledgeBaseInput interface {
	pulumi.Input

	ToKnowledgeBaseOutput() KnowledgeBaseOutput
	ToKnowledgeBaseOutputWithContext(context.Context) KnowledgeBaseOutput
}

type KnowledgeBaseArgs struct {
	// The KB name (generally of the form KB[0-9]+ (e.g., KB123456)).
	Name pulumi.StringPtrInput `pulumi:"name"`
	// A link to the KB in the [Windows update catalog] (https://www.catalog.update.microsoft.com/).
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (KnowledgeBaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KnowledgeBase)(nil)).Elem()
}

func (i KnowledgeBaseArgs) ToKnowledgeBaseOutput() KnowledgeBaseOutput {
	return i.ToKnowledgeBaseOutputWithContext(context.Background())
}

func (i KnowledgeBaseArgs) ToKnowledgeBaseOutputWithContext(ctx context.Context) KnowledgeBaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KnowledgeBaseOutput)
}

// KnowledgeBaseArrayInput is an input type that accepts KnowledgeBaseArray and KnowledgeBaseArrayOutput values.
// You can construct a concrete instance of `KnowledgeBaseArrayInput` via:
//
//	KnowledgeBaseArray{ KnowledgeBaseArgs{...} }
type KnowledgeBaseArrayInput interface {
	pulumi.Input

	ToKnowledgeBaseArrayOutput() KnowledgeBaseArrayOutput
	ToKnowledgeBaseArrayOutputWithContext(context.Context) KnowledgeBaseArrayOutput
}

type KnowledgeBaseArray []KnowledgeBaseInput

func (KnowledgeBaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KnowledgeBase)(nil)).Elem()
}

func (i KnowledgeBaseArray) ToKnowledgeBaseArrayOutput() KnowledgeBaseArrayOutput {
	return i.ToKnowledgeBaseArrayOutputWithContext(context.Background())
}

func (i KnowledgeBaseArray) ToKnowledgeBaseArrayOutputWithContext(ctx context.Context) KnowledgeBaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KnowledgeBaseArrayOutput)
}

type KnowledgeBaseOutput struct{ *pulumi.OutputState }

func (KnowledgeBaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KnowledgeBase)(nil)).Elem()
}

func (o KnowledgeBaseOutput) ToKnowledgeBaseOutput() KnowledgeBaseOutput {
	return o
}

func (o KnowledgeBaseOutput) ToKnowledgeBaseOutputWithContext(ctx context.Context) KnowledgeBaseOutput {
	return o
}

// The KB name (generally of the form KB[0-9]+ (e.g., KB123456)).
func (o KnowledgeBaseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KnowledgeBase) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// A link to the KB in the [Windows update catalog] (https://www.catalog.update.microsoft.com/).
func (o KnowledgeBaseOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KnowledgeBase) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type KnowledgeBaseArrayOutput struct{ *pulumi.OutputState }

func (KnowledgeBaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KnowledgeBase)(nil)).Elem()
}

func (o KnowledgeBaseArrayOutput) ToKnowledgeBaseArrayOutput() KnowledgeBaseArrayOutput {
	return o
}

func (o KnowledgeBaseArrayOutput) ToKnowledgeBaseArrayOutputWithContext(ctx context.Context) KnowledgeBaseArrayOutput {
	return o
}

func (o KnowledgeBaseArrayOutput) Index(i pulumi.IntInput) KnowledgeBaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KnowledgeBase {
		return vs[0].([]KnowledgeBase)[vs[1].(int)]
	}).(KnowledgeBaseOutput)
}

type KnowledgeBaseResponse struct {
	// The KB name (generally of the form KB[0-9]+ (e.g., KB123456)).
	Name string `pulumi:"name"`
	// A link to the KB in the [Windows update catalog] (https://www.catalog.update.microsoft.com/).
	Url string `pulumi:"url"`
}

type KnowledgeBaseResponseOutput struct{ *pulumi.OutputState }

func (KnowledgeBaseResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KnowledgeBaseResponse)(nil)).Elem()
}

func (o KnowledgeBaseResponseOutput) ToKnowledgeBaseResponseOutput() KnowledgeBaseResponseOutput {
	return o
}

func (o KnowledgeBaseResponseOutput) ToKnowledgeBaseResponseOutputWithContext(ctx context.Context) KnowledgeBaseResponseOutput {
	return o
}

// The KB name (generally of the form KB[0-9]+ (e.g., KB123456)).
func (o KnowledgeBaseResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v KnowledgeBaseResponse) string { return v.Name }).(pulumi.StringOutput)
}

// A link to the KB in the [Windows update catalog] (https://www.catalog.update.microsoft.com/).
func (o KnowledgeBaseResponseOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v KnowledgeBaseResponse) string { return v.Url }).(pulumi.StringOutput)
}

type KnowledgeBaseResponseArrayOutput struct{ *pulumi.OutputState }

func (KnowledgeBaseResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KnowledgeBaseResponse)(nil)).Elem()
}

func (o KnowledgeBaseResponseArrayOutput) ToKnowledgeBaseResponseArrayOutput() KnowledgeBaseResponseArrayOutput {
	return o
}

func (o KnowledgeBaseResponseArrayOutput) ToKnowledgeBaseResponseArrayOutputWithContext(ctx context.Context) KnowledgeBaseResponseArrayOutput {
	return o
}

func (o KnowledgeBaseResponseArrayOutput) Index(i pulumi.IntInput) KnowledgeBaseResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KnowledgeBaseResponse {
		return vs[0].([]KnowledgeBaseResponse)[vs[1].(int)]
	}).(KnowledgeBaseResponseOutput)
}

// Layer holds metadata specific to a layer of a Docker image.
type Layer struct {
	// The recovered arguments to the Dockerfile directive.
	Arguments *string `pulumi:"arguments"`
	// The recovered Dockerfile directive used to construct this layer. See https://docs.docker.com/engine/reference/builder/ for more information.
	Directive string `pulumi:"directive"`
}

// LayerInput is an input type that accepts LayerArgs and LayerOutput values.
// You can construct a concrete instance of `LayerInput` via:
//
//	LayerArgs{...}
type LayerInput interface {
	pulumi.Input

	ToLayerOutput() LayerOutput
	ToLayerOutputWithContext(context.Context) LayerOutput
}

// Layer holds metadata specific to a layer of a Docker image.
type LayerArgs struct {
	// The recovered arguments to the Dockerfile directive.
	Arguments pulumi.StringPtrInput `pulumi:"arguments"`
	// The recovered Dockerfile directive used to construct this layer. See https://docs.docker.com/engine/reference/builder/ for more information.
	Directive pulumi.StringInput `pulumi:"directive"`
}

func (LayerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Layer)(nil)).Elem()
}

func (i LayerArgs) ToLayerOutput() LayerOutput {
	return i.ToLayerOutputWithContext(context.Background())
}

func (i LayerArgs) ToLayerOutputWithContext(ctx context.Context) LayerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LayerOutput)
}

// LayerArrayInput is an input type that accepts LayerArray and LayerArrayOutput values.
// You can construct a concrete instance of `LayerArrayInput` via:
//
//	LayerArray{ LayerArgs{...} }
type LayerArrayInput interface {
	pulumi.Input

	ToLayerArrayOutput() LayerArrayOutput
	ToLayerArrayOutputWithContext(context.Context) LayerArrayOutput
}

type LayerArray []LayerInput

func (LayerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Layer)(nil)).Elem()
}

func (i LayerArray) ToLayerArrayOutput() LayerArrayOutput {
	return i.ToLayerArrayOutputWithContext(context.Background())
}

func (i LayerArray) ToLayerArrayOutputWithContext(ctx context.Context) LayerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LayerArrayOutput)
}

// Layer holds metadata specific to a layer of a Docker image.
type LayerOutput struct{ *pulumi.OutputState }

func (LayerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Layer)(nil)).Elem()
}

func (o LayerOutput) ToLayerOutput() LayerOutput {
	return o
}

func (o LayerOutput) ToLayerOutputWithContext(ctx context.Context) LayerOutput {
	return o
}

// The recovered arguments to the Dockerfile directive.
func (o LayerOutput) Arguments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Layer) *string { return v.Arguments }).(pulumi.StringPtrOutput)
}

// The recovered Dockerfile directive used to construct this layer. See https://docs.docker.com/engine/reference/builder/ for more information.
func (o LayerOutput) Directive() pulumi.StringOutput {
	return o.ApplyT(func(v Layer) string { return v.Directive }).(pulumi.StringOutput)
}

type LayerArrayOutput struct{ *pulumi.OutputState }

func (LayerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Layer)(nil)).Elem()
}

func (o LayerArrayOutput) ToLayerArrayOutput() LayerArrayOutput {
	return o
}

func (o LayerArrayOutput) ToLayerArrayOutputWithContext(ctx context.Context) LayerArrayOutput {
	return o
}

func (o LayerArrayOutput) Index(i pulumi.IntInput) LayerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Layer {
		return vs[0].([]Layer)[vs[1].(int)]
	}).(LayerOutput)
}

// Layer holds metadata specific to a layer of a Docker image.
type LayerResponse struct {
	// The recovered arguments to the Dockerfile directive.
	Arguments string `pulumi:"arguments"`
	// The recovered Dockerfile directive used to construct this layer. See https://docs.docker.com/engine/reference/builder/ for more information.
	Directive string `pulumi:"directive"`
}

// Layer holds metadata specific to a layer of a Docker image.
type LayerResponseOutput struct{ *pulumi.OutputState }

func (LayerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LayerResponse)(nil)).Elem()
}

func (o LayerResponseOutput) ToLayerResponseOutput() LayerResponseOutput {
	return o
}

func (o LayerResponseOutput) ToLayerResponseOutputWithContext(ctx context.Context) LayerResponseOutput {
	return o
}

// The recovered arguments to the Dockerfile directive.
func (o LayerResponseOutput) Arguments() pulumi.StringOutput {
	return o.ApplyT(func(v LayerResponse) string { return v.Arguments }).(pulumi.StringOutput)
}

// The recovered Dockerfile directive used to construct this layer. See https://docs.docker.com/engine/reference/builder/ for more information.
func (o LayerResponseOutput) Directive() pulumi.StringOutput {
	return o.ApplyT(func(v LayerResponse) string { return v.Directive }).(pulumi.StringOutput)
}

type LayerResponseArrayOutput struct{ *pulumi.OutputState }

func (LayerResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LayerResponse)(nil)).Elem()
}

func (o LayerResponseArrayOutput) ToLayerResponseArrayOutput() LayerResponseArrayOutput {
	return o
}

func (o LayerResponseArrayOutput) ToLayerResponseArrayOutputWithContext(ctx context.Context) LayerResponseArrayOutput {
	return o
}

func (o LayerResponseArrayOutput) Index(i pulumi.IntInput) LayerResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LayerResponse {
		return vs[0].([]LayerResponse)[vs[1].(int)]
	}).(LayerResponseOutput)
}

// License information.
type License struct {
	// Comments
	Comments *string `pulumi:"comments"`
	// Often a single license can be used to represent the licensing terms. Sometimes it is necessary to include a choice of one or more licenses or some combination of license identifiers. Examples: "LGPL-2.1-only OR MIT", "LGPL-2.1-only AND MIT", "GPL-2.0-or-later WITH Bison-exception-2.2".
	Expression *string `pulumi:"expression"`
}

// LicenseInput is an input type that accepts LicenseArgs and LicenseOutput values.
// You can construct a concrete instance of `LicenseInput` via:
//
//	LicenseArgs{...}
type LicenseInput interface {
	pulumi.Input

	ToLicenseOutput() LicenseOutput
	ToLicenseOutputWithContext(context.Context) LicenseOutput
}

// License information.
type LicenseArgs struct {
	// Comments
	Comments pulumi.StringPtrInput `pulumi:"comments"`
	// Often a single license can be used to represent the licensing terms. Sometimes it is necessary to include a choice of one or more licenses or some combination of license identifiers. Examples: "LGPL-2.1-only OR MIT", "LGPL-2.1-only AND MIT", "GPL-2.0-or-later WITH Bison-exception-2.2".
	Expression pulumi.StringPtrInput `pulumi:"expression"`
}

func (LicenseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*License)(nil)).Elem()
}

func (i LicenseArgs) ToLicenseOutput() LicenseOutput {
	return i.ToLicenseOutputWithContext(context.Background())
}

func (i LicenseArgs) ToLicenseOutputWithContext(ctx context.Context) LicenseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseOutput)
}

func (i LicenseArgs) ToLicensePtrOutput() LicensePtrOutput {
	return i.ToLicensePtrOutputWithContext(context.Background())
}

func (i LicenseArgs) ToLicensePtrOutputWithContext(ctx context.Context) LicensePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseOutput).ToLicensePtrOutputWithContext(ctx)
}

// LicensePtrInput is an input type that accepts LicenseArgs, LicensePtr and LicensePtrOutput values.
// You can construct a concrete instance of `LicensePtrInput` via:
//
//	        LicenseArgs{...}
//
//	or:
//
//	        nil
type LicensePtrInput interface {
	pulumi.Input

	ToLicensePtrOutput() LicensePtrOutput
	ToLicensePtrOutputWithContext(context.Context) LicensePtrOutput
}

type licensePtrType LicenseArgs

func LicensePtr(v *LicenseArgs) LicensePtrInput {
	return (*licensePtrType)(v)
}

func (*licensePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**License)(nil)).Elem()
}

func (i *licensePtrType) ToLicensePtrOutput() LicensePtrOutput {
	return i.ToLicensePtrOutputWithContext(context.Background())
}

func (i *licensePtrType) ToLicensePtrOutputWithContext(ctx context.Context) LicensePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicensePtrOutput)
}

// License information.
type LicenseOutput struct{ *pulumi.OutputState }

func (LicenseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*License)(nil)).Elem()
}

func (o LicenseOutput) ToLicenseOutput() LicenseOutput {
	return o
}

func (o LicenseOutput) ToLicenseOutputWithContext(ctx context.Context) LicenseOutput {
	return o
}

func (o LicenseOutput) ToLicensePtrOutput() LicensePtrOutput {
	return o.ToLicensePtrOutputWithContext(context.Background())
}

func (o LicenseOutput) ToLicensePtrOutputWithContext(ctx context.Context) LicensePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v License) *License {
		return &v
	}).(LicensePtrOutput)
}

// Comments
func (o LicenseOutput) Comments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v License) *string { return v.Comments }).(pulumi.StringPtrOutput)
}

// Often a single license can be used to represent the licensing terms. Sometimes it is necessary to include a choice of one or more licenses or some combination of license identifiers. Examples: "LGPL-2.1-only OR MIT", "LGPL-2.1-only AND MIT", "GPL-2.0-or-later WITH Bison-exception-2.2".
func (o LicenseOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v License) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

type LicensePtrOutput struct{ *pulumi.OutputState }

func (LicensePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**License)(nil)).Elem()
}

func (o LicensePtrOutput) ToLicensePtrOutput() LicensePtrOutput {
	return o
}

func (o LicensePtrOutput) ToLicensePtrOutputWithContext(ctx context.Context) LicensePtrOutput {
	return o
}

func (o LicensePtrOutput) Elem() LicenseOutput {
	return o.ApplyT(func(v *License) License {
		if v != nil {
			return *v
		}
		var ret License
		return ret
	}).(LicenseOutput)
}

// Comments
func (o LicensePtrOutput) Comments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *License) *string {
		if v == nil {
			return nil
		}
		return v.Comments
	}).(pulumi.StringPtrOutput)
}

// Often a single license can be used to represent the licensing terms. Sometimes it is necessary to include a choice of one or more licenses or some combination of license identifiers. Examples: "LGPL-2.1-only OR MIT", "LGPL-2.1-only AND MIT", "GPL-2.0-or-later WITH Bison-exception-2.2".
func (o LicensePtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *License) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// License information.
type LicenseResponse struct {
	// Comments
	Comments string `pulumi:"comments"`
	// Often a single license can be used to represent the licensing terms. Sometimes it is necessary to include a choice of one or more licenses or some combination of license identifiers. Examples: "LGPL-2.1-only OR MIT", "LGPL-2.1-only AND MIT", "GPL-2.0-or-later WITH Bison-exception-2.2".
	Expression string `pulumi:"expression"`
}

// License information.
type LicenseResponseOutput struct{ *pulumi.OutputState }

func (LicenseResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LicenseResponse)(nil)).Elem()
}

func (o LicenseResponseOutput) ToLicenseResponseOutput() LicenseResponseOutput {
	return o
}

func (o LicenseResponseOutput) ToLicenseResponseOutputWithContext(ctx context.Context) LicenseResponseOutput {
	return o
}

// Comments
func (o LicenseResponseOutput) Comments() pulumi.StringOutput {
	return o.ApplyT(func(v LicenseResponse) string { return v.Comments }).(pulumi.StringOutput)
}

// Often a single license can be used to represent the licensing terms. Sometimes it is necessary to include a choice of one or more licenses or some combination of license identifiers. Examples: "LGPL-2.1-only OR MIT", "LGPL-2.1-only AND MIT", "GPL-2.0-or-later WITH Bison-exception-2.2".
func (o LicenseResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v LicenseResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// An occurrence of a particular package installation found within a system's filesystem. E.g., glibc was found in `/var/lib/dpkg/status`.
type Location struct {
	// Deprecated. The CPE URI in [CPE format](https://cpe.mitre.org/specification/)
	//
	// Deprecated: Deprecated. The CPE URI in [CPE format](https://cpe.mitre.org/specification/)
	CpeUri *string `pulumi:"cpeUri"`
	// The path from which we gathered that this package/version is installed.
	Path *string `pulumi:"path"`
	// Deprecated. The version installed at this location.
	//
	// Deprecated: Deprecated. The version installed at this location.
	Version *Version `pulumi:"version"`
}

// LocationInput is an input type that accepts LocationArgs and LocationOutput values.
// You can construct a concrete instance of `LocationInput` via:
//
//	LocationArgs{...}
type LocationInput interface {
	pulumi.Input

	ToLocationOutput() LocationOutput
	ToLocationOutputWithContext(context.Context) LocationOutput
}

// An occurrence of a particular package installation found within a system's filesystem. E.g., glibc was found in `/var/lib/dpkg/status`.
type LocationArgs struct {
	// Deprecated. The CPE URI in [CPE format](https://cpe.mitre.org/specification/)
	//
	// Deprecated: Deprecated. The CPE URI in [CPE format](https://cpe.mitre.org/specification/)
	CpeUri pulumi.StringPtrInput `pulumi:"cpeUri"`
	// The path from which we gathered that this package/version is installed.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Deprecated. The version installed at this location.
	//
	// Deprecated: Deprecated. The version installed at this location.
	Version VersionPtrInput `pulumi:"version"`
}

func (LocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Location)(nil)).Elem()
}

func (i LocationArgs) ToLocationOutput() LocationOutput {
	return i.ToLocationOutputWithContext(context.Background())
}

func (i LocationArgs) ToLocationOutputWithContext(ctx context.Context) LocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationOutput)
}

// LocationArrayInput is an input type that accepts LocationArray and LocationArrayOutput values.
// You can construct a concrete instance of `LocationArrayInput` via:
//
//	LocationArray{ LocationArgs{...} }
type LocationArrayInput interface {
	pulumi.Input

	ToLocationArrayOutput() LocationArrayOutput
	ToLocationArrayOutputWithContext(context.Context) LocationArrayOutput
}

type LocationArray []LocationInput

func (LocationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Location)(nil)).Elem()
}

func (i LocationArray) ToLocationArrayOutput() LocationArrayOutput {
	return i.ToLocationArrayOutputWithContext(context.Background())
}

func (i LocationArray) ToLocationArrayOutputWithContext(ctx context.Context) LocationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationArrayOutput)
}

// An occurrence of a particular package installation found within a system's filesystem. E.g., glibc was found in `/var/lib/dpkg/status`.
type LocationOutput struct{ *pulumi.OutputState }

func (LocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Location)(nil)).Elem()
}

func (o LocationOutput) ToLocationOutput() LocationOutput {
	return o
}

func (o LocationOutput) ToLocationOutputWithContext(ctx context.Context) LocationOutput {
	return o
}

// Deprecated. The CPE URI in [CPE format](https://cpe.mitre.org/specification/)
//
// Deprecated: Deprecated. The CPE URI in [CPE format](https://cpe.mitre.org/specification/)
func (o LocationOutput) CpeUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Location) *string { return v.CpeUri }).(pulumi.StringPtrOutput)
}

// The path from which we gathered that this package/version is installed.
func (o LocationOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Location) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Deprecated. The version installed at this location.
//
// Deprecated: Deprecated. The version installed at this location.
func (o LocationOutput) Version() VersionPtrOutput {
	return o.ApplyT(func(v Location) *Version { return v.Version }).(VersionPtrOutput)
}

type LocationArrayOutput struct{ *pulumi.OutputState }

func (LocationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Location)(nil)).Elem()
}

func (o LocationArrayOutput) ToLocationArrayOutput() LocationArrayOutput {
	return o
}

func (o LocationArrayOutput) ToLocationArrayOutputWithContext(ctx context.Context) LocationArrayOutput {
	return o
}

func (o LocationArrayOutput) Index(i pulumi.IntInput) LocationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Location {
		return vs[0].([]Location)[vs[1].(int)]
	}).(LocationOutput)
}

// An occurrence of a particular package installation found within a system's filesystem. E.g., glibc was found in `/var/lib/dpkg/status`.
type LocationResponse struct {
	// Deprecated. The CPE URI in [CPE format](https://cpe.mitre.org/specification/)
	//
	// Deprecated: Deprecated. The CPE URI in [CPE format](https://cpe.mitre.org/specification/)
	CpeUri string `pulumi:"cpeUri"`
	// The path from which we gathered that this package/version is installed.
	Path string `pulumi:"path"`
	// Deprecated. The version installed at this location.
	//
	// Deprecated: Deprecated. The version installed at this location.
	Version VersionResponse `pulumi:"version"`
}

// An occurrence of a particular package installation found within a system's filesystem. E.g., glibc was found in `/var/lib/dpkg/status`.
type LocationResponseOutput struct{ *pulumi.OutputState }

func (LocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationResponse)(nil)).Elem()
}

func (o LocationResponseOutput) ToLocationResponseOutput() LocationResponseOutput {
	return o
}

func (o LocationResponseOutput) ToLocationResponseOutputWithContext(ctx context.Context) LocationResponseOutput {
	return o
}

// Deprecated. The CPE URI in [CPE format](https://cpe.mitre.org/specification/)
//
// Deprecated: Deprecated. The CPE URI in [CPE format](https://cpe.mitre.org/specification/)
func (o LocationResponseOutput) CpeUri() pulumi.StringOutput {
	return o.ApplyT(func(v LocationResponse) string { return v.CpeUri }).(pulumi.StringOutput)
}

// The path from which we gathered that this package/version is installed.
func (o LocationResponseOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v LocationResponse) string { return v.Path }).(pulumi.StringOutput)
}

// Deprecated. The version installed at this location.
//
// Deprecated: Deprecated. The version installed at this location.
func (o LocationResponseOutput) Version() VersionResponseOutput {
	return o.ApplyT(func(v LocationResponse) VersionResponse { return v.Version }).(VersionResponseOutput)
}

type LocationResponseArrayOutput struct{ *pulumi.OutputState }

func (LocationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LocationResponse)(nil)).Elem()
}

func (o LocationResponseArrayOutput) ToLocationResponseArrayOutput() LocationResponseArrayOutput {
	return o
}

func (o LocationResponseArrayOutput) ToLocationResponseArrayOutputWithContext(ctx context.Context) LocationResponseArrayOutput {
	return o
}

func (o LocationResponseArrayOutput) Index(i pulumi.IntInput) LocationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LocationResponse {
		return vs[0].([]LocationResponse)[vs[1].(int)]
	}).(LocationResponseOutput)
}

type Material struct {
	Digest map[string]string `pulumi:"digest"`
	Uri    *string           `pulumi:"uri"`
}

// MaterialInput is an input type that accepts MaterialArgs and MaterialOutput values.
// You can construct a concrete instance of `MaterialInput` via:
//
//	MaterialArgs{...}
type MaterialInput interface {
	pulumi.Input

	ToMaterialOutput() MaterialOutput
	ToMaterialOutputWithContext(context.Context) MaterialOutput
}

type MaterialArgs struct {
	Digest pulumi.StringMapInput `pulumi:"digest"`
	Uri    pulumi.StringPtrInput `pulumi:"uri"`
}

func (MaterialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Material)(nil)).Elem()
}

func (i MaterialArgs) ToMaterialOutput() MaterialOutput {
	return i.ToMaterialOutputWithContext(context.Background())
}

func (i MaterialArgs) ToMaterialOutputWithContext(ctx context.Context) MaterialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaterialOutput)
}

// MaterialArrayInput is an input type that accepts MaterialArray and MaterialArrayOutput values.
// You can construct a concrete instance of `MaterialArrayInput` via:
//
//	MaterialArray{ MaterialArgs{...} }
type MaterialArrayInput interface {
	pulumi.Input

	ToMaterialArrayOutput() MaterialArrayOutput
	ToMaterialArrayOutputWithContext(context.Context) MaterialArrayOutput
}

type MaterialArray []MaterialInput

func (MaterialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Material)(nil)).Elem()
}

func (i MaterialArray) ToMaterialArrayOutput() MaterialArrayOutput {
	return i.ToMaterialArrayOutputWithContext(context.Background())
}

func (i MaterialArray) ToMaterialArrayOutputWithContext(ctx context.Context) MaterialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaterialArrayOutput)
}

type MaterialOutput struct{ *pulumi.OutputState }

func (MaterialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Material)(nil)).Elem()
}

func (o MaterialOutput) ToMaterialOutput() MaterialOutput {
	return o
}

func (o MaterialOutput) ToMaterialOutputWithContext(ctx context.Context) MaterialOutput {
	return o
}

func (o MaterialOutput) Digest() pulumi.StringMapOutput {
	return o.ApplyT(func(v Material) map[string]string { return v.Digest }).(pulumi.StringMapOutput)
}

func (o MaterialOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Material) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type MaterialArrayOutput struct{ *pulumi.OutputState }

func (MaterialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Material)(nil)).Elem()
}

func (o MaterialArrayOutput) ToMaterialArrayOutput() MaterialArrayOutput {
	return o
}

func (o MaterialArrayOutput) ToMaterialArrayOutputWithContext(ctx context.Context) MaterialArrayOutput {
	return o
}

func (o MaterialArrayOutput) Index(i pulumi.IntInput) MaterialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Material {
		return vs[0].([]Material)[vs[1].(int)]
	}).(MaterialOutput)
}

type MaterialResponse struct {
	Digest map[string]string `pulumi:"digest"`
	Uri    string            `pulumi:"uri"`
}

type MaterialResponseOutput struct{ *pulumi.OutputState }

func (MaterialResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaterialResponse)(nil)).Elem()
}

func (o MaterialResponseOutput) ToMaterialResponseOutput() MaterialResponseOutput {
	return o
}

func (o MaterialResponseOutput) ToMaterialResponseOutputWithContext(ctx context.Context) MaterialResponseOutput {
	return o
}

func (o MaterialResponseOutput) Digest() pulumi.StringMapOutput {
	return o.ApplyT(func(v MaterialResponse) map[string]string { return v.Digest }).(pulumi.StringMapOutput)
}

func (o MaterialResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v MaterialResponse) string { return v.Uri }).(pulumi.StringOutput)
}

type MaterialResponseArrayOutput struct{ *pulumi.OutputState }

func (MaterialResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MaterialResponse)(nil)).Elem()
}

func (o MaterialResponseArrayOutput) ToMaterialResponseArrayOutput() MaterialResponseArrayOutput {
	return o
}

func (o MaterialResponseArrayOutput) ToMaterialResponseArrayOutputWithContext(ctx context.Context) MaterialResponseArrayOutput {
	return o
}

func (o MaterialResponseArrayOutput) Index(i pulumi.IntInput) MaterialResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MaterialResponse {
		return vs[0].([]MaterialResponse)[vs[1].(int)]
	}).(MaterialResponseOutput)
}

// Other properties of the build.
type Metadata struct {
	// The timestamp of when the build completed.
	BuildFinishedOn *string `pulumi:"buildFinishedOn"`
	// Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec.
	BuildInvocationId *string `pulumi:"buildInvocationId"`
	// The timestamp of when the build started.
	BuildStartedOn *string `pulumi:"buildStartedOn"`
	// Indicates that the builder claims certain fields in this message to be complete.
	Completeness *Completeness `pulumi:"completeness"`
	// If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output.
	Reproducible *bool `pulumi:"reproducible"`
}

// MetadataInput is an input type that accepts MetadataArgs and MetadataOutput values.
// You can construct a concrete instance of `MetadataInput` via:
//
//	MetadataArgs{...}
type MetadataInput interface {
	pulumi.Input

	ToMetadataOutput() MetadataOutput
	ToMetadataOutputWithContext(context.Context) MetadataOutput
}

// Other properties of the build.
type MetadataArgs struct {
	// The timestamp of when the build completed.
	BuildFinishedOn pulumi.StringPtrInput `pulumi:"buildFinishedOn"`
	// Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec.
	BuildInvocationId pulumi.StringPtrInput `pulumi:"buildInvocationId"`
	// The timestamp of when the build started.
	BuildStartedOn pulumi.StringPtrInput `pulumi:"buildStartedOn"`
	// Indicates that the builder claims certain fields in this message to be complete.
	Completeness CompletenessPtrInput `pulumi:"completeness"`
	// If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output.
	Reproducible pulumi.BoolPtrInput `pulumi:"reproducible"`
}

func (MetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Metadata)(nil)).Elem()
}

func (i MetadataArgs) ToMetadataOutput() MetadataOutput {
	return i.ToMetadataOutputWithContext(context.Background())
}

func (i MetadataArgs) ToMetadataOutputWithContext(ctx context.Context) MetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataOutput)
}

func (i MetadataArgs) ToMetadataPtrOutput() MetadataPtrOutput {
	return i.ToMetadataPtrOutputWithContext(context.Background())
}

func (i MetadataArgs) ToMetadataPtrOutputWithContext(ctx context.Context) MetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataOutput).ToMetadataPtrOutputWithContext(ctx)
}

// MetadataPtrInput is an input type that accepts MetadataArgs, MetadataPtr and MetadataPtrOutput values.
// You can construct a concrete instance of `MetadataPtrInput` via:
//
//	        MetadataArgs{...}
//
//	or:
//
//	        nil
type MetadataPtrInput interface {
	pulumi.Input

	ToMetadataPtrOutput() MetadataPtrOutput
	ToMetadataPtrOutputWithContext(context.Context) MetadataPtrOutput
}

type metadataPtrType MetadataArgs

func MetadataPtr(v *MetadataArgs) MetadataPtrInput {
	return (*metadataPtrType)(v)
}

func (*metadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Metadata)(nil)).Elem()
}

func (i *metadataPtrType) ToMetadataPtrOutput() MetadataPtrOutput {
	return i.ToMetadataPtrOutputWithContext(context.Background())
}

func (i *metadataPtrType) ToMetadataPtrOutputWithContext(ctx context.Context) MetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataPtrOutput)
}

// Other properties of the build.
type MetadataOutput struct{ *pulumi.OutputState }

func (MetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Metadata)(nil)).Elem()
}

func (o MetadataOutput) ToMetadataOutput() MetadataOutput {
	return o
}

func (o MetadataOutput) ToMetadataOutputWithContext(ctx context.Context) MetadataOutput {
	return o
}

func (o MetadataOutput) ToMetadataPtrOutput() MetadataPtrOutput {
	return o.ToMetadataPtrOutputWithContext(context.Background())
}

func (o MetadataOutput) ToMetadataPtrOutputWithContext(ctx context.Context) MetadataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Metadata) *Metadata {
		return &v
	}).(MetadataPtrOutput)
}

// The timestamp of when the build completed.
func (o MetadataOutput) BuildFinishedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Metadata) *string { return v.BuildFinishedOn }).(pulumi.StringPtrOutput)
}

// Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec.
func (o MetadataOutput) BuildInvocationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Metadata) *string { return v.BuildInvocationId }).(pulumi.StringPtrOutput)
}

// The timestamp of when the build started.
func (o MetadataOutput) BuildStartedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Metadata) *string { return v.BuildStartedOn }).(pulumi.StringPtrOutput)
}

// Indicates that the builder claims certain fields in this message to be complete.
func (o MetadataOutput) Completeness() CompletenessPtrOutput {
	return o.ApplyT(func(v Metadata) *Completeness { return v.Completeness }).(CompletenessPtrOutput)
}

// If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output.
func (o MetadataOutput) Reproducible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Metadata) *bool { return v.Reproducible }).(pulumi.BoolPtrOutput)
}

type MetadataPtrOutput struct{ *pulumi.OutputState }

func (MetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Metadata)(nil)).Elem()
}

func (o MetadataPtrOutput) ToMetadataPtrOutput() MetadataPtrOutput {
	return o
}

func (o MetadataPtrOutput) ToMetadataPtrOutputWithContext(ctx context.Context) MetadataPtrOutput {
	return o
}

func (o MetadataPtrOutput) Elem() MetadataOutput {
	return o.ApplyT(func(v *Metadata) Metadata {
		if v != nil {
			return *v
		}
		var ret Metadata
		return ret
	}).(MetadataOutput)
}

// The timestamp of when the build completed.
func (o MetadataPtrOutput) BuildFinishedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Metadata) *string {
		if v == nil {
			return nil
		}
		return v.BuildFinishedOn
	}).(pulumi.StringPtrOutput)
}

// Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec.
func (o MetadataPtrOutput) BuildInvocationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Metadata) *string {
		if v == nil {
			return nil
		}
		return v.BuildInvocationId
	}).(pulumi.StringPtrOutput)
}

// The timestamp of when the build started.
func (o MetadataPtrOutput) BuildStartedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Metadata) *string {
		if v == nil {
			return nil
		}
		return v.BuildStartedOn
	}).(pulumi.StringPtrOutput)
}

// Indicates that the builder claims certain fields in this message to be complete.
func (o MetadataPtrOutput) Completeness() CompletenessPtrOutput {
	return o.ApplyT(func(v *Metadata) *Completeness {
		if v == nil {
			return nil
		}
		return v.Completeness
	}).(CompletenessPtrOutput)
}

// If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output.
func (o MetadataPtrOutput) Reproducible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Metadata) *bool {
		if v == nil {
			return nil
		}
		return v.Reproducible
	}).(pulumi.BoolPtrOutput)
}

// Other properties of the build.
type MetadataResponse struct {
	// The timestamp of when the build completed.
	BuildFinishedOn string `pulumi:"buildFinishedOn"`
	// Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec.
	BuildInvocationId string `pulumi:"buildInvocationId"`
	// The timestamp of when the build started.
	BuildStartedOn string `pulumi:"buildStartedOn"`
	// Indicates that the builder claims certain fields in this message to be complete.
	Completeness CompletenessResponse `pulumi:"completeness"`
	// If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output.
	Reproducible bool `pulumi:"reproducible"`
}

// Other properties of the build.
type MetadataResponseOutput struct{ *pulumi.OutputState }

func (MetadataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataResponse)(nil)).Elem()
}

func (o MetadataResponseOutput) ToMetadataResponseOutput() MetadataResponseOutput {
	return o
}

func (o MetadataResponseOutput) ToMetadataResponseOutputWithContext(ctx context.Context) MetadataResponseOutput {
	return o
}

// The timestamp of when the build completed.
func (o MetadataResponseOutput) BuildFinishedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MetadataResponse) string { return v.BuildFinishedOn }).(pulumi.StringOutput)
}

// Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec.
func (o MetadataResponseOutput) BuildInvocationId() pulumi.StringOutput {
	return o.ApplyT(func(v MetadataResponse) string { return v.BuildInvocationId }).(pulumi.StringOutput)
}

// The timestamp of when the build started.
func (o MetadataResponseOutput) BuildStartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MetadataResponse) string { return v.BuildStartedOn }).(pulumi.StringOutput)
}

// Indicates that the builder claims certain fields in this message to be complete.
func (o MetadataResponseOutput) Completeness() CompletenessResponseOutput {
	return o.ApplyT(func(v MetadataResponse) CompletenessResponse { return v.Completeness }).(CompletenessResponseOutput)
}

// If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output.
func (o MetadataResponseOutput) Reproducible() pulumi.BoolOutput {
	return o.ApplyT(func(v MetadataResponse) bool { return v.Reproducible }).(pulumi.BoolOutput)
}

// Details about files that caused a compliance check to fail. display_command is a single command that can be used to display a list of non compliant files. When there is no such command, we can also iterate a list of non compliant file using 'path'.
type NonCompliantFile struct {
	// Command to display the non-compliant files.
	DisplayCommand *string `pulumi:"displayCommand"`
	// Empty if `display_command` is set.
	Path *string `pulumi:"path"`
	// Explains why a file is non compliant for a CIS check.
	Reason *string `pulumi:"reason"`
}

// NonCompliantFileInput is an input type that accepts NonCompliantFileArgs and NonCompliantFileOutput values.
// You can construct a concrete instance of `NonCompliantFileInput` via:
//
//	NonCompliantFileArgs{...}
type NonCompliantFileInput interface {
	pulumi.Input

	ToNonCompliantFileOutput() NonCompliantFileOutput
	ToNonCompliantFileOutputWithContext(context.Context) NonCompliantFileOutput
}

// Details about files that caused a compliance check to fail. display_command is a single command that can be used to display a list of non compliant files. When there is no such command, we can also iterate a list of non compliant file using 'path'.
type NonCompliantFileArgs struct {
	// Command to display the non-compliant files.
	DisplayCommand pulumi.StringPtrInput `pulumi:"displayCommand"`
	// Empty if `display_command` is set.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Explains why a file is non compliant for a CIS check.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
}

func (NonCompliantFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NonCompliantFile)(nil)).Elem()
}

func (i NonCompliantFileArgs) ToNonCompliantFileOutput() NonCompliantFileOutput {
	return i.ToNonCompliantFileOutputWithContext(context.Background())
}

func (i NonCompliantFileArgs) ToNonCompliantFileOutputWithContext(ctx context.Context) NonCompliantFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NonCompliantFileOutput)
}

// NonCompliantFileArrayInput is an input type that accepts NonCompliantFileArray and NonCompliantFileArrayOutput values.
// You can construct a concrete instance of `NonCompliantFileArrayInput` via:
//
//	NonCompliantFileArray{ NonCompliantFileArgs{...} }
type NonCompliantFileArrayInput interface {
	pulumi.Input

	ToNonCompliantFileArrayOutput() NonCompliantFileArrayOutput
	ToNonCompliantFileArrayOutputWithContext(context.Context) NonCompliantFileArrayOutput
}

type NonCompliantFileArray []NonCompliantFileInput

func (NonCompliantFileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NonCompliantFile)(nil)).Elem()
}

func (i NonCompliantFileArray) ToNonCompliantFileArrayOutput() NonCompliantFileArrayOutput {
	return i.ToNonCompliantFileArrayOutputWithContext(context.Background())
}

func (i NonCompliantFileArray) ToNonCompliantFileArrayOutputWithContext(ctx context.Context) NonCompliantFileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NonCompliantFileArrayOutput)
}

// Details about files that caused a compliance check to fail. display_command is a single command that can be used to display a list of non compliant files. When there is no such command, we can also iterate a list of non compliant file using 'path'.
type NonCompliantFileOutput struct{ *pulumi.OutputState }

func (NonCompliantFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NonCompliantFile)(nil)).Elem()
}

func (o NonCompliantFileOutput) ToNonCompliantFileOutput() NonCompliantFileOutput {
	return o
}

func (o NonCompliantFileOutput) ToNonCompliantFileOutputWithContext(ctx context.Context) NonCompliantFileOutput {
	return o
}

// Command to display the non-compliant files.
func (o NonCompliantFileOutput) DisplayCommand() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NonCompliantFile) *string { return v.DisplayCommand }).(pulumi.StringPtrOutput)
}

// Empty if `display_command` is set.
func (o NonCompliantFileOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NonCompliantFile) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Explains why a file is non compliant for a CIS check.
func (o NonCompliantFileOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NonCompliantFile) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

type NonCompliantFileArrayOutput struct{ *pulumi.OutputState }

func (NonCompliantFileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NonCompliantFile)(nil)).Elem()
}

func (o NonCompliantFileArrayOutput) ToNonCompliantFileArrayOutput() NonCompliantFileArrayOutput {
	return o
}

func (o NonCompliantFileArrayOutput) ToNonCompliantFileArrayOutputWithContext(ctx context.Context) NonCompliantFileArrayOutput {
	return o
}

func (o NonCompliantFileArrayOutput) Index(i pulumi.IntInput) NonCompliantFileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NonCompliantFile {
		return vs[0].([]NonCompliantFile)[vs[1].(int)]
	}).(NonCompliantFileOutput)
}

// Details about files that caused a compliance check to fail. display_command is a single command that can be used to display a list of non compliant files. When there is no such command, we can also iterate a list of non compliant file using 'path'.
type NonCompliantFileResponse struct {
	// Command to display the non-compliant files.
	DisplayCommand string `pulumi:"displayCommand"`
	// Empty if `display_command` is set.
	Path string `pulumi:"path"`
	// Explains why a file is non compliant for a CIS check.
	Reason string `pulumi:"reason"`
}

// Details about files that caused a compliance check to fail. display_command is a single command that can be used to display a list of non compliant files. When there is no such command, we can also iterate a list of non compliant file using 'path'.
type NonCompliantFileResponseOutput struct{ *pulumi.OutputState }

func (NonCompliantFileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NonCompliantFileResponse)(nil)).Elem()
}

func (o NonCompliantFileResponseOutput) ToNonCompliantFileResponseOutput() NonCompliantFileResponseOutput {
	return o
}

func (o NonCompliantFileResponseOutput) ToNonCompliantFileResponseOutputWithContext(ctx context.Context) NonCompliantFileResponseOutput {
	return o
}

// Command to display the non-compliant files.
func (o NonCompliantFileResponseOutput) DisplayCommand() pulumi.StringOutput {
	return o.ApplyT(func(v NonCompliantFileResponse) string { return v.DisplayCommand }).(pulumi.StringOutput)
}

// Empty if `display_command` is set.
func (o NonCompliantFileResponseOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v NonCompliantFileResponse) string { return v.Path }).(pulumi.StringOutput)
}

// Explains why a file is non compliant for a CIS check.
func (o NonCompliantFileResponseOutput) Reason() pulumi.StringOutput {
	return o.ApplyT(func(v NonCompliantFileResponse) string { return v.Reason }).(pulumi.StringOutput)
}

type NonCompliantFileResponseArrayOutput struct{ *pulumi.OutputState }

func (NonCompliantFileResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NonCompliantFileResponse)(nil)).Elem()
}

func (o NonCompliantFileResponseArrayOutput) ToNonCompliantFileResponseArrayOutput() NonCompliantFileResponseArrayOutput {
	return o
}

func (o NonCompliantFileResponseArrayOutput) ToNonCompliantFileResponseArrayOutputWithContext(ctx context.Context) NonCompliantFileResponseArrayOutput {
	return o
}

func (o NonCompliantFileResponseArrayOutput) Index(i pulumi.IntInput) NonCompliantFileResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NonCompliantFileResponse {
		return vs[0].([]NonCompliantFileResponse)[vs[1].(int)]
	}).(NonCompliantFileResponseOutput)
}

// A detail for a distro and package this vulnerability occurrence was found in and its associated fix (if one is available).
type PackageIssue struct {
	// The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability was found in.
	AffectedCpeUri string `pulumi:"affectedCpeUri"`
	// The package this vulnerability was found in.
	AffectedPackage string `pulumi:"affectedPackage"`
	// The version of the package that is installed on the resource affected by this vulnerability.
	AffectedVersion Version `pulumi:"affectedVersion"`
	// The location at which this package was found.
	FileLocation []GrafeasV1FileLocation `pulumi:"fileLocation"`
	// The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability was fixed in. It is possible for this to be different from the affected_cpe_uri.
	FixedCpeUri *string `pulumi:"fixedCpeUri"`
	// The package this vulnerability was fixed in. It is possible for this to be different from the affected_package.
	FixedPackage *string `pulumi:"fixedPackage"`
	// The version of the package this vulnerability was fixed in. Setting this to VersionKind.MAXIMUM means no fix is yet available.
	FixedVersion Version `pulumi:"fixedVersion"`
	// The type of package (e.g. OS, MAVEN, GO).
	PackageType *string `pulumi:"packageType"`
}

// PackageIssueInput is an input type that accepts PackageIssueArgs and PackageIssueOutput values.
// You can construct a concrete instance of `PackageIssueInput` via:
//
//	PackageIssueArgs{...}
type PackageIssueInput interface {
	pulumi.Input

	ToPackageIssueOutput() PackageIssueOutput
	ToPackageIssueOutputWithContext(context.Context) PackageIssueOutput
}

// A detail for a distro and package this vulnerability occurrence was found in and its associated fix (if one is available).
type PackageIssueArgs struct {
	// The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability was found in.
	AffectedCpeUri pulumi.StringInput `pulumi:"affectedCpeUri"`
	// The package this vulnerability was found in.
	AffectedPackage pulumi.StringInput `pulumi:"affectedPackage"`
	// The version of the package that is installed on the resource affected by this vulnerability.
	AffectedVersion VersionInput `pulumi:"affectedVersion"`
	// The location at which this package was found.
	FileLocation GrafeasV1FileLocationArrayInput `pulumi:"fileLocation"`
	// The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability was fixed in. It is possible for this to be different from the affected_cpe_uri.
	FixedCpeUri pulumi.StringPtrInput `pulumi:"fixedCpeUri"`
	// The package this vulnerability was fixed in. It is possible for this to be different from the affected_package.
	FixedPackage pulumi.StringPtrInput `pulumi:"fixedPackage"`
	// The version of the package this vulnerability was fixed in. Setting this to VersionKind.MAXIMUM means no fix is yet available.
	FixedVersion VersionInput `pulumi:"fixedVersion"`
	// The type of package (e.g. OS, MAVEN, GO).
	PackageType pulumi.StringPtrInput `pulumi:"packageType"`
}

func (PackageIssueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PackageIssue)(nil)).Elem()
}

func (i PackageIssueArgs) ToPackageIssueOutput() PackageIssueOutput {
	return i.ToPackageIssueOutputWithContext(context.Background())
}

func (i PackageIssueArgs) ToPackageIssueOutputWithContext(ctx context.Context) PackageIssueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageIssueOutput)
}

// PackageIssueArrayInput is an input type that accepts PackageIssueArray and PackageIssueArrayOutput values.
// You can construct a concrete instance of `PackageIssueArrayInput` via:
//
//	PackageIssueArray{ PackageIssueArgs{...} }
type PackageIssueArrayInput interface {
	pulumi.Input

	ToPackageIssueArrayOutput() PackageIssueArrayOutput
	ToPackageIssueArrayOutputWithContext(context.Context) PackageIssueArrayOutput
}

type PackageIssueArray []PackageIssueInput

func (PackageIssueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PackageIssue)(nil)).Elem()
}

func (i PackageIssueArray) ToPackageIssueArrayOutput() PackageIssueArrayOutput {
	return i.ToPackageIssueArrayOutputWithContext(context.Background())
}

func (i PackageIssueArray) ToPackageIssueArrayOutputWithContext(ctx context.Context) PackageIssueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageIssueArrayOutput)
}

// A detail for a distro and package this vulnerability occurrence was found in and its associated fix (if one is available).
type PackageIssueOutput struct{ *pulumi.OutputState }

func (PackageIssueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PackageIssue)(nil)).Elem()
}

func (o PackageIssueOutput) ToPackageIssueOutput() PackageIssueOutput {
	return o
}

func (o PackageIssueOutput) ToPackageIssueOutputWithContext(ctx context.Context) PackageIssueOutput {
	return o
}

// The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability was found in.
func (o PackageIssueOutput) AffectedCpeUri() pulumi.StringOutput {
	return o.ApplyT(func(v PackageIssue) string { return v.AffectedCpeUri }).(pulumi.StringOutput)
}

// The package this vulnerability was found in.
func (o PackageIssueOutput) AffectedPackage() pulumi.StringOutput {
	return o.ApplyT(func(v PackageIssue) string { return v.AffectedPackage }).(pulumi.StringOutput)
}

// The version of the package that is installed on the resource affected by this vulnerability.
func (o PackageIssueOutput) AffectedVersion() VersionOutput {
	return o.ApplyT(func(v PackageIssue) Version { return v.AffectedVersion }).(VersionOutput)
}

// The location at which this package was found.
func (o PackageIssueOutput) FileLocation() GrafeasV1FileLocationArrayOutput {
	return o.ApplyT(func(v PackageIssue) []GrafeasV1FileLocation { return v.FileLocation }).(GrafeasV1FileLocationArrayOutput)
}

// The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability was fixed in. It is possible for this to be different from the affected_cpe_uri.
func (o PackageIssueOutput) FixedCpeUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PackageIssue) *string { return v.FixedCpeUri }).(pulumi.StringPtrOutput)
}

// The package this vulnerability was fixed in. It is possible for this to be different from the affected_package.
func (o PackageIssueOutput) FixedPackage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PackageIssue) *string { return v.FixedPackage }).(pulumi.StringPtrOutput)
}

// The version of the package this vulnerability was fixed in. Setting this to VersionKind.MAXIMUM means no fix is yet available.
func (o PackageIssueOutput) FixedVersion() VersionOutput {
	return o.ApplyT(func(v PackageIssue) Version { return v.FixedVersion }).(VersionOutput)
}

// The type of package (e.g. OS, MAVEN, GO).
func (o PackageIssueOutput) PackageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PackageIssue) *string { return v.PackageType }).(pulumi.StringPtrOutput)
}

type PackageIssueArrayOutput struct{ *pulumi.OutputState }

func (PackageIssueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PackageIssue)(nil)).Elem()
}

func (o PackageIssueArrayOutput) ToPackageIssueArrayOutput() PackageIssueArrayOutput {
	return o
}

func (o PackageIssueArrayOutput) ToPackageIssueArrayOutputWithContext(ctx context.Context) PackageIssueArrayOutput {
	return o
}

func (o PackageIssueArrayOutput) Index(i pulumi.IntInput) PackageIssueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PackageIssue {
		return vs[0].([]PackageIssue)[vs[1].(int)]
	}).(PackageIssueOutput)
}

// A detail for a distro and package this vulnerability occurrence was found in and its associated fix (if one is available).
type PackageIssueResponse struct {
	// The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability was found in.
	AffectedCpeUri string `pulumi:"affectedCpeUri"`
	// The package this vulnerability was found in.
	AffectedPackage string `pulumi:"affectedPackage"`
	// The version of the package that is installed on the resource affected by this vulnerability.
	AffectedVersion VersionResponse `pulumi:"affectedVersion"`
	// The distro or language system assigned severity for this vulnerability when that is available and note provider assigned severity when it is not available.
	EffectiveSeverity string `pulumi:"effectiveSeverity"`
	// The location at which this package was found.
	FileLocation []GrafeasV1FileLocationResponse `pulumi:"fileLocation"`
	// Whether a fix is available for this package.
	FixAvailable bool `pulumi:"fixAvailable"`
	// The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability was fixed in. It is possible for this to be different from the affected_cpe_uri.
	FixedCpeUri string `pulumi:"fixedCpeUri"`
	// The package this vulnerability was fixed in. It is possible for this to be different from the affected_package.
	FixedPackage string `pulumi:"fixedPackage"`
	// The version of the package this vulnerability was fixed in. Setting this to VersionKind.MAXIMUM means no fix is yet available.
	FixedVersion VersionResponse `pulumi:"fixedVersion"`
	// The type of package (e.g. OS, MAVEN, GO).
	PackageType string `pulumi:"packageType"`
}

// A detail for a distro and package this vulnerability occurrence was found in and its associated fix (if one is available).
type PackageIssueResponseOutput struct{ *pulumi.OutputState }

func (PackageIssueResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PackageIssueResponse)(nil)).Elem()
}

func (o PackageIssueResponseOutput) ToPackageIssueResponseOutput() PackageIssueResponseOutput {
	return o
}

func (o PackageIssueResponseOutput) ToPackageIssueResponseOutputWithContext(ctx context.Context) PackageIssueResponseOutput {
	return o
}

// The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability was found in.
func (o PackageIssueResponseOutput) AffectedCpeUri() pulumi.StringOutput {
	return o.ApplyT(func(v PackageIssueResponse) string { return v.AffectedCpeUri }).(pulumi.StringOutput)
}

// The package this vulnerability was found in.
func (o PackageIssueResponseOutput) AffectedPackage() pulumi.StringOutput {
	return o.ApplyT(func(v PackageIssueResponse) string { return v.AffectedPackage }).(pulumi.StringOutput)
}

// The version of the package that is installed on the resource affected by this vulnerability.
func (o PackageIssueResponseOutput) AffectedVersion() VersionResponseOutput {
	return o.ApplyT(func(v PackageIssueResponse) VersionResponse { return v.AffectedVersion }).(VersionResponseOutput)
}

// The distro or language system assigned severity for this vulnerability when that is available and note provider assigned severity when it is not available.
func (o PackageIssueResponseOutput) EffectiveSeverity() pulumi.StringOutput {
	return o.ApplyT(func(v PackageIssueResponse) string { return v.EffectiveSeverity }).(pulumi.StringOutput)
}

// The location at which this package was found.
func (o PackageIssueResponseOutput) FileLocation() GrafeasV1FileLocationResponseArrayOutput {
	return o.ApplyT(func(v PackageIssueResponse) []GrafeasV1FileLocationResponse { return v.FileLocation }).(GrafeasV1FileLocationResponseArrayOutput)
}

// Whether a fix is available for this package.
func (o PackageIssueResponseOutput) FixAvailable() pulumi.BoolOutput {
	return o.ApplyT(func(v PackageIssueResponse) bool { return v.FixAvailable }).(pulumi.BoolOutput)
}

// The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability was fixed in. It is possible for this to be different from the affected_cpe_uri.
func (o PackageIssueResponseOutput) FixedCpeUri() pulumi.StringOutput {
	return o.ApplyT(func(v PackageIssueResponse) string { return v.FixedCpeUri }).(pulumi.StringOutput)
}

// The package this vulnerability was fixed in. It is possible for this to be different from the affected_package.
func (o PackageIssueResponseOutput) FixedPackage() pulumi.StringOutput {
	return o.ApplyT(func(v PackageIssueResponse) string { return v.FixedPackage }).(pulumi.StringOutput)
}

// The version of the package this vulnerability was fixed in. Setting this to VersionKind.MAXIMUM means no fix is yet available.
func (o PackageIssueResponseOutput) FixedVersion() VersionResponseOutput {
	return o.ApplyT(func(v PackageIssueResponse) VersionResponse { return v.FixedVersion }).(VersionResponseOutput)
}

// The type of package (e.g. OS, MAVEN, GO).
func (o PackageIssueResponseOutput) PackageType() pulumi.StringOutput {
	return o.ApplyT(func(v PackageIssueResponse) string { return v.PackageType }).(pulumi.StringOutput)
}

type PackageIssueResponseArrayOutput struct{ *pulumi.OutputState }

func (PackageIssueResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PackageIssueResponse)(nil)).Elem()
}

func (o PackageIssueResponseArrayOutput) ToPackageIssueResponseArrayOutput() PackageIssueResponseArrayOutput {
	return o
}

func (o PackageIssueResponseArrayOutput) ToPackageIssueResponseArrayOutputWithContext(ctx context.Context) PackageIssueResponseArrayOutput {
	return o
}

func (o PackageIssueResponseArrayOutput) Index(i pulumi.IntInput) PackageIssueResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PackageIssueResponse {
		return vs[0].([]PackageIssueResponse)[vs[1].(int)]
	}).(PackageIssueResponseOutput)
}

// PackageNote represents a particular package version.
type PackageNote struct {
	// The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.
	Architecture *PackageNoteArchitecture `pulumi:"architecture"`
	// The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages.
	CpeUri *string `pulumi:"cpeUri"`
	// The description of this package.
	Description *string `pulumi:"description"`
	// Hash value, typically a file digest, that allows unique identification a specific package.
	Digest []Digest `pulumi:"digest"`
	// Deprecated. The various channels by which a package is distributed.
	//
	// Deprecated: Deprecated. The various channels by which a package is distributed.
	Distribution []Distribution `pulumi:"distribution"`
	// Licenses that have been declared by the authors of the package.
	License *License `pulumi:"license"`
	// A freeform text denoting the maintainer of this package.
	Maintainer *string `pulumi:"maintainer"`
	// Immutable. The name of the package.
	Name string `pulumi:"name"`
	// The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
	PackageType *string `pulumi:"packageType"`
	// The homepage for this package.
	Url *string `pulumi:"url"`
	// The version of the package.
	Version *Version `pulumi:"version"`
}

// PackageNoteInput is an input type that accepts PackageNoteArgs and PackageNoteOutput values.
// You can construct a concrete instance of `PackageNoteInput` via:
//
//	PackageNoteArgs{...}
type PackageNoteInput interface {
	pulumi.Input

	ToPackageNoteOutput() PackageNoteOutput
	ToPackageNoteOutputWithContext(context.Context) PackageNoteOutput
}

// PackageNote represents a particular package version.
type PackageNoteArgs struct {
	// The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.
	Architecture PackageNoteArchitecturePtrInput `pulumi:"architecture"`
	// The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages.
	CpeUri pulumi.StringPtrInput `pulumi:"cpeUri"`
	// The description of this package.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Hash value, typically a file digest, that allows unique identification a specific package.
	Digest DigestArrayInput `pulumi:"digest"`
	// Deprecated. The various channels by which a package is distributed.
	//
	// Deprecated: Deprecated. The various channels by which a package is distributed.
	Distribution DistributionArrayInput `pulumi:"distribution"`
	// Licenses that have been declared by the authors of the package.
	License LicensePtrInput `pulumi:"license"`
	// A freeform text denoting the maintainer of this package.
	Maintainer pulumi.StringPtrInput `pulumi:"maintainer"`
	// Immutable. The name of the package.
	Name pulumi.StringInput `pulumi:"name"`
	// The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
	PackageType pulumi.StringPtrInput `pulumi:"packageType"`
	// The homepage for this package.
	Url pulumi.StringPtrInput `pulumi:"url"`
	// The version of the package.
	Version VersionPtrInput `pulumi:"version"`
}

func (PackageNoteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PackageNote)(nil)).Elem()
}

func (i PackageNoteArgs) ToPackageNoteOutput() PackageNoteOutput {
	return i.ToPackageNoteOutputWithContext(context.Background())
}

func (i PackageNoteArgs) ToPackageNoteOutputWithContext(ctx context.Context) PackageNoteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageNoteOutput)
}

func (i PackageNoteArgs) ToPackageNotePtrOutput() PackageNotePtrOutput {
	return i.ToPackageNotePtrOutputWithContext(context.Background())
}

func (i PackageNoteArgs) ToPackageNotePtrOutputWithContext(ctx context.Context) PackageNotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageNoteOutput).ToPackageNotePtrOutputWithContext(ctx)
}

// PackageNotePtrInput is an input type that accepts PackageNoteArgs, PackageNotePtr and PackageNotePtrOutput values.
// You can construct a concrete instance of `PackageNotePtrInput` via:
//
//	        PackageNoteArgs{...}
//
//	or:
//
//	        nil
type PackageNotePtrInput interface {
	pulumi.Input

	ToPackageNotePtrOutput() PackageNotePtrOutput
	ToPackageNotePtrOutputWithContext(context.Context) PackageNotePtrOutput
}

type packageNotePtrType PackageNoteArgs

func PackageNotePtr(v *PackageNoteArgs) PackageNotePtrInput {
	return (*packageNotePtrType)(v)
}

func (*packageNotePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PackageNote)(nil)).Elem()
}

func (i *packageNotePtrType) ToPackageNotePtrOutput() PackageNotePtrOutput {
	return i.ToPackageNotePtrOutputWithContext(context.Background())
}

func (i *packageNotePtrType) ToPackageNotePtrOutputWithContext(ctx context.Context) PackageNotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageNotePtrOutput)
}

// PackageNote represents a particular package version.
type PackageNoteOutput struct{ *pulumi.OutputState }

func (PackageNoteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PackageNote)(nil)).Elem()
}

func (o PackageNoteOutput) ToPackageNoteOutput() PackageNoteOutput {
	return o
}

func (o PackageNoteOutput) ToPackageNoteOutputWithContext(ctx context.Context) PackageNoteOutput {
	return o
}

func (o PackageNoteOutput) ToPackageNotePtrOutput() PackageNotePtrOutput {
	return o.ToPackageNotePtrOutputWithContext(context.Background())
}

func (o PackageNoteOutput) ToPackageNotePtrOutputWithContext(ctx context.Context) PackageNotePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PackageNote) *PackageNote {
		return &v
	}).(PackageNotePtrOutput)
}

// The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.
func (o PackageNoteOutput) Architecture() PackageNoteArchitecturePtrOutput {
	return o.ApplyT(func(v PackageNote) *PackageNoteArchitecture { return v.Architecture }).(PackageNoteArchitecturePtrOutput)
}

// The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages.
func (o PackageNoteOutput) CpeUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PackageNote) *string { return v.CpeUri }).(pulumi.StringPtrOutput)
}

// The description of this package.
func (o PackageNoteOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PackageNote) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Hash value, typically a file digest, that allows unique identification a specific package.
func (o PackageNoteOutput) Digest() DigestArrayOutput {
	return o.ApplyT(func(v PackageNote) []Digest { return v.Digest }).(DigestArrayOutput)
}

// Deprecated. The various channels by which a package is distributed.
//
// Deprecated: Deprecated. The various channels by which a package is distributed.
func (o PackageNoteOutput) Distribution() DistributionArrayOutput {
	return o.ApplyT(func(v PackageNote) []Distribution { return v.Distribution }).(DistributionArrayOutput)
}

// Licenses that have been declared by the authors of the package.
func (o PackageNoteOutput) License() LicensePtrOutput {
	return o.ApplyT(func(v PackageNote) *License { return v.License }).(LicensePtrOutput)
}

// A freeform text denoting the maintainer of this package.
func (o PackageNoteOutput) Maintainer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PackageNote) *string { return v.Maintainer }).(pulumi.StringPtrOutput)
}

// Immutable. The name of the package.
func (o PackageNoteOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PackageNote) string { return v.Name }).(pulumi.StringOutput)
}

// The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
func (o PackageNoteOutput) PackageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PackageNote) *string { return v.PackageType }).(pulumi.StringPtrOutput)
}

// The homepage for this package.
func (o PackageNoteOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PackageNote) *string { return v.Url }).(pulumi.StringPtrOutput)
}

// The version of the package.
func (o PackageNoteOutput) Version() VersionPtrOutput {
	return o.ApplyT(func(v PackageNote) *Version { return v.Version }).(VersionPtrOutput)
}

type PackageNotePtrOutput struct{ *pulumi.OutputState }

func (PackageNotePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PackageNote)(nil)).Elem()
}

func (o PackageNotePtrOutput) ToPackageNotePtrOutput() PackageNotePtrOutput {
	return o
}

func (o PackageNotePtrOutput) ToPackageNotePtrOutputWithContext(ctx context.Context) PackageNotePtrOutput {
	return o
}

func (o PackageNotePtrOutput) Elem() PackageNoteOutput {
	return o.ApplyT(func(v *PackageNote) PackageNote {
		if v != nil {
			return *v
		}
		var ret PackageNote
		return ret
	}).(PackageNoteOutput)
}

// The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.
func (o PackageNotePtrOutput) Architecture() PackageNoteArchitecturePtrOutput {
	return o.ApplyT(func(v *PackageNote) *PackageNoteArchitecture {
		if v == nil {
			return nil
		}
		return v.Architecture
	}).(PackageNoteArchitecturePtrOutput)
}

// The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages.
func (o PackageNotePtrOutput) CpeUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PackageNote) *string {
		if v == nil {
			return nil
		}
		return v.CpeUri
	}).(pulumi.StringPtrOutput)
}

// The description of this package.
func (o PackageNotePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PackageNote) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Hash value, typically a file digest, that allows unique identification a specific package.
func (o PackageNotePtrOutput) Digest() DigestArrayOutput {
	return o.ApplyT(func(v *PackageNote) []Digest {
		if v == nil {
			return nil
		}
		return v.Digest
	}).(DigestArrayOutput)
}

// Deprecated. The various channels by which a package is distributed.
//
// Deprecated: Deprecated. The various channels by which a package is distributed.
func (o PackageNotePtrOutput) Distribution() DistributionArrayOutput {
	return o.ApplyT(func(v *PackageNote) []Distribution {
		if v == nil {
			return nil
		}
		return v.Distribution
	}).(DistributionArrayOutput)
}

// Licenses that have been declared by the authors of the package.
func (o PackageNotePtrOutput) License() LicensePtrOutput {
	return o.ApplyT(func(v *PackageNote) *License {
		if v == nil {
			return nil
		}
		return v.License
	}).(LicensePtrOutput)
}

// A freeform text denoting the maintainer of this package.
func (o PackageNotePtrOutput) Maintainer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PackageNote) *string {
		if v == nil {
			return nil
		}
		return v.Maintainer
	}).(pulumi.StringPtrOutput)
}

// Immutable. The name of the package.
func (o PackageNotePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PackageNote) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
func (o PackageNotePtrOutput) PackageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PackageNote) *string {
		if v == nil {
			return nil
		}
		return v.PackageType
	}).(pulumi.StringPtrOutput)
}

// The homepage for this package.
func (o PackageNotePtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PackageNote) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// The version of the package.
func (o PackageNotePtrOutput) Version() VersionPtrOutput {
	return o.ApplyT(func(v *PackageNote) *Version {
		if v == nil {
			return nil
		}
		return v.Version
	}).(VersionPtrOutput)
}

// PackageNote represents a particular package version.
type PackageNoteResponse struct {
	// The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.
	Architecture string `pulumi:"architecture"`
	// The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages.
	CpeUri string `pulumi:"cpeUri"`
	// The description of this package.
	Description string `pulumi:"description"`
	// Hash value, typically a file digest, that allows unique identification a specific package.
	Digest []DigestResponse `pulumi:"digest"`
	// Deprecated. The various channels by which a package is distributed.
	//
	// Deprecated: Deprecated. The various channels by which a package is distributed.
	Distribution []DistributionResponse `pulumi:"distribution"`
	// Licenses that have been declared by the authors of the package.
	License LicenseResponse `pulumi:"license"`
	// A freeform text denoting the maintainer of this package.
	Maintainer string `pulumi:"maintainer"`
	// Immutable. The name of the package.
	Name string `pulumi:"name"`
	// The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
	PackageType string `pulumi:"packageType"`
	// The homepage for this package.
	Url string `pulumi:"url"`
	// The version of the package.
	Version VersionResponse `pulumi:"version"`
}

// PackageNote represents a particular package version.
type PackageNoteResponseOutput struct{ *pulumi.OutputState }

func (PackageNoteResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PackageNoteResponse)(nil)).Elem()
}

func (o PackageNoteResponseOutput) ToPackageNoteResponseOutput() PackageNoteResponseOutput {
	return o
}

func (o PackageNoteResponseOutput) ToPackageNoteResponseOutputWithContext(ctx context.Context) PackageNoteResponseOutput {
	return o
}

// The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.
func (o PackageNoteResponseOutput) Architecture() pulumi.StringOutput {
	return o.ApplyT(func(v PackageNoteResponse) string { return v.Architecture }).(pulumi.StringOutput)
}

// The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages.
func (o PackageNoteResponseOutput) CpeUri() pulumi.StringOutput {
	return o.ApplyT(func(v PackageNoteResponse) string { return v.CpeUri }).(pulumi.StringOutput)
}

// The description of this package.
func (o PackageNoteResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v PackageNoteResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Hash value, typically a file digest, that allows unique identification a specific package.
func (o PackageNoteResponseOutput) Digest() DigestResponseArrayOutput {
	return o.ApplyT(func(v PackageNoteResponse) []DigestResponse { return v.Digest }).(DigestResponseArrayOutput)
}

// Deprecated. The various channels by which a package is distributed.
//
// Deprecated: Deprecated. The various channels by which a package is distributed.
func (o PackageNoteResponseOutput) Distribution() DistributionResponseArrayOutput {
	return o.ApplyT(func(v PackageNoteResponse) []DistributionResponse { return v.Distribution }).(DistributionResponseArrayOutput)
}

// Licenses that have been declared by the authors of the package.
func (o PackageNoteResponseOutput) License() LicenseResponseOutput {
	return o.ApplyT(func(v PackageNoteResponse) LicenseResponse { return v.License }).(LicenseResponseOutput)
}

// A freeform text denoting the maintainer of this package.
func (o PackageNoteResponseOutput) Maintainer() pulumi.StringOutput {
	return o.ApplyT(func(v PackageNoteResponse) string { return v.Maintainer }).(pulumi.StringOutput)
}

// Immutable. The name of the package.
func (o PackageNoteResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PackageNoteResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
func (o PackageNoteResponseOutput) PackageType() pulumi.StringOutput {
	return o.ApplyT(func(v PackageNoteResponse) string { return v.PackageType }).(pulumi.StringOutput)
}

// The homepage for this package.
func (o PackageNoteResponseOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v PackageNoteResponse) string { return v.Url }).(pulumi.StringOutput)
}

// The version of the package.
func (o PackageNoteResponseOutput) Version() VersionResponseOutput {
	return o.ApplyT(func(v PackageNoteResponse) VersionResponse { return v.Version }).(VersionResponseOutput)
}

// Details on how a particular software package was installed on a system.
type PackageOccurrence struct {
	// Licenses that have been declared by the authors of the package.
	License *License `pulumi:"license"`
	// All of the places within the filesystem versions of this package have been found.
	Location []Location `pulumi:"location"`
}

// PackageOccurrenceInput is an input type that accepts PackageOccurrenceArgs and PackageOccurrenceOutput values.
// You can construct a concrete instance of `PackageOccurrenceInput` via:
//
//	PackageOccurrenceArgs{...}
type PackageOccurrenceInput interface {
	pulumi.Input

	ToPackageOccurrenceOutput() PackageOccurrenceOutput
	ToPackageOccurrenceOutputWithContext(context.Context) PackageOccurrenceOutput
}

// Details on how a particular software package was installed on a system.
type PackageOccurrenceArgs struct {
	// Licenses that have been declared by the authors of the package.
	License LicensePtrInput `pulumi:"license"`
	// All of the places within the filesystem versions of this package have been found.
	Location LocationArrayInput `pulumi:"location"`
}

func (PackageOccurrenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PackageOccurrence)(nil)).Elem()
}

func (i PackageOccurrenceArgs) ToPackageOccurrenceOutput() PackageOccurrenceOutput {
	return i.ToPackageOccurrenceOutputWithContext(context.Background())
}

func (i PackageOccurrenceArgs) ToPackageOccurrenceOutputWithContext(ctx context.Context) PackageOccurrenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageOccurrenceOutput)
}

func (i PackageOccurrenceArgs) ToPackageOccurrencePtrOutput() PackageOccurrencePtrOutput {
	return i.ToPackageOccurrencePtrOutputWithContext(context.Background())
}

func (i PackageOccurrenceArgs) ToPackageOccurrencePtrOutputWithContext(ctx context.Context) PackageOccurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageOccurrenceOutput).ToPackageOccurrencePtrOutputWithContext(ctx)
}

// PackageOccurrencePtrInput is an input type that accepts PackageOccurrenceArgs, PackageOccurrencePtr and PackageOccurrencePtrOutput values.
// You can construct a concrete instance of `PackageOccurrencePtrInput` via:
//
//	        PackageOccurrenceArgs{...}
//
//	or:
//
//	        nil
type PackageOccurrencePtrInput interface {
	pulumi.Input

	ToPackageOccurrencePtrOutput() PackageOccurrencePtrOutput
	ToPackageOccurrencePtrOutputWithContext(context.Context) PackageOccurrencePtrOutput
}

type packageOccurrencePtrType PackageOccurrenceArgs

func PackageOccurrencePtr(v *PackageOccurrenceArgs) PackageOccurrencePtrInput {
	return (*packageOccurrencePtrType)(v)
}

func (*packageOccurrencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PackageOccurrence)(nil)).Elem()
}

func (i *packageOccurrencePtrType) ToPackageOccurrencePtrOutput() PackageOccurrencePtrOutput {
	return i.ToPackageOccurrencePtrOutputWithContext(context.Background())
}

func (i *packageOccurrencePtrType) ToPackageOccurrencePtrOutputWithContext(ctx context.Context) PackageOccurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageOccurrencePtrOutput)
}

// Details on how a particular software package was installed on a system.
type PackageOccurrenceOutput struct{ *pulumi.OutputState }

func (PackageOccurrenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PackageOccurrence)(nil)).Elem()
}

func (o PackageOccurrenceOutput) ToPackageOccurrenceOutput() PackageOccurrenceOutput {
	return o
}

func (o PackageOccurrenceOutput) ToPackageOccurrenceOutputWithContext(ctx context.Context) PackageOccurrenceOutput {
	return o
}

func (o PackageOccurrenceOutput) ToPackageOccurrencePtrOutput() PackageOccurrencePtrOutput {
	return o.ToPackageOccurrencePtrOutputWithContext(context.Background())
}

func (o PackageOccurrenceOutput) ToPackageOccurrencePtrOutputWithContext(ctx context.Context) PackageOccurrencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PackageOccurrence) *PackageOccurrence {
		return &v
	}).(PackageOccurrencePtrOutput)
}

// Licenses that have been declared by the authors of the package.
func (o PackageOccurrenceOutput) License() LicensePtrOutput {
	return o.ApplyT(func(v PackageOccurrence) *License { return v.License }).(LicensePtrOutput)
}

// All of the places within the filesystem versions of this package have been found.
func (o PackageOccurrenceOutput) Location() LocationArrayOutput {
	return o.ApplyT(func(v PackageOccurrence) []Location { return v.Location }).(LocationArrayOutput)
}

type PackageOccurrencePtrOutput struct{ *pulumi.OutputState }

func (PackageOccurrencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PackageOccurrence)(nil)).Elem()
}

func (o PackageOccurrencePtrOutput) ToPackageOccurrencePtrOutput() PackageOccurrencePtrOutput {
	return o
}

func (o PackageOccurrencePtrOutput) ToPackageOccurrencePtrOutputWithContext(ctx context.Context) PackageOccurrencePtrOutput {
	return o
}

func (o PackageOccurrencePtrOutput) Elem() PackageOccurrenceOutput {
	return o.ApplyT(func(v *PackageOccurrence) PackageOccurrence {
		if v != nil {
			return *v
		}
		var ret PackageOccurrence
		return ret
	}).(PackageOccurrenceOutput)
}

// Licenses that have been declared by the authors of the package.
func (o PackageOccurrencePtrOutput) License() LicensePtrOutput {
	return o.ApplyT(func(v *PackageOccurrence) *License {
		if v == nil {
			return nil
		}
		return v.License
	}).(LicensePtrOutput)
}

// All of the places within the filesystem versions of this package have been found.
func (o PackageOccurrencePtrOutput) Location() LocationArrayOutput {
	return o.ApplyT(func(v *PackageOccurrence) []Location {
		if v == nil {
			return nil
		}
		return v.Location
	}).(LocationArrayOutput)
}

// Details on how a particular software package was installed on a system.
type PackageOccurrenceResponse struct {
	// The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.
	Architecture string `pulumi:"architecture"`
	// The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages.
	CpeUri string `pulumi:"cpeUri"`
	// Licenses that have been declared by the authors of the package.
	License LicenseResponse `pulumi:"license"`
	// All of the places within the filesystem versions of this package have been found.
	Location []LocationResponse `pulumi:"location"`
	// The name of the installed package.
	Name string `pulumi:"name"`
	// The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
	PackageType string `pulumi:"packageType"`
	// The version of the package.
	Version VersionResponse `pulumi:"version"`
}

// Details on how a particular software package was installed on a system.
type PackageOccurrenceResponseOutput struct{ *pulumi.OutputState }

func (PackageOccurrenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PackageOccurrenceResponse)(nil)).Elem()
}

func (o PackageOccurrenceResponseOutput) ToPackageOccurrenceResponseOutput() PackageOccurrenceResponseOutput {
	return o
}

func (o PackageOccurrenceResponseOutput) ToPackageOccurrenceResponseOutputWithContext(ctx context.Context) PackageOccurrenceResponseOutput {
	return o
}

// The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.
func (o PackageOccurrenceResponseOutput) Architecture() pulumi.StringOutput {
	return o.ApplyT(func(v PackageOccurrenceResponse) string { return v.Architecture }).(pulumi.StringOutput)
}

// The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages.
func (o PackageOccurrenceResponseOutput) CpeUri() pulumi.StringOutput {
	return o.ApplyT(func(v PackageOccurrenceResponse) string { return v.CpeUri }).(pulumi.StringOutput)
}

// Licenses that have been declared by the authors of the package.
func (o PackageOccurrenceResponseOutput) License() LicenseResponseOutput {
	return o.ApplyT(func(v PackageOccurrenceResponse) LicenseResponse { return v.License }).(LicenseResponseOutput)
}

// All of the places within the filesystem versions of this package have been found.
func (o PackageOccurrenceResponseOutput) Location() LocationResponseArrayOutput {
	return o.ApplyT(func(v PackageOccurrenceResponse) []LocationResponse { return v.Location }).(LocationResponseArrayOutput)
}

// The name of the installed package.
func (o PackageOccurrenceResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PackageOccurrenceResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
func (o PackageOccurrenceResponseOutput) PackageType() pulumi.StringOutput {
	return o.ApplyT(func(v PackageOccurrenceResponse) string { return v.PackageType }).(pulumi.StringOutput)
}

// The version of the package.
func (o PackageOccurrenceResponseOutput) Version() VersionResponseOutput {
	return o.ApplyT(func(v PackageOccurrenceResponse) VersionResponse { return v.Version }).(VersionResponseOutput)
}

// Product contains information about a product and how to uniquely identify it.
type Product struct {
	// Contains a URI which is vendor-specific. Example: The artifact repository URL of an image.
	GenericUri *string `pulumi:"genericUri"`
	// Token that identifies a product so that it can be referred to from other parts in the document. There is no predefined format as long as it uniquely identifies a group in the context of the current document.
	Id *string `pulumi:"id"`
	// Name of the product.
	Name *string `pulumi:"name"`
}

// ProductInput is an input type that accepts ProductArgs and ProductOutput values.
// You can construct a concrete instance of `ProductInput` via:
//
//	ProductArgs{...}
type ProductInput interface {
	pulumi.Input

	ToProductOutput() ProductOutput
	ToProductOutputWithContext(context.Context) ProductOutput
}

// Product contains information about a product and how to uniquely identify it.
type ProductArgs struct {
	// Contains a URI which is vendor-specific. Example: The artifact repository URL of an image.
	GenericUri pulumi.StringPtrInput `pulumi:"genericUri"`
	// Token that identifies a product so that it can be referred to from other parts in the document. There is no predefined format as long as it uniquely identifies a group in the context of the current document.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Name of the product.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ProductArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Product)(nil)).Elem()
}

func (i ProductArgs) ToProductOutput() ProductOutput {
	return i.ToProductOutputWithContext(context.Background())
}

func (i ProductArgs) ToProductOutputWithContext(ctx context.Context) ProductOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProductOutput)
}

func (i ProductArgs) ToProductPtrOutput() ProductPtrOutput {
	return i.ToProductPtrOutputWithContext(context.Background())
}

func (i ProductArgs) ToProductPtrOutputWithContext(ctx context.Context) ProductPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProductOutput).ToProductPtrOutputWithContext(ctx)
}

// ProductPtrInput is an input type that accepts ProductArgs, ProductPtr and ProductPtrOutput values.
// You can construct a concrete instance of `ProductPtrInput` via:
//
//	        ProductArgs{...}
//
//	or:
//
//	        nil
type ProductPtrInput interface {
	pulumi.Input

	ToProductPtrOutput() ProductPtrOutput
	ToProductPtrOutputWithContext(context.Context) ProductPtrOutput
}

type productPtrType ProductArgs

func ProductPtr(v *ProductArgs) ProductPtrInput {
	return (*productPtrType)(v)
}

func (*productPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Product)(nil)).Elem()
}

func (i *productPtrType) ToProductPtrOutput() ProductPtrOutput {
	return i.ToProductPtrOutputWithContext(context.Background())
}

func (i *productPtrType) ToProductPtrOutputWithContext(ctx context.Context) ProductPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProductPtrOutput)
}

// Product contains information about a product and how to uniquely identify it.
type ProductOutput struct{ *pulumi.OutputState }

func (ProductOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Product)(nil)).Elem()
}

func (o ProductOutput) ToProductOutput() ProductOutput {
	return o
}

func (o ProductOutput) ToProductOutputWithContext(ctx context.Context) ProductOutput {
	return o
}

func (o ProductOutput) ToProductPtrOutput() ProductPtrOutput {
	return o.ToProductPtrOutputWithContext(context.Background())
}

func (o ProductOutput) ToProductPtrOutputWithContext(ctx context.Context) ProductPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Product) *Product {
		return &v
	}).(ProductPtrOutput)
}

// Contains a URI which is vendor-specific. Example: The artifact repository URL of an image.
func (o ProductOutput) GenericUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Product) *string { return v.GenericUri }).(pulumi.StringPtrOutput)
}

// Token that identifies a product so that it can be referred to from other parts in the document. There is no predefined format as long as it uniquely identifies a group in the context of the current document.
func (o ProductOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Product) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Name of the product.
func (o ProductOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Product) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ProductPtrOutput struct{ *pulumi.OutputState }

func (ProductPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Product)(nil)).Elem()
}

func (o ProductPtrOutput) ToProductPtrOutput() ProductPtrOutput {
	return o
}

func (o ProductPtrOutput) ToProductPtrOutputWithContext(ctx context.Context) ProductPtrOutput {
	return o
}

func (o ProductPtrOutput) Elem() ProductOutput {
	return o.ApplyT(func(v *Product) Product {
		if v != nil {
			return *v
		}
		var ret Product
		return ret
	}).(ProductOutput)
}

// Contains a URI which is vendor-specific. Example: The artifact repository URL of an image.
func (o ProductPtrOutput) GenericUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Product) *string {
		if v == nil {
			return nil
		}
		return v.GenericUri
	}).(pulumi.StringPtrOutput)
}

// Token that identifies a product so that it can be referred to from other parts in the document. There is no predefined format as long as it uniquely identifies a group in the context of the current document.
func (o ProductPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Product) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Name of the product.
func (o ProductPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Product) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Product contains information about a product and how to uniquely identify it.
type ProductResponse struct {
	// Contains a URI which is vendor-specific. Example: The artifact repository URL of an image.
	GenericUri string `pulumi:"genericUri"`
	// Name of the product.
	Name string `pulumi:"name"`
}

// Product contains information about a product and how to uniquely identify it.
type ProductResponseOutput struct{ *pulumi.OutputState }

func (ProductResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProductResponse)(nil)).Elem()
}

func (o ProductResponseOutput) ToProductResponseOutput() ProductResponseOutput {
	return o
}

func (o ProductResponseOutput) ToProductResponseOutputWithContext(ctx context.Context) ProductResponseOutput {
	return o
}

// Contains a URI which is vendor-specific. Example: The artifact repository URL of an image.
func (o ProductResponseOutput) GenericUri() pulumi.StringOutput {
	return o.ApplyT(func(v ProductResponse) string { return v.GenericUri }).(pulumi.StringOutput)
}

// Name of the product.
func (o ProductResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProductResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Selects a repo using a Google Cloud Platform project ID (e.g., winged-cargo-31) and a repo name within that project.
type ProjectRepoId struct {
	// The ID of the project.
	Project *string `pulumi:"project"`
	// The name of the repo. Leave empty for the default repo.
	RepoName *string `pulumi:"repoName"`
}

// ProjectRepoIdInput is an input type that accepts ProjectRepoIdArgs and ProjectRepoIdOutput values.
// You can construct a concrete instance of `ProjectRepoIdInput` via:
//
//	ProjectRepoIdArgs{...}
type ProjectRepoIdInput interface {
	pulumi.Input

	ToProjectRepoIdOutput() ProjectRepoIdOutput
	ToProjectRepoIdOutputWithContext(context.Context) ProjectRepoIdOutput
}

// Selects a repo using a Google Cloud Platform project ID (e.g., winged-cargo-31) and a repo name within that project.
type ProjectRepoIdArgs struct {
	// The ID of the project.
	Project pulumi.StringPtrInput `pulumi:"project"`
	// The name of the repo. Leave empty for the default repo.
	RepoName pulumi.StringPtrInput `pulumi:"repoName"`
}

func (ProjectRepoIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectRepoId)(nil)).Elem()
}

func (i ProjectRepoIdArgs) ToProjectRepoIdOutput() ProjectRepoIdOutput {
	return i.ToProjectRepoIdOutputWithContext(context.Background())
}

func (i ProjectRepoIdArgs) ToProjectRepoIdOutputWithContext(ctx context.Context) ProjectRepoIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectRepoIdOutput)
}

func (i ProjectRepoIdArgs) ToProjectRepoIdPtrOutput() ProjectRepoIdPtrOutput {
	return i.ToProjectRepoIdPtrOutputWithContext(context.Background())
}

func (i ProjectRepoIdArgs) ToProjectRepoIdPtrOutputWithContext(ctx context.Context) ProjectRepoIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectRepoIdOutput).ToProjectRepoIdPtrOutputWithContext(ctx)
}

// ProjectRepoIdPtrInput is an input type that accepts ProjectRepoIdArgs, ProjectRepoIdPtr and ProjectRepoIdPtrOutput values.
// You can construct a concrete instance of `ProjectRepoIdPtrInput` via:
//
//	        ProjectRepoIdArgs{...}
//
//	or:
//
//	        nil
type ProjectRepoIdPtrInput interface {
	pulumi.Input

	ToProjectRepoIdPtrOutput() ProjectRepoIdPtrOutput
	ToProjectRepoIdPtrOutputWithContext(context.Context) ProjectRepoIdPtrOutput
}

type projectRepoIdPtrType ProjectRepoIdArgs

func ProjectRepoIdPtr(v *ProjectRepoIdArgs) ProjectRepoIdPtrInput {
	return (*projectRepoIdPtrType)(v)
}

func (*projectRepoIdPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectRepoId)(nil)).Elem()
}

func (i *projectRepoIdPtrType) ToProjectRepoIdPtrOutput() ProjectRepoIdPtrOutput {
	return i.ToProjectRepoIdPtrOutputWithContext(context.Background())
}

func (i *projectRepoIdPtrType) ToProjectRepoIdPtrOutputWithContext(ctx context.Context) ProjectRepoIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectRepoIdPtrOutput)
}

// Selects a repo using a Google Cloud Platform project ID (e.g., winged-cargo-31) and a repo name within that project.
type ProjectRepoIdOutput struct{ *pulumi.OutputState }

func (ProjectRepoIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectRepoId)(nil)).Elem()
}

func (o ProjectRepoIdOutput) ToProjectRepoIdOutput() ProjectRepoIdOutput {
	return o
}

func (o ProjectRepoIdOutput) ToProjectRepoIdOutputWithContext(ctx context.Context) ProjectRepoIdOutput {
	return o
}

func (o ProjectRepoIdOutput) ToProjectRepoIdPtrOutput() ProjectRepoIdPtrOutput {
	return o.ToProjectRepoIdPtrOutputWithContext(context.Background())
}

func (o ProjectRepoIdOutput) ToProjectRepoIdPtrOutputWithContext(ctx context.Context) ProjectRepoIdPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectRepoId) *ProjectRepoId {
		return &v
	}).(ProjectRepoIdPtrOutput)
}

// The ID of the project.
func (o ProjectRepoIdOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectRepoId) *string { return v.Project }).(pulumi.StringPtrOutput)
}

// The name of the repo. Leave empty for the default repo.
func (o ProjectRepoIdOutput) RepoName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectRepoId) *string { return v.RepoName }).(pulumi.StringPtrOutput)
}

type ProjectRepoIdPtrOutput struct{ *pulumi.OutputState }

func (ProjectRepoIdPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectRepoId)(nil)).Elem()
}

func (o ProjectRepoIdPtrOutput) ToProjectRepoIdPtrOutput() ProjectRepoIdPtrOutput {
	return o
}

func (o ProjectRepoIdPtrOutput) ToProjectRepoIdPtrOutputWithContext(ctx context.Context) ProjectRepoIdPtrOutput {
	return o
}

func (o ProjectRepoIdPtrOutput) Elem() ProjectRepoIdOutput {
	return o.ApplyT(func(v *ProjectRepoId) ProjectRepoId {
		if v != nil {
			return *v
		}
		var ret ProjectRepoId
		return ret
	}).(ProjectRepoIdOutput)
}

// The ID of the project.
func (o ProjectRepoIdPtrOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectRepoId) *string {
		if v == nil {
			return nil
		}
		return v.Project
	}).(pulumi.StringPtrOutput)
}

// The name of the repo. Leave empty for the default repo.
func (o ProjectRepoIdPtrOutput) RepoName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectRepoId) *string {
		if v == nil {
			return nil
		}
		return v.RepoName
	}).(pulumi.StringPtrOutput)
}

// Selects a repo using a Google Cloud Platform project ID (e.g., winged-cargo-31) and a repo name within that project.
type ProjectRepoIdResponse struct {
	// The ID of the project.
	Project string `pulumi:"project"`
	// The name of the repo. Leave empty for the default repo.
	RepoName string `pulumi:"repoName"`
}

// Selects a repo using a Google Cloud Platform project ID (e.g., winged-cargo-31) and a repo name within that project.
type ProjectRepoIdResponseOutput struct{ *pulumi.OutputState }

func (ProjectRepoIdResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectRepoIdResponse)(nil)).Elem()
}

func (o ProjectRepoIdResponseOutput) ToProjectRepoIdResponseOutput() ProjectRepoIdResponseOutput {
	return o
}

func (o ProjectRepoIdResponseOutput) ToProjectRepoIdResponseOutputWithContext(ctx context.Context) ProjectRepoIdResponseOutput {
	return o
}

// The ID of the project.
func (o ProjectRepoIdResponseOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectRepoIdResponse) string { return v.Project }).(pulumi.StringOutput)
}

// The name of the repo. Leave empty for the default repo.
func (o ProjectRepoIdResponseOutput) RepoName() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectRepoIdResponse) string { return v.RepoName }).(pulumi.StringOutput)
}

type ProvenanceBuilder struct {
	BuilderDependencies []ResourceDescriptor `pulumi:"builderDependencies"`
	Id                  *string              `pulumi:"id"`
	Version             map[string]string    `pulumi:"version"`
}

// ProvenanceBuilderInput is an input type that accepts ProvenanceBuilderArgs and ProvenanceBuilderOutput values.
// You can construct a concrete instance of `ProvenanceBuilderInput` via:
//
//	ProvenanceBuilderArgs{...}
type ProvenanceBuilderInput interface {
	pulumi.Input

	ToProvenanceBuilderOutput() ProvenanceBuilderOutput
	ToProvenanceBuilderOutputWithContext(context.Context) ProvenanceBuilderOutput
}

type ProvenanceBuilderArgs struct {
	BuilderDependencies ResourceDescriptorArrayInput `pulumi:"builderDependencies"`
	Id                  pulumi.StringPtrInput        `pulumi:"id"`
	Version             pulumi.StringMapInput        `pulumi:"version"`
}

func (ProvenanceBuilderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProvenanceBuilder)(nil)).Elem()
}

func (i ProvenanceBuilderArgs) ToProvenanceBuilderOutput() ProvenanceBuilderOutput {
	return i.ToProvenanceBuilderOutputWithContext(context.Background())
}

func (i ProvenanceBuilderArgs) ToProvenanceBuilderOutputWithContext(ctx context.Context) ProvenanceBuilderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProvenanceBuilderOutput)
}

func (i ProvenanceBuilderArgs) ToProvenanceBuilderPtrOutput() ProvenanceBuilderPtrOutput {
	return i.ToProvenanceBuilderPtrOutputWithContext(context.Background())
}

func (i ProvenanceBuilderArgs) ToProvenanceBuilderPtrOutputWithContext(ctx context.Context) ProvenanceBuilderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProvenanceBuilderOutput).ToProvenanceBuilderPtrOutputWithContext(ctx)
}

// ProvenanceBuilderPtrInput is an input type that accepts ProvenanceBuilderArgs, ProvenanceBuilderPtr and ProvenanceBuilderPtrOutput values.
// You can construct a concrete instance of `ProvenanceBuilderPtrInput` via:
//
//	        ProvenanceBuilderArgs{...}
//
//	or:
//
//	        nil
type ProvenanceBuilderPtrInput interface {
	pulumi.Input

	ToProvenanceBuilderPtrOutput() ProvenanceBuilderPtrOutput
	ToProvenanceBuilderPtrOutputWithContext(context.Context) ProvenanceBuilderPtrOutput
}

type provenanceBuilderPtrType ProvenanceBuilderArgs

func ProvenanceBuilderPtr(v *ProvenanceBuilderArgs) ProvenanceBuilderPtrInput {
	return (*provenanceBuilderPtrType)(v)
}

func (*provenanceBuilderPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProvenanceBuilder)(nil)).Elem()
}

func (i *provenanceBuilderPtrType) ToProvenanceBuilderPtrOutput() ProvenanceBuilderPtrOutput {
	return i.ToProvenanceBuilderPtrOutputWithContext(context.Background())
}

func (i *provenanceBuilderPtrType) ToProvenanceBuilderPtrOutputWithContext(ctx context.Context) ProvenanceBuilderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProvenanceBuilderPtrOutput)
}

type ProvenanceBuilderOutput struct{ *pulumi.OutputState }

func (ProvenanceBuilderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProvenanceBuilder)(nil)).Elem()
}

func (o ProvenanceBuilderOutput) ToProvenanceBuilderOutput() ProvenanceBuilderOutput {
	return o
}

func (o ProvenanceBuilderOutput) ToProvenanceBuilderOutputWithContext(ctx context.Context) ProvenanceBuilderOutput {
	return o
}

func (o ProvenanceBuilderOutput) ToProvenanceBuilderPtrOutput() ProvenanceBuilderPtrOutput {
	return o.ToProvenanceBuilderPtrOutputWithContext(context.Background())
}

func (o ProvenanceBuilderOutput) ToProvenanceBuilderPtrOutputWithContext(ctx context.Context) ProvenanceBuilderPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProvenanceBuilder) *ProvenanceBuilder {
		return &v
	}).(ProvenanceBuilderPtrOutput)
}

func (o ProvenanceBuilderOutput) BuilderDependencies() ResourceDescriptorArrayOutput {
	return o.ApplyT(func(v ProvenanceBuilder) []ResourceDescriptor { return v.BuilderDependencies }).(ResourceDescriptorArrayOutput)
}

func (o ProvenanceBuilderOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProvenanceBuilder) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o ProvenanceBuilderOutput) Version() pulumi.StringMapOutput {
	return o.ApplyT(func(v ProvenanceBuilder) map[string]string { return v.Version }).(pulumi.StringMapOutput)
}

type ProvenanceBuilderPtrOutput struct{ *pulumi.OutputState }

func (ProvenanceBuilderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProvenanceBuilder)(nil)).Elem()
}

func (o ProvenanceBuilderPtrOutput) ToProvenanceBuilderPtrOutput() ProvenanceBuilderPtrOutput {
	return o
}

func (o ProvenanceBuilderPtrOutput) ToProvenanceBuilderPtrOutputWithContext(ctx context.Context) ProvenanceBuilderPtrOutput {
	return o
}

func (o ProvenanceBuilderPtrOutput) Elem() ProvenanceBuilderOutput {
	return o.ApplyT(func(v *ProvenanceBuilder) ProvenanceBuilder {
		if v != nil {
			return *v
		}
		var ret ProvenanceBuilder
		return ret
	}).(ProvenanceBuilderOutput)
}

func (o ProvenanceBuilderPtrOutput) BuilderDependencies() ResourceDescriptorArrayOutput {
	return o.ApplyT(func(v *ProvenanceBuilder) []ResourceDescriptor {
		if v == nil {
			return nil
		}
		return v.BuilderDependencies
	}).(ResourceDescriptorArrayOutput)
}

func (o ProvenanceBuilderPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProvenanceBuilder) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

func (o ProvenanceBuilderPtrOutput) Version() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ProvenanceBuilder) map[string]string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringMapOutput)
}

type ProvenanceBuilderResponse struct {
	BuilderDependencies []ResourceDescriptorResponse `pulumi:"builderDependencies"`
	Version             map[string]string            `pulumi:"version"`
}

type ProvenanceBuilderResponseOutput struct{ *pulumi.OutputState }

func (ProvenanceBuilderResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProvenanceBuilderResponse)(nil)).Elem()
}

func (o ProvenanceBuilderResponseOutput) ToProvenanceBuilderResponseOutput() ProvenanceBuilderResponseOutput {
	return o
}

func (o ProvenanceBuilderResponseOutput) ToProvenanceBuilderResponseOutputWithContext(ctx context.Context) ProvenanceBuilderResponseOutput {
	return o
}

func (o ProvenanceBuilderResponseOutput) BuilderDependencies() ResourceDescriptorResponseArrayOutput {
	return o.ApplyT(func(v ProvenanceBuilderResponse) []ResourceDescriptorResponse { return v.BuilderDependencies }).(ResourceDescriptorResponseArrayOutput)
}

func (o ProvenanceBuilderResponseOutput) Version() pulumi.StringMapOutput {
	return o.ApplyT(func(v ProvenanceBuilderResponse) map[string]string { return v.Version }).(pulumi.StringMapOutput)
}

// Publisher contains information about the publisher of this Note.
type Publisher struct {
	// Provides information about the authority of the issuing party to release the document, in particular, the party's constituency and responsibilities or other obligations.
	IssuingAuthority *string `pulumi:"issuingAuthority"`
	// Name of the publisher. Examples: 'Google', 'Google Cloud Platform'.
	Name *string `pulumi:"name"`
	// The context or namespace. Contains a URL which is under control of the issuing party and can be used as a globally unique identifier for that issuing party. Example: https://csaf.io
	PublisherNamespace *string `pulumi:"publisherNamespace"`
}

// PublisherInput is an input type that accepts PublisherArgs and PublisherOutput values.
// You can construct a concrete instance of `PublisherInput` via:
//
//	PublisherArgs{...}
type PublisherInput interface {
	pulumi.Input

	ToPublisherOutput() PublisherOutput
	ToPublisherOutputWithContext(context.Context) PublisherOutput
}

// Publisher contains information about the publisher of this Note.
type PublisherArgs struct {
	// Provides information about the authority of the issuing party to release the document, in particular, the party's constituency and responsibilities or other obligations.
	IssuingAuthority pulumi.StringPtrInput `pulumi:"issuingAuthority"`
	// Name of the publisher. Examples: 'Google', 'Google Cloud Platform'.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The context or namespace. Contains a URL which is under control of the issuing party and can be used as a globally unique identifier for that issuing party. Example: https://csaf.io
	PublisherNamespace pulumi.StringPtrInput `pulumi:"publisherNamespace"`
}

func (PublisherArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Publisher)(nil)).Elem()
}

func (i PublisherArgs) ToPublisherOutput() PublisherOutput {
	return i.ToPublisherOutputWithContext(context.Background())
}

func (i PublisherArgs) ToPublisherOutputWithContext(ctx context.Context) PublisherOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublisherOutput)
}

func (i PublisherArgs) ToPublisherPtrOutput() PublisherPtrOutput {
	return i.ToPublisherPtrOutputWithContext(context.Background())
}

func (i PublisherArgs) ToPublisherPtrOutputWithContext(ctx context.Context) PublisherPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublisherOutput).ToPublisherPtrOutputWithContext(ctx)
}

// PublisherPtrInput is an input type that accepts PublisherArgs, PublisherPtr and PublisherPtrOutput values.
// You can construct a concrete instance of `PublisherPtrInput` via:
//
//	        PublisherArgs{...}
//
//	or:
//
//	        nil
type PublisherPtrInput interface {
	pulumi.Input

	ToPublisherPtrOutput() PublisherPtrOutput
	ToPublisherPtrOutputWithContext(context.Context) PublisherPtrOutput
}

type publisherPtrType PublisherArgs

func PublisherPtr(v *PublisherArgs) PublisherPtrInput {
	return (*publisherPtrType)(v)
}

func (*publisherPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Publisher)(nil)).Elem()
}

func (i *publisherPtrType) ToPublisherPtrOutput() PublisherPtrOutput {
	return i.ToPublisherPtrOutputWithContext(context.Background())
}

func (i *publisherPtrType) ToPublisherPtrOutputWithContext(ctx context.Context) PublisherPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublisherPtrOutput)
}

// Publisher contains information about the publisher of this Note.
type PublisherOutput struct{ *pulumi.OutputState }

func (PublisherOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Publisher)(nil)).Elem()
}

func (o PublisherOutput) ToPublisherOutput() PublisherOutput {
	return o
}

func (o PublisherOutput) ToPublisherOutputWithContext(ctx context.Context) PublisherOutput {
	return o
}

func (o PublisherOutput) ToPublisherPtrOutput() PublisherPtrOutput {
	return o.ToPublisherPtrOutputWithContext(context.Background())
}

func (o PublisherOutput) ToPublisherPtrOutputWithContext(ctx context.Context) PublisherPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Publisher) *Publisher {
		return &v
	}).(PublisherPtrOutput)
}

// Provides information about the authority of the issuing party to release the document, in particular, the party's constituency and responsibilities or other obligations.
func (o PublisherOutput) IssuingAuthority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Publisher) *string { return v.IssuingAuthority }).(pulumi.StringPtrOutput)
}

// Name of the publisher. Examples: 'Google', 'Google Cloud Platform'.
func (o PublisherOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Publisher) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The context or namespace. Contains a URL which is under control of the issuing party and can be used as a globally unique identifier for that issuing party. Example: https://csaf.io
func (o PublisherOutput) PublisherNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Publisher) *string { return v.PublisherNamespace }).(pulumi.StringPtrOutput)
}

type PublisherPtrOutput struct{ *pulumi.OutputState }

func (PublisherPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Publisher)(nil)).Elem()
}

func (o PublisherPtrOutput) ToPublisherPtrOutput() PublisherPtrOutput {
	return o
}

func (o PublisherPtrOutput) ToPublisherPtrOutputWithContext(ctx context.Context) PublisherPtrOutput {
	return o
}

func (o PublisherPtrOutput) Elem() PublisherOutput {
	return o.ApplyT(func(v *Publisher) Publisher {
		if v != nil {
			return *v
		}
		var ret Publisher
		return ret
	}).(PublisherOutput)
}

// Provides information about the authority of the issuing party to release the document, in particular, the party's constituency and responsibilities or other obligations.
func (o PublisherPtrOutput) IssuingAuthority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Publisher) *string {
		if v == nil {
			return nil
		}
		return v.IssuingAuthority
	}).(pulumi.StringPtrOutput)
}

// Name of the publisher. Examples: 'Google', 'Google Cloud Platform'.
func (o PublisherPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Publisher) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The context or namespace. Contains a URL which is under control of the issuing party and can be used as a globally unique identifier for that issuing party. Example: https://csaf.io
func (o PublisherPtrOutput) PublisherNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Publisher) *string {
		if v == nil {
			return nil
		}
		return v.PublisherNamespace
	}).(pulumi.StringPtrOutput)
}

// Publisher contains information about the publisher of this Note.
type PublisherResponse struct {
	// Provides information about the authority of the issuing party to release the document, in particular, the party's constituency and responsibilities or other obligations.
	IssuingAuthority string `pulumi:"issuingAuthority"`
	// Name of the publisher. Examples: 'Google', 'Google Cloud Platform'.
	Name string `pulumi:"name"`
	// The context or namespace. Contains a URL which is under control of the issuing party and can be used as a globally unique identifier for that issuing party. Example: https://csaf.io
	PublisherNamespace string `pulumi:"publisherNamespace"`
}

// Publisher contains information about the publisher of this Note.
type PublisherResponseOutput struct{ *pulumi.OutputState }

func (PublisherResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PublisherResponse)(nil)).Elem()
}

func (o PublisherResponseOutput) ToPublisherResponseOutput() PublisherResponseOutput {
	return o
}

func (o PublisherResponseOutput) ToPublisherResponseOutputWithContext(ctx context.Context) PublisherResponseOutput {
	return o
}

// Provides information about the authority of the issuing party to release the document, in particular, the party's constituency and responsibilities or other obligations.
func (o PublisherResponseOutput) IssuingAuthority() pulumi.StringOutput {
	return o.ApplyT(func(v PublisherResponse) string { return v.IssuingAuthority }).(pulumi.StringOutput)
}

// Name of the publisher. Examples: 'Google', 'Google Cloud Platform'.
func (o PublisherResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PublisherResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The context or namespace. Contains a URL which is under control of the issuing party and can be used as a globally unique identifier for that issuing party. Example: https://csaf.io
func (o PublisherResponseOutput) PublisherNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v PublisherResponse) string { return v.PublisherNamespace }).(pulumi.StringOutput)
}

// Steps taken to build the artifact. For a TaskRun, typically each container corresponds to one step in the recipe.
type Recipe struct {
	// Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were "make", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint. Since the arguments field can greatly vary in structure, depending on the builder and recipe type, this is of form "Any".
	Arguments []map[string]interface{} `pulumi:"arguments"`
	// Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were "make", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as zero is default unset value for int64.
	DefinedInMaterial *string `pulumi:"definedInMaterial"`
	// String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were "make", then this would reference the directory in which to run make as well as which target to use.
	EntryPoint *string `pulumi:"entryPoint"`
	// Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy. Since the environment field can greatly vary in structure, depending on the builder and recipe type, this is of form "Any".
	Environment []map[string]interface{} `pulumi:"environment"`
	// URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials.
	Type *string `pulumi:"type"`
}

// RecipeInput is an input type that accepts RecipeArgs and RecipeOutput values.
// You can construct a concrete instance of `RecipeInput` via:
//
//	RecipeArgs{...}
type RecipeInput interface {
	pulumi.Input

	ToRecipeOutput() RecipeOutput
	ToRecipeOutputWithContext(context.Context) RecipeOutput
}

// Steps taken to build the artifact. For a TaskRun, typically each container corresponds to one step in the recipe.
type RecipeArgs struct {
	// Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were "make", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint. Since the arguments field can greatly vary in structure, depending on the builder and recipe type, this is of form "Any".
	Arguments pulumi.MapArrayInput `pulumi:"arguments"`
	// Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were "make", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as zero is default unset value for int64.
	DefinedInMaterial pulumi.StringPtrInput `pulumi:"definedInMaterial"`
	// String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were "make", then this would reference the directory in which to run make as well as which target to use.
	EntryPoint pulumi.StringPtrInput `pulumi:"entryPoint"`
	// Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy. Since the environment field can greatly vary in structure, depending on the builder and recipe type, this is of form "Any".
	Environment pulumi.MapArrayInput `pulumi:"environment"`
	// URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (RecipeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Recipe)(nil)).Elem()
}

func (i RecipeArgs) ToRecipeOutput() RecipeOutput {
	return i.ToRecipeOutputWithContext(context.Background())
}

func (i RecipeArgs) ToRecipeOutputWithContext(ctx context.Context) RecipeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecipeOutput)
}

func (i RecipeArgs) ToRecipePtrOutput() RecipePtrOutput {
	return i.ToRecipePtrOutputWithContext(context.Background())
}

func (i RecipeArgs) ToRecipePtrOutputWithContext(ctx context.Context) RecipePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecipeOutput).ToRecipePtrOutputWithContext(ctx)
}

// RecipePtrInput is an input type that accepts RecipeArgs, RecipePtr and RecipePtrOutput values.
// You can construct a concrete instance of `RecipePtrInput` via:
//
//	        RecipeArgs{...}
//
//	or:
//
//	        nil
type RecipePtrInput interface {
	pulumi.Input

	ToRecipePtrOutput() RecipePtrOutput
	ToRecipePtrOutputWithContext(context.Context) RecipePtrOutput
}

type recipePtrType RecipeArgs

func RecipePtr(v *RecipeArgs) RecipePtrInput {
	return (*recipePtrType)(v)
}

func (*recipePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Recipe)(nil)).Elem()
}

func (i *recipePtrType) ToRecipePtrOutput() RecipePtrOutput {
	return i.ToRecipePtrOutputWithContext(context.Background())
}

func (i *recipePtrType) ToRecipePtrOutputWithContext(ctx context.Context) RecipePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecipePtrOutput)
}

// Steps taken to build the artifact. For a TaskRun, typically each container corresponds to one step in the recipe.
type RecipeOutput struct{ *pulumi.OutputState }

func (RecipeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Recipe)(nil)).Elem()
}

func (o RecipeOutput) ToRecipeOutput() RecipeOutput {
	return o
}

func (o RecipeOutput) ToRecipeOutputWithContext(ctx context.Context) RecipeOutput {
	return o
}

func (o RecipeOutput) ToRecipePtrOutput() RecipePtrOutput {
	return o.ToRecipePtrOutputWithContext(context.Background())
}

func (o RecipeOutput) ToRecipePtrOutputWithContext(ctx context.Context) RecipePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Recipe) *Recipe {
		return &v
	}).(RecipePtrOutput)
}

// Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were "make", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint. Since the arguments field can greatly vary in structure, depending on the builder and recipe type, this is of form "Any".
func (o RecipeOutput) Arguments() pulumi.MapArrayOutput {
	return o.ApplyT(func(v Recipe) []map[string]interface{} { return v.Arguments }).(pulumi.MapArrayOutput)
}

// Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were "make", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as zero is default unset value for int64.
func (o RecipeOutput) DefinedInMaterial() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Recipe) *string { return v.DefinedInMaterial }).(pulumi.StringPtrOutput)
}

// String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were "make", then this would reference the directory in which to run make as well as which target to use.
func (o RecipeOutput) EntryPoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Recipe) *string { return v.EntryPoint }).(pulumi.StringPtrOutput)
}

// Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy. Since the environment field can greatly vary in structure, depending on the builder and recipe type, this is of form "Any".
func (o RecipeOutput) Environment() pulumi.MapArrayOutput {
	return o.ApplyT(func(v Recipe) []map[string]interface{} { return v.Environment }).(pulumi.MapArrayOutput)
}

// URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials.
func (o RecipeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Recipe) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type RecipePtrOutput struct{ *pulumi.OutputState }

func (RecipePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Recipe)(nil)).Elem()
}

func (o RecipePtrOutput) ToRecipePtrOutput() RecipePtrOutput {
	return o
}

func (o RecipePtrOutput) ToRecipePtrOutputWithContext(ctx context.Context) RecipePtrOutput {
	return o
}

func (o RecipePtrOutput) Elem() RecipeOutput {
	return o.ApplyT(func(v *Recipe) Recipe {
		if v != nil {
			return *v
		}
		var ret Recipe
		return ret
	}).(RecipeOutput)
}

// Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were "make", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint. Since the arguments field can greatly vary in structure, depending on the builder and recipe type, this is of form "Any".
func (o RecipePtrOutput) Arguments() pulumi.MapArrayOutput {
	return o.ApplyT(func(v *Recipe) []map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Arguments
	}).(pulumi.MapArrayOutput)
}

// Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were "make", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as zero is default unset value for int64.
func (o RecipePtrOutput) DefinedInMaterial() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Recipe) *string {
		if v == nil {
			return nil
		}
		return v.DefinedInMaterial
	}).(pulumi.StringPtrOutput)
}

// String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were "make", then this would reference the directory in which to run make as well as which target to use.
func (o RecipePtrOutput) EntryPoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Recipe) *string {
		if v == nil {
			return nil
		}
		return v.EntryPoint
	}).(pulumi.StringPtrOutput)
}

// Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy. Since the environment field can greatly vary in structure, depending on the builder and recipe type, this is of form "Any".
func (o RecipePtrOutput) Environment() pulumi.MapArrayOutput {
	return o.ApplyT(func(v *Recipe) []map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Environment
	}).(pulumi.MapArrayOutput)
}

// URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials.
func (o RecipePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Recipe) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Steps taken to build the artifact. For a TaskRun, typically each container corresponds to one step in the recipe.
type RecipeResponse struct {
	// Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were "make", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint. Since the arguments field can greatly vary in structure, depending on the builder and recipe type, this is of form "Any".
	Arguments []map[string]interface{} `pulumi:"arguments"`
	// Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were "make", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as zero is default unset value for int64.
	DefinedInMaterial string `pulumi:"definedInMaterial"`
	// String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were "make", then this would reference the directory in which to run make as well as which target to use.
	EntryPoint string `pulumi:"entryPoint"`
	// Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy. Since the environment field can greatly vary in structure, depending on the builder and recipe type, this is of form "Any".
	Environment []map[string]interface{} `pulumi:"environment"`
	// URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials.
	Type string `pulumi:"type"`
}

// Steps taken to build the artifact. For a TaskRun, typically each container corresponds to one step in the recipe.
type RecipeResponseOutput struct{ *pulumi.OutputState }

func (RecipeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecipeResponse)(nil)).Elem()
}

func (o RecipeResponseOutput) ToRecipeResponseOutput() RecipeResponseOutput {
	return o
}

func (o RecipeResponseOutput) ToRecipeResponseOutputWithContext(ctx context.Context) RecipeResponseOutput {
	return o
}

// Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were "make", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint. Since the arguments field can greatly vary in structure, depending on the builder and recipe type, this is of form "Any".
func (o RecipeResponseOutput) Arguments() pulumi.MapArrayOutput {
	return o.ApplyT(func(v RecipeResponse) []map[string]interface{} { return v.Arguments }).(pulumi.MapArrayOutput)
}

// Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were "make", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as zero is default unset value for int64.
func (o RecipeResponseOutput) DefinedInMaterial() pulumi.StringOutput {
	return o.ApplyT(func(v RecipeResponse) string { return v.DefinedInMaterial }).(pulumi.StringOutput)
}

// String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were "make", then this would reference the directory in which to run make as well as which target to use.
func (o RecipeResponseOutput) EntryPoint() pulumi.StringOutput {
	return o.ApplyT(func(v RecipeResponse) string { return v.EntryPoint }).(pulumi.StringOutput)
}

// Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy. Since the environment field can greatly vary in structure, depending on the builder and recipe type, this is of form "Any".
func (o RecipeResponseOutput) Environment() pulumi.MapArrayOutput {
	return o.ApplyT(func(v RecipeResponse) []map[string]interface{} { return v.Environment }).(pulumi.MapArrayOutput)
}

// URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials.
func (o RecipeResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RecipeResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Metadata for any related URL information.
type RelatedUrl struct {
	// Label to describe usage of the URL.
	Label *string `pulumi:"label"`
	// Specific URL associated with the resource.
	Url *string `pulumi:"url"`
}

// RelatedUrlInput is an input type that accepts RelatedUrlArgs and RelatedUrlOutput values.
// You can construct a concrete instance of `RelatedUrlInput` via:
//
//	RelatedUrlArgs{...}
type RelatedUrlInput interface {
	pulumi.Input

	ToRelatedUrlOutput() RelatedUrlOutput
	ToRelatedUrlOutputWithContext(context.Context) RelatedUrlOutput
}

// Metadata for any related URL information.
type RelatedUrlArgs struct {
	// Label to describe usage of the URL.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// Specific URL associated with the resource.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (RelatedUrlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RelatedUrl)(nil)).Elem()
}

func (i RelatedUrlArgs) ToRelatedUrlOutput() RelatedUrlOutput {
	return i.ToRelatedUrlOutputWithContext(context.Background())
}

func (i RelatedUrlArgs) ToRelatedUrlOutputWithContext(ctx context.Context) RelatedUrlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelatedUrlOutput)
}

func (i RelatedUrlArgs) ToRelatedUrlPtrOutput() RelatedUrlPtrOutput {
	return i.ToRelatedUrlPtrOutputWithContext(context.Background())
}

func (i RelatedUrlArgs) ToRelatedUrlPtrOutputWithContext(ctx context.Context) RelatedUrlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelatedUrlOutput).ToRelatedUrlPtrOutputWithContext(ctx)
}

// RelatedUrlPtrInput is an input type that accepts RelatedUrlArgs, RelatedUrlPtr and RelatedUrlPtrOutput values.
// You can construct a concrete instance of `RelatedUrlPtrInput` via:
//
//	        RelatedUrlArgs{...}
//
//	or:
//
//	        nil
type RelatedUrlPtrInput interface {
	pulumi.Input

	ToRelatedUrlPtrOutput() RelatedUrlPtrOutput
	ToRelatedUrlPtrOutputWithContext(context.Context) RelatedUrlPtrOutput
}

type relatedUrlPtrType RelatedUrlArgs

func RelatedUrlPtr(v *RelatedUrlArgs) RelatedUrlPtrInput {
	return (*relatedUrlPtrType)(v)
}

func (*relatedUrlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RelatedUrl)(nil)).Elem()
}

func (i *relatedUrlPtrType) ToRelatedUrlPtrOutput() RelatedUrlPtrOutput {
	return i.ToRelatedUrlPtrOutputWithContext(context.Background())
}

func (i *relatedUrlPtrType) ToRelatedUrlPtrOutputWithContext(ctx context.Context) RelatedUrlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelatedUrlPtrOutput)
}

// RelatedUrlArrayInput is an input type that accepts RelatedUrlArray and RelatedUrlArrayOutput values.
// You can construct a concrete instance of `RelatedUrlArrayInput` via:
//
//	RelatedUrlArray{ RelatedUrlArgs{...} }
type RelatedUrlArrayInput interface {
	pulumi.Input

	ToRelatedUrlArrayOutput() RelatedUrlArrayOutput
	ToRelatedUrlArrayOutputWithContext(context.Context) RelatedUrlArrayOutput
}

type RelatedUrlArray []RelatedUrlInput

func (RelatedUrlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RelatedUrl)(nil)).Elem()
}

func (i RelatedUrlArray) ToRelatedUrlArrayOutput() RelatedUrlArrayOutput {
	return i.ToRelatedUrlArrayOutputWithContext(context.Background())
}

func (i RelatedUrlArray) ToRelatedUrlArrayOutputWithContext(ctx context.Context) RelatedUrlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelatedUrlArrayOutput)
}

// Metadata for any related URL information.
type RelatedUrlOutput struct{ *pulumi.OutputState }

func (RelatedUrlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RelatedUrl)(nil)).Elem()
}

func (o RelatedUrlOutput) ToRelatedUrlOutput() RelatedUrlOutput {
	return o
}

func (o RelatedUrlOutput) ToRelatedUrlOutputWithContext(ctx context.Context) RelatedUrlOutput {
	return o
}

func (o RelatedUrlOutput) ToRelatedUrlPtrOutput() RelatedUrlPtrOutput {
	return o.ToRelatedUrlPtrOutputWithContext(context.Background())
}

func (o RelatedUrlOutput) ToRelatedUrlPtrOutputWithContext(ctx context.Context) RelatedUrlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RelatedUrl) *RelatedUrl {
		return &v
	}).(RelatedUrlPtrOutput)
}

// Label to describe usage of the URL.
func (o RelatedUrlOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RelatedUrl) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// Specific URL associated with the resource.
func (o RelatedUrlOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RelatedUrl) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type RelatedUrlPtrOutput struct{ *pulumi.OutputState }

func (RelatedUrlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RelatedUrl)(nil)).Elem()
}

func (o RelatedUrlPtrOutput) ToRelatedUrlPtrOutput() RelatedUrlPtrOutput {
	return o
}

func (o RelatedUrlPtrOutput) ToRelatedUrlPtrOutputWithContext(ctx context.Context) RelatedUrlPtrOutput {
	return o
}

func (o RelatedUrlPtrOutput) Elem() RelatedUrlOutput {
	return o.ApplyT(func(v *RelatedUrl) RelatedUrl {
		if v != nil {
			return *v
		}
		var ret RelatedUrl
		return ret
	}).(RelatedUrlOutput)
}

// Label to describe usage of the URL.
func (o RelatedUrlPtrOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RelatedUrl) *string {
		if v == nil {
			return nil
		}
		return v.Label
	}).(pulumi.StringPtrOutput)
}

// Specific URL associated with the resource.
func (o RelatedUrlPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RelatedUrl) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

type RelatedUrlArrayOutput struct{ *pulumi.OutputState }

func (RelatedUrlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RelatedUrl)(nil)).Elem()
}

func (o RelatedUrlArrayOutput) ToRelatedUrlArrayOutput() RelatedUrlArrayOutput {
	return o
}

func (o RelatedUrlArrayOutput) ToRelatedUrlArrayOutputWithContext(ctx context.Context) RelatedUrlArrayOutput {
	return o
}

func (o RelatedUrlArrayOutput) Index(i pulumi.IntInput) RelatedUrlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RelatedUrl {
		return vs[0].([]RelatedUrl)[vs[1].(int)]
	}).(RelatedUrlOutput)
}

// Metadata for any related URL information.
type RelatedUrlResponse struct {
	// Label to describe usage of the URL.
	Label string `pulumi:"label"`
	// Specific URL associated with the resource.
	Url string `pulumi:"url"`
}

// Metadata for any related URL information.
type RelatedUrlResponseOutput struct{ *pulumi.OutputState }

func (RelatedUrlResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RelatedUrlResponse)(nil)).Elem()
}

func (o RelatedUrlResponseOutput) ToRelatedUrlResponseOutput() RelatedUrlResponseOutput {
	return o
}

func (o RelatedUrlResponseOutput) ToRelatedUrlResponseOutputWithContext(ctx context.Context) RelatedUrlResponseOutput {
	return o
}

// Label to describe usage of the URL.
func (o RelatedUrlResponseOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v RelatedUrlResponse) string { return v.Label }).(pulumi.StringOutput)
}

// Specific URL associated with the resource.
func (o RelatedUrlResponseOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v RelatedUrlResponse) string { return v.Url }).(pulumi.StringOutput)
}

type RelatedUrlResponseArrayOutput struct{ *pulumi.OutputState }

func (RelatedUrlResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RelatedUrlResponse)(nil)).Elem()
}

func (o RelatedUrlResponseArrayOutput) ToRelatedUrlResponseArrayOutput() RelatedUrlResponseArrayOutput {
	return o
}

func (o RelatedUrlResponseArrayOutput) ToRelatedUrlResponseArrayOutputWithContext(ctx context.Context) RelatedUrlResponseArrayOutput {
	return o
}

func (o RelatedUrlResponseArrayOutput) Index(i pulumi.IntInput) RelatedUrlResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RelatedUrlResponse {
		return vs[0].([]RelatedUrlResponse)[vs[1].(int)]
	}).(RelatedUrlResponseOutput)
}

// Specifies details on how to handle (and presumably, fix) a vulnerability.
type Remediation struct {
	// Contains a comprehensive human-readable discussion of the remediation.
	Details *string `pulumi:"details"`
	// The type of remediation that can be applied.
	RemediationType *RemediationRemediationType `pulumi:"remediationType"`
	// Contains the URL where to obtain the remediation.
	RemediationUri *RelatedUrl `pulumi:"remediationUri"`
}

// RemediationInput is an input type that accepts RemediationArgs and RemediationOutput values.
// You can construct a concrete instance of `RemediationInput` via:
//
//	RemediationArgs{...}
type RemediationInput interface {
	pulumi.Input

	ToRemediationOutput() RemediationOutput
	ToRemediationOutputWithContext(context.Context) RemediationOutput
}

// Specifies details on how to handle (and presumably, fix) a vulnerability.
type RemediationArgs struct {
	// Contains a comprehensive human-readable discussion of the remediation.
	Details pulumi.StringPtrInput `pulumi:"details"`
	// The type of remediation that can be applied.
	RemediationType RemediationRemediationTypePtrInput `pulumi:"remediationType"`
	// Contains the URL where to obtain the remediation.
	RemediationUri RelatedUrlPtrInput `pulumi:"remediationUri"`
}

func (RemediationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Remediation)(nil)).Elem()
}

func (i RemediationArgs) ToRemediationOutput() RemediationOutput {
	return i.ToRemediationOutputWithContext(context.Background())
}

func (i RemediationArgs) ToRemediationOutputWithContext(ctx context.Context) RemediationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemediationOutput)
}

// RemediationArrayInput is an input type that accepts RemediationArray and RemediationArrayOutput values.
// You can construct a concrete instance of `RemediationArrayInput` via:
//
//	RemediationArray{ RemediationArgs{...} }
type RemediationArrayInput interface {
	pulumi.Input

	ToRemediationArrayOutput() RemediationArrayOutput
	ToRemediationArrayOutputWithContext(context.Context) RemediationArrayOutput
}

type RemediationArray []RemediationInput

func (RemediationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Remediation)(nil)).Elem()
}

func (i RemediationArray) ToRemediationArrayOutput() RemediationArrayOutput {
	return i.ToRemediationArrayOutputWithContext(context.Background())
}

func (i RemediationArray) ToRemediationArrayOutputWithContext(ctx context.Context) RemediationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemediationArrayOutput)
}

// Specifies details on how to handle (and presumably, fix) a vulnerability.
type RemediationOutput struct{ *pulumi.OutputState }

func (RemediationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Remediation)(nil)).Elem()
}

func (o RemediationOutput) ToRemediationOutput() RemediationOutput {
	return o
}

func (o RemediationOutput) ToRemediationOutputWithContext(ctx context.Context) RemediationOutput {
	return o
}

// Contains a comprehensive human-readable discussion of the remediation.
func (o RemediationOutput) Details() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Remediation) *string { return v.Details }).(pulumi.StringPtrOutput)
}

// The type of remediation that can be applied.
func (o RemediationOutput) RemediationType() RemediationRemediationTypePtrOutput {
	return o.ApplyT(func(v Remediation) *RemediationRemediationType { return v.RemediationType }).(RemediationRemediationTypePtrOutput)
}

// Contains the URL where to obtain the remediation.
func (o RemediationOutput) RemediationUri() RelatedUrlPtrOutput {
	return o.ApplyT(func(v Remediation) *RelatedUrl { return v.RemediationUri }).(RelatedUrlPtrOutput)
}

type RemediationArrayOutput struct{ *pulumi.OutputState }

func (RemediationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Remediation)(nil)).Elem()
}

func (o RemediationArrayOutput) ToRemediationArrayOutput() RemediationArrayOutput {
	return o
}

func (o RemediationArrayOutput) ToRemediationArrayOutputWithContext(ctx context.Context) RemediationArrayOutput {
	return o
}

func (o RemediationArrayOutput) Index(i pulumi.IntInput) RemediationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Remediation {
		return vs[0].([]Remediation)[vs[1].(int)]
	}).(RemediationOutput)
}

// Specifies details on how to handle (and presumably, fix) a vulnerability.
type RemediationResponse struct {
	// Contains a comprehensive human-readable discussion of the remediation.
	Details string `pulumi:"details"`
	// The type of remediation that can be applied.
	RemediationType string `pulumi:"remediationType"`
	// Contains the URL where to obtain the remediation.
	RemediationUri RelatedUrlResponse `pulumi:"remediationUri"`
}

// Specifies details on how to handle (and presumably, fix) a vulnerability.
type RemediationResponseOutput struct{ *pulumi.OutputState }

func (RemediationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemediationResponse)(nil)).Elem()
}

func (o RemediationResponseOutput) ToRemediationResponseOutput() RemediationResponseOutput {
	return o
}

func (o RemediationResponseOutput) ToRemediationResponseOutputWithContext(ctx context.Context) RemediationResponseOutput {
	return o
}

// Contains a comprehensive human-readable discussion of the remediation.
func (o RemediationResponseOutput) Details() pulumi.StringOutput {
	return o.ApplyT(func(v RemediationResponse) string { return v.Details }).(pulumi.StringOutput)
}

// The type of remediation that can be applied.
func (o RemediationResponseOutput) RemediationType() pulumi.StringOutput {
	return o.ApplyT(func(v RemediationResponse) string { return v.RemediationType }).(pulumi.StringOutput)
}

// Contains the URL where to obtain the remediation.
func (o RemediationResponseOutput) RemediationUri() RelatedUrlResponseOutput {
	return o.ApplyT(func(v RemediationResponse) RelatedUrlResponse { return v.RemediationUri }).(RelatedUrlResponseOutput)
}

type RemediationResponseArrayOutput struct{ *pulumi.OutputState }

func (RemediationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RemediationResponse)(nil)).Elem()
}

func (o RemediationResponseArrayOutput) ToRemediationResponseArrayOutput() RemediationResponseArrayOutput {
	return o
}

func (o RemediationResponseArrayOutput) ToRemediationResponseArrayOutputWithContext(ctx context.Context) RemediationResponseArrayOutput {
	return o
}

func (o RemediationResponseArrayOutput) Index(i pulumi.IntInput) RemediationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RemediationResponse {
		return vs[0].([]RemediationResponse)[vs[1].(int)]
	}).(RemediationResponseOutput)
}

// A unique identifier for a Cloud Repo.
type RepoId struct {
	// A combination of a project ID and a repo name.
	ProjectRepoId *ProjectRepoId `pulumi:"projectRepoId"`
	// A server-assigned, globally unique identifier.
	Uid *string `pulumi:"uid"`
}

// RepoIdInput is an input type that accepts RepoIdArgs and RepoIdOutput values.
// You can construct a concrete instance of `RepoIdInput` via:
//
//	RepoIdArgs{...}
type RepoIdInput interface {
	pulumi.Input

	ToRepoIdOutput() RepoIdOutput
	ToRepoIdOutputWithContext(context.Context) RepoIdOutput
}

// A unique identifier for a Cloud Repo.
type RepoIdArgs struct {
	// A combination of a project ID and a repo name.
	ProjectRepoId ProjectRepoIdPtrInput `pulumi:"projectRepoId"`
	// A server-assigned, globally unique identifier.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (RepoIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepoId)(nil)).Elem()
}

func (i RepoIdArgs) ToRepoIdOutput() RepoIdOutput {
	return i.ToRepoIdOutputWithContext(context.Background())
}

func (i RepoIdArgs) ToRepoIdOutputWithContext(ctx context.Context) RepoIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepoIdOutput)
}

func (i RepoIdArgs) ToRepoIdPtrOutput() RepoIdPtrOutput {
	return i.ToRepoIdPtrOutputWithContext(context.Background())
}

func (i RepoIdArgs) ToRepoIdPtrOutputWithContext(ctx context.Context) RepoIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepoIdOutput).ToRepoIdPtrOutputWithContext(ctx)
}

// RepoIdPtrInput is an input type that accepts RepoIdArgs, RepoIdPtr and RepoIdPtrOutput values.
// You can construct a concrete instance of `RepoIdPtrInput` via:
//
//	        RepoIdArgs{...}
//
//	or:
//
//	        nil
type RepoIdPtrInput interface {
	pulumi.Input

	ToRepoIdPtrOutput() RepoIdPtrOutput
	ToRepoIdPtrOutputWithContext(context.Context) RepoIdPtrOutput
}

type repoIdPtrType RepoIdArgs

func RepoIdPtr(v *RepoIdArgs) RepoIdPtrInput {
	return (*repoIdPtrType)(v)
}

func (*repoIdPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepoId)(nil)).Elem()
}

func (i *repoIdPtrType) ToRepoIdPtrOutput() RepoIdPtrOutput {
	return i.ToRepoIdPtrOutputWithContext(context.Background())
}

func (i *repoIdPtrType) ToRepoIdPtrOutputWithContext(ctx context.Context) RepoIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepoIdPtrOutput)
}

// A unique identifier for a Cloud Repo.
type RepoIdOutput struct{ *pulumi.OutputState }

func (RepoIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepoId)(nil)).Elem()
}

func (o RepoIdOutput) ToRepoIdOutput() RepoIdOutput {
	return o
}

func (o RepoIdOutput) ToRepoIdOutputWithContext(ctx context.Context) RepoIdOutput {
	return o
}

func (o RepoIdOutput) ToRepoIdPtrOutput() RepoIdPtrOutput {
	return o.ToRepoIdPtrOutputWithContext(context.Background())
}

func (o RepoIdOutput) ToRepoIdPtrOutputWithContext(ctx context.Context) RepoIdPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepoId) *RepoId {
		return &v
	}).(RepoIdPtrOutput)
}

// A combination of a project ID and a repo name.
func (o RepoIdOutput) ProjectRepoId() ProjectRepoIdPtrOutput {
	return o.ApplyT(func(v RepoId) *ProjectRepoId { return v.ProjectRepoId }).(ProjectRepoIdPtrOutput)
}

// A server-assigned, globally unique identifier.
func (o RepoIdOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepoId) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type RepoIdPtrOutput struct{ *pulumi.OutputState }

func (RepoIdPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepoId)(nil)).Elem()
}

func (o RepoIdPtrOutput) ToRepoIdPtrOutput() RepoIdPtrOutput {
	return o
}

func (o RepoIdPtrOutput) ToRepoIdPtrOutputWithContext(ctx context.Context) RepoIdPtrOutput {
	return o
}

func (o RepoIdPtrOutput) Elem() RepoIdOutput {
	return o.ApplyT(func(v *RepoId) RepoId {
		if v != nil {
			return *v
		}
		var ret RepoId
		return ret
	}).(RepoIdOutput)
}

// A combination of a project ID and a repo name.
func (o RepoIdPtrOutput) ProjectRepoId() ProjectRepoIdPtrOutput {
	return o.ApplyT(func(v *RepoId) *ProjectRepoId {
		if v == nil {
			return nil
		}
		return v.ProjectRepoId
	}).(ProjectRepoIdPtrOutput)
}

// A server-assigned, globally unique identifier.
func (o RepoIdPtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepoId) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

// A unique identifier for a Cloud Repo.
type RepoIdResponse struct {
	// A combination of a project ID and a repo name.
	ProjectRepoId ProjectRepoIdResponse `pulumi:"projectRepoId"`
	// A server-assigned, globally unique identifier.
	Uid string `pulumi:"uid"`
}

// A unique identifier for a Cloud Repo.
type RepoIdResponseOutput struct{ *pulumi.OutputState }

func (RepoIdResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepoIdResponse)(nil)).Elem()
}

func (o RepoIdResponseOutput) ToRepoIdResponseOutput() RepoIdResponseOutput {
	return o
}

func (o RepoIdResponseOutput) ToRepoIdResponseOutputWithContext(ctx context.Context) RepoIdResponseOutput {
	return o
}

// A combination of a project ID and a repo name.
func (o RepoIdResponseOutput) ProjectRepoId() ProjectRepoIdResponseOutput {
	return o.ApplyT(func(v RepoIdResponse) ProjectRepoIdResponse { return v.ProjectRepoId }).(ProjectRepoIdResponseOutput)
}

// A server-assigned, globally unique identifier.
func (o RepoIdResponseOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v RepoIdResponse) string { return v.Uid }).(pulumi.StringOutput)
}

type ResourceDescriptor struct {
	Annotations      map[string]interface{} `pulumi:"annotations"`
	Content          *string                `pulumi:"content"`
	Digest           map[string]string      `pulumi:"digest"`
	DownloadLocation *string                `pulumi:"downloadLocation"`
	MediaType        *string                `pulumi:"mediaType"`
	Name             *string                `pulumi:"name"`
	Uri              *string                `pulumi:"uri"`
}

// ResourceDescriptorInput is an input type that accepts ResourceDescriptorArgs and ResourceDescriptorOutput values.
// You can construct a concrete instance of `ResourceDescriptorInput` via:
//
//	ResourceDescriptorArgs{...}
type ResourceDescriptorInput interface {
	pulumi.Input

	ToResourceDescriptorOutput() ResourceDescriptorOutput
	ToResourceDescriptorOutputWithContext(context.Context) ResourceDescriptorOutput
}

type ResourceDescriptorArgs struct {
	Annotations      pulumi.MapInput       `pulumi:"annotations"`
	Content          pulumi.StringPtrInput `pulumi:"content"`
	Digest           pulumi.StringMapInput `pulumi:"digest"`
	DownloadLocation pulumi.StringPtrInput `pulumi:"downloadLocation"`
	MediaType        pulumi.StringPtrInput `pulumi:"mediaType"`
	Name             pulumi.StringPtrInput `pulumi:"name"`
	Uri              pulumi.StringPtrInput `pulumi:"uri"`
}

func (ResourceDescriptorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceDescriptor)(nil)).Elem()
}

func (i ResourceDescriptorArgs) ToResourceDescriptorOutput() ResourceDescriptorOutput {
	return i.ToResourceDescriptorOutputWithContext(context.Background())
}

func (i ResourceDescriptorArgs) ToResourceDescriptorOutputWithContext(ctx context.Context) ResourceDescriptorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceDescriptorOutput)
}

// ResourceDescriptorArrayInput is an input type that accepts ResourceDescriptorArray and ResourceDescriptorArrayOutput values.
// You can construct a concrete instance of `ResourceDescriptorArrayInput` via:
//
//	ResourceDescriptorArray{ ResourceDescriptorArgs{...} }
type ResourceDescriptorArrayInput interface {
	pulumi.Input

	ToResourceDescriptorArrayOutput() ResourceDescriptorArrayOutput
	ToResourceDescriptorArrayOutputWithContext(context.Context) ResourceDescriptorArrayOutput
}

type ResourceDescriptorArray []ResourceDescriptorInput

func (ResourceDescriptorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceDescriptor)(nil)).Elem()
}

func (i ResourceDescriptorArray) ToResourceDescriptorArrayOutput() ResourceDescriptorArrayOutput {
	return i.ToResourceDescriptorArrayOutputWithContext(context.Background())
}

func (i ResourceDescriptorArray) ToResourceDescriptorArrayOutputWithContext(ctx context.Context) ResourceDescriptorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceDescriptorArrayOutput)
}

type ResourceDescriptorOutput struct{ *pulumi.OutputState }

func (ResourceDescriptorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceDescriptor)(nil)).Elem()
}

func (o ResourceDescriptorOutput) ToResourceDescriptorOutput() ResourceDescriptorOutput {
	return o
}

func (o ResourceDescriptorOutput) ToResourceDescriptorOutputWithContext(ctx context.Context) ResourceDescriptorOutput {
	return o
}

func (o ResourceDescriptorOutput) Annotations() pulumi.MapOutput {
	return o.ApplyT(func(v ResourceDescriptor) map[string]interface{} { return v.Annotations }).(pulumi.MapOutput)
}

func (o ResourceDescriptorOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDescriptor) *string { return v.Content }).(pulumi.StringPtrOutput)
}

func (o ResourceDescriptorOutput) Digest() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceDescriptor) map[string]string { return v.Digest }).(pulumi.StringMapOutput)
}

func (o ResourceDescriptorOutput) DownloadLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDescriptor) *string { return v.DownloadLocation }).(pulumi.StringPtrOutput)
}

func (o ResourceDescriptorOutput) MediaType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDescriptor) *string { return v.MediaType }).(pulumi.StringPtrOutput)
}

func (o ResourceDescriptorOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDescriptor) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o ResourceDescriptorOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDescriptor) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type ResourceDescriptorArrayOutput struct{ *pulumi.OutputState }

func (ResourceDescriptorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceDescriptor)(nil)).Elem()
}

func (o ResourceDescriptorArrayOutput) ToResourceDescriptorArrayOutput() ResourceDescriptorArrayOutput {
	return o
}

func (o ResourceDescriptorArrayOutput) ToResourceDescriptorArrayOutputWithContext(ctx context.Context) ResourceDescriptorArrayOutput {
	return o
}

func (o ResourceDescriptorArrayOutput) Index(i pulumi.IntInput) ResourceDescriptorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceDescriptor {
		return vs[0].([]ResourceDescriptor)[vs[1].(int)]
	}).(ResourceDescriptorOutput)
}

type ResourceDescriptorResponse struct {
	Annotations      map[string]interface{} `pulumi:"annotations"`
	Content          string                 `pulumi:"content"`
	Digest           map[string]string      `pulumi:"digest"`
	DownloadLocation string                 `pulumi:"downloadLocation"`
	MediaType        string                 `pulumi:"mediaType"`
	Name             string                 `pulumi:"name"`
	Uri              string                 `pulumi:"uri"`
}

type ResourceDescriptorResponseOutput struct{ *pulumi.OutputState }

func (ResourceDescriptorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceDescriptorResponse)(nil)).Elem()
}

func (o ResourceDescriptorResponseOutput) ToResourceDescriptorResponseOutput() ResourceDescriptorResponseOutput {
	return o
}

func (o ResourceDescriptorResponseOutput) ToResourceDescriptorResponseOutputWithContext(ctx context.Context) ResourceDescriptorResponseOutput {
	return o
}

func (o ResourceDescriptorResponseOutput) Annotations() pulumi.MapOutput {
	return o.ApplyT(func(v ResourceDescriptorResponse) map[string]interface{} { return v.Annotations }).(pulumi.MapOutput)
}

func (o ResourceDescriptorResponseOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceDescriptorResponse) string { return v.Content }).(pulumi.StringOutput)
}

func (o ResourceDescriptorResponseOutput) Digest() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceDescriptorResponse) map[string]string { return v.Digest }).(pulumi.StringMapOutput)
}

func (o ResourceDescriptorResponseOutput) DownloadLocation() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceDescriptorResponse) string { return v.DownloadLocation }).(pulumi.StringOutput)
}

func (o ResourceDescriptorResponseOutput) MediaType() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceDescriptorResponse) string { return v.MediaType }).(pulumi.StringOutput)
}

func (o ResourceDescriptorResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceDescriptorResponse) string { return v.Name }).(pulumi.StringOutput)
}

func (o ResourceDescriptorResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceDescriptorResponse) string { return v.Uri }).(pulumi.StringOutput)
}

type ResourceDescriptorResponseArrayOutput struct{ *pulumi.OutputState }

func (ResourceDescriptorResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceDescriptorResponse)(nil)).Elem()
}

func (o ResourceDescriptorResponseArrayOutput) ToResourceDescriptorResponseArrayOutput() ResourceDescriptorResponseArrayOutput {
	return o
}

func (o ResourceDescriptorResponseArrayOutput) ToResourceDescriptorResponseArrayOutputWithContext(ctx context.Context) ResourceDescriptorResponseArrayOutput {
	return o
}

func (o ResourceDescriptorResponseArrayOutput) Index(i pulumi.IntInput) ResourceDescriptorResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceDescriptorResponse {
		return vs[0].([]ResourceDescriptorResponse)[vs[1].(int)]
	}).(ResourceDescriptorResponseOutput)
}

type RunDetails struct {
	Builder    *ProvenanceBuilder   `pulumi:"builder"`
	Byproducts []ResourceDescriptor `pulumi:"byproducts"`
	Metadata   *BuildMetadata       `pulumi:"metadata"`
}

// RunDetailsInput is an input type that accepts RunDetailsArgs and RunDetailsOutput values.
// You can construct a concrete instance of `RunDetailsInput` via:
//
//	RunDetailsArgs{...}
type RunDetailsInput interface {
	pulumi.Input

	ToRunDetailsOutput() RunDetailsOutput
	ToRunDetailsOutputWithContext(context.Context) RunDetailsOutput
}

type RunDetailsArgs struct {
	Builder    ProvenanceBuilderPtrInput    `pulumi:"builder"`
	Byproducts ResourceDescriptorArrayInput `pulumi:"byproducts"`
	Metadata   BuildMetadataPtrInput        `pulumi:"metadata"`
}

func (RunDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RunDetails)(nil)).Elem()
}

func (i RunDetailsArgs) ToRunDetailsOutput() RunDetailsOutput {
	return i.ToRunDetailsOutputWithContext(context.Background())
}

func (i RunDetailsArgs) ToRunDetailsOutputWithContext(ctx context.Context) RunDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RunDetailsOutput)
}

func (i RunDetailsArgs) ToRunDetailsPtrOutput() RunDetailsPtrOutput {
	return i.ToRunDetailsPtrOutputWithContext(context.Background())
}

func (i RunDetailsArgs) ToRunDetailsPtrOutputWithContext(ctx context.Context) RunDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RunDetailsOutput).ToRunDetailsPtrOutputWithContext(ctx)
}

// RunDetailsPtrInput is an input type that accepts RunDetailsArgs, RunDetailsPtr and RunDetailsPtrOutput values.
// You can construct a concrete instance of `RunDetailsPtrInput` via:
//
//	        RunDetailsArgs{...}
//
//	or:
//
//	        nil
type RunDetailsPtrInput interface {
	pulumi.Input

	ToRunDetailsPtrOutput() RunDetailsPtrOutput
	ToRunDetailsPtrOutputWithContext(context.Context) RunDetailsPtrOutput
}

type runDetailsPtrType RunDetailsArgs

func RunDetailsPtr(v *RunDetailsArgs) RunDetailsPtrInput {
	return (*runDetailsPtrType)(v)
}

func (*runDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RunDetails)(nil)).Elem()
}

func (i *runDetailsPtrType) ToRunDetailsPtrOutput() RunDetailsPtrOutput {
	return i.ToRunDetailsPtrOutputWithContext(context.Background())
}

func (i *runDetailsPtrType) ToRunDetailsPtrOutputWithContext(ctx context.Context) RunDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RunDetailsPtrOutput)
}

type RunDetailsOutput struct{ *pulumi.OutputState }

func (RunDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RunDetails)(nil)).Elem()
}

func (o RunDetailsOutput) ToRunDetailsOutput() RunDetailsOutput {
	return o
}

func (o RunDetailsOutput) ToRunDetailsOutputWithContext(ctx context.Context) RunDetailsOutput {
	return o
}

func (o RunDetailsOutput) ToRunDetailsPtrOutput() RunDetailsPtrOutput {
	return o.ToRunDetailsPtrOutputWithContext(context.Background())
}

func (o RunDetailsOutput) ToRunDetailsPtrOutputWithContext(ctx context.Context) RunDetailsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RunDetails) *RunDetails {
		return &v
	}).(RunDetailsPtrOutput)
}

func (o RunDetailsOutput) Builder() ProvenanceBuilderPtrOutput {
	return o.ApplyT(func(v RunDetails) *ProvenanceBuilder { return v.Builder }).(ProvenanceBuilderPtrOutput)
}

func (o RunDetailsOutput) Byproducts() ResourceDescriptorArrayOutput {
	return o.ApplyT(func(v RunDetails) []ResourceDescriptor { return v.Byproducts }).(ResourceDescriptorArrayOutput)
}

func (o RunDetailsOutput) Metadata() BuildMetadataPtrOutput {
	return o.ApplyT(func(v RunDetails) *BuildMetadata { return v.Metadata }).(BuildMetadataPtrOutput)
}

type RunDetailsPtrOutput struct{ *pulumi.OutputState }

func (RunDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RunDetails)(nil)).Elem()
}

func (o RunDetailsPtrOutput) ToRunDetailsPtrOutput() RunDetailsPtrOutput {
	return o
}

func (o RunDetailsPtrOutput) ToRunDetailsPtrOutputWithContext(ctx context.Context) RunDetailsPtrOutput {
	return o
}

func (o RunDetailsPtrOutput) Elem() RunDetailsOutput {
	return o.ApplyT(func(v *RunDetails) RunDetails {
		if v != nil {
			return *v
		}
		var ret RunDetails
		return ret
	}).(RunDetailsOutput)
}

func (o RunDetailsPtrOutput) Builder() ProvenanceBuilderPtrOutput {
	return o.ApplyT(func(v *RunDetails) *ProvenanceBuilder {
		if v == nil {
			return nil
		}
		return v.Builder
	}).(ProvenanceBuilderPtrOutput)
}

func (o RunDetailsPtrOutput) Byproducts() ResourceDescriptorArrayOutput {
	return o.ApplyT(func(v *RunDetails) []ResourceDescriptor {
		if v == nil {
			return nil
		}
		return v.Byproducts
	}).(ResourceDescriptorArrayOutput)
}

func (o RunDetailsPtrOutput) Metadata() BuildMetadataPtrOutput {
	return o.ApplyT(func(v *RunDetails) *BuildMetadata {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(BuildMetadataPtrOutput)
}

type RunDetailsResponse struct {
	Builder    ProvenanceBuilderResponse    `pulumi:"builder"`
	Byproducts []ResourceDescriptorResponse `pulumi:"byproducts"`
	Metadata   BuildMetadataResponse        `pulumi:"metadata"`
}

type RunDetailsResponseOutput struct{ *pulumi.OutputState }

func (RunDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RunDetailsResponse)(nil)).Elem()
}

func (o RunDetailsResponseOutput) ToRunDetailsResponseOutput() RunDetailsResponseOutput {
	return o
}

func (o RunDetailsResponseOutput) ToRunDetailsResponseOutputWithContext(ctx context.Context) RunDetailsResponseOutput {
	return o
}

func (o RunDetailsResponseOutput) Builder() ProvenanceBuilderResponseOutput {
	return o.ApplyT(func(v RunDetailsResponse) ProvenanceBuilderResponse { return v.Builder }).(ProvenanceBuilderResponseOutput)
}

func (o RunDetailsResponseOutput) Byproducts() ResourceDescriptorResponseArrayOutput {
	return o.ApplyT(func(v RunDetailsResponse) []ResourceDescriptorResponse { return v.Byproducts }).(ResourceDescriptorResponseArrayOutput)
}

func (o RunDetailsResponseOutput) Metadata() BuildMetadataResponseOutput {
	return o.ApplyT(func(v RunDetailsResponse) BuildMetadataResponse { return v.Metadata }).(BuildMetadataResponseOutput)
}

// The note representing an SBOM reference.
type SBOMReferenceNote struct {
	// The format that SBOM takes. E.g. may be spdx, cyclonedx, etc...
	Format *string `pulumi:"format"`
	// The version of the format that the SBOM takes. E.g. if the format is spdx, the version may be 2.3.
	Version *string `pulumi:"version"`
}

// SBOMReferenceNoteInput is an input type that accepts SBOMReferenceNoteArgs and SBOMReferenceNoteOutput values.
// You can construct a concrete instance of `SBOMReferenceNoteInput` via:
//
//	SBOMReferenceNoteArgs{...}
type SBOMReferenceNoteInput interface {
	pulumi.Input

	ToSBOMReferenceNoteOutput() SBOMReferenceNoteOutput
	ToSBOMReferenceNoteOutputWithContext(context.Context) SBOMReferenceNoteOutput
}

// The note representing an SBOM reference.
type SBOMReferenceNoteArgs struct {
	// The format that SBOM takes. E.g. may be spdx, cyclonedx, etc...
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the format that the SBOM takes. E.g. if the format is spdx, the version may be 2.3.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (SBOMReferenceNoteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SBOMReferenceNote)(nil)).Elem()
}

func (i SBOMReferenceNoteArgs) ToSBOMReferenceNoteOutput() SBOMReferenceNoteOutput {
	return i.ToSBOMReferenceNoteOutputWithContext(context.Background())
}

func (i SBOMReferenceNoteArgs) ToSBOMReferenceNoteOutputWithContext(ctx context.Context) SBOMReferenceNoteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SBOMReferenceNoteOutput)
}

func (i SBOMReferenceNoteArgs) ToSBOMReferenceNotePtrOutput() SBOMReferenceNotePtrOutput {
	return i.ToSBOMReferenceNotePtrOutputWithContext(context.Background())
}

func (i SBOMReferenceNoteArgs) ToSBOMReferenceNotePtrOutputWithContext(ctx context.Context) SBOMReferenceNotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SBOMReferenceNoteOutput).ToSBOMReferenceNotePtrOutputWithContext(ctx)
}

// SBOMReferenceNotePtrInput is an input type that accepts SBOMReferenceNoteArgs, SBOMReferenceNotePtr and SBOMReferenceNotePtrOutput values.
// You can construct a concrete instance of `SBOMReferenceNotePtrInput` via:
//
//	        SBOMReferenceNoteArgs{...}
//
//	or:
//
//	        nil
type SBOMReferenceNotePtrInput interface {
	pulumi.Input

	ToSBOMReferenceNotePtrOutput() SBOMReferenceNotePtrOutput
	ToSBOMReferenceNotePtrOutputWithContext(context.Context) SBOMReferenceNotePtrOutput
}

type sbomreferenceNotePtrType SBOMReferenceNoteArgs

func SBOMReferenceNotePtr(v *SBOMReferenceNoteArgs) SBOMReferenceNotePtrInput {
	return (*sbomreferenceNotePtrType)(v)
}

func (*sbomreferenceNotePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SBOMReferenceNote)(nil)).Elem()
}

func (i *sbomreferenceNotePtrType) ToSBOMReferenceNotePtrOutput() SBOMReferenceNotePtrOutput {
	return i.ToSBOMReferenceNotePtrOutputWithContext(context.Background())
}

func (i *sbomreferenceNotePtrType) ToSBOMReferenceNotePtrOutputWithContext(ctx context.Context) SBOMReferenceNotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SBOMReferenceNotePtrOutput)
}

// The note representing an SBOM reference.
type SBOMReferenceNoteOutput struct{ *pulumi.OutputState }

func (SBOMReferenceNoteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SBOMReferenceNote)(nil)).Elem()
}

func (o SBOMReferenceNoteOutput) ToSBOMReferenceNoteOutput() SBOMReferenceNoteOutput {
	return o
}

func (o SBOMReferenceNoteOutput) ToSBOMReferenceNoteOutputWithContext(ctx context.Context) SBOMReferenceNoteOutput {
	return o
}

func (o SBOMReferenceNoteOutput) ToSBOMReferenceNotePtrOutput() SBOMReferenceNotePtrOutput {
	return o.ToSBOMReferenceNotePtrOutputWithContext(context.Background())
}

func (o SBOMReferenceNoteOutput) ToSBOMReferenceNotePtrOutputWithContext(ctx context.Context) SBOMReferenceNotePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SBOMReferenceNote) *SBOMReferenceNote {
		return &v
	}).(SBOMReferenceNotePtrOutput)
}

// The format that SBOM takes. E.g. may be spdx, cyclonedx, etc...
func (o SBOMReferenceNoteOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SBOMReferenceNote) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the format that the SBOM takes. E.g. if the format is spdx, the version may be 2.3.
func (o SBOMReferenceNoteOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SBOMReferenceNote) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type SBOMReferenceNotePtrOutput struct{ *pulumi.OutputState }

func (SBOMReferenceNotePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SBOMReferenceNote)(nil)).Elem()
}

func (o SBOMReferenceNotePtrOutput) ToSBOMReferenceNotePtrOutput() SBOMReferenceNotePtrOutput {
	return o
}

func (o SBOMReferenceNotePtrOutput) ToSBOMReferenceNotePtrOutputWithContext(ctx context.Context) SBOMReferenceNotePtrOutput {
	return o
}

func (o SBOMReferenceNotePtrOutput) Elem() SBOMReferenceNoteOutput {
	return o.ApplyT(func(v *SBOMReferenceNote) SBOMReferenceNote {
		if v != nil {
			return *v
		}
		var ret SBOMReferenceNote
		return ret
	}).(SBOMReferenceNoteOutput)
}

// The format that SBOM takes. E.g. may be spdx, cyclonedx, etc...
func (o SBOMReferenceNotePtrOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBOMReferenceNote) *string {
		if v == nil {
			return nil
		}
		return v.Format
	}).(pulumi.StringPtrOutput)
}

// The version of the format that the SBOM takes. E.g. if the format is spdx, the version may be 2.3.
func (o SBOMReferenceNotePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBOMReferenceNote) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// The note representing an SBOM reference.
type SBOMReferenceNoteResponse struct {
	// The format that SBOM takes. E.g. may be spdx, cyclonedx, etc...
	Format string `pulumi:"format"`
	// The version of the format that the SBOM takes. E.g. if the format is spdx, the version may be 2.3.
	Version string `pulumi:"version"`
}

// The note representing an SBOM reference.
type SBOMReferenceNoteResponseOutput struct{ *pulumi.OutputState }

func (SBOMReferenceNoteResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SBOMReferenceNoteResponse)(nil)).Elem()
}

func (o SBOMReferenceNoteResponseOutput) ToSBOMReferenceNoteResponseOutput() SBOMReferenceNoteResponseOutput {
	return o
}

func (o SBOMReferenceNoteResponseOutput) ToSBOMReferenceNoteResponseOutputWithContext(ctx context.Context) SBOMReferenceNoteResponseOutput {
	return o
}

// The format that SBOM takes. E.g. may be spdx, cyclonedx, etc...
func (o SBOMReferenceNoteResponseOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v SBOMReferenceNoteResponse) string { return v.Format }).(pulumi.StringOutput)
}

// The version of the format that the SBOM takes. E.g. if the format is spdx, the version may be 2.3.
func (o SBOMReferenceNoteResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v SBOMReferenceNoteResponse) string { return v.Version }).(pulumi.StringOutput)
}

// The occurrence representing an SBOM reference as applied to a specific resource. The occurrence follows the DSSE specification. See https://github.com/secure-systems-lab/dsse/blob/master/envelope.md for more details.
type SBOMReferenceOccurrence struct {
	// The actual payload that contains the SBOM reference data.
	Payload *SbomReferenceIntotoPayload `pulumi:"payload"`
	// The kind of payload that SbomReferenceIntotoPayload takes. Since it's in the intoto format, this value is expected to be 'application/vnd.in-toto+json'.
	PayloadType *string `pulumi:"payloadType"`
	// The signatures over the payload.
	Signatures []EnvelopeSignature `pulumi:"signatures"`
}

// SBOMReferenceOccurrenceInput is an input type that accepts SBOMReferenceOccurrenceArgs and SBOMReferenceOccurrenceOutput values.
// You can construct a concrete instance of `SBOMReferenceOccurrenceInput` via:
//
//	SBOMReferenceOccurrenceArgs{...}
type SBOMReferenceOccurrenceInput interface {
	pulumi.Input

	ToSBOMReferenceOccurrenceOutput() SBOMReferenceOccurrenceOutput
	ToSBOMReferenceOccurrenceOutputWithContext(context.Context) SBOMReferenceOccurrenceOutput
}

// The occurrence representing an SBOM reference as applied to a specific resource. The occurrence follows the DSSE specification. See https://github.com/secure-systems-lab/dsse/blob/master/envelope.md for more details.
type SBOMReferenceOccurrenceArgs struct {
	// The actual payload that contains the SBOM reference data.
	Payload SbomReferenceIntotoPayloadPtrInput `pulumi:"payload"`
	// The kind of payload that SbomReferenceIntotoPayload takes. Since it's in the intoto format, this value is expected to be 'application/vnd.in-toto+json'.
	PayloadType pulumi.StringPtrInput `pulumi:"payloadType"`
	// The signatures over the payload.
	Signatures EnvelopeSignatureArrayInput `pulumi:"signatures"`
}

func (SBOMReferenceOccurrenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SBOMReferenceOccurrence)(nil)).Elem()
}

func (i SBOMReferenceOccurrenceArgs) ToSBOMReferenceOccurrenceOutput() SBOMReferenceOccurrenceOutput {
	return i.ToSBOMReferenceOccurrenceOutputWithContext(context.Background())
}

func (i SBOMReferenceOccurrenceArgs) ToSBOMReferenceOccurrenceOutputWithContext(ctx context.Context) SBOMReferenceOccurrenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SBOMReferenceOccurrenceOutput)
}

func (i SBOMReferenceOccurrenceArgs) ToSBOMReferenceOccurrencePtrOutput() SBOMReferenceOccurrencePtrOutput {
	return i.ToSBOMReferenceOccurrencePtrOutputWithContext(context.Background())
}

func (i SBOMReferenceOccurrenceArgs) ToSBOMReferenceOccurrencePtrOutputWithContext(ctx context.Context) SBOMReferenceOccurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SBOMReferenceOccurrenceOutput).ToSBOMReferenceOccurrencePtrOutputWithContext(ctx)
}

// SBOMReferenceOccurrencePtrInput is an input type that accepts SBOMReferenceOccurrenceArgs, SBOMReferenceOccurrencePtr and SBOMReferenceOccurrencePtrOutput values.
// You can construct a concrete instance of `SBOMReferenceOccurrencePtrInput` via:
//
//	        SBOMReferenceOccurrenceArgs{...}
//
//	or:
//
//	        nil
type SBOMReferenceOccurrencePtrInput interface {
	pulumi.Input

	ToSBOMReferenceOccurrencePtrOutput() SBOMReferenceOccurrencePtrOutput
	ToSBOMReferenceOccurrencePtrOutputWithContext(context.Context) SBOMReferenceOccurrencePtrOutput
}

type sbomreferenceOccurrencePtrType SBOMReferenceOccurrenceArgs

func SBOMReferenceOccurrencePtr(v *SBOMReferenceOccurrenceArgs) SBOMReferenceOccurrencePtrInput {
	return (*sbomreferenceOccurrencePtrType)(v)
}

func (*sbomreferenceOccurrencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SBOMReferenceOccurrence)(nil)).Elem()
}

func (i *sbomreferenceOccurrencePtrType) ToSBOMReferenceOccurrencePtrOutput() SBOMReferenceOccurrencePtrOutput {
	return i.ToSBOMReferenceOccurrencePtrOutputWithContext(context.Background())
}

func (i *sbomreferenceOccurrencePtrType) ToSBOMReferenceOccurrencePtrOutputWithContext(ctx context.Context) SBOMReferenceOccurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SBOMReferenceOccurrencePtrOutput)
}

// The occurrence representing an SBOM reference as applied to a specific resource. The occurrence follows the DSSE specification. See https://github.com/secure-systems-lab/dsse/blob/master/envelope.md for more details.
type SBOMReferenceOccurrenceOutput struct{ *pulumi.OutputState }

func (SBOMReferenceOccurrenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SBOMReferenceOccurrence)(nil)).Elem()
}

func (o SBOMReferenceOccurrenceOutput) ToSBOMReferenceOccurrenceOutput() SBOMReferenceOccurrenceOutput {
	return o
}

func (o SBOMReferenceOccurrenceOutput) ToSBOMReferenceOccurrenceOutputWithContext(ctx context.Context) SBOMReferenceOccurrenceOutput {
	return o
}

func (o SBOMReferenceOccurrenceOutput) ToSBOMReferenceOccurrencePtrOutput() SBOMReferenceOccurrencePtrOutput {
	return o.ToSBOMReferenceOccurrencePtrOutputWithContext(context.Background())
}

func (o SBOMReferenceOccurrenceOutput) ToSBOMReferenceOccurrencePtrOutputWithContext(ctx context.Context) SBOMReferenceOccurrencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SBOMReferenceOccurrence) *SBOMReferenceOccurrence {
		return &v
	}).(SBOMReferenceOccurrencePtrOutput)
}

// The actual payload that contains the SBOM reference data.
func (o SBOMReferenceOccurrenceOutput) Payload() SbomReferenceIntotoPayloadPtrOutput {
	return o.ApplyT(func(v SBOMReferenceOccurrence) *SbomReferenceIntotoPayload { return v.Payload }).(SbomReferenceIntotoPayloadPtrOutput)
}

// The kind of payload that SbomReferenceIntotoPayload takes. Since it's in the intoto format, this value is expected to be 'application/vnd.in-toto+json'.
func (o SBOMReferenceOccurrenceOutput) PayloadType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SBOMReferenceOccurrence) *string { return v.PayloadType }).(pulumi.StringPtrOutput)
}

// The signatures over the payload.
func (o SBOMReferenceOccurrenceOutput) Signatures() EnvelopeSignatureArrayOutput {
	return o.ApplyT(func(v SBOMReferenceOccurrence) []EnvelopeSignature { return v.Signatures }).(EnvelopeSignatureArrayOutput)
}

type SBOMReferenceOccurrencePtrOutput struct{ *pulumi.OutputState }

func (SBOMReferenceOccurrencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SBOMReferenceOccurrence)(nil)).Elem()
}

func (o SBOMReferenceOccurrencePtrOutput) ToSBOMReferenceOccurrencePtrOutput() SBOMReferenceOccurrencePtrOutput {
	return o
}

func (o SBOMReferenceOccurrencePtrOutput) ToSBOMReferenceOccurrencePtrOutputWithContext(ctx context.Context) SBOMReferenceOccurrencePtrOutput {
	return o
}

func (o SBOMReferenceOccurrencePtrOutput) Elem() SBOMReferenceOccurrenceOutput {
	return o.ApplyT(func(v *SBOMReferenceOccurrence) SBOMReferenceOccurrence {
		if v != nil {
			return *v
		}
		var ret SBOMReferenceOccurrence
		return ret
	}).(SBOMReferenceOccurrenceOutput)
}

// The actual payload that contains the SBOM reference data.
func (o SBOMReferenceOccurrencePtrOutput) Payload() SbomReferenceIntotoPayloadPtrOutput {
	return o.ApplyT(func(v *SBOMReferenceOccurrence) *SbomReferenceIntotoPayload {
		if v == nil {
			return nil
		}
		return v.Payload
	}).(SbomReferenceIntotoPayloadPtrOutput)
}

// The kind of payload that SbomReferenceIntotoPayload takes. Since it's in the intoto format, this value is expected to be 'application/vnd.in-toto+json'.
func (o SBOMReferenceOccurrencePtrOutput) PayloadType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBOMReferenceOccurrence) *string {
		if v == nil {
			return nil
		}
		return v.PayloadType
	}).(pulumi.StringPtrOutput)
}

// The signatures over the payload.
func (o SBOMReferenceOccurrencePtrOutput) Signatures() EnvelopeSignatureArrayOutput {
	return o.ApplyT(func(v *SBOMReferenceOccurrence) []EnvelopeSignature {
		if v == nil {
			return nil
		}
		return v.Signatures
	}).(EnvelopeSignatureArrayOutput)
}

// The occurrence representing an SBOM reference as applied to a specific resource. The occurrence follows the DSSE specification. See https://github.com/secure-systems-lab/dsse/blob/master/envelope.md for more details.
type SBOMReferenceOccurrenceResponse struct {
	// The actual payload that contains the SBOM reference data.
	Payload SbomReferenceIntotoPayloadResponse `pulumi:"payload"`
	// The kind of payload that SbomReferenceIntotoPayload takes. Since it's in the intoto format, this value is expected to be 'application/vnd.in-toto+json'.
	PayloadType string `pulumi:"payloadType"`
	// The signatures over the payload.
	Signatures []EnvelopeSignatureResponse `pulumi:"signatures"`
}

// The occurrence representing an SBOM reference as applied to a specific resource. The occurrence follows the DSSE specification. See https://github.com/secure-systems-lab/dsse/blob/master/envelope.md for more details.
type SBOMReferenceOccurrenceResponseOutput struct{ *pulumi.OutputState }

func (SBOMReferenceOccurrenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SBOMReferenceOccurrenceResponse)(nil)).Elem()
}

func (o SBOMReferenceOccurrenceResponseOutput) ToSBOMReferenceOccurrenceResponseOutput() SBOMReferenceOccurrenceResponseOutput {
	return o
}

func (o SBOMReferenceOccurrenceResponseOutput) ToSBOMReferenceOccurrenceResponseOutputWithContext(ctx context.Context) SBOMReferenceOccurrenceResponseOutput {
	return o
}

// The actual payload that contains the SBOM reference data.
func (o SBOMReferenceOccurrenceResponseOutput) Payload() SbomReferenceIntotoPayloadResponseOutput {
	return o.ApplyT(func(v SBOMReferenceOccurrenceResponse) SbomReferenceIntotoPayloadResponse { return v.Payload }).(SbomReferenceIntotoPayloadResponseOutput)
}

// The kind of payload that SbomReferenceIntotoPayload takes. Since it's in the intoto format, this value is expected to be 'application/vnd.in-toto+json'.
func (o SBOMReferenceOccurrenceResponseOutput) PayloadType() pulumi.StringOutput {
	return o.ApplyT(func(v SBOMReferenceOccurrenceResponse) string { return v.PayloadType }).(pulumi.StringOutput)
}

// The signatures over the payload.
func (o SBOMReferenceOccurrenceResponseOutput) Signatures() EnvelopeSignatureResponseArrayOutput {
	return o.ApplyT(func(v SBOMReferenceOccurrenceResponse) []EnvelopeSignatureResponse { return v.Signatures }).(EnvelopeSignatureResponseArrayOutput)
}

// The status of an SBOM generation.
type SBOMStatus struct {
	// If there was an error generating an SBOM, this will indicate what that error was.
	Error *string `pulumi:"error"`
	// The progress of the SBOM generation.
	SbomState *SBOMStatusSbomState `pulumi:"sbomState"`
}

// SBOMStatusInput is an input type that accepts SBOMStatusArgs and SBOMStatusOutput values.
// You can construct a concrete instance of `SBOMStatusInput` via:
//
//	SBOMStatusArgs{...}
type SBOMStatusInput interface {
	pulumi.Input

	ToSBOMStatusOutput() SBOMStatusOutput
	ToSBOMStatusOutputWithContext(context.Context) SBOMStatusOutput
}

// The status of an SBOM generation.
type SBOMStatusArgs struct {
	// If there was an error generating an SBOM, this will indicate what that error was.
	Error pulumi.StringPtrInput `pulumi:"error"`
	// The progress of the SBOM generation.
	SbomState SBOMStatusSbomStatePtrInput `pulumi:"sbomState"`
}

func (SBOMStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SBOMStatus)(nil)).Elem()
}

func (i SBOMStatusArgs) ToSBOMStatusOutput() SBOMStatusOutput {
	return i.ToSBOMStatusOutputWithContext(context.Background())
}

func (i SBOMStatusArgs) ToSBOMStatusOutputWithContext(ctx context.Context) SBOMStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SBOMStatusOutput)
}

func (i SBOMStatusArgs) ToSBOMStatusPtrOutput() SBOMStatusPtrOutput {
	return i.ToSBOMStatusPtrOutputWithContext(context.Background())
}

func (i SBOMStatusArgs) ToSBOMStatusPtrOutputWithContext(ctx context.Context) SBOMStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SBOMStatusOutput).ToSBOMStatusPtrOutputWithContext(ctx)
}

// SBOMStatusPtrInput is an input type that accepts SBOMStatusArgs, SBOMStatusPtr and SBOMStatusPtrOutput values.
// You can construct a concrete instance of `SBOMStatusPtrInput` via:
//
//	        SBOMStatusArgs{...}
//
//	or:
//
//	        nil
type SBOMStatusPtrInput interface {
	pulumi.Input

	ToSBOMStatusPtrOutput() SBOMStatusPtrOutput
	ToSBOMStatusPtrOutputWithContext(context.Context) SBOMStatusPtrOutput
}

type sbomstatusPtrType SBOMStatusArgs

func SBOMStatusPtr(v *SBOMStatusArgs) SBOMStatusPtrInput {
	return (*sbomstatusPtrType)(v)
}

func (*sbomstatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SBOMStatus)(nil)).Elem()
}

func (i *sbomstatusPtrType) ToSBOMStatusPtrOutput() SBOMStatusPtrOutput {
	return i.ToSBOMStatusPtrOutputWithContext(context.Background())
}

func (i *sbomstatusPtrType) ToSBOMStatusPtrOutputWithContext(ctx context.Context) SBOMStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SBOMStatusPtrOutput)
}

// The status of an SBOM generation.
type SBOMStatusOutput struct{ *pulumi.OutputState }

func (SBOMStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SBOMStatus)(nil)).Elem()
}

func (o SBOMStatusOutput) ToSBOMStatusOutput() SBOMStatusOutput {
	return o
}

func (o SBOMStatusOutput) ToSBOMStatusOutputWithContext(ctx context.Context) SBOMStatusOutput {
	return o
}

func (o SBOMStatusOutput) ToSBOMStatusPtrOutput() SBOMStatusPtrOutput {
	return o.ToSBOMStatusPtrOutputWithContext(context.Background())
}

func (o SBOMStatusOutput) ToSBOMStatusPtrOutputWithContext(ctx context.Context) SBOMStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SBOMStatus) *SBOMStatus {
		return &v
	}).(SBOMStatusPtrOutput)
}

// If there was an error generating an SBOM, this will indicate what that error was.
func (o SBOMStatusOutput) Error() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SBOMStatus) *string { return v.Error }).(pulumi.StringPtrOutput)
}

// The progress of the SBOM generation.
func (o SBOMStatusOutput) SbomState() SBOMStatusSbomStatePtrOutput {
	return o.ApplyT(func(v SBOMStatus) *SBOMStatusSbomState { return v.SbomState }).(SBOMStatusSbomStatePtrOutput)
}

type SBOMStatusPtrOutput struct{ *pulumi.OutputState }

func (SBOMStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SBOMStatus)(nil)).Elem()
}

func (o SBOMStatusPtrOutput) ToSBOMStatusPtrOutput() SBOMStatusPtrOutput {
	return o
}

func (o SBOMStatusPtrOutput) ToSBOMStatusPtrOutputWithContext(ctx context.Context) SBOMStatusPtrOutput {
	return o
}

func (o SBOMStatusPtrOutput) Elem() SBOMStatusOutput {
	return o.ApplyT(func(v *SBOMStatus) SBOMStatus {
		if v != nil {
			return *v
		}
		var ret SBOMStatus
		return ret
	}).(SBOMStatusOutput)
}

// If there was an error generating an SBOM, this will indicate what that error was.
func (o SBOMStatusPtrOutput) Error() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBOMStatus) *string {
		if v == nil {
			return nil
		}
		return v.Error
	}).(pulumi.StringPtrOutput)
}

// The progress of the SBOM generation.
func (o SBOMStatusPtrOutput) SbomState() SBOMStatusSbomStatePtrOutput {
	return o.ApplyT(func(v *SBOMStatus) *SBOMStatusSbomState {
		if v == nil {
			return nil
		}
		return v.SbomState
	}).(SBOMStatusSbomStatePtrOutput)
}

// The status of an SBOM generation.
type SBOMStatusResponse struct {
	// If there was an error generating an SBOM, this will indicate what that error was.
	Error string `pulumi:"error"`
	// The progress of the SBOM generation.
	SbomState string `pulumi:"sbomState"`
}

// The status of an SBOM generation.
type SBOMStatusResponseOutput struct{ *pulumi.OutputState }

func (SBOMStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SBOMStatusResponse)(nil)).Elem()
}

func (o SBOMStatusResponseOutput) ToSBOMStatusResponseOutput() SBOMStatusResponseOutput {
	return o
}

func (o SBOMStatusResponseOutput) ToSBOMStatusResponseOutputWithContext(ctx context.Context) SBOMStatusResponseOutput {
	return o
}

// If there was an error generating an SBOM, this will indicate what that error was.
func (o SBOMStatusResponseOutput) Error() pulumi.StringOutput {
	return o.ApplyT(func(v SBOMStatusResponse) string { return v.Error }).(pulumi.StringOutput)
}

// The progress of the SBOM generation.
func (o SBOMStatusResponseOutput) SbomState() pulumi.StringOutput {
	return o.ApplyT(func(v SBOMStatusResponse) string { return v.SbomState }).(pulumi.StringOutput)
}

// The actual payload that contains the SBOM Reference data. The payload follows the intoto statement specification. See https://github.com/in-toto/attestation/blob/main/spec/v1.0/statement.md for more details.
type SbomReferenceIntotoPayload struct {
	// Additional parameters of the Predicate. Includes the actual data about the SBOM.
	Predicate *SbomReferenceIntotoPredicate `pulumi:"predicate"`
	// URI identifying the type of the Predicate.
	PredicateType *string `pulumi:"predicateType"`
	// Set of software artifacts that the attestation applies to. Each element represents a single software artifact.
	Subject []Subject `pulumi:"subject"`
	// Identifier for the schema of the Statement.
	Type *string `pulumi:"type"`
}

// SbomReferenceIntotoPayloadInput is an input type that accepts SbomReferenceIntotoPayloadArgs and SbomReferenceIntotoPayloadOutput values.
// You can construct a concrete instance of `SbomReferenceIntotoPayloadInput` via:
//
//	SbomReferenceIntotoPayloadArgs{...}
type SbomReferenceIntotoPayloadInput interface {
	pulumi.Input

	ToSbomReferenceIntotoPayloadOutput() SbomReferenceIntotoPayloadOutput
	ToSbomReferenceIntotoPayloadOutputWithContext(context.Context) SbomReferenceIntotoPayloadOutput
}

// The actual payload that contains the SBOM Reference data. The payload follows the intoto statement specification. See https://github.com/in-toto/attestation/blob/main/spec/v1.0/statement.md for more details.
type SbomReferenceIntotoPayloadArgs struct {
	// Additional parameters of the Predicate. Includes the actual data about the SBOM.
	Predicate SbomReferenceIntotoPredicatePtrInput `pulumi:"predicate"`
	// URI identifying the type of the Predicate.
	PredicateType pulumi.StringPtrInput `pulumi:"predicateType"`
	// Set of software artifacts that the attestation applies to. Each element represents a single software artifact.
	Subject SubjectArrayInput `pulumi:"subject"`
	// Identifier for the schema of the Statement.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (SbomReferenceIntotoPayloadArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SbomReferenceIntotoPayload)(nil)).Elem()
}

func (i SbomReferenceIntotoPayloadArgs) ToSbomReferenceIntotoPayloadOutput() SbomReferenceIntotoPayloadOutput {
	return i.ToSbomReferenceIntotoPayloadOutputWithContext(context.Background())
}

func (i SbomReferenceIntotoPayloadArgs) ToSbomReferenceIntotoPayloadOutputWithContext(ctx context.Context) SbomReferenceIntotoPayloadOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SbomReferenceIntotoPayloadOutput)
}

func (i SbomReferenceIntotoPayloadArgs) ToSbomReferenceIntotoPayloadPtrOutput() SbomReferenceIntotoPayloadPtrOutput {
	return i.ToSbomReferenceIntotoPayloadPtrOutputWithContext(context.Background())
}

func (i SbomReferenceIntotoPayloadArgs) ToSbomReferenceIntotoPayloadPtrOutputWithContext(ctx context.Context) SbomReferenceIntotoPayloadPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SbomReferenceIntotoPayloadOutput).ToSbomReferenceIntotoPayloadPtrOutputWithContext(ctx)
}

// SbomReferenceIntotoPayloadPtrInput is an input type that accepts SbomReferenceIntotoPayloadArgs, SbomReferenceIntotoPayloadPtr and SbomReferenceIntotoPayloadPtrOutput values.
// You can construct a concrete instance of `SbomReferenceIntotoPayloadPtrInput` via:
//
//	        SbomReferenceIntotoPayloadArgs{...}
//
//	or:
//
//	        nil
type SbomReferenceIntotoPayloadPtrInput interface {
	pulumi.Input

	ToSbomReferenceIntotoPayloadPtrOutput() SbomReferenceIntotoPayloadPtrOutput
	ToSbomReferenceIntotoPayloadPtrOutputWithContext(context.Context) SbomReferenceIntotoPayloadPtrOutput
}

type sbomReferenceIntotoPayloadPtrType SbomReferenceIntotoPayloadArgs

func SbomReferenceIntotoPayloadPtr(v *SbomReferenceIntotoPayloadArgs) SbomReferenceIntotoPayloadPtrInput {
	return (*sbomReferenceIntotoPayloadPtrType)(v)
}

func (*sbomReferenceIntotoPayloadPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SbomReferenceIntotoPayload)(nil)).Elem()
}

func (i *sbomReferenceIntotoPayloadPtrType) ToSbomReferenceIntotoPayloadPtrOutput() SbomReferenceIntotoPayloadPtrOutput {
	return i.ToSbomReferenceIntotoPayloadPtrOutputWithContext(context.Background())
}

func (i *sbomReferenceIntotoPayloadPtrType) ToSbomReferenceIntotoPayloadPtrOutputWithContext(ctx context.Context) SbomReferenceIntotoPayloadPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SbomReferenceIntotoPayloadPtrOutput)
}

// The actual payload that contains the SBOM Reference data. The payload follows the intoto statement specification. See https://github.com/in-toto/attestation/blob/main/spec/v1.0/statement.md for more details.
type SbomReferenceIntotoPayloadOutput struct{ *pulumi.OutputState }

func (SbomReferenceIntotoPayloadOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SbomReferenceIntotoPayload)(nil)).Elem()
}

func (o SbomReferenceIntotoPayloadOutput) ToSbomReferenceIntotoPayloadOutput() SbomReferenceIntotoPayloadOutput {
	return o
}

func (o SbomReferenceIntotoPayloadOutput) ToSbomReferenceIntotoPayloadOutputWithContext(ctx context.Context) SbomReferenceIntotoPayloadOutput {
	return o
}

func (o SbomReferenceIntotoPayloadOutput) ToSbomReferenceIntotoPayloadPtrOutput() SbomReferenceIntotoPayloadPtrOutput {
	return o.ToSbomReferenceIntotoPayloadPtrOutputWithContext(context.Background())
}

func (o SbomReferenceIntotoPayloadOutput) ToSbomReferenceIntotoPayloadPtrOutputWithContext(ctx context.Context) SbomReferenceIntotoPayloadPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SbomReferenceIntotoPayload) *SbomReferenceIntotoPayload {
		return &v
	}).(SbomReferenceIntotoPayloadPtrOutput)
}

// Additional parameters of the Predicate. Includes the actual data about the SBOM.
func (o SbomReferenceIntotoPayloadOutput) Predicate() SbomReferenceIntotoPredicatePtrOutput {
	return o.ApplyT(func(v SbomReferenceIntotoPayload) *SbomReferenceIntotoPredicate { return v.Predicate }).(SbomReferenceIntotoPredicatePtrOutput)
}

// URI identifying the type of the Predicate.
func (o SbomReferenceIntotoPayloadOutput) PredicateType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SbomReferenceIntotoPayload) *string { return v.PredicateType }).(pulumi.StringPtrOutput)
}

// Set of software artifacts that the attestation applies to. Each element represents a single software artifact.
func (o SbomReferenceIntotoPayloadOutput) Subject() SubjectArrayOutput {
	return o.ApplyT(func(v SbomReferenceIntotoPayload) []Subject { return v.Subject }).(SubjectArrayOutput)
}

// Identifier for the schema of the Statement.
func (o SbomReferenceIntotoPayloadOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SbomReferenceIntotoPayload) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type SbomReferenceIntotoPayloadPtrOutput struct{ *pulumi.OutputState }

func (SbomReferenceIntotoPayloadPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SbomReferenceIntotoPayload)(nil)).Elem()
}

func (o SbomReferenceIntotoPayloadPtrOutput) ToSbomReferenceIntotoPayloadPtrOutput() SbomReferenceIntotoPayloadPtrOutput {
	return o
}

func (o SbomReferenceIntotoPayloadPtrOutput) ToSbomReferenceIntotoPayloadPtrOutputWithContext(ctx context.Context) SbomReferenceIntotoPayloadPtrOutput {
	return o
}

func (o SbomReferenceIntotoPayloadPtrOutput) Elem() SbomReferenceIntotoPayloadOutput {
	return o.ApplyT(func(v *SbomReferenceIntotoPayload) SbomReferenceIntotoPayload {
		if v != nil {
			return *v
		}
		var ret SbomReferenceIntotoPayload
		return ret
	}).(SbomReferenceIntotoPayloadOutput)
}

// Additional parameters of the Predicate. Includes the actual data about the SBOM.
func (o SbomReferenceIntotoPayloadPtrOutput) Predicate() SbomReferenceIntotoPredicatePtrOutput {
	return o.ApplyT(func(v *SbomReferenceIntotoPayload) *SbomReferenceIntotoPredicate {
		if v == nil {
			return nil
		}
		return v.Predicate
	}).(SbomReferenceIntotoPredicatePtrOutput)
}

// URI identifying the type of the Predicate.
func (o SbomReferenceIntotoPayloadPtrOutput) PredicateType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SbomReferenceIntotoPayload) *string {
		if v == nil {
			return nil
		}
		return v.PredicateType
	}).(pulumi.StringPtrOutput)
}

// Set of software artifacts that the attestation applies to. Each element represents a single software artifact.
func (o SbomReferenceIntotoPayloadPtrOutput) Subject() SubjectArrayOutput {
	return o.ApplyT(func(v *SbomReferenceIntotoPayload) []Subject {
		if v == nil {
			return nil
		}
		return v.Subject
	}).(SubjectArrayOutput)
}

// Identifier for the schema of the Statement.
func (o SbomReferenceIntotoPayloadPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SbomReferenceIntotoPayload) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The actual payload that contains the SBOM Reference data. The payload follows the intoto statement specification. See https://github.com/in-toto/attestation/blob/main/spec/v1.0/statement.md for more details.
type SbomReferenceIntotoPayloadResponse struct {
	// Additional parameters of the Predicate. Includes the actual data about the SBOM.
	Predicate SbomReferenceIntotoPredicateResponse `pulumi:"predicate"`
	// URI identifying the type of the Predicate.
	PredicateType string `pulumi:"predicateType"`
	// Set of software artifacts that the attestation applies to. Each element represents a single software artifact.
	Subject []SubjectResponse `pulumi:"subject"`
	// Identifier for the schema of the Statement.
	Type string `pulumi:"type"`
}

// The actual payload that contains the SBOM Reference data. The payload follows the intoto statement specification. See https://github.com/in-toto/attestation/blob/main/spec/v1.0/statement.md for more details.
type SbomReferenceIntotoPayloadResponseOutput struct{ *pulumi.OutputState }

func (SbomReferenceIntotoPayloadResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SbomReferenceIntotoPayloadResponse)(nil)).Elem()
}

func (o SbomReferenceIntotoPayloadResponseOutput) ToSbomReferenceIntotoPayloadResponseOutput() SbomReferenceIntotoPayloadResponseOutput {
	return o
}

func (o SbomReferenceIntotoPayloadResponseOutput) ToSbomReferenceIntotoPayloadResponseOutputWithContext(ctx context.Context) SbomReferenceIntotoPayloadResponseOutput {
	return o
}

// Additional parameters of the Predicate. Includes the actual data about the SBOM.
func (o SbomReferenceIntotoPayloadResponseOutput) Predicate() SbomReferenceIntotoPredicateResponseOutput {
	return o.ApplyT(func(v SbomReferenceIntotoPayloadResponse) SbomReferenceIntotoPredicateResponse { return v.Predicate }).(SbomReferenceIntotoPredicateResponseOutput)
}

// URI identifying the type of the Predicate.
func (o SbomReferenceIntotoPayloadResponseOutput) PredicateType() pulumi.StringOutput {
	return o.ApplyT(func(v SbomReferenceIntotoPayloadResponse) string { return v.PredicateType }).(pulumi.StringOutput)
}

// Set of software artifacts that the attestation applies to. Each element represents a single software artifact.
func (o SbomReferenceIntotoPayloadResponseOutput) Subject() SubjectResponseArrayOutput {
	return o.ApplyT(func(v SbomReferenceIntotoPayloadResponse) []SubjectResponse { return v.Subject }).(SubjectResponseArrayOutput)
}

// Identifier for the schema of the Statement.
func (o SbomReferenceIntotoPayloadResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SbomReferenceIntotoPayloadResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A predicate which describes the SBOM being referenced.
type SbomReferenceIntotoPredicate struct {
	// A map of algorithm to digest of the contents of the SBOM.
	Digest map[string]string `pulumi:"digest"`
	// The location of the SBOM.
	Location *string `pulumi:"location"`
	// The mime type of the SBOM.
	MimeType *string `pulumi:"mimeType"`
	// The person or system referring this predicate to the consumer.
	ReferrerId *string `pulumi:"referrerId"`
}

// SbomReferenceIntotoPredicateInput is an input type that accepts SbomReferenceIntotoPredicateArgs and SbomReferenceIntotoPredicateOutput values.
// You can construct a concrete instance of `SbomReferenceIntotoPredicateInput` via:
//
//	SbomReferenceIntotoPredicateArgs{...}
type SbomReferenceIntotoPredicateInput interface {
	pulumi.Input

	ToSbomReferenceIntotoPredicateOutput() SbomReferenceIntotoPredicateOutput
	ToSbomReferenceIntotoPredicateOutputWithContext(context.Context) SbomReferenceIntotoPredicateOutput
}

// A predicate which describes the SBOM being referenced.
type SbomReferenceIntotoPredicateArgs struct {
	// A map of algorithm to digest of the contents of the SBOM.
	Digest pulumi.StringMapInput `pulumi:"digest"`
	// The location of the SBOM.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// The mime type of the SBOM.
	MimeType pulumi.StringPtrInput `pulumi:"mimeType"`
	// The person or system referring this predicate to the consumer.
	ReferrerId pulumi.StringPtrInput `pulumi:"referrerId"`
}

func (SbomReferenceIntotoPredicateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SbomReferenceIntotoPredicate)(nil)).Elem()
}

func (i SbomReferenceIntotoPredicateArgs) ToSbomReferenceIntotoPredicateOutput() SbomReferenceIntotoPredicateOutput {
	return i.ToSbomReferenceIntotoPredicateOutputWithContext(context.Background())
}

func (i SbomReferenceIntotoPredicateArgs) ToSbomReferenceIntotoPredicateOutputWithContext(ctx context.Context) SbomReferenceIntotoPredicateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SbomReferenceIntotoPredicateOutput)
}

func (i SbomReferenceIntotoPredicateArgs) ToSbomReferenceIntotoPredicatePtrOutput() SbomReferenceIntotoPredicatePtrOutput {
	return i.ToSbomReferenceIntotoPredicatePtrOutputWithContext(context.Background())
}

func (i SbomReferenceIntotoPredicateArgs) ToSbomReferenceIntotoPredicatePtrOutputWithContext(ctx context.Context) SbomReferenceIntotoPredicatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SbomReferenceIntotoPredicateOutput).ToSbomReferenceIntotoPredicatePtrOutputWithContext(ctx)
}

// SbomReferenceIntotoPredicatePtrInput is an input type that accepts SbomReferenceIntotoPredicateArgs, SbomReferenceIntotoPredicatePtr and SbomReferenceIntotoPredicatePtrOutput values.
// You can construct a concrete instance of `SbomReferenceIntotoPredicatePtrInput` via:
//
//	        SbomReferenceIntotoPredicateArgs{...}
//
//	or:
//
//	        nil
type SbomReferenceIntotoPredicatePtrInput interface {
	pulumi.Input

	ToSbomReferenceIntotoPredicatePtrOutput() SbomReferenceIntotoPredicatePtrOutput
	ToSbomReferenceIntotoPredicatePtrOutputWithContext(context.Context) SbomReferenceIntotoPredicatePtrOutput
}

type sbomReferenceIntotoPredicatePtrType SbomReferenceIntotoPredicateArgs

func SbomReferenceIntotoPredicatePtr(v *SbomReferenceIntotoPredicateArgs) SbomReferenceIntotoPredicatePtrInput {
	return (*sbomReferenceIntotoPredicatePtrType)(v)
}

func (*sbomReferenceIntotoPredicatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SbomReferenceIntotoPredicate)(nil)).Elem()
}

func (i *sbomReferenceIntotoPredicatePtrType) ToSbomReferenceIntotoPredicatePtrOutput() SbomReferenceIntotoPredicatePtrOutput {
	return i.ToSbomReferenceIntotoPredicatePtrOutputWithContext(context.Background())
}

func (i *sbomReferenceIntotoPredicatePtrType) ToSbomReferenceIntotoPredicatePtrOutputWithContext(ctx context.Context) SbomReferenceIntotoPredicatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SbomReferenceIntotoPredicatePtrOutput)
}

// A predicate which describes the SBOM being referenced.
type SbomReferenceIntotoPredicateOutput struct{ *pulumi.OutputState }

func (SbomReferenceIntotoPredicateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SbomReferenceIntotoPredicate)(nil)).Elem()
}

func (o SbomReferenceIntotoPredicateOutput) ToSbomReferenceIntotoPredicateOutput() SbomReferenceIntotoPredicateOutput {
	return o
}

func (o SbomReferenceIntotoPredicateOutput) ToSbomReferenceIntotoPredicateOutputWithContext(ctx context.Context) SbomReferenceIntotoPredicateOutput {
	return o
}

func (o SbomReferenceIntotoPredicateOutput) ToSbomReferenceIntotoPredicatePtrOutput() SbomReferenceIntotoPredicatePtrOutput {
	return o.ToSbomReferenceIntotoPredicatePtrOutputWithContext(context.Background())
}

func (o SbomReferenceIntotoPredicateOutput) ToSbomReferenceIntotoPredicatePtrOutputWithContext(ctx context.Context) SbomReferenceIntotoPredicatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SbomReferenceIntotoPredicate) *SbomReferenceIntotoPredicate {
		return &v
	}).(SbomReferenceIntotoPredicatePtrOutput)
}

// A map of algorithm to digest of the contents of the SBOM.
func (o SbomReferenceIntotoPredicateOutput) Digest() pulumi.StringMapOutput {
	return o.ApplyT(func(v SbomReferenceIntotoPredicate) map[string]string { return v.Digest }).(pulumi.StringMapOutput)
}

// The location of the SBOM.
func (o SbomReferenceIntotoPredicateOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SbomReferenceIntotoPredicate) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// The mime type of the SBOM.
func (o SbomReferenceIntotoPredicateOutput) MimeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SbomReferenceIntotoPredicate) *string { return v.MimeType }).(pulumi.StringPtrOutput)
}

// The person or system referring this predicate to the consumer.
func (o SbomReferenceIntotoPredicateOutput) ReferrerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SbomReferenceIntotoPredicate) *string { return v.ReferrerId }).(pulumi.StringPtrOutput)
}

type SbomReferenceIntotoPredicatePtrOutput struct{ *pulumi.OutputState }

func (SbomReferenceIntotoPredicatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SbomReferenceIntotoPredicate)(nil)).Elem()
}

func (o SbomReferenceIntotoPredicatePtrOutput) ToSbomReferenceIntotoPredicatePtrOutput() SbomReferenceIntotoPredicatePtrOutput {
	return o
}

func (o SbomReferenceIntotoPredicatePtrOutput) ToSbomReferenceIntotoPredicatePtrOutputWithContext(ctx context.Context) SbomReferenceIntotoPredicatePtrOutput {
	return o
}

func (o SbomReferenceIntotoPredicatePtrOutput) Elem() SbomReferenceIntotoPredicateOutput {
	return o.ApplyT(func(v *SbomReferenceIntotoPredicate) SbomReferenceIntotoPredicate {
		if v != nil {
			return *v
		}
		var ret SbomReferenceIntotoPredicate
		return ret
	}).(SbomReferenceIntotoPredicateOutput)
}

// A map of algorithm to digest of the contents of the SBOM.
func (o SbomReferenceIntotoPredicatePtrOutput) Digest() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SbomReferenceIntotoPredicate) map[string]string {
		if v == nil {
			return nil
		}
		return v.Digest
	}).(pulumi.StringMapOutput)
}

// The location of the SBOM.
func (o SbomReferenceIntotoPredicatePtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SbomReferenceIntotoPredicate) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// The mime type of the SBOM.
func (o SbomReferenceIntotoPredicatePtrOutput) MimeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SbomReferenceIntotoPredicate) *string {
		if v == nil {
			return nil
		}
		return v.MimeType
	}).(pulumi.StringPtrOutput)
}

// The person or system referring this predicate to the consumer.
func (o SbomReferenceIntotoPredicatePtrOutput) ReferrerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SbomReferenceIntotoPredicate) *string {
		if v == nil {
			return nil
		}
		return v.ReferrerId
	}).(pulumi.StringPtrOutput)
}

// A predicate which describes the SBOM being referenced.
type SbomReferenceIntotoPredicateResponse struct {
	// A map of algorithm to digest of the contents of the SBOM.
	Digest map[string]string `pulumi:"digest"`
	// The location of the SBOM.
	Location string `pulumi:"location"`
	// The mime type of the SBOM.
	MimeType string `pulumi:"mimeType"`
	// The person or system referring this predicate to the consumer.
	ReferrerId string `pulumi:"referrerId"`
}

// A predicate which describes the SBOM being referenced.
type SbomReferenceIntotoPredicateResponseOutput struct{ *pulumi.OutputState }

func (SbomReferenceIntotoPredicateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SbomReferenceIntotoPredicateResponse)(nil)).Elem()
}

func (o SbomReferenceIntotoPredicateResponseOutput) ToSbomReferenceIntotoPredicateResponseOutput() SbomReferenceIntotoPredicateResponseOutput {
	return o
}

func (o SbomReferenceIntotoPredicateResponseOutput) ToSbomReferenceIntotoPredicateResponseOutputWithContext(ctx context.Context) SbomReferenceIntotoPredicateResponseOutput {
	return o
}

// A map of algorithm to digest of the contents of the SBOM.
func (o SbomReferenceIntotoPredicateResponseOutput) Digest() pulumi.StringMapOutput {
	return o.ApplyT(func(v SbomReferenceIntotoPredicateResponse) map[string]string { return v.Digest }).(pulumi.StringMapOutput)
}

// The location of the SBOM.
func (o SbomReferenceIntotoPredicateResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v SbomReferenceIntotoPredicateResponse) string { return v.Location }).(pulumi.StringOutput)
}

// The mime type of the SBOM.
func (o SbomReferenceIntotoPredicateResponseOutput) MimeType() pulumi.StringOutput {
	return o.ApplyT(func(v SbomReferenceIntotoPredicateResponse) string { return v.MimeType }).(pulumi.StringOutput)
}

// The person or system referring this predicate to the consumer.
func (o SbomReferenceIntotoPredicateResponseOutput) ReferrerId() pulumi.StringOutput {
	return o.ApplyT(func(v SbomReferenceIntotoPredicateResponse) string { return v.ReferrerId }).(pulumi.StringOutput)
}

// Verifiers (e.g. Kritis implementations) MUST verify signatures with respect to the trust anchors defined in policy (e.g. a Kritis policy). Typically this means that the verifier has been configured with a map from `public_key_id` to public key material (and any required parameters, e.g. signing algorithm). In particular, verification implementations MUST NOT treat the signature `public_key_id` as anything more than a key lookup hint. The `public_key_id` DOES NOT validate or authenticate a public key; it only provides a mechanism for quickly selecting a public key ALREADY CONFIGURED on the verifier through a trusted channel. Verification implementations MUST reject signatures in any of the following circumstances: * The `public_key_id` is not recognized by the verifier. * The public key that `public_key_id` refers to does not verify the signature with respect to the payload. The `signature` contents SHOULD NOT be "attached" (where the payload is included with the serialized `signature` bytes). Verifiers MUST ignore any "attached" payload and only verify signatures with respect to explicitly provided payload (e.g. a `payload` field on the proto message that holds this Signature, or the canonical serialization of the proto message that holds this signature).
type Signature struct {
	// The identifier for the public key that verifies this signature. * The `public_key_id` is required. * The `public_key_id` SHOULD be an RFC3986 conformant URI. * When possible, the `public_key_id` SHOULD be an immutable reference, such as a cryptographic digest. Examples of valid `public_key_id`s: OpenPGP V4 public key fingerprint: * "openpgp4fpr:74FAF3B861BDA0870C7B6DEF607E48D2A663AEEA" See https://www.iana.org/assignments/uri-schemes/prov/openpgp4fpr for more details on this scheme. RFC6920 digest-named SubjectPublicKeyInfo (digest of the DER serialization): * "ni:///sha-256;cD9o9Cq6LG3jD0iKXqEi_vdjJGecm_iXkbqVoScViaU" * "nih:///sha-256;703f68f42aba2c6de30f488a5ea122fef76324679c9bf89791ba95a1271589a5"
	PublicKeyId *string `pulumi:"publicKeyId"`
	// The content of the signature, an opaque bytestring. The payload that this signature verifies MUST be unambiguously provided with the Signature during verification. A wrapper message might provide the payload explicitly. Alternatively, a message might have a canonical serialization that can always be unambiguously computed to derive the payload.
	Signature *string `pulumi:"signature"`
}

// SignatureInput is an input type that accepts SignatureArgs and SignatureOutput values.
// You can construct a concrete instance of `SignatureInput` via:
//
//	SignatureArgs{...}
type SignatureInput interface {
	pulumi.Input

	ToSignatureOutput() SignatureOutput
	ToSignatureOutputWithContext(context.Context) SignatureOutput
}

// Verifiers (e.g. Kritis implementations) MUST verify signatures with respect to the trust anchors defined in policy (e.g. a Kritis policy). Typically this means that the verifier has been configured with a map from `public_key_id` to public key material (and any required parameters, e.g. signing algorithm). In particular, verification implementations MUST NOT treat the signature `public_key_id` as anything more than a key lookup hint. The `public_key_id` DOES NOT validate or authenticate a public key; it only provides a mechanism for quickly selecting a public key ALREADY CONFIGURED on the verifier through a trusted channel. Verification implementations MUST reject signatures in any of the following circumstances: * The `public_key_id` is not recognized by the verifier. * The public key that `public_key_id` refers to does not verify the signature with respect to the payload. The `signature` contents SHOULD NOT be "attached" (where the payload is included with the serialized `signature` bytes). Verifiers MUST ignore any "attached" payload and only verify signatures with respect to explicitly provided payload (e.g. a `payload` field on the proto message that holds this Signature, or the canonical serialization of the proto message that holds this signature).
type SignatureArgs struct {
	// The identifier for the public key that verifies this signature. * The `public_key_id` is required. * The `public_key_id` SHOULD be an RFC3986 conformant URI. * When possible, the `public_key_id` SHOULD be an immutable reference, such as a cryptographic digest. Examples of valid `public_key_id`s: OpenPGP V4 public key fingerprint: * "openpgp4fpr:74FAF3B861BDA0870C7B6DEF607E48D2A663AEEA" See https://www.iana.org/assignments/uri-schemes/prov/openpgp4fpr for more details on this scheme. RFC6920 digest-named SubjectPublicKeyInfo (digest of the DER serialization): * "ni:///sha-256;cD9o9Cq6LG3jD0iKXqEi_vdjJGecm_iXkbqVoScViaU" * "nih:///sha-256;703f68f42aba2c6de30f488a5ea122fef76324679c9bf89791ba95a1271589a5"
	PublicKeyId pulumi.StringPtrInput `pulumi:"publicKeyId"`
	// The content of the signature, an opaque bytestring. The payload that this signature verifies MUST be unambiguously provided with the Signature during verification. A wrapper message might provide the payload explicitly. Alternatively, a message might have a canonical serialization that can always be unambiguously computed to derive the payload.
	Signature pulumi.StringPtrInput `pulumi:"signature"`
}

func (SignatureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Signature)(nil)).Elem()
}

func (i SignatureArgs) ToSignatureOutput() SignatureOutput {
	return i.ToSignatureOutputWithContext(context.Background())
}

func (i SignatureArgs) ToSignatureOutputWithContext(ctx context.Context) SignatureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignatureOutput)
}

// SignatureArrayInput is an input type that accepts SignatureArray and SignatureArrayOutput values.
// You can construct a concrete instance of `SignatureArrayInput` via:
//
//	SignatureArray{ SignatureArgs{...} }
type SignatureArrayInput interface {
	pulumi.Input

	ToSignatureArrayOutput() SignatureArrayOutput
	ToSignatureArrayOutputWithContext(context.Context) SignatureArrayOutput
}

type SignatureArray []SignatureInput

func (SignatureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Signature)(nil)).Elem()
}

func (i SignatureArray) ToSignatureArrayOutput() SignatureArrayOutput {
	return i.ToSignatureArrayOutputWithContext(context.Background())
}

func (i SignatureArray) ToSignatureArrayOutputWithContext(ctx context.Context) SignatureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignatureArrayOutput)
}

// Verifiers (e.g. Kritis implementations) MUST verify signatures with respect to the trust anchors defined in policy (e.g. a Kritis policy). Typically this means that the verifier has been configured with a map from `public_key_id` to public key material (and any required parameters, e.g. signing algorithm). In particular, verification implementations MUST NOT treat the signature `public_key_id` as anything more than a key lookup hint. The `public_key_id` DOES NOT validate or authenticate a public key; it only provides a mechanism for quickly selecting a public key ALREADY CONFIGURED on the verifier through a trusted channel. Verification implementations MUST reject signatures in any of the following circumstances: * The `public_key_id` is not recognized by the verifier. * The public key that `public_key_id` refers to does not verify the signature with respect to the payload. The `signature` contents SHOULD NOT be "attached" (where the payload is included with the serialized `signature` bytes). Verifiers MUST ignore any "attached" payload and only verify signatures with respect to explicitly provided payload (e.g. a `payload` field on the proto message that holds this Signature, or the canonical serialization of the proto message that holds this signature).
type SignatureOutput struct{ *pulumi.OutputState }

func (SignatureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Signature)(nil)).Elem()
}

func (o SignatureOutput) ToSignatureOutput() SignatureOutput {
	return o
}

func (o SignatureOutput) ToSignatureOutputWithContext(ctx context.Context) SignatureOutput {
	return o
}

// The identifier for the public key that verifies this signature. * The `public_key_id` is required. * The `public_key_id` SHOULD be an RFC3986 conformant URI. * When possible, the `public_key_id` SHOULD be an immutable reference, such as a cryptographic digest. Examples of valid `public_key_id`s: OpenPGP V4 public key fingerprint: * "openpgp4fpr:74FAF3B861BDA0870C7B6DEF607E48D2A663AEEA" See https://www.iana.org/assignments/uri-schemes/prov/openpgp4fpr for more details on this scheme. RFC6920 digest-named SubjectPublicKeyInfo (digest of the DER serialization): * "ni:///sha-256;cD9o9Cq6LG3jD0iKXqEi_vdjJGecm_iXkbqVoScViaU" * "nih:///sha-256;703f68f42aba2c6de30f488a5ea122fef76324679c9bf89791ba95a1271589a5"
func (o SignatureOutput) PublicKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Signature) *string { return v.PublicKeyId }).(pulumi.StringPtrOutput)
}

// The content of the signature, an opaque bytestring. The payload that this signature verifies MUST be unambiguously provided with the Signature during verification. A wrapper message might provide the payload explicitly. Alternatively, a message might have a canonical serialization that can always be unambiguously computed to derive the payload.
func (o SignatureOutput) Signature() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Signature) *string { return v.Signature }).(pulumi.StringPtrOutput)
}

type SignatureArrayOutput struct{ *pulumi.OutputState }

func (SignatureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Signature)(nil)).Elem()
}

func (o SignatureArrayOutput) ToSignatureArrayOutput() SignatureArrayOutput {
	return o
}

func (o SignatureArrayOutput) ToSignatureArrayOutputWithContext(ctx context.Context) SignatureArrayOutput {
	return o
}

func (o SignatureArrayOutput) Index(i pulumi.IntInput) SignatureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Signature {
		return vs[0].([]Signature)[vs[1].(int)]
	}).(SignatureOutput)
}

// Verifiers (e.g. Kritis implementations) MUST verify signatures with respect to the trust anchors defined in policy (e.g. a Kritis policy). Typically this means that the verifier has been configured with a map from `public_key_id` to public key material (and any required parameters, e.g. signing algorithm). In particular, verification implementations MUST NOT treat the signature `public_key_id` as anything more than a key lookup hint. The `public_key_id` DOES NOT validate or authenticate a public key; it only provides a mechanism for quickly selecting a public key ALREADY CONFIGURED on the verifier through a trusted channel. Verification implementations MUST reject signatures in any of the following circumstances: * The `public_key_id` is not recognized by the verifier. * The public key that `public_key_id` refers to does not verify the signature with respect to the payload. The `signature` contents SHOULD NOT be "attached" (where the payload is included with the serialized `signature` bytes). Verifiers MUST ignore any "attached" payload and only verify signatures with respect to explicitly provided payload (e.g. a `payload` field on the proto message that holds this Signature, or the canonical serialization of the proto message that holds this signature).
type SignatureResponse struct {
	// The identifier for the public key that verifies this signature. * The `public_key_id` is required. * The `public_key_id` SHOULD be an RFC3986 conformant URI. * When possible, the `public_key_id` SHOULD be an immutable reference, such as a cryptographic digest. Examples of valid `public_key_id`s: OpenPGP V4 public key fingerprint: * "openpgp4fpr:74FAF3B861BDA0870C7B6DEF607E48D2A663AEEA" See https://www.iana.org/assignments/uri-schemes/prov/openpgp4fpr for more details on this scheme. RFC6920 digest-named SubjectPublicKeyInfo (digest of the DER serialization): * "ni:///sha-256;cD9o9Cq6LG3jD0iKXqEi_vdjJGecm_iXkbqVoScViaU" * "nih:///sha-256;703f68f42aba2c6de30f488a5ea122fef76324679c9bf89791ba95a1271589a5"
	PublicKeyId string `pulumi:"publicKeyId"`
	// The content of the signature, an opaque bytestring. The payload that this signature verifies MUST be unambiguously provided with the Signature during verification. A wrapper message might provide the payload explicitly. Alternatively, a message might have a canonical serialization that can always be unambiguously computed to derive the payload.
	Signature string `pulumi:"signature"`
}

// Verifiers (e.g. Kritis implementations) MUST verify signatures with respect to the trust anchors defined in policy (e.g. a Kritis policy). Typically this means that the verifier has been configured with a map from `public_key_id` to public key material (and any required parameters, e.g. signing algorithm). In particular, verification implementations MUST NOT treat the signature `public_key_id` as anything more than a key lookup hint. The `public_key_id` DOES NOT validate or authenticate a public key; it only provides a mechanism for quickly selecting a public key ALREADY CONFIGURED on the verifier through a trusted channel. Verification implementations MUST reject signatures in any of the following circumstances: * The `public_key_id` is not recognized by the verifier. * The public key that `public_key_id` refers to does not verify the signature with respect to the payload. The `signature` contents SHOULD NOT be "attached" (where the payload is included with the serialized `signature` bytes). Verifiers MUST ignore any "attached" payload and only verify signatures with respect to explicitly provided payload (e.g. a `payload` field on the proto message that holds this Signature, or the canonical serialization of the proto message that holds this signature).
type SignatureResponseOutput struct{ *pulumi.OutputState }

func (SignatureResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SignatureResponse)(nil)).Elem()
}

func (o SignatureResponseOutput) ToSignatureResponseOutput() SignatureResponseOutput {
	return o
}

func (o SignatureResponseOutput) ToSignatureResponseOutputWithContext(ctx context.Context) SignatureResponseOutput {
	return o
}

// The identifier for the public key that verifies this signature. * The `public_key_id` is required. * The `public_key_id` SHOULD be an RFC3986 conformant URI. * When possible, the `public_key_id` SHOULD be an immutable reference, such as a cryptographic digest. Examples of valid `public_key_id`s: OpenPGP V4 public key fingerprint: * "openpgp4fpr:74FAF3B861BDA0870C7B6DEF607E48D2A663AEEA" See https://www.iana.org/assignments/uri-schemes/prov/openpgp4fpr for more details on this scheme. RFC6920 digest-named SubjectPublicKeyInfo (digest of the DER serialization): * "ni:///sha-256;cD9o9Cq6LG3jD0iKXqEi_vdjJGecm_iXkbqVoScViaU" * "nih:///sha-256;703f68f42aba2c6de30f488a5ea122fef76324679c9bf89791ba95a1271589a5"
func (o SignatureResponseOutput) PublicKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v SignatureResponse) string { return v.PublicKeyId }).(pulumi.StringOutput)
}

// The content of the signature, an opaque bytestring. The payload that this signature verifies MUST be unambiguously provided with the Signature during verification. A wrapper message might provide the payload explicitly. Alternatively, a message might have a canonical serialization that can always be unambiguously computed to derive the payload.
func (o SignatureResponseOutput) Signature() pulumi.StringOutput {
	return o.ApplyT(func(v SignatureResponse) string { return v.Signature }).(pulumi.StringOutput)
}

type SignatureResponseArrayOutput struct{ *pulumi.OutputState }

func (SignatureResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SignatureResponse)(nil)).Elem()
}

func (o SignatureResponseArrayOutput) ToSignatureResponseArrayOutput() SignatureResponseArrayOutput {
	return o
}

func (o SignatureResponseArrayOutput) ToSignatureResponseArrayOutputWithContext(ctx context.Context) SignatureResponseArrayOutput {
	return o
}

func (o SignatureResponseArrayOutput) Index(i pulumi.IntInput) SignatureResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SignatureResponse {
		return vs[0].([]SignatureResponse)[vs[1].(int)]
	}).(SignatureResponseOutput)
}

type SlsaBuilder struct {
	Id *string `pulumi:"id"`
}

// SlsaBuilderInput is an input type that accepts SlsaBuilderArgs and SlsaBuilderOutput values.
// You can construct a concrete instance of `SlsaBuilderInput` via:
//
//	SlsaBuilderArgs{...}
type SlsaBuilderInput interface {
	pulumi.Input

	ToSlsaBuilderOutput() SlsaBuilderOutput
	ToSlsaBuilderOutputWithContext(context.Context) SlsaBuilderOutput
}

type SlsaBuilderArgs struct {
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (SlsaBuilderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SlsaBuilder)(nil)).Elem()
}

func (i SlsaBuilderArgs) ToSlsaBuilderOutput() SlsaBuilderOutput {
	return i.ToSlsaBuilderOutputWithContext(context.Background())
}

func (i SlsaBuilderArgs) ToSlsaBuilderOutputWithContext(ctx context.Context) SlsaBuilderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlsaBuilderOutput)
}

func (i SlsaBuilderArgs) ToSlsaBuilderPtrOutput() SlsaBuilderPtrOutput {
	return i.ToSlsaBuilderPtrOutputWithContext(context.Background())
}

func (i SlsaBuilderArgs) ToSlsaBuilderPtrOutputWithContext(ctx context.Context) SlsaBuilderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlsaBuilderOutput).ToSlsaBuilderPtrOutputWithContext(ctx)
}

// SlsaBuilderPtrInput is an input type that accepts SlsaBuilderArgs, SlsaBuilderPtr and SlsaBuilderPtrOutput values.
// You can construct a concrete instance of `SlsaBuilderPtrInput` via:
//
//	        SlsaBuilderArgs{...}
//
//	or:
//
//	        nil
type SlsaBuilderPtrInput interface {
	pulumi.Input

	ToSlsaBuilderPtrOutput() SlsaBuilderPtrOutput
	ToSlsaBuilderPtrOutputWithContext(context.Context) SlsaBuilderPtrOutput
}

type slsaBuilderPtrType SlsaBuilderArgs

func SlsaBuilderPtr(v *SlsaBuilderArgs) SlsaBuilderPtrInput {
	return (*slsaBuilderPtrType)(v)
}

func (*slsaBuilderPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SlsaBuilder)(nil)).Elem()
}

func (i *slsaBuilderPtrType) ToSlsaBuilderPtrOutput() SlsaBuilderPtrOutput {
	return i.ToSlsaBuilderPtrOutputWithContext(context.Background())
}

func (i *slsaBuilderPtrType) ToSlsaBuilderPtrOutputWithContext(ctx context.Context) SlsaBuilderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlsaBuilderPtrOutput)
}

type SlsaBuilderOutput struct{ *pulumi.OutputState }

func (SlsaBuilderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SlsaBuilder)(nil)).Elem()
}

func (o SlsaBuilderOutput) ToSlsaBuilderOutput() SlsaBuilderOutput {
	return o
}

func (o SlsaBuilderOutput) ToSlsaBuilderOutputWithContext(ctx context.Context) SlsaBuilderOutput {
	return o
}

func (o SlsaBuilderOutput) ToSlsaBuilderPtrOutput() SlsaBuilderPtrOutput {
	return o.ToSlsaBuilderPtrOutputWithContext(context.Background())
}

func (o SlsaBuilderOutput) ToSlsaBuilderPtrOutputWithContext(ctx context.Context) SlsaBuilderPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SlsaBuilder) *SlsaBuilder {
		return &v
	}).(SlsaBuilderPtrOutput)
}

func (o SlsaBuilderOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SlsaBuilder) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type SlsaBuilderPtrOutput struct{ *pulumi.OutputState }

func (SlsaBuilderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SlsaBuilder)(nil)).Elem()
}

func (o SlsaBuilderPtrOutput) ToSlsaBuilderPtrOutput() SlsaBuilderPtrOutput {
	return o
}

func (o SlsaBuilderPtrOutput) ToSlsaBuilderPtrOutputWithContext(ctx context.Context) SlsaBuilderPtrOutput {
	return o
}

func (o SlsaBuilderPtrOutput) Elem() SlsaBuilderOutput {
	return o.ApplyT(func(v *SlsaBuilder) SlsaBuilder {
		if v != nil {
			return *v
		}
		var ret SlsaBuilder
		return ret
	}).(SlsaBuilderOutput)
}

func (o SlsaBuilderPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SlsaBuilder) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

type SlsaBuilderResponse struct {
}

type SlsaBuilderResponseOutput struct{ *pulumi.OutputState }

func (SlsaBuilderResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SlsaBuilderResponse)(nil)).Elem()
}

func (o SlsaBuilderResponseOutput) ToSlsaBuilderResponseOutput() SlsaBuilderResponseOutput {
	return o
}

func (o SlsaBuilderResponseOutput) ToSlsaBuilderResponseOutputWithContext(ctx context.Context) SlsaBuilderResponseOutput {
	return o
}

// Indicates that the builder claims certain fields in this message to be complete.
type SlsaCompleteness struct {
	// If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe.
	Arguments *bool `pulumi:"arguments"`
	// If true, the builder claims that recipe.environment is claimed to be complete.
	Environment *bool `pulumi:"environment"`
	// If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called "hermetic".
	Materials *bool `pulumi:"materials"`
}

// SlsaCompletenessInput is an input type that accepts SlsaCompletenessArgs and SlsaCompletenessOutput values.
// You can construct a concrete instance of `SlsaCompletenessInput` via:
//
//	SlsaCompletenessArgs{...}
type SlsaCompletenessInput interface {
	pulumi.Input

	ToSlsaCompletenessOutput() SlsaCompletenessOutput
	ToSlsaCompletenessOutputWithContext(context.Context) SlsaCompletenessOutput
}

// Indicates that the builder claims certain fields in this message to be complete.
type SlsaCompletenessArgs struct {
	// If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe.
	Arguments pulumi.BoolPtrInput `pulumi:"arguments"`
	// If true, the builder claims that recipe.environment is claimed to be complete.
	Environment pulumi.BoolPtrInput `pulumi:"environment"`
	// If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called "hermetic".
	Materials pulumi.BoolPtrInput `pulumi:"materials"`
}

func (SlsaCompletenessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SlsaCompleteness)(nil)).Elem()
}

func (i SlsaCompletenessArgs) ToSlsaCompletenessOutput() SlsaCompletenessOutput {
	return i.ToSlsaCompletenessOutputWithContext(context.Background())
}

func (i SlsaCompletenessArgs) ToSlsaCompletenessOutputWithContext(ctx context.Context) SlsaCompletenessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlsaCompletenessOutput)
}

func (i SlsaCompletenessArgs) ToSlsaCompletenessPtrOutput() SlsaCompletenessPtrOutput {
	return i.ToSlsaCompletenessPtrOutputWithContext(context.Background())
}

func (i SlsaCompletenessArgs) ToSlsaCompletenessPtrOutputWithContext(ctx context.Context) SlsaCompletenessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlsaCompletenessOutput).ToSlsaCompletenessPtrOutputWithContext(ctx)
}

// SlsaCompletenessPtrInput is an input type that accepts SlsaCompletenessArgs, SlsaCompletenessPtr and SlsaCompletenessPtrOutput values.
// You can construct a concrete instance of `SlsaCompletenessPtrInput` via:
//
//	        SlsaCompletenessArgs{...}
//
//	or:
//
//	        nil
type SlsaCompletenessPtrInput interface {
	pulumi.Input

	ToSlsaCompletenessPtrOutput() SlsaCompletenessPtrOutput
	ToSlsaCompletenessPtrOutputWithContext(context.Context) SlsaCompletenessPtrOutput
}

type slsaCompletenessPtrType SlsaCompletenessArgs

func SlsaCompletenessPtr(v *SlsaCompletenessArgs) SlsaCompletenessPtrInput {
	return (*slsaCompletenessPtrType)(v)
}

func (*slsaCompletenessPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SlsaCompleteness)(nil)).Elem()
}

func (i *slsaCompletenessPtrType) ToSlsaCompletenessPtrOutput() SlsaCompletenessPtrOutput {
	return i.ToSlsaCompletenessPtrOutputWithContext(context.Background())
}

func (i *slsaCompletenessPtrType) ToSlsaCompletenessPtrOutputWithContext(ctx context.Context) SlsaCompletenessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlsaCompletenessPtrOutput)
}

// Indicates that the builder claims certain fields in this message to be complete.
type SlsaCompletenessOutput struct{ *pulumi.OutputState }

func (SlsaCompletenessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SlsaCompleteness)(nil)).Elem()
}

func (o SlsaCompletenessOutput) ToSlsaCompletenessOutput() SlsaCompletenessOutput {
	return o
}

func (o SlsaCompletenessOutput) ToSlsaCompletenessOutputWithContext(ctx context.Context) SlsaCompletenessOutput {
	return o
}

func (o SlsaCompletenessOutput) ToSlsaCompletenessPtrOutput() SlsaCompletenessPtrOutput {
	return o.ToSlsaCompletenessPtrOutputWithContext(context.Background())
}

func (o SlsaCompletenessOutput) ToSlsaCompletenessPtrOutputWithContext(ctx context.Context) SlsaCompletenessPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SlsaCompleteness) *SlsaCompleteness {
		return &v
	}).(SlsaCompletenessPtrOutput)
}

// If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe.
func (o SlsaCompletenessOutput) Arguments() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SlsaCompleteness) *bool { return v.Arguments }).(pulumi.BoolPtrOutput)
}

// If true, the builder claims that recipe.environment is claimed to be complete.
func (o SlsaCompletenessOutput) Environment() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SlsaCompleteness) *bool { return v.Environment }).(pulumi.BoolPtrOutput)
}

// If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called "hermetic".
func (o SlsaCompletenessOutput) Materials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SlsaCompleteness) *bool { return v.Materials }).(pulumi.BoolPtrOutput)
}

type SlsaCompletenessPtrOutput struct{ *pulumi.OutputState }

func (SlsaCompletenessPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SlsaCompleteness)(nil)).Elem()
}

func (o SlsaCompletenessPtrOutput) ToSlsaCompletenessPtrOutput() SlsaCompletenessPtrOutput {
	return o
}

func (o SlsaCompletenessPtrOutput) ToSlsaCompletenessPtrOutputWithContext(ctx context.Context) SlsaCompletenessPtrOutput {
	return o
}

func (o SlsaCompletenessPtrOutput) Elem() SlsaCompletenessOutput {
	return o.ApplyT(func(v *SlsaCompleteness) SlsaCompleteness {
		if v != nil {
			return *v
		}
		var ret SlsaCompleteness
		return ret
	}).(SlsaCompletenessOutput)
}

// If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe.
func (o SlsaCompletenessPtrOutput) Arguments() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SlsaCompleteness) *bool {
		if v == nil {
			return nil
		}
		return v.Arguments
	}).(pulumi.BoolPtrOutput)
}

// If true, the builder claims that recipe.environment is claimed to be complete.
func (o SlsaCompletenessPtrOutput) Environment() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SlsaCompleteness) *bool {
		if v == nil {
			return nil
		}
		return v.Environment
	}).(pulumi.BoolPtrOutput)
}

// If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called "hermetic".
func (o SlsaCompletenessPtrOutput) Materials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SlsaCompleteness) *bool {
		if v == nil {
			return nil
		}
		return v.Materials
	}).(pulumi.BoolPtrOutput)
}

// Indicates that the builder claims certain fields in this message to be complete.
type SlsaCompletenessResponse struct {
	// If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe.
	Arguments bool `pulumi:"arguments"`
	// If true, the builder claims that recipe.environment is claimed to be complete.
	Environment bool `pulumi:"environment"`
	// If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called "hermetic".
	Materials bool `pulumi:"materials"`
}

// Indicates that the builder claims certain fields in this message to be complete.
type SlsaCompletenessResponseOutput struct{ *pulumi.OutputState }

func (SlsaCompletenessResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SlsaCompletenessResponse)(nil)).Elem()
}

func (o SlsaCompletenessResponseOutput) ToSlsaCompletenessResponseOutput() SlsaCompletenessResponseOutput {
	return o
}

func (o SlsaCompletenessResponseOutput) ToSlsaCompletenessResponseOutputWithContext(ctx context.Context) SlsaCompletenessResponseOutput {
	return o
}

// If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe.
func (o SlsaCompletenessResponseOutput) Arguments() pulumi.BoolOutput {
	return o.ApplyT(func(v SlsaCompletenessResponse) bool { return v.Arguments }).(pulumi.BoolOutput)
}

// If true, the builder claims that recipe.environment is claimed to be complete.
func (o SlsaCompletenessResponseOutput) Environment() pulumi.BoolOutput {
	return o.ApplyT(func(v SlsaCompletenessResponse) bool { return v.Environment }).(pulumi.BoolOutput)
}

// If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called "hermetic".
func (o SlsaCompletenessResponseOutput) Materials() pulumi.BoolOutput {
	return o.ApplyT(func(v SlsaCompletenessResponse) bool { return v.Materials }).(pulumi.BoolOutput)
}

// Other properties of the build.
type SlsaMetadata struct {
	// The timestamp of when the build completed.
	BuildFinishedOn *string `pulumi:"buildFinishedOn"`
	// Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec.
	BuildInvocationId *string `pulumi:"buildInvocationId"`
	// The timestamp of when the build started.
	BuildStartedOn *string `pulumi:"buildStartedOn"`
	// Indicates that the builder claims certain fields in this message to be complete.
	Completeness *SlsaCompleteness `pulumi:"completeness"`
	// If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output.
	Reproducible *bool `pulumi:"reproducible"`
}

// SlsaMetadataInput is an input type that accepts SlsaMetadataArgs and SlsaMetadataOutput values.
// You can construct a concrete instance of `SlsaMetadataInput` via:
//
//	SlsaMetadataArgs{...}
type SlsaMetadataInput interface {
	pulumi.Input

	ToSlsaMetadataOutput() SlsaMetadataOutput
	ToSlsaMetadataOutputWithContext(context.Context) SlsaMetadataOutput
}

// Other properties of the build.
type SlsaMetadataArgs struct {
	// The timestamp of when the build completed.
	BuildFinishedOn pulumi.StringPtrInput `pulumi:"buildFinishedOn"`
	// Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec.
	BuildInvocationId pulumi.StringPtrInput `pulumi:"buildInvocationId"`
	// The timestamp of when the build started.
	BuildStartedOn pulumi.StringPtrInput `pulumi:"buildStartedOn"`
	// Indicates that the builder claims certain fields in this message to be complete.
	Completeness SlsaCompletenessPtrInput `pulumi:"completeness"`
	// If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output.
	Reproducible pulumi.BoolPtrInput `pulumi:"reproducible"`
}

func (SlsaMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SlsaMetadata)(nil)).Elem()
}

func (i SlsaMetadataArgs) ToSlsaMetadataOutput() SlsaMetadataOutput {
	return i.ToSlsaMetadataOutputWithContext(context.Background())
}

func (i SlsaMetadataArgs) ToSlsaMetadataOutputWithContext(ctx context.Context) SlsaMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlsaMetadataOutput)
}

func (i SlsaMetadataArgs) ToSlsaMetadataPtrOutput() SlsaMetadataPtrOutput {
	return i.ToSlsaMetadataPtrOutputWithContext(context.Background())
}

func (i SlsaMetadataArgs) ToSlsaMetadataPtrOutputWithContext(ctx context.Context) SlsaMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlsaMetadataOutput).ToSlsaMetadataPtrOutputWithContext(ctx)
}

// SlsaMetadataPtrInput is an input type that accepts SlsaMetadataArgs, SlsaMetadataPtr and SlsaMetadataPtrOutput values.
// You can construct a concrete instance of `SlsaMetadataPtrInput` via:
//
//	        SlsaMetadataArgs{...}
//
//	or:
//
//	        nil
type SlsaMetadataPtrInput interface {
	pulumi.Input

	ToSlsaMetadataPtrOutput() SlsaMetadataPtrOutput
	ToSlsaMetadataPtrOutputWithContext(context.Context) SlsaMetadataPtrOutput
}

type slsaMetadataPtrType SlsaMetadataArgs

func SlsaMetadataPtr(v *SlsaMetadataArgs) SlsaMetadataPtrInput {
	return (*slsaMetadataPtrType)(v)
}

func (*slsaMetadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SlsaMetadata)(nil)).Elem()
}

func (i *slsaMetadataPtrType) ToSlsaMetadataPtrOutput() SlsaMetadataPtrOutput {
	return i.ToSlsaMetadataPtrOutputWithContext(context.Background())
}

func (i *slsaMetadataPtrType) ToSlsaMetadataPtrOutputWithContext(ctx context.Context) SlsaMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlsaMetadataPtrOutput)
}

// Other properties of the build.
type SlsaMetadataOutput struct{ *pulumi.OutputState }

func (SlsaMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SlsaMetadata)(nil)).Elem()
}

func (o SlsaMetadataOutput) ToSlsaMetadataOutput() SlsaMetadataOutput {
	return o
}

func (o SlsaMetadataOutput) ToSlsaMetadataOutputWithContext(ctx context.Context) SlsaMetadataOutput {
	return o
}

func (o SlsaMetadataOutput) ToSlsaMetadataPtrOutput() SlsaMetadataPtrOutput {
	return o.ToSlsaMetadataPtrOutputWithContext(context.Background())
}

func (o SlsaMetadataOutput) ToSlsaMetadataPtrOutputWithContext(ctx context.Context) SlsaMetadataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SlsaMetadata) *SlsaMetadata {
		return &v
	}).(SlsaMetadataPtrOutput)
}

// The timestamp of when the build completed.
func (o SlsaMetadataOutput) BuildFinishedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SlsaMetadata) *string { return v.BuildFinishedOn }).(pulumi.StringPtrOutput)
}

// Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec.
func (o SlsaMetadataOutput) BuildInvocationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SlsaMetadata) *string { return v.BuildInvocationId }).(pulumi.StringPtrOutput)
}

// The timestamp of when the build started.
func (o SlsaMetadataOutput) BuildStartedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SlsaMetadata) *string { return v.BuildStartedOn }).(pulumi.StringPtrOutput)
}

// Indicates that the builder claims certain fields in this message to be complete.
func (o SlsaMetadataOutput) Completeness() SlsaCompletenessPtrOutput {
	return o.ApplyT(func(v SlsaMetadata) *SlsaCompleteness { return v.Completeness }).(SlsaCompletenessPtrOutput)
}

// If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output.
func (o SlsaMetadataOutput) Reproducible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SlsaMetadata) *bool { return v.Reproducible }).(pulumi.BoolPtrOutput)
}

type SlsaMetadataPtrOutput struct{ *pulumi.OutputState }

func (SlsaMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SlsaMetadata)(nil)).Elem()
}

func (o SlsaMetadataPtrOutput) ToSlsaMetadataPtrOutput() SlsaMetadataPtrOutput {
	return o
}

func (o SlsaMetadataPtrOutput) ToSlsaMetadataPtrOutputWithContext(ctx context.Context) SlsaMetadataPtrOutput {
	return o
}

func (o SlsaMetadataPtrOutput) Elem() SlsaMetadataOutput {
	return o.ApplyT(func(v *SlsaMetadata) SlsaMetadata {
		if v != nil {
			return *v
		}
		var ret SlsaMetadata
		return ret
	}).(SlsaMetadataOutput)
}

// The timestamp of when the build completed.
func (o SlsaMetadataPtrOutput) BuildFinishedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SlsaMetadata) *string {
		if v == nil {
			return nil
		}
		return v.BuildFinishedOn
	}).(pulumi.StringPtrOutput)
}

// Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec.
func (o SlsaMetadataPtrOutput) BuildInvocationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SlsaMetadata) *string {
		if v == nil {
			return nil
		}
		return v.BuildInvocationId
	}).(pulumi.StringPtrOutput)
}

// The timestamp of when the build started.
func (o SlsaMetadataPtrOutput) BuildStartedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SlsaMetadata) *string {
		if v == nil {
			return nil
		}
		return v.BuildStartedOn
	}).(pulumi.StringPtrOutput)
}

// Indicates that the builder claims certain fields in this message to be complete.
func (o SlsaMetadataPtrOutput) Completeness() SlsaCompletenessPtrOutput {
	return o.ApplyT(func(v *SlsaMetadata) *SlsaCompleteness {
		if v == nil {
			return nil
		}
		return v.Completeness
	}).(SlsaCompletenessPtrOutput)
}

// If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output.
func (o SlsaMetadataPtrOutput) Reproducible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SlsaMetadata) *bool {
		if v == nil {
			return nil
		}
		return v.Reproducible
	}).(pulumi.BoolPtrOutput)
}

// Other properties of the build.
type SlsaMetadataResponse struct {
	// The timestamp of when the build completed.
	BuildFinishedOn string `pulumi:"buildFinishedOn"`
	// Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec.
	BuildInvocationId string `pulumi:"buildInvocationId"`
	// The timestamp of when the build started.
	BuildStartedOn string `pulumi:"buildStartedOn"`
	// Indicates that the builder claims certain fields in this message to be complete.
	Completeness SlsaCompletenessResponse `pulumi:"completeness"`
	// If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output.
	Reproducible bool `pulumi:"reproducible"`
}

// Other properties of the build.
type SlsaMetadataResponseOutput struct{ *pulumi.OutputState }

func (SlsaMetadataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SlsaMetadataResponse)(nil)).Elem()
}

func (o SlsaMetadataResponseOutput) ToSlsaMetadataResponseOutput() SlsaMetadataResponseOutput {
	return o
}

func (o SlsaMetadataResponseOutput) ToSlsaMetadataResponseOutputWithContext(ctx context.Context) SlsaMetadataResponseOutput {
	return o
}

// The timestamp of when the build completed.
func (o SlsaMetadataResponseOutput) BuildFinishedOn() pulumi.StringOutput {
	return o.ApplyT(func(v SlsaMetadataResponse) string { return v.BuildFinishedOn }).(pulumi.StringOutput)
}

// Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec.
func (o SlsaMetadataResponseOutput) BuildInvocationId() pulumi.StringOutput {
	return o.ApplyT(func(v SlsaMetadataResponse) string { return v.BuildInvocationId }).(pulumi.StringOutput)
}

// The timestamp of when the build started.
func (o SlsaMetadataResponseOutput) BuildStartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v SlsaMetadataResponse) string { return v.BuildStartedOn }).(pulumi.StringOutput)
}

// Indicates that the builder claims certain fields in this message to be complete.
func (o SlsaMetadataResponseOutput) Completeness() SlsaCompletenessResponseOutput {
	return o.ApplyT(func(v SlsaMetadataResponse) SlsaCompletenessResponse { return v.Completeness }).(SlsaCompletenessResponseOutput)
}

// If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output.
func (o SlsaMetadataResponseOutput) Reproducible() pulumi.BoolOutput {
	return o.ApplyT(func(v SlsaMetadataResponse) bool { return v.Reproducible }).(pulumi.BoolOutput)
}

type SlsaProvenance struct {
	// required
	Builder *SlsaBuilder `pulumi:"builder"`
	// The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.
	Materials []Material    `pulumi:"materials"`
	Metadata  *SlsaMetadata `pulumi:"metadata"`
	// Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit identical output (if the build is reproducible). required
	Recipe *SlsaRecipe `pulumi:"recipe"`
}

// SlsaProvenanceInput is an input type that accepts SlsaProvenanceArgs and SlsaProvenanceOutput values.
// You can construct a concrete instance of `SlsaProvenanceInput` via:
//
//	SlsaProvenanceArgs{...}
type SlsaProvenanceInput interface {
	pulumi.Input

	ToSlsaProvenanceOutput() SlsaProvenanceOutput
	ToSlsaProvenanceOutputWithContext(context.Context) SlsaProvenanceOutput
}

type SlsaProvenanceArgs struct {
	// required
	Builder SlsaBuilderPtrInput `pulumi:"builder"`
	// The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.
	Materials MaterialArrayInput   `pulumi:"materials"`
	Metadata  SlsaMetadataPtrInput `pulumi:"metadata"`
	// Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit identical output (if the build is reproducible). required
	Recipe SlsaRecipePtrInput `pulumi:"recipe"`
}

func (SlsaProvenanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SlsaProvenance)(nil)).Elem()
}

func (i SlsaProvenanceArgs) ToSlsaProvenanceOutput() SlsaProvenanceOutput {
	return i.ToSlsaProvenanceOutputWithContext(context.Background())
}

func (i SlsaProvenanceArgs) ToSlsaProvenanceOutputWithContext(ctx context.Context) SlsaProvenanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlsaProvenanceOutput)
}

func (i SlsaProvenanceArgs) ToSlsaProvenancePtrOutput() SlsaProvenancePtrOutput {
	return i.ToSlsaProvenancePtrOutputWithContext(context.Background())
}

func (i SlsaProvenanceArgs) ToSlsaProvenancePtrOutputWithContext(ctx context.Context) SlsaProvenancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlsaProvenanceOutput).ToSlsaProvenancePtrOutputWithContext(ctx)
}

// SlsaProvenancePtrInput is an input type that accepts SlsaProvenanceArgs, SlsaProvenancePtr and SlsaProvenancePtrOutput values.
// You can construct a concrete instance of `SlsaProvenancePtrInput` via:
//
//	        SlsaProvenanceArgs{...}
//
//	or:
//
//	        nil
type SlsaProvenancePtrInput interface {
	pulumi.Input

	ToSlsaProvenancePtrOutput() SlsaProvenancePtrOutput
	ToSlsaProvenancePtrOutputWithContext(context.Context) SlsaProvenancePtrOutput
}

type slsaProvenancePtrType SlsaProvenanceArgs

func SlsaProvenancePtr(v *SlsaProvenanceArgs) SlsaProvenancePtrInput {
	return (*slsaProvenancePtrType)(v)
}

func (*slsaProvenancePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SlsaProvenance)(nil)).Elem()
}

func (i *slsaProvenancePtrType) ToSlsaProvenancePtrOutput() SlsaProvenancePtrOutput {
	return i.ToSlsaProvenancePtrOutputWithContext(context.Background())
}

func (i *slsaProvenancePtrType) ToSlsaProvenancePtrOutputWithContext(ctx context.Context) SlsaProvenancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlsaProvenancePtrOutput)
}

type SlsaProvenanceOutput struct{ *pulumi.OutputState }

func (SlsaProvenanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SlsaProvenance)(nil)).Elem()
}

func (o SlsaProvenanceOutput) ToSlsaProvenanceOutput() SlsaProvenanceOutput {
	return o
}

func (o SlsaProvenanceOutput) ToSlsaProvenanceOutputWithContext(ctx context.Context) SlsaProvenanceOutput {
	return o
}

func (o SlsaProvenanceOutput) ToSlsaProvenancePtrOutput() SlsaProvenancePtrOutput {
	return o.ToSlsaProvenancePtrOutputWithContext(context.Background())
}

func (o SlsaProvenanceOutput) ToSlsaProvenancePtrOutputWithContext(ctx context.Context) SlsaProvenancePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SlsaProvenance) *SlsaProvenance {
		return &v
	}).(SlsaProvenancePtrOutput)
}

// required
func (o SlsaProvenanceOutput) Builder() SlsaBuilderPtrOutput {
	return o.ApplyT(func(v SlsaProvenance) *SlsaBuilder { return v.Builder }).(SlsaBuilderPtrOutput)
}

// The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.
func (o SlsaProvenanceOutput) Materials() MaterialArrayOutput {
	return o.ApplyT(func(v SlsaProvenance) []Material { return v.Materials }).(MaterialArrayOutput)
}

func (o SlsaProvenanceOutput) Metadata() SlsaMetadataPtrOutput {
	return o.ApplyT(func(v SlsaProvenance) *SlsaMetadata { return v.Metadata }).(SlsaMetadataPtrOutput)
}

// Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit identical output (if the build is reproducible). required
func (o SlsaProvenanceOutput) Recipe() SlsaRecipePtrOutput {
	return o.ApplyT(func(v SlsaProvenance) *SlsaRecipe { return v.Recipe }).(SlsaRecipePtrOutput)
}

type SlsaProvenancePtrOutput struct{ *pulumi.OutputState }

func (SlsaProvenancePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SlsaProvenance)(nil)).Elem()
}

func (o SlsaProvenancePtrOutput) ToSlsaProvenancePtrOutput() SlsaProvenancePtrOutput {
	return o
}

func (o SlsaProvenancePtrOutput) ToSlsaProvenancePtrOutputWithContext(ctx context.Context) SlsaProvenancePtrOutput {
	return o
}

func (o SlsaProvenancePtrOutput) Elem() SlsaProvenanceOutput {
	return o.ApplyT(func(v *SlsaProvenance) SlsaProvenance {
		if v != nil {
			return *v
		}
		var ret SlsaProvenance
		return ret
	}).(SlsaProvenanceOutput)
}

// required
func (o SlsaProvenancePtrOutput) Builder() SlsaBuilderPtrOutput {
	return o.ApplyT(func(v *SlsaProvenance) *SlsaBuilder {
		if v == nil {
			return nil
		}
		return v.Builder
	}).(SlsaBuilderPtrOutput)
}

// The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.
func (o SlsaProvenancePtrOutput) Materials() MaterialArrayOutput {
	return o.ApplyT(func(v *SlsaProvenance) []Material {
		if v == nil {
			return nil
		}
		return v.Materials
	}).(MaterialArrayOutput)
}

func (o SlsaProvenancePtrOutput) Metadata() SlsaMetadataPtrOutput {
	return o.ApplyT(func(v *SlsaProvenance) *SlsaMetadata {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(SlsaMetadataPtrOutput)
}

// Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit identical output (if the build is reproducible). required
func (o SlsaProvenancePtrOutput) Recipe() SlsaRecipePtrOutput {
	return o.ApplyT(func(v *SlsaProvenance) *SlsaRecipe {
		if v == nil {
			return nil
		}
		return v.Recipe
	}).(SlsaRecipePtrOutput)
}

type SlsaProvenanceResponse struct {
	// required
	Builder SlsaBuilderResponse `pulumi:"builder"`
	// The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.
	Materials []MaterialResponse   `pulumi:"materials"`
	Metadata  SlsaMetadataResponse `pulumi:"metadata"`
	// Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit identical output (if the build is reproducible). required
	Recipe SlsaRecipeResponse `pulumi:"recipe"`
}

type SlsaProvenanceResponseOutput struct{ *pulumi.OutputState }

func (SlsaProvenanceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SlsaProvenanceResponse)(nil)).Elem()
}

func (o SlsaProvenanceResponseOutput) ToSlsaProvenanceResponseOutput() SlsaProvenanceResponseOutput {
	return o
}

func (o SlsaProvenanceResponseOutput) ToSlsaProvenanceResponseOutputWithContext(ctx context.Context) SlsaProvenanceResponseOutput {
	return o
}

// required
func (o SlsaProvenanceResponseOutput) Builder() SlsaBuilderResponseOutput {
	return o.ApplyT(func(v SlsaProvenanceResponse) SlsaBuilderResponse { return v.Builder }).(SlsaBuilderResponseOutput)
}

// The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.
func (o SlsaProvenanceResponseOutput) Materials() MaterialResponseArrayOutput {
	return o.ApplyT(func(v SlsaProvenanceResponse) []MaterialResponse { return v.Materials }).(MaterialResponseArrayOutput)
}

func (o SlsaProvenanceResponseOutput) Metadata() SlsaMetadataResponseOutput {
	return o.ApplyT(func(v SlsaProvenanceResponse) SlsaMetadataResponse { return v.Metadata }).(SlsaMetadataResponseOutput)
}

// Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit identical output (if the build is reproducible). required
func (o SlsaProvenanceResponseOutput) Recipe() SlsaRecipeResponseOutput {
	return o.ApplyT(func(v SlsaProvenanceResponse) SlsaRecipeResponse { return v.Recipe }).(SlsaRecipeResponseOutput)
}

// Keep in sync with schema at https://github.com/slsa-framework/slsa/blob/main/docs/provenance/schema/v1/provenance.proto Builder renamed to ProvenanceBuilder because of Java conflicts.
type SlsaProvenanceV1 struct {
	BuildDefinition *BuildDefinition `pulumi:"buildDefinition"`
	RunDetails      *RunDetails      `pulumi:"runDetails"`
}

// SlsaProvenanceV1Input is an input type that accepts SlsaProvenanceV1Args and SlsaProvenanceV1Output values.
// You can construct a concrete instance of `SlsaProvenanceV1Input` via:
//
//	SlsaProvenanceV1Args{...}
type SlsaProvenanceV1Input interface {
	pulumi.Input

	ToSlsaProvenanceV1Output() SlsaProvenanceV1Output
	ToSlsaProvenanceV1OutputWithContext(context.Context) SlsaProvenanceV1Output
}

// Keep in sync with schema at https://github.com/slsa-framework/slsa/blob/main/docs/provenance/schema/v1/provenance.proto Builder renamed to ProvenanceBuilder because of Java conflicts.
type SlsaProvenanceV1Args struct {
	BuildDefinition BuildDefinitionPtrInput `pulumi:"buildDefinition"`
	RunDetails      RunDetailsPtrInput      `pulumi:"runDetails"`
}

func (SlsaProvenanceV1Args) ElementType() reflect.Type {
	return reflect.TypeOf((*SlsaProvenanceV1)(nil)).Elem()
}

func (i SlsaProvenanceV1Args) ToSlsaProvenanceV1Output() SlsaProvenanceV1Output {
	return i.ToSlsaProvenanceV1OutputWithContext(context.Background())
}

func (i SlsaProvenanceV1Args) ToSlsaProvenanceV1OutputWithContext(ctx context.Context) SlsaProvenanceV1Output {
	return pulumi.ToOutputWithContext(ctx, i).(SlsaProvenanceV1Output)
}

func (i SlsaProvenanceV1Args) ToSlsaProvenanceV1PtrOutput() SlsaProvenanceV1PtrOutput {
	return i.ToSlsaProvenanceV1PtrOutputWithContext(context.Background())
}

func (i SlsaProvenanceV1Args) ToSlsaProvenanceV1PtrOutputWithContext(ctx context.Context) SlsaProvenanceV1PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlsaProvenanceV1Output).ToSlsaProvenanceV1PtrOutputWithContext(ctx)
}

// SlsaProvenanceV1PtrInput is an input type that accepts SlsaProvenanceV1Args, SlsaProvenanceV1Ptr and SlsaProvenanceV1PtrOutput values.
// You can construct a concrete instance of `SlsaProvenanceV1PtrInput` via:
//
//	        SlsaProvenanceV1Args{...}
//
//	or:
//
//	        nil
type SlsaProvenanceV1PtrInput interface {
	pulumi.Input

	ToSlsaProvenanceV1PtrOutput() SlsaProvenanceV1PtrOutput
	ToSlsaProvenanceV1PtrOutputWithContext(context.Context) SlsaProvenanceV1PtrOutput
}

type slsaProvenanceV1PtrType SlsaProvenanceV1Args

func SlsaProvenanceV1Ptr(v *SlsaProvenanceV1Args) SlsaProvenanceV1PtrInput {
	return (*slsaProvenanceV1PtrType)(v)
}

func (*slsaProvenanceV1PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SlsaProvenanceV1)(nil)).Elem()
}

func (i *slsaProvenanceV1PtrType) ToSlsaProvenanceV1PtrOutput() SlsaProvenanceV1PtrOutput {
	return i.ToSlsaProvenanceV1PtrOutputWithContext(context.Background())
}

func (i *slsaProvenanceV1PtrType) ToSlsaProvenanceV1PtrOutputWithContext(ctx context.Context) SlsaProvenanceV1PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlsaProvenanceV1PtrOutput)
}

// Keep in sync with schema at https://github.com/slsa-framework/slsa/blob/main/docs/provenance/schema/v1/provenance.proto Builder renamed to ProvenanceBuilder because of Java conflicts.
type SlsaProvenanceV1Output struct{ *pulumi.OutputState }

func (SlsaProvenanceV1Output) ElementType() reflect.Type {
	return reflect.TypeOf((*SlsaProvenanceV1)(nil)).Elem()
}

func (o SlsaProvenanceV1Output) ToSlsaProvenanceV1Output() SlsaProvenanceV1Output {
	return o
}

func (o SlsaProvenanceV1Output) ToSlsaProvenanceV1OutputWithContext(ctx context.Context) SlsaProvenanceV1Output {
	return o
}

func (o SlsaProvenanceV1Output) ToSlsaProvenanceV1PtrOutput() SlsaProvenanceV1PtrOutput {
	return o.ToSlsaProvenanceV1PtrOutputWithContext(context.Background())
}

func (o SlsaProvenanceV1Output) ToSlsaProvenanceV1PtrOutputWithContext(ctx context.Context) SlsaProvenanceV1PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SlsaProvenanceV1) *SlsaProvenanceV1 {
		return &v
	}).(SlsaProvenanceV1PtrOutput)
}

func (o SlsaProvenanceV1Output) BuildDefinition() BuildDefinitionPtrOutput {
	return o.ApplyT(func(v SlsaProvenanceV1) *BuildDefinition { return v.BuildDefinition }).(BuildDefinitionPtrOutput)
}

func (o SlsaProvenanceV1Output) RunDetails() RunDetailsPtrOutput {
	return o.ApplyT(func(v SlsaProvenanceV1) *RunDetails { return v.RunDetails }).(RunDetailsPtrOutput)
}

type SlsaProvenanceV1PtrOutput struct{ *pulumi.OutputState }

func (SlsaProvenanceV1PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SlsaProvenanceV1)(nil)).Elem()
}

func (o SlsaProvenanceV1PtrOutput) ToSlsaProvenanceV1PtrOutput() SlsaProvenanceV1PtrOutput {
	return o
}

func (o SlsaProvenanceV1PtrOutput) ToSlsaProvenanceV1PtrOutputWithContext(ctx context.Context) SlsaProvenanceV1PtrOutput {
	return o
}

func (o SlsaProvenanceV1PtrOutput) Elem() SlsaProvenanceV1Output {
	return o.ApplyT(func(v *SlsaProvenanceV1) SlsaProvenanceV1 {
		if v != nil {
			return *v
		}
		var ret SlsaProvenanceV1
		return ret
	}).(SlsaProvenanceV1Output)
}

func (o SlsaProvenanceV1PtrOutput) BuildDefinition() BuildDefinitionPtrOutput {
	return o.ApplyT(func(v *SlsaProvenanceV1) *BuildDefinition {
		if v == nil {
			return nil
		}
		return v.BuildDefinition
	}).(BuildDefinitionPtrOutput)
}

func (o SlsaProvenanceV1PtrOutput) RunDetails() RunDetailsPtrOutput {
	return o.ApplyT(func(v *SlsaProvenanceV1) *RunDetails {
		if v == nil {
			return nil
		}
		return v.RunDetails
	}).(RunDetailsPtrOutput)
}

// Keep in sync with schema at https://github.com/slsa-framework/slsa/blob/main/docs/provenance/schema/v1/provenance.proto Builder renamed to ProvenanceBuilder because of Java conflicts.
type SlsaProvenanceV1Response struct {
	BuildDefinition BuildDefinitionResponse `pulumi:"buildDefinition"`
	RunDetails      RunDetailsResponse      `pulumi:"runDetails"`
}

// Keep in sync with schema at https://github.com/slsa-framework/slsa/blob/main/docs/provenance/schema/v1/provenance.proto Builder renamed to ProvenanceBuilder because of Java conflicts.
type SlsaProvenanceV1ResponseOutput struct{ *pulumi.OutputState }

func (SlsaProvenanceV1ResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SlsaProvenanceV1Response)(nil)).Elem()
}

func (o SlsaProvenanceV1ResponseOutput) ToSlsaProvenanceV1ResponseOutput() SlsaProvenanceV1ResponseOutput {
	return o
}

func (o SlsaProvenanceV1ResponseOutput) ToSlsaProvenanceV1ResponseOutputWithContext(ctx context.Context) SlsaProvenanceV1ResponseOutput {
	return o
}

func (o SlsaProvenanceV1ResponseOutput) BuildDefinition() BuildDefinitionResponseOutput {
	return o.ApplyT(func(v SlsaProvenanceV1Response) BuildDefinitionResponse { return v.BuildDefinition }).(BuildDefinitionResponseOutput)
}

func (o SlsaProvenanceV1ResponseOutput) RunDetails() RunDetailsResponseOutput {
	return o.ApplyT(func(v SlsaProvenanceV1Response) RunDetailsResponse { return v.RunDetails }).(RunDetailsResponseOutput)
}

// See full explanation of fields at slsa.dev/provenance/v0.2.
type SlsaProvenanceZeroTwo struct {
	BuildConfig map[string]interface{}                        `pulumi:"buildConfig"`
	BuildType   *string                                       `pulumi:"buildType"`
	Builder     *GrafeasV1SlsaProvenanceZeroTwoSlsaBuilder    `pulumi:"builder"`
	Invocation  *GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation `pulumi:"invocation"`
	Materials   []GrafeasV1SlsaProvenanceZeroTwoSlsaMaterial  `pulumi:"materials"`
	Metadata    *GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata   `pulumi:"metadata"`
}

// SlsaProvenanceZeroTwoInput is an input type that accepts SlsaProvenanceZeroTwoArgs and SlsaProvenanceZeroTwoOutput values.
// You can construct a concrete instance of `SlsaProvenanceZeroTwoInput` via:
//
//	SlsaProvenanceZeroTwoArgs{...}
type SlsaProvenanceZeroTwoInput interface {
	pulumi.Input

	ToSlsaProvenanceZeroTwoOutput() SlsaProvenanceZeroTwoOutput
	ToSlsaProvenanceZeroTwoOutputWithContext(context.Context) SlsaProvenanceZeroTwoOutput
}

// See full explanation of fields at slsa.dev/provenance/v0.2.
type SlsaProvenanceZeroTwoArgs struct {
	BuildConfig pulumi.MapInput                                      `pulumi:"buildConfig"`
	BuildType   pulumi.StringPtrInput                                `pulumi:"buildType"`
	Builder     GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderPtrInput    `pulumi:"builder"`
	Invocation  GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationPtrInput `pulumi:"invocation"`
	Materials   GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialArrayInput `pulumi:"materials"`
	Metadata    GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataPtrInput   `pulumi:"metadata"`
}

func (SlsaProvenanceZeroTwoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SlsaProvenanceZeroTwo)(nil)).Elem()
}

func (i SlsaProvenanceZeroTwoArgs) ToSlsaProvenanceZeroTwoOutput() SlsaProvenanceZeroTwoOutput {
	return i.ToSlsaProvenanceZeroTwoOutputWithContext(context.Background())
}

func (i SlsaProvenanceZeroTwoArgs) ToSlsaProvenanceZeroTwoOutputWithContext(ctx context.Context) SlsaProvenanceZeroTwoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlsaProvenanceZeroTwoOutput)
}

func (i SlsaProvenanceZeroTwoArgs) ToSlsaProvenanceZeroTwoPtrOutput() SlsaProvenanceZeroTwoPtrOutput {
	return i.ToSlsaProvenanceZeroTwoPtrOutputWithContext(context.Background())
}

func (i SlsaProvenanceZeroTwoArgs) ToSlsaProvenanceZeroTwoPtrOutputWithContext(ctx context.Context) SlsaProvenanceZeroTwoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlsaProvenanceZeroTwoOutput).ToSlsaProvenanceZeroTwoPtrOutputWithContext(ctx)
}

// SlsaProvenanceZeroTwoPtrInput is an input type that accepts SlsaProvenanceZeroTwoArgs, SlsaProvenanceZeroTwoPtr and SlsaProvenanceZeroTwoPtrOutput values.
// You can construct a concrete instance of `SlsaProvenanceZeroTwoPtrInput` via:
//
//	        SlsaProvenanceZeroTwoArgs{...}
//
//	or:
//
//	        nil
type SlsaProvenanceZeroTwoPtrInput interface {
	pulumi.Input

	ToSlsaProvenanceZeroTwoPtrOutput() SlsaProvenanceZeroTwoPtrOutput
	ToSlsaProvenanceZeroTwoPtrOutputWithContext(context.Context) SlsaProvenanceZeroTwoPtrOutput
}

type slsaProvenanceZeroTwoPtrType SlsaProvenanceZeroTwoArgs

func SlsaProvenanceZeroTwoPtr(v *SlsaProvenanceZeroTwoArgs) SlsaProvenanceZeroTwoPtrInput {
	return (*slsaProvenanceZeroTwoPtrType)(v)
}

func (*slsaProvenanceZeroTwoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SlsaProvenanceZeroTwo)(nil)).Elem()
}

func (i *slsaProvenanceZeroTwoPtrType) ToSlsaProvenanceZeroTwoPtrOutput() SlsaProvenanceZeroTwoPtrOutput {
	return i.ToSlsaProvenanceZeroTwoPtrOutputWithContext(context.Background())
}

func (i *slsaProvenanceZeroTwoPtrType) ToSlsaProvenanceZeroTwoPtrOutputWithContext(ctx context.Context) SlsaProvenanceZeroTwoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlsaProvenanceZeroTwoPtrOutput)
}

// See full explanation of fields at slsa.dev/provenance/v0.2.
type SlsaProvenanceZeroTwoOutput struct{ *pulumi.OutputState }

func (SlsaProvenanceZeroTwoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SlsaProvenanceZeroTwo)(nil)).Elem()
}

func (o SlsaProvenanceZeroTwoOutput) ToSlsaProvenanceZeroTwoOutput() SlsaProvenanceZeroTwoOutput {
	return o
}

func (o SlsaProvenanceZeroTwoOutput) ToSlsaProvenanceZeroTwoOutputWithContext(ctx context.Context) SlsaProvenanceZeroTwoOutput {
	return o
}

func (o SlsaProvenanceZeroTwoOutput) ToSlsaProvenanceZeroTwoPtrOutput() SlsaProvenanceZeroTwoPtrOutput {
	return o.ToSlsaProvenanceZeroTwoPtrOutputWithContext(context.Background())
}

func (o SlsaProvenanceZeroTwoOutput) ToSlsaProvenanceZeroTwoPtrOutputWithContext(ctx context.Context) SlsaProvenanceZeroTwoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SlsaProvenanceZeroTwo) *SlsaProvenanceZeroTwo {
		return &v
	}).(SlsaProvenanceZeroTwoPtrOutput)
}

func (o SlsaProvenanceZeroTwoOutput) BuildConfig() pulumi.MapOutput {
	return o.ApplyT(func(v SlsaProvenanceZeroTwo) map[string]interface{} { return v.BuildConfig }).(pulumi.MapOutput)
}

func (o SlsaProvenanceZeroTwoOutput) BuildType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SlsaProvenanceZeroTwo) *string { return v.BuildType }).(pulumi.StringPtrOutput)
}

func (o SlsaProvenanceZeroTwoOutput) Builder() GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderPtrOutput {
	return o.ApplyT(func(v SlsaProvenanceZeroTwo) *GrafeasV1SlsaProvenanceZeroTwoSlsaBuilder { return v.Builder }).(GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderPtrOutput)
}

func (o SlsaProvenanceZeroTwoOutput) Invocation() GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationPtrOutput {
	return o.ApplyT(func(v SlsaProvenanceZeroTwo) *GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation { return v.Invocation }).(GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationPtrOutput)
}

func (o SlsaProvenanceZeroTwoOutput) Materials() GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialArrayOutput {
	return o.ApplyT(func(v SlsaProvenanceZeroTwo) []GrafeasV1SlsaProvenanceZeroTwoSlsaMaterial { return v.Materials }).(GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialArrayOutput)
}

func (o SlsaProvenanceZeroTwoOutput) Metadata() GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput {
	return o.ApplyT(func(v SlsaProvenanceZeroTwo) *GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata { return v.Metadata }).(GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput)
}

type SlsaProvenanceZeroTwoPtrOutput struct{ *pulumi.OutputState }

func (SlsaProvenanceZeroTwoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SlsaProvenanceZeroTwo)(nil)).Elem()
}

func (o SlsaProvenanceZeroTwoPtrOutput) ToSlsaProvenanceZeroTwoPtrOutput() SlsaProvenanceZeroTwoPtrOutput {
	return o
}

func (o SlsaProvenanceZeroTwoPtrOutput) ToSlsaProvenanceZeroTwoPtrOutputWithContext(ctx context.Context) SlsaProvenanceZeroTwoPtrOutput {
	return o
}

func (o SlsaProvenanceZeroTwoPtrOutput) Elem() SlsaProvenanceZeroTwoOutput {
	return o.ApplyT(func(v *SlsaProvenanceZeroTwo) SlsaProvenanceZeroTwo {
		if v != nil {
			return *v
		}
		var ret SlsaProvenanceZeroTwo
		return ret
	}).(SlsaProvenanceZeroTwoOutput)
}

func (o SlsaProvenanceZeroTwoPtrOutput) BuildConfig() pulumi.MapOutput {
	return o.ApplyT(func(v *SlsaProvenanceZeroTwo) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.BuildConfig
	}).(pulumi.MapOutput)
}

func (o SlsaProvenanceZeroTwoPtrOutput) BuildType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SlsaProvenanceZeroTwo) *string {
		if v == nil {
			return nil
		}
		return v.BuildType
	}).(pulumi.StringPtrOutput)
}

func (o SlsaProvenanceZeroTwoPtrOutput) Builder() GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderPtrOutput {
	return o.ApplyT(func(v *SlsaProvenanceZeroTwo) *GrafeasV1SlsaProvenanceZeroTwoSlsaBuilder {
		if v == nil {
			return nil
		}
		return v.Builder
	}).(GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderPtrOutput)
}

func (o SlsaProvenanceZeroTwoPtrOutput) Invocation() GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationPtrOutput {
	return o.ApplyT(func(v *SlsaProvenanceZeroTwo) *GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation {
		if v == nil {
			return nil
		}
		return v.Invocation
	}).(GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationPtrOutput)
}

func (o SlsaProvenanceZeroTwoPtrOutput) Materials() GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialArrayOutput {
	return o.ApplyT(func(v *SlsaProvenanceZeroTwo) []GrafeasV1SlsaProvenanceZeroTwoSlsaMaterial {
		if v == nil {
			return nil
		}
		return v.Materials
	}).(GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialArrayOutput)
}

func (o SlsaProvenanceZeroTwoPtrOutput) Metadata() GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput {
	return o.ApplyT(func(v *SlsaProvenanceZeroTwo) *GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput)
}

// See full explanation of fields at slsa.dev/provenance/v0.2.
type SlsaProvenanceZeroTwoResponse struct {
	BuildConfig map[string]interface{}                               `pulumi:"buildConfig"`
	BuildType   string                                               `pulumi:"buildType"`
	Builder     GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderResponse    `pulumi:"builder"`
	Invocation  GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationResponse `pulumi:"invocation"`
	Materials   []GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialResponse `pulumi:"materials"`
	Metadata    GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataResponse   `pulumi:"metadata"`
}

// See full explanation of fields at slsa.dev/provenance/v0.2.
type SlsaProvenanceZeroTwoResponseOutput struct{ *pulumi.OutputState }

func (SlsaProvenanceZeroTwoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SlsaProvenanceZeroTwoResponse)(nil)).Elem()
}

func (o SlsaProvenanceZeroTwoResponseOutput) ToSlsaProvenanceZeroTwoResponseOutput() SlsaProvenanceZeroTwoResponseOutput {
	return o
}

func (o SlsaProvenanceZeroTwoResponseOutput) ToSlsaProvenanceZeroTwoResponseOutputWithContext(ctx context.Context) SlsaProvenanceZeroTwoResponseOutput {
	return o
}

func (o SlsaProvenanceZeroTwoResponseOutput) BuildConfig() pulumi.MapOutput {
	return o.ApplyT(func(v SlsaProvenanceZeroTwoResponse) map[string]interface{} { return v.BuildConfig }).(pulumi.MapOutput)
}

func (o SlsaProvenanceZeroTwoResponseOutput) BuildType() pulumi.StringOutput {
	return o.ApplyT(func(v SlsaProvenanceZeroTwoResponse) string { return v.BuildType }).(pulumi.StringOutput)
}

func (o SlsaProvenanceZeroTwoResponseOutput) Builder() GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderResponseOutput {
	return o.ApplyT(func(v SlsaProvenanceZeroTwoResponse) GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderResponse {
		return v.Builder
	}).(GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderResponseOutput)
}

func (o SlsaProvenanceZeroTwoResponseOutput) Invocation() GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationResponseOutput {
	return o.ApplyT(func(v SlsaProvenanceZeroTwoResponse) GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationResponse {
		return v.Invocation
	}).(GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationResponseOutput)
}

func (o SlsaProvenanceZeroTwoResponseOutput) Materials() GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialResponseArrayOutput {
	return o.ApplyT(func(v SlsaProvenanceZeroTwoResponse) []GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialResponse {
		return v.Materials
	}).(GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialResponseArrayOutput)
}

func (o SlsaProvenanceZeroTwoResponseOutput) Metadata() GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataResponseOutput {
	return o.ApplyT(func(v SlsaProvenanceZeroTwoResponse) GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataResponse {
		return v.Metadata
	}).(GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataResponseOutput)
}

// Steps taken to build the artifact. For a TaskRun, typically each container corresponds to one step in the recipe.
type SlsaRecipe struct {
	// Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were "make", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint. Depending on the recipe Type, the structure may be different.
	Arguments map[string]interface{} `pulumi:"arguments"`
	// Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were "make", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as zero is default unset value for int64.
	DefinedInMaterial *string `pulumi:"definedInMaterial"`
	// String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were "make", then this would reference the directory in which to run make as well as which target to use.
	EntryPoint *string `pulumi:"entryPoint"`
	// Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy. Depending on the recipe Type, the structure may be different.
	Environment map[string]interface{} `pulumi:"environment"`
	// URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials.
	Type *string `pulumi:"type"`
}

// SlsaRecipeInput is an input type that accepts SlsaRecipeArgs and SlsaRecipeOutput values.
// You can construct a concrete instance of `SlsaRecipeInput` via:
//
//	SlsaRecipeArgs{...}
type SlsaRecipeInput interface {
	pulumi.Input

	ToSlsaRecipeOutput() SlsaRecipeOutput
	ToSlsaRecipeOutputWithContext(context.Context) SlsaRecipeOutput
}

// Steps taken to build the artifact. For a TaskRun, typically each container corresponds to one step in the recipe.
type SlsaRecipeArgs struct {
	// Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were "make", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint. Depending on the recipe Type, the structure may be different.
	Arguments pulumi.MapInput `pulumi:"arguments"`
	// Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were "make", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as zero is default unset value for int64.
	DefinedInMaterial pulumi.StringPtrInput `pulumi:"definedInMaterial"`
	// String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were "make", then this would reference the directory in which to run make as well as which target to use.
	EntryPoint pulumi.StringPtrInput `pulumi:"entryPoint"`
	// Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy. Depending on the recipe Type, the structure may be different.
	Environment pulumi.MapInput `pulumi:"environment"`
	// URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (SlsaRecipeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SlsaRecipe)(nil)).Elem()
}

func (i SlsaRecipeArgs) ToSlsaRecipeOutput() SlsaRecipeOutput {
	return i.ToSlsaRecipeOutputWithContext(context.Background())
}

func (i SlsaRecipeArgs) ToSlsaRecipeOutputWithContext(ctx context.Context) SlsaRecipeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlsaRecipeOutput)
}

func (i SlsaRecipeArgs) ToSlsaRecipePtrOutput() SlsaRecipePtrOutput {
	return i.ToSlsaRecipePtrOutputWithContext(context.Background())
}

func (i SlsaRecipeArgs) ToSlsaRecipePtrOutputWithContext(ctx context.Context) SlsaRecipePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlsaRecipeOutput).ToSlsaRecipePtrOutputWithContext(ctx)
}

// SlsaRecipePtrInput is an input type that accepts SlsaRecipeArgs, SlsaRecipePtr and SlsaRecipePtrOutput values.
// You can construct a concrete instance of `SlsaRecipePtrInput` via:
//
//	        SlsaRecipeArgs{...}
//
//	or:
//
//	        nil
type SlsaRecipePtrInput interface {
	pulumi.Input

	ToSlsaRecipePtrOutput() SlsaRecipePtrOutput
	ToSlsaRecipePtrOutputWithContext(context.Context) SlsaRecipePtrOutput
}

type slsaRecipePtrType SlsaRecipeArgs

func SlsaRecipePtr(v *SlsaRecipeArgs) SlsaRecipePtrInput {
	return (*slsaRecipePtrType)(v)
}

func (*slsaRecipePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SlsaRecipe)(nil)).Elem()
}

func (i *slsaRecipePtrType) ToSlsaRecipePtrOutput() SlsaRecipePtrOutput {
	return i.ToSlsaRecipePtrOutputWithContext(context.Background())
}

func (i *slsaRecipePtrType) ToSlsaRecipePtrOutputWithContext(ctx context.Context) SlsaRecipePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlsaRecipePtrOutput)
}

// Steps taken to build the artifact. For a TaskRun, typically each container corresponds to one step in the recipe.
type SlsaRecipeOutput struct{ *pulumi.OutputState }

func (SlsaRecipeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SlsaRecipe)(nil)).Elem()
}

func (o SlsaRecipeOutput) ToSlsaRecipeOutput() SlsaRecipeOutput {
	return o
}

func (o SlsaRecipeOutput) ToSlsaRecipeOutputWithContext(ctx context.Context) SlsaRecipeOutput {
	return o
}

func (o SlsaRecipeOutput) ToSlsaRecipePtrOutput() SlsaRecipePtrOutput {
	return o.ToSlsaRecipePtrOutputWithContext(context.Background())
}

func (o SlsaRecipeOutput) ToSlsaRecipePtrOutputWithContext(ctx context.Context) SlsaRecipePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SlsaRecipe) *SlsaRecipe {
		return &v
	}).(SlsaRecipePtrOutput)
}

// Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were "make", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint. Depending on the recipe Type, the structure may be different.
func (o SlsaRecipeOutput) Arguments() pulumi.MapOutput {
	return o.ApplyT(func(v SlsaRecipe) map[string]interface{} { return v.Arguments }).(pulumi.MapOutput)
}

// Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were "make", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as zero is default unset value for int64.
func (o SlsaRecipeOutput) DefinedInMaterial() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SlsaRecipe) *string { return v.DefinedInMaterial }).(pulumi.StringPtrOutput)
}

// String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were "make", then this would reference the directory in which to run make as well as which target to use.
func (o SlsaRecipeOutput) EntryPoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SlsaRecipe) *string { return v.EntryPoint }).(pulumi.StringPtrOutput)
}

// Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy. Depending on the recipe Type, the structure may be different.
func (o SlsaRecipeOutput) Environment() pulumi.MapOutput {
	return o.ApplyT(func(v SlsaRecipe) map[string]interface{} { return v.Environment }).(pulumi.MapOutput)
}

// URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials.
func (o SlsaRecipeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SlsaRecipe) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type SlsaRecipePtrOutput struct{ *pulumi.OutputState }

func (SlsaRecipePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SlsaRecipe)(nil)).Elem()
}

func (o SlsaRecipePtrOutput) ToSlsaRecipePtrOutput() SlsaRecipePtrOutput {
	return o
}

func (o SlsaRecipePtrOutput) ToSlsaRecipePtrOutputWithContext(ctx context.Context) SlsaRecipePtrOutput {
	return o
}

func (o SlsaRecipePtrOutput) Elem() SlsaRecipeOutput {
	return o.ApplyT(func(v *SlsaRecipe) SlsaRecipe {
		if v != nil {
			return *v
		}
		var ret SlsaRecipe
		return ret
	}).(SlsaRecipeOutput)
}

// Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were "make", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint. Depending on the recipe Type, the structure may be different.
func (o SlsaRecipePtrOutput) Arguments() pulumi.MapOutput {
	return o.ApplyT(func(v *SlsaRecipe) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Arguments
	}).(pulumi.MapOutput)
}

// Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were "make", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as zero is default unset value for int64.
func (o SlsaRecipePtrOutput) DefinedInMaterial() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SlsaRecipe) *string {
		if v == nil {
			return nil
		}
		return v.DefinedInMaterial
	}).(pulumi.StringPtrOutput)
}

// String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were "make", then this would reference the directory in which to run make as well as which target to use.
func (o SlsaRecipePtrOutput) EntryPoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SlsaRecipe) *string {
		if v == nil {
			return nil
		}
		return v.EntryPoint
	}).(pulumi.StringPtrOutput)
}

// Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy. Depending on the recipe Type, the structure may be different.
func (o SlsaRecipePtrOutput) Environment() pulumi.MapOutput {
	return o.ApplyT(func(v *SlsaRecipe) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Environment
	}).(pulumi.MapOutput)
}

// URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials.
func (o SlsaRecipePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SlsaRecipe) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Steps taken to build the artifact. For a TaskRun, typically each container corresponds to one step in the recipe.
type SlsaRecipeResponse struct {
	// Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were "make", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint. Depending on the recipe Type, the structure may be different.
	Arguments map[string]interface{} `pulumi:"arguments"`
	// Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were "make", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as zero is default unset value for int64.
	DefinedInMaterial string `pulumi:"definedInMaterial"`
	// String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were "make", then this would reference the directory in which to run make as well as which target to use.
	EntryPoint string `pulumi:"entryPoint"`
	// Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy. Depending on the recipe Type, the structure may be different.
	Environment map[string]interface{} `pulumi:"environment"`
	// URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials.
	Type string `pulumi:"type"`
}

// Steps taken to build the artifact. For a TaskRun, typically each container corresponds to one step in the recipe.
type SlsaRecipeResponseOutput struct{ *pulumi.OutputState }

func (SlsaRecipeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SlsaRecipeResponse)(nil)).Elem()
}

func (o SlsaRecipeResponseOutput) ToSlsaRecipeResponseOutput() SlsaRecipeResponseOutput {
	return o
}

func (o SlsaRecipeResponseOutput) ToSlsaRecipeResponseOutputWithContext(ctx context.Context) SlsaRecipeResponseOutput {
	return o
}

// Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were "make", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint. Depending on the recipe Type, the structure may be different.
func (o SlsaRecipeResponseOutput) Arguments() pulumi.MapOutput {
	return o.ApplyT(func(v SlsaRecipeResponse) map[string]interface{} { return v.Arguments }).(pulumi.MapOutput)
}

// Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were "make", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as zero is default unset value for int64.
func (o SlsaRecipeResponseOutput) DefinedInMaterial() pulumi.StringOutput {
	return o.ApplyT(func(v SlsaRecipeResponse) string { return v.DefinedInMaterial }).(pulumi.StringOutput)
}

// String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were "make", then this would reference the directory in which to run make as well as which target to use.
func (o SlsaRecipeResponseOutput) EntryPoint() pulumi.StringOutput {
	return o.ApplyT(func(v SlsaRecipeResponse) string { return v.EntryPoint }).(pulumi.StringOutput)
}

// Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy. Depending on the recipe Type, the structure may be different.
func (o SlsaRecipeResponseOutput) Environment() pulumi.MapOutput {
	return o.ApplyT(func(v SlsaRecipeResponse) map[string]interface{} { return v.Environment }).(pulumi.MapOutput)
}

// URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials.
func (o SlsaRecipeResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SlsaRecipeResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Source describes the location of the source used for the build.
type Source struct {
	// If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field.
	AdditionalContexts []SourceContext `pulumi:"additionalContexts"`
	// If provided, the input binary artifacts for the build came from this location.
	ArtifactStorageSourceUri *string `pulumi:"artifactStorageSourceUri"`
	// If provided, the source code used for the build came from this location.
	Context *SourceContext `pulumi:"context"`
	// Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file.
	FileHashes *FileHashes `pulumi:"fileHashes"`
}

// SourceInput is an input type that accepts SourceArgs and SourceOutput values.
// You can construct a concrete instance of `SourceInput` via:
//
//	SourceArgs{...}
type SourceInput interface {
	pulumi.Input

	ToSourceOutput() SourceOutput
	ToSourceOutputWithContext(context.Context) SourceOutput
}

// Source describes the location of the source used for the build.
type SourceArgs struct {
	// If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field.
	AdditionalContexts SourceContextArrayInput `pulumi:"additionalContexts"`
	// If provided, the input binary artifacts for the build came from this location.
	ArtifactStorageSourceUri pulumi.StringPtrInput `pulumi:"artifactStorageSourceUri"`
	// If provided, the source code used for the build came from this location.
	Context SourceContextPtrInput `pulumi:"context"`
	// Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file.
	FileHashes FileHashesPtrInput `pulumi:"fileHashes"`
}

func (SourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Source)(nil)).Elem()
}

func (i SourceArgs) ToSourceOutput() SourceOutput {
	return i.ToSourceOutputWithContext(context.Background())
}

func (i SourceArgs) ToSourceOutputWithContext(ctx context.Context) SourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceOutput)
}

func (i SourceArgs) ToSourcePtrOutput() SourcePtrOutput {
	return i.ToSourcePtrOutputWithContext(context.Background())
}

func (i SourceArgs) ToSourcePtrOutputWithContext(ctx context.Context) SourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceOutput).ToSourcePtrOutputWithContext(ctx)
}

// SourcePtrInput is an input type that accepts SourceArgs, SourcePtr and SourcePtrOutput values.
// You can construct a concrete instance of `SourcePtrInput` via:
//
//	        SourceArgs{...}
//
//	or:
//
//	        nil
type SourcePtrInput interface {
	pulumi.Input

	ToSourcePtrOutput() SourcePtrOutput
	ToSourcePtrOutputWithContext(context.Context) SourcePtrOutput
}

type sourcePtrType SourceArgs

func SourcePtr(v *SourceArgs) SourcePtrInput {
	return (*sourcePtrType)(v)
}

func (*sourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Source)(nil)).Elem()
}

func (i *sourcePtrType) ToSourcePtrOutput() SourcePtrOutput {
	return i.ToSourcePtrOutputWithContext(context.Background())
}

func (i *sourcePtrType) ToSourcePtrOutputWithContext(ctx context.Context) SourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourcePtrOutput)
}

// Source describes the location of the source used for the build.
type SourceOutput struct{ *pulumi.OutputState }

func (SourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Source)(nil)).Elem()
}

func (o SourceOutput) ToSourceOutput() SourceOutput {
	return o
}

func (o SourceOutput) ToSourceOutputWithContext(ctx context.Context) SourceOutput {
	return o
}

func (o SourceOutput) ToSourcePtrOutput() SourcePtrOutput {
	return o.ToSourcePtrOutputWithContext(context.Background())
}

func (o SourceOutput) ToSourcePtrOutputWithContext(ctx context.Context) SourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Source) *Source {
		return &v
	}).(SourcePtrOutput)
}

// If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field.
func (o SourceOutput) AdditionalContexts() SourceContextArrayOutput {
	return o.ApplyT(func(v Source) []SourceContext { return v.AdditionalContexts }).(SourceContextArrayOutput)
}

// If provided, the input binary artifacts for the build came from this location.
func (o SourceOutput) ArtifactStorageSourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Source) *string { return v.ArtifactStorageSourceUri }).(pulumi.StringPtrOutput)
}

// If provided, the source code used for the build came from this location.
func (o SourceOutput) Context() SourceContextPtrOutput {
	return o.ApplyT(func(v Source) *SourceContext { return v.Context }).(SourceContextPtrOutput)
}

// Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file.
func (o SourceOutput) FileHashes() FileHashesPtrOutput {
	return o.ApplyT(func(v Source) *FileHashes { return v.FileHashes }).(FileHashesPtrOutput)
}

type SourcePtrOutput struct{ *pulumi.OutputState }

func (SourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Source)(nil)).Elem()
}

func (o SourcePtrOutput) ToSourcePtrOutput() SourcePtrOutput {
	return o
}

func (o SourcePtrOutput) ToSourcePtrOutputWithContext(ctx context.Context) SourcePtrOutput {
	return o
}

func (o SourcePtrOutput) Elem() SourceOutput {
	return o.ApplyT(func(v *Source) Source {
		if v != nil {
			return *v
		}
		var ret Source
		return ret
	}).(SourceOutput)
}

// If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field.
func (o SourcePtrOutput) AdditionalContexts() SourceContextArrayOutput {
	return o.ApplyT(func(v *Source) []SourceContext {
		if v == nil {
			return nil
		}
		return v.AdditionalContexts
	}).(SourceContextArrayOutput)
}

// If provided, the input binary artifacts for the build came from this location.
func (o SourcePtrOutput) ArtifactStorageSourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Source) *string {
		if v == nil {
			return nil
		}
		return v.ArtifactStorageSourceUri
	}).(pulumi.StringPtrOutput)
}

// If provided, the source code used for the build came from this location.
func (o SourcePtrOutput) Context() SourceContextPtrOutput {
	return o.ApplyT(func(v *Source) *SourceContext {
		if v == nil {
			return nil
		}
		return v.Context
	}).(SourceContextPtrOutput)
}

// Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file.
func (o SourcePtrOutput) FileHashes() FileHashesPtrOutput {
	return o.ApplyT(func(v *Source) *FileHashes {
		if v == nil {
			return nil
		}
		return v.FileHashes
	}).(FileHashesPtrOutput)
}

// A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory.
type SourceContext struct {
	// A SourceContext referring to a revision in a Google Cloud Source Repo.
	CloudRepo *CloudRepoSourceContext `pulumi:"cloudRepo"`
	// A SourceContext referring to a Gerrit project.
	Gerrit *GerritSourceContext `pulumi:"gerrit"`
	// A SourceContext referring to any third party Git repo (e.g., GitHub).
	Git *GitSourceContext `pulumi:"git"`
	// Labels with user defined metadata.
	Labels map[string]string `pulumi:"labels"`
}

// SourceContextInput is an input type that accepts SourceContextArgs and SourceContextOutput values.
// You can construct a concrete instance of `SourceContextInput` via:
//
//	SourceContextArgs{...}
type SourceContextInput interface {
	pulumi.Input

	ToSourceContextOutput() SourceContextOutput
	ToSourceContextOutputWithContext(context.Context) SourceContextOutput
}

// A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory.
type SourceContextArgs struct {
	// A SourceContext referring to a revision in a Google Cloud Source Repo.
	CloudRepo CloudRepoSourceContextPtrInput `pulumi:"cloudRepo"`
	// A SourceContext referring to a Gerrit project.
	Gerrit GerritSourceContextPtrInput `pulumi:"gerrit"`
	// A SourceContext referring to any third party Git repo (e.g., GitHub).
	Git GitSourceContextPtrInput `pulumi:"git"`
	// Labels with user defined metadata.
	Labels pulumi.StringMapInput `pulumi:"labels"`
}

func (SourceContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceContext)(nil)).Elem()
}

func (i SourceContextArgs) ToSourceContextOutput() SourceContextOutput {
	return i.ToSourceContextOutputWithContext(context.Background())
}

func (i SourceContextArgs) ToSourceContextOutputWithContext(ctx context.Context) SourceContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceContextOutput)
}

func (i SourceContextArgs) ToSourceContextPtrOutput() SourceContextPtrOutput {
	return i.ToSourceContextPtrOutputWithContext(context.Background())
}

func (i SourceContextArgs) ToSourceContextPtrOutputWithContext(ctx context.Context) SourceContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceContextOutput).ToSourceContextPtrOutputWithContext(ctx)
}

// SourceContextPtrInput is an input type that accepts SourceContextArgs, SourceContextPtr and SourceContextPtrOutput values.
// You can construct a concrete instance of `SourceContextPtrInput` via:
//
//	        SourceContextArgs{...}
//
//	or:
//
//	        nil
type SourceContextPtrInput interface {
	pulumi.Input

	ToSourceContextPtrOutput() SourceContextPtrOutput
	ToSourceContextPtrOutputWithContext(context.Context) SourceContextPtrOutput
}

type sourceContextPtrType SourceContextArgs

func SourceContextPtr(v *SourceContextArgs) SourceContextPtrInput {
	return (*sourceContextPtrType)(v)
}

func (*sourceContextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceContext)(nil)).Elem()
}

func (i *sourceContextPtrType) ToSourceContextPtrOutput() SourceContextPtrOutput {
	return i.ToSourceContextPtrOutputWithContext(context.Background())
}

func (i *sourceContextPtrType) ToSourceContextPtrOutputWithContext(ctx context.Context) SourceContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceContextPtrOutput)
}

// SourceContextArrayInput is an input type that accepts SourceContextArray and SourceContextArrayOutput values.
// You can construct a concrete instance of `SourceContextArrayInput` via:
//
//	SourceContextArray{ SourceContextArgs{...} }
type SourceContextArrayInput interface {
	pulumi.Input

	ToSourceContextArrayOutput() SourceContextArrayOutput
	ToSourceContextArrayOutputWithContext(context.Context) SourceContextArrayOutput
}

type SourceContextArray []SourceContextInput

func (SourceContextArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SourceContext)(nil)).Elem()
}

func (i SourceContextArray) ToSourceContextArrayOutput() SourceContextArrayOutput {
	return i.ToSourceContextArrayOutputWithContext(context.Background())
}

func (i SourceContextArray) ToSourceContextArrayOutputWithContext(ctx context.Context) SourceContextArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceContextArrayOutput)
}

// A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory.
type SourceContextOutput struct{ *pulumi.OutputState }

func (SourceContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceContext)(nil)).Elem()
}

func (o SourceContextOutput) ToSourceContextOutput() SourceContextOutput {
	return o
}

func (o SourceContextOutput) ToSourceContextOutputWithContext(ctx context.Context) SourceContextOutput {
	return o
}

func (o SourceContextOutput) ToSourceContextPtrOutput() SourceContextPtrOutput {
	return o.ToSourceContextPtrOutputWithContext(context.Background())
}

func (o SourceContextOutput) ToSourceContextPtrOutputWithContext(ctx context.Context) SourceContextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SourceContext) *SourceContext {
		return &v
	}).(SourceContextPtrOutput)
}

// A SourceContext referring to a revision in a Google Cloud Source Repo.
func (o SourceContextOutput) CloudRepo() CloudRepoSourceContextPtrOutput {
	return o.ApplyT(func(v SourceContext) *CloudRepoSourceContext { return v.CloudRepo }).(CloudRepoSourceContextPtrOutput)
}

// A SourceContext referring to a Gerrit project.
func (o SourceContextOutput) Gerrit() GerritSourceContextPtrOutput {
	return o.ApplyT(func(v SourceContext) *GerritSourceContext { return v.Gerrit }).(GerritSourceContextPtrOutput)
}

// A SourceContext referring to any third party Git repo (e.g., GitHub).
func (o SourceContextOutput) Git() GitSourceContextPtrOutput {
	return o.ApplyT(func(v SourceContext) *GitSourceContext { return v.Git }).(GitSourceContextPtrOutput)
}

// Labels with user defined metadata.
func (o SourceContextOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v SourceContext) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

type SourceContextPtrOutput struct{ *pulumi.OutputState }

func (SourceContextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceContext)(nil)).Elem()
}

func (o SourceContextPtrOutput) ToSourceContextPtrOutput() SourceContextPtrOutput {
	return o
}

func (o SourceContextPtrOutput) ToSourceContextPtrOutputWithContext(ctx context.Context) SourceContextPtrOutput {
	return o
}

func (o SourceContextPtrOutput) Elem() SourceContextOutput {
	return o.ApplyT(func(v *SourceContext) SourceContext {
		if v != nil {
			return *v
		}
		var ret SourceContext
		return ret
	}).(SourceContextOutput)
}

// A SourceContext referring to a revision in a Google Cloud Source Repo.
func (o SourceContextPtrOutput) CloudRepo() CloudRepoSourceContextPtrOutput {
	return o.ApplyT(func(v *SourceContext) *CloudRepoSourceContext {
		if v == nil {
			return nil
		}
		return v.CloudRepo
	}).(CloudRepoSourceContextPtrOutput)
}

// A SourceContext referring to a Gerrit project.
func (o SourceContextPtrOutput) Gerrit() GerritSourceContextPtrOutput {
	return o.ApplyT(func(v *SourceContext) *GerritSourceContext {
		if v == nil {
			return nil
		}
		return v.Gerrit
	}).(GerritSourceContextPtrOutput)
}

// A SourceContext referring to any third party Git repo (e.g., GitHub).
func (o SourceContextPtrOutput) Git() GitSourceContextPtrOutput {
	return o.ApplyT(func(v *SourceContext) *GitSourceContext {
		if v == nil {
			return nil
		}
		return v.Git
	}).(GitSourceContextPtrOutput)
}

// Labels with user defined metadata.
func (o SourceContextPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SourceContext) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

type SourceContextArrayOutput struct{ *pulumi.OutputState }

func (SourceContextArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SourceContext)(nil)).Elem()
}

func (o SourceContextArrayOutput) ToSourceContextArrayOutput() SourceContextArrayOutput {
	return o
}

func (o SourceContextArrayOutput) ToSourceContextArrayOutputWithContext(ctx context.Context) SourceContextArrayOutput {
	return o
}

func (o SourceContextArrayOutput) Index(i pulumi.IntInput) SourceContextOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SourceContext {
		return vs[0].([]SourceContext)[vs[1].(int)]
	}).(SourceContextOutput)
}

// A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory.
type SourceContextResponse struct {
	// A SourceContext referring to a revision in a Google Cloud Source Repo.
	CloudRepo CloudRepoSourceContextResponse `pulumi:"cloudRepo"`
	// A SourceContext referring to a Gerrit project.
	Gerrit GerritSourceContextResponse `pulumi:"gerrit"`
	// A SourceContext referring to any third party Git repo (e.g., GitHub).
	Git GitSourceContextResponse `pulumi:"git"`
	// Labels with user defined metadata.
	Labels map[string]string `pulumi:"labels"`
}

// A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory.
type SourceContextResponseOutput struct{ *pulumi.OutputState }

func (SourceContextResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceContextResponse)(nil)).Elem()
}

func (o SourceContextResponseOutput) ToSourceContextResponseOutput() SourceContextResponseOutput {
	return o
}

func (o SourceContextResponseOutput) ToSourceContextResponseOutputWithContext(ctx context.Context) SourceContextResponseOutput {
	return o
}

// A SourceContext referring to a revision in a Google Cloud Source Repo.
func (o SourceContextResponseOutput) CloudRepo() CloudRepoSourceContextResponseOutput {
	return o.ApplyT(func(v SourceContextResponse) CloudRepoSourceContextResponse { return v.CloudRepo }).(CloudRepoSourceContextResponseOutput)
}

// A SourceContext referring to a Gerrit project.
func (o SourceContextResponseOutput) Gerrit() GerritSourceContextResponseOutput {
	return o.ApplyT(func(v SourceContextResponse) GerritSourceContextResponse { return v.Gerrit }).(GerritSourceContextResponseOutput)
}

// A SourceContext referring to any third party Git repo (e.g., GitHub).
func (o SourceContextResponseOutput) Git() GitSourceContextResponseOutput {
	return o.ApplyT(func(v SourceContextResponse) GitSourceContextResponse { return v.Git }).(GitSourceContextResponseOutput)
}

// Labels with user defined metadata.
func (o SourceContextResponseOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v SourceContextResponse) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

type SourceContextResponseArrayOutput struct{ *pulumi.OutputState }

func (SourceContextResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SourceContextResponse)(nil)).Elem()
}

func (o SourceContextResponseArrayOutput) ToSourceContextResponseArrayOutput() SourceContextResponseArrayOutput {
	return o
}

func (o SourceContextResponseArrayOutput) ToSourceContextResponseArrayOutputWithContext(ctx context.Context) SourceContextResponseArrayOutput {
	return o
}

func (o SourceContextResponseArrayOutput) Index(i pulumi.IntInput) SourceContextResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SourceContextResponse {
		return vs[0].([]SourceContextResponse)[vs[1].(int)]
	}).(SourceContextResponseOutput)
}

// Source describes the location of the source used for the build.
type SourceResponse struct {
	// If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field.
	AdditionalContexts []SourceContextResponse `pulumi:"additionalContexts"`
	// If provided, the input binary artifacts for the build came from this location.
	ArtifactStorageSourceUri string `pulumi:"artifactStorageSourceUri"`
	// If provided, the source code used for the build came from this location.
	Context SourceContextResponse `pulumi:"context"`
	// Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file.
	FileHashes FileHashesResponse `pulumi:"fileHashes"`
}

// Source describes the location of the source used for the build.
type SourceResponseOutput struct{ *pulumi.OutputState }

func (SourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceResponse)(nil)).Elem()
}

func (o SourceResponseOutput) ToSourceResponseOutput() SourceResponseOutput {
	return o
}

func (o SourceResponseOutput) ToSourceResponseOutputWithContext(ctx context.Context) SourceResponseOutput {
	return o
}

// If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field.
func (o SourceResponseOutput) AdditionalContexts() SourceContextResponseArrayOutput {
	return o.ApplyT(func(v SourceResponse) []SourceContextResponse { return v.AdditionalContexts }).(SourceContextResponseArrayOutput)
}

// If provided, the input binary artifacts for the build came from this location.
func (o SourceResponseOutput) ArtifactStorageSourceUri() pulumi.StringOutput {
	return o.ApplyT(func(v SourceResponse) string { return v.ArtifactStorageSourceUri }).(pulumi.StringOutput)
}

// If provided, the source code used for the build came from this location.
func (o SourceResponseOutput) Context() SourceContextResponseOutput {
	return o.ApplyT(func(v SourceResponse) SourceContextResponse { return v.Context }).(SourceContextResponseOutput)
}

// Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file.
func (o SourceResponseOutput) FileHashes() FileHashesResponseOutput {
	return o.ApplyT(func(v SourceResponse) FileHashesResponse { return v.FileHashes }).(FileHashesResponseOutput)
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type Status struct {
	// The status code, which should be an enum value of google.rpc.Code.
	Code *int `pulumi:"code"`
	// A list of messages that carry the error details. There is a common set of message types for APIs to use.
	Details []map[string]interface{} `pulumi:"details"`
	// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
	Message *string `pulumi:"message"`
}

// StatusInput is an input type that accepts StatusArgs and StatusOutput values.
// You can construct a concrete instance of `StatusInput` via:
//
//	StatusArgs{...}
type StatusInput interface {
	pulumi.Input

	ToStatusOutput() StatusOutput
	ToStatusOutputWithContext(context.Context) StatusOutput
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type StatusArgs struct {
	// The status code, which should be an enum value of google.rpc.Code.
	Code pulumi.IntPtrInput `pulumi:"code"`
	// A list of messages that carry the error details. There is a common set of message types for APIs to use.
	Details pulumi.MapArrayInput `pulumi:"details"`
	// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
	Message pulumi.StringPtrInput `pulumi:"message"`
}

func (StatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Status)(nil)).Elem()
}

func (i StatusArgs) ToStatusOutput() StatusOutput {
	return i.ToStatusOutputWithContext(context.Background())
}

func (i StatusArgs) ToStatusOutputWithContext(ctx context.Context) StatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusOutput)
}

func (i StatusArgs) ToStatusPtrOutput() StatusPtrOutput {
	return i.ToStatusPtrOutputWithContext(context.Background())
}

func (i StatusArgs) ToStatusPtrOutputWithContext(ctx context.Context) StatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusOutput).ToStatusPtrOutputWithContext(ctx)
}

// StatusPtrInput is an input type that accepts StatusArgs, StatusPtr and StatusPtrOutput values.
// You can construct a concrete instance of `StatusPtrInput` via:
//
//	        StatusArgs{...}
//
//	or:
//
//	        nil
type StatusPtrInput interface {
	pulumi.Input

	ToStatusPtrOutput() StatusPtrOutput
	ToStatusPtrOutputWithContext(context.Context) StatusPtrOutput
}

type statusPtrType StatusArgs

func StatusPtr(v *StatusArgs) StatusPtrInput {
	return (*statusPtrType)(v)
}

func (*statusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Status)(nil)).Elem()
}

func (i *statusPtrType) ToStatusPtrOutput() StatusPtrOutput {
	return i.ToStatusPtrOutputWithContext(context.Background())
}

func (i *statusPtrType) ToStatusPtrOutputWithContext(ctx context.Context) StatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusPtrOutput)
}

// StatusArrayInput is an input type that accepts StatusArray and StatusArrayOutput values.
// You can construct a concrete instance of `StatusArrayInput` via:
//
//	StatusArray{ StatusArgs{...} }
type StatusArrayInput interface {
	pulumi.Input

	ToStatusArrayOutput() StatusArrayOutput
	ToStatusArrayOutputWithContext(context.Context) StatusArrayOutput
}

type StatusArray []StatusInput

func (StatusArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Status)(nil)).Elem()
}

func (i StatusArray) ToStatusArrayOutput() StatusArrayOutput {
	return i.ToStatusArrayOutputWithContext(context.Background())
}

func (i StatusArray) ToStatusArrayOutputWithContext(ctx context.Context) StatusArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusArrayOutput)
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type StatusOutput struct{ *pulumi.OutputState }

func (StatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Status)(nil)).Elem()
}

func (o StatusOutput) ToStatusOutput() StatusOutput {
	return o
}

func (o StatusOutput) ToStatusOutputWithContext(ctx context.Context) StatusOutput {
	return o
}

func (o StatusOutput) ToStatusPtrOutput() StatusPtrOutput {
	return o.ToStatusPtrOutputWithContext(context.Background())
}

func (o StatusOutput) ToStatusPtrOutputWithContext(ctx context.Context) StatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Status) *Status {
		return &v
	}).(StatusPtrOutput)
}

// The status code, which should be an enum value of google.rpc.Code.
func (o StatusOutput) Code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Status) *int { return v.Code }).(pulumi.IntPtrOutput)
}

// A list of messages that carry the error details. There is a common set of message types for APIs to use.
func (o StatusOutput) Details() pulumi.MapArrayOutput {
	return o.ApplyT(func(v Status) []map[string]interface{} { return v.Details }).(pulumi.MapArrayOutput)
}

// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
func (o StatusOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Status) *string { return v.Message }).(pulumi.StringPtrOutput)
}

type StatusPtrOutput struct{ *pulumi.OutputState }

func (StatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Status)(nil)).Elem()
}

func (o StatusPtrOutput) ToStatusPtrOutput() StatusPtrOutput {
	return o
}

func (o StatusPtrOutput) ToStatusPtrOutputWithContext(ctx context.Context) StatusPtrOutput {
	return o
}

func (o StatusPtrOutput) Elem() StatusOutput {
	return o.ApplyT(func(v *Status) Status {
		if v != nil {
			return *v
		}
		var ret Status
		return ret
	}).(StatusOutput)
}

// The status code, which should be an enum value of google.rpc.Code.
func (o StatusPtrOutput) Code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Status) *int {
		if v == nil {
			return nil
		}
		return v.Code
	}).(pulumi.IntPtrOutput)
}

// A list of messages that carry the error details. There is a common set of message types for APIs to use.
func (o StatusPtrOutput) Details() pulumi.MapArrayOutput {
	return o.ApplyT(func(v *Status) []map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Details
	}).(pulumi.MapArrayOutput)
}

// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
func (o StatusPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Status) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

type StatusArrayOutput struct{ *pulumi.OutputState }

func (StatusArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Status)(nil)).Elem()
}

func (o StatusArrayOutput) ToStatusArrayOutput() StatusArrayOutput {
	return o
}

func (o StatusArrayOutput) ToStatusArrayOutputWithContext(ctx context.Context) StatusArrayOutput {
	return o
}

func (o StatusArrayOutput) Index(i pulumi.IntInput) StatusOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Status {
		return vs[0].([]Status)[vs[1].(int)]
	}).(StatusOutput)
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type StatusResponse struct {
	// The status code, which should be an enum value of google.rpc.Code.
	Code int `pulumi:"code"`
	// A list of messages that carry the error details. There is a common set of message types for APIs to use.
	Details []map[string]interface{} `pulumi:"details"`
	// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
	Message string `pulumi:"message"`
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type StatusResponseOutput struct{ *pulumi.OutputState }

func (StatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusResponse)(nil)).Elem()
}

func (o StatusResponseOutput) ToStatusResponseOutput() StatusResponseOutput {
	return o
}

func (o StatusResponseOutput) ToStatusResponseOutputWithContext(ctx context.Context) StatusResponseOutput {
	return o
}

// The status code, which should be an enum value of google.rpc.Code.
func (o StatusResponseOutput) Code() pulumi.IntOutput {
	return o.ApplyT(func(v StatusResponse) int { return v.Code }).(pulumi.IntOutput)
}

// A list of messages that carry the error details. There is a common set of message types for APIs to use.
func (o StatusResponseOutput) Details() pulumi.MapArrayOutput {
	return o.ApplyT(func(v StatusResponse) []map[string]interface{} { return v.Details }).(pulumi.MapArrayOutput)
}

// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
func (o StatusResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v StatusResponse) string { return v.Message }).(pulumi.StringOutput)
}

type StatusResponseArrayOutput struct{ *pulumi.OutputState }

func (StatusResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StatusResponse)(nil)).Elem()
}

func (o StatusResponseArrayOutput) ToStatusResponseArrayOutput() StatusResponseArrayOutput {
	return o
}

func (o StatusResponseArrayOutput) ToStatusResponseArrayOutputWithContext(ctx context.Context) StatusResponseArrayOutput {
	return o
}

func (o StatusResponseArrayOutput) Index(i pulumi.IntInput) StatusResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StatusResponse {
		return vs[0].([]StatusResponse)[vs[1].(int)]
	}).(StatusResponseOutput)
}

type Subject struct {
	// `"": ""` Algorithms can be e.g. sha256, sha512 See https://github.com/in-toto/attestation/blob/main/spec/field_types.md#DigestSet
	Digest map[string]string `pulumi:"digest"`
	Name   *string           `pulumi:"name"`
}

// SubjectInput is an input type that accepts SubjectArgs and SubjectOutput values.
// You can construct a concrete instance of `SubjectInput` via:
//
//	SubjectArgs{...}
type SubjectInput interface {
	pulumi.Input

	ToSubjectOutput() SubjectOutput
	ToSubjectOutputWithContext(context.Context) SubjectOutput
}

type SubjectArgs struct {
	// `"": ""` Algorithms can be e.g. sha256, sha512 See https://github.com/in-toto/attestation/blob/main/spec/field_types.md#DigestSet
	Digest pulumi.StringMapInput `pulumi:"digest"`
	Name   pulumi.StringPtrInput `pulumi:"name"`
}

func (SubjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Subject)(nil)).Elem()
}

func (i SubjectArgs) ToSubjectOutput() SubjectOutput {
	return i.ToSubjectOutputWithContext(context.Background())
}

func (i SubjectArgs) ToSubjectOutputWithContext(ctx context.Context) SubjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectOutput)
}

// SubjectArrayInput is an input type that accepts SubjectArray and SubjectArrayOutput values.
// You can construct a concrete instance of `SubjectArrayInput` via:
//
//	SubjectArray{ SubjectArgs{...} }
type SubjectArrayInput interface {
	pulumi.Input

	ToSubjectArrayOutput() SubjectArrayOutput
	ToSubjectArrayOutputWithContext(context.Context) SubjectArrayOutput
}

type SubjectArray []SubjectInput

func (SubjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Subject)(nil)).Elem()
}

func (i SubjectArray) ToSubjectArrayOutput() SubjectArrayOutput {
	return i.ToSubjectArrayOutputWithContext(context.Background())
}

func (i SubjectArray) ToSubjectArrayOutputWithContext(ctx context.Context) SubjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectArrayOutput)
}

type SubjectOutput struct{ *pulumi.OutputState }

func (SubjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Subject)(nil)).Elem()
}

func (o SubjectOutput) ToSubjectOutput() SubjectOutput {
	return o
}

func (o SubjectOutput) ToSubjectOutputWithContext(ctx context.Context) SubjectOutput {
	return o
}

// `"": ""` Algorithms can be e.g. sha256, sha512 See https://github.com/in-toto/attestation/blob/main/spec/field_types.md#DigestSet
func (o SubjectOutput) Digest() pulumi.StringMapOutput {
	return o.ApplyT(func(v Subject) map[string]string { return v.Digest }).(pulumi.StringMapOutput)
}

func (o SubjectOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Subject) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type SubjectArrayOutput struct{ *pulumi.OutputState }

func (SubjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Subject)(nil)).Elem()
}

func (o SubjectArrayOutput) ToSubjectArrayOutput() SubjectArrayOutput {
	return o
}

func (o SubjectArrayOutput) ToSubjectArrayOutputWithContext(ctx context.Context) SubjectArrayOutput {
	return o
}

func (o SubjectArrayOutput) Index(i pulumi.IntInput) SubjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Subject {
		return vs[0].([]Subject)[vs[1].(int)]
	}).(SubjectOutput)
}

type SubjectResponse struct {
	// `"": ""` Algorithms can be e.g. sha256, sha512 See https://github.com/in-toto/attestation/blob/main/spec/field_types.md#DigestSet
	Digest map[string]string `pulumi:"digest"`
	Name   string            `pulumi:"name"`
}

type SubjectResponseOutput struct{ *pulumi.OutputState }

func (SubjectResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubjectResponse)(nil)).Elem()
}

func (o SubjectResponseOutput) ToSubjectResponseOutput() SubjectResponseOutput {
	return o
}

func (o SubjectResponseOutput) ToSubjectResponseOutputWithContext(ctx context.Context) SubjectResponseOutput {
	return o
}

// `"": ""` Algorithms can be e.g. sha256, sha512 See https://github.com/in-toto/attestation/blob/main/spec/field_types.md#DigestSet
func (o SubjectResponseOutput) Digest() pulumi.StringMapOutput {
	return o.ApplyT(func(v SubjectResponse) map[string]string { return v.Digest }).(pulumi.StringMapOutput)
}

func (o SubjectResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SubjectResponse) string { return v.Name }).(pulumi.StringOutput)
}

type SubjectResponseArrayOutput struct{ *pulumi.OutputState }

func (SubjectResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubjectResponse)(nil)).Elem()
}

func (o SubjectResponseArrayOutput) ToSubjectResponseArrayOutput() SubjectResponseArrayOutput {
	return o
}

func (o SubjectResponseArrayOutput) ToSubjectResponseArrayOutputWithContext(ctx context.Context) SubjectResponseArrayOutput {
	return o
}

func (o SubjectResponseArrayOutput) Index(i pulumi.IntInput) SubjectResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SubjectResponse {
		return vs[0].([]SubjectResponse)[vs[1].(int)]
	}).(SubjectResponseOutput)
}

// The Upgrade Distribution represents metadata about the Upgrade for each operating system (CPE). Some distributions have additional metadata around updates, classifying them into various categories and severities.
type UpgradeDistribution struct {
	// The operating system classification of this Upgrade, as specified by the upstream operating system upgrade feed. For Windows the classification is one of the category_ids listed at https://docs.microsoft.com/en-us/previous-versions/windows/desktop/ff357803(v=vs.85)
	Classification *string `pulumi:"classification"`
	// Required - The specific operating system this metadata applies to. See https://cpe.mitre.org/specification/.
	CpeUri *string `pulumi:"cpeUri"`
	// The cve tied to this Upgrade.
	Cve []string `pulumi:"cve"`
	// The severity as specified by the upstream operating system.
	Severity *string `pulumi:"severity"`
}

// UpgradeDistributionInput is an input type that accepts UpgradeDistributionArgs and UpgradeDistributionOutput values.
// You can construct a concrete instance of `UpgradeDistributionInput` via:
//
//	UpgradeDistributionArgs{...}
type UpgradeDistributionInput interface {
	pulumi.Input

	ToUpgradeDistributionOutput() UpgradeDistributionOutput
	ToUpgradeDistributionOutputWithContext(context.Context) UpgradeDistributionOutput
}

// The Upgrade Distribution represents metadata about the Upgrade for each operating system (CPE). Some distributions have additional metadata around updates, classifying them into various categories and severities.
type UpgradeDistributionArgs struct {
	// The operating system classification of this Upgrade, as specified by the upstream operating system upgrade feed. For Windows the classification is one of the category_ids listed at https://docs.microsoft.com/en-us/previous-versions/windows/desktop/ff357803(v=vs.85)
	Classification pulumi.StringPtrInput `pulumi:"classification"`
	// Required - The specific operating system this metadata applies to. See https://cpe.mitre.org/specification/.
	CpeUri pulumi.StringPtrInput `pulumi:"cpeUri"`
	// The cve tied to this Upgrade.
	Cve pulumi.StringArrayInput `pulumi:"cve"`
	// The severity as specified by the upstream operating system.
	Severity pulumi.StringPtrInput `pulumi:"severity"`
}

func (UpgradeDistributionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UpgradeDistribution)(nil)).Elem()
}

func (i UpgradeDistributionArgs) ToUpgradeDistributionOutput() UpgradeDistributionOutput {
	return i.ToUpgradeDistributionOutputWithContext(context.Background())
}

func (i UpgradeDistributionArgs) ToUpgradeDistributionOutputWithContext(ctx context.Context) UpgradeDistributionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradeDistributionOutput)
}

func (i UpgradeDistributionArgs) ToUpgradeDistributionPtrOutput() UpgradeDistributionPtrOutput {
	return i.ToUpgradeDistributionPtrOutputWithContext(context.Background())
}

func (i UpgradeDistributionArgs) ToUpgradeDistributionPtrOutputWithContext(ctx context.Context) UpgradeDistributionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradeDistributionOutput).ToUpgradeDistributionPtrOutputWithContext(ctx)
}

// UpgradeDistributionPtrInput is an input type that accepts UpgradeDistributionArgs, UpgradeDistributionPtr and UpgradeDistributionPtrOutput values.
// You can construct a concrete instance of `UpgradeDistributionPtrInput` via:
//
//	        UpgradeDistributionArgs{...}
//
//	or:
//
//	        nil
type UpgradeDistributionPtrInput interface {
	pulumi.Input

	ToUpgradeDistributionPtrOutput() UpgradeDistributionPtrOutput
	ToUpgradeDistributionPtrOutputWithContext(context.Context) UpgradeDistributionPtrOutput
}

type upgradeDistributionPtrType UpgradeDistributionArgs

func UpgradeDistributionPtr(v *UpgradeDistributionArgs) UpgradeDistributionPtrInput {
	return (*upgradeDistributionPtrType)(v)
}

func (*upgradeDistributionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UpgradeDistribution)(nil)).Elem()
}

func (i *upgradeDistributionPtrType) ToUpgradeDistributionPtrOutput() UpgradeDistributionPtrOutput {
	return i.ToUpgradeDistributionPtrOutputWithContext(context.Background())
}

func (i *upgradeDistributionPtrType) ToUpgradeDistributionPtrOutputWithContext(ctx context.Context) UpgradeDistributionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradeDistributionPtrOutput)
}

// UpgradeDistributionArrayInput is an input type that accepts UpgradeDistributionArray and UpgradeDistributionArrayOutput values.
// You can construct a concrete instance of `UpgradeDistributionArrayInput` via:
//
//	UpgradeDistributionArray{ UpgradeDistributionArgs{...} }
type UpgradeDistributionArrayInput interface {
	pulumi.Input

	ToUpgradeDistributionArrayOutput() UpgradeDistributionArrayOutput
	ToUpgradeDistributionArrayOutputWithContext(context.Context) UpgradeDistributionArrayOutput
}

type UpgradeDistributionArray []UpgradeDistributionInput

func (UpgradeDistributionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UpgradeDistribution)(nil)).Elem()
}

func (i UpgradeDistributionArray) ToUpgradeDistributionArrayOutput() UpgradeDistributionArrayOutput {
	return i.ToUpgradeDistributionArrayOutputWithContext(context.Background())
}

func (i UpgradeDistributionArray) ToUpgradeDistributionArrayOutputWithContext(ctx context.Context) UpgradeDistributionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradeDistributionArrayOutput)
}

// The Upgrade Distribution represents metadata about the Upgrade for each operating system (CPE). Some distributions have additional metadata around updates, classifying them into various categories and severities.
type UpgradeDistributionOutput struct{ *pulumi.OutputState }

func (UpgradeDistributionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpgradeDistribution)(nil)).Elem()
}

func (o UpgradeDistributionOutput) ToUpgradeDistributionOutput() UpgradeDistributionOutput {
	return o
}

func (o UpgradeDistributionOutput) ToUpgradeDistributionOutputWithContext(ctx context.Context) UpgradeDistributionOutput {
	return o
}

func (o UpgradeDistributionOutput) ToUpgradeDistributionPtrOutput() UpgradeDistributionPtrOutput {
	return o.ToUpgradeDistributionPtrOutputWithContext(context.Background())
}

func (o UpgradeDistributionOutput) ToUpgradeDistributionPtrOutputWithContext(ctx context.Context) UpgradeDistributionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UpgradeDistribution) *UpgradeDistribution {
		return &v
	}).(UpgradeDistributionPtrOutput)
}

// The operating system classification of this Upgrade, as specified by the upstream operating system upgrade feed. For Windows the classification is one of the category_ids listed at https://docs.microsoft.com/en-us/previous-versions/windows/desktop/ff357803(v=vs.85)
func (o UpgradeDistributionOutput) Classification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpgradeDistribution) *string { return v.Classification }).(pulumi.StringPtrOutput)
}

// Required - The specific operating system this metadata applies to. See https://cpe.mitre.org/specification/.
func (o UpgradeDistributionOutput) CpeUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpgradeDistribution) *string { return v.CpeUri }).(pulumi.StringPtrOutput)
}

// The cve tied to this Upgrade.
func (o UpgradeDistributionOutput) Cve() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UpgradeDistribution) []string { return v.Cve }).(pulumi.StringArrayOutput)
}

// The severity as specified by the upstream operating system.
func (o UpgradeDistributionOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpgradeDistribution) *string { return v.Severity }).(pulumi.StringPtrOutput)
}

type UpgradeDistributionPtrOutput struct{ *pulumi.OutputState }

func (UpgradeDistributionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UpgradeDistribution)(nil)).Elem()
}

func (o UpgradeDistributionPtrOutput) ToUpgradeDistributionPtrOutput() UpgradeDistributionPtrOutput {
	return o
}

func (o UpgradeDistributionPtrOutput) ToUpgradeDistributionPtrOutputWithContext(ctx context.Context) UpgradeDistributionPtrOutput {
	return o
}

func (o UpgradeDistributionPtrOutput) Elem() UpgradeDistributionOutput {
	return o.ApplyT(func(v *UpgradeDistribution) UpgradeDistribution {
		if v != nil {
			return *v
		}
		var ret UpgradeDistribution
		return ret
	}).(UpgradeDistributionOutput)
}

// The operating system classification of this Upgrade, as specified by the upstream operating system upgrade feed. For Windows the classification is one of the category_ids listed at https://docs.microsoft.com/en-us/previous-versions/windows/desktop/ff357803(v=vs.85)
func (o UpgradeDistributionPtrOutput) Classification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UpgradeDistribution) *string {
		if v == nil {
			return nil
		}
		return v.Classification
	}).(pulumi.StringPtrOutput)
}

// Required - The specific operating system this metadata applies to. See https://cpe.mitre.org/specification/.
func (o UpgradeDistributionPtrOutput) CpeUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UpgradeDistribution) *string {
		if v == nil {
			return nil
		}
		return v.CpeUri
	}).(pulumi.StringPtrOutput)
}

// The cve tied to this Upgrade.
func (o UpgradeDistributionPtrOutput) Cve() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *UpgradeDistribution) []string {
		if v == nil {
			return nil
		}
		return v.Cve
	}).(pulumi.StringArrayOutput)
}

// The severity as specified by the upstream operating system.
func (o UpgradeDistributionPtrOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UpgradeDistribution) *string {
		if v == nil {
			return nil
		}
		return v.Severity
	}).(pulumi.StringPtrOutput)
}

type UpgradeDistributionArrayOutput struct{ *pulumi.OutputState }

func (UpgradeDistributionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UpgradeDistribution)(nil)).Elem()
}

func (o UpgradeDistributionArrayOutput) ToUpgradeDistributionArrayOutput() UpgradeDistributionArrayOutput {
	return o
}

func (o UpgradeDistributionArrayOutput) ToUpgradeDistributionArrayOutputWithContext(ctx context.Context) UpgradeDistributionArrayOutput {
	return o
}

func (o UpgradeDistributionArrayOutput) Index(i pulumi.IntInput) UpgradeDistributionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UpgradeDistribution {
		return vs[0].([]UpgradeDistribution)[vs[1].(int)]
	}).(UpgradeDistributionOutput)
}

// The Upgrade Distribution represents metadata about the Upgrade for each operating system (CPE). Some distributions have additional metadata around updates, classifying them into various categories and severities.
type UpgradeDistributionResponse struct {
	// The operating system classification of this Upgrade, as specified by the upstream operating system upgrade feed. For Windows the classification is one of the category_ids listed at https://docs.microsoft.com/en-us/previous-versions/windows/desktop/ff357803(v=vs.85)
	Classification string `pulumi:"classification"`
	// Required - The specific operating system this metadata applies to. See https://cpe.mitre.org/specification/.
	CpeUri string `pulumi:"cpeUri"`
	// The cve tied to this Upgrade.
	Cve []string `pulumi:"cve"`
	// The severity as specified by the upstream operating system.
	Severity string `pulumi:"severity"`
}

// The Upgrade Distribution represents metadata about the Upgrade for each operating system (CPE). Some distributions have additional metadata around updates, classifying them into various categories and severities.
type UpgradeDistributionResponseOutput struct{ *pulumi.OutputState }

func (UpgradeDistributionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpgradeDistributionResponse)(nil)).Elem()
}

func (o UpgradeDistributionResponseOutput) ToUpgradeDistributionResponseOutput() UpgradeDistributionResponseOutput {
	return o
}

func (o UpgradeDistributionResponseOutput) ToUpgradeDistributionResponseOutputWithContext(ctx context.Context) UpgradeDistributionResponseOutput {
	return o
}

// The operating system classification of this Upgrade, as specified by the upstream operating system upgrade feed. For Windows the classification is one of the category_ids listed at https://docs.microsoft.com/en-us/previous-versions/windows/desktop/ff357803(v=vs.85)
func (o UpgradeDistributionResponseOutput) Classification() pulumi.StringOutput {
	return o.ApplyT(func(v UpgradeDistributionResponse) string { return v.Classification }).(pulumi.StringOutput)
}

// Required - The specific operating system this metadata applies to. See https://cpe.mitre.org/specification/.
func (o UpgradeDistributionResponseOutput) CpeUri() pulumi.StringOutput {
	return o.ApplyT(func(v UpgradeDistributionResponse) string { return v.CpeUri }).(pulumi.StringOutput)
}

// The cve tied to this Upgrade.
func (o UpgradeDistributionResponseOutput) Cve() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UpgradeDistributionResponse) []string { return v.Cve }).(pulumi.StringArrayOutput)
}

// The severity as specified by the upstream operating system.
func (o UpgradeDistributionResponseOutput) Severity() pulumi.StringOutput {
	return o.ApplyT(func(v UpgradeDistributionResponse) string { return v.Severity }).(pulumi.StringOutput)
}

type UpgradeDistributionResponseArrayOutput struct{ *pulumi.OutputState }

func (UpgradeDistributionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UpgradeDistributionResponse)(nil)).Elem()
}

func (o UpgradeDistributionResponseArrayOutput) ToUpgradeDistributionResponseArrayOutput() UpgradeDistributionResponseArrayOutput {
	return o
}

func (o UpgradeDistributionResponseArrayOutput) ToUpgradeDistributionResponseArrayOutputWithContext(ctx context.Context) UpgradeDistributionResponseArrayOutput {
	return o
}

func (o UpgradeDistributionResponseArrayOutput) Index(i pulumi.IntInput) UpgradeDistributionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UpgradeDistributionResponse {
		return vs[0].([]UpgradeDistributionResponse)[vs[1].(int)]
	}).(UpgradeDistributionResponseOutput)
}

// An Upgrade Note represents a potential upgrade of a package to a given version. For each package version combination (i.e. bash 4.0, bash 4.1, bash 4.1.2), there will be an Upgrade Note. For Windows, windows_update field represents the information related to the update.
type UpgradeNote struct {
	// Metadata about the upgrade for each specific operating system.
	Distributions []UpgradeDistribution `pulumi:"distributions"`
	// Required for non-Windows OS. The package this Upgrade is for.
	Package *string `pulumi:"package"`
	// Required for non-Windows OS. The version of the package in machine + human readable form.
	Version *Version `pulumi:"version"`
	// Required for Windows OS. Represents the metadata about the Windows update.
	WindowsUpdate *WindowsUpdate `pulumi:"windowsUpdate"`
}

// UpgradeNoteInput is an input type that accepts UpgradeNoteArgs and UpgradeNoteOutput values.
// You can construct a concrete instance of `UpgradeNoteInput` via:
//
//	UpgradeNoteArgs{...}
type UpgradeNoteInput interface {
	pulumi.Input

	ToUpgradeNoteOutput() UpgradeNoteOutput
	ToUpgradeNoteOutputWithContext(context.Context) UpgradeNoteOutput
}

// An Upgrade Note represents a potential upgrade of a package to a given version. For each package version combination (i.e. bash 4.0, bash 4.1, bash 4.1.2), there will be an Upgrade Note. For Windows, windows_update field represents the information related to the update.
type UpgradeNoteArgs struct {
	// Metadata about the upgrade for each specific operating system.
	Distributions UpgradeDistributionArrayInput `pulumi:"distributions"`
	// Required for non-Windows OS. The package this Upgrade is for.
	Package pulumi.StringPtrInput `pulumi:"package"`
	// Required for non-Windows OS. The version of the package in machine + human readable form.
	Version VersionPtrInput `pulumi:"version"`
	// Required for Windows OS. Represents the metadata about the Windows update.
	WindowsUpdate WindowsUpdatePtrInput `pulumi:"windowsUpdate"`
}

func (UpgradeNoteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UpgradeNote)(nil)).Elem()
}

func (i UpgradeNoteArgs) ToUpgradeNoteOutput() UpgradeNoteOutput {
	return i.ToUpgradeNoteOutputWithContext(context.Background())
}

func (i UpgradeNoteArgs) ToUpgradeNoteOutputWithContext(ctx context.Context) UpgradeNoteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradeNoteOutput)
}

func (i UpgradeNoteArgs) ToUpgradeNotePtrOutput() UpgradeNotePtrOutput {
	return i.ToUpgradeNotePtrOutputWithContext(context.Background())
}

func (i UpgradeNoteArgs) ToUpgradeNotePtrOutputWithContext(ctx context.Context) UpgradeNotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradeNoteOutput).ToUpgradeNotePtrOutputWithContext(ctx)
}

// UpgradeNotePtrInput is an input type that accepts UpgradeNoteArgs, UpgradeNotePtr and UpgradeNotePtrOutput values.
// You can construct a concrete instance of `UpgradeNotePtrInput` via:
//
//	        UpgradeNoteArgs{...}
//
//	or:
//
//	        nil
type UpgradeNotePtrInput interface {
	pulumi.Input

	ToUpgradeNotePtrOutput() UpgradeNotePtrOutput
	ToUpgradeNotePtrOutputWithContext(context.Context) UpgradeNotePtrOutput
}

type upgradeNotePtrType UpgradeNoteArgs

func UpgradeNotePtr(v *UpgradeNoteArgs) UpgradeNotePtrInput {
	return (*upgradeNotePtrType)(v)
}

func (*upgradeNotePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UpgradeNote)(nil)).Elem()
}

func (i *upgradeNotePtrType) ToUpgradeNotePtrOutput() UpgradeNotePtrOutput {
	return i.ToUpgradeNotePtrOutputWithContext(context.Background())
}

func (i *upgradeNotePtrType) ToUpgradeNotePtrOutputWithContext(ctx context.Context) UpgradeNotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradeNotePtrOutput)
}

// An Upgrade Note represents a potential upgrade of a package to a given version. For each package version combination (i.e. bash 4.0, bash 4.1, bash 4.1.2), there will be an Upgrade Note. For Windows, windows_update field represents the information related to the update.
type UpgradeNoteOutput struct{ *pulumi.OutputState }

func (UpgradeNoteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpgradeNote)(nil)).Elem()
}

func (o UpgradeNoteOutput) ToUpgradeNoteOutput() UpgradeNoteOutput {
	return o
}

func (o UpgradeNoteOutput) ToUpgradeNoteOutputWithContext(ctx context.Context) UpgradeNoteOutput {
	return o
}

func (o UpgradeNoteOutput) ToUpgradeNotePtrOutput() UpgradeNotePtrOutput {
	return o.ToUpgradeNotePtrOutputWithContext(context.Background())
}

func (o UpgradeNoteOutput) ToUpgradeNotePtrOutputWithContext(ctx context.Context) UpgradeNotePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UpgradeNote) *UpgradeNote {
		return &v
	}).(UpgradeNotePtrOutput)
}

// Metadata about the upgrade for each specific operating system.
func (o UpgradeNoteOutput) Distributions() UpgradeDistributionArrayOutput {
	return o.ApplyT(func(v UpgradeNote) []UpgradeDistribution { return v.Distributions }).(UpgradeDistributionArrayOutput)
}

// Required for non-Windows OS. The package this Upgrade is for.
func (o UpgradeNoteOutput) Package() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpgradeNote) *string { return v.Package }).(pulumi.StringPtrOutput)
}

// Required for non-Windows OS. The version of the package in machine + human readable form.
func (o UpgradeNoteOutput) Version() VersionPtrOutput {
	return o.ApplyT(func(v UpgradeNote) *Version { return v.Version }).(VersionPtrOutput)
}

// Required for Windows OS. Represents the metadata about the Windows update.
func (o UpgradeNoteOutput) WindowsUpdate() WindowsUpdatePtrOutput {
	return o.ApplyT(func(v UpgradeNote) *WindowsUpdate { return v.WindowsUpdate }).(WindowsUpdatePtrOutput)
}

type UpgradeNotePtrOutput struct{ *pulumi.OutputState }

func (UpgradeNotePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UpgradeNote)(nil)).Elem()
}

func (o UpgradeNotePtrOutput) ToUpgradeNotePtrOutput() UpgradeNotePtrOutput {
	return o
}

func (o UpgradeNotePtrOutput) ToUpgradeNotePtrOutputWithContext(ctx context.Context) UpgradeNotePtrOutput {
	return o
}

func (o UpgradeNotePtrOutput) Elem() UpgradeNoteOutput {
	return o.ApplyT(func(v *UpgradeNote) UpgradeNote {
		if v != nil {
			return *v
		}
		var ret UpgradeNote
		return ret
	}).(UpgradeNoteOutput)
}

// Metadata about the upgrade for each specific operating system.
func (o UpgradeNotePtrOutput) Distributions() UpgradeDistributionArrayOutput {
	return o.ApplyT(func(v *UpgradeNote) []UpgradeDistribution {
		if v == nil {
			return nil
		}
		return v.Distributions
	}).(UpgradeDistributionArrayOutput)
}

// Required for non-Windows OS. The package this Upgrade is for.
func (o UpgradeNotePtrOutput) Package() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UpgradeNote) *string {
		if v == nil {
			return nil
		}
		return v.Package
	}).(pulumi.StringPtrOutput)
}

// Required for non-Windows OS. The version of the package in machine + human readable form.
func (o UpgradeNotePtrOutput) Version() VersionPtrOutput {
	return o.ApplyT(func(v *UpgradeNote) *Version {
		if v == nil {
			return nil
		}
		return v.Version
	}).(VersionPtrOutput)
}

// Required for Windows OS. Represents the metadata about the Windows update.
func (o UpgradeNotePtrOutput) WindowsUpdate() WindowsUpdatePtrOutput {
	return o.ApplyT(func(v *UpgradeNote) *WindowsUpdate {
		if v == nil {
			return nil
		}
		return v.WindowsUpdate
	}).(WindowsUpdatePtrOutput)
}

// An Upgrade Note represents a potential upgrade of a package to a given version. For each package version combination (i.e. bash 4.0, bash 4.1, bash 4.1.2), there will be an Upgrade Note. For Windows, windows_update field represents the information related to the update.
type UpgradeNoteResponse struct {
	// Metadata about the upgrade for each specific operating system.
	Distributions []UpgradeDistributionResponse `pulumi:"distributions"`
	// Required for non-Windows OS. The package this Upgrade is for.
	Package string `pulumi:"package"`
	// Required for non-Windows OS. The version of the package in machine + human readable form.
	Version VersionResponse `pulumi:"version"`
	// Required for Windows OS. Represents the metadata about the Windows update.
	WindowsUpdate WindowsUpdateResponse `pulumi:"windowsUpdate"`
}

// An Upgrade Note represents a potential upgrade of a package to a given version. For each package version combination (i.e. bash 4.0, bash 4.1, bash 4.1.2), there will be an Upgrade Note. For Windows, windows_update field represents the information related to the update.
type UpgradeNoteResponseOutput struct{ *pulumi.OutputState }

func (UpgradeNoteResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpgradeNoteResponse)(nil)).Elem()
}

func (o UpgradeNoteResponseOutput) ToUpgradeNoteResponseOutput() UpgradeNoteResponseOutput {
	return o
}

func (o UpgradeNoteResponseOutput) ToUpgradeNoteResponseOutputWithContext(ctx context.Context) UpgradeNoteResponseOutput {
	return o
}

// Metadata about the upgrade for each specific operating system.
func (o UpgradeNoteResponseOutput) Distributions() UpgradeDistributionResponseArrayOutput {
	return o.ApplyT(func(v UpgradeNoteResponse) []UpgradeDistributionResponse { return v.Distributions }).(UpgradeDistributionResponseArrayOutput)
}

// Required for non-Windows OS. The package this Upgrade is for.
func (o UpgradeNoteResponseOutput) Package() pulumi.StringOutput {
	return o.ApplyT(func(v UpgradeNoteResponse) string { return v.Package }).(pulumi.StringOutput)
}

// Required for non-Windows OS. The version of the package in machine + human readable form.
func (o UpgradeNoteResponseOutput) Version() VersionResponseOutput {
	return o.ApplyT(func(v UpgradeNoteResponse) VersionResponse { return v.Version }).(VersionResponseOutput)
}

// Required for Windows OS. Represents the metadata about the Windows update.
func (o UpgradeNoteResponseOutput) WindowsUpdate() WindowsUpdateResponseOutput {
	return o.ApplyT(func(v UpgradeNoteResponse) WindowsUpdateResponse { return v.WindowsUpdate }).(WindowsUpdateResponseOutput)
}

// An Upgrade Occurrence represents that a specific resource_url could install a specific upgrade. This presence is supplied via local sources (i.e. it is present in the mirror and the running system has noticed its availability). For Windows, both distribution and windows_update contain information for the Windows update.
type UpgradeOccurrence struct {
	// Metadata about the upgrade for available for the specific operating system for the resource_url. This allows efficient filtering, as well as making it easier to use the occurrence.
	Distribution *UpgradeDistribution `pulumi:"distribution"`
	// Required for non-Windows OS. The package this Upgrade is for.
	Package *string `pulumi:"package"`
	// Required for non-Windows OS. The version of the package in a machine + human readable form.
	ParsedVersion *Version `pulumi:"parsedVersion"`
	// Required for Windows OS. Represents the metadata about the Windows update.
	WindowsUpdate *WindowsUpdate `pulumi:"windowsUpdate"`
}

// UpgradeOccurrenceInput is an input type that accepts UpgradeOccurrenceArgs and UpgradeOccurrenceOutput values.
// You can construct a concrete instance of `UpgradeOccurrenceInput` via:
//
//	UpgradeOccurrenceArgs{...}
type UpgradeOccurrenceInput interface {
	pulumi.Input

	ToUpgradeOccurrenceOutput() UpgradeOccurrenceOutput
	ToUpgradeOccurrenceOutputWithContext(context.Context) UpgradeOccurrenceOutput
}

// An Upgrade Occurrence represents that a specific resource_url could install a specific upgrade. This presence is supplied via local sources (i.e. it is present in the mirror and the running system has noticed its availability). For Windows, both distribution and windows_update contain information for the Windows update.
type UpgradeOccurrenceArgs struct {
	// Metadata about the upgrade for available for the specific operating system for the resource_url. This allows efficient filtering, as well as making it easier to use the occurrence.
	Distribution UpgradeDistributionPtrInput `pulumi:"distribution"`
	// Required for non-Windows OS. The package this Upgrade is for.
	Package pulumi.StringPtrInput `pulumi:"package"`
	// Required for non-Windows OS. The version of the package in a machine + human readable form.
	ParsedVersion VersionPtrInput `pulumi:"parsedVersion"`
	// Required for Windows OS. Represents the metadata about the Windows update.
	WindowsUpdate WindowsUpdatePtrInput `pulumi:"windowsUpdate"`
}

func (UpgradeOccurrenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UpgradeOccurrence)(nil)).Elem()
}

func (i UpgradeOccurrenceArgs) ToUpgradeOccurrenceOutput() UpgradeOccurrenceOutput {
	return i.ToUpgradeOccurrenceOutputWithContext(context.Background())
}

func (i UpgradeOccurrenceArgs) ToUpgradeOccurrenceOutputWithContext(ctx context.Context) UpgradeOccurrenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradeOccurrenceOutput)
}

func (i UpgradeOccurrenceArgs) ToUpgradeOccurrencePtrOutput() UpgradeOccurrencePtrOutput {
	return i.ToUpgradeOccurrencePtrOutputWithContext(context.Background())
}

func (i UpgradeOccurrenceArgs) ToUpgradeOccurrencePtrOutputWithContext(ctx context.Context) UpgradeOccurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradeOccurrenceOutput).ToUpgradeOccurrencePtrOutputWithContext(ctx)
}

// UpgradeOccurrencePtrInput is an input type that accepts UpgradeOccurrenceArgs, UpgradeOccurrencePtr and UpgradeOccurrencePtrOutput values.
// You can construct a concrete instance of `UpgradeOccurrencePtrInput` via:
//
//	        UpgradeOccurrenceArgs{...}
//
//	or:
//
//	        nil
type UpgradeOccurrencePtrInput interface {
	pulumi.Input

	ToUpgradeOccurrencePtrOutput() UpgradeOccurrencePtrOutput
	ToUpgradeOccurrencePtrOutputWithContext(context.Context) UpgradeOccurrencePtrOutput
}

type upgradeOccurrencePtrType UpgradeOccurrenceArgs

func UpgradeOccurrencePtr(v *UpgradeOccurrenceArgs) UpgradeOccurrencePtrInput {
	return (*upgradeOccurrencePtrType)(v)
}

func (*upgradeOccurrencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UpgradeOccurrence)(nil)).Elem()
}

func (i *upgradeOccurrencePtrType) ToUpgradeOccurrencePtrOutput() UpgradeOccurrencePtrOutput {
	return i.ToUpgradeOccurrencePtrOutputWithContext(context.Background())
}

func (i *upgradeOccurrencePtrType) ToUpgradeOccurrencePtrOutputWithContext(ctx context.Context) UpgradeOccurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradeOccurrencePtrOutput)
}

// An Upgrade Occurrence represents that a specific resource_url could install a specific upgrade. This presence is supplied via local sources (i.e. it is present in the mirror and the running system has noticed its availability). For Windows, both distribution and windows_update contain information for the Windows update.
type UpgradeOccurrenceOutput struct{ *pulumi.OutputState }

func (UpgradeOccurrenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpgradeOccurrence)(nil)).Elem()
}

func (o UpgradeOccurrenceOutput) ToUpgradeOccurrenceOutput() UpgradeOccurrenceOutput {
	return o
}

func (o UpgradeOccurrenceOutput) ToUpgradeOccurrenceOutputWithContext(ctx context.Context) UpgradeOccurrenceOutput {
	return o
}

func (o UpgradeOccurrenceOutput) ToUpgradeOccurrencePtrOutput() UpgradeOccurrencePtrOutput {
	return o.ToUpgradeOccurrencePtrOutputWithContext(context.Background())
}

func (o UpgradeOccurrenceOutput) ToUpgradeOccurrencePtrOutputWithContext(ctx context.Context) UpgradeOccurrencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UpgradeOccurrence) *UpgradeOccurrence {
		return &v
	}).(UpgradeOccurrencePtrOutput)
}

// Metadata about the upgrade for available for the specific operating system for the resource_url. This allows efficient filtering, as well as making it easier to use the occurrence.
func (o UpgradeOccurrenceOutput) Distribution() UpgradeDistributionPtrOutput {
	return o.ApplyT(func(v UpgradeOccurrence) *UpgradeDistribution { return v.Distribution }).(UpgradeDistributionPtrOutput)
}

// Required for non-Windows OS. The package this Upgrade is for.
func (o UpgradeOccurrenceOutput) Package() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpgradeOccurrence) *string { return v.Package }).(pulumi.StringPtrOutput)
}

// Required for non-Windows OS. The version of the package in a machine + human readable form.
func (o UpgradeOccurrenceOutput) ParsedVersion() VersionPtrOutput {
	return o.ApplyT(func(v UpgradeOccurrence) *Version { return v.ParsedVersion }).(VersionPtrOutput)
}

// Required for Windows OS. Represents the metadata about the Windows update.
func (o UpgradeOccurrenceOutput) WindowsUpdate() WindowsUpdatePtrOutput {
	return o.ApplyT(func(v UpgradeOccurrence) *WindowsUpdate { return v.WindowsUpdate }).(WindowsUpdatePtrOutput)
}

type UpgradeOccurrencePtrOutput struct{ *pulumi.OutputState }

func (UpgradeOccurrencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UpgradeOccurrence)(nil)).Elem()
}

func (o UpgradeOccurrencePtrOutput) ToUpgradeOccurrencePtrOutput() UpgradeOccurrencePtrOutput {
	return o
}

func (o UpgradeOccurrencePtrOutput) ToUpgradeOccurrencePtrOutputWithContext(ctx context.Context) UpgradeOccurrencePtrOutput {
	return o
}

func (o UpgradeOccurrencePtrOutput) Elem() UpgradeOccurrenceOutput {
	return o.ApplyT(func(v *UpgradeOccurrence) UpgradeOccurrence {
		if v != nil {
			return *v
		}
		var ret UpgradeOccurrence
		return ret
	}).(UpgradeOccurrenceOutput)
}

// Metadata about the upgrade for available for the specific operating system for the resource_url. This allows efficient filtering, as well as making it easier to use the occurrence.
func (o UpgradeOccurrencePtrOutput) Distribution() UpgradeDistributionPtrOutput {
	return o.ApplyT(func(v *UpgradeOccurrence) *UpgradeDistribution {
		if v == nil {
			return nil
		}
		return v.Distribution
	}).(UpgradeDistributionPtrOutput)
}

// Required for non-Windows OS. The package this Upgrade is for.
func (o UpgradeOccurrencePtrOutput) Package() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UpgradeOccurrence) *string {
		if v == nil {
			return nil
		}
		return v.Package
	}).(pulumi.StringPtrOutput)
}

// Required for non-Windows OS. The version of the package in a machine + human readable form.
func (o UpgradeOccurrencePtrOutput) ParsedVersion() VersionPtrOutput {
	return o.ApplyT(func(v *UpgradeOccurrence) *Version {
		if v == nil {
			return nil
		}
		return v.ParsedVersion
	}).(VersionPtrOutput)
}

// Required for Windows OS. Represents the metadata about the Windows update.
func (o UpgradeOccurrencePtrOutput) WindowsUpdate() WindowsUpdatePtrOutput {
	return o.ApplyT(func(v *UpgradeOccurrence) *WindowsUpdate {
		if v == nil {
			return nil
		}
		return v.WindowsUpdate
	}).(WindowsUpdatePtrOutput)
}

// An Upgrade Occurrence represents that a specific resource_url could install a specific upgrade. This presence is supplied via local sources (i.e. it is present in the mirror and the running system has noticed its availability). For Windows, both distribution and windows_update contain information for the Windows update.
type UpgradeOccurrenceResponse struct {
	// Metadata about the upgrade for available for the specific operating system for the resource_url. This allows efficient filtering, as well as making it easier to use the occurrence.
	Distribution UpgradeDistributionResponse `pulumi:"distribution"`
	// Required for non-Windows OS. The package this Upgrade is for.
	Package string `pulumi:"package"`
	// Required for non-Windows OS. The version of the package in a machine + human readable form.
	ParsedVersion VersionResponse `pulumi:"parsedVersion"`
	// Required for Windows OS. Represents the metadata about the Windows update.
	WindowsUpdate WindowsUpdateResponse `pulumi:"windowsUpdate"`
}

// An Upgrade Occurrence represents that a specific resource_url could install a specific upgrade. This presence is supplied via local sources (i.e. it is present in the mirror and the running system has noticed its availability). For Windows, both distribution and windows_update contain information for the Windows update.
type UpgradeOccurrenceResponseOutput struct{ *pulumi.OutputState }

func (UpgradeOccurrenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpgradeOccurrenceResponse)(nil)).Elem()
}

func (o UpgradeOccurrenceResponseOutput) ToUpgradeOccurrenceResponseOutput() UpgradeOccurrenceResponseOutput {
	return o
}

func (o UpgradeOccurrenceResponseOutput) ToUpgradeOccurrenceResponseOutputWithContext(ctx context.Context) UpgradeOccurrenceResponseOutput {
	return o
}

// Metadata about the upgrade for available for the specific operating system for the resource_url. This allows efficient filtering, as well as making it easier to use the occurrence.
func (o UpgradeOccurrenceResponseOutput) Distribution() UpgradeDistributionResponseOutput {
	return o.ApplyT(func(v UpgradeOccurrenceResponse) UpgradeDistributionResponse { return v.Distribution }).(UpgradeDistributionResponseOutput)
}

// Required for non-Windows OS. The package this Upgrade is for.
func (o UpgradeOccurrenceResponseOutput) Package() pulumi.StringOutput {
	return o.ApplyT(func(v UpgradeOccurrenceResponse) string { return v.Package }).(pulumi.StringOutput)
}

// Required for non-Windows OS. The version of the package in a machine + human readable form.
func (o UpgradeOccurrenceResponseOutput) ParsedVersion() VersionResponseOutput {
	return o.ApplyT(func(v UpgradeOccurrenceResponse) VersionResponse { return v.ParsedVersion }).(VersionResponseOutput)
}

// Required for Windows OS. Represents the metadata about the Windows update.
func (o UpgradeOccurrenceResponseOutput) WindowsUpdate() WindowsUpdateResponseOutput {
	return o.ApplyT(func(v UpgradeOccurrenceResponse) WindowsUpdateResponse { return v.WindowsUpdate }).(WindowsUpdateResponseOutput)
}

// Version contains structured information about the version of a package.
type Version struct {
	// Used to correct mistakes in the version numbering scheme.
	Epoch *int `pulumi:"epoch"`
	// Human readable version string. This string is of the form :- and is only set when kind is NORMAL.
	FullName *string `pulumi:"fullName"`
	// Whether this version is specifying part of an inclusive range. Grafeas does not have the capability to specify version ranges; instead we have fields that specify start version and end versions. At times this is insufficient - we also need to specify whether the version is included in the range or is excluded from the range. This boolean is expected to be set to true when the version is included in a range.
	Inclusive *bool `pulumi:"inclusive"`
	// Distinguishes between sentinel MIN/MAX versions and normal versions.
	Kind VersionKind `pulumi:"kind"`
	// Required only when version kind is NORMAL. The main part of the version name.
	Name *string `pulumi:"name"`
	// The iteration of the package build from the above version.
	Revision *string `pulumi:"revision"`
}

// VersionInput is an input type that accepts VersionArgs and VersionOutput values.
// You can construct a concrete instance of `VersionInput` via:
//
//	VersionArgs{...}
type VersionInput interface {
	pulumi.Input

	ToVersionOutput() VersionOutput
	ToVersionOutputWithContext(context.Context) VersionOutput
}

// Version contains structured information about the version of a package.
type VersionArgs struct {
	// Used to correct mistakes in the version numbering scheme.
	Epoch pulumi.IntPtrInput `pulumi:"epoch"`
	// Human readable version string. This string is of the form :- and is only set when kind is NORMAL.
	FullName pulumi.StringPtrInput `pulumi:"fullName"`
	// Whether this version is specifying part of an inclusive range. Grafeas does not have the capability to specify version ranges; instead we have fields that specify start version and end versions. At times this is insufficient - we also need to specify whether the version is included in the range or is excluded from the range. This boolean is expected to be set to true when the version is included in a range.
	Inclusive pulumi.BoolPtrInput `pulumi:"inclusive"`
	// Distinguishes between sentinel MIN/MAX versions and normal versions.
	Kind VersionKindInput `pulumi:"kind"`
	// Required only when version kind is NORMAL. The main part of the version name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The iteration of the package build from the above version.
	Revision pulumi.StringPtrInput `pulumi:"revision"`
}

func (VersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Version)(nil)).Elem()
}

func (i VersionArgs) ToVersionOutput() VersionOutput {
	return i.ToVersionOutputWithContext(context.Background())
}

func (i VersionArgs) ToVersionOutputWithContext(ctx context.Context) VersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VersionOutput)
}

func (i VersionArgs) ToVersionPtrOutput() VersionPtrOutput {
	return i.ToVersionPtrOutputWithContext(context.Background())
}

func (i VersionArgs) ToVersionPtrOutputWithContext(ctx context.Context) VersionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VersionOutput).ToVersionPtrOutputWithContext(ctx)
}

// VersionPtrInput is an input type that accepts VersionArgs, VersionPtr and VersionPtrOutput values.
// You can construct a concrete instance of `VersionPtrInput` via:
//
//	        VersionArgs{...}
//
//	or:
//
//	        nil
type VersionPtrInput interface {
	pulumi.Input

	ToVersionPtrOutput() VersionPtrOutput
	ToVersionPtrOutputWithContext(context.Context) VersionPtrOutput
}

type versionPtrType VersionArgs

func VersionPtr(v *VersionArgs) VersionPtrInput {
	return (*versionPtrType)(v)
}

func (*versionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Version)(nil)).Elem()
}

func (i *versionPtrType) ToVersionPtrOutput() VersionPtrOutput {
	return i.ToVersionPtrOutputWithContext(context.Background())
}

func (i *versionPtrType) ToVersionPtrOutputWithContext(ctx context.Context) VersionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VersionPtrOutput)
}

// Version contains structured information about the version of a package.
type VersionOutput struct{ *pulumi.OutputState }

func (VersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Version)(nil)).Elem()
}

func (o VersionOutput) ToVersionOutput() VersionOutput {
	return o
}

func (o VersionOutput) ToVersionOutputWithContext(ctx context.Context) VersionOutput {
	return o
}

func (o VersionOutput) ToVersionPtrOutput() VersionPtrOutput {
	return o.ToVersionPtrOutputWithContext(context.Background())
}

func (o VersionOutput) ToVersionPtrOutputWithContext(ctx context.Context) VersionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Version) *Version {
		return &v
	}).(VersionPtrOutput)
}

// Used to correct mistakes in the version numbering scheme.
func (o VersionOutput) Epoch() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Version) *int { return v.Epoch }).(pulumi.IntPtrOutput)
}

// Human readable version string. This string is of the form :- and is only set when kind is NORMAL.
func (o VersionOutput) FullName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Version) *string { return v.FullName }).(pulumi.StringPtrOutput)
}

// Whether this version is specifying part of an inclusive range. Grafeas does not have the capability to specify version ranges; instead we have fields that specify start version and end versions. At times this is insufficient - we also need to specify whether the version is included in the range or is excluded from the range. This boolean is expected to be set to true when the version is included in a range.
func (o VersionOutput) Inclusive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Version) *bool { return v.Inclusive }).(pulumi.BoolPtrOutput)
}

// Distinguishes between sentinel MIN/MAX versions and normal versions.
func (o VersionOutput) Kind() VersionKindOutput {
	return o.ApplyT(func(v Version) VersionKind { return v.Kind }).(VersionKindOutput)
}

// Required only when version kind is NORMAL. The main part of the version name.
func (o VersionOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Version) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The iteration of the package build from the above version.
func (o VersionOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Version) *string { return v.Revision }).(pulumi.StringPtrOutput)
}

type VersionPtrOutput struct{ *pulumi.OutputState }

func (VersionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Version)(nil)).Elem()
}

func (o VersionPtrOutput) ToVersionPtrOutput() VersionPtrOutput {
	return o
}

func (o VersionPtrOutput) ToVersionPtrOutputWithContext(ctx context.Context) VersionPtrOutput {
	return o
}

func (o VersionPtrOutput) Elem() VersionOutput {
	return o.ApplyT(func(v *Version) Version {
		if v != nil {
			return *v
		}
		var ret Version
		return ret
	}).(VersionOutput)
}

// Used to correct mistakes in the version numbering scheme.
func (o VersionPtrOutput) Epoch() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Version) *int {
		if v == nil {
			return nil
		}
		return v.Epoch
	}).(pulumi.IntPtrOutput)
}

// Human readable version string. This string is of the form :- and is only set when kind is NORMAL.
func (o VersionPtrOutput) FullName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Version) *string {
		if v == nil {
			return nil
		}
		return v.FullName
	}).(pulumi.StringPtrOutput)
}

// Whether this version is specifying part of an inclusive range. Grafeas does not have the capability to specify version ranges; instead we have fields that specify start version and end versions. At times this is insufficient - we also need to specify whether the version is included in the range or is excluded from the range. This boolean is expected to be set to true when the version is included in a range.
func (o VersionPtrOutput) Inclusive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Version) *bool {
		if v == nil {
			return nil
		}
		return v.Inclusive
	}).(pulumi.BoolPtrOutput)
}

// Distinguishes between sentinel MIN/MAX versions and normal versions.
func (o VersionPtrOutput) Kind() VersionKindPtrOutput {
	return o.ApplyT(func(v *Version) *VersionKind {
		if v == nil {
			return nil
		}
		return &v.Kind
	}).(VersionKindPtrOutput)
}

// Required only when version kind is NORMAL. The main part of the version name.
func (o VersionPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Version) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The iteration of the package build from the above version.
func (o VersionPtrOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Version) *string {
		if v == nil {
			return nil
		}
		return v.Revision
	}).(pulumi.StringPtrOutput)
}

// Version contains structured information about the version of a package.
type VersionResponse struct {
	// Used to correct mistakes in the version numbering scheme.
	Epoch int `pulumi:"epoch"`
	// Human readable version string. This string is of the form :- and is only set when kind is NORMAL.
	FullName string `pulumi:"fullName"`
	// Whether this version is specifying part of an inclusive range. Grafeas does not have the capability to specify version ranges; instead we have fields that specify start version and end versions. At times this is insufficient - we also need to specify whether the version is included in the range or is excluded from the range. This boolean is expected to be set to true when the version is included in a range.
	Inclusive bool `pulumi:"inclusive"`
	// Distinguishes between sentinel MIN/MAX versions and normal versions.
	Kind string `pulumi:"kind"`
	// Required only when version kind is NORMAL. The main part of the version name.
	Name string `pulumi:"name"`
	// The iteration of the package build from the above version.
	Revision string `pulumi:"revision"`
}

// Version contains structured information about the version of a package.
type VersionResponseOutput struct{ *pulumi.OutputState }

func (VersionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VersionResponse)(nil)).Elem()
}

func (o VersionResponseOutput) ToVersionResponseOutput() VersionResponseOutput {
	return o
}

func (o VersionResponseOutput) ToVersionResponseOutputWithContext(ctx context.Context) VersionResponseOutput {
	return o
}

// Used to correct mistakes in the version numbering scheme.
func (o VersionResponseOutput) Epoch() pulumi.IntOutput {
	return o.ApplyT(func(v VersionResponse) int { return v.Epoch }).(pulumi.IntOutput)
}

// Human readable version string. This string is of the form :- and is only set when kind is NORMAL.
func (o VersionResponseOutput) FullName() pulumi.StringOutput {
	return o.ApplyT(func(v VersionResponse) string { return v.FullName }).(pulumi.StringOutput)
}

// Whether this version is specifying part of an inclusive range. Grafeas does not have the capability to specify version ranges; instead we have fields that specify start version and end versions. At times this is insufficient - we also need to specify whether the version is included in the range or is excluded from the range. This boolean is expected to be set to true when the version is included in a range.
func (o VersionResponseOutput) Inclusive() pulumi.BoolOutput {
	return o.ApplyT(func(v VersionResponse) bool { return v.Inclusive }).(pulumi.BoolOutput)
}

// Distinguishes between sentinel MIN/MAX versions and normal versions.
func (o VersionResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v VersionResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// Required only when version kind is NORMAL. The main part of the version name.
func (o VersionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VersionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The iteration of the package build from the above version.
func (o VersionResponseOutput) Revision() pulumi.StringOutput {
	return o.ApplyT(func(v VersionResponse) string { return v.Revision }).(pulumi.StringOutput)
}

// VexAssessment provides all publisher provided Vex information that is related to this vulnerability.
type VexAssessment struct {
	// Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.
	//
	// Deprecated: Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.
	Cve *string `pulumi:"cve"`
	// Contains information about the impact of this vulnerability, this will change with time.
	Impacts []string `pulumi:"impacts"`
	// Justification provides the justification when the state of the assessment if NOT_AFFECTED.
	Justification *Justification `pulumi:"justification"`
	// The VulnerabilityAssessment note from which this VexAssessment was generated. This will be of the form: `projects/[PROJECT_ID]/notes/[NOTE_ID]`.
	NoteName *string `pulumi:"noteName"`
	// Holds a list of references associated with this vulnerability item and assessment.
	RelatedUris []RelatedUrl `pulumi:"relatedUris"`
	// Specifies details on how to handle (and presumably, fix) a vulnerability.
	Remediations []Remediation `pulumi:"remediations"`
	// Provides the state of this Vulnerability assessment.
	State *VexAssessmentState `pulumi:"state"`
	// The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc.
	VulnerabilityId *string `pulumi:"vulnerabilityId"`
}

// VexAssessmentInput is an input type that accepts VexAssessmentArgs and VexAssessmentOutput values.
// You can construct a concrete instance of `VexAssessmentInput` via:
//
//	VexAssessmentArgs{...}
type VexAssessmentInput interface {
	pulumi.Input

	ToVexAssessmentOutput() VexAssessmentOutput
	ToVexAssessmentOutputWithContext(context.Context) VexAssessmentOutput
}

// VexAssessment provides all publisher provided Vex information that is related to this vulnerability.
type VexAssessmentArgs struct {
	// Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.
	//
	// Deprecated: Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.
	Cve pulumi.StringPtrInput `pulumi:"cve"`
	// Contains information about the impact of this vulnerability, this will change with time.
	Impacts pulumi.StringArrayInput `pulumi:"impacts"`
	// Justification provides the justification when the state of the assessment if NOT_AFFECTED.
	Justification JustificationPtrInput `pulumi:"justification"`
	// The VulnerabilityAssessment note from which this VexAssessment was generated. This will be of the form: `projects/[PROJECT_ID]/notes/[NOTE_ID]`.
	NoteName pulumi.StringPtrInput `pulumi:"noteName"`
	// Holds a list of references associated with this vulnerability item and assessment.
	RelatedUris RelatedUrlArrayInput `pulumi:"relatedUris"`
	// Specifies details on how to handle (and presumably, fix) a vulnerability.
	Remediations RemediationArrayInput `pulumi:"remediations"`
	// Provides the state of this Vulnerability assessment.
	State VexAssessmentStatePtrInput `pulumi:"state"`
	// The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc.
	VulnerabilityId pulumi.StringPtrInput `pulumi:"vulnerabilityId"`
}

func (VexAssessmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VexAssessment)(nil)).Elem()
}

func (i VexAssessmentArgs) ToVexAssessmentOutput() VexAssessmentOutput {
	return i.ToVexAssessmentOutputWithContext(context.Background())
}

func (i VexAssessmentArgs) ToVexAssessmentOutputWithContext(ctx context.Context) VexAssessmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VexAssessmentOutput)
}

func (i VexAssessmentArgs) ToVexAssessmentPtrOutput() VexAssessmentPtrOutput {
	return i.ToVexAssessmentPtrOutputWithContext(context.Background())
}

func (i VexAssessmentArgs) ToVexAssessmentPtrOutputWithContext(ctx context.Context) VexAssessmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VexAssessmentOutput).ToVexAssessmentPtrOutputWithContext(ctx)
}

// VexAssessmentPtrInput is an input type that accepts VexAssessmentArgs, VexAssessmentPtr and VexAssessmentPtrOutput values.
// You can construct a concrete instance of `VexAssessmentPtrInput` via:
//
//	        VexAssessmentArgs{...}
//
//	or:
//
//	        nil
type VexAssessmentPtrInput interface {
	pulumi.Input

	ToVexAssessmentPtrOutput() VexAssessmentPtrOutput
	ToVexAssessmentPtrOutputWithContext(context.Context) VexAssessmentPtrOutput
}

type vexAssessmentPtrType VexAssessmentArgs

func VexAssessmentPtr(v *VexAssessmentArgs) VexAssessmentPtrInput {
	return (*vexAssessmentPtrType)(v)
}

func (*vexAssessmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VexAssessment)(nil)).Elem()
}

func (i *vexAssessmentPtrType) ToVexAssessmentPtrOutput() VexAssessmentPtrOutput {
	return i.ToVexAssessmentPtrOutputWithContext(context.Background())
}

func (i *vexAssessmentPtrType) ToVexAssessmentPtrOutputWithContext(ctx context.Context) VexAssessmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VexAssessmentPtrOutput)
}

// VexAssessment provides all publisher provided Vex information that is related to this vulnerability.
type VexAssessmentOutput struct{ *pulumi.OutputState }

func (VexAssessmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VexAssessment)(nil)).Elem()
}

func (o VexAssessmentOutput) ToVexAssessmentOutput() VexAssessmentOutput {
	return o
}

func (o VexAssessmentOutput) ToVexAssessmentOutputWithContext(ctx context.Context) VexAssessmentOutput {
	return o
}

func (o VexAssessmentOutput) ToVexAssessmentPtrOutput() VexAssessmentPtrOutput {
	return o.ToVexAssessmentPtrOutputWithContext(context.Background())
}

func (o VexAssessmentOutput) ToVexAssessmentPtrOutputWithContext(ctx context.Context) VexAssessmentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VexAssessment) *VexAssessment {
		return &v
	}).(VexAssessmentPtrOutput)
}

// Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.
//
// Deprecated: Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.
func (o VexAssessmentOutput) Cve() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VexAssessment) *string { return v.Cve }).(pulumi.StringPtrOutput)
}

// Contains information about the impact of this vulnerability, this will change with time.
func (o VexAssessmentOutput) Impacts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VexAssessment) []string { return v.Impacts }).(pulumi.StringArrayOutput)
}

// Justification provides the justification when the state of the assessment if NOT_AFFECTED.
func (o VexAssessmentOutput) Justification() JustificationPtrOutput {
	return o.ApplyT(func(v VexAssessment) *Justification { return v.Justification }).(JustificationPtrOutput)
}

// The VulnerabilityAssessment note from which this VexAssessment was generated. This will be of the form: `projects/[PROJECT_ID]/notes/[NOTE_ID]`.
func (o VexAssessmentOutput) NoteName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VexAssessment) *string { return v.NoteName }).(pulumi.StringPtrOutput)
}

// Holds a list of references associated with this vulnerability item and assessment.
func (o VexAssessmentOutput) RelatedUris() RelatedUrlArrayOutput {
	return o.ApplyT(func(v VexAssessment) []RelatedUrl { return v.RelatedUris }).(RelatedUrlArrayOutput)
}

// Specifies details on how to handle (and presumably, fix) a vulnerability.
func (o VexAssessmentOutput) Remediations() RemediationArrayOutput {
	return o.ApplyT(func(v VexAssessment) []Remediation { return v.Remediations }).(RemediationArrayOutput)
}

// Provides the state of this Vulnerability assessment.
func (o VexAssessmentOutput) State() VexAssessmentStatePtrOutput {
	return o.ApplyT(func(v VexAssessment) *VexAssessmentState { return v.State }).(VexAssessmentStatePtrOutput)
}

// The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc.
func (o VexAssessmentOutput) VulnerabilityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VexAssessment) *string { return v.VulnerabilityId }).(pulumi.StringPtrOutput)
}

type VexAssessmentPtrOutput struct{ *pulumi.OutputState }

func (VexAssessmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VexAssessment)(nil)).Elem()
}

func (o VexAssessmentPtrOutput) ToVexAssessmentPtrOutput() VexAssessmentPtrOutput {
	return o
}

func (o VexAssessmentPtrOutput) ToVexAssessmentPtrOutputWithContext(ctx context.Context) VexAssessmentPtrOutput {
	return o
}

func (o VexAssessmentPtrOutput) Elem() VexAssessmentOutput {
	return o.ApplyT(func(v *VexAssessment) VexAssessment {
		if v != nil {
			return *v
		}
		var ret VexAssessment
		return ret
	}).(VexAssessmentOutput)
}

// Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.
//
// Deprecated: Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.
func (o VexAssessmentPtrOutput) Cve() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VexAssessment) *string {
		if v == nil {
			return nil
		}
		return v.Cve
	}).(pulumi.StringPtrOutput)
}

// Contains information about the impact of this vulnerability, this will change with time.
func (o VexAssessmentPtrOutput) Impacts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VexAssessment) []string {
		if v == nil {
			return nil
		}
		return v.Impacts
	}).(pulumi.StringArrayOutput)
}

// Justification provides the justification when the state of the assessment if NOT_AFFECTED.
func (o VexAssessmentPtrOutput) Justification() JustificationPtrOutput {
	return o.ApplyT(func(v *VexAssessment) *Justification {
		if v == nil {
			return nil
		}
		return v.Justification
	}).(JustificationPtrOutput)
}

// The VulnerabilityAssessment note from which this VexAssessment was generated. This will be of the form: `projects/[PROJECT_ID]/notes/[NOTE_ID]`.
func (o VexAssessmentPtrOutput) NoteName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VexAssessment) *string {
		if v == nil {
			return nil
		}
		return v.NoteName
	}).(pulumi.StringPtrOutput)
}

// Holds a list of references associated with this vulnerability item and assessment.
func (o VexAssessmentPtrOutput) RelatedUris() RelatedUrlArrayOutput {
	return o.ApplyT(func(v *VexAssessment) []RelatedUrl {
		if v == nil {
			return nil
		}
		return v.RelatedUris
	}).(RelatedUrlArrayOutput)
}

// Specifies details on how to handle (and presumably, fix) a vulnerability.
func (o VexAssessmentPtrOutput) Remediations() RemediationArrayOutput {
	return o.ApplyT(func(v *VexAssessment) []Remediation {
		if v == nil {
			return nil
		}
		return v.Remediations
	}).(RemediationArrayOutput)
}

// Provides the state of this Vulnerability assessment.
func (o VexAssessmentPtrOutput) State() VexAssessmentStatePtrOutput {
	return o.ApplyT(func(v *VexAssessment) *VexAssessmentState {
		if v == nil {
			return nil
		}
		return v.State
	}).(VexAssessmentStatePtrOutput)
}

// The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc.
func (o VexAssessmentPtrOutput) VulnerabilityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VexAssessment) *string {
		if v == nil {
			return nil
		}
		return v.VulnerabilityId
	}).(pulumi.StringPtrOutput)
}

// VexAssessment provides all publisher provided Vex information that is related to this vulnerability.
type VexAssessmentResponse struct {
	// Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.
	//
	// Deprecated: Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.
	Cve string `pulumi:"cve"`
	// Contains information about the impact of this vulnerability, this will change with time.
	Impacts []string `pulumi:"impacts"`
	// Justification provides the justification when the state of the assessment if NOT_AFFECTED.
	Justification JustificationResponse `pulumi:"justification"`
	// The VulnerabilityAssessment note from which this VexAssessment was generated. This will be of the form: `projects/[PROJECT_ID]/notes/[NOTE_ID]`.
	NoteName string `pulumi:"noteName"`
	// Holds a list of references associated with this vulnerability item and assessment.
	RelatedUris []RelatedUrlResponse `pulumi:"relatedUris"`
	// Specifies details on how to handle (and presumably, fix) a vulnerability.
	Remediations []RemediationResponse `pulumi:"remediations"`
	// Provides the state of this Vulnerability assessment.
	State string `pulumi:"state"`
	// The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc.
	VulnerabilityId string `pulumi:"vulnerabilityId"`
}

// VexAssessment provides all publisher provided Vex information that is related to this vulnerability.
type VexAssessmentResponseOutput struct{ *pulumi.OutputState }

func (VexAssessmentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VexAssessmentResponse)(nil)).Elem()
}

func (o VexAssessmentResponseOutput) ToVexAssessmentResponseOutput() VexAssessmentResponseOutput {
	return o
}

func (o VexAssessmentResponseOutput) ToVexAssessmentResponseOutputWithContext(ctx context.Context) VexAssessmentResponseOutput {
	return o
}

// Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.
//
// Deprecated: Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.
func (o VexAssessmentResponseOutput) Cve() pulumi.StringOutput {
	return o.ApplyT(func(v VexAssessmentResponse) string { return v.Cve }).(pulumi.StringOutput)
}

// Contains information about the impact of this vulnerability, this will change with time.
func (o VexAssessmentResponseOutput) Impacts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VexAssessmentResponse) []string { return v.Impacts }).(pulumi.StringArrayOutput)
}

// Justification provides the justification when the state of the assessment if NOT_AFFECTED.
func (o VexAssessmentResponseOutput) Justification() JustificationResponseOutput {
	return o.ApplyT(func(v VexAssessmentResponse) JustificationResponse { return v.Justification }).(JustificationResponseOutput)
}

// The VulnerabilityAssessment note from which this VexAssessment was generated. This will be of the form: `projects/[PROJECT_ID]/notes/[NOTE_ID]`.
func (o VexAssessmentResponseOutput) NoteName() pulumi.StringOutput {
	return o.ApplyT(func(v VexAssessmentResponse) string { return v.NoteName }).(pulumi.StringOutput)
}

// Holds a list of references associated with this vulnerability item and assessment.
func (o VexAssessmentResponseOutput) RelatedUris() RelatedUrlResponseArrayOutput {
	return o.ApplyT(func(v VexAssessmentResponse) []RelatedUrlResponse { return v.RelatedUris }).(RelatedUrlResponseArrayOutput)
}

// Specifies details on how to handle (and presumably, fix) a vulnerability.
func (o VexAssessmentResponseOutput) Remediations() RemediationResponseArrayOutput {
	return o.ApplyT(func(v VexAssessmentResponse) []RemediationResponse { return v.Remediations }).(RemediationResponseArrayOutput)
}

// Provides the state of this Vulnerability assessment.
func (o VexAssessmentResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v VexAssessmentResponse) string { return v.State }).(pulumi.StringOutput)
}

// The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc.
func (o VexAssessmentResponseOutput) VulnerabilityId() pulumi.StringOutput {
	return o.ApplyT(func(v VexAssessmentResponse) string { return v.VulnerabilityId }).(pulumi.StringOutput)
}

// A single VulnerabilityAssessmentNote represents one particular product's vulnerability assessment for one CVE.
type VulnerabilityAssessmentNote struct {
	// Represents a vulnerability assessment for the product.
	Assessment *Assessment `pulumi:"assessment"`
	// Identifies the language used by this document, corresponding to IETF BCP 47 / RFC 5646.
	LanguageCode *string `pulumi:"languageCode"`
	// A detailed description of this Vex.
	LongDescription *string `pulumi:"longDescription"`
	// The product affected by this vex.
	Product *Product `pulumi:"product"`
	// Publisher details of this Note.
	Publisher *Publisher `pulumi:"publisher"`
	// A one sentence description of this Vex.
	ShortDescription *string `pulumi:"shortDescription"`
	// The title of the note. E.g. `Vex-Debian-11.4`
	Title *string `pulumi:"title"`
}

// VulnerabilityAssessmentNoteInput is an input type that accepts VulnerabilityAssessmentNoteArgs and VulnerabilityAssessmentNoteOutput values.
// You can construct a concrete instance of `VulnerabilityAssessmentNoteInput` via:
//
//	VulnerabilityAssessmentNoteArgs{...}
type VulnerabilityAssessmentNoteInput interface {
	pulumi.Input

	ToVulnerabilityAssessmentNoteOutput() VulnerabilityAssessmentNoteOutput
	ToVulnerabilityAssessmentNoteOutputWithContext(context.Context) VulnerabilityAssessmentNoteOutput
}

// A single VulnerabilityAssessmentNote represents one particular product's vulnerability assessment for one CVE.
type VulnerabilityAssessmentNoteArgs struct {
	// Represents a vulnerability assessment for the product.
	Assessment AssessmentPtrInput `pulumi:"assessment"`
	// Identifies the language used by this document, corresponding to IETF BCP 47 / RFC 5646.
	LanguageCode pulumi.StringPtrInput `pulumi:"languageCode"`
	// A detailed description of this Vex.
	LongDescription pulumi.StringPtrInput `pulumi:"longDescription"`
	// The product affected by this vex.
	Product ProductPtrInput `pulumi:"product"`
	// Publisher details of this Note.
	Publisher PublisherPtrInput `pulumi:"publisher"`
	// A one sentence description of this Vex.
	ShortDescription pulumi.StringPtrInput `pulumi:"shortDescription"`
	// The title of the note. E.g. `Vex-Debian-11.4`
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (VulnerabilityAssessmentNoteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VulnerabilityAssessmentNote)(nil)).Elem()
}

func (i VulnerabilityAssessmentNoteArgs) ToVulnerabilityAssessmentNoteOutput() VulnerabilityAssessmentNoteOutput {
	return i.ToVulnerabilityAssessmentNoteOutputWithContext(context.Background())
}

func (i VulnerabilityAssessmentNoteArgs) ToVulnerabilityAssessmentNoteOutputWithContext(ctx context.Context) VulnerabilityAssessmentNoteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityAssessmentNoteOutput)
}

func (i VulnerabilityAssessmentNoteArgs) ToVulnerabilityAssessmentNotePtrOutput() VulnerabilityAssessmentNotePtrOutput {
	return i.ToVulnerabilityAssessmentNotePtrOutputWithContext(context.Background())
}

func (i VulnerabilityAssessmentNoteArgs) ToVulnerabilityAssessmentNotePtrOutputWithContext(ctx context.Context) VulnerabilityAssessmentNotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityAssessmentNoteOutput).ToVulnerabilityAssessmentNotePtrOutputWithContext(ctx)
}

// VulnerabilityAssessmentNotePtrInput is an input type that accepts VulnerabilityAssessmentNoteArgs, VulnerabilityAssessmentNotePtr and VulnerabilityAssessmentNotePtrOutput values.
// You can construct a concrete instance of `VulnerabilityAssessmentNotePtrInput` via:
//
//	        VulnerabilityAssessmentNoteArgs{...}
//
//	or:
//
//	        nil
type VulnerabilityAssessmentNotePtrInput interface {
	pulumi.Input

	ToVulnerabilityAssessmentNotePtrOutput() VulnerabilityAssessmentNotePtrOutput
	ToVulnerabilityAssessmentNotePtrOutputWithContext(context.Context) VulnerabilityAssessmentNotePtrOutput
}

type vulnerabilityAssessmentNotePtrType VulnerabilityAssessmentNoteArgs

func VulnerabilityAssessmentNotePtr(v *VulnerabilityAssessmentNoteArgs) VulnerabilityAssessmentNotePtrInput {
	return (*vulnerabilityAssessmentNotePtrType)(v)
}

func (*vulnerabilityAssessmentNotePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VulnerabilityAssessmentNote)(nil)).Elem()
}

func (i *vulnerabilityAssessmentNotePtrType) ToVulnerabilityAssessmentNotePtrOutput() VulnerabilityAssessmentNotePtrOutput {
	return i.ToVulnerabilityAssessmentNotePtrOutputWithContext(context.Background())
}

func (i *vulnerabilityAssessmentNotePtrType) ToVulnerabilityAssessmentNotePtrOutputWithContext(ctx context.Context) VulnerabilityAssessmentNotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityAssessmentNotePtrOutput)
}

// A single VulnerabilityAssessmentNote represents one particular product's vulnerability assessment for one CVE.
type VulnerabilityAssessmentNoteOutput struct{ *pulumi.OutputState }

func (VulnerabilityAssessmentNoteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VulnerabilityAssessmentNote)(nil)).Elem()
}

func (o VulnerabilityAssessmentNoteOutput) ToVulnerabilityAssessmentNoteOutput() VulnerabilityAssessmentNoteOutput {
	return o
}

func (o VulnerabilityAssessmentNoteOutput) ToVulnerabilityAssessmentNoteOutputWithContext(ctx context.Context) VulnerabilityAssessmentNoteOutput {
	return o
}

func (o VulnerabilityAssessmentNoteOutput) ToVulnerabilityAssessmentNotePtrOutput() VulnerabilityAssessmentNotePtrOutput {
	return o.ToVulnerabilityAssessmentNotePtrOutputWithContext(context.Background())
}

func (o VulnerabilityAssessmentNoteOutput) ToVulnerabilityAssessmentNotePtrOutputWithContext(ctx context.Context) VulnerabilityAssessmentNotePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VulnerabilityAssessmentNote) *VulnerabilityAssessmentNote {
		return &v
	}).(VulnerabilityAssessmentNotePtrOutput)
}

// Represents a vulnerability assessment for the product.
func (o VulnerabilityAssessmentNoteOutput) Assessment() AssessmentPtrOutput {
	return o.ApplyT(func(v VulnerabilityAssessmentNote) *Assessment { return v.Assessment }).(AssessmentPtrOutput)
}

// Identifies the language used by this document, corresponding to IETF BCP 47 / RFC 5646.
func (o VulnerabilityAssessmentNoteOutput) LanguageCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VulnerabilityAssessmentNote) *string { return v.LanguageCode }).(pulumi.StringPtrOutput)
}

// A detailed description of this Vex.
func (o VulnerabilityAssessmentNoteOutput) LongDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VulnerabilityAssessmentNote) *string { return v.LongDescription }).(pulumi.StringPtrOutput)
}

// The product affected by this vex.
func (o VulnerabilityAssessmentNoteOutput) Product() ProductPtrOutput {
	return o.ApplyT(func(v VulnerabilityAssessmentNote) *Product { return v.Product }).(ProductPtrOutput)
}

// Publisher details of this Note.
func (o VulnerabilityAssessmentNoteOutput) Publisher() PublisherPtrOutput {
	return o.ApplyT(func(v VulnerabilityAssessmentNote) *Publisher { return v.Publisher }).(PublisherPtrOutput)
}

// A one sentence description of this Vex.
func (o VulnerabilityAssessmentNoteOutput) ShortDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VulnerabilityAssessmentNote) *string { return v.ShortDescription }).(pulumi.StringPtrOutput)
}

// The title of the note. E.g. `Vex-Debian-11.4`
func (o VulnerabilityAssessmentNoteOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VulnerabilityAssessmentNote) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type VulnerabilityAssessmentNotePtrOutput struct{ *pulumi.OutputState }

func (VulnerabilityAssessmentNotePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VulnerabilityAssessmentNote)(nil)).Elem()
}

func (o VulnerabilityAssessmentNotePtrOutput) ToVulnerabilityAssessmentNotePtrOutput() VulnerabilityAssessmentNotePtrOutput {
	return o
}

func (o VulnerabilityAssessmentNotePtrOutput) ToVulnerabilityAssessmentNotePtrOutputWithContext(ctx context.Context) VulnerabilityAssessmentNotePtrOutput {
	return o
}

func (o VulnerabilityAssessmentNotePtrOutput) Elem() VulnerabilityAssessmentNoteOutput {
	return o.ApplyT(func(v *VulnerabilityAssessmentNote) VulnerabilityAssessmentNote {
		if v != nil {
			return *v
		}
		var ret VulnerabilityAssessmentNote
		return ret
	}).(VulnerabilityAssessmentNoteOutput)
}

// Represents a vulnerability assessment for the product.
func (o VulnerabilityAssessmentNotePtrOutput) Assessment() AssessmentPtrOutput {
	return o.ApplyT(func(v *VulnerabilityAssessmentNote) *Assessment {
		if v == nil {
			return nil
		}
		return v.Assessment
	}).(AssessmentPtrOutput)
}

// Identifies the language used by this document, corresponding to IETF BCP 47 / RFC 5646.
func (o VulnerabilityAssessmentNotePtrOutput) LanguageCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VulnerabilityAssessmentNote) *string {
		if v == nil {
			return nil
		}
		return v.LanguageCode
	}).(pulumi.StringPtrOutput)
}

// A detailed description of this Vex.
func (o VulnerabilityAssessmentNotePtrOutput) LongDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VulnerabilityAssessmentNote) *string {
		if v == nil {
			return nil
		}
		return v.LongDescription
	}).(pulumi.StringPtrOutput)
}

// The product affected by this vex.
func (o VulnerabilityAssessmentNotePtrOutput) Product() ProductPtrOutput {
	return o.ApplyT(func(v *VulnerabilityAssessmentNote) *Product {
		if v == nil {
			return nil
		}
		return v.Product
	}).(ProductPtrOutput)
}

// Publisher details of this Note.
func (o VulnerabilityAssessmentNotePtrOutput) Publisher() PublisherPtrOutput {
	return o.ApplyT(func(v *VulnerabilityAssessmentNote) *Publisher {
		if v == nil {
			return nil
		}
		return v.Publisher
	}).(PublisherPtrOutput)
}

// A one sentence description of this Vex.
func (o VulnerabilityAssessmentNotePtrOutput) ShortDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VulnerabilityAssessmentNote) *string {
		if v == nil {
			return nil
		}
		return v.ShortDescription
	}).(pulumi.StringPtrOutput)
}

// The title of the note. E.g. `Vex-Debian-11.4`
func (o VulnerabilityAssessmentNotePtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VulnerabilityAssessmentNote) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// A single VulnerabilityAssessmentNote represents one particular product's vulnerability assessment for one CVE.
type VulnerabilityAssessmentNoteResponse struct {
	// Represents a vulnerability assessment for the product.
	Assessment AssessmentResponse `pulumi:"assessment"`
	// Identifies the language used by this document, corresponding to IETF BCP 47 / RFC 5646.
	LanguageCode string `pulumi:"languageCode"`
	// A detailed description of this Vex.
	LongDescription string `pulumi:"longDescription"`
	// The product affected by this vex.
	Product ProductResponse `pulumi:"product"`
	// Publisher details of this Note.
	Publisher PublisherResponse `pulumi:"publisher"`
	// A one sentence description of this Vex.
	ShortDescription string `pulumi:"shortDescription"`
	// The title of the note. E.g. `Vex-Debian-11.4`
	Title string `pulumi:"title"`
}

// A single VulnerabilityAssessmentNote represents one particular product's vulnerability assessment for one CVE.
type VulnerabilityAssessmentNoteResponseOutput struct{ *pulumi.OutputState }

func (VulnerabilityAssessmentNoteResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VulnerabilityAssessmentNoteResponse)(nil)).Elem()
}

func (o VulnerabilityAssessmentNoteResponseOutput) ToVulnerabilityAssessmentNoteResponseOutput() VulnerabilityAssessmentNoteResponseOutput {
	return o
}

func (o VulnerabilityAssessmentNoteResponseOutput) ToVulnerabilityAssessmentNoteResponseOutputWithContext(ctx context.Context) VulnerabilityAssessmentNoteResponseOutput {
	return o
}

// Represents a vulnerability assessment for the product.
func (o VulnerabilityAssessmentNoteResponseOutput) Assessment() AssessmentResponseOutput {
	return o.ApplyT(func(v VulnerabilityAssessmentNoteResponse) AssessmentResponse { return v.Assessment }).(AssessmentResponseOutput)
}

// Identifies the language used by this document, corresponding to IETF BCP 47 / RFC 5646.
func (o VulnerabilityAssessmentNoteResponseOutput) LanguageCode() pulumi.StringOutput {
	return o.ApplyT(func(v VulnerabilityAssessmentNoteResponse) string { return v.LanguageCode }).(pulumi.StringOutput)
}

// A detailed description of this Vex.
func (o VulnerabilityAssessmentNoteResponseOutput) LongDescription() pulumi.StringOutput {
	return o.ApplyT(func(v VulnerabilityAssessmentNoteResponse) string { return v.LongDescription }).(pulumi.StringOutput)
}

// The product affected by this vex.
func (o VulnerabilityAssessmentNoteResponseOutput) Product() ProductResponseOutput {
	return o.ApplyT(func(v VulnerabilityAssessmentNoteResponse) ProductResponse { return v.Product }).(ProductResponseOutput)
}

// Publisher details of this Note.
func (o VulnerabilityAssessmentNoteResponseOutput) Publisher() PublisherResponseOutput {
	return o.ApplyT(func(v VulnerabilityAssessmentNoteResponse) PublisherResponse { return v.Publisher }).(PublisherResponseOutput)
}

// A one sentence description of this Vex.
func (o VulnerabilityAssessmentNoteResponseOutput) ShortDescription() pulumi.StringOutput {
	return o.ApplyT(func(v VulnerabilityAssessmentNoteResponse) string { return v.ShortDescription }).(pulumi.StringOutput)
}

// The title of the note. E.g. `Vex-Debian-11.4`
func (o VulnerabilityAssessmentNoteResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v VulnerabilityAssessmentNoteResponse) string { return v.Title }).(pulumi.StringOutput)
}

// A security vulnerability that can be found in resources.
type VulnerabilityNote struct {
	// The CVSS score of this vulnerability. CVSS score is on a scale of 0 - 10 where 0 indicates low severity and 10 indicates high severity.
	CvssScore *float64 `pulumi:"cvssScore"`
	// The full description of the v2 CVSS for this vulnerability.
	CvssV2 *CVSS `pulumi:"cvssV2"`
	// The full description of the CVSSv3 for this vulnerability.
	CvssV3 *CVSSv3 `pulumi:"cvssV3"`
	// CVSS version used to populate cvss_score and severity.
	CvssVersion *VulnerabilityNoteCvssVersion `pulumi:"cvssVersion"`
	// Details of all known distros and packages affected by this vulnerability.
	Details []Detail `pulumi:"details"`
	// The note provider assigned severity of this vulnerability.
	Severity *VulnerabilityNoteSeverity `pulumi:"severity"`
	// The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.
	SourceUpdateTime *string `pulumi:"sourceUpdateTime"`
	// Windows details get their own format because the information format and model don't match a normal detail. Specifically Windows updates are done as patches, thus Windows vulnerabilities really are a missing package, rather than a package being at an incorrect version.
	WindowsDetails []WindowsDetail `pulumi:"windowsDetails"`
}

// VulnerabilityNoteInput is an input type that accepts VulnerabilityNoteArgs and VulnerabilityNoteOutput values.
// You can construct a concrete instance of `VulnerabilityNoteInput` via:
//
//	VulnerabilityNoteArgs{...}
type VulnerabilityNoteInput interface {
	pulumi.Input

	ToVulnerabilityNoteOutput() VulnerabilityNoteOutput
	ToVulnerabilityNoteOutputWithContext(context.Context) VulnerabilityNoteOutput
}

// A security vulnerability that can be found in resources.
type VulnerabilityNoteArgs struct {
	// The CVSS score of this vulnerability. CVSS score is on a scale of 0 - 10 where 0 indicates low severity and 10 indicates high severity.
	CvssScore pulumi.Float64PtrInput `pulumi:"cvssScore"`
	// The full description of the v2 CVSS for this vulnerability.
	CvssV2 CVSSPtrInput `pulumi:"cvssV2"`
	// The full description of the CVSSv3 for this vulnerability.
	CvssV3 CVSSv3PtrInput `pulumi:"cvssV3"`
	// CVSS version used to populate cvss_score and severity.
	CvssVersion VulnerabilityNoteCvssVersionPtrInput `pulumi:"cvssVersion"`
	// Details of all known distros and packages affected by this vulnerability.
	Details DetailArrayInput `pulumi:"details"`
	// The note provider assigned severity of this vulnerability.
	Severity VulnerabilityNoteSeverityPtrInput `pulumi:"severity"`
	// The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.
	SourceUpdateTime pulumi.StringPtrInput `pulumi:"sourceUpdateTime"`
	// Windows details get their own format because the information format and model don't match a normal detail. Specifically Windows updates are done as patches, thus Windows vulnerabilities really are a missing package, rather than a package being at an incorrect version.
	WindowsDetails WindowsDetailArrayInput `pulumi:"windowsDetails"`
}

func (VulnerabilityNoteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VulnerabilityNote)(nil)).Elem()
}

func (i VulnerabilityNoteArgs) ToVulnerabilityNoteOutput() VulnerabilityNoteOutput {
	return i.ToVulnerabilityNoteOutputWithContext(context.Background())
}

func (i VulnerabilityNoteArgs) ToVulnerabilityNoteOutputWithContext(ctx context.Context) VulnerabilityNoteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityNoteOutput)
}

func (i VulnerabilityNoteArgs) ToVulnerabilityNotePtrOutput() VulnerabilityNotePtrOutput {
	return i.ToVulnerabilityNotePtrOutputWithContext(context.Background())
}

func (i VulnerabilityNoteArgs) ToVulnerabilityNotePtrOutputWithContext(ctx context.Context) VulnerabilityNotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityNoteOutput).ToVulnerabilityNotePtrOutputWithContext(ctx)
}

// VulnerabilityNotePtrInput is an input type that accepts VulnerabilityNoteArgs, VulnerabilityNotePtr and VulnerabilityNotePtrOutput values.
// You can construct a concrete instance of `VulnerabilityNotePtrInput` via:
//
//	        VulnerabilityNoteArgs{...}
//
//	or:
//
//	        nil
type VulnerabilityNotePtrInput interface {
	pulumi.Input

	ToVulnerabilityNotePtrOutput() VulnerabilityNotePtrOutput
	ToVulnerabilityNotePtrOutputWithContext(context.Context) VulnerabilityNotePtrOutput
}

type vulnerabilityNotePtrType VulnerabilityNoteArgs

func VulnerabilityNotePtr(v *VulnerabilityNoteArgs) VulnerabilityNotePtrInput {
	return (*vulnerabilityNotePtrType)(v)
}

func (*vulnerabilityNotePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VulnerabilityNote)(nil)).Elem()
}

func (i *vulnerabilityNotePtrType) ToVulnerabilityNotePtrOutput() VulnerabilityNotePtrOutput {
	return i.ToVulnerabilityNotePtrOutputWithContext(context.Background())
}

func (i *vulnerabilityNotePtrType) ToVulnerabilityNotePtrOutputWithContext(ctx context.Context) VulnerabilityNotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityNotePtrOutput)
}

// A security vulnerability that can be found in resources.
type VulnerabilityNoteOutput struct{ *pulumi.OutputState }

func (VulnerabilityNoteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VulnerabilityNote)(nil)).Elem()
}

func (o VulnerabilityNoteOutput) ToVulnerabilityNoteOutput() VulnerabilityNoteOutput {
	return o
}

func (o VulnerabilityNoteOutput) ToVulnerabilityNoteOutputWithContext(ctx context.Context) VulnerabilityNoteOutput {
	return o
}

func (o VulnerabilityNoteOutput) ToVulnerabilityNotePtrOutput() VulnerabilityNotePtrOutput {
	return o.ToVulnerabilityNotePtrOutputWithContext(context.Background())
}

func (o VulnerabilityNoteOutput) ToVulnerabilityNotePtrOutputWithContext(ctx context.Context) VulnerabilityNotePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VulnerabilityNote) *VulnerabilityNote {
		return &v
	}).(VulnerabilityNotePtrOutput)
}

// The CVSS score of this vulnerability. CVSS score is on a scale of 0 - 10 where 0 indicates low severity and 10 indicates high severity.
func (o VulnerabilityNoteOutput) CvssScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v VulnerabilityNote) *float64 { return v.CvssScore }).(pulumi.Float64PtrOutput)
}

// The full description of the v2 CVSS for this vulnerability.
func (o VulnerabilityNoteOutput) CvssV2() CVSSPtrOutput {
	return o.ApplyT(func(v VulnerabilityNote) *CVSS { return v.CvssV2 }).(CVSSPtrOutput)
}

// The full description of the CVSSv3 for this vulnerability.
func (o VulnerabilityNoteOutput) CvssV3() CVSSv3PtrOutput {
	return o.ApplyT(func(v VulnerabilityNote) *CVSSv3 { return v.CvssV3 }).(CVSSv3PtrOutput)
}

// CVSS version used to populate cvss_score and severity.
func (o VulnerabilityNoteOutput) CvssVersion() VulnerabilityNoteCvssVersionPtrOutput {
	return o.ApplyT(func(v VulnerabilityNote) *VulnerabilityNoteCvssVersion { return v.CvssVersion }).(VulnerabilityNoteCvssVersionPtrOutput)
}

// Details of all known distros and packages affected by this vulnerability.
func (o VulnerabilityNoteOutput) Details() DetailArrayOutput {
	return o.ApplyT(func(v VulnerabilityNote) []Detail { return v.Details }).(DetailArrayOutput)
}

// The note provider assigned severity of this vulnerability.
func (o VulnerabilityNoteOutput) Severity() VulnerabilityNoteSeverityPtrOutput {
	return o.ApplyT(func(v VulnerabilityNote) *VulnerabilityNoteSeverity { return v.Severity }).(VulnerabilityNoteSeverityPtrOutput)
}

// The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.
func (o VulnerabilityNoteOutput) SourceUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VulnerabilityNote) *string { return v.SourceUpdateTime }).(pulumi.StringPtrOutput)
}

// Windows details get their own format because the information format and model don't match a normal detail. Specifically Windows updates are done as patches, thus Windows vulnerabilities really are a missing package, rather than a package being at an incorrect version.
func (o VulnerabilityNoteOutput) WindowsDetails() WindowsDetailArrayOutput {
	return o.ApplyT(func(v VulnerabilityNote) []WindowsDetail { return v.WindowsDetails }).(WindowsDetailArrayOutput)
}

type VulnerabilityNotePtrOutput struct{ *pulumi.OutputState }

func (VulnerabilityNotePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VulnerabilityNote)(nil)).Elem()
}

func (o VulnerabilityNotePtrOutput) ToVulnerabilityNotePtrOutput() VulnerabilityNotePtrOutput {
	return o
}

func (o VulnerabilityNotePtrOutput) ToVulnerabilityNotePtrOutputWithContext(ctx context.Context) VulnerabilityNotePtrOutput {
	return o
}

func (o VulnerabilityNotePtrOutput) Elem() VulnerabilityNoteOutput {
	return o.ApplyT(func(v *VulnerabilityNote) VulnerabilityNote {
		if v != nil {
			return *v
		}
		var ret VulnerabilityNote
		return ret
	}).(VulnerabilityNoteOutput)
}

// The CVSS score of this vulnerability. CVSS score is on a scale of 0 - 10 where 0 indicates low severity and 10 indicates high severity.
func (o VulnerabilityNotePtrOutput) CvssScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *VulnerabilityNote) *float64 {
		if v == nil {
			return nil
		}
		return v.CvssScore
	}).(pulumi.Float64PtrOutput)
}

// The full description of the v2 CVSS for this vulnerability.
func (o VulnerabilityNotePtrOutput) CvssV2() CVSSPtrOutput {
	return o.ApplyT(func(v *VulnerabilityNote) *CVSS {
		if v == nil {
			return nil
		}
		return v.CvssV2
	}).(CVSSPtrOutput)
}

// The full description of the CVSSv3 for this vulnerability.
func (o VulnerabilityNotePtrOutput) CvssV3() CVSSv3PtrOutput {
	return o.ApplyT(func(v *VulnerabilityNote) *CVSSv3 {
		if v == nil {
			return nil
		}
		return v.CvssV3
	}).(CVSSv3PtrOutput)
}

// CVSS version used to populate cvss_score and severity.
func (o VulnerabilityNotePtrOutput) CvssVersion() VulnerabilityNoteCvssVersionPtrOutput {
	return o.ApplyT(func(v *VulnerabilityNote) *VulnerabilityNoteCvssVersion {
		if v == nil {
			return nil
		}
		return v.CvssVersion
	}).(VulnerabilityNoteCvssVersionPtrOutput)
}

// Details of all known distros and packages affected by this vulnerability.
func (o VulnerabilityNotePtrOutput) Details() DetailArrayOutput {
	return o.ApplyT(func(v *VulnerabilityNote) []Detail {
		if v == nil {
			return nil
		}
		return v.Details
	}).(DetailArrayOutput)
}

// The note provider assigned severity of this vulnerability.
func (o VulnerabilityNotePtrOutput) Severity() VulnerabilityNoteSeverityPtrOutput {
	return o.ApplyT(func(v *VulnerabilityNote) *VulnerabilityNoteSeverity {
		if v == nil {
			return nil
		}
		return v.Severity
	}).(VulnerabilityNoteSeverityPtrOutput)
}

// The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.
func (o VulnerabilityNotePtrOutput) SourceUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VulnerabilityNote) *string {
		if v == nil {
			return nil
		}
		return v.SourceUpdateTime
	}).(pulumi.StringPtrOutput)
}

// Windows details get their own format because the information format and model don't match a normal detail. Specifically Windows updates are done as patches, thus Windows vulnerabilities really are a missing package, rather than a package being at an incorrect version.
func (o VulnerabilityNotePtrOutput) WindowsDetails() WindowsDetailArrayOutput {
	return o.ApplyT(func(v *VulnerabilityNote) []WindowsDetail {
		if v == nil {
			return nil
		}
		return v.WindowsDetails
	}).(WindowsDetailArrayOutput)
}

// A security vulnerability that can be found in resources.
type VulnerabilityNoteResponse struct {
	// The CVSS score of this vulnerability. CVSS score is on a scale of 0 - 10 where 0 indicates low severity and 10 indicates high severity.
	CvssScore float64 `pulumi:"cvssScore"`
	// The full description of the v2 CVSS for this vulnerability.
	CvssV2 CVSSResponse `pulumi:"cvssV2"`
	// The full description of the CVSSv3 for this vulnerability.
	CvssV3 CVSSv3Response `pulumi:"cvssV3"`
	// CVSS version used to populate cvss_score and severity.
	CvssVersion string `pulumi:"cvssVersion"`
	// Details of all known distros and packages affected by this vulnerability.
	Details []DetailResponse `pulumi:"details"`
	// The note provider assigned severity of this vulnerability.
	Severity string `pulumi:"severity"`
	// The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.
	SourceUpdateTime string `pulumi:"sourceUpdateTime"`
	// Windows details get their own format because the information format and model don't match a normal detail. Specifically Windows updates are done as patches, thus Windows vulnerabilities really are a missing package, rather than a package being at an incorrect version.
	WindowsDetails []WindowsDetailResponse `pulumi:"windowsDetails"`
}

// A security vulnerability that can be found in resources.
type VulnerabilityNoteResponseOutput struct{ *pulumi.OutputState }

func (VulnerabilityNoteResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VulnerabilityNoteResponse)(nil)).Elem()
}

func (o VulnerabilityNoteResponseOutput) ToVulnerabilityNoteResponseOutput() VulnerabilityNoteResponseOutput {
	return o
}

func (o VulnerabilityNoteResponseOutput) ToVulnerabilityNoteResponseOutputWithContext(ctx context.Context) VulnerabilityNoteResponseOutput {
	return o
}

// The CVSS score of this vulnerability. CVSS score is on a scale of 0 - 10 where 0 indicates low severity and 10 indicates high severity.
func (o VulnerabilityNoteResponseOutput) CvssScore() pulumi.Float64Output {
	return o.ApplyT(func(v VulnerabilityNoteResponse) float64 { return v.CvssScore }).(pulumi.Float64Output)
}

// The full description of the v2 CVSS for this vulnerability.
func (o VulnerabilityNoteResponseOutput) CvssV2() CVSSResponseOutput {
	return o.ApplyT(func(v VulnerabilityNoteResponse) CVSSResponse { return v.CvssV2 }).(CVSSResponseOutput)
}

// The full description of the CVSSv3 for this vulnerability.
func (o VulnerabilityNoteResponseOutput) CvssV3() CVSSv3ResponseOutput {
	return o.ApplyT(func(v VulnerabilityNoteResponse) CVSSv3Response { return v.CvssV3 }).(CVSSv3ResponseOutput)
}

// CVSS version used to populate cvss_score and severity.
func (o VulnerabilityNoteResponseOutput) CvssVersion() pulumi.StringOutput {
	return o.ApplyT(func(v VulnerabilityNoteResponse) string { return v.CvssVersion }).(pulumi.StringOutput)
}

// Details of all known distros and packages affected by this vulnerability.
func (o VulnerabilityNoteResponseOutput) Details() DetailResponseArrayOutput {
	return o.ApplyT(func(v VulnerabilityNoteResponse) []DetailResponse { return v.Details }).(DetailResponseArrayOutput)
}

// The note provider assigned severity of this vulnerability.
func (o VulnerabilityNoteResponseOutput) Severity() pulumi.StringOutput {
	return o.ApplyT(func(v VulnerabilityNoteResponse) string { return v.Severity }).(pulumi.StringOutput)
}

// The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.
func (o VulnerabilityNoteResponseOutput) SourceUpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v VulnerabilityNoteResponse) string { return v.SourceUpdateTime }).(pulumi.StringOutput)
}

// Windows details get their own format because the information format and model don't match a normal detail. Specifically Windows updates are done as patches, thus Windows vulnerabilities really are a missing package, rather than a package being at an incorrect version.
func (o VulnerabilityNoteResponseOutput) WindowsDetails() WindowsDetailResponseArrayOutput {
	return o.ApplyT(func(v VulnerabilityNoteResponse) []WindowsDetailResponse { return v.WindowsDetails }).(WindowsDetailResponseArrayOutput)
}

// An occurrence of a severity vulnerability on a resource.
type VulnerabilityOccurrence struct {
	// The cvss v2 score for the vulnerability.
	CvssV2 *CVSS `pulumi:"cvssV2"`
	// The cvss v3 score for the vulnerability.
	Cvssv3 *CVSS `pulumi:"cvssv3"`
	// The distro assigned severity for this vulnerability when it is available, otherwise this is the note provider assigned severity. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues.
	EffectiveSeverity *VulnerabilityOccurrenceEffectiveSeverity `pulumi:"effectiveSeverity"`
	// Occurrence-specific extra details about the vulnerability.
	ExtraDetails *string `pulumi:"extraDetails"`
	// The set of affected locations and their fixes (if available) within the associated resource.
	PackageIssue []PackageIssue `pulumi:"packageIssue"`
	// The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
	Type          *string        `pulumi:"type"`
	VexAssessment *VexAssessment `pulumi:"vexAssessment"`
}

// VulnerabilityOccurrenceInput is an input type that accepts VulnerabilityOccurrenceArgs and VulnerabilityOccurrenceOutput values.
// You can construct a concrete instance of `VulnerabilityOccurrenceInput` via:
//
//	VulnerabilityOccurrenceArgs{...}
type VulnerabilityOccurrenceInput interface {
	pulumi.Input

	ToVulnerabilityOccurrenceOutput() VulnerabilityOccurrenceOutput
	ToVulnerabilityOccurrenceOutputWithContext(context.Context) VulnerabilityOccurrenceOutput
}

// An occurrence of a severity vulnerability on a resource.
type VulnerabilityOccurrenceArgs struct {
	// The cvss v2 score for the vulnerability.
	CvssV2 CVSSPtrInput `pulumi:"cvssV2"`
	// The cvss v3 score for the vulnerability.
	Cvssv3 CVSSPtrInput `pulumi:"cvssv3"`
	// The distro assigned severity for this vulnerability when it is available, otherwise this is the note provider assigned severity. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues.
	EffectiveSeverity VulnerabilityOccurrenceEffectiveSeverityPtrInput `pulumi:"effectiveSeverity"`
	// Occurrence-specific extra details about the vulnerability.
	ExtraDetails pulumi.StringPtrInput `pulumi:"extraDetails"`
	// The set of affected locations and their fixes (if available) within the associated resource.
	PackageIssue PackageIssueArrayInput `pulumi:"packageIssue"`
	// The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
	Type          pulumi.StringPtrInput `pulumi:"type"`
	VexAssessment VexAssessmentPtrInput `pulumi:"vexAssessment"`
}

func (VulnerabilityOccurrenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VulnerabilityOccurrence)(nil)).Elem()
}

func (i VulnerabilityOccurrenceArgs) ToVulnerabilityOccurrenceOutput() VulnerabilityOccurrenceOutput {
	return i.ToVulnerabilityOccurrenceOutputWithContext(context.Background())
}

func (i VulnerabilityOccurrenceArgs) ToVulnerabilityOccurrenceOutputWithContext(ctx context.Context) VulnerabilityOccurrenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityOccurrenceOutput)
}

func (i VulnerabilityOccurrenceArgs) ToVulnerabilityOccurrencePtrOutput() VulnerabilityOccurrencePtrOutput {
	return i.ToVulnerabilityOccurrencePtrOutputWithContext(context.Background())
}

func (i VulnerabilityOccurrenceArgs) ToVulnerabilityOccurrencePtrOutputWithContext(ctx context.Context) VulnerabilityOccurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityOccurrenceOutput).ToVulnerabilityOccurrencePtrOutputWithContext(ctx)
}

// VulnerabilityOccurrencePtrInput is an input type that accepts VulnerabilityOccurrenceArgs, VulnerabilityOccurrencePtr and VulnerabilityOccurrencePtrOutput values.
// You can construct a concrete instance of `VulnerabilityOccurrencePtrInput` via:
//
//	        VulnerabilityOccurrenceArgs{...}
//
//	or:
//
//	        nil
type VulnerabilityOccurrencePtrInput interface {
	pulumi.Input

	ToVulnerabilityOccurrencePtrOutput() VulnerabilityOccurrencePtrOutput
	ToVulnerabilityOccurrencePtrOutputWithContext(context.Context) VulnerabilityOccurrencePtrOutput
}

type vulnerabilityOccurrencePtrType VulnerabilityOccurrenceArgs

func VulnerabilityOccurrencePtr(v *VulnerabilityOccurrenceArgs) VulnerabilityOccurrencePtrInput {
	return (*vulnerabilityOccurrencePtrType)(v)
}

func (*vulnerabilityOccurrencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VulnerabilityOccurrence)(nil)).Elem()
}

func (i *vulnerabilityOccurrencePtrType) ToVulnerabilityOccurrencePtrOutput() VulnerabilityOccurrencePtrOutput {
	return i.ToVulnerabilityOccurrencePtrOutputWithContext(context.Background())
}

func (i *vulnerabilityOccurrencePtrType) ToVulnerabilityOccurrencePtrOutputWithContext(ctx context.Context) VulnerabilityOccurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityOccurrencePtrOutput)
}

// An occurrence of a severity vulnerability on a resource.
type VulnerabilityOccurrenceOutput struct{ *pulumi.OutputState }

func (VulnerabilityOccurrenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VulnerabilityOccurrence)(nil)).Elem()
}

func (o VulnerabilityOccurrenceOutput) ToVulnerabilityOccurrenceOutput() VulnerabilityOccurrenceOutput {
	return o
}

func (o VulnerabilityOccurrenceOutput) ToVulnerabilityOccurrenceOutputWithContext(ctx context.Context) VulnerabilityOccurrenceOutput {
	return o
}

func (o VulnerabilityOccurrenceOutput) ToVulnerabilityOccurrencePtrOutput() VulnerabilityOccurrencePtrOutput {
	return o.ToVulnerabilityOccurrencePtrOutputWithContext(context.Background())
}

func (o VulnerabilityOccurrenceOutput) ToVulnerabilityOccurrencePtrOutputWithContext(ctx context.Context) VulnerabilityOccurrencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VulnerabilityOccurrence) *VulnerabilityOccurrence {
		return &v
	}).(VulnerabilityOccurrencePtrOutput)
}

// The cvss v2 score for the vulnerability.
func (o VulnerabilityOccurrenceOutput) CvssV2() CVSSPtrOutput {
	return o.ApplyT(func(v VulnerabilityOccurrence) *CVSS { return v.CvssV2 }).(CVSSPtrOutput)
}

// The cvss v3 score for the vulnerability.
func (o VulnerabilityOccurrenceOutput) Cvssv3() CVSSPtrOutput {
	return o.ApplyT(func(v VulnerabilityOccurrence) *CVSS { return v.Cvssv3 }).(CVSSPtrOutput)
}

// The distro assigned severity for this vulnerability when it is available, otherwise this is the note provider assigned severity. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues.
func (o VulnerabilityOccurrenceOutput) EffectiveSeverity() VulnerabilityOccurrenceEffectiveSeverityPtrOutput {
	return o.ApplyT(func(v VulnerabilityOccurrence) *VulnerabilityOccurrenceEffectiveSeverity { return v.EffectiveSeverity }).(VulnerabilityOccurrenceEffectiveSeverityPtrOutput)
}

// Occurrence-specific extra details about the vulnerability.
func (o VulnerabilityOccurrenceOutput) ExtraDetails() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VulnerabilityOccurrence) *string { return v.ExtraDetails }).(pulumi.StringPtrOutput)
}

// The set of affected locations and their fixes (if available) within the associated resource.
func (o VulnerabilityOccurrenceOutput) PackageIssue() PackageIssueArrayOutput {
	return o.ApplyT(func(v VulnerabilityOccurrence) []PackageIssue { return v.PackageIssue }).(PackageIssueArrayOutput)
}

// The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
func (o VulnerabilityOccurrenceOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VulnerabilityOccurrence) *string { return v.Type }).(pulumi.StringPtrOutput)
}

func (o VulnerabilityOccurrenceOutput) VexAssessment() VexAssessmentPtrOutput {
	return o.ApplyT(func(v VulnerabilityOccurrence) *VexAssessment { return v.VexAssessment }).(VexAssessmentPtrOutput)
}

type VulnerabilityOccurrencePtrOutput struct{ *pulumi.OutputState }

func (VulnerabilityOccurrencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VulnerabilityOccurrence)(nil)).Elem()
}

func (o VulnerabilityOccurrencePtrOutput) ToVulnerabilityOccurrencePtrOutput() VulnerabilityOccurrencePtrOutput {
	return o
}

func (o VulnerabilityOccurrencePtrOutput) ToVulnerabilityOccurrencePtrOutputWithContext(ctx context.Context) VulnerabilityOccurrencePtrOutput {
	return o
}

func (o VulnerabilityOccurrencePtrOutput) Elem() VulnerabilityOccurrenceOutput {
	return o.ApplyT(func(v *VulnerabilityOccurrence) VulnerabilityOccurrence {
		if v != nil {
			return *v
		}
		var ret VulnerabilityOccurrence
		return ret
	}).(VulnerabilityOccurrenceOutput)
}

// The cvss v2 score for the vulnerability.
func (o VulnerabilityOccurrencePtrOutput) CvssV2() CVSSPtrOutput {
	return o.ApplyT(func(v *VulnerabilityOccurrence) *CVSS {
		if v == nil {
			return nil
		}
		return v.CvssV2
	}).(CVSSPtrOutput)
}

// The cvss v3 score for the vulnerability.
func (o VulnerabilityOccurrencePtrOutput) Cvssv3() CVSSPtrOutput {
	return o.ApplyT(func(v *VulnerabilityOccurrence) *CVSS {
		if v == nil {
			return nil
		}
		return v.Cvssv3
	}).(CVSSPtrOutput)
}

// The distro assigned severity for this vulnerability when it is available, otherwise this is the note provider assigned severity. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues.
func (o VulnerabilityOccurrencePtrOutput) EffectiveSeverity() VulnerabilityOccurrenceEffectiveSeverityPtrOutput {
	return o.ApplyT(func(v *VulnerabilityOccurrence) *VulnerabilityOccurrenceEffectiveSeverity {
		if v == nil {
			return nil
		}
		return v.EffectiveSeverity
	}).(VulnerabilityOccurrenceEffectiveSeverityPtrOutput)
}

// Occurrence-specific extra details about the vulnerability.
func (o VulnerabilityOccurrencePtrOutput) ExtraDetails() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VulnerabilityOccurrence) *string {
		if v == nil {
			return nil
		}
		return v.ExtraDetails
	}).(pulumi.StringPtrOutput)
}

// The set of affected locations and their fixes (if available) within the associated resource.
func (o VulnerabilityOccurrencePtrOutput) PackageIssue() PackageIssueArrayOutput {
	return o.ApplyT(func(v *VulnerabilityOccurrence) []PackageIssue {
		if v == nil {
			return nil
		}
		return v.PackageIssue
	}).(PackageIssueArrayOutput)
}

// The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
func (o VulnerabilityOccurrencePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VulnerabilityOccurrence) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

func (o VulnerabilityOccurrencePtrOutput) VexAssessment() VexAssessmentPtrOutput {
	return o.ApplyT(func(v *VulnerabilityOccurrence) *VexAssessment {
		if v == nil {
			return nil
		}
		return v.VexAssessment
	}).(VexAssessmentPtrOutput)
}

// An occurrence of a severity vulnerability on a resource.
type VulnerabilityOccurrenceResponse struct {
	// The CVSS score of this vulnerability. CVSS score is on a scale of 0 - 10 where 0 indicates low severity and 10 indicates high severity.
	CvssScore float64 `pulumi:"cvssScore"`
	// The cvss v2 score for the vulnerability.
	CvssV2 CVSSResponse `pulumi:"cvssV2"`
	// CVSS version used to populate cvss_score and severity.
	CvssVersion string `pulumi:"cvssVersion"`
	// The cvss v3 score for the vulnerability.
	Cvssv3 CVSSResponse `pulumi:"cvssv3"`
	// The distro assigned severity for this vulnerability when it is available, otherwise this is the note provider assigned severity. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues.
	EffectiveSeverity string `pulumi:"effectiveSeverity"`
	// Occurrence-specific extra details about the vulnerability.
	ExtraDetails string `pulumi:"extraDetails"`
	// Whether at least one of the affected packages has a fix available.
	FixAvailable bool `pulumi:"fixAvailable"`
	// A detailed description of this vulnerability.
	LongDescription string `pulumi:"longDescription"`
	// The set of affected locations and their fixes (if available) within the associated resource.
	PackageIssue []PackageIssueResponse `pulumi:"packageIssue"`
	// URLs related to this vulnerability.
	RelatedUrls []RelatedUrlResponse `pulumi:"relatedUrls"`
	// The note provider assigned severity of this vulnerability.
	Severity string `pulumi:"severity"`
	// A one sentence description of this vulnerability.
	ShortDescription string `pulumi:"shortDescription"`
	// The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
	Type          string                `pulumi:"type"`
	VexAssessment VexAssessmentResponse `pulumi:"vexAssessment"`
}

// An occurrence of a severity vulnerability on a resource.
type VulnerabilityOccurrenceResponseOutput struct{ *pulumi.OutputState }

func (VulnerabilityOccurrenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VulnerabilityOccurrenceResponse)(nil)).Elem()
}

func (o VulnerabilityOccurrenceResponseOutput) ToVulnerabilityOccurrenceResponseOutput() VulnerabilityOccurrenceResponseOutput {
	return o
}

func (o VulnerabilityOccurrenceResponseOutput) ToVulnerabilityOccurrenceResponseOutputWithContext(ctx context.Context) VulnerabilityOccurrenceResponseOutput {
	return o
}

// The CVSS score of this vulnerability. CVSS score is on a scale of 0 - 10 where 0 indicates low severity and 10 indicates high severity.
func (o VulnerabilityOccurrenceResponseOutput) CvssScore() pulumi.Float64Output {
	return o.ApplyT(func(v VulnerabilityOccurrenceResponse) float64 { return v.CvssScore }).(pulumi.Float64Output)
}

// The cvss v2 score for the vulnerability.
func (o VulnerabilityOccurrenceResponseOutput) CvssV2() CVSSResponseOutput {
	return o.ApplyT(func(v VulnerabilityOccurrenceResponse) CVSSResponse { return v.CvssV2 }).(CVSSResponseOutput)
}

// CVSS version used to populate cvss_score and severity.
func (o VulnerabilityOccurrenceResponseOutput) CvssVersion() pulumi.StringOutput {
	return o.ApplyT(func(v VulnerabilityOccurrenceResponse) string { return v.CvssVersion }).(pulumi.StringOutput)
}

// The cvss v3 score for the vulnerability.
func (o VulnerabilityOccurrenceResponseOutput) Cvssv3() CVSSResponseOutput {
	return o.ApplyT(func(v VulnerabilityOccurrenceResponse) CVSSResponse { return v.Cvssv3 }).(CVSSResponseOutput)
}

// The distro assigned severity for this vulnerability when it is available, otherwise this is the note provider assigned severity. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues.
func (o VulnerabilityOccurrenceResponseOutput) EffectiveSeverity() pulumi.StringOutput {
	return o.ApplyT(func(v VulnerabilityOccurrenceResponse) string { return v.EffectiveSeverity }).(pulumi.StringOutput)
}

// Occurrence-specific extra details about the vulnerability.
func (o VulnerabilityOccurrenceResponseOutput) ExtraDetails() pulumi.StringOutput {
	return o.ApplyT(func(v VulnerabilityOccurrenceResponse) string { return v.ExtraDetails }).(pulumi.StringOutput)
}

// Whether at least one of the affected packages has a fix available.
func (o VulnerabilityOccurrenceResponseOutput) FixAvailable() pulumi.BoolOutput {
	return o.ApplyT(func(v VulnerabilityOccurrenceResponse) bool { return v.FixAvailable }).(pulumi.BoolOutput)
}

// A detailed description of this vulnerability.
func (o VulnerabilityOccurrenceResponseOutput) LongDescription() pulumi.StringOutput {
	return o.ApplyT(func(v VulnerabilityOccurrenceResponse) string { return v.LongDescription }).(pulumi.StringOutput)
}

// The set of affected locations and their fixes (if available) within the associated resource.
func (o VulnerabilityOccurrenceResponseOutput) PackageIssue() PackageIssueResponseArrayOutput {
	return o.ApplyT(func(v VulnerabilityOccurrenceResponse) []PackageIssueResponse { return v.PackageIssue }).(PackageIssueResponseArrayOutput)
}

// URLs related to this vulnerability.
func (o VulnerabilityOccurrenceResponseOutput) RelatedUrls() RelatedUrlResponseArrayOutput {
	return o.ApplyT(func(v VulnerabilityOccurrenceResponse) []RelatedUrlResponse { return v.RelatedUrls }).(RelatedUrlResponseArrayOutput)
}

// The note provider assigned severity of this vulnerability.
func (o VulnerabilityOccurrenceResponseOutput) Severity() pulumi.StringOutput {
	return o.ApplyT(func(v VulnerabilityOccurrenceResponse) string { return v.Severity }).(pulumi.StringOutput)
}

// A one sentence description of this vulnerability.
func (o VulnerabilityOccurrenceResponseOutput) ShortDescription() pulumi.StringOutput {
	return o.ApplyT(func(v VulnerabilityOccurrenceResponse) string { return v.ShortDescription }).(pulumi.StringOutput)
}

// The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
func (o VulnerabilityOccurrenceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v VulnerabilityOccurrenceResponse) string { return v.Type }).(pulumi.StringOutput)
}

func (o VulnerabilityOccurrenceResponseOutput) VexAssessment() VexAssessmentResponseOutput {
	return o.ApplyT(func(v VulnerabilityOccurrenceResponse) VexAssessmentResponse { return v.VexAssessment }).(VexAssessmentResponseOutput)
}

type WindowsDetail struct {
	// The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability affects.
	CpeUri string `pulumi:"cpeUri"`
	// The description of this vulnerability.
	Description *string `pulumi:"description"`
	// The names of the KBs which have hotfixes to mitigate this vulnerability. Note that there may be multiple hotfixes (and thus multiple KBs) that mitigate a given vulnerability. Currently any listed KBs presence is considered a fix.
	FixingKbs []KnowledgeBase `pulumi:"fixingKbs"`
	// The name of this vulnerability.
	Name string `pulumi:"name"`
}

// WindowsDetailInput is an input type that accepts WindowsDetailArgs and WindowsDetailOutput values.
// You can construct a concrete instance of `WindowsDetailInput` via:
//
//	WindowsDetailArgs{...}
type WindowsDetailInput interface {
	pulumi.Input

	ToWindowsDetailOutput() WindowsDetailOutput
	ToWindowsDetailOutputWithContext(context.Context) WindowsDetailOutput
}

type WindowsDetailArgs struct {
	// The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability affects.
	CpeUri pulumi.StringInput `pulumi:"cpeUri"`
	// The description of this vulnerability.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The names of the KBs which have hotfixes to mitigate this vulnerability. Note that there may be multiple hotfixes (and thus multiple KBs) that mitigate a given vulnerability. Currently any listed KBs presence is considered a fix.
	FixingKbs KnowledgeBaseArrayInput `pulumi:"fixingKbs"`
	// The name of this vulnerability.
	Name pulumi.StringInput `pulumi:"name"`
}

func (WindowsDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsDetail)(nil)).Elem()
}

func (i WindowsDetailArgs) ToWindowsDetailOutput() WindowsDetailOutput {
	return i.ToWindowsDetailOutputWithContext(context.Background())
}

func (i WindowsDetailArgs) ToWindowsDetailOutputWithContext(ctx context.Context) WindowsDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsDetailOutput)
}

// WindowsDetailArrayInput is an input type that accepts WindowsDetailArray and WindowsDetailArrayOutput values.
// You can construct a concrete instance of `WindowsDetailArrayInput` via:
//
//	WindowsDetailArray{ WindowsDetailArgs{...} }
type WindowsDetailArrayInput interface {
	pulumi.Input

	ToWindowsDetailArrayOutput() WindowsDetailArrayOutput
	ToWindowsDetailArrayOutputWithContext(context.Context) WindowsDetailArrayOutput
}

type WindowsDetailArray []WindowsDetailInput

func (WindowsDetailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WindowsDetail)(nil)).Elem()
}

func (i WindowsDetailArray) ToWindowsDetailArrayOutput() WindowsDetailArrayOutput {
	return i.ToWindowsDetailArrayOutputWithContext(context.Background())
}

func (i WindowsDetailArray) ToWindowsDetailArrayOutputWithContext(ctx context.Context) WindowsDetailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsDetailArrayOutput)
}

type WindowsDetailOutput struct{ *pulumi.OutputState }

func (WindowsDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsDetail)(nil)).Elem()
}

func (o WindowsDetailOutput) ToWindowsDetailOutput() WindowsDetailOutput {
	return o
}

func (o WindowsDetailOutput) ToWindowsDetailOutputWithContext(ctx context.Context) WindowsDetailOutput {
	return o
}

// The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability affects.
func (o WindowsDetailOutput) CpeUri() pulumi.StringOutput {
	return o.ApplyT(func(v WindowsDetail) string { return v.CpeUri }).(pulumi.StringOutput)
}

// The description of this vulnerability.
func (o WindowsDetailOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WindowsDetail) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The names of the KBs which have hotfixes to mitigate this vulnerability. Note that there may be multiple hotfixes (and thus multiple KBs) that mitigate a given vulnerability. Currently any listed KBs presence is considered a fix.
func (o WindowsDetailOutput) FixingKbs() KnowledgeBaseArrayOutput {
	return o.ApplyT(func(v WindowsDetail) []KnowledgeBase { return v.FixingKbs }).(KnowledgeBaseArrayOutput)
}

// The name of this vulnerability.
func (o WindowsDetailOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v WindowsDetail) string { return v.Name }).(pulumi.StringOutput)
}

type WindowsDetailArrayOutput struct{ *pulumi.OutputState }

func (WindowsDetailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WindowsDetail)(nil)).Elem()
}

func (o WindowsDetailArrayOutput) ToWindowsDetailArrayOutput() WindowsDetailArrayOutput {
	return o
}

func (o WindowsDetailArrayOutput) ToWindowsDetailArrayOutputWithContext(ctx context.Context) WindowsDetailArrayOutput {
	return o
}

func (o WindowsDetailArrayOutput) Index(i pulumi.IntInput) WindowsDetailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WindowsDetail {
		return vs[0].([]WindowsDetail)[vs[1].(int)]
	}).(WindowsDetailOutput)
}

type WindowsDetailResponse struct {
	// The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability affects.
	CpeUri string `pulumi:"cpeUri"`
	// The description of this vulnerability.
	Description string `pulumi:"description"`
	// The names of the KBs which have hotfixes to mitigate this vulnerability. Note that there may be multiple hotfixes (and thus multiple KBs) that mitigate a given vulnerability. Currently any listed KBs presence is considered a fix.
	FixingKbs []KnowledgeBaseResponse `pulumi:"fixingKbs"`
	// The name of this vulnerability.
	Name string `pulumi:"name"`
}

type WindowsDetailResponseOutput struct{ *pulumi.OutputState }

func (WindowsDetailResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsDetailResponse)(nil)).Elem()
}

func (o WindowsDetailResponseOutput) ToWindowsDetailResponseOutput() WindowsDetailResponseOutput {
	return o
}

func (o WindowsDetailResponseOutput) ToWindowsDetailResponseOutputWithContext(ctx context.Context) WindowsDetailResponseOutput {
	return o
}

// The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability affects.
func (o WindowsDetailResponseOutput) CpeUri() pulumi.StringOutput {
	return o.ApplyT(func(v WindowsDetailResponse) string { return v.CpeUri }).(pulumi.StringOutput)
}

// The description of this vulnerability.
func (o WindowsDetailResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v WindowsDetailResponse) string { return v.Description }).(pulumi.StringOutput)
}

// The names of the KBs which have hotfixes to mitigate this vulnerability. Note that there may be multiple hotfixes (and thus multiple KBs) that mitigate a given vulnerability. Currently any listed KBs presence is considered a fix.
func (o WindowsDetailResponseOutput) FixingKbs() KnowledgeBaseResponseArrayOutput {
	return o.ApplyT(func(v WindowsDetailResponse) []KnowledgeBaseResponse { return v.FixingKbs }).(KnowledgeBaseResponseArrayOutput)
}

// The name of this vulnerability.
func (o WindowsDetailResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v WindowsDetailResponse) string { return v.Name }).(pulumi.StringOutput)
}

type WindowsDetailResponseArrayOutput struct{ *pulumi.OutputState }

func (WindowsDetailResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WindowsDetailResponse)(nil)).Elem()
}

func (o WindowsDetailResponseArrayOutput) ToWindowsDetailResponseArrayOutput() WindowsDetailResponseArrayOutput {
	return o
}

func (o WindowsDetailResponseArrayOutput) ToWindowsDetailResponseArrayOutputWithContext(ctx context.Context) WindowsDetailResponseArrayOutput {
	return o
}

func (o WindowsDetailResponseArrayOutput) Index(i pulumi.IntInput) WindowsDetailResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WindowsDetailResponse {
		return vs[0].([]WindowsDetailResponse)[vs[1].(int)]
	}).(WindowsDetailResponseOutput)
}

// Windows Update represents the metadata about the update for the Windows operating system. The fields in this message come from the Windows Update API documented at https://docs.microsoft.com/en-us/windows/win32/api/wuapi/nn-wuapi-iupdate.
type WindowsUpdate struct {
	// The list of categories to which the update belongs.
	Categories []Category `pulumi:"categories"`
	// The localized description of the update.
	Description *string `pulumi:"description"`
	// Required - The unique identifier for the update.
	Identity *Identity `pulumi:"identity"`
	// The Microsoft Knowledge Base article IDs that are associated with the update.
	KbArticleIds []string `pulumi:"kbArticleIds"`
	// The last published timestamp of the update.
	LastPublishedTimestamp *string `pulumi:"lastPublishedTimestamp"`
	// The hyperlink to the support information for the update.
	SupportUrl *string `pulumi:"supportUrl"`
	// The localized title of the update.
	Title *string `pulumi:"title"`
}

// WindowsUpdateInput is an input type that accepts WindowsUpdateArgs and WindowsUpdateOutput values.
// You can construct a concrete instance of `WindowsUpdateInput` via:
//
//	WindowsUpdateArgs{...}
type WindowsUpdateInput interface {
	pulumi.Input

	ToWindowsUpdateOutput() WindowsUpdateOutput
	ToWindowsUpdateOutputWithContext(context.Context) WindowsUpdateOutput
}

// Windows Update represents the metadata about the update for the Windows operating system. The fields in this message come from the Windows Update API documented at https://docs.microsoft.com/en-us/windows/win32/api/wuapi/nn-wuapi-iupdate.
type WindowsUpdateArgs struct {
	// The list of categories to which the update belongs.
	Categories CategoryArrayInput `pulumi:"categories"`
	// The localized description of the update.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Required - The unique identifier for the update.
	Identity IdentityPtrInput `pulumi:"identity"`
	// The Microsoft Knowledge Base article IDs that are associated with the update.
	KbArticleIds pulumi.StringArrayInput `pulumi:"kbArticleIds"`
	// The last published timestamp of the update.
	LastPublishedTimestamp pulumi.StringPtrInput `pulumi:"lastPublishedTimestamp"`
	// The hyperlink to the support information for the update.
	SupportUrl pulumi.StringPtrInput `pulumi:"supportUrl"`
	// The localized title of the update.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (WindowsUpdateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsUpdate)(nil)).Elem()
}

func (i WindowsUpdateArgs) ToWindowsUpdateOutput() WindowsUpdateOutput {
	return i.ToWindowsUpdateOutputWithContext(context.Background())
}

func (i WindowsUpdateArgs) ToWindowsUpdateOutputWithContext(ctx context.Context) WindowsUpdateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsUpdateOutput)
}

func (i WindowsUpdateArgs) ToWindowsUpdatePtrOutput() WindowsUpdatePtrOutput {
	return i.ToWindowsUpdatePtrOutputWithContext(context.Background())
}

func (i WindowsUpdateArgs) ToWindowsUpdatePtrOutputWithContext(ctx context.Context) WindowsUpdatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsUpdateOutput).ToWindowsUpdatePtrOutputWithContext(ctx)
}

// WindowsUpdatePtrInput is an input type that accepts WindowsUpdateArgs, WindowsUpdatePtr and WindowsUpdatePtrOutput values.
// You can construct a concrete instance of `WindowsUpdatePtrInput` via:
//
//	        WindowsUpdateArgs{...}
//
//	or:
//
//	        nil
type WindowsUpdatePtrInput interface {
	pulumi.Input

	ToWindowsUpdatePtrOutput() WindowsUpdatePtrOutput
	ToWindowsUpdatePtrOutputWithContext(context.Context) WindowsUpdatePtrOutput
}

type windowsUpdatePtrType WindowsUpdateArgs

func WindowsUpdatePtr(v *WindowsUpdateArgs) WindowsUpdatePtrInput {
	return (*windowsUpdatePtrType)(v)
}

func (*windowsUpdatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WindowsUpdate)(nil)).Elem()
}

func (i *windowsUpdatePtrType) ToWindowsUpdatePtrOutput() WindowsUpdatePtrOutput {
	return i.ToWindowsUpdatePtrOutputWithContext(context.Background())
}

func (i *windowsUpdatePtrType) ToWindowsUpdatePtrOutputWithContext(ctx context.Context) WindowsUpdatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsUpdatePtrOutput)
}

// Windows Update represents the metadata about the update for the Windows operating system. The fields in this message come from the Windows Update API documented at https://docs.microsoft.com/en-us/windows/win32/api/wuapi/nn-wuapi-iupdate.
type WindowsUpdateOutput struct{ *pulumi.OutputState }

func (WindowsUpdateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsUpdate)(nil)).Elem()
}

func (o WindowsUpdateOutput) ToWindowsUpdateOutput() WindowsUpdateOutput {
	return o
}

func (o WindowsUpdateOutput) ToWindowsUpdateOutputWithContext(ctx context.Context) WindowsUpdateOutput {
	return o
}

func (o WindowsUpdateOutput) ToWindowsUpdatePtrOutput() WindowsUpdatePtrOutput {
	return o.ToWindowsUpdatePtrOutputWithContext(context.Background())
}

func (o WindowsUpdateOutput) ToWindowsUpdatePtrOutputWithContext(ctx context.Context) WindowsUpdatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WindowsUpdate) *WindowsUpdate {
		return &v
	}).(WindowsUpdatePtrOutput)
}

// The list of categories to which the update belongs.
func (o WindowsUpdateOutput) Categories() CategoryArrayOutput {
	return o.ApplyT(func(v WindowsUpdate) []Category { return v.Categories }).(CategoryArrayOutput)
}

// The localized description of the update.
func (o WindowsUpdateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WindowsUpdate) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Required - The unique identifier for the update.
func (o WindowsUpdateOutput) Identity() IdentityPtrOutput {
	return o.ApplyT(func(v WindowsUpdate) *Identity { return v.Identity }).(IdentityPtrOutput)
}

// The Microsoft Knowledge Base article IDs that are associated with the update.
func (o WindowsUpdateOutput) KbArticleIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WindowsUpdate) []string { return v.KbArticleIds }).(pulumi.StringArrayOutput)
}

// The last published timestamp of the update.
func (o WindowsUpdateOutput) LastPublishedTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WindowsUpdate) *string { return v.LastPublishedTimestamp }).(pulumi.StringPtrOutput)
}

// The hyperlink to the support information for the update.
func (o WindowsUpdateOutput) SupportUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WindowsUpdate) *string { return v.SupportUrl }).(pulumi.StringPtrOutput)
}

// The localized title of the update.
func (o WindowsUpdateOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WindowsUpdate) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type WindowsUpdatePtrOutput struct{ *pulumi.OutputState }

func (WindowsUpdatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WindowsUpdate)(nil)).Elem()
}

func (o WindowsUpdatePtrOutput) ToWindowsUpdatePtrOutput() WindowsUpdatePtrOutput {
	return o
}

func (o WindowsUpdatePtrOutput) ToWindowsUpdatePtrOutputWithContext(ctx context.Context) WindowsUpdatePtrOutput {
	return o
}

func (o WindowsUpdatePtrOutput) Elem() WindowsUpdateOutput {
	return o.ApplyT(func(v *WindowsUpdate) WindowsUpdate {
		if v != nil {
			return *v
		}
		var ret WindowsUpdate
		return ret
	}).(WindowsUpdateOutput)
}

// The list of categories to which the update belongs.
func (o WindowsUpdatePtrOutput) Categories() CategoryArrayOutput {
	return o.ApplyT(func(v *WindowsUpdate) []Category {
		if v == nil {
			return nil
		}
		return v.Categories
	}).(CategoryArrayOutput)
}

// The localized description of the update.
func (o WindowsUpdatePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsUpdate) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Required - The unique identifier for the update.
func (o WindowsUpdatePtrOutput) Identity() IdentityPtrOutput {
	return o.ApplyT(func(v *WindowsUpdate) *Identity {
		if v == nil {
			return nil
		}
		return v.Identity
	}).(IdentityPtrOutput)
}

// The Microsoft Knowledge Base article IDs that are associated with the update.
func (o WindowsUpdatePtrOutput) KbArticleIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WindowsUpdate) []string {
		if v == nil {
			return nil
		}
		return v.KbArticleIds
	}).(pulumi.StringArrayOutput)
}

// The last published timestamp of the update.
func (o WindowsUpdatePtrOutput) LastPublishedTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsUpdate) *string {
		if v == nil {
			return nil
		}
		return v.LastPublishedTimestamp
	}).(pulumi.StringPtrOutput)
}

// The hyperlink to the support information for the update.
func (o WindowsUpdatePtrOutput) SupportUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsUpdate) *string {
		if v == nil {
			return nil
		}
		return v.SupportUrl
	}).(pulumi.StringPtrOutput)
}

// The localized title of the update.
func (o WindowsUpdatePtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsUpdate) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Windows Update represents the metadata about the update for the Windows operating system. The fields in this message come from the Windows Update API documented at https://docs.microsoft.com/en-us/windows/win32/api/wuapi/nn-wuapi-iupdate.
type WindowsUpdateResponse struct {
	// The list of categories to which the update belongs.
	Categories []CategoryResponse `pulumi:"categories"`
	// The localized description of the update.
	Description string `pulumi:"description"`
	// Required - The unique identifier for the update.
	Identity IdentityResponse `pulumi:"identity"`
	// The Microsoft Knowledge Base article IDs that are associated with the update.
	KbArticleIds []string `pulumi:"kbArticleIds"`
	// The last published timestamp of the update.
	LastPublishedTimestamp string `pulumi:"lastPublishedTimestamp"`
	// The hyperlink to the support information for the update.
	SupportUrl string `pulumi:"supportUrl"`
	// The localized title of the update.
	Title string `pulumi:"title"`
}

// Windows Update represents the metadata about the update for the Windows operating system. The fields in this message come from the Windows Update API documented at https://docs.microsoft.com/en-us/windows/win32/api/wuapi/nn-wuapi-iupdate.
type WindowsUpdateResponseOutput struct{ *pulumi.OutputState }

func (WindowsUpdateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsUpdateResponse)(nil)).Elem()
}

func (o WindowsUpdateResponseOutput) ToWindowsUpdateResponseOutput() WindowsUpdateResponseOutput {
	return o
}

func (o WindowsUpdateResponseOutput) ToWindowsUpdateResponseOutputWithContext(ctx context.Context) WindowsUpdateResponseOutput {
	return o
}

// The list of categories to which the update belongs.
func (o WindowsUpdateResponseOutput) Categories() CategoryResponseArrayOutput {
	return o.ApplyT(func(v WindowsUpdateResponse) []CategoryResponse { return v.Categories }).(CategoryResponseArrayOutput)
}

// The localized description of the update.
func (o WindowsUpdateResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v WindowsUpdateResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Required - The unique identifier for the update.
func (o WindowsUpdateResponseOutput) Identity() IdentityResponseOutput {
	return o.ApplyT(func(v WindowsUpdateResponse) IdentityResponse { return v.Identity }).(IdentityResponseOutput)
}

// The Microsoft Knowledge Base article IDs that are associated with the update.
func (o WindowsUpdateResponseOutput) KbArticleIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WindowsUpdateResponse) []string { return v.KbArticleIds }).(pulumi.StringArrayOutput)
}

// The last published timestamp of the update.
func (o WindowsUpdateResponseOutput) LastPublishedTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v WindowsUpdateResponse) string { return v.LastPublishedTimestamp }).(pulumi.StringOutput)
}

// The hyperlink to the support information for the update.
func (o WindowsUpdateResponseOutput) SupportUrl() pulumi.StringOutput {
	return o.ApplyT(func(v WindowsUpdateResponse) string { return v.SupportUrl }).(pulumi.StringOutput)
}

// The localized title of the update.
func (o WindowsUpdateResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v WindowsUpdateResponse) string { return v.Title }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AliasContextInput)(nil)).Elem(), AliasContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AliasContextPtrInput)(nil)).Elem(), AliasContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnalysisCompletedInput)(nil)).Elem(), AnalysisCompletedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnalysisCompletedPtrInput)(nil)).Elem(), AnalysisCompletedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ArtifactInput)(nil)).Elem(), ArtifactArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ArtifactArrayInput)(nil)).Elem(), ArtifactArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssessmentInput)(nil)).Elem(), AssessmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssessmentPtrInput)(nil)).Elem(), AssessmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AttestationNoteInput)(nil)).Elem(), AttestationNoteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AttestationNotePtrInput)(nil)).Elem(), AttestationNoteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AttestationOccurrenceInput)(nil)).Elem(), AttestationOccurrenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AttestationOccurrencePtrInput)(nil)).Elem(), AttestationOccurrenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingInput)(nil)).Elem(), BindingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingArrayInput)(nil)).Elem(), BindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BuildDefinitionInput)(nil)).Elem(), BuildDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BuildDefinitionPtrInput)(nil)).Elem(), BuildDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BuildMetadataInput)(nil)).Elem(), BuildMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BuildMetadataPtrInput)(nil)).Elem(), BuildMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BuildNoteInput)(nil)).Elem(), BuildNoteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BuildNotePtrInput)(nil)).Elem(), BuildNoteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BuildOccurrenceInput)(nil)).Elem(), BuildOccurrenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BuildOccurrencePtrInput)(nil)).Elem(), BuildOccurrenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BuildProvenanceInput)(nil)).Elem(), BuildProvenanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BuildProvenancePtrInput)(nil)).Elem(), BuildProvenanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BuilderConfigInput)(nil)).Elem(), BuilderConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BuilderConfigPtrInput)(nil)).Elem(), BuilderConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CVSSInput)(nil)).Elem(), CVSSArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CVSSPtrInput)(nil)).Elem(), CVSSArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CVSSv3Input)(nil)).Elem(), CVSSv3Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*CVSSv3PtrInput)(nil)).Elem(), CVSSv3Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*CategoryInput)(nil)).Elem(), CategoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CategoryArrayInput)(nil)).Elem(), CategoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CisBenchmarkInput)(nil)).Elem(), CisBenchmarkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CisBenchmarkPtrInput)(nil)).Elem(), CisBenchmarkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudRepoSourceContextInput)(nil)).Elem(), CloudRepoSourceContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudRepoSourceContextPtrInput)(nil)).Elem(), CloudRepoSourceContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CommandInput)(nil)).Elem(), CommandArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CommandArrayInput)(nil)).Elem(), CommandArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CompletenessInput)(nil)).Elem(), CompletenessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CompletenessPtrInput)(nil)).Elem(), CompletenessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComplianceNoteInput)(nil)).Elem(), ComplianceNoteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComplianceNotePtrInput)(nil)).Elem(), ComplianceNoteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComplianceOccurrenceInput)(nil)).Elem(), ComplianceOccurrenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComplianceOccurrencePtrInput)(nil)).Elem(), ComplianceOccurrenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComplianceVersionInput)(nil)).Elem(), ComplianceVersionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComplianceVersionArrayInput)(nil)).Elem(), ComplianceVersionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DSSEAttestationNoteInput)(nil)).Elem(), DSSEAttestationNoteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DSSEAttestationNotePtrInput)(nil)).Elem(), DSSEAttestationNoteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DSSEAttestationOccurrenceInput)(nil)).Elem(), DSSEAttestationOccurrenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DSSEAttestationOccurrencePtrInput)(nil)).Elem(), DSSEAttestationOccurrenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DSSEHintInput)(nil)).Elem(), DSSEHintArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DSSEHintPtrInput)(nil)).Elem(), DSSEHintArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentNoteInput)(nil)).Elem(), DeploymentNoteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentNotePtrInput)(nil)).Elem(), DeploymentNoteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentOccurrenceInput)(nil)).Elem(), DeploymentOccurrenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentOccurrencePtrInput)(nil)).Elem(), DeploymentOccurrenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DetailInput)(nil)).Elem(), DetailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DetailArrayInput)(nil)).Elem(), DetailArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DigestInput)(nil)).Elem(), DigestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DigestArrayInput)(nil)).Elem(), DigestArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DiscoveryNoteInput)(nil)).Elem(), DiscoveryNoteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DiscoveryNotePtrInput)(nil)).Elem(), DiscoveryNoteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DiscoveryOccurrenceInput)(nil)).Elem(), DiscoveryOccurrenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DiscoveryOccurrencePtrInput)(nil)).Elem(), DiscoveryOccurrenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DistributionInput)(nil)).Elem(), DistributionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DistributionArrayInput)(nil)).Elem(), DistributionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvelopeInput)(nil)).Elem(), EnvelopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvelopePtrInput)(nil)).Elem(), EnvelopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvelopeSignatureInput)(nil)).Elem(), EnvelopeSignatureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvelopeSignatureArrayInput)(nil)).Elem(), EnvelopeSignatureArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprPtrInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileHashesInput)(nil)).Elem(), FileHashesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileHashesPtrInput)(nil)).Elem(), FileHashesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FingerprintInput)(nil)).Elem(), FingerprintArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FingerprintPtrInput)(nil)).Elem(), FingerprintArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GerritSourceContextInput)(nil)).Elem(), GerritSourceContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GerritSourceContextPtrInput)(nil)).Elem(), GerritSourceContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitSourceContextInput)(nil)).Elem(), GitSourceContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitSourceContextPtrInput)(nil)).Elem(), GitSourceContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrafeasV1FileLocationInput)(nil)).Elem(), GrafeasV1FileLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrafeasV1FileLocationArrayInput)(nil)).Elem(), GrafeasV1FileLocationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderInput)(nil)).Elem(), GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderPtrInput)(nil)).Elem(), GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessInput)(nil)).Elem(), GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessPtrInput)(nil)).Elem(), GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceInput)(nil)).Elem(), GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourcePtrInput)(nil)).Elem(), GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationInput)(nil)).Elem(), GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationPtrInput)(nil)).Elem(), GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialInput)(nil)).Elem(), GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialArrayInput)(nil)).Elem(), GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataInput)(nil)).Elem(), GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataPtrInput)(nil)).Elem(), GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HashInput)(nil)).Elem(), HashArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HashArrayInput)(nil)).Elem(), HashArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HintInput)(nil)).Elem(), HintArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HintPtrInput)(nil)).Elem(), HintArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityInput)(nil)).Elem(), IdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityPtrInput)(nil)).Elem(), IdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageNoteInput)(nil)).Elem(), ImageNoteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageNotePtrInput)(nil)).Elem(), ImageNoteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageOccurrenceInput)(nil)).Elem(), ImageOccurrenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageOccurrencePtrInput)(nil)).Elem(), ImageOccurrenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InTotoProvenanceInput)(nil)).Elem(), InTotoProvenanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InTotoProvenancePtrInput)(nil)).Elem(), InTotoProvenanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InTotoSlsaProvenanceV1Input)(nil)).Elem(), InTotoSlsaProvenanceV1Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*InTotoSlsaProvenanceV1PtrInput)(nil)).Elem(), InTotoSlsaProvenanceV1Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*InTotoStatementInput)(nil)).Elem(), InTotoStatementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InTotoStatementPtrInput)(nil)).Elem(), InTotoStatementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JustificationInput)(nil)).Elem(), JustificationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JustificationPtrInput)(nil)).Elem(), JustificationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JwtInput)(nil)).Elem(), JwtArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JwtArrayInput)(nil)).Elem(), JwtArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KnowledgeBaseInput)(nil)).Elem(), KnowledgeBaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KnowledgeBaseArrayInput)(nil)).Elem(), KnowledgeBaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LayerInput)(nil)).Elem(), LayerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LayerArrayInput)(nil)).Elem(), LayerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LicenseInput)(nil)).Elem(), LicenseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LicensePtrInput)(nil)).Elem(), LicenseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationInput)(nil)).Elem(), LocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationArrayInput)(nil)).Elem(), LocationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaterialInput)(nil)).Elem(), MaterialArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaterialArrayInput)(nil)).Elem(), MaterialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetadataInput)(nil)).Elem(), MetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetadataPtrInput)(nil)).Elem(), MetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NonCompliantFileInput)(nil)).Elem(), NonCompliantFileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NonCompliantFileArrayInput)(nil)).Elem(), NonCompliantFileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PackageIssueInput)(nil)).Elem(), PackageIssueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PackageIssueArrayInput)(nil)).Elem(), PackageIssueArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PackageNoteInput)(nil)).Elem(), PackageNoteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PackageNotePtrInput)(nil)).Elem(), PackageNoteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PackageOccurrenceInput)(nil)).Elem(), PackageOccurrenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PackageOccurrencePtrInput)(nil)).Elem(), PackageOccurrenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProductInput)(nil)).Elem(), ProductArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProductPtrInput)(nil)).Elem(), ProductArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectRepoIdInput)(nil)).Elem(), ProjectRepoIdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectRepoIdPtrInput)(nil)).Elem(), ProjectRepoIdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProvenanceBuilderInput)(nil)).Elem(), ProvenanceBuilderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProvenanceBuilderPtrInput)(nil)).Elem(), ProvenanceBuilderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublisherInput)(nil)).Elem(), PublisherArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublisherPtrInput)(nil)).Elem(), PublisherArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecipeInput)(nil)).Elem(), RecipeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecipePtrInput)(nil)).Elem(), RecipeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RelatedUrlInput)(nil)).Elem(), RelatedUrlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RelatedUrlPtrInput)(nil)).Elem(), RelatedUrlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RelatedUrlArrayInput)(nil)).Elem(), RelatedUrlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemediationInput)(nil)).Elem(), RemediationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemediationArrayInput)(nil)).Elem(), RemediationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepoIdInput)(nil)).Elem(), RepoIdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepoIdPtrInput)(nil)).Elem(), RepoIdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceDescriptorInput)(nil)).Elem(), ResourceDescriptorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceDescriptorArrayInput)(nil)).Elem(), ResourceDescriptorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RunDetailsInput)(nil)).Elem(), RunDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RunDetailsPtrInput)(nil)).Elem(), RunDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SBOMReferenceNoteInput)(nil)).Elem(), SBOMReferenceNoteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SBOMReferenceNotePtrInput)(nil)).Elem(), SBOMReferenceNoteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SBOMReferenceOccurrenceInput)(nil)).Elem(), SBOMReferenceOccurrenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SBOMReferenceOccurrencePtrInput)(nil)).Elem(), SBOMReferenceOccurrenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SBOMStatusInput)(nil)).Elem(), SBOMStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SBOMStatusPtrInput)(nil)).Elem(), SBOMStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SbomReferenceIntotoPayloadInput)(nil)).Elem(), SbomReferenceIntotoPayloadArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SbomReferenceIntotoPayloadPtrInput)(nil)).Elem(), SbomReferenceIntotoPayloadArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SbomReferenceIntotoPredicateInput)(nil)).Elem(), SbomReferenceIntotoPredicateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SbomReferenceIntotoPredicatePtrInput)(nil)).Elem(), SbomReferenceIntotoPredicateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SignatureInput)(nil)).Elem(), SignatureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SignatureArrayInput)(nil)).Elem(), SignatureArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SlsaBuilderInput)(nil)).Elem(), SlsaBuilderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SlsaBuilderPtrInput)(nil)).Elem(), SlsaBuilderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SlsaCompletenessInput)(nil)).Elem(), SlsaCompletenessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SlsaCompletenessPtrInput)(nil)).Elem(), SlsaCompletenessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SlsaMetadataInput)(nil)).Elem(), SlsaMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SlsaMetadataPtrInput)(nil)).Elem(), SlsaMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SlsaProvenanceInput)(nil)).Elem(), SlsaProvenanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SlsaProvenancePtrInput)(nil)).Elem(), SlsaProvenanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SlsaProvenanceV1Input)(nil)).Elem(), SlsaProvenanceV1Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*SlsaProvenanceV1PtrInput)(nil)).Elem(), SlsaProvenanceV1Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*SlsaProvenanceZeroTwoInput)(nil)).Elem(), SlsaProvenanceZeroTwoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SlsaProvenanceZeroTwoPtrInput)(nil)).Elem(), SlsaProvenanceZeroTwoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SlsaRecipeInput)(nil)).Elem(), SlsaRecipeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SlsaRecipePtrInput)(nil)).Elem(), SlsaRecipeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceInput)(nil)).Elem(), SourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourcePtrInput)(nil)).Elem(), SourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceContextInput)(nil)).Elem(), SourceContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceContextPtrInput)(nil)).Elem(), SourceContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceContextArrayInput)(nil)).Elem(), SourceContextArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StatusInput)(nil)).Elem(), StatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StatusPtrInput)(nil)).Elem(), StatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StatusArrayInput)(nil)).Elem(), StatusArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubjectInput)(nil)).Elem(), SubjectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubjectArrayInput)(nil)).Elem(), SubjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UpgradeDistributionInput)(nil)).Elem(), UpgradeDistributionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UpgradeDistributionPtrInput)(nil)).Elem(), UpgradeDistributionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UpgradeDistributionArrayInput)(nil)).Elem(), UpgradeDistributionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UpgradeNoteInput)(nil)).Elem(), UpgradeNoteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UpgradeNotePtrInput)(nil)).Elem(), UpgradeNoteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UpgradeOccurrenceInput)(nil)).Elem(), UpgradeOccurrenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UpgradeOccurrencePtrInput)(nil)).Elem(), UpgradeOccurrenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VersionInput)(nil)).Elem(), VersionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VersionPtrInput)(nil)).Elem(), VersionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VexAssessmentInput)(nil)).Elem(), VexAssessmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VexAssessmentPtrInput)(nil)).Elem(), VexAssessmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VulnerabilityAssessmentNoteInput)(nil)).Elem(), VulnerabilityAssessmentNoteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VulnerabilityAssessmentNotePtrInput)(nil)).Elem(), VulnerabilityAssessmentNoteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VulnerabilityNoteInput)(nil)).Elem(), VulnerabilityNoteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VulnerabilityNotePtrInput)(nil)).Elem(), VulnerabilityNoteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VulnerabilityOccurrenceInput)(nil)).Elem(), VulnerabilityOccurrenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VulnerabilityOccurrencePtrInput)(nil)).Elem(), VulnerabilityOccurrenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WindowsDetailInput)(nil)).Elem(), WindowsDetailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WindowsDetailArrayInput)(nil)).Elem(), WindowsDetailArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WindowsUpdateInput)(nil)).Elem(), WindowsUpdateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WindowsUpdatePtrInput)(nil)).Elem(), WindowsUpdateArgs{})
	pulumi.RegisterOutputType(AliasContextOutput{})
	pulumi.RegisterOutputType(AliasContextPtrOutput{})
	pulumi.RegisterOutputType(AliasContextResponseOutput{})
	pulumi.RegisterOutputType(AnalysisCompletedOutput{})
	pulumi.RegisterOutputType(AnalysisCompletedPtrOutput{})
	pulumi.RegisterOutputType(AnalysisCompletedResponseOutput{})
	pulumi.RegisterOutputType(ArtifactOutput{})
	pulumi.RegisterOutputType(ArtifactArrayOutput{})
	pulumi.RegisterOutputType(ArtifactResponseOutput{})
	pulumi.RegisterOutputType(ArtifactResponseArrayOutput{})
	pulumi.RegisterOutputType(AssessmentOutput{})
	pulumi.RegisterOutputType(AssessmentPtrOutput{})
	pulumi.RegisterOutputType(AssessmentResponseOutput{})
	pulumi.RegisterOutputType(AttestationNoteOutput{})
	pulumi.RegisterOutputType(AttestationNotePtrOutput{})
	pulumi.RegisterOutputType(AttestationNoteResponseOutput{})
	pulumi.RegisterOutputType(AttestationOccurrenceOutput{})
	pulumi.RegisterOutputType(AttestationOccurrencePtrOutput{})
	pulumi.RegisterOutputType(AttestationOccurrenceResponseOutput{})
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(BindingResponseOutput{})
	pulumi.RegisterOutputType(BindingResponseArrayOutput{})
	pulumi.RegisterOutputType(BuildDefinitionOutput{})
	pulumi.RegisterOutputType(BuildDefinitionPtrOutput{})
	pulumi.RegisterOutputType(BuildDefinitionResponseOutput{})
	pulumi.RegisterOutputType(BuildMetadataOutput{})
	pulumi.RegisterOutputType(BuildMetadataPtrOutput{})
	pulumi.RegisterOutputType(BuildMetadataResponseOutput{})
	pulumi.RegisterOutputType(BuildNoteOutput{})
	pulumi.RegisterOutputType(BuildNotePtrOutput{})
	pulumi.RegisterOutputType(BuildNoteResponseOutput{})
	pulumi.RegisterOutputType(BuildOccurrenceOutput{})
	pulumi.RegisterOutputType(BuildOccurrencePtrOutput{})
	pulumi.RegisterOutputType(BuildOccurrenceResponseOutput{})
	pulumi.RegisterOutputType(BuildProvenanceOutput{})
	pulumi.RegisterOutputType(BuildProvenancePtrOutput{})
	pulumi.RegisterOutputType(BuildProvenanceResponseOutput{})
	pulumi.RegisterOutputType(BuilderConfigOutput{})
	pulumi.RegisterOutputType(BuilderConfigPtrOutput{})
	pulumi.RegisterOutputType(BuilderConfigResponseOutput{})
	pulumi.RegisterOutputType(CVSSOutput{})
	pulumi.RegisterOutputType(CVSSPtrOutput{})
	pulumi.RegisterOutputType(CVSSResponseOutput{})
	pulumi.RegisterOutputType(CVSSv3Output{})
	pulumi.RegisterOutputType(CVSSv3PtrOutput{})
	pulumi.RegisterOutputType(CVSSv3ResponseOutput{})
	pulumi.RegisterOutputType(CategoryOutput{})
	pulumi.RegisterOutputType(CategoryArrayOutput{})
	pulumi.RegisterOutputType(CategoryResponseOutput{})
	pulumi.RegisterOutputType(CategoryResponseArrayOutput{})
	pulumi.RegisterOutputType(CisBenchmarkOutput{})
	pulumi.RegisterOutputType(CisBenchmarkPtrOutput{})
	pulumi.RegisterOutputType(CisBenchmarkResponseOutput{})
	pulumi.RegisterOutputType(CloudRepoSourceContextOutput{})
	pulumi.RegisterOutputType(CloudRepoSourceContextPtrOutput{})
	pulumi.RegisterOutputType(CloudRepoSourceContextResponseOutput{})
	pulumi.RegisterOutputType(CommandOutput{})
	pulumi.RegisterOutputType(CommandArrayOutput{})
	pulumi.RegisterOutputType(CommandResponseOutput{})
	pulumi.RegisterOutputType(CommandResponseArrayOutput{})
	pulumi.RegisterOutputType(CompletenessOutput{})
	pulumi.RegisterOutputType(CompletenessPtrOutput{})
	pulumi.RegisterOutputType(CompletenessResponseOutput{})
	pulumi.RegisterOutputType(ComplianceNoteOutput{})
	pulumi.RegisterOutputType(ComplianceNotePtrOutput{})
	pulumi.RegisterOutputType(ComplianceNoteResponseOutput{})
	pulumi.RegisterOutputType(ComplianceOccurrenceOutput{})
	pulumi.RegisterOutputType(ComplianceOccurrencePtrOutput{})
	pulumi.RegisterOutputType(ComplianceOccurrenceResponseOutput{})
	pulumi.RegisterOutputType(ComplianceVersionOutput{})
	pulumi.RegisterOutputType(ComplianceVersionArrayOutput{})
	pulumi.RegisterOutputType(ComplianceVersionResponseOutput{})
	pulumi.RegisterOutputType(ComplianceVersionResponseArrayOutput{})
	pulumi.RegisterOutputType(DSSEAttestationNoteOutput{})
	pulumi.RegisterOutputType(DSSEAttestationNotePtrOutput{})
	pulumi.RegisterOutputType(DSSEAttestationNoteResponseOutput{})
	pulumi.RegisterOutputType(DSSEAttestationOccurrenceOutput{})
	pulumi.RegisterOutputType(DSSEAttestationOccurrencePtrOutput{})
	pulumi.RegisterOutputType(DSSEAttestationOccurrenceResponseOutput{})
	pulumi.RegisterOutputType(DSSEHintOutput{})
	pulumi.RegisterOutputType(DSSEHintPtrOutput{})
	pulumi.RegisterOutputType(DSSEHintResponseOutput{})
	pulumi.RegisterOutputType(DeploymentNoteOutput{})
	pulumi.RegisterOutputType(DeploymentNotePtrOutput{})
	pulumi.RegisterOutputType(DeploymentNoteResponseOutput{})
	pulumi.RegisterOutputType(DeploymentOccurrenceOutput{})
	pulumi.RegisterOutputType(DeploymentOccurrencePtrOutput{})
	pulumi.RegisterOutputType(DeploymentOccurrenceResponseOutput{})
	pulumi.RegisterOutputType(DetailOutput{})
	pulumi.RegisterOutputType(DetailArrayOutput{})
	pulumi.RegisterOutputType(DetailResponseOutput{})
	pulumi.RegisterOutputType(DetailResponseArrayOutput{})
	pulumi.RegisterOutputType(DigestOutput{})
	pulumi.RegisterOutputType(DigestArrayOutput{})
	pulumi.RegisterOutputType(DigestResponseOutput{})
	pulumi.RegisterOutputType(DigestResponseArrayOutput{})
	pulumi.RegisterOutputType(DiscoveryNoteOutput{})
	pulumi.RegisterOutputType(DiscoveryNotePtrOutput{})
	pulumi.RegisterOutputType(DiscoveryNoteResponseOutput{})
	pulumi.RegisterOutputType(DiscoveryOccurrenceOutput{})
	pulumi.RegisterOutputType(DiscoveryOccurrencePtrOutput{})
	pulumi.RegisterOutputType(DiscoveryOccurrenceResponseOutput{})
	pulumi.RegisterOutputType(DistributionOutput{})
	pulumi.RegisterOutputType(DistributionArrayOutput{})
	pulumi.RegisterOutputType(DistributionResponseOutput{})
	pulumi.RegisterOutputType(DistributionResponseArrayOutput{})
	pulumi.RegisterOutputType(EnvelopeOutput{})
	pulumi.RegisterOutputType(EnvelopePtrOutput{})
	pulumi.RegisterOutputType(EnvelopeResponseOutput{})
	pulumi.RegisterOutputType(EnvelopeSignatureOutput{})
	pulumi.RegisterOutputType(EnvelopeSignatureArrayOutput{})
	pulumi.RegisterOutputType(EnvelopeSignatureResponseOutput{})
	pulumi.RegisterOutputType(EnvelopeSignatureResponseArrayOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(ExprResponseOutput{})
	pulumi.RegisterOutputType(FileHashesOutput{})
	pulumi.RegisterOutputType(FileHashesPtrOutput{})
	pulumi.RegisterOutputType(FileHashesResponseOutput{})
	pulumi.RegisterOutputType(FingerprintOutput{})
	pulumi.RegisterOutputType(FingerprintPtrOutput{})
	pulumi.RegisterOutputType(FingerprintResponseOutput{})
	pulumi.RegisterOutputType(GerritSourceContextOutput{})
	pulumi.RegisterOutputType(GerritSourceContextPtrOutput{})
	pulumi.RegisterOutputType(GerritSourceContextResponseOutput{})
	pulumi.RegisterOutputType(GitSourceContextOutput{})
	pulumi.RegisterOutputType(GitSourceContextPtrOutput{})
	pulumi.RegisterOutputType(GitSourceContextResponseOutput{})
	pulumi.RegisterOutputType(GrafeasV1FileLocationOutput{})
	pulumi.RegisterOutputType(GrafeasV1FileLocationArrayOutput{})
	pulumi.RegisterOutputType(GrafeasV1FileLocationResponseOutput{})
	pulumi.RegisterOutputType(GrafeasV1FileLocationResponseArrayOutput{})
	pulumi.RegisterOutputType(GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderOutput{})
	pulumi.RegisterOutputType(GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderPtrOutput{})
	pulumi.RegisterOutputType(GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderResponseOutput{})
	pulumi.RegisterOutputType(GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessOutput{})
	pulumi.RegisterOutputType(GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutput{})
	pulumi.RegisterOutputType(GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessResponseOutput{})
	pulumi.RegisterOutputType(GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceOutput{})
	pulumi.RegisterOutputType(GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutput{})
	pulumi.RegisterOutputType(GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceResponseOutput{})
	pulumi.RegisterOutputType(GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationOutput{})
	pulumi.RegisterOutputType(GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationPtrOutput{})
	pulumi.RegisterOutputType(GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationResponseOutput{})
	pulumi.RegisterOutputType(GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialOutput{})
	pulumi.RegisterOutputType(GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialArrayOutput{})
	pulumi.RegisterOutputType(GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialResponseOutput{})
	pulumi.RegisterOutputType(GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialResponseArrayOutput{})
	pulumi.RegisterOutputType(GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataOutput{})
	pulumi.RegisterOutputType(GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput{})
	pulumi.RegisterOutputType(GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataResponseOutput{})
	pulumi.RegisterOutputType(HashOutput{})
	pulumi.RegisterOutputType(HashArrayOutput{})
	pulumi.RegisterOutputType(HashResponseOutput{})
	pulumi.RegisterOutputType(HashResponseArrayOutput{})
	pulumi.RegisterOutputType(HintOutput{})
	pulumi.RegisterOutputType(HintPtrOutput{})
	pulumi.RegisterOutputType(HintResponseOutput{})
	pulumi.RegisterOutputType(IdentityOutput{})
	pulumi.RegisterOutputType(IdentityPtrOutput{})
	pulumi.RegisterOutputType(IdentityResponseOutput{})
	pulumi.RegisterOutputType(ImageNoteOutput{})
	pulumi.RegisterOutputType(ImageNotePtrOutput{})
	pulumi.RegisterOutputType(ImageNoteResponseOutput{})
	pulumi.RegisterOutputType(ImageOccurrenceOutput{})
	pulumi.RegisterOutputType(ImageOccurrencePtrOutput{})
	pulumi.RegisterOutputType(ImageOccurrenceResponseOutput{})
	pulumi.RegisterOutputType(InTotoProvenanceOutput{})
	pulumi.RegisterOutputType(InTotoProvenancePtrOutput{})
	pulumi.RegisterOutputType(InTotoProvenanceResponseOutput{})
	pulumi.RegisterOutputType(InTotoSlsaProvenanceV1Output{})
	pulumi.RegisterOutputType(InTotoSlsaProvenanceV1PtrOutput{})
	pulumi.RegisterOutputType(InTotoSlsaProvenanceV1ResponseOutput{})
	pulumi.RegisterOutputType(InTotoStatementOutput{})
	pulumi.RegisterOutputType(InTotoStatementPtrOutput{})
	pulumi.RegisterOutputType(InTotoStatementResponseOutput{})
	pulumi.RegisterOutputType(JustificationOutput{})
	pulumi.RegisterOutputType(JustificationPtrOutput{})
	pulumi.RegisterOutputType(JustificationResponseOutput{})
	pulumi.RegisterOutputType(JwtOutput{})
	pulumi.RegisterOutputType(JwtArrayOutput{})
	pulumi.RegisterOutputType(JwtResponseOutput{})
	pulumi.RegisterOutputType(JwtResponseArrayOutput{})
	pulumi.RegisterOutputType(KnowledgeBaseOutput{})
	pulumi.RegisterOutputType(KnowledgeBaseArrayOutput{})
	pulumi.RegisterOutputType(KnowledgeBaseResponseOutput{})
	pulumi.RegisterOutputType(KnowledgeBaseResponseArrayOutput{})
	pulumi.RegisterOutputType(LayerOutput{})
	pulumi.RegisterOutputType(LayerArrayOutput{})
	pulumi.RegisterOutputType(LayerResponseOutput{})
	pulumi.RegisterOutputType(LayerResponseArrayOutput{})
	pulumi.RegisterOutputType(LicenseOutput{})
	pulumi.RegisterOutputType(LicensePtrOutput{})
	pulumi.RegisterOutputType(LicenseResponseOutput{})
	pulumi.RegisterOutputType(LocationOutput{})
	pulumi.RegisterOutputType(LocationArrayOutput{})
	pulumi.RegisterOutputType(LocationResponseOutput{})
	pulumi.RegisterOutputType(LocationResponseArrayOutput{})
	pulumi.RegisterOutputType(MaterialOutput{})
	pulumi.RegisterOutputType(MaterialArrayOutput{})
	pulumi.RegisterOutputType(MaterialResponseOutput{})
	pulumi.RegisterOutputType(MaterialResponseArrayOutput{})
	pulumi.RegisterOutputType(MetadataOutput{})
	pulumi.RegisterOutputType(MetadataPtrOutput{})
	pulumi.RegisterOutputType(MetadataResponseOutput{})
	pulumi.RegisterOutputType(NonCompliantFileOutput{})
	pulumi.RegisterOutputType(NonCompliantFileArrayOutput{})
	pulumi.RegisterOutputType(NonCompliantFileResponseOutput{})
	pulumi.RegisterOutputType(NonCompliantFileResponseArrayOutput{})
	pulumi.RegisterOutputType(PackageIssueOutput{})
	pulumi.RegisterOutputType(PackageIssueArrayOutput{})
	pulumi.RegisterOutputType(PackageIssueResponseOutput{})
	pulumi.RegisterOutputType(PackageIssueResponseArrayOutput{})
	pulumi.RegisterOutputType(PackageNoteOutput{})
	pulumi.RegisterOutputType(PackageNotePtrOutput{})
	pulumi.RegisterOutputType(PackageNoteResponseOutput{})
	pulumi.RegisterOutputType(PackageOccurrenceOutput{})
	pulumi.RegisterOutputType(PackageOccurrencePtrOutput{})
	pulumi.RegisterOutputType(PackageOccurrenceResponseOutput{})
	pulumi.RegisterOutputType(ProductOutput{})
	pulumi.RegisterOutputType(ProductPtrOutput{})
	pulumi.RegisterOutputType(ProductResponseOutput{})
	pulumi.RegisterOutputType(ProjectRepoIdOutput{})
	pulumi.RegisterOutputType(ProjectRepoIdPtrOutput{})
	pulumi.RegisterOutputType(ProjectRepoIdResponseOutput{})
	pulumi.RegisterOutputType(ProvenanceBuilderOutput{})
	pulumi.RegisterOutputType(ProvenanceBuilderPtrOutput{})
	pulumi.RegisterOutputType(ProvenanceBuilderResponseOutput{})
	pulumi.RegisterOutputType(PublisherOutput{})
	pulumi.RegisterOutputType(PublisherPtrOutput{})
	pulumi.RegisterOutputType(PublisherResponseOutput{})
	pulumi.RegisterOutputType(RecipeOutput{})
	pulumi.RegisterOutputType(RecipePtrOutput{})
	pulumi.RegisterOutputType(RecipeResponseOutput{})
	pulumi.RegisterOutputType(RelatedUrlOutput{})
	pulumi.RegisterOutputType(RelatedUrlPtrOutput{})
	pulumi.RegisterOutputType(RelatedUrlArrayOutput{})
	pulumi.RegisterOutputType(RelatedUrlResponseOutput{})
	pulumi.RegisterOutputType(RelatedUrlResponseArrayOutput{})
	pulumi.RegisterOutputType(RemediationOutput{})
	pulumi.RegisterOutputType(RemediationArrayOutput{})
	pulumi.RegisterOutputType(RemediationResponseOutput{})
	pulumi.RegisterOutputType(RemediationResponseArrayOutput{})
	pulumi.RegisterOutputType(RepoIdOutput{})
	pulumi.RegisterOutputType(RepoIdPtrOutput{})
	pulumi.RegisterOutputType(RepoIdResponseOutput{})
	pulumi.RegisterOutputType(ResourceDescriptorOutput{})
	pulumi.RegisterOutputType(ResourceDescriptorArrayOutput{})
	pulumi.RegisterOutputType(ResourceDescriptorResponseOutput{})
	pulumi.RegisterOutputType(ResourceDescriptorResponseArrayOutput{})
	pulumi.RegisterOutputType(RunDetailsOutput{})
	pulumi.RegisterOutputType(RunDetailsPtrOutput{})
	pulumi.RegisterOutputType(RunDetailsResponseOutput{})
	pulumi.RegisterOutputType(SBOMReferenceNoteOutput{})
	pulumi.RegisterOutputType(SBOMReferenceNotePtrOutput{})
	pulumi.RegisterOutputType(SBOMReferenceNoteResponseOutput{})
	pulumi.RegisterOutputType(SBOMReferenceOccurrenceOutput{})
	pulumi.RegisterOutputType(SBOMReferenceOccurrencePtrOutput{})
	pulumi.RegisterOutputType(SBOMReferenceOccurrenceResponseOutput{})
	pulumi.RegisterOutputType(SBOMStatusOutput{})
	pulumi.RegisterOutputType(SBOMStatusPtrOutput{})
	pulumi.RegisterOutputType(SBOMStatusResponseOutput{})
	pulumi.RegisterOutputType(SbomReferenceIntotoPayloadOutput{})
	pulumi.RegisterOutputType(SbomReferenceIntotoPayloadPtrOutput{})
	pulumi.RegisterOutputType(SbomReferenceIntotoPayloadResponseOutput{})
	pulumi.RegisterOutputType(SbomReferenceIntotoPredicateOutput{})
	pulumi.RegisterOutputType(SbomReferenceIntotoPredicatePtrOutput{})
	pulumi.RegisterOutputType(SbomReferenceIntotoPredicateResponseOutput{})
	pulumi.RegisterOutputType(SignatureOutput{})
	pulumi.RegisterOutputType(SignatureArrayOutput{})
	pulumi.RegisterOutputType(SignatureResponseOutput{})
	pulumi.RegisterOutputType(SignatureResponseArrayOutput{})
	pulumi.RegisterOutputType(SlsaBuilderOutput{})
	pulumi.RegisterOutputType(SlsaBuilderPtrOutput{})
	pulumi.RegisterOutputType(SlsaBuilderResponseOutput{})
	pulumi.RegisterOutputType(SlsaCompletenessOutput{})
	pulumi.RegisterOutputType(SlsaCompletenessPtrOutput{})
	pulumi.RegisterOutputType(SlsaCompletenessResponseOutput{})
	pulumi.RegisterOutputType(SlsaMetadataOutput{})
	pulumi.RegisterOutputType(SlsaMetadataPtrOutput{})
	pulumi.RegisterOutputType(SlsaMetadataResponseOutput{})
	pulumi.RegisterOutputType(SlsaProvenanceOutput{})
	pulumi.RegisterOutputType(SlsaProvenancePtrOutput{})
	pulumi.RegisterOutputType(SlsaProvenanceResponseOutput{})
	pulumi.RegisterOutputType(SlsaProvenanceV1Output{})
	pulumi.RegisterOutputType(SlsaProvenanceV1PtrOutput{})
	pulumi.RegisterOutputType(SlsaProvenanceV1ResponseOutput{})
	pulumi.RegisterOutputType(SlsaProvenanceZeroTwoOutput{})
	pulumi.RegisterOutputType(SlsaProvenanceZeroTwoPtrOutput{})
	pulumi.RegisterOutputType(SlsaProvenanceZeroTwoResponseOutput{})
	pulumi.RegisterOutputType(SlsaRecipeOutput{})
	pulumi.RegisterOutputType(SlsaRecipePtrOutput{})
	pulumi.RegisterOutputType(SlsaRecipeResponseOutput{})
	pulumi.RegisterOutputType(SourceOutput{})
	pulumi.RegisterOutputType(SourcePtrOutput{})
	pulumi.RegisterOutputType(SourceContextOutput{})
	pulumi.RegisterOutputType(SourceContextPtrOutput{})
	pulumi.RegisterOutputType(SourceContextArrayOutput{})
	pulumi.RegisterOutputType(SourceContextResponseOutput{})
	pulumi.RegisterOutputType(SourceContextResponseArrayOutput{})
	pulumi.RegisterOutputType(SourceResponseOutput{})
	pulumi.RegisterOutputType(StatusOutput{})
	pulumi.RegisterOutputType(StatusPtrOutput{})
	pulumi.RegisterOutputType(StatusArrayOutput{})
	pulumi.RegisterOutputType(StatusResponseOutput{})
	pulumi.RegisterOutputType(StatusResponseArrayOutput{})
	pulumi.RegisterOutputType(SubjectOutput{})
	pulumi.RegisterOutputType(SubjectArrayOutput{})
	pulumi.RegisterOutputType(SubjectResponseOutput{})
	pulumi.RegisterOutputType(SubjectResponseArrayOutput{})
	pulumi.RegisterOutputType(UpgradeDistributionOutput{})
	pulumi.RegisterOutputType(UpgradeDistributionPtrOutput{})
	pulumi.RegisterOutputType(UpgradeDistributionArrayOutput{})
	pulumi.RegisterOutputType(UpgradeDistributionResponseOutput{})
	pulumi.RegisterOutputType(UpgradeDistributionResponseArrayOutput{})
	pulumi.RegisterOutputType(UpgradeNoteOutput{})
	pulumi.RegisterOutputType(UpgradeNotePtrOutput{})
	pulumi.RegisterOutputType(UpgradeNoteResponseOutput{})
	pulumi.RegisterOutputType(UpgradeOccurrenceOutput{})
	pulumi.RegisterOutputType(UpgradeOccurrencePtrOutput{})
	pulumi.RegisterOutputType(UpgradeOccurrenceResponseOutput{})
	pulumi.RegisterOutputType(VersionOutput{})
	pulumi.RegisterOutputType(VersionPtrOutput{})
	pulumi.RegisterOutputType(VersionResponseOutput{})
	pulumi.RegisterOutputType(VexAssessmentOutput{})
	pulumi.RegisterOutputType(VexAssessmentPtrOutput{})
	pulumi.RegisterOutputType(VexAssessmentResponseOutput{})
	pulumi.RegisterOutputType(VulnerabilityAssessmentNoteOutput{})
	pulumi.RegisterOutputType(VulnerabilityAssessmentNotePtrOutput{})
	pulumi.RegisterOutputType(VulnerabilityAssessmentNoteResponseOutput{})
	pulumi.RegisterOutputType(VulnerabilityNoteOutput{})
	pulumi.RegisterOutputType(VulnerabilityNotePtrOutput{})
	pulumi.RegisterOutputType(VulnerabilityNoteResponseOutput{})
	pulumi.RegisterOutputType(VulnerabilityOccurrenceOutput{})
	pulumi.RegisterOutputType(VulnerabilityOccurrencePtrOutput{})
	pulumi.RegisterOutputType(VulnerabilityOccurrenceResponseOutput{})
	pulumi.RegisterOutputType(WindowsDetailOutput{})
	pulumi.RegisterOutputType(WindowsDetailArrayOutput{})
	pulumi.RegisterOutputType(WindowsDetailResponseOutput{})
	pulumi.RegisterOutputType(WindowsDetailResponseArrayOutput{})
	pulumi.RegisterOutputType(WindowsUpdateOutput{})
	pulumi.RegisterOutputType(WindowsUpdatePtrOutput{})
	pulumi.RegisterOutputType(WindowsUpdateResponseOutput{})
}
