// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new note.
// Auto-naming is currently not supported for this resource.
type Note struct {
	pulumi.CustomResourceState

	// A note describing an attestation role.
	Attestation AttestationNoteResponseOutput `pulumi:"attestation"`
	// A note describing build provenance for a verifiable build.
	Build BuildNoteResponseOutput `pulumi:"build"`
	// A note describing a compliance check.
	Compliance ComplianceNoteResponseOutput `pulumi:"compliance"`
	// The time this note was created. This field can be used as a filter in list requests.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// A note describing something that can be deployed.
	Deployment DeploymentNoteResponseOutput `pulumi:"deployment"`
	// A note describing the initial analysis of a resource.
	Discovery DiscoveryNoteResponseOutput `pulumi:"discovery"`
	// A note describing a dsse attestation note.
	DsseAttestation DSSEAttestationNoteResponseOutput `pulumi:"dsseAttestation"`
	// Time of expiration for this note. Empty if note does not expire.
	ExpirationTime pulumi.StringOutput `pulumi:"expirationTime"`
	// A note describing a base image.
	Image ImageNoteResponseOutput `pulumi:"image"`
	// The type of analysis. This field can be used as a filter in list requests.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// A detailed description of this note.
	LongDescription pulumi.StringOutput `pulumi:"longDescription"`
	// The name of the note in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.
	Name pulumi.StringOutput `pulumi:"name"`
	// A note describing a package hosted by various package managers.
	Package PackageNoteResponseOutput `pulumi:"package"`
	// Other notes related to this note.
	RelatedNoteNames pulumi.StringArrayOutput `pulumi:"relatedNoteNames"`
	// URLs associated with this note.
	RelatedUrl RelatedUrlResponseArrayOutput `pulumi:"relatedUrl"`
	// A one sentence description of this note.
	ShortDescription pulumi.StringOutput `pulumi:"shortDescription"`
	// The time this note was last updated. This field can be used as a filter in list requests.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// A note describing available package upgrades.
	Upgrade UpgradeNoteResponseOutput `pulumi:"upgrade"`
	// A note describing a package vulnerability.
	Vulnerability VulnerabilityNoteResponseOutput `pulumi:"vulnerability"`
}

// NewNote registers a new resource with the given unique name, arguments, and options.
func NewNote(ctx *pulumi.Context,
	name string, args *NoteArgs, opts ...pulumi.ResourceOption) (*Note, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NoteId == nil {
		return nil, errors.New("invalid value for required argument 'NoteId'")
	}
	var resource Note
	err := ctx.RegisterResource("google-native:containeranalysis/v1:Note", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNote gets an existing Note resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNote(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NoteState, opts ...pulumi.ResourceOption) (*Note, error) {
	var resource Note
	err := ctx.ReadResource("google-native:containeranalysis/v1:Note", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Note resources.
type noteState struct {
}

type NoteState struct {
}

func (NoteState) ElementType() reflect.Type {
	return reflect.TypeOf((*noteState)(nil)).Elem()
}

type noteArgs struct {
	// A note describing an attestation role.
	Attestation *AttestationNote `pulumi:"attestation"`
	// A note describing build provenance for a verifiable build.
	Build *BuildNote `pulumi:"build"`
	// A note describing a compliance check.
	Compliance *ComplianceNote `pulumi:"compliance"`
	// A note describing something that can be deployed.
	Deployment *DeploymentNote `pulumi:"deployment"`
	// A note describing the initial analysis of a resource.
	Discovery *DiscoveryNote `pulumi:"discovery"`
	// A note describing a dsse attestation note.
	DsseAttestation *DSSEAttestationNote `pulumi:"dsseAttestation"`
	// Time of expiration for this note. Empty if note does not expire.
	ExpirationTime *string `pulumi:"expirationTime"`
	// A note describing a base image.
	Image *ImageNote `pulumi:"image"`
	// A detailed description of this note.
	LongDescription *string `pulumi:"longDescription"`
	NoteId          string  `pulumi:"noteId"`
	// A note describing a package hosted by various package managers.
	Package *PackageNote `pulumi:"package"`
	Project *string      `pulumi:"project"`
	// Other notes related to this note.
	RelatedNoteNames []string `pulumi:"relatedNoteNames"`
	// URLs associated with this note.
	RelatedUrl []RelatedUrl `pulumi:"relatedUrl"`
	// A one sentence description of this note.
	ShortDescription *string `pulumi:"shortDescription"`
	// A note describing available package upgrades.
	Upgrade *UpgradeNote `pulumi:"upgrade"`
	// A note describing a package vulnerability.
	Vulnerability *VulnerabilityNote `pulumi:"vulnerability"`
}

// The set of arguments for constructing a Note resource.
type NoteArgs struct {
	// A note describing an attestation role.
	Attestation AttestationNotePtrInput
	// A note describing build provenance for a verifiable build.
	Build BuildNotePtrInput
	// A note describing a compliance check.
	Compliance ComplianceNotePtrInput
	// A note describing something that can be deployed.
	Deployment DeploymentNotePtrInput
	// A note describing the initial analysis of a resource.
	Discovery DiscoveryNotePtrInput
	// A note describing a dsse attestation note.
	DsseAttestation DSSEAttestationNotePtrInput
	// Time of expiration for this note. Empty if note does not expire.
	ExpirationTime pulumi.StringPtrInput
	// A note describing a base image.
	Image ImageNotePtrInput
	// A detailed description of this note.
	LongDescription pulumi.StringPtrInput
	NoteId          pulumi.StringInput
	// A note describing a package hosted by various package managers.
	Package PackageNotePtrInput
	Project pulumi.StringPtrInput
	// Other notes related to this note.
	RelatedNoteNames pulumi.StringArrayInput
	// URLs associated with this note.
	RelatedUrl RelatedUrlArrayInput
	// A one sentence description of this note.
	ShortDescription pulumi.StringPtrInput
	// A note describing available package upgrades.
	Upgrade UpgradeNotePtrInput
	// A note describing a package vulnerability.
	Vulnerability VulnerabilityNotePtrInput
}

func (NoteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*noteArgs)(nil)).Elem()
}

type NoteInput interface {
	pulumi.Input

	ToNoteOutput() NoteOutput
	ToNoteOutputWithContext(ctx context.Context) NoteOutput
}

func (*Note) ElementType() reflect.Type {
	return reflect.TypeOf((**Note)(nil)).Elem()
}

func (i *Note) ToNoteOutput() NoteOutput {
	return i.ToNoteOutputWithContext(context.Background())
}

func (i *Note) ToNoteOutputWithContext(ctx context.Context) NoteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NoteOutput)
}

type NoteOutput struct{ *pulumi.OutputState }

func (NoteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Note)(nil)).Elem()
}

func (o NoteOutput) ToNoteOutput() NoteOutput {
	return o
}

func (o NoteOutput) ToNoteOutputWithContext(ctx context.Context) NoteOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NoteInput)(nil)).Elem(), &Note{})
	pulumi.RegisterOutputType(NoteOutput{})
}
