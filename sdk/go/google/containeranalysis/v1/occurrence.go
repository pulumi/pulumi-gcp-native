// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new occurrence.
// Auto-naming is currently not supported for this resource.
type Occurrence struct {
	pulumi.CustomResourceState

	// Describes an attestation of an artifact.
	Attestation AttestationOccurrenceResponseOutput `pulumi:"attestation"`
	// Describes a verifiable build.
	Build BuildOccurrenceResponseOutput `pulumi:"build"`
	// Describes a compliance violation on a linked resource.
	Compliance ComplianceOccurrenceResponseOutput `pulumi:"compliance"`
	// The time this occurrence was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Describes the deployment of an artifact on a runtime.
	Deployment DeploymentOccurrenceResponseOutput `pulumi:"deployment"`
	// Describes when a resource was discovered.
	Discovery DiscoveryOccurrenceResponseOutput `pulumi:"discovery"`
	// Describes an attestation of an artifact using dsse.
	DsseAttestation DSSEAttestationOccurrenceResponseOutput `pulumi:"dsseAttestation"`
	// https://github.com/secure-systems-lab/dsse
	Envelope EnvelopeResponseOutput `pulumi:"envelope"`
	// Describes how this resource derives from the basis in the associated note.
	Image ImageOccurrenceResponseOutput `pulumi:"image"`
	// This explicitly denotes which of the occurrence details are specified. This field can be used as a filter in list requests.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// The name of the occurrence in the form of `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
	Name pulumi.StringOutput `pulumi:"name"`
	// Immutable. The analysis note associated with this occurrence, in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`. This field can be used as a filter in list requests.
	NoteName pulumi.StringOutput `pulumi:"noteName"`
	// Describes the installation of a package on the linked resource.
	Package PackageOccurrenceResponseOutput `pulumi:"package"`
	// A description of actions that can be taken to remedy the note.
	Remediation pulumi.StringOutput `pulumi:"remediation"`
	// Immutable. A URI that represents the resource for which the occurrence applies. For example, `https://gcr.io/project/image@sha256:123abc` for a Docker image.
	ResourceUri pulumi.StringOutput `pulumi:"resourceUri"`
	// The time this occurrence was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// Describes an available package upgrade on the linked resource.
	Upgrade UpgradeOccurrenceResponseOutput `pulumi:"upgrade"`
	// Describes a security vulnerability.
	Vulnerability VulnerabilityOccurrenceResponseOutput `pulumi:"vulnerability"`
}

// NewOccurrence registers a new resource with the given unique name, arguments, and options.
func NewOccurrence(ctx *pulumi.Context,
	name string, args *OccurrenceArgs, opts ...pulumi.ResourceOption) (*Occurrence, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NoteName == nil {
		return nil, errors.New("invalid value for required argument 'NoteName'")
	}
	if args.ResourceUri == nil {
		return nil, errors.New("invalid value for required argument 'ResourceUri'")
	}
	var resource Occurrence
	err := ctx.RegisterResource("google-native:containeranalysis/v1:Occurrence", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOccurrence gets an existing Occurrence resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOccurrence(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OccurrenceState, opts ...pulumi.ResourceOption) (*Occurrence, error) {
	var resource Occurrence
	err := ctx.ReadResource("google-native:containeranalysis/v1:Occurrence", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Occurrence resources.
type occurrenceState struct {
}

type OccurrenceState struct {
}

func (OccurrenceState) ElementType() reflect.Type {
	return reflect.TypeOf((*occurrenceState)(nil)).Elem()
}

type occurrenceArgs struct {
	// Describes an attestation of an artifact.
	Attestation *AttestationOccurrence `pulumi:"attestation"`
	// Describes a verifiable build.
	Build *BuildOccurrence `pulumi:"build"`
	// Describes a compliance violation on a linked resource.
	Compliance *ComplianceOccurrence `pulumi:"compliance"`
	// Describes the deployment of an artifact on a runtime.
	Deployment *DeploymentOccurrence `pulumi:"deployment"`
	// Describes when a resource was discovered.
	Discovery *DiscoveryOccurrence `pulumi:"discovery"`
	// Describes an attestation of an artifact using dsse.
	DsseAttestation *DSSEAttestationOccurrence `pulumi:"dsseAttestation"`
	// https://github.com/secure-systems-lab/dsse
	Envelope *Envelope `pulumi:"envelope"`
	// Describes how this resource derives from the basis in the associated note.
	Image *ImageOccurrence `pulumi:"image"`
	// Immutable. The analysis note associated with this occurrence, in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`. This field can be used as a filter in list requests.
	NoteName string `pulumi:"noteName"`
	// Describes the installation of a package on the linked resource.
	Package *PackageOccurrence `pulumi:"package"`
	Project *string            `pulumi:"project"`
	// A description of actions that can be taken to remedy the note.
	Remediation *string `pulumi:"remediation"`
	// Immutable. A URI that represents the resource for which the occurrence applies. For example, `https://gcr.io/project/image@sha256:123abc` for a Docker image.
	ResourceUri string `pulumi:"resourceUri"`
	// Describes an available package upgrade on the linked resource.
	Upgrade *UpgradeOccurrence `pulumi:"upgrade"`
	// Describes a security vulnerability.
	Vulnerability *VulnerabilityOccurrence `pulumi:"vulnerability"`
}

// The set of arguments for constructing a Occurrence resource.
type OccurrenceArgs struct {
	// Describes an attestation of an artifact.
	Attestation AttestationOccurrencePtrInput
	// Describes a verifiable build.
	Build BuildOccurrencePtrInput
	// Describes a compliance violation on a linked resource.
	Compliance ComplianceOccurrencePtrInput
	// Describes the deployment of an artifact on a runtime.
	Deployment DeploymentOccurrencePtrInput
	// Describes when a resource was discovered.
	Discovery DiscoveryOccurrencePtrInput
	// Describes an attestation of an artifact using dsse.
	DsseAttestation DSSEAttestationOccurrencePtrInput
	// https://github.com/secure-systems-lab/dsse
	Envelope EnvelopePtrInput
	// Describes how this resource derives from the basis in the associated note.
	Image ImageOccurrencePtrInput
	// Immutable. The analysis note associated with this occurrence, in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`. This field can be used as a filter in list requests.
	NoteName pulumi.StringInput
	// Describes the installation of a package on the linked resource.
	Package PackageOccurrencePtrInput
	Project pulumi.StringPtrInput
	// A description of actions that can be taken to remedy the note.
	Remediation pulumi.StringPtrInput
	// Immutable. A URI that represents the resource for which the occurrence applies. For example, `https://gcr.io/project/image@sha256:123abc` for a Docker image.
	ResourceUri pulumi.StringInput
	// Describes an available package upgrade on the linked resource.
	Upgrade UpgradeOccurrencePtrInput
	// Describes a security vulnerability.
	Vulnerability VulnerabilityOccurrencePtrInput
}

func (OccurrenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*occurrenceArgs)(nil)).Elem()
}

type OccurrenceInput interface {
	pulumi.Input

	ToOccurrenceOutput() OccurrenceOutput
	ToOccurrenceOutputWithContext(ctx context.Context) OccurrenceOutput
}

func (*Occurrence) ElementType() reflect.Type {
	return reflect.TypeOf((**Occurrence)(nil)).Elem()
}

func (i *Occurrence) ToOccurrenceOutput() OccurrenceOutput {
	return i.ToOccurrenceOutputWithContext(context.Background())
}

func (i *Occurrence) ToOccurrenceOutputWithContext(ctx context.Context) OccurrenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OccurrenceOutput)
}

type OccurrenceOutput struct{ *pulumi.OutputState }

func (OccurrenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Occurrence)(nil)).Elem()
}

func (o OccurrenceOutput) ToOccurrenceOutput() OccurrenceOutput {
	return o
}

func (o OccurrenceOutput) ToOccurrenceOutputWithContext(ctx context.Context) OccurrenceOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OccurrenceInput)(nil)).Elem(), &Occurrence{})
	pulumi.RegisterOutputType(OccurrenceOutput{})
}
