// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Sets the access control policy on the specified `Note` or `Occurrence`. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a `Note` or an `Occurrence`, respectively. Attempting to call this method without these permissions will result in a ` `PERMISSION_DENIED`error. Attempting to call this method on a non-existent resource will result in a`NOT_FOUND`error if the user has`containeranalysis.notes.list`permission on a`Note`or`containeranalysis.occurrences.list`on an`Occurrence` , or a  `PERMISSION_DENIED`error otherwise. The resource takes the following formats:`projects/{projectid}/occurrences/{occurrenceid}` for occurrences and projects/{projectid}/notes/{noteid} for notes
type ProviderNoteIamPolicy struct {
	pulumi.CustomResourceState
}

// NewProviderNoteIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewProviderNoteIamPolicy(ctx *pulumi.Context,
	name string, args *ProviderNoteIamPolicyArgs, opts ...pulumi.ResourceOption) (*ProviderNoteIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NotesId == nil {
		return nil, errors.New("invalid value for required argument 'NotesId'")
	}
	if args.ProvidersId == nil {
		return nil, errors.New("invalid value for required argument 'ProvidersId'")
	}
	var resource ProviderNoteIamPolicy
	err := ctx.RegisterResource("google-cloud:containeranalysis/v1alpha1:ProviderNoteIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProviderNoteIamPolicy gets an existing ProviderNoteIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProviderNoteIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProviderNoteIamPolicyState, opts ...pulumi.ResourceOption) (*ProviderNoteIamPolicy, error) {
	var resource ProviderNoteIamPolicy
	err := ctx.ReadResource("google-cloud:containeranalysis/v1alpha1:ProviderNoteIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProviderNoteIamPolicy resources.
type providerNoteIamPolicyState struct {
}

type ProviderNoteIamPolicyState struct {
}

func (ProviderNoteIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*providerNoteIamPolicyState)(nil)).Elem()
}

type providerNoteIamPolicyArgs struct {
	NotesId string `pulumi:"notesId"`
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy      *Policy `pulumi:"policy"`
	ProvidersId string  `pulumi:"providersId"`
}

// The set of arguments for constructing a ProviderNoteIamPolicy resource.
type ProviderNoteIamPolicyArgs struct {
	NotesId pulumi.StringInput
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy      PolicyPtrInput
	ProvidersId pulumi.StringInput
}

func (ProviderNoteIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*providerNoteIamPolicyArgs)(nil)).Elem()
}

type ProviderNoteIamPolicyInput interface {
	pulumi.Input

	ToProviderNoteIamPolicyOutput() ProviderNoteIamPolicyOutput
	ToProviderNoteIamPolicyOutputWithContext(ctx context.Context) ProviderNoteIamPolicyOutput
}

func (*ProviderNoteIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderNoteIamPolicy)(nil))
}

func (i *ProviderNoteIamPolicy) ToProviderNoteIamPolicyOutput() ProviderNoteIamPolicyOutput {
	return i.ToProviderNoteIamPolicyOutputWithContext(context.Background())
}

func (i *ProviderNoteIamPolicy) ToProviderNoteIamPolicyOutputWithContext(ctx context.Context) ProviderNoteIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderNoteIamPolicyOutput)
}

type ProviderNoteIamPolicyOutput struct {
	*pulumi.OutputState
}

func (ProviderNoteIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderNoteIamPolicy)(nil))
}

func (o ProviderNoteIamPolicyOutput) ToProviderNoteIamPolicyOutput() ProviderNoteIamPolicyOutput {
	return o
}

func (o ProviderNoteIamPolicyOutput) ToProviderNoteIamPolicyOutputWithContext(ctx context.Context) ProviderNoteIamPolicyOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ProviderNoteIamPolicyOutput{})
}
