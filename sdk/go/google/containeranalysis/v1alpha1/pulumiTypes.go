// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Artifact describes a build product.
type Artifact struct {
	// Hash or checksum value of a binary, or Docker Registry 2.0 digest of a container.
	Checksum *string `pulumi:"checksum"`
	// Artifact ID, if any; for container images, this will be a URL by digest like gcr.io/projectID/imagename@sha256:123456
	Id *string `pulumi:"id"`
	// Name of the artifact. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. This field is deprecated in favor of the plural `names` field; it continues to exist here to allow existing BuildProvenance serialized to json in google.devtools.containeranalysis.v1alpha1.BuildDetails.provenance_bytes to deserialize back into proto.
	Name *string `pulumi:"name"`
	// Related artifact names. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. Note that a single Artifact ID can have multiple names, for example if two tags are applied to one image.
	Names []string `pulumi:"names"`
}

// ArtifactInput is an input type that accepts ArtifactArgs and ArtifactOutput values.
// You can construct a concrete instance of `ArtifactInput` via:
//
//          ArtifactArgs{...}
type ArtifactInput interface {
	pulumi.Input

	ToArtifactOutput() ArtifactOutput
	ToArtifactOutputWithContext(context.Context) ArtifactOutput
}

// Artifact describes a build product.
type ArtifactArgs struct {
	// Hash or checksum value of a binary, or Docker Registry 2.0 digest of a container.
	Checksum pulumi.StringPtrInput `pulumi:"checksum"`
	// Artifact ID, if any; for container images, this will be a URL by digest like gcr.io/projectID/imagename@sha256:123456
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Name of the artifact. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. This field is deprecated in favor of the plural `names` field; it continues to exist here to allow existing BuildProvenance serialized to json in google.devtools.containeranalysis.v1alpha1.BuildDetails.provenance_bytes to deserialize back into proto.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Related artifact names. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. Note that a single Artifact ID can have multiple names, for example if two tags are applied to one image.
	Names pulumi.StringArrayInput `pulumi:"names"`
}

func (ArtifactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Artifact)(nil)).Elem()
}

func (i ArtifactArgs) ToArtifactOutput() ArtifactOutput {
	return i.ToArtifactOutputWithContext(context.Background())
}

func (i ArtifactArgs) ToArtifactOutputWithContext(ctx context.Context) ArtifactOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactOutput)
}

// ArtifactArrayInput is an input type that accepts ArtifactArray and ArtifactArrayOutput values.
// You can construct a concrete instance of `ArtifactArrayInput` via:
//
//          ArtifactArray{ ArtifactArgs{...} }
type ArtifactArrayInput interface {
	pulumi.Input

	ToArtifactArrayOutput() ArtifactArrayOutput
	ToArtifactArrayOutputWithContext(context.Context) ArtifactArrayOutput
}

type ArtifactArray []ArtifactInput

func (ArtifactArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Artifact)(nil)).Elem()
}

func (i ArtifactArray) ToArtifactArrayOutput() ArtifactArrayOutput {
	return i.ToArtifactArrayOutputWithContext(context.Background())
}

func (i ArtifactArray) ToArtifactArrayOutputWithContext(ctx context.Context) ArtifactArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactArrayOutput)
}

// Artifact describes a build product.
type ArtifactOutput struct{ *pulumi.OutputState }

func (ArtifactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Artifact)(nil)).Elem()
}

func (o ArtifactOutput) ToArtifactOutput() ArtifactOutput {
	return o
}

func (o ArtifactOutput) ToArtifactOutputWithContext(ctx context.Context) ArtifactOutput {
	return o
}

// Hash or checksum value of a binary, or Docker Registry 2.0 digest of a container.
func (o ArtifactOutput) Checksum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Artifact) *string { return v.Checksum }).(pulumi.StringPtrOutput)
}

// Artifact ID, if any; for container images, this will be a URL by digest like gcr.io/projectID/imagename@sha256:123456
func (o ArtifactOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Artifact) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Name of the artifact. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. This field is deprecated in favor of the plural `names` field; it continues to exist here to allow existing BuildProvenance serialized to json in google.devtools.containeranalysis.v1alpha1.BuildDetails.provenance_bytes to deserialize back into proto.
func (o ArtifactOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Artifact) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Related artifact names. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. Note that a single Artifact ID can have multiple names, for example if two tags are applied to one image.
func (o ArtifactOutput) Names() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Artifact) []string { return v.Names }).(pulumi.StringArrayOutput)
}

type ArtifactArrayOutput struct{ *pulumi.OutputState }

func (ArtifactArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Artifact)(nil)).Elem()
}

func (o ArtifactArrayOutput) ToArtifactArrayOutput() ArtifactArrayOutput {
	return o
}

func (o ArtifactArrayOutput) ToArtifactArrayOutputWithContext(ctx context.Context) ArtifactArrayOutput {
	return o
}

func (o ArtifactArrayOutput) Index(i pulumi.IntInput) ArtifactOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Artifact {
		return vs[0].([]Artifact)[vs[1].(int)]
	}).(ArtifactOutput)
}

// Occurrence that represents a single "attestation". The authenticity of an Attestation can be verified using the attached signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish trust. In this circumstance, the AttestationAuthority to which this Attestation is attached is primarily useful for look-up (how to find this Attestation if you already know the Authority and artifact to be verified) and intent (which authority was this attestation intended to sign for).
type Attestation struct {
	PgpSignedAttestation *PgpSignedAttestation `pulumi:"pgpSignedAttestation"`
}

// AttestationInput is an input type that accepts AttestationArgs and AttestationOutput values.
// You can construct a concrete instance of `AttestationInput` via:
//
//          AttestationArgs{...}
type AttestationInput interface {
	pulumi.Input

	ToAttestationOutput() AttestationOutput
	ToAttestationOutputWithContext(context.Context) AttestationOutput
}

// Occurrence that represents a single "attestation". The authenticity of an Attestation can be verified using the attached signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish trust. In this circumstance, the AttestationAuthority to which this Attestation is attached is primarily useful for look-up (how to find this Attestation if you already know the Authority and artifact to be verified) and intent (which authority was this attestation intended to sign for).
type AttestationArgs struct {
	PgpSignedAttestation PgpSignedAttestationPtrInput `pulumi:"pgpSignedAttestation"`
}

func (AttestationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Attestation)(nil)).Elem()
}

func (i AttestationArgs) ToAttestationOutput() AttestationOutput {
	return i.ToAttestationOutputWithContext(context.Background())
}

func (i AttestationArgs) ToAttestationOutputWithContext(ctx context.Context) AttestationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttestationOutput)
}

func (i AttestationArgs) ToAttestationPtrOutput() AttestationPtrOutput {
	return i.ToAttestationPtrOutputWithContext(context.Background())
}

func (i AttestationArgs) ToAttestationPtrOutputWithContext(ctx context.Context) AttestationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttestationOutput).ToAttestationPtrOutputWithContext(ctx)
}

// AttestationPtrInput is an input type that accepts AttestationArgs, AttestationPtr and AttestationPtrOutput values.
// You can construct a concrete instance of `AttestationPtrInput` via:
//
//          AttestationArgs{...}
//
//  or:
//
//          nil
type AttestationPtrInput interface {
	pulumi.Input

	ToAttestationPtrOutput() AttestationPtrOutput
	ToAttestationPtrOutputWithContext(context.Context) AttestationPtrOutput
}

type attestationPtrType AttestationArgs

func AttestationPtr(v *AttestationArgs) AttestationPtrInput {
	return (*attestationPtrType)(v)
}

func (*attestationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Attestation)(nil)).Elem()
}

func (i *attestationPtrType) ToAttestationPtrOutput() AttestationPtrOutput {
	return i.ToAttestationPtrOutputWithContext(context.Background())
}

func (i *attestationPtrType) ToAttestationPtrOutputWithContext(ctx context.Context) AttestationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttestationPtrOutput)
}

// Occurrence that represents a single "attestation". The authenticity of an Attestation can be verified using the attached signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish trust. In this circumstance, the AttestationAuthority to which this Attestation is attached is primarily useful for look-up (how to find this Attestation if you already know the Authority and artifact to be verified) and intent (which authority was this attestation intended to sign for).
type AttestationOutput struct{ *pulumi.OutputState }

func (AttestationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Attestation)(nil)).Elem()
}

func (o AttestationOutput) ToAttestationOutput() AttestationOutput {
	return o
}

func (o AttestationOutput) ToAttestationOutputWithContext(ctx context.Context) AttestationOutput {
	return o
}

func (o AttestationOutput) ToAttestationPtrOutput() AttestationPtrOutput {
	return o.ToAttestationPtrOutputWithContext(context.Background())
}

func (o AttestationOutput) ToAttestationPtrOutputWithContext(ctx context.Context) AttestationPtrOutput {
	return o.ApplyT(func(v Attestation) *Attestation {
		return &v
	}).(AttestationPtrOutput)
}
func (o AttestationOutput) PgpSignedAttestation() PgpSignedAttestationPtrOutput {
	return o.ApplyT(func(v Attestation) *PgpSignedAttestation { return v.PgpSignedAttestation }).(PgpSignedAttestationPtrOutput)
}

type AttestationPtrOutput struct{ *pulumi.OutputState }

func (AttestationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Attestation)(nil)).Elem()
}

func (o AttestationPtrOutput) ToAttestationPtrOutput() AttestationPtrOutput {
	return o
}

func (o AttestationPtrOutput) ToAttestationPtrOutputWithContext(ctx context.Context) AttestationPtrOutput {
	return o
}

func (o AttestationPtrOutput) Elem() AttestationOutput {
	return o.ApplyT(func(v *Attestation) Attestation { return *v }).(AttestationOutput)
}

func (o AttestationPtrOutput) PgpSignedAttestation() PgpSignedAttestationPtrOutput {
	return o.ApplyT(func(v *Attestation) *PgpSignedAttestation {
		if v == nil {
			return nil
		}
		return v.PgpSignedAttestation
	}).(PgpSignedAttestationPtrOutput)
}

// Note kind that represents a logical attestation "role" or "authority". For example, an organization might have one `AttestationAuthority` for "QA" and one for "build". This Note is intended to act strictly as a grouping mechanism for the attached Occurrences (Attestations). This grouping mechanism also provides a security boundary, since IAM ACLs gate the ability for a principle to attach an Occurrence to a given Note. It also provides a single point of lookup to find all attached Attestation Occurrences, even if they don't all live in the same project.
type AttestationAuthority struct {
	Hint *AttestationAuthorityHint `pulumi:"hint"`
}

// AttestationAuthorityInput is an input type that accepts AttestationAuthorityArgs and AttestationAuthorityOutput values.
// You can construct a concrete instance of `AttestationAuthorityInput` via:
//
//          AttestationAuthorityArgs{...}
type AttestationAuthorityInput interface {
	pulumi.Input

	ToAttestationAuthorityOutput() AttestationAuthorityOutput
	ToAttestationAuthorityOutputWithContext(context.Context) AttestationAuthorityOutput
}

// Note kind that represents a logical attestation "role" or "authority". For example, an organization might have one `AttestationAuthority` for "QA" and one for "build". This Note is intended to act strictly as a grouping mechanism for the attached Occurrences (Attestations). This grouping mechanism also provides a security boundary, since IAM ACLs gate the ability for a principle to attach an Occurrence to a given Note. It also provides a single point of lookup to find all attached Attestation Occurrences, even if they don't all live in the same project.
type AttestationAuthorityArgs struct {
	Hint AttestationAuthorityHintPtrInput `pulumi:"hint"`
}

func (AttestationAuthorityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AttestationAuthority)(nil)).Elem()
}

func (i AttestationAuthorityArgs) ToAttestationAuthorityOutput() AttestationAuthorityOutput {
	return i.ToAttestationAuthorityOutputWithContext(context.Background())
}

func (i AttestationAuthorityArgs) ToAttestationAuthorityOutputWithContext(ctx context.Context) AttestationAuthorityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttestationAuthorityOutput)
}

func (i AttestationAuthorityArgs) ToAttestationAuthorityPtrOutput() AttestationAuthorityPtrOutput {
	return i.ToAttestationAuthorityPtrOutputWithContext(context.Background())
}

func (i AttestationAuthorityArgs) ToAttestationAuthorityPtrOutputWithContext(ctx context.Context) AttestationAuthorityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttestationAuthorityOutput).ToAttestationAuthorityPtrOutputWithContext(ctx)
}

// AttestationAuthorityPtrInput is an input type that accepts AttestationAuthorityArgs, AttestationAuthorityPtr and AttestationAuthorityPtrOutput values.
// You can construct a concrete instance of `AttestationAuthorityPtrInput` via:
//
//          AttestationAuthorityArgs{...}
//
//  or:
//
//          nil
type AttestationAuthorityPtrInput interface {
	pulumi.Input

	ToAttestationAuthorityPtrOutput() AttestationAuthorityPtrOutput
	ToAttestationAuthorityPtrOutputWithContext(context.Context) AttestationAuthorityPtrOutput
}

type attestationAuthorityPtrType AttestationAuthorityArgs

func AttestationAuthorityPtr(v *AttestationAuthorityArgs) AttestationAuthorityPtrInput {
	return (*attestationAuthorityPtrType)(v)
}

func (*attestationAuthorityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AttestationAuthority)(nil)).Elem()
}

func (i *attestationAuthorityPtrType) ToAttestationAuthorityPtrOutput() AttestationAuthorityPtrOutput {
	return i.ToAttestationAuthorityPtrOutputWithContext(context.Background())
}

func (i *attestationAuthorityPtrType) ToAttestationAuthorityPtrOutputWithContext(ctx context.Context) AttestationAuthorityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttestationAuthorityPtrOutput)
}

// Note kind that represents a logical attestation "role" or "authority". For example, an organization might have one `AttestationAuthority` for "QA" and one for "build". This Note is intended to act strictly as a grouping mechanism for the attached Occurrences (Attestations). This grouping mechanism also provides a security boundary, since IAM ACLs gate the ability for a principle to attach an Occurrence to a given Note. It also provides a single point of lookup to find all attached Attestation Occurrences, even if they don't all live in the same project.
type AttestationAuthorityOutput struct{ *pulumi.OutputState }

func (AttestationAuthorityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AttestationAuthority)(nil)).Elem()
}

func (o AttestationAuthorityOutput) ToAttestationAuthorityOutput() AttestationAuthorityOutput {
	return o
}

func (o AttestationAuthorityOutput) ToAttestationAuthorityOutputWithContext(ctx context.Context) AttestationAuthorityOutput {
	return o
}

func (o AttestationAuthorityOutput) ToAttestationAuthorityPtrOutput() AttestationAuthorityPtrOutput {
	return o.ToAttestationAuthorityPtrOutputWithContext(context.Background())
}

func (o AttestationAuthorityOutput) ToAttestationAuthorityPtrOutputWithContext(ctx context.Context) AttestationAuthorityPtrOutput {
	return o.ApplyT(func(v AttestationAuthority) *AttestationAuthority {
		return &v
	}).(AttestationAuthorityPtrOutput)
}
func (o AttestationAuthorityOutput) Hint() AttestationAuthorityHintPtrOutput {
	return o.ApplyT(func(v AttestationAuthority) *AttestationAuthorityHint { return v.Hint }).(AttestationAuthorityHintPtrOutput)
}

type AttestationAuthorityPtrOutput struct{ *pulumi.OutputState }

func (AttestationAuthorityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AttestationAuthority)(nil)).Elem()
}

func (o AttestationAuthorityPtrOutput) ToAttestationAuthorityPtrOutput() AttestationAuthorityPtrOutput {
	return o
}

func (o AttestationAuthorityPtrOutput) ToAttestationAuthorityPtrOutputWithContext(ctx context.Context) AttestationAuthorityPtrOutput {
	return o
}

func (o AttestationAuthorityPtrOutput) Elem() AttestationAuthorityOutput {
	return o.ApplyT(func(v *AttestationAuthority) AttestationAuthority { return *v }).(AttestationAuthorityOutput)
}

func (o AttestationAuthorityPtrOutput) Hint() AttestationAuthorityHintPtrOutput {
	return o.ApplyT(func(v *AttestationAuthority) *AttestationAuthorityHint {
		if v == nil {
			return nil
		}
		return v.Hint
	}).(AttestationAuthorityHintPtrOutput)
}

// This submessage provides human-readable hints about the purpose of the AttestationAuthority. Because the name of a Note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from "readable" names more suitable for debug output. Note that these hints should NOT be used to look up AttestationAuthorities in security sensitive contexts, such as when looking up Attestations to verify.
type AttestationAuthorityHint struct {
	// The human readable name of this Attestation Authority, for example "qa".
	HumanReadableName *string `pulumi:"humanReadableName"`
}

// AttestationAuthorityHintInput is an input type that accepts AttestationAuthorityHintArgs and AttestationAuthorityHintOutput values.
// You can construct a concrete instance of `AttestationAuthorityHintInput` via:
//
//          AttestationAuthorityHintArgs{...}
type AttestationAuthorityHintInput interface {
	pulumi.Input

	ToAttestationAuthorityHintOutput() AttestationAuthorityHintOutput
	ToAttestationAuthorityHintOutputWithContext(context.Context) AttestationAuthorityHintOutput
}

// This submessage provides human-readable hints about the purpose of the AttestationAuthority. Because the name of a Note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from "readable" names more suitable for debug output. Note that these hints should NOT be used to look up AttestationAuthorities in security sensitive contexts, such as when looking up Attestations to verify.
type AttestationAuthorityHintArgs struct {
	// The human readable name of this Attestation Authority, for example "qa".
	HumanReadableName pulumi.StringPtrInput `pulumi:"humanReadableName"`
}

func (AttestationAuthorityHintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AttestationAuthorityHint)(nil)).Elem()
}

func (i AttestationAuthorityHintArgs) ToAttestationAuthorityHintOutput() AttestationAuthorityHintOutput {
	return i.ToAttestationAuthorityHintOutputWithContext(context.Background())
}

func (i AttestationAuthorityHintArgs) ToAttestationAuthorityHintOutputWithContext(ctx context.Context) AttestationAuthorityHintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttestationAuthorityHintOutput)
}

func (i AttestationAuthorityHintArgs) ToAttestationAuthorityHintPtrOutput() AttestationAuthorityHintPtrOutput {
	return i.ToAttestationAuthorityHintPtrOutputWithContext(context.Background())
}

func (i AttestationAuthorityHintArgs) ToAttestationAuthorityHintPtrOutputWithContext(ctx context.Context) AttestationAuthorityHintPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttestationAuthorityHintOutput).ToAttestationAuthorityHintPtrOutputWithContext(ctx)
}

// AttestationAuthorityHintPtrInput is an input type that accepts AttestationAuthorityHintArgs, AttestationAuthorityHintPtr and AttestationAuthorityHintPtrOutput values.
// You can construct a concrete instance of `AttestationAuthorityHintPtrInput` via:
//
//          AttestationAuthorityHintArgs{...}
//
//  or:
//
//          nil
type AttestationAuthorityHintPtrInput interface {
	pulumi.Input

	ToAttestationAuthorityHintPtrOutput() AttestationAuthorityHintPtrOutput
	ToAttestationAuthorityHintPtrOutputWithContext(context.Context) AttestationAuthorityHintPtrOutput
}

type attestationAuthorityHintPtrType AttestationAuthorityHintArgs

func AttestationAuthorityHintPtr(v *AttestationAuthorityHintArgs) AttestationAuthorityHintPtrInput {
	return (*attestationAuthorityHintPtrType)(v)
}

func (*attestationAuthorityHintPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AttestationAuthorityHint)(nil)).Elem()
}

func (i *attestationAuthorityHintPtrType) ToAttestationAuthorityHintPtrOutput() AttestationAuthorityHintPtrOutput {
	return i.ToAttestationAuthorityHintPtrOutputWithContext(context.Background())
}

func (i *attestationAuthorityHintPtrType) ToAttestationAuthorityHintPtrOutputWithContext(ctx context.Context) AttestationAuthorityHintPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttestationAuthorityHintPtrOutput)
}

// This submessage provides human-readable hints about the purpose of the AttestationAuthority. Because the name of a Note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from "readable" names more suitable for debug output. Note that these hints should NOT be used to look up AttestationAuthorities in security sensitive contexts, such as when looking up Attestations to verify.
type AttestationAuthorityHintOutput struct{ *pulumi.OutputState }

func (AttestationAuthorityHintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AttestationAuthorityHint)(nil)).Elem()
}

func (o AttestationAuthorityHintOutput) ToAttestationAuthorityHintOutput() AttestationAuthorityHintOutput {
	return o
}

func (o AttestationAuthorityHintOutput) ToAttestationAuthorityHintOutputWithContext(ctx context.Context) AttestationAuthorityHintOutput {
	return o
}

func (o AttestationAuthorityHintOutput) ToAttestationAuthorityHintPtrOutput() AttestationAuthorityHintPtrOutput {
	return o.ToAttestationAuthorityHintPtrOutputWithContext(context.Background())
}

func (o AttestationAuthorityHintOutput) ToAttestationAuthorityHintPtrOutputWithContext(ctx context.Context) AttestationAuthorityHintPtrOutput {
	return o.ApplyT(func(v AttestationAuthorityHint) *AttestationAuthorityHint {
		return &v
	}).(AttestationAuthorityHintPtrOutput)
}

// The human readable name of this Attestation Authority, for example "qa".
func (o AttestationAuthorityHintOutput) HumanReadableName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AttestationAuthorityHint) *string { return v.HumanReadableName }).(pulumi.StringPtrOutput)
}

type AttestationAuthorityHintPtrOutput struct{ *pulumi.OutputState }

func (AttestationAuthorityHintPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AttestationAuthorityHint)(nil)).Elem()
}

func (o AttestationAuthorityHintPtrOutput) ToAttestationAuthorityHintPtrOutput() AttestationAuthorityHintPtrOutput {
	return o
}

func (o AttestationAuthorityHintPtrOutput) ToAttestationAuthorityHintPtrOutputWithContext(ctx context.Context) AttestationAuthorityHintPtrOutput {
	return o
}

func (o AttestationAuthorityHintPtrOutput) Elem() AttestationAuthorityHintOutput {
	return o.ApplyT(func(v *AttestationAuthorityHint) AttestationAuthorityHint { return *v }).(AttestationAuthorityHintOutput)
}

// The human readable name of this Attestation Authority, for example "qa".
func (o AttestationAuthorityHintPtrOutput) HumanReadableName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AttestationAuthorityHint) *string {
		if v == nil {
			return nil
		}
		return v.HumanReadableName
	}).(pulumi.StringPtrOutput)
}

// Basis describes the base image portion (Note) of the DockerImage relationship. Linked occurrences are derived from this or an equivalent image via: FROM Or an equivalent reference, e.g. a tag of the resource_url.
type Basis struct {
	// The fingerprint of the base image.
	Fingerprint *Fingerprint `pulumi:"fingerprint"`
	// The resource_url for the resource representing the basis of associated occurrence images.
	ResourceUrl *string `pulumi:"resourceUrl"`
}

// BasisInput is an input type that accepts BasisArgs and BasisOutput values.
// You can construct a concrete instance of `BasisInput` via:
//
//          BasisArgs{...}
type BasisInput interface {
	pulumi.Input

	ToBasisOutput() BasisOutput
	ToBasisOutputWithContext(context.Context) BasisOutput
}

// Basis describes the base image portion (Note) of the DockerImage relationship. Linked occurrences are derived from this or an equivalent image via: FROM Or an equivalent reference, e.g. a tag of the resource_url.
type BasisArgs struct {
	// The fingerprint of the base image.
	Fingerprint FingerprintPtrInput `pulumi:"fingerprint"`
	// The resource_url for the resource representing the basis of associated occurrence images.
	ResourceUrl pulumi.StringPtrInput `pulumi:"resourceUrl"`
}

func (BasisArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Basis)(nil)).Elem()
}

func (i BasisArgs) ToBasisOutput() BasisOutput {
	return i.ToBasisOutputWithContext(context.Background())
}

func (i BasisArgs) ToBasisOutputWithContext(ctx context.Context) BasisOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BasisOutput)
}

func (i BasisArgs) ToBasisPtrOutput() BasisPtrOutput {
	return i.ToBasisPtrOutputWithContext(context.Background())
}

func (i BasisArgs) ToBasisPtrOutputWithContext(ctx context.Context) BasisPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BasisOutput).ToBasisPtrOutputWithContext(ctx)
}

// BasisPtrInput is an input type that accepts BasisArgs, BasisPtr and BasisPtrOutput values.
// You can construct a concrete instance of `BasisPtrInput` via:
//
//          BasisArgs{...}
//
//  or:
//
//          nil
type BasisPtrInput interface {
	pulumi.Input

	ToBasisPtrOutput() BasisPtrOutput
	ToBasisPtrOutputWithContext(context.Context) BasisPtrOutput
}

type basisPtrType BasisArgs

func BasisPtr(v *BasisArgs) BasisPtrInput {
	return (*basisPtrType)(v)
}

func (*basisPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Basis)(nil)).Elem()
}

func (i *basisPtrType) ToBasisPtrOutput() BasisPtrOutput {
	return i.ToBasisPtrOutputWithContext(context.Background())
}

func (i *basisPtrType) ToBasisPtrOutputWithContext(ctx context.Context) BasisPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BasisPtrOutput)
}

// Basis describes the base image portion (Note) of the DockerImage relationship. Linked occurrences are derived from this or an equivalent image via: FROM Or an equivalent reference, e.g. a tag of the resource_url.
type BasisOutput struct{ *pulumi.OutputState }

func (BasisOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Basis)(nil)).Elem()
}

func (o BasisOutput) ToBasisOutput() BasisOutput {
	return o
}

func (o BasisOutput) ToBasisOutputWithContext(ctx context.Context) BasisOutput {
	return o
}

func (o BasisOutput) ToBasisPtrOutput() BasisPtrOutput {
	return o.ToBasisPtrOutputWithContext(context.Background())
}

func (o BasisOutput) ToBasisPtrOutputWithContext(ctx context.Context) BasisPtrOutput {
	return o.ApplyT(func(v Basis) *Basis {
		return &v
	}).(BasisPtrOutput)
}

// The fingerprint of the base image.
func (o BasisOutput) Fingerprint() FingerprintPtrOutput {
	return o.ApplyT(func(v Basis) *Fingerprint { return v.Fingerprint }).(FingerprintPtrOutput)
}

// The resource_url for the resource representing the basis of associated occurrence images.
func (o BasisOutput) ResourceUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Basis) *string { return v.ResourceUrl }).(pulumi.StringPtrOutput)
}

type BasisPtrOutput struct{ *pulumi.OutputState }

func (BasisPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Basis)(nil)).Elem()
}

func (o BasisPtrOutput) ToBasisPtrOutput() BasisPtrOutput {
	return o
}

func (o BasisPtrOutput) ToBasisPtrOutputWithContext(ctx context.Context) BasisPtrOutput {
	return o
}

func (o BasisPtrOutput) Elem() BasisOutput {
	return o.ApplyT(func(v *Basis) Basis { return *v }).(BasisOutput)
}

// The fingerprint of the base image.
func (o BasisPtrOutput) Fingerprint() FingerprintPtrOutput {
	return o.ApplyT(func(v *Basis) *Fingerprint {
		if v == nil {
			return nil
		}
		return v.Fingerprint
	}).(FingerprintPtrOutput)
}

// The resource_url for the resource representing the basis of associated occurrence images.
func (o BasisPtrOutput) ResourceUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Basis) *string {
		if v == nil {
			return nil
		}
		return v.ResourceUrl
	}).(pulumi.StringPtrOutput)
}

// Associates `members` with a `role`.
type Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members []string `pulumi:"members"`
	// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//          BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates `members` with a `role`.
type BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//          BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

// Associates `members` with a `role`.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

// Message encapsulating build provenance details.
type BuildDetails struct {
	// The actual provenance
	Provenance *BuildProvenance `pulumi:"provenance"`
	// Serialized JSON representation of the provenance, used in generating the `BuildSignature` in the corresponding Result. After verifying the signature, `provenance_bytes` can be unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json as well to prevent incompatibilities with future changes.
	ProvenanceBytes *string `pulumi:"provenanceBytes"`
}

// BuildDetailsInput is an input type that accepts BuildDetailsArgs and BuildDetailsOutput values.
// You can construct a concrete instance of `BuildDetailsInput` via:
//
//          BuildDetailsArgs{...}
type BuildDetailsInput interface {
	pulumi.Input

	ToBuildDetailsOutput() BuildDetailsOutput
	ToBuildDetailsOutputWithContext(context.Context) BuildDetailsOutput
}

// Message encapsulating build provenance details.
type BuildDetailsArgs struct {
	// The actual provenance
	Provenance BuildProvenancePtrInput `pulumi:"provenance"`
	// Serialized JSON representation of the provenance, used in generating the `BuildSignature` in the corresponding Result. After verifying the signature, `provenance_bytes` can be unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json as well to prevent incompatibilities with future changes.
	ProvenanceBytes pulumi.StringPtrInput `pulumi:"provenanceBytes"`
}

func (BuildDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildDetails)(nil)).Elem()
}

func (i BuildDetailsArgs) ToBuildDetailsOutput() BuildDetailsOutput {
	return i.ToBuildDetailsOutputWithContext(context.Background())
}

func (i BuildDetailsArgs) ToBuildDetailsOutputWithContext(ctx context.Context) BuildDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildDetailsOutput)
}

func (i BuildDetailsArgs) ToBuildDetailsPtrOutput() BuildDetailsPtrOutput {
	return i.ToBuildDetailsPtrOutputWithContext(context.Background())
}

func (i BuildDetailsArgs) ToBuildDetailsPtrOutputWithContext(ctx context.Context) BuildDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildDetailsOutput).ToBuildDetailsPtrOutputWithContext(ctx)
}

// BuildDetailsPtrInput is an input type that accepts BuildDetailsArgs, BuildDetailsPtr and BuildDetailsPtrOutput values.
// You can construct a concrete instance of `BuildDetailsPtrInput` via:
//
//          BuildDetailsArgs{...}
//
//  or:
//
//          nil
type BuildDetailsPtrInput interface {
	pulumi.Input

	ToBuildDetailsPtrOutput() BuildDetailsPtrOutput
	ToBuildDetailsPtrOutputWithContext(context.Context) BuildDetailsPtrOutput
}

type buildDetailsPtrType BuildDetailsArgs

func BuildDetailsPtr(v *BuildDetailsArgs) BuildDetailsPtrInput {
	return (*buildDetailsPtrType)(v)
}

func (*buildDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildDetails)(nil)).Elem()
}

func (i *buildDetailsPtrType) ToBuildDetailsPtrOutput() BuildDetailsPtrOutput {
	return i.ToBuildDetailsPtrOutputWithContext(context.Background())
}

func (i *buildDetailsPtrType) ToBuildDetailsPtrOutputWithContext(ctx context.Context) BuildDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildDetailsPtrOutput)
}

// Message encapsulating build provenance details.
type BuildDetailsOutput struct{ *pulumi.OutputState }

func (BuildDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildDetails)(nil)).Elem()
}

func (o BuildDetailsOutput) ToBuildDetailsOutput() BuildDetailsOutput {
	return o
}

func (o BuildDetailsOutput) ToBuildDetailsOutputWithContext(ctx context.Context) BuildDetailsOutput {
	return o
}

func (o BuildDetailsOutput) ToBuildDetailsPtrOutput() BuildDetailsPtrOutput {
	return o.ToBuildDetailsPtrOutputWithContext(context.Background())
}

func (o BuildDetailsOutput) ToBuildDetailsPtrOutputWithContext(ctx context.Context) BuildDetailsPtrOutput {
	return o.ApplyT(func(v BuildDetails) *BuildDetails {
		return &v
	}).(BuildDetailsPtrOutput)
}

// The actual provenance
func (o BuildDetailsOutput) Provenance() BuildProvenancePtrOutput {
	return o.ApplyT(func(v BuildDetails) *BuildProvenance { return v.Provenance }).(BuildProvenancePtrOutput)
}

// Serialized JSON representation of the provenance, used in generating the `BuildSignature` in the corresponding Result. After verifying the signature, `provenance_bytes` can be unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json as well to prevent incompatibilities with future changes.
func (o BuildDetailsOutput) ProvenanceBytes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildDetails) *string { return v.ProvenanceBytes }).(pulumi.StringPtrOutput)
}

type BuildDetailsPtrOutput struct{ *pulumi.OutputState }

func (BuildDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildDetails)(nil)).Elem()
}

func (o BuildDetailsPtrOutput) ToBuildDetailsPtrOutput() BuildDetailsPtrOutput {
	return o
}

func (o BuildDetailsPtrOutput) ToBuildDetailsPtrOutputWithContext(ctx context.Context) BuildDetailsPtrOutput {
	return o
}

func (o BuildDetailsPtrOutput) Elem() BuildDetailsOutput {
	return o.ApplyT(func(v *BuildDetails) BuildDetails { return *v }).(BuildDetailsOutput)
}

// The actual provenance
func (o BuildDetailsPtrOutput) Provenance() BuildProvenancePtrOutput {
	return o.ApplyT(func(v *BuildDetails) *BuildProvenance {
		if v == nil {
			return nil
		}
		return v.Provenance
	}).(BuildProvenancePtrOutput)
}

// Serialized JSON representation of the provenance, used in generating the `BuildSignature` in the corresponding Result. After verifying the signature, `provenance_bytes` can be unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json as well to prevent incompatibilities with future changes.
func (o BuildDetailsPtrOutput) ProvenanceBytes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildDetails) *string {
		if v == nil {
			return nil
		}
		return v.ProvenanceBytes
	}).(pulumi.StringPtrOutput)
}

// Provenance of a build. Contains all information needed to verify the full details about the build from source to completion.
type BuildProvenance struct {
	// Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.
	BuildOptions map[string]string `pulumi:"buildOptions"`
	// Version string of the builder at the time this build was executed.
	BuilderVersion *string `pulumi:"builderVersion"`
	// Output of the build.
	BuiltArtifacts []Artifact `pulumi:"builtArtifacts"`
	// Commands requested by the build.
	Commands []Command `pulumi:"commands"`
	// Time at which the build was created.
	CreateTime *string `pulumi:"createTime"`
	// E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.
	Creator *string `pulumi:"creator"`
	// Time at which execution of the build was finished.
	FinishTime *string `pulumi:"finishTime"`
	// Unique identifier of the build.
	Id *string `pulumi:"id"`
	// Google Cloud Storage bucket where logs were written.
	LogsBucket *string `pulumi:"logsBucket"`
	// ID of the project.
	ProjectId *string `pulumi:"projectId"`
	// Details of the Source input to the build.
	SourceProvenance *Source `pulumi:"sourceProvenance"`
	// Time at which execution of the build was started.
	StartTime *string `pulumi:"startTime"`
	// Trigger identifier if the build was triggered automatically; empty if not.
	TriggerId *string `pulumi:"triggerId"`
}

// BuildProvenanceInput is an input type that accepts BuildProvenanceArgs and BuildProvenanceOutput values.
// You can construct a concrete instance of `BuildProvenanceInput` via:
//
//          BuildProvenanceArgs{...}
type BuildProvenanceInput interface {
	pulumi.Input

	ToBuildProvenanceOutput() BuildProvenanceOutput
	ToBuildProvenanceOutputWithContext(context.Context) BuildProvenanceOutput
}

// Provenance of a build. Contains all information needed to verify the full details about the build from source to completion.
type BuildProvenanceArgs struct {
	// Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.
	BuildOptions pulumi.StringMapInput `pulumi:"buildOptions"`
	// Version string of the builder at the time this build was executed.
	BuilderVersion pulumi.StringPtrInput `pulumi:"builderVersion"`
	// Output of the build.
	BuiltArtifacts ArtifactArrayInput `pulumi:"builtArtifacts"`
	// Commands requested by the build.
	Commands CommandArrayInput `pulumi:"commands"`
	// Time at which the build was created.
	CreateTime pulumi.StringPtrInput `pulumi:"createTime"`
	// E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.
	Creator pulumi.StringPtrInput `pulumi:"creator"`
	// Time at which execution of the build was finished.
	FinishTime pulumi.StringPtrInput `pulumi:"finishTime"`
	// Unique identifier of the build.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Google Cloud Storage bucket where logs were written.
	LogsBucket pulumi.StringPtrInput `pulumi:"logsBucket"`
	// ID of the project.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// Details of the Source input to the build.
	SourceProvenance SourcePtrInput `pulumi:"sourceProvenance"`
	// Time at which execution of the build was started.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
	// Trigger identifier if the build was triggered automatically; empty if not.
	TriggerId pulumi.StringPtrInput `pulumi:"triggerId"`
}

func (BuildProvenanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildProvenance)(nil)).Elem()
}

func (i BuildProvenanceArgs) ToBuildProvenanceOutput() BuildProvenanceOutput {
	return i.ToBuildProvenanceOutputWithContext(context.Background())
}

func (i BuildProvenanceArgs) ToBuildProvenanceOutputWithContext(ctx context.Context) BuildProvenanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildProvenanceOutput)
}

func (i BuildProvenanceArgs) ToBuildProvenancePtrOutput() BuildProvenancePtrOutput {
	return i.ToBuildProvenancePtrOutputWithContext(context.Background())
}

func (i BuildProvenanceArgs) ToBuildProvenancePtrOutputWithContext(ctx context.Context) BuildProvenancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildProvenanceOutput).ToBuildProvenancePtrOutputWithContext(ctx)
}

// BuildProvenancePtrInput is an input type that accepts BuildProvenanceArgs, BuildProvenancePtr and BuildProvenancePtrOutput values.
// You can construct a concrete instance of `BuildProvenancePtrInput` via:
//
//          BuildProvenanceArgs{...}
//
//  or:
//
//          nil
type BuildProvenancePtrInput interface {
	pulumi.Input

	ToBuildProvenancePtrOutput() BuildProvenancePtrOutput
	ToBuildProvenancePtrOutputWithContext(context.Context) BuildProvenancePtrOutput
}

type buildProvenancePtrType BuildProvenanceArgs

func BuildProvenancePtr(v *BuildProvenanceArgs) BuildProvenancePtrInput {
	return (*buildProvenancePtrType)(v)
}

func (*buildProvenancePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildProvenance)(nil)).Elem()
}

func (i *buildProvenancePtrType) ToBuildProvenancePtrOutput() BuildProvenancePtrOutput {
	return i.ToBuildProvenancePtrOutputWithContext(context.Background())
}

func (i *buildProvenancePtrType) ToBuildProvenancePtrOutputWithContext(ctx context.Context) BuildProvenancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildProvenancePtrOutput)
}

// Provenance of a build. Contains all information needed to verify the full details about the build from source to completion.
type BuildProvenanceOutput struct{ *pulumi.OutputState }

func (BuildProvenanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildProvenance)(nil)).Elem()
}

func (o BuildProvenanceOutput) ToBuildProvenanceOutput() BuildProvenanceOutput {
	return o
}

func (o BuildProvenanceOutput) ToBuildProvenanceOutputWithContext(ctx context.Context) BuildProvenanceOutput {
	return o
}

func (o BuildProvenanceOutput) ToBuildProvenancePtrOutput() BuildProvenancePtrOutput {
	return o.ToBuildProvenancePtrOutputWithContext(context.Background())
}

func (o BuildProvenanceOutput) ToBuildProvenancePtrOutputWithContext(ctx context.Context) BuildProvenancePtrOutput {
	return o.ApplyT(func(v BuildProvenance) *BuildProvenance {
		return &v
	}).(BuildProvenancePtrOutput)
}

// Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.
func (o BuildProvenanceOutput) BuildOptions() pulumi.StringMapOutput {
	return o.ApplyT(func(v BuildProvenance) map[string]string { return v.BuildOptions }).(pulumi.StringMapOutput)
}

// Version string of the builder at the time this build was executed.
func (o BuildProvenanceOutput) BuilderVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildProvenance) *string { return v.BuilderVersion }).(pulumi.StringPtrOutput)
}

// Output of the build.
func (o BuildProvenanceOutput) BuiltArtifacts() ArtifactArrayOutput {
	return o.ApplyT(func(v BuildProvenance) []Artifact { return v.BuiltArtifacts }).(ArtifactArrayOutput)
}

// Commands requested by the build.
func (o BuildProvenanceOutput) Commands() CommandArrayOutput {
	return o.ApplyT(func(v BuildProvenance) []Command { return v.Commands }).(CommandArrayOutput)
}

// Time at which the build was created.
func (o BuildProvenanceOutput) CreateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildProvenance) *string { return v.CreateTime }).(pulumi.StringPtrOutput)
}

// E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.
func (o BuildProvenanceOutput) Creator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildProvenance) *string { return v.Creator }).(pulumi.StringPtrOutput)
}

// Time at which execution of the build was finished.
func (o BuildProvenanceOutput) FinishTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildProvenance) *string { return v.FinishTime }).(pulumi.StringPtrOutput)
}

// Unique identifier of the build.
func (o BuildProvenanceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildProvenance) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Google Cloud Storage bucket where logs were written.
func (o BuildProvenanceOutput) LogsBucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildProvenance) *string { return v.LogsBucket }).(pulumi.StringPtrOutput)
}

// ID of the project.
func (o BuildProvenanceOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildProvenance) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Details of the Source input to the build.
func (o BuildProvenanceOutput) SourceProvenance() SourcePtrOutput {
	return o.ApplyT(func(v BuildProvenance) *Source { return v.SourceProvenance }).(SourcePtrOutput)
}

// Time at which execution of the build was started.
func (o BuildProvenanceOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildProvenance) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// Trigger identifier if the build was triggered automatically; empty if not.
func (o BuildProvenanceOutput) TriggerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildProvenance) *string { return v.TriggerId }).(pulumi.StringPtrOutput)
}

type BuildProvenancePtrOutput struct{ *pulumi.OutputState }

func (BuildProvenancePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildProvenance)(nil)).Elem()
}

func (o BuildProvenancePtrOutput) ToBuildProvenancePtrOutput() BuildProvenancePtrOutput {
	return o
}

func (o BuildProvenancePtrOutput) ToBuildProvenancePtrOutputWithContext(ctx context.Context) BuildProvenancePtrOutput {
	return o
}

func (o BuildProvenancePtrOutput) Elem() BuildProvenanceOutput {
	return o.ApplyT(func(v *BuildProvenance) BuildProvenance { return *v }).(BuildProvenanceOutput)
}

// Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.
func (o BuildProvenancePtrOutput) BuildOptions() pulumi.StringMapOutput {
	return o.ApplyT(func(v *BuildProvenance) map[string]string {
		if v == nil {
			return nil
		}
		return v.BuildOptions
	}).(pulumi.StringMapOutput)
}

// Version string of the builder at the time this build was executed.
func (o BuildProvenancePtrOutput) BuilderVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildProvenance) *string {
		if v == nil {
			return nil
		}
		return v.BuilderVersion
	}).(pulumi.StringPtrOutput)
}

// Output of the build.
func (o BuildProvenancePtrOutput) BuiltArtifacts() ArtifactArrayOutput {
	return o.ApplyT(func(v *BuildProvenance) []Artifact {
		if v == nil {
			return nil
		}
		return v.BuiltArtifacts
	}).(ArtifactArrayOutput)
}

// Commands requested by the build.
func (o BuildProvenancePtrOutput) Commands() CommandArrayOutput {
	return o.ApplyT(func(v *BuildProvenance) []Command {
		if v == nil {
			return nil
		}
		return v.Commands
	}).(CommandArrayOutput)
}

// Time at which the build was created.
func (o BuildProvenancePtrOutput) CreateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildProvenance) *string {
		if v == nil {
			return nil
		}
		return v.CreateTime
	}).(pulumi.StringPtrOutput)
}

// E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.
func (o BuildProvenancePtrOutput) Creator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildProvenance) *string {
		if v == nil {
			return nil
		}
		return v.Creator
	}).(pulumi.StringPtrOutput)
}

// Time at which execution of the build was finished.
func (o BuildProvenancePtrOutput) FinishTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildProvenance) *string {
		if v == nil {
			return nil
		}
		return v.FinishTime
	}).(pulumi.StringPtrOutput)
}

// Unique identifier of the build.
func (o BuildProvenancePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildProvenance) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Google Cloud Storage bucket where logs were written.
func (o BuildProvenancePtrOutput) LogsBucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildProvenance) *string {
		if v == nil {
			return nil
		}
		return v.LogsBucket
	}).(pulumi.StringPtrOutput)
}

// ID of the project.
func (o BuildProvenancePtrOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildProvenance) *string {
		if v == nil {
			return nil
		}
		return v.ProjectId
	}).(pulumi.StringPtrOutput)
}

// Details of the Source input to the build.
func (o BuildProvenancePtrOutput) SourceProvenance() SourcePtrOutput {
	return o.ApplyT(func(v *BuildProvenance) *Source {
		if v == nil {
			return nil
		}
		return v.SourceProvenance
	}).(SourcePtrOutput)
}

// Time at which execution of the build was started.
func (o BuildProvenancePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildProvenance) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Trigger identifier if the build was triggered automatically; empty if not.
func (o BuildProvenancePtrOutput) TriggerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildProvenance) *string {
		if v == nil {
			return nil
		}
		return v.TriggerId
	}).(pulumi.StringPtrOutput)
}

// Message encapsulating the signature of the verified build.
type BuildSignature struct {
	// An Id for the key used to sign. This could be either an Id for the key stored in `public_key` (such as the Id or fingerprint for a PGP key, or the CN for a cert), or a reference to an external key (such as a reference to a key in Cloud Key Management Service).
	KeyId *string `pulumi:"keyId"`
	// The type of the key, either stored in `public_key` or referenced in `key_id`
	KeyType *string `pulumi:"keyType"`
	// Public key of the builder which can be used to verify that the related findings are valid and unchanged. If `key_type` is empty, this defaults to PEM encoded public keys. This field may be empty if `key_id` references an external key. For Cloud Build based signatures, this is a PEM encoded public key. To verify the Cloud Build signature, place the contents of this field into a file (public.pem). The signature field is base64-decoded into its binary representation in signature.bin, and the provenance bytes from `BuildDetails` are base64-decoded into a binary representation in signed.bin. OpenSSL can then verify the signature: `openssl sha256 -verify public.pem -signature signature.bin signed.bin`
	PublicKey *string `pulumi:"publicKey"`
	// Signature of the related `BuildProvenance`, encoded in a base64 string.
	Signature *string `pulumi:"signature"`
}

// BuildSignatureInput is an input type that accepts BuildSignatureArgs and BuildSignatureOutput values.
// You can construct a concrete instance of `BuildSignatureInput` via:
//
//          BuildSignatureArgs{...}
type BuildSignatureInput interface {
	pulumi.Input

	ToBuildSignatureOutput() BuildSignatureOutput
	ToBuildSignatureOutputWithContext(context.Context) BuildSignatureOutput
}

// Message encapsulating the signature of the verified build.
type BuildSignatureArgs struct {
	// An Id for the key used to sign. This could be either an Id for the key stored in `public_key` (such as the Id or fingerprint for a PGP key, or the CN for a cert), or a reference to an external key (such as a reference to a key in Cloud Key Management Service).
	KeyId pulumi.StringPtrInput `pulumi:"keyId"`
	// The type of the key, either stored in `public_key` or referenced in `key_id`
	KeyType pulumi.StringPtrInput `pulumi:"keyType"`
	// Public key of the builder which can be used to verify that the related findings are valid and unchanged. If `key_type` is empty, this defaults to PEM encoded public keys. This field may be empty if `key_id` references an external key. For Cloud Build based signatures, this is a PEM encoded public key. To verify the Cloud Build signature, place the contents of this field into a file (public.pem). The signature field is base64-decoded into its binary representation in signature.bin, and the provenance bytes from `BuildDetails` are base64-decoded into a binary representation in signed.bin. OpenSSL can then verify the signature: `openssl sha256 -verify public.pem -signature signature.bin signed.bin`
	PublicKey pulumi.StringPtrInput `pulumi:"publicKey"`
	// Signature of the related `BuildProvenance`, encoded in a base64 string.
	Signature pulumi.StringPtrInput `pulumi:"signature"`
}

func (BuildSignatureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildSignature)(nil)).Elem()
}

func (i BuildSignatureArgs) ToBuildSignatureOutput() BuildSignatureOutput {
	return i.ToBuildSignatureOutputWithContext(context.Background())
}

func (i BuildSignatureArgs) ToBuildSignatureOutputWithContext(ctx context.Context) BuildSignatureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildSignatureOutput)
}

func (i BuildSignatureArgs) ToBuildSignaturePtrOutput() BuildSignaturePtrOutput {
	return i.ToBuildSignaturePtrOutputWithContext(context.Background())
}

func (i BuildSignatureArgs) ToBuildSignaturePtrOutputWithContext(ctx context.Context) BuildSignaturePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildSignatureOutput).ToBuildSignaturePtrOutputWithContext(ctx)
}

// BuildSignaturePtrInput is an input type that accepts BuildSignatureArgs, BuildSignaturePtr and BuildSignaturePtrOutput values.
// You can construct a concrete instance of `BuildSignaturePtrInput` via:
//
//          BuildSignatureArgs{...}
//
//  or:
//
//          nil
type BuildSignaturePtrInput interface {
	pulumi.Input

	ToBuildSignaturePtrOutput() BuildSignaturePtrOutput
	ToBuildSignaturePtrOutputWithContext(context.Context) BuildSignaturePtrOutput
}

type buildSignaturePtrType BuildSignatureArgs

func BuildSignaturePtr(v *BuildSignatureArgs) BuildSignaturePtrInput {
	return (*buildSignaturePtrType)(v)
}

func (*buildSignaturePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildSignature)(nil)).Elem()
}

func (i *buildSignaturePtrType) ToBuildSignaturePtrOutput() BuildSignaturePtrOutput {
	return i.ToBuildSignaturePtrOutputWithContext(context.Background())
}

func (i *buildSignaturePtrType) ToBuildSignaturePtrOutputWithContext(ctx context.Context) BuildSignaturePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildSignaturePtrOutput)
}

// Message encapsulating the signature of the verified build.
type BuildSignatureOutput struct{ *pulumi.OutputState }

func (BuildSignatureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildSignature)(nil)).Elem()
}

func (o BuildSignatureOutput) ToBuildSignatureOutput() BuildSignatureOutput {
	return o
}

func (o BuildSignatureOutput) ToBuildSignatureOutputWithContext(ctx context.Context) BuildSignatureOutput {
	return o
}

func (o BuildSignatureOutput) ToBuildSignaturePtrOutput() BuildSignaturePtrOutput {
	return o.ToBuildSignaturePtrOutputWithContext(context.Background())
}

func (o BuildSignatureOutput) ToBuildSignaturePtrOutputWithContext(ctx context.Context) BuildSignaturePtrOutput {
	return o.ApplyT(func(v BuildSignature) *BuildSignature {
		return &v
	}).(BuildSignaturePtrOutput)
}

// An Id for the key used to sign. This could be either an Id for the key stored in `public_key` (such as the Id or fingerprint for a PGP key, or the CN for a cert), or a reference to an external key (such as a reference to a key in Cloud Key Management Service).
func (o BuildSignatureOutput) KeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildSignature) *string { return v.KeyId }).(pulumi.StringPtrOutput)
}

// The type of the key, either stored in `public_key` or referenced in `key_id`
func (o BuildSignatureOutput) KeyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildSignature) *string { return v.KeyType }).(pulumi.StringPtrOutput)
}

// Public key of the builder which can be used to verify that the related findings are valid and unchanged. If `key_type` is empty, this defaults to PEM encoded public keys. This field may be empty if `key_id` references an external key. For Cloud Build based signatures, this is a PEM encoded public key. To verify the Cloud Build signature, place the contents of this field into a file (public.pem). The signature field is base64-decoded into its binary representation in signature.bin, and the provenance bytes from `BuildDetails` are base64-decoded into a binary representation in signed.bin. OpenSSL can then verify the signature: `openssl sha256 -verify public.pem -signature signature.bin signed.bin`
func (o BuildSignatureOutput) PublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildSignature) *string { return v.PublicKey }).(pulumi.StringPtrOutput)
}

// Signature of the related `BuildProvenance`, encoded in a base64 string.
func (o BuildSignatureOutput) Signature() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildSignature) *string { return v.Signature }).(pulumi.StringPtrOutput)
}

type BuildSignaturePtrOutput struct{ *pulumi.OutputState }

func (BuildSignaturePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildSignature)(nil)).Elem()
}

func (o BuildSignaturePtrOutput) ToBuildSignaturePtrOutput() BuildSignaturePtrOutput {
	return o
}

func (o BuildSignaturePtrOutput) ToBuildSignaturePtrOutputWithContext(ctx context.Context) BuildSignaturePtrOutput {
	return o
}

func (o BuildSignaturePtrOutput) Elem() BuildSignatureOutput {
	return o.ApplyT(func(v *BuildSignature) BuildSignature { return *v }).(BuildSignatureOutput)
}

// An Id for the key used to sign. This could be either an Id for the key stored in `public_key` (such as the Id or fingerprint for a PGP key, or the CN for a cert), or a reference to an external key (such as a reference to a key in Cloud Key Management Service).
func (o BuildSignaturePtrOutput) KeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildSignature) *string {
		if v == nil {
			return nil
		}
		return v.KeyId
	}).(pulumi.StringPtrOutput)
}

// The type of the key, either stored in `public_key` or referenced in `key_id`
func (o BuildSignaturePtrOutput) KeyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildSignature) *string {
		if v == nil {
			return nil
		}
		return v.KeyType
	}).(pulumi.StringPtrOutput)
}

// Public key of the builder which can be used to verify that the related findings are valid and unchanged. If `key_type` is empty, this defaults to PEM encoded public keys. This field may be empty if `key_id` references an external key. For Cloud Build based signatures, this is a PEM encoded public key. To verify the Cloud Build signature, place the contents of this field into a file (public.pem). The signature field is base64-decoded into its binary representation in signature.bin, and the provenance bytes from `BuildDetails` are base64-decoded into a binary representation in signed.bin. OpenSSL can then verify the signature: `openssl sha256 -verify public.pem -signature signature.bin signed.bin`
func (o BuildSignaturePtrOutput) PublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildSignature) *string {
		if v == nil {
			return nil
		}
		return v.PublicKey
	}).(pulumi.StringPtrOutput)
}

// Signature of the related `BuildProvenance`, encoded in a base64 string.
func (o BuildSignaturePtrOutput) Signature() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildSignature) *string {
		if v == nil {
			return nil
		}
		return v.Signature
	}).(pulumi.StringPtrOutput)
}

// Note holding the version of the provider's builder and the signature of the provenance message in linked BuildDetails.
type BuildType struct {
	// Version of the builder which produced this Note.
	BuilderVersion *string `pulumi:"builderVersion"`
	// Signature of the build in Occurrences pointing to the Note containing this `BuilderDetails`.
	Signature *BuildSignature `pulumi:"signature"`
}

// BuildTypeInput is an input type that accepts BuildTypeArgs and BuildTypeOutput values.
// You can construct a concrete instance of `BuildTypeInput` via:
//
//          BuildTypeArgs{...}
type BuildTypeInput interface {
	pulumi.Input

	ToBuildTypeOutput() BuildTypeOutput
	ToBuildTypeOutputWithContext(context.Context) BuildTypeOutput
}

// Note holding the version of the provider's builder and the signature of the provenance message in linked BuildDetails.
type BuildTypeArgs struct {
	// Version of the builder which produced this Note.
	BuilderVersion pulumi.StringPtrInput `pulumi:"builderVersion"`
	// Signature of the build in Occurrences pointing to the Note containing this `BuilderDetails`.
	Signature BuildSignaturePtrInput `pulumi:"signature"`
}

func (BuildTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildType)(nil)).Elem()
}

func (i BuildTypeArgs) ToBuildTypeOutput() BuildTypeOutput {
	return i.ToBuildTypeOutputWithContext(context.Background())
}

func (i BuildTypeArgs) ToBuildTypeOutputWithContext(ctx context.Context) BuildTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildTypeOutput)
}

func (i BuildTypeArgs) ToBuildTypePtrOutput() BuildTypePtrOutput {
	return i.ToBuildTypePtrOutputWithContext(context.Background())
}

func (i BuildTypeArgs) ToBuildTypePtrOutputWithContext(ctx context.Context) BuildTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildTypeOutput).ToBuildTypePtrOutputWithContext(ctx)
}

// BuildTypePtrInput is an input type that accepts BuildTypeArgs, BuildTypePtr and BuildTypePtrOutput values.
// You can construct a concrete instance of `BuildTypePtrInput` via:
//
//          BuildTypeArgs{...}
//
//  or:
//
//          nil
type BuildTypePtrInput interface {
	pulumi.Input

	ToBuildTypePtrOutput() BuildTypePtrOutput
	ToBuildTypePtrOutputWithContext(context.Context) BuildTypePtrOutput
}

type buildTypePtrType BuildTypeArgs

func BuildTypePtr(v *BuildTypeArgs) BuildTypePtrInput {
	return (*buildTypePtrType)(v)
}

func (*buildTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildType)(nil)).Elem()
}

func (i *buildTypePtrType) ToBuildTypePtrOutput() BuildTypePtrOutput {
	return i.ToBuildTypePtrOutputWithContext(context.Background())
}

func (i *buildTypePtrType) ToBuildTypePtrOutputWithContext(ctx context.Context) BuildTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildTypePtrOutput)
}

// Note holding the version of the provider's builder and the signature of the provenance message in linked BuildDetails.
type BuildTypeOutput struct{ *pulumi.OutputState }

func (BuildTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildType)(nil)).Elem()
}

func (o BuildTypeOutput) ToBuildTypeOutput() BuildTypeOutput {
	return o
}

func (o BuildTypeOutput) ToBuildTypeOutputWithContext(ctx context.Context) BuildTypeOutput {
	return o
}

func (o BuildTypeOutput) ToBuildTypePtrOutput() BuildTypePtrOutput {
	return o.ToBuildTypePtrOutputWithContext(context.Background())
}

func (o BuildTypeOutput) ToBuildTypePtrOutputWithContext(ctx context.Context) BuildTypePtrOutput {
	return o.ApplyT(func(v BuildType) *BuildType {
		return &v
	}).(BuildTypePtrOutput)
}

// Version of the builder which produced this Note.
func (o BuildTypeOutput) BuilderVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildType) *string { return v.BuilderVersion }).(pulumi.StringPtrOutput)
}

// Signature of the build in Occurrences pointing to the Note containing this `BuilderDetails`.
func (o BuildTypeOutput) Signature() BuildSignaturePtrOutput {
	return o.ApplyT(func(v BuildType) *BuildSignature { return v.Signature }).(BuildSignaturePtrOutput)
}

type BuildTypePtrOutput struct{ *pulumi.OutputState }

func (BuildTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildType)(nil)).Elem()
}

func (o BuildTypePtrOutput) ToBuildTypePtrOutput() BuildTypePtrOutput {
	return o
}

func (o BuildTypePtrOutput) ToBuildTypePtrOutputWithContext(ctx context.Context) BuildTypePtrOutput {
	return o
}

func (o BuildTypePtrOutput) Elem() BuildTypeOutput {
	return o.ApplyT(func(v *BuildType) BuildType { return *v }).(BuildTypeOutput)
}

// Version of the builder which produced this Note.
func (o BuildTypePtrOutput) BuilderVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildType) *string {
		if v == nil {
			return nil
		}
		return v.BuilderVersion
	}).(pulumi.StringPtrOutput)
}

// Signature of the build in Occurrences pointing to the Note containing this `BuilderDetails`.
func (o BuildTypePtrOutput) Signature() BuildSignaturePtrOutput {
	return o.ApplyT(func(v *BuildType) *BuildSignature {
		if v == nil {
			return nil
		}
		return v.Signature
	}).(BuildSignaturePtrOutput)
}

// Command describes a step performed as part of the build pipeline.
type Command struct {
	// Command-line arguments used when executing this Command.
	Args []string `pulumi:"args"`
	// Working directory (relative to project source root) used when running this Command.
	Dir *string `pulumi:"dir"`
	// Environment variables set before running this Command.
	Env []string `pulumi:"env"`
	// Optional unique identifier for this Command, used in wait_for to reference this Command as a dependency.
	Id *string `pulumi:"id"`
	// Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`.
	Name *string `pulumi:"name"`
	// The ID(s) of the Command(s) that this Command depends on.
	WaitFor []string `pulumi:"waitFor"`
}

// CommandInput is an input type that accepts CommandArgs and CommandOutput values.
// You can construct a concrete instance of `CommandInput` via:
//
//          CommandArgs{...}
type CommandInput interface {
	pulumi.Input

	ToCommandOutput() CommandOutput
	ToCommandOutputWithContext(context.Context) CommandOutput
}

// Command describes a step performed as part of the build pipeline.
type CommandArgs struct {
	// Command-line arguments used when executing this Command.
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Working directory (relative to project source root) used when running this Command.
	Dir pulumi.StringPtrInput `pulumi:"dir"`
	// Environment variables set before running this Command.
	Env pulumi.StringArrayInput `pulumi:"env"`
	// Optional unique identifier for this Command, used in wait_for to reference this Command as a dependency.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The ID(s) of the Command(s) that this Command depends on.
	WaitFor pulumi.StringArrayInput `pulumi:"waitFor"`
}

func (CommandArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Command)(nil)).Elem()
}

func (i CommandArgs) ToCommandOutput() CommandOutput {
	return i.ToCommandOutputWithContext(context.Background())
}

func (i CommandArgs) ToCommandOutputWithContext(ctx context.Context) CommandOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandOutput)
}

// CommandArrayInput is an input type that accepts CommandArray and CommandArrayOutput values.
// You can construct a concrete instance of `CommandArrayInput` via:
//
//          CommandArray{ CommandArgs{...} }
type CommandArrayInput interface {
	pulumi.Input

	ToCommandArrayOutput() CommandArrayOutput
	ToCommandArrayOutputWithContext(context.Context) CommandArrayOutput
}

type CommandArray []CommandInput

func (CommandArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Command)(nil)).Elem()
}

func (i CommandArray) ToCommandArrayOutput() CommandArrayOutput {
	return i.ToCommandArrayOutputWithContext(context.Background())
}

func (i CommandArray) ToCommandArrayOutputWithContext(ctx context.Context) CommandArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandArrayOutput)
}

// Command describes a step performed as part of the build pipeline.
type CommandOutput struct{ *pulumi.OutputState }

func (CommandOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Command)(nil)).Elem()
}

func (o CommandOutput) ToCommandOutput() CommandOutput {
	return o
}

func (o CommandOutput) ToCommandOutputWithContext(ctx context.Context) CommandOutput {
	return o
}

// Command-line arguments used when executing this Command.
func (o CommandOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Command) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Working directory (relative to project source root) used when running this Command.
func (o CommandOutput) Dir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Command) *string { return v.Dir }).(pulumi.StringPtrOutput)
}

// Environment variables set before running this Command.
func (o CommandOutput) Env() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Command) []string { return v.Env }).(pulumi.StringArrayOutput)
}

// Optional unique identifier for this Command, used in wait_for to reference this Command as a dependency.
func (o CommandOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Command) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`.
func (o CommandOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Command) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The ID(s) of the Command(s) that this Command depends on.
func (o CommandOutput) WaitFor() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Command) []string { return v.WaitFor }).(pulumi.StringArrayOutput)
}

type CommandArrayOutput struct{ *pulumi.OutputState }

func (CommandArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Command)(nil)).Elem()
}

func (o CommandArrayOutput) ToCommandArrayOutput() CommandArrayOutput {
	return o
}

func (o CommandArrayOutput) ToCommandArrayOutputWithContext(ctx context.Context) CommandArrayOutput {
	return o
}

func (o CommandArrayOutput) Index(i pulumi.IntInput) CommandOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Command {
		return vs[0].([]Command)[vs[1].(int)]
	}).(CommandOutput)
}

// An artifact that can be deployed in some runtime.
type Deployable struct {
	// Resource URI for the artifact being deployed.
	ResourceUri []string `pulumi:"resourceUri"`
}

// DeployableInput is an input type that accepts DeployableArgs and DeployableOutput values.
// You can construct a concrete instance of `DeployableInput` via:
//
//          DeployableArgs{...}
type DeployableInput interface {
	pulumi.Input

	ToDeployableOutput() DeployableOutput
	ToDeployableOutputWithContext(context.Context) DeployableOutput
}

// An artifact that can be deployed in some runtime.
type DeployableArgs struct {
	// Resource URI for the artifact being deployed.
	ResourceUri pulumi.StringArrayInput `pulumi:"resourceUri"`
}

func (DeployableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Deployable)(nil)).Elem()
}

func (i DeployableArgs) ToDeployableOutput() DeployableOutput {
	return i.ToDeployableOutputWithContext(context.Background())
}

func (i DeployableArgs) ToDeployableOutputWithContext(ctx context.Context) DeployableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeployableOutput)
}

func (i DeployableArgs) ToDeployablePtrOutput() DeployablePtrOutput {
	return i.ToDeployablePtrOutputWithContext(context.Background())
}

func (i DeployableArgs) ToDeployablePtrOutputWithContext(ctx context.Context) DeployablePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeployableOutput).ToDeployablePtrOutputWithContext(ctx)
}

// DeployablePtrInput is an input type that accepts DeployableArgs, DeployablePtr and DeployablePtrOutput values.
// You can construct a concrete instance of `DeployablePtrInput` via:
//
//          DeployableArgs{...}
//
//  or:
//
//          nil
type DeployablePtrInput interface {
	pulumi.Input

	ToDeployablePtrOutput() DeployablePtrOutput
	ToDeployablePtrOutputWithContext(context.Context) DeployablePtrOutput
}

type deployablePtrType DeployableArgs

func DeployablePtr(v *DeployableArgs) DeployablePtrInput {
	return (*deployablePtrType)(v)
}

func (*deployablePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Deployable)(nil)).Elem()
}

func (i *deployablePtrType) ToDeployablePtrOutput() DeployablePtrOutput {
	return i.ToDeployablePtrOutputWithContext(context.Background())
}

func (i *deployablePtrType) ToDeployablePtrOutputWithContext(ctx context.Context) DeployablePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeployablePtrOutput)
}

// An artifact that can be deployed in some runtime.
type DeployableOutput struct{ *pulumi.OutputState }

func (DeployableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Deployable)(nil)).Elem()
}

func (o DeployableOutput) ToDeployableOutput() DeployableOutput {
	return o
}

func (o DeployableOutput) ToDeployableOutputWithContext(ctx context.Context) DeployableOutput {
	return o
}

func (o DeployableOutput) ToDeployablePtrOutput() DeployablePtrOutput {
	return o.ToDeployablePtrOutputWithContext(context.Background())
}

func (o DeployableOutput) ToDeployablePtrOutputWithContext(ctx context.Context) DeployablePtrOutput {
	return o.ApplyT(func(v Deployable) *Deployable {
		return &v
	}).(DeployablePtrOutput)
}

// Resource URI for the artifact being deployed.
func (o DeployableOutput) ResourceUri() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Deployable) []string { return v.ResourceUri }).(pulumi.StringArrayOutput)
}

type DeployablePtrOutput struct{ *pulumi.OutputState }

func (DeployablePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Deployable)(nil)).Elem()
}

func (o DeployablePtrOutput) ToDeployablePtrOutput() DeployablePtrOutput {
	return o
}

func (o DeployablePtrOutput) ToDeployablePtrOutputWithContext(ctx context.Context) DeployablePtrOutput {
	return o
}

func (o DeployablePtrOutput) Elem() DeployableOutput {
	return o.ApplyT(func(v *Deployable) Deployable { return *v }).(DeployableOutput)
}

// Resource URI for the artifact being deployed.
func (o DeployablePtrOutput) ResourceUri() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Deployable) []string {
		if v == nil {
			return nil
		}
		return v.ResourceUri
	}).(pulumi.StringArrayOutput)
}

// The period during which some deployable was active in a runtime.
type Deployment struct {
	// Address of the runtime element hosting this deployment.
	Address *string `pulumi:"address"`
	// Configuration used to create this deployment.
	Config *string `pulumi:"config"`
	// Beginning of the lifetime of this deployment.
	DeployTime *string `pulumi:"deployTime"`
	// Platform hosting this deployment.
	Platform *string `pulumi:"platform"`
	// Output only. Resource URI for the artifact being deployed taken from the deployable field with the same name.
	ResourceUri []string `pulumi:"resourceUri"`
	// End of the lifetime of this deployment.
	UndeployTime *string `pulumi:"undeployTime"`
	// Identity of the user that triggered this deployment.
	UserEmail *string `pulumi:"userEmail"`
}

// DeploymentInput is an input type that accepts DeploymentArgs and DeploymentOutput values.
// You can construct a concrete instance of `DeploymentInput` via:
//
//          DeploymentArgs{...}
type DeploymentInput interface {
	pulumi.Input

	ToDeploymentOutput() DeploymentOutput
	ToDeploymentOutputWithContext(context.Context) DeploymentOutput
}

// The period during which some deployable was active in a runtime.
type DeploymentArgs struct {
	// Address of the runtime element hosting this deployment.
	Address pulumi.StringPtrInput `pulumi:"address"`
	// Configuration used to create this deployment.
	Config pulumi.StringPtrInput `pulumi:"config"`
	// Beginning of the lifetime of this deployment.
	DeployTime pulumi.StringPtrInput `pulumi:"deployTime"`
	// Platform hosting this deployment.
	Platform pulumi.StringPtrInput `pulumi:"platform"`
	// Output only. Resource URI for the artifact being deployed taken from the deployable field with the same name.
	ResourceUri pulumi.StringArrayInput `pulumi:"resourceUri"`
	// End of the lifetime of this deployment.
	UndeployTime pulumi.StringPtrInput `pulumi:"undeployTime"`
	// Identity of the user that triggered this deployment.
	UserEmail pulumi.StringPtrInput `pulumi:"userEmail"`
}

func (DeploymentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Deployment)(nil)).Elem()
}

func (i DeploymentArgs) ToDeploymentOutput() DeploymentOutput {
	return i.ToDeploymentOutputWithContext(context.Background())
}

func (i DeploymentArgs) ToDeploymentOutputWithContext(ctx context.Context) DeploymentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentOutput)
}

func (i DeploymentArgs) ToDeploymentPtrOutput() DeploymentPtrOutput {
	return i.ToDeploymentPtrOutputWithContext(context.Background())
}

func (i DeploymentArgs) ToDeploymentPtrOutputWithContext(ctx context.Context) DeploymentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentOutput).ToDeploymentPtrOutputWithContext(ctx)
}

// DeploymentPtrInput is an input type that accepts DeploymentArgs, DeploymentPtr and DeploymentPtrOutput values.
// You can construct a concrete instance of `DeploymentPtrInput` via:
//
//          DeploymentArgs{...}
//
//  or:
//
//          nil
type DeploymentPtrInput interface {
	pulumi.Input

	ToDeploymentPtrOutput() DeploymentPtrOutput
	ToDeploymentPtrOutputWithContext(context.Context) DeploymentPtrOutput
}

type deploymentPtrType DeploymentArgs

func DeploymentPtr(v *DeploymentArgs) DeploymentPtrInput {
	return (*deploymentPtrType)(v)
}

func (*deploymentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Deployment)(nil)).Elem()
}

func (i *deploymentPtrType) ToDeploymentPtrOutput() DeploymentPtrOutput {
	return i.ToDeploymentPtrOutputWithContext(context.Background())
}

func (i *deploymentPtrType) ToDeploymentPtrOutputWithContext(ctx context.Context) DeploymentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentPtrOutput)
}

// The period during which some deployable was active in a runtime.
type DeploymentOutput struct{ *pulumi.OutputState }

func (DeploymentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Deployment)(nil)).Elem()
}

func (o DeploymentOutput) ToDeploymentOutput() DeploymentOutput {
	return o
}

func (o DeploymentOutput) ToDeploymentOutputWithContext(ctx context.Context) DeploymentOutput {
	return o
}

func (o DeploymentOutput) ToDeploymentPtrOutput() DeploymentPtrOutput {
	return o.ToDeploymentPtrOutputWithContext(context.Background())
}

func (o DeploymentOutput) ToDeploymentPtrOutputWithContext(ctx context.Context) DeploymentPtrOutput {
	return o.ApplyT(func(v Deployment) *Deployment {
		return &v
	}).(DeploymentPtrOutput)
}

// Address of the runtime element hosting this deployment.
func (o DeploymentOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Deployment) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// Configuration used to create this deployment.
func (o DeploymentOutput) Config() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Deployment) *string { return v.Config }).(pulumi.StringPtrOutput)
}

// Beginning of the lifetime of this deployment.
func (o DeploymentOutput) DeployTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Deployment) *string { return v.DeployTime }).(pulumi.StringPtrOutput)
}

// Platform hosting this deployment.
func (o DeploymentOutput) Platform() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Deployment) *string { return v.Platform }).(pulumi.StringPtrOutput)
}

// Output only. Resource URI for the artifact being deployed taken from the deployable field with the same name.
func (o DeploymentOutput) ResourceUri() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Deployment) []string { return v.ResourceUri }).(pulumi.StringArrayOutput)
}

// End of the lifetime of this deployment.
func (o DeploymentOutput) UndeployTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Deployment) *string { return v.UndeployTime }).(pulumi.StringPtrOutput)
}

// Identity of the user that triggered this deployment.
func (o DeploymentOutput) UserEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Deployment) *string { return v.UserEmail }).(pulumi.StringPtrOutput)
}

type DeploymentPtrOutput struct{ *pulumi.OutputState }

func (DeploymentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Deployment)(nil)).Elem()
}

func (o DeploymentPtrOutput) ToDeploymentPtrOutput() DeploymentPtrOutput {
	return o
}

func (o DeploymentPtrOutput) ToDeploymentPtrOutputWithContext(ctx context.Context) DeploymentPtrOutput {
	return o
}

func (o DeploymentPtrOutput) Elem() DeploymentOutput {
	return o.ApplyT(func(v *Deployment) Deployment { return *v }).(DeploymentOutput)
}

// Address of the runtime element hosting this deployment.
func (o DeploymentPtrOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Deployment) *string {
		if v == nil {
			return nil
		}
		return v.Address
	}).(pulumi.StringPtrOutput)
}

// Configuration used to create this deployment.
func (o DeploymentPtrOutput) Config() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Deployment) *string {
		if v == nil {
			return nil
		}
		return v.Config
	}).(pulumi.StringPtrOutput)
}

// Beginning of the lifetime of this deployment.
func (o DeploymentPtrOutput) DeployTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Deployment) *string {
		if v == nil {
			return nil
		}
		return v.DeployTime
	}).(pulumi.StringPtrOutput)
}

// Platform hosting this deployment.
func (o DeploymentPtrOutput) Platform() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Deployment) *string {
		if v == nil {
			return nil
		}
		return v.Platform
	}).(pulumi.StringPtrOutput)
}

// Output only. Resource URI for the artifact being deployed taken from the deployable field with the same name.
func (o DeploymentPtrOutput) ResourceUri() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Deployment) []string {
		if v == nil {
			return nil
		}
		return v.ResourceUri
	}).(pulumi.StringArrayOutput)
}

// End of the lifetime of this deployment.
func (o DeploymentPtrOutput) UndeployTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Deployment) *string {
		if v == nil {
			return nil
		}
		return v.UndeployTime
	}).(pulumi.StringPtrOutput)
}

// Identity of the user that triggered this deployment.
func (o DeploymentPtrOutput) UserEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Deployment) *string {
		if v == nil {
			return nil
		}
		return v.UserEmail
	}).(pulumi.StringPtrOutput)
}

// Derived describes the derived image portion (Occurrence) of the DockerImage relationship. This image would be produced from a Dockerfile with FROM .
type Derived struct {
	// Output only. This contains the base image URL for the derived image occurrence.
	BaseResourceUrl *string `pulumi:"baseResourceUrl"`
	// Output only. The number of layers by which this image differs from the associated image basis.
	Distance *int `pulumi:"distance"`
	// The fingerprint of the derived image.
	Fingerprint *Fingerprint `pulumi:"fingerprint"`
	// This contains layer-specific metadata, if populated it has length "distance" and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer.
	LayerInfo []Layer `pulumi:"layerInfo"`
}

// DerivedInput is an input type that accepts DerivedArgs and DerivedOutput values.
// You can construct a concrete instance of `DerivedInput` via:
//
//          DerivedArgs{...}
type DerivedInput interface {
	pulumi.Input

	ToDerivedOutput() DerivedOutput
	ToDerivedOutputWithContext(context.Context) DerivedOutput
}

// Derived describes the derived image portion (Occurrence) of the DockerImage relationship. This image would be produced from a Dockerfile with FROM .
type DerivedArgs struct {
	// Output only. This contains the base image URL for the derived image occurrence.
	BaseResourceUrl pulumi.StringPtrInput `pulumi:"baseResourceUrl"`
	// Output only. The number of layers by which this image differs from the associated image basis.
	Distance pulumi.IntPtrInput `pulumi:"distance"`
	// The fingerprint of the derived image.
	Fingerprint FingerprintPtrInput `pulumi:"fingerprint"`
	// This contains layer-specific metadata, if populated it has length "distance" and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer.
	LayerInfo LayerArrayInput `pulumi:"layerInfo"`
}

func (DerivedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Derived)(nil)).Elem()
}

func (i DerivedArgs) ToDerivedOutput() DerivedOutput {
	return i.ToDerivedOutputWithContext(context.Background())
}

func (i DerivedArgs) ToDerivedOutputWithContext(ctx context.Context) DerivedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DerivedOutput)
}

func (i DerivedArgs) ToDerivedPtrOutput() DerivedPtrOutput {
	return i.ToDerivedPtrOutputWithContext(context.Background())
}

func (i DerivedArgs) ToDerivedPtrOutputWithContext(ctx context.Context) DerivedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DerivedOutput).ToDerivedPtrOutputWithContext(ctx)
}

// DerivedPtrInput is an input type that accepts DerivedArgs, DerivedPtr and DerivedPtrOutput values.
// You can construct a concrete instance of `DerivedPtrInput` via:
//
//          DerivedArgs{...}
//
//  or:
//
//          nil
type DerivedPtrInput interface {
	pulumi.Input

	ToDerivedPtrOutput() DerivedPtrOutput
	ToDerivedPtrOutputWithContext(context.Context) DerivedPtrOutput
}

type derivedPtrType DerivedArgs

func DerivedPtr(v *DerivedArgs) DerivedPtrInput {
	return (*derivedPtrType)(v)
}

func (*derivedPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Derived)(nil)).Elem()
}

func (i *derivedPtrType) ToDerivedPtrOutput() DerivedPtrOutput {
	return i.ToDerivedPtrOutputWithContext(context.Background())
}

func (i *derivedPtrType) ToDerivedPtrOutputWithContext(ctx context.Context) DerivedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DerivedPtrOutput)
}

// Derived describes the derived image portion (Occurrence) of the DockerImage relationship. This image would be produced from a Dockerfile with FROM .
type DerivedOutput struct{ *pulumi.OutputState }

func (DerivedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Derived)(nil)).Elem()
}

func (o DerivedOutput) ToDerivedOutput() DerivedOutput {
	return o
}

func (o DerivedOutput) ToDerivedOutputWithContext(ctx context.Context) DerivedOutput {
	return o
}

func (o DerivedOutput) ToDerivedPtrOutput() DerivedPtrOutput {
	return o.ToDerivedPtrOutputWithContext(context.Background())
}

func (o DerivedOutput) ToDerivedPtrOutputWithContext(ctx context.Context) DerivedPtrOutput {
	return o.ApplyT(func(v Derived) *Derived {
		return &v
	}).(DerivedPtrOutput)
}

// Output only. This contains the base image URL for the derived image occurrence.
func (o DerivedOutput) BaseResourceUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Derived) *string { return v.BaseResourceUrl }).(pulumi.StringPtrOutput)
}

// Output only. The number of layers by which this image differs from the associated image basis.
func (o DerivedOutput) Distance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Derived) *int { return v.Distance }).(pulumi.IntPtrOutput)
}

// The fingerprint of the derived image.
func (o DerivedOutput) Fingerprint() FingerprintPtrOutput {
	return o.ApplyT(func(v Derived) *Fingerprint { return v.Fingerprint }).(FingerprintPtrOutput)
}

// This contains layer-specific metadata, if populated it has length "distance" and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer.
func (o DerivedOutput) LayerInfo() LayerArrayOutput {
	return o.ApplyT(func(v Derived) []Layer { return v.LayerInfo }).(LayerArrayOutput)
}

type DerivedPtrOutput struct{ *pulumi.OutputState }

func (DerivedPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Derived)(nil)).Elem()
}

func (o DerivedPtrOutput) ToDerivedPtrOutput() DerivedPtrOutput {
	return o
}

func (o DerivedPtrOutput) ToDerivedPtrOutputWithContext(ctx context.Context) DerivedPtrOutput {
	return o
}

func (o DerivedPtrOutput) Elem() DerivedOutput {
	return o.ApplyT(func(v *Derived) Derived { return *v }).(DerivedOutput)
}

// Output only. This contains the base image URL for the derived image occurrence.
func (o DerivedPtrOutput) BaseResourceUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Derived) *string {
		if v == nil {
			return nil
		}
		return v.BaseResourceUrl
	}).(pulumi.StringPtrOutput)
}

// Output only. The number of layers by which this image differs from the associated image basis.
func (o DerivedPtrOutput) Distance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Derived) *int {
		if v == nil {
			return nil
		}
		return v.Distance
	}).(pulumi.IntPtrOutput)
}

// The fingerprint of the derived image.
func (o DerivedPtrOutput) Fingerprint() FingerprintPtrOutput {
	return o.ApplyT(func(v *Derived) *Fingerprint {
		if v == nil {
			return nil
		}
		return v.Fingerprint
	}).(FingerprintPtrOutput)
}

// This contains layer-specific metadata, if populated it has length "distance" and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer.
func (o DerivedPtrOutput) LayerInfo() LayerArrayOutput {
	return o.ApplyT(func(v *Derived) []Layer {
		if v == nil {
			return nil
		}
		return v.LayerInfo
	}).(LayerArrayOutput)
}

// Identifies all occurrences of this vulnerability in the package for a specific distro/location For example: glibc in cpe:/o:debian:debian_linux:8 for versions 2.1 - 2.2
type Detail struct {
	// The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/) in which the vulnerability manifests. Examples include distro or storage location for vulnerable jar. This field can be used as a filter in list requests.
	CpeUri *string `pulumi:"cpeUri"`
	// A vendor-specific description of this note.
	Description *string `pulumi:"description"`
	// The fix for this specific package version.
	FixedLocation *VulnerabilityLocation `pulumi:"fixedLocation"`
	// Whether this Detail is obsolete. Occurrences are expected not to point to obsolete details.
	IsObsolete *bool `pulumi:"isObsolete"`
	// The max version of the package in which the vulnerability exists.
	MaxAffectedVersion *Version `pulumi:"maxAffectedVersion"`
	// The min version of the package in which the vulnerability exists.
	MinAffectedVersion *Version `pulumi:"minAffectedVersion"`
	// The name of the package where the vulnerability was found. This field can be used as a filter in list requests.
	Package *string `pulumi:"package"`
	// The type of package; whether native or non native(ruby gems, node.js packages etc)
	PackageType *string `pulumi:"packageType"`
	// The severity (eg: distro assigned severity) for this vulnerability.
	SeverityName *string `pulumi:"severityName"`
	// The source from which the information in this Detail was obtained.
	Source *string `pulumi:"source"`
}

// DetailInput is an input type that accepts DetailArgs and DetailOutput values.
// You can construct a concrete instance of `DetailInput` via:
//
//          DetailArgs{...}
type DetailInput interface {
	pulumi.Input

	ToDetailOutput() DetailOutput
	ToDetailOutputWithContext(context.Context) DetailOutput
}

// Identifies all occurrences of this vulnerability in the package for a specific distro/location For example: glibc in cpe:/o:debian:debian_linux:8 for versions 2.1 - 2.2
type DetailArgs struct {
	// The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/) in which the vulnerability manifests. Examples include distro or storage location for vulnerable jar. This field can be used as a filter in list requests.
	CpeUri pulumi.StringPtrInput `pulumi:"cpeUri"`
	// A vendor-specific description of this note.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The fix for this specific package version.
	FixedLocation VulnerabilityLocationPtrInput `pulumi:"fixedLocation"`
	// Whether this Detail is obsolete. Occurrences are expected not to point to obsolete details.
	IsObsolete pulumi.BoolPtrInput `pulumi:"isObsolete"`
	// The max version of the package in which the vulnerability exists.
	MaxAffectedVersion VersionPtrInput `pulumi:"maxAffectedVersion"`
	// The min version of the package in which the vulnerability exists.
	MinAffectedVersion VersionPtrInput `pulumi:"minAffectedVersion"`
	// The name of the package where the vulnerability was found. This field can be used as a filter in list requests.
	Package pulumi.StringPtrInput `pulumi:"package"`
	// The type of package; whether native or non native(ruby gems, node.js packages etc)
	PackageType pulumi.StringPtrInput `pulumi:"packageType"`
	// The severity (eg: distro assigned severity) for this vulnerability.
	SeverityName pulumi.StringPtrInput `pulumi:"severityName"`
	// The source from which the information in this Detail was obtained.
	Source pulumi.StringPtrInput `pulumi:"source"`
}

func (DetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Detail)(nil)).Elem()
}

func (i DetailArgs) ToDetailOutput() DetailOutput {
	return i.ToDetailOutputWithContext(context.Background())
}

func (i DetailArgs) ToDetailOutputWithContext(ctx context.Context) DetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DetailOutput)
}

// DetailArrayInput is an input type that accepts DetailArray and DetailArrayOutput values.
// You can construct a concrete instance of `DetailArrayInput` via:
//
//          DetailArray{ DetailArgs{...} }
type DetailArrayInput interface {
	pulumi.Input

	ToDetailArrayOutput() DetailArrayOutput
	ToDetailArrayOutputWithContext(context.Context) DetailArrayOutput
}

type DetailArray []DetailInput

func (DetailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Detail)(nil)).Elem()
}

func (i DetailArray) ToDetailArrayOutput() DetailArrayOutput {
	return i.ToDetailArrayOutputWithContext(context.Background())
}

func (i DetailArray) ToDetailArrayOutputWithContext(ctx context.Context) DetailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DetailArrayOutput)
}

// Identifies all occurrences of this vulnerability in the package for a specific distro/location For example: glibc in cpe:/o:debian:debian_linux:8 for versions 2.1 - 2.2
type DetailOutput struct{ *pulumi.OutputState }

func (DetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Detail)(nil)).Elem()
}

func (o DetailOutput) ToDetailOutput() DetailOutput {
	return o
}

func (o DetailOutput) ToDetailOutputWithContext(ctx context.Context) DetailOutput {
	return o
}

// The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/) in which the vulnerability manifests. Examples include distro or storage location for vulnerable jar. This field can be used as a filter in list requests.
func (o DetailOutput) CpeUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Detail) *string { return v.CpeUri }).(pulumi.StringPtrOutput)
}

// A vendor-specific description of this note.
func (o DetailOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Detail) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The fix for this specific package version.
func (o DetailOutput) FixedLocation() VulnerabilityLocationPtrOutput {
	return o.ApplyT(func(v Detail) *VulnerabilityLocation { return v.FixedLocation }).(VulnerabilityLocationPtrOutput)
}

// Whether this Detail is obsolete. Occurrences are expected not to point to obsolete details.
func (o DetailOutput) IsObsolete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Detail) *bool { return v.IsObsolete }).(pulumi.BoolPtrOutput)
}

// The max version of the package in which the vulnerability exists.
func (o DetailOutput) MaxAffectedVersion() VersionPtrOutput {
	return o.ApplyT(func(v Detail) *Version { return v.MaxAffectedVersion }).(VersionPtrOutput)
}

// The min version of the package in which the vulnerability exists.
func (o DetailOutput) MinAffectedVersion() VersionPtrOutput {
	return o.ApplyT(func(v Detail) *Version { return v.MinAffectedVersion }).(VersionPtrOutput)
}

// The name of the package where the vulnerability was found. This field can be used as a filter in list requests.
func (o DetailOutput) Package() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Detail) *string { return v.Package }).(pulumi.StringPtrOutput)
}

// The type of package; whether native or non native(ruby gems, node.js packages etc)
func (o DetailOutput) PackageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Detail) *string { return v.PackageType }).(pulumi.StringPtrOutput)
}

// The severity (eg: distro assigned severity) for this vulnerability.
func (o DetailOutput) SeverityName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Detail) *string { return v.SeverityName }).(pulumi.StringPtrOutput)
}

// The source from which the information in this Detail was obtained.
func (o DetailOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Detail) *string { return v.Source }).(pulumi.StringPtrOutput)
}

type DetailArrayOutput struct{ *pulumi.OutputState }

func (DetailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Detail)(nil)).Elem()
}

func (o DetailArrayOutput) ToDetailArrayOutput() DetailArrayOutput {
	return o
}

func (o DetailArrayOutput) ToDetailArrayOutputWithContext(ctx context.Context) DetailArrayOutput {
	return o
}

func (o DetailArrayOutput) Index(i pulumi.IntInput) DetailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Detail {
		return vs[0].([]Detail)[vs[1].(int)]
	}).(DetailOutput)
}

// Provides information about the scan status of a discovered resource.
type Discovered struct {
	// The status of discovery for the resource.
	AnalysisStatus *string `pulumi:"analysisStatus"`
	// When an error is encountered this will contain a LocalizedMessage under details to show to the user. The LocalizedMessage output only and populated by the API.
	AnalysisStatusError *Status `pulumi:"analysisStatusError"`
	// Whether the resource is continuously analyzed.
	ContinuousAnalysis *string `pulumi:"continuousAnalysis"`
	// The CPE of the resource being scanned.
	Cpe *string `pulumi:"cpe"`
	// Output only. An operation that indicates the status of the current scan. This field is deprecated, do not use.
	Operation *OperationType `pulumi:"operation"`
}

// DiscoveredInput is an input type that accepts DiscoveredArgs and DiscoveredOutput values.
// You can construct a concrete instance of `DiscoveredInput` via:
//
//          DiscoveredArgs{...}
type DiscoveredInput interface {
	pulumi.Input

	ToDiscoveredOutput() DiscoveredOutput
	ToDiscoveredOutputWithContext(context.Context) DiscoveredOutput
}

// Provides information about the scan status of a discovered resource.
type DiscoveredArgs struct {
	// The status of discovery for the resource.
	AnalysisStatus pulumi.StringPtrInput `pulumi:"analysisStatus"`
	// When an error is encountered this will contain a LocalizedMessage under details to show to the user. The LocalizedMessage output only and populated by the API.
	AnalysisStatusError StatusPtrInput `pulumi:"analysisStatusError"`
	// Whether the resource is continuously analyzed.
	ContinuousAnalysis pulumi.StringPtrInput `pulumi:"continuousAnalysis"`
	// The CPE of the resource being scanned.
	Cpe pulumi.StringPtrInput `pulumi:"cpe"`
	// Output only. An operation that indicates the status of the current scan. This field is deprecated, do not use.
	Operation OperationTypePtrInput `pulumi:"operation"`
}

func (DiscoveredArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Discovered)(nil)).Elem()
}

func (i DiscoveredArgs) ToDiscoveredOutput() DiscoveredOutput {
	return i.ToDiscoveredOutputWithContext(context.Background())
}

func (i DiscoveredArgs) ToDiscoveredOutputWithContext(ctx context.Context) DiscoveredOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiscoveredOutput)
}

func (i DiscoveredArgs) ToDiscoveredPtrOutput() DiscoveredPtrOutput {
	return i.ToDiscoveredPtrOutputWithContext(context.Background())
}

func (i DiscoveredArgs) ToDiscoveredPtrOutputWithContext(ctx context.Context) DiscoveredPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiscoveredOutput).ToDiscoveredPtrOutputWithContext(ctx)
}

// DiscoveredPtrInput is an input type that accepts DiscoveredArgs, DiscoveredPtr and DiscoveredPtrOutput values.
// You can construct a concrete instance of `DiscoveredPtrInput` via:
//
//          DiscoveredArgs{...}
//
//  or:
//
//          nil
type DiscoveredPtrInput interface {
	pulumi.Input

	ToDiscoveredPtrOutput() DiscoveredPtrOutput
	ToDiscoveredPtrOutputWithContext(context.Context) DiscoveredPtrOutput
}

type discoveredPtrType DiscoveredArgs

func DiscoveredPtr(v *DiscoveredArgs) DiscoveredPtrInput {
	return (*discoveredPtrType)(v)
}

func (*discoveredPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Discovered)(nil)).Elem()
}

func (i *discoveredPtrType) ToDiscoveredPtrOutput() DiscoveredPtrOutput {
	return i.ToDiscoveredPtrOutputWithContext(context.Background())
}

func (i *discoveredPtrType) ToDiscoveredPtrOutputWithContext(ctx context.Context) DiscoveredPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiscoveredPtrOutput)
}

// Provides information about the scan status of a discovered resource.
type DiscoveredOutput struct{ *pulumi.OutputState }

func (DiscoveredOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Discovered)(nil)).Elem()
}

func (o DiscoveredOutput) ToDiscoveredOutput() DiscoveredOutput {
	return o
}

func (o DiscoveredOutput) ToDiscoveredOutputWithContext(ctx context.Context) DiscoveredOutput {
	return o
}

func (o DiscoveredOutput) ToDiscoveredPtrOutput() DiscoveredPtrOutput {
	return o.ToDiscoveredPtrOutputWithContext(context.Background())
}

func (o DiscoveredOutput) ToDiscoveredPtrOutputWithContext(ctx context.Context) DiscoveredPtrOutput {
	return o.ApplyT(func(v Discovered) *Discovered {
		return &v
	}).(DiscoveredPtrOutput)
}

// The status of discovery for the resource.
func (o DiscoveredOutput) AnalysisStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Discovered) *string { return v.AnalysisStatus }).(pulumi.StringPtrOutput)
}

// When an error is encountered this will contain a LocalizedMessage under details to show to the user. The LocalizedMessage output only and populated by the API.
func (o DiscoveredOutput) AnalysisStatusError() StatusPtrOutput {
	return o.ApplyT(func(v Discovered) *Status { return v.AnalysisStatusError }).(StatusPtrOutput)
}

// Whether the resource is continuously analyzed.
func (o DiscoveredOutput) ContinuousAnalysis() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Discovered) *string { return v.ContinuousAnalysis }).(pulumi.StringPtrOutput)
}

// The CPE of the resource being scanned.
func (o DiscoveredOutput) Cpe() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Discovered) *string { return v.Cpe }).(pulumi.StringPtrOutput)
}

// Output only. An operation that indicates the status of the current scan. This field is deprecated, do not use.
func (o DiscoveredOutput) Operation() OperationTypePtrOutput {
	return o.ApplyT(func(v Discovered) *OperationType { return v.Operation }).(OperationTypePtrOutput)
}

type DiscoveredPtrOutput struct{ *pulumi.OutputState }

func (DiscoveredPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Discovered)(nil)).Elem()
}

func (o DiscoveredPtrOutput) ToDiscoveredPtrOutput() DiscoveredPtrOutput {
	return o
}

func (o DiscoveredPtrOutput) ToDiscoveredPtrOutputWithContext(ctx context.Context) DiscoveredPtrOutput {
	return o
}

func (o DiscoveredPtrOutput) Elem() DiscoveredOutput {
	return o.ApplyT(func(v *Discovered) Discovered { return *v }).(DiscoveredOutput)
}

// The status of discovery for the resource.
func (o DiscoveredPtrOutput) AnalysisStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Discovered) *string {
		if v == nil {
			return nil
		}
		return v.AnalysisStatus
	}).(pulumi.StringPtrOutput)
}

// When an error is encountered this will contain a LocalizedMessage under details to show to the user. The LocalizedMessage output only and populated by the API.
func (o DiscoveredPtrOutput) AnalysisStatusError() StatusPtrOutput {
	return o.ApplyT(func(v *Discovered) *Status {
		if v == nil {
			return nil
		}
		return v.AnalysisStatusError
	}).(StatusPtrOutput)
}

// Whether the resource is continuously analyzed.
func (o DiscoveredPtrOutput) ContinuousAnalysis() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Discovered) *string {
		if v == nil {
			return nil
		}
		return v.ContinuousAnalysis
	}).(pulumi.StringPtrOutput)
}

// The CPE of the resource being scanned.
func (o DiscoveredPtrOutput) Cpe() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Discovered) *string {
		if v == nil {
			return nil
		}
		return v.Cpe
	}).(pulumi.StringPtrOutput)
}

// Output only. An operation that indicates the status of the current scan. This field is deprecated, do not use.
func (o DiscoveredPtrOutput) Operation() OperationTypePtrOutput {
	return o.ApplyT(func(v *Discovered) *OperationType {
		if v == nil {
			return nil
		}
		return v.Operation
	}).(OperationTypePtrOutput)
}

// A note that indicates a type of analysis a provider would perform. This note exists in a provider's project. A `Discovery` occurrence is created in a consumer's project at the start of analysis. The occurrence's operation will indicate the status of the analysis. Absence of an occurrence linked to this note for a resource indicates that analysis hasn't started.
type Discovery struct {
	// The kind of analysis that is handled by this discovery.
	AnalysisKind *string `pulumi:"analysisKind"`
}

// DiscoveryInput is an input type that accepts DiscoveryArgs and DiscoveryOutput values.
// You can construct a concrete instance of `DiscoveryInput` via:
//
//          DiscoveryArgs{...}
type DiscoveryInput interface {
	pulumi.Input

	ToDiscoveryOutput() DiscoveryOutput
	ToDiscoveryOutputWithContext(context.Context) DiscoveryOutput
}

// A note that indicates a type of analysis a provider would perform. This note exists in a provider's project. A `Discovery` occurrence is created in a consumer's project at the start of analysis. The occurrence's operation will indicate the status of the analysis. Absence of an occurrence linked to this note for a resource indicates that analysis hasn't started.
type DiscoveryArgs struct {
	// The kind of analysis that is handled by this discovery.
	AnalysisKind pulumi.StringPtrInput `pulumi:"analysisKind"`
}

func (DiscoveryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Discovery)(nil)).Elem()
}

func (i DiscoveryArgs) ToDiscoveryOutput() DiscoveryOutput {
	return i.ToDiscoveryOutputWithContext(context.Background())
}

func (i DiscoveryArgs) ToDiscoveryOutputWithContext(ctx context.Context) DiscoveryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiscoveryOutput)
}

func (i DiscoveryArgs) ToDiscoveryPtrOutput() DiscoveryPtrOutput {
	return i.ToDiscoveryPtrOutputWithContext(context.Background())
}

func (i DiscoveryArgs) ToDiscoveryPtrOutputWithContext(ctx context.Context) DiscoveryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiscoveryOutput).ToDiscoveryPtrOutputWithContext(ctx)
}

// DiscoveryPtrInput is an input type that accepts DiscoveryArgs, DiscoveryPtr and DiscoveryPtrOutput values.
// You can construct a concrete instance of `DiscoveryPtrInput` via:
//
//          DiscoveryArgs{...}
//
//  or:
//
//          nil
type DiscoveryPtrInput interface {
	pulumi.Input

	ToDiscoveryPtrOutput() DiscoveryPtrOutput
	ToDiscoveryPtrOutputWithContext(context.Context) DiscoveryPtrOutput
}

type discoveryPtrType DiscoveryArgs

func DiscoveryPtr(v *DiscoveryArgs) DiscoveryPtrInput {
	return (*discoveryPtrType)(v)
}

func (*discoveryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Discovery)(nil)).Elem()
}

func (i *discoveryPtrType) ToDiscoveryPtrOutput() DiscoveryPtrOutput {
	return i.ToDiscoveryPtrOutputWithContext(context.Background())
}

func (i *discoveryPtrType) ToDiscoveryPtrOutputWithContext(ctx context.Context) DiscoveryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiscoveryPtrOutput)
}

// A note that indicates a type of analysis a provider would perform. This note exists in a provider's project. A `Discovery` occurrence is created in a consumer's project at the start of analysis. The occurrence's operation will indicate the status of the analysis. Absence of an occurrence linked to this note for a resource indicates that analysis hasn't started.
type DiscoveryOutput struct{ *pulumi.OutputState }

func (DiscoveryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Discovery)(nil)).Elem()
}

func (o DiscoveryOutput) ToDiscoveryOutput() DiscoveryOutput {
	return o
}

func (o DiscoveryOutput) ToDiscoveryOutputWithContext(ctx context.Context) DiscoveryOutput {
	return o
}

func (o DiscoveryOutput) ToDiscoveryPtrOutput() DiscoveryPtrOutput {
	return o.ToDiscoveryPtrOutputWithContext(context.Background())
}

func (o DiscoveryOutput) ToDiscoveryPtrOutputWithContext(ctx context.Context) DiscoveryPtrOutput {
	return o.ApplyT(func(v Discovery) *Discovery {
		return &v
	}).(DiscoveryPtrOutput)
}

// The kind of analysis that is handled by this discovery.
func (o DiscoveryOutput) AnalysisKind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Discovery) *string { return v.AnalysisKind }).(pulumi.StringPtrOutput)
}

type DiscoveryPtrOutput struct{ *pulumi.OutputState }

func (DiscoveryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Discovery)(nil)).Elem()
}

func (o DiscoveryPtrOutput) ToDiscoveryPtrOutput() DiscoveryPtrOutput {
	return o
}

func (o DiscoveryPtrOutput) ToDiscoveryPtrOutputWithContext(ctx context.Context) DiscoveryPtrOutput {
	return o
}

func (o DiscoveryPtrOutput) Elem() DiscoveryOutput {
	return o.ApplyT(func(v *Discovery) Discovery { return *v }).(DiscoveryOutput)
}

// The kind of analysis that is handled by this discovery.
func (o DiscoveryPtrOutput) AnalysisKind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Discovery) *string {
		if v == nil {
			return nil
		}
		return v.AnalysisKind
	}).(pulumi.StringPtrOutput)
}

// This represents a particular channel of distribution for a given package. e.g. Debian's jessie-backports dpkg mirror
type Distribution struct {
	// The CPU architecture for which packages in this distribution channel were built
	Architecture *string `pulumi:"architecture"`
	// The cpe_uri in [cpe format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
	CpeUri *string `pulumi:"cpeUri"`
	// The distribution channel-specific description of this package.
	Description *string `pulumi:"description"`
	// The latest available version of this package in this distribution channel.
	LatestVersion *Version `pulumi:"latestVersion"`
	// A freeform string denoting the maintainer of this package.
	Maintainer *string `pulumi:"maintainer"`
	// The distribution channel-specific homepage for this package.
	Url *string `pulumi:"url"`
}

// DistributionInput is an input type that accepts DistributionArgs and DistributionOutput values.
// You can construct a concrete instance of `DistributionInput` via:
//
//          DistributionArgs{...}
type DistributionInput interface {
	pulumi.Input

	ToDistributionOutput() DistributionOutput
	ToDistributionOutputWithContext(context.Context) DistributionOutput
}

// This represents a particular channel of distribution for a given package. e.g. Debian's jessie-backports dpkg mirror
type DistributionArgs struct {
	// The CPU architecture for which packages in this distribution channel were built
	Architecture pulumi.StringPtrInput `pulumi:"architecture"`
	// The cpe_uri in [cpe format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
	CpeUri pulumi.StringPtrInput `pulumi:"cpeUri"`
	// The distribution channel-specific description of this package.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The latest available version of this package in this distribution channel.
	LatestVersion VersionPtrInput `pulumi:"latestVersion"`
	// A freeform string denoting the maintainer of this package.
	Maintainer pulumi.StringPtrInput `pulumi:"maintainer"`
	// The distribution channel-specific homepage for this package.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (DistributionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Distribution)(nil)).Elem()
}

func (i DistributionArgs) ToDistributionOutput() DistributionOutput {
	return i.ToDistributionOutputWithContext(context.Background())
}

func (i DistributionArgs) ToDistributionOutputWithContext(ctx context.Context) DistributionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionOutput)
}

// DistributionArrayInput is an input type that accepts DistributionArray and DistributionArrayOutput values.
// You can construct a concrete instance of `DistributionArrayInput` via:
//
//          DistributionArray{ DistributionArgs{...} }
type DistributionArrayInput interface {
	pulumi.Input

	ToDistributionArrayOutput() DistributionArrayOutput
	ToDistributionArrayOutputWithContext(context.Context) DistributionArrayOutput
}

type DistributionArray []DistributionInput

func (DistributionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Distribution)(nil)).Elem()
}

func (i DistributionArray) ToDistributionArrayOutput() DistributionArrayOutput {
	return i.ToDistributionArrayOutputWithContext(context.Background())
}

func (i DistributionArray) ToDistributionArrayOutputWithContext(ctx context.Context) DistributionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionArrayOutput)
}

// This represents a particular channel of distribution for a given package. e.g. Debian's jessie-backports dpkg mirror
type DistributionOutput struct{ *pulumi.OutputState }

func (DistributionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Distribution)(nil)).Elem()
}

func (o DistributionOutput) ToDistributionOutput() DistributionOutput {
	return o
}

func (o DistributionOutput) ToDistributionOutputWithContext(ctx context.Context) DistributionOutput {
	return o
}

// The CPU architecture for which packages in this distribution channel were built
func (o DistributionOutput) Architecture() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Distribution) *string { return v.Architecture }).(pulumi.StringPtrOutput)
}

// The cpe_uri in [cpe format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
func (o DistributionOutput) CpeUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Distribution) *string { return v.CpeUri }).(pulumi.StringPtrOutput)
}

// The distribution channel-specific description of this package.
func (o DistributionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Distribution) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The latest available version of this package in this distribution channel.
func (o DistributionOutput) LatestVersion() VersionPtrOutput {
	return o.ApplyT(func(v Distribution) *Version { return v.LatestVersion }).(VersionPtrOutput)
}

// A freeform string denoting the maintainer of this package.
func (o DistributionOutput) Maintainer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Distribution) *string { return v.Maintainer }).(pulumi.StringPtrOutput)
}

// The distribution channel-specific homepage for this package.
func (o DistributionOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Distribution) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type DistributionArrayOutput struct{ *pulumi.OutputState }

func (DistributionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Distribution)(nil)).Elem()
}

func (o DistributionArrayOutput) ToDistributionArrayOutput() DistributionArrayOutput {
	return o
}

func (o DistributionArrayOutput) ToDistributionArrayOutputWithContext(ctx context.Context) DistributionArrayOutput {
	return o
}

func (o DistributionArrayOutput) Index(i pulumi.IntInput) DistributionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Distribution {
		return vs[0].([]Distribution)[vs[1].(int)]
	}).(DistributionOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//          ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//          ExprArgs{...}
//
//  or:
//
//          nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyT(func(v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr { return *v }).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// A set of properties that uniquely identify a given Docker image.
type Fingerprint struct {
	// The layer-id of the final layer in the Docker image's v1 representation. This field can be used as a filter in list requests.
	V1Name *string `pulumi:"v1Name"`
	// The ordered list of v2 blobs that represent a given image.
	V2Blob []string `pulumi:"v2Blob"`
	// Output only. The name of the image's v2 blobs computed via: [bottom] := v2_blobbottom := sha256(v2_blob[N] + " " + v2_name[N+1]) Only the name of the final blob is kept. This field can be used as a filter in list requests.
	V2Name *string `pulumi:"v2Name"`
}

// FingerprintInput is an input type that accepts FingerprintArgs and FingerprintOutput values.
// You can construct a concrete instance of `FingerprintInput` via:
//
//          FingerprintArgs{...}
type FingerprintInput interface {
	pulumi.Input

	ToFingerprintOutput() FingerprintOutput
	ToFingerprintOutputWithContext(context.Context) FingerprintOutput
}

// A set of properties that uniquely identify a given Docker image.
type FingerprintArgs struct {
	// The layer-id of the final layer in the Docker image's v1 representation. This field can be used as a filter in list requests.
	V1Name pulumi.StringPtrInput `pulumi:"v1Name"`
	// The ordered list of v2 blobs that represent a given image.
	V2Blob pulumi.StringArrayInput `pulumi:"v2Blob"`
	// Output only. The name of the image's v2 blobs computed via: [bottom] := v2_blobbottom := sha256(v2_blob[N] + " " + v2_name[N+1]) Only the name of the final blob is kept. This field can be used as a filter in list requests.
	V2Name pulumi.StringPtrInput `pulumi:"v2Name"`
}

func (FingerprintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Fingerprint)(nil)).Elem()
}

func (i FingerprintArgs) ToFingerprintOutput() FingerprintOutput {
	return i.ToFingerprintOutputWithContext(context.Background())
}

func (i FingerprintArgs) ToFingerprintOutputWithContext(ctx context.Context) FingerprintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FingerprintOutput)
}

func (i FingerprintArgs) ToFingerprintPtrOutput() FingerprintPtrOutput {
	return i.ToFingerprintPtrOutputWithContext(context.Background())
}

func (i FingerprintArgs) ToFingerprintPtrOutputWithContext(ctx context.Context) FingerprintPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FingerprintOutput).ToFingerprintPtrOutputWithContext(ctx)
}

// FingerprintPtrInput is an input type that accepts FingerprintArgs, FingerprintPtr and FingerprintPtrOutput values.
// You can construct a concrete instance of `FingerprintPtrInput` via:
//
//          FingerprintArgs{...}
//
//  or:
//
//          nil
type FingerprintPtrInput interface {
	pulumi.Input

	ToFingerprintPtrOutput() FingerprintPtrOutput
	ToFingerprintPtrOutputWithContext(context.Context) FingerprintPtrOutput
}

type fingerprintPtrType FingerprintArgs

func FingerprintPtr(v *FingerprintArgs) FingerprintPtrInput {
	return (*fingerprintPtrType)(v)
}

func (*fingerprintPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Fingerprint)(nil)).Elem()
}

func (i *fingerprintPtrType) ToFingerprintPtrOutput() FingerprintPtrOutput {
	return i.ToFingerprintPtrOutputWithContext(context.Background())
}

func (i *fingerprintPtrType) ToFingerprintPtrOutputWithContext(ctx context.Context) FingerprintPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FingerprintPtrOutput)
}

// A set of properties that uniquely identify a given Docker image.
type FingerprintOutput struct{ *pulumi.OutputState }

func (FingerprintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Fingerprint)(nil)).Elem()
}

func (o FingerprintOutput) ToFingerprintOutput() FingerprintOutput {
	return o
}

func (o FingerprintOutput) ToFingerprintOutputWithContext(ctx context.Context) FingerprintOutput {
	return o
}

func (o FingerprintOutput) ToFingerprintPtrOutput() FingerprintPtrOutput {
	return o.ToFingerprintPtrOutputWithContext(context.Background())
}

func (o FingerprintOutput) ToFingerprintPtrOutputWithContext(ctx context.Context) FingerprintPtrOutput {
	return o.ApplyT(func(v Fingerprint) *Fingerprint {
		return &v
	}).(FingerprintPtrOutput)
}

// The layer-id of the final layer in the Docker image's v1 representation. This field can be used as a filter in list requests.
func (o FingerprintOutput) V1Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Fingerprint) *string { return v.V1Name }).(pulumi.StringPtrOutput)
}

// The ordered list of v2 blobs that represent a given image.
func (o FingerprintOutput) V2Blob() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Fingerprint) []string { return v.V2Blob }).(pulumi.StringArrayOutput)
}

// Output only. The name of the image's v2 blobs computed via: [bottom] := v2_blobbottom := sha256(v2_blob[N] + " " + v2_name[N+1]) Only the name of the final blob is kept. This field can be used as a filter in list requests.
func (o FingerprintOutput) V2Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Fingerprint) *string { return v.V2Name }).(pulumi.StringPtrOutput)
}

type FingerprintPtrOutput struct{ *pulumi.OutputState }

func (FingerprintPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Fingerprint)(nil)).Elem()
}

func (o FingerprintPtrOutput) ToFingerprintPtrOutput() FingerprintPtrOutput {
	return o
}

func (o FingerprintPtrOutput) ToFingerprintPtrOutputWithContext(ctx context.Context) FingerprintPtrOutput {
	return o
}

func (o FingerprintPtrOutput) Elem() FingerprintOutput {
	return o.ApplyT(func(v *Fingerprint) Fingerprint { return *v }).(FingerprintOutput)
}

// The layer-id of the final layer in the Docker image's v1 representation. This field can be used as a filter in list requests.
func (o FingerprintPtrOutput) V1Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Fingerprint) *string {
		if v == nil {
			return nil
		}
		return v.V1Name
	}).(pulumi.StringPtrOutput)
}

// The ordered list of v2 blobs that represent a given image.
func (o FingerprintPtrOutput) V2Blob() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Fingerprint) []string {
		if v == nil {
			return nil
		}
		return v.V2Blob
	}).(pulumi.StringArrayOutput)
}

// Output only. The name of the image's v2 blobs computed via: [bottom] := v2_blobbottom := sha256(v2_blob[N] + " " + v2_name[N+1]) Only the name of the final blob is kept. This field can be used as a filter in list requests.
func (o FingerprintPtrOutput) V2Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Fingerprint) *string {
		if v == nil {
			return nil
		}
		return v.V2Name
	}).(pulumi.StringPtrOutput)
}

// An alias to a repo revision.
type GoogleDevtoolsContaineranalysisV1alpha1AliasContext struct {
	// The alias kind.
	Kind *string `pulumi:"kind"`
	// The alias name.
	Name *string `pulumi:"name"`
}

// GoogleDevtoolsContaineranalysisV1alpha1AliasContextInput is an input type that accepts GoogleDevtoolsContaineranalysisV1alpha1AliasContextArgs and GoogleDevtoolsContaineranalysisV1alpha1AliasContextOutput values.
// You can construct a concrete instance of `GoogleDevtoolsContaineranalysisV1alpha1AliasContextInput` via:
//
//          GoogleDevtoolsContaineranalysisV1alpha1AliasContextArgs{...}
type GoogleDevtoolsContaineranalysisV1alpha1AliasContextInput interface {
	pulumi.Input

	ToGoogleDevtoolsContaineranalysisV1alpha1AliasContextOutput() GoogleDevtoolsContaineranalysisV1alpha1AliasContextOutput
	ToGoogleDevtoolsContaineranalysisV1alpha1AliasContextOutputWithContext(context.Context) GoogleDevtoolsContaineranalysisV1alpha1AliasContextOutput
}

// An alias to a repo revision.
type GoogleDevtoolsContaineranalysisV1alpha1AliasContextArgs struct {
	// The alias kind.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// The alias name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (GoogleDevtoolsContaineranalysisV1alpha1AliasContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1AliasContext)(nil)).Elem()
}

func (i GoogleDevtoolsContaineranalysisV1alpha1AliasContextArgs) ToGoogleDevtoolsContaineranalysisV1alpha1AliasContextOutput() GoogleDevtoolsContaineranalysisV1alpha1AliasContextOutput {
	return i.ToGoogleDevtoolsContaineranalysisV1alpha1AliasContextOutputWithContext(context.Background())
}

func (i GoogleDevtoolsContaineranalysisV1alpha1AliasContextArgs) ToGoogleDevtoolsContaineranalysisV1alpha1AliasContextOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1AliasContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsContaineranalysisV1alpha1AliasContextOutput)
}

func (i GoogleDevtoolsContaineranalysisV1alpha1AliasContextArgs) ToGoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput {
	return i.ToGoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutputWithContext(context.Background())
}

func (i GoogleDevtoolsContaineranalysisV1alpha1AliasContextArgs) ToGoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsContaineranalysisV1alpha1AliasContextOutput).ToGoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutputWithContext(ctx)
}

// GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrInput is an input type that accepts GoogleDevtoolsContaineranalysisV1alpha1AliasContextArgs, GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtr and GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput values.
// You can construct a concrete instance of `GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrInput` via:
//
//          GoogleDevtoolsContaineranalysisV1alpha1AliasContextArgs{...}
//
//  or:
//
//          nil
type GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrInput interface {
	pulumi.Input

	ToGoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput
	ToGoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutputWithContext(context.Context) GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput
}

type googleDevtoolsContaineranalysisV1alpha1AliasContextPtrType GoogleDevtoolsContaineranalysisV1alpha1AliasContextArgs

func GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtr(v *GoogleDevtoolsContaineranalysisV1alpha1AliasContextArgs) GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrInput {
	return (*googleDevtoolsContaineranalysisV1alpha1AliasContextPtrType)(v)
}

func (*googleDevtoolsContaineranalysisV1alpha1AliasContextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleDevtoolsContaineranalysisV1alpha1AliasContext)(nil)).Elem()
}

func (i *googleDevtoolsContaineranalysisV1alpha1AliasContextPtrType) ToGoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput {
	return i.ToGoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutputWithContext(context.Background())
}

func (i *googleDevtoolsContaineranalysisV1alpha1AliasContextPtrType) ToGoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput)
}

// An alias to a repo revision.
type GoogleDevtoolsContaineranalysisV1alpha1AliasContextOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsContaineranalysisV1alpha1AliasContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1AliasContext)(nil)).Elem()
}

func (o GoogleDevtoolsContaineranalysisV1alpha1AliasContextOutput) ToGoogleDevtoolsContaineranalysisV1alpha1AliasContextOutput() GoogleDevtoolsContaineranalysisV1alpha1AliasContextOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1AliasContextOutput) ToGoogleDevtoolsContaineranalysisV1alpha1AliasContextOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1AliasContextOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1AliasContextOutput) ToGoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput {
	return o.ToGoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutputWithContext(context.Background())
}

func (o GoogleDevtoolsContaineranalysisV1alpha1AliasContextOutput) ToGoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1AliasContext) *GoogleDevtoolsContaineranalysisV1alpha1AliasContext {
		return &v
	}).(GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput)
}

// The alias kind.
func (o GoogleDevtoolsContaineranalysisV1alpha1AliasContextOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1AliasContext) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// The alias name.
func (o GoogleDevtoolsContaineranalysisV1alpha1AliasContextOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1AliasContext) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleDevtoolsContaineranalysisV1alpha1AliasContext)(nil)).Elem()
}

func (o GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput) ToGoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput) ToGoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput) Elem() GoogleDevtoolsContaineranalysisV1alpha1AliasContextOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1AliasContext) GoogleDevtoolsContaineranalysisV1alpha1AliasContext {
		return *v
	}).(GoogleDevtoolsContaineranalysisV1alpha1AliasContextOutput)
}

// The alias kind.
func (o GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1AliasContext) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// The alias name.
func (o GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1AliasContext) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// A CloudRepoSourceContext denotes a particular revision in a Google Cloud Source Repo.
type GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext struct {
	// An alias, which may be a branch or tag.
	AliasContext *GoogleDevtoolsContaineranalysisV1alpha1AliasContext `pulumi:"aliasContext"`
	// The ID of the repo.
	RepoId *GoogleDevtoolsContaineranalysisV1alpha1RepoId `pulumi:"repoId"`
	// A revision ID.
	RevisionId *string `pulumi:"revisionId"`
}

// GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextInput is an input type that accepts GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextArgs and GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextOutput values.
// You can construct a concrete instance of `GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextInput` via:
//
//          GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextArgs{...}
type GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextInput interface {
	pulumi.Input

	ToGoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextOutput() GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextOutput
	ToGoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextOutputWithContext(context.Context) GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextOutput
}

// A CloudRepoSourceContext denotes a particular revision in a Google Cloud Source Repo.
type GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextArgs struct {
	// An alias, which may be a branch or tag.
	AliasContext GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrInput `pulumi:"aliasContext"`
	// The ID of the repo.
	RepoId GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrInput `pulumi:"repoId"`
	// A revision ID.
	RevisionId pulumi.StringPtrInput `pulumi:"revisionId"`
}

func (GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext)(nil)).Elem()
}

func (i GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextArgs) ToGoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextOutput() GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextOutput {
	return i.ToGoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextOutputWithContext(context.Background())
}

func (i GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextArgs) ToGoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextOutput)
}

func (i GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextArgs) ToGoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutput {
	return i.ToGoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutputWithContext(context.Background())
}

func (i GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextArgs) ToGoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextOutput).ToGoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutputWithContext(ctx)
}

// GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrInput is an input type that accepts GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextArgs, GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtr and GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutput values.
// You can construct a concrete instance of `GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrInput` via:
//
//          GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextArgs{...}
//
//  or:
//
//          nil
type GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrInput interface {
	pulumi.Input

	ToGoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutput
	ToGoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutputWithContext(context.Context) GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutput
}

type googleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrType GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextArgs

func GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtr(v *GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextArgs) GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrInput {
	return (*googleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrType)(v)
}

func (*googleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext)(nil)).Elem()
}

func (i *googleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrType) ToGoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutput {
	return i.ToGoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutputWithContext(context.Background())
}

func (i *googleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrType) ToGoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutput)
}

// A CloudRepoSourceContext denotes a particular revision in a Google Cloud Source Repo.
type GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext)(nil)).Elem()
}

func (o GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextOutput) ToGoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextOutput() GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextOutput) ToGoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextOutput) ToGoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutput {
	return o.ToGoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutputWithContext(context.Background())
}

func (o GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextOutput) ToGoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext) *GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext {
		return &v
	}).(GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutput)
}

// An alias, which may be a branch or tag.
func (o GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextOutput) AliasContext() GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext) *GoogleDevtoolsContaineranalysisV1alpha1AliasContext {
		return v.AliasContext
	}).(GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput)
}

// The ID of the repo.
func (o GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextOutput) RepoId() GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext) *GoogleDevtoolsContaineranalysisV1alpha1RepoId {
		return v.RepoId
	}).(GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutput)
}

// A revision ID.
func (o GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextOutput) RevisionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext) *string { return v.RevisionId }).(pulumi.StringPtrOutput)
}

type GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext)(nil)).Elem()
}

func (o GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutput) ToGoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutput) ToGoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutput) Elem() GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext) GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext {
		return *v
	}).(GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextOutput)
}

// An alias, which may be a branch or tag.
func (o GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutput) AliasContext() GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext) *GoogleDevtoolsContaineranalysisV1alpha1AliasContext {
		if v == nil {
			return nil
		}
		return v.AliasContext
	}).(GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput)
}

// The ID of the repo.
func (o GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutput) RepoId() GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext) *GoogleDevtoolsContaineranalysisV1alpha1RepoId {
		if v == nil {
			return nil
		}
		return v.RepoId
	}).(GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutput)
}

// A revision ID.
func (o GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutput) RevisionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext) *string {
		if v == nil {
			return nil
		}
		return v.RevisionId
	}).(pulumi.StringPtrOutput)
}

// A SourceContext referring to a Gerrit project.
type GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext struct {
	// An alias, which may be a branch or tag.
	AliasContext *GoogleDevtoolsContaineranalysisV1alpha1AliasContext `pulumi:"aliasContext"`
	// The full project name within the host. Projects may be nested, so "project/subproject" is a valid project name. The "repo name" is the hostURI/project.
	GerritProject *string `pulumi:"gerritProject"`
	// The URI of a running Gerrit instance.
	HostUri *string `pulumi:"hostUri"`
	// A revision (commit) ID.
	RevisionId *string `pulumi:"revisionId"`
}

// GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextInput is an input type that accepts GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextArgs and GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextOutput values.
// You can construct a concrete instance of `GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextInput` via:
//
//          GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextArgs{...}
type GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextInput interface {
	pulumi.Input

	ToGoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextOutput() GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextOutput
	ToGoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextOutputWithContext(context.Context) GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextOutput
}

// A SourceContext referring to a Gerrit project.
type GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextArgs struct {
	// An alias, which may be a branch or tag.
	AliasContext GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrInput `pulumi:"aliasContext"`
	// The full project name within the host. Projects may be nested, so "project/subproject" is a valid project name. The "repo name" is the hostURI/project.
	GerritProject pulumi.StringPtrInput `pulumi:"gerritProject"`
	// The URI of a running Gerrit instance.
	HostUri pulumi.StringPtrInput `pulumi:"hostUri"`
	// A revision (commit) ID.
	RevisionId pulumi.StringPtrInput `pulumi:"revisionId"`
}

func (GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext)(nil)).Elem()
}

func (i GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextArgs) ToGoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextOutput() GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextOutput {
	return i.ToGoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextOutputWithContext(context.Background())
}

func (i GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextArgs) ToGoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextOutput)
}

func (i GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextArgs) ToGoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput {
	return i.ToGoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutputWithContext(context.Background())
}

func (i GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextArgs) ToGoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextOutput).ToGoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutputWithContext(ctx)
}

// GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrInput is an input type that accepts GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextArgs, GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtr and GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput values.
// You can construct a concrete instance of `GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrInput` via:
//
//          GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextArgs{...}
//
//  or:
//
//          nil
type GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrInput interface {
	pulumi.Input

	ToGoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput
	ToGoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutputWithContext(context.Context) GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput
}

type googleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrType GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextArgs

func GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtr(v *GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextArgs) GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrInput {
	return (*googleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrType)(v)
}

func (*googleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext)(nil)).Elem()
}

func (i *googleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrType) ToGoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput {
	return i.ToGoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutputWithContext(context.Background())
}

func (i *googleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrType) ToGoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput)
}

// A SourceContext referring to a Gerrit project.
type GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext)(nil)).Elem()
}

func (o GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextOutput) ToGoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextOutput() GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextOutput) ToGoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextOutput) ToGoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput {
	return o.ToGoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutputWithContext(context.Background())
}

func (o GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextOutput) ToGoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext) *GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext {
		return &v
	}).(GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput)
}

// An alias, which may be a branch or tag.
func (o GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextOutput) AliasContext() GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext) *GoogleDevtoolsContaineranalysisV1alpha1AliasContext {
		return v.AliasContext
	}).(GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput)
}

// The full project name within the host. Projects may be nested, so "project/subproject" is a valid project name. The "repo name" is the hostURI/project.
func (o GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextOutput) GerritProject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext) *string { return v.GerritProject }).(pulumi.StringPtrOutput)
}

// The URI of a running Gerrit instance.
func (o GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextOutput) HostUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext) *string { return v.HostUri }).(pulumi.StringPtrOutput)
}

// A revision (commit) ID.
func (o GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextOutput) RevisionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext) *string { return v.RevisionId }).(pulumi.StringPtrOutput)
}

type GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext)(nil)).Elem()
}

func (o GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput) ToGoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput) ToGoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput) Elem() GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext) GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext {
		return *v
	}).(GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextOutput)
}

// An alias, which may be a branch or tag.
func (o GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput) AliasContext() GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext) *GoogleDevtoolsContaineranalysisV1alpha1AliasContext {
		if v == nil {
			return nil
		}
		return v.AliasContext
	}).(GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput)
}

// The full project name within the host. Projects may be nested, so "project/subproject" is a valid project name. The "repo name" is the hostURI/project.
func (o GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput) GerritProject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext) *string {
		if v == nil {
			return nil
		}
		return v.GerritProject
	}).(pulumi.StringPtrOutput)
}

// The URI of a running Gerrit instance.
func (o GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput) HostUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext) *string {
		if v == nil {
			return nil
		}
		return v.HostUri
	}).(pulumi.StringPtrOutput)
}

// A revision (commit) ID.
func (o GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput) RevisionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext) *string {
		if v == nil {
			return nil
		}
		return v.RevisionId
	}).(pulumi.StringPtrOutput)
}

// A GitSourceContext denotes a particular revision in a third party Git repository (e.g., GitHub).
type GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext struct {
	// Required. Git commit hash.
	RevisionId *string `pulumi:"revisionId"`
	// Git repository URL.
	Url *string `pulumi:"url"`
}

// GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextInput is an input type that accepts GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextArgs and GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextOutput values.
// You can construct a concrete instance of `GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextInput` via:
//
//          GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextArgs{...}
type GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextInput interface {
	pulumi.Input

	ToGoogleDevtoolsContaineranalysisV1alpha1GitSourceContextOutput() GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextOutput
	ToGoogleDevtoolsContaineranalysisV1alpha1GitSourceContextOutputWithContext(context.Context) GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextOutput
}

// A GitSourceContext denotes a particular revision in a third party Git repository (e.g., GitHub).
type GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextArgs struct {
	// Required. Git commit hash.
	RevisionId pulumi.StringPtrInput `pulumi:"revisionId"`
	// Git repository URL.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext)(nil)).Elem()
}

func (i GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextArgs) ToGoogleDevtoolsContaineranalysisV1alpha1GitSourceContextOutput() GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextOutput {
	return i.ToGoogleDevtoolsContaineranalysisV1alpha1GitSourceContextOutputWithContext(context.Background())
}

func (i GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextArgs) ToGoogleDevtoolsContaineranalysisV1alpha1GitSourceContextOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextOutput)
}

func (i GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextArgs) ToGoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutput {
	return i.ToGoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutputWithContext(context.Background())
}

func (i GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextArgs) ToGoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextOutput).ToGoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutputWithContext(ctx)
}

// GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrInput is an input type that accepts GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextArgs, GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtr and GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutput values.
// You can construct a concrete instance of `GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrInput` via:
//
//          GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextArgs{...}
//
//  or:
//
//          nil
type GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrInput interface {
	pulumi.Input

	ToGoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutput
	ToGoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutputWithContext(context.Context) GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutput
}

type googleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrType GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextArgs

func GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtr(v *GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextArgs) GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrInput {
	return (*googleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrType)(v)
}

func (*googleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext)(nil)).Elem()
}

func (i *googleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrType) ToGoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutput {
	return i.ToGoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutputWithContext(context.Background())
}

func (i *googleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrType) ToGoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutput)
}

// A GitSourceContext denotes a particular revision in a third party Git repository (e.g., GitHub).
type GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext)(nil)).Elem()
}

func (o GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextOutput) ToGoogleDevtoolsContaineranalysisV1alpha1GitSourceContextOutput() GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextOutput) ToGoogleDevtoolsContaineranalysisV1alpha1GitSourceContextOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextOutput) ToGoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutput {
	return o.ToGoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutputWithContext(context.Background())
}

func (o GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextOutput) ToGoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext) *GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext {
		return &v
	}).(GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutput)
}

// Required. Git commit hash.
func (o GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextOutput) RevisionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext) *string { return v.RevisionId }).(pulumi.StringPtrOutput)
}

// Git repository URL.
func (o GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext)(nil)).Elem()
}

func (o GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutput) ToGoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutput) ToGoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutput) Elem() GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext) GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext {
		return *v
	}).(GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextOutput)
}

// Required. Git commit hash.
func (o GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutput) RevisionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext) *string {
		if v == nil {
			return nil
		}
		return v.RevisionId
	}).(pulumi.StringPtrOutput)
}

// Git repository URL.
func (o GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// Selects a repo using a Google Cloud Platform project ID (e.g., winged-cargo-31) and a repo name within that project.
type GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoId struct {
	// The ID of the project.
	ProjectId *string `pulumi:"projectId"`
	// The name of the repo. Leave empty for the default repo.
	RepoName *string `pulumi:"repoName"`
}

// GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdInput is an input type that accepts GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdArgs and GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdOutput values.
// You can construct a concrete instance of `GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdInput` via:
//
//          GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdArgs{...}
type GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdInput interface {
	pulumi.Input

	ToGoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdOutput() GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdOutput
	ToGoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdOutputWithContext(context.Context) GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdOutput
}

// Selects a repo using a Google Cloud Platform project ID (e.g., winged-cargo-31) and a repo name within that project.
type GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdArgs struct {
	// The ID of the project.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// The name of the repo. Leave empty for the default repo.
	RepoName pulumi.StringPtrInput `pulumi:"repoName"`
}

func (GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoId)(nil)).Elem()
}

func (i GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdArgs) ToGoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdOutput() GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdOutput {
	return i.ToGoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdOutputWithContext(context.Background())
}

func (i GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdArgs) ToGoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdOutput)
}

func (i GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdArgs) ToGoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutput {
	return i.ToGoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutputWithContext(context.Background())
}

func (i GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdArgs) ToGoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdOutput).ToGoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutputWithContext(ctx)
}

// GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrInput is an input type that accepts GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdArgs, GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtr and GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutput values.
// You can construct a concrete instance of `GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrInput` via:
//
//          GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdArgs{...}
//
//  or:
//
//          nil
type GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrInput interface {
	pulumi.Input

	ToGoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutput
	ToGoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutputWithContext(context.Context) GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutput
}

type googleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrType GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdArgs

func GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtr(v *GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdArgs) GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrInput {
	return (*googleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrType)(v)
}

func (*googleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoId)(nil)).Elem()
}

func (i *googleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrType) ToGoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutput {
	return i.ToGoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutputWithContext(context.Background())
}

func (i *googleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrType) ToGoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutput)
}

// Selects a repo using a Google Cloud Platform project ID (e.g., winged-cargo-31) and a repo name within that project.
type GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoId)(nil)).Elem()
}

func (o GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdOutput) ToGoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdOutput() GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdOutput) ToGoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdOutput) ToGoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutput {
	return o.ToGoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutputWithContext(context.Background())
}

func (o GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdOutput) ToGoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoId) *GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoId {
		return &v
	}).(GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutput)
}

// The ID of the project.
func (o GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoId) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// The name of the repo. Leave empty for the default repo.
func (o GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdOutput) RepoName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoId) *string { return v.RepoName }).(pulumi.StringPtrOutput)
}

type GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoId)(nil)).Elem()
}

func (o GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutput) ToGoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutput) ToGoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutput) Elem() GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoId) GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoId {
		return *v
	}).(GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdOutput)
}

// The ID of the project.
func (o GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoId) *string {
		if v == nil {
			return nil
		}
		return v.ProjectId
	}).(pulumi.StringPtrOutput)
}

// The name of the repo. Leave empty for the default repo.
func (o GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutput) RepoName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoId) *string {
		if v == nil {
			return nil
		}
		return v.RepoName
	}).(pulumi.StringPtrOutput)
}

// A unique identifier for a Cloud Repo.
type GoogleDevtoolsContaineranalysisV1alpha1RepoId struct {
	// A combination of a project ID and a repo name.
	ProjectRepoId *GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoId `pulumi:"projectRepoId"`
	// A server-assigned, globally unique identifier.
	Uid *string `pulumi:"uid"`
}

// GoogleDevtoolsContaineranalysisV1alpha1RepoIdInput is an input type that accepts GoogleDevtoolsContaineranalysisV1alpha1RepoIdArgs and GoogleDevtoolsContaineranalysisV1alpha1RepoIdOutput values.
// You can construct a concrete instance of `GoogleDevtoolsContaineranalysisV1alpha1RepoIdInput` via:
//
//          GoogleDevtoolsContaineranalysisV1alpha1RepoIdArgs{...}
type GoogleDevtoolsContaineranalysisV1alpha1RepoIdInput interface {
	pulumi.Input

	ToGoogleDevtoolsContaineranalysisV1alpha1RepoIdOutput() GoogleDevtoolsContaineranalysisV1alpha1RepoIdOutput
	ToGoogleDevtoolsContaineranalysisV1alpha1RepoIdOutputWithContext(context.Context) GoogleDevtoolsContaineranalysisV1alpha1RepoIdOutput
}

// A unique identifier for a Cloud Repo.
type GoogleDevtoolsContaineranalysisV1alpha1RepoIdArgs struct {
	// A combination of a project ID and a repo name.
	ProjectRepoId GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrInput `pulumi:"projectRepoId"`
	// A server-assigned, globally unique identifier.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (GoogleDevtoolsContaineranalysisV1alpha1RepoIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1RepoId)(nil)).Elem()
}

func (i GoogleDevtoolsContaineranalysisV1alpha1RepoIdArgs) ToGoogleDevtoolsContaineranalysisV1alpha1RepoIdOutput() GoogleDevtoolsContaineranalysisV1alpha1RepoIdOutput {
	return i.ToGoogleDevtoolsContaineranalysisV1alpha1RepoIdOutputWithContext(context.Background())
}

func (i GoogleDevtoolsContaineranalysisV1alpha1RepoIdArgs) ToGoogleDevtoolsContaineranalysisV1alpha1RepoIdOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1RepoIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsContaineranalysisV1alpha1RepoIdOutput)
}

func (i GoogleDevtoolsContaineranalysisV1alpha1RepoIdArgs) ToGoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutput {
	return i.ToGoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutputWithContext(context.Background())
}

func (i GoogleDevtoolsContaineranalysisV1alpha1RepoIdArgs) ToGoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsContaineranalysisV1alpha1RepoIdOutput).ToGoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutputWithContext(ctx)
}

// GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrInput is an input type that accepts GoogleDevtoolsContaineranalysisV1alpha1RepoIdArgs, GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtr and GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutput values.
// You can construct a concrete instance of `GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrInput` via:
//
//          GoogleDevtoolsContaineranalysisV1alpha1RepoIdArgs{...}
//
//  or:
//
//          nil
type GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrInput interface {
	pulumi.Input

	ToGoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutput
	ToGoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutputWithContext(context.Context) GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutput
}

type googleDevtoolsContaineranalysisV1alpha1RepoIdPtrType GoogleDevtoolsContaineranalysisV1alpha1RepoIdArgs

func GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtr(v *GoogleDevtoolsContaineranalysisV1alpha1RepoIdArgs) GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrInput {
	return (*googleDevtoolsContaineranalysisV1alpha1RepoIdPtrType)(v)
}

func (*googleDevtoolsContaineranalysisV1alpha1RepoIdPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleDevtoolsContaineranalysisV1alpha1RepoId)(nil)).Elem()
}

func (i *googleDevtoolsContaineranalysisV1alpha1RepoIdPtrType) ToGoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutput {
	return i.ToGoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutputWithContext(context.Background())
}

func (i *googleDevtoolsContaineranalysisV1alpha1RepoIdPtrType) ToGoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutput)
}

// A unique identifier for a Cloud Repo.
type GoogleDevtoolsContaineranalysisV1alpha1RepoIdOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsContaineranalysisV1alpha1RepoIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1RepoId)(nil)).Elem()
}

func (o GoogleDevtoolsContaineranalysisV1alpha1RepoIdOutput) ToGoogleDevtoolsContaineranalysisV1alpha1RepoIdOutput() GoogleDevtoolsContaineranalysisV1alpha1RepoIdOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1RepoIdOutput) ToGoogleDevtoolsContaineranalysisV1alpha1RepoIdOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1RepoIdOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1RepoIdOutput) ToGoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutput {
	return o.ToGoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutputWithContext(context.Background())
}

func (o GoogleDevtoolsContaineranalysisV1alpha1RepoIdOutput) ToGoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1RepoId) *GoogleDevtoolsContaineranalysisV1alpha1RepoId {
		return &v
	}).(GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutput)
}

// A combination of a project ID and a repo name.
func (o GoogleDevtoolsContaineranalysisV1alpha1RepoIdOutput) ProjectRepoId() GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1RepoId) *GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoId {
		return v.ProjectRepoId
	}).(GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutput)
}

// A server-assigned, globally unique identifier.
func (o GoogleDevtoolsContaineranalysisV1alpha1RepoIdOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1RepoId) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleDevtoolsContaineranalysisV1alpha1RepoId)(nil)).Elem()
}

func (o GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutput) ToGoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutput) ToGoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutput) Elem() GoogleDevtoolsContaineranalysisV1alpha1RepoIdOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1RepoId) GoogleDevtoolsContaineranalysisV1alpha1RepoId {
		return *v
	}).(GoogleDevtoolsContaineranalysisV1alpha1RepoIdOutput)
}

// A combination of a project ID and a repo name.
func (o GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutput) ProjectRepoId() GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1RepoId) *GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoId {
		if v == nil {
			return nil
		}
		return v.ProjectRepoId
	}).(GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutput)
}

// A server-assigned, globally unique identifier.
func (o GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1RepoId) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

// A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory.
type GoogleDevtoolsContaineranalysisV1alpha1SourceContext struct {
	// A SourceContext referring to a revision in a Google Cloud Source Repo.
	CloudRepo *GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext `pulumi:"cloudRepo"`
	// A SourceContext referring to a Gerrit project.
	Gerrit *GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext `pulumi:"gerrit"`
	// A SourceContext referring to any third party Git repo (e.g., GitHub).
	Git *GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext `pulumi:"git"`
	// Labels with user defined metadata.
	Labels map[string]string `pulumi:"labels"`
}

// GoogleDevtoolsContaineranalysisV1alpha1SourceContextInput is an input type that accepts GoogleDevtoolsContaineranalysisV1alpha1SourceContextArgs and GoogleDevtoolsContaineranalysisV1alpha1SourceContextOutput values.
// You can construct a concrete instance of `GoogleDevtoolsContaineranalysisV1alpha1SourceContextInput` via:
//
//          GoogleDevtoolsContaineranalysisV1alpha1SourceContextArgs{...}
type GoogleDevtoolsContaineranalysisV1alpha1SourceContextInput interface {
	pulumi.Input

	ToGoogleDevtoolsContaineranalysisV1alpha1SourceContextOutput() GoogleDevtoolsContaineranalysisV1alpha1SourceContextOutput
	ToGoogleDevtoolsContaineranalysisV1alpha1SourceContextOutputWithContext(context.Context) GoogleDevtoolsContaineranalysisV1alpha1SourceContextOutput
}

// A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory.
type GoogleDevtoolsContaineranalysisV1alpha1SourceContextArgs struct {
	// A SourceContext referring to a revision in a Google Cloud Source Repo.
	CloudRepo GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrInput `pulumi:"cloudRepo"`
	// A SourceContext referring to a Gerrit project.
	Gerrit GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrInput `pulumi:"gerrit"`
	// A SourceContext referring to any third party Git repo (e.g., GitHub).
	Git GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrInput `pulumi:"git"`
	// Labels with user defined metadata.
	Labels pulumi.StringMapInput `pulumi:"labels"`
}

func (GoogleDevtoolsContaineranalysisV1alpha1SourceContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1SourceContext)(nil)).Elem()
}

func (i GoogleDevtoolsContaineranalysisV1alpha1SourceContextArgs) ToGoogleDevtoolsContaineranalysisV1alpha1SourceContextOutput() GoogleDevtoolsContaineranalysisV1alpha1SourceContextOutput {
	return i.ToGoogleDevtoolsContaineranalysisV1alpha1SourceContextOutputWithContext(context.Background())
}

func (i GoogleDevtoolsContaineranalysisV1alpha1SourceContextArgs) ToGoogleDevtoolsContaineranalysisV1alpha1SourceContextOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1SourceContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsContaineranalysisV1alpha1SourceContextOutput)
}

func (i GoogleDevtoolsContaineranalysisV1alpha1SourceContextArgs) ToGoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput {
	return i.ToGoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutputWithContext(context.Background())
}

func (i GoogleDevtoolsContaineranalysisV1alpha1SourceContextArgs) ToGoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsContaineranalysisV1alpha1SourceContextOutput).ToGoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutputWithContext(ctx)
}

// GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrInput is an input type that accepts GoogleDevtoolsContaineranalysisV1alpha1SourceContextArgs, GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtr and GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput values.
// You can construct a concrete instance of `GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrInput` via:
//
//          GoogleDevtoolsContaineranalysisV1alpha1SourceContextArgs{...}
//
//  or:
//
//          nil
type GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrInput interface {
	pulumi.Input

	ToGoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput
	ToGoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutputWithContext(context.Context) GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput
}

type googleDevtoolsContaineranalysisV1alpha1SourceContextPtrType GoogleDevtoolsContaineranalysisV1alpha1SourceContextArgs

func GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtr(v *GoogleDevtoolsContaineranalysisV1alpha1SourceContextArgs) GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrInput {
	return (*googleDevtoolsContaineranalysisV1alpha1SourceContextPtrType)(v)
}

func (*googleDevtoolsContaineranalysisV1alpha1SourceContextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleDevtoolsContaineranalysisV1alpha1SourceContext)(nil)).Elem()
}

func (i *googleDevtoolsContaineranalysisV1alpha1SourceContextPtrType) ToGoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput {
	return i.ToGoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutputWithContext(context.Background())
}

func (i *googleDevtoolsContaineranalysisV1alpha1SourceContextPtrType) ToGoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput)
}

// GoogleDevtoolsContaineranalysisV1alpha1SourceContextArrayInput is an input type that accepts GoogleDevtoolsContaineranalysisV1alpha1SourceContextArray and GoogleDevtoolsContaineranalysisV1alpha1SourceContextArrayOutput values.
// You can construct a concrete instance of `GoogleDevtoolsContaineranalysisV1alpha1SourceContextArrayInput` via:
//
//          GoogleDevtoolsContaineranalysisV1alpha1SourceContextArray{ GoogleDevtoolsContaineranalysisV1alpha1SourceContextArgs{...} }
type GoogleDevtoolsContaineranalysisV1alpha1SourceContextArrayInput interface {
	pulumi.Input

	ToGoogleDevtoolsContaineranalysisV1alpha1SourceContextArrayOutput() GoogleDevtoolsContaineranalysisV1alpha1SourceContextArrayOutput
	ToGoogleDevtoolsContaineranalysisV1alpha1SourceContextArrayOutputWithContext(context.Context) GoogleDevtoolsContaineranalysisV1alpha1SourceContextArrayOutput
}

type GoogleDevtoolsContaineranalysisV1alpha1SourceContextArray []GoogleDevtoolsContaineranalysisV1alpha1SourceContextInput

func (GoogleDevtoolsContaineranalysisV1alpha1SourceContextArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleDevtoolsContaineranalysisV1alpha1SourceContext)(nil)).Elem()
}

func (i GoogleDevtoolsContaineranalysisV1alpha1SourceContextArray) ToGoogleDevtoolsContaineranalysisV1alpha1SourceContextArrayOutput() GoogleDevtoolsContaineranalysisV1alpha1SourceContextArrayOutput {
	return i.ToGoogleDevtoolsContaineranalysisV1alpha1SourceContextArrayOutputWithContext(context.Background())
}

func (i GoogleDevtoolsContaineranalysisV1alpha1SourceContextArray) ToGoogleDevtoolsContaineranalysisV1alpha1SourceContextArrayOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1SourceContextArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsContaineranalysisV1alpha1SourceContextArrayOutput)
}

// A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory.
type GoogleDevtoolsContaineranalysisV1alpha1SourceContextOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsContaineranalysisV1alpha1SourceContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1SourceContext)(nil)).Elem()
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SourceContextOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SourceContextOutput() GoogleDevtoolsContaineranalysisV1alpha1SourceContextOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SourceContextOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SourceContextOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1SourceContextOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SourceContextOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput {
	return o.ToGoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutputWithContext(context.Background())
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SourceContextOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1SourceContext) *GoogleDevtoolsContaineranalysisV1alpha1SourceContext {
		return &v
	}).(GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput)
}

// A SourceContext referring to a revision in a Google Cloud Source Repo.
func (o GoogleDevtoolsContaineranalysisV1alpha1SourceContextOutput) CloudRepo() GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1SourceContext) *GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext {
		return v.CloudRepo
	}).(GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutput)
}

// A SourceContext referring to a Gerrit project.
func (o GoogleDevtoolsContaineranalysisV1alpha1SourceContextOutput) Gerrit() GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1SourceContext) *GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext {
		return v.Gerrit
	}).(GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput)
}

// A SourceContext referring to any third party Git repo (e.g., GitHub).
func (o GoogleDevtoolsContaineranalysisV1alpha1SourceContextOutput) Git() GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1SourceContext) *GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext {
		return v.Git
	}).(GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutput)
}

// Labels with user defined metadata.
func (o GoogleDevtoolsContaineranalysisV1alpha1SourceContextOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1SourceContext) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

type GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleDevtoolsContaineranalysisV1alpha1SourceContext)(nil)).Elem()
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput) Elem() GoogleDevtoolsContaineranalysisV1alpha1SourceContextOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1SourceContext) GoogleDevtoolsContaineranalysisV1alpha1SourceContext {
		return *v
	}).(GoogleDevtoolsContaineranalysisV1alpha1SourceContextOutput)
}

// A SourceContext referring to a revision in a Google Cloud Source Repo.
func (o GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput) CloudRepo() GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1SourceContext) *GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext {
		if v == nil {
			return nil
		}
		return v.CloudRepo
	}).(GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutput)
}

// A SourceContext referring to a Gerrit project.
func (o GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput) Gerrit() GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1SourceContext) *GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext {
		if v == nil {
			return nil
		}
		return v.Gerrit
	}).(GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput)
}

// A SourceContext referring to any third party Git repo (e.g., GitHub).
func (o GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput) Git() GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1SourceContext) *GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext {
		if v == nil {
			return nil
		}
		return v.Git
	}).(GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutput)
}

// Labels with user defined metadata.
func (o GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1SourceContext) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

type GoogleDevtoolsContaineranalysisV1alpha1SourceContextArrayOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsContaineranalysisV1alpha1SourceContextArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleDevtoolsContaineranalysisV1alpha1SourceContext)(nil)).Elem()
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SourceContextArrayOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SourceContextArrayOutput() GoogleDevtoolsContaineranalysisV1alpha1SourceContextArrayOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SourceContextArrayOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SourceContextArrayOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1SourceContextArrayOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SourceContextArrayOutput) Index(i pulumi.IntInput) GoogleDevtoolsContaineranalysisV1alpha1SourceContextOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleDevtoolsContaineranalysisV1alpha1SourceContext {
		return vs[0].([]GoogleDevtoolsContaineranalysisV1alpha1SourceContext)[vs[1].(int)]
	}).(GoogleDevtoolsContaineranalysisV1alpha1SourceContextOutput)
}

// Container message for hash values.
type Hash struct {
	// The type of hash that was performed.
	Type *string `pulumi:"type"`
	// The hash value.
	Value *string `pulumi:"value"`
}

// HashInput is an input type that accepts HashArgs and HashOutput values.
// You can construct a concrete instance of `HashInput` via:
//
//          HashArgs{...}
type HashInput interface {
	pulumi.Input

	ToHashOutput() HashOutput
	ToHashOutputWithContext(context.Context) HashOutput
}

// Container message for hash values.
type HashArgs struct {
	// The type of hash that was performed.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// The hash value.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (HashArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Hash)(nil)).Elem()
}

func (i HashArgs) ToHashOutput() HashOutput {
	return i.ToHashOutputWithContext(context.Background())
}

func (i HashArgs) ToHashOutputWithContext(ctx context.Context) HashOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HashOutput)
}

func (i HashArgs) ToHashPtrOutput() HashPtrOutput {
	return i.ToHashPtrOutputWithContext(context.Background())
}

func (i HashArgs) ToHashPtrOutputWithContext(ctx context.Context) HashPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HashOutput).ToHashPtrOutputWithContext(ctx)
}

// HashPtrInput is an input type that accepts HashArgs, HashPtr and HashPtrOutput values.
// You can construct a concrete instance of `HashPtrInput` via:
//
//          HashArgs{...}
//
//  or:
//
//          nil
type HashPtrInput interface {
	pulumi.Input

	ToHashPtrOutput() HashPtrOutput
	ToHashPtrOutputWithContext(context.Context) HashPtrOutput
}

type hashPtrType HashArgs

func HashPtr(v *HashArgs) HashPtrInput {
	return (*hashPtrType)(v)
}

func (*hashPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Hash)(nil)).Elem()
}

func (i *hashPtrType) ToHashPtrOutput() HashPtrOutput {
	return i.ToHashPtrOutputWithContext(context.Background())
}

func (i *hashPtrType) ToHashPtrOutputWithContext(ctx context.Context) HashPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HashPtrOutput)
}

// Container message for hash values.
type HashOutput struct{ *pulumi.OutputState }

func (HashOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Hash)(nil)).Elem()
}

func (o HashOutput) ToHashOutput() HashOutput {
	return o
}

func (o HashOutput) ToHashOutputWithContext(ctx context.Context) HashOutput {
	return o
}

func (o HashOutput) ToHashPtrOutput() HashPtrOutput {
	return o.ToHashPtrOutputWithContext(context.Background())
}

func (o HashOutput) ToHashPtrOutputWithContext(ctx context.Context) HashPtrOutput {
	return o.ApplyT(func(v Hash) *Hash {
		return &v
	}).(HashPtrOutput)
}

// The type of hash that was performed.
func (o HashOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Hash) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The hash value.
func (o HashOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Hash) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type HashPtrOutput struct{ *pulumi.OutputState }

func (HashPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Hash)(nil)).Elem()
}

func (o HashPtrOutput) ToHashPtrOutput() HashPtrOutput {
	return o
}

func (o HashPtrOutput) ToHashPtrOutputWithContext(ctx context.Context) HashPtrOutput {
	return o
}

func (o HashPtrOutput) Elem() HashOutput {
	return o.ApplyT(func(v *Hash) Hash { return *v }).(HashOutput)
}

// The type of hash that was performed.
func (o HashPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Hash) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The hash value.
func (o HashPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Hash) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

// This represents how a particular software package may be installed on a system.
type Installation struct {
	// All of the places within the filesystem versions of this package have been found.
	Location []Location `pulumi:"location"`
	// Output only. The name of the installed package.
	Name *string `pulumi:"name"`
}

// InstallationInput is an input type that accepts InstallationArgs and InstallationOutput values.
// You can construct a concrete instance of `InstallationInput` via:
//
//          InstallationArgs{...}
type InstallationInput interface {
	pulumi.Input

	ToInstallationOutput() InstallationOutput
	ToInstallationOutputWithContext(context.Context) InstallationOutput
}

// This represents how a particular software package may be installed on a system.
type InstallationArgs struct {
	// All of the places within the filesystem versions of this package have been found.
	Location LocationArrayInput `pulumi:"location"`
	// Output only. The name of the installed package.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (InstallationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Installation)(nil)).Elem()
}

func (i InstallationArgs) ToInstallationOutput() InstallationOutput {
	return i.ToInstallationOutputWithContext(context.Background())
}

func (i InstallationArgs) ToInstallationOutputWithContext(ctx context.Context) InstallationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstallationOutput)
}

func (i InstallationArgs) ToInstallationPtrOutput() InstallationPtrOutput {
	return i.ToInstallationPtrOutputWithContext(context.Background())
}

func (i InstallationArgs) ToInstallationPtrOutputWithContext(ctx context.Context) InstallationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstallationOutput).ToInstallationPtrOutputWithContext(ctx)
}

// InstallationPtrInput is an input type that accepts InstallationArgs, InstallationPtr and InstallationPtrOutput values.
// You can construct a concrete instance of `InstallationPtrInput` via:
//
//          InstallationArgs{...}
//
//  or:
//
//          nil
type InstallationPtrInput interface {
	pulumi.Input

	ToInstallationPtrOutput() InstallationPtrOutput
	ToInstallationPtrOutputWithContext(context.Context) InstallationPtrOutput
}

type installationPtrType InstallationArgs

func InstallationPtr(v *InstallationArgs) InstallationPtrInput {
	return (*installationPtrType)(v)
}

func (*installationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Installation)(nil)).Elem()
}

func (i *installationPtrType) ToInstallationPtrOutput() InstallationPtrOutput {
	return i.ToInstallationPtrOutputWithContext(context.Background())
}

func (i *installationPtrType) ToInstallationPtrOutputWithContext(ctx context.Context) InstallationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstallationPtrOutput)
}

// This represents how a particular software package may be installed on a system.
type InstallationOutput struct{ *pulumi.OutputState }

func (InstallationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Installation)(nil)).Elem()
}

func (o InstallationOutput) ToInstallationOutput() InstallationOutput {
	return o
}

func (o InstallationOutput) ToInstallationOutputWithContext(ctx context.Context) InstallationOutput {
	return o
}

func (o InstallationOutput) ToInstallationPtrOutput() InstallationPtrOutput {
	return o.ToInstallationPtrOutputWithContext(context.Background())
}

func (o InstallationOutput) ToInstallationPtrOutputWithContext(ctx context.Context) InstallationPtrOutput {
	return o.ApplyT(func(v Installation) *Installation {
		return &v
	}).(InstallationPtrOutput)
}

// All of the places within the filesystem versions of this package have been found.
func (o InstallationOutput) Location() LocationArrayOutput {
	return o.ApplyT(func(v Installation) []Location { return v.Location }).(LocationArrayOutput)
}

// Output only. The name of the installed package.
func (o InstallationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Installation) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type InstallationPtrOutput struct{ *pulumi.OutputState }

func (InstallationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Installation)(nil)).Elem()
}

func (o InstallationPtrOutput) ToInstallationPtrOutput() InstallationPtrOutput {
	return o
}

func (o InstallationPtrOutput) ToInstallationPtrOutputWithContext(ctx context.Context) InstallationPtrOutput {
	return o
}

func (o InstallationPtrOutput) Elem() InstallationOutput {
	return o.ApplyT(func(v *Installation) Installation { return *v }).(InstallationOutput)
}

// All of the places within the filesystem versions of this package have been found.
func (o InstallationPtrOutput) Location() LocationArrayOutput {
	return o.ApplyT(func(v *Installation) []Location {
		if v == nil {
			return nil
		}
		return v.Location
	}).(LocationArrayOutput)
}

// Output only. The name of the installed package.
func (o InstallationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Installation) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Layer holds metadata specific to a layer of a Docker image.
type Layer struct {
	// The recovered arguments to the Dockerfile directive.
	Arguments *string `pulumi:"arguments"`
	// The recovered Dockerfile directive used to construct this layer.
	Directive *string `pulumi:"directive"`
}

// LayerInput is an input type that accepts LayerArgs and LayerOutput values.
// You can construct a concrete instance of `LayerInput` via:
//
//          LayerArgs{...}
type LayerInput interface {
	pulumi.Input

	ToLayerOutput() LayerOutput
	ToLayerOutputWithContext(context.Context) LayerOutput
}

// Layer holds metadata specific to a layer of a Docker image.
type LayerArgs struct {
	// The recovered arguments to the Dockerfile directive.
	Arguments pulumi.StringPtrInput `pulumi:"arguments"`
	// The recovered Dockerfile directive used to construct this layer.
	Directive pulumi.StringPtrInput `pulumi:"directive"`
}

func (LayerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Layer)(nil)).Elem()
}

func (i LayerArgs) ToLayerOutput() LayerOutput {
	return i.ToLayerOutputWithContext(context.Background())
}

func (i LayerArgs) ToLayerOutputWithContext(ctx context.Context) LayerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LayerOutput)
}

// LayerArrayInput is an input type that accepts LayerArray and LayerArrayOutput values.
// You can construct a concrete instance of `LayerArrayInput` via:
//
//          LayerArray{ LayerArgs{...} }
type LayerArrayInput interface {
	pulumi.Input

	ToLayerArrayOutput() LayerArrayOutput
	ToLayerArrayOutputWithContext(context.Context) LayerArrayOutput
}

type LayerArray []LayerInput

func (LayerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Layer)(nil)).Elem()
}

func (i LayerArray) ToLayerArrayOutput() LayerArrayOutput {
	return i.ToLayerArrayOutputWithContext(context.Background())
}

func (i LayerArray) ToLayerArrayOutputWithContext(ctx context.Context) LayerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LayerArrayOutput)
}

// Layer holds metadata specific to a layer of a Docker image.
type LayerOutput struct{ *pulumi.OutputState }

func (LayerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Layer)(nil)).Elem()
}

func (o LayerOutput) ToLayerOutput() LayerOutput {
	return o
}

func (o LayerOutput) ToLayerOutputWithContext(ctx context.Context) LayerOutput {
	return o
}

// The recovered arguments to the Dockerfile directive.
func (o LayerOutput) Arguments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Layer) *string { return v.Arguments }).(pulumi.StringPtrOutput)
}

// The recovered Dockerfile directive used to construct this layer.
func (o LayerOutput) Directive() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Layer) *string { return v.Directive }).(pulumi.StringPtrOutput)
}

type LayerArrayOutput struct{ *pulumi.OutputState }

func (LayerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Layer)(nil)).Elem()
}

func (o LayerArrayOutput) ToLayerArrayOutput() LayerArrayOutput {
	return o
}

func (o LayerArrayOutput) ToLayerArrayOutputWithContext(ctx context.Context) LayerArrayOutput {
	return o
}

func (o LayerArrayOutput) Index(i pulumi.IntInput) LayerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Layer {
		return vs[0].([]Layer)[vs[1].(int)]
	}).(LayerOutput)
}

// An occurrence of a particular package installation found within a system's filesystem. e.g. glibc was found in /var/lib/dpkg/status
type Location struct {
	// The cpe_uri in [cpe format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
	CpeUri *string `pulumi:"cpeUri"`
	// The path from which we gathered that this package/version is installed.
	Path *string `pulumi:"path"`
	// The version installed at this location.
	Version *Version `pulumi:"version"`
}

// LocationInput is an input type that accepts LocationArgs and LocationOutput values.
// You can construct a concrete instance of `LocationInput` via:
//
//          LocationArgs{...}
type LocationInput interface {
	pulumi.Input

	ToLocationOutput() LocationOutput
	ToLocationOutputWithContext(context.Context) LocationOutput
}

// An occurrence of a particular package installation found within a system's filesystem. e.g. glibc was found in /var/lib/dpkg/status
type LocationArgs struct {
	// The cpe_uri in [cpe format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
	CpeUri pulumi.StringPtrInput `pulumi:"cpeUri"`
	// The path from which we gathered that this package/version is installed.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// The version installed at this location.
	Version VersionPtrInput `pulumi:"version"`
}

func (LocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Location)(nil)).Elem()
}

func (i LocationArgs) ToLocationOutput() LocationOutput {
	return i.ToLocationOutputWithContext(context.Background())
}

func (i LocationArgs) ToLocationOutputWithContext(ctx context.Context) LocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationOutput)
}

// LocationArrayInput is an input type that accepts LocationArray and LocationArrayOutput values.
// You can construct a concrete instance of `LocationArrayInput` via:
//
//          LocationArray{ LocationArgs{...} }
type LocationArrayInput interface {
	pulumi.Input

	ToLocationArrayOutput() LocationArrayOutput
	ToLocationArrayOutputWithContext(context.Context) LocationArrayOutput
}

type LocationArray []LocationInput

func (LocationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Location)(nil)).Elem()
}

func (i LocationArray) ToLocationArrayOutput() LocationArrayOutput {
	return i.ToLocationArrayOutputWithContext(context.Background())
}

func (i LocationArray) ToLocationArrayOutputWithContext(ctx context.Context) LocationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationArrayOutput)
}

// An occurrence of a particular package installation found within a system's filesystem. e.g. glibc was found in /var/lib/dpkg/status
type LocationOutput struct{ *pulumi.OutputState }

func (LocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Location)(nil)).Elem()
}

func (o LocationOutput) ToLocationOutput() LocationOutput {
	return o
}

func (o LocationOutput) ToLocationOutputWithContext(ctx context.Context) LocationOutput {
	return o
}

// The cpe_uri in [cpe format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
func (o LocationOutput) CpeUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Location) *string { return v.CpeUri }).(pulumi.StringPtrOutput)
}

// The path from which we gathered that this package/version is installed.
func (o LocationOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Location) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// The version installed at this location.
func (o LocationOutput) Version() VersionPtrOutput {
	return o.ApplyT(func(v Location) *Version { return v.Version }).(VersionPtrOutput)
}

type LocationArrayOutput struct{ *pulumi.OutputState }

func (LocationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Location)(nil)).Elem()
}

func (o LocationArrayOutput) ToLocationArrayOutput() LocationArrayOutput {
	return o
}

func (o LocationArrayOutput) ToLocationArrayOutputWithContext(ctx context.Context) LocationArrayOutput {
	return o
}

func (o LocationArrayOutput) Index(i pulumi.IntInput) LocationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Location {
		return vs[0].([]Location)[vs[1].(int)]
	}).(LocationOutput)
}

// This resource represents a long-running operation that is the result of a network API call.
type OperationType struct {
	// If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
	Done *bool `pulumi:"done"`
	// The error result of the operation in case of failure or cancellation.
	Error *Status `pulumi:"error"`
	// Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
	Metadata map[string]string `pulumi:"metadata"`
	// The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.
	Name *string `pulumi:"name"`
	// The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
	Response map[string]string `pulumi:"response"`
}

// OperationTypeInput is an input type that accepts OperationTypeArgs and OperationTypeOutput values.
// You can construct a concrete instance of `OperationTypeInput` via:
//
//          OperationTypeArgs{...}
type OperationTypeInput interface {
	pulumi.Input

	ToOperationTypeOutput() OperationTypeOutput
	ToOperationTypeOutputWithContext(context.Context) OperationTypeOutput
}

// This resource represents a long-running operation that is the result of a network API call.
type OperationTypeArgs struct {
	// If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
	Done pulumi.BoolPtrInput `pulumi:"done"`
	// The error result of the operation in case of failure or cancellation.
	Error StatusPtrInput `pulumi:"error"`
	// Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
	Metadata pulumi.StringMapInput `pulumi:"metadata"`
	// The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
	Response pulumi.StringMapInput `pulumi:"response"`
}

func (OperationTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OperationType)(nil)).Elem()
}

func (i OperationTypeArgs) ToOperationTypeOutput() OperationTypeOutput {
	return i.ToOperationTypeOutputWithContext(context.Background())
}

func (i OperationTypeArgs) ToOperationTypeOutputWithContext(ctx context.Context) OperationTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperationTypeOutput)
}

func (i OperationTypeArgs) ToOperationTypePtrOutput() OperationTypePtrOutput {
	return i.ToOperationTypePtrOutputWithContext(context.Background())
}

func (i OperationTypeArgs) ToOperationTypePtrOutputWithContext(ctx context.Context) OperationTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperationTypeOutput).ToOperationTypePtrOutputWithContext(ctx)
}

// OperationTypePtrInput is an input type that accepts OperationTypeArgs, OperationTypePtr and OperationTypePtrOutput values.
// You can construct a concrete instance of `OperationTypePtrInput` via:
//
//          OperationTypeArgs{...}
//
//  or:
//
//          nil
type OperationTypePtrInput interface {
	pulumi.Input

	ToOperationTypePtrOutput() OperationTypePtrOutput
	ToOperationTypePtrOutputWithContext(context.Context) OperationTypePtrOutput
}

type operationTypePtrType OperationTypeArgs

func OperationTypePtr(v *OperationTypeArgs) OperationTypePtrInput {
	return (*operationTypePtrType)(v)
}

func (*operationTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OperationType)(nil)).Elem()
}

func (i *operationTypePtrType) ToOperationTypePtrOutput() OperationTypePtrOutput {
	return i.ToOperationTypePtrOutputWithContext(context.Background())
}

func (i *operationTypePtrType) ToOperationTypePtrOutputWithContext(ctx context.Context) OperationTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperationTypePtrOutput)
}

// This resource represents a long-running operation that is the result of a network API call.
type OperationTypeOutput struct{ *pulumi.OutputState }

func (OperationTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OperationType)(nil)).Elem()
}

func (o OperationTypeOutput) ToOperationTypeOutput() OperationTypeOutput {
	return o
}

func (o OperationTypeOutput) ToOperationTypeOutputWithContext(ctx context.Context) OperationTypeOutput {
	return o
}

func (o OperationTypeOutput) ToOperationTypePtrOutput() OperationTypePtrOutput {
	return o.ToOperationTypePtrOutputWithContext(context.Background())
}

func (o OperationTypeOutput) ToOperationTypePtrOutputWithContext(ctx context.Context) OperationTypePtrOutput {
	return o.ApplyT(func(v OperationType) *OperationType {
		return &v
	}).(OperationTypePtrOutput)
}

// If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
func (o OperationTypeOutput) Done() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OperationType) *bool { return v.Done }).(pulumi.BoolPtrOutput)
}

// The error result of the operation in case of failure or cancellation.
func (o OperationTypeOutput) Error() StatusPtrOutput {
	return o.ApplyT(func(v OperationType) *Status { return v.Error }).(StatusPtrOutput)
}

// Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
func (o OperationTypeOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v OperationType) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.
func (o OperationTypeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperationType) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
func (o OperationTypeOutput) Response() pulumi.StringMapOutput {
	return o.ApplyT(func(v OperationType) map[string]string { return v.Response }).(pulumi.StringMapOutput)
}

type OperationTypePtrOutput struct{ *pulumi.OutputState }

func (OperationTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OperationType)(nil)).Elem()
}

func (o OperationTypePtrOutput) ToOperationTypePtrOutput() OperationTypePtrOutput {
	return o
}

func (o OperationTypePtrOutput) ToOperationTypePtrOutputWithContext(ctx context.Context) OperationTypePtrOutput {
	return o
}

func (o OperationTypePtrOutput) Elem() OperationTypeOutput {
	return o.ApplyT(func(v *OperationType) OperationType { return *v }).(OperationTypeOutput)
}

// If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
func (o OperationTypePtrOutput) Done() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OperationType) *bool {
		if v == nil {
			return nil
		}
		return v.Done
	}).(pulumi.BoolPtrOutput)
}

// The error result of the operation in case of failure or cancellation.
func (o OperationTypePtrOutput) Error() StatusPtrOutput {
	return o.ApplyT(func(v *OperationType) *Status {
		if v == nil {
			return nil
		}
		return v.Error
	}).(StatusPtrOutput)
}

// Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
func (o OperationTypePtrOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *OperationType) map[string]string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringMapOutput)
}

// The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.
func (o OperationTypePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperationType) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
func (o OperationTypePtrOutput) Response() pulumi.StringMapOutput {
	return o.ApplyT(func(v *OperationType) map[string]string {
		if v == nil {
			return nil
		}
		return v.Response
	}).(pulumi.StringMapOutput)
}

// This represents a particular package that is distributed over various channels. e.g. glibc (aka libc6) is distributed by many, at various versions.
type Package struct {
	// The various channels by which a package is distributed.
	Distribution []Distribution `pulumi:"distribution"`
	// The name of the package.
	Name *string `pulumi:"name"`
}

// PackageInput is an input type that accepts PackageArgs and PackageOutput values.
// You can construct a concrete instance of `PackageInput` via:
//
//          PackageArgs{...}
type PackageInput interface {
	pulumi.Input

	ToPackageOutput() PackageOutput
	ToPackageOutputWithContext(context.Context) PackageOutput
}

// This represents a particular package that is distributed over various channels. e.g. glibc (aka libc6) is distributed by many, at various versions.
type PackageArgs struct {
	// The various channels by which a package is distributed.
	Distribution DistributionArrayInput `pulumi:"distribution"`
	// The name of the package.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (PackageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Package)(nil)).Elem()
}

func (i PackageArgs) ToPackageOutput() PackageOutput {
	return i.ToPackageOutputWithContext(context.Background())
}

func (i PackageArgs) ToPackageOutputWithContext(ctx context.Context) PackageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageOutput)
}

func (i PackageArgs) ToPackagePtrOutput() PackagePtrOutput {
	return i.ToPackagePtrOutputWithContext(context.Background())
}

func (i PackageArgs) ToPackagePtrOutputWithContext(ctx context.Context) PackagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageOutput).ToPackagePtrOutputWithContext(ctx)
}

// PackagePtrInput is an input type that accepts PackageArgs, PackagePtr and PackagePtrOutput values.
// You can construct a concrete instance of `PackagePtrInput` via:
//
//          PackageArgs{...}
//
//  or:
//
//          nil
type PackagePtrInput interface {
	pulumi.Input

	ToPackagePtrOutput() PackagePtrOutput
	ToPackagePtrOutputWithContext(context.Context) PackagePtrOutput
}

type packagePtrType PackageArgs

func PackagePtr(v *PackageArgs) PackagePtrInput {
	return (*packagePtrType)(v)
}

func (*packagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Package)(nil)).Elem()
}

func (i *packagePtrType) ToPackagePtrOutput() PackagePtrOutput {
	return i.ToPackagePtrOutputWithContext(context.Background())
}

func (i *packagePtrType) ToPackagePtrOutputWithContext(ctx context.Context) PackagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackagePtrOutput)
}

// This represents a particular package that is distributed over various channels. e.g. glibc (aka libc6) is distributed by many, at various versions.
type PackageOutput struct{ *pulumi.OutputState }

func (PackageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Package)(nil)).Elem()
}

func (o PackageOutput) ToPackageOutput() PackageOutput {
	return o
}

func (o PackageOutput) ToPackageOutputWithContext(ctx context.Context) PackageOutput {
	return o
}

func (o PackageOutput) ToPackagePtrOutput() PackagePtrOutput {
	return o.ToPackagePtrOutputWithContext(context.Background())
}

func (o PackageOutput) ToPackagePtrOutputWithContext(ctx context.Context) PackagePtrOutput {
	return o.ApplyT(func(v Package) *Package {
		return &v
	}).(PackagePtrOutput)
}

// The various channels by which a package is distributed.
func (o PackageOutput) Distribution() DistributionArrayOutput {
	return o.ApplyT(func(v Package) []Distribution { return v.Distribution }).(DistributionArrayOutput)
}

// The name of the package.
func (o PackageOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Package) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type PackagePtrOutput struct{ *pulumi.OutputState }

func (PackagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Package)(nil)).Elem()
}

func (o PackagePtrOutput) ToPackagePtrOutput() PackagePtrOutput {
	return o
}

func (o PackagePtrOutput) ToPackagePtrOutputWithContext(ctx context.Context) PackagePtrOutput {
	return o
}

func (o PackagePtrOutput) Elem() PackageOutput {
	return o.ApplyT(func(v *Package) Package { return *v }).(PackageOutput)
}

// The various channels by which a package is distributed.
func (o PackagePtrOutput) Distribution() DistributionArrayOutput {
	return o.ApplyT(func(v *Package) []Distribution {
		if v == nil {
			return nil
		}
		return v.Distribution
	}).(DistributionArrayOutput)
}

// The name of the package.
func (o PackagePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Package) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// This message wraps a location affected by a vulnerability and its associated fix (if one is available).
type PackageIssue struct {
	// The location of the vulnerability.
	AffectedLocation *VulnerabilityLocation `pulumi:"affectedLocation"`
	// The location of the available fix for vulnerability.
	FixedLocation *VulnerabilityLocation `pulumi:"fixedLocation"`
	SeverityName  *string                `pulumi:"severityName"`
}

// PackageIssueInput is an input type that accepts PackageIssueArgs and PackageIssueOutput values.
// You can construct a concrete instance of `PackageIssueInput` via:
//
//          PackageIssueArgs{...}
type PackageIssueInput interface {
	pulumi.Input

	ToPackageIssueOutput() PackageIssueOutput
	ToPackageIssueOutputWithContext(context.Context) PackageIssueOutput
}

// This message wraps a location affected by a vulnerability and its associated fix (if one is available).
type PackageIssueArgs struct {
	// The location of the vulnerability.
	AffectedLocation VulnerabilityLocationPtrInput `pulumi:"affectedLocation"`
	// The location of the available fix for vulnerability.
	FixedLocation VulnerabilityLocationPtrInput `pulumi:"fixedLocation"`
	SeverityName  pulumi.StringPtrInput         `pulumi:"severityName"`
}

func (PackageIssueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PackageIssue)(nil)).Elem()
}

func (i PackageIssueArgs) ToPackageIssueOutput() PackageIssueOutput {
	return i.ToPackageIssueOutputWithContext(context.Background())
}

func (i PackageIssueArgs) ToPackageIssueOutputWithContext(ctx context.Context) PackageIssueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageIssueOutput)
}

// PackageIssueArrayInput is an input type that accepts PackageIssueArray and PackageIssueArrayOutput values.
// You can construct a concrete instance of `PackageIssueArrayInput` via:
//
//          PackageIssueArray{ PackageIssueArgs{...} }
type PackageIssueArrayInput interface {
	pulumi.Input

	ToPackageIssueArrayOutput() PackageIssueArrayOutput
	ToPackageIssueArrayOutputWithContext(context.Context) PackageIssueArrayOutput
}

type PackageIssueArray []PackageIssueInput

func (PackageIssueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PackageIssue)(nil)).Elem()
}

func (i PackageIssueArray) ToPackageIssueArrayOutput() PackageIssueArrayOutput {
	return i.ToPackageIssueArrayOutputWithContext(context.Background())
}

func (i PackageIssueArray) ToPackageIssueArrayOutputWithContext(ctx context.Context) PackageIssueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageIssueArrayOutput)
}

// This message wraps a location affected by a vulnerability and its associated fix (if one is available).
type PackageIssueOutput struct{ *pulumi.OutputState }

func (PackageIssueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PackageIssue)(nil)).Elem()
}

func (o PackageIssueOutput) ToPackageIssueOutput() PackageIssueOutput {
	return o
}

func (o PackageIssueOutput) ToPackageIssueOutputWithContext(ctx context.Context) PackageIssueOutput {
	return o
}

// The location of the vulnerability.
func (o PackageIssueOutput) AffectedLocation() VulnerabilityLocationPtrOutput {
	return o.ApplyT(func(v PackageIssue) *VulnerabilityLocation { return v.AffectedLocation }).(VulnerabilityLocationPtrOutput)
}

// The location of the available fix for vulnerability.
func (o PackageIssueOutput) FixedLocation() VulnerabilityLocationPtrOutput {
	return o.ApplyT(func(v PackageIssue) *VulnerabilityLocation { return v.FixedLocation }).(VulnerabilityLocationPtrOutput)
}

func (o PackageIssueOutput) SeverityName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PackageIssue) *string { return v.SeverityName }).(pulumi.StringPtrOutput)
}

type PackageIssueArrayOutput struct{ *pulumi.OutputState }

func (PackageIssueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PackageIssue)(nil)).Elem()
}

func (o PackageIssueArrayOutput) ToPackageIssueArrayOutput() PackageIssueArrayOutput {
	return o
}

func (o PackageIssueArrayOutput) ToPackageIssueArrayOutputWithContext(ctx context.Context) PackageIssueArrayOutput {
	return o
}

func (o PackageIssueArrayOutput) Index(i pulumi.IntInput) PackageIssueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PackageIssue {
		return vs[0].([]PackageIssue)[vs[1].(int)]
	}).(PackageIssueOutput)
}

// An attestation wrapper with a PGP-compatible signature. This message only supports `ATTACHED` signatures, where the payload that is signed is included alongside the signature itself in the same file.
type PgpSignedAttestation struct {
	// Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).
	ContentType *string `pulumi:"contentType"`
	// The cryptographic fingerprint of the key used to generate the signature, as output by, e.g. `gpg --list-keys`. This should be the version 4, full 160-bit fingerprint, expressed as a 40 character hexadecimal string. See https://tools.ietf.org/html/rfc4880#section-12.2 for details. Implementations may choose to acknowledge "LONG", "SHORT", or other abbreviated key IDs, but only the full fingerprint is guaranteed to work. In gpg, the full fingerprint can be retrieved from the `fpr` field returned when calling --list-keys with --with-colons. For example: ```gpg --with-colons --with-fingerprint --force-v4-certs \ --list-keys attester@example.com tru::1:1513631572:0:3:1:5 pub:...... fpr:::::::::24FF6481B76AC91E66A00AC657A93A81EF3AE6FB:``` Above, the fingerprint is `24FF6481B76AC91E66A00AC657A93A81EF3AE6FB`.
	PgpKeyId *string `pulumi:"pgpKeyId"`
	// The raw content of the signature, as output by GNU Privacy Guard (GPG) or equivalent. Since this message only supports attached signatures, the payload that was signed must be attached. While the signature format supported is dependent on the verification implementation, currently only ASCII-armored (`--armor` to gpg), non-clearsigned (`--sign` rather than `--clearsign` to gpg) are supported. Concretely, `gpg --sign --armor --output=signature.gpg payload.json` will create the signature content expected in this field in `signature.gpg` for the `payload.json` attestation payload.
	Signature *string `pulumi:"signature"`
}

// PgpSignedAttestationInput is an input type that accepts PgpSignedAttestationArgs and PgpSignedAttestationOutput values.
// You can construct a concrete instance of `PgpSignedAttestationInput` via:
//
//          PgpSignedAttestationArgs{...}
type PgpSignedAttestationInput interface {
	pulumi.Input

	ToPgpSignedAttestationOutput() PgpSignedAttestationOutput
	ToPgpSignedAttestationOutputWithContext(context.Context) PgpSignedAttestationOutput
}

// An attestation wrapper with a PGP-compatible signature. This message only supports `ATTACHED` signatures, where the payload that is signed is included alongside the signature itself in the same file.
type PgpSignedAttestationArgs struct {
	// Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).
	ContentType pulumi.StringPtrInput `pulumi:"contentType"`
	// The cryptographic fingerprint of the key used to generate the signature, as output by, e.g. `gpg --list-keys`. This should be the version 4, full 160-bit fingerprint, expressed as a 40 character hexadecimal string. See https://tools.ietf.org/html/rfc4880#section-12.2 for details. Implementations may choose to acknowledge "LONG", "SHORT", or other abbreviated key IDs, but only the full fingerprint is guaranteed to work. In gpg, the full fingerprint can be retrieved from the `fpr` field returned when calling --list-keys with --with-colons. For example: ```gpg --with-colons --with-fingerprint --force-v4-certs \ --list-keys attester@example.com tru::1:1513631572:0:3:1:5 pub:...... fpr:::::::::24FF6481B76AC91E66A00AC657A93A81EF3AE6FB:``` Above, the fingerprint is `24FF6481B76AC91E66A00AC657A93A81EF3AE6FB`.
	PgpKeyId pulumi.StringPtrInput `pulumi:"pgpKeyId"`
	// The raw content of the signature, as output by GNU Privacy Guard (GPG) or equivalent. Since this message only supports attached signatures, the payload that was signed must be attached. While the signature format supported is dependent on the verification implementation, currently only ASCII-armored (`--armor` to gpg), non-clearsigned (`--sign` rather than `--clearsign` to gpg) are supported. Concretely, `gpg --sign --armor --output=signature.gpg payload.json` will create the signature content expected in this field in `signature.gpg` for the `payload.json` attestation payload.
	Signature pulumi.StringPtrInput `pulumi:"signature"`
}

func (PgpSignedAttestationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PgpSignedAttestation)(nil)).Elem()
}

func (i PgpSignedAttestationArgs) ToPgpSignedAttestationOutput() PgpSignedAttestationOutput {
	return i.ToPgpSignedAttestationOutputWithContext(context.Background())
}

func (i PgpSignedAttestationArgs) ToPgpSignedAttestationOutputWithContext(ctx context.Context) PgpSignedAttestationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PgpSignedAttestationOutput)
}

func (i PgpSignedAttestationArgs) ToPgpSignedAttestationPtrOutput() PgpSignedAttestationPtrOutput {
	return i.ToPgpSignedAttestationPtrOutputWithContext(context.Background())
}

func (i PgpSignedAttestationArgs) ToPgpSignedAttestationPtrOutputWithContext(ctx context.Context) PgpSignedAttestationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PgpSignedAttestationOutput).ToPgpSignedAttestationPtrOutputWithContext(ctx)
}

// PgpSignedAttestationPtrInput is an input type that accepts PgpSignedAttestationArgs, PgpSignedAttestationPtr and PgpSignedAttestationPtrOutput values.
// You can construct a concrete instance of `PgpSignedAttestationPtrInput` via:
//
//          PgpSignedAttestationArgs{...}
//
//  or:
//
//          nil
type PgpSignedAttestationPtrInput interface {
	pulumi.Input

	ToPgpSignedAttestationPtrOutput() PgpSignedAttestationPtrOutput
	ToPgpSignedAttestationPtrOutputWithContext(context.Context) PgpSignedAttestationPtrOutput
}

type pgpSignedAttestationPtrType PgpSignedAttestationArgs

func PgpSignedAttestationPtr(v *PgpSignedAttestationArgs) PgpSignedAttestationPtrInput {
	return (*pgpSignedAttestationPtrType)(v)
}

func (*pgpSignedAttestationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PgpSignedAttestation)(nil)).Elem()
}

func (i *pgpSignedAttestationPtrType) ToPgpSignedAttestationPtrOutput() PgpSignedAttestationPtrOutput {
	return i.ToPgpSignedAttestationPtrOutputWithContext(context.Background())
}

func (i *pgpSignedAttestationPtrType) ToPgpSignedAttestationPtrOutputWithContext(ctx context.Context) PgpSignedAttestationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PgpSignedAttestationPtrOutput)
}

// An attestation wrapper with a PGP-compatible signature. This message only supports `ATTACHED` signatures, where the payload that is signed is included alongside the signature itself in the same file.
type PgpSignedAttestationOutput struct{ *pulumi.OutputState }

func (PgpSignedAttestationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PgpSignedAttestation)(nil)).Elem()
}

func (o PgpSignedAttestationOutput) ToPgpSignedAttestationOutput() PgpSignedAttestationOutput {
	return o
}

func (o PgpSignedAttestationOutput) ToPgpSignedAttestationOutputWithContext(ctx context.Context) PgpSignedAttestationOutput {
	return o
}

func (o PgpSignedAttestationOutput) ToPgpSignedAttestationPtrOutput() PgpSignedAttestationPtrOutput {
	return o.ToPgpSignedAttestationPtrOutputWithContext(context.Background())
}

func (o PgpSignedAttestationOutput) ToPgpSignedAttestationPtrOutputWithContext(ctx context.Context) PgpSignedAttestationPtrOutput {
	return o.ApplyT(func(v PgpSignedAttestation) *PgpSignedAttestation {
		return &v
	}).(PgpSignedAttestationPtrOutput)
}

// Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).
func (o PgpSignedAttestationOutput) ContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PgpSignedAttestation) *string { return v.ContentType }).(pulumi.StringPtrOutput)
}

// The cryptographic fingerprint of the key used to generate the signature, as output by, e.g. `gpg --list-keys`. This should be the version 4, full 160-bit fingerprint, expressed as a 40 character hexadecimal string. See https://tools.ietf.org/html/rfc4880#section-12.2 for details. Implementations may choose to acknowledge "LONG", "SHORT", or other abbreviated key IDs, but only the full fingerprint is guaranteed to work. In gpg, the full fingerprint can be retrieved from the `fpr` field returned when calling --list-keys with --with-colons. For example: ```gpg --with-colons --with-fingerprint --force-v4-certs \ --list-keys attester@example.com tru::1:1513631572:0:3:1:5 pub:...... fpr:::::::::24FF6481B76AC91E66A00AC657A93A81EF3AE6FB:``` Above, the fingerprint is `24FF6481B76AC91E66A00AC657A93A81EF3AE6FB`.
func (o PgpSignedAttestationOutput) PgpKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PgpSignedAttestation) *string { return v.PgpKeyId }).(pulumi.StringPtrOutput)
}

// The raw content of the signature, as output by GNU Privacy Guard (GPG) or equivalent. Since this message only supports attached signatures, the payload that was signed must be attached. While the signature format supported is dependent on the verification implementation, currently only ASCII-armored (`--armor` to gpg), non-clearsigned (`--sign` rather than `--clearsign` to gpg) are supported. Concretely, `gpg --sign --armor --output=signature.gpg payload.json` will create the signature content expected in this field in `signature.gpg` for the `payload.json` attestation payload.
func (o PgpSignedAttestationOutput) Signature() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PgpSignedAttestation) *string { return v.Signature }).(pulumi.StringPtrOutput)
}

type PgpSignedAttestationPtrOutput struct{ *pulumi.OutputState }

func (PgpSignedAttestationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PgpSignedAttestation)(nil)).Elem()
}

func (o PgpSignedAttestationPtrOutput) ToPgpSignedAttestationPtrOutput() PgpSignedAttestationPtrOutput {
	return o
}

func (o PgpSignedAttestationPtrOutput) ToPgpSignedAttestationPtrOutputWithContext(ctx context.Context) PgpSignedAttestationPtrOutput {
	return o
}

func (o PgpSignedAttestationPtrOutput) Elem() PgpSignedAttestationOutput {
	return o.ApplyT(func(v *PgpSignedAttestation) PgpSignedAttestation { return *v }).(PgpSignedAttestationOutput)
}

// Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).
func (o PgpSignedAttestationPtrOutput) ContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PgpSignedAttestation) *string {
		if v == nil {
			return nil
		}
		return v.ContentType
	}).(pulumi.StringPtrOutput)
}

// The cryptographic fingerprint of the key used to generate the signature, as output by, e.g. `gpg --list-keys`. This should be the version 4, full 160-bit fingerprint, expressed as a 40 character hexadecimal string. See https://tools.ietf.org/html/rfc4880#section-12.2 for details. Implementations may choose to acknowledge "LONG", "SHORT", or other abbreviated key IDs, but only the full fingerprint is guaranteed to work. In gpg, the full fingerprint can be retrieved from the `fpr` field returned when calling --list-keys with --with-colons. For example: ```gpg --with-colons --with-fingerprint --force-v4-certs \ --list-keys attester@example.com tru::1:1513631572:0:3:1:5 pub:...... fpr:::::::::24FF6481B76AC91E66A00AC657A93A81EF3AE6FB:``` Above, the fingerprint is `24FF6481B76AC91E66A00AC657A93A81EF3AE6FB`.
func (o PgpSignedAttestationPtrOutput) PgpKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PgpSignedAttestation) *string {
		if v == nil {
			return nil
		}
		return v.PgpKeyId
	}).(pulumi.StringPtrOutput)
}

// The raw content of the signature, as output by GNU Privacy Guard (GPG) or equivalent. Since this message only supports attached signatures, the payload that was signed must be attached. While the signature format supported is dependent on the verification implementation, currently only ASCII-armored (`--armor` to gpg), non-clearsigned (`--sign` rather than `--clearsign` to gpg) are supported. Concretely, `gpg --sign --armor --output=signature.gpg payload.json` will create the signature content expected in this field in `signature.gpg` for the `payload.json` attestation payload.
func (o PgpSignedAttestationPtrOutput) Signature() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PgpSignedAttestation) *string {
		if v == nil {
			return nil
		}
		return v.Signature
	}).(pulumi.StringPtrOutput)
}

// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
type Policy struct {
	// Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
	Bindings []Binding `pulumi:"bindings"`
	// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
	Etag *string `pulumi:"etag"`
	// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Version *int `pulumi:"version"`
}

// PolicyInput is an input type that accepts PolicyArgs and PolicyOutput values.
// You can construct a concrete instance of `PolicyInput` via:
//
//          PolicyArgs{...}
type PolicyInput interface {
	pulumi.Input

	ToPolicyOutput() PolicyOutput
	ToPolicyOutputWithContext(context.Context) PolicyOutput
}

// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
type PolicyArgs struct {
	// Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
	Bindings BindingArrayInput `pulumi:"bindings"`
	// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
	Etag pulumi.StringPtrInput `pulumi:"etag"`
	// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Version pulumi.IntPtrInput `pulumi:"version"`
}

func (PolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Policy)(nil)).Elem()
}

func (i PolicyArgs) ToPolicyOutput() PolicyOutput {
	return i.ToPolicyOutputWithContext(context.Background())
}

func (i PolicyArgs) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyOutput)
}

func (i PolicyArgs) ToPolicyPtrOutput() PolicyPtrOutput {
	return i.ToPolicyPtrOutputWithContext(context.Background())
}

func (i PolicyArgs) ToPolicyPtrOutputWithContext(ctx context.Context) PolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyOutput).ToPolicyPtrOutputWithContext(ctx)
}

// PolicyPtrInput is an input type that accepts PolicyArgs, PolicyPtr and PolicyPtrOutput values.
// You can construct a concrete instance of `PolicyPtrInput` via:
//
//          PolicyArgs{...}
//
//  or:
//
//          nil
type PolicyPtrInput interface {
	pulumi.Input

	ToPolicyPtrOutput() PolicyPtrOutput
	ToPolicyPtrOutputWithContext(context.Context) PolicyPtrOutput
}

type policyPtrType PolicyArgs

func PolicyPtr(v *PolicyArgs) PolicyPtrInput {
	return (*policyPtrType)(v)
}

func (*policyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Policy)(nil)).Elem()
}

func (i *policyPtrType) ToPolicyPtrOutput() PolicyPtrOutput {
	return i.ToPolicyPtrOutputWithContext(context.Background())
}

func (i *policyPtrType) ToPolicyPtrOutputWithContext(ctx context.Context) PolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyPtrOutput)
}

// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
type PolicyOutput struct{ *pulumi.OutputState }

func (PolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Policy)(nil)).Elem()
}

func (o PolicyOutput) ToPolicyOutput() PolicyOutput {
	return o
}

func (o PolicyOutput) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return o
}

func (o PolicyOutput) ToPolicyPtrOutput() PolicyPtrOutput {
	return o.ToPolicyPtrOutputWithContext(context.Background())
}

func (o PolicyOutput) ToPolicyPtrOutputWithContext(ctx context.Context) PolicyPtrOutput {
	return o.ApplyT(func(v Policy) *Policy {
		return &v
	}).(PolicyPtrOutput)
}

// Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
func (o PolicyOutput) Bindings() BindingArrayOutput {
	return o.ApplyT(func(v Policy) []Binding { return v.Bindings }).(BindingArrayOutput)
}

// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
func (o PolicyOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Policy) *string { return v.Etag }).(pulumi.StringPtrOutput)
}

// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o PolicyOutput) Version() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Policy) *int { return v.Version }).(pulumi.IntPtrOutput)
}

type PolicyPtrOutput struct{ *pulumi.OutputState }

func (PolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Policy)(nil)).Elem()
}

func (o PolicyPtrOutput) ToPolicyPtrOutput() PolicyPtrOutput {
	return o
}

func (o PolicyPtrOutput) ToPolicyPtrOutputWithContext(ctx context.Context) PolicyPtrOutput {
	return o
}

func (o PolicyPtrOutput) Elem() PolicyOutput {
	return o.ApplyT(func(v *Policy) Policy { return *v }).(PolicyOutput)
}

// Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
func (o PolicyPtrOutput) Bindings() BindingArrayOutput {
	return o.ApplyT(func(v *Policy) []Binding {
		if v == nil {
			return nil
		}
		return v.Bindings
	}).(BindingArrayOutput)
}

// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
func (o PolicyPtrOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Policy) *string {
		if v == nil {
			return nil
		}
		return v.Etag
	}).(pulumi.StringPtrOutput)
}

// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o PolicyPtrOutput) Version() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Policy) *int {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.IntPtrOutput)
}

// Metadata for any related URL information
type RelatedUrl struct {
	// Label to describe usage of the URL
	Label *string `pulumi:"label"`
	// Specific URL to associate with the note
	Url *string `pulumi:"url"`
}

// RelatedUrlInput is an input type that accepts RelatedUrlArgs and RelatedUrlOutput values.
// You can construct a concrete instance of `RelatedUrlInput` via:
//
//          RelatedUrlArgs{...}
type RelatedUrlInput interface {
	pulumi.Input

	ToRelatedUrlOutput() RelatedUrlOutput
	ToRelatedUrlOutputWithContext(context.Context) RelatedUrlOutput
}

// Metadata for any related URL information
type RelatedUrlArgs struct {
	// Label to describe usage of the URL
	Label pulumi.StringPtrInput `pulumi:"label"`
	// Specific URL to associate with the note
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (RelatedUrlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RelatedUrl)(nil)).Elem()
}

func (i RelatedUrlArgs) ToRelatedUrlOutput() RelatedUrlOutput {
	return i.ToRelatedUrlOutputWithContext(context.Background())
}

func (i RelatedUrlArgs) ToRelatedUrlOutputWithContext(ctx context.Context) RelatedUrlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelatedUrlOutput)
}

// RelatedUrlArrayInput is an input type that accepts RelatedUrlArray and RelatedUrlArrayOutput values.
// You can construct a concrete instance of `RelatedUrlArrayInput` via:
//
//          RelatedUrlArray{ RelatedUrlArgs{...} }
type RelatedUrlArrayInput interface {
	pulumi.Input

	ToRelatedUrlArrayOutput() RelatedUrlArrayOutput
	ToRelatedUrlArrayOutputWithContext(context.Context) RelatedUrlArrayOutput
}

type RelatedUrlArray []RelatedUrlInput

func (RelatedUrlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RelatedUrl)(nil)).Elem()
}

func (i RelatedUrlArray) ToRelatedUrlArrayOutput() RelatedUrlArrayOutput {
	return i.ToRelatedUrlArrayOutputWithContext(context.Background())
}

func (i RelatedUrlArray) ToRelatedUrlArrayOutputWithContext(ctx context.Context) RelatedUrlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelatedUrlArrayOutput)
}

// Metadata for any related URL information
type RelatedUrlOutput struct{ *pulumi.OutputState }

func (RelatedUrlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RelatedUrl)(nil)).Elem()
}

func (o RelatedUrlOutput) ToRelatedUrlOutput() RelatedUrlOutput {
	return o
}

func (o RelatedUrlOutput) ToRelatedUrlOutputWithContext(ctx context.Context) RelatedUrlOutput {
	return o
}

// Label to describe usage of the URL
func (o RelatedUrlOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RelatedUrl) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// Specific URL to associate with the note
func (o RelatedUrlOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RelatedUrl) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type RelatedUrlArrayOutput struct{ *pulumi.OutputState }

func (RelatedUrlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RelatedUrl)(nil)).Elem()
}

func (o RelatedUrlArrayOutput) ToRelatedUrlArrayOutput() RelatedUrlArrayOutput {
	return o
}

func (o RelatedUrlArrayOutput) ToRelatedUrlArrayOutputWithContext(ctx context.Context) RelatedUrlArrayOutput {
	return o
}

func (o RelatedUrlArrayOutput) Index(i pulumi.IntInput) RelatedUrlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RelatedUrl {
		return vs[0].([]RelatedUrl)[vs[1].(int)]
	}).(RelatedUrlOutput)
}

// RepoSource describes the location of the source in a Google Cloud Source Repository.
type RepoSource struct {
	// Name of the branch to build.
	BranchName *string `pulumi:"branchName"`
	// Explicit commit SHA to build.
	CommitSha *string `pulumi:"commitSha"`
	// ID of the project that owns the repo.
	ProjectId *string `pulumi:"projectId"`
	// Name of the repo.
	RepoName *string `pulumi:"repoName"`
	// Name of the tag to build.
	TagName *string `pulumi:"tagName"`
}

// RepoSourceInput is an input type that accepts RepoSourceArgs and RepoSourceOutput values.
// You can construct a concrete instance of `RepoSourceInput` via:
//
//          RepoSourceArgs{...}
type RepoSourceInput interface {
	pulumi.Input

	ToRepoSourceOutput() RepoSourceOutput
	ToRepoSourceOutputWithContext(context.Context) RepoSourceOutput
}

// RepoSource describes the location of the source in a Google Cloud Source Repository.
type RepoSourceArgs struct {
	// Name of the branch to build.
	BranchName pulumi.StringPtrInput `pulumi:"branchName"`
	// Explicit commit SHA to build.
	CommitSha pulumi.StringPtrInput `pulumi:"commitSha"`
	// ID of the project that owns the repo.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// Name of the repo.
	RepoName pulumi.StringPtrInput `pulumi:"repoName"`
	// Name of the tag to build.
	TagName pulumi.StringPtrInput `pulumi:"tagName"`
}

func (RepoSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepoSource)(nil)).Elem()
}

func (i RepoSourceArgs) ToRepoSourceOutput() RepoSourceOutput {
	return i.ToRepoSourceOutputWithContext(context.Background())
}

func (i RepoSourceArgs) ToRepoSourceOutputWithContext(ctx context.Context) RepoSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepoSourceOutput)
}

func (i RepoSourceArgs) ToRepoSourcePtrOutput() RepoSourcePtrOutput {
	return i.ToRepoSourcePtrOutputWithContext(context.Background())
}

func (i RepoSourceArgs) ToRepoSourcePtrOutputWithContext(ctx context.Context) RepoSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepoSourceOutput).ToRepoSourcePtrOutputWithContext(ctx)
}

// RepoSourcePtrInput is an input type that accepts RepoSourceArgs, RepoSourcePtr and RepoSourcePtrOutput values.
// You can construct a concrete instance of `RepoSourcePtrInput` via:
//
//          RepoSourceArgs{...}
//
//  or:
//
//          nil
type RepoSourcePtrInput interface {
	pulumi.Input

	ToRepoSourcePtrOutput() RepoSourcePtrOutput
	ToRepoSourcePtrOutputWithContext(context.Context) RepoSourcePtrOutput
}

type repoSourcePtrType RepoSourceArgs

func RepoSourcePtr(v *RepoSourceArgs) RepoSourcePtrInput {
	return (*repoSourcePtrType)(v)
}

func (*repoSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepoSource)(nil)).Elem()
}

func (i *repoSourcePtrType) ToRepoSourcePtrOutput() RepoSourcePtrOutput {
	return i.ToRepoSourcePtrOutputWithContext(context.Background())
}

func (i *repoSourcePtrType) ToRepoSourcePtrOutputWithContext(ctx context.Context) RepoSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepoSourcePtrOutput)
}

// RepoSource describes the location of the source in a Google Cloud Source Repository.
type RepoSourceOutput struct{ *pulumi.OutputState }

func (RepoSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepoSource)(nil)).Elem()
}

func (o RepoSourceOutput) ToRepoSourceOutput() RepoSourceOutput {
	return o
}

func (o RepoSourceOutput) ToRepoSourceOutputWithContext(ctx context.Context) RepoSourceOutput {
	return o
}

func (o RepoSourceOutput) ToRepoSourcePtrOutput() RepoSourcePtrOutput {
	return o.ToRepoSourcePtrOutputWithContext(context.Background())
}

func (o RepoSourceOutput) ToRepoSourcePtrOutputWithContext(ctx context.Context) RepoSourcePtrOutput {
	return o.ApplyT(func(v RepoSource) *RepoSource {
		return &v
	}).(RepoSourcePtrOutput)
}

// Name of the branch to build.
func (o RepoSourceOutput) BranchName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepoSource) *string { return v.BranchName }).(pulumi.StringPtrOutput)
}

// Explicit commit SHA to build.
func (o RepoSourceOutput) CommitSha() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepoSource) *string { return v.CommitSha }).(pulumi.StringPtrOutput)
}

// ID of the project that owns the repo.
func (o RepoSourceOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepoSource) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Name of the repo.
func (o RepoSourceOutput) RepoName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepoSource) *string { return v.RepoName }).(pulumi.StringPtrOutput)
}

// Name of the tag to build.
func (o RepoSourceOutput) TagName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepoSource) *string { return v.TagName }).(pulumi.StringPtrOutput)
}

type RepoSourcePtrOutput struct{ *pulumi.OutputState }

func (RepoSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepoSource)(nil)).Elem()
}

func (o RepoSourcePtrOutput) ToRepoSourcePtrOutput() RepoSourcePtrOutput {
	return o
}

func (o RepoSourcePtrOutput) ToRepoSourcePtrOutputWithContext(ctx context.Context) RepoSourcePtrOutput {
	return o
}

func (o RepoSourcePtrOutput) Elem() RepoSourceOutput {
	return o.ApplyT(func(v *RepoSource) RepoSource { return *v }).(RepoSourceOutput)
}

// Name of the branch to build.
func (o RepoSourcePtrOutput) BranchName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepoSource) *string {
		if v == nil {
			return nil
		}
		return v.BranchName
	}).(pulumi.StringPtrOutput)
}

// Explicit commit SHA to build.
func (o RepoSourcePtrOutput) CommitSha() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepoSource) *string {
		if v == nil {
			return nil
		}
		return v.CommitSha
	}).(pulumi.StringPtrOutput)
}

// ID of the project that owns the repo.
func (o RepoSourcePtrOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepoSource) *string {
		if v == nil {
			return nil
		}
		return v.ProjectId
	}).(pulumi.StringPtrOutput)
}

// Name of the repo.
func (o RepoSourcePtrOutput) RepoName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepoSource) *string {
		if v == nil {
			return nil
		}
		return v.RepoName
	}).(pulumi.StringPtrOutput)
}

// Name of the tag to build.
func (o RepoSourcePtrOutput) TagName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepoSource) *string {
		if v == nil {
			return nil
		}
		return v.TagName
	}).(pulumi.StringPtrOutput)
}

//  Resource is an entity that can have metadata. E.g., a Docker image.
type Resource struct {
	// The hash of the resource content. E.g., the Docker digest.
	ContentHash *Hash `pulumi:"contentHash"`
	// The name of the resource. E.g., the name of a Docker image - "Debian".
	Name *string `pulumi:"name"`
	// The unique URI of the resource. E.g., "https://gcr.io/project/image@sha256:foo" for a Docker image.
	Uri *string `pulumi:"uri"`
}

// ResourceInput is an input type that accepts ResourceArgs and ResourceOutput values.
// You can construct a concrete instance of `ResourceInput` via:
//
//          ResourceArgs{...}
type ResourceInput interface {
	pulumi.Input

	ToResourceOutput() ResourceOutput
	ToResourceOutputWithContext(context.Context) ResourceOutput
}

//  Resource is an entity that can have metadata. E.g., a Docker image.
type ResourceArgs struct {
	// The hash of the resource content. E.g., the Docker digest.
	ContentHash HashPtrInput `pulumi:"contentHash"`
	// The name of the resource. E.g., the name of a Docker image - "Debian".
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The unique URI of the resource. E.g., "https://gcr.io/project/image@sha256:foo" for a Docker image.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

func (ResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Resource)(nil)).Elem()
}

func (i ResourceArgs) ToResourceOutput() ResourceOutput {
	return i.ToResourceOutputWithContext(context.Background())
}

func (i ResourceArgs) ToResourceOutputWithContext(ctx context.Context) ResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceOutput)
}

func (i ResourceArgs) ToResourcePtrOutput() ResourcePtrOutput {
	return i.ToResourcePtrOutputWithContext(context.Background())
}

func (i ResourceArgs) ToResourcePtrOutputWithContext(ctx context.Context) ResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceOutput).ToResourcePtrOutputWithContext(ctx)
}

// ResourcePtrInput is an input type that accepts ResourceArgs, ResourcePtr and ResourcePtrOutput values.
// You can construct a concrete instance of `ResourcePtrInput` via:
//
//          ResourceArgs{...}
//
//  or:
//
//          nil
type ResourcePtrInput interface {
	pulumi.Input

	ToResourcePtrOutput() ResourcePtrOutput
	ToResourcePtrOutputWithContext(context.Context) ResourcePtrOutput
}

type resourcePtrType ResourceArgs

func ResourcePtr(v *ResourceArgs) ResourcePtrInput {
	return (*resourcePtrType)(v)
}

func (*resourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Resource)(nil)).Elem()
}

func (i *resourcePtrType) ToResourcePtrOutput() ResourcePtrOutput {
	return i.ToResourcePtrOutputWithContext(context.Background())
}

func (i *resourcePtrType) ToResourcePtrOutputWithContext(ctx context.Context) ResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePtrOutput)
}

//  Resource is an entity that can have metadata. E.g., a Docker image.
type ResourceOutput struct{ *pulumi.OutputState }

func (ResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Resource)(nil)).Elem()
}

func (o ResourceOutput) ToResourceOutput() ResourceOutput {
	return o
}

func (o ResourceOutput) ToResourceOutputWithContext(ctx context.Context) ResourceOutput {
	return o
}

func (o ResourceOutput) ToResourcePtrOutput() ResourcePtrOutput {
	return o.ToResourcePtrOutputWithContext(context.Background())
}

func (o ResourceOutput) ToResourcePtrOutputWithContext(ctx context.Context) ResourcePtrOutput {
	return o.ApplyT(func(v Resource) *Resource {
		return &v
	}).(ResourcePtrOutput)
}

// The hash of the resource content. E.g., the Docker digest.
func (o ResourceOutput) ContentHash() HashPtrOutput {
	return o.ApplyT(func(v Resource) *Hash { return v.ContentHash }).(HashPtrOutput)
}

// The name of the resource. E.g., the name of a Docker image - "Debian".
func (o ResourceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Resource) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The unique URI of the resource. E.g., "https://gcr.io/project/image@sha256:foo" for a Docker image.
func (o ResourceOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Resource) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type ResourcePtrOutput struct{ *pulumi.OutputState }

func (ResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Resource)(nil)).Elem()
}

func (o ResourcePtrOutput) ToResourcePtrOutput() ResourcePtrOutput {
	return o
}

func (o ResourcePtrOutput) ToResourcePtrOutputWithContext(ctx context.Context) ResourcePtrOutput {
	return o
}

func (o ResourcePtrOutput) Elem() ResourceOutput {
	return o.ApplyT(func(v *Resource) Resource { return *v }).(ResourceOutput)
}

// The hash of the resource content. E.g., the Docker digest.
func (o ResourcePtrOutput) ContentHash() HashPtrOutput {
	return o.ApplyT(func(v *Resource) *Hash {
		if v == nil {
			return nil
		}
		return v.ContentHash
	}).(HashPtrOutput)
}

// The name of the resource. E.g., the name of a Docker image - "Debian".
func (o ResourcePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Resource) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The unique URI of the resource. E.g., "https://gcr.io/project/image@sha256:foo" for a Docker image.
func (o ResourcePtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Resource) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

// Source describes the location of the source used for the build.
type Source struct {
	// If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field.
	AdditionalContexts []GoogleDevtoolsContaineranalysisV1alpha1SourceContext `pulumi:"additionalContexts"`
	// If provided, the input binary artifacts for the build came from this location.
	ArtifactStorageSource *StorageSource `pulumi:"artifactStorageSource"`
	// If provided, the source code used for the build came from this location.
	Context *GoogleDevtoolsContaineranalysisV1alpha1SourceContext `pulumi:"context"`
	// Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file.
	FileHashes map[string]string `pulumi:"fileHashes"`
	// If provided, get source from this location in a Cloud Repo.
	RepoSource *RepoSource `pulumi:"repoSource"`
	// If provided, get the source from this location in in Google Cloud Storage.
	StorageSource *StorageSource `pulumi:"storageSource"`
}

// SourceInput is an input type that accepts SourceArgs and SourceOutput values.
// You can construct a concrete instance of `SourceInput` via:
//
//          SourceArgs{...}
type SourceInput interface {
	pulumi.Input

	ToSourceOutput() SourceOutput
	ToSourceOutputWithContext(context.Context) SourceOutput
}

// Source describes the location of the source used for the build.
type SourceArgs struct {
	// If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field.
	AdditionalContexts GoogleDevtoolsContaineranalysisV1alpha1SourceContextArrayInput `pulumi:"additionalContexts"`
	// If provided, the input binary artifacts for the build came from this location.
	ArtifactStorageSource StorageSourcePtrInput `pulumi:"artifactStorageSource"`
	// If provided, the source code used for the build came from this location.
	Context GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrInput `pulumi:"context"`
	// Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file.
	FileHashes pulumi.StringMapInput `pulumi:"fileHashes"`
	// If provided, get source from this location in a Cloud Repo.
	RepoSource RepoSourcePtrInput `pulumi:"repoSource"`
	// If provided, get the source from this location in in Google Cloud Storage.
	StorageSource StorageSourcePtrInput `pulumi:"storageSource"`
}

func (SourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Source)(nil)).Elem()
}

func (i SourceArgs) ToSourceOutput() SourceOutput {
	return i.ToSourceOutputWithContext(context.Background())
}

func (i SourceArgs) ToSourceOutputWithContext(ctx context.Context) SourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceOutput)
}

func (i SourceArgs) ToSourcePtrOutput() SourcePtrOutput {
	return i.ToSourcePtrOutputWithContext(context.Background())
}

func (i SourceArgs) ToSourcePtrOutputWithContext(ctx context.Context) SourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceOutput).ToSourcePtrOutputWithContext(ctx)
}

// SourcePtrInput is an input type that accepts SourceArgs, SourcePtr and SourcePtrOutput values.
// You can construct a concrete instance of `SourcePtrInput` via:
//
//          SourceArgs{...}
//
//  or:
//
//          nil
type SourcePtrInput interface {
	pulumi.Input

	ToSourcePtrOutput() SourcePtrOutput
	ToSourcePtrOutputWithContext(context.Context) SourcePtrOutput
}

type sourcePtrType SourceArgs

func SourcePtr(v *SourceArgs) SourcePtrInput {
	return (*sourcePtrType)(v)
}

func (*sourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Source)(nil)).Elem()
}

func (i *sourcePtrType) ToSourcePtrOutput() SourcePtrOutput {
	return i.ToSourcePtrOutputWithContext(context.Background())
}

func (i *sourcePtrType) ToSourcePtrOutputWithContext(ctx context.Context) SourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourcePtrOutput)
}

// Source describes the location of the source used for the build.
type SourceOutput struct{ *pulumi.OutputState }

func (SourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Source)(nil)).Elem()
}

func (o SourceOutput) ToSourceOutput() SourceOutput {
	return o
}

func (o SourceOutput) ToSourceOutputWithContext(ctx context.Context) SourceOutput {
	return o
}

func (o SourceOutput) ToSourcePtrOutput() SourcePtrOutput {
	return o.ToSourcePtrOutputWithContext(context.Background())
}

func (o SourceOutput) ToSourcePtrOutputWithContext(ctx context.Context) SourcePtrOutput {
	return o.ApplyT(func(v Source) *Source {
		return &v
	}).(SourcePtrOutput)
}

// If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field.
func (o SourceOutput) AdditionalContexts() GoogleDevtoolsContaineranalysisV1alpha1SourceContextArrayOutput {
	return o.ApplyT(func(v Source) []GoogleDevtoolsContaineranalysisV1alpha1SourceContext { return v.AdditionalContexts }).(GoogleDevtoolsContaineranalysisV1alpha1SourceContextArrayOutput)
}

// If provided, the input binary artifacts for the build came from this location.
func (o SourceOutput) ArtifactStorageSource() StorageSourcePtrOutput {
	return o.ApplyT(func(v Source) *StorageSource { return v.ArtifactStorageSource }).(StorageSourcePtrOutput)
}

// If provided, the source code used for the build came from this location.
func (o SourceOutput) Context() GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput {
	return o.ApplyT(func(v Source) *GoogleDevtoolsContaineranalysisV1alpha1SourceContext { return v.Context }).(GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput)
}

// Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file.
func (o SourceOutput) FileHashes() pulumi.StringMapOutput {
	return o.ApplyT(func(v Source) map[string]string { return v.FileHashes }).(pulumi.StringMapOutput)
}

// If provided, get source from this location in a Cloud Repo.
func (o SourceOutput) RepoSource() RepoSourcePtrOutput {
	return o.ApplyT(func(v Source) *RepoSource { return v.RepoSource }).(RepoSourcePtrOutput)
}

// If provided, get the source from this location in in Google Cloud Storage.
func (o SourceOutput) StorageSource() StorageSourcePtrOutput {
	return o.ApplyT(func(v Source) *StorageSource { return v.StorageSource }).(StorageSourcePtrOutput)
}

type SourcePtrOutput struct{ *pulumi.OutputState }

func (SourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Source)(nil)).Elem()
}

func (o SourcePtrOutput) ToSourcePtrOutput() SourcePtrOutput {
	return o
}

func (o SourcePtrOutput) ToSourcePtrOutputWithContext(ctx context.Context) SourcePtrOutput {
	return o
}

func (o SourcePtrOutput) Elem() SourceOutput {
	return o.ApplyT(func(v *Source) Source { return *v }).(SourceOutput)
}

// If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field.
func (o SourcePtrOutput) AdditionalContexts() GoogleDevtoolsContaineranalysisV1alpha1SourceContextArrayOutput {
	return o.ApplyT(func(v *Source) []GoogleDevtoolsContaineranalysisV1alpha1SourceContext {
		if v == nil {
			return nil
		}
		return v.AdditionalContexts
	}).(GoogleDevtoolsContaineranalysisV1alpha1SourceContextArrayOutput)
}

// If provided, the input binary artifacts for the build came from this location.
func (o SourcePtrOutput) ArtifactStorageSource() StorageSourcePtrOutput {
	return o.ApplyT(func(v *Source) *StorageSource {
		if v == nil {
			return nil
		}
		return v.ArtifactStorageSource
	}).(StorageSourcePtrOutput)
}

// If provided, the source code used for the build came from this location.
func (o SourcePtrOutput) Context() GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput {
	return o.ApplyT(func(v *Source) *GoogleDevtoolsContaineranalysisV1alpha1SourceContext {
		if v == nil {
			return nil
		}
		return v.Context
	}).(GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput)
}

// Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file.
func (o SourcePtrOutput) FileHashes() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Source) map[string]string {
		if v == nil {
			return nil
		}
		return v.FileHashes
	}).(pulumi.StringMapOutput)
}

// If provided, get source from this location in a Cloud Repo.
func (o SourcePtrOutput) RepoSource() RepoSourcePtrOutput {
	return o.ApplyT(func(v *Source) *RepoSource {
		if v == nil {
			return nil
		}
		return v.RepoSource
	}).(RepoSourcePtrOutput)
}

// If provided, get the source from this location in in Google Cloud Storage.
func (o SourcePtrOutput) StorageSource() StorageSourcePtrOutput {
	return o.ApplyT(func(v *Source) *StorageSource {
		if v == nil {
			return nil
		}
		return v.StorageSource
	}).(StorageSourcePtrOutput)
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type Status struct {
	// The status code, which should be an enum value of google.rpc.Code.
	Code *int `pulumi:"code"`
	// A list of messages that carry the error details. There is a common set of message types for APIs to use.
	Details []map[string]string `pulumi:"details"`
	// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
	Message *string `pulumi:"message"`
}

// StatusInput is an input type that accepts StatusArgs and StatusOutput values.
// You can construct a concrete instance of `StatusInput` via:
//
//          StatusArgs{...}
type StatusInput interface {
	pulumi.Input

	ToStatusOutput() StatusOutput
	ToStatusOutputWithContext(context.Context) StatusOutput
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type StatusArgs struct {
	// The status code, which should be an enum value of google.rpc.Code.
	Code pulumi.IntPtrInput `pulumi:"code"`
	// A list of messages that carry the error details. There is a common set of message types for APIs to use.
	Details pulumi.StringMapArrayInput `pulumi:"details"`
	// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
	Message pulumi.StringPtrInput `pulumi:"message"`
}

func (StatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Status)(nil)).Elem()
}

func (i StatusArgs) ToStatusOutput() StatusOutput {
	return i.ToStatusOutputWithContext(context.Background())
}

func (i StatusArgs) ToStatusOutputWithContext(ctx context.Context) StatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusOutput)
}

func (i StatusArgs) ToStatusPtrOutput() StatusPtrOutput {
	return i.ToStatusPtrOutputWithContext(context.Background())
}

func (i StatusArgs) ToStatusPtrOutputWithContext(ctx context.Context) StatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusOutput).ToStatusPtrOutputWithContext(ctx)
}

// StatusPtrInput is an input type that accepts StatusArgs, StatusPtr and StatusPtrOutput values.
// You can construct a concrete instance of `StatusPtrInput` via:
//
//          StatusArgs{...}
//
//  or:
//
//          nil
type StatusPtrInput interface {
	pulumi.Input

	ToStatusPtrOutput() StatusPtrOutput
	ToStatusPtrOutputWithContext(context.Context) StatusPtrOutput
}

type statusPtrType StatusArgs

func StatusPtr(v *StatusArgs) StatusPtrInput {
	return (*statusPtrType)(v)
}

func (*statusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Status)(nil)).Elem()
}

func (i *statusPtrType) ToStatusPtrOutput() StatusPtrOutput {
	return i.ToStatusPtrOutputWithContext(context.Background())
}

func (i *statusPtrType) ToStatusPtrOutputWithContext(ctx context.Context) StatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusPtrOutput)
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type StatusOutput struct{ *pulumi.OutputState }

func (StatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Status)(nil)).Elem()
}

func (o StatusOutput) ToStatusOutput() StatusOutput {
	return o
}

func (o StatusOutput) ToStatusOutputWithContext(ctx context.Context) StatusOutput {
	return o
}

func (o StatusOutput) ToStatusPtrOutput() StatusPtrOutput {
	return o.ToStatusPtrOutputWithContext(context.Background())
}

func (o StatusOutput) ToStatusPtrOutputWithContext(ctx context.Context) StatusPtrOutput {
	return o.ApplyT(func(v Status) *Status {
		return &v
	}).(StatusPtrOutput)
}

// The status code, which should be an enum value of google.rpc.Code.
func (o StatusOutput) Code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Status) *int { return v.Code }).(pulumi.IntPtrOutput)
}

// A list of messages that carry the error details. There is a common set of message types for APIs to use.
func (o StatusOutput) Details() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v Status) []map[string]string { return v.Details }).(pulumi.StringMapArrayOutput)
}

// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
func (o StatusOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Status) *string { return v.Message }).(pulumi.StringPtrOutput)
}

type StatusPtrOutput struct{ *pulumi.OutputState }

func (StatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Status)(nil)).Elem()
}

func (o StatusPtrOutput) ToStatusPtrOutput() StatusPtrOutput {
	return o
}

func (o StatusPtrOutput) ToStatusPtrOutputWithContext(ctx context.Context) StatusPtrOutput {
	return o
}

func (o StatusPtrOutput) Elem() StatusOutput {
	return o.ApplyT(func(v *Status) Status { return *v }).(StatusOutput)
}

// The status code, which should be an enum value of google.rpc.Code.
func (o StatusPtrOutput) Code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Status) *int {
		if v == nil {
			return nil
		}
		return v.Code
	}).(pulumi.IntPtrOutput)
}

// A list of messages that carry the error details. There is a common set of message types for APIs to use.
func (o StatusPtrOutput) Details() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v *Status) []map[string]string {
		if v == nil {
			return nil
		}
		return v.Details
	}).(pulumi.StringMapArrayOutput)
}

// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
func (o StatusPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Status) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// StorageSource describes the location of the source in an archive file in Google Cloud Storage.
type StorageSource struct {
	// Google Cloud Storage bucket containing source (see [Bucket Name Requirements] (https://cloud.google.com/storage/docs/bucket-naming#requirements)).
	Bucket *string `pulumi:"bucket"`
	// Google Cloud Storage generation for the object.
	Generation *string `pulumi:"generation"`
	// Google Cloud Storage object containing source.
	Object *string `pulumi:"object"`
}

// StorageSourceInput is an input type that accepts StorageSourceArgs and StorageSourceOutput values.
// You can construct a concrete instance of `StorageSourceInput` via:
//
//          StorageSourceArgs{...}
type StorageSourceInput interface {
	pulumi.Input

	ToStorageSourceOutput() StorageSourceOutput
	ToStorageSourceOutputWithContext(context.Context) StorageSourceOutput
}

// StorageSource describes the location of the source in an archive file in Google Cloud Storage.
type StorageSourceArgs struct {
	// Google Cloud Storage bucket containing source (see [Bucket Name Requirements] (https://cloud.google.com/storage/docs/bucket-naming#requirements)).
	Bucket pulumi.StringPtrInput `pulumi:"bucket"`
	// Google Cloud Storage generation for the object.
	Generation pulumi.StringPtrInput `pulumi:"generation"`
	// Google Cloud Storage object containing source.
	Object pulumi.StringPtrInput `pulumi:"object"`
}

func (StorageSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageSource)(nil)).Elem()
}

func (i StorageSourceArgs) ToStorageSourceOutput() StorageSourceOutput {
	return i.ToStorageSourceOutputWithContext(context.Background())
}

func (i StorageSourceArgs) ToStorageSourceOutputWithContext(ctx context.Context) StorageSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageSourceOutput)
}

func (i StorageSourceArgs) ToStorageSourcePtrOutput() StorageSourcePtrOutput {
	return i.ToStorageSourcePtrOutputWithContext(context.Background())
}

func (i StorageSourceArgs) ToStorageSourcePtrOutputWithContext(ctx context.Context) StorageSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageSourceOutput).ToStorageSourcePtrOutputWithContext(ctx)
}

// StorageSourcePtrInput is an input type that accepts StorageSourceArgs, StorageSourcePtr and StorageSourcePtrOutput values.
// You can construct a concrete instance of `StorageSourcePtrInput` via:
//
//          StorageSourceArgs{...}
//
//  or:
//
//          nil
type StorageSourcePtrInput interface {
	pulumi.Input

	ToStorageSourcePtrOutput() StorageSourcePtrOutput
	ToStorageSourcePtrOutputWithContext(context.Context) StorageSourcePtrOutput
}

type storageSourcePtrType StorageSourceArgs

func StorageSourcePtr(v *StorageSourceArgs) StorageSourcePtrInput {
	return (*storageSourcePtrType)(v)
}

func (*storageSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageSource)(nil)).Elem()
}

func (i *storageSourcePtrType) ToStorageSourcePtrOutput() StorageSourcePtrOutput {
	return i.ToStorageSourcePtrOutputWithContext(context.Background())
}

func (i *storageSourcePtrType) ToStorageSourcePtrOutputWithContext(ctx context.Context) StorageSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageSourcePtrOutput)
}

// StorageSource describes the location of the source in an archive file in Google Cloud Storage.
type StorageSourceOutput struct{ *pulumi.OutputState }

func (StorageSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageSource)(nil)).Elem()
}

func (o StorageSourceOutput) ToStorageSourceOutput() StorageSourceOutput {
	return o
}

func (o StorageSourceOutput) ToStorageSourceOutputWithContext(ctx context.Context) StorageSourceOutput {
	return o
}

func (o StorageSourceOutput) ToStorageSourcePtrOutput() StorageSourcePtrOutput {
	return o.ToStorageSourcePtrOutputWithContext(context.Background())
}

func (o StorageSourceOutput) ToStorageSourcePtrOutputWithContext(ctx context.Context) StorageSourcePtrOutput {
	return o.ApplyT(func(v StorageSource) *StorageSource {
		return &v
	}).(StorageSourcePtrOutput)
}

// Google Cloud Storage bucket containing source (see [Bucket Name Requirements] (https://cloud.google.com/storage/docs/bucket-naming#requirements)).
func (o StorageSourceOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageSource) *string { return v.Bucket }).(pulumi.StringPtrOutput)
}

// Google Cloud Storage generation for the object.
func (o StorageSourceOutput) Generation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageSource) *string { return v.Generation }).(pulumi.StringPtrOutput)
}

// Google Cloud Storage object containing source.
func (o StorageSourceOutput) Object() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageSource) *string { return v.Object }).(pulumi.StringPtrOutput)
}

type StorageSourcePtrOutput struct{ *pulumi.OutputState }

func (StorageSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageSource)(nil)).Elem()
}

func (o StorageSourcePtrOutput) ToStorageSourcePtrOutput() StorageSourcePtrOutput {
	return o
}

func (o StorageSourcePtrOutput) ToStorageSourcePtrOutputWithContext(ctx context.Context) StorageSourcePtrOutput {
	return o
}

func (o StorageSourcePtrOutput) Elem() StorageSourceOutput {
	return o.ApplyT(func(v *StorageSource) StorageSource { return *v }).(StorageSourceOutput)
}

// Google Cloud Storage bucket containing source (see [Bucket Name Requirements] (https://cloud.google.com/storage/docs/bucket-naming#requirements)).
func (o StorageSourcePtrOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageSource) *string {
		if v == nil {
			return nil
		}
		return v.Bucket
	}).(pulumi.StringPtrOutput)
}

// Google Cloud Storage generation for the object.
func (o StorageSourcePtrOutput) Generation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageSource) *string {
		if v == nil {
			return nil
		}
		return v.Generation
	}).(pulumi.StringPtrOutput)
}

// Google Cloud Storage object containing source.
func (o StorageSourcePtrOutput) Object() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageSource) *string {
		if v == nil {
			return nil
		}
		return v.Object
	}).(pulumi.StringPtrOutput)
}

// The Upgrade Distribution represents metadata about the Upgrade for each operating system (CPE). Some distributions have additional metadata around updates, classifying them into various categories and severities.
type UpgradeDistribution struct {
	// The operating system classification of this Upgrade, as specified by the upstream operating system upgrade feed.
	Classification *string `pulumi:"classification"`
	// Required - The specific operating system this metadata applies to. See https://cpe.mitre.org/specification/.
	CpeUri *string `pulumi:"cpeUri"`
	// The cve that would be resolved by this upgrade.
	Cve []string `pulumi:"cve"`
	// The severity as specified by the upstream operating system.
	Severity *string `pulumi:"severity"`
}

// UpgradeDistributionInput is an input type that accepts UpgradeDistributionArgs and UpgradeDistributionOutput values.
// You can construct a concrete instance of `UpgradeDistributionInput` via:
//
//          UpgradeDistributionArgs{...}
type UpgradeDistributionInput interface {
	pulumi.Input

	ToUpgradeDistributionOutput() UpgradeDistributionOutput
	ToUpgradeDistributionOutputWithContext(context.Context) UpgradeDistributionOutput
}

// The Upgrade Distribution represents metadata about the Upgrade for each operating system (CPE). Some distributions have additional metadata around updates, classifying them into various categories and severities.
type UpgradeDistributionArgs struct {
	// The operating system classification of this Upgrade, as specified by the upstream operating system upgrade feed.
	Classification pulumi.StringPtrInput `pulumi:"classification"`
	// Required - The specific operating system this metadata applies to. See https://cpe.mitre.org/specification/.
	CpeUri pulumi.StringPtrInput `pulumi:"cpeUri"`
	// The cve that would be resolved by this upgrade.
	Cve pulumi.StringArrayInput `pulumi:"cve"`
	// The severity as specified by the upstream operating system.
	Severity pulumi.StringPtrInput `pulumi:"severity"`
}

func (UpgradeDistributionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UpgradeDistribution)(nil)).Elem()
}

func (i UpgradeDistributionArgs) ToUpgradeDistributionOutput() UpgradeDistributionOutput {
	return i.ToUpgradeDistributionOutputWithContext(context.Background())
}

func (i UpgradeDistributionArgs) ToUpgradeDistributionOutputWithContext(ctx context.Context) UpgradeDistributionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradeDistributionOutput)
}

func (i UpgradeDistributionArgs) ToUpgradeDistributionPtrOutput() UpgradeDistributionPtrOutput {
	return i.ToUpgradeDistributionPtrOutputWithContext(context.Background())
}

func (i UpgradeDistributionArgs) ToUpgradeDistributionPtrOutputWithContext(ctx context.Context) UpgradeDistributionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradeDistributionOutput).ToUpgradeDistributionPtrOutputWithContext(ctx)
}

// UpgradeDistributionPtrInput is an input type that accepts UpgradeDistributionArgs, UpgradeDistributionPtr and UpgradeDistributionPtrOutput values.
// You can construct a concrete instance of `UpgradeDistributionPtrInput` via:
//
//          UpgradeDistributionArgs{...}
//
//  or:
//
//          nil
type UpgradeDistributionPtrInput interface {
	pulumi.Input

	ToUpgradeDistributionPtrOutput() UpgradeDistributionPtrOutput
	ToUpgradeDistributionPtrOutputWithContext(context.Context) UpgradeDistributionPtrOutput
}

type upgradeDistributionPtrType UpgradeDistributionArgs

func UpgradeDistributionPtr(v *UpgradeDistributionArgs) UpgradeDistributionPtrInput {
	return (*upgradeDistributionPtrType)(v)
}

func (*upgradeDistributionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UpgradeDistribution)(nil)).Elem()
}

func (i *upgradeDistributionPtrType) ToUpgradeDistributionPtrOutput() UpgradeDistributionPtrOutput {
	return i.ToUpgradeDistributionPtrOutputWithContext(context.Background())
}

func (i *upgradeDistributionPtrType) ToUpgradeDistributionPtrOutputWithContext(ctx context.Context) UpgradeDistributionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradeDistributionPtrOutput)
}

// UpgradeDistributionArrayInput is an input type that accepts UpgradeDistributionArray and UpgradeDistributionArrayOutput values.
// You can construct a concrete instance of `UpgradeDistributionArrayInput` via:
//
//          UpgradeDistributionArray{ UpgradeDistributionArgs{...} }
type UpgradeDistributionArrayInput interface {
	pulumi.Input

	ToUpgradeDistributionArrayOutput() UpgradeDistributionArrayOutput
	ToUpgradeDistributionArrayOutputWithContext(context.Context) UpgradeDistributionArrayOutput
}

type UpgradeDistributionArray []UpgradeDistributionInput

func (UpgradeDistributionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UpgradeDistribution)(nil)).Elem()
}

func (i UpgradeDistributionArray) ToUpgradeDistributionArrayOutput() UpgradeDistributionArrayOutput {
	return i.ToUpgradeDistributionArrayOutputWithContext(context.Background())
}

func (i UpgradeDistributionArray) ToUpgradeDistributionArrayOutputWithContext(ctx context.Context) UpgradeDistributionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradeDistributionArrayOutput)
}

// The Upgrade Distribution represents metadata about the Upgrade for each operating system (CPE). Some distributions have additional metadata around updates, classifying them into various categories and severities.
type UpgradeDistributionOutput struct{ *pulumi.OutputState }

func (UpgradeDistributionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpgradeDistribution)(nil)).Elem()
}

func (o UpgradeDistributionOutput) ToUpgradeDistributionOutput() UpgradeDistributionOutput {
	return o
}

func (o UpgradeDistributionOutput) ToUpgradeDistributionOutputWithContext(ctx context.Context) UpgradeDistributionOutput {
	return o
}

func (o UpgradeDistributionOutput) ToUpgradeDistributionPtrOutput() UpgradeDistributionPtrOutput {
	return o.ToUpgradeDistributionPtrOutputWithContext(context.Background())
}

func (o UpgradeDistributionOutput) ToUpgradeDistributionPtrOutputWithContext(ctx context.Context) UpgradeDistributionPtrOutput {
	return o.ApplyT(func(v UpgradeDistribution) *UpgradeDistribution {
		return &v
	}).(UpgradeDistributionPtrOutput)
}

// The operating system classification of this Upgrade, as specified by the upstream operating system upgrade feed.
func (o UpgradeDistributionOutput) Classification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpgradeDistribution) *string { return v.Classification }).(pulumi.StringPtrOutput)
}

// Required - The specific operating system this metadata applies to. See https://cpe.mitre.org/specification/.
func (o UpgradeDistributionOutput) CpeUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpgradeDistribution) *string { return v.CpeUri }).(pulumi.StringPtrOutput)
}

// The cve that would be resolved by this upgrade.
func (o UpgradeDistributionOutput) Cve() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UpgradeDistribution) []string { return v.Cve }).(pulumi.StringArrayOutput)
}

// The severity as specified by the upstream operating system.
func (o UpgradeDistributionOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpgradeDistribution) *string { return v.Severity }).(pulumi.StringPtrOutput)
}

type UpgradeDistributionPtrOutput struct{ *pulumi.OutputState }

func (UpgradeDistributionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UpgradeDistribution)(nil)).Elem()
}

func (o UpgradeDistributionPtrOutput) ToUpgradeDistributionPtrOutput() UpgradeDistributionPtrOutput {
	return o
}

func (o UpgradeDistributionPtrOutput) ToUpgradeDistributionPtrOutputWithContext(ctx context.Context) UpgradeDistributionPtrOutput {
	return o
}

func (o UpgradeDistributionPtrOutput) Elem() UpgradeDistributionOutput {
	return o.ApplyT(func(v *UpgradeDistribution) UpgradeDistribution { return *v }).(UpgradeDistributionOutput)
}

// The operating system classification of this Upgrade, as specified by the upstream operating system upgrade feed.
func (o UpgradeDistributionPtrOutput) Classification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UpgradeDistribution) *string {
		if v == nil {
			return nil
		}
		return v.Classification
	}).(pulumi.StringPtrOutput)
}

// Required - The specific operating system this metadata applies to. See https://cpe.mitre.org/specification/.
func (o UpgradeDistributionPtrOutput) CpeUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UpgradeDistribution) *string {
		if v == nil {
			return nil
		}
		return v.CpeUri
	}).(pulumi.StringPtrOutput)
}

// The cve that would be resolved by this upgrade.
func (o UpgradeDistributionPtrOutput) Cve() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *UpgradeDistribution) []string {
		if v == nil {
			return nil
		}
		return v.Cve
	}).(pulumi.StringArrayOutput)
}

// The severity as specified by the upstream operating system.
func (o UpgradeDistributionPtrOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UpgradeDistribution) *string {
		if v == nil {
			return nil
		}
		return v.Severity
	}).(pulumi.StringPtrOutput)
}

type UpgradeDistributionArrayOutput struct{ *pulumi.OutputState }

func (UpgradeDistributionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UpgradeDistribution)(nil)).Elem()
}

func (o UpgradeDistributionArrayOutput) ToUpgradeDistributionArrayOutput() UpgradeDistributionArrayOutput {
	return o
}

func (o UpgradeDistributionArrayOutput) ToUpgradeDistributionArrayOutputWithContext(ctx context.Context) UpgradeDistributionArrayOutput {
	return o
}

func (o UpgradeDistributionArrayOutput) Index(i pulumi.IntInput) UpgradeDistributionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UpgradeDistribution {
		return vs[0].([]UpgradeDistribution)[vs[1].(int)]
	}).(UpgradeDistributionOutput)
}

// An Upgrade Note represents a potential upgrade of a package to a given version. For each package version combination (i.e. bash 4.0, bash 4.1, bash 4.1.2), there will be a Upgrade Note.
type UpgradeNote struct {
	// Metadata about the upgrade for each specific operating system.
	Distributions []UpgradeDistribution `pulumi:"distributions"`
	// Required - The package this Upgrade is for.
	Package *string `pulumi:"package"`
	// Required - The version of the package in machine + human readable form.
	Version *Version `pulumi:"version"`
}

// UpgradeNoteInput is an input type that accepts UpgradeNoteArgs and UpgradeNoteOutput values.
// You can construct a concrete instance of `UpgradeNoteInput` via:
//
//          UpgradeNoteArgs{...}
type UpgradeNoteInput interface {
	pulumi.Input

	ToUpgradeNoteOutput() UpgradeNoteOutput
	ToUpgradeNoteOutputWithContext(context.Context) UpgradeNoteOutput
}

// An Upgrade Note represents a potential upgrade of a package to a given version. For each package version combination (i.e. bash 4.0, bash 4.1, bash 4.1.2), there will be a Upgrade Note.
type UpgradeNoteArgs struct {
	// Metadata about the upgrade for each specific operating system.
	Distributions UpgradeDistributionArrayInput `pulumi:"distributions"`
	// Required - The package this Upgrade is for.
	Package pulumi.StringPtrInput `pulumi:"package"`
	// Required - The version of the package in machine + human readable form.
	Version VersionPtrInput `pulumi:"version"`
}

func (UpgradeNoteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UpgradeNote)(nil)).Elem()
}

func (i UpgradeNoteArgs) ToUpgradeNoteOutput() UpgradeNoteOutput {
	return i.ToUpgradeNoteOutputWithContext(context.Background())
}

func (i UpgradeNoteArgs) ToUpgradeNoteOutputWithContext(ctx context.Context) UpgradeNoteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradeNoteOutput)
}

func (i UpgradeNoteArgs) ToUpgradeNotePtrOutput() UpgradeNotePtrOutput {
	return i.ToUpgradeNotePtrOutputWithContext(context.Background())
}

func (i UpgradeNoteArgs) ToUpgradeNotePtrOutputWithContext(ctx context.Context) UpgradeNotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradeNoteOutput).ToUpgradeNotePtrOutputWithContext(ctx)
}

// UpgradeNotePtrInput is an input type that accepts UpgradeNoteArgs, UpgradeNotePtr and UpgradeNotePtrOutput values.
// You can construct a concrete instance of `UpgradeNotePtrInput` via:
//
//          UpgradeNoteArgs{...}
//
//  or:
//
//          nil
type UpgradeNotePtrInput interface {
	pulumi.Input

	ToUpgradeNotePtrOutput() UpgradeNotePtrOutput
	ToUpgradeNotePtrOutputWithContext(context.Context) UpgradeNotePtrOutput
}

type upgradeNotePtrType UpgradeNoteArgs

func UpgradeNotePtr(v *UpgradeNoteArgs) UpgradeNotePtrInput {
	return (*upgradeNotePtrType)(v)
}

func (*upgradeNotePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UpgradeNote)(nil)).Elem()
}

func (i *upgradeNotePtrType) ToUpgradeNotePtrOutput() UpgradeNotePtrOutput {
	return i.ToUpgradeNotePtrOutputWithContext(context.Background())
}

func (i *upgradeNotePtrType) ToUpgradeNotePtrOutputWithContext(ctx context.Context) UpgradeNotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradeNotePtrOutput)
}

// An Upgrade Note represents a potential upgrade of a package to a given version. For each package version combination (i.e. bash 4.0, bash 4.1, bash 4.1.2), there will be a Upgrade Note.
type UpgradeNoteOutput struct{ *pulumi.OutputState }

func (UpgradeNoteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpgradeNote)(nil)).Elem()
}

func (o UpgradeNoteOutput) ToUpgradeNoteOutput() UpgradeNoteOutput {
	return o
}

func (o UpgradeNoteOutput) ToUpgradeNoteOutputWithContext(ctx context.Context) UpgradeNoteOutput {
	return o
}

func (o UpgradeNoteOutput) ToUpgradeNotePtrOutput() UpgradeNotePtrOutput {
	return o.ToUpgradeNotePtrOutputWithContext(context.Background())
}

func (o UpgradeNoteOutput) ToUpgradeNotePtrOutputWithContext(ctx context.Context) UpgradeNotePtrOutput {
	return o.ApplyT(func(v UpgradeNote) *UpgradeNote {
		return &v
	}).(UpgradeNotePtrOutput)
}

// Metadata about the upgrade for each specific operating system.
func (o UpgradeNoteOutput) Distributions() UpgradeDistributionArrayOutput {
	return o.ApplyT(func(v UpgradeNote) []UpgradeDistribution { return v.Distributions }).(UpgradeDistributionArrayOutput)
}

// Required - The package this Upgrade is for.
func (o UpgradeNoteOutput) Package() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpgradeNote) *string { return v.Package }).(pulumi.StringPtrOutput)
}

// Required - The version of the package in machine + human readable form.
func (o UpgradeNoteOutput) Version() VersionPtrOutput {
	return o.ApplyT(func(v UpgradeNote) *Version { return v.Version }).(VersionPtrOutput)
}

type UpgradeNotePtrOutput struct{ *pulumi.OutputState }

func (UpgradeNotePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UpgradeNote)(nil)).Elem()
}

func (o UpgradeNotePtrOutput) ToUpgradeNotePtrOutput() UpgradeNotePtrOutput {
	return o
}

func (o UpgradeNotePtrOutput) ToUpgradeNotePtrOutputWithContext(ctx context.Context) UpgradeNotePtrOutput {
	return o
}

func (o UpgradeNotePtrOutput) Elem() UpgradeNoteOutput {
	return o.ApplyT(func(v *UpgradeNote) UpgradeNote { return *v }).(UpgradeNoteOutput)
}

// Metadata about the upgrade for each specific operating system.
func (o UpgradeNotePtrOutput) Distributions() UpgradeDistributionArrayOutput {
	return o.ApplyT(func(v *UpgradeNote) []UpgradeDistribution {
		if v == nil {
			return nil
		}
		return v.Distributions
	}).(UpgradeDistributionArrayOutput)
}

// Required - The package this Upgrade is for.
func (o UpgradeNotePtrOutput) Package() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UpgradeNote) *string {
		if v == nil {
			return nil
		}
		return v.Package
	}).(pulumi.StringPtrOutput)
}

// Required - The version of the package in machine + human readable form.
func (o UpgradeNotePtrOutput) Version() VersionPtrOutput {
	return o.ApplyT(func(v *UpgradeNote) *Version {
		if v == nil {
			return nil
		}
		return v.Version
	}).(VersionPtrOutput)
}

// An Upgrade Occurrence represents that a specific resource_url could install a specific upgrade. This presence is supplied via local sources (i.e. it is present in the mirror and the running system has noticed its availability).
type UpgradeOccurrence struct {
	// Metadata about the upgrade for available for the specific operating system for the resource_url. This allows efficient filtering, as well as making it easier to use the occurrence.
	Distribution *UpgradeDistribution `pulumi:"distribution"`
	// Required - The package this Upgrade is for.
	Package *string `pulumi:"package"`
	// Required - The version of the package in a machine + human readable form.
	ParsedVersion *Version `pulumi:"parsedVersion"`
}

// UpgradeOccurrenceInput is an input type that accepts UpgradeOccurrenceArgs and UpgradeOccurrenceOutput values.
// You can construct a concrete instance of `UpgradeOccurrenceInput` via:
//
//          UpgradeOccurrenceArgs{...}
type UpgradeOccurrenceInput interface {
	pulumi.Input

	ToUpgradeOccurrenceOutput() UpgradeOccurrenceOutput
	ToUpgradeOccurrenceOutputWithContext(context.Context) UpgradeOccurrenceOutput
}

// An Upgrade Occurrence represents that a specific resource_url could install a specific upgrade. This presence is supplied via local sources (i.e. it is present in the mirror and the running system has noticed its availability).
type UpgradeOccurrenceArgs struct {
	// Metadata about the upgrade for available for the specific operating system for the resource_url. This allows efficient filtering, as well as making it easier to use the occurrence.
	Distribution UpgradeDistributionPtrInput `pulumi:"distribution"`
	// Required - The package this Upgrade is for.
	Package pulumi.StringPtrInput `pulumi:"package"`
	// Required - The version of the package in a machine + human readable form.
	ParsedVersion VersionPtrInput `pulumi:"parsedVersion"`
}

func (UpgradeOccurrenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UpgradeOccurrence)(nil)).Elem()
}

func (i UpgradeOccurrenceArgs) ToUpgradeOccurrenceOutput() UpgradeOccurrenceOutput {
	return i.ToUpgradeOccurrenceOutputWithContext(context.Background())
}

func (i UpgradeOccurrenceArgs) ToUpgradeOccurrenceOutputWithContext(ctx context.Context) UpgradeOccurrenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradeOccurrenceOutput)
}

func (i UpgradeOccurrenceArgs) ToUpgradeOccurrencePtrOutput() UpgradeOccurrencePtrOutput {
	return i.ToUpgradeOccurrencePtrOutputWithContext(context.Background())
}

func (i UpgradeOccurrenceArgs) ToUpgradeOccurrencePtrOutputWithContext(ctx context.Context) UpgradeOccurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradeOccurrenceOutput).ToUpgradeOccurrencePtrOutputWithContext(ctx)
}

// UpgradeOccurrencePtrInput is an input type that accepts UpgradeOccurrenceArgs, UpgradeOccurrencePtr and UpgradeOccurrencePtrOutput values.
// You can construct a concrete instance of `UpgradeOccurrencePtrInput` via:
//
//          UpgradeOccurrenceArgs{...}
//
//  or:
//
//          nil
type UpgradeOccurrencePtrInput interface {
	pulumi.Input

	ToUpgradeOccurrencePtrOutput() UpgradeOccurrencePtrOutput
	ToUpgradeOccurrencePtrOutputWithContext(context.Context) UpgradeOccurrencePtrOutput
}

type upgradeOccurrencePtrType UpgradeOccurrenceArgs

func UpgradeOccurrencePtr(v *UpgradeOccurrenceArgs) UpgradeOccurrencePtrInput {
	return (*upgradeOccurrencePtrType)(v)
}

func (*upgradeOccurrencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UpgradeOccurrence)(nil)).Elem()
}

func (i *upgradeOccurrencePtrType) ToUpgradeOccurrencePtrOutput() UpgradeOccurrencePtrOutput {
	return i.ToUpgradeOccurrencePtrOutputWithContext(context.Background())
}

func (i *upgradeOccurrencePtrType) ToUpgradeOccurrencePtrOutputWithContext(ctx context.Context) UpgradeOccurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradeOccurrencePtrOutput)
}

// An Upgrade Occurrence represents that a specific resource_url could install a specific upgrade. This presence is supplied via local sources (i.e. it is present in the mirror and the running system has noticed its availability).
type UpgradeOccurrenceOutput struct{ *pulumi.OutputState }

func (UpgradeOccurrenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpgradeOccurrence)(nil)).Elem()
}

func (o UpgradeOccurrenceOutput) ToUpgradeOccurrenceOutput() UpgradeOccurrenceOutput {
	return o
}

func (o UpgradeOccurrenceOutput) ToUpgradeOccurrenceOutputWithContext(ctx context.Context) UpgradeOccurrenceOutput {
	return o
}

func (o UpgradeOccurrenceOutput) ToUpgradeOccurrencePtrOutput() UpgradeOccurrencePtrOutput {
	return o.ToUpgradeOccurrencePtrOutputWithContext(context.Background())
}

func (o UpgradeOccurrenceOutput) ToUpgradeOccurrencePtrOutputWithContext(ctx context.Context) UpgradeOccurrencePtrOutput {
	return o.ApplyT(func(v UpgradeOccurrence) *UpgradeOccurrence {
		return &v
	}).(UpgradeOccurrencePtrOutput)
}

// Metadata about the upgrade for available for the specific operating system for the resource_url. This allows efficient filtering, as well as making it easier to use the occurrence.
func (o UpgradeOccurrenceOutput) Distribution() UpgradeDistributionPtrOutput {
	return o.ApplyT(func(v UpgradeOccurrence) *UpgradeDistribution { return v.Distribution }).(UpgradeDistributionPtrOutput)
}

// Required - The package this Upgrade is for.
func (o UpgradeOccurrenceOutput) Package() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpgradeOccurrence) *string { return v.Package }).(pulumi.StringPtrOutput)
}

// Required - The version of the package in a machine + human readable form.
func (o UpgradeOccurrenceOutput) ParsedVersion() VersionPtrOutput {
	return o.ApplyT(func(v UpgradeOccurrence) *Version { return v.ParsedVersion }).(VersionPtrOutput)
}

type UpgradeOccurrencePtrOutput struct{ *pulumi.OutputState }

func (UpgradeOccurrencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UpgradeOccurrence)(nil)).Elem()
}

func (o UpgradeOccurrencePtrOutput) ToUpgradeOccurrencePtrOutput() UpgradeOccurrencePtrOutput {
	return o
}

func (o UpgradeOccurrencePtrOutput) ToUpgradeOccurrencePtrOutputWithContext(ctx context.Context) UpgradeOccurrencePtrOutput {
	return o
}

func (o UpgradeOccurrencePtrOutput) Elem() UpgradeOccurrenceOutput {
	return o.ApplyT(func(v *UpgradeOccurrence) UpgradeOccurrence { return *v }).(UpgradeOccurrenceOutput)
}

// Metadata about the upgrade for available for the specific operating system for the resource_url. This allows efficient filtering, as well as making it easier to use the occurrence.
func (o UpgradeOccurrencePtrOutput) Distribution() UpgradeDistributionPtrOutput {
	return o.ApplyT(func(v *UpgradeOccurrence) *UpgradeDistribution {
		if v == nil {
			return nil
		}
		return v.Distribution
	}).(UpgradeDistributionPtrOutput)
}

// Required - The package this Upgrade is for.
func (o UpgradeOccurrencePtrOutput) Package() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UpgradeOccurrence) *string {
		if v == nil {
			return nil
		}
		return v.Package
	}).(pulumi.StringPtrOutput)
}

// Required - The version of the package in a machine + human readable form.
func (o UpgradeOccurrencePtrOutput) ParsedVersion() VersionPtrOutput {
	return o.ApplyT(func(v *UpgradeOccurrence) *Version {
		if v == nil {
			return nil
		}
		return v.ParsedVersion
	}).(VersionPtrOutput)
}

// Version contains structured information about the version of the package. For a discussion of this in Debian/Ubuntu: http://serverfault.com/questions/604541/debian-packages-version-convention For a discussion of this in Redhat/Fedora/Centos: http://blog.jasonantman.com/2014/07/how-yum-and-rpm-compare-versions/
type Version struct {
	// Used to correct mistakes in the version numbering scheme.
	Epoch *int `pulumi:"epoch"`
	// Whether this version is vulnerable, when defining the version bounds. For example, if the minimum version is 2.0, inclusive=true would say 2.0 is vulnerable, while inclusive=false would say it's not
	Inclusive *bool `pulumi:"inclusive"`
	// Distinguish between sentinel MIN/MAX versions and normal versions. If kind is not NORMAL, then the other fields are ignored.
	Kind *string `pulumi:"kind"`
	// The main part of the version name.
	Name *string `pulumi:"name"`
	// The iteration of the package build from the above version.
	Revision *string `pulumi:"revision"`
}

// VersionInput is an input type that accepts VersionArgs and VersionOutput values.
// You can construct a concrete instance of `VersionInput` via:
//
//          VersionArgs{...}
type VersionInput interface {
	pulumi.Input

	ToVersionOutput() VersionOutput
	ToVersionOutputWithContext(context.Context) VersionOutput
}

// Version contains structured information about the version of the package. For a discussion of this in Debian/Ubuntu: http://serverfault.com/questions/604541/debian-packages-version-convention For a discussion of this in Redhat/Fedora/Centos: http://blog.jasonantman.com/2014/07/how-yum-and-rpm-compare-versions/
type VersionArgs struct {
	// Used to correct mistakes in the version numbering scheme.
	Epoch pulumi.IntPtrInput `pulumi:"epoch"`
	// Whether this version is vulnerable, when defining the version bounds. For example, if the minimum version is 2.0, inclusive=true would say 2.0 is vulnerable, while inclusive=false would say it's not
	Inclusive pulumi.BoolPtrInput `pulumi:"inclusive"`
	// Distinguish between sentinel MIN/MAX versions and normal versions. If kind is not NORMAL, then the other fields are ignored.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// The main part of the version name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The iteration of the package build from the above version.
	Revision pulumi.StringPtrInput `pulumi:"revision"`
}

func (VersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Version)(nil)).Elem()
}

func (i VersionArgs) ToVersionOutput() VersionOutput {
	return i.ToVersionOutputWithContext(context.Background())
}

func (i VersionArgs) ToVersionOutputWithContext(ctx context.Context) VersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VersionOutput)
}

func (i VersionArgs) ToVersionPtrOutput() VersionPtrOutput {
	return i.ToVersionPtrOutputWithContext(context.Background())
}

func (i VersionArgs) ToVersionPtrOutputWithContext(ctx context.Context) VersionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VersionOutput).ToVersionPtrOutputWithContext(ctx)
}

// VersionPtrInput is an input type that accepts VersionArgs, VersionPtr and VersionPtrOutput values.
// You can construct a concrete instance of `VersionPtrInput` via:
//
//          VersionArgs{...}
//
//  or:
//
//          nil
type VersionPtrInput interface {
	pulumi.Input

	ToVersionPtrOutput() VersionPtrOutput
	ToVersionPtrOutputWithContext(context.Context) VersionPtrOutput
}

type versionPtrType VersionArgs

func VersionPtr(v *VersionArgs) VersionPtrInput {
	return (*versionPtrType)(v)
}

func (*versionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Version)(nil)).Elem()
}

func (i *versionPtrType) ToVersionPtrOutput() VersionPtrOutput {
	return i.ToVersionPtrOutputWithContext(context.Background())
}

func (i *versionPtrType) ToVersionPtrOutputWithContext(ctx context.Context) VersionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VersionPtrOutput)
}

// Version contains structured information about the version of the package. For a discussion of this in Debian/Ubuntu: http://serverfault.com/questions/604541/debian-packages-version-convention For a discussion of this in Redhat/Fedora/Centos: http://blog.jasonantman.com/2014/07/how-yum-and-rpm-compare-versions/
type VersionOutput struct{ *pulumi.OutputState }

func (VersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Version)(nil)).Elem()
}

func (o VersionOutput) ToVersionOutput() VersionOutput {
	return o
}

func (o VersionOutput) ToVersionOutputWithContext(ctx context.Context) VersionOutput {
	return o
}

func (o VersionOutput) ToVersionPtrOutput() VersionPtrOutput {
	return o.ToVersionPtrOutputWithContext(context.Background())
}

func (o VersionOutput) ToVersionPtrOutputWithContext(ctx context.Context) VersionPtrOutput {
	return o.ApplyT(func(v Version) *Version {
		return &v
	}).(VersionPtrOutput)
}

// Used to correct mistakes in the version numbering scheme.
func (o VersionOutput) Epoch() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Version) *int { return v.Epoch }).(pulumi.IntPtrOutput)
}

// Whether this version is vulnerable, when defining the version bounds. For example, if the minimum version is 2.0, inclusive=true would say 2.0 is vulnerable, while inclusive=false would say it's not
func (o VersionOutput) Inclusive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Version) *bool { return v.Inclusive }).(pulumi.BoolPtrOutput)
}

// Distinguish between sentinel MIN/MAX versions and normal versions. If kind is not NORMAL, then the other fields are ignored.
func (o VersionOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Version) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// The main part of the version name.
func (o VersionOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Version) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The iteration of the package build from the above version.
func (o VersionOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Version) *string { return v.Revision }).(pulumi.StringPtrOutput)
}

type VersionPtrOutput struct{ *pulumi.OutputState }

func (VersionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Version)(nil)).Elem()
}

func (o VersionPtrOutput) ToVersionPtrOutput() VersionPtrOutput {
	return o
}

func (o VersionPtrOutput) ToVersionPtrOutputWithContext(ctx context.Context) VersionPtrOutput {
	return o
}

func (o VersionPtrOutput) Elem() VersionOutput {
	return o.ApplyT(func(v *Version) Version { return *v }).(VersionOutput)
}

// Used to correct mistakes in the version numbering scheme.
func (o VersionPtrOutput) Epoch() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Version) *int {
		if v == nil {
			return nil
		}
		return v.Epoch
	}).(pulumi.IntPtrOutput)
}

// Whether this version is vulnerable, when defining the version bounds. For example, if the minimum version is 2.0, inclusive=true would say 2.0 is vulnerable, while inclusive=false would say it's not
func (o VersionPtrOutput) Inclusive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Version) *bool {
		if v == nil {
			return nil
		}
		return v.Inclusive
	}).(pulumi.BoolPtrOutput)
}

// Distinguish between sentinel MIN/MAX versions and normal versions. If kind is not NORMAL, then the other fields are ignored.
func (o VersionPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Version) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// The main part of the version name.
func (o VersionPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Version) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The iteration of the package build from the above version.
func (o VersionPtrOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Version) *string {
		if v == nil {
			return nil
		}
		return v.Revision
	}).(pulumi.StringPtrOutput)
}

// Used by Occurrence to point to where the vulnerability exists and how to fix it.
type VulnerabilityDetails struct {
	// Output only. The CVSS score of this vulnerability. CVSS score is on a scale of 0-10 where 0 indicates low severity and 10 indicates high severity.
	CvssScore *float64 `pulumi:"cvssScore"`
	// The distro assigned severity for this vulnerability when that is available and note provider assigned severity when distro has not yet assigned a severity for this vulnerability.
	EffectiveSeverity *string `pulumi:"effectiveSeverity"`
	// The set of affected locations and their fixes (if available) within the associated resource.
	PackageIssue []PackageIssue `pulumi:"packageIssue"`
	// Output only. The note provider assigned Severity of the vulnerability.
	Severity *string `pulumi:"severity"`
	// The type of package; whether native or non native(ruby gems, node.js packages etc)
	Type *string `pulumi:"type"`
}

// VulnerabilityDetailsInput is an input type that accepts VulnerabilityDetailsArgs and VulnerabilityDetailsOutput values.
// You can construct a concrete instance of `VulnerabilityDetailsInput` via:
//
//          VulnerabilityDetailsArgs{...}
type VulnerabilityDetailsInput interface {
	pulumi.Input

	ToVulnerabilityDetailsOutput() VulnerabilityDetailsOutput
	ToVulnerabilityDetailsOutputWithContext(context.Context) VulnerabilityDetailsOutput
}

// Used by Occurrence to point to where the vulnerability exists and how to fix it.
type VulnerabilityDetailsArgs struct {
	// Output only. The CVSS score of this vulnerability. CVSS score is on a scale of 0-10 where 0 indicates low severity and 10 indicates high severity.
	CvssScore pulumi.Float64PtrInput `pulumi:"cvssScore"`
	// The distro assigned severity for this vulnerability when that is available and note provider assigned severity when distro has not yet assigned a severity for this vulnerability.
	EffectiveSeverity pulumi.StringPtrInput `pulumi:"effectiveSeverity"`
	// The set of affected locations and their fixes (if available) within the associated resource.
	PackageIssue PackageIssueArrayInput `pulumi:"packageIssue"`
	// Output only. The note provider assigned Severity of the vulnerability.
	Severity pulumi.StringPtrInput `pulumi:"severity"`
	// The type of package; whether native or non native(ruby gems, node.js packages etc)
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (VulnerabilityDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VulnerabilityDetails)(nil)).Elem()
}

func (i VulnerabilityDetailsArgs) ToVulnerabilityDetailsOutput() VulnerabilityDetailsOutput {
	return i.ToVulnerabilityDetailsOutputWithContext(context.Background())
}

func (i VulnerabilityDetailsArgs) ToVulnerabilityDetailsOutputWithContext(ctx context.Context) VulnerabilityDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityDetailsOutput)
}

func (i VulnerabilityDetailsArgs) ToVulnerabilityDetailsPtrOutput() VulnerabilityDetailsPtrOutput {
	return i.ToVulnerabilityDetailsPtrOutputWithContext(context.Background())
}

func (i VulnerabilityDetailsArgs) ToVulnerabilityDetailsPtrOutputWithContext(ctx context.Context) VulnerabilityDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityDetailsOutput).ToVulnerabilityDetailsPtrOutputWithContext(ctx)
}

// VulnerabilityDetailsPtrInput is an input type that accepts VulnerabilityDetailsArgs, VulnerabilityDetailsPtr and VulnerabilityDetailsPtrOutput values.
// You can construct a concrete instance of `VulnerabilityDetailsPtrInput` via:
//
//          VulnerabilityDetailsArgs{...}
//
//  or:
//
//          nil
type VulnerabilityDetailsPtrInput interface {
	pulumi.Input

	ToVulnerabilityDetailsPtrOutput() VulnerabilityDetailsPtrOutput
	ToVulnerabilityDetailsPtrOutputWithContext(context.Context) VulnerabilityDetailsPtrOutput
}

type vulnerabilityDetailsPtrType VulnerabilityDetailsArgs

func VulnerabilityDetailsPtr(v *VulnerabilityDetailsArgs) VulnerabilityDetailsPtrInput {
	return (*vulnerabilityDetailsPtrType)(v)
}

func (*vulnerabilityDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VulnerabilityDetails)(nil)).Elem()
}

func (i *vulnerabilityDetailsPtrType) ToVulnerabilityDetailsPtrOutput() VulnerabilityDetailsPtrOutput {
	return i.ToVulnerabilityDetailsPtrOutputWithContext(context.Background())
}

func (i *vulnerabilityDetailsPtrType) ToVulnerabilityDetailsPtrOutputWithContext(ctx context.Context) VulnerabilityDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityDetailsPtrOutput)
}

// Used by Occurrence to point to where the vulnerability exists and how to fix it.
type VulnerabilityDetailsOutput struct{ *pulumi.OutputState }

func (VulnerabilityDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VulnerabilityDetails)(nil)).Elem()
}

func (o VulnerabilityDetailsOutput) ToVulnerabilityDetailsOutput() VulnerabilityDetailsOutput {
	return o
}

func (o VulnerabilityDetailsOutput) ToVulnerabilityDetailsOutputWithContext(ctx context.Context) VulnerabilityDetailsOutput {
	return o
}

func (o VulnerabilityDetailsOutput) ToVulnerabilityDetailsPtrOutput() VulnerabilityDetailsPtrOutput {
	return o.ToVulnerabilityDetailsPtrOutputWithContext(context.Background())
}

func (o VulnerabilityDetailsOutput) ToVulnerabilityDetailsPtrOutputWithContext(ctx context.Context) VulnerabilityDetailsPtrOutput {
	return o.ApplyT(func(v VulnerabilityDetails) *VulnerabilityDetails {
		return &v
	}).(VulnerabilityDetailsPtrOutput)
}

// Output only. The CVSS score of this vulnerability. CVSS score is on a scale of 0-10 where 0 indicates low severity and 10 indicates high severity.
func (o VulnerabilityDetailsOutput) CvssScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v VulnerabilityDetails) *float64 { return v.CvssScore }).(pulumi.Float64PtrOutput)
}

// The distro assigned severity for this vulnerability when that is available and note provider assigned severity when distro has not yet assigned a severity for this vulnerability.
func (o VulnerabilityDetailsOutput) EffectiveSeverity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VulnerabilityDetails) *string { return v.EffectiveSeverity }).(pulumi.StringPtrOutput)
}

// The set of affected locations and their fixes (if available) within the associated resource.
func (o VulnerabilityDetailsOutput) PackageIssue() PackageIssueArrayOutput {
	return o.ApplyT(func(v VulnerabilityDetails) []PackageIssue { return v.PackageIssue }).(PackageIssueArrayOutput)
}

// Output only. The note provider assigned Severity of the vulnerability.
func (o VulnerabilityDetailsOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VulnerabilityDetails) *string { return v.Severity }).(pulumi.StringPtrOutput)
}

// The type of package; whether native or non native(ruby gems, node.js packages etc)
func (o VulnerabilityDetailsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VulnerabilityDetails) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type VulnerabilityDetailsPtrOutput struct{ *pulumi.OutputState }

func (VulnerabilityDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VulnerabilityDetails)(nil)).Elem()
}

func (o VulnerabilityDetailsPtrOutput) ToVulnerabilityDetailsPtrOutput() VulnerabilityDetailsPtrOutput {
	return o
}

func (o VulnerabilityDetailsPtrOutput) ToVulnerabilityDetailsPtrOutputWithContext(ctx context.Context) VulnerabilityDetailsPtrOutput {
	return o
}

func (o VulnerabilityDetailsPtrOutput) Elem() VulnerabilityDetailsOutput {
	return o.ApplyT(func(v *VulnerabilityDetails) VulnerabilityDetails { return *v }).(VulnerabilityDetailsOutput)
}

// Output only. The CVSS score of this vulnerability. CVSS score is on a scale of 0-10 where 0 indicates low severity and 10 indicates high severity.
func (o VulnerabilityDetailsPtrOutput) CvssScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *VulnerabilityDetails) *float64 {
		if v == nil {
			return nil
		}
		return v.CvssScore
	}).(pulumi.Float64PtrOutput)
}

// The distro assigned severity for this vulnerability when that is available and note provider assigned severity when distro has not yet assigned a severity for this vulnerability.
func (o VulnerabilityDetailsPtrOutput) EffectiveSeverity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VulnerabilityDetails) *string {
		if v == nil {
			return nil
		}
		return v.EffectiveSeverity
	}).(pulumi.StringPtrOutput)
}

// The set of affected locations and their fixes (if available) within the associated resource.
func (o VulnerabilityDetailsPtrOutput) PackageIssue() PackageIssueArrayOutput {
	return o.ApplyT(func(v *VulnerabilityDetails) []PackageIssue {
		if v == nil {
			return nil
		}
		return v.PackageIssue
	}).(PackageIssueArrayOutput)
}

// Output only. The note provider assigned Severity of the vulnerability.
func (o VulnerabilityDetailsPtrOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VulnerabilityDetails) *string {
		if v == nil {
			return nil
		}
		return v.Severity
	}).(pulumi.StringPtrOutput)
}

// The type of package; whether native or non native(ruby gems, node.js packages etc)
func (o VulnerabilityDetailsPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VulnerabilityDetails) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The location of the vulnerability
type VulnerabilityLocation struct {
	// The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/) format. Examples include distro or storage location for vulnerable jar. This field can be used as a filter in list requests.
	CpeUri *string `pulumi:"cpeUri"`
	// The package being described.
	Package *string `pulumi:"package"`
	// The version of the package being described. This field can be used as a filter in list requests.
	Version *Version `pulumi:"version"`
}

// VulnerabilityLocationInput is an input type that accepts VulnerabilityLocationArgs and VulnerabilityLocationOutput values.
// You can construct a concrete instance of `VulnerabilityLocationInput` via:
//
//          VulnerabilityLocationArgs{...}
type VulnerabilityLocationInput interface {
	pulumi.Input

	ToVulnerabilityLocationOutput() VulnerabilityLocationOutput
	ToVulnerabilityLocationOutputWithContext(context.Context) VulnerabilityLocationOutput
}

// The location of the vulnerability
type VulnerabilityLocationArgs struct {
	// The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/) format. Examples include distro or storage location for vulnerable jar. This field can be used as a filter in list requests.
	CpeUri pulumi.StringPtrInput `pulumi:"cpeUri"`
	// The package being described.
	Package pulumi.StringPtrInput `pulumi:"package"`
	// The version of the package being described. This field can be used as a filter in list requests.
	Version VersionPtrInput `pulumi:"version"`
}

func (VulnerabilityLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VulnerabilityLocation)(nil)).Elem()
}

func (i VulnerabilityLocationArgs) ToVulnerabilityLocationOutput() VulnerabilityLocationOutput {
	return i.ToVulnerabilityLocationOutputWithContext(context.Background())
}

func (i VulnerabilityLocationArgs) ToVulnerabilityLocationOutputWithContext(ctx context.Context) VulnerabilityLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityLocationOutput)
}

func (i VulnerabilityLocationArgs) ToVulnerabilityLocationPtrOutput() VulnerabilityLocationPtrOutput {
	return i.ToVulnerabilityLocationPtrOutputWithContext(context.Background())
}

func (i VulnerabilityLocationArgs) ToVulnerabilityLocationPtrOutputWithContext(ctx context.Context) VulnerabilityLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityLocationOutput).ToVulnerabilityLocationPtrOutputWithContext(ctx)
}

// VulnerabilityLocationPtrInput is an input type that accepts VulnerabilityLocationArgs, VulnerabilityLocationPtr and VulnerabilityLocationPtrOutput values.
// You can construct a concrete instance of `VulnerabilityLocationPtrInput` via:
//
//          VulnerabilityLocationArgs{...}
//
//  or:
//
//          nil
type VulnerabilityLocationPtrInput interface {
	pulumi.Input

	ToVulnerabilityLocationPtrOutput() VulnerabilityLocationPtrOutput
	ToVulnerabilityLocationPtrOutputWithContext(context.Context) VulnerabilityLocationPtrOutput
}

type vulnerabilityLocationPtrType VulnerabilityLocationArgs

func VulnerabilityLocationPtr(v *VulnerabilityLocationArgs) VulnerabilityLocationPtrInput {
	return (*vulnerabilityLocationPtrType)(v)
}

func (*vulnerabilityLocationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VulnerabilityLocation)(nil)).Elem()
}

func (i *vulnerabilityLocationPtrType) ToVulnerabilityLocationPtrOutput() VulnerabilityLocationPtrOutput {
	return i.ToVulnerabilityLocationPtrOutputWithContext(context.Background())
}

func (i *vulnerabilityLocationPtrType) ToVulnerabilityLocationPtrOutputWithContext(ctx context.Context) VulnerabilityLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityLocationPtrOutput)
}

// The location of the vulnerability
type VulnerabilityLocationOutput struct{ *pulumi.OutputState }

func (VulnerabilityLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VulnerabilityLocation)(nil)).Elem()
}

func (o VulnerabilityLocationOutput) ToVulnerabilityLocationOutput() VulnerabilityLocationOutput {
	return o
}

func (o VulnerabilityLocationOutput) ToVulnerabilityLocationOutputWithContext(ctx context.Context) VulnerabilityLocationOutput {
	return o
}

func (o VulnerabilityLocationOutput) ToVulnerabilityLocationPtrOutput() VulnerabilityLocationPtrOutput {
	return o.ToVulnerabilityLocationPtrOutputWithContext(context.Background())
}

func (o VulnerabilityLocationOutput) ToVulnerabilityLocationPtrOutputWithContext(ctx context.Context) VulnerabilityLocationPtrOutput {
	return o.ApplyT(func(v VulnerabilityLocation) *VulnerabilityLocation {
		return &v
	}).(VulnerabilityLocationPtrOutput)
}

// The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/) format. Examples include distro or storage location for vulnerable jar. This field can be used as a filter in list requests.
func (o VulnerabilityLocationOutput) CpeUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VulnerabilityLocation) *string { return v.CpeUri }).(pulumi.StringPtrOutput)
}

// The package being described.
func (o VulnerabilityLocationOutput) Package() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VulnerabilityLocation) *string { return v.Package }).(pulumi.StringPtrOutput)
}

// The version of the package being described. This field can be used as a filter in list requests.
func (o VulnerabilityLocationOutput) Version() VersionPtrOutput {
	return o.ApplyT(func(v VulnerabilityLocation) *Version { return v.Version }).(VersionPtrOutput)
}

type VulnerabilityLocationPtrOutput struct{ *pulumi.OutputState }

func (VulnerabilityLocationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VulnerabilityLocation)(nil)).Elem()
}

func (o VulnerabilityLocationPtrOutput) ToVulnerabilityLocationPtrOutput() VulnerabilityLocationPtrOutput {
	return o
}

func (o VulnerabilityLocationPtrOutput) ToVulnerabilityLocationPtrOutputWithContext(ctx context.Context) VulnerabilityLocationPtrOutput {
	return o
}

func (o VulnerabilityLocationPtrOutput) Elem() VulnerabilityLocationOutput {
	return o.ApplyT(func(v *VulnerabilityLocation) VulnerabilityLocation { return *v }).(VulnerabilityLocationOutput)
}

// The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/) format. Examples include distro or storage location for vulnerable jar. This field can be used as a filter in list requests.
func (o VulnerabilityLocationPtrOutput) CpeUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VulnerabilityLocation) *string {
		if v == nil {
			return nil
		}
		return v.CpeUri
	}).(pulumi.StringPtrOutput)
}

// The package being described.
func (o VulnerabilityLocationPtrOutput) Package() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VulnerabilityLocation) *string {
		if v == nil {
			return nil
		}
		return v.Package
	}).(pulumi.StringPtrOutput)
}

// The version of the package being described. This field can be used as a filter in list requests.
func (o VulnerabilityLocationPtrOutput) Version() VersionPtrOutput {
	return o.ApplyT(func(v *VulnerabilityLocation) *Version {
		if v == nil {
			return nil
		}
		return v.Version
	}).(VersionPtrOutput)
}

// VulnerabilityType provides metadata about a security vulnerability.
type VulnerabilityType struct {
	// The CVSS score for this Vulnerability.
	CvssScore *float64 `pulumi:"cvssScore"`
	// All information about the package to specifically identify this vulnerability. One entry per (version range and cpe_uri) the package vulnerability has manifested in.
	Details []Detail `pulumi:"details"`
	// Note provider assigned impact of the vulnerability
	Severity *string `pulumi:"severity"`
}

// VulnerabilityTypeInput is an input type that accepts VulnerabilityTypeArgs and VulnerabilityTypeOutput values.
// You can construct a concrete instance of `VulnerabilityTypeInput` via:
//
//          VulnerabilityTypeArgs{...}
type VulnerabilityTypeInput interface {
	pulumi.Input

	ToVulnerabilityTypeOutput() VulnerabilityTypeOutput
	ToVulnerabilityTypeOutputWithContext(context.Context) VulnerabilityTypeOutput
}

// VulnerabilityType provides metadata about a security vulnerability.
type VulnerabilityTypeArgs struct {
	// The CVSS score for this Vulnerability.
	CvssScore pulumi.Float64PtrInput `pulumi:"cvssScore"`
	// All information about the package to specifically identify this vulnerability. One entry per (version range and cpe_uri) the package vulnerability has manifested in.
	Details DetailArrayInput `pulumi:"details"`
	// Note provider assigned impact of the vulnerability
	Severity pulumi.StringPtrInput `pulumi:"severity"`
}

func (VulnerabilityTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VulnerabilityType)(nil)).Elem()
}

func (i VulnerabilityTypeArgs) ToVulnerabilityTypeOutput() VulnerabilityTypeOutput {
	return i.ToVulnerabilityTypeOutputWithContext(context.Background())
}

func (i VulnerabilityTypeArgs) ToVulnerabilityTypeOutputWithContext(ctx context.Context) VulnerabilityTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityTypeOutput)
}

func (i VulnerabilityTypeArgs) ToVulnerabilityTypePtrOutput() VulnerabilityTypePtrOutput {
	return i.ToVulnerabilityTypePtrOutputWithContext(context.Background())
}

func (i VulnerabilityTypeArgs) ToVulnerabilityTypePtrOutputWithContext(ctx context.Context) VulnerabilityTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityTypeOutput).ToVulnerabilityTypePtrOutputWithContext(ctx)
}

// VulnerabilityTypePtrInput is an input type that accepts VulnerabilityTypeArgs, VulnerabilityTypePtr and VulnerabilityTypePtrOutput values.
// You can construct a concrete instance of `VulnerabilityTypePtrInput` via:
//
//          VulnerabilityTypeArgs{...}
//
//  or:
//
//          nil
type VulnerabilityTypePtrInput interface {
	pulumi.Input

	ToVulnerabilityTypePtrOutput() VulnerabilityTypePtrOutput
	ToVulnerabilityTypePtrOutputWithContext(context.Context) VulnerabilityTypePtrOutput
}

type vulnerabilityTypePtrType VulnerabilityTypeArgs

func VulnerabilityTypePtr(v *VulnerabilityTypeArgs) VulnerabilityTypePtrInput {
	return (*vulnerabilityTypePtrType)(v)
}

func (*vulnerabilityTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VulnerabilityType)(nil)).Elem()
}

func (i *vulnerabilityTypePtrType) ToVulnerabilityTypePtrOutput() VulnerabilityTypePtrOutput {
	return i.ToVulnerabilityTypePtrOutputWithContext(context.Background())
}

func (i *vulnerabilityTypePtrType) ToVulnerabilityTypePtrOutputWithContext(ctx context.Context) VulnerabilityTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityTypePtrOutput)
}

// VulnerabilityType provides metadata about a security vulnerability.
type VulnerabilityTypeOutput struct{ *pulumi.OutputState }

func (VulnerabilityTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VulnerabilityType)(nil)).Elem()
}

func (o VulnerabilityTypeOutput) ToVulnerabilityTypeOutput() VulnerabilityTypeOutput {
	return o
}

func (o VulnerabilityTypeOutput) ToVulnerabilityTypeOutputWithContext(ctx context.Context) VulnerabilityTypeOutput {
	return o
}

func (o VulnerabilityTypeOutput) ToVulnerabilityTypePtrOutput() VulnerabilityTypePtrOutput {
	return o.ToVulnerabilityTypePtrOutputWithContext(context.Background())
}

func (o VulnerabilityTypeOutput) ToVulnerabilityTypePtrOutputWithContext(ctx context.Context) VulnerabilityTypePtrOutput {
	return o.ApplyT(func(v VulnerabilityType) *VulnerabilityType {
		return &v
	}).(VulnerabilityTypePtrOutput)
}

// The CVSS score for this Vulnerability.
func (o VulnerabilityTypeOutput) CvssScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v VulnerabilityType) *float64 { return v.CvssScore }).(pulumi.Float64PtrOutput)
}

// All information about the package to specifically identify this vulnerability. One entry per (version range and cpe_uri) the package vulnerability has manifested in.
func (o VulnerabilityTypeOutput) Details() DetailArrayOutput {
	return o.ApplyT(func(v VulnerabilityType) []Detail { return v.Details }).(DetailArrayOutput)
}

// Note provider assigned impact of the vulnerability
func (o VulnerabilityTypeOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VulnerabilityType) *string { return v.Severity }).(pulumi.StringPtrOutput)
}

type VulnerabilityTypePtrOutput struct{ *pulumi.OutputState }

func (VulnerabilityTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VulnerabilityType)(nil)).Elem()
}

func (o VulnerabilityTypePtrOutput) ToVulnerabilityTypePtrOutput() VulnerabilityTypePtrOutput {
	return o
}

func (o VulnerabilityTypePtrOutput) ToVulnerabilityTypePtrOutputWithContext(ctx context.Context) VulnerabilityTypePtrOutput {
	return o
}

func (o VulnerabilityTypePtrOutput) Elem() VulnerabilityTypeOutput {
	return o.ApplyT(func(v *VulnerabilityType) VulnerabilityType { return *v }).(VulnerabilityTypeOutput)
}

// The CVSS score for this Vulnerability.
func (o VulnerabilityTypePtrOutput) CvssScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *VulnerabilityType) *float64 {
		if v == nil {
			return nil
		}
		return v.CvssScore
	}).(pulumi.Float64PtrOutput)
}

// All information about the package to specifically identify this vulnerability. One entry per (version range and cpe_uri) the package vulnerability has manifested in.
func (o VulnerabilityTypePtrOutput) Details() DetailArrayOutput {
	return o.ApplyT(func(v *VulnerabilityType) []Detail {
		if v == nil {
			return nil
		}
		return v.Details
	}).(DetailArrayOutput)
}

// Note provider assigned impact of the vulnerability
func (o VulnerabilityTypePtrOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VulnerabilityType) *string {
		if v == nil {
			return nil
		}
		return v.Severity
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ArtifactOutput{})
	pulumi.RegisterOutputType(ArtifactArrayOutput{})
	pulumi.RegisterOutputType(AttestationOutput{})
	pulumi.RegisterOutputType(AttestationPtrOutput{})
	pulumi.RegisterOutputType(AttestationAuthorityOutput{})
	pulumi.RegisterOutputType(AttestationAuthorityPtrOutput{})
	pulumi.RegisterOutputType(AttestationAuthorityHintOutput{})
	pulumi.RegisterOutputType(AttestationAuthorityHintPtrOutput{})
	pulumi.RegisterOutputType(BasisOutput{})
	pulumi.RegisterOutputType(BasisPtrOutput{})
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(BuildDetailsOutput{})
	pulumi.RegisterOutputType(BuildDetailsPtrOutput{})
	pulumi.RegisterOutputType(BuildProvenanceOutput{})
	pulumi.RegisterOutputType(BuildProvenancePtrOutput{})
	pulumi.RegisterOutputType(BuildSignatureOutput{})
	pulumi.RegisterOutputType(BuildSignaturePtrOutput{})
	pulumi.RegisterOutputType(BuildTypeOutput{})
	pulumi.RegisterOutputType(BuildTypePtrOutput{})
	pulumi.RegisterOutputType(CommandOutput{})
	pulumi.RegisterOutputType(CommandArrayOutput{})
	pulumi.RegisterOutputType(DeployableOutput{})
	pulumi.RegisterOutputType(DeployablePtrOutput{})
	pulumi.RegisterOutputType(DeploymentOutput{})
	pulumi.RegisterOutputType(DeploymentPtrOutput{})
	pulumi.RegisterOutputType(DerivedOutput{})
	pulumi.RegisterOutputType(DerivedPtrOutput{})
	pulumi.RegisterOutputType(DetailOutput{})
	pulumi.RegisterOutputType(DetailArrayOutput{})
	pulumi.RegisterOutputType(DiscoveredOutput{})
	pulumi.RegisterOutputType(DiscoveredPtrOutput{})
	pulumi.RegisterOutputType(DiscoveryOutput{})
	pulumi.RegisterOutputType(DiscoveryPtrOutput{})
	pulumi.RegisterOutputType(DistributionOutput{})
	pulumi.RegisterOutputType(DistributionArrayOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(FingerprintOutput{})
	pulumi.RegisterOutputType(FingerprintPtrOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsContaineranalysisV1alpha1AliasContextOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsContaineranalysisV1alpha1RepoIdOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsContaineranalysisV1alpha1SourceContextOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsContaineranalysisV1alpha1SourceContextArrayOutput{})
	pulumi.RegisterOutputType(HashOutput{})
	pulumi.RegisterOutputType(HashPtrOutput{})
	pulumi.RegisterOutputType(InstallationOutput{})
	pulumi.RegisterOutputType(InstallationPtrOutput{})
	pulumi.RegisterOutputType(LayerOutput{})
	pulumi.RegisterOutputType(LayerArrayOutput{})
	pulumi.RegisterOutputType(LocationOutput{})
	pulumi.RegisterOutputType(LocationArrayOutput{})
	pulumi.RegisterOutputType(OperationTypeOutput{})
	pulumi.RegisterOutputType(OperationTypePtrOutput{})
	pulumi.RegisterOutputType(PackageOutput{})
	pulumi.RegisterOutputType(PackagePtrOutput{})
	pulumi.RegisterOutputType(PackageIssueOutput{})
	pulumi.RegisterOutputType(PackageIssueArrayOutput{})
	pulumi.RegisterOutputType(PgpSignedAttestationOutput{})
	pulumi.RegisterOutputType(PgpSignedAttestationPtrOutput{})
	pulumi.RegisterOutputType(PolicyOutput{})
	pulumi.RegisterOutputType(PolicyPtrOutput{})
	pulumi.RegisterOutputType(RelatedUrlOutput{})
	pulumi.RegisterOutputType(RelatedUrlArrayOutput{})
	pulumi.RegisterOutputType(RepoSourceOutput{})
	pulumi.RegisterOutputType(RepoSourcePtrOutput{})
	pulumi.RegisterOutputType(ResourceOutput{})
	pulumi.RegisterOutputType(ResourcePtrOutput{})
	pulumi.RegisterOutputType(SourceOutput{})
	pulumi.RegisterOutputType(SourcePtrOutput{})
	pulumi.RegisterOutputType(StatusOutput{})
	pulumi.RegisterOutputType(StatusPtrOutput{})
	pulumi.RegisterOutputType(StorageSourceOutput{})
	pulumi.RegisterOutputType(StorageSourcePtrOutput{})
	pulumi.RegisterOutputType(UpgradeDistributionOutput{})
	pulumi.RegisterOutputType(UpgradeDistributionPtrOutput{})
	pulumi.RegisterOutputType(UpgradeDistributionArrayOutput{})
	pulumi.RegisterOutputType(UpgradeNoteOutput{})
	pulumi.RegisterOutputType(UpgradeNotePtrOutput{})
	pulumi.RegisterOutputType(UpgradeOccurrenceOutput{})
	pulumi.RegisterOutputType(UpgradeOccurrencePtrOutput{})
	pulumi.RegisterOutputType(VersionOutput{})
	pulumi.RegisterOutputType(VersionPtrOutput{})
	pulumi.RegisterOutputType(VulnerabilityDetailsOutput{})
	pulumi.RegisterOutputType(VulnerabilityDetailsPtrOutput{})
	pulumi.RegisterOutputType(VulnerabilityLocationOutput{})
	pulumi.RegisterOutputType(VulnerabilityLocationPtrOutput{})
	pulumi.RegisterOutputType(VulnerabilityTypeOutput{})
	pulumi.RegisterOutputType(VulnerabilityTypePtrOutput{})
}
