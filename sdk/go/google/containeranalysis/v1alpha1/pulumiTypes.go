// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// Indicates which analysis completed successfully. Multiple types of analysis can be performed on a single resource.
type AnalysisCompleted struct {
	// type of analysis that were completed on a resource.
	AnalysisType []string `pulumi:"analysisType"`
}

// AnalysisCompletedInput is an input type that accepts AnalysisCompletedArgs and AnalysisCompletedOutput values.
// You can construct a concrete instance of `AnalysisCompletedInput` via:
//
//	AnalysisCompletedArgs{...}
type AnalysisCompletedInput interface {
	pulumi.Input

	ToAnalysisCompletedOutput() AnalysisCompletedOutput
	ToAnalysisCompletedOutputWithContext(context.Context) AnalysisCompletedOutput
}

// Indicates which analysis completed successfully. Multiple types of analysis can be performed on a single resource.
type AnalysisCompletedArgs struct {
	// type of analysis that were completed on a resource.
	AnalysisType pulumi.StringArrayInput `pulumi:"analysisType"`
}

func (AnalysisCompletedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisCompleted)(nil)).Elem()
}

func (i AnalysisCompletedArgs) ToAnalysisCompletedOutput() AnalysisCompletedOutput {
	return i.ToAnalysisCompletedOutputWithContext(context.Background())
}

func (i AnalysisCompletedArgs) ToAnalysisCompletedOutputWithContext(ctx context.Context) AnalysisCompletedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisCompletedOutput)
}

func (i AnalysisCompletedArgs) ToAnalysisCompletedPtrOutput() AnalysisCompletedPtrOutput {
	return i.ToAnalysisCompletedPtrOutputWithContext(context.Background())
}

func (i AnalysisCompletedArgs) ToAnalysisCompletedPtrOutputWithContext(ctx context.Context) AnalysisCompletedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisCompletedOutput).ToAnalysisCompletedPtrOutputWithContext(ctx)
}

// AnalysisCompletedPtrInput is an input type that accepts AnalysisCompletedArgs, AnalysisCompletedPtr and AnalysisCompletedPtrOutput values.
// You can construct a concrete instance of `AnalysisCompletedPtrInput` via:
//
//	        AnalysisCompletedArgs{...}
//
//	or:
//
//	        nil
type AnalysisCompletedPtrInput interface {
	pulumi.Input

	ToAnalysisCompletedPtrOutput() AnalysisCompletedPtrOutput
	ToAnalysisCompletedPtrOutputWithContext(context.Context) AnalysisCompletedPtrOutput
}

type analysisCompletedPtrType AnalysisCompletedArgs

func AnalysisCompletedPtr(v *AnalysisCompletedArgs) AnalysisCompletedPtrInput {
	return (*analysisCompletedPtrType)(v)
}

func (*analysisCompletedPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AnalysisCompleted)(nil)).Elem()
}

func (i *analysisCompletedPtrType) ToAnalysisCompletedPtrOutput() AnalysisCompletedPtrOutput {
	return i.ToAnalysisCompletedPtrOutputWithContext(context.Background())
}

func (i *analysisCompletedPtrType) ToAnalysisCompletedPtrOutputWithContext(ctx context.Context) AnalysisCompletedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisCompletedPtrOutput)
}

// Indicates which analysis completed successfully. Multiple types of analysis can be performed on a single resource.
type AnalysisCompletedOutput struct{ *pulumi.OutputState }

func (AnalysisCompletedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisCompleted)(nil)).Elem()
}

func (o AnalysisCompletedOutput) ToAnalysisCompletedOutput() AnalysisCompletedOutput {
	return o
}

func (o AnalysisCompletedOutput) ToAnalysisCompletedOutputWithContext(ctx context.Context) AnalysisCompletedOutput {
	return o
}

func (o AnalysisCompletedOutput) ToAnalysisCompletedPtrOutput() AnalysisCompletedPtrOutput {
	return o.ToAnalysisCompletedPtrOutputWithContext(context.Background())
}

func (o AnalysisCompletedOutput) ToAnalysisCompletedPtrOutputWithContext(ctx context.Context) AnalysisCompletedPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AnalysisCompleted) *AnalysisCompleted {
		return &v
	}).(AnalysisCompletedPtrOutput)
}

// type of analysis that were completed on a resource.
func (o AnalysisCompletedOutput) AnalysisType() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AnalysisCompleted) []string { return v.AnalysisType }).(pulumi.StringArrayOutput)
}

type AnalysisCompletedPtrOutput struct{ *pulumi.OutputState }

func (AnalysisCompletedPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnalysisCompleted)(nil)).Elem()
}

func (o AnalysisCompletedPtrOutput) ToAnalysisCompletedPtrOutput() AnalysisCompletedPtrOutput {
	return o
}

func (o AnalysisCompletedPtrOutput) ToAnalysisCompletedPtrOutputWithContext(ctx context.Context) AnalysisCompletedPtrOutput {
	return o
}

func (o AnalysisCompletedPtrOutput) Elem() AnalysisCompletedOutput {
	return o.ApplyT(func(v *AnalysisCompleted) AnalysisCompleted {
		if v != nil {
			return *v
		}
		var ret AnalysisCompleted
		return ret
	}).(AnalysisCompletedOutput)
}

// type of analysis that were completed on a resource.
func (o AnalysisCompletedPtrOutput) AnalysisType() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AnalysisCompleted) []string {
		if v == nil {
			return nil
		}
		return v.AnalysisType
	}).(pulumi.StringArrayOutput)
}

// Indicates which analysis completed successfully. Multiple types of analysis can be performed on a single resource.
type AnalysisCompletedResponse struct {
	// type of analysis that were completed on a resource.
	AnalysisType []string `pulumi:"analysisType"`
}

// Indicates which analysis completed successfully. Multiple types of analysis can be performed on a single resource.
type AnalysisCompletedResponseOutput struct{ *pulumi.OutputState }

func (AnalysisCompletedResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisCompletedResponse)(nil)).Elem()
}

func (o AnalysisCompletedResponseOutput) ToAnalysisCompletedResponseOutput() AnalysisCompletedResponseOutput {
	return o
}

func (o AnalysisCompletedResponseOutput) ToAnalysisCompletedResponseOutputWithContext(ctx context.Context) AnalysisCompletedResponseOutput {
	return o
}

// type of analysis that were completed on a resource.
func (o AnalysisCompletedResponseOutput) AnalysisType() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AnalysisCompletedResponse) []string { return v.AnalysisType }).(pulumi.StringArrayOutput)
}

// Artifact describes a build product.
type Artifact struct {
	// Hash or checksum value of a binary, or Docker Registry 2.0 digest of a container.
	Checksum *string `pulumi:"checksum"`
	// Artifact ID, if any; for container images, this will be a URL by digest like gcr.io/projectID/imagename@sha256:123456
	Id *string `pulumi:"id"`
	// Name of the artifact. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. This field is deprecated in favor of the plural `names` field; it continues to exist here to allow existing BuildProvenance serialized to json in google.devtools.containeranalysis.v1alpha1.BuildDetails.provenance_bytes to deserialize back into proto.
	//
	// Deprecated: Name of the artifact. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. This field is deprecated in favor of the plural `names` field; it continues to exist here to allow existing BuildProvenance serialized to json in google.devtools.containeranalysis.v1alpha1.BuildDetails.provenance_bytes to deserialize back into proto.
	Name *string `pulumi:"name"`
	// Related artifact names. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. Note that a single Artifact ID can have multiple names, for example if two tags are applied to one image.
	Names []string `pulumi:"names"`
}

// ArtifactInput is an input type that accepts ArtifactArgs and ArtifactOutput values.
// You can construct a concrete instance of `ArtifactInput` via:
//
//	ArtifactArgs{...}
type ArtifactInput interface {
	pulumi.Input

	ToArtifactOutput() ArtifactOutput
	ToArtifactOutputWithContext(context.Context) ArtifactOutput
}

// Artifact describes a build product.
type ArtifactArgs struct {
	// Hash or checksum value of a binary, or Docker Registry 2.0 digest of a container.
	Checksum pulumi.StringPtrInput `pulumi:"checksum"`
	// Artifact ID, if any; for container images, this will be a URL by digest like gcr.io/projectID/imagename@sha256:123456
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Name of the artifact. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. This field is deprecated in favor of the plural `names` field; it continues to exist here to allow existing BuildProvenance serialized to json in google.devtools.containeranalysis.v1alpha1.BuildDetails.provenance_bytes to deserialize back into proto.
	//
	// Deprecated: Name of the artifact. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. This field is deprecated in favor of the plural `names` field; it continues to exist here to allow existing BuildProvenance serialized to json in google.devtools.containeranalysis.v1alpha1.BuildDetails.provenance_bytes to deserialize back into proto.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Related artifact names. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. Note that a single Artifact ID can have multiple names, for example if two tags are applied to one image.
	Names pulumi.StringArrayInput `pulumi:"names"`
}

func (ArtifactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Artifact)(nil)).Elem()
}

func (i ArtifactArgs) ToArtifactOutput() ArtifactOutput {
	return i.ToArtifactOutputWithContext(context.Background())
}

func (i ArtifactArgs) ToArtifactOutputWithContext(ctx context.Context) ArtifactOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactOutput)
}

// ArtifactArrayInput is an input type that accepts ArtifactArray and ArtifactArrayOutput values.
// You can construct a concrete instance of `ArtifactArrayInput` via:
//
//	ArtifactArray{ ArtifactArgs{...} }
type ArtifactArrayInput interface {
	pulumi.Input

	ToArtifactArrayOutput() ArtifactArrayOutput
	ToArtifactArrayOutputWithContext(context.Context) ArtifactArrayOutput
}

type ArtifactArray []ArtifactInput

func (ArtifactArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Artifact)(nil)).Elem()
}

func (i ArtifactArray) ToArtifactArrayOutput() ArtifactArrayOutput {
	return i.ToArtifactArrayOutputWithContext(context.Background())
}

func (i ArtifactArray) ToArtifactArrayOutputWithContext(ctx context.Context) ArtifactArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactArrayOutput)
}

// Artifact describes a build product.
type ArtifactOutput struct{ *pulumi.OutputState }

func (ArtifactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Artifact)(nil)).Elem()
}

func (o ArtifactOutput) ToArtifactOutput() ArtifactOutput {
	return o
}

func (o ArtifactOutput) ToArtifactOutputWithContext(ctx context.Context) ArtifactOutput {
	return o
}

// Hash or checksum value of a binary, or Docker Registry 2.0 digest of a container.
func (o ArtifactOutput) Checksum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Artifact) *string { return v.Checksum }).(pulumi.StringPtrOutput)
}

// Artifact ID, if any; for container images, this will be a URL by digest like gcr.io/projectID/imagename@sha256:123456
func (o ArtifactOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Artifact) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Name of the artifact. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. This field is deprecated in favor of the plural `names` field; it continues to exist here to allow existing BuildProvenance serialized to json in google.devtools.containeranalysis.v1alpha1.BuildDetails.provenance_bytes to deserialize back into proto.
//
// Deprecated: Name of the artifact. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. This field is deprecated in favor of the plural `names` field; it continues to exist here to allow existing BuildProvenance serialized to json in google.devtools.containeranalysis.v1alpha1.BuildDetails.provenance_bytes to deserialize back into proto.
func (o ArtifactOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Artifact) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Related artifact names. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. Note that a single Artifact ID can have multiple names, for example if two tags are applied to one image.
func (o ArtifactOutput) Names() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Artifact) []string { return v.Names }).(pulumi.StringArrayOutput)
}

type ArtifactArrayOutput struct{ *pulumi.OutputState }

func (ArtifactArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Artifact)(nil)).Elem()
}

func (o ArtifactArrayOutput) ToArtifactArrayOutput() ArtifactArrayOutput {
	return o
}

func (o ArtifactArrayOutput) ToArtifactArrayOutputWithContext(ctx context.Context) ArtifactArrayOutput {
	return o
}

func (o ArtifactArrayOutput) Index(i pulumi.IntInput) ArtifactOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Artifact {
		return vs[0].([]Artifact)[vs[1].(int)]
	}).(ArtifactOutput)
}

// Artifact describes a build product.
type ArtifactResponse struct {
	// Hash or checksum value of a binary, or Docker Registry 2.0 digest of a container.
	Checksum string `pulumi:"checksum"`
	// Name of the artifact. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. This field is deprecated in favor of the plural `names` field; it continues to exist here to allow existing BuildProvenance serialized to json in google.devtools.containeranalysis.v1alpha1.BuildDetails.provenance_bytes to deserialize back into proto.
	//
	// Deprecated: Name of the artifact. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. This field is deprecated in favor of the plural `names` field; it continues to exist here to allow existing BuildProvenance serialized to json in google.devtools.containeranalysis.v1alpha1.BuildDetails.provenance_bytes to deserialize back into proto.
	Name string `pulumi:"name"`
	// Related artifact names. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. Note that a single Artifact ID can have multiple names, for example if two tags are applied to one image.
	Names []string `pulumi:"names"`
}

// Artifact describes a build product.
type ArtifactResponseOutput struct{ *pulumi.OutputState }

func (ArtifactResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArtifactResponse)(nil)).Elem()
}

func (o ArtifactResponseOutput) ToArtifactResponseOutput() ArtifactResponseOutput {
	return o
}

func (o ArtifactResponseOutput) ToArtifactResponseOutputWithContext(ctx context.Context) ArtifactResponseOutput {
	return o
}

// Hash or checksum value of a binary, or Docker Registry 2.0 digest of a container.
func (o ArtifactResponseOutput) Checksum() pulumi.StringOutput {
	return o.ApplyT(func(v ArtifactResponse) string { return v.Checksum }).(pulumi.StringOutput)
}

// Name of the artifact. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. This field is deprecated in favor of the plural `names` field; it continues to exist here to allow existing BuildProvenance serialized to json in google.devtools.containeranalysis.v1alpha1.BuildDetails.provenance_bytes to deserialize back into proto.
//
// Deprecated: Name of the artifact. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. This field is deprecated in favor of the plural `names` field; it continues to exist here to allow existing BuildProvenance serialized to json in google.devtools.containeranalysis.v1alpha1.BuildDetails.provenance_bytes to deserialize back into proto.
func (o ArtifactResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ArtifactResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Related artifact names. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. Note that a single Artifact ID can have multiple names, for example if two tags are applied to one image.
func (o ArtifactResponseOutput) Names() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ArtifactResponse) []string { return v.Names }).(pulumi.StringArrayOutput)
}

type ArtifactResponseArrayOutput struct{ *pulumi.OutputState }

func (ArtifactResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ArtifactResponse)(nil)).Elem()
}

func (o ArtifactResponseArrayOutput) ToArtifactResponseArrayOutput() ArtifactResponseArrayOutput {
	return o
}

func (o ArtifactResponseArrayOutput) ToArtifactResponseArrayOutputWithContext(ctx context.Context) ArtifactResponseArrayOutput {
	return o
}

func (o ArtifactResponseArrayOutput) Index(i pulumi.IntInput) ArtifactResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ArtifactResponse {
		return vs[0].([]ArtifactResponse)[vs[1].(int)]
	}).(ArtifactResponseOutput)
}

// Assessment provides all information that is related to a single vulnerability for this product.
type Assessment struct {
	// Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability.
	Cve *string `pulumi:"cve"`
	// Contains information about the impact of this vulnerability, this will change with time.
	Impacts []string `pulumi:"impacts"`
	// Justification provides the justification when the state of the assessment if NOT_AFFECTED.
	Justification *Justification `pulumi:"justification"`
	// A detailed description of this Vex.
	LongDescription *string `pulumi:"longDescription"`
	// Holds a list of references associated with this vulnerability item and assessment. These uris have additional information about the vulnerability and the assessment itself. E.g. Link to a document which details how this assessment concluded the state of this vulnerability.
	RelatedUris []URI `pulumi:"relatedUris"`
	// Specifies details on how to handle (and presumably, fix) a vulnerability.
	Remediations []Remediation `pulumi:"remediations"`
	// A one sentence description of this Vex.
	ShortDescription *string `pulumi:"shortDescription"`
	// Provides the state of this Vulnerability assessment.
	State *AssessmentState `pulumi:"state"`
	// The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc.
	VulnerabilityId *string `pulumi:"vulnerabilityId"`
}

// AssessmentInput is an input type that accepts AssessmentArgs and AssessmentOutput values.
// You can construct a concrete instance of `AssessmentInput` via:
//
//	AssessmentArgs{...}
type AssessmentInput interface {
	pulumi.Input

	ToAssessmentOutput() AssessmentOutput
	ToAssessmentOutputWithContext(context.Context) AssessmentOutput
}

// Assessment provides all information that is related to a single vulnerability for this product.
type AssessmentArgs struct {
	// Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability.
	Cve pulumi.StringPtrInput `pulumi:"cve"`
	// Contains information about the impact of this vulnerability, this will change with time.
	Impacts pulumi.StringArrayInput `pulumi:"impacts"`
	// Justification provides the justification when the state of the assessment if NOT_AFFECTED.
	Justification JustificationPtrInput `pulumi:"justification"`
	// A detailed description of this Vex.
	LongDescription pulumi.StringPtrInput `pulumi:"longDescription"`
	// Holds a list of references associated with this vulnerability item and assessment. These uris have additional information about the vulnerability and the assessment itself. E.g. Link to a document which details how this assessment concluded the state of this vulnerability.
	RelatedUris URIArrayInput `pulumi:"relatedUris"`
	// Specifies details on how to handle (and presumably, fix) a vulnerability.
	Remediations RemediationArrayInput `pulumi:"remediations"`
	// A one sentence description of this Vex.
	ShortDescription pulumi.StringPtrInput `pulumi:"shortDescription"`
	// Provides the state of this Vulnerability assessment.
	State AssessmentStatePtrInput `pulumi:"state"`
	// The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc.
	VulnerabilityId pulumi.StringPtrInput `pulumi:"vulnerabilityId"`
}

func (AssessmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Assessment)(nil)).Elem()
}

func (i AssessmentArgs) ToAssessmentOutput() AssessmentOutput {
	return i.ToAssessmentOutputWithContext(context.Background())
}

func (i AssessmentArgs) ToAssessmentOutputWithContext(ctx context.Context) AssessmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentOutput)
}

func (i AssessmentArgs) ToAssessmentPtrOutput() AssessmentPtrOutput {
	return i.ToAssessmentPtrOutputWithContext(context.Background())
}

func (i AssessmentArgs) ToAssessmentPtrOutputWithContext(ctx context.Context) AssessmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentOutput).ToAssessmentPtrOutputWithContext(ctx)
}

// AssessmentPtrInput is an input type that accepts AssessmentArgs, AssessmentPtr and AssessmentPtrOutput values.
// You can construct a concrete instance of `AssessmentPtrInput` via:
//
//	        AssessmentArgs{...}
//
//	or:
//
//	        nil
type AssessmentPtrInput interface {
	pulumi.Input

	ToAssessmentPtrOutput() AssessmentPtrOutput
	ToAssessmentPtrOutputWithContext(context.Context) AssessmentPtrOutput
}

type assessmentPtrType AssessmentArgs

func AssessmentPtr(v *AssessmentArgs) AssessmentPtrInput {
	return (*assessmentPtrType)(v)
}

func (*assessmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Assessment)(nil)).Elem()
}

func (i *assessmentPtrType) ToAssessmentPtrOutput() AssessmentPtrOutput {
	return i.ToAssessmentPtrOutputWithContext(context.Background())
}

func (i *assessmentPtrType) ToAssessmentPtrOutputWithContext(ctx context.Context) AssessmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentPtrOutput)
}

// Assessment provides all information that is related to a single vulnerability for this product.
type AssessmentOutput struct{ *pulumi.OutputState }

func (AssessmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Assessment)(nil)).Elem()
}

func (o AssessmentOutput) ToAssessmentOutput() AssessmentOutput {
	return o
}

func (o AssessmentOutput) ToAssessmentOutputWithContext(ctx context.Context) AssessmentOutput {
	return o
}

func (o AssessmentOutput) ToAssessmentPtrOutput() AssessmentPtrOutput {
	return o.ToAssessmentPtrOutputWithContext(context.Background())
}

func (o AssessmentOutput) ToAssessmentPtrOutputWithContext(ctx context.Context) AssessmentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Assessment) *Assessment {
		return &v
	}).(AssessmentPtrOutput)
}

// Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability.
func (o AssessmentOutput) Cve() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Assessment) *string { return v.Cve }).(pulumi.StringPtrOutput)
}

// Contains information about the impact of this vulnerability, this will change with time.
func (o AssessmentOutput) Impacts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Assessment) []string { return v.Impacts }).(pulumi.StringArrayOutput)
}

// Justification provides the justification when the state of the assessment if NOT_AFFECTED.
func (o AssessmentOutput) Justification() JustificationPtrOutput {
	return o.ApplyT(func(v Assessment) *Justification { return v.Justification }).(JustificationPtrOutput)
}

// A detailed description of this Vex.
func (o AssessmentOutput) LongDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Assessment) *string { return v.LongDescription }).(pulumi.StringPtrOutput)
}

// Holds a list of references associated with this vulnerability item and assessment. These uris have additional information about the vulnerability and the assessment itself. E.g. Link to a document which details how this assessment concluded the state of this vulnerability.
func (o AssessmentOutput) RelatedUris() URIArrayOutput {
	return o.ApplyT(func(v Assessment) []URI { return v.RelatedUris }).(URIArrayOutput)
}

// Specifies details on how to handle (and presumably, fix) a vulnerability.
func (o AssessmentOutput) Remediations() RemediationArrayOutput {
	return o.ApplyT(func(v Assessment) []Remediation { return v.Remediations }).(RemediationArrayOutput)
}

// A one sentence description of this Vex.
func (o AssessmentOutput) ShortDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Assessment) *string { return v.ShortDescription }).(pulumi.StringPtrOutput)
}

// Provides the state of this Vulnerability assessment.
func (o AssessmentOutput) State() AssessmentStatePtrOutput {
	return o.ApplyT(func(v Assessment) *AssessmentState { return v.State }).(AssessmentStatePtrOutput)
}

// The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc.
func (o AssessmentOutput) VulnerabilityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Assessment) *string { return v.VulnerabilityId }).(pulumi.StringPtrOutput)
}

type AssessmentPtrOutput struct{ *pulumi.OutputState }

func (AssessmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Assessment)(nil)).Elem()
}

func (o AssessmentPtrOutput) ToAssessmentPtrOutput() AssessmentPtrOutput {
	return o
}

func (o AssessmentPtrOutput) ToAssessmentPtrOutputWithContext(ctx context.Context) AssessmentPtrOutput {
	return o
}

func (o AssessmentPtrOutput) Elem() AssessmentOutput {
	return o.ApplyT(func(v *Assessment) Assessment {
		if v != nil {
			return *v
		}
		var ret Assessment
		return ret
	}).(AssessmentOutput)
}

// Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability.
func (o AssessmentPtrOutput) Cve() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Assessment) *string {
		if v == nil {
			return nil
		}
		return v.Cve
	}).(pulumi.StringPtrOutput)
}

// Contains information about the impact of this vulnerability, this will change with time.
func (o AssessmentPtrOutput) Impacts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Assessment) []string {
		if v == nil {
			return nil
		}
		return v.Impacts
	}).(pulumi.StringArrayOutput)
}

// Justification provides the justification when the state of the assessment if NOT_AFFECTED.
func (o AssessmentPtrOutput) Justification() JustificationPtrOutput {
	return o.ApplyT(func(v *Assessment) *Justification {
		if v == nil {
			return nil
		}
		return v.Justification
	}).(JustificationPtrOutput)
}

// A detailed description of this Vex.
func (o AssessmentPtrOutput) LongDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Assessment) *string {
		if v == nil {
			return nil
		}
		return v.LongDescription
	}).(pulumi.StringPtrOutput)
}

// Holds a list of references associated with this vulnerability item and assessment. These uris have additional information about the vulnerability and the assessment itself. E.g. Link to a document which details how this assessment concluded the state of this vulnerability.
func (o AssessmentPtrOutput) RelatedUris() URIArrayOutput {
	return o.ApplyT(func(v *Assessment) []URI {
		if v == nil {
			return nil
		}
		return v.RelatedUris
	}).(URIArrayOutput)
}

// Specifies details on how to handle (and presumably, fix) a vulnerability.
func (o AssessmentPtrOutput) Remediations() RemediationArrayOutput {
	return o.ApplyT(func(v *Assessment) []Remediation {
		if v == nil {
			return nil
		}
		return v.Remediations
	}).(RemediationArrayOutput)
}

// A one sentence description of this Vex.
func (o AssessmentPtrOutput) ShortDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Assessment) *string {
		if v == nil {
			return nil
		}
		return v.ShortDescription
	}).(pulumi.StringPtrOutput)
}

// Provides the state of this Vulnerability assessment.
func (o AssessmentPtrOutput) State() AssessmentStatePtrOutput {
	return o.ApplyT(func(v *Assessment) *AssessmentState {
		if v == nil {
			return nil
		}
		return v.State
	}).(AssessmentStatePtrOutput)
}

// The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc.
func (o AssessmentPtrOutput) VulnerabilityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Assessment) *string {
		if v == nil {
			return nil
		}
		return v.VulnerabilityId
	}).(pulumi.StringPtrOutput)
}

// Assessment provides all information that is related to a single vulnerability for this product.
type AssessmentResponse struct {
	// Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability.
	Cve string `pulumi:"cve"`
	// Contains information about the impact of this vulnerability, this will change with time.
	Impacts []string `pulumi:"impacts"`
	// Justification provides the justification when the state of the assessment if NOT_AFFECTED.
	Justification JustificationResponse `pulumi:"justification"`
	// A detailed description of this Vex.
	LongDescription string `pulumi:"longDescription"`
	// Holds a list of references associated with this vulnerability item and assessment. These uris have additional information about the vulnerability and the assessment itself. E.g. Link to a document which details how this assessment concluded the state of this vulnerability.
	RelatedUris []URIResponse `pulumi:"relatedUris"`
	// Specifies details on how to handle (and presumably, fix) a vulnerability.
	Remediations []RemediationResponse `pulumi:"remediations"`
	// A one sentence description of this Vex.
	ShortDescription string `pulumi:"shortDescription"`
	// Provides the state of this Vulnerability assessment.
	State string `pulumi:"state"`
	// The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc.
	VulnerabilityId string `pulumi:"vulnerabilityId"`
}

// Assessment provides all information that is related to a single vulnerability for this product.
type AssessmentResponseOutput struct{ *pulumi.OutputState }

func (AssessmentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentResponse)(nil)).Elem()
}

func (o AssessmentResponseOutput) ToAssessmentResponseOutput() AssessmentResponseOutput {
	return o
}

func (o AssessmentResponseOutput) ToAssessmentResponseOutputWithContext(ctx context.Context) AssessmentResponseOutput {
	return o
}

// Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability.
func (o AssessmentResponseOutput) Cve() pulumi.StringOutput {
	return o.ApplyT(func(v AssessmentResponse) string { return v.Cve }).(pulumi.StringOutput)
}

// Contains information about the impact of this vulnerability, this will change with time.
func (o AssessmentResponseOutput) Impacts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AssessmentResponse) []string { return v.Impacts }).(pulumi.StringArrayOutput)
}

// Justification provides the justification when the state of the assessment if NOT_AFFECTED.
func (o AssessmentResponseOutput) Justification() JustificationResponseOutput {
	return o.ApplyT(func(v AssessmentResponse) JustificationResponse { return v.Justification }).(JustificationResponseOutput)
}

// A detailed description of this Vex.
func (o AssessmentResponseOutput) LongDescription() pulumi.StringOutput {
	return o.ApplyT(func(v AssessmentResponse) string { return v.LongDescription }).(pulumi.StringOutput)
}

// Holds a list of references associated with this vulnerability item and assessment. These uris have additional information about the vulnerability and the assessment itself. E.g. Link to a document which details how this assessment concluded the state of this vulnerability.
func (o AssessmentResponseOutput) RelatedUris() URIResponseArrayOutput {
	return o.ApplyT(func(v AssessmentResponse) []URIResponse { return v.RelatedUris }).(URIResponseArrayOutput)
}

// Specifies details on how to handle (and presumably, fix) a vulnerability.
func (o AssessmentResponseOutput) Remediations() RemediationResponseArrayOutput {
	return o.ApplyT(func(v AssessmentResponse) []RemediationResponse { return v.Remediations }).(RemediationResponseArrayOutput)
}

// A one sentence description of this Vex.
func (o AssessmentResponseOutput) ShortDescription() pulumi.StringOutput {
	return o.ApplyT(func(v AssessmentResponse) string { return v.ShortDescription }).(pulumi.StringOutput)
}

// Provides the state of this Vulnerability assessment.
func (o AssessmentResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v AssessmentResponse) string { return v.State }).(pulumi.StringOutput)
}

// The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc.
func (o AssessmentResponseOutput) VulnerabilityId() pulumi.StringOutput {
	return o.ApplyT(func(v AssessmentResponse) string { return v.VulnerabilityId }).(pulumi.StringOutput)
}

// Occurrence that represents a single "attestation". The authenticity of an Attestation can be verified using the attached signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish trust. In this circumstance, the AttestationAuthority to which this Attestation is attached is primarily useful for look-up (how to find this Attestation if you already know the Authority and artifact to be verified) and intent (which authority was this attestation intended to sign for).
type Attestation struct {
	PgpSignedAttestation *PgpSignedAttestation `pulumi:"pgpSignedAttestation"`
}

// AttestationInput is an input type that accepts AttestationArgs and AttestationOutput values.
// You can construct a concrete instance of `AttestationInput` via:
//
//	AttestationArgs{...}
type AttestationInput interface {
	pulumi.Input

	ToAttestationOutput() AttestationOutput
	ToAttestationOutputWithContext(context.Context) AttestationOutput
}

// Occurrence that represents a single "attestation". The authenticity of an Attestation can be verified using the attached signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish trust. In this circumstance, the AttestationAuthority to which this Attestation is attached is primarily useful for look-up (how to find this Attestation if you already know the Authority and artifact to be verified) and intent (which authority was this attestation intended to sign for).
type AttestationArgs struct {
	PgpSignedAttestation PgpSignedAttestationPtrInput `pulumi:"pgpSignedAttestation"`
}

func (AttestationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Attestation)(nil)).Elem()
}

func (i AttestationArgs) ToAttestationOutput() AttestationOutput {
	return i.ToAttestationOutputWithContext(context.Background())
}

func (i AttestationArgs) ToAttestationOutputWithContext(ctx context.Context) AttestationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttestationOutput)
}

func (i AttestationArgs) ToAttestationPtrOutput() AttestationPtrOutput {
	return i.ToAttestationPtrOutputWithContext(context.Background())
}

func (i AttestationArgs) ToAttestationPtrOutputWithContext(ctx context.Context) AttestationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttestationOutput).ToAttestationPtrOutputWithContext(ctx)
}

// AttestationPtrInput is an input type that accepts AttestationArgs, AttestationPtr and AttestationPtrOutput values.
// You can construct a concrete instance of `AttestationPtrInput` via:
//
//	        AttestationArgs{...}
//
//	or:
//
//	        nil
type AttestationPtrInput interface {
	pulumi.Input

	ToAttestationPtrOutput() AttestationPtrOutput
	ToAttestationPtrOutputWithContext(context.Context) AttestationPtrOutput
}

type attestationPtrType AttestationArgs

func AttestationPtr(v *AttestationArgs) AttestationPtrInput {
	return (*attestationPtrType)(v)
}

func (*attestationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Attestation)(nil)).Elem()
}

func (i *attestationPtrType) ToAttestationPtrOutput() AttestationPtrOutput {
	return i.ToAttestationPtrOutputWithContext(context.Background())
}

func (i *attestationPtrType) ToAttestationPtrOutputWithContext(ctx context.Context) AttestationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttestationPtrOutput)
}

// Occurrence that represents a single "attestation". The authenticity of an Attestation can be verified using the attached signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish trust. In this circumstance, the AttestationAuthority to which this Attestation is attached is primarily useful for look-up (how to find this Attestation if you already know the Authority and artifact to be verified) and intent (which authority was this attestation intended to sign for).
type AttestationOutput struct{ *pulumi.OutputState }

func (AttestationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Attestation)(nil)).Elem()
}

func (o AttestationOutput) ToAttestationOutput() AttestationOutput {
	return o
}

func (o AttestationOutput) ToAttestationOutputWithContext(ctx context.Context) AttestationOutput {
	return o
}

func (o AttestationOutput) ToAttestationPtrOutput() AttestationPtrOutput {
	return o.ToAttestationPtrOutputWithContext(context.Background())
}

func (o AttestationOutput) ToAttestationPtrOutputWithContext(ctx context.Context) AttestationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Attestation) *Attestation {
		return &v
	}).(AttestationPtrOutput)
}

func (o AttestationOutput) PgpSignedAttestation() PgpSignedAttestationPtrOutput {
	return o.ApplyT(func(v Attestation) *PgpSignedAttestation { return v.PgpSignedAttestation }).(PgpSignedAttestationPtrOutput)
}

type AttestationPtrOutput struct{ *pulumi.OutputState }

func (AttestationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Attestation)(nil)).Elem()
}

func (o AttestationPtrOutput) ToAttestationPtrOutput() AttestationPtrOutput {
	return o
}

func (o AttestationPtrOutput) ToAttestationPtrOutputWithContext(ctx context.Context) AttestationPtrOutput {
	return o
}

func (o AttestationPtrOutput) Elem() AttestationOutput {
	return o.ApplyT(func(v *Attestation) Attestation {
		if v != nil {
			return *v
		}
		var ret Attestation
		return ret
	}).(AttestationOutput)
}

func (o AttestationPtrOutput) PgpSignedAttestation() PgpSignedAttestationPtrOutput {
	return o.ApplyT(func(v *Attestation) *PgpSignedAttestation {
		if v == nil {
			return nil
		}
		return v.PgpSignedAttestation
	}).(PgpSignedAttestationPtrOutput)
}

// Note kind that represents a logical attestation "role" or "authority". For example, an organization might have one `AttestationAuthority` for "QA" and one for "build". This Note is intended to act strictly as a grouping mechanism for the attached Occurrences (Attestations). This grouping mechanism also provides a security boundary, since IAM ACLs gate the ability for a principle to attach an Occurrence to a given Note. It also provides a single point of lookup to find all attached Attestation Occurrences, even if they don't all live in the same project.
type AttestationAuthority struct {
	Hint *AttestationAuthorityHint `pulumi:"hint"`
}

// AttestationAuthorityInput is an input type that accepts AttestationAuthorityArgs and AttestationAuthorityOutput values.
// You can construct a concrete instance of `AttestationAuthorityInput` via:
//
//	AttestationAuthorityArgs{...}
type AttestationAuthorityInput interface {
	pulumi.Input

	ToAttestationAuthorityOutput() AttestationAuthorityOutput
	ToAttestationAuthorityOutputWithContext(context.Context) AttestationAuthorityOutput
}

// Note kind that represents a logical attestation "role" or "authority". For example, an organization might have one `AttestationAuthority` for "QA" and one for "build". This Note is intended to act strictly as a grouping mechanism for the attached Occurrences (Attestations). This grouping mechanism also provides a security boundary, since IAM ACLs gate the ability for a principle to attach an Occurrence to a given Note. It also provides a single point of lookup to find all attached Attestation Occurrences, even if they don't all live in the same project.
type AttestationAuthorityArgs struct {
	Hint AttestationAuthorityHintPtrInput `pulumi:"hint"`
}

func (AttestationAuthorityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AttestationAuthority)(nil)).Elem()
}

func (i AttestationAuthorityArgs) ToAttestationAuthorityOutput() AttestationAuthorityOutput {
	return i.ToAttestationAuthorityOutputWithContext(context.Background())
}

func (i AttestationAuthorityArgs) ToAttestationAuthorityOutputWithContext(ctx context.Context) AttestationAuthorityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttestationAuthorityOutput)
}

func (i AttestationAuthorityArgs) ToAttestationAuthorityPtrOutput() AttestationAuthorityPtrOutput {
	return i.ToAttestationAuthorityPtrOutputWithContext(context.Background())
}

func (i AttestationAuthorityArgs) ToAttestationAuthorityPtrOutputWithContext(ctx context.Context) AttestationAuthorityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttestationAuthorityOutput).ToAttestationAuthorityPtrOutputWithContext(ctx)
}

// AttestationAuthorityPtrInput is an input type that accepts AttestationAuthorityArgs, AttestationAuthorityPtr and AttestationAuthorityPtrOutput values.
// You can construct a concrete instance of `AttestationAuthorityPtrInput` via:
//
//	        AttestationAuthorityArgs{...}
//
//	or:
//
//	        nil
type AttestationAuthorityPtrInput interface {
	pulumi.Input

	ToAttestationAuthorityPtrOutput() AttestationAuthorityPtrOutput
	ToAttestationAuthorityPtrOutputWithContext(context.Context) AttestationAuthorityPtrOutput
}

type attestationAuthorityPtrType AttestationAuthorityArgs

func AttestationAuthorityPtr(v *AttestationAuthorityArgs) AttestationAuthorityPtrInput {
	return (*attestationAuthorityPtrType)(v)
}

func (*attestationAuthorityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AttestationAuthority)(nil)).Elem()
}

func (i *attestationAuthorityPtrType) ToAttestationAuthorityPtrOutput() AttestationAuthorityPtrOutput {
	return i.ToAttestationAuthorityPtrOutputWithContext(context.Background())
}

func (i *attestationAuthorityPtrType) ToAttestationAuthorityPtrOutputWithContext(ctx context.Context) AttestationAuthorityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttestationAuthorityPtrOutput)
}

// Note kind that represents a logical attestation "role" or "authority". For example, an organization might have one `AttestationAuthority` for "QA" and one for "build". This Note is intended to act strictly as a grouping mechanism for the attached Occurrences (Attestations). This grouping mechanism also provides a security boundary, since IAM ACLs gate the ability for a principle to attach an Occurrence to a given Note. It also provides a single point of lookup to find all attached Attestation Occurrences, even if they don't all live in the same project.
type AttestationAuthorityOutput struct{ *pulumi.OutputState }

func (AttestationAuthorityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AttestationAuthority)(nil)).Elem()
}

func (o AttestationAuthorityOutput) ToAttestationAuthorityOutput() AttestationAuthorityOutput {
	return o
}

func (o AttestationAuthorityOutput) ToAttestationAuthorityOutputWithContext(ctx context.Context) AttestationAuthorityOutput {
	return o
}

func (o AttestationAuthorityOutput) ToAttestationAuthorityPtrOutput() AttestationAuthorityPtrOutput {
	return o.ToAttestationAuthorityPtrOutputWithContext(context.Background())
}

func (o AttestationAuthorityOutput) ToAttestationAuthorityPtrOutputWithContext(ctx context.Context) AttestationAuthorityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AttestationAuthority) *AttestationAuthority {
		return &v
	}).(AttestationAuthorityPtrOutput)
}

func (o AttestationAuthorityOutput) Hint() AttestationAuthorityHintPtrOutput {
	return o.ApplyT(func(v AttestationAuthority) *AttestationAuthorityHint { return v.Hint }).(AttestationAuthorityHintPtrOutput)
}

type AttestationAuthorityPtrOutput struct{ *pulumi.OutputState }

func (AttestationAuthorityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AttestationAuthority)(nil)).Elem()
}

func (o AttestationAuthorityPtrOutput) ToAttestationAuthorityPtrOutput() AttestationAuthorityPtrOutput {
	return o
}

func (o AttestationAuthorityPtrOutput) ToAttestationAuthorityPtrOutputWithContext(ctx context.Context) AttestationAuthorityPtrOutput {
	return o
}

func (o AttestationAuthorityPtrOutput) Elem() AttestationAuthorityOutput {
	return o.ApplyT(func(v *AttestationAuthority) AttestationAuthority {
		if v != nil {
			return *v
		}
		var ret AttestationAuthority
		return ret
	}).(AttestationAuthorityOutput)
}

func (o AttestationAuthorityPtrOutput) Hint() AttestationAuthorityHintPtrOutput {
	return o.ApplyT(func(v *AttestationAuthority) *AttestationAuthorityHint {
		if v == nil {
			return nil
		}
		return v.Hint
	}).(AttestationAuthorityHintPtrOutput)
}

// This submessage provides human-readable hints about the purpose of the AttestationAuthority. Because the name of a Note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from "readable" names more suitable for debug output. Note that these hints should NOT be used to look up AttestationAuthorities in security sensitive contexts, such as when looking up Attestations to verify.
type AttestationAuthorityHint struct {
	// The human readable name of this Attestation Authority, for example "qa".
	HumanReadableName *string `pulumi:"humanReadableName"`
}

// AttestationAuthorityHintInput is an input type that accepts AttestationAuthorityHintArgs and AttestationAuthorityHintOutput values.
// You can construct a concrete instance of `AttestationAuthorityHintInput` via:
//
//	AttestationAuthorityHintArgs{...}
type AttestationAuthorityHintInput interface {
	pulumi.Input

	ToAttestationAuthorityHintOutput() AttestationAuthorityHintOutput
	ToAttestationAuthorityHintOutputWithContext(context.Context) AttestationAuthorityHintOutput
}

// This submessage provides human-readable hints about the purpose of the AttestationAuthority. Because the name of a Note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from "readable" names more suitable for debug output. Note that these hints should NOT be used to look up AttestationAuthorities in security sensitive contexts, such as when looking up Attestations to verify.
type AttestationAuthorityHintArgs struct {
	// The human readable name of this Attestation Authority, for example "qa".
	HumanReadableName pulumi.StringPtrInput `pulumi:"humanReadableName"`
}

func (AttestationAuthorityHintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AttestationAuthorityHint)(nil)).Elem()
}

func (i AttestationAuthorityHintArgs) ToAttestationAuthorityHintOutput() AttestationAuthorityHintOutput {
	return i.ToAttestationAuthorityHintOutputWithContext(context.Background())
}

func (i AttestationAuthorityHintArgs) ToAttestationAuthorityHintOutputWithContext(ctx context.Context) AttestationAuthorityHintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttestationAuthorityHintOutput)
}

func (i AttestationAuthorityHintArgs) ToAttestationAuthorityHintPtrOutput() AttestationAuthorityHintPtrOutput {
	return i.ToAttestationAuthorityHintPtrOutputWithContext(context.Background())
}

func (i AttestationAuthorityHintArgs) ToAttestationAuthorityHintPtrOutputWithContext(ctx context.Context) AttestationAuthorityHintPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttestationAuthorityHintOutput).ToAttestationAuthorityHintPtrOutputWithContext(ctx)
}

// AttestationAuthorityHintPtrInput is an input type that accepts AttestationAuthorityHintArgs, AttestationAuthorityHintPtr and AttestationAuthorityHintPtrOutput values.
// You can construct a concrete instance of `AttestationAuthorityHintPtrInput` via:
//
//	        AttestationAuthorityHintArgs{...}
//
//	or:
//
//	        nil
type AttestationAuthorityHintPtrInput interface {
	pulumi.Input

	ToAttestationAuthorityHintPtrOutput() AttestationAuthorityHintPtrOutput
	ToAttestationAuthorityHintPtrOutputWithContext(context.Context) AttestationAuthorityHintPtrOutput
}

type attestationAuthorityHintPtrType AttestationAuthorityHintArgs

func AttestationAuthorityHintPtr(v *AttestationAuthorityHintArgs) AttestationAuthorityHintPtrInput {
	return (*attestationAuthorityHintPtrType)(v)
}

func (*attestationAuthorityHintPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AttestationAuthorityHint)(nil)).Elem()
}

func (i *attestationAuthorityHintPtrType) ToAttestationAuthorityHintPtrOutput() AttestationAuthorityHintPtrOutput {
	return i.ToAttestationAuthorityHintPtrOutputWithContext(context.Background())
}

func (i *attestationAuthorityHintPtrType) ToAttestationAuthorityHintPtrOutputWithContext(ctx context.Context) AttestationAuthorityHintPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttestationAuthorityHintPtrOutput)
}

// This submessage provides human-readable hints about the purpose of the AttestationAuthority. Because the name of a Note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from "readable" names more suitable for debug output. Note that these hints should NOT be used to look up AttestationAuthorities in security sensitive contexts, such as when looking up Attestations to verify.
type AttestationAuthorityHintOutput struct{ *pulumi.OutputState }

func (AttestationAuthorityHintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AttestationAuthorityHint)(nil)).Elem()
}

func (o AttestationAuthorityHintOutput) ToAttestationAuthorityHintOutput() AttestationAuthorityHintOutput {
	return o
}

func (o AttestationAuthorityHintOutput) ToAttestationAuthorityHintOutputWithContext(ctx context.Context) AttestationAuthorityHintOutput {
	return o
}

func (o AttestationAuthorityHintOutput) ToAttestationAuthorityHintPtrOutput() AttestationAuthorityHintPtrOutput {
	return o.ToAttestationAuthorityHintPtrOutputWithContext(context.Background())
}

func (o AttestationAuthorityHintOutput) ToAttestationAuthorityHintPtrOutputWithContext(ctx context.Context) AttestationAuthorityHintPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AttestationAuthorityHint) *AttestationAuthorityHint {
		return &v
	}).(AttestationAuthorityHintPtrOutput)
}

// The human readable name of this Attestation Authority, for example "qa".
func (o AttestationAuthorityHintOutput) HumanReadableName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AttestationAuthorityHint) *string { return v.HumanReadableName }).(pulumi.StringPtrOutput)
}

type AttestationAuthorityHintPtrOutput struct{ *pulumi.OutputState }

func (AttestationAuthorityHintPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AttestationAuthorityHint)(nil)).Elem()
}

func (o AttestationAuthorityHintPtrOutput) ToAttestationAuthorityHintPtrOutput() AttestationAuthorityHintPtrOutput {
	return o
}

func (o AttestationAuthorityHintPtrOutput) ToAttestationAuthorityHintPtrOutputWithContext(ctx context.Context) AttestationAuthorityHintPtrOutput {
	return o
}

func (o AttestationAuthorityHintPtrOutput) Elem() AttestationAuthorityHintOutput {
	return o.ApplyT(func(v *AttestationAuthorityHint) AttestationAuthorityHint {
		if v != nil {
			return *v
		}
		var ret AttestationAuthorityHint
		return ret
	}).(AttestationAuthorityHintOutput)
}

// The human readable name of this Attestation Authority, for example "qa".
func (o AttestationAuthorityHintPtrOutput) HumanReadableName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AttestationAuthorityHint) *string {
		if v == nil {
			return nil
		}
		return v.HumanReadableName
	}).(pulumi.StringPtrOutput)
}

// This submessage provides human-readable hints about the purpose of the AttestationAuthority. Because the name of a Note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from "readable" names more suitable for debug output. Note that these hints should NOT be used to look up AttestationAuthorities in security sensitive contexts, such as when looking up Attestations to verify.
type AttestationAuthorityHintResponse struct {
	// The human readable name of this Attestation Authority, for example "qa".
	HumanReadableName string `pulumi:"humanReadableName"`
}

// This submessage provides human-readable hints about the purpose of the AttestationAuthority. Because the name of a Note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from "readable" names more suitable for debug output. Note that these hints should NOT be used to look up AttestationAuthorities in security sensitive contexts, such as when looking up Attestations to verify.
type AttestationAuthorityHintResponseOutput struct{ *pulumi.OutputState }

func (AttestationAuthorityHintResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AttestationAuthorityHintResponse)(nil)).Elem()
}

func (o AttestationAuthorityHintResponseOutput) ToAttestationAuthorityHintResponseOutput() AttestationAuthorityHintResponseOutput {
	return o
}

func (o AttestationAuthorityHintResponseOutput) ToAttestationAuthorityHintResponseOutputWithContext(ctx context.Context) AttestationAuthorityHintResponseOutput {
	return o
}

// The human readable name of this Attestation Authority, for example "qa".
func (o AttestationAuthorityHintResponseOutput) HumanReadableName() pulumi.StringOutput {
	return o.ApplyT(func(v AttestationAuthorityHintResponse) string { return v.HumanReadableName }).(pulumi.StringOutput)
}

// Note kind that represents a logical attestation "role" or "authority". For example, an organization might have one `AttestationAuthority` for "QA" and one for "build". This Note is intended to act strictly as a grouping mechanism for the attached Occurrences (Attestations). This grouping mechanism also provides a security boundary, since IAM ACLs gate the ability for a principle to attach an Occurrence to a given Note. It also provides a single point of lookup to find all attached Attestation Occurrences, even if they don't all live in the same project.
type AttestationAuthorityResponse struct {
	Hint AttestationAuthorityHintResponse `pulumi:"hint"`
}

// Note kind that represents a logical attestation "role" or "authority". For example, an organization might have one `AttestationAuthority` for "QA" and one for "build". This Note is intended to act strictly as a grouping mechanism for the attached Occurrences (Attestations). This grouping mechanism also provides a security boundary, since IAM ACLs gate the ability for a principle to attach an Occurrence to a given Note. It also provides a single point of lookup to find all attached Attestation Occurrences, even if they don't all live in the same project.
type AttestationAuthorityResponseOutput struct{ *pulumi.OutputState }

func (AttestationAuthorityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AttestationAuthorityResponse)(nil)).Elem()
}

func (o AttestationAuthorityResponseOutput) ToAttestationAuthorityResponseOutput() AttestationAuthorityResponseOutput {
	return o
}

func (o AttestationAuthorityResponseOutput) ToAttestationAuthorityResponseOutputWithContext(ctx context.Context) AttestationAuthorityResponseOutput {
	return o
}

func (o AttestationAuthorityResponseOutput) Hint() AttestationAuthorityHintResponseOutput {
	return o.ApplyT(func(v AttestationAuthorityResponse) AttestationAuthorityHintResponse { return v.Hint }).(AttestationAuthorityHintResponseOutput)
}

// Occurrence that represents a single "attestation". The authenticity of an Attestation can be verified using the attached signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish trust. In this circumstance, the AttestationAuthority to which this Attestation is attached is primarily useful for look-up (how to find this Attestation if you already know the Authority and artifact to be verified) and intent (which authority was this attestation intended to sign for).
type AttestationResponse struct {
	PgpSignedAttestation PgpSignedAttestationResponse `pulumi:"pgpSignedAttestation"`
}

// Occurrence that represents a single "attestation". The authenticity of an Attestation can be verified using the attached signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish trust. In this circumstance, the AttestationAuthority to which this Attestation is attached is primarily useful for look-up (how to find this Attestation if you already know the Authority and artifact to be verified) and intent (which authority was this attestation intended to sign for).
type AttestationResponseOutput struct{ *pulumi.OutputState }

func (AttestationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AttestationResponse)(nil)).Elem()
}

func (o AttestationResponseOutput) ToAttestationResponseOutput() AttestationResponseOutput {
	return o
}

func (o AttestationResponseOutput) ToAttestationResponseOutputWithContext(ctx context.Context) AttestationResponseOutput {
	return o
}

func (o AttestationResponseOutput) PgpSignedAttestation() PgpSignedAttestationResponseOutput {
	return o.ApplyT(func(v AttestationResponse) PgpSignedAttestationResponse { return v.PgpSignedAttestation }).(PgpSignedAttestationResponseOutput)
}

// Basis describes the base image portion (Note) of the DockerImage relationship. Linked occurrences are derived from this or an equivalent image via: FROM Or an equivalent reference, e.g. a tag of the resource_url.
type Basis struct {
	// The fingerprint of the base image.
	Fingerprint *Fingerprint `pulumi:"fingerprint"`
	// The resource_url for the resource representing the basis of associated occurrence images.
	ResourceUrl *string `pulumi:"resourceUrl"`
}

// BasisInput is an input type that accepts BasisArgs and BasisOutput values.
// You can construct a concrete instance of `BasisInput` via:
//
//	BasisArgs{...}
type BasisInput interface {
	pulumi.Input

	ToBasisOutput() BasisOutput
	ToBasisOutputWithContext(context.Context) BasisOutput
}

// Basis describes the base image portion (Note) of the DockerImage relationship. Linked occurrences are derived from this or an equivalent image via: FROM Or an equivalent reference, e.g. a tag of the resource_url.
type BasisArgs struct {
	// The fingerprint of the base image.
	Fingerprint FingerprintPtrInput `pulumi:"fingerprint"`
	// The resource_url for the resource representing the basis of associated occurrence images.
	ResourceUrl pulumi.StringPtrInput `pulumi:"resourceUrl"`
}

func (BasisArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Basis)(nil)).Elem()
}

func (i BasisArgs) ToBasisOutput() BasisOutput {
	return i.ToBasisOutputWithContext(context.Background())
}

func (i BasisArgs) ToBasisOutputWithContext(ctx context.Context) BasisOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BasisOutput)
}

func (i BasisArgs) ToBasisPtrOutput() BasisPtrOutput {
	return i.ToBasisPtrOutputWithContext(context.Background())
}

func (i BasisArgs) ToBasisPtrOutputWithContext(ctx context.Context) BasisPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BasisOutput).ToBasisPtrOutputWithContext(ctx)
}

// BasisPtrInput is an input type that accepts BasisArgs, BasisPtr and BasisPtrOutput values.
// You can construct a concrete instance of `BasisPtrInput` via:
//
//	        BasisArgs{...}
//
//	or:
//
//	        nil
type BasisPtrInput interface {
	pulumi.Input

	ToBasisPtrOutput() BasisPtrOutput
	ToBasisPtrOutputWithContext(context.Context) BasisPtrOutput
}

type basisPtrType BasisArgs

func BasisPtr(v *BasisArgs) BasisPtrInput {
	return (*basisPtrType)(v)
}

func (*basisPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Basis)(nil)).Elem()
}

func (i *basisPtrType) ToBasisPtrOutput() BasisPtrOutput {
	return i.ToBasisPtrOutputWithContext(context.Background())
}

func (i *basisPtrType) ToBasisPtrOutputWithContext(ctx context.Context) BasisPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BasisPtrOutput)
}

// Basis describes the base image portion (Note) of the DockerImage relationship. Linked occurrences are derived from this or an equivalent image via: FROM Or an equivalent reference, e.g. a tag of the resource_url.
type BasisOutput struct{ *pulumi.OutputState }

func (BasisOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Basis)(nil)).Elem()
}

func (o BasisOutput) ToBasisOutput() BasisOutput {
	return o
}

func (o BasisOutput) ToBasisOutputWithContext(ctx context.Context) BasisOutput {
	return o
}

func (o BasisOutput) ToBasisPtrOutput() BasisPtrOutput {
	return o.ToBasisPtrOutputWithContext(context.Background())
}

func (o BasisOutput) ToBasisPtrOutputWithContext(ctx context.Context) BasisPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Basis) *Basis {
		return &v
	}).(BasisPtrOutput)
}

// The fingerprint of the base image.
func (o BasisOutput) Fingerprint() FingerprintPtrOutput {
	return o.ApplyT(func(v Basis) *Fingerprint { return v.Fingerprint }).(FingerprintPtrOutput)
}

// The resource_url for the resource representing the basis of associated occurrence images.
func (o BasisOutput) ResourceUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Basis) *string { return v.ResourceUrl }).(pulumi.StringPtrOutput)
}

type BasisPtrOutput struct{ *pulumi.OutputState }

func (BasisPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Basis)(nil)).Elem()
}

func (o BasisPtrOutput) ToBasisPtrOutput() BasisPtrOutput {
	return o
}

func (o BasisPtrOutput) ToBasisPtrOutputWithContext(ctx context.Context) BasisPtrOutput {
	return o
}

func (o BasisPtrOutput) Elem() BasisOutput {
	return o.ApplyT(func(v *Basis) Basis {
		if v != nil {
			return *v
		}
		var ret Basis
		return ret
	}).(BasisOutput)
}

// The fingerprint of the base image.
func (o BasisPtrOutput) Fingerprint() FingerprintPtrOutput {
	return o.ApplyT(func(v *Basis) *Fingerprint {
		if v == nil {
			return nil
		}
		return v.Fingerprint
	}).(FingerprintPtrOutput)
}

// The resource_url for the resource representing the basis of associated occurrence images.
func (o BasisPtrOutput) ResourceUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Basis) *string {
		if v == nil {
			return nil
		}
		return v.ResourceUrl
	}).(pulumi.StringPtrOutput)
}

// Basis describes the base image portion (Note) of the DockerImage relationship. Linked occurrences are derived from this or an equivalent image via: FROM Or an equivalent reference, e.g. a tag of the resource_url.
type BasisResponse struct {
	// The fingerprint of the base image.
	Fingerprint FingerprintResponse `pulumi:"fingerprint"`
	// The resource_url for the resource representing the basis of associated occurrence images.
	ResourceUrl string `pulumi:"resourceUrl"`
}

// Basis describes the base image portion (Note) of the DockerImage relationship. Linked occurrences are derived from this or an equivalent image via: FROM Or an equivalent reference, e.g. a tag of the resource_url.
type BasisResponseOutput struct{ *pulumi.OutputState }

func (BasisResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BasisResponse)(nil)).Elem()
}

func (o BasisResponseOutput) ToBasisResponseOutput() BasisResponseOutput {
	return o
}

func (o BasisResponseOutput) ToBasisResponseOutputWithContext(ctx context.Context) BasisResponseOutput {
	return o
}

// The fingerprint of the base image.
func (o BasisResponseOutput) Fingerprint() FingerprintResponseOutput {
	return o.ApplyT(func(v BasisResponse) FingerprintResponse { return v.Fingerprint }).(FingerprintResponseOutput)
}

// The resource_url for the resource representing the basis of associated occurrence images.
func (o BasisResponseOutput) ResourceUrl() pulumi.StringOutput {
	return o.ApplyT(func(v BasisResponse) string { return v.ResourceUrl }).(pulumi.StringOutput)
}

// Associates `members`, or principals, with a `role`.
type Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//	BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates `members`, or principals, with a `role`.
type BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//	BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingResponse struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprResponse `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role string `pulumi:"role"`
}

// Associates `members`, or principals, with a `role`.
type BindingResponseOutput struct{ *pulumi.OutputState }

func (BindingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingResponse)(nil)).Elem()
}

func (o BindingResponseOutput) ToBindingResponseOutput() BindingResponseOutput {
	return o
}

func (o BindingResponseOutput) ToBindingResponseOutputWithContext(ctx context.Context) BindingResponseOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingResponseOutput) Condition() ExprResponseOutput {
	return o.ApplyT(func(v BindingResponse) ExprResponse { return v.Condition }).(ExprResponseOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
func (o BindingResponseOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BindingResponse) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingResponseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v BindingResponse) string { return v.Role }).(pulumi.StringOutput)
}

type BindingResponseArrayOutput struct{ *pulumi.OutputState }

func (BindingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingResponse)(nil)).Elem()
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutput() BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutputWithContext(ctx context.Context) BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) Index(i pulumi.IntInput) BindingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BindingResponse {
		return vs[0].([]BindingResponse)[vs[1].(int)]
	}).(BindingResponseOutput)
}

type BuildDefinition struct {
	BuildType            *string                `pulumi:"buildType"`
	ExternalParameters   map[string]interface{} `pulumi:"externalParameters"`
	InternalParameters   map[string]interface{} `pulumi:"internalParameters"`
	ResolvedDependencies []ResourceDescriptor   `pulumi:"resolvedDependencies"`
}

// BuildDefinitionInput is an input type that accepts BuildDefinitionArgs and BuildDefinitionOutput values.
// You can construct a concrete instance of `BuildDefinitionInput` via:
//
//	BuildDefinitionArgs{...}
type BuildDefinitionInput interface {
	pulumi.Input

	ToBuildDefinitionOutput() BuildDefinitionOutput
	ToBuildDefinitionOutputWithContext(context.Context) BuildDefinitionOutput
}

type BuildDefinitionArgs struct {
	BuildType            pulumi.StringPtrInput        `pulumi:"buildType"`
	ExternalParameters   pulumi.MapInput              `pulumi:"externalParameters"`
	InternalParameters   pulumi.MapInput              `pulumi:"internalParameters"`
	ResolvedDependencies ResourceDescriptorArrayInput `pulumi:"resolvedDependencies"`
}

func (BuildDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildDefinition)(nil)).Elem()
}

func (i BuildDefinitionArgs) ToBuildDefinitionOutput() BuildDefinitionOutput {
	return i.ToBuildDefinitionOutputWithContext(context.Background())
}

func (i BuildDefinitionArgs) ToBuildDefinitionOutputWithContext(ctx context.Context) BuildDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildDefinitionOutput)
}

func (i BuildDefinitionArgs) ToBuildDefinitionPtrOutput() BuildDefinitionPtrOutput {
	return i.ToBuildDefinitionPtrOutputWithContext(context.Background())
}

func (i BuildDefinitionArgs) ToBuildDefinitionPtrOutputWithContext(ctx context.Context) BuildDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildDefinitionOutput).ToBuildDefinitionPtrOutputWithContext(ctx)
}

// BuildDefinitionPtrInput is an input type that accepts BuildDefinitionArgs, BuildDefinitionPtr and BuildDefinitionPtrOutput values.
// You can construct a concrete instance of `BuildDefinitionPtrInput` via:
//
//	        BuildDefinitionArgs{...}
//
//	or:
//
//	        nil
type BuildDefinitionPtrInput interface {
	pulumi.Input

	ToBuildDefinitionPtrOutput() BuildDefinitionPtrOutput
	ToBuildDefinitionPtrOutputWithContext(context.Context) BuildDefinitionPtrOutput
}

type buildDefinitionPtrType BuildDefinitionArgs

func BuildDefinitionPtr(v *BuildDefinitionArgs) BuildDefinitionPtrInput {
	return (*buildDefinitionPtrType)(v)
}

func (*buildDefinitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildDefinition)(nil)).Elem()
}

func (i *buildDefinitionPtrType) ToBuildDefinitionPtrOutput() BuildDefinitionPtrOutput {
	return i.ToBuildDefinitionPtrOutputWithContext(context.Background())
}

func (i *buildDefinitionPtrType) ToBuildDefinitionPtrOutputWithContext(ctx context.Context) BuildDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildDefinitionPtrOutput)
}

type BuildDefinitionOutput struct{ *pulumi.OutputState }

func (BuildDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildDefinition)(nil)).Elem()
}

func (o BuildDefinitionOutput) ToBuildDefinitionOutput() BuildDefinitionOutput {
	return o
}

func (o BuildDefinitionOutput) ToBuildDefinitionOutputWithContext(ctx context.Context) BuildDefinitionOutput {
	return o
}

func (o BuildDefinitionOutput) ToBuildDefinitionPtrOutput() BuildDefinitionPtrOutput {
	return o.ToBuildDefinitionPtrOutputWithContext(context.Background())
}

func (o BuildDefinitionOutput) ToBuildDefinitionPtrOutputWithContext(ctx context.Context) BuildDefinitionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BuildDefinition) *BuildDefinition {
		return &v
	}).(BuildDefinitionPtrOutput)
}

func (o BuildDefinitionOutput) BuildType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildDefinition) *string { return v.BuildType }).(pulumi.StringPtrOutput)
}

func (o BuildDefinitionOutput) ExternalParameters() pulumi.MapOutput {
	return o.ApplyT(func(v BuildDefinition) map[string]interface{} { return v.ExternalParameters }).(pulumi.MapOutput)
}

func (o BuildDefinitionOutput) InternalParameters() pulumi.MapOutput {
	return o.ApplyT(func(v BuildDefinition) map[string]interface{} { return v.InternalParameters }).(pulumi.MapOutput)
}

func (o BuildDefinitionOutput) ResolvedDependencies() ResourceDescriptorArrayOutput {
	return o.ApplyT(func(v BuildDefinition) []ResourceDescriptor { return v.ResolvedDependencies }).(ResourceDescriptorArrayOutput)
}

type BuildDefinitionPtrOutput struct{ *pulumi.OutputState }

func (BuildDefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildDefinition)(nil)).Elem()
}

func (o BuildDefinitionPtrOutput) ToBuildDefinitionPtrOutput() BuildDefinitionPtrOutput {
	return o
}

func (o BuildDefinitionPtrOutput) ToBuildDefinitionPtrOutputWithContext(ctx context.Context) BuildDefinitionPtrOutput {
	return o
}

func (o BuildDefinitionPtrOutput) Elem() BuildDefinitionOutput {
	return o.ApplyT(func(v *BuildDefinition) BuildDefinition {
		if v != nil {
			return *v
		}
		var ret BuildDefinition
		return ret
	}).(BuildDefinitionOutput)
}

func (o BuildDefinitionPtrOutput) BuildType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildDefinition) *string {
		if v == nil {
			return nil
		}
		return v.BuildType
	}).(pulumi.StringPtrOutput)
}

func (o BuildDefinitionPtrOutput) ExternalParameters() pulumi.MapOutput {
	return o.ApplyT(func(v *BuildDefinition) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.ExternalParameters
	}).(pulumi.MapOutput)
}

func (o BuildDefinitionPtrOutput) InternalParameters() pulumi.MapOutput {
	return o.ApplyT(func(v *BuildDefinition) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.InternalParameters
	}).(pulumi.MapOutput)
}

func (o BuildDefinitionPtrOutput) ResolvedDependencies() ResourceDescriptorArrayOutput {
	return o.ApplyT(func(v *BuildDefinition) []ResourceDescriptor {
		if v == nil {
			return nil
		}
		return v.ResolvedDependencies
	}).(ResourceDescriptorArrayOutput)
}

type BuildDefinitionResponse struct {
	BuildType            string                       `pulumi:"buildType"`
	ExternalParameters   map[string]interface{}       `pulumi:"externalParameters"`
	InternalParameters   map[string]interface{}       `pulumi:"internalParameters"`
	ResolvedDependencies []ResourceDescriptorResponse `pulumi:"resolvedDependencies"`
}

type BuildDefinitionResponseOutput struct{ *pulumi.OutputState }

func (BuildDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildDefinitionResponse)(nil)).Elem()
}

func (o BuildDefinitionResponseOutput) ToBuildDefinitionResponseOutput() BuildDefinitionResponseOutput {
	return o
}

func (o BuildDefinitionResponseOutput) ToBuildDefinitionResponseOutputWithContext(ctx context.Context) BuildDefinitionResponseOutput {
	return o
}

func (o BuildDefinitionResponseOutput) BuildType() pulumi.StringOutput {
	return o.ApplyT(func(v BuildDefinitionResponse) string { return v.BuildType }).(pulumi.StringOutput)
}

func (o BuildDefinitionResponseOutput) ExternalParameters() pulumi.MapOutput {
	return o.ApplyT(func(v BuildDefinitionResponse) map[string]interface{} { return v.ExternalParameters }).(pulumi.MapOutput)
}

func (o BuildDefinitionResponseOutput) InternalParameters() pulumi.MapOutput {
	return o.ApplyT(func(v BuildDefinitionResponse) map[string]interface{} { return v.InternalParameters }).(pulumi.MapOutput)
}

func (o BuildDefinitionResponseOutput) ResolvedDependencies() ResourceDescriptorResponseArrayOutput {
	return o.ApplyT(func(v BuildDefinitionResponse) []ResourceDescriptorResponse { return v.ResolvedDependencies }).(ResourceDescriptorResponseArrayOutput)
}

// Message encapsulating build provenance details.
type BuildDetails struct {
	// In-Toto Slsa Provenance V1 represents a slsa provenance meeting the slsa spec, wrapped in an in-toto statement. This allows for direct jsonification of a to-spec in-toto slsa statement with a to-spec slsa provenance.
	InTotoSlsaProvenanceV1 *InTotoSlsaProvenanceV1 `pulumi:"inTotoSlsaProvenanceV1"`
	// Deprecated. See InTotoStatement for the replacement. In-toto Provenance representation as defined in spec.
	//
	// Deprecated: Deprecated. See InTotoStatement for the replacement. In-toto Provenance representation as defined in spec.
	IntotoProvenance *InTotoProvenance `pulumi:"intotoProvenance"`
	// In-toto Statement representation as defined in spec. The intoto_statement can contain any type of provenance. The serialized payload of the statement can be stored and signed in the Occurrence's envelope.
	IntotoStatement *InTotoStatement `pulumi:"intotoStatement"`
	// The actual provenance
	Provenance *BuildProvenance `pulumi:"provenance"`
	// Serialized JSON representation of the provenance, used in generating the `BuildSignature` in the corresponding Result. After verifying the signature, `provenance_bytes` can be unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json as well to prevent incompatibilities with future changes.
	ProvenanceBytes *string `pulumi:"provenanceBytes"`
}

// BuildDetailsInput is an input type that accepts BuildDetailsArgs and BuildDetailsOutput values.
// You can construct a concrete instance of `BuildDetailsInput` via:
//
//	BuildDetailsArgs{...}
type BuildDetailsInput interface {
	pulumi.Input

	ToBuildDetailsOutput() BuildDetailsOutput
	ToBuildDetailsOutputWithContext(context.Context) BuildDetailsOutput
}

// Message encapsulating build provenance details.
type BuildDetailsArgs struct {
	// In-Toto Slsa Provenance V1 represents a slsa provenance meeting the slsa spec, wrapped in an in-toto statement. This allows for direct jsonification of a to-spec in-toto slsa statement with a to-spec slsa provenance.
	InTotoSlsaProvenanceV1 InTotoSlsaProvenanceV1PtrInput `pulumi:"inTotoSlsaProvenanceV1"`
	// Deprecated. See InTotoStatement for the replacement. In-toto Provenance representation as defined in spec.
	//
	// Deprecated: Deprecated. See InTotoStatement for the replacement. In-toto Provenance representation as defined in spec.
	IntotoProvenance InTotoProvenancePtrInput `pulumi:"intotoProvenance"`
	// In-toto Statement representation as defined in spec. The intoto_statement can contain any type of provenance. The serialized payload of the statement can be stored and signed in the Occurrence's envelope.
	IntotoStatement InTotoStatementPtrInput `pulumi:"intotoStatement"`
	// The actual provenance
	Provenance BuildProvenancePtrInput `pulumi:"provenance"`
	// Serialized JSON representation of the provenance, used in generating the `BuildSignature` in the corresponding Result. After verifying the signature, `provenance_bytes` can be unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json as well to prevent incompatibilities with future changes.
	ProvenanceBytes pulumi.StringPtrInput `pulumi:"provenanceBytes"`
}

func (BuildDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildDetails)(nil)).Elem()
}

func (i BuildDetailsArgs) ToBuildDetailsOutput() BuildDetailsOutput {
	return i.ToBuildDetailsOutputWithContext(context.Background())
}

func (i BuildDetailsArgs) ToBuildDetailsOutputWithContext(ctx context.Context) BuildDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildDetailsOutput)
}

func (i BuildDetailsArgs) ToBuildDetailsPtrOutput() BuildDetailsPtrOutput {
	return i.ToBuildDetailsPtrOutputWithContext(context.Background())
}

func (i BuildDetailsArgs) ToBuildDetailsPtrOutputWithContext(ctx context.Context) BuildDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildDetailsOutput).ToBuildDetailsPtrOutputWithContext(ctx)
}

// BuildDetailsPtrInput is an input type that accepts BuildDetailsArgs, BuildDetailsPtr and BuildDetailsPtrOutput values.
// You can construct a concrete instance of `BuildDetailsPtrInput` via:
//
//	        BuildDetailsArgs{...}
//
//	or:
//
//	        nil
type BuildDetailsPtrInput interface {
	pulumi.Input

	ToBuildDetailsPtrOutput() BuildDetailsPtrOutput
	ToBuildDetailsPtrOutputWithContext(context.Context) BuildDetailsPtrOutput
}

type buildDetailsPtrType BuildDetailsArgs

func BuildDetailsPtr(v *BuildDetailsArgs) BuildDetailsPtrInput {
	return (*buildDetailsPtrType)(v)
}

func (*buildDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildDetails)(nil)).Elem()
}

func (i *buildDetailsPtrType) ToBuildDetailsPtrOutput() BuildDetailsPtrOutput {
	return i.ToBuildDetailsPtrOutputWithContext(context.Background())
}

func (i *buildDetailsPtrType) ToBuildDetailsPtrOutputWithContext(ctx context.Context) BuildDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildDetailsPtrOutput)
}

// Message encapsulating build provenance details.
type BuildDetailsOutput struct{ *pulumi.OutputState }

func (BuildDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildDetails)(nil)).Elem()
}

func (o BuildDetailsOutput) ToBuildDetailsOutput() BuildDetailsOutput {
	return o
}

func (o BuildDetailsOutput) ToBuildDetailsOutputWithContext(ctx context.Context) BuildDetailsOutput {
	return o
}

func (o BuildDetailsOutput) ToBuildDetailsPtrOutput() BuildDetailsPtrOutput {
	return o.ToBuildDetailsPtrOutputWithContext(context.Background())
}

func (o BuildDetailsOutput) ToBuildDetailsPtrOutputWithContext(ctx context.Context) BuildDetailsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BuildDetails) *BuildDetails {
		return &v
	}).(BuildDetailsPtrOutput)
}

// In-Toto Slsa Provenance V1 represents a slsa provenance meeting the slsa spec, wrapped in an in-toto statement. This allows for direct jsonification of a to-spec in-toto slsa statement with a to-spec slsa provenance.
func (o BuildDetailsOutput) InTotoSlsaProvenanceV1() InTotoSlsaProvenanceV1PtrOutput {
	return o.ApplyT(func(v BuildDetails) *InTotoSlsaProvenanceV1 { return v.InTotoSlsaProvenanceV1 }).(InTotoSlsaProvenanceV1PtrOutput)
}

// Deprecated. See InTotoStatement for the replacement. In-toto Provenance representation as defined in spec.
//
// Deprecated: Deprecated. See InTotoStatement for the replacement. In-toto Provenance representation as defined in spec.
func (o BuildDetailsOutput) IntotoProvenance() InTotoProvenancePtrOutput {
	return o.ApplyT(func(v BuildDetails) *InTotoProvenance { return v.IntotoProvenance }).(InTotoProvenancePtrOutput)
}

// In-toto Statement representation as defined in spec. The intoto_statement can contain any type of provenance. The serialized payload of the statement can be stored and signed in the Occurrence's envelope.
func (o BuildDetailsOutput) IntotoStatement() InTotoStatementPtrOutput {
	return o.ApplyT(func(v BuildDetails) *InTotoStatement { return v.IntotoStatement }).(InTotoStatementPtrOutput)
}

// The actual provenance
func (o BuildDetailsOutput) Provenance() BuildProvenancePtrOutput {
	return o.ApplyT(func(v BuildDetails) *BuildProvenance { return v.Provenance }).(BuildProvenancePtrOutput)
}

// Serialized JSON representation of the provenance, used in generating the `BuildSignature` in the corresponding Result. After verifying the signature, `provenance_bytes` can be unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json as well to prevent incompatibilities with future changes.
func (o BuildDetailsOutput) ProvenanceBytes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildDetails) *string { return v.ProvenanceBytes }).(pulumi.StringPtrOutput)
}

type BuildDetailsPtrOutput struct{ *pulumi.OutputState }

func (BuildDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildDetails)(nil)).Elem()
}

func (o BuildDetailsPtrOutput) ToBuildDetailsPtrOutput() BuildDetailsPtrOutput {
	return o
}

func (o BuildDetailsPtrOutput) ToBuildDetailsPtrOutputWithContext(ctx context.Context) BuildDetailsPtrOutput {
	return o
}

func (o BuildDetailsPtrOutput) Elem() BuildDetailsOutput {
	return o.ApplyT(func(v *BuildDetails) BuildDetails {
		if v != nil {
			return *v
		}
		var ret BuildDetails
		return ret
	}).(BuildDetailsOutput)
}

// In-Toto Slsa Provenance V1 represents a slsa provenance meeting the slsa spec, wrapped in an in-toto statement. This allows for direct jsonification of a to-spec in-toto slsa statement with a to-spec slsa provenance.
func (o BuildDetailsPtrOutput) InTotoSlsaProvenanceV1() InTotoSlsaProvenanceV1PtrOutput {
	return o.ApplyT(func(v *BuildDetails) *InTotoSlsaProvenanceV1 {
		if v == nil {
			return nil
		}
		return v.InTotoSlsaProvenanceV1
	}).(InTotoSlsaProvenanceV1PtrOutput)
}

// Deprecated. See InTotoStatement for the replacement. In-toto Provenance representation as defined in spec.
//
// Deprecated: Deprecated. See InTotoStatement for the replacement. In-toto Provenance representation as defined in spec.
func (o BuildDetailsPtrOutput) IntotoProvenance() InTotoProvenancePtrOutput {
	return o.ApplyT(func(v *BuildDetails) *InTotoProvenance {
		if v == nil {
			return nil
		}
		return v.IntotoProvenance
	}).(InTotoProvenancePtrOutput)
}

// In-toto Statement representation as defined in spec. The intoto_statement can contain any type of provenance. The serialized payload of the statement can be stored and signed in the Occurrence's envelope.
func (o BuildDetailsPtrOutput) IntotoStatement() InTotoStatementPtrOutput {
	return o.ApplyT(func(v *BuildDetails) *InTotoStatement {
		if v == nil {
			return nil
		}
		return v.IntotoStatement
	}).(InTotoStatementPtrOutput)
}

// The actual provenance
func (o BuildDetailsPtrOutput) Provenance() BuildProvenancePtrOutput {
	return o.ApplyT(func(v *BuildDetails) *BuildProvenance {
		if v == nil {
			return nil
		}
		return v.Provenance
	}).(BuildProvenancePtrOutput)
}

// Serialized JSON representation of the provenance, used in generating the `BuildSignature` in the corresponding Result. After verifying the signature, `provenance_bytes` can be unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json as well to prevent incompatibilities with future changes.
func (o BuildDetailsPtrOutput) ProvenanceBytes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildDetails) *string {
		if v == nil {
			return nil
		}
		return v.ProvenanceBytes
	}).(pulumi.StringPtrOutput)
}

// Message encapsulating build provenance details.
type BuildDetailsResponse struct {
	// In-Toto Slsa Provenance V1 represents a slsa provenance meeting the slsa spec, wrapped in an in-toto statement. This allows for direct jsonification of a to-spec in-toto slsa statement with a to-spec slsa provenance.
	InTotoSlsaProvenanceV1 InTotoSlsaProvenanceV1Response `pulumi:"inTotoSlsaProvenanceV1"`
	// Deprecated. See InTotoStatement for the replacement. In-toto Provenance representation as defined in spec.
	//
	// Deprecated: Deprecated. See InTotoStatement for the replacement. In-toto Provenance representation as defined in spec.
	IntotoProvenance InTotoProvenanceResponse `pulumi:"intotoProvenance"`
	// In-toto Statement representation as defined in spec. The intoto_statement can contain any type of provenance. The serialized payload of the statement can be stored and signed in the Occurrence's envelope.
	IntotoStatement InTotoStatementResponse `pulumi:"intotoStatement"`
	// The actual provenance
	Provenance BuildProvenanceResponse `pulumi:"provenance"`
	// Serialized JSON representation of the provenance, used in generating the `BuildSignature` in the corresponding Result. After verifying the signature, `provenance_bytes` can be unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json as well to prevent incompatibilities with future changes.
	ProvenanceBytes string `pulumi:"provenanceBytes"`
}

// Message encapsulating build provenance details.
type BuildDetailsResponseOutput struct{ *pulumi.OutputState }

func (BuildDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildDetailsResponse)(nil)).Elem()
}

func (o BuildDetailsResponseOutput) ToBuildDetailsResponseOutput() BuildDetailsResponseOutput {
	return o
}

func (o BuildDetailsResponseOutput) ToBuildDetailsResponseOutputWithContext(ctx context.Context) BuildDetailsResponseOutput {
	return o
}

// In-Toto Slsa Provenance V1 represents a slsa provenance meeting the slsa spec, wrapped in an in-toto statement. This allows for direct jsonification of a to-spec in-toto slsa statement with a to-spec slsa provenance.
func (o BuildDetailsResponseOutput) InTotoSlsaProvenanceV1() InTotoSlsaProvenanceV1ResponseOutput {
	return o.ApplyT(func(v BuildDetailsResponse) InTotoSlsaProvenanceV1Response { return v.InTotoSlsaProvenanceV1 }).(InTotoSlsaProvenanceV1ResponseOutput)
}

// Deprecated. See InTotoStatement for the replacement. In-toto Provenance representation as defined in spec.
//
// Deprecated: Deprecated. See InTotoStatement for the replacement. In-toto Provenance representation as defined in spec.
func (o BuildDetailsResponseOutput) IntotoProvenance() InTotoProvenanceResponseOutput {
	return o.ApplyT(func(v BuildDetailsResponse) InTotoProvenanceResponse { return v.IntotoProvenance }).(InTotoProvenanceResponseOutput)
}

// In-toto Statement representation as defined in spec. The intoto_statement can contain any type of provenance. The serialized payload of the statement can be stored and signed in the Occurrence's envelope.
func (o BuildDetailsResponseOutput) IntotoStatement() InTotoStatementResponseOutput {
	return o.ApplyT(func(v BuildDetailsResponse) InTotoStatementResponse { return v.IntotoStatement }).(InTotoStatementResponseOutput)
}

// The actual provenance
func (o BuildDetailsResponseOutput) Provenance() BuildProvenanceResponseOutput {
	return o.ApplyT(func(v BuildDetailsResponse) BuildProvenanceResponse { return v.Provenance }).(BuildProvenanceResponseOutput)
}

// Serialized JSON representation of the provenance, used in generating the `BuildSignature` in the corresponding Result. After verifying the signature, `provenance_bytes` can be unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json as well to prevent incompatibilities with future changes.
func (o BuildDetailsResponseOutput) ProvenanceBytes() pulumi.StringOutput {
	return o.ApplyT(func(v BuildDetailsResponse) string { return v.ProvenanceBytes }).(pulumi.StringOutput)
}

type BuildMetadata struct {
	FinishedOn   *string `pulumi:"finishedOn"`
	InvocationId *string `pulumi:"invocationId"`
	StartedOn    *string `pulumi:"startedOn"`
}

// BuildMetadataInput is an input type that accepts BuildMetadataArgs and BuildMetadataOutput values.
// You can construct a concrete instance of `BuildMetadataInput` via:
//
//	BuildMetadataArgs{...}
type BuildMetadataInput interface {
	pulumi.Input

	ToBuildMetadataOutput() BuildMetadataOutput
	ToBuildMetadataOutputWithContext(context.Context) BuildMetadataOutput
}

type BuildMetadataArgs struct {
	FinishedOn   pulumi.StringPtrInput `pulumi:"finishedOn"`
	InvocationId pulumi.StringPtrInput `pulumi:"invocationId"`
	StartedOn    pulumi.StringPtrInput `pulumi:"startedOn"`
}

func (BuildMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildMetadata)(nil)).Elem()
}

func (i BuildMetadataArgs) ToBuildMetadataOutput() BuildMetadataOutput {
	return i.ToBuildMetadataOutputWithContext(context.Background())
}

func (i BuildMetadataArgs) ToBuildMetadataOutputWithContext(ctx context.Context) BuildMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildMetadataOutput)
}

func (i BuildMetadataArgs) ToBuildMetadataPtrOutput() BuildMetadataPtrOutput {
	return i.ToBuildMetadataPtrOutputWithContext(context.Background())
}

func (i BuildMetadataArgs) ToBuildMetadataPtrOutputWithContext(ctx context.Context) BuildMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildMetadataOutput).ToBuildMetadataPtrOutputWithContext(ctx)
}

// BuildMetadataPtrInput is an input type that accepts BuildMetadataArgs, BuildMetadataPtr and BuildMetadataPtrOutput values.
// You can construct a concrete instance of `BuildMetadataPtrInput` via:
//
//	        BuildMetadataArgs{...}
//
//	or:
//
//	        nil
type BuildMetadataPtrInput interface {
	pulumi.Input

	ToBuildMetadataPtrOutput() BuildMetadataPtrOutput
	ToBuildMetadataPtrOutputWithContext(context.Context) BuildMetadataPtrOutput
}

type buildMetadataPtrType BuildMetadataArgs

func BuildMetadataPtr(v *BuildMetadataArgs) BuildMetadataPtrInput {
	return (*buildMetadataPtrType)(v)
}

func (*buildMetadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildMetadata)(nil)).Elem()
}

func (i *buildMetadataPtrType) ToBuildMetadataPtrOutput() BuildMetadataPtrOutput {
	return i.ToBuildMetadataPtrOutputWithContext(context.Background())
}

func (i *buildMetadataPtrType) ToBuildMetadataPtrOutputWithContext(ctx context.Context) BuildMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildMetadataPtrOutput)
}

type BuildMetadataOutput struct{ *pulumi.OutputState }

func (BuildMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildMetadata)(nil)).Elem()
}

func (o BuildMetadataOutput) ToBuildMetadataOutput() BuildMetadataOutput {
	return o
}

func (o BuildMetadataOutput) ToBuildMetadataOutputWithContext(ctx context.Context) BuildMetadataOutput {
	return o
}

func (o BuildMetadataOutput) ToBuildMetadataPtrOutput() BuildMetadataPtrOutput {
	return o.ToBuildMetadataPtrOutputWithContext(context.Background())
}

func (o BuildMetadataOutput) ToBuildMetadataPtrOutputWithContext(ctx context.Context) BuildMetadataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BuildMetadata) *BuildMetadata {
		return &v
	}).(BuildMetadataPtrOutput)
}

func (o BuildMetadataOutput) FinishedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildMetadata) *string { return v.FinishedOn }).(pulumi.StringPtrOutput)
}

func (o BuildMetadataOutput) InvocationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildMetadata) *string { return v.InvocationId }).(pulumi.StringPtrOutput)
}

func (o BuildMetadataOutput) StartedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildMetadata) *string { return v.StartedOn }).(pulumi.StringPtrOutput)
}

type BuildMetadataPtrOutput struct{ *pulumi.OutputState }

func (BuildMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildMetadata)(nil)).Elem()
}

func (o BuildMetadataPtrOutput) ToBuildMetadataPtrOutput() BuildMetadataPtrOutput {
	return o
}

func (o BuildMetadataPtrOutput) ToBuildMetadataPtrOutputWithContext(ctx context.Context) BuildMetadataPtrOutput {
	return o
}

func (o BuildMetadataPtrOutput) Elem() BuildMetadataOutput {
	return o.ApplyT(func(v *BuildMetadata) BuildMetadata {
		if v != nil {
			return *v
		}
		var ret BuildMetadata
		return ret
	}).(BuildMetadataOutput)
}

func (o BuildMetadataPtrOutput) FinishedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildMetadata) *string {
		if v == nil {
			return nil
		}
		return v.FinishedOn
	}).(pulumi.StringPtrOutput)
}

func (o BuildMetadataPtrOutput) InvocationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildMetadata) *string {
		if v == nil {
			return nil
		}
		return v.InvocationId
	}).(pulumi.StringPtrOutput)
}

func (o BuildMetadataPtrOutput) StartedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildMetadata) *string {
		if v == nil {
			return nil
		}
		return v.StartedOn
	}).(pulumi.StringPtrOutput)
}

type BuildMetadataResponse struct {
	FinishedOn   string `pulumi:"finishedOn"`
	InvocationId string `pulumi:"invocationId"`
	StartedOn    string `pulumi:"startedOn"`
}

type BuildMetadataResponseOutput struct{ *pulumi.OutputState }

func (BuildMetadataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildMetadataResponse)(nil)).Elem()
}

func (o BuildMetadataResponseOutput) ToBuildMetadataResponseOutput() BuildMetadataResponseOutput {
	return o
}

func (o BuildMetadataResponseOutput) ToBuildMetadataResponseOutputWithContext(ctx context.Context) BuildMetadataResponseOutput {
	return o
}

func (o BuildMetadataResponseOutput) FinishedOn() pulumi.StringOutput {
	return o.ApplyT(func(v BuildMetadataResponse) string { return v.FinishedOn }).(pulumi.StringOutput)
}

func (o BuildMetadataResponseOutput) InvocationId() pulumi.StringOutput {
	return o.ApplyT(func(v BuildMetadataResponse) string { return v.InvocationId }).(pulumi.StringOutput)
}

func (o BuildMetadataResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v BuildMetadataResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Provenance of a build. Contains all information needed to verify the full details about the build from source to completion.
type BuildProvenance struct {
	// Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.
	BuildOptions map[string]string `pulumi:"buildOptions"`
	// Version string of the builder at the time this build was executed.
	BuilderVersion *string `pulumi:"builderVersion"`
	// Output of the build.
	BuiltArtifacts []Artifact `pulumi:"builtArtifacts"`
	// Commands requested by the build.
	Commands []Command `pulumi:"commands"`
	// Time at which the build was created.
	CreateTime *string `pulumi:"createTime"`
	// E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.
	Creator *string `pulumi:"creator"`
	// Time at which execution of the build was finished.
	FinishTime *string `pulumi:"finishTime"`
	// Unique identifier of the build.
	Id *string `pulumi:"id"`
	// Google Cloud Storage bucket where logs were written.
	LogsBucket *string `pulumi:"logsBucket"`
	// ID of the project.
	Project *string `pulumi:"project"`
	// Details of the Source input to the build.
	SourceProvenance *Source `pulumi:"sourceProvenance"`
	// Time at which execution of the build was started.
	StartTime *string `pulumi:"startTime"`
	// Trigger identifier if the build was triggered automatically; empty if not.
	TriggerId *string `pulumi:"triggerId"`
}

// BuildProvenanceInput is an input type that accepts BuildProvenanceArgs and BuildProvenanceOutput values.
// You can construct a concrete instance of `BuildProvenanceInput` via:
//
//	BuildProvenanceArgs{...}
type BuildProvenanceInput interface {
	pulumi.Input

	ToBuildProvenanceOutput() BuildProvenanceOutput
	ToBuildProvenanceOutputWithContext(context.Context) BuildProvenanceOutput
}

// Provenance of a build. Contains all information needed to verify the full details about the build from source to completion.
type BuildProvenanceArgs struct {
	// Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.
	BuildOptions pulumi.StringMapInput `pulumi:"buildOptions"`
	// Version string of the builder at the time this build was executed.
	BuilderVersion pulumi.StringPtrInput `pulumi:"builderVersion"`
	// Output of the build.
	BuiltArtifacts ArtifactArrayInput `pulumi:"builtArtifacts"`
	// Commands requested by the build.
	Commands CommandArrayInput `pulumi:"commands"`
	// Time at which the build was created.
	CreateTime pulumi.StringPtrInput `pulumi:"createTime"`
	// E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.
	Creator pulumi.StringPtrInput `pulumi:"creator"`
	// Time at which execution of the build was finished.
	FinishTime pulumi.StringPtrInput `pulumi:"finishTime"`
	// Unique identifier of the build.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Google Cloud Storage bucket where logs were written.
	LogsBucket pulumi.StringPtrInput `pulumi:"logsBucket"`
	// ID of the project.
	Project pulumi.StringPtrInput `pulumi:"project"`
	// Details of the Source input to the build.
	SourceProvenance SourcePtrInput `pulumi:"sourceProvenance"`
	// Time at which execution of the build was started.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
	// Trigger identifier if the build was triggered automatically; empty if not.
	TriggerId pulumi.StringPtrInput `pulumi:"triggerId"`
}

func (BuildProvenanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildProvenance)(nil)).Elem()
}

func (i BuildProvenanceArgs) ToBuildProvenanceOutput() BuildProvenanceOutput {
	return i.ToBuildProvenanceOutputWithContext(context.Background())
}

func (i BuildProvenanceArgs) ToBuildProvenanceOutputWithContext(ctx context.Context) BuildProvenanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildProvenanceOutput)
}

func (i BuildProvenanceArgs) ToBuildProvenancePtrOutput() BuildProvenancePtrOutput {
	return i.ToBuildProvenancePtrOutputWithContext(context.Background())
}

func (i BuildProvenanceArgs) ToBuildProvenancePtrOutputWithContext(ctx context.Context) BuildProvenancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildProvenanceOutput).ToBuildProvenancePtrOutputWithContext(ctx)
}

// BuildProvenancePtrInput is an input type that accepts BuildProvenanceArgs, BuildProvenancePtr and BuildProvenancePtrOutput values.
// You can construct a concrete instance of `BuildProvenancePtrInput` via:
//
//	        BuildProvenanceArgs{...}
//
//	or:
//
//	        nil
type BuildProvenancePtrInput interface {
	pulumi.Input

	ToBuildProvenancePtrOutput() BuildProvenancePtrOutput
	ToBuildProvenancePtrOutputWithContext(context.Context) BuildProvenancePtrOutput
}

type buildProvenancePtrType BuildProvenanceArgs

func BuildProvenancePtr(v *BuildProvenanceArgs) BuildProvenancePtrInput {
	return (*buildProvenancePtrType)(v)
}

func (*buildProvenancePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildProvenance)(nil)).Elem()
}

func (i *buildProvenancePtrType) ToBuildProvenancePtrOutput() BuildProvenancePtrOutput {
	return i.ToBuildProvenancePtrOutputWithContext(context.Background())
}

func (i *buildProvenancePtrType) ToBuildProvenancePtrOutputWithContext(ctx context.Context) BuildProvenancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildProvenancePtrOutput)
}

// Provenance of a build. Contains all information needed to verify the full details about the build from source to completion.
type BuildProvenanceOutput struct{ *pulumi.OutputState }

func (BuildProvenanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildProvenance)(nil)).Elem()
}

func (o BuildProvenanceOutput) ToBuildProvenanceOutput() BuildProvenanceOutput {
	return o
}

func (o BuildProvenanceOutput) ToBuildProvenanceOutputWithContext(ctx context.Context) BuildProvenanceOutput {
	return o
}

func (o BuildProvenanceOutput) ToBuildProvenancePtrOutput() BuildProvenancePtrOutput {
	return o.ToBuildProvenancePtrOutputWithContext(context.Background())
}

func (o BuildProvenanceOutput) ToBuildProvenancePtrOutputWithContext(ctx context.Context) BuildProvenancePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BuildProvenance) *BuildProvenance {
		return &v
	}).(BuildProvenancePtrOutput)
}

// Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.
func (o BuildProvenanceOutput) BuildOptions() pulumi.StringMapOutput {
	return o.ApplyT(func(v BuildProvenance) map[string]string { return v.BuildOptions }).(pulumi.StringMapOutput)
}

// Version string of the builder at the time this build was executed.
func (o BuildProvenanceOutput) BuilderVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildProvenance) *string { return v.BuilderVersion }).(pulumi.StringPtrOutput)
}

// Output of the build.
func (o BuildProvenanceOutput) BuiltArtifacts() ArtifactArrayOutput {
	return o.ApplyT(func(v BuildProvenance) []Artifact { return v.BuiltArtifacts }).(ArtifactArrayOutput)
}

// Commands requested by the build.
func (o BuildProvenanceOutput) Commands() CommandArrayOutput {
	return o.ApplyT(func(v BuildProvenance) []Command { return v.Commands }).(CommandArrayOutput)
}

// Time at which the build was created.
func (o BuildProvenanceOutput) CreateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildProvenance) *string { return v.CreateTime }).(pulumi.StringPtrOutput)
}

// E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.
func (o BuildProvenanceOutput) Creator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildProvenance) *string { return v.Creator }).(pulumi.StringPtrOutput)
}

// Time at which execution of the build was finished.
func (o BuildProvenanceOutput) FinishTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildProvenance) *string { return v.FinishTime }).(pulumi.StringPtrOutput)
}

// Unique identifier of the build.
func (o BuildProvenanceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildProvenance) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Google Cloud Storage bucket where logs were written.
func (o BuildProvenanceOutput) LogsBucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildProvenance) *string { return v.LogsBucket }).(pulumi.StringPtrOutput)
}

// ID of the project.
func (o BuildProvenanceOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildProvenance) *string { return v.Project }).(pulumi.StringPtrOutput)
}

// Details of the Source input to the build.
func (o BuildProvenanceOutput) SourceProvenance() SourcePtrOutput {
	return o.ApplyT(func(v BuildProvenance) *Source { return v.SourceProvenance }).(SourcePtrOutput)
}

// Time at which execution of the build was started.
func (o BuildProvenanceOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildProvenance) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// Trigger identifier if the build was triggered automatically; empty if not.
func (o BuildProvenanceOutput) TriggerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildProvenance) *string { return v.TriggerId }).(pulumi.StringPtrOutput)
}

type BuildProvenancePtrOutput struct{ *pulumi.OutputState }

func (BuildProvenancePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildProvenance)(nil)).Elem()
}

func (o BuildProvenancePtrOutput) ToBuildProvenancePtrOutput() BuildProvenancePtrOutput {
	return o
}

func (o BuildProvenancePtrOutput) ToBuildProvenancePtrOutputWithContext(ctx context.Context) BuildProvenancePtrOutput {
	return o
}

func (o BuildProvenancePtrOutput) Elem() BuildProvenanceOutput {
	return o.ApplyT(func(v *BuildProvenance) BuildProvenance {
		if v != nil {
			return *v
		}
		var ret BuildProvenance
		return ret
	}).(BuildProvenanceOutput)
}

// Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.
func (o BuildProvenancePtrOutput) BuildOptions() pulumi.StringMapOutput {
	return o.ApplyT(func(v *BuildProvenance) map[string]string {
		if v == nil {
			return nil
		}
		return v.BuildOptions
	}).(pulumi.StringMapOutput)
}

// Version string of the builder at the time this build was executed.
func (o BuildProvenancePtrOutput) BuilderVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildProvenance) *string {
		if v == nil {
			return nil
		}
		return v.BuilderVersion
	}).(pulumi.StringPtrOutput)
}

// Output of the build.
func (o BuildProvenancePtrOutput) BuiltArtifacts() ArtifactArrayOutput {
	return o.ApplyT(func(v *BuildProvenance) []Artifact {
		if v == nil {
			return nil
		}
		return v.BuiltArtifacts
	}).(ArtifactArrayOutput)
}

// Commands requested by the build.
func (o BuildProvenancePtrOutput) Commands() CommandArrayOutput {
	return o.ApplyT(func(v *BuildProvenance) []Command {
		if v == nil {
			return nil
		}
		return v.Commands
	}).(CommandArrayOutput)
}

// Time at which the build was created.
func (o BuildProvenancePtrOutput) CreateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildProvenance) *string {
		if v == nil {
			return nil
		}
		return v.CreateTime
	}).(pulumi.StringPtrOutput)
}

// E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.
func (o BuildProvenancePtrOutput) Creator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildProvenance) *string {
		if v == nil {
			return nil
		}
		return v.Creator
	}).(pulumi.StringPtrOutput)
}

// Time at which execution of the build was finished.
func (o BuildProvenancePtrOutput) FinishTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildProvenance) *string {
		if v == nil {
			return nil
		}
		return v.FinishTime
	}).(pulumi.StringPtrOutput)
}

// Unique identifier of the build.
func (o BuildProvenancePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildProvenance) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Google Cloud Storage bucket where logs were written.
func (o BuildProvenancePtrOutput) LogsBucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildProvenance) *string {
		if v == nil {
			return nil
		}
		return v.LogsBucket
	}).(pulumi.StringPtrOutput)
}

// ID of the project.
func (o BuildProvenancePtrOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildProvenance) *string {
		if v == nil {
			return nil
		}
		return v.Project
	}).(pulumi.StringPtrOutput)
}

// Details of the Source input to the build.
func (o BuildProvenancePtrOutput) SourceProvenance() SourcePtrOutput {
	return o.ApplyT(func(v *BuildProvenance) *Source {
		if v == nil {
			return nil
		}
		return v.SourceProvenance
	}).(SourcePtrOutput)
}

// Time at which execution of the build was started.
func (o BuildProvenancePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildProvenance) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Trigger identifier if the build was triggered automatically; empty if not.
func (o BuildProvenancePtrOutput) TriggerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildProvenance) *string {
		if v == nil {
			return nil
		}
		return v.TriggerId
	}).(pulumi.StringPtrOutput)
}

// Provenance of a build. Contains all information needed to verify the full details about the build from source to completion.
type BuildProvenanceResponse struct {
	// Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.
	BuildOptions map[string]string `pulumi:"buildOptions"`
	// Version string of the builder at the time this build was executed.
	BuilderVersion string `pulumi:"builderVersion"`
	// Output of the build.
	BuiltArtifacts []ArtifactResponse `pulumi:"builtArtifacts"`
	// Commands requested by the build.
	Commands []CommandResponse `pulumi:"commands"`
	// Time at which the build was created.
	CreateTime string `pulumi:"createTime"`
	// E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.
	Creator string `pulumi:"creator"`
	// Time at which execution of the build was finished.
	FinishTime string `pulumi:"finishTime"`
	// Google Cloud Storage bucket where logs were written.
	LogsBucket string `pulumi:"logsBucket"`
	// ID of the project.
	Project string `pulumi:"project"`
	// Details of the Source input to the build.
	SourceProvenance SourceResponse `pulumi:"sourceProvenance"`
	// Time at which execution of the build was started.
	StartTime string `pulumi:"startTime"`
	// Trigger identifier if the build was triggered automatically; empty if not.
	TriggerId string `pulumi:"triggerId"`
}

// Provenance of a build. Contains all information needed to verify the full details about the build from source to completion.
type BuildProvenanceResponseOutput struct{ *pulumi.OutputState }

func (BuildProvenanceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildProvenanceResponse)(nil)).Elem()
}

func (o BuildProvenanceResponseOutput) ToBuildProvenanceResponseOutput() BuildProvenanceResponseOutput {
	return o
}

func (o BuildProvenanceResponseOutput) ToBuildProvenanceResponseOutputWithContext(ctx context.Context) BuildProvenanceResponseOutput {
	return o
}

// Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.
func (o BuildProvenanceResponseOutput) BuildOptions() pulumi.StringMapOutput {
	return o.ApplyT(func(v BuildProvenanceResponse) map[string]string { return v.BuildOptions }).(pulumi.StringMapOutput)
}

// Version string of the builder at the time this build was executed.
func (o BuildProvenanceResponseOutput) BuilderVersion() pulumi.StringOutput {
	return o.ApplyT(func(v BuildProvenanceResponse) string { return v.BuilderVersion }).(pulumi.StringOutput)
}

// Output of the build.
func (o BuildProvenanceResponseOutput) BuiltArtifacts() ArtifactResponseArrayOutput {
	return o.ApplyT(func(v BuildProvenanceResponse) []ArtifactResponse { return v.BuiltArtifacts }).(ArtifactResponseArrayOutput)
}

// Commands requested by the build.
func (o BuildProvenanceResponseOutput) Commands() CommandResponseArrayOutput {
	return o.ApplyT(func(v BuildProvenanceResponse) []CommandResponse { return v.Commands }).(CommandResponseArrayOutput)
}

// Time at which the build was created.
func (o BuildProvenanceResponseOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v BuildProvenanceResponse) string { return v.CreateTime }).(pulumi.StringOutput)
}

// E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.
func (o BuildProvenanceResponseOutput) Creator() pulumi.StringOutput {
	return o.ApplyT(func(v BuildProvenanceResponse) string { return v.Creator }).(pulumi.StringOutput)
}

// Time at which execution of the build was finished.
func (o BuildProvenanceResponseOutput) FinishTime() pulumi.StringOutput {
	return o.ApplyT(func(v BuildProvenanceResponse) string { return v.FinishTime }).(pulumi.StringOutput)
}

// Google Cloud Storage bucket where logs were written.
func (o BuildProvenanceResponseOutput) LogsBucket() pulumi.StringOutput {
	return o.ApplyT(func(v BuildProvenanceResponse) string { return v.LogsBucket }).(pulumi.StringOutput)
}

// ID of the project.
func (o BuildProvenanceResponseOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v BuildProvenanceResponse) string { return v.Project }).(pulumi.StringOutput)
}

// Details of the Source input to the build.
func (o BuildProvenanceResponseOutput) SourceProvenance() SourceResponseOutput {
	return o.ApplyT(func(v BuildProvenanceResponse) SourceResponse { return v.SourceProvenance }).(SourceResponseOutput)
}

// Time at which execution of the build was started.
func (o BuildProvenanceResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v BuildProvenanceResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

// Trigger identifier if the build was triggered automatically; empty if not.
func (o BuildProvenanceResponseOutput) TriggerId() pulumi.StringOutput {
	return o.ApplyT(func(v BuildProvenanceResponse) string { return v.TriggerId }).(pulumi.StringOutput)
}

// Message encapsulating the signature of the verified build.
type BuildSignature struct {
	// An Id for the key used to sign. This could be either an Id for the key stored in `public_key` (such as the Id or fingerprint for a PGP key, or the CN for a cert), or a reference to an external key (such as a reference to a key in Cloud Key Management Service).
	KeyId *string `pulumi:"keyId"`
	// The type of the key, either stored in `public_key` or referenced in `key_id`
	KeyType *BuildSignatureKeyType `pulumi:"keyType"`
	// Public key of the builder which can be used to verify that the related findings are valid and unchanged. If `key_type` is empty, this defaults to PEM encoded public keys. This field may be empty if `key_id` references an external key. For Cloud Build based signatures, this is a PEM encoded public key. To verify the Cloud Build signature, place the contents of this field into a file (public.pem). The signature field is base64-decoded into its binary representation in signature.bin, and the provenance bytes from `BuildDetails` are base64-decoded into a binary representation in signed.bin. OpenSSL can then verify the signature: `openssl sha256 -verify public.pem -signature signature.bin signed.bin`
	PublicKey *string `pulumi:"publicKey"`
	// Signature of the related `BuildProvenance`, encoded in a base64 string.
	Signature *string `pulumi:"signature"`
}

// BuildSignatureInput is an input type that accepts BuildSignatureArgs and BuildSignatureOutput values.
// You can construct a concrete instance of `BuildSignatureInput` via:
//
//	BuildSignatureArgs{...}
type BuildSignatureInput interface {
	pulumi.Input

	ToBuildSignatureOutput() BuildSignatureOutput
	ToBuildSignatureOutputWithContext(context.Context) BuildSignatureOutput
}

// Message encapsulating the signature of the verified build.
type BuildSignatureArgs struct {
	// An Id for the key used to sign. This could be either an Id for the key stored in `public_key` (such as the Id or fingerprint for a PGP key, or the CN for a cert), or a reference to an external key (such as a reference to a key in Cloud Key Management Service).
	KeyId pulumi.StringPtrInput `pulumi:"keyId"`
	// The type of the key, either stored in `public_key` or referenced in `key_id`
	KeyType BuildSignatureKeyTypePtrInput `pulumi:"keyType"`
	// Public key of the builder which can be used to verify that the related findings are valid and unchanged. If `key_type` is empty, this defaults to PEM encoded public keys. This field may be empty if `key_id` references an external key. For Cloud Build based signatures, this is a PEM encoded public key. To verify the Cloud Build signature, place the contents of this field into a file (public.pem). The signature field is base64-decoded into its binary representation in signature.bin, and the provenance bytes from `BuildDetails` are base64-decoded into a binary representation in signed.bin. OpenSSL can then verify the signature: `openssl sha256 -verify public.pem -signature signature.bin signed.bin`
	PublicKey pulumi.StringPtrInput `pulumi:"publicKey"`
	// Signature of the related `BuildProvenance`, encoded in a base64 string.
	Signature pulumi.StringPtrInput `pulumi:"signature"`
}

func (BuildSignatureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildSignature)(nil)).Elem()
}

func (i BuildSignatureArgs) ToBuildSignatureOutput() BuildSignatureOutput {
	return i.ToBuildSignatureOutputWithContext(context.Background())
}

func (i BuildSignatureArgs) ToBuildSignatureOutputWithContext(ctx context.Context) BuildSignatureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildSignatureOutput)
}

func (i BuildSignatureArgs) ToBuildSignaturePtrOutput() BuildSignaturePtrOutput {
	return i.ToBuildSignaturePtrOutputWithContext(context.Background())
}

func (i BuildSignatureArgs) ToBuildSignaturePtrOutputWithContext(ctx context.Context) BuildSignaturePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildSignatureOutput).ToBuildSignaturePtrOutputWithContext(ctx)
}

// BuildSignaturePtrInput is an input type that accepts BuildSignatureArgs, BuildSignaturePtr and BuildSignaturePtrOutput values.
// You can construct a concrete instance of `BuildSignaturePtrInput` via:
//
//	        BuildSignatureArgs{...}
//
//	or:
//
//	        nil
type BuildSignaturePtrInput interface {
	pulumi.Input

	ToBuildSignaturePtrOutput() BuildSignaturePtrOutput
	ToBuildSignaturePtrOutputWithContext(context.Context) BuildSignaturePtrOutput
}

type buildSignaturePtrType BuildSignatureArgs

func BuildSignaturePtr(v *BuildSignatureArgs) BuildSignaturePtrInput {
	return (*buildSignaturePtrType)(v)
}

func (*buildSignaturePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildSignature)(nil)).Elem()
}

func (i *buildSignaturePtrType) ToBuildSignaturePtrOutput() BuildSignaturePtrOutput {
	return i.ToBuildSignaturePtrOutputWithContext(context.Background())
}

func (i *buildSignaturePtrType) ToBuildSignaturePtrOutputWithContext(ctx context.Context) BuildSignaturePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildSignaturePtrOutput)
}

// Message encapsulating the signature of the verified build.
type BuildSignatureOutput struct{ *pulumi.OutputState }

func (BuildSignatureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildSignature)(nil)).Elem()
}

func (o BuildSignatureOutput) ToBuildSignatureOutput() BuildSignatureOutput {
	return o
}

func (o BuildSignatureOutput) ToBuildSignatureOutputWithContext(ctx context.Context) BuildSignatureOutput {
	return o
}

func (o BuildSignatureOutput) ToBuildSignaturePtrOutput() BuildSignaturePtrOutput {
	return o.ToBuildSignaturePtrOutputWithContext(context.Background())
}

func (o BuildSignatureOutput) ToBuildSignaturePtrOutputWithContext(ctx context.Context) BuildSignaturePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BuildSignature) *BuildSignature {
		return &v
	}).(BuildSignaturePtrOutput)
}

// An Id for the key used to sign. This could be either an Id for the key stored in `public_key` (such as the Id or fingerprint for a PGP key, or the CN for a cert), or a reference to an external key (such as a reference to a key in Cloud Key Management Service).
func (o BuildSignatureOutput) KeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildSignature) *string { return v.KeyId }).(pulumi.StringPtrOutput)
}

// The type of the key, either stored in `public_key` or referenced in `key_id`
func (o BuildSignatureOutput) KeyType() BuildSignatureKeyTypePtrOutput {
	return o.ApplyT(func(v BuildSignature) *BuildSignatureKeyType { return v.KeyType }).(BuildSignatureKeyTypePtrOutput)
}

// Public key of the builder which can be used to verify that the related findings are valid and unchanged. If `key_type` is empty, this defaults to PEM encoded public keys. This field may be empty if `key_id` references an external key. For Cloud Build based signatures, this is a PEM encoded public key. To verify the Cloud Build signature, place the contents of this field into a file (public.pem). The signature field is base64-decoded into its binary representation in signature.bin, and the provenance bytes from `BuildDetails` are base64-decoded into a binary representation in signed.bin. OpenSSL can then verify the signature: `openssl sha256 -verify public.pem -signature signature.bin signed.bin`
func (o BuildSignatureOutput) PublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildSignature) *string { return v.PublicKey }).(pulumi.StringPtrOutput)
}

// Signature of the related `BuildProvenance`, encoded in a base64 string.
func (o BuildSignatureOutput) Signature() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildSignature) *string { return v.Signature }).(pulumi.StringPtrOutput)
}

type BuildSignaturePtrOutput struct{ *pulumi.OutputState }

func (BuildSignaturePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildSignature)(nil)).Elem()
}

func (o BuildSignaturePtrOutput) ToBuildSignaturePtrOutput() BuildSignaturePtrOutput {
	return o
}

func (o BuildSignaturePtrOutput) ToBuildSignaturePtrOutputWithContext(ctx context.Context) BuildSignaturePtrOutput {
	return o
}

func (o BuildSignaturePtrOutput) Elem() BuildSignatureOutput {
	return o.ApplyT(func(v *BuildSignature) BuildSignature {
		if v != nil {
			return *v
		}
		var ret BuildSignature
		return ret
	}).(BuildSignatureOutput)
}

// An Id for the key used to sign. This could be either an Id for the key stored in `public_key` (such as the Id or fingerprint for a PGP key, or the CN for a cert), or a reference to an external key (such as a reference to a key in Cloud Key Management Service).
func (o BuildSignaturePtrOutput) KeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildSignature) *string {
		if v == nil {
			return nil
		}
		return v.KeyId
	}).(pulumi.StringPtrOutput)
}

// The type of the key, either stored in `public_key` or referenced in `key_id`
func (o BuildSignaturePtrOutput) KeyType() BuildSignatureKeyTypePtrOutput {
	return o.ApplyT(func(v *BuildSignature) *BuildSignatureKeyType {
		if v == nil {
			return nil
		}
		return v.KeyType
	}).(BuildSignatureKeyTypePtrOutput)
}

// Public key of the builder which can be used to verify that the related findings are valid and unchanged. If `key_type` is empty, this defaults to PEM encoded public keys. This field may be empty if `key_id` references an external key. For Cloud Build based signatures, this is a PEM encoded public key. To verify the Cloud Build signature, place the contents of this field into a file (public.pem). The signature field is base64-decoded into its binary representation in signature.bin, and the provenance bytes from `BuildDetails` are base64-decoded into a binary representation in signed.bin. OpenSSL can then verify the signature: `openssl sha256 -verify public.pem -signature signature.bin signed.bin`
func (o BuildSignaturePtrOutput) PublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildSignature) *string {
		if v == nil {
			return nil
		}
		return v.PublicKey
	}).(pulumi.StringPtrOutput)
}

// Signature of the related `BuildProvenance`, encoded in a base64 string.
func (o BuildSignaturePtrOutput) Signature() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildSignature) *string {
		if v == nil {
			return nil
		}
		return v.Signature
	}).(pulumi.StringPtrOutput)
}

// Message encapsulating the signature of the verified build.
type BuildSignatureResponse struct {
	// An Id for the key used to sign. This could be either an Id for the key stored in `public_key` (such as the Id or fingerprint for a PGP key, or the CN for a cert), or a reference to an external key (such as a reference to a key in Cloud Key Management Service).
	KeyId string `pulumi:"keyId"`
	// The type of the key, either stored in `public_key` or referenced in `key_id`
	KeyType string `pulumi:"keyType"`
	// Public key of the builder which can be used to verify that the related findings are valid and unchanged. If `key_type` is empty, this defaults to PEM encoded public keys. This field may be empty if `key_id` references an external key. For Cloud Build based signatures, this is a PEM encoded public key. To verify the Cloud Build signature, place the contents of this field into a file (public.pem). The signature field is base64-decoded into its binary representation in signature.bin, and the provenance bytes from `BuildDetails` are base64-decoded into a binary representation in signed.bin. OpenSSL can then verify the signature: `openssl sha256 -verify public.pem -signature signature.bin signed.bin`
	PublicKey string `pulumi:"publicKey"`
	// Signature of the related `BuildProvenance`, encoded in a base64 string.
	Signature string `pulumi:"signature"`
}

// Message encapsulating the signature of the verified build.
type BuildSignatureResponseOutput struct{ *pulumi.OutputState }

func (BuildSignatureResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildSignatureResponse)(nil)).Elem()
}

func (o BuildSignatureResponseOutput) ToBuildSignatureResponseOutput() BuildSignatureResponseOutput {
	return o
}

func (o BuildSignatureResponseOutput) ToBuildSignatureResponseOutputWithContext(ctx context.Context) BuildSignatureResponseOutput {
	return o
}

// An Id for the key used to sign. This could be either an Id for the key stored in `public_key` (such as the Id or fingerprint for a PGP key, or the CN for a cert), or a reference to an external key (such as a reference to a key in Cloud Key Management Service).
func (o BuildSignatureResponseOutput) KeyId() pulumi.StringOutput {
	return o.ApplyT(func(v BuildSignatureResponse) string { return v.KeyId }).(pulumi.StringOutput)
}

// The type of the key, either stored in `public_key` or referenced in `key_id`
func (o BuildSignatureResponseOutput) KeyType() pulumi.StringOutput {
	return o.ApplyT(func(v BuildSignatureResponse) string { return v.KeyType }).(pulumi.StringOutput)
}

// Public key of the builder which can be used to verify that the related findings are valid and unchanged. If `key_type` is empty, this defaults to PEM encoded public keys. This field may be empty if `key_id` references an external key. For Cloud Build based signatures, this is a PEM encoded public key. To verify the Cloud Build signature, place the contents of this field into a file (public.pem). The signature field is base64-decoded into its binary representation in signature.bin, and the provenance bytes from `BuildDetails` are base64-decoded into a binary representation in signed.bin. OpenSSL can then verify the signature: `openssl sha256 -verify public.pem -signature signature.bin signed.bin`
func (o BuildSignatureResponseOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v BuildSignatureResponse) string { return v.PublicKey }).(pulumi.StringOutput)
}

// Signature of the related `BuildProvenance`, encoded in a base64 string.
func (o BuildSignatureResponseOutput) Signature() pulumi.StringOutput {
	return o.ApplyT(func(v BuildSignatureResponse) string { return v.Signature }).(pulumi.StringOutput)
}

// Note holding the version of the provider's builder and the signature of the provenance message in linked BuildDetails.
type BuildType struct {
	// Version of the builder which produced this Note.
	BuilderVersion *string `pulumi:"builderVersion"`
	// Signature of the build in Occurrences pointing to the Note containing this `BuilderDetails`.
	Signature *BuildSignature `pulumi:"signature"`
}

// BuildTypeInput is an input type that accepts BuildTypeArgs and BuildTypeOutput values.
// You can construct a concrete instance of `BuildTypeInput` via:
//
//	BuildTypeArgs{...}
type BuildTypeInput interface {
	pulumi.Input

	ToBuildTypeOutput() BuildTypeOutput
	ToBuildTypeOutputWithContext(context.Context) BuildTypeOutput
}

// Note holding the version of the provider's builder and the signature of the provenance message in linked BuildDetails.
type BuildTypeArgs struct {
	// Version of the builder which produced this Note.
	BuilderVersion pulumi.StringPtrInput `pulumi:"builderVersion"`
	// Signature of the build in Occurrences pointing to the Note containing this `BuilderDetails`.
	Signature BuildSignaturePtrInput `pulumi:"signature"`
}

func (BuildTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildType)(nil)).Elem()
}

func (i BuildTypeArgs) ToBuildTypeOutput() BuildTypeOutput {
	return i.ToBuildTypeOutputWithContext(context.Background())
}

func (i BuildTypeArgs) ToBuildTypeOutputWithContext(ctx context.Context) BuildTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildTypeOutput)
}

func (i BuildTypeArgs) ToBuildTypePtrOutput() BuildTypePtrOutput {
	return i.ToBuildTypePtrOutputWithContext(context.Background())
}

func (i BuildTypeArgs) ToBuildTypePtrOutputWithContext(ctx context.Context) BuildTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildTypeOutput).ToBuildTypePtrOutputWithContext(ctx)
}

// BuildTypePtrInput is an input type that accepts BuildTypeArgs, BuildTypePtr and BuildTypePtrOutput values.
// You can construct a concrete instance of `BuildTypePtrInput` via:
//
//	        BuildTypeArgs{...}
//
//	or:
//
//	        nil
type BuildTypePtrInput interface {
	pulumi.Input

	ToBuildTypePtrOutput() BuildTypePtrOutput
	ToBuildTypePtrOutputWithContext(context.Context) BuildTypePtrOutput
}

type buildTypePtrType BuildTypeArgs

func BuildTypePtr(v *BuildTypeArgs) BuildTypePtrInput {
	return (*buildTypePtrType)(v)
}

func (*buildTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildType)(nil)).Elem()
}

func (i *buildTypePtrType) ToBuildTypePtrOutput() BuildTypePtrOutput {
	return i.ToBuildTypePtrOutputWithContext(context.Background())
}

func (i *buildTypePtrType) ToBuildTypePtrOutputWithContext(ctx context.Context) BuildTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildTypePtrOutput)
}

// Note holding the version of the provider's builder and the signature of the provenance message in linked BuildDetails.
type BuildTypeOutput struct{ *pulumi.OutputState }

func (BuildTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildType)(nil)).Elem()
}

func (o BuildTypeOutput) ToBuildTypeOutput() BuildTypeOutput {
	return o
}

func (o BuildTypeOutput) ToBuildTypeOutputWithContext(ctx context.Context) BuildTypeOutput {
	return o
}

func (o BuildTypeOutput) ToBuildTypePtrOutput() BuildTypePtrOutput {
	return o.ToBuildTypePtrOutputWithContext(context.Background())
}

func (o BuildTypeOutput) ToBuildTypePtrOutputWithContext(ctx context.Context) BuildTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BuildType) *BuildType {
		return &v
	}).(BuildTypePtrOutput)
}

// Version of the builder which produced this Note.
func (o BuildTypeOutput) BuilderVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildType) *string { return v.BuilderVersion }).(pulumi.StringPtrOutput)
}

// Signature of the build in Occurrences pointing to the Note containing this `BuilderDetails`.
func (o BuildTypeOutput) Signature() BuildSignaturePtrOutput {
	return o.ApplyT(func(v BuildType) *BuildSignature { return v.Signature }).(BuildSignaturePtrOutput)
}

type BuildTypePtrOutput struct{ *pulumi.OutputState }

func (BuildTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildType)(nil)).Elem()
}

func (o BuildTypePtrOutput) ToBuildTypePtrOutput() BuildTypePtrOutput {
	return o
}

func (o BuildTypePtrOutput) ToBuildTypePtrOutputWithContext(ctx context.Context) BuildTypePtrOutput {
	return o
}

func (o BuildTypePtrOutput) Elem() BuildTypeOutput {
	return o.ApplyT(func(v *BuildType) BuildType {
		if v != nil {
			return *v
		}
		var ret BuildType
		return ret
	}).(BuildTypeOutput)
}

// Version of the builder which produced this Note.
func (o BuildTypePtrOutput) BuilderVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildType) *string {
		if v == nil {
			return nil
		}
		return v.BuilderVersion
	}).(pulumi.StringPtrOutput)
}

// Signature of the build in Occurrences pointing to the Note containing this `BuilderDetails`.
func (o BuildTypePtrOutput) Signature() BuildSignaturePtrOutput {
	return o.ApplyT(func(v *BuildType) *BuildSignature {
		if v == nil {
			return nil
		}
		return v.Signature
	}).(BuildSignaturePtrOutput)
}

// Note holding the version of the provider's builder and the signature of the provenance message in linked BuildDetails.
type BuildTypeResponse struct {
	// Version of the builder which produced this Note.
	BuilderVersion string `pulumi:"builderVersion"`
	// Signature of the build in Occurrences pointing to the Note containing this `BuilderDetails`.
	Signature BuildSignatureResponse `pulumi:"signature"`
}

// Note holding the version of the provider's builder and the signature of the provenance message in linked BuildDetails.
type BuildTypeResponseOutput struct{ *pulumi.OutputState }

func (BuildTypeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildTypeResponse)(nil)).Elem()
}

func (o BuildTypeResponseOutput) ToBuildTypeResponseOutput() BuildTypeResponseOutput {
	return o
}

func (o BuildTypeResponseOutput) ToBuildTypeResponseOutputWithContext(ctx context.Context) BuildTypeResponseOutput {
	return o
}

// Version of the builder which produced this Note.
func (o BuildTypeResponseOutput) BuilderVersion() pulumi.StringOutput {
	return o.ApplyT(func(v BuildTypeResponse) string { return v.BuilderVersion }).(pulumi.StringOutput)
}

// Signature of the build in Occurrences pointing to the Note containing this `BuilderDetails`.
func (o BuildTypeResponseOutput) Signature() BuildSignatureResponseOutput {
	return o.ApplyT(func(v BuildTypeResponse) BuildSignatureResponse { return v.Signature }).(BuildSignatureResponseOutput)
}

type BuilderConfig struct {
	Id *string `pulumi:"id"`
}

// BuilderConfigInput is an input type that accepts BuilderConfigArgs and BuilderConfigOutput values.
// You can construct a concrete instance of `BuilderConfigInput` via:
//
//	BuilderConfigArgs{...}
type BuilderConfigInput interface {
	pulumi.Input

	ToBuilderConfigOutput() BuilderConfigOutput
	ToBuilderConfigOutputWithContext(context.Context) BuilderConfigOutput
}

type BuilderConfigArgs struct {
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (BuilderConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BuilderConfig)(nil)).Elem()
}

func (i BuilderConfigArgs) ToBuilderConfigOutput() BuilderConfigOutput {
	return i.ToBuilderConfigOutputWithContext(context.Background())
}

func (i BuilderConfigArgs) ToBuilderConfigOutputWithContext(ctx context.Context) BuilderConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuilderConfigOutput)
}

func (i BuilderConfigArgs) ToBuilderConfigPtrOutput() BuilderConfigPtrOutput {
	return i.ToBuilderConfigPtrOutputWithContext(context.Background())
}

func (i BuilderConfigArgs) ToBuilderConfigPtrOutputWithContext(ctx context.Context) BuilderConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuilderConfigOutput).ToBuilderConfigPtrOutputWithContext(ctx)
}

// BuilderConfigPtrInput is an input type that accepts BuilderConfigArgs, BuilderConfigPtr and BuilderConfigPtrOutput values.
// You can construct a concrete instance of `BuilderConfigPtrInput` via:
//
//	        BuilderConfigArgs{...}
//
//	or:
//
//	        nil
type BuilderConfigPtrInput interface {
	pulumi.Input

	ToBuilderConfigPtrOutput() BuilderConfigPtrOutput
	ToBuilderConfigPtrOutputWithContext(context.Context) BuilderConfigPtrOutput
}

type builderConfigPtrType BuilderConfigArgs

func BuilderConfigPtr(v *BuilderConfigArgs) BuilderConfigPtrInput {
	return (*builderConfigPtrType)(v)
}

func (*builderConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BuilderConfig)(nil)).Elem()
}

func (i *builderConfigPtrType) ToBuilderConfigPtrOutput() BuilderConfigPtrOutput {
	return i.ToBuilderConfigPtrOutputWithContext(context.Background())
}

func (i *builderConfigPtrType) ToBuilderConfigPtrOutputWithContext(ctx context.Context) BuilderConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuilderConfigPtrOutput)
}

type BuilderConfigOutput struct{ *pulumi.OutputState }

func (BuilderConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuilderConfig)(nil)).Elem()
}

func (o BuilderConfigOutput) ToBuilderConfigOutput() BuilderConfigOutput {
	return o
}

func (o BuilderConfigOutput) ToBuilderConfigOutputWithContext(ctx context.Context) BuilderConfigOutput {
	return o
}

func (o BuilderConfigOutput) ToBuilderConfigPtrOutput() BuilderConfigPtrOutput {
	return o.ToBuilderConfigPtrOutputWithContext(context.Background())
}

func (o BuilderConfigOutput) ToBuilderConfigPtrOutputWithContext(ctx context.Context) BuilderConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BuilderConfig) *BuilderConfig {
		return &v
	}).(BuilderConfigPtrOutput)
}

func (o BuilderConfigOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuilderConfig) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type BuilderConfigPtrOutput struct{ *pulumi.OutputState }

func (BuilderConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BuilderConfig)(nil)).Elem()
}

func (o BuilderConfigPtrOutput) ToBuilderConfigPtrOutput() BuilderConfigPtrOutput {
	return o
}

func (o BuilderConfigPtrOutput) ToBuilderConfigPtrOutputWithContext(ctx context.Context) BuilderConfigPtrOutput {
	return o
}

func (o BuilderConfigPtrOutput) Elem() BuilderConfigOutput {
	return o.ApplyT(func(v *BuilderConfig) BuilderConfig {
		if v != nil {
			return *v
		}
		var ret BuilderConfig
		return ret
	}).(BuilderConfigOutput)
}

func (o BuilderConfigPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuilderConfig) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

type BuilderConfigResponse struct {
}

type BuilderConfigResponseOutput struct{ *pulumi.OutputState }

func (BuilderConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuilderConfigResponse)(nil)).Elem()
}

func (o BuilderConfigResponseOutput) ToBuilderConfigResponseOutput() BuilderConfigResponseOutput {
	return o
}

func (o BuilderConfigResponseOutput) ToBuilderConfigResponseOutputWithContext(ctx context.Context) BuilderConfigResponseOutput {
	return o
}

// Common Vulnerability Scoring System. This message is compatible with CVSS v2 and v3. For CVSS v2 details, see https://www.first.org/cvss/v2/guide CVSS v2 calculator: https://nvd.nist.gov/vuln-metrics/cvss/v2-calculator For CVSS v3 details, see https://www.first.org/cvss/specification-document CVSS v3 calculator: https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator
type CVSS struct {
	// Defined in CVSS v3, CVSS v2
	AttackComplexity *CVSSAttackComplexity `pulumi:"attackComplexity"`
	// Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments. Defined in CVSS v3, CVSS v2
	AttackVector *CVSSAttackVector `pulumi:"attackVector"`
	// Defined in CVSS v2
	Authentication *CVSSAuthentication `pulumi:"authentication"`
	// Defined in CVSS v3, CVSS v2
	AvailabilityImpact *CVSSAvailabilityImpact `pulumi:"availabilityImpact"`
	// The base score is a function of the base metric scores.
	BaseScore *float64 `pulumi:"baseScore"`
	// Defined in CVSS v3, CVSS v2
	ConfidentialityImpact *CVSSConfidentialityImpact `pulumi:"confidentialityImpact"`
	ExploitabilityScore   *float64                   `pulumi:"exploitabilityScore"`
	ImpactScore           *float64                   `pulumi:"impactScore"`
	// Defined in CVSS v3, CVSS v2
	IntegrityImpact *CVSSIntegrityImpact `pulumi:"integrityImpact"`
	// Defined in CVSS v3
	PrivilegesRequired *CVSSPrivilegesRequired `pulumi:"privilegesRequired"`
	// Defined in CVSS v3
	Scope *CVSSScope `pulumi:"scope"`
	// Defined in CVSS v3
	UserInteraction *CVSSUserInteraction `pulumi:"userInteraction"`
}

// CVSSInput is an input type that accepts CVSSArgs and CVSSOutput values.
// You can construct a concrete instance of `CVSSInput` via:
//
//	CVSSArgs{...}
type CVSSInput interface {
	pulumi.Input

	ToCVSSOutput() CVSSOutput
	ToCVSSOutputWithContext(context.Context) CVSSOutput
}

// Common Vulnerability Scoring System. This message is compatible with CVSS v2 and v3. For CVSS v2 details, see https://www.first.org/cvss/v2/guide CVSS v2 calculator: https://nvd.nist.gov/vuln-metrics/cvss/v2-calculator For CVSS v3 details, see https://www.first.org/cvss/specification-document CVSS v3 calculator: https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator
type CVSSArgs struct {
	// Defined in CVSS v3, CVSS v2
	AttackComplexity CVSSAttackComplexityPtrInput `pulumi:"attackComplexity"`
	// Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments. Defined in CVSS v3, CVSS v2
	AttackVector CVSSAttackVectorPtrInput `pulumi:"attackVector"`
	// Defined in CVSS v2
	Authentication CVSSAuthenticationPtrInput `pulumi:"authentication"`
	// Defined in CVSS v3, CVSS v2
	AvailabilityImpact CVSSAvailabilityImpactPtrInput `pulumi:"availabilityImpact"`
	// The base score is a function of the base metric scores.
	BaseScore pulumi.Float64PtrInput `pulumi:"baseScore"`
	// Defined in CVSS v3, CVSS v2
	ConfidentialityImpact CVSSConfidentialityImpactPtrInput `pulumi:"confidentialityImpact"`
	ExploitabilityScore   pulumi.Float64PtrInput            `pulumi:"exploitabilityScore"`
	ImpactScore           pulumi.Float64PtrInput            `pulumi:"impactScore"`
	// Defined in CVSS v3, CVSS v2
	IntegrityImpact CVSSIntegrityImpactPtrInput `pulumi:"integrityImpact"`
	// Defined in CVSS v3
	PrivilegesRequired CVSSPrivilegesRequiredPtrInput `pulumi:"privilegesRequired"`
	// Defined in CVSS v3
	Scope CVSSScopePtrInput `pulumi:"scope"`
	// Defined in CVSS v3
	UserInteraction CVSSUserInteractionPtrInput `pulumi:"userInteraction"`
}

func (CVSSArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CVSS)(nil)).Elem()
}

func (i CVSSArgs) ToCVSSOutput() CVSSOutput {
	return i.ToCVSSOutputWithContext(context.Background())
}

func (i CVSSArgs) ToCVSSOutputWithContext(ctx context.Context) CVSSOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CVSSOutput)
}

func (i CVSSArgs) ToCVSSPtrOutput() CVSSPtrOutput {
	return i.ToCVSSPtrOutputWithContext(context.Background())
}

func (i CVSSArgs) ToCVSSPtrOutputWithContext(ctx context.Context) CVSSPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CVSSOutput).ToCVSSPtrOutputWithContext(ctx)
}

// CVSSPtrInput is an input type that accepts CVSSArgs, CVSSPtr and CVSSPtrOutput values.
// You can construct a concrete instance of `CVSSPtrInput` via:
//
//	        CVSSArgs{...}
//
//	or:
//
//	        nil
type CVSSPtrInput interface {
	pulumi.Input

	ToCVSSPtrOutput() CVSSPtrOutput
	ToCVSSPtrOutputWithContext(context.Context) CVSSPtrOutput
}

type cvssPtrType CVSSArgs

func CVSSPtr(v *CVSSArgs) CVSSPtrInput {
	return (*cvssPtrType)(v)
}

func (*cvssPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CVSS)(nil)).Elem()
}

func (i *cvssPtrType) ToCVSSPtrOutput() CVSSPtrOutput {
	return i.ToCVSSPtrOutputWithContext(context.Background())
}

func (i *cvssPtrType) ToCVSSPtrOutputWithContext(ctx context.Context) CVSSPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CVSSPtrOutput)
}

// Common Vulnerability Scoring System. This message is compatible with CVSS v2 and v3. For CVSS v2 details, see https://www.first.org/cvss/v2/guide CVSS v2 calculator: https://nvd.nist.gov/vuln-metrics/cvss/v2-calculator For CVSS v3 details, see https://www.first.org/cvss/specification-document CVSS v3 calculator: https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator
type CVSSOutput struct{ *pulumi.OutputState }

func (CVSSOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CVSS)(nil)).Elem()
}

func (o CVSSOutput) ToCVSSOutput() CVSSOutput {
	return o
}

func (o CVSSOutput) ToCVSSOutputWithContext(ctx context.Context) CVSSOutput {
	return o
}

func (o CVSSOutput) ToCVSSPtrOutput() CVSSPtrOutput {
	return o.ToCVSSPtrOutputWithContext(context.Background())
}

func (o CVSSOutput) ToCVSSPtrOutputWithContext(ctx context.Context) CVSSPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CVSS) *CVSS {
		return &v
	}).(CVSSPtrOutput)
}

// Defined in CVSS v3, CVSS v2
func (o CVSSOutput) AttackComplexity() CVSSAttackComplexityPtrOutput {
	return o.ApplyT(func(v CVSS) *CVSSAttackComplexity { return v.AttackComplexity }).(CVSSAttackComplexityPtrOutput)
}

// Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments. Defined in CVSS v3, CVSS v2
func (o CVSSOutput) AttackVector() CVSSAttackVectorPtrOutput {
	return o.ApplyT(func(v CVSS) *CVSSAttackVector { return v.AttackVector }).(CVSSAttackVectorPtrOutput)
}

// Defined in CVSS v2
func (o CVSSOutput) Authentication() CVSSAuthenticationPtrOutput {
	return o.ApplyT(func(v CVSS) *CVSSAuthentication { return v.Authentication }).(CVSSAuthenticationPtrOutput)
}

// Defined in CVSS v3, CVSS v2
func (o CVSSOutput) AvailabilityImpact() CVSSAvailabilityImpactPtrOutput {
	return o.ApplyT(func(v CVSS) *CVSSAvailabilityImpact { return v.AvailabilityImpact }).(CVSSAvailabilityImpactPtrOutput)
}

// The base score is a function of the base metric scores.
func (o CVSSOutput) BaseScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v CVSS) *float64 { return v.BaseScore }).(pulumi.Float64PtrOutput)
}

// Defined in CVSS v3, CVSS v2
func (o CVSSOutput) ConfidentialityImpact() CVSSConfidentialityImpactPtrOutput {
	return o.ApplyT(func(v CVSS) *CVSSConfidentialityImpact { return v.ConfidentialityImpact }).(CVSSConfidentialityImpactPtrOutput)
}

func (o CVSSOutput) ExploitabilityScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v CVSS) *float64 { return v.ExploitabilityScore }).(pulumi.Float64PtrOutput)
}

func (o CVSSOutput) ImpactScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v CVSS) *float64 { return v.ImpactScore }).(pulumi.Float64PtrOutput)
}

// Defined in CVSS v3, CVSS v2
func (o CVSSOutput) IntegrityImpact() CVSSIntegrityImpactPtrOutput {
	return o.ApplyT(func(v CVSS) *CVSSIntegrityImpact { return v.IntegrityImpact }).(CVSSIntegrityImpactPtrOutput)
}

// Defined in CVSS v3
func (o CVSSOutput) PrivilegesRequired() CVSSPrivilegesRequiredPtrOutput {
	return o.ApplyT(func(v CVSS) *CVSSPrivilegesRequired { return v.PrivilegesRequired }).(CVSSPrivilegesRequiredPtrOutput)
}

// Defined in CVSS v3
func (o CVSSOutput) Scope() CVSSScopePtrOutput {
	return o.ApplyT(func(v CVSS) *CVSSScope { return v.Scope }).(CVSSScopePtrOutput)
}

// Defined in CVSS v3
func (o CVSSOutput) UserInteraction() CVSSUserInteractionPtrOutput {
	return o.ApplyT(func(v CVSS) *CVSSUserInteraction { return v.UserInteraction }).(CVSSUserInteractionPtrOutput)
}

type CVSSPtrOutput struct{ *pulumi.OutputState }

func (CVSSPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CVSS)(nil)).Elem()
}

func (o CVSSPtrOutput) ToCVSSPtrOutput() CVSSPtrOutput {
	return o
}

func (o CVSSPtrOutput) ToCVSSPtrOutputWithContext(ctx context.Context) CVSSPtrOutput {
	return o
}

func (o CVSSPtrOutput) Elem() CVSSOutput {
	return o.ApplyT(func(v *CVSS) CVSS {
		if v != nil {
			return *v
		}
		var ret CVSS
		return ret
	}).(CVSSOutput)
}

// Defined in CVSS v3, CVSS v2
func (o CVSSPtrOutput) AttackComplexity() CVSSAttackComplexityPtrOutput {
	return o.ApplyT(func(v *CVSS) *CVSSAttackComplexity {
		if v == nil {
			return nil
		}
		return v.AttackComplexity
	}).(CVSSAttackComplexityPtrOutput)
}

// Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments. Defined in CVSS v3, CVSS v2
func (o CVSSPtrOutput) AttackVector() CVSSAttackVectorPtrOutput {
	return o.ApplyT(func(v *CVSS) *CVSSAttackVector {
		if v == nil {
			return nil
		}
		return v.AttackVector
	}).(CVSSAttackVectorPtrOutput)
}

// Defined in CVSS v2
func (o CVSSPtrOutput) Authentication() CVSSAuthenticationPtrOutput {
	return o.ApplyT(func(v *CVSS) *CVSSAuthentication {
		if v == nil {
			return nil
		}
		return v.Authentication
	}).(CVSSAuthenticationPtrOutput)
}

// Defined in CVSS v3, CVSS v2
func (o CVSSPtrOutput) AvailabilityImpact() CVSSAvailabilityImpactPtrOutput {
	return o.ApplyT(func(v *CVSS) *CVSSAvailabilityImpact {
		if v == nil {
			return nil
		}
		return v.AvailabilityImpact
	}).(CVSSAvailabilityImpactPtrOutput)
}

// The base score is a function of the base metric scores.
func (o CVSSPtrOutput) BaseScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *CVSS) *float64 {
		if v == nil {
			return nil
		}
		return v.BaseScore
	}).(pulumi.Float64PtrOutput)
}

// Defined in CVSS v3, CVSS v2
func (o CVSSPtrOutput) ConfidentialityImpact() CVSSConfidentialityImpactPtrOutput {
	return o.ApplyT(func(v *CVSS) *CVSSConfidentialityImpact {
		if v == nil {
			return nil
		}
		return v.ConfidentialityImpact
	}).(CVSSConfidentialityImpactPtrOutput)
}

func (o CVSSPtrOutput) ExploitabilityScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *CVSS) *float64 {
		if v == nil {
			return nil
		}
		return v.ExploitabilityScore
	}).(pulumi.Float64PtrOutput)
}

func (o CVSSPtrOutput) ImpactScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *CVSS) *float64 {
		if v == nil {
			return nil
		}
		return v.ImpactScore
	}).(pulumi.Float64PtrOutput)
}

// Defined in CVSS v3, CVSS v2
func (o CVSSPtrOutput) IntegrityImpact() CVSSIntegrityImpactPtrOutput {
	return o.ApplyT(func(v *CVSS) *CVSSIntegrityImpact {
		if v == nil {
			return nil
		}
		return v.IntegrityImpact
	}).(CVSSIntegrityImpactPtrOutput)
}

// Defined in CVSS v3
func (o CVSSPtrOutput) PrivilegesRequired() CVSSPrivilegesRequiredPtrOutput {
	return o.ApplyT(func(v *CVSS) *CVSSPrivilegesRequired {
		if v == nil {
			return nil
		}
		return v.PrivilegesRequired
	}).(CVSSPrivilegesRequiredPtrOutput)
}

// Defined in CVSS v3
func (o CVSSPtrOutput) Scope() CVSSScopePtrOutput {
	return o.ApplyT(func(v *CVSS) *CVSSScope {
		if v == nil {
			return nil
		}
		return v.Scope
	}).(CVSSScopePtrOutput)
}

// Defined in CVSS v3
func (o CVSSPtrOutput) UserInteraction() CVSSUserInteractionPtrOutput {
	return o.ApplyT(func(v *CVSS) *CVSSUserInteraction {
		if v == nil {
			return nil
		}
		return v.UserInteraction
	}).(CVSSUserInteractionPtrOutput)
}

// Common Vulnerability Scoring System. This message is compatible with CVSS v2 and v3. For CVSS v2 details, see https://www.first.org/cvss/v2/guide CVSS v2 calculator: https://nvd.nist.gov/vuln-metrics/cvss/v2-calculator For CVSS v3 details, see https://www.first.org/cvss/specification-document CVSS v3 calculator: https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator
type CVSSResponse struct {
	// Defined in CVSS v3, CVSS v2
	AttackComplexity string `pulumi:"attackComplexity"`
	// Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments. Defined in CVSS v3, CVSS v2
	AttackVector string `pulumi:"attackVector"`
	// Defined in CVSS v2
	Authentication string `pulumi:"authentication"`
	// Defined in CVSS v3, CVSS v2
	AvailabilityImpact string `pulumi:"availabilityImpact"`
	// The base score is a function of the base metric scores.
	BaseScore float64 `pulumi:"baseScore"`
	// Defined in CVSS v3, CVSS v2
	ConfidentialityImpact string  `pulumi:"confidentialityImpact"`
	ExploitabilityScore   float64 `pulumi:"exploitabilityScore"`
	ImpactScore           float64 `pulumi:"impactScore"`
	// Defined in CVSS v3, CVSS v2
	IntegrityImpact string `pulumi:"integrityImpact"`
	// Defined in CVSS v3
	PrivilegesRequired string `pulumi:"privilegesRequired"`
	// Defined in CVSS v3
	Scope string `pulumi:"scope"`
	// Defined in CVSS v3
	UserInteraction string `pulumi:"userInteraction"`
}

// Common Vulnerability Scoring System. This message is compatible with CVSS v2 and v3. For CVSS v2 details, see https://www.first.org/cvss/v2/guide CVSS v2 calculator: https://nvd.nist.gov/vuln-metrics/cvss/v2-calculator For CVSS v3 details, see https://www.first.org/cvss/specification-document CVSS v3 calculator: https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator
type CVSSResponseOutput struct{ *pulumi.OutputState }

func (CVSSResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CVSSResponse)(nil)).Elem()
}

func (o CVSSResponseOutput) ToCVSSResponseOutput() CVSSResponseOutput {
	return o
}

func (o CVSSResponseOutput) ToCVSSResponseOutputWithContext(ctx context.Context) CVSSResponseOutput {
	return o
}

// Defined in CVSS v3, CVSS v2
func (o CVSSResponseOutput) AttackComplexity() pulumi.StringOutput {
	return o.ApplyT(func(v CVSSResponse) string { return v.AttackComplexity }).(pulumi.StringOutput)
}

// Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments. Defined in CVSS v3, CVSS v2
func (o CVSSResponseOutput) AttackVector() pulumi.StringOutput {
	return o.ApplyT(func(v CVSSResponse) string { return v.AttackVector }).(pulumi.StringOutput)
}

// Defined in CVSS v2
func (o CVSSResponseOutput) Authentication() pulumi.StringOutput {
	return o.ApplyT(func(v CVSSResponse) string { return v.Authentication }).(pulumi.StringOutput)
}

// Defined in CVSS v3, CVSS v2
func (o CVSSResponseOutput) AvailabilityImpact() pulumi.StringOutput {
	return o.ApplyT(func(v CVSSResponse) string { return v.AvailabilityImpact }).(pulumi.StringOutput)
}

// The base score is a function of the base metric scores.
func (o CVSSResponseOutput) BaseScore() pulumi.Float64Output {
	return o.ApplyT(func(v CVSSResponse) float64 { return v.BaseScore }).(pulumi.Float64Output)
}

// Defined in CVSS v3, CVSS v2
func (o CVSSResponseOutput) ConfidentialityImpact() pulumi.StringOutput {
	return o.ApplyT(func(v CVSSResponse) string { return v.ConfidentialityImpact }).(pulumi.StringOutput)
}

func (o CVSSResponseOutput) ExploitabilityScore() pulumi.Float64Output {
	return o.ApplyT(func(v CVSSResponse) float64 { return v.ExploitabilityScore }).(pulumi.Float64Output)
}

func (o CVSSResponseOutput) ImpactScore() pulumi.Float64Output {
	return o.ApplyT(func(v CVSSResponse) float64 { return v.ImpactScore }).(pulumi.Float64Output)
}

// Defined in CVSS v3, CVSS v2
func (o CVSSResponseOutput) IntegrityImpact() pulumi.StringOutput {
	return o.ApplyT(func(v CVSSResponse) string { return v.IntegrityImpact }).(pulumi.StringOutput)
}

// Defined in CVSS v3
func (o CVSSResponseOutput) PrivilegesRequired() pulumi.StringOutput {
	return o.ApplyT(func(v CVSSResponse) string { return v.PrivilegesRequired }).(pulumi.StringOutput)
}

// Defined in CVSS v3
func (o CVSSResponseOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v CVSSResponse) string { return v.Scope }).(pulumi.StringOutput)
}

// Defined in CVSS v3
func (o CVSSResponseOutput) UserInteraction() pulumi.StringOutput {
	return o.ApplyT(func(v CVSSResponse) string { return v.UserInteraction }).(pulumi.StringOutput)
}

// A compliance check that is a CIS benchmark.
type CisBenchmark struct {
	// The profile level of this CIS benchmark check.
	ProfileLevel *int `pulumi:"profileLevel"`
	// The severity level of this CIS benchmark check.
	Severity *CisBenchmarkSeverity `pulumi:"severity"`
}

// CisBenchmarkInput is an input type that accepts CisBenchmarkArgs and CisBenchmarkOutput values.
// You can construct a concrete instance of `CisBenchmarkInput` via:
//
//	CisBenchmarkArgs{...}
type CisBenchmarkInput interface {
	pulumi.Input

	ToCisBenchmarkOutput() CisBenchmarkOutput
	ToCisBenchmarkOutputWithContext(context.Context) CisBenchmarkOutput
}

// A compliance check that is a CIS benchmark.
type CisBenchmarkArgs struct {
	// The profile level of this CIS benchmark check.
	ProfileLevel pulumi.IntPtrInput `pulumi:"profileLevel"`
	// The severity level of this CIS benchmark check.
	Severity CisBenchmarkSeverityPtrInput `pulumi:"severity"`
}

func (CisBenchmarkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CisBenchmark)(nil)).Elem()
}

func (i CisBenchmarkArgs) ToCisBenchmarkOutput() CisBenchmarkOutput {
	return i.ToCisBenchmarkOutputWithContext(context.Background())
}

func (i CisBenchmarkArgs) ToCisBenchmarkOutputWithContext(ctx context.Context) CisBenchmarkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CisBenchmarkOutput)
}

func (i CisBenchmarkArgs) ToCisBenchmarkPtrOutput() CisBenchmarkPtrOutput {
	return i.ToCisBenchmarkPtrOutputWithContext(context.Background())
}

func (i CisBenchmarkArgs) ToCisBenchmarkPtrOutputWithContext(ctx context.Context) CisBenchmarkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CisBenchmarkOutput).ToCisBenchmarkPtrOutputWithContext(ctx)
}

// CisBenchmarkPtrInput is an input type that accepts CisBenchmarkArgs, CisBenchmarkPtr and CisBenchmarkPtrOutput values.
// You can construct a concrete instance of `CisBenchmarkPtrInput` via:
//
//	        CisBenchmarkArgs{...}
//
//	or:
//
//	        nil
type CisBenchmarkPtrInput interface {
	pulumi.Input

	ToCisBenchmarkPtrOutput() CisBenchmarkPtrOutput
	ToCisBenchmarkPtrOutputWithContext(context.Context) CisBenchmarkPtrOutput
}

type cisBenchmarkPtrType CisBenchmarkArgs

func CisBenchmarkPtr(v *CisBenchmarkArgs) CisBenchmarkPtrInput {
	return (*cisBenchmarkPtrType)(v)
}

func (*cisBenchmarkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CisBenchmark)(nil)).Elem()
}

func (i *cisBenchmarkPtrType) ToCisBenchmarkPtrOutput() CisBenchmarkPtrOutput {
	return i.ToCisBenchmarkPtrOutputWithContext(context.Background())
}

func (i *cisBenchmarkPtrType) ToCisBenchmarkPtrOutputWithContext(ctx context.Context) CisBenchmarkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CisBenchmarkPtrOutput)
}

// A compliance check that is a CIS benchmark.
type CisBenchmarkOutput struct{ *pulumi.OutputState }

func (CisBenchmarkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CisBenchmark)(nil)).Elem()
}

func (o CisBenchmarkOutput) ToCisBenchmarkOutput() CisBenchmarkOutput {
	return o
}

func (o CisBenchmarkOutput) ToCisBenchmarkOutputWithContext(ctx context.Context) CisBenchmarkOutput {
	return o
}

func (o CisBenchmarkOutput) ToCisBenchmarkPtrOutput() CisBenchmarkPtrOutput {
	return o.ToCisBenchmarkPtrOutputWithContext(context.Background())
}

func (o CisBenchmarkOutput) ToCisBenchmarkPtrOutputWithContext(ctx context.Context) CisBenchmarkPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CisBenchmark) *CisBenchmark {
		return &v
	}).(CisBenchmarkPtrOutput)
}

// The profile level of this CIS benchmark check.
func (o CisBenchmarkOutput) ProfileLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CisBenchmark) *int { return v.ProfileLevel }).(pulumi.IntPtrOutput)
}

// The severity level of this CIS benchmark check.
func (o CisBenchmarkOutput) Severity() CisBenchmarkSeverityPtrOutput {
	return o.ApplyT(func(v CisBenchmark) *CisBenchmarkSeverity { return v.Severity }).(CisBenchmarkSeverityPtrOutput)
}

type CisBenchmarkPtrOutput struct{ *pulumi.OutputState }

func (CisBenchmarkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CisBenchmark)(nil)).Elem()
}

func (o CisBenchmarkPtrOutput) ToCisBenchmarkPtrOutput() CisBenchmarkPtrOutput {
	return o
}

func (o CisBenchmarkPtrOutput) ToCisBenchmarkPtrOutputWithContext(ctx context.Context) CisBenchmarkPtrOutput {
	return o
}

func (o CisBenchmarkPtrOutput) Elem() CisBenchmarkOutput {
	return o.ApplyT(func(v *CisBenchmark) CisBenchmark {
		if v != nil {
			return *v
		}
		var ret CisBenchmark
		return ret
	}).(CisBenchmarkOutput)
}

// The profile level of this CIS benchmark check.
func (o CisBenchmarkPtrOutput) ProfileLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CisBenchmark) *int {
		if v == nil {
			return nil
		}
		return v.ProfileLevel
	}).(pulumi.IntPtrOutput)
}

// The severity level of this CIS benchmark check.
func (o CisBenchmarkPtrOutput) Severity() CisBenchmarkSeverityPtrOutput {
	return o.ApplyT(func(v *CisBenchmark) *CisBenchmarkSeverity {
		if v == nil {
			return nil
		}
		return v.Severity
	}).(CisBenchmarkSeverityPtrOutput)
}

// A compliance check that is a CIS benchmark.
type CisBenchmarkResponse struct {
	// The profile level of this CIS benchmark check.
	ProfileLevel int `pulumi:"profileLevel"`
	// The severity level of this CIS benchmark check.
	Severity string `pulumi:"severity"`
}

// A compliance check that is a CIS benchmark.
type CisBenchmarkResponseOutput struct{ *pulumi.OutputState }

func (CisBenchmarkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CisBenchmarkResponse)(nil)).Elem()
}

func (o CisBenchmarkResponseOutput) ToCisBenchmarkResponseOutput() CisBenchmarkResponseOutput {
	return o
}

func (o CisBenchmarkResponseOutput) ToCisBenchmarkResponseOutputWithContext(ctx context.Context) CisBenchmarkResponseOutput {
	return o
}

// The profile level of this CIS benchmark check.
func (o CisBenchmarkResponseOutput) ProfileLevel() pulumi.IntOutput {
	return o.ApplyT(func(v CisBenchmarkResponse) int { return v.ProfileLevel }).(pulumi.IntOutput)
}

// The severity level of this CIS benchmark check.
func (o CisBenchmarkResponseOutput) Severity() pulumi.StringOutput {
	return o.ApplyT(func(v CisBenchmarkResponse) string { return v.Severity }).(pulumi.StringOutput)
}

// Command describes a step performed as part of the build pipeline.
type Command struct {
	// Command-line arguments used when executing this Command.
	Args []string `pulumi:"args"`
	// Working directory (relative to project source root) used when running this Command.
	Dir *string `pulumi:"dir"`
	// Environment variables set before running this Command.
	Env []string `pulumi:"env"`
	// Optional unique identifier for this Command, used in wait_for to reference this Command as a dependency.
	Id *string `pulumi:"id"`
	// Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`.
	Name *string `pulumi:"name"`
	// The ID(s) of the Command(s) that this Command depends on.
	WaitFor []string `pulumi:"waitFor"`
}

// CommandInput is an input type that accepts CommandArgs and CommandOutput values.
// You can construct a concrete instance of `CommandInput` via:
//
//	CommandArgs{...}
type CommandInput interface {
	pulumi.Input

	ToCommandOutput() CommandOutput
	ToCommandOutputWithContext(context.Context) CommandOutput
}

// Command describes a step performed as part of the build pipeline.
type CommandArgs struct {
	// Command-line arguments used when executing this Command.
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Working directory (relative to project source root) used when running this Command.
	Dir pulumi.StringPtrInput `pulumi:"dir"`
	// Environment variables set before running this Command.
	Env pulumi.StringArrayInput `pulumi:"env"`
	// Optional unique identifier for this Command, used in wait_for to reference this Command as a dependency.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The ID(s) of the Command(s) that this Command depends on.
	WaitFor pulumi.StringArrayInput `pulumi:"waitFor"`
}

func (CommandArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Command)(nil)).Elem()
}

func (i CommandArgs) ToCommandOutput() CommandOutput {
	return i.ToCommandOutputWithContext(context.Background())
}

func (i CommandArgs) ToCommandOutputWithContext(ctx context.Context) CommandOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandOutput)
}

// CommandArrayInput is an input type that accepts CommandArray and CommandArrayOutput values.
// You can construct a concrete instance of `CommandArrayInput` via:
//
//	CommandArray{ CommandArgs{...} }
type CommandArrayInput interface {
	pulumi.Input

	ToCommandArrayOutput() CommandArrayOutput
	ToCommandArrayOutputWithContext(context.Context) CommandArrayOutput
}

type CommandArray []CommandInput

func (CommandArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Command)(nil)).Elem()
}

func (i CommandArray) ToCommandArrayOutput() CommandArrayOutput {
	return i.ToCommandArrayOutputWithContext(context.Background())
}

func (i CommandArray) ToCommandArrayOutputWithContext(ctx context.Context) CommandArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandArrayOutput)
}

// Command describes a step performed as part of the build pipeline.
type CommandOutput struct{ *pulumi.OutputState }

func (CommandOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Command)(nil)).Elem()
}

func (o CommandOutput) ToCommandOutput() CommandOutput {
	return o
}

func (o CommandOutput) ToCommandOutputWithContext(ctx context.Context) CommandOutput {
	return o
}

// Command-line arguments used when executing this Command.
func (o CommandOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Command) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Working directory (relative to project source root) used when running this Command.
func (o CommandOutput) Dir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Command) *string { return v.Dir }).(pulumi.StringPtrOutput)
}

// Environment variables set before running this Command.
func (o CommandOutput) Env() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Command) []string { return v.Env }).(pulumi.StringArrayOutput)
}

// Optional unique identifier for this Command, used in wait_for to reference this Command as a dependency.
func (o CommandOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Command) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`.
func (o CommandOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Command) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The ID(s) of the Command(s) that this Command depends on.
func (o CommandOutput) WaitFor() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Command) []string { return v.WaitFor }).(pulumi.StringArrayOutput)
}

type CommandArrayOutput struct{ *pulumi.OutputState }

func (CommandArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Command)(nil)).Elem()
}

func (o CommandArrayOutput) ToCommandArrayOutput() CommandArrayOutput {
	return o
}

func (o CommandArrayOutput) ToCommandArrayOutputWithContext(ctx context.Context) CommandArrayOutput {
	return o
}

func (o CommandArrayOutput) Index(i pulumi.IntInput) CommandOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Command {
		return vs[0].([]Command)[vs[1].(int)]
	}).(CommandOutput)
}

// Command describes a step performed as part of the build pipeline.
type CommandResponse struct {
	// Command-line arguments used when executing this Command.
	Args []string `pulumi:"args"`
	// Working directory (relative to project source root) used when running this Command.
	Dir string `pulumi:"dir"`
	// Environment variables set before running this Command.
	Env []string `pulumi:"env"`
	// Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`.
	Name string `pulumi:"name"`
	// The ID(s) of the Command(s) that this Command depends on.
	WaitFor []string `pulumi:"waitFor"`
}

// Command describes a step performed as part of the build pipeline.
type CommandResponseOutput struct{ *pulumi.OutputState }

func (CommandResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommandResponse)(nil)).Elem()
}

func (o CommandResponseOutput) ToCommandResponseOutput() CommandResponseOutput {
	return o
}

func (o CommandResponseOutput) ToCommandResponseOutputWithContext(ctx context.Context) CommandResponseOutput {
	return o
}

// Command-line arguments used when executing this Command.
func (o CommandResponseOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CommandResponse) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Working directory (relative to project source root) used when running this Command.
func (o CommandResponseOutput) Dir() pulumi.StringOutput {
	return o.ApplyT(func(v CommandResponse) string { return v.Dir }).(pulumi.StringOutput)
}

// Environment variables set before running this Command.
func (o CommandResponseOutput) Env() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CommandResponse) []string { return v.Env }).(pulumi.StringArrayOutput)
}

// Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`.
func (o CommandResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CommandResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The ID(s) of the Command(s) that this Command depends on.
func (o CommandResponseOutput) WaitFor() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CommandResponse) []string { return v.WaitFor }).(pulumi.StringArrayOutput)
}

type CommandResponseArrayOutput struct{ *pulumi.OutputState }

func (CommandResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CommandResponse)(nil)).Elem()
}

func (o CommandResponseArrayOutput) ToCommandResponseArrayOutput() CommandResponseArrayOutput {
	return o
}

func (o CommandResponseArrayOutput) ToCommandResponseArrayOutputWithContext(ctx context.Context) CommandResponseArrayOutput {
	return o
}

func (o CommandResponseArrayOutput) Index(i pulumi.IntInput) CommandResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CommandResponse {
		return vs[0].([]CommandResponse)[vs[1].(int)]
	}).(CommandResponseOutput)
}

// Indicates that the builder claims certain fields in this message to be complete.
type Completeness struct {
	// If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe.
	Arguments *bool `pulumi:"arguments"`
	// If true, the builder claims that recipe.environment is claimed to be complete.
	Environment *bool `pulumi:"environment"`
	// If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called "hermetic".
	Materials *bool `pulumi:"materials"`
}

// CompletenessInput is an input type that accepts CompletenessArgs and CompletenessOutput values.
// You can construct a concrete instance of `CompletenessInput` via:
//
//	CompletenessArgs{...}
type CompletenessInput interface {
	pulumi.Input

	ToCompletenessOutput() CompletenessOutput
	ToCompletenessOutputWithContext(context.Context) CompletenessOutput
}

// Indicates that the builder claims certain fields in this message to be complete.
type CompletenessArgs struct {
	// If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe.
	Arguments pulumi.BoolPtrInput `pulumi:"arguments"`
	// If true, the builder claims that recipe.environment is claimed to be complete.
	Environment pulumi.BoolPtrInput `pulumi:"environment"`
	// If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called "hermetic".
	Materials pulumi.BoolPtrInput `pulumi:"materials"`
}

func (CompletenessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Completeness)(nil)).Elem()
}

func (i CompletenessArgs) ToCompletenessOutput() CompletenessOutput {
	return i.ToCompletenessOutputWithContext(context.Background())
}

func (i CompletenessArgs) ToCompletenessOutputWithContext(ctx context.Context) CompletenessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CompletenessOutput)
}

func (i CompletenessArgs) ToCompletenessPtrOutput() CompletenessPtrOutput {
	return i.ToCompletenessPtrOutputWithContext(context.Background())
}

func (i CompletenessArgs) ToCompletenessPtrOutputWithContext(ctx context.Context) CompletenessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CompletenessOutput).ToCompletenessPtrOutputWithContext(ctx)
}

// CompletenessPtrInput is an input type that accepts CompletenessArgs, CompletenessPtr and CompletenessPtrOutput values.
// You can construct a concrete instance of `CompletenessPtrInput` via:
//
//	        CompletenessArgs{...}
//
//	or:
//
//	        nil
type CompletenessPtrInput interface {
	pulumi.Input

	ToCompletenessPtrOutput() CompletenessPtrOutput
	ToCompletenessPtrOutputWithContext(context.Context) CompletenessPtrOutput
}

type completenessPtrType CompletenessArgs

func CompletenessPtr(v *CompletenessArgs) CompletenessPtrInput {
	return (*completenessPtrType)(v)
}

func (*completenessPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Completeness)(nil)).Elem()
}

func (i *completenessPtrType) ToCompletenessPtrOutput() CompletenessPtrOutput {
	return i.ToCompletenessPtrOutputWithContext(context.Background())
}

func (i *completenessPtrType) ToCompletenessPtrOutputWithContext(ctx context.Context) CompletenessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CompletenessPtrOutput)
}

// Indicates that the builder claims certain fields in this message to be complete.
type CompletenessOutput struct{ *pulumi.OutputState }

func (CompletenessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Completeness)(nil)).Elem()
}

func (o CompletenessOutput) ToCompletenessOutput() CompletenessOutput {
	return o
}

func (o CompletenessOutput) ToCompletenessOutputWithContext(ctx context.Context) CompletenessOutput {
	return o
}

func (o CompletenessOutput) ToCompletenessPtrOutput() CompletenessPtrOutput {
	return o.ToCompletenessPtrOutputWithContext(context.Background())
}

func (o CompletenessOutput) ToCompletenessPtrOutputWithContext(ctx context.Context) CompletenessPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Completeness) *Completeness {
		return &v
	}).(CompletenessPtrOutput)
}

// If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe.
func (o CompletenessOutput) Arguments() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Completeness) *bool { return v.Arguments }).(pulumi.BoolPtrOutput)
}

// If true, the builder claims that recipe.environment is claimed to be complete.
func (o CompletenessOutput) Environment() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Completeness) *bool { return v.Environment }).(pulumi.BoolPtrOutput)
}

// If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called "hermetic".
func (o CompletenessOutput) Materials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Completeness) *bool { return v.Materials }).(pulumi.BoolPtrOutput)
}

type CompletenessPtrOutput struct{ *pulumi.OutputState }

func (CompletenessPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Completeness)(nil)).Elem()
}

func (o CompletenessPtrOutput) ToCompletenessPtrOutput() CompletenessPtrOutput {
	return o
}

func (o CompletenessPtrOutput) ToCompletenessPtrOutputWithContext(ctx context.Context) CompletenessPtrOutput {
	return o
}

func (o CompletenessPtrOutput) Elem() CompletenessOutput {
	return o.ApplyT(func(v *Completeness) Completeness {
		if v != nil {
			return *v
		}
		var ret Completeness
		return ret
	}).(CompletenessOutput)
}

// If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe.
func (o CompletenessPtrOutput) Arguments() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Completeness) *bool {
		if v == nil {
			return nil
		}
		return v.Arguments
	}).(pulumi.BoolPtrOutput)
}

// If true, the builder claims that recipe.environment is claimed to be complete.
func (o CompletenessPtrOutput) Environment() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Completeness) *bool {
		if v == nil {
			return nil
		}
		return v.Environment
	}).(pulumi.BoolPtrOutput)
}

// If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called "hermetic".
func (o CompletenessPtrOutput) Materials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Completeness) *bool {
		if v == nil {
			return nil
		}
		return v.Materials
	}).(pulumi.BoolPtrOutput)
}

// Indicates that the builder claims certain fields in this message to be complete.
type CompletenessResponse struct {
	// If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe.
	Arguments bool `pulumi:"arguments"`
	// If true, the builder claims that recipe.environment is claimed to be complete.
	Environment bool `pulumi:"environment"`
	// If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called "hermetic".
	Materials bool `pulumi:"materials"`
}

// Indicates that the builder claims certain fields in this message to be complete.
type CompletenessResponseOutput struct{ *pulumi.OutputState }

func (CompletenessResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CompletenessResponse)(nil)).Elem()
}

func (o CompletenessResponseOutput) ToCompletenessResponseOutput() CompletenessResponseOutput {
	return o
}

func (o CompletenessResponseOutput) ToCompletenessResponseOutputWithContext(ctx context.Context) CompletenessResponseOutput {
	return o
}

// If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe.
func (o CompletenessResponseOutput) Arguments() pulumi.BoolOutput {
	return o.ApplyT(func(v CompletenessResponse) bool { return v.Arguments }).(pulumi.BoolOutput)
}

// If true, the builder claims that recipe.environment is claimed to be complete.
func (o CompletenessResponseOutput) Environment() pulumi.BoolOutput {
	return o.ApplyT(func(v CompletenessResponse) bool { return v.Environment }).(pulumi.BoolOutput)
}

// If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called "hermetic".
func (o CompletenessResponseOutput) Materials() pulumi.BoolOutput {
	return o.ApplyT(func(v CompletenessResponse) bool { return v.Materials }).(pulumi.BoolOutput)
}

// ComplianceNote encapsulates all information about a specific compliance check.
type ComplianceNote struct {
	// Right now we only have one compliance type, but we may add additional types in the future.
	CisBenchmark *CisBenchmark `pulumi:"cisBenchmark"`
	// A description about this compliance check.
	Description *string `pulumi:"description"`
	// A rationale for the existence of this compliance check.
	Rationale *string `pulumi:"rationale"`
	// A description of remediation steps if the compliance check fails.
	Remediation *string `pulumi:"remediation"`
	// Serialized scan instructions with a predefined format.
	ScanInstructions *string `pulumi:"scanInstructions"`
	// The title that identifies this compliance check.
	Title *string `pulumi:"title"`
	// The OS and config versions the benchmark applies to.
	Version []ComplianceVersion `pulumi:"version"`
}

// ComplianceNoteInput is an input type that accepts ComplianceNoteArgs and ComplianceNoteOutput values.
// You can construct a concrete instance of `ComplianceNoteInput` via:
//
//	ComplianceNoteArgs{...}
type ComplianceNoteInput interface {
	pulumi.Input

	ToComplianceNoteOutput() ComplianceNoteOutput
	ToComplianceNoteOutputWithContext(context.Context) ComplianceNoteOutput
}

// ComplianceNote encapsulates all information about a specific compliance check.
type ComplianceNoteArgs struct {
	// Right now we only have one compliance type, but we may add additional types in the future.
	CisBenchmark CisBenchmarkPtrInput `pulumi:"cisBenchmark"`
	// A description about this compliance check.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// A rationale for the existence of this compliance check.
	Rationale pulumi.StringPtrInput `pulumi:"rationale"`
	// A description of remediation steps if the compliance check fails.
	Remediation pulumi.StringPtrInput `pulumi:"remediation"`
	// Serialized scan instructions with a predefined format.
	ScanInstructions pulumi.StringPtrInput `pulumi:"scanInstructions"`
	// The title that identifies this compliance check.
	Title pulumi.StringPtrInput `pulumi:"title"`
	// The OS and config versions the benchmark applies to.
	Version ComplianceVersionArrayInput `pulumi:"version"`
}

func (ComplianceNoteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComplianceNote)(nil)).Elem()
}

func (i ComplianceNoteArgs) ToComplianceNoteOutput() ComplianceNoteOutput {
	return i.ToComplianceNoteOutputWithContext(context.Background())
}

func (i ComplianceNoteArgs) ToComplianceNoteOutputWithContext(ctx context.Context) ComplianceNoteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComplianceNoteOutput)
}

func (i ComplianceNoteArgs) ToComplianceNotePtrOutput() ComplianceNotePtrOutput {
	return i.ToComplianceNotePtrOutputWithContext(context.Background())
}

func (i ComplianceNoteArgs) ToComplianceNotePtrOutputWithContext(ctx context.Context) ComplianceNotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComplianceNoteOutput).ToComplianceNotePtrOutputWithContext(ctx)
}

// ComplianceNotePtrInput is an input type that accepts ComplianceNoteArgs, ComplianceNotePtr and ComplianceNotePtrOutput values.
// You can construct a concrete instance of `ComplianceNotePtrInput` via:
//
//	        ComplianceNoteArgs{...}
//
//	or:
//
//	        nil
type ComplianceNotePtrInput interface {
	pulumi.Input

	ToComplianceNotePtrOutput() ComplianceNotePtrOutput
	ToComplianceNotePtrOutputWithContext(context.Context) ComplianceNotePtrOutput
}

type complianceNotePtrType ComplianceNoteArgs

func ComplianceNotePtr(v *ComplianceNoteArgs) ComplianceNotePtrInput {
	return (*complianceNotePtrType)(v)
}

func (*complianceNotePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComplianceNote)(nil)).Elem()
}

func (i *complianceNotePtrType) ToComplianceNotePtrOutput() ComplianceNotePtrOutput {
	return i.ToComplianceNotePtrOutputWithContext(context.Background())
}

func (i *complianceNotePtrType) ToComplianceNotePtrOutputWithContext(ctx context.Context) ComplianceNotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComplianceNotePtrOutput)
}

// ComplianceNote encapsulates all information about a specific compliance check.
type ComplianceNoteOutput struct{ *pulumi.OutputState }

func (ComplianceNoteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComplianceNote)(nil)).Elem()
}

func (o ComplianceNoteOutput) ToComplianceNoteOutput() ComplianceNoteOutput {
	return o
}

func (o ComplianceNoteOutput) ToComplianceNoteOutputWithContext(ctx context.Context) ComplianceNoteOutput {
	return o
}

func (o ComplianceNoteOutput) ToComplianceNotePtrOutput() ComplianceNotePtrOutput {
	return o.ToComplianceNotePtrOutputWithContext(context.Background())
}

func (o ComplianceNoteOutput) ToComplianceNotePtrOutputWithContext(ctx context.Context) ComplianceNotePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComplianceNote) *ComplianceNote {
		return &v
	}).(ComplianceNotePtrOutput)
}

// Right now we only have one compliance type, but we may add additional types in the future.
func (o ComplianceNoteOutput) CisBenchmark() CisBenchmarkPtrOutput {
	return o.ApplyT(func(v ComplianceNote) *CisBenchmark { return v.CisBenchmark }).(CisBenchmarkPtrOutput)
}

// A description about this compliance check.
func (o ComplianceNoteOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComplianceNote) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// A rationale for the existence of this compliance check.
func (o ComplianceNoteOutput) Rationale() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComplianceNote) *string { return v.Rationale }).(pulumi.StringPtrOutput)
}

// A description of remediation steps if the compliance check fails.
func (o ComplianceNoteOutput) Remediation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComplianceNote) *string { return v.Remediation }).(pulumi.StringPtrOutput)
}

// Serialized scan instructions with a predefined format.
func (o ComplianceNoteOutput) ScanInstructions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComplianceNote) *string { return v.ScanInstructions }).(pulumi.StringPtrOutput)
}

// The title that identifies this compliance check.
func (o ComplianceNoteOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComplianceNote) *string { return v.Title }).(pulumi.StringPtrOutput)
}

// The OS and config versions the benchmark applies to.
func (o ComplianceNoteOutput) Version() ComplianceVersionArrayOutput {
	return o.ApplyT(func(v ComplianceNote) []ComplianceVersion { return v.Version }).(ComplianceVersionArrayOutput)
}

type ComplianceNotePtrOutput struct{ *pulumi.OutputState }

func (ComplianceNotePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComplianceNote)(nil)).Elem()
}

func (o ComplianceNotePtrOutput) ToComplianceNotePtrOutput() ComplianceNotePtrOutput {
	return o
}

func (o ComplianceNotePtrOutput) ToComplianceNotePtrOutputWithContext(ctx context.Context) ComplianceNotePtrOutput {
	return o
}

func (o ComplianceNotePtrOutput) Elem() ComplianceNoteOutput {
	return o.ApplyT(func(v *ComplianceNote) ComplianceNote {
		if v != nil {
			return *v
		}
		var ret ComplianceNote
		return ret
	}).(ComplianceNoteOutput)
}

// Right now we only have one compliance type, but we may add additional types in the future.
func (o ComplianceNotePtrOutput) CisBenchmark() CisBenchmarkPtrOutput {
	return o.ApplyT(func(v *ComplianceNote) *CisBenchmark {
		if v == nil {
			return nil
		}
		return v.CisBenchmark
	}).(CisBenchmarkPtrOutput)
}

// A description about this compliance check.
func (o ComplianceNotePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComplianceNote) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// A rationale for the existence of this compliance check.
func (o ComplianceNotePtrOutput) Rationale() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComplianceNote) *string {
		if v == nil {
			return nil
		}
		return v.Rationale
	}).(pulumi.StringPtrOutput)
}

// A description of remediation steps if the compliance check fails.
func (o ComplianceNotePtrOutput) Remediation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComplianceNote) *string {
		if v == nil {
			return nil
		}
		return v.Remediation
	}).(pulumi.StringPtrOutput)
}

// Serialized scan instructions with a predefined format.
func (o ComplianceNotePtrOutput) ScanInstructions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComplianceNote) *string {
		if v == nil {
			return nil
		}
		return v.ScanInstructions
	}).(pulumi.StringPtrOutput)
}

// The title that identifies this compliance check.
func (o ComplianceNotePtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComplianceNote) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// The OS and config versions the benchmark applies to.
func (o ComplianceNotePtrOutput) Version() ComplianceVersionArrayOutput {
	return o.ApplyT(func(v *ComplianceNote) []ComplianceVersion {
		if v == nil {
			return nil
		}
		return v.Version
	}).(ComplianceVersionArrayOutput)
}

// ComplianceNote encapsulates all information about a specific compliance check.
type ComplianceNoteResponse struct {
	// Right now we only have one compliance type, but we may add additional types in the future.
	CisBenchmark CisBenchmarkResponse `pulumi:"cisBenchmark"`
	// A description about this compliance check.
	Description string `pulumi:"description"`
	// A rationale for the existence of this compliance check.
	Rationale string `pulumi:"rationale"`
	// A description of remediation steps if the compliance check fails.
	Remediation string `pulumi:"remediation"`
	// Serialized scan instructions with a predefined format.
	ScanInstructions string `pulumi:"scanInstructions"`
	// The title that identifies this compliance check.
	Title string `pulumi:"title"`
	// The OS and config versions the benchmark applies to.
	Version []ComplianceVersionResponse `pulumi:"version"`
}

// ComplianceNote encapsulates all information about a specific compliance check.
type ComplianceNoteResponseOutput struct{ *pulumi.OutputState }

func (ComplianceNoteResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComplianceNoteResponse)(nil)).Elem()
}

func (o ComplianceNoteResponseOutput) ToComplianceNoteResponseOutput() ComplianceNoteResponseOutput {
	return o
}

func (o ComplianceNoteResponseOutput) ToComplianceNoteResponseOutputWithContext(ctx context.Context) ComplianceNoteResponseOutput {
	return o
}

// Right now we only have one compliance type, but we may add additional types in the future.
func (o ComplianceNoteResponseOutput) CisBenchmark() CisBenchmarkResponseOutput {
	return o.ApplyT(func(v ComplianceNoteResponse) CisBenchmarkResponse { return v.CisBenchmark }).(CisBenchmarkResponseOutput)
}

// A description about this compliance check.
func (o ComplianceNoteResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ComplianceNoteResponse) string { return v.Description }).(pulumi.StringOutput)
}

// A rationale for the existence of this compliance check.
func (o ComplianceNoteResponseOutput) Rationale() pulumi.StringOutput {
	return o.ApplyT(func(v ComplianceNoteResponse) string { return v.Rationale }).(pulumi.StringOutput)
}

// A description of remediation steps if the compliance check fails.
func (o ComplianceNoteResponseOutput) Remediation() pulumi.StringOutput {
	return o.ApplyT(func(v ComplianceNoteResponse) string { return v.Remediation }).(pulumi.StringOutput)
}

// Serialized scan instructions with a predefined format.
func (o ComplianceNoteResponseOutput) ScanInstructions() pulumi.StringOutput {
	return o.ApplyT(func(v ComplianceNoteResponse) string { return v.ScanInstructions }).(pulumi.StringOutput)
}

// The title that identifies this compliance check.
func (o ComplianceNoteResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ComplianceNoteResponse) string { return v.Title }).(pulumi.StringOutput)
}

// The OS and config versions the benchmark applies to.
func (o ComplianceNoteResponseOutput) Version() ComplianceVersionResponseArrayOutput {
	return o.ApplyT(func(v ComplianceNoteResponse) []ComplianceVersionResponse { return v.Version }).(ComplianceVersionResponseArrayOutput)
}

// An indication that the compliance checks in the associated ComplianceNote were not satisfied for particular resources or a specified reason.
type ComplianceOccurrence struct {
	// The reason for non compliance of these files.
	NonComplianceReason *string `pulumi:"nonComplianceReason"`
	// A list of files which are violating compliance checks.
	NonCompliantFiles []NonCompliantFile `pulumi:"nonCompliantFiles"`
}

// ComplianceOccurrenceInput is an input type that accepts ComplianceOccurrenceArgs and ComplianceOccurrenceOutput values.
// You can construct a concrete instance of `ComplianceOccurrenceInput` via:
//
//	ComplianceOccurrenceArgs{...}
type ComplianceOccurrenceInput interface {
	pulumi.Input

	ToComplianceOccurrenceOutput() ComplianceOccurrenceOutput
	ToComplianceOccurrenceOutputWithContext(context.Context) ComplianceOccurrenceOutput
}

// An indication that the compliance checks in the associated ComplianceNote were not satisfied for particular resources or a specified reason.
type ComplianceOccurrenceArgs struct {
	// The reason for non compliance of these files.
	NonComplianceReason pulumi.StringPtrInput `pulumi:"nonComplianceReason"`
	// A list of files which are violating compliance checks.
	NonCompliantFiles NonCompliantFileArrayInput `pulumi:"nonCompliantFiles"`
}

func (ComplianceOccurrenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComplianceOccurrence)(nil)).Elem()
}

func (i ComplianceOccurrenceArgs) ToComplianceOccurrenceOutput() ComplianceOccurrenceOutput {
	return i.ToComplianceOccurrenceOutputWithContext(context.Background())
}

func (i ComplianceOccurrenceArgs) ToComplianceOccurrenceOutputWithContext(ctx context.Context) ComplianceOccurrenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComplianceOccurrenceOutput)
}

func (i ComplianceOccurrenceArgs) ToComplianceOccurrencePtrOutput() ComplianceOccurrencePtrOutput {
	return i.ToComplianceOccurrencePtrOutputWithContext(context.Background())
}

func (i ComplianceOccurrenceArgs) ToComplianceOccurrencePtrOutputWithContext(ctx context.Context) ComplianceOccurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComplianceOccurrenceOutput).ToComplianceOccurrencePtrOutputWithContext(ctx)
}

// ComplianceOccurrencePtrInput is an input type that accepts ComplianceOccurrenceArgs, ComplianceOccurrencePtr and ComplianceOccurrencePtrOutput values.
// You can construct a concrete instance of `ComplianceOccurrencePtrInput` via:
//
//	        ComplianceOccurrenceArgs{...}
//
//	or:
//
//	        nil
type ComplianceOccurrencePtrInput interface {
	pulumi.Input

	ToComplianceOccurrencePtrOutput() ComplianceOccurrencePtrOutput
	ToComplianceOccurrencePtrOutputWithContext(context.Context) ComplianceOccurrencePtrOutput
}

type complianceOccurrencePtrType ComplianceOccurrenceArgs

func ComplianceOccurrencePtr(v *ComplianceOccurrenceArgs) ComplianceOccurrencePtrInput {
	return (*complianceOccurrencePtrType)(v)
}

func (*complianceOccurrencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComplianceOccurrence)(nil)).Elem()
}

func (i *complianceOccurrencePtrType) ToComplianceOccurrencePtrOutput() ComplianceOccurrencePtrOutput {
	return i.ToComplianceOccurrencePtrOutputWithContext(context.Background())
}

func (i *complianceOccurrencePtrType) ToComplianceOccurrencePtrOutputWithContext(ctx context.Context) ComplianceOccurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComplianceOccurrencePtrOutput)
}

// An indication that the compliance checks in the associated ComplianceNote were not satisfied for particular resources or a specified reason.
type ComplianceOccurrenceOutput struct{ *pulumi.OutputState }

func (ComplianceOccurrenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComplianceOccurrence)(nil)).Elem()
}

func (o ComplianceOccurrenceOutput) ToComplianceOccurrenceOutput() ComplianceOccurrenceOutput {
	return o
}

func (o ComplianceOccurrenceOutput) ToComplianceOccurrenceOutputWithContext(ctx context.Context) ComplianceOccurrenceOutput {
	return o
}

func (o ComplianceOccurrenceOutput) ToComplianceOccurrencePtrOutput() ComplianceOccurrencePtrOutput {
	return o.ToComplianceOccurrencePtrOutputWithContext(context.Background())
}

func (o ComplianceOccurrenceOutput) ToComplianceOccurrencePtrOutputWithContext(ctx context.Context) ComplianceOccurrencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComplianceOccurrence) *ComplianceOccurrence {
		return &v
	}).(ComplianceOccurrencePtrOutput)
}

// The reason for non compliance of these files.
func (o ComplianceOccurrenceOutput) NonComplianceReason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComplianceOccurrence) *string { return v.NonComplianceReason }).(pulumi.StringPtrOutput)
}

// A list of files which are violating compliance checks.
func (o ComplianceOccurrenceOutput) NonCompliantFiles() NonCompliantFileArrayOutput {
	return o.ApplyT(func(v ComplianceOccurrence) []NonCompliantFile { return v.NonCompliantFiles }).(NonCompliantFileArrayOutput)
}

type ComplianceOccurrencePtrOutput struct{ *pulumi.OutputState }

func (ComplianceOccurrencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComplianceOccurrence)(nil)).Elem()
}

func (o ComplianceOccurrencePtrOutput) ToComplianceOccurrencePtrOutput() ComplianceOccurrencePtrOutput {
	return o
}

func (o ComplianceOccurrencePtrOutput) ToComplianceOccurrencePtrOutputWithContext(ctx context.Context) ComplianceOccurrencePtrOutput {
	return o
}

func (o ComplianceOccurrencePtrOutput) Elem() ComplianceOccurrenceOutput {
	return o.ApplyT(func(v *ComplianceOccurrence) ComplianceOccurrence {
		if v != nil {
			return *v
		}
		var ret ComplianceOccurrence
		return ret
	}).(ComplianceOccurrenceOutput)
}

// The reason for non compliance of these files.
func (o ComplianceOccurrencePtrOutput) NonComplianceReason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComplianceOccurrence) *string {
		if v == nil {
			return nil
		}
		return v.NonComplianceReason
	}).(pulumi.StringPtrOutput)
}

// A list of files which are violating compliance checks.
func (o ComplianceOccurrencePtrOutput) NonCompliantFiles() NonCompliantFileArrayOutput {
	return o.ApplyT(func(v *ComplianceOccurrence) []NonCompliantFile {
		if v == nil {
			return nil
		}
		return v.NonCompliantFiles
	}).(NonCompliantFileArrayOutput)
}

// An indication that the compliance checks in the associated ComplianceNote were not satisfied for particular resources or a specified reason.
type ComplianceOccurrenceResponse struct {
	// The reason for non compliance of these files.
	NonComplianceReason string `pulumi:"nonComplianceReason"`
	// A list of files which are violating compliance checks.
	NonCompliantFiles []NonCompliantFileResponse `pulumi:"nonCompliantFiles"`
}

// An indication that the compliance checks in the associated ComplianceNote were not satisfied for particular resources or a specified reason.
type ComplianceOccurrenceResponseOutput struct{ *pulumi.OutputState }

func (ComplianceOccurrenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComplianceOccurrenceResponse)(nil)).Elem()
}

func (o ComplianceOccurrenceResponseOutput) ToComplianceOccurrenceResponseOutput() ComplianceOccurrenceResponseOutput {
	return o
}

func (o ComplianceOccurrenceResponseOutput) ToComplianceOccurrenceResponseOutputWithContext(ctx context.Context) ComplianceOccurrenceResponseOutput {
	return o
}

// The reason for non compliance of these files.
func (o ComplianceOccurrenceResponseOutput) NonComplianceReason() pulumi.StringOutput {
	return o.ApplyT(func(v ComplianceOccurrenceResponse) string { return v.NonComplianceReason }).(pulumi.StringOutput)
}

// A list of files which are violating compliance checks.
func (o ComplianceOccurrenceResponseOutput) NonCompliantFiles() NonCompliantFileResponseArrayOutput {
	return o.ApplyT(func(v ComplianceOccurrenceResponse) []NonCompliantFileResponse { return v.NonCompliantFiles }).(NonCompliantFileResponseArrayOutput)
}

// Describes the CIS benchmark version that is applicable to a given OS and os version.
type ComplianceVersion struct {
	// The name of the document that defines this benchmark, e.g. "CIS Container-Optimized OS".
	BenchmarkDocument *string `pulumi:"benchmarkDocument"`
	// The CPE URI (https://cpe.mitre.org/specification/) this benchmark is applicable to.
	CpeUri *string `pulumi:"cpeUri"`
	// The version of the benchmark. This is set to the version of the OS-specific CIS document the benchmark is defined in.
	Version *string `pulumi:"version"`
}

// ComplianceVersionInput is an input type that accepts ComplianceVersionArgs and ComplianceVersionOutput values.
// You can construct a concrete instance of `ComplianceVersionInput` via:
//
//	ComplianceVersionArgs{...}
type ComplianceVersionInput interface {
	pulumi.Input

	ToComplianceVersionOutput() ComplianceVersionOutput
	ToComplianceVersionOutputWithContext(context.Context) ComplianceVersionOutput
}

// Describes the CIS benchmark version that is applicable to a given OS and os version.
type ComplianceVersionArgs struct {
	// The name of the document that defines this benchmark, e.g. "CIS Container-Optimized OS".
	BenchmarkDocument pulumi.StringPtrInput `pulumi:"benchmarkDocument"`
	// The CPE URI (https://cpe.mitre.org/specification/) this benchmark is applicable to.
	CpeUri pulumi.StringPtrInput `pulumi:"cpeUri"`
	// The version of the benchmark. This is set to the version of the OS-specific CIS document the benchmark is defined in.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (ComplianceVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComplianceVersion)(nil)).Elem()
}

func (i ComplianceVersionArgs) ToComplianceVersionOutput() ComplianceVersionOutput {
	return i.ToComplianceVersionOutputWithContext(context.Background())
}

func (i ComplianceVersionArgs) ToComplianceVersionOutputWithContext(ctx context.Context) ComplianceVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComplianceVersionOutput)
}

// ComplianceVersionArrayInput is an input type that accepts ComplianceVersionArray and ComplianceVersionArrayOutput values.
// You can construct a concrete instance of `ComplianceVersionArrayInput` via:
//
//	ComplianceVersionArray{ ComplianceVersionArgs{...} }
type ComplianceVersionArrayInput interface {
	pulumi.Input

	ToComplianceVersionArrayOutput() ComplianceVersionArrayOutput
	ToComplianceVersionArrayOutputWithContext(context.Context) ComplianceVersionArrayOutput
}

type ComplianceVersionArray []ComplianceVersionInput

func (ComplianceVersionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComplianceVersion)(nil)).Elem()
}

func (i ComplianceVersionArray) ToComplianceVersionArrayOutput() ComplianceVersionArrayOutput {
	return i.ToComplianceVersionArrayOutputWithContext(context.Background())
}

func (i ComplianceVersionArray) ToComplianceVersionArrayOutputWithContext(ctx context.Context) ComplianceVersionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComplianceVersionArrayOutput)
}

// Describes the CIS benchmark version that is applicable to a given OS and os version.
type ComplianceVersionOutput struct{ *pulumi.OutputState }

func (ComplianceVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComplianceVersion)(nil)).Elem()
}

func (o ComplianceVersionOutput) ToComplianceVersionOutput() ComplianceVersionOutput {
	return o
}

func (o ComplianceVersionOutput) ToComplianceVersionOutputWithContext(ctx context.Context) ComplianceVersionOutput {
	return o
}

// The name of the document that defines this benchmark, e.g. "CIS Container-Optimized OS".
func (o ComplianceVersionOutput) BenchmarkDocument() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComplianceVersion) *string { return v.BenchmarkDocument }).(pulumi.StringPtrOutput)
}

// The CPE URI (https://cpe.mitre.org/specification/) this benchmark is applicable to.
func (o ComplianceVersionOutput) CpeUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComplianceVersion) *string { return v.CpeUri }).(pulumi.StringPtrOutput)
}

// The version of the benchmark. This is set to the version of the OS-specific CIS document the benchmark is defined in.
func (o ComplianceVersionOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComplianceVersion) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type ComplianceVersionArrayOutput struct{ *pulumi.OutputState }

func (ComplianceVersionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComplianceVersion)(nil)).Elem()
}

func (o ComplianceVersionArrayOutput) ToComplianceVersionArrayOutput() ComplianceVersionArrayOutput {
	return o
}

func (o ComplianceVersionArrayOutput) ToComplianceVersionArrayOutputWithContext(ctx context.Context) ComplianceVersionArrayOutput {
	return o
}

func (o ComplianceVersionArrayOutput) Index(i pulumi.IntInput) ComplianceVersionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ComplianceVersion {
		return vs[0].([]ComplianceVersion)[vs[1].(int)]
	}).(ComplianceVersionOutput)
}

// Describes the CIS benchmark version that is applicable to a given OS and os version.
type ComplianceVersionResponse struct {
	// The name of the document that defines this benchmark, e.g. "CIS Container-Optimized OS".
	BenchmarkDocument string `pulumi:"benchmarkDocument"`
	// The CPE URI (https://cpe.mitre.org/specification/) this benchmark is applicable to.
	CpeUri string `pulumi:"cpeUri"`
	// The version of the benchmark. This is set to the version of the OS-specific CIS document the benchmark is defined in.
	Version string `pulumi:"version"`
}

// Describes the CIS benchmark version that is applicable to a given OS and os version.
type ComplianceVersionResponseOutput struct{ *pulumi.OutputState }

func (ComplianceVersionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComplianceVersionResponse)(nil)).Elem()
}

func (o ComplianceVersionResponseOutput) ToComplianceVersionResponseOutput() ComplianceVersionResponseOutput {
	return o
}

func (o ComplianceVersionResponseOutput) ToComplianceVersionResponseOutputWithContext(ctx context.Context) ComplianceVersionResponseOutput {
	return o
}

// The name of the document that defines this benchmark, e.g. "CIS Container-Optimized OS".
func (o ComplianceVersionResponseOutput) BenchmarkDocument() pulumi.StringOutput {
	return o.ApplyT(func(v ComplianceVersionResponse) string { return v.BenchmarkDocument }).(pulumi.StringOutput)
}

// The CPE URI (https://cpe.mitre.org/specification/) this benchmark is applicable to.
func (o ComplianceVersionResponseOutput) CpeUri() pulumi.StringOutput {
	return o.ApplyT(func(v ComplianceVersionResponse) string { return v.CpeUri }).(pulumi.StringOutput)
}

// The version of the benchmark. This is set to the version of the OS-specific CIS document the benchmark is defined in.
func (o ComplianceVersionResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v ComplianceVersionResponse) string { return v.Version }).(pulumi.StringOutput)
}

type ComplianceVersionResponseArrayOutput struct{ *pulumi.OutputState }

func (ComplianceVersionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComplianceVersionResponse)(nil)).Elem()
}

func (o ComplianceVersionResponseArrayOutput) ToComplianceVersionResponseArrayOutput() ComplianceVersionResponseArrayOutput {
	return o
}

func (o ComplianceVersionResponseArrayOutput) ToComplianceVersionResponseArrayOutputWithContext(ctx context.Context) ComplianceVersionResponseArrayOutput {
	return o
}

func (o ComplianceVersionResponseArrayOutput) Index(i pulumi.IntInput) ComplianceVersionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ComplianceVersionResponse {
		return vs[0].([]ComplianceVersionResponse)[vs[1].(int)]
	}).(ComplianceVersionResponseOutput)
}

// A note describing an attestation
type DSSEAttestationNote struct {
	// DSSEHint hints at the purpose of the attestation authority.
	Hint *DSSEHint `pulumi:"hint"`
}

// DSSEAttestationNoteInput is an input type that accepts DSSEAttestationNoteArgs and DSSEAttestationNoteOutput values.
// You can construct a concrete instance of `DSSEAttestationNoteInput` via:
//
//	DSSEAttestationNoteArgs{...}
type DSSEAttestationNoteInput interface {
	pulumi.Input

	ToDSSEAttestationNoteOutput() DSSEAttestationNoteOutput
	ToDSSEAttestationNoteOutputWithContext(context.Context) DSSEAttestationNoteOutput
}

// A note describing an attestation
type DSSEAttestationNoteArgs struct {
	// DSSEHint hints at the purpose of the attestation authority.
	Hint DSSEHintPtrInput `pulumi:"hint"`
}

func (DSSEAttestationNoteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DSSEAttestationNote)(nil)).Elem()
}

func (i DSSEAttestationNoteArgs) ToDSSEAttestationNoteOutput() DSSEAttestationNoteOutput {
	return i.ToDSSEAttestationNoteOutputWithContext(context.Background())
}

func (i DSSEAttestationNoteArgs) ToDSSEAttestationNoteOutputWithContext(ctx context.Context) DSSEAttestationNoteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DSSEAttestationNoteOutput)
}

func (i DSSEAttestationNoteArgs) ToDSSEAttestationNotePtrOutput() DSSEAttestationNotePtrOutput {
	return i.ToDSSEAttestationNotePtrOutputWithContext(context.Background())
}

func (i DSSEAttestationNoteArgs) ToDSSEAttestationNotePtrOutputWithContext(ctx context.Context) DSSEAttestationNotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DSSEAttestationNoteOutput).ToDSSEAttestationNotePtrOutputWithContext(ctx)
}

// DSSEAttestationNotePtrInput is an input type that accepts DSSEAttestationNoteArgs, DSSEAttestationNotePtr and DSSEAttestationNotePtrOutput values.
// You can construct a concrete instance of `DSSEAttestationNotePtrInput` via:
//
//	        DSSEAttestationNoteArgs{...}
//
//	or:
//
//	        nil
type DSSEAttestationNotePtrInput interface {
	pulumi.Input

	ToDSSEAttestationNotePtrOutput() DSSEAttestationNotePtrOutput
	ToDSSEAttestationNotePtrOutputWithContext(context.Context) DSSEAttestationNotePtrOutput
}

type dsseattestationNotePtrType DSSEAttestationNoteArgs

func DSSEAttestationNotePtr(v *DSSEAttestationNoteArgs) DSSEAttestationNotePtrInput {
	return (*dsseattestationNotePtrType)(v)
}

func (*dsseattestationNotePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DSSEAttestationNote)(nil)).Elem()
}

func (i *dsseattestationNotePtrType) ToDSSEAttestationNotePtrOutput() DSSEAttestationNotePtrOutput {
	return i.ToDSSEAttestationNotePtrOutputWithContext(context.Background())
}

func (i *dsseattestationNotePtrType) ToDSSEAttestationNotePtrOutputWithContext(ctx context.Context) DSSEAttestationNotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DSSEAttestationNotePtrOutput)
}

// A note describing an attestation
type DSSEAttestationNoteOutput struct{ *pulumi.OutputState }

func (DSSEAttestationNoteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DSSEAttestationNote)(nil)).Elem()
}

func (o DSSEAttestationNoteOutput) ToDSSEAttestationNoteOutput() DSSEAttestationNoteOutput {
	return o
}

func (o DSSEAttestationNoteOutput) ToDSSEAttestationNoteOutputWithContext(ctx context.Context) DSSEAttestationNoteOutput {
	return o
}

func (o DSSEAttestationNoteOutput) ToDSSEAttestationNotePtrOutput() DSSEAttestationNotePtrOutput {
	return o.ToDSSEAttestationNotePtrOutputWithContext(context.Background())
}

func (o DSSEAttestationNoteOutput) ToDSSEAttestationNotePtrOutputWithContext(ctx context.Context) DSSEAttestationNotePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DSSEAttestationNote) *DSSEAttestationNote {
		return &v
	}).(DSSEAttestationNotePtrOutput)
}

// DSSEHint hints at the purpose of the attestation authority.
func (o DSSEAttestationNoteOutput) Hint() DSSEHintPtrOutput {
	return o.ApplyT(func(v DSSEAttestationNote) *DSSEHint { return v.Hint }).(DSSEHintPtrOutput)
}

type DSSEAttestationNotePtrOutput struct{ *pulumi.OutputState }

func (DSSEAttestationNotePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DSSEAttestationNote)(nil)).Elem()
}

func (o DSSEAttestationNotePtrOutput) ToDSSEAttestationNotePtrOutput() DSSEAttestationNotePtrOutput {
	return o
}

func (o DSSEAttestationNotePtrOutput) ToDSSEAttestationNotePtrOutputWithContext(ctx context.Context) DSSEAttestationNotePtrOutput {
	return o
}

func (o DSSEAttestationNotePtrOutput) Elem() DSSEAttestationNoteOutput {
	return o.ApplyT(func(v *DSSEAttestationNote) DSSEAttestationNote {
		if v != nil {
			return *v
		}
		var ret DSSEAttestationNote
		return ret
	}).(DSSEAttestationNoteOutput)
}

// DSSEHint hints at the purpose of the attestation authority.
func (o DSSEAttestationNotePtrOutput) Hint() DSSEHintPtrOutput {
	return o.ApplyT(func(v *DSSEAttestationNote) *DSSEHint {
		if v == nil {
			return nil
		}
		return v.Hint
	}).(DSSEHintPtrOutput)
}

// A note describing an attestation
type DSSEAttestationNoteResponse struct {
	// DSSEHint hints at the purpose of the attestation authority.
	Hint DSSEHintResponse `pulumi:"hint"`
}

// A note describing an attestation
type DSSEAttestationNoteResponseOutput struct{ *pulumi.OutputState }

func (DSSEAttestationNoteResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DSSEAttestationNoteResponse)(nil)).Elem()
}

func (o DSSEAttestationNoteResponseOutput) ToDSSEAttestationNoteResponseOutput() DSSEAttestationNoteResponseOutput {
	return o
}

func (o DSSEAttestationNoteResponseOutput) ToDSSEAttestationNoteResponseOutputWithContext(ctx context.Context) DSSEAttestationNoteResponseOutput {
	return o
}

// DSSEHint hints at the purpose of the attestation authority.
func (o DSSEAttestationNoteResponseOutput) Hint() DSSEHintResponseOutput {
	return o.ApplyT(func(v DSSEAttestationNoteResponse) DSSEHintResponse { return v.Hint }).(DSSEHintResponseOutput)
}

// An occurrence describing an attestation on a resource
type DSSEAttestationOccurrence struct {
	// If doing something security critical, make sure to verify the signatures in this metadata.
	Envelope  *Envelope        `pulumi:"envelope"`
	Statement *InTotoStatement `pulumi:"statement"`
}

// DSSEAttestationOccurrenceInput is an input type that accepts DSSEAttestationOccurrenceArgs and DSSEAttestationOccurrenceOutput values.
// You can construct a concrete instance of `DSSEAttestationOccurrenceInput` via:
//
//	DSSEAttestationOccurrenceArgs{...}
type DSSEAttestationOccurrenceInput interface {
	pulumi.Input

	ToDSSEAttestationOccurrenceOutput() DSSEAttestationOccurrenceOutput
	ToDSSEAttestationOccurrenceOutputWithContext(context.Context) DSSEAttestationOccurrenceOutput
}

// An occurrence describing an attestation on a resource
type DSSEAttestationOccurrenceArgs struct {
	// If doing something security critical, make sure to verify the signatures in this metadata.
	Envelope  EnvelopePtrInput        `pulumi:"envelope"`
	Statement InTotoStatementPtrInput `pulumi:"statement"`
}

func (DSSEAttestationOccurrenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DSSEAttestationOccurrence)(nil)).Elem()
}

func (i DSSEAttestationOccurrenceArgs) ToDSSEAttestationOccurrenceOutput() DSSEAttestationOccurrenceOutput {
	return i.ToDSSEAttestationOccurrenceOutputWithContext(context.Background())
}

func (i DSSEAttestationOccurrenceArgs) ToDSSEAttestationOccurrenceOutputWithContext(ctx context.Context) DSSEAttestationOccurrenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DSSEAttestationOccurrenceOutput)
}

func (i DSSEAttestationOccurrenceArgs) ToDSSEAttestationOccurrencePtrOutput() DSSEAttestationOccurrencePtrOutput {
	return i.ToDSSEAttestationOccurrencePtrOutputWithContext(context.Background())
}

func (i DSSEAttestationOccurrenceArgs) ToDSSEAttestationOccurrencePtrOutputWithContext(ctx context.Context) DSSEAttestationOccurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DSSEAttestationOccurrenceOutput).ToDSSEAttestationOccurrencePtrOutputWithContext(ctx)
}

// DSSEAttestationOccurrencePtrInput is an input type that accepts DSSEAttestationOccurrenceArgs, DSSEAttestationOccurrencePtr and DSSEAttestationOccurrencePtrOutput values.
// You can construct a concrete instance of `DSSEAttestationOccurrencePtrInput` via:
//
//	        DSSEAttestationOccurrenceArgs{...}
//
//	or:
//
//	        nil
type DSSEAttestationOccurrencePtrInput interface {
	pulumi.Input

	ToDSSEAttestationOccurrencePtrOutput() DSSEAttestationOccurrencePtrOutput
	ToDSSEAttestationOccurrencePtrOutputWithContext(context.Context) DSSEAttestationOccurrencePtrOutput
}

type dsseattestationOccurrencePtrType DSSEAttestationOccurrenceArgs

func DSSEAttestationOccurrencePtr(v *DSSEAttestationOccurrenceArgs) DSSEAttestationOccurrencePtrInput {
	return (*dsseattestationOccurrencePtrType)(v)
}

func (*dsseattestationOccurrencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DSSEAttestationOccurrence)(nil)).Elem()
}

func (i *dsseattestationOccurrencePtrType) ToDSSEAttestationOccurrencePtrOutput() DSSEAttestationOccurrencePtrOutput {
	return i.ToDSSEAttestationOccurrencePtrOutputWithContext(context.Background())
}

func (i *dsseattestationOccurrencePtrType) ToDSSEAttestationOccurrencePtrOutputWithContext(ctx context.Context) DSSEAttestationOccurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DSSEAttestationOccurrencePtrOutput)
}

// An occurrence describing an attestation on a resource
type DSSEAttestationOccurrenceOutput struct{ *pulumi.OutputState }

func (DSSEAttestationOccurrenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DSSEAttestationOccurrence)(nil)).Elem()
}

func (o DSSEAttestationOccurrenceOutput) ToDSSEAttestationOccurrenceOutput() DSSEAttestationOccurrenceOutput {
	return o
}

func (o DSSEAttestationOccurrenceOutput) ToDSSEAttestationOccurrenceOutputWithContext(ctx context.Context) DSSEAttestationOccurrenceOutput {
	return o
}

func (o DSSEAttestationOccurrenceOutput) ToDSSEAttestationOccurrencePtrOutput() DSSEAttestationOccurrencePtrOutput {
	return o.ToDSSEAttestationOccurrencePtrOutputWithContext(context.Background())
}

func (o DSSEAttestationOccurrenceOutput) ToDSSEAttestationOccurrencePtrOutputWithContext(ctx context.Context) DSSEAttestationOccurrencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DSSEAttestationOccurrence) *DSSEAttestationOccurrence {
		return &v
	}).(DSSEAttestationOccurrencePtrOutput)
}

// If doing something security critical, make sure to verify the signatures in this metadata.
func (o DSSEAttestationOccurrenceOutput) Envelope() EnvelopePtrOutput {
	return o.ApplyT(func(v DSSEAttestationOccurrence) *Envelope { return v.Envelope }).(EnvelopePtrOutput)
}

func (o DSSEAttestationOccurrenceOutput) Statement() InTotoStatementPtrOutput {
	return o.ApplyT(func(v DSSEAttestationOccurrence) *InTotoStatement { return v.Statement }).(InTotoStatementPtrOutput)
}

type DSSEAttestationOccurrencePtrOutput struct{ *pulumi.OutputState }

func (DSSEAttestationOccurrencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DSSEAttestationOccurrence)(nil)).Elem()
}

func (o DSSEAttestationOccurrencePtrOutput) ToDSSEAttestationOccurrencePtrOutput() DSSEAttestationOccurrencePtrOutput {
	return o
}

func (o DSSEAttestationOccurrencePtrOutput) ToDSSEAttestationOccurrencePtrOutputWithContext(ctx context.Context) DSSEAttestationOccurrencePtrOutput {
	return o
}

func (o DSSEAttestationOccurrencePtrOutput) Elem() DSSEAttestationOccurrenceOutput {
	return o.ApplyT(func(v *DSSEAttestationOccurrence) DSSEAttestationOccurrence {
		if v != nil {
			return *v
		}
		var ret DSSEAttestationOccurrence
		return ret
	}).(DSSEAttestationOccurrenceOutput)
}

// If doing something security critical, make sure to verify the signatures in this metadata.
func (o DSSEAttestationOccurrencePtrOutput) Envelope() EnvelopePtrOutput {
	return o.ApplyT(func(v *DSSEAttestationOccurrence) *Envelope {
		if v == nil {
			return nil
		}
		return v.Envelope
	}).(EnvelopePtrOutput)
}

func (o DSSEAttestationOccurrencePtrOutput) Statement() InTotoStatementPtrOutput {
	return o.ApplyT(func(v *DSSEAttestationOccurrence) *InTotoStatement {
		if v == nil {
			return nil
		}
		return v.Statement
	}).(InTotoStatementPtrOutput)
}

// An occurrence describing an attestation on a resource
type DSSEAttestationOccurrenceResponse struct {
	// If doing something security critical, make sure to verify the signatures in this metadata.
	Envelope  EnvelopeResponse        `pulumi:"envelope"`
	Statement InTotoStatementResponse `pulumi:"statement"`
}

// An occurrence describing an attestation on a resource
type DSSEAttestationOccurrenceResponseOutput struct{ *pulumi.OutputState }

func (DSSEAttestationOccurrenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DSSEAttestationOccurrenceResponse)(nil)).Elem()
}

func (o DSSEAttestationOccurrenceResponseOutput) ToDSSEAttestationOccurrenceResponseOutput() DSSEAttestationOccurrenceResponseOutput {
	return o
}

func (o DSSEAttestationOccurrenceResponseOutput) ToDSSEAttestationOccurrenceResponseOutputWithContext(ctx context.Context) DSSEAttestationOccurrenceResponseOutput {
	return o
}

// If doing something security critical, make sure to verify the signatures in this metadata.
func (o DSSEAttestationOccurrenceResponseOutput) Envelope() EnvelopeResponseOutput {
	return o.ApplyT(func(v DSSEAttestationOccurrenceResponse) EnvelopeResponse { return v.Envelope }).(EnvelopeResponseOutput)
}

func (o DSSEAttestationOccurrenceResponseOutput) Statement() InTotoStatementResponseOutput {
	return o.ApplyT(func(v DSSEAttestationOccurrenceResponse) InTotoStatementResponse { return v.Statement }).(InTotoStatementResponseOutput)
}

// This submessage provides human-readable hints about the purpose of the authority. Because the name of a note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from "readable" names more suitable for debug output. Note that these hints should not be used to look up authorities in security sensitive contexts, such as when looking up attestations to verify.
type DSSEHint struct {
	// The human readable name of this attestation authority, for example "cloudbuild-prod".
	HumanReadableName string `pulumi:"humanReadableName"`
}

// DSSEHintInput is an input type that accepts DSSEHintArgs and DSSEHintOutput values.
// You can construct a concrete instance of `DSSEHintInput` via:
//
//	DSSEHintArgs{...}
type DSSEHintInput interface {
	pulumi.Input

	ToDSSEHintOutput() DSSEHintOutput
	ToDSSEHintOutputWithContext(context.Context) DSSEHintOutput
}

// This submessage provides human-readable hints about the purpose of the authority. Because the name of a note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from "readable" names more suitable for debug output. Note that these hints should not be used to look up authorities in security sensitive contexts, such as when looking up attestations to verify.
type DSSEHintArgs struct {
	// The human readable name of this attestation authority, for example "cloudbuild-prod".
	HumanReadableName pulumi.StringInput `pulumi:"humanReadableName"`
}

func (DSSEHintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DSSEHint)(nil)).Elem()
}

func (i DSSEHintArgs) ToDSSEHintOutput() DSSEHintOutput {
	return i.ToDSSEHintOutputWithContext(context.Background())
}

func (i DSSEHintArgs) ToDSSEHintOutputWithContext(ctx context.Context) DSSEHintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DSSEHintOutput)
}

func (i DSSEHintArgs) ToDSSEHintPtrOutput() DSSEHintPtrOutput {
	return i.ToDSSEHintPtrOutputWithContext(context.Background())
}

func (i DSSEHintArgs) ToDSSEHintPtrOutputWithContext(ctx context.Context) DSSEHintPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DSSEHintOutput).ToDSSEHintPtrOutputWithContext(ctx)
}

// DSSEHintPtrInput is an input type that accepts DSSEHintArgs, DSSEHintPtr and DSSEHintPtrOutput values.
// You can construct a concrete instance of `DSSEHintPtrInput` via:
//
//	        DSSEHintArgs{...}
//
//	or:
//
//	        nil
type DSSEHintPtrInput interface {
	pulumi.Input

	ToDSSEHintPtrOutput() DSSEHintPtrOutput
	ToDSSEHintPtrOutputWithContext(context.Context) DSSEHintPtrOutput
}

type dssehintPtrType DSSEHintArgs

func DSSEHintPtr(v *DSSEHintArgs) DSSEHintPtrInput {
	return (*dssehintPtrType)(v)
}

func (*dssehintPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DSSEHint)(nil)).Elem()
}

func (i *dssehintPtrType) ToDSSEHintPtrOutput() DSSEHintPtrOutput {
	return i.ToDSSEHintPtrOutputWithContext(context.Background())
}

func (i *dssehintPtrType) ToDSSEHintPtrOutputWithContext(ctx context.Context) DSSEHintPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DSSEHintPtrOutput)
}

// This submessage provides human-readable hints about the purpose of the authority. Because the name of a note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from "readable" names more suitable for debug output. Note that these hints should not be used to look up authorities in security sensitive contexts, such as when looking up attestations to verify.
type DSSEHintOutput struct{ *pulumi.OutputState }

func (DSSEHintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DSSEHint)(nil)).Elem()
}

func (o DSSEHintOutput) ToDSSEHintOutput() DSSEHintOutput {
	return o
}

func (o DSSEHintOutput) ToDSSEHintOutputWithContext(ctx context.Context) DSSEHintOutput {
	return o
}

func (o DSSEHintOutput) ToDSSEHintPtrOutput() DSSEHintPtrOutput {
	return o.ToDSSEHintPtrOutputWithContext(context.Background())
}

func (o DSSEHintOutput) ToDSSEHintPtrOutputWithContext(ctx context.Context) DSSEHintPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DSSEHint) *DSSEHint {
		return &v
	}).(DSSEHintPtrOutput)
}

// The human readable name of this attestation authority, for example "cloudbuild-prod".
func (o DSSEHintOutput) HumanReadableName() pulumi.StringOutput {
	return o.ApplyT(func(v DSSEHint) string { return v.HumanReadableName }).(pulumi.StringOutput)
}

type DSSEHintPtrOutput struct{ *pulumi.OutputState }

func (DSSEHintPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DSSEHint)(nil)).Elem()
}

func (o DSSEHintPtrOutput) ToDSSEHintPtrOutput() DSSEHintPtrOutput {
	return o
}

func (o DSSEHintPtrOutput) ToDSSEHintPtrOutputWithContext(ctx context.Context) DSSEHintPtrOutput {
	return o
}

func (o DSSEHintPtrOutput) Elem() DSSEHintOutput {
	return o.ApplyT(func(v *DSSEHint) DSSEHint {
		if v != nil {
			return *v
		}
		var ret DSSEHint
		return ret
	}).(DSSEHintOutput)
}

// The human readable name of this attestation authority, for example "cloudbuild-prod".
func (o DSSEHintPtrOutput) HumanReadableName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DSSEHint) *string {
		if v == nil {
			return nil
		}
		return &v.HumanReadableName
	}).(pulumi.StringPtrOutput)
}

// This submessage provides human-readable hints about the purpose of the authority. Because the name of a note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from "readable" names more suitable for debug output. Note that these hints should not be used to look up authorities in security sensitive contexts, such as when looking up attestations to verify.
type DSSEHintResponse struct {
	// The human readable name of this attestation authority, for example "cloudbuild-prod".
	HumanReadableName string `pulumi:"humanReadableName"`
}

// This submessage provides human-readable hints about the purpose of the authority. Because the name of a note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from "readable" names more suitable for debug output. Note that these hints should not be used to look up authorities in security sensitive contexts, such as when looking up attestations to verify.
type DSSEHintResponseOutput struct{ *pulumi.OutputState }

func (DSSEHintResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DSSEHintResponse)(nil)).Elem()
}

func (o DSSEHintResponseOutput) ToDSSEHintResponseOutput() DSSEHintResponseOutput {
	return o
}

func (o DSSEHintResponseOutput) ToDSSEHintResponseOutputWithContext(ctx context.Context) DSSEHintResponseOutput {
	return o
}

// The human readable name of this attestation authority, for example "cloudbuild-prod".
func (o DSSEHintResponseOutput) HumanReadableName() pulumi.StringOutput {
	return o.ApplyT(func(v DSSEHintResponse) string { return v.HumanReadableName }).(pulumi.StringOutput)
}

// An artifact that can be deployed in some runtime.
type Deployable struct {
	// Resource URI for the artifact being deployed.
	ResourceUri []string `pulumi:"resourceUri"`
}

// DeployableInput is an input type that accepts DeployableArgs and DeployableOutput values.
// You can construct a concrete instance of `DeployableInput` via:
//
//	DeployableArgs{...}
type DeployableInput interface {
	pulumi.Input

	ToDeployableOutput() DeployableOutput
	ToDeployableOutputWithContext(context.Context) DeployableOutput
}

// An artifact that can be deployed in some runtime.
type DeployableArgs struct {
	// Resource URI for the artifact being deployed.
	ResourceUri pulumi.StringArrayInput `pulumi:"resourceUri"`
}

func (DeployableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Deployable)(nil)).Elem()
}

func (i DeployableArgs) ToDeployableOutput() DeployableOutput {
	return i.ToDeployableOutputWithContext(context.Background())
}

func (i DeployableArgs) ToDeployableOutputWithContext(ctx context.Context) DeployableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeployableOutput)
}

func (i DeployableArgs) ToDeployablePtrOutput() DeployablePtrOutput {
	return i.ToDeployablePtrOutputWithContext(context.Background())
}

func (i DeployableArgs) ToDeployablePtrOutputWithContext(ctx context.Context) DeployablePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeployableOutput).ToDeployablePtrOutputWithContext(ctx)
}

// DeployablePtrInput is an input type that accepts DeployableArgs, DeployablePtr and DeployablePtrOutput values.
// You can construct a concrete instance of `DeployablePtrInput` via:
//
//	        DeployableArgs{...}
//
//	or:
//
//	        nil
type DeployablePtrInput interface {
	pulumi.Input

	ToDeployablePtrOutput() DeployablePtrOutput
	ToDeployablePtrOutputWithContext(context.Context) DeployablePtrOutput
}

type deployablePtrType DeployableArgs

func DeployablePtr(v *DeployableArgs) DeployablePtrInput {
	return (*deployablePtrType)(v)
}

func (*deployablePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Deployable)(nil)).Elem()
}

func (i *deployablePtrType) ToDeployablePtrOutput() DeployablePtrOutput {
	return i.ToDeployablePtrOutputWithContext(context.Background())
}

func (i *deployablePtrType) ToDeployablePtrOutputWithContext(ctx context.Context) DeployablePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeployablePtrOutput)
}

// An artifact that can be deployed in some runtime.
type DeployableOutput struct{ *pulumi.OutputState }

func (DeployableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Deployable)(nil)).Elem()
}

func (o DeployableOutput) ToDeployableOutput() DeployableOutput {
	return o
}

func (o DeployableOutput) ToDeployableOutputWithContext(ctx context.Context) DeployableOutput {
	return o
}

func (o DeployableOutput) ToDeployablePtrOutput() DeployablePtrOutput {
	return o.ToDeployablePtrOutputWithContext(context.Background())
}

func (o DeployableOutput) ToDeployablePtrOutputWithContext(ctx context.Context) DeployablePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Deployable) *Deployable {
		return &v
	}).(DeployablePtrOutput)
}

// Resource URI for the artifact being deployed.
func (o DeployableOutput) ResourceUri() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Deployable) []string { return v.ResourceUri }).(pulumi.StringArrayOutput)
}

type DeployablePtrOutput struct{ *pulumi.OutputState }

func (DeployablePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Deployable)(nil)).Elem()
}

func (o DeployablePtrOutput) ToDeployablePtrOutput() DeployablePtrOutput {
	return o
}

func (o DeployablePtrOutput) ToDeployablePtrOutputWithContext(ctx context.Context) DeployablePtrOutput {
	return o
}

func (o DeployablePtrOutput) Elem() DeployableOutput {
	return o.ApplyT(func(v *Deployable) Deployable {
		if v != nil {
			return *v
		}
		var ret Deployable
		return ret
	}).(DeployableOutput)
}

// Resource URI for the artifact being deployed.
func (o DeployablePtrOutput) ResourceUri() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Deployable) []string {
		if v == nil {
			return nil
		}
		return v.ResourceUri
	}).(pulumi.StringArrayOutput)
}

// An artifact that can be deployed in some runtime.
type DeployableResponse struct {
	// Resource URI for the artifact being deployed.
	ResourceUri []string `pulumi:"resourceUri"`
}

// An artifact that can be deployed in some runtime.
type DeployableResponseOutput struct{ *pulumi.OutputState }

func (DeployableResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeployableResponse)(nil)).Elem()
}

func (o DeployableResponseOutput) ToDeployableResponseOutput() DeployableResponseOutput {
	return o
}

func (o DeployableResponseOutput) ToDeployableResponseOutputWithContext(ctx context.Context) DeployableResponseOutput {
	return o
}

// Resource URI for the artifact being deployed.
func (o DeployableResponseOutput) ResourceUri() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeployableResponse) []string { return v.ResourceUri }).(pulumi.StringArrayOutput)
}

// The period during which some deployable was active in a runtime.
type Deployment struct {
	// Address of the runtime element hosting this deployment.
	Address *string `pulumi:"address"`
	// Configuration used to create this deployment.
	Config *string `pulumi:"config"`
	// Beginning of the lifetime of this deployment.
	DeployTime *string `pulumi:"deployTime"`
	// Platform hosting this deployment.
	Platform *DeploymentPlatform `pulumi:"platform"`
	// Resource URI for the artifact being deployed taken from the deployable field with the same name.
	ResourceUri []string `pulumi:"resourceUri"`
	// End of the lifetime of this deployment.
	UndeployTime *string `pulumi:"undeployTime"`
	// Identity of the user that triggered this deployment.
	UserEmail *string `pulumi:"userEmail"`
}

// DeploymentInput is an input type that accepts DeploymentArgs and DeploymentOutput values.
// You can construct a concrete instance of `DeploymentInput` via:
//
//	DeploymentArgs{...}
type DeploymentInput interface {
	pulumi.Input

	ToDeploymentOutput() DeploymentOutput
	ToDeploymentOutputWithContext(context.Context) DeploymentOutput
}

// The period during which some deployable was active in a runtime.
type DeploymentArgs struct {
	// Address of the runtime element hosting this deployment.
	Address pulumi.StringPtrInput `pulumi:"address"`
	// Configuration used to create this deployment.
	Config pulumi.StringPtrInput `pulumi:"config"`
	// Beginning of the lifetime of this deployment.
	DeployTime pulumi.StringPtrInput `pulumi:"deployTime"`
	// Platform hosting this deployment.
	Platform DeploymentPlatformPtrInput `pulumi:"platform"`
	// Resource URI for the artifact being deployed taken from the deployable field with the same name.
	ResourceUri pulumi.StringArrayInput `pulumi:"resourceUri"`
	// End of the lifetime of this deployment.
	UndeployTime pulumi.StringPtrInput `pulumi:"undeployTime"`
	// Identity of the user that triggered this deployment.
	UserEmail pulumi.StringPtrInput `pulumi:"userEmail"`
}

func (DeploymentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Deployment)(nil)).Elem()
}

func (i DeploymentArgs) ToDeploymentOutput() DeploymentOutput {
	return i.ToDeploymentOutputWithContext(context.Background())
}

func (i DeploymentArgs) ToDeploymentOutputWithContext(ctx context.Context) DeploymentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentOutput)
}

func (i DeploymentArgs) ToDeploymentPtrOutput() DeploymentPtrOutput {
	return i.ToDeploymentPtrOutputWithContext(context.Background())
}

func (i DeploymentArgs) ToDeploymentPtrOutputWithContext(ctx context.Context) DeploymentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentOutput).ToDeploymentPtrOutputWithContext(ctx)
}

// DeploymentPtrInput is an input type that accepts DeploymentArgs, DeploymentPtr and DeploymentPtrOutput values.
// You can construct a concrete instance of `DeploymentPtrInput` via:
//
//	        DeploymentArgs{...}
//
//	or:
//
//	        nil
type DeploymentPtrInput interface {
	pulumi.Input

	ToDeploymentPtrOutput() DeploymentPtrOutput
	ToDeploymentPtrOutputWithContext(context.Context) DeploymentPtrOutput
}

type deploymentPtrType DeploymentArgs

func DeploymentPtr(v *DeploymentArgs) DeploymentPtrInput {
	return (*deploymentPtrType)(v)
}

func (*deploymentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Deployment)(nil)).Elem()
}

func (i *deploymentPtrType) ToDeploymentPtrOutput() DeploymentPtrOutput {
	return i.ToDeploymentPtrOutputWithContext(context.Background())
}

func (i *deploymentPtrType) ToDeploymentPtrOutputWithContext(ctx context.Context) DeploymentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentPtrOutput)
}

// The period during which some deployable was active in a runtime.
type DeploymentOutput struct{ *pulumi.OutputState }

func (DeploymentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Deployment)(nil)).Elem()
}

func (o DeploymentOutput) ToDeploymentOutput() DeploymentOutput {
	return o
}

func (o DeploymentOutput) ToDeploymentOutputWithContext(ctx context.Context) DeploymentOutput {
	return o
}

func (o DeploymentOutput) ToDeploymentPtrOutput() DeploymentPtrOutput {
	return o.ToDeploymentPtrOutputWithContext(context.Background())
}

func (o DeploymentOutput) ToDeploymentPtrOutputWithContext(ctx context.Context) DeploymentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Deployment) *Deployment {
		return &v
	}).(DeploymentPtrOutput)
}

// Address of the runtime element hosting this deployment.
func (o DeploymentOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Deployment) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// Configuration used to create this deployment.
func (o DeploymentOutput) Config() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Deployment) *string { return v.Config }).(pulumi.StringPtrOutput)
}

// Beginning of the lifetime of this deployment.
func (o DeploymentOutput) DeployTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Deployment) *string { return v.DeployTime }).(pulumi.StringPtrOutput)
}

// Platform hosting this deployment.
func (o DeploymentOutput) Platform() DeploymentPlatformPtrOutput {
	return o.ApplyT(func(v Deployment) *DeploymentPlatform { return v.Platform }).(DeploymentPlatformPtrOutput)
}

// Resource URI for the artifact being deployed taken from the deployable field with the same name.
func (o DeploymentOutput) ResourceUri() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Deployment) []string { return v.ResourceUri }).(pulumi.StringArrayOutput)
}

// End of the lifetime of this deployment.
func (o DeploymentOutput) UndeployTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Deployment) *string { return v.UndeployTime }).(pulumi.StringPtrOutput)
}

// Identity of the user that triggered this deployment.
func (o DeploymentOutput) UserEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Deployment) *string { return v.UserEmail }).(pulumi.StringPtrOutput)
}

type DeploymentPtrOutput struct{ *pulumi.OutputState }

func (DeploymentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Deployment)(nil)).Elem()
}

func (o DeploymentPtrOutput) ToDeploymentPtrOutput() DeploymentPtrOutput {
	return o
}

func (o DeploymentPtrOutput) ToDeploymentPtrOutputWithContext(ctx context.Context) DeploymentPtrOutput {
	return o
}

func (o DeploymentPtrOutput) Elem() DeploymentOutput {
	return o.ApplyT(func(v *Deployment) Deployment {
		if v != nil {
			return *v
		}
		var ret Deployment
		return ret
	}).(DeploymentOutput)
}

// Address of the runtime element hosting this deployment.
func (o DeploymentPtrOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Deployment) *string {
		if v == nil {
			return nil
		}
		return v.Address
	}).(pulumi.StringPtrOutput)
}

// Configuration used to create this deployment.
func (o DeploymentPtrOutput) Config() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Deployment) *string {
		if v == nil {
			return nil
		}
		return v.Config
	}).(pulumi.StringPtrOutput)
}

// Beginning of the lifetime of this deployment.
func (o DeploymentPtrOutput) DeployTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Deployment) *string {
		if v == nil {
			return nil
		}
		return v.DeployTime
	}).(pulumi.StringPtrOutput)
}

// Platform hosting this deployment.
func (o DeploymentPtrOutput) Platform() DeploymentPlatformPtrOutput {
	return o.ApplyT(func(v *Deployment) *DeploymentPlatform {
		if v == nil {
			return nil
		}
		return v.Platform
	}).(DeploymentPlatformPtrOutput)
}

// Resource URI for the artifact being deployed taken from the deployable field with the same name.
func (o DeploymentPtrOutput) ResourceUri() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Deployment) []string {
		if v == nil {
			return nil
		}
		return v.ResourceUri
	}).(pulumi.StringArrayOutput)
}

// End of the lifetime of this deployment.
func (o DeploymentPtrOutput) UndeployTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Deployment) *string {
		if v == nil {
			return nil
		}
		return v.UndeployTime
	}).(pulumi.StringPtrOutput)
}

// Identity of the user that triggered this deployment.
func (o DeploymentPtrOutput) UserEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Deployment) *string {
		if v == nil {
			return nil
		}
		return v.UserEmail
	}).(pulumi.StringPtrOutput)
}

// The period during which some deployable was active in a runtime.
type DeploymentResponse struct {
	// Address of the runtime element hosting this deployment.
	Address string `pulumi:"address"`
	// Configuration used to create this deployment.
	Config string `pulumi:"config"`
	// Beginning of the lifetime of this deployment.
	DeployTime string `pulumi:"deployTime"`
	// Platform hosting this deployment.
	Platform string `pulumi:"platform"`
	// Resource URI for the artifact being deployed taken from the deployable field with the same name.
	ResourceUri []string `pulumi:"resourceUri"`
	// End of the lifetime of this deployment.
	UndeployTime string `pulumi:"undeployTime"`
	// Identity of the user that triggered this deployment.
	UserEmail string `pulumi:"userEmail"`
}

// The period during which some deployable was active in a runtime.
type DeploymentResponseOutput struct{ *pulumi.OutputState }

func (DeploymentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentResponse)(nil)).Elem()
}

func (o DeploymentResponseOutput) ToDeploymentResponseOutput() DeploymentResponseOutput {
	return o
}

func (o DeploymentResponseOutput) ToDeploymentResponseOutputWithContext(ctx context.Context) DeploymentResponseOutput {
	return o
}

// Address of the runtime element hosting this deployment.
func (o DeploymentResponseOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v DeploymentResponse) string { return v.Address }).(pulumi.StringOutput)
}

// Configuration used to create this deployment.
func (o DeploymentResponseOutput) Config() pulumi.StringOutput {
	return o.ApplyT(func(v DeploymentResponse) string { return v.Config }).(pulumi.StringOutput)
}

// Beginning of the lifetime of this deployment.
func (o DeploymentResponseOutput) DeployTime() pulumi.StringOutput {
	return o.ApplyT(func(v DeploymentResponse) string { return v.DeployTime }).(pulumi.StringOutput)
}

// Platform hosting this deployment.
func (o DeploymentResponseOutput) Platform() pulumi.StringOutput {
	return o.ApplyT(func(v DeploymentResponse) string { return v.Platform }).(pulumi.StringOutput)
}

// Resource URI for the artifact being deployed taken from the deployable field with the same name.
func (o DeploymentResponseOutput) ResourceUri() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeploymentResponse) []string { return v.ResourceUri }).(pulumi.StringArrayOutput)
}

// End of the lifetime of this deployment.
func (o DeploymentResponseOutput) UndeployTime() pulumi.StringOutput {
	return o.ApplyT(func(v DeploymentResponse) string { return v.UndeployTime }).(pulumi.StringOutput)
}

// Identity of the user that triggered this deployment.
func (o DeploymentResponseOutput) UserEmail() pulumi.StringOutput {
	return o.ApplyT(func(v DeploymentResponse) string { return v.UserEmail }).(pulumi.StringOutput)
}

// Derived describes the derived image portion (Occurrence) of the DockerImage relationship. This image would be produced from a Dockerfile with FROM .
type Derived struct {
	// The fingerprint of the derived image.
	Fingerprint *Fingerprint `pulumi:"fingerprint"`
	// This contains layer-specific metadata, if populated it has length "distance" and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer.
	LayerInfo []Layer `pulumi:"layerInfo"`
}

// DerivedInput is an input type that accepts DerivedArgs and DerivedOutput values.
// You can construct a concrete instance of `DerivedInput` via:
//
//	DerivedArgs{...}
type DerivedInput interface {
	pulumi.Input

	ToDerivedOutput() DerivedOutput
	ToDerivedOutputWithContext(context.Context) DerivedOutput
}

// Derived describes the derived image portion (Occurrence) of the DockerImage relationship. This image would be produced from a Dockerfile with FROM .
type DerivedArgs struct {
	// The fingerprint of the derived image.
	Fingerprint FingerprintPtrInput `pulumi:"fingerprint"`
	// This contains layer-specific metadata, if populated it has length "distance" and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer.
	LayerInfo LayerArrayInput `pulumi:"layerInfo"`
}

func (DerivedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Derived)(nil)).Elem()
}

func (i DerivedArgs) ToDerivedOutput() DerivedOutput {
	return i.ToDerivedOutputWithContext(context.Background())
}

func (i DerivedArgs) ToDerivedOutputWithContext(ctx context.Context) DerivedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DerivedOutput)
}

func (i DerivedArgs) ToDerivedPtrOutput() DerivedPtrOutput {
	return i.ToDerivedPtrOutputWithContext(context.Background())
}

func (i DerivedArgs) ToDerivedPtrOutputWithContext(ctx context.Context) DerivedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DerivedOutput).ToDerivedPtrOutputWithContext(ctx)
}

// DerivedPtrInput is an input type that accepts DerivedArgs, DerivedPtr and DerivedPtrOutput values.
// You can construct a concrete instance of `DerivedPtrInput` via:
//
//	        DerivedArgs{...}
//
//	or:
//
//	        nil
type DerivedPtrInput interface {
	pulumi.Input

	ToDerivedPtrOutput() DerivedPtrOutput
	ToDerivedPtrOutputWithContext(context.Context) DerivedPtrOutput
}

type derivedPtrType DerivedArgs

func DerivedPtr(v *DerivedArgs) DerivedPtrInput {
	return (*derivedPtrType)(v)
}

func (*derivedPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Derived)(nil)).Elem()
}

func (i *derivedPtrType) ToDerivedPtrOutput() DerivedPtrOutput {
	return i.ToDerivedPtrOutputWithContext(context.Background())
}

func (i *derivedPtrType) ToDerivedPtrOutputWithContext(ctx context.Context) DerivedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DerivedPtrOutput)
}

// Derived describes the derived image portion (Occurrence) of the DockerImage relationship. This image would be produced from a Dockerfile with FROM .
type DerivedOutput struct{ *pulumi.OutputState }

func (DerivedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Derived)(nil)).Elem()
}

func (o DerivedOutput) ToDerivedOutput() DerivedOutput {
	return o
}

func (o DerivedOutput) ToDerivedOutputWithContext(ctx context.Context) DerivedOutput {
	return o
}

func (o DerivedOutput) ToDerivedPtrOutput() DerivedPtrOutput {
	return o.ToDerivedPtrOutputWithContext(context.Background())
}

func (o DerivedOutput) ToDerivedPtrOutputWithContext(ctx context.Context) DerivedPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Derived) *Derived {
		return &v
	}).(DerivedPtrOutput)
}

// The fingerprint of the derived image.
func (o DerivedOutput) Fingerprint() FingerprintPtrOutput {
	return o.ApplyT(func(v Derived) *Fingerprint { return v.Fingerprint }).(FingerprintPtrOutput)
}

// This contains layer-specific metadata, if populated it has length "distance" and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer.
func (o DerivedOutput) LayerInfo() LayerArrayOutput {
	return o.ApplyT(func(v Derived) []Layer { return v.LayerInfo }).(LayerArrayOutput)
}

type DerivedPtrOutput struct{ *pulumi.OutputState }

func (DerivedPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Derived)(nil)).Elem()
}

func (o DerivedPtrOutput) ToDerivedPtrOutput() DerivedPtrOutput {
	return o
}

func (o DerivedPtrOutput) ToDerivedPtrOutputWithContext(ctx context.Context) DerivedPtrOutput {
	return o
}

func (o DerivedPtrOutput) Elem() DerivedOutput {
	return o.ApplyT(func(v *Derived) Derived {
		if v != nil {
			return *v
		}
		var ret Derived
		return ret
	}).(DerivedOutput)
}

// The fingerprint of the derived image.
func (o DerivedPtrOutput) Fingerprint() FingerprintPtrOutput {
	return o.ApplyT(func(v *Derived) *Fingerprint {
		if v == nil {
			return nil
		}
		return v.Fingerprint
	}).(FingerprintPtrOutput)
}

// This contains layer-specific metadata, if populated it has length "distance" and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer.
func (o DerivedPtrOutput) LayerInfo() LayerArrayOutput {
	return o.ApplyT(func(v *Derived) []Layer {
		if v == nil {
			return nil
		}
		return v.LayerInfo
	}).(LayerArrayOutput)
}

// Derived describes the derived image portion (Occurrence) of the DockerImage relationship. This image would be produced from a Dockerfile with FROM .
type DerivedResponse struct {
	// This contains the base image URL for the derived image occurrence.
	BaseResourceUrl string `pulumi:"baseResourceUrl"`
	// The number of layers by which this image differs from the associated image basis.
	Distance int `pulumi:"distance"`
	// The fingerprint of the derived image.
	Fingerprint FingerprintResponse `pulumi:"fingerprint"`
	// This contains layer-specific metadata, if populated it has length "distance" and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer.
	LayerInfo []LayerResponse `pulumi:"layerInfo"`
}

// Derived describes the derived image portion (Occurrence) of the DockerImage relationship. This image would be produced from a Dockerfile with FROM .
type DerivedResponseOutput struct{ *pulumi.OutputState }

func (DerivedResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DerivedResponse)(nil)).Elem()
}

func (o DerivedResponseOutput) ToDerivedResponseOutput() DerivedResponseOutput {
	return o
}

func (o DerivedResponseOutput) ToDerivedResponseOutputWithContext(ctx context.Context) DerivedResponseOutput {
	return o
}

// This contains the base image URL for the derived image occurrence.
func (o DerivedResponseOutput) BaseResourceUrl() pulumi.StringOutput {
	return o.ApplyT(func(v DerivedResponse) string { return v.BaseResourceUrl }).(pulumi.StringOutput)
}

// The number of layers by which this image differs from the associated image basis.
func (o DerivedResponseOutput) Distance() pulumi.IntOutput {
	return o.ApplyT(func(v DerivedResponse) int { return v.Distance }).(pulumi.IntOutput)
}

// The fingerprint of the derived image.
func (o DerivedResponseOutput) Fingerprint() FingerprintResponseOutput {
	return o.ApplyT(func(v DerivedResponse) FingerprintResponse { return v.Fingerprint }).(FingerprintResponseOutput)
}

// This contains layer-specific metadata, if populated it has length "distance" and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer.
func (o DerivedResponseOutput) LayerInfo() LayerResponseArrayOutput {
	return o.ApplyT(func(v DerivedResponse) []LayerResponse { return v.LayerInfo }).(LayerResponseArrayOutput)
}

// Identifies all occurrences of this vulnerability in the package for a specific distro/location For example: glibc in cpe:/o:debian:debian_linux:8 for versions 2.1 - 2.2
type Detail struct {
	// The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/) in which the vulnerability manifests. Examples include distro or storage location for vulnerable jar. This field can be used as a filter in list requests.
	CpeUri *string `pulumi:"cpeUri"`
	// A vendor-specific description of this note.
	Description *string `pulumi:"description"`
	// The fix for this specific package version.
	FixedLocation *VulnerabilityLocation `pulumi:"fixedLocation"`
	// Whether this Detail is obsolete. Occurrences are expected not to point to obsolete details.
	IsObsolete *bool `pulumi:"isObsolete"`
	// The max version of the package in which the vulnerability exists.
	MaxAffectedVersion *Version `pulumi:"maxAffectedVersion"`
	// The min version of the package in which the vulnerability exists.
	MinAffectedVersion *Version `pulumi:"minAffectedVersion"`
	// The name of the package where the vulnerability was found. This field can be used as a filter in list requests.
	Package *string `pulumi:"package"`
	// The type of package; whether native or non native(ruby gems, node.js packages etc)
	PackageType *string `pulumi:"packageType"`
	// The severity (eg: distro assigned severity) for this vulnerability.
	SeverityName *string `pulumi:"severityName"`
	// The source from which the information in this Detail was obtained.
	Source *string `pulumi:"source"`
	// The vendor of the product. e.g. "google"
	Vendor *string `pulumi:"vendor"`
}

// DetailInput is an input type that accepts DetailArgs and DetailOutput values.
// You can construct a concrete instance of `DetailInput` via:
//
//	DetailArgs{...}
type DetailInput interface {
	pulumi.Input

	ToDetailOutput() DetailOutput
	ToDetailOutputWithContext(context.Context) DetailOutput
}

// Identifies all occurrences of this vulnerability in the package for a specific distro/location For example: glibc in cpe:/o:debian:debian_linux:8 for versions 2.1 - 2.2
type DetailArgs struct {
	// The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/) in which the vulnerability manifests. Examples include distro or storage location for vulnerable jar. This field can be used as a filter in list requests.
	CpeUri pulumi.StringPtrInput `pulumi:"cpeUri"`
	// A vendor-specific description of this note.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The fix for this specific package version.
	FixedLocation VulnerabilityLocationPtrInput `pulumi:"fixedLocation"`
	// Whether this Detail is obsolete. Occurrences are expected not to point to obsolete details.
	IsObsolete pulumi.BoolPtrInput `pulumi:"isObsolete"`
	// The max version of the package in which the vulnerability exists.
	MaxAffectedVersion VersionPtrInput `pulumi:"maxAffectedVersion"`
	// The min version of the package in which the vulnerability exists.
	MinAffectedVersion VersionPtrInput `pulumi:"minAffectedVersion"`
	// The name of the package where the vulnerability was found. This field can be used as a filter in list requests.
	Package pulumi.StringPtrInput `pulumi:"package"`
	// The type of package; whether native or non native(ruby gems, node.js packages etc)
	PackageType pulumi.StringPtrInput `pulumi:"packageType"`
	// The severity (eg: distro assigned severity) for this vulnerability.
	SeverityName pulumi.StringPtrInput `pulumi:"severityName"`
	// The source from which the information in this Detail was obtained.
	Source pulumi.StringPtrInput `pulumi:"source"`
	// The vendor of the product. e.g. "google"
	Vendor pulumi.StringPtrInput `pulumi:"vendor"`
}

func (DetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Detail)(nil)).Elem()
}

func (i DetailArgs) ToDetailOutput() DetailOutput {
	return i.ToDetailOutputWithContext(context.Background())
}

func (i DetailArgs) ToDetailOutputWithContext(ctx context.Context) DetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DetailOutput)
}

// DetailArrayInput is an input type that accepts DetailArray and DetailArrayOutput values.
// You can construct a concrete instance of `DetailArrayInput` via:
//
//	DetailArray{ DetailArgs{...} }
type DetailArrayInput interface {
	pulumi.Input

	ToDetailArrayOutput() DetailArrayOutput
	ToDetailArrayOutputWithContext(context.Context) DetailArrayOutput
}

type DetailArray []DetailInput

func (DetailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Detail)(nil)).Elem()
}

func (i DetailArray) ToDetailArrayOutput() DetailArrayOutput {
	return i.ToDetailArrayOutputWithContext(context.Background())
}

func (i DetailArray) ToDetailArrayOutputWithContext(ctx context.Context) DetailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DetailArrayOutput)
}

// Identifies all occurrences of this vulnerability in the package for a specific distro/location For example: glibc in cpe:/o:debian:debian_linux:8 for versions 2.1 - 2.2
type DetailOutput struct{ *pulumi.OutputState }

func (DetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Detail)(nil)).Elem()
}

func (o DetailOutput) ToDetailOutput() DetailOutput {
	return o
}

func (o DetailOutput) ToDetailOutputWithContext(ctx context.Context) DetailOutput {
	return o
}

// The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/) in which the vulnerability manifests. Examples include distro or storage location for vulnerable jar. This field can be used as a filter in list requests.
func (o DetailOutput) CpeUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Detail) *string { return v.CpeUri }).(pulumi.StringPtrOutput)
}

// A vendor-specific description of this note.
func (o DetailOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Detail) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The fix for this specific package version.
func (o DetailOutput) FixedLocation() VulnerabilityLocationPtrOutput {
	return o.ApplyT(func(v Detail) *VulnerabilityLocation { return v.FixedLocation }).(VulnerabilityLocationPtrOutput)
}

// Whether this Detail is obsolete. Occurrences are expected not to point to obsolete details.
func (o DetailOutput) IsObsolete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Detail) *bool { return v.IsObsolete }).(pulumi.BoolPtrOutput)
}

// The max version of the package in which the vulnerability exists.
func (o DetailOutput) MaxAffectedVersion() VersionPtrOutput {
	return o.ApplyT(func(v Detail) *Version { return v.MaxAffectedVersion }).(VersionPtrOutput)
}

// The min version of the package in which the vulnerability exists.
func (o DetailOutput) MinAffectedVersion() VersionPtrOutput {
	return o.ApplyT(func(v Detail) *Version { return v.MinAffectedVersion }).(VersionPtrOutput)
}

// The name of the package where the vulnerability was found. This field can be used as a filter in list requests.
func (o DetailOutput) Package() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Detail) *string { return v.Package }).(pulumi.StringPtrOutput)
}

// The type of package; whether native or non native(ruby gems, node.js packages etc)
func (o DetailOutput) PackageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Detail) *string { return v.PackageType }).(pulumi.StringPtrOutput)
}

// The severity (eg: distro assigned severity) for this vulnerability.
func (o DetailOutput) SeverityName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Detail) *string { return v.SeverityName }).(pulumi.StringPtrOutput)
}

// The source from which the information in this Detail was obtained.
func (o DetailOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Detail) *string { return v.Source }).(pulumi.StringPtrOutput)
}

// The vendor of the product. e.g. "google"
func (o DetailOutput) Vendor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Detail) *string { return v.Vendor }).(pulumi.StringPtrOutput)
}

type DetailArrayOutput struct{ *pulumi.OutputState }

func (DetailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Detail)(nil)).Elem()
}

func (o DetailArrayOutput) ToDetailArrayOutput() DetailArrayOutput {
	return o
}

func (o DetailArrayOutput) ToDetailArrayOutputWithContext(ctx context.Context) DetailArrayOutput {
	return o
}

func (o DetailArrayOutput) Index(i pulumi.IntInput) DetailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Detail {
		return vs[0].([]Detail)[vs[1].(int)]
	}).(DetailOutput)
}

// Identifies all occurrences of this vulnerability in the package for a specific distro/location For example: glibc in cpe:/o:debian:debian_linux:8 for versions 2.1 - 2.2
type DetailResponse struct {
	// The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/) in which the vulnerability manifests. Examples include distro or storage location for vulnerable jar. This field can be used as a filter in list requests.
	CpeUri string `pulumi:"cpeUri"`
	// A vendor-specific description of this note.
	Description string `pulumi:"description"`
	// The fix for this specific package version.
	FixedLocation VulnerabilityLocationResponse `pulumi:"fixedLocation"`
	// Whether this Detail is obsolete. Occurrences are expected not to point to obsolete details.
	IsObsolete bool `pulumi:"isObsolete"`
	// The max version of the package in which the vulnerability exists.
	MaxAffectedVersion VersionResponse `pulumi:"maxAffectedVersion"`
	// The min version of the package in which the vulnerability exists.
	MinAffectedVersion VersionResponse `pulumi:"minAffectedVersion"`
	// The name of the package where the vulnerability was found. This field can be used as a filter in list requests.
	Package string `pulumi:"package"`
	// The type of package; whether native or non native(ruby gems, node.js packages etc)
	PackageType string `pulumi:"packageType"`
	// The severity (eg: distro assigned severity) for this vulnerability.
	SeverityName string `pulumi:"severityName"`
	// The source from which the information in this Detail was obtained.
	Source string `pulumi:"source"`
	// The vendor of the product. e.g. "google"
	Vendor string `pulumi:"vendor"`
}

// Identifies all occurrences of this vulnerability in the package for a specific distro/location For example: glibc in cpe:/o:debian:debian_linux:8 for versions 2.1 - 2.2
type DetailResponseOutput struct{ *pulumi.OutputState }

func (DetailResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DetailResponse)(nil)).Elem()
}

func (o DetailResponseOutput) ToDetailResponseOutput() DetailResponseOutput {
	return o
}

func (o DetailResponseOutput) ToDetailResponseOutputWithContext(ctx context.Context) DetailResponseOutput {
	return o
}

// The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/) in which the vulnerability manifests. Examples include distro or storage location for vulnerable jar. This field can be used as a filter in list requests.
func (o DetailResponseOutput) CpeUri() pulumi.StringOutput {
	return o.ApplyT(func(v DetailResponse) string { return v.CpeUri }).(pulumi.StringOutput)
}

// A vendor-specific description of this note.
func (o DetailResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v DetailResponse) string { return v.Description }).(pulumi.StringOutput)
}

// The fix for this specific package version.
func (o DetailResponseOutput) FixedLocation() VulnerabilityLocationResponseOutput {
	return o.ApplyT(func(v DetailResponse) VulnerabilityLocationResponse { return v.FixedLocation }).(VulnerabilityLocationResponseOutput)
}

// Whether this Detail is obsolete. Occurrences are expected not to point to obsolete details.
func (o DetailResponseOutput) IsObsolete() pulumi.BoolOutput {
	return o.ApplyT(func(v DetailResponse) bool { return v.IsObsolete }).(pulumi.BoolOutput)
}

// The max version of the package in which the vulnerability exists.
func (o DetailResponseOutput) MaxAffectedVersion() VersionResponseOutput {
	return o.ApplyT(func(v DetailResponse) VersionResponse { return v.MaxAffectedVersion }).(VersionResponseOutput)
}

// The min version of the package in which the vulnerability exists.
func (o DetailResponseOutput) MinAffectedVersion() VersionResponseOutput {
	return o.ApplyT(func(v DetailResponse) VersionResponse { return v.MinAffectedVersion }).(VersionResponseOutput)
}

// The name of the package where the vulnerability was found. This field can be used as a filter in list requests.
func (o DetailResponseOutput) Package() pulumi.StringOutput {
	return o.ApplyT(func(v DetailResponse) string { return v.Package }).(pulumi.StringOutput)
}

// The type of package; whether native or non native(ruby gems, node.js packages etc)
func (o DetailResponseOutput) PackageType() pulumi.StringOutput {
	return o.ApplyT(func(v DetailResponse) string { return v.PackageType }).(pulumi.StringOutput)
}

// The severity (eg: distro assigned severity) for this vulnerability.
func (o DetailResponseOutput) SeverityName() pulumi.StringOutput {
	return o.ApplyT(func(v DetailResponse) string { return v.SeverityName }).(pulumi.StringOutput)
}

// The source from which the information in this Detail was obtained.
func (o DetailResponseOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v DetailResponse) string { return v.Source }).(pulumi.StringOutput)
}

// The vendor of the product. e.g. "google"
func (o DetailResponseOutput) Vendor() pulumi.StringOutput {
	return o.ApplyT(func(v DetailResponse) string { return v.Vendor }).(pulumi.StringOutput)
}

type DetailResponseArrayOutput struct{ *pulumi.OutputState }

func (DetailResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DetailResponse)(nil)).Elem()
}

func (o DetailResponseArrayOutput) ToDetailResponseArrayOutput() DetailResponseArrayOutput {
	return o
}

func (o DetailResponseArrayOutput) ToDetailResponseArrayOutputWithContext(ctx context.Context) DetailResponseArrayOutput {
	return o
}

func (o DetailResponseArrayOutput) Index(i pulumi.IntInput) DetailResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DetailResponse {
		return vs[0].([]DetailResponse)[vs[1].(int)]
	}).(DetailResponseOutput)
}

// Digest information.
type Digest struct {
	// `SHA1`, `SHA512` etc.
	Algo *string `pulumi:"algo"`
	// Value of the digest.
	DigestBytes *string `pulumi:"digestBytes"`
}

// DigestInput is an input type that accepts DigestArgs and DigestOutput values.
// You can construct a concrete instance of `DigestInput` via:
//
//	DigestArgs{...}
type DigestInput interface {
	pulumi.Input

	ToDigestOutput() DigestOutput
	ToDigestOutputWithContext(context.Context) DigestOutput
}

// Digest information.
type DigestArgs struct {
	// `SHA1`, `SHA512` etc.
	Algo pulumi.StringPtrInput `pulumi:"algo"`
	// Value of the digest.
	DigestBytes pulumi.StringPtrInput `pulumi:"digestBytes"`
}

func (DigestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Digest)(nil)).Elem()
}

func (i DigestArgs) ToDigestOutput() DigestOutput {
	return i.ToDigestOutputWithContext(context.Background())
}

func (i DigestArgs) ToDigestOutputWithContext(ctx context.Context) DigestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DigestOutput)
}

// DigestArrayInput is an input type that accepts DigestArray and DigestArrayOutput values.
// You can construct a concrete instance of `DigestArrayInput` via:
//
//	DigestArray{ DigestArgs{...} }
type DigestArrayInput interface {
	pulumi.Input

	ToDigestArrayOutput() DigestArrayOutput
	ToDigestArrayOutputWithContext(context.Context) DigestArrayOutput
}

type DigestArray []DigestInput

func (DigestArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Digest)(nil)).Elem()
}

func (i DigestArray) ToDigestArrayOutput() DigestArrayOutput {
	return i.ToDigestArrayOutputWithContext(context.Background())
}

func (i DigestArray) ToDigestArrayOutputWithContext(ctx context.Context) DigestArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DigestArrayOutput)
}

// Digest information.
type DigestOutput struct{ *pulumi.OutputState }

func (DigestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Digest)(nil)).Elem()
}

func (o DigestOutput) ToDigestOutput() DigestOutput {
	return o
}

func (o DigestOutput) ToDigestOutputWithContext(ctx context.Context) DigestOutput {
	return o
}

// `SHA1`, `SHA512` etc.
func (o DigestOutput) Algo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Digest) *string { return v.Algo }).(pulumi.StringPtrOutput)
}

// Value of the digest.
func (o DigestOutput) DigestBytes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Digest) *string { return v.DigestBytes }).(pulumi.StringPtrOutput)
}

type DigestArrayOutput struct{ *pulumi.OutputState }

func (DigestArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Digest)(nil)).Elem()
}

func (o DigestArrayOutput) ToDigestArrayOutput() DigestArrayOutput {
	return o
}

func (o DigestArrayOutput) ToDigestArrayOutputWithContext(ctx context.Context) DigestArrayOutput {
	return o
}

func (o DigestArrayOutput) Index(i pulumi.IntInput) DigestOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Digest {
		return vs[0].([]Digest)[vs[1].(int)]
	}).(DigestOutput)
}

// Digest information.
type DigestResponse struct {
	// `SHA1`, `SHA512` etc.
	Algo string `pulumi:"algo"`
	// Value of the digest.
	DigestBytes string `pulumi:"digestBytes"`
}

// Digest information.
type DigestResponseOutput struct{ *pulumi.OutputState }

func (DigestResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DigestResponse)(nil)).Elem()
}

func (o DigestResponseOutput) ToDigestResponseOutput() DigestResponseOutput {
	return o
}

func (o DigestResponseOutput) ToDigestResponseOutputWithContext(ctx context.Context) DigestResponseOutput {
	return o
}

// `SHA1`, `SHA512` etc.
func (o DigestResponseOutput) Algo() pulumi.StringOutput {
	return o.ApplyT(func(v DigestResponse) string { return v.Algo }).(pulumi.StringOutput)
}

// Value of the digest.
func (o DigestResponseOutput) DigestBytes() pulumi.StringOutput {
	return o.ApplyT(func(v DigestResponse) string { return v.DigestBytes }).(pulumi.StringOutput)
}

type DigestResponseArrayOutput struct{ *pulumi.OutputState }

func (DigestResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DigestResponse)(nil)).Elem()
}

func (o DigestResponseArrayOutput) ToDigestResponseArrayOutput() DigestResponseArrayOutput {
	return o
}

func (o DigestResponseArrayOutput) ToDigestResponseArrayOutputWithContext(ctx context.Context) DigestResponseArrayOutput {
	return o
}

func (o DigestResponseArrayOutput) Index(i pulumi.IntInput) DigestResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DigestResponse {
		return vs[0].([]DigestResponse)[vs[1].(int)]
	}).(DigestResponseOutput)
}

// Provides information about the scan status of a discovered resource.
type Discovered struct {
	// The list of analysis that were completed for a resource.
	AnalysisCompleted *AnalysisCompleted `pulumi:"analysisCompleted"`
	// Indicates any errors encountered during analysis of a resource. There could be 0 or more of these errors.
	AnalysisError []Status `pulumi:"analysisError"`
	// The status of discovery for the resource.
	AnalysisStatus *DiscoveredAnalysisStatus `pulumi:"analysisStatus"`
	// When an error is encountered this will contain a LocalizedMessage under details to show to the user. The LocalizedMessage output only and populated by the API.
	AnalysisStatusError *Status `pulumi:"analysisStatusError"`
	// The time occurrences related to this discovery occurrence were archived.
	ArchiveTime *string `pulumi:"archiveTime"`
	// Whether the resource is continuously analyzed.
	ContinuousAnalysis *DiscoveredContinuousAnalysis `pulumi:"continuousAnalysis"`
	// The CPE of the resource being scanned.
	Cpe *string `pulumi:"cpe"`
	// The last time this resource was scanned.
	LastScanTime *string `pulumi:"lastScanTime"`
}

// DiscoveredInput is an input type that accepts DiscoveredArgs and DiscoveredOutput values.
// You can construct a concrete instance of `DiscoveredInput` via:
//
//	DiscoveredArgs{...}
type DiscoveredInput interface {
	pulumi.Input

	ToDiscoveredOutput() DiscoveredOutput
	ToDiscoveredOutputWithContext(context.Context) DiscoveredOutput
}

// Provides information about the scan status of a discovered resource.
type DiscoveredArgs struct {
	// The list of analysis that were completed for a resource.
	AnalysisCompleted AnalysisCompletedPtrInput `pulumi:"analysisCompleted"`
	// Indicates any errors encountered during analysis of a resource. There could be 0 or more of these errors.
	AnalysisError StatusArrayInput `pulumi:"analysisError"`
	// The status of discovery for the resource.
	AnalysisStatus DiscoveredAnalysisStatusPtrInput `pulumi:"analysisStatus"`
	// When an error is encountered this will contain a LocalizedMessage under details to show to the user. The LocalizedMessage output only and populated by the API.
	AnalysisStatusError StatusPtrInput `pulumi:"analysisStatusError"`
	// The time occurrences related to this discovery occurrence were archived.
	ArchiveTime pulumi.StringPtrInput `pulumi:"archiveTime"`
	// Whether the resource is continuously analyzed.
	ContinuousAnalysis DiscoveredContinuousAnalysisPtrInput `pulumi:"continuousAnalysis"`
	// The CPE of the resource being scanned.
	Cpe pulumi.StringPtrInput `pulumi:"cpe"`
	// The last time this resource was scanned.
	LastScanTime pulumi.StringPtrInput `pulumi:"lastScanTime"`
}

func (DiscoveredArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Discovered)(nil)).Elem()
}

func (i DiscoveredArgs) ToDiscoveredOutput() DiscoveredOutput {
	return i.ToDiscoveredOutputWithContext(context.Background())
}

func (i DiscoveredArgs) ToDiscoveredOutputWithContext(ctx context.Context) DiscoveredOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiscoveredOutput)
}

func (i DiscoveredArgs) ToDiscoveredPtrOutput() DiscoveredPtrOutput {
	return i.ToDiscoveredPtrOutputWithContext(context.Background())
}

func (i DiscoveredArgs) ToDiscoveredPtrOutputWithContext(ctx context.Context) DiscoveredPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiscoveredOutput).ToDiscoveredPtrOutputWithContext(ctx)
}

// DiscoveredPtrInput is an input type that accepts DiscoveredArgs, DiscoveredPtr and DiscoveredPtrOutput values.
// You can construct a concrete instance of `DiscoveredPtrInput` via:
//
//	        DiscoveredArgs{...}
//
//	or:
//
//	        nil
type DiscoveredPtrInput interface {
	pulumi.Input

	ToDiscoveredPtrOutput() DiscoveredPtrOutput
	ToDiscoveredPtrOutputWithContext(context.Context) DiscoveredPtrOutput
}

type discoveredPtrType DiscoveredArgs

func DiscoveredPtr(v *DiscoveredArgs) DiscoveredPtrInput {
	return (*discoveredPtrType)(v)
}

func (*discoveredPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Discovered)(nil)).Elem()
}

func (i *discoveredPtrType) ToDiscoveredPtrOutput() DiscoveredPtrOutput {
	return i.ToDiscoveredPtrOutputWithContext(context.Background())
}

func (i *discoveredPtrType) ToDiscoveredPtrOutputWithContext(ctx context.Context) DiscoveredPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiscoveredPtrOutput)
}

// Provides information about the scan status of a discovered resource.
type DiscoveredOutput struct{ *pulumi.OutputState }

func (DiscoveredOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Discovered)(nil)).Elem()
}

func (o DiscoveredOutput) ToDiscoveredOutput() DiscoveredOutput {
	return o
}

func (o DiscoveredOutput) ToDiscoveredOutputWithContext(ctx context.Context) DiscoveredOutput {
	return o
}

func (o DiscoveredOutput) ToDiscoveredPtrOutput() DiscoveredPtrOutput {
	return o.ToDiscoveredPtrOutputWithContext(context.Background())
}

func (o DiscoveredOutput) ToDiscoveredPtrOutputWithContext(ctx context.Context) DiscoveredPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Discovered) *Discovered {
		return &v
	}).(DiscoveredPtrOutput)
}

// The list of analysis that were completed for a resource.
func (o DiscoveredOutput) AnalysisCompleted() AnalysisCompletedPtrOutput {
	return o.ApplyT(func(v Discovered) *AnalysisCompleted { return v.AnalysisCompleted }).(AnalysisCompletedPtrOutput)
}

// Indicates any errors encountered during analysis of a resource. There could be 0 or more of these errors.
func (o DiscoveredOutput) AnalysisError() StatusArrayOutput {
	return o.ApplyT(func(v Discovered) []Status { return v.AnalysisError }).(StatusArrayOutput)
}

// The status of discovery for the resource.
func (o DiscoveredOutput) AnalysisStatus() DiscoveredAnalysisStatusPtrOutput {
	return o.ApplyT(func(v Discovered) *DiscoveredAnalysisStatus { return v.AnalysisStatus }).(DiscoveredAnalysisStatusPtrOutput)
}

// When an error is encountered this will contain a LocalizedMessage under details to show to the user. The LocalizedMessage output only and populated by the API.
func (o DiscoveredOutput) AnalysisStatusError() StatusPtrOutput {
	return o.ApplyT(func(v Discovered) *Status { return v.AnalysisStatusError }).(StatusPtrOutput)
}

// The time occurrences related to this discovery occurrence were archived.
func (o DiscoveredOutput) ArchiveTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Discovered) *string { return v.ArchiveTime }).(pulumi.StringPtrOutput)
}

// Whether the resource is continuously analyzed.
func (o DiscoveredOutput) ContinuousAnalysis() DiscoveredContinuousAnalysisPtrOutput {
	return o.ApplyT(func(v Discovered) *DiscoveredContinuousAnalysis { return v.ContinuousAnalysis }).(DiscoveredContinuousAnalysisPtrOutput)
}

// The CPE of the resource being scanned.
func (o DiscoveredOutput) Cpe() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Discovered) *string { return v.Cpe }).(pulumi.StringPtrOutput)
}

// The last time this resource was scanned.
func (o DiscoveredOutput) LastScanTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Discovered) *string { return v.LastScanTime }).(pulumi.StringPtrOutput)
}

type DiscoveredPtrOutput struct{ *pulumi.OutputState }

func (DiscoveredPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Discovered)(nil)).Elem()
}

func (o DiscoveredPtrOutput) ToDiscoveredPtrOutput() DiscoveredPtrOutput {
	return o
}

func (o DiscoveredPtrOutput) ToDiscoveredPtrOutputWithContext(ctx context.Context) DiscoveredPtrOutput {
	return o
}

func (o DiscoveredPtrOutput) Elem() DiscoveredOutput {
	return o.ApplyT(func(v *Discovered) Discovered {
		if v != nil {
			return *v
		}
		var ret Discovered
		return ret
	}).(DiscoveredOutput)
}

// The list of analysis that were completed for a resource.
func (o DiscoveredPtrOutput) AnalysisCompleted() AnalysisCompletedPtrOutput {
	return o.ApplyT(func(v *Discovered) *AnalysisCompleted {
		if v == nil {
			return nil
		}
		return v.AnalysisCompleted
	}).(AnalysisCompletedPtrOutput)
}

// Indicates any errors encountered during analysis of a resource. There could be 0 or more of these errors.
func (o DiscoveredPtrOutput) AnalysisError() StatusArrayOutput {
	return o.ApplyT(func(v *Discovered) []Status {
		if v == nil {
			return nil
		}
		return v.AnalysisError
	}).(StatusArrayOutput)
}

// The status of discovery for the resource.
func (o DiscoveredPtrOutput) AnalysisStatus() DiscoveredAnalysisStatusPtrOutput {
	return o.ApplyT(func(v *Discovered) *DiscoveredAnalysisStatus {
		if v == nil {
			return nil
		}
		return v.AnalysisStatus
	}).(DiscoveredAnalysisStatusPtrOutput)
}

// When an error is encountered this will contain a LocalizedMessage under details to show to the user. The LocalizedMessage output only and populated by the API.
func (o DiscoveredPtrOutput) AnalysisStatusError() StatusPtrOutput {
	return o.ApplyT(func(v *Discovered) *Status {
		if v == nil {
			return nil
		}
		return v.AnalysisStatusError
	}).(StatusPtrOutput)
}

// The time occurrences related to this discovery occurrence were archived.
func (o DiscoveredPtrOutput) ArchiveTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Discovered) *string {
		if v == nil {
			return nil
		}
		return v.ArchiveTime
	}).(pulumi.StringPtrOutput)
}

// Whether the resource is continuously analyzed.
func (o DiscoveredPtrOutput) ContinuousAnalysis() DiscoveredContinuousAnalysisPtrOutput {
	return o.ApplyT(func(v *Discovered) *DiscoveredContinuousAnalysis {
		if v == nil {
			return nil
		}
		return v.ContinuousAnalysis
	}).(DiscoveredContinuousAnalysisPtrOutput)
}

// The CPE of the resource being scanned.
func (o DiscoveredPtrOutput) Cpe() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Discovered) *string {
		if v == nil {
			return nil
		}
		return v.Cpe
	}).(pulumi.StringPtrOutput)
}

// The last time this resource was scanned.
func (o DiscoveredPtrOutput) LastScanTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Discovered) *string {
		if v == nil {
			return nil
		}
		return v.LastScanTime
	}).(pulumi.StringPtrOutput)
}

// Provides information about the scan status of a discovered resource.
type DiscoveredResponse struct {
	// The list of analysis that were completed for a resource.
	AnalysisCompleted AnalysisCompletedResponse `pulumi:"analysisCompleted"`
	// Indicates any errors encountered during analysis of a resource. There could be 0 or more of these errors.
	AnalysisError []StatusResponse `pulumi:"analysisError"`
	// The status of discovery for the resource.
	AnalysisStatus string `pulumi:"analysisStatus"`
	// When an error is encountered this will contain a LocalizedMessage under details to show to the user. The LocalizedMessage output only and populated by the API.
	AnalysisStatusError StatusResponse `pulumi:"analysisStatusError"`
	// The time occurrences related to this discovery occurrence were archived.
	ArchiveTime string `pulumi:"archiveTime"`
	// Whether the resource is continuously analyzed.
	ContinuousAnalysis string `pulumi:"continuousAnalysis"`
	// The CPE of the resource being scanned.
	Cpe string `pulumi:"cpe"`
	// The last time this resource was scanned.
	LastScanTime string `pulumi:"lastScanTime"`
	// An operation that indicates the status of the current scan. This field is deprecated, do not use.
	//
	// Deprecated: Output only. An operation that indicates the status of the current scan. This field is deprecated, do not use.
	Operation OperationResponse `pulumi:"operation"`
	// The status of an SBOM generation.
	SbomStatus SBOMStatusResponse `pulumi:"sbomStatus"`
}

// Provides information about the scan status of a discovered resource.
type DiscoveredResponseOutput struct{ *pulumi.OutputState }

func (DiscoveredResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiscoveredResponse)(nil)).Elem()
}

func (o DiscoveredResponseOutput) ToDiscoveredResponseOutput() DiscoveredResponseOutput {
	return o
}

func (o DiscoveredResponseOutput) ToDiscoveredResponseOutputWithContext(ctx context.Context) DiscoveredResponseOutput {
	return o
}

// The list of analysis that were completed for a resource.
func (o DiscoveredResponseOutput) AnalysisCompleted() AnalysisCompletedResponseOutput {
	return o.ApplyT(func(v DiscoveredResponse) AnalysisCompletedResponse { return v.AnalysisCompleted }).(AnalysisCompletedResponseOutput)
}

// Indicates any errors encountered during analysis of a resource. There could be 0 or more of these errors.
func (o DiscoveredResponseOutput) AnalysisError() StatusResponseArrayOutput {
	return o.ApplyT(func(v DiscoveredResponse) []StatusResponse { return v.AnalysisError }).(StatusResponseArrayOutput)
}

// The status of discovery for the resource.
func (o DiscoveredResponseOutput) AnalysisStatus() pulumi.StringOutput {
	return o.ApplyT(func(v DiscoveredResponse) string { return v.AnalysisStatus }).(pulumi.StringOutput)
}

// When an error is encountered this will contain a LocalizedMessage under details to show to the user. The LocalizedMessage output only and populated by the API.
func (o DiscoveredResponseOutput) AnalysisStatusError() StatusResponseOutput {
	return o.ApplyT(func(v DiscoveredResponse) StatusResponse { return v.AnalysisStatusError }).(StatusResponseOutput)
}

// The time occurrences related to this discovery occurrence were archived.
func (o DiscoveredResponseOutput) ArchiveTime() pulumi.StringOutput {
	return o.ApplyT(func(v DiscoveredResponse) string { return v.ArchiveTime }).(pulumi.StringOutput)
}

// Whether the resource is continuously analyzed.
func (o DiscoveredResponseOutput) ContinuousAnalysis() pulumi.StringOutput {
	return o.ApplyT(func(v DiscoveredResponse) string { return v.ContinuousAnalysis }).(pulumi.StringOutput)
}

// The CPE of the resource being scanned.
func (o DiscoveredResponseOutput) Cpe() pulumi.StringOutput {
	return o.ApplyT(func(v DiscoveredResponse) string { return v.Cpe }).(pulumi.StringOutput)
}

// The last time this resource was scanned.
func (o DiscoveredResponseOutput) LastScanTime() pulumi.StringOutput {
	return o.ApplyT(func(v DiscoveredResponse) string { return v.LastScanTime }).(pulumi.StringOutput)
}

// An operation that indicates the status of the current scan. This field is deprecated, do not use.
//
// Deprecated: Output only. An operation that indicates the status of the current scan. This field is deprecated, do not use.
func (o DiscoveredResponseOutput) Operation() OperationResponseOutput {
	return o.ApplyT(func(v DiscoveredResponse) OperationResponse { return v.Operation }).(OperationResponseOutput)
}

// The status of an SBOM generation.
func (o DiscoveredResponseOutput) SbomStatus() SBOMStatusResponseOutput {
	return o.ApplyT(func(v DiscoveredResponse) SBOMStatusResponse { return v.SbomStatus }).(SBOMStatusResponseOutput)
}

// A note that indicates a type of analysis a provider would perform. This note exists in a provider's project. A `Discovery` occurrence is created in a consumer's project at the start of analysis. The occurrence's operation will indicate the status of the analysis. Absence of an occurrence linked to this note for a resource indicates that analysis hasn't started.
type Discovery struct {
	// The kind of analysis that is handled by this discovery.
	AnalysisKind *DiscoveryAnalysisKind `pulumi:"analysisKind"`
}

// DiscoveryInput is an input type that accepts DiscoveryArgs and DiscoveryOutput values.
// You can construct a concrete instance of `DiscoveryInput` via:
//
//	DiscoveryArgs{...}
type DiscoveryInput interface {
	pulumi.Input

	ToDiscoveryOutput() DiscoveryOutput
	ToDiscoveryOutputWithContext(context.Context) DiscoveryOutput
}

// A note that indicates a type of analysis a provider would perform. This note exists in a provider's project. A `Discovery` occurrence is created in a consumer's project at the start of analysis. The occurrence's operation will indicate the status of the analysis. Absence of an occurrence linked to this note for a resource indicates that analysis hasn't started.
type DiscoveryArgs struct {
	// The kind of analysis that is handled by this discovery.
	AnalysisKind DiscoveryAnalysisKindPtrInput `pulumi:"analysisKind"`
}

func (DiscoveryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Discovery)(nil)).Elem()
}

func (i DiscoveryArgs) ToDiscoveryOutput() DiscoveryOutput {
	return i.ToDiscoveryOutputWithContext(context.Background())
}

func (i DiscoveryArgs) ToDiscoveryOutputWithContext(ctx context.Context) DiscoveryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiscoveryOutput)
}

func (i DiscoveryArgs) ToDiscoveryPtrOutput() DiscoveryPtrOutput {
	return i.ToDiscoveryPtrOutputWithContext(context.Background())
}

func (i DiscoveryArgs) ToDiscoveryPtrOutputWithContext(ctx context.Context) DiscoveryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiscoveryOutput).ToDiscoveryPtrOutputWithContext(ctx)
}

// DiscoveryPtrInput is an input type that accepts DiscoveryArgs, DiscoveryPtr and DiscoveryPtrOutput values.
// You can construct a concrete instance of `DiscoveryPtrInput` via:
//
//	        DiscoveryArgs{...}
//
//	or:
//
//	        nil
type DiscoveryPtrInput interface {
	pulumi.Input

	ToDiscoveryPtrOutput() DiscoveryPtrOutput
	ToDiscoveryPtrOutputWithContext(context.Context) DiscoveryPtrOutput
}

type discoveryPtrType DiscoveryArgs

func DiscoveryPtr(v *DiscoveryArgs) DiscoveryPtrInput {
	return (*discoveryPtrType)(v)
}

func (*discoveryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Discovery)(nil)).Elem()
}

func (i *discoveryPtrType) ToDiscoveryPtrOutput() DiscoveryPtrOutput {
	return i.ToDiscoveryPtrOutputWithContext(context.Background())
}

func (i *discoveryPtrType) ToDiscoveryPtrOutputWithContext(ctx context.Context) DiscoveryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiscoveryPtrOutput)
}

// A note that indicates a type of analysis a provider would perform. This note exists in a provider's project. A `Discovery` occurrence is created in a consumer's project at the start of analysis. The occurrence's operation will indicate the status of the analysis. Absence of an occurrence linked to this note for a resource indicates that analysis hasn't started.
type DiscoveryOutput struct{ *pulumi.OutputState }

func (DiscoveryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Discovery)(nil)).Elem()
}

func (o DiscoveryOutput) ToDiscoveryOutput() DiscoveryOutput {
	return o
}

func (o DiscoveryOutput) ToDiscoveryOutputWithContext(ctx context.Context) DiscoveryOutput {
	return o
}

func (o DiscoveryOutput) ToDiscoveryPtrOutput() DiscoveryPtrOutput {
	return o.ToDiscoveryPtrOutputWithContext(context.Background())
}

func (o DiscoveryOutput) ToDiscoveryPtrOutputWithContext(ctx context.Context) DiscoveryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Discovery) *Discovery {
		return &v
	}).(DiscoveryPtrOutput)
}

// The kind of analysis that is handled by this discovery.
func (o DiscoveryOutput) AnalysisKind() DiscoveryAnalysisKindPtrOutput {
	return o.ApplyT(func(v Discovery) *DiscoveryAnalysisKind { return v.AnalysisKind }).(DiscoveryAnalysisKindPtrOutput)
}

type DiscoveryPtrOutput struct{ *pulumi.OutputState }

func (DiscoveryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Discovery)(nil)).Elem()
}

func (o DiscoveryPtrOutput) ToDiscoveryPtrOutput() DiscoveryPtrOutput {
	return o
}

func (o DiscoveryPtrOutput) ToDiscoveryPtrOutputWithContext(ctx context.Context) DiscoveryPtrOutput {
	return o
}

func (o DiscoveryPtrOutput) Elem() DiscoveryOutput {
	return o.ApplyT(func(v *Discovery) Discovery {
		if v != nil {
			return *v
		}
		var ret Discovery
		return ret
	}).(DiscoveryOutput)
}

// The kind of analysis that is handled by this discovery.
func (o DiscoveryPtrOutput) AnalysisKind() DiscoveryAnalysisKindPtrOutput {
	return o.ApplyT(func(v *Discovery) *DiscoveryAnalysisKind {
		if v == nil {
			return nil
		}
		return v.AnalysisKind
	}).(DiscoveryAnalysisKindPtrOutput)
}

// A note that indicates a type of analysis a provider would perform. This note exists in a provider's project. A `Discovery` occurrence is created in a consumer's project at the start of analysis. The occurrence's operation will indicate the status of the analysis. Absence of an occurrence linked to this note for a resource indicates that analysis hasn't started.
type DiscoveryResponse struct {
	// The kind of analysis that is handled by this discovery.
	AnalysisKind string `pulumi:"analysisKind"`
}

// A note that indicates a type of analysis a provider would perform. This note exists in a provider's project. A `Discovery` occurrence is created in a consumer's project at the start of analysis. The occurrence's operation will indicate the status of the analysis. Absence of an occurrence linked to this note for a resource indicates that analysis hasn't started.
type DiscoveryResponseOutput struct{ *pulumi.OutputState }

func (DiscoveryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiscoveryResponse)(nil)).Elem()
}

func (o DiscoveryResponseOutput) ToDiscoveryResponseOutput() DiscoveryResponseOutput {
	return o
}

func (o DiscoveryResponseOutput) ToDiscoveryResponseOutputWithContext(ctx context.Context) DiscoveryResponseOutput {
	return o
}

// The kind of analysis that is handled by this discovery.
func (o DiscoveryResponseOutput) AnalysisKind() pulumi.StringOutput {
	return o.ApplyT(func(v DiscoveryResponse) string { return v.AnalysisKind }).(pulumi.StringOutput)
}

// This represents a particular channel of distribution for a given package. e.g. Debian's jessie-backports dpkg mirror
type Distribution struct {
	// The CPU architecture for which packages in this distribution channel were built
	Architecture *DistributionArchitecture `pulumi:"architecture"`
	// The cpe_uri in [cpe format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
	CpeUri *string `pulumi:"cpeUri"`
	// The distribution channel-specific description of this package.
	Description *string `pulumi:"description"`
	// The latest available version of this package in this distribution channel.
	LatestVersion *Version `pulumi:"latestVersion"`
	// A freeform string denoting the maintainer of this package.
	Maintainer *string `pulumi:"maintainer"`
	// The distribution channel-specific homepage for this package.
	Url *string `pulumi:"url"`
}

// DistributionInput is an input type that accepts DistributionArgs and DistributionOutput values.
// You can construct a concrete instance of `DistributionInput` via:
//
//	DistributionArgs{...}
type DistributionInput interface {
	pulumi.Input

	ToDistributionOutput() DistributionOutput
	ToDistributionOutputWithContext(context.Context) DistributionOutput
}

// This represents a particular channel of distribution for a given package. e.g. Debian's jessie-backports dpkg mirror
type DistributionArgs struct {
	// The CPU architecture for which packages in this distribution channel were built
	Architecture DistributionArchitecturePtrInput `pulumi:"architecture"`
	// The cpe_uri in [cpe format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
	CpeUri pulumi.StringPtrInput `pulumi:"cpeUri"`
	// The distribution channel-specific description of this package.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The latest available version of this package in this distribution channel.
	LatestVersion VersionPtrInput `pulumi:"latestVersion"`
	// A freeform string denoting the maintainer of this package.
	Maintainer pulumi.StringPtrInput `pulumi:"maintainer"`
	// The distribution channel-specific homepage for this package.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (DistributionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Distribution)(nil)).Elem()
}

func (i DistributionArgs) ToDistributionOutput() DistributionOutput {
	return i.ToDistributionOutputWithContext(context.Background())
}

func (i DistributionArgs) ToDistributionOutputWithContext(ctx context.Context) DistributionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionOutput)
}

// DistributionArrayInput is an input type that accepts DistributionArray and DistributionArrayOutput values.
// You can construct a concrete instance of `DistributionArrayInput` via:
//
//	DistributionArray{ DistributionArgs{...} }
type DistributionArrayInput interface {
	pulumi.Input

	ToDistributionArrayOutput() DistributionArrayOutput
	ToDistributionArrayOutputWithContext(context.Context) DistributionArrayOutput
}

type DistributionArray []DistributionInput

func (DistributionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Distribution)(nil)).Elem()
}

func (i DistributionArray) ToDistributionArrayOutput() DistributionArrayOutput {
	return i.ToDistributionArrayOutputWithContext(context.Background())
}

func (i DistributionArray) ToDistributionArrayOutputWithContext(ctx context.Context) DistributionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionArrayOutput)
}

// This represents a particular channel of distribution for a given package. e.g. Debian's jessie-backports dpkg mirror
type DistributionOutput struct{ *pulumi.OutputState }

func (DistributionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Distribution)(nil)).Elem()
}

func (o DistributionOutput) ToDistributionOutput() DistributionOutput {
	return o
}

func (o DistributionOutput) ToDistributionOutputWithContext(ctx context.Context) DistributionOutput {
	return o
}

// The CPU architecture for which packages in this distribution channel were built
func (o DistributionOutput) Architecture() DistributionArchitecturePtrOutput {
	return o.ApplyT(func(v Distribution) *DistributionArchitecture { return v.Architecture }).(DistributionArchitecturePtrOutput)
}

// The cpe_uri in [cpe format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
func (o DistributionOutput) CpeUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Distribution) *string { return v.CpeUri }).(pulumi.StringPtrOutput)
}

// The distribution channel-specific description of this package.
func (o DistributionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Distribution) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The latest available version of this package in this distribution channel.
func (o DistributionOutput) LatestVersion() VersionPtrOutput {
	return o.ApplyT(func(v Distribution) *Version { return v.LatestVersion }).(VersionPtrOutput)
}

// A freeform string denoting the maintainer of this package.
func (o DistributionOutput) Maintainer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Distribution) *string { return v.Maintainer }).(pulumi.StringPtrOutput)
}

// The distribution channel-specific homepage for this package.
func (o DistributionOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Distribution) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type DistributionArrayOutput struct{ *pulumi.OutputState }

func (DistributionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Distribution)(nil)).Elem()
}

func (o DistributionArrayOutput) ToDistributionArrayOutput() DistributionArrayOutput {
	return o
}

func (o DistributionArrayOutput) ToDistributionArrayOutputWithContext(ctx context.Context) DistributionArrayOutput {
	return o
}

func (o DistributionArrayOutput) Index(i pulumi.IntInput) DistributionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Distribution {
		return vs[0].([]Distribution)[vs[1].(int)]
	}).(DistributionOutput)
}

// This represents a particular channel of distribution for a given package. e.g. Debian's jessie-backports dpkg mirror
type DistributionResponse struct {
	// The CPU architecture for which packages in this distribution channel were built
	Architecture string `pulumi:"architecture"`
	// The cpe_uri in [cpe format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
	CpeUri string `pulumi:"cpeUri"`
	// The distribution channel-specific description of this package.
	Description string `pulumi:"description"`
	// The latest available version of this package in this distribution channel.
	LatestVersion VersionResponse `pulumi:"latestVersion"`
	// A freeform string denoting the maintainer of this package.
	Maintainer string `pulumi:"maintainer"`
	// The distribution channel-specific homepage for this package.
	Url string `pulumi:"url"`
}

// This represents a particular channel of distribution for a given package. e.g. Debian's jessie-backports dpkg mirror
type DistributionResponseOutput struct{ *pulumi.OutputState }

func (DistributionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionResponse)(nil)).Elem()
}

func (o DistributionResponseOutput) ToDistributionResponseOutput() DistributionResponseOutput {
	return o
}

func (o DistributionResponseOutput) ToDistributionResponseOutputWithContext(ctx context.Context) DistributionResponseOutput {
	return o
}

// The CPU architecture for which packages in this distribution channel were built
func (o DistributionResponseOutput) Architecture() pulumi.StringOutput {
	return o.ApplyT(func(v DistributionResponse) string { return v.Architecture }).(pulumi.StringOutput)
}

// The cpe_uri in [cpe format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
func (o DistributionResponseOutput) CpeUri() pulumi.StringOutput {
	return o.ApplyT(func(v DistributionResponse) string { return v.CpeUri }).(pulumi.StringOutput)
}

// The distribution channel-specific description of this package.
func (o DistributionResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v DistributionResponse) string { return v.Description }).(pulumi.StringOutput)
}

// The latest available version of this package in this distribution channel.
func (o DistributionResponseOutput) LatestVersion() VersionResponseOutput {
	return o.ApplyT(func(v DistributionResponse) VersionResponse { return v.LatestVersion }).(VersionResponseOutput)
}

// A freeform string denoting the maintainer of this package.
func (o DistributionResponseOutput) Maintainer() pulumi.StringOutput {
	return o.ApplyT(func(v DistributionResponse) string { return v.Maintainer }).(pulumi.StringOutput)
}

// The distribution channel-specific homepage for this package.
func (o DistributionResponseOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v DistributionResponse) string { return v.Url }).(pulumi.StringOutput)
}

type DistributionResponseArrayOutput struct{ *pulumi.OutputState }

func (DistributionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DistributionResponse)(nil)).Elem()
}

func (o DistributionResponseArrayOutput) ToDistributionResponseArrayOutput() DistributionResponseArrayOutput {
	return o
}

func (o DistributionResponseArrayOutput) ToDistributionResponseArrayOutputWithContext(ctx context.Context) DistributionResponseArrayOutput {
	return o
}

func (o DistributionResponseArrayOutput) Index(i pulumi.IntInput) DistributionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DistributionResponse {
		return vs[0].([]DistributionResponse)[vs[1].(int)]
	}).(DistributionResponseOutput)
}

// DocumentNote represents an SPDX Document Creation Infromation section: https://spdx.github.io/spdx-spec/2-document-creation-information/
type DocumentNote struct {
	// Compliance with the SPDX specification includes populating the SPDX fields therein with data related to such fields ("SPDX-Metadata")
	DataLicence *string `pulumi:"dataLicence"`
	// Provide a reference number that can be used to understand how to parse and interpret the rest of the file
	SpdxVersion *string `pulumi:"spdxVersion"`
}

// DocumentNoteInput is an input type that accepts DocumentNoteArgs and DocumentNoteOutput values.
// You can construct a concrete instance of `DocumentNoteInput` via:
//
//	DocumentNoteArgs{...}
type DocumentNoteInput interface {
	pulumi.Input

	ToDocumentNoteOutput() DocumentNoteOutput
	ToDocumentNoteOutputWithContext(context.Context) DocumentNoteOutput
}

// DocumentNote represents an SPDX Document Creation Infromation section: https://spdx.github.io/spdx-spec/2-document-creation-information/
type DocumentNoteArgs struct {
	// Compliance with the SPDX specification includes populating the SPDX fields therein with data related to such fields ("SPDX-Metadata")
	DataLicence pulumi.StringPtrInput `pulumi:"dataLicence"`
	// Provide a reference number that can be used to understand how to parse and interpret the rest of the file
	SpdxVersion pulumi.StringPtrInput `pulumi:"spdxVersion"`
}

func (DocumentNoteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DocumentNote)(nil)).Elem()
}

func (i DocumentNoteArgs) ToDocumentNoteOutput() DocumentNoteOutput {
	return i.ToDocumentNoteOutputWithContext(context.Background())
}

func (i DocumentNoteArgs) ToDocumentNoteOutputWithContext(ctx context.Context) DocumentNoteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentNoteOutput)
}

func (i DocumentNoteArgs) ToDocumentNotePtrOutput() DocumentNotePtrOutput {
	return i.ToDocumentNotePtrOutputWithContext(context.Background())
}

func (i DocumentNoteArgs) ToDocumentNotePtrOutputWithContext(ctx context.Context) DocumentNotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentNoteOutput).ToDocumentNotePtrOutputWithContext(ctx)
}

// DocumentNotePtrInput is an input type that accepts DocumentNoteArgs, DocumentNotePtr and DocumentNotePtrOutput values.
// You can construct a concrete instance of `DocumentNotePtrInput` via:
//
//	        DocumentNoteArgs{...}
//
//	or:
//
//	        nil
type DocumentNotePtrInput interface {
	pulumi.Input

	ToDocumentNotePtrOutput() DocumentNotePtrOutput
	ToDocumentNotePtrOutputWithContext(context.Context) DocumentNotePtrOutput
}

type documentNotePtrType DocumentNoteArgs

func DocumentNotePtr(v *DocumentNoteArgs) DocumentNotePtrInput {
	return (*documentNotePtrType)(v)
}

func (*documentNotePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DocumentNote)(nil)).Elem()
}

func (i *documentNotePtrType) ToDocumentNotePtrOutput() DocumentNotePtrOutput {
	return i.ToDocumentNotePtrOutputWithContext(context.Background())
}

func (i *documentNotePtrType) ToDocumentNotePtrOutputWithContext(ctx context.Context) DocumentNotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentNotePtrOutput)
}

// DocumentNote represents an SPDX Document Creation Infromation section: https://spdx.github.io/spdx-spec/2-document-creation-information/
type DocumentNoteOutput struct{ *pulumi.OutputState }

func (DocumentNoteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DocumentNote)(nil)).Elem()
}

func (o DocumentNoteOutput) ToDocumentNoteOutput() DocumentNoteOutput {
	return o
}

func (o DocumentNoteOutput) ToDocumentNoteOutputWithContext(ctx context.Context) DocumentNoteOutput {
	return o
}

func (o DocumentNoteOutput) ToDocumentNotePtrOutput() DocumentNotePtrOutput {
	return o.ToDocumentNotePtrOutputWithContext(context.Background())
}

func (o DocumentNoteOutput) ToDocumentNotePtrOutputWithContext(ctx context.Context) DocumentNotePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DocumentNote) *DocumentNote {
		return &v
	}).(DocumentNotePtrOutput)
}

// Compliance with the SPDX specification includes populating the SPDX fields therein with data related to such fields ("SPDX-Metadata")
func (o DocumentNoteOutput) DataLicence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DocumentNote) *string { return v.DataLicence }).(pulumi.StringPtrOutput)
}

// Provide a reference number that can be used to understand how to parse and interpret the rest of the file
func (o DocumentNoteOutput) SpdxVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DocumentNote) *string { return v.SpdxVersion }).(pulumi.StringPtrOutput)
}

type DocumentNotePtrOutput struct{ *pulumi.OutputState }

func (DocumentNotePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DocumentNote)(nil)).Elem()
}

func (o DocumentNotePtrOutput) ToDocumentNotePtrOutput() DocumentNotePtrOutput {
	return o
}

func (o DocumentNotePtrOutput) ToDocumentNotePtrOutputWithContext(ctx context.Context) DocumentNotePtrOutput {
	return o
}

func (o DocumentNotePtrOutput) Elem() DocumentNoteOutput {
	return o.ApplyT(func(v *DocumentNote) DocumentNote {
		if v != nil {
			return *v
		}
		var ret DocumentNote
		return ret
	}).(DocumentNoteOutput)
}

// Compliance with the SPDX specification includes populating the SPDX fields therein with data related to such fields ("SPDX-Metadata")
func (o DocumentNotePtrOutput) DataLicence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DocumentNote) *string {
		if v == nil {
			return nil
		}
		return v.DataLicence
	}).(pulumi.StringPtrOutput)
}

// Provide a reference number that can be used to understand how to parse and interpret the rest of the file
func (o DocumentNotePtrOutput) SpdxVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DocumentNote) *string {
		if v == nil {
			return nil
		}
		return v.SpdxVersion
	}).(pulumi.StringPtrOutput)
}

// DocumentNote represents an SPDX Document Creation Infromation section: https://spdx.github.io/spdx-spec/2-document-creation-information/
type DocumentNoteResponse struct {
	// Compliance with the SPDX specification includes populating the SPDX fields therein with data related to such fields ("SPDX-Metadata")
	DataLicence string `pulumi:"dataLicence"`
	// Provide a reference number that can be used to understand how to parse and interpret the rest of the file
	SpdxVersion string `pulumi:"spdxVersion"`
}

// DocumentNote represents an SPDX Document Creation Infromation section: https://spdx.github.io/spdx-spec/2-document-creation-information/
type DocumentNoteResponseOutput struct{ *pulumi.OutputState }

func (DocumentNoteResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DocumentNoteResponse)(nil)).Elem()
}

func (o DocumentNoteResponseOutput) ToDocumentNoteResponseOutput() DocumentNoteResponseOutput {
	return o
}

func (o DocumentNoteResponseOutput) ToDocumentNoteResponseOutputWithContext(ctx context.Context) DocumentNoteResponseOutput {
	return o
}

// Compliance with the SPDX specification includes populating the SPDX fields therein with data related to such fields ("SPDX-Metadata")
func (o DocumentNoteResponseOutput) DataLicence() pulumi.StringOutput {
	return o.ApplyT(func(v DocumentNoteResponse) string { return v.DataLicence }).(pulumi.StringOutput)
}

// Provide a reference number that can be used to understand how to parse and interpret the rest of the file
func (o DocumentNoteResponseOutput) SpdxVersion() pulumi.StringOutput {
	return o.ApplyT(func(v DocumentNoteResponse) string { return v.SpdxVersion }).(pulumi.StringOutput)
}

// DocumentOccurrence represents an SPDX Document Creation Information section: https://spdx.github.io/spdx-spec/2-document-creation-information/
type DocumentOccurrence struct {
	// Identify when the SPDX file was originally created. The date is to be specified according to combined date and time in UTC format as specified in ISO 8601 standard
	CreateTime *string `pulumi:"createTime"`
	// A field for creators of the SPDX file to provide general comments about the creation of the SPDX file or any other relevant comment not included in the other fields
	CreatorComment *string `pulumi:"creatorComment"`
	// Identify who (or what, in the case of a tool) created the SPDX file. If the SPDX file was created by an individual, indicate the person's name
	Creators []string `pulumi:"creators"`
	// A field for creators of the SPDX file content to provide comments to the consumers of the SPDX document
	DocumentComment *string `pulumi:"documentComment"`
	// Identify any external SPDX documents referenced within this SPDX document
	ExternalDocumentRefs []string `pulumi:"externalDocumentRefs"`
	// Identify the current SPDX document which may be referenced in relationships by other files, packages internally and documents externally
	Id *string `pulumi:"id"`
	// A field for creators of the SPDX file to provide the version of the SPDX License List used when the SPDX file was created
	LicenseListVersion *string `pulumi:"licenseListVersion"`
	// Provide an SPDX document specific namespace as a unique absolute Uniform Resource Identifier (URI) as specified in RFC-3986, with the exception of the ‘#’ delimiter
	Namespace *string `pulumi:"namespace"`
	// Identify name of this document as designated by creator
	Title *string `pulumi:"title"`
}

// DocumentOccurrenceInput is an input type that accepts DocumentOccurrenceArgs and DocumentOccurrenceOutput values.
// You can construct a concrete instance of `DocumentOccurrenceInput` via:
//
//	DocumentOccurrenceArgs{...}
type DocumentOccurrenceInput interface {
	pulumi.Input

	ToDocumentOccurrenceOutput() DocumentOccurrenceOutput
	ToDocumentOccurrenceOutputWithContext(context.Context) DocumentOccurrenceOutput
}

// DocumentOccurrence represents an SPDX Document Creation Information section: https://spdx.github.io/spdx-spec/2-document-creation-information/
type DocumentOccurrenceArgs struct {
	// Identify when the SPDX file was originally created. The date is to be specified according to combined date and time in UTC format as specified in ISO 8601 standard
	CreateTime pulumi.StringPtrInput `pulumi:"createTime"`
	// A field for creators of the SPDX file to provide general comments about the creation of the SPDX file or any other relevant comment not included in the other fields
	CreatorComment pulumi.StringPtrInput `pulumi:"creatorComment"`
	// Identify who (or what, in the case of a tool) created the SPDX file. If the SPDX file was created by an individual, indicate the person's name
	Creators pulumi.StringArrayInput `pulumi:"creators"`
	// A field for creators of the SPDX file content to provide comments to the consumers of the SPDX document
	DocumentComment pulumi.StringPtrInput `pulumi:"documentComment"`
	// Identify any external SPDX documents referenced within this SPDX document
	ExternalDocumentRefs pulumi.StringArrayInput `pulumi:"externalDocumentRefs"`
	// Identify the current SPDX document which may be referenced in relationships by other files, packages internally and documents externally
	Id pulumi.StringPtrInput `pulumi:"id"`
	// A field for creators of the SPDX file to provide the version of the SPDX License List used when the SPDX file was created
	LicenseListVersion pulumi.StringPtrInput `pulumi:"licenseListVersion"`
	// Provide an SPDX document specific namespace as a unique absolute Uniform Resource Identifier (URI) as specified in RFC-3986, with the exception of the ‘#’ delimiter
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Identify name of this document as designated by creator
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (DocumentOccurrenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DocumentOccurrence)(nil)).Elem()
}

func (i DocumentOccurrenceArgs) ToDocumentOccurrenceOutput() DocumentOccurrenceOutput {
	return i.ToDocumentOccurrenceOutputWithContext(context.Background())
}

func (i DocumentOccurrenceArgs) ToDocumentOccurrenceOutputWithContext(ctx context.Context) DocumentOccurrenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentOccurrenceOutput)
}

func (i DocumentOccurrenceArgs) ToDocumentOccurrencePtrOutput() DocumentOccurrencePtrOutput {
	return i.ToDocumentOccurrencePtrOutputWithContext(context.Background())
}

func (i DocumentOccurrenceArgs) ToDocumentOccurrencePtrOutputWithContext(ctx context.Context) DocumentOccurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentOccurrenceOutput).ToDocumentOccurrencePtrOutputWithContext(ctx)
}

// DocumentOccurrencePtrInput is an input type that accepts DocumentOccurrenceArgs, DocumentOccurrencePtr and DocumentOccurrencePtrOutput values.
// You can construct a concrete instance of `DocumentOccurrencePtrInput` via:
//
//	        DocumentOccurrenceArgs{...}
//
//	or:
//
//	        nil
type DocumentOccurrencePtrInput interface {
	pulumi.Input

	ToDocumentOccurrencePtrOutput() DocumentOccurrencePtrOutput
	ToDocumentOccurrencePtrOutputWithContext(context.Context) DocumentOccurrencePtrOutput
}

type documentOccurrencePtrType DocumentOccurrenceArgs

func DocumentOccurrencePtr(v *DocumentOccurrenceArgs) DocumentOccurrencePtrInput {
	return (*documentOccurrencePtrType)(v)
}

func (*documentOccurrencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DocumentOccurrence)(nil)).Elem()
}

func (i *documentOccurrencePtrType) ToDocumentOccurrencePtrOutput() DocumentOccurrencePtrOutput {
	return i.ToDocumentOccurrencePtrOutputWithContext(context.Background())
}

func (i *documentOccurrencePtrType) ToDocumentOccurrencePtrOutputWithContext(ctx context.Context) DocumentOccurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentOccurrencePtrOutput)
}

// DocumentOccurrence represents an SPDX Document Creation Information section: https://spdx.github.io/spdx-spec/2-document-creation-information/
type DocumentOccurrenceOutput struct{ *pulumi.OutputState }

func (DocumentOccurrenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DocumentOccurrence)(nil)).Elem()
}

func (o DocumentOccurrenceOutput) ToDocumentOccurrenceOutput() DocumentOccurrenceOutput {
	return o
}

func (o DocumentOccurrenceOutput) ToDocumentOccurrenceOutputWithContext(ctx context.Context) DocumentOccurrenceOutput {
	return o
}

func (o DocumentOccurrenceOutput) ToDocumentOccurrencePtrOutput() DocumentOccurrencePtrOutput {
	return o.ToDocumentOccurrencePtrOutputWithContext(context.Background())
}

func (o DocumentOccurrenceOutput) ToDocumentOccurrencePtrOutputWithContext(ctx context.Context) DocumentOccurrencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DocumentOccurrence) *DocumentOccurrence {
		return &v
	}).(DocumentOccurrencePtrOutput)
}

// Identify when the SPDX file was originally created. The date is to be specified according to combined date and time in UTC format as specified in ISO 8601 standard
func (o DocumentOccurrenceOutput) CreateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DocumentOccurrence) *string { return v.CreateTime }).(pulumi.StringPtrOutput)
}

// A field for creators of the SPDX file to provide general comments about the creation of the SPDX file or any other relevant comment not included in the other fields
func (o DocumentOccurrenceOutput) CreatorComment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DocumentOccurrence) *string { return v.CreatorComment }).(pulumi.StringPtrOutput)
}

// Identify who (or what, in the case of a tool) created the SPDX file. If the SPDX file was created by an individual, indicate the person's name
func (o DocumentOccurrenceOutput) Creators() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DocumentOccurrence) []string { return v.Creators }).(pulumi.StringArrayOutput)
}

// A field for creators of the SPDX file content to provide comments to the consumers of the SPDX document
func (o DocumentOccurrenceOutput) DocumentComment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DocumentOccurrence) *string { return v.DocumentComment }).(pulumi.StringPtrOutput)
}

// Identify any external SPDX documents referenced within this SPDX document
func (o DocumentOccurrenceOutput) ExternalDocumentRefs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DocumentOccurrence) []string { return v.ExternalDocumentRefs }).(pulumi.StringArrayOutput)
}

// Identify the current SPDX document which may be referenced in relationships by other files, packages internally and documents externally
func (o DocumentOccurrenceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DocumentOccurrence) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A field for creators of the SPDX file to provide the version of the SPDX License List used when the SPDX file was created
func (o DocumentOccurrenceOutput) LicenseListVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DocumentOccurrence) *string { return v.LicenseListVersion }).(pulumi.StringPtrOutput)
}

// Provide an SPDX document specific namespace as a unique absolute Uniform Resource Identifier (URI) as specified in RFC-3986, with the exception of the ‘#’ delimiter
func (o DocumentOccurrenceOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DocumentOccurrence) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Identify name of this document as designated by creator
func (o DocumentOccurrenceOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DocumentOccurrence) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type DocumentOccurrencePtrOutput struct{ *pulumi.OutputState }

func (DocumentOccurrencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DocumentOccurrence)(nil)).Elem()
}

func (o DocumentOccurrencePtrOutput) ToDocumentOccurrencePtrOutput() DocumentOccurrencePtrOutput {
	return o
}

func (o DocumentOccurrencePtrOutput) ToDocumentOccurrencePtrOutputWithContext(ctx context.Context) DocumentOccurrencePtrOutput {
	return o
}

func (o DocumentOccurrencePtrOutput) Elem() DocumentOccurrenceOutput {
	return o.ApplyT(func(v *DocumentOccurrence) DocumentOccurrence {
		if v != nil {
			return *v
		}
		var ret DocumentOccurrence
		return ret
	}).(DocumentOccurrenceOutput)
}

// Identify when the SPDX file was originally created. The date is to be specified according to combined date and time in UTC format as specified in ISO 8601 standard
func (o DocumentOccurrencePtrOutput) CreateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DocumentOccurrence) *string {
		if v == nil {
			return nil
		}
		return v.CreateTime
	}).(pulumi.StringPtrOutput)
}

// A field for creators of the SPDX file to provide general comments about the creation of the SPDX file or any other relevant comment not included in the other fields
func (o DocumentOccurrencePtrOutput) CreatorComment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DocumentOccurrence) *string {
		if v == nil {
			return nil
		}
		return v.CreatorComment
	}).(pulumi.StringPtrOutput)
}

// Identify who (or what, in the case of a tool) created the SPDX file. If the SPDX file was created by an individual, indicate the person's name
func (o DocumentOccurrencePtrOutput) Creators() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DocumentOccurrence) []string {
		if v == nil {
			return nil
		}
		return v.Creators
	}).(pulumi.StringArrayOutput)
}

// A field for creators of the SPDX file content to provide comments to the consumers of the SPDX document
func (o DocumentOccurrencePtrOutput) DocumentComment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DocumentOccurrence) *string {
		if v == nil {
			return nil
		}
		return v.DocumentComment
	}).(pulumi.StringPtrOutput)
}

// Identify any external SPDX documents referenced within this SPDX document
func (o DocumentOccurrencePtrOutput) ExternalDocumentRefs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DocumentOccurrence) []string {
		if v == nil {
			return nil
		}
		return v.ExternalDocumentRefs
	}).(pulumi.StringArrayOutput)
}

// Identify the current SPDX document which may be referenced in relationships by other files, packages internally and documents externally
func (o DocumentOccurrencePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DocumentOccurrence) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// A field for creators of the SPDX file to provide the version of the SPDX License List used when the SPDX file was created
func (o DocumentOccurrencePtrOutput) LicenseListVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DocumentOccurrence) *string {
		if v == nil {
			return nil
		}
		return v.LicenseListVersion
	}).(pulumi.StringPtrOutput)
}

// Provide an SPDX document specific namespace as a unique absolute Uniform Resource Identifier (URI) as specified in RFC-3986, with the exception of the ‘#’ delimiter
func (o DocumentOccurrencePtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DocumentOccurrence) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Identify name of this document as designated by creator
func (o DocumentOccurrencePtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DocumentOccurrence) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// DocumentOccurrence represents an SPDX Document Creation Information section: https://spdx.github.io/spdx-spec/2-document-creation-information/
type DocumentOccurrenceResponse struct {
	// Identify when the SPDX file was originally created. The date is to be specified according to combined date and time in UTC format as specified in ISO 8601 standard
	CreateTime string `pulumi:"createTime"`
	// A field for creators of the SPDX file to provide general comments about the creation of the SPDX file or any other relevant comment not included in the other fields
	CreatorComment string `pulumi:"creatorComment"`
	// Identify who (or what, in the case of a tool) created the SPDX file. If the SPDX file was created by an individual, indicate the person's name
	Creators []string `pulumi:"creators"`
	// A field for creators of the SPDX file content to provide comments to the consumers of the SPDX document
	DocumentComment string `pulumi:"documentComment"`
	// Identify any external SPDX documents referenced within this SPDX document
	ExternalDocumentRefs []string `pulumi:"externalDocumentRefs"`
	// A field for creators of the SPDX file to provide the version of the SPDX License List used when the SPDX file was created
	LicenseListVersion string `pulumi:"licenseListVersion"`
	// Provide an SPDX document specific namespace as a unique absolute Uniform Resource Identifier (URI) as specified in RFC-3986, with the exception of the ‘#’ delimiter
	Namespace string `pulumi:"namespace"`
	// Identify name of this document as designated by creator
	Title string `pulumi:"title"`
}

// DocumentOccurrence represents an SPDX Document Creation Information section: https://spdx.github.io/spdx-spec/2-document-creation-information/
type DocumentOccurrenceResponseOutput struct{ *pulumi.OutputState }

func (DocumentOccurrenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DocumentOccurrenceResponse)(nil)).Elem()
}

func (o DocumentOccurrenceResponseOutput) ToDocumentOccurrenceResponseOutput() DocumentOccurrenceResponseOutput {
	return o
}

func (o DocumentOccurrenceResponseOutput) ToDocumentOccurrenceResponseOutputWithContext(ctx context.Context) DocumentOccurrenceResponseOutput {
	return o
}

// Identify when the SPDX file was originally created. The date is to be specified according to combined date and time in UTC format as specified in ISO 8601 standard
func (o DocumentOccurrenceResponseOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v DocumentOccurrenceResponse) string { return v.CreateTime }).(pulumi.StringOutput)
}

// A field for creators of the SPDX file to provide general comments about the creation of the SPDX file or any other relevant comment not included in the other fields
func (o DocumentOccurrenceResponseOutput) CreatorComment() pulumi.StringOutput {
	return o.ApplyT(func(v DocumentOccurrenceResponse) string { return v.CreatorComment }).(pulumi.StringOutput)
}

// Identify who (or what, in the case of a tool) created the SPDX file. If the SPDX file was created by an individual, indicate the person's name
func (o DocumentOccurrenceResponseOutput) Creators() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DocumentOccurrenceResponse) []string { return v.Creators }).(pulumi.StringArrayOutput)
}

// A field for creators of the SPDX file content to provide comments to the consumers of the SPDX document
func (o DocumentOccurrenceResponseOutput) DocumentComment() pulumi.StringOutput {
	return o.ApplyT(func(v DocumentOccurrenceResponse) string { return v.DocumentComment }).(pulumi.StringOutput)
}

// Identify any external SPDX documents referenced within this SPDX document
func (o DocumentOccurrenceResponseOutput) ExternalDocumentRefs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DocumentOccurrenceResponse) []string { return v.ExternalDocumentRefs }).(pulumi.StringArrayOutput)
}

// A field for creators of the SPDX file to provide the version of the SPDX License List used when the SPDX file was created
func (o DocumentOccurrenceResponseOutput) LicenseListVersion() pulumi.StringOutput {
	return o.ApplyT(func(v DocumentOccurrenceResponse) string { return v.LicenseListVersion }).(pulumi.StringOutput)
}

// Provide an SPDX document specific namespace as a unique absolute Uniform Resource Identifier (URI) as specified in RFC-3986, with the exception of the ‘#’ delimiter
func (o DocumentOccurrenceResponseOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v DocumentOccurrenceResponse) string { return v.Namespace }).(pulumi.StringOutput)
}

// Identify name of this document as designated by creator
func (o DocumentOccurrenceResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v DocumentOccurrenceResponse) string { return v.Title }).(pulumi.StringOutput)
}

// MUST match https://github.com/secure-systems-lab/dsse/blob/master/envelope.proto. An authenticated message of arbitrary type.
type Envelope struct {
	// The bytes being signed
	Payload *string `pulumi:"payload"`
	// The type of payload being signed
	PayloadType *string `pulumi:"payloadType"`
	// The signatures over the payload
	Signatures []EnvelopeSignature `pulumi:"signatures"`
}

// EnvelopeInput is an input type that accepts EnvelopeArgs and EnvelopeOutput values.
// You can construct a concrete instance of `EnvelopeInput` via:
//
//	EnvelopeArgs{...}
type EnvelopeInput interface {
	pulumi.Input

	ToEnvelopeOutput() EnvelopeOutput
	ToEnvelopeOutputWithContext(context.Context) EnvelopeOutput
}

// MUST match https://github.com/secure-systems-lab/dsse/blob/master/envelope.proto. An authenticated message of arbitrary type.
type EnvelopeArgs struct {
	// The bytes being signed
	Payload pulumi.StringPtrInput `pulumi:"payload"`
	// The type of payload being signed
	PayloadType pulumi.StringPtrInput `pulumi:"payloadType"`
	// The signatures over the payload
	Signatures EnvelopeSignatureArrayInput `pulumi:"signatures"`
}

func (EnvelopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Envelope)(nil)).Elem()
}

func (i EnvelopeArgs) ToEnvelopeOutput() EnvelopeOutput {
	return i.ToEnvelopeOutputWithContext(context.Background())
}

func (i EnvelopeArgs) ToEnvelopeOutputWithContext(ctx context.Context) EnvelopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvelopeOutput)
}

func (i EnvelopeArgs) ToEnvelopePtrOutput() EnvelopePtrOutput {
	return i.ToEnvelopePtrOutputWithContext(context.Background())
}

func (i EnvelopeArgs) ToEnvelopePtrOutputWithContext(ctx context.Context) EnvelopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvelopeOutput).ToEnvelopePtrOutputWithContext(ctx)
}

// EnvelopePtrInput is an input type that accepts EnvelopeArgs, EnvelopePtr and EnvelopePtrOutput values.
// You can construct a concrete instance of `EnvelopePtrInput` via:
//
//	        EnvelopeArgs{...}
//
//	or:
//
//	        nil
type EnvelopePtrInput interface {
	pulumi.Input

	ToEnvelopePtrOutput() EnvelopePtrOutput
	ToEnvelopePtrOutputWithContext(context.Context) EnvelopePtrOutput
}

type envelopePtrType EnvelopeArgs

func EnvelopePtr(v *EnvelopeArgs) EnvelopePtrInput {
	return (*envelopePtrType)(v)
}

func (*envelopePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Envelope)(nil)).Elem()
}

func (i *envelopePtrType) ToEnvelopePtrOutput() EnvelopePtrOutput {
	return i.ToEnvelopePtrOutputWithContext(context.Background())
}

func (i *envelopePtrType) ToEnvelopePtrOutputWithContext(ctx context.Context) EnvelopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvelopePtrOutput)
}

// MUST match https://github.com/secure-systems-lab/dsse/blob/master/envelope.proto. An authenticated message of arbitrary type.
type EnvelopeOutput struct{ *pulumi.OutputState }

func (EnvelopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Envelope)(nil)).Elem()
}

func (o EnvelopeOutput) ToEnvelopeOutput() EnvelopeOutput {
	return o
}

func (o EnvelopeOutput) ToEnvelopeOutputWithContext(ctx context.Context) EnvelopeOutput {
	return o
}

func (o EnvelopeOutput) ToEnvelopePtrOutput() EnvelopePtrOutput {
	return o.ToEnvelopePtrOutputWithContext(context.Background())
}

func (o EnvelopeOutput) ToEnvelopePtrOutputWithContext(ctx context.Context) EnvelopePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Envelope) *Envelope {
		return &v
	}).(EnvelopePtrOutput)
}

// The bytes being signed
func (o EnvelopeOutput) Payload() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Envelope) *string { return v.Payload }).(pulumi.StringPtrOutput)
}

// The type of payload being signed
func (o EnvelopeOutput) PayloadType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Envelope) *string { return v.PayloadType }).(pulumi.StringPtrOutput)
}

// The signatures over the payload
func (o EnvelopeOutput) Signatures() EnvelopeSignatureArrayOutput {
	return o.ApplyT(func(v Envelope) []EnvelopeSignature { return v.Signatures }).(EnvelopeSignatureArrayOutput)
}

type EnvelopePtrOutput struct{ *pulumi.OutputState }

func (EnvelopePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Envelope)(nil)).Elem()
}

func (o EnvelopePtrOutput) ToEnvelopePtrOutput() EnvelopePtrOutput {
	return o
}

func (o EnvelopePtrOutput) ToEnvelopePtrOutputWithContext(ctx context.Context) EnvelopePtrOutput {
	return o
}

func (o EnvelopePtrOutput) Elem() EnvelopeOutput {
	return o.ApplyT(func(v *Envelope) Envelope {
		if v != nil {
			return *v
		}
		var ret Envelope
		return ret
	}).(EnvelopeOutput)
}

// The bytes being signed
func (o EnvelopePtrOutput) Payload() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Envelope) *string {
		if v == nil {
			return nil
		}
		return v.Payload
	}).(pulumi.StringPtrOutput)
}

// The type of payload being signed
func (o EnvelopePtrOutput) PayloadType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Envelope) *string {
		if v == nil {
			return nil
		}
		return v.PayloadType
	}).(pulumi.StringPtrOutput)
}

// The signatures over the payload
func (o EnvelopePtrOutput) Signatures() EnvelopeSignatureArrayOutput {
	return o.ApplyT(func(v *Envelope) []EnvelopeSignature {
		if v == nil {
			return nil
		}
		return v.Signatures
	}).(EnvelopeSignatureArrayOutput)
}

// MUST match https://github.com/secure-systems-lab/dsse/blob/master/envelope.proto. An authenticated message of arbitrary type.
type EnvelopeResponse struct {
	// The bytes being signed
	Payload string `pulumi:"payload"`
	// The type of payload being signed
	PayloadType string `pulumi:"payloadType"`
	// The signatures over the payload
	Signatures []EnvelopeSignatureResponse `pulumi:"signatures"`
}

// MUST match https://github.com/secure-systems-lab/dsse/blob/master/envelope.proto. An authenticated message of arbitrary type.
type EnvelopeResponseOutput struct{ *pulumi.OutputState }

func (EnvelopeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvelopeResponse)(nil)).Elem()
}

func (o EnvelopeResponseOutput) ToEnvelopeResponseOutput() EnvelopeResponseOutput {
	return o
}

func (o EnvelopeResponseOutput) ToEnvelopeResponseOutputWithContext(ctx context.Context) EnvelopeResponseOutput {
	return o
}

// The bytes being signed
func (o EnvelopeResponseOutput) Payload() pulumi.StringOutput {
	return o.ApplyT(func(v EnvelopeResponse) string { return v.Payload }).(pulumi.StringOutput)
}

// The type of payload being signed
func (o EnvelopeResponseOutput) PayloadType() pulumi.StringOutput {
	return o.ApplyT(func(v EnvelopeResponse) string { return v.PayloadType }).(pulumi.StringOutput)
}

// The signatures over the payload
func (o EnvelopeResponseOutput) Signatures() EnvelopeSignatureResponseArrayOutput {
	return o.ApplyT(func(v EnvelopeResponse) []EnvelopeSignatureResponse { return v.Signatures }).(EnvelopeSignatureResponseArrayOutput)
}

// A DSSE signature
type EnvelopeSignature struct {
	// A reference id to the key being used for signing
	Keyid *string `pulumi:"keyid"`
	// The signature itself
	Sig *string `pulumi:"sig"`
}

// EnvelopeSignatureInput is an input type that accepts EnvelopeSignatureArgs and EnvelopeSignatureOutput values.
// You can construct a concrete instance of `EnvelopeSignatureInput` via:
//
//	EnvelopeSignatureArgs{...}
type EnvelopeSignatureInput interface {
	pulumi.Input

	ToEnvelopeSignatureOutput() EnvelopeSignatureOutput
	ToEnvelopeSignatureOutputWithContext(context.Context) EnvelopeSignatureOutput
}

// A DSSE signature
type EnvelopeSignatureArgs struct {
	// A reference id to the key being used for signing
	Keyid pulumi.StringPtrInput `pulumi:"keyid"`
	// The signature itself
	Sig pulumi.StringPtrInput `pulumi:"sig"`
}

func (EnvelopeSignatureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvelopeSignature)(nil)).Elem()
}

func (i EnvelopeSignatureArgs) ToEnvelopeSignatureOutput() EnvelopeSignatureOutput {
	return i.ToEnvelopeSignatureOutputWithContext(context.Background())
}

func (i EnvelopeSignatureArgs) ToEnvelopeSignatureOutputWithContext(ctx context.Context) EnvelopeSignatureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvelopeSignatureOutput)
}

// EnvelopeSignatureArrayInput is an input type that accepts EnvelopeSignatureArray and EnvelopeSignatureArrayOutput values.
// You can construct a concrete instance of `EnvelopeSignatureArrayInput` via:
//
//	EnvelopeSignatureArray{ EnvelopeSignatureArgs{...} }
type EnvelopeSignatureArrayInput interface {
	pulumi.Input

	ToEnvelopeSignatureArrayOutput() EnvelopeSignatureArrayOutput
	ToEnvelopeSignatureArrayOutputWithContext(context.Context) EnvelopeSignatureArrayOutput
}

type EnvelopeSignatureArray []EnvelopeSignatureInput

func (EnvelopeSignatureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvelopeSignature)(nil)).Elem()
}

func (i EnvelopeSignatureArray) ToEnvelopeSignatureArrayOutput() EnvelopeSignatureArrayOutput {
	return i.ToEnvelopeSignatureArrayOutputWithContext(context.Background())
}

func (i EnvelopeSignatureArray) ToEnvelopeSignatureArrayOutputWithContext(ctx context.Context) EnvelopeSignatureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvelopeSignatureArrayOutput)
}

// A DSSE signature
type EnvelopeSignatureOutput struct{ *pulumi.OutputState }

func (EnvelopeSignatureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvelopeSignature)(nil)).Elem()
}

func (o EnvelopeSignatureOutput) ToEnvelopeSignatureOutput() EnvelopeSignatureOutput {
	return o
}

func (o EnvelopeSignatureOutput) ToEnvelopeSignatureOutputWithContext(ctx context.Context) EnvelopeSignatureOutput {
	return o
}

// A reference id to the key being used for signing
func (o EnvelopeSignatureOutput) Keyid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvelopeSignature) *string { return v.Keyid }).(pulumi.StringPtrOutput)
}

// The signature itself
func (o EnvelopeSignatureOutput) Sig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvelopeSignature) *string { return v.Sig }).(pulumi.StringPtrOutput)
}

type EnvelopeSignatureArrayOutput struct{ *pulumi.OutputState }

func (EnvelopeSignatureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvelopeSignature)(nil)).Elem()
}

func (o EnvelopeSignatureArrayOutput) ToEnvelopeSignatureArrayOutput() EnvelopeSignatureArrayOutput {
	return o
}

func (o EnvelopeSignatureArrayOutput) ToEnvelopeSignatureArrayOutputWithContext(ctx context.Context) EnvelopeSignatureArrayOutput {
	return o
}

func (o EnvelopeSignatureArrayOutput) Index(i pulumi.IntInput) EnvelopeSignatureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnvelopeSignature {
		return vs[0].([]EnvelopeSignature)[vs[1].(int)]
	}).(EnvelopeSignatureOutput)
}

// A DSSE signature
type EnvelopeSignatureResponse struct {
	// A reference id to the key being used for signing
	Keyid string `pulumi:"keyid"`
	// The signature itself
	Sig string `pulumi:"sig"`
}

// A DSSE signature
type EnvelopeSignatureResponseOutput struct{ *pulumi.OutputState }

func (EnvelopeSignatureResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvelopeSignatureResponse)(nil)).Elem()
}

func (o EnvelopeSignatureResponseOutput) ToEnvelopeSignatureResponseOutput() EnvelopeSignatureResponseOutput {
	return o
}

func (o EnvelopeSignatureResponseOutput) ToEnvelopeSignatureResponseOutputWithContext(ctx context.Context) EnvelopeSignatureResponseOutput {
	return o
}

// A reference id to the key being used for signing
func (o EnvelopeSignatureResponseOutput) Keyid() pulumi.StringOutput {
	return o.ApplyT(func(v EnvelopeSignatureResponse) string { return v.Keyid }).(pulumi.StringOutput)
}

// The signature itself
func (o EnvelopeSignatureResponseOutput) Sig() pulumi.StringOutput {
	return o.ApplyT(func(v EnvelopeSignatureResponse) string { return v.Sig }).(pulumi.StringOutput)
}

type EnvelopeSignatureResponseArrayOutput struct{ *pulumi.OutputState }

func (EnvelopeSignatureResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvelopeSignatureResponse)(nil)).Elem()
}

func (o EnvelopeSignatureResponseArrayOutput) ToEnvelopeSignatureResponseArrayOutput() EnvelopeSignatureResponseArrayOutput {
	return o
}

func (o EnvelopeSignatureResponseArrayOutput) ToEnvelopeSignatureResponseArrayOutputWithContext(ctx context.Context) EnvelopeSignatureResponseArrayOutput {
	return o
}

func (o EnvelopeSignatureResponseArrayOutput) Index(i pulumi.IntInput) EnvelopeSignatureResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnvelopeSignatureResponse {
		return vs[0].([]EnvelopeSignatureResponse)[vs[1].(int)]
	}).(EnvelopeSignatureResponseOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//	ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//	        ExprArgs{...}
//
//	or:
//
//	        nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr {
		if v != nil {
			return *v
		}
		var ret Expr
		return ret
	}).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponse struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title string `pulumi:"title"`
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseOutput struct{ *pulumi.OutputState }

func (ExprResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (o ExprResponseOutput) ToExprResponseOutput() ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return o
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Title }).(pulumi.StringOutput)
}

// An External Reference allows a Package to reference an external source of additional information, metadata, enumerations, asset identifiers, or downloadable content believed to be relevant to the Package
type ExternalRef struct {
	// An External Reference allows a Package to reference an external source of additional information, metadata, enumerations, asset identifiers, or downloadable content believed to be relevant to the Package
	Category *ExternalRefCategory `pulumi:"category"`
	// Human-readable information about the purpose and target of the reference
	Comment *string `pulumi:"comment"`
	// The unique string with no spaces necessary to access the package-specific information, metadata, or content within the target location
	Locator *string `pulumi:"locator"`
	// Type of category (e.g. 'npm' for the PACKAGE_MANAGER category)
	Type *string `pulumi:"type"`
}

// ExternalRefInput is an input type that accepts ExternalRefArgs and ExternalRefOutput values.
// You can construct a concrete instance of `ExternalRefInput` via:
//
//	ExternalRefArgs{...}
type ExternalRefInput interface {
	pulumi.Input

	ToExternalRefOutput() ExternalRefOutput
	ToExternalRefOutputWithContext(context.Context) ExternalRefOutput
}

// An External Reference allows a Package to reference an external source of additional information, metadata, enumerations, asset identifiers, or downloadable content believed to be relevant to the Package
type ExternalRefArgs struct {
	// An External Reference allows a Package to reference an external source of additional information, metadata, enumerations, asset identifiers, or downloadable content believed to be relevant to the Package
	Category ExternalRefCategoryPtrInput `pulumi:"category"`
	// Human-readable information about the purpose and target of the reference
	Comment pulumi.StringPtrInput `pulumi:"comment"`
	// The unique string with no spaces necessary to access the package-specific information, metadata, or content within the target location
	Locator pulumi.StringPtrInput `pulumi:"locator"`
	// Type of category (e.g. 'npm' for the PACKAGE_MANAGER category)
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ExternalRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalRef)(nil)).Elem()
}

func (i ExternalRefArgs) ToExternalRefOutput() ExternalRefOutput {
	return i.ToExternalRefOutputWithContext(context.Background())
}

func (i ExternalRefArgs) ToExternalRefOutputWithContext(ctx context.Context) ExternalRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalRefOutput)
}

// ExternalRefArrayInput is an input type that accepts ExternalRefArray and ExternalRefArrayOutput values.
// You can construct a concrete instance of `ExternalRefArrayInput` via:
//
//	ExternalRefArray{ ExternalRefArgs{...} }
type ExternalRefArrayInput interface {
	pulumi.Input

	ToExternalRefArrayOutput() ExternalRefArrayOutput
	ToExternalRefArrayOutputWithContext(context.Context) ExternalRefArrayOutput
}

type ExternalRefArray []ExternalRefInput

func (ExternalRefArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExternalRef)(nil)).Elem()
}

func (i ExternalRefArray) ToExternalRefArrayOutput() ExternalRefArrayOutput {
	return i.ToExternalRefArrayOutputWithContext(context.Background())
}

func (i ExternalRefArray) ToExternalRefArrayOutputWithContext(ctx context.Context) ExternalRefArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalRefArrayOutput)
}

// An External Reference allows a Package to reference an external source of additional information, metadata, enumerations, asset identifiers, or downloadable content believed to be relevant to the Package
type ExternalRefOutput struct{ *pulumi.OutputState }

func (ExternalRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalRef)(nil)).Elem()
}

func (o ExternalRefOutput) ToExternalRefOutput() ExternalRefOutput {
	return o
}

func (o ExternalRefOutput) ToExternalRefOutputWithContext(ctx context.Context) ExternalRefOutput {
	return o
}

// An External Reference allows a Package to reference an external source of additional information, metadata, enumerations, asset identifiers, or downloadable content believed to be relevant to the Package
func (o ExternalRefOutput) Category() ExternalRefCategoryPtrOutput {
	return o.ApplyT(func(v ExternalRef) *ExternalRefCategory { return v.Category }).(ExternalRefCategoryPtrOutput)
}

// Human-readable information about the purpose and target of the reference
func (o ExternalRefOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExternalRef) *string { return v.Comment }).(pulumi.StringPtrOutput)
}

// The unique string with no spaces necessary to access the package-specific information, metadata, or content within the target location
func (o ExternalRefOutput) Locator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExternalRef) *string { return v.Locator }).(pulumi.StringPtrOutput)
}

// Type of category (e.g. 'npm' for the PACKAGE_MANAGER category)
func (o ExternalRefOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExternalRef) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ExternalRefArrayOutput struct{ *pulumi.OutputState }

func (ExternalRefArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExternalRef)(nil)).Elem()
}

func (o ExternalRefArrayOutput) ToExternalRefArrayOutput() ExternalRefArrayOutput {
	return o
}

func (o ExternalRefArrayOutput) ToExternalRefArrayOutputWithContext(ctx context.Context) ExternalRefArrayOutput {
	return o
}

func (o ExternalRefArrayOutput) Index(i pulumi.IntInput) ExternalRefOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExternalRef {
		return vs[0].([]ExternalRef)[vs[1].(int)]
	}).(ExternalRefOutput)
}

// An External Reference allows a Package to reference an external source of additional information, metadata, enumerations, asset identifiers, or downloadable content believed to be relevant to the Package
type ExternalRefResponse struct {
	// An External Reference allows a Package to reference an external source of additional information, metadata, enumerations, asset identifiers, or downloadable content believed to be relevant to the Package
	Category string `pulumi:"category"`
	// Human-readable information about the purpose and target of the reference
	Comment string `pulumi:"comment"`
	// The unique string with no spaces necessary to access the package-specific information, metadata, or content within the target location
	Locator string `pulumi:"locator"`
	// Type of category (e.g. 'npm' for the PACKAGE_MANAGER category)
	Type string `pulumi:"type"`
}

// An External Reference allows a Package to reference an external source of additional information, metadata, enumerations, asset identifiers, or downloadable content believed to be relevant to the Package
type ExternalRefResponseOutput struct{ *pulumi.OutputState }

func (ExternalRefResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalRefResponse)(nil)).Elem()
}

func (o ExternalRefResponseOutput) ToExternalRefResponseOutput() ExternalRefResponseOutput {
	return o
}

func (o ExternalRefResponseOutput) ToExternalRefResponseOutputWithContext(ctx context.Context) ExternalRefResponseOutput {
	return o
}

// An External Reference allows a Package to reference an external source of additional information, metadata, enumerations, asset identifiers, or downloadable content believed to be relevant to the Package
func (o ExternalRefResponseOutput) Category() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalRefResponse) string { return v.Category }).(pulumi.StringOutput)
}

// Human-readable information about the purpose and target of the reference
func (o ExternalRefResponseOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalRefResponse) string { return v.Comment }).(pulumi.StringOutput)
}

// The unique string with no spaces necessary to access the package-specific information, metadata, or content within the target location
func (o ExternalRefResponseOutput) Locator() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalRefResponse) string { return v.Locator }).(pulumi.StringOutput)
}

// Type of category (e.g. 'npm' for the PACKAGE_MANAGER category)
func (o ExternalRefResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalRefResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ExternalRefResponseArrayOutput struct{ *pulumi.OutputState }

func (ExternalRefResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExternalRefResponse)(nil)).Elem()
}

func (o ExternalRefResponseArrayOutput) ToExternalRefResponseArrayOutput() ExternalRefResponseArrayOutput {
	return o
}

func (o ExternalRefResponseArrayOutput) ToExternalRefResponseArrayOutputWithContext(ctx context.Context) ExternalRefResponseArrayOutput {
	return o
}

func (o ExternalRefResponseArrayOutput) Index(i pulumi.IntInput) ExternalRefResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExternalRefResponse {
		return vs[0].([]ExternalRefResponse)[vs[1].(int)]
	}).(ExternalRefResponseOutput)
}

// Container message for hashes of byte content of files, used in Source messages to verify integrity of source input to the build.
type FileHashes struct {
	// Collection of file hashes.
	FileHash []Hash `pulumi:"fileHash"`
}

// FileHashesInput is an input type that accepts FileHashesArgs and FileHashesOutput values.
// You can construct a concrete instance of `FileHashesInput` via:
//
//	FileHashesArgs{...}
type FileHashesInput interface {
	pulumi.Input

	ToFileHashesOutput() FileHashesOutput
	ToFileHashesOutputWithContext(context.Context) FileHashesOutput
}

// Container message for hashes of byte content of files, used in Source messages to verify integrity of source input to the build.
type FileHashesArgs struct {
	// Collection of file hashes.
	FileHash HashArrayInput `pulumi:"fileHash"`
}

func (FileHashesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileHashes)(nil)).Elem()
}

func (i FileHashesArgs) ToFileHashesOutput() FileHashesOutput {
	return i.ToFileHashesOutputWithContext(context.Background())
}

func (i FileHashesArgs) ToFileHashesOutputWithContext(ctx context.Context) FileHashesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileHashesOutput)
}

func (i FileHashesArgs) ToFileHashesPtrOutput() FileHashesPtrOutput {
	return i.ToFileHashesPtrOutputWithContext(context.Background())
}

func (i FileHashesArgs) ToFileHashesPtrOutputWithContext(ctx context.Context) FileHashesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileHashesOutput).ToFileHashesPtrOutputWithContext(ctx)
}

// FileHashesPtrInput is an input type that accepts FileHashesArgs, FileHashesPtr and FileHashesPtrOutput values.
// You can construct a concrete instance of `FileHashesPtrInput` via:
//
//	        FileHashesArgs{...}
//
//	or:
//
//	        nil
type FileHashesPtrInput interface {
	pulumi.Input

	ToFileHashesPtrOutput() FileHashesPtrOutput
	ToFileHashesPtrOutputWithContext(context.Context) FileHashesPtrOutput
}

type fileHashesPtrType FileHashesArgs

func FileHashesPtr(v *FileHashesArgs) FileHashesPtrInput {
	return (*fileHashesPtrType)(v)
}

func (*fileHashesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FileHashes)(nil)).Elem()
}

func (i *fileHashesPtrType) ToFileHashesPtrOutput() FileHashesPtrOutput {
	return i.ToFileHashesPtrOutputWithContext(context.Background())
}

func (i *fileHashesPtrType) ToFileHashesPtrOutputWithContext(ctx context.Context) FileHashesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileHashesPtrOutput)
}

// Container message for hashes of byte content of files, used in Source messages to verify integrity of source input to the build.
type FileHashesOutput struct{ *pulumi.OutputState }

func (FileHashesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileHashes)(nil)).Elem()
}

func (o FileHashesOutput) ToFileHashesOutput() FileHashesOutput {
	return o
}

func (o FileHashesOutput) ToFileHashesOutputWithContext(ctx context.Context) FileHashesOutput {
	return o
}

func (o FileHashesOutput) ToFileHashesPtrOutput() FileHashesPtrOutput {
	return o.ToFileHashesPtrOutputWithContext(context.Background())
}

func (o FileHashesOutput) ToFileHashesPtrOutputWithContext(ctx context.Context) FileHashesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FileHashes) *FileHashes {
		return &v
	}).(FileHashesPtrOutput)
}

// Collection of file hashes.
func (o FileHashesOutput) FileHash() HashArrayOutput {
	return o.ApplyT(func(v FileHashes) []Hash { return v.FileHash }).(HashArrayOutput)
}

type FileHashesPtrOutput struct{ *pulumi.OutputState }

func (FileHashesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileHashes)(nil)).Elem()
}

func (o FileHashesPtrOutput) ToFileHashesPtrOutput() FileHashesPtrOutput {
	return o
}

func (o FileHashesPtrOutput) ToFileHashesPtrOutputWithContext(ctx context.Context) FileHashesPtrOutput {
	return o
}

func (o FileHashesPtrOutput) Elem() FileHashesOutput {
	return o.ApplyT(func(v *FileHashes) FileHashes {
		if v != nil {
			return *v
		}
		var ret FileHashes
		return ret
	}).(FileHashesOutput)
}

// Collection of file hashes.
func (o FileHashesPtrOutput) FileHash() HashArrayOutput {
	return o.ApplyT(func(v *FileHashes) []Hash {
		if v == nil {
			return nil
		}
		return v.FileHash
	}).(HashArrayOutput)
}

// Container message for hashes of byte content of files, used in Source messages to verify integrity of source input to the build.
type FileHashesResponse struct {
	// Collection of file hashes.
	FileHash []HashResponse `pulumi:"fileHash"`
}

// Container message for hashes of byte content of files, used in Source messages to verify integrity of source input to the build.
type FileHashesResponseOutput struct{ *pulumi.OutputState }

func (FileHashesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileHashesResponse)(nil)).Elem()
}

func (o FileHashesResponseOutput) ToFileHashesResponseOutput() FileHashesResponseOutput {
	return o
}

func (o FileHashesResponseOutput) ToFileHashesResponseOutputWithContext(ctx context.Context) FileHashesResponseOutput {
	return o
}

// Collection of file hashes.
func (o FileHashesResponseOutput) FileHash() HashResponseArrayOutput {
	return o.ApplyT(func(v FileHashesResponse) []HashResponse { return v.FileHash }).(HashResponseArrayOutput)
}

// Indicates the location at which a package was found.
type FileLocation struct {
	// For jars that are contained inside .war files, this filepath can indicate the path to war file combined with the path to jar file.
	FilePath *string `pulumi:"filePath"`
}

// FileLocationInput is an input type that accepts FileLocationArgs and FileLocationOutput values.
// You can construct a concrete instance of `FileLocationInput` via:
//
//	FileLocationArgs{...}
type FileLocationInput interface {
	pulumi.Input

	ToFileLocationOutput() FileLocationOutput
	ToFileLocationOutputWithContext(context.Context) FileLocationOutput
}

// Indicates the location at which a package was found.
type FileLocationArgs struct {
	// For jars that are contained inside .war files, this filepath can indicate the path to war file combined with the path to jar file.
	FilePath pulumi.StringPtrInput `pulumi:"filePath"`
}

func (FileLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileLocation)(nil)).Elem()
}

func (i FileLocationArgs) ToFileLocationOutput() FileLocationOutput {
	return i.ToFileLocationOutputWithContext(context.Background())
}

func (i FileLocationArgs) ToFileLocationOutputWithContext(ctx context.Context) FileLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileLocationOutput)
}

// FileLocationArrayInput is an input type that accepts FileLocationArray and FileLocationArrayOutput values.
// You can construct a concrete instance of `FileLocationArrayInput` via:
//
//	FileLocationArray{ FileLocationArgs{...} }
type FileLocationArrayInput interface {
	pulumi.Input

	ToFileLocationArrayOutput() FileLocationArrayOutput
	ToFileLocationArrayOutputWithContext(context.Context) FileLocationArrayOutput
}

type FileLocationArray []FileLocationInput

func (FileLocationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FileLocation)(nil)).Elem()
}

func (i FileLocationArray) ToFileLocationArrayOutput() FileLocationArrayOutput {
	return i.ToFileLocationArrayOutputWithContext(context.Background())
}

func (i FileLocationArray) ToFileLocationArrayOutputWithContext(ctx context.Context) FileLocationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileLocationArrayOutput)
}

// Indicates the location at which a package was found.
type FileLocationOutput struct{ *pulumi.OutputState }

func (FileLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileLocation)(nil)).Elem()
}

func (o FileLocationOutput) ToFileLocationOutput() FileLocationOutput {
	return o
}

func (o FileLocationOutput) ToFileLocationOutputWithContext(ctx context.Context) FileLocationOutput {
	return o
}

// For jars that are contained inside .war files, this filepath can indicate the path to war file combined with the path to jar file.
func (o FileLocationOutput) FilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileLocation) *string { return v.FilePath }).(pulumi.StringPtrOutput)
}

type FileLocationArrayOutput struct{ *pulumi.OutputState }

func (FileLocationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FileLocation)(nil)).Elem()
}

func (o FileLocationArrayOutput) ToFileLocationArrayOutput() FileLocationArrayOutput {
	return o
}

func (o FileLocationArrayOutput) ToFileLocationArrayOutputWithContext(ctx context.Context) FileLocationArrayOutput {
	return o
}

func (o FileLocationArrayOutput) Index(i pulumi.IntInput) FileLocationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FileLocation {
		return vs[0].([]FileLocation)[vs[1].(int)]
	}).(FileLocationOutput)
}

// Indicates the location at which a package was found.
type FileLocationResponse struct {
	// For jars that are contained inside .war files, this filepath can indicate the path to war file combined with the path to jar file.
	FilePath string `pulumi:"filePath"`
}

// Indicates the location at which a package was found.
type FileLocationResponseOutput struct{ *pulumi.OutputState }

func (FileLocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileLocationResponse)(nil)).Elem()
}

func (o FileLocationResponseOutput) ToFileLocationResponseOutput() FileLocationResponseOutput {
	return o
}

func (o FileLocationResponseOutput) ToFileLocationResponseOutputWithContext(ctx context.Context) FileLocationResponseOutput {
	return o
}

// For jars that are contained inside .war files, this filepath can indicate the path to war file combined with the path to jar file.
func (o FileLocationResponseOutput) FilePath() pulumi.StringOutput {
	return o.ApplyT(func(v FileLocationResponse) string { return v.FilePath }).(pulumi.StringOutput)
}

type FileLocationResponseArrayOutput struct{ *pulumi.OutputState }

func (FileLocationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FileLocationResponse)(nil)).Elem()
}

func (o FileLocationResponseArrayOutput) ToFileLocationResponseArrayOutput() FileLocationResponseArrayOutput {
	return o
}

func (o FileLocationResponseArrayOutput) ToFileLocationResponseArrayOutputWithContext(ctx context.Context) FileLocationResponseArrayOutput {
	return o
}

func (o FileLocationResponseArrayOutput) Index(i pulumi.IntInput) FileLocationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FileLocationResponse {
		return vs[0].([]FileLocationResponse)[vs[1].(int)]
	}).(FileLocationResponseOutput)
}

// FileNote represents an SPDX File Information section: https://spdx.github.io/spdx-spec/4-file-information/
type FileNote struct {
	// Provide a unique identifier to match analysis information on each specific file in a package
	Checksum []string `pulumi:"checksum"`
	// This field provides information about the type of file identified
	FileType *FileNoteFileType `pulumi:"fileType"`
	// Identify the full path and filename that corresponds to the file information in this section
	Title *string `pulumi:"title"`
}

// FileNoteInput is an input type that accepts FileNoteArgs and FileNoteOutput values.
// You can construct a concrete instance of `FileNoteInput` via:
//
//	FileNoteArgs{...}
type FileNoteInput interface {
	pulumi.Input

	ToFileNoteOutput() FileNoteOutput
	ToFileNoteOutputWithContext(context.Context) FileNoteOutput
}

// FileNote represents an SPDX File Information section: https://spdx.github.io/spdx-spec/4-file-information/
type FileNoteArgs struct {
	// Provide a unique identifier to match analysis information on each specific file in a package
	Checksum pulumi.StringArrayInput `pulumi:"checksum"`
	// This field provides information about the type of file identified
	FileType FileNoteFileTypePtrInput `pulumi:"fileType"`
	// Identify the full path and filename that corresponds to the file information in this section
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (FileNoteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileNote)(nil)).Elem()
}

func (i FileNoteArgs) ToFileNoteOutput() FileNoteOutput {
	return i.ToFileNoteOutputWithContext(context.Background())
}

func (i FileNoteArgs) ToFileNoteOutputWithContext(ctx context.Context) FileNoteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileNoteOutput)
}

func (i FileNoteArgs) ToFileNotePtrOutput() FileNotePtrOutput {
	return i.ToFileNotePtrOutputWithContext(context.Background())
}

func (i FileNoteArgs) ToFileNotePtrOutputWithContext(ctx context.Context) FileNotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileNoteOutput).ToFileNotePtrOutputWithContext(ctx)
}

// FileNotePtrInput is an input type that accepts FileNoteArgs, FileNotePtr and FileNotePtrOutput values.
// You can construct a concrete instance of `FileNotePtrInput` via:
//
//	        FileNoteArgs{...}
//
//	or:
//
//	        nil
type FileNotePtrInput interface {
	pulumi.Input

	ToFileNotePtrOutput() FileNotePtrOutput
	ToFileNotePtrOutputWithContext(context.Context) FileNotePtrOutput
}

type fileNotePtrType FileNoteArgs

func FileNotePtr(v *FileNoteArgs) FileNotePtrInput {
	return (*fileNotePtrType)(v)
}

func (*fileNotePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FileNote)(nil)).Elem()
}

func (i *fileNotePtrType) ToFileNotePtrOutput() FileNotePtrOutput {
	return i.ToFileNotePtrOutputWithContext(context.Background())
}

func (i *fileNotePtrType) ToFileNotePtrOutputWithContext(ctx context.Context) FileNotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileNotePtrOutput)
}

// FileNote represents an SPDX File Information section: https://spdx.github.io/spdx-spec/4-file-information/
type FileNoteOutput struct{ *pulumi.OutputState }

func (FileNoteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileNote)(nil)).Elem()
}

func (o FileNoteOutput) ToFileNoteOutput() FileNoteOutput {
	return o
}

func (o FileNoteOutput) ToFileNoteOutputWithContext(ctx context.Context) FileNoteOutput {
	return o
}

func (o FileNoteOutput) ToFileNotePtrOutput() FileNotePtrOutput {
	return o.ToFileNotePtrOutputWithContext(context.Background())
}

func (o FileNoteOutput) ToFileNotePtrOutputWithContext(ctx context.Context) FileNotePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FileNote) *FileNote {
		return &v
	}).(FileNotePtrOutput)
}

// Provide a unique identifier to match analysis information on each specific file in a package
func (o FileNoteOutput) Checksum() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FileNote) []string { return v.Checksum }).(pulumi.StringArrayOutput)
}

// This field provides information about the type of file identified
func (o FileNoteOutput) FileType() FileNoteFileTypePtrOutput {
	return o.ApplyT(func(v FileNote) *FileNoteFileType { return v.FileType }).(FileNoteFileTypePtrOutput)
}

// Identify the full path and filename that corresponds to the file information in this section
func (o FileNoteOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileNote) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type FileNotePtrOutput struct{ *pulumi.OutputState }

func (FileNotePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileNote)(nil)).Elem()
}

func (o FileNotePtrOutput) ToFileNotePtrOutput() FileNotePtrOutput {
	return o
}

func (o FileNotePtrOutput) ToFileNotePtrOutputWithContext(ctx context.Context) FileNotePtrOutput {
	return o
}

func (o FileNotePtrOutput) Elem() FileNoteOutput {
	return o.ApplyT(func(v *FileNote) FileNote {
		if v != nil {
			return *v
		}
		var ret FileNote
		return ret
	}).(FileNoteOutput)
}

// Provide a unique identifier to match analysis information on each specific file in a package
func (o FileNotePtrOutput) Checksum() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FileNote) []string {
		if v == nil {
			return nil
		}
		return v.Checksum
	}).(pulumi.StringArrayOutput)
}

// This field provides information about the type of file identified
func (o FileNotePtrOutput) FileType() FileNoteFileTypePtrOutput {
	return o.ApplyT(func(v *FileNote) *FileNoteFileType {
		if v == nil {
			return nil
		}
		return v.FileType
	}).(FileNoteFileTypePtrOutput)
}

// Identify the full path and filename that corresponds to the file information in this section
func (o FileNotePtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileNote) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// FileNote represents an SPDX File Information section: https://spdx.github.io/spdx-spec/4-file-information/
type FileNoteResponse struct {
	// Provide a unique identifier to match analysis information on each specific file in a package
	Checksum []string `pulumi:"checksum"`
	// This field provides information about the type of file identified
	FileType string `pulumi:"fileType"`
	// Identify the full path and filename that corresponds to the file information in this section
	Title string `pulumi:"title"`
}

// FileNote represents an SPDX File Information section: https://spdx.github.io/spdx-spec/4-file-information/
type FileNoteResponseOutput struct{ *pulumi.OutputState }

func (FileNoteResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileNoteResponse)(nil)).Elem()
}

func (o FileNoteResponseOutput) ToFileNoteResponseOutput() FileNoteResponseOutput {
	return o
}

func (o FileNoteResponseOutput) ToFileNoteResponseOutputWithContext(ctx context.Context) FileNoteResponseOutput {
	return o
}

// Provide a unique identifier to match analysis information on each specific file in a package
func (o FileNoteResponseOutput) Checksum() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FileNoteResponse) []string { return v.Checksum }).(pulumi.StringArrayOutput)
}

// This field provides information about the type of file identified
func (o FileNoteResponseOutput) FileType() pulumi.StringOutput {
	return o.ApplyT(func(v FileNoteResponse) string { return v.FileType }).(pulumi.StringOutput)
}

// Identify the full path and filename that corresponds to the file information in this section
func (o FileNoteResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v FileNoteResponse) string { return v.Title }).(pulumi.StringOutput)
}

// FileOccurrence represents an SPDX File Information section: https://spdx.github.io/spdx-spec/4-file-information/
type FileOccurrence struct {
	// This field provides a place for the SPDX data creator to record, at the file level, acknowledgements that may be needed to be communicated in some contexts
	Attributions []string `pulumi:"attributions"`
	// This field provides a place for the SPDX file creator to record any general comments about the file
	Comment *string `pulumi:"comment"`
	// This field provides a place for the SPDX file creator to record file contributors
	Contributors []string `pulumi:"contributors"`
	// Identify the copyright holder of the file, as well as any dates present
	Copyright *string `pulumi:"copyright"`
	// This field contains the license information actually found in the file, if any
	FilesLicenseInfo []string `pulumi:"filesLicenseInfo"`
	// Uniquely identify any element in an SPDX document which may be referenced by other elements
	Id *string `pulumi:"id"`
	// This field contains the license the SPDX file creator has concluded as governing the file or alternative values if the governing license cannot be determined
	LicenseConcluded *License `pulumi:"licenseConcluded"`
	// This field provides a place for the SPDX file creator to record license notices or other such related notices found in the file
	Notice *string `pulumi:"notice"`
}

// FileOccurrenceInput is an input type that accepts FileOccurrenceArgs and FileOccurrenceOutput values.
// You can construct a concrete instance of `FileOccurrenceInput` via:
//
//	FileOccurrenceArgs{...}
type FileOccurrenceInput interface {
	pulumi.Input

	ToFileOccurrenceOutput() FileOccurrenceOutput
	ToFileOccurrenceOutputWithContext(context.Context) FileOccurrenceOutput
}

// FileOccurrence represents an SPDX File Information section: https://spdx.github.io/spdx-spec/4-file-information/
type FileOccurrenceArgs struct {
	// This field provides a place for the SPDX data creator to record, at the file level, acknowledgements that may be needed to be communicated in some contexts
	Attributions pulumi.StringArrayInput `pulumi:"attributions"`
	// This field provides a place for the SPDX file creator to record any general comments about the file
	Comment pulumi.StringPtrInput `pulumi:"comment"`
	// This field provides a place for the SPDX file creator to record file contributors
	Contributors pulumi.StringArrayInput `pulumi:"contributors"`
	// Identify the copyright holder of the file, as well as any dates present
	Copyright pulumi.StringPtrInput `pulumi:"copyright"`
	// This field contains the license information actually found in the file, if any
	FilesLicenseInfo pulumi.StringArrayInput `pulumi:"filesLicenseInfo"`
	// Uniquely identify any element in an SPDX document which may be referenced by other elements
	Id pulumi.StringPtrInput `pulumi:"id"`
	// This field contains the license the SPDX file creator has concluded as governing the file or alternative values if the governing license cannot be determined
	LicenseConcluded LicensePtrInput `pulumi:"licenseConcluded"`
	// This field provides a place for the SPDX file creator to record license notices or other such related notices found in the file
	Notice pulumi.StringPtrInput `pulumi:"notice"`
}

func (FileOccurrenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileOccurrence)(nil)).Elem()
}

func (i FileOccurrenceArgs) ToFileOccurrenceOutput() FileOccurrenceOutput {
	return i.ToFileOccurrenceOutputWithContext(context.Background())
}

func (i FileOccurrenceArgs) ToFileOccurrenceOutputWithContext(ctx context.Context) FileOccurrenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileOccurrenceOutput)
}

func (i FileOccurrenceArgs) ToFileOccurrencePtrOutput() FileOccurrencePtrOutput {
	return i.ToFileOccurrencePtrOutputWithContext(context.Background())
}

func (i FileOccurrenceArgs) ToFileOccurrencePtrOutputWithContext(ctx context.Context) FileOccurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileOccurrenceOutput).ToFileOccurrencePtrOutputWithContext(ctx)
}

// FileOccurrencePtrInput is an input type that accepts FileOccurrenceArgs, FileOccurrencePtr and FileOccurrencePtrOutput values.
// You can construct a concrete instance of `FileOccurrencePtrInput` via:
//
//	        FileOccurrenceArgs{...}
//
//	or:
//
//	        nil
type FileOccurrencePtrInput interface {
	pulumi.Input

	ToFileOccurrencePtrOutput() FileOccurrencePtrOutput
	ToFileOccurrencePtrOutputWithContext(context.Context) FileOccurrencePtrOutput
}

type fileOccurrencePtrType FileOccurrenceArgs

func FileOccurrencePtr(v *FileOccurrenceArgs) FileOccurrencePtrInput {
	return (*fileOccurrencePtrType)(v)
}

func (*fileOccurrencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FileOccurrence)(nil)).Elem()
}

func (i *fileOccurrencePtrType) ToFileOccurrencePtrOutput() FileOccurrencePtrOutput {
	return i.ToFileOccurrencePtrOutputWithContext(context.Background())
}

func (i *fileOccurrencePtrType) ToFileOccurrencePtrOutputWithContext(ctx context.Context) FileOccurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileOccurrencePtrOutput)
}

// FileOccurrence represents an SPDX File Information section: https://spdx.github.io/spdx-spec/4-file-information/
type FileOccurrenceOutput struct{ *pulumi.OutputState }

func (FileOccurrenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileOccurrence)(nil)).Elem()
}

func (o FileOccurrenceOutput) ToFileOccurrenceOutput() FileOccurrenceOutput {
	return o
}

func (o FileOccurrenceOutput) ToFileOccurrenceOutputWithContext(ctx context.Context) FileOccurrenceOutput {
	return o
}

func (o FileOccurrenceOutput) ToFileOccurrencePtrOutput() FileOccurrencePtrOutput {
	return o.ToFileOccurrencePtrOutputWithContext(context.Background())
}

func (o FileOccurrenceOutput) ToFileOccurrencePtrOutputWithContext(ctx context.Context) FileOccurrencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FileOccurrence) *FileOccurrence {
		return &v
	}).(FileOccurrencePtrOutput)
}

// This field provides a place for the SPDX data creator to record, at the file level, acknowledgements that may be needed to be communicated in some contexts
func (o FileOccurrenceOutput) Attributions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FileOccurrence) []string { return v.Attributions }).(pulumi.StringArrayOutput)
}

// This field provides a place for the SPDX file creator to record any general comments about the file
func (o FileOccurrenceOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileOccurrence) *string { return v.Comment }).(pulumi.StringPtrOutput)
}

// This field provides a place for the SPDX file creator to record file contributors
func (o FileOccurrenceOutput) Contributors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FileOccurrence) []string { return v.Contributors }).(pulumi.StringArrayOutput)
}

// Identify the copyright holder of the file, as well as any dates present
func (o FileOccurrenceOutput) Copyright() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileOccurrence) *string { return v.Copyright }).(pulumi.StringPtrOutput)
}

// This field contains the license information actually found in the file, if any
func (o FileOccurrenceOutput) FilesLicenseInfo() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FileOccurrence) []string { return v.FilesLicenseInfo }).(pulumi.StringArrayOutput)
}

// Uniquely identify any element in an SPDX document which may be referenced by other elements
func (o FileOccurrenceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileOccurrence) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// This field contains the license the SPDX file creator has concluded as governing the file or alternative values if the governing license cannot be determined
func (o FileOccurrenceOutput) LicenseConcluded() LicensePtrOutput {
	return o.ApplyT(func(v FileOccurrence) *License { return v.LicenseConcluded }).(LicensePtrOutput)
}

// This field provides a place for the SPDX file creator to record license notices or other such related notices found in the file
func (o FileOccurrenceOutput) Notice() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileOccurrence) *string { return v.Notice }).(pulumi.StringPtrOutput)
}

type FileOccurrencePtrOutput struct{ *pulumi.OutputState }

func (FileOccurrencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileOccurrence)(nil)).Elem()
}

func (o FileOccurrencePtrOutput) ToFileOccurrencePtrOutput() FileOccurrencePtrOutput {
	return o
}

func (o FileOccurrencePtrOutput) ToFileOccurrencePtrOutputWithContext(ctx context.Context) FileOccurrencePtrOutput {
	return o
}

func (o FileOccurrencePtrOutput) Elem() FileOccurrenceOutput {
	return o.ApplyT(func(v *FileOccurrence) FileOccurrence {
		if v != nil {
			return *v
		}
		var ret FileOccurrence
		return ret
	}).(FileOccurrenceOutput)
}

// This field provides a place for the SPDX data creator to record, at the file level, acknowledgements that may be needed to be communicated in some contexts
func (o FileOccurrencePtrOutput) Attributions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FileOccurrence) []string {
		if v == nil {
			return nil
		}
		return v.Attributions
	}).(pulumi.StringArrayOutput)
}

// This field provides a place for the SPDX file creator to record any general comments about the file
func (o FileOccurrencePtrOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileOccurrence) *string {
		if v == nil {
			return nil
		}
		return v.Comment
	}).(pulumi.StringPtrOutput)
}

// This field provides a place for the SPDX file creator to record file contributors
func (o FileOccurrencePtrOutput) Contributors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FileOccurrence) []string {
		if v == nil {
			return nil
		}
		return v.Contributors
	}).(pulumi.StringArrayOutput)
}

// Identify the copyright holder of the file, as well as any dates present
func (o FileOccurrencePtrOutput) Copyright() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileOccurrence) *string {
		if v == nil {
			return nil
		}
		return v.Copyright
	}).(pulumi.StringPtrOutput)
}

// This field contains the license information actually found in the file, if any
func (o FileOccurrencePtrOutput) FilesLicenseInfo() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FileOccurrence) []string {
		if v == nil {
			return nil
		}
		return v.FilesLicenseInfo
	}).(pulumi.StringArrayOutput)
}

// Uniquely identify any element in an SPDX document which may be referenced by other elements
func (o FileOccurrencePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileOccurrence) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// This field contains the license the SPDX file creator has concluded as governing the file or alternative values if the governing license cannot be determined
func (o FileOccurrencePtrOutput) LicenseConcluded() LicensePtrOutput {
	return o.ApplyT(func(v *FileOccurrence) *License {
		if v == nil {
			return nil
		}
		return v.LicenseConcluded
	}).(LicensePtrOutput)
}

// This field provides a place for the SPDX file creator to record license notices or other such related notices found in the file
func (o FileOccurrencePtrOutput) Notice() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileOccurrence) *string {
		if v == nil {
			return nil
		}
		return v.Notice
	}).(pulumi.StringPtrOutput)
}

// FileOccurrence represents an SPDX File Information section: https://spdx.github.io/spdx-spec/4-file-information/
type FileOccurrenceResponse struct {
	// This field provides a place for the SPDX data creator to record, at the file level, acknowledgements that may be needed to be communicated in some contexts
	Attributions []string `pulumi:"attributions"`
	// This field provides a place for the SPDX file creator to record any general comments about the file
	Comment string `pulumi:"comment"`
	// This field provides a place for the SPDX file creator to record file contributors
	Contributors []string `pulumi:"contributors"`
	// Identify the copyright holder of the file, as well as any dates present
	Copyright string `pulumi:"copyright"`
	// This field contains the license information actually found in the file, if any
	FilesLicenseInfo []string `pulumi:"filesLicenseInfo"`
	// This field contains the license the SPDX file creator has concluded as governing the file or alternative values if the governing license cannot be determined
	LicenseConcluded LicenseResponse `pulumi:"licenseConcluded"`
	// This field provides a place for the SPDX file creator to record license notices or other such related notices found in the file
	Notice string `pulumi:"notice"`
}

// FileOccurrence represents an SPDX File Information section: https://spdx.github.io/spdx-spec/4-file-information/
type FileOccurrenceResponseOutput struct{ *pulumi.OutputState }

func (FileOccurrenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileOccurrenceResponse)(nil)).Elem()
}

func (o FileOccurrenceResponseOutput) ToFileOccurrenceResponseOutput() FileOccurrenceResponseOutput {
	return o
}

func (o FileOccurrenceResponseOutput) ToFileOccurrenceResponseOutputWithContext(ctx context.Context) FileOccurrenceResponseOutput {
	return o
}

// This field provides a place for the SPDX data creator to record, at the file level, acknowledgements that may be needed to be communicated in some contexts
func (o FileOccurrenceResponseOutput) Attributions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FileOccurrenceResponse) []string { return v.Attributions }).(pulumi.StringArrayOutput)
}

// This field provides a place for the SPDX file creator to record any general comments about the file
func (o FileOccurrenceResponseOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v FileOccurrenceResponse) string { return v.Comment }).(pulumi.StringOutput)
}

// This field provides a place for the SPDX file creator to record file contributors
func (o FileOccurrenceResponseOutput) Contributors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FileOccurrenceResponse) []string { return v.Contributors }).(pulumi.StringArrayOutput)
}

// Identify the copyright holder of the file, as well as any dates present
func (o FileOccurrenceResponseOutput) Copyright() pulumi.StringOutput {
	return o.ApplyT(func(v FileOccurrenceResponse) string { return v.Copyright }).(pulumi.StringOutput)
}

// This field contains the license information actually found in the file, if any
func (o FileOccurrenceResponseOutput) FilesLicenseInfo() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FileOccurrenceResponse) []string { return v.FilesLicenseInfo }).(pulumi.StringArrayOutput)
}

// This field contains the license the SPDX file creator has concluded as governing the file or alternative values if the governing license cannot be determined
func (o FileOccurrenceResponseOutput) LicenseConcluded() LicenseResponseOutput {
	return o.ApplyT(func(v FileOccurrenceResponse) LicenseResponse { return v.LicenseConcluded }).(LicenseResponseOutput)
}

// This field provides a place for the SPDX file creator to record license notices or other such related notices found in the file
func (o FileOccurrenceResponseOutput) Notice() pulumi.StringOutput {
	return o.ApplyT(func(v FileOccurrenceResponse) string { return v.Notice }).(pulumi.StringOutput)
}

// A set of properties that uniquely identify a given Docker image.
type Fingerprint struct {
	// The layer-id of the final layer in the Docker image's v1 representation. This field can be used as a filter in list requests.
	V1Name *string `pulumi:"v1Name"`
	// The ordered list of v2 blobs that represent a given image.
	V2Blob []string `pulumi:"v2Blob"`
}

// FingerprintInput is an input type that accepts FingerprintArgs and FingerprintOutput values.
// You can construct a concrete instance of `FingerprintInput` via:
//
//	FingerprintArgs{...}
type FingerprintInput interface {
	pulumi.Input

	ToFingerprintOutput() FingerprintOutput
	ToFingerprintOutputWithContext(context.Context) FingerprintOutput
}

// A set of properties that uniquely identify a given Docker image.
type FingerprintArgs struct {
	// The layer-id of the final layer in the Docker image's v1 representation. This field can be used as a filter in list requests.
	V1Name pulumi.StringPtrInput `pulumi:"v1Name"`
	// The ordered list of v2 blobs that represent a given image.
	V2Blob pulumi.StringArrayInput `pulumi:"v2Blob"`
}

func (FingerprintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Fingerprint)(nil)).Elem()
}

func (i FingerprintArgs) ToFingerprintOutput() FingerprintOutput {
	return i.ToFingerprintOutputWithContext(context.Background())
}

func (i FingerprintArgs) ToFingerprintOutputWithContext(ctx context.Context) FingerprintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FingerprintOutput)
}

func (i FingerprintArgs) ToFingerprintPtrOutput() FingerprintPtrOutput {
	return i.ToFingerprintPtrOutputWithContext(context.Background())
}

func (i FingerprintArgs) ToFingerprintPtrOutputWithContext(ctx context.Context) FingerprintPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FingerprintOutput).ToFingerprintPtrOutputWithContext(ctx)
}

// FingerprintPtrInput is an input type that accepts FingerprintArgs, FingerprintPtr and FingerprintPtrOutput values.
// You can construct a concrete instance of `FingerprintPtrInput` via:
//
//	        FingerprintArgs{...}
//
//	or:
//
//	        nil
type FingerprintPtrInput interface {
	pulumi.Input

	ToFingerprintPtrOutput() FingerprintPtrOutput
	ToFingerprintPtrOutputWithContext(context.Context) FingerprintPtrOutput
}

type fingerprintPtrType FingerprintArgs

func FingerprintPtr(v *FingerprintArgs) FingerprintPtrInput {
	return (*fingerprintPtrType)(v)
}

func (*fingerprintPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Fingerprint)(nil)).Elem()
}

func (i *fingerprintPtrType) ToFingerprintPtrOutput() FingerprintPtrOutput {
	return i.ToFingerprintPtrOutputWithContext(context.Background())
}

func (i *fingerprintPtrType) ToFingerprintPtrOutputWithContext(ctx context.Context) FingerprintPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FingerprintPtrOutput)
}

// A set of properties that uniquely identify a given Docker image.
type FingerprintOutput struct{ *pulumi.OutputState }

func (FingerprintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Fingerprint)(nil)).Elem()
}

func (o FingerprintOutput) ToFingerprintOutput() FingerprintOutput {
	return o
}

func (o FingerprintOutput) ToFingerprintOutputWithContext(ctx context.Context) FingerprintOutput {
	return o
}

func (o FingerprintOutput) ToFingerprintPtrOutput() FingerprintPtrOutput {
	return o.ToFingerprintPtrOutputWithContext(context.Background())
}

func (o FingerprintOutput) ToFingerprintPtrOutputWithContext(ctx context.Context) FingerprintPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Fingerprint) *Fingerprint {
		return &v
	}).(FingerprintPtrOutput)
}

// The layer-id of the final layer in the Docker image's v1 representation. This field can be used as a filter in list requests.
func (o FingerprintOutput) V1Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Fingerprint) *string { return v.V1Name }).(pulumi.StringPtrOutput)
}

// The ordered list of v2 blobs that represent a given image.
func (o FingerprintOutput) V2Blob() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Fingerprint) []string { return v.V2Blob }).(pulumi.StringArrayOutput)
}

type FingerprintPtrOutput struct{ *pulumi.OutputState }

func (FingerprintPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Fingerprint)(nil)).Elem()
}

func (o FingerprintPtrOutput) ToFingerprintPtrOutput() FingerprintPtrOutput {
	return o
}

func (o FingerprintPtrOutput) ToFingerprintPtrOutputWithContext(ctx context.Context) FingerprintPtrOutput {
	return o
}

func (o FingerprintPtrOutput) Elem() FingerprintOutput {
	return o.ApplyT(func(v *Fingerprint) Fingerprint {
		if v != nil {
			return *v
		}
		var ret Fingerprint
		return ret
	}).(FingerprintOutput)
}

// The layer-id of the final layer in the Docker image's v1 representation. This field can be used as a filter in list requests.
func (o FingerprintPtrOutput) V1Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Fingerprint) *string {
		if v == nil {
			return nil
		}
		return v.V1Name
	}).(pulumi.StringPtrOutput)
}

// The ordered list of v2 blobs that represent a given image.
func (o FingerprintPtrOutput) V2Blob() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Fingerprint) []string {
		if v == nil {
			return nil
		}
		return v.V2Blob
	}).(pulumi.StringArrayOutput)
}

// A set of properties that uniquely identify a given Docker image.
type FingerprintResponse struct {
	// The layer-id of the final layer in the Docker image's v1 representation. This field can be used as a filter in list requests.
	V1Name string `pulumi:"v1Name"`
	// The ordered list of v2 blobs that represent a given image.
	V2Blob []string `pulumi:"v2Blob"`
	// The name of the image's v2 blobs computed via: [bottom] := v2_blobbottom := sha256(v2_blob[N] + " " + v2_name[N+1]) Only the name of the final blob is kept. This field can be used as a filter in list requests.
	V2Name string `pulumi:"v2Name"`
}

// A set of properties that uniquely identify a given Docker image.
type FingerprintResponseOutput struct{ *pulumi.OutputState }

func (FingerprintResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FingerprintResponse)(nil)).Elem()
}

func (o FingerprintResponseOutput) ToFingerprintResponseOutput() FingerprintResponseOutput {
	return o
}

func (o FingerprintResponseOutput) ToFingerprintResponseOutputWithContext(ctx context.Context) FingerprintResponseOutput {
	return o
}

// The layer-id of the final layer in the Docker image's v1 representation. This field can be used as a filter in list requests.
func (o FingerprintResponseOutput) V1Name() pulumi.StringOutput {
	return o.ApplyT(func(v FingerprintResponse) string { return v.V1Name }).(pulumi.StringOutput)
}

// The ordered list of v2 blobs that represent a given image.
func (o FingerprintResponseOutput) V2Blob() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FingerprintResponse) []string { return v.V2Blob }).(pulumi.StringArrayOutput)
}

// The name of the image's v2 blobs computed via: [bottom] := v2_blobbottom := sha256(v2_blob[N] + " " + v2_name[N+1]) Only the name of the final blob is kept. This field can be used as a filter in list requests.
func (o FingerprintResponseOutput) V2Name() pulumi.StringOutput {
	return o.ApplyT(func(v FingerprintResponse) string { return v.V2Name }).(pulumi.StringOutput)
}

// An alias to a repo revision.
type GoogleDevtoolsContaineranalysisV1alpha1AliasContext struct {
	// The alias kind.
	Kind *GoogleDevtoolsContaineranalysisV1alpha1AliasContextKind `pulumi:"kind"`
	// The alias name.
	Name *string `pulumi:"name"`
}

// GoogleDevtoolsContaineranalysisV1alpha1AliasContextInput is an input type that accepts GoogleDevtoolsContaineranalysisV1alpha1AliasContextArgs and GoogleDevtoolsContaineranalysisV1alpha1AliasContextOutput values.
// You can construct a concrete instance of `GoogleDevtoolsContaineranalysisV1alpha1AliasContextInput` via:
//
//	GoogleDevtoolsContaineranalysisV1alpha1AliasContextArgs{...}
type GoogleDevtoolsContaineranalysisV1alpha1AliasContextInput interface {
	pulumi.Input

	ToGoogleDevtoolsContaineranalysisV1alpha1AliasContextOutput() GoogleDevtoolsContaineranalysisV1alpha1AliasContextOutput
	ToGoogleDevtoolsContaineranalysisV1alpha1AliasContextOutputWithContext(context.Context) GoogleDevtoolsContaineranalysisV1alpha1AliasContextOutput
}

// An alias to a repo revision.
type GoogleDevtoolsContaineranalysisV1alpha1AliasContextArgs struct {
	// The alias kind.
	Kind GoogleDevtoolsContaineranalysisV1alpha1AliasContextKindPtrInput `pulumi:"kind"`
	// The alias name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (GoogleDevtoolsContaineranalysisV1alpha1AliasContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1AliasContext)(nil)).Elem()
}

func (i GoogleDevtoolsContaineranalysisV1alpha1AliasContextArgs) ToGoogleDevtoolsContaineranalysisV1alpha1AliasContextOutput() GoogleDevtoolsContaineranalysisV1alpha1AliasContextOutput {
	return i.ToGoogleDevtoolsContaineranalysisV1alpha1AliasContextOutputWithContext(context.Background())
}

func (i GoogleDevtoolsContaineranalysisV1alpha1AliasContextArgs) ToGoogleDevtoolsContaineranalysisV1alpha1AliasContextOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1AliasContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsContaineranalysisV1alpha1AliasContextOutput)
}

func (i GoogleDevtoolsContaineranalysisV1alpha1AliasContextArgs) ToGoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput {
	return i.ToGoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutputWithContext(context.Background())
}

func (i GoogleDevtoolsContaineranalysisV1alpha1AliasContextArgs) ToGoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsContaineranalysisV1alpha1AliasContextOutput).ToGoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutputWithContext(ctx)
}

// GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrInput is an input type that accepts GoogleDevtoolsContaineranalysisV1alpha1AliasContextArgs, GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtr and GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput values.
// You can construct a concrete instance of `GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrInput` via:
//
//	        GoogleDevtoolsContaineranalysisV1alpha1AliasContextArgs{...}
//
//	or:
//
//	        nil
type GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrInput interface {
	pulumi.Input

	ToGoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput
	ToGoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutputWithContext(context.Context) GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput
}

type googleDevtoolsContaineranalysisV1alpha1AliasContextPtrType GoogleDevtoolsContaineranalysisV1alpha1AliasContextArgs

func GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtr(v *GoogleDevtoolsContaineranalysisV1alpha1AliasContextArgs) GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrInput {
	return (*googleDevtoolsContaineranalysisV1alpha1AliasContextPtrType)(v)
}

func (*googleDevtoolsContaineranalysisV1alpha1AliasContextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleDevtoolsContaineranalysisV1alpha1AliasContext)(nil)).Elem()
}

func (i *googleDevtoolsContaineranalysisV1alpha1AliasContextPtrType) ToGoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput {
	return i.ToGoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutputWithContext(context.Background())
}

func (i *googleDevtoolsContaineranalysisV1alpha1AliasContextPtrType) ToGoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput)
}

// An alias to a repo revision.
type GoogleDevtoolsContaineranalysisV1alpha1AliasContextOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsContaineranalysisV1alpha1AliasContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1AliasContext)(nil)).Elem()
}

func (o GoogleDevtoolsContaineranalysisV1alpha1AliasContextOutput) ToGoogleDevtoolsContaineranalysisV1alpha1AliasContextOutput() GoogleDevtoolsContaineranalysisV1alpha1AliasContextOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1AliasContextOutput) ToGoogleDevtoolsContaineranalysisV1alpha1AliasContextOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1AliasContextOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1AliasContextOutput) ToGoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput {
	return o.ToGoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutputWithContext(context.Background())
}

func (o GoogleDevtoolsContaineranalysisV1alpha1AliasContextOutput) ToGoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleDevtoolsContaineranalysisV1alpha1AliasContext) *GoogleDevtoolsContaineranalysisV1alpha1AliasContext {
		return &v
	}).(GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput)
}

// The alias kind.
func (o GoogleDevtoolsContaineranalysisV1alpha1AliasContextOutput) Kind() GoogleDevtoolsContaineranalysisV1alpha1AliasContextKindPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1AliasContext) *GoogleDevtoolsContaineranalysisV1alpha1AliasContextKind {
		return v.Kind
	}).(GoogleDevtoolsContaineranalysisV1alpha1AliasContextKindPtrOutput)
}

// The alias name.
func (o GoogleDevtoolsContaineranalysisV1alpha1AliasContextOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1AliasContext) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleDevtoolsContaineranalysisV1alpha1AliasContext)(nil)).Elem()
}

func (o GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput) ToGoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput) ToGoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput) Elem() GoogleDevtoolsContaineranalysisV1alpha1AliasContextOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1AliasContext) GoogleDevtoolsContaineranalysisV1alpha1AliasContext {
		if v != nil {
			return *v
		}
		var ret GoogleDevtoolsContaineranalysisV1alpha1AliasContext
		return ret
	}).(GoogleDevtoolsContaineranalysisV1alpha1AliasContextOutput)
}

// The alias kind.
func (o GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput) Kind() GoogleDevtoolsContaineranalysisV1alpha1AliasContextKindPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1AliasContext) *GoogleDevtoolsContaineranalysisV1alpha1AliasContextKind {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(GoogleDevtoolsContaineranalysisV1alpha1AliasContextKindPtrOutput)
}

// The alias name.
func (o GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1AliasContext) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// An alias to a repo revision.
type GoogleDevtoolsContaineranalysisV1alpha1AliasContextResponse struct {
	// The alias kind.
	Kind string `pulumi:"kind"`
	// The alias name.
	Name string `pulumi:"name"`
}

// An alias to a repo revision.
type GoogleDevtoolsContaineranalysisV1alpha1AliasContextResponseOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsContaineranalysisV1alpha1AliasContextResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1AliasContextResponse)(nil)).Elem()
}

func (o GoogleDevtoolsContaineranalysisV1alpha1AliasContextResponseOutput) ToGoogleDevtoolsContaineranalysisV1alpha1AliasContextResponseOutput() GoogleDevtoolsContaineranalysisV1alpha1AliasContextResponseOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1AliasContextResponseOutput) ToGoogleDevtoolsContaineranalysisV1alpha1AliasContextResponseOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1AliasContextResponseOutput {
	return o
}

// The alias kind.
func (o GoogleDevtoolsContaineranalysisV1alpha1AliasContextResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1AliasContextResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// The alias name.
func (o GoogleDevtoolsContaineranalysisV1alpha1AliasContextResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1AliasContextResponse) string { return v.Name }).(pulumi.StringOutput)
}

// A CloudRepoSourceContext denotes a particular revision in a Google Cloud Source Repo.
type GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext struct {
	// An alias, which may be a branch or tag.
	AliasContext *GoogleDevtoolsContaineranalysisV1alpha1AliasContext `pulumi:"aliasContext"`
	// The ID of the repo.
	RepoId *GoogleDevtoolsContaineranalysisV1alpha1RepoId `pulumi:"repoId"`
	// A revision ID.
	RevisionId *string `pulumi:"revisionId"`
}

// GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextInput is an input type that accepts GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextArgs and GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextOutput values.
// You can construct a concrete instance of `GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextInput` via:
//
//	GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextArgs{...}
type GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextInput interface {
	pulumi.Input

	ToGoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextOutput() GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextOutput
	ToGoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextOutputWithContext(context.Context) GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextOutput
}

// A CloudRepoSourceContext denotes a particular revision in a Google Cloud Source Repo.
type GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextArgs struct {
	// An alias, which may be a branch or tag.
	AliasContext GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrInput `pulumi:"aliasContext"`
	// The ID of the repo.
	RepoId GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrInput `pulumi:"repoId"`
	// A revision ID.
	RevisionId pulumi.StringPtrInput `pulumi:"revisionId"`
}

func (GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext)(nil)).Elem()
}

func (i GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextArgs) ToGoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextOutput() GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextOutput {
	return i.ToGoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextOutputWithContext(context.Background())
}

func (i GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextArgs) ToGoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextOutput)
}

func (i GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextArgs) ToGoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutput {
	return i.ToGoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutputWithContext(context.Background())
}

func (i GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextArgs) ToGoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextOutput).ToGoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutputWithContext(ctx)
}

// GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrInput is an input type that accepts GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextArgs, GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtr and GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutput values.
// You can construct a concrete instance of `GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrInput` via:
//
//	        GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextArgs{...}
//
//	or:
//
//	        nil
type GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrInput interface {
	pulumi.Input

	ToGoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutput
	ToGoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutputWithContext(context.Context) GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutput
}

type googleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrType GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextArgs

func GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtr(v *GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextArgs) GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrInput {
	return (*googleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrType)(v)
}

func (*googleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext)(nil)).Elem()
}

func (i *googleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrType) ToGoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutput {
	return i.ToGoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutputWithContext(context.Background())
}

func (i *googleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrType) ToGoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutput)
}

// A CloudRepoSourceContext denotes a particular revision in a Google Cloud Source Repo.
type GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext)(nil)).Elem()
}

func (o GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextOutput) ToGoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextOutput() GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextOutput) ToGoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextOutput) ToGoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutput {
	return o.ToGoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutputWithContext(context.Background())
}

func (o GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextOutput) ToGoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext) *GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext {
		return &v
	}).(GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutput)
}

// An alias, which may be a branch or tag.
func (o GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextOutput) AliasContext() GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext) *GoogleDevtoolsContaineranalysisV1alpha1AliasContext {
		return v.AliasContext
	}).(GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput)
}

// The ID of the repo.
func (o GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextOutput) RepoId() GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext) *GoogleDevtoolsContaineranalysisV1alpha1RepoId {
		return v.RepoId
	}).(GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutput)
}

// A revision ID.
func (o GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextOutput) RevisionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext) *string { return v.RevisionId }).(pulumi.StringPtrOutput)
}

type GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext)(nil)).Elem()
}

func (o GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutput) ToGoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutput) ToGoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutput) Elem() GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext) GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext {
		if v != nil {
			return *v
		}
		var ret GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext
		return ret
	}).(GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextOutput)
}

// An alias, which may be a branch or tag.
func (o GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutput) AliasContext() GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext) *GoogleDevtoolsContaineranalysisV1alpha1AliasContext {
		if v == nil {
			return nil
		}
		return v.AliasContext
	}).(GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput)
}

// The ID of the repo.
func (o GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutput) RepoId() GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext) *GoogleDevtoolsContaineranalysisV1alpha1RepoId {
		if v == nil {
			return nil
		}
		return v.RepoId
	}).(GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutput)
}

// A revision ID.
func (o GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutput) RevisionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext) *string {
		if v == nil {
			return nil
		}
		return v.RevisionId
	}).(pulumi.StringPtrOutput)
}

// A CloudRepoSourceContext denotes a particular revision in a Google Cloud Source Repo.
type GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextResponse struct {
	// An alias, which may be a branch or tag.
	AliasContext GoogleDevtoolsContaineranalysisV1alpha1AliasContextResponse `pulumi:"aliasContext"`
	// The ID of the repo.
	RepoId GoogleDevtoolsContaineranalysisV1alpha1RepoIdResponse `pulumi:"repoId"`
	// A revision ID.
	RevisionId string `pulumi:"revisionId"`
}

// A CloudRepoSourceContext denotes a particular revision in a Google Cloud Source Repo.
type GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextResponseOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextResponse)(nil)).Elem()
}

func (o GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextResponseOutput) ToGoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextResponseOutput() GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextResponseOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextResponseOutput) ToGoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextResponseOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextResponseOutput {
	return o
}

// An alias, which may be a branch or tag.
func (o GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextResponseOutput) AliasContext() GoogleDevtoolsContaineranalysisV1alpha1AliasContextResponseOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextResponse) GoogleDevtoolsContaineranalysisV1alpha1AliasContextResponse {
		return v.AliasContext
	}).(GoogleDevtoolsContaineranalysisV1alpha1AliasContextResponseOutput)
}

// The ID of the repo.
func (o GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextResponseOutput) RepoId() GoogleDevtoolsContaineranalysisV1alpha1RepoIdResponseOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextResponse) GoogleDevtoolsContaineranalysisV1alpha1RepoIdResponse {
		return v.RepoId
	}).(GoogleDevtoolsContaineranalysisV1alpha1RepoIdResponseOutput)
}

// A revision ID.
func (o GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextResponseOutput) RevisionId() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextResponse) string {
		return v.RevisionId
	}).(pulumi.StringOutput)
}

// A SourceContext referring to a Gerrit project.
type GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext struct {
	// An alias, which may be a branch or tag.
	AliasContext *GoogleDevtoolsContaineranalysisV1alpha1AliasContext `pulumi:"aliasContext"`
	// The full project name within the host. Projects may be nested, so "project/subproject" is a valid project name. The "repo name" is the hostURI/project.
	GerritProject *string `pulumi:"gerritProject"`
	// The URI of a running Gerrit instance.
	HostUri *string `pulumi:"hostUri"`
	// A revision (commit) ID.
	RevisionId *string `pulumi:"revisionId"`
}

// GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextInput is an input type that accepts GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextArgs and GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextOutput values.
// You can construct a concrete instance of `GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextInput` via:
//
//	GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextArgs{...}
type GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextInput interface {
	pulumi.Input

	ToGoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextOutput() GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextOutput
	ToGoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextOutputWithContext(context.Context) GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextOutput
}

// A SourceContext referring to a Gerrit project.
type GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextArgs struct {
	// An alias, which may be a branch or tag.
	AliasContext GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrInput `pulumi:"aliasContext"`
	// The full project name within the host. Projects may be nested, so "project/subproject" is a valid project name. The "repo name" is the hostURI/project.
	GerritProject pulumi.StringPtrInput `pulumi:"gerritProject"`
	// The URI of a running Gerrit instance.
	HostUri pulumi.StringPtrInput `pulumi:"hostUri"`
	// A revision (commit) ID.
	RevisionId pulumi.StringPtrInput `pulumi:"revisionId"`
}

func (GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext)(nil)).Elem()
}

func (i GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextArgs) ToGoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextOutput() GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextOutput {
	return i.ToGoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextOutputWithContext(context.Background())
}

func (i GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextArgs) ToGoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextOutput)
}

func (i GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextArgs) ToGoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput {
	return i.ToGoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutputWithContext(context.Background())
}

func (i GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextArgs) ToGoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextOutput).ToGoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutputWithContext(ctx)
}

// GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrInput is an input type that accepts GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextArgs, GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtr and GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput values.
// You can construct a concrete instance of `GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrInput` via:
//
//	        GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextArgs{...}
//
//	or:
//
//	        nil
type GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrInput interface {
	pulumi.Input

	ToGoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput
	ToGoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutputWithContext(context.Context) GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput
}

type googleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrType GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextArgs

func GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtr(v *GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextArgs) GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrInput {
	return (*googleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrType)(v)
}

func (*googleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext)(nil)).Elem()
}

func (i *googleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrType) ToGoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput {
	return i.ToGoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutputWithContext(context.Background())
}

func (i *googleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrType) ToGoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput)
}

// A SourceContext referring to a Gerrit project.
type GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext)(nil)).Elem()
}

func (o GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextOutput) ToGoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextOutput() GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextOutput) ToGoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextOutput) ToGoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput {
	return o.ToGoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutputWithContext(context.Background())
}

func (o GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextOutput) ToGoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext) *GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext {
		return &v
	}).(GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput)
}

// An alias, which may be a branch or tag.
func (o GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextOutput) AliasContext() GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext) *GoogleDevtoolsContaineranalysisV1alpha1AliasContext {
		return v.AliasContext
	}).(GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput)
}

// The full project name within the host. Projects may be nested, so "project/subproject" is a valid project name. The "repo name" is the hostURI/project.
func (o GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextOutput) GerritProject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext) *string { return v.GerritProject }).(pulumi.StringPtrOutput)
}

// The URI of a running Gerrit instance.
func (o GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextOutput) HostUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext) *string { return v.HostUri }).(pulumi.StringPtrOutput)
}

// A revision (commit) ID.
func (o GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextOutput) RevisionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext) *string { return v.RevisionId }).(pulumi.StringPtrOutput)
}

type GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext)(nil)).Elem()
}

func (o GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput) ToGoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput) ToGoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput) Elem() GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext) GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext {
		if v != nil {
			return *v
		}
		var ret GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext
		return ret
	}).(GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextOutput)
}

// An alias, which may be a branch or tag.
func (o GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput) AliasContext() GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext) *GoogleDevtoolsContaineranalysisV1alpha1AliasContext {
		if v == nil {
			return nil
		}
		return v.AliasContext
	}).(GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput)
}

// The full project name within the host. Projects may be nested, so "project/subproject" is a valid project name. The "repo name" is the hostURI/project.
func (o GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput) GerritProject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext) *string {
		if v == nil {
			return nil
		}
		return v.GerritProject
	}).(pulumi.StringPtrOutput)
}

// The URI of a running Gerrit instance.
func (o GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput) HostUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext) *string {
		if v == nil {
			return nil
		}
		return v.HostUri
	}).(pulumi.StringPtrOutput)
}

// A revision (commit) ID.
func (o GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput) RevisionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext) *string {
		if v == nil {
			return nil
		}
		return v.RevisionId
	}).(pulumi.StringPtrOutput)
}

// A SourceContext referring to a Gerrit project.
type GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextResponse struct {
	// An alias, which may be a branch or tag.
	AliasContext GoogleDevtoolsContaineranalysisV1alpha1AliasContextResponse `pulumi:"aliasContext"`
	// The full project name within the host. Projects may be nested, so "project/subproject" is a valid project name. The "repo name" is the hostURI/project.
	GerritProject string `pulumi:"gerritProject"`
	// The URI of a running Gerrit instance.
	HostUri string `pulumi:"hostUri"`
	// A revision (commit) ID.
	RevisionId string `pulumi:"revisionId"`
}

// A SourceContext referring to a Gerrit project.
type GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextResponseOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextResponse)(nil)).Elem()
}

func (o GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextResponseOutput) ToGoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextResponseOutput() GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextResponseOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextResponseOutput) ToGoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextResponseOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextResponseOutput {
	return o
}

// An alias, which may be a branch or tag.
func (o GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextResponseOutput) AliasContext() GoogleDevtoolsContaineranalysisV1alpha1AliasContextResponseOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextResponse) GoogleDevtoolsContaineranalysisV1alpha1AliasContextResponse {
		return v.AliasContext
	}).(GoogleDevtoolsContaineranalysisV1alpha1AliasContextResponseOutput)
}

// The full project name within the host. Projects may be nested, so "project/subproject" is a valid project name. The "repo name" is the hostURI/project.
func (o GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextResponseOutput) GerritProject() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextResponse) string {
		return v.GerritProject
	}).(pulumi.StringOutput)
}

// The URI of a running Gerrit instance.
func (o GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextResponseOutput) HostUri() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextResponse) string { return v.HostUri }).(pulumi.StringOutput)
}

// A revision (commit) ID.
func (o GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextResponseOutput) RevisionId() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextResponse) string { return v.RevisionId }).(pulumi.StringOutput)
}

// A GitSourceContext denotes a particular revision in a third party Git repository (e.g., GitHub).
type GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext struct {
	// Git commit hash.
	RevisionId string `pulumi:"revisionId"`
	// Git repository URL.
	Url *string `pulumi:"url"`
}

// GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextInput is an input type that accepts GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextArgs and GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextOutput values.
// You can construct a concrete instance of `GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextInput` via:
//
//	GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextArgs{...}
type GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextInput interface {
	pulumi.Input

	ToGoogleDevtoolsContaineranalysisV1alpha1GitSourceContextOutput() GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextOutput
	ToGoogleDevtoolsContaineranalysisV1alpha1GitSourceContextOutputWithContext(context.Context) GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextOutput
}

// A GitSourceContext denotes a particular revision in a third party Git repository (e.g., GitHub).
type GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextArgs struct {
	// Git commit hash.
	RevisionId pulumi.StringInput `pulumi:"revisionId"`
	// Git repository URL.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext)(nil)).Elem()
}

func (i GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextArgs) ToGoogleDevtoolsContaineranalysisV1alpha1GitSourceContextOutput() GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextOutput {
	return i.ToGoogleDevtoolsContaineranalysisV1alpha1GitSourceContextOutputWithContext(context.Background())
}

func (i GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextArgs) ToGoogleDevtoolsContaineranalysisV1alpha1GitSourceContextOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextOutput)
}

func (i GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextArgs) ToGoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutput {
	return i.ToGoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutputWithContext(context.Background())
}

func (i GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextArgs) ToGoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextOutput).ToGoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutputWithContext(ctx)
}

// GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrInput is an input type that accepts GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextArgs, GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtr and GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutput values.
// You can construct a concrete instance of `GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrInput` via:
//
//	        GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextArgs{...}
//
//	or:
//
//	        nil
type GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrInput interface {
	pulumi.Input

	ToGoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutput
	ToGoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutputWithContext(context.Context) GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutput
}

type googleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrType GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextArgs

func GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtr(v *GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextArgs) GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrInput {
	return (*googleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrType)(v)
}

func (*googleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext)(nil)).Elem()
}

func (i *googleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrType) ToGoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutput {
	return i.ToGoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutputWithContext(context.Background())
}

func (i *googleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrType) ToGoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutput)
}

// A GitSourceContext denotes a particular revision in a third party Git repository (e.g., GitHub).
type GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext)(nil)).Elem()
}

func (o GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextOutput) ToGoogleDevtoolsContaineranalysisV1alpha1GitSourceContextOutput() GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextOutput) ToGoogleDevtoolsContaineranalysisV1alpha1GitSourceContextOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextOutput) ToGoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutput {
	return o.ToGoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutputWithContext(context.Background())
}

func (o GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextOutput) ToGoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext) *GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext {
		return &v
	}).(GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutput)
}

// Git commit hash.
func (o GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextOutput) RevisionId() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext) string { return v.RevisionId }).(pulumi.StringOutput)
}

// Git repository URL.
func (o GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext)(nil)).Elem()
}

func (o GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutput) ToGoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutput) ToGoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutput) Elem() GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext) GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext {
		if v != nil {
			return *v
		}
		var ret GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext
		return ret
	}).(GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextOutput)
}

// Git commit hash.
func (o GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutput) RevisionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext) *string {
		if v == nil {
			return nil
		}
		return &v.RevisionId
	}).(pulumi.StringPtrOutput)
}

// Git repository URL.
func (o GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// A GitSourceContext denotes a particular revision in a third party Git repository (e.g., GitHub).
type GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextResponse struct {
	// Git commit hash.
	RevisionId string `pulumi:"revisionId"`
	// Git repository URL.
	Url string `pulumi:"url"`
}

// A GitSourceContext denotes a particular revision in a third party Git repository (e.g., GitHub).
type GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextResponseOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextResponse)(nil)).Elem()
}

func (o GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextResponseOutput) ToGoogleDevtoolsContaineranalysisV1alpha1GitSourceContextResponseOutput() GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextResponseOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextResponseOutput) ToGoogleDevtoolsContaineranalysisV1alpha1GitSourceContextResponseOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextResponseOutput {
	return o
}

// Git commit hash.
func (o GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextResponseOutput) RevisionId() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextResponse) string { return v.RevisionId }).(pulumi.StringOutput)
}

// Git repository URL.
func (o GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextResponseOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextResponse) string { return v.Url }).(pulumi.StringOutput)
}

// Selects a repo using a Google Cloud Platform project ID (e.g., winged-cargo-31) and a repo name within that project.
type GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoId struct {
	// The ID of the project.
	Project *string `pulumi:"project"`
	// The name of the repo. Leave empty for the default repo.
	RepoName *string `pulumi:"repoName"`
}

// GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdInput is an input type that accepts GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdArgs and GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdOutput values.
// You can construct a concrete instance of `GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdInput` via:
//
//	GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdArgs{...}
type GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdInput interface {
	pulumi.Input

	ToGoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdOutput() GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdOutput
	ToGoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdOutputWithContext(context.Context) GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdOutput
}

// Selects a repo using a Google Cloud Platform project ID (e.g., winged-cargo-31) and a repo name within that project.
type GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdArgs struct {
	// The ID of the project.
	Project pulumi.StringPtrInput `pulumi:"project"`
	// The name of the repo. Leave empty for the default repo.
	RepoName pulumi.StringPtrInput `pulumi:"repoName"`
}

func (GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoId)(nil)).Elem()
}

func (i GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdArgs) ToGoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdOutput() GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdOutput {
	return i.ToGoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdOutputWithContext(context.Background())
}

func (i GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdArgs) ToGoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdOutput)
}

func (i GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdArgs) ToGoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutput {
	return i.ToGoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutputWithContext(context.Background())
}

func (i GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdArgs) ToGoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdOutput).ToGoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutputWithContext(ctx)
}

// GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrInput is an input type that accepts GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdArgs, GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtr and GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutput values.
// You can construct a concrete instance of `GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrInput` via:
//
//	        GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdArgs{...}
//
//	or:
//
//	        nil
type GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrInput interface {
	pulumi.Input

	ToGoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutput
	ToGoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutputWithContext(context.Context) GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutput
}

type googleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrType GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdArgs

func GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtr(v *GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdArgs) GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrInput {
	return (*googleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrType)(v)
}

func (*googleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoId)(nil)).Elem()
}

func (i *googleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrType) ToGoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutput {
	return i.ToGoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutputWithContext(context.Background())
}

func (i *googleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrType) ToGoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutput)
}

// Selects a repo using a Google Cloud Platform project ID (e.g., winged-cargo-31) and a repo name within that project.
type GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoId)(nil)).Elem()
}

func (o GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdOutput) ToGoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdOutput() GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdOutput) ToGoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdOutput) ToGoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutput {
	return o.ToGoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutputWithContext(context.Background())
}

func (o GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdOutput) ToGoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoId) *GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoId {
		return &v
	}).(GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutput)
}

// The ID of the project.
func (o GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoId) *string { return v.Project }).(pulumi.StringPtrOutput)
}

// The name of the repo. Leave empty for the default repo.
func (o GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdOutput) RepoName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoId) *string { return v.RepoName }).(pulumi.StringPtrOutput)
}

type GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoId)(nil)).Elem()
}

func (o GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutput) ToGoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutput) ToGoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutput) Elem() GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoId) GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoId {
		if v != nil {
			return *v
		}
		var ret GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoId
		return ret
	}).(GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdOutput)
}

// The ID of the project.
func (o GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoId) *string {
		if v == nil {
			return nil
		}
		return v.Project
	}).(pulumi.StringPtrOutput)
}

// The name of the repo. Leave empty for the default repo.
func (o GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutput) RepoName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoId) *string {
		if v == nil {
			return nil
		}
		return v.RepoName
	}).(pulumi.StringPtrOutput)
}

// Selects a repo using a Google Cloud Platform project ID (e.g., winged-cargo-31) and a repo name within that project.
type GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdResponse struct {
	// The ID of the project.
	Project string `pulumi:"project"`
	// The name of the repo. Leave empty for the default repo.
	RepoName string `pulumi:"repoName"`
}

// Selects a repo using a Google Cloud Platform project ID (e.g., winged-cargo-31) and a repo name within that project.
type GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdResponseOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdResponse)(nil)).Elem()
}

func (o GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdResponseOutput) ToGoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdResponseOutput() GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdResponseOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdResponseOutput) ToGoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdResponseOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdResponseOutput {
	return o
}

// The ID of the project.
func (o GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdResponseOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdResponse) string { return v.Project }).(pulumi.StringOutput)
}

// The name of the repo. Leave empty for the default repo.
func (o GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdResponseOutput) RepoName() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdResponse) string { return v.RepoName }).(pulumi.StringOutput)
}

// A unique identifier for a Cloud Repo.
type GoogleDevtoolsContaineranalysisV1alpha1RepoId struct {
	// A combination of a project ID and a repo name.
	ProjectRepoId *GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoId `pulumi:"projectRepoId"`
	// A server-assigned, globally unique identifier.
	Uid *string `pulumi:"uid"`
}

// GoogleDevtoolsContaineranalysisV1alpha1RepoIdInput is an input type that accepts GoogleDevtoolsContaineranalysisV1alpha1RepoIdArgs and GoogleDevtoolsContaineranalysisV1alpha1RepoIdOutput values.
// You can construct a concrete instance of `GoogleDevtoolsContaineranalysisV1alpha1RepoIdInput` via:
//
//	GoogleDevtoolsContaineranalysisV1alpha1RepoIdArgs{...}
type GoogleDevtoolsContaineranalysisV1alpha1RepoIdInput interface {
	pulumi.Input

	ToGoogleDevtoolsContaineranalysisV1alpha1RepoIdOutput() GoogleDevtoolsContaineranalysisV1alpha1RepoIdOutput
	ToGoogleDevtoolsContaineranalysisV1alpha1RepoIdOutputWithContext(context.Context) GoogleDevtoolsContaineranalysisV1alpha1RepoIdOutput
}

// A unique identifier for a Cloud Repo.
type GoogleDevtoolsContaineranalysisV1alpha1RepoIdArgs struct {
	// A combination of a project ID and a repo name.
	ProjectRepoId GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrInput `pulumi:"projectRepoId"`
	// A server-assigned, globally unique identifier.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (GoogleDevtoolsContaineranalysisV1alpha1RepoIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1RepoId)(nil)).Elem()
}

func (i GoogleDevtoolsContaineranalysisV1alpha1RepoIdArgs) ToGoogleDevtoolsContaineranalysisV1alpha1RepoIdOutput() GoogleDevtoolsContaineranalysisV1alpha1RepoIdOutput {
	return i.ToGoogleDevtoolsContaineranalysisV1alpha1RepoIdOutputWithContext(context.Background())
}

func (i GoogleDevtoolsContaineranalysisV1alpha1RepoIdArgs) ToGoogleDevtoolsContaineranalysisV1alpha1RepoIdOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1RepoIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsContaineranalysisV1alpha1RepoIdOutput)
}

func (i GoogleDevtoolsContaineranalysisV1alpha1RepoIdArgs) ToGoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutput {
	return i.ToGoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutputWithContext(context.Background())
}

func (i GoogleDevtoolsContaineranalysisV1alpha1RepoIdArgs) ToGoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsContaineranalysisV1alpha1RepoIdOutput).ToGoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutputWithContext(ctx)
}

// GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrInput is an input type that accepts GoogleDevtoolsContaineranalysisV1alpha1RepoIdArgs, GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtr and GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutput values.
// You can construct a concrete instance of `GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrInput` via:
//
//	        GoogleDevtoolsContaineranalysisV1alpha1RepoIdArgs{...}
//
//	or:
//
//	        nil
type GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrInput interface {
	pulumi.Input

	ToGoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutput
	ToGoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutputWithContext(context.Context) GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutput
}

type googleDevtoolsContaineranalysisV1alpha1RepoIdPtrType GoogleDevtoolsContaineranalysisV1alpha1RepoIdArgs

func GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtr(v *GoogleDevtoolsContaineranalysisV1alpha1RepoIdArgs) GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrInput {
	return (*googleDevtoolsContaineranalysisV1alpha1RepoIdPtrType)(v)
}

func (*googleDevtoolsContaineranalysisV1alpha1RepoIdPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleDevtoolsContaineranalysisV1alpha1RepoId)(nil)).Elem()
}

func (i *googleDevtoolsContaineranalysisV1alpha1RepoIdPtrType) ToGoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutput {
	return i.ToGoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutputWithContext(context.Background())
}

func (i *googleDevtoolsContaineranalysisV1alpha1RepoIdPtrType) ToGoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutput)
}

// A unique identifier for a Cloud Repo.
type GoogleDevtoolsContaineranalysisV1alpha1RepoIdOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsContaineranalysisV1alpha1RepoIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1RepoId)(nil)).Elem()
}

func (o GoogleDevtoolsContaineranalysisV1alpha1RepoIdOutput) ToGoogleDevtoolsContaineranalysisV1alpha1RepoIdOutput() GoogleDevtoolsContaineranalysisV1alpha1RepoIdOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1RepoIdOutput) ToGoogleDevtoolsContaineranalysisV1alpha1RepoIdOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1RepoIdOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1RepoIdOutput) ToGoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutput {
	return o.ToGoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutputWithContext(context.Background())
}

func (o GoogleDevtoolsContaineranalysisV1alpha1RepoIdOutput) ToGoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleDevtoolsContaineranalysisV1alpha1RepoId) *GoogleDevtoolsContaineranalysisV1alpha1RepoId {
		return &v
	}).(GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutput)
}

// A combination of a project ID and a repo name.
func (o GoogleDevtoolsContaineranalysisV1alpha1RepoIdOutput) ProjectRepoId() GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1RepoId) *GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoId {
		return v.ProjectRepoId
	}).(GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutput)
}

// A server-assigned, globally unique identifier.
func (o GoogleDevtoolsContaineranalysisV1alpha1RepoIdOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1RepoId) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleDevtoolsContaineranalysisV1alpha1RepoId)(nil)).Elem()
}

func (o GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutput) ToGoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutput) ToGoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutput) Elem() GoogleDevtoolsContaineranalysisV1alpha1RepoIdOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1RepoId) GoogleDevtoolsContaineranalysisV1alpha1RepoId {
		if v != nil {
			return *v
		}
		var ret GoogleDevtoolsContaineranalysisV1alpha1RepoId
		return ret
	}).(GoogleDevtoolsContaineranalysisV1alpha1RepoIdOutput)
}

// A combination of a project ID and a repo name.
func (o GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutput) ProjectRepoId() GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1RepoId) *GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoId {
		if v == nil {
			return nil
		}
		return v.ProjectRepoId
	}).(GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutput)
}

// A server-assigned, globally unique identifier.
func (o GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1RepoId) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

// A unique identifier for a Cloud Repo.
type GoogleDevtoolsContaineranalysisV1alpha1RepoIdResponse struct {
	// A combination of a project ID and a repo name.
	ProjectRepoId GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdResponse `pulumi:"projectRepoId"`
	// A server-assigned, globally unique identifier.
	Uid string `pulumi:"uid"`
}

// A unique identifier for a Cloud Repo.
type GoogleDevtoolsContaineranalysisV1alpha1RepoIdResponseOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsContaineranalysisV1alpha1RepoIdResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1RepoIdResponse)(nil)).Elem()
}

func (o GoogleDevtoolsContaineranalysisV1alpha1RepoIdResponseOutput) ToGoogleDevtoolsContaineranalysisV1alpha1RepoIdResponseOutput() GoogleDevtoolsContaineranalysisV1alpha1RepoIdResponseOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1RepoIdResponseOutput) ToGoogleDevtoolsContaineranalysisV1alpha1RepoIdResponseOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1RepoIdResponseOutput {
	return o
}

// A combination of a project ID and a repo name.
func (o GoogleDevtoolsContaineranalysisV1alpha1RepoIdResponseOutput) ProjectRepoId() GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdResponseOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1RepoIdResponse) GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdResponse {
		return v.ProjectRepoId
	}).(GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdResponseOutput)
}

// A server-assigned, globally unique identifier.
func (o GoogleDevtoolsContaineranalysisV1alpha1RepoIdResponseOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1RepoIdResponse) string { return v.Uid }).(pulumi.StringOutput)
}

// Identifies the entity that executed the recipe, which is trusted to have correctly performed the operation and populated this provenance.
type GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilder struct {
	// URI indicating the builder’s identity.
	Id *string `pulumi:"id"`
}

// GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderInput is an input type that accepts GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderArgs and GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderOutput values.
// You can construct a concrete instance of `GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderInput` via:
//
//	GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderArgs{...}
type GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderInput interface {
	pulumi.Input

	ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderOutput() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderOutput
	ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderOutputWithContext(context.Context) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderOutput
}

// Identifies the entity that executed the recipe, which is trusted to have correctly performed the operation and populated this provenance.
type GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderArgs struct {
	// URI indicating the builder’s identity.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilder)(nil)).Elem()
}

func (i GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderArgs) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderOutput() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderOutput {
	return i.ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderOutputWithContext(context.Background())
}

func (i GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderArgs) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderOutput)
}

func (i GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderArgs) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderPtrOutput {
	return i.ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderPtrOutputWithContext(context.Background())
}

func (i GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderArgs) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderOutput).ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderPtrOutputWithContext(ctx)
}

// GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderPtrInput is an input type that accepts GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderArgs, GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderPtr and GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderPtrOutput values.
// You can construct a concrete instance of `GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderPtrInput` via:
//
//	        GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderArgs{...}
//
//	or:
//
//	        nil
type GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderPtrInput interface {
	pulumi.Input

	ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderPtrOutput
	ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderPtrOutputWithContext(context.Context) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderPtrOutput
}

type googleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderPtrType GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderArgs

func GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderPtr(v *GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderArgs) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderPtrInput {
	return (*googleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderPtrType)(v)
}

func (*googleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilder)(nil)).Elem()
}

func (i *googleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderPtrType) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderPtrOutput {
	return i.ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderPtrOutputWithContext(context.Background())
}

func (i *googleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderPtrType) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderPtrOutput)
}

// Identifies the entity that executed the recipe, which is trusted to have correctly performed the operation and populated this provenance.
type GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilder)(nil)).Elem()
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderOutput() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderPtrOutput {
	return o.ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderPtrOutputWithContext(context.Background())
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilder) *GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilder {
		return &v
	}).(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderPtrOutput)
}

// URI indicating the builder’s identity.
func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilder) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderPtrOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilder)(nil)).Elem()
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderPtrOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderPtrOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderPtrOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderPtrOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderPtrOutput) Elem() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilder) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilder {
		if v != nil {
			return *v
		}
		var ret GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilder
		return ret
	}).(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderOutput)
}

// URI indicating the builder’s identity.
func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilder) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Identifies the entity that executed the recipe, which is trusted to have correctly performed the operation and populated this provenance.
type GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderResponse struct {
}

// Identifies the entity that executed the recipe, which is trusted to have correctly performed the operation and populated this provenance.
type GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderResponseOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderResponse)(nil)).Elem()
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderResponseOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderResponseOutput() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderResponseOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderResponseOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderResponseOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderResponseOutput {
	return o
}

// Indicates that the builder claims certain fields in this message to be complete.
type GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompleteness struct {
	// If true, the builder claims that invocation.environment is complete.
	Environment *bool `pulumi:"environment"`
	// If true, the builder claims that materials is complete.
	Materials *bool `pulumi:"materials"`
	// If true, the builder claims that invocation.parameters is complete.
	Parameters *bool `pulumi:"parameters"`
}

// GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessInput is an input type that accepts GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessArgs and GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessOutput values.
// You can construct a concrete instance of `GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessInput` via:
//
//	GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessArgs{...}
type GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessInput interface {
	pulumi.Input

	ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessOutput() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessOutput
	ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessOutputWithContext(context.Context) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessOutput
}

// Indicates that the builder claims certain fields in this message to be complete.
type GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessArgs struct {
	// If true, the builder claims that invocation.environment is complete.
	Environment pulumi.BoolPtrInput `pulumi:"environment"`
	// If true, the builder claims that materials is complete.
	Materials pulumi.BoolPtrInput `pulumi:"materials"`
	// If true, the builder claims that invocation.parameters is complete.
	Parameters pulumi.BoolPtrInput `pulumi:"parameters"`
}

func (GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompleteness)(nil)).Elem()
}

func (i GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessArgs) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessOutput() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessOutput {
	return i.ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessOutputWithContext(context.Background())
}

func (i GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessArgs) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessOutput)
}

func (i GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessArgs) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutput {
	return i.ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutputWithContext(context.Background())
}

func (i GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessArgs) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessOutput).ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutputWithContext(ctx)
}

// GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessPtrInput is an input type that accepts GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessArgs, GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessPtr and GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutput values.
// You can construct a concrete instance of `GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessPtrInput` via:
//
//	        GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessArgs{...}
//
//	or:
//
//	        nil
type GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessPtrInput interface {
	pulumi.Input

	ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutput
	ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutputWithContext(context.Context) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutput
}

type googleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessPtrType GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessArgs

func GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessPtr(v *GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessArgs) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessPtrInput {
	return (*googleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessPtrType)(v)
}

func (*googleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompleteness)(nil)).Elem()
}

func (i *googleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessPtrType) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutput {
	return i.ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutputWithContext(context.Background())
}

func (i *googleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessPtrType) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutput)
}

// Indicates that the builder claims certain fields in this message to be complete.
type GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompleteness)(nil)).Elem()
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessOutput() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutput {
	return o.ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutputWithContext(context.Background())
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompleteness) *GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompleteness {
		return &v
	}).(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutput)
}

// If true, the builder claims that invocation.environment is complete.
func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessOutput) Environment() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompleteness) *bool {
		return v.Environment
	}).(pulumi.BoolPtrOutput)
}

// If true, the builder claims that materials is complete.
func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessOutput) Materials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompleteness) *bool {
		return v.Materials
	}).(pulumi.BoolPtrOutput)
}

// If true, the builder claims that invocation.parameters is complete.
func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessOutput) Parameters() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompleteness) *bool {
		return v.Parameters
	}).(pulumi.BoolPtrOutput)
}

type GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompleteness)(nil)).Elem()
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutput) Elem() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompleteness) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompleteness {
		if v != nil {
			return *v
		}
		var ret GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompleteness
		return ret
	}).(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessOutput)
}

// If true, the builder claims that invocation.environment is complete.
func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutput) Environment() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompleteness) *bool {
		if v == nil {
			return nil
		}
		return v.Environment
	}).(pulumi.BoolPtrOutput)
}

// If true, the builder claims that materials is complete.
func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutput) Materials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompleteness) *bool {
		if v == nil {
			return nil
		}
		return v.Materials
	}).(pulumi.BoolPtrOutput)
}

// If true, the builder claims that invocation.parameters is complete.
func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutput) Parameters() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompleteness) *bool {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.BoolPtrOutput)
}

// Indicates that the builder claims certain fields in this message to be complete.
type GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessResponse struct {
	// If true, the builder claims that invocation.environment is complete.
	Environment bool `pulumi:"environment"`
	// If true, the builder claims that materials is complete.
	Materials bool `pulumi:"materials"`
	// If true, the builder claims that invocation.parameters is complete.
	Parameters bool `pulumi:"parameters"`
}

// Indicates that the builder claims certain fields in this message to be complete.
type GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessResponseOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessResponse)(nil)).Elem()
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessResponseOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessResponseOutput() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessResponseOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessResponseOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessResponseOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessResponseOutput {
	return o
}

// If true, the builder claims that invocation.environment is complete.
func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessResponseOutput) Environment() pulumi.BoolOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessResponse) bool {
		return v.Environment
	}).(pulumi.BoolOutput)
}

// If true, the builder claims that materials is complete.
func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessResponseOutput) Materials() pulumi.BoolOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessResponse) bool {
		return v.Materials
	}).(pulumi.BoolOutput)
}

// If true, the builder claims that invocation.parameters is complete.
func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessResponseOutput) Parameters() pulumi.BoolOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessResponse) bool {
		return v.Parameters
	}).(pulumi.BoolOutput)
}

// Describes where the config file that kicked off the build came from. This is effectively a pointer to the source where buildConfig came from.
type GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSource struct {
	// Collection of cryptographic digests for the contents of the artifact specified by invocation.configSource.uri.
	Digest map[string]string `pulumi:"digest"`
	// String identifying the entry point into the build.
	EntryPoint *string `pulumi:"entryPoint"`
	// URI indicating the identity of the source of the config.
	Uri *string `pulumi:"uri"`
}

// GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceInput is an input type that accepts GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceArgs and GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceOutput values.
// You can construct a concrete instance of `GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceInput` via:
//
//	GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceArgs{...}
type GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceInput interface {
	pulumi.Input

	ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceOutput() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceOutput
	ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceOutputWithContext(context.Context) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceOutput
}

// Describes where the config file that kicked off the build came from. This is effectively a pointer to the source where buildConfig came from.
type GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceArgs struct {
	// Collection of cryptographic digests for the contents of the artifact specified by invocation.configSource.uri.
	Digest pulumi.StringMapInput `pulumi:"digest"`
	// String identifying the entry point into the build.
	EntryPoint pulumi.StringPtrInput `pulumi:"entryPoint"`
	// URI indicating the identity of the source of the config.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

func (GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSource)(nil)).Elem()
}

func (i GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceArgs) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceOutput() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceOutput {
	return i.ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceOutputWithContext(context.Background())
}

func (i GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceArgs) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceOutput)
}

func (i GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceArgs) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutput() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutput {
	return i.ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutputWithContext(context.Background())
}

func (i GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceArgs) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceOutput).ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutputWithContext(ctx)
}

// GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourcePtrInput is an input type that accepts GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceArgs, GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourcePtr and GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutput values.
// You can construct a concrete instance of `GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourcePtrInput` via:
//
//	        GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceArgs{...}
//
//	or:
//
//	        nil
type GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourcePtrInput interface {
	pulumi.Input

	ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutput() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutput
	ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutputWithContext(context.Context) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutput
}

type googleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourcePtrType GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceArgs

func GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourcePtr(v *GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceArgs) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourcePtrInput {
	return (*googleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourcePtrType)(v)
}

func (*googleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSource)(nil)).Elem()
}

func (i *googleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourcePtrType) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutput() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutput {
	return i.ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutputWithContext(context.Background())
}

func (i *googleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourcePtrType) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutput)
}

// Describes where the config file that kicked off the build came from. This is effectively a pointer to the source where buildConfig came from.
type GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSource)(nil)).Elem()
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceOutput() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutput() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutput {
	return o.ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutputWithContext(context.Background())
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSource) *GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSource {
		return &v
	}).(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutput)
}

// Collection of cryptographic digests for the contents of the artifact specified by invocation.configSource.uri.
func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceOutput) Digest() pulumi.StringMapOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSource) map[string]string {
		return v.Digest
	}).(pulumi.StringMapOutput)
}

// String identifying the entry point into the build.
func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceOutput) EntryPoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSource) *string {
		return v.EntryPoint
	}).(pulumi.StringPtrOutput)
}

// URI indicating the identity of the source of the config.
func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSource) *string {
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

type GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSource)(nil)).Elem()
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutput() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutput) Elem() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSource) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSource {
		if v != nil {
			return *v
		}
		var ret GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSource
		return ret
	}).(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceOutput)
}

// Collection of cryptographic digests for the contents of the artifact specified by invocation.configSource.uri.
func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutput) Digest() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSource) map[string]string {
		if v == nil {
			return nil
		}
		return v.Digest
	}).(pulumi.StringMapOutput)
}

// String identifying the entry point into the build.
func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutput) EntryPoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSource) *string {
		if v == nil {
			return nil
		}
		return v.EntryPoint
	}).(pulumi.StringPtrOutput)
}

// URI indicating the identity of the source of the config.
func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSource) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

// Describes where the config file that kicked off the build came from. This is effectively a pointer to the source where buildConfig came from.
type GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceResponse struct {
	// Collection of cryptographic digests for the contents of the artifact specified by invocation.configSource.uri.
	Digest map[string]string `pulumi:"digest"`
	// String identifying the entry point into the build.
	EntryPoint string `pulumi:"entryPoint"`
	// URI indicating the identity of the source of the config.
	Uri string `pulumi:"uri"`
}

// Describes where the config file that kicked off the build came from. This is effectively a pointer to the source where buildConfig came from.
type GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceResponseOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceResponse)(nil)).Elem()
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceResponseOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceResponseOutput() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceResponseOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceResponseOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceResponseOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceResponseOutput {
	return o
}

// Collection of cryptographic digests for the contents of the artifact specified by invocation.configSource.uri.
func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceResponseOutput) Digest() pulumi.StringMapOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceResponse) map[string]string {
		return v.Digest
	}).(pulumi.StringMapOutput)
}

// String identifying the entry point into the build.
func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceResponseOutput) EntryPoint() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceResponse) string {
		return v.EntryPoint
	}).(pulumi.StringOutput)
}

// URI indicating the identity of the source of the config.
func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceResponse) string {
		return v.Uri
	}).(pulumi.StringOutput)
}

// Identifies the event that kicked off the build.
type GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocation struct {
	// Describes where the config file that kicked off the build came from.
	ConfigSource *GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSource `pulumi:"configSource"`
	// Any other builder-controlled inputs necessary for correctly evaluating the build.
	Environment map[string]interface{} `pulumi:"environment"`
	// Collection of all external inputs that influenced the build on top of invocation.configSource.
	Parameters map[string]interface{} `pulumi:"parameters"`
}

// GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationInput is an input type that accepts GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationArgs and GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationOutput values.
// You can construct a concrete instance of `GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationInput` via:
//
//	GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationArgs{...}
type GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationInput interface {
	pulumi.Input

	ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationOutput() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationOutput
	ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationOutputWithContext(context.Context) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationOutput
}

// Identifies the event that kicked off the build.
type GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationArgs struct {
	// Describes where the config file that kicked off the build came from.
	ConfigSource GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourcePtrInput `pulumi:"configSource"`
	// Any other builder-controlled inputs necessary for correctly evaluating the build.
	Environment pulumi.MapInput `pulumi:"environment"`
	// Collection of all external inputs that influenced the build on top of invocation.configSource.
	Parameters pulumi.MapInput `pulumi:"parameters"`
}

func (GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocation)(nil)).Elem()
}

func (i GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationArgs) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationOutput() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationOutput {
	return i.ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationOutputWithContext(context.Background())
}

func (i GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationArgs) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationOutput)
}

func (i GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationArgs) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationPtrOutput {
	return i.ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationPtrOutputWithContext(context.Background())
}

func (i GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationArgs) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationOutput).ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationPtrOutputWithContext(ctx)
}

// GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationPtrInput is an input type that accepts GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationArgs, GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationPtr and GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationPtrOutput values.
// You can construct a concrete instance of `GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationPtrInput` via:
//
//	        GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationArgs{...}
//
//	or:
//
//	        nil
type GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationPtrInput interface {
	pulumi.Input

	ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationPtrOutput
	ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationPtrOutputWithContext(context.Context) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationPtrOutput
}

type googleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationPtrType GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationArgs

func GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationPtr(v *GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationArgs) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationPtrInput {
	return (*googleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationPtrType)(v)
}

func (*googleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocation)(nil)).Elem()
}

func (i *googleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationPtrType) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationPtrOutput {
	return i.ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationPtrOutputWithContext(context.Background())
}

func (i *googleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationPtrType) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationPtrOutput)
}

// Identifies the event that kicked off the build.
type GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocation)(nil)).Elem()
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationOutput() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationPtrOutput {
	return o.ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationPtrOutputWithContext(context.Background())
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocation) *GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocation {
		return &v
	}).(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationPtrOutput)
}

// Describes where the config file that kicked off the build came from.
func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationOutput) ConfigSource() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocation) *GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSource {
		return v.ConfigSource
	}).(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutput)
}

// Any other builder-controlled inputs necessary for correctly evaluating the build.
func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationOutput) Environment() pulumi.MapOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocation) map[string]interface{} {
		return v.Environment
	}).(pulumi.MapOutput)
}

// Collection of all external inputs that influenced the build on top of invocation.configSource.
func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocation) map[string]interface{} {
		return v.Parameters
	}).(pulumi.MapOutput)
}

type GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationPtrOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocation)(nil)).Elem()
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationPtrOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationPtrOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationPtrOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationPtrOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationPtrOutput) Elem() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocation) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocation {
		if v != nil {
			return *v
		}
		var ret GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocation
		return ret
	}).(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationOutput)
}

// Describes where the config file that kicked off the build came from.
func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationPtrOutput) ConfigSource() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocation) *GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSource {
		if v == nil {
			return nil
		}
		return v.ConfigSource
	}).(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutput)
}

// Any other builder-controlled inputs necessary for correctly evaluating the build.
func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationPtrOutput) Environment() pulumi.MapOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocation) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Environment
	}).(pulumi.MapOutput)
}

// Collection of all external inputs that influenced the build on top of invocation.configSource.
func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationPtrOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocation) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.MapOutput)
}

// Identifies the event that kicked off the build.
type GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationResponse struct {
	// Describes where the config file that kicked off the build came from.
	ConfigSource GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceResponse `pulumi:"configSource"`
	// Any other builder-controlled inputs necessary for correctly evaluating the build.
	Environment map[string]interface{} `pulumi:"environment"`
	// Collection of all external inputs that influenced the build on top of invocation.configSource.
	Parameters map[string]interface{} `pulumi:"parameters"`
}

// Identifies the event that kicked off the build.
type GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationResponseOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationResponse)(nil)).Elem()
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationResponseOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationResponseOutput() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationResponseOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationResponseOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationResponseOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationResponseOutput {
	return o
}

// Describes where the config file that kicked off the build came from.
func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationResponseOutput) ConfigSource() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceResponseOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationResponse) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceResponse {
		return v.ConfigSource
	}).(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceResponseOutput)
}

// Any other builder-controlled inputs necessary for correctly evaluating the build.
func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationResponseOutput) Environment() pulumi.MapOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationResponse) map[string]interface{} {
		return v.Environment
	}).(pulumi.MapOutput)
}

// Collection of all external inputs that influenced the build on top of invocation.configSource.
func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationResponseOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationResponse) map[string]interface{} {
		return v.Parameters
	}).(pulumi.MapOutput)
}

// The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on.
type GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterial struct {
	// Collection of cryptographic digests for the contents of this artifact.
	Digest map[string]string `pulumi:"digest"`
	// The method by which this artifact was referenced during the build.
	Uri *string `pulumi:"uri"`
}

// GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialInput is an input type that accepts GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialArgs and GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialOutput values.
// You can construct a concrete instance of `GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialInput` via:
//
//	GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialArgs{...}
type GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialInput interface {
	pulumi.Input

	ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialOutput() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialOutput
	ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialOutputWithContext(context.Context) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialOutput
}

// The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on.
type GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialArgs struct {
	// Collection of cryptographic digests for the contents of this artifact.
	Digest pulumi.StringMapInput `pulumi:"digest"`
	// The method by which this artifact was referenced during the build.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

func (GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterial)(nil)).Elem()
}

func (i GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialArgs) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialOutput() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialOutput {
	return i.ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialOutputWithContext(context.Background())
}

func (i GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialArgs) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialOutput)
}

// GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialArrayInput is an input type that accepts GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialArray and GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialArrayOutput values.
// You can construct a concrete instance of `GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialArrayInput` via:
//
//	GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialArray{ GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialArgs{...} }
type GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialArrayInput interface {
	pulumi.Input

	ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialArrayOutput() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialArrayOutput
	ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialArrayOutputWithContext(context.Context) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialArrayOutput
}

type GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialArray []GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialInput

func (GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterial)(nil)).Elem()
}

func (i GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialArray) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialArrayOutput() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialArrayOutput {
	return i.ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialArrayOutputWithContext(context.Background())
}

func (i GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialArray) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialArrayOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialArrayOutput)
}

// The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on.
type GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterial)(nil)).Elem()
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialOutput() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialOutput {
	return o
}

// Collection of cryptographic digests for the contents of this artifact.
func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialOutput) Digest() pulumi.StringMapOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterial) map[string]string {
		return v.Digest
	}).(pulumi.StringMapOutput)
}

// The method by which this artifact was referenced during the build.
func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterial) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialArrayOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterial)(nil)).Elem()
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialArrayOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialArrayOutput() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialArrayOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialArrayOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialArrayOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialArrayOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialArrayOutput) Index(i pulumi.IntInput) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterial {
		return vs[0].([]GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterial)[vs[1].(int)]
	}).(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialOutput)
}

// The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on.
type GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialResponse struct {
	// Collection of cryptographic digests for the contents of this artifact.
	Digest map[string]string `pulumi:"digest"`
	// The method by which this artifact was referenced during the build.
	Uri string `pulumi:"uri"`
}

// The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on.
type GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialResponseOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialResponse)(nil)).Elem()
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialResponseOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialResponseOutput() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialResponseOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialResponseOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialResponseOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialResponseOutput {
	return o
}

// Collection of cryptographic digests for the contents of this artifact.
func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialResponseOutput) Digest() pulumi.StringMapOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialResponse) map[string]string {
		return v.Digest
	}).(pulumi.StringMapOutput)
}

// The method by which this artifact was referenced during the build.
func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialResponse) string {
		return v.Uri
	}).(pulumi.StringOutput)
}

type GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialResponseArrayOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialResponse)(nil)).Elem()
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialResponseArrayOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialResponseArrayOutput() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialResponseArrayOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialResponseArrayOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialResponseArrayOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialResponseArrayOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialResponseArrayOutput) Index(i pulumi.IntInput) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialResponse {
		return vs[0].([]GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialResponse)[vs[1].(int)]
	}).(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialResponseOutput)
}

// Other properties of the build.
type GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadata struct {
	// The timestamp of when the build completed.
	BuildFinishedOn *string `pulumi:"buildFinishedOn"`
	// Identifies this particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis.
	BuildInvocationId *string `pulumi:"buildInvocationId"`
	// The timestamp of when the build started.
	BuildStartedOn *string `pulumi:"buildStartedOn"`
	// Indicates that the builder claims certain fields in this message to be complete.
	Completeness *GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompleteness `pulumi:"completeness"`
	// If true, the builder claims that running invocation on materials will produce bit-for-bit identical output.
	Reproducible *bool `pulumi:"reproducible"`
}

// GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataInput is an input type that accepts GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataArgs and GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataOutput values.
// You can construct a concrete instance of `GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataInput` via:
//
//	GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataArgs{...}
type GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataInput interface {
	pulumi.Input

	ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataOutput() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataOutput
	ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataOutputWithContext(context.Context) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataOutput
}

// Other properties of the build.
type GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataArgs struct {
	// The timestamp of when the build completed.
	BuildFinishedOn pulumi.StringPtrInput `pulumi:"buildFinishedOn"`
	// Identifies this particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis.
	BuildInvocationId pulumi.StringPtrInput `pulumi:"buildInvocationId"`
	// The timestamp of when the build started.
	BuildStartedOn pulumi.StringPtrInput `pulumi:"buildStartedOn"`
	// Indicates that the builder claims certain fields in this message to be complete.
	Completeness GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessPtrInput `pulumi:"completeness"`
	// If true, the builder claims that running invocation on materials will produce bit-for-bit identical output.
	Reproducible pulumi.BoolPtrInput `pulumi:"reproducible"`
}

func (GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadata)(nil)).Elem()
}

func (i GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataArgs) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataOutput() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataOutput {
	return i.ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataOutputWithContext(context.Background())
}

func (i GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataArgs) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataOutput)
}

func (i GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataArgs) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput {
	return i.ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataPtrOutputWithContext(context.Background())
}

func (i GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataArgs) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataOutput).ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataPtrOutputWithContext(ctx)
}

// GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataPtrInput is an input type that accepts GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataArgs, GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataPtr and GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput values.
// You can construct a concrete instance of `GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataPtrInput` via:
//
//	        GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataArgs{...}
//
//	or:
//
//	        nil
type GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataPtrInput interface {
	pulumi.Input

	ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput
	ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataPtrOutputWithContext(context.Context) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput
}

type googleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataPtrType GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataArgs

func GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataPtr(v *GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataArgs) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataPtrInput {
	return (*googleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataPtrType)(v)
}

func (*googleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadata)(nil)).Elem()
}

func (i *googleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataPtrType) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput {
	return i.ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataPtrOutputWithContext(context.Background())
}

func (i *googleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataPtrType) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput)
}

// Other properties of the build.
type GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadata)(nil)).Elem()
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataOutput() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput {
	return o.ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataPtrOutputWithContext(context.Background())
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadata) *GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadata {
		return &v
	}).(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput)
}

// The timestamp of when the build completed.
func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataOutput) BuildFinishedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadata) *string {
		return v.BuildFinishedOn
	}).(pulumi.StringPtrOutput)
}

// Identifies this particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis.
func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataOutput) BuildInvocationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadata) *string {
		return v.BuildInvocationId
	}).(pulumi.StringPtrOutput)
}

// The timestamp of when the build started.
func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataOutput) BuildStartedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadata) *string {
		return v.BuildStartedOn
	}).(pulumi.StringPtrOutput)
}

// Indicates that the builder claims certain fields in this message to be complete.
func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataOutput) Completeness() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadata) *GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompleteness {
		return v.Completeness
	}).(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutput)
}

// If true, the builder claims that running invocation on materials will produce bit-for-bit identical output.
func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataOutput) Reproducible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadata) *bool {
		return v.Reproducible
	}).(pulumi.BoolPtrOutput)
}

type GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadata)(nil)).Elem()
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput) Elem() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadata) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadata {
		if v != nil {
			return *v
		}
		var ret GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadata
		return ret
	}).(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataOutput)
}

// The timestamp of when the build completed.
func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput) BuildFinishedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadata) *string {
		if v == nil {
			return nil
		}
		return v.BuildFinishedOn
	}).(pulumi.StringPtrOutput)
}

// Identifies this particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis.
func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput) BuildInvocationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadata) *string {
		if v == nil {
			return nil
		}
		return v.BuildInvocationId
	}).(pulumi.StringPtrOutput)
}

// The timestamp of when the build started.
func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput) BuildStartedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadata) *string {
		if v == nil {
			return nil
		}
		return v.BuildStartedOn
	}).(pulumi.StringPtrOutput)
}

// Indicates that the builder claims certain fields in this message to be complete.
func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput) Completeness() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadata) *GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompleteness {
		if v == nil {
			return nil
		}
		return v.Completeness
	}).(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutput)
}

// If true, the builder claims that running invocation on materials will produce bit-for-bit identical output.
func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput) Reproducible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadata) *bool {
		if v == nil {
			return nil
		}
		return v.Reproducible
	}).(pulumi.BoolPtrOutput)
}

// Other properties of the build.
type GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataResponse struct {
	// The timestamp of when the build completed.
	BuildFinishedOn string `pulumi:"buildFinishedOn"`
	// Identifies this particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis.
	BuildInvocationId string `pulumi:"buildInvocationId"`
	// The timestamp of when the build started.
	BuildStartedOn string `pulumi:"buildStartedOn"`
	// Indicates that the builder claims certain fields in this message to be complete.
	Completeness GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessResponse `pulumi:"completeness"`
	// If true, the builder claims that running invocation on materials will produce bit-for-bit identical output.
	Reproducible bool `pulumi:"reproducible"`
}

// Other properties of the build.
type GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataResponseOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataResponse)(nil)).Elem()
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataResponseOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataResponseOutput() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataResponseOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataResponseOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataResponseOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataResponseOutput {
	return o
}

// The timestamp of when the build completed.
func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataResponseOutput) BuildFinishedOn() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataResponse) string {
		return v.BuildFinishedOn
	}).(pulumi.StringOutput)
}

// Identifies this particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis.
func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataResponseOutput) BuildInvocationId() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataResponse) string {
		return v.BuildInvocationId
	}).(pulumi.StringOutput)
}

// The timestamp of when the build started.
func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataResponseOutput) BuildStartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataResponse) string {
		return v.BuildStartedOn
	}).(pulumi.StringOutput)
}

// Indicates that the builder claims certain fields in this message to be complete.
func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataResponseOutput) Completeness() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessResponseOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataResponse) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessResponse {
		return v.Completeness
	}).(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessResponseOutput)
}

// If true, the builder claims that running invocation on materials will produce bit-for-bit identical output.
func (o GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataResponseOutput) Reproducible() pulumi.BoolOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataResponse) bool {
		return v.Reproducible
	}).(pulumi.BoolOutput)
}

// A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory.
type GoogleDevtoolsContaineranalysisV1alpha1SourceContext struct {
	// A SourceContext referring to a revision in a Google Cloud Source Repo.
	CloudRepo *GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext `pulumi:"cloudRepo"`
	// A SourceContext referring to a Gerrit project.
	Gerrit *GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext `pulumi:"gerrit"`
	// A SourceContext referring to any third party Git repo (e.g., GitHub).
	Git *GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext `pulumi:"git"`
	// Labels with user defined metadata.
	Labels map[string]string `pulumi:"labels"`
}

// GoogleDevtoolsContaineranalysisV1alpha1SourceContextInput is an input type that accepts GoogleDevtoolsContaineranalysisV1alpha1SourceContextArgs and GoogleDevtoolsContaineranalysisV1alpha1SourceContextOutput values.
// You can construct a concrete instance of `GoogleDevtoolsContaineranalysisV1alpha1SourceContextInput` via:
//
//	GoogleDevtoolsContaineranalysisV1alpha1SourceContextArgs{...}
type GoogleDevtoolsContaineranalysisV1alpha1SourceContextInput interface {
	pulumi.Input

	ToGoogleDevtoolsContaineranalysisV1alpha1SourceContextOutput() GoogleDevtoolsContaineranalysisV1alpha1SourceContextOutput
	ToGoogleDevtoolsContaineranalysisV1alpha1SourceContextOutputWithContext(context.Context) GoogleDevtoolsContaineranalysisV1alpha1SourceContextOutput
}

// A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory.
type GoogleDevtoolsContaineranalysisV1alpha1SourceContextArgs struct {
	// A SourceContext referring to a revision in a Google Cloud Source Repo.
	CloudRepo GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrInput `pulumi:"cloudRepo"`
	// A SourceContext referring to a Gerrit project.
	Gerrit GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrInput `pulumi:"gerrit"`
	// A SourceContext referring to any third party Git repo (e.g., GitHub).
	Git GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrInput `pulumi:"git"`
	// Labels with user defined metadata.
	Labels pulumi.StringMapInput `pulumi:"labels"`
}

func (GoogleDevtoolsContaineranalysisV1alpha1SourceContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1SourceContext)(nil)).Elem()
}

func (i GoogleDevtoolsContaineranalysisV1alpha1SourceContextArgs) ToGoogleDevtoolsContaineranalysisV1alpha1SourceContextOutput() GoogleDevtoolsContaineranalysisV1alpha1SourceContextOutput {
	return i.ToGoogleDevtoolsContaineranalysisV1alpha1SourceContextOutputWithContext(context.Background())
}

func (i GoogleDevtoolsContaineranalysisV1alpha1SourceContextArgs) ToGoogleDevtoolsContaineranalysisV1alpha1SourceContextOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1SourceContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsContaineranalysisV1alpha1SourceContextOutput)
}

func (i GoogleDevtoolsContaineranalysisV1alpha1SourceContextArgs) ToGoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput {
	return i.ToGoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutputWithContext(context.Background())
}

func (i GoogleDevtoolsContaineranalysisV1alpha1SourceContextArgs) ToGoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsContaineranalysisV1alpha1SourceContextOutput).ToGoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutputWithContext(ctx)
}

// GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrInput is an input type that accepts GoogleDevtoolsContaineranalysisV1alpha1SourceContextArgs, GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtr and GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput values.
// You can construct a concrete instance of `GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrInput` via:
//
//	        GoogleDevtoolsContaineranalysisV1alpha1SourceContextArgs{...}
//
//	or:
//
//	        nil
type GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrInput interface {
	pulumi.Input

	ToGoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput
	ToGoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutputWithContext(context.Context) GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput
}

type googleDevtoolsContaineranalysisV1alpha1SourceContextPtrType GoogleDevtoolsContaineranalysisV1alpha1SourceContextArgs

func GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtr(v *GoogleDevtoolsContaineranalysisV1alpha1SourceContextArgs) GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrInput {
	return (*googleDevtoolsContaineranalysisV1alpha1SourceContextPtrType)(v)
}

func (*googleDevtoolsContaineranalysisV1alpha1SourceContextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleDevtoolsContaineranalysisV1alpha1SourceContext)(nil)).Elem()
}

func (i *googleDevtoolsContaineranalysisV1alpha1SourceContextPtrType) ToGoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput {
	return i.ToGoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutputWithContext(context.Background())
}

func (i *googleDevtoolsContaineranalysisV1alpha1SourceContextPtrType) ToGoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput)
}

// GoogleDevtoolsContaineranalysisV1alpha1SourceContextArrayInput is an input type that accepts GoogleDevtoolsContaineranalysisV1alpha1SourceContextArray and GoogleDevtoolsContaineranalysisV1alpha1SourceContextArrayOutput values.
// You can construct a concrete instance of `GoogleDevtoolsContaineranalysisV1alpha1SourceContextArrayInput` via:
//
//	GoogleDevtoolsContaineranalysisV1alpha1SourceContextArray{ GoogleDevtoolsContaineranalysisV1alpha1SourceContextArgs{...} }
type GoogleDevtoolsContaineranalysisV1alpha1SourceContextArrayInput interface {
	pulumi.Input

	ToGoogleDevtoolsContaineranalysisV1alpha1SourceContextArrayOutput() GoogleDevtoolsContaineranalysisV1alpha1SourceContextArrayOutput
	ToGoogleDevtoolsContaineranalysisV1alpha1SourceContextArrayOutputWithContext(context.Context) GoogleDevtoolsContaineranalysisV1alpha1SourceContextArrayOutput
}

type GoogleDevtoolsContaineranalysisV1alpha1SourceContextArray []GoogleDevtoolsContaineranalysisV1alpha1SourceContextInput

func (GoogleDevtoolsContaineranalysisV1alpha1SourceContextArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleDevtoolsContaineranalysisV1alpha1SourceContext)(nil)).Elem()
}

func (i GoogleDevtoolsContaineranalysisV1alpha1SourceContextArray) ToGoogleDevtoolsContaineranalysisV1alpha1SourceContextArrayOutput() GoogleDevtoolsContaineranalysisV1alpha1SourceContextArrayOutput {
	return i.ToGoogleDevtoolsContaineranalysisV1alpha1SourceContextArrayOutputWithContext(context.Background())
}

func (i GoogleDevtoolsContaineranalysisV1alpha1SourceContextArray) ToGoogleDevtoolsContaineranalysisV1alpha1SourceContextArrayOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1SourceContextArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsContaineranalysisV1alpha1SourceContextArrayOutput)
}

// A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory.
type GoogleDevtoolsContaineranalysisV1alpha1SourceContextOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsContaineranalysisV1alpha1SourceContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1SourceContext)(nil)).Elem()
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SourceContextOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SourceContextOutput() GoogleDevtoolsContaineranalysisV1alpha1SourceContextOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SourceContextOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SourceContextOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1SourceContextOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SourceContextOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput {
	return o.ToGoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutputWithContext(context.Background())
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SourceContextOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleDevtoolsContaineranalysisV1alpha1SourceContext) *GoogleDevtoolsContaineranalysisV1alpha1SourceContext {
		return &v
	}).(GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput)
}

// A SourceContext referring to a revision in a Google Cloud Source Repo.
func (o GoogleDevtoolsContaineranalysisV1alpha1SourceContextOutput) CloudRepo() GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1SourceContext) *GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext {
		return v.CloudRepo
	}).(GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutput)
}

// A SourceContext referring to a Gerrit project.
func (o GoogleDevtoolsContaineranalysisV1alpha1SourceContextOutput) Gerrit() GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1SourceContext) *GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext {
		return v.Gerrit
	}).(GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput)
}

// A SourceContext referring to any third party Git repo (e.g., GitHub).
func (o GoogleDevtoolsContaineranalysisV1alpha1SourceContextOutput) Git() GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1SourceContext) *GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext {
		return v.Git
	}).(GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutput)
}

// Labels with user defined metadata.
func (o GoogleDevtoolsContaineranalysisV1alpha1SourceContextOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1SourceContext) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

type GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleDevtoolsContaineranalysisV1alpha1SourceContext)(nil)).Elem()
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput() GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput) Elem() GoogleDevtoolsContaineranalysisV1alpha1SourceContextOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1SourceContext) GoogleDevtoolsContaineranalysisV1alpha1SourceContext {
		if v != nil {
			return *v
		}
		var ret GoogleDevtoolsContaineranalysisV1alpha1SourceContext
		return ret
	}).(GoogleDevtoolsContaineranalysisV1alpha1SourceContextOutput)
}

// A SourceContext referring to a revision in a Google Cloud Source Repo.
func (o GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput) CloudRepo() GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1SourceContext) *GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext {
		if v == nil {
			return nil
		}
		return v.CloudRepo
	}).(GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutput)
}

// A SourceContext referring to a Gerrit project.
func (o GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput) Gerrit() GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1SourceContext) *GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext {
		if v == nil {
			return nil
		}
		return v.Gerrit
	}).(GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput)
}

// A SourceContext referring to any third party Git repo (e.g., GitHub).
func (o GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput) Git() GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1SourceContext) *GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext {
		if v == nil {
			return nil
		}
		return v.Git
	}).(GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutput)
}

// Labels with user defined metadata.
func (o GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GoogleDevtoolsContaineranalysisV1alpha1SourceContext) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

type GoogleDevtoolsContaineranalysisV1alpha1SourceContextArrayOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsContaineranalysisV1alpha1SourceContextArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleDevtoolsContaineranalysisV1alpha1SourceContext)(nil)).Elem()
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SourceContextArrayOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SourceContextArrayOutput() GoogleDevtoolsContaineranalysisV1alpha1SourceContextArrayOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SourceContextArrayOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SourceContextArrayOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1SourceContextArrayOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SourceContextArrayOutput) Index(i pulumi.IntInput) GoogleDevtoolsContaineranalysisV1alpha1SourceContextOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleDevtoolsContaineranalysisV1alpha1SourceContext {
		return vs[0].([]GoogleDevtoolsContaineranalysisV1alpha1SourceContext)[vs[1].(int)]
	}).(GoogleDevtoolsContaineranalysisV1alpha1SourceContextOutput)
}

// A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory.
type GoogleDevtoolsContaineranalysisV1alpha1SourceContextResponse struct {
	// A SourceContext referring to a revision in a Google Cloud Source Repo.
	CloudRepo GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextResponse `pulumi:"cloudRepo"`
	// A SourceContext referring to a Gerrit project.
	Gerrit GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextResponse `pulumi:"gerrit"`
	// A SourceContext referring to any third party Git repo (e.g., GitHub).
	Git GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextResponse `pulumi:"git"`
	// Labels with user defined metadata.
	Labels map[string]string `pulumi:"labels"`
}

// A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory.
type GoogleDevtoolsContaineranalysisV1alpha1SourceContextResponseOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsContaineranalysisV1alpha1SourceContextResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1SourceContextResponse)(nil)).Elem()
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SourceContextResponseOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SourceContextResponseOutput() GoogleDevtoolsContaineranalysisV1alpha1SourceContextResponseOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SourceContextResponseOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SourceContextResponseOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1SourceContextResponseOutput {
	return o
}

// A SourceContext referring to a revision in a Google Cloud Source Repo.
func (o GoogleDevtoolsContaineranalysisV1alpha1SourceContextResponseOutput) CloudRepo() GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextResponseOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1SourceContextResponse) GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextResponse {
		return v.CloudRepo
	}).(GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextResponseOutput)
}

// A SourceContext referring to a Gerrit project.
func (o GoogleDevtoolsContaineranalysisV1alpha1SourceContextResponseOutput) Gerrit() GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextResponseOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1SourceContextResponse) GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextResponse {
		return v.Gerrit
	}).(GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextResponseOutput)
}

// A SourceContext referring to any third party Git repo (e.g., GitHub).
func (o GoogleDevtoolsContaineranalysisV1alpha1SourceContextResponseOutput) Git() GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextResponseOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1SourceContextResponse) GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextResponse {
		return v.Git
	}).(GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextResponseOutput)
}

// Labels with user defined metadata.
func (o GoogleDevtoolsContaineranalysisV1alpha1SourceContextResponseOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v GoogleDevtoolsContaineranalysisV1alpha1SourceContextResponse) map[string]string {
		return v.Labels
	}).(pulumi.StringMapOutput)
}

type GoogleDevtoolsContaineranalysisV1alpha1SourceContextResponseArrayOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsContaineranalysisV1alpha1SourceContextResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleDevtoolsContaineranalysisV1alpha1SourceContextResponse)(nil)).Elem()
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SourceContextResponseArrayOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SourceContextResponseArrayOutput() GoogleDevtoolsContaineranalysisV1alpha1SourceContextResponseArrayOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SourceContextResponseArrayOutput) ToGoogleDevtoolsContaineranalysisV1alpha1SourceContextResponseArrayOutputWithContext(ctx context.Context) GoogleDevtoolsContaineranalysisV1alpha1SourceContextResponseArrayOutput {
	return o
}

func (o GoogleDevtoolsContaineranalysisV1alpha1SourceContextResponseArrayOutput) Index(i pulumi.IntInput) GoogleDevtoolsContaineranalysisV1alpha1SourceContextResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleDevtoolsContaineranalysisV1alpha1SourceContextResponse {
		return vs[0].([]GoogleDevtoolsContaineranalysisV1alpha1SourceContextResponse)[vs[1].(int)]
	}).(GoogleDevtoolsContaineranalysisV1alpha1SourceContextResponseOutput)
}

// Container message for hash values.
type Hash struct {
	// The type of hash that was performed.
	Type *HashType `pulumi:"type"`
	// The hash value.
	Value *string `pulumi:"value"`
}

// HashInput is an input type that accepts HashArgs and HashOutput values.
// You can construct a concrete instance of `HashInput` via:
//
//	HashArgs{...}
type HashInput interface {
	pulumi.Input

	ToHashOutput() HashOutput
	ToHashOutputWithContext(context.Context) HashOutput
}

// Container message for hash values.
type HashArgs struct {
	// The type of hash that was performed.
	Type HashTypePtrInput `pulumi:"type"`
	// The hash value.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (HashArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Hash)(nil)).Elem()
}

func (i HashArgs) ToHashOutput() HashOutput {
	return i.ToHashOutputWithContext(context.Background())
}

func (i HashArgs) ToHashOutputWithContext(ctx context.Context) HashOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HashOutput)
}

func (i HashArgs) ToHashPtrOutput() HashPtrOutput {
	return i.ToHashPtrOutputWithContext(context.Background())
}

func (i HashArgs) ToHashPtrOutputWithContext(ctx context.Context) HashPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HashOutput).ToHashPtrOutputWithContext(ctx)
}

// HashPtrInput is an input type that accepts HashArgs, HashPtr and HashPtrOutput values.
// You can construct a concrete instance of `HashPtrInput` via:
//
//	        HashArgs{...}
//
//	or:
//
//	        nil
type HashPtrInput interface {
	pulumi.Input

	ToHashPtrOutput() HashPtrOutput
	ToHashPtrOutputWithContext(context.Context) HashPtrOutput
}

type hashPtrType HashArgs

func HashPtr(v *HashArgs) HashPtrInput {
	return (*hashPtrType)(v)
}

func (*hashPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Hash)(nil)).Elem()
}

func (i *hashPtrType) ToHashPtrOutput() HashPtrOutput {
	return i.ToHashPtrOutputWithContext(context.Background())
}

func (i *hashPtrType) ToHashPtrOutputWithContext(ctx context.Context) HashPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HashPtrOutput)
}

// HashArrayInput is an input type that accepts HashArray and HashArrayOutput values.
// You can construct a concrete instance of `HashArrayInput` via:
//
//	HashArray{ HashArgs{...} }
type HashArrayInput interface {
	pulumi.Input

	ToHashArrayOutput() HashArrayOutput
	ToHashArrayOutputWithContext(context.Context) HashArrayOutput
}

type HashArray []HashInput

func (HashArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Hash)(nil)).Elem()
}

func (i HashArray) ToHashArrayOutput() HashArrayOutput {
	return i.ToHashArrayOutputWithContext(context.Background())
}

func (i HashArray) ToHashArrayOutputWithContext(ctx context.Context) HashArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HashArrayOutput)
}

// Container message for hash values.
type HashOutput struct{ *pulumi.OutputState }

func (HashOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Hash)(nil)).Elem()
}

func (o HashOutput) ToHashOutput() HashOutput {
	return o
}

func (o HashOutput) ToHashOutputWithContext(ctx context.Context) HashOutput {
	return o
}

func (o HashOutput) ToHashPtrOutput() HashPtrOutput {
	return o.ToHashPtrOutputWithContext(context.Background())
}

func (o HashOutput) ToHashPtrOutputWithContext(ctx context.Context) HashPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Hash) *Hash {
		return &v
	}).(HashPtrOutput)
}

// The type of hash that was performed.
func (o HashOutput) Type() HashTypePtrOutput {
	return o.ApplyT(func(v Hash) *HashType { return v.Type }).(HashTypePtrOutput)
}

// The hash value.
func (o HashOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Hash) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type HashPtrOutput struct{ *pulumi.OutputState }

func (HashPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Hash)(nil)).Elem()
}

func (o HashPtrOutput) ToHashPtrOutput() HashPtrOutput {
	return o
}

func (o HashPtrOutput) ToHashPtrOutputWithContext(ctx context.Context) HashPtrOutput {
	return o
}

func (o HashPtrOutput) Elem() HashOutput {
	return o.ApplyT(func(v *Hash) Hash {
		if v != nil {
			return *v
		}
		var ret Hash
		return ret
	}).(HashOutput)
}

// The type of hash that was performed.
func (o HashPtrOutput) Type() HashTypePtrOutput {
	return o.ApplyT(func(v *Hash) *HashType {
		if v == nil {
			return nil
		}
		return v.Type
	}).(HashTypePtrOutput)
}

// The hash value.
func (o HashPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Hash) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type HashArrayOutput struct{ *pulumi.OutputState }

func (HashArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Hash)(nil)).Elem()
}

func (o HashArrayOutput) ToHashArrayOutput() HashArrayOutput {
	return o
}

func (o HashArrayOutput) ToHashArrayOutputWithContext(ctx context.Context) HashArrayOutput {
	return o
}

func (o HashArrayOutput) Index(i pulumi.IntInput) HashOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Hash {
		return vs[0].([]Hash)[vs[1].(int)]
	}).(HashOutput)
}

// Container message for hash values.
type HashResponse struct {
	// The type of hash that was performed.
	Type string `pulumi:"type"`
	// The hash value.
	Value string `pulumi:"value"`
}

// Container message for hash values.
type HashResponseOutput struct{ *pulumi.OutputState }

func (HashResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HashResponse)(nil)).Elem()
}

func (o HashResponseOutput) ToHashResponseOutput() HashResponseOutput {
	return o
}

func (o HashResponseOutput) ToHashResponseOutputWithContext(ctx context.Context) HashResponseOutput {
	return o
}

// The type of hash that was performed.
func (o HashResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HashResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The hash value.
func (o HashResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v HashResponse) string { return v.Value }).(pulumi.StringOutput)
}

type HashResponseArrayOutput struct{ *pulumi.OutputState }

func (HashResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HashResponse)(nil)).Elem()
}

func (o HashResponseArrayOutput) ToHashResponseArrayOutput() HashResponseArrayOutput {
	return o
}

func (o HashResponseArrayOutput) ToHashResponseArrayOutputWithContext(ctx context.Context) HashResponseArrayOutput {
	return o
}

func (o HashResponseArrayOutput) Index(i pulumi.IntInput) HashResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HashResponse {
		return vs[0].([]HashResponse)[vs[1].(int)]
	}).(HashResponseOutput)
}

// Helps in identifying the underlying product. This should be treated like a one-of field. Only one field should be set in this proto. This is a workaround because spanner indexes on one-of fields restrict addition and deletion of fields.
type IdentifierHelper struct {
	// The field that is set in the API proto.
	Field *IdentifierHelperField `pulumi:"field"`
	// Contains a URI which is vendor-specific. Example: The artifact repository URL of an image.
	GenericUri *string `pulumi:"genericUri"`
}

// IdentifierHelperInput is an input type that accepts IdentifierHelperArgs and IdentifierHelperOutput values.
// You can construct a concrete instance of `IdentifierHelperInput` via:
//
//	IdentifierHelperArgs{...}
type IdentifierHelperInput interface {
	pulumi.Input

	ToIdentifierHelperOutput() IdentifierHelperOutput
	ToIdentifierHelperOutputWithContext(context.Context) IdentifierHelperOutput
}

// Helps in identifying the underlying product. This should be treated like a one-of field. Only one field should be set in this proto. This is a workaround because spanner indexes on one-of fields restrict addition and deletion of fields.
type IdentifierHelperArgs struct {
	// The field that is set in the API proto.
	Field IdentifierHelperFieldPtrInput `pulumi:"field"`
	// Contains a URI which is vendor-specific. Example: The artifact repository URL of an image.
	GenericUri pulumi.StringPtrInput `pulumi:"genericUri"`
}

func (IdentifierHelperArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentifierHelper)(nil)).Elem()
}

func (i IdentifierHelperArgs) ToIdentifierHelperOutput() IdentifierHelperOutput {
	return i.ToIdentifierHelperOutputWithContext(context.Background())
}

func (i IdentifierHelperArgs) ToIdentifierHelperOutputWithContext(ctx context.Context) IdentifierHelperOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentifierHelperOutput)
}

func (i IdentifierHelperArgs) ToIdentifierHelperPtrOutput() IdentifierHelperPtrOutput {
	return i.ToIdentifierHelperPtrOutputWithContext(context.Background())
}

func (i IdentifierHelperArgs) ToIdentifierHelperPtrOutputWithContext(ctx context.Context) IdentifierHelperPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentifierHelperOutput).ToIdentifierHelperPtrOutputWithContext(ctx)
}

// IdentifierHelperPtrInput is an input type that accepts IdentifierHelperArgs, IdentifierHelperPtr and IdentifierHelperPtrOutput values.
// You can construct a concrete instance of `IdentifierHelperPtrInput` via:
//
//	        IdentifierHelperArgs{...}
//
//	or:
//
//	        nil
type IdentifierHelperPtrInput interface {
	pulumi.Input

	ToIdentifierHelperPtrOutput() IdentifierHelperPtrOutput
	ToIdentifierHelperPtrOutputWithContext(context.Context) IdentifierHelperPtrOutput
}

type identifierHelperPtrType IdentifierHelperArgs

func IdentifierHelperPtr(v *IdentifierHelperArgs) IdentifierHelperPtrInput {
	return (*identifierHelperPtrType)(v)
}

func (*identifierHelperPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentifierHelper)(nil)).Elem()
}

func (i *identifierHelperPtrType) ToIdentifierHelperPtrOutput() IdentifierHelperPtrOutput {
	return i.ToIdentifierHelperPtrOutputWithContext(context.Background())
}

func (i *identifierHelperPtrType) ToIdentifierHelperPtrOutputWithContext(ctx context.Context) IdentifierHelperPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentifierHelperPtrOutput)
}

// Helps in identifying the underlying product. This should be treated like a one-of field. Only one field should be set in this proto. This is a workaround because spanner indexes on one-of fields restrict addition and deletion of fields.
type IdentifierHelperOutput struct{ *pulumi.OutputState }

func (IdentifierHelperOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentifierHelper)(nil)).Elem()
}

func (o IdentifierHelperOutput) ToIdentifierHelperOutput() IdentifierHelperOutput {
	return o
}

func (o IdentifierHelperOutput) ToIdentifierHelperOutputWithContext(ctx context.Context) IdentifierHelperOutput {
	return o
}

func (o IdentifierHelperOutput) ToIdentifierHelperPtrOutput() IdentifierHelperPtrOutput {
	return o.ToIdentifierHelperPtrOutputWithContext(context.Background())
}

func (o IdentifierHelperOutput) ToIdentifierHelperPtrOutputWithContext(ctx context.Context) IdentifierHelperPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IdentifierHelper) *IdentifierHelper {
		return &v
	}).(IdentifierHelperPtrOutput)
}

// The field that is set in the API proto.
func (o IdentifierHelperOutput) Field() IdentifierHelperFieldPtrOutput {
	return o.ApplyT(func(v IdentifierHelper) *IdentifierHelperField { return v.Field }).(IdentifierHelperFieldPtrOutput)
}

// Contains a URI which is vendor-specific. Example: The artifact repository URL of an image.
func (o IdentifierHelperOutput) GenericUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentifierHelper) *string { return v.GenericUri }).(pulumi.StringPtrOutput)
}

type IdentifierHelperPtrOutput struct{ *pulumi.OutputState }

func (IdentifierHelperPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentifierHelper)(nil)).Elem()
}

func (o IdentifierHelperPtrOutput) ToIdentifierHelperPtrOutput() IdentifierHelperPtrOutput {
	return o
}

func (o IdentifierHelperPtrOutput) ToIdentifierHelperPtrOutputWithContext(ctx context.Context) IdentifierHelperPtrOutput {
	return o
}

func (o IdentifierHelperPtrOutput) Elem() IdentifierHelperOutput {
	return o.ApplyT(func(v *IdentifierHelper) IdentifierHelper {
		if v != nil {
			return *v
		}
		var ret IdentifierHelper
		return ret
	}).(IdentifierHelperOutput)
}

// The field that is set in the API proto.
func (o IdentifierHelperPtrOutput) Field() IdentifierHelperFieldPtrOutput {
	return o.ApplyT(func(v *IdentifierHelper) *IdentifierHelperField {
		if v == nil {
			return nil
		}
		return v.Field
	}).(IdentifierHelperFieldPtrOutput)
}

// Contains a URI which is vendor-specific. Example: The artifact repository URL of an image.
func (o IdentifierHelperPtrOutput) GenericUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentifierHelper) *string {
		if v == nil {
			return nil
		}
		return v.GenericUri
	}).(pulumi.StringPtrOutput)
}

// Helps in identifying the underlying product. This should be treated like a one-of field. Only one field should be set in this proto. This is a workaround because spanner indexes on one-of fields restrict addition and deletion of fields.
type IdentifierHelperResponse struct {
	// The field that is set in the API proto.
	Field string `pulumi:"field"`
	// Contains a URI which is vendor-specific. Example: The artifact repository URL of an image.
	GenericUri string `pulumi:"genericUri"`
}

// Helps in identifying the underlying product. This should be treated like a one-of field. Only one field should be set in this proto. This is a workaround because spanner indexes on one-of fields restrict addition and deletion of fields.
type IdentifierHelperResponseOutput struct{ *pulumi.OutputState }

func (IdentifierHelperResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentifierHelperResponse)(nil)).Elem()
}

func (o IdentifierHelperResponseOutput) ToIdentifierHelperResponseOutput() IdentifierHelperResponseOutput {
	return o
}

func (o IdentifierHelperResponseOutput) ToIdentifierHelperResponseOutputWithContext(ctx context.Context) IdentifierHelperResponseOutput {
	return o
}

// The field that is set in the API proto.
func (o IdentifierHelperResponseOutput) Field() pulumi.StringOutput {
	return o.ApplyT(func(v IdentifierHelperResponse) string { return v.Field }).(pulumi.StringOutput)
}

// Contains a URI which is vendor-specific. Example: The artifact repository URL of an image.
func (o IdentifierHelperResponseOutput) GenericUri() pulumi.StringOutput {
	return o.ApplyT(func(v IdentifierHelperResponse) string { return v.GenericUri }).(pulumi.StringOutput)
}

type InTotoProvenance struct {
	// required
	BuilderConfig *BuilderConfig `pulumi:"builderConfig"`
	// The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.
	Materials []string  `pulumi:"materials"`
	Metadata  *Metadata `pulumi:"metadata"`
	// Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit identical output (if the build is reproducible). required
	Recipe *Recipe `pulumi:"recipe"`
}

// InTotoProvenanceInput is an input type that accepts InTotoProvenanceArgs and InTotoProvenanceOutput values.
// You can construct a concrete instance of `InTotoProvenanceInput` via:
//
//	InTotoProvenanceArgs{...}
type InTotoProvenanceInput interface {
	pulumi.Input

	ToInTotoProvenanceOutput() InTotoProvenanceOutput
	ToInTotoProvenanceOutputWithContext(context.Context) InTotoProvenanceOutput
}

type InTotoProvenanceArgs struct {
	// required
	BuilderConfig BuilderConfigPtrInput `pulumi:"builderConfig"`
	// The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.
	Materials pulumi.StringArrayInput `pulumi:"materials"`
	Metadata  MetadataPtrInput        `pulumi:"metadata"`
	// Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit identical output (if the build is reproducible). required
	Recipe RecipePtrInput `pulumi:"recipe"`
}

func (InTotoProvenanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InTotoProvenance)(nil)).Elem()
}

func (i InTotoProvenanceArgs) ToInTotoProvenanceOutput() InTotoProvenanceOutput {
	return i.ToInTotoProvenanceOutputWithContext(context.Background())
}

func (i InTotoProvenanceArgs) ToInTotoProvenanceOutputWithContext(ctx context.Context) InTotoProvenanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InTotoProvenanceOutput)
}

func (i InTotoProvenanceArgs) ToInTotoProvenancePtrOutput() InTotoProvenancePtrOutput {
	return i.ToInTotoProvenancePtrOutputWithContext(context.Background())
}

func (i InTotoProvenanceArgs) ToInTotoProvenancePtrOutputWithContext(ctx context.Context) InTotoProvenancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InTotoProvenanceOutput).ToInTotoProvenancePtrOutputWithContext(ctx)
}

// InTotoProvenancePtrInput is an input type that accepts InTotoProvenanceArgs, InTotoProvenancePtr and InTotoProvenancePtrOutput values.
// You can construct a concrete instance of `InTotoProvenancePtrInput` via:
//
//	        InTotoProvenanceArgs{...}
//
//	or:
//
//	        nil
type InTotoProvenancePtrInput interface {
	pulumi.Input

	ToInTotoProvenancePtrOutput() InTotoProvenancePtrOutput
	ToInTotoProvenancePtrOutputWithContext(context.Context) InTotoProvenancePtrOutput
}

type inTotoProvenancePtrType InTotoProvenanceArgs

func InTotoProvenancePtr(v *InTotoProvenanceArgs) InTotoProvenancePtrInput {
	return (*inTotoProvenancePtrType)(v)
}

func (*inTotoProvenancePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InTotoProvenance)(nil)).Elem()
}

func (i *inTotoProvenancePtrType) ToInTotoProvenancePtrOutput() InTotoProvenancePtrOutput {
	return i.ToInTotoProvenancePtrOutputWithContext(context.Background())
}

func (i *inTotoProvenancePtrType) ToInTotoProvenancePtrOutputWithContext(ctx context.Context) InTotoProvenancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InTotoProvenancePtrOutput)
}

type InTotoProvenanceOutput struct{ *pulumi.OutputState }

func (InTotoProvenanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InTotoProvenance)(nil)).Elem()
}

func (o InTotoProvenanceOutput) ToInTotoProvenanceOutput() InTotoProvenanceOutput {
	return o
}

func (o InTotoProvenanceOutput) ToInTotoProvenanceOutputWithContext(ctx context.Context) InTotoProvenanceOutput {
	return o
}

func (o InTotoProvenanceOutput) ToInTotoProvenancePtrOutput() InTotoProvenancePtrOutput {
	return o.ToInTotoProvenancePtrOutputWithContext(context.Background())
}

func (o InTotoProvenanceOutput) ToInTotoProvenancePtrOutputWithContext(ctx context.Context) InTotoProvenancePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InTotoProvenance) *InTotoProvenance {
		return &v
	}).(InTotoProvenancePtrOutput)
}

// required
func (o InTotoProvenanceOutput) BuilderConfig() BuilderConfigPtrOutput {
	return o.ApplyT(func(v InTotoProvenance) *BuilderConfig { return v.BuilderConfig }).(BuilderConfigPtrOutput)
}

// The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.
func (o InTotoProvenanceOutput) Materials() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InTotoProvenance) []string { return v.Materials }).(pulumi.StringArrayOutput)
}

func (o InTotoProvenanceOutput) Metadata() MetadataPtrOutput {
	return o.ApplyT(func(v InTotoProvenance) *Metadata { return v.Metadata }).(MetadataPtrOutput)
}

// Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit identical output (if the build is reproducible). required
func (o InTotoProvenanceOutput) Recipe() RecipePtrOutput {
	return o.ApplyT(func(v InTotoProvenance) *Recipe { return v.Recipe }).(RecipePtrOutput)
}

type InTotoProvenancePtrOutput struct{ *pulumi.OutputState }

func (InTotoProvenancePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InTotoProvenance)(nil)).Elem()
}

func (o InTotoProvenancePtrOutput) ToInTotoProvenancePtrOutput() InTotoProvenancePtrOutput {
	return o
}

func (o InTotoProvenancePtrOutput) ToInTotoProvenancePtrOutputWithContext(ctx context.Context) InTotoProvenancePtrOutput {
	return o
}

func (o InTotoProvenancePtrOutput) Elem() InTotoProvenanceOutput {
	return o.ApplyT(func(v *InTotoProvenance) InTotoProvenance {
		if v != nil {
			return *v
		}
		var ret InTotoProvenance
		return ret
	}).(InTotoProvenanceOutput)
}

// required
func (o InTotoProvenancePtrOutput) BuilderConfig() BuilderConfigPtrOutput {
	return o.ApplyT(func(v *InTotoProvenance) *BuilderConfig {
		if v == nil {
			return nil
		}
		return v.BuilderConfig
	}).(BuilderConfigPtrOutput)
}

// The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.
func (o InTotoProvenancePtrOutput) Materials() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InTotoProvenance) []string {
		if v == nil {
			return nil
		}
		return v.Materials
	}).(pulumi.StringArrayOutput)
}

func (o InTotoProvenancePtrOutput) Metadata() MetadataPtrOutput {
	return o.ApplyT(func(v *InTotoProvenance) *Metadata {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(MetadataPtrOutput)
}

// Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit identical output (if the build is reproducible). required
func (o InTotoProvenancePtrOutput) Recipe() RecipePtrOutput {
	return o.ApplyT(func(v *InTotoProvenance) *Recipe {
		if v == nil {
			return nil
		}
		return v.Recipe
	}).(RecipePtrOutput)
}

type InTotoProvenanceResponse struct {
	// required
	BuilderConfig BuilderConfigResponse `pulumi:"builderConfig"`
	// The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.
	Materials []string         `pulumi:"materials"`
	Metadata  MetadataResponse `pulumi:"metadata"`
	// Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit identical output (if the build is reproducible). required
	Recipe RecipeResponse `pulumi:"recipe"`
}

type InTotoProvenanceResponseOutput struct{ *pulumi.OutputState }

func (InTotoProvenanceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InTotoProvenanceResponse)(nil)).Elem()
}

func (o InTotoProvenanceResponseOutput) ToInTotoProvenanceResponseOutput() InTotoProvenanceResponseOutput {
	return o
}

func (o InTotoProvenanceResponseOutput) ToInTotoProvenanceResponseOutputWithContext(ctx context.Context) InTotoProvenanceResponseOutput {
	return o
}

// required
func (o InTotoProvenanceResponseOutput) BuilderConfig() BuilderConfigResponseOutput {
	return o.ApplyT(func(v InTotoProvenanceResponse) BuilderConfigResponse { return v.BuilderConfig }).(BuilderConfigResponseOutput)
}

// The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.
func (o InTotoProvenanceResponseOutput) Materials() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InTotoProvenanceResponse) []string { return v.Materials }).(pulumi.StringArrayOutput)
}

func (o InTotoProvenanceResponseOutput) Metadata() MetadataResponseOutput {
	return o.ApplyT(func(v InTotoProvenanceResponse) MetadataResponse { return v.Metadata }).(MetadataResponseOutput)
}

// Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit identical output (if the build is reproducible). required
func (o InTotoProvenanceResponseOutput) Recipe() RecipeResponseOutput {
	return o.ApplyT(func(v InTotoProvenanceResponse) RecipeResponse { return v.Recipe }).(RecipeResponseOutput)
}

type InTotoSlsaProvenanceV1 struct {
	Predicate     *SlsaProvenanceV1 `pulumi:"predicate"`
	PredicateType *string           `pulumi:"predicateType"`
	Subject       []Subject         `pulumi:"subject"`
	// InToto spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement
	Type *string `pulumi:"type"`
}

// InTotoSlsaProvenanceV1Input is an input type that accepts InTotoSlsaProvenanceV1Args and InTotoSlsaProvenanceV1Output values.
// You can construct a concrete instance of `InTotoSlsaProvenanceV1Input` via:
//
//	InTotoSlsaProvenanceV1Args{...}
type InTotoSlsaProvenanceV1Input interface {
	pulumi.Input

	ToInTotoSlsaProvenanceV1Output() InTotoSlsaProvenanceV1Output
	ToInTotoSlsaProvenanceV1OutputWithContext(context.Context) InTotoSlsaProvenanceV1Output
}

type InTotoSlsaProvenanceV1Args struct {
	Predicate     SlsaProvenanceV1PtrInput `pulumi:"predicate"`
	PredicateType pulumi.StringPtrInput    `pulumi:"predicateType"`
	Subject       SubjectArrayInput        `pulumi:"subject"`
	// InToto spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (InTotoSlsaProvenanceV1Args) ElementType() reflect.Type {
	return reflect.TypeOf((*InTotoSlsaProvenanceV1)(nil)).Elem()
}

func (i InTotoSlsaProvenanceV1Args) ToInTotoSlsaProvenanceV1Output() InTotoSlsaProvenanceV1Output {
	return i.ToInTotoSlsaProvenanceV1OutputWithContext(context.Background())
}

func (i InTotoSlsaProvenanceV1Args) ToInTotoSlsaProvenanceV1OutputWithContext(ctx context.Context) InTotoSlsaProvenanceV1Output {
	return pulumi.ToOutputWithContext(ctx, i).(InTotoSlsaProvenanceV1Output)
}

func (i InTotoSlsaProvenanceV1Args) ToInTotoSlsaProvenanceV1PtrOutput() InTotoSlsaProvenanceV1PtrOutput {
	return i.ToInTotoSlsaProvenanceV1PtrOutputWithContext(context.Background())
}

func (i InTotoSlsaProvenanceV1Args) ToInTotoSlsaProvenanceV1PtrOutputWithContext(ctx context.Context) InTotoSlsaProvenanceV1PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InTotoSlsaProvenanceV1Output).ToInTotoSlsaProvenanceV1PtrOutputWithContext(ctx)
}

// InTotoSlsaProvenanceV1PtrInput is an input type that accepts InTotoSlsaProvenanceV1Args, InTotoSlsaProvenanceV1Ptr and InTotoSlsaProvenanceV1PtrOutput values.
// You can construct a concrete instance of `InTotoSlsaProvenanceV1PtrInput` via:
//
//	        InTotoSlsaProvenanceV1Args{...}
//
//	or:
//
//	        nil
type InTotoSlsaProvenanceV1PtrInput interface {
	pulumi.Input

	ToInTotoSlsaProvenanceV1PtrOutput() InTotoSlsaProvenanceV1PtrOutput
	ToInTotoSlsaProvenanceV1PtrOutputWithContext(context.Context) InTotoSlsaProvenanceV1PtrOutput
}

type inTotoSlsaProvenanceV1PtrType InTotoSlsaProvenanceV1Args

func InTotoSlsaProvenanceV1Ptr(v *InTotoSlsaProvenanceV1Args) InTotoSlsaProvenanceV1PtrInput {
	return (*inTotoSlsaProvenanceV1PtrType)(v)
}

func (*inTotoSlsaProvenanceV1PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InTotoSlsaProvenanceV1)(nil)).Elem()
}

func (i *inTotoSlsaProvenanceV1PtrType) ToInTotoSlsaProvenanceV1PtrOutput() InTotoSlsaProvenanceV1PtrOutput {
	return i.ToInTotoSlsaProvenanceV1PtrOutputWithContext(context.Background())
}

func (i *inTotoSlsaProvenanceV1PtrType) ToInTotoSlsaProvenanceV1PtrOutputWithContext(ctx context.Context) InTotoSlsaProvenanceV1PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InTotoSlsaProvenanceV1PtrOutput)
}

type InTotoSlsaProvenanceV1Output struct{ *pulumi.OutputState }

func (InTotoSlsaProvenanceV1Output) ElementType() reflect.Type {
	return reflect.TypeOf((*InTotoSlsaProvenanceV1)(nil)).Elem()
}

func (o InTotoSlsaProvenanceV1Output) ToInTotoSlsaProvenanceV1Output() InTotoSlsaProvenanceV1Output {
	return o
}

func (o InTotoSlsaProvenanceV1Output) ToInTotoSlsaProvenanceV1OutputWithContext(ctx context.Context) InTotoSlsaProvenanceV1Output {
	return o
}

func (o InTotoSlsaProvenanceV1Output) ToInTotoSlsaProvenanceV1PtrOutput() InTotoSlsaProvenanceV1PtrOutput {
	return o.ToInTotoSlsaProvenanceV1PtrOutputWithContext(context.Background())
}

func (o InTotoSlsaProvenanceV1Output) ToInTotoSlsaProvenanceV1PtrOutputWithContext(ctx context.Context) InTotoSlsaProvenanceV1PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InTotoSlsaProvenanceV1) *InTotoSlsaProvenanceV1 {
		return &v
	}).(InTotoSlsaProvenanceV1PtrOutput)
}

func (o InTotoSlsaProvenanceV1Output) Predicate() SlsaProvenanceV1PtrOutput {
	return o.ApplyT(func(v InTotoSlsaProvenanceV1) *SlsaProvenanceV1 { return v.Predicate }).(SlsaProvenanceV1PtrOutput)
}

func (o InTotoSlsaProvenanceV1Output) PredicateType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InTotoSlsaProvenanceV1) *string { return v.PredicateType }).(pulumi.StringPtrOutput)
}

func (o InTotoSlsaProvenanceV1Output) Subject() SubjectArrayOutput {
	return o.ApplyT(func(v InTotoSlsaProvenanceV1) []Subject { return v.Subject }).(SubjectArrayOutput)
}

// InToto spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement
func (o InTotoSlsaProvenanceV1Output) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InTotoSlsaProvenanceV1) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type InTotoSlsaProvenanceV1PtrOutput struct{ *pulumi.OutputState }

func (InTotoSlsaProvenanceV1PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InTotoSlsaProvenanceV1)(nil)).Elem()
}

func (o InTotoSlsaProvenanceV1PtrOutput) ToInTotoSlsaProvenanceV1PtrOutput() InTotoSlsaProvenanceV1PtrOutput {
	return o
}

func (o InTotoSlsaProvenanceV1PtrOutput) ToInTotoSlsaProvenanceV1PtrOutputWithContext(ctx context.Context) InTotoSlsaProvenanceV1PtrOutput {
	return o
}

func (o InTotoSlsaProvenanceV1PtrOutput) Elem() InTotoSlsaProvenanceV1Output {
	return o.ApplyT(func(v *InTotoSlsaProvenanceV1) InTotoSlsaProvenanceV1 {
		if v != nil {
			return *v
		}
		var ret InTotoSlsaProvenanceV1
		return ret
	}).(InTotoSlsaProvenanceV1Output)
}

func (o InTotoSlsaProvenanceV1PtrOutput) Predicate() SlsaProvenanceV1PtrOutput {
	return o.ApplyT(func(v *InTotoSlsaProvenanceV1) *SlsaProvenanceV1 {
		if v == nil {
			return nil
		}
		return v.Predicate
	}).(SlsaProvenanceV1PtrOutput)
}

func (o InTotoSlsaProvenanceV1PtrOutput) PredicateType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InTotoSlsaProvenanceV1) *string {
		if v == nil {
			return nil
		}
		return v.PredicateType
	}).(pulumi.StringPtrOutput)
}

func (o InTotoSlsaProvenanceV1PtrOutput) Subject() SubjectArrayOutput {
	return o.ApplyT(func(v *InTotoSlsaProvenanceV1) []Subject {
		if v == nil {
			return nil
		}
		return v.Subject
	}).(SubjectArrayOutput)
}

// InToto spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement
func (o InTotoSlsaProvenanceV1PtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InTotoSlsaProvenanceV1) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type InTotoSlsaProvenanceV1Response struct {
	Predicate     SlsaProvenanceV1Response `pulumi:"predicate"`
	PredicateType string                   `pulumi:"predicateType"`
	Subject       []SubjectResponse        `pulumi:"subject"`
	// InToto spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement
	Type string `pulumi:"type"`
}

type InTotoSlsaProvenanceV1ResponseOutput struct{ *pulumi.OutputState }

func (InTotoSlsaProvenanceV1ResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InTotoSlsaProvenanceV1Response)(nil)).Elem()
}

func (o InTotoSlsaProvenanceV1ResponseOutput) ToInTotoSlsaProvenanceV1ResponseOutput() InTotoSlsaProvenanceV1ResponseOutput {
	return o
}

func (o InTotoSlsaProvenanceV1ResponseOutput) ToInTotoSlsaProvenanceV1ResponseOutputWithContext(ctx context.Context) InTotoSlsaProvenanceV1ResponseOutput {
	return o
}

func (o InTotoSlsaProvenanceV1ResponseOutput) Predicate() SlsaProvenanceV1ResponseOutput {
	return o.ApplyT(func(v InTotoSlsaProvenanceV1Response) SlsaProvenanceV1Response { return v.Predicate }).(SlsaProvenanceV1ResponseOutput)
}

func (o InTotoSlsaProvenanceV1ResponseOutput) PredicateType() pulumi.StringOutput {
	return o.ApplyT(func(v InTotoSlsaProvenanceV1Response) string { return v.PredicateType }).(pulumi.StringOutput)
}

func (o InTotoSlsaProvenanceV1ResponseOutput) Subject() SubjectResponseArrayOutput {
	return o.ApplyT(func(v InTotoSlsaProvenanceV1Response) []SubjectResponse { return v.Subject }).(SubjectResponseArrayOutput)
}

// InToto spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement
func (o InTotoSlsaProvenanceV1ResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v InTotoSlsaProvenanceV1Response) string { return v.Type }).(pulumi.StringOutput)
}

// Spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement The serialized InTotoStatement will be stored as Envelope.payload. Envelope.payloadType is always "application/vnd.in-toto+json".
type InTotoStatement struct {
	// "https://slsa.dev/provenance/v0.1" for SlsaProvenance.
	PredicateType *string `pulumi:"predicateType"`
	// Generic Grafeas provenance.
	Provenance *InTotoProvenance `pulumi:"provenance"`
	// SLSA 0.1 provenance.
	SlsaProvenance *SlsaProvenance `pulumi:"slsaProvenance"`
	// SLSA 0.2 provenance.
	SlsaProvenanceZeroTwo *SlsaProvenanceZeroTwo `pulumi:"slsaProvenanceZeroTwo"`
	// subject is the subjects of the intoto statement
	Subject []Subject `pulumi:"subject"`
	// Always "https://in-toto.io/Statement/v0.1".
	Type *string `pulumi:"type"`
}

// InTotoStatementInput is an input type that accepts InTotoStatementArgs and InTotoStatementOutput values.
// You can construct a concrete instance of `InTotoStatementInput` via:
//
//	InTotoStatementArgs{...}
type InTotoStatementInput interface {
	pulumi.Input

	ToInTotoStatementOutput() InTotoStatementOutput
	ToInTotoStatementOutputWithContext(context.Context) InTotoStatementOutput
}

// Spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement The serialized InTotoStatement will be stored as Envelope.payload. Envelope.payloadType is always "application/vnd.in-toto+json".
type InTotoStatementArgs struct {
	// "https://slsa.dev/provenance/v0.1" for SlsaProvenance.
	PredicateType pulumi.StringPtrInput `pulumi:"predicateType"`
	// Generic Grafeas provenance.
	Provenance InTotoProvenancePtrInput `pulumi:"provenance"`
	// SLSA 0.1 provenance.
	SlsaProvenance SlsaProvenancePtrInput `pulumi:"slsaProvenance"`
	// SLSA 0.2 provenance.
	SlsaProvenanceZeroTwo SlsaProvenanceZeroTwoPtrInput `pulumi:"slsaProvenanceZeroTwo"`
	// subject is the subjects of the intoto statement
	Subject SubjectArrayInput `pulumi:"subject"`
	// Always "https://in-toto.io/Statement/v0.1".
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (InTotoStatementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InTotoStatement)(nil)).Elem()
}

func (i InTotoStatementArgs) ToInTotoStatementOutput() InTotoStatementOutput {
	return i.ToInTotoStatementOutputWithContext(context.Background())
}

func (i InTotoStatementArgs) ToInTotoStatementOutputWithContext(ctx context.Context) InTotoStatementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InTotoStatementOutput)
}

func (i InTotoStatementArgs) ToInTotoStatementPtrOutput() InTotoStatementPtrOutput {
	return i.ToInTotoStatementPtrOutputWithContext(context.Background())
}

func (i InTotoStatementArgs) ToInTotoStatementPtrOutputWithContext(ctx context.Context) InTotoStatementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InTotoStatementOutput).ToInTotoStatementPtrOutputWithContext(ctx)
}

// InTotoStatementPtrInput is an input type that accepts InTotoStatementArgs, InTotoStatementPtr and InTotoStatementPtrOutput values.
// You can construct a concrete instance of `InTotoStatementPtrInput` via:
//
//	        InTotoStatementArgs{...}
//
//	or:
//
//	        nil
type InTotoStatementPtrInput interface {
	pulumi.Input

	ToInTotoStatementPtrOutput() InTotoStatementPtrOutput
	ToInTotoStatementPtrOutputWithContext(context.Context) InTotoStatementPtrOutput
}

type inTotoStatementPtrType InTotoStatementArgs

func InTotoStatementPtr(v *InTotoStatementArgs) InTotoStatementPtrInput {
	return (*inTotoStatementPtrType)(v)
}

func (*inTotoStatementPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InTotoStatement)(nil)).Elem()
}

func (i *inTotoStatementPtrType) ToInTotoStatementPtrOutput() InTotoStatementPtrOutput {
	return i.ToInTotoStatementPtrOutputWithContext(context.Background())
}

func (i *inTotoStatementPtrType) ToInTotoStatementPtrOutputWithContext(ctx context.Context) InTotoStatementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InTotoStatementPtrOutput)
}

// Spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement The serialized InTotoStatement will be stored as Envelope.payload. Envelope.payloadType is always "application/vnd.in-toto+json".
type InTotoStatementOutput struct{ *pulumi.OutputState }

func (InTotoStatementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InTotoStatement)(nil)).Elem()
}

func (o InTotoStatementOutput) ToInTotoStatementOutput() InTotoStatementOutput {
	return o
}

func (o InTotoStatementOutput) ToInTotoStatementOutputWithContext(ctx context.Context) InTotoStatementOutput {
	return o
}

func (o InTotoStatementOutput) ToInTotoStatementPtrOutput() InTotoStatementPtrOutput {
	return o.ToInTotoStatementPtrOutputWithContext(context.Background())
}

func (o InTotoStatementOutput) ToInTotoStatementPtrOutputWithContext(ctx context.Context) InTotoStatementPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InTotoStatement) *InTotoStatement {
		return &v
	}).(InTotoStatementPtrOutput)
}

// "https://slsa.dev/provenance/v0.1" for SlsaProvenance.
func (o InTotoStatementOutput) PredicateType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InTotoStatement) *string { return v.PredicateType }).(pulumi.StringPtrOutput)
}

// Generic Grafeas provenance.
func (o InTotoStatementOutput) Provenance() InTotoProvenancePtrOutput {
	return o.ApplyT(func(v InTotoStatement) *InTotoProvenance { return v.Provenance }).(InTotoProvenancePtrOutput)
}

// SLSA 0.1 provenance.
func (o InTotoStatementOutput) SlsaProvenance() SlsaProvenancePtrOutput {
	return o.ApplyT(func(v InTotoStatement) *SlsaProvenance { return v.SlsaProvenance }).(SlsaProvenancePtrOutput)
}

// SLSA 0.2 provenance.
func (o InTotoStatementOutput) SlsaProvenanceZeroTwo() SlsaProvenanceZeroTwoPtrOutput {
	return o.ApplyT(func(v InTotoStatement) *SlsaProvenanceZeroTwo { return v.SlsaProvenanceZeroTwo }).(SlsaProvenanceZeroTwoPtrOutput)
}

// subject is the subjects of the intoto statement
func (o InTotoStatementOutput) Subject() SubjectArrayOutput {
	return o.ApplyT(func(v InTotoStatement) []Subject { return v.Subject }).(SubjectArrayOutput)
}

// Always "https://in-toto.io/Statement/v0.1".
func (o InTotoStatementOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InTotoStatement) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type InTotoStatementPtrOutput struct{ *pulumi.OutputState }

func (InTotoStatementPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InTotoStatement)(nil)).Elem()
}

func (o InTotoStatementPtrOutput) ToInTotoStatementPtrOutput() InTotoStatementPtrOutput {
	return o
}

func (o InTotoStatementPtrOutput) ToInTotoStatementPtrOutputWithContext(ctx context.Context) InTotoStatementPtrOutput {
	return o
}

func (o InTotoStatementPtrOutput) Elem() InTotoStatementOutput {
	return o.ApplyT(func(v *InTotoStatement) InTotoStatement {
		if v != nil {
			return *v
		}
		var ret InTotoStatement
		return ret
	}).(InTotoStatementOutput)
}

// "https://slsa.dev/provenance/v0.1" for SlsaProvenance.
func (o InTotoStatementPtrOutput) PredicateType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InTotoStatement) *string {
		if v == nil {
			return nil
		}
		return v.PredicateType
	}).(pulumi.StringPtrOutput)
}

// Generic Grafeas provenance.
func (o InTotoStatementPtrOutput) Provenance() InTotoProvenancePtrOutput {
	return o.ApplyT(func(v *InTotoStatement) *InTotoProvenance {
		if v == nil {
			return nil
		}
		return v.Provenance
	}).(InTotoProvenancePtrOutput)
}

// SLSA 0.1 provenance.
func (o InTotoStatementPtrOutput) SlsaProvenance() SlsaProvenancePtrOutput {
	return o.ApplyT(func(v *InTotoStatement) *SlsaProvenance {
		if v == nil {
			return nil
		}
		return v.SlsaProvenance
	}).(SlsaProvenancePtrOutput)
}

// SLSA 0.2 provenance.
func (o InTotoStatementPtrOutput) SlsaProvenanceZeroTwo() SlsaProvenanceZeroTwoPtrOutput {
	return o.ApplyT(func(v *InTotoStatement) *SlsaProvenanceZeroTwo {
		if v == nil {
			return nil
		}
		return v.SlsaProvenanceZeroTwo
	}).(SlsaProvenanceZeroTwoPtrOutput)
}

// subject is the subjects of the intoto statement
func (o InTotoStatementPtrOutput) Subject() SubjectArrayOutput {
	return o.ApplyT(func(v *InTotoStatement) []Subject {
		if v == nil {
			return nil
		}
		return v.Subject
	}).(SubjectArrayOutput)
}

// Always "https://in-toto.io/Statement/v0.1".
func (o InTotoStatementPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InTotoStatement) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement The serialized InTotoStatement will be stored as Envelope.payload. Envelope.payloadType is always "application/vnd.in-toto+json".
type InTotoStatementResponse struct {
	// "https://slsa.dev/provenance/v0.1" for SlsaProvenance.
	PredicateType string `pulumi:"predicateType"`
	// Generic Grafeas provenance.
	Provenance InTotoProvenanceResponse `pulumi:"provenance"`
	// SLSA 0.1 provenance.
	SlsaProvenance SlsaProvenanceResponse `pulumi:"slsaProvenance"`
	// SLSA 0.2 provenance.
	SlsaProvenanceZeroTwo SlsaProvenanceZeroTwoResponse `pulumi:"slsaProvenanceZeroTwo"`
	// subject is the subjects of the intoto statement
	Subject []SubjectResponse `pulumi:"subject"`
	// Always "https://in-toto.io/Statement/v0.1".
	Type string `pulumi:"type"`
}

// Spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement The serialized InTotoStatement will be stored as Envelope.payload. Envelope.payloadType is always "application/vnd.in-toto+json".
type InTotoStatementResponseOutput struct{ *pulumi.OutputState }

func (InTotoStatementResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InTotoStatementResponse)(nil)).Elem()
}

func (o InTotoStatementResponseOutput) ToInTotoStatementResponseOutput() InTotoStatementResponseOutput {
	return o
}

func (o InTotoStatementResponseOutput) ToInTotoStatementResponseOutputWithContext(ctx context.Context) InTotoStatementResponseOutput {
	return o
}

// "https://slsa.dev/provenance/v0.1" for SlsaProvenance.
func (o InTotoStatementResponseOutput) PredicateType() pulumi.StringOutput {
	return o.ApplyT(func(v InTotoStatementResponse) string { return v.PredicateType }).(pulumi.StringOutput)
}

// Generic Grafeas provenance.
func (o InTotoStatementResponseOutput) Provenance() InTotoProvenanceResponseOutput {
	return o.ApplyT(func(v InTotoStatementResponse) InTotoProvenanceResponse { return v.Provenance }).(InTotoProvenanceResponseOutput)
}

// SLSA 0.1 provenance.
func (o InTotoStatementResponseOutput) SlsaProvenance() SlsaProvenanceResponseOutput {
	return o.ApplyT(func(v InTotoStatementResponse) SlsaProvenanceResponse { return v.SlsaProvenance }).(SlsaProvenanceResponseOutput)
}

// SLSA 0.2 provenance.
func (o InTotoStatementResponseOutput) SlsaProvenanceZeroTwo() SlsaProvenanceZeroTwoResponseOutput {
	return o.ApplyT(func(v InTotoStatementResponse) SlsaProvenanceZeroTwoResponse { return v.SlsaProvenanceZeroTwo }).(SlsaProvenanceZeroTwoResponseOutput)
}

// subject is the subjects of the intoto statement
func (o InTotoStatementResponseOutput) Subject() SubjectResponseArrayOutput {
	return o.ApplyT(func(v InTotoStatementResponse) []SubjectResponse { return v.Subject }).(SubjectResponseArrayOutput)
}

// Always "https://in-toto.io/Statement/v0.1".
func (o InTotoStatementResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v InTotoStatementResponse) string { return v.Type }).(pulumi.StringOutput)
}

// This represents how a particular software package may be installed on a system.
type Installation struct {
	// Licenses that have been declared by the authors of the package.
	License *License `pulumi:"license"`
	// All of the places within the filesystem versions of this package have been found.
	Location []Location `pulumi:"location"`
}

// InstallationInput is an input type that accepts InstallationArgs and InstallationOutput values.
// You can construct a concrete instance of `InstallationInput` via:
//
//	InstallationArgs{...}
type InstallationInput interface {
	pulumi.Input

	ToInstallationOutput() InstallationOutput
	ToInstallationOutputWithContext(context.Context) InstallationOutput
}

// This represents how a particular software package may be installed on a system.
type InstallationArgs struct {
	// Licenses that have been declared by the authors of the package.
	License LicensePtrInput `pulumi:"license"`
	// All of the places within the filesystem versions of this package have been found.
	Location LocationArrayInput `pulumi:"location"`
}

func (InstallationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Installation)(nil)).Elem()
}

func (i InstallationArgs) ToInstallationOutput() InstallationOutput {
	return i.ToInstallationOutputWithContext(context.Background())
}

func (i InstallationArgs) ToInstallationOutputWithContext(ctx context.Context) InstallationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstallationOutput)
}

func (i InstallationArgs) ToInstallationPtrOutput() InstallationPtrOutput {
	return i.ToInstallationPtrOutputWithContext(context.Background())
}

func (i InstallationArgs) ToInstallationPtrOutputWithContext(ctx context.Context) InstallationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstallationOutput).ToInstallationPtrOutputWithContext(ctx)
}

// InstallationPtrInput is an input type that accepts InstallationArgs, InstallationPtr and InstallationPtrOutput values.
// You can construct a concrete instance of `InstallationPtrInput` via:
//
//	        InstallationArgs{...}
//
//	or:
//
//	        nil
type InstallationPtrInput interface {
	pulumi.Input

	ToInstallationPtrOutput() InstallationPtrOutput
	ToInstallationPtrOutputWithContext(context.Context) InstallationPtrOutput
}

type installationPtrType InstallationArgs

func InstallationPtr(v *InstallationArgs) InstallationPtrInput {
	return (*installationPtrType)(v)
}

func (*installationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Installation)(nil)).Elem()
}

func (i *installationPtrType) ToInstallationPtrOutput() InstallationPtrOutput {
	return i.ToInstallationPtrOutputWithContext(context.Background())
}

func (i *installationPtrType) ToInstallationPtrOutputWithContext(ctx context.Context) InstallationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstallationPtrOutput)
}

// This represents how a particular software package may be installed on a system.
type InstallationOutput struct{ *pulumi.OutputState }

func (InstallationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Installation)(nil)).Elem()
}

func (o InstallationOutput) ToInstallationOutput() InstallationOutput {
	return o
}

func (o InstallationOutput) ToInstallationOutputWithContext(ctx context.Context) InstallationOutput {
	return o
}

func (o InstallationOutput) ToInstallationPtrOutput() InstallationPtrOutput {
	return o.ToInstallationPtrOutputWithContext(context.Background())
}

func (o InstallationOutput) ToInstallationPtrOutputWithContext(ctx context.Context) InstallationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Installation) *Installation {
		return &v
	}).(InstallationPtrOutput)
}

// Licenses that have been declared by the authors of the package.
func (o InstallationOutput) License() LicensePtrOutput {
	return o.ApplyT(func(v Installation) *License { return v.License }).(LicensePtrOutput)
}

// All of the places within the filesystem versions of this package have been found.
func (o InstallationOutput) Location() LocationArrayOutput {
	return o.ApplyT(func(v Installation) []Location { return v.Location }).(LocationArrayOutput)
}

type InstallationPtrOutput struct{ *pulumi.OutputState }

func (InstallationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Installation)(nil)).Elem()
}

func (o InstallationPtrOutput) ToInstallationPtrOutput() InstallationPtrOutput {
	return o
}

func (o InstallationPtrOutput) ToInstallationPtrOutputWithContext(ctx context.Context) InstallationPtrOutput {
	return o
}

func (o InstallationPtrOutput) Elem() InstallationOutput {
	return o.ApplyT(func(v *Installation) Installation {
		if v != nil {
			return *v
		}
		var ret Installation
		return ret
	}).(InstallationOutput)
}

// Licenses that have been declared by the authors of the package.
func (o InstallationPtrOutput) License() LicensePtrOutput {
	return o.ApplyT(func(v *Installation) *License {
		if v == nil {
			return nil
		}
		return v.License
	}).(LicensePtrOutput)
}

// All of the places within the filesystem versions of this package have been found.
func (o InstallationPtrOutput) Location() LocationArrayOutput {
	return o.ApplyT(func(v *Installation) []Location {
		if v == nil {
			return nil
		}
		return v.Location
	}).(LocationArrayOutput)
}

// This represents how a particular software package may be installed on a system.
type InstallationResponse struct {
	// The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.
	Architecture string `pulumi:"architecture"`
	// The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages.
	CpeUri string `pulumi:"cpeUri"`
	// Licenses that have been declared by the authors of the package.
	License LicenseResponse `pulumi:"license"`
	// All of the places within the filesystem versions of this package have been found.
	Location []LocationResponse `pulumi:"location"`
	// The name of the installed package.
	Name string `pulumi:"name"`
	// The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
	PackageType string `pulumi:"packageType"`
	// The version of the package.
	Version VersionResponse `pulumi:"version"`
}

// This represents how a particular software package may be installed on a system.
type InstallationResponseOutput struct{ *pulumi.OutputState }

func (InstallationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstallationResponse)(nil)).Elem()
}

func (o InstallationResponseOutput) ToInstallationResponseOutput() InstallationResponseOutput {
	return o
}

func (o InstallationResponseOutput) ToInstallationResponseOutputWithContext(ctx context.Context) InstallationResponseOutput {
	return o
}

// The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.
func (o InstallationResponseOutput) Architecture() pulumi.StringOutput {
	return o.ApplyT(func(v InstallationResponse) string { return v.Architecture }).(pulumi.StringOutput)
}

// The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages.
func (o InstallationResponseOutput) CpeUri() pulumi.StringOutput {
	return o.ApplyT(func(v InstallationResponse) string { return v.CpeUri }).(pulumi.StringOutput)
}

// Licenses that have been declared by the authors of the package.
func (o InstallationResponseOutput) License() LicenseResponseOutput {
	return o.ApplyT(func(v InstallationResponse) LicenseResponse { return v.License }).(LicenseResponseOutput)
}

// All of the places within the filesystem versions of this package have been found.
func (o InstallationResponseOutput) Location() LocationResponseArrayOutput {
	return o.ApplyT(func(v InstallationResponse) []LocationResponse { return v.Location }).(LocationResponseArrayOutput)
}

// The name of the installed package.
func (o InstallationResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v InstallationResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
func (o InstallationResponseOutput) PackageType() pulumi.StringOutput {
	return o.ApplyT(func(v InstallationResponse) string { return v.PackageType }).(pulumi.StringOutput)
}

// The version of the package.
func (o InstallationResponseOutput) Version() VersionResponseOutput {
	return o.ApplyT(func(v InstallationResponse) VersionResponse { return v.Version }).(VersionResponseOutput)
}

// Justification provides the justification when the state of the assessment if NOT_AFFECTED.
type Justification struct {
	// Additional details on why this justification was chosen.
	Details *string `pulumi:"details"`
	// The justification type for this vulnerability.
	JustificationType *JustificationJustificationType `pulumi:"justificationType"`
}

// JustificationInput is an input type that accepts JustificationArgs and JustificationOutput values.
// You can construct a concrete instance of `JustificationInput` via:
//
//	JustificationArgs{...}
type JustificationInput interface {
	pulumi.Input

	ToJustificationOutput() JustificationOutput
	ToJustificationOutputWithContext(context.Context) JustificationOutput
}

// Justification provides the justification when the state of the assessment if NOT_AFFECTED.
type JustificationArgs struct {
	// Additional details on why this justification was chosen.
	Details pulumi.StringPtrInput `pulumi:"details"`
	// The justification type for this vulnerability.
	JustificationType JustificationJustificationTypePtrInput `pulumi:"justificationType"`
}

func (JustificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Justification)(nil)).Elem()
}

func (i JustificationArgs) ToJustificationOutput() JustificationOutput {
	return i.ToJustificationOutputWithContext(context.Background())
}

func (i JustificationArgs) ToJustificationOutputWithContext(ctx context.Context) JustificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JustificationOutput)
}

func (i JustificationArgs) ToJustificationPtrOutput() JustificationPtrOutput {
	return i.ToJustificationPtrOutputWithContext(context.Background())
}

func (i JustificationArgs) ToJustificationPtrOutputWithContext(ctx context.Context) JustificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JustificationOutput).ToJustificationPtrOutputWithContext(ctx)
}

// JustificationPtrInput is an input type that accepts JustificationArgs, JustificationPtr and JustificationPtrOutput values.
// You can construct a concrete instance of `JustificationPtrInput` via:
//
//	        JustificationArgs{...}
//
//	or:
//
//	        nil
type JustificationPtrInput interface {
	pulumi.Input

	ToJustificationPtrOutput() JustificationPtrOutput
	ToJustificationPtrOutputWithContext(context.Context) JustificationPtrOutput
}

type justificationPtrType JustificationArgs

func JustificationPtr(v *JustificationArgs) JustificationPtrInput {
	return (*justificationPtrType)(v)
}

func (*justificationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Justification)(nil)).Elem()
}

func (i *justificationPtrType) ToJustificationPtrOutput() JustificationPtrOutput {
	return i.ToJustificationPtrOutputWithContext(context.Background())
}

func (i *justificationPtrType) ToJustificationPtrOutputWithContext(ctx context.Context) JustificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JustificationPtrOutput)
}

// Justification provides the justification when the state of the assessment if NOT_AFFECTED.
type JustificationOutput struct{ *pulumi.OutputState }

func (JustificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Justification)(nil)).Elem()
}

func (o JustificationOutput) ToJustificationOutput() JustificationOutput {
	return o
}

func (o JustificationOutput) ToJustificationOutputWithContext(ctx context.Context) JustificationOutput {
	return o
}

func (o JustificationOutput) ToJustificationPtrOutput() JustificationPtrOutput {
	return o.ToJustificationPtrOutputWithContext(context.Background())
}

func (o JustificationOutput) ToJustificationPtrOutputWithContext(ctx context.Context) JustificationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Justification) *Justification {
		return &v
	}).(JustificationPtrOutput)
}

// Additional details on why this justification was chosen.
func (o JustificationOutput) Details() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Justification) *string { return v.Details }).(pulumi.StringPtrOutput)
}

// The justification type for this vulnerability.
func (o JustificationOutput) JustificationType() JustificationJustificationTypePtrOutput {
	return o.ApplyT(func(v Justification) *JustificationJustificationType { return v.JustificationType }).(JustificationJustificationTypePtrOutput)
}

type JustificationPtrOutput struct{ *pulumi.OutputState }

func (JustificationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Justification)(nil)).Elem()
}

func (o JustificationPtrOutput) ToJustificationPtrOutput() JustificationPtrOutput {
	return o
}

func (o JustificationPtrOutput) ToJustificationPtrOutputWithContext(ctx context.Context) JustificationPtrOutput {
	return o
}

func (o JustificationPtrOutput) Elem() JustificationOutput {
	return o.ApplyT(func(v *Justification) Justification {
		if v != nil {
			return *v
		}
		var ret Justification
		return ret
	}).(JustificationOutput)
}

// Additional details on why this justification was chosen.
func (o JustificationPtrOutput) Details() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Justification) *string {
		if v == nil {
			return nil
		}
		return v.Details
	}).(pulumi.StringPtrOutput)
}

// The justification type for this vulnerability.
func (o JustificationPtrOutput) JustificationType() JustificationJustificationTypePtrOutput {
	return o.ApplyT(func(v *Justification) *JustificationJustificationType {
		if v == nil {
			return nil
		}
		return v.JustificationType
	}).(JustificationJustificationTypePtrOutput)
}

// Justification provides the justification when the state of the assessment if NOT_AFFECTED.
type JustificationResponse struct {
	// Additional details on why this justification was chosen.
	Details string `pulumi:"details"`
	// The justification type for this vulnerability.
	JustificationType string `pulumi:"justificationType"`
}

// Justification provides the justification when the state of the assessment if NOT_AFFECTED.
type JustificationResponseOutput struct{ *pulumi.OutputState }

func (JustificationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JustificationResponse)(nil)).Elem()
}

func (o JustificationResponseOutput) ToJustificationResponseOutput() JustificationResponseOutput {
	return o
}

func (o JustificationResponseOutput) ToJustificationResponseOutputWithContext(ctx context.Context) JustificationResponseOutput {
	return o
}

// Additional details on why this justification was chosen.
func (o JustificationResponseOutput) Details() pulumi.StringOutput {
	return o.ApplyT(func(v JustificationResponse) string { return v.Details }).(pulumi.StringOutput)
}

// The justification type for this vulnerability.
func (o JustificationResponseOutput) JustificationType() pulumi.StringOutput {
	return o.ApplyT(func(v JustificationResponse) string { return v.JustificationType }).(pulumi.StringOutput)
}

// Layer holds metadata specific to a layer of a Docker image.
type Layer struct {
	// The recovered arguments to the Dockerfile directive.
	Arguments *string `pulumi:"arguments"`
	// The recovered Dockerfile directive used to construct this layer.
	Directive *LayerDirective `pulumi:"directive"`
}

// LayerInput is an input type that accepts LayerArgs and LayerOutput values.
// You can construct a concrete instance of `LayerInput` via:
//
//	LayerArgs{...}
type LayerInput interface {
	pulumi.Input

	ToLayerOutput() LayerOutput
	ToLayerOutputWithContext(context.Context) LayerOutput
}

// Layer holds metadata specific to a layer of a Docker image.
type LayerArgs struct {
	// The recovered arguments to the Dockerfile directive.
	Arguments pulumi.StringPtrInput `pulumi:"arguments"`
	// The recovered Dockerfile directive used to construct this layer.
	Directive LayerDirectivePtrInput `pulumi:"directive"`
}

func (LayerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Layer)(nil)).Elem()
}

func (i LayerArgs) ToLayerOutput() LayerOutput {
	return i.ToLayerOutputWithContext(context.Background())
}

func (i LayerArgs) ToLayerOutputWithContext(ctx context.Context) LayerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LayerOutput)
}

// LayerArrayInput is an input type that accepts LayerArray and LayerArrayOutput values.
// You can construct a concrete instance of `LayerArrayInput` via:
//
//	LayerArray{ LayerArgs{...} }
type LayerArrayInput interface {
	pulumi.Input

	ToLayerArrayOutput() LayerArrayOutput
	ToLayerArrayOutputWithContext(context.Context) LayerArrayOutput
}

type LayerArray []LayerInput

func (LayerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Layer)(nil)).Elem()
}

func (i LayerArray) ToLayerArrayOutput() LayerArrayOutput {
	return i.ToLayerArrayOutputWithContext(context.Background())
}

func (i LayerArray) ToLayerArrayOutputWithContext(ctx context.Context) LayerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LayerArrayOutput)
}

// Layer holds metadata specific to a layer of a Docker image.
type LayerOutput struct{ *pulumi.OutputState }

func (LayerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Layer)(nil)).Elem()
}

func (o LayerOutput) ToLayerOutput() LayerOutput {
	return o
}

func (o LayerOutput) ToLayerOutputWithContext(ctx context.Context) LayerOutput {
	return o
}

// The recovered arguments to the Dockerfile directive.
func (o LayerOutput) Arguments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Layer) *string { return v.Arguments }).(pulumi.StringPtrOutput)
}

// The recovered Dockerfile directive used to construct this layer.
func (o LayerOutput) Directive() LayerDirectivePtrOutput {
	return o.ApplyT(func(v Layer) *LayerDirective { return v.Directive }).(LayerDirectivePtrOutput)
}

type LayerArrayOutput struct{ *pulumi.OutputState }

func (LayerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Layer)(nil)).Elem()
}

func (o LayerArrayOutput) ToLayerArrayOutput() LayerArrayOutput {
	return o
}

func (o LayerArrayOutput) ToLayerArrayOutputWithContext(ctx context.Context) LayerArrayOutput {
	return o
}

func (o LayerArrayOutput) Index(i pulumi.IntInput) LayerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Layer {
		return vs[0].([]Layer)[vs[1].(int)]
	}).(LayerOutput)
}

// Layer holds metadata specific to a layer of a Docker image.
type LayerResponse struct {
	// The recovered arguments to the Dockerfile directive.
	Arguments string `pulumi:"arguments"`
	// The recovered Dockerfile directive used to construct this layer.
	Directive string `pulumi:"directive"`
}

// Layer holds metadata specific to a layer of a Docker image.
type LayerResponseOutput struct{ *pulumi.OutputState }

func (LayerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LayerResponse)(nil)).Elem()
}

func (o LayerResponseOutput) ToLayerResponseOutput() LayerResponseOutput {
	return o
}

func (o LayerResponseOutput) ToLayerResponseOutputWithContext(ctx context.Context) LayerResponseOutput {
	return o
}

// The recovered arguments to the Dockerfile directive.
func (o LayerResponseOutput) Arguments() pulumi.StringOutput {
	return o.ApplyT(func(v LayerResponse) string { return v.Arguments }).(pulumi.StringOutput)
}

// The recovered Dockerfile directive used to construct this layer.
func (o LayerResponseOutput) Directive() pulumi.StringOutput {
	return o.ApplyT(func(v LayerResponse) string { return v.Directive }).(pulumi.StringOutput)
}

type LayerResponseArrayOutput struct{ *pulumi.OutputState }

func (LayerResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LayerResponse)(nil)).Elem()
}

func (o LayerResponseArrayOutput) ToLayerResponseArrayOutput() LayerResponseArrayOutput {
	return o
}

func (o LayerResponseArrayOutput) ToLayerResponseArrayOutputWithContext(ctx context.Context) LayerResponseArrayOutput {
	return o
}

func (o LayerResponseArrayOutput) Index(i pulumi.IntInput) LayerResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LayerResponse {
		return vs[0].([]LayerResponse)[vs[1].(int)]
	}).(LayerResponseOutput)
}

// License information.
type License struct {
	// Comments
	Comments *string `pulumi:"comments"`
	// Often a single license can be used to represent the licensing terms. Sometimes it is necessary to include a choice of one or more licenses or some combination of license identifiers. Examples: "LGPL-2.1-only OR MIT", "LGPL-2.1-only AND MIT", "GPL-2.0-or-later WITH Bison-exception-2.2".
	Expression *string `pulumi:"expression"`
}

// LicenseInput is an input type that accepts LicenseArgs and LicenseOutput values.
// You can construct a concrete instance of `LicenseInput` via:
//
//	LicenseArgs{...}
type LicenseInput interface {
	pulumi.Input

	ToLicenseOutput() LicenseOutput
	ToLicenseOutputWithContext(context.Context) LicenseOutput
}

// License information.
type LicenseArgs struct {
	// Comments
	Comments pulumi.StringPtrInput `pulumi:"comments"`
	// Often a single license can be used to represent the licensing terms. Sometimes it is necessary to include a choice of one or more licenses or some combination of license identifiers. Examples: "LGPL-2.1-only OR MIT", "LGPL-2.1-only AND MIT", "GPL-2.0-or-later WITH Bison-exception-2.2".
	Expression pulumi.StringPtrInput `pulumi:"expression"`
}

func (LicenseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*License)(nil)).Elem()
}

func (i LicenseArgs) ToLicenseOutput() LicenseOutput {
	return i.ToLicenseOutputWithContext(context.Background())
}

func (i LicenseArgs) ToLicenseOutputWithContext(ctx context.Context) LicenseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseOutput)
}

func (i LicenseArgs) ToLicensePtrOutput() LicensePtrOutput {
	return i.ToLicensePtrOutputWithContext(context.Background())
}

func (i LicenseArgs) ToLicensePtrOutputWithContext(ctx context.Context) LicensePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseOutput).ToLicensePtrOutputWithContext(ctx)
}

// LicensePtrInput is an input type that accepts LicenseArgs, LicensePtr and LicensePtrOutput values.
// You can construct a concrete instance of `LicensePtrInput` via:
//
//	        LicenseArgs{...}
//
//	or:
//
//	        nil
type LicensePtrInput interface {
	pulumi.Input

	ToLicensePtrOutput() LicensePtrOutput
	ToLicensePtrOutputWithContext(context.Context) LicensePtrOutput
}

type licensePtrType LicenseArgs

func LicensePtr(v *LicenseArgs) LicensePtrInput {
	return (*licensePtrType)(v)
}

func (*licensePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**License)(nil)).Elem()
}

func (i *licensePtrType) ToLicensePtrOutput() LicensePtrOutput {
	return i.ToLicensePtrOutputWithContext(context.Background())
}

func (i *licensePtrType) ToLicensePtrOutputWithContext(ctx context.Context) LicensePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicensePtrOutput)
}

// License information.
type LicenseOutput struct{ *pulumi.OutputState }

func (LicenseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*License)(nil)).Elem()
}

func (o LicenseOutput) ToLicenseOutput() LicenseOutput {
	return o
}

func (o LicenseOutput) ToLicenseOutputWithContext(ctx context.Context) LicenseOutput {
	return o
}

func (o LicenseOutput) ToLicensePtrOutput() LicensePtrOutput {
	return o.ToLicensePtrOutputWithContext(context.Background())
}

func (o LicenseOutput) ToLicensePtrOutputWithContext(ctx context.Context) LicensePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v License) *License {
		return &v
	}).(LicensePtrOutput)
}

// Comments
func (o LicenseOutput) Comments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v License) *string { return v.Comments }).(pulumi.StringPtrOutput)
}

// Often a single license can be used to represent the licensing terms. Sometimes it is necessary to include a choice of one or more licenses or some combination of license identifiers. Examples: "LGPL-2.1-only OR MIT", "LGPL-2.1-only AND MIT", "GPL-2.0-or-later WITH Bison-exception-2.2".
func (o LicenseOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v License) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

type LicensePtrOutput struct{ *pulumi.OutputState }

func (LicensePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**License)(nil)).Elem()
}

func (o LicensePtrOutput) ToLicensePtrOutput() LicensePtrOutput {
	return o
}

func (o LicensePtrOutput) ToLicensePtrOutputWithContext(ctx context.Context) LicensePtrOutput {
	return o
}

func (o LicensePtrOutput) Elem() LicenseOutput {
	return o.ApplyT(func(v *License) License {
		if v != nil {
			return *v
		}
		var ret License
		return ret
	}).(LicenseOutput)
}

// Comments
func (o LicensePtrOutput) Comments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *License) *string {
		if v == nil {
			return nil
		}
		return v.Comments
	}).(pulumi.StringPtrOutput)
}

// Often a single license can be used to represent the licensing terms. Sometimes it is necessary to include a choice of one or more licenses or some combination of license identifiers. Examples: "LGPL-2.1-only OR MIT", "LGPL-2.1-only AND MIT", "GPL-2.0-or-later WITH Bison-exception-2.2".
func (o LicensePtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *License) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// License information.
type LicenseResponse struct {
	// Comments
	Comments string `pulumi:"comments"`
	// Often a single license can be used to represent the licensing terms. Sometimes it is necessary to include a choice of one or more licenses or some combination of license identifiers. Examples: "LGPL-2.1-only OR MIT", "LGPL-2.1-only AND MIT", "GPL-2.0-or-later WITH Bison-exception-2.2".
	Expression string `pulumi:"expression"`
}

// License information.
type LicenseResponseOutput struct{ *pulumi.OutputState }

func (LicenseResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LicenseResponse)(nil)).Elem()
}

func (o LicenseResponseOutput) ToLicenseResponseOutput() LicenseResponseOutput {
	return o
}

func (o LicenseResponseOutput) ToLicenseResponseOutputWithContext(ctx context.Context) LicenseResponseOutput {
	return o
}

// Comments
func (o LicenseResponseOutput) Comments() pulumi.StringOutput {
	return o.ApplyT(func(v LicenseResponse) string { return v.Comments }).(pulumi.StringOutput)
}

// Often a single license can be used to represent the licensing terms. Sometimes it is necessary to include a choice of one or more licenses or some combination of license identifiers. Examples: "LGPL-2.1-only OR MIT", "LGPL-2.1-only AND MIT", "GPL-2.0-or-later WITH Bison-exception-2.2".
func (o LicenseResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v LicenseResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// An occurrence of a particular package installation found within a system's filesystem. e.g. glibc was found in /var/lib/dpkg/status
type Location struct {
	// Deprecated. The cpe_uri in [cpe format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
	//
	// Deprecated: Deprecated. The cpe_uri in [cpe format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
	CpeUri *string `pulumi:"cpeUri"`
	// The path from which we gathered that this package/version is installed.
	Path *string `pulumi:"path"`
	// Deprecated. The version installed at this location.
	//
	// Deprecated: Deprecated. The version installed at this location.
	Version *Version `pulumi:"version"`
}

// LocationInput is an input type that accepts LocationArgs and LocationOutput values.
// You can construct a concrete instance of `LocationInput` via:
//
//	LocationArgs{...}
type LocationInput interface {
	pulumi.Input

	ToLocationOutput() LocationOutput
	ToLocationOutputWithContext(context.Context) LocationOutput
}

// An occurrence of a particular package installation found within a system's filesystem. e.g. glibc was found in /var/lib/dpkg/status
type LocationArgs struct {
	// Deprecated. The cpe_uri in [cpe format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
	//
	// Deprecated: Deprecated. The cpe_uri in [cpe format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
	CpeUri pulumi.StringPtrInput `pulumi:"cpeUri"`
	// The path from which we gathered that this package/version is installed.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Deprecated. The version installed at this location.
	//
	// Deprecated: Deprecated. The version installed at this location.
	Version VersionPtrInput `pulumi:"version"`
}

func (LocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Location)(nil)).Elem()
}

func (i LocationArgs) ToLocationOutput() LocationOutput {
	return i.ToLocationOutputWithContext(context.Background())
}

func (i LocationArgs) ToLocationOutputWithContext(ctx context.Context) LocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationOutput)
}

// LocationArrayInput is an input type that accepts LocationArray and LocationArrayOutput values.
// You can construct a concrete instance of `LocationArrayInput` via:
//
//	LocationArray{ LocationArgs{...} }
type LocationArrayInput interface {
	pulumi.Input

	ToLocationArrayOutput() LocationArrayOutput
	ToLocationArrayOutputWithContext(context.Context) LocationArrayOutput
}

type LocationArray []LocationInput

func (LocationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Location)(nil)).Elem()
}

func (i LocationArray) ToLocationArrayOutput() LocationArrayOutput {
	return i.ToLocationArrayOutputWithContext(context.Background())
}

func (i LocationArray) ToLocationArrayOutputWithContext(ctx context.Context) LocationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationArrayOutput)
}

// An occurrence of a particular package installation found within a system's filesystem. e.g. glibc was found in /var/lib/dpkg/status
type LocationOutput struct{ *pulumi.OutputState }

func (LocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Location)(nil)).Elem()
}

func (o LocationOutput) ToLocationOutput() LocationOutput {
	return o
}

func (o LocationOutput) ToLocationOutputWithContext(ctx context.Context) LocationOutput {
	return o
}

// Deprecated. The cpe_uri in [cpe format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
//
// Deprecated: Deprecated. The cpe_uri in [cpe format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
func (o LocationOutput) CpeUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Location) *string { return v.CpeUri }).(pulumi.StringPtrOutput)
}

// The path from which we gathered that this package/version is installed.
func (o LocationOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Location) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Deprecated. The version installed at this location.
//
// Deprecated: Deprecated. The version installed at this location.
func (o LocationOutput) Version() VersionPtrOutput {
	return o.ApplyT(func(v Location) *Version { return v.Version }).(VersionPtrOutput)
}

type LocationArrayOutput struct{ *pulumi.OutputState }

func (LocationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Location)(nil)).Elem()
}

func (o LocationArrayOutput) ToLocationArrayOutput() LocationArrayOutput {
	return o
}

func (o LocationArrayOutput) ToLocationArrayOutputWithContext(ctx context.Context) LocationArrayOutput {
	return o
}

func (o LocationArrayOutput) Index(i pulumi.IntInput) LocationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Location {
		return vs[0].([]Location)[vs[1].(int)]
	}).(LocationOutput)
}

// An occurrence of a particular package installation found within a system's filesystem. e.g. glibc was found in /var/lib/dpkg/status
type LocationResponse struct {
	// Deprecated. The cpe_uri in [cpe format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
	//
	// Deprecated: Deprecated. The cpe_uri in [cpe format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
	CpeUri string `pulumi:"cpeUri"`
	// The path from which we gathered that this package/version is installed.
	Path string `pulumi:"path"`
	// Deprecated. The version installed at this location.
	//
	// Deprecated: Deprecated. The version installed at this location.
	Version VersionResponse `pulumi:"version"`
}

// An occurrence of a particular package installation found within a system's filesystem. e.g. glibc was found in /var/lib/dpkg/status
type LocationResponseOutput struct{ *pulumi.OutputState }

func (LocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationResponse)(nil)).Elem()
}

func (o LocationResponseOutput) ToLocationResponseOutput() LocationResponseOutput {
	return o
}

func (o LocationResponseOutput) ToLocationResponseOutputWithContext(ctx context.Context) LocationResponseOutput {
	return o
}

// Deprecated. The cpe_uri in [cpe format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
//
// Deprecated: Deprecated. The cpe_uri in [cpe format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
func (o LocationResponseOutput) CpeUri() pulumi.StringOutput {
	return o.ApplyT(func(v LocationResponse) string { return v.CpeUri }).(pulumi.StringOutput)
}

// The path from which we gathered that this package/version is installed.
func (o LocationResponseOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v LocationResponse) string { return v.Path }).(pulumi.StringOutput)
}

// Deprecated. The version installed at this location.
//
// Deprecated: Deprecated. The version installed at this location.
func (o LocationResponseOutput) Version() VersionResponseOutput {
	return o.ApplyT(func(v LocationResponse) VersionResponse { return v.Version }).(VersionResponseOutput)
}

type LocationResponseArrayOutput struct{ *pulumi.OutputState }

func (LocationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LocationResponse)(nil)).Elem()
}

func (o LocationResponseArrayOutput) ToLocationResponseArrayOutput() LocationResponseArrayOutput {
	return o
}

func (o LocationResponseArrayOutput) ToLocationResponseArrayOutputWithContext(ctx context.Context) LocationResponseArrayOutput {
	return o
}

func (o LocationResponseArrayOutput) Index(i pulumi.IntInput) LocationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LocationResponse {
		return vs[0].([]LocationResponse)[vs[1].(int)]
	}).(LocationResponseOutput)
}

// Material is a material used in the generation of the provenance
type Material struct {
	// digest is a map from a hash algorithm (e.g. sha256) to the value in the material
	Digest map[string]string `pulumi:"digest"`
	// uri is the uri of the material
	Uri *string `pulumi:"uri"`
}

// MaterialInput is an input type that accepts MaterialArgs and MaterialOutput values.
// You can construct a concrete instance of `MaterialInput` via:
//
//	MaterialArgs{...}
type MaterialInput interface {
	pulumi.Input

	ToMaterialOutput() MaterialOutput
	ToMaterialOutputWithContext(context.Context) MaterialOutput
}

// Material is a material used in the generation of the provenance
type MaterialArgs struct {
	// digest is a map from a hash algorithm (e.g. sha256) to the value in the material
	Digest pulumi.StringMapInput `pulumi:"digest"`
	// uri is the uri of the material
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

func (MaterialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Material)(nil)).Elem()
}

func (i MaterialArgs) ToMaterialOutput() MaterialOutput {
	return i.ToMaterialOutputWithContext(context.Background())
}

func (i MaterialArgs) ToMaterialOutputWithContext(ctx context.Context) MaterialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaterialOutput)
}

// MaterialArrayInput is an input type that accepts MaterialArray and MaterialArrayOutput values.
// You can construct a concrete instance of `MaterialArrayInput` via:
//
//	MaterialArray{ MaterialArgs{...} }
type MaterialArrayInput interface {
	pulumi.Input

	ToMaterialArrayOutput() MaterialArrayOutput
	ToMaterialArrayOutputWithContext(context.Context) MaterialArrayOutput
}

type MaterialArray []MaterialInput

func (MaterialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Material)(nil)).Elem()
}

func (i MaterialArray) ToMaterialArrayOutput() MaterialArrayOutput {
	return i.ToMaterialArrayOutputWithContext(context.Background())
}

func (i MaterialArray) ToMaterialArrayOutputWithContext(ctx context.Context) MaterialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaterialArrayOutput)
}

// Material is a material used in the generation of the provenance
type MaterialOutput struct{ *pulumi.OutputState }

func (MaterialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Material)(nil)).Elem()
}

func (o MaterialOutput) ToMaterialOutput() MaterialOutput {
	return o
}

func (o MaterialOutput) ToMaterialOutputWithContext(ctx context.Context) MaterialOutput {
	return o
}

// digest is a map from a hash algorithm (e.g. sha256) to the value in the material
func (o MaterialOutput) Digest() pulumi.StringMapOutput {
	return o.ApplyT(func(v Material) map[string]string { return v.Digest }).(pulumi.StringMapOutput)
}

// uri is the uri of the material
func (o MaterialOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Material) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type MaterialArrayOutput struct{ *pulumi.OutputState }

func (MaterialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Material)(nil)).Elem()
}

func (o MaterialArrayOutput) ToMaterialArrayOutput() MaterialArrayOutput {
	return o
}

func (o MaterialArrayOutput) ToMaterialArrayOutputWithContext(ctx context.Context) MaterialArrayOutput {
	return o
}

func (o MaterialArrayOutput) Index(i pulumi.IntInput) MaterialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Material {
		return vs[0].([]Material)[vs[1].(int)]
	}).(MaterialOutput)
}

// Material is a material used in the generation of the provenance
type MaterialResponse struct {
	// digest is a map from a hash algorithm (e.g. sha256) to the value in the material
	Digest map[string]string `pulumi:"digest"`
	// uri is the uri of the material
	Uri string `pulumi:"uri"`
}

// Material is a material used in the generation of the provenance
type MaterialResponseOutput struct{ *pulumi.OutputState }

func (MaterialResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaterialResponse)(nil)).Elem()
}

func (o MaterialResponseOutput) ToMaterialResponseOutput() MaterialResponseOutput {
	return o
}

func (o MaterialResponseOutput) ToMaterialResponseOutputWithContext(ctx context.Context) MaterialResponseOutput {
	return o
}

// digest is a map from a hash algorithm (e.g. sha256) to the value in the material
func (o MaterialResponseOutput) Digest() pulumi.StringMapOutput {
	return o.ApplyT(func(v MaterialResponse) map[string]string { return v.Digest }).(pulumi.StringMapOutput)
}

// uri is the uri of the material
func (o MaterialResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v MaterialResponse) string { return v.Uri }).(pulumi.StringOutput)
}

type MaterialResponseArrayOutput struct{ *pulumi.OutputState }

func (MaterialResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MaterialResponse)(nil)).Elem()
}

func (o MaterialResponseArrayOutput) ToMaterialResponseArrayOutput() MaterialResponseArrayOutput {
	return o
}

func (o MaterialResponseArrayOutput) ToMaterialResponseArrayOutputWithContext(ctx context.Context) MaterialResponseArrayOutput {
	return o
}

func (o MaterialResponseArrayOutput) Index(i pulumi.IntInput) MaterialResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MaterialResponse {
		return vs[0].([]MaterialResponse)[vs[1].(int)]
	}).(MaterialResponseOutput)
}

// Other properties of the build.
type Metadata struct {
	// The timestamp of when the build completed.
	BuildFinishedOn *string `pulumi:"buildFinishedOn"`
	// Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec.
	BuildInvocationId *string `pulumi:"buildInvocationId"`
	// The timestamp of when the build started.
	BuildStartedOn *string `pulumi:"buildStartedOn"`
	// Indicates that the builder claims certain fields in this message to be complete.
	Completeness *Completeness `pulumi:"completeness"`
	// If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output.
	Reproducible *bool `pulumi:"reproducible"`
}

// MetadataInput is an input type that accepts MetadataArgs and MetadataOutput values.
// You can construct a concrete instance of `MetadataInput` via:
//
//	MetadataArgs{...}
type MetadataInput interface {
	pulumi.Input

	ToMetadataOutput() MetadataOutput
	ToMetadataOutputWithContext(context.Context) MetadataOutput
}

// Other properties of the build.
type MetadataArgs struct {
	// The timestamp of when the build completed.
	BuildFinishedOn pulumi.StringPtrInput `pulumi:"buildFinishedOn"`
	// Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec.
	BuildInvocationId pulumi.StringPtrInput `pulumi:"buildInvocationId"`
	// The timestamp of when the build started.
	BuildStartedOn pulumi.StringPtrInput `pulumi:"buildStartedOn"`
	// Indicates that the builder claims certain fields in this message to be complete.
	Completeness CompletenessPtrInput `pulumi:"completeness"`
	// If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output.
	Reproducible pulumi.BoolPtrInput `pulumi:"reproducible"`
}

func (MetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Metadata)(nil)).Elem()
}

func (i MetadataArgs) ToMetadataOutput() MetadataOutput {
	return i.ToMetadataOutputWithContext(context.Background())
}

func (i MetadataArgs) ToMetadataOutputWithContext(ctx context.Context) MetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataOutput)
}

func (i MetadataArgs) ToMetadataPtrOutput() MetadataPtrOutput {
	return i.ToMetadataPtrOutputWithContext(context.Background())
}

func (i MetadataArgs) ToMetadataPtrOutputWithContext(ctx context.Context) MetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataOutput).ToMetadataPtrOutputWithContext(ctx)
}

// MetadataPtrInput is an input type that accepts MetadataArgs, MetadataPtr and MetadataPtrOutput values.
// You can construct a concrete instance of `MetadataPtrInput` via:
//
//	        MetadataArgs{...}
//
//	or:
//
//	        nil
type MetadataPtrInput interface {
	pulumi.Input

	ToMetadataPtrOutput() MetadataPtrOutput
	ToMetadataPtrOutputWithContext(context.Context) MetadataPtrOutput
}

type metadataPtrType MetadataArgs

func MetadataPtr(v *MetadataArgs) MetadataPtrInput {
	return (*metadataPtrType)(v)
}

func (*metadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Metadata)(nil)).Elem()
}

func (i *metadataPtrType) ToMetadataPtrOutput() MetadataPtrOutput {
	return i.ToMetadataPtrOutputWithContext(context.Background())
}

func (i *metadataPtrType) ToMetadataPtrOutputWithContext(ctx context.Context) MetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataPtrOutput)
}

// Other properties of the build.
type MetadataOutput struct{ *pulumi.OutputState }

func (MetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Metadata)(nil)).Elem()
}

func (o MetadataOutput) ToMetadataOutput() MetadataOutput {
	return o
}

func (o MetadataOutput) ToMetadataOutputWithContext(ctx context.Context) MetadataOutput {
	return o
}

func (o MetadataOutput) ToMetadataPtrOutput() MetadataPtrOutput {
	return o.ToMetadataPtrOutputWithContext(context.Background())
}

func (o MetadataOutput) ToMetadataPtrOutputWithContext(ctx context.Context) MetadataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Metadata) *Metadata {
		return &v
	}).(MetadataPtrOutput)
}

// The timestamp of when the build completed.
func (o MetadataOutput) BuildFinishedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Metadata) *string { return v.BuildFinishedOn }).(pulumi.StringPtrOutput)
}

// Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec.
func (o MetadataOutput) BuildInvocationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Metadata) *string { return v.BuildInvocationId }).(pulumi.StringPtrOutput)
}

// The timestamp of when the build started.
func (o MetadataOutput) BuildStartedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Metadata) *string { return v.BuildStartedOn }).(pulumi.StringPtrOutput)
}

// Indicates that the builder claims certain fields in this message to be complete.
func (o MetadataOutput) Completeness() CompletenessPtrOutput {
	return o.ApplyT(func(v Metadata) *Completeness { return v.Completeness }).(CompletenessPtrOutput)
}

// If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output.
func (o MetadataOutput) Reproducible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Metadata) *bool { return v.Reproducible }).(pulumi.BoolPtrOutput)
}

type MetadataPtrOutput struct{ *pulumi.OutputState }

func (MetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Metadata)(nil)).Elem()
}

func (o MetadataPtrOutput) ToMetadataPtrOutput() MetadataPtrOutput {
	return o
}

func (o MetadataPtrOutput) ToMetadataPtrOutputWithContext(ctx context.Context) MetadataPtrOutput {
	return o
}

func (o MetadataPtrOutput) Elem() MetadataOutput {
	return o.ApplyT(func(v *Metadata) Metadata {
		if v != nil {
			return *v
		}
		var ret Metadata
		return ret
	}).(MetadataOutput)
}

// The timestamp of when the build completed.
func (o MetadataPtrOutput) BuildFinishedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Metadata) *string {
		if v == nil {
			return nil
		}
		return v.BuildFinishedOn
	}).(pulumi.StringPtrOutput)
}

// Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec.
func (o MetadataPtrOutput) BuildInvocationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Metadata) *string {
		if v == nil {
			return nil
		}
		return v.BuildInvocationId
	}).(pulumi.StringPtrOutput)
}

// The timestamp of when the build started.
func (o MetadataPtrOutput) BuildStartedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Metadata) *string {
		if v == nil {
			return nil
		}
		return v.BuildStartedOn
	}).(pulumi.StringPtrOutput)
}

// Indicates that the builder claims certain fields in this message to be complete.
func (o MetadataPtrOutput) Completeness() CompletenessPtrOutput {
	return o.ApplyT(func(v *Metadata) *Completeness {
		if v == nil {
			return nil
		}
		return v.Completeness
	}).(CompletenessPtrOutput)
}

// If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output.
func (o MetadataPtrOutput) Reproducible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Metadata) *bool {
		if v == nil {
			return nil
		}
		return v.Reproducible
	}).(pulumi.BoolPtrOutput)
}

// Other properties of the build.
type MetadataResponse struct {
	// The timestamp of when the build completed.
	BuildFinishedOn string `pulumi:"buildFinishedOn"`
	// Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec.
	BuildInvocationId string `pulumi:"buildInvocationId"`
	// The timestamp of when the build started.
	BuildStartedOn string `pulumi:"buildStartedOn"`
	// Indicates that the builder claims certain fields in this message to be complete.
	Completeness CompletenessResponse `pulumi:"completeness"`
	// If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output.
	Reproducible bool `pulumi:"reproducible"`
}

// Other properties of the build.
type MetadataResponseOutput struct{ *pulumi.OutputState }

func (MetadataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataResponse)(nil)).Elem()
}

func (o MetadataResponseOutput) ToMetadataResponseOutput() MetadataResponseOutput {
	return o
}

func (o MetadataResponseOutput) ToMetadataResponseOutputWithContext(ctx context.Context) MetadataResponseOutput {
	return o
}

// The timestamp of when the build completed.
func (o MetadataResponseOutput) BuildFinishedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MetadataResponse) string { return v.BuildFinishedOn }).(pulumi.StringOutput)
}

// Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec.
func (o MetadataResponseOutput) BuildInvocationId() pulumi.StringOutput {
	return o.ApplyT(func(v MetadataResponse) string { return v.BuildInvocationId }).(pulumi.StringOutput)
}

// The timestamp of when the build started.
func (o MetadataResponseOutput) BuildStartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MetadataResponse) string { return v.BuildStartedOn }).(pulumi.StringOutput)
}

// Indicates that the builder claims certain fields in this message to be complete.
func (o MetadataResponseOutput) Completeness() CompletenessResponseOutput {
	return o.ApplyT(func(v MetadataResponse) CompletenessResponse { return v.Completeness }).(CompletenessResponseOutput)
}

// If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output.
func (o MetadataResponseOutput) Reproducible() pulumi.BoolOutput {
	return o.ApplyT(func(v MetadataResponse) bool { return v.Reproducible }).(pulumi.BoolOutput)
}

// Details about files that caused a compliance check to fail.
type NonCompliantFile struct {
	// Command to display the non-compliant files.
	DisplayCommand *string `pulumi:"displayCommand"`
	// display_command is a single command that can be used to display a list of non compliant files. When there is no such command, we can also iterate a list of non compliant file using 'path'. Empty if `display_command` is set.
	Path *string `pulumi:"path"`
	// Explains why a file is non compliant for a CIS check.
	Reason *string `pulumi:"reason"`
}

// NonCompliantFileInput is an input type that accepts NonCompliantFileArgs and NonCompliantFileOutput values.
// You can construct a concrete instance of `NonCompliantFileInput` via:
//
//	NonCompliantFileArgs{...}
type NonCompliantFileInput interface {
	pulumi.Input

	ToNonCompliantFileOutput() NonCompliantFileOutput
	ToNonCompliantFileOutputWithContext(context.Context) NonCompliantFileOutput
}

// Details about files that caused a compliance check to fail.
type NonCompliantFileArgs struct {
	// Command to display the non-compliant files.
	DisplayCommand pulumi.StringPtrInput `pulumi:"displayCommand"`
	// display_command is a single command that can be used to display a list of non compliant files. When there is no such command, we can also iterate a list of non compliant file using 'path'. Empty if `display_command` is set.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Explains why a file is non compliant for a CIS check.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
}

func (NonCompliantFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NonCompliantFile)(nil)).Elem()
}

func (i NonCompliantFileArgs) ToNonCompliantFileOutput() NonCompliantFileOutput {
	return i.ToNonCompliantFileOutputWithContext(context.Background())
}

func (i NonCompliantFileArgs) ToNonCompliantFileOutputWithContext(ctx context.Context) NonCompliantFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NonCompliantFileOutput)
}

// NonCompliantFileArrayInput is an input type that accepts NonCompliantFileArray and NonCompliantFileArrayOutput values.
// You can construct a concrete instance of `NonCompliantFileArrayInput` via:
//
//	NonCompliantFileArray{ NonCompliantFileArgs{...} }
type NonCompliantFileArrayInput interface {
	pulumi.Input

	ToNonCompliantFileArrayOutput() NonCompliantFileArrayOutput
	ToNonCompliantFileArrayOutputWithContext(context.Context) NonCompliantFileArrayOutput
}

type NonCompliantFileArray []NonCompliantFileInput

func (NonCompliantFileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NonCompliantFile)(nil)).Elem()
}

func (i NonCompliantFileArray) ToNonCompliantFileArrayOutput() NonCompliantFileArrayOutput {
	return i.ToNonCompliantFileArrayOutputWithContext(context.Background())
}

func (i NonCompliantFileArray) ToNonCompliantFileArrayOutputWithContext(ctx context.Context) NonCompliantFileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NonCompliantFileArrayOutput)
}

// Details about files that caused a compliance check to fail.
type NonCompliantFileOutput struct{ *pulumi.OutputState }

func (NonCompliantFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NonCompliantFile)(nil)).Elem()
}

func (o NonCompliantFileOutput) ToNonCompliantFileOutput() NonCompliantFileOutput {
	return o
}

func (o NonCompliantFileOutput) ToNonCompliantFileOutputWithContext(ctx context.Context) NonCompliantFileOutput {
	return o
}

// Command to display the non-compliant files.
func (o NonCompliantFileOutput) DisplayCommand() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NonCompliantFile) *string { return v.DisplayCommand }).(pulumi.StringPtrOutput)
}

// display_command is a single command that can be used to display a list of non compliant files. When there is no such command, we can also iterate a list of non compliant file using 'path'. Empty if `display_command` is set.
func (o NonCompliantFileOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NonCompliantFile) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Explains why a file is non compliant for a CIS check.
func (o NonCompliantFileOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NonCompliantFile) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

type NonCompliantFileArrayOutput struct{ *pulumi.OutputState }

func (NonCompliantFileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NonCompliantFile)(nil)).Elem()
}

func (o NonCompliantFileArrayOutput) ToNonCompliantFileArrayOutput() NonCompliantFileArrayOutput {
	return o
}

func (o NonCompliantFileArrayOutput) ToNonCompliantFileArrayOutputWithContext(ctx context.Context) NonCompliantFileArrayOutput {
	return o
}

func (o NonCompliantFileArrayOutput) Index(i pulumi.IntInput) NonCompliantFileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NonCompliantFile {
		return vs[0].([]NonCompliantFile)[vs[1].(int)]
	}).(NonCompliantFileOutput)
}

// Details about files that caused a compliance check to fail.
type NonCompliantFileResponse struct {
	// Command to display the non-compliant files.
	DisplayCommand string `pulumi:"displayCommand"`
	// display_command is a single command that can be used to display a list of non compliant files. When there is no such command, we can also iterate a list of non compliant file using 'path'. Empty if `display_command` is set.
	Path string `pulumi:"path"`
	// Explains why a file is non compliant for a CIS check.
	Reason string `pulumi:"reason"`
}

// Details about files that caused a compliance check to fail.
type NonCompliantFileResponseOutput struct{ *pulumi.OutputState }

func (NonCompliantFileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NonCompliantFileResponse)(nil)).Elem()
}

func (o NonCompliantFileResponseOutput) ToNonCompliantFileResponseOutput() NonCompliantFileResponseOutput {
	return o
}

func (o NonCompliantFileResponseOutput) ToNonCompliantFileResponseOutputWithContext(ctx context.Context) NonCompliantFileResponseOutput {
	return o
}

// Command to display the non-compliant files.
func (o NonCompliantFileResponseOutput) DisplayCommand() pulumi.StringOutput {
	return o.ApplyT(func(v NonCompliantFileResponse) string { return v.DisplayCommand }).(pulumi.StringOutput)
}

// display_command is a single command that can be used to display a list of non compliant files. When there is no such command, we can also iterate a list of non compliant file using 'path'. Empty if `display_command` is set.
func (o NonCompliantFileResponseOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v NonCompliantFileResponse) string { return v.Path }).(pulumi.StringOutput)
}

// Explains why a file is non compliant for a CIS check.
func (o NonCompliantFileResponseOutput) Reason() pulumi.StringOutput {
	return o.ApplyT(func(v NonCompliantFileResponse) string { return v.Reason }).(pulumi.StringOutput)
}

type NonCompliantFileResponseArrayOutput struct{ *pulumi.OutputState }

func (NonCompliantFileResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NonCompliantFileResponse)(nil)).Elem()
}

func (o NonCompliantFileResponseArrayOutput) ToNonCompliantFileResponseArrayOutput() NonCompliantFileResponseArrayOutput {
	return o
}

func (o NonCompliantFileResponseArrayOutput) ToNonCompliantFileResponseArrayOutputWithContext(ctx context.Context) NonCompliantFileResponseArrayOutput {
	return o
}

func (o NonCompliantFileResponseArrayOutput) Index(i pulumi.IntInput) NonCompliantFileResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NonCompliantFileResponse {
		return vs[0].([]NonCompliantFileResponse)[vs[1].(int)]
	}).(NonCompliantFileResponseOutput)
}

// This resource represents a long-running operation that is the result of a network API call.
type OperationResponse struct {
	// If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
	Done bool `pulumi:"done"`
	// The error result of the operation in case of failure or cancellation.
	Error StatusResponse `pulumi:"error"`
	// Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
	Metadata map[string]interface{} `pulumi:"metadata"`
	// The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.
	Name string `pulumi:"name"`
	// The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
	Response map[string]interface{} `pulumi:"response"`
}

// This resource represents a long-running operation that is the result of a network API call.
type OperationResponseOutput struct{ *pulumi.OutputState }

func (OperationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OperationResponse)(nil)).Elem()
}

func (o OperationResponseOutput) ToOperationResponseOutput() OperationResponseOutput {
	return o
}

func (o OperationResponseOutput) ToOperationResponseOutputWithContext(ctx context.Context) OperationResponseOutput {
	return o
}

// If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
func (o OperationResponseOutput) Done() pulumi.BoolOutput {
	return o.ApplyT(func(v OperationResponse) bool { return v.Done }).(pulumi.BoolOutput)
}

// The error result of the operation in case of failure or cancellation.
func (o OperationResponseOutput) Error() StatusResponseOutput {
	return o.ApplyT(func(v OperationResponse) StatusResponse { return v.Error }).(StatusResponseOutput)
}

// Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
func (o OperationResponseOutput) Metadata() pulumi.MapOutput {
	return o.ApplyT(func(v OperationResponse) map[string]interface{} { return v.Metadata }).(pulumi.MapOutput)
}

// The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.
func (o OperationResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v OperationResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
func (o OperationResponseOutput) Response() pulumi.MapOutput {
	return o.ApplyT(func(v OperationResponse) map[string]interface{} { return v.Response }).(pulumi.MapOutput)
}

// This represents a particular package that is distributed over various channels. e.g. glibc (aka libc6) is distributed by many, at various versions.
type Package struct {
	// The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.
	Architecture *PackageArchitecture `pulumi:"architecture"`
	// The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages.
	CpeUri *string `pulumi:"cpeUri"`
	// The description of this package.
	Description *string `pulumi:"description"`
	// Hash value, typically a file digest, that allows unique identification a specific package.
	Digest []Digest `pulumi:"digest"`
	// The various channels by which a package is distributed.
	Distribution []Distribution `pulumi:"distribution"`
	// Licenses that have been declared by the authors of the package.
	License *License `pulumi:"license"`
	// A freeform text denoting the maintainer of this package.
	Maintainer *string `pulumi:"maintainer"`
	// The name of the package.
	Name *string `pulumi:"name"`
	// The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
	PackageType *string `pulumi:"packageType"`
	// The homepage for this package.
	Url *string `pulumi:"url"`
	// The version of the package.
	Version *Version `pulumi:"version"`
}

// PackageInput is an input type that accepts PackageArgs and PackageOutput values.
// You can construct a concrete instance of `PackageInput` via:
//
//	PackageArgs{...}
type PackageInput interface {
	pulumi.Input

	ToPackageOutput() PackageOutput
	ToPackageOutputWithContext(context.Context) PackageOutput
}

// This represents a particular package that is distributed over various channels. e.g. glibc (aka libc6) is distributed by many, at various versions.
type PackageArgs struct {
	// The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.
	Architecture PackageArchitecturePtrInput `pulumi:"architecture"`
	// The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages.
	CpeUri pulumi.StringPtrInput `pulumi:"cpeUri"`
	// The description of this package.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Hash value, typically a file digest, that allows unique identification a specific package.
	Digest DigestArrayInput `pulumi:"digest"`
	// The various channels by which a package is distributed.
	Distribution DistributionArrayInput `pulumi:"distribution"`
	// Licenses that have been declared by the authors of the package.
	License LicensePtrInput `pulumi:"license"`
	// A freeform text denoting the maintainer of this package.
	Maintainer pulumi.StringPtrInput `pulumi:"maintainer"`
	// The name of the package.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
	PackageType pulumi.StringPtrInput `pulumi:"packageType"`
	// The homepage for this package.
	Url pulumi.StringPtrInput `pulumi:"url"`
	// The version of the package.
	Version VersionPtrInput `pulumi:"version"`
}

func (PackageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Package)(nil)).Elem()
}

func (i PackageArgs) ToPackageOutput() PackageOutput {
	return i.ToPackageOutputWithContext(context.Background())
}

func (i PackageArgs) ToPackageOutputWithContext(ctx context.Context) PackageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageOutput)
}

func (i PackageArgs) ToPackagePtrOutput() PackagePtrOutput {
	return i.ToPackagePtrOutputWithContext(context.Background())
}

func (i PackageArgs) ToPackagePtrOutputWithContext(ctx context.Context) PackagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageOutput).ToPackagePtrOutputWithContext(ctx)
}

// PackagePtrInput is an input type that accepts PackageArgs, PackagePtr and PackagePtrOutput values.
// You can construct a concrete instance of `PackagePtrInput` via:
//
//	        PackageArgs{...}
//
//	or:
//
//	        nil
type PackagePtrInput interface {
	pulumi.Input

	ToPackagePtrOutput() PackagePtrOutput
	ToPackagePtrOutputWithContext(context.Context) PackagePtrOutput
}

type packagePtrType PackageArgs

func PackagePtr(v *PackageArgs) PackagePtrInput {
	return (*packagePtrType)(v)
}

func (*packagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Package)(nil)).Elem()
}

func (i *packagePtrType) ToPackagePtrOutput() PackagePtrOutput {
	return i.ToPackagePtrOutputWithContext(context.Background())
}

func (i *packagePtrType) ToPackagePtrOutputWithContext(ctx context.Context) PackagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackagePtrOutput)
}

// This represents a particular package that is distributed over various channels. e.g. glibc (aka libc6) is distributed by many, at various versions.
type PackageOutput struct{ *pulumi.OutputState }

func (PackageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Package)(nil)).Elem()
}

func (o PackageOutput) ToPackageOutput() PackageOutput {
	return o
}

func (o PackageOutput) ToPackageOutputWithContext(ctx context.Context) PackageOutput {
	return o
}

func (o PackageOutput) ToPackagePtrOutput() PackagePtrOutput {
	return o.ToPackagePtrOutputWithContext(context.Background())
}

func (o PackageOutput) ToPackagePtrOutputWithContext(ctx context.Context) PackagePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Package) *Package {
		return &v
	}).(PackagePtrOutput)
}

// The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.
func (o PackageOutput) Architecture() PackageArchitecturePtrOutput {
	return o.ApplyT(func(v Package) *PackageArchitecture { return v.Architecture }).(PackageArchitecturePtrOutput)
}

// The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages.
func (o PackageOutput) CpeUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Package) *string { return v.CpeUri }).(pulumi.StringPtrOutput)
}

// The description of this package.
func (o PackageOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Package) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Hash value, typically a file digest, that allows unique identification a specific package.
func (o PackageOutput) Digest() DigestArrayOutput {
	return o.ApplyT(func(v Package) []Digest { return v.Digest }).(DigestArrayOutput)
}

// The various channels by which a package is distributed.
func (o PackageOutput) Distribution() DistributionArrayOutput {
	return o.ApplyT(func(v Package) []Distribution { return v.Distribution }).(DistributionArrayOutput)
}

// Licenses that have been declared by the authors of the package.
func (o PackageOutput) License() LicensePtrOutput {
	return o.ApplyT(func(v Package) *License { return v.License }).(LicensePtrOutput)
}

// A freeform text denoting the maintainer of this package.
func (o PackageOutput) Maintainer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Package) *string { return v.Maintainer }).(pulumi.StringPtrOutput)
}

// The name of the package.
func (o PackageOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Package) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
func (o PackageOutput) PackageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Package) *string { return v.PackageType }).(pulumi.StringPtrOutput)
}

// The homepage for this package.
func (o PackageOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Package) *string { return v.Url }).(pulumi.StringPtrOutput)
}

// The version of the package.
func (o PackageOutput) Version() VersionPtrOutput {
	return o.ApplyT(func(v Package) *Version { return v.Version }).(VersionPtrOutput)
}

type PackagePtrOutput struct{ *pulumi.OutputState }

func (PackagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Package)(nil)).Elem()
}

func (o PackagePtrOutput) ToPackagePtrOutput() PackagePtrOutput {
	return o
}

func (o PackagePtrOutput) ToPackagePtrOutputWithContext(ctx context.Context) PackagePtrOutput {
	return o
}

func (o PackagePtrOutput) Elem() PackageOutput {
	return o.ApplyT(func(v *Package) Package {
		if v != nil {
			return *v
		}
		var ret Package
		return ret
	}).(PackageOutput)
}

// The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.
func (o PackagePtrOutput) Architecture() PackageArchitecturePtrOutput {
	return o.ApplyT(func(v *Package) *PackageArchitecture {
		if v == nil {
			return nil
		}
		return v.Architecture
	}).(PackageArchitecturePtrOutput)
}

// The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages.
func (o PackagePtrOutput) CpeUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Package) *string {
		if v == nil {
			return nil
		}
		return v.CpeUri
	}).(pulumi.StringPtrOutput)
}

// The description of this package.
func (o PackagePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Package) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Hash value, typically a file digest, that allows unique identification a specific package.
func (o PackagePtrOutput) Digest() DigestArrayOutput {
	return o.ApplyT(func(v *Package) []Digest {
		if v == nil {
			return nil
		}
		return v.Digest
	}).(DigestArrayOutput)
}

// The various channels by which a package is distributed.
func (o PackagePtrOutput) Distribution() DistributionArrayOutput {
	return o.ApplyT(func(v *Package) []Distribution {
		if v == nil {
			return nil
		}
		return v.Distribution
	}).(DistributionArrayOutput)
}

// Licenses that have been declared by the authors of the package.
func (o PackagePtrOutput) License() LicensePtrOutput {
	return o.ApplyT(func(v *Package) *License {
		if v == nil {
			return nil
		}
		return v.License
	}).(LicensePtrOutput)
}

// A freeform text denoting the maintainer of this package.
func (o PackagePtrOutput) Maintainer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Package) *string {
		if v == nil {
			return nil
		}
		return v.Maintainer
	}).(pulumi.StringPtrOutput)
}

// The name of the package.
func (o PackagePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Package) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
func (o PackagePtrOutput) PackageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Package) *string {
		if v == nil {
			return nil
		}
		return v.PackageType
	}).(pulumi.StringPtrOutput)
}

// The homepage for this package.
func (o PackagePtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Package) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// The version of the package.
func (o PackagePtrOutput) Version() VersionPtrOutput {
	return o.ApplyT(func(v *Package) *Version {
		if v == nil {
			return nil
		}
		return v.Version
	}).(VersionPtrOutput)
}

// PackageInfoNote represents an SPDX Package Information section: https://spdx.github.io/spdx-spec/3-package-information/
type PackageInfoNote struct {
	// Indicates whether the file content of this package has been available for or subjected to analysis when creating the SPDX document
	Analyzed *bool `pulumi:"analyzed"`
	// A place for the SPDX data creator to record, at the package level, acknowledgements that may be needed to be communicated in some contexts
	Attribution *string `pulumi:"attribution"`
	// Provide an independently reproducible mechanism that permits unique identification of a specific package that correlates to the data in this SPDX file
	Checksum *string `pulumi:"checksum"`
	// Identify the copyright holders of the package, as well as any dates present
	Copyright *string `pulumi:"copyright"`
	// A more detailed description of the package
	DetailedDescription *string `pulumi:"detailedDescription"`
	// This section identifies the download Universal Resource Locator (URL), or a specific location within a version control system (VCS) for the package at the time that the SPDX file was created
	DownloadLocation *string `pulumi:"downloadLocation"`
	// ExternalRef
	ExternalRefs []ExternalRef `pulumi:"externalRefs"`
	// Contain the license the SPDX file creator has concluded as governing the This field is to contain a list of all licenses found in the package. The relationship between licenses (i.e., conjunctive, disjunctive) is not specified in this field – it is simply a listing of all licenses found
	FilesLicenseInfo []string `pulumi:"filesLicenseInfo"`
	// Provide a place for the SPDX file creator to record a web site that serves as the package's home page
	HomePage *string `pulumi:"homePage"`
	// List the licenses that have been declared by the authors of the package
	LicenseDeclared *License `pulumi:"licenseDeclared"`
	// If the package identified in the SPDX file originated from a different person or organization than identified as Package Supplier, this field identifies from where or whom the package originally came
	Originator *string `pulumi:"originator"`
	// The type of package: OS, MAVEN, GO, GO_STDLIB, etc.
	PackageType *string `pulumi:"packageType"`
	// A short description of the package
	SummaryDescription *string `pulumi:"summaryDescription"`
	// Identify the actual distribution source for the package/directory identified in the SPDX file
	Supplier *string `pulumi:"supplier"`
	// Identify the full name of the package as given by the Package Originator
	Title *string `pulumi:"title"`
	// This field provides an independently reproducible mechanism identifying specific contents of a package based on the actual files (except the SPDX file itself, if it is included in the package) that make up each package and that correlates to the data in this SPDX file
	VerificationCode *string `pulumi:"verificationCode"`
	// Identify the version of the package
	Version *string `pulumi:"version"`
}

// PackageInfoNoteInput is an input type that accepts PackageInfoNoteArgs and PackageInfoNoteOutput values.
// You can construct a concrete instance of `PackageInfoNoteInput` via:
//
//	PackageInfoNoteArgs{...}
type PackageInfoNoteInput interface {
	pulumi.Input

	ToPackageInfoNoteOutput() PackageInfoNoteOutput
	ToPackageInfoNoteOutputWithContext(context.Context) PackageInfoNoteOutput
}

// PackageInfoNote represents an SPDX Package Information section: https://spdx.github.io/spdx-spec/3-package-information/
type PackageInfoNoteArgs struct {
	// Indicates whether the file content of this package has been available for or subjected to analysis when creating the SPDX document
	Analyzed pulumi.BoolPtrInput `pulumi:"analyzed"`
	// A place for the SPDX data creator to record, at the package level, acknowledgements that may be needed to be communicated in some contexts
	Attribution pulumi.StringPtrInput `pulumi:"attribution"`
	// Provide an independently reproducible mechanism that permits unique identification of a specific package that correlates to the data in this SPDX file
	Checksum pulumi.StringPtrInput `pulumi:"checksum"`
	// Identify the copyright holders of the package, as well as any dates present
	Copyright pulumi.StringPtrInput `pulumi:"copyright"`
	// A more detailed description of the package
	DetailedDescription pulumi.StringPtrInput `pulumi:"detailedDescription"`
	// This section identifies the download Universal Resource Locator (URL), or a specific location within a version control system (VCS) for the package at the time that the SPDX file was created
	DownloadLocation pulumi.StringPtrInput `pulumi:"downloadLocation"`
	// ExternalRef
	ExternalRefs ExternalRefArrayInput `pulumi:"externalRefs"`
	// Contain the license the SPDX file creator has concluded as governing the This field is to contain a list of all licenses found in the package. The relationship between licenses (i.e., conjunctive, disjunctive) is not specified in this field – it is simply a listing of all licenses found
	FilesLicenseInfo pulumi.StringArrayInput `pulumi:"filesLicenseInfo"`
	// Provide a place for the SPDX file creator to record a web site that serves as the package's home page
	HomePage pulumi.StringPtrInput `pulumi:"homePage"`
	// List the licenses that have been declared by the authors of the package
	LicenseDeclared LicensePtrInput `pulumi:"licenseDeclared"`
	// If the package identified in the SPDX file originated from a different person or organization than identified as Package Supplier, this field identifies from where or whom the package originally came
	Originator pulumi.StringPtrInput `pulumi:"originator"`
	// The type of package: OS, MAVEN, GO, GO_STDLIB, etc.
	PackageType pulumi.StringPtrInput `pulumi:"packageType"`
	// A short description of the package
	SummaryDescription pulumi.StringPtrInput `pulumi:"summaryDescription"`
	// Identify the actual distribution source for the package/directory identified in the SPDX file
	Supplier pulumi.StringPtrInput `pulumi:"supplier"`
	// Identify the full name of the package as given by the Package Originator
	Title pulumi.StringPtrInput `pulumi:"title"`
	// This field provides an independently reproducible mechanism identifying specific contents of a package based on the actual files (except the SPDX file itself, if it is included in the package) that make up each package and that correlates to the data in this SPDX file
	VerificationCode pulumi.StringPtrInput `pulumi:"verificationCode"`
	// Identify the version of the package
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (PackageInfoNoteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PackageInfoNote)(nil)).Elem()
}

func (i PackageInfoNoteArgs) ToPackageInfoNoteOutput() PackageInfoNoteOutput {
	return i.ToPackageInfoNoteOutputWithContext(context.Background())
}

func (i PackageInfoNoteArgs) ToPackageInfoNoteOutputWithContext(ctx context.Context) PackageInfoNoteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageInfoNoteOutput)
}

func (i PackageInfoNoteArgs) ToPackageInfoNotePtrOutput() PackageInfoNotePtrOutput {
	return i.ToPackageInfoNotePtrOutputWithContext(context.Background())
}

func (i PackageInfoNoteArgs) ToPackageInfoNotePtrOutputWithContext(ctx context.Context) PackageInfoNotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageInfoNoteOutput).ToPackageInfoNotePtrOutputWithContext(ctx)
}

// PackageInfoNotePtrInput is an input type that accepts PackageInfoNoteArgs, PackageInfoNotePtr and PackageInfoNotePtrOutput values.
// You can construct a concrete instance of `PackageInfoNotePtrInput` via:
//
//	        PackageInfoNoteArgs{...}
//
//	or:
//
//	        nil
type PackageInfoNotePtrInput interface {
	pulumi.Input

	ToPackageInfoNotePtrOutput() PackageInfoNotePtrOutput
	ToPackageInfoNotePtrOutputWithContext(context.Context) PackageInfoNotePtrOutput
}

type packageInfoNotePtrType PackageInfoNoteArgs

func PackageInfoNotePtr(v *PackageInfoNoteArgs) PackageInfoNotePtrInput {
	return (*packageInfoNotePtrType)(v)
}

func (*packageInfoNotePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PackageInfoNote)(nil)).Elem()
}

func (i *packageInfoNotePtrType) ToPackageInfoNotePtrOutput() PackageInfoNotePtrOutput {
	return i.ToPackageInfoNotePtrOutputWithContext(context.Background())
}

func (i *packageInfoNotePtrType) ToPackageInfoNotePtrOutputWithContext(ctx context.Context) PackageInfoNotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageInfoNotePtrOutput)
}

// PackageInfoNote represents an SPDX Package Information section: https://spdx.github.io/spdx-spec/3-package-information/
type PackageInfoNoteOutput struct{ *pulumi.OutputState }

func (PackageInfoNoteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PackageInfoNote)(nil)).Elem()
}

func (o PackageInfoNoteOutput) ToPackageInfoNoteOutput() PackageInfoNoteOutput {
	return o
}

func (o PackageInfoNoteOutput) ToPackageInfoNoteOutputWithContext(ctx context.Context) PackageInfoNoteOutput {
	return o
}

func (o PackageInfoNoteOutput) ToPackageInfoNotePtrOutput() PackageInfoNotePtrOutput {
	return o.ToPackageInfoNotePtrOutputWithContext(context.Background())
}

func (o PackageInfoNoteOutput) ToPackageInfoNotePtrOutputWithContext(ctx context.Context) PackageInfoNotePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PackageInfoNote) *PackageInfoNote {
		return &v
	}).(PackageInfoNotePtrOutput)
}

// Indicates whether the file content of this package has been available for or subjected to analysis when creating the SPDX document
func (o PackageInfoNoteOutput) Analyzed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PackageInfoNote) *bool { return v.Analyzed }).(pulumi.BoolPtrOutput)
}

// A place for the SPDX data creator to record, at the package level, acknowledgements that may be needed to be communicated in some contexts
func (o PackageInfoNoteOutput) Attribution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PackageInfoNote) *string { return v.Attribution }).(pulumi.StringPtrOutput)
}

// Provide an independently reproducible mechanism that permits unique identification of a specific package that correlates to the data in this SPDX file
func (o PackageInfoNoteOutput) Checksum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PackageInfoNote) *string { return v.Checksum }).(pulumi.StringPtrOutput)
}

// Identify the copyright holders of the package, as well as any dates present
func (o PackageInfoNoteOutput) Copyright() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PackageInfoNote) *string { return v.Copyright }).(pulumi.StringPtrOutput)
}

// A more detailed description of the package
func (o PackageInfoNoteOutput) DetailedDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PackageInfoNote) *string { return v.DetailedDescription }).(pulumi.StringPtrOutput)
}

// This section identifies the download Universal Resource Locator (URL), or a specific location within a version control system (VCS) for the package at the time that the SPDX file was created
func (o PackageInfoNoteOutput) DownloadLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PackageInfoNote) *string { return v.DownloadLocation }).(pulumi.StringPtrOutput)
}

// ExternalRef
func (o PackageInfoNoteOutput) ExternalRefs() ExternalRefArrayOutput {
	return o.ApplyT(func(v PackageInfoNote) []ExternalRef { return v.ExternalRefs }).(ExternalRefArrayOutput)
}

// Contain the license the SPDX file creator has concluded as governing the This field is to contain a list of all licenses found in the package. The relationship between licenses (i.e., conjunctive, disjunctive) is not specified in this field – it is simply a listing of all licenses found
func (o PackageInfoNoteOutput) FilesLicenseInfo() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PackageInfoNote) []string { return v.FilesLicenseInfo }).(pulumi.StringArrayOutput)
}

// Provide a place for the SPDX file creator to record a web site that serves as the package's home page
func (o PackageInfoNoteOutput) HomePage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PackageInfoNote) *string { return v.HomePage }).(pulumi.StringPtrOutput)
}

// List the licenses that have been declared by the authors of the package
func (o PackageInfoNoteOutput) LicenseDeclared() LicensePtrOutput {
	return o.ApplyT(func(v PackageInfoNote) *License { return v.LicenseDeclared }).(LicensePtrOutput)
}

// If the package identified in the SPDX file originated from a different person or organization than identified as Package Supplier, this field identifies from where or whom the package originally came
func (o PackageInfoNoteOutput) Originator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PackageInfoNote) *string { return v.Originator }).(pulumi.StringPtrOutput)
}

// The type of package: OS, MAVEN, GO, GO_STDLIB, etc.
func (o PackageInfoNoteOutput) PackageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PackageInfoNote) *string { return v.PackageType }).(pulumi.StringPtrOutput)
}

// A short description of the package
func (o PackageInfoNoteOutput) SummaryDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PackageInfoNote) *string { return v.SummaryDescription }).(pulumi.StringPtrOutput)
}

// Identify the actual distribution source for the package/directory identified in the SPDX file
func (o PackageInfoNoteOutput) Supplier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PackageInfoNote) *string { return v.Supplier }).(pulumi.StringPtrOutput)
}

// Identify the full name of the package as given by the Package Originator
func (o PackageInfoNoteOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PackageInfoNote) *string { return v.Title }).(pulumi.StringPtrOutput)
}

// This field provides an independently reproducible mechanism identifying specific contents of a package based on the actual files (except the SPDX file itself, if it is included in the package) that make up each package and that correlates to the data in this SPDX file
func (o PackageInfoNoteOutput) VerificationCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PackageInfoNote) *string { return v.VerificationCode }).(pulumi.StringPtrOutput)
}

// Identify the version of the package
func (o PackageInfoNoteOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PackageInfoNote) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type PackageInfoNotePtrOutput struct{ *pulumi.OutputState }

func (PackageInfoNotePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PackageInfoNote)(nil)).Elem()
}

func (o PackageInfoNotePtrOutput) ToPackageInfoNotePtrOutput() PackageInfoNotePtrOutput {
	return o
}

func (o PackageInfoNotePtrOutput) ToPackageInfoNotePtrOutputWithContext(ctx context.Context) PackageInfoNotePtrOutput {
	return o
}

func (o PackageInfoNotePtrOutput) Elem() PackageInfoNoteOutput {
	return o.ApplyT(func(v *PackageInfoNote) PackageInfoNote {
		if v != nil {
			return *v
		}
		var ret PackageInfoNote
		return ret
	}).(PackageInfoNoteOutput)
}

// Indicates whether the file content of this package has been available for or subjected to analysis when creating the SPDX document
func (o PackageInfoNotePtrOutput) Analyzed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PackageInfoNote) *bool {
		if v == nil {
			return nil
		}
		return v.Analyzed
	}).(pulumi.BoolPtrOutput)
}

// A place for the SPDX data creator to record, at the package level, acknowledgements that may be needed to be communicated in some contexts
func (o PackageInfoNotePtrOutput) Attribution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PackageInfoNote) *string {
		if v == nil {
			return nil
		}
		return v.Attribution
	}).(pulumi.StringPtrOutput)
}

// Provide an independently reproducible mechanism that permits unique identification of a specific package that correlates to the data in this SPDX file
func (o PackageInfoNotePtrOutput) Checksum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PackageInfoNote) *string {
		if v == nil {
			return nil
		}
		return v.Checksum
	}).(pulumi.StringPtrOutput)
}

// Identify the copyright holders of the package, as well as any dates present
func (o PackageInfoNotePtrOutput) Copyright() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PackageInfoNote) *string {
		if v == nil {
			return nil
		}
		return v.Copyright
	}).(pulumi.StringPtrOutput)
}

// A more detailed description of the package
func (o PackageInfoNotePtrOutput) DetailedDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PackageInfoNote) *string {
		if v == nil {
			return nil
		}
		return v.DetailedDescription
	}).(pulumi.StringPtrOutput)
}

// This section identifies the download Universal Resource Locator (URL), or a specific location within a version control system (VCS) for the package at the time that the SPDX file was created
func (o PackageInfoNotePtrOutput) DownloadLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PackageInfoNote) *string {
		if v == nil {
			return nil
		}
		return v.DownloadLocation
	}).(pulumi.StringPtrOutput)
}

// ExternalRef
func (o PackageInfoNotePtrOutput) ExternalRefs() ExternalRefArrayOutput {
	return o.ApplyT(func(v *PackageInfoNote) []ExternalRef {
		if v == nil {
			return nil
		}
		return v.ExternalRefs
	}).(ExternalRefArrayOutput)
}

// Contain the license the SPDX file creator has concluded as governing the This field is to contain a list of all licenses found in the package. The relationship between licenses (i.e., conjunctive, disjunctive) is not specified in this field – it is simply a listing of all licenses found
func (o PackageInfoNotePtrOutput) FilesLicenseInfo() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PackageInfoNote) []string {
		if v == nil {
			return nil
		}
		return v.FilesLicenseInfo
	}).(pulumi.StringArrayOutput)
}

// Provide a place for the SPDX file creator to record a web site that serves as the package's home page
func (o PackageInfoNotePtrOutput) HomePage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PackageInfoNote) *string {
		if v == nil {
			return nil
		}
		return v.HomePage
	}).(pulumi.StringPtrOutput)
}

// List the licenses that have been declared by the authors of the package
func (o PackageInfoNotePtrOutput) LicenseDeclared() LicensePtrOutput {
	return o.ApplyT(func(v *PackageInfoNote) *License {
		if v == nil {
			return nil
		}
		return v.LicenseDeclared
	}).(LicensePtrOutput)
}

// If the package identified in the SPDX file originated from a different person or organization than identified as Package Supplier, this field identifies from where or whom the package originally came
func (o PackageInfoNotePtrOutput) Originator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PackageInfoNote) *string {
		if v == nil {
			return nil
		}
		return v.Originator
	}).(pulumi.StringPtrOutput)
}

// The type of package: OS, MAVEN, GO, GO_STDLIB, etc.
func (o PackageInfoNotePtrOutput) PackageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PackageInfoNote) *string {
		if v == nil {
			return nil
		}
		return v.PackageType
	}).(pulumi.StringPtrOutput)
}

// A short description of the package
func (o PackageInfoNotePtrOutput) SummaryDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PackageInfoNote) *string {
		if v == nil {
			return nil
		}
		return v.SummaryDescription
	}).(pulumi.StringPtrOutput)
}

// Identify the actual distribution source for the package/directory identified in the SPDX file
func (o PackageInfoNotePtrOutput) Supplier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PackageInfoNote) *string {
		if v == nil {
			return nil
		}
		return v.Supplier
	}).(pulumi.StringPtrOutput)
}

// Identify the full name of the package as given by the Package Originator
func (o PackageInfoNotePtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PackageInfoNote) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// This field provides an independently reproducible mechanism identifying specific contents of a package based on the actual files (except the SPDX file itself, if it is included in the package) that make up each package and that correlates to the data in this SPDX file
func (o PackageInfoNotePtrOutput) VerificationCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PackageInfoNote) *string {
		if v == nil {
			return nil
		}
		return v.VerificationCode
	}).(pulumi.StringPtrOutput)
}

// Identify the version of the package
func (o PackageInfoNotePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PackageInfoNote) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// PackageInfoNote represents an SPDX Package Information section: https://spdx.github.io/spdx-spec/3-package-information/
type PackageInfoNoteResponse struct {
	// Indicates whether the file content of this package has been available for or subjected to analysis when creating the SPDX document
	Analyzed bool `pulumi:"analyzed"`
	// A place for the SPDX data creator to record, at the package level, acknowledgements that may be needed to be communicated in some contexts
	Attribution string `pulumi:"attribution"`
	// Provide an independently reproducible mechanism that permits unique identification of a specific package that correlates to the data in this SPDX file
	Checksum string `pulumi:"checksum"`
	// Identify the copyright holders of the package, as well as any dates present
	Copyright string `pulumi:"copyright"`
	// A more detailed description of the package
	DetailedDescription string `pulumi:"detailedDescription"`
	// This section identifies the download Universal Resource Locator (URL), or a specific location within a version control system (VCS) for the package at the time that the SPDX file was created
	DownloadLocation string `pulumi:"downloadLocation"`
	// ExternalRef
	ExternalRefs []ExternalRefResponse `pulumi:"externalRefs"`
	// Contain the license the SPDX file creator has concluded as governing the This field is to contain a list of all licenses found in the package. The relationship between licenses (i.e., conjunctive, disjunctive) is not specified in this field – it is simply a listing of all licenses found
	FilesLicenseInfo []string `pulumi:"filesLicenseInfo"`
	// Provide a place for the SPDX file creator to record a web site that serves as the package's home page
	HomePage string `pulumi:"homePage"`
	// List the licenses that have been declared by the authors of the package
	LicenseDeclared LicenseResponse `pulumi:"licenseDeclared"`
	// If the package identified in the SPDX file originated from a different person or organization than identified as Package Supplier, this field identifies from where or whom the package originally came
	Originator string `pulumi:"originator"`
	// The type of package: OS, MAVEN, GO, GO_STDLIB, etc.
	PackageType string `pulumi:"packageType"`
	// A short description of the package
	SummaryDescription string `pulumi:"summaryDescription"`
	// Identify the actual distribution source for the package/directory identified in the SPDX file
	Supplier string `pulumi:"supplier"`
	// Identify the full name of the package as given by the Package Originator
	Title string `pulumi:"title"`
	// This field provides an independently reproducible mechanism identifying specific contents of a package based on the actual files (except the SPDX file itself, if it is included in the package) that make up each package and that correlates to the data in this SPDX file
	VerificationCode string `pulumi:"verificationCode"`
	// Identify the version of the package
	Version string `pulumi:"version"`
}

// PackageInfoNote represents an SPDX Package Information section: https://spdx.github.io/spdx-spec/3-package-information/
type PackageInfoNoteResponseOutput struct{ *pulumi.OutputState }

func (PackageInfoNoteResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PackageInfoNoteResponse)(nil)).Elem()
}

func (o PackageInfoNoteResponseOutput) ToPackageInfoNoteResponseOutput() PackageInfoNoteResponseOutput {
	return o
}

func (o PackageInfoNoteResponseOutput) ToPackageInfoNoteResponseOutputWithContext(ctx context.Context) PackageInfoNoteResponseOutput {
	return o
}

// Indicates whether the file content of this package has been available for or subjected to analysis when creating the SPDX document
func (o PackageInfoNoteResponseOutput) Analyzed() pulumi.BoolOutput {
	return o.ApplyT(func(v PackageInfoNoteResponse) bool { return v.Analyzed }).(pulumi.BoolOutput)
}

// A place for the SPDX data creator to record, at the package level, acknowledgements that may be needed to be communicated in some contexts
func (o PackageInfoNoteResponseOutput) Attribution() pulumi.StringOutput {
	return o.ApplyT(func(v PackageInfoNoteResponse) string { return v.Attribution }).(pulumi.StringOutput)
}

// Provide an independently reproducible mechanism that permits unique identification of a specific package that correlates to the data in this SPDX file
func (o PackageInfoNoteResponseOutput) Checksum() pulumi.StringOutput {
	return o.ApplyT(func(v PackageInfoNoteResponse) string { return v.Checksum }).(pulumi.StringOutput)
}

// Identify the copyright holders of the package, as well as any dates present
func (o PackageInfoNoteResponseOutput) Copyright() pulumi.StringOutput {
	return o.ApplyT(func(v PackageInfoNoteResponse) string { return v.Copyright }).(pulumi.StringOutput)
}

// A more detailed description of the package
func (o PackageInfoNoteResponseOutput) DetailedDescription() pulumi.StringOutput {
	return o.ApplyT(func(v PackageInfoNoteResponse) string { return v.DetailedDescription }).(pulumi.StringOutput)
}

// This section identifies the download Universal Resource Locator (URL), or a specific location within a version control system (VCS) for the package at the time that the SPDX file was created
func (o PackageInfoNoteResponseOutput) DownloadLocation() pulumi.StringOutput {
	return o.ApplyT(func(v PackageInfoNoteResponse) string { return v.DownloadLocation }).(pulumi.StringOutput)
}

// ExternalRef
func (o PackageInfoNoteResponseOutput) ExternalRefs() ExternalRefResponseArrayOutput {
	return o.ApplyT(func(v PackageInfoNoteResponse) []ExternalRefResponse { return v.ExternalRefs }).(ExternalRefResponseArrayOutput)
}

// Contain the license the SPDX file creator has concluded as governing the This field is to contain a list of all licenses found in the package. The relationship between licenses (i.e., conjunctive, disjunctive) is not specified in this field – it is simply a listing of all licenses found
func (o PackageInfoNoteResponseOutput) FilesLicenseInfo() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PackageInfoNoteResponse) []string { return v.FilesLicenseInfo }).(pulumi.StringArrayOutput)
}

// Provide a place for the SPDX file creator to record a web site that serves as the package's home page
func (o PackageInfoNoteResponseOutput) HomePage() pulumi.StringOutput {
	return o.ApplyT(func(v PackageInfoNoteResponse) string { return v.HomePage }).(pulumi.StringOutput)
}

// List the licenses that have been declared by the authors of the package
func (o PackageInfoNoteResponseOutput) LicenseDeclared() LicenseResponseOutput {
	return o.ApplyT(func(v PackageInfoNoteResponse) LicenseResponse { return v.LicenseDeclared }).(LicenseResponseOutput)
}

// If the package identified in the SPDX file originated from a different person or organization than identified as Package Supplier, this field identifies from where or whom the package originally came
func (o PackageInfoNoteResponseOutput) Originator() pulumi.StringOutput {
	return o.ApplyT(func(v PackageInfoNoteResponse) string { return v.Originator }).(pulumi.StringOutput)
}

// The type of package: OS, MAVEN, GO, GO_STDLIB, etc.
func (o PackageInfoNoteResponseOutput) PackageType() pulumi.StringOutput {
	return o.ApplyT(func(v PackageInfoNoteResponse) string { return v.PackageType }).(pulumi.StringOutput)
}

// A short description of the package
func (o PackageInfoNoteResponseOutput) SummaryDescription() pulumi.StringOutput {
	return o.ApplyT(func(v PackageInfoNoteResponse) string { return v.SummaryDescription }).(pulumi.StringOutput)
}

// Identify the actual distribution source for the package/directory identified in the SPDX file
func (o PackageInfoNoteResponseOutput) Supplier() pulumi.StringOutput {
	return o.ApplyT(func(v PackageInfoNoteResponse) string { return v.Supplier }).(pulumi.StringOutput)
}

// Identify the full name of the package as given by the Package Originator
func (o PackageInfoNoteResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v PackageInfoNoteResponse) string { return v.Title }).(pulumi.StringOutput)
}

// This field provides an independently reproducible mechanism identifying specific contents of a package based on the actual files (except the SPDX file itself, if it is included in the package) that make up each package and that correlates to the data in this SPDX file
func (o PackageInfoNoteResponseOutput) VerificationCode() pulumi.StringOutput {
	return o.ApplyT(func(v PackageInfoNoteResponse) string { return v.VerificationCode }).(pulumi.StringOutput)
}

// Identify the version of the package
func (o PackageInfoNoteResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v PackageInfoNoteResponse) string { return v.Version }).(pulumi.StringOutput)
}

// PackageInfoOccurrence represents an SPDX Package Information section: https://spdx.github.io/spdx-spec/3-package-information/
type PackageInfoOccurrence struct {
	// A place for the SPDX file creator to record any general comments about the package being described
	Comment *string `pulumi:"comment"`
	// Provide the actual file name of the package, or path of the directory being treated as a package
	Filename *string `pulumi:"filename"`
	// Uniquely identify any element in an SPDX document which may be referenced by other elements
	Id *string `pulumi:"id"`
	// package or alternative values, if the governing license cannot be determined
	LicenseConcluded *License `pulumi:"licenseConcluded"`
	// Provide a place for the SPDX file creator to record any relevant background information or additional comments about the origin of the package
	SourceInfo *string `pulumi:"sourceInfo"`
}

// PackageInfoOccurrenceInput is an input type that accepts PackageInfoOccurrenceArgs and PackageInfoOccurrenceOutput values.
// You can construct a concrete instance of `PackageInfoOccurrenceInput` via:
//
//	PackageInfoOccurrenceArgs{...}
type PackageInfoOccurrenceInput interface {
	pulumi.Input

	ToPackageInfoOccurrenceOutput() PackageInfoOccurrenceOutput
	ToPackageInfoOccurrenceOutputWithContext(context.Context) PackageInfoOccurrenceOutput
}

// PackageInfoOccurrence represents an SPDX Package Information section: https://spdx.github.io/spdx-spec/3-package-information/
type PackageInfoOccurrenceArgs struct {
	// A place for the SPDX file creator to record any general comments about the package being described
	Comment pulumi.StringPtrInput `pulumi:"comment"`
	// Provide the actual file name of the package, or path of the directory being treated as a package
	Filename pulumi.StringPtrInput `pulumi:"filename"`
	// Uniquely identify any element in an SPDX document which may be referenced by other elements
	Id pulumi.StringPtrInput `pulumi:"id"`
	// package or alternative values, if the governing license cannot be determined
	LicenseConcluded LicensePtrInput `pulumi:"licenseConcluded"`
	// Provide a place for the SPDX file creator to record any relevant background information or additional comments about the origin of the package
	SourceInfo pulumi.StringPtrInput `pulumi:"sourceInfo"`
}

func (PackageInfoOccurrenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PackageInfoOccurrence)(nil)).Elem()
}

func (i PackageInfoOccurrenceArgs) ToPackageInfoOccurrenceOutput() PackageInfoOccurrenceOutput {
	return i.ToPackageInfoOccurrenceOutputWithContext(context.Background())
}

func (i PackageInfoOccurrenceArgs) ToPackageInfoOccurrenceOutputWithContext(ctx context.Context) PackageInfoOccurrenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageInfoOccurrenceOutput)
}

func (i PackageInfoOccurrenceArgs) ToPackageInfoOccurrencePtrOutput() PackageInfoOccurrencePtrOutput {
	return i.ToPackageInfoOccurrencePtrOutputWithContext(context.Background())
}

func (i PackageInfoOccurrenceArgs) ToPackageInfoOccurrencePtrOutputWithContext(ctx context.Context) PackageInfoOccurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageInfoOccurrenceOutput).ToPackageInfoOccurrencePtrOutputWithContext(ctx)
}

// PackageInfoOccurrencePtrInput is an input type that accepts PackageInfoOccurrenceArgs, PackageInfoOccurrencePtr and PackageInfoOccurrencePtrOutput values.
// You can construct a concrete instance of `PackageInfoOccurrencePtrInput` via:
//
//	        PackageInfoOccurrenceArgs{...}
//
//	or:
//
//	        nil
type PackageInfoOccurrencePtrInput interface {
	pulumi.Input

	ToPackageInfoOccurrencePtrOutput() PackageInfoOccurrencePtrOutput
	ToPackageInfoOccurrencePtrOutputWithContext(context.Context) PackageInfoOccurrencePtrOutput
}

type packageInfoOccurrencePtrType PackageInfoOccurrenceArgs

func PackageInfoOccurrencePtr(v *PackageInfoOccurrenceArgs) PackageInfoOccurrencePtrInput {
	return (*packageInfoOccurrencePtrType)(v)
}

func (*packageInfoOccurrencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PackageInfoOccurrence)(nil)).Elem()
}

func (i *packageInfoOccurrencePtrType) ToPackageInfoOccurrencePtrOutput() PackageInfoOccurrencePtrOutput {
	return i.ToPackageInfoOccurrencePtrOutputWithContext(context.Background())
}

func (i *packageInfoOccurrencePtrType) ToPackageInfoOccurrencePtrOutputWithContext(ctx context.Context) PackageInfoOccurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageInfoOccurrencePtrOutput)
}

// PackageInfoOccurrence represents an SPDX Package Information section: https://spdx.github.io/spdx-spec/3-package-information/
type PackageInfoOccurrenceOutput struct{ *pulumi.OutputState }

func (PackageInfoOccurrenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PackageInfoOccurrence)(nil)).Elem()
}

func (o PackageInfoOccurrenceOutput) ToPackageInfoOccurrenceOutput() PackageInfoOccurrenceOutput {
	return o
}

func (o PackageInfoOccurrenceOutput) ToPackageInfoOccurrenceOutputWithContext(ctx context.Context) PackageInfoOccurrenceOutput {
	return o
}

func (o PackageInfoOccurrenceOutput) ToPackageInfoOccurrencePtrOutput() PackageInfoOccurrencePtrOutput {
	return o.ToPackageInfoOccurrencePtrOutputWithContext(context.Background())
}

func (o PackageInfoOccurrenceOutput) ToPackageInfoOccurrencePtrOutputWithContext(ctx context.Context) PackageInfoOccurrencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PackageInfoOccurrence) *PackageInfoOccurrence {
		return &v
	}).(PackageInfoOccurrencePtrOutput)
}

// A place for the SPDX file creator to record any general comments about the package being described
func (o PackageInfoOccurrenceOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PackageInfoOccurrence) *string { return v.Comment }).(pulumi.StringPtrOutput)
}

// Provide the actual file name of the package, or path of the directory being treated as a package
func (o PackageInfoOccurrenceOutput) Filename() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PackageInfoOccurrence) *string { return v.Filename }).(pulumi.StringPtrOutput)
}

// Uniquely identify any element in an SPDX document which may be referenced by other elements
func (o PackageInfoOccurrenceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PackageInfoOccurrence) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// package or alternative values, if the governing license cannot be determined
func (o PackageInfoOccurrenceOutput) LicenseConcluded() LicensePtrOutput {
	return o.ApplyT(func(v PackageInfoOccurrence) *License { return v.LicenseConcluded }).(LicensePtrOutput)
}

// Provide a place for the SPDX file creator to record any relevant background information or additional comments about the origin of the package
func (o PackageInfoOccurrenceOutput) SourceInfo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PackageInfoOccurrence) *string { return v.SourceInfo }).(pulumi.StringPtrOutput)
}

type PackageInfoOccurrencePtrOutput struct{ *pulumi.OutputState }

func (PackageInfoOccurrencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PackageInfoOccurrence)(nil)).Elem()
}

func (o PackageInfoOccurrencePtrOutput) ToPackageInfoOccurrencePtrOutput() PackageInfoOccurrencePtrOutput {
	return o
}

func (o PackageInfoOccurrencePtrOutput) ToPackageInfoOccurrencePtrOutputWithContext(ctx context.Context) PackageInfoOccurrencePtrOutput {
	return o
}

func (o PackageInfoOccurrencePtrOutput) Elem() PackageInfoOccurrenceOutput {
	return o.ApplyT(func(v *PackageInfoOccurrence) PackageInfoOccurrence {
		if v != nil {
			return *v
		}
		var ret PackageInfoOccurrence
		return ret
	}).(PackageInfoOccurrenceOutput)
}

// A place for the SPDX file creator to record any general comments about the package being described
func (o PackageInfoOccurrencePtrOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PackageInfoOccurrence) *string {
		if v == nil {
			return nil
		}
		return v.Comment
	}).(pulumi.StringPtrOutput)
}

// Provide the actual file name of the package, or path of the directory being treated as a package
func (o PackageInfoOccurrencePtrOutput) Filename() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PackageInfoOccurrence) *string {
		if v == nil {
			return nil
		}
		return v.Filename
	}).(pulumi.StringPtrOutput)
}

// Uniquely identify any element in an SPDX document which may be referenced by other elements
func (o PackageInfoOccurrencePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PackageInfoOccurrence) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// package or alternative values, if the governing license cannot be determined
func (o PackageInfoOccurrencePtrOutput) LicenseConcluded() LicensePtrOutput {
	return o.ApplyT(func(v *PackageInfoOccurrence) *License {
		if v == nil {
			return nil
		}
		return v.LicenseConcluded
	}).(LicensePtrOutput)
}

// Provide a place for the SPDX file creator to record any relevant background information or additional comments about the origin of the package
func (o PackageInfoOccurrencePtrOutput) SourceInfo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PackageInfoOccurrence) *string {
		if v == nil {
			return nil
		}
		return v.SourceInfo
	}).(pulumi.StringPtrOutput)
}

// PackageInfoOccurrence represents an SPDX Package Information section: https://spdx.github.io/spdx-spec/3-package-information/
type PackageInfoOccurrenceResponse struct {
	// A place for the SPDX file creator to record any general comments about the package being described
	Comment string `pulumi:"comment"`
	// Provide the actual file name of the package, or path of the directory being treated as a package
	Filename string `pulumi:"filename"`
	// Provide a place for the SPDX file creator to record a web site that serves as the package's home page
	HomePage string `pulumi:"homePage"`
	// package or alternative values, if the governing license cannot be determined
	LicenseConcluded LicenseResponse `pulumi:"licenseConcluded"`
	// The type of package: OS, MAVEN, GO, GO_STDLIB, etc.
	PackageType string `pulumi:"packageType"`
	// Provide a place for the SPDX file creator to record any relevant background information or additional comments about the origin of the package
	SourceInfo string `pulumi:"sourceInfo"`
	// A short description of the package
	SummaryDescription string `pulumi:"summaryDescription"`
	// Identify the full name of the package as given by the Package Originator
	Title string `pulumi:"title"`
	// Identify the version of the package
	Version string `pulumi:"version"`
}

// PackageInfoOccurrence represents an SPDX Package Information section: https://spdx.github.io/spdx-spec/3-package-information/
type PackageInfoOccurrenceResponseOutput struct{ *pulumi.OutputState }

func (PackageInfoOccurrenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PackageInfoOccurrenceResponse)(nil)).Elem()
}

func (o PackageInfoOccurrenceResponseOutput) ToPackageInfoOccurrenceResponseOutput() PackageInfoOccurrenceResponseOutput {
	return o
}

func (o PackageInfoOccurrenceResponseOutput) ToPackageInfoOccurrenceResponseOutputWithContext(ctx context.Context) PackageInfoOccurrenceResponseOutput {
	return o
}

// A place for the SPDX file creator to record any general comments about the package being described
func (o PackageInfoOccurrenceResponseOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v PackageInfoOccurrenceResponse) string { return v.Comment }).(pulumi.StringOutput)
}

// Provide the actual file name of the package, or path of the directory being treated as a package
func (o PackageInfoOccurrenceResponseOutput) Filename() pulumi.StringOutput {
	return o.ApplyT(func(v PackageInfoOccurrenceResponse) string { return v.Filename }).(pulumi.StringOutput)
}

// Provide a place for the SPDX file creator to record a web site that serves as the package's home page
func (o PackageInfoOccurrenceResponseOutput) HomePage() pulumi.StringOutput {
	return o.ApplyT(func(v PackageInfoOccurrenceResponse) string { return v.HomePage }).(pulumi.StringOutput)
}

// package or alternative values, if the governing license cannot be determined
func (o PackageInfoOccurrenceResponseOutput) LicenseConcluded() LicenseResponseOutput {
	return o.ApplyT(func(v PackageInfoOccurrenceResponse) LicenseResponse { return v.LicenseConcluded }).(LicenseResponseOutput)
}

// The type of package: OS, MAVEN, GO, GO_STDLIB, etc.
func (o PackageInfoOccurrenceResponseOutput) PackageType() pulumi.StringOutput {
	return o.ApplyT(func(v PackageInfoOccurrenceResponse) string { return v.PackageType }).(pulumi.StringOutput)
}

// Provide a place for the SPDX file creator to record any relevant background information or additional comments about the origin of the package
func (o PackageInfoOccurrenceResponseOutput) SourceInfo() pulumi.StringOutput {
	return o.ApplyT(func(v PackageInfoOccurrenceResponse) string { return v.SourceInfo }).(pulumi.StringOutput)
}

// A short description of the package
func (o PackageInfoOccurrenceResponseOutput) SummaryDescription() pulumi.StringOutput {
	return o.ApplyT(func(v PackageInfoOccurrenceResponse) string { return v.SummaryDescription }).(pulumi.StringOutput)
}

// Identify the full name of the package as given by the Package Originator
func (o PackageInfoOccurrenceResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v PackageInfoOccurrenceResponse) string { return v.Title }).(pulumi.StringOutput)
}

// Identify the version of the package
func (o PackageInfoOccurrenceResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v PackageInfoOccurrenceResponse) string { return v.Version }).(pulumi.StringOutput)
}

// This message wraps a location affected by a vulnerability and its associated fix (if one is available).
type PackageIssue struct {
	// The location of the vulnerability.
	AffectedLocation *VulnerabilityLocation `pulumi:"affectedLocation"`
	// The location of the available fix for vulnerability.
	FixedLocation *VulnerabilityLocation `pulumi:"fixedLocation"`
	// The type of package (e.g. OS, MAVEN, GO).
	PackageType  *string `pulumi:"packageType"`
	SeverityName *string `pulumi:"severityName"`
}

// PackageIssueInput is an input type that accepts PackageIssueArgs and PackageIssueOutput values.
// You can construct a concrete instance of `PackageIssueInput` via:
//
//	PackageIssueArgs{...}
type PackageIssueInput interface {
	pulumi.Input

	ToPackageIssueOutput() PackageIssueOutput
	ToPackageIssueOutputWithContext(context.Context) PackageIssueOutput
}

// This message wraps a location affected by a vulnerability and its associated fix (if one is available).
type PackageIssueArgs struct {
	// The location of the vulnerability.
	AffectedLocation VulnerabilityLocationPtrInput `pulumi:"affectedLocation"`
	// The location of the available fix for vulnerability.
	FixedLocation VulnerabilityLocationPtrInput `pulumi:"fixedLocation"`
	// The type of package (e.g. OS, MAVEN, GO).
	PackageType  pulumi.StringPtrInput `pulumi:"packageType"`
	SeverityName pulumi.StringPtrInput `pulumi:"severityName"`
}

func (PackageIssueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PackageIssue)(nil)).Elem()
}

func (i PackageIssueArgs) ToPackageIssueOutput() PackageIssueOutput {
	return i.ToPackageIssueOutputWithContext(context.Background())
}

func (i PackageIssueArgs) ToPackageIssueOutputWithContext(ctx context.Context) PackageIssueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageIssueOutput)
}

// PackageIssueArrayInput is an input type that accepts PackageIssueArray and PackageIssueArrayOutput values.
// You can construct a concrete instance of `PackageIssueArrayInput` via:
//
//	PackageIssueArray{ PackageIssueArgs{...} }
type PackageIssueArrayInput interface {
	pulumi.Input

	ToPackageIssueArrayOutput() PackageIssueArrayOutput
	ToPackageIssueArrayOutputWithContext(context.Context) PackageIssueArrayOutput
}

type PackageIssueArray []PackageIssueInput

func (PackageIssueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PackageIssue)(nil)).Elem()
}

func (i PackageIssueArray) ToPackageIssueArrayOutput() PackageIssueArrayOutput {
	return i.ToPackageIssueArrayOutputWithContext(context.Background())
}

func (i PackageIssueArray) ToPackageIssueArrayOutputWithContext(ctx context.Context) PackageIssueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageIssueArrayOutput)
}

// This message wraps a location affected by a vulnerability and its associated fix (if one is available).
type PackageIssueOutput struct{ *pulumi.OutputState }

func (PackageIssueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PackageIssue)(nil)).Elem()
}

func (o PackageIssueOutput) ToPackageIssueOutput() PackageIssueOutput {
	return o
}

func (o PackageIssueOutput) ToPackageIssueOutputWithContext(ctx context.Context) PackageIssueOutput {
	return o
}

// The location of the vulnerability.
func (o PackageIssueOutput) AffectedLocation() VulnerabilityLocationPtrOutput {
	return o.ApplyT(func(v PackageIssue) *VulnerabilityLocation { return v.AffectedLocation }).(VulnerabilityLocationPtrOutput)
}

// The location of the available fix for vulnerability.
func (o PackageIssueOutput) FixedLocation() VulnerabilityLocationPtrOutput {
	return o.ApplyT(func(v PackageIssue) *VulnerabilityLocation { return v.FixedLocation }).(VulnerabilityLocationPtrOutput)
}

// The type of package (e.g. OS, MAVEN, GO).
func (o PackageIssueOutput) PackageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PackageIssue) *string { return v.PackageType }).(pulumi.StringPtrOutput)
}

func (o PackageIssueOutput) SeverityName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PackageIssue) *string { return v.SeverityName }).(pulumi.StringPtrOutput)
}

type PackageIssueArrayOutput struct{ *pulumi.OutputState }

func (PackageIssueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PackageIssue)(nil)).Elem()
}

func (o PackageIssueArrayOutput) ToPackageIssueArrayOutput() PackageIssueArrayOutput {
	return o
}

func (o PackageIssueArrayOutput) ToPackageIssueArrayOutputWithContext(ctx context.Context) PackageIssueArrayOutput {
	return o
}

func (o PackageIssueArrayOutput) Index(i pulumi.IntInput) PackageIssueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PackageIssue {
		return vs[0].([]PackageIssue)[vs[1].(int)]
	}).(PackageIssueOutput)
}

// This message wraps a location affected by a vulnerability and its associated fix (if one is available).
type PackageIssueResponse struct {
	// The location of the vulnerability.
	AffectedLocation VulnerabilityLocationResponse `pulumi:"affectedLocation"`
	// The distro or language system assigned severity for this vulnerability when that is available and note provider assigned severity when distro or language system has not yet assigned a severity for this vulnerability.
	EffectiveSeverity string `pulumi:"effectiveSeverity"`
	// The location of the available fix for vulnerability.
	FixedLocation VulnerabilityLocationResponse `pulumi:"fixedLocation"`
	// The type of package (e.g. OS, MAVEN, GO).
	PackageType  string `pulumi:"packageType"`
	SeverityName string `pulumi:"severityName"`
}

// This message wraps a location affected by a vulnerability and its associated fix (if one is available).
type PackageIssueResponseOutput struct{ *pulumi.OutputState }

func (PackageIssueResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PackageIssueResponse)(nil)).Elem()
}

func (o PackageIssueResponseOutput) ToPackageIssueResponseOutput() PackageIssueResponseOutput {
	return o
}

func (o PackageIssueResponseOutput) ToPackageIssueResponseOutputWithContext(ctx context.Context) PackageIssueResponseOutput {
	return o
}

// The location of the vulnerability.
func (o PackageIssueResponseOutput) AffectedLocation() VulnerabilityLocationResponseOutput {
	return o.ApplyT(func(v PackageIssueResponse) VulnerabilityLocationResponse { return v.AffectedLocation }).(VulnerabilityLocationResponseOutput)
}

// The distro or language system assigned severity for this vulnerability when that is available and note provider assigned severity when distro or language system has not yet assigned a severity for this vulnerability.
func (o PackageIssueResponseOutput) EffectiveSeverity() pulumi.StringOutput {
	return o.ApplyT(func(v PackageIssueResponse) string { return v.EffectiveSeverity }).(pulumi.StringOutput)
}

// The location of the available fix for vulnerability.
func (o PackageIssueResponseOutput) FixedLocation() VulnerabilityLocationResponseOutput {
	return o.ApplyT(func(v PackageIssueResponse) VulnerabilityLocationResponse { return v.FixedLocation }).(VulnerabilityLocationResponseOutput)
}

// The type of package (e.g. OS, MAVEN, GO).
func (o PackageIssueResponseOutput) PackageType() pulumi.StringOutput {
	return o.ApplyT(func(v PackageIssueResponse) string { return v.PackageType }).(pulumi.StringOutput)
}

func (o PackageIssueResponseOutput) SeverityName() pulumi.StringOutput {
	return o.ApplyT(func(v PackageIssueResponse) string { return v.SeverityName }).(pulumi.StringOutput)
}

type PackageIssueResponseArrayOutput struct{ *pulumi.OutputState }

func (PackageIssueResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PackageIssueResponse)(nil)).Elem()
}

func (o PackageIssueResponseArrayOutput) ToPackageIssueResponseArrayOutput() PackageIssueResponseArrayOutput {
	return o
}

func (o PackageIssueResponseArrayOutput) ToPackageIssueResponseArrayOutputWithContext(ctx context.Context) PackageIssueResponseArrayOutput {
	return o
}

func (o PackageIssueResponseArrayOutput) Index(i pulumi.IntInput) PackageIssueResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PackageIssueResponse {
		return vs[0].([]PackageIssueResponse)[vs[1].(int)]
	}).(PackageIssueResponseOutput)
}

// This represents a particular package that is distributed over various channels. e.g. glibc (aka libc6) is distributed by many, at various versions.
type PackageResponse struct {
	// The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.
	Architecture string `pulumi:"architecture"`
	// The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages.
	CpeUri string `pulumi:"cpeUri"`
	// The description of this package.
	Description string `pulumi:"description"`
	// Hash value, typically a file digest, that allows unique identification a specific package.
	Digest []DigestResponse `pulumi:"digest"`
	// The various channels by which a package is distributed.
	Distribution []DistributionResponse `pulumi:"distribution"`
	// Licenses that have been declared by the authors of the package.
	License LicenseResponse `pulumi:"license"`
	// A freeform text denoting the maintainer of this package.
	Maintainer string `pulumi:"maintainer"`
	// The name of the package.
	Name string `pulumi:"name"`
	// The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
	PackageType string `pulumi:"packageType"`
	// The homepage for this package.
	Url string `pulumi:"url"`
	// The version of the package.
	Version VersionResponse `pulumi:"version"`
}

// This represents a particular package that is distributed over various channels. e.g. glibc (aka libc6) is distributed by many, at various versions.
type PackageResponseOutput struct{ *pulumi.OutputState }

func (PackageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PackageResponse)(nil)).Elem()
}

func (o PackageResponseOutput) ToPackageResponseOutput() PackageResponseOutput {
	return o
}

func (o PackageResponseOutput) ToPackageResponseOutputWithContext(ctx context.Context) PackageResponseOutput {
	return o
}

// The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.
func (o PackageResponseOutput) Architecture() pulumi.StringOutput {
	return o.ApplyT(func(v PackageResponse) string { return v.Architecture }).(pulumi.StringOutput)
}

// The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages.
func (o PackageResponseOutput) CpeUri() pulumi.StringOutput {
	return o.ApplyT(func(v PackageResponse) string { return v.CpeUri }).(pulumi.StringOutput)
}

// The description of this package.
func (o PackageResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v PackageResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Hash value, typically a file digest, that allows unique identification a specific package.
func (o PackageResponseOutput) Digest() DigestResponseArrayOutput {
	return o.ApplyT(func(v PackageResponse) []DigestResponse { return v.Digest }).(DigestResponseArrayOutput)
}

// The various channels by which a package is distributed.
func (o PackageResponseOutput) Distribution() DistributionResponseArrayOutput {
	return o.ApplyT(func(v PackageResponse) []DistributionResponse { return v.Distribution }).(DistributionResponseArrayOutput)
}

// Licenses that have been declared by the authors of the package.
func (o PackageResponseOutput) License() LicenseResponseOutput {
	return o.ApplyT(func(v PackageResponse) LicenseResponse { return v.License }).(LicenseResponseOutput)
}

// A freeform text denoting the maintainer of this package.
func (o PackageResponseOutput) Maintainer() pulumi.StringOutput {
	return o.ApplyT(func(v PackageResponse) string { return v.Maintainer }).(pulumi.StringOutput)
}

// The name of the package.
func (o PackageResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PackageResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
func (o PackageResponseOutput) PackageType() pulumi.StringOutput {
	return o.ApplyT(func(v PackageResponse) string { return v.PackageType }).(pulumi.StringOutput)
}

// The homepage for this package.
func (o PackageResponseOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v PackageResponse) string { return v.Url }).(pulumi.StringOutput)
}

// The version of the package.
func (o PackageResponseOutput) Version() VersionResponseOutput {
	return o.ApplyT(func(v PackageResponse) VersionResponse { return v.Version }).(VersionResponseOutput)
}

// An attestation wrapper with a PGP-compatible signature. This message only supports `ATTACHED` signatures, where the payload that is signed is included alongside the signature itself in the same file.
type PgpSignedAttestation struct {
	// Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).
	ContentType *PgpSignedAttestationContentType `pulumi:"contentType"`
	// The cryptographic fingerprint of the key used to generate the signature, as output by, e.g. `gpg --list-keys`. This should be the version 4, full 160-bit fingerprint, expressed as a 40 character hexadecimal string. See https://tools.ietf.org/html/rfc4880#section-12.2 for details. Implementations may choose to acknowledge "LONG", "SHORT", or other abbreviated key IDs, but only the full fingerprint is guaranteed to work. In gpg, the full fingerprint can be retrieved from the `fpr` field returned when calling --list-keys with --with-colons. For example: ```gpg --with-colons --with-fingerprint --force-v4-certs \ --list-keys attester@example.com tru::1:1513631572:0:3:1:5 pub:...... fpr:::::::::24FF6481B76AC91E66A00AC657A93A81EF3AE6FB:``` Above, the fingerprint is `24FF6481B76AC91E66A00AC657A93A81EF3AE6FB`.
	PgpKeyId *string `pulumi:"pgpKeyId"`
	// The raw content of the signature, as output by GNU Privacy Guard (GPG) or equivalent. Since this message only supports attached signatures, the payload that was signed must be attached. While the signature format supported is dependent on the verification implementation, currently only ASCII-armored (`--armor` to gpg), non-clearsigned (`--sign` rather than `--clearsign` to gpg) are supported. Concretely, `gpg --sign --armor --output=signature.gpg payload.json` will create the signature content expected in this field in `signature.gpg` for the `payload.json` attestation payload.
	Signature *string `pulumi:"signature"`
}

// PgpSignedAttestationInput is an input type that accepts PgpSignedAttestationArgs and PgpSignedAttestationOutput values.
// You can construct a concrete instance of `PgpSignedAttestationInput` via:
//
//	PgpSignedAttestationArgs{...}
type PgpSignedAttestationInput interface {
	pulumi.Input

	ToPgpSignedAttestationOutput() PgpSignedAttestationOutput
	ToPgpSignedAttestationOutputWithContext(context.Context) PgpSignedAttestationOutput
}

// An attestation wrapper with a PGP-compatible signature. This message only supports `ATTACHED` signatures, where the payload that is signed is included alongside the signature itself in the same file.
type PgpSignedAttestationArgs struct {
	// Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).
	ContentType PgpSignedAttestationContentTypePtrInput `pulumi:"contentType"`
	// The cryptographic fingerprint of the key used to generate the signature, as output by, e.g. `gpg --list-keys`. This should be the version 4, full 160-bit fingerprint, expressed as a 40 character hexadecimal string. See https://tools.ietf.org/html/rfc4880#section-12.2 for details. Implementations may choose to acknowledge "LONG", "SHORT", or other abbreviated key IDs, but only the full fingerprint is guaranteed to work. In gpg, the full fingerprint can be retrieved from the `fpr` field returned when calling --list-keys with --with-colons. For example: ```gpg --with-colons --with-fingerprint --force-v4-certs \ --list-keys attester@example.com tru::1:1513631572:0:3:1:5 pub:...... fpr:::::::::24FF6481B76AC91E66A00AC657A93A81EF3AE6FB:``` Above, the fingerprint is `24FF6481B76AC91E66A00AC657A93A81EF3AE6FB`.
	PgpKeyId pulumi.StringPtrInput `pulumi:"pgpKeyId"`
	// The raw content of the signature, as output by GNU Privacy Guard (GPG) or equivalent. Since this message only supports attached signatures, the payload that was signed must be attached. While the signature format supported is dependent on the verification implementation, currently only ASCII-armored (`--armor` to gpg), non-clearsigned (`--sign` rather than `--clearsign` to gpg) are supported. Concretely, `gpg --sign --armor --output=signature.gpg payload.json` will create the signature content expected in this field in `signature.gpg` for the `payload.json` attestation payload.
	Signature pulumi.StringPtrInput `pulumi:"signature"`
}

func (PgpSignedAttestationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PgpSignedAttestation)(nil)).Elem()
}

func (i PgpSignedAttestationArgs) ToPgpSignedAttestationOutput() PgpSignedAttestationOutput {
	return i.ToPgpSignedAttestationOutputWithContext(context.Background())
}

func (i PgpSignedAttestationArgs) ToPgpSignedAttestationOutputWithContext(ctx context.Context) PgpSignedAttestationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PgpSignedAttestationOutput)
}

func (i PgpSignedAttestationArgs) ToPgpSignedAttestationPtrOutput() PgpSignedAttestationPtrOutput {
	return i.ToPgpSignedAttestationPtrOutputWithContext(context.Background())
}

func (i PgpSignedAttestationArgs) ToPgpSignedAttestationPtrOutputWithContext(ctx context.Context) PgpSignedAttestationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PgpSignedAttestationOutput).ToPgpSignedAttestationPtrOutputWithContext(ctx)
}

// PgpSignedAttestationPtrInput is an input type that accepts PgpSignedAttestationArgs, PgpSignedAttestationPtr and PgpSignedAttestationPtrOutput values.
// You can construct a concrete instance of `PgpSignedAttestationPtrInput` via:
//
//	        PgpSignedAttestationArgs{...}
//
//	or:
//
//	        nil
type PgpSignedAttestationPtrInput interface {
	pulumi.Input

	ToPgpSignedAttestationPtrOutput() PgpSignedAttestationPtrOutput
	ToPgpSignedAttestationPtrOutputWithContext(context.Context) PgpSignedAttestationPtrOutput
}

type pgpSignedAttestationPtrType PgpSignedAttestationArgs

func PgpSignedAttestationPtr(v *PgpSignedAttestationArgs) PgpSignedAttestationPtrInput {
	return (*pgpSignedAttestationPtrType)(v)
}

func (*pgpSignedAttestationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PgpSignedAttestation)(nil)).Elem()
}

func (i *pgpSignedAttestationPtrType) ToPgpSignedAttestationPtrOutput() PgpSignedAttestationPtrOutput {
	return i.ToPgpSignedAttestationPtrOutputWithContext(context.Background())
}

func (i *pgpSignedAttestationPtrType) ToPgpSignedAttestationPtrOutputWithContext(ctx context.Context) PgpSignedAttestationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PgpSignedAttestationPtrOutput)
}

// An attestation wrapper with a PGP-compatible signature. This message only supports `ATTACHED` signatures, where the payload that is signed is included alongside the signature itself in the same file.
type PgpSignedAttestationOutput struct{ *pulumi.OutputState }

func (PgpSignedAttestationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PgpSignedAttestation)(nil)).Elem()
}

func (o PgpSignedAttestationOutput) ToPgpSignedAttestationOutput() PgpSignedAttestationOutput {
	return o
}

func (o PgpSignedAttestationOutput) ToPgpSignedAttestationOutputWithContext(ctx context.Context) PgpSignedAttestationOutput {
	return o
}

func (o PgpSignedAttestationOutput) ToPgpSignedAttestationPtrOutput() PgpSignedAttestationPtrOutput {
	return o.ToPgpSignedAttestationPtrOutputWithContext(context.Background())
}

func (o PgpSignedAttestationOutput) ToPgpSignedAttestationPtrOutputWithContext(ctx context.Context) PgpSignedAttestationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PgpSignedAttestation) *PgpSignedAttestation {
		return &v
	}).(PgpSignedAttestationPtrOutput)
}

// Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).
func (o PgpSignedAttestationOutput) ContentType() PgpSignedAttestationContentTypePtrOutput {
	return o.ApplyT(func(v PgpSignedAttestation) *PgpSignedAttestationContentType { return v.ContentType }).(PgpSignedAttestationContentTypePtrOutput)
}

// The cryptographic fingerprint of the key used to generate the signature, as output by, e.g. `gpg --list-keys`. This should be the version 4, full 160-bit fingerprint, expressed as a 40 character hexadecimal string. See https://tools.ietf.org/html/rfc4880#section-12.2 for details. Implementations may choose to acknowledge "LONG", "SHORT", or other abbreviated key IDs, but only the full fingerprint is guaranteed to work. In gpg, the full fingerprint can be retrieved from the `fpr` field returned when calling --list-keys with --with-colons. For example: ```gpg --with-colons --with-fingerprint --force-v4-certs \ --list-keys attester@example.com tru::1:1513631572:0:3:1:5 pub:...... fpr:::::::::24FF6481B76AC91E66A00AC657A93A81EF3AE6FB:``` Above, the fingerprint is `24FF6481B76AC91E66A00AC657A93A81EF3AE6FB`.
func (o PgpSignedAttestationOutput) PgpKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PgpSignedAttestation) *string { return v.PgpKeyId }).(pulumi.StringPtrOutput)
}

// The raw content of the signature, as output by GNU Privacy Guard (GPG) or equivalent. Since this message only supports attached signatures, the payload that was signed must be attached. While the signature format supported is dependent on the verification implementation, currently only ASCII-armored (`--armor` to gpg), non-clearsigned (`--sign` rather than `--clearsign` to gpg) are supported. Concretely, `gpg --sign --armor --output=signature.gpg payload.json` will create the signature content expected in this field in `signature.gpg` for the `payload.json` attestation payload.
func (o PgpSignedAttestationOutput) Signature() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PgpSignedAttestation) *string { return v.Signature }).(pulumi.StringPtrOutput)
}

type PgpSignedAttestationPtrOutput struct{ *pulumi.OutputState }

func (PgpSignedAttestationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PgpSignedAttestation)(nil)).Elem()
}

func (o PgpSignedAttestationPtrOutput) ToPgpSignedAttestationPtrOutput() PgpSignedAttestationPtrOutput {
	return o
}

func (o PgpSignedAttestationPtrOutput) ToPgpSignedAttestationPtrOutputWithContext(ctx context.Context) PgpSignedAttestationPtrOutput {
	return o
}

func (o PgpSignedAttestationPtrOutput) Elem() PgpSignedAttestationOutput {
	return o.ApplyT(func(v *PgpSignedAttestation) PgpSignedAttestation {
		if v != nil {
			return *v
		}
		var ret PgpSignedAttestation
		return ret
	}).(PgpSignedAttestationOutput)
}

// Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).
func (o PgpSignedAttestationPtrOutput) ContentType() PgpSignedAttestationContentTypePtrOutput {
	return o.ApplyT(func(v *PgpSignedAttestation) *PgpSignedAttestationContentType {
		if v == nil {
			return nil
		}
		return v.ContentType
	}).(PgpSignedAttestationContentTypePtrOutput)
}

// The cryptographic fingerprint of the key used to generate the signature, as output by, e.g. `gpg --list-keys`. This should be the version 4, full 160-bit fingerprint, expressed as a 40 character hexadecimal string. See https://tools.ietf.org/html/rfc4880#section-12.2 for details. Implementations may choose to acknowledge "LONG", "SHORT", or other abbreviated key IDs, but only the full fingerprint is guaranteed to work. In gpg, the full fingerprint can be retrieved from the `fpr` field returned when calling --list-keys with --with-colons. For example: ```gpg --with-colons --with-fingerprint --force-v4-certs \ --list-keys attester@example.com tru::1:1513631572:0:3:1:5 pub:...... fpr:::::::::24FF6481B76AC91E66A00AC657A93A81EF3AE6FB:``` Above, the fingerprint is `24FF6481B76AC91E66A00AC657A93A81EF3AE6FB`.
func (o PgpSignedAttestationPtrOutput) PgpKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PgpSignedAttestation) *string {
		if v == nil {
			return nil
		}
		return v.PgpKeyId
	}).(pulumi.StringPtrOutput)
}

// The raw content of the signature, as output by GNU Privacy Guard (GPG) or equivalent. Since this message only supports attached signatures, the payload that was signed must be attached. While the signature format supported is dependent on the verification implementation, currently only ASCII-armored (`--armor` to gpg), non-clearsigned (`--sign` rather than `--clearsign` to gpg) are supported. Concretely, `gpg --sign --armor --output=signature.gpg payload.json` will create the signature content expected in this field in `signature.gpg` for the `payload.json` attestation payload.
func (o PgpSignedAttestationPtrOutput) Signature() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PgpSignedAttestation) *string {
		if v == nil {
			return nil
		}
		return v.Signature
	}).(pulumi.StringPtrOutput)
}

// An attestation wrapper with a PGP-compatible signature. This message only supports `ATTACHED` signatures, where the payload that is signed is included alongside the signature itself in the same file.
type PgpSignedAttestationResponse struct {
	// Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).
	ContentType string `pulumi:"contentType"`
	// The cryptographic fingerprint of the key used to generate the signature, as output by, e.g. `gpg --list-keys`. This should be the version 4, full 160-bit fingerprint, expressed as a 40 character hexadecimal string. See https://tools.ietf.org/html/rfc4880#section-12.2 for details. Implementations may choose to acknowledge "LONG", "SHORT", or other abbreviated key IDs, but only the full fingerprint is guaranteed to work. In gpg, the full fingerprint can be retrieved from the `fpr` field returned when calling --list-keys with --with-colons. For example: ```gpg --with-colons --with-fingerprint --force-v4-certs \ --list-keys attester@example.com tru::1:1513631572:0:3:1:5 pub:...... fpr:::::::::24FF6481B76AC91E66A00AC657A93A81EF3AE6FB:``` Above, the fingerprint is `24FF6481B76AC91E66A00AC657A93A81EF3AE6FB`.
	PgpKeyId string `pulumi:"pgpKeyId"`
	// The raw content of the signature, as output by GNU Privacy Guard (GPG) or equivalent. Since this message only supports attached signatures, the payload that was signed must be attached. While the signature format supported is dependent on the verification implementation, currently only ASCII-armored (`--armor` to gpg), non-clearsigned (`--sign` rather than `--clearsign` to gpg) are supported. Concretely, `gpg --sign --armor --output=signature.gpg payload.json` will create the signature content expected in this field in `signature.gpg` for the `payload.json` attestation payload.
	Signature string `pulumi:"signature"`
}

// An attestation wrapper with a PGP-compatible signature. This message only supports `ATTACHED` signatures, where the payload that is signed is included alongside the signature itself in the same file.
type PgpSignedAttestationResponseOutput struct{ *pulumi.OutputState }

func (PgpSignedAttestationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PgpSignedAttestationResponse)(nil)).Elem()
}

func (o PgpSignedAttestationResponseOutput) ToPgpSignedAttestationResponseOutput() PgpSignedAttestationResponseOutput {
	return o
}

func (o PgpSignedAttestationResponseOutput) ToPgpSignedAttestationResponseOutputWithContext(ctx context.Context) PgpSignedAttestationResponseOutput {
	return o
}

// Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).
func (o PgpSignedAttestationResponseOutput) ContentType() pulumi.StringOutput {
	return o.ApplyT(func(v PgpSignedAttestationResponse) string { return v.ContentType }).(pulumi.StringOutput)
}

// The cryptographic fingerprint of the key used to generate the signature, as output by, e.g. `gpg --list-keys`. This should be the version 4, full 160-bit fingerprint, expressed as a 40 character hexadecimal string. See https://tools.ietf.org/html/rfc4880#section-12.2 for details. Implementations may choose to acknowledge "LONG", "SHORT", or other abbreviated key IDs, but only the full fingerprint is guaranteed to work. In gpg, the full fingerprint can be retrieved from the `fpr` field returned when calling --list-keys with --with-colons. For example: ```gpg --with-colons --with-fingerprint --force-v4-certs \ --list-keys attester@example.com tru::1:1513631572:0:3:1:5 pub:...... fpr:::::::::24FF6481B76AC91E66A00AC657A93A81EF3AE6FB:``` Above, the fingerprint is `24FF6481B76AC91E66A00AC657A93A81EF3AE6FB`.
func (o PgpSignedAttestationResponseOutput) PgpKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v PgpSignedAttestationResponse) string { return v.PgpKeyId }).(pulumi.StringOutput)
}

// The raw content of the signature, as output by GNU Privacy Guard (GPG) or equivalent. Since this message only supports attached signatures, the payload that was signed must be attached. While the signature format supported is dependent on the verification implementation, currently only ASCII-armored (`--armor` to gpg), non-clearsigned (`--sign` rather than `--clearsign` to gpg) are supported. Concretely, `gpg --sign --armor --output=signature.gpg payload.json` will create the signature content expected in this field in `signature.gpg` for the `payload.json` attestation payload.
func (o PgpSignedAttestationResponseOutput) Signature() pulumi.StringOutput {
	return o.ApplyT(func(v PgpSignedAttestationResponse) string { return v.Signature }).(pulumi.StringOutput)
}

// Product contains information about a product and how to uniquely identify it.
type Product struct {
	// Token that identifies a product so that it can be referred to from other parts in the document. There is no predefined format as long as it uniquely identifies a group in the context of the current document.
	Id *string `pulumi:"id"`
	// Helps in identifying the underlying product.
	IdentifierHelper *IdentifierHelper `pulumi:"identifierHelper"`
	// Name of the product.
	Name *string `pulumi:"name"`
}

// ProductInput is an input type that accepts ProductArgs and ProductOutput values.
// You can construct a concrete instance of `ProductInput` via:
//
//	ProductArgs{...}
type ProductInput interface {
	pulumi.Input

	ToProductOutput() ProductOutput
	ToProductOutputWithContext(context.Context) ProductOutput
}

// Product contains information about a product and how to uniquely identify it.
type ProductArgs struct {
	// Token that identifies a product so that it can be referred to from other parts in the document. There is no predefined format as long as it uniquely identifies a group in the context of the current document.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Helps in identifying the underlying product.
	IdentifierHelper IdentifierHelperPtrInput `pulumi:"identifierHelper"`
	// Name of the product.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ProductArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Product)(nil)).Elem()
}

func (i ProductArgs) ToProductOutput() ProductOutput {
	return i.ToProductOutputWithContext(context.Background())
}

func (i ProductArgs) ToProductOutputWithContext(ctx context.Context) ProductOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProductOutput)
}

func (i ProductArgs) ToProductPtrOutput() ProductPtrOutput {
	return i.ToProductPtrOutputWithContext(context.Background())
}

func (i ProductArgs) ToProductPtrOutputWithContext(ctx context.Context) ProductPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProductOutput).ToProductPtrOutputWithContext(ctx)
}

// ProductPtrInput is an input type that accepts ProductArgs, ProductPtr and ProductPtrOutput values.
// You can construct a concrete instance of `ProductPtrInput` via:
//
//	        ProductArgs{...}
//
//	or:
//
//	        nil
type ProductPtrInput interface {
	pulumi.Input

	ToProductPtrOutput() ProductPtrOutput
	ToProductPtrOutputWithContext(context.Context) ProductPtrOutput
}

type productPtrType ProductArgs

func ProductPtr(v *ProductArgs) ProductPtrInput {
	return (*productPtrType)(v)
}

func (*productPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Product)(nil)).Elem()
}

func (i *productPtrType) ToProductPtrOutput() ProductPtrOutput {
	return i.ToProductPtrOutputWithContext(context.Background())
}

func (i *productPtrType) ToProductPtrOutputWithContext(ctx context.Context) ProductPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProductPtrOutput)
}

// Product contains information about a product and how to uniquely identify it.
type ProductOutput struct{ *pulumi.OutputState }

func (ProductOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Product)(nil)).Elem()
}

func (o ProductOutput) ToProductOutput() ProductOutput {
	return o
}

func (o ProductOutput) ToProductOutputWithContext(ctx context.Context) ProductOutput {
	return o
}

func (o ProductOutput) ToProductPtrOutput() ProductPtrOutput {
	return o.ToProductPtrOutputWithContext(context.Background())
}

func (o ProductOutput) ToProductPtrOutputWithContext(ctx context.Context) ProductPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Product) *Product {
		return &v
	}).(ProductPtrOutput)
}

// Token that identifies a product so that it can be referred to from other parts in the document. There is no predefined format as long as it uniquely identifies a group in the context of the current document.
func (o ProductOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Product) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Helps in identifying the underlying product.
func (o ProductOutput) IdentifierHelper() IdentifierHelperPtrOutput {
	return o.ApplyT(func(v Product) *IdentifierHelper { return v.IdentifierHelper }).(IdentifierHelperPtrOutput)
}

// Name of the product.
func (o ProductOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Product) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ProductPtrOutput struct{ *pulumi.OutputState }

func (ProductPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Product)(nil)).Elem()
}

func (o ProductPtrOutput) ToProductPtrOutput() ProductPtrOutput {
	return o
}

func (o ProductPtrOutput) ToProductPtrOutputWithContext(ctx context.Context) ProductPtrOutput {
	return o
}

func (o ProductPtrOutput) Elem() ProductOutput {
	return o.ApplyT(func(v *Product) Product {
		if v != nil {
			return *v
		}
		var ret Product
		return ret
	}).(ProductOutput)
}

// Token that identifies a product so that it can be referred to from other parts in the document. There is no predefined format as long as it uniquely identifies a group in the context of the current document.
func (o ProductPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Product) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Helps in identifying the underlying product.
func (o ProductPtrOutput) IdentifierHelper() IdentifierHelperPtrOutput {
	return o.ApplyT(func(v *Product) *IdentifierHelper {
		if v == nil {
			return nil
		}
		return v.IdentifierHelper
	}).(IdentifierHelperPtrOutput)
}

// Name of the product.
func (o ProductPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Product) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Product contains information about a product and how to uniquely identify it.
type ProductResponse struct {
	// Helps in identifying the underlying product.
	IdentifierHelper IdentifierHelperResponse `pulumi:"identifierHelper"`
	// Name of the product.
	Name string `pulumi:"name"`
}

// Product contains information about a product and how to uniquely identify it.
type ProductResponseOutput struct{ *pulumi.OutputState }

func (ProductResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProductResponse)(nil)).Elem()
}

func (o ProductResponseOutput) ToProductResponseOutput() ProductResponseOutput {
	return o
}

func (o ProductResponseOutput) ToProductResponseOutputWithContext(ctx context.Context) ProductResponseOutput {
	return o
}

// Helps in identifying the underlying product.
func (o ProductResponseOutput) IdentifierHelper() IdentifierHelperResponseOutput {
	return o.ApplyT(func(v ProductResponse) IdentifierHelperResponse { return v.IdentifierHelper }).(IdentifierHelperResponseOutput)
}

// Name of the product.
func (o ProductResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProductResponse) string { return v.Name }).(pulumi.StringOutput)
}

type ProvenanceBuilder struct {
	BuilderDependencies []ResourceDescriptor `pulumi:"builderDependencies"`
	Id                  *string              `pulumi:"id"`
	Version             map[string]string    `pulumi:"version"`
}

// ProvenanceBuilderInput is an input type that accepts ProvenanceBuilderArgs and ProvenanceBuilderOutput values.
// You can construct a concrete instance of `ProvenanceBuilderInput` via:
//
//	ProvenanceBuilderArgs{...}
type ProvenanceBuilderInput interface {
	pulumi.Input

	ToProvenanceBuilderOutput() ProvenanceBuilderOutput
	ToProvenanceBuilderOutputWithContext(context.Context) ProvenanceBuilderOutput
}

type ProvenanceBuilderArgs struct {
	BuilderDependencies ResourceDescriptorArrayInput `pulumi:"builderDependencies"`
	Id                  pulumi.StringPtrInput        `pulumi:"id"`
	Version             pulumi.StringMapInput        `pulumi:"version"`
}

func (ProvenanceBuilderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProvenanceBuilder)(nil)).Elem()
}

func (i ProvenanceBuilderArgs) ToProvenanceBuilderOutput() ProvenanceBuilderOutput {
	return i.ToProvenanceBuilderOutputWithContext(context.Background())
}

func (i ProvenanceBuilderArgs) ToProvenanceBuilderOutputWithContext(ctx context.Context) ProvenanceBuilderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProvenanceBuilderOutput)
}

func (i ProvenanceBuilderArgs) ToProvenanceBuilderPtrOutput() ProvenanceBuilderPtrOutput {
	return i.ToProvenanceBuilderPtrOutputWithContext(context.Background())
}

func (i ProvenanceBuilderArgs) ToProvenanceBuilderPtrOutputWithContext(ctx context.Context) ProvenanceBuilderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProvenanceBuilderOutput).ToProvenanceBuilderPtrOutputWithContext(ctx)
}

// ProvenanceBuilderPtrInput is an input type that accepts ProvenanceBuilderArgs, ProvenanceBuilderPtr and ProvenanceBuilderPtrOutput values.
// You can construct a concrete instance of `ProvenanceBuilderPtrInput` via:
//
//	        ProvenanceBuilderArgs{...}
//
//	or:
//
//	        nil
type ProvenanceBuilderPtrInput interface {
	pulumi.Input

	ToProvenanceBuilderPtrOutput() ProvenanceBuilderPtrOutput
	ToProvenanceBuilderPtrOutputWithContext(context.Context) ProvenanceBuilderPtrOutput
}

type provenanceBuilderPtrType ProvenanceBuilderArgs

func ProvenanceBuilderPtr(v *ProvenanceBuilderArgs) ProvenanceBuilderPtrInput {
	return (*provenanceBuilderPtrType)(v)
}

func (*provenanceBuilderPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProvenanceBuilder)(nil)).Elem()
}

func (i *provenanceBuilderPtrType) ToProvenanceBuilderPtrOutput() ProvenanceBuilderPtrOutput {
	return i.ToProvenanceBuilderPtrOutputWithContext(context.Background())
}

func (i *provenanceBuilderPtrType) ToProvenanceBuilderPtrOutputWithContext(ctx context.Context) ProvenanceBuilderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProvenanceBuilderPtrOutput)
}

type ProvenanceBuilderOutput struct{ *pulumi.OutputState }

func (ProvenanceBuilderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProvenanceBuilder)(nil)).Elem()
}

func (o ProvenanceBuilderOutput) ToProvenanceBuilderOutput() ProvenanceBuilderOutput {
	return o
}

func (o ProvenanceBuilderOutput) ToProvenanceBuilderOutputWithContext(ctx context.Context) ProvenanceBuilderOutput {
	return o
}

func (o ProvenanceBuilderOutput) ToProvenanceBuilderPtrOutput() ProvenanceBuilderPtrOutput {
	return o.ToProvenanceBuilderPtrOutputWithContext(context.Background())
}

func (o ProvenanceBuilderOutput) ToProvenanceBuilderPtrOutputWithContext(ctx context.Context) ProvenanceBuilderPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProvenanceBuilder) *ProvenanceBuilder {
		return &v
	}).(ProvenanceBuilderPtrOutput)
}

func (o ProvenanceBuilderOutput) BuilderDependencies() ResourceDescriptorArrayOutput {
	return o.ApplyT(func(v ProvenanceBuilder) []ResourceDescriptor { return v.BuilderDependencies }).(ResourceDescriptorArrayOutput)
}

func (o ProvenanceBuilderOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProvenanceBuilder) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o ProvenanceBuilderOutput) Version() pulumi.StringMapOutput {
	return o.ApplyT(func(v ProvenanceBuilder) map[string]string { return v.Version }).(pulumi.StringMapOutput)
}

type ProvenanceBuilderPtrOutput struct{ *pulumi.OutputState }

func (ProvenanceBuilderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProvenanceBuilder)(nil)).Elem()
}

func (o ProvenanceBuilderPtrOutput) ToProvenanceBuilderPtrOutput() ProvenanceBuilderPtrOutput {
	return o
}

func (o ProvenanceBuilderPtrOutput) ToProvenanceBuilderPtrOutputWithContext(ctx context.Context) ProvenanceBuilderPtrOutput {
	return o
}

func (o ProvenanceBuilderPtrOutput) Elem() ProvenanceBuilderOutput {
	return o.ApplyT(func(v *ProvenanceBuilder) ProvenanceBuilder {
		if v != nil {
			return *v
		}
		var ret ProvenanceBuilder
		return ret
	}).(ProvenanceBuilderOutput)
}

func (o ProvenanceBuilderPtrOutput) BuilderDependencies() ResourceDescriptorArrayOutput {
	return o.ApplyT(func(v *ProvenanceBuilder) []ResourceDescriptor {
		if v == nil {
			return nil
		}
		return v.BuilderDependencies
	}).(ResourceDescriptorArrayOutput)
}

func (o ProvenanceBuilderPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProvenanceBuilder) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

func (o ProvenanceBuilderPtrOutput) Version() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ProvenanceBuilder) map[string]string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringMapOutput)
}

type ProvenanceBuilderResponse struct {
	BuilderDependencies []ResourceDescriptorResponse `pulumi:"builderDependencies"`
	Version             map[string]string            `pulumi:"version"`
}

type ProvenanceBuilderResponseOutput struct{ *pulumi.OutputState }

func (ProvenanceBuilderResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProvenanceBuilderResponse)(nil)).Elem()
}

func (o ProvenanceBuilderResponseOutput) ToProvenanceBuilderResponseOutput() ProvenanceBuilderResponseOutput {
	return o
}

func (o ProvenanceBuilderResponseOutput) ToProvenanceBuilderResponseOutputWithContext(ctx context.Context) ProvenanceBuilderResponseOutput {
	return o
}

func (o ProvenanceBuilderResponseOutput) BuilderDependencies() ResourceDescriptorResponseArrayOutput {
	return o.ApplyT(func(v ProvenanceBuilderResponse) []ResourceDescriptorResponse { return v.BuilderDependencies }).(ResourceDescriptorResponseArrayOutput)
}

func (o ProvenanceBuilderResponseOutput) Version() pulumi.StringMapOutput {
	return o.ApplyT(func(v ProvenanceBuilderResponse) map[string]string { return v.Version }).(pulumi.StringMapOutput)
}

// Publisher contains information about the publisher of this Note.
type Publisher struct {
	// Provides information about the authority of the issuing party to release the document, in particular, the party's constituency and responsibilities or other obligations.
	IssuingAuthority *string `pulumi:"issuingAuthority"`
	// Name of the publisher. Examples: 'Google', 'Google Cloud Platform'.
	Name *string `pulumi:"name"`
	// The context or namespace. Contains a URL which is under control of the issuing party and can be used as a globally unique identifier for that issuing party. Example: https://csaf.io
	PublisherNamespace *string `pulumi:"publisherNamespace"`
}

// PublisherInput is an input type that accepts PublisherArgs and PublisherOutput values.
// You can construct a concrete instance of `PublisherInput` via:
//
//	PublisherArgs{...}
type PublisherInput interface {
	pulumi.Input

	ToPublisherOutput() PublisherOutput
	ToPublisherOutputWithContext(context.Context) PublisherOutput
}

// Publisher contains information about the publisher of this Note.
type PublisherArgs struct {
	// Provides information about the authority of the issuing party to release the document, in particular, the party's constituency and responsibilities or other obligations.
	IssuingAuthority pulumi.StringPtrInput `pulumi:"issuingAuthority"`
	// Name of the publisher. Examples: 'Google', 'Google Cloud Platform'.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The context or namespace. Contains a URL which is under control of the issuing party and can be used as a globally unique identifier for that issuing party. Example: https://csaf.io
	PublisherNamespace pulumi.StringPtrInput `pulumi:"publisherNamespace"`
}

func (PublisherArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Publisher)(nil)).Elem()
}

func (i PublisherArgs) ToPublisherOutput() PublisherOutput {
	return i.ToPublisherOutputWithContext(context.Background())
}

func (i PublisherArgs) ToPublisherOutputWithContext(ctx context.Context) PublisherOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublisherOutput)
}

func (i PublisherArgs) ToPublisherPtrOutput() PublisherPtrOutput {
	return i.ToPublisherPtrOutputWithContext(context.Background())
}

func (i PublisherArgs) ToPublisherPtrOutputWithContext(ctx context.Context) PublisherPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublisherOutput).ToPublisherPtrOutputWithContext(ctx)
}

// PublisherPtrInput is an input type that accepts PublisherArgs, PublisherPtr and PublisherPtrOutput values.
// You can construct a concrete instance of `PublisherPtrInput` via:
//
//	        PublisherArgs{...}
//
//	or:
//
//	        nil
type PublisherPtrInput interface {
	pulumi.Input

	ToPublisherPtrOutput() PublisherPtrOutput
	ToPublisherPtrOutputWithContext(context.Context) PublisherPtrOutput
}

type publisherPtrType PublisherArgs

func PublisherPtr(v *PublisherArgs) PublisherPtrInput {
	return (*publisherPtrType)(v)
}

func (*publisherPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Publisher)(nil)).Elem()
}

func (i *publisherPtrType) ToPublisherPtrOutput() PublisherPtrOutput {
	return i.ToPublisherPtrOutputWithContext(context.Background())
}

func (i *publisherPtrType) ToPublisherPtrOutputWithContext(ctx context.Context) PublisherPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublisherPtrOutput)
}

// Publisher contains information about the publisher of this Note.
type PublisherOutput struct{ *pulumi.OutputState }

func (PublisherOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Publisher)(nil)).Elem()
}

func (o PublisherOutput) ToPublisherOutput() PublisherOutput {
	return o
}

func (o PublisherOutput) ToPublisherOutputWithContext(ctx context.Context) PublisherOutput {
	return o
}

func (o PublisherOutput) ToPublisherPtrOutput() PublisherPtrOutput {
	return o.ToPublisherPtrOutputWithContext(context.Background())
}

func (o PublisherOutput) ToPublisherPtrOutputWithContext(ctx context.Context) PublisherPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Publisher) *Publisher {
		return &v
	}).(PublisherPtrOutput)
}

// Provides information about the authority of the issuing party to release the document, in particular, the party's constituency and responsibilities or other obligations.
func (o PublisherOutput) IssuingAuthority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Publisher) *string { return v.IssuingAuthority }).(pulumi.StringPtrOutput)
}

// Name of the publisher. Examples: 'Google', 'Google Cloud Platform'.
func (o PublisherOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Publisher) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The context or namespace. Contains a URL which is under control of the issuing party and can be used as a globally unique identifier for that issuing party. Example: https://csaf.io
func (o PublisherOutput) PublisherNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Publisher) *string { return v.PublisherNamespace }).(pulumi.StringPtrOutput)
}

type PublisherPtrOutput struct{ *pulumi.OutputState }

func (PublisherPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Publisher)(nil)).Elem()
}

func (o PublisherPtrOutput) ToPublisherPtrOutput() PublisherPtrOutput {
	return o
}

func (o PublisherPtrOutput) ToPublisherPtrOutputWithContext(ctx context.Context) PublisherPtrOutput {
	return o
}

func (o PublisherPtrOutput) Elem() PublisherOutput {
	return o.ApplyT(func(v *Publisher) Publisher {
		if v != nil {
			return *v
		}
		var ret Publisher
		return ret
	}).(PublisherOutput)
}

// Provides information about the authority of the issuing party to release the document, in particular, the party's constituency and responsibilities or other obligations.
func (o PublisherPtrOutput) IssuingAuthority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Publisher) *string {
		if v == nil {
			return nil
		}
		return v.IssuingAuthority
	}).(pulumi.StringPtrOutput)
}

// Name of the publisher. Examples: 'Google', 'Google Cloud Platform'.
func (o PublisherPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Publisher) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The context or namespace. Contains a URL which is under control of the issuing party and can be used as a globally unique identifier for that issuing party. Example: https://csaf.io
func (o PublisherPtrOutput) PublisherNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Publisher) *string {
		if v == nil {
			return nil
		}
		return v.PublisherNamespace
	}).(pulumi.StringPtrOutput)
}

// Publisher contains information about the publisher of this Note.
type PublisherResponse struct {
	// Provides information about the authority of the issuing party to release the document, in particular, the party's constituency and responsibilities or other obligations.
	IssuingAuthority string `pulumi:"issuingAuthority"`
	// Name of the publisher. Examples: 'Google', 'Google Cloud Platform'.
	Name string `pulumi:"name"`
	// The context or namespace. Contains a URL which is under control of the issuing party and can be used as a globally unique identifier for that issuing party. Example: https://csaf.io
	PublisherNamespace string `pulumi:"publisherNamespace"`
}

// Publisher contains information about the publisher of this Note.
type PublisherResponseOutput struct{ *pulumi.OutputState }

func (PublisherResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PublisherResponse)(nil)).Elem()
}

func (o PublisherResponseOutput) ToPublisherResponseOutput() PublisherResponseOutput {
	return o
}

func (o PublisherResponseOutput) ToPublisherResponseOutputWithContext(ctx context.Context) PublisherResponseOutput {
	return o
}

// Provides information about the authority of the issuing party to release the document, in particular, the party's constituency and responsibilities or other obligations.
func (o PublisherResponseOutput) IssuingAuthority() pulumi.StringOutput {
	return o.ApplyT(func(v PublisherResponse) string { return v.IssuingAuthority }).(pulumi.StringOutput)
}

// Name of the publisher. Examples: 'Google', 'Google Cloud Platform'.
func (o PublisherResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PublisherResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The context or namespace. Contains a URL which is under control of the issuing party and can be used as a globally unique identifier for that issuing party. Example: https://csaf.io
func (o PublisherResponseOutput) PublisherNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v PublisherResponse) string { return v.PublisherNamespace }).(pulumi.StringOutput)
}

// Steps taken to build the artifact. For a TaskRun, typically each container corresponds to one step in the recipe.
type Recipe struct {
	// Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were "make", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint.
	Arguments []map[string]interface{} `pulumi:"arguments"`
	// Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were "make", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as zero is default unset value for int64.
	DefinedInMaterial *string `pulumi:"definedInMaterial"`
	// String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were "make", then this would reference the directory in which to run make as well as which target to use.
	EntryPoint *string `pulumi:"entryPoint"`
	// Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy.
	Environment []map[string]interface{} `pulumi:"environment"`
	// URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials.
	Type *string `pulumi:"type"`
}

// RecipeInput is an input type that accepts RecipeArgs and RecipeOutput values.
// You can construct a concrete instance of `RecipeInput` via:
//
//	RecipeArgs{...}
type RecipeInput interface {
	pulumi.Input

	ToRecipeOutput() RecipeOutput
	ToRecipeOutputWithContext(context.Context) RecipeOutput
}

// Steps taken to build the artifact. For a TaskRun, typically each container corresponds to one step in the recipe.
type RecipeArgs struct {
	// Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were "make", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint.
	Arguments pulumi.MapArrayInput `pulumi:"arguments"`
	// Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were "make", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as zero is default unset value for int64.
	DefinedInMaterial pulumi.StringPtrInput `pulumi:"definedInMaterial"`
	// String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were "make", then this would reference the directory in which to run make as well as which target to use.
	EntryPoint pulumi.StringPtrInput `pulumi:"entryPoint"`
	// Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy.
	Environment pulumi.MapArrayInput `pulumi:"environment"`
	// URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (RecipeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Recipe)(nil)).Elem()
}

func (i RecipeArgs) ToRecipeOutput() RecipeOutput {
	return i.ToRecipeOutputWithContext(context.Background())
}

func (i RecipeArgs) ToRecipeOutputWithContext(ctx context.Context) RecipeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecipeOutput)
}

func (i RecipeArgs) ToRecipePtrOutput() RecipePtrOutput {
	return i.ToRecipePtrOutputWithContext(context.Background())
}

func (i RecipeArgs) ToRecipePtrOutputWithContext(ctx context.Context) RecipePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecipeOutput).ToRecipePtrOutputWithContext(ctx)
}

// RecipePtrInput is an input type that accepts RecipeArgs, RecipePtr and RecipePtrOutput values.
// You can construct a concrete instance of `RecipePtrInput` via:
//
//	        RecipeArgs{...}
//
//	or:
//
//	        nil
type RecipePtrInput interface {
	pulumi.Input

	ToRecipePtrOutput() RecipePtrOutput
	ToRecipePtrOutputWithContext(context.Context) RecipePtrOutput
}

type recipePtrType RecipeArgs

func RecipePtr(v *RecipeArgs) RecipePtrInput {
	return (*recipePtrType)(v)
}

func (*recipePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Recipe)(nil)).Elem()
}

func (i *recipePtrType) ToRecipePtrOutput() RecipePtrOutput {
	return i.ToRecipePtrOutputWithContext(context.Background())
}

func (i *recipePtrType) ToRecipePtrOutputWithContext(ctx context.Context) RecipePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecipePtrOutput)
}

// Steps taken to build the artifact. For a TaskRun, typically each container corresponds to one step in the recipe.
type RecipeOutput struct{ *pulumi.OutputState }

func (RecipeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Recipe)(nil)).Elem()
}

func (o RecipeOutput) ToRecipeOutput() RecipeOutput {
	return o
}

func (o RecipeOutput) ToRecipeOutputWithContext(ctx context.Context) RecipeOutput {
	return o
}

func (o RecipeOutput) ToRecipePtrOutput() RecipePtrOutput {
	return o.ToRecipePtrOutputWithContext(context.Background())
}

func (o RecipeOutput) ToRecipePtrOutputWithContext(ctx context.Context) RecipePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Recipe) *Recipe {
		return &v
	}).(RecipePtrOutput)
}

// Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were "make", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint.
func (o RecipeOutput) Arguments() pulumi.MapArrayOutput {
	return o.ApplyT(func(v Recipe) []map[string]interface{} { return v.Arguments }).(pulumi.MapArrayOutput)
}

// Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were "make", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as zero is default unset value for int64.
func (o RecipeOutput) DefinedInMaterial() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Recipe) *string { return v.DefinedInMaterial }).(pulumi.StringPtrOutput)
}

// String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were "make", then this would reference the directory in which to run make as well as which target to use.
func (o RecipeOutput) EntryPoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Recipe) *string { return v.EntryPoint }).(pulumi.StringPtrOutput)
}

// Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy.
func (o RecipeOutput) Environment() pulumi.MapArrayOutput {
	return o.ApplyT(func(v Recipe) []map[string]interface{} { return v.Environment }).(pulumi.MapArrayOutput)
}

// URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials.
func (o RecipeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Recipe) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type RecipePtrOutput struct{ *pulumi.OutputState }

func (RecipePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Recipe)(nil)).Elem()
}

func (o RecipePtrOutput) ToRecipePtrOutput() RecipePtrOutput {
	return o
}

func (o RecipePtrOutput) ToRecipePtrOutputWithContext(ctx context.Context) RecipePtrOutput {
	return o
}

func (o RecipePtrOutput) Elem() RecipeOutput {
	return o.ApplyT(func(v *Recipe) Recipe {
		if v != nil {
			return *v
		}
		var ret Recipe
		return ret
	}).(RecipeOutput)
}

// Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were "make", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint.
func (o RecipePtrOutput) Arguments() pulumi.MapArrayOutput {
	return o.ApplyT(func(v *Recipe) []map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Arguments
	}).(pulumi.MapArrayOutput)
}

// Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were "make", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as zero is default unset value for int64.
func (o RecipePtrOutput) DefinedInMaterial() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Recipe) *string {
		if v == nil {
			return nil
		}
		return v.DefinedInMaterial
	}).(pulumi.StringPtrOutput)
}

// String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were "make", then this would reference the directory in which to run make as well as which target to use.
func (o RecipePtrOutput) EntryPoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Recipe) *string {
		if v == nil {
			return nil
		}
		return v.EntryPoint
	}).(pulumi.StringPtrOutput)
}

// Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy.
func (o RecipePtrOutput) Environment() pulumi.MapArrayOutput {
	return o.ApplyT(func(v *Recipe) []map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Environment
	}).(pulumi.MapArrayOutput)
}

// URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials.
func (o RecipePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Recipe) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Steps taken to build the artifact. For a TaskRun, typically each container corresponds to one step in the recipe.
type RecipeResponse struct {
	// Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were "make", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint.
	Arguments []map[string]interface{} `pulumi:"arguments"`
	// Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were "make", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as zero is default unset value for int64.
	DefinedInMaterial string `pulumi:"definedInMaterial"`
	// String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were "make", then this would reference the directory in which to run make as well as which target to use.
	EntryPoint string `pulumi:"entryPoint"`
	// Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy.
	Environment []map[string]interface{} `pulumi:"environment"`
	// URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials.
	Type string `pulumi:"type"`
}

// Steps taken to build the artifact. For a TaskRun, typically each container corresponds to one step in the recipe.
type RecipeResponseOutput struct{ *pulumi.OutputState }

func (RecipeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecipeResponse)(nil)).Elem()
}

func (o RecipeResponseOutput) ToRecipeResponseOutput() RecipeResponseOutput {
	return o
}

func (o RecipeResponseOutput) ToRecipeResponseOutputWithContext(ctx context.Context) RecipeResponseOutput {
	return o
}

// Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were "make", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint.
func (o RecipeResponseOutput) Arguments() pulumi.MapArrayOutput {
	return o.ApplyT(func(v RecipeResponse) []map[string]interface{} { return v.Arguments }).(pulumi.MapArrayOutput)
}

// Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were "make", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as zero is default unset value for int64.
func (o RecipeResponseOutput) DefinedInMaterial() pulumi.StringOutput {
	return o.ApplyT(func(v RecipeResponse) string { return v.DefinedInMaterial }).(pulumi.StringOutput)
}

// String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were "make", then this would reference the directory in which to run make as well as which target to use.
func (o RecipeResponseOutput) EntryPoint() pulumi.StringOutput {
	return o.ApplyT(func(v RecipeResponse) string { return v.EntryPoint }).(pulumi.StringOutput)
}

// Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy.
func (o RecipeResponseOutput) Environment() pulumi.MapArrayOutput {
	return o.ApplyT(func(v RecipeResponse) []map[string]interface{} { return v.Environment }).(pulumi.MapArrayOutput)
}

// URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials.
func (o RecipeResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RecipeResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Metadata for any related URL information
type RelatedUrl struct {
	// Label to describe usage of the URL
	Label *string `pulumi:"label"`
	// Specific URL to associate with the note
	Url *string `pulumi:"url"`
}

// RelatedUrlInput is an input type that accepts RelatedUrlArgs and RelatedUrlOutput values.
// You can construct a concrete instance of `RelatedUrlInput` via:
//
//	RelatedUrlArgs{...}
type RelatedUrlInput interface {
	pulumi.Input

	ToRelatedUrlOutput() RelatedUrlOutput
	ToRelatedUrlOutputWithContext(context.Context) RelatedUrlOutput
}

// Metadata for any related URL information
type RelatedUrlArgs struct {
	// Label to describe usage of the URL
	Label pulumi.StringPtrInput `pulumi:"label"`
	// Specific URL to associate with the note
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (RelatedUrlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RelatedUrl)(nil)).Elem()
}

func (i RelatedUrlArgs) ToRelatedUrlOutput() RelatedUrlOutput {
	return i.ToRelatedUrlOutputWithContext(context.Background())
}

func (i RelatedUrlArgs) ToRelatedUrlOutputWithContext(ctx context.Context) RelatedUrlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelatedUrlOutput)
}

// RelatedUrlArrayInput is an input type that accepts RelatedUrlArray and RelatedUrlArrayOutput values.
// You can construct a concrete instance of `RelatedUrlArrayInput` via:
//
//	RelatedUrlArray{ RelatedUrlArgs{...} }
type RelatedUrlArrayInput interface {
	pulumi.Input

	ToRelatedUrlArrayOutput() RelatedUrlArrayOutput
	ToRelatedUrlArrayOutputWithContext(context.Context) RelatedUrlArrayOutput
}

type RelatedUrlArray []RelatedUrlInput

func (RelatedUrlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RelatedUrl)(nil)).Elem()
}

func (i RelatedUrlArray) ToRelatedUrlArrayOutput() RelatedUrlArrayOutput {
	return i.ToRelatedUrlArrayOutputWithContext(context.Background())
}

func (i RelatedUrlArray) ToRelatedUrlArrayOutputWithContext(ctx context.Context) RelatedUrlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelatedUrlArrayOutput)
}

// Metadata for any related URL information
type RelatedUrlOutput struct{ *pulumi.OutputState }

func (RelatedUrlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RelatedUrl)(nil)).Elem()
}

func (o RelatedUrlOutput) ToRelatedUrlOutput() RelatedUrlOutput {
	return o
}

func (o RelatedUrlOutput) ToRelatedUrlOutputWithContext(ctx context.Context) RelatedUrlOutput {
	return o
}

// Label to describe usage of the URL
func (o RelatedUrlOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RelatedUrl) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// Specific URL to associate with the note
func (o RelatedUrlOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RelatedUrl) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type RelatedUrlArrayOutput struct{ *pulumi.OutputState }

func (RelatedUrlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RelatedUrl)(nil)).Elem()
}

func (o RelatedUrlArrayOutput) ToRelatedUrlArrayOutput() RelatedUrlArrayOutput {
	return o
}

func (o RelatedUrlArrayOutput) ToRelatedUrlArrayOutputWithContext(ctx context.Context) RelatedUrlArrayOutput {
	return o
}

func (o RelatedUrlArrayOutput) Index(i pulumi.IntInput) RelatedUrlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RelatedUrl {
		return vs[0].([]RelatedUrl)[vs[1].(int)]
	}).(RelatedUrlOutput)
}

// Metadata for any related URL information
type RelatedUrlResponse struct {
	// Label to describe usage of the URL
	Label string `pulumi:"label"`
	// Specific URL to associate with the note
	Url string `pulumi:"url"`
}

// Metadata for any related URL information
type RelatedUrlResponseOutput struct{ *pulumi.OutputState }

func (RelatedUrlResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RelatedUrlResponse)(nil)).Elem()
}

func (o RelatedUrlResponseOutput) ToRelatedUrlResponseOutput() RelatedUrlResponseOutput {
	return o
}

func (o RelatedUrlResponseOutput) ToRelatedUrlResponseOutputWithContext(ctx context.Context) RelatedUrlResponseOutput {
	return o
}

// Label to describe usage of the URL
func (o RelatedUrlResponseOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v RelatedUrlResponse) string { return v.Label }).(pulumi.StringOutput)
}

// Specific URL to associate with the note
func (o RelatedUrlResponseOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v RelatedUrlResponse) string { return v.Url }).(pulumi.StringOutput)
}

type RelatedUrlResponseArrayOutput struct{ *pulumi.OutputState }

func (RelatedUrlResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RelatedUrlResponse)(nil)).Elem()
}

func (o RelatedUrlResponseArrayOutput) ToRelatedUrlResponseArrayOutput() RelatedUrlResponseArrayOutput {
	return o
}

func (o RelatedUrlResponseArrayOutput) ToRelatedUrlResponseArrayOutputWithContext(ctx context.Context) RelatedUrlResponseArrayOutput {
	return o
}

func (o RelatedUrlResponseArrayOutput) Index(i pulumi.IntInput) RelatedUrlResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RelatedUrlResponse {
		return vs[0].([]RelatedUrlResponse)[vs[1].(int)]
	}).(RelatedUrlResponseOutput)
}

// RelationshipNote represents an SPDX Relationship section: https://spdx.github.io/spdx-spec/7-relationships-between-SPDX-elements/
type RelationshipNote struct {
	// The type of relationship between the source and target SPDX elements
	Type *RelationshipNoteType `pulumi:"type"`
}

// RelationshipNoteInput is an input type that accepts RelationshipNoteArgs and RelationshipNoteOutput values.
// You can construct a concrete instance of `RelationshipNoteInput` via:
//
//	RelationshipNoteArgs{...}
type RelationshipNoteInput interface {
	pulumi.Input

	ToRelationshipNoteOutput() RelationshipNoteOutput
	ToRelationshipNoteOutputWithContext(context.Context) RelationshipNoteOutput
}

// RelationshipNote represents an SPDX Relationship section: https://spdx.github.io/spdx-spec/7-relationships-between-SPDX-elements/
type RelationshipNoteArgs struct {
	// The type of relationship between the source and target SPDX elements
	Type RelationshipNoteTypePtrInput `pulumi:"type"`
}

func (RelationshipNoteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RelationshipNote)(nil)).Elem()
}

func (i RelationshipNoteArgs) ToRelationshipNoteOutput() RelationshipNoteOutput {
	return i.ToRelationshipNoteOutputWithContext(context.Background())
}

func (i RelationshipNoteArgs) ToRelationshipNoteOutputWithContext(ctx context.Context) RelationshipNoteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelationshipNoteOutput)
}

func (i RelationshipNoteArgs) ToRelationshipNotePtrOutput() RelationshipNotePtrOutput {
	return i.ToRelationshipNotePtrOutputWithContext(context.Background())
}

func (i RelationshipNoteArgs) ToRelationshipNotePtrOutputWithContext(ctx context.Context) RelationshipNotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelationshipNoteOutput).ToRelationshipNotePtrOutputWithContext(ctx)
}

// RelationshipNotePtrInput is an input type that accepts RelationshipNoteArgs, RelationshipNotePtr and RelationshipNotePtrOutput values.
// You can construct a concrete instance of `RelationshipNotePtrInput` via:
//
//	        RelationshipNoteArgs{...}
//
//	or:
//
//	        nil
type RelationshipNotePtrInput interface {
	pulumi.Input

	ToRelationshipNotePtrOutput() RelationshipNotePtrOutput
	ToRelationshipNotePtrOutputWithContext(context.Context) RelationshipNotePtrOutput
}

type relationshipNotePtrType RelationshipNoteArgs

func RelationshipNotePtr(v *RelationshipNoteArgs) RelationshipNotePtrInput {
	return (*relationshipNotePtrType)(v)
}

func (*relationshipNotePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RelationshipNote)(nil)).Elem()
}

func (i *relationshipNotePtrType) ToRelationshipNotePtrOutput() RelationshipNotePtrOutput {
	return i.ToRelationshipNotePtrOutputWithContext(context.Background())
}

func (i *relationshipNotePtrType) ToRelationshipNotePtrOutputWithContext(ctx context.Context) RelationshipNotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelationshipNotePtrOutput)
}

// RelationshipNote represents an SPDX Relationship section: https://spdx.github.io/spdx-spec/7-relationships-between-SPDX-elements/
type RelationshipNoteOutput struct{ *pulumi.OutputState }

func (RelationshipNoteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RelationshipNote)(nil)).Elem()
}

func (o RelationshipNoteOutput) ToRelationshipNoteOutput() RelationshipNoteOutput {
	return o
}

func (o RelationshipNoteOutput) ToRelationshipNoteOutputWithContext(ctx context.Context) RelationshipNoteOutput {
	return o
}

func (o RelationshipNoteOutput) ToRelationshipNotePtrOutput() RelationshipNotePtrOutput {
	return o.ToRelationshipNotePtrOutputWithContext(context.Background())
}

func (o RelationshipNoteOutput) ToRelationshipNotePtrOutputWithContext(ctx context.Context) RelationshipNotePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RelationshipNote) *RelationshipNote {
		return &v
	}).(RelationshipNotePtrOutput)
}

// The type of relationship between the source and target SPDX elements
func (o RelationshipNoteOutput) Type() RelationshipNoteTypePtrOutput {
	return o.ApplyT(func(v RelationshipNote) *RelationshipNoteType { return v.Type }).(RelationshipNoteTypePtrOutput)
}

type RelationshipNotePtrOutput struct{ *pulumi.OutputState }

func (RelationshipNotePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RelationshipNote)(nil)).Elem()
}

func (o RelationshipNotePtrOutput) ToRelationshipNotePtrOutput() RelationshipNotePtrOutput {
	return o
}

func (o RelationshipNotePtrOutput) ToRelationshipNotePtrOutputWithContext(ctx context.Context) RelationshipNotePtrOutput {
	return o
}

func (o RelationshipNotePtrOutput) Elem() RelationshipNoteOutput {
	return o.ApplyT(func(v *RelationshipNote) RelationshipNote {
		if v != nil {
			return *v
		}
		var ret RelationshipNote
		return ret
	}).(RelationshipNoteOutput)
}

// The type of relationship between the source and target SPDX elements
func (o RelationshipNotePtrOutput) Type() RelationshipNoteTypePtrOutput {
	return o.ApplyT(func(v *RelationshipNote) *RelationshipNoteType {
		if v == nil {
			return nil
		}
		return v.Type
	}).(RelationshipNoteTypePtrOutput)
}

// RelationshipNote represents an SPDX Relationship section: https://spdx.github.io/spdx-spec/7-relationships-between-SPDX-elements/
type RelationshipNoteResponse struct {
	// The type of relationship between the source and target SPDX elements
	Type string `pulumi:"type"`
}

// RelationshipNote represents an SPDX Relationship section: https://spdx.github.io/spdx-spec/7-relationships-between-SPDX-elements/
type RelationshipNoteResponseOutput struct{ *pulumi.OutputState }

func (RelationshipNoteResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RelationshipNoteResponse)(nil)).Elem()
}

func (o RelationshipNoteResponseOutput) ToRelationshipNoteResponseOutput() RelationshipNoteResponseOutput {
	return o
}

func (o RelationshipNoteResponseOutput) ToRelationshipNoteResponseOutputWithContext(ctx context.Context) RelationshipNoteResponseOutput {
	return o
}

// The type of relationship between the source and target SPDX elements
func (o RelationshipNoteResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RelationshipNoteResponse) string { return v.Type }).(pulumi.StringOutput)
}

// RelationshipOccurrence represents an SPDX Relationship section: https://spdx.github.io/spdx-spec/7-relationships-between-SPDX-elements/
type RelationshipOccurrence struct {
	// A place for the SPDX file creator to record any general comments about the relationship
	Comment *string `pulumi:"comment"`
	// Also referred to as SPDXRef-A The source SPDX element (file, package, etc)
	Source *string `pulumi:"source"`
	// Also referred to as SPDXRef-B The target SPDC element (file, package, etc) In cases where there are "known unknowns", the use of the keyword NOASSERTION can be used The keywords NONE can be used to indicate that an SPDX element (package/file/snippet) has no other elements connected by some relationship to it
	Target *string `pulumi:"target"`
}

// RelationshipOccurrenceInput is an input type that accepts RelationshipOccurrenceArgs and RelationshipOccurrenceOutput values.
// You can construct a concrete instance of `RelationshipOccurrenceInput` via:
//
//	RelationshipOccurrenceArgs{...}
type RelationshipOccurrenceInput interface {
	pulumi.Input

	ToRelationshipOccurrenceOutput() RelationshipOccurrenceOutput
	ToRelationshipOccurrenceOutputWithContext(context.Context) RelationshipOccurrenceOutput
}

// RelationshipOccurrence represents an SPDX Relationship section: https://spdx.github.io/spdx-spec/7-relationships-between-SPDX-elements/
type RelationshipOccurrenceArgs struct {
	// A place for the SPDX file creator to record any general comments about the relationship
	Comment pulumi.StringPtrInput `pulumi:"comment"`
	// Also referred to as SPDXRef-A The source SPDX element (file, package, etc)
	Source pulumi.StringPtrInput `pulumi:"source"`
	// Also referred to as SPDXRef-B The target SPDC element (file, package, etc) In cases where there are "known unknowns", the use of the keyword NOASSERTION can be used The keywords NONE can be used to indicate that an SPDX element (package/file/snippet) has no other elements connected by some relationship to it
	Target pulumi.StringPtrInput `pulumi:"target"`
}

func (RelationshipOccurrenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RelationshipOccurrence)(nil)).Elem()
}

func (i RelationshipOccurrenceArgs) ToRelationshipOccurrenceOutput() RelationshipOccurrenceOutput {
	return i.ToRelationshipOccurrenceOutputWithContext(context.Background())
}

func (i RelationshipOccurrenceArgs) ToRelationshipOccurrenceOutputWithContext(ctx context.Context) RelationshipOccurrenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelationshipOccurrenceOutput)
}

func (i RelationshipOccurrenceArgs) ToRelationshipOccurrencePtrOutput() RelationshipOccurrencePtrOutput {
	return i.ToRelationshipOccurrencePtrOutputWithContext(context.Background())
}

func (i RelationshipOccurrenceArgs) ToRelationshipOccurrencePtrOutputWithContext(ctx context.Context) RelationshipOccurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelationshipOccurrenceOutput).ToRelationshipOccurrencePtrOutputWithContext(ctx)
}

// RelationshipOccurrencePtrInput is an input type that accepts RelationshipOccurrenceArgs, RelationshipOccurrencePtr and RelationshipOccurrencePtrOutput values.
// You can construct a concrete instance of `RelationshipOccurrencePtrInput` via:
//
//	        RelationshipOccurrenceArgs{...}
//
//	or:
//
//	        nil
type RelationshipOccurrencePtrInput interface {
	pulumi.Input

	ToRelationshipOccurrencePtrOutput() RelationshipOccurrencePtrOutput
	ToRelationshipOccurrencePtrOutputWithContext(context.Context) RelationshipOccurrencePtrOutput
}

type relationshipOccurrencePtrType RelationshipOccurrenceArgs

func RelationshipOccurrencePtr(v *RelationshipOccurrenceArgs) RelationshipOccurrencePtrInput {
	return (*relationshipOccurrencePtrType)(v)
}

func (*relationshipOccurrencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RelationshipOccurrence)(nil)).Elem()
}

func (i *relationshipOccurrencePtrType) ToRelationshipOccurrencePtrOutput() RelationshipOccurrencePtrOutput {
	return i.ToRelationshipOccurrencePtrOutputWithContext(context.Background())
}

func (i *relationshipOccurrencePtrType) ToRelationshipOccurrencePtrOutputWithContext(ctx context.Context) RelationshipOccurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelationshipOccurrencePtrOutput)
}

// RelationshipOccurrence represents an SPDX Relationship section: https://spdx.github.io/spdx-spec/7-relationships-between-SPDX-elements/
type RelationshipOccurrenceOutput struct{ *pulumi.OutputState }

func (RelationshipOccurrenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RelationshipOccurrence)(nil)).Elem()
}

func (o RelationshipOccurrenceOutput) ToRelationshipOccurrenceOutput() RelationshipOccurrenceOutput {
	return o
}

func (o RelationshipOccurrenceOutput) ToRelationshipOccurrenceOutputWithContext(ctx context.Context) RelationshipOccurrenceOutput {
	return o
}

func (o RelationshipOccurrenceOutput) ToRelationshipOccurrencePtrOutput() RelationshipOccurrencePtrOutput {
	return o.ToRelationshipOccurrencePtrOutputWithContext(context.Background())
}

func (o RelationshipOccurrenceOutput) ToRelationshipOccurrencePtrOutputWithContext(ctx context.Context) RelationshipOccurrencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RelationshipOccurrence) *RelationshipOccurrence {
		return &v
	}).(RelationshipOccurrencePtrOutput)
}

// A place for the SPDX file creator to record any general comments about the relationship
func (o RelationshipOccurrenceOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RelationshipOccurrence) *string { return v.Comment }).(pulumi.StringPtrOutput)
}

// Also referred to as SPDXRef-A The source SPDX element (file, package, etc)
func (o RelationshipOccurrenceOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RelationshipOccurrence) *string { return v.Source }).(pulumi.StringPtrOutput)
}

// Also referred to as SPDXRef-B The target SPDC element (file, package, etc) In cases where there are "known unknowns", the use of the keyword NOASSERTION can be used The keywords NONE can be used to indicate that an SPDX element (package/file/snippet) has no other elements connected by some relationship to it
func (o RelationshipOccurrenceOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RelationshipOccurrence) *string { return v.Target }).(pulumi.StringPtrOutput)
}

type RelationshipOccurrencePtrOutput struct{ *pulumi.OutputState }

func (RelationshipOccurrencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RelationshipOccurrence)(nil)).Elem()
}

func (o RelationshipOccurrencePtrOutput) ToRelationshipOccurrencePtrOutput() RelationshipOccurrencePtrOutput {
	return o
}

func (o RelationshipOccurrencePtrOutput) ToRelationshipOccurrencePtrOutputWithContext(ctx context.Context) RelationshipOccurrencePtrOutput {
	return o
}

func (o RelationshipOccurrencePtrOutput) Elem() RelationshipOccurrenceOutput {
	return o.ApplyT(func(v *RelationshipOccurrence) RelationshipOccurrence {
		if v != nil {
			return *v
		}
		var ret RelationshipOccurrence
		return ret
	}).(RelationshipOccurrenceOutput)
}

// A place for the SPDX file creator to record any general comments about the relationship
func (o RelationshipOccurrencePtrOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RelationshipOccurrence) *string {
		if v == nil {
			return nil
		}
		return v.Comment
	}).(pulumi.StringPtrOutput)
}

// Also referred to as SPDXRef-A The source SPDX element (file, package, etc)
func (o RelationshipOccurrencePtrOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RelationshipOccurrence) *string {
		if v == nil {
			return nil
		}
		return v.Source
	}).(pulumi.StringPtrOutput)
}

// Also referred to as SPDXRef-B The target SPDC element (file, package, etc) In cases where there are "known unknowns", the use of the keyword NOASSERTION can be used The keywords NONE can be used to indicate that an SPDX element (package/file/snippet) has no other elements connected by some relationship to it
func (o RelationshipOccurrencePtrOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RelationshipOccurrence) *string {
		if v == nil {
			return nil
		}
		return v.Target
	}).(pulumi.StringPtrOutput)
}

// RelationshipOccurrence represents an SPDX Relationship section: https://spdx.github.io/spdx-spec/7-relationships-between-SPDX-elements/
type RelationshipOccurrenceResponse struct {
	// A place for the SPDX file creator to record any general comments about the relationship
	Comment string `pulumi:"comment"`
	// Also referred to as SPDXRef-A The source SPDX element (file, package, etc)
	Source string `pulumi:"source"`
	// Also referred to as SPDXRef-B The target SPDC element (file, package, etc) In cases where there are "known unknowns", the use of the keyword NOASSERTION can be used The keywords NONE can be used to indicate that an SPDX element (package/file/snippet) has no other elements connected by some relationship to it
	Target string `pulumi:"target"`
	// The type of relationship between the source and target SPDX elements
	Type string `pulumi:"type"`
}

// RelationshipOccurrence represents an SPDX Relationship section: https://spdx.github.io/spdx-spec/7-relationships-between-SPDX-elements/
type RelationshipOccurrenceResponseOutput struct{ *pulumi.OutputState }

func (RelationshipOccurrenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RelationshipOccurrenceResponse)(nil)).Elem()
}

func (o RelationshipOccurrenceResponseOutput) ToRelationshipOccurrenceResponseOutput() RelationshipOccurrenceResponseOutput {
	return o
}

func (o RelationshipOccurrenceResponseOutput) ToRelationshipOccurrenceResponseOutputWithContext(ctx context.Context) RelationshipOccurrenceResponseOutput {
	return o
}

// A place for the SPDX file creator to record any general comments about the relationship
func (o RelationshipOccurrenceResponseOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v RelationshipOccurrenceResponse) string { return v.Comment }).(pulumi.StringOutput)
}

// Also referred to as SPDXRef-A The source SPDX element (file, package, etc)
func (o RelationshipOccurrenceResponseOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v RelationshipOccurrenceResponse) string { return v.Source }).(pulumi.StringOutput)
}

// Also referred to as SPDXRef-B The target SPDC element (file, package, etc) In cases where there are "known unknowns", the use of the keyword NOASSERTION can be used The keywords NONE can be used to indicate that an SPDX element (package/file/snippet) has no other elements connected by some relationship to it
func (o RelationshipOccurrenceResponseOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v RelationshipOccurrenceResponse) string { return v.Target }).(pulumi.StringOutput)
}

// The type of relationship between the source and target SPDX elements
func (o RelationshipOccurrenceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RelationshipOccurrenceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies details on how to handle (and presumably, fix) a vulnerability.
type Remediation struct {
	// Contains a comprehensive human-readable discussion of the remediation.
	Details *string `pulumi:"details"`
	// The type of remediation that can be applied.
	RemediationType *RemediationRemediationType `pulumi:"remediationType"`
	// Contains the URL where to obtain the remediation.
	RemediationUri *URI `pulumi:"remediationUri"`
}

// RemediationInput is an input type that accepts RemediationArgs and RemediationOutput values.
// You can construct a concrete instance of `RemediationInput` via:
//
//	RemediationArgs{...}
type RemediationInput interface {
	pulumi.Input

	ToRemediationOutput() RemediationOutput
	ToRemediationOutputWithContext(context.Context) RemediationOutput
}

// Specifies details on how to handle (and presumably, fix) a vulnerability.
type RemediationArgs struct {
	// Contains a comprehensive human-readable discussion of the remediation.
	Details pulumi.StringPtrInput `pulumi:"details"`
	// The type of remediation that can be applied.
	RemediationType RemediationRemediationTypePtrInput `pulumi:"remediationType"`
	// Contains the URL where to obtain the remediation.
	RemediationUri URIPtrInput `pulumi:"remediationUri"`
}

func (RemediationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Remediation)(nil)).Elem()
}

func (i RemediationArgs) ToRemediationOutput() RemediationOutput {
	return i.ToRemediationOutputWithContext(context.Background())
}

func (i RemediationArgs) ToRemediationOutputWithContext(ctx context.Context) RemediationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemediationOutput)
}

// RemediationArrayInput is an input type that accepts RemediationArray and RemediationArrayOutput values.
// You can construct a concrete instance of `RemediationArrayInput` via:
//
//	RemediationArray{ RemediationArgs{...} }
type RemediationArrayInput interface {
	pulumi.Input

	ToRemediationArrayOutput() RemediationArrayOutput
	ToRemediationArrayOutputWithContext(context.Context) RemediationArrayOutput
}

type RemediationArray []RemediationInput

func (RemediationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Remediation)(nil)).Elem()
}

func (i RemediationArray) ToRemediationArrayOutput() RemediationArrayOutput {
	return i.ToRemediationArrayOutputWithContext(context.Background())
}

func (i RemediationArray) ToRemediationArrayOutputWithContext(ctx context.Context) RemediationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemediationArrayOutput)
}

// Specifies details on how to handle (and presumably, fix) a vulnerability.
type RemediationOutput struct{ *pulumi.OutputState }

func (RemediationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Remediation)(nil)).Elem()
}

func (o RemediationOutput) ToRemediationOutput() RemediationOutput {
	return o
}

func (o RemediationOutput) ToRemediationOutputWithContext(ctx context.Context) RemediationOutput {
	return o
}

// Contains a comprehensive human-readable discussion of the remediation.
func (o RemediationOutput) Details() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Remediation) *string { return v.Details }).(pulumi.StringPtrOutput)
}

// The type of remediation that can be applied.
func (o RemediationOutput) RemediationType() RemediationRemediationTypePtrOutput {
	return o.ApplyT(func(v Remediation) *RemediationRemediationType { return v.RemediationType }).(RemediationRemediationTypePtrOutput)
}

// Contains the URL where to obtain the remediation.
func (o RemediationOutput) RemediationUri() URIPtrOutput {
	return o.ApplyT(func(v Remediation) *URI { return v.RemediationUri }).(URIPtrOutput)
}

type RemediationArrayOutput struct{ *pulumi.OutputState }

func (RemediationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Remediation)(nil)).Elem()
}

func (o RemediationArrayOutput) ToRemediationArrayOutput() RemediationArrayOutput {
	return o
}

func (o RemediationArrayOutput) ToRemediationArrayOutputWithContext(ctx context.Context) RemediationArrayOutput {
	return o
}

func (o RemediationArrayOutput) Index(i pulumi.IntInput) RemediationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Remediation {
		return vs[0].([]Remediation)[vs[1].(int)]
	}).(RemediationOutput)
}

// Specifies details on how to handle (and presumably, fix) a vulnerability.
type RemediationResponse struct {
	// Contains a comprehensive human-readable discussion of the remediation.
	Details string `pulumi:"details"`
	// The type of remediation that can be applied.
	RemediationType string `pulumi:"remediationType"`
	// Contains the URL where to obtain the remediation.
	RemediationUri URIResponse `pulumi:"remediationUri"`
}

// Specifies details on how to handle (and presumably, fix) a vulnerability.
type RemediationResponseOutput struct{ *pulumi.OutputState }

func (RemediationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemediationResponse)(nil)).Elem()
}

func (o RemediationResponseOutput) ToRemediationResponseOutput() RemediationResponseOutput {
	return o
}

func (o RemediationResponseOutput) ToRemediationResponseOutputWithContext(ctx context.Context) RemediationResponseOutput {
	return o
}

// Contains a comprehensive human-readable discussion of the remediation.
func (o RemediationResponseOutput) Details() pulumi.StringOutput {
	return o.ApplyT(func(v RemediationResponse) string { return v.Details }).(pulumi.StringOutput)
}

// The type of remediation that can be applied.
func (o RemediationResponseOutput) RemediationType() pulumi.StringOutput {
	return o.ApplyT(func(v RemediationResponse) string { return v.RemediationType }).(pulumi.StringOutput)
}

// Contains the URL where to obtain the remediation.
func (o RemediationResponseOutput) RemediationUri() URIResponseOutput {
	return o.ApplyT(func(v RemediationResponse) URIResponse { return v.RemediationUri }).(URIResponseOutput)
}

type RemediationResponseArrayOutput struct{ *pulumi.OutputState }

func (RemediationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RemediationResponse)(nil)).Elem()
}

func (o RemediationResponseArrayOutput) ToRemediationResponseArrayOutput() RemediationResponseArrayOutput {
	return o
}

func (o RemediationResponseArrayOutput) ToRemediationResponseArrayOutputWithContext(ctx context.Context) RemediationResponseArrayOutput {
	return o
}

func (o RemediationResponseArrayOutput) Index(i pulumi.IntInput) RemediationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RemediationResponse {
		return vs[0].([]RemediationResponse)[vs[1].(int)]
	}).(RemediationResponseOutput)
}

// RepoSource describes the location of the source in a Google Cloud Source Repository.
type RepoSource struct {
	// Name of the branch to build.
	BranchName *string `pulumi:"branchName"`
	// Explicit commit SHA to build.
	CommitSha *string `pulumi:"commitSha"`
	// ID of the project that owns the repo.
	Project *string `pulumi:"project"`
	// Name of the repo.
	RepoName *string `pulumi:"repoName"`
	// Name of the tag to build.
	TagName *string `pulumi:"tagName"`
}

// RepoSourceInput is an input type that accepts RepoSourceArgs and RepoSourceOutput values.
// You can construct a concrete instance of `RepoSourceInput` via:
//
//	RepoSourceArgs{...}
type RepoSourceInput interface {
	pulumi.Input

	ToRepoSourceOutput() RepoSourceOutput
	ToRepoSourceOutputWithContext(context.Context) RepoSourceOutput
}

// RepoSource describes the location of the source in a Google Cloud Source Repository.
type RepoSourceArgs struct {
	// Name of the branch to build.
	BranchName pulumi.StringPtrInput `pulumi:"branchName"`
	// Explicit commit SHA to build.
	CommitSha pulumi.StringPtrInput `pulumi:"commitSha"`
	// ID of the project that owns the repo.
	Project pulumi.StringPtrInput `pulumi:"project"`
	// Name of the repo.
	RepoName pulumi.StringPtrInput `pulumi:"repoName"`
	// Name of the tag to build.
	TagName pulumi.StringPtrInput `pulumi:"tagName"`
}

func (RepoSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepoSource)(nil)).Elem()
}

func (i RepoSourceArgs) ToRepoSourceOutput() RepoSourceOutput {
	return i.ToRepoSourceOutputWithContext(context.Background())
}

func (i RepoSourceArgs) ToRepoSourceOutputWithContext(ctx context.Context) RepoSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepoSourceOutput)
}

func (i RepoSourceArgs) ToRepoSourcePtrOutput() RepoSourcePtrOutput {
	return i.ToRepoSourcePtrOutputWithContext(context.Background())
}

func (i RepoSourceArgs) ToRepoSourcePtrOutputWithContext(ctx context.Context) RepoSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepoSourceOutput).ToRepoSourcePtrOutputWithContext(ctx)
}

// RepoSourcePtrInput is an input type that accepts RepoSourceArgs, RepoSourcePtr and RepoSourcePtrOutput values.
// You can construct a concrete instance of `RepoSourcePtrInput` via:
//
//	        RepoSourceArgs{...}
//
//	or:
//
//	        nil
type RepoSourcePtrInput interface {
	pulumi.Input

	ToRepoSourcePtrOutput() RepoSourcePtrOutput
	ToRepoSourcePtrOutputWithContext(context.Context) RepoSourcePtrOutput
}

type repoSourcePtrType RepoSourceArgs

func RepoSourcePtr(v *RepoSourceArgs) RepoSourcePtrInput {
	return (*repoSourcePtrType)(v)
}

func (*repoSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepoSource)(nil)).Elem()
}

func (i *repoSourcePtrType) ToRepoSourcePtrOutput() RepoSourcePtrOutput {
	return i.ToRepoSourcePtrOutputWithContext(context.Background())
}

func (i *repoSourcePtrType) ToRepoSourcePtrOutputWithContext(ctx context.Context) RepoSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepoSourcePtrOutput)
}

// RepoSource describes the location of the source in a Google Cloud Source Repository.
type RepoSourceOutput struct{ *pulumi.OutputState }

func (RepoSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepoSource)(nil)).Elem()
}

func (o RepoSourceOutput) ToRepoSourceOutput() RepoSourceOutput {
	return o
}

func (o RepoSourceOutput) ToRepoSourceOutputWithContext(ctx context.Context) RepoSourceOutput {
	return o
}

func (o RepoSourceOutput) ToRepoSourcePtrOutput() RepoSourcePtrOutput {
	return o.ToRepoSourcePtrOutputWithContext(context.Background())
}

func (o RepoSourceOutput) ToRepoSourcePtrOutputWithContext(ctx context.Context) RepoSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepoSource) *RepoSource {
		return &v
	}).(RepoSourcePtrOutput)
}

// Name of the branch to build.
func (o RepoSourceOutput) BranchName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepoSource) *string { return v.BranchName }).(pulumi.StringPtrOutput)
}

// Explicit commit SHA to build.
func (o RepoSourceOutput) CommitSha() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepoSource) *string { return v.CommitSha }).(pulumi.StringPtrOutput)
}

// ID of the project that owns the repo.
func (o RepoSourceOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepoSource) *string { return v.Project }).(pulumi.StringPtrOutput)
}

// Name of the repo.
func (o RepoSourceOutput) RepoName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepoSource) *string { return v.RepoName }).(pulumi.StringPtrOutput)
}

// Name of the tag to build.
func (o RepoSourceOutput) TagName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepoSource) *string { return v.TagName }).(pulumi.StringPtrOutput)
}

type RepoSourcePtrOutput struct{ *pulumi.OutputState }

func (RepoSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepoSource)(nil)).Elem()
}

func (o RepoSourcePtrOutput) ToRepoSourcePtrOutput() RepoSourcePtrOutput {
	return o
}

func (o RepoSourcePtrOutput) ToRepoSourcePtrOutputWithContext(ctx context.Context) RepoSourcePtrOutput {
	return o
}

func (o RepoSourcePtrOutput) Elem() RepoSourceOutput {
	return o.ApplyT(func(v *RepoSource) RepoSource {
		if v != nil {
			return *v
		}
		var ret RepoSource
		return ret
	}).(RepoSourceOutput)
}

// Name of the branch to build.
func (o RepoSourcePtrOutput) BranchName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepoSource) *string {
		if v == nil {
			return nil
		}
		return v.BranchName
	}).(pulumi.StringPtrOutput)
}

// Explicit commit SHA to build.
func (o RepoSourcePtrOutput) CommitSha() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepoSource) *string {
		if v == nil {
			return nil
		}
		return v.CommitSha
	}).(pulumi.StringPtrOutput)
}

// ID of the project that owns the repo.
func (o RepoSourcePtrOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepoSource) *string {
		if v == nil {
			return nil
		}
		return v.Project
	}).(pulumi.StringPtrOutput)
}

// Name of the repo.
func (o RepoSourcePtrOutput) RepoName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepoSource) *string {
		if v == nil {
			return nil
		}
		return v.RepoName
	}).(pulumi.StringPtrOutput)
}

// Name of the tag to build.
func (o RepoSourcePtrOutput) TagName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepoSource) *string {
		if v == nil {
			return nil
		}
		return v.TagName
	}).(pulumi.StringPtrOutput)
}

// RepoSource describes the location of the source in a Google Cloud Source Repository.
type RepoSourceResponse struct {
	// Name of the branch to build.
	BranchName string `pulumi:"branchName"`
	// Explicit commit SHA to build.
	CommitSha string `pulumi:"commitSha"`
	// ID of the project that owns the repo.
	Project string `pulumi:"project"`
	// Name of the repo.
	RepoName string `pulumi:"repoName"`
	// Name of the tag to build.
	TagName string `pulumi:"tagName"`
}

// RepoSource describes the location of the source in a Google Cloud Source Repository.
type RepoSourceResponseOutput struct{ *pulumi.OutputState }

func (RepoSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepoSourceResponse)(nil)).Elem()
}

func (o RepoSourceResponseOutput) ToRepoSourceResponseOutput() RepoSourceResponseOutput {
	return o
}

func (o RepoSourceResponseOutput) ToRepoSourceResponseOutputWithContext(ctx context.Context) RepoSourceResponseOutput {
	return o
}

// Name of the branch to build.
func (o RepoSourceResponseOutput) BranchName() pulumi.StringOutput {
	return o.ApplyT(func(v RepoSourceResponse) string { return v.BranchName }).(pulumi.StringOutput)
}

// Explicit commit SHA to build.
func (o RepoSourceResponseOutput) CommitSha() pulumi.StringOutput {
	return o.ApplyT(func(v RepoSourceResponse) string { return v.CommitSha }).(pulumi.StringOutput)
}

// ID of the project that owns the repo.
func (o RepoSourceResponseOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v RepoSourceResponse) string { return v.Project }).(pulumi.StringOutput)
}

// Name of the repo.
func (o RepoSourceResponseOutput) RepoName() pulumi.StringOutput {
	return o.ApplyT(func(v RepoSourceResponse) string { return v.RepoName }).(pulumi.StringOutput)
}

// Name of the tag to build.
func (o RepoSourceResponseOutput) TagName() pulumi.StringOutput {
	return o.ApplyT(func(v RepoSourceResponse) string { return v.TagName }).(pulumi.StringOutput)
}

// Resource is an entity that can have metadata. E.g., a Docker image.
type Resource struct {
	// The hash of the resource content. E.g., the Docker digest.
	ContentHash *Hash `pulumi:"contentHash"`
	// The name of the resource. E.g., the name of a Docker image - "Debian".
	Name *string `pulumi:"name"`
	// The unique URI of the resource. E.g., "https://gcr.io/project/image@sha256:foo" for a Docker image.
	Uri *string `pulumi:"uri"`
}

// ResourceInput is an input type that accepts ResourceArgs and ResourceOutput values.
// You can construct a concrete instance of `ResourceInput` via:
//
//	ResourceArgs{...}
type ResourceInput interface {
	pulumi.Input

	ToResourceOutput() ResourceOutput
	ToResourceOutputWithContext(context.Context) ResourceOutput
}

// Resource is an entity that can have metadata. E.g., a Docker image.
type ResourceArgs struct {
	// The hash of the resource content. E.g., the Docker digest.
	ContentHash HashPtrInput `pulumi:"contentHash"`
	// The name of the resource. E.g., the name of a Docker image - "Debian".
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The unique URI of the resource. E.g., "https://gcr.io/project/image@sha256:foo" for a Docker image.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

func (ResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Resource)(nil)).Elem()
}

func (i ResourceArgs) ToResourceOutput() ResourceOutput {
	return i.ToResourceOutputWithContext(context.Background())
}

func (i ResourceArgs) ToResourceOutputWithContext(ctx context.Context) ResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceOutput)
}

func (i ResourceArgs) ToResourcePtrOutput() ResourcePtrOutput {
	return i.ToResourcePtrOutputWithContext(context.Background())
}

func (i ResourceArgs) ToResourcePtrOutputWithContext(ctx context.Context) ResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceOutput).ToResourcePtrOutputWithContext(ctx)
}

// ResourcePtrInput is an input type that accepts ResourceArgs, ResourcePtr and ResourcePtrOutput values.
// You can construct a concrete instance of `ResourcePtrInput` via:
//
//	        ResourceArgs{...}
//
//	or:
//
//	        nil
type ResourcePtrInput interface {
	pulumi.Input

	ToResourcePtrOutput() ResourcePtrOutput
	ToResourcePtrOutputWithContext(context.Context) ResourcePtrOutput
}

type resourcePtrType ResourceArgs

func ResourcePtr(v *ResourceArgs) ResourcePtrInput {
	return (*resourcePtrType)(v)
}

func (*resourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Resource)(nil)).Elem()
}

func (i *resourcePtrType) ToResourcePtrOutput() ResourcePtrOutput {
	return i.ToResourcePtrOutputWithContext(context.Background())
}

func (i *resourcePtrType) ToResourcePtrOutputWithContext(ctx context.Context) ResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePtrOutput)
}

// Resource is an entity that can have metadata. E.g., a Docker image.
type ResourceOutput struct{ *pulumi.OutputState }

func (ResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Resource)(nil)).Elem()
}

func (o ResourceOutput) ToResourceOutput() ResourceOutput {
	return o
}

func (o ResourceOutput) ToResourceOutputWithContext(ctx context.Context) ResourceOutput {
	return o
}

func (o ResourceOutput) ToResourcePtrOutput() ResourcePtrOutput {
	return o.ToResourcePtrOutputWithContext(context.Background())
}

func (o ResourceOutput) ToResourcePtrOutputWithContext(ctx context.Context) ResourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Resource) *Resource {
		return &v
	}).(ResourcePtrOutput)
}

// The hash of the resource content. E.g., the Docker digest.
func (o ResourceOutput) ContentHash() HashPtrOutput {
	return o.ApplyT(func(v Resource) *Hash { return v.ContentHash }).(HashPtrOutput)
}

// The name of the resource. E.g., the name of a Docker image - "Debian".
func (o ResourceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Resource) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The unique URI of the resource. E.g., "https://gcr.io/project/image@sha256:foo" for a Docker image.
func (o ResourceOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Resource) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type ResourcePtrOutput struct{ *pulumi.OutputState }

func (ResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Resource)(nil)).Elem()
}

func (o ResourcePtrOutput) ToResourcePtrOutput() ResourcePtrOutput {
	return o
}

func (o ResourcePtrOutput) ToResourcePtrOutputWithContext(ctx context.Context) ResourcePtrOutput {
	return o
}

func (o ResourcePtrOutput) Elem() ResourceOutput {
	return o.ApplyT(func(v *Resource) Resource {
		if v != nil {
			return *v
		}
		var ret Resource
		return ret
	}).(ResourceOutput)
}

// The hash of the resource content. E.g., the Docker digest.
func (o ResourcePtrOutput) ContentHash() HashPtrOutput {
	return o.ApplyT(func(v *Resource) *Hash {
		if v == nil {
			return nil
		}
		return v.ContentHash
	}).(HashPtrOutput)
}

// The name of the resource. E.g., the name of a Docker image - "Debian".
func (o ResourcePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Resource) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The unique URI of the resource. E.g., "https://gcr.io/project/image@sha256:foo" for a Docker image.
func (o ResourcePtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Resource) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

type ResourceDescriptor struct {
	Annotations      map[string]interface{} `pulumi:"annotations"`
	Content          *string                `pulumi:"content"`
	Digest           map[string]string      `pulumi:"digest"`
	DownloadLocation *string                `pulumi:"downloadLocation"`
	MediaType        *string                `pulumi:"mediaType"`
	Name             *string                `pulumi:"name"`
	Uri              *string                `pulumi:"uri"`
}

// ResourceDescriptorInput is an input type that accepts ResourceDescriptorArgs and ResourceDescriptorOutput values.
// You can construct a concrete instance of `ResourceDescriptorInput` via:
//
//	ResourceDescriptorArgs{...}
type ResourceDescriptorInput interface {
	pulumi.Input

	ToResourceDescriptorOutput() ResourceDescriptorOutput
	ToResourceDescriptorOutputWithContext(context.Context) ResourceDescriptorOutput
}

type ResourceDescriptorArgs struct {
	Annotations      pulumi.MapInput       `pulumi:"annotations"`
	Content          pulumi.StringPtrInput `pulumi:"content"`
	Digest           pulumi.StringMapInput `pulumi:"digest"`
	DownloadLocation pulumi.StringPtrInput `pulumi:"downloadLocation"`
	MediaType        pulumi.StringPtrInput `pulumi:"mediaType"`
	Name             pulumi.StringPtrInput `pulumi:"name"`
	Uri              pulumi.StringPtrInput `pulumi:"uri"`
}

func (ResourceDescriptorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceDescriptor)(nil)).Elem()
}

func (i ResourceDescriptorArgs) ToResourceDescriptorOutput() ResourceDescriptorOutput {
	return i.ToResourceDescriptorOutputWithContext(context.Background())
}

func (i ResourceDescriptorArgs) ToResourceDescriptorOutputWithContext(ctx context.Context) ResourceDescriptorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceDescriptorOutput)
}

// ResourceDescriptorArrayInput is an input type that accepts ResourceDescriptorArray and ResourceDescriptorArrayOutput values.
// You can construct a concrete instance of `ResourceDescriptorArrayInput` via:
//
//	ResourceDescriptorArray{ ResourceDescriptorArgs{...} }
type ResourceDescriptorArrayInput interface {
	pulumi.Input

	ToResourceDescriptorArrayOutput() ResourceDescriptorArrayOutput
	ToResourceDescriptorArrayOutputWithContext(context.Context) ResourceDescriptorArrayOutput
}

type ResourceDescriptorArray []ResourceDescriptorInput

func (ResourceDescriptorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceDescriptor)(nil)).Elem()
}

func (i ResourceDescriptorArray) ToResourceDescriptorArrayOutput() ResourceDescriptorArrayOutput {
	return i.ToResourceDescriptorArrayOutputWithContext(context.Background())
}

func (i ResourceDescriptorArray) ToResourceDescriptorArrayOutputWithContext(ctx context.Context) ResourceDescriptorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceDescriptorArrayOutput)
}

type ResourceDescriptorOutput struct{ *pulumi.OutputState }

func (ResourceDescriptorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceDescriptor)(nil)).Elem()
}

func (o ResourceDescriptorOutput) ToResourceDescriptorOutput() ResourceDescriptorOutput {
	return o
}

func (o ResourceDescriptorOutput) ToResourceDescriptorOutputWithContext(ctx context.Context) ResourceDescriptorOutput {
	return o
}

func (o ResourceDescriptorOutput) Annotations() pulumi.MapOutput {
	return o.ApplyT(func(v ResourceDescriptor) map[string]interface{} { return v.Annotations }).(pulumi.MapOutput)
}

func (o ResourceDescriptorOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDescriptor) *string { return v.Content }).(pulumi.StringPtrOutput)
}

func (o ResourceDescriptorOutput) Digest() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceDescriptor) map[string]string { return v.Digest }).(pulumi.StringMapOutput)
}

func (o ResourceDescriptorOutput) DownloadLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDescriptor) *string { return v.DownloadLocation }).(pulumi.StringPtrOutput)
}

func (o ResourceDescriptorOutput) MediaType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDescriptor) *string { return v.MediaType }).(pulumi.StringPtrOutput)
}

func (o ResourceDescriptorOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDescriptor) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o ResourceDescriptorOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDescriptor) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type ResourceDescriptorArrayOutput struct{ *pulumi.OutputState }

func (ResourceDescriptorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceDescriptor)(nil)).Elem()
}

func (o ResourceDescriptorArrayOutput) ToResourceDescriptorArrayOutput() ResourceDescriptorArrayOutput {
	return o
}

func (o ResourceDescriptorArrayOutput) ToResourceDescriptorArrayOutputWithContext(ctx context.Context) ResourceDescriptorArrayOutput {
	return o
}

func (o ResourceDescriptorArrayOutput) Index(i pulumi.IntInput) ResourceDescriptorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceDescriptor {
		return vs[0].([]ResourceDescriptor)[vs[1].(int)]
	}).(ResourceDescriptorOutput)
}

type ResourceDescriptorResponse struct {
	Annotations      map[string]interface{} `pulumi:"annotations"`
	Content          string                 `pulumi:"content"`
	Digest           map[string]string      `pulumi:"digest"`
	DownloadLocation string                 `pulumi:"downloadLocation"`
	MediaType        string                 `pulumi:"mediaType"`
	Name             string                 `pulumi:"name"`
	Uri              string                 `pulumi:"uri"`
}

type ResourceDescriptorResponseOutput struct{ *pulumi.OutputState }

func (ResourceDescriptorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceDescriptorResponse)(nil)).Elem()
}

func (o ResourceDescriptorResponseOutput) ToResourceDescriptorResponseOutput() ResourceDescriptorResponseOutput {
	return o
}

func (o ResourceDescriptorResponseOutput) ToResourceDescriptorResponseOutputWithContext(ctx context.Context) ResourceDescriptorResponseOutput {
	return o
}

func (o ResourceDescriptorResponseOutput) Annotations() pulumi.MapOutput {
	return o.ApplyT(func(v ResourceDescriptorResponse) map[string]interface{} { return v.Annotations }).(pulumi.MapOutput)
}

func (o ResourceDescriptorResponseOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceDescriptorResponse) string { return v.Content }).(pulumi.StringOutput)
}

func (o ResourceDescriptorResponseOutput) Digest() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceDescriptorResponse) map[string]string { return v.Digest }).(pulumi.StringMapOutput)
}

func (o ResourceDescriptorResponseOutput) DownloadLocation() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceDescriptorResponse) string { return v.DownloadLocation }).(pulumi.StringOutput)
}

func (o ResourceDescriptorResponseOutput) MediaType() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceDescriptorResponse) string { return v.MediaType }).(pulumi.StringOutput)
}

func (o ResourceDescriptorResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceDescriptorResponse) string { return v.Name }).(pulumi.StringOutput)
}

func (o ResourceDescriptorResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceDescriptorResponse) string { return v.Uri }).(pulumi.StringOutput)
}

type ResourceDescriptorResponseArrayOutput struct{ *pulumi.OutputState }

func (ResourceDescriptorResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceDescriptorResponse)(nil)).Elem()
}

func (o ResourceDescriptorResponseArrayOutput) ToResourceDescriptorResponseArrayOutput() ResourceDescriptorResponseArrayOutput {
	return o
}

func (o ResourceDescriptorResponseArrayOutput) ToResourceDescriptorResponseArrayOutputWithContext(ctx context.Context) ResourceDescriptorResponseArrayOutput {
	return o
}

func (o ResourceDescriptorResponseArrayOutput) Index(i pulumi.IntInput) ResourceDescriptorResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceDescriptorResponse {
		return vs[0].([]ResourceDescriptorResponse)[vs[1].(int)]
	}).(ResourceDescriptorResponseOutput)
}

// Resource is an entity that can have metadata. E.g., a Docker image.
type ResourceResponse struct {
	// The hash of the resource content. E.g., the Docker digest.
	ContentHash HashResponse `pulumi:"contentHash"`
	// The name of the resource. E.g., the name of a Docker image - "Debian".
	Name string `pulumi:"name"`
	// The unique URI of the resource. E.g., "https://gcr.io/project/image@sha256:foo" for a Docker image.
	Uri string `pulumi:"uri"`
}

// Resource is an entity that can have metadata. E.g., a Docker image.
type ResourceResponseOutput struct{ *pulumi.OutputState }

func (ResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceResponse)(nil)).Elem()
}

func (o ResourceResponseOutput) ToResourceResponseOutput() ResourceResponseOutput {
	return o
}

func (o ResourceResponseOutput) ToResourceResponseOutputWithContext(ctx context.Context) ResourceResponseOutput {
	return o
}

// The hash of the resource content. E.g., the Docker digest.
func (o ResourceResponseOutput) ContentHash() HashResponseOutput {
	return o.ApplyT(func(v ResourceResponse) HashResponse { return v.ContentHash }).(HashResponseOutput)
}

// The name of the resource. E.g., the name of a Docker image - "Debian".
func (o ResourceResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The unique URI of the resource. E.g., "https://gcr.io/project/image@sha256:foo" for a Docker image.
func (o ResourceResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceResponse) string { return v.Uri }).(pulumi.StringOutput)
}

type RunDetails struct {
	Builder    *ProvenanceBuilder   `pulumi:"builder"`
	Byproducts []ResourceDescriptor `pulumi:"byproducts"`
	Metadata   *BuildMetadata       `pulumi:"metadata"`
}

// RunDetailsInput is an input type that accepts RunDetailsArgs and RunDetailsOutput values.
// You can construct a concrete instance of `RunDetailsInput` via:
//
//	RunDetailsArgs{...}
type RunDetailsInput interface {
	pulumi.Input

	ToRunDetailsOutput() RunDetailsOutput
	ToRunDetailsOutputWithContext(context.Context) RunDetailsOutput
}

type RunDetailsArgs struct {
	Builder    ProvenanceBuilderPtrInput    `pulumi:"builder"`
	Byproducts ResourceDescriptorArrayInput `pulumi:"byproducts"`
	Metadata   BuildMetadataPtrInput        `pulumi:"metadata"`
}

func (RunDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RunDetails)(nil)).Elem()
}

func (i RunDetailsArgs) ToRunDetailsOutput() RunDetailsOutput {
	return i.ToRunDetailsOutputWithContext(context.Background())
}

func (i RunDetailsArgs) ToRunDetailsOutputWithContext(ctx context.Context) RunDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RunDetailsOutput)
}

func (i RunDetailsArgs) ToRunDetailsPtrOutput() RunDetailsPtrOutput {
	return i.ToRunDetailsPtrOutputWithContext(context.Background())
}

func (i RunDetailsArgs) ToRunDetailsPtrOutputWithContext(ctx context.Context) RunDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RunDetailsOutput).ToRunDetailsPtrOutputWithContext(ctx)
}

// RunDetailsPtrInput is an input type that accepts RunDetailsArgs, RunDetailsPtr and RunDetailsPtrOutput values.
// You can construct a concrete instance of `RunDetailsPtrInput` via:
//
//	        RunDetailsArgs{...}
//
//	or:
//
//	        nil
type RunDetailsPtrInput interface {
	pulumi.Input

	ToRunDetailsPtrOutput() RunDetailsPtrOutput
	ToRunDetailsPtrOutputWithContext(context.Context) RunDetailsPtrOutput
}

type runDetailsPtrType RunDetailsArgs

func RunDetailsPtr(v *RunDetailsArgs) RunDetailsPtrInput {
	return (*runDetailsPtrType)(v)
}

func (*runDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RunDetails)(nil)).Elem()
}

func (i *runDetailsPtrType) ToRunDetailsPtrOutput() RunDetailsPtrOutput {
	return i.ToRunDetailsPtrOutputWithContext(context.Background())
}

func (i *runDetailsPtrType) ToRunDetailsPtrOutputWithContext(ctx context.Context) RunDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RunDetailsPtrOutput)
}

type RunDetailsOutput struct{ *pulumi.OutputState }

func (RunDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RunDetails)(nil)).Elem()
}

func (o RunDetailsOutput) ToRunDetailsOutput() RunDetailsOutput {
	return o
}

func (o RunDetailsOutput) ToRunDetailsOutputWithContext(ctx context.Context) RunDetailsOutput {
	return o
}

func (o RunDetailsOutput) ToRunDetailsPtrOutput() RunDetailsPtrOutput {
	return o.ToRunDetailsPtrOutputWithContext(context.Background())
}

func (o RunDetailsOutput) ToRunDetailsPtrOutputWithContext(ctx context.Context) RunDetailsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RunDetails) *RunDetails {
		return &v
	}).(RunDetailsPtrOutput)
}

func (o RunDetailsOutput) Builder() ProvenanceBuilderPtrOutput {
	return o.ApplyT(func(v RunDetails) *ProvenanceBuilder { return v.Builder }).(ProvenanceBuilderPtrOutput)
}

func (o RunDetailsOutput) Byproducts() ResourceDescriptorArrayOutput {
	return o.ApplyT(func(v RunDetails) []ResourceDescriptor { return v.Byproducts }).(ResourceDescriptorArrayOutput)
}

func (o RunDetailsOutput) Metadata() BuildMetadataPtrOutput {
	return o.ApplyT(func(v RunDetails) *BuildMetadata { return v.Metadata }).(BuildMetadataPtrOutput)
}

type RunDetailsPtrOutput struct{ *pulumi.OutputState }

func (RunDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RunDetails)(nil)).Elem()
}

func (o RunDetailsPtrOutput) ToRunDetailsPtrOutput() RunDetailsPtrOutput {
	return o
}

func (o RunDetailsPtrOutput) ToRunDetailsPtrOutputWithContext(ctx context.Context) RunDetailsPtrOutput {
	return o
}

func (o RunDetailsPtrOutput) Elem() RunDetailsOutput {
	return o.ApplyT(func(v *RunDetails) RunDetails {
		if v != nil {
			return *v
		}
		var ret RunDetails
		return ret
	}).(RunDetailsOutput)
}

func (o RunDetailsPtrOutput) Builder() ProvenanceBuilderPtrOutput {
	return o.ApplyT(func(v *RunDetails) *ProvenanceBuilder {
		if v == nil {
			return nil
		}
		return v.Builder
	}).(ProvenanceBuilderPtrOutput)
}

func (o RunDetailsPtrOutput) Byproducts() ResourceDescriptorArrayOutput {
	return o.ApplyT(func(v *RunDetails) []ResourceDescriptor {
		if v == nil {
			return nil
		}
		return v.Byproducts
	}).(ResourceDescriptorArrayOutput)
}

func (o RunDetailsPtrOutput) Metadata() BuildMetadataPtrOutput {
	return o.ApplyT(func(v *RunDetails) *BuildMetadata {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(BuildMetadataPtrOutput)
}

type RunDetailsResponse struct {
	Builder    ProvenanceBuilderResponse    `pulumi:"builder"`
	Byproducts []ResourceDescriptorResponse `pulumi:"byproducts"`
	Metadata   BuildMetadataResponse        `pulumi:"metadata"`
}

type RunDetailsResponseOutput struct{ *pulumi.OutputState }

func (RunDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RunDetailsResponse)(nil)).Elem()
}

func (o RunDetailsResponseOutput) ToRunDetailsResponseOutput() RunDetailsResponseOutput {
	return o
}

func (o RunDetailsResponseOutput) ToRunDetailsResponseOutputWithContext(ctx context.Context) RunDetailsResponseOutput {
	return o
}

func (o RunDetailsResponseOutput) Builder() ProvenanceBuilderResponseOutput {
	return o.ApplyT(func(v RunDetailsResponse) ProvenanceBuilderResponse { return v.Builder }).(ProvenanceBuilderResponseOutput)
}

func (o RunDetailsResponseOutput) Byproducts() ResourceDescriptorResponseArrayOutput {
	return o.ApplyT(func(v RunDetailsResponse) []ResourceDescriptorResponse { return v.Byproducts }).(ResourceDescriptorResponseArrayOutput)
}

func (o RunDetailsResponseOutput) Metadata() BuildMetadataResponseOutput {
	return o.ApplyT(func(v RunDetailsResponse) BuildMetadataResponse { return v.Metadata }).(BuildMetadataResponseOutput)
}

// The note representing an SBOM reference.
type SBOMReferenceNote struct {
	// The format that SBOM takes. E.g. may be spdx, cyclonedx, etc...
	Format *string `pulumi:"format"`
	// The version of the format that the SBOM takes. E.g. if the format is spdx, the version may be 2.3.
	Version *string `pulumi:"version"`
}

// SBOMReferenceNoteInput is an input type that accepts SBOMReferenceNoteArgs and SBOMReferenceNoteOutput values.
// You can construct a concrete instance of `SBOMReferenceNoteInput` via:
//
//	SBOMReferenceNoteArgs{...}
type SBOMReferenceNoteInput interface {
	pulumi.Input

	ToSBOMReferenceNoteOutput() SBOMReferenceNoteOutput
	ToSBOMReferenceNoteOutputWithContext(context.Context) SBOMReferenceNoteOutput
}

// The note representing an SBOM reference.
type SBOMReferenceNoteArgs struct {
	// The format that SBOM takes. E.g. may be spdx, cyclonedx, etc...
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the format that the SBOM takes. E.g. if the format is spdx, the version may be 2.3.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (SBOMReferenceNoteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SBOMReferenceNote)(nil)).Elem()
}

func (i SBOMReferenceNoteArgs) ToSBOMReferenceNoteOutput() SBOMReferenceNoteOutput {
	return i.ToSBOMReferenceNoteOutputWithContext(context.Background())
}

func (i SBOMReferenceNoteArgs) ToSBOMReferenceNoteOutputWithContext(ctx context.Context) SBOMReferenceNoteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SBOMReferenceNoteOutput)
}

func (i SBOMReferenceNoteArgs) ToSBOMReferenceNotePtrOutput() SBOMReferenceNotePtrOutput {
	return i.ToSBOMReferenceNotePtrOutputWithContext(context.Background())
}

func (i SBOMReferenceNoteArgs) ToSBOMReferenceNotePtrOutputWithContext(ctx context.Context) SBOMReferenceNotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SBOMReferenceNoteOutput).ToSBOMReferenceNotePtrOutputWithContext(ctx)
}

// SBOMReferenceNotePtrInput is an input type that accepts SBOMReferenceNoteArgs, SBOMReferenceNotePtr and SBOMReferenceNotePtrOutput values.
// You can construct a concrete instance of `SBOMReferenceNotePtrInput` via:
//
//	        SBOMReferenceNoteArgs{...}
//
//	or:
//
//	        nil
type SBOMReferenceNotePtrInput interface {
	pulumi.Input

	ToSBOMReferenceNotePtrOutput() SBOMReferenceNotePtrOutput
	ToSBOMReferenceNotePtrOutputWithContext(context.Context) SBOMReferenceNotePtrOutput
}

type sbomreferenceNotePtrType SBOMReferenceNoteArgs

func SBOMReferenceNotePtr(v *SBOMReferenceNoteArgs) SBOMReferenceNotePtrInput {
	return (*sbomreferenceNotePtrType)(v)
}

func (*sbomreferenceNotePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SBOMReferenceNote)(nil)).Elem()
}

func (i *sbomreferenceNotePtrType) ToSBOMReferenceNotePtrOutput() SBOMReferenceNotePtrOutput {
	return i.ToSBOMReferenceNotePtrOutputWithContext(context.Background())
}

func (i *sbomreferenceNotePtrType) ToSBOMReferenceNotePtrOutputWithContext(ctx context.Context) SBOMReferenceNotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SBOMReferenceNotePtrOutput)
}

// The note representing an SBOM reference.
type SBOMReferenceNoteOutput struct{ *pulumi.OutputState }

func (SBOMReferenceNoteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SBOMReferenceNote)(nil)).Elem()
}

func (o SBOMReferenceNoteOutput) ToSBOMReferenceNoteOutput() SBOMReferenceNoteOutput {
	return o
}

func (o SBOMReferenceNoteOutput) ToSBOMReferenceNoteOutputWithContext(ctx context.Context) SBOMReferenceNoteOutput {
	return o
}

func (o SBOMReferenceNoteOutput) ToSBOMReferenceNotePtrOutput() SBOMReferenceNotePtrOutput {
	return o.ToSBOMReferenceNotePtrOutputWithContext(context.Background())
}

func (o SBOMReferenceNoteOutput) ToSBOMReferenceNotePtrOutputWithContext(ctx context.Context) SBOMReferenceNotePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SBOMReferenceNote) *SBOMReferenceNote {
		return &v
	}).(SBOMReferenceNotePtrOutput)
}

// The format that SBOM takes. E.g. may be spdx, cyclonedx, etc...
func (o SBOMReferenceNoteOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SBOMReferenceNote) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the format that the SBOM takes. E.g. if the format is spdx, the version may be 2.3.
func (o SBOMReferenceNoteOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SBOMReferenceNote) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type SBOMReferenceNotePtrOutput struct{ *pulumi.OutputState }

func (SBOMReferenceNotePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SBOMReferenceNote)(nil)).Elem()
}

func (o SBOMReferenceNotePtrOutput) ToSBOMReferenceNotePtrOutput() SBOMReferenceNotePtrOutput {
	return o
}

func (o SBOMReferenceNotePtrOutput) ToSBOMReferenceNotePtrOutputWithContext(ctx context.Context) SBOMReferenceNotePtrOutput {
	return o
}

func (o SBOMReferenceNotePtrOutput) Elem() SBOMReferenceNoteOutput {
	return o.ApplyT(func(v *SBOMReferenceNote) SBOMReferenceNote {
		if v != nil {
			return *v
		}
		var ret SBOMReferenceNote
		return ret
	}).(SBOMReferenceNoteOutput)
}

// The format that SBOM takes. E.g. may be spdx, cyclonedx, etc...
func (o SBOMReferenceNotePtrOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBOMReferenceNote) *string {
		if v == nil {
			return nil
		}
		return v.Format
	}).(pulumi.StringPtrOutput)
}

// The version of the format that the SBOM takes. E.g. if the format is spdx, the version may be 2.3.
func (o SBOMReferenceNotePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBOMReferenceNote) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// The note representing an SBOM reference.
type SBOMReferenceNoteResponse struct {
	// The format that SBOM takes. E.g. may be spdx, cyclonedx, etc...
	Format string `pulumi:"format"`
	// The version of the format that the SBOM takes. E.g. if the format is spdx, the version may be 2.3.
	Version string `pulumi:"version"`
}

// The note representing an SBOM reference.
type SBOMReferenceNoteResponseOutput struct{ *pulumi.OutputState }

func (SBOMReferenceNoteResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SBOMReferenceNoteResponse)(nil)).Elem()
}

func (o SBOMReferenceNoteResponseOutput) ToSBOMReferenceNoteResponseOutput() SBOMReferenceNoteResponseOutput {
	return o
}

func (o SBOMReferenceNoteResponseOutput) ToSBOMReferenceNoteResponseOutputWithContext(ctx context.Context) SBOMReferenceNoteResponseOutput {
	return o
}

// The format that SBOM takes. E.g. may be spdx, cyclonedx, etc...
func (o SBOMReferenceNoteResponseOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v SBOMReferenceNoteResponse) string { return v.Format }).(pulumi.StringOutput)
}

// The version of the format that the SBOM takes. E.g. if the format is spdx, the version may be 2.3.
func (o SBOMReferenceNoteResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v SBOMReferenceNoteResponse) string { return v.Version }).(pulumi.StringOutput)
}

// The occurrence representing an SBOM reference as applied to a specific resource. The occurrence follows the DSSE specification. See https://github.com/secure-systems-lab/dsse/blob/master/envelope.md for more details.
type SBOMReferenceOccurrence struct {
	// The actual payload that contains the SBOM reference data.
	Payload *SbomReferenceIntotoPayload `pulumi:"payload"`
	// The kind of payload that SbomReferenceIntotoPayload takes. Since it's in the intoto format, this value is expected to be 'application/vnd.in-toto+json'.
	PayloadType *string `pulumi:"payloadType"`
	// The signatures over the payload.
	Signatures []EnvelopeSignature `pulumi:"signatures"`
}

// SBOMReferenceOccurrenceInput is an input type that accepts SBOMReferenceOccurrenceArgs and SBOMReferenceOccurrenceOutput values.
// You can construct a concrete instance of `SBOMReferenceOccurrenceInput` via:
//
//	SBOMReferenceOccurrenceArgs{...}
type SBOMReferenceOccurrenceInput interface {
	pulumi.Input

	ToSBOMReferenceOccurrenceOutput() SBOMReferenceOccurrenceOutput
	ToSBOMReferenceOccurrenceOutputWithContext(context.Context) SBOMReferenceOccurrenceOutput
}

// The occurrence representing an SBOM reference as applied to a specific resource. The occurrence follows the DSSE specification. See https://github.com/secure-systems-lab/dsse/blob/master/envelope.md for more details.
type SBOMReferenceOccurrenceArgs struct {
	// The actual payload that contains the SBOM reference data.
	Payload SbomReferenceIntotoPayloadPtrInput `pulumi:"payload"`
	// The kind of payload that SbomReferenceIntotoPayload takes. Since it's in the intoto format, this value is expected to be 'application/vnd.in-toto+json'.
	PayloadType pulumi.StringPtrInput `pulumi:"payloadType"`
	// The signatures over the payload.
	Signatures EnvelopeSignatureArrayInput `pulumi:"signatures"`
}

func (SBOMReferenceOccurrenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SBOMReferenceOccurrence)(nil)).Elem()
}

func (i SBOMReferenceOccurrenceArgs) ToSBOMReferenceOccurrenceOutput() SBOMReferenceOccurrenceOutput {
	return i.ToSBOMReferenceOccurrenceOutputWithContext(context.Background())
}

func (i SBOMReferenceOccurrenceArgs) ToSBOMReferenceOccurrenceOutputWithContext(ctx context.Context) SBOMReferenceOccurrenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SBOMReferenceOccurrenceOutput)
}

func (i SBOMReferenceOccurrenceArgs) ToSBOMReferenceOccurrencePtrOutput() SBOMReferenceOccurrencePtrOutput {
	return i.ToSBOMReferenceOccurrencePtrOutputWithContext(context.Background())
}

func (i SBOMReferenceOccurrenceArgs) ToSBOMReferenceOccurrencePtrOutputWithContext(ctx context.Context) SBOMReferenceOccurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SBOMReferenceOccurrenceOutput).ToSBOMReferenceOccurrencePtrOutputWithContext(ctx)
}

// SBOMReferenceOccurrencePtrInput is an input type that accepts SBOMReferenceOccurrenceArgs, SBOMReferenceOccurrencePtr and SBOMReferenceOccurrencePtrOutput values.
// You can construct a concrete instance of `SBOMReferenceOccurrencePtrInput` via:
//
//	        SBOMReferenceOccurrenceArgs{...}
//
//	or:
//
//	        nil
type SBOMReferenceOccurrencePtrInput interface {
	pulumi.Input

	ToSBOMReferenceOccurrencePtrOutput() SBOMReferenceOccurrencePtrOutput
	ToSBOMReferenceOccurrencePtrOutputWithContext(context.Context) SBOMReferenceOccurrencePtrOutput
}

type sbomreferenceOccurrencePtrType SBOMReferenceOccurrenceArgs

func SBOMReferenceOccurrencePtr(v *SBOMReferenceOccurrenceArgs) SBOMReferenceOccurrencePtrInput {
	return (*sbomreferenceOccurrencePtrType)(v)
}

func (*sbomreferenceOccurrencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SBOMReferenceOccurrence)(nil)).Elem()
}

func (i *sbomreferenceOccurrencePtrType) ToSBOMReferenceOccurrencePtrOutput() SBOMReferenceOccurrencePtrOutput {
	return i.ToSBOMReferenceOccurrencePtrOutputWithContext(context.Background())
}

func (i *sbomreferenceOccurrencePtrType) ToSBOMReferenceOccurrencePtrOutputWithContext(ctx context.Context) SBOMReferenceOccurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SBOMReferenceOccurrencePtrOutput)
}

// The occurrence representing an SBOM reference as applied to a specific resource. The occurrence follows the DSSE specification. See https://github.com/secure-systems-lab/dsse/blob/master/envelope.md for more details.
type SBOMReferenceOccurrenceOutput struct{ *pulumi.OutputState }

func (SBOMReferenceOccurrenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SBOMReferenceOccurrence)(nil)).Elem()
}

func (o SBOMReferenceOccurrenceOutput) ToSBOMReferenceOccurrenceOutput() SBOMReferenceOccurrenceOutput {
	return o
}

func (o SBOMReferenceOccurrenceOutput) ToSBOMReferenceOccurrenceOutputWithContext(ctx context.Context) SBOMReferenceOccurrenceOutput {
	return o
}

func (o SBOMReferenceOccurrenceOutput) ToSBOMReferenceOccurrencePtrOutput() SBOMReferenceOccurrencePtrOutput {
	return o.ToSBOMReferenceOccurrencePtrOutputWithContext(context.Background())
}

func (o SBOMReferenceOccurrenceOutput) ToSBOMReferenceOccurrencePtrOutputWithContext(ctx context.Context) SBOMReferenceOccurrencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SBOMReferenceOccurrence) *SBOMReferenceOccurrence {
		return &v
	}).(SBOMReferenceOccurrencePtrOutput)
}

// The actual payload that contains the SBOM reference data.
func (o SBOMReferenceOccurrenceOutput) Payload() SbomReferenceIntotoPayloadPtrOutput {
	return o.ApplyT(func(v SBOMReferenceOccurrence) *SbomReferenceIntotoPayload { return v.Payload }).(SbomReferenceIntotoPayloadPtrOutput)
}

// The kind of payload that SbomReferenceIntotoPayload takes. Since it's in the intoto format, this value is expected to be 'application/vnd.in-toto+json'.
func (o SBOMReferenceOccurrenceOutput) PayloadType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SBOMReferenceOccurrence) *string { return v.PayloadType }).(pulumi.StringPtrOutput)
}

// The signatures over the payload.
func (o SBOMReferenceOccurrenceOutput) Signatures() EnvelopeSignatureArrayOutput {
	return o.ApplyT(func(v SBOMReferenceOccurrence) []EnvelopeSignature { return v.Signatures }).(EnvelopeSignatureArrayOutput)
}

type SBOMReferenceOccurrencePtrOutput struct{ *pulumi.OutputState }

func (SBOMReferenceOccurrencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SBOMReferenceOccurrence)(nil)).Elem()
}

func (o SBOMReferenceOccurrencePtrOutput) ToSBOMReferenceOccurrencePtrOutput() SBOMReferenceOccurrencePtrOutput {
	return o
}

func (o SBOMReferenceOccurrencePtrOutput) ToSBOMReferenceOccurrencePtrOutputWithContext(ctx context.Context) SBOMReferenceOccurrencePtrOutput {
	return o
}

func (o SBOMReferenceOccurrencePtrOutput) Elem() SBOMReferenceOccurrenceOutput {
	return o.ApplyT(func(v *SBOMReferenceOccurrence) SBOMReferenceOccurrence {
		if v != nil {
			return *v
		}
		var ret SBOMReferenceOccurrence
		return ret
	}).(SBOMReferenceOccurrenceOutput)
}

// The actual payload that contains the SBOM reference data.
func (o SBOMReferenceOccurrencePtrOutput) Payload() SbomReferenceIntotoPayloadPtrOutput {
	return o.ApplyT(func(v *SBOMReferenceOccurrence) *SbomReferenceIntotoPayload {
		if v == nil {
			return nil
		}
		return v.Payload
	}).(SbomReferenceIntotoPayloadPtrOutput)
}

// The kind of payload that SbomReferenceIntotoPayload takes. Since it's in the intoto format, this value is expected to be 'application/vnd.in-toto+json'.
func (o SBOMReferenceOccurrencePtrOutput) PayloadType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBOMReferenceOccurrence) *string {
		if v == nil {
			return nil
		}
		return v.PayloadType
	}).(pulumi.StringPtrOutput)
}

// The signatures over the payload.
func (o SBOMReferenceOccurrencePtrOutput) Signatures() EnvelopeSignatureArrayOutput {
	return o.ApplyT(func(v *SBOMReferenceOccurrence) []EnvelopeSignature {
		if v == nil {
			return nil
		}
		return v.Signatures
	}).(EnvelopeSignatureArrayOutput)
}

// The occurrence representing an SBOM reference as applied to a specific resource. The occurrence follows the DSSE specification. See https://github.com/secure-systems-lab/dsse/blob/master/envelope.md for more details.
type SBOMReferenceOccurrenceResponse struct {
	// The actual payload that contains the SBOM reference data.
	Payload SbomReferenceIntotoPayloadResponse `pulumi:"payload"`
	// The kind of payload that SbomReferenceIntotoPayload takes. Since it's in the intoto format, this value is expected to be 'application/vnd.in-toto+json'.
	PayloadType string `pulumi:"payloadType"`
	// The signatures over the payload.
	Signatures []EnvelopeSignatureResponse `pulumi:"signatures"`
}

// The occurrence representing an SBOM reference as applied to a specific resource. The occurrence follows the DSSE specification. See https://github.com/secure-systems-lab/dsse/blob/master/envelope.md for more details.
type SBOMReferenceOccurrenceResponseOutput struct{ *pulumi.OutputState }

func (SBOMReferenceOccurrenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SBOMReferenceOccurrenceResponse)(nil)).Elem()
}

func (o SBOMReferenceOccurrenceResponseOutput) ToSBOMReferenceOccurrenceResponseOutput() SBOMReferenceOccurrenceResponseOutput {
	return o
}

func (o SBOMReferenceOccurrenceResponseOutput) ToSBOMReferenceOccurrenceResponseOutputWithContext(ctx context.Context) SBOMReferenceOccurrenceResponseOutput {
	return o
}

// The actual payload that contains the SBOM reference data.
func (o SBOMReferenceOccurrenceResponseOutput) Payload() SbomReferenceIntotoPayloadResponseOutput {
	return o.ApplyT(func(v SBOMReferenceOccurrenceResponse) SbomReferenceIntotoPayloadResponse { return v.Payload }).(SbomReferenceIntotoPayloadResponseOutput)
}

// The kind of payload that SbomReferenceIntotoPayload takes. Since it's in the intoto format, this value is expected to be 'application/vnd.in-toto+json'.
func (o SBOMReferenceOccurrenceResponseOutput) PayloadType() pulumi.StringOutput {
	return o.ApplyT(func(v SBOMReferenceOccurrenceResponse) string { return v.PayloadType }).(pulumi.StringOutput)
}

// The signatures over the payload.
func (o SBOMReferenceOccurrenceResponseOutput) Signatures() EnvelopeSignatureResponseArrayOutput {
	return o.ApplyT(func(v SBOMReferenceOccurrenceResponse) []EnvelopeSignatureResponse { return v.Signatures }).(EnvelopeSignatureResponseArrayOutput)
}

// The status of an SBOM generation.
type SBOMStatusResponse struct {
	// If there was an error generating an SBOM, this will indicate what that error was.
	Error string `pulumi:"error"`
	// The progress of the SBOM generation.
	SbomState string `pulumi:"sbomState"`
}

// The status of an SBOM generation.
type SBOMStatusResponseOutput struct{ *pulumi.OutputState }

func (SBOMStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SBOMStatusResponse)(nil)).Elem()
}

func (o SBOMStatusResponseOutput) ToSBOMStatusResponseOutput() SBOMStatusResponseOutput {
	return o
}

func (o SBOMStatusResponseOutput) ToSBOMStatusResponseOutputWithContext(ctx context.Context) SBOMStatusResponseOutput {
	return o
}

// If there was an error generating an SBOM, this will indicate what that error was.
func (o SBOMStatusResponseOutput) Error() pulumi.StringOutput {
	return o.ApplyT(func(v SBOMStatusResponse) string { return v.Error }).(pulumi.StringOutput)
}

// The progress of the SBOM generation.
func (o SBOMStatusResponseOutput) SbomState() pulumi.StringOutput {
	return o.ApplyT(func(v SBOMStatusResponse) string { return v.SbomState }).(pulumi.StringOutput)
}

// The actual payload that contains the SBOM Reference data. The payload follows the intoto statement specification. See https://github.com/in-toto/attestation/blob/main/spec/v1.0/statement.md for more details.
type SbomReferenceIntotoPayload struct {
	// Additional parameters of the Predicate. Includes the actual data about the SBOM.
	Predicate *SbomReferenceIntotoPredicate `pulumi:"predicate"`
	// URI identifying the type of the Predicate.
	PredicateType *string `pulumi:"predicateType"`
	// Set of software artifacts that the attestation applies to. Each element represents a single software artifact.
	Subject []Subject `pulumi:"subject"`
	// Identifier for the schema of the Statement.
	Type *string `pulumi:"type"`
}

// SbomReferenceIntotoPayloadInput is an input type that accepts SbomReferenceIntotoPayloadArgs and SbomReferenceIntotoPayloadOutput values.
// You can construct a concrete instance of `SbomReferenceIntotoPayloadInput` via:
//
//	SbomReferenceIntotoPayloadArgs{...}
type SbomReferenceIntotoPayloadInput interface {
	pulumi.Input

	ToSbomReferenceIntotoPayloadOutput() SbomReferenceIntotoPayloadOutput
	ToSbomReferenceIntotoPayloadOutputWithContext(context.Context) SbomReferenceIntotoPayloadOutput
}

// The actual payload that contains the SBOM Reference data. The payload follows the intoto statement specification. See https://github.com/in-toto/attestation/blob/main/spec/v1.0/statement.md for more details.
type SbomReferenceIntotoPayloadArgs struct {
	// Additional parameters of the Predicate. Includes the actual data about the SBOM.
	Predicate SbomReferenceIntotoPredicatePtrInput `pulumi:"predicate"`
	// URI identifying the type of the Predicate.
	PredicateType pulumi.StringPtrInput `pulumi:"predicateType"`
	// Set of software artifacts that the attestation applies to. Each element represents a single software artifact.
	Subject SubjectArrayInput `pulumi:"subject"`
	// Identifier for the schema of the Statement.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (SbomReferenceIntotoPayloadArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SbomReferenceIntotoPayload)(nil)).Elem()
}

func (i SbomReferenceIntotoPayloadArgs) ToSbomReferenceIntotoPayloadOutput() SbomReferenceIntotoPayloadOutput {
	return i.ToSbomReferenceIntotoPayloadOutputWithContext(context.Background())
}

func (i SbomReferenceIntotoPayloadArgs) ToSbomReferenceIntotoPayloadOutputWithContext(ctx context.Context) SbomReferenceIntotoPayloadOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SbomReferenceIntotoPayloadOutput)
}

func (i SbomReferenceIntotoPayloadArgs) ToSbomReferenceIntotoPayloadPtrOutput() SbomReferenceIntotoPayloadPtrOutput {
	return i.ToSbomReferenceIntotoPayloadPtrOutputWithContext(context.Background())
}

func (i SbomReferenceIntotoPayloadArgs) ToSbomReferenceIntotoPayloadPtrOutputWithContext(ctx context.Context) SbomReferenceIntotoPayloadPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SbomReferenceIntotoPayloadOutput).ToSbomReferenceIntotoPayloadPtrOutputWithContext(ctx)
}

// SbomReferenceIntotoPayloadPtrInput is an input type that accepts SbomReferenceIntotoPayloadArgs, SbomReferenceIntotoPayloadPtr and SbomReferenceIntotoPayloadPtrOutput values.
// You can construct a concrete instance of `SbomReferenceIntotoPayloadPtrInput` via:
//
//	        SbomReferenceIntotoPayloadArgs{...}
//
//	or:
//
//	        nil
type SbomReferenceIntotoPayloadPtrInput interface {
	pulumi.Input

	ToSbomReferenceIntotoPayloadPtrOutput() SbomReferenceIntotoPayloadPtrOutput
	ToSbomReferenceIntotoPayloadPtrOutputWithContext(context.Context) SbomReferenceIntotoPayloadPtrOutput
}

type sbomReferenceIntotoPayloadPtrType SbomReferenceIntotoPayloadArgs

func SbomReferenceIntotoPayloadPtr(v *SbomReferenceIntotoPayloadArgs) SbomReferenceIntotoPayloadPtrInput {
	return (*sbomReferenceIntotoPayloadPtrType)(v)
}

func (*sbomReferenceIntotoPayloadPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SbomReferenceIntotoPayload)(nil)).Elem()
}

func (i *sbomReferenceIntotoPayloadPtrType) ToSbomReferenceIntotoPayloadPtrOutput() SbomReferenceIntotoPayloadPtrOutput {
	return i.ToSbomReferenceIntotoPayloadPtrOutputWithContext(context.Background())
}

func (i *sbomReferenceIntotoPayloadPtrType) ToSbomReferenceIntotoPayloadPtrOutputWithContext(ctx context.Context) SbomReferenceIntotoPayloadPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SbomReferenceIntotoPayloadPtrOutput)
}

// The actual payload that contains the SBOM Reference data. The payload follows the intoto statement specification. See https://github.com/in-toto/attestation/blob/main/spec/v1.0/statement.md for more details.
type SbomReferenceIntotoPayloadOutput struct{ *pulumi.OutputState }

func (SbomReferenceIntotoPayloadOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SbomReferenceIntotoPayload)(nil)).Elem()
}

func (o SbomReferenceIntotoPayloadOutput) ToSbomReferenceIntotoPayloadOutput() SbomReferenceIntotoPayloadOutput {
	return o
}

func (o SbomReferenceIntotoPayloadOutput) ToSbomReferenceIntotoPayloadOutputWithContext(ctx context.Context) SbomReferenceIntotoPayloadOutput {
	return o
}

func (o SbomReferenceIntotoPayloadOutput) ToSbomReferenceIntotoPayloadPtrOutput() SbomReferenceIntotoPayloadPtrOutput {
	return o.ToSbomReferenceIntotoPayloadPtrOutputWithContext(context.Background())
}

func (o SbomReferenceIntotoPayloadOutput) ToSbomReferenceIntotoPayloadPtrOutputWithContext(ctx context.Context) SbomReferenceIntotoPayloadPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SbomReferenceIntotoPayload) *SbomReferenceIntotoPayload {
		return &v
	}).(SbomReferenceIntotoPayloadPtrOutput)
}

// Additional parameters of the Predicate. Includes the actual data about the SBOM.
func (o SbomReferenceIntotoPayloadOutput) Predicate() SbomReferenceIntotoPredicatePtrOutput {
	return o.ApplyT(func(v SbomReferenceIntotoPayload) *SbomReferenceIntotoPredicate { return v.Predicate }).(SbomReferenceIntotoPredicatePtrOutput)
}

// URI identifying the type of the Predicate.
func (o SbomReferenceIntotoPayloadOutput) PredicateType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SbomReferenceIntotoPayload) *string { return v.PredicateType }).(pulumi.StringPtrOutput)
}

// Set of software artifacts that the attestation applies to. Each element represents a single software artifact.
func (o SbomReferenceIntotoPayloadOutput) Subject() SubjectArrayOutput {
	return o.ApplyT(func(v SbomReferenceIntotoPayload) []Subject { return v.Subject }).(SubjectArrayOutput)
}

// Identifier for the schema of the Statement.
func (o SbomReferenceIntotoPayloadOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SbomReferenceIntotoPayload) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type SbomReferenceIntotoPayloadPtrOutput struct{ *pulumi.OutputState }

func (SbomReferenceIntotoPayloadPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SbomReferenceIntotoPayload)(nil)).Elem()
}

func (o SbomReferenceIntotoPayloadPtrOutput) ToSbomReferenceIntotoPayloadPtrOutput() SbomReferenceIntotoPayloadPtrOutput {
	return o
}

func (o SbomReferenceIntotoPayloadPtrOutput) ToSbomReferenceIntotoPayloadPtrOutputWithContext(ctx context.Context) SbomReferenceIntotoPayloadPtrOutput {
	return o
}

func (o SbomReferenceIntotoPayloadPtrOutput) Elem() SbomReferenceIntotoPayloadOutput {
	return o.ApplyT(func(v *SbomReferenceIntotoPayload) SbomReferenceIntotoPayload {
		if v != nil {
			return *v
		}
		var ret SbomReferenceIntotoPayload
		return ret
	}).(SbomReferenceIntotoPayloadOutput)
}

// Additional parameters of the Predicate. Includes the actual data about the SBOM.
func (o SbomReferenceIntotoPayloadPtrOutput) Predicate() SbomReferenceIntotoPredicatePtrOutput {
	return o.ApplyT(func(v *SbomReferenceIntotoPayload) *SbomReferenceIntotoPredicate {
		if v == nil {
			return nil
		}
		return v.Predicate
	}).(SbomReferenceIntotoPredicatePtrOutput)
}

// URI identifying the type of the Predicate.
func (o SbomReferenceIntotoPayloadPtrOutput) PredicateType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SbomReferenceIntotoPayload) *string {
		if v == nil {
			return nil
		}
		return v.PredicateType
	}).(pulumi.StringPtrOutput)
}

// Set of software artifacts that the attestation applies to. Each element represents a single software artifact.
func (o SbomReferenceIntotoPayloadPtrOutput) Subject() SubjectArrayOutput {
	return o.ApplyT(func(v *SbomReferenceIntotoPayload) []Subject {
		if v == nil {
			return nil
		}
		return v.Subject
	}).(SubjectArrayOutput)
}

// Identifier for the schema of the Statement.
func (o SbomReferenceIntotoPayloadPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SbomReferenceIntotoPayload) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The actual payload that contains the SBOM Reference data. The payload follows the intoto statement specification. See https://github.com/in-toto/attestation/blob/main/spec/v1.0/statement.md for more details.
type SbomReferenceIntotoPayloadResponse struct {
	// Additional parameters of the Predicate. Includes the actual data about the SBOM.
	Predicate SbomReferenceIntotoPredicateResponse `pulumi:"predicate"`
	// URI identifying the type of the Predicate.
	PredicateType string `pulumi:"predicateType"`
	// Set of software artifacts that the attestation applies to. Each element represents a single software artifact.
	Subject []SubjectResponse `pulumi:"subject"`
	// Identifier for the schema of the Statement.
	Type string `pulumi:"type"`
}

// The actual payload that contains the SBOM Reference data. The payload follows the intoto statement specification. See https://github.com/in-toto/attestation/blob/main/spec/v1.0/statement.md for more details.
type SbomReferenceIntotoPayloadResponseOutput struct{ *pulumi.OutputState }

func (SbomReferenceIntotoPayloadResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SbomReferenceIntotoPayloadResponse)(nil)).Elem()
}

func (o SbomReferenceIntotoPayloadResponseOutput) ToSbomReferenceIntotoPayloadResponseOutput() SbomReferenceIntotoPayloadResponseOutput {
	return o
}

func (o SbomReferenceIntotoPayloadResponseOutput) ToSbomReferenceIntotoPayloadResponseOutputWithContext(ctx context.Context) SbomReferenceIntotoPayloadResponseOutput {
	return o
}

// Additional parameters of the Predicate. Includes the actual data about the SBOM.
func (o SbomReferenceIntotoPayloadResponseOutput) Predicate() SbomReferenceIntotoPredicateResponseOutput {
	return o.ApplyT(func(v SbomReferenceIntotoPayloadResponse) SbomReferenceIntotoPredicateResponse { return v.Predicate }).(SbomReferenceIntotoPredicateResponseOutput)
}

// URI identifying the type of the Predicate.
func (o SbomReferenceIntotoPayloadResponseOutput) PredicateType() pulumi.StringOutput {
	return o.ApplyT(func(v SbomReferenceIntotoPayloadResponse) string { return v.PredicateType }).(pulumi.StringOutput)
}

// Set of software artifacts that the attestation applies to. Each element represents a single software artifact.
func (o SbomReferenceIntotoPayloadResponseOutput) Subject() SubjectResponseArrayOutput {
	return o.ApplyT(func(v SbomReferenceIntotoPayloadResponse) []SubjectResponse { return v.Subject }).(SubjectResponseArrayOutput)
}

// Identifier for the schema of the Statement.
func (o SbomReferenceIntotoPayloadResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SbomReferenceIntotoPayloadResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A predicate which describes the SBOM being referenced.
type SbomReferenceIntotoPredicate struct {
	// A map of algorithm to digest of the contents of the SBOM.
	Digest map[string]string `pulumi:"digest"`
	// The location of the SBOM.
	Location *string `pulumi:"location"`
	// The mime type of the SBOM.
	MimeType *string `pulumi:"mimeType"`
	// The person or system referring this predicate to the consumer.
	ReferrerId *string `pulumi:"referrerId"`
}

// SbomReferenceIntotoPredicateInput is an input type that accepts SbomReferenceIntotoPredicateArgs and SbomReferenceIntotoPredicateOutput values.
// You can construct a concrete instance of `SbomReferenceIntotoPredicateInput` via:
//
//	SbomReferenceIntotoPredicateArgs{...}
type SbomReferenceIntotoPredicateInput interface {
	pulumi.Input

	ToSbomReferenceIntotoPredicateOutput() SbomReferenceIntotoPredicateOutput
	ToSbomReferenceIntotoPredicateOutputWithContext(context.Context) SbomReferenceIntotoPredicateOutput
}

// A predicate which describes the SBOM being referenced.
type SbomReferenceIntotoPredicateArgs struct {
	// A map of algorithm to digest of the contents of the SBOM.
	Digest pulumi.StringMapInput `pulumi:"digest"`
	// The location of the SBOM.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// The mime type of the SBOM.
	MimeType pulumi.StringPtrInput `pulumi:"mimeType"`
	// The person or system referring this predicate to the consumer.
	ReferrerId pulumi.StringPtrInput `pulumi:"referrerId"`
}

func (SbomReferenceIntotoPredicateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SbomReferenceIntotoPredicate)(nil)).Elem()
}

func (i SbomReferenceIntotoPredicateArgs) ToSbomReferenceIntotoPredicateOutput() SbomReferenceIntotoPredicateOutput {
	return i.ToSbomReferenceIntotoPredicateOutputWithContext(context.Background())
}

func (i SbomReferenceIntotoPredicateArgs) ToSbomReferenceIntotoPredicateOutputWithContext(ctx context.Context) SbomReferenceIntotoPredicateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SbomReferenceIntotoPredicateOutput)
}

func (i SbomReferenceIntotoPredicateArgs) ToSbomReferenceIntotoPredicatePtrOutput() SbomReferenceIntotoPredicatePtrOutput {
	return i.ToSbomReferenceIntotoPredicatePtrOutputWithContext(context.Background())
}

func (i SbomReferenceIntotoPredicateArgs) ToSbomReferenceIntotoPredicatePtrOutputWithContext(ctx context.Context) SbomReferenceIntotoPredicatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SbomReferenceIntotoPredicateOutput).ToSbomReferenceIntotoPredicatePtrOutputWithContext(ctx)
}

// SbomReferenceIntotoPredicatePtrInput is an input type that accepts SbomReferenceIntotoPredicateArgs, SbomReferenceIntotoPredicatePtr and SbomReferenceIntotoPredicatePtrOutput values.
// You can construct a concrete instance of `SbomReferenceIntotoPredicatePtrInput` via:
//
//	        SbomReferenceIntotoPredicateArgs{...}
//
//	or:
//
//	        nil
type SbomReferenceIntotoPredicatePtrInput interface {
	pulumi.Input

	ToSbomReferenceIntotoPredicatePtrOutput() SbomReferenceIntotoPredicatePtrOutput
	ToSbomReferenceIntotoPredicatePtrOutputWithContext(context.Context) SbomReferenceIntotoPredicatePtrOutput
}

type sbomReferenceIntotoPredicatePtrType SbomReferenceIntotoPredicateArgs

func SbomReferenceIntotoPredicatePtr(v *SbomReferenceIntotoPredicateArgs) SbomReferenceIntotoPredicatePtrInput {
	return (*sbomReferenceIntotoPredicatePtrType)(v)
}

func (*sbomReferenceIntotoPredicatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SbomReferenceIntotoPredicate)(nil)).Elem()
}

func (i *sbomReferenceIntotoPredicatePtrType) ToSbomReferenceIntotoPredicatePtrOutput() SbomReferenceIntotoPredicatePtrOutput {
	return i.ToSbomReferenceIntotoPredicatePtrOutputWithContext(context.Background())
}

func (i *sbomReferenceIntotoPredicatePtrType) ToSbomReferenceIntotoPredicatePtrOutputWithContext(ctx context.Context) SbomReferenceIntotoPredicatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SbomReferenceIntotoPredicatePtrOutput)
}

// A predicate which describes the SBOM being referenced.
type SbomReferenceIntotoPredicateOutput struct{ *pulumi.OutputState }

func (SbomReferenceIntotoPredicateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SbomReferenceIntotoPredicate)(nil)).Elem()
}

func (o SbomReferenceIntotoPredicateOutput) ToSbomReferenceIntotoPredicateOutput() SbomReferenceIntotoPredicateOutput {
	return o
}

func (o SbomReferenceIntotoPredicateOutput) ToSbomReferenceIntotoPredicateOutputWithContext(ctx context.Context) SbomReferenceIntotoPredicateOutput {
	return o
}

func (o SbomReferenceIntotoPredicateOutput) ToSbomReferenceIntotoPredicatePtrOutput() SbomReferenceIntotoPredicatePtrOutput {
	return o.ToSbomReferenceIntotoPredicatePtrOutputWithContext(context.Background())
}

func (o SbomReferenceIntotoPredicateOutput) ToSbomReferenceIntotoPredicatePtrOutputWithContext(ctx context.Context) SbomReferenceIntotoPredicatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SbomReferenceIntotoPredicate) *SbomReferenceIntotoPredicate {
		return &v
	}).(SbomReferenceIntotoPredicatePtrOutput)
}

// A map of algorithm to digest of the contents of the SBOM.
func (o SbomReferenceIntotoPredicateOutput) Digest() pulumi.StringMapOutput {
	return o.ApplyT(func(v SbomReferenceIntotoPredicate) map[string]string { return v.Digest }).(pulumi.StringMapOutput)
}

// The location of the SBOM.
func (o SbomReferenceIntotoPredicateOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SbomReferenceIntotoPredicate) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// The mime type of the SBOM.
func (o SbomReferenceIntotoPredicateOutput) MimeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SbomReferenceIntotoPredicate) *string { return v.MimeType }).(pulumi.StringPtrOutput)
}

// The person or system referring this predicate to the consumer.
func (o SbomReferenceIntotoPredicateOutput) ReferrerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SbomReferenceIntotoPredicate) *string { return v.ReferrerId }).(pulumi.StringPtrOutput)
}

type SbomReferenceIntotoPredicatePtrOutput struct{ *pulumi.OutputState }

func (SbomReferenceIntotoPredicatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SbomReferenceIntotoPredicate)(nil)).Elem()
}

func (o SbomReferenceIntotoPredicatePtrOutput) ToSbomReferenceIntotoPredicatePtrOutput() SbomReferenceIntotoPredicatePtrOutput {
	return o
}

func (o SbomReferenceIntotoPredicatePtrOutput) ToSbomReferenceIntotoPredicatePtrOutputWithContext(ctx context.Context) SbomReferenceIntotoPredicatePtrOutput {
	return o
}

func (o SbomReferenceIntotoPredicatePtrOutput) Elem() SbomReferenceIntotoPredicateOutput {
	return o.ApplyT(func(v *SbomReferenceIntotoPredicate) SbomReferenceIntotoPredicate {
		if v != nil {
			return *v
		}
		var ret SbomReferenceIntotoPredicate
		return ret
	}).(SbomReferenceIntotoPredicateOutput)
}

// A map of algorithm to digest of the contents of the SBOM.
func (o SbomReferenceIntotoPredicatePtrOutput) Digest() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SbomReferenceIntotoPredicate) map[string]string {
		if v == nil {
			return nil
		}
		return v.Digest
	}).(pulumi.StringMapOutput)
}

// The location of the SBOM.
func (o SbomReferenceIntotoPredicatePtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SbomReferenceIntotoPredicate) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// The mime type of the SBOM.
func (o SbomReferenceIntotoPredicatePtrOutput) MimeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SbomReferenceIntotoPredicate) *string {
		if v == nil {
			return nil
		}
		return v.MimeType
	}).(pulumi.StringPtrOutput)
}

// The person or system referring this predicate to the consumer.
func (o SbomReferenceIntotoPredicatePtrOutput) ReferrerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SbomReferenceIntotoPredicate) *string {
		if v == nil {
			return nil
		}
		return v.ReferrerId
	}).(pulumi.StringPtrOutput)
}

// A predicate which describes the SBOM being referenced.
type SbomReferenceIntotoPredicateResponse struct {
	// A map of algorithm to digest of the contents of the SBOM.
	Digest map[string]string `pulumi:"digest"`
	// The location of the SBOM.
	Location string `pulumi:"location"`
	// The mime type of the SBOM.
	MimeType string `pulumi:"mimeType"`
	// The person or system referring this predicate to the consumer.
	ReferrerId string `pulumi:"referrerId"`
}

// A predicate which describes the SBOM being referenced.
type SbomReferenceIntotoPredicateResponseOutput struct{ *pulumi.OutputState }

func (SbomReferenceIntotoPredicateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SbomReferenceIntotoPredicateResponse)(nil)).Elem()
}

func (o SbomReferenceIntotoPredicateResponseOutput) ToSbomReferenceIntotoPredicateResponseOutput() SbomReferenceIntotoPredicateResponseOutput {
	return o
}

func (o SbomReferenceIntotoPredicateResponseOutput) ToSbomReferenceIntotoPredicateResponseOutputWithContext(ctx context.Context) SbomReferenceIntotoPredicateResponseOutput {
	return o
}

// A map of algorithm to digest of the contents of the SBOM.
func (o SbomReferenceIntotoPredicateResponseOutput) Digest() pulumi.StringMapOutput {
	return o.ApplyT(func(v SbomReferenceIntotoPredicateResponse) map[string]string { return v.Digest }).(pulumi.StringMapOutput)
}

// The location of the SBOM.
func (o SbomReferenceIntotoPredicateResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v SbomReferenceIntotoPredicateResponse) string { return v.Location }).(pulumi.StringOutput)
}

// The mime type of the SBOM.
func (o SbomReferenceIntotoPredicateResponseOutput) MimeType() pulumi.StringOutput {
	return o.ApplyT(func(v SbomReferenceIntotoPredicateResponse) string { return v.MimeType }).(pulumi.StringOutput)
}

// The person or system referring this predicate to the consumer.
func (o SbomReferenceIntotoPredicateResponseOutput) ReferrerId() pulumi.StringOutput {
	return o.ApplyT(func(v SbomReferenceIntotoPredicateResponse) string { return v.ReferrerId }).(pulumi.StringOutput)
}

// SlsaBuilder encapsulates the identity of the builder of this provenance.
type SlsaBuilder struct {
	// id is the id of the slsa provenance builder
	Id *string `pulumi:"id"`
}

// SlsaBuilderInput is an input type that accepts SlsaBuilderArgs and SlsaBuilderOutput values.
// You can construct a concrete instance of `SlsaBuilderInput` via:
//
//	SlsaBuilderArgs{...}
type SlsaBuilderInput interface {
	pulumi.Input

	ToSlsaBuilderOutput() SlsaBuilderOutput
	ToSlsaBuilderOutputWithContext(context.Context) SlsaBuilderOutput
}

// SlsaBuilder encapsulates the identity of the builder of this provenance.
type SlsaBuilderArgs struct {
	// id is the id of the slsa provenance builder
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (SlsaBuilderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SlsaBuilder)(nil)).Elem()
}

func (i SlsaBuilderArgs) ToSlsaBuilderOutput() SlsaBuilderOutput {
	return i.ToSlsaBuilderOutputWithContext(context.Background())
}

func (i SlsaBuilderArgs) ToSlsaBuilderOutputWithContext(ctx context.Context) SlsaBuilderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlsaBuilderOutput)
}

func (i SlsaBuilderArgs) ToSlsaBuilderPtrOutput() SlsaBuilderPtrOutput {
	return i.ToSlsaBuilderPtrOutputWithContext(context.Background())
}

func (i SlsaBuilderArgs) ToSlsaBuilderPtrOutputWithContext(ctx context.Context) SlsaBuilderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlsaBuilderOutput).ToSlsaBuilderPtrOutputWithContext(ctx)
}

// SlsaBuilderPtrInput is an input type that accepts SlsaBuilderArgs, SlsaBuilderPtr and SlsaBuilderPtrOutput values.
// You can construct a concrete instance of `SlsaBuilderPtrInput` via:
//
//	        SlsaBuilderArgs{...}
//
//	or:
//
//	        nil
type SlsaBuilderPtrInput interface {
	pulumi.Input

	ToSlsaBuilderPtrOutput() SlsaBuilderPtrOutput
	ToSlsaBuilderPtrOutputWithContext(context.Context) SlsaBuilderPtrOutput
}

type slsaBuilderPtrType SlsaBuilderArgs

func SlsaBuilderPtr(v *SlsaBuilderArgs) SlsaBuilderPtrInput {
	return (*slsaBuilderPtrType)(v)
}

func (*slsaBuilderPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SlsaBuilder)(nil)).Elem()
}

func (i *slsaBuilderPtrType) ToSlsaBuilderPtrOutput() SlsaBuilderPtrOutput {
	return i.ToSlsaBuilderPtrOutputWithContext(context.Background())
}

func (i *slsaBuilderPtrType) ToSlsaBuilderPtrOutputWithContext(ctx context.Context) SlsaBuilderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlsaBuilderPtrOutput)
}

// SlsaBuilder encapsulates the identity of the builder of this provenance.
type SlsaBuilderOutput struct{ *pulumi.OutputState }

func (SlsaBuilderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SlsaBuilder)(nil)).Elem()
}

func (o SlsaBuilderOutput) ToSlsaBuilderOutput() SlsaBuilderOutput {
	return o
}

func (o SlsaBuilderOutput) ToSlsaBuilderOutputWithContext(ctx context.Context) SlsaBuilderOutput {
	return o
}

func (o SlsaBuilderOutput) ToSlsaBuilderPtrOutput() SlsaBuilderPtrOutput {
	return o.ToSlsaBuilderPtrOutputWithContext(context.Background())
}

func (o SlsaBuilderOutput) ToSlsaBuilderPtrOutputWithContext(ctx context.Context) SlsaBuilderPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SlsaBuilder) *SlsaBuilder {
		return &v
	}).(SlsaBuilderPtrOutput)
}

// id is the id of the slsa provenance builder
func (o SlsaBuilderOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SlsaBuilder) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type SlsaBuilderPtrOutput struct{ *pulumi.OutputState }

func (SlsaBuilderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SlsaBuilder)(nil)).Elem()
}

func (o SlsaBuilderPtrOutput) ToSlsaBuilderPtrOutput() SlsaBuilderPtrOutput {
	return o
}

func (o SlsaBuilderPtrOutput) ToSlsaBuilderPtrOutputWithContext(ctx context.Context) SlsaBuilderPtrOutput {
	return o
}

func (o SlsaBuilderPtrOutput) Elem() SlsaBuilderOutput {
	return o.ApplyT(func(v *SlsaBuilder) SlsaBuilder {
		if v != nil {
			return *v
		}
		var ret SlsaBuilder
		return ret
	}).(SlsaBuilderOutput)
}

// id is the id of the slsa provenance builder
func (o SlsaBuilderPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SlsaBuilder) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// SlsaBuilder encapsulates the identity of the builder of this provenance.
type SlsaBuilderResponse struct {
}

// SlsaBuilder encapsulates the identity of the builder of this provenance.
type SlsaBuilderResponseOutput struct{ *pulumi.OutputState }

func (SlsaBuilderResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SlsaBuilderResponse)(nil)).Elem()
}

func (o SlsaBuilderResponseOutput) ToSlsaBuilderResponseOutput() SlsaBuilderResponseOutput {
	return o
}

func (o SlsaBuilderResponseOutput) ToSlsaBuilderResponseOutputWithContext(ctx context.Context) SlsaBuilderResponseOutput {
	return o
}

// Indicates that the builder claims certain fields in this message to be complete.
type SlsaCompleteness struct {
	// If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe.
	Arguments *bool `pulumi:"arguments"`
	// If true, the builder claims that recipe.environment is claimed to be complete.
	Environment *bool `pulumi:"environment"`
	// If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called "hermetic".
	Materials *bool `pulumi:"materials"`
}

// SlsaCompletenessInput is an input type that accepts SlsaCompletenessArgs and SlsaCompletenessOutput values.
// You can construct a concrete instance of `SlsaCompletenessInput` via:
//
//	SlsaCompletenessArgs{...}
type SlsaCompletenessInput interface {
	pulumi.Input

	ToSlsaCompletenessOutput() SlsaCompletenessOutput
	ToSlsaCompletenessOutputWithContext(context.Context) SlsaCompletenessOutput
}

// Indicates that the builder claims certain fields in this message to be complete.
type SlsaCompletenessArgs struct {
	// If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe.
	Arguments pulumi.BoolPtrInput `pulumi:"arguments"`
	// If true, the builder claims that recipe.environment is claimed to be complete.
	Environment pulumi.BoolPtrInput `pulumi:"environment"`
	// If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called "hermetic".
	Materials pulumi.BoolPtrInput `pulumi:"materials"`
}

func (SlsaCompletenessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SlsaCompleteness)(nil)).Elem()
}

func (i SlsaCompletenessArgs) ToSlsaCompletenessOutput() SlsaCompletenessOutput {
	return i.ToSlsaCompletenessOutputWithContext(context.Background())
}

func (i SlsaCompletenessArgs) ToSlsaCompletenessOutputWithContext(ctx context.Context) SlsaCompletenessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlsaCompletenessOutput)
}

func (i SlsaCompletenessArgs) ToSlsaCompletenessPtrOutput() SlsaCompletenessPtrOutput {
	return i.ToSlsaCompletenessPtrOutputWithContext(context.Background())
}

func (i SlsaCompletenessArgs) ToSlsaCompletenessPtrOutputWithContext(ctx context.Context) SlsaCompletenessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlsaCompletenessOutput).ToSlsaCompletenessPtrOutputWithContext(ctx)
}

// SlsaCompletenessPtrInput is an input type that accepts SlsaCompletenessArgs, SlsaCompletenessPtr and SlsaCompletenessPtrOutput values.
// You can construct a concrete instance of `SlsaCompletenessPtrInput` via:
//
//	        SlsaCompletenessArgs{...}
//
//	or:
//
//	        nil
type SlsaCompletenessPtrInput interface {
	pulumi.Input

	ToSlsaCompletenessPtrOutput() SlsaCompletenessPtrOutput
	ToSlsaCompletenessPtrOutputWithContext(context.Context) SlsaCompletenessPtrOutput
}

type slsaCompletenessPtrType SlsaCompletenessArgs

func SlsaCompletenessPtr(v *SlsaCompletenessArgs) SlsaCompletenessPtrInput {
	return (*slsaCompletenessPtrType)(v)
}

func (*slsaCompletenessPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SlsaCompleteness)(nil)).Elem()
}

func (i *slsaCompletenessPtrType) ToSlsaCompletenessPtrOutput() SlsaCompletenessPtrOutput {
	return i.ToSlsaCompletenessPtrOutputWithContext(context.Background())
}

func (i *slsaCompletenessPtrType) ToSlsaCompletenessPtrOutputWithContext(ctx context.Context) SlsaCompletenessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlsaCompletenessPtrOutput)
}

// Indicates that the builder claims certain fields in this message to be complete.
type SlsaCompletenessOutput struct{ *pulumi.OutputState }

func (SlsaCompletenessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SlsaCompleteness)(nil)).Elem()
}

func (o SlsaCompletenessOutput) ToSlsaCompletenessOutput() SlsaCompletenessOutput {
	return o
}

func (o SlsaCompletenessOutput) ToSlsaCompletenessOutputWithContext(ctx context.Context) SlsaCompletenessOutput {
	return o
}

func (o SlsaCompletenessOutput) ToSlsaCompletenessPtrOutput() SlsaCompletenessPtrOutput {
	return o.ToSlsaCompletenessPtrOutputWithContext(context.Background())
}

func (o SlsaCompletenessOutput) ToSlsaCompletenessPtrOutputWithContext(ctx context.Context) SlsaCompletenessPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SlsaCompleteness) *SlsaCompleteness {
		return &v
	}).(SlsaCompletenessPtrOutput)
}

// If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe.
func (o SlsaCompletenessOutput) Arguments() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SlsaCompleteness) *bool { return v.Arguments }).(pulumi.BoolPtrOutput)
}

// If true, the builder claims that recipe.environment is claimed to be complete.
func (o SlsaCompletenessOutput) Environment() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SlsaCompleteness) *bool { return v.Environment }).(pulumi.BoolPtrOutput)
}

// If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called "hermetic".
func (o SlsaCompletenessOutput) Materials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SlsaCompleteness) *bool { return v.Materials }).(pulumi.BoolPtrOutput)
}

type SlsaCompletenessPtrOutput struct{ *pulumi.OutputState }

func (SlsaCompletenessPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SlsaCompleteness)(nil)).Elem()
}

func (o SlsaCompletenessPtrOutput) ToSlsaCompletenessPtrOutput() SlsaCompletenessPtrOutput {
	return o
}

func (o SlsaCompletenessPtrOutput) ToSlsaCompletenessPtrOutputWithContext(ctx context.Context) SlsaCompletenessPtrOutput {
	return o
}

func (o SlsaCompletenessPtrOutput) Elem() SlsaCompletenessOutput {
	return o.ApplyT(func(v *SlsaCompleteness) SlsaCompleteness {
		if v != nil {
			return *v
		}
		var ret SlsaCompleteness
		return ret
	}).(SlsaCompletenessOutput)
}

// If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe.
func (o SlsaCompletenessPtrOutput) Arguments() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SlsaCompleteness) *bool {
		if v == nil {
			return nil
		}
		return v.Arguments
	}).(pulumi.BoolPtrOutput)
}

// If true, the builder claims that recipe.environment is claimed to be complete.
func (o SlsaCompletenessPtrOutput) Environment() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SlsaCompleteness) *bool {
		if v == nil {
			return nil
		}
		return v.Environment
	}).(pulumi.BoolPtrOutput)
}

// If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called "hermetic".
func (o SlsaCompletenessPtrOutput) Materials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SlsaCompleteness) *bool {
		if v == nil {
			return nil
		}
		return v.Materials
	}).(pulumi.BoolPtrOutput)
}

// Indicates that the builder claims certain fields in this message to be complete.
type SlsaCompletenessResponse struct {
	// If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe.
	Arguments bool `pulumi:"arguments"`
	// If true, the builder claims that recipe.environment is claimed to be complete.
	Environment bool `pulumi:"environment"`
	// If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called "hermetic".
	Materials bool `pulumi:"materials"`
}

// Indicates that the builder claims certain fields in this message to be complete.
type SlsaCompletenessResponseOutput struct{ *pulumi.OutputState }

func (SlsaCompletenessResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SlsaCompletenessResponse)(nil)).Elem()
}

func (o SlsaCompletenessResponseOutput) ToSlsaCompletenessResponseOutput() SlsaCompletenessResponseOutput {
	return o
}

func (o SlsaCompletenessResponseOutput) ToSlsaCompletenessResponseOutputWithContext(ctx context.Context) SlsaCompletenessResponseOutput {
	return o
}

// If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe.
func (o SlsaCompletenessResponseOutput) Arguments() pulumi.BoolOutput {
	return o.ApplyT(func(v SlsaCompletenessResponse) bool { return v.Arguments }).(pulumi.BoolOutput)
}

// If true, the builder claims that recipe.environment is claimed to be complete.
func (o SlsaCompletenessResponseOutput) Environment() pulumi.BoolOutput {
	return o.ApplyT(func(v SlsaCompletenessResponse) bool { return v.Environment }).(pulumi.BoolOutput)
}

// If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called "hermetic".
func (o SlsaCompletenessResponseOutput) Materials() pulumi.BoolOutput {
	return o.ApplyT(func(v SlsaCompletenessResponse) bool { return v.Materials }).(pulumi.BoolOutput)
}

// Other properties of the build.
type SlsaMetadata struct {
	// The timestamp of when the build completed.
	BuildFinishedOn *string `pulumi:"buildFinishedOn"`
	// Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec.
	BuildInvocationId *string `pulumi:"buildInvocationId"`
	// The timestamp of when the build started.
	BuildStartedOn *string `pulumi:"buildStartedOn"`
	// Indicates that the builder claims certain fields in this message to be complete.
	Completeness *SlsaCompleteness `pulumi:"completeness"`
	// If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output.
	Reproducible *bool `pulumi:"reproducible"`
}

// SlsaMetadataInput is an input type that accepts SlsaMetadataArgs and SlsaMetadataOutput values.
// You can construct a concrete instance of `SlsaMetadataInput` via:
//
//	SlsaMetadataArgs{...}
type SlsaMetadataInput interface {
	pulumi.Input

	ToSlsaMetadataOutput() SlsaMetadataOutput
	ToSlsaMetadataOutputWithContext(context.Context) SlsaMetadataOutput
}

// Other properties of the build.
type SlsaMetadataArgs struct {
	// The timestamp of when the build completed.
	BuildFinishedOn pulumi.StringPtrInput `pulumi:"buildFinishedOn"`
	// Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec.
	BuildInvocationId pulumi.StringPtrInput `pulumi:"buildInvocationId"`
	// The timestamp of when the build started.
	BuildStartedOn pulumi.StringPtrInput `pulumi:"buildStartedOn"`
	// Indicates that the builder claims certain fields in this message to be complete.
	Completeness SlsaCompletenessPtrInput `pulumi:"completeness"`
	// If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output.
	Reproducible pulumi.BoolPtrInput `pulumi:"reproducible"`
}

func (SlsaMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SlsaMetadata)(nil)).Elem()
}

func (i SlsaMetadataArgs) ToSlsaMetadataOutput() SlsaMetadataOutput {
	return i.ToSlsaMetadataOutputWithContext(context.Background())
}

func (i SlsaMetadataArgs) ToSlsaMetadataOutputWithContext(ctx context.Context) SlsaMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlsaMetadataOutput)
}

func (i SlsaMetadataArgs) ToSlsaMetadataPtrOutput() SlsaMetadataPtrOutput {
	return i.ToSlsaMetadataPtrOutputWithContext(context.Background())
}

func (i SlsaMetadataArgs) ToSlsaMetadataPtrOutputWithContext(ctx context.Context) SlsaMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlsaMetadataOutput).ToSlsaMetadataPtrOutputWithContext(ctx)
}

// SlsaMetadataPtrInput is an input type that accepts SlsaMetadataArgs, SlsaMetadataPtr and SlsaMetadataPtrOutput values.
// You can construct a concrete instance of `SlsaMetadataPtrInput` via:
//
//	        SlsaMetadataArgs{...}
//
//	or:
//
//	        nil
type SlsaMetadataPtrInput interface {
	pulumi.Input

	ToSlsaMetadataPtrOutput() SlsaMetadataPtrOutput
	ToSlsaMetadataPtrOutputWithContext(context.Context) SlsaMetadataPtrOutput
}

type slsaMetadataPtrType SlsaMetadataArgs

func SlsaMetadataPtr(v *SlsaMetadataArgs) SlsaMetadataPtrInput {
	return (*slsaMetadataPtrType)(v)
}

func (*slsaMetadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SlsaMetadata)(nil)).Elem()
}

func (i *slsaMetadataPtrType) ToSlsaMetadataPtrOutput() SlsaMetadataPtrOutput {
	return i.ToSlsaMetadataPtrOutputWithContext(context.Background())
}

func (i *slsaMetadataPtrType) ToSlsaMetadataPtrOutputWithContext(ctx context.Context) SlsaMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlsaMetadataPtrOutput)
}

// Other properties of the build.
type SlsaMetadataOutput struct{ *pulumi.OutputState }

func (SlsaMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SlsaMetadata)(nil)).Elem()
}

func (o SlsaMetadataOutput) ToSlsaMetadataOutput() SlsaMetadataOutput {
	return o
}

func (o SlsaMetadataOutput) ToSlsaMetadataOutputWithContext(ctx context.Context) SlsaMetadataOutput {
	return o
}

func (o SlsaMetadataOutput) ToSlsaMetadataPtrOutput() SlsaMetadataPtrOutput {
	return o.ToSlsaMetadataPtrOutputWithContext(context.Background())
}

func (o SlsaMetadataOutput) ToSlsaMetadataPtrOutputWithContext(ctx context.Context) SlsaMetadataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SlsaMetadata) *SlsaMetadata {
		return &v
	}).(SlsaMetadataPtrOutput)
}

// The timestamp of when the build completed.
func (o SlsaMetadataOutput) BuildFinishedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SlsaMetadata) *string { return v.BuildFinishedOn }).(pulumi.StringPtrOutput)
}

// Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec.
func (o SlsaMetadataOutput) BuildInvocationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SlsaMetadata) *string { return v.BuildInvocationId }).(pulumi.StringPtrOutput)
}

// The timestamp of when the build started.
func (o SlsaMetadataOutput) BuildStartedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SlsaMetadata) *string { return v.BuildStartedOn }).(pulumi.StringPtrOutput)
}

// Indicates that the builder claims certain fields in this message to be complete.
func (o SlsaMetadataOutput) Completeness() SlsaCompletenessPtrOutput {
	return o.ApplyT(func(v SlsaMetadata) *SlsaCompleteness { return v.Completeness }).(SlsaCompletenessPtrOutput)
}

// If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output.
func (o SlsaMetadataOutput) Reproducible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SlsaMetadata) *bool { return v.Reproducible }).(pulumi.BoolPtrOutput)
}

type SlsaMetadataPtrOutput struct{ *pulumi.OutputState }

func (SlsaMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SlsaMetadata)(nil)).Elem()
}

func (o SlsaMetadataPtrOutput) ToSlsaMetadataPtrOutput() SlsaMetadataPtrOutput {
	return o
}

func (o SlsaMetadataPtrOutput) ToSlsaMetadataPtrOutputWithContext(ctx context.Context) SlsaMetadataPtrOutput {
	return o
}

func (o SlsaMetadataPtrOutput) Elem() SlsaMetadataOutput {
	return o.ApplyT(func(v *SlsaMetadata) SlsaMetadata {
		if v != nil {
			return *v
		}
		var ret SlsaMetadata
		return ret
	}).(SlsaMetadataOutput)
}

// The timestamp of when the build completed.
func (o SlsaMetadataPtrOutput) BuildFinishedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SlsaMetadata) *string {
		if v == nil {
			return nil
		}
		return v.BuildFinishedOn
	}).(pulumi.StringPtrOutput)
}

// Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec.
func (o SlsaMetadataPtrOutput) BuildInvocationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SlsaMetadata) *string {
		if v == nil {
			return nil
		}
		return v.BuildInvocationId
	}).(pulumi.StringPtrOutput)
}

// The timestamp of when the build started.
func (o SlsaMetadataPtrOutput) BuildStartedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SlsaMetadata) *string {
		if v == nil {
			return nil
		}
		return v.BuildStartedOn
	}).(pulumi.StringPtrOutput)
}

// Indicates that the builder claims certain fields in this message to be complete.
func (o SlsaMetadataPtrOutput) Completeness() SlsaCompletenessPtrOutput {
	return o.ApplyT(func(v *SlsaMetadata) *SlsaCompleteness {
		if v == nil {
			return nil
		}
		return v.Completeness
	}).(SlsaCompletenessPtrOutput)
}

// If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output.
func (o SlsaMetadataPtrOutput) Reproducible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SlsaMetadata) *bool {
		if v == nil {
			return nil
		}
		return v.Reproducible
	}).(pulumi.BoolPtrOutput)
}

// Other properties of the build.
type SlsaMetadataResponse struct {
	// The timestamp of when the build completed.
	BuildFinishedOn string `pulumi:"buildFinishedOn"`
	// Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec.
	BuildInvocationId string `pulumi:"buildInvocationId"`
	// The timestamp of when the build started.
	BuildStartedOn string `pulumi:"buildStartedOn"`
	// Indicates that the builder claims certain fields in this message to be complete.
	Completeness SlsaCompletenessResponse `pulumi:"completeness"`
	// If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output.
	Reproducible bool `pulumi:"reproducible"`
}

// Other properties of the build.
type SlsaMetadataResponseOutput struct{ *pulumi.OutputState }

func (SlsaMetadataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SlsaMetadataResponse)(nil)).Elem()
}

func (o SlsaMetadataResponseOutput) ToSlsaMetadataResponseOutput() SlsaMetadataResponseOutput {
	return o
}

func (o SlsaMetadataResponseOutput) ToSlsaMetadataResponseOutputWithContext(ctx context.Context) SlsaMetadataResponseOutput {
	return o
}

// The timestamp of when the build completed.
func (o SlsaMetadataResponseOutput) BuildFinishedOn() pulumi.StringOutput {
	return o.ApplyT(func(v SlsaMetadataResponse) string { return v.BuildFinishedOn }).(pulumi.StringOutput)
}

// Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec.
func (o SlsaMetadataResponseOutput) BuildInvocationId() pulumi.StringOutput {
	return o.ApplyT(func(v SlsaMetadataResponse) string { return v.BuildInvocationId }).(pulumi.StringOutput)
}

// The timestamp of when the build started.
func (o SlsaMetadataResponseOutput) BuildStartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v SlsaMetadataResponse) string { return v.BuildStartedOn }).(pulumi.StringOutput)
}

// Indicates that the builder claims certain fields in this message to be complete.
func (o SlsaMetadataResponseOutput) Completeness() SlsaCompletenessResponseOutput {
	return o.ApplyT(func(v SlsaMetadataResponse) SlsaCompletenessResponse { return v.Completeness }).(SlsaCompletenessResponseOutput)
}

// If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output.
func (o SlsaMetadataResponseOutput) Reproducible() pulumi.BoolOutput {
	return o.ApplyT(func(v SlsaMetadataResponse) bool { return v.Reproducible }).(pulumi.BoolOutput)
}

// SlsaProvenance is the slsa provenance as defined by the slsa spec.
type SlsaProvenance struct {
	// builder is the builder of this provenance
	Builder *SlsaBuilder `pulumi:"builder"`
	// The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.
	Materials []Material `pulumi:"materials"`
	// metadata is the metadata of the provenance
	Metadata *SlsaMetadata `pulumi:"metadata"`
	// Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit identical output (if the build is reproducible).
	Recipe *SlsaRecipe `pulumi:"recipe"`
}

// SlsaProvenanceInput is an input type that accepts SlsaProvenanceArgs and SlsaProvenanceOutput values.
// You can construct a concrete instance of `SlsaProvenanceInput` via:
//
//	SlsaProvenanceArgs{...}
type SlsaProvenanceInput interface {
	pulumi.Input

	ToSlsaProvenanceOutput() SlsaProvenanceOutput
	ToSlsaProvenanceOutputWithContext(context.Context) SlsaProvenanceOutput
}

// SlsaProvenance is the slsa provenance as defined by the slsa spec.
type SlsaProvenanceArgs struct {
	// builder is the builder of this provenance
	Builder SlsaBuilderPtrInput `pulumi:"builder"`
	// The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.
	Materials MaterialArrayInput `pulumi:"materials"`
	// metadata is the metadata of the provenance
	Metadata SlsaMetadataPtrInput `pulumi:"metadata"`
	// Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit identical output (if the build is reproducible).
	Recipe SlsaRecipePtrInput `pulumi:"recipe"`
}

func (SlsaProvenanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SlsaProvenance)(nil)).Elem()
}

func (i SlsaProvenanceArgs) ToSlsaProvenanceOutput() SlsaProvenanceOutput {
	return i.ToSlsaProvenanceOutputWithContext(context.Background())
}

func (i SlsaProvenanceArgs) ToSlsaProvenanceOutputWithContext(ctx context.Context) SlsaProvenanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlsaProvenanceOutput)
}

func (i SlsaProvenanceArgs) ToSlsaProvenancePtrOutput() SlsaProvenancePtrOutput {
	return i.ToSlsaProvenancePtrOutputWithContext(context.Background())
}

func (i SlsaProvenanceArgs) ToSlsaProvenancePtrOutputWithContext(ctx context.Context) SlsaProvenancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlsaProvenanceOutput).ToSlsaProvenancePtrOutputWithContext(ctx)
}

// SlsaProvenancePtrInput is an input type that accepts SlsaProvenanceArgs, SlsaProvenancePtr and SlsaProvenancePtrOutput values.
// You can construct a concrete instance of `SlsaProvenancePtrInput` via:
//
//	        SlsaProvenanceArgs{...}
//
//	or:
//
//	        nil
type SlsaProvenancePtrInput interface {
	pulumi.Input

	ToSlsaProvenancePtrOutput() SlsaProvenancePtrOutput
	ToSlsaProvenancePtrOutputWithContext(context.Context) SlsaProvenancePtrOutput
}

type slsaProvenancePtrType SlsaProvenanceArgs

func SlsaProvenancePtr(v *SlsaProvenanceArgs) SlsaProvenancePtrInput {
	return (*slsaProvenancePtrType)(v)
}

func (*slsaProvenancePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SlsaProvenance)(nil)).Elem()
}

func (i *slsaProvenancePtrType) ToSlsaProvenancePtrOutput() SlsaProvenancePtrOutput {
	return i.ToSlsaProvenancePtrOutputWithContext(context.Background())
}

func (i *slsaProvenancePtrType) ToSlsaProvenancePtrOutputWithContext(ctx context.Context) SlsaProvenancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlsaProvenancePtrOutput)
}

// SlsaProvenance is the slsa provenance as defined by the slsa spec.
type SlsaProvenanceOutput struct{ *pulumi.OutputState }

func (SlsaProvenanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SlsaProvenance)(nil)).Elem()
}

func (o SlsaProvenanceOutput) ToSlsaProvenanceOutput() SlsaProvenanceOutput {
	return o
}

func (o SlsaProvenanceOutput) ToSlsaProvenanceOutputWithContext(ctx context.Context) SlsaProvenanceOutput {
	return o
}

func (o SlsaProvenanceOutput) ToSlsaProvenancePtrOutput() SlsaProvenancePtrOutput {
	return o.ToSlsaProvenancePtrOutputWithContext(context.Background())
}

func (o SlsaProvenanceOutput) ToSlsaProvenancePtrOutputWithContext(ctx context.Context) SlsaProvenancePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SlsaProvenance) *SlsaProvenance {
		return &v
	}).(SlsaProvenancePtrOutput)
}

// builder is the builder of this provenance
func (o SlsaProvenanceOutput) Builder() SlsaBuilderPtrOutput {
	return o.ApplyT(func(v SlsaProvenance) *SlsaBuilder { return v.Builder }).(SlsaBuilderPtrOutput)
}

// The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.
func (o SlsaProvenanceOutput) Materials() MaterialArrayOutput {
	return o.ApplyT(func(v SlsaProvenance) []Material { return v.Materials }).(MaterialArrayOutput)
}

// metadata is the metadata of the provenance
func (o SlsaProvenanceOutput) Metadata() SlsaMetadataPtrOutput {
	return o.ApplyT(func(v SlsaProvenance) *SlsaMetadata { return v.Metadata }).(SlsaMetadataPtrOutput)
}

// Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit identical output (if the build is reproducible).
func (o SlsaProvenanceOutput) Recipe() SlsaRecipePtrOutput {
	return o.ApplyT(func(v SlsaProvenance) *SlsaRecipe { return v.Recipe }).(SlsaRecipePtrOutput)
}

type SlsaProvenancePtrOutput struct{ *pulumi.OutputState }

func (SlsaProvenancePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SlsaProvenance)(nil)).Elem()
}

func (o SlsaProvenancePtrOutput) ToSlsaProvenancePtrOutput() SlsaProvenancePtrOutput {
	return o
}

func (o SlsaProvenancePtrOutput) ToSlsaProvenancePtrOutputWithContext(ctx context.Context) SlsaProvenancePtrOutput {
	return o
}

func (o SlsaProvenancePtrOutput) Elem() SlsaProvenanceOutput {
	return o.ApplyT(func(v *SlsaProvenance) SlsaProvenance {
		if v != nil {
			return *v
		}
		var ret SlsaProvenance
		return ret
	}).(SlsaProvenanceOutput)
}

// builder is the builder of this provenance
func (o SlsaProvenancePtrOutput) Builder() SlsaBuilderPtrOutput {
	return o.ApplyT(func(v *SlsaProvenance) *SlsaBuilder {
		if v == nil {
			return nil
		}
		return v.Builder
	}).(SlsaBuilderPtrOutput)
}

// The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.
func (o SlsaProvenancePtrOutput) Materials() MaterialArrayOutput {
	return o.ApplyT(func(v *SlsaProvenance) []Material {
		if v == nil {
			return nil
		}
		return v.Materials
	}).(MaterialArrayOutput)
}

// metadata is the metadata of the provenance
func (o SlsaProvenancePtrOutput) Metadata() SlsaMetadataPtrOutput {
	return o.ApplyT(func(v *SlsaProvenance) *SlsaMetadata {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(SlsaMetadataPtrOutput)
}

// Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit identical output (if the build is reproducible).
func (o SlsaProvenancePtrOutput) Recipe() SlsaRecipePtrOutput {
	return o.ApplyT(func(v *SlsaProvenance) *SlsaRecipe {
		if v == nil {
			return nil
		}
		return v.Recipe
	}).(SlsaRecipePtrOutput)
}

// SlsaProvenance is the slsa provenance as defined by the slsa spec.
type SlsaProvenanceResponse struct {
	// builder is the builder of this provenance
	Builder SlsaBuilderResponse `pulumi:"builder"`
	// The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.
	Materials []MaterialResponse `pulumi:"materials"`
	// metadata is the metadata of the provenance
	Metadata SlsaMetadataResponse `pulumi:"metadata"`
	// Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit identical output (if the build is reproducible).
	Recipe SlsaRecipeResponse `pulumi:"recipe"`
}

// SlsaProvenance is the slsa provenance as defined by the slsa spec.
type SlsaProvenanceResponseOutput struct{ *pulumi.OutputState }

func (SlsaProvenanceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SlsaProvenanceResponse)(nil)).Elem()
}

func (o SlsaProvenanceResponseOutput) ToSlsaProvenanceResponseOutput() SlsaProvenanceResponseOutput {
	return o
}

func (o SlsaProvenanceResponseOutput) ToSlsaProvenanceResponseOutputWithContext(ctx context.Context) SlsaProvenanceResponseOutput {
	return o
}

// builder is the builder of this provenance
func (o SlsaProvenanceResponseOutput) Builder() SlsaBuilderResponseOutput {
	return o.ApplyT(func(v SlsaProvenanceResponse) SlsaBuilderResponse { return v.Builder }).(SlsaBuilderResponseOutput)
}

// The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.
func (o SlsaProvenanceResponseOutput) Materials() MaterialResponseArrayOutput {
	return o.ApplyT(func(v SlsaProvenanceResponse) []MaterialResponse { return v.Materials }).(MaterialResponseArrayOutput)
}

// metadata is the metadata of the provenance
func (o SlsaProvenanceResponseOutput) Metadata() SlsaMetadataResponseOutput {
	return o.ApplyT(func(v SlsaProvenanceResponse) SlsaMetadataResponse { return v.Metadata }).(SlsaMetadataResponseOutput)
}

// Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit identical output (if the build is reproducible).
func (o SlsaProvenanceResponseOutput) Recipe() SlsaRecipeResponseOutput {
	return o.ApplyT(func(v SlsaProvenanceResponse) SlsaRecipeResponse { return v.Recipe }).(SlsaRecipeResponseOutput)
}

// Keep in sync with schema at https://github.com/slsa-framework/slsa/blob/main/docs/provenance/schema/v1/provenance.proto Builder renamed to ProvenanceBuilder because of Java conflicts.
type SlsaProvenanceV1 struct {
	BuildDefinition *BuildDefinition `pulumi:"buildDefinition"`
	RunDetails      *RunDetails      `pulumi:"runDetails"`
}

// SlsaProvenanceV1Input is an input type that accepts SlsaProvenanceV1Args and SlsaProvenanceV1Output values.
// You can construct a concrete instance of `SlsaProvenanceV1Input` via:
//
//	SlsaProvenanceV1Args{...}
type SlsaProvenanceV1Input interface {
	pulumi.Input

	ToSlsaProvenanceV1Output() SlsaProvenanceV1Output
	ToSlsaProvenanceV1OutputWithContext(context.Context) SlsaProvenanceV1Output
}

// Keep in sync with schema at https://github.com/slsa-framework/slsa/blob/main/docs/provenance/schema/v1/provenance.proto Builder renamed to ProvenanceBuilder because of Java conflicts.
type SlsaProvenanceV1Args struct {
	BuildDefinition BuildDefinitionPtrInput `pulumi:"buildDefinition"`
	RunDetails      RunDetailsPtrInput      `pulumi:"runDetails"`
}

func (SlsaProvenanceV1Args) ElementType() reflect.Type {
	return reflect.TypeOf((*SlsaProvenanceV1)(nil)).Elem()
}

func (i SlsaProvenanceV1Args) ToSlsaProvenanceV1Output() SlsaProvenanceV1Output {
	return i.ToSlsaProvenanceV1OutputWithContext(context.Background())
}

func (i SlsaProvenanceV1Args) ToSlsaProvenanceV1OutputWithContext(ctx context.Context) SlsaProvenanceV1Output {
	return pulumi.ToOutputWithContext(ctx, i).(SlsaProvenanceV1Output)
}

func (i SlsaProvenanceV1Args) ToSlsaProvenanceV1PtrOutput() SlsaProvenanceV1PtrOutput {
	return i.ToSlsaProvenanceV1PtrOutputWithContext(context.Background())
}

func (i SlsaProvenanceV1Args) ToSlsaProvenanceV1PtrOutputWithContext(ctx context.Context) SlsaProvenanceV1PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlsaProvenanceV1Output).ToSlsaProvenanceV1PtrOutputWithContext(ctx)
}

// SlsaProvenanceV1PtrInput is an input type that accepts SlsaProvenanceV1Args, SlsaProvenanceV1Ptr and SlsaProvenanceV1PtrOutput values.
// You can construct a concrete instance of `SlsaProvenanceV1PtrInput` via:
//
//	        SlsaProvenanceV1Args{...}
//
//	or:
//
//	        nil
type SlsaProvenanceV1PtrInput interface {
	pulumi.Input

	ToSlsaProvenanceV1PtrOutput() SlsaProvenanceV1PtrOutput
	ToSlsaProvenanceV1PtrOutputWithContext(context.Context) SlsaProvenanceV1PtrOutput
}

type slsaProvenanceV1PtrType SlsaProvenanceV1Args

func SlsaProvenanceV1Ptr(v *SlsaProvenanceV1Args) SlsaProvenanceV1PtrInput {
	return (*slsaProvenanceV1PtrType)(v)
}

func (*slsaProvenanceV1PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SlsaProvenanceV1)(nil)).Elem()
}

func (i *slsaProvenanceV1PtrType) ToSlsaProvenanceV1PtrOutput() SlsaProvenanceV1PtrOutput {
	return i.ToSlsaProvenanceV1PtrOutputWithContext(context.Background())
}

func (i *slsaProvenanceV1PtrType) ToSlsaProvenanceV1PtrOutputWithContext(ctx context.Context) SlsaProvenanceV1PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlsaProvenanceV1PtrOutput)
}

// Keep in sync with schema at https://github.com/slsa-framework/slsa/blob/main/docs/provenance/schema/v1/provenance.proto Builder renamed to ProvenanceBuilder because of Java conflicts.
type SlsaProvenanceV1Output struct{ *pulumi.OutputState }

func (SlsaProvenanceV1Output) ElementType() reflect.Type {
	return reflect.TypeOf((*SlsaProvenanceV1)(nil)).Elem()
}

func (o SlsaProvenanceV1Output) ToSlsaProvenanceV1Output() SlsaProvenanceV1Output {
	return o
}

func (o SlsaProvenanceV1Output) ToSlsaProvenanceV1OutputWithContext(ctx context.Context) SlsaProvenanceV1Output {
	return o
}

func (o SlsaProvenanceV1Output) ToSlsaProvenanceV1PtrOutput() SlsaProvenanceV1PtrOutput {
	return o.ToSlsaProvenanceV1PtrOutputWithContext(context.Background())
}

func (o SlsaProvenanceV1Output) ToSlsaProvenanceV1PtrOutputWithContext(ctx context.Context) SlsaProvenanceV1PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SlsaProvenanceV1) *SlsaProvenanceV1 {
		return &v
	}).(SlsaProvenanceV1PtrOutput)
}

func (o SlsaProvenanceV1Output) BuildDefinition() BuildDefinitionPtrOutput {
	return o.ApplyT(func(v SlsaProvenanceV1) *BuildDefinition { return v.BuildDefinition }).(BuildDefinitionPtrOutput)
}

func (o SlsaProvenanceV1Output) RunDetails() RunDetailsPtrOutput {
	return o.ApplyT(func(v SlsaProvenanceV1) *RunDetails { return v.RunDetails }).(RunDetailsPtrOutput)
}

type SlsaProvenanceV1PtrOutput struct{ *pulumi.OutputState }

func (SlsaProvenanceV1PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SlsaProvenanceV1)(nil)).Elem()
}

func (o SlsaProvenanceV1PtrOutput) ToSlsaProvenanceV1PtrOutput() SlsaProvenanceV1PtrOutput {
	return o
}

func (o SlsaProvenanceV1PtrOutput) ToSlsaProvenanceV1PtrOutputWithContext(ctx context.Context) SlsaProvenanceV1PtrOutput {
	return o
}

func (o SlsaProvenanceV1PtrOutput) Elem() SlsaProvenanceV1Output {
	return o.ApplyT(func(v *SlsaProvenanceV1) SlsaProvenanceV1 {
		if v != nil {
			return *v
		}
		var ret SlsaProvenanceV1
		return ret
	}).(SlsaProvenanceV1Output)
}

func (o SlsaProvenanceV1PtrOutput) BuildDefinition() BuildDefinitionPtrOutput {
	return o.ApplyT(func(v *SlsaProvenanceV1) *BuildDefinition {
		if v == nil {
			return nil
		}
		return v.BuildDefinition
	}).(BuildDefinitionPtrOutput)
}

func (o SlsaProvenanceV1PtrOutput) RunDetails() RunDetailsPtrOutput {
	return o.ApplyT(func(v *SlsaProvenanceV1) *RunDetails {
		if v == nil {
			return nil
		}
		return v.RunDetails
	}).(RunDetailsPtrOutput)
}

// Keep in sync with schema at https://github.com/slsa-framework/slsa/blob/main/docs/provenance/schema/v1/provenance.proto Builder renamed to ProvenanceBuilder because of Java conflicts.
type SlsaProvenanceV1Response struct {
	BuildDefinition BuildDefinitionResponse `pulumi:"buildDefinition"`
	RunDetails      RunDetailsResponse      `pulumi:"runDetails"`
}

// Keep in sync with schema at https://github.com/slsa-framework/slsa/blob/main/docs/provenance/schema/v1/provenance.proto Builder renamed to ProvenanceBuilder because of Java conflicts.
type SlsaProvenanceV1ResponseOutput struct{ *pulumi.OutputState }

func (SlsaProvenanceV1ResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SlsaProvenanceV1Response)(nil)).Elem()
}

func (o SlsaProvenanceV1ResponseOutput) ToSlsaProvenanceV1ResponseOutput() SlsaProvenanceV1ResponseOutput {
	return o
}

func (o SlsaProvenanceV1ResponseOutput) ToSlsaProvenanceV1ResponseOutputWithContext(ctx context.Context) SlsaProvenanceV1ResponseOutput {
	return o
}

func (o SlsaProvenanceV1ResponseOutput) BuildDefinition() BuildDefinitionResponseOutput {
	return o.ApplyT(func(v SlsaProvenanceV1Response) BuildDefinitionResponse { return v.BuildDefinition }).(BuildDefinitionResponseOutput)
}

func (o SlsaProvenanceV1ResponseOutput) RunDetails() RunDetailsResponseOutput {
	return o.ApplyT(func(v SlsaProvenanceV1Response) RunDetailsResponse { return v.RunDetails }).(RunDetailsResponseOutput)
}

// SlsaProvenanceZeroTwo is the slsa provenance as defined by the slsa spec. See full explanation of fields at slsa.dev/provenance/v0.2.
type SlsaProvenanceZeroTwo struct {
	// Lists the steps in the build.
	BuildConfig map[string]interface{} `pulumi:"buildConfig"`
	// URI indicating what type of build was performed.
	BuildType *string `pulumi:"buildType"`
	// Identifies the entity that executed the recipe, which is trusted to have correctly performed the operation and populated this provenance.
	Builder *GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilder `pulumi:"builder"`
	// Identifies the event that kicked off the build.
	Invocation *GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocation `pulumi:"invocation"`
	// The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on.
	Materials []GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterial `pulumi:"materials"`
	// Other properties of the build.
	Metadata *GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadata `pulumi:"metadata"`
}

// SlsaProvenanceZeroTwoInput is an input type that accepts SlsaProvenanceZeroTwoArgs and SlsaProvenanceZeroTwoOutput values.
// You can construct a concrete instance of `SlsaProvenanceZeroTwoInput` via:
//
//	SlsaProvenanceZeroTwoArgs{...}
type SlsaProvenanceZeroTwoInput interface {
	pulumi.Input

	ToSlsaProvenanceZeroTwoOutput() SlsaProvenanceZeroTwoOutput
	ToSlsaProvenanceZeroTwoOutputWithContext(context.Context) SlsaProvenanceZeroTwoOutput
}

// SlsaProvenanceZeroTwo is the slsa provenance as defined by the slsa spec. See full explanation of fields at slsa.dev/provenance/v0.2.
type SlsaProvenanceZeroTwoArgs struct {
	// Lists the steps in the build.
	BuildConfig pulumi.MapInput `pulumi:"buildConfig"`
	// URI indicating what type of build was performed.
	BuildType pulumi.StringPtrInput `pulumi:"buildType"`
	// Identifies the entity that executed the recipe, which is trusted to have correctly performed the operation and populated this provenance.
	Builder GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderPtrInput `pulumi:"builder"`
	// Identifies the event that kicked off the build.
	Invocation GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationPtrInput `pulumi:"invocation"`
	// The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on.
	Materials GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialArrayInput `pulumi:"materials"`
	// Other properties of the build.
	Metadata GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataPtrInput `pulumi:"metadata"`
}

func (SlsaProvenanceZeroTwoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SlsaProvenanceZeroTwo)(nil)).Elem()
}

func (i SlsaProvenanceZeroTwoArgs) ToSlsaProvenanceZeroTwoOutput() SlsaProvenanceZeroTwoOutput {
	return i.ToSlsaProvenanceZeroTwoOutputWithContext(context.Background())
}

func (i SlsaProvenanceZeroTwoArgs) ToSlsaProvenanceZeroTwoOutputWithContext(ctx context.Context) SlsaProvenanceZeroTwoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlsaProvenanceZeroTwoOutput)
}

func (i SlsaProvenanceZeroTwoArgs) ToSlsaProvenanceZeroTwoPtrOutput() SlsaProvenanceZeroTwoPtrOutput {
	return i.ToSlsaProvenanceZeroTwoPtrOutputWithContext(context.Background())
}

func (i SlsaProvenanceZeroTwoArgs) ToSlsaProvenanceZeroTwoPtrOutputWithContext(ctx context.Context) SlsaProvenanceZeroTwoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlsaProvenanceZeroTwoOutput).ToSlsaProvenanceZeroTwoPtrOutputWithContext(ctx)
}

// SlsaProvenanceZeroTwoPtrInput is an input type that accepts SlsaProvenanceZeroTwoArgs, SlsaProvenanceZeroTwoPtr and SlsaProvenanceZeroTwoPtrOutput values.
// You can construct a concrete instance of `SlsaProvenanceZeroTwoPtrInput` via:
//
//	        SlsaProvenanceZeroTwoArgs{...}
//
//	or:
//
//	        nil
type SlsaProvenanceZeroTwoPtrInput interface {
	pulumi.Input

	ToSlsaProvenanceZeroTwoPtrOutput() SlsaProvenanceZeroTwoPtrOutput
	ToSlsaProvenanceZeroTwoPtrOutputWithContext(context.Context) SlsaProvenanceZeroTwoPtrOutput
}

type slsaProvenanceZeroTwoPtrType SlsaProvenanceZeroTwoArgs

func SlsaProvenanceZeroTwoPtr(v *SlsaProvenanceZeroTwoArgs) SlsaProvenanceZeroTwoPtrInput {
	return (*slsaProvenanceZeroTwoPtrType)(v)
}

func (*slsaProvenanceZeroTwoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SlsaProvenanceZeroTwo)(nil)).Elem()
}

func (i *slsaProvenanceZeroTwoPtrType) ToSlsaProvenanceZeroTwoPtrOutput() SlsaProvenanceZeroTwoPtrOutput {
	return i.ToSlsaProvenanceZeroTwoPtrOutputWithContext(context.Background())
}

func (i *slsaProvenanceZeroTwoPtrType) ToSlsaProvenanceZeroTwoPtrOutputWithContext(ctx context.Context) SlsaProvenanceZeroTwoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlsaProvenanceZeroTwoPtrOutput)
}

// SlsaProvenanceZeroTwo is the slsa provenance as defined by the slsa spec. See full explanation of fields at slsa.dev/provenance/v0.2.
type SlsaProvenanceZeroTwoOutput struct{ *pulumi.OutputState }

func (SlsaProvenanceZeroTwoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SlsaProvenanceZeroTwo)(nil)).Elem()
}

func (o SlsaProvenanceZeroTwoOutput) ToSlsaProvenanceZeroTwoOutput() SlsaProvenanceZeroTwoOutput {
	return o
}

func (o SlsaProvenanceZeroTwoOutput) ToSlsaProvenanceZeroTwoOutputWithContext(ctx context.Context) SlsaProvenanceZeroTwoOutput {
	return o
}

func (o SlsaProvenanceZeroTwoOutput) ToSlsaProvenanceZeroTwoPtrOutput() SlsaProvenanceZeroTwoPtrOutput {
	return o.ToSlsaProvenanceZeroTwoPtrOutputWithContext(context.Background())
}

func (o SlsaProvenanceZeroTwoOutput) ToSlsaProvenanceZeroTwoPtrOutputWithContext(ctx context.Context) SlsaProvenanceZeroTwoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SlsaProvenanceZeroTwo) *SlsaProvenanceZeroTwo {
		return &v
	}).(SlsaProvenanceZeroTwoPtrOutput)
}

// Lists the steps in the build.
func (o SlsaProvenanceZeroTwoOutput) BuildConfig() pulumi.MapOutput {
	return o.ApplyT(func(v SlsaProvenanceZeroTwo) map[string]interface{} { return v.BuildConfig }).(pulumi.MapOutput)
}

// URI indicating what type of build was performed.
func (o SlsaProvenanceZeroTwoOutput) BuildType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SlsaProvenanceZeroTwo) *string { return v.BuildType }).(pulumi.StringPtrOutput)
}

// Identifies the entity that executed the recipe, which is trusted to have correctly performed the operation and populated this provenance.
func (o SlsaProvenanceZeroTwoOutput) Builder() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderPtrOutput {
	return o.ApplyT(func(v SlsaProvenanceZeroTwo) *GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilder {
		return v.Builder
	}).(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderPtrOutput)
}

// Identifies the event that kicked off the build.
func (o SlsaProvenanceZeroTwoOutput) Invocation() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationPtrOutput {
	return o.ApplyT(func(v SlsaProvenanceZeroTwo) *GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocation {
		return v.Invocation
	}).(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationPtrOutput)
}

// The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on.
func (o SlsaProvenanceZeroTwoOutput) Materials() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialArrayOutput {
	return o.ApplyT(func(v SlsaProvenanceZeroTwo) []GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterial {
		return v.Materials
	}).(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialArrayOutput)
}

// Other properties of the build.
func (o SlsaProvenanceZeroTwoOutput) Metadata() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput {
	return o.ApplyT(func(v SlsaProvenanceZeroTwo) *GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadata {
		return v.Metadata
	}).(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput)
}

type SlsaProvenanceZeroTwoPtrOutput struct{ *pulumi.OutputState }

func (SlsaProvenanceZeroTwoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SlsaProvenanceZeroTwo)(nil)).Elem()
}

func (o SlsaProvenanceZeroTwoPtrOutput) ToSlsaProvenanceZeroTwoPtrOutput() SlsaProvenanceZeroTwoPtrOutput {
	return o
}

func (o SlsaProvenanceZeroTwoPtrOutput) ToSlsaProvenanceZeroTwoPtrOutputWithContext(ctx context.Context) SlsaProvenanceZeroTwoPtrOutput {
	return o
}

func (o SlsaProvenanceZeroTwoPtrOutput) Elem() SlsaProvenanceZeroTwoOutput {
	return o.ApplyT(func(v *SlsaProvenanceZeroTwo) SlsaProvenanceZeroTwo {
		if v != nil {
			return *v
		}
		var ret SlsaProvenanceZeroTwo
		return ret
	}).(SlsaProvenanceZeroTwoOutput)
}

// Lists the steps in the build.
func (o SlsaProvenanceZeroTwoPtrOutput) BuildConfig() pulumi.MapOutput {
	return o.ApplyT(func(v *SlsaProvenanceZeroTwo) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.BuildConfig
	}).(pulumi.MapOutput)
}

// URI indicating what type of build was performed.
func (o SlsaProvenanceZeroTwoPtrOutput) BuildType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SlsaProvenanceZeroTwo) *string {
		if v == nil {
			return nil
		}
		return v.BuildType
	}).(pulumi.StringPtrOutput)
}

// Identifies the entity that executed the recipe, which is trusted to have correctly performed the operation and populated this provenance.
func (o SlsaProvenanceZeroTwoPtrOutput) Builder() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderPtrOutput {
	return o.ApplyT(func(v *SlsaProvenanceZeroTwo) *GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilder {
		if v == nil {
			return nil
		}
		return v.Builder
	}).(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderPtrOutput)
}

// Identifies the event that kicked off the build.
func (o SlsaProvenanceZeroTwoPtrOutput) Invocation() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationPtrOutput {
	return o.ApplyT(func(v *SlsaProvenanceZeroTwo) *GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocation {
		if v == nil {
			return nil
		}
		return v.Invocation
	}).(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationPtrOutput)
}

// The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on.
func (o SlsaProvenanceZeroTwoPtrOutput) Materials() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialArrayOutput {
	return o.ApplyT(func(v *SlsaProvenanceZeroTwo) []GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterial {
		if v == nil {
			return nil
		}
		return v.Materials
	}).(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialArrayOutput)
}

// Other properties of the build.
func (o SlsaProvenanceZeroTwoPtrOutput) Metadata() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput {
	return o.ApplyT(func(v *SlsaProvenanceZeroTwo) *GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadata {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput)
}

// SlsaProvenanceZeroTwo is the slsa provenance as defined by the slsa spec. See full explanation of fields at slsa.dev/provenance/v0.2.
type SlsaProvenanceZeroTwoResponse struct {
	// Lists the steps in the build.
	BuildConfig map[string]interface{} `pulumi:"buildConfig"`
	// URI indicating what type of build was performed.
	BuildType string `pulumi:"buildType"`
	// Identifies the entity that executed the recipe, which is trusted to have correctly performed the operation and populated this provenance.
	Builder GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderResponse `pulumi:"builder"`
	// Identifies the event that kicked off the build.
	Invocation GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationResponse `pulumi:"invocation"`
	// The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on.
	Materials []GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialResponse `pulumi:"materials"`
	// Other properties of the build.
	Metadata GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataResponse `pulumi:"metadata"`
}

// SlsaProvenanceZeroTwo is the slsa provenance as defined by the slsa spec. See full explanation of fields at slsa.dev/provenance/v0.2.
type SlsaProvenanceZeroTwoResponseOutput struct{ *pulumi.OutputState }

func (SlsaProvenanceZeroTwoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SlsaProvenanceZeroTwoResponse)(nil)).Elem()
}

func (o SlsaProvenanceZeroTwoResponseOutput) ToSlsaProvenanceZeroTwoResponseOutput() SlsaProvenanceZeroTwoResponseOutput {
	return o
}

func (o SlsaProvenanceZeroTwoResponseOutput) ToSlsaProvenanceZeroTwoResponseOutputWithContext(ctx context.Context) SlsaProvenanceZeroTwoResponseOutput {
	return o
}

// Lists the steps in the build.
func (o SlsaProvenanceZeroTwoResponseOutput) BuildConfig() pulumi.MapOutput {
	return o.ApplyT(func(v SlsaProvenanceZeroTwoResponse) map[string]interface{} { return v.BuildConfig }).(pulumi.MapOutput)
}

// URI indicating what type of build was performed.
func (o SlsaProvenanceZeroTwoResponseOutput) BuildType() pulumi.StringOutput {
	return o.ApplyT(func(v SlsaProvenanceZeroTwoResponse) string { return v.BuildType }).(pulumi.StringOutput)
}

// Identifies the entity that executed the recipe, which is trusted to have correctly performed the operation and populated this provenance.
func (o SlsaProvenanceZeroTwoResponseOutput) Builder() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderResponseOutput {
	return o.ApplyT(func(v SlsaProvenanceZeroTwoResponse) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderResponse {
		return v.Builder
	}).(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderResponseOutput)
}

// Identifies the event that kicked off the build.
func (o SlsaProvenanceZeroTwoResponseOutput) Invocation() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationResponseOutput {
	return o.ApplyT(func(v SlsaProvenanceZeroTwoResponse) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationResponse {
		return v.Invocation
	}).(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationResponseOutput)
}

// The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on.
func (o SlsaProvenanceZeroTwoResponseOutput) Materials() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialResponseArrayOutput {
	return o.ApplyT(func(v SlsaProvenanceZeroTwoResponse) []GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialResponse {
		return v.Materials
	}).(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialResponseArrayOutput)
}

// Other properties of the build.
func (o SlsaProvenanceZeroTwoResponseOutput) Metadata() GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataResponseOutput {
	return o.ApplyT(func(v SlsaProvenanceZeroTwoResponse) GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataResponse {
		return v.Metadata
	}).(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataResponseOutput)
}

// Steps taken to build the artifact. For a TaskRun, typically each container corresponds to one step in the recipe.
type SlsaRecipe struct {
	// Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were "make", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint. Depending on the recipe Type, the structure may be different.
	Arguments map[string]interface{} `pulumi:"arguments"`
	// Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were "make", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as zero is default unset value for int64.
	DefinedInMaterial *string `pulumi:"definedInMaterial"`
	// String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were "make", then this would reference the directory in which to run make as well as which target to use.
	EntryPoint *string `pulumi:"entryPoint"`
	// Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy. Depending on the recipe Type, the structure may be different.
	Environment map[string]interface{} `pulumi:"environment"`
	// URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials.
	Type *string `pulumi:"type"`
}

// SlsaRecipeInput is an input type that accepts SlsaRecipeArgs and SlsaRecipeOutput values.
// You can construct a concrete instance of `SlsaRecipeInput` via:
//
//	SlsaRecipeArgs{...}
type SlsaRecipeInput interface {
	pulumi.Input

	ToSlsaRecipeOutput() SlsaRecipeOutput
	ToSlsaRecipeOutputWithContext(context.Context) SlsaRecipeOutput
}

// Steps taken to build the artifact. For a TaskRun, typically each container corresponds to one step in the recipe.
type SlsaRecipeArgs struct {
	// Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were "make", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint. Depending on the recipe Type, the structure may be different.
	Arguments pulumi.MapInput `pulumi:"arguments"`
	// Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were "make", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as zero is default unset value for int64.
	DefinedInMaterial pulumi.StringPtrInput `pulumi:"definedInMaterial"`
	// String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were "make", then this would reference the directory in which to run make as well as which target to use.
	EntryPoint pulumi.StringPtrInput `pulumi:"entryPoint"`
	// Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy. Depending on the recipe Type, the structure may be different.
	Environment pulumi.MapInput `pulumi:"environment"`
	// URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (SlsaRecipeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SlsaRecipe)(nil)).Elem()
}

func (i SlsaRecipeArgs) ToSlsaRecipeOutput() SlsaRecipeOutput {
	return i.ToSlsaRecipeOutputWithContext(context.Background())
}

func (i SlsaRecipeArgs) ToSlsaRecipeOutputWithContext(ctx context.Context) SlsaRecipeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlsaRecipeOutput)
}

func (i SlsaRecipeArgs) ToSlsaRecipePtrOutput() SlsaRecipePtrOutput {
	return i.ToSlsaRecipePtrOutputWithContext(context.Background())
}

func (i SlsaRecipeArgs) ToSlsaRecipePtrOutputWithContext(ctx context.Context) SlsaRecipePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlsaRecipeOutput).ToSlsaRecipePtrOutputWithContext(ctx)
}

// SlsaRecipePtrInput is an input type that accepts SlsaRecipeArgs, SlsaRecipePtr and SlsaRecipePtrOutput values.
// You can construct a concrete instance of `SlsaRecipePtrInput` via:
//
//	        SlsaRecipeArgs{...}
//
//	or:
//
//	        nil
type SlsaRecipePtrInput interface {
	pulumi.Input

	ToSlsaRecipePtrOutput() SlsaRecipePtrOutput
	ToSlsaRecipePtrOutputWithContext(context.Context) SlsaRecipePtrOutput
}

type slsaRecipePtrType SlsaRecipeArgs

func SlsaRecipePtr(v *SlsaRecipeArgs) SlsaRecipePtrInput {
	return (*slsaRecipePtrType)(v)
}

func (*slsaRecipePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SlsaRecipe)(nil)).Elem()
}

func (i *slsaRecipePtrType) ToSlsaRecipePtrOutput() SlsaRecipePtrOutput {
	return i.ToSlsaRecipePtrOutputWithContext(context.Background())
}

func (i *slsaRecipePtrType) ToSlsaRecipePtrOutputWithContext(ctx context.Context) SlsaRecipePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlsaRecipePtrOutput)
}

// Steps taken to build the artifact. For a TaskRun, typically each container corresponds to one step in the recipe.
type SlsaRecipeOutput struct{ *pulumi.OutputState }

func (SlsaRecipeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SlsaRecipe)(nil)).Elem()
}

func (o SlsaRecipeOutput) ToSlsaRecipeOutput() SlsaRecipeOutput {
	return o
}

func (o SlsaRecipeOutput) ToSlsaRecipeOutputWithContext(ctx context.Context) SlsaRecipeOutput {
	return o
}

func (o SlsaRecipeOutput) ToSlsaRecipePtrOutput() SlsaRecipePtrOutput {
	return o.ToSlsaRecipePtrOutputWithContext(context.Background())
}

func (o SlsaRecipeOutput) ToSlsaRecipePtrOutputWithContext(ctx context.Context) SlsaRecipePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SlsaRecipe) *SlsaRecipe {
		return &v
	}).(SlsaRecipePtrOutput)
}

// Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were "make", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint. Depending on the recipe Type, the structure may be different.
func (o SlsaRecipeOutput) Arguments() pulumi.MapOutput {
	return o.ApplyT(func(v SlsaRecipe) map[string]interface{} { return v.Arguments }).(pulumi.MapOutput)
}

// Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were "make", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as zero is default unset value for int64.
func (o SlsaRecipeOutput) DefinedInMaterial() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SlsaRecipe) *string { return v.DefinedInMaterial }).(pulumi.StringPtrOutput)
}

// String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were "make", then this would reference the directory in which to run make as well as which target to use.
func (o SlsaRecipeOutput) EntryPoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SlsaRecipe) *string { return v.EntryPoint }).(pulumi.StringPtrOutput)
}

// Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy. Depending on the recipe Type, the structure may be different.
func (o SlsaRecipeOutput) Environment() pulumi.MapOutput {
	return o.ApplyT(func(v SlsaRecipe) map[string]interface{} { return v.Environment }).(pulumi.MapOutput)
}

// URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials.
func (o SlsaRecipeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SlsaRecipe) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type SlsaRecipePtrOutput struct{ *pulumi.OutputState }

func (SlsaRecipePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SlsaRecipe)(nil)).Elem()
}

func (o SlsaRecipePtrOutput) ToSlsaRecipePtrOutput() SlsaRecipePtrOutput {
	return o
}

func (o SlsaRecipePtrOutput) ToSlsaRecipePtrOutputWithContext(ctx context.Context) SlsaRecipePtrOutput {
	return o
}

func (o SlsaRecipePtrOutput) Elem() SlsaRecipeOutput {
	return o.ApplyT(func(v *SlsaRecipe) SlsaRecipe {
		if v != nil {
			return *v
		}
		var ret SlsaRecipe
		return ret
	}).(SlsaRecipeOutput)
}

// Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were "make", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint. Depending on the recipe Type, the structure may be different.
func (o SlsaRecipePtrOutput) Arguments() pulumi.MapOutput {
	return o.ApplyT(func(v *SlsaRecipe) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Arguments
	}).(pulumi.MapOutput)
}

// Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were "make", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as zero is default unset value for int64.
func (o SlsaRecipePtrOutput) DefinedInMaterial() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SlsaRecipe) *string {
		if v == nil {
			return nil
		}
		return v.DefinedInMaterial
	}).(pulumi.StringPtrOutput)
}

// String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were "make", then this would reference the directory in which to run make as well as which target to use.
func (o SlsaRecipePtrOutput) EntryPoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SlsaRecipe) *string {
		if v == nil {
			return nil
		}
		return v.EntryPoint
	}).(pulumi.StringPtrOutput)
}

// Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy. Depending on the recipe Type, the structure may be different.
func (o SlsaRecipePtrOutput) Environment() pulumi.MapOutput {
	return o.ApplyT(func(v *SlsaRecipe) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Environment
	}).(pulumi.MapOutput)
}

// URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials.
func (o SlsaRecipePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SlsaRecipe) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Steps taken to build the artifact. For a TaskRun, typically each container corresponds to one step in the recipe.
type SlsaRecipeResponse struct {
	// Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were "make", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint. Depending on the recipe Type, the structure may be different.
	Arguments map[string]interface{} `pulumi:"arguments"`
	// Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were "make", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as zero is default unset value for int64.
	DefinedInMaterial string `pulumi:"definedInMaterial"`
	// String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were "make", then this would reference the directory in which to run make as well as which target to use.
	EntryPoint string `pulumi:"entryPoint"`
	// Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy. Depending on the recipe Type, the structure may be different.
	Environment map[string]interface{} `pulumi:"environment"`
	// URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials.
	Type string `pulumi:"type"`
}

// Steps taken to build the artifact. For a TaskRun, typically each container corresponds to one step in the recipe.
type SlsaRecipeResponseOutput struct{ *pulumi.OutputState }

func (SlsaRecipeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SlsaRecipeResponse)(nil)).Elem()
}

func (o SlsaRecipeResponseOutput) ToSlsaRecipeResponseOutput() SlsaRecipeResponseOutput {
	return o
}

func (o SlsaRecipeResponseOutput) ToSlsaRecipeResponseOutputWithContext(ctx context.Context) SlsaRecipeResponseOutput {
	return o
}

// Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were "make", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint. Depending on the recipe Type, the structure may be different.
func (o SlsaRecipeResponseOutput) Arguments() pulumi.MapOutput {
	return o.ApplyT(func(v SlsaRecipeResponse) map[string]interface{} { return v.Arguments }).(pulumi.MapOutput)
}

// Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were "make", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as zero is default unset value for int64.
func (o SlsaRecipeResponseOutput) DefinedInMaterial() pulumi.StringOutput {
	return o.ApplyT(func(v SlsaRecipeResponse) string { return v.DefinedInMaterial }).(pulumi.StringOutput)
}

// String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were "make", then this would reference the directory in which to run make as well as which target to use.
func (o SlsaRecipeResponseOutput) EntryPoint() pulumi.StringOutput {
	return o.ApplyT(func(v SlsaRecipeResponse) string { return v.EntryPoint }).(pulumi.StringOutput)
}

// Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy. Depending on the recipe Type, the structure may be different.
func (o SlsaRecipeResponseOutput) Environment() pulumi.MapOutput {
	return o.ApplyT(func(v SlsaRecipeResponse) map[string]interface{} { return v.Environment }).(pulumi.MapOutput)
}

// URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials.
func (o SlsaRecipeResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SlsaRecipeResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Source describes the location of the source used for the build.
type Source struct {
	// If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field.
	AdditionalContexts []GoogleDevtoolsContaineranalysisV1alpha1SourceContext `pulumi:"additionalContexts"`
	// If provided, the input binary artifacts for the build came from this location.
	ArtifactStorageSource *StorageSource `pulumi:"artifactStorageSource"`
	// If provided, the source code used for the build came from this location.
	Context *GoogleDevtoolsContaineranalysisV1alpha1SourceContext `pulumi:"context"`
	// Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file.
	FileHashes *FileHashes `pulumi:"fileHashes"`
	// If provided, get source from this location in a Cloud Repo.
	RepoSource *RepoSource `pulumi:"repoSource"`
	// If provided, get the source from this location in Google Cloud Storage.
	StorageSource *StorageSource `pulumi:"storageSource"`
}

// SourceInput is an input type that accepts SourceArgs and SourceOutput values.
// You can construct a concrete instance of `SourceInput` via:
//
//	SourceArgs{...}
type SourceInput interface {
	pulumi.Input

	ToSourceOutput() SourceOutput
	ToSourceOutputWithContext(context.Context) SourceOutput
}

// Source describes the location of the source used for the build.
type SourceArgs struct {
	// If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field.
	AdditionalContexts GoogleDevtoolsContaineranalysisV1alpha1SourceContextArrayInput `pulumi:"additionalContexts"`
	// If provided, the input binary artifacts for the build came from this location.
	ArtifactStorageSource StorageSourcePtrInput `pulumi:"artifactStorageSource"`
	// If provided, the source code used for the build came from this location.
	Context GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrInput `pulumi:"context"`
	// Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file.
	FileHashes FileHashesPtrInput `pulumi:"fileHashes"`
	// If provided, get source from this location in a Cloud Repo.
	RepoSource RepoSourcePtrInput `pulumi:"repoSource"`
	// If provided, get the source from this location in Google Cloud Storage.
	StorageSource StorageSourcePtrInput `pulumi:"storageSource"`
}

func (SourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Source)(nil)).Elem()
}

func (i SourceArgs) ToSourceOutput() SourceOutput {
	return i.ToSourceOutputWithContext(context.Background())
}

func (i SourceArgs) ToSourceOutputWithContext(ctx context.Context) SourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceOutput)
}

func (i SourceArgs) ToSourcePtrOutput() SourcePtrOutput {
	return i.ToSourcePtrOutputWithContext(context.Background())
}

func (i SourceArgs) ToSourcePtrOutputWithContext(ctx context.Context) SourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceOutput).ToSourcePtrOutputWithContext(ctx)
}

// SourcePtrInput is an input type that accepts SourceArgs, SourcePtr and SourcePtrOutput values.
// You can construct a concrete instance of `SourcePtrInput` via:
//
//	        SourceArgs{...}
//
//	or:
//
//	        nil
type SourcePtrInput interface {
	pulumi.Input

	ToSourcePtrOutput() SourcePtrOutput
	ToSourcePtrOutputWithContext(context.Context) SourcePtrOutput
}

type sourcePtrType SourceArgs

func SourcePtr(v *SourceArgs) SourcePtrInput {
	return (*sourcePtrType)(v)
}

func (*sourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Source)(nil)).Elem()
}

func (i *sourcePtrType) ToSourcePtrOutput() SourcePtrOutput {
	return i.ToSourcePtrOutputWithContext(context.Background())
}

func (i *sourcePtrType) ToSourcePtrOutputWithContext(ctx context.Context) SourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourcePtrOutput)
}

// Source describes the location of the source used for the build.
type SourceOutput struct{ *pulumi.OutputState }

func (SourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Source)(nil)).Elem()
}

func (o SourceOutput) ToSourceOutput() SourceOutput {
	return o
}

func (o SourceOutput) ToSourceOutputWithContext(ctx context.Context) SourceOutput {
	return o
}

func (o SourceOutput) ToSourcePtrOutput() SourcePtrOutput {
	return o.ToSourcePtrOutputWithContext(context.Background())
}

func (o SourceOutput) ToSourcePtrOutputWithContext(ctx context.Context) SourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Source) *Source {
		return &v
	}).(SourcePtrOutput)
}

// If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field.
func (o SourceOutput) AdditionalContexts() GoogleDevtoolsContaineranalysisV1alpha1SourceContextArrayOutput {
	return o.ApplyT(func(v Source) []GoogleDevtoolsContaineranalysisV1alpha1SourceContext { return v.AdditionalContexts }).(GoogleDevtoolsContaineranalysisV1alpha1SourceContextArrayOutput)
}

// If provided, the input binary artifacts for the build came from this location.
func (o SourceOutput) ArtifactStorageSource() StorageSourcePtrOutput {
	return o.ApplyT(func(v Source) *StorageSource { return v.ArtifactStorageSource }).(StorageSourcePtrOutput)
}

// If provided, the source code used for the build came from this location.
func (o SourceOutput) Context() GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput {
	return o.ApplyT(func(v Source) *GoogleDevtoolsContaineranalysisV1alpha1SourceContext { return v.Context }).(GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput)
}

// Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file.
func (o SourceOutput) FileHashes() FileHashesPtrOutput {
	return o.ApplyT(func(v Source) *FileHashes { return v.FileHashes }).(FileHashesPtrOutput)
}

// If provided, get source from this location in a Cloud Repo.
func (o SourceOutput) RepoSource() RepoSourcePtrOutput {
	return o.ApplyT(func(v Source) *RepoSource { return v.RepoSource }).(RepoSourcePtrOutput)
}

// If provided, get the source from this location in Google Cloud Storage.
func (o SourceOutput) StorageSource() StorageSourcePtrOutput {
	return o.ApplyT(func(v Source) *StorageSource { return v.StorageSource }).(StorageSourcePtrOutput)
}

type SourcePtrOutput struct{ *pulumi.OutputState }

func (SourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Source)(nil)).Elem()
}

func (o SourcePtrOutput) ToSourcePtrOutput() SourcePtrOutput {
	return o
}

func (o SourcePtrOutput) ToSourcePtrOutputWithContext(ctx context.Context) SourcePtrOutput {
	return o
}

func (o SourcePtrOutput) Elem() SourceOutput {
	return o.ApplyT(func(v *Source) Source {
		if v != nil {
			return *v
		}
		var ret Source
		return ret
	}).(SourceOutput)
}

// If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field.
func (o SourcePtrOutput) AdditionalContexts() GoogleDevtoolsContaineranalysisV1alpha1SourceContextArrayOutput {
	return o.ApplyT(func(v *Source) []GoogleDevtoolsContaineranalysisV1alpha1SourceContext {
		if v == nil {
			return nil
		}
		return v.AdditionalContexts
	}).(GoogleDevtoolsContaineranalysisV1alpha1SourceContextArrayOutput)
}

// If provided, the input binary artifacts for the build came from this location.
func (o SourcePtrOutput) ArtifactStorageSource() StorageSourcePtrOutput {
	return o.ApplyT(func(v *Source) *StorageSource {
		if v == nil {
			return nil
		}
		return v.ArtifactStorageSource
	}).(StorageSourcePtrOutput)
}

// If provided, the source code used for the build came from this location.
func (o SourcePtrOutput) Context() GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput {
	return o.ApplyT(func(v *Source) *GoogleDevtoolsContaineranalysisV1alpha1SourceContext {
		if v == nil {
			return nil
		}
		return v.Context
	}).(GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput)
}

// Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file.
func (o SourcePtrOutput) FileHashes() FileHashesPtrOutput {
	return o.ApplyT(func(v *Source) *FileHashes {
		if v == nil {
			return nil
		}
		return v.FileHashes
	}).(FileHashesPtrOutput)
}

// If provided, get source from this location in a Cloud Repo.
func (o SourcePtrOutput) RepoSource() RepoSourcePtrOutput {
	return o.ApplyT(func(v *Source) *RepoSource {
		if v == nil {
			return nil
		}
		return v.RepoSource
	}).(RepoSourcePtrOutput)
}

// If provided, get the source from this location in Google Cloud Storage.
func (o SourcePtrOutput) StorageSource() StorageSourcePtrOutput {
	return o.ApplyT(func(v *Source) *StorageSource {
		if v == nil {
			return nil
		}
		return v.StorageSource
	}).(StorageSourcePtrOutput)
}

// Source describes the location of the source used for the build.
type SourceResponse struct {
	// If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field.
	AdditionalContexts []GoogleDevtoolsContaineranalysisV1alpha1SourceContextResponse `pulumi:"additionalContexts"`
	// If provided, the input binary artifacts for the build came from this location.
	ArtifactStorageSource StorageSourceResponse `pulumi:"artifactStorageSource"`
	// If provided, the source code used for the build came from this location.
	Context GoogleDevtoolsContaineranalysisV1alpha1SourceContextResponse `pulumi:"context"`
	// Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file.
	FileHashes FileHashesResponse `pulumi:"fileHashes"`
	// If provided, get source from this location in a Cloud Repo.
	RepoSource RepoSourceResponse `pulumi:"repoSource"`
	// If provided, get the source from this location in Google Cloud Storage.
	StorageSource StorageSourceResponse `pulumi:"storageSource"`
}

// Source describes the location of the source used for the build.
type SourceResponseOutput struct{ *pulumi.OutputState }

func (SourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceResponse)(nil)).Elem()
}

func (o SourceResponseOutput) ToSourceResponseOutput() SourceResponseOutput {
	return o
}

func (o SourceResponseOutput) ToSourceResponseOutputWithContext(ctx context.Context) SourceResponseOutput {
	return o
}

// If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field.
func (o SourceResponseOutput) AdditionalContexts() GoogleDevtoolsContaineranalysisV1alpha1SourceContextResponseArrayOutput {
	return o.ApplyT(func(v SourceResponse) []GoogleDevtoolsContaineranalysisV1alpha1SourceContextResponse {
		return v.AdditionalContexts
	}).(GoogleDevtoolsContaineranalysisV1alpha1SourceContextResponseArrayOutput)
}

// If provided, the input binary artifacts for the build came from this location.
func (o SourceResponseOutput) ArtifactStorageSource() StorageSourceResponseOutput {
	return o.ApplyT(func(v SourceResponse) StorageSourceResponse { return v.ArtifactStorageSource }).(StorageSourceResponseOutput)
}

// If provided, the source code used for the build came from this location.
func (o SourceResponseOutput) Context() GoogleDevtoolsContaineranalysisV1alpha1SourceContextResponseOutput {
	return o.ApplyT(func(v SourceResponse) GoogleDevtoolsContaineranalysisV1alpha1SourceContextResponse { return v.Context }).(GoogleDevtoolsContaineranalysisV1alpha1SourceContextResponseOutput)
}

// Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file.
func (o SourceResponseOutput) FileHashes() FileHashesResponseOutput {
	return o.ApplyT(func(v SourceResponse) FileHashesResponse { return v.FileHashes }).(FileHashesResponseOutput)
}

// If provided, get source from this location in a Cloud Repo.
func (o SourceResponseOutput) RepoSource() RepoSourceResponseOutput {
	return o.ApplyT(func(v SourceResponse) RepoSourceResponse { return v.RepoSource }).(RepoSourceResponseOutput)
}

// If provided, get the source from this location in Google Cloud Storage.
func (o SourceResponseOutput) StorageSource() StorageSourceResponseOutput {
	return o.ApplyT(func(v SourceResponse) StorageSourceResponse { return v.StorageSource }).(StorageSourceResponseOutput)
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type Status struct {
	// The status code, which should be an enum value of google.rpc.Code.
	Code *int `pulumi:"code"`
	// A list of messages that carry the error details. There is a common set of message types for APIs to use.
	Details []map[string]interface{} `pulumi:"details"`
	// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
	Message *string `pulumi:"message"`
}

// StatusInput is an input type that accepts StatusArgs and StatusOutput values.
// You can construct a concrete instance of `StatusInput` via:
//
//	StatusArgs{...}
type StatusInput interface {
	pulumi.Input

	ToStatusOutput() StatusOutput
	ToStatusOutputWithContext(context.Context) StatusOutput
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type StatusArgs struct {
	// The status code, which should be an enum value of google.rpc.Code.
	Code pulumi.IntPtrInput `pulumi:"code"`
	// A list of messages that carry the error details. There is a common set of message types for APIs to use.
	Details pulumi.MapArrayInput `pulumi:"details"`
	// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
	Message pulumi.StringPtrInput `pulumi:"message"`
}

func (StatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Status)(nil)).Elem()
}

func (i StatusArgs) ToStatusOutput() StatusOutput {
	return i.ToStatusOutputWithContext(context.Background())
}

func (i StatusArgs) ToStatusOutputWithContext(ctx context.Context) StatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusOutput)
}

func (i StatusArgs) ToStatusPtrOutput() StatusPtrOutput {
	return i.ToStatusPtrOutputWithContext(context.Background())
}

func (i StatusArgs) ToStatusPtrOutputWithContext(ctx context.Context) StatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusOutput).ToStatusPtrOutputWithContext(ctx)
}

// StatusPtrInput is an input type that accepts StatusArgs, StatusPtr and StatusPtrOutput values.
// You can construct a concrete instance of `StatusPtrInput` via:
//
//	        StatusArgs{...}
//
//	or:
//
//	        nil
type StatusPtrInput interface {
	pulumi.Input

	ToStatusPtrOutput() StatusPtrOutput
	ToStatusPtrOutputWithContext(context.Context) StatusPtrOutput
}

type statusPtrType StatusArgs

func StatusPtr(v *StatusArgs) StatusPtrInput {
	return (*statusPtrType)(v)
}

func (*statusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Status)(nil)).Elem()
}

func (i *statusPtrType) ToStatusPtrOutput() StatusPtrOutput {
	return i.ToStatusPtrOutputWithContext(context.Background())
}

func (i *statusPtrType) ToStatusPtrOutputWithContext(ctx context.Context) StatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusPtrOutput)
}

// StatusArrayInput is an input type that accepts StatusArray and StatusArrayOutput values.
// You can construct a concrete instance of `StatusArrayInput` via:
//
//	StatusArray{ StatusArgs{...} }
type StatusArrayInput interface {
	pulumi.Input

	ToStatusArrayOutput() StatusArrayOutput
	ToStatusArrayOutputWithContext(context.Context) StatusArrayOutput
}

type StatusArray []StatusInput

func (StatusArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Status)(nil)).Elem()
}

func (i StatusArray) ToStatusArrayOutput() StatusArrayOutput {
	return i.ToStatusArrayOutputWithContext(context.Background())
}

func (i StatusArray) ToStatusArrayOutputWithContext(ctx context.Context) StatusArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusArrayOutput)
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type StatusOutput struct{ *pulumi.OutputState }

func (StatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Status)(nil)).Elem()
}

func (o StatusOutput) ToStatusOutput() StatusOutput {
	return o
}

func (o StatusOutput) ToStatusOutputWithContext(ctx context.Context) StatusOutput {
	return o
}

func (o StatusOutput) ToStatusPtrOutput() StatusPtrOutput {
	return o.ToStatusPtrOutputWithContext(context.Background())
}

func (o StatusOutput) ToStatusPtrOutputWithContext(ctx context.Context) StatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Status) *Status {
		return &v
	}).(StatusPtrOutput)
}

// The status code, which should be an enum value of google.rpc.Code.
func (o StatusOutput) Code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Status) *int { return v.Code }).(pulumi.IntPtrOutput)
}

// A list of messages that carry the error details. There is a common set of message types for APIs to use.
func (o StatusOutput) Details() pulumi.MapArrayOutput {
	return o.ApplyT(func(v Status) []map[string]interface{} { return v.Details }).(pulumi.MapArrayOutput)
}

// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
func (o StatusOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Status) *string { return v.Message }).(pulumi.StringPtrOutput)
}

type StatusPtrOutput struct{ *pulumi.OutputState }

func (StatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Status)(nil)).Elem()
}

func (o StatusPtrOutput) ToStatusPtrOutput() StatusPtrOutput {
	return o
}

func (o StatusPtrOutput) ToStatusPtrOutputWithContext(ctx context.Context) StatusPtrOutput {
	return o
}

func (o StatusPtrOutput) Elem() StatusOutput {
	return o.ApplyT(func(v *Status) Status {
		if v != nil {
			return *v
		}
		var ret Status
		return ret
	}).(StatusOutput)
}

// The status code, which should be an enum value of google.rpc.Code.
func (o StatusPtrOutput) Code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Status) *int {
		if v == nil {
			return nil
		}
		return v.Code
	}).(pulumi.IntPtrOutput)
}

// A list of messages that carry the error details. There is a common set of message types for APIs to use.
func (o StatusPtrOutput) Details() pulumi.MapArrayOutput {
	return o.ApplyT(func(v *Status) []map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Details
	}).(pulumi.MapArrayOutput)
}

// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
func (o StatusPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Status) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

type StatusArrayOutput struct{ *pulumi.OutputState }

func (StatusArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Status)(nil)).Elem()
}

func (o StatusArrayOutput) ToStatusArrayOutput() StatusArrayOutput {
	return o
}

func (o StatusArrayOutput) ToStatusArrayOutputWithContext(ctx context.Context) StatusArrayOutput {
	return o
}

func (o StatusArrayOutput) Index(i pulumi.IntInput) StatusOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Status {
		return vs[0].([]Status)[vs[1].(int)]
	}).(StatusOutput)
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type StatusResponse struct {
	// The status code, which should be an enum value of google.rpc.Code.
	Code int `pulumi:"code"`
	// A list of messages that carry the error details. There is a common set of message types for APIs to use.
	Details []map[string]interface{} `pulumi:"details"`
	// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
	Message string `pulumi:"message"`
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type StatusResponseOutput struct{ *pulumi.OutputState }

func (StatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusResponse)(nil)).Elem()
}

func (o StatusResponseOutput) ToStatusResponseOutput() StatusResponseOutput {
	return o
}

func (o StatusResponseOutput) ToStatusResponseOutputWithContext(ctx context.Context) StatusResponseOutput {
	return o
}

// The status code, which should be an enum value of google.rpc.Code.
func (o StatusResponseOutput) Code() pulumi.IntOutput {
	return o.ApplyT(func(v StatusResponse) int { return v.Code }).(pulumi.IntOutput)
}

// A list of messages that carry the error details. There is a common set of message types for APIs to use.
func (o StatusResponseOutput) Details() pulumi.MapArrayOutput {
	return o.ApplyT(func(v StatusResponse) []map[string]interface{} { return v.Details }).(pulumi.MapArrayOutput)
}

// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
func (o StatusResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v StatusResponse) string { return v.Message }).(pulumi.StringOutput)
}

type StatusResponseArrayOutput struct{ *pulumi.OutputState }

func (StatusResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StatusResponse)(nil)).Elem()
}

func (o StatusResponseArrayOutput) ToStatusResponseArrayOutput() StatusResponseArrayOutput {
	return o
}

func (o StatusResponseArrayOutput) ToStatusResponseArrayOutputWithContext(ctx context.Context) StatusResponseArrayOutput {
	return o
}

func (o StatusResponseArrayOutput) Index(i pulumi.IntInput) StatusResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StatusResponse {
		return vs[0].([]StatusResponse)[vs[1].(int)]
	}).(StatusResponseOutput)
}

// StorageSource describes the location of the source in an archive file in Google Cloud Storage.
type StorageSource struct {
	// Google Cloud Storage bucket containing source (see [Bucket Name Requirements] (https://cloud.google.com/storage/docs/bucket-naming#requirements)).
	Bucket *string `pulumi:"bucket"`
	// Google Cloud Storage generation for the object.
	Generation *string `pulumi:"generation"`
	// Google Cloud Storage object containing source.
	Object *string `pulumi:"object"`
}

// StorageSourceInput is an input type that accepts StorageSourceArgs and StorageSourceOutput values.
// You can construct a concrete instance of `StorageSourceInput` via:
//
//	StorageSourceArgs{...}
type StorageSourceInput interface {
	pulumi.Input

	ToStorageSourceOutput() StorageSourceOutput
	ToStorageSourceOutputWithContext(context.Context) StorageSourceOutput
}

// StorageSource describes the location of the source in an archive file in Google Cloud Storage.
type StorageSourceArgs struct {
	// Google Cloud Storage bucket containing source (see [Bucket Name Requirements] (https://cloud.google.com/storage/docs/bucket-naming#requirements)).
	Bucket pulumi.StringPtrInput `pulumi:"bucket"`
	// Google Cloud Storage generation for the object.
	Generation pulumi.StringPtrInput `pulumi:"generation"`
	// Google Cloud Storage object containing source.
	Object pulumi.StringPtrInput `pulumi:"object"`
}

func (StorageSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageSource)(nil)).Elem()
}

func (i StorageSourceArgs) ToStorageSourceOutput() StorageSourceOutput {
	return i.ToStorageSourceOutputWithContext(context.Background())
}

func (i StorageSourceArgs) ToStorageSourceOutputWithContext(ctx context.Context) StorageSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageSourceOutput)
}

func (i StorageSourceArgs) ToStorageSourcePtrOutput() StorageSourcePtrOutput {
	return i.ToStorageSourcePtrOutputWithContext(context.Background())
}

func (i StorageSourceArgs) ToStorageSourcePtrOutputWithContext(ctx context.Context) StorageSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageSourceOutput).ToStorageSourcePtrOutputWithContext(ctx)
}

// StorageSourcePtrInput is an input type that accepts StorageSourceArgs, StorageSourcePtr and StorageSourcePtrOutput values.
// You can construct a concrete instance of `StorageSourcePtrInput` via:
//
//	        StorageSourceArgs{...}
//
//	or:
//
//	        nil
type StorageSourcePtrInput interface {
	pulumi.Input

	ToStorageSourcePtrOutput() StorageSourcePtrOutput
	ToStorageSourcePtrOutputWithContext(context.Context) StorageSourcePtrOutput
}

type storageSourcePtrType StorageSourceArgs

func StorageSourcePtr(v *StorageSourceArgs) StorageSourcePtrInput {
	return (*storageSourcePtrType)(v)
}

func (*storageSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageSource)(nil)).Elem()
}

func (i *storageSourcePtrType) ToStorageSourcePtrOutput() StorageSourcePtrOutput {
	return i.ToStorageSourcePtrOutputWithContext(context.Background())
}

func (i *storageSourcePtrType) ToStorageSourcePtrOutputWithContext(ctx context.Context) StorageSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageSourcePtrOutput)
}

// StorageSource describes the location of the source in an archive file in Google Cloud Storage.
type StorageSourceOutput struct{ *pulumi.OutputState }

func (StorageSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageSource)(nil)).Elem()
}

func (o StorageSourceOutput) ToStorageSourceOutput() StorageSourceOutput {
	return o
}

func (o StorageSourceOutput) ToStorageSourceOutputWithContext(ctx context.Context) StorageSourceOutput {
	return o
}

func (o StorageSourceOutput) ToStorageSourcePtrOutput() StorageSourcePtrOutput {
	return o.ToStorageSourcePtrOutputWithContext(context.Background())
}

func (o StorageSourceOutput) ToStorageSourcePtrOutputWithContext(ctx context.Context) StorageSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StorageSource) *StorageSource {
		return &v
	}).(StorageSourcePtrOutput)
}

// Google Cloud Storage bucket containing source (see [Bucket Name Requirements] (https://cloud.google.com/storage/docs/bucket-naming#requirements)).
func (o StorageSourceOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageSource) *string { return v.Bucket }).(pulumi.StringPtrOutput)
}

// Google Cloud Storage generation for the object.
func (o StorageSourceOutput) Generation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageSource) *string { return v.Generation }).(pulumi.StringPtrOutput)
}

// Google Cloud Storage object containing source.
func (o StorageSourceOutput) Object() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageSource) *string { return v.Object }).(pulumi.StringPtrOutput)
}

type StorageSourcePtrOutput struct{ *pulumi.OutputState }

func (StorageSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageSource)(nil)).Elem()
}

func (o StorageSourcePtrOutput) ToStorageSourcePtrOutput() StorageSourcePtrOutput {
	return o
}

func (o StorageSourcePtrOutput) ToStorageSourcePtrOutputWithContext(ctx context.Context) StorageSourcePtrOutput {
	return o
}

func (o StorageSourcePtrOutput) Elem() StorageSourceOutput {
	return o.ApplyT(func(v *StorageSource) StorageSource {
		if v != nil {
			return *v
		}
		var ret StorageSource
		return ret
	}).(StorageSourceOutput)
}

// Google Cloud Storage bucket containing source (see [Bucket Name Requirements] (https://cloud.google.com/storage/docs/bucket-naming#requirements)).
func (o StorageSourcePtrOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageSource) *string {
		if v == nil {
			return nil
		}
		return v.Bucket
	}).(pulumi.StringPtrOutput)
}

// Google Cloud Storage generation for the object.
func (o StorageSourcePtrOutput) Generation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageSource) *string {
		if v == nil {
			return nil
		}
		return v.Generation
	}).(pulumi.StringPtrOutput)
}

// Google Cloud Storage object containing source.
func (o StorageSourcePtrOutput) Object() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageSource) *string {
		if v == nil {
			return nil
		}
		return v.Object
	}).(pulumi.StringPtrOutput)
}

// StorageSource describes the location of the source in an archive file in Google Cloud Storage.
type StorageSourceResponse struct {
	// Google Cloud Storage bucket containing source (see [Bucket Name Requirements] (https://cloud.google.com/storage/docs/bucket-naming#requirements)).
	Bucket string `pulumi:"bucket"`
	// Google Cloud Storage generation for the object.
	Generation string `pulumi:"generation"`
	// Google Cloud Storage object containing source.
	Object string `pulumi:"object"`
}

// StorageSource describes the location of the source in an archive file in Google Cloud Storage.
type StorageSourceResponseOutput struct{ *pulumi.OutputState }

func (StorageSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageSourceResponse)(nil)).Elem()
}

func (o StorageSourceResponseOutput) ToStorageSourceResponseOutput() StorageSourceResponseOutput {
	return o
}

func (o StorageSourceResponseOutput) ToStorageSourceResponseOutputWithContext(ctx context.Context) StorageSourceResponseOutput {
	return o
}

// Google Cloud Storage bucket containing source (see [Bucket Name Requirements] (https://cloud.google.com/storage/docs/bucket-naming#requirements)).
func (o StorageSourceResponseOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v StorageSourceResponse) string { return v.Bucket }).(pulumi.StringOutput)
}

// Google Cloud Storage generation for the object.
func (o StorageSourceResponseOutput) Generation() pulumi.StringOutput {
	return o.ApplyT(func(v StorageSourceResponse) string { return v.Generation }).(pulumi.StringOutput)
}

// Google Cloud Storage object containing source.
func (o StorageSourceResponseOutput) Object() pulumi.StringOutput {
	return o.ApplyT(func(v StorageSourceResponse) string { return v.Object }).(pulumi.StringOutput)
}

// Subject refers to the subject of the intoto statement
type Subject struct {
	// "": "" Algorithms can be e.g. sha256, sha512 See https://github.com/in-toto/attestation/blob/main/spec/field_types.md#DigestSet
	Digest map[string]string `pulumi:"digest"`
	// name is the name of the Subject used here
	Name *string `pulumi:"name"`
}

// SubjectInput is an input type that accepts SubjectArgs and SubjectOutput values.
// You can construct a concrete instance of `SubjectInput` via:
//
//	SubjectArgs{...}
type SubjectInput interface {
	pulumi.Input

	ToSubjectOutput() SubjectOutput
	ToSubjectOutputWithContext(context.Context) SubjectOutput
}

// Subject refers to the subject of the intoto statement
type SubjectArgs struct {
	// "": "" Algorithms can be e.g. sha256, sha512 See https://github.com/in-toto/attestation/blob/main/spec/field_types.md#DigestSet
	Digest pulumi.StringMapInput `pulumi:"digest"`
	// name is the name of the Subject used here
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (SubjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Subject)(nil)).Elem()
}

func (i SubjectArgs) ToSubjectOutput() SubjectOutput {
	return i.ToSubjectOutputWithContext(context.Background())
}

func (i SubjectArgs) ToSubjectOutputWithContext(ctx context.Context) SubjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectOutput)
}

// SubjectArrayInput is an input type that accepts SubjectArray and SubjectArrayOutput values.
// You can construct a concrete instance of `SubjectArrayInput` via:
//
//	SubjectArray{ SubjectArgs{...} }
type SubjectArrayInput interface {
	pulumi.Input

	ToSubjectArrayOutput() SubjectArrayOutput
	ToSubjectArrayOutputWithContext(context.Context) SubjectArrayOutput
}

type SubjectArray []SubjectInput

func (SubjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Subject)(nil)).Elem()
}

func (i SubjectArray) ToSubjectArrayOutput() SubjectArrayOutput {
	return i.ToSubjectArrayOutputWithContext(context.Background())
}

func (i SubjectArray) ToSubjectArrayOutputWithContext(ctx context.Context) SubjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectArrayOutput)
}

// Subject refers to the subject of the intoto statement
type SubjectOutput struct{ *pulumi.OutputState }

func (SubjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Subject)(nil)).Elem()
}

func (o SubjectOutput) ToSubjectOutput() SubjectOutput {
	return o
}

func (o SubjectOutput) ToSubjectOutputWithContext(ctx context.Context) SubjectOutput {
	return o
}

// "": "" Algorithms can be e.g. sha256, sha512 See https://github.com/in-toto/attestation/blob/main/spec/field_types.md#DigestSet
func (o SubjectOutput) Digest() pulumi.StringMapOutput {
	return o.ApplyT(func(v Subject) map[string]string { return v.Digest }).(pulumi.StringMapOutput)
}

// name is the name of the Subject used here
func (o SubjectOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Subject) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type SubjectArrayOutput struct{ *pulumi.OutputState }

func (SubjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Subject)(nil)).Elem()
}

func (o SubjectArrayOutput) ToSubjectArrayOutput() SubjectArrayOutput {
	return o
}

func (o SubjectArrayOutput) ToSubjectArrayOutputWithContext(ctx context.Context) SubjectArrayOutput {
	return o
}

func (o SubjectArrayOutput) Index(i pulumi.IntInput) SubjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Subject {
		return vs[0].([]Subject)[vs[1].(int)]
	}).(SubjectOutput)
}

// Subject refers to the subject of the intoto statement
type SubjectResponse struct {
	// "": "" Algorithms can be e.g. sha256, sha512 See https://github.com/in-toto/attestation/blob/main/spec/field_types.md#DigestSet
	Digest map[string]string `pulumi:"digest"`
	// name is the name of the Subject used here
	Name string `pulumi:"name"`
}

// Subject refers to the subject of the intoto statement
type SubjectResponseOutput struct{ *pulumi.OutputState }

func (SubjectResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubjectResponse)(nil)).Elem()
}

func (o SubjectResponseOutput) ToSubjectResponseOutput() SubjectResponseOutput {
	return o
}

func (o SubjectResponseOutput) ToSubjectResponseOutputWithContext(ctx context.Context) SubjectResponseOutput {
	return o
}

// "": "" Algorithms can be e.g. sha256, sha512 See https://github.com/in-toto/attestation/blob/main/spec/field_types.md#DigestSet
func (o SubjectResponseOutput) Digest() pulumi.StringMapOutput {
	return o.ApplyT(func(v SubjectResponse) map[string]string { return v.Digest }).(pulumi.StringMapOutput)
}

// name is the name of the Subject used here
func (o SubjectResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SubjectResponse) string { return v.Name }).(pulumi.StringOutput)
}

type SubjectResponseArrayOutput struct{ *pulumi.OutputState }

func (SubjectResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubjectResponse)(nil)).Elem()
}

func (o SubjectResponseArrayOutput) ToSubjectResponseArrayOutput() SubjectResponseArrayOutput {
	return o
}

func (o SubjectResponseArrayOutput) ToSubjectResponseArrayOutputWithContext(ctx context.Context) SubjectResponseArrayOutput {
	return o
}

func (o SubjectResponseArrayOutput) Index(i pulumi.IntInput) SubjectResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SubjectResponse {
		return vs[0].([]SubjectResponse)[vs[1].(int)]
	}).(SubjectResponseOutput)
}

// An URI message.
type URI struct {
	// A label for the URI.
	Label *string `pulumi:"label"`
	// The unique resource identifier.
	Uri *string `pulumi:"uri"`
}

// URIInput is an input type that accepts URIArgs and URIOutput values.
// You can construct a concrete instance of `URIInput` via:
//
//	URIArgs{...}
type URIInput interface {
	pulumi.Input

	ToURIOutput() URIOutput
	ToURIOutputWithContext(context.Context) URIOutput
}

// An URI message.
type URIArgs struct {
	// A label for the URI.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// The unique resource identifier.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

func (URIArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*URI)(nil)).Elem()
}

func (i URIArgs) ToURIOutput() URIOutput {
	return i.ToURIOutputWithContext(context.Background())
}

func (i URIArgs) ToURIOutputWithContext(ctx context.Context) URIOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URIOutput)
}

func (i URIArgs) ToURIPtrOutput() URIPtrOutput {
	return i.ToURIPtrOutputWithContext(context.Background())
}

func (i URIArgs) ToURIPtrOutputWithContext(ctx context.Context) URIPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URIOutput).ToURIPtrOutputWithContext(ctx)
}

// URIPtrInput is an input type that accepts URIArgs, URIPtr and URIPtrOutput values.
// You can construct a concrete instance of `URIPtrInput` via:
//
//	        URIArgs{...}
//
//	or:
//
//	        nil
type URIPtrInput interface {
	pulumi.Input

	ToURIPtrOutput() URIPtrOutput
	ToURIPtrOutputWithContext(context.Context) URIPtrOutput
}

type uriPtrType URIArgs

func URIPtr(v *URIArgs) URIPtrInput {
	return (*uriPtrType)(v)
}

func (*uriPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**URI)(nil)).Elem()
}

func (i *uriPtrType) ToURIPtrOutput() URIPtrOutput {
	return i.ToURIPtrOutputWithContext(context.Background())
}

func (i *uriPtrType) ToURIPtrOutputWithContext(ctx context.Context) URIPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URIPtrOutput)
}

// URIArrayInput is an input type that accepts URIArray and URIArrayOutput values.
// You can construct a concrete instance of `URIArrayInput` via:
//
//	URIArray{ URIArgs{...} }
type URIArrayInput interface {
	pulumi.Input

	ToURIArrayOutput() URIArrayOutput
	ToURIArrayOutputWithContext(context.Context) URIArrayOutput
}

type URIArray []URIInput

func (URIArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]URI)(nil)).Elem()
}

func (i URIArray) ToURIArrayOutput() URIArrayOutput {
	return i.ToURIArrayOutputWithContext(context.Background())
}

func (i URIArray) ToURIArrayOutputWithContext(ctx context.Context) URIArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URIArrayOutput)
}

// An URI message.
type URIOutput struct{ *pulumi.OutputState }

func (URIOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*URI)(nil)).Elem()
}

func (o URIOutput) ToURIOutput() URIOutput {
	return o
}

func (o URIOutput) ToURIOutputWithContext(ctx context.Context) URIOutput {
	return o
}

func (o URIOutput) ToURIPtrOutput() URIPtrOutput {
	return o.ToURIPtrOutputWithContext(context.Background())
}

func (o URIOutput) ToURIPtrOutputWithContext(ctx context.Context) URIPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v URI) *URI {
		return &v
	}).(URIPtrOutput)
}

// A label for the URI.
func (o URIOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v URI) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// The unique resource identifier.
func (o URIOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v URI) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type URIPtrOutput struct{ *pulumi.OutputState }

func (URIPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**URI)(nil)).Elem()
}

func (o URIPtrOutput) ToURIPtrOutput() URIPtrOutput {
	return o
}

func (o URIPtrOutput) ToURIPtrOutputWithContext(ctx context.Context) URIPtrOutput {
	return o
}

func (o URIPtrOutput) Elem() URIOutput {
	return o.ApplyT(func(v *URI) URI {
		if v != nil {
			return *v
		}
		var ret URI
		return ret
	}).(URIOutput)
}

// A label for the URI.
func (o URIPtrOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *URI) *string {
		if v == nil {
			return nil
		}
		return v.Label
	}).(pulumi.StringPtrOutput)
}

// The unique resource identifier.
func (o URIPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *URI) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

type URIArrayOutput struct{ *pulumi.OutputState }

func (URIArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]URI)(nil)).Elem()
}

func (o URIArrayOutput) ToURIArrayOutput() URIArrayOutput {
	return o
}

func (o URIArrayOutput) ToURIArrayOutputWithContext(ctx context.Context) URIArrayOutput {
	return o
}

func (o URIArrayOutput) Index(i pulumi.IntInput) URIOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) URI {
		return vs[0].([]URI)[vs[1].(int)]
	}).(URIOutput)
}

// An URI message.
type URIResponse struct {
	// A label for the URI.
	Label string `pulumi:"label"`
	// The unique resource identifier.
	Uri string `pulumi:"uri"`
}

// An URI message.
type URIResponseOutput struct{ *pulumi.OutputState }

func (URIResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*URIResponse)(nil)).Elem()
}

func (o URIResponseOutput) ToURIResponseOutput() URIResponseOutput {
	return o
}

func (o URIResponseOutput) ToURIResponseOutputWithContext(ctx context.Context) URIResponseOutput {
	return o
}

// A label for the URI.
func (o URIResponseOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v URIResponse) string { return v.Label }).(pulumi.StringOutput)
}

// The unique resource identifier.
func (o URIResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v URIResponse) string { return v.Uri }).(pulumi.StringOutput)
}

type URIResponseArrayOutput struct{ *pulumi.OutputState }

func (URIResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]URIResponse)(nil)).Elem()
}

func (o URIResponseArrayOutput) ToURIResponseArrayOutput() URIResponseArrayOutput {
	return o
}

func (o URIResponseArrayOutput) ToURIResponseArrayOutputWithContext(ctx context.Context) URIResponseArrayOutput {
	return o
}

func (o URIResponseArrayOutput) Index(i pulumi.IntInput) URIResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) URIResponse {
		return vs[0].([]URIResponse)[vs[1].(int)]
	}).(URIResponseOutput)
}

// The Upgrade Distribution represents metadata about the Upgrade for each operating system (CPE). Some distributions have additional metadata around updates, classifying them into various categories and severities.
type UpgradeDistribution struct {
	// The operating system classification of this Upgrade, as specified by the upstream operating system upgrade feed.
	Classification *string `pulumi:"classification"`
	// Required - The specific operating system this metadata applies to. See https://cpe.mitre.org/specification/.
	CpeUri *string `pulumi:"cpeUri"`
	// The cve that would be resolved by this upgrade.
	Cve []string `pulumi:"cve"`
	// The severity as specified by the upstream operating system.
	Severity *string `pulumi:"severity"`
}

// UpgradeDistributionInput is an input type that accepts UpgradeDistributionArgs and UpgradeDistributionOutput values.
// You can construct a concrete instance of `UpgradeDistributionInput` via:
//
//	UpgradeDistributionArgs{...}
type UpgradeDistributionInput interface {
	pulumi.Input

	ToUpgradeDistributionOutput() UpgradeDistributionOutput
	ToUpgradeDistributionOutputWithContext(context.Context) UpgradeDistributionOutput
}

// The Upgrade Distribution represents metadata about the Upgrade for each operating system (CPE). Some distributions have additional metadata around updates, classifying them into various categories and severities.
type UpgradeDistributionArgs struct {
	// The operating system classification of this Upgrade, as specified by the upstream operating system upgrade feed.
	Classification pulumi.StringPtrInput `pulumi:"classification"`
	// Required - The specific operating system this metadata applies to. See https://cpe.mitre.org/specification/.
	CpeUri pulumi.StringPtrInput `pulumi:"cpeUri"`
	// The cve that would be resolved by this upgrade.
	Cve pulumi.StringArrayInput `pulumi:"cve"`
	// The severity as specified by the upstream operating system.
	Severity pulumi.StringPtrInput `pulumi:"severity"`
}

func (UpgradeDistributionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UpgradeDistribution)(nil)).Elem()
}

func (i UpgradeDistributionArgs) ToUpgradeDistributionOutput() UpgradeDistributionOutput {
	return i.ToUpgradeDistributionOutputWithContext(context.Background())
}

func (i UpgradeDistributionArgs) ToUpgradeDistributionOutputWithContext(ctx context.Context) UpgradeDistributionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradeDistributionOutput)
}

func (i UpgradeDistributionArgs) ToUpgradeDistributionPtrOutput() UpgradeDistributionPtrOutput {
	return i.ToUpgradeDistributionPtrOutputWithContext(context.Background())
}

func (i UpgradeDistributionArgs) ToUpgradeDistributionPtrOutputWithContext(ctx context.Context) UpgradeDistributionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradeDistributionOutput).ToUpgradeDistributionPtrOutputWithContext(ctx)
}

// UpgradeDistributionPtrInput is an input type that accepts UpgradeDistributionArgs, UpgradeDistributionPtr and UpgradeDistributionPtrOutput values.
// You can construct a concrete instance of `UpgradeDistributionPtrInput` via:
//
//	        UpgradeDistributionArgs{...}
//
//	or:
//
//	        nil
type UpgradeDistributionPtrInput interface {
	pulumi.Input

	ToUpgradeDistributionPtrOutput() UpgradeDistributionPtrOutput
	ToUpgradeDistributionPtrOutputWithContext(context.Context) UpgradeDistributionPtrOutput
}

type upgradeDistributionPtrType UpgradeDistributionArgs

func UpgradeDistributionPtr(v *UpgradeDistributionArgs) UpgradeDistributionPtrInput {
	return (*upgradeDistributionPtrType)(v)
}

func (*upgradeDistributionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UpgradeDistribution)(nil)).Elem()
}

func (i *upgradeDistributionPtrType) ToUpgradeDistributionPtrOutput() UpgradeDistributionPtrOutput {
	return i.ToUpgradeDistributionPtrOutputWithContext(context.Background())
}

func (i *upgradeDistributionPtrType) ToUpgradeDistributionPtrOutputWithContext(ctx context.Context) UpgradeDistributionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradeDistributionPtrOutput)
}

// UpgradeDistributionArrayInput is an input type that accepts UpgradeDistributionArray and UpgradeDistributionArrayOutput values.
// You can construct a concrete instance of `UpgradeDistributionArrayInput` via:
//
//	UpgradeDistributionArray{ UpgradeDistributionArgs{...} }
type UpgradeDistributionArrayInput interface {
	pulumi.Input

	ToUpgradeDistributionArrayOutput() UpgradeDistributionArrayOutput
	ToUpgradeDistributionArrayOutputWithContext(context.Context) UpgradeDistributionArrayOutput
}

type UpgradeDistributionArray []UpgradeDistributionInput

func (UpgradeDistributionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UpgradeDistribution)(nil)).Elem()
}

func (i UpgradeDistributionArray) ToUpgradeDistributionArrayOutput() UpgradeDistributionArrayOutput {
	return i.ToUpgradeDistributionArrayOutputWithContext(context.Background())
}

func (i UpgradeDistributionArray) ToUpgradeDistributionArrayOutputWithContext(ctx context.Context) UpgradeDistributionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradeDistributionArrayOutput)
}

// The Upgrade Distribution represents metadata about the Upgrade for each operating system (CPE). Some distributions have additional metadata around updates, classifying them into various categories and severities.
type UpgradeDistributionOutput struct{ *pulumi.OutputState }

func (UpgradeDistributionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpgradeDistribution)(nil)).Elem()
}

func (o UpgradeDistributionOutput) ToUpgradeDistributionOutput() UpgradeDistributionOutput {
	return o
}

func (o UpgradeDistributionOutput) ToUpgradeDistributionOutputWithContext(ctx context.Context) UpgradeDistributionOutput {
	return o
}

func (o UpgradeDistributionOutput) ToUpgradeDistributionPtrOutput() UpgradeDistributionPtrOutput {
	return o.ToUpgradeDistributionPtrOutputWithContext(context.Background())
}

func (o UpgradeDistributionOutput) ToUpgradeDistributionPtrOutputWithContext(ctx context.Context) UpgradeDistributionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UpgradeDistribution) *UpgradeDistribution {
		return &v
	}).(UpgradeDistributionPtrOutput)
}

// The operating system classification of this Upgrade, as specified by the upstream operating system upgrade feed.
func (o UpgradeDistributionOutput) Classification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpgradeDistribution) *string { return v.Classification }).(pulumi.StringPtrOutput)
}

// Required - The specific operating system this metadata applies to. See https://cpe.mitre.org/specification/.
func (o UpgradeDistributionOutput) CpeUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpgradeDistribution) *string { return v.CpeUri }).(pulumi.StringPtrOutput)
}

// The cve that would be resolved by this upgrade.
func (o UpgradeDistributionOutput) Cve() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UpgradeDistribution) []string { return v.Cve }).(pulumi.StringArrayOutput)
}

// The severity as specified by the upstream operating system.
func (o UpgradeDistributionOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpgradeDistribution) *string { return v.Severity }).(pulumi.StringPtrOutput)
}

type UpgradeDistributionPtrOutput struct{ *pulumi.OutputState }

func (UpgradeDistributionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UpgradeDistribution)(nil)).Elem()
}

func (o UpgradeDistributionPtrOutput) ToUpgradeDistributionPtrOutput() UpgradeDistributionPtrOutput {
	return o
}

func (o UpgradeDistributionPtrOutput) ToUpgradeDistributionPtrOutputWithContext(ctx context.Context) UpgradeDistributionPtrOutput {
	return o
}

func (o UpgradeDistributionPtrOutput) Elem() UpgradeDistributionOutput {
	return o.ApplyT(func(v *UpgradeDistribution) UpgradeDistribution {
		if v != nil {
			return *v
		}
		var ret UpgradeDistribution
		return ret
	}).(UpgradeDistributionOutput)
}

// The operating system classification of this Upgrade, as specified by the upstream operating system upgrade feed.
func (o UpgradeDistributionPtrOutput) Classification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UpgradeDistribution) *string {
		if v == nil {
			return nil
		}
		return v.Classification
	}).(pulumi.StringPtrOutput)
}

// Required - The specific operating system this metadata applies to. See https://cpe.mitre.org/specification/.
func (o UpgradeDistributionPtrOutput) CpeUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UpgradeDistribution) *string {
		if v == nil {
			return nil
		}
		return v.CpeUri
	}).(pulumi.StringPtrOutput)
}

// The cve that would be resolved by this upgrade.
func (o UpgradeDistributionPtrOutput) Cve() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *UpgradeDistribution) []string {
		if v == nil {
			return nil
		}
		return v.Cve
	}).(pulumi.StringArrayOutput)
}

// The severity as specified by the upstream operating system.
func (o UpgradeDistributionPtrOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UpgradeDistribution) *string {
		if v == nil {
			return nil
		}
		return v.Severity
	}).(pulumi.StringPtrOutput)
}

type UpgradeDistributionArrayOutput struct{ *pulumi.OutputState }

func (UpgradeDistributionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UpgradeDistribution)(nil)).Elem()
}

func (o UpgradeDistributionArrayOutput) ToUpgradeDistributionArrayOutput() UpgradeDistributionArrayOutput {
	return o
}

func (o UpgradeDistributionArrayOutput) ToUpgradeDistributionArrayOutputWithContext(ctx context.Context) UpgradeDistributionArrayOutput {
	return o
}

func (o UpgradeDistributionArrayOutput) Index(i pulumi.IntInput) UpgradeDistributionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UpgradeDistribution {
		return vs[0].([]UpgradeDistribution)[vs[1].(int)]
	}).(UpgradeDistributionOutput)
}

// The Upgrade Distribution represents metadata about the Upgrade for each operating system (CPE). Some distributions have additional metadata around updates, classifying them into various categories and severities.
type UpgradeDistributionResponse struct {
	// The operating system classification of this Upgrade, as specified by the upstream operating system upgrade feed.
	Classification string `pulumi:"classification"`
	// Required - The specific operating system this metadata applies to. See https://cpe.mitre.org/specification/.
	CpeUri string `pulumi:"cpeUri"`
	// The cve that would be resolved by this upgrade.
	Cve []string `pulumi:"cve"`
	// The severity as specified by the upstream operating system.
	Severity string `pulumi:"severity"`
}

// The Upgrade Distribution represents metadata about the Upgrade for each operating system (CPE). Some distributions have additional metadata around updates, classifying them into various categories and severities.
type UpgradeDistributionResponseOutput struct{ *pulumi.OutputState }

func (UpgradeDistributionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpgradeDistributionResponse)(nil)).Elem()
}

func (o UpgradeDistributionResponseOutput) ToUpgradeDistributionResponseOutput() UpgradeDistributionResponseOutput {
	return o
}

func (o UpgradeDistributionResponseOutput) ToUpgradeDistributionResponseOutputWithContext(ctx context.Context) UpgradeDistributionResponseOutput {
	return o
}

// The operating system classification of this Upgrade, as specified by the upstream operating system upgrade feed.
func (o UpgradeDistributionResponseOutput) Classification() pulumi.StringOutput {
	return o.ApplyT(func(v UpgradeDistributionResponse) string { return v.Classification }).(pulumi.StringOutput)
}

// Required - The specific operating system this metadata applies to. See https://cpe.mitre.org/specification/.
func (o UpgradeDistributionResponseOutput) CpeUri() pulumi.StringOutput {
	return o.ApplyT(func(v UpgradeDistributionResponse) string { return v.CpeUri }).(pulumi.StringOutput)
}

// The cve that would be resolved by this upgrade.
func (o UpgradeDistributionResponseOutput) Cve() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UpgradeDistributionResponse) []string { return v.Cve }).(pulumi.StringArrayOutput)
}

// The severity as specified by the upstream operating system.
func (o UpgradeDistributionResponseOutput) Severity() pulumi.StringOutput {
	return o.ApplyT(func(v UpgradeDistributionResponse) string { return v.Severity }).(pulumi.StringOutput)
}

type UpgradeDistributionResponseArrayOutput struct{ *pulumi.OutputState }

func (UpgradeDistributionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UpgradeDistributionResponse)(nil)).Elem()
}

func (o UpgradeDistributionResponseArrayOutput) ToUpgradeDistributionResponseArrayOutput() UpgradeDistributionResponseArrayOutput {
	return o
}

func (o UpgradeDistributionResponseArrayOutput) ToUpgradeDistributionResponseArrayOutputWithContext(ctx context.Context) UpgradeDistributionResponseArrayOutput {
	return o
}

func (o UpgradeDistributionResponseArrayOutput) Index(i pulumi.IntInput) UpgradeDistributionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UpgradeDistributionResponse {
		return vs[0].([]UpgradeDistributionResponse)[vs[1].(int)]
	}).(UpgradeDistributionResponseOutput)
}

// An Upgrade Note represents a potential upgrade of a package to a given version. For each package version combination (i.e. bash 4.0, bash 4.1, bash 4.1.2), there will be a Upgrade Note.
type UpgradeNote struct {
	// Metadata about the upgrade for each specific operating system.
	Distributions []UpgradeDistribution `pulumi:"distributions"`
	// Required - The package this Upgrade is for.
	Package *string `pulumi:"package"`
	// Required - The version of the package in machine + human readable form.
	Version *Version `pulumi:"version"`
}

// UpgradeNoteInput is an input type that accepts UpgradeNoteArgs and UpgradeNoteOutput values.
// You can construct a concrete instance of `UpgradeNoteInput` via:
//
//	UpgradeNoteArgs{...}
type UpgradeNoteInput interface {
	pulumi.Input

	ToUpgradeNoteOutput() UpgradeNoteOutput
	ToUpgradeNoteOutputWithContext(context.Context) UpgradeNoteOutput
}

// An Upgrade Note represents a potential upgrade of a package to a given version. For each package version combination (i.e. bash 4.0, bash 4.1, bash 4.1.2), there will be a Upgrade Note.
type UpgradeNoteArgs struct {
	// Metadata about the upgrade for each specific operating system.
	Distributions UpgradeDistributionArrayInput `pulumi:"distributions"`
	// Required - The package this Upgrade is for.
	Package pulumi.StringPtrInput `pulumi:"package"`
	// Required - The version of the package in machine + human readable form.
	Version VersionPtrInput `pulumi:"version"`
}

func (UpgradeNoteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UpgradeNote)(nil)).Elem()
}

func (i UpgradeNoteArgs) ToUpgradeNoteOutput() UpgradeNoteOutput {
	return i.ToUpgradeNoteOutputWithContext(context.Background())
}

func (i UpgradeNoteArgs) ToUpgradeNoteOutputWithContext(ctx context.Context) UpgradeNoteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradeNoteOutput)
}

func (i UpgradeNoteArgs) ToUpgradeNotePtrOutput() UpgradeNotePtrOutput {
	return i.ToUpgradeNotePtrOutputWithContext(context.Background())
}

func (i UpgradeNoteArgs) ToUpgradeNotePtrOutputWithContext(ctx context.Context) UpgradeNotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradeNoteOutput).ToUpgradeNotePtrOutputWithContext(ctx)
}

// UpgradeNotePtrInput is an input type that accepts UpgradeNoteArgs, UpgradeNotePtr and UpgradeNotePtrOutput values.
// You can construct a concrete instance of `UpgradeNotePtrInput` via:
//
//	        UpgradeNoteArgs{...}
//
//	or:
//
//	        nil
type UpgradeNotePtrInput interface {
	pulumi.Input

	ToUpgradeNotePtrOutput() UpgradeNotePtrOutput
	ToUpgradeNotePtrOutputWithContext(context.Context) UpgradeNotePtrOutput
}

type upgradeNotePtrType UpgradeNoteArgs

func UpgradeNotePtr(v *UpgradeNoteArgs) UpgradeNotePtrInput {
	return (*upgradeNotePtrType)(v)
}

func (*upgradeNotePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UpgradeNote)(nil)).Elem()
}

func (i *upgradeNotePtrType) ToUpgradeNotePtrOutput() UpgradeNotePtrOutput {
	return i.ToUpgradeNotePtrOutputWithContext(context.Background())
}

func (i *upgradeNotePtrType) ToUpgradeNotePtrOutputWithContext(ctx context.Context) UpgradeNotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradeNotePtrOutput)
}

// An Upgrade Note represents a potential upgrade of a package to a given version. For each package version combination (i.e. bash 4.0, bash 4.1, bash 4.1.2), there will be a Upgrade Note.
type UpgradeNoteOutput struct{ *pulumi.OutputState }

func (UpgradeNoteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpgradeNote)(nil)).Elem()
}

func (o UpgradeNoteOutput) ToUpgradeNoteOutput() UpgradeNoteOutput {
	return o
}

func (o UpgradeNoteOutput) ToUpgradeNoteOutputWithContext(ctx context.Context) UpgradeNoteOutput {
	return o
}

func (o UpgradeNoteOutput) ToUpgradeNotePtrOutput() UpgradeNotePtrOutput {
	return o.ToUpgradeNotePtrOutputWithContext(context.Background())
}

func (o UpgradeNoteOutput) ToUpgradeNotePtrOutputWithContext(ctx context.Context) UpgradeNotePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UpgradeNote) *UpgradeNote {
		return &v
	}).(UpgradeNotePtrOutput)
}

// Metadata about the upgrade for each specific operating system.
func (o UpgradeNoteOutput) Distributions() UpgradeDistributionArrayOutput {
	return o.ApplyT(func(v UpgradeNote) []UpgradeDistribution { return v.Distributions }).(UpgradeDistributionArrayOutput)
}

// Required - The package this Upgrade is for.
func (o UpgradeNoteOutput) Package() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpgradeNote) *string { return v.Package }).(pulumi.StringPtrOutput)
}

// Required - The version of the package in machine + human readable form.
func (o UpgradeNoteOutput) Version() VersionPtrOutput {
	return o.ApplyT(func(v UpgradeNote) *Version { return v.Version }).(VersionPtrOutput)
}

type UpgradeNotePtrOutput struct{ *pulumi.OutputState }

func (UpgradeNotePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UpgradeNote)(nil)).Elem()
}

func (o UpgradeNotePtrOutput) ToUpgradeNotePtrOutput() UpgradeNotePtrOutput {
	return o
}

func (o UpgradeNotePtrOutput) ToUpgradeNotePtrOutputWithContext(ctx context.Context) UpgradeNotePtrOutput {
	return o
}

func (o UpgradeNotePtrOutput) Elem() UpgradeNoteOutput {
	return o.ApplyT(func(v *UpgradeNote) UpgradeNote {
		if v != nil {
			return *v
		}
		var ret UpgradeNote
		return ret
	}).(UpgradeNoteOutput)
}

// Metadata about the upgrade for each specific operating system.
func (o UpgradeNotePtrOutput) Distributions() UpgradeDistributionArrayOutput {
	return o.ApplyT(func(v *UpgradeNote) []UpgradeDistribution {
		if v == nil {
			return nil
		}
		return v.Distributions
	}).(UpgradeDistributionArrayOutput)
}

// Required - The package this Upgrade is for.
func (o UpgradeNotePtrOutput) Package() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UpgradeNote) *string {
		if v == nil {
			return nil
		}
		return v.Package
	}).(pulumi.StringPtrOutput)
}

// Required - The version of the package in machine + human readable form.
func (o UpgradeNotePtrOutput) Version() VersionPtrOutput {
	return o.ApplyT(func(v *UpgradeNote) *Version {
		if v == nil {
			return nil
		}
		return v.Version
	}).(VersionPtrOutput)
}

// An Upgrade Note represents a potential upgrade of a package to a given version. For each package version combination (i.e. bash 4.0, bash 4.1, bash 4.1.2), there will be a Upgrade Note.
type UpgradeNoteResponse struct {
	// Metadata about the upgrade for each specific operating system.
	Distributions []UpgradeDistributionResponse `pulumi:"distributions"`
	// Required - The package this Upgrade is for.
	Package string `pulumi:"package"`
	// Required - The version of the package in machine + human readable form.
	Version VersionResponse `pulumi:"version"`
}

// An Upgrade Note represents a potential upgrade of a package to a given version. For each package version combination (i.e. bash 4.0, bash 4.1, bash 4.1.2), there will be a Upgrade Note.
type UpgradeNoteResponseOutput struct{ *pulumi.OutputState }

func (UpgradeNoteResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpgradeNoteResponse)(nil)).Elem()
}

func (o UpgradeNoteResponseOutput) ToUpgradeNoteResponseOutput() UpgradeNoteResponseOutput {
	return o
}

func (o UpgradeNoteResponseOutput) ToUpgradeNoteResponseOutputWithContext(ctx context.Context) UpgradeNoteResponseOutput {
	return o
}

// Metadata about the upgrade for each specific operating system.
func (o UpgradeNoteResponseOutput) Distributions() UpgradeDistributionResponseArrayOutput {
	return o.ApplyT(func(v UpgradeNoteResponse) []UpgradeDistributionResponse { return v.Distributions }).(UpgradeDistributionResponseArrayOutput)
}

// Required - The package this Upgrade is for.
func (o UpgradeNoteResponseOutput) Package() pulumi.StringOutput {
	return o.ApplyT(func(v UpgradeNoteResponse) string { return v.Package }).(pulumi.StringOutput)
}

// Required - The version of the package in machine + human readable form.
func (o UpgradeNoteResponseOutput) Version() VersionResponseOutput {
	return o.ApplyT(func(v UpgradeNoteResponse) VersionResponse { return v.Version }).(VersionResponseOutput)
}

// An Upgrade Occurrence represents that a specific resource_url could install a specific upgrade. This presence is supplied via local sources (i.e. it is present in the mirror and the running system has noticed its availability).
type UpgradeOccurrence struct {
	// Metadata about the upgrade for available for the specific operating system for the resource_url. This allows efficient filtering, as well as making it easier to use the occurrence.
	Distribution *UpgradeDistribution `pulumi:"distribution"`
	// Required - The package this Upgrade is for.
	Package *string `pulumi:"package"`
	// Required - The version of the package in a machine + human readable form.
	ParsedVersion *Version `pulumi:"parsedVersion"`
}

// UpgradeOccurrenceInput is an input type that accepts UpgradeOccurrenceArgs and UpgradeOccurrenceOutput values.
// You can construct a concrete instance of `UpgradeOccurrenceInput` via:
//
//	UpgradeOccurrenceArgs{...}
type UpgradeOccurrenceInput interface {
	pulumi.Input

	ToUpgradeOccurrenceOutput() UpgradeOccurrenceOutput
	ToUpgradeOccurrenceOutputWithContext(context.Context) UpgradeOccurrenceOutput
}

// An Upgrade Occurrence represents that a specific resource_url could install a specific upgrade. This presence is supplied via local sources (i.e. it is present in the mirror and the running system has noticed its availability).
type UpgradeOccurrenceArgs struct {
	// Metadata about the upgrade for available for the specific operating system for the resource_url. This allows efficient filtering, as well as making it easier to use the occurrence.
	Distribution UpgradeDistributionPtrInput `pulumi:"distribution"`
	// Required - The package this Upgrade is for.
	Package pulumi.StringPtrInput `pulumi:"package"`
	// Required - The version of the package in a machine + human readable form.
	ParsedVersion VersionPtrInput `pulumi:"parsedVersion"`
}

func (UpgradeOccurrenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UpgradeOccurrence)(nil)).Elem()
}

func (i UpgradeOccurrenceArgs) ToUpgradeOccurrenceOutput() UpgradeOccurrenceOutput {
	return i.ToUpgradeOccurrenceOutputWithContext(context.Background())
}

func (i UpgradeOccurrenceArgs) ToUpgradeOccurrenceOutputWithContext(ctx context.Context) UpgradeOccurrenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradeOccurrenceOutput)
}

func (i UpgradeOccurrenceArgs) ToUpgradeOccurrencePtrOutput() UpgradeOccurrencePtrOutput {
	return i.ToUpgradeOccurrencePtrOutputWithContext(context.Background())
}

func (i UpgradeOccurrenceArgs) ToUpgradeOccurrencePtrOutputWithContext(ctx context.Context) UpgradeOccurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradeOccurrenceOutput).ToUpgradeOccurrencePtrOutputWithContext(ctx)
}

// UpgradeOccurrencePtrInput is an input type that accepts UpgradeOccurrenceArgs, UpgradeOccurrencePtr and UpgradeOccurrencePtrOutput values.
// You can construct a concrete instance of `UpgradeOccurrencePtrInput` via:
//
//	        UpgradeOccurrenceArgs{...}
//
//	or:
//
//	        nil
type UpgradeOccurrencePtrInput interface {
	pulumi.Input

	ToUpgradeOccurrencePtrOutput() UpgradeOccurrencePtrOutput
	ToUpgradeOccurrencePtrOutputWithContext(context.Context) UpgradeOccurrencePtrOutput
}

type upgradeOccurrencePtrType UpgradeOccurrenceArgs

func UpgradeOccurrencePtr(v *UpgradeOccurrenceArgs) UpgradeOccurrencePtrInput {
	return (*upgradeOccurrencePtrType)(v)
}

func (*upgradeOccurrencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UpgradeOccurrence)(nil)).Elem()
}

func (i *upgradeOccurrencePtrType) ToUpgradeOccurrencePtrOutput() UpgradeOccurrencePtrOutput {
	return i.ToUpgradeOccurrencePtrOutputWithContext(context.Background())
}

func (i *upgradeOccurrencePtrType) ToUpgradeOccurrencePtrOutputWithContext(ctx context.Context) UpgradeOccurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradeOccurrencePtrOutput)
}

// An Upgrade Occurrence represents that a specific resource_url could install a specific upgrade. This presence is supplied via local sources (i.e. it is present in the mirror and the running system has noticed its availability).
type UpgradeOccurrenceOutput struct{ *pulumi.OutputState }

func (UpgradeOccurrenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpgradeOccurrence)(nil)).Elem()
}

func (o UpgradeOccurrenceOutput) ToUpgradeOccurrenceOutput() UpgradeOccurrenceOutput {
	return o
}

func (o UpgradeOccurrenceOutput) ToUpgradeOccurrenceOutputWithContext(ctx context.Context) UpgradeOccurrenceOutput {
	return o
}

func (o UpgradeOccurrenceOutput) ToUpgradeOccurrencePtrOutput() UpgradeOccurrencePtrOutput {
	return o.ToUpgradeOccurrencePtrOutputWithContext(context.Background())
}

func (o UpgradeOccurrenceOutput) ToUpgradeOccurrencePtrOutputWithContext(ctx context.Context) UpgradeOccurrencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UpgradeOccurrence) *UpgradeOccurrence {
		return &v
	}).(UpgradeOccurrencePtrOutput)
}

// Metadata about the upgrade for available for the specific operating system for the resource_url. This allows efficient filtering, as well as making it easier to use the occurrence.
func (o UpgradeOccurrenceOutput) Distribution() UpgradeDistributionPtrOutput {
	return o.ApplyT(func(v UpgradeOccurrence) *UpgradeDistribution { return v.Distribution }).(UpgradeDistributionPtrOutput)
}

// Required - The package this Upgrade is for.
func (o UpgradeOccurrenceOutput) Package() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpgradeOccurrence) *string { return v.Package }).(pulumi.StringPtrOutput)
}

// Required - The version of the package in a machine + human readable form.
func (o UpgradeOccurrenceOutput) ParsedVersion() VersionPtrOutput {
	return o.ApplyT(func(v UpgradeOccurrence) *Version { return v.ParsedVersion }).(VersionPtrOutput)
}

type UpgradeOccurrencePtrOutput struct{ *pulumi.OutputState }

func (UpgradeOccurrencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UpgradeOccurrence)(nil)).Elem()
}

func (o UpgradeOccurrencePtrOutput) ToUpgradeOccurrencePtrOutput() UpgradeOccurrencePtrOutput {
	return o
}

func (o UpgradeOccurrencePtrOutput) ToUpgradeOccurrencePtrOutputWithContext(ctx context.Context) UpgradeOccurrencePtrOutput {
	return o
}

func (o UpgradeOccurrencePtrOutput) Elem() UpgradeOccurrenceOutput {
	return o.ApplyT(func(v *UpgradeOccurrence) UpgradeOccurrence {
		if v != nil {
			return *v
		}
		var ret UpgradeOccurrence
		return ret
	}).(UpgradeOccurrenceOutput)
}

// Metadata about the upgrade for available for the specific operating system for the resource_url. This allows efficient filtering, as well as making it easier to use the occurrence.
func (o UpgradeOccurrencePtrOutput) Distribution() UpgradeDistributionPtrOutput {
	return o.ApplyT(func(v *UpgradeOccurrence) *UpgradeDistribution {
		if v == nil {
			return nil
		}
		return v.Distribution
	}).(UpgradeDistributionPtrOutput)
}

// Required - The package this Upgrade is for.
func (o UpgradeOccurrencePtrOutput) Package() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UpgradeOccurrence) *string {
		if v == nil {
			return nil
		}
		return v.Package
	}).(pulumi.StringPtrOutput)
}

// Required - The version of the package in a machine + human readable form.
func (o UpgradeOccurrencePtrOutput) ParsedVersion() VersionPtrOutput {
	return o.ApplyT(func(v *UpgradeOccurrence) *Version {
		if v == nil {
			return nil
		}
		return v.ParsedVersion
	}).(VersionPtrOutput)
}

// An Upgrade Occurrence represents that a specific resource_url could install a specific upgrade. This presence is supplied via local sources (i.e. it is present in the mirror and the running system has noticed its availability).
type UpgradeOccurrenceResponse struct {
	// Metadata about the upgrade for available for the specific operating system for the resource_url. This allows efficient filtering, as well as making it easier to use the occurrence.
	Distribution UpgradeDistributionResponse `pulumi:"distribution"`
	// Required - The package this Upgrade is for.
	Package string `pulumi:"package"`
	// Required - The version of the package in a machine + human readable form.
	ParsedVersion VersionResponse `pulumi:"parsedVersion"`
}

// An Upgrade Occurrence represents that a specific resource_url could install a specific upgrade. This presence is supplied via local sources (i.e. it is present in the mirror and the running system has noticed its availability).
type UpgradeOccurrenceResponseOutput struct{ *pulumi.OutputState }

func (UpgradeOccurrenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpgradeOccurrenceResponse)(nil)).Elem()
}

func (o UpgradeOccurrenceResponseOutput) ToUpgradeOccurrenceResponseOutput() UpgradeOccurrenceResponseOutput {
	return o
}

func (o UpgradeOccurrenceResponseOutput) ToUpgradeOccurrenceResponseOutputWithContext(ctx context.Context) UpgradeOccurrenceResponseOutput {
	return o
}

// Metadata about the upgrade for available for the specific operating system for the resource_url. This allows efficient filtering, as well as making it easier to use the occurrence.
func (o UpgradeOccurrenceResponseOutput) Distribution() UpgradeDistributionResponseOutput {
	return o.ApplyT(func(v UpgradeOccurrenceResponse) UpgradeDistributionResponse { return v.Distribution }).(UpgradeDistributionResponseOutput)
}

// Required - The package this Upgrade is for.
func (o UpgradeOccurrenceResponseOutput) Package() pulumi.StringOutput {
	return o.ApplyT(func(v UpgradeOccurrenceResponse) string { return v.Package }).(pulumi.StringOutput)
}

// Required - The version of the package in a machine + human readable form.
func (o UpgradeOccurrenceResponseOutput) ParsedVersion() VersionResponseOutput {
	return o.ApplyT(func(v UpgradeOccurrenceResponse) VersionResponse { return v.ParsedVersion }).(VersionResponseOutput)
}

// Version contains structured information about the version of the package. For a discussion of this in Debian/Ubuntu: http://serverfault.com/questions/604541/debian-packages-version-convention For a discussion of this in Redhat/Fedora/Centos: http://blog.jasonantman.com/2014/07/how-yum-and-rpm-compare-versions/
type Version struct {
	// Used to correct mistakes in the version numbering scheme.
	Epoch *int `pulumi:"epoch"`
	// Whether this version is vulnerable, when defining the version bounds. For example, if the minimum version is 2.0, inclusive=true would say 2.0 is vulnerable, while inclusive=false would say it's not
	Inclusive *bool `pulumi:"inclusive"`
	// Distinguish between sentinel MIN/MAX versions and normal versions. If kind is not NORMAL, then the other fields are ignored.
	Kind *VersionKind `pulumi:"kind"`
	// The main part of the version name.
	Name *string `pulumi:"name"`
	// The iteration of the package build from the above version.
	Revision *string `pulumi:"revision"`
}

// VersionInput is an input type that accepts VersionArgs and VersionOutput values.
// You can construct a concrete instance of `VersionInput` via:
//
//	VersionArgs{...}
type VersionInput interface {
	pulumi.Input

	ToVersionOutput() VersionOutput
	ToVersionOutputWithContext(context.Context) VersionOutput
}

// Version contains structured information about the version of the package. For a discussion of this in Debian/Ubuntu: http://serverfault.com/questions/604541/debian-packages-version-convention For a discussion of this in Redhat/Fedora/Centos: http://blog.jasonantman.com/2014/07/how-yum-and-rpm-compare-versions/
type VersionArgs struct {
	// Used to correct mistakes in the version numbering scheme.
	Epoch pulumi.IntPtrInput `pulumi:"epoch"`
	// Whether this version is vulnerable, when defining the version bounds. For example, if the minimum version is 2.0, inclusive=true would say 2.0 is vulnerable, while inclusive=false would say it's not
	Inclusive pulumi.BoolPtrInput `pulumi:"inclusive"`
	// Distinguish between sentinel MIN/MAX versions and normal versions. If kind is not NORMAL, then the other fields are ignored.
	Kind VersionKindPtrInput `pulumi:"kind"`
	// The main part of the version name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The iteration of the package build from the above version.
	Revision pulumi.StringPtrInput `pulumi:"revision"`
}

func (VersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Version)(nil)).Elem()
}

func (i VersionArgs) ToVersionOutput() VersionOutput {
	return i.ToVersionOutputWithContext(context.Background())
}

func (i VersionArgs) ToVersionOutputWithContext(ctx context.Context) VersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VersionOutput)
}

func (i VersionArgs) ToVersionPtrOutput() VersionPtrOutput {
	return i.ToVersionPtrOutputWithContext(context.Background())
}

func (i VersionArgs) ToVersionPtrOutputWithContext(ctx context.Context) VersionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VersionOutput).ToVersionPtrOutputWithContext(ctx)
}

// VersionPtrInput is an input type that accepts VersionArgs, VersionPtr and VersionPtrOutput values.
// You can construct a concrete instance of `VersionPtrInput` via:
//
//	        VersionArgs{...}
//
//	or:
//
//	        nil
type VersionPtrInput interface {
	pulumi.Input

	ToVersionPtrOutput() VersionPtrOutput
	ToVersionPtrOutputWithContext(context.Context) VersionPtrOutput
}

type versionPtrType VersionArgs

func VersionPtr(v *VersionArgs) VersionPtrInput {
	return (*versionPtrType)(v)
}

func (*versionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Version)(nil)).Elem()
}

func (i *versionPtrType) ToVersionPtrOutput() VersionPtrOutput {
	return i.ToVersionPtrOutputWithContext(context.Background())
}

func (i *versionPtrType) ToVersionPtrOutputWithContext(ctx context.Context) VersionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VersionPtrOutput)
}

// Version contains structured information about the version of the package. For a discussion of this in Debian/Ubuntu: http://serverfault.com/questions/604541/debian-packages-version-convention For a discussion of this in Redhat/Fedora/Centos: http://blog.jasonantman.com/2014/07/how-yum-and-rpm-compare-versions/
type VersionOutput struct{ *pulumi.OutputState }

func (VersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Version)(nil)).Elem()
}

func (o VersionOutput) ToVersionOutput() VersionOutput {
	return o
}

func (o VersionOutput) ToVersionOutputWithContext(ctx context.Context) VersionOutput {
	return o
}

func (o VersionOutput) ToVersionPtrOutput() VersionPtrOutput {
	return o.ToVersionPtrOutputWithContext(context.Background())
}

func (o VersionOutput) ToVersionPtrOutputWithContext(ctx context.Context) VersionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Version) *Version {
		return &v
	}).(VersionPtrOutput)
}

// Used to correct mistakes in the version numbering scheme.
func (o VersionOutput) Epoch() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Version) *int { return v.Epoch }).(pulumi.IntPtrOutput)
}

// Whether this version is vulnerable, when defining the version bounds. For example, if the minimum version is 2.0, inclusive=true would say 2.0 is vulnerable, while inclusive=false would say it's not
func (o VersionOutput) Inclusive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Version) *bool { return v.Inclusive }).(pulumi.BoolPtrOutput)
}

// Distinguish between sentinel MIN/MAX versions and normal versions. If kind is not NORMAL, then the other fields are ignored.
func (o VersionOutput) Kind() VersionKindPtrOutput {
	return o.ApplyT(func(v Version) *VersionKind { return v.Kind }).(VersionKindPtrOutput)
}

// The main part of the version name.
func (o VersionOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Version) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The iteration of the package build from the above version.
func (o VersionOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Version) *string { return v.Revision }).(pulumi.StringPtrOutput)
}

type VersionPtrOutput struct{ *pulumi.OutputState }

func (VersionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Version)(nil)).Elem()
}

func (o VersionPtrOutput) ToVersionPtrOutput() VersionPtrOutput {
	return o
}

func (o VersionPtrOutput) ToVersionPtrOutputWithContext(ctx context.Context) VersionPtrOutput {
	return o
}

func (o VersionPtrOutput) Elem() VersionOutput {
	return o.ApplyT(func(v *Version) Version {
		if v != nil {
			return *v
		}
		var ret Version
		return ret
	}).(VersionOutput)
}

// Used to correct mistakes in the version numbering scheme.
func (o VersionPtrOutput) Epoch() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Version) *int {
		if v == nil {
			return nil
		}
		return v.Epoch
	}).(pulumi.IntPtrOutput)
}

// Whether this version is vulnerable, when defining the version bounds. For example, if the minimum version is 2.0, inclusive=true would say 2.0 is vulnerable, while inclusive=false would say it's not
func (o VersionPtrOutput) Inclusive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Version) *bool {
		if v == nil {
			return nil
		}
		return v.Inclusive
	}).(pulumi.BoolPtrOutput)
}

// Distinguish between sentinel MIN/MAX versions and normal versions. If kind is not NORMAL, then the other fields are ignored.
func (o VersionPtrOutput) Kind() VersionKindPtrOutput {
	return o.ApplyT(func(v *Version) *VersionKind {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(VersionKindPtrOutput)
}

// The main part of the version name.
func (o VersionPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Version) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The iteration of the package build from the above version.
func (o VersionPtrOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Version) *string {
		if v == nil {
			return nil
		}
		return v.Revision
	}).(pulumi.StringPtrOutput)
}

// Version contains structured information about the version of the package. For a discussion of this in Debian/Ubuntu: http://serverfault.com/questions/604541/debian-packages-version-convention For a discussion of this in Redhat/Fedora/Centos: http://blog.jasonantman.com/2014/07/how-yum-and-rpm-compare-versions/
type VersionResponse struct {
	// Used to correct mistakes in the version numbering scheme.
	Epoch int `pulumi:"epoch"`
	// Whether this version is vulnerable, when defining the version bounds. For example, if the minimum version is 2.0, inclusive=true would say 2.0 is vulnerable, while inclusive=false would say it's not
	Inclusive bool `pulumi:"inclusive"`
	// Distinguish between sentinel MIN/MAX versions and normal versions. If kind is not NORMAL, then the other fields are ignored.
	Kind string `pulumi:"kind"`
	// The main part of the version name.
	Name string `pulumi:"name"`
	// The iteration of the package build from the above version.
	Revision string `pulumi:"revision"`
}

// Version contains structured information about the version of the package. For a discussion of this in Debian/Ubuntu: http://serverfault.com/questions/604541/debian-packages-version-convention For a discussion of this in Redhat/Fedora/Centos: http://blog.jasonantman.com/2014/07/how-yum-and-rpm-compare-versions/
type VersionResponseOutput struct{ *pulumi.OutputState }

func (VersionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VersionResponse)(nil)).Elem()
}

func (o VersionResponseOutput) ToVersionResponseOutput() VersionResponseOutput {
	return o
}

func (o VersionResponseOutput) ToVersionResponseOutputWithContext(ctx context.Context) VersionResponseOutput {
	return o
}

// Used to correct mistakes in the version numbering scheme.
func (o VersionResponseOutput) Epoch() pulumi.IntOutput {
	return o.ApplyT(func(v VersionResponse) int { return v.Epoch }).(pulumi.IntOutput)
}

// Whether this version is vulnerable, when defining the version bounds. For example, if the minimum version is 2.0, inclusive=true would say 2.0 is vulnerable, while inclusive=false would say it's not
func (o VersionResponseOutput) Inclusive() pulumi.BoolOutput {
	return o.ApplyT(func(v VersionResponse) bool { return v.Inclusive }).(pulumi.BoolOutput)
}

// Distinguish between sentinel MIN/MAX versions and normal versions. If kind is not NORMAL, then the other fields are ignored.
func (o VersionResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v VersionResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// The main part of the version name.
func (o VersionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VersionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The iteration of the package build from the above version.
func (o VersionResponseOutput) Revision() pulumi.StringOutput {
	return o.ApplyT(func(v VersionResponse) string { return v.Revision }).(pulumi.StringOutput)
}

// VexAssessment provides all publisher provided Vex information that is related to this vulnerability.
type VexAssessment struct {
	// Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability.
	Cve *string `pulumi:"cve"`
	// Contains information about the impact of this vulnerability, this will change with time.
	Impacts []string `pulumi:"impacts"`
	// Justification provides the justification when the state of the assessment if NOT_AFFECTED.
	Justification *Justification `pulumi:"justification"`
	// The VulnerabilityAssessment note from which this VexAssessment was generated. This will be of the form: `projects/[PROJECT_ID]/notes/[NOTE_ID]`.
	NoteName *string `pulumi:"noteName"`
	// Holds a list of references associated with this vulnerability item and assessment. These uris have additional information about the vulnerability and the assessment itself. E.g. Link to a document which details how this assessment concluded the state of this vulnerability.
	RelatedUris []URI `pulumi:"relatedUris"`
	// Specifies details on how to handle (and presumably, fix) a vulnerability.
	Remediations []Remediation `pulumi:"remediations"`
	// Provides the state of this Vulnerability assessment.
	State *VexAssessmentState `pulumi:"state"`
	// The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc.
	VulnerabilityId *string `pulumi:"vulnerabilityId"`
}

// VexAssessmentInput is an input type that accepts VexAssessmentArgs and VexAssessmentOutput values.
// You can construct a concrete instance of `VexAssessmentInput` via:
//
//	VexAssessmentArgs{...}
type VexAssessmentInput interface {
	pulumi.Input

	ToVexAssessmentOutput() VexAssessmentOutput
	ToVexAssessmentOutputWithContext(context.Context) VexAssessmentOutput
}

// VexAssessment provides all publisher provided Vex information that is related to this vulnerability.
type VexAssessmentArgs struct {
	// Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability.
	Cve pulumi.StringPtrInput `pulumi:"cve"`
	// Contains information about the impact of this vulnerability, this will change with time.
	Impacts pulumi.StringArrayInput `pulumi:"impacts"`
	// Justification provides the justification when the state of the assessment if NOT_AFFECTED.
	Justification JustificationPtrInput `pulumi:"justification"`
	// The VulnerabilityAssessment note from which this VexAssessment was generated. This will be of the form: `projects/[PROJECT_ID]/notes/[NOTE_ID]`.
	NoteName pulumi.StringPtrInput `pulumi:"noteName"`
	// Holds a list of references associated with this vulnerability item and assessment. These uris have additional information about the vulnerability and the assessment itself. E.g. Link to a document which details how this assessment concluded the state of this vulnerability.
	RelatedUris URIArrayInput `pulumi:"relatedUris"`
	// Specifies details on how to handle (and presumably, fix) a vulnerability.
	Remediations RemediationArrayInput `pulumi:"remediations"`
	// Provides the state of this Vulnerability assessment.
	State VexAssessmentStatePtrInput `pulumi:"state"`
	// The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc.
	VulnerabilityId pulumi.StringPtrInput `pulumi:"vulnerabilityId"`
}

func (VexAssessmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VexAssessment)(nil)).Elem()
}

func (i VexAssessmentArgs) ToVexAssessmentOutput() VexAssessmentOutput {
	return i.ToVexAssessmentOutputWithContext(context.Background())
}

func (i VexAssessmentArgs) ToVexAssessmentOutputWithContext(ctx context.Context) VexAssessmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VexAssessmentOutput)
}

func (i VexAssessmentArgs) ToVexAssessmentPtrOutput() VexAssessmentPtrOutput {
	return i.ToVexAssessmentPtrOutputWithContext(context.Background())
}

func (i VexAssessmentArgs) ToVexAssessmentPtrOutputWithContext(ctx context.Context) VexAssessmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VexAssessmentOutput).ToVexAssessmentPtrOutputWithContext(ctx)
}

// VexAssessmentPtrInput is an input type that accepts VexAssessmentArgs, VexAssessmentPtr and VexAssessmentPtrOutput values.
// You can construct a concrete instance of `VexAssessmentPtrInput` via:
//
//	        VexAssessmentArgs{...}
//
//	or:
//
//	        nil
type VexAssessmentPtrInput interface {
	pulumi.Input

	ToVexAssessmentPtrOutput() VexAssessmentPtrOutput
	ToVexAssessmentPtrOutputWithContext(context.Context) VexAssessmentPtrOutput
}

type vexAssessmentPtrType VexAssessmentArgs

func VexAssessmentPtr(v *VexAssessmentArgs) VexAssessmentPtrInput {
	return (*vexAssessmentPtrType)(v)
}

func (*vexAssessmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VexAssessment)(nil)).Elem()
}

func (i *vexAssessmentPtrType) ToVexAssessmentPtrOutput() VexAssessmentPtrOutput {
	return i.ToVexAssessmentPtrOutputWithContext(context.Background())
}

func (i *vexAssessmentPtrType) ToVexAssessmentPtrOutputWithContext(ctx context.Context) VexAssessmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VexAssessmentPtrOutput)
}

// VexAssessment provides all publisher provided Vex information that is related to this vulnerability.
type VexAssessmentOutput struct{ *pulumi.OutputState }

func (VexAssessmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VexAssessment)(nil)).Elem()
}

func (o VexAssessmentOutput) ToVexAssessmentOutput() VexAssessmentOutput {
	return o
}

func (o VexAssessmentOutput) ToVexAssessmentOutputWithContext(ctx context.Context) VexAssessmentOutput {
	return o
}

func (o VexAssessmentOutput) ToVexAssessmentPtrOutput() VexAssessmentPtrOutput {
	return o.ToVexAssessmentPtrOutputWithContext(context.Background())
}

func (o VexAssessmentOutput) ToVexAssessmentPtrOutputWithContext(ctx context.Context) VexAssessmentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VexAssessment) *VexAssessment {
		return &v
	}).(VexAssessmentPtrOutput)
}

// Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability.
func (o VexAssessmentOutput) Cve() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VexAssessment) *string { return v.Cve }).(pulumi.StringPtrOutput)
}

// Contains information about the impact of this vulnerability, this will change with time.
func (o VexAssessmentOutput) Impacts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VexAssessment) []string { return v.Impacts }).(pulumi.StringArrayOutput)
}

// Justification provides the justification when the state of the assessment if NOT_AFFECTED.
func (o VexAssessmentOutput) Justification() JustificationPtrOutput {
	return o.ApplyT(func(v VexAssessment) *Justification { return v.Justification }).(JustificationPtrOutput)
}

// The VulnerabilityAssessment note from which this VexAssessment was generated. This will be of the form: `projects/[PROJECT_ID]/notes/[NOTE_ID]`.
func (o VexAssessmentOutput) NoteName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VexAssessment) *string { return v.NoteName }).(pulumi.StringPtrOutput)
}

// Holds a list of references associated with this vulnerability item and assessment. These uris have additional information about the vulnerability and the assessment itself. E.g. Link to a document which details how this assessment concluded the state of this vulnerability.
func (o VexAssessmentOutput) RelatedUris() URIArrayOutput {
	return o.ApplyT(func(v VexAssessment) []URI { return v.RelatedUris }).(URIArrayOutput)
}

// Specifies details on how to handle (and presumably, fix) a vulnerability.
func (o VexAssessmentOutput) Remediations() RemediationArrayOutput {
	return o.ApplyT(func(v VexAssessment) []Remediation { return v.Remediations }).(RemediationArrayOutput)
}

// Provides the state of this Vulnerability assessment.
func (o VexAssessmentOutput) State() VexAssessmentStatePtrOutput {
	return o.ApplyT(func(v VexAssessment) *VexAssessmentState { return v.State }).(VexAssessmentStatePtrOutput)
}

// The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc.
func (o VexAssessmentOutput) VulnerabilityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VexAssessment) *string { return v.VulnerabilityId }).(pulumi.StringPtrOutput)
}

type VexAssessmentPtrOutput struct{ *pulumi.OutputState }

func (VexAssessmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VexAssessment)(nil)).Elem()
}

func (o VexAssessmentPtrOutput) ToVexAssessmentPtrOutput() VexAssessmentPtrOutput {
	return o
}

func (o VexAssessmentPtrOutput) ToVexAssessmentPtrOutputWithContext(ctx context.Context) VexAssessmentPtrOutput {
	return o
}

func (o VexAssessmentPtrOutput) Elem() VexAssessmentOutput {
	return o.ApplyT(func(v *VexAssessment) VexAssessment {
		if v != nil {
			return *v
		}
		var ret VexAssessment
		return ret
	}).(VexAssessmentOutput)
}

// Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability.
func (o VexAssessmentPtrOutput) Cve() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VexAssessment) *string {
		if v == nil {
			return nil
		}
		return v.Cve
	}).(pulumi.StringPtrOutput)
}

// Contains information about the impact of this vulnerability, this will change with time.
func (o VexAssessmentPtrOutput) Impacts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VexAssessment) []string {
		if v == nil {
			return nil
		}
		return v.Impacts
	}).(pulumi.StringArrayOutput)
}

// Justification provides the justification when the state of the assessment if NOT_AFFECTED.
func (o VexAssessmentPtrOutput) Justification() JustificationPtrOutput {
	return o.ApplyT(func(v *VexAssessment) *Justification {
		if v == nil {
			return nil
		}
		return v.Justification
	}).(JustificationPtrOutput)
}

// The VulnerabilityAssessment note from which this VexAssessment was generated. This will be of the form: `projects/[PROJECT_ID]/notes/[NOTE_ID]`.
func (o VexAssessmentPtrOutput) NoteName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VexAssessment) *string {
		if v == nil {
			return nil
		}
		return v.NoteName
	}).(pulumi.StringPtrOutput)
}

// Holds a list of references associated with this vulnerability item and assessment. These uris have additional information about the vulnerability and the assessment itself. E.g. Link to a document which details how this assessment concluded the state of this vulnerability.
func (o VexAssessmentPtrOutput) RelatedUris() URIArrayOutput {
	return o.ApplyT(func(v *VexAssessment) []URI {
		if v == nil {
			return nil
		}
		return v.RelatedUris
	}).(URIArrayOutput)
}

// Specifies details on how to handle (and presumably, fix) a vulnerability.
func (o VexAssessmentPtrOutput) Remediations() RemediationArrayOutput {
	return o.ApplyT(func(v *VexAssessment) []Remediation {
		if v == nil {
			return nil
		}
		return v.Remediations
	}).(RemediationArrayOutput)
}

// Provides the state of this Vulnerability assessment.
func (o VexAssessmentPtrOutput) State() VexAssessmentStatePtrOutput {
	return o.ApplyT(func(v *VexAssessment) *VexAssessmentState {
		if v == nil {
			return nil
		}
		return v.State
	}).(VexAssessmentStatePtrOutput)
}

// The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc.
func (o VexAssessmentPtrOutput) VulnerabilityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VexAssessment) *string {
		if v == nil {
			return nil
		}
		return v.VulnerabilityId
	}).(pulumi.StringPtrOutput)
}

// VexAssessment provides all publisher provided Vex information that is related to this vulnerability.
type VexAssessmentResponse struct {
	// Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability.
	Cve string `pulumi:"cve"`
	// Contains information about the impact of this vulnerability, this will change with time.
	Impacts []string `pulumi:"impacts"`
	// Justification provides the justification when the state of the assessment if NOT_AFFECTED.
	Justification JustificationResponse `pulumi:"justification"`
	// The VulnerabilityAssessment note from which this VexAssessment was generated. This will be of the form: `projects/[PROJECT_ID]/notes/[NOTE_ID]`.
	NoteName string `pulumi:"noteName"`
	// Holds a list of references associated with this vulnerability item and assessment. These uris have additional information about the vulnerability and the assessment itself. E.g. Link to a document which details how this assessment concluded the state of this vulnerability.
	RelatedUris []URIResponse `pulumi:"relatedUris"`
	// Specifies details on how to handle (and presumably, fix) a vulnerability.
	Remediations []RemediationResponse `pulumi:"remediations"`
	// Provides the state of this Vulnerability assessment.
	State string `pulumi:"state"`
	// The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc.
	VulnerabilityId string `pulumi:"vulnerabilityId"`
}

// VexAssessment provides all publisher provided Vex information that is related to this vulnerability.
type VexAssessmentResponseOutput struct{ *pulumi.OutputState }

func (VexAssessmentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VexAssessmentResponse)(nil)).Elem()
}

func (o VexAssessmentResponseOutput) ToVexAssessmentResponseOutput() VexAssessmentResponseOutput {
	return o
}

func (o VexAssessmentResponseOutput) ToVexAssessmentResponseOutputWithContext(ctx context.Context) VexAssessmentResponseOutput {
	return o
}

// Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability.
func (o VexAssessmentResponseOutput) Cve() pulumi.StringOutput {
	return o.ApplyT(func(v VexAssessmentResponse) string { return v.Cve }).(pulumi.StringOutput)
}

// Contains information about the impact of this vulnerability, this will change with time.
func (o VexAssessmentResponseOutput) Impacts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VexAssessmentResponse) []string { return v.Impacts }).(pulumi.StringArrayOutput)
}

// Justification provides the justification when the state of the assessment if NOT_AFFECTED.
func (o VexAssessmentResponseOutput) Justification() JustificationResponseOutput {
	return o.ApplyT(func(v VexAssessmentResponse) JustificationResponse { return v.Justification }).(JustificationResponseOutput)
}

// The VulnerabilityAssessment note from which this VexAssessment was generated. This will be of the form: `projects/[PROJECT_ID]/notes/[NOTE_ID]`.
func (o VexAssessmentResponseOutput) NoteName() pulumi.StringOutput {
	return o.ApplyT(func(v VexAssessmentResponse) string { return v.NoteName }).(pulumi.StringOutput)
}

// Holds a list of references associated with this vulnerability item and assessment. These uris have additional information about the vulnerability and the assessment itself. E.g. Link to a document which details how this assessment concluded the state of this vulnerability.
func (o VexAssessmentResponseOutput) RelatedUris() URIResponseArrayOutput {
	return o.ApplyT(func(v VexAssessmentResponse) []URIResponse { return v.RelatedUris }).(URIResponseArrayOutput)
}

// Specifies details on how to handle (and presumably, fix) a vulnerability.
func (o VexAssessmentResponseOutput) Remediations() RemediationResponseArrayOutput {
	return o.ApplyT(func(v VexAssessmentResponse) []RemediationResponse { return v.Remediations }).(RemediationResponseArrayOutput)
}

// Provides the state of this Vulnerability assessment.
func (o VexAssessmentResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v VexAssessmentResponse) string { return v.State }).(pulumi.StringOutput)
}

// The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc.
func (o VexAssessmentResponseOutput) VulnerabilityId() pulumi.StringOutput {
	return o.ApplyT(func(v VexAssessmentResponse) string { return v.VulnerabilityId }).(pulumi.StringOutput)
}

// A single VulnerabilityAssessmentNote represents one particular product's vulnerability assessment for one CVE. Multiple VulnerabilityAssessmentNotes together form a Vex statement. Please go/sds-vex-example for a sample Vex statement in the CSAF format.
type VulnerabilityAssessmentNote struct {
	// Represents a vulnerability assessment for the product.
	Assessment *Assessment `pulumi:"assessment"`
	// Identifies the language used by this document, corresponding to IETF BCP 47 / RFC 5646.
	LanguageCode *string `pulumi:"languageCode"`
	// A detailed description of this Vex.
	LongDescription *string `pulumi:"longDescription"`
	// The product affected by this vex.
	Product *Product `pulumi:"product"`
	// Publisher details of this Note.
	Publisher *Publisher `pulumi:"publisher"`
	// A one sentence description of this Vex.
	ShortDescription *string `pulumi:"shortDescription"`
	// The title of the note. E.g. `Vex-Debian-11.4`
	Title *string `pulumi:"title"`
}

// VulnerabilityAssessmentNoteInput is an input type that accepts VulnerabilityAssessmentNoteArgs and VulnerabilityAssessmentNoteOutput values.
// You can construct a concrete instance of `VulnerabilityAssessmentNoteInput` via:
//
//	VulnerabilityAssessmentNoteArgs{...}
type VulnerabilityAssessmentNoteInput interface {
	pulumi.Input

	ToVulnerabilityAssessmentNoteOutput() VulnerabilityAssessmentNoteOutput
	ToVulnerabilityAssessmentNoteOutputWithContext(context.Context) VulnerabilityAssessmentNoteOutput
}

// A single VulnerabilityAssessmentNote represents one particular product's vulnerability assessment for one CVE. Multiple VulnerabilityAssessmentNotes together form a Vex statement. Please go/sds-vex-example for a sample Vex statement in the CSAF format.
type VulnerabilityAssessmentNoteArgs struct {
	// Represents a vulnerability assessment for the product.
	Assessment AssessmentPtrInput `pulumi:"assessment"`
	// Identifies the language used by this document, corresponding to IETF BCP 47 / RFC 5646.
	LanguageCode pulumi.StringPtrInput `pulumi:"languageCode"`
	// A detailed description of this Vex.
	LongDescription pulumi.StringPtrInput `pulumi:"longDescription"`
	// The product affected by this vex.
	Product ProductPtrInput `pulumi:"product"`
	// Publisher details of this Note.
	Publisher PublisherPtrInput `pulumi:"publisher"`
	// A one sentence description of this Vex.
	ShortDescription pulumi.StringPtrInput `pulumi:"shortDescription"`
	// The title of the note. E.g. `Vex-Debian-11.4`
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (VulnerabilityAssessmentNoteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VulnerabilityAssessmentNote)(nil)).Elem()
}

func (i VulnerabilityAssessmentNoteArgs) ToVulnerabilityAssessmentNoteOutput() VulnerabilityAssessmentNoteOutput {
	return i.ToVulnerabilityAssessmentNoteOutputWithContext(context.Background())
}

func (i VulnerabilityAssessmentNoteArgs) ToVulnerabilityAssessmentNoteOutputWithContext(ctx context.Context) VulnerabilityAssessmentNoteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityAssessmentNoteOutput)
}

func (i VulnerabilityAssessmentNoteArgs) ToVulnerabilityAssessmentNotePtrOutput() VulnerabilityAssessmentNotePtrOutput {
	return i.ToVulnerabilityAssessmentNotePtrOutputWithContext(context.Background())
}

func (i VulnerabilityAssessmentNoteArgs) ToVulnerabilityAssessmentNotePtrOutputWithContext(ctx context.Context) VulnerabilityAssessmentNotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityAssessmentNoteOutput).ToVulnerabilityAssessmentNotePtrOutputWithContext(ctx)
}

// VulnerabilityAssessmentNotePtrInput is an input type that accepts VulnerabilityAssessmentNoteArgs, VulnerabilityAssessmentNotePtr and VulnerabilityAssessmentNotePtrOutput values.
// You can construct a concrete instance of `VulnerabilityAssessmentNotePtrInput` via:
//
//	        VulnerabilityAssessmentNoteArgs{...}
//
//	or:
//
//	        nil
type VulnerabilityAssessmentNotePtrInput interface {
	pulumi.Input

	ToVulnerabilityAssessmentNotePtrOutput() VulnerabilityAssessmentNotePtrOutput
	ToVulnerabilityAssessmentNotePtrOutputWithContext(context.Context) VulnerabilityAssessmentNotePtrOutput
}

type vulnerabilityAssessmentNotePtrType VulnerabilityAssessmentNoteArgs

func VulnerabilityAssessmentNotePtr(v *VulnerabilityAssessmentNoteArgs) VulnerabilityAssessmentNotePtrInput {
	return (*vulnerabilityAssessmentNotePtrType)(v)
}

func (*vulnerabilityAssessmentNotePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VulnerabilityAssessmentNote)(nil)).Elem()
}

func (i *vulnerabilityAssessmentNotePtrType) ToVulnerabilityAssessmentNotePtrOutput() VulnerabilityAssessmentNotePtrOutput {
	return i.ToVulnerabilityAssessmentNotePtrOutputWithContext(context.Background())
}

func (i *vulnerabilityAssessmentNotePtrType) ToVulnerabilityAssessmentNotePtrOutputWithContext(ctx context.Context) VulnerabilityAssessmentNotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityAssessmentNotePtrOutput)
}

// A single VulnerabilityAssessmentNote represents one particular product's vulnerability assessment for one CVE. Multiple VulnerabilityAssessmentNotes together form a Vex statement. Please go/sds-vex-example for a sample Vex statement in the CSAF format.
type VulnerabilityAssessmentNoteOutput struct{ *pulumi.OutputState }

func (VulnerabilityAssessmentNoteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VulnerabilityAssessmentNote)(nil)).Elem()
}

func (o VulnerabilityAssessmentNoteOutput) ToVulnerabilityAssessmentNoteOutput() VulnerabilityAssessmentNoteOutput {
	return o
}

func (o VulnerabilityAssessmentNoteOutput) ToVulnerabilityAssessmentNoteOutputWithContext(ctx context.Context) VulnerabilityAssessmentNoteOutput {
	return o
}

func (o VulnerabilityAssessmentNoteOutput) ToVulnerabilityAssessmentNotePtrOutput() VulnerabilityAssessmentNotePtrOutput {
	return o.ToVulnerabilityAssessmentNotePtrOutputWithContext(context.Background())
}

func (o VulnerabilityAssessmentNoteOutput) ToVulnerabilityAssessmentNotePtrOutputWithContext(ctx context.Context) VulnerabilityAssessmentNotePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VulnerabilityAssessmentNote) *VulnerabilityAssessmentNote {
		return &v
	}).(VulnerabilityAssessmentNotePtrOutput)
}

// Represents a vulnerability assessment for the product.
func (o VulnerabilityAssessmentNoteOutput) Assessment() AssessmentPtrOutput {
	return o.ApplyT(func(v VulnerabilityAssessmentNote) *Assessment { return v.Assessment }).(AssessmentPtrOutput)
}

// Identifies the language used by this document, corresponding to IETF BCP 47 / RFC 5646.
func (o VulnerabilityAssessmentNoteOutput) LanguageCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VulnerabilityAssessmentNote) *string { return v.LanguageCode }).(pulumi.StringPtrOutput)
}

// A detailed description of this Vex.
func (o VulnerabilityAssessmentNoteOutput) LongDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VulnerabilityAssessmentNote) *string { return v.LongDescription }).(pulumi.StringPtrOutput)
}

// The product affected by this vex.
func (o VulnerabilityAssessmentNoteOutput) Product() ProductPtrOutput {
	return o.ApplyT(func(v VulnerabilityAssessmentNote) *Product { return v.Product }).(ProductPtrOutput)
}

// Publisher details of this Note.
func (o VulnerabilityAssessmentNoteOutput) Publisher() PublisherPtrOutput {
	return o.ApplyT(func(v VulnerabilityAssessmentNote) *Publisher { return v.Publisher }).(PublisherPtrOutput)
}

// A one sentence description of this Vex.
func (o VulnerabilityAssessmentNoteOutput) ShortDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VulnerabilityAssessmentNote) *string { return v.ShortDescription }).(pulumi.StringPtrOutput)
}

// The title of the note. E.g. `Vex-Debian-11.4`
func (o VulnerabilityAssessmentNoteOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VulnerabilityAssessmentNote) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type VulnerabilityAssessmentNotePtrOutput struct{ *pulumi.OutputState }

func (VulnerabilityAssessmentNotePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VulnerabilityAssessmentNote)(nil)).Elem()
}

func (o VulnerabilityAssessmentNotePtrOutput) ToVulnerabilityAssessmentNotePtrOutput() VulnerabilityAssessmentNotePtrOutput {
	return o
}

func (o VulnerabilityAssessmentNotePtrOutput) ToVulnerabilityAssessmentNotePtrOutputWithContext(ctx context.Context) VulnerabilityAssessmentNotePtrOutput {
	return o
}

func (o VulnerabilityAssessmentNotePtrOutput) Elem() VulnerabilityAssessmentNoteOutput {
	return o.ApplyT(func(v *VulnerabilityAssessmentNote) VulnerabilityAssessmentNote {
		if v != nil {
			return *v
		}
		var ret VulnerabilityAssessmentNote
		return ret
	}).(VulnerabilityAssessmentNoteOutput)
}

// Represents a vulnerability assessment for the product.
func (o VulnerabilityAssessmentNotePtrOutput) Assessment() AssessmentPtrOutput {
	return o.ApplyT(func(v *VulnerabilityAssessmentNote) *Assessment {
		if v == nil {
			return nil
		}
		return v.Assessment
	}).(AssessmentPtrOutput)
}

// Identifies the language used by this document, corresponding to IETF BCP 47 / RFC 5646.
func (o VulnerabilityAssessmentNotePtrOutput) LanguageCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VulnerabilityAssessmentNote) *string {
		if v == nil {
			return nil
		}
		return v.LanguageCode
	}).(pulumi.StringPtrOutput)
}

// A detailed description of this Vex.
func (o VulnerabilityAssessmentNotePtrOutput) LongDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VulnerabilityAssessmentNote) *string {
		if v == nil {
			return nil
		}
		return v.LongDescription
	}).(pulumi.StringPtrOutput)
}

// The product affected by this vex.
func (o VulnerabilityAssessmentNotePtrOutput) Product() ProductPtrOutput {
	return o.ApplyT(func(v *VulnerabilityAssessmentNote) *Product {
		if v == nil {
			return nil
		}
		return v.Product
	}).(ProductPtrOutput)
}

// Publisher details of this Note.
func (o VulnerabilityAssessmentNotePtrOutput) Publisher() PublisherPtrOutput {
	return o.ApplyT(func(v *VulnerabilityAssessmentNote) *Publisher {
		if v == nil {
			return nil
		}
		return v.Publisher
	}).(PublisherPtrOutput)
}

// A one sentence description of this Vex.
func (o VulnerabilityAssessmentNotePtrOutput) ShortDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VulnerabilityAssessmentNote) *string {
		if v == nil {
			return nil
		}
		return v.ShortDescription
	}).(pulumi.StringPtrOutput)
}

// The title of the note. E.g. `Vex-Debian-11.4`
func (o VulnerabilityAssessmentNotePtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VulnerabilityAssessmentNote) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// A single VulnerabilityAssessmentNote represents one particular product's vulnerability assessment for one CVE. Multiple VulnerabilityAssessmentNotes together form a Vex statement. Please go/sds-vex-example for a sample Vex statement in the CSAF format.
type VulnerabilityAssessmentNoteResponse struct {
	// Represents a vulnerability assessment for the product.
	Assessment AssessmentResponse `pulumi:"assessment"`
	// Identifies the language used by this document, corresponding to IETF BCP 47 / RFC 5646.
	LanguageCode string `pulumi:"languageCode"`
	// A detailed description of this Vex.
	LongDescription string `pulumi:"longDescription"`
	// The product affected by this vex.
	Product ProductResponse `pulumi:"product"`
	// Publisher details of this Note.
	Publisher PublisherResponse `pulumi:"publisher"`
	// A one sentence description of this Vex.
	ShortDescription string `pulumi:"shortDescription"`
	// The title of the note. E.g. `Vex-Debian-11.4`
	Title string `pulumi:"title"`
}

// A single VulnerabilityAssessmentNote represents one particular product's vulnerability assessment for one CVE. Multiple VulnerabilityAssessmentNotes together form a Vex statement. Please go/sds-vex-example for a sample Vex statement in the CSAF format.
type VulnerabilityAssessmentNoteResponseOutput struct{ *pulumi.OutputState }

func (VulnerabilityAssessmentNoteResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VulnerabilityAssessmentNoteResponse)(nil)).Elem()
}

func (o VulnerabilityAssessmentNoteResponseOutput) ToVulnerabilityAssessmentNoteResponseOutput() VulnerabilityAssessmentNoteResponseOutput {
	return o
}

func (o VulnerabilityAssessmentNoteResponseOutput) ToVulnerabilityAssessmentNoteResponseOutputWithContext(ctx context.Context) VulnerabilityAssessmentNoteResponseOutput {
	return o
}

// Represents a vulnerability assessment for the product.
func (o VulnerabilityAssessmentNoteResponseOutput) Assessment() AssessmentResponseOutput {
	return o.ApplyT(func(v VulnerabilityAssessmentNoteResponse) AssessmentResponse { return v.Assessment }).(AssessmentResponseOutput)
}

// Identifies the language used by this document, corresponding to IETF BCP 47 / RFC 5646.
func (o VulnerabilityAssessmentNoteResponseOutput) LanguageCode() pulumi.StringOutput {
	return o.ApplyT(func(v VulnerabilityAssessmentNoteResponse) string { return v.LanguageCode }).(pulumi.StringOutput)
}

// A detailed description of this Vex.
func (o VulnerabilityAssessmentNoteResponseOutput) LongDescription() pulumi.StringOutput {
	return o.ApplyT(func(v VulnerabilityAssessmentNoteResponse) string { return v.LongDescription }).(pulumi.StringOutput)
}

// The product affected by this vex.
func (o VulnerabilityAssessmentNoteResponseOutput) Product() ProductResponseOutput {
	return o.ApplyT(func(v VulnerabilityAssessmentNoteResponse) ProductResponse { return v.Product }).(ProductResponseOutput)
}

// Publisher details of this Note.
func (o VulnerabilityAssessmentNoteResponseOutput) Publisher() PublisherResponseOutput {
	return o.ApplyT(func(v VulnerabilityAssessmentNoteResponse) PublisherResponse { return v.Publisher }).(PublisherResponseOutput)
}

// A one sentence description of this Vex.
func (o VulnerabilityAssessmentNoteResponseOutput) ShortDescription() pulumi.StringOutput {
	return o.ApplyT(func(v VulnerabilityAssessmentNoteResponse) string { return v.ShortDescription }).(pulumi.StringOutput)
}

// The title of the note. E.g. `Vex-Debian-11.4`
func (o VulnerabilityAssessmentNoteResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v VulnerabilityAssessmentNoteResponse) string { return v.Title }).(pulumi.StringOutput)
}

// Used by Occurrence to point to where the vulnerability exists and how to fix it.
type VulnerabilityDetails struct {
	// The CVSS v2 score of this vulnerability.
	CvssV2 *CVSS `pulumi:"cvssV2"`
	// The CVSS v3 score of this vulnerability.
	CvssV3 *CVSS `pulumi:"cvssV3"`
	// The distro assigned severity for this vulnerability when that is available and note provider assigned severity when distro has not yet assigned a severity for this vulnerability. When there are multiple package issues for this vulnerability, they can have different effective severities because some might come from the distro and some might come from installed language packs (e.g. Maven JARs or Go binaries). For this reason, it is advised to use the effective severity on the PackageIssue level, as this field may eventually be deprecated. In the case where multiple PackageIssues have different effective severities, the one set here will be the highest severity of any of the PackageIssues.
	EffectiveSeverity *VulnerabilityDetailsEffectiveSeverity `pulumi:"effectiveSeverity"`
	// Occurrence-specific extra details about the vulnerability.
	ExtraDetails *string `pulumi:"extraDetails"`
	// The set of affected locations and their fixes (if available) within the associated resource.
	PackageIssue []PackageIssue `pulumi:"packageIssue"`
	// The type of package; whether native or non native(ruby gems, node.js packages etc). This may be deprecated in the future because we can have multiple PackageIssues with different package types.
	Type *string `pulumi:"type"`
	// VexAssessment provides all publisher provided Vex information that is related to this vulnerability for this resource.
	VexAssessment *VexAssessment `pulumi:"vexAssessment"`
}

// VulnerabilityDetailsInput is an input type that accepts VulnerabilityDetailsArgs and VulnerabilityDetailsOutput values.
// You can construct a concrete instance of `VulnerabilityDetailsInput` via:
//
//	VulnerabilityDetailsArgs{...}
type VulnerabilityDetailsInput interface {
	pulumi.Input

	ToVulnerabilityDetailsOutput() VulnerabilityDetailsOutput
	ToVulnerabilityDetailsOutputWithContext(context.Context) VulnerabilityDetailsOutput
}

// Used by Occurrence to point to where the vulnerability exists and how to fix it.
type VulnerabilityDetailsArgs struct {
	// The CVSS v2 score of this vulnerability.
	CvssV2 CVSSPtrInput `pulumi:"cvssV2"`
	// The CVSS v3 score of this vulnerability.
	CvssV3 CVSSPtrInput `pulumi:"cvssV3"`
	// The distro assigned severity for this vulnerability when that is available and note provider assigned severity when distro has not yet assigned a severity for this vulnerability. When there are multiple package issues for this vulnerability, they can have different effective severities because some might come from the distro and some might come from installed language packs (e.g. Maven JARs or Go binaries). For this reason, it is advised to use the effective severity on the PackageIssue level, as this field may eventually be deprecated. In the case where multiple PackageIssues have different effective severities, the one set here will be the highest severity of any of the PackageIssues.
	EffectiveSeverity VulnerabilityDetailsEffectiveSeverityPtrInput `pulumi:"effectiveSeverity"`
	// Occurrence-specific extra details about the vulnerability.
	ExtraDetails pulumi.StringPtrInput `pulumi:"extraDetails"`
	// The set of affected locations and their fixes (if available) within the associated resource.
	PackageIssue PackageIssueArrayInput `pulumi:"packageIssue"`
	// The type of package; whether native or non native(ruby gems, node.js packages etc). This may be deprecated in the future because we can have multiple PackageIssues with different package types.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// VexAssessment provides all publisher provided Vex information that is related to this vulnerability for this resource.
	VexAssessment VexAssessmentPtrInput `pulumi:"vexAssessment"`
}

func (VulnerabilityDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VulnerabilityDetails)(nil)).Elem()
}

func (i VulnerabilityDetailsArgs) ToVulnerabilityDetailsOutput() VulnerabilityDetailsOutput {
	return i.ToVulnerabilityDetailsOutputWithContext(context.Background())
}

func (i VulnerabilityDetailsArgs) ToVulnerabilityDetailsOutputWithContext(ctx context.Context) VulnerabilityDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityDetailsOutput)
}

func (i VulnerabilityDetailsArgs) ToVulnerabilityDetailsPtrOutput() VulnerabilityDetailsPtrOutput {
	return i.ToVulnerabilityDetailsPtrOutputWithContext(context.Background())
}

func (i VulnerabilityDetailsArgs) ToVulnerabilityDetailsPtrOutputWithContext(ctx context.Context) VulnerabilityDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityDetailsOutput).ToVulnerabilityDetailsPtrOutputWithContext(ctx)
}

// VulnerabilityDetailsPtrInput is an input type that accepts VulnerabilityDetailsArgs, VulnerabilityDetailsPtr and VulnerabilityDetailsPtrOutput values.
// You can construct a concrete instance of `VulnerabilityDetailsPtrInput` via:
//
//	        VulnerabilityDetailsArgs{...}
//
//	or:
//
//	        nil
type VulnerabilityDetailsPtrInput interface {
	pulumi.Input

	ToVulnerabilityDetailsPtrOutput() VulnerabilityDetailsPtrOutput
	ToVulnerabilityDetailsPtrOutputWithContext(context.Context) VulnerabilityDetailsPtrOutput
}

type vulnerabilityDetailsPtrType VulnerabilityDetailsArgs

func VulnerabilityDetailsPtr(v *VulnerabilityDetailsArgs) VulnerabilityDetailsPtrInput {
	return (*vulnerabilityDetailsPtrType)(v)
}

func (*vulnerabilityDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VulnerabilityDetails)(nil)).Elem()
}

func (i *vulnerabilityDetailsPtrType) ToVulnerabilityDetailsPtrOutput() VulnerabilityDetailsPtrOutput {
	return i.ToVulnerabilityDetailsPtrOutputWithContext(context.Background())
}

func (i *vulnerabilityDetailsPtrType) ToVulnerabilityDetailsPtrOutputWithContext(ctx context.Context) VulnerabilityDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityDetailsPtrOutput)
}

// Used by Occurrence to point to where the vulnerability exists and how to fix it.
type VulnerabilityDetailsOutput struct{ *pulumi.OutputState }

func (VulnerabilityDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VulnerabilityDetails)(nil)).Elem()
}

func (o VulnerabilityDetailsOutput) ToVulnerabilityDetailsOutput() VulnerabilityDetailsOutput {
	return o
}

func (o VulnerabilityDetailsOutput) ToVulnerabilityDetailsOutputWithContext(ctx context.Context) VulnerabilityDetailsOutput {
	return o
}

func (o VulnerabilityDetailsOutput) ToVulnerabilityDetailsPtrOutput() VulnerabilityDetailsPtrOutput {
	return o.ToVulnerabilityDetailsPtrOutputWithContext(context.Background())
}

func (o VulnerabilityDetailsOutput) ToVulnerabilityDetailsPtrOutputWithContext(ctx context.Context) VulnerabilityDetailsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VulnerabilityDetails) *VulnerabilityDetails {
		return &v
	}).(VulnerabilityDetailsPtrOutput)
}

// The CVSS v2 score of this vulnerability.
func (o VulnerabilityDetailsOutput) CvssV2() CVSSPtrOutput {
	return o.ApplyT(func(v VulnerabilityDetails) *CVSS { return v.CvssV2 }).(CVSSPtrOutput)
}

// The CVSS v3 score of this vulnerability.
func (o VulnerabilityDetailsOutput) CvssV3() CVSSPtrOutput {
	return o.ApplyT(func(v VulnerabilityDetails) *CVSS { return v.CvssV3 }).(CVSSPtrOutput)
}

// The distro assigned severity for this vulnerability when that is available and note provider assigned severity when distro has not yet assigned a severity for this vulnerability. When there are multiple package issues for this vulnerability, they can have different effective severities because some might come from the distro and some might come from installed language packs (e.g. Maven JARs or Go binaries). For this reason, it is advised to use the effective severity on the PackageIssue level, as this field may eventually be deprecated. In the case where multiple PackageIssues have different effective severities, the one set here will be the highest severity of any of the PackageIssues.
func (o VulnerabilityDetailsOutput) EffectiveSeverity() VulnerabilityDetailsEffectiveSeverityPtrOutput {
	return o.ApplyT(func(v VulnerabilityDetails) *VulnerabilityDetailsEffectiveSeverity { return v.EffectiveSeverity }).(VulnerabilityDetailsEffectiveSeverityPtrOutput)
}

// Occurrence-specific extra details about the vulnerability.
func (o VulnerabilityDetailsOutput) ExtraDetails() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VulnerabilityDetails) *string { return v.ExtraDetails }).(pulumi.StringPtrOutput)
}

// The set of affected locations and their fixes (if available) within the associated resource.
func (o VulnerabilityDetailsOutput) PackageIssue() PackageIssueArrayOutput {
	return o.ApplyT(func(v VulnerabilityDetails) []PackageIssue { return v.PackageIssue }).(PackageIssueArrayOutput)
}

// The type of package; whether native or non native(ruby gems, node.js packages etc). This may be deprecated in the future because we can have multiple PackageIssues with different package types.
func (o VulnerabilityDetailsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VulnerabilityDetails) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// VexAssessment provides all publisher provided Vex information that is related to this vulnerability for this resource.
func (o VulnerabilityDetailsOutput) VexAssessment() VexAssessmentPtrOutput {
	return o.ApplyT(func(v VulnerabilityDetails) *VexAssessment { return v.VexAssessment }).(VexAssessmentPtrOutput)
}

type VulnerabilityDetailsPtrOutput struct{ *pulumi.OutputState }

func (VulnerabilityDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VulnerabilityDetails)(nil)).Elem()
}

func (o VulnerabilityDetailsPtrOutput) ToVulnerabilityDetailsPtrOutput() VulnerabilityDetailsPtrOutput {
	return o
}

func (o VulnerabilityDetailsPtrOutput) ToVulnerabilityDetailsPtrOutputWithContext(ctx context.Context) VulnerabilityDetailsPtrOutput {
	return o
}

func (o VulnerabilityDetailsPtrOutput) Elem() VulnerabilityDetailsOutput {
	return o.ApplyT(func(v *VulnerabilityDetails) VulnerabilityDetails {
		if v != nil {
			return *v
		}
		var ret VulnerabilityDetails
		return ret
	}).(VulnerabilityDetailsOutput)
}

// The CVSS v2 score of this vulnerability.
func (o VulnerabilityDetailsPtrOutput) CvssV2() CVSSPtrOutput {
	return o.ApplyT(func(v *VulnerabilityDetails) *CVSS {
		if v == nil {
			return nil
		}
		return v.CvssV2
	}).(CVSSPtrOutput)
}

// The CVSS v3 score of this vulnerability.
func (o VulnerabilityDetailsPtrOutput) CvssV3() CVSSPtrOutput {
	return o.ApplyT(func(v *VulnerabilityDetails) *CVSS {
		if v == nil {
			return nil
		}
		return v.CvssV3
	}).(CVSSPtrOutput)
}

// The distro assigned severity for this vulnerability when that is available and note provider assigned severity when distro has not yet assigned a severity for this vulnerability. When there are multiple package issues for this vulnerability, they can have different effective severities because some might come from the distro and some might come from installed language packs (e.g. Maven JARs or Go binaries). For this reason, it is advised to use the effective severity on the PackageIssue level, as this field may eventually be deprecated. In the case where multiple PackageIssues have different effective severities, the one set here will be the highest severity of any of the PackageIssues.
func (o VulnerabilityDetailsPtrOutput) EffectiveSeverity() VulnerabilityDetailsEffectiveSeverityPtrOutput {
	return o.ApplyT(func(v *VulnerabilityDetails) *VulnerabilityDetailsEffectiveSeverity {
		if v == nil {
			return nil
		}
		return v.EffectiveSeverity
	}).(VulnerabilityDetailsEffectiveSeverityPtrOutput)
}

// Occurrence-specific extra details about the vulnerability.
func (o VulnerabilityDetailsPtrOutput) ExtraDetails() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VulnerabilityDetails) *string {
		if v == nil {
			return nil
		}
		return v.ExtraDetails
	}).(pulumi.StringPtrOutput)
}

// The set of affected locations and their fixes (if available) within the associated resource.
func (o VulnerabilityDetailsPtrOutput) PackageIssue() PackageIssueArrayOutput {
	return o.ApplyT(func(v *VulnerabilityDetails) []PackageIssue {
		if v == nil {
			return nil
		}
		return v.PackageIssue
	}).(PackageIssueArrayOutput)
}

// The type of package; whether native or non native(ruby gems, node.js packages etc). This may be deprecated in the future because we can have multiple PackageIssues with different package types.
func (o VulnerabilityDetailsPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VulnerabilityDetails) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// VexAssessment provides all publisher provided Vex information that is related to this vulnerability for this resource.
func (o VulnerabilityDetailsPtrOutput) VexAssessment() VexAssessmentPtrOutput {
	return o.ApplyT(func(v *VulnerabilityDetails) *VexAssessment {
		if v == nil {
			return nil
		}
		return v.VexAssessment
	}).(VexAssessmentPtrOutput)
}

// Used by Occurrence to point to where the vulnerability exists and how to fix it.
type VulnerabilityDetailsResponse struct {
	// The CVSS score of this vulnerability. CVSS score is on a scale of 0-10 where 0 indicates low severity and 10 indicates high severity.
	CvssScore float64 `pulumi:"cvssScore"`
	// The CVSS v2 score of this vulnerability.
	CvssV2 CVSSResponse `pulumi:"cvssV2"`
	// The CVSS v3 score of this vulnerability.
	CvssV3 CVSSResponse `pulumi:"cvssV3"`
	// CVSS version used to populate cvss_score and severity.
	CvssVersion string `pulumi:"cvssVersion"`
	// The distro assigned severity for this vulnerability when that is available and note provider assigned severity when distro has not yet assigned a severity for this vulnerability. When there are multiple package issues for this vulnerability, they can have different effective severities because some might come from the distro and some might come from installed language packs (e.g. Maven JARs or Go binaries). For this reason, it is advised to use the effective severity on the PackageIssue level, as this field may eventually be deprecated. In the case where multiple PackageIssues have different effective severities, the one set here will be the highest severity of any of the PackageIssues.
	EffectiveSeverity string `pulumi:"effectiveSeverity"`
	// Occurrence-specific extra details about the vulnerability.
	ExtraDetails string `pulumi:"extraDetails"`
	// The set of affected locations and their fixes (if available) within the associated resource.
	PackageIssue []PackageIssueResponse `pulumi:"packageIssue"`
	// The note provider assigned Severity of the vulnerability.
	Severity string `pulumi:"severity"`
	// The type of package; whether native or non native(ruby gems, node.js packages etc). This may be deprecated in the future because we can have multiple PackageIssues with different package types.
	Type string `pulumi:"type"`
	// VexAssessment provides all publisher provided Vex information that is related to this vulnerability for this resource.
	VexAssessment VexAssessmentResponse `pulumi:"vexAssessment"`
}

// Used by Occurrence to point to where the vulnerability exists and how to fix it.
type VulnerabilityDetailsResponseOutput struct{ *pulumi.OutputState }

func (VulnerabilityDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VulnerabilityDetailsResponse)(nil)).Elem()
}

func (o VulnerabilityDetailsResponseOutput) ToVulnerabilityDetailsResponseOutput() VulnerabilityDetailsResponseOutput {
	return o
}

func (o VulnerabilityDetailsResponseOutput) ToVulnerabilityDetailsResponseOutputWithContext(ctx context.Context) VulnerabilityDetailsResponseOutput {
	return o
}

// The CVSS score of this vulnerability. CVSS score is on a scale of 0-10 where 0 indicates low severity and 10 indicates high severity.
func (o VulnerabilityDetailsResponseOutput) CvssScore() pulumi.Float64Output {
	return o.ApplyT(func(v VulnerabilityDetailsResponse) float64 { return v.CvssScore }).(pulumi.Float64Output)
}

// The CVSS v2 score of this vulnerability.
func (o VulnerabilityDetailsResponseOutput) CvssV2() CVSSResponseOutput {
	return o.ApplyT(func(v VulnerabilityDetailsResponse) CVSSResponse { return v.CvssV2 }).(CVSSResponseOutput)
}

// The CVSS v3 score of this vulnerability.
func (o VulnerabilityDetailsResponseOutput) CvssV3() CVSSResponseOutput {
	return o.ApplyT(func(v VulnerabilityDetailsResponse) CVSSResponse { return v.CvssV3 }).(CVSSResponseOutput)
}

// CVSS version used to populate cvss_score and severity.
func (o VulnerabilityDetailsResponseOutput) CvssVersion() pulumi.StringOutput {
	return o.ApplyT(func(v VulnerabilityDetailsResponse) string { return v.CvssVersion }).(pulumi.StringOutput)
}

// The distro assigned severity for this vulnerability when that is available and note provider assigned severity when distro has not yet assigned a severity for this vulnerability. When there are multiple package issues for this vulnerability, they can have different effective severities because some might come from the distro and some might come from installed language packs (e.g. Maven JARs or Go binaries). For this reason, it is advised to use the effective severity on the PackageIssue level, as this field may eventually be deprecated. In the case where multiple PackageIssues have different effective severities, the one set here will be the highest severity of any of the PackageIssues.
func (o VulnerabilityDetailsResponseOutput) EffectiveSeverity() pulumi.StringOutput {
	return o.ApplyT(func(v VulnerabilityDetailsResponse) string { return v.EffectiveSeverity }).(pulumi.StringOutput)
}

// Occurrence-specific extra details about the vulnerability.
func (o VulnerabilityDetailsResponseOutput) ExtraDetails() pulumi.StringOutput {
	return o.ApplyT(func(v VulnerabilityDetailsResponse) string { return v.ExtraDetails }).(pulumi.StringOutput)
}

// The set of affected locations and their fixes (if available) within the associated resource.
func (o VulnerabilityDetailsResponseOutput) PackageIssue() PackageIssueResponseArrayOutput {
	return o.ApplyT(func(v VulnerabilityDetailsResponse) []PackageIssueResponse { return v.PackageIssue }).(PackageIssueResponseArrayOutput)
}

// The note provider assigned Severity of the vulnerability.
func (o VulnerabilityDetailsResponseOutput) Severity() pulumi.StringOutput {
	return o.ApplyT(func(v VulnerabilityDetailsResponse) string { return v.Severity }).(pulumi.StringOutput)
}

// The type of package; whether native or non native(ruby gems, node.js packages etc). This may be deprecated in the future because we can have multiple PackageIssues with different package types.
func (o VulnerabilityDetailsResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v VulnerabilityDetailsResponse) string { return v.Type }).(pulumi.StringOutput)
}

// VexAssessment provides all publisher provided Vex information that is related to this vulnerability for this resource.
func (o VulnerabilityDetailsResponseOutput) VexAssessment() VexAssessmentResponseOutput {
	return o.ApplyT(func(v VulnerabilityDetailsResponse) VexAssessmentResponse { return v.VexAssessment }).(VexAssessmentResponseOutput)
}

// The location of the vulnerability
type VulnerabilityLocation struct {
	// The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/) format. Examples include distro or storage location for vulnerable jar. This field can be used as a filter in list requests.
	CpeUri *string `pulumi:"cpeUri"`
	// The file location at which this package was found.
	FileLocation []FileLocation `pulumi:"fileLocation"`
	// The package being described.
	Package *string `pulumi:"package"`
	// The version of the package being described. This field can be used as a filter in list requests.
	Version *Version `pulumi:"version"`
}

// VulnerabilityLocationInput is an input type that accepts VulnerabilityLocationArgs and VulnerabilityLocationOutput values.
// You can construct a concrete instance of `VulnerabilityLocationInput` via:
//
//	VulnerabilityLocationArgs{...}
type VulnerabilityLocationInput interface {
	pulumi.Input

	ToVulnerabilityLocationOutput() VulnerabilityLocationOutput
	ToVulnerabilityLocationOutputWithContext(context.Context) VulnerabilityLocationOutput
}

// The location of the vulnerability
type VulnerabilityLocationArgs struct {
	// The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/) format. Examples include distro or storage location for vulnerable jar. This field can be used as a filter in list requests.
	CpeUri pulumi.StringPtrInput `pulumi:"cpeUri"`
	// The file location at which this package was found.
	FileLocation FileLocationArrayInput `pulumi:"fileLocation"`
	// The package being described.
	Package pulumi.StringPtrInput `pulumi:"package"`
	// The version of the package being described. This field can be used as a filter in list requests.
	Version VersionPtrInput `pulumi:"version"`
}

func (VulnerabilityLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VulnerabilityLocation)(nil)).Elem()
}

func (i VulnerabilityLocationArgs) ToVulnerabilityLocationOutput() VulnerabilityLocationOutput {
	return i.ToVulnerabilityLocationOutputWithContext(context.Background())
}

func (i VulnerabilityLocationArgs) ToVulnerabilityLocationOutputWithContext(ctx context.Context) VulnerabilityLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityLocationOutput)
}

func (i VulnerabilityLocationArgs) ToVulnerabilityLocationPtrOutput() VulnerabilityLocationPtrOutput {
	return i.ToVulnerabilityLocationPtrOutputWithContext(context.Background())
}

func (i VulnerabilityLocationArgs) ToVulnerabilityLocationPtrOutputWithContext(ctx context.Context) VulnerabilityLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityLocationOutput).ToVulnerabilityLocationPtrOutputWithContext(ctx)
}

// VulnerabilityLocationPtrInput is an input type that accepts VulnerabilityLocationArgs, VulnerabilityLocationPtr and VulnerabilityLocationPtrOutput values.
// You can construct a concrete instance of `VulnerabilityLocationPtrInput` via:
//
//	        VulnerabilityLocationArgs{...}
//
//	or:
//
//	        nil
type VulnerabilityLocationPtrInput interface {
	pulumi.Input

	ToVulnerabilityLocationPtrOutput() VulnerabilityLocationPtrOutput
	ToVulnerabilityLocationPtrOutputWithContext(context.Context) VulnerabilityLocationPtrOutput
}

type vulnerabilityLocationPtrType VulnerabilityLocationArgs

func VulnerabilityLocationPtr(v *VulnerabilityLocationArgs) VulnerabilityLocationPtrInput {
	return (*vulnerabilityLocationPtrType)(v)
}

func (*vulnerabilityLocationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VulnerabilityLocation)(nil)).Elem()
}

func (i *vulnerabilityLocationPtrType) ToVulnerabilityLocationPtrOutput() VulnerabilityLocationPtrOutput {
	return i.ToVulnerabilityLocationPtrOutputWithContext(context.Background())
}

func (i *vulnerabilityLocationPtrType) ToVulnerabilityLocationPtrOutputWithContext(ctx context.Context) VulnerabilityLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityLocationPtrOutput)
}

// The location of the vulnerability
type VulnerabilityLocationOutput struct{ *pulumi.OutputState }

func (VulnerabilityLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VulnerabilityLocation)(nil)).Elem()
}

func (o VulnerabilityLocationOutput) ToVulnerabilityLocationOutput() VulnerabilityLocationOutput {
	return o
}

func (o VulnerabilityLocationOutput) ToVulnerabilityLocationOutputWithContext(ctx context.Context) VulnerabilityLocationOutput {
	return o
}

func (o VulnerabilityLocationOutput) ToVulnerabilityLocationPtrOutput() VulnerabilityLocationPtrOutput {
	return o.ToVulnerabilityLocationPtrOutputWithContext(context.Background())
}

func (o VulnerabilityLocationOutput) ToVulnerabilityLocationPtrOutputWithContext(ctx context.Context) VulnerabilityLocationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VulnerabilityLocation) *VulnerabilityLocation {
		return &v
	}).(VulnerabilityLocationPtrOutput)
}

// The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/) format. Examples include distro or storage location for vulnerable jar. This field can be used as a filter in list requests.
func (o VulnerabilityLocationOutput) CpeUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VulnerabilityLocation) *string { return v.CpeUri }).(pulumi.StringPtrOutput)
}

// The file location at which this package was found.
func (o VulnerabilityLocationOutput) FileLocation() FileLocationArrayOutput {
	return o.ApplyT(func(v VulnerabilityLocation) []FileLocation { return v.FileLocation }).(FileLocationArrayOutput)
}

// The package being described.
func (o VulnerabilityLocationOutput) Package() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VulnerabilityLocation) *string { return v.Package }).(pulumi.StringPtrOutput)
}

// The version of the package being described. This field can be used as a filter in list requests.
func (o VulnerabilityLocationOutput) Version() VersionPtrOutput {
	return o.ApplyT(func(v VulnerabilityLocation) *Version { return v.Version }).(VersionPtrOutput)
}

type VulnerabilityLocationPtrOutput struct{ *pulumi.OutputState }

func (VulnerabilityLocationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VulnerabilityLocation)(nil)).Elem()
}

func (o VulnerabilityLocationPtrOutput) ToVulnerabilityLocationPtrOutput() VulnerabilityLocationPtrOutput {
	return o
}

func (o VulnerabilityLocationPtrOutput) ToVulnerabilityLocationPtrOutputWithContext(ctx context.Context) VulnerabilityLocationPtrOutput {
	return o
}

func (o VulnerabilityLocationPtrOutput) Elem() VulnerabilityLocationOutput {
	return o.ApplyT(func(v *VulnerabilityLocation) VulnerabilityLocation {
		if v != nil {
			return *v
		}
		var ret VulnerabilityLocation
		return ret
	}).(VulnerabilityLocationOutput)
}

// The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/) format. Examples include distro or storage location for vulnerable jar. This field can be used as a filter in list requests.
func (o VulnerabilityLocationPtrOutput) CpeUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VulnerabilityLocation) *string {
		if v == nil {
			return nil
		}
		return v.CpeUri
	}).(pulumi.StringPtrOutput)
}

// The file location at which this package was found.
func (o VulnerabilityLocationPtrOutput) FileLocation() FileLocationArrayOutput {
	return o.ApplyT(func(v *VulnerabilityLocation) []FileLocation {
		if v == nil {
			return nil
		}
		return v.FileLocation
	}).(FileLocationArrayOutput)
}

// The package being described.
func (o VulnerabilityLocationPtrOutput) Package() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VulnerabilityLocation) *string {
		if v == nil {
			return nil
		}
		return v.Package
	}).(pulumi.StringPtrOutput)
}

// The version of the package being described. This field can be used as a filter in list requests.
func (o VulnerabilityLocationPtrOutput) Version() VersionPtrOutput {
	return o.ApplyT(func(v *VulnerabilityLocation) *Version {
		if v == nil {
			return nil
		}
		return v.Version
	}).(VersionPtrOutput)
}

// The location of the vulnerability
type VulnerabilityLocationResponse struct {
	// The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/) format. Examples include distro or storage location for vulnerable jar. This field can be used as a filter in list requests.
	CpeUri string `pulumi:"cpeUri"`
	// The file location at which this package was found.
	FileLocation []FileLocationResponse `pulumi:"fileLocation"`
	// The package being described.
	Package string `pulumi:"package"`
	// The version of the package being described. This field can be used as a filter in list requests.
	Version VersionResponse `pulumi:"version"`
}

// The location of the vulnerability
type VulnerabilityLocationResponseOutput struct{ *pulumi.OutputState }

func (VulnerabilityLocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VulnerabilityLocationResponse)(nil)).Elem()
}

func (o VulnerabilityLocationResponseOutput) ToVulnerabilityLocationResponseOutput() VulnerabilityLocationResponseOutput {
	return o
}

func (o VulnerabilityLocationResponseOutput) ToVulnerabilityLocationResponseOutputWithContext(ctx context.Context) VulnerabilityLocationResponseOutput {
	return o
}

// The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/) format. Examples include distro or storage location for vulnerable jar. This field can be used as a filter in list requests.
func (o VulnerabilityLocationResponseOutput) CpeUri() pulumi.StringOutput {
	return o.ApplyT(func(v VulnerabilityLocationResponse) string { return v.CpeUri }).(pulumi.StringOutput)
}

// The file location at which this package was found.
func (o VulnerabilityLocationResponseOutput) FileLocation() FileLocationResponseArrayOutput {
	return o.ApplyT(func(v VulnerabilityLocationResponse) []FileLocationResponse { return v.FileLocation }).(FileLocationResponseArrayOutput)
}

// The package being described.
func (o VulnerabilityLocationResponseOutput) Package() pulumi.StringOutput {
	return o.ApplyT(func(v VulnerabilityLocationResponse) string { return v.Package }).(pulumi.StringOutput)
}

// The version of the package being described. This field can be used as a filter in list requests.
func (o VulnerabilityLocationResponseOutput) Version() VersionResponseOutput {
	return o.ApplyT(func(v VulnerabilityLocationResponse) VersionResponse { return v.Version }).(VersionResponseOutput)
}

// VulnerabilityType provides metadata about a security vulnerability.
type VulnerabilityType struct {
	// The CVSS score for this Vulnerability.
	CvssScore *float64 `pulumi:"cvssScore"`
	// The full description of the CVSS for version 2.
	CvssV2 *CVSS `pulumi:"cvssV2"`
	// CVSS version used to populate cvss_score and severity.
	CvssVersion *VulnerabilityTypeCvssVersion `pulumi:"cvssVersion"`
	// A list of CWE for this vulnerability. For details, see: https://cwe.mitre.org/index.html
	Cwe []string `pulumi:"cwe"`
	// All information about the package to specifically identify this vulnerability. One entry per (version range and cpe_uri) the package vulnerability has manifested in.
	Details []Detail `pulumi:"details"`
	// Note provider assigned impact of the vulnerability
	Severity *VulnerabilityTypeSeverity `pulumi:"severity"`
}

// VulnerabilityTypeInput is an input type that accepts VulnerabilityTypeArgs and VulnerabilityTypeOutput values.
// You can construct a concrete instance of `VulnerabilityTypeInput` via:
//
//	VulnerabilityTypeArgs{...}
type VulnerabilityTypeInput interface {
	pulumi.Input

	ToVulnerabilityTypeOutput() VulnerabilityTypeOutput
	ToVulnerabilityTypeOutputWithContext(context.Context) VulnerabilityTypeOutput
}

// VulnerabilityType provides metadata about a security vulnerability.
type VulnerabilityTypeArgs struct {
	// The CVSS score for this Vulnerability.
	CvssScore pulumi.Float64PtrInput `pulumi:"cvssScore"`
	// The full description of the CVSS for version 2.
	CvssV2 CVSSPtrInput `pulumi:"cvssV2"`
	// CVSS version used to populate cvss_score and severity.
	CvssVersion VulnerabilityTypeCvssVersionPtrInput `pulumi:"cvssVersion"`
	// A list of CWE for this vulnerability. For details, see: https://cwe.mitre.org/index.html
	Cwe pulumi.StringArrayInput `pulumi:"cwe"`
	// All information about the package to specifically identify this vulnerability. One entry per (version range and cpe_uri) the package vulnerability has manifested in.
	Details DetailArrayInput `pulumi:"details"`
	// Note provider assigned impact of the vulnerability
	Severity VulnerabilityTypeSeverityPtrInput `pulumi:"severity"`
}

func (VulnerabilityTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VulnerabilityType)(nil)).Elem()
}

func (i VulnerabilityTypeArgs) ToVulnerabilityTypeOutput() VulnerabilityTypeOutput {
	return i.ToVulnerabilityTypeOutputWithContext(context.Background())
}

func (i VulnerabilityTypeArgs) ToVulnerabilityTypeOutputWithContext(ctx context.Context) VulnerabilityTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityTypeOutput)
}

func (i VulnerabilityTypeArgs) ToVulnerabilityTypePtrOutput() VulnerabilityTypePtrOutput {
	return i.ToVulnerabilityTypePtrOutputWithContext(context.Background())
}

func (i VulnerabilityTypeArgs) ToVulnerabilityTypePtrOutputWithContext(ctx context.Context) VulnerabilityTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityTypeOutput).ToVulnerabilityTypePtrOutputWithContext(ctx)
}

// VulnerabilityTypePtrInput is an input type that accepts VulnerabilityTypeArgs, VulnerabilityTypePtr and VulnerabilityTypePtrOutput values.
// You can construct a concrete instance of `VulnerabilityTypePtrInput` via:
//
//	        VulnerabilityTypeArgs{...}
//
//	or:
//
//	        nil
type VulnerabilityTypePtrInput interface {
	pulumi.Input

	ToVulnerabilityTypePtrOutput() VulnerabilityTypePtrOutput
	ToVulnerabilityTypePtrOutputWithContext(context.Context) VulnerabilityTypePtrOutput
}

type vulnerabilityTypePtrType VulnerabilityTypeArgs

func VulnerabilityTypePtr(v *VulnerabilityTypeArgs) VulnerabilityTypePtrInput {
	return (*vulnerabilityTypePtrType)(v)
}

func (*vulnerabilityTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VulnerabilityType)(nil)).Elem()
}

func (i *vulnerabilityTypePtrType) ToVulnerabilityTypePtrOutput() VulnerabilityTypePtrOutput {
	return i.ToVulnerabilityTypePtrOutputWithContext(context.Background())
}

func (i *vulnerabilityTypePtrType) ToVulnerabilityTypePtrOutputWithContext(ctx context.Context) VulnerabilityTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityTypePtrOutput)
}

// VulnerabilityType provides metadata about a security vulnerability.
type VulnerabilityTypeOutput struct{ *pulumi.OutputState }

func (VulnerabilityTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VulnerabilityType)(nil)).Elem()
}

func (o VulnerabilityTypeOutput) ToVulnerabilityTypeOutput() VulnerabilityTypeOutput {
	return o
}

func (o VulnerabilityTypeOutput) ToVulnerabilityTypeOutputWithContext(ctx context.Context) VulnerabilityTypeOutput {
	return o
}

func (o VulnerabilityTypeOutput) ToVulnerabilityTypePtrOutput() VulnerabilityTypePtrOutput {
	return o.ToVulnerabilityTypePtrOutputWithContext(context.Background())
}

func (o VulnerabilityTypeOutput) ToVulnerabilityTypePtrOutputWithContext(ctx context.Context) VulnerabilityTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VulnerabilityType) *VulnerabilityType {
		return &v
	}).(VulnerabilityTypePtrOutput)
}

// The CVSS score for this Vulnerability.
func (o VulnerabilityTypeOutput) CvssScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v VulnerabilityType) *float64 { return v.CvssScore }).(pulumi.Float64PtrOutput)
}

// The full description of the CVSS for version 2.
func (o VulnerabilityTypeOutput) CvssV2() CVSSPtrOutput {
	return o.ApplyT(func(v VulnerabilityType) *CVSS { return v.CvssV2 }).(CVSSPtrOutput)
}

// CVSS version used to populate cvss_score and severity.
func (o VulnerabilityTypeOutput) CvssVersion() VulnerabilityTypeCvssVersionPtrOutput {
	return o.ApplyT(func(v VulnerabilityType) *VulnerabilityTypeCvssVersion { return v.CvssVersion }).(VulnerabilityTypeCvssVersionPtrOutput)
}

// A list of CWE for this vulnerability. For details, see: https://cwe.mitre.org/index.html
func (o VulnerabilityTypeOutput) Cwe() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VulnerabilityType) []string { return v.Cwe }).(pulumi.StringArrayOutput)
}

// All information about the package to specifically identify this vulnerability. One entry per (version range and cpe_uri) the package vulnerability has manifested in.
func (o VulnerabilityTypeOutput) Details() DetailArrayOutput {
	return o.ApplyT(func(v VulnerabilityType) []Detail { return v.Details }).(DetailArrayOutput)
}

// Note provider assigned impact of the vulnerability
func (o VulnerabilityTypeOutput) Severity() VulnerabilityTypeSeverityPtrOutput {
	return o.ApplyT(func(v VulnerabilityType) *VulnerabilityTypeSeverity { return v.Severity }).(VulnerabilityTypeSeverityPtrOutput)
}

type VulnerabilityTypePtrOutput struct{ *pulumi.OutputState }

func (VulnerabilityTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VulnerabilityType)(nil)).Elem()
}

func (o VulnerabilityTypePtrOutput) ToVulnerabilityTypePtrOutput() VulnerabilityTypePtrOutput {
	return o
}

func (o VulnerabilityTypePtrOutput) ToVulnerabilityTypePtrOutputWithContext(ctx context.Context) VulnerabilityTypePtrOutput {
	return o
}

func (o VulnerabilityTypePtrOutput) Elem() VulnerabilityTypeOutput {
	return o.ApplyT(func(v *VulnerabilityType) VulnerabilityType {
		if v != nil {
			return *v
		}
		var ret VulnerabilityType
		return ret
	}).(VulnerabilityTypeOutput)
}

// The CVSS score for this Vulnerability.
func (o VulnerabilityTypePtrOutput) CvssScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *VulnerabilityType) *float64 {
		if v == nil {
			return nil
		}
		return v.CvssScore
	}).(pulumi.Float64PtrOutput)
}

// The full description of the CVSS for version 2.
func (o VulnerabilityTypePtrOutput) CvssV2() CVSSPtrOutput {
	return o.ApplyT(func(v *VulnerabilityType) *CVSS {
		if v == nil {
			return nil
		}
		return v.CvssV2
	}).(CVSSPtrOutput)
}

// CVSS version used to populate cvss_score and severity.
func (o VulnerabilityTypePtrOutput) CvssVersion() VulnerabilityTypeCvssVersionPtrOutput {
	return o.ApplyT(func(v *VulnerabilityType) *VulnerabilityTypeCvssVersion {
		if v == nil {
			return nil
		}
		return v.CvssVersion
	}).(VulnerabilityTypeCvssVersionPtrOutput)
}

// A list of CWE for this vulnerability. For details, see: https://cwe.mitre.org/index.html
func (o VulnerabilityTypePtrOutput) Cwe() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VulnerabilityType) []string {
		if v == nil {
			return nil
		}
		return v.Cwe
	}).(pulumi.StringArrayOutput)
}

// All information about the package to specifically identify this vulnerability. One entry per (version range and cpe_uri) the package vulnerability has manifested in.
func (o VulnerabilityTypePtrOutput) Details() DetailArrayOutput {
	return o.ApplyT(func(v *VulnerabilityType) []Detail {
		if v == nil {
			return nil
		}
		return v.Details
	}).(DetailArrayOutput)
}

// Note provider assigned impact of the vulnerability
func (o VulnerabilityTypePtrOutput) Severity() VulnerabilityTypeSeverityPtrOutput {
	return o.ApplyT(func(v *VulnerabilityType) *VulnerabilityTypeSeverity {
		if v == nil {
			return nil
		}
		return v.Severity
	}).(VulnerabilityTypeSeverityPtrOutput)
}

// VulnerabilityType provides metadata about a security vulnerability.
type VulnerabilityTypeResponse struct {
	// The CVSS score for this Vulnerability.
	CvssScore float64 `pulumi:"cvssScore"`
	// The full description of the CVSS for version 2.
	CvssV2 CVSSResponse `pulumi:"cvssV2"`
	// CVSS version used to populate cvss_score and severity.
	CvssVersion string `pulumi:"cvssVersion"`
	// A list of CWE for this vulnerability. For details, see: https://cwe.mitre.org/index.html
	Cwe []string `pulumi:"cwe"`
	// All information about the package to specifically identify this vulnerability. One entry per (version range and cpe_uri) the package vulnerability has manifested in.
	Details []DetailResponse `pulumi:"details"`
	// Note provider assigned impact of the vulnerability
	Severity string `pulumi:"severity"`
}

// VulnerabilityType provides metadata about a security vulnerability.
type VulnerabilityTypeResponseOutput struct{ *pulumi.OutputState }

func (VulnerabilityTypeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VulnerabilityTypeResponse)(nil)).Elem()
}

func (o VulnerabilityTypeResponseOutput) ToVulnerabilityTypeResponseOutput() VulnerabilityTypeResponseOutput {
	return o
}

func (o VulnerabilityTypeResponseOutput) ToVulnerabilityTypeResponseOutputWithContext(ctx context.Context) VulnerabilityTypeResponseOutput {
	return o
}

// The CVSS score for this Vulnerability.
func (o VulnerabilityTypeResponseOutput) CvssScore() pulumi.Float64Output {
	return o.ApplyT(func(v VulnerabilityTypeResponse) float64 { return v.CvssScore }).(pulumi.Float64Output)
}

// The full description of the CVSS for version 2.
func (o VulnerabilityTypeResponseOutput) CvssV2() CVSSResponseOutput {
	return o.ApplyT(func(v VulnerabilityTypeResponse) CVSSResponse { return v.CvssV2 }).(CVSSResponseOutput)
}

// CVSS version used to populate cvss_score and severity.
func (o VulnerabilityTypeResponseOutput) CvssVersion() pulumi.StringOutput {
	return o.ApplyT(func(v VulnerabilityTypeResponse) string { return v.CvssVersion }).(pulumi.StringOutput)
}

// A list of CWE for this vulnerability. For details, see: https://cwe.mitre.org/index.html
func (o VulnerabilityTypeResponseOutput) Cwe() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VulnerabilityTypeResponse) []string { return v.Cwe }).(pulumi.StringArrayOutput)
}

// All information about the package to specifically identify this vulnerability. One entry per (version range and cpe_uri) the package vulnerability has manifested in.
func (o VulnerabilityTypeResponseOutput) Details() DetailResponseArrayOutput {
	return o.ApplyT(func(v VulnerabilityTypeResponse) []DetailResponse { return v.Details }).(DetailResponseArrayOutput)
}

// Note provider assigned impact of the vulnerability
func (o VulnerabilityTypeResponseOutput) Severity() pulumi.StringOutput {
	return o.ApplyT(func(v VulnerabilityTypeResponse) string { return v.Severity }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AnalysisCompletedInput)(nil)).Elem(), AnalysisCompletedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnalysisCompletedPtrInput)(nil)).Elem(), AnalysisCompletedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ArtifactInput)(nil)).Elem(), ArtifactArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ArtifactArrayInput)(nil)).Elem(), ArtifactArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssessmentInput)(nil)).Elem(), AssessmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssessmentPtrInput)(nil)).Elem(), AssessmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AttestationInput)(nil)).Elem(), AttestationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AttestationPtrInput)(nil)).Elem(), AttestationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AttestationAuthorityInput)(nil)).Elem(), AttestationAuthorityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AttestationAuthorityPtrInput)(nil)).Elem(), AttestationAuthorityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AttestationAuthorityHintInput)(nil)).Elem(), AttestationAuthorityHintArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AttestationAuthorityHintPtrInput)(nil)).Elem(), AttestationAuthorityHintArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BasisInput)(nil)).Elem(), BasisArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BasisPtrInput)(nil)).Elem(), BasisArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingInput)(nil)).Elem(), BindingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingArrayInput)(nil)).Elem(), BindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BuildDefinitionInput)(nil)).Elem(), BuildDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BuildDefinitionPtrInput)(nil)).Elem(), BuildDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BuildDetailsInput)(nil)).Elem(), BuildDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BuildDetailsPtrInput)(nil)).Elem(), BuildDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BuildMetadataInput)(nil)).Elem(), BuildMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BuildMetadataPtrInput)(nil)).Elem(), BuildMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BuildProvenanceInput)(nil)).Elem(), BuildProvenanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BuildProvenancePtrInput)(nil)).Elem(), BuildProvenanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BuildSignatureInput)(nil)).Elem(), BuildSignatureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BuildSignaturePtrInput)(nil)).Elem(), BuildSignatureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BuildTypeInput)(nil)).Elem(), BuildTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BuildTypePtrInput)(nil)).Elem(), BuildTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BuilderConfigInput)(nil)).Elem(), BuilderConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BuilderConfigPtrInput)(nil)).Elem(), BuilderConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CVSSInput)(nil)).Elem(), CVSSArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CVSSPtrInput)(nil)).Elem(), CVSSArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CisBenchmarkInput)(nil)).Elem(), CisBenchmarkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CisBenchmarkPtrInput)(nil)).Elem(), CisBenchmarkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CommandInput)(nil)).Elem(), CommandArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CommandArrayInput)(nil)).Elem(), CommandArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CompletenessInput)(nil)).Elem(), CompletenessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CompletenessPtrInput)(nil)).Elem(), CompletenessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComplianceNoteInput)(nil)).Elem(), ComplianceNoteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComplianceNotePtrInput)(nil)).Elem(), ComplianceNoteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComplianceOccurrenceInput)(nil)).Elem(), ComplianceOccurrenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComplianceOccurrencePtrInput)(nil)).Elem(), ComplianceOccurrenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComplianceVersionInput)(nil)).Elem(), ComplianceVersionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComplianceVersionArrayInput)(nil)).Elem(), ComplianceVersionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DSSEAttestationNoteInput)(nil)).Elem(), DSSEAttestationNoteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DSSEAttestationNotePtrInput)(nil)).Elem(), DSSEAttestationNoteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DSSEAttestationOccurrenceInput)(nil)).Elem(), DSSEAttestationOccurrenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DSSEAttestationOccurrencePtrInput)(nil)).Elem(), DSSEAttestationOccurrenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DSSEHintInput)(nil)).Elem(), DSSEHintArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DSSEHintPtrInput)(nil)).Elem(), DSSEHintArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeployableInput)(nil)).Elem(), DeployableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeployablePtrInput)(nil)).Elem(), DeployableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentInput)(nil)).Elem(), DeploymentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentPtrInput)(nil)).Elem(), DeploymentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DerivedInput)(nil)).Elem(), DerivedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DerivedPtrInput)(nil)).Elem(), DerivedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DetailInput)(nil)).Elem(), DetailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DetailArrayInput)(nil)).Elem(), DetailArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DigestInput)(nil)).Elem(), DigestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DigestArrayInput)(nil)).Elem(), DigestArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DiscoveredInput)(nil)).Elem(), DiscoveredArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DiscoveredPtrInput)(nil)).Elem(), DiscoveredArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DiscoveryInput)(nil)).Elem(), DiscoveryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DiscoveryPtrInput)(nil)).Elem(), DiscoveryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DistributionInput)(nil)).Elem(), DistributionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DistributionArrayInput)(nil)).Elem(), DistributionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DocumentNoteInput)(nil)).Elem(), DocumentNoteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DocumentNotePtrInput)(nil)).Elem(), DocumentNoteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DocumentOccurrenceInput)(nil)).Elem(), DocumentOccurrenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DocumentOccurrencePtrInput)(nil)).Elem(), DocumentOccurrenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvelopeInput)(nil)).Elem(), EnvelopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvelopePtrInput)(nil)).Elem(), EnvelopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvelopeSignatureInput)(nil)).Elem(), EnvelopeSignatureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvelopeSignatureArrayInput)(nil)).Elem(), EnvelopeSignatureArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprPtrInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalRefInput)(nil)).Elem(), ExternalRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalRefArrayInput)(nil)).Elem(), ExternalRefArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileHashesInput)(nil)).Elem(), FileHashesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileHashesPtrInput)(nil)).Elem(), FileHashesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileLocationInput)(nil)).Elem(), FileLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileLocationArrayInput)(nil)).Elem(), FileLocationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileNoteInput)(nil)).Elem(), FileNoteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileNotePtrInput)(nil)).Elem(), FileNoteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileOccurrenceInput)(nil)).Elem(), FileOccurrenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileOccurrencePtrInput)(nil)).Elem(), FileOccurrenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FingerprintInput)(nil)).Elem(), FingerprintArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FingerprintPtrInput)(nil)).Elem(), FingerprintArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1AliasContextInput)(nil)).Elem(), GoogleDevtoolsContaineranalysisV1alpha1AliasContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrInput)(nil)).Elem(), GoogleDevtoolsContaineranalysisV1alpha1AliasContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextInput)(nil)).Elem(), GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrInput)(nil)).Elem(), GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextInput)(nil)).Elem(), GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrInput)(nil)).Elem(), GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextInput)(nil)).Elem(), GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrInput)(nil)).Elem(), GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdInput)(nil)).Elem(), GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrInput)(nil)).Elem(), GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1RepoIdInput)(nil)).Elem(), GoogleDevtoolsContaineranalysisV1alpha1RepoIdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrInput)(nil)).Elem(), GoogleDevtoolsContaineranalysisV1alpha1RepoIdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderInput)(nil)).Elem(), GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderPtrInput)(nil)).Elem(), GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessInput)(nil)).Elem(), GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessPtrInput)(nil)).Elem(), GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceInput)(nil)).Elem(), GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourcePtrInput)(nil)).Elem(), GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationInput)(nil)).Elem(), GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationPtrInput)(nil)).Elem(), GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialInput)(nil)).Elem(), GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialArrayInput)(nil)).Elem(), GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataInput)(nil)).Elem(), GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataPtrInput)(nil)).Elem(), GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1SourceContextInput)(nil)).Elem(), GoogleDevtoolsContaineranalysisV1alpha1SourceContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrInput)(nil)).Elem(), GoogleDevtoolsContaineranalysisV1alpha1SourceContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleDevtoolsContaineranalysisV1alpha1SourceContextArrayInput)(nil)).Elem(), GoogleDevtoolsContaineranalysisV1alpha1SourceContextArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HashInput)(nil)).Elem(), HashArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HashPtrInput)(nil)).Elem(), HashArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HashArrayInput)(nil)).Elem(), HashArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentifierHelperInput)(nil)).Elem(), IdentifierHelperArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentifierHelperPtrInput)(nil)).Elem(), IdentifierHelperArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InTotoProvenanceInput)(nil)).Elem(), InTotoProvenanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InTotoProvenancePtrInput)(nil)).Elem(), InTotoProvenanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InTotoSlsaProvenanceV1Input)(nil)).Elem(), InTotoSlsaProvenanceV1Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*InTotoSlsaProvenanceV1PtrInput)(nil)).Elem(), InTotoSlsaProvenanceV1Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*InTotoStatementInput)(nil)).Elem(), InTotoStatementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InTotoStatementPtrInput)(nil)).Elem(), InTotoStatementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstallationInput)(nil)).Elem(), InstallationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstallationPtrInput)(nil)).Elem(), InstallationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JustificationInput)(nil)).Elem(), JustificationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JustificationPtrInput)(nil)).Elem(), JustificationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LayerInput)(nil)).Elem(), LayerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LayerArrayInput)(nil)).Elem(), LayerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LicenseInput)(nil)).Elem(), LicenseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LicensePtrInput)(nil)).Elem(), LicenseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationInput)(nil)).Elem(), LocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationArrayInput)(nil)).Elem(), LocationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaterialInput)(nil)).Elem(), MaterialArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaterialArrayInput)(nil)).Elem(), MaterialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetadataInput)(nil)).Elem(), MetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetadataPtrInput)(nil)).Elem(), MetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NonCompliantFileInput)(nil)).Elem(), NonCompliantFileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NonCompliantFileArrayInput)(nil)).Elem(), NonCompliantFileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PackageInput)(nil)).Elem(), PackageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PackagePtrInput)(nil)).Elem(), PackageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PackageInfoNoteInput)(nil)).Elem(), PackageInfoNoteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PackageInfoNotePtrInput)(nil)).Elem(), PackageInfoNoteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PackageInfoOccurrenceInput)(nil)).Elem(), PackageInfoOccurrenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PackageInfoOccurrencePtrInput)(nil)).Elem(), PackageInfoOccurrenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PackageIssueInput)(nil)).Elem(), PackageIssueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PackageIssueArrayInput)(nil)).Elem(), PackageIssueArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PgpSignedAttestationInput)(nil)).Elem(), PgpSignedAttestationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PgpSignedAttestationPtrInput)(nil)).Elem(), PgpSignedAttestationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProductInput)(nil)).Elem(), ProductArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProductPtrInput)(nil)).Elem(), ProductArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProvenanceBuilderInput)(nil)).Elem(), ProvenanceBuilderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProvenanceBuilderPtrInput)(nil)).Elem(), ProvenanceBuilderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublisherInput)(nil)).Elem(), PublisherArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublisherPtrInput)(nil)).Elem(), PublisherArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecipeInput)(nil)).Elem(), RecipeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecipePtrInput)(nil)).Elem(), RecipeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RelatedUrlInput)(nil)).Elem(), RelatedUrlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RelatedUrlArrayInput)(nil)).Elem(), RelatedUrlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RelationshipNoteInput)(nil)).Elem(), RelationshipNoteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RelationshipNotePtrInput)(nil)).Elem(), RelationshipNoteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RelationshipOccurrenceInput)(nil)).Elem(), RelationshipOccurrenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RelationshipOccurrencePtrInput)(nil)).Elem(), RelationshipOccurrenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemediationInput)(nil)).Elem(), RemediationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemediationArrayInput)(nil)).Elem(), RemediationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepoSourceInput)(nil)).Elem(), RepoSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepoSourcePtrInput)(nil)).Elem(), RepoSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceInput)(nil)).Elem(), ResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourcePtrInput)(nil)).Elem(), ResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceDescriptorInput)(nil)).Elem(), ResourceDescriptorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceDescriptorArrayInput)(nil)).Elem(), ResourceDescriptorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RunDetailsInput)(nil)).Elem(), RunDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RunDetailsPtrInput)(nil)).Elem(), RunDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SBOMReferenceNoteInput)(nil)).Elem(), SBOMReferenceNoteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SBOMReferenceNotePtrInput)(nil)).Elem(), SBOMReferenceNoteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SBOMReferenceOccurrenceInput)(nil)).Elem(), SBOMReferenceOccurrenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SBOMReferenceOccurrencePtrInput)(nil)).Elem(), SBOMReferenceOccurrenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SbomReferenceIntotoPayloadInput)(nil)).Elem(), SbomReferenceIntotoPayloadArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SbomReferenceIntotoPayloadPtrInput)(nil)).Elem(), SbomReferenceIntotoPayloadArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SbomReferenceIntotoPredicateInput)(nil)).Elem(), SbomReferenceIntotoPredicateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SbomReferenceIntotoPredicatePtrInput)(nil)).Elem(), SbomReferenceIntotoPredicateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SlsaBuilderInput)(nil)).Elem(), SlsaBuilderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SlsaBuilderPtrInput)(nil)).Elem(), SlsaBuilderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SlsaCompletenessInput)(nil)).Elem(), SlsaCompletenessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SlsaCompletenessPtrInput)(nil)).Elem(), SlsaCompletenessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SlsaMetadataInput)(nil)).Elem(), SlsaMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SlsaMetadataPtrInput)(nil)).Elem(), SlsaMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SlsaProvenanceInput)(nil)).Elem(), SlsaProvenanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SlsaProvenancePtrInput)(nil)).Elem(), SlsaProvenanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SlsaProvenanceV1Input)(nil)).Elem(), SlsaProvenanceV1Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*SlsaProvenanceV1PtrInput)(nil)).Elem(), SlsaProvenanceV1Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*SlsaProvenanceZeroTwoInput)(nil)).Elem(), SlsaProvenanceZeroTwoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SlsaProvenanceZeroTwoPtrInput)(nil)).Elem(), SlsaProvenanceZeroTwoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SlsaRecipeInput)(nil)).Elem(), SlsaRecipeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SlsaRecipePtrInput)(nil)).Elem(), SlsaRecipeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceInput)(nil)).Elem(), SourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourcePtrInput)(nil)).Elem(), SourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StatusInput)(nil)).Elem(), StatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StatusPtrInput)(nil)).Elem(), StatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StatusArrayInput)(nil)).Elem(), StatusArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StorageSourceInput)(nil)).Elem(), StorageSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StorageSourcePtrInput)(nil)).Elem(), StorageSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubjectInput)(nil)).Elem(), SubjectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubjectArrayInput)(nil)).Elem(), SubjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*URIInput)(nil)).Elem(), URIArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*URIPtrInput)(nil)).Elem(), URIArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*URIArrayInput)(nil)).Elem(), URIArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UpgradeDistributionInput)(nil)).Elem(), UpgradeDistributionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UpgradeDistributionPtrInput)(nil)).Elem(), UpgradeDistributionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UpgradeDistributionArrayInput)(nil)).Elem(), UpgradeDistributionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UpgradeNoteInput)(nil)).Elem(), UpgradeNoteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UpgradeNotePtrInput)(nil)).Elem(), UpgradeNoteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UpgradeOccurrenceInput)(nil)).Elem(), UpgradeOccurrenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UpgradeOccurrencePtrInput)(nil)).Elem(), UpgradeOccurrenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VersionInput)(nil)).Elem(), VersionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VersionPtrInput)(nil)).Elem(), VersionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VexAssessmentInput)(nil)).Elem(), VexAssessmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VexAssessmentPtrInput)(nil)).Elem(), VexAssessmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VulnerabilityAssessmentNoteInput)(nil)).Elem(), VulnerabilityAssessmentNoteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VulnerabilityAssessmentNotePtrInput)(nil)).Elem(), VulnerabilityAssessmentNoteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VulnerabilityDetailsInput)(nil)).Elem(), VulnerabilityDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VulnerabilityDetailsPtrInput)(nil)).Elem(), VulnerabilityDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VulnerabilityLocationInput)(nil)).Elem(), VulnerabilityLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VulnerabilityLocationPtrInput)(nil)).Elem(), VulnerabilityLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VulnerabilityTypeInput)(nil)).Elem(), VulnerabilityTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VulnerabilityTypePtrInput)(nil)).Elem(), VulnerabilityTypeArgs{})
	pulumi.RegisterOutputType(AnalysisCompletedOutput{})
	pulumi.RegisterOutputType(AnalysisCompletedPtrOutput{})
	pulumi.RegisterOutputType(AnalysisCompletedResponseOutput{})
	pulumi.RegisterOutputType(ArtifactOutput{})
	pulumi.RegisterOutputType(ArtifactArrayOutput{})
	pulumi.RegisterOutputType(ArtifactResponseOutput{})
	pulumi.RegisterOutputType(ArtifactResponseArrayOutput{})
	pulumi.RegisterOutputType(AssessmentOutput{})
	pulumi.RegisterOutputType(AssessmentPtrOutput{})
	pulumi.RegisterOutputType(AssessmentResponseOutput{})
	pulumi.RegisterOutputType(AttestationOutput{})
	pulumi.RegisterOutputType(AttestationPtrOutput{})
	pulumi.RegisterOutputType(AttestationAuthorityOutput{})
	pulumi.RegisterOutputType(AttestationAuthorityPtrOutput{})
	pulumi.RegisterOutputType(AttestationAuthorityHintOutput{})
	pulumi.RegisterOutputType(AttestationAuthorityHintPtrOutput{})
	pulumi.RegisterOutputType(AttestationAuthorityHintResponseOutput{})
	pulumi.RegisterOutputType(AttestationAuthorityResponseOutput{})
	pulumi.RegisterOutputType(AttestationResponseOutput{})
	pulumi.RegisterOutputType(BasisOutput{})
	pulumi.RegisterOutputType(BasisPtrOutput{})
	pulumi.RegisterOutputType(BasisResponseOutput{})
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(BindingResponseOutput{})
	pulumi.RegisterOutputType(BindingResponseArrayOutput{})
	pulumi.RegisterOutputType(BuildDefinitionOutput{})
	pulumi.RegisterOutputType(BuildDefinitionPtrOutput{})
	pulumi.RegisterOutputType(BuildDefinitionResponseOutput{})
	pulumi.RegisterOutputType(BuildDetailsOutput{})
	pulumi.RegisterOutputType(BuildDetailsPtrOutput{})
	pulumi.RegisterOutputType(BuildDetailsResponseOutput{})
	pulumi.RegisterOutputType(BuildMetadataOutput{})
	pulumi.RegisterOutputType(BuildMetadataPtrOutput{})
	pulumi.RegisterOutputType(BuildMetadataResponseOutput{})
	pulumi.RegisterOutputType(BuildProvenanceOutput{})
	pulumi.RegisterOutputType(BuildProvenancePtrOutput{})
	pulumi.RegisterOutputType(BuildProvenanceResponseOutput{})
	pulumi.RegisterOutputType(BuildSignatureOutput{})
	pulumi.RegisterOutputType(BuildSignaturePtrOutput{})
	pulumi.RegisterOutputType(BuildSignatureResponseOutput{})
	pulumi.RegisterOutputType(BuildTypeOutput{})
	pulumi.RegisterOutputType(BuildTypePtrOutput{})
	pulumi.RegisterOutputType(BuildTypeResponseOutput{})
	pulumi.RegisterOutputType(BuilderConfigOutput{})
	pulumi.RegisterOutputType(BuilderConfigPtrOutput{})
	pulumi.RegisterOutputType(BuilderConfigResponseOutput{})
	pulumi.RegisterOutputType(CVSSOutput{})
	pulumi.RegisterOutputType(CVSSPtrOutput{})
	pulumi.RegisterOutputType(CVSSResponseOutput{})
	pulumi.RegisterOutputType(CisBenchmarkOutput{})
	pulumi.RegisterOutputType(CisBenchmarkPtrOutput{})
	pulumi.RegisterOutputType(CisBenchmarkResponseOutput{})
	pulumi.RegisterOutputType(CommandOutput{})
	pulumi.RegisterOutputType(CommandArrayOutput{})
	pulumi.RegisterOutputType(CommandResponseOutput{})
	pulumi.RegisterOutputType(CommandResponseArrayOutput{})
	pulumi.RegisterOutputType(CompletenessOutput{})
	pulumi.RegisterOutputType(CompletenessPtrOutput{})
	pulumi.RegisterOutputType(CompletenessResponseOutput{})
	pulumi.RegisterOutputType(ComplianceNoteOutput{})
	pulumi.RegisterOutputType(ComplianceNotePtrOutput{})
	pulumi.RegisterOutputType(ComplianceNoteResponseOutput{})
	pulumi.RegisterOutputType(ComplianceOccurrenceOutput{})
	pulumi.RegisterOutputType(ComplianceOccurrencePtrOutput{})
	pulumi.RegisterOutputType(ComplianceOccurrenceResponseOutput{})
	pulumi.RegisterOutputType(ComplianceVersionOutput{})
	pulumi.RegisterOutputType(ComplianceVersionArrayOutput{})
	pulumi.RegisterOutputType(ComplianceVersionResponseOutput{})
	pulumi.RegisterOutputType(ComplianceVersionResponseArrayOutput{})
	pulumi.RegisterOutputType(DSSEAttestationNoteOutput{})
	pulumi.RegisterOutputType(DSSEAttestationNotePtrOutput{})
	pulumi.RegisterOutputType(DSSEAttestationNoteResponseOutput{})
	pulumi.RegisterOutputType(DSSEAttestationOccurrenceOutput{})
	pulumi.RegisterOutputType(DSSEAttestationOccurrencePtrOutput{})
	pulumi.RegisterOutputType(DSSEAttestationOccurrenceResponseOutput{})
	pulumi.RegisterOutputType(DSSEHintOutput{})
	pulumi.RegisterOutputType(DSSEHintPtrOutput{})
	pulumi.RegisterOutputType(DSSEHintResponseOutput{})
	pulumi.RegisterOutputType(DeployableOutput{})
	pulumi.RegisterOutputType(DeployablePtrOutput{})
	pulumi.RegisterOutputType(DeployableResponseOutput{})
	pulumi.RegisterOutputType(DeploymentOutput{})
	pulumi.RegisterOutputType(DeploymentPtrOutput{})
	pulumi.RegisterOutputType(DeploymentResponseOutput{})
	pulumi.RegisterOutputType(DerivedOutput{})
	pulumi.RegisterOutputType(DerivedPtrOutput{})
	pulumi.RegisterOutputType(DerivedResponseOutput{})
	pulumi.RegisterOutputType(DetailOutput{})
	pulumi.RegisterOutputType(DetailArrayOutput{})
	pulumi.RegisterOutputType(DetailResponseOutput{})
	pulumi.RegisterOutputType(DetailResponseArrayOutput{})
	pulumi.RegisterOutputType(DigestOutput{})
	pulumi.RegisterOutputType(DigestArrayOutput{})
	pulumi.RegisterOutputType(DigestResponseOutput{})
	pulumi.RegisterOutputType(DigestResponseArrayOutput{})
	pulumi.RegisterOutputType(DiscoveredOutput{})
	pulumi.RegisterOutputType(DiscoveredPtrOutput{})
	pulumi.RegisterOutputType(DiscoveredResponseOutput{})
	pulumi.RegisterOutputType(DiscoveryOutput{})
	pulumi.RegisterOutputType(DiscoveryPtrOutput{})
	pulumi.RegisterOutputType(DiscoveryResponseOutput{})
	pulumi.RegisterOutputType(DistributionOutput{})
	pulumi.RegisterOutputType(DistributionArrayOutput{})
	pulumi.RegisterOutputType(DistributionResponseOutput{})
	pulumi.RegisterOutputType(DistributionResponseArrayOutput{})
	pulumi.RegisterOutputType(DocumentNoteOutput{})
	pulumi.RegisterOutputType(DocumentNotePtrOutput{})
	pulumi.RegisterOutputType(DocumentNoteResponseOutput{})
	pulumi.RegisterOutputType(DocumentOccurrenceOutput{})
	pulumi.RegisterOutputType(DocumentOccurrencePtrOutput{})
	pulumi.RegisterOutputType(DocumentOccurrenceResponseOutput{})
	pulumi.RegisterOutputType(EnvelopeOutput{})
	pulumi.RegisterOutputType(EnvelopePtrOutput{})
	pulumi.RegisterOutputType(EnvelopeResponseOutput{})
	pulumi.RegisterOutputType(EnvelopeSignatureOutput{})
	pulumi.RegisterOutputType(EnvelopeSignatureArrayOutput{})
	pulumi.RegisterOutputType(EnvelopeSignatureResponseOutput{})
	pulumi.RegisterOutputType(EnvelopeSignatureResponseArrayOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(ExprResponseOutput{})
	pulumi.RegisterOutputType(ExternalRefOutput{})
	pulumi.RegisterOutputType(ExternalRefArrayOutput{})
	pulumi.RegisterOutputType(ExternalRefResponseOutput{})
	pulumi.RegisterOutputType(ExternalRefResponseArrayOutput{})
	pulumi.RegisterOutputType(FileHashesOutput{})
	pulumi.RegisterOutputType(FileHashesPtrOutput{})
	pulumi.RegisterOutputType(FileHashesResponseOutput{})
	pulumi.RegisterOutputType(FileLocationOutput{})
	pulumi.RegisterOutputType(FileLocationArrayOutput{})
	pulumi.RegisterOutputType(FileLocationResponseOutput{})
	pulumi.RegisterOutputType(FileLocationResponseArrayOutput{})
	pulumi.RegisterOutputType(FileNoteOutput{})
	pulumi.RegisterOutputType(FileNotePtrOutput{})
	pulumi.RegisterOutputType(FileNoteResponseOutput{})
	pulumi.RegisterOutputType(FileOccurrenceOutput{})
	pulumi.RegisterOutputType(FileOccurrencePtrOutput{})
	pulumi.RegisterOutputType(FileOccurrenceResponseOutput{})
	pulumi.RegisterOutputType(FingerprintOutput{})
	pulumi.RegisterOutputType(FingerprintPtrOutput{})
	pulumi.RegisterOutputType(FingerprintResponseOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsContaineranalysisV1alpha1AliasContextOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsContaineranalysisV1alpha1AliasContextPtrOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsContaineranalysisV1alpha1AliasContextResponseOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextPtrOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextResponseOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextPtrOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextResponseOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextPtrOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextResponseOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdPtrOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdResponseOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsContaineranalysisV1alpha1RepoIdOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsContaineranalysisV1alpha1RepoIdPtrOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsContaineranalysisV1alpha1RepoIdResponseOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderPtrOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderResponseOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessPtrOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessResponseOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourcePtrOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceResponseOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationPtrOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationResponseOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialArrayOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialResponseOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialResponseArrayOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataPtrOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataResponseOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsContaineranalysisV1alpha1SourceContextOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsContaineranalysisV1alpha1SourceContextPtrOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsContaineranalysisV1alpha1SourceContextArrayOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsContaineranalysisV1alpha1SourceContextResponseOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsContaineranalysisV1alpha1SourceContextResponseArrayOutput{})
	pulumi.RegisterOutputType(HashOutput{})
	pulumi.RegisterOutputType(HashPtrOutput{})
	pulumi.RegisterOutputType(HashArrayOutput{})
	pulumi.RegisterOutputType(HashResponseOutput{})
	pulumi.RegisterOutputType(HashResponseArrayOutput{})
	pulumi.RegisterOutputType(IdentifierHelperOutput{})
	pulumi.RegisterOutputType(IdentifierHelperPtrOutput{})
	pulumi.RegisterOutputType(IdentifierHelperResponseOutput{})
	pulumi.RegisterOutputType(InTotoProvenanceOutput{})
	pulumi.RegisterOutputType(InTotoProvenancePtrOutput{})
	pulumi.RegisterOutputType(InTotoProvenanceResponseOutput{})
	pulumi.RegisterOutputType(InTotoSlsaProvenanceV1Output{})
	pulumi.RegisterOutputType(InTotoSlsaProvenanceV1PtrOutput{})
	pulumi.RegisterOutputType(InTotoSlsaProvenanceV1ResponseOutput{})
	pulumi.RegisterOutputType(InTotoStatementOutput{})
	pulumi.RegisterOutputType(InTotoStatementPtrOutput{})
	pulumi.RegisterOutputType(InTotoStatementResponseOutput{})
	pulumi.RegisterOutputType(InstallationOutput{})
	pulumi.RegisterOutputType(InstallationPtrOutput{})
	pulumi.RegisterOutputType(InstallationResponseOutput{})
	pulumi.RegisterOutputType(JustificationOutput{})
	pulumi.RegisterOutputType(JustificationPtrOutput{})
	pulumi.RegisterOutputType(JustificationResponseOutput{})
	pulumi.RegisterOutputType(LayerOutput{})
	pulumi.RegisterOutputType(LayerArrayOutput{})
	pulumi.RegisterOutputType(LayerResponseOutput{})
	pulumi.RegisterOutputType(LayerResponseArrayOutput{})
	pulumi.RegisterOutputType(LicenseOutput{})
	pulumi.RegisterOutputType(LicensePtrOutput{})
	pulumi.RegisterOutputType(LicenseResponseOutput{})
	pulumi.RegisterOutputType(LocationOutput{})
	pulumi.RegisterOutputType(LocationArrayOutput{})
	pulumi.RegisterOutputType(LocationResponseOutput{})
	pulumi.RegisterOutputType(LocationResponseArrayOutput{})
	pulumi.RegisterOutputType(MaterialOutput{})
	pulumi.RegisterOutputType(MaterialArrayOutput{})
	pulumi.RegisterOutputType(MaterialResponseOutput{})
	pulumi.RegisterOutputType(MaterialResponseArrayOutput{})
	pulumi.RegisterOutputType(MetadataOutput{})
	pulumi.RegisterOutputType(MetadataPtrOutput{})
	pulumi.RegisterOutputType(MetadataResponseOutput{})
	pulumi.RegisterOutputType(NonCompliantFileOutput{})
	pulumi.RegisterOutputType(NonCompliantFileArrayOutput{})
	pulumi.RegisterOutputType(NonCompliantFileResponseOutput{})
	pulumi.RegisterOutputType(NonCompliantFileResponseArrayOutput{})
	pulumi.RegisterOutputType(OperationResponseOutput{})
	pulumi.RegisterOutputType(PackageOutput{})
	pulumi.RegisterOutputType(PackagePtrOutput{})
	pulumi.RegisterOutputType(PackageInfoNoteOutput{})
	pulumi.RegisterOutputType(PackageInfoNotePtrOutput{})
	pulumi.RegisterOutputType(PackageInfoNoteResponseOutput{})
	pulumi.RegisterOutputType(PackageInfoOccurrenceOutput{})
	pulumi.RegisterOutputType(PackageInfoOccurrencePtrOutput{})
	pulumi.RegisterOutputType(PackageInfoOccurrenceResponseOutput{})
	pulumi.RegisterOutputType(PackageIssueOutput{})
	pulumi.RegisterOutputType(PackageIssueArrayOutput{})
	pulumi.RegisterOutputType(PackageIssueResponseOutput{})
	pulumi.RegisterOutputType(PackageIssueResponseArrayOutput{})
	pulumi.RegisterOutputType(PackageResponseOutput{})
	pulumi.RegisterOutputType(PgpSignedAttestationOutput{})
	pulumi.RegisterOutputType(PgpSignedAttestationPtrOutput{})
	pulumi.RegisterOutputType(PgpSignedAttestationResponseOutput{})
	pulumi.RegisterOutputType(ProductOutput{})
	pulumi.RegisterOutputType(ProductPtrOutput{})
	pulumi.RegisterOutputType(ProductResponseOutput{})
	pulumi.RegisterOutputType(ProvenanceBuilderOutput{})
	pulumi.RegisterOutputType(ProvenanceBuilderPtrOutput{})
	pulumi.RegisterOutputType(ProvenanceBuilderResponseOutput{})
	pulumi.RegisterOutputType(PublisherOutput{})
	pulumi.RegisterOutputType(PublisherPtrOutput{})
	pulumi.RegisterOutputType(PublisherResponseOutput{})
	pulumi.RegisterOutputType(RecipeOutput{})
	pulumi.RegisterOutputType(RecipePtrOutput{})
	pulumi.RegisterOutputType(RecipeResponseOutput{})
	pulumi.RegisterOutputType(RelatedUrlOutput{})
	pulumi.RegisterOutputType(RelatedUrlArrayOutput{})
	pulumi.RegisterOutputType(RelatedUrlResponseOutput{})
	pulumi.RegisterOutputType(RelatedUrlResponseArrayOutput{})
	pulumi.RegisterOutputType(RelationshipNoteOutput{})
	pulumi.RegisterOutputType(RelationshipNotePtrOutput{})
	pulumi.RegisterOutputType(RelationshipNoteResponseOutput{})
	pulumi.RegisterOutputType(RelationshipOccurrenceOutput{})
	pulumi.RegisterOutputType(RelationshipOccurrencePtrOutput{})
	pulumi.RegisterOutputType(RelationshipOccurrenceResponseOutput{})
	pulumi.RegisterOutputType(RemediationOutput{})
	pulumi.RegisterOutputType(RemediationArrayOutput{})
	pulumi.RegisterOutputType(RemediationResponseOutput{})
	pulumi.RegisterOutputType(RemediationResponseArrayOutput{})
	pulumi.RegisterOutputType(RepoSourceOutput{})
	pulumi.RegisterOutputType(RepoSourcePtrOutput{})
	pulumi.RegisterOutputType(RepoSourceResponseOutput{})
	pulumi.RegisterOutputType(ResourceOutput{})
	pulumi.RegisterOutputType(ResourcePtrOutput{})
	pulumi.RegisterOutputType(ResourceDescriptorOutput{})
	pulumi.RegisterOutputType(ResourceDescriptorArrayOutput{})
	pulumi.RegisterOutputType(ResourceDescriptorResponseOutput{})
	pulumi.RegisterOutputType(ResourceDescriptorResponseArrayOutput{})
	pulumi.RegisterOutputType(ResourceResponseOutput{})
	pulumi.RegisterOutputType(RunDetailsOutput{})
	pulumi.RegisterOutputType(RunDetailsPtrOutput{})
	pulumi.RegisterOutputType(RunDetailsResponseOutput{})
	pulumi.RegisterOutputType(SBOMReferenceNoteOutput{})
	pulumi.RegisterOutputType(SBOMReferenceNotePtrOutput{})
	pulumi.RegisterOutputType(SBOMReferenceNoteResponseOutput{})
	pulumi.RegisterOutputType(SBOMReferenceOccurrenceOutput{})
	pulumi.RegisterOutputType(SBOMReferenceOccurrencePtrOutput{})
	pulumi.RegisterOutputType(SBOMReferenceOccurrenceResponseOutput{})
	pulumi.RegisterOutputType(SBOMStatusResponseOutput{})
	pulumi.RegisterOutputType(SbomReferenceIntotoPayloadOutput{})
	pulumi.RegisterOutputType(SbomReferenceIntotoPayloadPtrOutput{})
	pulumi.RegisterOutputType(SbomReferenceIntotoPayloadResponseOutput{})
	pulumi.RegisterOutputType(SbomReferenceIntotoPredicateOutput{})
	pulumi.RegisterOutputType(SbomReferenceIntotoPredicatePtrOutput{})
	pulumi.RegisterOutputType(SbomReferenceIntotoPredicateResponseOutput{})
	pulumi.RegisterOutputType(SlsaBuilderOutput{})
	pulumi.RegisterOutputType(SlsaBuilderPtrOutput{})
	pulumi.RegisterOutputType(SlsaBuilderResponseOutput{})
	pulumi.RegisterOutputType(SlsaCompletenessOutput{})
	pulumi.RegisterOutputType(SlsaCompletenessPtrOutput{})
	pulumi.RegisterOutputType(SlsaCompletenessResponseOutput{})
	pulumi.RegisterOutputType(SlsaMetadataOutput{})
	pulumi.RegisterOutputType(SlsaMetadataPtrOutput{})
	pulumi.RegisterOutputType(SlsaMetadataResponseOutput{})
	pulumi.RegisterOutputType(SlsaProvenanceOutput{})
	pulumi.RegisterOutputType(SlsaProvenancePtrOutput{})
	pulumi.RegisterOutputType(SlsaProvenanceResponseOutput{})
	pulumi.RegisterOutputType(SlsaProvenanceV1Output{})
	pulumi.RegisterOutputType(SlsaProvenanceV1PtrOutput{})
	pulumi.RegisterOutputType(SlsaProvenanceV1ResponseOutput{})
	pulumi.RegisterOutputType(SlsaProvenanceZeroTwoOutput{})
	pulumi.RegisterOutputType(SlsaProvenanceZeroTwoPtrOutput{})
	pulumi.RegisterOutputType(SlsaProvenanceZeroTwoResponseOutput{})
	pulumi.RegisterOutputType(SlsaRecipeOutput{})
	pulumi.RegisterOutputType(SlsaRecipePtrOutput{})
	pulumi.RegisterOutputType(SlsaRecipeResponseOutput{})
	pulumi.RegisterOutputType(SourceOutput{})
	pulumi.RegisterOutputType(SourcePtrOutput{})
	pulumi.RegisterOutputType(SourceResponseOutput{})
	pulumi.RegisterOutputType(StatusOutput{})
	pulumi.RegisterOutputType(StatusPtrOutput{})
	pulumi.RegisterOutputType(StatusArrayOutput{})
	pulumi.RegisterOutputType(StatusResponseOutput{})
	pulumi.RegisterOutputType(StatusResponseArrayOutput{})
	pulumi.RegisterOutputType(StorageSourceOutput{})
	pulumi.RegisterOutputType(StorageSourcePtrOutput{})
	pulumi.RegisterOutputType(StorageSourceResponseOutput{})
	pulumi.RegisterOutputType(SubjectOutput{})
	pulumi.RegisterOutputType(SubjectArrayOutput{})
	pulumi.RegisterOutputType(SubjectResponseOutput{})
	pulumi.RegisterOutputType(SubjectResponseArrayOutput{})
	pulumi.RegisterOutputType(URIOutput{})
	pulumi.RegisterOutputType(URIPtrOutput{})
	pulumi.RegisterOutputType(URIArrayOutput{})
	pulumi.RegisterOutputType(URIResponseOutput{})
	pulumi.RegisterOutputType(URIResponseArrayOutput{})
	pulumi.RegisterOutputType(UpgradeDistributionOutput{})
	pulumi.RegisterOutputType(UpgradeDistributionPtrOutput{})
	pulumi.RegisterOutputType(UpgradeDistributionArrayOutput{})
	pulumi.RegisterOutputType(UpgradeDistributionResponseOutput{})
	pulumi.RegisterOutputType(UpgradeDistributionResponseArrayOutput{})
	pulumi.RegisterOutputType(UpgradeNoteOutput{})
	pulumi.RegisterOutputType(UpgradeNotePtrOutput{})
	pulumi.RegisterOutputType(UpgradeNoteResponseOutput{})
	pulumi.RegisterOutputType(UpgradeOccurrenceOutput{})
	pulumi.RegisterOutputType(UpgradeOccurrencePtrOutput{})
	pulumi.RegisterOutputType(UpgradeOccurrenceResponseOutput{})
	pulumi.RegisterOutputType(VersionOutput{})
	pulumi.RegisterOutputType(VersionPtrOutput{})
	pulumi.RegisterOutputType(VersionResponseOutput{})
	pulumi.RegisterOutputType(VexAssessmentOutput{})
	pulumi.RegisterOutputType(VexAssessmentPtrOutput{})
	pulumi.RegisterOutputType(VexAssessmentResponseOutput{})
	pulumi.RegisterOutputType(VulnerabilityAssessmentNoteOutput{})
	pulumi.RegisterOutputType(VulnerabilityAssessmentNotePtrOutput{})
	pulumi.RegisterOutputType(VulnerabilityAssessmentNoteResponseOutput{})
	pulumi.RegisterOutputType(VulnerabilityDetailsOutput{})
	pulumi.RegisterOutputType(VulnerabilityDetailsPtrOutput{})
	pulumi.RegisterOutputType(VulnerabilityDetailsResponseOutput{})
	pulumi.RegisterOutputType(VulnerabilityLocationOutput{})
	pulumi.RegisterOutputType(VulnerabilityLocationPtrOutput{})
	pulumi.RegisterOutputType(VulnerabilityLocationResponseOutput{})
	pulumi.RegisterOutputType(VulnerabilityTypeOutput{})
	pulumi.RegisterOutputType(VulnerabilityTypePtrOutput{})
	pulumi.RegisterOutputType(VulnerabilityTypeResponseOutput{})
}
