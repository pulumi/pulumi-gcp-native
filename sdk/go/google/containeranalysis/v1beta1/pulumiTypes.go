// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// An alias to a repo revision.
type AliasContext struct {
	// The alias kind.
	Kind *string `pulumi:"kind"`
	// The alias name.
	Name *string `pulumi:"name"`
}

// AliasContextInput is an input type that accepts AliasContextArgs and AliasContextOutput values.
// You can construct a concrete instance of `AliasContextInput` via:
//
//          AliasContextArgs{...}
type AliasContextInput interface {
	pulumi.Input

	ToAliasContextOutput() AliasContextOutput
	ToAliasContextOutputWithContext(context.Context) AliasContextOutput
}

// An alias to a repo revision.
type AliasContextArgs struct {
	// The alias kind.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// The alias name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (AliasContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AliasContext)(nil)).Elem()
}

func (i AliasContextArgs) ToAliasContextOutput() AliasContextOutput {
	return i.ToAliasContextOutputWithContext(context.Background())
}

func (i AliasContextArgs) ToAliasContextOutputWithContext(ctx context.Context) AliasContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AliasContextOutput)
}

func (i AliasContextArgs) ToAliasContextPtrOutput() AliasContextPtrOutput {
	return i.ToAliasContextPtrOutputWithContext(context.Background())
}

func (i AliasContextArgs) ToAliasContextPtrOutputWithContext(ctx context.Context) AliasContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AliasContextOutput).ToAliasContextPtrOutputWithContext(ctx)
}

// AliasContextPtrInput is an input type that accepts AliasContextArgs, AliasContextPtr and AliasContextPtrOutput values.
// You can construct a concrete instance of `AliasContextPtrInput` via:
//
//          AliasContextArgs{...}
//
//  or:
//
//          nil
type AliasContextPtrInput interface {
	pulumi.Input

	ToAliasContextPtrOutput() AliasContextPtrOutput
	ToAliasContextPtrOutputWithContext(context.Context) AliasContextPtrOutput
}

type aliasContextPtrType AliasContextArgs

func AliasContextPtr(v *AliasContextArgs) AliasContextPtrInput {
	return (*aliasContextPtrType)(v)
}

func (*aliasContextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AliasContext)(nil)).Elem()
}

func (i *aliasContextPtrType) ToAliasContextPtrOutput() AliasContextPtrOutput {
	return i.ToAliasContextPtrOutputWithContext(context.Background())
}

func (i *aliasContextPtrType) ToAliasContextPtrOutputWithContext(ctx context.Context) AliasContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AliasContextPtrOutput)
}

// An alias to a repo revision.
type AliasContextOutput struct{ *pulumi.OutputState }

func (AliasContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AliasContext)(nil)).Elem()
}

func (o AliasContextOutput) ToAliasContextOutput() AliasContextOutput {
	return o
}

func (o AliasContextOutput) ToAliasContextOutputWithContext(ctx context.Context) AliasContextOutput {
	return o
}

func (o AliasContextOutput) ToAliasContextPtrOutput() AliasContextPtrOutput {
	return o.ToAliasContextPtrOutputWithContext(context.Background())
}

func (o AliasContextOutput) ToAliasContextPtrOutputWithContext(ctx context.Context) AliasContextPtrOutput {
	return o.ApplyT(func(v AliasContext) *AliasContext {
		return &v
	}).(AliasContextPtrOutput)
}

// The alias kind.
func (o AliasContextOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AliasContext) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// The alias name.
func (o AliasContextOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AliasContext) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type AliasContextPtrOutput struct{ *pulumi.OutputState }

func (AliasContextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AliasContext)(nil)).Elem()
}

func (o AliasContextPtrOutput) ToAliasContextPtrOutput() AliasContextPtrOutput {
	return o
}

func (o AliasContextPtrOutput) ToAliasContextPtrOutputWithContext(ctx context.Context) AliasContextPtrOutput {
	return o
}

func (o AliasContextPtrOutput) Elem() AliasContextOutput {
	return o.ApplyT(func(v *AliasContext) AliasContext { return *v }).(AliasContextOutput)
}

// The alias kind.
func (o AliasContextPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AliasContext) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// The alias name.
func (o AliasContextPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AliasContext) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Artifact describes a build product.
type Artifact struct {
	// Hash or checksum value of a binary, or Docker Registry 2.0 digest of a container.
	Checksum *string `pulumi:"checksum"`
	// Artifact ID, if any; for container images, this will be a URL by digest like `gcr.io/projectID/imagename@sha256:123456`.
	Id *string `pulumi:"id"`
	// Related artifact names. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. Note that a single Artifact ID can have multiple names, for example if two tags are applied to one image.
	Names []string `pulumi:"names"`
}

// ArtifactInput is an input type that accepts ArtifactArgs and ArtifactOutput values.
// You can construct a concrete instance of `ArtifactInput` via:
//
//          ArtifactArgs{...}
type ArtifactInput interface {
	pulumi.Input

	ToArtifactOutput() ArtifactOutput
	ToArtifactOutputWithContext(context.Context) ArtifactOutput
}

// Artifact describes a build product.
type ArtifactArgs struct {
	// Hash or checksum value of a binary, or Docker Registry 2.0 digest of a container.
	Checksum pulumi.StringPtrInput `pulumi:"checksum"`
	// Artifact ID, if any; for container images, this will be a URL by digest like `gcr.io/projectID/imagename@sha256:123456`.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Related artifact names. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. Note that a single Artifact ID can have multiple names, for example if two tags are applied to one image.
	Names pulumi.StringArrayInput `pulumi:"names"`
}

func (ArtifactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Artifact)(nil)).Elem()
}

func (i ArtifactArgs) ToArtifactOutput() ArtifactOutput {
	return i.ToArtifactOutputWithContext(context.Background())
}

func (i ArtifactArgs) ToArtifactOutputWithContext(ctx context.Context) ArtifactOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactOutput)
}

// ArtifactArrayInput is an input type that accepts ArtifactArray and ArtifactArrayOutput values.
// You can construct a concrete instance of `ArtifactArrayInput` via:
//
//          ArtifactArray{ ArtifactArgs{...} }
type ArtifactArrayInput interface {
	pulumi.Input

	ToArtifactArrayOutput() ArtifactArrayOutput
	ToArtifactArrayOutputWithContext(context.Context) ArtifactArrayOutput
}

type ArtifactArray []ArtifactInput

func (ArtifactArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Artifact)(nil)).Elem()
}

func (i ArtifactArray) ToArtifactArrayOutput() ArtifactArrayOutput {
	return i.ToArtifactArrayOutputWithContext(context.Background())
}

func (i ArtifactArray) ToArtifactArrayOutputWithContext(ctx context.Context) ArtifactArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactArrayOutput)
}

// Artifact describes a build product.
type ArtifactOutput struct{ *pulumi.OutputState }

func (ArtifactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Artifact)(nil)).Elem()
}

func (o ArtifactOutput) ToArtifactOutput() ArtifactOutput {
	return o
}

func (o ArtifactOutput) ToArtifactOutputWithContext(ctx context.Context) ArtifactOutput {
	return o
}

// Hash or checksum value of a binary, or Docker Registry 2.0 digest of a container.
func (o ArtifactOutput) Checksum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Artifact) *string { return v.Checksum }).(pulumi.StringPtrOutput)
}

// Artifact ID, if any; for container images, this will be a URL by digest like `gcr.io/projectID/imagename@sha256:123456`.
func (o ArtifactOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Artifact) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Related artifact names. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. Note that a single Artifact ID can have multiple names, for example if two tags are applied to one image.
func (o ArtifactOutput) Names() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Artifact) []string { return v.Names }).(pulumi.StringArrayOutput)
}

type ArtifactArrayOutput struct{ *pulumi.OutputState }

func (ArtifactArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Artifact)(nil)).Elem()
}

func (o ArtifactArrayOutput) ToArtifactArrayOutput() ArtifactArrayOutput {
	return o
}

func (o ArtifactArrayOutput) ToArtifactArrayOutputWithContext(ctx context.Context) ArtifactArrayOutput {
	return o
}

func (o ArtifactArrayOutput) Index(i pulumi.IntInput) ArtifactOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Artifact {
		return vs[0].([]Artifact)[vs[1].(int)]
	}).(ArtifactOutput)
}

// Defines a hash object for use in Materials and Products.
type ArtifactHashes struct {
	Sha256 *string `pulumi:"sha256"`
}

// ArtifactHashesInput is an input type that accepts ArtifactHashesArgs and ArtifactHashesOutput values.
// You can construct a concrete instance of `ArtifactHashesInput` via:
//
//          ArtifactHashesArgs{...}
type ArtifactHashesInput interface {
	pulumi.Input

	ToArtifactHashesOutput() ArtifactHashesOutput
	ToArtifactHashesOutputWithContext(context.Context) ArtifactHashesOutput
}

// Defines a hash object for use in Materials and Products.
type ArtifactHashesArgs struct {
	Sha256 pulumi.StringPtrInput `pulumi:"sha256"`
}

func (ArtifactHashesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArtifactHashes)(nil)).Elem()
}

func (i ArtifactHashesArgs) ToArtifactHashesOutput() ArtifactHashesOutput {
	return i.ToArtifactHashesOutputWithContext(context.Background())
}

func (i ArtifactHashesArgs) ToArtifactHashesOutputWithContext(ctx context.Context) ArtifactHashesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactHashesOutput)
}

func (i ArtifactHashesArgs) ToArtifactHashesPtrOutput() ArtifactHashesPtrOutput {
	return i.ToArtifactHashesPtrOutputWithContext(context.Background())
}

func (i ArtifactHashesArgs) ToArtifactHashesPtrOutputWithContext(ctx context.Context) ArtifactHashesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactHashesOutput).ToArtifactHashesPtrOutputWithContext(ctx)
}

// ArtifactHashesPtrInput is an input type that accepts ArtifactHashesArgs, ArtifactHashesPtr and ArtifactHashesPtrOutput values.
// You can construct a concrete instance of `ArtifactHashesPtrInput` via:
//
//          ArtifactHashesArgs{...}
//
//  or:
//
//          nil
type ArtifactHashesPtrInput interface {
	pulumi.Input

	ToArtifactHashesPtrOutput() ArtifactHashesPtrOutput
	ToArtifactHashesPtrOutputWithContext(context.Context) ArtifactHashesPtrOutput
}

type artifactHashesPtrType ArtifactHashesArgs

func ArtifactHashesPtr(v *ArtifactHashesArgs) ArtifactHashesPtrInput {
	return (*artifactHashesPtrType)(v)
}

func (*artifactHashesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArtifactHashes)(nil)).Elem()
}

func (i *artifactHashesPtrType) ToArtifactHashesPtrOutput() ArtifactHashesPtrOutput {
	return i.ToArtifactHashesPtrOutputWithContext(context.Background())
}

func (i *artifactHashesPtrType) ToArtifactHashesPtrOutputWithContext(ctx context.Context) ArtifactHashesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactHashesPtrOutput)
}

// Defines a hash object for use in Materials and Products.
type ArtifactHashesOutput struct{ *pulumi.OutputState }

func (ArtifactHashesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArtifactHashes)(nil)).Elem()
}

func (o ArtifactHashesOutput) ToArtifactHashesOutput() ArtifactHashesOutput {
	return o
}

func (o ArtifactHashesOutput) ToArtifactHashesOutputWithContext(ctx context.Context) ArtifactHashesOutput {
	return o
}

func (o ArtifactHashesOutput) ToArtifactHashesPtrOutput() ArtifactHashesPtrOutput {
	return o.ToArtifactHashesPtrOutputWithContext(context.Background())
}

func (o ArtifactHashesOutput) ToArtifactHashesPtrOutputWithContext(ctx context.Context) ArtifactHashesPtrOutput {
	return o.ApplyT(func(v ArtifactHashes) *ArtifactHashes {
		return &v
	}).(ArtifactHashesPtrOutput)
}
func (o ArtifactHashesOutput) Sha256() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArtifactHashes) *string { return v.Sha256 }).(pulumi.StringPtrOutput)
}

type ArtifactHashesPtrOutput struct{ *pulumi.OutputState }

func (ArtifactHashesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArtifactHashes)(nil)).Elem()
}

func (o ArtifactHashesPtrOutput) ToArtifactHashesPtrOutput() ArtifactHashesPtrOutput {
	return o
}

func (o ArtifactHashesPtrOutput) ToArtifactHashesPtrOutputWithContext(ctx context.Context) ArtifactHashesPtrOutput {
	return o
}

func (o ArtifactHashesPtrOutput) Elem() ArtifactHashesOutput {
	return o.ApplyT(func(v *ArtifactHashes) ArtifactHashes { return *v }).(ArtifactHashesOutput)
}

func (o ArtifactHashesPtrOutput) Sha256() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArtifactHashes) *string {
		if v == nil {
			return nil
		}
		return v.Sha256
	}).(pulumi.StringPtrOutput)
}

// Defines an object to declare an in-toto artifact rule
type ArtifactRule struct {
	ArtifactRule []string `pulumi:"artifactRule"`
}

// ArtifactRuleInput is an input type that accepts ArtifactRuleArgs and ArtifactRuleOutput values.
// You can construct a concrete instance of `ArtifactRuleInput` via:
//
//          ArtifactRuleArgs{...}
type ArtifactRuleInput interface {
	pulumi.Input

	ToArtifactRuleOutput() ArtifactRuleOutput
	ToArtifactRuleOutputWithContext(context.Context) ArtifactRuleOutput
}

// Defines an object to declare an in-toto artifact rule
type ArtifactRuleArgs struct {
	ArtifactRule pulumi.StringArrayInput `pulumi:"artifactRule"`
}

func (ArtifactRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArtifactRule)(nil)).Elem()
}

func (i ArtifactRuleArgs) ToArtifactRuleOutput() ArtifactRuleOutput {
	return i.ToArtifactRuleOutputWithContext(context.Background())
}

func (i ArtifactRuleArgs) ToArtifactRuleOutputWithContext(ctx context.Context) ArtifactRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactRuleOutput)
}

// ArtifactRuleArrayInput is an input type that accepts ArtifactRuleArray and ArtifactRuleArrayOutput values.
// You can construct a concrete instance of `ArtifactRuleArrayInput` via:
//
//          ArtifactRuleArray{ ArtifactRuleArgs{...} }
type ArtifactRuleArrayInput interface {
	pulumi.Input

	ToArtifactRuleArrayOutput() ArtifactRuleArrayOutput
	ToArtifactRuleArrayOutputWithContext(context.Context) ArtifactRuleArrayOutput
}

type ArtifactRuleArray []ArtifactRuleInput

func (ArtifactRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ArtifactRule)(nil)).Elem()
}

func (i ArtifactRuleArray) ToArtifactRuleArrayOutput() ArtifactRuleArrayOutput {
	return i.ToArtifactRuleArrayOutputWithContext(context.Background())
}

func (i ArtifactRuleArray) ToArtifactRuleArrayOutputWithContext(ctx context.Context) ArtifactRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactRuleArrayOutput)
}

// Defines an object to declare an in-toto artifact rule
type ArtifactRuleOutput struct{ *pulumi.OutputState }

func (ArtifactRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArtifactRule)(nil)).Elem()
}

func (o ArtifactRuleOutput) ToArtifactRuleOutput() ArtifactRuleOutput {
	return o
}

func (o ArtifactRuleOutput) ToArtifactRuleOutputWithContext(ctx context.Context) ArtifactRuleOutput {
	return o
}

func (o ArtifactRuleOutput) ArtifactRule() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ArtifactRule) []string { return v.ArtifactRule }).(pulumi.StringArrayOutput)
}

type ArtifactRuleArrayOutput struct{ *pulumi.OutputState }

func (ArtifactRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ArtifactRule)(nil)).Elem()
}

func (o ArtifactRuleArrayOutput) ToArtifactRuleArrayOutput() ArtifactRuleArrayOutput {
	return o
}

func (o ArtifactRuleArrayOutput) ToArtifactRuleArrayOutputWithContext(ctx context.Context) ArtifactRuleArrayOutput {
	return o
}

func (o ArtifactRuleArrayOutput) Index(i pulumi.IntInput) ArtifactRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ArtifactRule {
		return vs[0].([]ArtifactRule)[vs[1].(int)]
	}).(ArtifactRuleOutput)
}

// Occurrence that represents a single "attestation". The authenticity of an attestation can be verified using the attached signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish trust. In this circumstance, the authority to which this attestation is attached is primarily useful for look-up (how to find this attestation if you already know the authority and artifact to be verified) and intent (which authority was this attestation intended to sign for).
type Attestation struct {
	GenericSignedAttestation *GenericSignedAttestation `pulumi:"genericSignedAttestation"`
	// A PGP signed attestation.
	PgpSignedAttestation *PgpSignedAttestation `pulumi:"pgpSignedAttestation"`
}

// AttestationInput is an input type that accepts AttestationArgs and AttestationOutput values.
// You can construct a concrete instance of `AttestationInput` via:
//
//          AttestationArgs{...}
type AttestationInput interface {
	pulumi.Input

	ToAttestationOutput() AttestationOutput
	ToAttestationOutputWithContext(context.Context) AttestationOutput
}

// Occurrence that represents a single "attestation". The authenticity of an attestation can be verified using the attached signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish trust. In this circumstance, the authority to which this attestation is attached is primarily useful for look-up (how to find this attestation if you already know the authority and artifact to be verified) and intent (which authority was this attestation intended to sign for).
type AttestationArgs struct {
	GenericSignedAttestation GenericSignedAttestationPtrInput `pulumi:"genericSignedAttestation"`
	// A PGP signed attestation.
	PgpSignedAttestation PgpSignedAttestationPtrInput `pulumi:"pgpSignedAttestation"`
}

func (AttestationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Attestation)(nil)).Elem()
}

func (i AttestationArgs) ToAttestationOutput() AttestationOutput {
	return i.ToAttestationOutputWithContext(context.Background())
}

func (i AttestationArgs) ToAttestationOutputWithContext(ctx context.Context) AttestationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttestationOutput)
}

func (i AttestationArgs) ToAttestationPtrOutput() AttestationPtrOutput {
	return i.ToAttestationPtrOutputWithContext(context.Background())
}

func (i AttestationArgs) ToAttestationPtrOutputWithContext(ctx context.Context) AttestationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttestationOutput).ToAttestationPtrOutputWithContext(ctx)
}

// AttestationPtrInput is an input type that accepts AttestationArgs, AttestationPtr and AttestationPtrOutput values.
// You can construct a concrete instance of `AttestationPtrInput` via:
//
//          AttestationArgs{...}
//
//  or:
//
//          nil
type AttestationPtrInput interface {
	pulumi.Input

	ToAttestationPtrOutput() AttestationPtrOutput
	ToAttestationPtrOutputWithContext(context.Context) AttestationPtrOutput
}

type attestationPtrType AttestationArgs

func AttestationPtr(v *AttestationArgs) AttestationPtrInput {
	return (*attestationPtrType)(v)
}

func (*attestationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Attestation)(nil)).Elem()
}

func (i *attestationPtrType) ToAttestationPtrOutput() AttestationPtrOutput {
	return i.ToAttestationPtrOutputWithContext(context.Background())
}

func (i *attestationPtrType) ToAttestationPtrOutputWithContext(ctx context.Context) AttestationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttestationPtrOutput)
}

// Occurrence that represents a single "attestation". The authenticity of an attestation can be verified using the attached signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish trust. In this circumstance, the authority to which this attestation is attached is primarily useful for look-up (how to find this attestation if you already know the authority and artifact to be verified) and intent (which authority was this attestation intended to sign for).
type AttestationOutput struct{ *pulumi.OutputState }

func (AttestationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Attestation)(nil)).Elem()
}

func (o AttestationOutput) ToAttestationOutput() AttestationOutput {
	return o
}

func (o AttestationOutput) ToAttestationOutputWithContext(ctx context.Context) AttestationOutput {
	return o
}

func (o AttestationOutput) ToAttestationPtrOutput() AttestationPtrOutput {
	return o.ToAttestationPtrOutputWithContext(context.Background())
}

func (o AttestationOutput) ToAttestationPtrOutputWithContext(ctx context.Context) AttestationPtrOutput {
	return o.ApplyT(func(v Attestation) *Attestation {
		return &v
	}).(AttestationPtrOutput)
}
func (o AttestationOutput) GenericSignedAttestation() GenericSignedAttestationPtrOutput {
	return o.ApplyT(func(v Attestation) *GenericSignedAttestation { return v.GenericSignedAttestation }).(GenericSignedAttestationPtrOutput)
}

// A PGP signed attestation.
func (o AttestationOutput) PgpSignedAttestation() PgpSignedAttestationPtrOutput {
	return o.ApplyT(func(v Attestation) *PgpSignedAttestation { return v.PgpSignedAttestation }).(PgpSignedAttestationPtrOutput)
}

type AttestationPtrOutput struct{ *pulumi.OutputState }

func (AttestationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Attestation)(nil)).Elem()
}

func (o AttestationPtrOutput) ToAttestationPtrOutput() AttestationPtrOutput {
	return o
}

func (o AttestationPtrOutput) ToAttestationPtrOutputWithContext(ctx context.Context) AttestationPtrOutput {
	return o
}

func (o AttestationPtrOutput) Elem() AttestationOutput {
	return o.ApplyT(func(v *Attestation) Attestation { return *v }).(AttestationOutput)
}

func (o AttestationPtrOutput) GenericSignedAttestation() GenericSignedAttestationPtrOutput {
	return o.ApplyT(func(v *Attestation) *GenericSignedAttestation {
		if v == nil {
			return nil
		}
		return v.GenericSignedAttestation
	}).(GenericSignedAttestationPtrOutput)
}

// A PGP signed attestation.
func (o AttestationPtrOutput) PgpSignedAttestation() PgpSignedAttestationPtrOutput {
	return o.ApplyT(func(v *Attestation) *PgpSignedAttestation {
		if v == nil {
			return nil
		}
		return v.PgpSignedAttestation
	}).(PgpSignedAttestationPtrOutput)
}

// Note kind that represents a logical attestation "role" or "authority". For example, an organization might have one `Authority` for "QA" and one for "build". This note is intended to act strictly as a grouping mechanism for the attached occurrences (Attestations). This grouping mechanism also provides a security boundary, since IAM ACLs gate the ability for a principle to attach an occurrence to a given note. It also provides a single point of lookup to find all attached attestation occurrences, even if they don't all live in the same project.
type Authority struct {
	// Hint hints at the purpose of the attestation authority.
	Hint *Hint `pulumi:"hint"`
}

// AuthorityInput is an input type that accepts AuthorityArgs and AuthorityOutput values.
// You can construct a concrete instance of `AuthorityInput` via:
//
//          AuthorityArgs{...}
type AuthorityInput interface {
	pulumi.Input

	ToAuthorityOutput() AuthorityOutput
	ToAuthorityOutputWithContext(context.Context) AuthorityOutput
}

// Note kind that represents a logical attestation "role" or "authority". For example, an organization might have one `Authority` for "QA" and one for "build". This note is intended to act strictly as a grouping mechanism for the attached occurrences (Attestations). This grouping mechanism also provides a security boundary, since IAM ACLs gate the ability for a principle to attach an occurrence to a given note. It also provides a single point of lookup to find all attached attestation occurrences, even if they don't all live in the same project.
type AuthorityArgs struct {
	// Hint hints at the purpose of the attestation authority.
	Hint HintPtrInput `pulumi:"hint"`
}

func (AuthorityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Authority)(nil)).Elem()
}

func (i AuthorityArgs) ToAuthorityOutput() AuthorityOutput {
	return i.ToAuthorityOutputWithContext(context.Background())
}

func (i AuthorityArgs) ToAuthorityOutputWithContext(ctx context.Context) AuthorityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorityOutput)
}

func (i AuthorityArgs) ToAuthorityPtrOutput() AuthorityPtrOutput {
	return i.ToAuthorityPtrOutputWithContext(context.Background())
}

func (i AuthorityArgs) ToAuthorityPtrOutputWithContext(ctx context.Context) AuthorityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorityOutput).ToAuthorityPtrOutputWithContext(ctx)
}

// AuthorityPtrInput is an input type that accepts AuthorityArgs, AuthorityPtr and AuthorityPtrOutput values.
// You can construct a concrete instance of `AuthorityPtrInput` via:
//
//          AuthorityArgs{...}
//
//  or:
//
//          nil
type AuthorityPtrInput interface {
	pulumi.Input

	ToAuthorityPtrOutput() AuthorityPtrOutput
	ToAuthorityPtrOutputWithContext(context.Context) AuthorityPtrOutput
}

type authorityPtrType AuthorityArgs

func AuthorityPtr(v *AuthorityArgs) AuthorityPtrInput {
	return (*authorityPtrType)(v)
}

func (*authorityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Authority)(nil)).Elem()
}

func (i *authorityPtrType) ToAuthorityPtrOutput() AuthorityPtrOutput {
	return i.ToAuthorityPtrOutputWithContext(context.Background())
}

func (i *authorityPtrType) ToAuthorityPtrOutputWithContext(ctx context.Context) AuthorityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorityPtrOutput)
}

// Note kind that represents a logical attestation "role" or "authority". For example, an organization might have one `Authority` for "QA" and one for "build". This note is intended to act strictly as a grouping mechanism for the attached occurrences (Attestations). This grouping mechanism also provides a security boundary, since IAM ACLs gate the ability for a principle to attach an occurrence to a given note. It also provides a single point of lookup to find all attached attestation occurrences, even if they don't all live in the same project.
type AuthorityOutput struct{ *pulumi.OutputState }

func (AuthorityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Authority)(nil)).Elem()
}

func (o AuthorityOutput) ToAuthorityOutput() AuthorityOutput {
	return o
}

func (o AuthorityOutput) ToAuthorityOutputWithContext(ctx context.Context) AuthorityOutput {
	return o
}

func (o AuthorityOutput) ToAuthorityPtrOutput() AuthorityPtrOutput {
	return o.ToAuthorityPtrOutputWithContext(context.Background())
}

func (o AuthorityOutput) ToAuthorityPtrOutputWithContext(ctx context.Context) AuthorityPtrOutput {
	return o.ApplyT(func(v Authority) *Authority {
		return &v
	}).(AuthorityPtrOutput)
}

// Hint hints at the purpose of the attestation authority.
func (o AuthorityOutput) Hint() HintPtrOutput {
	return o.ApplyT(func(v Authority) *Hint { return v.Hint }).(HintPtrOutput)
}

type AuthorityPtrOutput struct{ *pulumi.OutputState }

func (AuthorityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Authority)(nil)).Elem()
}

func (o AuthorityPtrOutput) ToAuthorityPtrOutput() AuthorityPtrOutput {
	return o
}

func (o AuthorityPtrOutput) ToAuthorityPtrOutputWithContext(ctx context.Context) AuthorityPtrOutput {
	return o
}

func (o AuthorityPtrOutput) Elem() AuthorityOutput {
	return o.ApplyT(func(v *Authority) Authority { return *v }).(AuthorityOutput)
}

// Hint hints at the purpose of the attestation authority.
func (o AuthorityPtrOutput) Hint() HintPtrOutput {
	return o.ApplyT(func(v *Authority) *Hint {
		if v == nil {
			return nil
		}
		return v.Hint
	}).(HintPtrOutput)
}

// Basis describes the base image portion (Note) of the DockerImage relationship. Linked occurrences are derived from this or an equivalent image via: FROM Or an equivalent reference, e.g. a tag of the resource_url.
type Basis struct {
	// Required. Immutable. The fingerprint of the base image.
	Fingerprint *Fingerprint `pulumi:"fingerprint"`
	// Required. Immutable. The resource_url for the resource representing the basis of associated occurrence images.
	ResourceUrl *string `pulumi:"resourceUrl"`
}

// BasisInput is an input type that accepts BasisArgs and BasisOutput values.
// You can construct a concrete instance of `BasisInput` via:
//
//          BasisArgs{...}
type BasisInput interface {
	pulumi.Input

	ToBasisOutput() BasisOutput
	ToBasisOutputWithContext(context.Context) BasisOutput
}

// Basis describes the base image portion (Note) of the DockerImage relationship. Linked occurrences are derived from this or an equivalent image via: FROM Or an equivalent reference, e.g. a tag of the resource_url.
type BasisArgs struct {
	// Required. Immutable. The fingerprint of the base image.
	Fingerprint FingerprintPtrInput `pulumi:"fingerprint"`
	// Required. Immutable. The resource_url for the resource representing the basis of associated occurrence images.
	ResourceUrl pulumi.StringPtrInput `pulumi:"resourceUrl"`
}

func (BasisArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Basis)(nil)).Elem()
}

func (i BasisArgs) ToBasisOutput() BasisOutput {
	return i.ToBasisOutputWithContext(context.Background())
}

func (i BasisArgs) ToBasisOutputWithContext(ctx context.Context) BasisOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BasisOutput)
}

func (i BasisArgs) ToBasisPtrOutput() BasisPtrOutput {
	return i.ToBasisPtrOutputWithContext(context.Background())
}

func (i BasisArgs) ToBasisPtrOutputWithContext(ctx context.Context) BasisPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BasisOutput).ToBasisPtrOutputWithContext(ctx)
}

// BasisPtrInput is an input type that accepts BasisArgs, BasisPtr and BasisPtrOutput values.
// You can construct a concrete instance of `BasisPtrInput` via:
//
//          BasisArgs{...}
//
//  or:
//
//          nil
type BasisPtrInput interface {
	pulumi.Input

	ToBasisPtrOutput() BasisPtrOutput
	ToBasisPtrOutputWithContext(context.Context) BasisPtrOutput
}

type basisPtrType BasisArgs

func BasisPtr(v *BasisArgs) BasisPtrInput {
	return (*basisPtrType)(v)
}

func (*basisPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Basis)(nil)).Elem()
}

func (i *basisPtrType) ToBasisPtrOutput() BasisPtrOutput {
	return i.ToBasisPtrOutputWithContext(context.Background())
}

func (i *basisPtrType) ToBasisPtrOutputWithContext(ctx context.Context) BasisPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BasisPtrOutput)
}

// Basis describes the base image portion (Note) of the DockerImage relationship. Linked occurrences are derived from this or an equivalent image via: FROM Or an equivalent reference, e.g. a tag of the resource_url.
type BasisOutput struct{ *pulumi.OutputState }

func (BasisOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Basis)(nil)).Elem()
}

func (o BasisOutput) ToBasisOutput() BasisOutput {
	return o
}

func (o BasisOutput) ToBasisOutputWithContext(ctx context.Context) BasisOutput {
	return o
}

func (o BasisOutput) ToBasisPtrOutput() BasisPtrOutput {
	return o.ToBasisPtrOutputWithContext(context.Background())
}

func (o BasisOutput) ToBasisPtrOutputWithContext(ctx context.Context) BasisPtrOutput {
	return o.ApplyT(func(v Basis) *Basis {
		return &v
	}).(BasisPtrOutput)
}

// Required. Immutable. The fingerprint of the base image.
func (o BasisOutput) Fingerprint() FingerprintPtrOutput {
	return o.ApplyT(func(v Basis) *Fingerprint { return v.Fingerprint }).(FingerprintPtrOutput)
}

// Required. Immutable. The resource_url for the resource representing the basis of associated occurrence images.
func (o BasisOutput) ResourceUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Basis) *string { return v.ResourceUrl }).(pulumi.StringPtrOutput)
}

type BasisPtrOutput struct{ *pulumi.OutputState }

func (BasisPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Basis)(nil)).Elem()
}

func (o BasisPtrOutput) ToBasisPtrOutput() BasisPtrOutput {
	return o
}

func (o BasisPtrOutput) ToBasisPtrOutputWithContext(ctx context.Context) BasisPtrOutput {
	return o
}

func (o BasisPtrOutput) Elem() BasisOutput {
	return o.ApplyT(func(v *Basis) Basis { return *v }).(BasisOutput)
}

// Required. Immutable. The fingerprint of the base image.
func (o BasisPtrOutput) Fingerprint() FingerprintPtrOutput {
	return o.ApplyT(func(v *Basis) *Fingerprint {
		if v == nil {
			return nil
		}
		return v.Fingerprint
	}).(FingerprintPtrOutput)
}

// Required. Immutable. The resource_url for the resource representing the basis of associated occurrence images.
func (o BasisPtrOutput) ResourceUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Basis) *string {
		if v == nil {
			return nil
		}
		return v.ResourceUrl
	}).(pulumi.StringPtrOutput)
}

// Associates `members` with a `role`.
type Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members []string `pulumi:"members"`
	// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//          BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates `members` with a `role`.
type BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//          BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

// Associates `members` with a `role`.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

// Note holding the version of the provider's builder and the signature of the provenance message in the build details occurrence.
type Build struct {
	// Required. Immutable. Version of the builder which produced this build.
	BuilderVersion *string `pulumi:"builderVersion"`
	// Signature of the build in occurrences pointing to this build note containing build details.
	Signature *BuildSignature `pulumi:"signature"`
}

// BuildInput is an input type that accepts BuildArgs and BuildOutput values.
// You can construct a concrete instance of `BuildInput` via:
//
//          BuildArgs{...}
type BuildInput interface {
	pulumi.Input

	ToBuildOutput() BuildOutput
	ToBuildOutputWithContext(context.Context) BuildOutput
}

// Note holding the version of the provider's builder and the signature of the provenance message in the build details occurrence.
type BuildArgs struct {
	// Required. Immutable. Version of the builder which produced this build.
	BuilderVersion pulumi.StringPtrInput `pulumi:"builderVersion"`
	// Signature of the build in occurrences pointing to this build note containing build details.
	Signature BuildSignaturePtrInput `pulumi:"signature"`
}

func (BuildArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Build)(nil)).Elem()
}

func (i BuildArgs) ToBuildOutput() BuildOutput {
	return i.ToBuildOutputWithContext(context.Background())
}

func (i BuildArgs) ToBuildOutputWithContext(ctx context.Context) BuildOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildOutput)
}

func (i BuildArgs) ToBuildPtrOutput() BuildPtrOutput {
	return i.ToBuildPtrOutputWithContext(context.Background())
}

func (i BuildArgs) ToBuildPtrOutputWithContext(ctx context.Context) BuildPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildOutput).ToBuildPtrOutputWithContext(ctx)
}

// BuildPtrInput is an input type that accepts BuildArgs, BuildPtr and BuildPtrOutput values.
// You can construct a concrete instance of `BuildPtrInput` via:
//
//          BuildArgs{...}
//
//  or:
//
//          nil
type BuildPtrInput interface {
	pulumi.Input

	ToBuildPtrOutput() BuildPtrOutput
	ToBuildPtrOutputWithContext(context.Context) BuildPtrOutput
}

type buildPtrType BuildArgs

func BuildPtr(v *BuildArgs) BuildPtrInput {
	return (*buildPtrType)(v)
}

func (*buildPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Build)(nil)).Elem()
}

func (i *buildPtrType) ToBuildPtrOutput() BuildPtrOutput {
	return i.ToBuildPtrOutputWithContext(context.Background())
}

func (i *buildPtrType) ToBuildPtrOutputWithContext(ctx context.Context) BuildPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildPtrOutput)
}

// Note holding the version of the provider's builder and the signature of the provenance message in the build details occurrence.
type BuildOutput struct{ *pulumi.OutputState }

func (BuildOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Build)(nil)).Elem()
}

func (o BuildOutput) ToBuildOutput() BuildOutput {
	return o
}

func (o BuildOutput) ToBuildOutputWithContext(ctx context.Context) BuildOutput {
	return o
}

func (o BuildOutput) ToBuildPtrOutput() BuildPtrOutput {
	return o.ToBuildPtrOutputWithContext(context.Background())
}

func (o BuildOutput) ToBuildPtrOutputWithContext(ctx context.Context) BuildPtrOutput {
	return o.ApplyT(func(v Build) *Build {
		return &v
	}).(BuildPtrOutput)
}

// Required. Immutable. Version of the builder which produced this build.
func (o BuildOutput) BuilderVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Build) *string { return v.BuilderVersion }).(pulumi.StringPtrOutput)
}

// Signature of the build in occurrences pointing to this build note containing build details.
func (o BuildOutput) Signature() BuildSignaturePtrOutput {
	return o.ApplyT(func(v Build) *BuildSignature { return v.Signature }).(BuildSignaturePtrOutput)
}

type BuildPtrOutput struct{ *pulumi.OutputState }

func (BuildPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Build)(nil)).Elem()
}

func (o BuildPtrOutput) ToBuildPtrOutput() BuildPtrOutput {
	return o
}

func (o BuildPtrOutput) ToBuildPtrOutputWithContext(ctx context.Context) BuildPtrOutput {
	return o
}

func (o BuildPtrOutput) Elem() BuildOutput {
	return o.ApplyT(func(v *Build) Build { return *v }).(BuildOutput)
}

// Required. Immutable. Version of the builder which produced this build.
func (o BuildPtrOutput) BuilderVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Build) *string {
		if v == nil {
			return nil
		}
		return v.BuilderVersion
	}).(pulumi.StringPtrOutput)
}

// Signature of the build in occurrences pointing to this build note containing build details.
func (o BuildPtrOutput) Signature() BuildSignaturePtrOutput {
	return o.ApplyT(func(v *Build) *BuildSignature {
		if v == nil {
			return nil
		}
		return v.Signature
	}).(BuildSignaturePtrOutput)
}

// Provenance of a build. Contains all information needed to verify the full details about the build from source to completion.
type BuildProvenance struct {
	// Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.
	BuildOptions map[string]string `pulumi:"buildOptions"`
	// Version string of the builder at the time this build was executed.
	BuilderVersion *string `pulumi:"builderVersion"`
	// Output of the build.
	BuiltArtifacts []Artifact `pulumi:"builtArtifacts"`
	// Commands requested by the build.
	Commands []Command `pulumi:"commands"`
	// Time at which the build was created.
	CreateTime *string `pulumi:"createTime"`
	// E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.
	Creator *string `pulumi:"creator"`
	// Time at which execution of the build was finished.
	EndTime *string `pulumi:"endTime"`
	// Required. Unique identifier of the build.
	Id *string `pulumi:"id"`
	// URI where any logs for this provenance were written.
	LogsUri *string `pulumi:"logsUri"`
	// ID of the project.
	ProjectId *string `pulumi:"projectId"`
	// Details of the Source input to the build.
	SourceProvenance *Source `pulumi:"sourceProvenance"`
	// Time at which execution of the build was started.
	StartTime *string `pulumi:"startTime"`
	// Trigger identifier if the build was triggered automatically; empty if not.
	TriggerId *string `pulumi:"triggerId"`
}

// BuildProvenanceInput is an input type that accepts BuildProvenanceArgs and BuildProvenanceOutput values.
// You can construct a concrete instance of `BuildProvenanceInput` via:
//
//          BuildProvenanceArgs{...}
type BuildProvenanceInput interface {
	pulumi.Input

	ToBuildProvenanceOutput() BuildProvenanceOutput
	ToBuildProvenanceOutputWithContext(context.Context) BuildProvenanceOutput
}

// Provenance of a build. Contains all information needed to verify the full details about the build from source to completion.
type BuildProvenanceArgs struct {
	// Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.
	BuildOptions pulumi.StringMapInput `pulumi:"buildOptions"`
	// Version string of the builder at the time this build was executed.
	BuilderVersion pulumi.StringPtrInput `pulumi:"builderVersion"`
	// Output of the build.
	BuiltArtifacts ArtifactArrayInput `pulumi:"builtArtifacts"`
	// Commands requested by the build.
	Commands CommandArrayInput `pulumi:"commands"`
	// Time at which the build was created.
	CreateTime pulumi.StringPtrInput `pulumi:"createTime"`
	// E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.
	Creator pulumi.StringPtrInput `pulumi:"creator"`
	// Time at which execution of the build was finished.
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// Required. Unique identifier of the build.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// URI where any logs for this provenance were written.
	LogsUri pulumi.StringPtrInput `pulumi:"logsUri"`
	// ID of the project.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// Details of the Source input to the build.
	SourceProvenance SourcePtrInput `pulumi:"sourceProvenance"`
	// Time at which execution of the build was started.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
	// Trigger identifier if the build was triggered automatically; empty if not.
	TriggerId pulumi.StringPtrInput `pulumi:"triggerId"`
}

func (BuildProvenanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildProvenance)(nil)).Elem()
}

func (i BuildProvenanceArgs) ToBuildProvenanceOutput() BuildProvenanceOutput {
	return i.ToBuildProvenanceOutputWithContext(context.Background())
}

func (i BuildProvenanceArgs) ToBuildProvenanceOutputWithContext(ctx context.Context) BuildProvenanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildProvenanceOutput)
}

func (i BuildProvenanceArgs) ToBuildProvenancePtrOutput() BuildProvenancePtrOutput {
	return i.ToBuildProvenancePtrOutputWithContext(context.Background())
}

func (i BuildProvenanceArgs) ToBuildProvenancePtrOutputWithContext(ctx context.Context) BuildProvenancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildProvenanceOutput).ToBuildProvenancePtrOutputWithContext(ctx)
}

// BuildProvenancePtrInput is an input type that accepts BuildProvenanceArgs, BuildProvenancePtr and BuildProvenancePtrOutput values.
// You can construct a concrete instance of `BuildProvenancePtrInput` via:
//
//          BuildProvenanceArgs{...}
//
//  or:
//
//          nil
type BuildProvenancePtrInput interface {
	pulumi.Input

	ToBuildProvenancePtrOutput() BuildProvenancePtrOutput
	ToBuildProvenancePtrOutputWithContext(context.Context) BuildProvenancePtrOutput
}

type buildProvenancePtrType BuildProvenanceArgs

func BuildProvenancePtr(v *BuildProvenanceArgs) BuildProvenancePtrInput {
	return (*buildProvenancePtrType)(v)
}

func (*buildProvenancePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildProvenance)(nil)).Elem()
}

func (i *buildProvenancePtrType) ToBuildProvenancePtrOutput() BuildProvenancePtrOutput {
	return i.ToBuildProvenancePtrOutputWithContext(context.Background())
}

func (i *buildProvenancePtrType) ToBuildProvenancePtrOutputWithContext(ctx context.Context) BuildProvenancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildProvenancePtrOutput)
}

// Provenance of a build. Contains all information needed to verify the full details about the build from source to completion.
type BuildProvenanceOutput struct{ *pulumi.OutputState }

func (BuildProvenanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildProvenance)(nil)).Elem()
}

func (o BuildProvenanceOutput) ToBuildProvenanceOutput() BuildProvenanceOutput {
	return o
}

func (o BuildProvenanceOutput) ToBuildProvenanceOutputWithContext(ctx context.Context) BuildProvenanceOutput {
	return o
}

func (o BuildProvenanceOutput) ToBuildProvenancePtrOutput() BuildProvenancePtrOutput {
	return o.ToBuildProvenancePtrOutputWithContext(context.Background())
}

func (o BuildProvenanceOutput) ToBuildProvenancePtrOutputWithContext(ctx context.Context) BuildProvenancePtrOutput {
	return o.ApplyT(func(v BuildProvenance) *BuildProvenance {
		return &v
	}).(BuildProvenancePtrOutput)
}

// Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.
func (o BuildProvenanceOutput) BuildOptions() pulumi.StringMapOutput {
	return o.ApplyT(func(v BuildProvenance) map[string]string { return v.BuildOptions }).(pulumi.StringMapOutput)
}

// Version string of the builder at the time this build was executed.
func (o BuildProvenanceOutput) BuilderVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildProvenance) *string { return v.BuilderVersion }).(pulumi.StringPtrOutput)
}

// Output of the build.
func (o BuildProvenanceOutput) BuiltArtifacts() ArtifactArrayOutput {
	return o.ApplyT(func(v BuildProvenance) []Artifact { return v.BuiltArtifacts }).(ArtifactArrayOutput)
}

// Commands requested by the build.
func (o BuildProvenanceOutput) Commands() CommandArrayOutput {
	return o.ApplyT(func(v BuildProvenance) []Command { return v.Commands }).(CommandArrayOutput)
}

// Time at which the build was created.
func (o BuildProvenanceOutput) CreateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildProvenance) *string { return v.CreateTime }).(pulumi.StringPtrOutput)
}

// E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.
func (o BuildProvenanceOutput) Creator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildProvenance) *string { return v.Creator }).(pulumi.StringPtrOutput)
}

// Time at which execution of the build was finished.
func (o BuildProvenanceOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildProvenance) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// Required. Unique identifier of the build.
func (o BuildProvenanceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildProvenance) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// URI where any logs for this provenance were written.
func (o BuildProvenanceOutput) LogsUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildProvenance) *string { return v.LogsUri }).(pulumi.StringPtrOutput)
}

// ID of the project.
func (o BuildProvenanceOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildProvenance) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Details of the Source input to the build.
func (o BuildProvenanceOutput) SourceProvenance() SourcePtrOutput {
	return o.ApplyT(func(v BuildProvenance) *Source { return v.SourceProvenance }).(SourcePtrOutput)
}

// Time at which execution of the build was started.
func (o BuildProvenanceOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildProvenance) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// Trigger identifier if the build was triggered automatically; empty if not.
func (o BuildProvenanceOutput) TriggerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildProvenance) *string { return v.TriggerId }).(pulumi.StringPtrOutput)
}

type BuildProvenancePtrOutput struct{ *pulumi.OutputState }

func (BuildProvenancePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildProvenance)(nil)).Elem()
}

func (o BuildProvenancePtrOutput) ToBuildProvenancePtrOutput() BuildProvenancePtrOutput {
	return o
}

func (o BuildProvenancePtrOutput) ToBuildProvenancePtrOutputWithContext(ctx context.Context) BuildProvenancePtrOutput {
	return o
}

func (o BuildProvenancePtrOutput) Elem() BuildProvenanceOutput {
	return o.ApplyT(func(v *BuildProvenance) BuildProvenance { return *v }).(BuildProvenanceOutput)
}

// Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.
func (o BuildProvenancePtrOutput) BuildOptions() pulumi.StringMapOutput {
	return o.ApplyT(func(v *BuildProvenance) map[string]string {
		if v == nil {
			return nil
		}
		return v.BuildOptions
	}).(pulumi.StringMapOutput)
}

// Version string of the builder at the time this build was executed.
func (o BuildProvenancePtrOutput) BuilderVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildProvenance) *string {
		if v == nil {
			return nil
		}
		return v.BuilderVersion
	}).(pulumi.StringPtrOutput)
}

// Output of the build.
func (o BuildProvenancePtrOutput) BuiltArtifacts() ArtifactArrayOutput {
	return o.ApplyT(func(v *BuildProvenance) []Artifact {
		if v == nil {
			return nil
		}
		return v.BuiltArtifacts
	}).(ArtifactArrayOutput)
}

// Commands requested by the build.
func (o BuildProvenancePtrOutput) Commands() CommandArrayOutput {
	return o.ApplyT(func(v *BuildProvenance) []Command {
		if v == nil {
			return nil
		}
		return v.Commands
	}).(CommandArrayOutput)
}

// Time at which the build was created.
func (o BuildProvenancePtrOutput) CreateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildProvenance) *string {
		if v == nil {
			return nil
		}
		return v.CreateTime
	}).(pulumi.StringPtrOutput)
}

// E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.
func (o BuildProvenancePtrOutput) Creator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildProvenance) *string {
		if v == nil {
			return nil
		}
		return v.Creator
	}).(pulumi.StringPtrOutput)
}

// Time at which execution of the build was finished.
func (o BuildProvenancePtrOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildProvenance) *string {
		if v == nil {
			return nil
		}
		return v.EndTime
	}).(pulumi.StringPtrOutput)
}

// Required. Unique identifier of the build.
func (o BuildProvenancePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildProvenance) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// URI where any logs for this provenance were written.
func (o BuildProvenancePtrOutput) LogsUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildProvenance) *string {
		if v == nil {
			return nil
		}
		return v.LogsUri
	}).(pulumi.StringPtrOutput)
}

// ID of the project.
func (o BuildProvenancePtrOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildProvenance) *string {
		if v == nil {
			return nil
		}
		return v.ProjectId
	}).(pulumi.StringPtrOutput)
}

// Details of the Source input to the build.
func (o BuildProvenancePtrOutput) SourceProvenance() SourcePtrOutput {
	return o.ApplyT(func(v *BuildProvenance) *Source {
		if v == nil {
			return nil
		}
		return v.SourceProvenance
	}).(SourcePtrOutput)
}

// Time at which execution of the build was started.
func (o BuildProvenancePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildProvenance) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Trigger identifier if the build was triggered automatically; empty if not.
func (o BuildProvenancePtrOutput) TriggerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildProvenance) *string {
		if v == nil {
			return nil
		}
		return v.TriggerId
	}).(pulumi.StringPtrOutput)
}

// Message encapsulating the signature of the verified build.
type BuildSignature struct {
	// An ID for the key used to sign. This could be either an ID for the key stored in `public_key` (such as the ID or fingerprint for a PGP key, or the CN for a cert), or a reference to an external key (such as a reference to a key in Cloud Key Management Service).
	KeyId *string `pulumi:"keyId"`
	// The type of the key, either stored in `public_key` or referenced in `key_id`.
	KeyType *string `pulumi:"keyType"`
	// Public key of the builder which can be used to verify that the related findings are valid and unchanged. If `key_type` is empty, this defaults to PEM encoded public keys. This field may be empty if `key_id` references an external key. For Cloud Build based signatures, this is a PEM encoded public key. To verify the Cloud Build signature, place the contents of this field into a file (public.pem). The signature field is base64-decoded into its binary representation in signature.bin, and the provenance bytes from `BuildDetails` are base64-decoded into a binary representation in signed.bin. OpenSSL can then verify the signature: `openssl sha256 -verify public.pem -signature signature.bin signed.bin`
	PublicKey *string `pulumi:"publicKey"`
	// Required. Signature of the related `BuildProvenance`. In JSON, this is base-64 encoded.
	Signature *string `pulumi:"signature"`
}

// BuildSignatureInput is an input type that accepts BuildSignatureArgs and BuildSignatureOutput values.
// You can construct a concrete instance of `BuildSignatureInput` via:
//
//          BuildSignatureArgs{...}
type BuildSignatureInput interface {
	pulumi.Input

	ToBuildSignatureOutput() BuildSignatureOutput
	ToBuildSignatureOutputWithContext(context.Context) BuildSignatureOutput
}

// Message encapsulating the signature of the verified build.
type BuildSignatureArgs struct {
	// An ID for the key used to sign. This could be either an ID for the key stored in `public_key` (such as the ID or fingerprint for a PGP key, or the CN for a cert), or a reference to an external key (such as a reference to a key in Cloud Key Management Service).
	KeyId pulumi.StringPtrInput `pulumi:"keyId"`
	// The type of the key, either stored in `public_key` or referenced in `key_id`.
	KeyType pulumi.StringPtrInput `pulumi:"keyType"`
	// Public key of the builder which can be used to verify that the related findings are valid and unchanged. If `key_type` is empty, this defaults to PEM encoded public keys. This field may be empty if `key_id` references an external key. For Cloud Build based signatures, this is a PEM encoded public key. To verify the Cloud Build signature, place the contents of this field into a file (public.pem). The signature field is base64-decoded into its binary representation in signature.bin, and the provenance bytes from `BuildDetails` are base64-decoded into a binary representation in signed.bin. OpenSSL can then verify the signature: `openssl sha256 -verify public.pem -signature signature.bin signed.bin`
	PublicKey pulumi.StringPtrInput `pulumi:"publicKey"`
	// Required. Signature of the related `BuildProvenance`. In JSON, this is base-64 encoded.
	Signature pulumi.StringPtrInput `pulumi:"signature"`
}

func (BuildSignatureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildSignature)(nil)).Elem()
}

func (i BuildSignatureArgs) ToBuildSignatureOutput() BuildSignatureOutput {
	return i.ToBuildSignatureOutputWithContext(context.Background())
}

func (i BuildSignatureArgs) ToBuildSignatureOutputWithContext(ctx context.Context) BuildSignatureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildSignatureOutput)
}

func (i BuildSignatureArgs) ToBuildSignaturePtrOutput() BuildSignaturePtrOutput {
	return i.ToBuildSignaturePtrOutputWithContext(context.Background())
}

func (i BuildSignatureArgs) ToBuildSignaturePtrOutputWithContext(ctx context.Context) BuildSignaturePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildSignatureOutput).ToBuildSignaturePtrOutputWithContext(ctx)
}

// BuildSignaturePtrInput is an input type that accepts BuildSignatureArgs, BuildSignaturePtr and BuildSignaturePtrOutput values.
// You can construct a concrete instance of `BuildSignaturePtrInput` via:
//
//          BuildSignatureArgs{...}
//
//  or:
//
//          nil
type BuildSignaturePtrInput interface {
	pulumi.Input

	ToBuildSignaturePtrOutput() BuildSignaturePtrOutput
	ToBuildSignaturePtrOutputWithContext(context.Context) BuildSignaturePtrOutput
}

type buildSignaturePtrType BuildSignatureArgs

func BuildSignaturePtr(v *BuildSignatureArgs) BuildSignaturePtrInput {
	return (*buildSignaturePtrType)(v)
}

func (*buildSignaturePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildSignature)(nil)).Elem()
}

func (i *buildSignaturePtrType) ToBuildSignaturePtrOutput() BuildSignaturePtrOutput {
	return i.ToBuildSignaturePtrOutputWithContext(context.Background())
}

func (i *buildSignaturePtrType) ToBuildSignaturePtrOutputWithContext(ctx context.Context) BuildSignaturePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildSignaturePtrOutput)
}

// Message encapsulating the signature of the verified build.
type BuildSignatureOutput struct{ *pulumi.OutputState }

func (BuildSignatureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildSignature)(nil)).Elem()
}

func (o BuildSignatureOutput) ToBuildSignatureOutput() BuildSignatureOutput {
	return o
}

func (o BuildSignatureOutput) ToBuildSignatureOutputWithContext(ctx context.Context) BuildSignatureOutput {
	return o
}

func (o BuildSignatureOutput) ToBuildSignaturePtrOutput() BuildSignaturePtrOutput {
	return o.ToBuildSignaturePtrOutputWithContext(context.Background())
}

func (o BuildSignatureOutput) ToBuildSignaturePtrOutputWithContext(ctx context.Context) BuildSignaturePtrOutput {
	return o.ApplyT(func(v BuildSignature) *BuildSignature {
		return &v
	}).(BuildSignaturePtrOutput)
}

// An ID for the key used to sign. This could be either an ID for the key stored in `public_key` (such as the ID or fingerprint for a PGP key, or the CN for a cert), or a reference to an external key (such as a reference to a key in Cloud Key Management Service).
func (o BuildSignatureOutput) KeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildSignature) *string { return v.KeyId }).(pulumi.StringPtrOutput)
}

// The type of the key, either stored in `public_key` or referenced in `key_id`.
func (o BuildSignatureOutput) KeyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildSignature) *string { return v.KeyType }).(pulumi.StringPtrOutput)
}

// Public key of the builder which can be used to verify that the related findings are valid and unchanged. If `key_type` is empty, this defaults to PEM encoded public keys. This field may be empty if `key_id` references an external key. For Cloud Build based signatures, this is a PEM encoded public key. To verify the Cloud Build signature, place the contents of this field into a file (public.pem). The signature field is base64-decoded into its binary representation in signature.bin, and the provenance bytes from `BuildDetails` are base64-decoded into a binary representation in signed.bin. OpenSSL can then verify the signature: `openssl sha256 -verify public.pem -signature signature.bin signed.bin`
func (o BuildSignatureOutput) PublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildSignature) *string { return v.PublicKey }).(pulumi.StringPtrOutput)
}

// Required. Signature of the related `BuildProvenance`. In JSON, this is base-64 encoded.
func (o BuildSignatureOutput) Signature() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildSignature) *string { return v.Signature }).(pulumi.StringPtrOutput)
}

type BuildSignaturePtrOutput struct{ *pulumi.OutputState }

func (BuildSignaturePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildSignature)(nil)).Elem()
}

func (o BuildSignaturePtrOutput) ToBuildSignaturePtrOutput() BuildSignaturePtrOutput {
	return o
}

func (o BuildSignaturePtrOutput) ToBuildSignaturePtrOutputWithContext(ctx context.Context) BuildSignaturePtrOutput {
	return o
}

func (o BuildSignaturePtrOutput) Elem() BuildSignatureOutput {
	return o.ApplyT(func(v *BuildSignature) BuildSignature { return *v }).(BuildSignatureOutput)
}

// An ID for the key used to sign. This could be either an ID for the key stored in `public_key` (such as the ID or fingerprint for a PGP key, or the CN for a cert), or a reference to an external key (such as a reference to a key in Cloud Key Management Service).
func (o BuildSignaturePtrOutput) KeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildSignature) *string {
		if v == nil {
			return nil
		}
		return v.KeyId
	}).(pulumi.StringPtrOutput)
}

// The type of the key, either stored in `public_key` or referenced in `key_id`.
func (o BuildSignaturePtrOutput) KeyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildSignature) *string {
		if v == nil {
			return nil
		}
		return v.KeyType
	}).(pulumi.StringPtrOutput)
}

// Public key of the builder which can be used to verify that the related findings are valid and unchanged. If `key_type` is empty, this defaults to PEM encoded public keys. This field may be empty if `key_id` references an external key. For Cloud Build based signatures, this is a PEM encoded public key. To verify the Cloud Build signature, place the contents of this field into a file (public.pem). The signature field is base64-decoded into its binary representation in signature.bin, and the provenance bytes from `BuildDetails` are base64-decoded into a binary representation in signed.bin. OpenSSL can then verify the signature: `openssl sha256 -verify public.pem -signature signature.bin signed.bin`
func (o BuildSignaturePtrOutput) PublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildSignature) *string {
		if v == nil {
			return nil
		}
		return v.PublicKey
	}).(pulumi.StringPtrOutput)
}

// Required. Signature of the related `BuildProvenance`. In JSON, this is base-64 encoded.
func (o BuildSignaturePtrOutput) Signature() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildSignature) *string {
		if v == nil {
			return nil
		}
		return v.Signature
	}).(pulumi.StringPtrOutput)
}

// Defines an object for the byproducts field in in-toto links. The suggested fields are "stderr", "stdout", and "return-value".
type ByProducts struct {
	CustomValues map[string]string `pulumi:"customValues"`
}

// ByProductsInput is an input type that accepts ByProductsArgs and ByProductsOutput values.
// You can construct a concrete instance of `ByProductsInput` via:
//
//          ByProductsArgs{...}
type ByProductsInput interface {
	pulumi.Input

	ToByProductsOutput() ByProductsOutput
	ToByProductsOutputWithContext(context.Context) ByProductsOutput
}

// Defines an object for the byproducts field in in-toto links. The suggested fields are "stderr", "stdout", and "return-value".
type ByProductsArgs struct {
	CustomValues pulumi.StringMapInput `pulumi:"customValues"`
}

func (ByProductsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ByProducts)(nil)).Elem()
}

func (i ByProductsArgs) ToByProductsOutput() ByProductsOutput {
	return i.ToByProductsOutputWithContext(context.Background())
}

func (i ByProductsArgs) ToByProductsOutputWithContext(ctx context.Context) ByProductsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ByProductsOutput)
}

func (i ByProductsArgs) ToByProductsPtrOutput() ByProductsPtrOutput {
	return i.ToByProductsPtrOutputWithContext(context.Background())
}

func (i ByProductsArgs) ToByProductsPtrOutputWithContext(ctx context.Context) ByProductsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ByProductsOutput).ToByProductsPtrOutputWithContext(ctx)
}

// ByProductsPtrInput is an input type that accepts ByProductsArgs, ByProductsPtr and ByProductsPtrOutput values.
// You can construct a concrete instance of `ByProductsPtrInput` via:
//
//          ByProductsArgs{...}
//
//  or:
//
//          nil
type ByProductsPtrInput interface {
	pulumi.Input

	ToByProductsPtrOutput() ByProductsPtrOutput
	ToByProductsPtrOutputWithContext(context.Context) ByProductsPtrOutput
}

type byProductsPtrType ByProductsArgs

func ByProductsPtr(v *ByProductsArgs) ByProductsPtrInput {
	return (*byProductsPtrType)(v)
}

func (*byProductsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ByProducts)(nil)).Elem()
}

func (i *byProductsPtrType) ToByProductsPtrOutput() ByProductsPtrOutput {
	return i.ToByProductsPtrOutputWithContext(context.Background())
}

func (i *byProductsPtrType) ToByProductsPtrOutputWithContext(ctx context.Context) ByProductsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ByProductsPtrOutput)
}

// Defines an object for the byproducts field in in-toto links. The suggested fields are "stderr", "stdout", and "return-value".
type ByProductsOutput struct{ *pulumi.OutputState }

func (ByProductsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ByProducts)(nil)).Elem()
}

func (o ByProductsOutput) ToByProductsOutput() ByProductsOutput {
	return o
}

func (o ByProductsOutput) ToByProductsOutputWithContext(ctx context.Context) ByProductsOutput {
	return o
}

func (o ByProductsOutput) ToByProductsPtrOutput() ByProductsPtrOutput {
	return o.ToByProductsPtrOutputWithContext(context.Background())
}

func (o ByProductsOutput) ToByProductsPtrOutputWithContext(ctx context.Context) ByProductsPtrOutput {
	return o.ApplyT(func(v ByProducts) *ByProducts {
		return &v
	}).(ByProductsPtrOutput)
}
func (o ByProductsOutput) CustomValues() pulumi.StringMapOutput {
	return o.ApplyT(func(v ByProducts) map[string]string { return v.CustomValues }).(pulumi.StringMapOutput)
}

type ByProductsPtrOutput struct{ *pulumi.OutputState }

func (ByProductsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ByProducts)(nil)).Elem()
}

func (o ByProductsPtrOutput) ToByProductsPtrOutput() ByProductsPtrOutput {
	return o
}

func (o ByProductsPtrOutput) ToByProductsPtrOutputWithContext(ctx context.Context) ByProductsPtrOutput {
	return o
}

func (o ByProductsPtrOutput) Elem() ByProductsOutput {
	return o.ApplyT(func(v *ByProducts) ByProducts { return *v }).(ByProductsOutput)
}

func (o ByProductsPtrOutput) CustomValues() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ByProducts) map[string]string {
		if v == nil {
			return nil
		}
		return v.CustomValues
	}).(pulumi.StringMapOutput)
}

// Common Vulnerability Scoring System version 3. For details, see https://www.first.org/cvss/specification-document
type CVSSv3 struct {
	AttackComplexity *string `pulumi:"attackComplexity"`
	// Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments.
	AttackVector       *string `pulumi:"attackVector"`
	AvailabilityImpact *string `pulumi:"availabilityImpact"`
	// The base score is a function of the base metric scores.
	BaseScore             *float64 `pulumi:"baseScore"`
	ConfidentialityImpact *string  `pulumi:"confidentialityImpact"`
	ExploitabilityScore   *float64 `pulumi:"exploitabilityScore"`
	ImpactScore           *float64 `pulumi:"impactScore"`
	IntegrityImpact       *string  `pulumi:"integrityImpact"`
	PrivilegesRequired    *string  `pulumi:"privilegesRequired"`
	Scope                 *string  `pulumi:"scope"`
	UserInteraction       *string  `pulumi:"userInteraction"`
}

// CVSSv3Input is an input type that accepts CVSSv3Args and CVSSv3Output values.
// You can construct a concrete instance of `CVSSv3Input` via:
//
//          CVSSv3Args{...}
type CVSSv3Input interface {
	pulumi.Input

	ToCVSSv3Output() CVSSv3Output
	ToCVSSv3OutputWithContext(context.Context) CVSSv3Output
}

// Common Vulnerability Scoring System version 3. For details, see https://www.first.org/cvss/specification-document
type CVSSv3Args struct {
	AttackComplexity pulumi.StringPtrInput `pulumi:"attackComplexity"`
	// Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments.
	AttackVector       pulumi.StringPtrInput `pulumi:"attackVector"`
	AvailabilityImpact pulumi.StringPtrInput `pulumi:"availabilityImpact"`
	// The base score is a function of the base metric scores.
	BaseScore             pulumi.Float64PtrInput `pulumi:"baseScore"`
	ConfidentialityImpact pulumi.StringPtrInput  `pulumi:"confidentialityImpact"`
	ExploitabilityScore   pulumi.Float64PtrInput `pulumi:"exploitabilityScore"`
	ImpactScore           pulumi.Float64PtrInput `pulumi:"impactScore"`
	IntegrityImpact       pulumi.StringPtrInput  `pulumi:"integrityImpact"`
	PrivilegesRequired    pulumi.StringPtrInput  `pulumi:"privilegesRequired"`
	Scope                 pulumi.StringPtrInput  `pulumi:"scope"`
	UserInteraction       pulumi.StringPtrInput  `pulumi:"userInteraction"`
}

func (CVSSv3Args) ElementType() reflect.Type {
	return reflect.TypeOf((*CVSSv3)(nil)).Elem()
}

func (i CVSSv3Args) ToCVSSv3Output() CVSSv3Output {
	return i.ToCVSSv3OutputWithContext(context.Background())
}

func (i CVSSv3Args) ToCVSSv3OutputWithContext(ctx context.Context) CVSSv3Output {
	return pulumi.ToOutputWithContext(ctx, i).(CVSSv3Output)
}

func (i CVSSv3Args) ToCVSSv3PtrOutput() CVSSv3PtrOutput {
	return i.ToCVSSv3PtrOutputWithContext(context.Background())
}

func (i CVSSv3Args) ToCVSSv3PtrOutputWithContext(ctx context.Context) CVSSv3PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CVSSv3Output).ToCVSSv3PtrOutputWithContext(ctx)
}

// CVSSv3PtrInput is an input type that accepts CVSSv3Args, CVSSv3Ptr and CVSSv3PtrOutput values.
// You can construct a concrete instance of `CVSSv3PtrInput` via:
//
//          CVSSv3Args{...}
//
//  or:
//
//          nil
type CVSSv3PtrInput interface {
	pulumi.Input

	ToCVSSv3PtrOutput() CVSSv3PtrOutput
	ToCVSSv3PtrOutputWithContext(context.Context) CVSSv3PtrOutput
}

type cvssv3PtrType CVSSv3Args

func CVSSv3Ptr(v *CVSSv3Args) CVSSv3PtrInput {
	return (*cvssv3PtrType)(v)
}

func (*cvssv3PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CVSSv3)(nil)).Elem()
}

func (i *cvssv3PtrType) ToCVSSv3PtrOutput() CVSSv3PtrOutput {
	return i.ToCVSSv3PtrOutputWithContext(context.Background())
}

func (i *cvssv3PtrType) ToCVSSv3PtrOutputWithContext(ctx context.Context) CVSSv3PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CVSSv3PtrOutput)
}

// Common Vulnerability Scoring System version 3. For details, see https://www.first.org/cvss/specification-document
type CVSSv3Output struct{ *pulumi.OutputState }

func (CVSSv3Output) ElementType() reflect.Type {
	return reflect.TypeOf((*CVSSv3)(nil)).Elem()
}

func (o CVSSv3Output) ToCVSSv3Output() CVSSv3Output {
	return o
}

func (o CVSSv3Output) ToCVSSv3OutputWithContext(ctx context.Context) CVSSv3Output {
	return o
}

func (o CVSSv3Output) ToCVSSv3PtrOutput() CVSSv3PtrOutput {
	return o.ToCVSSv3PtrOutputWithContext(context.Background())
}

func (o CVSSv3Output) ToCVSSv3PtrOutputWithContext(ctx context.Context) CVSSv3PtrOutput {
	return o.ApplyT(func(v CVSSv3) *CVSSv3 {
		return &v
	}).(CVSSv3PtrOutput)
}
func (o CVSSv3Output) AttackComplexity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CVSSv3) *string { return v.AttackComplexity }).(pulumi.StringPtrOutput)
}

// Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments.
func (o CVSSv3Output) AttackVector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CVSSv3) *string { return v.AttackVector }).(pulumi.StringPtrOutput)
}

func (o CVSSv3Output) AvailabilityImpact() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CVSSv3) *string { return v.AvailabilityImpact }).(pulumi.StringPtrOutput)
}

// The base score is a function of the base metric scores.
func (o CVSSv3Output) BaseScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v CVSSv3) *float64 { return v.BaseScore }).(pulumi.Float64PtrOutput)
}

func (o CVSSv3Output) ConfidentialityImpact() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CVSSv3) *string { return v.ConfidentialityImpact }).(pulumi.StringPtrOutput)
}

func (o CVSSv3Output) ExploitabilityScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v CVSSv3) *float64 { return v.ExploitabilityScore }).(pulumi.Float64PtrOutput)
}

func (o CVSSv3Output) ImpactScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v CVSSv3) *float64 { return v.ImpactScore }).(pulumi.Float64PtrOutput)
}

func (o CVSSv3Output) IntegrityImpact() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CVSSv3) *string { return v.IntegrityImpact }).(pulumi.StringPtrOutput)
}

func (o CVSSv3Output) PrivilegesRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CVSSv3) *string { return v.PrivilegesRequired }).(pulumi.StringPtrOutput)
}

func (o CVSSv3Output) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CVSSv3) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

func (o CVSSv3Output) UserInteraction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CVSSv3) *string { return v.UserInteraction }).(pulumi.StringPtrOutput)
}

type CVSSv3PtrOutput struct{ *pulumi.OutputState }

func (CVSSv3PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CVSSv3)(nil)).Elem()
}

func (o CVSSv3PtrOutput) ToCVSSv3PtrOutput() CVSSv3PtrOutput {
	return o
}

func (o CVSSv3PtrOutput) ToCVSSv3PtrOutputWithContext(ctx context.Context) CVSSv3PtrOutput {
	return o
}

func (o CVSSv3PtrOutput) Elem() CVSSv3Output {
	return o.ApplyT(func(v *CVSSv3) CVSSv3 { return *v }).(CVSSv3Output)
}

func (o CVSSv3PtrOutput) AttackComplexity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CVSSv3) *string {
		if v == nil {
			return nil
		}
		return v.AttackComplexity
	}).(pulumi.StringPtrOutput)
}

// Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments.
func (o CVSSv3PtrOutput) AttackVector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CVSSv3) *string {
		if v == nil {
			return nil
		}
		return v.AttackVector
	}).(pulumi.StringPtrOutput)
}

func (o CVSSv3PtrOutput) AvailabilityImpact() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CVSSv3) *string {
		if v == nil {
			return nil
		}
		return v.AvailabilityImpact
	}).(pulumi.StringPtrOutput)
}

// The base score is a function of the base metric scores.
func (o CVSSv3PtrOutput) BaseScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *CVSSv3) *float64 {
		if v == nil {
			return nil
		}
		return v.BaseScore
	}).(pulumi.Float64PtrOutput)
}

func (o CVSSv3PtrOutput) ConfidentialityImpact() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CVSSv3) *string {
		if v == nil {
			return nil
		}
		return v.ConfidentialityImpact
	}).(pulumi.StringPtrOutput)
}

func (o CVSSv3PtrOutput) ExploitabilityScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *CVSSv3) *float64 {
		if v == nil {
			return nil
		}
		return v.ExploitabilityScore
	}).(pulumi.Float64PtrOutput)
}

func (o CVSSv3PtrOutput) ImpactScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *CVSSv3) *float64 {
		if v == nil {
			return nil
		}
		return v.ImpactScore
	}).(pulumi.Float64PtrOutput)
}

func (o CVSSv3PtrOutput) IntegrityImpact() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CVSSv3) *string {
		if v == nil {
			return nil
		}
		return v.IntegrityImpact
	}).(pulumi.StringPtrOutput)
}

func (o CVSSv3PtrOutput) PrivilegesRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CVSSv3) *string {
		if v == nil {
			return nil
		}
		return v.PrivilegesRequired
	}).(pulumi.StringPtrOutput)
}

func (o CVSSv3PtrOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CVSSv3) *string {
		if v == nil {
			return nil
		}
		return v.Scope
	}).(pulumi.StringPtrOutput)
}

func (o CVSSv3PtrOutput) UserInteraction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CVSSv3) *string {
		if v == nil {
			return nil
		}
		return v.UserInteraction
	}).(pulumi.StringPtrOutput)
}

// A CloudRepoSourceContext denotes a particular revision in a Google Cloud Source Repo.
type CloudRepoSourceContext struct {
	// An alias, which may be a branch or tag.
	AliasContext *AliasContext `pulumi:"aliasContext"`
	// The ID of the repo.
	RepoId *RepoId `pulumi:"repoId"`
	// A revision ID.
	RevisionId *string `pulumi:"revisionId"`
}

// CloudRepoSourceContextInput is an input type that accepts CloudRepoSourceContextArgs and CloudRepoSourceContextOutput values.
// You can construct a concrete instance of `CloudRepoSourceContextInput` via:
//
//          CloudRepoSourceContextArgs{...}
type CloudRepoSourceContextInput interface {
	pulumi.Input

	ToCloudRepoSourceContextOutput() CloudRepoSourceContextOutput
	ToCloudRepoSourceContextOutputWithContext(context.Context) CloudRepoSourceContextOutput
}

// A CloudRepoSourceContext denotes a particular revision in a Google Cloud Source Repo.
type CloudRepoSourceContextArgs struct {
	// An alias, which may be a branch or tag.
	AliasContext AliasContextPtrInput `pulumi:"aliasContext"`
	// The ID of the repo.
	RepoId RepoIdPtrInput `pulumi:"repoId"`
	// A revision ID.
	RevisionId pulumi.StringPtrInput `pulumi:"revisionId"`
}

func (CloudRepoSourceContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudRepoSourceContext)(nil)).Elem()
}

func (i CloudRepoSourceContextArgs) ToCloudRepoSourceContextOutput() CloudRepoSourceContextOutput {
	return i.ToCloudRepoSourceContextOutputWithContext(context.Background())
}

func (i CloudRepoSourceContextArgs) ToCloudRepoSourceContextOutputWithContext(ctx context.Context) CloudRepoSourceContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudRepoSourceContextOutput)
}

func (i CloudRepoSourceContextArgs) ToCloudRepoSourceContextPtrOutput() CloudRepoSourceContextPtrOutput {
	return i.ToCloudRepoSourceContextPtrOutputWithContext(context.Background())
}

func (i CloudRepoSourceContextArgs) ToCloudRepoSourceContextPtrOutputWithContext(ctx context.Context) CloudRepoSourceContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudRepoSourceContextOutput).ToCloudRepoSourceContextPtrOutputWithContext(ctx)
}

// CloudRepoSourceContextPtrInput is an input type that accepts CloudRepoSourceContextArgs, CloudRepoSourceContextPtr and CloudRepoSourceContextPtrOutput values.
// You can construct a concrete instance of `CloudRepoSourceContextPtrInput` via:
//
//          CloudRepoSourceContextArgs{...}
//
//  or:
//
//          nil
type CloudRepoSourceContextPtrInput interface {
	pulumi.Input

	ToCloudRepoSourceContextPtrOutput() CloudRepoSourceContextPtrOutput
	ToCloudRepoSourceContextPtrOutputWithContext(context.Context) CloudRepoSourceContextPtrOutput
}

type cloudRepoSourceContextPtrType CloudRepoSourceContextArgs

func CloudRepoSourceContextPtr(v *CloudRepoSourceContextArgs) CloudRepoSourceContextPtrInput {
	return (*cloudRepoSourceContextPtrType)(v)
}

func (*cloudRepoSourceContextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudRepoSourceContext)(nil)).Elem()
}

func (i *cloudRepoSourceContextPtrType) ToCloudRepoSourceContextPtrOutput() CloudRepoSourceContextPtrOutput {
	return i.ToCloudRepoSourceContextPtrOutputWithContext(context.Background())
}

func (i *cloudRepoSourceContextPtrType) ToCloudRepoSourceContextPtrOutputWithContext(ctx context.Context) CloudRepoSourceContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudRepoSourceContextPtrOutput)
}

// A CloudRepoSourceContext denotes a particular revision in a Google Cloud Source Repo.
type CloudRepoSourceContextOutput struct{ *pulumi.OutputState }

func (CloudRepoSourceContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudRepoSourceContext)(nil)).Elem()
}

func (o CloudRepoSourceContextOutput) ToCloudRepoSourceContextOutput() CloudRepoSourceContextOutput {
	return o
}

func (o CloudRepoSourceContextOutput) ToCloudRepoSourceContextOutputWithContext(ctx context.Context) CloudRepoSourceContextOutput {
	return o
}

func (o CloudRepoSourceContextOutput) ToCloudRepoSourceContextPtrOutput() CloudRepoSourceContextPtrOutput {
	return o.ToCloudRepoSourceContextPtrOutputWithContext(context.Background())
}

func (o CloudRepoSourceContextOutput) ToCloudRepoSourceContextPtrOutputWithContext(ctx context.Context) CloudRepoSourceContextPtrOutput {
	return o.ApplyT(func(v CloudRepoSourceContext) *CloudRepoSourceContext {
		return &v
	}).(CloudRepoSourceContextPtrOutput)
}

// An alias, which may be a branch or tag.
func (o CloudRepoSourceContextOutput) AliasContext() AliasContextPtrOutput {
	return o.ApplyT(func(v CloudRepoSourceContext) *AliasContext { return v.AliasContext }).(AliasContextPtrOutput)
}

// The ID of the repo.
func (o CloudRepoSourceContextOutput) RepoId() RepoIdPtrOutput {
	return o.ApplyT(func(v CloudRepoSourceContext) *RepoId { return v.RepoId }).(RepoIdPtrOutput)
}

// A revision ID.
func (o CloudRepoSourceContextOutput) RevisionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CloudRepoSourceContext) *string { return v.RevisionId }).(pulumi.StringPtrOutput)
}

type CloudRepoSourceContextPtrOutput struct{ *pulumi.OutputState }

func (CloudRepoSourceContextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudRepoSourceContext)(nil)).Elem()
}

func (o CloudRepoSourceContextPtrOutput) ToCloudRepoSourceContextPtrOutput() CloudRepoSourceContextPtrOutput {
	return o
}

func (o CloudRepoSourceContextPtrOutput) ToCloudRepoSourceContextPtrOutputWithContext(ctx context.Context) CloudRepoSourceContextPtrOutput {
	return o
}

func (o CloudRepoSourceContextPtrOutput) Elem() CloudRepoSourceContextOutput {
	return o.ApplyT(func(v *CloudRepoSourceContext) CloudRepoSourceContext { return *v }).(CloudRepoSourceContextOutput)
}

// An alias, which may be a branch or tag.
func (o CloudRepoSourceContextPtrOutput) AliasContext() AliasContextPtrOutput {
	return o.ApplyT(func(v *CloudRepoSourceContext) *AliasContext {
		if v == nil {
			return nil
		}
		return v.AliasContext
	}).(AliasContextPtrOutput)
}

// The ID of the repo.
func (o CloudRepoSourceContextPtrOutput) RepoId() RepoIdPtrOutput {
	return o.ApplyT(func(v *CloudRepoSourceContext) *RepoId {
		if v == nil {
			return nil
		}
		return v.RepoId
	}).(RepoIdPtrOutput)
}

// A revision ID.
func (o CloudRepoSourceContextPtrOutput) RevisionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudRepoSourceContext) *string {
		if v == nil {
			return nil
		}
		return v.RevisionId
	}).(pulumi.StringPtrOutput)
}

// Command describes a step performed as part of the build pipeline.
type Command struct {
	// Command-line arguments used when executing this command.
	Args []string `pulumi:"args"`
	// Working directory (relative to project source root) used when running this command.
	Dir *string `pulumi:"dir"`
	// Environment variables set before running this command.
	Env []string `pulumi:"env"`
	// Optional unique identifier for this command, used in wait_for to reference this command as a dependency.
	Id *string `pulumi:"id"`
	// Required. Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`.
	Name *string `pulumi:"name"`
	// The ID(s) of the command(s) that this command depends on.
	WaitFor []string `pulumi:"waitFor"`
}

// CommandInput is an input type that accepts CommandArgs and CommandOutput values.
// You can construct a concrete instance of `CommandInput` via:
//
//          CommandArgs{...}
type CommandInput interface {
	pulumi.Input

	ToCommandOutput() CommandOutput
	ToCommandOutputWithContext(context.Context) CommandOutput
}

// Command describes a step performed as part of the build pipeline.
type CommandArgs struct {
	// Command-line arguments used when executing this command.
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Working directory (relative to project source root) used when running this command.
	Dir pulumi.StringPtrInput `pulumi:"dir"`
	// Environment variables set before running this command.
	Env pulumi.StringArrayInput `pulumi:"env"`
	// Optional unique identifier for this command, used in wait_for to reference this command as a dependency.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Required. Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The ID(s) of the command(s) that this command depends on.
	WaitFor pulumi.StringArrayInput `pulumi:"waitFor"`
}

func (CommandArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Command)(nil)).Elem()
}

func (i CommandArgs) ToCommandOutput() CommandOutput {
	return i.ToCommandOutputWithContext(context.Background())
}

func (i CommandArgs) ToCommandOutputWithContext(ctx context.Context) CommandOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandOutput)
}

// CommandArrayInput is an input type that accepts CommandArray and CommandArrayOutput values.
// You can construct a concrete instance of `CommandArrayInput` via:
//
//          CommandArray{ CommandArgs{...} }
type CommandArrayInput interface {
	pulumi.Input

	ToCommandArrayOutput() CommandArrayOutput
	ToCommandArrayOutputWithContext(context.Context) CommandArrayOutput
}

type CommandArray []CommandInput

func (CommandArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Command)(nil)).Elem()
}

func (i CommandArray) ToCommandArrayOutput() CommandArrayOutput {
	return i.ToCommandArrayOutputWithContext(context.Background())
}

func (i CommandArray) ToCommandArrayOutputWithContext(ctx context.Context) CommandArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandArrayOutput)
}

// Command describes a step performed as part of the build pipeline.
type CommandOutput struct{ *pulumi.OutputState }

func (CommandOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Command)(nil)).Elem()
}

func (o CommandOutput) ToCommandOutput() CommandOutput {
	return o
}

func (o CommandOutput) ToCommandOutputWithContext(ctx context.Context) CommandOutput {
	return o
}

// Command-line arguments used when executing this command.
func (o CommandOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Command) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Working directory (relative to project source root) used when running this command.
func (o CommandOutput) Dir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Command) *string { return v.Dir }).(pulumi.StringPtrOutput)
}

// Environment variables set before running this command.
func (o CommandOutput) Env() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Command) []string { return v.Env }).(pulumi.StringArrayOutput)
}

// Optional unique identifier for this command, used in wait_for to reference this command as a dependency.
func (o CommandOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Command) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Required. Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`.
func (o CommandOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Command) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The ID(s) of the command(s) that this command depends on.
func (o CommandOutput) WaitFor() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Command) []string { return v.WaitFor }).(pulumi.StringArrayOutput)
}

type CommandArrayOutput struct{ *pulumi.OutputState }

func (CommandArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Command)(nil)).Elem()
}

func (o CommandArrayOutput) ToCommandArrayOutput() CommandArrayOutput {
	return o
}

func (o CommandArrayOutput) ToCommandArrayOutputWithContext(ctx context.Context) CommandArrayOutput {
	return o
}

func (o CommandArrayOutput) Index(i pulumi.IntInput) CommandOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Command {
		return vs[0].([]Command)[vs[1].(int)]
	}).(CommandOutput)
}

// An artifact that can be deployed in some runtime.
type Deployable struct {
	// Required. Resource URI for the artifact being deployed.
	ResourceUri []string `pulumi:"resourceUri"`
}

// DeployableInput is an input type that accepts DeployableArgs and DeployableOutput values.
// You can construct a concrete instance of `DeployableInput` via:
//
//          DeployableArgs{...}
type DeployableInput interface {
	pulumi.Input

	ToDeployableOutput() DeployableOutput
	ToDeployableOutputWithContext(context.Context) DeployableOutput
}

// An artifact that can be deployed in some runtime.
type DeployableArgs struct {
	// Required. Resource URI for the artifact being deployed.
	ResourceUri pulumi.StringArrayInput `pulumi:"resourceUri"`
}

func (DeployableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Deployable)(nil)).Elem()
}

func (i DeployableArgs) ToDeployableOutput() DeployableOutput {
	return i.ToDeployableOutputWithContext(context.Background())
}

func (i DeployableArgs) ToDeployableOutputWithContext(ctx context.Context) DeployableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeployableOutput)
}

func (i DeployableArgs) ToDeployablePtrOutput() DeployablePtrOutput {
	return i.ToDeployablePtrOutputWithContext(context.Background())
}

func (i DeployableArgs) ToDeployablePtrOutputWithContext(ctx context.Context) DeployablePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeployableOutput).ToDeployablePtrOutputWithContext(ctx)
}

// DeployablePtrInput is an input type that accepts DeployableArgs, DeployablePtr and DeployablePtrOutput values.
// You can construct a concrete instance of `DeployablePtrInput` via:
//
//          DeployableArgs{...}
//
//  or:
//
//          nil
type DeployablePtrInput interface {
	pulumi.Input

	ToDeployablePtrOutput() DeployablePtrOutput
	ToDeployablePtrOutputWithContext(context.Context) DeployablePtrOutput
}

type deployablePtrType DeployableArgs

func DeployablePtr(v *DeployableArgs) DeployablePtrInput {
	return (*deployablePtrType)(v)
}

func (*deployablePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Deployable)(nil)).Elem()
}

func (i *deployablePtrType) ToDeployablePtrOutput() DeployablePtrOutput {
	return i.ToDeployablePtrOutputWithContext(context.Background())
}

func (i *deployablePtrType) ToDeployablePtrOutputWithContext(ctx context.Context) DeployablePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeployablePtrOutput)
}

// An artifact that can be deployed in some runtime.
type DeployableOutput struct{ *pulumi.OutputState }

func (DeployableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Deployable)(nil)).Elem()
}

func (o DeployableOutput) ToDeployableOutput() DeployableOutput {
	return o
}

func (o DeployableOutput) ToDeployableOutputWithContext(ctx context.Context) DeployableOutput {
	return o
}

func (o DeployableOutput) ToDeployablePtrOutput() DeployablePtrOutput {
	return o.ToDeployablePtrOutputWithContext(context.Background())
}

func (o DeployableOutput) ToDeployablePtrOutputWithContext(ctx context.Context) DeployablePtrOutput {
	return o.ApplyT(func(v Deployable) *Deployable {
		return &v
	}).(DeployablePtrOutput)
}

// Required. Resource URI for the artifact being deployed.
func (o DeployableOutput) ResourceUri() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Deployable) []string { return v.ResourceUri }).(pulumi.StringArrayOutput)
}

type DeployablePtrOutput struct{ *pulumi.OutputState }

func (DeployablePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Deployable)(nil)).Elem()
}

func (o DeployablePtrOutput) ToDeployablePtrOutput() DeployablePtrOutput {
	return o
}

func (o DeployablePtrOutput) ToDeployablePtrOutputWithContext(ctx context.Context) DeployablePtrOutput {
	return o
}

func (o DeployablePtrOutput) Elem() DeployableOutput {
	return o.ApplyT(func(v *Deployable) Deployable { return *v }).(DeployableOutput)
}

// Required. Resource URI for the artifact being deployed.
func (o DeployablePtrOutput) ResourceUri() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Deployable) []string {
		if v == nil {
			return nil
		}
		return v.ResourceUri
	}).(pulumi.StringArrayOutput)
}

// The period during which some deployable was active in a runtime.
type Deployment struct {
	// Address of the runtime element hosting this deployment.
	Address *string `pulumi:"address"`
	// Configuration used to create this deployment.
	Config *string `pulumi:"config"`
	// Required. Beginning of the lifetime of this deployment.
	DeployTime *string `pulumi:"deployTime"`
	// Platform hosting this deployment.
	Platform *string `pulumi:"platform"`
	// Output only. Resource URI for the artifact being deployed taken from the deployable field with the same name.
	ResourceUri []string `pulumi:"resourceUri"`
	// End of the lifetime of this deployment.
	UndeployTime *string `pulumi:"undeployTime"`
	// Identity of the user that triggered this deployment.
	UserEmail *string `pulumi:"userEmail"`
}

// DeploymentInput is an input type that accepts DeploymentArgs and DeploymentOutput values.
// You can construct a concrete instance of `DeploymentInput` via:
//
//          DeploymentArgs{...}
type DeploymentInput interface {
	pulumi.Input

	ToDeploymentOutput() DeploymentOutput
	ToDeploymentOutputWithContext(context.Context) DeploymentOutput
}

// The period during which some deployable was active in a runtime.
type DeploymentArgs struct {
	// Address of the runtime element hosting this deployment.
	Address pulumi.StringPtrInput `pulumi:"address"`
	// Configuration used to create this deployment.
	Config pulumi.StringPtrInput `pulumi:"config"`
	// Required. Beginning of the lifetime of this deployment.
	DeployTime pulumi.StringPtrInput `pulumi:"deployTime"`
	// Platform hosting this deployment.
	Platform pulumi.StringPtrInput `pulumi:"platform"`
	// Output only. Resource URI for the artifact being deployed taken from the deployable field with the same name.
	ResourceUri pulumi.StringArrayInput `pulumi:"resourceUri"`
	// End of the lifetime of this deployment.
	UndeployTime pulumi.StringPtrInput `pulumi:"undeployTime"`
	// Identity of the user that triggered this deployment.
	UserEmail pulumi.StringPtrInput `pulumi:"userEmail"`
}

func (DeploymentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Deployment)(nil)).Elem()
}

func (i DeploymentArgs) ToDeploymentOutput() DeploymentOutput {
	return i.ToDeploymentOutputWithContext(context.Background())
}

func (i DeploymentArgs) ToDeploymentOutputWithContext(ctx context.Context) DeploymentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentOutput)
}

func (i DeploymentArgs) ToDeploymentPtrOutput() DeploymentPtrOutput {
	return i.ToDeploymentPtrOutputWithContext(context.Background())
}

func (i DeploymentArgs) ToDeploymentPtrOutputWithContext(ctx context.Context) DeploymentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentOutput).ToDeploymentPtrOutputWithContext(ctx)
}

// DeploymentPtrInput is an input type that accepts DeploymentArgs, DeploymentPtr and DeploymentPtrOutput values.
// You can construct a concrete instance of `DeploymentPtrInput` via:
//
//          DeploymentArgs{...}
//
//  or:
//
//          nil
type DeploymentPtrInput interface {
	pulumi.Input

	ToDeploymentPtrOutput() DeploymentPtrOutput
	ToDeploymentPtrOutputWithContext(context.Context) DeploymentPtrOutput
}

type deploymentPtrType DeploymentArgs

func DeploymentPtr(v *DeploymentArgs) DeploymentPtrInput {
	return (*deploymentPtrType)(v)
}

func (*deploymentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Deployment)(nil)).Elem()
}

func (i *deploymentPtrType) ToDeploymentPtrOutput() DeploymentPtrOutput {
	return i.ToDeploymentPtrOutputWithContext(context.Background())
}

func (i *deploymentPtrType) ToDeploymentPtrOutputWithContext(ctx context.Context) DeploymentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentPtrOutput)
}

// The period during which some deployable was active in a runtime.
type DeploymentOutput struct{ *pulumi.OutputState }

func (DeploymentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Deployment)(nil)).Elem()
}

func (o DeploymentOutput) ToDeploymentOutput() DeploymentOutput {
	return o
}

func (o DeploymentOutput) ToDeploymentOutputWithContext(ctx context.Context) DeploymentOutput {
	return o
}

func (o DeploymentOutput) ToDeploymentPtrOutput() DeploymentPtrOutput {
	return o.ToDeploymentPtrOutputWithContext(context.Background())
}

func (o DeploymentOutput) ToDeploymentPtrOutputWithContext(ctx context.Context) DeploymentPtrOutput {
	return o.ApplyT(func(v Deployment) *Deployment {
		return &v
	}).(DeploymentPtrOutput)
}

// Address of the runtime element hosting this deployment.
func (o DeploymentOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Deployment) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// Configuration used to create this deployment.
func (o DeploymentOutput) Config() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Deployment) *string { return v.Config }).(pulumi.StringPtrOutput)
}

// Required. Beginning of the lifetime of this deployment.
func (o DeploymentOutput) DeployTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Deployment) *string { return v.DeployTime }).(pulumi.StringPtrOutput)
}

// Platform hosting this deployment.
func (o DeploymentOutput) Platform() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Deployment) *string { return v.Platform }).(pulumi.StringPtrOutput)
}

// Output only. Resource URI for the artifact being deployed taken from the deployable field with the same name.
func (o DeploymentOutput) ResourceUri() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Deployment) []string { return v.ResourceUri }).(pulumi.StringArrayOutput)
}

// End of the lifetime of this deployment.
func (o DeploymentOutput) UndeployTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Deployment) *string { return v.UndeployTime }).(pulumi.StringPtrOutput)
}

// Identity of the user that triggered this deployment.
func (o DeploymentOutput) UserEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Deployment) *string { return v.UserEmail }).(pulumi.StringPtrOutput)
}

type DeploymentPtrOutput struct{ *pulumi.OutputState }

func (DeploymentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Deployment)(nil)).Elem()
}

func (o DeploymentPtrOutput) ToDeploymentPtrOutput() DeploymentPtrOutput {
	return o
}

func (o DeploymentPtrOutput) ToDeploymentPtrOutputWithContext(ctx context.Context) DeploymentPtrOutput {
	return o
}

func (o DeploymentPtrOutput) Elem() DeploymentOutput {
	return o.ApplyT(func(v *Deployment) Deployment { return *v }).(DeploymentOutput)
}

// Address of the runtime element hosting this deployment.
func (o DeploymentPtrOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Deployment) *string {
		if v == nil {
			return nil
		}
		return v.Address
	}).(pulumi.StringPtrOutput)
}

// Configuration used to create this deployment.
func (o DeploymentPtrOutput) Config() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Deployment) *string {
		if v == nil {
			return nil
		}
		return v.Config
	}).(pulumi.StringPtrOutput)
}

// Required. Beginning of the lifetime of this deployment.
func (o DeploymentPtrOutput) DeployTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Deployment) *string {
		if v == nil {
			return nil
		}
		return v.DeployTime
	}).(pulumi.StringPtrOutput)
}

// Platform hosting this deployment.
func (o DeploymentPtrOutput) Platform() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Deployment) *string {
		if v == nil {
			return nil
		}
		return v.Platform
	}).(pulumi.StringPtrOutput)
}

// Output only. Resource URI for the artifact being deployed taken from the deployable field with the same name.
func (o DeploymentPtrOutput) ResourceUri() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Deployment) []string {
		if v == nil {
			return nil
		}
		return v.ResourceUri
	}).(pulumi.StringArrayOutput)
}

// End of the lifetime of this deployment.
func (o DeploymentPtrOutput) UndeployTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Deployment) *string {
		if v == nil {
			return nil
		}
		return v.UndeployTime
	}).(pulumi.StringPtrOutput)
}

// Identity of the user that triggered this deployment.
func (o DeploymentPtrOutput) UserEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Deployment) *string {
		if v == nil {
			return nil
		}
		return v.UserEmail
	}).(pulumi.StringPtrOutput)
}

// Derived describes the derived image portion (Occurrence) of the DockerImage relationship. This image would be produced from a Dockerfile with FROM .
type Derived struct {
	// Output only. This contains the base image URL for the derived image occurrence.
	BaseResourceUrl *string `pulumi:"baseResourceUrl"`
	// Output only. The number of layers by which this image differs from the associated image basis.
	Distance *int `pulumi:"distance"`
	// Required. The fingerprint of the derived image.
	Fingerprint *Fingerprint `pulumi:"fingerprint"`
	// This contains layer-specific metadata, if populated it has length "distance" and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer.
	LayerInfo []Layer `pulumi:"layerInfo"`
}

// DerivedInput is an input type that accepts DerivedArgs and DerivedOutput values.
// You can construct a concrete instance of `DerivedInput` via:
//
//          DerivedArgs{...}
type DerivedInput interface {
	pulumi.Input

	ToDerivedOutput() DerivedOutput
	ToDerivedOutputWithContext(context.Context) DerivedOutput
}

// Derived describes the derived image portion (Occurrence) of the DockerImage relationship. This image would be produced from a Dockerfile with FROM .
type DerivedArgs struct {
	// Output only. This contains the base image URL for the derived image occurrence.
	BaseResourceUrl pulumi.StringPtrInput `pulumi:"baseResourceUrl"`
	// Output only. The number of layers by which this image differs from the associated image basis.
	Distance pulumi.IntPtrInput `pulumi:"distance"`
	// Required. The fingerprint of the derived image.
	Fingerprint FingerprintPtrInput `pulumi:"fingerprint"`
	// This contains layer-specific metadata, if populated it has length "distance" and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer.
	LayerInfo LayerArrayInput `pulumi:"layerInfo"`
}

func (DerivedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Derived)(nil)).Elem()
}

func (i DerivedArgs) ToDerivedOutput() DerivedOutput {
	return i.ToDerivedOutputWithContext(context.Background())
}

func (i DerivedArgs) ToDerivedOutputWithContext(ctx context.Context) DerivedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DerivedOutput)
}

func (i DerivedArgs) ToDerivedPtrOutput() DerivedPtrOutput {
	return i.ToDerivedPtrOutputWithContext(context.Background())
}

func (i DerivedArgs) ToDerivedPtrOutputWithContext(ctx context.Context) DerivedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DerivedOutput).ToDerivedPtrOutputWithContext(ctx)
}

// DerivedPtrInput is an input type that accepts DerivedArgs, DerivedPtr and DerivedPtrOutput values.
// You can construct a concrete instance of `DerivedPtrInput` via:
//
//          DerivedArgs{...}
//
//  or:
//
//          nil
type DerivedPtrInput interface {
	pulumi.Input

	ToDerivedPtrOutput() DerivedPtrOutput
	ToDerivedPtrOutputWithContext(context.Context) DerivedPtrOutput
}

type derivedPtrType DerivedArgs

func DerivedPtr(v *DerivedArgs) DerivedPtrInput {
	return (*derivedPtrType)(v)
}

func (*derivedPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Derived)(nil)).Elem()
}

func (i *derivedPtrType) ToDerivedPtrOutput() DerivedPtrOutput {
	return i.ToDerivedPtrOutputWithContext(context.Background())
}

func (i *derivedPtrType) ToDerivedPtrOutputWithContext(ctx context.Context) DerivedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DerivedPtrOutput)
}

// Derived describes the derived image portion (Occurrence) of the DockerImage relationship. This image would be produced from a Dockerfile with FROM .
type DerivedOutput struct{ *pulumi.OutputState }

func (DerivedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Derived)(nil)).Elem()
}

func (o DerivedOutput) ToDerivedOutput() DerivedOutput {
	return o
}

func (o DerivedOutput) ToDerivedOutputWithContext(ctx context.Context) DerivedOutput {
	return o
}

func (o DerivedOutput) ToDerivedPtrOutput() DerivedPtrOutput {
	return o.ToDerivedPtrOutputWithContext(context.Background())
}

func (o DerivedOutput) ToDerivedPtrOutputWithContext(ctx context.Context) DerivedPtrOutput {
	return o.ApplyT(func(v Derived) *Derived {
		return &v
	}).(DerivedPtrOutput)
}

// Output only. This contains the base image URL for the derived image occurrence.
func (o DerivedOutput) BaseResourceUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Derived) *string { return v.BaseResourceUrl }).(pulumi.StringPtrOutput)
}

// Output only. The number of layers by which this image differs from the associated image basis.
func (o DerivedOutput) Distance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Derived) *int { return v.Distance }).(pulumi.IntPtrOutput)
}

// Required. The fingerprint of the derived image.
func (o DerivedOutput) Fingerprint() FingerprintPtrOutput {
	return o.ApplyT(func(v Derived) *Fingerprint { return v.Fingerprint }).(FingerprintPtrOutput)
}

// This contains layer-specific metadata, if populated it has length "distance" and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer.
func (o DerivedOutput) LayerInfo() LayerArrayOutput {
	return o.ApplyT(func(v Derived) []Layer { return v.LayerInfo }).(LayerArrayOutput)
}

type DerivedPtrOutput struct{ *pulumi.OutputState }

func (DerivedPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Derived)(nil)).Elem()
}

func (o DerivedPtrOutput) ToDerivedPtrOutput() DerivedPtrOutput {
	return o
}

func (o DerivedPtrOutput) ToDerivedPtrOutputWithContext(ctx context.Context) DerivedPtrOutput {
	return o
}

func (o DerivedPtrOutput) Elem() DerivedOutput {
	return o.ApplyT(func(v *Derived) Derived { return *v }).(DerivedOutput)
}

// Output only. This contains the base image URL for the derived image occurrence.
func (o DerivedPtrOutput) BaseResourceUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Derived) *string {
		if v == nil {
			return nil
		}
		return v.BaseResourceUrl
	}).(pulumi.StringPtrOutput)
}

// Output only. The number of layers by which this image differs from the associated image basis.
func (o DerivedPtrOutput) Distance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Derived) *int {
		if v == nil {
			return nil
		}
		return v.Distance
	}).(pulumi.IntPtrOutput)
}

// Required. The fingerprint of the derived image.
func (o DerivedPtrOutput) Fingerprint() FingerprintPtrOutput {
	return o.ApplyT(func(v *Derived) *Fingerprint {
		if v == nil {
			return nil
		}
		return v.Fingerprint
	}).(FingerprintPtrOutput)
}

// This contains layer-specific metadata, if populated it has length "distance" and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer.
func (o DerivedPtrOutput) LayerInfo() LayerArrayOutput {
	return o.ApplyT(func(v *Derived) []Layer {
		if v == nil {
			return nil
		}
		return v.LayerInfo
	}).(LayerArrayOutput)
}

// Identifies all appearances of this vulnerability in the package for a specific distro/location. For example: glibc in cpe:/o:debian:debian_linux:8 for versions 2.1 - 2.2
type Detail struct {
	// Required. The CPE URI in [cpe format](https://cpe.mitre.org/specification/) in which the vulnerability manifests. Examples include distro or storage location for vulnerable jar.
	CpeUri *string `pulumi:"cpeUri"`
	// A vendor-specific description of this note.
	Description *string `pulumi:"description"`
	// The fix for this specific package version.
	FixedLocation *VulnerabilityLocation `pulumi:"fixedLocation"`
	// Whether this detail is obsolete. Occurrences are expected not to point to obsolete details.
	IsObsolete *bool `pulumi:"isObsolete"`
	// The max version of the package in which the vulnerability exists.
	MaxAffectedVersion *Version `pulumi:"maxAffectedVersion"`
	// The min version of the package in which the vulnerability exists.
	MinAffectedVersion *Version `pulumi:"minAffectedVersion"`
	// Required. The name of the package where the vulnerability was found.
	Package *string `pulumi:"package"`
	// The type of package; whether native or non native(ruby gems, node.js packages etc).
	PackageType *string `pulumi:"packageType"`
	// The severity (eg: distro assigned severity) for this vulnerability.
	SeverityName *string `pulumi:"severityName"`
	// The source from which the information in this Detail was obtained.
	Source *string `pulumi:"source"`
	// The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.
	SourceUpdateTime *string `pulumi:"sourceUpdateTime"`
}

// DetailInput is an input type that accepts DetailArgs and DetailOutput values.
// You can construct a concrete instance of `DetailInput` via:
//
//          DetailArgs{...}
type DetailInput interface {
	pulumi.Input

	ToDetailOutput() DetailOutput
	ToDetailOutputWithContext(context.Context) DetailOutput
}

// Identifies all appearances of this vulnerability in the package for a specific distro/location. For example: glibc in cpe:/o:debian:debian_linux:8 for versions 2.1 - 2.2
type DetailArgs struct {
	// Required. The CPE URI in [cpe format](https://cpe.mitre.org/specification/) in which the vulnerability manifests. Examples include distro or storage location for vulnerable jar.
	CpeUri pulumi.StringPtrInput `pulumi:"cpeUri"`
	// A vendor-specific description of this note.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The fix for this specific package version.
	FixedLocation VulnerabilityLocationPtrInput `pulumi:"fixedLocation"`
	// Whether this detail is obsolete. Occurrences are expected not to point to obsolete details.
	IsObsolete pulumi.BoolPtrInput `pulumi:"isObsolete"`
	// The max version of the package in which the vulnerability exists.
	MaxAffectedVersion VersionPtrInput `pulumi:"maxAffectedVersion"`
	// The min version of the package in which the vulnerability exists.
	MinAffectedVersion VersionPtrInput `pulumi:"minAffectedVersion"`
	// Required. The name of the package where the vulnerability was found.
	Package pulumi.StringPtrInput `pulumi:"package"`
	// The type of package; whether native or non native(ruby gems, node.js packages etc).
	PackageType pulumi.StringPtrInput `pulumi:"packageType"`
	// The severity (eg: distro assigned severity) for this vulnerability.
	SeverityName pulumi.StringPtrInput `pulumi:"severityName"`
	// The source from which the information in this Detail was obtained.
	Source pulumi.StringPtrInput `pulumi:"source"`
	// The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.
	SourceUpdateTime pulumi.StringPtrInput `pulumi:"sourceUpdateTime"`
}

func (DetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Detail)(nil)).Elem()
}

func (i DetailArgs) ToDetailOutput() DetailOutput {
	return i.ToDetailOutputWithContext(context.Background())
}

func (i DetailArgs) ToDetailOutputWithContext(ctx context.Context) DetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DetailOutput)
}

// DetailArrayInput is an input type that accepts DetailArray and DetailArrayOutput values.
// You can construct a concrete instance of `DetailArrayInput` via:
//
//          DetailArray{ DetailArgs{...} }
type DetailArrayInput interface {
	pulumi.Input

	ToDetailArrayOutput() DetailArrayOutput
	ToDetailArrayOutputWithContext(context.Context) DetailArrayOutput
}

type DetailArray []DetailInput

func (DetailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Detail)(nil)).Elem()
}

func (i DetailArray) ToDetailArrayOutput() DetailArrayOutput {
	return i.ToDetailArrayOutputWithContext(context.Background())
}

func (i DetailArray) ToDetailArrayOutputWithContext(ctx context.Context) DetailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DetailArrayOutput)
}

// Identifies all appearances of this vulnerability in the package for a specific distro/location. For example: glibc in cpe:/o:debian:debian_linux:8 for versions 2.1 - 2.2
type DetailOutput struct{ *pulumi.OutputState }

func (DetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Detail)(nil)).Elem()
}

func (o DetailOutput) ToDetailOutput() DetailOutput {
	return o
}

func (o DetailOutput) ToDetailOutputWithContext(ctx context.Context) DetailOutput {
	return o
}

// Required. The CPE URI in [cpe format](https://cpe.mitre.org/specification/) in which the vulnerability manifests. Examples include distro or storage location for vulnerable jar.
func (o DetailOutput) CpeUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Detail) *string { return v.CpeUri }).(pulumi.StringPtrOutput)
}

// A vendor-specific description of this note.
func (o DetailOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Detail) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The fix for this specific package version.
func (o DetailOutput) FixedLocation() VulnerabilityLocationPtrOutput {
	return o.ApplyT(func(v Detail) *VulnerabilityLocation { return v.FixedLocation }).(VulnerabilityLocationPtrOutput)
}

// Whether this detail is obsolete. Occurrences are expected not to point to obsolete details.
func (o DetailOutput) IsObsolete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Detail) *bool { return v.IsObsolete }).(pulumi.BoolPtrOutput)
}

// The max version of the package in which the vulnerability exists.
func (o DetailOutput) MaxAffectedVersion() VersionPtrOutput {
	return o.ApplyT(func(v Detail) *Version { return v.MaxAffectedVersion }).(VersionPtrOutput)
}

// The min version of the package in which the vulnerability exists.
func (o DetailOutput) MinAffectedVersion() VersionPtrOutput {
	return o.ApplyT(func(v Detail) *Version { return v.MinAffectedVersion }).(VersionPtrOutput)
}

// Required. The name of the package where the vulnerability was found.
func (o DetailOutput) Package() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Detail) *string { return v.Package }).(pulumi.StringPtrOutput)
}

// The type of package; whether native or non native(ruby gems, node.js packages etc).
func (o DetailOutput) PackageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Detail) *string { return v.PackageType }).(pulumi.StringPtrOutput)
}

// The severity (eg: distro assigned severity) for this vulnerability.
func (o DetailOutput) SeverityName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Detail) *string { return v.SeverityName }).(pulumi.StringPtrOutput)
}

// The source from which the information in this Detail was obtained.
func (o DetailOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Detail) *string { return v.Source }).(pulumi.StringPtrOutput)
}

// The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.
func (o DetailOutput) SourceUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Detail) *string { return v.SourceUpdateTime }).(pulumi.StringPtrOutput)
}

type DetailArrayOutput struct{ *pulumi.OutputState }

func (DetailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Detail)(nil)).Elem()
}

func (o DetailArrayOutput) ToDetailArrayOutput() DetailArrayOutput {
	return o
}

func (o DetailArrayOutput) ToDetailArrayOutputWithContext(ctx context.Context) DetailArrayOutput {
	return o
}

func (o DetailArrayOutput) Index(i pulumi.IntInput) DetailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Detail {
		return vs[0].([]Detail)[vs[1].(int)]
	}).(DetailOutput)
}

// Details of an attestation occurrence.
type Details struct {
	// Required. Attestation for the resource.
	Attestation *Attestation `pulumi:"attestation"`
}

// DetailsInput is an input type that accepts DetailsArgs and DetailsOutput values.
// You can construct a concrete instance of `DetailsInput` via:
//
//          DetailsArgs{...}
type DetailsInput interface {
	pulumi.Input

	ToDetailsOutput() DetailsOutput
	ToDetailsOutputWithContext(context.Context) DetailsOutput
}

// Details of an attestation occurrence.
type DetailsArgs struct {
	// Required. Attestation for the resource.
	Attestation AttestationPtrInput `pulumi:"attestation"`
}

func (DetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Details)(nil)).Elem()
}

func (i DetailsArgs) ToDetailsOutput() DetailsOutput {
	return i.ToDetailsOutputWithContext(context.Background())
}

func (i DetailsArgs) ToDetailsOutputWithContext(ctx context.Context) DetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DetailsOutput)
}

func (i DetailsArgs) ToDetailsPtrOutput() DetailsPtrOutput {
	return i.ToDetailsPtrOutputWithContext(context.Background())
}

func (i DetailsArgs) ToDetailsPtrOutputWithContext(ctx context.Context) DetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DetailsOutput).ToDetailsPtrOutputWithContext(ctx)
}

// DetailsPtrInput is an input type that accepts DetailsArgs, DetailsPtr and DetailsPtrOutput values.
// You can construct a concrete instance of `DetailsPtrInput` via:
//
//          DetailsArgs{...}
//
//  or:
//
//          nil
type DetailsPtrInput interface {
	pulumi.Input

	ToDetailsPtrOutput() DetailsPtrOutput
	ToDetailsPtrOutputWithContext(context.Context) DetailsPtrOutput
}

type detailsPtrType DetailsArgs

func DetailsPtr(v *DetailsArgs) DetailsPtrInput {
	return (*detailsPtrType)(v)
}

func (*detailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Details)(nil)).Elem()
}

func (i *detailsPtrType) ToDetailsPtrOutput() DetailsPtrOutput {
	return i.ToDetailsPtrOutputWithContext(context.Background())
}

func (i *detailsPtrType) ToDetailsPtrOutputWithContext(ctx context.Context) DetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DetailsPtrOutput)
}

// Details of an attestation occurrence.
type DetailsOutput struct{ *pulumi.OutputState }

func (DetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Details)(nil)).Elem()
}

func (o DetailsOutput) ToDetailsOutput() DetailsOutput {
	return o
}

func (o DetailsOutput) ToDetailsOutputWithContext(ctx context.Context) DetailsOutput {
	return o
}

func (o DetailsOutput) ToDetailsPtrOutput() DetailsPtrOutput {
	return o.ToDetailsPtrOutputWithContext(context.Background())
}

func (o DetailsOutput) ToDetailsPtrOutputWithContext(ctx context.Context) DetailsPtrOutput {
	return o.ApplyT(func(v Details) *Details {
		return &v
	}).(DetailsPtrOutput)
}

// Required. Attestation for the resource.
func (o DetailsOutput) Attestation() AttestationPtrOutput {
	return o.ApplyT(func(v Details) *Attestation { return v.Attestation }).(AttestationPtrOutput)
}

type DetailsPtrOutput struct{ *pulumi.OutputState }

func (DetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Details)(nil)).Elem()
}

func (o DetailsPtrOutput) ToDetailsPtrOutput() DetailsPtrOutput {
	return o
}

func (o DetailsPtrOutput) ToDetailsPtrOutputWithContext(ctx context.Context) DetailsPtrOutput {
	return o
}

func (o DetailsPtrOutput) Elem() DetailsOutput {
	return o.ApplyT(func(v *Details) Details { return *v }).(DetailsOutput)
}

// Required. Attestation for the resource.
func (o DetailsPtrOutput) Attestation() AttestationPtrOutput {
	return o.ApplyT(func(v *Details) *Attestation {
		if v == nil {
			return nil
		}
		return v.Attestation
	}).(AttestationPtrOutput)
}

// Provides information about the analysis status of a discovered resource.
type Discovered struct {
	// The status of discovery for the resource.
	AnalysisStatus *string `pulumi:"analysisStatus"`
	// When an error is encountered this will contain a LocalizedMessage under details to show to the user. The LocalizedMessage is output only and populated by the API.
	AnalysisStatusError *Status `pulumi:"analysisStatusError"`
	// Whether the resource is continuously analyzed.
	ContinuousAnalysis *string `pulumi:"continuousAnalysis"`
	// The last time continuous analysis was done for this resource. Deprecated, do not use.
	LastAnalysisTime *string `pulumi:"lastAnalysisTime"`
}

// DiscoveredInput is an input type that accepts DiscoveredArgs and DiscoveredOutput values.
// You can construct a concrete instance of `DiscoveredInput` via:
//
//          DiscoveredArgs{...}
type DiscoveredInput interface {
	pulumi.Input

	ToDiscoveredOutput() DiscoveredOutput
	ToDiscoveredOutputWithContext(context.Context) DiscoveredOutput
}

// Provides information about the analysis status of a discovered resource.
type DiscoveredArgs struct {
	// The status of discovery for the resource.
	AnalysisStatus pulumi.StringPtrInput `pulumi:"analysisStatus"`
	// When an error is encountered this will contain a LocalizedMessage under details to show to the user. The LocalizedMessage is output only and populated by the API.
	AnalysisStatusError StatusPtrInput `pulumi:"analysisStatusError"`
	// Whether the resource is continuously analyzed.
	ContinuousAnalysis pulumi.StringPtrInput `pulumi:"continuousAnalysis"`
	// The last time continuous analysis was done for this resource. Deprecated, do not use.
	LastAnalysisTime pulumi.StringPtrInput `pulumi:"lastAnalysisTime"`
}

func (DiscoveredArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Discovered)(nil)).Elem()
}

func (i DiscoveredArgs) ToDiscoveredOutput() DiscoveredOutput {
	return i.ToDiscoveredOutputWithContext(context.Background())
}

func (i DiscoveredArgs) ToDiscoveredOutputWithContext(ctx context.Context) DiscoveredOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiscoveredOutput)
}

func (i DiscoveredArgs) ToDiscoveredPtrOutput() DiscoveredPtrOutput {
	return i.ToDiscoveredPtrOutputWithContext(context.Background())
}

func (i DiscoveredArgs) ToDiscoveredPtrOutputWithContext(ctx context.Context) DiscoveredPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiscoveredOutput).ToDiscoveredPtrOutputWithContext(ctx)
}

// DiscoveredPtrInput is an input type that accepts DiscoveredArgs, DiscoveredPtr and DiscoveredPtrOutput values.
// You can construct a concrete instance of `DiscoveredPtrInput` via:
//
//          DiscoveredArgs{...}
//
//  or:
//
//          nil
type DiscoveredPtrInput interface {
	pulumi.Input

	ToDiscoveredPtrOutput() DiscoveredPtrOutput
	ToDiscoveredPtrOutputWithContext(context.Context) DiscoveredPtrOutput
}

type discoveredPtrType DiscoveredArgs

func DiscoveredPtr(v *DiscoveredArgs) DiscoveredPtrInput {
	return (*discoveredPtrType)(v)
}

func (*discoveredPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Discovered)(nil)).Elem()
}

func (i *discoveredPtrType) ToDiscoveredPtrOutput() DiscoveredPtrOutput {
	return i.ToDiscoveredPtrOutputWithContext(context.Background())
}

func (i *discoveredPtrType) ToDiscoveredPtrOutputWithContext(ctx context.Context) DiscoveredPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiscoveredPtrOutput)
}

// Provides information about the analysis status of a discovered resource.
type DiscoveredOutput struct{ *pulumi.OutputState }

func (DiscoveredOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Discovered)(nil)).Elem()
}

func (o DiscoveredOutput) ToDiscoveredOutput() DiscoveredOutput {
	return o
}

func (o DiscoveredOutput) ToDiscoveredOutputWithContext(ctx context.Context) DiscoveredOutput {
	return o
}

func (o DiscoveredOutput) ToDiscoveredPtrOutput() DiscoveredPtrOutput {
	return o.ToDiscoveredPtrOutputWithContext(context.Background())
}

func (o DiscoveredOutput) ToDiscoveredPtrOutputWithContext(ctx context.Context) DiscoveredPtrOutput {
	return o.ApplyT(func(v Discovered) *Discovered {
		return &v
	}).(DiscoveredPtrOutput)
}

// The status of discovery for the resource.
func (o DiscoveredOutput) AnalysisStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Discovered) *string { return v.AnalysisStatus }).(pulumi.StringPtrOutput)
}

// When an error is encountered this will contain a LocalizedMessage under details to show to the user. The LocalizedMessage is output only and populated by the API.
func (o DiscoveredOutput) AnalysisStatusError() StatusPtrOutput {
	return o.ApplyT(func(v Discovered) *Status { return v.AnalysisStatusError }).(StatusPtrOutput)
}

// Whether the resource is continuously analyzed.
func (o DiscoveredOutput) ContinuousAnalysis() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Discovered) *string { return v.ContinuousAnalysis }).(pulumi.StringPtrOutput)
}

// The last time continuous analysis was done for this resource. Deprecated, do not use.
func (o DiscoveredOutput) LastAnalysisTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Discovered) *string { return v.LastAnalysisTime }).(pulumi.StringPtrOutput)
}

type DiscoveredPtrOutput struct{ *pulumi.OutputState }

func (DiscoveredPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Discovered)(nil)).Elem()
}

func (o DiscoveredPtrOutput) ToDiscoveredPtrOutput() DiscoveredPtrOutput {
	return o
}

func (o DiscoveredPtrOutput) ToDiscoveredPtrOutputWithContext(ctx context.Context) DiscoveredPtrOutput {
	return o
}

func (o DiscoveredPtrOutput) Elem() DiscoveredOutput {
	return o.ApplyT(func(v *Discovered) Discovered { return *v }).(DiscoveredOutput)
}

// The status of discovery for the resource.
func (o DiscoveredPtrOutput) AnalysisStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Discovered) *string {
		if v == nil {
			return nil
		}
		return v.AnalysisStatus
	}).(pulumi.StringPtrOutput)
}

// When an error is encountered this will contain a LocalizedMessage under details to show to the user. The LocalizedMessage is output only and populated by the API.
func (o DiscoveredPtrOutput) AnalysisStatusError() StatusPtrOutput {
	return o.ApplyT(func(v *Discovered) *Status {
		if v == nil {
			return nil
		}
		return v.AnalysisStatusError
	}).(StatusPtrOutput)
}

// Whether the resource is continuously analyzed.
func (o DiscoveredPtrOutput) ContinuousAnalysis() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Discovered) *string {
		if v == nil {
			return nil
		}
		return v.ContinuousAnalysis
	}).(pulumi.StringPtrOutput)
}

// The last time continuous analysis was done for this resource. Deprecated, do not use.
func (o DiscoveredPtrOutput) LastAnalysisTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Discovered) *string {
		if v == nil {
			return nil
		}
		return v.LastAnalysisTime
	}).(pulumi.StringPtrOutput)
}

// A note that indicates a type of analysis a provider would perform. This note exists in a provider's project. A `Discovery` occurrence is created in a consumer's project at the start of analysis.
type Discovery struct {
	// Required. Immutable. The kind of analysis that is handled by this discovery.
	AnalysisKind *string `pulumi:"analysisKind"`
}

// DiscoveryInput is an input type that accepts DiscoveryArgs and DiscoveryOutput values.
// You can construct a concrete instance of `DiscoveryInput` via:
//
//          DiscoveryArgs{...}
type DiscoveryInput interface {
	pulumi.Input

	ToDiscoveryOutput() DiscoveryOutput
	ToDiscoveryOutputWithContext(context.Context) DiscoveryOutput
}

// A note that indicates a type of analysis a provider would perform. This note exists in a provider's project. A `Discovery` occurrence is created in a consumer's project at the start of analysis.
type DiscoveryArgs struct {
	// Required. Immutable. The kind of analysis that is handled by this discovery.
	AnalysisKind pulumi.StringPtrInput `pulumi:"analysisKind"`
}

func (DiscoveryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Discovery)(nil)).Elem()
}

func (i DiscoveryArgs) ToDiscoveryOutput() DiscoveryOutput {
	return i.ToDiscoveryOutputWithContext(context.Background())
}

func (i DiscoveryArgs) ToDiscoveryOutputWithContext(ctx context.Context) DiscoveryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiscoveryOutput)
}

func (i DiscoveryArgs) ToDiscoveryPtrOutput() DiscoveryPtrOutput {
	return i.ToDiscoveryPtrOutputWithContext(context.Background())
}

func (i DiscoveryArgs) ToDiscoveryPtrOutputWithContext(ctx context.Context) DiscoveryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiscoveryOutput).ToDiscoveryPtrOutputWithContext(ctx)
}

// DiscoveryPtrInput is an input type that accepts DiscoveryArgs, DiscoveryPtr and DiscoveryPtrOutput values.
// You can construct a concrete instance of `DiscoveryPtrInput` via:
//
//          DiscoveryArgs{...}
//
//  or:
//
//          nil
type DiscoveryPtrInput interface {
	pulumi.Input

	ToDiscoveryPtrOutput() DiscoveryPtrOutput
	ToDiscoveryPtrOutputWithContext(context.Context) DiscoveryPtrOutput
}

type discoveryPtrType DiscoveryArgs

func DiscoveryPtr(v *DiscoveryArgs) DiscoveryPtrInput {
	return (*discoveryPtrType)(v)
}

func (*discoveryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Discovery)(nil)).Elem()
}

func (i *discoveryPtrType) ToDiscoveryPtrOutput() DiscoveryPtrOutput {
	return i.ToDiscoveryPtrOutputWithContext(context.Background())
}

func (i *discoveryPtrType) ToDiscoveryPtrOutputWithContext(ctx context.Context) DiscoveryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiscoveryPtrOutput)
}

// A note that indicates a type of analysis a provider would perform. This note exists in a provider's project. A `Discovery` occurrence is created in a consumer's project at the start of analysis.
type DiscoveryOutput struct{ *pulumi.OutputState }

func (DiscoveryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Discovery)(nil)).Elem()
}

func (o DiscoveryOutput) ToDiscoveryOutput() DiscoveryOutput {
	return o
}

func (o DiscoveryOutput) ToDiscoveryOutputWithContext(ctx context.Context) DiscoveryOutput {
	return o
}

func (o DiscoveryOutput) ToDiscoveryPtrOutput() DiscoveryPtrOutput {
	return o.ToDiscoveryPtrOutputWithContext(context.Background())
}

func (o DiscoveryOutput) ToDiscoveryPtrOutputWithContext(ctx context.Context) DiscoveryPtrOutput {
	return o.ApplyT(func(v Discovery) *Discovery {
		return &v
	}).(DiscoveryPtrOutput)
}

// Required. Immutable. The kind of analysis that is handled by this discovery.
func (o DiscoveryOutput) AnalysisKind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Discovery) *string { return v.AnalysisKind }).(pulumi.StringPtrOutput)
}

type DiscoveryPtrOutput struct{ *pulumi.OutputState }

func (DiscoveryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Discovery)(nil)).Elem()
}

func (o DiscoveryPtrOutput) ToDiscoveryPtrOutput() DiscoveryPtrOutput {
	return o
}

func (o DiscoveryPtrOutput) ToDiscoveryPtrOutputWithContext(ctx context.Context) DiscoveryPtrOutput {
	return o
}

func (o DiscoveryPtrOutput) Elem() DiscoveryOutput {
	return o.ApplyT(func(v *Discovery) Discovery { return *v }).(DiscoveryOutput)
}

// Required. Immutable. The kind of analysis that is handled by this discovery.
func (o DiscoveryPtrOutput) AnalysisKind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Discovery) *string {
		if v == nil {
			return nil
		}
		return v.AnalysisKind
	}).(pulumi.StringPtrOutput)
}

// This represents a particular channel of distribution for a given package. E.g., Debian's jessie-backports dpkg mirror.
type Distribution struct {
	// The CPU architecture for which packages in this distribution channel were built.
	Architecture *string `pulumi:"architecture"`
	// Required. The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
	CpeUri *string `pulumi:"cpeUri"`
	// The distribution channel-specific description of this package.
	Description *string `pulumi:"description"`
	// The latest available version of this package in this distribution channel.
	LatestVersion *Version `pulumi:"latestVersion"`
	// A freeform string denoting the maintainer of this package.
	Maintainer *string `pulumi:"maintainer"`
	// The distribution channel-specific homepage for this package.
	Url *string `pulumi:"url"`
}

// DistributionInput is an input type that accepts DistributionArgs and DistributionOutput values.
// You can construct a concrete instance of `DistributionInput` via:
//
//          DistributionArgs{...}
type DistributionInput interface {
	pulumi.Input

	ToDistributionOutput() DistributionOutput
	ToDistributionOutputWithContext(context.Context) DistributionOutput
}

// This represents a particular channel of distribution for a given package. E.g., Debian's jessie-backports dpkg mirror.
type DistributionArgs struct {
	// The CPU architecture for which packages in this distribution channel were built.
	Architecture pulumi.StringPtrInput `pulumi:"architecture"`
	// Required. The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
	CpeUri pulumi.StringPtrInput `pulumi:"cpeUri"`
	// The distribution channel-specific description of this package.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The latest available version of this package in this distribution channel.
	LatestVersion VersionPtrInput `pulumi:"latestVersion"`
	// A freeform string denoting the maintainer of this package.
	Maintainer pulumi.StringPtrInput `pulumi:"maintainer"`
	// The distribution channel-specific homepage for this package.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (DistributionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Distribution)(nil)).Elem()
}

func (i DistributionArgs) ToDistributionOutput() DistributionOutput {
	return i.ToDistributionOutputWithContext(context.Background())
}

func (i DistributionArgs) ToDistributionOutputWithContext(ctx context.Context) DistributionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionOutput)
}

// DistributionArrayInput is an input type that accepts DistributionArray and DistributionArrayOutput values.
// You can construct a concrete instance of `DistributionArrayInput` via:
//
//          DistributionArray{ DistributionArgs{...} }
type DistributionArrayInput interface {
	pulumi.Input

	ToDistributionArrayOutput() DistributionArrayOutput
	ToDistributionArrayOutputWithContext(context.Context) DistributionArrayOutput
}

type DistributionArray []DistributionInput

func (DistributionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Distribution)(nil)).Elem()
}

func (i DistributionArray) ToDistributionArrayOutput() DistributionArrayOutput {
	return i.ToDistributionArrayOutputWithContext(context.Background())
}

func (i DistributionArray) ToDistributionArrayOutputWithContext(ctx context.Context) DistributionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionArrayOutput)
}

// This represents a particular channel of distribution for a given package. E.g., Debian's jessie-backports dpkg mirror.
type DistributionOutput struct{ *pulumi.OutputState }

func (DistributionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Distribution)(nil)).Elem()
}

func (o DistributionOutput) ToDistributionOutput() DistributionOutput {
	return o
}

func (o DistributionOutput) ToDistributionOutputWithContext(ctx context.Context) DistributionOutput {
	return o
}

// The CPU architecture for which packages in this distribution channel were built.
func (o DistributionOutput) Architecture() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Distribution) *string { return v.Architecture }).(pulumi.StringPtrOutput)
}

// Required. The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
func (o DistributionOutput) CpeUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Distribution) *string { return v.CpeUri }).(pulumi.StringPtrOutput)
}

// The distribution channel-specific description of this package.
func (o DistributionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Distribution) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The latest available version of this package in this distribution channel.
func (o DistributionOutput) LatestVersion() VersionPtrOutput {
	return o.ApplyT(func(v Distribution) *Version { return v.LatestVersion }).(VersionPtrOutput)
}

// A freeform string denoting the maintainer of this package.
func (o DistributionOutput) Maintainer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Distribution) *string { return v.Maintainer }).(pulumi.StringPtrOutput)
}

// The distribution channel-specific homepage for this package.
func (o DistributionOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Distribution) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type DistributionArrayOutput struct{ *pulumi.OutputState }

func (DistributionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Distribution)(nil)).Elem()
}

func (o DistributionArrayOutput) ToDistributionArrayOutput() DistributionArrayOutput {
	return o
}

func (o DistributionArrayOutput) ToDistributionArrayOutputWithContext(ctx context.Context) DistributionArrayOutput {
	return o
}

func (o DistributionArrayOutput) Index(i pulumi.IntInput) DistributionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Distribution {
		return vs[0].([]Distribution)[vs[1].(int)]
	}).(DistributionOutput)
}

// Defines an object for the environment field in in-toto links. The suggested fields are "variables", "filesystem", and "workdir".
type Environment struct {
	CustomValues map[string]string `pulumi:"customValues"`
}

// EnvironmentInput is an input type that accepts EnvironmentArgs and EnvironmentOutput values.
// You can construct a concrete instance of `EnvironmentInput` via:
//
//          EnvironmentArgs{...}
type EnvironmentInput interface {
	pulumi.Input

	ToEnvironmentOutput() EnvironmentOutput
	ToEnvironmentOutputWithContext(context.Context) EnvironmentOutput
}

// Defines an object for the environment field in in-toto links. The suggested fields are "variables", "filesystem", and "workdir".
type EnvironmentArgs struct {
	CustomValues pulumi.StringMapInput `pulumi:"customValues"`
}

func (EnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Environment)(nil)).Elem()
}

func (i EnvironmentArgs) ToEnvironmentOutput() EnvironmentOutput {
	return i.ToEnvironmentOutputWithContext(context.Background())
}

func (i EnvironmentArgs) ToEnvironmentOutputWithContext(ctx context.Context) EnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentOutput)
}

func (i EnvironmentArgs) ToEnvironmentPtrOutput() EnvironmentPtrOutput {
	return i.ToEnvironmentPtrOutputWithContext(context.Background())
}

func (i EnvironmentArgs) ToEnvironmentPtrOutputWithContext(ctx context.Context) EnvironmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentOutput).ToEnvironmentPtrOutputWithContext(ctx)
}

// EnvironmentPtrInput is an input type that accepts EnvironmentArgs, EnvironmentPtr and EnvironmentPtrOutput values.
// You can construct a concrete instance of `EnvironmentPtrInput` via:
//
//          EnvironmentArgs{...}
//
//  or:
//
//          nil
type EnvironmentPtrInput interface {
	pulumi.Input

	ToEnvironmentPtrOutput() EnvironmentPtrOutput
	ToEnvironmentPtrOutputWithContext(context.Context) EnvironmentPtrOutput
}

type environmentPtrType EnvironmentArgs

func EnvironmentPtr(v *EnvironmentArgs) EnvironmentPtrInput {
	return (*environmentPtrType)(v)
}

func (*environmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Environment)(nil)).Elem()
}

func (i *environmentPtrType) ToEnvironmentPtrOutput() EnvironmentPtrOutput {
	return i.ToEnvironmentPtrOutputWithContext(context.Background())
}

func (i *environmentPtrType) ToEnvironmentPtrOutputWithContext(ctx context.Context) EnvironmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentPtrOutput)
}

// Defines an object for the environment field in in-toto links. The suggested fields are "variables", "filesystem", and "workdir".
type EnvironmentOutput struct{ *pulumi.OutputState }

func (EnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Environment)(nil)).Elem()
}

func (o EnvironmentOutput) ToEnvironmentOutput() EnvironmentOutput {
	return o
}

func (o EnvironmentOutput) ToEnvironmentOutputWithContext(ctx context.Context) EnvironmentOutput {
	return o
}

func (o EnvironmentOutput) ToEnvironmentPtrOutput() EnvironmentPtrOutput {
	return o.ToEnvironmentPtrOutputWithContext(context.Background())
}

func (o EnvironmentOutput) ToEnvironmentPtrOutputWithContext(ctx context.Context) EnvironmentPtrOutput {
	return o.ApplyT(func(v Environment) *Environment {
		return &v
	}).(EnvironmentPtrOutput)
}
func (o EnvironmentOutput) CustomValues() pulumi.StringMapOutput {
	return o.ApplyT(func(v Environment) map[string]string { return v.CustomValues }).(pulumi.StringMapOutput)
}

type EnvironmentPtrOutput struct{ *pulumi.OutputState }

func (EnvironmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Environment)(nil)).Elem()
}

func (o EnvironmentPtrOutput) ToEnvironmentPtrOutput() EnvironmentPtrOutput {
	return o
}

func (o EnvironmentPtrOutput) ToEnvironmentPtrOutputWithContext(ctx context.Context) EnvironmentPtrOutput {
	return o
}

func (o EnvironmentPtrOutput) Elem() EnvironmentOutput {
	return o.ApplyT(func(v *Environment) Environment { return *v }).(EnvironmentOutput)
}

func (o EnvironmentPtrOutput) CustomValues() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Environment) map[string]string {
		if v == nil {
			return nil
		}
		return v.CustomValues
	}).(pulumi.StringMapOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//          ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//          ExprArgs{...}
//
//  or:
//
//          nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyT(func(v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr { return *v }).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// A set of properties that uniquely identify a given Docker image.
type Fingerprint struct {
	// Required. The layer ID of the final layer in the Docker image's v1 representation.
	V1Name *string `pulumi:"v1Name"`
	// Required. The ordered list of v2 blobs that represent a given image.
	V2Blob []string `pulumi:"v2Blob"`
	// Output only. The name of the image's v2 blobs computed via: [bottom] := v2_blobbottom := sha256(v2_blob[N] + " " + v2_name[N+1]) Only the name of the final blob is kept.
	V2Name *string `pulumi:"v2Name"`
}

// FingerprintInput is an input type that accepts FingerprintArgs and FingerprintOutput values.
// You can construct a concrete instance of `FingerprintInput` via:
//
//          FingerprintArgs{...}
type FingerprintInput interface {
	pulumi.Input

	ToFingerprintOutput() FingerprintOutput
	ToFingerprintOutputWithContext(context.Context) FingerprintOutput
}

// A set of properties that uniquely identify a given Docker image.
type FingerprintArgs struct {
	// Required. The layer ID of the final layer in the Docker image's v1 representation.
	V1Name pulumi.StringPtrInput `pulumi:"v1Name"`
	// Required. The ordered list of v2 blobs that represent a given image.
	V2Blob pulumi.StringArrayInput `pulumi:"v2Blob"`
	// Output only. The name of the image's v2 blobs computed via: [bottom] := v2_blobbottom := sha256(v2_blob[N] + " " + v2_name[N+1]) Only the name of the final blob is kept.
	V2Name pulumi.StringPtrInput `pulumi:"v2Name"`
}

func (FingerprintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Fingerprint)(nil)).Elem()
}

func (i FingerprintArgs) ToFingerprintOutput() FingerprintOutput {
	return i.ToFingerprintOutputWithContext(context.Background())
}

func (i FingerprintArgs) ToFingerprintOutputWithContext(ctx context.Context) FingerprintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FingerprintOutput)
}

func (i FingerprintArgs) ToFingerprintPtrOutput() FingerprintPtrOutput {
	return i.ToFingerprintPtrOutputWithContext(context.Background())
}

func (i FingerprintArgs) ToFingerprintPtrOutputWithContext(ctx context.Context) FingerprintPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FingerprintOutput).ToFingerprintPtrOutputWithContext(ctx)
}

// FingerprintPtrInput is an input type that accepts FingerprintArgs, FingerprintPtr and FingerprintPtrOutput values.
// You can construct a concrete instance of `FingerprintPtrInput` via:
//
//          FingerprintArgs{...}
//
//  or:
//
//          nil
type FingerprintPtrInput interface {
	pulumi.Input

	ToFingerprintPtrOutput() FingerprintPtrOutput
	ToFingerprintPtrOutputWithContext(context.Context) FingerprintPtrOutput
}

type fingerprintPtrType FingerprintArgs

func FingerprintPtr(v *FingerprintArgs) FingerprintPtrInput {
	return (*fingerprintPtrType)(v)
}

func (*fingerprintPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Fingerprint)(nil)).Elem()
}

func (i *fingerprintPtrType) ToFingerprintPtrOutput() FingerprintPtrOutput {
	return i.ToFingerprintPtrOutputWithContext(context.Background())
}

func (i *fingerprintPtrType) ToFingerprintPtrOutputWithContext(ctx context.Context) FingerprintPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FingerprintPtrOutput)
}

// A set of properties that uniquely identify a given Docker image.
type FingerprintOutput struct{ *pulumi.OutputState }

func (FingerprintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Fingerprint)(nil)).Elem()
}

func (o FingerprintOutput) ToFingerprintOutput() FingerprintOutput {
	return o
}

func (o FingerprintOutput) ToFingerprintOutputWithContext(ctx context.Context) FingerprintOutput {
	return o
}

func (o FingerprintOutput) ToFingerprintPtrOutput() FingerprintPtrOutput {
	return o.ToFingerprintPtrOutputWithContext(context.Background())
}

func (o FingerprintOutput) ToFingerprintPtrOutputWithContext(ctx context.Context) FingerprintPtrOutput {
	return o.ApplyT(func(v Fingerprint) *Fingerprint {
		return &v
	}).(FingerprintPtrOutput)
}

// Required. The layer ID of the final layer in the Docker image's v1 representation.
func (o FingerprintOutput) V1Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Fingerprint) *string { return v.V1Name }).(pulumi.StringPtrOutput)
}

// Required. The ordered list of v2 blobs that represent a given image.
func (o FingerprintOutput) V2Blob() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Fingerprint) []string { return v.V2Blob }).(pulumi.StringArrayOutput)
}

// Output only. The name of the image's v2 blobs computed via: [bottom] := v2_blobbottom := sha256(v2_blob[N] + " " + v2_name[N+1]) Only the name of the final blob is kept.
func (o FingerprintOutput) V2Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Fingerprint) *string { return v.V2Name }).(pulumi.StringPtrOutput)
}

type FingerprintPtrOutput struct{ *pulumi.OutputState }

func (FingerprintPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Fingerprint)(nil)).Elem()
}

func (o FingerprintPtrOutput) ToFingerprintPtrOutput() FingerprintPtrOutput {
	return o
}

func (o FingerprintPtrOutput) ToFingerprintPtrOutputWithContext(ctx context.Context) FingerprintPtrOutput {
	return o
}

func (o FingerprintPtrOutput) Elem() FingerprintOutput {
	return o.ApplyT(func(v *Fingerprint) Fingerprint { return *v }).(FingerprintOutput)
}

// Required. The layer ID of the final layer in the Docker image's v1 representation.
func (o FingerprintPtrOutput) V1Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Fingerprint) *string {
		if v == nil {
			return nil
		}
		return v.V1Name
	}).(pulumi.StringPtrOutput)
}

// Required. The ordered list of v2 blobs that represent a given image.
func (o FingerprintPtrOutput) V2Blob() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Fingerprint) []string {
		if v == nil {
			return nil
		}
		return v.V2Blob
	}).(pulumi.StringArrayOutput)
}

// Output only. The name of the image's v2 blobs computed via: [bottom] := v2_blobbottom := sha256(v2_blob[N] + " " + v2_name[N+1]) Only the name of the final blob is kept.
func (o FingerprintPtrOutput) V2Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Fingerprint) *string {
		if v == nil {
			return nil
		}
		return v.V2Name
	}).(pulumi.StringPtrOutput)
}

// An attestation wrapper that uses the Grafeas `Signature` message. This attestation must define the `serialized_payload` that the `signatures` verify and any metadata necessary to interpret that plaintext. The signatures should always be over the `serialized_payload` bytestring.
type GenericSignedAttestation struct {
	// Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).
	ContentType *string `pulumi:"contentType"`
	// The serialized payload that is verified by one or more `signatures`. The encoding and semantic meaning of this payload must match what is set in `content_type`.
	SerializedPayload *string `pulumi:"serializedPayload"`
	// One or more signatures over `serialized_payload`. Verifier implementations should consider this attestation message verified if at least one `signature` verifies `serialized_payload`. See `Signature` in common.proto for more details on signature structure and verification.
	Signatures []Signature `pulumi:"signatures"`
}

// GenericSignedAttestationInput is an input type that accepts GenericSignedAttestationArgs and GenericSignedAttestationOutput values.
// You can construct a concrete instance of `GenericSignedAttestationInput` via:
//
//          GenericSignedAttestationArgs{...}
type GenericSignedAttestationInput interface {
	pulumi.Input

	ToGenericSignedAttestationOutput() GenericSignedAttestationOutput
	ToGenericSignedAttestationOutputWithContext(context.Context) GenericSignedAttestationOutput
}

// An attestation wrapper that uses the Grafeas `Signature` message. This attestation must define the `serialized_payload` that the `signatures` verify and any metadata necessary to interpret that plaintext. The signatures should always be over the `serialized_payload` bytestring.
type GenericSignedAttestationArgs struct {
	// Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).
	ContentType pulumi.StringPtrInput `pulumi:"contentType"`
	// The serialized payload that is verified by one or more `signatures`. The encoding and semantic meaning of this payload must match what is set in `content_type`.
	SerializedPayload pulumi.StringPtrInput `pulumi:"serializedPayload"`
	// One or more signatures over `serialized_payload`. Verifier implementations should consider this attestation message verified if at least one `signature` verifies `serialized_payload`. See `Signature` in common.proto for more details on signature structure and verification.
	Signatures SignatureArrayInput `pulumi:"signatures"`
}

func (GenericSignedAttestationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GenericSignedAttestation)(nil)).Elem()
}

func (i GenericSignedAttestationArgs) ToGenericSignedAttestationOutput() GenericSignedAttestationOutput {
	return i.ToGenericSignedAttestationOutputWithContext(context.Background())
}

func (i GenericSignedAttestationArgs) ToGenericSignedAttestationOutputWithContext(ctx context.Context) GenericSignedAttestationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GenericSignedAttestationOutput)
}

func (i GenericSignedAttestationArgs) ToGenericSignedAttestationPtrOutput() GenericSignedAttestationPtrOutput {
	return i.ToGenericSignedAttestationPtrOutputWithContext(context.Background())
}

func (i GenericSignedAttestationArgs) ToGenericSignedAttestationPtrOutputWithContext(ctx context.Context) GenericSignedAttestationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GenericSignedAttestationOutput).ToGenericSignedAttestationPtrOutputWithContext(ctx)
}

// GenericSignedAttestationPtrInput is an input type that accepts GenericSignedAttestationArgs, GenericSignedAttestationPtr and GenericSignedAttestationPtrOutput values.
// You can construct a concrete instance of `GenericSignedAttestationPtrInput` via:
//
//          GenericSignedAttestationArgs{...}
//
//  or:
//
//          nil
type GenericSignedAttestationPtrInput interface {
	pulumi.Input

	ToGenericSignedAttestationPtrOutput() GenericSignedAttestationPtrOutput
	ToGenericSignedAttestationPtrOutputWithContext(context.Context) GenericSignedAttestationPtrOutput
}

type genericSignedAttestationPtrType GenericSignedAttestationArgs

func GenericSignedAttestationPtr(v *GenericSignedAttestationArgs) GenericSignedAttestationPtrInput {
	return (*genericSignedAttestationPtrType)(v)
}

func (*genericSignedAttestationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GenericSignedAttestation)(nil)).Elem()
}

func (i *genericSignedAttestationPtrType) ToGenericSignedAttestationPtrOutput() GenericSignedAttestationPtrOutput {
	return i.ToGenericSignedAttestationPtrOutputWithContext(context.Background())
}

func (i *genericSignedAttestationPtrType) ToGenericSignedAttestationPtrOutputWithContext(ctx context.Context) GenericSignedAttestationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GenericSignedAttestationPtrOutput)
}

// An attestation wrapper that uses the Grafeas `Signature` message. This attestation must define the `serialized_payload` that the `signatures` verify and any metadata necessary to interpret that plaintext. The signatures should always be over the `serialized_payload` bytestring.
type GenericSignedAttestationOutput struct{ *pulumi.OutputState }

func (GenericSignedAttestationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GenericSignedAttestation)(nil)).Elem()
}

func (o GenericSignedAttestationOutput) ToGenericSignedAttestationOutput() GenericSignedAttestationOutput {
	return o
}

func (o GenericSignedAttestationOutput) ToGenericSignedAttestationOutputWithContext(ctx context.Context) GenericSignedAttestationOutput {
	return o
}

func (o GenericSignedAttestationOutput) ToGenericSignedAttestationPtrOutput() GenericSignedAttestationPtrOutput {
	return o.ToGenericSignedAttestationPtrOutputWithContext(context.Background())
}

func (o GenericSignedAttestationOutput) ToGenericSignedAttestationPtrOutputWithContext(ctx context.Context) GenericSignedAttestationPtrOutput {
	return o.ApplyT(func(v GenericSignedAttestation) *GenericSignedAttestation {
		return &v
	}).(GenericSignedAttestationPtrOutput)
}

// Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).
func (o GenericSignedAttestationOutput) ContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GenericSignedAttestation) *string { return v.ContentType }).(pulumi.StringPtrOutput)
}

// The serialized payload that is verified by one or more `signatures`. The encoding and semantic meaning of this payload must match what is set in `content_type`.
func (o GenericSignedAttestationOutput) SerializedPayload() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GenericSignedAttestation) *string { return v.SerializedPayload }).(pulumi.StringPtrOutput)
}

// One or more signatures over `serialized_payload`. Verifier implementations should consider this attestation message verified if at least one `signature` verifies `serialized_payload`. See `Signature` in common.proto for more details on signature structure and verification.
func (o GenericSignedAttestationOutput) Signatures() SignatureArrayOutput {
	return o.ApplyT(func(v GenericSignedAttestation) []Signature { return v.Signatures }).(SignatureArrayOutput)
}

type GenericSignedAttestationPtrOutput struct{ *pulumi.OutputState }

func (GenericSignedAttestationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GenericSignedAttestation)(nil)).Elem()
}

func (o GenericSignedAttestationPtrOutput) ToGenericSignedAttestationPtrOutput() GenericSignedAttestationPtrOutput {
	return o
}

func (o GenericSignedAttestationPtrOutput) ToGenericSignedAttestationPtrOutputWithContext(ctx context.Context) GenericSignedAttestationPtrOutput {
	return o
}

func (o GenericSignedAttestationPtrOutput) Elem() GenericSignedAttestationOutput {
	return o.ApplyT(func(v *GenericSignedAttestation) GenericSignedAttestation { return *v }).(GenericSignedAttestationOutput)
}

// Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).
func (o GenericSignedAttestationPtrOutput) ContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GenericSignedAttestation) *string {
		if v == nil {
			return nil
		}
		return v.ContentType
	}).(pulumi.StringPtrOutput)
}

// The serialized payload that is verified by one or more `signatures`. The encoding and semantic meaning of this payload must match what is set in `content_type`.
func (o GenericSignedAttestationPtrOutput) SerializedPayload() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GenericSignedAttestation) *string {
		if v == nil {
			return nil
		}
		return v.SerializedPayload
	}).(pulumi.StringPtrOutput)
}

// One or more signatures over `serialized_payload`. Verifier implementations should consider this attestation message verified if at least one `signature` verifies `serialized_payload`. See `Signature` in common.proto for more details on signature structure and verification.
func (o GenericSignedAttestationPtrOutput) Signatures() SignatureArrayOutput {
	return o.ApplyT(func(v *GenericSignedAttestation) []Signature {
		if v == nil {
			return nil
		}
		return v.Signatures
	}).(SignatureArrayOutput)
}

// A SourceContext referring to a Gerrit project.
type GerritSourceContext struct {
	// An alias, which may be a branch or tag.
	AliasContext *AliasContext `pulumi:"aliasContext"`
	// The full project name within the host. Projects may be nested, so "project/subproject" is a valid project name. The "repo name" is the hostURI/project.
	GerritProject *string `pulumi:"gerritProject"`
	// The URI of a running Gerrit instance.
	HostUri *string `pulumi:"hostUri"`
	// A revision (commit) ID.
	RevisionId *string `pulumi:"revisionId"`
}

// GerritSourceContextInput is an input type that accepts GerritSourceContextArgs and GerritSourceContextOutput values.
// You can construct a concrete instance of `GerritSourceContextInput` via:
//
//          GerritSourceContextArgs{...}
type GerritSourceContextInput interface {
	pulumi.Input

	ToGerritSourceContextOutput() GerritSourceContextOutput
	ToGerritSourceContextOutputWithContext(context.Context) GerritSourceContextOutput
}

// A SourceContext referring to a Gerrit project.
type GerritSourceContextArgs struct {
	// An alias, which may be a branch or tag.
	AliasContext AliasContextPtrInput `pulumi:"aliasContext"`
	// The full project name within the host. Projects may be nested, so "project/subproject" is a valid project name. The "repo name" is the hostURI/project.
	GerritProject pulumi.StringPtrInput `pulumi:"gerritProject"`
	// The URI of a running Gerrit instance.
	HostUri pulumi.StringPtrInput `pulumi:"hostUri"`
	// A revision (commit) ID.
	RevisionId pulumi.StringPtrInput `pulumi:"revisionId"`
}

func (GerritSourceContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GerritSourceContext)(nil)).Elem()
}

func (i GerritSourceContextArgs) ToGerritSourceContextOutput() GerritSourceContextOutput {
	return i.ToGerritSourceContextOutputWithContext(context.Background())
}

func (i GerritSourceContextArgs) ToGerritSourceContextOutputWithContext(ctx context.Context) GerritSourceContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GerritSourceContextOutput)
}

func (i GerritSourceContextArgs) ToGerritSourceContextPtrOutput() GerritSourceContextPtrOutput {
	return i.ToGerritSourceContextPtrOutputWithContext(context.Background())
}

func (i GerritSourceContextArgs) ToGerritSourceContextPtrOutputWithContext(ctx context.Context) GerritSourceContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GerritSourceContextOutput).ToGerritSourceContextPtrOutputWithContext(ctx)
}

// GerritSourceContextPtrInput is an input type that accepts GerritSourceContextArgs, GerritSourceContextPtr and GerritSourceContextPtrOutput values.
// You can construct a concrete instance of `GerritSourceContextPtrInput` via:
//
//          GerritSourceContextArgs{...}
//
//  or:
//
//          nil
type GerritSourceContextPtrInput interface {
	pulumi.Input

	ToGerritSourceContextPtrOutput() GerritSourceContextPtrOutput
	ToGerritSourceContextPtrOutputWithContext(context.Context) GerritSourceContextPtrOutput
}

type gerritSourceContextPtrType GerritSourceContextArgs

func GerritSourceContextPtr(v *GerritSourceContextArgs) GerritSourceContextPtrInput {
	return (*gerritSourceContextPtrType)(v)
}

func (*gerritSourceContextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GerritSourceContext)(nil)).Elem()
}

func (i *gerritSourceContextPtrType) ToGerritSourceContextPtrOutput() GerritSourceContextPtrOutput {
	return i.ToGerritSourceContextPtrOutputWithContext(context.Background())
}

func (i *gerritSourceContextPtrType) ToGerritSourceContextPtrOutputWithContext(ctx context.Context) GerritSourceContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GerritSourceContextPtrOutput)
}

// A SourceContext referring to a Gerrit project.
type GerritSourceContextOutput struct{ *pulumi.OutputState }

func (GerritSourceContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GerritSourceContext)(nil)).Elem()
}

func (o GerritSourceContextOutput) ToGerritSourceContextOutput() GerritSourceContextOutput {
	return o
}

func (o GerritSourceContextOutput) ToGerritSourceContextOutputWithContext(ctx context.Context) GerritSourceContextOutput {
	return o
}

func (o GerritSourceContextOutput) ToGerritSourceContextPtrOutput() GerritSourceContextPtrOutput {
	return o.ToGerritSourceContextPtrOutputWithContext(context.Background())
}

func (o GerritSourceContextOutput) ToGerritSourceContextPtrOutputWithContext(ctx context.Context) GerritSourceContextPtrOutput {
	return o.ApplyT(func(v GerritSourceContext) *GerritSourceContext {
		return &v
	}).(GerritSourceContextPtrOutput)
}

// An alias, which may be a branch or tag.
func (o GerritSourceContextOutput) AliasContext() AliasContextPtrOutput {
	return o.ApplyT(func(v GerritSourceContext) *AliasContext { return v.AliasContext }).(AliasContextPtrOutput)
}

// The full project name within the host. Projects may be nested, so "project/subproject" is a valid project name. The "repo name" is the hostURI/project.
func (o GerritSourceContextOutput) GerritProject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GerritSourceContext) *string { return v.GerritProject }).(pulumi.StringPtrOutput)
}

// The URI of a running Gerrit instance.
func (o GerritSourceContextOutput) HostUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GerritSourceContext) *string { return v.HostUri }).(pulumi.StringPtrOutput)
}

// A revision (commit) ID.
func (o GerritSourceContextOutput) RevisionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GerritSourceContext) *string { return v.RevisionId }).(pulumi.StringPtrOutput)
}

type GerritSourceContextPtrOutput struct{ *pulumi.OutputState }

func (GerritSourceContextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GerritSourceContext)(nil)).Elem()
}

func (o GerritSourceContextPtrOutput) ToGerritSourceContextPtrOutput() GerritSourceContextPtrOutput {
	return o
}

func (o GerritSourceContextPtrOutput) ToGerritSourceContextPtrOutputWithContext(ctx context.Context) GerritSourceContextPtrOutput {
	return o
}

func (o GerritSourceContextPtrOutput) Elem() GerritSourceContextOutput {
	return o.ApplyT(func(v *GerritSourceContext) GerritSourceContext { return *v }).(GerritSourceContextOutput)
}

// An alias, which may be a branch or tag.
func (o GerritSourceContextPtrOutput) AliasContext() AliasContextPtrOutput {
	return o.ApplyT(func(v *GerritSourceContext) *AliasContext {
		if v == nil {
			return nil
		}
		return v.AliasContext
	}).(AliasContextPtrOutput)
}

// The full project name within the host. Projects may be nested, so "project/subproject" is a valid project name. The "repo name" is the hostURI/project.
func (o GerritSourceContextPtrOutput) GerritProject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GerritSourceContext) *string {
		if v == nil {
			return nil
		}
		return v.GerritProject
	}).(pulumi.StringPtrOutput)
}

// The URI of a running Gerrit instance.
func (o GerritSourceContextPtrOutput) HostUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GerritSourceContext) *string {
		if v == nil {
			return nil
		}
		return v.HostUri
	}).(pulumi.StringPtrOutput)
}

// A revision (commit) ID.
func (o GerritSourceContextPtrOutput) RevisionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GerritSourceContext) *string {
		if v == nil {
			return nil
		}
		return v.RevisionId
	}).(pulumi.StringPtrOutput)
}

// A GitSourceContext denotes a particular revision in a third party Git repository (e.g., GitHub).
type GitSourceContext struct {
	// Git commit hash.
	RevisionId *string `pulumi:"revisionId"`
	// Git repository URL.
	Url *string `pulumi:"url"`
}

// GitSourceContextInput is an input type that accepts GitSourceContextArgs and GitSourceContextOutput values.
// You can construct a concrete instance of `GitSourceContextInput` via:
//
//          GitSourceContextArgs{...}
type GitSourceContextInput interface {
	pulumi.Input

	ToGitSourceContextOutput() GitSourceContextOutput
	ToGitSourceContextOutputWithContext(context.Context) GitSourceContextOutput
}

// A GitSourceContext denotes a particular revision in a third party Git repository (e.g., GitHub).
type GitSourceContextArgs struct {
	// Git commit hash.
	RevisionId pulumi.StringPtrInput `pulumi:"revisionId"`
	// Git repository URL.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (GitSourceContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitSourceContext)(nil)).Elem()
}

func (i GitSourceContextArgs) ToGitSourceContextOutput() GitSourceContextOutput {
	return i.ToGitSourceContextOutputWithContext(context.Background())
}

func (i GitSourceContextArgs) ToGitSourceContextOutputWithContext(ctx context.Context) GitSourceContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitSourceContextOutput)
}

func (i GitSourceContextArgs) ToGitSourceContextPtrOutput() GitSourceContextPtrOutput {
	return i.ToGitSourceContextPtrOutputWithContext(context.Background())
}

func (i GitSourceContextArgs) ToGitSourceContextPtrOutputWithContext(ctx context.Context) GitSourceContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitSourceContextOutput).ToGitSourceContextPtrOutputWithContext(ctx)
}

// GitSourceContextPtrInput is an input type that accepts GitSourceContextArgs, GitSourceContextPtr and GitSourceContextPtrOutput values.
// You can construct a concrete instance of `GitSourceContextPtrInput` via:
//
//          GitSourceContextArgs{...}
//
//  or:
//
//          nil
type GitSourceContextPtrInput interface {
	pulumi.Input

	ToGitSourceContextPtrOutput() GitSourceContextPtrOutput
	ToGitSourceContextPtrOutputWithContext(context.Context) GitSourceContextPtrOutput
}

type gitSourceContextPtrType GitSourceContextArgs

func GitSourceContextPtr(v *GitSourceContextArgs) GitSourceContextPtrInput {
	return (*gitSourceContextPtrType)(v)
}

func (*gitSourceContextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitSourceContext)(nil)).Elem()
}

func (i *gitSourceContextPtrType) ToGitSourceContextPtrOutput() GitSourceContextPtrOutput {
	return i.ToGitSourceContextPtrOutputWithContext(context.Background())
}

func (i *gitSourceContextPtrType) ToGitSourceContextPtrOutputWithContext(ctx context.Context) GitSourceContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitSourceContextPtrOutput)
}

// A GitSourceContext denotes a particular revision in a third party Git repository (e.g., GitHub).
type GitSourceContextOutput struct{ *pulumi.OutputState }

func (GitSourceContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitSourceContext)(nil)).Elem()
}

func (o GitSourceContextOutput) ToGitSourceContextOutput() GitSourceContextOutput {
	return o
}

func (o GitSourceContextOutput) ToGitSourceContextOutputWithContext(ctx context.Context) GitSourceContextOutput {
	return o
}

func (o GitSourceContextOutput) ToGitSourceContextPtrOutput() GitSourceContextPtrOutput {
	return o.ToGitSourceContextPtrOutputWithContext(context.Background())
}

func (o GitSourceContextOutput) ToGitSourceContextPtrOutputWithContext(ctx context.Context) GitSourceContextPtrOutput {
	return o.ApplyT(func(v GitSourceContext) *GitSourceContext {
		return &v
	}).(GitSourceContextPtrOutput)
}

// Git commit hash.
func (o GitSourceContextOutput) RevisionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitSourceContext) *string { return v.RevisionId }).(pulumi.StringPtrOutput)
}

// Git repository URL.
func (o GitSourceContextOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitSourceContext) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type GitSourceContextPtrOutput struct{ *pulumi.OutputState }

func (GitSourceContextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitSourceContext)(nil)).Elem()
}

func (o GitSourceContextPtrOutput) ToGitSourceContextPtrOutput() GitSourceContextPtrOutput {
	return o
}

func (o GitSourceContextPtrOutput) ToGitSourceContextPtrOutputWithContext(ctx context.Context) GitSourceContextPtrOutput {
	return o
}

func (o GitSourceContextPtrOutput) Elem() GitSourceContextOutput {
	return o.ApplyT(func(v *GitSourceContext) GitSourceContext { return *v }).(GitSourceContextOutput)
}

// Git commit hash.
func (o GitSourceContextPtrOutput) RevisionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitSourceContext) *string {
		if v == nil {
			return nil
		}
		return v.RevisionId
	}).(pulumi.StringPtrOutput)
}

// Git repository URL.
func (o GitSourceContextPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitSourceContext) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// Details of a build occurrence.
type GrafeasV1beta1BuildDetails struct {
	// Required. The actual provenance for the build.
	Provenance *BuildProvenance `pulumi:"provenance"`
	// Serialized JSON representation of the provenance, used in generating the build signature in the corresponding build note. After verifying the signature, `provenance_bytes` can be unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json as well to prevent incompatibilities with future changes.
	ProvenanceBytes *string `pulumi:"provenanceBytes"`
}

// GrafeasV1beta1BuildDetailsInput is an input type that accepts GrafeasV1beta1BuildDetailsArgs and GrafeasV1beta1BuildDetailsOutput values.
// You can construct a concrete instance of `GrafeasV1beta1BuildDetailsInput` via:
//
//          GrafeasV1beta1BuildDetailsArgs{...}
type GrafeasV1beta1BuildDetailsInput interface {
	pulumi.Input

	ToGrafeasV1beta1BuildDetailsOutput() GrafeasV1beta1BuildDetailsOutput
	ToGrafeasV1beta1BuildDetailsOutputWithContext(context.Context) GrafeasV1beta1BuildDetailsOutput
}

// Details of a build occurrence.
type GrafeasV1beta1BuildDetailsArgs struct {
	// Required. The actual provenance for the build.
	Provenance BuildProvenancePtrInput `pulumi:"provenance"`
	// Serialized JSON representation of the provenance, used in generating the build signature in the corresponding build note. After verifying the signature, `provenance_bytes` can be unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json as well to prevent incompatibilities with future changes.
	ProvenanceBytes pulumi.StringPtrInput `pulumi:"provenanceBytes"`
}

func (GrafeasV1beta1BuildDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1beta1BuildDetails)(nil)).Elem()
}

func (i GrafeasV1beta1BuildDetailsArgs) ToGrafeasV1beta1BuildDetailsOutput() GrafeasV1beta1BuildDetailsOutput {
	return i.ToGrafeasV1beta1BuildDetailsOutputWithContext(context.Background())
}

func (i GrafeasV1beta1BuildDetailsArgs) ToGrafeasV1beta1BuildDetailsOutputWithContext(ctx context.Context) GrafeasV1beta1BuildDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1beta1BuildDetailsOutput)
}

func (i GrafeasV1beta1BuildDetailsArgs) ToGrafeasV1beta1BuildDetailsPtrOutput() GrafeasV1beta1BuildDetailsPtrOutput {
	return i.ToGrafeasV1beta1BuildDetailsPtrOutputWithContext(context.Background())
}

func (i GrafeasV1beta1BuildDetailsArgs) ToGrafeasV1beta1BuildDetailsPtrOutputWithContext(ctx context.Context) GrafeasV1beta1BuildDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1beta1BuildDetailsOutput).ToGrafeasV1beta1BuildDetailsPtrOutputWithContext(ctx)
}

// GrafeasV1beta1BuildDetailsPtrInput is an input type that accepts GrafeasV1beta1BuildDetailsArgs, GrafeasV1beta1BuildDetailsPtr and GrafeasV1beta1BuildDetailsPtrOutput values.
// You can construct a concrete instance of `GrafeasV1beta1BuildDetailsPtrInput` via:
//
//          GrafeasV1beta1BuildDetailsArgs{...}
//
//  or:
//
//          nil
type GrafeasV1beta1BuildDetailsPtrInput interface {
	pulumi.Input

	ToGrafeasV1beta1BuildDetailsPtrOutput() GrafeasV1beta1BuildDetailsPtrOutput
	ToGrafeasV1beta1BuildDetailsPtrOutputWithContext(context.Context) GrafeasV1beta1BuildDetailsPtrOutput
}

type grafeasV1beta1BuildDetailsPtrType GrafeasV1beta1BuildDetailsArgs

func GrafeasV1beta1BuildDetailsPtr(v *GrafeasV1beta1BuildDetailsArgs) GrafeasV1beta1BuildDetailsPtrInput {
	return (*grafeasV1beta1BuildDetailsPtrType)(v)
}

func (*grafeasV1beta1BuildDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GrafeasV1beta1BuildDetails)(nil)).Elem()
}

func (i *grafeasV1beta1BuildDetailsPtrType) ToGrafeasV1beta1BuildDetailsPtrOutput() GrafeasV1beta1BuildDetailsPtrOutput {
	return i.ToGrafeasV1beta1BuildDetailsPtrOutputWithContext(context.Background())
}

func (i *grafeasV1beta1BuildDetailsPtrType) ToGrafeasV1beta1BuildDetailsPtrOutputWithContext(ctx context.Context) GrafeasV1beta1BuildDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1beta1BuildDetailsPtrOutput)
}

// Details of a build occurrence.
type GrafeasV1beta1BuildDetailsOutput struct{ *pulumi.OutputState }

func (GrafeasV1beta1BuildDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1beta1BuildDetails)(nil)).Elem()
}

func (o GrafeasV1beta1BuildDetailsOutput) ToGrafeasV1beta1BuildDetailsOutput() GrafeasV1beta1BuildDetailsOutput {
	return o
}

func (o GrafeasV1beta1BuildDetailsOutput) ToGrafeasV1beta1BuildDetailsOutputWithContext(ctx context.Context) GrafeasV1beta1BuildDetailsOutput {
	return o
}

func (o GrafeasV1beta1BuildDetailsOutput) ToGrafeasV1beta1BuildDetailsPtrOutput() GrafeasV1beta1BuildDetailsPtrOutput {
	return o.ToGrafeasV1beta1BuildDetailsPtrOutputWithContext(context.Background())
}

func (o GrafeasV1beta1BuildDetailsOutput) ToGrafeasV1beta1BuildDetailsPtrOutputWithContext(ctx context.Context) GrafeasV1beta1BuildDetailsPtrOutput {
	return o.ApplyT(func(v GrafeasV1beta1BuildDetails) *GrafeasV1beta1BuildDetails {
		return &v
	}).(GrafeasV1beta1BuildDetailsPtrOutput)
}

// Required. The actual provenance for the build.
func (o GrafeasV1beta1BuildDetailsOutput) Provenance() BuildProvenancePtrOutput {
	return o.ApplyT(func(v GrafeasV1beta1BuildDetails) *BuildProvenance { return v.Provenance }).(BuildProvenancePtrOutput)
}

// Serialized JSON representation of the provenance, used in generating the build signature in the corresponding build note. After verifying the signature, `provenance_bytes` can be unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json as well to prevent incompatibilities with future changes.
func (o GrafeasV1beta1BuildDetailsOutput) ProvenanceBytes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GrafeasV1beta1BuildDetails) *string { return v.ProvenanceBytes }).(pulumi.StringPtrOutput)
}

type GrafeasV1beta1BuildDetailsPtrOutput struct{ *pulumi.OutputState }

func (GrafeasV1beta1BuildDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GrafeasV1beta1BuildDetails)(nil)).Elem()
}

func (o GrafeasV1beta1BuildDetailsPtrOutput) ToGrafeasV1beta1BuildDetailsPtrOutput() GrafeasV1beta1BuildDetailsPtrOutput {
	return o
}

func (o GrafeasV1beta1BuildDetailsPtrOutput) ToGrafeasV1beta1BuildDetailsPtrOutputWithContext(ctx context.Context) GrafeasV1beta1BuildDetailsPtrOutput {
	return o
}

func (o GrafeasV1beta1BuildDetailsPtrOutput) Elem() GrafeasV1beta1BuildDetailsOutput {
	return o.ApplyT(func(v *GrafeasV1beta1BuildDetails) GrafeasV1beta1BuildDetails { return *v }).(GrafeasV1beta1BuildDetailsOutput)
}

// Required. The actual provenance for the build.
func (o GrafeasV1beta1BuildDetailsPtrOutput) Provenance() BuildProvenancePtrOutput {
	return o.ApplyT(func(v *GrafeasV1beta1BuildDetails) *BuildProvenance {
		if v == nil {
			return nil
		}
		return v.Provenance
	}).(BuildProvenancePtrOutput)
}

// Serialized JSON representation of the provenance, used in generating the build signature in the corresponding build note. After verifying the signature, `provenance_bytes` can be unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json as well to prevent incompatibilities with future changes.
func (o GrafeasV1beta1BuildDetailsPtrOutput) ProvenanceBytes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GrafeasV1beta1BuildDetails) *string {
		if v == nil {
			return nil
		}
		return v.ProvenanceBytes
	}).(pulumi.StringPtrOutput)
}

// Details of a deployment occurrence.
type GrafeasV1beta1DeploymentDetails struct {
	// Required. Deployment history for the resource.
	Deployment *Deployment `pulumi:"deployment"`
}

// GrafeasV1beta1DeploymentDetailsInput is an input type that accepts GrafeasV1beta1DeploymentDetailsArgs and GrafeasV1beta1DeploymentDetailsOutput values.
// You can construct a concrete instance of `GrafeasV1beta1DeploymentDetailsInput` via:
//
//          GrafeasV1beta1DeploymentDetailsArgs{...}
type GrafeasV1beta1DeploymentDetailsInput interface {
	pulumi.Input

	ToGrafeasV1beta1DeploymentDetailsOutput() GrafeasV1beta1DeploymentDetailsOutput
	ToGrafeasV1beta1DeploymentDetailsOutputWithContext(context.Context) GrafeasV1beta1DeploymentDetailsOutput
}

// Details of a deployment occurrence.
type GrafeasV1beta1DeploymentDetailsArgs struct {
	// Required. Deployment history for the resource.
	Deployment DeploymentPtrInput `pulumi:"deployment"`
}

func (GrafeasV1beta1DeploymentDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1beta1DeploymentDetails)(nil)).Elem()
}

func (i GrafeasV1beta1DeploymentDetailsArgs) ToGrafeasV1beta1DeploymentDetailsOutput() GrafeasV1beta1DeploymentDetailsOutput {
	return i.ToGrafeasV1beta1DeploymentDetailsOutputWithContext(context.Background())
}

func (i GrafeasV1beta1DeploymentDetailsArgs) ToGrafeasV1beta1DeploymentDetailsOutputWithContext(ctx context.Context) GrafeasV1beta1DeploymentDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1beta1DeploymentDetailsOutput)
}

func (i GrafeasV1beta1DeploymentDetailsArgs) ToGrafeasV1beta1DeploymentDetailsPtrOutput() GrafeasV1beta1DeploymentDetailsPtrOutput {
	return i.ToGrafeasV1beta1DeploymentDetailsPtrOutputWithContext(context.Background())
}

func (i GrafeasV1beta1DeploymentDetailsArgs) ToGrafeasV1beta1DeploymentDetailsPtrOutputWithContext(ctx context.Context) GrafeasV1beta1DeploymentDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1beta1DeploymentDetailsOutput).ToGrafeasV1beta1DeploymentDetailsPtrOutputWithContext(ctx)
}

// GrafeasV1beta1DeploymentDetailsPtrInput is an input type that accepts GrafeasV1beta1DeploymentDetailsArgs, GrafeasV1beta1DeploymentDetailsPtr and GrafeasV1beta1DeploymentDetailsPtrOutput values.
// You can construct a concrete instance of `GrafeasV1beta1DeploymentDetailsPtrInput` via:
//
//          GrafeasV1beta1DeploymentDetailsArgs{...}
//
//  or:
//
//          nil
type GrafeasV1beta1DeploymentDetailsPtrInput interface {
	pulumi.Input

	ToGrafeasV1beta1DeploymentDetailsPtrOutput() GrafeasV1beta1DeploymentDetailsPtrOutput
	ToGrafeasV1beta1DeploymentDetailsPtrOutputWithContext(context.Context) GrafeasV1beta1DeploymentDetailsPtrOutput
}

type grafeasV1beta1DeploymentDetailsPtrType GrafeasV1beta1DeploymentDetailsArgs

func GrafeasV1beta1DeploymentDetailsPtr(v *GrafeasV1beta1DeploymentDetailsArgs) GrafeasV1beta1DeploymentDetailsPtrInput {
	return (*grafeasV1beta1DeploymentDetailsPtrType)(v)
}

func (*grafeasV1beta1DeploymentDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GrafeasV1beta1DeploymentDetails)(nil)).Elem()
}

func (i *grafeasV1beta1DeploymentDetailsPtrType) ToGrafeasV1beta1DeploymentDetailsPtrOutput() GrafeasV1beta1DeploymentDetailsPtrOutput {
	return i.ToGrafeasV1beta1DeploymentDetailsPtrOutputWithContext(context.Background())
}

func (i *grafeasV1beta1DeploymentDetailsPtrType) ToGrafeasV1beta1DeploymentDetailsPtrOutputWithContext(ctx context.Context) GrafeasV1beta1DeploymentDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1beta1DeploymentDetailsPtrOutput)
}

// Details of a deployment occurrence.
type GrafeasV1beta1DeploymentDetailsOutput struct{ *pulumi.OutputState }

func (GrafeasV1beta1DeploymentDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1beta1DeploymentDetails)(nil)).Elem()
}

func (o GrafeasV1beta1DeploymentDetailsOutput) ToGrafeasV1beta1DeploymentDetailsOutput() GrafeasV1beta1DeploymentDetailsOutput {
	return o
}

func (o GrafeasV1beta1DeploymentDetailsOutput) ToGrafeasV1beta1DeploymentDetailsOutputWithContext(ctx context.Context) GrafeasV1beta1DeploymentDetailsOutput {
	return o
}

func (o GrafeasV1beta1DeploymentDetailsOutput) ToGrafeasV1beta1DeploymentDetailsPtrOutput() GrafeasV1beta1DeploymentDetailsPtrOutput {
	return o.ToGrafeasV1beta1DeploymentDetailsPtrOutputWithContext(context.Background())
}

func (o GrafeasV1beta1DeploymentDetailsOutput) ToGrafeasV1beta1DeploymentDetailsPtrOutputWithContext(ctx context.Context) GrafeasV1beta1DeploymentDetailsPtrOutput {
	return o.ApplyT(func(v GrafeasV1beta1DeploymentDetails) *GrafeasV1beta1DeploymentDetails {
		return &v
	}).(GrafeasV1beta1DeploymentDetailsPtrOutput)
}

// Required. Deployment history for the resource.
func (o GrafeasV1beta1DeploymentDetailsOutput) Deployment() DeploymentPtrOutput {
	return o.ApplyT(func(v GrafeasV1beta1DeploymentDetails) *Deployment { return v.Deployment }).(DeploymentPtrOutput)
}

type GrafeasV1beta1DeploymentDetailsPtrOutput struct{ *pulumi.OutputState }

func (GrafeasV1beta1DeploymentDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GrafeasV1beta1DeploymentDetails)(nil)).Elem()
}

func (o GrafeasV1beta1DeploymentDetailsPtrOutput) ToGrafeasV1beta1DeploymentDetailsPtrOutput() GrafeasV1beta1DeploymentDetailsPtrOutput {
	return o
}

func (o GrafeasV1beta1DeploymentDetailsPtrOutput) ToGrafeasV1beta1DeploymentDetailsPtrOutputWithContext(ctx context.Context) GrafeasV1beta1DeploymentDetailsPtrOutput {
	return o
}

func (o GrafeasV1beta1DeploymentDetailsPtrOutput) Elem() GrafeasV1beta1DeploymentDetailsOutput {
	return o.ApplyT(func(v *GrafeasV1beta1DeploymentDetails) GrafeasV1beta1DeploymentDetails { return *v }).(GrafeasV1beta1DeploymentDetailsOutput)
}

// Required. Deployment history for the resource.
func (o GrafeasV1beta1DeploymentDetailsPtrOutput) Deployment() DeploymentPtrOutput {
	return o.ApplyT(func(v *GrafeasV1beta1DeploymentDetails) *Deployment {
		if v == nil {
			return nil
		}
		return v.Deployment
	}).(DeploymentPtrOutput)
}

// Details of a discovery occurrence.
type GrafeasV1beta1DiscoveryDetails struct {
	// Required. Analysis status for the discovered resource.
	Discovered *Discovered `pulumi:"discovered"`
}

// GrafeasV1beta1DiscoveryDetailsInput is an input type that accepts GrafeasV1beta1DiscoveryDetailsArgs and GrafeasV1beta1DiscoveryDetailsOutput values.
// You can construct a concrete instance of `GrafeasV1beta1DiscoveryDetailsInput` via:
//
//          GrafeasV1beta1DiscoveryDetailsArgs{...}
type GrafeasV1beta1DiscoveryDetailsInput interface {
	pulumi.Input

	ToGrafeasV1beta1DiscoveryDetailsOutput() GrafeasV1beta1DiscoveryDetailsOutput
	ToGrafeasV1beta1DiscoveryDetailsOutputWithContext(context.Context) GrafeasV1beta1DiscoveryDetailsOutput
}

// Details of a discovery occurrence.
type GrafeasV1beta1DiscoveryDetailsArgs struct {
	// Required. Analysis status for the discovered resource.
	Discovered DiscoveredPtrInput `pulumi:"discovered"`
}

func (GrafeasV1beta1DiscoveryDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1beta1DiscoveryDetails)(nil)).Elem()
}

func (i GrafeasV1beta1DiscoveryDetailsArgs) ToGrafeasV1beta1DiscoveryDetailsOutput() GrafeasV1beta1DiscoveryDetailsOutput {
	return i.ToGrafeasV1beta1DiscoveryDetailsOutputWithContext(context.Background())
}

func (i GrafeasV1beta1DiscoveryDetailsArgs) ToGrafeasV1beta1DiscoveryDetailsOutputWithContext(ctx context.Context) GrafeasV1beta1DiscoveryDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1beta1DiscoveryDetailsOutput)
}

func (i GrafeasV1beta1DiscoveryDetailsArgs) ToGrafeasV1beta1DiscoveryDetailsPtrOutput() GrafeasV1beta1DiscoveryDetailsPtrOutput {
	return i.ToGrafeasV1beta1DiscoveryDetailsPtrOutputWithContext(context.Background())
}

func (i GrafeasV1beta1DiscoveryDetailsArgs) ToGrafeasV1beta1DiscoveryDetailsPtrOutputWithContext(ctx context.Context) GrafeasV1beta1DiscoveryDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1beta1DiscoveryDetailsOutput).ToGrafeasV1beta1DiscoveryDetailsPtrOutputWithContext(ctx)
}

// GrafeasV1beta1DiscoveryDetailsPtrInput is an input type that accepts GrafeasV1beta1DiscoveryDetailsArgs, GrafeasV1beta1DiscoveryDetailsPtr and GrafeasV1beta1DiscoveryDetailsPtrOutput values.
// You can construct a concrete instance of `GrafeasV1beta1DiscoveryDetailsPtrInput` via:
//
//          GrafeasV1beta1DiscoveryDetailsArgs{...}
//
//  or:
//
//          nil
type GrafeasV1beta1DiscoveryDetailsPtrInput interface {
	pulumi.Input

	ToGrafeasV1beta1DiscoveryDetailsPtrOutput() GrafeasV1beta1DiscoveryDetailsPtrOutput
	ToGrafeasV1beta1DiscoveryDetailsPtrOutputWithContext(context.Context) GrafeasV1beta1DiscoveryDetailsPtrOutput
}

type grafeasV1beta1DiscoveryDetailsPtrType GrafeasV1beta1DiscoveryDetailsArgs

func GrafeasV1beta1DiscoveryDetailsPtr(v *GrafeasV1beta1DiscoveryDetailsArgs) GrafeasV1beta1DiscoveryDetailsPtrInput {
	return (*grafeasV1beta1DiscoveryDetailsPtrType)(v)
}

func (*grafeasV1beta1DiscoveryDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GrafeasV1beta1DiscoveryDetails)(nil)).Elem()
}

func (i *grafeasV1beta1DiscoveryDetailsPtrType) ToGrafeasV1beta1DiscoveryDetailsPtrOutput() GrafeasV1beta1DiscoveryDetailsPtrOutput {
	return i.ToGrafeasV1beta1DiscoveryDetailsPtrOutputWithContext(context.Background())
}

func (i *grafeasV1beta1DiscoveryDetailsPtrType) ToGrafeasV1beta1DiscoveryDetailsPtrOutputWithContext(ctx context.Context) GrafeasV1beta1DiscoveryDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1beta1DiscoveryDetailsPtrOutput)
}

// Details of a discovery occurrence.
type GrafeasV1beta1DiscoveryDetailsOutput struct{ *pulumi.OutputState }

func (GrafeasV1beta1DiscoveryDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1beta1DiscoveryDetails)(nil)).Elem()
}

func (o GrafeasV1beta1DiscoveryDetailsOutput) ToGrafeasV1beta1DiscoveryDetailsOutput() GrafeasV1beta1DiscoveryDetailsOutput {
	return o
}

func (o GrafeasV1beta1DiscoveryDetailsOutput) ToGrafeasV1beta1DiscoveryDetailsOutputWithContext(ctx context.Context) GrafeasV1beta1DiscoveryDetailsOutput {
	return o
}

func (o GrafeasV1beta1DiscoveryDetailsOutput) ToGrafeasV1beta1DiscoveryDetailsPtrOutput() GrafeasV1beta1DiscoveryDetailsPtrOutput {
	return o.ToGrafeasV1beta1DiscoveryDetailsPtrOutputWithContext(context.Background())
}

func (o GrafeasV1beta1DiscoveryDetailsOutput) ToGrafeasV1beta1DiscoveryDetailsPtrOutputWithContext(ctx context.Context) GrafeasV1beta1DiscoveryDetailsPtrOutput {
	return o.ApplyT(func(v GrafeasV1beta1DiscoveryDetails) *GrafeasV1beta1DiscoveryDetails {
		return &v
	}).(GrafeasV1beta1DiscoveryDetailsPtrOutput)
}

// Required. Analysis status for the discovered resource.
func (o GrafeasV1beta1DiscoveryDetailsOutput) Discovered() DiscoveredPtrOutput {
	return o.ApplyT(func(v GrafeasV1beta1DiscoveryDetails) *Discovered { return v.Discovered }).(DiscoveredPtrOutput)
}

type GrafeasV1beta1DiscoveryDetailsPtrOutput struct{ *pulumi.OutputState }

func (GrafeasV1beta1DiscoveryDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GrafeasV1beta1DiscoveryDetails)(nil)).Elem()
}

func (o GrafeasV1beta1DiscoveryDetailsPtrOutput) ToGrafeasV1beta1DiscoveryDetailsPtrOutput() GrafeasV1beta1DiscoveryDetailsPtrOutput {
	return o
}

func (o GrafeasV1beta1DiscoveryDetailsPtrOutput) ToGrafeasV1beta1DiscoveryDetailsPtrOutputWithContext(ctx context.Context) GrafeasV1beta1DiscoveryDetailsPtrOutput {
	return o
}

func (o GrafeasV1beta1DiscoveryDetailsPtrOutput) Elem() GrafeasV1beta1DiscoveryDetailsOutput {
	return o.ApplyT(func(v *GrafeasV1beta1DiscoveryDetails) GrafeasV1beta1DiscoveryDetails { return *v }).(GrafeasV1beta1DiscoveryDetailsOutput)
}

// Required. Analysis status for the discovered resource.
func (o GrafeasV1beta1DiscoveryDetailsPtrOutput) Discovered() DiscoveredPtrOutput {
	return o.ApplyT(func(v *GrafeasV1beta1DiscoveryDetails) *Discovered {
		if v == nil {
			return nil
		}
		return v.Discovered
	}).(DiscoveredPtrOutput)
}

// Details of an image occurrence.
type GrafeasV1beta1ImageDetails struct {
	// Required. Immutable. The child image derived from the base image.
	DerivedImage *Derived `pulumi:"derivedImage"`
}

// GrafeasV1beta1ImageDetailsInput is an input type that accepts GrafeasV1beta1ImageDetailsArgs and GrafeasV1beta1ImageDetailsOutput values.
// You can construct a concrete instance of `GrafeasV1beta1ImageDetailsInput` via:
//
//          GrafeasV1beta1ImageDetailsArgs{...}
type GrafeasV1beta1ImageDetailsInput interface {
	pulumi.Input

	ToGrafeasV1beta1ImageDetailsOutput() GrafeasV1beta1ImageDetailsOutput
	ToGrafeasV1beta1ImageDetailsOutputWithContext(context.Context) GrafeasV1beta1ImageDetailsOutput
}

// Details of an image occurrence.
type GrafeasV1beta1ImageDetailsArgs struct {
	// Required. Immutable. The child image derived from the base image.
	DerivedImage DerivedPtrInput `pulumi:"derivedImage"`
}

func (GrafeasV1beta1ImageDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1beta1ImageDetails)(nil)).Elem()
}

func (i GrafeasV1beta1ImageDetailsArgs) ToGrafeasV1beta1ImageDetailsOutput() GrafeasV1beta1ImageDetailsOutput {
	return i.ToGrafeasV1beta1ImageDetailsOutputWithContext(context.Background())
}

func (i GrafeasV1beta1ImageDetailsArgs) ToGrafeasV1beta1ImageDetailsOutputWithContext(ctx context.Context) GrafeasV1beta1ImageDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1beta1ImageDetailsOutput)
}

func (i GrafeasV1beta1ImageDetailsArgs) ToGrafeasV1beta1ImageDetailsPtrOutput() GrafeasV1beta1ImageDetailsPtrOutput {
	return i.ToGrafeasV1beta1ImageDetailsPtrOutputWithContext(context.Background())
}

func (i GrafeasV1beta1ImageDetailsArgs) ToGrafeasV1beta1ImageDetailsPtrOutputWithContext(ctx context.Context) GrafeasV1beta1ImageDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1beta1ImageDetailsOutput).ToGrafeasV1beta1ImageDetailsPtrOutputWithContext(ctx)
}

// GrafeasV1beta1ImageDetailsPtrInput is an input type that accepts GrafeasV1beta1ImageDetailsArgs, GrafeasV1beta1ImageDetailsPtr and GrafeasV1beta1ImageDetailsPtrOutput values.
// You can construct a concrete instance of `GrafeasV1beta1ImageDetailsPtrInput` via:
//
//          GrafeasV1beta1ImageDetailsArgs{...}
//
//  or:
//
//          nil
type GrafeasV1beta1ImageDetailsPtrInput interface {
	pulumi.Input

	ToGrafeasV1beta1ImageDetailsPtrOutput() GrafeasV1beta1ImageDetailsPtrOutput
	ToGrafeasV1beta1ImageDetailsPtrOutputWithContext(context.Context) GrafeasV1beta1ImageDetailsPtrOutput
}

type grafeasV1beta1ImageDetailsPtrType GrafeasV1beta1ImageDetailsArgs

func GrafeasV1beta1ImageDetailsPtr(v *GrafeasV1beta1ImageDetailsArgs) GrafeasV1beta1ImageDetailsPtrInput {
	return (*grafeasV1beta1ImageDetailsPtrType)(v)
}

func (*grafeasV1beta1ImageDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GrafeasV1beta1ImageDetails)(nil)).Elem()
}

func (i *grafeasV1beta1ImageDetailsPtrType) ToGrafeasV1beta1ImageDetailsPtrOutput() GrafeasV1beta1ImageDetailsPtrOutput {
	return i.ToGrafeasV1beta1ImageDetailsPtrOutputWithContext(context.Background())
}

func (i *grafeasV1beta1ImageDetailsPtrType) ToGrafeasV1beta1ImageDetailsPtrOutputWithContext(ctx context.Context) GrafeasV1beta1ImageDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1beta1ImageDetailsPtrOutput)
}

// Details of an image occurrence.
type GrafeasV1beta1ImageDetailsOutput struct{ *pulumi.OutputState }

func (GrafeasV1beta1ImageDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1beta1ImageDetails)(nil)).Elem()
}

func (o GrafeasV1beta1ImageDetailsOutput) ToGrafeasV1beta1ImageDetailsOutput() GrafeasV1beta1ImageDetailsOutput {
	return o
}

func (o GrafeasV1beta1ImageDetailsOutput) ToGrafeasV1beta1ImageDetailsOutputWithContext(ctx context.Context) GrafeasV1beta1ImageDetailsOutput {
	return o
}

func (o GrafeasV1beta1ImageDetailsOutput) ToGrafeasV1beta1ImageDetailsPtrOutput() GrafeasV1beta1ImageDetailsPtrOutput {
	return o.ToGrafeasV1beta1ImageDetailsPtrOutputWithContext(context.Background())
}

func (o GrafeasV1beta1ImageDetailsOutput) ToGrafeasV1beta1ImageDetailsPtrOutputWithContext(ctx context.Context) GrafeasV1beta1ImageDetailsPtrOutput {
	return o.ApplyT(func(v GrafeasV1beta1ImageDetails) *GrafeasV1beta1ImageDetails {
		return &v
	}).(GrafeasV1beta1ImageDetailsPtrOutput)
}

// Required. Immutable. The child image derived from the base image.
func (o GrafeasV1beta1ImageDetailsOutput) DerivedImage() DerivedPtrOutput {
	return o.ApplyT(func(v GrafeasV1beta1ImageDetails) *Derived { return v.DerivedImage }).(DerivedPtrOutput)
}

type GrafeasV1beta1ImageDetailsPtrOutput struct{ *pulumi.OutputState }

func (GrafeasV1beta1ImageDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GrafeasV1beta1ImageDetails)(nil)).Elem()
}

func (o GrafeasV1beta1ImageDetailsPtrOutput) ToGrafeasV1beta1ImageDetailsPtrOutput() GrafeasV1beta1ImageDetailsPtrOutput {
	return o
}

func (o GrafeasV1beta1ImageDetailsPtrOutput) ToGrafeasV1beta1ImageDetailsPtrOutputWithContext(ctx context.Context) GrafeasV1beta1ImageDetailsPtrOutput {
	return o
}

func (o GrafeasV1beta1ImageDetailsPtrOutput) Elem() GrafeasV1beta1ImageDetailsOutput {
	return o.ApplyT(func(v *GrafeasV1beta1ImageDetails) GrafeasV1beta1ImageDetails { return *v }).(GrafeasV1beta1ImageDetailsOutput)
}

// Required. Immutable. The child image derived from the base image.
func (o GrafeasV1beta1ImageDetailsPtrOutput) DerivedImage() DerivedPtrOutput {
	return o.ApplyT(func(v *GrafeasV1beta1ImageDetails) *Derived {
		if v == nil {
			return nil
		}
		return v.DerivedImage
	}).(DerivedPtrOutput)
}

type GrafeasV1beta1IntotoArtifact struct {
	Hashes      *ArtifactHashes `pulumi:"hashes"`
	ResourceUri *string         `pulumi:"resourceUri"`
}

// GrafeasV1beta1IntotoArtifactInput is an input type that accepts GrafeasV1beta1IntotoArtifactArgs and GrafeasV1beta1IntotoArtifactOutput values.
// You can construct a concrete instance of `GrafeasV1beta1IntotoArtifactInput` via:
//
//          GrafeasV1beta1IntotoArtifactArgs{...}
type GrafeasV1beta1IntotoArtifactInput interface {
	pulumi.Input

	ToGrafeasV1beta1IntotoArtifactOutput() GrafeasV1beta1IntotoArtifactOutput
	ToGrafeasV1beta1IntotoArtifactOutputWithContext(context.Context) GrafeasV1beta1IntotoArtifactOutput
}

type GrafeasV1beta1IntotoArtifactArgs struct {
	Hashes      ArtifactHashesPtrInput `pulumi:"hashes"`
	ResourceUri pulumi.StringPtrInput  `pulumi:"resourceUri"`
}

func (GrafeasV1beta1IntotoArtifactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1beta1IntotoArtifact)(nil)).Elem()
}

func (i GrafeasV1beta1IntotoArtifactArgs) ToGrafeasV1beta1IntotoArtifactOutput() GrafeasV1beta1IntotoArtifactOutput {
	return i.ToGrafeasV1beta1IntotoArtifactOutputWithContext(context.Background())
}

func (i GrafeasV1beta1IntotoArtifactArgs) ToGrafeasV1beta1IntotoArtifactOutputWithContext(ctx context.Context) GrafeasV1beta1IntotoArtifactOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1beta1IntotoArtifactOutput)
}

// GrafeasV1beta1IntotoArtifactArrayInput is an input type that accepts GrafeasV1beta1IntotoArtifactArray and GrafeasV1beta1IntotoArtifactArrayOutput values.
// You can construct a concrete instance of `GrafeasV1beta1IntotoArtifactArrayInput` via:
//
//          GrafeasV1beta1IntotoArtifactArray{ GrafeasV1beta1IntotoArtifactArgs{...} }
type GrafeasV1beta1IntotoArtifactArrayInput interface {
	pulumi.Input

	ToGrafeasV1beta1IntotoArtifactArrayOutput() GrafeasV1beta1IntotoArtifactArrayOutput
	ToGrafeasV1beta1IntotoArtifactArrayOutputWithContext(context.Context) GrafeasV1beta1IntotoArtifactArrayOutput
}

type GrafeasV1beta1IntotoArtifactArray []GrafeasV1beta1IntotoArtifactInput

func (GrafeasV1beta1IntotoArtifactArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GrafeasV1beta1IntotoArtifact)(nil)).Elem()
}

func (i GrafeasV1beta1IntotoArtifactArray) ToGrafeasV1beta1IntotoArtifactArrayOutput() GrafeasV1beta1IntotoArtifactArrayOutput {
	return i.ToGrafeasV1beta1IntotoArtifactArrayOutputWithContext(context.Background())
}

func (i GrafeasV1beta1IntotoArtifactArray) ToGrafeasV1beta1IntotoArtifactArrayOutputWithContext(ctx context.Context) GrafeasV1beta1IntotoArtifactArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1beta1IntotoArtifactArrayOutput)
}

type GrafeasV1beta1IntotoArtifactOutput struct{ *pulumi.OutputState }

func (GrafeasV1beta1IntotoArtifactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1beta1IntotoArtifact)(nil)).Elem()
}

func (o GrafeasV1beta1IntotoArtifactOutput) ToGrafeasV1beta1IntotoArtifactOutput() GrafeasV1beta1IntotoArtifactOutput {
	return o
}

func (o GrafeasV1beta1IntotoArtifactOutput) ToGrafeasV1beta1IntotoArtifactOutputWithContext(ctx context.Context) GrafeasV1beta1IntotoArtifactOutput {
	return o
}

func (o GrafeasV1beta1IntotoArtifactOutput) Hashes() ArtifactHashesPtrOutput {
	return o.ApplyT(func(v GrafeasV1beta1IntotoArtifact) *ArtifactHashes { return v.Hashes }).(ArtifactHashesPtrOutput)
}

func (o GrafeasV1beta1IntotoArtifactOutput) ResourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GrafeasV1beta1IntotoArtifact) *string { return v.ResourceUri }).(pulumi.StringPtrOutput)
}

type GrafeasV1beta1IntotoArtifactArrayOutput struct{ *pulumi.OutputState }

func (GrafeasV1beta1IntotoArtifactArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GrafeasV1beta1IntotoArtifact)(nil)).Elem()
}

func (o GrafeasV1beta1IntotoArtifactArrayOutput) ToGrafeasV1beta1IntotoArtifactArrayOutput() GrafeasV1beta1IntotoArtifactArrayOutput {
	return o
}

func (o GrafeasV1beta1IntotoArtifactArrayOutput) ToGrafeasV1beta1IntotoArtifactArrayOutputWithContext(ctx context.Context) GrafeasV1beta1IntotoArtifactArrayOutput {
	return o
}

func (o GrafeasV1beta1IntotoArtifactArrayOutput) Index(i pulumi.IntInput) GrafeasV1beta1IntotoArtifactOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GrafeasV1beta1IntotoArtifact {
		return vs[0].([]GrafeasV1beta1IntotoArtifact)[vs[1].(int)]
	}).(GrafeasV1beta1IntotoArtifactOutput)
}

// This corresponds to a signed in-toto link - it is made up of one or more signatures and the in-toto link itself. This is used for occurrences of a Grafeas in-toto note.
type GrafeasV1beta1IntotoDetails struct {
	Signatures []GrafeasV1beta1IntotoSignature `pulumi:"signatures"`
	Signed     *Link                           `pulumi:"signed"`
}

// GrafeasV1beta1IntotoDetailsInput is an input type that accepts GrafeasV1beta1IntotoDetailsArgs and GrafeasV1beta1IntotoDetailsOutput values.
// You can construct a concrete instance of `GrafeasV1beta1IntotoDetailsInput` via:
//
//          GrafeasV1beta1IntotoDetailsArgs{...}
type GrafeasV1beta1IntotoDetailsInput interface {
	pulumi.Input

	ToGrafeasV1beta1IntotoDetailsOutput() GrafeasV1beta1IntotoDetailsOutput
	ToGrafeasV1beta1IntotoDetailsOutputWithContext(context.Context) GrafeasV1beta1IntotoDetailsOutput
}

// This corresponds to a signed in-toto link - it is made up of one or more signatures and the in-toto link itself. This is used for occurrences of a Grafeas in-toto note.
type GrafeasV1beta1IntotoDetailsArgs struct {
	Signatures GrafeasV1beta1IntotoSignatureArrayInput `pulumi:"signatures"`
	Signed     LinkPtrInput                            `pulumi:"signed"`
}

func (GrafeasV1beta1IntotoDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1beta1IntotoDetails)(nil)).Elem()
}

func (i GrafeasV1beta1IntotoDetailsArgs) ToGrafeasV1beta1IntotoDetailsOutput() GrafeasV1beta1IntotoDetailsOutput {
	return i.ToGrafeasV1beta1IntotoDetailsOutputWithContext(context.Background())
}

func (i GrafeasV1beta1IntotoDetailsArgs) ToGrafeasV1beta1IntotoDetailsOutputWithContext(ctx context.Context) GrafeasV1beta1IntotoDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1beta1IntotoDetailsOutput)
}

func (i GrafeasV1beta1IntotoDetailsArgs) ToGrafeasV1beta1IntotoDetailsPtrOutput() GrafeasV1beta1IntotoDetailsPtrOutput {
	return i.ToGrafeasV1beta1IntotoDetailsPtrOutputWithContext(context.Background())
}

func (i GrafeasV1beta1IntotoDetailsArgs) ToGrafeasV1beta1IntotoDetailsPtrOutputWithContext(ctx context.Context) GrafeasV1beta1IntotoDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1beta1IntotoDetailsOutput).ToGrafeasV1beta1IntotoDetailsPtrOutputWithContext(ctx)
}

// GrafeasV1beta1IntotoDetailsPtrInput is an input type that accepts GrafeasV1beta1IntotoDetailsArgs, GrafeasV1beta1IntotoDetailsPtr and GrafeasV1beta1IntotoDetailsPtrOutput values.
// You can construct a concrete instance of `GrafeasV1beta1IntotoDetailsPtrInput` via:
//
//          GrafeasV1beta1IntotoDetailsArgs{...}
//
//  or:
//
//          nil
type GrafeasV1beta1IntotoDetailsPtrInput interface {
	pulumi.Input

	ToGrafeasV1beta1IntotoDetailsPtrOutput() GrafeasV1beta1IntotoDetailsPtrOutput
	ToGrafeasV1beta1IntotoDetailsPtrOutputWithContext(context.Context) GrafeasV1beta1IntotoDetailsPtrOutput
}

type grafeasV1beta1IntotoDetailsPtrType GrafeasV1beta1IntotoDetailsArgs

func GrafeasV1beta1IntotoDetailsPtr(v *GrafeasV1beta1IntotoDetailsArgs) GrafeasV1beta1IntotoDetailsPtrInput {
	return (*grafeasV1beta1IntotoDetailsPtrType)(v)
}

func (*grafeasV1beta1IntotoDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GrafeasV1beta1IntotoDetails)(nil)).Elem()
}

func (i *grafeasV1beta1IntotoDetailsPtrType) ToGrafeasV1beta1IntotoDetailsPtrOutput() GrafeasV1beta1IntotoDetailsPtrOutput {
	return i.ToGrafeasV1beta1IntotoDetailsPtrOutputWithContext(context.Background())
}

func (i *grafeasV1beta1IntotoDetailsPtrType) ToGrafeasV1beta1IntotoDetailsPtrOutputWithContext(ctx context.Context) GrafeasV1beta1IntotoDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1beta1IntotoDetailsPtrOutput)
}

// This corresponds to a signed in-toto link - it is made up of one or more signatures and the in-toto link itself. This is used for occurrences of a Grafeas in-toto note.
type GrafeasV1beta1IntotoDetailsOutput struct{ *pulumi.OutputState }

func (GrafeasV1beta1IntotoDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1beta1IntotoDetails)(nil)).Elem()
}

func (o GrafeasV1beta1IntotoDetailsOutput) ToGrafeasV1beta1IntotoDetailsOutput() GrafeasV1beta1IntotoDetailsOutput {
	return o
}

func (o GrafeasV1beta1IntotoDetailsOutput) ToGrafeasV1beta1IntotoDetailsOutputWithContext(ctx context.Context) GrafeasV1beta1IntotoDetailsOutput {
	return o
}

func (o GrafeasV1beta1IntotoDetailsOutput) ToGrafeasV1beta1IntotoDetailsPtrOutput() GrafeasV1beta1IntotoDetailsPtrOutput {
	return o.ToGrafeasV1beta1IntotoDetailsPtrOutputWithContext(context.Background())
}

func (o GrafeasV1beta1IntotoDetailsOutput) ToGrafeasV1beta1IntotoDetailsPtrOutputWithContext(ctx context.Context) GrafeasV1beta1IntotoDetailsPtrOutput {
	return o.ApplyT(func(v GrafeasV1beta1IntotoDetails) *GrafeasV1beta1IntotoDetails {
		return &v
	}).(GrafeasV1beta1IntotoDetailsPtrOutput)
}
func (o GrafeasV1beta1IntotoDetailsOutput) Signatures() GrafeasV1beta1IntotoSignatureArrayOutput {
	return o.ApplyT(func(v GrafeasV1beta1IntotoDetails) []GrafeasV1beta1IntotoSignature { return v.Signatures }).(GrafeasV1beta1IntotoSignatureArrayOutput)
}

func (o GrafeasV1beta1IntotoDetailsOutput) Signed() LinkPtrOutput {
	return o.ApplyT(func(v GrafeasV1beta1IntotoDetails) *Link { return v.Signed }).(LinkPtrOutput)
}

type GrafeasV1beta1IntotoDetailsPtrOutput struct{ *pulumi.OutputState }

func (GrafeasV1beta1IntotoDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GrafeasV1beta1IntotoDetails)(nil)).Elem()
}

func (o GrafeasV1beta1IntotoDetailsPtrOutput) ToGrafeasV1beta1IntotoDetailsPtrOutput() GrafeasV1beta1IntotoDetailsPtrOutput {
	return o
}

func (o GrafeasV1beta1IntotoDetailsPtrOutput) ToGrafeasV1beta1IntotoDetailsPtrOutputWithContext(ctx context.Context) GrafeasV1beta1IntotoDetailsPtrOutput {
	return o
}

func (o GrafeasV1beta1IntotoDetailsPtrOutput) Elem() GrafeasV1beta1IntotoDetailsOutput {
	return o.ApplyT(func(v *GrafeasV1beta1IntotoDetails) GrafeasV1beta1IntotoDetails { return *v }).(GrafeasV1beta1IntotoDetailsOutput)
}

func (o GrafeasV1beta1IntotoDetailsPtrOutput) Signatures() GrafeasV1beta1IntotoSignatureArrayOutput {
	return o.ApplyT(func(v *GrafeasV1beta1IntotoDetails) []GrafeasV1beta1IntotoSignature {
		if v == nil {
			return nil
		}
		return v.Signatures
	}).(GrafeasV1beta1IntotoSignatureArrayOutput)
}

func (o GrafeasV1beta1IntotoDetailsPtrOutput) Signed() LinkPtrOutput {
	return o.ApplyT(func(v *GrafeasV1beta1IntotoDetails) *Link {
		if v == nil {
			return nil
		}
		return v.Signed
	}).(LinkPtrOutput)
}

// A signature object consists of the KeyID used and the signature itself.
type GrafeasV1beta1IntotoSignature struct {
	Keyid *string `pulumi:"keyid"`
	Sig   *string `pulumi:"sig"`
}

// GrafeasV1beta1IntotoSignatureInput is an input type that accepts GrafeasV1beta1IntotoSignatureArgs and GrafeasV1beta1IntotoSignatureOutput values.
// You can construct a concrete instance of `GrafeasV1beta1IntotoSignatureInput` via:
//
//          GrafeasV1beta1IntotoSignatureArgs{...}
type GrafeasV1beta1IntotoSignatureInput interface {
	pulumi.Input

	ToGrafeasV1beta1IntotoSignatureOutput() GrafeasV1beta1IntotoSignatureOutput
	ToGrafeasV1beta1IntotoSignatureOutputWithContext(context.Context) GrafeasV1beta1IntotoSignatureOutput
}

// A signature object consists of the KeyID used and the signature itself.
type GrafeasV1beta1IntotoSignatureArgs struct {
	Keyid pulumi.StringPtrInput `pulumi:"keyid"`
	Sig   pulumi.StringPtrInput `pulumi:"sig"`
}

func (GrafeasV1beta1IntotoSignatureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1beta1IntotoSignature)(nil)).Elem()
}

func (i GrafeasV1beta1IntotoSignatureArgs) ToGrafeasV1beta1IntotoSignatureOutput() GrafeasV1beta1IntotoSignatureOutput {
	return i.ToGrafeasV1beta1IntotoSignatureOutputWithContext(context.Background())
}

func (i GrafeasV1beta1IntotoSignatureArgs) ToGrafeasV1beta1IntotoSignatureOutputWithContext(ctx context.Context) GrafeasV1beta1IntotoSignatureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1beta1IntotoSignatureOutput)
}

// GrafeasV1beta1IntotoSignatureArrayInput is an input type that accepts GrafeasV1beta1IntotoSignatureArray and GrafeasV1beta1IntotoSignatureArrayOutput values.
// You can construct a concrete instance of `GrafeasV1beta1IntotoSignatureArrayInput` via:
//
//          GrafeasV1beta1IntotoSignatureArray{ GrafeasV1beta1IntotoSignatureArgs{...} }
type GrafeasV1beta1IntotoSignatureArrayInput interface {
	pulumi.Input

	ToGrafeasV1beta1IntotoSignatureArrayOutput() GrafeasV1beta1IntotoSignatureArrayOutput
	ToGrafeasV1beta1IntotoSignatureArrayOutputWithContext(context.Context) GrafeasV1beta1IntotoSignatureArrayOutput
}

type GrafeasV1beta1IntotoSignatureArray []GrafeasV1beta1IntotoSignatureInput

func (GrafeasV1beta1IntotoSignatureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GrafeasV1beta1IntotoSignature)(nil)).Elem()
}

func (i GrafeasV1beta1IntotoSignatureArray) ToGrafeasV1beta1IntotoSignatureArrayOutput() GrafeasV1beta1IntotoSignatureArrayOutput {
	return i.ToGrafeasV1beta1IntotoSignatureArrayOutputWithContext(context.Background())
}

func (i GrafeasV1beta1IntotoSignatureArray) ToGrafeasV1beta1IntotoSignatureArrayOutputWithContext(ctx context.Context) GrafeasV1beta1IntotoSignatureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1beta1IntotoSignatureArrayOutput)
}

// A signature object consists of the KeyID used and the signature itself.
type GrafeasV1beta1IntotoSignatureOutput struct{ *pulumi.OutputState }

func (GrafeasV1beta1IntotoSignatureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1beta1IntotoSignature)(nil)).Elem()
}

func (o GrafeasV1beta1IntotoSignatureOutput) ToGrafeasV1beta1IntotoSignatureOutput() GrafeasV1beta1IntotoSignatureOutput {
	return o
}

func (o GrafeasV1beta1IntotoSignatureOutput) ToGrafeasV1beta1IntotoSignatureOutputWithContext(ctx context.Context) GrafeasV1beta1IntotoSignatureOutput {
	return o
}

func (o GrafeasV1beta1IntotoSignatureOutput) Keyid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GrafeasV1beta1IntotoSignature) *string { return v.Keyid }).(pulumi.StringPtrOutput)
}

func (o GrafeasV1beta1IntotoSignatureOutput) Sig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GrafeasV1beta1IntotoSignature) *string { return v.Sig }).(pulumi.StringPtrOutput)
}

type GrafeasV1beta1IntotoSignatureArrayOutput struct{ *pulumi.OutputState }

func (GrafeasV1beta1IntotoSignatureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GrafeasV1beta1IntotoSignature)(nil)).Elem()
}

func (o GrafeasV1beta1IntotoSignatureArrayOutput) ToGrafeasV1beta1IntotoSignatureArrayOutput() GrafeasV1beta1IntotoSignatureArrayOutput {
	return o
}

func (o GrafeasV1beta1IntotoSignatureArrayOutput) ToGrafeasV1beta1IntotoSignatureArrayOutputWithContext(ctx context.Context) GrafeasV1beta1IntotoSignatureArrayOutput {
	return o
}

func (o GrafeasV1beta1IntotoSignatureArrayOutput) Index(i pulumi.IntInput) GrafeasV1beta1IntotoSignatureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GrafeasV1beta1IntotoSignature {
		return vs[0].([]GrafeasV1beta1IntotoSignature)[vs[1].(int)]
	}).(GrafeasV1beta1IntotoSignatureOutput)
}

// Details of a package occurrence.
type GrafeasV1beta1PackageDetails struct {
	// Required. Where the package was installed.
	Installation *Installation `pulumi:"installation"`
}

// GrafeasV1beta1PackageDetailsInput is an input type that accepts GrafeasV1beta1PackageDetailsArgs and GrafeasV1beta1PackageDetailsOutput values.
// You can construct a concrete instance of `GrafeasV1beta1PackageDetailsInput` via:
//
//          GrafeasV1beta1PackageDetailsArgs{...}
type GrafeasV1beta1PackageDetailsInput interface {
	pulumi.Input

	ToGrafeasV1beta1PackageDetailsOutput() GrafeasV1beta1PackageDetailsOutput
	ToGrafeasV1beta1PackageDetailsOutputWithContext(context.Context) GrafeasV1beta1PackageDetailsOutput
}

// Details of a package occurrence.
type GrafeasV1beta1PackageDetailsArgs struct {
	// Required. Where the package was installed.
	Installation InstallationPtrInput `pulumi:"installation"`
}

func (GrafeasV1beta1PackageDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1beta1PackageDetails)(nil)).Elem()
}

func (i GrafeasV1beta1PackageDetailsArgs) ToGrafeasV1beta1PackageDetailsOutput() GrafeasV1beta1PackageDetailsOutput {
	return i.ToGrafeasV1beta1PackageDetailsOutputWithContext(context.Background())
}

func (i GrafeasV1beta1PackageDetailsArgs) ToGrafeasV1beta1PackageDetailsOutputWithContext(ctx context.Context) GrafeasV1beta1PackageDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1beta1PackageDetailsOutput)
}

func (i GrafeasV1beta1PackageDetailsArgs) ToGrafeasV1beta1PackageDetailsPtrOutput() GrafeasV1beta1PackageDetailsPtrOutput {
	return i.ToGrafeasV1beta1PackageDetailsPtrOutputWithContext(context.Background())
}

func (i GrafeasV1beta1PackageDetailsArgs) ToGrafeasV1beta1PackageDetailsPtrOutputWithContext(ctx context.Context) GrafeasV1beta1PackageDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1beta1PackageDetailsOutput).ToGrafeasV1beta1PackageDetailsPtrOutputWithContext(ctx)
}

// GrafeasV1beta1PackageDetailsPtrInput is an input type that accepts GrafeasV1beta1PackageDetailsArgs, GrafeasV1beta1PackageDetailsPtr and GrafeasV1beta1PackageDetailsPtrOutput values.
// You can construct a concrete instance of `GrafeasV1beta1PackageDetailsPtrInput` via:
//
//          GrafeasV1beta1PackageDetailsArgs{...}
//
//  or:
//
//          nil
type GrafeasV1beta1PackageDetailsPtrInput interface {
	pulumi.Input

	ToGrafeasV1beta1PackageDetailsPtrOutput() GrafeasV1beta1PackageDetailsPtrOutput
	ToGrafeasV1beta1PackageDetailsPtrOutputWithContext(context.Context) GrafeasV1beta1PackageDetailsPtrOutput
}

type grafeasV1beta1PackageDetailsPtrType GrafeasV1beta1PackageDetailsArgs

func GrafeasV1beta1PackageDetailsPtr(v *GrafeasV1beta1PackageDetailsArgs) GrafeasV1beta1PackageDetailsPtrInput {
	return (*grafeasV1beta1PackageDetailsPtrType)(v)
}

func (*grafeasV1beta1PackageDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GrafeasV1beta1PackageDetails)(nil)).Elem()
}

func (i *grafeasV1beta1PackageDetailsPtrType) ToGrafeasV1beta1PackageDetailsPtrOutput() GrafeasV1beta1PackageDetailsPtrOutput {
	return i.ToGrafeasV1beta1PackageDetailsPtrOutputWithContext(context.Background())
}

func (i *grafeasV1beta1PackageDetailsPtrType) ToGrafeasV1beta1PackageDetailsPtrOutputWithContext(ctx context.Context) GrafeasV1beta1PackageDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1beta1PackageDetailsPtrOutput)
}

// Details of a package occurrence.
type GrafeasV1beta1PackageDetailsOutput struct{ *pulumi.OutputState }

func (GrafeasV1beta1PackageDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1beta1PackageDetails)(nil)).Elem()
}

func (o GrafeasV1beta1PackageDetailsOutput) ToGrafeasV1beta1PackageDetailsOutput() GrafeasV1beta1PackageDetailsOutput {
	return o
}

func (o GrafeasV1beta1PackageDetailsOutput) ToGrafeasV1beta1PackageDetailsOutputWithContext(ctx context.Context) GrafeasV1beta1PackageDetailsOutput {
	return o
}

func (o GrafeasV1beta1PackageDetailsOutput) ToGrafeasV1beta1PackageDetailsPtrOutput() GrafeasV1beta1PackageDetailsPtrOutput {
	return o.ToGrafeasV1beta1PackageDetailsPtrOutputWithContext(context.Background())
}

func (o GrafeasV1beta1PackageDetailsOutput) ToGrafeasV1beta1PackageDetailsPtrOutputWithContext(ctx context.Context) GrafeasV1beta1PackageDetailsPtrOutput {
	return o.ApplyT(func(v GrafeasV1beta1PackageDetails) *GrafeasV1beta1PackageDetails {
		return &v
	}).(GrafeasV1beta1PackageDetailsPtrOutput)
}

// Required. Where the package was installed.
func (o GrafeasV1beta1PackageDetailsOutput) Installation() InstallationPtrOutput {
	return o.ApplyT(func(v GrafeasV1beta1PackageDetails) *Installation { return v.Installation }).(InstallationPtrOutput)
}

type GrafeasV1beta1PackageDetailsPtrOutput struct{ *pulumi.OutputState }

func (GrafeasV1beta1PackageDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GrafeasV1beta1PackageDetails)(nil)).Elem()
}

func (o GrafeasV1beta1PackageDetailsPtrOutput) ToGrafeasV1beta1PackageDetailsPtrOutput() GrafeasV1beta1PackageDetailsPtrOutput {
	return o
}

func (o GrafeasV1beta1PackageDetailsPtrOutput) ToGrafeasV1beta1PackageDetailsPtrOutputWithContext(ctx context.Context) GrafeasV1beta1PackageDetailsPtrOutput {
	return o
}

func (o GrafeasV1beta1PackageDetailsPtrOutput) Elem() GrafeasV1beta1PackageDetailsOutput {
	return o.ApplyT(func(v *GrafeasV1beta1PackageDetails) GrafeasV1beta1PackageDetails { return *v }).(GrafeasV1beta1PackageDetailsOutput)
}

// Required. Where the package was installed.
func (o GrafeasV1beta1PackageDetailsPtrOutput) Installation() InstallationPtrOutput {
	return o.ApplyT(func(v *GrafeasV1beta1PackageDetails) *Installation {
		if v == nil {
			return nil
		}
		return v.Installation
	}).(InstallationPtrOutput)
}

// Details of a vulnerability Occurrence.
type GrafeasV1beta1VulnerabilityDetails struct {
	// Output only. The CVSS score of this vulnerability. CVSS score is on a scale of 0-10 where 0 indicates low severity and 10 indicates high severity.
	CvssScore *float64 `pulumi:"cvssScore"`
	// The distro assigned severity for this vulnerability when it is available, and note provider assigned severity when distro has not yet assigned a severity for this vulnerability.
	EffectiveSeverity *string `pulumi:"effectiveSeverity"`
	// Output only. A detailed description of this vulnerability.
	LongDescription *string `pulumi:"longDescription"`
	// Required. The set of affected locations and their fixes (if available) within the associated resource.
	PackageIssue []PackageIssue `pulumi:"packageIssue"`
	// Output only. URLs related to this vulnerability.
	RelatedUrls []RelatedUrl `pulumi:"relatedUrls"`
	// Output only. The note provider assigned Severity of the vulnerability.
	Severity *string `pulumi:"severity"`
	// Output only. A one sentence description of this vulnerability.
	ShortDescription *string `pulumi:"shortDescription"`
	// The type of package; whether native or non native(ruby gems, node.js packages etc)
	Type *string `pulumi:"type"`
}

// GrafeasV1beta1VulnerabilityDetailsInput is an input type that accepts GrafeasV1beta1VulnerabilityDetailsArgs and GrafeasV1beta1VulnerabilityDetailsOutput values.
// You can construct a concrete instance of `GrafeasV1beta1VulnerabilityDetailsInput` via:
//
//          GrafeasV1beta1VulnerabilityDetailsArgs{...}
type GrafeasV1beta1VulnerabilityDetailsInput interface {
	pulumi.Input

	ToGrafeasV1beta1VulnerabilityDetailsOutput() GrafeasV1beta1VulnerabilityDetailsOutput
	ToGrafeasV1beta1VulnerabilityDetailsOutputWithContext(context.Context) GrafeasV1beta1VulnerabilityDetailsOutput
}

// Details of a vulnerability Occurrence.
type GrafeasV1beta1VulnerabilityDetailsArgs struct {
	// Output only. The CVSS score of this vulnerability. CVSS score is on a scale of 0-10 where 0 indicates low severity and 10 indicates high severity.
	CvssScore pulumi.Float64PtrInput `pulumi:"cvssScore"`
	// The distro assigned severity for this vulnerability when it is available, and note provider assigned severity when distro has not yet assigned a severity for this vulnerability.
	EffectiveSeverity pulumi.StringPtrInput `pulumi:"effectiveSeverity"`
	// Output only. A detailed description of this vulnerability.
	LongDescription pulumi.StringPtrInput `pulumi:"longDescription"`
	// Required. The set of affected locations and their fixes (if available) within the associated resource.
	PackageIssue PackageIssueArrayInput `pulumi:"packageIssue"`
	// Output only. URLs related to this vulnerability.
	RelatedUrls RelatedUrlArrayInput `pulumi:"relatedUrls"`
	// Output only. The note provider assigned Severity of the vulnerability.
	Severity pulumi.StringPtrInput `pulumi:"severity"`
	// Output only. A one sentence description of this vulnerability.
	ShortDescription pulumi.StringPtrInput `pulumi:"shortDescription"`
	// The type of package; whether native or non native(ruby gems, node.js packages etc)
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (GrafeasV1beta1VulnerabilityDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1beta1VulnerabilityDetails)(nil)).Elem()
}

func (i GrafeasV1beta1VulnerabilityDetailsArgs) ToGrafeasV1beta1VulnerabilityDetailsOutput() GrafeasV1beta1VulnerabilityDetailsOutput {
	return i.ToGrafeasV1beta1VulnerabilityDetailsOutputWithContext(context.Background())
}

func (i GrafeasV1beta1VulnerabilityDetailsArgs) ToGrafeasV1beta1VulnerabilityDetailsOutputWithContext(ctx context.Context) GrafeasV1beta1VulnerabilityDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1beta1VulnerabilityDetailsOutput)
}

func (i GrafeasV1beta1VulnerabilityDetailsArgs) ToGrafeasV1beta1VulnerabilityDetailsPtrOutput() GrafeasV1beta1VulnerabilityDetailsPtrOutput {
	return i.ToGrafeasV1beta1VulnerabilityDetailsPtrOutputWithContext(context.Background())
}

func (i GrafeasV1beta1VulnerabilityDetailsArgs) ToGrafeasV1beta1VulnerabilityDetailsPtrOutputWithContext(ctx context.Context) GrafeasV1beta1VulnerabilityDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1beta1VulnerabilityDetailsOutput).ToGrafeasV1beta1VulnerabilityDetailsPtrOutputWithContext(ctx)
}

// GrafeasV1beta1VulnerabilityDetailsPtrInput is an input type that accepts GrafeasV1beta1VulnerabilityDetailsArgs, GrafeasV1beta1VulnerabilityDetailsPtr and GrafeasV1beta1VulnerabilityDetailsPtrOutput values.
// You can construct a concrete instance of `GrafeasV1beta1VulnerabilityDetailsPtrInput` via:
//
//          GrafeasV1beta1VulnerabilityDetailsArgs{...}
//
//  or:
//
//          nil
type GrafeasV1beta1VulnerabilityDetailsPtrInput interface {
	pulumi.Input

	ToGrafeasV1beta1VulnerabilityDetailsPtrOutput() GrafeasV1beta1VulnerabilityDetailsPtrOutput
	ToGrafeasV1beta1VulnerabilityDetailsPtrOutputWithContext(context.Context) GrafeasV1beta1VulnerabilityDetailsPtrOutput
}

type grafeasV1beta1VulnerabilityDetailsPtrType GrafeasV1beta1VulnerabilityDetailsArgs

func GrafeasV1beta1VulnerabilityDetailsPtr(v *GrafeasV1beta1VulnerabilityDetailsArgs) GrafeasV1beta1VulnerabilityDetailsPtrInput {
	return (*grafeasV1beta1VulnerabilityDetailsPtrType)(v)
}

func (*grafeasV1beta1VulnerabilityDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GrafeasV1beta1VulnerabilityDetails)(nil)).Elem()
}

func (i *grafeasV1beta1VulnerabilityDetailsPtrType) ToGrafeasV1beta1VulnerabilityDetailsPtrOutput() GrafeasV1beta1VulnerabilityDetailsPtrOutput {
	return i.ToGrafeasV1beta1VulnerabilityDetailsPtrOutputWithContext(context.Background())
}

func (i *grafeasV1beta1VulnerabilityDetailsPtrType) ToGrafeasV1beta1VulnerabilityDetailsPtrOutputWithContext(ctx context.Context) GrafeasV1beta1VulnerabilityDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1beta1VulnerabilityDetailsPtrOutput)
}

// Details of a vulnerability Occurrence.
type GrafeasV1beta1VulnerabilityDetailsOutput struct{ *pulumi.OutputState }

func (GrafeasV1beta1VulnerabilityDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1beta1VulnerabilityDetails)(nil)).Elem()
}

func (o GrafeasV1beta1VulnerabilityDetailsOutput) ToGrafeasV1beta1VulnerabilityDetailsOutput() GrafeasV1beta1VulnerabilityDetailsOutput {
	return o
}

func (o GrafeasV1beta1VulnerabilityDetailsOutput) ToGrafeasV1beta1VulnerabilityDetailsOutputWithContext(ctx context.Context) GrafeasV1beta1VulnerabilityDetailsOutput {
	return o
}

func (o GrafeasV1beta1VulnerabilityDetailsOutput) ToGrafeasV1beta1VulnerabilityDetailsPtrOutput() GrafeasV1beta1VulnerabilityDetailsPtrOutput {
	return o.ToGrafeasV1beta1VulnerabilityDetailsPtrOutputWithContext(context.Background())
}

func (o GrafeasV1beta1VulnerabilityDetailsOutput) ToGrafeasV1beta1VulnerabilityDetailsPtrOutputWithContext(ctx context.Context) GrafeasV1beta1VulnerabilityDetailsPtrOutput {
	return o.ApplyT(func(v GrafeasV1beta1VulnerabilityDetails) *GrafeasV1beta1VulnerabilityDetails {
		return &v
	}).(GrafeasV1beta1VulnerabilityDetailsPtrOutput)
}

// Output only. The CVSS score of this vulnerability. CVSS score is on a scale of 0-10 where 0 indicates low severity and 10 indicates high severity.
func (o GrafeasV1beta1VulnerabilityDetailsOutput) CvssScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v GrafeasV1beta1VulnerabilityDetails) *float64 { return v.CvssScore }).(pulumi.Float64PtrOutput)
}

// The distro assigned severity for this vulnerability when it is available, and note provider assigned severity when distro has not yet assigned a severity for this vulnerability.
func (o GrafeasV1beta1VulnerabilityDetailsOutput) EffectiveSeverity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GrafeasV1beta1VulnerabilityDetails) *string { return v.EffectiveSeverity }).(pulumi.StringPtrOutput)
}

// Output only. A detailed description of this vulnerability.
func (o GrafeasV1beta1VulnerabilityDetailsOutput) LongDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GrafeasV1beta1VulnerabilityDetails) *string { return v.LongDescription }).(pulumi.StringPtrOutput)
}

// Required. The set of affected locations and their fixes (if available) within the associated resource.
func (o GrafeasV1beta1VulnerabilityDetailsOutput) PackageIssue() PackageIssueArrayOutput {
	return o.ApplyT(func(v GrafeasV1beta1VulnerabilityDetails) []PackageIssue { return v.PackageIssue }).(PackageIssueArrayOutput)
}

// Output only. URLs related to this vulnerability.
func (o GrafeasV1beta1VulnerabilityDetailsOutput) RelatedUrls() RelatedUrlArrayOutput {
	return o.ApplyT(func(v GrafeasV1beta1VulnerabilityDetails) []RelatedUrl { return v.RelatedUrls }).(RelatedUrlArrayOutput)
}

// Output only. The note provider assigned Severity of the vulnerability.
func (o GrafeasV1beta1VulnerabilityDetailsOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GrafeasV1beta1VulnerabilityDetails) *string { return v.Severity }).(pulumi.StringPtrOutput)
}

// Output only. A one sentence description of this vulnerability.
func (o GrafeasV1beta1VulnerabilityDetailsOutput) ShortDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GrafeasV1beta1VulnerabilityDetails) *string { return v.ShortDescription }).(pulumi.StringPtrOutput)
}

// The type of package; whether native or non native(ruby gems, node.js packages etc)
func (o GrafeasV1beta1VulnerabilityDetailsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GrafeasV1beta1VulnerabilityDetails) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type GrafeasV1beta1VulnerabilityDetailsPtrOutput struct{ *pulumi.OutputState }

func (GrafeasV1beta1VulnerabilityDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GrafeasV1beta1VulnerabilityDetails)(nil)).Elem()
}

func (o GrafeasV1beta1VulnerabilityDetailsPtrOutput) ToGrafeasV1beta1VulnerabilityDetailsPtrOutput() GrafeasV1beta1VulnerabilityDetailsPtrOutput {
	return o
}

func (o GrafeasV1beta1VulnerabilityDetailsPtrOutput) ToGrafeasV1beta1VulnerabilityDetailsPtrOutputWithContext(ctx context.Context) GrafeasV1beta1VulnerabilityDetailsPtrOutput {
	return o
}

func (o GrafeasV1beta1VulnerabilityDetailsPtrOutput) Elem() GrafeasV1beta1VulnerabilityDetailsOutput {
	return o.ApplyT(func(v *GrafeasV1beta1VulnerabilityDetails) GrafeasV1beta1VulnerabilityDetails { return *v }).(GrafeasV1beta1VulnerabilityDetailsOutput)
}

// Output only. The CVSS score of this vulnerability. CVSS score is on a scale of 0-10 where 0 indicates low severity and 10 indicates high severity.
func (o GrafeasV1beta1VulnerabilityDetailsPtrOutput) CvssScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *GrafeasV1beta1VulnerabilityDetails) *float64 {
		if v == nil {
			return nil
		}
		return v.CvssScore
	}).(pulumi.Float64PtrOutput)
}

// The distro assigned severity for this vulnerability when it is available, and note provider assigned severity when distro has not yet assigned a severity for this vulnerability.
func (o GrafeasV1beta1VulnerabilityDetailsPtrOutput) EffectiveSeverity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GrafeasV1beta1VulnerabilityDetails) *string {
		if v == nil {
			return nil
		}
		return v.EffectiveSeverity
	}).(pulumi.StringPtrOutput)
}

// Output only. A detailed description of this vulnerability.
func (o GrafeasV1beta1VulnerabilityDetailsPtrOutput) LongDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GrafeasV1beta1VulnerabilityDetails) *string {
		if v == nil {
			return nil
		}
		return v.LongDescription
	}).(pulumi.StringPtrOutput)
}

// Required. The set of affected locations and their fixes (if available) within the associated resource.
func (o GrafeasV1beta1VulnerabilityDetailsPtrOutput) PackageIssue() PackageIssueArrayOutput {
	return o.ApplyT(func(v *GrafeasV1beta1VulnerabilityDetails) []PackageIssue {
		if v == nil {
			return nil
		}
		return v.PackageIssue
	}).(PackageIssueArrayOutput)
}

// Output only. URLs related to this vulnerability.
func (o GrafeasV1beta1VulnerabilityDetailsPtrOutput) RelatedUrls() RelatedUrlArrayOutput {
	return o.ApplyT(func(v *GrafeasV1beta1VulnerabilityDetails) []RelatedUrl {
		if v == nil {
			return nil
		}
		return v.RelatedUrls
	}).(RelatedUrlArrayOutput)
}

// Output only. The note provider assigned Severity of the vulnerability.
func (o GrafeasV1beta1VulnerabilityDetailsPtrOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GrafeasV1beta1VulnerabilityDetails) *string {
		if v == nil {
			return nil
		}
		return v.Severity
	}).(pulumi.StringPtrOutput)
}

// Output only. A one sentence description of this vulnerability.
func (o GrafeasV1beta1VulnerabilityDetailsPtrOutput) ShortDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GrafeasV1beta1VulnerabilityDetails) *string {
		if v == nil {
			return nil
		}
		return v.ShortDescription
	}).(pulumi.StringPtrOutput)
}

// The type of package; whether native or non native(ruby gems, node.js packages etc)
func (o GrafeasV1beta1VulnerabilityDetailsPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GrafeasV1beta1VulnerabilityDetails) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Container message for hash values.
type Hash struct {
	// Required. The type of hash that was performed.
	Type *string `pulumi:"type"`
	// Required. The hash value.
	Value *string `pulumi:"value"`
}

// HashInput is an input type that accepts HashArgs and HashOutput values.
// You can construct a concrete instance of `HashInput` via:
//
//          HashArgs{...}
type HashInput interface {
	pulumi.Input

	ToHashOutput() HashOutput
	ToHashOutputWithContext(context.Context) HashOutput
}

// Container message for hash values.
type HashArgs struct {
	// Required. The type of hash that was performed.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Required. The hash value.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (HashArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Hash)(nil)).Elem()
}

func (i HashArgs) ToHashOutput() HashOutput {
	return i.ToHashOutputWithContext(context.Background())
}

func (i HashArgs) ToHashOutputWithContext(ctx context.Context) HashOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HashOutput)
}

func (i HashArgs) ToHashPtrOutput() HashPtrOutput {
	return i.ToHashPtrOutputWithContext(context.Background())
}

func (i HashArgs) ToHashPtrOutputWithContext(ctx context.Context) HashPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HashOutput).ToHashPtrOutputWithContext(ctx)
}

// HashPtrInput is an input type that accepts HashArgs, HashPtr and HashPtrOutput values.
// You can construct a concrete instance of `HashPtrInput` via:
//
//          HashArgs{...}
//
//  or:
//
//          nil
type HashPtrInput interface {
	pulumi.Input

	ToHashPtrOutput() HashPtrOutput
	ToHashPtrOutputWithContext(context.Context) HashPtrOutput
}

type hashPtrType HashArgs

func HashPtr(v *HashArgs) HashPtrInput {
	return (*hashPtrType)(v)
}

func (*hashPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Hash)(nil)).Elem()
}

func (i *hashPtrType) ToHashPtrOutput() HashPtrOutput {
	return i.ToHashPtrOutputWithContext(context.Background())
}

func (i *hashPtrType) ToHashPtrOutputWithContext(ctx context.Context) HashPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HashPtrOutput)
}

// Container message for hash values.
type HashOutput struct{ *pulumi.OutputState }

func (HashOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Hash)(nil)).Elem()
}

func (o HashOutput) ToHashOutput() HashOutput {
	return o
}

func (o HashOutput) ToHashOutputWithContext(ctx context.Context) HashOutput {
	return o
}

func (o HashOutput) ToHashPtrOutput() HashPtrOutput {
	return o.ToHashPtrOutputWithContext(context.Background())
}

func (o HashOutput) ToHashPtrOutputWithContext(ctx context.Context) HashPtrOutput {
	return o.ApplyT(func(v Hash) *Hash {
		return &v
	}).(HashPtrOutput)
}

// Required. The type of hash that was performed.
func (o HashOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Hash) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Required. The hash value.
func (o HashOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Hash) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type HashPtrOutput struct{ *pulumi.OutputState }

func (HashPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Hash)(nil)).Elem()
}

func (o HashPtrOutput) ToHashPtrOutput() HashPtrOutput {
	return o
}

func (o HashPtrOutput) ToHashPtrOutputWithContext(ctx context.Context) HashPtrOutput {
	return o
}

func (o HashPtrOutput) Elem() HashOutput {
	return o.ApplyT(func(v *Hash) Hash { return *v }).(HashOutput)
}

// Required. The type of hash that was performed.
func (o HashPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Hash) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Required. The hash value.
func (o HashPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Hash) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

// This submessage provides human-readable hints about the purpose of the authority. Because the name of a note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from "readable" names more suitable for debug output. Note that these hints should not be used to look up authorities in security sensitive contexts, such as when looking up attestations to verify.
type Hint struct {
	// Required. The human readable name of this attestation authority, for example "qa".
	HumanReadableName *string `pulumi:"humanReadableName"`
}

// HintInput is an input type that accepts HintArgs and HintOutput values.
// You can construct a concrete instance of `HintInput` via:
//
//          HintArgs{...}
type HintInput interface {
	pulumi.Input

	ToHintOutput() HintOutput
	ToHintOutputWithContext(context.Context) HintOutput
}

// This submessage provides human-readable hints about the purpose of the authority. Because the name of a note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from "readable" names more suitable for debug output. Note that these hints should not be used to look up authorities in security sensitive contexts, such as when looking up attestations to verify.
type HintArgs struct {
	// Required. The human readable name of this attestation authority, for example "qa".
	HumanReadableName pulumi.StringPtrInput `pulumi:"humanReadableName"`
}

func (HintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Hint)(nil)).Elem()
}

func (i HintArgs) ToHintOutput() HintOutput {
	return i.ToHintOutputWithContext(context.Background())
}

func (i HintArgs) ToHintOutputWithContext(ctx context.Context) HintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HintOutput)
}

func (i HintArgs) ToHintPtrOutput() HintPtrOutput {
	return i.ToHintPtrOutputWithContext(context.Background())
}

func (i HintArgs) ToHintPtrOutputWithContext(ctx context.Context) HintPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HintOutput).ToHintPtrOutputWithContext(ctx)
}

// HintPtrInput is an input type that accepts HintArgs, HintPtr and HintPtrOutput values.
// You can construct a concrete instance of `HintPtrInput` via:
//
//          HintArgs{...}
//
//  or:
//
//          nil
type HintPtrInput interface {
	pulumi.Input

	ToHintPtrOutput() HintPtrOutput
	ToHintPtrOutputWithContext(context.Context) HintPtrOutput
}

type hintPtrType HintArgs

func HintPtr(v *HintArgs) HintPtrInput {
	return (*hintPtrType)(v)
}

func (*hintPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Hint)(nil)).Elem()
}

func (i *hintPtrType) ToHintPtrOutput() HintPtrOutput {
	return i.ToHintPtrOutputWithContext(context.Background())
}

func (i *hintPtrType) ToHintPtrOutputWithContext(ctx context.Context) HintPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HintPtrOutput)
}

// This submessage provides human-readable hints about the purpose of the authority. Because the name of a note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from "readable" names more suitable for debug output. Note that these hints should not be used to look up authorities in security sensitive contexts, such as when looking up attestations to verify.
type HintOutput struct{ *pulumi.OutputState }

func (HintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Hint)(nil)).Elem()
}

func (o HintOutput) ToHintOutput() HintOutput {
	return o
}

func (o HintOutput) ToHintOutputWithContext(ctx context.Context) HintOutput {
	return o
}

func (o HintOutput) ToHintPtrOutput() HintPtrOutput {
	return o.ToHintPtrOutputWithContext(context.Background())
}

func (o HintOutput) ToHintPtrOutputWithContext(ctx context.Context) HintPtrOutput {
	return o.ApplyT(func(v Hint) *Hint {
		return &v
	}).(HintPtrOutput)
}

// Required. The human readable name of this attestation authority, for example "qa".
func (o HintOutput) HumanReadableName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Hint) *string { return v.HumanReadableName }).(pulumi.StringPtrOutput)
}

type HintPtrOutput struct{ *pulumi.OutputState }

func (HintPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Hint)(nil)).Elem()
}

func (o HintPtrOutput) ToHintPtrOutput() HintPtrOutput {
	return o
}

func (o HintPtrOutput) ToHintPtrOutputWithContext(ctx context.Context) HintPtrOutput {
	return o
}

func (o HintPtrOutput) Elem() HintOutput {
	return o.ApplyT(func(v *Hint) Hint { return *v }).(HintOutput)
}

// Required. The human readable name of this attestation authority, for example "qa".
func (o HintPtrOutput) HumanReadableName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Hint) *string {
		if v == nil {
			return nil
		}
		return v.HumanReadableName
	}).(pulumi.StringPtrOutput)
}

// This contains the fields corresponding to the definition of a software supply chain step in an in-toto layout. This information goes into a Grafeas note.
type InToto struct {
	// This field contains the expected command used to perform the step.
	ExpectedCommand []string `pulumi:"expectedCommand"`
	// The following fields contain in-toto artifact rules identifying the artifacts that enter this supply chain step, and exit the supply chain step, i.e. materials and products of the step.
	ExpectedMaterials []ArtifactRule `pulumi:"expectedMaterials"`
	ExpectedProducts  []ArtifactRule `pulumi:"expectedProducts"`
	// This field contains the public keys that can be used to verify the signatures on the step metadata.
	SigningKeys []SigningKey `pulumi:"signingKeys"`
	// This field identifies the name of the step in the supply chain.
	StepName *string `pulumi:"stepName"`
	// This field contains a value that indicates the minimum number of keys that need to be used to sign the step's in-toto link.
	Threshold *string `pulumi:"threshold"`
}

// InTotoInput is an input type that accepts InTotoArgs and InTotoOutput values.
// You can construct a concrete instance of `InTotoInput` via:
//
//          InTotoArgs{...}
type InTotoInput interface {
	pulumi.Input

	ToInTotoOutput() InTotoOutput
	ToInTotoOutputWithContext(context.Context) InTotoOutput
}

// This contains the fields corresponding to the definition of a software supply chain step in an in-toto layout. This information goes into a Grafeas note.
type InTotoArgs struct {
	// This field contains the expected command used to perform the step.
	ExpectedCommand pulumi.StringArrayInput `pulumi:"expectedCommand"`
	// The following fields contain in-toto artifact rules identifying the artifacts that enter this supply chain step, and exit the supply chain step, i.e. materials and products of the step.
	ExpectedMaterials ArtifactRuleArrayInput `pulumi:"expectedMaterials"`
	ExpectedProducts  ArtifactRuleArrayInput `pulumi:"expectedProducts"`
	// This field contains the public keys that can be used to verify the signatures on the step metadata.
	SigningKeys SigningKeyArrayInput `pulumi:"signingKeys"`
	// This field identifies the name of the step in the supply chain.
	StepName pulumi.StringPtrInput `pulumi:"stepName"`
	// This field contains a value that indicates the minimum number of keys that need to be used to sign the step's in-toto link.
	Threshold pulumi.StringPtrInput `pulumi:"threshold"`
}

func (InTotoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InToto)(nil)).Elem()
}

func (i InTotoArgs) ToInTotoOutput() InTotoOutput {
	return i.ToInTotoOutputWithContext(context.Background())
}

func (i InTotoArgs) ToInTotoOutputWithContext(ctx context.Context) InTotoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InTotoOutput)
}

func (i InTotoArgs) ToInTotoPtrOutput() InTotoPtrOutput {
	return i.ToInTotoPtrOutputWithContext(context.Background())
}

func (i InTotoArgs) ToInTotoPtrOutputWithContext(ctx context.Context) InTotoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InTotoOutput).ToInTotoPtrOutputWithContext(ctx)
}

// InTotoPtrInput is an input type that accepts InTotoArgs, InTotoPtr and InTotoPtrOutput values.
// You can construct a concrete instance of `InTotoPtrInput` via:
//
//          InTotoArgs{...}
//
//  or:
//
//          nil
type InTotoPtrInput interface {
	pulumi.Input

	ToInTotoPtrOutput() InTotoPtrOutput
	ToInTotoPtrOutputWithContext(context.Context) InTotoPtrOutput
}

type inTotoPtrType InTotoArgs

func InTotoPtr(v *InTotoArgs) InTotoPtrInput {
	return (*inTotoPtrType)(v)
}

func (*inTotoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InToto)(nil)).Elem()
}

func (i *inTotoPtrType) ToInTotoPtrOutput() InTotoPtrOutput {
	return i.ToInTotoPtrOutputWithContext(context.Background())
}

func (i *inTotoPtrType) ToInTotoPtrOutputWithContext(ctx context.Context) InTotoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InTotoPtrOutput)
}

// This contains the fields corresponding to the definition of a software supply chain step in an in-toto layout. This information goes into a Grafeas note.
type InTotoOutput struct{ *pulumi.OutputState }

func (InTotoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InToto)(nil)).Elem()
}

func (o InTotoOutput) ToInTotoOutput() InTotoOutput {
	return o
}

func (o InTotoOutput) ToInTotoOutputWithContext(ctx context.Context) InTotoOutput {
	return o
}

func (o InTotoOutput) ToInTotoPtrOutput() InTotoPtrOutput {
	return o.ToInTotoPtrOutputWithContext(context.Background())
}

func (o InTotoOutput) ToInTotoPtrOutputWithContext(ctx context.Context) InTotoPtrOutput {
	return o.ApplyT(func(v InToto) *InToto {
		return &v
	}).(InTotoPtrOutput)
}

// This field contains the expected command used to perform the step.
func (o InTotoOutput) ExpectedCommand() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InToto) []string { return v.ExpectedCommand }).(pulumi.StringArrayOutput)
}

// The following fields contain in-toto artifact rules identifying the artifacts that enter this supply chain step, and exit the supply chain step, i.e. materials and products of the step.
func (o InTotoOutput) ExpectedMaterials() ArtifactRuleArrayOutput {
	return o.ApplyT(func(v InToto) []ArtifactRule { return v.ExpectedMaterials }).(ArtifactRuleArrayOutput)
}

func (o InTotoOutput) ExpectedProducts() ArtifactRuleArrayOutput {
	return o.ApplyT(func(v InToto) []ArtifactRule { return v.ExpectedProducts }).(ArtifactRuleArrayOutput)
}

// This field contains the public keys that can be used to verify the signatures on the step metadata.
func (o InTotoOutput) SigningKeys() SigningKeyArrayOutput {
	return o.ApplyT(func(v InToto) []SigningKey { return v.SigningKeys }).(SigningKeyArrayOutput)
}

// This field identifies the name of the step in the supply chain.
func (o InTotoOutput) StepName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InToto) *string { return v.StepName }).(pulumi.StringPtrOutput)
}

// This field contains a value that indicates the minimum number of keys that need to be used to sign the step's in-toto link.
func (o InTotoOutput) Threshold() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InToto) *string { return v.Threshold }).(pulumi.StringPtrOutput)
}

type InTotoPtrOutput struct{ *pulumi.OutputState }

func (InTotoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InToto)(nil)).Elem()
}

func (o InTotoPtrOutput) ToInTotoPtrOutput() InTotoPtrOutput {
	return o
}

func (o InTotoPtrOutput) ToInTotoPtrOutputWithContext(ctx context.Context) InTotoPtrOutput {
	return o
}

func (o InTotoPtrOutput) Elem() InTotoOutput {
	return o.ApplyT(func(v *InToto) InToto { return *v }).(InTotoOutput)
}

// This field contains the expected command used to perform the step.
func (o InTotoPtrOutput) ExpectedCommand() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InToto) []string {
		if v == nil {
			return nil
		}
		return v.ExpectedCommand
	}).(pulumi.StringArrayOutput)
}

// The following fields contain in-toto artifact rules identifying the artifacts that enter this supply chain step, and exit the supply chain step, i.e. materials and products of the step.
func (o InTotoPtrOutput) ExpectedMaterials() ArtifactRuleArrayOutput {
	return o.ApplyT(func(v *InToto) []ArtifactRule {
		if v == nil {
			return nil
		}
		return v.ExpectedMaterials
	}).(ArtifactRuleArrayOutput)
}

func (o InTotoPtrOutput) ExpectedProducts() ArtifactRuleArrayOutput {
	return o.ApplyT(func(v *InToto) []ArtifactRule {
		if v == nil {
			return nil
		}
		return v.ExpectedProducts
	}).(ArtifactRuleArrayOutput)
}

// This field contains the public keys that can be used to verify the signatures on the step metadata.
func (o InTotoPtrOutput) SigningKeys() SigningKeyArrayOutput {
	return o.ApplyT(func(v *InToto) []SigningKey {
		if v == nil {
			return nil
		}
		return v.SigningKeys
	}).(SigningKeyArrayOutput)
}

// This field identifies the name of the step in the supply chain.
func (o InTotoPtrOutput) StepName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InToto) *string {
		if v == nil {
			return nil
		}
		return v.StepName
	}).(pulumi.StringPtrOutput)
}

// This field contains a value that indicates the minimum number of keys that need to be used to sign the step's in-toto link.
func (o InTotoPtrOutput) Threshold() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InToto) *string {
		if v == nil {
			return nil
		}
		return v.Threshold
	}).(pulumi.StringPtrOutput)
}

// This represents how a particular software package may be installed on a system.
type Installation struct {
	// Required. All of the places within the filesystem versions of this package have been found.
	Location []Location `pulumi:"location"`
	// Output only. The name of the installed package.
	Name *string `pulumi:"name"`
}

// InstallationInput is an input type that accepts InstallationArgs and InstallationOutput values.
// You can construct a concrete instance of `InstallationInput` via:
//
//          InstallationArgs{...}
type InstallationInput interface {
	pulumi.Input

	ToInstallationOutput() InstallationOutput
	ToInstallationOutputWithContext(context.Context) InstallationOutput
}

// This represents how a particular software package may be installed on a system.
type InstallationArgs struct {
	// Required. All of the places within the filesystem versions of this package have been found.
	Location LocationArrayInput `pulumi:"location"`
	// Output only. The name of the installed package.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (InstallationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Installation)(nil)).Elem()
}

func (i InstallationArgs) ToInstallationOutput() InstallationOutput {
	return i.ToInstallationOutputWithContext(context.Background())
}

func (i InstallationArgs) ToInstallationOutputWithContext(ctx context.Context) InstallationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstallationOutput)
}

func (i InstallationArgs) ToInstallationPtrOutput() InstallationPtrOutput {
	return i.ToInstallationPtrOutputWithContext(context.Background())
}

func (i InstallationArgs) ToInstallationPtrOutputWithContext(ctx context.Context) InstallationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstallationOutput).ToInstallationPtrOutputWithContext(ctx)
}

// InstallationPtrInput is an input type that accepts InstallationArgs, InstallationPtr and InstallationPtrOutput values.
// You can construct a concrete instance of `InstallationPtrInput` via:
//
//          InstallationArgs{...}
//
//  or:
//
//          nil
type InstallationPtrInput interface {
	pulumi.Input

	ToInstallationPtrOutput() InstallationPtrOutput
	ToInstallationPtrOutputWithContext(context.Context) InstallationPtrOutput
}

type installationPtrType InstallationArgs

func InstallationPtr(v *InstallationArgs) InstallationPtrInput {
	return (*installationPtrType)(v)
}

func (*installationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Installation)(nil)).Elem()
}

func (i *installationPtrType) ToInstallationPtrOutput() InstallationPtrOutput {
	return i.ToInstallationPtrOutputWithContext(context.Background())
}

func (i *installationPtrType) ToInstallationPtrOutputWithContext(ctx context.Context) InstallationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstallationPtrOutput)
}

// This represents how a particular software package may be installed on a system.
type InstallationOutput struct{ *pulumi.OutputState }

func (InstallationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Installation)(nil)).Elem()
}

func (o InstallationOutput) ToInstallationOutput() InstallationOutput {
	return o
}

func (o InstallationOutput) ToInstallationOutputWithContext(ctx context.Context) InstallationOutput {
	return o
}

func (o InstallationOutput) ToInstallationPtrOutput() InstallationPtrOutput {
	return o.ToInstallationPtrOutputWithContext(context.Background())
}

func (o InstallationOutput) ToInstallationPtrOutputWithContext(ctx context.Context) InstallationPtrOutput {
	return o.ApplyT(func(v Installation) *Installation {
		return &v
	}).(InstallationPtrOutput)
}

// Required. All of the places within the filesystem versions of this package have been found.
func (o InstallationOutput) Location() LocationArrayOutput {
	return o.ApplyT(func(v Installation) []Location { return v.Location }).(LocationArrayOutput)
}

// Output only. The name of the installed package.
func (o InstallationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Installation) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type InstallationPtrOutput struct{ *pulumi.OutputState }

func (InstallationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Installation)(nil)).Elem()
}

func (o InstallationPtrOutput) ToInstallationPtrOutput() InstallationPtrOutput {
	return o
}

func (o InstallationPtrOutput) ToInstallationPtrOutputWithContext(ctx context.Context) InstallationPtrOutput {
	return o
}

func (o InstallationPtrOutput) Elem() InstallationOutput {
	return o.ApplyT(func(v *Installation) Installation { return *v }).(InstallationOutput)
}

// Required. All of the places within the filesystem versions of this package have been found.
func (o InstallationPtrOutput) Location() LocationArrayOutput {
	return o.ApplyT(func(v *Installation) []Location {
		if v == nil {
			return nil
		}
		return v.Location
	}).(LocationArrayOutput)
}

// Output only. The name of the installed package.
func (o InstallationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Installation) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

type KnowledgeBase struct {
	// The KB name (generally of the form KB[0-9]+ i.e. KB123456).
	Name *string `pulumi:"name"`
	// A link to the KB in the Windows update catalog - https://www.catalog.update.microsoft.com/
	Url *string `pulumi:"url"`
}

// KnowledgeBaseInput is an input type that accepts KnowledgeBaseArgs and KnowledgeBaseOutput values.
// You can construct a concrete instance of `KnowledgeBaseInput` via:
//
//          KnowledgeBaseArgs{...}
type KnowledgeBaseInput interface {
	pulumi.Input

	ToKnowledgeBaseOutput() KnowledgeBaseOutput
	ToKnowledgeBaseOutputWithContext(context.Context) KnowledgeBaseOutput
}

type KnowledgeBaseArgs struct {
	// The KB name (generally of the form KB[0-9]+ i.e. KB123456).
	Name pulumi.StringPtrInput `pulumi:"name"`
	// A link to the KB in the Windows update catalog - https://www.catalog.update.microsoft.com/
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (KnowledgeBaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KnowledgeBase)(nil)).Elem()
}

func (i KnowledgeBaseArgs) ToKnowledgeBaseOutput() KnowledgeBaseOutput {
	return i.ToKnowledgeBaseOutputWithContext(context.Background())
}

func (i KnowledgeBaseArgs) ToKnowledgeBaseOutputWithContext(ctx context.Context) KnowledgeBaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KnowledgeBaseOutput)
}

// KnowledgeBaseArrayInput is an input type that accepts KnowledgeBaseArray and KnowledgeBaseArrayOutput values.
// You can construct a concrete instance of `KnowledgeBaseArrayInput` via:
//
//          KnowledgeBaseArray{ KnowledgeBaseArgs{...} }
type KnowledgeBaseArrayInput interface {
	pulumi.Input

	ToKnowledgeBaseArrayOutput() KnowledgeBaseArrayOutput
	ToKnowledgeBaseArrayOutputWithContext(context.Context) KnowledgeBaseArrayOutput
}

type KnowledgeBaseArray []KnowledgeBaseInput

func (KnowledgeBaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KnowledgeBase)(nil)).Elem()
}

func (i KnowledgeBaseArray) ToKnowledgeBaseArrayOutput() KnowledgeBaseArrayOutput {
	return i.ToKnowledgeBaseArrayOutputWithContext(context.Background())
}

func (i KnowledgeBaseArray) ToKnowledgeBaseArrayOutputWithContext(ctx context.Context) KnowledgeBaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KnowledgeBaseArrayOutput)
}

type KnowledgeBaseOutput struct{ *pulumi.OutputState }

func (KnowledgeBaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KnowledgeBase)(nil)).Elem()
}

func (o KnowledgeBaseOutput) ToKnowledgeBaseOutput() KnowledgeBaseOutput {
	return o
}

func (o KnowledgeBaseOutput) ToKnowledgeBaseOutputWithContext(ctx context.Context) KnowledgeBaseOutput {
	return o
}

// The KB name (generally of the form KB[0-9]+ i.e. KB123456).
func (o KnowledgeBaseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KnowledgeBase) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// A link to the KB in the Windows update catalog - https://www.catalog.update.microsoft.com/
func (o KnowledgeBaseOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KnowledgeBase) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type KnowledgeBaseArrayOutput struct{ *pulumi.OutputState }

func (KnowledgeBaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KnowledgeBase)(nil)).Elem()
}

func (o KnowledgeBaseArrayOutput) ToKnowledgeBaseArrayOutput() KnowledgeBaseArrayOutput {
	return o
}

func (o KnowledgeBaseArrayOutput) ToKnowledgeBaseArrayOutputWithContext(ctx context.Context) KnowledgeBaseArrayOutput {
	return o
}

func (o KnowledgeBaseArrayOutput) Index(i pulumi.IntInput) KnowledgeBaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KnowledgeBase {
		return vs[0].([]KnowledgeBase)[vs[1].(int)]
	}).(KnowledgeBaseOutput)
}

// Layer holds metadata specific to a layer of a Docker image.
type Layer struct {
	// The recovered arguments to the Dockerfile directive.
	Arguments *string `pulumi:"arguments"`
	// Required. The recovered Dockerfile directive used to construct this layer.
	Directive *string `pulumi:"directive"`
}

// LayerInput is an input type that accepts LayerArgs and LayerOutput values.
// You can construct a concrete instance of `LayerInput` via:
//
//          LayerArgs{...}
type LayerInput interface {
	pulumi.Input

	ToLayerOutput() LayerOutput
	ToLayerOutputWithContext(context.Context) LayerOutput
}

// Layer holds metadata specific to a layer of a Docker image.
type LayerArgs struct {
	// The recovered arguments to the Dockerfile directive.
	Arguments pulumi.StringPtrInput `pulumi:"arguments"`
	// Required. The recovered Dockerfile directive used to construct this layer.
	Directive pulumi.StringPtrInput `pulumi:"directive"`
}

func (LayerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Layer)(nil)).Elem()
}

func (i LayerArgs) ToLayerOutput() LayerOutput {
	return i.ToLayerOutputWithContext(context.Background())
}

func (i LayerArgs) ToLayerOutputWithContext(ctx context.Context) LayerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LayerOutput)
}

// LayerArrayInput is an input type that accepts LayerArray and LayerArrayOutput values.
// You can construct a concrete instance of `LayerArrayInput` via:
//
//          LayerArray{ LayerArgs{...} }
type LayerArrayInput interface {
	pulumi.Input

	ToLayerArrayOutput() LayerArrayOutput
	ToLayerArrayOutputWithContext(context.Context) LayerArrayOutput
}

type LayerArray []LayerInput

func (LayerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Layer)(nil)).Elem()
}

func (i LayerArray) ToLayerArrayOutput() LayerArrayOutput {
	return i.ToLayerArrayOutputWithContext(context.Background())
}

func (i LayerArray) ToLayerArrayOutputWithContext(ctx context.Context) LayerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LayerArrayOutput)
}

// Layer holds metadata specific to a layer of a Docker image.
type LayerOutput struct{ *pulumi.OutputState }

func (LayerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Layer)(nil)).Elem()
}

func (o LayerOutput) ToLayerOutput() LayerOutput {
	return o
}

func (o LayerOutput) ToLayerOutputWithContext(ctx context.Context) LayerOutput {
	return o
}

// The recovered arguments to the Dockerfile directive.
func (o LayerOutput) Arguments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Layer) *string { return v.Arguments }).(pulumi.StringPtrOutput)
}

// Required. The recovered Dockerfile directive used to construct this layer.
func (o LayerOutput) Directive() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Layer) *string { return v.Directive }).(pulumi.StringPtrOutput)
}

type LayerArrayOutput struct{ *pulumi.OutputState }

func (LayerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Layer)(nil)).Elem()
}

func (o LayerArrayOutput) ToLayerArrayOutput() LayerArrayOutput {
	return o
}

func (o LayerArrayOutput) ToLayerArrayOutputWithContext(ctx context.Context) LayerArrayOutput {
	return o
}

func (o LayerArrayOutput) Index(i pulumi.IntInput) LayerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Layer {
		return vs[0].([]Layer)[vs[1].(int)]
	}).(LayerOutput)
}

// This corresponds to an in-toto link.
type Link struct {
	// ByProducts are data generated as part of a software supply chain step, but are not the actual result of the step.
	Byproducts *ByProducts `pulumi:"byproducts"`
	// This field contains the full command executed for the step. This can also be empty if links are generated for operations that aren't directly mapped to a specific command. Each term in the command is an independent string in the list. An example of a command in the in-toto metadata field is: "command": ["git", "clone", "https://github.com/in-toto/demo-project.git"]
	Command []string `pulumi:"command"`
	// This is a field that can be used to capture information about the environment. It is suggested for this field to contain information that details environment variables, filesystem information, and the present working directory. The recommended structure of this field is: "environment": { "custom_values": { "variables": "", "filesystem": "", "workdir": "", "": "..." } }
	Environment *Environment `pulumi:"environment"`
	// Materials are the supply chain artifacts that go into the step and are used for the operation performed. The key of the map is the path of the artifact and the structure contains the recorded hash information. An example is: "materials": [ { "resource_uri": "foo/bar", "hashes": { "sha256": "ebebf...", : } } ]
	Materials []GrafeasV1beta1IntotoArtifact `pulumi:"materials"`
	// Products are the supply chain artifacts generated as a result of the step. The structure is identical to that of materials.
	Products []GrafeasV1beta1IntotoArtifact `pulumi:"products"`
}

// LinkInput is an input type that accepts LinkArgs and LinkOutput values.
// You can construct a concrete instance of `LinkInput` via:
//
//          LinkArgs{...}
type LinkInput interface {
	pulumi.Input

	ToLinkOutput() LinkOutput
	ToLinkOutputWithContext(context.Context) LinkOutput
}

// This corresponds to an in-toto link.
type LinkArgs struct {
	// ByProducts are data generated as part of a software supply chain step, but are not the actual result of the step.
	Byproducts ByProductsPtrInput `pulumi:"byproducts"`
	// This field contains the full command executed for the step. This can also be empty if links are generated for operations that aren't directly mapped to a specific command. Each term in the command is an independent string in the list. An example of a command in the in-toto metadata field is: "command": ["git", "clone", "https://github.com/in-toto/demo-project.git"]
	Command pulumi.StringArrayInput `pulumi:"command"`
	// This is a field that can be used to capture information about the environment. It is suggested for this field to contain information that details environment variables, filesystem information, and the present working directory. The recommended structure of this field is: "environment": { "custom_values": { "variables": "", "filesystem": "", "workdir": "", "": "..." } }
	Environment EnvironmentPtrInput `pulumi:"environment"`
	// Materials are the supply chain artifacts that go into the step and are used for the operation performed. The key of the map is the path of the artifact and the structure contains the recorded hash information. An example is: "materials": [ { "resource_uri": "foo/bar", "hashes": { "sha256": "ebebf...", : } } ]
	Materials GrafeasV1beta1IntotoArtifactArrayInput `pulumi:"materials"`
	// Products are the supply chain artifacts generated as a result of the step. The structure is identical to that of materials.
	Products GrafeasV1beta1IntotoArtifactArrayInput `pulumi:"products"`
}

func (LinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Link)(nil)).Elem()
}

func (i LinkArgs) ToLinkOutput() LinkOutput {
	return i.ToLinkOutputWithContext(context.Background())
}

func (i LinkArgs) ToLinkOutputWithContext(ctx context.Context) LinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkOutput)
}

func (i LinkArgs) ToLinkPtrOutput() LinkPtrOutput {
	return i.ToLinkPtrOutputWithContext(context.Background())
}

func (i LinkArgs) ToLinkPtrOutputWithContext(ctx context.Context) LinkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkOutput).ToLinkPtrOutputWithContext(ctx)
}

// LinkPtrInput is an input type that accepts LinkArgs, LinkPtr and LinkPtrOutput values.
// You can construct a concrete instance of `LinkPtrInput` via:
//
//          LinkArgs{...}
//
//  or:
//
//          nil
type LinkPtrInput interface {
	pulumi.Input

	ToLinkPtrOutput() LinkPtrOutput
	ToLinkPtrOutputWithContext(context.Context) LinkPtrOutput
}

type linkPtrType LinkArgs

func LinkPtr(v *LinkArgs) LinkPtrInput {
	return (*linkPtrType)(v)
}

func (*linkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Link)(nil)).Elem()
}

func (i *linkPtrType) ToLinkPtrOutput() LinkPtrOutput {
	return i.ToLinkPtrOutputWithContext(context.Background())
}

func (i *linkPtrType) ToLinkPtrOutputWithContext(ctx context.Context) LinkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkPtrOutput)
}

// This corresponds to an in-toto link.
type LinkOutput struct{ *pulumi.OutputState }

func (LinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Link)(nil)).Elem()
}

func (o LinkOutput) ToLinkOutput() LinkOutput {
	return o
}

func (o LinkOutput) ToLinkOutputWithContext(ctx context.Context) LinkOutput {
	return o
}

func (o LinkOutput) ToLinkPtrOutput() LinkPtrOutput {
	return o.ToLinkPtrOutputWithContext(context.Background())
}

func (o LinkOutput) ToLinkPtrOutputWithContext(ctx context.Context) LinkPtrOutput {
	return o.ApplyT(func(v Link) *Link {
		return &v
	}).(LinkPtrOutput)
}

// ByProducts are data generated as part of a software supply chain step, but are not the actual result of the step.
func (o LinkOutput) Byproducts() ByProductsPtrOutput {
	return o.ApplyT(func(v Link) *ByProducts { return v.Byproducts }).(ByProductsPtrOutput)
}

// This field contains the full command executed for the step. This can also be empty if links are generated for operations that aren't directly mapped to a specific command. Each term in the command is an independent string in the list. An example of a command in the in-toto metadata field is: "command": ["git", "clone", "https://github.com/in-toto/demo-project.git"]
func (o LinkOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Link) []string { return v.Command }).(pulumi.StringArrayOutput)
}

// This is a field that can be used to capture information about the environment. It is suggested for this field to contain information that details environment variables, filesystem information, and the present working directory. The recommended structure of this field is: "environment": { "custom_values": { "variables": "", "filesystem": "", "workdir": "", "": "..." } }
func (o LinkOutput) Environment() EnvironmentPtrOutput {
	return o.ApplyT(func(v Link) *Environment { return v.Environment }).(EnvironmentPtrOutput)
}

// Materials are the supply chain artifacts that go into the step and are used for the operation performed. The key of the map is the path of the artifact and the structure contains the recorded hash information. An example is: "materials": [ { "resource_uri": "foo/bar", "hashes": { "sha256": "ebebf...", : } } ]
func (o LinkOutput) Materials() GrafeasV1beta1IntotoArtifactArrayOutput {
	return o.ApplyT(func(v Link) []GrafeasV1beta1IntotoArtifact { return v.Materials }).(GrafeasV1beta1IntotoArtifactArrayOutput)
}

// Products are the supply chain artifacts generated as a result of the step. The structure is identical to that of materials.
func (o LinkOutput) Products() GrafeasV1beta1IntotoArtifactArrayOutput {
	return o.ApplyT(func(v Link) []GrafeasV1beta1IntotoArtifact { return v.Products }).(GrafeasV1beta1IntotoArtifactArrayOutput)
}

type LinkPtrOutput struct{ *pulumi.OutputState }

func (LinkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Link)(nil)).Elem()
}

func (o LinkPtrOutput) ToLinkPtrOutput() LinkPtrOutput {
	return o
}

func (o LinkPtrOutput) ToLinkPtrOutputWithContext(ctx context.Context) LinkPtrOutput {
	return o
}

func (o LinkPtrOutput) Elem() LinkOutput {
	return o.ApplyT(func(v *Link) Link { return *v }).(LinkOutput)
}

// ByProducts are data generated as part of a software supply chain step, but are not the actual result of the step.
func (o LinkPtrOutput) Byproducts() ByProductsPtrOutput {
	return o.ApplyT(func(v *Link) *ByProducts {
		if v == nil {
			return nil
		}
		return v.Byproducts
	}).(ByProductsPtrOutput)
}

// This field contains the full command executed for the step. This can also be empty if links are generated for operations that aren't directly mapped to a specific command. Each term in the command is an independent string in the list. An example of a command in the in-toto metadata field is: "command": ["git", "clone", "https://github.com/in-toto/demo-project.git"]
func (o LinkPtrOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Link) []string {
		if v == nil {
			return nil
		}
		return v.Command
	}).(pulumi.StringArrayOutput)
}

// This is a field that can be used to capture information about the environment. It is suggested for this field to contain information that details environment variables, filesystem information, and the present working directory. The recommended structure of this field is: "environment": { "custom_values": { "variables": "", "filesystem": "", "workdir": "", "": "..." } }
func (o LinkPtrOutput) Environment() EnvironmentPtrOutput {
	return o.ApplyT(func(v *Link) *Environment {
		if v == nil {
			return nil
		}
		return v.Environment
	}).(EnvironmentPtrOutput)
}

// Materials are the supply chain artifacts that go into the step and are used for the operation performed. The key of the map is the path of the artifact and the structure contains the recorded hash information. An example is: "materials": [ { "resource_uri": "foo/bar", "hashes": { "sha256": "ebebf...", : } } ]
func (o LinkPtrOutput) Materials() GrafeasV1beta1IntotoArtifactArrayOutput {
	return o.ApplyT(func(v *Link) []GrafeasV1beta1IntotoArtifact {
		if v == nil {
			return nil
		}
		return v.Materials
	}).(GrafeasV1beta1IntotoArtifactArrayOutput)
}

// Products are the supply chain artifacts generated as a result of the step. The structure is identical to that of materials.
func (o LinkPtrOutput) Products() GrafeasV1beta1IntotoArtifactArrayOutput {
	return o.ApplyT(func(v *Link) []GrafeasV1beta1IntotoArtifact {
		if v == nil {
			return nil
		}
		return v.Products
	}).(GrafeasV1beta1IntotoArtifactArrayOutput)
}

// An occurrence of a particular package installation found within a system's filesystem. E.g., glibc was found in `/var/lib/dpkg/status`.
type Location struct {
	// Required. The CPE URI in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
	CpeUri *string `pulumi:"cpeUri"`
	// The path from which we gathered that this package/version is installed.
	Path *string `pulumi:"path"`
	// The version installed at this location.
	Version *Version `pulumi:"version"`
}

// LocationInput is an input type that accepts LocationArgs and LocationOutput values.
// You can construct a concrete instance of `LocationInput` via:
//
//          LocationArgs{...}
type LocationInput interface {
	pulumi.Input

	ToLocationOutput() LocationOutput
	ToLocationOutputWithContext(context.Context) LocationOutput
}

// An occurrence of a particular package installation found within a system's filesystem. E.g., glibc was found in `/var/lib/dpkg/status`.
type LocationArgs struct {
	// Required. The CPE URI in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
	CpeUri pulumi.StringPtrInput `pulumi:"cpeUri"`
	// The path from which we gathered that this package/version is installed.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// The version installed at this location.
	Version VersionPtrInput `pulumi:"version"`
}

func (LocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Location)(nil)).Elem()
}

func (i LocationArgs) ToLocationOutput() LocationOutput {
	return i.ToLocationOutputWithContext(context.Background())
}

func (i LocationArgs) ToLocationOutputWithContext(ctx context.Context) LocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationOutput)
}

// LocationArrayInput is an input type that accepts LocationArray and LocationArrayOutput values.
// You can construct a concrete instance of `LocationArrayInput` via:
//
//          LocationArray{ LocationArgs{...} }
type LocationArrayInput interface {
	pulumi.Input

	ToLocationArrayOutput() LocationArrayOutput
	ToLocationArrayOutputWithContext(context.Context) LocationArrayOutput
}

type LocationArray []LocationInput

func (LocationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Location)(nil)).Elem()
}

func (i LocationArray) ToLocationArrayOutput() LocationArrayOutput {
	return i.ToLocationArrayOutputWithContext(context.Background())
}

func (i LocationArray) ToLocationArrayOutputWithContext(ctx context.Context) LocationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationArrayOutput)
}

// An occurrence of a particular package installation found within a system's filesystem. E.g., glibc was found in `/var/lib/dpkg/status`.
type LocationOutput struct{ *pulumi.OutputState }

func (LocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Location)(nil)).Elem()
}

func (o LocationOutput) ToLocationOutput() LocationOutput {
	return o
}

func (o LocationOutput) ToLocationOutputWithContext(ctx context.Context) LocationOutput {
	return o
}

// Required. The CPE URI in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
func (o LocationOutput) CpeUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Location) *string { return v.CpeUri }).(pulumi.StringPtrOutput)
}

// The path from which we gathered that this package/version is installed.
func (o LocationOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Location) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// The version installed at this location.
func (o LocationOutput) Version() VersionPtrOutput {
	return o.ApplyT(func(v Location) *Version { return v.Version }).(VersionPtrOutput)
}

type LocationArrayOutput struct{ *pulumi.OutputState }

func (LocationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Location)(nil)).Elem()
}

func (o LocationArrayOutput) ToLocationArrayOutput() LocationArrayOutput {
	return o
}

func (o LocationArrayOutput) ToLocationArrayOutputWithContext(ctx context.Context) LocationArrayOutput {
	return o
}

func (o LocationArrayOutput) Index(i pulumi.IntInput) LocationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Location {
		return vs[0].([]Location)[vs[1].(int)]
	}).(LocationOutput)
}

// This represents a particular package that is distributed over various channels. E.g., glibc (aka libc6) is distributed by many, at various versions.
type Package struct {
	// The various channels by which a package is distributed.
	Distribution []Distribution `pulumi:"distribution"`
	// Required. Immutable. The name of the package.
	Name *string `pulumi:"name"`
}

// PackageInput is an input type that accepts PackageArgs and PackageOutput values.
// You can construct a concrete instance of `PackageInput` via:
//
//          PackageArgs{...}
type PackageInput interface {
	pulumi.Input

	ToPackageOutput() PackageOutput
	ToPackageOutputWithContext(context.Context) PackageOutput
}

// This represents a particular package that is distributed over various channels. E.g., glibc (aka libc6) is distributed by many, at various versions.
type PackageArgs struct {
	// The various channels by which a package is distributed.
	Distribution DistributionArrayInput `pulumi:"distribution"`
	// Required. Immutable. The name of the package.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (PackageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Package)(nil)).Elem()
}

func (i PackageArgs) ToPackageOutput() PackageOutput {
	return i.ToPackageOutputWithContext(context.Background())
}

func (i PackageArgs) ToPackageOutputWithContext(ctx context.Context) PackageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageOutput)
}

func (i PackageArgs) ToPackagePtrOutput() PackagePtrOutput {
	return i.ToPackagePtrOutputWithContext(context.Background())
}

func (i PackageArgs) ToPackagePtrOutputWithContext(ctx context.Context) PackagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageOutput).ToPackagePtrOutputWithContext(ctx)
}

// PackagePtrInput is an input type that accepts PackageArgs, PackagePtr and PackagePtrOutput values.
// You can construct a concrete instance of `PackagePtrInput` via:
//
//          PackageArgs{...}
//
//  or:
//
//          nil
type PackagePtrInput interface {
	pulumi.Input

	ToPackagePtrOutput() PackagePtrOutput
	ToPackagePtrOutputWithContext(context.Context) PackagePtrOutput
}

type packagePtrType PackageArgs

func PackagePtr(v *PackageArgs) PackagePtrInput {
	return (*packagePtrType)(v)
}

func (*packagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Package)(nil)).Elem()
}

func (i *packagePtrType) ToPackagePtrOutput() PackagePtrOutput {
	return i.ToPackagePtrOutputWithContext(context.Background())
}

func (i *packagePtrType) ToPackagePtrOutputWithContext(ctx context.Context) PackagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackagePtrOutput)
}

// This represents a particular package that is distributed over various channels. E.g., glibc (aka libc6) is distributed by many, at various versions.
type PackageOutput struct{ *pulumi.OutputState }

func (PackageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Package)(nil)).Elem()
}

func (o PackageOutput) ToPackageOutput() PackageOutput {
	return o
}

func (o PackageOutput) ToPackageOutputWithContext(ctx context.Context) PackageOutput {
	return o
}

func (o PackageOutput) ToPackagePtrOutput() PackagePtrOutput {
	return o.ToPackagePtrOutputWithContext(context.Background())
}

func (o PackageOutput) ToPackagePtrOutputWithContext(ctx context.Context) PackagePtrOutput {
	return o.ApplyT(func(v Package) *Package {
		return &v
	}).(PackagePtrOutput)
}

// The various channels by which a package is distributed.
func (o PackageOutput) Distribution() DistributionArrayOutput {
	return o.ApplyT(func(v Package) []Distribution { return v.Distribution }).(DistributionArrayOutput)
}

// Required. Immutable. The name of the package.
func (o PackageOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Package) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type PackagePtrOutput struct{ *pulumi.OutputState }

func (PackagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Package)(nil)).Elem()
}

func (o PackagePtrOutput) ToPackagePtrOutput() PackagePtrOutput {
	return o
}

func (o PackagePtrOutput) ToPackagePtrOutputWithContext(ctx context.Context) PackagePtrOutput {
	return o
}

func (o PackagePtrOutput) Elem() PackageOutput {
	return o.ApplyT(func(v *Package) Package { return *v }).(PackageOutput)
}

// The various channels by which a package is distributed.
func (o PackagePtrOutput) Distribution() DistributionArrayOutput {
	return o.ApplyT(func(v *Package) []Distribution {
		if v == nil {
			return nil
		}
		return v.Distribution
	}).(DistributionArrayOutput)
}

// Required. Immutable. The name of the package.
func (o PackagePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Package) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// This message wraps a location affected by a vulnerability and its associated fix (if one is available).
type PackageIssue struct {
	// Required. The location of the vulnerability.
	AffectedLocation *VulnerabilityLocation `pulumi:"affectedLocation"`
	// The location of the available fix for vulnerability.
	FixedLocation *VulnerabilityLocation `pulumi:"fixedLocation"`
	// Deprecated, use Details.effective_severity instead The severity (e.g., distro assigned severity) for this vulnerability.
	SeverityName *string `pulumi:"severityName"`
}

// PackageIssueInput is an input type that accepts PackageIssueArgs and PackageIssueOutput values.
// You can construct a concrete instance of `PackageIssueInput` via:
//
//          PackageIssueArgs{...}
type PackageIssueInput interface {
	pulumi.Input

	ToPackageIssueOutput() PackageIssueOutput
	ToPackageIssueOutputWithContext(context.Context) PackageIssueOutput
}

// This message wraps a location affected by a vulnerability and its associated fix (if one is available).
type PackageIssueArgs struct {
	// Required. The location of the vulnerability.
	AffectedLocation VulnerabilityLocationPtrInput `pulumi:"affectedLocation"`
	// The location of the available fix for vulnerability.
	FixedLocation VulnerabilityLocationPtrInput `pulumi:"fixedLocation"`
	// Deprecated, use Details.effective_severity instead The severity (e.g., distro assigned severity) for this vulnerability.
	SeverityName pulumi.StringPtrInput `pulumi:"severityName"`
}

func (PackageIssueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PackageIssue)(nil)).Elem()
}

func (i PackageIssueArgs) ToPackageIssueOutput() PackageIssueOutput {
	return i.ToPackageIssueOutputWithContext(context.Background())
}

func (i PackageIssueArgs) ToPackageIssueOutputWithContext(ctx context.Context) PackageIssueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageIssueOutput)
}

// PackageIssueArrayInput is an input type that accepts PackageIssueArray and PackageIssueArrayOutput values.
// You can construct a concrete instance of `PackageIssueArrayInput` via:
//
//          PackageIssueArray{ PackageIssueArgs{...} }
type PackageIssueArrayInput interface {
	pulumi.Input

	ToPackageIssueArrayOutput() PackageIssueArrayOutput
	ToPackageIssueArrayOutputWithContext(context.Context) PackageIssueArrayOutput
}

type PackageIssueArray []PackageIssueInput

func (PackageIssueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PackageIssue)(nil)).Elem()
}

func (i PackageIssueArray) ToPackageIssueArrayOutput() PackageIssueArrayOutput {
	return i.ToPackageIssueArrayOutputWithContext(context.Background())
}

func (i PackageIssueArray) ToPackageIssueArrayOutputWithContext(ctx context.Context) PackageIssueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageIssueArrayOutput)
}

// This message wraps a location affected by a vulnerability and its associated fix (if one is available).
type PackageIssueOutput struct{ *pulumi.OutputState }

func (PackageIssueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PackageIssue)(nil)).Elem()
}

func (o PackageIssueOutput) ToPackageIssueOutput() PackageIssueOutput {
	return o
}

func (o PackageIssueOutput) ToPackageIssueOutputWithContext(ctx context.Context) PackageIssueOutput {
	return o
}

// Required. The location of the vulnerability.
func (o PackageIssueOutput) AffectedLocation() VulnerabilityLocationPtrOutput {
	return o.ApplyT(func(v PackageIssue) *VulnerabilityLocation { return v.AffectedLocation }).(VulnerabilityLocationPtrOutput)
}

// The location of the available fix for vulnerability.
func (o PackageIssueOutput) FixedLocation() VulnerabilityLocationPtrOutput {
	return o.ApplyT(func(v PackageIssue) *VulnerabilityLocation { return v.FixedLocation }).(VulnerabilityLocationPtrOutput)
}

// Deprecated, use Details.effective_severity instead The severity (e.g., distro assigned severity) for this vulnerability.
func (o PackageIssueOutput) SeverityName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PackageIssue) *string { return v.SeverityName }).(pulumi.StringPtrOutput)
}

type PackageIssueArrayOutput struct{ *pulumi.OutputState }

func (PackageIssueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PackageIssue)(nil)).Elem()
}

func (o PackageIssueArrayOutput) ToPackageIssueArrayOutput() PackageIssueArrayOutput {
	return o
}

func (o PackageIssueArrayOutput) ToPackageIssueArrayOutputWithContext(ctx context.Context) PackageIssueArrayOutput {
	return o
}

func (o PackageIssueArrayOutput) Index(i pulumi.IntInput) PackageIssueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PackageIssue {
		return vs[0].([]PackageIssue)[vs[1].(int)]
	}).(PackageIssueOutput)
}

// An attestation wrapper with a PGP-compatible signature. This message only supports `ATTACHED` signatures, where the payload that is signed is included alongside the signature itself in the same file.
type PgpSignedAttestation struct {
	// Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).
	ContentType *string `pulumi:"contentType"`
	// The cryptographic fingerprint of the key used to generate the signature, as output by, e.g. `gpg --list-keys`. This should be the version 4, full 160-bit fingerprint, expressed as a 40 character hexidecimal string. See https://tools.ietf.org/html/rfc4880#section-12.2 for details. Implementations may choose to acknowledge "LONG", "SHORT", or other abbreviated key IDs, but only the full fingerprint is guaranteed to work. In gpg, the full fingerprint can be retrieved from the `fpr` field returned when calling --list-keys with --with-colons. For example: ```gpg --with-colons --with-fingerprint --force-v4-certs \ --list-keys attester@example.com tru::1:1513631572:0:3:1:5 pub:...... fpr:::::::::24FF6481B76AC91E66A00AC657A93A81EF3AE6FB:``` Above, the fingerprint is `24FF6481B76AC91E66A00AC657A93A81EF3AE6FB`.
	PgpKeyId *string `pulumi:"pgpKeyId"`
	// Required. The raw content of the signature, as output by GNU Privacy Guard (GPG) or equivalent. Since this message only supports attached signatures, the payload that was signed must be attached. While the signature format supported is dependent on the verification implementation, currently only ASCII-armored (`--armor` to gpg), non-clearsigned (`--sign` rather than `--clearsign` to gpg) are supported. Concretely, `gpg --sign --armor --output=signature.gpg payload.json` will create the signature content expected in this field in `signature.gpg` for the `payload.json` attestation payload.
	Signature *string `pulumi:"signature"`
}

// PgpSignedAttestationInput is an input type that accepts PgpSignedAttestationArgs and PgpSignedAttestationOutput values.
// You can construct a concrete instance of `PgpSignedAttestationInput` via:
//
//          PgpSignedAttestationArgs{...}
type PgpSignedAttestationInput interface {
	pulumi.Input

	ToPgpSignedAttestationOutput() PgpSignedAttestationOutput
	ToPgpSignedAttestationOutputWithContext(context.Context) PgpSignedAttestationOutput
}

// An attestation wrapper with a PGP-compatible signature. This message only supports `ATTACHED` signatures, where the payload that is signed is included alongside the signature itself in the same file.
type PgpSignedAttestationArgs struct {
	// Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).
	ContentType pulumi.StringPtrInput `pulumi:"contentType"`
	// The cryptographic fingerprint of the key used to generate the signature, as output by, e.g. `gpg --list-keys`. This should be the version 4, full 160-bit fingerprint, expressed as a 40 character hexidecimal string. See https://tools.ietf.org/html/rfc4880#section-12.2 for details. Implementations may choose to acknowledge "LONG", "SHORT", or other abbreviated key IDs, but only the full fingerprint is guaranteed to work. In gpg, the full fingerprint can be retrieved from the `fpr` field returned when calling --list-keys with --with-colons. For example: ```gpg --with-colons --with-fingerprint --force-v4-certs \ --list-keys attester@example.com tru::1:1513631572:0:3:1:5 pub:...... fpr:::::::::24FF6481B76AC91E66A00AC657A93A81EF3AE6FB:``` Above, the fingerprint is `24FF6481B76AC91E66A00AC657A93A81EF3AE6FB`.
	PgpKeyId pulumi.StringPtrInput `pulumi:"pgpKeyId"`
	// Required. The raw content of the signature, as output by GNU Privacy Guard (GPG) or equivalent. Since this message only supports attached signatures, the payload that was signed must be attached. While the signature format supported is dependent on the verification implementation, currently only ASCII-armored (`--armor` to gpg), non-clearsigned (`--sign` rather than `--clearsign` to gpg) are supported. Concretely, `gpg --sign --armor --output=signature.gpg payload.json` will create the signature content expected in this field in `signature.gpg` for the `payload.json` attestation payload.
	Signature pulumi.StringPtrInput `pulumi:"signature"`
}

func (PgpSignedAttestationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PgpSignedAttestation)(nil)).Elem()
}

func (i PgpSignedAttestationArgs) ToPgpSignedAttestationOutput() PgpSignedAttestationOutput {
	return i.ToPgpSignedAttestationOutputWithContext(context.Background())
}

func (i PgpSignedAttestationArgs) ToPgpSignedAttestationOutputWithContext(ctx context.Context) PgpSignedAttestationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PgpSignedAttestationOutput)
}

func (i PgpSignedAttestationArgs) ToPgpSignedAttestationPtrOutput() PgpSignedAttestationPtrOutput {
	return i.ToPgpSignedAttestationPtrOutputWithContext(context.Background())
}

func (i PgpSignedAttestationArgs) ToPgpSignedAttestationPtrOutputWithContext(ctx context.Context) PgpSignedAttestationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PgpSignedAttestationOutput).ToPgpSignedAttestationPtrOutputWithContext(ctx)
}

// PgpSignedAttestationPtrInput is an input type that accepts PgpSignedAttestationArgs, PgpSignedAttestationPtr and PgpSignedAttestationPtrOutput values.
// You can construct a concrete instance of `PgpSignedAttestationPtrInput` via:
//
//          PgpSignedAttestationArgs{...}
//
//  or:
//
//          nil
type PgpSignedAttestationPtrInput interface {
	pulumi.Input

	ToPgpSignedAttestationPtrOutput() PgpSignedAttestationPtrOutput
	ToPgpSignedAttestationPtrOutputWithContext(context.Context) PgpSignedAttestationPtrOutput
}

type pgpSignedAttestationPtrType PgpSignedAttestationArgs

func PgpSignedAttestationPtr(v *PgpSignedAttestationArgs) PgpSignedAttestationPtrInput {
	return (*pgpSignedAttestationPtrType)(v)
}

func (*pgpSignedAttestationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PgpSignedAttestation)(nil)).Elem()
}

func (i *pgpSignedAttestationPtrType) ToPgpSignedAttestationPtrOutput() PgpSignedAttestationPtrOutput {
	return i.ToPgpSignedAttestationPtrOutputWithContext(context.Background())
}

func (i *pgpSignedAttestationPtrType) ToPgpSignedAttestationPtrOutputWithContext(ctx context.Context) PgpSignedAttestationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PgpSignedAttestationPtrOutput)
}

// An attestation wrapper with a PGP-compatible signature. This message only supports `ATTACHED` signatures, where the payload that is signed is included alongside the signature itself in the same file.
type PgpSignedAttestationOutput struct{ *pulumi.OutputState }

func (PgpSignedAttestationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PgpSignedAttestation)(nil)).Elem()
}

func (o PgpSignedAttestationOutput) ToPgpSignedAttestationOutput() PgpSignedAttestationOutput {
	return o
}

func (o PgpSignedAttestationOutput) ToPgpSignedAttestationOutputWithContext(ctx context.Context) PgpSignedAttestationOutput {
	return o
}

func (o PgpSignedAttestationOutput) ToPgpSignedAttestationPtrOutput() PgpSignedAttestationPtrOutput {
	return o.ToPgpSignedAttestationPtrOutputWithContext(context.Background())
}

func (o PgpSignedAttestationOutput) ToPgpSignedAttestationPtrOutputWithContext(ctx context.Context) PgpSignedAttestationPtrOutput {
	return o.ApplyT(func(v PgpSignedAttestation) *PgpSignedAttestation {
		return &v
	}).(PgpSignedAttestationPtrOutput)
}

// Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).
func (o PgpSignedAttestationOutput) ContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PgpSignedAttestation) *string { return v.ContentType }).(pulumi.StringPtrOutput)
}

// The cryptographic fingerprint of the key used to generate the signature, as output by, e.g. `gpg --list-keys`. This should be the version 4, full 160-bit fingerprint, expressed as a 40 character hexidecimal string. See https://tools.ietf.org/html/rfc4880#section-12.2 for details. Implementations may choose to acknowledge "LONG", "SHORT", or other abbreviated key IDs, but only the full fingerprint is guaranteed to work. In gpg, the full fingerprint can be retrieved from the `fpr` field returned when calling --list-keys with --with-colons. For example: ```gpg --with-colons --with-fingerprint --force-v4-certs \ --list-keys attester@example.com tru::1:1513631572:0:3:1:5 pub:...... fpr:::::::::24FF6481B76AC91E66A00AC657A93A81EF3AE6FB:``` Above, the fingerprint is `24FF6481B76AC91E66A00AC657A93A81EF3AE6FB`.
func (o PgpSignedAttestationOutput) PgpKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PgpSignedAttestation) *string { return v.PgpKeyId }).(pulumi.StringPtrOutput)
}

// Required. The raw content of the signature, as output by GNU Privacy Guard (GPG) or equivalent. Since this message only supports attached signatures, the payload that was signed must be attached. While the signature format supported is dependent on the verification implementation, currently only ASCII-armored (`--armor` to gpg), non-clearsigned (`--sign` rather than `--clearsign` to gpg) are supported. Concretely, `gpg --sign --armor --output=signature.gpg payload.json` will create the signature content expected in this field in `signature.gpg` for the `payload.json` attestation payload.
func (o PgpSignedAttestationOutput) Signature() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PgpSignedAttestation) *string { return v.Signature }).(pulumi.StringPtrOutput)
}

type PgpSignedAttestationPtrOutput struct{ *pulumi.OutputState }

func (PgpSignedAttestationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PgpSignedAttestation)(nil)).Elem()
}

func (o PgpSignedAttestationPtrOutput) ToPgpSignedAttestationPtrOutput() PgpSignedAttestationPtrOutput {
	return o
}

func (o PgpSignedAttestationPtrOutput) ToPgpSignedAttestationPtrOutputWithContext(ctx context.Context) PgpSignedAttestationPtrOutput {
	return o
}

func (o PgpSignedAttestationPtrOutput) Elem() PgpSignedAttestationOutput {
	return o.ApplyT(func(v *PgpSignedAttestation) PgpSignedAttestation { return *v }).(PgpSignedAttestationOutput)
}

// Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).
func (o PgpSignedAttestationPtrOutput) ContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PgpSignedAttestation) *string {
		if v == nil {
			return nil
		}
		return v.ContentType
	}).(pulumi.StringPtrOutput)
}

// The cryptographic fingerprint of the key used to generate the signature, as output by, e.g. `gpg --list-keys`. This should be the version 4, full 160-bit fingerprint, expressed as a 40 character hexidecimal string. See https://tools.ietf.org/html/rfc4880#section-12.2 for details. Implementations may choose to acknowledge "LONG", "SHORT", or other abbreviated key IDs, but only the full fingerprint is guaranteed to work. In gpg, the full fingerprint can be retrieved from the `fpr` field returned when calling --list-keys with --with-colons. For example: ```gpg --with-colons --with-fingerprint --force-v4-certs \ --list-keys attester@example.com tru::1:1513631572:0:3:1:5 pub:...... fpr:::::::::24FF6481B76AC91E66A00AC657A93A81EF3AE6FB:``` Above, the fingerprint is `24FF6481B76AC91E66A00AC657A93A81EF3AE6FB`.
func (o PgpSignedAttestationPtrOutput) PgpKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PgpSignedAttestation) *string {
		if v == nil {
			return nil
		}
		return v.PgpKeyId
	}).(pulumi.StringPtrOutput)
}

// Required. The raw content of the signature, as output by GNU Privacy Guard (GPG) or equivalent. Since this message only supports attached signatures, the payload that was signed must be attached. While the signature format supported is dependent on the verification implementation, currently only ASCII-armored (`--armor` to gpg), non-clearsigned (`--sign` rather than `--clearsign` to gpg) are supported. Concretely, `gpg --sign --armor --output=signature.gpg payload.json` will create the signature content expected in this field in `signature.gpg` for the `payload.json` attestation payload.
func (o PgpSignedAttestationPtrOutput) Signature() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PgpSignedAttestation) *string {
		if v == nil {
			return nil
		}
		return v.Signature
	}).(pulumi.StringPtrOutput)
}

// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
type Policy struct {
	// Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
	Bindings []Binding `pulumi:"bindings"`
	// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
	Etag *string `pulumi:"etag"`
	// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Version *int `pulumi:"version"`
}

// PolicyInput is an input type that accepts PolicyArgs and PolicyOutput values.
// You can construct a concrete instance of `PolicyInput` via:
//
//          PolicyArgs{...}
type PolicyInput interface {
	pulumi.Input

	ToPolicyOutput() PolicyOutput
	ToPolicyOutputWithContext(context.Context) PolicyOutput
}

// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
type PolicyArgs struct {
	// Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
	Bindings BindingArrayInput `pulumi:"bindings"`
	// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
	Etag pulumi.StringPtrInput `pulumi:"etag"`
	// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Version pulumi.IntPtrInput `pulumi:"version"`
}

func (PolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Policy)(nil)).Elem()
}

func (i PolicyArgs) ToPolicyOutput() PolicyOutput {
	return i.ToPolicyOutputWithContext(context.Background())
}

func (i PolicyArgs) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyOutput)
}

func (i PolicyArgs) ToPolicyPtrOutput() PolicyPtrOutput {
	return i.ToPolicyPtrOutputWithContext(context.Background())
}

func (i PolicyArgs) ToPolicyPtrOutputWithContext(ctx context.Context) PolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyOutput).ToPolicyPtrOutputWithContext(ctx)
}

// PolicyPtrInput is an input type that accepts PolicyArgs, PolicyPtr and PolicyPtrOutput values.
// You can construct a concrete instance of `PolicyPtrInput` via:
//
//          PolicyArgs{...}
//
//  or:
//
//          nil
type PolicyPtrInput interface {
	pulumi.Input

	ToPolicyPtrOutput() PolicyPtrOutput
	ToPolicyPtrOutputWithContext(context.Context) PolicyPtrOutput
}

type policyPtrType PolicyArgs

func PolicyPtr(v *PolicyArgs) PolicyPtrInput {
	return (*policyPtrType)(v)
}

func (*policyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Policy)(nil)).Elem()
}

func (i *policyPtrType) ToPolicyPtrOutput() PolicyPtrOutput {
	return i.ToPolicyPtrOutputWithContext(context.Background())
}

func (i *policyPtrType) ToPolicyPtrOutputWithContext(ctx context.Context) PolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyPtrOutput)
}

// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
type PolicyOutput struct{ *pulumi.OutputState }

func (PolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Policy)(nil)).Elem()
}

func (o PolicyOutput) ToPolicyOutput() PolicyOutput {
	return o
}

func (o PolicyOutput) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return o
}

func (o PolicyOutput) ToPolicyPtrOutput() PolicyPtrOutput {
	return o.ToPolicyPtrOutputWithContext(context.Background())
}

func (o PolicyOutput) ToPolicyPtrOutputWithContext(ctx context.Context) PolicyPtrOutput {
	return o.ApplyT(func(v Policy) *Policy {
		return &v
	}).(PolicyPtrOutput)
}

// Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
func (o PolicyOutput) Bindings() BindingArrayOutput {
	return o.ApplyT(func(v Policy) []Binding { return v.Bindings }).(BindingArrayOutput)
}

// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
func (o PolicyOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Policy) *string { return v.Etag }).(pulumi.StringPtrOutput)
}

// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o PolicyOutput) Version() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Policy) *int { return v.Version }).(pulumi.IntPtrOutput)
}

type PolicyPtrOutput struct{ *pulumi.OutputState }

func (PolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Policy)(nil)).Elem()
}

func (o PolicyPtrOutput) ToPolicyPtrOutput() PolicyPtrOutput {
	return o
}

func (o PolicyPtrOutput) ToPolicyPtrOutputWithContext(ctx context.Context) PolicyPtrOutput {
	return o
}

func (o PolicyPtrOutput) Elem() PolicyOutput {
	return o.ApplyT(func(v *Policy) Policy { return *v }).(PolicyOutput)
}

// Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
func (o PolicyPtrOutput) Bindings() BindingArrayOutput {
	return o.ApplyT(func(v *Policy) []Binding {
		if v == nil {
			return nil
		}
		return v.Bindings
	}).(BindingArrayOutput)
}

// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
func (o PolicyPtrOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Policy) *string {
		if v == nil {
			return nil
		}
		return v.Etag
	}).(pulumi.StringPtrOutput)
}

// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o PolicyPtrOutput) Version() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Policy) *int {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.IntPtrOutput)
}

// Selects a repo using a Google Cloud Platform project ID (e.g., winged-cargo-31) and a repo name within that project.
type ProjectRepoId struct {
	// The ID of the project.
	ProjectId *string `pulumi:"projectId"`
	// The name of the repo. Leave empty for the default repo.
	RepoName *string `pulumi:"repoName"`
}

// ProjectRepoIdInput is an input type that accepts ProjectRepoIdArgs and ProjectRepoIdOutput values.
// You can construct a concrete instance of `ProjectRepoIdInput` via:
//
//          ProjectRepoIdArgs{...}
type ProjectRepoIdInput interface {
	pulumi.Input

	ToProjectRepoIdOutput() ProjectRepoIdOutput
	ToProjectRepoIdOutputWithContext(context.Context) ProjectRepoIdOutput
}

// Selects a repo using a Google Cloud Platform project ID (e.g., winged-cargo-31) and a repo name within that project.
type ProjectRepoIdArgs struct {
	// The ID of the project.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// The name of the repo. Leave empty for the default repo.
	RepoName pulumi.StringPtrInput `pulumi:"repoName"`
}

func (ProjectRepoIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectRepoId)(nil)).Elem()
}

func (i ProjectRepoIdArgs) ToProjectRepoIdOutput() ProjectRepoIdOutput {
	return i.ToProjectRepoIdOutputWithContext(context.Background())
}

func (i ProjectRepoIdArgs) ToProjectRepoIdOutputWithContext(ctx context.Context) ProjectRepoIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectRepoIdOutput)
}

func (i ProjectRepoIdArgs) ToProjectRepoIdPtrOutput() ProjectRepoIdPtrOutput {
	return i.ToProjectRepoIdPtrOutputWithContext(context.Background())
}

func (i ProjectRepoIdArgs) ToProjectRepoIdPtrOutputWithContext(ctx context.Context) ProjectRepoIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectRepoIdOutput).ToProjectRepoIdPtrOutputWithContext(ctx)
}

// ProjectRepoIdPtrInput is an input type that accepts ProjectRepoIdArgs, ProjectRepoIdPtr and ProjectRepoIdPtrOutput values.
// You can construct a concrete instance of `ProjectRepoIdPtrInput` via:
//
//          ProjectRepoIdArgs{...}
//
//  or:
//
//          nil
type ProjectRepoIdPtrInput interface {
	pulumi.Input

	ToProjectRepoIdPtrOutput() ProjectRepoIdPtrOutput
	ToProjectRepoIdPtrOutputWithContext(context.Context) ProjectRepoIdPtrOutput
}

type projectRepoIdPtrType ProjectRepoIdArgs

func ProjectRepoIdPtr(v *ProjectRepoIdArgs) ProjectRepoIdPtrInput {
	return (*projectRepoIdPtrType)(v)
}

func (*projectRepoIdPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectRepoId)(nil)).Elem()
}

func (i *projectRepoIdPtrType) ToProjectRepoIdPtrOutput() ProjectRepoIdPtrOutput {
	return i.ToProjectRepoIdPtrOutputWithContext(context.Background())
}

func (i *projectRepoIdPtrType) ToProjectRepoIdPtrOutputWithContext(ctx context.Context) ProjectRepoIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectRepoIdPtrOutput)
}

// Selects a repo using a Google Cloud Platform project ID (e.g., winged-cargo-31) and a repo name within that project.
type ProjectRepoIdOutput struct{ *pulumi.OutputState }

func (ProjectRepoIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectRepoId)(nil)).Elem()
}

func (o ProjectRepoIdOutput) ToProjectRepoIdOutput() ProjectRepoIdOutput {
	return o
}

func (o ProjectRepoIdOutput) ToProjectRepoIdOutputWithContext(ctx context.Context) ProjectRepoIdOutput {
	return o
}

func (o ProjectRepoIdOutput) ToProjectRepoIdPtrOutput() ProjectRepoIdPtrOutput {
	return o.ToProjectRepoIdPtrOutputWithContext(context.Background())
}

func (o ProjectRepoIdOutput) ToProjectRepoIdPtrOutputWithContext(ctx context.Context) ProjectRepoIdPtrOutput {
	return o.ApplyT(func(v ProjectRepoId) *ProjectRepoId {
		return &v
	}).(ProjectRepoIdPtrOutput)
}

// The ID of the project.
func (o ProjectRepoIdOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectRepoId) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// The name of the repo. Leave empty for the default repo.
func (o ProjectRepoIdOutput) RepoName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectRepoId) *string { return v.RepoName }).(pulumi.StringPtrOutput)
}

type ProjectRepoIdPtrOutput struct{ *pulumi.OutputState }

func (ProjectRepoIdPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectRepoId)(nil)).Elem()
}

func (o ProjectRepoIdPtrOutput) ToProjectRepoIdPtrOutput() ProjectRepoIdPtrOutput {
	return o
}

func (o ProjectRepoIdPtrOutput) ToProjectRepoIdPtrOutputWithContext(ctx context.Context) ProjectRepoIdPtrOutput {
	return o
}

func (o ProjectRepoIdPtrOutput) Elem() ProjectRepoIdOutput {
	return o.ApplyT(func(v *ProjectRepoId) ProjectRepoId { return *v }).(ProjectRepoIdOutput)
}

// The ID of the project.
func (o ProjectRepoIdPtrOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectRepoId) *string {
		if v == nil {
			return nil
		}
		return v.ProjectId
	}).(pulumi.StringPtrOutput)
}

// The name of the repo. Leave empty for the default repo.
func (o ProjectRepoIdPtrOutput) RepoName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectRepoId) *string {
		if v == nil {
			return nil
		}
		return v.RepoName
	}).(pulumi.StringPtrOutput)
}

// Metadata for any related URL information.
type RelatedUrl struct {
	// Label to describe usage of the URL.
	Label *string `pulumi:"label"`
	// Specific URL associated with the resource.
	Url *string `pulumi:"url"`
}

// RelatedUrlInput is an input type that accepts RelatedUrlArgs and RelatedUrlOutput values.
// You can construct a concrete instance of `RelatedUrlInput` via:
//
//          RelatedUrlArgs{...}
type RelatedUrlInput interface {
	pulumi.Input

	ToRelatedUrlOutput() RelatedUrlOutput
	ToRelatedUrlOutputWithContext(context.Context) RelatedUrlOutput
}

// Metadata for any related URL information.
type RelatedUrlArgs struct {
	// Label to describe usage of the URL.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// Specific URL associated with the resource.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (RelatedUrlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RelatedUrl)(nil)).Elem()
}

func (i RelatedUrlArgs) ToRelatedUrlOutput() RelatedUrlOutput {
	return i.ToRelatedUrlOutputWithContext(context.Background())
}

func (i RelatedUrlArgs) ToRelatedUrlOutputWithContext(ctx context.Context) RelatedUrlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelatedUrlOutput)
}

// RelatedUrlArrayInput is an input type that accepts RelatedUrlArray and RelatedUrlArrayOutput values.
// You can construct a concrete instance of `RelatedUrlArrayInput` via:
//
//          RelatedUrlArray{ RelatedUrlArgs{...} }
type RelatedUrlArrayInput interface {
	pulumi.Input

	ToRelatedUrlArrayOutput() RelatedUrlArrayOutput
	ToRelatedUrlArrayOutputWithContext(context.Context) RelatedUrlArrayOutput
}

type RelatedUrlArray []RelatedUrlInput

func (RelatedUrlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RelatedUrl)(nil)).Elem()
}

func (i RelatedUrlArray) ToRelatedUrlArrayOutput() RelatedUrlArrayOutput {
	return i.ToRelatedUrlArrayOutputWithContext(context.Background())
}

func (i RelatedUrlArray) ToRelatedUrlArrayOutputWithContext(ctx context.Context) RelatedUrlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelatedUrlArrayOutput)
}

// Metadata for any related URL information.
type RelatedUrlOutput struct{ *pulumi.OutputState }

func (RelatedUrlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RelatedUrl)(nil)).Elem()
}

func (o RelatedUrlOutput) ToRelatedUrlOutput() RelatedUrlOutput {
	return o
}

func (o RelatedUrlOutput) ToRelatedUrlOutputWithContext(ctx context.Context) RelatedUrlOutput {
	return o
}

// Label to describe usage of the URL.
func (o RelatedUrlOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RelatedUrl) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// Specific URL associated with the resource.
func (o RelatedUrlOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RelatedUrl) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type RelatedUrlArrayOutput struct{ *pulumi.OutputState }

func (RelatedUrlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RelatedUrl)(nil)).Elem()
}

func (o RelatedUrlArrayOutput) ToRelatedUrlArrayOutput() RelatedUrlArrayOutput {
	return o
}

func (o RelatedUrlArrayOutput) ToRelatedUrlArrayOutputWithContext(ctx context.Context) RelatedUrlArrayOutput {
	return o
}

func (o RelatedUrlArrayOutput) Index(i pulumi.IntInput) RelatedUrlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RelatedUrl {
		return vs[0].([]RelatedUrl)[vs[1].(int)]
	}).(RelatedUrlOutput)
}

// A unique identifier for a Cloud Repo.
type RepoId struct {
	// A combination of a project ID and a repo name.
	ProjectRepoId *ProjectRepoId `pulumi:"projectRepoId"`
	// A server-assigned, globally unique identifier.
	Uid *string `pulumi:"uid"`
}

// RepoIdInput is an input type that accepts RepoIdArgs and RepoIdOutput values.
// You can construct a concrete instance of `RepoIdInput` via:
//
//          RepoIdArgs{...}
type RepoIdInput interface {
	pulumi.Input

	ToRepoIdOutput() RepoIdOutput
	ToRepoIdOutputWithContext(context.Context) RepoIdOutput
}

// A unique identifier for a Cloud Repo.
type RepoIdArgs struct {
	// A combination of a project ID and a repo name.
	ProjectRepoId ProjectRepoIdPtrInput `pulumi:"projectRepoId"`
	// A server-assigned, globally unique identifier.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (RepoIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepoId)(nil)).Elem()
}

func (i RepoIdArgs) ToRepoIdOutput() RepoIdOutput {
	return i.ToRepoIdOutputWithContext(context.Background())
}

func (i RepoIdArgs) ToRepoIdOutputWithContext(ctx context.Context) RepoIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepoIdOutput)
}

func (i RepoIdArgs) ToRepoIdPtrOutput() RepoIdPtrOutput {
	return i.ToRepoIdPtrOutputWithContext(context.Background())
}

func (i RepoIdArgs) ToRepoIdPtrOutputWithContext(ctx context.Context) RepoIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepoIdOutput).ToRepoIdPtrOutputWithContext(ctx)
}

// RepoIdPtrInput is an input type that accepts RepoIdArgs, RepoIdPtr and RepoIdPtrOutput values.
// You can construct a concrete instance of `RepoIdPtrInput` via:
//
//          RepoIdArgs{...}
//
//  or:
//
//          nil
type RepoIdPtrInput interface {
	pulumi.Input

	ToRepoIdPtrOutput() RepoIdPtrOutput
	ToRepoIdPtrOutputWithContext(context.Context) RepoIdPtrOutput
}

type repoIdPtrType RepoIdArgs

func RepoIdPtr(v *RepoIdArgs) RepoIdPtrInput {
	return (*repoIdPtrType)(v)
}

func (*repoIdPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepoId)(nil)).Elem()
}

func (i *repoIdPtrType) ToRepoIdPtrOutput() RepoIdPtrOutput {
	return i.ToRepoIdPtrOutputWithContext(context.Background())
}

func (i *repoIdPtrType) ToRepoIdPtrOutputWithContext(ctx context.Context) RepoIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepoIdPtrOutput)
}

// A unique identifier for a Cloud Repo.
type RepoIdOutput struct{ *pulumi.OutputState }

func (RepoIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepoId)(nil)).Elem()
}

func (o RepoIdOutput) ToRepoIdOutput() RepoIdOutput {
	return o
}

func (o RepoIdOutput) ToRepoIdOutputWithContext(ctx context.Context) RepoIdOutput {
	return o
}

func (o RepoIdOutput) ToRepoIdPtrOutput() RepoIdPtrOutput {
	return o.ToRepoIdPtrOutputWithContext(context.Background())
}

func (o RepoIdOutput) ToRepoIdPtrOutputWithContext(ctx context.Context) RepoIdPtrOutput {
	return o.ApplyT(func(v RepoId) *RepoId {
		return &v
	}).(RepoIdPtrOutput)
}

// A combination of a project ID and a repo name.
func (o RepoIdOutput) ProjectRepoId() ProjectRepoIdPtrOutput {
	return o.ApplyT(func(v RepoId) *ProjectRepoId { return v.ProjectRepoId }).(ProjectRepoIdPtrOutput)
}

// A server-assigned, globally unique identifier.
func (o RepoIdOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepoId) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type RepoIdPtrOutput struct{ *pulumi.OutputState }

func (RepoIdPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepoId)(nil)).Elem()
}

func (o RepoIdPtrOutput) ToRepoIdPtrOutput() RepoIdPtrOutput {
	return o
}

func (o RepoIdPtrOutput) ToRepoIdPtrOutputWithContext(ctx context.Context) RepoIdPtrOutput {
	return o
}

func (o RepoIdPtrOutput) Elem() RepoIdOutput {
	return o.ApplyT(func(v *RepoId) RepoId { return *v }).(RepoIdOutput)
}

// A combination of a project ID and a repo name.
func (o RepoIdPtrOutput) ProjectRepoId() ProjectRepoIdPtrOutput {
	return o.ApplyT(func(v *RepoId) *ProjectRepoId {
		if v == nil {
			return nil
		}
		return v.ProjectRepoId
	}).(ProjectRepoIdPtrOutput)
}

// A server-assigned, globally unique identifier.
func (o RepoIdPtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepoId) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

// An entity that can have metadata. For example, a Docker image.
type Resource struct {
	// Deprecated, do not use. Use uri instead. The hash of the resource content. For example, the Docker digest.
	ContentHash *Hash `pulumi:"contentHash"`
	// Deprecated, do not use. Use uri instead. The name of the resource. For example, the name of a Docker image - "Debian".
	Name *string `pulumi:"name"`
	// Required. The unique URI of the resource. For example, `https://gcr.io/project/image@sha256:foo` for a Docker image.
	Uri *string `pulumi:"uri"`
}

// ResourceInput is an input type that accepts ResourceArgs and ResourceOutput values.
// You can construct a concrete instance of `ResourceInput` via:
//
//          ResourceArgs{...}
type ResourceInput interface {
	pulumi.Input

	ToResourceOutput() ResourceOutput
	ToResourceOutputWithContext(context.Context) ResourceOutput
}

// An entity that can have metadata. For example, a Docker image.
type ResourceArgs struct {
	// Deprecated, do not use. Use uri instead. The hash of the resource content. For example, the Docker digest.
	ContentHash HashPtrInput `pulumi:"contentHash"`
	// Deprecated, do not use. Use uri instead. The name of the resource. For example, the name of a Docker image - "Debian".
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Required. The unique URI of the resource. For example, `https://gcr.io/project/image@sha256:foo` for a Docker image.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

func (ResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Resource)(nil)).Elem()
}

func (i ResourceArgs) ToResourceOutput() ResourceOutput {
	return i.ToResourceOutputWithContext(context.Background())
}

func (i ResourceArgs) ToResourceOutputWithContext(ctx context.Context) ResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceOutput)
}

func (i ResourceArgs) ToResourcePtrOutput() ResourcePtrOutput {
	return i.ToResourcePtrOutputWithContext(context.Background())
}

func (i ResourceArgs) ToResourcePtrOutputWithContext(ctx context.Context) ResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceOutput).ToResourcePtrOutputWithContext(ctx)
}

// ResourcePtrInput is an input type that accepts ResourceArgs, ResourcePtr and ResourcePtrOutput values.
// You can construct a concrete instance of `ResourcePtrInput` via:
//
//          ResourceArgs{...}
//
//  or:
//
//          nil
type ResourcePtrInput interface {
	pulumi.Input

	ToResourcePtrOutput() ResourcePtrOutput
	ToResourcePtrOutputWithContext(context.Context) ResourcePtrOutput
}

type resourcePtrType ResourceArgs

func ResourcePtr(v *ResourceArgs) ResourcePtrInput {
	return (*resourcePtrType)(v)
}

func (*resourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Resource)(nil)).Elem()
}

func (i *resourcePtrType) ToResourcePtrOutput() ResourcePtrOutput {
	return i.ToResourcePtrOutputWithContext(context.Background())
}

func (i *resourcePtrType) ToResourcePtrOutputWithContext(ctx context.Context) ResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePtrOutput)
}

// An entity that can have metadata. For example, a Docker image.
type ResourceOutput struct{ *pulumi.OutputState }

func (ResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Resource)(nil)).Elem()
}

func (o ResourceOutput) ToResourceOutput() ResourceOutput {
	return o
}

func (o ResourceOutput) ToResourceOutputWithContext(ctx context.Context) ResourceOutput {
	return o
}

func (o ResourceOutput) ToResourcePtrOutput() ResourcePtrOutput {
	return o.ToResourcePtrOutputWithContext(context.Background())
}

func (o ResourceOutput) ToResourcePtrOutputWithContext(ctx context.Context) ResourcePtrOutput {
	return o.ApplyT(func(v Resource) *Resource {
		return &v
	}).(ResourcePtrOutput)
}

// Deprecated, do not use. Use uri instead. The hash of the resource content. For example, the Docker digest.
func (o ResourceOutput) ContentHash() HashPtrOutput {
	return o.ApplyT(func(v Resource) *Hash { return v.ContentHash }).(HashPtrOutput)
}

// Deprecated, do not use. Use uri instead. The name of the resource. For example, the name of a Docker image - "Debian".
func (o ResourceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Resource) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Required. The unique URI of the resource. For example, `https://gcr.io/project/image@sha256:foo` for a Docker image.
func (o ResourceOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Resource) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type ResourcePtrOutput struct{ *pulumi.OutputState }

func (ResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Resource)(nil)).Elem()
}

func (o ResourcePtrOutput) ToResourcePtrOutput() ResourcePtrOutput {
	return o
}

func (o ResourcePtrOutput) ToResourcePtrOutputWithContext(ctx context.Context) ResourcePtrOutput {
	return o
}

func (o ResourcePtrOutput) Elem() ResourceOutput {
	return o.ApplyT(func(v *Resource) Resource { return *v }).(ResourceOutput)
}

// Deprecated, do not use. Use uri instead. The hash of the resource content. For example, the Docker digest.
func (o ResourcePtrOutput) ContentHash() HashPtrOutput {
	return o.ApplyT(func(v *Resource) *Hash {
		if v == nil {
			return nil
		}
		return v.ContentHash
	}).(HashPtrOutput)
}

// Deprecated, do not use. Use uri instead. The name of the resource. For example, the name of a Docker image - "Debian".
func (o ResourcePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Resource) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Required. The unique URI of the resource. For example, `https://gcr.io/project/image@sha256:foo` for a Docker image.
func (o ResourcePtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Resource) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

// Verifiers (e.g. Kritis implementations) MUST verify signatures with respect to the trust anchors defined in policy (e.g. a Kritis policy). Typically this means that the verifier has been configured with a map from `public_key_id` to public key material (and any required parameters, e.g. signing algorithm). In particular, verification implementations MUST NOT treat the signature `public_key_id` as anything more than a key lookup hint. The `public_key_id` DOES NOT validate or authenticate a public key; it only provides a mechanism for quickly selecting a public key ALREADY CONFIGURED on the verifier through a trusted channel. Verification implementations MUST reject signatures in any of the following circumstances: * The `public_key_id` is not recognized by the verifier. * The public key that `public_key_id` refers to does not verify the signature with respect to the payload. The `signature` contents SHOULD NOT be "attached" (where the payload is included with the serialized `signature` bytes). Verifiers MUST ignore any "attached" payload and only verify signatures with respect to explicitly provided payload (e.g. a `payload` field on the proto message that holds this Signature, or the canonical serialization of the proto message that holds this signature).
type Signature struct {
	// The identifier for the public key that verifies this signature. * The `public_key_id` is required. * The `public_key_id` SHOULD be an RFC3986 conformant URI. * When possible, the `public_key_id` SHOULD be an immutable reference, such as a cryptographic digest. Examples of valid `public_key_id`s: OpenPGP V4 public key fingerprint: * "openpgp4fpr:74FAF3B861BDA0870C7B6DEF607E48D2A663AEEA" See https://www.iana.org/assignments/uri-schemes/prov/openpgp4fpr for more details on this scheme. RFC6920 digest-named SubjectPublicKeyInfo (digest of the DER serialization): * "ni:///sha-256;cD9o9Cq6LG3jD0iKXqEi_vdjJGecm_iXkbqVoScViaU" * "nih:///sha-256;703f68f42aba2c6de30f488a5ea122fef76324679c9bf89791ba95a1271589a5"
	PublicKeyId *string `pulumi:"publicKeyId"`
	// The content of the signature, an opaque bytestring. The payload that this signature verifies MUST be unambiguously provided with the Signature during verification. A wrapper message might provide the payload explicitly. Alternatively, a message might have a canonical serialization that can always be unambiguously computed to derive the payload.
	Signature *string `pulumi:"signature"`
}

// SignatureInput is an input type that accepts SignatureArgs and SignatureOutput values.
// You can construct a concrete instance of `SignatureInput` via:
//
//          SignatureArgs{...}
type SignatureInput interface {
	pulumi.Input

	ToSignatureOutput() SignatureOutput
	ToSignatureOutputWithContext(context.Context) SignatureOutput
}

// Verifiers (e.g. Kritis implementations) MUST verify signatures with respect to the trust anchors defined in policy (e.g. a Kritis policy). Typically this means that the verifier has been configured with a map from `public_key_id` to public key material (and any required parameters, e.g. signing algorithm). In particular, verification implementations MUST NOT treat the signature `public_key_id` as anything more than a key lookup hint. The `public_key_id` DOES NOT validate or authenticate a public key; it only provides a mechanism for quickly selecting a public key ALREADY CONFIGURED on the verifier through a trusted channel. Verification implementations MUST reject signatures in any of the following circumstances: * The `public_key_id` is not recognized by the verifier. * The public key that `public_key_id` refers to does not verify the signature with respect to the payload. The `signature` contents SHOULD NOT be "attached" (where the payload is included with the serialized `signature` bytes). Verifiers MUST ignore any "attached" payload and only verify signatures with respect to explicitly provided payload (e.g. a `payload` field on the proto message that holds this Signature, or the canonical serialization of the proto message that holds this signature).
type SignatureArgs struct {
	// The identifier for the public key that verifies this signature. * The `public_key_id` is required. * The `public_key_id` SHOULD be an RFC3986 conformant URI. * When possible, the `public_key_id` SHOULD be an immutable reference, such as a cryptographic digest. Examples of valid `public_key_id`s: OpenPGP V4 public key fingerprint: * "openpgp4fpr:74FAF3B861BDA0870C7B6DEF607E48D2A663AEEA" See https://www.iana.org/assignments/uri-schemes/prov/openpgp4fpr for more details on this scheme. RFC6920 digest-named SubjectPublicKeyInfo (digest of the DER serialization): * "ni:///sha-256;cD9o9Cq6LG3jD0iKXqEi_vdjJGecm_iXkbqVoScViaU" * "nih:///sha-256;703f68f42aba2c6de30f488a5ea122fef76324679c9bf89791ba95a1271589a5"
	PublicKeyId pulumi.StringPtrInput `pulumi:"publicKeyId"`
	// The content of the signature, an opaque bytestring. The payload that this signature verifies MUST be unambiguously provided with the Signature during verification. A wrapper message might provide the payload explicitly. Alternatively, a message might have a canonical serialization that can always be unambiguously computed to derive the payload.
	Signature pulumi.StringPtrInput `pulumi:"signature"`
}

func (SignatureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Signature)(nil)).Elem()
}

func (i SignatureArgs) ToSignatureOutput() SignatureOutput {
	return i.ToSignatureOutputWithContext(context.Background())
}

func (i SignatureArgs) ToSignatureOutputWithContext(ctx context.Context) SignatureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignatureOutput)
}

// SignatureArrayInput is an input type that accepts SignatureArray and SignatureArrayOutput values.
// You can construct a concrete instance of `SignatureArrayInput` via:
//
//          SignatureArray{ SignatureArgs{...} }
type SignatureArrayInput interface {
	pulumi.Input

	ToSignatureArrayOutput() SignatureArrayOutput
	ToSignatureArrayOutputWithContext(context.Context) SignatureArrayOutput
}

type SignatureArray []SignatureInput

func (SignatureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Signature)(nil)).Elem()
}

func (i SignatureArray) ToSignatureArrayOutput() SignatureArrayOutput {
	return i.ToSignatureArrayOutputWithContext(context.Background())
}

func (i SignatureArray) ToSignatureArrayOutputWithContext(ctx context.Context) SignatureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignatureArrayOutput)
}

// Verifiers (e.g. Kritis implementations) MUST verify signatures with respect to the trust anchors defined in policy (e.g. a Kritis policy). Typically this means that the verifier has been configured with a map from `public_key_id` to public key material (and any required parameters, e.g. signing algorithm). In particular, verification implementations MUST NOT treat the signature `public_key_id` as anything more than a key lookup hint. The `public_key_id` DOES NOT validate or authenticate a public key; it only provides a mechanism for quickly selecting a public key ALREADY CONFIGURED on the verifier through a trusted channel. Verification implementations MUST reject signatures in any of the following circumstances: * The `public_key_id` is not recognized by the verifier. * The public key that `public_key_id` refers to does not verify the signature with respect to the payload. The `signature` contents SHOULD NOT be "attached" (where the payload is included with the serialized `signature` bytes). Verifiers MUST ignore any "attached" payload and only verify signatures with respect to explicitly provided payload (e.g. a `payload` field on the proto message that holds this Signature, or the canonical serialization of the proto message that holds this signature).
type SignatureOutput struct{ *pulumi.OutputState }

func (SignatureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Signature)(nil)).Elem()
}

func (o SignatureOutput) ToSignatureOutput() SignatureOutput {
	return o
}

func (o SignatureOutput) ToSignatureOutputWithContext(ctx context.Context) SignatureOutput {
	return o
}

// The identifier for the public key that verifies this signature. * The `public_key_id` is required. * The `public_key_id` SHOULD be an RFC3986 conformant URI. * When possible, the `public_key_id` SHOULD be an immutable reference, such as a cryptographic digest. Examples of valid `public_key_id`s: OpenPGP V4 public key fingerprint: * "openpgp4fpr:74FAF3B861BDA0870C7B6DEF607E48D2A663AEEA" See https://www.iana.org/assignments/uri-schemes/prov/openpgp4fpr for more details on this scheme. RFC6920 digest-named SubjectPublicKeyInfo (digest of the DER serialization): * "ni:///sha-256;cD9o9Cq6LG3jD0iKXqEi_vdjJGecm_iXkbqVoScViaU" * "nih:///sha-256;703f68f42aba2c6de30f488a5ea122fef76324679c9bf89791ba95a1271589a5"
func (o SignatureOutput) PublicKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Signature) *string { return v.PublicKeyId }).(pulumi.StringPtrOutput)
}

// The content of the signature, an opaque bytestring. The payload that this signature verifies MUST be unambiguously provided with the Signature during verification. A wrapper message might provide the payload explicitly. Alternatively, a message might have a canonical serialization that can always be unambiguously computed to derive the payload.
func (o SignatureOutput) Signature() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Signature) *string { return v.Signature }).(pulumi.StringPtrOutput)
}

type SignatureArrayOutput struct{ *pulumi.OutputState }

func (SignatureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Signature)(nil)).Elem()
}

func (o SignatureArrayOutput) ToSignatureArrayOutput() SignatureArrayOutput {
	return o
}

func (o SignatureArrayOutput) ToSignatureArrayOutputWithContext(ctx context.Context) SignatureArrayOutput {
	return o
}

func (o SignatureArrayOutput) Index(i pulumi.IntInput) SignatureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Signature {
		return vs[0].([]Signature)[vs[1].(int)]
	}).(SignatureOutput)
}

// This defines the format used to record keys used in the software supply chain. An in-toto link is attested using one or more keys defined in the in-toto layout. An example of this is: { "key_id": "776a00e29f3559e0141b3b096f696abc6cfb0c657ab40f441132b345b0...", "key_type": "rsa", "public_key_value": "-----BEGIN PUBLIC KEY-----\nMIIBojANBgkqhkiG9w0B...", "key_scheme": "rsassa-pss-sha256" } The format for in-toto's key definition can be found in section 4.2 of the in-toto specification.
type SigningKey struct {
	// key_id is an identifier for the signing key.
	KeyId *string `pulumi:"keyId"`
	// This field contains the corresponding signature scheme. Eg: "rsassa-pss-sha256".
	KeyScheme *string `pulumi:"keyScheme"`
	// This field identifies the specific signing method. Eg: "rsa", "ed25519", and "ecdsa".
	KeyType *string `pulumi:"keyType"`
	// This field contains the actual public key.
	PublicKeyValue *string `pulumi:"publicKeyValue"`
}

// SigningKeyInput is an input type that accepts SigningKeyArgs and SigningKeyOutput values.
// You can construct a concrete instance of `SigningKeyInput` via:
//
//          SigningKeyArgs{...}
type SigningKeyInput interface {
	pulumi.Input

	ToSigningKeyOutput() SigningKeyOutput
	ToSigningKeyOutputWithContext(context.Context) SigningKeyOutput
}

// This defines the format used to record keys used in the software supply chain. An in-toto link is attested using one or more keys defined in the in-toto layout. An example of this is: { "key_id": "776a00e29f3559e0141b3b096f696abc6cfb0c657ab40f441132b345b0...", "key_type": "rsa", "public_key_value": "-----BEGIN PUBLIC KEY-----\nMIIBojANBgkqhkiG9w0B...", "key_scheme": "rsassa-pss-sha256" } The format for in-toto's key definition can be found in section 4.2 of the in-toto specification.
type SigningKeyArgs struct {
	// key_id is an identifier for the signing key.
	KeyId pulumi.StringPtrInput `pulumi:"keyId"`
	// This field contains the corresponding signature scheme. Eg: "rsassa-pss-sha256".
	KeyScheme pulumi.StringPtrInput `pulumi:"keyScheme"`
	// This field identifies the specific signing method. Eg: "rsa", "ed25519", and "ecdsa".
	KeyType pulumi.StringPtrInput `pulumi:"keyType"`
	// This field contains the actual public key.
	PublicKeyValue pulumi.StringPtrInput `pulumi:"publicKeyValue"`
}

func (SigningKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SigningKey)(nil)).Elem()
}

func (i SigningKeyArgs) ToSigningKeyOutput() SigningKeyOutput {
	return i.ToSigningKeyOutputWithContext(context.Background())
}

func (i SigningKeyArgs) ToSigningKeyOutputWithContext(ctx context.Context) SigningKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SigningKeyOutput)
}

// SigningKeyArrayInput is an input type that accepts SigningKeyArray and SigningKeyArrayOutput values.
// You can construct a concrete instance of `SigningKeyArrayInput` via:
//
//          SigningKeyArray{ SigningKeyArgs{...} }
type SigningKeyArrayInput interface {
	pulumi.Input

	ToSigningKeyArrayOutput() SigningKeyArrayOutput
	ToSigningKeyArrayOutputWithContext(context.Context) SigningKeyArrayOutput
}

type SigningKeyArray []SigningKeyInput

func (SigningKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SigningKey)(nil)).Elem()
}

func (i SigningKeyArray) ToSigningKeyArrayOutput() SigningKeyArrayOutput {
	return i.ToSigningKeyArrayOutputWithContext(context.Background())
}

func (i SigningKeyArray) ToSigningKeyArrayOutputWithContext(ctx context.Context) SigningKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SigningKeyArrayOutput)
}

// This defines the format used to record keys used in the software supply chain. An in-toto link is attested using one or more keys defined in the in-toto layout. An example of this is: { "key_id": "776a00e29f3559e0141b3b096f696abc6cfb0c657ab40f441132b345b0...", "key_type": "rsa", "public_key_value": "-----BEGIN PUBLIC KEY-----\nMIIBojANBgkqhkiG9w0B...", "key_scheme": "rsassa-pss-sha256" } The format for in-toto's key definition can be found in section 4.2 of the in-toto specification.
type SigningKeyOutput struct{ *pulumi.OutputState }

func (SigningKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SigningKey)(nil)).Elem()
}

func (o SigningKeyOutput) ToSigningKeyOutput() SigningKeyOutput {
	return o
}

func (o SigningKeyOutput) ToSigningKeyOutputWithContext(ctx context.Context) SigningKeyOutput {
	return o
}

// key_id is an identifier for the signing key.
func (o SigningKeyOutput) KeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SigningKey) *string { return v.KeyId }).(pulumi.StringPtrOutput)
}

// This field contains the corresponding signature scheme. Eg: "rsassa-pss-sha256".
func (o SigningKeyOutput) KeyScheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SigningKey) *string { return v.KeyScheme }).(pulumi.StringPtrOutput)
}

// This field identifies the specific signing method. Eg: "rsa", "ed25519", and "ecdsa".
func (o SigningKeyOutput) KeyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SigningKey) *string { return v.KeyType }).(pulumi.StringPtrOutput)
}

// This field contains the actual public key.
func (o SigningKeyOutput) PublicKeyValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SigningKey) *string { return v.PublicKeyValue }).(pulumi.StringPtrOutput)
}

type SigningKeyArrayOutput struct{ *pulumi.OutputState }

func (SigningKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SigningKey)(nil)).Elem()
}

func (o SigningKeyArrayOutput) ToSigningKeyArrayOutput() SigningKeyArrayOutput {
	return o
}

func (o SigningKeyArrayOutput) ToSigningKeyArrayOutputWithContext(ctx context.Context) SigningKeyArrayOutput {
	return o
}

func (o SigningKeyArrayOutput) Index(i pulumi.IntInput) SigningKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SigningKey {
		return vs[0].([]SigningKey)[vs[1].(int)]
	}).(SigningKeyOutput)
}

// Source describes the location of the source used for the build.
type Source struct {
	// If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field.
	AdditionalContexts []SourceContext `pulumi:"additionalContexts"`
	// If provided, the input binary artifacts for the build came from this location.
	ArtifactStorageSourceUri *string `pulumi:"artifactStorageSourceUri"`
	// If provided, the source code used for the build came from this location.
	Context *SourceContext `pulumi:"context"`
	// Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file.
	FileHashes map[string]string `pulumi:"fileHashes"`
}

// SourceInput is an input type that accepts SourceArgs and SourceOutput values.
// You can construct a concrete instance of `SourceInput` via:
//
//          SourceArgs{...}
type SourceInput interface {
	pulumi.Input

	ToSourceOutput() SourceOutput
	ToSourceOutputWithContext(context.Context) SourceOutput
}

// Source describes the location of the source used for the build.
type SourceArgs struct {
	// If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field.
	AdditionalContexts SourceContextArrayInput `pulumi:"additionalContexts"`
	// If provided, the input binary artifacts for the build came from this location.
	ArtifactStorageSourceUri pulumi.StringPtrInput `pulumi:"artifactStorageSourceUri"`
	// If provided, the source code used for the build came from this location.
	Context SourceContextPtrInput `pulumi:"context"`
	// Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file.
	FileHashes pulumi.StringMapInput `pulumi:"fileHashes"`
}

func (SourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Source)(nil)).Elem()
}

func (i SourceArgs) ToSourceOutput() SourceOutput {
	return i.ToSourceOutputWithContext(context.Background())
}

func (i SourceArgs) ToSourceOutputWithContext(ctx context.Context) SourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceOutput)
}

func (i SourceArgs) ToSourcePtrOutput() SourcePtrOutput {
	return i.ToSourcePtrOutputWithContext(context.Background())
}

func (i SourceArgs) ToSourcePtrOutputWithContext(ctx context.Context) SourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceOutput).ToSourcePtrOutputWithContext(ctx)
}

// SourcePtrInput is an input type that accepts SourceArgs, SourcePtr and SourcePtrOutput values.
// You can construct a concrete instance of `SourcePtrInput` via:
//
//          SourceArgs{...}
//
//  or:
//
//          nil
type SourcePtrInput interface {
	pulumi.Input

	ToSourcePtrOutput() SourcePtrOutput
	ToSourcePtrOutputWithContext(context.Context) SourcePtrOutput
}

type sourcePtrType SourceArgs

func SourcePtr(v *SourceArgs) SourcePtrInput {
	return (*sourcePtrType)(v)
}

func (*sourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Source)(nil)).Elem()
}

func (i *sourcePtrType) ToSourcePtrOutput() SourcePtrOutput {
	return i.ToSourcePtrOutputWithContext(context.Background())
}

func (i *sourcePtrType) ToSourcePtrOutputWithContext(ctx context.Context) SourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourcePtrOutput)
}

// Source describes the location of the source used for the build.
type SourceOutput struct{ *pulumi.OutputState }

func (SourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Source)(nil)).Elem()
}

func (o SourceOutput) ToSourceOutput() SourceOutput {
	return o
}

func (o SourceOutput) ToSourceOutputWithContext(ctx context.Context) SourceOutput {
	return o
}

func (o SourceOutput) ToSourcePtrOutput() SourcePtrOutput {
	return o.ToSourcePtrOutputWithContext(context.Background())
}

func (o SourceOutput) ToSourcePtrOutputWithContext(ctx context.Context) SourcePtrOutput {
	return o.ApplyT(func(v Source) *Source {
		return &v
	}).(SourcePtrOutput)
}

// If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field.
func (o SourceOutput) AdditionalContexts() SourceContextArrayOutput {
	return o.ApplyT(func(v Source) []SourceContext { return v.AdditionalContexts }).(SourceContextArrayOutput)
}

// If provided, the input binary artifacts for the build came from this location.
func (o SourceOutput) ArtifactStorageSourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Source) *string { return v.ArtifactStorageSourceUri }).(pulumi.StringPtrOutput)
}

// If provided, the source code used for the build came from this location.
func (o SourceOutput) Context() SourceContextPtrOutput {
	return o.ApplyT(func(v Source) *SourceContext { return v.Context }).(SourceContextPtrOutput)
}

// Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file.
func (o SourceOutput) FileHashes() pulumi.StringMapOutput {
	return o.ApplyT(func(v Source) map[string]string { return v.FileHashes }).(pulumi.StringMapOutput)
}

type SourcePtrOutput struct{ *pulumi.OutputState }

func (SourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Source)(nil)).Elem()
}

func (o SourcePtrOutput) ToSourcePtrOutput() SourcePtrOutput {
	return o
}

func (o SourcePtrOutput) ToSourcePtrOutputWithContext(ctx context.Context) SourcePtrOutput {
	return o
}

func (o SourcePtrOutput) Elem() SourceOutput {
	return o.ApplyT(func(v *Source) Source { return *v }).(SourceOutput)
}

// If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field.
func (o SourcePtrOutput) AdditionalContexts() SourceContextArrayOutput {
	return o.ApplyT(func(v *Source) []SourceContext {
		if v == nil {
			return nil
		}
		return v.AdditionalContexts
	}).(SourceContextArrayOutput)
}

// If provided, the input binary artifacts for the build came from this location.
func (o SourcePtrOutput) ArtifactStorageSourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Source) *string {
		if v == nil {
			return nil
		}
		return v.ArtifactStorageSourceUri
	}).(pulumi.StringPtrOutput)
}

// If provided, the source code used for the build came from this location.
func (o SourcePtrOutput) Context() SourceContextPtrOutput {
	return o.ApplyT(func(v *Source) *SourceContext {
		if v == nil {
			return nil
		}
		return v.Context
	}).(SourceContextPtrOutput)
}

// Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file.
func (o SourcePtrOutput) FileHashes() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Source) map[string]string {
		if v == nil {
			return nil
		}
		return v.FileHashes
	}).(pulumi.StringMapOutput)
}

// A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory.
type SourceContext struct {
	// A SourceContext referring to a revision in a Google Cloud Source Repo.
	CloudRepo *CloudRepoSourceContext `pulumi:"cloudRepo"`
	// A SourceContext referring to a Gerrit project.
	Gerrit *GerritSourceContext `pulumi:"gerrit"`
	// A SourceContext referring to any third party Git repo (e.g., GitHub).
	Git *GitSourceContext `pulumi:"git"`
	// Labels with user defined metadata.
	Labels map[string]string `pulumi:"labels"`
}

// SourceContextInput is an input type that accepts SourceContextArgs and SourceContextOutput values.
// You can construct a concrete instance of `SourceContextInput` via:
//
//          SourceContextArgs{...}
type SourceContextInput interface {
	pulumi.Input

	ToSourceContextOutput() SourceContextOutput
	ToSourceContextOutputWithContext(context.Context) SourceContextOutput
}

// A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory.
type SourceContextArgs struct {
	// A SourceContext referring to a revision in a Google Cloud Source Repo.
	CloudRepo CloudRepoSourceContextPtrInput `pulumi:"cloudRepo"`
	// A SourceContext referring to a Gerrit project.
	Gerrit GerritSourceContextPtrInput `pulumi:"gerrit"`
	// A SourceContext referring to any third party Git repo (e.g., GitHub).
	Git GitSourceContextPtrInput `pulumi:"git"`
	// Labels with user defined metadata.
	Labels pulumi.StringMapInput `pulumi:"labels"`
}

func (SourceContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceContext)(nil)).Elem()
}

func (i SourceContextArgs) ToSourceContextOutput() SourceContextOutput {
	return i.ToSourceContextOutputWithContext(context.Background())
}

func (i SourceContextArgs) ToSourceContextOutputWithContext(ctx context.Context) SourceContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceContextOutput)
}

func (i SourceContextArgs) ToSourceContextPtrOutput() SourceContextPtrOutput {
	return i.ToSourceContextPtrOutputWithContext(context.Background())
}

func (i SourceContextArgs) ToSourceContextPtrOutputWithContext(ctx context.Context) SourceContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceContextOutput).ToSourceContextPtrOutputWithContext(ctx)
}

// SourceContextPtrInput is an input type that accepts SourceContextArgs, SourceContextPtr and SourceContextPtrOutput values.
// You can construct a concrete instance of `SourceContextPtrInput` via:
//
//          SourceContextArgs{...}
//
//  or:
//
//          nil
type SourceContextPtrInput interface {
	pulumi.Input

	ToSourceContextPtrOutput() SourceContextPtrOutput
	ToSourceContextPtrOutputWithContext(context.Context) SourceContextPtrOutput
}

type sourceContextPtrType SourceContextArgs

func SourceContextPtr(v *SourceContextArgs) SourceContextPtrInput {
	return (*sourceContextPtrType)(v)
}

func (*sourceContextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceContext)(nil)).Elem()
}

func (i *sourceContextPtrType) ToSourceContextPtrOutput() SourceContextPtrOutput {
	return i.ToSourceContextPtrOutputWithContext(context.Background())
}

func (i *sourceContextPtrType) ToSourceContextPtrOutputWithContext(ctx context.Context) SourceContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceContextPtrOutput)
}

// SourceContextArrayInput is an input type that accepts SourceContextArray and SourceContextArrayOutput values.
// You can construct a concrete instance of `SourceContextArrayInput` via:
//
//          SourceContextArray{ SourceContextArgs{...} }
type SourceContextArrayInput interface {
	pulumi.Input

	ToSourceContextArrayOutput() SourceContextArrayOutput
	ToSourceContextArrayOutputWithContext(context.Context) SourceContextArrayOutput
}

type SourceContextArray []SourceContextInput

func (SourceContextArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SourceContext)(nil)).Elem()
}

func (i SourceContextArray) ToSourceContextArrayOutput() SourceContextArrayOutput {
	return i.ToSourceContextArrayOutputWithContext(context.Background())
}

func (i SourceContextArray) ToSourceContextArrayOutputWithContext(ctx context.Context) SourceContextArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceContextArrayOutput)
}

// A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory.
type SourceContextOutput struct{ *pulumi.OutputState }

func (SourceContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceContext)(nil)).Elem()
}

func (o SourceContextOutput) ToSourceContextOutput() SourceContextOutput {
	return o
}

func (o SourceContextOutput) ToSourceContextOutputWithContext(ctx context.Context) SourceContextOutput {
	return o
}

func (o SourceContextOutput) ToSourceContextPtrOutput() SourceContextPtrOutput {
	return o.ToSourceContextPtrOutputWithContext(context.Background())
}

func (o SourceContextOutput) ToSourceContextPtrOutputWithContext(ctx context.Context) SourceContextPtrOutput {
	return o.ApplyT(func(v SourceContext) *SourceContext {
		return &v
	}).(SourceContextPtrOutput)
}

// A SourceContext referring to a revision in a Google Cloud Source Repo.
func (o SourceContextOutput) CloudRepo() CloudRepoSourceContextPtrOutput {
	return o.ApplyT(func(v SourceContext) *CloudRepoSourceContext { return v.CloudRepo }).(CloudRepoSourceContextPtrOutput)
}

// A SourceContext referring to a Gerrit project.
func (o SourceContextOutput) Gerrit() GerritSourceContextPtrOutput {
	return o.ApplyT(func(v SourceContext) *GerritSourceContext { return v.Gerrit }).(GerritSourceContextPtrOutput)
}

// A SourceContext referring to any third party Git repo (e.g., GitHub).
func (o SourceContextOutput) Git() GitSourceContextPtrOutput {
	return o.ApplyT(func(v SourceContext) *GitSourceContext { return v.Git }).(GitSourceContextPtrOutput)
}

// Labels with user defined metadata.
func (o SourceContextOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v SourceContext) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

type SourceContextPtrOutput struct{ *pulumi.OutputState }

func (SourceContextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceContext)(nil)).Elem()
}

func (o SourceContextPtrOutput) ToSourceContextPtrOutput() SourceContextPtrOutput {
	return o
}

func (o SourceContextPtrOutput) ToSourceContextPtrOutputWithContext(ctx context.Context) SourceContextPtrOutput {
	return o
}

func (o SourceContextPtrOutput) Elem() SourceContextOutput {
	return o.ApplyT(func(v *SourceContext) SourceContext { return *v }).(SourceContextOutput)
}

// A SourceContext referring to a revision in a Google Cloud Source Repo.
func (o SourceContextPtrOutput) CloudRepo() CloudRepoSourceContextPtrOutput {
	return o.ApplyT(func(v *SourceContext) *CloudRepoSourceContext {
		if v == nil {
			return nil
		}
		return v.CloudRepo
	}).(CloudRepoSourceContextPtrOutput)
}

// A SourceContext referring to a Gerrit project.
func (o SourceContextPtrOutput) Gerrit() GerritSourceContextPtrOutput {
	return o.ApplyT(func(v *SourceContext) *GerritSourceContext {
		if v == nil {
			return nil
		}
		return v.Gerrit
	}).(GerritSourceContextPtrOutput)
}

// A SourceContext referring to any third party Git repo (e.g., GitHub).
func (o SourceContextPtrOutput) Git() GitSourceContextPtrOutput {
	return o.ApplyT(func(v *SourceContext) *GitSourceContext {
		if v == nil {
			return nil
		}
		return v.Git
	}).(GitSourceContextPtrOutput)
}

// Labels with user defined metadata.
func (o SourceContextPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SourceContext) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

type SourceContextArrayOutput struct{ *pulumi.OutputState }

func (SourceContextArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SourceContext)(nil)).Elem()
}

func (o SourceContextArrayOutput) ToSourceContextArrayOutput() SourceContextArrayOutput {
	return o
}

func (o SourceContextArrayOutput) ToSourceContextArrayOutputWithContext(ctx context.Context) SourceContextArrayOutput {
	return o
}

func (o SourceContextArrayOutput) Index(i pulumi.IntInput) SourceContextOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SourceContext {
		return vs[0].([]SourceContext)[vs[1].(int)]
	}).(SourceContextOutput)
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type Status struct {
	// The status code, which should be an enum value of google.rpc.Code.
	Code *int `pulumi:"code"`
	// A list of messages that carry the error details. There is a common set of message types for APIs to use.
	Details []map[string]string `pulumi:"details"`
	// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
	Message *string `pulumi:"message"`
}

// StatusInput is an input type that accepts StatusArgs and StatusOutput values.
// You can construct a concrete instance of `StatusInput` via:
//
//          StatusArgs{...}
type StatusInput interface {
	pulumi.Input

	ToStatusOutput() StatusOutput
	ToStatusOutputWithContext(context.Context) StatusOutput
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type StatusArgs struct {
	// The status code, which should be an enum value of google.rpc.Code.
	Code pulumi.IntPtrInput `pulumi:"code"`
	// A list of messages that carry the error details. There is a common set of message types for APIs to use.
	Details pulumi.StringMapArrayInput `pulumi:"details"`
	// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
	Message pulumi.StringPtrInput `pulumi:"message"`
}

func (StatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Status)(nil)).Elem()
}

func (i StatusArgs) ToStatusOutput() StatusOutput {
	return i.ToStatusOutputWithContext(context.Background())
}

func (i StatusArgs) ToStatusOutputWithContext(ctx context.Context) StatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusOutput)
}

func (i StatusArgs) ToStatusPtrOutput() StatusPtrOutput {
	return i.ToStatusPtrOutputWithContext(context.Background())
}

func (i StatusArgs) ToStatusPtrOutputWithContext(ctx context.Context) StatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusOutput).ToStatusPtrOutputWithContext(ctx)
}

// StatusPtrInput is an input type that accepts StatusArgs, StatusPtr and StatusPtrOutput values.
// You can construct a concrete instance of `StatusPtrInput` via:
//
//          StatusArgs{...}
//
//  or:
//
//          nil
type StatusPtrInput interface {
	pulumi.Input

	ToStatusPtrOutput() StatusPtrOutput
	ToStatusPtrOutputWithContext(context.Context) StatusPtrOutput
}

type statusPtrType StatusArgs

func StatusPtr(v *StatusArgs) StatusPtrInput {
	return (*statusPtrType)(v)
}

func (*statusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Status)(nil)).Elem()
}

func (i *statusPtrType) ToStatusPtrOutput() StatusPtrOutput {
	return i.ToStatusPtrOutputWithContext(context.Background())
}

func (i *statusPtrType) ToStatusPtrOutputWithContext(ctx context.Context) StatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusPtrOutput)
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type StatusOutput struct{ *pulumi.OutputState }

func (StatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Status)(nil)).Elem()
}

func (o StatusOutput) ToStatusOutput() StatusOutput {
	return o
}

func (o StatusOutput) ToStatusOutputWithContext(ctx context.Context) StatusOutput {
	return o
}

func (o StatusOutput) ToStatusPtrOutput() StatusPtrOutput {
	return o.ToStatusPtrOutputWithContext(context.Background())
}

func (o StatusOutput) ToStatusPtrOutputWithContext(ctx context.Context) StatusPtrOutput {
	return o.ApplyT(func(v Status) *Status {
		return &v
	}).(StatusPtrOutput)
}

// The status code, which should be an enum value of google.rpc.Code.
func (o StatusOutput) Code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Status) *int { return v.Code }).(pulumi.IntPtrOutput)
}

// A list of messages that carry the error details. There is a common set of message types for APIs to use.
func (o StatusOutput) Details() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v Status) []map[string]string { return v.Details }).(pulumi.StringMapArrayOutput)
}

// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
func (o StatusOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Status) *string { return v.Message }).(pulumi.StringPtrOutput)
}

type StatusPtrOutput struct{ *pulumi.OutputState }

func (StatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Status)(nil)).Elem()
}

func (o StatusPtrOutput) ToStatusPtrOutput() StatusPtrOutput {
	return o
}

func (o StatusPtrOutput) ToStatusPtrOutputWithContext(ctx context.Context) StatusPtrOutput {
	return o
}

func (o StatusPtrOutput) Elem() StatusOutput {
	return o.ApplyT(func(v *Status) Status { return *v }).(StatusOutput)
}

// The status code, which should be an enum value of google.rpc.Code.
func (o StatusPtrOutput) Code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Status) *int {
		if v == nil {
			return nil
		}
		return v.Code
	}).(pulumi.IntPtrOutput)
}

// A list of messages that carry the error details. There is a common set of message types for APIs to use.
func (o StatusPtrOutput) Details() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v *Status) []map[string]string {
		if v == nil {
			return nil
		}
		return v.Details
	}).(pulumi.StringMapArrayOutput)
}

// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
func (o StatusPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Status) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// Version contains structured information about the version of a package.
type Version struct {
	// Used to correct mistakes in the version numbering scheme.
	Epoch *int `pulumi:"epoch"`
	// Whether this version is specifying part of an inclusive range. Grafeas does not have the capability to specify version ranges; instead we have fields that specify start version and end versions. At times this is insufficient - we also need to specify whether the version is included in the range or is excluded from the range. This boolean is expected to be set to true when the version is included in a range.
	Inclusive *bool `pulumi:"inclusive"`
	// Required. Distinguishes between sentinel MIN/MAX versions and normal versions.
	Kind *string `pulumi:"kind"`
	// Required only when version kind is NORMAL. The main part of the version name.
	Name *string `pulumi:"name"`
	// The iteration of the package build from the above version.
	Revision *string `pulumi:"revision"`
}

// VersionInput is an input type that accepts VersionArgs and VersionOutput values.
// You can construct a concrete instance of `VersionInput` via:
//
//          VersionArgs{...}
type VersionInput interface {
	pulumi.Input

	ToVersionOutput() VersionOutput
	ToVersionOutputWithContext(context.Context) VersionOutput
}

// Version contains structured information about the version of a package.
type VersionArgs struct {
	// Used to correct mistakes in the version numbering scheme.
	Epoch pulumi.IntPtrInput `pulumi:"epoch"`
	// Whether this version is specifying part of an inclusive range. Grafeas does not have the capability to specify version ranges; instead we have fields that specify start version and end versions. At times this is insufficient - we also need to specify whether the version is included in the range or is excluded from the range. This boolean is expected to be set to true when the version is included in a range.
	Inclusive pulumi.BoolPtrInput `pulumi:"inclusive"`
	// Required. Distinguishes between sentinel MIN/MAX versions and normal versions.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Required only when version kind is NORMAL. The main part of the version name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The iteration of the package build from the above version.
	Revision pulumi.StringPtrInput `pulumi:"revision"`
}

func (VersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Version)(nil)).Elem()
}

func (i VersionArgs) ToVersionOutput() VersionOutput {
	return i.ToVersionOutputWithContext(context.Background())
}

func (i VersionArgs) ToVersionOutputWithContext(ctx context.Context) VersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VersionOutput)
}

func (i VersionArgs) ToVersionPtrOutput() VersionPtrOutput {
	return i.ToVersionPtrOutputWithContext(context.Background())
}

func (i VersionArgs) ToVersionPtrOutputWithContext(ctx context.Context) VersionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VersionOutput).ToVersionPtrOutputWithContext(ctx)
}

// VersionPtrInput is an input type that accepts VersionArgs, VersionPtr and VersionPtrOutput values.
// You can construct a concrete instance of `VersionPtrInput` via:
//
//          VersionArgs{...}
//
//  or:
//
//          nil
type VersionPtrInput interface {
	pulumi.Input

	ToVersionPtrOutput() VersionPtrOutput
	ToVersionPtrOutputWithContext(context.Context) VersionPtrOutput
}

type versionPtrType VersionArgs

func VersionPtr(v *VersionArgs) VersionPtrInput {
	return (*versionPtrType)(v)
}

func (*versionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Version)(nil)).Elem()
}

func (i *versionPtrType) ToVersionPtrOutput() VersionPtrOutput {
	return i.ToVersionPtrOutputWithContext(context.Background())
}

func (i *versionPtrType) ToVersionPtrOutputWithContext(ctx context.Context) VersionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VersionPtrOutput)
}

// Version contains structured information about the version of a package.
type VersionOutput struct{ *pulumi.OutputState }

func (VersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Version)(nil)).Elem()
}

func (o VersionOutput) ToVersionOutput() VersionOutput {
	return o
}

func (o VersionOutput) ToVersionOutputWithContext(ctx context.Context) VersionOutput {
	return o
}

func (o VersionOutput) ToVersionPtrOutput() VersionPtrOutput {
	return o.ToVersionPtrOutputWithContext(context.Background())
}

func (o VersionOutput) ToVersionPtrOutputWithContext(ctx context.Context) VersionPtrOutput {
	return o.ApplyT(func(v Version) *Version {
		return &v
	}).(VersionPtrOutput)
}

// Used to correct mistakes in the version numbering scheme.
func (o VersionOutput) Epoch() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Version) *int { return v.Epoch }).(pulumi.IntPtrOutput)
}

// Whether this version is specifying part of an inclusive range. Grafeas does not have the capability to specify version ranges; instead we have fields that specify start version and end versions. At times this is insufficient - we also need to specify whether the version is included in the range or is excluded from the range. This boolean is expected to be set to true when the version is included in a range.
func (o VersionOutput) Inclusive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Version) *bool { return v.Inclusive }).(pulumi.BoolPtrOutput)
}

// Required. Distinguishes between sentinel MIN/MAX versions and normal versions.
func (o VersionOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Version) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Required only when version kind is NORMAL. The main part of the version name.
func (o VersionOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Version) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The iteration of the package build from the above version.
func (o VersionOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Version) *string { return v.Revision }).(pulumi.StringPtrOutput)
}

type VersionPtrOutput struct{ *pulumi.OutputState }

func (VersionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Version)(nil)).Elem()
}

func (o VersionPtrOutput) ToVersionPtrOutput() VersionPtrOutput {
	return o
}

func (o VersionPtrOutput) ToVersionPtrOutputWithContext(ctx context.Context) VersionPtrOutput {
	return o
}

func (o VersionPtrOutput) Elem() VersionOutput {
	return o.ApplyT(func(v *Version) Version { return *v }).(VersionOutput)
}

// Used to correct mistakes in the version numbering scheme.
func (o VersionPtrOutput) Epoch() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Version) *int {
		if v == nil {
			return nil
		}
		return v.Epoch
	}).(pulumi.IntPtrOutput)
}

// Whether this version is specifying part of an inclusive range. Grafeas does not have the capability to specify version ranges; instead we have fields that specify start version and end versions. At times this is insufficient - we also need to specify whether the version is included in the range or is excluded from the range. This boolean is expected to be set to true when the version is included in a range.
func (o VersionPtrOutput) Inclusive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Version) *bool {
		if v == nil {
			return nil
		}
		return v.Inclusive
	}).(pulumi.BoolPtrOutput)
}

// Required. Distinguishes between sentinel MIN/MAX versions and normal versions.
func (o VersionPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Version) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Required only when version kind is NORMAL. The main part of the version name.
func (o VersionPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Version) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The iteration of the package build from the above version.
func (o VersionPtrOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Version) *string {
		if v == nil {
			return nil
		}
		return v.Revision
	}).(pulumi.StringPtrOutput)
}

// Vulnerability provides metadata about a security vulnerability in a Note.
type Vulnerability struct {
	// The CVSS score for this vulnerability.
	CvssScore *float64 `pulumi:"cvssScore"`
	// The full description of the CVSSv3.
	CvssV3 *CVSSv3 `pulumi:"cvssV3"`
	// All information about the package to specifically identify this vulnerability. One entry per (version range and cpe_uri) the package vulnerability has manifested in.
	Details []Detail `pulumi:"details"`
	// Note provider assigned impact of the vulnerability.
	Severity *string `pulumi:"severity"`
	// The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.
	SourceUpdateTime *string `pulumi:"sourceUpdateTime"`
	// Windows details get their own format because the information format and model don't match a normal detail. Specifically Windows updates are done as patches, thus Windows vulnerabilities really are a missing package, rather than a package being at an incorrect version.
	WindowsDetails []WindowsDetail `pulumi:"windowsDetails"`
}

// VulnerabilityInput is an input type that accepts VulnerabilityArgs and VulnerabilityOutput values.
// You can construct a concrete instance of `VulnerabilityInput` via:
//
//          VulnerabilityArgs{...}
type VulnerabilityInput interface {
	pulumi.Input

	ToVulnerabilityOutput() VulnerabilityOutput
	ToVulnerabilityOutputWithContext(context.Context) VulnerabilityOutput
}

// Vulnerability provides metadata about a security vulnerability in a Note.
type VulnerabilityArgs struct {
	// The CVSS score for this vulnerability.
	CvssScore pulumi.Float64PtrInput `pulumi:"cvssScore"`
	// The full description of the CVSSv3.
	CvssV3 CVSSv3PtrInput `pulumi:"cvssV3"`
	// All information about the package to specifically identify this vulnerability. One entry per (version range and cpe_uri) the package vulnerability has manifested in.
	Details DetailArrayInput `pulumi:"details"`
	// Note provider assigned impact of the vulnerability.
	Severity pulumi.StringPtrInput `pulumi:"severity"`
	// The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.
	SourceUpdateTime pulumi.StringPtrInput `pulumi:"sourceUpdateTime"`
	// Windows details get their own format because the information format and model don't match a normal detail. Specifically Windows updates are done as patches, thus Windows vulnerabilities really are a missing package, rather than a package being at an incorrect version.
	WindowsDetails WindowsDetailArrayInput `pulumi:"windowsDetails"`
}

func (VulnerabilityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Vulnerability)(nil)).Elem()
}

func (i VulnerabilityArgs) ToVulnerabilityOutput() VulnerabilityOutput {
	return i.ToVulnerabilityOutputWithContext(context.Background())
}

func (i VulnerabilityArgs) ToVulnerabilityOutputWithContext(ctx context.Context) VulnerabilityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityOutput)
}

func (i VulnerabilityArgs) ToVulnerabilityPtrOutput() VulnerabilityPtrOutput {
	return i.ToVulnerabilityPtrOutputWithContext(context.Background())
}

func (i VulnerabilityArgs) ToVulnerabilityPtrOutputWithContext(ctx context.Context) VulnerabilityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityOutput).ToVulnerabilityPtrOutputWithContext(ctx)
}

// VulnerabilityPtrInput is an input type that accepts VulnerabilityArgs, VulnerabilityPtr and VulnerabilityPtrOutput values.
// You can construct a concrete instance of `VulnerabilityPtrInput` via:
//
//          VulnerabilityArgs{...}
//
//  or:
//
//          nil
type VulnerabilityPtrInput interface {
	pulumi.Input

	ToVulnerabilityPtrOutput() VulnerabilityPtrOutput
	ToVulnerabilityPtrOutputWithContext(context.Context) VulnerabilityPtrOutput
}

type vulnerabilityPtrType VulnerabilityArgs

func VulnerabilityPtr(v *VulnerabilityArgs) VulnerabilityPtrInput {
	return (*vulnerabilityPtrType)(v)
}

func (*vulnerabilityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Vulnerability)(nil)).Elem()
}

func (i *vulnerabilityPtrType) ToVulnerabilityPtrOutput() VulnerabilityPtrOutput {
	return i.ToVulnerabilityPtrOutputWithContext(context.Background())
}

func (i *vulnerabilityPtrType) ToVulnerabilityPtrOutputWithContext(ctx context.Context) VulnerabilityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityPtrOutput)
}

// Vulnerability provides metadata about a security vulnerability in a Note.
type VulnerabilityOutput struct{ *pulumi.OutputState }

func (VulnerabilityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Vulnerability)(nil)).Elem()
}

func (o VulnerabilityOutput) ToVulnerabilityOutput() VulnerabilityOutput {
	return o
}

func (o VulnerabilityOutput) ToVulnerabilityOutputWithContext(ctx context.Context) VulnerabilityOutput {
	return o
}

func (o VulnerabilityOutput) ToVulnerabilityPtrOutput() VulnerabilityPtrOutput {
	return o.ToVulnerabilityPtrOutputWithContext(context.Background())
}

func (o VulnerabilityOutput) ToVulnerabilityPtrOutputWithContext(ctx context.Context) VulnerabilityPtrOutput {
	return o.ApplyT(func(v Vulnerability) *Vulnerability {
		return &v
	}).(VulnerabilityPtrOutput)
}

// The CVSS score for this vulnerability.
func (o VulnerabilityOutput) CvssScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Vulnerability) *float64 { return v.CvssScore }).(pulumi.Float64PtrOutput)
}

// The full description of the CVSSv3.
func (o VulnerabilityOutput) CvssV3() CVSSv3PtrOutput {
	return o.ApplyT(func(v Vulnerability) *CVSSv3 { return v.CvssV3 }).(CVSSv3PtrOutput)
}

// All information about the package to specifically identify this vulnerability. One entry per (version range and cpe_uri) the package vulnerability has manifested in.
func (o VulnerabilityOutput) Details() DetailArrayOutput {
	return o.ApplyT(func(v Vulnerability) []Detail { return v.Details }).(DetailArrayOutput)
}

// Note provider assigned impact of the vulnerability.
func (o VulnerabilityOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Vulnerability) *string { return v.Severity }).(pulumi.StringPtrOutput)
}

// The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.
func (o VulnerabilityOutput) SourceUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Vulnerability) *string { return v.SourceUpdateTime }).(pulumi.StringPtrOutput)
}

// Windows details get their own format because the information format and model don't match a normal detail. Specifically Windows updates are done as patches, thus Windows vulnerabilities really are a missing package, rather than a package being at an incorrect version.
func (o VulnerabilityOutput) WindowsDetails() WindowsDetailArrayOutput {
	return o.ApplyT(func(v Vulnerability) []WindowsDetail { return v.WindowsDetails }).(WindowsDetailArrayOutput)
}

type VulnerabilityPtrOutput struct{ *pulumi.OutputState }

func (VulnerabilityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Vulnerability)(nil)).Elem()
}

func (o VulnerabilityPtrOutput) ToVulnerabilityPtrOutput() VulnerabilityPtrOutput {
	return o
}

func (o VulnerabilityPtrOutput) ToVulnerabilityPtrOutputWithContext(ctx context.Context) VulnerabilityPtrOutput {
	return o
}

func (o VulnerabilityPtrOutput) Elem() VulnerabilityOutput {
	return o.ApplyT(func(v *Vulnerability) Vulnerability { return *v }).(VulnerabilityOutput)
}

// The CVSS score for this vulnerability.
func (o VulnerabilityPtrOutput) CvssScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Vulnerability) *float64 {
		if v == nil {
			return nil
		}
		return v.CvssScore
	}).(pulumi.Float64PtrOutput)
}

// The full description of the CVSSv3.
func (o VulnerabilityPtrOutput) CvssV3() CVSSv3PtrOutput {
	return o.ApplyT(func(v *Vulnerability) *CVSSv3 {
		if v == nil {
			return nil
		}
		return v.CvssV3
	}).(CVSSv3PtrOutput)
}

// All information about the package to specifically identify this vulnerability. One entry per (version range and cpe_uri) the package vulnerability has manifested in.
func (o VulnerabilityPtrOutput) Details() DetailArrayOutput {
	return o.ApplyT(func(v *Vulnerability) []Detail {
		if v == nil {
			return nil
		}
		return v.Details
	}).(DetailArrayOutput)
}

// Note provider assigned impact of the vulnerability.
func (o VulnerabilityPtrOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vulnerability) *string {
		if v == nil {
			return nil
		}
		return v.Severity
	}).(pulumi.StringPtrOutput)
}

// The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.
func (o VulnerabilityPtrOutput) SourceUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vulnerability) *string {
		if v == nil {
			return nil
		}
		return v.SourceUpdateTime
	}).(pulumi.StringPtrOutput)
}

// Windows details get their own format because the information format and model don't match a normal detail. Specifically Windows updates are done as patches, thus Windows vulnerabilities really are a missing package, rather than a package being at an incorrect version.
func (o VulnerabilityPtrOutput) WindowsDetails() WindowsDetailArrayOutput {
	return o.ApplyT(func(v *Vulnerability) []WindowsDetail {
		if v == nil {
			return nil
		}
		return v.WindowsDetails
	}).(WindowsDetailArrayOutput)
}

// The location of the vulnerability.
type VulnerabilityLocation struct {
	// Required. The CPE URI in [cpe format](https://cpe.mitre.org/specification/) format. Examples include distro or storage location for vulnerable jar.
	CpeUri *string `pulumi:"cpeUri"`
	// Required. The package being described.
	Package *string `pulumi:"package"`
	// Required. The version of the package being described.
	Version *Version `pulumi:"version"`
}

// VulnerabilityLocationInput is an input type that accepts VulnerabilityLocationArgs and VulnerabilityLocationOutput values.
// You can construct a concrete instance of `VulnerabilityLocationInput` via:
//
//          VulnerabilityLocationArgs{...}
type VulnerabilityLocationInput interface {
	pulumi.Input

	ToVulnerabilityLocationOutput() VulnerabilityLocationOutput
	ToVulnerabilityLocationOutputWithContext(context.Context) VulnerabilityLocationOutput
}

// The location of the vulnerability.
type VulnerabilityLocationArgs struct {
	// Required. The CPE URI in [cpe format](https://cpe.mitre.org/specification/) format. Examples include distro or storage location for vulnerable jar.
	CpeUri pulumi.StringPtrInput `pulumi:"cpeUri"`
	// Required. The package being described.
	Package pulumi.StringPtrInput `pulumi:"package"`
	// Required. The version of the package being described.
	Version VersionPtrInput `pulumi:"version"`
}

func (VulnerabilityLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VulnerabilityLocation)(nil)).Elem()
}

func (i VulnerabilityLocationArgs) ToVulnerabilityLocationOutput() VulnerabilityLocationOutput {
	return i.ToVulnerabilityLocationOutputWithContext(context.Background())
}

func (i VulnerabilityLocationArgs) ToVulnerabilityLocationOutputWithContext(ctx context.Context) VulnerabilityLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityLocationOutput)
}

func (i VulnerabilityLocationArgs) ToVulnerabilityLocationPtrOutput() VulnerabilityLocationPtrOutput {
	return i.ToVulnerabilityLocationPtrOutputWithContext(context.Background())
}

func (i VulnerabilityLocationArgs) ToVulnerabilityLocationPtrOutputWithContext(ctx context.Context) VulnerabilityLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityLocationOutput).ToVulnerabilityLocationPtrOutputWithContext(ctx)
}

// VulnerabilityLocationPtrInput is an input type that accepts VulnerabilityLocationArgs, VulnerabilityLocationPtr and VulnerabilityLocationPtrOutput values.
// You can construct a concrete instance of `VulnerabilityLocationPtrInput` via:
//
//          VulnerabilityLocationArgs{...}
//
//  or:
//
//          nil
type VulnerabilityLocationPtrInput interface {
	pulumi.Input

	ToVulnerabilityLocationPtrOutput() VulnerabilityLocationPtrOutput
	ToVulnerabilityLocationPtrOutputWithContext(context.Context) VulnerabilityLocationPtrOutput
}

type vulnerabilityLocationPtrType VulnerabilityLocationArgs

func VulnerabilityLocationPtr(v *VulnerabilityLocationArgs) VulnerabilityLocationPtrInput {
	return (*vulnerabilityLocationPtrType)(v)
}

func (*vulnerabilityLocationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VulnerabilityLocation)(nil)).Elem()
}

func (i *vulnerabilityLocationPtrType) ToVulnerabilityLocationPtrOutput() VulnerabilityLocationPtrOutput {
	return i.ToVulnerabilityLocationPtrOutputWithContext(context.Background())
}

func (i *vulnerabilityLocationPtrType) ToVulnerabilityLocationPtrOutputWithContext(ctx context.Context) VulnerabilityLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityLocationPtrOutput)
}

// The location of the vulnerability.
type VulnerabilityLocationOutput struct{ *pulumi.OutputState }

func (VulnerabilityLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VulnerabilityLocation)(nil)).Elem()
}

func (o VulnerabilityLocationOutput) ToVulnerabilityLocationOutput() VulnerabilityLocationOutput {
	return o
}

func (o VulnerabilityLocationOutput) ToVulnerabilityLocationOutputWithContext(ctx context.Context) VulnerabilityLocationOutput {
	return o
}

func (o VulnerabilityLocationOutput) ToVulnerabilityLocationPtrOutput() VulnerabilityLocationPtrOutput {
	return o.ToVulnerabilityLocationPtrOutputWithContext(context.Background())
}

func (o VulnerabilityLocationOutput) ToVulnerabilityLocationPtrOutputWithContext(ctx context.Context) VulnerabilityLocationPtrOutput {
	return o.ApplyT(func(v VulnerabilityLocation) *VulnerabilityLocation {
		return &v
	}).(VulnerabilityLocationPtrOutput)
}

// Required. The CPE URI in [cpe format](https://cpe.mitre.org/specification/) format. Examples include distro or storage location for vulnerable jar.
func (o VulnerabilityLocationOutput) CpeUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VulnerabilityLocation) *string { return v.CpeUri }).(pulumi.StringPtrOutput)
}

// Required. The package being described.
func (o VulnerabilityLocationOutput) Package() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VulnerabilityLocation) *string { return v.Package }).(pulumi.StringPtrOutput)
}

// Required. The version of the package being described.
func (o VulnerabilityLocationOutput) Version() VersionPtrOutput {
	return o.ApplyT(func(v VulnerabilityLocation) *Version { return v.Version }).(VersionPtrOutput)
}

type VulnerabilityLocationPtrOutput struct{ *pulumi.OutputState }

func (VulnerabilityLocationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VulnerabilityLocation)(nil)).Elem()
}

func (o VulnerabilityLocationPtrOutput) ToVulnerabilityLocationPtrOutput() VulnerabilityLocationPtrOutput {
	return o
}

func (o VulnerabilityLocationPtrOutput) ToVulnerabilityLocationPtrOutputWithContext(ctx context.Context) VulnerabilityLocationPtrOutput {
	return o
}

func (o VulnerabilityLocationPtrOutput) Elem() VulnerabilityLocationOutput {
	return o.ApplyT(func(v *VulnerabilityLocation) VulnerabilityLocation { return *v }).(VulnerabilityLocationOutput)
}

// Required. The CPE URI in [cpe format](https://cpe.mitre.org/specification/) format. Examples include distro or storage location for vulnerable jar.
func (o VulnerabilityLocationPtrOutput) CpeUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VulnerabilityLocation) *string {
		if v == nil {
			return nil
		}
		return v.CpeUri
	}).(pulumi.StringPtrOutput)
}

// Required. The package being described.
func (o VulnerabilityLocationPtrOutput) Package() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VulnerabilityLocation) *string {
		if v == nil {
			return nil
		}
		return v.Package
	}).(pulumi.StringPtrOutput)
}

// Required. The version of the package being described.
func (o VulnerabilityLocationPtrOutput) Version() VersionPtrOutput {
	return o.ApplyT(func(v *VulnerabilityLocation) *Version {
		if v == nil {
			return nil
		}
		return v.Version
	}).(VersionPtrOutput)
}

type WindowsDetail struct {
	// Required. The CPE URI in [cpe format](https://cpe.mitre.org/specification/) in which the vulnerability manifests. Examples include distro or storage location for vulnerable jar.
	CpeUri *string `pulumi:"cpeUri"`
	// The description of the vulnerability.
	Description *string `pulumi:"description"`
	// Required. The names of the KBs which have hotfixes to mitigate this vulnerability. Note that there may be multiple hotfixes (and thus multiple KBs) that mitigate a given vulnerability. Currently any listed kb's presence is considered a fix.
	FixingKbs []KnowledgeBase `pulumi:"fixingKbs"`
	// Required. The name of the vulnerability.
	Name *string `pulumi:"name"`
}

// WindowsDetailInput is an input type that accepts WindowsDetailArgs and WindowsDetailOutput values.
// You can construct a concrete instance of `WindowsDetailInput` via:
//
//          WindowsDetailArgs{...}
type WindowsDetailInput interface {
	pulumi.Input

	ToWindowsDetailOutput() WindowsDetailOutput
	ToWindowsDetailOutputWithContext(context.Context) WindowsDetailOutput
}

type WindowsDetailArgs struct {
	// Required. The CPE URI in [cpe format](https://cpe.mitre.org/specification/) in which the vulnerability manifests. Examples include distro or storage location for vulnerable jar.
	CpeUri pulumi.StringPtrInput `pulumi:"cpeUri"`
	// The description of the vulnerability.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Required. The names of the KBs which have hotfixes to mitigate this vulnerability. Note that there may be multiple hotfixes (and thus multiple KBs) that mitigate a given vulnerability. Currently any listed kb's presence is considered a fix.
	FixingKbs KnowledgeBaseArrayInput `pulumi:"fixingKbs"`
	// Required. The name of the vulnerability.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (WindowsDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsDetail)(nil)).Elem()
}

func (i WindowsDetailArgs) ToWindowsDetailOutput() WindowsDetailOutput {
	return i.ToWindowsDetailOutputWithContext(context.Background())
}

func (i WindowsDetailArgs) ToWindowsDetailOutputWithContext(ctx context.Context) WindowsDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsDetailOutput)
}

// WindowsDetailArrayInput is an input type that accepts WindowsDetailArray and WindowsDetailArrayOutput values.
// You can construct a concrete instance of `WindowsDetailArrayInput` via:
//
//          WindowsDetailArray{ WindowsDetailArgs{...} }
type WindowsDetailArrayInput interface {
	pulumi.Input

	ToWindowsDetailArrayOutput() WindowsDetailArrayOutput
	ToWindowsDetailArrayOutputWithContext(context.Context) WindowsDetailArrayOutput
}

type WindowsDetailArray []WindowsDetailInput

func (WindowsDetailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WindowsDetail)(nil)).Elem()
}

func (i WindowsDetailArray) ToWindowsDetailArrayOutput() WindowsDetailArrayOutput {
	return i.ToWindowsDetailArrayOutputWithContext(context.Background())
}

func (i WindowsDetailArray) ToWindowsDetailArrayOutputWithContext(ctx context.Context) WindowsDetailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsDetailArrayOutput)
}

type WindowsDetailOutput struct{ *pulumi.OutputState }

func (WindowsDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsDetail)(nil)).Elem()
}

func (o WindowsDetailOutput) ToWindowsDetailOutput() WindowsDetailOutput {
	return o
}

func (o WindowsDetailOutput) ToWindowsDetailOutputWithContext(ctx context.Context) WindowsDetailOutput {
	return o
}

// Required. The CPE URI in [cpe format](https://cpe.mitre.org/specification/) in which the vulnerability manifests. Examples include distro or storage location for vulnerable jar.
func (o WindowsDetailOutput) CpeUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WindowsDetail) *string { return v.CpeUri }).(pulumi.StringPtrOutput)
}

// The description of the vulnerability.
func (o WindowsDetailOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WindowsDetail) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Required. The names of the KBs which have hotfixes to mitigate this vulnerability. Note that there may be multiple hotfixes (and thus multiple KBs) that mitigate a given vulnerability. Currently any listed kb's presence is considered a fix.
func (o WindowsDetailOutput) FixingKbs() KnowledgeBaseArrayOutput {
	return o.ApplyT(func(v WindowsDetail) []KnowledgeBase { return v.FixingKbs }).(KnowledgeBaseArrayOutput)
}

// Required. The name of the vulnerability.
func (o WindowsDetailOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WindowsDetail) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type WindowsDetailArrayOutput struct{ *pulumi.OutputState }

func (WindowsDetailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WindowsDetail)(nil)).Elem()
}

func (o WindowsDetailArrayOutput) ToWindowsDetailArrayOutput() WindowsDetailArrayOutput {
	return o
}

func (o WindowsDetailArrayOutput) ToWindowsDetailArrayOutputWithContext(ctx context.Context) WindowsDetailArrayOutput {
	return o
}

func (o WindowsDetailArrayOutput) Index(i pulumi.IntInput) WindowsDetailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WindowsDetail {
		return vs[0].([]WindowsDetail)[vs[1].(int)]
	}).(WindowsDetailOutput)
}

func init() {
	pulumi.RegisterOutputType(AliasContextOutput{})
	pulumi.RegisterOutputType(AliasContextPtrOutput{})
	pulumi.RegisterOutputType(ArtifactOutput{})
	pulumi.RegisterOutputType(ArtifactArrayOutput{})
	pulumi.RegisterOutputType(ArtifactHashesOutput{})
	pulumi.RegisterOutputType(ArtifactHashesPtrOutput{})
	pulumi.RegisterOutputType(ArtifactRuleOutput{})
	pulumi.RegisterOutputType(ArtifactRuleArrayOutput{})
	pulumi.RegisterOutputType(AttestationOutput{})
	pulumi.RegisterOutputType(AttestationPtrOutput{})
	pulumi.RegisterOutputType(AuthorityOutput{})
	pulumi.RegisterOutputType(AuthorityPtrOutput{})
	pulumi.RegisterOutputType(BasisOutput{})
	pulumi.RegisterOutputType(BasisPtrOutput{})
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(BuildOutput{})
	pulumi.RegisterOutputType(BuildPtrOutput{})
	pulumi.RegisterOutputType(BuildProvenanceOutput{})
	pulumi.RegisterOutputType(BuildProvenancePtrOutput{})
	pulumi.RegisterOutputType(BuildSignatureOutput{})
	pulumi.RegisterOutputType(BuildSignaturePtrOutput{})
	pulumi.RegisterOutputType(ByProductsOutput{})
	pulumi.RegisterOutputType(ByProductsPtrOutput{})
	pulumi.RegisterOutputType(CVSSv3Output{})
	pulumi.RegisterOutputType(CVSSv3PtrOutput{})
	pulumi.RegisterOutputType(CloudRepoSourceContextOutput{})
	pulumi.RegisterOutputType(CloudRepoSourceContextPtrOutput{})
	pulumi.RegisterOutputType(CommandOutput{})
	pulumi.RegisterOutputType(CommandArrayOutput{})
	pulumi.RegisterOutputType(DeployableOutput{})
	pulumi.RegisterOutputType(DeployablePtrOutput{})
	pulumi.RegisterOutputType(DeploymentOutput{})
	pulumi.RegisterOutputType(DeploymentPtrOutput{})
	pulumi.RegisterOutputType(DerivedOutput{})
	pulumi.RegisterOutputType(DerivedPtrOutput{})
	pulumi.RegisterOutputType(DetailOutput{})
	pulumi.RegisterOutputType(DetailArrayOutput{})
	pulumi.RegisterOutputType(DetailsOutput{})
	pulumi.RegisterOutputType(DetailsPtrOutput{})
	pulumi.RegisterOutputType(DiscoveredOutput{})
	pulumi.RegisterOutputType(DiscoveredPtrOutput{})
	pulumi.RegisterOutputType(DiscoveryOutput{})
	pulumi.RegisterOutputType(DiscoveryPtrOutput{})
	pulumi.RegisterOutputType(DistributionOutput{})
	pulumi.RegisterOutputType(DistributionArrayOutput{})
	pulumi.RegisterOutputType(EnvironmentOutput{})
	pulumi.RegisterOutputType(EnvironmentPtrOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(FingerprintOutput{})
	pulumi.RegisterOutputType(FingerprintPtrOutput{})
	pulumi.RegisterOutputType(GenericSignedAttestationOutput{})
	pulumi.RegisterOutputType(GenericSignedAttestationPtrOutput{})
	pulumi.RegisterOutputType(GerritSourceContextOutput{})
	pulumi.RegisterOutputType(GerritSourceContextPtrOutput{})
	pulumi.RegisterOutputType(GitSourceContextOutput{})
	pulumi.RegisterOutputType(GitSourceContextPtrOutput{})
	pulumi.RegisterOutputType(GrafeasV1beta1BuildDetailsOutput{})
	pulumi.RegisterOutputType(GrafeasV1beta1BuildDetailsPtrOutput{})
	pulumi.RegisterOutputType(GrafeasV1beta1DeploymentDetailsOutput{})
	pulumi.RegisterOutputType(GrafeasV1beta1DeploymentDetailsPtrOutput{})
	pulumi.RegisterOutputType(GrafeasV1beta1DiscoveryDetailsOutput{})
	pulumi.RegisterOutputType(GrafeasV1beta1DiscoveryDetailsPtrOutput{})
	pulumi.RegisterOutputType(GrafeasV1beta1ImageDetailsOutput{})
	pulumi.RegisterOutputType(GrafeasV1beta1ImageDetailsPtrOutput{})
	pulumi.RegisterOutputType(GrafeasV1beta1IntotoArtifactOutput{})
	pulumi.RegisterOutputType(GrafeasV1beta1IntotoArtifactArrayOutput{})
	pulumi.RegisterOutputType(GrafeasV1beta1IntotoDetailsOutput{})
	pulumi.RegisterOutputType(GrafeasV1beta1IntotoDetailsPtrOutput{})
	pulumi.RegisterOutputType(GrafeasV1beta1IntotoSignatureOutput{})
	pulumi.RegisterOutputType(GrafeasV1beta1IntotoSignatureArrayOutput{})
	pulumi.RegisterOutputType(GrafeasV1beta1PackageDetailsOutput{})
	pulumi.RegisterOutputType(GrafeasV1beta1PackageDetailsPtrOutput{})
	pulumi.RegisterOutputType(GrafeasV1beta1VulnerabilityDetailsOutput{})
	pulumi.RegisterOutputType(GrafeasV1beta1VulnerabilityDetailsPtrOutput{})
	pulumi.RegisterOutputType(HashOutput{})
	pulumi.RegisterOutputType(HashPtrOutput{})
	pulumi.RegisterOutputType(HintOutput{})
	pulumi.RegisterOutputType(HintPtrOutput{})
	pulumi.RegisterOutputType(InTotoOutput{})
	pulumi.RegisterOutputType(InTotoPtrOutput{})
	pulumi.RegisterOutputType(InstallationOutput{})
	pulumi.RegisterOutputType(InstallationPtrOutput{})
	pulumi.RegisterOutputType(KnowledgeBaseOutput{})
	pulumi.RegisterOutputType(KnowledgeBaseArrayOutput{})
	pulumi.RegisterOutputType(LayerOutput{})
	pulumi.RegisterOutputType(LayerArrayOutput{})
	pulumi.RegisterOutputType(LinkOutput{})
	pulumi.RegisterOutputType(LinkPtrOutput{})
	pulumi.RegisterOutputType(LocationOutput{})
	pulumi.RegisterOutputType(LocationArrayOutput{})
	pulumi.RegisterOutputType(PackageOutput{})
	pulumi.RegisterOutputType(PackagePtrOutput{})
	pulumi.RegisterOutputType(PackageIssueOutput{})
	pulumi.RegisterOutputType(PackageIssueArrayOutput{})
	pulumi.RegisterOutputType(PgpSignedAttestationOutput{})
	pulumi.RegisterOutputType(PgpSignedAttestationPtrOutput{})
	pulumi.RegisterOutputType(PolicyOutput{})
	pulumi.RegisterOutputType(PolicyPtrOutput{})
	pulumi.RegisterOutputType(ProjectRepoIdOutput{})
	pulumi.RegisterOutputType(ProjectRepoIdPtrOutput{})
	pulumi.RegisterOutputType(RelatedUrlOutput{})
	pulumi.RegisterOutputType(RelatedUrlArrayOutput{})
	pulumi.RegisterOutputType(RepoIdOutput{})
	pulumi.RegisterOutputType(RepoIdPtrOutput{})
	pulumi.RegisterOutputType(ResourceOutput{})
	pulumi.RegisterOutputType(ResourcePtrOutput{})
	pulumi.RegisterOutputType(SignatureOutput{})
	pulumi.RegisterOutputType(SignatureArrayOutput{})
	pulumi.RegisterOutputType(SigningKeyOutput{})
	pulumi.RegisterOutputType(SigningKeyArrayOutput{})
	pulumi.RegisterOutputType(SourceOutput{})
	pulumi.RegisterOutputType(SourcePtrOutput{})
	pulumi.RegisterOutputType(SourceContextOutput{})
	pulumi.RegisterOutputType(SourceContextPtrOutput{})
	pulumi.RegisterOutputType(SourceContextArrayOutput{})
	pulumi.RegisterOutputType(StatusOutput{})
	pulumi.RegisterOutputType(StatusPtrOutput{})
	pulumi.RegisterOutputType(VersionOutput{})
	pulumi.RegisterOutputType(VersionPtrOutput{})
	pulumi.RegisterOutputType(VulnerabilityOutput{})
	pulumi.RegisterOutputType(VulnerabilityPtrOutput{})
	pulumi.RegisterOutputType(VulnerabilityLocationOutput{})
	pulumi.RegisterOutputType(VulnerabilityLocationPtrOutput{})
	pulumi.RegisterOutputType(WindowsDetailOutput{})
	pulumi.RegisterOutputType(WindowsDetailArrayOutput{})
}
