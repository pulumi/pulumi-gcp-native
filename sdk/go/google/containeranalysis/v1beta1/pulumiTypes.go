// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// An alias to a repo revision.
type AliasContext struct {
	// The alias kind.
	Kind *AliasContextKind `pulumi:"kind"`
	// The alias name.
	Name *string `pulumi:"name"`
}

// AliasContextInput is an input type that accepts AliasContextArgs and AliasContextOutput values.
// You can construct a concrete instance of `AliasContextInput` via:
//
//	AliasContextArgs{...}
type AliasContextInput interface {
	pulumi.Input

	ToAliasContextOutput() AliasContextOutput
	ToAliasContextOutputWithContext(context.Context) AliasContextOutput
}

// An alias to a repo revision.
type AliasContextArgs struct {
	// The alias kind.
	Kind AliasContextKindPtrInput `pulumi:"kind"`
	// The alias name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (AliasContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AliasContext)(nil)).Elem()
}

func (i AliasContextArgs) ToAliasContextOutput() AliasContextOutput {
	return i.ToAliasContextOutputWithContext(context.Background())
}

func (i AliasContextArgs) ToAliasContextOutputWithContext(ctx context.Context) AliasContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AliasContextOutput)
}

func (i AliasContextArgs) ToAliasContextPtrOutput() AliasContextPtrOutput {
	return i.ToAliasContextPtrOutputWithContext(context.Background())
}

func (i AliasContextArgs) ToAliasContextPtrOutputWithContext(ctx context.Context) AliasContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AliasContextOutput).ToAliasContextPtrOutputWithContext(ctx)
}

// AliasContextPtrInput is an input type that accepts AliasContextArgs, AliasContextPtr and AliasContextPtrOutput values.
// You can construct a concrete instance of `AliasContextPtrInput` via:
//
//	        AliasContextArgs{...}
//
//	or:
//
//	        nil
type AliasContextPtrInput interface {
	pulumi.Input

	ToAliasContextPtrOutput() AliasContextPtrOutput
	ToAliasContextPtrOutputWithContext(context.Context) AliasContextPtrOutput
}

type aliasContextPtrType AliasContextArgs

func AliasContextPtr(v *AliasContextArgs) AliasContextPtrInput {
	return (*aliasContextPtrType)(v)
}

func (*aliasContextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AliasContext)(nil)).Elem()
}

func (i *aliasContextPtrType) ToAliasContextPtrOutput() AliasContextPtrOutput {
	return i.ToAliasContextPtrOutputWithContext(context.Background())
}

func (i *aliasContextPtrType) ToAliasContextPtrOutputWithContext(ctx context.Context) AliasContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AliasContextPtrOutput)
}

// An alias to a repo revision.
type AliasContextOutput struct{ *pulumi.OutputState }

func (AliasContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AliasContext)(nil)).Elem()
}

func (o AliasContextOutput) ToAliasContextOutput() AliasContextOutput {
	return o
}

func (o AliasContextOutput) ToAliasContextOutputWithContext(ctx context.Context) AliasContextOutput {
	return o
}

func (o AliasContextOutput) ToAliasContextPtrOutput() AliasContextPtrOutput {
	return o.ToAliasContextPtrOutputWithContext(context.Background())
}

func (o AliasContextOutput) ToAliasContextPtrOutputWithContext(ctx context.Context) AliasContextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AliasContext) *AliasContext {
		return &v
	}).(AliasContextPtrOutput)
}

// The alias kind.
func (o AliasContextOutput) Kind() AliasContextKindPtrOutput {
	return o.ApplyT(func(v AliasContext) *AliasContextKind { return v.Kind }).(AliasContextKindPtrOutput)
}

// The alias name.
func (o AliasContextOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AliasContext) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type AliasContextPtrOutput struct{ *pulumi.OutputState }

func (AliasContextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AliasContext)(nil)).Elem()
}

func (o AliasContextPtrOutput) ToAliasContextPtrOutput() AliasContextPtrOutput {
	return o
}

func (o AliasContextPtrOutput) ToAliasContextPtrOutputWithContext(ctx context.Context) AliasContextPtrOutput {
	return o
}

func (o AliasContextPtrOutput) Elem() AliasContextOutput {
	return o.ApplyT(func(v *AliasContext) AliasContext {
		if v != nil {
			return *v
		}
		var ret AliasContext
		return ret
	}).(AliasContextOutput)
}

// The alias kind.
func (o AliasContextPtrOutput) Kind() AliasContextKindPtrOutput {
	return o.ApplyT(func(v *AliasContext) *AliasContextKind {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(AliasContextKindPtrOutput)
}

// The alias name.
func (o AliasContextPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AliasContext) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// An alias to a repo revision.
type AliasContextResponse struct {
	// The alias kind.
	Kind string `pulumi:"kind"`
	// The alias name.
	Name string `pulumi:"name"`
}

// An alias to a repo revision.
type AliasContextResponseOutput struct{ *pulumi.OutputState }

func (AliasContextResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AliasContextResponse)(nil)).Elem()
}

func (o AliasContextResponseOutput) ToAliasContextResponseOutput() AliasContextResponseOutput {
	return o
}

func (o AliasContextResponseOutput) ToAliasContextResponseOutputWithContext(ctx context.Context) AliasContextResponseOutput {
	return o
}

// The alias kind.
func (o AliasContextResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v AliasContextResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// The alias name.
func (o AliasContextResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AliasContextResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Indicates which analysis completed successfully. Multiple types of analysis can be performed on a single resource.
type AnalysisCompleted struct {
	AnalysisType []string `pulumi:"analysisType"`
}

// AnalysisCompletedInput is an input type that accepts AnalysisCompletedArgs and AnalysisCompletedOutput values.
// You can construct a concrete instance of `AnalysisCompletedInput` via:
//
//	AnalysisCompletedArgs{...}
type AnalysisCompletedInput interface {
	pulumi.Input

	ToAnalysisCompletedOutput() AnalysisCompletedOutput
	ToAnalysisCompletedOutputWithContext(context.Context) AnalysisCompletedOutput
}

// Indicates which analysis completed successfully. Multiple types of analysis can be performed on a single resource.
type AnalysisCompletedArgs struct {
	AnalysisType pulumi.StringArrayInput `pulumi:"analysisType"`
}

func (AnalysisCompletedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisCompleted)(nil)).Elem()
}

func (i AnalysisCompletedArgs) ToAnalysisCompletedOutput() AnalysisCompletedOutput {
	return i.ToAnalysisCompletedOutputWithContext(context.Background())
}

func (i AnalysisCompletedArgs) ToAnalysisCompletedOutputWithContext(ctx context.Context) AnalysisCompletedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisCompletedOutput)
}

func (i AnalysisCompletedArgs) ToAnalysisCompletedPtrOutput() AnalysisCompletedPtrOutput {
	return i.ToAnalysisCompletedPtrOutputWithContext(context.Background())
}

func (i AnalysisCompletedArgs) ToAnalysisCompletedPtrOutputWithContext(ctx context.Context) AnalysisCompletedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisCompletedOutput).ToAnalysisCompletedPtrOutputWithContext(ctx)
}

// AnalysisCompletedPtrInput is an input type that accepts AnalysisCompletedArgs, AnalysisCompletedPtr and AnalysisCompletedPtrOutput values.
// You can construct a concrete instance of `AnalysisCompletedPtrInput` via:
//
//	        AnalysisCompletedArgs{...}
//
//	or:
//
//	        nil
type AnalysisCompletedPtrInput interface {
	pulumi.Input

	ToAnalysisCompletedPtrOutput() AnalysisCompletedPtrOutput
	ToAnalysisCompletedPtrOutputWithContext(context.Context) AnalysisCompletedPtrOutput
}

type analysisCompletedPtrType AnalysisCompletedArgs

func AnalysisCompletedPtr(v *AnalysisCompletedArgs) AnalysisCompletedPtrInput {
	return (*analysisCompletedPtrType)(v)
}

func (*analysisCompletedPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AnalysisCompleted)(nil)).Elem()
}

func (i *analysisCompletedPtrType) ToAnalysisCompletedPtrOutput() AnalysisCompletedPtrOutput {
	return i.ToAnalysisCompletedPtrOutputWithContext(context.Background())
}

func (i *analysisCompletedPtrType) ToAnalysisCompletedPtrOutputWithContext(ctx context.Context) AnalysisCompletedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisCompletedPtrOutput)
}

// Indicates which analysis completed successfully. Multiple types of analysis can be performed on a single resource.
type AnalysisCompletedOutput struct{ *pulumi.OutputState }

func (AnalysisCompletedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisCompleted)(nil)).Elem()
}

func (o AnalysisCompletedOutput) ToAnalysisCompletedOutput() AnalysisCompletedOutput {
	return o
}

func (o AnalysisCompletedOutput) ToAnalysisCompletedOutputWithContext(ctx context.Context) AnalysisCompletedOutput {
	return o
}

func (o AnalysisCompletedOutput) ToAnalysisCompletedPtrOutput() AnalysisCompletedPtrOutput {
	return o.ToAnalysisCompletedPtrOutputWithContext(context.Background())
}

func (o AnalysisCompletedOutput) ToAnalysisCompletedPtrOutputWithContext(ctx context.Context) AnalysisCompletedPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AnalysisCompleted) *AnalysisCompleted {
		return &v
	}).(AnalysisCompletedPtrOutput)
}

func (o AnalysisCompletedOutput) AnalysisType() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AnalysisCompleted) []string { return v.AnalysisType }).(pulumi.StringArrayOutput)
}

type AnalysisCompletedPtrOutput struct{ *pulumi.OutputState }

func (AnalysisCompletedPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnalysisCompleted)(nil)).Elem()
}

func (o AnalysisCompletedPtrOutput) ToAnalysisCompletedPtrOutput() AnalysisCompletedPtrOutput {
	return o
}

func (o AnalysisCompletedPtrOutput) ToAnalysisCompletedPtrOutputWithContext(ctx context.Context) AnalysisCompletedPtrOutput {
	return o
}

func (o AnalysisCompletedPtrOutput) Elem() AnalysisCompletedOutput {
	return o.ApplyT(func(v *AnalysisCompleted) AnalysisCompleted {
		if v != nil {
			return *v
		}
		var ret AnalysisCompleted
		return ret
	}).(AnalysisCompletedOutput)
}

func (o AnalysisCompletedPtrOutput) AnalysisType() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AnalysisCompleted) []string {
		if v == nil {
			return nil
		}
		return v.AnalysisType
	}).(pulumi.StringArrayOutput)
}

// Indicates which analysis completed successfully. Multiple types of analysis can be performed on a single resource.
type AnalysisCompletedResponse struct {
	AnalysisType []string `pulumi:"analysisType"`
}

// Indicates which analysis completed successfully. Multiple types of analysis can be performed on a single resource.
type AnalysisCompletedResponseOutput struct{ *pulumi.OutputState }

func (AnalysisCompletedResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisCompletedResponse)(nil)).Elem()
}

func (o AnalysisCompletedResponseOutput) ToAnalysisCompletedResponseOutput() AnalysisCompletedResponseOutput {
	return o
}

func (o AnalysisCompletedResponseOutput) ToAnalysisCompletedResponseOutputWithContext(ctx context.Context) AnalysisCompletedResponseOutput {
	return o
}

func (o AnalysisCompletedResponseOutput) AnalysisType() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AnalysisCompletedResponse) []string { return v.AnalysisType }).(pulumi.StringArrayOutput)
}

// Artifact describes a build product.
type Artifact struct {
	// Hash or checksum value of a binary, or Docker Registry 2.0 digest of a container.
	Checksum *string `pulumi:"checksum"`
	// Artifact ID, if any; for container images, this will be a URL by digest like `gcr.io/projectID/imagename@sha256:123456`.
	Id *string `pulumi:"id"`
	// Related artifact names. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. Note that a single Artifact ID can have multiple names, for example if two tags are applied to one image.
	Names []string `pulumi:"names"`
}

// ArtifactInput is an input type that accepts ArtifactArgs and ArtifactOutput values.
// You can construct a concrete instance of `ArtifactInput` via:
//
//	ArtifactArgs{...}
type ArtifactInput interface {
	pulumi.Input

	ToArtifactOutput() ArtifactOutput
	ToArtifactOutputWithContext(context.Context) ArtifactOutput
}

// Artifact describes a build product.
type ArtifactArgs struct {
	// Hash or checksum value of a binary, or Docker Registry 2.0 digest of a container.
	Checksum pulumi.StringPtrInput `pulumi:"checksum"`
	// Artifact ID, if any; for container images, this will be a URL by digest like `gcr.io/projectID/imagename@sha256:123456`.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Related artifact names. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. Note that a single Artifact ID can have multiple names, for example if two tags are applied to one image.
	Names pulumi.StringArrayInput `pulumi:"names"`
}

func (ArtifactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Artifact)(nil)).Elem()
}

func (i ArtifactArgs) ToArtifactOutput() ArtifactOutput {
	return i.ToArtifactOutputWithContext(context.Background())
}

func (i ArtifactArgs) ToArtifactOutputWithContext(ctx context.Context) ArtifactOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactOutput)
}

// ArtifactArrayInput is an input type that accepts ArtifactArray and ArtifactArrayOutput values.
// You can construct a concrete instance of `ArtifactArrayInput` via:
//
//	ArtifactArray{ ArtifactArgs{...} }
type ArtifactArrayInput interface {
	pulumi.Input

	ToArtifactArrayOutput() ArtifactArrayOutput
	ToArtifactArrayOutputWithContext(context.Context) ArtifactArrayOutput
}

type ArtifactArray []ArtifactInput

func (ArtifactArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Artifact)(nil)).Elem()
}

func (i ArtifactArray) ToArtifactArrayOutput() ArtifactArrayOutput {
	return i.ToArtifactArrayOutputWithContext(context.Background())
}

func (i ArtifactArray) ToArtifactArrayOutputWithContext(ctx context.Context) ArtifactArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactArrayOutput)
}

// Artifact describes a build product.
type ArtifactOutput struct{ *pulumi.OutputState }

func (ArtifactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Artifact)(nil)).Elem()
}

func (o ArtifactOutput) ToArtifactOutput() ArtifactOutput {
	return o
}

func (o ArtifactOutput) ToArtifactOutputWithContext(ctx context.Context) ArtifactOutput {
	return o
}

// Hash or checksum value of a binary, or Docker Registry 2.0 digest of a container.
func (o ArtifactOutput) Checksum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Artifact) *string { return v.Checksum }).(pulumi.StringPtrOutput)
}

// Artifact ID, if any; for container images, this will be a URL by digest like `gcr.io/projectID/imagename@sha256:123456`.
func (o ArtifactOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Artifact) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Related artifact names. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. Note that a single Artifact ID can have multiple names, for example if two tags are applied to one image.
func (o ArtifactOutput) Names() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Artifact) []string { return v.Names }).(pulumi.StringArrayOutput)
}

type ArtifactArrayOutput struct{ *pulumi.OutputState }

func (ArtifactArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Artifact)(nil)).Elem()
}

func (o ArtifactArrayOutput) ToArtifactArrayOutput() ArtifactArrayOutput {
	return o
}

func (o ArtifactArrayOutput) ToArtifactArrayOutputWithContext(ctx context.Context) ArtifactArrayOutput {
	return o
}

func (o ArtifactArrayOutput) Index(i pulumi.IntInput) ArtifactOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Artifact {
		return vs[0].([]Artifact)[vs[1].(int)]
	}).(ArtifactOutput)
}

// Defines a hash object for use in Materials and Products.
type ArtifactHashes struct {
	Sha256 *string `pulumi:"sha256"`
}

// ArtifactHashesInput is an input type that accepts ArtifactHashesArgs and ArtifactHashesOutput values.
// You can construct a concrete instance of `ArtifactHashesInput` via:
//
//	ArtifactHashesArgs{...}
type ArtifactHashesInput interface {
	pulumi.Input

	ToArtifactHashesOutput() ArtifactHashesOutput
	ToArtifactHashesOutputWithContext(context.Context) ArtifactHashesOutput
}

// Defines a hash object for use in Materials and Products.
type ArtifactHashesArgs struct {
	Sha256 pulumi.StringPtrInput `pulumi:"sha256"`
}

func (ArtifactHashesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArtifactHashes)(nil)).Elem()
}

func (i ArtifactHashesArgs) ToArtifactHashesOutput() ArtifactHashesOutput {
	return i.ToArtifactHashesOutputWithContext(context.Background())
}

func (i ArtifactHashesArgs) ToArtifactHashesOutputWithContext(ctx context.Context) ArtifactHashesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactHashesOutput)
}

func (i ArtifactHashesArgs) ToArtifactHashesPtrOutput() ArtifactHashesPtrOutput {
	return i.ToArtifactHashesPtrOutputWithContext(context.Background())
}

func (i ArtifactHashesArgs) ToArtifactHashesPtrOutputWithContext(ctx context.Context) ArtifactHashesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactHashesOutput).ToArtifactHashesPtrOutputWithContext(ctx)
}

// ArtifactHashesPtrInput is an input type that accepts ArtifactHashesArgs, ArtifactHashesPtr and ArtifactHashesPtrOutput values.
// You can construct a concrete instance of `ArtifactHashesPtrInput` via:
//
//	        ArtifactHashesArgs{...}
//
//	or:
//
//	        nil
type ArtifactHashesPtrInput interface {
	pulumi.Input

	ToArtifactHashesPtrOutput() ArtifactHashesPtrOutput
	ToArtifactHashesPtrOutputWithContext(context.Context) ArtifactHashesPtrOutput
}

type artifactHashesPtrType ArtifactHashesArgs

func ArtifactHashesPtr(v *ArtifactHashesArgs) ArtifactHashesPtrInput {
	return (*artifactHashesPtrType)(v)
}

func (*artifactHashesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArtifactHashes)(nil)).Elem()
}

func (i *artifactHashesPtrType) ToArtifactHashesPtrOutput() ArtifactHashesPtrOutput {
	return i.ToArtifactHashesPtrOutputWithContext(context.Background())
}

func (i *artifactHashesPtrType) ToArtifactHashesPtrOutputWithContext(ctx context.Context) ArtifactHashesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactHashesPtrOutput)
}

// Defines a hash object for use in Materials and Products.
type ArtifactHashesOutput struct{ *pulumi.OutputState }

func (ArtifactHashesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArtifactHashes)(nil)).Elem()
}

func (o ArtifactHashesOutput) ToArtifactHashesOutput() ArtifactHashesOutput {
	return o
}

func (o ArtifactHashesOutput) ToArtifactHashesOutputWithContext(ctx context.Context) ArtifactHashesOutput {
	return o
}

func (o ArtifactHashesOutput) ToArtifactHashesPtrOutput() ArtifactHashesPtrOutput {
	return o.ToArtifactHashesPtrOutputWithContext(context.Background())
}

func (o ArtifactHashesOutput) ToArtifactHashesPtrOutputWithContext(ctx context.Context) ArtifactHashesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ArtifactHashes) *ArtifactHashes {
		return &v
	}).(ArtifactHashesPtrOutput)
}

func (o ArtifactHashesOutput) Sha256() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArtifactHashes) *string { return v.Sha256 }).(pulumi.StringPtrOutput)
}

type ArtifactHashesPtrOutput struct{ *pulumi.OutputState }

func (ArtifactHashesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArtifactHashes)(nil)).Elem()
}

func (o ArtifactHashesPtrOutput) ToArtifactHashesPtrOutput() ArtifactHashesPtrOutput {
	return o
}

func (o ArtifactHashesPtrOutput) ToArtifactHashesPtrOutputWithContext(ctx context.Context) ArtifactHashesPtrOutput {
	return o
}

func (o ArtifactHashesPtrOutput) Elem() ArtifactHashesOutput {
	return o.ApplyT(func(v *ArtifactHashes) ArtifactHashes {
		if v != nil {
			return *v
		}
		var ret ArtifactHashes
		return ret
	}).(ArtifactHashesOutput)
}

func (o ArtifactHashesPtrOutput) Sha256() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArtifactHashes) *string {
		if v == nil {
			return nil
		}
		return v.Sha256
	}).(pulumi.StringPtrOutput)
}

// Defines a hash object for use in Materials and Products.
type ArtifactHashesResponse struct {
	Sha256 string `pulumi:"sha256"`
}

// Defines a hash object for use in Materials and Products.
type ArtifactHashesResponseOutput struct{ *pulumi.OutputState }

func (ArtifactHashesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArtifactHashesResponse)(nil)).Elem()
}

func (o ArtifactHashesResponseOutput) ToArtifactHashesResponseOutput() ArtifactHashesResponseOutput {
	return o
}

func (o ArtifactHashesResponseOutput) ToArtifactHashesResponseOutputWithContext(ctx context.Context) ArtifactHashesResponseOutput {
	return o
}

func (o ArtifactHashesResponseOutput) Sha256() pulumi.StringOutput {
	return o.ApplyT(func(v ArtifactHashesResponse) string { return v.Sha256 }).(pulumi.StringOutput)
}

// Artifact describes a build product.
type ArtifactResponse struct {
	// Hash or checksum value of a binary, or Docker Registry 2.0 digest of a container.
	Checksum string `pulumi:"checksum"`
	// Related artifact names. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. Note that a single Artifact ID can have multiple names, for example if two tags are applied to one image.
	Names []string `pulumi:"names"`
}

// Artifact describes a build product.
type ArtifactResponseOutput struct{ *pulumi.OutputState }

func (ArtifactResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArtifactResponse)(nil)).Elem()
}

func (o ArtifactResponseOutput) ToArtifactResponseOutput() ArtifactResponseOutput {
	return o
}

func (o ArtifactResponseOutput) ToArtifactResponseOutputWithContext(ctx context.Context) ArtifactResponseOutput {
	return o
}

// Hash or checksum value of a binary, or Docker Registry 2.0 digest of a container.
func (o ArtifactResponseOutput) Checksum() pulumi.StringOutput {
	return o.ApplyT(func(v ArtifactResponse) string { return v.Checksum }).(pulumi.StringOutput)
}

// Related artifact names. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. Note that a single Artifact ID can have multiple names, for example if two tags are applied to one image.
func (o ArtifactResponseOutput) Names() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ArtifactResponse) []string { return v.Names }).(pulumi.StringArrayOutput)
}

type ArtifactResponseArrayOutput struct{ *pulumi.OutputState }

func (ArtifactResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ArtifactResponse)(nil)).Elem()
}

func (o ArtifactResponseArrayOutput) ToArtifactResponseArrayOutput() ArtifactResponseArrayOutput {
	return o
}

func (o ArtifactResponseArrayOutput) ToArtifactResponseArrayOutputWithContext(ctx context.Context) ArtifactResponseArrayOutput {
	return o
}

func (o ArtifactResponseArrayOutput) Index(i pulumi.IntInput) ArtifactResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ArtifactResponse {
		return vs[0].([]ArtifactResponse)[vs[1].(int)]
	}).(ArtifactResponseOutput)
}

// Defines an object to declare an in-toto artifact rule
type ArtifactRule struct {
	ArtifactRule []string `pulumi:"artifactRule"`
}

// ArtifactRuleInput is an input type that accepts ArtifactRuleArgs and ArtifactRuleOutput values.
// You can construct a concrete instance of `ArtifactRuleInput` via:
//
//	ArtifactRuleArgs{...}
type ArtifactRuleInput interface {
	pulumi.Input

	ToArtifactRuleOutput() ArtifactRuleOutput
	ToArtifactRuleOutputWithContext(context.Context) ArtifactRuleOutput
}

// Defines an object to declare an in-toto artifact rule
type ArtifactRuleArgs struct {
	ArtifactRule pulumi.StringArrayInput `pulumi:"artifactRule"`
}

func (ArtifactRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArtifactRule)(nil)).Elem()
}

func (i ArtifactRuleArgs) ToArtifactRuleOutput() ArtifactRuleOutput {
	return i.ToArtifactRuleOutputWithContext(context.Background())
}

func (i ArtifactRuleArgs) ToArtifactRuleOutputWithContext(ctx context.Context) ArtifactRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactRuleOutput)
}

// ArtifactRuleArrayInput is an input type that accepts ArtifactRuleArray and ArtifactRuleArrayOutput values.
// You can construct a concrete instance of `ArtifactRuleArrayInput` via:
//
//	ArtifactRuleArray{ ArtifactRuleArgs{...} }
type ArtifactRuleArrayInput interface {
	pulumi.Input

	ToArtifactRuleArrayOutput() ArtifactRuleArrayOutput
	ToArtifactRuleArrayOutputWithContext(context.Context) ArtifactRuleArrayOutput
}

type ArtifactRuleArray []ArtifactRuleInput

func (ArtifactRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ArtifactRule)(nil)).Elem()
}

func (i ArtifactRuleArray) ToArtifactRuleArrayOutput() ArtifactRuleArrayOutput {
	return i.ToArtifactRuleArrayOutputWithContext(context.Background())
}

func (i ArtifactRuleArray) ToArtifactRuleArrayOutputWithContext(ctx context.Context) ArtifactRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactRuleArrayOutput)
}

// Defines an object to declare an in-toto artifact rule
type ArtifactRuleOutput struct{ *pulumi.OutputState }

func (ArtifactRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArtifactRule)(nil)).Elem()
}

func (o ArtifactRuleOutput) ToArtifactRuleOutput() ArtifactRuleOutput {
	return o
}

func (o ArtifactRuleOutput) ToArtifactRuleOutputWithContext(ctx context.Context) ArtifactRuleOutput {
	return o
}

func (o ArtifactRuleOutput) ArtifactRule() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ArtifactRule) []string { return v.ArtifactRule }).(pulumi.StringArrayOutput)
}

type ArtifactRuleArrayOutput struct{ *pulumi.OutputState }

func (ArtifactRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ArtifactRule)(nil)).Elem()
}

func (o ArtifactRuleArrayOutput) ToArtifactRuleArrayOutput() ArtifactRuleArrayOutput {
	return o
}

func (o ArtifactRuleArrayOutput) ToArtifactRuleArrayOutputWithContext(ctx context.Context) ArtifactRuleArrayOutput {
	return o
}

func (o ArtifactRuleArrayOutput) Index(i pulumi.IntInput) ArtifactRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ArtifactRule {
		return vs[0].([]ArtifactRule)[vs[1].(int)]
	}).(ArtifactRuleOutput)
}

// Defines an object to declare an in-toto artifact rule
type ArtifactRuleResponse struct {
	ArtifactRule []string `pulumi:"artifactRule"`
}

// Defines an object to declare an in-toto artifact rule
type ArtifactRuleResponseOutput struct{ *pulumi.OutputState }

func (ArtifactRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArtifactRuleResponse)(nil)).Elem()
}

func (o ArtifactRuleResponseOutput) ToArtifactRuleResponseOutput() ArtifactRuleResponseOutput {
	return o
}

func (o ArtifactRuleResponseOutput) ToArtifactRuleResponseOutputWithContext(ctx context.Context) ArtifactRuleResponseOutput {
	return o
}

func (o ArtifactRuleResponseOutput) ArtifactRule() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ArtifactRuleResponse) []string { return v.ArtifactRule }).(pulumi.StringArrayOutput)
}

type ArtifactRuleResponseArrayOutput struct{ *pulumi.OutputState }

func (ArtifactRuleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ArtifactRuleResponse)(nil)).Elem()
}

func (o ArtifactRuleResponseArrayOutput) ToArtifactRuleResponseArrayOutput() ArtifactRuleResponseArrayOutput {
	return o
}

func (o ArtifactRuleResponseArrayOutput) ToArtifactRuleResponseArrayOutputWithContext(ctx context.Context) ArtifactRuleResponseArrayOutput {
	return o
}

func (o ArtifactRuleResponseArrayOutput) Index(i pulumi.IntInput) ArtifactRuleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ArtifactRuleResponse {
		return vs[0].([]ArtifactRuleResponse)[vs[1].(int)]
	}).(ArtifactRuleResponseOutput)
}

// Assessment provides all information that is related to a single vulnerability for this product.
type Assessment struct {
	// Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.
	//
	// Deprecated: Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.
	Cve *string `pulumi:"cve"`
	// Contains information about the impact of this vulnerability, this will change with time.
	Impacts []string `pulumi:"impacts"`
	// Justification provides the justification when the state of the assessment if NOT_AFFECTED.
	Justification *Justification `pulumi:"justification"`
	// A detailed description of this Vex.
	LongDescription *string `pulumi:"longDescription"`
	// Holds a list of references associated with this vulnerability item and assessment. These uris have additional information about the vulnerability and the assessment itself. E.g. Link to a document which details how this assessment concluded the state of this vulnerability.
	RelatedUris []RelatedUrl `pulumi:"relatedUris"`
	// Specifies details on how to handle (and presumably, fix) a vulnerability.
	Remediations []Remediation `pulumi:"remediations"`
	// A one sentence description of this Vex.
	ShortDescription *string `pulumi:"shortDescription"`
	// Provides the state of this Vulnerability assessment.
	State *AssessmentState `pulumi:"state"`
	// The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc.
	VulnerabilityId *string `pulumi:"vulnerabilityId"`
}

// AssessmentInput is an input type that accepts AssessmentArgs and AssessmentOutput values.
// You can construct a concrete instance of `AssessmentInput` via:
//
//	AssessmentArgs{...}
type AssessmentInput interface {
	pulumi.Input

	ToAssessmentOutput() AssessmentOutput
	ToAssessmentOutputWithContext(context.Context) AssessmentOutput
}

// Assessment provides all information that is related to a single vulnerability for this product.
type AssessmentArgs struct {
	// Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.
	//
	// Deprecated: Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.
	Cve pulumi.StringPtrInput `pulumi:"cve"`
	// Contains information about the impact of this vulnerability, this will change with time.
	Impacts pulumi.StringArrayInput `pulumi:"impacts"`
	// Justification provides the justification when the state of the assessment if NOT_AFFECTED.
	Justification JustificationPtrInput `pulumi:"justification"`
	// A detailed description of this Vex.
	LongDescription pulumi.StringPtrInput `pulumi:"longDescription"`
	// Holds a list of references associated with this vulnerability item and assessment. These uris have additional information about the vulnerability and the assessment itself. E.g. Link to a document which details how this assessment concluded the state of this vulnerability.
	RelatedUris RelatedUrlArrayInput `pulumi:"relatedUris"`
	// Specifies details on how to handle (and presumably, fix) a vulnerability.
	Remediations RemediationArrayInput `pulumi:"remediations"`
	// A one sentence description of this Vex.
	ShortDescription pulumi.StringPtrInput `pulumi:"shortDescription"`
	// Provides the state of this Vulnerability assessment.
	State AssessmentStatePtrInput `pulumi:"state"`
	// The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc.
	VulnerabilityId pulumi.StringPtrInput `pulumi:"vulnerabilityId"`
}

func (AssessmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Assessment)(nil)).Elem()
}

func (i AssessmentArgs) ToAssessmentOutput() AssessmentOutput {
	return i.ToAssessmentOutputWithContext(context.Background())
}

func (i AssessmentArgs) ToAssessmentOutputWithContext(ctx context.Context) AssessmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentOutput)
}

func (i AssessmentArgs) ToAssessmentPtrOutput() AssessmentPtrOutput {
	return i.ToAssessmentPtrOutputWithContext(context.Background())
}

func (i AssessmentArgs) ToAssessmentPtrOutputWithContext(ctx context.Context) AssessmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentOutput).ToAssessmentPtrOutputWithContext(ctx)
}

// AssessmentPtrInput is an input type that accepts AssessmentArgs, AssessmentPtr and AssessmentPtrOutput values.
// You can construct a concrete instance of `AssessmentPtrInput` via:
//
//	        AssessmentArgs{...}
//
//	or:
//
//	        nil
type AssessmentPtrInput interface {
	pulumi.Input

	ToAssessmentPtrOutput() AssessmentPtrOutput
	ToAssessmentPtrOutputWithContext(context.Context) AssessmentPtrOutput
}

type assessmentPtrType AssessmentArgs

func AssessmentPtr(v *AssessmentArgs) AssessmentPtrInput {
	return (*assessmentPtrType)(v)
}

func (*assessmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Assessment)(nil)).Elem()
}

func (i *assessmentPtrType) ToAssessmentPtrOutput() AssessmentPtrOutput {
	return i.ToAssessmentPtrOutputWithContext(context.Background())
}

func (i *assessmentPtrType) ToAssessmentPtrOutputWithContext(ctx context.Context) AssessmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentPtrOutput)
}

// Assessment provides all information that is related to a single vulnerability for this product.
type AssessmentOutput struct{ *pulumi.OutputState }

func (AssessmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Assessment)(nil)).Elem()
}

func (o AssessmentOutput) ToAssessmentOutput() AssessmentOutput {
	return o
}

func (o AssessmentOutput) ToAssessmentOutputWithContext(ctx context.Context) AssessmentOutput {
	return o
}

func (o AssessmentOutput) ToAssessmentPtrOutput() AssessmentPtrOutput {
	return o.ToAssessmentPtrOutputWithContext(context.Background())
}

func (o AssessmentOutput) ToAssessmentPtrOutputWithContext(ctx context.Context) AssessmentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Assessment) *Assessment {
		return &v
	}).(AssessmentPtrOutput)
}

// Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.
//
// Deprecated: Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.
func (o AssessmentOutput) Cve() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Assessment) *string { return v.Cve }).(pulumi.StringPtrOutput)
}

// Contains information about the impact of this vulnerability, this will change with time.
func (o AssessmentOutput) Impacts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Assessment) []string { return v.Impacts }).(pulumi.StringArrayOutput)
}

// Justification provides the justification when the state of the assessment if NOT_AFFECTED.
func (o AssessmentOutput) Justification() JustificationPtrOutput {
	return o.ApplyT(func(v Assessment) *Justification { return v.Justification }).(JustificationPtrOutput)
}

// A detailed description of this Vex.
func (o AssessmentOutput) LongDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Assessment) *string { return v.LongDescription }).(pulumi.StringPtrOutput)
}

// Holds a list of references associated with this vulnerability item and assessment. These uris have additional information about the vulnerability and the assessment itself. E.g. Link to a document which details how this assessment concluded the state of this vulnerability.
func (o AssessmentOutput) RelatedUris() RelatedUrlArrayOutput {
	return o.ApplyT(func(v Assessment) []RelatedUrl { return v.RelatedUris }).(RelatedUrlArrayOutput)
}

// Specifies details on how to handle (and presumably, fix) a vulnerability.
func (o AssessmentOutput) Remediations() RemediationArrayOutput {
	return o.ApplyT(func(v Assessment) []Remediation { return v.Remediations }).(RemediationArrayOutput)
}

// A one sentence description of this Vex.
func (o AssessmentOutput) ShortDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Assessment) *string { return v.ShortDescription }).(pulumi.StringPtrOutput)
}

// Provides the state of this Vulnerability assessment.
func (o AssessmentOutput) State() AssessmentStatePtrOutput {
	return o.ApplyT(func(v Assessment) *AssessmentState { return v.State }).(AssessmentStatePtrOutput)
}

// The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc.
func (o AssessmentOutput) VulnerabilityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Assessment) *string { return v.VulnerabilityId }).(pulumi.StringPtrOutput)
}

type AssessmentPtrOutput struct{ *pulumi.OutputState }

func (AssessmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Assessment)(nil)).Elem()
}

func (o AssessmentPtrOutput) ToAssessmentPtrOutput() AssessmentPtrOutput {
	return o
}

func (o AssessmentPtrOutput) ToAssessmentPtrOutputWithContext(ctx context.Context) AssessmentPtrOutput {
	return o
}

func (o AssessmentPtrOutput) Elem() AssessmentOutput {
	return o.ApplyT(func(v *Assessment) Assessment {
		if v != nil {
			return *v
		}
		var ret Assessment
		return ret
	}).(AssessmentOutput)
}

// Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.
//
// Deprecated: Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.
func (o AssessmentPtrOutput) Cve() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Assessment) *string {
		if v == nil {
			return nil
		}
		return v.Cve
	}).(pulumi.StringPtrOutput)
}

// Contains information about the impact of this vulnerability, this will change with time.
func (o AssessmentPtrOutput) Impacts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Assessment) []string {
		if v == nil {
			return nil
		}
		return v.Impacts
	}).(pulumi.StringArrayOutput)
}

// Justification provides the justification when the state of the assessment if NOT_AFFECTED.
func (o AssessmentPtrOutput) Justification() JustificationPtrOutput {
	return o.ApplyT(func(v *Assessment) *Justification {
		if v == nil {
			return nil
		}
		return v.Justification
	}).(JustificationPtrOutput)
}

// A detailed description of this Vex.
func (o AssessmentPtrOutput) LongDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Assessment) *string {
		if v == nil {
			return nil
		}
		return v.LongDescription
	}).(pulumi.StringPtrOutput)
}

// Holds a list of references associated with this vulnerability item and assessment. These uris have additional information about the vulnerability and the assessment itself. E.g. Link to a document which details how this assessment concluded the state of this vulnerability.
func (o AssessmentPtrOutput) RelatedUris() RelatedUrlArrayOutput {
	return o.ApplyT(func(v *Assessment) []RelatedUrl {
		if v == nil {
			return nil
		}
		return v.RelatedUris
	}).(RelatedUrlArrayOutput)
}

// Specifies details on how to handle (and presumably, fix) a vulnerability.
func (o AssessmentPtrOutput) Remediations() RemediationArrayOutput {
	return o.ApplyT(func(v *Assessment) []Remediation {
		if v == nil {
			return nil
		}
		return v.Remediations
	}).(RemediationArrayOutput)
}

// A one sentence description of this Vex.
func (o AssessmentPtrOutput) ShortDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Assessment) *string {
		if v == nil {
			return nil
		}
		return v.ShortDescription
	}).(pulumi.StringPtrOutput)
}

// Provides the state of this Vulnerability assessment.
func (o AssessmentPtrOutput) State() AssessmentStatePtrOutput {
	return o.ApplyT(func(v *Assessment) *AssessmentState {
		if v == nil {
			return nil
		}
		return v.State
	}).(AssessmentStatePtrOutput)
}

// The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc.
func (o AssessmentPtrOutput) VulnerabilityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Assessment) *string {
		if v == nil {
			return nil
		}
		return v.VulnerabilityId
	}).(pulumi.StringPtrOutput)
}

// Assessment provides all information that is related to a single vulnerability for this product.
type AssessmentResponse struct {
	// Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.
	//
	// Deprecated: Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.
	Cve string `pulumi:"cve"`
	// Contains information about the impact of this vulnerability, this will change with time.
	Impacts []string `pulumi:"impacts"`
	// Justification provides the justification when the state of the assessment if NOT_AFFECTED.
	Justification JustificationResponse `pulumi:"justification"`
	// A detailed description of this Vex.
	LongDescription string `pulumi:"longDescription"`
	// Holds a list of references associated with this vulnerability item and assessment. These uris have additional information about the vulnerability and the assessment itself. E.g. Link to a document which details how this assessment concluded the state of this vulnerability.
	RelatedUris []RelatedUrlResponse `pulumi:"relatedUris"`
	// Specifies details on how to handle (and presumably, fix) a vulnerability.
	Remediations []RemediationResponse `pulumi:"remediations"`
	// A one sentence description of this Vex.
	ShortDescription string `pulumi:"shortDescription"`
	// Provides the state of this Vulnerability assessment.
	State string `pulumi:"state"`
	// The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc.
	VulnerabilityId string `pulumi:"vulnerabilityId"`
}

// Assessment provides all information that is related to a single vulnerability for this product.
type AssessmentResponseOutput struct{ *pulumi.OutputState }

func (AssessmentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentResponse)(nil)).Elem()
}

func (o AssessmentResponseOutput) ToAssessmentResponseOutput() AssessmentResponseOutput {
	return o
}

func (o AssessmentResponseOutput) ToAssessmentResponseOutputWithContext(ctx context.Context) AssessmentResponseOutput {
	return o
}

// Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.
//
// Deprecated: Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.
func (o AssessmentResponseOutput) Cve() pulumi.StringOutput {
	return o.ApplyT(func(v AssessmentResponse) string { return v.Cve }).(pulumi.StringOutput)
}

// Contains information about the impact of this vulnerability, this will change with time.
func (o AssessmentResponseOutput) Impacts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AssessmentResponse) []string { return v.Impacts }).(pulumi.StringArrayOutput)
}

// Justification provides the justification when the state of the assessment if NOT_AFFECTED.
func (o AssessmentResponseOutput) Justification() JustificationResponseOutput {
	return o.ApplyT(func(v AssessmentResponse) JustificationResponse { return v.Justification }).(JustificationResponseOutput)
}

// A detailed description of this Vex.
func (o AssessmentResponseOutput) LongDescription() pulumi.StringOutput {
	return o.ApplyT(func(v AssessmentResponse) string { return v.LongDescription }).(pulumi.StringOutput)
}

// Holds a list of references associated with this vulnerability item and assessment. These uris have additional information about the vulnerability and the assessment itself. E.g. Link to a document which details how this assessment concluded the state of this vulnerability.
func (o AssessmentResponseOutput) RelatedUris() RelatedUrlResponseArrayOutput {
	return o.ApplyT(func(v AssessmentResponse) []RelatedUrlResponse { return v.RelatedUris }).(RelatedUrlResponseArrayOutput)
}

// Specifies details on how to handle (and presumably, fix) a vulnerability.
func (o AssessmentResponseOutput) Remediations() RemediationResponseArrayOutput {
	return o.ApplyT(func(v AssessmentResponse) []RemediationResponse { return v.Remediations }).(RemediationResponseArrayOutput)
}

// A one sentence description of this Vex.
func (o AssessmentResponseOutput) ShortDescription() pulumi.StringOutput {
	return o.ApplyT(func(v AssessmentResponse) string { return v.ShortDescription }).(pulumi.StringOutput)
}

// Provides the state of this Vulnerability assessment.
func (o AssessmentResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v AssessmentResponse) string { return v.State }).(pulumi.StringOutput)
}

// The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc.
func (o AssessmentResponseOutput) VulnerabilityId() pulumi.StringOutput {
	return o.ApplyT(func(v AssessmentResponse) string { return v.VulnerabilityId }).(pulumi.StringOutput)
}

// Occurrence that represents a single "attestation". The authenticity of an attestation can be verified using the attached signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish trust. In this circumstance, the authority to which this attestation is attached is primarily useful for look-up (how to find this attestation if you already know the authority and artifact to be verified) and intent (which authority was this attestation intended to sign for).
type Attestation struct {
	GenericSignedAttestation *GenericSignedAttestation `pulumi:"genericSignedAttestation"`
	// A PGP signed attestation.
	PgpSignedAttestation *PgpSignedAttestation `pulumi:"pgpSignedAttestation"`
}

// AttestationInput is an input type that accepts AttestationArgs and AttestationOutput values.
// You can construct a concrete instance of `AttestationInput` via:
//
//	AttestationArgs{...}
type AttestationInput interface {
	pulumi.Input

	ToAttestationOutput() AttestationOutput
	ToAttestationOutputWithContext(context.Context) AttestationOutput
}

// Occurrence that represents a single "attestation". The authenticity of an attestation can be verified using the attached signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish trust. In this circumstance, the authority to which this attestation is attached is primarily useful for look-up (how to find this attestation if you already know the authority and artifact to be verified) and intent (which authority was this attestation intended to sign for).
type AttestationArgs struct {
	GenericSignedAttestation GenericSignedAttestationPtrInput `pulumi:"genericSignedAttestation"`
	// A PGP signed attestation.
	PgpSignedAttestation PgpSignedAttestationPtrInput `pulumi:"pgpSignedAttestation"`
}

func (AttestationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Attestation)(nil)).Elem()
}

func (i AttestationArgs) ToAttestationOutput() AttestationOutput {
	return i.ToAttestationOutputWithContext(context.Background())
}

func (i AttestationArgs) ToAttestationOutputWithContext(ctx context.Context) AttestationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttestationOutput)
}

func (i AttestationArgs) ToAttestationPtrOutput() AttestationPtrOutput {
	return i.ToAttestationPtrOutputWithContext(context.Background())
}

func (i AttestationArgs) ToAttestationPtrOutputWithContext(ctx context.Context) AttestationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttestationOutput).ToAttestationPtrOutputWithContext(ctx)
}

// AttestationPtrInput is an input type that accepts AttestationArgs, AttestationPtr and AttestationPtrOutput values.
// You can construct a concrete instance of `AttestationPtrInput` via:
//
//	        AttestationArgs{...}
//
//	or:
//
//	        nil
type AttestationPtrInput interface {
	pulumi.Input

	ToAttestationPtrOutput() AttestationPtrOutput
	ToAttestationPtrOutputWithContext(context.Context) AttestationPtrOutput
}

type attestationPtrType AttestationArgs

func AttestationPtr(v *AttestationArgs) AttestationPtrInput {
	return (*attestationPtrType)(v)
}

func (*attestationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Attestation)(nil)).Elem()
}

func (i *attestationPtrType) ToAttestationPtrOutput() AttestationPtrOutput {
	return i.ToAttestationPtrOutputWithContext(context.Background())
}

func (i *attestationPtrType) ToAttestationPtrOutputWithContext(ctx context.Context) AttestationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttestationPtrOutput)
}

// Occurrence that represents a single "attestation". The authenticity of an attestation can be verified using the attached signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish trust. In this circumstance, the authority to which this attestation is attached is primarily useful for look-up (how to find this attestation if you already know the authority and artifact to be verified) and intent (which authority was this attestation intended to sign for).
type AttestationOutput struct{ *pulumi.OutputState }

func (AttestationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Attestation)(nil)).Elem()
}

func (o AttestationOutput) ToAttestationOutput() AttestationOutput {
	return o
}

func (o AttestationOutput) ToAttestationOutputWithContext(ctx context.Context) AttestationOutput {
	return o
}

func (o AttestationOutput) ToAttestationPtrOutput() AttestationPtrOutput {
	return o.ToAttestationPtrOutputWithContext(context.Background())
}

func (o AttestationOutput) ToAttestationPtrOutputWithContext(ctx context.Context) AttestationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Attestation) *Attestation {
		return &v
	}).(AttestationPtrOutput)
}

func (o AttestationOutput) GenericSignedAttestation() GenericSignedAttestationPtrOutput {
	return o.ApplyT(func(v Attestation) *GenericSignedAttestation { return v.GenericSignedAttestation }).(GenericSignedAttestationPtrOutput)
}

// A PGP signed attestation.
func (o AttestationOutput) PgpSignedAttestation() PgpSignedAttestationPtrOutput {
	return o.ApplyT(func(v Attestation) *PgpSignedAttestation { return v.PgpSignedAttestation }).(PgpSignedAttestationPtrOutput)
}

type AttestationPtrOutput struct{ *pulumi.OutputState }

func (AttestationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Attestation)(nil)).Elem()
}

func (o AttestationPtrOutput) ToAttestationPtrOutput() AttestationPtrOutput {
	return o
}

func (o AttestationPtrOutput) ToAttestationPtrOutputWithContext(ctx context.Context) AttestationPtrOutput {
	return o
}

func (o AttestationPtrOutput) Elem() AttestationOutput {
	return o.ApplyT(func(v *Attestation) Attestation {
		if v != nil {
			return *v
		}
		var ret Attestation
		return ret
	}).(AttestationOutput)
}

func (o AttestationPtrOutput) GenericSignedAttestation() GenericSignedAttestationPtrOutput {
	return o.ApplyT(func(v *Attestation) *GenericSignedAttestation {
		if v == nil {
			return nil
		}
		return v.GenericSignedAttestation
	}).(GenericSignedAttestationPtrOutput)
}

// A PGP signed attestation.
func (o AttestationPtrOutput) PgpSignedAttestation() PgpSignedAttestationPtrOutput {
	return o.ApplyT(func(v *Attestation) *PgpSignedAttestation {
		if v == nil {
			return nil
		}
		return v.PgpSignedAttestation
	}).(PgpSignedAttestationPtrOutput)
}

// Occurrence that represents a single "attestation". The authenticity of an attestation can be verified using the attached signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish trust. In this circumstance, the authority to which this attestation is attached is primarily useful for look-up (how to find this attestation if you already know the authority and artifact to be verified) and intent (which authority was this attestation intended to sign for).
type AttestationResponse struct {
	GenericSignedAttestation GenericSignedAttestationResponse `pulumi:"genericSignedAttestation"`
	// A PGP signed attestation.
	PgpSignedAttestation PgpSignedAttestationResponse `pulumi:"pgpSignedAttestation"`
}

// Occurrence that represents a single "attestation". The authenticity of an attestation can be verified using the attached signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish trust. In this circumstance, the authority to which this attestation is attached is primarily useful for look-up (how to find this attestation if you already know the authority and artifact to be verified) and intent (which authority was this attestation intended to sign for).
type AttestationResponseOutput struct{ *pulumi.OutputState }

func (AttestationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AttestationResponse)(nil)).Elem()
}

func (o AttestationResponseOutput) ToAttestationResponseOutput() AttestationResponseOutput {
	return o
}

func (o AttestationResponseOutput) ToAttestationResponseOutputWithContext(ctx context.Context) AttestationResponseOutput {
	return o
}

func (o AttestationResponseOutput) GenericSignedAttestation() GenericSignedAttestationResponseOutput {
	return o.ApplyT(func(v AttestationResponse) GenericSignedAttestationResponse { return v.GenericSignedAttestation }).(GenericSignedAttestationResponseOutput)
}

// A PGP signed attestation.
func (o AttestationResponseOutput) PgpSignedAttestation() PgpSignedAttestationResponseOutput {
	return o.ApplyT(func(v AttestationResponse) PgpSignedAttestationResponse { return v.PgpSignedAttestation }).(PgpSignedAttestationResponseOutput)
}

// Note kind that represents a logical attestation "role" or "authority". For example, an organization might have one `Authority` for "QA" and one for "build". This note is intended to act strictly as a grouping mechanism for the attached occurrences (Attestations). This grouping mechanism also provides a security boundary, since IAM ACLs gate the ability for a principle to attach an occurrence to a given note. It also provides a single point of lookup to find all attached attestation occurrences, even if they don't all live in the same project.
type Authority struct {
	// Hint hints at the purpose of the attestation authority.
	Hint *Hint `pulumi:"hint"`
}

// AuthorityInput is an input type that accepts AuthorityArgs and AuthorityOutput values.
// You can construct a concrete instance of `AuthorityInput` via:
//
//	AuthorityArgs{...}
type AuthorityInput interface {
	pulumi.Input

	ToAuthorityOutput() AuthorityOutput
	ToAuthorityOutputWithContext(context.Context) AuthorityOutput
}

// Note kind that represents a logical attestation "role" or "authority". For example, an organization might have one `Authority` for "QA" and one for "build". This note is intended to act strictly as a grouping mechanism for the attached occurrences (Attestations). This grouping mechanism also provides a security boundary, since IAM ACLs gate the ability for a principle to attach an occurrence to a given note. It also provides a single point of lookup to find all attached attestation occurrences, even if they don't all live in the same project.
type AuthorityArgs struct {
	// Hint hints at the purpose of the attestation authority.
	Hint HintPtrInput `pulumi:"hint"`
}

func (AuthorityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Authority)(nil)).Elem()
}

func (i AuthorityArgs) ToAuthorityOutput() AuthorityOutput {
	return i.ToAuthorityOutputWithContext(context.Background())
}

func (i AuthorityArgs) ToAuthorityOutputWithContext(ctx context.Context) AuthorityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorityOutput)
}

func (i AuthorityArgs) ToAuthorityPtrOutput() AuthorityPtrOutput {
	return i.ToAuthorityPtrOutputWithContext(context.Background())
}

func (i AuthorityArgs) ToAuthorityPtrOutputWithContext(ctx context.Context) AuthorityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorityOutput).ToAuthorityPtrOutputWithContext(ctx)
}

// AuthorityPtrInput is an input type that accepts AuthorityArgs, AuthorityPtr and AuthorityPtrOutput values.
// You can construct a concrete instance of `AuthorityPtrInput` via:
//
//	        AuthorityArgs{...}
//
//	or:
//
//	        nil
type AuthorityPtrInput interface {
	pulumi.Input

	ToAuthorityPtrOutput() AuthorityPtrOutput
	ToAuthorityPtrOutputWithContext(context.Context) AuthorityPtrOutput
}

type authorityPtrType AuthorityArgs

func AuthorityPtr(v *AuthorityArgs) AuthorityPtrInput {
	return (*authorityPtrType)(v)
}

func (*authorityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Authority)(nil)).Elem()
}

func (i *authorityPtrType) ToAuthorityPtrOutput() AuthorityPtrOutput {
	return i.ToAuthorityPtrOutputWithContext(context.Background())
}

func (i *authorityPtrType) ToAuthorityPtrOutputWithContext(ctx context.Context) AuthorityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorityPtrOutput)
}

// Note kind that represents a logical attestation "role" or "authority". For example, an organization might have one `Authority` for "QA" and one for "build". This note is intended to act strictly as a grouping mechanism for the attached occurrences (Attestations). This grouping mechanism also provides a security boundary, since IAM ACLs gate the ability for a principle to attach an occurrence to a given note. It also provides a single point of lookup to find all attached attestation occurrences, even if they don't all live in the same project.
type AuthorityOutput struct{ *pulumi.OutputState }

func (AuthorityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Authority)(nil)).Elem()
}

func (o AuthorityOutput) ToAuthorityOutput() AuthorityOutput {
	return o
}

func (o AuthorityOutput) ToAuthorityOutputWithContext(ctx context.Context) AuthorityOutput {
	return o
}

func (o AuthorityOutput) ToAuthorityPtrOutput() AuthorityPtrOutput {
	return o.ToAuthorityPtrOutputWithContext(context.Background())
}

func (o AuthorityOutput) ToAuthorityPtrOutputWithContext(ctx context.Context) AuthorityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Authority) *Authority {
		return &v
	}).(AuthorityPtrOutput)
}

// Hint hints at the purpose of the attestation authority.
func (o AuthorityOutput) Hint() HintPtrOutput {
	return o.ApplyT(func(v Authority) *Hint { return v.Hint }).(HintPtrOutput)
}

type AuthorityPtrOutput struct{ *pulumi.OutputState }

func (AuthorityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Authority)(nil)).Elem()
}

func (o AuthorityPtrOutput) ToAuthorityPtrOutput() AuthorityPtrOutput {
	return o
}

func (o AuthorityPtrOutput) ToAuthorityPtrOutputWithContext(ctx context.Context) AuthorityPtrOutput {
	return o
}

func (o AuthorityPtrOutput) Elem() AuthorityOutput {
	return o.ApplyT(func(v *Authority) Authority {
		if v != nil {
			return *v
		}
		var ret Authority
		return ret
	}).(AuthorityOutput)
}

// Hint hints at the purpose of the attestation authority.
func (o AuthorityPtrOutput) Hint() HintPtrOutput {
	return o.ApplyT(func(v *Authority) *Hint {
		if v == nil {
			return nil
		}
		return v.Hint
	}).(HintPtrOutput)
}

// Note kind that represents a logical attestation "role" or "authority". For example, an organization might have one `Authority` for "QA" and one for "build". This note is intended to act strictly as a grouping mechanism for the attached occurrences (Attestations). This grouping mechanism also provides a security boundary, since IAM ACLs gate the ability for a principle to attach an occurrence to a given note. It also provides a single point of lookup to find all attached attestation occurrences, even if they don't all live in the same project.
type AuthorityResponse struct {
	// Hint hints at the purpose of the attestation authority.
	Hint HintResponse `pulumi:"hint"`
}

// Note kind that represents a logical attestation "role" or "authority". For example, an organization might have one `Authority` for "QA" and one for "build". This note is intended to act strictly as a grouping mechanism for the attached occurrences (Attestations). This grouping mechanism also provides a security boundary, since IAM ACLs gate the ability for a principle to attach an occurrence to a given note. It also provides a single point of lookup to find all attached attestation occurrences, even if they don't all live in the same project.
type AuthorityResponseOutput struct{ *pulumi.OutputState }

func (AuthorityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorityResponse)(nil)).Elem()
}

func (o AuthorityResponseOutput) ToAuthorityResponseOutput() AuthorityResponseOutput {
	return o
}

func (o AuthorityResponseOutput) ToAuthorityResponseOutputWithContext(ctx context.Context) AuthorityResponseOutput {
	return o
}

// Hint hints at the purpose of the attestation authority.
func (o AuthorityResponseOutput) Hint() HintResponseOutput {
	return o.ApplyT(func(v AuthorityResponse) HintResponse { return v.Hint }).(HintResponseOutput)
}

// Basis describes the base image portion (Note) of the DockerImage relationship. Linked occurrences are derived from this or an equivalent image via: FROM Or an equivalent reference, e.g. a tag of the resource_url.
type Basis struct {
	// Immutable. The fingerprint of the base image.
	Fingerprint Fingerprint `pulumi:"fingerprint"`
	// Immutable. The resource_url for the resource representing the basis of associated occurrence images.
	ResourceUrl string `pulumi:"resourceUrl"`
}

// BasisInput is an input type that accepts BasisArgs and BasisOutput values.
// You can construct a concrete instance of `BasisInput` via:
//
//	BasisArgs{...}
type BasisInput interface {
	pulumi.Input

	ToBasisOutput() BasisOutput
	ToBasisOutputWithContext(context.Context) BasisOutput
}

// Basis describes the base image portion (Note) of the DockerImage relationship. Linked occurrences are derived from this or an equivalent image via: FROM Or an equivalent reference, e.g. a tag of the resource_url.
type BasisArgs struct {
	// Immutable. The fingerprint of the base image.
	Fingerprint FingerprintInput `pulumi:"fingerprint"`
	// Immutable. The resource_url for the resource representing the basis of associated occurrence images.
	ResourceUrl pulumi.StringInput `pulumi:"resourceUrl"`
}

func (BasisArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Basis)(nil)).Elem()
}

func (i BasisArgs) ToBasisOutput() BasisOutput {
	return i.ToBasisOutputWithContext(context.Background())
}

func (i BasisArgs) ToBasisOutputWithContext(ctx context.Context) BasisOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BasisOutput)
}

func (i BasisArgs) ToBasisPtrOutput() BasisPtrOutput {
	return i.ToBasisPtrOutputWithContext(context.Background())
}

func (i BasisArgs) ToBasisPtrOutputWithContext(ctx context.Context) BasisPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BasisOutput).ToBasisPtrOutputWithContext(ctx)
}

// BasisPtrInput is an input type that accepts BasisArgs, BasisPtr and BasisPtrOutput values.
// You can construct a concrete instance of `BasisPtrInput` via:
//
//	        BasisArgs{...}
//
//	or:
//
//	        nil
type BasisPtrInput interface {
	pulumi.Input

	ToBasisPtrOutput() BasisPtrOutput
	ToBasisPtrOutputWithContext(context.Context) BasisPtrOutput
}

type basisPtrType BasisArgs

func BasisPtr(v *BasisArgs) BasisPtrInput {
	return (*basisPtrType)(v)
}

func (*basisPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Basis)(nil)).Elem()
}

func (i *basisPtrType) ToBasisPtrOutput() BasisPtrOutput {
	return i.ToBasisPtrOutputWithContext(context.Background())
}

func (i *basisPtrType) ToBasisPtrOutputWithContext(ctx context.Context) BasisPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BasisPtrOutput)
}

// Basis describes the base image portion (Note) of the DockerImage relationship. Linked occurrences are derived from this or an equivalent image via: FROM Or an equivalent reference, e.g. a tag of the resource_url.
type BasisOutput struct{ *pulumi.OutputState }

func (BasisOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Basis)(nil)).Elem()
}

func (o BasisOutput) ToBasisOutput() BasisOutput {
	return o
}

func (o BasisOutput) ToBasisOutputWithContext(ctx context.Context) BasisOutput {
	return o
}

func (o BasisOutput) ToBasisPtrOutput() BasisPtrOutput {
	return o.ToBasisPtrOutputWithContext(context.Background())
}

func (o BasisOutput) ToBasisPtrOutputWithContext(ctx context.Context) BasisPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Basis) *Basis {
		return &v
	}).(BasisPtrOutput)
}

// Immutable. The fingerprint of the base image.
func (o BasisOutput) Fingerprint() FingerprintOutput {
	return o.ApplyT(func(v Basis) Fingerprint { return v.Fingerprint }).(FingerprintOutput)
}

// Immutable. The resource_url for the resource representing the basis of associated occurrence images.
func (o BasisOutput) ResourceUrl() pulumi.StringOutput {
	return o.ApplyT(func(v Basis) string { return v.ResourceUrl }).(pulumi.StringOutput)
}

type BasisPtrOutput struct{ *pulumi.OutputState }

func (BasisPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Basis)(nil)).Elem()
}

func (o BasisPtrOutput) ToBasisPtrOutput() BasisPtrOutput {
	return o
}

func (o BasisPtrOutput) ToBasisPtrOutputWithContext(ctx context.Context) BasisPtrOutput {
	return o
}

func (o BasisPtrOutput) Elem() BasisOutput {
	return o.ApplyT(func(v *Basis) Basis {
		if v != nil {
			return *v
		}
		var ret Basis
		return ret
	}).(BasisOutput)
}

// Immutable. The fingerprint of the base image.
func (o BasisPtrOutput) Fingerprint() FingerprintPtrOutput {
	return o.ApplyT(func(v *Basis) *Fingerprint {
		if v == nil {
			return nil
		}
		return &v.Fingerprint
	}).(FingerprintPtrOutput)
}

// Immutable. The resource_url for the resource representing the basis of associated occurrence images.
func (o BasisPtrOutput) ResourceUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Basis) *string {
		if v == nil {
			return nil
		}
		return &v.ResourceUrl
	}).(pulumi.StringPtrOutput)
}

// Basis describes the base image portion (Note) of the DockerImage relationship. Linked occurrences are derived from this or an equivalent image via: FROM Or an equivalent reference, e.g. a tag of the resource_url.
type BasisResponse struct {
	// Immutable. The fingerprint of the base image.
	Fingerprint FingerprintResponse `pulumi:"fingerprint"`
	// Immutable. The resource_url for the resource representing the basis of associated occurrence images.
	ResourceUrl string `pulumi:"resourceUrl"`
}

// Basis describes the base image portion (Note) of the DockerImage relationship. Linked occurrences are derived from this or an equivalent image via: FROM Or an equivalent reference, e.g. a tag of the resource_url.
type BasisResponseOutput struct{ *pulumi.OutputState }

func (BasisResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BasisResponse)(nil)).Elem()
}

func (o BasisResponseOutput) ToBasisResponseOutput() BasisResponseOutput {
	return o
}

func (o BasisResponseOutput) ToBasisResponseOutputWithContext(ctx context.Context) BasisResponseOutput {
	return o
}

// Immutable. The fingerprint of the base image.
func (o BasisResponseOutput) Fingerprint() FingerprintResponseOutput {
	return o.ApplyT(func(v BasisResponse) FingerprintResponse { return v.Fingerprint }).(FingerprintResponseOutput)
}

// Immutable. The resource_url for the resource representing the basis of associated occurrence images.
func (o BasisResponseOutput) ResourceUrl() pulumi.StringOutput {
	return o.ApplyT(func(v BasisResponse) string { return v.ResourceUrl }).(pulumi.StringOutput)
}

// Associates `members`, or principals, with a `role`.
type Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//	BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates `members`, or principals, with a `role`.
type BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//	BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingResponse struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprResponse `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role string `pulumi:"role"`
}

// Associates `members`, or principals, with a `role`.
type BindingResponseOutput struct{ *pulumi.OutputState }

func (BindingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingResponse)(nil)).Elem()
}

func (o BindingResponseOutput) ToBindingResponseOutput() BindingResponseOutput {
	return o
}

func (o BindingResponseOutput) ToBindingResponseOutputWithContext(ctx context.Context) BindingResponseOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingResponseOutput) Condition() ExprResponseOutput {
	return o.ApplyT(func(v BindingResponse) ExprResponse { return v.Condition }).(ExprResponseOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
func (o BindingResponseOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BindingResponse) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingResponseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v BindingResponse) string { return v.Role }).(pulumi.StringOutput)
}

type BindingResponseArrayOutput struct{ *pulumi.OutputState }

func (BindingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingResponse)(nil)).Elem()
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutput() BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutputWithContext(ctx context.Context) BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) Index(i pulumi.IntInput) BindingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BindingResponse {
		return vs[0].([]BindingResponse)[vs[1].(int)]
	}).(BindingResponseOutput)
}

// Note holding the version of the provider's builder and the signature of the provenance message in the build details occurrence.
type Build struct {
	// Immutable. Version of the builder which produced this build.
	BuilderVersion string `pulumi:"builderVersion"`
	// Signature of the build in occurrences pointing to this build note containing build details.
	Signature *BuildSignature `pulumi:"signature"`
}

// BuildInput is an input type that accepts BuildArgs and BuildOutput values.
// You can construct a concrete instance of `BuildInput` via:
//
//	BuildArgs{...}
type BuildInput interface {
	pulumi.Input

	ToBuildOutput() BuildOutput
	ToBuildOutputWithContext(context.Context) BuildOutput
}

// Note holding the version of the provider's builder and the signature of the provenance message in the build details occurrence.
type BuildArgs struct {
	// Immutable. Version of the builder which produced this build.
	BuilderVersion pulumi.StringInput `pulumi:"builderVersion"`
	// Signature of the build in occurrences pointing to this build note containing build details.
	Signature BuildSignaturePtrInput `pulumi:"signature"`
}

func (BuildArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Build)(nil)).Elem()
}

func (i BuildArgs) ToBuildOutput() BuildOutput {
	return i.ToBuildOutputWithContext(context.Background())
}

func (i BuildArgs) ToBuildOutputWithContext(ctx context.Context) BuildOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildOutput)
}

func (i BuildArgs) ToBuildPtrOutput() BuildPtrOutput {
	return i.ToBuildPtrOutputWithContext(context.Background())
}

func (i BuildArgs) ToBuildPtrOutputWithContext(ctx context.Context) BuildPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildOutput).ToBuildPtrOutputWithContext(ctx)
}

// BuildPtrInput is an input type that accepts BuildArgs, BuildPtr and BuildPtrOutput values.
// You can construct a concrete instance of `BuildPtrInput` via:
//
//	        BuildArgs{...}
//
//	or:
//
//	        nil
type BuildPtrInput interface {
	pulumi.Input

	ToBuildPtrOutput() BuildPtrOutput
	ToBuildPtrOutputWithContext(context.Context) BuildPtrOutput
}

type buildPtrType BuildArgs

func BuildPtr(v *BuildArgs) BuildPtrInput {
	return (*buildPtrType)(v)
}

func (*buildPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Build)(nil)).Elem()
}

func (i *buildPtrType) ToBuildPtrOutput() BuildPtrOutput {
	return i.ToBuildPtrOutputWithContext(context.Background())
}

func (i *buildPtrType) ToBuildPtrOutputWithContext(ctx context.Context) BuildPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildPtrOutput)
}

// Note holding the version of the provider's builder and the signature of the provenance message in the build details occurrence.
type BuildOutput struct{ *pulumi.OutputState }

func (BuildOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Build)(nil)).Elem()
}

func (o BuildOutput) ToBuildOutput() BuildOutput {
	return o
}

func (o BuildOutput) ToBuildOutputWithContext(ctx context.Context) BuildOutput {
	return o
}

func (o BuildOutput) ToBuildPtrOutput() BuildPtrOutput {
	return o.ToBuildPtrOutputWithContext(context.Background())
}

func (o BuildOutput) ToBuildPtrOutputWithContext(ctx context.Context) BuildPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Build) *Build {
		return &v
	}).(BuildPtrOutput)
}

// Immutable. Version of the builder which produced this build.
func (o BuildOutput) BuilderVersion() pulumi.StringOutput {
	return o.ApplyT(func(v Build) string { return v.BuilderVersion }).(pulumi.StringOutput)
}

// Signature of the build in occurrences pointing to this build note containing build details.
func (o BuildOutput) Signature() BuildSignaturePtrOutput {
	return o.ApplyT(func(v Build) *BuildSignature { return v.Signature }).(BuildSignaturePtrOutput)
}

type BuildPtrOutput struct{ *pulumi.OutputState }

func (BuildPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Build)(nil)).Elem()
}

func (o BuildPtrOutput) ToBuildPtrOutput() BuildPtrOutput {
	return o
}

func (o BuildPtrOutput) ToBuildPtrOutputWithContext(ctx context.Context) BuildPtrOutput {
	return o
}

func (o BuildPtrOutput) Elem() BuildOutput {
	return o.ApplyT(func(v *Build) Build {
		if v != nil {
			return *v
		}
		var ret Build
		return ret
	}).(BuildOutput)
}

// Immutable. Version of the builder which produced this build.
func (o BuildPtrOutput) BuilderVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Build) *string {
		if v == nil {
			return nil
		}
		return &v.BuilderVersion
	}).(pulumi.StringPtrOutput)
}

// Signature of the build in occurrences pointing to this build note containing build details.
func (o BuildPtrOutput) Signature() BuildSignaturePtrOutput {
	return o.ApplyT(func(v *Build) *BuildSignature {
		if v == nil {
			return nil
		}
		return v.Signature
	}).(BuildSignaturePtrOutput)
}

type BuildDefinition struct {
	BuildType            *string                `pulumi:"buildType"`
	ExternalParameters   map[string]interface{} `pulumi:"externalParameters"`
	InternalParameters   map[string]interface{} `pulumi:"internalParameters"`
	ResolvedDependencies []ResourceDescriptor   `pulumi:"resolvedDependencies"`
}

// BuildDefinitionInput is an input type that accepts BuildDefinitionArgs and BuildDefinitionOutput values.
// You can construct a concrete instance of `BuildDefinitionInput` via:
//
//	BuildDefinitionArgs{...}
type BuildDefinitionInput interface {
	pulumi.Input

	ToBuildDefinitionOutput() BuildDefinitionOutput
	ToBuildDefinitionOutputWithContext(context.Context) BuildDefinitionOutput
}

type BuildDefinitionArgs struct {
	BuildType            pulumi.StringPtrInput        `pulumi:"buildType"`
	ExternalParameters   pulumi.MapInput              `pulumi:"externalParameters"`
	InternalParameters   pulumi.MapInput              `pulumi:"internalParameters"`
	ResolvedDependencies ResourceDescriptorArrayInput `pulumi:"resolvedDependencies"`
}

func (BuildDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildDefinition)(nil)).Elem()
}

func (i BuildDefinitionArgs) ToBuildDefinitionOutput() BuildDefinitionOutput {
	return i.ToBuildDefinitionOutputWithContext(context.Background())
}

func (i BuildDefinitionArgs) ToBuildDefinitionOutputWithContext(ctx context.Context) BuildDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildDefinitionOutput)
}

func (i BuildDefinitionArgs) ToBuildDefinitionPtrOutput() BuildDefinitionPtrOutput {
	return i.ToBuildDefinitionPtrOutputWithContext(context.Background())
}

func (i BuildDefinitionArgs) ToBuildDefinitionPtrOutputWithContext(ctx context.Context) BuildDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildDefinitionOutput).ToBuildDefinitionPtrOutputWithContext(ctx)
}

// BuildDefinitionPtrInput is an input type that accepts BuildDefinitionArgs, BuildDefinitionPtr and BuildDefinitionPtrOutput values.
// You can construct a concrete instance of `BuildDefinitionPtrInput` via:
//
//	        BuildDefinitionArgs{...}
//
//	or:
//
//	        nil
type BuildDefinitionPtrInput interface {
	pulumi.Input

	ToBuildDefinitionPtrOutput() BuildDefinitionPtrOutput
	ToBuildDefinitionPtrOutputWithContext(context.Context) BuildDefinitionPtrOutput
}

type buildDefinitionPtrType BuildDefinitionArgs

func BuildDefinitionPtr(v *BuildDefinitionArgs) BuildDefinitionPtrInput {
	return (*buildDefinitionPtrType)(v)
}

func (*buildDefinitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildDefinition)(nil)).Elem()
}

func (i *buildDefinitionPtrType) ToBuildDefinitionPtrOutput() BuildDefinitionPtrOutput {
	return i.ToBuildDefinitionPtrOutputWithContext(context.Background())
}

func (i *buildDefinitionPtrType) ToBuildDefinitionPtrOutputWithContext(ctx context.Context) BuildDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildDefinitionPtrOutput)
}

type BuildDefinitionOutput struct{ *pulumi.OutputState }

func (BuildDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildDefinition)(nil)).Elem()
}

func (o BuildDefinitionOutput) ToBuildDefinitionOutput() BuildDefinitionOutput {
	return o
}

func (o BuildDefinitionOutput) ToBuildDefinitionOutputWithContext(ctx context.Context) BuildDefinitionOutput {
	return o
}

func (o BuildDefinitionOutput) ToBuildDefinitionPtrOutput() BuildDefinitionPtrOutput {
	return o.ToBuildDefinitionPtrOutputWithContext(context.Background())
}

func (o BuildDefinitionOutput) ToBuildDefinitionPtrOutputWithContext(ctx context.Context) BuildDefinitionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BuildDefinition) *BuildDefinition {
		return &v
	}).(BuildDefinitionPtrOutput)
}

func (o BuildDefinitionOutput) BuildType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildDefinition) *string { return v.BuildType }).(pulumi.StringPtrOutput)
}

func (o BuildDefinitionOutput) ExternalParameters() pulumi.MapOutput {
	return o.ApplyT(func(v BuildDefinition) map[string]interface{} { return v.ExternalParameters }).(pulumi.MapOutput)
}

func (o BuildDefinitionOutput) InternalParameters() pulumi.MapOutput {
	return o.ApplyT(func(v BuildDefinition) map[string]interface{} { return v.InternalParameters }).(pulumi.MapOutput)
}

func (o BuildDefinitionOutput) ResolvedDependencies() ResourceDescriptorArrayOutput {
	return o.ApplyT(func(v BuildDefinition) []ResourceDescriptor { return v.ResolvedDependencies }).(ResourceDescriptorArrayOutput)
}

type BuildDefinitionPtrOutput struct{ *pulumi.OutputState }

func (BuildDefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildDefinition)(nil)).Elem()
}

func (o BuildDefinitionPtrOutput) ToBuildDefinitionPtrOutput() BuildDefinitionPtrOutput {
	return o
}

func (o BuildDefinitionPtrOutput) ToBuildDefinitionPtrOutputWithContext(ctx context.Context) BuildDefinitionPtrOutput {
	return o
}

func (o BuildDefinitionPtrOutput) Elem() BuildDefinitionOutput {
	return o.ApplyT(func(v *BuildDefinition) BuildDefinition {
		if v != nil {
			return *v
		}
		var ret BuildDefinition
		return ret
	}).(BuildDefinitionOutput)
}

func (o BuildDefinitionPtrOutput) BuildType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildDefinition) *string {
		if v == nil {
			return nil
		}
		return v.BuildType
	}).(pulumi.StringPtrOutput)
}

func (o BuildDefinitionPtrOutput) ExternalParameters() pulumi.MapOutput {
	return o.ApplyT(func(v *BuildDefinition) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.ExternalParameters
	}).(pulumi.MapOutput)
}

func (o BuildDefinitionPtrOutput) InternalParameters() pulumi.MapOutput {
	return o.ApplyT(func(v *BuildDefinition) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.InternalParameters
	}).(pulumi.MapOutput)
}

func (o BuildDefinitionPtrOutput) ResolvedDependencies() ResourceDescriptorArrayOutput {
	return o.ApplyT(func(v *BuildDefinition) []ResourceDescriptor {
		if v == nil {
			return nil
		}
		return v.ResolvedDependencies
	}).(ResourceDescriptorArrayOutput)
}

type BuildDefinitionResponse struct {
	BuildType            string                       `pulumi:"buildType"`
	ExternalParameters   map[string]interface{}       `pulumi:"externalParameters"`
	InternalParameters   map[string]interface{}       `pulumi:"internalParameters"`
	ResolvedDependencies []ResourceDescriptorResponse `pulumi:"resolvedDependencies"`
}

type BuildDefinitionResponseOutput struct{ *pulumi.OutputState }

func (BuildDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildDefinitionResponse)(nil)).Elem()
}

func (o BuildDefinitionResponseOutput) ToBuildDefinitionResponseOutput() BuildDefinitionResponseOutput {
	return o
}

func (o BuildDefinitionResponseOutput) ToBuildDefinitionResponseOutputWithContext(ctx context.Context) BuildDefinitionResponseOutput {
	return o
}

func (o BuildDefinitionResponseOutput) BuildType() pulumi.StringOutput {
	return o.ApplyT(func(v BuildDefinitionResponse) string { return v.BuildType }).(pulumi.StringOutput)
}

func (o BuildDefinitionResponseOutput) ExternalParameters() pulumi.MapOutput {
	return o.ApplyT(func(v BuildDefinitionResponse) map[string]interface{} { return v.ExternalParameters }).(pulumi.MapOutput)
}

func (o BuildDefinitionResponseOutput) InternalParameters() pulumi.MapOutput {
	return o.ApplyT(func(v BuildDefinitionResponse) map[string]interface{} { return v.InternalParameters }).(pulumi.MapOutput)
}

func (o BuildDefinitionResponseOutput) ResolvedDependencies() ResourceDescriptorResponseArrayOutput {
	return o.ApplyT(func(v BuildDefinitionResponse) []ResourceDescriptorResponse { return v.ResolvedDependencies }).(ResourceDescriptorResponseArrayOutput)
}

type BuildMetadata struct {
	FinishedOn   *string `pulumi:"finishedOn"`
	InvocationId *string `pulumi:"invocationId"`
	StartedOn    *string `pulumi:"startedOn"`
}

// BuildMetadataInput is an input type that accepts BuildMetadataArgs and BuildMetadataOutput values.
// You can construct a concrete instance of `BuildMetadataInput` via:
//
//	BuildMetadataArgs{...}
type BuildMetadataInput interface {
	pulumi.Input

	ToBuildMetadataOutput() BuildMetadataOutput
	ToBuildMetadataOutputWithContext(context.Context) BuildMetadataOutput
}

type BuildMetadataArgs struct {
	FinishedOn   pulumi.StringPtrInput `pulumi:"finishedOn"`
	InvocationId pulumi.StringPtrInput `pulumi:"invocationId"`
	StartedOn    pulumi.StringPtrInput `pulumi:"startedOn"`
}

func (BuildMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildMetadata)(nil)).Elem()
}

func (i BuildMetadataArgs) ToBuildMetadataOutput() BuildMetadataOutput {
	return i.ToBuildMetadataOutputWithContext(context.Background())
}

func (i BuildMetadataArgs) ToBuildMetadataOutputWithContext(ctx context.Context) BuildMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildMetadataOutput)
}

func (i BuildMetadataArgs) ToBuildMetadataPtrOutput() BuildMetadataPtrOutput {
	return i.ToBuildMetadataPtrOutputWithContext(context.Background())
}

func (i BuildMetadataArgs) ToBuildMetadataPtrOutputWithContext(ctx context.Context) BuildMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildMetadataOutput).ToBuildMetadataPtrOutputWithContext(ctx)
}

// BuildMetadataPtrInput is an input type that accepts BuildMetadataArgs, BuildMetadataPtr and BuildMetadataPtrOutput values.
// You can construct a concrete instance of `BuildMetadataPtrInput` via:
//
//	        BuildMetadataArgs{...}
//
//	or:
//
//	        nil
type BuildMetadataPtrInput interface {
	pulumi.Input

	ToBuildMetadataPtrOutput() BuildMetadataPtrOutput
	ToBuildMetadataPtrOutputWithContext(context.Context) BuildMetadataPtrOutput
}

type buildMetadataPtrType BuildMetadataArgs

func BuildMetadataPtr(v *BuildMetadataArgs) BuildMetadataPtrInput {
	return (*buildMetadataPtrType)(v)
}

func (*buildMetadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildMetadata)(nil)).Elem()
}

func (i *buildMetadataPtrType) ToBuildMetadataPtrOutput() BuildMetadataPtrOutput {
	return i.ToBuildMetadataPtrOutputWithContext(context.Background())
}

func (i *buildMetadataPtrType) ToBuildMetadataPtrOutputWithContext(ctx context.Context) BuildMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildMetadataPtrOutput)
}

type BuildMetadataOutput struct{ *pulumi.OutputState }

func (BuildMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildMetadata)(nil)).Elem()
}

func (o BuildMetadataOutput) ToBuildMetadataOutput() BuildMetadataOutput {
	return o
}

func (o BuildMetadataOutput) ToBuildMetadataOutputWithContext(ctx context.Context) BuildMetadataOutput {
	return o
}

func (o BuildMetadataOutput) ToBuildMetadataPtrOutput() BuildMetadataPtrOutput {
	return o.ToBuildMetadataPtrOutputWithContext(context.Background())
}

func (o BuildMetadataOutput) ToBuildMetadataPtrOutputWithContext(ctx context.Context) BuildMetadataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BuildMetadata) *BuildMetadata {
		return &v
	}).(BuildMetadataPtrOutput)
}

func (o BuildMetadataOutput) FinishedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildMetadata) *string { return v.FinishedOn }).(pulumi.StringPtrOutput)
}

func (o BuildMetadataOutput) InvocationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildMetadata) *string { return v.InvocationId }).(pulumi.StringPtrOutput)
}

func (o BuildMetadataOutput) StartedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildMetadata) *string { return v.StartedOn }).(pulumi.StringPtrOutput)
}

type BuildMetadataPtrOutput struct{ *pulumi.OutputState }

func (BuildMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildMetadata)(nil)).Elem()
}

func (o BuildMetadataPtrOutput) ToBuildMetadataPtrOutput() BuildMetadataPtrOutput {
	return o
}

func (o BuildMetadataPtrOutput) ToBuildMetadataPtrOutputWithContext(ctx context.Context) BuildMetadataPtrOutput {
	return o
}

func (o BuildMetadataPtrOutput) Elem() BuildMetadataOutput {
	return o.ApplyT(func(v *BuildMetadata) BuildMetadata {
		if v != nil {
			return *v
		}
		var ret BuildMetadata
		return ret
	}).(BuildMetadataOutput)
}

func (o BuildMetadataPtrOutput) FinishedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildMetadata) *string {
		if v == nil {
			return nil
		}
		return v.FinishedOn
	}).(pulumi.StringPtrOutput)
}

func (o BuildMetadataPtrOutput) InvocationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildMetadata) *string {
		if v == nil {
			return nil
		}
		return v.InvocationId
	}).(pulumi.StringPtrOutput)
}

func (o BuildMetadataPtrOutput) StartedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildMetadata) *string {
		if v == nil {
			return nil
		}
		return v.StartedOn
	}).(pulumi.StringPtrOutput)
}

type BuildMetadataResponse struct {
	FinishedOn   string `pulumi:"finishedOn"`
	InvocationId string `pulumi:"invocationId"`
	StartedOn    string `pulumi:"startedOn"`
}

type BuildMetadataResponseOutput struct{ *pulumi.OutputState }

func (BuildMetadataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildMetadataResponse)(nil)).Elem()
}

func (o BuildMetadataResponseOutput) ToBuildMetadataResponseOutput() BuildMetadataResponseOutput {
	return o
}

func (o BuildMetadataResponseOutput) ToBuildMetadataResponseOutputWithContext(ctx context.Context) BuildMetadataResponseOutput {
	return o
}

func (o BuildMetadataResponseOutput) FinishedOn() pulumi.StringOutput {
	return o.ApplyT(func(v BuildMetadataResponse) string { return v.FinishedOn }).(pulumi.StringOutput)
}

func (o BuildMetadataResponseOutput) InvocationId() pulumi.StringOutput {
	return o.ApplyT(func(v BuildMetadataResponse) string { return v.InvocationId }).(pulumi.StringOutput)
}

func (o BuildMetadataResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v BuildMetadataResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Provenance of a build. Contains all information needed to verify the full details about the build from source to completion.
type BuildProvenance struct {
	// Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.
	BuildOptions map[string]string `pulumi:"buildOptions"`
	// Version string of the builder at the time this build was executed.
	BuilderVersion *string `pulumi:"builderVersion"`
	// Output of the build.
	BuiltArtifacts []Artifact `pulumi:"builtArtifacts"`
	// Commands requested by the build.
	Commands []Command `pulumi:"commands"`
	// Time at which the build was created.
	CreateTime *string `pulumi:"createTime"`
	// E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.
	Creator *string `pulumi:"creator"`
	// Time at which execution of the build was finished.
	EndTime *string `pulumi:"endTime"`
	// Unique identifier of the build.
	Id string `pulumi:"id"`
	// URI where any logs for this provenance were written.
	LogsUri *string `pulumi:"logsUri"`
	// ID of the project.
	Project *string `pulumi:"project"`
	// Details of the Source input to the build.
	SourceProvenance *Source `pulumi:"sourceProvenance"`
	// Time at which execution of the build was started.
	StartTime *string `pulumi:"startTime"`
	// Trigger identifier if the build was triggered automatically; empty if not.
	TriggerId *string `pulumi:"triggerId"`
}

// BuildProvenanceInput is an input type that accepts BuildProvenanceArgs and BuildProvenanceOutput values.
// You can construct a concrete instance of `BuildProvenanceInput` via:
//
//	BuildProvenanceArgs{...}
type BuildProvenanceInput interface {
	pulumi.Input

	ToBuildProvenanceOutput() BuildProvenanceOutput
	ToBuildProvenanceOutputWithContext(context.Context) BuildProvenanceOutput
}

// Provenance of a build. Contains all information needed to verify the full details about the build from source to completion.
type BuildProvenanceArgs struct {
	// Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.
	BuildOptions pulumi.StringMapInput `pulumi:"buildOptions"`
	// Version string of the builder at the time this build was executed.
	BuilderVersion pulumi.StringPtrInput `pulumi:"builderVersion"`
	// Output of the build.
	BuiltArtifacts ArtifactArrayInput `pulumi:"builtArtifacts"`
	// Commands requested by the build.
	Commands CommandArrayInput `pulumi:"commands"`
	// Time at which the build was created.
	CreateTime pulumi.StringPtrInput `pulumi:"createTime"`
	// E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.
	Creator pulumi.StringPtrInput `pulumi:"creator"`
	// Time at which execution of the build was finished.
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// Unique identifier of the build.
	Id pulumi.StringInput `pulumi:"id"`
	// URI where any logs for this provenance were written.
	LogsUri pulumi.StringPtrInput `pulumi:"logsUri"`
	// ID of the project.
	Project pulumi.StringPtrInput `pulumi:"project"`
	// Details of the Source input to the build.
	SourceProvenance SourcePtrInput `pulumi:"sourceProvenance"`
	// Time at which execution of the build was started.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
	// Trigger identifier if the build was triggered automatically; empty if not.
	TriggerId pulumi.StringPtrInput `pulumi:"triggerId"`
}

func (BuildProvenanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildProvenance)(nil)).Elem()
}

func (i BuildProvenanceArgs) ToBuildProvenanceOutput() BuildProvenanceOutput {
	return i.ToBuildProvenanceOutputWithContext(context.Background())
}

func (i BuildProvenanceArgs) ToBuildProvenanceOutputWithContext(ctx context.Context) BuildProvenanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildProvenanceOutput)
}

func (i BuildProvenanceArgs) ToBuildProvenancePtrOutput() BuildProvenancePtrOutput {
	return i.ToBuildProvenancePtrOutputWithContext(context.Background())
}

func (i BuildProvenanceArgs) ToBuildProvenancePtrOutputWithContext(ctx context.Context) BuildProvenancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildProvenanceOutput).ToBuildProvenancePtrOutputWithContext(ctx)
}

// BuildProvenancePtrInput is an input type that accepts BuildProvenanceArgs, BuildProvenancePtr and BuildProvenancePtrOutput values.
// You can construct a concrete instance of `BuildProvenancePtrInput` via:
//
//	        BuildProvenanceArgs{...}
//
//	or:
//
//	        nil
type BuildProvenancePtrInput interface {
	pulumi.Input

	ToBuildProvenancePtrOutput() BuildProvenancePtrOutput
	ToBuildProvenancePtrOutputWithContext(context.Context) BuildProvenancePtrOutput
}

type buildProvenancePtrType BuildProvenanceArgs

func BuildProvenancePtr(v *BuildProvenanceArgs) BuildProvenancePtrInput {
	return (*buildProvenancePtrType)(v)
}

func (*buildProvenancePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildProvenance)(nil)).Elem()
}

func (i *buildProvenancePtrType) ToBuildProvenancePtrOutput() BuildProvenancePtrOutput {
	return i.ToBuildProvenancePtrOutputWithContext(context.Background())
}

func (i *buildProvenancePtrType) ToBuildProvenancePtrOutputWithContext(ctx context.Context) BuildProvenancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildProvenancePtrOutput)
}

// Provenance of a build. Contains all information needed to verify the full details about the build from source to completion.
type BuildProvenanceOutput struct{ *pulumi.OutputState }

func (BuildProvenanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildProvenance)(nil)).Elem()
}

func (o BuildProvenanceOutput) ToBuildProvenanceOutput() BuildProvenanceOutput {
	return o
}

func (o BuildProvenanceOutput) ToBuildProvenanceOutputWithContext(ctx context.Context) BuildProvenanceOutput {
	return o
}

func (o BuildProvenanceOutput) ToBuildProvenancePtrOutput() BuildProvenancePtrOutput {
	return o.ToBuildProvenancePtrOutputWithContext(context.Background())
}

func (o BuildProvenanceOutput) ToBuildProvenancePtrOutputWithContext(ctx context.Context) BuildProvenancePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BuildProvenance) *BuildProvenance {
		return &v
	}).(BuildProvenancePtrOutput)
}

// Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.
func (o BuildProvenanceOutput) BuildOptions() pulumi.StringMapOutput {
	return o.ApplyT(func(v BuildProvenance) map[string]string { return v.BuildOptions }).(pulumi.StringMapOutput)
}

// Version string of the builder at the time this build was executed.
func (o BuildProvenanceOutput) BuilderVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildProvenance) *string { return v.BuilderVersion }).(pulumi.StringPtrOutput)
}

// Output of the build.
func (o BuildProvenanceOutput) BuiltArtifacts() ArtifactArrayOutput {
	return o.ApplyT(func(v BuildProvenance) []Artifact { return v.BuiltArtifacts }).(ArtifactArrayOutput)
}

// Commands requested by the build.
func (o BuildProvenanceOutput) Commands() CommandArrayOutput {
	return o.ApplyT(func(v BuildProvenance) []Command { return v.Commands }).(CommandArrayOutput)
}

// Time at which the build was created.
func (o BuildProvenanceOutput) CreateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildProvenance) *string { return v.CreateTime }).(pulumi.StringPtrOutput)
}

// E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.
func (o BuildProvenanceOutput) Creator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildProvenance) *string { return v.Creator }).(pulumi.StringPtrOutput)
}

// Time at which execution of the build was finished.
func (o BuildProvenanceOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildProvenance) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// Unique identifier of the build.
func (o BuildProvenanceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v BuildProvenance) string { return v.Id }).(pulumi.StringOutput)
}

// URI where any logs for this provenance were written.
func (o BuildProvenanceOutput) LogsUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildProvenance) *string { return v.LogsUri }).(pulumi.StringPtrOutput)
}

// ID of the project.
func (o BuildProvenanceOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildProvenance) *string { return v.Project }).(pulumi.StringPtrOutput)
}

// Details of the Source input to the build.
func (o BuildProvenanceOutput) SourceProvenance() SourcePtrOutput {
	return o.ApplyT(func(v BuildProvenance) *Source { return v.SourceProvenance }).(SourcePtrOutput)
}

// Time at which execution of the build was started.
func (o BuildProvenanceOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildProvenance) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// Trigger identifier if the build was triggered automatically; empty if not.
func (o BuildProvenanceOutput) TriggerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildProvenance) *string { return v.TriggerId }).(pulumi.StringPtrOutput)
}

type BuildProvenancePtrOutput struct{ *pulumi.OutputState }

func (BuildProvenancePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildProvenance)(nil)).Elem()
}

func (o BuildProvenancePtrOutput) ToBuildProvenancePtrOutput() BuildProvenancePtrOutput {
	return o
}

func (o BuildProvenancePtrOutput) ToBuildProvenancePtrOutputWithContext(ctx context.Context) BuildProvenancePtrOutput {
	return o
}

func (o BuildProvenancePtrOutput) Elem() BuildProvenanceOutput {
	return o.ApplyT(func(v *BuildProvenance) BuildProvenance {
		if v != nil {
			return *v
		}
		var ret BuildProvenance
		return ret
	}).(BuildProvenanceOutput)
}

// Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.
func (o BuildProvenancePtrOutput) BuildOptions() pulumi.StringMapOutput {
	return o.ApplyT(func(v *BuildProvenance) map[string]string {
		if v == nil {
			return nil
		}
		return v.BuildOptions
	}).(pulumi.StringMapOutput)
}

// Version string of the builder at the time this build was executed.
func (o BuildProvenancePtrOutput) BuilderVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildProvenance) *string {
		if v == nil {
			return nil
		}
		return v.BuilderVersion
	}).(pulumi.StringPtrOutput)
}

// Output of the build.
func (o BuildProvenancePtrOutput) BuiltArtifacts() ArtifactArrayOutput {
	return o.ApplyT(func(v *BuildProvenance) []Artifact {
		if v == nil {
			return nil
		}
		return v.BuiltArtifacts
	}).(ArtifactArrayOutput)
}

// Commands requested by the build.
func (o BuildProvenancePtrOutput) Commands() CommandArrayOutput {
	return o.ApplyT(func(v *BuildProvenance) []Command {
		if v == nil {
			return nil
		}
		return v.Commands
	}).(CommandArrayOutput)
}

// Time at which the build was created.
func (o BuildProvenancePtrOutput) CreateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildProvenance) *string {
		if v == nil {
			return nil
		}
		return v.CreateTime
	}).(pulumi.StringPtrOutput)
}

// E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.
func (o BuildProvenancePtrOutput) Creator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildProvenance) *string {
		if v == nil {
			return nil
		}
		return v.Creator
	}).(pulumi.StringPtrOutput)
}

// Time at which execution of the build was finished.
func (o BuildProvenancePtrOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildProvenance) *string {
		if v == nil {
			return nil
		}
		return v.EndTime
	}).(pulumi.StringPtrOutput)
}

// Unique identifier of the build.
func (o BuildProvenancePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildProvenance) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// URI where any logs for this provenance were written.
func (o BuildProvenancePtrOutput) LogsUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildProvenance) *string {
		if v == nil {
			return nil
		}
		return v.LogsUri
	}).(pulumi.StringPtrOutput)
}

// ID of the project.
func (o BuildProvenancePtrOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildProvenance) *string {
		if v == nil {
			return nil
		}
		return v.Project
	}).(pulumi.StringPtrOutput)
}

// Details of the Source input to the build.
func (o BuildProvenancePtrOutput) SourceProvenance() SourcePtrOutput {
	return o.ApplyT(func(v *BuildProvenance) *Source {
		if v == nil {
			return nil
		}
		return v.SourceProvenance
	}).(SourcePtrOutput)
}

// Time at which execution of the build was started.
func (o BuildProvenancePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildProvenance) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Trigger identifier if the build was triggered automatically; empty if not.
func (o BuildProvenancePtrOutput) TriggerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildProvenance) *string {
		if v == nil {
			return nil
		}
		return v.TriggerId
	}).(pulumi.StringPtrOutput)
}

// Provenance of a build. Contains all information needed to verify the full details about the build from source to completion.
type BuildProvenanceResponse struct {
	// Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.
	BuildOptions map[string]string `pulumi:"buildOptions"`
	// Version string of the builder at the time this build was executed.
	BuilderVersion string `pulumi:"builderVersion"`
	// Output of the build.
	BuiltArtifacts []ArtifactResponse `pulumi:"builtArtifacts"`
	// Commands requested by the build.
	Commands []CommandResponse `pulumi:"commands"`
	// Time at which the build was created.
	CreateTime string `pulumi:"createTime"`
	// E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.
	Creator string `pulumi:"creator"`
	// Time at which execution of the build was finished.
	EndTime string `pulumi:"endTime"`
	// URI where any logs for this provenance were written.
	LogsUri string `pulumi:"logsUri"`
	// ID of the project.
	Project string `pulumi:"project"`
	// Details of the Source input to the build.
	SourceProvenance SourceResponse `pulumi:"sourceProvenance"`
	// Time at which execution of the build was started.
	StartTime string `pulumi:"startTime"`
	// Trigger identifier if the build was triggered automatically; empty if not.
	TriggerId string `pulumi:"triggerId"`
}

// Provenance of a build. Contains all information needed to verify the full details about the build from source to completion.
type BuildProvenanceResponseOutput struct{ *pulumi.OutputState }

func (BuildProvenanceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildProvenanceResponse)(nil)).Elem()
}

func (o BuildProvenanceResponseOutput) ToBuildProvenanceResponseOutput() BuildProvenanceResponseOutput {
	return o
}

func (o BuildProvenanceResponseOutput) ToBuildProvenanceResponseOutputWithContext(ctx context.Context) BuildProvenanceResponseOutput {
	return o
}

// Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.
func (o BuildProvenanceResponseOutput) BuildOptions() pulumi.StringMapOutput {
	return o.ApplyT(func(v BuildProvenanceResponse) map[string]string { return v.BuildOptions }).(pulumi.StringMapOutput)
}

// Version string of the builder at the time this build was executed.
func (o BuildProvenanceResponseOutput) BuilderVersion() pulumi.StringOutput {
	return o.ApplyT(func(v BuildProvenanceResponse) string { return v.BuilderVersion }).(pulumi.StringOutput)
}

// Output of the build.
func (o BuildProvenanceResponseOutput) BuiltArtifacts() ArtifactResponseArrayOutput {
	return o.ApplyT(func(v BuildProvenanceResponse) []ArtifactResponse { return v.BuiltArtifacts }).(ArtifactResponseArrayOutput)
}

// Commands requested by the build.
func (o BuildProvenanceResponseOutput) Commands() CommandResponseArrayOutput {
	return o.ApplyT(func(v BuildProvenanceResponse) []CommandResponse { return v.Commands }).(CommandResponseArrayOutput)
}

// Time at which the build was created.
func (o BuildProvenanceResponseOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v BuildProvenanceResponse) string { return v.CreateTime }).(pulumi.StringOutput)
}

// E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.
func (o BuildProvenanceResponseOutput) Creator() pulumi.StringOutput {
	return o.ApplyT(func(v BuildProvenanceResponse) string { return v.Creator }).(pulumi.StringOutput)
}

// Time at which execution of the build was finished.
func (o BuildProvenanceResponseOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v BuildProvenanceResponse) string { return v.EndTime }).(pulumi.StringOutput)
}

// URI where any logs for this provenance were written.
func (o BuildProvenanceResponseOutput) LogsUri() pulumi.StringOutput {
	return o.ApplyT(func(v BuildProvenanceResponse) string { return v.LogsUri }).(pulumi.StringOutput)
}

// ID of the project.
func (o BuildProvenanceResponseOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v BuildProvenanceResponse) string { return v.Project }).(pulumi.StringOutput)
}

// Details of the Source input to the build.
func (o BuildProvenanceResponseOutput) SourceProvenance() SourceResponseOutput {
	return o.ApplyT(func(v BuildProvenanceResponse) SourceResponse { return v.SourceProvenance }).(SourceResponseOutput)
}

// Time at which execution of the build was started.
func (o BuildProvenanceResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v BuildProvenanceResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

// Trigger identifier if the build was triggered automatically; empty if not.
func (o BuildProvenanceResponseOutput) TriggerId() pulumi.StringOutput {
	return o.ApplyT(func(v BuildProvenanceResponse) string { return v.TriggerId }).(pulumi.StringOutput)
}

// Note holding the version of the provider's builder and the signature of the provenance message in the build details occurrence.
type BuildResponse struct {
	// Immutable. Version of the builder which produced this build.
	BuilderVersion string `pulumi:"builderVersion"`
	// Signature of the build in occurrences pointing to this build note containing build details.
	Signature BuildSignatureResponse `pulumi:"signature"`
}

// Note holding the version of the provider's builder and the signature of the provenance message in the build details occurrence.
type BuildResponseOutput struct{ *pulumi.OutputState }

func (BuildResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildResponse)(nil)).Elem()
}

func (o BuildResponseOutput) ToBuildResponseOutput() BuildResponseOutput {
	return o
}

func (o BuildResponseOutput) ToBuildResponseOutputWithContext(ctx context.Context) BuildResponseOutput {
	return o
}

// Immutable. Version of the builder which produced this build.
func (o BuildResponseOutput) BuilderVersion() pulumi.StringOutput {
	return o.ApplyT(func(v BuildResponse) string { return v.BuilderVersion }).(pulumi.StringOutput)
}

// Signature of the build in occurrences pointing to this build note containing build details.
func (o BuildResponseOutput) Signature() BuildSignatureResponseOutput {
	return o.ApplyT(func(v BuildResponse) BuildSignatureResponse { return v.Signature }).(BuildSignatureResponseOutput)
}

// Message encapsulating the signature of the verified build.
type BuildSignature struct {
	// An ID for the key used to sign. This could be either an ID for the key stored in `public_key` (such as the ID or fingerprint for a PGP key, or the CN for a cert), or a reference to an external key (such as a reference to a key in Cloud Key Management Service).
	KeyId *string `pulumi:"keyId"`
	// The type of the key, either stored in `public_key` or referenced in `key_id`.
	KeyType *BuildSignatureKeyType `pulumi:"keyType"`
	// Public key of the builder which can be used to verify that the related findings are valid and unchanged. If `key_type` is empty, this defaults to PEM encoded public keys. This field may be empty if `key_id` references an external key. For Cloud Build based signatures, this is a PEM encoded public key. To verify the Cloud Build signature, place the contents of this field into a file (public.pem). The signature field is base64-decoded into its binary representation in signature.bin, and the provenance bytes from `BuildDetails` are base64-decoded into a binary representation in signed.bin. OpenSSL can then verify the signature: `openssl sha256 -verify public.pem -signature signature.bin signed.bin`
	PublicKey *string `pulumi:"publicKey"`
	// Signature of the related `BuildProvenance`. In JSON, this is base-64 encoded.
	Signature string `pulumi:"signature"`
}

// BuildSignatureInput is an input type that accepts BuildSignatureArgs and BuildSignatureOutput values.
// You can construct a concrete instance of `BuildSignatureInput` via:
//
//	BuildSignatureArgs{...}
type BuildSignatureInput interface {
	pulumi.Input

	ToBuildSignatureOutput() BuildSignatureOutput
	ToBuildSignatureOutputWithContext(context.Context) BuildSignatureOutput
}

// Message encapsulating the signature of the verified build.
type BuildSignatureArgs struct {
	// An ID for the key used to sign. This could be either an ID for the key stored in `public_key` (such as the ID or fingerprint for a PGP key, or the CN for a cert), or a reference to an external key (such as a reference to a key in Cloud Key Management Service).
	KeyId pulumi.StringPtrInput `pulumi:"keyId"`
	// The type of the key, either stored in `public_key` or referenced in `key_id`.
	KeyType BuildSignatureKeyTypePtrInput `pulumi:"keyType"`
	// Public key of the builder which can be used to verify that the related findings are valid and unchanged. If `key_type` is empty, this defaults to PEM encoded public keys. This field may be empty if `key_id` references an external key. For Cloud Build based signatures, this is a PEM encoded public key. To verify the Cloud Build signature, place the contents of this field into a file (public.pem). The signature field is base64-decoded into its binary representation in signature.bin, and the provenance bytes from `BuildDetails` are base64-decoded into a binary representation in signed.bin. OpenSSL can then verify the signature: `openssl sha256 -verify public.pem -signature signature.bin signed.bin`
	PublicKey pulumi.StringPtrInput `pulumi:"publicKey"`
	// Signature of the related `BuildProvenance`. In JSON, this is base-64 encoded.
	Signature pulumi.StringInput `pulumi:"signature"`
}

func (BuildSignatureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildSignature)(nil)).Elem()
}

func (i BuildSignatureArgs) ToBuildSignatureOutput() BuildSignatureOutput {
	return i.ToBuildSignatureOutputWithContext(context.Background())
}

func (i BuildSignatureArgs) ToBuildSignatureOutputWithContext(ctx context.Context) BuildSignatureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildSignatureOutput)
}

func (i BuildSignatureArgs) ToBuildSignaturePtrOutput() BuildSignaturePtrOutput {
	return i.ToBuildSignaturePtrOutputWithContext(context.Background())
}

func (i BuildSignatureArgs) ToBuildSignaturePtrOutputWithContext(ctx context.Context) BuildSignaturePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildSignatureOutput).ToBuildSignaturePtrOutputWithContext(ctx)
}

// BuildSignaturePtrInput is an input type that accepts BuildSignatureArgs, BuildSignaturePtr and BuildSignaturePtrOutput values.
// You can construct a concrete instance of `BuildSignaturePtrInput` via:
//
//	        BuildSignatureArgs{...}
//
//	or:
//
//	        nil
type BuildSignaturePtrInput interface {
	pulumi.Input

	ToBuildSignaturePtrOutput() BuildSignaturePtrOutput
	ToBuildSignaturePtrOutputWithContext(context.Context) BuildSignaturePtrOutput
}

type buildSignaturePtrType BuildSignatureArgs

func BuildSignaturePtr(v *BuildSignatureArgs) BuildSignaturePtrInput {
	return (*buildSignaturePtrType)(v)
}

func (*buildSignaturePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildSignature)(nil)).Elem()
}

func (i *buildSignaturePtrType) ToBuildSignaturePtrOutput() BuildSignaturePtrOutput {
	return i.ToBuildSignaturePtrOutputWithContext(context.Background())
}

func (i *buildSignaturePtrType) ToBuildSignaturePtrOutputWithContext(ctx context.Context) BuildSignaturePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildSignaturePtrOutput)
}

// Message encapsulating the signature of the verified build.
type BuildSignatureOutput struct{ *pulumi.OutputState }

func (BuildSignatureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildSignature)(nil)).Elem()
}

func (o BuildSignatureOutput) ToBuildSignatureOutput() BuildSignatureOutput {
	return o
}

func (o BuildSignatureOutput) ToBuildSignatureOutputWithContext(ctx context.Context) BuildSignatureOutput {
	return o
}

func (o BuildSignatureOutput) ToBuildSignaturePtrOutput() BuildSignaturePtrOutput {
	return o.ToBuildSignaturePtrOutputWithContext(context.Background())
}

func (o BuildSignatureOutput) ToBuildSignaturePtrOutputWithContext(ctx context.Context) BuildSignaturePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BuildSignature) *BuildSignature {
		return &v
	}).(BuildSignaturePtrOutput)
}

// An ID for the key used to sign. This could be either an ID for the key stored in `public_key` (such as the ID or fingerprint for a PGP key, or the CN for a cert), or a reference to an external key (such as a reference to a key in Cloud Key Management Service).
func (o BuildSignatureOutput) KeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildSignature) *string { return v.KeyId }).(pulumi.StringPtrOutput)
}

// The type of the key, either stored in `public_key` or referenced in `key_id`.
func (o BuildSignatureOutput) KeyType() BuildSignatureKeyTypePtrOutput {
	return o.ApplyT(func(v BuildSignature) *BuildSignatureKeyType { return v.KeyType }).(BuildSignatureKeyTypePtrOutput)
}

// Public key of the builder which can be used to verify that the related findings are valid and unchanged. If `key_type` is empty, this defaults to PEM encoded public keys. This field may be empty if `key_id` references an external key. For Cloud Build based signatures, this is a PEM encoded public key. To verify the Cloud Build signature, place the contents of this field into a file (public.pem). The signature field is base64-decoded into its binary representation in signature.bin, and the provenance bytes from `BuildDetails` are base64-decoded into a binary representation in signed.bin. OpenSSL can then verify the signature: `openssl sha256 -verify public.pem -signature signature.bin signed.bin`
func (o BuildSignatureOutput) PublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildSignature) *string { return v.PublicKey }).(pulumi.StringPtrOutput)
}

// Signature of the related `BuildProvenance`. In JSON, this is base-64 encoded.
func (o BuildSignatureOutput) Signature() pulumi.StringOutput {
	return o.ApplyT(func(v BuildSignature) string { return v.Signature }).(pulumi.StringOutput)
}

type BuildSignaturePtrOutput struct{ *pulumi.OutputState }

func (BuildSignaturePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildSignature)(nil)).Elem()
}

func (o BuildSignaturePtrOutput) ToBuildSignaturePtrOutput() BuildSignaturePtrOutput {
	return o
}

func (o BuildSignaturePtrOutput) ToBuildSignaturePtrOutputWithContext(ctx context.Context) BuildSignaturePtrOutput {
	return o
}

func (o BuildSignaturePtrOutput) Elem() BuildSignatureOutput {
	return o.ApplyT(func(v *BuildSignature) BuildSignature {
		if v != nil {
			return *v
		}
		var ret BuildSignature
		return ret
	}).(BuildSignatureOutput)
}

// An ID for the key used to sign. This could be either an ID for the key stored in `public_key` (such as the ID or fingerprint for a PGP key, or the CN for a cert), or a reference to an external key (such as a reference to a key in Cloud Key Management Service).
func (o BuildSignaturePtrOutput) KeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildSignature) *string {
		if v == nil {
			return nil
		}
		return v.KeyId
	}).(pulumi.StringPtrOutput)
}

// The type of the key, either stored in `public_key` or referenced in `key_id`.
func (o BuildSignaturePtrOutput) KeyType() BuildSignatureKeyTypePtrOutput {
	return o.ApplyT(func(v *BuildSignature) *BuildSignatureKeyType {
		if v == nil {
			return nil
		}
		return v.KeyType
	}).(BuildSignatureKeyTypePtrOutput)
}

// Public key of the builder which can be used to verify that the related findings are valid and unchanged. If `key_type` is empty, this defaults to PEM encoded public keys. This field may be empty if `key_id` references an external key. For Cloud Build based signatures, this is a PEM encoded public key. To verify the Cloud Build signature, place the contents of this field into a file (public.pem). The signature field is base64-decoded into its binary representation in signature.bin, and the provenance bytes from `BuildDetails` are base64-decoded into a binary representation in signed.bin. OpenSSL can then verify the signature: `openssl sha256 -verify public.pem -signature signature.bin signed.bin`
func (o BuildSignaturePtrOutput) PublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildSignature) *string {
		if v == nil {
			return nil
		}
		return v.PublicKey
	}).(pulumi.StringPtrOutput)
}

// Signature of the related `BuildProvenance`. In JSON, this is base-64 encoded.
func (o BuildSignaturePtrOutput) Signature() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildSignature) *string {
		if v == nil {
			return nil
		}
		return &v.Signature
	}).(pulumi.StringPtrOutput)
}

// Message encapsulating the signature of the verified build.
type BuildSignatureResponse struct {
	// An ID for the key used to sign. This could be either an ID for the key stored in `public_key` (such as the ID or fingerprint for a PGP key, or the CN for a cert), or a reference to an external key (such as a reference to a key in Cloud Key Management Service).
	KeyId string `pulumi:"keyId"`
	// The type of the key, either stored in `public_key` or referenced in `key_id`.
	KeyType string `pulumi:"keyType"`
	// Public key of the builder which can be used to verify that the related findings are valid and unchanged. If `key_type` is empty, this defaults to PEM encoded public keys. This field may be empty if `key_id` references an external key. For Cloud Build based signatures, this is a PEM encoded public key. To verify the Cloud Build signature, place the contents of this field into a file (public.pem). The signature field is base64-decoded into its binary representation in signature.bin, and the provenance bytes from `BuildDetails` are base64-decoded into a binary representation in signed.bin. OpenSSL can then verify the signature: `openssl sha256 -verify public.pem -signature signature.bin signed.bin`
	PublicKey string `pulumi:"publicKey"`
	// Signature of the related `BuildProvenance`. In JSON, this is base-64 encoded.
	Signature string `pulumi:"signature"`
}

// Message encapsulating the signature of the verified build.
type BuildSignatureResponseOutput struct{ *pulumi.OutputState }

func (BuildSignatureResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildSignatureResponse)(nil)).Elem()
}

func (o BuildSignatureResponseOutput) ToBuildSignatureResponseOutput() BuildSignatureResponseOutput {
	return o
}

func (o BuildSignatureResponseOutput) ToBuildSignatureResponseOutputWithContext(ctx context.Context) BuildSignatureResponseOutput {
	return o
}

// An ID for the key used to sign. This could be either an ID for the key stored in `public_key` (such as the ID or fingerprint for a PGP key, or the CN for a cert), or a reference to an external key (such as a reference to a key in Cloud Key Management Service).
func (o BuildSignatureResponseOutput) KeyId() pulumi.StringOutput {
	return o.ApplyT(func(v BuildSignatureResponse) string { return v.KeyId }).(pulumi.StringOutput)
}

// The type of the key, either stored in `public_key` or referenced in `key_id`.
func (o BuildSignatureResponseOutput) KeyType() pulumi.StringOutput {
	return o.ApplyT(func(v BuildSignatureResponse) string { return v.KeyType }).(pulumi.StringOutput)
}

// Public key of the builder which can be used to verify that the related findings are valid and unchanged. If `key_type` is empty, this defaults to PEM encoded public keys. This field may be empty if `key_id` references an external key. For Cloud Build based signatures, this is a PEM encoded public key. To verify the Cloud Build signature, place the contents of this field into a file (public.pem). The signature field is base64-decoded into its binary representation in signature.bin, and the provenance bytes from `BuildDetails` are base64-decoded into a binary representation in signed.bin. OpenSSL can then verify the signature: `openssl sha256 -verify public.pem -signature signature.bin signed.bin`
func (o BuildSignatureResponseOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v BuildSignatureResponse) string { return v.PublicKey }).(pulumi.StringOutput)
}

// Signature of the related `BuildProvenance`. In JSON, this is base-64 encoded.
func (o BuildSignatureResponseOutput) Signature() pulumi.StringOutput {
	return o.ApplyT(func(v BuildSignatureResponse) string { return v.Signature }).(pulumi.StringOutput)
}

// Defines an object for the byproducts field in in-toto links. The suggested fields are "stderr", "stdout", and "return-value".
type ByProducts struct {
	CustomValues map[string]string `pulumi:"customValues"`
}

// ByProductsInput is an input type that accepts ByProductsArgs and ByProductsOutput values.
// You can construct a concrete instance of `ByProductsInput` via:
//
//	ByProductsArgs{...}
type ByProductsInput interface {
	pulumi.Input

	ToByProductsOutput() ByProductsOutput
	ToByProductsOutputWithContext(context.Context) ByProductsOutput
}

// Defines an object for the byproducts field in in-toto links. The suggested fields are "stderr", "stdout", and "return-value".
type ByProductsArgs struct {
	CustomValues pulumi.StringMapInput `pulumi:"customValues"`
}

func (ByProductsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ByProducts)(nil)).Elem()
}

func (i ByProductsArgs) ToByProductsOutput() ByProductsOutput {
	return i.ToByProductsOutputWithContext(context.Background())
}

func (i ByProductsArgs) ToByProductsOutputWithContext(ctx context.Context) ByProductsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ByProductsOutput)
}

func (i ByProductsArgs) ToByProductsPtrOutput() ByProductsPtrOutput {
	return i.ToByProductsPtrOutputWithContext(context.Background())
}

func (i ByProductsArgs) ToByProductsPtrOutputWithContext(ctx context.Context) ByProductsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ByProductsOutput).ToByProductsPtrOutputWithContext(ctx)
}

// ByProductsPtrInput is an input type that accepts ByProductsArgs, ByProductsPtr and ByProductsPtrOutput values.
// You can construct a concrete instance of `ByProductsPtrInput` via:
//
//	        ByProductsArgs{...}
//
//	or:
//
//	        nil
type ByProductsPtrInput interface {
	pulumi.Input

	ToByProductsPtrOutput() ByProductsPtrOutput
	ToByProductsPtrOutputWithContext(context.Context) ByProductsPtrOutput
}

type byProductsPtrType ByProductsArgs

func ByProductsPtr(v *ByProductsArgs) ByProductsPtrInput {
	return (*byProductsPtrType)(v)
}

func (*byProductsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ByProducts)(nil)).Elem()
}

func (i *byProductsPtrType) ToByProductsPtrOutput() ByProductsPtrOutput {
	return i.ToByProductsPtrOutputWithContext(context.Background())
}

func (i *byProductsPtrType) ToByProductsPtrOutputWithContext(ctx context.Context) ByProductsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ByProductsPtrOutput)
}

// Defines an object for the byproducts field in in-toto links. The suggested fields are "stderr", "stdout", and "return-value".
type ByProductsOutput struct{ *pulumi.OutputState }

func (ByProductsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ByProducts)(nil)).Elem()
}

func (o ByProductsOutput) ToByProductsOutput() ByProductsOutput {
	return o
}

func (o ByProductsOutput) ToByProductsOutputWithContext(ctx context.Context) ByProductsOutput {
	return o
}

func (o ByProductsOutput) ToByProductsPtrOutput() ByProductsPtrOutput {
	return o.ToByProductsPtrOutputWithContext(context.Background())
}

func (o ByProductsOutput) ToByProductsPtrOutputWithContext(ctx context.Context) ByProductsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ByProducts) *ByProducts {
		return &v
	}).(ByProductsPtrOutput)
}

func (o ByProductsOutput) CustomValues() pulumi.StringMapOutput {
	return o.ApplyT(func(v ByProducts) map[string]string { return v.CustomValues }).(pulumi.StringMapOutput)
}

type ByProductsPtrOutput struct{ *pulumi.OutputState }

func (ByProductsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ByProducts)(nil)).Elem()
}

func (o ByProductsPtrOutput) ToByProductsPtrOutput() ByProductsPtrOutput {
	return o
}

func (o ByProductsPtrOutput) ToByProductsPtrOutputWithContext(ctx context.Context) ByProductsPtrOutput {
	return o
}

func (o ByProductsPtrOutput) Elem() ByProductsOutput {
	return o.ApplyT(func(v *ByProducts) ByProducts {
		if v != nil {
			return *v
		}
		var ret ByProducts
		return ret
	}).(ByProductsOutput)
}

func (o ByProductsPtrOutput) CustomValues() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ByProducts) map[string]string {
		if v == nil {
			return nil
		}
		return v.CustomValues
	}).(pulumi.StringMapOutput)
}

// Defines an object for the byproducts field in in-toto links. The suggested fields are "stderr", "stdout", and "return-value".
type ByProductsResponse struct {
	CustomValues map[string]string `pulumi:"customValues"`
}

// Defines an object for the byproducts field in in-toto links. The suggested fields are "stderr", "stdout", and "return-value".
type ByProductsResponseOutput struct{ *pulumi.OutputState }

func (ByProductsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ByProductsResponse)(nil)).Elem()
}

func (o ByProductsResponseOutput) ToByProductsResponseOutput() ByProductsResponseOutput {
	return o
}

func (o ByProductsResponseOutput) ToByProductsResponseOutputWithContext(ctx context.Context) ByProductsResponseOutput {
	return o
}

func (o ByProductsResponseOutput) CustomValues() pulumi.StringMapOutput {
	return o.ApplyT(func(v ByProductsResponse) map[string]string { return v.CustomValues }).(pulumi.StringMapOutput)
}

// Common Vulnerability Scoring System. This message is compatible with CVSS v2 and v3. For CVSS v2 details, see https://www.first.org/cvss/v2/guide CVSS v2 calculator: https://nvd.nist.gov/vuln-metrics/cvss/v2-calculator For CVSS v3 details, see https://www.first.org/cvss/specification-document CVSS v3 calculator: https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator
type CVSS struct {
	// Defined in CVSS v3, CVSS v2
	AttackComplexity *CVSSAttackComplexity `pulumi:"attackComplexity"`
	// Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments. Defined in CVSS v3, CVSS v2
	AttackVector *CVSSAttackVector `pulumi:"attackVector"`
	// Defined in CVSS v2
	Authentication *CVSSAuthentication `pulumi:"authentication"`
	// Defined in CVSS v3, CVSS v2
	AvailabilityImpact *CVSSAvailabilityImpact `pulumi:"availabilityImpact"`
	// The base score is a function of the base metric scores.
	BaseScore *float64 `pulumi:"baseScore"`
	// Defined in CVSS v3, CVSS v2
	ConfidentialityImpact *CVSSConfidentialityImpact `pulumi:"confidentialityImpact"`
	ExploitabilityScore   *float64                   `pulumi:"exploitabilityScore"`
	ImpactScore           *float64                   `pulumi:"impactScore"`
	// Defined in CVSS v3, CVSS v2
	IntegrityImpact *CVSSIntegrityImpact `pulumi:"integrityImpact"`
	// Defined in CVSS v3
	PrivilegesRequired *CVSSPrivilegesRequired `pulumi:"privilegesRequired"`
	// Defined in CVSS v3
	Scope *CVSSScope `pulumi:"scope"`
	// Defined in CVSS v3
	UserInteraction *CVSSUserInteraction `pulumi:"userInteraction"`
}

// CVSSInput is an input type that accepts CVSSArgs and CVSSOutput values.
// You can construct a concrete instance of `CVSSInput` via:
//
//	CVSSArgs{...}
type CVSSInput interface {
	pulumi.Input

	ToCVSSOutput() CVSSOutput
	ToCVSSOutputWithContext(context.Context) CVSSOutput
}

// Common Vulnerability Scoring System. This message is compatible with CVSS v2 and v3. For CVSS v2 details, see https://www.first.org/cvss/v2/guide CVSS v2 calculator: https://nvd.nist.gov/vuln-metrics/cvss/v2-calculator For CVSS v3 details, see https://www.first.org/cvss/specification-document CVSS v3 calculator: https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator
type CVSSArgs struct {
	// Defined in CVSS v3, CVSS v2
	AttackComplexity CVSSAttackComplexityPtrInput `pulumi:"attackComplexity"`
	// Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments. Defined in CVSS v3, CVSS v2
	AttackVector CVSSAttackVectorPtrInput `pulumi:"attackVector"`
	// Defined in CVSS v2
	Authentication CVSSAuthenticationPtrInput `pulumi:"authentication"`
	// Defined in CVSS v3, CVSS v2
	AvailabilityImpact CVSSAvailabilityImpactPtrInput `pulumi:"availabilityImpact"`
	// The base score is a function of the base metric scores.
	BaseScore pulumi.Float64PtrInput `pulumi:"baseScore"`
	// Defined in CVSS v3, CVSS v2
	ConfidentialityImpact CVSSConfidentialityImpactPtrInput `pulumi:"confidentialityImpact"`
	ExploitabilityScore   pulumi.Float64PtrInput            `pulumi:"exploitabilityScore"`
	ImpactScore           pulumi.Float64PtrInput            `pulumi:"impactScore"`
	// Defined in CVSS v3, CVSS v2
	IntegrityImpact CVSSIntegrityImpactPtrInput `pulumi:"integrityImpact"`
	// Defined in CVSS v3
	PrivilegesRequired CVSSPrivilegesRequiredPtrInput `pulumi:"privilegesRequired"`
	// Defined in CVSS v3
	Scope CVSSScopePtrInput `pulumi:"scope"`
	// Defined in CVSS v3
	UserInteraction CVSSUserInteractionPtrInput `pulumi:"userInteraction"`
}

func (CVSSArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CVSS)(nil)).Elem()
}

func (i CVSSArgs) ToCVSSOutput() CVSSOutput {
	return i.ToCVSSOutputWithContext(context.Background())
}

func (i CVSSArgs) ToCVSSOutputWithContext(ctx context.Context) CVSSOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CVSSOutput)
}

func (i CVSSArgs) ToCVSSPtrOutput() CVSSPtrOutput {
	return i.ToCVSSPtrOutputWithContext(context.Background())
}

func (i CVSSArgs) ToCVSSPtrOutputWithContext(ctx context.Context) CVSSPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CVSSOutput).ToCVSSPtrOutputWithContext(ctx)
}

// CVSSPtrInput is an input type that accepts CVSSArgs, CVSSPtr and CVSSPtrOutput values.
// You can construct a concrete instance of `CVSSPtrInput` via:
//
//	        CVSSArgs{...}
//
//	or:
//
//	        nil
type CVSSPtrInput interface {
	pulumi.Input

	ToCVSSPtrOutput() CVSSPtrOutput
	ToCVSSPtrOutputWithContext(context.Context) CVSSPtrOutput
}

type cvssPtrType CVSSArgs

func CVSSPtr(v *CVSSArgs) CVSSPtrInput {
	return (*cvssPtrType)(v)
}

func (*cvssPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CVSS)(nil)).Elem()
}

func (i *cvssPtrType) ToCVSSPtrOutput() CVSSPtrOutput {
	return i.ToCVSSPtrOutputWithContext(context.Background())
}

func (i *cvssPtrType) ToCVSSPtrOutputWithContext(ctx context.Context) CVSSPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CVSSPtrOutput)
}

// Common Vulnerability Scoring System. This message is compatible with CVSS v2 and v3. For CVSS v2 details, see https://www.first.org/cvss/v2/guide CVSS v2 calculator: https://nvd.nist.gov/vuln-metrics/cvss/v2-calculator For CVSS v3 details, see https://www.first.org/cvss/specification-document CVSS v3 calculator: https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator
type CVSSOutput struct{ *pulumi.OutputState }

func (CVSSOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CVSS)(nil)).Elem()
}

func (o CVSSOutput) ToCVSSOutput() CVSSOutput {
	return o
}

func (o CVSSOutput) ToCVSSOutputWithContext(ctx context.Context) CVSSOutput {
	return o
}

func (o CVSSOutput) ToCVSSPtrOutput() CVSSPtrOutput {
	return o.ToCVSSPtrOutputWithContext(context.Background())
}

func (o CVSSOutput) ToCVSSPtrOutputWithContext(ctx context.Context) CVSSPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CVSS) *CVSS {
		return &v
	}).(CVSSPtrOutput)
}

// Defined in CVSS v3, CVSS v2
func (o CVSSOutput) AttackComplexity() CVSSAttackComplexityPtrOutput {
	return o.ApplyT(func(v CVSS) *CVSSAttackComplexity { return v.AttackComplexity }).(CVSSAttackComplexityPtrOutput)
}

// Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments. Defined in CVSS v3, CVSS v2
func (o CVSSOutput) AttackVector() CVSSAttackVectorPtrOutput {
	return o.ApplyT(func(v CVSS) *CVSSAttackVector { return v.AttackVector }).(CVSSAttackVectorPtrOutput)
}

// Defined in CVSS v2
func (o CVSSOutput) Authentication() CVSSAuthenticationPtrOutput {
	return o.ApplyT(func(v CVSS) *CVSSAuthentication { return v.Authentication }).(CVSSAuthenticationPtrOutput)
}

// Defined in CVSS v3, CVSS v2
func (o CVSSOutput) AvailabilityImpact() CVSSAvailabilityImpactPtrOutput {
	return o.ApplyT(func(v CVSS) *CVSSAvailabilityImpact { return v.AvailabilityImpact }).(CVSSAvailabilityImpactPtrOutput)
}

// The base score is a function of the base metric scores.
func (o CVSSOutput) BaseScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v CVSS) *float64 { return v.BaseScore }).(pulumi.Float64PtrOutput)
}

// Defined in CVSS v3, CVSS v2
func (o CVSSOutput) ConfidentialityImpact() CVSSConfidentialityImpactPtrOutput {
	return o.ApplyT(func(v CVSS) *CVSSConfidentialityImpact { return v.ConfidentialityImpact }).(CVSSConfidentialityImpactPtrOutput)
}

func (o CVSSOutput) ExploitabilityScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v CVSS) *float64 { return v.ExploitabilityScore }).(pulumi.Float64PtrOutput)
}

func (o CVSSOutput) ImpactScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v CVSS) *float64 { return v.ImpactScore }).(pulumi.Float64PtrOutput)
}

// Defined in CVSS v3, CVSS v2
func (o CVSSOutput) IntegrityImpact() CVSSIntegrityImpactPtrOutput {
	return o.ApplyT(func(v CVSS) *CVSSIntegrityImpact { return v.IntegrityImpact }).(CVSSIntegrityImpactPtrOutput)
}

// Defined in CVSS v3
func (o CVSSOutput) PrivilegesRequired() CVSSPrivilegesRequiredPtrOutput {
	return o.ApplyT(func(v CVSS) *CVSSPrivilegesRequired { return v.PrivilegesRequired }).(CVSSPrivilegesRequiredPtrOutput)
}

// Defined in CVSS v3
func (o CVSSOutput) Scope() CVSSScopePtrOutput {
	return o.ApplyT(func(v CVSS) *CVSSScope { return v.Scope }).(CVSSScopePtrOutput)
}

// Defined in CVSS v3
func (o CVSSOutput) UserInteraction() CVSSUserInteractionPtrOutput {
	return o.ApplyT(func(v CVSS) *CVSSUserInteraction { return v.UserInteraction }).(CVSSUserInteractionPtrOutput)
}

type CVSSPtrOutput struct{ *pulumi.OutputState }

func (CVSSPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CVSS)(nil)).Elem()
}

func (o CVSSPtrOutput) ToCVSSPtrOutput() CVSSPtrOutput {
	return o
}

func (o CVSSPtrOutput) ToCVSSPtrOutputWithContext(ctx context.Context) CVSSPtrOutput {
	return o
}

func (o CVSSPtrOutput) Elem() CVSSOutput {
	return o.ApplyT(func(v *CVSS) CVSS {
		if v != nil {
			return *v
		}
		var ret CVSS
		return ret
	}).(CVSSOutput)
}

// Defined in CVSS v3, CVSS v2
func (o CVSSPtrOutput) AttackComplexity() CVSSAttackComplexityPtrOutput {
	return o.ApplyT(func(v *CVSS) *CVSSAttackComplexity {
		if v == nil {
			return nil
		}
		return v.AttackComplexity
	}).(CVSSAttackComplexityPtrOutput)
}

// Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments. Defined in CVSS v3, CVSS v2
func (o CVSSPtrOutput) AttackVector() CVSSAttackVectorPtrOutput {
	return o.ApplyT(func(v *CVSS) *CVSSAttackVector {
		if v == nil {
			return nil
		}
		return v.AttackVector
	}).(CVSSAttackVectorPtrOutput)
}

// Defined in CVSS v2
func (o CVSSPtrOutput) Authentication() CVSSAuthenticationPtrOutput {
	return o.ApplyT(func(v *CVSS) *CVSSAuthentication {
		if v == nil {
			return nil
		}
		return v.Authentication
	}).(CVSSAuthenticationPtrOutput)
}

// Defined in CVSS v3, CVSS v2
func (o CVSSPtrOutput) AvailabilityImpact() CVSSAvailabilityImpactPtrOutput {
	return o.ApplyT(func(v *CVSS) *CVSSAvailabilityImpact {
		if v == nil {
			return nil
		}
		return v.AvailabilityImpact
	}).(CVSSAvailabilityImpactPtrOutput)
}

// The base score is a function of the base metric scores.
func (o CVSSPtrOutput) BaseScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *CVSS) *float64 {
		if v == nil {
			return nil
		}
		return v.BaseScore
	}).(pulumi.Float64PtrOutput)
}

// Defined in CVSS v3, CVSS v2
func (o CVSSPtrOutput) ConfidentialityImpact() CVSSConfidentialityImpactPtrOutput {
	return o.ApplyT(func(v *CVSS) *CVSSConfidentialityImpact {
		if v == nil {
			return nil
		}
		return v.ConfidentialityImpact
	}).(CVSSConfidentialityImpactPtrOutput)
}

func (o CVSSPtrOutput) ExploitabilityScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *CVSS) *float64 {
		if v == nil {
			return nil
		}
		return v.ExploitabilityScore
	}).(pulumi.Float64PtrOutput)
}

func (o CVSSPtrOutput) ImpactScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *CVSS) *float64 {
		if v == nil {
			return nil
		}
		return v.ImpactScore
	}).(pulumi.Float64PtrOutput)
}

// Defined in CVSS v3, CVSS v2
func (o CVSSPtrOutput) IntegrityImpact() CVSSIntegrityImpactPtrOutput {
	return o.ApplyT(func(v *CVSS) *CVSSIntegrityImpact {
		if v == nil {
			return nil
		}
		return v.IntegrityImpact
	}).(CVSSIntegrityImpactPtrOutput)
}

// Defined in CVSS v3
func (o CVSSPtrOutput) PrivilegesRequired() CVSSPrivilegesRequiredPtrOutput {
	return o.ApplyT(func(v *CVSS) *CVSSPrivilegesRequired {
		if v == nil {
			return nil
		}
		return v.PrivilegesRequired
	}).(CVSSPrivilegesRequiredPtrOutput)
}

// Defined in CVSS v3
func (o CVSSPtrOutput) Scope() CVSSScopePtrOutput {
	return o.ApplyT(func(v *CVSS) *CVSSScope {
		if v == nil {
			return nil
		}
		return v.Scope
	}).(CVSSScopePtrOutput)
}

// Defined in CVSS v3
func (o CVSSPtrOutput) UserInteraction() CVSSUserInteractionPtrOutput {
	return o.ApplyT(func(v *CVSS) *CVSSUserInteraction {
		if v == nil {
			return nil
		}
		return v.UserInteraction
	}).(CVSSUserInteractionPtrOutput)
}

// Common Vulnerability Scoring System. This message is compatible with CVSS v2 and v3. For CVSS v2 details, see https://www.first.org/cvss/v2/guide CVSS v2 calculator: https://nvd.nist.gov/vuln-metrics/cvss/v2-calculator For CVSS v3 details, see https://www.first.org/cvss/specification-document CVSS v3 calculator: https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator
type CVSSResponse struct {
	// Defined in CVSS v3, CVSS v2
	AttackComplexity string `pulumi:"attackComplexity"`
	// Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments. Defined in CVSS v3, CVSS v2
	AttackVector string `pulumi:"attackVector"`
	// Defined in CVSS v2
	Authentication string `pulumi:"authentication"`
	// Defined in CVSS v3, CVSS v2
	AvailabilityImpact string `pulumi:"availabilityImpact"`
	// The base score is a function of the base metric scores.
	BaseScore float64 `pulumi:"baseScore"`
	// Defined in CVSS v3, CVSS v2
	ConfidentialityImpact string  `pulumi:"confidentialityImpact"`
	ExploitabilityScore   float64 `pulumi:"exploitabilityScore"`
	ImpactScore           float64 `pulumi:"impactScore"`
	// Defined in CVSS v3, CVSS v2
	IntegrityImpact string `pulumi:"integrityImpact"`
	// Defined in CVSS v3
	PrivilegesRequired string `pulumi:"privilegesRequired"`
	// Defined in CVSS v3
	Scope string `pulumi:"scope"`
	// Defined in CVSS v3
	UserInteraction string `pulumi:"userInteraction"`
}

// Common Vulnerability Scoring System. This message is compatible with CVSS v2 and v3. For CVSS v2 details, see https://www.first.org/cvss/v2/guide CVSS v2 calculator: https://nvd.nist.gov/vuln-metrics/cvss/v2-calculator For CVSS v3 details, see https://www.first.org/cvss/specification-document CVSS v3 calculator: https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator
type CVSSResponseOutput struct{ *pulumi.OutputState }

func (CVSSResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CVSSResponse)(nil)).Elem()
}

func (o CVSSResponseOutput) ToCVSSResponseOutput() CVSSResponseOutput {
	return o
}

func (o CVSSResponseOutput) ToCVSSResponseOutputWithContext(ctx context.Context) CVSSResponseOutput {
	return o
}

// Defined in CVSS v3, CVSS v2
func (o CVSSResponseOutput) AttackComplexity() pulumi.StringOutput {
	return o.ApplyT(func(v CVSSResponse) string { return v.AttackComplexity }).(pulumi.StringOutput)
}

// Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments. Defined in CVSS v3, CVSS v2
func (o CVSSResponseOutput) AttackVector() pulumi.StringOutput {
	return o.ApplyT(func(v CVSSResponse) string { return v.AttackVector }).(pulumi.StringOutput)
}

// Defined in CVSS v2
func (o CVSSResponseOutput) Authentication() pulumi.StringOutput {
	return o.ApplyT(func(v CVSSResponse) string { return v.Authentication }).(pulumi.StringOutput)
}

// Defined in CVSS v3, CVSS v2
func (o CVSSResponseOutput) AvailabilityImpact() pulumi.StringOutput {
	return o.ApplyT(func(v CVSSResponse) string { return v.AvailabilityImpact }).(pulumi.StringOutput)
}

// The base score is a function of the base metric scores.
func (o CVSSResponseOutput) BaseScore() pulumi.Float64Output {
	return o.ApplyT(func(v CVSSResponse) float64 { return v.BaseScore }).(pulumi.Float64Output)
}

// Defined in CVSS v3, CVSS v2
func (o CVSSResponseOutput) ConfidentialityImpact() pulumi.StringOutput {
	return o.ApplyT(func(v CVSSResponse) string { return v.ConfidentialityImpact }).(pulumi.StringOutput)
}

func (o CVSSResponseOutput) ExploitabilityScore() pulumi.Float64Output {
	return o.ApplyT(func(v CVSSResponse) float64 { return v.ExploitabilityScore }).(pulumi.Float64Output)
}

func (o CVSSResponseOutput) ImpactScore() pulumi.Float64Output {
	return o.ApplyT(func(v CVSSResponse) float64 { return v.ImpactScore }).(pulumi.Float64Output)
}

// Defined in CVSS v3, CVSS v2
func (o CVSSResponseOutput) IntegrityImpact() pulumi.StringOutput {
	return o.ApplyT(func(v CVSSResponse) string { return v.IntegrityImpact }).(pulumi.StringOutput)
}

// Defined in CVSS v3
func (o CVSSResponseOutput) PrivilegesRequired() pulumi.StringOutput {
	return o.ApplyT(func(v CVSSResponse) string { return v.PrivilegesRequired }).(pulumi.StringOutput)
}

// Defined in CVSS v3
func (o CVSSResponseOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v CVSSResponse) string { return v.Scope }).(pulumi.StringOutput)
}

// Defined in CVSS v3
func (o CVSSResponseOutput) UserInteraction() pulumi.StringOutput {
	return o.ApplyT(func(v CVSSResponse) string { return v.UserInteraction }).(pulumi.StringOutput)
}

// Deprecated. Common Vulnerability Scoring System version 3. For details, see https://www.first.org/cvss/specification-document
type CVSSv3 struct {
	AttackComplexity *CVSSv3AttackComplexity `pulumi:"attackComplexity"`
	// Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments.
	AttackVector       *CVSSv3AttackVector       `pulumi:"attackVector"`
	AvailabilityImpact *CVSSv3AvailabilityImpact `pulumi:"availabilityImpact"`
	// The base score is a function of the base metric scores.
	BaseScore             *float64                     `pulumi:"baseScore"`
	ConfidentialityImpact *CVSSv3ConfidentialityImpact `pulumi:"confidentialityImpact"`
	ExploitabilityScore   *float64                     `pulumi:"exploitabilityScore"`
	ImpactScore           *float64                     `pulumi:"impactScore"`
	IntegrityImpact       *CVSSv3IntegrityImpact       `pulumi:"integrityImpact"`
	PrivilegesRequired    *CVSSv3PrivilegesRequired    `pulumi:"privilegesRequired"`
	Scope                 *CVSSv3Scope                 `pulumi:"scope"`
	UserInteraction       *CVSSv3UserInteraction       `pulumi:"userInteraction"`
}

// CVSSv3Input is an input type that accepts CVSSv3Args and CVSSv3Output values.
// You can construct a concrete instance of `CVSSv3Input` via:
//
//	CVSSv3Args{...}
type CVSSv3Input interface {
	pulumi.Input

	ToCVSSv3Output() CVSSv3Output
	ToCVSSv3OutputWithContext(context.Context) CVSSv3Output
}

// Deprecated. Common Vulnerability Scoring System version 3. For details, see https://www.first.org/cvss/specification-document
type CVSSv3Args struct {
	AttackComplexity CVSSv3AttackComplexityPtrInput `pulumi:"attackComplexity"`
	// Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments.
	AttackVector       CVSSv3AttackVectorPtrInput       `pulumi:"attackVector"`
	AvailabilityImpact CVSSv3AvailabilityImpactPtrInput `pulumi:"availabilityImpact"`
	// The base score is a function of the base metric scores.
	BaseScore             pulumi.Float64PtrInput              `pulumi:"baseScore"`
	ConfidentialityImpact CVSSv3ConfidentialityImpactPtrInput `pulumi:"confidentialityImpact"`
	ExploitabilityScore   pulumi.Float64PtrInput              `pulumi:"exploitabilityScore"`
	ImpactScore           pulumi.Float64PtrInput              `pulumi:"impactScore"`
	IntegrityImpact       CVSSv3IntegrityImpactPtrInput       `pulumi:"integrityImpact"`
	PrivilegesRequired    CVSSv3PrivilegesRequiredPtrInput    `pulumi:"privilegesRequired"`
	Scope                 CVSSv3ScopePtrInput                 `pulumi:"scope"`
	UserInteraction       CVSSv3UserInteractionPtrInput       `pulumi:"userInteraction"`
}

func (CVSSv3Args) ElementType() reflect.Type {
	return reflect.TypeOf((*CVSSv3)(nil)).Elem()
}

func (i CVSSv3Args) ToCVSSv3Output() CVSSv3Output {
	return i.ToCVSSv3OutputWithContext(context.Background())
}

func (i CVSSv3Args) ToCVSSv3OutputWithContext(ctx context.Context) CVSSv3Output {
	return pulumi.ToOutputWithContext(ctx, i).(CVSSv3Output)
}

func (i CVSSv3Args) ToCVSSv3PtrOutput() CVSSv3PtrOutput {
	return i.ToCVSSv3PtrOutputWithContext(context.Background())
}

func (i CVSSv3Args) ToCVSSv3PtrOutputWithContext(ctx context.Context) CVSSv3PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CVSSv3Output).ToCVSSv3PtrOutputWithContext(ctx)
}

// CVSSv3PtrInput is an input type that accepts CVSSv3Args, CVSSv3Ptr and CVSSv3PtrOutput values.
// You can construct a concrete instance of `CVSSv3PtrInput` via:
//
//	        CVSSv3Args{...}
//
//	or:
//
//	        nil
type CVSSv3PtrInput interface {
	pulumi.Input

	ToCVSSv3PtrOutput() CVSSv3PtrOutput
	ToCVSSv3PtrOutputWithContext(context.Context) CVSSv3PtrOutput
}

type cvssv3PtrType CVSSv3Args

func CVSSv3Ptr(v *CVSSv3Args) CVSSv3PtrInput {
	return (*cvssv3PtrType)(v)
}

func (*cvssv3PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CVSSv3)(nil)).Elem()
}

func (i *cvssv3PtrType) ToCVSSv3PtrOutput() CVSSv3PtrOutput {
	return i.ToCVSSv3PtrOutputWithContext(context.Background())
}

func (i *cvssv3PtrType) ToCVSSv3PtrOutputWithContext(ctx context.Context) CVSSv3PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CVSSv3PtrOutput)
}

// Deprecated. Common Vulnerability Scoring System version 3. For details, see https://www.first.org/cvss/specification-document
type CVSSv3Output struct{ *pulumi.OutputState }

func (CVSSv3Output) ElementType() reflect.Type {
	return reflect.TypeOf((*CVSSv3)(nil)).Elem()
}

func (o CVSSv3Output) ToCVSSv3Output() CVSSv3Output {
	return o
}

func (o CVSSv3Output) ToCVSSv3OutputWithContext(ctx context.Context) CVSSv3Output {
	return o
}

func (o CVSSv3Output) ToCVSSv3PtrOutput() CVSSv3PtrOutput {
	return o.ToCVSSv3PtrOutputWithContext(context.Background())
}

func (o CVSSv3Output) ToCVSSv3PtrOutputWithContext(ctx context.Context) CVSSv3PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CVSSv3) *CVSSv3 {
		return &v
	}).(CVSSv3PtrOutput)
}

func (o CVSSv3Output) AttackComplexity() CVSSv3AttackComplexityPtrOutput {
	return o.ApplyT(func(v CVSSv3) *CVSSv3AttackComplexity { return v.AttackComplexity }).(CVSSv3AttackComplexityPtrOutput)
}

// Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments.
func (o CVSSv3Output) AttackVector() CVSSv3AttackVectorPtrOutput {
	return o.ApplyT(func(v CVSSv3) *CVSSv3AttackVector { return v.AttackVector }).(CVSSv3AttackVectorPtrOutput)
}

func (o CVSSv3Output) AvailabilityImpact() CVSSv3AvailabilityImpactPtrOutput {
	return o.ApplyT(func(v CVSSv3) *CVSSv3AvailabilityImpact { return v.AvailabilityImpact }).(CVSSv3AvailabilityImpactPtrOutput)
}

// The base score is a function of the base metric scores.
func (o CVSSv3Output) BaseScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v CVSSv3) *float64 { return v.BaseScore }).(pulumi.Float64PtrOutput)
}

func (o CVSSv3Output) ConfidentialityImpact() CVSSv3ConfidentialityImpactPtrOutput {
	return o.ApplyT(func(v CVSSv3) *CVSSv3ConfidentialityImpact { return v.ConfidentialityImpact }).(CVSSv3ConfidentialityImpactPtrOutput)
}

func (o CVSSv3Output) ExploitabilityScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v CVSSv3) *float64 { return v.ExploitabilityScore }).(pulumi.Float64PtrOutput)
}

func (o CVSSv3Output) ImpactScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v CVSSv3) *float64 { return v.ImpactScore }).(pulumi.Float64PtrOutput)
}

func (o CVSSv3Output) IntegrityImpact() CVSSv3IntegrityImpactPtrOutput {
	return o.ApplyT(func(v CVSSv3) *CVSSv3IntegrityImpact { return v.IntegrityImpact }).(CVSSv3IntegrityImpactPtrOutput)
}

func (o CVSSv3Output) PrivilegesRequired() CVSSv3PrivilegesRequiredPtrOutput {
	return o.ApplyT(func(v CVSSv3) *CVSSv3PrivilegesRequired { return v.PrivilegesRequired }).(CVSSv3PrivilegesRequiredPtrOutput)
}

func (o CVSSv3Output) Scope() CVSSv3ScopePtrOutput {
	return o.ApplyT(func(v CVSSv3) *CVSSv3Scope { return v.Scope }).(CVSSv3ScopePtrOutput)
}

func (o CVSSv3Output) UserInteraction() CVSSv3UserInteractionPtrOutput {
	return o.ApplyT(func(v CVSSv3) *CVSSv3UserInteraction { return v.UserInteraction }).(CVSSv3UserInteractionPtrOutput)
}

type CVSSv3PtrOutput struct{ *pulumi.OutputState }

func (CVSSv3PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CVSSv3)(nil)).Elem()
}

func (o CVSSv3PtrOutput) ToCVSSv3PtrOutput() CVSSv3PtrOutput {
	return o
}

func (o CVSSv3PtrOutput) ToCVSSv3PtrOutputWithContext(ctx context.Context) CVSSv3PtrOutput {
	return o
}

func (o CVSSv3PtrOutput) Elem() CVSSv3Output {
	return o.ApplyT(func(v *CVSSv3) CVSSv3 {
		if v != nil {
			return *v
		}
		var ret CVSSv3
		return ret
	}).(CVSSv3Output)
}

func (o CVSSv3PtrOutput) AttackComplexity() CVSSv3AttackComplexityPtrOutput {
	return o.ApplyT(func(v *CVSSv3) *CVSSv3AttackComplexity {
		if v == nil {
			return nil
		}
		return v.AttackComplexity
	}).(CVSSv3AttackComplexityPtrOutput)
}

// Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments.
func (o CVSSv3PtrOutput) AttackVector() CVSSv3AttackVectorPtrOutput {
	return o.ApplyT(func(v *CVSSv3) *CVSSv3AttackVector {
		if v == nil {
			return nil
		}
		return v.AttackVector
	}).(CVSSv3AttackVectorPtrOutput)
}

func (o CVSSv3PtrOutput) AvailabilityImpact() CVSSv3AvailabilityImpactPtrOutput {
	return o.ApplyT(func(v *CVSSv3) *CVSSv3AvailabilityImpact {
		if v == nil {
			return nil
		}
		return v.AvailabilityImpact
	}).(CVSSv3AvailabilityImpactPtrOutput)
}

// The base score is a function of the base metric scores.
func (o CVSSv3PtrOutput) BaseScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *CVSSv3) *float64 {
		if v == nil {
			return nil
		}
		return v.BaseScore
	}).(pulumi.Float64PtrOutput)
}

func (o CVSSv3PtrOutput) ConfidentialityImpact() CVSSv3ConfidentialityImpactPtrOutput {
	return o.ApplyT(func(v *CVSSv3) *CVSSv3ConfidentialityImpact {
		if v == nil {
			return nil
		}
		return v.ConfidentialityImpact
	}).(CVSSv3ConfidentialityImpactPtrOutput)
}

func (o CVSSv3PtrOutput) ExploitabilityScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *CVSSv3) *float64 {
		if v == nil {
			return nil
		}
		return v.ExploitabilityScore
	}).(pulumi.Float64PtrOutput)
}

func (o CVSSv3PtrOutput) ImpactScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *CVSSv3) *float64 {
		if v == nil {
			return nil
		}
		return v.ImpactScore
	}).(pulumi.Float64PtrOutput)
}

func (o CVSSv3PtrOutput) IntegrityImpact() CVSSv3IntegrityImpactPtrOutput {
	return o.ApplyT(func(v *CVSSv3) *CVSSv3IntegrityImpact {
		if v == nil {
			return nil
		}
		return v.IntegrityImpact
	}).(CVSSv3IntegrityImpactPtrOutput)
}

func (o CVSSv3PtrOutput) PrivilegesRequired() CVSSv3PrivilegesRequiredPtrOutput {
	return o.ApplyT(func(v *CVSSv3) *CVSSv3PrivilegesRequired {
		if v == nil {
			return nil
		}
		return v.PrivilegesRequired
	}).(CVSSv3PrivilegesRequiredPtrOutput)
}

func (o CVSSv3PtrOutput) Scope() CVSSv3ScopePtrOutput {
	return o.ApplyT(func(v *CVSSv3) *CVSSv3Scope {
		if v == nil {
			return nil
		}
		return v.Scope
	}).(CVSSv3ScopePtrOutput)
}

func (o CVSSv3PtrOutput) UserInteraction() CVSSv3UserInteractionPtrOutput {
	return o.ApplyT(func(v *CVSSv3) *CVSSv3UserInteraction {
		if v == nil {
			return nil
		}
		return v.UserInteraction
	}).(CVSSv3UserInteractionPtrOutput)
}

// Deprecated. Common Vulnerability Scoring System version 3. For details, see https://www.first.org/cvss/specification-document
type CVSSv3Response struct {
	AttackComplexity string `pulumi:"attackComplexity"`
	// Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments.
	AttackVector       string `pulumi:"attackVector"`
	AvailabilityImpact string `pulumi:"availabilityImpact"`
	// The base score is a function of the base metric scores.
	BaseScore             float64 `pulumi:"baseScore"`
	ConfidentialityImpact string  `pulumi:"confidentialityImpact"`
	ExploitabilityScore   float64 `pulumi:"exploitabilityScore"`
	ImpactScore           float64 `pulumi:"impactScore"`
	IntegrityImpact       string  `pulumi:"integrityImpact"`
	PrivilegesRequired    string  `pulumi:"privilegesRequired"`
	Scope                 string  `pulumi:"scope"`
	UserInteraction       string  `pulumi:"userInteraction"`
}

// Deprecated. Common Vulnerability Scoring System version 3. For details, see https://www.first.org/cvss/specification-document
type CVSSv3ResponseOutput struct{ *pulumi.OutputState }

func (CVSSv3ResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CVSSv3Response)(nil)).Elem()
}

func (o CVSSv3ResponseOutput) ToCVSSv3ResponseOutput() CVSSv3ResponseOutput {
	return o
}

func (o CVSSv3ResponseOutput) ToCVSSv3ResponseOutputWithContext(ctx context.Context) CVSSv3ResponseOutput {
	return o
}

func (o CVSSv3ResponseOutput) AttackComplexity() pulumi.StringOutput {
	return o.ApplyT(func(v CVSSv3Response) string { return v.AttackComplexity }).(pulumi.StringOutput)
}

// Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments.
func (o CVSSv3ResponseOutput) AttackVector() pulumi.StringOutput {
	return o.ApplyT(func(v CVSSv3Response) string { return v.AttackVector }).(pulumi.StringOutput)
}

func (o CVSSv3ResponseOutput) AvailabilityImpact() pulumi.StringOutput {
	return o.ApplyT(func(v CVSSv3Response) string { return v.AvailabilityImpact }).(pulumi.StringOutput)
}

// The base score is a function of the base metric scores.
func (o CVSSv3ResponseOutput) BaseScore() pulumi.Float64Output {
	return o.ApplyT(func(v CVSSv3Response) float64 { return v.BaseScore }).(pulumi.Float64Output)
}

func (o CVSSv3ResponseOutput) ConfidentialityImpact() pulumi.StringOutput {
	return o.ApplyT(func(v CVSSv3Response) string { return v.ConfidentialityImpact }).(pulumi.StringOutput)
}

func (o CVSSv3ResponseOutput) ExploitabilityScore() pulumi.Float64Output {
	return o.ApplyT(func(v CVSSv3Response) float64 { return v.ExploitabilityScore }).(pulumi.Float64Output)
}

func (o CVSSv3ResponseOutput) ImpactScore() pulumi.Float64Output {
	return o.ApplyT(func(v CVSSv3Response) float64 { return v.ImpactScore }).(pulumi.Float64Output)
}

func (o CVSSv3ResponseOutput) IntegrityImpact() pulumi.StringOutput {
	return o.ApplyT(func(v CVSSv3Response) string { return v.IntegrityImpact }).(pulumi.StringOutput)
}

func (o CVSSv3ResponseOutput) PrivilegesRequired() pulumi.StringOutput {
	return o.ApplyT(func(v CVSSv3Response) string { return v.PrivilegesRequired }).(pulumi.StringOutput)
}

func (o CVSSv3ResponseOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v CVSSv3Response) string { return v.Scope }).(pulumi.StringOutput)
}

func (o CVSSv3ResponseOutput) UserInteraction() pulumi.StringOutput {
	return o.ApplyT(func(v CVSSv3Response) string { return v.UserInteraction }).(pulumi.StringOutput)
}

// A CloudRepoSourceContext denotes a particular revision in a Google Cloud Source Repo.
type CloudRepoSourceContext struct {
	// An alias, which may be a branch or tag.
	AliasContext *AliasContext `pulumi:"aliasContext"`
	// The ID of the repo.
	RepoId *RepoId `pulumi:"repoId"`
	// A revision ID.
	RevisionId *string `pulumi:"revisionId"`
}

// CloudRepoSourceContextInput is an input type that accepts CloudRepoSourceContextArgs and CloudRepoSourceContextOutput values.
// You can construct a concrete instance of `CloudRepoSourceContextInput` via:
//
//	CloudRepoSourceContextArgs{...}
type CloudRepoSourceContextInput interface {
	pulumi.Input

	ToCloudRepoSourceContextOutput() CloudRepoSourceContextOutput
	ToCloudRepoSourceContextOutputWithContext(context.Context) CloudRepoSourceContextOutput
}

// A CloudRepoSourceContext denotes a particular revision in a Google Cloud Source Repo.
type CloudRepoSourceContextArgs struct {
	// An alias, which may be a branch or tag.
	AliasContext AliasContextPtrInput `pulumi:"aliasContext"`
	// The ID of the repo.
	RepoId RepoIdPtrInput `pulumi:"repoId"`
	// A revision ID.
	RevisionId pulumi.StringPtrInput `pulumi:"revisionId"`
}

func (CloudRepoSourceContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudRepoSourceContext)(nil)).Elem()
}

func (i CloudRepoSourceContextArgs) ToCloudRepoSourceContextOutput() CloudRepoSourceContextOutput {
	return i.ToCloudRepoSourceContextOutputWithContext(context.Background())
}

func (i CloudRepoSourceContextArgs) ToCloudRepoSourceContextOutputWithContext(ctx context.Context) CloudRepoSourceContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudRepoSourceContextOutput)
}

func (i CloudRepoSourceContextArgs) ToCloudRepoSourceContextPtrOutput() CloudRepoSourceContextPtrOutput {
	return i.ToCloudRepoSourceContextPtrOutputWithContext(context.Background())
}

func (i CloudRepoSourceContextArgs) ToCloudRepoSourceContextPtrOutputWithContext(ctx context.Context) CloudRepoSourceContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudRepoSourceContextOutput).ToCloudRepoSourceContextPtrOutputWithContext(ctx)
}

// CloudRepoSourceContextPtrInput is an input type that accepts CloudRepoSourceContextArgs, CloudRepoSourceContextPtr and CloudRepoSourceContextPtrOutput values.
// You can construct a concrete instance of `CloudRepoSourceContextPtrInput` via:
//
//	        CloudRepoSourceContextArgs{...}
//
//	or:
//
//	        nil
type CloudRepoSourceContextPtrInput interface {
	pulumi.Input

	ToCloudRepoSourceContextPtrOutput() CloudRepoSourceContextPtrOutput
	ToCloudRepoSourceContextPtrOutputWithContext(context.Context) CloudRepoSourceContextPtrOutput
}

type cloudRepoSourceContextPtrType CloudRepoSourceContextArgs

func CloudRepoSourceContextPtr(v *CloudRepoSourceContextArgs) CloudRepoSourceContextPtrInput {
	return (*cloudRepoSourceContextPtrType)(v)
}

func (*cloudRepoSourceContextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudRepoSourceContext)(nil)).Elem()
}

func (i *cloudRepoSourceContextPtrType) ToCloudRepoSourceContextPtrOutput() CloudRepoSourceContextPtrOutput {
	return i.ToCloudRepoSourceContextPtrOutputWithContext(context.Background())
}

func (i *cloudRepoSourceContextPtrType) ToCloudRepoSourceContextPtrOutputWithContext(ctx context.Context) CloudRepoSourceContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudRepoSourceContextPtrOutput)
}

// A CloudRepoSourceContext denotes a particular revision in a Google Cloud Source Repo.
type CloudRepoSourceContextOutput struct{ *pulumi.OutputState }

func (CloudRepoSourceContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudRepoSourceContext)(nil)).Elem()
}

func (o CloudRepoSourceContextOutput) ToCloudRepoSourceContextOutput() CloudRepoSourceContextOutput {
	return o
}

func (o CloudRepoSourceContextOutput) ToCloudRepoSourceContextOutputWithContext(ctx context.Context) CloudRepoSourceContextOutput {
	return o
}

func (o CloudRepoSourceContextOutput) ToCloudRepoSourceContextPtrOutput() CloudRepoSourceContextPtrOutput {
	return o.ToCloudRepoSourceContextPtrOutputWithContext(context.Background())
}

func (o CloudRepoSourceContextOutput) ToCloudRepoSourceContextPtrOutputWithContext(ctx context.Context) CloudRepoSourceContextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CloudRepoSourceContext) *CloudRepoSourceContext {
		return &v
	}).(CloudRepoSourceContextPtrOutput)
}

// An alias, which may be a branch or tag.
func (o CloudRepoSourceContextOutput) AliasContext() AliasContextPtrOutput {
	return o.ApplyT(func(v CloudRepoSourceContext) *AliasContext { return v.AliasContext }).(AliasContextPtrOutput)
}

// The ID of the repo.
func (o CloudRepoSourceContextOutput) RepoId() RepoIdPtrOutput {
	return o.ApplyT(func(v CloudRepoSourceContext) *RepoId { return v.RepoId }).(RepoIdPtrOutput)
}

// A revision ID.
func (o CloudRepoSourceContextOutput) RevisionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CloudRepoSourceContext) *string { return v.RevisionId }).(pulumi.StringPtrOutput)
}

type CloudRepoSourceContextPtrOutput struct{ *pulumi.OutputState }

func (CloudRepoSourceContextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudRepoSourceContext)(nil)).Elem()
}

func (o CloudRepoSourceContextPtrOutput) ToCloudRepoSourceContextPtrOutput() CloudRepoSourceContextPtrOutput {
	return o
}

func (o CloudRepoSourceContextPtrOutput) ToCloudRepoSourceContextPtrOutputWithContext(ctx context.Context) CloudRepoSourceContextPtrOutput {
	return o
}

func (o CloudRepoSourceContextPtrOutput) Elem() CloudRepoSourceContextOutput {
	return o.ApplyT(func(v *CloudRepoSourceContext) CloudRepoSourceContext {
		if v != nil {
			return *v
		}
		var ret CloudRepoSourceContext
		return ret
	}).(CloudRepoSourceContextOutput)
}

// An alias, which may be a branch or tag.
func (o CloudRepoSourceContextPtrOutput) AliasContext() AliasContextPtrOutput {
	return o.ApplyT(func(v *CloudRepoSourceContext) *AliasContext {
		if v == nil {
			return nil
		}
		return v.AliasContext
	}).(AliasContextPtrOutput)
}

// The ID of the repo.
func (o CloudRepoSourceContextPtrOutput) RepoId() RepoIdPtrOutput {
	return o.ApplyT(func(v *CloudRepoSourceContext) *RepoId {
		if v == nil {
			return nil
		}
		return v.RepoId
	}).(RepoIdPtrOutput)
}

// A revision ID.
func (o CloudRepoSourceContextPtrOutput) RevisionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudRepoSourceContext) *string {
		if v == nil {
			return nil
		}
		return v.RevisionId
	}).(pulumi.StringPtrOutput)
}

// A CloudRepoSourceContext denotes a particular revision in a Google Cloud Source Repo.
type CloudRepoSourceContextResponse struct {
	// An alias, which may be a branch or tag.
	AliasContext AliasContextResponse `pulumi:"aliasContext"`
	// The ID of the repo.
	RepoId RepoIdResponse `pulumi:"repoId"`
	// A revision ID.
	RevisionId string `pulumi:"revisionId"`
}

// A CloudRepoSourceContext denotes a particular revision in a Google Cloud Source Repo.
type CloudRepoSourceContextResponseOutput struct{ *pulumi.OutputState }

func (CloudRepoSourceContextResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudRepoSourceContextResponse)(nil)).Elem()
}

func (o CloudRepoSourceContextResponseOutput) ToCloudRepoSourceContextResponseOutput() CloudRepoSourceContextResponseOutput {
	return o
}

func (o CloudRepoSourceContextResponseOutput) ToCloudRepoSourceContextResponseOutputWithContext(ctx context.Context) CloudRepoSourceContextResponseOutput {
	return o
}

// An alias, which may be a branch or tag.
func (o CloudRepoSourceContextResponseOutput) AliasContext() AliasContextResponseOutput {
	return o.ApplyT(func(v CloudRepoSourceContextResponse) AliasContextResponse { return v.AliasContext }).(AliasContextResponseOutput)
}

// The ID of the repo.
func (o CloudRepoSourceContextResponseOutput) RepoId() RepoIdResponseOutput {
	return o.ApplyT(func(v CloudRepoSourceContextResponse) RepoIdResponse { return v.RepoId }).(RepoIdResponseOutput)
}

// A revision ID.
func (o CloudRepoSourceContextResponseOutput) RevisionId() pulumi.StringOutput {
	return o.ApplyT(func(v CloudRepoSourceContextResponse) string { return v.RevisionId }).(pulumi.StringOutput)
}

// Command describes a step performed as part of the build pipeline.
type Command struct {
	// Command-line arguments used when executing this command.
	Args []string `pulumi:"args"`
	// Working directory (relative to project source root) used when running this command.
	Dir *string `pulumi:"dir"`
	// Environment variables set before running this command.
	Env []string `pulumi:"env"`
	// Optional unique identifier for this command, used in wait_for to reference this command as a dependency.
	Id *string `pulumi:"id"`
	// Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`.
	Name string `pulumi:"name"`
	// The ID(s) of the command(s) that this command depends on.
	WaitFor []string `pulumi:"waitFor"`
}

// CommandInput is an input type that accepts CommandArgs and CommandOutput values.
// You can construct a concrete instance of `CommandInput` via:
//
//	CommandArgs{...}
type CommandInput interface {
	pulumi.Input

	ToCommandOutput() CommandOutput
	ToCommandOutputWithContext(context.Context) CommandOutput
}

// Command describes a step performed as part of the build pipeline.
type CommandArgs struct {
	// Command-line arguments used when executing this command.
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Working directory (relative to project source root) used when running this command.
	Dir pulumi.StringPtrInput `pulumi:"dir"`
	// Environment variables set before running this command.
	Env pulumi.StringArrayInput `pulumi:"env"`
	// Optional unique identifier for this command, used in wait_for to reference this command as a dependency.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`.
	Name pulumi.StringInput `pulumi:"name"`
	// The ID(s) of the command(s) that this command depends on.
	WaitFor pulumi.StringArrayInput `pulumi:"waitFor"`
}

func (CommandArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Command)(nil)).Elem()
}

func (i CommandArgs) ToCommandOutput() CommandOutput {
	return i.ToCommandOutputWithContext(context.Background())
}

func (i CommandArgs) ToCommandOutputWithContext(ctx context.Context) CommandOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandOutput)
}

// CommandArrayInput is an input type that accepts CommandArray and CommandArrayOutput values.
// You can construct a concrete instance of `CommandArrayInput` via:
//
//	CommandArray{ CommandArgs{...} }
type CommandArrayInput interface {
	pulumi.Input

	ToCommandArrayOutput() CommandArrayOutput
	ToCommandArrayOutputWithContext(context.Context) CommandArrayOutput
}

type CommandArray []CommandInput

func (CommandArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Command)(nil)).Elem()
}

func (i CommandArray) ToCommandArrayOutput() CommandArrayOutput {
	return i.ToCommandArrayOutputWithContext(context.Background())
}

func (i CommandArray) ToCommandArrayOutputWithContext(ctx context.Context) CommandArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandArrayOutput)
}

// Command describes a step performed as part of the build pipeline.
type CommandOutput struct{ *pulumi.OutputState }

func (CommandOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Command)(nil)).Elem()
}

func (o CommandOutput) ToCommandOutput() CommandOutput {
	return o
}

func (o CommandOutput) ToCommandOutputWithContext(ctx context.Context) CommandOutput {
	return o
}

// Command-line arguments used when executing this command.
func (o CommandOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Command) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Working directory (relative to project source root) used when running this command.
func (o CommandOutput) Dir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Command) *string { return v.Dir }).(pulumi.StringPtrOutput)
}

// Environment variables set before running this command.
func (o CommandOutput) Env() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Command) []string { return v.Env }).(pulumi.StringArrayOutput)
}

// Optional unique identifier for this command, used in wait_for to reference this command as a dependency.
func (o CommandOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Command) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`.
func (o CommandOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Command) string { return v.Name }).(pulumi.StringOutput)
}

// The ID(s) of the command(s) that this command depends on.
func (o CommandOutput) WaitFor() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Command) []string { return v.WaitFor }).(pulumi.StringArrayOutput)
}

type CommandArrayOutput struct{ *pulumi.OutputState }

func (CommandArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Command)(nil)).Elem()
}

func (o CommandArrayOutput) ToCommandArrayOutput() CommandArrayOutput {
	return o
}

func (o CommandArrayOutput) ToCommandArrayOutputWithContext(ctx context.Context) CommandArrayOutput {
	return o
}

func (o CommandArrayOutput) Index(i pulumi.IntInput) CommandOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Command {
		return vs[0].([]Command)[vs[1].(int)]
	}).(CommandOutput)
}

// Command describes a step performed as part of the build pipeline.
type CommandResponse struct {
	// Command-line arguments used when executing this command.
	Args []string `pulumi:"args"`
	// Working directory (relative to project source root) used when running this command.
	Dir string `pulumi:"dir"`
	// Environment variables set before running this command.
	Env []string `pulumi:"env"`
	// Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`.
	Name string `pulumi:"name"`
	// The ID(s) of the command(s) that this command depends on.
	WaitFor []string `pulumi:"waitFor"`
}

// Command describes a step performed as part of the build pipeline.
type CommandResponseOutput struct{ *pulumi.OutputState }

func (CommandResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommandResponse)(nil)).Elem()
}

func (o CommandResponseOutput) ToCommandResponseOutput() CommandResponseOutput {
	return o
}

func (o CommandResponseOutput) ToCommandResponseOutputWithContext(ctx context.Context) CommandResponseOutput {
	return o
}

// Command-line arguments used when executing this command.
func (o CommandResponseOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CommandResponse) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Working directory (relative to project source root) used when running this command.
func (o CommandResponseOutput) Dir() pulumi.StringOutput {
	return o.ApplyT(func(v CommandResponse) string { return v.Dir }).(pulumi.StringOutput)
}

// Environment variables set before running this command.
func (o CommandResponseOutput) Env() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CommandResponse) []string { return v.Env }).(pulumi.StringArrayOutput)
}

// Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`.
func (o CommandResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CommandResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The ID(s) of the command(s) that this command depends on.
func (o CommandResponseOutput) WaitFor() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CommandResponse) []string { return v.WaitFor }).(pulumi.StringArrayOutput)
}

type CommandResponseArrayOutput struct{ *pulumi.OutputState }

func (CommandResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CommandResponse)(nil)).Elem()
}

func (o CommandResponseArrayOutput) ToCommandResponseArrayOutput() CommandResponseArrayOutput {
	return o
}

func (o CommandResponseArrayOutput) ToCommandResponseArrayOutputWithContext(ctx context.Context) CommandResponseArrayOutput {
	return o
}

func (o CommandResponseArrayOutput) Index(i pulumi.IntInput) CommandResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CommandResponse {
		return vs[0].([]CommandResponse)[vs[1].(int)]
	}).(CommandResponseOutput)
}

// An artifact that can be deployed in some runtime.
type Deployable struct {
	// Resource URI for the artifact being deployed.
	ResourceUri []string `pulumi:"resourceUri"`
}

// DeployableInput is an input type that accepts DeployableArgs and DeployableOutput values.
// You can construct a concrete instance of `DeployableInput` via:
//
//	DeployableArgs{...}
type DeployableInput interface {
	pulumi.Input

	ToDeployableOutput() DeployableOutput
	ToDeployableOutputWithContext(context.Context) DeployableOutput
}

// An artifact that can be deployed in some runtime.
type DeployableArgs struct {
	// Resource URI for the artifact being deployed.
	ResourceUri pulumi.StringArrayInput `pulumi:"resourceUri"`
}

func (DeployableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Deployable)(nil)).Elem()
}

func (i DeployableArgs) ToDeployableOutput() DeployableOutput {
	return i.ToDeployableOutputWithContext(context.Background())
}

func (i DeployableArgs) ToDeployableOutputWithContext(ctx context.Context) DeployableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeployableOutput)
}

func (i DeployableArgs) ToDeployablePtrOutput() DeployablePtrOutput {
	return i.ToDeployablePtrOutputWithContext(context.Background())
}

func (i DeployableArgs) ToDeployablePtrOutputWithContext(ctx context.Context) DeployablePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeployableOutput).ToDeployablePtrOutputWithContext(ctx)
}

// DeployablePtrInput is an input type that accepts DeployableArgs, DeployablePtr and DeployablePtrOutput values.
// You can construct a concrete instance of `DeployablePtrInput` via:
//
//	        DeployableArgs{...}
//
//	or:
//
//	        nil
type DeployablePtrInput interface {
	pulumi.Input

	ToDeployablePtrOutput() DeployablePtrOutput
	ToDeployablePtrOutputWithContext(context.Context) DeployablePtrOutput
}

type deployablePtrType DeployableArgs

func DeployablePtr(v *DeployableArgs) DeployablePtrInput {
	return (*deployablePtrType)(v)
}

func (*deployablePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Deployable)(nil)).Elem()
}

func (i *deployablePtrType) ToDeployablePtrOutput() DeployablePtrOutput {
	return i.ToDeployablePtrOutputWithContext(context.Background())
}

func (i *deployablePtrType) ToDeployablePtrOutputWithContext(ctx context.Context) DeployablePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeployablePtrOutput)
}

// An artifact that can be deployed in some runtime.
type DeployableOutput struct{ *pulumi.OutputState }

func (DeployableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Deployable)(nil)).Elem()
}

func (o DeployableOutput) ToDeployableOutput() DeployableOutput {
	return o
}

func (o DeployableOutput) ToDeployableOutputWithContext(ctx context.Context) DeployableOutput {
	return o
}

func (o DeployableOutput) ToDeployablePtrOutput() DeployablePtrOutput {
	return o.ToDeployablePtrOutputWithContext(context.Background())
}

func (o DeployableOutput) ToDeployablePtrOutputWithContext(ctx context.Context) DeployablePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Deployable) *Deployable {
		return &v
	}).(DeployablePtrOutput)
}

// Resource URI for the artifact being deployed.
func (o DeployableOutput) ResourceUri() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Deployable) []string { return v.ResourceUri }).(pulumi.StringArrayOutput)
}

type DeployablePtrOutput struct{ *pulumi.OutputState }

func (DeployablePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Deployable)(nil)).Elem()
}

func (o DeployablePtrOutput) ToDeployablePtrOutput() DeployablePtrOutput {
	return o
}

func (o DeployablePtrOutput) ToDeployablePtrOutputWithContext(ctx context.Context) DeployablePtrOutput {
	return o
}

func (o DeployablePtrOutput) Elem() DeployableOutput {
	return o.ApplyT(func(v *Deployable) Deployable {
		if v != nil {
			return *v
		}
		var ret Deployable
		return ret
	}).(DeployableOutput)
}

// Resource URI for the artifact being deployed.
func (o DeployablePtrOutput) ResourceUri() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Deployable) []string {
		if v == nil {
			return nil
		}
		return v.ResourceUri
	}).(pulumi.StringArrayOutput)
}

// An artifact that can be deployed in some runtime.
type DeployableResponse struct {
	// Resource URI for the artifact being deployed.
	ResourceUri []string `pulumi:"resourceUri"`
}

// An artifact that can be deployed in some runtime.
type DeployableResponseOutput struct{ *pulumi.OutputState }

func (DeployableResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeployableResponse)(nil)).Elem()
}

func (o DeployableResponseOutput) ToDeployableResponseOutput() DeployableResponseOutput {
	return o
}

func (o DeployableResponseOutput) ToDeployableResponseOutputWithContext(ctx context.Context) DeployableResponseOutput {
	return o
}

// Resource URI for the artifact being deployed.
func (o DeployableResponseOutput) ResourceUri() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeployableResponse) []string { return v.ResourceUri }).(pulumi.StringArrayOutput)
}

// The period during which some deployable was active in a runtime.
type Deployment struct {
	// Address of the runtime element hosting this deployment.
	Address *string `pulumi:"address"`
	// Configuration used to create this deployment.
	Config *string `pulumi:"config"`
	// Beginning of the lifetime of this deployment.
	DeployTime string `pulumi:"deployTime"`
	// Platform hosting this deployment.
	Platform *DeploymentPlatform `pulumi:"platform"`
	// End of the lifetime of this deployment.
	UndeployTime *string `pulumi:"undeployTime"`
	// Identity of the user that triggered this deployment.
	UserEmail *string `pulumi:"userEmail"`
}

// DeploymentInput is an input type that accepts DeploymentArgs and DeploymentOutput values.
// You can construct a concrete instance of `DeploymentInput` via:
//
//	DeploymentArgs{...}
type DeploymentInput interface {
	pulumi.Input

	ToDeploymentOutput() DeploymentOutput
	ToDeploymentOutputWithContext(context.Context) DeploymentOutput
}

// The period during which some deployable was active in a runtime.
type DeploymentArgs struct {
	// Address of the runtime element hosting this deployment.
	Address pulumi.StringPtrInput `pulumi:"address"`
	// Configuration used to create this deployment.
	Config pulumi.StringPtrInput `pulumi:"config"`
	// Beginning of the lifetime of this deployment.
	DeployTime pulumi.StringInput `pulumi:"deployTime"`
	// Platform hosting this deployment.
	Platform DeploymentPlatformPtrInput `pulumi:"platform"`
	// End of the lifetime of this deployment.
	UndeployTime pulumi.StringPtrInput `pulumi:"undeployTime"`
	// Identity of the user that triggered this deployment.
	UserEmail pulumi.StringPtrInput `pulumi:"userEmail"`
}

func (DeploymentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Deployment)(nil)).Elem()
}

func (i DeploymentArgs) ToDeploymentOutput() DeploymentOutput {
	return i.ToDeploymentOutputWithContext(context.Background())
}

func (i DeploymentArgs) ToDeploymentOutputWithContext(ctx context.Context) DeploymentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentOutput)
}

func (i DeploymentArgs) ToDeploymentPtrOutput() DeploymentPtrOutput {
	return i.ToDeploymentPtrOutputWithContext(context.Background())
}

func (i DeploymentArgs) ToDeploymentPtrOutputWithContext(ctx context.Context) DeploymentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentOutput).ToDeploymentPtrOutputWithContext(ctx)
}

// DeploymentPtrInput is an input type that accepts DeploymentArgs, DeploymentPtr and DeploymentPtrOutput values.
// You can construct a concrete instance of `DeploymentPtrInput` via:
//
//	        DeploymentArgs{...}
//
//	or:
//
//	        nil
type DeploymentPtrInput interface {
	pulumi.Input

	ToDeploymentPtrOutput() DeploymentPtrOutput
	ToDeploymentPtrOutputWithContext(context.Context) DeploymentPtrOutput
}

type deploymentPtrType DeploymentArgs

func DeploymentPtr(v *DeploymentArgs) DeploymentPtrInput {
	return (*deploymentPtrType)(v)
}

func (*deploymentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Deployment)(nil)).Elem()
}

func (i *deploymentPtrType) ToDeploymentPtrOutput() DeploymentPtrOutput {
	return i.ToDeploymentPtrOutputWithContext(context.Background())
}

func (i *deploymentPtrType) ToDeploymentPtrOutputWithContext(ctx context.Context) DeploymentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentPtrOutput)
}

// The period during which some deployable was active in a runtime.
type DeploymentOutput struct{ *pulumi.OutputState }

func (DeploymentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Deployment)(nil)).Elem()
}

func (o DeploymentOutput) ToDeploymentOutput() DeploymentOutput {
	return o
}

func (o DeploymentOutput) ToDeploymentOutputWithContext(ctx context.Context) DeploymentOutput {
	return o
}

func (o DeploymentOutput) ToDeploymentPtrOutput() DeploymentPtrOutput {
	return o.ToDeploymentPtrOutputWithContext(context.Background())
}

func (o DeploymentOutput) ToDeploymentPtrOutputWithContext(ctx context.Context) DeploymentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Deployment) *Deployment {
		return &v
	}).(DeploymentPtrOutput)
}

// Address of the runtime element hosting this deployment.
func (o DeploymentOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Deployment) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// Configuration used to create this deployment.
func (o DeploymentOutput) Config() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Deployment) *string { return v.Config }).(pulumi.StringPtrOutput)
}

// Beginning of the lifetime of this deployment.
func (o DeploymentOutput) DeployTime() pulumi.StringOutput {
	return o.ApplyT(func(v Deployment) string { return v.DeployTime }).(pulumi.StringOutput)
}

// Platform hosting this deployment.
func (o DeploymentOutput) Platform() DeploymentPlatformPtrOutput {
	return o.ApplyT(func(v Deployment) *DeploymentPlatform { return v.Platform }).(DeploymentPlatformPtrOutput)
}

// End of the lifetime of this deployment.
func (o DeploymentOutput) UndeployTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Deployment) *string { return v.UndeployTime }).(pulumi.StringPtrOutput)
}

// Identity of the user that triggered this deployment.
func (o DeploymentOutput) UserEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Deployment) *string { return v.UserEmail }).(pulumi.StringPtrOutput)
}

type DeploymentPtrOutput struct{ *pulumi.OutputState }

func (DeploymentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Deployment)(nil)).Elem()
}

func (o DeploymentPtrOutput) ToDeploymentPtrOutput() DeploymentPtrOutput {
	return o
}

func (o DeploymentPtrOutput) ToDeploymentPtrOutputWithContext(ctx context.Context) DeploymentPtrOutput {
	return o
}

func (o DeploymentPtrOutput) Elem() DeploymentOutput {
	return o.ApplyT(func(v *Deployment) Deployment {
		if v != nil {
			return *v
		}
		var ret Deployment
		return ret
	}).(DeploymentOutput)
}

// Address of the runtime element hosting this deployment.
func (o DeploymentPtrOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Deployment) *string {
		if v == nil {
			return nil
		}
		return v.Address
	}).(pulumi.StringPtrOutput)
}

// Configuration used to create this deployment.
func (o DeploymentPtrOutput) Config() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Deployment) *string {
		if v == nil {
			return nil
		}
		return v.Config
	}).(pulumi.StringPtrOutput)
}

// Beginning of the lifetime of this deployment.
func (o DeploymentPtrOutput) DeployTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Deployment) *string {
		if v == nil {
			return nil
		}
		return &v.DeployTime
	}).(pulumi.StringPtrOutput)
}

// Platform hosting this deployment.
func (o DeploymentPtrOutput) Platform() DeploymentPlatformPtrOutput {
	return o.ApplyT(func(v *Deployment) *DeploymentPlatform {
		if v == nil {
			return nil
		}
		return v.Platform
	}).(DeploymentPlatformPtrOutput)
}

// End of the lifetime of this deployment.
func (o DeploymentPtrOutput) UndeployTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Deployment) *string {
		if v == nil {
			return nil
		}
		return v.UndeployTime
	}).(pulumi.StringPtrOutput)
}

// Identity of the user that triggered this deployment.
func (o DeploymentPtrOutput) UserEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Deployment) *string {
		if v == nil {
			return nil
		}
		return v.UserEmail
	}).(pulumi.StringPtrOutput)
}

// The period during which some deployable was active in a runtime.
type DeploymentResponse struct {
	// Address of the runtime element hosting this deployment.
	Address string `pulumi:"address"`
	// Configuration used to create this deployment.
	Config string `pulumi:"config"`
	// Beginning of the lifetime of this deployment.
	DeployTime string `pulumi:"deployTime"`
	// Platform hosting this deployment.
	Platform string `pulumi:"platform"`
	// Resource URI for the artifact being deployed taken from the deployable field with the same name.
	ResourceUri []string `pulumi:"resourceUri"`
	// End of the lifetime of this deployment.
	UndeployTime string `pulumi:"undeployTime"`
	// Identity of the user that triggered this deployment.
	UserEmail string `pulumi:"userEmail"`
}

// The period during which some deployable was active in a runtime.
type DeploymentResponseOutput struct{ *pulumi.OutputState }

func (DeploymentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentResponse)(nil)).Elem()
}

func (o DeploymentResponseOutput) ToDeploymentResponseOutput() DeploymentResponseOutput {
	return o
}

func (o DeploymentResponseOutput) ToDeploymentResponseOutputWithContext(ctx context.Context) DeploymentResponseOutput {
	return o
}

// Address of the runtime element hosting this deployment.
func (o DeploymentResponseOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v DeploymentResponse) string { return v.Address }).(pulumi.StringOutput)
}

// Configuration used to create this deployment.
func (o DeploymentResponseOutput) Config() pulumi.StringOutput {
	return o.ApplyT(func(v DeploymentResponse) string { return v.Config }).(pulumi.StringOutput)
}

// Beginning of the lifetime of this deployment.
func (o DeploymentResponseOutput) DeployTime() pulumi.StringOutput {
	return o.ApplyT(func(v DeploymentResponse) string { return v.DeployTime }).(pulumi.StringOutput)
}

// Platform hosting this deployment.
func (o DeploymentResponseOutput) Platform() pulumi.StringOutput {
	return o.ApplyT(func(v DeploymentResponse) string { return v.Platform }).(pulumi.StringOutput)
}

// Resource URI for the artifact being deployed taken from the deployable field with the same name.
func (o DeploymentResponseOutput) ResourceUri() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeploymentResponse) []string { return v.ResourceUri }).(pulumi.StringArrayOutput)
}

// End of the lifetime of this deployment.
func (o DeploymentResponseOutput) UndeployTime() pulumi.StringOutput {
	return o.ApplyT(func(v DeploymentResponse) string { return v.UndeployTime }).(pulumi.StringOutput)
}

// Identity of the user that triggered this deployment.
func (o DeploymentResponseOutput) UserEmail() pulumi.StringOutput {
	return o.ApplyT(func(v DeploymentResponse) string { return v.UserEmail }).(pulumi.StringOutput)
}

// Derived describes the derived image portion (Occurrence) of the DockerImage relationship. This image would be produced from a Dockerfile with FROM .
type Derived struct {
	// The fingerprint of the derived image.
	Fingerprint Fingerprint `pulumi:"fingerprint"`
	// This contains layer-specific metadata, if populated it has length "distance" and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer.
	LayerInfo []Layer `pulumi:"layerInfo"`
}

// DerivedInput is an input type that accepts DerivedArgs and DerivedOutput values.
// You can construct a concrete instance of `DerivedInput` via:
//
//	DerivedArgs{...}
type DerivedInput interface {
	pulumi.Input

	ToDerivedOutput() DerivedOutput
	ToDerivedOutputWithContext(context.Context) DerivedOutput
}

// Derived describes the derived image portion (Occurrence) of the DockerImage relationship. This image would be produced from a Dockerfile with FROM .
type DerivedArgs struct {
	// The fingerprint of the derived image.
	Fingerprint FingerprintInput `pulumi:"fingerprint"`
	// This contains layer-specific metadata, if populated it has length "distance" and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer.
	LayerInfo LayerArrayInput `pulumi:"layerInfo"`
}

func (DerivedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Derived)(nil)).Elem()
}

func (i DerivedArgs) ToDerivedOutput() DerivedOutput {
	return i.ToDerivedOutputWithContext(context.Background())
}

func (i DerivedArgs) ToDerivedOutputWithContext(ctx context.Context) DerivedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DerivedOutput)
}

func (i DerivedArgs) ToDerivedPtrOutput() DerivedPtrOutput {
	return i.ToDerivedPtrOutputWithContext(context.Background())
}

func (i DerivedArgs) ToDerivedPtrOutputWithContext(ctx context.Context) DerivedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DerivedOutput).ToDerivedPtrOutputWithContext(ctx)
}

// DerivedPtrInput is an input type that accepts DerivedArgs, DerivedPtr and DerivedPtrOutput values.
// You can construct a concrete instance of `DerivedPtrInput` via:
//
//	        DerivedArgs{...}
//
//	or:
//
//	        nil
type DerivedPtrInput interface {
	pulumi.Input

	ToDerivedPtrOutput() DerivedPtrOutput
	ToDerivedPtrOutputWithContext(context.Context) DerivedPtrOutput
}

type derivedPtrType DerivedArgs

func DerivedPtr(v *DerivedArgs) DerivedPtrInput {
	return (*derivedPtrType)(v)
}

func (*derivedPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Derived)(nil)).Elem()
}

func (i *derivedPtrType) ToDerivedPtrOutput() DerivedPtrOutput {
	return i.ToDerivedPtrOutputWithContext(context.Background())
}

func (i *derivedPtrType) ToDerivedPtrOutputWithContext(ctx context.Context) DerivedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DerivedPtrOutput)
}

// Derived describes the derived image portion (Occurrence) of the DockerImage relationship. This image would be produced from a Dockerfile with FROM .
type DerivedOutput struct{ *pulumi.OutputState }

func (DerivedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Derived)(nil)).Elem()
}

func (o DerivedOutput) ToDerivedOutput() DerivedOutput {
	return o
}

func (o DerivedOutput) ToDerivedOutputWithContext(ctx context.Context) DerivedOutput {
	return o
}

func (o DerivedOutput) ToDerivedPtrOutput() DerivedPtrOutput {
	return o.ToDerivedPtrOutputWithContext(context.Background())
}

func (o DerivedOutput) ToDerivedPtrOutputWithContext(ctx context.Context) DerivedPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Derived) *Derived {
		return &v
	}).(DerivedPtrOutput)
}

// The fingerprint of the derived image.
func (o DerivedOutput) Fingerprint() FingerprintOutput {
	return o.ApplyT(func(v Derived) Fingerprint { return v.Fingerprint }).(FingerprintOutput)
}

// This contains layer-specific metadata, if populated it has length "distance" and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer.
func (o DerivedOutput) LayerInfo() LayerArrayOutput {
	return o.ApplyT(func(v Derived) []Layer { return v.LayerInfo }).(LayerArrayOutput)
}

type DerivedPtrOutput struct{ *pulumi.OutputState }

func (DerivedPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Derived)(nil)).Elem()
}

func (o DerivedPtrOutput) ToDerivedPtrOutput() DerivedPtrOutput {
	return o
}

func (o DerivedPtrOutput) ToDerivedPtrOutputWithContext(ctx context.Context) DerivedPtrOutput {
	return o
}

func (o DerivedPtrOutput) Elem() DerivedOutput {
	return o.ApplyT(func(v *Derived) Derived {
		if v != nil {
			return *v
		}
		var ret Derived
		return ret
	}).(DerivedOutput)
}

// The fingerprint of the derived image.
func (o DerivedPtrOutput) Fingerprint() FingerprintPtrOutput {
	return o.ApplyT(func(v *Derived) *Fingerprint {
		if v == nil {
			return nil
		}
		return &v.Fingerprint
	}).(FingerprintPtrOutput)
}

// This contains layer-specific metadata, if populated it has length "distance" and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer.
func (o DerivedPtrOutput) LayerInfo() LayerArrayOutput {
	return o.ApplyT(func(v *Derived) []Layer {
		if v == nil {
			return nil
		}
		return v.LayerInfo
	}).(LayerArrayOutput)
}

// Derived describes the derived image portion (Occurrence) of the DockerImage relationship. This image would be produced from a Dockerfile with FROM .
type DerivedResponse struct {
	// This contains the base image URL for the derived image occurrence.
	BaseResourceUrl string `pulumi:"baseResourceUrl"`
	// The number of layers by which this image differs from the associated image basis.
	Distance int `pulumi:"distance"`
	// The fingerprint of the derived image.
	Fingerprint FingerprintResponse `pulumi:"fingerprint"`
	// This contains layer-specific metadata, if populated it has length "distance" and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer.
	LayerInfo []LayerResponse `pulumi:"layerInfo"`
}

// Derived describes the derived image portion (Occurrence) of the DockerImage relationship. This image would be produced from a Dockerfile with FROM .
type DerivedResponseOutput struct{ *pulumi.OutputState }

func (DerivedResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DerivedResponse)(nil)).Elem()
}

func (o DerivedResponseOutput) ToDerivedResponseOutput() DerivedResponseOutput {
	return o
}

func (o DerivedResponseOutput) ToDerivedResponseOutputWithContext(ctx context.Context) DerivedResponseOutput {
	return o
}

// This contains the base image URL for the derived image occurrence.
func (o DerivedResponseOutput) BaseResourceUrl() pulumi.StringOutput {
	return o.ApplyT(func(v DerivedResponse) string { return v.BaseResourceUrl }).(pulumi.StringOutput)
}

// The number of layers by which this image differs from the associated image basis.
func (o DerivedResponseOutput) Distance() pulumi.IntOutput {
	return o.ApplyT(func(v DerivedResponse) int { return v.Distance }).(pulumi.IntOutput)
}

// The fingerprint of the derived image.
func (o DerivedResponseOutput) Fingerprint() FingerprintResponseOutput {
	return o.ApplyT(func(v DerivedResponse) FingerprintResponse { return v.Fingerprint }).(FingerprintResponseOutput)
}

// This contains layer-specific metadata, if populated it has length "distance" and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer.
func (o DerivedResponseOutput) LayerInfo() LayerResponseArrayOutput {
	return o.ApplyT(func(v DerivedResponse) []LayerResponse { return v.LayerInfo }).(LayerResponseArrayOutput)
}

// Identifies all appearances of this vulnerability in the package for a specific distro/location. For example: glibc in cpe:/o:debian:debian_linux:8 for versions 2.1 - 2.2
type Detail struct {
	// The CPE URI in [cpe format](https://cpe.mitre.org/specification/) in which the vulnerability manifests. Examples include distro or storage location for vulnerable jar.
	CpeUri string `pulumi:"cpeUri"`
	// A vendor-specific description of this note.
	Description *string `pulumi:"description"`
	// The fix for this specific package version.
	FixedLocation *VulnerabilityLocation `pulumi:"fixedLocation"`
	// Whether this detail is obsolete. Occurrences are expected not to point to obsolete details.
	IsObsolete *bool `pulumi:"isObsolete"`
	// The max version of the package in which the vulnerability exists.
	MaxAffectedVersion *Version `pulumi:"maxAffectedVersion"`
	// The min version of the package in which the vulnerability exists.
	MinAffectedVersion *Version `pulumi:"minAffectedVersion"`
	// The name of the package where the vulnerability was found.
	Package string `pulumi:"package"`
	// The type of package; whether native or non native(ruby gems, node.js packages etc).
	PackageType *string `pulumi:"packageType"`
	// The severity (eg: distro assigned severity) for this vulnerability.
	SeverityName *string `pulumi:"severityName"`
	// The source from which the information in this Detail was obtained.
	Source *string `pulumi:"source"`
	// The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.
	SourceUpdateTime *string `pulumi:"sourceUpdateTime"`
	// The name of the vendor of the product.
	Vendor *string `pulumi:"vendor"`
}

// DetailInput is an input type that accepts DetailArgs and DetailOutput values.
// You can construct a concrete instance of `DetailInput` via:
//
//	DetailArgs{...}
type DetailInput interface {
	pulumi.Input

	ToDetailOutput() DetailOutput
	ToDetailOutputWithContext(context.Context) DetailOutput
}

// Identifies all appearances of this vulnerability in the package for a specific distro/location. For example: glibc in cpe:/o:debian:debian_linux:8 for versions 2.1 - 2.2
type DetailArgs struct {
	// The CPE URI in [cpe format](https://cpe.mitre.org/specification/) in which the vulnerability manifests. Examples include distro or storage location for vulnerable jar.
	CpeUri pulumi.StringInput `pulumi:"cpeUri"`
	// A vendor-specific description of this note.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The fix for this specific package version.
	FixedLocation VulnerabilityLocationPtrInput `pulumi:"fixedLocation"`
	// Whether this detail is obsolete. Occurrences are expected not to point to obsolete details.
	IsObsolete pulumi.BoolPtrInput `pulumi:"isObsolete"`
	// The max version of the package in which the vulnerability exists.
	MaxAffectedVersion VersionPtrInput `pulumi:"maxAffectedVersion"`
	// The min version of the package in which the vulnerability exists.
	MinAffectedVersion VersionPtrInput `pulumi:"minAffectedVersion"`
	// The name of the package where the vulnerability was found.
	Package pulumi.StringInput `pulumi:"package"`
	// The type of package; whether native or non native(ruby gems, node.js packages etc).
	PackageType pulumi.StringPtrInput `pulumi:"packageType"`
	// The severity (eg: distro assigned severity) for this vulnerability.
	SeverityName pulumi.StringPtrInput `pulumi:"severityName"`
	// The source from which the information in this Detail was obtained.
	Source pulumi.StringPtrInput `pulumi:"source"`
	// The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.
	SourceUpdateTime pulumi.StringPtrInput `pulumi:"sourceUpdateTime"`
	// The name of the vendor of the product.
	Vendor pulumi.StringPtrInput `pulumi:"vendor"`
}

func (DetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Detail)(nil)).Elem()
}

func (i DetailArgs) ToDetailOutput() DetailOutput {
	return i.ToDetailOutputWithContext(context.Background())
}

func (i DetailArgs) ToDetailOutputWithContext(ctx context.Context) DetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DetailOutput)
}

// DetailArrayInput is an input type that accepts DetailArray and DetailArrayOutput values.
// You can construct a concrete instance of `DetailArrayInput` via:
//
//	DetailArray{ DetailArgs{...} }
type DetailArrayInput interface {
	pulumi.Input

	ToDetailArrayOutput() DetailArrayOutput
	ToDetailArrayOutputWithContext(context.Context) DetailArrayOutput
}

type DetailArray []DetailInput

func (DetailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Detail)(nil)).Elem()
}

func (i DetailArray) ToDetailArrayOutput() DetailArrayOutput {
	return i.ToDetailArrayOutputWithContext(context.Background())
}

func (i DetailArray) ToDetailArrayOutputWithContext(ctx context.Context) DetailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DetailArrayOutput)
}

// Identifies all appearances of this vulnerability in the package for a specific distro/location. For example: glibc in cpe:/o:debian:debian_linux:8 for versions 2.1 - 2.2
type DetailOutput struct{ *pulumi.OutputState }

func (DetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Detail)(nil)).Elem()
}

func (o DetailOutput) ToDetailOutput() DetailOutput {
	return o
}

func (o DetailOutput) ToDetailOutputWithContext(ctx context.Context) DetailOutput {
	return o
}

// The CPE URI in [cpe format](https://cpe.mitre.org/specification/) in which the vulnerability manifests. Examples include distro or storage location for vulnerable jar.
func (o DetailOutput) CpeUri() pulumi.StringOutput {
	return o.ApplyT(func(v Detail) string { return v.CpeUri }).(pulumi.StringOutput)
}

// A vendor-specific description of this note.
func (o DetailOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Detail) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The fix for this specific package version.
func (o DetailOutput) FixedLocation() VulnerabilityLocationPtrOutput {
	return o.ApplyT(func(v Detail) *VulnerabilityLocation { return v.FixedLocation }).(VulnerabilityLocationPtrOutput)
}

// Whether this detail is obsolete. Occurrences are expected not to point to obsolete details.
func (o DetailOutput) IsObsolete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Detail) *bool { return v.IsObsolete }).(pulumi.BoolPtrOutput)
}

// The max version of the package in which the vulnerability exists.
func (o DetailOutput) MaxAffectedVersion() VersionPtrOutput {
	return o.ApplyT(func(v Detail) *Version { return v.MaxAffectedVersion }).(VersionPtrOutput)
}

// The min version of the package in which the vulnerability exists.
func (o DetailOutput) MinAffectedVersion() VersionPtrOutput {
	return o.ApplyT(func(v Detail) *Version { return v.MinAffectedVersion }).(VersionPtrOutput)
}

// The name of the package where the vulnerability was found.
func (o DetailOutput) Package() pulumi.StringOutput {
	return o.ApplyT(func(v Detail) string { return v.Package }).(pulumi.StringOutput)
}

// The type of package; whether native or non native(ruby gems, node.js packages etc).
func (o DetailOutput) PackageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Detail) *string { return v.PackageType }).(pulumi.StringPtrOutput)
}

// The severity (eg: distro assigned severity) for this vulnerability.
func (o DetailOutput) SeverityName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Detail) *string { return v.SeverityName }).(pulumi.StringPtrOutput)
}

// The source from which the information in this Detail was obtained.
func (o DetailOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Detail) *string { return v.Source }).(pulumi.StringPtrOutput)
}

// The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.
func (o DetailOutput) SourceUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Detail) *string { return v.SourceUpdateTime }).(pulumi.StringPtrOutput)
}

// The name of the vendor of the product.
func (o DetailOutput) Vendor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Detail) *string { return v.Vendor }).(pulumi.StringPtrOutput)
}

type DetailArrayOutput struct{ *pulumi.OutputState }

func (DetailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Detail)(nil)).Elem()
}

func (o DetailArrayOutput) ToDetailArrayOutput() DetailArrayOutput {
	return o
}

func (o DetailArrayOutput) ToDetailArrayOutputWithContext(ctx context.Context) DetailArrayOutput {
	return o
}

func (o DetailArrayOutput) Index(i pulumi.IntInput) DetailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Detail {
		return vs[0].([]Detail)[vs[1].(int)]
	}).(DetailOutput)
}

// Identifies all appearances of this vulnerability in the package for a specific distro/location. For example: glibc in cpe:/o:debian:debian_linux:8 for versions 2.1 - 2.2
type DetailResponse struct {
	// The CPE URI in [cpe format](https://cpe.mitre.org/specification/) in which the vulnerability manifests. Examples include distro or storage location for vulnerable jar.
	CpeUri string `pulumi:"cpeUri"`
	// A vendor-specific description of this note.
	Description string `pulumi:"description"`
	// The fix for this specific package version.
	FixedLocation VulnerabilityLocationResponse `pulumi:"fixedLocation"`
	// Whether this detail is obsolete. Occurrences are expected not to point to obsolete details.
	IsObsolete bool `pulumi:"isObsolete"`
	// The max version of the package in which the vulnerability exists.
	MaxAffectedVersion VersionResponse `pulumi:"maxAffectedVersion"`
	// The min version of the package in which the vulnerability exists.
	MinAffectedVersion VersionResponse `pulumi:"minAffectedVersion"`
	// The name of the package where the vulnerability was found.
	Package string `pulumi:"package"`
	// The type of package; whether native or non native(ruby gems, node.js packages etc).
	PackageType string `pulumi:"packageType"`
	// The severity (eg: distro assigned severity) for this vulnerability.
	SeverityName string `pulumi:"severityName"`
	// The source from which the information in this Detail was obtained.
	Source string `pulumi:"source"`
	// The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.
	SourceUpdateTime string `pulumi:"sourceUpdateTime"`
	// The name of the vendor of the product.
	Vendor string `pulumi:"vendor"`
}

// Identifies all appearances of this vulnerability in the package for a specific distro/location. For example: glibc in cpe:/o:debian:debian_linux:8 for versions 2.1 - 2.2
type DetailResponseOutput struct{ *pulumi.OutputState }

func (DetailResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DetailResponse)(nil)).Elem()
}

func (o DetailResponseOutput) ToDetailResponseOutput() DetailResponseOutput {
	return o
}

func (o DetailResponseOutput) ToDetailResponseOutputWithContext(ctx context.Context) DetailResponseOutput {
	return o
}

// The CPE URI in [cpe format](https://cpe.mitre.org/specification/) in which the vulnerability manifests. Examples include distro or storage location for vulnerable jar.
func (o DetailResponseOutput) CpeUri() pulumi.StringOutput {
	return o.ApplyT(func(v DetailResponse) string { return v.CpeUri }).(pulumi.StringOutput)
}

// A vendor-specific description of this note.
func (o DetailResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v DetailResponse) string { return v.Description }).(pulumi.StringOutput)
}

// The fix for this specific package version.
func (o DetailResponseOutput) FixedLocation() VulnerabilityLocationResponseOutput {
	return o.ApplyT(func(v DetailResponse) VulnerabilityLocationResponse { return v.FixedLocation }).(VulnerabilityLocationResponseOutput)
}

// Whether this detail is obsolete. Occurrences are expected not to point to obsolete details.
func (o DetailResponseOutput) IsObsolete() pulumi.BoolOutput {
	return o.ApplyT(func(v DetailResponse) bool { return v.IsObsolete }).(pulumi.BoolOutput)
}

// The max version of the package in which the vulnerability exists.
func (o DetailResponseOutput) MaxAffectedVersion() VersionResponseOutput {
	return o.ApplyT(func(v DetailResponse) VersionResponse { return v.MaxAffectedVersion }).(VersionResponseOutput)
}

// The min version of the package in which the vulnerability exists.
func (o DetailResponseOutput) MinAffectedVersion() VersionResponseOutput {
	return o.ApplyT(func(v DetailResponse) VersionResponse { return v.MinAffectedVersion }).(VersionResponseOutput)
}

// The name of the package where the vulnerability was found.
func (o DetailResponseOutput) Package() pulumi.StringOutput {
	return o.ApplyT(func(v DetailResponse) string { return v.Package }).(pulumi.StringOutput)
}

// The type of package; whether native or non native(ruby gems, node.js packages etc).
func (o DetailResponseOutput) PackageType() pulumi.StringOutput {
	return o.ApplyT(func(v DetailResponse) string { return v.PackageType }).(pulumi.StringOutput)
}

// The severity (eg: distro assigned severity) for this vulnerability.
func (o DetailResponseOutput) SeverityName() pulumi.StringOutput {
	return o.ApplyT(func(v DetailResponse) string { return v.SeverityName }).(pulumi.StringOutput)
}

// The source from which the information in this Detail was obtained.
func (o DetailResponseOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v DetailResponse) string { return v.Source }).(pulumi.StringOutput)
}

// The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.
func (o DetailResponseOutput) SourceUpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v DetailResponse) string { return v.SourceUpdateTime }).(pulumi.StringOutput)
}

// The name of the vendor of the product.
func (o DetailResponseOutput) Vendor() pulumi.StringOutput {
	return o.ApplyT(func(v DetailResponse) string { return v.Vendor }).(pulumi.StringOutput)
}

type DetailResponseArrayOutput struct{ *pulumi.OutputState }

func (DetailResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DetailResponse)(nil)).Elem()
}

func (o DetailResponseArrayOutput) ToDetailResponseArrayOutput() DetailResponseArrayOutput {
	return o
}

func (o DetailResponseArrayOutput) ToDetailResponseArrayOutputWithContext(ctx context.Context) DetailResponseArrayOutput {
	return o
}

func (o DetailResponseArrayOutput) Index(i pulumi.IntInput) DetailResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DetailResponse {
		return vs[0].([]DetailResponse)[vs[1].(int)]
	}).(DetailResponseOutput)
}

// Details of an attestation occurrence.
type Details struct {
	// Attestation for the resource.
	Attestation Attestation `pulumi:"attestation"`
}

// DetailsInput is an input type that accepts DetailsArgs and DetailsOutput values.
// You can construct a concrete instance of `DetailsInput` via:
//
//	DetailsArgs{...}
type DetailsInput interface {
	pulumi.Input

	ToDetailsOutput() DetailsOutput
	ToDetailsOutputWithContext(context.Context) DetailsOutput
}

// Details of an attestation occurrence.
type DetailsArgs struct {
	// Attestation for the resource.
	Attestation AttestationInput `pulumi:"attestation"`
}

func (DetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Details)(nil)).Elem()
}

func (i DetailsArgs) ToDetailsOutput() DetailsOutput {
	return i.ToDetailsOutputWithContext(context.Background())
}

func (i DetailsArgs) ToDetailsOutputWithContext(ctx context.Context) DetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DetailsOutput)
}

func (i DetailsArgs) ToDetailsPtrOutput() DetailsPtrOutput {
	return i.ToDetailsPtrOutputWithContext(context.Background())
}

func (i DetailsArgs) ToDetailsPtrOutputWithContext(ctx context.Context) DetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DetailsOutput).ToDetailsPtrOutputWithContext(ctx)
}

// DetailsPtrInput is an input type that accepts DetailsArgs, DetailsPtr and DetailsPtrOutput values.
// You can construct a concrete instance of `DetailsPtrInput` via:
//
//	        DetailsArgs{...}
//
//	or:
//
//	        nil
type DetailsPtrInput interface {
	pulumi.Input

	ToDetailsPtrOutput() DetailsPtrOutput
	ToDetailsPtrOutputWithContext(context.Context) DetailsPtrOutput
}

type detailsPtrType DetailsArgs

func DetailsPtr(v *DetailsArgs) DetailsPtrInput {
	return (*detailsPtrType)(v)
}

func (*detailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Details)(nil)).Elem()
}

func (i *detailsPtrType) ToDetailsPtrOutput() DetailsPtrOutput {
	return i.ToDetailsPtrOutputWithContext(context.Background())
}

func (i *detailsPtrType) ToDetailsPtrOutputWithContext(ctx context.Context) DetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DetailsPtrOutput)
}

// Details of an attestation occurrence.
type DetailsOutput struct{ *pulumi.OutputState }

func (DetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Details)(nil)).Elem()
}

func (o DetailsOutput) ToDetailsOutput() DetailsOutput {
	return o
}

func (o DetailsOutput) ToDetailsOutputWithContext(ctx context.Context) DetailsOutput {
	return o
}

func (o DetailsOutput) ToDetailsPtrOutput() DetailsPtrOutput {
	return o.ToDetailsPtrOutputWithContext(context.Background())
}

func (o DetailsOutput) ToDetailsPtrOutputWithContext(ctx context.Context) DetailsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Details) *Details {
		return &v
	}).(DetailsPtrOutput)
}

// Attestation for the resource.
func (o DetailsOutput) Attestation() AttestationOutput {
	return o.ApplyT(func(v Details) Attestation { return v.Attestation }).(AttestationOutput)
}

type DetailsPtrOutput struct{ *pulumi.OutputState }

func (DetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Details)(nil)).Elem()
}

func (o DetailsPtrOutput) ToDetailsPtrOutput() DetailsPtrOutput {
	return o
}

func (o DetailsPtrOutput) ToDetailsPtrOutputWithContext(ctx context.Context) DetailsPtrOutput {
	return o
}

func (o DetailsPtrOutput) Elem() DetailsOutput {
	return o.ApplyT(func(v *Details) Details {
		if v != nil {
			return *v
		}
		var ret Details
		return ret
	}).(DetailsOutput)
}

// Attestation for the resource.
func (o DetailsPtrOutput) Attestation() AttestationPtrOutput {
	return o.ApplyT(func(v *Details) *Attestation {
		if v == nil {
			return nil
		}
		return &v.Attestation
	}).(AttestationPtrOutput)
}

// Details of an attestation occurrence.
type DetailsResponse struct {
	// Attestation for the resource.
	Attestation AttestationResponse `pulumi:"attestation"`
}

// Details of an attestation occurrence.
type DetailsResponseOutput struct{ *pulumi.OutputState }

func (DetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DetailsResponse)(nil)).Elem()
}

func (o DetailsResponseOutput) ToDetailsResponseOutput() DetailsResponseOutput {
	return o
}

func (o DetailsResponseOutput) ToDetailsResponseOutputWithContext(ctx context.Context) DetailsResponseOutput {
	return o
}

// Attestation for the resource.
func (o DetailsResponseOutput) Attestation() AttestationResponseOutput {
	return o.ApplyT(func(v DetailsResponse) AttestationResponse { return v.Attestation }).(AttestationResponseOutput)
}

// Digest information.
type Digest struct {
	// `SHA1`, `SHA512` etc.
	Algo *string `pulumi:"algo"`
	// Value of the digest.
	DigestBytes *string `pulumi:"digestBytes"`
}

// DigestInput is an input type that accepts DigestArgs and DigestOutput values.
// You can construct a concrete instance of `DigestInput` via:
//
//	DigestArgs{...}
type DigestInput interface {
	pulumi.Input

	ToDigestOutput() DigestOutput
	ToDigestOutputWithContext(context.Context) DigestOutput
}

// Digest information.
type DigestArgs struct {
	// `SHA1`, `SHA512` etc.
	Algo pulumi.StringPtrInput `pulumi:"algo"`
	// Value of the digest.
	DigestBytes pulumi.StringPtrInput `pulumi:"digestBytes"`
}

func (DigestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Digest)(nil)).Elem()
}

func (i DigestArgs) ToDigestOutput() DigestOutput {
	return i.ToDigestOutputWithContext(context.Background())
}

func (i DigestArgs) ToDigestOutputWithContext(ctx context.Context) DigestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DigestOutput)
}

// DigestArrayInput is an input type that accepts DigestArray and DigestArrayOutput values.
// You can construct a concrete instance of `DigestArrayInput` via:
//
//	DigestArray{ DigestArgs{...} }
type DigestArrayInput interface {
	pulumi.Input

	ToDigestArrayOutput() DigestArrayOutput
	ToDigestArrayOutputWithContext(context.Context) DigestArrayOutput
}

type DigestArray []DigestInput

func (DigestArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Digest)(nil)).Elem()
}

func (i DigestArray) ToDigestArrayOutput() DigestArrayOutput {
	return i.ToDigestArrayOutputWithContext(context.Background())
}

func (i DigestArray) ToDigestArrayOutputWithContext(ctx context.Context) DigestArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DigestArrayOutput)
}

// Digest information.
type DigestOutput struct{ *pulumi.OutputState }

func (DigestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Digest)(nil)).Elem()
}

func (o DigestOutput) ToDigestOutput() DigestOutput {
	return o
}

func (o DigestOutput) ToDigestOutputWithContext(ctx context.Context) DigestOutput {
	return o
}

// `SHA1`, `SHA512` etc.
func (o DigestOutput) Algo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Digest) *string { return v.Algo }).(pulumi.StringPtrOutput)
}

// Value of the digest.
func (o DigestOutput) DigestBytes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Digest) *string { return v.DigestBytes }).(pulumi.StringPtrOutput)
}

type DigestArrayOutput struct{ *pulumi.OutputState }

func (DigestArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Digest)(nil)).Elem()
}

func (o DigestArrayOutput) ToDigestArrayOutput() DigestArrayOutput {
	return o
}

func (o DigestArrayOutput) ToDigestArrayOutputWithContext(ctx context.Context) DigestArrayOutput {
	return o
}

func (o DigestArrayOutput) Index(i pulumi.IntInput) DigestOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Digest {
		return vs[0].([]Digest)[vs[1].(int)]
	}).(DigestOutput)
}

// Digest information.
type DigestResponse struct {
	// `SHA1`, `SHA512` etc.
	Algo string `pulumi:"algo"`
	// Value of the digest.
	DigestBytes string `pulumi:"digestBytes"`
}

// Digest information.
type DigestResponseOutput struct{ *pulumi.OutputState }

func (DigestResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DigestResponse)(nil)).Elem()
}

func (o DigestResponseOutput) ToDigestResponseOutput() DigestResponseOutput {
	return o
}

func (o DigestResponseOutput) ToDigestResponseOutputWithContext(ctx context.Context) DigestResponseOutput {
	return o
}

// `SHA1`, `SHA512` etc.
func (o DigestResponseOutput) Algo() pulumi.StringOutput {
	return o.ApplyT(func(v DigestResponse) string { return v.Algo }).(pulumi.StringOutput)
}

// Value of the digest.
func (o DigestResponseOutput) DigestBytes() pulumi.StringOutput {
	return o.ApplyT(func(v DigestResponse) string { return v.DigestBytes }).(pulumi.StringOutput)
}

type DigestResponseArrayOutput struct{ *pulumi.OutputState }

func (DigestResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DigestResponse)(nil)).Elem()
}

func (o DigestResponseArrayOutput) ToDigestResponseArrayOutput() DigestResponseArrayOutput {
	return o
}

func (o DigestResponseArrayOutput) ToDigestResponseArrayOutputWithContext(ctx context.Context) DigestResponseArrayOutput {
	return o
}

func (o DigestResponseArrayOutput) Index(i pulumi.IntInput) DigestResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DigestResponse {
		return vs[0].([]DigestResponse)[vs[1].(int)]
	}).(DigestResponseOutput)
}

// Provides information about the analysis status of a discovered resource.
type Discovered struct {
	AnalysisCompleted *AnalysisCompleted `pulumi:"analysisCompleted"`
	// Indicates any errors encountered during analysis of a resource. There could be 0 or more of these errors.
	AnalysisError []Status `pulumi:"analysisError"`
	// The status of discovery for the resource.
	AnalysisStatus *DiscoveredAnalysisStatus `pulumi:"analysisStatus"`
	// When an error is encountered this will contain a LocalizedMessage under details to show to the user. The LocalizedMessage is output only and populated by the API.
	AnalysisStatusError *Status `pulumi:"analysisStatusError"`
	// Whether the resource is continuously analyzed.
	ContinuousAnalysis *DiscoveredContinuousAnalysis `pulumi:"continuousAnalysis"`
	// The last time continuous analysis was done for this resource. Deprecated, do not use.
	//
	// Deprecated: The last time continuous analysis was done for this resource. Deprecated, do not use.
	LastAnalysisTime *string `pulumi:"lastAnalysisTime"`
	// The last time this resource was scanned.
	LastScanTime *string `pulumi:"lastScanTime"`
	// The status of an SBOM generation.
	SbomStatus *SBOMStatus `pulumi:"sbomStatus"`
}

// DiscoveredInput is an input type that accepts DiscoveredArgs and DiscoveredOutput values.
// You can construct a concrete instance of `DiscoveredInput` via:
//
//	DiscoveredArgs{...}
type DiscoveredInput interface {
	pulumi.Input

	ToDiscoveredOutput() DiscoveredOutput
	ToDiscoveredOutputWithContext(context.Context) DiscoveredOutput
}

// Provides information about the analysis status of a discovered resource.
type DiscoveredArgs struct {
	AnalysisCompleted AnalysisCompletedPtrInput `pulumi:"analysisCompleted"`
	// Indicates any errors encountered during analysis of a resource. There could be 0 or more of these errors.
	AnalysisError StatusArrayInput `pulumi:"analysisError"`
	// The status of discovery for the resource.
	AnalysisStatus DiscoveredAnalysisStatusPtrInput `pulumi:"analysisStatus"`
	// When an error is encountered this will contain a LocalizedMessage under details to show to the user. The LocalizedMessage is output only and populated by the API.
	AnalysisStatusError StatusPtrInput `pulumi:"analysisStatusError"`
	// Whether the resource is continuously analyzed.
	ContinuousAnalysis DiscoveredContinuousAnalysisPtrInput `pulumi:"continuousAnalysis"`
	// The last time continuous analysis was done for this resource. Deprecated, do not use.
	//
	// Deprecated: The last time continuous analysis was done for this resource. Deprecated, do not use.
	LastAnalysisTime pulumi.StringPtrInput `pulumi:"lastAnalysisTime"`
	// The last time this resource was scanned.
	LastScanTime pulumi.StringPtrInput `pulumi:"lastScanTime"`
	// The status of an SBOM generation.
	SbomStatus SBOMStatusPtrInput `pulumi:"sbomStatus"`
}

func (DiscoveredArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Discovered)(nil)).Elem()
}

func (i DiscoveredArgs) ToDiscoveredOutput() DiscoveredOutput {
	return i.ToDiscoveredOutputWithContext(context.Background())
}

func (i DiscoveredArgs) ToDiscoveredOutputWithContext(ctx context.Context) DiscoveredOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiscoveredOutput)
}

func (i DiscoveredArgs) ToDiscoveredPtrOutput() DiscoveredPtrOutput {
	return i.ToDiscoveredPtrOutputWithContext(context.Background())
}

func (i DiscoveredArgs) ToDiscoveredPtrOutputWithContext(ctx context.Context) DiscoveredPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiscoveredOutput).ToDiscoveredPtrOutputWithContext(ctx)
}

// DiscoveredPtrInput is an input type that accepts DiscoveredArgs, DiscoveredPtr and DiscoveredPtrOutput values.
// You can construct a concrete instance of `DiscoveredPtrInput` via:
//
//	        DiscoveredArgs{...}
//
//	or:
//
//	        nil
type DiscoveredPtrInput interface {
	pulumi.Input

	ToDiscoveredPtrOutput() DiscoveredPtrOutput
	ToDiscoveredPtrOutputWithContext(context.Context) DiscoveredPtrOutput
}

type discoveredPtrType DiscoveredArgs

func DiscoveredPtr(v *DiscoveredArgs) DiscoveredPtrInput {
	return (*discoveredPtrType)(v)
}

func (*discoveredPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Discovered)(nil)).Elem()
}

func (i *discoveredPtrType) ToDiscoveredPtrOutput() DiscoveredPtrOutput {
	return i.ToDiscoveredPtrOutputWithContext(context.Background())
}

func (i *discoveredPtrType) ToDiscoveredPtrOutputWithContext(ctx context.Context) DiscoveredPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiscoveredPtrOutput)
}

// Provides information about the analysis status of a discovered resource.
type DiscoveredOutput struct{ *pulumi.OutputState }

func (DiscoveredOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Discovered)(nil)).Elem()
}

func (o DiscoveredOutput) ToDiscoveredOutput() DiscoveredOutput {
	return o
}

func (o DiscoveredOutput) ToDiscoveredOutputWithContext(ctx context.Context) DiscoveredOutput {
	return o
}

func (o DiscoveredOutput) ToDiscoveredPtrOutput() DiscoveredPtrOutput {
	return o.ToDiscoveredPtrOutputWithContext(context.Background())
}

func (o DiscoveredOutput) ToDiscoveredPtrOutputWithContext(ctx context.Context) DiscoveredPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Discovered) *Discovered {
		return &v
	}).(DiscoveredPtrOutput)
}

func (o DiscoveredOutput) AnalysisCompleted() AnalysisCompletedPtrOutput {
	return o.ApplyT(func(v Discovered) *AnalysisCompleted { return v.AnalysisCompleted }).(AnalysisCompletedPtrOutput)
}

// Indicates any errors encountered during analysis of a resource. There could be 0 or more of these errors.
func (o DiscoveredOutput) AnalysisError() StatusArrayOutput {
	return o.ApplyT(func(v Discovered) []Status { return v.AnalysisError }).(StatusArrayOutput)
}

// The status of discovery for the resource.
func (o DiscoveredOutput) AnalysisStatus() DiscoveredAnalysisStatusPtrOutput {
	return o.ApplyT(func(v Discovered) *DiscoveredAnalysisStatus { return v.AnalysisStatus }).(DiscoveredAnalysisStatusPtrOutput)
}

// When an error is encountered this will contain a LocalizedMessage under details to show to the user. The LocalizedMessage is output only and populated by the API.
func (o DiscoveredOutput) AnalysisStatusError() StatusPtrOutput {
	return o.ApplyT(func(v Discovered) *Status { return v.AnalysisStatusError }).(StatusPtrOutput)
}

// Whether the resource is continuously analyzed.
func (o DiscoveredOutput) ContinuousAnalysis() DiscoveredContinuousAnalysisPtrOutput {
	return o.ApplyT(func(v Discovered) *DiscoveredContinuousAnalysis { return v.ContinuousAnalysis }).(DiscoveredContinuousAnalysisPtrOutput)
}

// The last time continuous analysis was done for this resource. Deprecated, do not use.
//
// Deprecated: The last time continuous analysis was done for this resource. Deprecated, do not use.
func (o DiscoveredOutput) LastAnalysisTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Discovered) *string { return v.LastAnalysisTime }).(pulumi.StringPtrOutput)
}

// The last time this resource was scanned.
func (o DiscoveredOutput) LastScanTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Discovered) *string { return v.LastScanTime }).(pulumi.StringPtrOutput)
}

// The status of an SBOM generation.
func (o DiscoveredOutput) SbomStatus() SBOMStatusPtrOutput {
	return o.ApplyT(func(v Discovered) *SBOMStatus { return v.SbomStatus }).(SBOMStatusPtrOutput)
}

type DiscoveredPtrOutput struct{ *pulumi.OutputState }

func (DiscoveredPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Discovered)(nil)).Elem()
}

func (o DiscoveredPtrOutput) ToDiscoveredPtrOutput() DiscoveredPtrOutput {
	return o
}

func (o DiscoveredPtrOutput) ToDiscoveredPtrOutputWithContext(ctx context.Context) DiscoveredPtrOutput {
	return o
}

func (o DiscoveredPtrOutput) Elem() DiscoveredOutput {
	return o.ApplyT(func(v *Discovered) Discovered {
		if v != nil {
			return *v
		}
		var ret Discovered
		return ret
	}).(DiscoveredOutput)
}

func (o DiscoveredPtrOutput) AnalysisCompleted() AnalysisCompletedPtrOutput {
	return o.ApplyT(func(v *Discovered) *AnalysisCompleted {
		if v == nil {
			return nil
		}
		return v.AnalysisCompleted
	}).(AnalysisCompletedPtrOutput)
}

// Indicates any errors encountered during analysis of a resource. There could be 0 or more of these errors.
func (o DiscoveredPtrOutput) AnalysisError() StatusArrayOutput {
	return o.ApplyT(func(v *Discovered) []Status {
		if v == nil {
			return nil
		}
		return v.AnalysisError
	}).(StatusArrayOutput)
}

// The status of discovery for the resource.
func (o DiscoveredPtrOutput) AnalysisStatus() DiscoveredAnalysisStatusPtrOutput {
	return o.ApplyT(func(v *Discovered) *DiscoveredAnalysisStatus {
		if v == nil {
			return nil
		}
		return v.AnalysisStatus
	}).(DiscoveredAnalysisStatusPtrOutput)
}

// When an error is encountered this will contain a LocalizedMessage under details to show to the user. The LocalizedMessage is output only and populated by the API.
func (o DiscoveredPtrOutput) AnalysisStatusError() StatusPtrOutput {
	return o.ApplyT(func(v *Discovered) *Status {
		if v == nil {
			return nil
		}
		return v.AnalysisStatusError
	}).(StatusPtrOutput)
}

// Whether the resource is continuously analyzed.
func (o DiscoveredPtrOutput) ContinuousAnalysis() DiscoveredContinuousAnalysisPtrOutput {
	return o.ApplyT(func(v *Discovered) *DiscoveredContinuousAnalysis {
		if v == nil {
			return nil
		}
		return v.ContinuousAnalysis
	}).(DiscoveredContinuousAnalysisPtrOutput)
}

// The last time continuous analysis was done for this resource. Deprecated, do not use.
//
// Deprecated: The last time continuous analysis was done for this resource. Deprecated, do not use.
func (o DiscoveredPtrOutput) LastAnalysisTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Discovered) *string {
		if v == nil {
			return nil
		}
		return v.LastAnalysisTime
	}).(pulumi.StringPtrOutput)
}

// The last time this resource was scanned.
func (o DiscoveredPtrOutput) LastScanTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Discovered) *string {
		if v == nil {
			return nil
		}
		return v.LastScanTime
	}).(pulumi.StringPtrOutput)
}

// The status of an SBOM generation.
func (o DiscoveredPtrOutput) SbomStatus() SBOMStatusPtrOutput {
	return o.ApplyT(func(v *Discovered) *SBOMStatus {
		if v == nil {
			return nil
		}
		return v.SbomStatus
	}).(SBOMStatusPtrOutput)
}

// Provides information about the analysis status of a discovered resource.
type DiscoveredResponse struct {
	AnalysisCompleted AnalysisCompletedResponse `pulumi:"analysisCompleted"`
	// Indicates any errors encountered during analysis of a resource. There could be 0 or more of these errors.
	AnalysisError []StatusResponse `pulumi:"analysisError"`
	// The status of discovery for the resource.
	AnalysisStatus string `pulumi:"analysisStatus"`
	// When an error is encountered this will contain a LocalizedMessage under details to show to the user. The LocalizedMessage is output only and populated by the API.
	AnalysisStatusError StatusResponse `pulumi:"analysisStatusError"`
	// Whether the resource is continuously analyzed.
	ContinuousAnalysis string `pulumi:"continuousAnalysis"`
	// The last time continuous analysis was done for this resource. Deprecated, do not use.
	//
	// Deprecated: The last time continuous analysis was done for this resource. Deprecated, do not use.
	LastAnalysisTime string `pulumi:"lastAnalysisTime"`
	// The last time this resource was scanned.
	LastScanTime string `pulumi:"lastScanTime"`
	// The status of an SBOM generation.
	SbomStatus SBOMStatusResponse `pulumi:"sbomStatus"`
}

// Provides information about the analysis status of a discovered resource.
type DiscoveredResponseOutput struct{ *pulumi.OutputState }

func (DiscoveredResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiscoveredResponse)(nil)).Elem()
}

func (o DiscoveredResponseOutput) ToDiscoveredResponseOutput() DiscoveredResponseOutput {
	return o
}

func (o DiscoveredResponseOutput) ToDiscoveredResponseOutputWithContext(ctx context.Context) DiscoveredResponseOutput {
	return o
}

func (o DiscoveredResponseOutput) AnalysisCompleted() AnalysisCompletedResponseOutput {
	return o.ApplyT(func(v DiscoveredResponse) AnalysisCompletedResponse { return v.AnalysisCompleted }).(AnalysisCompletedResponseOutput)
}

// Indicates any errors encountered during analysis of a resource. There could be 0 or more of these errors.
func (o DiscoveredResponseOutput) AnalysisError() StatusResponseArrayOutput {
	return o.ApplyT(func(v DiscoveredResponse) []StatusResponse { return v.AnalysisError }).(StatusResponseArrayOutput)
}

// The status of discovery for the resource.
func (o DiscoveredResponseOutput) AnalysisStatus() pulumi.StringOutput {
	return o.ApplyT(func(v DiscoveredResponse) string { return v.AnalysisStatus }).(pulumi.StringOutput)
}

// When an error is encountered this will contain a LocalizedMessage under details to show to the user. The LocalizedMessage is output only and populated by the API.
func (o DiscoveredResponseOutput) AnalysisStatusError() StatusResponseOutput {
	return o.ApplyT(func(v DiscoveredResponse) StatusResponse { return v.AnalysisStatusError }).(StatusResponseOutput)
}

// Whether the resource is continuously analyzed.
func (o DiscoveredResponseOutput) ContinuousAnalysis() pulumi.StringOutput {
	return o.ApplyT(func(v DiscoveredResponse) string { return v.ContinuousAnalysis }).(pulumi.StringOutput)
}

// The last time continuous analysis was done for this resource. Deprecated, do not use.
//
// Deprecated: The last time continuous analysis was done for this resource. Deprecated, do not use.
func (o DiscoveredResponseOutput) LastAnalysisTime() pulumi.StringOutput {
	return o.ApplyT(func(v DiscoveredResponse) string { return v.LastAnalysisTime }).(pulumi.StringOutput)
}

// The last time this resource was scanned.
func (o DiscoveredResponseOutput) LastScanTime() pulumi.StringOutput {
	return o.ApplyT(func(v DiscoveredResponse) string { return v.LastScanTime }).(pulumi.StringOutput)
}

// The status of an SBOM generation.
func (o DiscoveredResponseOutput) SbomStatus() SBOMStatusResponseOutput {
	return o.ApplyT(func(v DiscoveredResponse) SBOMStatusResponse { return v.SbomStatus }).(SBOMStatusResponseOutput)
}

// A note that indicates a type of analysis a provider would perform. This note exists in a provider's project. A `Discovery` occurrence is created in a consumer's project at the start of analysis.
type Discovery struct {
	// Immutable. The kind of analysis that is handled by this discovery.
	AnalysisKind DiscoveryAnalysisKind `pulumi:"analysisKind"`
}

// DiscoveryInput is an input type that accepts DiscoveryArgs and DiscoveryOutput values.
// You can construct a concrete instance of `DiscoveryInput` via:
//
//	DiscoveryArgs{...}
type DiscoveryInput interface {
	pulumi.Input

	ToDiscoveryOutput() DiscoveryOutput
	ToDiscoveryOutputWithContext(context.Context) DiscoveryOutput
}

// A note that indicates a type of analysis a provider would perform. This note exists in a provider's project. A `Discovery` occurrence is created in a consumer's project at the start of analysis.
type DiscoveryArgs struct {
	// Immutable. The kind of analysis that is handled by this discovery.
	AnalysisKind DiscoveryAnalysisKindInput `pulumi:"analysisKind"`
}

func (DiscoveryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Discovery)(nil)).Elem()
}

func (i DiscoveryArgs) ToDiscoveryOutput() DiscoveryOutput {
	return i.ToDiscoveryOutputWithContext(context.Background())
}

func (i DiscoveryArgs) ToDiscoveryOutputWithContext(ctx context.Context) DiscoveryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiscoveryOutput)
}

func (i DiscoveryArgs) ToDiscoveryPtrOutput() DiscoveryPtrOutput {
	return i.ToDiscoveryPtrOutputWithContext(context.Background())
}

func (i DiscoveryArgs) ToDiscoveryPtrOutputWithContext(ctx context.Context) DiscoveryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiscoveryOutput).ToDiscoveryPtrOutputWithContext(ctx)
}

// DiscoveryPtrInput is an input type that accepts DiscoveryArgs, DiscoveryPtr and DiscoveryPtrOutput values.
// You can construct a concrete instance of `DiscoveryPtrInput` via:
//
//	        DiscoveryArgs{...}
//
//	or:
//
//	        nil
type DiscoveryPtrInput interface {
	pulumi.Input

	ToDiscoveryPtrOutput() DiscoveryPtrOutput
	ToDiscoveryPtrOutputWithContext(context.Context) DiscoveryPtrOutput
}

type discoveryPtrType DiscoveryArgs

func DiscoveryPtr(v *DiscoveryArgs) DiscoveryPtrInput {
	return (*discoveryPtrType)(v)
}

func (*discoveryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Discovery)(nil)).Elem()
}

func (i *discoveryPtrType) ToDiscoveryPtrOutput() DiscoveryPtrOutput {
	return i.ToDiscoveryPtrOutputWithContext(context.Background())
}

func (i *discoveryPtrType) ToDiscoveryPtrOutputWithContext(ctx context.Context) DiscoveryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiscoveryPtrOutput)
}

// A note that indicates a type of analysis a provider would perform. This note exists in a provider's project. A `Discovery` occurrence is created in a consumer's project at the start of analysis.
type DiscoveryOutput struct{ *pulumi.OutputState }

func (DiscoveryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Discovery)(nil)).Elem()
}

func (o DiscoveryOutput) ToDiscoveryOutput() DiscoveryOutput {
	return o
}

func (o DiscoveryOutput) ToDiscoveryOutputWithContext(ctx context.Context) DiscoveryOutput {
	return o
}

func (o DiscoveryOutput) ToDiscoveryPtrOutput() DiscoveryPtrOutput {
	return o.ToDiscoveryPtrOutputWithContext(context.Background())
}

func (o DiscoveryOutput) ToDiscoveryPtrOutputWithContext(ctx context.Context) DiscoveryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Discovery) *Discovery {
		return &v
	}).(DiscoveryPtrOutput)
}

// Immutable. The kind of analysis that is handled by this discovery.
func (o DiscoveryOutput) AnalysisKind() DiscoveryAnalysisKindOutput {
	return o.ApplyT(func(v Discovery) DiscoveryAnalysisKind { return v.AnalysisKind }).(DiscoveryAnalysisKindOutput)
}

type DiscoveryPtrOutput struct{ *pulumi.OutputState }

func (DiscoveryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Discovery)(nil)).Elem()
}

func (o DiscoveryPtrOutput) ToDiscoveryPtrOutput() DiscoveryPtrOutput {
	return o
}

func (o DiscoveryPtrOutput) ToDiscoveryPtrOutputWithContext(ctx context.Context) DiscoveryPtrOutput {
	return o
}

func (o DiscoveryPtrOutput) Elem() DiscoveryOutput {
	return o.ApplyT(func(v *Discovery) Discovery {
		if v != nil {
			return *v
		}
		var ret Discovery
		return ret
	}).(DiscoveryOutput)
}

// Immutable. The kind of analysis that is handled by this discovery.
func (o DiscoveryPtrOutput) AnalysisKind() DiscoveryAnalysisKindPtrOutput {
	return o.ApplyT(func(v *Discovery) *DiscoveryAnalysisKind {
		if v == nil {
			return nil
		}
		return &v.AnalysisKind
	}).(DiscoveryAnalysisKindPtrOutput)
}

// A note that indicates a type of analysis a provider would perform. This note exists in a provider's project. A `Discovery` occurrence is created in a consumer's project at the start of analysis.
type DiscoveryResponse struct {
	// Immutable. The kind of analysis that is handled by this discovery.
	AnalysisKind string `pulumi:"analysisKind"`
}

// A note that indicates a type of analysis a provider would perform. This note exists in a provider's project. A `Discovery` occurrence is created in a consumer's project at the start of analysis.
type DiscoveryResponseOutput struct{ *pulumi.OutputState }

func (DiscoveryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiscoveryResponse)(nil)).Elem()
}

func (o DiscoveryResponseOutput) ToDiscoveryResponseOutput() DiscoveryResponseOutput {
	return o
}

func (o DiscoveryResponseOutput) ToDiscoveryResponseOutputWithContext(ctx context.Context) DiscoveryResponseOutput {
	return o
}

// Immutable. The kind of analysis that is handled by this discovery.
func (o DiscoveryResponseOutput) AnalysisKind() pulumi.StringOutput {
	return o.ApplyT(func(v DiscoveryResponse) string { return v.AnalysisKind }).(pulumi.StringOutput)
}

// This represents a particular channel of distribution for a given package. E.g., Debian's jessie-backports dpkg mirror.
type Distribution struct {
	// The CPU architecture for which packages in this distribution channel were built.
	Architecture *DistributionArchitecture `pulumi:"architecture"`
	// The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
	CpeUri string `pulumi:"cpeUri"`
	// The distribution channel-specific description of this package.
	Description *string `pulumi:"description"`
	// The latest available version of this package in this distribution channel.
	LatestVersion *Version `pulumi:"latestVersion"`
	// A freeform string denoting the maintainer of this package.
	Maintainer *string `pulumi:"maintainer"`
	// The distribution channel-specific homepage for this package.
	Url *string `pulumi:"url"`
}

// DistributionInput is an input type that accepts DistributionArgs and DistributionOutput values.
// You can construct a concrete instance of `DistributionInput` via:
//
//	DistributionArgs{...}
type DistributionInput interface {
	pulumi.Input

	ToDistributionOutput() DistributionOutput
	ToDistributionOutputWithContext(context.Context) DistributionOutput
}

// This represents a particular channel of distribution for a given package. E.g., Debian's jessie-backports dpkg mirror.
type DistributionArgs struct {
	// The CPU architecture for which packages in this distribution channel were built.
	Architecture DistributionArchitecturePtrInput `pulumi:"architecture"`
	// The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
	CpeUri pulumi.StringInput `pulumi:"cpeUri"`
	// The distribution channel-specific description of this package.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The latest available version of this package in this distribution channel.
	LatestVersion VersionPtrInput `pulumi:"latestVersion"`
	// A freeform string denoting the maintainer of this package.
	Maintainer pulumi.StringPtrInput `pulumi:"maintainer"`
	// The distribution channel-specific homepage for this package.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (DistributionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Distribution)(nil)).Elem()
}

func (i DistributionArgs) ToDistributionOutput() DistributionOutput {
	return i.ToDistributionOutputWithContext(context.Background())
}

func (i DistributionArgs) ToDistributionOutputWithContext(ctx context.Context) DistributionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionOutput)
}

// DistributionArrayInput is an input type that accepts DistributionArray and DistributionArrayOutput values.
// You can construct a concrete instance of `DistributionArrayInput` via:
//
//	DistributionArray{ DistributionArgs{...} }
type DistributionArrayInput interface {
	pulumi.Input

	ToDistributionArrayOutput() DistributionArrayOutput
	ToDistributionArrayOutputWithContext(context.Context) DistributionArrayOutput
}

type DistributionArray []DistributionInput

func (DistributionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Distribution)(nil)).Elem()
}

func (i DistributionArray) ToDistributionArrayOutput() DistributionArrayOutput {
	return i.ToDistributionArrayOutputWithContext(context.Background())
}

func (i DistributionArray) ToDistributionArrayOutputWithContext(ctx context.Context) DistributionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionArrayOutput)
}

// This represents a particular channel of distribution for a given package. E.g., Debian's jessie-backports dpkg mirror.
type DistributionOutput struct{ *pulumi.OutputState }

func (DistributionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Distribution)(nil)).Elem()
}

func (o DistributionOutput) ToDistributionOutput() DistributionOutput {
	return o
}

func (o DistributionOutput) ToDistributionOutputWithContext(ctx context.Context) DistributionOutput {
	return o
}

// The CPU architecture for which packages in this distribution channel were built.
func (o DistributionOutput) Architecture() DistributionArchitecturePtrOutput {
	return o.ApplyT(func(v Distribution) *DistributionArchitecture { return v.Architecture }).(DistributionArchitecturePtrOutput)
}

// The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
func (o DistributionOutput) CpeUri() pulumi.StringOutput {
	return o.ApplyT(func(v Distribution) string { return v.CpeUri }).(pulumi.StringOutput)
}

// The distribution channel-specific description of this package.
func (o DistributionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Distribution) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The latest available version of this package in this distribution channel.
func (o DistributionOutput) LatestVersion() VersionPtrOutput {
	return o.ApplyT(func(v Distribution) *Version { return v.LatestVersion }).(VersionPtrOutput)
}

// A freeform string denoting the maintainer of this package.
func (o DistributionOutput) Maintainer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Distribution) *string { return v.Maintainer }).(pulumi.StringPtrOutput)
}

// The distribution channel-specific homepage for this package.
func (o DistributionOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Distribution) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type DistributionArrayOutput struct{ *pulumi.OutputState }

func (DistributionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Distribution)(nil)).Elem()
}

func (o DistributionArrayOutput) ToDistributionArrayOutput() DistributionArrayOutput {
	return o
}

func (o DistributionArrayOutput) ToDistributionArrayOutputWithContext(ctx context.Context) DistributionArrayOutput {
	return o
}

func (o DistributionArrayOutput) Index(i pulumi.IntInput) DistributionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Distribution {
		return vs[0].([]Distribution)[vs[1].(int)]
	}).(DistributionOutput)
}

// This represents a particular channel of distribution for a given package. E.g., Debian's jessie-backports dpkg mirror.
type DistributionResponse struct {
	// The CPU architecture for which packages in this distribution channel were built.
	Architecture string `pulumi:"architecture"`
	// The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
	CpeUri string `pulumi:"cpeUri"`
	// The distribution channel-specific description of this package.
	Description string `pulumi:"description"`
	// The latest available version of this package in this distribution channel.
	LatestVersion VersionResponse `pulumi:"latestVersion"`
	// A freeform string denoting the maintainer of this package.
	Maintainer string `pulumi:"maintainer"`
	// The distribution channel-specific homepage for this package.
	Url string `pulumi:"url"`
}

// This represents a particular channel of distribution for a given package. E.g., Debian's jessie-backports dpkg mirror.
type DistributionResponseOutput struct{ *pulumi.OutputState }

func (DistributionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionResponse)(nil)).Elem()
}

func (o DistributionResponseOutput) ToDistributionResponseOutput() DistributionResponseOutput {
	return o
}

func (o DistributionResponseOutput) ToDistributionResponseOutputWithContext(ctx context.Context) DistributionResponseOutput {
	return o
}

// The CPU architecture for which packages in this distribution channel were built.
func (o DistributionResponseOutput) Architecture() pulumi.StringOutput {
	return o.ApplyT(func(v DistributionResponse) string { return v.Architecture }).(pulumi.StringOutput)
}

// The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
func (o DistributionResponseOutput) CpeUri() pulumi.StringOutput {
	return o.ApplyT(func(v DistributionResponse) string { return v.CpeUri }).(pulumi.StringOutput)
}

// The distribution channel-specific description of this package.
func (o DistributionResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v DistributionResponse) string { return v.Description }).(pulumi.StringOutput)
}

// The latest available version of this package in this distribution channel.
func (o DistributionResponseOutput) LatestVersion() VersionResponseOutput {
	return o.ApplyT(func(v DistributionResponse) VersionResponse { return v.LatestVersion }).(VersionResponseOutput)
}

// A freeform string denoting the maintainer of this package.
func (o DistributionResponseOutput) Maintainer() pulumi.StringOutput {
	return o.ApplyT(func(v DistributionResponse) string { return v.Maintainer }).(pulumi.StringOutput)
}

// The distribution channel-specific homepage for this package.
func (o DistributionResponseOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v DistributionResponse) string { return v.Url }).(pulumi.StringOutput)
}

type DistributionResponseArrayOutput struct{ *pulumi.OutputState }

func (DistributionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DistributionResponse)(nil)).Elem()
}

func (o DistributionResponseArrayOutput) ToDistributionResponseArrayOutput() DistributionResponseArrayOutput {
	return o
}

func (o DistributionResponseArrayOutput) ToDistributionResponseArrayOutputWithContext(ctx context.Context) DistributionResponseArrayOutput {
	return o
}

func (o DistributionResponseArrayOutput) Index(i pulumi.IntInput) DistributionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DistributionResponse {
		return vs[0].([]DistributionResponse)[vs[1].(int)]
	}).(DistributionResponseOutput)
}

// DocumentNote represents an SPDX Document Creation Information section: https://spdx.github.io/spdx-spec/2-document-creation-information/
type DocumentNote struct {
	// Compliance with the SPDX specification includes populating the SPDX fields therein with data related to such fields ("SPDX-Metadata")
	DataLicence *string `pulumi:"dataLicence"`
	// Provide a reference number that can be used to understand how to parse and interpret the rest of the file
	SpdxVersion *string `pulumi:"spdxVersion"`
}

// DocumentNoteInput is an input type that accepts DocumentNoteArgs and DocumentNoteOutput values.
// You can construct a concrete instance of `DocumentNoteInput` via:
//
//	DocumentNoteArgs{...}
type DocumentNoteInput interface {
	pulumi.Input

	ToDocumentNoteOutput() DocumentNoteOutput
	ToDocumentNoteOutputWithContext(context.Context) DocumentNoteOutput
}

// DocumentNote represents an SPDX Document Creation Information section: https://spdx.github.io/spdx-spec/2-document-creation-information/
type DocumentNoteArgs struct {
	// Compliance with the SPDX specification includes populating the SPDX fields therein with data related to such fields ("SPDX-Metadata")
	DataLicence pulumi.StringPtrInput `pulumi:"dataLicence"`
	// Provide a reference number that can be used to understand how to parse and interpret the rest of the file
	SpdxVersion pulumi.StringPtrInput `pulumi:"spdxVersion"`
}

func (DocumentNoteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DocumentNote)(nil)).Elem()
}

func (i DocumentNoteArgs) ToDocumentNoteOutput() DocumentNoteOutput {
	return i.ToDocumentNoteOutputWithContext(context.Background())
}

func (i DocumentNoteArgs) ToDocumentNoteOutputWithContext(ctx context.Context) DocumentNoteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentNoteOutput)
}

func (i DocumentNoteArgs) ToDocumentNotePtrOutput() DocumentNotePtrOutput {
	return i.ToDocumentNotePtrOutputWithContext(context.Background())
}

func (i DocumentNoteArgs) ToDocumentNotePtrOutputWithContext(ctx context.Context) DocumentNotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentNoteOutput).ToDocumentNotePtrOutputWithContext(ctx)
}

// DocumentNotePtrInput is an input type that accepts DocumentNoteArgs, DocumentNotePtr and DocumentNotePtrOutput values.
// You can construct a concrete instance of `DocumentNotePtrInput` via:
//
//	        DocumentNoteArgs{...}
//
//	or:
//
//	        nil
type DocumentNotePtrInput interface {
	pulumi.Input

	ToDocumentNotePtrOutput() DocumentNotePtrOutput
	ToDocumentNotePtrOutputWithContext(context.Context) DocumentNotePtrOutput
}

type documentNotePtrType DocumentNoteArgs

func DocumentNotePtr(v *DocumentNoteArgs) DocumentNotePtrInput {
	return (*documentNotePtrType)(v)
}

func (*documentNotePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DocumentNote)(nil)).Elem()
}

func (i *documentNotePtrType) ToDocumentNotePtrOutput() DocumentNotePtrOutput {
	return i.ToDocumentNotePtrOutputWithContext(context.Background())
}

func (i *documentNotePtrType) ToDocumentNotePtrOutputWithContext(ctx context.Context) DocumentNotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentNotePtrOutput)
}

// DocumentNote represents an SPDX Document Creation Information section: https://spdx.github.io/spdx-spec/2-document-creation-information/
type DocumentNoteOutput struct{ *pulumi.OutputState }

func (DocumentNoteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DocumentNote)(nil)).Elem()
}

func (o DocumentNoteOutput) ToDocumentNoteOutput() DocumentNoteOutput {
	return o
}

func (o DocumentNoteOutput) ToDocumentNoteOutputWithContext(ctx context.Context) DocumentNoteOutput {
	return o
}

func (o DocumentNoteOutput) ToDocumentNotePtrOutput() DocumentNotePtrOutput {
	return o.ToDocumentNotePtrOutputWithContext(context.Background())
}

func (o DocumentNoteOutput) ToDocumentNotePtrOutputWithContext(ctx context.Context) DocumentNotePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DocumentNote) *DocumentNote {
		return &v
	}).(DocumentNotePtrOutput)
}

// Compliance with the SPDX specification includes populating the SPDX fields therein with data related to such fields ("SPDX-Metadata")
func (o DocumentNoteOutput) DataLicence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DocumentNote) *string { return v.DataLicence }).(pulumi.StringPtrOutput)
}

// Provide a reference number that can be used to understand how to parse and interpret the rest of the file
func (o DocumentNoteOutput) SpdxVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DocumentNote) *string { return v.SpdxVersion }).(pulumi.StringPtrOutput)
}

type DocumentNotePtrOutput struct{ *pulumi.OutputState }

func (DocumentNotePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DocumentNote)(nil)).Elem()
}

func (o DocumentNotePtrOutput) ToDocumentNotePtrOutput() DocumentNotePtrOutput {
	return o
}

func (o DocumentNotePtrOutput) ToDocumentNotePtrOutputWithContext(ctx context.Context) DocumentNotePtrOutput {
	return o
}

func (o DocumentNotePtrOutput) Elem() DocumentNoteOutput {
	return o.ApplyT(func(v *DocumentNote) DocumentNote {
		if v != nil {
			return *v
		}
		var ret DocumentNote
		return ret
	}).(DocumentNoteOutput)
}

// Compliance with the SPDX specification includes populating the SPDX fields therein with data related to such fields ("SPDX-Metadata")
func (o DocumentNotePtrOutput) DataLicence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DocumentNote) *string {
		if v == nil {
			return nil
		}
		return v.DataLicence
	}).(pulumi.StringPtrOutput)
}

// Provide a reference number that can be used to understand how to parse and interpret the rest of the file
func (o DocumentNotePtrOutput) SpdxVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DocumentNote) *string {
		if v == nil {
			return nil
		}
		return v.SpdxVersion
	}).(pulumi.StringPtrOutput)
}

// DocumentNote represents an SPDX Document Creation Information section: https://spdx.github.io/spdx-spec/2-document-creation-information/
type DocumentNoteResponse struct {
	// Compliance with the SPDX specification includes populating the SPDX fields therein with data related to such fields ("SPDX-Metadata")
	DataLicence string `pulumi:"dataLicence"`
	// Provide a reference number that can be used to understand how to parse and interpret the rest of the file
	SpdxVersion string `pulumi:"spdxVersion"`
}

// DocumentNote represents an SPDX Document Creation Information section: https://spdx.github.io/spdx-spec/2-document-creation-information/
type DocumentNoteResponseOutput struct{ *pulumi.OutputState }

func (DocumentNoteResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DocumentNoteResponse)(nil)).Elem()
}

func (o DocumentNoteResponseOutput) ToDocumentNoteResponseOutput() DocumentNoteResponseOutput {
	return o
}

func (o DocumentNoteResponseOutput) ToDocumentNoteResponseOutputWithContext(ctx context.Context) DocumentNoteResponseOutput {
	return o
}

// Compliance with the SPDX specification includes populating the SPDX fields therein with data related to such fields ("SPDX-Metadata")
func (o DocumentNoteResponseOutput) DataLicence() pulumi.StringOutput {
	return o.ApplyT(func(v DocumentNoteResponse) string { return v.DataLicence }).(pulumi.StringOutput)
}

// Provide a reference number that can be used to understand how to parse and interpret the rest of the file
func (o DocumentNoteResponseOutput) SpdxVersion() pulumi.StringOutput {
	return o.ApplyT(func(v DocumentNoteResponse) string { return v.SpdxVersion }).(pulumi.StringOutput)
}

// DocumentOccurrence represents an SPDX Document Creation Information section: https://spdx.github.io/spdx-spec/2-document-creation-information/
type DocumentOccurrence struct {
	// Identify when the SPDX file was originally created. The date is to be specified according to combined date and time in UTC format as specified in ISO 8601 standard
	CreateTime *string `pulumi:"createTime"`
	// A field for creators of the SPDX file to provide general comments about the creation of the SPDX file or any other relevant comment not included in the other fields
	CreatorComment *string `pulumi:"creatorComment"`
	// Identify who (or what, in the case of a tool) created the SPDX file. If the SPDX file was created by an individual, indicate the person's name
	Creators []string `pulumi:"creators"`
	// A field for creators of the SPDX file content to provide comments to the consumers of the SPDX document
	DocumentComment *string `pulumi:"documentComment"`
	// Identify any external SPDX documents referenced within this SPDX document
	ExternalDocumentRefs []string `pulumi:"externalDocumentRefs"`
	// Identify the current SPDX document which may be referenced in relationships by other files, packages internally and documents externally
	Id *string `pulumi:"id"`
	// A field for creators of the SPDX file to provide the version of the SPDX License List used when the SPDX file was created
	LicenseListVersion *string `pulumi:"licenseListVersion"`
	// Provide an SPDX document specific namespace as a unique absolute Uniform Resource Identifier (URI) as specified in RFC-3986, with the exception of the ‘#’ delimiter
	Namespace *string `pulumi:"namespace"`
	// Identify name of this document as designated by creator
	Title *string `pulumi:"title"`
}

// DocumentOccurrenceInput is an input type that accepts DocumentOccurrenceArgs and DocumentOccurrenceOutput values.
// You can construct a concrete instance of `DocumentOccurrenceInput` via:
//
//	DocumentOccurrenceArgs{...}
type DocumentOccurrenceInput interface {
	pulumi.Input

	ToDocumentOccurrenceOutput() DocumentOccurrenceOutput
	ToDocumentOccurrenceOutputWithContext(context.Context) DocumentOccurrenceOutput
}

// DocumentOccurrence represents an SPDX Document Creation Information section: https://spdx.github.io/spdx-spec/2-document-creation-information/
type DocumentOccurrenceArgs struct {
	// Identify when the SPDX file was originally created. The date is to be specified according to combined date and time in UTC format as specified in ISO 8601 standard
	CreateTime pulumi.StringPtrInput `pulumi:"createTime"`
	// A field for creators of the SPDX file to provide general comments about the creation of the SPDX file or any other relevant comment not included in the other fields
	CreatorComment pulumi.StringPtrInput `pulumi:"creatorComment"`
	// Identify who (or what, in the case of a tool) created the SPDX file. If the SPDX file was created by an individual, indicate the person's name
	Creators pulumi.StringArrayInput `pulumi:"creators"`
	// A field for creators of the SPDX file content to provide comments to the consumers of the SPDX document
	DocumentComment pulumi.StringPtrInput `pulumi:"documentComment"`
	// Identify any external SPDX documents referenced within this SPDX document
	ExternalDocumentRefs pulumi.StringArrayInput `pulumi:"externalDocumentRefs"`
	// Identify the current SPDX document which may be referenced in relationships by other files, packages internally and documents externally
	Id pulumi.StringPtrInput `pulumi:"id"`
	// A field for creators of the SPDX file to provide the version of the SPDX License List used when the SPDX file was created
	LicenseListVersion pulumi.StringPtrInput `pulumi:"licenseListVersion"`
	// Provide an SPDX document specific namespace as a unique absolute Uniform Resource Identifier (URI) as specified in RFC-3986, with the exception of the ‘#’ delimiter
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Identify name of this document as designated by creator
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (DocumentOccurrenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DocumentOccurrence)(nil)).Elem()
}

func (i DocumentOccurrenceArgs) ToDocumentOccurrenceOutput() DocumentOccurrenceOutput {
	return i.ToDocumentOccurrenceOutputWithContext(context.Background())
}

func (i DocumentOccurrenceArgs) ToDocumentOccurrenceOutputWithContext(ctx context.Context) DocumentOccurrenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentOccurrenceOutput)
}

func (i DocumentOccurrenceArgs) ToDocumentOccurrencePtrOutput() DocumentOccurrencePtrOutput {
	return i.ToDocumentOccurrencePtrOutputWithContext(context.Background())
}

func (i DocumentOccurrenceArgs) ToDocumentOccurrencePtrOutputWithContext(ctx context.Context) DocumentOccurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentOccurrenceOutput).ToDocumentOccurrencePtrOutputWithContext(ctx)
}

// DocumentOccurrencePtrInput is an input type that accepts DocumentOccurrenceArgs, DocumentOccurrencePtr and DocumentOccurrencePtrOutput values.
// You can construct a concrete instance of `DocumentOccurrencePtrInput` via:
//
//	        DocumentOccurrenceArgs{...}
//
//	or:
//
//	        nil
type DocumentOccurrencePtrInput interface {
	pulumi.Input

	ToDocumentOccurrencePtrOutput() DocumentOccurrencePtrOutput
	ToDocumentOccurrencePtrOutputWithContext(context.Context) DocumentOccurrencePtrOutput
}

type documentOccurrencePtrType DocumentOccurrenceArgs

func DocumentOccurrencePtr(v *DocumentOccurrenceArgs) DocumentOccurrencePtrInput {
	return (*documentOccurrencePtrType)(v)
}

func (*documentOccurrencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DocumentOccurrence)(nil)).Elem()
}

func (i *documentOccurrencePtrType) ToDocumentOccurrencePtrOutput() DocumentOccurrencePtrOutput {
	return i.ToDocumentOccurrencePtrOutputWithContext(context.Background())
}

func (i *documentOccurrencePtrType) ToDocumentOccurrencePtrOutputWithContext(ctx context.Context) DocumentOccurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentOccurrencePtrOutput)
}

// DocumentOccurrence represents an SPDX Document Creation Information section: https://spdx.github.io/spdx-spec/2-document-creation-information/
type DocumentOccurrenceOutput struct{ *pulumi.OutputState }

func (DocumentOccurrenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DocumentOccurrence)(nil)).Elem()
}

func (o DocumentOccurrenceOutput) ToDocumentOccurrenceOutput() DocumentOccurrenceOutput {
	return o
}

func (o DocumentOccurrenceOutput) ToDocumentOccurrenceOutputWithContext(ctx context.Context) DocumentOccurrenceOutput {
	return o
}

func (o DocumentOccurrenceOutput) ToDocumentOccurrencePtrOutput() DocumentOccurrencePtrOutput {
	return o.ToDocumentOccurrencePtrOutputWithContext(context.Background())
}

func (o DocumentOccurrenceOutput) ToDocumentOccurrencePtrOutputWithContext(ctx context.Context) DocumentOccurrencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DocumentOccurrence) *DocumentOccurrence {
		return &v
	}).(DocumentOccurrencePtrOutput)
}

// Identify when the SPDX file was originally created. The date is to be specified according to combined date and time in UTC format as specified in ISO 8601 standard
func (o DocumentOccurrenceOutput) CreateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DocumentOccurrence) *string { return v.CreateTime }).(pulumi.StringPtrOutput)
}

// A field for creators of the SPDX file to provide general comments about the creation of the SPDX file or any other relevant comment not included in the other fields
func (o DocumentOccurrenceOutput) CreatorComment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DocumentOccurrence) *string { return v.CreatorComment }).(pulumi.StringPtrOutput)
}

// Identify who (or what, in the case of a tool) created the SPDX file. If the SPDX file was created by an individual, indicate the person's name
func (o DocumentOccurrenceOutput) Creators() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DocumentOccurrence) []string { return v.Creators }).(pulumi.StringArrayOutput)
}

// A field for creators of the SPDX file content to provide comments to the consumers of the SPDX document
func (o DocumentOccurrenceOutput) DocumentComment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DocumentOccurrence) *string { return v.DocumentComment }).(pulumi.StringPtrOutput)
}

// Identify any external SPDX documents referenced within this SPDX document
func (o DocumentOccurrenceOutput) ExternalDocumentRefs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DocumentOccurrence) []string { return v.ExternalDocumentRefs }).(pulumi.StringArrayOutput)
}

// Identify the current SPDX document which may be referenced in relationships by other files, packages internally and documents externally
func (o DocumentOccurrenceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DocumentOccurrence) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A field for creators of the SPDX file to provide the version of the SPDX License List used when the SPDX file was created
func (o DocumentOccurrenceOutput) LicenseListVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DocumentOccurrence) *string { return v.LicenseListVersion }).(pulumi.StringPtrOutput)
}

// Provide an SPDX document specific namespace as a unique absolute Uniform Resource Identifier (URI) as specified in RFC-3986, with the exception of the ‘#’ delimiter
func (o DocumentOccurrenceOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DocumentOccurrence) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Identify name of this document as designated by creator
func (o DocumentOccurrenceOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DocumentOccurrence) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type DocumentOccurrencePtrOutput struct{ *pulumi.OutputState }

func (DocumentOccurrencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DocumentOccurrence)(nil)).Elem()
}

func (o DocumentOccurrencePtrOutput) ToDocumentOccurrencePtrOutput() DocumentOccurrencePtrOutput {
	return o
}

func (o DocumentOccurrencePtrOutput) ToDocumentOccurrencePtrOutputWithContext(ctx context.Context) DocumentOccurrencePtrOutput {
	return o
}

func (o DocumentOccurrencePtrOutput) Elem() DocumentOccurrenceOutput {
	return o.ApplyT(func(v *DocumentOccurrence) DocumentOccurrence {
		if v != nil {
			return *v
		}
		var ret DocumentOccurrence
		return ret
	}).(DocumentOccurrenceOutput)
}

// Identify when the SPDX file was originally created. The date is to be specified according to combined date and time in UTC format as specified in ISO 8601 standard
func (o DocumentOccurrencePtrOutput) CreateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DocumentOccurrence) *string {
		if v == nil {
			return nil
		}
		return v.CreateTime
	}).(pulumi.StringPtrOutput)
}

// A field for creators of the SPDX file to provide general comments about the creation of the SPDX file or any other relevant comment not included in the other fields
func (o DocumentOccurrencePtrOutput) CreatorComment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DocumentOccurrence) *string {
		if v == nil {
			return nil
		}
		return v.CreatorComment
	}).(pulumi.StringPtrOutput)
}

// Identify who (or what, in the case of a tool) created the SPDX file. If the SPDX file was created by an individual, indicate the person's name
func (o DocumentOccurrencePtrOutput) Creators() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DocumentOccurrence) []string {
		if v == nil {
			return nil
		}
		return v.Creators
	}).(pulumi.StringArrayOutput)
}

// A field for creators of the SPDX file content to provide comments to the consumers of the SPDX document
func (o DocumentOccurrencePtrOutput) DocumentComment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DocumentOccurrence) *string {
		if v == nil {
			return nil
		}
		return v.DocumentComment
	}).(pulumi.StringPtrOutput)
}

// Identify any external SPDX documents referenced within this SPDX document
func (o DocumentOccurrencePtrOutput) ExternalDocumentRefs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DocumentOccurrence) []string {
		if v == nil {
			return nil
		}
		return v.ExternalDocumentRefs
	}).(pulumi.StringArrayOutput)
}

// Identify the current SPDX document which may be referenced in relationships by other files, packages internally and documents externally
func (o DocumentOccurrencePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DocumentOccurrence) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// A field for creators of the SPDX file to provide the version of the SPDX License List used when the SPDX file was created
func (o DocumentOccurrencePtrOutput) LicenseListVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DocumentOccurrence) *string {
		if v == nil {
			return nil
		}
		return v.LicenseListVersion
	}).(pulumi.StringPtrOutput)
}

// Provide an SPDX document specific namespace as a unique absolute Uniform Resource Identifier (URI) as specified in RFC-3986, with the exception of the ‘#’ delimiter
func (o DocumentOccurrencePtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DocumentOccurrence) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Identify name of this document as designated by creator
func (o DocumentOccurrencePtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DocumentOccurrence) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// DocumentOccurrence represents an SPDX Document Creation Information section: https://spdx.github.io/spdx-spec/2-document-creation-information/
type DocumentOccurrenceResponse struct {
	// Identify when the SPDX file was originally created. The date is to be specified according to combined date and time in UTC format as specified in ISO 8601 standard
	CreateTime string `pulumi:"createTime"`
	// A field for creators of the SPDX file to provide general comments about the creation of the SPDX file or any other relevant comment not included in the other fields
	CreatorComment string `pulumi:"creatorComment"`
	// Identify who (or what, in the case of a tool) created the SPDX file. If the SPDX file was created by an individual, indicate the person's name
	Creators []string `pulumi:"creators"`
	// A field for creators of the SPDX file content to provide comments to the consumers of the SPDX document
	DocumentComment string `pulumi:"documentComment"`
	// Identify any external SPDX documents referenced within this SPDX document
	ExternalDocumentRefs []string `pulumi:"externalDocumentRefs"`
	// A field for creators of the SPDX file to provide the version of the SPDX License List used when the SPDX file was created
	LicenseListVersion string `pulumi:"licenseListVersion"`
	// Provide an SPDX document specific namespace as a unique absolute Uniform Resource Identifier (URI) as specified in RFC-3986, with the exception of the ‘#’ delimiter
	Namespace string `pulumi:"namespace"`
	// Identify name of this document as designated by creator
	Title string `pulumi:"title"`
}

// DocumentOccurrence represents an SPDX Document Creation Information section: https://spdx.github.io/spdx-spec/2-document-creation-information/
type DocumentOccurrenceResponseOutput struct{ *pulumi.OutputState }

func (DocumentOccurrenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DocumentOccurrenceResponse)(nil)).Elem()
}

func (o DocumentOccurrenceResponseOutput) ToDocumentOccurrenceResponseOutput() DocumentOccurrenceResponseOutput {
	return o
}

func (o DocumentOccurrenceResponseOutput) ToDocumentOccurrenceResponseOutputWithContext(ctx context.Context) DocumentOccurrenceResponseOutput {
	return o
}

// Identify when the SPDX file was originally created. The date is to be specified according to combined date and time in UTC format as specified in ISO 8601 standard
func (o DocumentOccurrenceResponseOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v DocumentOccurrenceResponse) string { return v.CreateTime }).(pulumi.StringOutput)
}

// A field for creators of the SPDX file to provide general comments about the creation of the SPDX file or any other relevant comment not included in the other fields
func (o DocumentOccurrenceResponseOutput) CreatorComment() pulumi.StringOutput {
	return o.ApplyT(func(v DocumentOccurrenceResponse) string { return v.CreatorComment }).(pulumi.StringOutput)
}

// Identify who (or what, in the case of a tool) created the SPDX file. If the SPDX file was created by an individual, indicate the person's name
func (o DocumentOccurrenceResponseOutput) Creators() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DocumentOccurrenceResponse) []string { return v.Creators }).(pulumi.StringArrayOutput)
}

// A field for creators of the SPDX file content to provide comments to the consumers of the SPDX document
func (o DocumentOccurrenceResponseOutput) DocumentComment() pulumi.StringOutput {
	return o.ApplyT(func(v DocumentOccurrenceResponse) string { return v.DocumentComment }).(pulumi.StringOutput)
}

// Identify any external SPDX documents referenced within this SPDX document
func (o DocumentOccurrenceResponseOutput) ExternalDocumentRefs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DocumentOccurrenceResponse) []string { return v.ExternalDocumentRefs }).(pulumi.StringArrayOutput)
}

// A field for creators of the SPDX file to provide the version of the SPDX License List used when the SPDX file was created
func (o DocumentOccurrenceResponseOutput) LicenseListVersion() pulumi.StringOutput {
	return o.ApplyT(func(v DocumentOccurrenceResponse) string { return v.LicenseListVersion }).(pulumi.StringOutput)
}

// Provide an SPDX document specific namespace as a unique absolute Uniform Resource Identifier (URI) as specified in RFC-3986, with the exception of the ‘#’ delimiter
func (o DocumentOccurrenceResponseOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v DocumentOccurrenceResponse) string { return v.Namespace }).(pulumi.StringOutput)
}

// Identify name of this document as designated by creator
func (o DocumentOccurrenceResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v DocumentOccurrenceResponse) string { return v.Title }).(pulumi.StringOutput)
}

// MUST match https://github.com/secure-systems-lab/dsse/blob/master/envelope.proto. An authenticated message of arbitrary type.
type Envelope struct {
	Payload     *string             `pulumi:"payload"`
	PayloadType *string             `pulumi:"payloadType"`
	Signatures  []EnvelopeSignature `pulumi:"signatures"`
}

// EnvelopeInput is an input type that accepts EnvelopeArgs and EnvelopeOutput values.
// You can construct a concrete instance of `EnvelopeInput` via:
//
//	EnvelopeArgs{...}
type EnvelopeInput interface {
	pulumi.Input

	ToEnvelopeOutput() EnvelopeOutput
	ToEnvelopeOutputWithContext(context.Context) EnvelopeOutput
}

// MUST match https://github.com/secure-systems-lab/dsse/blob/master/envelope.proto. An authenticated message of arbitrary type.
type EnvelopeArgs struct {
	Payload     pulumi.StringPtrInput       `pulumi:"payload"`
	PayloadType pulumi.StringPtrInput       `pulumi:"payloadType"`
	Signatures  EnvelopeSignatureArrayInput `pulumi:"signatures"`
}

func (EnvelopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Envelope)(nil)).Elem()
}

func (i EnvelopeArgs) ToEnvelopeOutput() EnvelopeOutput {
	return i.ToEnvelopeOutputWithContext(context.Background())
}

func (i EnvelopeArgs) ToEnvelopeOutputWithContext(ctx context.Context) EnvelopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvelopeOutput)
}

func (i EnvelopeArgs) ToEnvelopePtrOutput() EnvelopePtrOutput {
	return i.ToEnvelopePtrOutputWithContext(context.Background())
}

func (i EnvelopeArgs) ToEnvelopePtrOutputWithContext(ctx context.Context) EnvelopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvelopeOutput).ToEnvelopePtrOutputWithContext(ctx)
}

// EnvelopePtrInput is an input type that accepts EnvelopeArgs, EnvelopePtr and EnvelopePtrOutput values.
// You can construct a concrete instance of `EnvelopePtrInput` via:
//
//	        EnvelopeArgs{...}
//
//	or:
//
//	        nil
type EnvelopePtrInput interface {
	pulumi.Input

	ToEnvelopePtrOutput() EnvelopePtrOutput
	ToEnvelopePtrOutputWithContext(context.Context) EnvelopePtrOutput
}

type envelopePtrType EnvelopeArgs

func EnvelopePtr(v *EnvelopeArgs) EnvelopePtrInput {
	return (*envelopePtrType)(v)
}

func (*envelopePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Envelope)(nil)).Elem()
}

func (i *envelopePtrType) ToEnvelopePtrOutput() EnvelopePtrOutput {
	return i.ToEnvelopePtrOutputWithContext(context.Background())
}

func (i *envelopePtrType) ToEnvelopePtrOutputWithContext(ctx context.Context) EnvelopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvelopePtrOutput)
}

// MUST match https://github.com/secure-systems-lab/dsse/blob/master/envelope.proto. An authenticated message of arbitrary type.
type EnvelopeOutput struct{ *pulumi.OutputState }

func (EnvelopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Envelope)(nil)).Elem()
}

func (o EnvelopeOutput) ToEnvelopeOutput() EnvelopeOutput {
	return o
}

func (o EnvelopeOutput) ToEnvelopeOutputWithContext(ctx context.Context) EnvelopeOutput {
	return o
}

func (o EnvelopeOutput) ToEnvelopePtrOutput() EnvelopePtrOutput {
	return o.ToEnvelopePtrOutputWithContext(context.Background())
}

func (o EnvelopeOutput) ToEnvelopePtrOutputWithContext(ctx context.Context) EnvelopePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Envelope) *Envelope {
		return &v
	}).(EnvelopePtrOutput)
}

func (o EnvelopeOutput) Payload() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Envelope) *string { return v.Payload }).(pulumi.StringPtrOutput)
}

func (o EnvelopeOutput) PayloadType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Envelope) *string { return v.PayloadType }).(pulumi.StringPtrOutput)
}

func (o EnvelopeOutput) Signatures() EnvelopeSignatureArrayOutput {
	return o.ApplyT(func(v Envelope) []EnvelopeSignature { return v.Signatures }).(EnvelopeSignatureArrayOutput)
}

type EnvelopePtrOutput struct{ *pulumi.OutputState }

func (EnvelopePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Envelope)(nil)).Elem()
}

func (o EnvelopePtrOutput) ToEnvelopePtrOutput() EnvelopePtrOutput {
	return o
}

func (o EnvelopePtrOutput) ToEnvelopePtrOutputWithContext(ctx context.Context) EnvelopePtrOutput {
	return o
}

func (o EnvelopePtrOutput) Elem() EnvelopeOutput {
	return o.ApplyT(func(v *Envelope) Envelope {
		if v != nil {
			return *v
		}
		var ret Envelope
		return ret
	}).(EnvelopeOutput)
}

func (o EnvelopePtrOutput) Payload() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Envelope) *string {
		if v == nil {
			return nil
		}
		return v.Payload
	}).(pulumi.StringPtrOutput)
}

func (o EnvelopePtrOutput) PayloadType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Envelope) *string {
		if v == nil {
			return nil
		}
		return v.PayloadType
	}).(pulumi.StringPtrOutput)
}

func (o EnvelopePtrOutput) Signatures() EnvelopeSignatureArrayOutput {
	return o.ApplyT(func(v *Envelope) []EnvelopeSignature {
		if v == nil {
			return nil
		}
		return v.Signatures
	}).(EnvelopeSignatureArrayOutput)
}

// MUST match https://github.com/secure-systems-lab/dsse/blob/master/envelope.proto. An authenticated message of arbitrary type.
type EnvelopeResponse struct {
	Payload     string                      `pulumi:"payload"`
	PayloadType string                      `pulumi:"payloadType"`
	Signatures  []EnvelopeSignatureResponse `pulumi:"signatures"`
}

// MUST match https://github.com/secure-systems-lab/dsse/blob/master/envelope.proto. An authenticated message of arbitrary type.
type EnvelopeResponseOutput struct{ *pulumi.OutputState }

func (EnvelopeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvelopeResponse)(nil)).Elem()
}

func (o EnvelopeResponseOutput) ToEnvelopeResponseOutput() EnvelopeResponseOutput {
	return o
}

func (o EnvelopeResponseOutput) ToEnvelopeResponseOutputWithContext(ctx context.Context) EnvelopeResponseOutput {
	return o
}

func (o EnvelopeResponseOutput) Payload() pulumi.StringOutput {
	return o.ApplyT(func(v EnvelopeResponse) string { return v.Payload }).(pulumi.StringOutput)
}

func (o EnvelopeResponseOutput) PayloadType() pulumi.StringOutput {
	return o.ApplyT(func(v EnvelopeResponse) string { return v.PayloadType }).(pulumi.StringOutput)
}

func (o EnvelopeResponseOutput) Signatures() EnvelopeSignatureResponseArrayOutput {
	return o.ApplyT(func(v EnvelopeResponse) []EnvelopeSignatureResponse { return v.Signatures }).(EnvelopeSignatureResponseArrayOutput)
}

type EnvelopeSignature struct {
	Keyid *string `pulumi:"keyid"`
	Sig   *string `pulumi:"sig"`
}

// EnvelopeSignatureInput is an input type that accepts EnvelopeSignatureArgs and EnvelopeSignatureOutput values.
// You can construct a concrete instance of `EnvelopeSignatureInput` via:
//
//	EnvelopeSignatureArgs{...}
type EnvelopeSignatureInput interface {
	pulumi.Input

	ToEnvelopeSignatureOutput() EnvelopeSignatureOutput
	ToEnvelopeSignatureOutputWithContext(context.Context) EnvelopeSignatureOutput
}

type EnvelopeSignatureArgs struct {
	Keyid pulumi.StringPtrInput `pulumi:"keyid"`
	Sig   pulumi.StringPtrInput `pulumi:"sig"`
}

func (EnvelopeSignatureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvelopeSignature)(nil)).Elem()
}

func (i EnvelopeSignatureArgs) ToEnvelopeSignatureOutput() EnvelopeSignatureOutput {
	return i.ToEnvelopeSignatureOutputWithContext(context.Background())
}

func (i EnvelopeSignatureArgs) ToEnvelopeSignatureOutputWithContext(ctx context.Context) EnvelopeSignatureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvelopeSignatureOutput)
}

// EnvelopeSignatureArrayInput is an input type that accepts EnvelopeSignatureArray and EnvelopeSignatureArrayOutput values.
// You can construct a concrete instance of `EnvelopeSignatureArrayInput` via:
//
//	EnvelopeSignatureArray{ EnvelopeSignatureArgs{...} }
type EnvelopeSignatureArrayInput interface {
	pulumi.Input

	ToEnvelopeSignatureArrayOutput() EnvelopeSignatureArrayOutput
	ToEnvelopeSignatureArrayOutputWithContext(context.Context) EnvelopeSignatureArrayOutput
}

type EnvelopeSignatureArray []EnvelopeSignatureInput

func (EnvelopeSignatureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvelopeSignature)(nil)).Elem()
}

func (i EnvelopeSignatureArray) ToEnvelopeSignatureArrayOutput() EnvelopeSignatureArrayOutput {
	return i.ToEnvelopeSignatureArrayOutputWithContext(context.Background())
}

func (i EnvelopeSignatureArray) ToEnvelopeSignatureArrayOutputWithContext(ctx context.Context) EnvelopeSignatureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvelopeSignatureArrayOutput)
}

type EnvelopeSignatureOutput struct{ *pulumi.OutputState }

func (EnvelopeSignatureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvelopeSignature)(nil)).Elem()
}

func (o EnvelopeSignatureOutput) ToEnvelopeSignatureOutput() EnvelopeSignatureOutput {
	return o
}

func (o EnvelopeSignatureOutput) ToEnvelopeSignatureOutputWithContext(ctx context.Context) EnvelopeSignatureOutput {
	return o
}

func (o EnvelopeSignatureOutput) Keyid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvelopeSignature) *string { return v.Keyid }).(pulumi.StringPtrOutput)
}

func (o EnvelopeSignatureOutput) Sig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvelopeSignature) *string { return v.Sig }).(pulumi.StringPtrOutput)
}

type EnvelopeSignatureArrayOutput struct{ *pulumi.OutputState }

func (EnvelopeSignatureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvelopeSignature)(nil)).Elem()
}

func (o EnvelopeSignatureArrayOutput) ToEnvelopeSignatureArrayOutput() EnvelopeSignatureArrayOutput {
	return o
}

func (o EnvelopeSignatureArrayOutput) ToEnvelopeSignatureArrayOutputWithContext(ctx context.Context) EnvelopeSignatureArrayOutput {
	return o
}

func (o EnvelopeSignatureArrayOutput) Index(i pulumi.IntInput) EnvelopeSignatureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnvelopeSignature {
		return vs[0].([]EnvelopeSignature)[vs[1].(int)]
	}).(EnvelopeSignatureOutput)
}

type EnvelopeSignatureResponse struct {
	Keyid string `pulumi:"keyid"`
	Sig   string `pulumi:"sig"`
}

type EnvelopeSignatureResponseOutput struct{ *pulumi.OutputState }

func (EnvelopeSignatureResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvelopeSignatureResponse)(nil)).Elem()
}

func (o EnvelopeSignatureResponseOutput) ToEnvelopeSignatureResponseOutput() EnvelopeSignatureResponseOutput {
	return o
}

func (o EnvelopeSignatureResponseOutput) ToEnvelopeSignatureResponseOutputWithContext(ctx context.Context) EnvelopeSignatureResponseOutput {
	return o
}

func (o EnvelopeSignatureResponseOutput) Keyid() pulumi.StringOutput {
	return o.ApplyT(func(v EnvelopeSignatureResponse) string { return v.Keyid }).(pulumi.StringOutput)
}

func (o EnvelopeSignatureResponseOutput) Sig() pulumi.StringOutput {
	return o.ApplyT(func(v EnvelopeSignatureResponse) string { return v.Sig }).(pulumi.StringOutput)
}

type EnvelopeSignatureResponseArrayOutput struct{ *pulumi.OutputState }

func (EnvelopeSignatureResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvelopeSignatureResponse)(nil)).Elem()
}

func (o EnvelopeSignatureResponseArrayOutput) ToEnvelopeSignatureResponseArrayOutput() EnvelopeSignatureResponseArrayOutput {
	return o
}

func (o EnvelopeSignatureResponseArrayOutput) ToEnvelopeSignatureResponseArrayOutputWithContext(ctx context.Context) EnvelopeSignatureResponseArrayOutput {
	return o
}

func (o EnvelopeSignatureResponseArrayOutput) Index(i pulumi.IntInput) EnvelopeSignatureResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnvelopeSignatureResponse {
		return vs[0].([]EnvelopeSignatureResponse)[vs[1].(int)]
	}).(EnvelopeSignatureResponseOutput)
}

// Defines an object for the environment field in in-toto links. The suggested fields are "variables", "filesystem", and "workdir".
type Environment struct {
	CustomValues map[string]string `pulumi:"customValues"`
}

// EnvironmentInput is an input type that accepts EnvironmentArgs and EnvironmentOutput values.
// You can construct a concrete instance of `EnvironmentInput` via:
//
//	EnvironmentArgs{...}
type EnvironmentInput interface {
	pulumi.Input

	ToEnvironmentOutput() EnvironmentOutput
	ToEnvironmentOutputWithContext(context.Context) EnvironmentOutput
}

// Defines an object for the environment field in in-toto links. The suggested fields are "variables", "filesystem", and "workdir".
type EnvironmentArgs struct {
	CustomValues pulumi.StringMapInput `pulumi:"customValues"`
}

func (EnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Environment)(nil)).Elem()
}

func (i EnvironmentArgs) ToEnvironmentOutput() EnvironmentOutput {
	return i.ToEnvironmentOutputWithContext(context.Background())
}

func (i EnvironmentArgs) ToEnvironmentOutputWithContext(ctx context.Context) EnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentOutput)
}

func (i EnvironmentArgs) ToEnvironmentPtrOutput() EnvironmentPtrOutput {
	return i.ToEnvironmentPtrOutputWithContext(context.Background())
}

func (i EnvironmentArgs) ToEnvironmentPtrOutputWithContext(ctx context.Context) EnvironmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentOutput).ToEnvironmentPtrOutputWithContext(ctx)
}

// EnvironmentPtrInput is an input type that accepts EnvironmentArgs, EnvironmentPtr and EnvironmentPtrOutput values.
// You can construct a concrete instance of `EnvironmentPtrInput` via:
//
//	        EnvironmentArgs{...}
//
//	or:
//
//	        nil
type EnvironmentPtrInput interface {
	pulumi.Input

	ToEnvironmentPtrOutput() EnvironmentPtrOutput
	ToEnvironmentPtrOutputWithContext(context.Context) EnvironmentPtrOutput
}

type environmentPtrType EnvironmentArgs

func EnvironmentPtr(v *EnvironmentArgs) EnvironmentPtrInput {
	return (*environmentPtrType)(v)
}

func (*environmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Environment)(nil)).Elem()
}

func (i *environmentPtrType) ToEnvironmentPtrOutput() EnvironmentPtrOutput {
	return i.ToEnvironmentPtrOutputWithContext(context.Background())
}

func (i *environmentPtrType) ToEnvironmentPtrOutputWithContext(ctx context.Context) EnvironmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentPtrOutput)
}

// Defines an object for the environment field in in-toto links. The suggested fields are "variables", "filesystem", and "workdir".
type EnvironmentOutput struct{ *pulumi.OutputState }

func (EnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Environment)(nil)).Elem()
}

func (o EnvironmentOutput) ToEnvironmentOutput() EnvironmentOutput {
	return o
}

func (o EnvironmentOutput) ToEnvironmentOutputWithContext(ctx context.Context) EnvironmentOutput {
	return o
}

func (o EnvironmentOutput) ToEnvironmentPtrOutput() EnvironmentPtrOutput {
	return o.ToEnvironmentPtrOutputWithContext(context.Background())
}

func (o EnvironmentOutput) ToEnvironmentPtrOutputWithContext(ctx context.Context) EnvironmentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Environment) *Environment {
		return &v
	}).(EnvironmentPtrOutput)
}

func (o EnvironmentOutput) CustomValues() pulumi.StringMapOutput {
	return o.ApplyT(func(v Environment) map[string]string { return v.CustomValues }).(pulumi.StringMapOutput)
}

type EnvironmentPtrOutput struct{ *pulumi.OutputState }

func (EnvironmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Environment)(nil)).Elem()
}

func (o EnvironmentPtrOutput) ToEnvironmentPtrOutput() EnvironmentPtrOutput {
	return o
}

func (o EnvironmentPtrOutput) ToEnvironmentPtrOutputWithContext(ctx context.Context) EnvironmentPtrOutput {
	return o
}

func (o EnvironmentPtrOutput) Elem() EnvironmentOutput {
	return o.ApplyT(func(v *Environment) Environment {
		if v != nil {
			return *v
		}
		var ret Environment
		return ret
	}).(EnvironmentOutput)
}

func (o EnvironmentPtrOutput) CustomValues() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Environment) map[string]string {
		if v == nil {
			return nil
		}
		return v.CustomValues
	}).(pulumi.StringMapOutput)
}

// Defines an object for the environment field in in-toto links. The suggested fields are "variables", "filesystem", and "workdir".
type EnvironmentResponse struct {
	CustomValues map[string]string `pulumi:"customValues"`
}

// Defines an object for the environment field in in-toto links. The suggested fields are "variables", "filesystem", and "workdir".
type EnvironmentResponseOutput struct{ *pulumi.OutputState }

func (EnvironmentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentResponse)(nil)).Elem()
}

func (o EnvironmentResponseOutput) ToEnvironmentResponseOutput() EnvironmentResponseOutput {
	return o
}

func (o EnvironmentResponseOutput) ToEnvironmentResponseOutputWithContext(ctx context.Context) EnvironmentResponseOutput {
	return o
}

func (o EnvironmentResponseOutput) CustomValues() pulumi.StringMapOutput {
	return o.ApplyT(func(v EnvironmentResponse) map[string]string { return v.CustomValues }).(pulumi.StringMapOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//	ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//	        ExprArgs{...}
//
//	or:
//
//	        nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr {
		if v != nil {
			return *v
		}
		var ret Expr
		return ret
	}).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponse struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title string `pulumi:"title"`
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseOutput struct{ *pulumi.OutputState }

func (ExprResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (o ExprResponseOutput) ToExprResponseOutput() ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return o
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Title }).(pulumi.StringOutput)
}

// An External Reference allows a Package to reference an external source of additional information, metadata, enumerations, asset identifiers, or downloadable content believed to be relevant to the Package
type ExternalRef struct {
	// An External Reference allows a Package to reference an external source of additional information, metadata, enumerations, asset identifiers, or downloadable content believed to be relevant to the Package
	Category *ExternalRefCategory `pulumi:"category"`
	// Human-readable information about the purpose and target of the reference
	Comment *string `pulumi:"comment"`
	// The unique string with no spaces necessary to access the package-specific information, metadata, or content within the target location
	Locator *string `pulumi:"locator"`
	// Type of category (e.g. 'npm' for the PACKAGE_MANAGER category)
	Type *string `pulumi:"type"`
}

// ExternalRefInput is an input type that accepts ExternalRefArgs and ExternalRefOutput values.
// You can construct a concrete instance of `ExternalRefInput` via:
//
//	ExternalRefArgs{...}
type ExternalRefInput interface {
	pulumi.Input

	ToExternalRefOutput() ExternalRefOutput
	ToExternalRefOutputWithContext(context.Context) ExternalRefOutput
}

// An External Reference allows a Package to reference an external source of additional information, metadata, enumerations, asset identifiers, or downloadable content believed to be relevant to the Package
type ExternalRefArgs struct {
	// An External Reference allows a Package to reference an external source of additional information, metadata, enumerations, asset identifiers, or downloadable content believed to be relevant to the Package
	Category ExternalRefCategoryPtrInput `pulumi:"category"`
	// Human-readable information about the purpose and target of the reference
	Comment pulumi.StringPtrInput `pulumi:"comment"`
	// The unique string with no spaces necessary to access the package-specific information, metadata, or content within the target location
	Locator pulumi.StringPtrInput `pulumi:"locator"`
	// Type of category (e.g. 'npm' for the PACKAGE_MANAGER category)
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ExternalRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalRef)(nil)).Elem()
}

func (i ExternalRefArgs) ToExternalRefOutput() ExternalRefOutput {
	return i.ToExternalRefOutputWithContext(context.Background())
}

func (i ExternalRefArgs) ToExternalRefOutputWithContext(ctx context.Context) ExternalRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalRefOutput)
}

// ExternalRefArrayInput is an input type that accepts ExternalRefArray and ExternalRefArrayOutput values.
// You can construct a concrete instance of `ExternalRefArrayInput` via:
//
//	ExternalRefArray{ ExternalRefArgs{...} }
type ExternalRefArrayInput interface {
	pulumi.Input

	ToExternalRefArrayOutput() ExternalRefArrayOutput
	ToExternalRefArrayOutputWithContext(context.Context) ExternalRefArrayOutput
}

type ExternalRefArray []ExternalRefInput

func (ExternalRefArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExternalRef)(nil)).Elem()
}

func (i ExternalRefArray) ToExternalRefArrayOutput() ExternalRefArrayOutput {
	return i.ToExternalRefArrayOutputWithContext(context.Background())
}

func (i ExternalRefArray) ToExternalRefArrayOutputWithContext(ctx context.Context) ExternalRefArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalRefArrayOutput)
}

// An External Reference allows a Package to reference an external source of additional information, metadata, enumerations, asset identifiers, or downloadable content believed to be relevant to the Package
type ExternalRefOutput struct{ *pulumi.OutputState }

func (ExternalRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalRef)(nil)).Elem()
}

func (o ExternalRefOutput) ToExternalRefOutput() ExternalRefOutput {
	return o
}

func (o ExternalRefOutput) ToExternalRefOutputWithContext(ctx context.Context) ExternalRefOutput {
	return o
}

// An External Reference allows a Package to reference an external source of additional information, metadata, enumerations, asset identifiers, or downloadable content believed to be relevant to the Package
func (o ExternalRefOutput) Category() ExternalRefCategoryPtrOutput {
	return o.ApplyT(func(v ExternalRef) *ExternalRefCategory { return v.Category }).(ExternalRefCategoryPtrOutput)
}

// Human-readable information about the purpose and target of the reference
func (o ExternalRefOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExternalRef) *string { return v.Comment }).(pulumi.StringPtrOutput)
}

// The unique string with no spaces necessary to access the package-specific information, metadata, or content within the target location
func (o ExternalRefOutput) Locator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExternalRef) *string { return v.Locator }).(pulumi.StringPtrOutput)
}

// Type of category (e.g. 'npm' for the PACKAGE_MANAGER category)
func (o ExternalRefOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExternalRef) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ExternalRefArrayOutput struct{ *pulumi.OutputState }

func (ExternalRefArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExternalRef)(nil)).Elem()
}

func (o ExternalRefArrayOutput) ToExternalRefArrayOutput() ExternalRefArrayOutput {
	return o
}

func (o ExternalRefArrayOutput) ToExternalRefArrayOutputWithContext(ctx context.Context) ExternalRefArrayOutput {
	return o
}

func (o ExternalRefArrayOutput) Index(i pulumi.IntInput) ExternalRefOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExternalRef {
		return vs[0].([]ExternalRef)[vs[1].(int)]
	}).(ExternalRefOutput)
}

// An External Reference allows a Package to reference an external source of additional information, metadata, enumerations, asset identifiers, or downloadable content believed to be relevant to the Package
type ExternalRefResponse struct {
	// An External Reference allows a Package to reference an external source of additional information, metadata, enumerations, asset identifiers, or downloadable content believed to be relevant to the Package
	Category string `pulumi:"category"`
	// Human-readable information about the purpose and target of the reference
	Comment string `pulumi:"comment"`
	// The unique string with no spaces necessary to access the package-specific information, metadata, or content within the target location
	Locator string `pulumi:"locator"`
	// Type of category (e.g. 'npm' for the PACKAGE_MANAGER category)
	Type string `pulumi:"type"`
}

// An External Reference allows a Package to reference an external source of additional information, metadata, enumerations, asset identifiers, or downloadable content believed to be relevant to the Package
type ExternalRefResponseOutput struct{ *pulumi.OutputState }

func (ExternalRefResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalRefResponse)(nil)).Elem()
}

func (o ExternalRefResponseOutput) ToExternalRefResponseOutput() ExternalRefResponseOutput {
	return o
}

func (o ExternalRefResponseOutput) ToExternalRefResponseOutputWithContext(ctx context.Context) ExternalRefResponseOutput {
	return o
}

// An External Reference allows a Package to reference an external source of additional information, metadata, enumerations, asset identifiers, or downloadable content believed to be relevant to the Package
func (o ExternalRefResponseOutput) Category() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalRefResponse) string { return v.Category }).(pulumi.StringOutput)
}

// Human-readable information about the purpose and target of the reference
func (o ExternalRefResponseOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalRefResponse) string { return v.Comment }).(pulumi.StringOutput)
}

// The unique string with no spaces necessary to access the package-specific information, metadata, or content within the target location
func (o ExternalRefResponseOutput) Locator() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalRefResponse) string { return v.Locator }).(pulumi.StringOutput)
}

// Type of category (e.g. 'npm' for the PACKAGE_MANAGER category)
func (o ExternalRefResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalRefResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ExternalRefResponseArrayOutput struct{ *pulumi.OutputState }

func (ExternalRefResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExternalRefResponse)(nil)).Elem()
}

func (o ExternalRefResponseArrayOutput) ToExternalRefResponseArrayOutput() ExternalRefResponseArrayOutput {
	return o
}

func (o ExternalRefResponseArrayOutput) ToExternalRefResponseArrayOutputWithContext(ctx context.Context) ExternalRefResponseArrayOutput {
	return o
}

func (o ExternalRefResponseArrayOutput) Index(i pulumi.IntInput) ExternalRefResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExternalRefResponse {
		return vs[0].([]ExternalRefResponse)[vs[1].(int)]
	}).(ExternalRefResponseOutput)
}

// Container message for hashes of byte content of files, used in source messages to verify integrity of source input to the build.
type FileHashes struct {
	// Collection of file hashes.
	FileHash []Hash `pulumi:"fileHash"`
}

// FileHashesInput is an input type that accepts FileHashesArgs and FileHashesOutput values.
// You can construct a concrete instance of `FileHashesInput` via:
//
//	FileHashesArgs{...}
type FileHashesInput interface {
	pulumi.Input

	ToFileHashesOutput() FileHashesOutput
	ToFileHashesOutputWithContext(context.Context) FileHashesOutput
}

// Container message for hashes of byte content of files, used in source messages to verify integrity of source input to the build.
type FileHashesArgs struct {
	// Collection of file hashes.
	FileHash HashArrayInput `pulumi:"fileHash"`
}

func (FileHashesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileHashes)(nil)).Elem()
}

func (i FileHashesArgs) ToFileHashesOutput() FileHashesOutput {
	return i.ToFileHashesOutputWithContext(context.Background())
}

func (i FileHashesArgs) ToFileHashesOutputWithContext(ctx context.Context) FileHashesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileHashesOutput)
}

func (i FileHashesArgs) ToFileHashesPtrOutput() FileHashesPtrOutput {
	return i.ToFileHashesPtrOutputWithContext(context.Background())
}

func (i FileHashesArgs) ToFileHashesPtrOutputWithContext(ctx context.Context) FileHashesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileHashesOutput).ToFileHashesPtrOutputWithContext(ctx)
}

// FileHashesPtrInput is an input type that accepts FileHashesArgs, FileHashesPtr and FileHashesPtrOutput values.
// You can construct a concrete instance of `FileHashesPtrInput` via:
//
//	        FileHashesArgs{...}
//
//	or:
//
//	        nil
type FileHashesPtrInput interface {
	pulumi.Input

	ToFileHashesPtrOutput() FileHashesPtrOutput
	ToFileHashesPtrOutputWithContext(context.Context) FileHashesPtrOutput
}

type fileHashesPtrType FileHashesArgs

func FileHashesPtr(v *FileHashesArgs) FileHashesPtrInput {
	return (*fileHashesPtrType)(v)
}

func (*fileHashesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FileHashes)(nil)).Elem()
}

func (i *fileHashesPtrType) ToFileHashesPtrOutput() FileHashesPtrOutput {
	return i.ToFileHashesPtrOutputWithContext(context.Background())
}

func (i *fileHashesPtrType) ToFileHashesPtrOutputWithContext(ctx context.Context) FileHashesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileHashesPtrOutput)
}

// Container message for hashes of byte content of files, used in source messages to verify integrity of source input to the build.
type FileHashesOutput struct{ *pulumi.OutputState }

func (FileHashesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileHashes)(nil)).Elem()
}

func (o FileHashesOutput) ToFileHashesOutput() FileHashesOutput {
	return o
}

func (o FileHashesOutput) ToFileHashesOutputWithContext(ctx context.Context) FileHashesOutput {
	return o
}

func (o FileHashesOutput) ToFileHashesPtrOutput() FileHashesPtrOutput {
	return o.ToFileHashesPtrOutputWithContext(context.Background())
}

func (o FileHashesOutput) ToFileHashesPtrOutputWithContext(ctx context.Context) FileHashesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FileHashes) *FileHashes {
		return &v
	}).(FileHashesPtrOutput)
}

// Collection of file hashes.
func (o FileHashesOutput) FileHash() HashArrayOutput {
	return o.ApplyT(func(v FileHashes) []Hash { return v.FileHash }).(HashArrayOutput)
}

type FileHashesPtrOutput struct{ *pulumi.OutputState }

func (FileHashesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileHashes)(nil)).Elem()
}

func (o FileHashesPtrOutput) ToFileHashesPtrOutput() FileHashesPtrOutput {
	return o
}

func (o FileHashesPtrOutput) ToFileHashesPtrOutputWithContext(ctx context.Context) FileHashesPtrOutput {
	return o
}

func (o FileHashesPtrOutput) Elem() FileHashesOutput {
	return o.ApplyT(func(v *FileHashes) FileHashes {
		if v != nil {
			return *v
		}
		var ret FileHashes
		return ret
	}).(FileHashesOutput)
}

// Collection of file hashes.
func (o FileHashesPtrOutput) FileHash() HashArrayOutput {
	return o.ApplyT(func(v *FileHashes) []Hash {
		if v == nil {
			return nil
		}
		return v.FileHash
	}).(HashArrayOutput)
}

// Container message for hashes of byte content of files, used in source messages to verify integrity of source input to the build.
type FileHashesResponse struct {
	// Collection of file hashes.
	FileHash []HashResponse `pulumi:"fileHash"`
}

// Container message for hashes of byte content of files, used in source messages to verify integrity of source input to the build.
type FileHashesResponseOutput struct{ *pulumi.OutputState }

func (FileHashesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileHashesResponse)(nil)).Elem()
}

func (o FileHashesResponseOutput) ToFileHashesResponseOutput() FileHashesResponseOutput {
	return o
}

func (o FileHashesResponseOutput) ToFileHashesResponseOutputWithContext(ctx context.Context) FileHashesResponseOutput {
	return o
}

// Collection of file hashes.
func (o FileHashesResponseOutput) FileHash() HashResponseArrayOutput {
	return o.ApplyT(func(v FileHashesResponse) []HashResponse { return v.FileHash }).(HashResponseArrayOutput)
}

// FileNote represents an SPDX File Information section: https://spdx.github.io/spdx-spec/4-file-information/
type FileNote struct {
	// Provide a unique identifier to match analysis information on each specific file in a package
	Checksum []string `pulumi:"checksum"`
	// This field provides information about the type of file identified
	FileType *FileNoteFileType `pulumi:"fileType"`
	// Identify the full path and filename that corresponds to the file information in this section
	Title *string `pulumi:"title"`
}

// FileNoteInput is an input type that accepts FileNoteArgs and FileNoteOutput values.
// You can construct a concrete instance of `FileNoteInput` via:
//
//	FileNoteArgs{...}
type FileNoteInput interface {
	pulumi.Input

	ToFileNoteOutput() FileNoteOutput
	ToFileNoteOutputWithContext(context.Context) FileNoteOutput
}

// FileNote represents an SPDX File Information section: https://spdx.github.io/spdx-spec/4-file-information/
type FileNoteArgs struct {
	// Provide a unique identifier to match analysis information on each specific file in a package
	Checksum pulumi.StringArrayInput `pulumi:"checksum"`
	// This field provides information about the type of file identified
	FileType FileNoteFileTypePtrInput `pulumi:"fileType"`
	// Identify the full path and filename that corresponds to the file information in this section
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (FileNoteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileNote)(nil)).Elem()
}

func (i FileNoteArgs) ToFileNoteOutput() FileNoteOutput {
	return i.ToFileNoteOutputWithContext(context.Background())
}

func (i FileNoteArgs) ToFileNoteOutputWithContext(ctx context.Context) FileNoteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileNoteOutput)
}

func (i FileNoteArgs) ToFileNotePtrOutput() FileNotePtrOutput {
	return i.ToFileNotePtrOutputWithContext(context.Background())
}

func (i FileNoteArgs) ToFileNotePtrOutputWithContext(ctx context.Context) FileNotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileNoteOutput).ToFileNotePtrOutputWithContext(ctx)
}

// FileNotePtrInput is an input type that accepts FileNoteArgs, FileNotePtr and FileNotePtrOutput values.
// You can construct a concrete instance of `FileNotePtrInput` via:
//
//	        FileNoteArgs{...}
//
//	or:
//
//	        nil
type FileNotePtrInput interface {
	pulumi.Input

	ToFileNotePtrOutput() FileNotePtrOutput
	ToFileNotePtrOutputWithContext(context.Context) FileNotePtrOutput
}

type fileNotePtrType FileNoteArgs

func FileNotePtr(v *FileNoteArgs) FileNotePtrInput {
	return (*fileNotePtrType)(v)
}

func (*fileNotePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FileNote)(nil)).Elem()
}

func (i *fileNotePtrType) ToFileNotePtrOutput() FileNotePtrOutput {
	return i.ToFileNotePtrOutputWithContext(context.Background())
}

func (i *fileNotePtrType) ToFileNotePtrOutputWithContext(ctx context.Context) FileNotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileNotePtrOutput)
}

// FileNote represents an SPDX File Information section: https://spdx.github.io/spdx-spec/4-file-information/
type FileNoteOutput struct{ *pulumi.OutputState }

func (FileNoteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileNote)(nil)).Elem()
}

func (o FileNoteOutput) ToFileNoteOutput() FileNoteOutput {
	return o
}

func (o FileNoteOutput) ToFileNoteOutputWithContext(ctx context.Context) FileNoteOutput {
	return o
}

func (o FileNoteOutput) ToFileNotePtrOutput() FileNotePtrOutput {
	return o.ToFileNotePtrOutputWithContext(context.Background())
}

func (o FileNoteOutput) ToFileNotePtrOutputWithContext(ctx context.Context) FileNotePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FileNote) *FileNote {
		return &v
	}).(FileNotePtrOutput)
}

// Provide a unique identifier to match analysis information on each specific file in a package
func (o FileNoteOutput) Checksum() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FileNote) []string { return v.Checksum }).(pulumi.StringArrayOutput)
}

// This field provides information about the type of file identified
func (o FileNoteOutput) FileType() FileNoteFileTypePtrOutput {
	return o.ApplyT(func(v FileNote) *FileNoteFileType { return v.FileType }).(FileNoteFileTypePtrOutput)
}

// Identify the full path and filename that corresponds to the file information in this section
func (o FileNoteOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileNote) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type FileNotePtrOutput struct{ *pulumi.OutputState }

func (FileNotePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileNote)(nil)).Elem()
}

func (o FileNotePtrOutput) ToFileNotePtrOutput() FileNotePtrOutput {
	return o
}

func (o FileNotePtrOutput) ToFileNotePtrOutputWithContext(ctx context.Context) FileNotePtrOutput {
	return o
}

func (o FileNotePtrOutput) Elem() FileNoteOutput {
	return o.ApplyT(func(v *FileNote) FileNote {
		if v != nil {
			return *v
		}
		var ret FileNote
		return ret
	}).(FileNoteOutput)
}

// Provide a unique identifier to match analysis information on each specific file in a package
func (o FileNotePtrOutput) Checksum() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FileNote) []string {
		if v == nil {
			return nil
		}
		return v.Checksum
	}).(pulumi.StringArrayOutput)
}

// This field provides information about the type of file identified
func (o FileNotePtrOutput) FileType() FileNoteFileTypePtrOutput {
	return o.ApplyT(func(v *FileNote) *FileNoteFileType {
		if v == nil {
			return nil
		}
		return v.FileType
	}).(FileNoteFileTypePtrOutput)
}

// Identify the full path and filename that corresponds to the file information in this section
func (o FileNotePtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileNote) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// FileNote represents an SPDX File Information section: https://spdx.github.io/spdx-spec/4-file-information/
type FileNoteResponse struct {
	// Provide a unique identifier to match analysis information on each specific file in a package
	Checksum []string `pulumi:"checksum"`
	// This field provides information about the type of file identified
	FileType string `pulumi:"fileType"`
	// Identify the full path and filename that corresponds to the file information in this section
	Title string `pulumi:"title"`
}

// FileNote represents an SPDX File Information section: https://spdx.github.io/spdx-spec/4-file-information/
type FileNoteResponseOutput struct{ *pulumi.OutputState }

func (FileNoteResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileNoteResponse)(nil)).Elem()
}

func (o FileNoteResponseOutput) ToFileNoteResponseOutput() FileNoteResponseOutput {
	return o
}

func (o FileNoteResponseOutput) ToFileNoteResponseOutputWithContext(ctx context.Context) FileNoteResponseOutput {
	return o
}

// Provide a unique identifier to match analysis information on each specific file in a package
func (o FileNoteResponseOutput) Checksum() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FileNoteResponse) []string { return v.Checksum }).(pulumi.StringArrayOutput)
}

// This field provides information about the type of file identified
func (o FileNoteResponseOutput) FileType() pulumi.StringOutput {
	return o.ApplyT(func(v FileNoteResponse) string { return v.FileType }).(pulumi.StringOutput)
}

// Identify the full path and filename that corresponds to the file information in this section
func (o FileNoteResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v FileNoteResponse) string { return v.Title }).(pulumi.StringOutput)
}

// FileOccurrence represents an SPDX File Information section: https://spdx.github.io/spdx-spec/4-file-information/
type FileOccurrence struct {
	// This field provides a place for the SPDX data creator to record, at the file level, acknowledgements that may be needed to be communicated in some contexts
	Attributions []string `pulumi:"attributions"`
	// This field provides a place for the SPDX file creator to record any general comments about the file
	Comment *string `pulumi:"comment"`
	// This field provides a place for the SPDX file creator to record file contributors
	Contributors []string `pulumi:"contributors"`
	// Identify the copyright holder of the file, as well as any dates present
	Copyright *string `pulumi:"copyright"`
	// This field contains the license information actually found in the file, if any
	FilesLicenseInfo []string `pulumi:"filesLicenseInfo"`
	// Uniquely identify any element in an SPDX document which may be referenced by other elements
	Id *string `pulumi:"id"`
	// This field contains the license the SPDX file creator has concluded as governing the file or alternative values if the governing license cannot be determined
	LicenseConcluded *License `pulumi:"licenseConcluded"`
	// This field provides a place for the SPDX file creator to record license notices or other such related notices found in the file
	Notice *string `pulumi:"notice"`
}

// FileOccurrenceInput is an input type that accepts FileOccurrenceArgs and FileOccurrenceOutput values.
// You can construct a concrete instance of `FileOccurrenceInput` via:
//
//	FileOccurrenceArgs{...}
type FileOccurrenceInput interface {
	pulumi.Input

	ToFileOccurrenceOutput() FileOccurrenceOutput
	ToFileOccurrenceOutputWithContext(context.Context) FileOccurrenceOutput
}

// FileOccurrence represents an SPDX File Information section: https://spdx.github.io/spdx-spec/4-file-information/
type FileOccurrenceArgs struct {
	// This field provides a place for the SPDX data creator to record, at the file level, acknowledgements that may be needed to be communicated in some contexts
	Attributions pulumi.StringArrayInput `pulumi:"attributions"`
	// This field provides a place for the SPDX file creator to record any general comments about the file
	Comment pulumi.StringPtrInput `pulumi:"comment"`
	// This field provides a place for the SPDX file creator to record file contributors
	Contributors pulumi.StringArrayInput `pulumi:"contributors"`
	// Identify the copyright holder of the file, as well as any dates present
	Copyright pulumi.StringPtrInput `pulumi:"copyright"`
	// This field contains the license information actually found in the file, if any
	FilesLicenseInfo pulumi.StringArrayInput `pulumi:"filesLicenseInfo"`
	// Uniquely identify any element in an SPDX document which may be referenced by other elements
	Id pulumi.StringPtrInput `pulumi:"id"`
	// This field contains the license the SPDX file creator has concluded as governing the file or alternative values if the governing license cannot be determined
	LicenseConcluded LicensePtrInput `pulumi:"licenseConcluded"`
	// This field provides a place for the SPDX file creator to record license notices or other such related notices found in the file
	Notice pulumi.StringPtrInput `pulumi:"notice"`
}

func (FileOccurrenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileOccurrence)(nil)).Elem()
}

func (i FileOccurrenceArgs) ToFileOccurrenceOutput() FileOccurrenceOutput {
	return i.ToFileOccurrenceOutputWithContext(context.Background())
}

func (i FileOccurrenceArgs) ToFileOccurrenceOutputWithContext(ctx context.Context) FileOccurrenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileOccurrenceOutput)
}

func (i FileOccurrenceArgs) ToFileOccurrencePtrOutput() FileOccurrencePtrOutput {
	return i.ToFileOccurrencePtrOutputWithContext(context.Background())
}

func (i FileOccurrenceArgs) ToFileOccurrencePtrOutputWithContext(ctx context.Context) FileOccurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileOccurrenceOutput).ToFileOccurrencePtrOutputWithContext(ctx)
}

// FileOccurrencePtrInput is an input type that accepts FileOccurrenceArgs, FileOccurrencePtr and FileOccurrencePtrOutput values.
// You can construct a concrete instance of `FileOccurrencePtrInput` via:
//
//	        FileOccurrenceArgs{...}
//
//	or:
//
//	        nil
type FileOccurrencePtrInput interface {
	pulumi.Input

	ToFileOccurrencePtrOutput() FileOccurrencePtrOutput
	ToFileOccurrencePtrOutputWithContext(context.Context) FileOccurrencePtrOutput
}

type fileOccurrencePtrType FileOccurrenceArgs

func FileOccurrencePtr(v *FileOccurrenceArgs) FileOccurrencePtrInput {
	return (*fileOccurrencePtrType)(v)
}

func (*fileOccurrencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FileOccurrence)(nil)).Elem()
}

func (i *fileOccurrencePtrType) ToFileOccurrencePtrOutput() FileOccurrencePtrOutput {
	return i.ToFileOccurrencePtrOutputWithContext(context.Background())
}

func (i *fileOccurrencePtrType) ToFileOccurrencePtrOutputWithContext(ctx context.Context) FileOccurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileOccurrencePtrOutput)
}

// FileOccurrence represents an SPDX File Information section: https://spdx.github.io/spdx-spec/4-file-information/
type FileOccurrenceOutput struct{ *pulumi.OutputState }

func (FileOccurrenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileOccurrence)(nil)).Elem()
}

func (o FileOccurrenceOutput) ToFileOccurrenceOutput() FileOccurrenceOutput {
	return o
}

func (o FileOccurrenceOutput) ToFileOccurrenceOutputWithContext(ctx context.Context) FileOccurrenceOutput {
	return o
}

func (o FileOccurrenceOutput) ToFileOccurrencePtrOutput() FileOccurrencePtrOutput {
	return o.ToFileOccurrencePtrOutputWithContext(context.Background())
}

func (o FileOccurrenceOutput) ToFileOccurrencePtrOutputWithContext(ctx context.Context) FileOccurrencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FileOccurrence) *FileOccurrence {
		return &v
	}).(FileOccurrencePtrOutput)
}

// This field provides a place for the SPDX data creator to record, at the file level, acknowledgements that may be needed to be communicated in some contexts
func (o FileOccurrenceOutput) Attributions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FileOccurrence) []string { return v.Attributions }).(pulumi.StringArrayOutput)
}

// This field provides a place for the SPDX file creator to record any general comments about the file
func (o FileOccurrenceOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileOccurrence) *string { return v.Comment }).(pulumi.StringPtrOutput)
}

// This field provides a place for the SPDX file creator to record file contributors
func (o FileOccurrenceOutput) Contributors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FileOccurrence) []string { return v.Contributors }).(pulumi.StringArrayOutput)
}

// Identify the copyright holder of the file, as well as any dates present
func (o FileOccurrenceOutput) Copyright() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileOccurrence) *string { return v.Copyright }).(pulumi.StringPtrOutput)
}

// This field contains the license information actually found in the file, if any
func (o FileOccurrenceOutput) FilesLicenseInfo() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FileOccurrence) []string { return v.FilesLicenseInfo }).(pulumi.StringArrayOutput)
}

// Uniquely identify any element in an SPDX document which may be referenced by other elements
func (o FileOccurrenceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileOccurrence) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// This field contains the license the SPDX file creator has concluded as governing the file or alternative values if the governing license cannot be determined
func (o FileOccurrenceOutput) LicenseConcluded() LicensePtrOutput {
	return o.ApplyT(func(v FileOccurrence) *License { return v.LicenseConcluded }).(LicensePtrOutput)
}

// This field provides a place for the SPDX file creator to record license notices or other such related notices found in the file
func (o FileOccurrenceOutput) Notice() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileOccurrence) *string { return v.Notice }).(pulumi.StringPtrOutput)
}

type FileOccurrencePtrOutput struct{ *pulumi.OutputState }

func (FileOccurrencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileOccurrence)(nil)).Elem()
}

func (o FileOccurrencePtrOutput) ToFileOccurrencePtrOutput() FileOccurrencePtrOutput {
	return o
}

func (o FileOccurrencePtrOutput) ToFileOccurrencePtrOutputWithContext(ctx context.Context) FileOccurrencePtrOutput {
	return o
}

func (o FileOccurrencePtrOutput) Elem() FileOccurrenceOutput {
	return o.ApplyT(func(v *FileOccurrence) FileOccurrence {
		if v != nil {
			return *v
		}
		var ret FileOccurrence
		return ret
	}).(FileOccurrenceOutput)
}

// This field provides a place for the SPDX data creator to record, at the file level, acknowledgements that may be needed to be communicated in some contexts
func (o FileOccurrencePtrOutput) Attributions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FileOccurrence) []string {
		if v == nil {
			return nil
		}
		return v.Attributions
	}).(pulumi.StringArrayOutput)
}

// This field provides a place for the SPDX file creator to record any general comments about the file
func (o FileOccurrencePtrOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileOccurrence) *string {
		if v == nil {
			return nil
		}
		return v.Comment
	}).(pulumi.StringPtrOutput)
}

// This field provides a place for the SPDX file creator to record file contributors
func (o FileOccurrencePtrOutput) Contributors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FileOccurrence) []string {
		if v == nil {
			return nil
		}
		return v.Contributors
	}).(pulumi.StringArrayOutput)
}

// Identify the copyright holder of the file, as well as any dates present
func (o FileOccurrencePtrOutput) Copyright() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileOccurrence) *string {
		if v == nil {
			return nil
		}
		return v.Copyright
	}).(pulumi.StringPtrOutput)
}

// This field contains the license information actually found in the file, if any
func (o FileOccurrencePtrOutput) FilesLicenseInfo() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FileOccurrence) []string {
		if v == nil {
			return nil
		}
		return v.FilesLicenseInfo
	}).(pulumi.StringArrayOutput)
}

// Uniquely identify any element in an SPDX document which may be referenced by other elements
func (o FileOccurrencePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileOccurrence) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// This field contains the license the SPDX file creator has concluded as governing the file or alternative values if the governing license cannot be determined
func (o FileOccurrencePtrOutput) LicenseConcluded() LicensePtrOutput {
	return o.ApplyT(func(v *FileOccurrence) *License {
		if v == nil {
			return nil
		}
		return v.LicenseConcluded
	}).(LicensePtrOutput)
}

// This field provides a place for the SPDX file creator to record license notices or other such related notices found in the file
func (o FileOccurrencePtrOutput) Notice() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileOccurrence) *string {
		if v == nil {
			return nil
		}
		return v.Notice
	}).(pulumi.StringPtrOutput)
}

// FileOccurrence represents an SPDX File Information section: https://spdx.github.io/spdx-spec/4-file-information/
type FileOccurrenceResponse struct {
	// This field provides a place for the SPDX data creator to record, at the file level, acknowledgements that may be needed to be communicated in some contexts
	Attributions []string `pulumi:"attributions"`
	// This field provides a place for the SPDX file creator to record any general comments about the file
	Comment string `pulumi:"comment"`
	// This field provides a place for the SPDX file creator to record file contributors
	Contributors []string `pulumi:"contributors"`
	// Identify the copyright holder of the file, as well as any dates present
	Copyright string `pulumi:"copyright"`
	// This field contains the license information actually found in the file, if any
	FilesLicenseInfo []string `pulumi:"filesLicenseInfo"`
	// This field contains the license the SPDX file creator has concluded as governing the file or alternative values if the governing license cannot be determined
	LicenseConcluded LicenseResponse `pulumi:"licenseConcluded"`
	// This field provides a place for the SPDX file creator to record license notices or other such related notices found in the file
	Notice string `pulumi:"notice"`
}

// FileOccurrence represents an SPDX File Information section: https://spdx.github.io/spdx-spec/4-file-information/
type FileOccurrenceResponseOutput struct{ *pulumi.OutputState }

func (FileOccurrenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileOccurrenceResponse)(nil)).Elem()
}

func (o FileOccurrenceResponseOutput) ToFileOccurrenceResponseOutput() FileOccurrenceResponseOutput {
	return o
}

func (o FileOccurrenceResponseOutput) ToFileOccurrenceResponseOutputWithContext(ctx context.Context) FileOccurrenceResponseOutput {
	return o
}

// This field provides a place for the SPDX data creator to record, at the file level, acknowledgements that may be needed to be communicated in some contexts
func (o FileOccurrenceResponseOutput) Attributions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FileOccurrenceResponse) []string { return v.Attributions }).(pulumi.StringArrayOutput)
}

// This field provides a place for the SPDX file creator to record any general comments about the file
func (o FileOccurrenceResponseOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v FileOccurrenceResponse) string { return v.Comment }).(pulumi.StringOutput)
}

// This field provides a place for the SPDX file creator to record file contributors
func (o FileOccurrenceResponseOutput) Contributors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FileOccurrenceResponse) []string { return v.Contributors }).(pulumi.StringArrayOutput)
}

// Identify the copyright holder of the file, as well as any dates present
func (o FileOccurrenceResponseOutput) Copyright() pulumi.StringOutput {
	return o.ApplyT(func(v FileOccurrenceResponse) string { return v.Copyright }).(pulumi.StringOutput)
}

// This field contains the license information actually found in the file, if any
func (o FileOccurrenceResponseOutput) FilesLicenseInfo() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FileOccurrenceResponse) []string { return v.FilesLicenseInfo }).(pulumi.StringArrayOutput)
}

// This field contains the license the SPDX file creator has concluded as governing the file or alternative values if the governing license cannot be determined
func (o FileOccurrenceResponseOutput) LicenseConcluded() LicenseResponseOutput {
	return o.ApplyT(func(v FileOccurrenceResponse) LicenseResponse { return v.LicenseConcluded }).(LicenseResponseOutput)
}

// This field provides a place for the SPDX file creator to record license notices or other such related notices found in the file
func (o FileOccurrenceResponseOutput) Notice() pulumi.StringOutput {
	return o.ApplyT(func(v FileOccurrenceResponse) string { return v.Notice }).(pulumi.StringOutput)
}

// A set of properties that uniquely identify a given Docker image.
type Fingerprint struct {
	// The layer ID of the final layer in the Docker image's v1 representation.
	V1Name string `pulumi:"v1Name"`
	// The ordered list of v2 blobs that represent a given image.
	V2Blob []string `pulumi:"v2Blob"`
}

// FingerprintInput is an input type that accepts FingerprintArgs and FingerprintOutput values.
// You can construct a concrete instance of `FingerprintInput` via:
//
//	FingerprintArgs{...}
type FingerprintInput interface {
	pulumi.Input

	ToFingerprintOutput() FingerprintOutput
	ToFingerprintOutputWithContext(context.Context) FingerprintOutput
}

// A set of properties that uniquely identify a given Docker image.
type FingerprintArgs struct {
	// The layer ID of the final layer in the Docker image's v1 representation.
	V1Name pulumi.StringInput `pulumi:"v1Name"`
	// The ordered list of v2 blobs that represent a given image.
	V2Blob pulumi.StringArrayInput `pulumi:"v2Blob"`
}

func (FingerprintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Fingerprint)(nil)).Elem()
}

func (i FingerprintArgs) ToFingerprintOutput() FingerprintOutput {
	return i.ToFingerprintOutputWithContext(context.Background())
}

func (i FingerprintArgs) ToFingerprintOutputWithContext(ctx context.Context) FingerprintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FingerprintOutput)
}

func (i FingerprintArgs) ToFingerprintPtrOutput() FingerprintPtrOutput {
	return i.ToFingerprintPtrOutputWithContext(context.Background())
}

func (i FingerprintArgs) ToFingerprintPtrOutputWithContext(ctx context.Context) FingerprintPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FingerprintOutput).ToFingerprintPtrOutputWithContext(ctx)
}

// FingerprintPtrInput is an input type that accepts FingerprintArgs, FingerprintPtr and FingerprintPtrOutput values.
// You can construct a concrete instance of `FingerprintPtrInput` via:
//
//	        FingerprintArgs{...}
//
//	or:
//
//	        nil
type FingerprintPtrInput interface {
	pulumi.Input

	ToFingerprintPtrOutput() FingerprintPtrOutput
	ToFingerprintPtrOutputWithContext(context.Context) FingerprintPtrOutput
}

type fingerprintPtrType FingerprintArgs

func FingerprintPtr(v *FingerprintArgs) FingerprintPtrInput {
	return (*fingerprintPtrType)(v)
}

func (*fingerprintPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Fingerprint)(nil)).Elem()
}

func (i *fingerprintPtrType) ToFingerprintPtrOutput() FingerprintPtrOutput {
	return i.ToFingerprintPtrOutputWithContext(context.Background())
}

func (i *fingerprintPtrType) ToFingerprintPtrOutputWithContext(ctx context.Context) FingerprintPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FingerprintPtrOutput)
}

// A set of properties that uniquely identify a given Docker image.
type FingerprintOutput struct{ *pulumi.OutputState }

func (FingerprintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Fingerprint)(nil)).Elem()
}

func (o FingerprintOutput) ToFingerprintOutput() FingerprintOutput {
	return o
}

func (o FingerprintOutput) ToFingerprintOutputWithContext(ctx context.Context) FingerprintOutput {
	return o
}

func (o FingerprintOutput) ToFingerprintPtrOutput() FingerprintPtrOutput {
	return o.ToFingerprintPtrOutputWithContext(context.Background())
}

func (o FingerprintOutput) ToFingerprintPtrOutputWithContext(ctx context.Context) FingerprintPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Fingerprint) *Fingerprint {
		return &v
	}).(FingerprintPtrOutput)
}

// The layer ID of the final layer in the Docker image's v1 representation.
func (o FingerprintOutput) V1Name() pulumi.StringOutput {
	return o.ApplyT(func(v Fingerprint) string { return v.V1Name }).(pulumi.StringOutput)
}

// The ordered list of v2 blobs that represent a given image.
func (o FingerprintOutput) V2Blob() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Fingerprint) []string { return v.V2Blob }).(pulumi.StringArrayOutput)
}

type FingerprintPtrOutput struct{ *pulumi.OutputState }

func (FingerprintPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Fingerprint)(nil)).Elem()
}

func (o FingerprintPtrOutput) ToFingerprintPtrOutput() FingerprintPtrOutput {
	return o
}

func (o FingerprintPtrOutput) ToFingerprintPtrOutputWithContext(ctx context.Context) FingerprintPtrOutput {
	return o
}

func (o FingerprintPtrOutput) Elem() FingerprintOutput {
	return o.ApplyT(func(v *Fingerprint) Fingerprint {
		if v != nil {
			return *v
		}
		var ret Fingerprint
		return ret
	}).(FingerprintOutput)
}

// The layer ID of the final layer in the Docker image's v1 representation.
func (o FingerprintPtrOutput) V1Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Fingerprint) *string {
		if v == nil {
			return nil
		}
		return &v.V1Name
	}).(pulumi.StringPtrOutput)
}

// The ordered list of v2 blobs that represent a given image.
func (o FingerprintPtrOutput) V2Blob() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Fingerprint) []string {
		if v == nil {
			return nil
		}
		return v.V2Blob
	}).(pulumi.StringArrayOutput)
}

// A set of properties that uniquely identify a given Docker image.
type FingerprintResponse struct {
	// The layer ID of the final layer in the Docker image's v1 representation.
	V1Name string `pulumi:"v1Name"`
	// The ordered list of v2 blobs that represent a given image.
	V2Blob []string `pulumi:"v2Blob"`
	// The name of the image's v2 blobs computed via: [bottom] := v2_blobbottom := sha256(v2_blob[N] + " " + v2_name[N+1]) Only the name of the final blob is kept.
	V2Name string `pulumi:"v2Name"`
}

// A set of properties that uniquely identify a given Docker image.
type FingerprintResponseOutput struct{ *pulumi.OutputState }

func (FingerprintResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FingerprintResponse)(nil)).Elem()
}

func (o FingerprintResponseOutput) ToFingerprintResponseOutput() FingerprintResponseOutput {
	return o
}

func (o FingerprintResponseOutput) ToFingerprintResponseOutputWithContext(ctx context.Context) FingerprintResponseOutput {
	return o
}

// The layer ID of the final layer in the Docker image's v1 representation.
func (o FingerprintResponseOutput) V1Name() pulumi.StringOutput {
	return o.ApplyT(func(v FingerprintResponse) string { return v.V1Name }).(pulumi.StringOutput)
}

// The ordered list of v2 blobs that represent a given image.
func (o FingerprintResponseOutput) V2Blob() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FingerprintResponse) []string { return v.V2Blob }).(pulumi.StringArrayOutput)
}

// The name of the image's v2 blobs computed via: [bottom] := v2_blobbottom := sha256(v2_blob[N] + " " + v2_name[N+1]) Only the name of the final blob is kept.
func (o FingerprintResponseOutput) V2Name() pulumi.StringOutput {
	return o.ApplyT(func(v FingerprintResponse) string { return v.V2Name }).(pulumi.StringOutput)
}

// An attestation wrapper that uses the Grafeas `Signature` message. This attestation must define the `serialized_payload` that the `signatures` verify and any metadata necessary to interpret that plaintext. The signatures should always be over the `serialized_payload` bytestring.
type GenericSignedAttestation struct {
	// Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).
	ContentType *GenericSignedAttestationContentType `pulumi:"contentType"`
	// The serialized payload that is verified by one or more `signatures`. The encoding and semantic meaning of this payload must match what is set in `content_type`.
	SerializedPayload *string `pulumi:"serializedPayload"`
	// One or more signatures over `serialized_payload`. Verifier implementations should consider this attestation message verified if at least one `signature` verifies `serialized_payload`. See `Signature` in common.proto for more details on signature structure and verification.
	Signatures []Signature `pulumi:"signatures"`
}

// GenericSignedAttestationInput is an input type that accepts GenericSignedAttestationArgs and GenericSignedAttestationOutput values.
// You can construct a concrete instance of `GenericSignedAttestationInput` via:
//
//	GenericSignedAttestationArgs{...}
type GenericSignedAttestationInput interface {
	pulumi.Input

	ToGenericSignedAttestationOutput() GenericSignedAttestationOutput
	ToGenericSignedAttestationOutputWithContext(context.Context) GenericSignedAttestationOutput
}

// An attestation wrapper that uses the Grafeas `Signature` message. This attestation must define the `serialized_payload` that the `signatures` verify and any metadata necessary to interpret that plaintext. The signatures should always be over the `serialized_payload` bytestring.
type GenericSignedAttestationArgs struct {
	// Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).
	ContentType GenericSignedAttestationContentTypePtrInput `pulumi:"contentType"`
	// The serialized payload that is verified by one or more `signatures`. The encoding and semantic meaning of this payload must match what is set in `content_type`.
	SerializedPayload pulumi.StringPtrInput `pulumi:"serializedPayload"`
	// One or more signatures over `serialized_payload`. Verifier implementations should consider this attestation message verified if at least one `signature` verifies `serialized_payload`. See `Signature` in common.proto for more details on signature structure and verification.
	Signatures SignatureArrayInput `pulumi:"signatures"`
}

func (GenericSignedAttestationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GenericSignedAttestation)(nil)).Elem()
}

func (i GenericSignedAttestationArgs) ToGenericSignedAttestationOutput() GenericSignedAttestationOutput {
	return i.ToGenericSignedAttestationOutputWithContext(context.Background())
}

func (i GenericSignedAttestationArgs) ToGenericSignedAttestationOutputWithContext(ctx context.Context) GenericSignedAttestationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GenericSignedAttestationOutput)
}

func (i GenericSignedAttestationArgs) ToGenericSignedAttestationPtrOutput() GenericSignedAttestationPtrOutput {
	return i.ToGenericSignedAttestationPtrOutputWithContext(context.Background())
}

func (i GenericSignedAttestationArgs) ToGenericSignedAttestationPtrOutputWithContext(ctx context.Context) GenericSignedAttestationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GenericSignedAttestationOutput).ToGenericSignedAttestationPtrOutputWithContext(ctx)
}

// GenericSignedAttestationPtrInput is an input type that accepts GenericSignedAttestationArgs, GenericSignedAttestationPtr and GenericSignedAttestationPtrOutput values.
// You can construct a concrete instance of `GenericSignedAttestationPtrInput` via:
//
//	        GenericSignedAttestationArgs{...}
//
//	or:
//
//	        nil
type GenericSignedAttestationPtrInput interface {
	pulumi.Input

	ToGenericSignedAttestationPtrOutput() GenericSignedAttestationPtrOutput
	ToGenericSignedAttestationPtrOutputWithContext(context.Context) GenericSignedAttestationPtrOutput
}

type genericSignedAttestationPtrType GenericSignedAttestationArgs

func GenericSignedAttestationPtr(v *GenericSignedAttestationArgs) GenericSignedAttestationPtrInput {
	return (*genericSignedAttestationPtrType)(v)
}

func (*genericSignedAttestationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GenericSignedAttestation)(nil)).Elem()
}

func (i *genericSignedAttestationPtrType) ToGenericSignedAttestationPtrOutput() GenericSignedAttestationPtrOutput {
	return i.ToGenericSignedAttestationPtrOutputWithContext(context.Background())
}

func (i *genericSignedAttestationPtrType) ToGenericSignedAttestationPtrOutputWithContext(ctx context.Context) GenericSignedAttestationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GenericSignedAttestationPtrOutput)
}

// An attestation wrapper that uses the Grafeas `Signature` message. This attestation must define the `serialized_payload` that the `signatures` verify and any metadata necessary to interpret that plaintext. The signatures should always be over the `serialized_payload` bytestring.
type GenericSignedAttestationOutput struct{ *pulumi.OutputState }

func (GenericSignedAttestationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GenericSignedAttestation)(nil)).Elem()
}

func (o GenericSignedAttestationOutput) ToGenericSignedAttestationOutput() GenericSignedAttestationOutput {
	return o
}

func (o GenericSignedAttestationOutput) ToGenericSignedAttestationOutputWithContext(ctx context.Context) GenericSignedAttestationOutput {
	return o
}

func (o GenericSignedAttestationOutput) ToGenericSignedAttestationPtrOutput() GenericSignedAttestationPtrOutput {
	return o.ToGenericSignedAttestationPtrOutputWithContext(context.Background())
}

func (o GenericSignedAttestationOutput) ToGenericSignedAttestationPtrOutputWithContext(ctx context.Context) GenericSignedAttestationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GenericSignedAttestation) *GenericSignedAttestation {
		return &v
	}).(GenericSignedAttestationPtrOutput)
}

// Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).
func (o GenericSignedAttestationOutput) ContentType() GenericSignedAttestationContentTypePtrOutput {
	return o.ApplyT(func(v GenericSignedAttestation) *GenericSignedAttestationContentType { return v.ContentType }).(GenericSignedAttestationContentTypePtrOutput)
}

// The serialized payload that is verified by one or more `signatures`. The encoding and semantic meaning of this payload must match what is set in `content_type`.
func (o GenericSignedAttestationOutput) SerializedPayload() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GenericSignedAttestation) *string { return v.SerializedPayload }).(pulumi.StringPtrOutput)
}

// One or more signatures over `serialized_payload`. Verifier implementations should consider this attestation message verified if at least one `signature` verifies `serialized_payload`. See `Signature` in common.proto for more details on signature structure and verification.
func (o GenericSignedAttestationOutput) Signatures() SignatureArrayOutput {
	return o.ApplyT(func(v GenericSignedAttestation) []Signature { return v.Signatures }).(SignatureArrayOutput)
}

type GenericSignedAttestationPtrOutput struct{ *pulumi.OutputState }

func (GenericSignedAttestationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GenericSignedAttestation)(nil)).Elem()
}

func (o GenericSignedAttestationPtrOutput) ToGenericSignedAttestationPtrOutput() GenericSignedAttestationPtrOutput {
	return o
}

func (o GenericSignedAttestationPtrOutput) ToGenericSignedAttestationPtrOutputWithContext(ctx context.Context) GenericSignedAttestationPtrOutput {
	return o
}

func (o GenericSignedAttestationPtrOutput) Elem() GenericSignedAttestationOutput {
	return o.ApplyT(func(v *GenericSignedAttestation) GenericSignedAttestation {
		if v != nil {
			return *v
		}
		var ret GenericSignedAttestation
		return ret
	}).(GenericSignedAttestationOutput)
}

// Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).
func (o GenericSignedAttestationPtrOutput) ContentType() GenericSignedAttestationContentTypePtrOutput {
	return o.ApplyT(func(v *GenericSignedAttestation) *GenericSignedAttestationContentType {
		if v == nil {
			return nil
		}
		return v.ContentType
	}).(GenericSignedAttestationContentTypePtrOutput)
}

// The serialized payload that is verified by one or more `signatures`. The encoding and semantic meaning of this payload must match what is set in `content_type`.
func (o GenericSignedAttestationPtrOutput) SerializedPayload() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GenericSignedAttestation) *string {
		if v == nil {
			return nil
		}
		return v.SerializedPayload
	}).(pulumi.StringPtrOutput)
}

// One or more signatures over `serialized_payload`. Verifier implementations should consider this attestation message verified if at least one `signature` verifies `serialized_payload`. See `Signature` in common.proto for more details on signature structure and verification.
func (o GenericSignedAttestationPtrOutput) Signatures() SignatureArrayOutput {
	return o.ApplyT(func(v *GenericSignedAttestation) []Signature {
		if v == nil {
			return nil
		}
		return v.Signatures
	}).(SignatureArrayOutput)
}

// An attestation wrapper that uses the Grafeas `Signature` message. This attestation must define the `serialized_payload` that the `signatures` verify and any metadata necessary to interpret that plaintext. The signatures should always be over the `serialized_payload` bytestring.
type GenericSignedAttestationResponse struct {
	// Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).
	ContentType string `pulumi:"contentType"`
	// The serialized payload that is verified by one or more `signatures`. The encoding and semantic meaning of this payload must match what is set in `content_type`.
	SerializedPayload string `pulumi:"serializedPayload"`
	// One or more signatures over `serialized_payload`. Verifier implementations should consider this attestation message verified if at least one `signature` verifies `serialized_payload`. See `Signature` in common.proto for more details on signature structure and verification.
	Signatures []SignatureResponse `pulumi:"signatures"`
}

// An attestation wrapper that uses the Grafeas `Signature` message. This attestation must define the `serialized_payload` that the `signatures` verify and any metadata necessary to interpret that plaintext. The signatures should always be over the `serialized_payload` bytestring.
type GenericSignedAttestationResponseOutput struct{ *pulumi.OutputState }

func (GenericSignedAttestationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GenericSignedAttestationResponse)(nil)).Elem()
}

func (o GenericSignedAttestationResponseOutput) ToGenericSignedAttestationResponseOutput() GenericSignedAttestationResponseOutput {
	return o
}

func (o GenericSignedAttestationResponseOutput) ToGenericSignedAttestationResponseOutputWithContext(ctx context.Context) GenericSignedAttestationResponseOutput {
	return o
}

// Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).
func (o GenericSignedAttestationResponseOutput) ContentType() pulumi.StringOutput {
	return o.ApplyT(func(v GenericSignedAttestationResponse) string { return v.ContentType }).(pulumi.StringOutput)
}

// The serialized payload that is verified by one or more `signatures`. The encoding and semantic meaning of this payload must match what is set in `content_type`.
func (o GenericSignedAttestationResponseOutput) SerializedPayload() pulumi.StringOutput {
	return o.ApplyT(func(v GenericSignedAttestationResponse) string { return v.SerializedPayload }).(pulumi.StringOutput)
}

// One or more signatures over `serialized_payload`. Verifier implementations should consider this attestation message verified if at least one `signature` verifies `serialized_payload`. See `Signature` in common.proto for more details on signature structure and verification.
func (o GenericSignedAttestationResponseOutput) Signatures() SignatureResponseArrayOutput {
	return o.ApplyT(func(v GenericSignedAttestationResponse) []SignatureResponse { return v.Signatures }).(SignatureResponseArrayOutput)
}

// A SourceContext referring to a Gerrit project.
type GerritSourceContext struct {
	// An alias, which may be a branch or tag.
	AliasContext *AliasContext `pulumi:"aliasContext"`
	// The full project name within the host. Projects may be nested, so "project/subproject" is a valid project name. The "repo name" is the hostURI/project.
	GerritProject *string `pulumi:"gerritProject"`
	// The URI of a running Gerrit instance.
	HostUri *string `pulumi:"hostUri"`
	// A revision (commit) ID.
	RevisionId *string `pulumi:"revisionId"`
}

// GerritSourceContextInput is an input type that accepts GerritSourceContextArgs and GerritSourceContextOutput values.
// You can construct a concrete instance of `GerritSourceContextInput` via:
//
//	GerritSourceContextArgs{...}
type GerritSourceContextInput interface {
	pulumi.Input

	ToGerritSourceContextOutput() GerritSourceContextOutput
	ToGerritSourceContextOutputWithContext(context.Context) GerritSourceContextOutput
}

// A SourceContext referring to a Gerrit project.
type GerritSourceContextArgs struct {
	// An alias, which may be a branch or tag.
	AliasContext AliasContextPtrInput `pulumi:"aliasContext"`
	// The full project name within the host. Projects may be nested, so "project/subproject" is a valid project name. The "repo name" is the hostURI/project.
	GerritProject pulumi.StringPtrInput `pulumi:"gerritProject"`
	// The URI of a running Gerrit instance.
	HostUri pulumi.StringPtrInput `pulumi:"hostUri"`
	// A revision (commit) ID.
	RevisionId pulumi.StringPtrInput `pulumi:"revisionId"`
}

func (GerritSourceContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GerritSourceContext)(nil)).Elem()
}

func (i GerritSourceContextArgs) ToGerritSourceContextOutput() GerritSourceContextOutput {
	return i.ToGerritSourceContextOutputWithContext(context.Background())
}

func (i GerritSourceContextArgs) ToGerritSourceContextOutputWithContext(ctx context.Context) GerritSourceContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GerritSourceContextOutput)
}

func (i GerritSourceContextArgs) ToGerritSourceContextPtrOutput() GerritSourceContextPtrOutput {
	return i.ToGerritSourceContextPtrOutputWithContext(context.Background())
}

func (i GerritSourceContextArgs) ToGerritSourceContextPtrOutputWithContext(ctx context.Context) GerritSourceContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GerritSourceContextOutput).ToGerritSourceContextPtrOutputWithContext(ctx)
}

// GerritSourceContextPtrInput is an input type that accepts GerritSourceContextArgs, GerritSourceContextPtr and GerritSourceContextPtrOutput values.
// You can construct a concrete instance of `GerritSourceContextPtrInput` via:
//
//	        GerritSourceContextArgs{...}
//
//	or:
//
//	        nil
type GerritSourceContextPtrInput interface {
	pulumi.Input

	ToGerritSourceContextPtrOutput() GerritSourceContextPtrOutput
	ToGerritSourceContextPtrOutputWithContext(context.Context) GerritSourceContextPtrOutput
}

type gerritSourceContextPtrType GerritSourceContextArgs

func GerritSourceContextPtr(v *GerritSourceContextArgs) GerritSourceContextPtrInput {
	return (*gerritSourceContextPtrType)(v)
}

func (*gerritSourceContextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GerritSourceContext)(nil)).Elem()
}

func (i *gerritSourceContextPtrType) ToGerritSourceContextPtrOutput() GerritSourceContextPtrOutput {
	return i.ToGerritSourceContextPtrOutputWithContext(context.Background())
}

func (i *gerritSourceContextPtrType) ToGerritSourceContextPtrOutputWithContext(ctx context.Context) GerritSourceContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GerritSourceContextPtrOutput)
}

// A SourceContext referring to a Gerrit project.
type GerritSourceContextOutput struct{ *pulumi.OutputState }

func (GerritSourceContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GerritSourceContext)(nil)).Elem()
}

func (o GerritSourceContextOutput) ToGerritSourceContextOutput() GerritSourceContextOutput {
	return o
}

func (o GerritSourceContextOutput) ToGerritSourceContextOutputWithContext(ctx context.Context) GerritSourceContextOutput {
	return o
}

func (o GerritSourceContextOutput) ToGerritSourceContextPtrOutput() GerritSourceContextPtrOutput {
	return o.ToGerritSourceContextPtrOutputWithContext(context.Background())
}

func (o GerritSourceContextOutput) ToGerritSourceContextPtrOutputWithContext(ctx context.Context) GerritSourceContextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GerritSourceContext) *GerritSourceContext {
		return &v
	}).(GerritSourceContextPtrOutput)
}

// An alias, which may be a branch or tag.
func (o GerritSourceContextOutput) AliasContext() AliasContextPtrOutput {
	return o.ApplyT(func(v GerritSourceContext) *AliasContext { return v.AliasContext }).(AliasContextPtrOutput)
}

// The full project name within the host. Projects may be nested, so "project/subproject" is a valid project name. The "repo name" is the hostURI/project.
func (o GerritSourceContextOutput) GerritProject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GerritSourceContext) *string { return v.GerritProject }).(pulumi.StringPtrOutput)
}

// The URI of a running Gerrit instance.
func (o GerritSourceContextOutput) HostUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GerritSourceContext) *string { return v.HostUri }).(pulumi.StringPtrOutput)
}

// A revision (commit) ID.
func (o GerritSourceContextOutput) RevisionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GerritSourceContext) *string { return v.RevisionId }).(pulumi.StringPtrOutput)
}

type GerritSourceContextPtrOutput struct{ *pulumi.OutputState }

func (GerritSourceContextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GerritSourceContext)(nil)).Elem()
}

func (o GerritSourceContextPtrOutput) ToGerritSourceContextPtrOutput() GerritSourceContextPtrOutput {
	return o
}

func (o GerritSourceContextPtrOutput) ToGerritSourceContextPtrOutputWithContext(ctx context.Context) GerritSourceContextPtrOutput {
	return o
}

func (o GerritSourceContextPtrOutput) Elem() GerritSourceContextOutput {
	return o.ApplyT(func(v *GerritSourceContext) GerritSourceContext {
		if v != nil {
			return *v
		}
		var ret GerritSourceContext
		return ret
	}).(GerritSourceContextOutput)
}

// An alias, which may be a branch or tag.
func (o GerritSourceContextPtrOutput) AliasContext() AliasContextPtrOutput {
	return o.ApplyT(func(v *GerritSourceContext) *AliasContext {
		if v == nil {
			return nil
		}
		return v.AliasContext
	}).(AliasContextPtrOutput)
}

// The full project name within the host. Projects may be nested, so "project/subproject" is a valid project name. The "repo name" is the hostURI/project.
func (o GerritSourceContextPtrOutput) GerritProject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GerritSourceContext) *string {
		if v == nil {
			return nil
		}
		return v.GerritProject
	}).(pulumi.StringPtrOutput)
}

// The URI of a running Gerrit instance.
func (o GerritSourceContextPtrOutput) HostUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GerritSourceContext) *string {
		if v == nil {
			return nil
		}
		return v.HostUri
	}).(pulumi.StringPtrOutput)
}

// A revision (commit) ID.
func (o GerritSourceContextPtrOutput) RevisionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GerritSourceContext) *string {
		if v == nil {
			return nil
		}
		return v.RevisionId
	}).(pulumi.StringPtrOutput)
}

// A SourceContext referring to a Gerrit project.
type GerritSourceContextResponse struct {
	// An alias, which may be a branch or tag.
	AliasContext AliasContextResponse `pulumi:"aliasContext"`
	// The full project name within the host. Projects may be nested, so "project/subproject" is a valid project name. The "repo name" is the hostURI/project.
	GerritProject string `pulumi:"gerritProject"`
	// The URI of a running Gerrit instance.
	HostUri string `pulumi:"hostUri"`
	// A revision (commit) ID.
	RevisionId string `pulumi:"revisionId"`
}

// A SourceContext referring to a Gerrit project.
type GerritSourceContextResponseOutput struct{ *pulumi.OutputState }

func (GerritSourceContextResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GerritSourceContextResponse)(nil)).Elem()
}

func (o GerritSourceContextResponseOutput) ToGerritSourceContextResponseOutput() GerritSourceContextResponseOutput {
	return o
}

func (o GerritSourceContextResponseOutput) ToGerritSourceContextResponseOutputWithContext(ctx context.Context) GerritSourceContextResponseOutput {
	return o
}

// An alias, which may be a branch or tag.
func (o GerritSourceContextResponseOutput) AliasContext() AliasContextResponseOutput {
	return o.ApplyT(func(v GerritSourceContextResponse) AliasContextResponse { return v.AliasContext }).(AliasContextResponseOutput)
}

// The full project name within the host. Projects may be nested, so "project/subproject" is a valid project name. The "repo name" is the hostURI/project.
func (o GerritSourceContextResponseOutput) GerritProject() pulumi.StringOutput {
	return o.ApplyT(func(v GerritSourceContextResponse) string { return v.GerritProject }).(pulumi.StringOutput)
}

// The URI of a running Gerrit instance.
func (o GerritSourceContextResponseOutput) HostUri() pulumi.StringOutput {
	return o.ApplyT(func(v GerritSourceContextResponse) string { return v.HostUri }).(pulumi.StringOutput)
}

// A revision (commit) ID.
func (o GerritSourceContextResponseOutput) RevisionId() pulumi.StringOutput {
	return o.ApplyT(func(v GerritSourceContextResponse) string { return v.RevisionId }).(pulumi.StringOutput)
}

// A GitSourceContext denotes a particular revision in a third party Git repository (e.g., GitHub).
type GitSourceContext struct {
	// Git commit hash.
	RevisionId *string `pulumi:"revisionId"`
	// Git repository URL.
	Url *string `pulumi:"url"`
}

// GitSourceContextInput is an input type that accepts GitSourceContextArgs and GitSourceContextOutput values.
// You can construct a concrete instance of `GitSourceContextInput` via:
//
//	GitSourceContextArgs{...}
type GitSourceContextInput interface {
	pulumi.Input

	ToGitSourceContextOutput() GitSourceContextOutput
	ToGitSourceContextOutputWithContext(context.Context) GitSourceContextOutput
}

// A GitSourceContext denotes a particular revision in a third party Git repository (e.g., GitHub).
type GitSourceContextArgs struct {
	// Git commit hash.
	RevisionId pulumi.StringPtrInput `pulumi:"revisionId"`
	// Git repository URL.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (GitSourceContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitSourceContext)(nil)).Elem()
}

func (i GitSourceContextArgs) ToGitSourceContextOutput() GitSourceContextOutput {
	return i.ToGitSourceContextOutputWithContext(context.Background())
}

func (i GitSourceContextArgs) ToGitSourceContextOutputWithContext(ctx context.Context) GitSourceContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitSourceContextOutput)
}

func (i GitSourceContextArgs) ToGitSourceContextPtrOutput() GitSourceContextPtrOutput {
	return i.ToGitSourceContextPtrOutputWithContext(context.Background())
}

func (i GitSourceContextArgs) ToGitSourceContextPtrOutputWithContext(ctx context.Context) GitSourceContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitSourceContextOutput).ToGitSourceContextPtrOutputWithContext(ctx)
}

// GitSourceContextPtrInput is an input type that accepts GitSourceContextArgs, GitSourceContextPtr and GitSourceContextPtrOutput values.
// You can construct a concrete instance of `GitSourceContextPtrInput` via:
//
//	        GitSourceContextArgs{...}
//
//	or:
//
//	        nil
type GitSourceContextPtrInput interface {
	pulumi.Input

	ToGitSourceContextPtrOutput() GitSourceContextPtrOutput
	ToGitSourceContextPtrOutputWithContext(context.Context) GitSourceContextPtrOutput
}

type gitSourceContextPtrType GitSourceContextArgs

func GitSourceContextPtr(v *GitSourceContextArgs) GitSourceContextPtrInput {
	return (*gitSourceContextPtrType)(v)
}

func (*gitSourceContextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitSourceContext)(nil)).Elem()
}

func (i *gitSourceContextPtrType) ToGitSourceContextPtrOutput() GitSourceContextPtrOutput {
	return i.ToGitSourceContextPtrOutputWithContext(context.Background())
}

func (i *gitSourceContextPtrType) ToGitSourceContextPtrOutputWithContext(ctx context.Context) GitSourceContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitSourceContextPtrOutput)
}

// A GitSourceContext denotes a particular revision in a third party Git repository (e.g., GitHub).
type GitSourceContextOutput struct{ *pulumi.OutputState }

func (GitSourceContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitSourceContext)(nil)).Elem()
}

func (o GitSourceContextOutput) ToGitSourceContextOutput() GitSourceContextOutput {
	return o
}

func (o GitSourceContextOutput) ToGitSourceContextOutputWithContext(ctx context.Context) GitSourceContextOutput {
	return o
}

func (o GitSourceContextOutput) ToGitSourceContextPtrOutput() GitSourceContextPtrOutput {
	return o.ToGitSourceContextPtrOutputWithContext(context.Background())
}

func (o GitSourceContextOutput) ToGitSourceContextPtrOutputWithContext(ctx context.Context) GitSourceContextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitSourceContext) *GitSourceContext {
		return &v
	}).(GitSourceContextPtrOutput)
}

// Git commit hash.
func (o GitSourceContextOutput) RevisionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitSourceContext) *string { return v.RevisionId }).(pulumi.StringPtrOutput)
}

// Git repository URL.
func (o GitSourceContextOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitSourceContext) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type GitSourceContextPtrOutput struct{ *pulumi.OutputState }

func (GitSourceContextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitSourceContext)(nil)).Elem()
}

func (o GitSourceContextPtrOutput) ToGitSourceContextPtrOutput() GitSourceContextPtrOutput {
	return o
}

func (o GitSourceContextPtrOutput) ToGitSourceContextPtrOutputWithContext(ctx context.Context) GitSourceContextPtrOutput {
	return o
}

func (o GitSourceContextPtrOutput) Elem() GitSourceContextOutput {
	return o.ApplyT(func(v *GitSourceContext) GitSourceContext {
		if v != nil {
			return *v
		}
		var ret GitSourceContext
		return ret
	}).(GitSourceContextOutput)
}

// Git commit hash.
func (o GitSourceContextPtrOutput) RevisionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitSourceContext) *string {
		if v == nil {
			return nil
		}
		return v.RevisionId
	}).(pulumi.StringPtrOutput)
}

// Git repository URL.
func (o GitSourceContextPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitSourceContext) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// A GitSourceContext denotes a particular revision in a third party Git repository (e.g., GitHub).
type GitSourceContextResponse struct {
	// Git commit hash.
	RevisionId string `pulumi:"revisionId"`
	// Git repository URL.
	Url string `pulumi:"url"`
}

// A GitSourceContext denotes a particular revision in a third party Git repository (e.g., GitHub).
type GitSourceContextResponseOutput struct{ *pulumi.OutputState }

func (GitSourceContextResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitSourceContextResponse)(nil)).Elem()
}

func (o GitSourceContextResponseOutput) ToGitSourceContextResponseOutput() GitSourceContextResponseOutput {
	return o
}

func (o GitSourceContextResponseOutput) ToGitSourceContextResponseOutputWithContext(ctx context.Context) GitSourceContextResponseOutput {
	return o
}

// Git commit hash.
func (o GitSourceContextResponseOutput) RevisionId() pulumi.StringOutput {
	return o.ApplyT(func(v GitSourceContextResponse) string { return v.RevisionId }).(pulumi.StringOutput)
}

// Git repository URL.
func (o GitSourceContextResponseOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v GitSourceContextResponse) string { return v.Url }).(pulumi.StringOutput)
}

// Details of a build occurrence.
type GrafeasV1beta1BuildDetails struct {
	InTotoSlsaProvenanceV1 *InTotoSlsaProvenanceV1 `pulumi:"inTotoSlsaProvenanceV1"`
	// The actual provenance for the build.
	Provenance BuildProvenance `pulumi:"provenance"`
	// Serialized JSON representation of the provenance, used in generating the build signature in the corresponding build note. After verifying the signature, `provenance_bytes` can be unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json as well to prevent incompatibilities with future changes.
	ProvenanceBytes *string `pulumi:"provenanceBytes"`
}

// GrafeasV1beta1BuildDetailsInput is an input type that accepts GrafeasV1beta1BuildDetailsArgs and GrafeasV1beta1BuildDetailsOutput values.
// You can construct a concrete instance of `GrafeasV1beta1BuildDetailsInput` via:
//
//	GrafeasV1beta1BuildDetailsArgs{...}
type GrafeasV1beta1BuildDetailsInput interface {
	pulumi.Input

	ToGrafeasV1beta1BuildDetailsOutput() GrafeasV1beta1BuildDetailsOutput
	ToGrafeasV1beta1BuildDetailsOutputWithContext(context.Context) GrafeasV1beta1BuildDetailsOutput
}

// Details of a build occurrence.
type GrafeasV1beta1BuildDetailsArgs struct {
	InTotoSlsaProvenanceV1 InTotoSlsaProvenanceV1PtrInput `pulumi:"inTotoSlsaProvenanceV1"`
	// The actual provenance for the build.
	Provenance BuildProvenanceInput `pulumi:"provenance"`
	// Serialized JSON representation of the provenance, used in generating the build signature in the corresponding build note. After verifying the signature, `provenance_bytes` can be unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json as well to prevent incompatibilities with future changes.
	ProvenanceBytes pulumi.StringPtrInput `pulumi:"provenanceBytes"`
}

func (GrafeasV1beta1BuildDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1beta1BuildDetails)(nil)).Elem()
}

func (i GrafeasV1beta1BuildDetailsArgs) ToGrafeasV1beta1BuildDetailsOutput() GrafeasV1beta1BuildDetailsOutput {
	return i.ToGrafeasV1beta1BuildDetailsOutputWithContext(context.Background())
}

func (i GrafeasV1beta1BuildDetailsArgs) ToGrafeasV1beta1BuildDetailsOutputWithContext(ctx context.Context) GrafeasV1beta1BuildDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1beta1BuildDetailsOutput)
}

func (i GrafeasV1beta1BuildDetailsArgs) ToGrafeasV1beta1BuildDetailsPtrOutput() GrafeasV1beta1BuildDetailsPtrOutput {
	return i.ToGrafeasV1beta1BuildDetailsPtrOutputWithContext(context.Background())
}

func (i GrafeasV1beta1BuildDetailsArgs) ToGrafeasV1beta1BuildDetailsPtrOutputWithContext(ctx context.Context) GrafeasV1beta1BuildDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1beta1BuildDetailsOutput).ToGrafeasV1beta1BuildDetailsPtrOutputWithContext(ctx)
}

// GrafeasV1beta1BuildDetailsPtrInput is an input type that accepts GrafeasV1beta1BuildDetailsArgs, GrafeasV1beta1BuildDetailsPtr and GrafeasV1beta1BuildDetailsPtrOutput values.
// You can construct a concrete instance of `GrafeasV1beta1BuildDetailsPtrInput` via:
//
//	        GrafeasV1beta1BuildDetailsArgs{...}
//
//	or:
//
//	        nil
type GrafeasV1beta1BuildDetailsPtrInput interface {
	pulumi.Input

	ToGrafeasV1beta1BuildDetailsPtrOutput() GrafeasV1beta1BuildDetailsPtrOutput
	ToGrafeasV1beta1BuildDetailsPtrOutputWithContext(context.Context) GrafeasV1beta1BuildDetailsPtrOutput
}

type grafeasV1beta1BuildDetailsPtrType GrafeasV1beta1BuildDetailsArgs

func GrafeasV1beta1BuildDetailsPtr(v *GrafeasV1beta1BuildDetailsArgs) GrafeasV1beta1BuildDetailsPtrInput {
	return (*grafeasV1beta1BuildDetailsPtrType)(v)
}

func (*grafeasV1beta1BuildDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GrafeasV1beta1BuildDetails)(nil)).Elem()
}

func (i *grafeasV1beta1BuildDetailsPtrType) ToGrafeasV1beta1BuildDetailsPtrOutput() GrafeasV1beta1BuildDetailsPtrOutput {
	return i.ToGrafeasV1beta1BuildDetailsPtrOutputWithContext(context.Background())
}

func (i *grafeasV1beta1BuildDetailsPtrType) ToGrafeasV1beta1BuildDetailsPtrOutputWithContext(ctx context.Context) GrafeasV1beta1BuildDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1beta1BuildDetailsPtrOutput)
}

// Details of a build occurrence.
type GrafeasV1beta1BuildDetailsOutput struct{ *pulumi.OutputState }

func (GrafeasV1beta1BuildDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1beta1BuildDetails)(nil)).Elem()
}

func (o GrafeasV1beta1BuildDetailsOutput) ToGrafeasV1beta1BuildDetailsOutput() GrafeasV1beta1BuildDetailsOutput {
	return o
}

func (o GrafeasV1beta1BuildDetailsOutput) ToGrafeasV1beta1BuildDetailsOutputWithContext(ctx context.Context) GrafeasV1beta1BuildDetailsOutput {
	return o
}

func (o GrafeasV1beta1BuildDetailsOutput) ToGrafeasV1beta1BuildDetailsPtrOutput() GrafeasV1beta1BuildDetailsPtrOutput {
	return o.ToGrafeasV1beta1BuildDetailsPtrOutputWithContext(context.Background())
}

func (o GrafeasV1beta1BuildDetailsOutput) ToGrafeasV1beta1BuildDetailsPtrOutputWithContext(ctx context.Context) GrafeasV1beta1BuildDetailsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GrafeasV1beta1BuildDetails) *GrafeasV1beta1BuildDetails {
		return &v
	}).(GrafeasV1beta1BuildDetailsPtrOutput)
}

func (o GrafeasV1beta1BuildDetailsOutput) InTotoSlsaProvenanceV1() InTotoSlsaProvenanceV1PtrOutput {
	return o.ApplyT(func(v GrafeasV1beta1BuildDetails) *InTotoSlsaProvenanceV1 { return v.InTotoSlsaProvenanceV1 }).(InTotoSlsaProvenanceV1PtrOutput)
}

// The actual provenance for the build.
func (o GrafeasV1beta1BuildDetailsOutput) Provenance() BuildProvenanceOutput {
	return o.ApplyT(func(v GrafeasV1beta1BuildDetails) BuildProvenance { return v.Provenance }).(BuildProvenanceOutput)
}

// Serialized JSON representation of the provenance, used in generating the build signature in the corresponding build note. After verifying the signature, `provenance_bytes` can be unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json as well to prevent incompatibilities with future changes.
func (o GrafeasV1beta1BuildDetailsOutput) ProvenanceBytes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GrafeasV1beta1BuildDetails) *string { return v.ProvenanceBytes }).(pulumi.StringPtrOutput)
}

type GrafeasV1beta1BuildDetailsPtrOutput struct{ *pulumi.OutputState }

func (GrafeasV1beta1BuildDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GrafeasV1beta1BuildDetails)(nil)).Elem()
}

func (o GrafeasV1beta1BuildDetailsPtrOutput) ToGrafeasV1beta1BuildDetailsPtrOutput() GrafeasV1beta1BuildDetailsPtrOutput {
	return o
}

func (o GrafeasV1beta1BuildDetailsPtrOutput) ToGrafeasV1beta1BuildDetailsPtrOutputWithContext(ctx context.Context) GrafeasV1beta1BuildDetailsPtrOutput {
	return o
}

func (o GrafeasV1beta1BuildDetailsPtrOutput) Elem() GrafeasV1beta1BuildDetailsOutput {
	return o.ApplyT(func(v *GrafeasV1beta1BuildDetails) GrafeasV1beta1BuildDetails {
		if v != nil {
			return *v
		}
		var ret GrafeasV1beta1BuildDetails
		return ret
	}).(GrafeasV1beta1BuildDetailsOutput)
}

func (o GrafeasV1beta1BuildDetailsPtrOutput) InTotoSlsaProvenanceV1() InTotoSlsaProvenanceV1PtrOutput {
	return o.ApplyT(func(v *GrafeasV1beta1BuildDetails) *InTotoSlsaProvenanceV1 {
		if v == nil {
			return nil
		}
		return v.InTotoSlsaProvenanceV1
	}).(InTotoSlsaProvenanceV1PtrOutput)
}

// The actual provenance for the build.
func (o GrafeasV1beta1BuildDetailsPtrOutput) Provenance() BuildProvenancePtrOutput {
	return o.ApplyT(func(v *GrafeasV1beta1BuildDetails) *BuildProvenance {
		if v == nil {
			return nil
		}
		return &v.Provenance
	}).(BuildProvenancePtrOutput)
}

// Serialized JSON representation of the provenance, used in generating the build signature in the corresponding build note. After verifying the signature, `provenance_bytes` can be unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json as well to prevent incompatibilities with future changes.
func (o GrafeasV1beta1BuildDetailsPtrOutput) ProvenanceBytes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GrafeasV1beta1BuildDetails) *string {
		if v == nil {
			return nil
		}
		return v.ProvenanceBytes
	}).(pulumi.StringPtrOutput)
}

// Details of a build occurrence.
type GrafeasV1beta1BuildDetailsResponse struct {
	InTotoSlsaProvenanceV1 InTotoSlsaProvenanceV1Response `pulumi:"inTotoSlsaProvenanceV1"`
	// The actual provenance for the build.
	Provenance BuildProvenanceResponse `pulumi:"provenance"`
	// Serialized JSON representation of the provenance, used in generating the build signature in the corresponding build note. After verifying the signature, `provenance_bytes` can be unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json as well to prevent incompatibilities with future changes.
	ProvenanceBytes string `pulumi:"provenanceBytes"`
}

// Details of a build occurrence.
type GrafeasV1beta1BuildDetailsResponseOutput struct{ *pulumi.OutputState }

func (GrafeasV1beta1BuildDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1beta1BuildDetailsResponse)(nil)).Elem()
}

func (o GrafeasV1beta1BuildDetailsResponseOutput) ToGrafeasV1beta1BuildDetailsResponseOutput() GrafeasV1beta1BuildDetailsResponseOutput {
	return o
}

func (o GrafeasV1beta1BuildDetailsResponseOutput) ToGrafeasV1beta1BuildDetailsResponseOutputWithContext(ctx context.Context) GrafeasV1beta1BuildDetailsResponseOutput {
	return o
}

func (o GrafeasV1beta1BuildDetailsResponseOutput) InTotoSlsaProvenanceV1() InTotoSlsaProvenanceV1ResponseOutput {
	return o.ApplyT(func(v GrafeasV1beta1BuildDetailsResponse) InTotoSlsaProvenanceV1Response {
		return v.InTotoSlsaProvenanceV1
	}).(InTotoSlsaProvenanceV1ResponseOutput)
}

// The actual provenance for the build.
func (o GrafeasV1beta1BuildDetailsResponseOutput) Provenance() BuildProvenanceResponseOutput {
	return o.ApplyT(func(v GrafeasV1beta1BuildDetailsResponse) BuildProvenanceResponse { return v.Provenance }).(BuildProvenanceResponseOutput)
}

// Serialized JSON representation of the provenance, used in generating the build signature in the corresponding build note. After verifying the signature, `provenance_bytes` can be unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json as well to prevent incompatibilities with future changes.
func (o GrafeasV1beta1BuildDetailsResponseOutput) ProvenanceBytes() pulumi.StringOutput {
	return o.ApplyT(func(v GrafeasV1beta1BuildDetailsResponse) string { return v.ProvenanceBytes }).(pulumi.StringOutput)
}

// Details of a deployment occurrence.
type GrafeasV1beta1DeploymentDetails struct {
	// Deployment history for the resource.
	Deployment Deployment `pulumi:"deployment"`
}

// GrafeasV1beta1DeploymentDetailsInput is an input type that accepts GrafeasV1beta1DeploymentDetailsArgs and GrafeasV1beta1DeploymentDetailsOutput values.
// You can construct a concrete instance of `GrafeasV1beta1DeploymentDetailsInput` via:
//
//	GrafeasV1beta1DeploymentDetailsArgs{...}
type GrafeasV1beta1DeploymentDetailsInput interface {
	pulumi.Input

	ToGrafeasV1beta1DeploymentDetailsOutput() GrafeasV1beta1DeploymentDetailsOutput
	ToGrafeasV1beta1DeploymentDetailsOutputWithContext(context.Context) GrafeasV1beta1DeploymentDetailsOutput
}

// Details of a deployment occurrence.
type GrafeasV1beta1DeploymentDetailsArgs struct {
	// Deployment history for the resource.
	Deployment DeploymentInput `pulumi:"deployment"`
}

func (GrafeasV1beta1DeploymentDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1beta1DeploymentDetails)(nil)).Elem()
}

func (i GrafeasV1beta1DeploymentDetailsArgs) ToGrafeasV1beta1DeploymentDetailsOutput() GrafeasV1beta1DeploymentDetailsOutput {
	return i.ToGrafeasV1beta1DeploymentDetailsOutputWithContext(context.Background())
}

func (i GrafeasV1beta1DeploymentDetailsArgs) ToGrafeasV1beta1DeploymentDetailsOutputWithContext(ctx context.Context) GrafeasV1beta1DeploymentDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1beta1DeploymentDetailsOutput)
}

func (i GrafeasV1beta1DeploymentDetailsArgs) ToGrafeasV1beta1DeploymentDetailsPtrOutput() GrafeasV1beta1DeploymentDetailsPtrOutput {
	return i.ToGrafeasV1beta1DeploymentDetailsPtrOutputWithContext(context.Background())
}

func (i GrafeasV1beta1DeploymentDetailsArgs) ToGrafeasV1beta1DeploymentDetailsPtrOutputWithContext(ctx context.Context) GrafeasV1beta1DeploymentDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1beta1DeploymentDetailsOutput).ToGrafeasV1beta1DeploymentDetailsPtrOutputWithContext(ctx)
}

// GrafeasV1beta1DeploymentDetailsPtrInput is an input type that accepts GrafeasV1beta1DeploymentDetailsArgs, GrafeasV1beta1DeploymentDetailsPtr and GrafeasV1beta1DeploymentDetailsPtrOutput values.
// You can construct a concrete instance of `GrafeasV1beta1DeploymentDetailsPtrInput` via:
//
//	        GrafeasV1beta1DeploymentDetailsArgs{...}
//
//	or:
//
//	        nil
type GrafeasV1beta1DeploymentDetailsPtrInput interface {
	pulumi.Input

	ToGrafeasV1beta1DeploymentDetailsPtrOutput() GrafeasV1beta1DeploymentDetailsPtrOutput
	ToGrafeasV1beta1DeploymentDetailsPtrOutputWithContext(context.Context) GrafeasV1beta1DeploymentDetailsPtrOutput
}

type grafeasV1beta1DeploymentDetailsPtrType GrafeasV1beta1DeploymentDetailsArgs

func GrafeasV1beta1DeploymentDetailsPtr(v *GrafeasV1beta1DeploymentDetailsArgs) GrafeasV1beta1DeploymentDetailsPtrInput {
	return (*grafeasV1beta1DeploymentDetailsPtrType)(v)
}

func (*grafeasV1beta1DeploymentDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GrafeasV1beta1DeploymentDetails)(nil)).Elem()
}

func (i *grafeasV1beta1DeploymentDetailsPtrType) ToGrafeasV1beta1DeploymentDetailsPtrOutput() GrafeasV1beta1DeploymentDetailsPtrOutput {
	return i.ToGrafeasV1beta1DeploymentDetailsPtrOutputWithContext(context.Background())
}

func (i *grafeasV1beta1DeploymentDetailsPtrType) ToGrafeasV1beta1DeploymentDetailsPtrOutputWithContext(ctx context.Context) GrafeasV1beta1DeploymentDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1beta1DeploymentDetailsPtrOutput)
}

// Details of a deployment occurrence.
type GrafeasV1beta1DeploymentDetailsOutput struct{ *pulumi.OutputState }

func (GrafeasV1beta1DeploymentDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1beta1DeploymentDetails)(nil)).Elem()
}

func (o GrafeasV1beta1DeploymentDetailsOutput) ToGrafeasV1beta1DeploymentDetailsOutput() GrafeasV1beta1DeploymentDetailsOutput {
	return o
}

func (o GrafeasV1beta1DeploymentDetailsOutput) ToGrafeasV1beta1DeploymentDetailsOutputWithContext(ctx context.Context) GrafeasV1beta1DeploymentDetailsOutput {
	return o
}

func (o GrafeasV1beta1DeploymentDetailsOutput) ToGrafeasV1beta1DeploymentDetailsPtrOutput() GrafeasV1beta1DeploymentDetailsPtrOutput {
	return o.ToGrafeasV1beta1DeploymentDetailsPtrOutputWithContext(context.Background())
}

func (o GrafeasV1beta1DeploymentDetailsOutput) ToGrafeasV1beta1DeploymentDetailsPtrOutputWithContext(ctx context.Context) GrafeasV1beta1DeploymentDetailsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GrafeasV1beta1DeploymentDetails) *GrafeasV1beta1DeploymentDetails {
		return &v
	}).(GrafeasV1beta1DeploymentDetailsPtrOutput)
}

// Deployment history for the resource.
func (o GrafeasV1beta1DeploymentDetailsOutput) Deployment() DeploymentOutput {
	return o.ApplyT(func(v GrafeasV1beta1DeploymentDetails) Deployment { return v.Deployment }).(DeploymentOutput)
}

type GrafeasV1beta1DeploymentDetailsPtrOutput struct{ *pulumi.OutputState }

func (GrafeasV1beta1DeploymentDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GrafeasV1beta1DeploymentDetails)(nil)).Elem()
}

func (o GrafeasV1beta1DeploymentDetailsPtrOutput) ToGrafeasV1beta1DeploymentDetailsPtrOutput() GrafeasV1beta1DeploymentDetailsPtrOutput {
	return o
}

func (o GrafeasV1beta1DeploymentDetailsPtrOutput) ToGrafeasV1beta1DeploymentDetailsPtrOutputWithContext(ctx context.Context) GrafeasV1beta1DeploymentDetailsPtrOutput {
	return o
}

func (o GrafeasV1beta1DeploymentDetailsPtrOutput) Elem() GrafeasV1beta1DeploymentDetailsOutput {
	return o.ApplyT(func(v *GrafeasV1beta1DeploymentDetails) GrafeasV1beta1DeploymentDetails {
		if v != nil {
			return *v
		}
		var ret GrafeasV1beta1DeploymentDetails
		return ret
	}).(GrafeasV1beta1DeploymentDetailsOutput)
}

// Deployment history for the resource.
func (o GrafeasV1beta1DeploymentDetailsPtrOutput) Deployment() DeploymentPtrOutput {
	return o.ApplyT(func(v *GrafeasV1beta1DeploymentDetails) *Deployment {
		if v == nil {
			return nil
		}
		return &v.Deployment
	}).(DeploymentPtrOutput)
}

// Details of a deployment occurrence.
type GrafeasV1beta1DeploymentDetailsResponse struct {
	// Deployment history for the resource.
	Deployment DeploymentResponse `pulumi:"deployment"`
}

// Details of a deployment occurrence.
type GrafeasV1beta1DeploymentDetailsResponseOutput struct{ *pulumi.OutputState }

func (GrafeasV1beta1DeploymentDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1beta1DeploymentDetailsResponse)(nil)).Elem()
}

func (o GrafeasV1beta1DeploymentDetailsResponseOutput) ToGrafeasV1beta1DeploymentDetailsResponseOutput() GrafeasV1beta1DeploymentDetailsResponseOutput {
	return o
}

func (o GrafeasV1beta1DeploymentDetailsResponseOutput) ToGrafeasV1beta1DeploymentDetailsResponseOutputWithContext(ctx context.Context) GrafeasV1beta1DeploymentDetailsResponseOutput {
	return o
}

// Deployment history for the resource.
func (o GrafeasV1beta1DeploymentDetailsResponseOutput) Deployment() DeploymentResponseOutput {
	return o.ApplyT(func(v GrafeasV1beta1DeploymentDetailsResponse) DeploymentResponse { return v.Deployment }).(DeploymentResponseOutput)
}

// Details of a discovery occurrence.
type GrafeasV1beta1DiscoveryDetails struct {
	// Analysis status for the discovered resource.
	Discovered Discovered `pulumi:"discovered"`
}

// GrafeasV1beta1DiscoveryDetailsInput is an input type that accepts GrafeasV1beta1DiscoveryDetailsArgs and GrafeasV1beta1DiscoveryDetailsOutput values.
// You can construct a concrete instance of `GrafeasV1beta1DiscoveryDetailsInput` via:
//
//	GrafeasV1beta1DiscoveryDetailsArgs{...}
type GrafeasV1beta1DiscoveryDetailsInput interface {
	pulumi.Input

	ToGrafeasV1beta1DiscoveryDetailsOutput() GrafeasV1beta1DiscoveryDetailsOutput
	ToGrafeasV1beta1DiscoveryDetailsOutputWithContext(context.Context) GrafeasV1beta1DiscoveryDetailsOutput
}

// Details of a discovery occurrence.
type GrafeasV1beta1DiscoveryDetailsArgs struct {
	// Analysis status for the discovered resource.
	Discovered DiscoveredInput `pulumi:"discovered"`
}

func (GrafeasV1beta1DiscoveryDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1beta1DiscoveryDetails)(nil)).Elem()
}

func (i GrafeasV1beta1DiscoveryDetailsArgs) ToGrafeasV1beta1DiscoveryDetailsOutput() GrafeasV1beta1DiscoveryDetailsOutput {
	return i.ToGrafeasV1beta1DiscoveryDetailsOutputWithContext(context.Background())
}

func (i GrafeasV1beta1DiscoveryDetailsArgs) ToGrafeasV1beta1DiscoveryDetailsOutputWithContext(ctx context.Context) GrafeasV1beta1DiscoveryDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1beta1DiscoveryDetailsOutput)
}

func (i GrafeasV1beta1DiscoveryDetailsArgs) ToGrafeasV1beta1DiscoveryDetailsPtrOutput() GrafeasV1beta1DiscoveryDetailsPtrOutput {
	return i.ToGrafeasV1beta1DiscoveryDetailsPtrOutputWithContext(context.Background())
}

func (i GrafeasV1beta1DiscoveryDetailsArgs) ToGrafeasV1beta1DiscoveryDetailsPtrOutputWithContext(ctx context.Context) GrafeasV1beta1DiscoveryDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1beta1DiscoveryDetailsOutput).ToGrafeasV1beta1DiscoveryDetailsPtrOutputWithContext(ctx)
}

// GrafeasV1beta1DiscoveryDetailsPtrInput is an input type that accepts GrafeasV1beta1DiscoveryDetailsArgs, GrafeasV1beta1DiscoveryDetailsPtr and GrafeasV1beta1DiscoveryDetailsPtrOutput values.
// You can construct a concrete instance of `GrafeasV1beta1DiscoveryDetailsPtrInput` via:
//
//	        GrafeasV1beta1DiscoveryDetailsArgs{...}
//
//	or:
//
//	        nil
type GrafeasV1beta1DiscoveryDetailsPtrInput interface {
	pulumi.Input

	ToGrafeasV1beta1DiscoveryDetailsPtrOutput() GrafeasV1beta1DiscoveryDetailsPtrOutput
	ToGrafeasV1beta1DiscoveryDetailsPtrOutputWithContext(context.Context) GrafeasV1beta1DiscoveryDetailsPtrOutput
}

type grafeasV1beta1DiscoveryDetailsPtrType GrafeasV1beta1DiscoveryDetailsArgs

func GrafeasV1beta1DiscoveryDetailsPtr(v *GrafeasV1beta1DiscoveryDetailsArgs) GrafeasV1beta1DiscoveryDetailsPtrInput {
	return (*grafeasV1beta1DiscoveryDetailsPtrType)(v)
}

func (*grafeasV1beta1DiscoveryDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GrafeasV1beta1DiscoveryDetails)(nil)).Elem()
}

func (i *grafeasV1beta1DiscoveryDetailsPtrType) ToGrafeasV1beta1DiscoveryDetailsPtrOutput() GrafeasV1beta1DiscoveryDetailsPtrOutput {
	return i.ToGrafeasV1beta1DiscoveryDetailsPtrOutputWithContext(context.Background())
}

func (i *grafeasV1beta1DiscoveryDetailsPtrType) ToGrafeasV1beta1DiscoveryDetailsPtrOutputWithContext(ctx context.Context) GrafeasV1beta1DiscoveryDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1beta1DiscoveryDetailsPtrOutput)
}

// Details of a discovery occurrence.
type GrafeasV1beta1DiscoveryDetailsOutput struct{ *pulumi.OutputState }

func (GrafeasV1beta1DiscoveryDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1beta1DiscoveryDetails)(nil)).Elem()
}

func (o GrafeasV1beta1DiscoveryDetailsOutput) ToGrafeasV1beta1DiscoveryDetailsOutput() GrafeasV1beta1DiscoveryDetailsOutput {
	return o
}

func (o GrafeasV1beta1DiscoveryDetailsOutput) ToGrafeasV1beta1DiscoveryDetailsOutputWithContext(ctx context.Context) GrafeasV1beta1DiscoveryDetailsOutput {
	return o
}

func (o GrafeasV1beta1DiscoveryDetailsOutput) ToGrafeasV1beta1DiscoveryDetailsPtrOutput() GrafeasV1beta1DiscoveryDetailsPtrOutput {
	return o.ToGrafeasV1beta1DiscoveryDetailsPtrOutputWithContext(context.Background())
}

func (o GrafeasV1beta1DiscoveryDetailsOutput) ToGrafeasV1beta1DiscoveryDetailsPtrOutputWithContext(ctx context.Context) GrafeasV1beta1DiscoveryDetailsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GrafeasV1beta1DiscoveryDetails) *GrafeasV1beta1DiscoveryDetails {
		return &v
	}).(GrafeasV1beta1DiscoveryDetailsPtrOutput)
}

// Analysis status for the discovered resource.
func (o GrafeasV1beta1DiscoveryDetailsOutput) Discovered() DiscoveredOutput {
	return o.ApplyT(func(v GrafeasV1beta1DiscoveryDetails) Discovered { return v.Discovered }).(DiscoveredOutput)
}

type GrafeasV1beta1DiscoveryDetailsPtrOutput struct{ *pulumi.OutputState }

func (GrafeasV1beta1DiscoveryDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GrafeasV1beta1DiscoveryDetails)(nil)).Elem()
}

func (o GrafeasV1beta1DiscoveryDetailsPtrOutput) ToGrafeasV1beta1DiscoveryDetailsPtrOutput() GrafeasV1beta1DiscoveryDetailsPtrOutput {
	return o
}

func (o GrafeasV1beta1DiscoveryDetailsPtrOutput) ToGrafeasV1beta1DiscoveryDetailsPtrOutputWithContext(ctx context.Context) GrafeasV1beta1DiscoveryDetailsPtrOutput {
	return o
}

func (o GrafeasV1beta1DiscoveryDetailsPtrOutput) Elem() GrafeasV1beta1DiscoveryDetailsOutput {
	return o.ApplyT(func(v *GrafeasV1beta1DiscoveryDetails) GrafeasV1beta1DiscoveryDetails {
		if v != nil {
			return *v
		}
		var ret GrafeasV1beta1DiscoveryDetails
		return ret
	}).(GrafeasV1beta1DiscoveryDetailsOutput)
}

// Analysis status for the discovered resource.
func (o GrafeasV1beta1DiscoveryDetailsPtrOutput) Discovered() DiscoveredPtrOutput {
	return o.ApplyT(func(v *GrafeasV1beta1DiscoveryDetails) *Discovered {
		if v == nil {
			return nil
		}
		return &v.Discovered
	}).(DiscoveredPtrOutput)
}

// Details of a discovery occurrence.
type GrafeasV1beta1DiscoveryDetailsResponse struct {
	// Analysis status for the discovered resource.
	Discovered DiscoveredResponse `pulumi:"discovered"`
}

// Details of a discovery occurrence.
type GrafeasV1beta1DiscoveryDetailsResponseOutput struct{ *pulumi.OutputState }

func (GrafeasV1beta1DiscoveryDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1beta1DiscoveryDetailsResponse)(nil)).Elem()
}

func (o GrafeasV1beta1DiscoveryDetailsResponseOutput) ToGrafeasV1beta1DiscoveryDetailsResponseOutput() GrafeasV1beta1DiscoveryDetailsResponseOutput {
	return o
}

func (o GrafeasV1beta1DiscoveryDetailsResponseOutput) ToGrafeasV1beta1DiscoveryDetailsResponseOutputWithContext(ctx context.Context) GrafeasV1beta1DiscoveryDetailsResponseOutput {
	return o
}

// Analysis status for the discovered resource.
func (o GrafeasV1beta1DiscoveryDetailsResponseOutput) Discovered() DiscoveredResponseOutput {
	return o.ApplyT(func(v GrafeasV1beta1DiscoveryDetailsResponse) DiscoveredResponse { return v.Discovered }).(DiscoveredResponseOutput)
}

// Details of an image occurrence.
type GrafeasV1beta1ImageDetails struct {
	// Immutable. The child image derived from the base image.
	DerivedImage Derived `pulumi:"derivedImage"`
}

// GrafeasV1beta1ImageDetailsInput is an input type that accepts GrafeasV1beta1ImageDetailsArgs and GrafeasV1beta1ImageDetailsOutput values.
// You can construct a concrete instance of `GrafeasV1beta1ImageDetailsInput` via:
//
//	GrafeasV1beta1ImageDetailsArgs{...}
type GrafeasV1beta1ImageDetailsInput interface {
	pulumi.Input

	ToGrafeasV1beta1ImageDetailsOutput() GrafeasV1beta1ImageDetailsOutput
	ToGrafeasV1beta1ImageDetailsOutputWithContext(context.Context) GrafeasV1beta1ImageDetailsOutput
}

// Details of an image occurrence.
type GrafeasV1beta1ImageDetailsArgs struct {
	// Immutable. The child image derived from the base image.
	DerivedImage DerivedInput `pulumi:"derivedImage"`
}

func (GrafeasV1beta1ImageDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1beta1ImageDetails)(nil)).Elem()
}

func (i GrafeasV1beta1ImageDetailsArgs) ToGrafeasV1beta1ImageDetailsOutput() GrafeasV1beta1ImageDetailsOutput {
	return i.ToGrafeasV1beta1ImageDetailsOutputWithContext(context.Background())
}

func (i GrafeasV1beta1ImageDetailsArgs) ToGrafeasV1beta1ImageDetailsOutputWithContext(ctx context.Context) GrafeasV1beta1ImageDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1beta1ImageDetailsOutput)
}

func (i GrafeasV1beta1ImageDetailsArgs) ToGrafeasV1beta1ImageDetailsPtrOutput() GrafeasV1beta1ImageDetailsPtrOutput {
	return i.ToGrafeasV1beta1ImageDetailsPtrOutputWithContext(context.Background())
}

func (i GrafeasV1beta1ImageDetailsArgs) ToGrafeasV1beta1ImageDetailsPtrOutputWithContext(ctx context.Context) GrafeasV1beta1ImageDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1beta1ImageDetailsOutput).ToGrafeasV1beta1ImageDetailsPtrOutputWithContext(ctx)
}

// GrafeasV1beta1ImageDetailsPtrInput is an input type that accepts GrafeasV1beta1ImageDetailsArgs, GrafeasV1beta1ImageDetailsPtr and GrafeasV1beta1ImageDetailsPtrOutput values.
// You can construct a concrete instance of `GrafeasV1beta1ImageDetailsPtrInput` via:
//
//	        GrafeasV1beta1ImageDetailsArgs{...}
//
//	or:
//
//	        nil
type GrafeasV1beta1ImageDetailsPtrInput interface {
	pulumi.Input

	ToGrafeasV1beta1ImageDetailsPtrOutput() GrafeasV1beta1ImageDetailsPtrOutput
	ToGrafeasV1beta1ImageDetailsPtrOutputWithContext(context.Context) GrafeasV1beta1ImageDetailsPtrOutput
}

type grafeasV1beta1ImageDetailsPtrType GrafeasV1beta1ImageDetailsArgs

func GrafeasV1beta1ImageDetailsPtr(v *GrafeasV1beta1ImageDetailsArgs) GrafeasV1beta1ImageDetailsPtrInput {
	return (*grafeasV1beta1ImageDetailsPtrType)(v)
}

func (*grafeasV1beta1ImageDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GrafeasV1beta1ImageDetails)(nil)).Elem()
}

func (i *grafeasV1beta1ImageDetailsPtrType) ToGrafeasV1beta1ImageDetailsPtrOutput() GrafeasV1beta1ImageDetailsPtrOutput {
	return i.ToGrafeasV1beta1ImageDetailsPtrOutputWithContext(context.Background())
}

func (i *grafeasV1beta1ImageDetailsPtrType) ToGrafeasV1beta1ImageDetailsPtrOutputWithContext(ctx context.Context) GrafeasV1beta1ImageDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1beta1ImageDetailsPtrOutput)
}

// Details of an image occurrence.
type GrafeasV1beta1ImageDetailsOutput struct{ *pulumi.OutputState }

func (GrafeasV1beta1ImageDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1beta1ImageDetails)(nil)).Elem()
}

func (o GrafeasV1beta1ImageDetailsOutput) ToGrafeasV1beta1ImageDetailsOutput() GrafeasV1beta1ImageDetailsOutput {
	return o
}

func (o GrafeasV1beta1ImageDetailsOutput) ToGrafeasV1beta1ImageDetailsOutputWithContext(ctx context.Context) GrafeasV1beta1ImageDetailsOutput {
	return o
}

func (o GrafeasV1beta1ImageDetailsOutput) ToGrafeasV1beta1ImageDetailsPtrOutput() GrafeasV1beta1ImageDetailsPtrOutput {
	return o.ToGrafeasV1beta1ImageDetailsPtrOutputWithContext(context.Background())
}

func (o GrafeasV1beta1ImageDetailsOutput) ToGrafeasV1beta1ImageDetailsPtrOutputWithContext(ctx context.Context) GrafeasV1beta1ImageDetailsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GrafeasV1beta1ImageDetails) *GrafeasV1beta1ImageDetails {
		return &v
	}).(GrafeasV1beta1ImageDetailsPtrOutput)
}

// Immutable. The child image derived from the base image.
func (o GrafeasV1beta1ImageDetailsOutput) DerivedImage() DerivedOutput {
	return o.ApplyT(func(v GrafeasV1beta1ImageDetails) Derived { return v.DerivedImage }).(DerivedOutput)
}

type GrafeasV1beta1ImageDetailsPtrOutput struct{ *pulumi.OutputState }

func (GrafeasV1beta1ImageDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GrafeasV1beta1ImageDetails)(nil)).Elem()
}

func (o GrafeasV1beta1ImageDetailsPtrOutput) ToGrafeasV1beta1ImageDetailsPtrOutput() GrafeasV1beta1ImageDetailsPtrOutput {
	return o
}

func (o GrafeasV1beta1ImageDetailsPtrOutput) ToGrafeasV1beta1ImageDetailsPtrOutputWithContext(ctx context.Context) GrafeasV1beta1ImageDetailsPtrOutput {
	return o
}

func (o GrafeasV1beta1ImageDetailsPtrOutput) Elem() GrafeasV1beta1ImageDetailsOutput {
	return o.ApplyT(func(v *GrafeasV1beta1ImageDetails) GrafeasV1beta1ImageDetails {
		if v != nil {
			return *v
		}
		var ret GrafeasV1beta1ImageDetails
		return ret
	}).(GrafeasV1beta1ImageDetailsOutput)
}

// Immutable. The child image derived from the base image.
func (o GrafeasV1beta1ImageDetailsPtrOutput) DerivedImage() DerivedPtrOutput {
	return o.ApplyT(func(v *GrafeasV1beta1ImageDetails) *Derived {
		if v == nil {
			return nil
		}
		return &v.DerivedImage
	}).(DerivedPtrOutput)
}

// Details of an image occurrence.
type GrafeasV1beta1ImageDetailsResponse struct {
	// Immutable. The child image derived from the base image.
	DerivedImage DerivedResponse `pulumi:"derivedImage"`
}

// Details of an image occurrence.
type GrafeasV1beta1ImageDetailsResponseOutput struct{ *pulumi.OutputState }

func (GrafeasV1beta1ImageDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1beta1ImageDetailsResponse)(nil)).Elem()
}

func (o GrafeasV1beta1ImageDetailsResponseOutput) ToGrafeasV1beta1ImageDetailsResponseOutput() GrafeasV1beta1ImageDetailsResponseOutput {
	return o
}

func (o GrafeasV1beta1ImageDetailsResponseOutput) ToGrafeasV1beta1ImageDetailsResponseOutputWithContext(ctx context.Context) GrafeasV1beta1ImageDetailsResponseOutput {
	return o
}

// Immutable. The child image derived from the base image.
func (o GrafeasV1beta1ImageDetailsResponseOutput) DerivedImage() DerivedResponseOutput {
	return o.ApplyT(func(v GrafeasV1beta1ImageDetailsResponse) DerivedResponse { return v.DerivedImage }).(DerivedResponseOutput)
}

type GrafeasV1beta1IntotoArtifact struct {
	Hashes      *ArtifactHashes `pulumi:"hashes"`
	ResourceUri *string         `pulumi:"resourceUri"`
}

// GrafeasV1beta1IntotoArtifactInput is an input type that accepts GrafeasV1beta1IntotoArtifactArgs and GrafeasV1beta1IntotoArtifactOutput values.
// You can construct a concrete instance of `GrafeasV1beta1IntotoArtifactInput` via:
//
//	GrafeasV1beta1IntotoArtifactArgs{...}
type GrafeasV1beta1IntotoArtifactInput interface {
	pulumi.Input

	ToGrafeasV1beta1IntotoArtifactOutput() GrafeasV1beta1IntotoArtifactOutput
	ToGrafeasV1beta1IntotoArtifactOutputWithContext(context.Context) GrafeasV1beta1IntotoArtifactOutput
}

type GrafeasV1beta1IntotoArtifactArgs struct {
	Hashes      ArtifactHashesPtrInput `pulumi:"hashes"`
	ResourceUri pulumi.StringPtrInput  `pulumi:"resourceUri"`
}

func (GrafeasV1beta1IntotoArtifactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1beta1IntotoArtifact)(nil)).Elem()
}

func (i GrafeasV1beta1IntotoArtifactArgs) ToGrafeasV1beta1IntotoArtifactOutput() GrafeasV1beta1IntotoArtifactOutput {
	return i.ToGrafeasV1beta1IntotoArtifactOutputWithContext(context.Background())
}

func (i GrafeasV1beta1IntotoArtifactArgs) ToGrafeasV1beta1IntotoArtifactOutputWithContext(ctx context.Context) GrafeasV1beta1IntotoArtifactOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1beta1IntotoArtifactOutput)
}

// GrafeasV1beta1IntotoArtifactArrayInput is an input type that accepts GrafeasV1beta1IntotoArtifactArray and GrafeasV1beta1IntotoArtifactArrayOutput values.
// You can construct a concrete instance of `GrafeasV1beta1IntotoArtifactArrayInput` via:
//
//	GrafeasV1beta1IntotoArtifactArray{ GrafeasV1beta1IntotoArtifactArgs{...} }
type GrafeasV1beta1IntotoArtifactArrayInput interface {
	pulumi.Input

	ToGrafeasV1beta1IntotoArtifactArrayOutput() GrafeasV1beta1IntotoArtifactArrayOutput
	ToGrafeasV1beta1IntotoArtifactArrayOutputWithContext(context.Context) GrafeasV1beta1IntotoArtifactArrayOutput
}

type GrafeasV1beta1IntotoArtifactArray []GrafeasV1beta1IntotoArtifactInput

func (GrafeasV1beta1IntotoArtifactArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GrafeasV1beta1IntotoArtifact)(nil)).Elem()
}

func (i GrafeasV1beta1IntotoArtifactArray) ToGrafeasV1beta1IntotoArtifactArrayOutput() GrafeasV1beta1IntotoArtifactArrayOutput {
	return i.ToGrafeasV1beta1IntotoArtifactArrayOutputWithContext(context.Background())
}

func (i GrafeasV1beta1IntotoArtifactArray) ToGrafeasV1beta1IntotoArtifactArrayOutputWithContext(ctx context.Context) GrafeasV1beta1IntotoArtifactArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1beta1IntotoArtifactArrayOutput)
}

type GrafeasV1beta1IntotoArtifactOutput struct{ *pulumi.OutputState }

func (GrafeasV1beta1IntotoArtifactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1beta1IntotoArtifact)(nil)).Elem()
}

func (o GrafeasV1beta1IntotoArtifactOutput) ToGrafeasV1beta1IntotoArtifactOutput() GrafeasV1beta1IntotoArtifactOutput {
	return o
}

func (o GrafeasV1beta1IntotoArtifactOutput) ToGrafeasV1beta1IntotoArtifactOutputWithContext(ctx context.Context) GrafeasV1beta1IntotoArtifactOutput {
	return o
}

func (o GrafeasV1beta1IntotoArtifactOutput) Hashes() ArtifactHashesPtrOutput {
	return o.ApplyT(func(v GrafeasV1beta1IntotoArtifact) *ArtifactHashes { return v.Hashes }).(ArtifactHashesPtrOutput)
}

func (o GrafeasV1beta1IntotoArtifactOutput) ResourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GrafeasV1beta1IntotoArtifact) *string { return v.ResourceUri }).(pulumi.StringPtrOutput)
}

type GrafeasV1beta1IntotoArtifactArrayOutput struct{ *pulumi.OutputState }

func (GrafeasV1beta1IntotoArtifactArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GrafeasV1beta1IntotoArtifact)(nil)).Elem()
}

func (o GrafeasV1beta1IntotoArtifactArrayOutput) ToGrafeasV1beta1IntotoArtifactArrayOutput() GrafeasV1beta1IntotoArtifactArrayOutput {
	return o
}

func (o GrafeasV1beta1IntotoArtifactArrayOutput) ToGrafeasV1beta1IntotoArtifactArrayOutputWithContext(ctx context.Context) GrafeasV1beta1IntotoArtifactArrayOutput {
	return o
}

func (o GrafeasV1beta1IntotoArtifactArrayOutput) Index(i pulumi.IntInput) GrafeasV1beta1IntotoArtifactOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GrafeasV1beta1IntotoArtifact {
		return vs[0].([]GrafeasV1beta1IntotoArtifact)[vs[1].(int)]
	}).(GrafeasV1beta1IntotoArtifactOutput)
}

type GrafeasV1beta1IntotoArtifactResponse struct {
	Hashes      ArtifactHashesResponse `pulumi:"hashes"`
	ResourceUri string                 `pulumi:"resourceUri"`
}

type GrafeasV1beta1IntotoArtifactResponseOutput struct{ *pulumi.OutputState }

func (GrafeasV1beta1IntotoArtifactResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1beta1IntotoArtifactResponse)(nil)).Elem()
}

func (o GrafeasV1beta1IntotoArtifactResponseOutput) ToGrafeasV1beta1IntotoArtifactResponseOutput() GrafeasV1beta1IntotoArtifactResponseOutput {
	return o
}

func (o GrafeasV1beta1IntotoArtifactResponseOutput) ToGrafeasV1beta1IntotoArtifactResponseOutputWithContext(ctx context.Context) GrafeasV1beta1IntotoArtifactResponseOutput {
	return o
}

func (o GrafeasV1beta1IntotoArtifactResponseOutput) Hashes() ArtifactHashesResponseOutput {
	return o.ApplyT(func(v GrafeasV1beta1IntotoArtifactResponse) ArtifactHashesResponse { return v.Hashes }).(ArtifactHashesResponseOutput)
}

func (o GrafeasV1beta1IntotoArtifactResponseOutput) ResourceUri() pulumi.StringOutput {
	return o.ApplyT(func(v GrafeasV1beta1IntotoArtifactResponse) string { return v.ResourceUri }).(pulumi.StringOutput)
}

type GrafeasV1beta1IntotoArtifactResponseArrayOutput struct{ *pulumi.OutputState }

func (GrafeasV1beta1IntotoArtifactResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GrafeasV1beta1IntotoArtifactResponse)(nil)).Elem()
}

func (o GrafeasV1beta1IntotoArtifactResponseArrayOutput) ToGrafeasV1beta1IntotoArtifactResponseArrayOutput() GrafeasV1beta1IntotoArtifactResponseArrayOutput {
	return o
}

func (o GrafeasV1beta1IntotoArtifactResponseArrayOutput) ToGrafeasV1beta1IntotoArtifactResponseArrayOutputWithContext(ctx context.Context) GrafeasV1beta1IntotoArtifactResponseArrayOutput {
	return o
}

func (o GrafeasV1beta1IntotoArtifactResponseArrayOutput) Index(i pulumi.IntInput) GrafeasV1beta1IntotoArtifactResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GrafeasV1beta1IntotoArtifactResponse {
		return vs[0].([]GrafeasV1beta1IntotoArtifactResponse)[vs[1].(int)]
	}).(GrafeasV1beta1IntotoArtifactResponseOutput)
}

// This corresponds to a signed in-toto link - it is made up of one or more signatures and the in-toto link itself. This is used for occurrences of a Grafeas in-toto note.
type GrafeasV1beta1IntotoDetails struct {
	Signatures []GrafeasV1beta1IntotoSignature `pulumi:"signatures"`
	Signed     *Link                           `pulumi:"signed"`
}

// GrafeasV1beta1IntotoDetailsInput is an input type that accepts GrafeasV1beta1IntotoDetailsArgs and GrafeasV1beta1IntotoDetailsOutput values.
// You can construct a concrete instance of `GrafeasV1beta1IntotoDetailsInput` via:
//
//	GrafeasV1beta1IntotoDetailsArgs{...}
type GrafeasV1beta1IntotoDetailsInput interface {
	pulumi.Input

	ToGrafeasV1beta1IntotoDetailsOutput() GrafeasV1beta1IntotoDetailsOutput
	ToGrafeasV1beta1IntotoDetailsOutputWithContext(context.Context) GrafeasV1beta1IntotoDetailsOutput
}

// This corresponds to a signed in-toto link - it is made up of one or more signatures and the in-toto link itself. This is used for occurrences of a Grafeas in-toto note.
type GrafeasV1beta1IntotoDetailsArgs struct {
	Signatures GrafeasV1beta1IntotoSignatureArrayInput `pulumi:"signatures"`
	Signed     LinkPtrInput                            `pulumi:"signed"`
}

func (GrafeasV1beta1IntotoDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1beta1IntotoDetails)(nil)).Elem()
}

func (i GrafeasV1beta1IntotoDetailsArgs) ToGrafeasV1beta1IntotoDetailsOutput() GrafeasV1beta1IntotoDetailsOutput {
	return i.ToGrafeasV1beta1IntotoDetailsOutputWithContext(context.Background())
}

func (i GrafeasV1beta1IntotoDetailsArgs) ToGrafeasV1beta1IntotoDetailsOutputWithContext(ctx context.Context) GrafeasV1beta1IntotoDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1beta1IntotoDetailsOutput)
}

func (i GrafeasV1beta1IntotoDetailsArgs) ToGrafeasV1beta1IntotoDetailsPtrOutput() GrafeasV1beta1IntotoDetailsPtrOutput {
	return i.ToGrafeasV1beta1IntotoDetailsPtrOutputWithContext(context.Background())
}

func (i GrafeasV1beta1IntotoDetailsArgs) ToGrafeasV1beta1IntotoDetailsPtrOutputWithContext(ctx context.Context) GrafeasV1beta1IntotoDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1beta1IntotoDetailsOutput).ToGrafeasV1beta1IntotoDetailsPtrOutputWithContext(ctx)
}

// GrafeasV1beta1IntotoDetailsPtrInput is an input type that accepts GrafeasV1beta1IntotoDetailsArgs, GrafeasV1beta1IntotoDetailsPtr and GrafeasV1beta1IntotoDetailsPtrOutput values.
// You can construct a concrete instance of `GrafeasV1beta1IntotoDetailsPtrInput` via:
//
//	        GrafeasV1beta1IntotoDetailsArgs{...}
//
//	or:
//
//	        nil
type GrafeasV1beta1IntotoDetailsPtrInput interface {
	pulumi.Input

	ToGrafeasV1beta1IntotoDetailsPtrOutput() GrafeasV1beta1IntotoDetailsPtrOutput
	ToGrafeasV1beta1IntotoDetailsPtrOutputWithContext(context.Context) GrafeasV1beta1IntotoDetailsPtrOutput
}

type grafeasV1beta1IntotoDetailsPtrType GrafeasV1beta1IntotoDetailsArgs

func GrafeasV1beta1IntotoDetailsPtr(v *GrafeasV1beta1IntotoDetailsArgs) GrafeasV1beta1IntotoDetailsPtrInput {
	return (*grafeasV1beta1IntotoDetailsPtrType)(v)
}

func (*grafeasV1beta1IntotoDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GrafeasV1beta1IntotoDetails)(nil)).Elem()
}

func (i *grafeasV1beta1IntotoDetailsPtrType) ToGrafeasV1beta1IntotoDetailsPtrOutput() GrafeasV1beta1IntotoDetailsPtrOutput {
	return i.ToGrafeasV1beta1IntotoDetailsPtrOutputWithContext(context.Background())
}

func (i *grafeasV1beta1IntotoDetailsPtrType) ToGrafeasV1beta1IntotoDetailsPtrOutputWithContext(ctx context.Context) GrafeasV1beta1IntotoDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1beta1IntotoDetailsPtrOutput)
}

// This corresponds to a signed in-toto link - it is made up of one or more signatures and the in-toto link itself. This is used for occurrences of a Grafeas in-toto note.
type GrafeasV1beta1IntotoDetailsOutput struct{ *pulumi.OutputState }

func (GrafeasV1beta1IntotoDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1beta1IntotoDetails)(nil)).Elem()
}

func (o GrafeasV1beta1IntotoDetailsOutput) ToGrafeasV1beta1IntotoDetailsOutput() GrafeasV1beta1IntotoDetailsOutput {
	return o
}

func (o GrafeasV1beta1IntotoDetailsOutput) ToGrafeasV1beta1IntotoDetailsOutputWithContext(ctx context.Context) GrafeasV1beta1IntotoDetailsOutput {
	return o
}

func (o GrafeasV1beta1IntotoDetailsOutput) ToGrafeasV1beta1IntotoDetailsPtrOutput() GrafeasV1beta1IntotoDetailsPtrOutput {
	return o.ToGrafeasV1beta1IntotoDetailsPtrOutputWithContext(context.Background())
}

func (o GrafeasV1beta1IntotoDetailsOutput) ToGrafeasV1beta1IntotoDetailsPtrOutputWithContext(ctx context.Context) GrafeasV1beta1IntotoDetailsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GrafeasV1beta1IntotoDetails) *GrafeasV1beta1IntotoDetails {
		return &v
	}).(GrafeasV1beta1IntotoDetailsPtrOutput)
}

func (o GrafeasV1beta1IntotoDetailsOutput) Signatures() GrafeasV1beta1IntotoSignatureArrayOutput {
	return o.ApplyT(func(v GrafeasV1beta1IntotoDetails) []GrafeasV1beta1IntotoSignature { return v.Signatures }).(GrafeasV1beta1IntotoSignatureArrayOutput)
}

func (o GrafeasV1beta1IntotoDetailsOutput) Signed() LinkPtrOutput {
	return o.ApplyT(func(v GrafeasV1beta1IntotoDetails) *Link { return v.Signed }).(LinkPtrOutput)
}

type GrafeasV1beta1IntotoDetailsPtrOutput struct{ *pulumi.OutputState }

func (GrafeasV1beta1IntotoDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GrafeasV1beta1IntotoDetails)(nil)).Elem()
}

func (o GrafeasV1beta1IntotoDetailsPtrOutput) ToGrafeasV1beta1IntotoDetailsPtrOutput() GrafeasV1beta1IntotoDetailsPtrOutput {
	return o
}

func (o GrafeasV1beta1IntotoDetailsPtrOutput) ToGrafeasV1beta1IntotoDetailsPtrOutputWithContext(ctx context.Context) GrafeasV1beta1IntotoDetailsPtrOutput {
	return o
}

func (o GrafeasV1beta1IntotoDetailsPtrOutput) Elem() GrafeasV1beta1IntotoDetailsOutput {
	return o.ApplyT(func(v *GrafeasV1beta1IntotoDetails) GrafeasV1beta1IntotoDetails {
		if v != nil {
			return *v
		}
		var ret GrafeasV1beta1IntotoDetails
		return ret
	}).(GrafeasV1beta1IntotoDetailsOutput)
}

func (o GrafeasV1beta1IntotoDetailsPtrOutput) Signatures() GrafeasV1beta1IntotoSignatureArrayOutput {
	return o.ApplyT(func(v *GrafeasV1beta1IntotoDetails) []GrafeasV1beta1IntotoSignature {
		if v == nil {
			return nil
		}
		return v.Signatures
	}).(GrafeasV1beta1IntotoSignatureArrayOutput)
}

func (o GrafeasV1beta1IntotoDetailsPtrOutput) Signed() LinkPtrOutput {
	return o.ApplyT(func(v *GrafeasV1beta1IntotoDetails) *Link {
		if v == nil {
			return nil
		}
		return v.Signed
	}).(LinkPtrOutput)
}

// This corresponds to a signed in-toto link - it is made up of one or more signatures and the in-toto link itself. This is used for occurrences of a Grafeas in-toto note.
type GrafeasV1beta1IntotoDetailsResponse struct {
	Signatures []GrafeasV1beta1IntotoSignatureResponse `pulumi:"signatures"`
	Signed     LinkResponse                            `pulumi:"signed"`
}

// This corresponds to a signed in-toto link - it is made up of one or more signatures and the in-toto link itself. This is used for occurrences of a Grafeas in-toto note.
type GrafeasV1beta1IntotoDetailsResponseOutput struct{ *pulumi.OutputState }

func (GrafeasV1beta1IntotoDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1beta1IntotoDetailsResponse)(nil)).Elem()
}

func (o GrafeasV1beta1IntotoDetailsResponseOutput) ToGrafeasV1beta1IntotoDetailsResponseOutput() GrafeasV1beta1IntotoDetailsResponseOutput {
	return o
}

func (o GrafeasV1beta1IntotoDetailsResponseOutput) ToGrafeasV1beta1IntotoDetailsResponseOutputWithContext(ctx context.Context) GrafeasV1beta1IntotoDetailsResponseOutput {
	return o
}

func (o GrafeasV1beta1IntotoDetailsResponseOutput) Signatures() GrafeasV1beta1IntotoSignatureResponseArrayOutput {
	return o.ApplyT(func(v GrafeasV1beta1IntotoDetailsResponse) []GrafeasV1beta1IntotoSignatureResponse {
		return v.Signatures
	}).(GrafeasV1beta1IntotoSignatureResponseArrayOutput)
}

func (o GrafeasV1beta1IntotoDetailsResponseOutput) Signed() LinkResponseOutput {
	return o.ApplyT(func(v GrafeasV1beta1IntotoDetailsResponse) LinkResponse { return v.Signed }).(LinkResponseOutput)
}

// A signature object consists of the KeyID used and the signature itself.
type GrafeasV1beta1IntotoSignature struct {
	Keyid *string `pulumi:"keyid"`
	Sig   *string `pulumi:"sig"`
}

// GrafeasV1beta1IntotoSignatureInput is an input type that accepts GrafeasV1beta1IntotoSignatureArgs and GrafeasV1beta1IntotoSignatureOutput values.
// You can construct a concrete instance of `GrafeasV1beta1IntotoSignatureInput` via:
//
//	GrafeasV1beta1IntotoSignatureArgs{...}
type GrafeasV1beta1IntotoSignatureInput interface {
	pulumi.Input

	ToGrafeasV1beta1IntotoSignatureOutput() GrafeasV1beta1IntotoSignatureOutput
	ToGrafeasV1beta1IntotoSignatureOutputWithContext(context.Context) GrafeasV1beta1IntotoSignatureOutput
}

// A signature object consists of the KeyID used and the signature itself.
type GrafeasV1beta1IntotoSignatureArgs struct {
	Keyid pulumi.StringPtrInput `pulumi:"keyid"`
	Sig   pulumi.StringPtrInput `pulumi:"sig"`
}

func (GrafeasV1beta1IntotoSignatureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1beta1IntotoSignature)(nil)).Elem()
}

func (i GrafeasV1beta1IntotoSignatureArgs) ToGrafeasV1beta1IntotoSignatureOutput() GrafeasV1beta1IntotoSignatureOutput {
	return i.ToGrafeasV1beta1IntotoSignatureOutputWithContext(context.Background())
}

func (i GrafeasV1beta1IntotoSignatureArgs) ToGrafeasV1beta1IntotoSignatureOutputWithContext(ctx context.Context) GrafeasV1beta1IntotoSignatureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1beta1IntotoSignatureOutput)
}

// GrafeasV1beta1IntotoSignatureArrayInput is an input type that accepts GrafeasV1beta1IntotoSignatureArray and GrafeasV1beta1IntotoSignatureArrayOutput values.
// You can construct a concrete instance of `GrafeasV1beta1IntotoSignatureArrayInput` via:
//
//	GrafeasV1beta1IntotoSignatureArray{ GrafeasV1beta1IntotoSignatureArgs{...} }
type GrafeasV1beta1IntotoSignatureArrayInput interface {
	pulumi.Input

	ToGrafeasV1beta1IntotoSignatureArrayOutput() GrafeasV1beta1IntotoSignatureArrayOutput
	ToGrafeasV1beta1IntotoSignatureArrayOutputWithContext(context.Context) GrafeasV1beta1IntotoSignatureArrayOutput
}

type GrafeasV1beta1IntotoSignatureArray []GrafeasV1beta1IntotoSignatureInput

func (GrafeasV1beta1IntotoSignatureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GrafeasV1beta1IntotoSignature)(nil)).Elem()
}

func (i GrafeasV1beta1IntotoSignatureArray) ToGrafeasV1beta1IntotoSignatureArrayOutput() GrafeasV1beta1IntotoSignatureArrayOutput {
	return i.ToGrafeasV1beta1IntotoSignatureArrayOutputWithContext(context.Background())
}

func (i GrafeasV1beta1IntotoSignatureArray) ToGrafeasV1beta1IntotoSignatureArrayOutputWithContext(ctx context.Context) GrafeasV1beta1IntotoSignatureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1beta1IntotoSignatureArrayOutput)
}

// A signature object consists of the KeyID used and the signature itself.
type GrafeasV1beta1IntotoSignatureOutput struct{ *pulumi.OutputState }

func (GrafeasV1beta1IntotoSignatureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1beta1IntotoSignature)(nil)).Elem()
}

func (o GrafeasV1beta1IntotoSignatureOutput) ToGrafeasV1beta1IntotoSignatureOutput() GrafeasV1beta1IntotoSignatureOutput {
	return o
}

func (o GrafeasV1beta1IntotoSignatureOutput) ToGrafeasV1beta1IntotoSignatureOutputWithContext(ctx context.Context) GrafeasV1beta1IntotoSignatureOutput {
	return o
}

func (o GrafeasV1beta1IntotoSignatureOutput) Keyid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GrafeasV1beta1IntotoSignature) *string { return v.Keyid }).(pulumi.StringPtrOutput)
}

func (o GrafeasV1beta1IntotoSignatureOutput) Sig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GrafeasV1beta1IntotoSignature) *string { return v.Sig }).(pulumi.StringPtrOutput)
}

type GrafeasV1beta1IntotoSignatureArrayOutput struct{ *pulumi.OutputState }

func (GrafeasV1beta1IntotoSignatureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GrafeasV1beta1IntotoSignature)(nil)).Elem()
}

func (o GrafeasV1beta1IntotoSignatureArrayOutput) ToGrafeasV1beta1IntotoSignatureArrayOutput() GrafeasV1beta1IntotoSignatureArrayOutput {
	return o
}

func (o GrafeasV1beta1IntotoSignatureArrayOutput) ToGrafeasV1beta1IntotoSignatureArrayOutputWithContext(ctx context.Context) GrafeasV1beta1IntotoSignatureArrayOutput {
	return o
}

func (o GrafeasV1beta1IntotoSignatureArrayOutput) Index(i pulumi.IntInput) GrafeasV1beta1IntotoSignatureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GrafeasV1beta1IntotoSignature {
		return vs[0].([]GrafeasV1beta1IntotoSignature)[vs[1].(int)]
	}).(GrafeasV1beta1IntotoSignatureOutput)
}

// A signature object consists of the KeyID used and the signature itself.
type GrafeasV1beta1IntotoSignatureResponse struct {
	Keyid string `pulumi:"keyid"`
	Sig   string `pulumi:"sig"`
}

// A signature object consists of the KeyID used and the signature itself.
type GrafeasV1beta1IntotoSignatureResponseOutput struct{ *pulumi.OutputState }

func (GrafeasV1beta1IntotoSignatureResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1beta1IntotoSignatureResponse)(nil)).Elem()
}

func (o GrafeasV1beta1IntotoSignatureResponseOutput) ToGrafeasV1beta1IntotoSignatureResponseOutput() GrafeasV1beta1IntotoSignatureResponseOutput {
	return o
}

func (o GrafeasV1beta1IntotoSignatureResponseOutput) ToGrafeasV1beta1IntotoSignatureResponseOutputWithContext(ctx context.Context) GrafeasV1beta1IntotoSignatureResponseOutput {
	return o
}

func (o GrafeasV1beta1IntotoSignatureResponseOutput) Keyid() pulumi.StringOutput {
	return o.ApplyT(func(v GrafeasV1beta1IntotoSignatureResponse) string { return v.Keyid }).(pulumi.StringOutput)
}

func (o GrafeasV1beta1IntotoSignatureResponseOutput) Sig() pulumi.StringOutput {
	return o.ApplyT(func(v GrafeasV1beta1IntotoSignatureResponse) string { return v.Sig }).(pulumi.StringOutput)
}

type GrafeasV1beta1IntotoSignatureResponseArrayOutput struct{ *pulumi.OutputState }

func (GrafeasV1beta1IntotoSignatureResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GrafeasV1beta1IntotoSignatureResponse)(nil)).Elem()
}

func (o GrafeasV1beta1IntotoSignatureResponseArrayOutput) ToGrafeasV1beta1IntotoSignatureResponseArrayOutput() GrafeasV1beta1IntotoSignatureResponseArrayOutput {
	return o
}

func (o GrafeasV1beta1IntotoSignatureResponseArrayOutput) ToGrafeasV1beta1IntotoSignatureResponseArrayOutputWithContext(ctx context.Context) GrafeasV1beta1IntotoSignatureResponseArrayOutput {
	return o
}

func (o GrafeasV1beta1IntotoSignatureResponseArrayOutput) Index(i pulumi.IntInput) GrafeasV1beta1IntotoSignatureResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GrafeasV1beta1IntotoSignatureResponse {
		return vs[0].([]GrafeasV1beta1IntotoSignatureResponse)[vs[1].(int)]
	}).(GrafeasV1beta1IntotoSignatureResponseOutput)
}

// Details of a package occurrence.
type GrafeasV1beta1PackageDetails struct {
	// Where the package was installed.
	Installation Installation `pulumi:"installation"`
}

// GrafeasV1beta1PackageDetailsInput is an input type that accepts GrafeasV1beta1PackageDetailsArgs and GrafeasV1beta1PackageDetailsOutput values.
// You can construct a concrete instance of `GrafeasV1beta1PackageDetailsInput` via:
//
//	GrafeasV1beta1PackageDetailsArgs{...}
type GrafeasV1beta1PackageDetailsInput interface {
	pulumi.Input

	ToGrafeasV1beta1PackageDetailsOutput() GrafeasV1beta1PackageDetailsOutput
	ToGrafeasV1beta1PackageDetailsOutputWithContext(context.Context) GrafeasV1beta1PackageDetailsOutput
}

// Details of a package occurrence.
type GrafeasV1beta1PackageDetailsArgs struct {
	// Where the package was installed.
	Installation InstallationInput `pulumi:"installation"`
}

func (GrafeasV1beta1PackageDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1beta1PackageDetails)(nil)).Elem()
}

func (i GrafeasV1beta1PackageDetailsArgs) ToGrafeasV1beta1PackageDetailsOutput() GrafeasV1beta1PackageDetailsOutput {
	return i.ToGrafeasV1beta1PackageDetailsOutputWithContext(context.Background())
}

func (i GrafeasV1beta1PackageDetailsArgs) ToGrafeasV1beta1PackageDetailsOutputWithContext(ctx context.Context) GrafeasV1beta1PackageDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1beta1PackageDetailsOutput)
}

func (i GrafeasV1beta1PackageDetailsArgs) ToGrafeasV1beta1PackageDetailsPtrOutput() GrafeasV1beta1PackageDetailsPtrOutput {
	return i.ToGrafeasV1beta1PackageDetailsPtrOutputWithContext(context.Background())
}

func (i GrafeasV1beta1PackageDetailsArgs) ToGrafeasV1beta1PackageDetailsPtrOutputWithContext(ctx context.Context) GrafeasV1beta1PackageDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1beta1PackageDetailsOutput).ToGrafeasV1beta1PackageDetailsPtrOutputWithContext(ctx)
}

// GrafeasV1beta1PackageDetailsPtrInput is an input type that accepts GrafeasV1beta1PackageDetailsArgs, GrafeasV1beta1PackageDetailsPtr and GrafeasV1beta1PackageDetailsPtrOutput values.
// You can construct a concrete instance of `GrafeasV1beta1PackageDetailsPtrInput` via:
//
//	        GrafeasV1beta1PackageDetailsArgs{...}
//
//	or:
//
//	        nil
type GrafeasV1beta1PackageDetailsPtrInput interface {
	pulumi.Input

	ToGrafeasV1beta1PackageDetailsPtrOutput() GrafeasV1beta1PackageDetailsPtrOutput
	ToGrafeasV1beta1PackageDetailsPtrOutputWithContext(context.Context) GrafeasV1beta1PackageDetailsPtrOutput
}

type grafeasV1beta1PackageDetailsPtrType GrafeasV1beta1PackageDetailsArgs

func GrafeasV1beta1PackageDetailsPtr(v *GrafeasV1beta1PackageDetailsArgs) GrafeasV1beta1PackageDetailsPtrInput {
	return (*grafeasV1beta1PackageDetailsPtrType)(v)
}

func (*grafeasV1beta1PackageDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GrafeasV1beta1PackageDetails)(nil)).Elem()
}

func (i *grafeasV1beta1PackageDetailsPtrType) ToGrafeasV1beta1PackageDetailsPtrOutput() GrafeasV1beta1PackageDetailsPtrOutput {
	return i.ToGrafeasV1beta1PackageDetailsPtrOutputWithContext(context.Background())
}

func (i *grafeasV1beta1PackageDetailsPtrType) ToGrafeasV1beta1PackageDetailsPtrOutputWithContext(ctx context.Context) GrafeasV1beta1PackageDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1beta1PackageDetailsPtrOutput)
}

// Details of a package occurrence.
type GrafeasV1beta1PackageDetailsOutput struct{ *pulumi.OutputState }

func (GrafeasV1beta1PackageDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1beta1PackageDetails)(nil)).Elem()
}

func (o GrafeasV1beta1PackageDetailsOutput) ToGrafeasV1beta1PackageDetailsOutput() GrafeasV1beta1PackageDetailsOutput {
	return o
}

func (o GrafeasV1beta1PackageDetailsOutput) ToGrafeasV1beta1PackageDetailsOutputWithContext(ctx context.Context) GrafeasV1beta1PackageDetailsOutput {
	return o
}

func (o GrafeasV1beta1PackageDetailsOutput) ToGrafeasV1beta1PackageDetailsPtrOutput() GrafeasV1beta1PackageDetailsPtrOutput {
	return o.ToGrafeasV1beta1PackageDetailsPtrOutputWithContext(context.Background())
}

func (o GrafeasV1beta1PackageDetailsOutput) ToGrafeasV1beta1PackageDetailsPtrOutputWithContext(ctx context.Context) GrafeasV1beta1PackageDetailsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GrafeasV1beta1PackageDetails) *GrafeasV1beta1PackageDetails {
		return &v
	}).(GrafeasV1beta1PackageDetailsPtrOutput)
}

// Where the package was installed.
func (o GrafeasV1beta1PackageDetailsOutput) Installation() InstallationOutput {
	return o.ApplyT(func(v GrafeasV1beta1PackageDetails) Installation { return v.Installation }).(InstallationOutput)
}

type GrafeasV1beta1PackageDetailsPtrOutput struct{ *pulumi.OutputState }

func (GrafeasV1beta1PackageDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GrafeasV1beta1PackageDetails)(nil)).Elem()
}

func (o GrafeasV1beta1PackageDetailsPtrOutput) ToGrafeasV1beta1PackageDetailsPtrOutput() GrafeasV1beta1PackageDetailsPtrOutput {
	return o
}

func (o GrafeasV1beta1PackageDetailsPtrOutput) ToGrafeasV1beta1PackageDetailsPtrOutputWithContext(ctx context.Context) GrafeasV1beta1PackageDetailsPtrOutput {
	return o
}

func (o GrafeasV1beta1PackageDetailsPtrOutput) Elem() GrafeasV1beta1PackageDetailsOutput {
	return o.ApplyT(func(v *GrafeasV1beta1PackageDetails) GrafeasV1beta1PackageDetails {
		if v != nil {
			return *v
		}
		var ret GrafeasV1beta1PackageDetails
		return ret
	}).(GrafeasV1beta1PackageDetailsOutput)
}

// Where the package was installed.
func (o GrafeasV1beta1PackageDetailsPtrOutput) Installation() InstallationPtrOutput {
	return o.ApplyT(func(v *GrafeasV1beta1PackageDetails) *Installation {
		if v == nil {
			return nil
		}
		return &v.Installation
	}).(InstallationPtrOutput)
}

// Details of a package occurrence.
type GrafeasV1beta1PackageDetailsResponse struct {
	// Where the package was installed.
	Installation InstallationResponse `pulumi:"installation"`
}

// Details of a package occurrence.
type GrafeasV1beta1PackageDetailsResponseOutput struct{ *pulumi.OutputState }

func (GrafeasV1beta1PackageDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1beta1PackageDetailsResponse)(nil)).Elem()
}

func (o GrafeasV1beta1PackageDetailsResponseOutput) ToGrafeasV1beta1PackageDetailsResponseOutput() GrafeasV1beta1PackageDetailsResponseOutput {
	return o
}

func (o GrafeasV1beta1PackageDetailsResponseOutput) ToGrafeasV1beta1PackageDetailsResponseOutputWithContext(ctx context.Context) GrafeasV1beta1PackageDetailsResponseOutput {
	return o
}

// Where the package was installed.
func (o GrafeasV1beta1PackageDetailsResponseOutput) Installation() InstallationResponseOutput {
	return o.ApplyT(func(v GrafeasV1beta1PackageDetailsResponse) InstallationResponse { return v.Installation }).(InstallationResponseOutput)
}

// Details of a vulnerability Occurrence.
type GrafeasV1beta1VulnerabilityDetails struct {
	// The cvss v2 score for the vulnerability.
	CvssV2 *CVSS `pulumi:"cvssV2"`
	// The cvss v3 score for the vulnerability.
	CvssV3 *CVSS `pulumi:"cvssV3"`
	// The distro assigned severity for this vulnerability when it is available, and note provider assigned severity when distro has not yet assigned a severity for this vulnerability. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues.
	EffectiveSeverity *GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity `pulumi:"effectiveSeverity"`
	// Occurrence-specific extra details about the vulnerability.
	ExtraDetails *string `pulumi:"extraDetails"`
	// The set of affected locations and their fixes (if available) within the associated resource.
	PackageIssue []PackageIssue `pulumi:"packageIssue"`
	// The type of package; whether native or non native(ruby gems, node.js packages etc)
	Type          *string        `pulumi:"type"`
	VexAssessment *VexAssessment `pulumi:"vexAssessment"`
}

// GrafeasV1beta1VulnerabilityDetailsInput is an input type that accepts GrafeasV1beta1VulnerabilityDetailsArgs and GrafeasV1beta1VulnerabilityDetailsOutput values.
// You can construct a concrete instance of `GrafeasV1beta1VulnerabilityDetailsInput` via:
//
//	GrafeasV1beta1VulnerabilityDetailsArgs{...}
type GrafeasV1beta1VulnerabilityDetailsInput interface {
	pulumi.Input

	ToGrafeasV1beta1VulnerabilityDetailsOutput() GrafeasV1beta1VulnerabilityDetailsOutput
	ToGrafeasV1beta1VulnerabilityDetailsOutputWithContext(context.Context) GrafeasV1beta1VulnerabilityDetailsOutput
}

// Details of a vulnerability Occurrence.
type GrafeasV1beta1VulnerabilityDetailsArgs struct {
	// The cvss v2 score for the vulnerability.
	CvssV2 CVSSPtrInput `pulumi:"cvssV2"`
	// The cvss v3 score for the vulnerability.
	CvssV3 CVSSPtrInput `pulumi:"cvssV3"`
	// The distro assigned severity for this vulnerability when it is available, and note provider assigned severity when distro has not yet assigned a severity for this vulnerability. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues.
	EffectiveSeverity GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityPtrInput `pulumi:"effectiveSeverity"`
	// Occurrence-specific extra details about the vulnerability.
	ExtraDetails pulumi.StringPtrInput `pulumi:"extraDetails"`
	// The set of affected locations and their fixes (if available) within the associated resource.
	PackageIssue PackageIssueArrayInput `pulumi:"packageIssue"`
	// The type of package; whether native or non native(ruby gems, node.js packages etc)
	Type          pulumi.StringPtrInput `pulumi:"type"`
	VexAssessment VexAssessmentPtrInput `pulumi:"vexAssessment"`
}

func (GrafeasV1beta1VulnerabilityDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1beta1VulnerabilityDetails)(nil)).Elem()
}

func (i GrafeasV1beta1VulnerabilityDetailsArgs) ToGrafeasV1beta1VulnerabilityDetailsOutput() GrafeasV1beta1VulnerabilityDetailsOutput {
	return i.ToGrafeasV1beta1VulnerabilityDetailsOutputWithContext(context.Background())
}

func (i GrafeasV1beta1VulnerabilityDetailsArgs) ToGrafeasV1beta1VulnerabilityDetailsOutputWithContext(ctx context.Context) GrafeasV1beta1VulnerabilityDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1beta1VulnerabilityDetailsOutput)
}

func (i GrafeasV1beta1VulnerabilityDetailsArgs) ToGrafeasV1beta1VulnerabilityDetailsPtrOutput() GrafeasV1beta1VulnerabilityDetailsPtrOutput {
	return i.ToGrafeasV1beta1VulnerabilityDetailsPtrOutputWithContext(context.Background())
}

func (i GrafeasV1beta1VulnerabilityDetailsArgs) ToGrafeasV1beta1VulnerabilityDetailsPtrOutputWithContext(ctx context.Context) GrafeasV1beta1VulnerabilityDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1beta1VulnerabilityDetailsOutput).ToGrafeasV1beta1VulnerabilityDetailsPtrOutputWithContext(ctx)
}

// GrafeasV1beta1VulnerabilityDetailsPtrInput is an input type that accepts GrafeasV1beta1VulnerabilityDetailsArgs, GrafeasV1beta1VulnerabilityDetailsPtr and GrafeasV1beta1VulnerabilityDetailsPtrOutput values.
// You can construct a concrete instance of `GrafeasV1beta1VulnerabilityDetailsPtrInput` via:
//
//	        GrafeasV1beta1VulnerabilityDetailsArgs{...}
//
//	or:
//
//	        nil
type GrafeasV1beta1VulnerabilityDetailsPtrInput interface {
	pulumi.Input

	ToGrafeasV1beta1VulnerabilityDetailsPtrOutput() GrafeasV1beta1VulnerabilityDetailsPtrOutput
	ToGrafeasV1beta1VulnerabilityDetailsPtrOutputWithContext(context.Context) GrafeasV1beta1VulnerabilityDetailsPtrOutput
}

type grafeasV1beta1VulnerabilityDetailsPtrType GrafeasV1beta1VulnerabilityDetailsArgs

func GrafeasV1beta1VulnerabilityDetailsPtr(v *GrafeasV1beta1VulnerabilityDetailsArgs) GrafeasV1beta1VulnerabilityDetailsPtrInput {
	return (*grafeasV1beta1VulnerabilityDetailsPtrType)(v)
}

func (*grafeasV1beta1VulnerabilityDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GrafeasV1beta1VulnerabilityDetails)(nil)).Elem()
}

func (i *grafeasV1beta1VulnerabilityDetailsPtrType) ToGrafeasV1beta1VulnerabilityDetailsPtrOutput() GrafeasV1beta1VulnerabilityDetailsPtrOutput {
	return i.ToGrafeasV1beta1VulnerabilityDetailsPtrOutputWithContext(context.Background())
}

func (i *grafeasV1beta1VulnerabilityDetailsPtrType) ToGrafeasV1beta1VulnerabilityDetailsPtrOutputWithContext(ctx context.Context) GrafeasV1beta1VulnerabilityDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafeasV1beta1VulnerabilityDetailsPtrOutput)
}

// Details of a vulnerability Occurrence.
type GrafeasV1beta1VulnerabilityDetailsOutput struct{ *pulumi.OutputState }

func (GrafeasV1beta1VulnerabilityDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1beta1VulnerabilityDetails)(nil)).Elem()
}

func (o GrafeasV1beta1VulnerabilityDetailsOutput) ToGrafeasV1beta1VulnerabilityDetailsOutput() GrafeasV1beta1VulnerabilityDetailsOutput {
	return o
}

func (o GrafeasV1beta1VulnerabilityDetailsOutput) ToGrafeasV1beta1VulnerabilityDetailsOutputWithContext(ctx context.Context) GrafeasV1beta1VulnerabilityDetailsOutput {
	return o
}

func (o GrafeasV1beta1VulnerabilityDetailsOutput) ToGrafeasV1beta1VulnerabilityDetailsPtrOutput() GrafeasV1beta1VulnerabilityDetailsPtrOutput {
	return o.ToGrafeasV1beta1VulnerabilityDetailsPtrOutputWithContext(context.Background())
}

func (o GrafeasV1beta1VulnerabilityDetailsOutput) ToGrafeasV1beta1VulnerabilityDetailsPtrOutputWithContext(ctx context.Context) GrafeasV1beta1VulnerabilityDetailsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GrafeasV1beta1VulnerabilityDetails) *GrafeasV1beta1VulnerabilityDetails {
		return &v
	}).(GrafeasV1beta1VulnerabilityDetailsPtrOutput)
}

// The cvss v2 score for the vulnerability.
func (o GrafeasV1beta1VulnerabilityDetailsOutput) CvssV2() CVSSPtrOutput {
	return o.ApplyT(func(v GrafeasV1beta1VulnerabilityDetails) *CVSS { return v.CvssV2 }).(CVSSPtrOutput)
}

// The cvss v3 score for the vulnerability.
func (o GrafeasV1beta1VulnerabilityDetailsOutput) CvssV3() CVSSPtrOutput {
	return o.ApplyT(func(v GrafeasV1beta1VulnerabilityDetails) *CVSS { return v.CvssV3 }).(CVSSPtrOutput)
}

// The distro assigned severity for this vulnerability when it is available, and note provider assigned severity when distro has not yet assigned a severity for this vulnerability. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues.
func (o GrafeasV1beta1VulnerabilityDetailsOutput) EffectiveSeverity() GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityPtrOutput {
	return o.ApplyT(func(v GrafeasV1beta1VulnerabilityDetails) *GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity {
		return v.EffectiveSeverity
	}).(GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityPtrOutput)
}

// Occurrence-specific extra details about the vulnerability.
func (o GrafeasV1beta1VulnerabilityDetailsOutput) ExtraDetails() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GrafeasV1beta1VulnerabilityDetails) *string { return v.ExtraDetails }).(pulumi.StringPtrOutput)
}

// The set of affected locations and their fixes (if available) within the associated resource.
func (o GrafeasV1beta1VulnerabilityDetailsOutput) PackageIssue() PackageIssueArrayOutput {
	return o.ApplyT(func(v GrafeasV1beta1VulnerabilityDetails) []PackageIssue { return v.PackageIssue }).(PackageIssueArrayOutput)
}

// The type of package; whether native or non native(ruby gems, node.js packages etc)
func (o GrafeasV1beta1VulnerabilityDetailsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GrafeasV1beta1VulnerabilityDetails) *string { return v.Type }).(pulumi.StringPtrOutput)
}

func (o GrafeasV1beta1VulnerabilityDetailsOutput) VexAssessment() VexAssessmentPtrOutput {
	return o.ApplyT(func(v GrafeasV1beta1VulnerabilityDetails) *VexAssessment { return v.VexAssessment }).(VexAssessmentPtrOutput)
}

type GrafeasV1beta1VulnerabilityDetailsPtrOutput struct{ *pulumi.OutputState }

func (GrafeasV1beta1VulnerabilityDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GrafeasV1beta1VulnerabilityDetails)(nil)).Elem()
}

func (o GrafeasV1beta1VulnerabilityDetailsPtrOutput) ToGrafeasV1beta1VulnerabilityDetailsPtrOutput() GrafeasV1beta1VulnerabilityDetailsPtrOutput {
	return o
}

func (o GrafeasV1beta1VulnerabilityDetailsPtrOutput) ToGrafeasV1beta1VulnerabilityDetailsPtrOutputWithContext(ctx context.Context) GrafeasV1beta1VulnerabilityDetailsPtrOutput {
	return o
}

func (o GrafeasV1beta1VulnerabilityDetailsPtrOutput) Elem() GrafeasV1beta1VulnerabilityDetailsOutput {
	return o.ApplyT(func(v *GrafeasV1beta1VulnerabilityDetails) GrafeasV1beta1VulnerabilityDetails {
		if v != nil {
			return *v
		}
		var ret GrafeasV1beta1VulnerabilityDetails
		return ret
	}).(GrafeasV1beta1VulnerabilityDetailsOutput)
}

// The cvss v2 score for the vulnerability.
func (o GrafeasV1beta1VulnerabilityDetailsPtrOutput) CvssV2() CVSSPtrOutput {
	return o.ApplyT(func(v *GrafeasV1beta1VulnerabilityDetails) *CVSS {
		if v == nil {
			return nil
		}
		return v.CvssV2
	}).(CVSSPtrOutput)
}

// The cvss v3 score for the vulnerability.
func (o GrafeasV1beta1VulnerabilityDetailsPtrOutput) CvssV3() CVSSPtrOutput {
	return o.ApplyT(func(v *GrafeasV1beta1VulnerabilityDetails) *CVSS {
		if v == nil {
			return nil
		}
		return v.CvssV3
	}).(CVSSPtrOutput)
}

// The distro assigned severity for this vulnerability when it is available, and note provider assigned severity when distro has not yet assigned a severity for this vulnerability. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues.
func (o GrafeasV1beta1VulnerabilityDetailsPtrOutput) EffectiveSeverity() GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityPtrOutput {
	return o.ApplyT(func(v *GrafeasV1beta1VulnerabilityDetails) *GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity {
		if v == nil {
			return nil
		}
		return v.EffectiveSeverity
	}).(GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityPtrOutput)
}

// Occurrence-specific extra details about the vulnerability.
func (o GrafeasV1beta1VulnerabilityDetailsPtrOutput) ExtraDetails() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GrafeasV1beta1VulnerabilityDetails) *string {
		if v == nil {
			return nil
		}
		return v.ExtraDetails
	}).(pulumi.StringPtrOutput)
}

// The set of affected locations and their fixes (if available) within the associated resource.
func (o GrafeasV1beta1VulnerabilityDetailsPtrOutput) PackageIssue() PackageIssueArrayOutput {
	return o.ApplyT(func(v *GrafeasV1beta1VulnerabilityDetails) []PackageIssue {
		if v == nil {
			return nil
		}
		return v.PackageIssue
	}).(PackageIssueArrayOutput)
}

// The type of package; whether native or non native(ruby gems, node.js packages etc)
func (o GrafeasV1beta1VulnerabilityDetailsPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GrafeasV1beta1VulnerabilityDetails) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

func (o GrafeasV1beta1VulnerabilityDetailsPtrOutput) VexAssessment() VexAssessmentPtrOutput {
	return o.ApplyT(func(v *GrafeasV1beta1VulnerabilityDetails) *VexAssessment {
		if v == nil {
			return nil
		}
		return v.VexAssessment
	}).(VexAssessmentPtrOutput)
}

// Details of a vulnerability Occurrence.
type GrafeasV1beta1VulnerabilityDetailsResponse struct {
	// The CVSS score of this vulnerability. CVSS score is on a scale of 0-10 where 0 indicates low severity and 10 indicates high severity.
	CvssScore float64 `pulumi:"cvssScore"`
	// The cvss v2 score for the vulnerability.
	CvssV2 CVSSResponse `pulumi:"cvssV2"`
	// The cvss v3 score for the vulnerability.
	CvssV3 CVSSResponse `pulumi:"cvssV3"`
	// CVSS version used to populate cvss_score and severity.
	CvssVersion string `pulumi:"cvssVersion"`
	// The distro assigned severity for this vulnerability when it is available, and note provider assigned severity when distro has not yet assigned a severity for this vulnerability. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues.
	EffectiveSeverity string `pulumi:"effectiveSeverity"`
	// Occurrence-specific extra details about the vulnerability.
	ExtraDetails string `pulumi:"extraDetails"`
	// A detailed description of this vulnerability.
	LongDescription string `pulumi:"longDescription"`
	// The set of affected locations and their fixes (if available) within the associated resource.
	PackageIssue []PackageIssueResponse `pulumi:"packageIssue"`
	// URLs related to this vulnerability.
	RelatedUrls []RelatedUrlResponse `pulumi:"relatedUrls"`
	// The note provider assigned Severity of the vulnerability.
	Severity string `pulumi:"severity"`
	// A one sentence description of this vulnerability.
	ShortDescription string `pulumi:"shortDescription"`
	// The type of package; whether native or non native(ruby gems, node.js packages etc)
	Type          string                `pulumi:"type"`
	VexAssessment VexAssessmentResponse `pulumi:"vexAssessment"`
}

// Details of a vulnerability Occurrence.
type GrafeasV1beta1VulnerabilityDetailsResponseOutput struct{ *pulumi.OutputState }

func (GrafeasV1beta1VulnerabilityDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1beta1VulnerabilityDetailsResponse)(nil)).Elem()
}

func (o GrafeasV1beta1VulnerabilityDetailsResponseOutput) ToGrafeasV1beta1VulnerabilityDetailsResponseOutput() GrafeasV1beta1VulnerabilityDetailsResponseOutput {
	return o
}

func (o GrafeasV1beta1VulnerabilityDetailsResponseOutput) ToGrafeasV1beta1VulnerabilityDetailsResponseOutputWithContext(ctx context.Context) GrafeasV1beta1VulnerabilityDetailsResponseOutput {
	return o
}

// The CVSS score of this vulnerability. CVSS score is on a scale of 0-10 where 0 indicates low severity and 10 indicates high severity.
func (o GrafeasV1beta1VulnerabilityDetailsResponseOutput) CvssScore() pulumi.Float64Output {
	return o.ApplyT(func(v GrafeasV1beta1VulnerabilityDetailsResponse) float64 { return v.CvssScore }).(pulumi.Float64Output)
}

// The cvss v2 score for the vulnerability.
func (o GrafeasV1beta1VulnerabilityDetailsResponseOutput) CvssV2() CVSSResponseOutput {
	return o.ApplyT(func(v GrafeasV1beta1VulnerabilityDetailsResponse) CVSSResponse { return v.CvssV2 }).(CVSSResponseOutput)
}

// The cvss v3 score for the vulnerability.
func (o GrafeasV1beta1VulnerabilityDetailsResponseOutput) CvssV3() CVSSResponseOutput {
	return o.ApplyT(func(v GrafeasV1beta1VulnerabilityDetailsResponse) CVSSResponse { return v.CvssV3 }).(CVSSResponseOutput)
}

// CVSS version used to populate cvss_score and severity.
func (o GrafeasV1beta1VulnerabilityDetailsResponseOutput) CvssVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GrafeasV1beta1VulnerabilityDetailsResponse) string { return v.CvssVersion }).(pulumi.StringOutput)
}

// The distro assigned severity for this vulnerability when it is available, and note provider assigned severity when distro has not yet assigned a severity for this vulnerability. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues.
func (o GrafeasV1beta1VulnerabilityDetailsResponseOutput) EffectiveSeverity() pulumi.StringOutput {
	return o.ApplyT(func(v GrafeasV1beta1VulnerabilityDetailsResponse) string { return v.EffectiveSeverity }).(pulumi.StringOutput)
}

// Occurrence-specific extra details about the vulnerability.
func (o GrafeasV1beta1VulnerabilityDetailsResponseOutput) ExtraDetails() pulumi.StringOutput {
	return o.ApplyT(func(v GrafeasV1beta1VulnerabilityDetailsResponse) string { return v.ExtraDetails }).(pulumi.StringOutput)
}

// A detailed description of this vulnerability.
func (o GrafeasV1beta1VulnerabilityDetailsResponseOutput) LongDescription() pulumi.StringOutput {
	return o.ApplyT(func(v GrafeasV1beta1VulnerabilityDetailsResponse) string { return v.LongDescription }).(pulumi.StringOutput)
}

// The set of affected locations and their fixes (if available) within the associated resource.
func (o GrafeasV1beta1VulnerabilityDetailsResponseOutput) PackageIssue() PackageIssueResponseArrayOutput {
	return o.ApplyT(func(v GrafeasV1beta1VulnerabilityDetailsResponse) []PackageIssueResponse { return v.PackageIssue }).(PackageIssueResponseArrayOutput)
}

// URLs related to this vulnerability.
func (o GrafeasV1beta1VulnerabilityDetailsResponseOutput) RelatedUrls() RelatedUrlResponseArrayOutput {
	return o.ApplyT(func(v GrafeasV1beta1VulnerabilityDetailsResponse) []RelatedUrlResponse { return v.RelatedUrls }).(RelatedUrlResponseArrayOutput)
}

// The note provider assigned Severity of the vulnerability.
func (o GrafeasV1beta1VulnerabilityDetailsResponseOutput) Severity() pulumi.StringOutput {
	return o.ApplyT(func(v GrafeasV1beta1VulnerabilityDetailsResponse) string { return v.Severity }).(pulumi.StringOutput)
}

// A one sentence description of this vulnerability.
func (o GrafeasV1beta1VulnerabilityDetailsResponseOutput) ShortDescription() pulumi.StringOutput {
	return o.ApplyT(func(v GrafeasV1beta1VulnerabilityDetailsResponse) string { return v.ShortDescription }).(pulumi.StringOutput)
}

// The type of package; whether native or non native(ruby gems, node.js packages etc)
func (o GrafeasV1beta1VulnerabilityDetailsResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GrafeasV1beta1VulnerabilityDetailsResponse) string { return v.Type }).(pulumi.StringOutput)
}

func (o GrafeasV1beta1VulnerabilityDetailsResponseOutput) VexAssessment() VexAssessmentResponseOutput {
	return o.ApplyT(func(v GrafeasV1beta1VulnerabilityDetailsResponse) VexAssessmentResponse { return v.VexAssessment }).(VexAssessmentResponseOutput)
}

// Container message for hash values.
type Hash struct {
	// The type of hash that was performed.
	Type HashType `pulumi:"type"`
	// The hash value.
	Value string `pulumi:"value"`
}

// HashInput is an input type that accepts HashArgs and HashOutput values.
// You can construct a concrete instance of `HashInput` via:
//
//	HashArgs{...}
type HashInput interface {
	pulumi.Input

	ToHashOutput() HashOutput
	ToHashOutputWithContext(context.Context) HashOutput
}

// Container message for hash values.
type HashArgs struct {
	// The type of hash that was performed.
	Type HashTypeInput `pulumi:"type"`
	// The hash value.
	Value pulumi.StringInput `pulumi:"value"`
}

func (HashArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Hash)(nil)).Elem()
}

func (i HashArgs) ToHashOutput() HashOutput {
	return i.ToHashOutputWithContext(context.Background())
}

func (i HashArgs) ToHashOutputWithContext(ctx context.Context) HashOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HashOutput)
}

func (i HashArgs) ToHashPtrOutput() HashPtrOutput {
	return i.ToHashPtrOutputWithContext(context.Background())
}

func (i HashArgs) ToHashPtrOutputWithContext(ctx context.Context) HashPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HashOutput).ToHashPtrOutputWithContext(ctx)
}

// HashPtrInput is an input type that accepts HashArgs, HashPtr and HashPtrOutput values.
// You can construct a concrete instance of `HashPtrInput` via:
//
//	        HashArgs{...}
//
//	or:
//
//	        nil
type HashPtrInput interface {
	pulumi.Input

	ToHashPtrOutput() HashPtrOutput
	ToHashPtrOutputWithContext(context.Context) HashPtrOutput
}

type hashPtrType HashArgs

func HashPtr(v *HashArgs) HashPtrInput {
	return (*hashPtrType)(v)
}

func (*hashPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Hash)(nil)).Elem()
}

func (i *hashPtrType) ToHashPtrOutput() HashPtrOutput {
	return i.ToHashPtrOutputWithContext(context.Background())
}

func (i *hashPtrType) ToHashPtrOutputWithContext(ctx context.Context) HashPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HashPtrOutput)
}

// HashArrayInput is an input type that accepts HashArray and HashArrayOutput values.
// You can construct a concrete instance of `HashArrayInput` via:
//
//	HashArray{ HashArgs{...} }
type HashArrayInput interface {
	pulumi.Input

	ToHashArrayOutput() HashArrayOutput
	ToHashArrayOutputWithContext(context.Context) HashArrayOutput
}

type HashArray []HashInput

func (HashArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Hash)(nil)).Elem()
}

func (i HashArray) ToHashArrayOutput() HashArrayOutput {
	return i.ToHashArrayOutputWithContext(context.Background())
}

func (i HashArray) ToHashArrayOutputWithContext(ctx context.Context) HashArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HashArrayOutput)
}

// Container message for hash values.
type HashOutput struct{ *pulumi.OutputState }

func (HashOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Hash)(nil)).Elem()
}

func (o HashOutput) ToHashOutput() HashOutput {
	return o
}

func (o HashOutput) ToHashOutputWithContext(ctx context.Context) HashOutput {
	return o
}

func (o HashOutput) ToHashPtrOutput() HashPtrOutput {
	return o.ToHashPtrOutputWithContext(context.Background())
}

func (o HashOutput) ToHashPtrOutputWithContext(ctx context.Context) HashPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Hash) *Hash {
		return &v
	}).(HashPtrOutput)
}

// The type of hash that was performed.
func (o HashOutput) Type() HashTypeOutput {
	return o.ApplyT(func(v Hash) HashType { return v.Type }).(HashTypeOutput)
}

// The hash value.
func (o HashOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v Hash) string { return v.Value }).(pulumi.StringOutput)
}

type HashPtrOutput struct{ *pulumi.OutputState }

func (HashPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Hash)(nil)).Elem()
}

func (o HashPtrOutput) ToHashPtrOutput() HashPtrOutput {
	return o
}

func (o HashPtrOutput) ToHashPtrOutputWithContext(ctx context.Context) HashPtrOutput {
	return o
}

func (o HashPtrOutput) Elem() HashOutput {
	return o.ApplyT(func(v *Hash) Hash {
		if v != nil {
			return *v
		}
		var ret Hash
		return ret
	}).(HashOutput)
}

// The type of hash that was performed.
func (o HashPtrOutput) Type() HashTypePtrOutput {
	return o.ApplyT(func(v *Hash) *HashType {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(HashTypePtrOutput)
}

// The hash value.
func (o HashPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Hash) *string {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.StringPtrOutput)
}

type HashArrayOutput struct{ *pulumi.OutputState }

func (HashArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Hash)(nil)).Elem()
}

func (o HashArrayOutput) ToHashArrayOutput() HashArrayOutput {
	return o
}

func (o HashArrayOutput) ToHashArrayOutputWithContext(ctx context.Context) HashArrayOutput {
	return o
}

func (o HashArrayOutput) Index(i pulumi.IntInput) HashOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Hash {
		return vs[0].([]Hash)[vs[1].(int)]
	}).(HashOutput)
}

// Container message for hash values.
type HashResponse struct {
	// The type of hash that was performed.
	Type string `pulumi:"type"`
	// The hash value.
	Value string `pulumi:"value"`
}

// Container message for hash values.
type HashResponseOutput struct{ *pulumi.OutputState }

func (HashResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HashResponse)(nil)).Elem()
}

func (o HashResponseOutput) ToHashResponseOutput() HashResponseOutput {
	return o
}

func (o HashResponseOutput) ToHashResponseOutputWithContext(ctx context.Context) HashResponseOutput {
	return o
}

// The type of hash that was performed.
func (o HashResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HashResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The hash value.
func (o HashResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v HashResponse) string { return v.Value }).(pulumi.StringOutput)
}

type HashResponseArrayOutput struct{ *pulumi.OutputState }

func (HashResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HashResponse)(nil)).Elem()
}

func (o HashResponseArrayOutput) ToHashResponseArrayOutput() HashResponseArrayOutput {
	return o
}

func (o HashResponseArrayOutput) ToHashResponseArrayOutputWithContext(ctx context.Context) HashResponseArrayOutput {
	return o
}

func (o HashResponseArrayOutput) Index(i pulumi.IntInput) HashResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HashResponse {
		return vs[0].([]HashResponse)[vs[1].(int)]
	}).(HashResponseOutput)
}

// This submessage provides human-readable hints about the purpose of the authority. Because the name of a note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from "readable" names more suitable for debug output. Note that these hints should not be used to look up authorities in security sensitive contexts, such as when looking up attestations to verify.
type Hint struct {
	// The human readable name of this attestation authority, for example "qa".
	HumanReadableName string `pulumi:"humanReadableName"`
}

// HintInput is an input type that accepts HintArgs and HintOutput values.
// You can construct a concrete instance of `HintInput` via:
//
//	HintArgs{...}
type HintInput interface {
	pulumi.Input

	ToHintOutput() HintOutput
	ToHintOutputWithContext(context.Context) HintOutput
}

// This submessage provides human-readable hints about the purpose of the authority. Because the name of a note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from "readable" names more suitable for debug output. Note that these hints should not be used to look up authorities in security sensitive contexts, such as when looking up attestations to verify.
type HintArgs struct {
	// The human readable name of this attestation authority, for example "qa".
	HumanReadableName pulumi.StringInput `pulumi:"humanReadableName"`
}

func (HintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Hint)(nil)).Elem()
}

func (i HintArgs) ToHintOutput() HintOutput {
	return i.ToHintOutputWithContext(context.Background())
}

func (i HintArgs) ToHintOutputWithContext(ctx context.Context) HintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HintOutput)
}

func (i HintArgs) ToHintPtrOutput() HintPtrOutput {
	return i.ToHintPtrOutputWithContext(context.Background())
}

func (i HintArgs) ToHintPtrOutputWithContext(ctx context.Context) HintPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HintOutput).ToHintPtrOutputWithContext(ctx)
}

// HintPtrInput is an input type that accepts HintArgs, HintPtr and HintPtrOutput values.
// You can construct a concrete instance of `HintPtrInput` via:
//
//	        HintArgs{...}
//
//	or:
//
//	        nil
type HintPtrInput interface {
	pulumi.Input

	ToHintPtrOutput() HintPtrOutput
	ToHintPtrOutputWithContext(context.Context) HintPtrOutput
}

type hintPtrType HintArgs

func HintPtr(v *HintArgs) HintPtrInput {
	return (*hintPtrType)(v)
}

func (*hintPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Hint)(nil)).Elem()
}

func (i *hintPtrType) ToHintPtrOutput() HintPtrOutput {
	return i.ToHintPtrOutputWithContext(context.Background())
}

func (i *hintPtrType) ToHintPtrOutputWithContext(ctx context.Context) HintPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HintPtrOutput)
}

// This submessage provides human-readable hints about the purpose of the authority. Because the name of a note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from "readable" names more suitable for debug output. Note that these hints should not be used to look up authorities in security sensitive contexts, such as when looking up attestations to verify.
type HintOutput struct{ *pulumi.OutputState }

func (HintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Hint)(nil)).Elem()
}

func (o HintOutput) ToHintOutput() HintOutput {
	return o
}

func (o HintOutput) ToHintOutputWithContext(ctx context.Context) HintOutput {
	return o
}

func (o HintOutput) ToHintPtrOutput() HintPtrOutput {
	return o.ToHintPtrOutputWithContext(context.Background())
}

func (o HintOutput) ToHintPtrOutputWithContext(ctx context.Context) HintPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Hint) *Hint {
		return &v
	}).(HintPtrOutput)
}

// The human readable name of this attestation authority, for example "qa".
func (o HintOutput) HumanReadableName() pulumi.StringOutput {
	return o.ApplyT(func(v Hint) string { return v.HumanReadableName }).(pulumi.StringOutput)
}

type HintPtrOutput struct{ *pulumi.OutputState }

func (HintPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Hint)(nil)).Elem()
}

func (o HintPtrOutput) ToHintPtrOutput() HintPtrOutput {
	return o
}

func (o HintPtrOutput) ToHintPtrOutputWithContext(ctx context.Context) HintPtrOutput {
	return o
}

func (o HintPtrOutput) Elem() HintOutput {
	return o.ApplyT(func(v *Hint) Hint {
		if v != nil {
			return *v
		}
		var ret Hint
		return ret
	}).(HintOutput)
}

// The human readable name of this attestation authority, for example "qa".
func (o HintPtrOutput) HumanReadableName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Hint) *string {
		if v == nil {
			return nil
		}
		return &v.HumanReadableName
	}).(pulumi.StringPtrOutput)
}

// This submessage provides human-readable hints about the purpose of the authority. Because the name of a note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from "readable" names more suitable for debug output. Note that these hints should not be used to look up authorities in security sensitive contexts, such as when looking up attestations to verify.
type HintResponse struct {
	// The human readable name of this attestation authority, for example "qa".
	HumanReadableName string `pulumi:"humanReadableName"`
}

// This submessage provides human-readable hints about the purpose of the authority. Because the name of a note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from "readable" names more suitable for debug output. Note that these hints should not be used to look up authorities in security sensitive contexts, such as when looking up attestations to verify.
type HintResponseOutput struct{ *pulumi.OutputState }

func (HintResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HintResponse)(nil)).Elem()
}

func (o HintResponseOutput) ToHintResponseOutput() HintResponseOutput {
	return o
}

func (o HintResponseOutput) ToHintResponseOutputWithContext(ctx context.Context) HintResponseOutput {
	return o
}

// The human readable name of this attestation authority, for example "qa".
func (o HintResponseOutput) HumanReadableName() pulumi.StringOutput {
	return o.ApplyT(func(v HintResponse) string { return v.HumanReadableName }).(pulumi.StringOutput)
}

// This contains the fields corresponding to the definition of a software supply chain step in an in-toto layout. This information goes into a Grafeas note.
type InToto struct {
	// This field contains the expected command used to perform the step.
	ExpectedCommand []string `pulumi:"expectedCommand"`
	// The following fields contain in-toto artifact rules identifying the artifacts that enter this supply chain step, and exit the supply chain step, i.e. materials and products of the step.
	ExpectedMaterials []ArtifactRule `pulumi:"expectedMaterials"`
	ExpectedProducts  []ArtifactRule `pulumi:"expectedProducts"`
	// This field contains the public keys that can be used to verify the signatures on the step metadata.
	SigningKeys []SigningKey `pulumi:"signingKeys"`
	// This field identifies the name of the step in the supply chain.
	StepName *string `pulumi:"stepName"`
	// This field contains a value that indicates the minimum number of keys that need to be used to sign the step's in-toto link.
	Threshold *string `pulumi:"threshold"`
}

// InTotoInput is an input type that accepts InTotoArgs and InTotoOutput values.
// You can construct a concrete instance of `InTotoInput` via:
//
//	InTotoArgs{...}
type InTotoInput interface {
	pulumi.Input

	ToInTotoOutput() InTotoOutput
	ToInTotoOutputWithContext(context.Context) InTotoOutput
}

// This contains the fields corresponding to the definition of a software supply chain step in an in-toto layout. This information goes into a Grafeas note.
type InTotoArgs struct {
	// This field contains the expected command used to perform the step.
	ExpectedCommand pulumi.StringArrayInput `pulumi:"expectedCommand"`
	// The following fields contain in-toto artifact rules identifying the artifacts that enter this supply chain step, and exit the supply chain step, i.e. materials and products of the step.
	ExpectedMaterials ArtifactRuleArrayInput `pulumi:"expectedMaterials"`
	ExpectedProducts  ArtifactRuleArrayInput `pulumi:"expectedProducts"`
	// This field contains the public keys that can be used to verify the signatures on the step metadata.
	SigningKeys SigningKeyArrayInput `pulumi:"signingKeys"`
	// This field identifies the name of the step in the supply chain.
	StepName pulumi.StringPtrInput `pulumi:"stepName"`
	// This field contains a value that indicates the minimum number of keys that need to be used to sign the step's in-toto link.
	Threshold pulumi.StringPtrInput `pulumi:"threshold"`
}

func (InTotoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InToto)(nil)).Elem()
}

func (i InTotoArgs) ToInTotoOutput() InTotoOutput {
	return i.ToInTotoOutputWithContext(context.Background())
}

func (i InTotoArgs) ToInTotoOutputWithContext(ctx context.Context) InTotoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InTotoOutput)
}

func (i InTotoArgs) ToInTotoPtrOutput() InTotoPtrOutput {
	return i.ToInTotoPtrOutputWithContext(context.Background())
}

func (i InTotoArgs) ToInTotoPtrOutputWithContext(ctx context.Context) InTotoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InTotoOutput).ToInTotoPtrOutputWithContext(ctx)
}

// InTotoPtrInput is an input type that accepts InTotoArgs, InTotoPtr and InTotoPtrOutput values.
// You can construct a concrete instance of `InTotoPtrInput` via:
//
//	        InTotoArgs{...}
//
//	or:
//
//	        nil
type InTotoPtrInput interface {
	pulumi.Input

	ToInTotoPtrOutput() InTotoPtrOutput
	ToInTotoPtrOutputWithContext(context.Context) InTotoPtrOutput
}

type inTotoPtrType InTotoArgs

func InTotoPtr(v *InTotoArgs) InTotoPtrInput {
	return (*inTotoPtrType)(v)
}

func (*inTotoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InToto)(nil)).Elem()
}

func (i *inTotoPtrType) ToInTotoPtrOutput() InTotoPtrOutput {
	return i.ToInTotoPtrOutputWithContext(context.Background())
}

func (i *inTotoPtrType) ToInTotoPtrOutputWithContext(ctx context.Context) InTotoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InTotoPtrOutput)
}

// This contains the fields corresponding to the definition of a software supply chain step in an in-toto layout. This information goes into a Grafeas note.
type InTotoOutput struct{ *pulumi.OutputState }

func (InTotoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InToto)(nil)).Elem()
}

func (o InTotoOutput) ToInTotoOutput() InTotoOutput {
	return o
}

func (o InTotoOutput) ToInTotoOutputWithContext(ctx context.Context) InTotoOutput {
	return o
}

func (o InTotoOutput) ToInTotoPtrOutput() InTotoPtrOutput {
	return o.ToInTotoPtrOutputWithContext(context.Background())
}

func (o InTotoOutput) ToInTotoPtrOutputWithContext(ctx context.Context) InTotoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InToto) *InToto {
		return &v
	}).(InTotoPtrOutput)
}

// This field contains the expected command used to perform the step.
func (o InTotoOutput) ExpectedCommand() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InToto) []string { return v.ExpectedCommand }).(pulumi.StringArrayOutput)
}

// The following fields contain in-toto artifact rules identifying the artifacts that enter this supply chain step, and exit the supply chain step, i.e. materials and products of the step.
func (o InTotoOutput) ExpectedMaterials() ArtifactRuleArrayOutput {
	return o.ApplyT(func(v InToto) []ArtifactRule { return v.ExpectedMaterials }).(ArtifactRuleArrayOutput)
}

func (o InTotoOutput) ExpectedProducts() ArtifactRuleArrayOutput {
	return o.ApplyT(func(v InToto) []ArtifactRule { return v.ExpectedProducts }).(ArtifactRuleArrayOutput)
}

// This field contains the public keys that can be used to verify the signatures on the step metadata.
func (o InTotoOutput) SigningKeys() SigningKeyArrayOutput {
	return o.ApplyT(func(v InToto) []SigningKey { return v.SigningKeys }).(SigningKeyArrayOutput)
}

// This field identifies the name of the step in the supply chain.
func (o InTotoOutput) StepName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InToto) *string { return v.StepName }).(pulumi.StringPtrOutput)
}

// This field contains a value that indicates the minimum number of keys that need to be used to sign the step's in-toto link.
func (o InTotoOutput) Threshold() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InToto) *string { return v.Threshold }).(pulumi.StringPtrOutput)
}

type InTotoPtrOutput struct{ *pulumi.OutputState }

func (InTotoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InToto)(nil)).Elem()
}

func (o InTotoPtrOutput) ToInTotoPtrOutput() InTotoPtrOutput {
	return o
}

func (o InTotoPtrOutput) ToInTotoPtrOutputWithContext(ctx context.Context) InTotoPtrOutput {
	return o
}

func (o InTotoPtrOutput) Elem() InTotoOutput {
	return o.ApplyT(func(v *InToto) InToto {
		if v != nil {
			return *v
		}
		var ret InToto
		return ret
	}).(InTotoOutput)
}

// This field contains the expected command used to perform the step.
func (o InTotoPtrOutput) ExpectedCommand() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InToto) []string {
		if v == nil {
			return nil
		}
		return v.ExpectedCommand
	}).(pulumi.StringArrayOutput)
}

// The following fields contain in-toto artifact rules identifying the artifacts that enter this supply chain step, and exit the supply chain step, i.e. materials and products of the step.
func (o InTotoPtrOutput) ExpectedMaterials() ArtifactRuleArrayOutput {
	return o.ApplyT(func(v *InToto) []ArtifactRule {
		if v == nil {
			return nil
		}
		return v.ExpectedMaterials
	}).(ArtifactRuleArrayOutput)
}

func (o InTotoPtrOutput) ExpectedProducts() ArtifactRuleArrayOutput {
	return o.ApplyT(func(v *InToto) []ArtifactRule {
		if v == nil {
			return nil
		}
		return v.ExpectedProducts
	}).(ArtifactRuleArrayOutput)
}

// This field contains the public keys that can be used to verify the signatures on the step metadata.
func (o InTotoPtrOutput) SigningKeys() SigningKeyArrayOutput {
	return o.ApplyT(func(v *InToto) []SigningKey {
		if v == nil {
			return nil
		}
		return v.SigningKeys
	}).(SigningKeyArrayOutput)
}

// This field identifies the name of the step in the supply chain.
func (o InTotoPtrOutput) StepName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InToto) *string {
		if v == nil {
			return nil
		}
		return v.StepName
	}).(pulumi.StringPtrOutput)
}

// This field contains a value that indicates the minimum number of keys that need to be used to sign the step's in-toto link.
func (o InTotoPtrOutput) Threshold() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InToto) *string {
		if v == nil {
			return nil
		}
		return v.Threshold
	}).(pulumi.StringPtrOutput)
}

// This contains the fields corresponding to the definition of a software supply chain step in an in-toto layout. This information goes into a Grafeas note.
type InTotoResponse struct {
	// This field contains the expected command used to perform the step.
	ExpectedCommand []string `pulumi:"expectedCommand"`
	// The following fields contain in-toto artifact rules identifying the artifacts that enter this supply chain step, and exit the supply chain step, i.e. materials and products of the step.
	ExpectedMaterials []ArtifactRuleResponse `pulumi:"expectedMaterials"`
	ExpectedProducts  []ArtifactRuleResponse `pulumi:"expectedProducts"`
	// This field contains the public keys that can be used to verify the signatures on the step metadata.
	SigningKeys []SigningKeyResponse `pulumi:"signingKeys"`
	// This field identifies the name of the step in the supply chain.
	StepName string `pulumi:"stepName"`
	// This field contains a value that indicates the minimum number of keys that need to be used to sign the step's in-toto link.
	Threshold string `pulumi:"threshold"`
}

// This contains the fields corresponding to the definition of a software supply chain step in an in-toto layout. This information goes into a Grafeas note.
type InTotoResponseOutput struct{ *pulumi.OutputState }

func (InTotoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InTotoResponse)(nil)).Elem()
}

func (o InTotoResponseOutput) ToInTotoResponseOutput() InTotoResponseOutput {
	return o
}

func (o InTotoResponseOutput) ToInTotoResponseOutputWithContext(ctx context.Context) InTotoResponseOutput {
	return o
}

// This field contains the expected command used to perform the step.
func (o InTotoResponseOutput) ExpectedCommand() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InTotoResponse) []string { return v.ExpectedCommand }).(pulumi.StringArrayOutput)
}

// The following fields contain in-toto artifact rules identifying the artifacts that enter this supply chain step, and exit the supply chain step, i.e. materials and products of the step.
func (o InTotoResponseOutput) ExpectedMaterials() ArtifactRuleResponseArrayOutput {
	return o.ApplyT(func(v InTotoResponse) []ArtifactRuleResponse { return v.ExpectedMaterials }).(ArtifactRuleResponseArrayOutput)
}

func (o InTotoResponseOutput) ExpectedProducts() ArtifactRuleResponseArrayOutput {
	return o.ApplyT(func(v InTotoResponse) []ArtifactRuleResponse { return v.ExpectedProducts }).(ArtifactRuleResponseArrayOutput)
}

// This field contains the public keys that can be used to verify the signatures on the step metadata.
func (o InTotoResponseOutput) SigningKeys() SigningKeyResponseArrayOutput {
	return o.ApplyT(func(v InTotoResponse) []SigningKeyResponse { return v.SigningKeys }).(SigningKeyResponseArrayOutput)
}

// This field identifies the name of the step in the supply chain.
func (o InTotoResponseOutput) StepName() pulumi.StringOutput {
	return o.ApplyT(func(v InTotoResponse) string { return v.StepName }).(pulumi.StringOutput)
}

// This field contains a value that indicates the minimum number of keys that need to be used to sign the step's in-toto link.
func (o InTotoResponseOutput) Threshold() pulumi.StringOutput {
	return o.ApplyT(func(v InTotoResponse) string { return v.Threshold }).(pulumi.StringOutput)
}

type InTotoSlsaProvenanceV1 struct {
	Predicate     *SlsaProvenanceV1 `pulumi:"predicate"`
	PredicateType *string           `pulumi:"predicateType"`
	Subject       []Subject         `pulumi:"subject"`
	// InToto spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement
	Type *string `pulumi:"type"`
}

// InTotoSlsaProvenanceV1Input is an input type that accepts InTotoSlsaProvenanceV1Args and InTotoSlsaProvenanceV1Output values.
// You can construct a concrete instance of `InTotoSlsaProvenanceV1Input` via:
//
//	InTotoSlsaProvenanceV1Args{...}
type InTotoSlsaProvenanceV1Input interface {
	pulumi.Input

	ToInTotoSlsaProvenanceV1Output() InTotoSlsaProvenanceV1Output
	ToInTotoSlsaProvenanceV1OutputWithContext(context.Context) InTotoSlsaProvenanceV1Output
}

type InTotoSlsaProvenanceV1Args struct {
	Predicate     SlsaProvenanceV1PtrInput `pulumi:"predicate"`
	PredicateType pulumi.StringPtrInput    `pulumi:"predicateType"`
	Subject       SubjectArrayInput        `pulumi:"subject"`
	// InToto spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (InTotoSlsaProvenanceV1Args) ElementType() reflect.Type {
	return reflect.TypeOf((*InTotoSlsaProvenanceV1)(nil)).Elem()
}

func (i InTotoSlsaProvenanceV1Args) ToInTotoSlsaProvenanceV1Output() InTotoSlsaProvenanceV1Output {
	return i.ToInTotoSlsaProvenanceV1OutputWithContext(context.Background())
}

func (i InTotoSlsaProvenanceV1Args) ToInTotoSlsaProvenanceV1OutputWithContext(ctx context.Context) InTotoSlsaProvenanceV1Output {
	return pulumi.ToOutputWithContext(ctx, i).(InTotoSlsaProvenanceV1Output)
}

func (i InTotoSlsaProvenanceV1Args) ToInTotoSlsaProvenanceV1PtrOutput() InTotoSlsaProvenanceV1PtrOutput {
	return i.ToInTotoSlsaProvenanceV1PtrOutputWithContext(context.Background())
}

func (i InTotoSlsaProvenanceV1Args) ToInTotoSlsaProvenanceV1PtrOutputWithContext(ctx context.Context) InTotoSlsaProvenanceV1PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InTotoSlsaProvenanceV1Output).ToInTotoSlsaProvenanceV1PtrOutputWithContext(ctx)
}

// InTotoSlsaProvenanceV1PtrInput is an input type that accepts InTotoSlsaProvenanceV1Args, InTotoSlsaProvenanceV1Ptr and InTotoSlsaProvenanceV1PtrOutput values.
// You can construct a concrete instance of `InTotoSlsaProvenanceV1PtrInput` via:
//
//	        InTotoSlsaProvenanceV1Args{...}
//
//	or:
//
//	        nil
type InTotoSlsaProvenanceV1PtrInput interface {
	pulumi.Input

	ToInTotoSlsaProvenanceV1PtrOutput() InTotoSlsaProvenanceV1PtrOutput
	ToInTotoSlsaProvenanceV1PtrOutputWithContext(context.Context) InTotoSlsaProvenanceV1PtrOutput
}

type inTotoSlsaProvenanceV1PtrType InTotoSlsaProvenanceV1Args

func InTotoSlsaProvenanceV1Ptr(v *InTotoSlsaProvenanceV1Args) InTotoSlsaProvenanceV1PtrInput {
	return (*inTotoSlsaProvenanceV1PtrType)(v)
}

func (*inTotoSlsaProvenanceV1PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InTotoSlsaProvenanceV1)(nil)).Elem()
}

func (i *inTotoSlsaProvenanceV1PtrType) ToInTotoSlsaProvenanceV1PtrOutput() InTotoSlsaProvenanceV1PtrOutput {
	return i.ToInTotoSlsaProvenanceV1PtrOutputWithContext(context.Background())
}

func (i *inTotoSlsaProvenanceV1PtrType) ToInTotoSlsaProvenanceV1PtrOutputWithContext(ctx context.Context) InTotoSlsaProvenanceV1PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InTotoSlsaProvenanceV1PtrOutput)
}

type InTotoSlsaProvenanceV1Output struct{ *pulumi.OutputState }

func (InTotoSlsaProvenanceV1Output) ElementType() reflect.Type {
	return reflect.TypeOf((*InTotoSlsaProvenanceV1)(nil)).Elem()
}

func (o InTotoSlsaProvenanceV1Output) ToInTotoSlsaProvenanceV1Output() InTotoSlsaProvenanceV1Output {
	return o
}

func (o InTotoSlsaProvenanceV1Output) ToInTotoSlsaProvenanceV1OutputWithContext(ctx context.Context) InTotoSlsaProvenanceV1Output {
	return o
}

func (o InTotoSlsaProvenanceV1Output) ToInTotoSlsaProvenanceV1PtrOutput() InTotoSlsaProvenanceV1PtrOutput {
	return o.ToInTotoSlsaProvenanceV1PtrOutputWithContext(context.Background())
}

func (o InTotoSlsaProvenanceV1Output) ToInTotoSlsaProvenanceV1PtrOutputWithContext(ctx context.Context) InTotoSlsaProvenanceV1PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InTotoSlsaProvenanceV1) *InTotoSlsaProvenanceV1 {
		return &v
	}).(InTotoSlsaProvenanceV1PtrOutput)
}

func (o InTotoSlsaProvenanceV1Output) Predicate() SlsaProvenanceV1PtrOutput {
	return o.ApplyT(func(v InTotoSlsaProvenanceV1) *SlsaProvenanceV1 { return v.Predicate }).(SlsaProvenanceV1PtrOutput)
}

func (o InTotoSlsaProvenanceV1Output) PredicateType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InTotoSlsaProvenanceV1) *string { return v.PredicateType }).(pulumi.StringPtrOutput)
}

func (o InTotoSlsaProvenanceV1Output) Subject() SubjectArrayOutput {
	return o.ApplyT(func(v InTotoSlsaProvenanceV1) []Subject { return v.Subject }).(SubjectArrayOutput)
}

// InToto spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement
func (o InTotoSlsaProvenanceV1Output) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InTotoSlsaProvenanceV1) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type InTotoSlsaProvenanceV1PtrOutput struct{ *pulumi.OutputState }

func (InTotoSlsaProvenanceV1PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InTotoSlsaProvenanceV1)(nil)).Elem()
}

func (o InTotoSlsaProvenanceV1PtrOutput) ToInTotoSlsaProvenanceV1PtrOutput() InTotoSlsaProvenanceV1PtrOutput {
	return o
}

func (o InTotoSlsaProvenanceV1PtrOutput) ToInTotoSlsaProvenanceV1PtrOutputWithContext(ctx context.Context) InTotoSlsaProvenanceV1PtrOutput {
	return o
}

func (o InTotoSlsaProvenanceV1PtrOutput) Elem() InTotoSlsaProvenanceV1Output {
	return o.ApplyT(func(v *InTotoSlsaProvenanceV1) InTotoSlsaProvenanceV1 {
		if v != nil {
			return *v
		}
		var ret InTotoSlsaProvenanceV1
		return ret
	}).(InTotoSlsaProvenanceV1Output)
}

func (o InTotoSlsaProvenanceV1PtrOutput) Predicate() SlsaProvenanceV1PtrOutput {
	return o.ApplyT(func(v *InTotoSlsaProvenanceV1) *SlsaProvenanceV1 {
		if v == nil {
			return nil
		}
		return v.Predicate
	}).(SlsaProvenanceV1PtrOutput)
}

func (o InTotoSlsaProvenanceV1PtrOutput) PredicateType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InTotoSlsaProvenanceV1) *string {
		if v == nil {
			return nil
		}
		return v.PredicateType
	}).(pulumi.StringPtrOutput)
}

func (o InTotoSlsaProvenanceV1PtrOutput) Subject() SubjectArrayOutput {
	return o.ApplyT(func(v *InTotoSlsaProvenanceV1) []Subject {
		if v == nil {
			return nil
		}
		return v.Subject
	}).(SubjectArrayOutput)
}

// InToto spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement
func (o InTotoSlsaProvenanceV1PtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InTotoSlsaProvenanceV1) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type InTotoSlsaProvenanceV1Response struct {
	Predicate     SlsaProvenanceV1Response `pulumi:"predicate"`
	PredicateType string                   `pulumi:"predicateType"`
	Subject       []SubjectResponse        `pulumi:"subject"`
	// InToto spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement
	Type string `pulumi:"type"`
}

type InTotoSlsaProvenanceV1ResponseOutput struct{ *pulumi.OutputState }

func (InTotoSlsaProvenanceV1ResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InTotoSlsaProvenanceV1Response)(nil)).Elem()
}

func (o InTotoSlsaProvenanceV1ResponseOutput) ToInTotoSlsaProvenanceV1ResponseOutput() InTotoSlsaProvenanceV1ResponseOutput {
	return o
}

func (o InTotoSlsaProvenanceV1ResponseOutput) ToInTotoSlsaProvenanceV1ResponseOutputWithContext(ctx context.Context) InTotoSlsaProvenanceV1ResponseOutput {
	return o
}

func (o InTotoSlsaProvenanceV1ResponseOutput) Predicate() SlsaProvenanceV1ResponseOutput {
	return o.ApplyT(func(v InTotoSlsaProvenanceV1Response) SlsaProvenanceV1Response { return v.Predicate }).(SlsaProvenanceV1ResponseOutput)
}

func (o InTotoSlsaProvenanceV1ResponseOutput) PredicateType() pulumi.StringOutput {
	return o.ApplyT(func(v InTotoSlsaProvenanceV1Response) string { return v.PredicateType }).(pulumi.StringOutput)
}

func (o InTotoSlsaProvenanceV1ResponseOutput) Subject() SubjectResponseArrayOutput {
	return o.ApplyT(func(v InTotoSlsaProvenanceV1Response) []SubjectResponse { return v.Subject }).(SubjectResponseArrayOutput)
}

// InToto spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement
func (o InTotoSlsaProvenanceV1ResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v InTotoSlsaProvenanceV1Response) string { return v.Type }).(pulumi.StringOutput)
}

// This represents how a particular software package may be installed on a system.
type Installation struct {
	// Licenses that have been declared by the authors of the package.
	License *License `pulumi:"license"`
	// All of the places within the filesystem versions of this package have been found.
	Location []Location `pulumi:"location"`
}

// InstallationInput is an input type that accepts InstallationArgs and InstallationOutput values.
// You can construct a concrete instance of `InstallationInput` via:
//
//	InstallationArgs{...}
type InstallationInput interface {
	pulumi.Input

	ToInstallationOutput() InstallationOutput
	ToInstallationOutputWithContext(context.Context) InstallationOutput
}

// This represents how a particular software package may be installed on a system.
type InstallationArgs struct {
	// Licenses that have been declared by the authors of the package.
	License LicensePtrInput `pulumi:"license"`
	// All of the places within the filesystem versions of this package have been found.
	Location LocationArrayInput `pulumi:"location"`
}

func (InstallationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Installation)(nil)).Elem()
}

func (i InstallationArgs) ToInstallationOutput() InstallationOutput {
	return i.ToInstallationOutputWithContext(context.Background())
}

func (i InstallationArgs) ToInstallationOutputWithContext(ctx context.Context) InstallationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstallationOutput)
}

func (i InstallationArgs) ToInstallationPtrOutput() InstallationPtrOutput {
	return i.ToInstallationPtrOutputWithContext(context.Background())
}

func (i InstallationArgs) ToInstallationPtrOutputWithContext(ctx context.Context) InstallationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstallationOutput).ToInstallationPtrOutputWithContext(ctx)
}

// InstallationPtrInput is an input type that accepts InstallationArgs, InstallationPtr and InstallationPtrOutput values.
// You can construct a concrete instance of `InstallationPtrInput` via:
//
//	        InstallationArgs{...}
//
//	or:
//
//	        nil
type InstallationPtrInput interface {
	pulumi.Input

	ToInstallationPtrOutput() InstallationPtrOutput
	ToInstallationPtrOutputWithContext(context.Context) InstallationPtrOutput
}

type installationPtrType InstallationArgs

func InstallationPtr(v *InstallationArgs) InstallationPtrInput {
	return (*installationPtrType)(v)
}

func (*installationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Installation)(nil)).Elem()
}

func (i *installationPtrType) ToInstallationPtrOutput() InstallationPtrOutput {
	return i.ToInstallationPtrOutputWithContext(context.Background())
}

func (i *installationPtrType) ToInstallationPtrOutputWithContext(ctx context.Context) InstallationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstallationPtrOutput)
}

// This represents how a particular software package may be installed on a system.
type InstallationOutput struct{ *pulumi.OutputState }

func (InstallationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Installation)(nil)).Elem()
}

func (o InstallationOutput) ToInstallationOutput() InstallationOutput {
	return o
}

func (o InstallationOutput) ToInstallationOutputWithContext(ctx context.Context) InstallationOutput {
	return o
}

func (o InstallationOutput) ToInstallationPtrOutput() InstallationPtrOutput {
	return o.ToInstallationPtrOutputWithContext(context.Background())
}

func (o InstallationOutput) ToInstallationPtrOutputWithContext(ctx context.Context) InstallationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Installation) *Installation {
		return &v
	}).(InstallationPtrOutput)
}

// Licenses that have been declared by the authors of the package.
func (o InstallationOutput) License() LicensePtrOutput {
	return o.ApplyT(func(v Installation) *License { return v.License }).(LicensePtrOutput)
}

// All of the places within the filesystem versions of this package have been found.
func (o InstallationOutput) Location() LocationArrayOutput {
	return o.ApplyT(func(v Installation) []Location { return v.Location }).(LocationArrayOutput)
}

type InstallationPtrOutput struct{ *pulumi.OutputState }

func (InstallationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Installation)(nil)).Elem()
}

func (o InstallationPtrOutput) ToInstallationPtrOutput() InstallationPtrOutput {
	return o
}

func (o InstallationPtrOutput) ToInstallationPtrOutputWithContext(ctx context.Context) InstallationPtrOutput {
	return o
}

func (o InstallationPtrOutput) Elem() InstallationOutput {
	return o.ApplyT(func(v *Installation) Installation {
		if v != nil {
			return *v
		}
		var ret Installation
		return ret
	}).(InstallationOutput)
}

// Licenses that have been declared by the authors of the package.
func (o InstallationPtrOutput) License() LicensePtrOutput {
	return o.ApplyT(func(v *Installation) *License {
		if v == nil {
			return nil
		}
		return v.License
	}).(LicensePtrOutput)
}

// All of the places within the filesystem versions of this package have been found.
func (o InstallationPtrOutput) Location() LocationArrayOutput {
	return o.ApplyT(func(v *Installation) []Location {
		if v == nil {
			return nil
		}
		return v.Location
	}).(LocationArrayOutput)
}

// This represents how a particular software package may be installed on a system.
type InstallationResponse struct {
	// The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.
	Architecture string `pulumi:"architecture"`
	// The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages.
	CpeUri string `pulumi:"cpeUri"`
	// Licenses that have been declared by the authors of the package.
	License LicenseResponse `pulumi:"license"`
	// All of the places within the filesystem versions of this package have been found.
	Location []LocationResponse `pulumi:"location"`
	// The name of the installed package.
	Name string `pulumi:"name"`
	// The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
	PackageType string `pulumi:"packageType"`
	// The version of the package.
	Version VersionResponse `pulumi:"version"`
}

// This represents how a particular software package may be installed on a system.
type InstallationResponseOutput struct{ *pulumi.OutputState }

func (InstallationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstallationResponse)(nil)).Elem()
}

func (o InstallationResponseOutput) ToInstallationResponseOutput() InstallationResponseOutput {
	return o
}

func (o InstallationResponseOutput) ToInstallationResponseOutputWithContext(ctx context.Context) InstallationResponseOutput {
	return o
}

// The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.
func (o InstallationResponseOutput) Architecture() pulumi.StringOutput {
	return o.ApplyT(func(v InstallationResponse) string { return v.Architecture }).(pulumi.StringOutput)
}

// The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages.
func (o InstallationResponseOutput) CpeUri() pulumi.StringOutput {
	return o.ApplyT(func(v InstallationResponse) string { return v.CpeUri }).(pulumi.StringOutput)
}

// Licenses that have been declared by the authors of the package.
func (o InstallationResponseOutput) License() LicenseResponseOutput {
	return o.ApplyT(func(v InstallationResponse) LicenseResponse { return v.License }).(LicenseResponseOutput)
}

// All of the places within the filesystem versions of this package have been found.
func (o InstallationResponseOutput) Location() LocationResponseArrayOutput {
	return o.ApplyT(func(v InstallationResponse) []LocationResponse { return v.Location }).(LocationResponseArrayOutput)
}

// The name of the installed package.
func (o InstallationResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v InstallationResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
func (o InstallationResponseOutput) PackageType() pulumi.StringOutput {
	return o.ApplyT(func(v InstallationResponse) string { return v.PackageType }).(pulumi.StringOutput)
}

// The version of the package.
func (o InstallationResponseOutput) Version() VersionResponseOutput {
	return o.ApplyT(func(v InstallationResponse) VersionResponse { return v.Version }).(VersionResponseOutput)
}

// Justification provides the justification when the state of the assessment if NOT_AFFECTED.
type Justification struct {
	// Additional details on why this justification was chosen.
	Details *string `pulumi:"details"`
	// The justification type for this vulnerability.
	JustificationType *JustificationJustificationType `pulumi:"justificationType"`
}

// JustificationInput is an input type that accepts JustificationArgs and JustificationOutput values.
// You can construct a concrete instance of `JustificationInput` via:
//
//	JustificationArgs{...}
type JustificationInput interface {
	pulumi.Input

	ToJustificationOutput() JustificationOutput
	ToJustificationOutputWithContext(context.Context) JustificationOutput
}

// Justification provides the justification when the state of the assessment if NOT_AFFECTED.
type JustificationArgs struct {
	// Additional details on why this justification was chosen.
	Details pulumi.StringPtrInput `pulumi:"details"`
	// The justification type for this vulnerability.
	JustificationType JustificationJustificationTypePtrInput `pulumi:"justificationType"`
}

func (JustificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Justification)(nil)).Elem()
}

func (i JustificationArgs) ToJustificationOutput() JustificationOutput {
	return i.ToJustificationOutputWithContext(context.Background())
}

func (i JustificationArgs) ToJustificationOutputWithContext(ctx context.Context) JustificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JustificationOutput)
}

func (i JustificationArgs) ToJustificationPtrOutput() JustificationPtrOutput {
	return i.ToJustificationPtrOutputWithContext(context.Background())
}

func (i JustificationArgs) ToJustificationPtrOutputWithContext(ctx context.Context) JustificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JustificationOutput).ToJustificationPtrOutputWithContext(ctx)
}

// JustificationPtrInput is an input type that accepts JustificationArgs, JustificationPtr and JustificationPtrOutput values.
// You can construct a concrete instance of `JustificationPtrInput` via:
//
//	        JustificationArgs{...}
//
//	or:
//
//	        nil
type JustificationPtrInput interface {
	pulumi.Input

	ToJustificationPtrOutput() JustificationPtrOutput
	ToJustificationPtrOutputWithContext(context.Context) JustificationPtrOutput
}

type justificationPtrType JustificationArgs

func JustificationPtr(v *JustificationArgs) JustificationPtrInput {
	return (*justificationPtrType)(v)
}

func (*justificationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Justification)(nil)).Elem()
}

func (i *justificationPtrType) ToJustificationPtrOutput() JustificationPtrOutput {
	return i.ToJustificationPtrOutputWithContext(context.Background())
}

func (i *justificationPtrType) ToJustificationPtrOutputWithContext(ctx context.Context) JustificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JustificationPtrOutput)
}

// Justification provides the justification when the state of the assessment if NOT_AFFECTED.
type JustificationOutput struct{ *pulumi.OutputState }

func (JustificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Justification)(nil)).Elem()
}

func (o JustificationOutput) ToJustificationOutput() JustificationOutput {
	return o
}

func (o JustificationOutput) ToJustificationOutputWithContext(ctx context.Context) JustificationOutput {
	return o
}

func (o JustificationOutput) ToJustificationPtrOutput() JustificationPtrOutput {
	return o.ToJustificationPtrOutputWithContext(context.Background())
}

func (o JustificationOutput) ToJustificationPtrOutputWithContext(ctx context.Context) JustificationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Justification) *Justification {
		return &v
	}).(JustificationPtrOutput)
}

// Additional details on why this justification was chosen.
func (o JustificationOutput) Details() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Justification) *string { return v.Details }).(pulumi.StringPtrOutput)
}

// The justification type for this vulnerability.
func (o JustificationOutput) JustificationType() JustificationJustificationTypePtrOutput {
	return o.ApplyT(func(v Justification) *JustificationJustificationType { return v.JustificationType }).(JustificationJustificationTypePtrOutput)
}

type JustificationPtrOutput struct{ *pulumi.OutputState }

func (JustificationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Justification)(nil)).Elem()
}

func (o JustificationPtrOutput) ToJustificationPtrOutput() JustificationPtrOutput {
	return o
}

func (o JustificationPtrOutput) ToJustificationPtrOutputWithContext(ctx context.Context) JustificationPtrOutput {
	return o
}

func (o JustificationPtrOutput) Elem() JustificationOutput {
	return o.ApplyT(func(v *Justification) Justification {
		if v != nil {
			return *v
		}
		var ret Justification
		return ret
	}).(JustificationOutput)
}

// Additional details on why this justification was chosen.
func (o JustificationPtrOutput) Details() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Justification) *string {
		if v == nil {
			return nil
		}
		return v.Details
	}).(pulumi.StringPtrOutput)
}

// The justification type for this vulnerability.
func (o JustificationPtrOutput) JustificationType() JustificationJustificationTypePtrOutput {
	return o.ApplyT(func(v *Justification) *JustificationJustificationType {
		if v == nil {
			return nil
		}
		return v.JustificationType
	}).(JustificationJustificationTypePtrOutput)
}

// Justification provides the justification when the state of the assessment if NOT_AFFECTED.
type JustificationResponse struct {
	// Additional details on why this justification was chosen.
	Details string `pulumi:"details"`
	// The justification type for this vulnerability.
	JustificationType string `pulumi:"justificationType"`
}

// Justification provides the justification when the state of the assessment if NOT_AFFECTED.
type JustificationResponseOutput struct{ *pulumi.OutputState }

func (JustificationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JustificationResponse)(nil)).Elem()
}

func (o JustificationResponseOutput) ToJustificationResponseOutput() JustificationResponseOutput {
	return o
}

func (o JustificationResponseOutput) ToJustificationResponseOutputWithContext(ctx context.Context) JustificationResponseOutput {
	return o
}

// Additional details on why this justification was chosen.
func (o JustificationResponseOutput) Details() pulumi.StringOutput {
	return o.ApplyT(func(v JustificationResponse) string { return v.Details }).(pulumi.StringOutput)
}

// The justification type for this vulnerability.
func (o JustificationResponseOutput) JustificationType() pulumi.StringOutput {
	return o.ApplyT(func(v JustificationResponse) string { return v.JustificationType }).(pulumi.StringOutput)
}

type KnowledgeBase struct {
	// The KB name (generally of the form KB[0-9]+ i.e. KB123456).
	Name *string `pulumi:"name"`
	// A link to the KB in the Windows update catalog - https://www.catalog.update.microsoft.com/
	Url *string `pulumi:"url"`
}

// KnowledgeBaseInput is an input type that accepts KnowledgeBaseArgs and KnowledgeBaseOutput values.
// You can construct a concrete instance of `KnowledgeBaseInput` via:
//
//	KnowledgeBaseArgs{...}
type KnowledgeBaseInput interface {
	pulumi.Input

	ToKnowledgeBaseOutput() KnowledgeBaseOutput
	ToKnowledgeBaseOutputWithContext(context.Context) KnowledgeBaseOutput
}

type KnowledgeBaseArgs struct {
	// The KB name (generally of the form KB[0-9]+ i.e. KB123456).
	Name pulumi.StringPtrInput `pulumi:"name"`
	// A link to the KB in the Windows update catalog - https://www.catalog.update.microsoft.com/
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (KnowledgeBaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KnowledgeBase)(nil)).Elem()
}

func (i KnowledgeBaseArgs) ToKnowledgeBaseOutput() KnowledgeBaseOutput {
	return i.ToKnowledgeBaseOutputWithContext(context.Background())
}

func (i KnowledgeBaseArgs) ToKnowledgeBaseOutputWithContext(ctx context.Context) KnowledgeBaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KnowledgeBaseOutput)
}

// KnowledgeBaseArrayInput is an input type that accepts KnowledgeBaseArray and KnowledgeBaseArrayOutput values.
// You can construct a concrete instance of `KnowledgeBaseArrayInput` via:
//
//	KnowledgeBaseArray{ KnowledgeBaseArgs{...} }
type KnowledgeBaseArrayInput interface {
	pulumi.Input

	ToKnowledgeBaseArrayOutput() KnowledgeBaseArrayOutput
	ToKnowledgeBaseArrayOutputWithContext(context.Context) KnowledgeBaseArrayOutput
}

type KnowledgeBaseArray []KnowledgeBaseInput

func (KnowledgeBaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KnowledgeBase)(nil)).Elem()
}

func (i KnowledgeBaseArray) ToKnowledgeBaseArrayOutput() KnowledgeBaseArrayOutput {
	return i.ToKnowledgeBaseArrayOutputWithContext(context.Background())
}

func (i KnowledgeBaseArray) ToKnowledgeBaseArrayOutputWithContext(ctx context.Context) KnowledgeBaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KnowledgeBaseArrayOutput)
}

type KnowledgeBaseOutput struct{ *pulumi.OutputState }

func (KnowledgeBaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KnowledgeBase)(nil)).Elem()
}

func (o KnowledgeBaseOutput) ToKnowledgeBaseOutput() KnowledgeBaseOutput {
	return o
}

func (o KnowledgeBaseOutput) ToKnowledgeBaseOutputWithContext(ctx context.Context) KnowledgeBaseOutput {
	return o
}

// The KB name (generally of the form KB[0-9]+ i.e. KB123456).
func (o KnowledgeBaseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KnowledgeBase) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// A link to the KB in the Windows update catalog - https://www.catalog.update.microsoft.com/
func (o KnowledgeBaseOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KnowledgeBase) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type KnowledgeBaseArrayOutput struct{ *pulumi.OutputState }

func (KnowledgeBaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KnowledgeBase)(nil)).Elem()
}

func (o KnowledgeBaseArrayOutput) ToKnowledgeBaseArrayOutput() KnowledgeBaseArrayOutput {
	return o
}

func (o KnowledgeBaseArrayOutput) ToKnowledgeBaseArrayOutputWithContext(ctx context.Context) KnowledgeBaseArrayOutput {
	return o
}

func (o KnowledgeBaseArrayOutput) Index(i pulumi.IntInput) KnowledgeBaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KnowledgeBase {
		return vs[0].([]KnowledgeBase)[vs[1].(int)]
	}).(KnowledgeBaseOutput)
}

type KnowledgeBaseResponse struct {
	// The KB name (generally of the form KB[0-9]+ i.e. KB123456).
	Name string `pulumi:"name"`
	// A link to the KB in the Windows update catalog - https://www.catalog.update.microsoft.com/
	Url string `pulumi:"url"`
}

type KnowledgeBaseResponseOutput struct{ *pulumi.OutputState }

func (KnowledgeBaseResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KnowledgeBaseResponse)(nil)).Elem()
}

func (o KnowledgeBaseResponseOutput) ToKnowledgeBaseResponseOutput() KnowledgeBaseResponseOutput {
	return o
}

func (o KnowledgeBaseResponseOutput) ToKnowledgeBaseResponseOutputWithContext(ctx context.Context) KnowledgeBaseResponseOutput {
	return o
}

// The KB name (generally of the form KB[0-9]+ i.e. KB123456).
func (o KnowledgeBaseResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v KnowledgeBaseResponse) string { return v.Name }).(pulumi.StringOutput)
}

// A link to the KB in the Windows update catalog - https://www.catalog.update.microsoft.com/
func (o KnowledgeBaseResponseOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v KnowledgeBaseResponse) string { return v.Url }).(pulumi.StringOutput)
}

type KnowledgeBaseResponseArrayOutput struct{ *pulumi.OutputState }

func (KnowledgeBaseResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KnowledgeBaseResponse)(nil)).Elem()
}

func (o KnowledgeBaseResponseArrayOutput) ToKnowledgeBaseResponseArrayOutput() KnowledgeBaseResponseArrayOutput {
	return o
}

func (o KnowledgeBaseResponseArrayOutput) ToKnowledgeBaseResponseArrayOutputWithContext(ctx context.Context) KnowledgeBaseResponseArrayOutput {
	return o
}

func (o KnowledgeBaseResponseArrayOutput) Index(i pulumi.IntInput) KnowledgeBaseResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KnowledgeBaseResponse {
		return vs[0].([]KnowledgeBaseResponse)[vs[1].(int)]
	}).(KnowledgeBaseResponseOutput)
}

// Layer holds metadata specific to a layer of a Docker image.
type Layer struct {
	// The recovered arguments to the Dockerfile directive.
	Arguments *string `pulumi:"arguments"`
	// The recovered Dockerfile directive used to construct this layer.
	Directive LayerDirective `pulumi:"directive"`
}

// LayerInput is an input type that accepts LayerArgs and LayerOutput values.
// You can construct a concrete instance of `LayerInput` via:
//
//	LayerArgs{...}
type LayerInput interface {
	pulumi.Input

	ToLayerOutput() LayerOutput
	ToLayerOutputWithContext(context.Context) LayerOutput
}

// Layer holds metadata specific to a layer of a Docker image.
type LayerArgs struct {
	// The recovered arguments to the Dockerfile directive.
	Arguments pulumi.StringPtrInput `pulumi:"arguments"`
	// The recovered Dockerfile directive used to construct this layer.
	Directive LayerDirectiveInput `pulumi:"directive"`
}

func (LayerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Layer)(nil)).Elem()
}

func (i LayerArgs) ToLayerOutput() LayerOutput {
	return i.ToLayerOutputWithContext(context.Background())
}

func (i LayerArgs) ToLayerOutputWithContext(ctx context.Context) LayerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LayerOutput)
}

// LayerArrayInput is an input type that accepts LayerArray and LayerArrayOutput values.
// You can construct a concrete instance of `LayerArrayInput` via:
//
//	LayerArray{ LayerArgs{...} }
type LayerArrayInput interface {
	pulumi.Input

	ToLayerArrayOutput() LayerArrayOutput
	ToLayerArrayOutputWithContext(context.Context) LayerArrayOutput
}

type LayerArray []LayerInput

func (LayerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Layer)(nil)).Elem()
}

func (i LayerArray) ToLayerArrayOutput() LayerArrayOutput {
	return i.ToLayerArrayOutputWithContext(context.Background())
}

func (i LayerArray) ToLayerArrayOutputWithContext(ctx context.Context) LayerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LayerArrayOutput)
}

// Layer holds metadata specific to a layer of a Docker image.
type LayerOutput struct{ *pulumi.OutputState }

func (LayerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Layer)(nil)).Elem()
}

func (o LayerOutput) ToLayerOutput() LayerOutput {
	return o
}

func (o LayerOutput) ToLayerOutputWithContext(ctx context.Context) LayerOutput {
	return o
}

// The recovered arguments to the Dockerfile directive.
func (o LayerOutput) Arguments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Layer) *string { return v.Arguments }).(pulumi.StringPtrOutput)
}

// The recovered Dockerfile directive used to construct this layer.
func (o LayerOutput) Directive() LayerDirectiveOutput {
	return o.ApplyT(func(v Layer) LayerDirective { return v.Directive }).(LayerDirectiveOutput)
}

type LayerArrayOutput struct{ *pulumi.OutputState }

func (LayerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Layer)(nil)).Elem()
}

func (o LayerArrayOutput) ToLayerArrayOutput() LayerArrayOutput {
	return o
}

func (o LayerArrayOutput) ToLayerArrayOutputWithContext(ctx context.Context) LayerArrayOutput {
	return o
}

func (o LayerArrayOutput) Index(i pulumi.IntInput) LayerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Layer {
		return vs[0].([]Layer)[vs[1].(int)]
	}).(LayerOutput)
}

// Layer holds metadata specific to a layer of a Docker image.
type LayerResponse struct {
	// The recovered arguments to the Dockerfile directive.
	Arguments string `pulumi:"arguments"`
	// The recovered Dockerfile directive used to construct this layer.
	Directive string `pulumi:"directive"`
}

// Layer holds metadata specific to a layer of a Docker image.
type LayerResponseOutput struct{ *pulumi.OutputState }

func (LayerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LayerResponse)(nil)).Elem()
}

func (o LayerResponseOutput) ToLayerResponseOutput() LayerResponseOutput {
	return o
}

func (o LayerResponseOutput) ToLayerResponseOutputWithContext(ctx context.Context) LayerResponseOutput {
	return o
}

// The recovered arguments to the Dockerfile directive.
func (o LayerResponseOutput) Arguments() pulumi.StringOutput {
	return o.ApplyT(func(v LayerResponse) string { return v.Arguments }).(pulumi.StringOutput)
}

// The recovered Dockerfile directive used to construct this layer.
func (o LayerResponseOutput) Directive() pulumi.StringOutput {
	return o.ApplyT(func(v LayerResponse) string { return v.Directive }).(pulumi.StringOutput)
}

type LayerResponseArrayOutput struct{ *pulumi.OutputState }

func (LayerResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LayerResponse)(nil)).Elem()
}

func (o LayerResponseArrayOutput) ToLayerResponseArrayOutput() LayerResponseArrayOutput {
	return o
}

func (o LayerResponseArrayOutput) ToLayerResponseArrayOutputWithContext(ctx context.Context) LayerResponseArrayOutput {
	return o
}

func (o LayerResponseArrayOutput) Index(i pulumi.IntInput) LayerResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LayerResponse {
		return vs[0].([]LayerResponse)[vs[1].(int)]
	}).(LayerResponseOutput)
}

// License information.
type License struct {
	// Comments
	Comments *string `pulumi:"comments"`
	// Often a single license can be used to represent the licensing terms. Sometimes it is necessary to include a choice of one or more licenses or some combination of license identifiers. Examples: "LGPL-2.1-only OR MIT", "LGPL-2.1-only AND MIT", "GPL-2.0-or-later WITH Bison-exception-2.2".
	Expression *string `pulumi:"expression"`
}

// LicenseInput is an input type that accepts LicenseArgs and LicenseOutput values.
// You can construct a concrete instance of `LicenseInput` via:
//
//	LicenseArgs{...}
type LicenseInput interface {
	pulumi.Input

	ToLicenseOutput() LicenseOutput
	ToLicenseOutputWithContext(context.Context) LicenseOutput
}

// License information.
type LicenseArgs struct {
	// Comments
	Comments pulumi.StringPtrInput `pulumi:"comments"`
	// Often a single license can be used to represent the licensing terms. Sometimes it is necessary to include a choice of one or more licenses or some combination of license identifiers. Examples: "LGPL-2.1-only OR MIT", "LGPL-2.1-only AND MIT", "GPL-2.0-or-later WITH Bison-exception-2.2".
	Expression pulumi.StringPtrInput `pulumi:"expression"`
}

func (LicenseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*License)(nil)).Elem()
}

func (i LicenseArgs) ToLicenseOutput() LicenseOutput {
	return i.ToLicenseOutputWithContext(context.Background())
}

func (i LicenseArgs) ToLicenseOutputWithContext(ctx context.Context) LicenseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseOutput)
}

func (i LicenseArgs) ToLicensePtrOutput() LicensePtrOutput {
	return i.ToLicensePtrOutputWithContext(context.Background())
}

func (i LicenseArgs) ToLicensePtrOutputWithContext(ctx context.Context) LicensePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseOutput).ToLicensePtrOutputWithContext(ctx)
}

// LicensePtrInput is an input type that accepts LicenseArgs, LicensePtr and LicensePtrOutput values.
// You can construct a concrete instance of `LicensePtrInput` via:
//
//	        LicenseArgs{...}
//
//	or:
//
//	        nil
type LicensePtrInput interface {
	pulumi.Input

	ToLicensePtrOutput() LicensePtrOutput
	ToLicensePtrOutputWithContext(context.Context) LicensePtrOutput
}

type licensePtrType LicenseArgs

func LicensePtr(v *LicenseArgs) LicensePtrInput {
	return (*licensePtrType)(v)
}

func (*licensePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**License)(nil)).Elem()
}

func (i *licensePtrType) ToLicensePtrOutput() LicensePtrOutput {
	return i.ToLicensePtrOutputWithContext(context.Background())
}

func (i *licensePtrType) ToLicensePtrOutputWithContext(ctx context.Context) LicensePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicensePtrOutput)
}

// License information.
type LicenseOutput struct{ *pulumi.OutputState }

func (LicenseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*License)(nil)).Elem()
}

func (o LicenseOutput) ToLicenseOutput() LicenseOutput {
	return o
}

func (o LicenseOutput) ToLicenseOutputWithContext(ctx context.Context) LicenseOutput {
	return o
}

func (o LicenseOutput) ToLicensePtrOutput() LicensePtrOutput {
	return o.ToLicensePtrOutputWithContext(context.Background())
}

func (o LicenseOutput) ToLicensePtrOutputWithContext(ctx context.Context) LicensePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v License) *License {
		return &v
	}).(LicensePtrOutput)
}

// Comments
func (o LicenseOutput) Comments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v License) *string { return v.Comments }).(pulumi.StringPtrOutput)
}

// Often a single license can be used to represent the licensing terms. Sometimes it is necessary to include a choice of one or more licenses or some combination of license identifiers. Examples: "LGPL-2.1-only OR MIT", "LGPL-2.1-only AND MIT", "GPL-2.0-or-later WITH Bison-exception-2.2".
func (o LicenseOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v License) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

type LicensePtrOutput struct{ *pulumi.OutputState }

func (LicensePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**License)(nil)).Elem()
}

func (o LicensePtrOutput) ToLicensePtrOutput() LicensePtrOutput {
	return o
}

func (o LicensePtrOutput) ToLicensePtrOutputWithContext(ctx context.Context) LicensePtrOutput {
	return o
}

func (o LicensePtrOutput) Elem() LicenseOutput {
	return o.ApplyT(func(v *License) License {
		if v != nil {
			return *v
		}
		var ret License
		return ret
	}).(LicenseOutput)
}

// Comments
func (o LicensePtrOutput) Comments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *License) *string {
		if v == nil {
			return nil
		}
		return v.Comments
	}).(pulumi.StringPtrOutput)
}

// Often a single license can be used to represent the licensing terms. Sometimes it is necessary to include a choice of one or more licenses or some combination of license identifiers. Examples: "LGPL-2.1-only OR MIT", "LGPL-2.1-only AND MIT", "GPL-2.0-or-later WITH Bison-exception-2.2".
func (o LicensePtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *License) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// License information.
type LicenseResponse struct {
	// Comments
	Comments string `pulumi:"comments"`
	// Often a single license can be used to represent the licensing terms. Sometimes it is necessary to include a choice of one or more licenses or some combination of license identifiers. Examples: "LGPL-2.1-only OR MIT", "LGPL-2.1-only AND MIT", "GPL-2.0-or-later WITH Bison-exception-2.2".
	Expression string `pulumi:"expression"`
}

// License information.
type LicenseResponseOutput struct{ *pulumi.OutputState }

func (LicenseResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LicenseResponse)(nil)).Elem()
}

func (o LicenseResponseOutput) ToLicenseResponseOutput() LicenseResponseOutput {
	return o
}

func (o LicenseResponseOutput) ToLicenseResponseOutputWithContext(ctx context.Context) LicenseResponseOutput {
	return o
}

// Comments
func (o LicenseResponseOutput) Comments() pulumi.StringOutput {
	return o.ApplyT(func(v LicenseResponse) string { return v.Comments }).(pulumi.StringOutput)
}

// Often a single license can be used to represent the licensing terms. Sometimes it is necessary to include a choice of one or more licenses or some combination of license identifiers. Examples: "LGPL-2.1-only OR MIT", "LGPL-2.1-only AND MIT", "GPL-2.0-or-later WITH Bison-exception-2.2".
func (o LicenseResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v LicenseResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// This corresponds to an in-toto link.
type Link struct {
	// ByProducts are data generated as part of a software supply chain step, but are not the actual result of the step.
	Byproducts *ByProducts `pulumi:"byproducts"`
	// This field contains the full command executed for the step. This can also be empty if links are generated for operations that aren't directly mapped to a specific command. Each term in the command is an independent string in the list. An example of a command in the in-toto metadata field is: "command": ["git", "clone", "https://github.com/in-toto/demo-project.git"]
	Command []string `pulumi:"command"`
	// This is a field that can be used to capture information about the environment. It is suggested for this field to contain information that details environment variables, filesystem information, and the present working directory. The recommended structure of this field is: "environment": { "custom_values": { "variables": "", "filesystem": "", "workdir": "", "": "..." } }
	Environment *Environment `pulumi:"environment"`
	// Materials are the supply chain artifacts that go into the step and are used for the operation performed. The key of the map is the path of the artifact and the structure contains the recorded hash information. An example is: "materials": [ { "resource_uri": "foo/bar", "hashes": { "sha256": "ebebf...", : } } ]
	Materials []GrafeasV1beta1IntotoArtifact `pulumi:"materials"`
	// Products are the supply chain artifacts generated as a result of the step. The structure is identical to that of materials.
	Products []GrafeasV1beta1IntotoArtifact `pulumi:"products"`
}

// LinkInput is an input type that accepts LinkArgs and LinkOutput values.
// You can construct a concrete instance of `LinkInput` via:
//
//	LinkArgs{...}
type LinkInput interface {
	pulumi.Input

	ToLinkOutput() LinkOutput
	ToLinkOutputWithContext(context.Context) LinkOutput
}

// This corresponds to an in-toto link.
type LinkArgs struct {
	// ByProducts are data generated as part of a software supply chain step, but are not the actual result of the step.
	Byproducts ByProductsPtrInput `pulumi:"byproducts"`
	// This field contains the full command executed for the step. This can also be empty if links are generated for operations that aren't directly mapped to a specific command. Each term in the command is an independent string in the list. An example of a command in the in-toto metadata field is: "command": ["git", "clone", "https://github.com/in-toto/demo-project.git"]
	Command pulumi.StringArrayInput `pulumi:"command"`
	// This is a field that can be used to capture information about the environment. It is suggested for this field to contain information that details environment variables, filesystem information, and the present working directory. The recommended structure of this field is: "environment": { "custom_values": { "variables": "", "filesystem": "", "workdir": "", "": "..." } }
	Environment EnvironmentPtrInput `pulumi:"environment"`
	// Materials are the supply chain artifacts that go into the step and are used for the operation performed. The key of the map is the path of the artifact and the structure contains the recorded hash information. An example is: "materials": [ { "resource_uri": "foo/bar", "hashes": { "sha256": "ebebf...", : } } ]
	Materials GrafeasV1beta1IntotoArtifactArrayInput `pulumi:"materials"`
	// Products are the supply chain artifacts generated as a result of the step. The structure is identical to that of materials.
	Products GrafeasV1beta1IntotoArtifactArrayInput `pulumi:"products"`
}

func (LinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Link)(nil)).Elem()
}

func (i LinkArgs) ToLinkOutput() LinkOutput {
	return i.ToLinkOutputWithContext(context.Background())
}

func (i LinkArgs) ToLinkOutputWithContext(ctx context.Context) LinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkOutput)
}

func (i LinkArgs) ToLinkPtrOutput() LinkPtrOutput {
	return i.ToLinkPtrOutputWithContext(context.Background())
}

func (i LinkArgs) ToLinkPtrOutputWithContext(ctx context.Context) LinkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkOutput).ToLinkPtrOutputWithContext(ctx)
}

// LinkPtrInput is an input type that accepts LinkArgs, LinkPtr and LinkPtrOutput values.
// You can construct a concrete instance of `LinkPtrInput` via:
//
//	        LinkArgs{...}
//
//	or:
//
//	        nil
type LinkPtrInput interface {
	pulumi.Input

	ToLinkPtrOutput() LinkPtrOutput
	ToLinkPtrOutputWithContext(context.Context) LinkPtrOutput
}

type linkPtrType LinkArgs

func LinkPtr(v *LinkArgs) LinkPtrInput {
	return (*linkPtrType)(v)
}

func (*linkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Link)(nil)).Elem()
}

func (i *linkPtrType) ToLinkPtrOutput() LinkPtrOutput {
	return i.ToLinkPtrOutputWithContext(context.Background())
}

func (i *linkPtrType) ToLinkPtrOutputWithContext(ctx context.Context) LinkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkPtrOutput)
}

// This corresponds to an in-toto link.
type LinkOutput struct{ *pulumi.OutputState }

func (LinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Link)(nil)).Elem()
}

func (o LinkOutput) ToLinkOutput() LinkOutput {
	return o
}

func (o LinkOutput) ToLinkOutputWithContext(ctx context.Context) LinkOutput {
	return o
}

func (o LinkOutput) ToLinkPtrOutput() LinkPtrOutput {
	return o.ToLinkPtrOutputWithContext(context.Background())
}

func (o LinkOutput) ToLinkPtrOutputWithContext(ctx context.Context) LinkPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Link) *Link {
		return &v
	}).(LinkPtrOutput)
}

// ByProducts are data generated as part of a software supply chain step, but are not the actual result of the step.
func (o LinkOutput) Byproducts() ByProductsPtrOutput {
	return o.ApplyT(func(v Link) *ByProducts { return v.Byproducts }).(ByProductsPtrOutput)
}

// This field contains the full command executed for the step. This can also be empty if links are generated for operations that aren't directly mapped to a specific command. Each term in the command is an independent string in the list. An example of a command in the in-toto metadata field is: "command": ["git", "clone", "https://github.com/in-toto/demo-project.git"]
func (o LinkOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Link) []string { return v.Command }).(pulumi.StringArrayOutput)
}

// This is a field that can be used to capture information about the environment. It is suggested for this field to contain information that details environment variables, filesystem information, and the present working directory. The recommended structure of this field is: "environment": { "custom_values": { "variables": "", "filesystem": "", "workdir": "", "": "..." } }
func (o LinkOutput) Environment() EnvironmentPtrOutput {
	return o.ApplyT(func(v Link) *Environment { return v.Environment }).(EnvironmentPtrOutput)
}

// Materials are the supply chain artifacts that go into the step and are used for the operation performed. The key of the map is the path of the artifact and the structure contains the recorded hash information. An example is: "materials": [ { "resource_uri": "foo/bar", "hashes": { "sha256": "ebebf...", : } } ]
func (o LinkOutput) Materials() GrafeasV1beta1IntotoArtifactArrayOutput {
	return o.ApplyT(func(v Link) []GrafeasV1beta1IntotoArtifact { return v.Materials }).(GrafeasV1beta1IntotoArtifactArrayOutput)
}

// Products are the supply chain artifacts generated as a result of the step. The structure is identical to that of materials.
func (o LinkOutput) Products() GrafeasV1beta1IntotoArtifactArrayOutput {
	return o.ApplyT(func(v Link) []GrafeasV1beta1IntotoArtifact { return v.Products }).(GrafeasV1beta1IntotoArtifactArrayOutput)
}

type LinkPtrOutput struct{ *pulumi.OutputState }

func (LinkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Link)(nil)).Elem()
}

func (o LinkPtrOutput) ToLinkPtrOutput() LinkPtrOutput {
	return o
}

func (o LinkPtrOutput) ToLinkPtrOutputWithContext(ctx context.Context) LinkPtrOutput {
	return o
}

func (o LinkPtrOutput) Elem() LinkOutput {
	return o.ApplyT(func(v *Link) Link {
		if v != nil {
			return *v
		}
		var ret Link
		return ret
	}).(LinkOutput)
}

// ByProducts are data generated as part of a software supply chain step, but are not the actual result of the step.
func (o LinkPtrOutput) Byproducts() ByProductsPtrOutput {
	return o.ApplyT(func(v *Link) *ByProducts {
		if v == nil {
			return nil
		}
		return v.Byproducts
	}).(ByProductsPtrOutput)
}

// This field contains the full command executed for the step. This can also be empty if links are generated for operations that aren't directly mapped to a specific command. Each term in the command is an independent string in the list. An example of a command in the in-toto metadata field is: "command": ["git", "clone", "https://github.com/in-toto/demo-project.git"]
func (o LinkPtrOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Link) []string {
		if v == nil {
			return nil
		}
		return v.Command
	}).(pulumi.StringArrayOutput)
}

// This is a field that can be used to capture information about the environment. It is suggested for this field to contain information that details environment variables, filesystem information, and the present working directory. The recommended structure of this field is: "environment": { "custom_values": { "variables": "", "filesystem": "", "workdir": "", "": "..." } }
func (o LinkPtrOutput) Environment() EnvironmentPtrOutput {
	return o.ApplyT(func(v *Link) *Environment {
		if v == nil {
			return nil
		}
		return v.Environment
	}).(EnvironmentPtrOutput)
}

// Materials are the supply chain artifacts that go into the step and are used for the operation performed. The key of the map is the path of the artifact and the structure contains the recorded hash information. An example is: "materials": [ { "resource_uri": "foo/bar", "hashes": { "sha256": "ebebf...", : } } ]
func (o LinkPtrOutput) Materials() GrafeasV1beta1IntotoArtifactArrayOutput {
	return o.ApplyT(func(v *Link) []GrafeasV1beta1IntotoArtifact {
		if v == nil {
			return nil
		}
		return v.Materials
	}).(GrafeasV1beta1IntotoArtifactArrayOutput)
}

// Products are the supply chain artifacts generated as a result of the step. The structure is identical to that of materials.
func (o LinkPtrOutput) Products() GrafeasV1beta1IntotoArtifactArrayOutput {
	return o.ApplyT(func(v *Link) []GrafeasV1beta1IntotoArtifact {
		if v == nil {
			return nil
		}
		return v.Products
	}).(GrafeasV1beta1IntotoArtifactArrayOutput)
}

// This corresponds to an in-toto link.
type LinkResponse struct {
	// ByProducts are data generated as part of a software supply chain step, but are not the actual result of the step.
	Byproducts ByProductsResponse `pulumi:"byproducts"`
	// This field contains the full command executed for the step. This can also be empty if links are generated for operations that aren't directly mapped to a specific command. Each term in the command is an independent string in the list. An example of a command in the in-toto metadata field is: "command": ["git", "clone", "https://github.com/in-toto/demo-project.git"]
	Command []string `pulumi:"command"`
	// This is a field that can be used to capture information about the environment. It is suggested for this field to contain information that details environment variables, filesystem information, and the present working directory. The recommended structure of this field is: "environment": { "custom_values": { "variables": "", "filesystem": "", "workdir": "", "": "..." } }
	Environment EnvironmentResponse `pulumi:"environment"`
	// Materials are the supply chain artifacts that go into the step and are used for the operation performed. The key of the map is the path of the artifact and the structure contains the recorded hash information. An example is: "materials": [ { "resource_uri": "foo/bar", "hashes": { "sha256": "ebebf...", : } } ]
	Materials []GrafeasV1beta1IntotoArtifactResponse `pulumi:"materials"`
	// Products are the supply chain artifacts generated as a result of the step. The structure is identical to that of materials.
	Products []GrafeasV1beta1IntotoArtifactResponse `pulumi:"products"`
}

// This corresponds to an in-toto link.
type LinkResponseOutput struct{ *pulumi.OutputState }

func (LinkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkResponse)(nil)).Elem()
}

func (o LinkResponseOutput) ToLinkResponseOutput() LinkResponseOutput {
	return o
}

func (o LinkResponseOutput) ToLinkResponseOutputWithContext(ctx context.Context) LinkResponseOutput {
	return o
}

// ByProducts are data generated as part of a software supply chain step, but are not the actual result of the step.
func (o LinkResponseOutput) Byproducts() ByProductsResponseOutput {
	return o.ApplyT(func(v LinkResponse) ByProductsResponse { return v.Byproducts }).(ByProductsResponseOutput)
}

// This field contains the full command executed for the step. This can also be empty if links are generated for operations that aren't directly mapped to a specific command. Each term in the command is an independent string in the list. An example of a command in the in-toto metadata field is: "command": ["git", "clone", "https://github.com/in-toto/demo-project.git"]
func (o LinkResponseOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LinkResponse) []string { return v.Command }).(pulumi.StringArrayOutput)
}

// This is a field that can be used to capture information about the environment. It is suggested for this field to contain information that details environment variables, filesystem information, and the present working directory. The recommended structure of this field is: "environment": { "custom_values": { "variables": "", "filesystem": "", "workdir": "", "": "..." } }
func (o LinkResponseOutput) Environment() EnvironmentResponseOutput {
	return o.ApplyT(func(v LinkResponse) EnvironmentResponse { return v.Environment }).(EnvironmentResponseOutput)
}

// Materials are the supply chain artifacts that go into the step and are used for the operation performed. The key of the map is the path of the artifact and the structure contains the recorded hash information. An example is: "materials": [ { "resource_uri": "foo/bar", "hashes": { "sha256": "ebebf...", : } } ]
func (o LinkResponseOutput) Materials() GrafeasV1beta1IntotoArtifactResponseArrayOutput {
	return o.ApplyT(func(v LinkResponse) []GrafeasV1beta1IntotoArtifactResponse { return v.Materials }).(GrafeasV1beta1IntotoArtifactResponseArrayOutput)
}

// Products are the supply chain artifacts generated as a result of the step. The structure is identical to that of materials.
func (o LinkResponseOutput) Products() GrafeasV1beta1IntotoArtifactResponseArrayOutput {
	return o.ApplyT(func(v LinkResponse) []GrafeasV1beta1IntotoArtifactResponse { return v.Products }).(GrafeasV1beta1IntotoArtifactResponseArrayOutput)
}

// An occurrence of a particular package installation found within a system's filesystem. E.g., glibc was found in `/var/lib/dpkg/status`.
type Location struct {
	// Deprecated. The CPE URI in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
	//
	// Deprecated: Deprecated. The CPE URI in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
	CpeUri *string `pulumi:"cpeUri"`
	// The path from which we gathered that this package/version is installed.
	Path *string `pulumi:"path"`
	// Deprecated. The version installed at this location.
	//
	// Deprecated: Deprecated. The version installed at this location.
	Version *Version `pulumi:"version"`
}

// LocationInput is an input type that accepts LocationArgs and LocationOutput values.
// You can construct a concrete instance of `LocationInput` via:
//
//	LocationArgs{...}
type LocationInput interface {
	pulumi.Input

	ToLocationOutput() LocationOutput
	ToLocationOutputWithContext(context.Context) LocationOutput
}

// An occurrence of a particular package installation found within a system's filesystem. E.g., glibc was found in `/var/lib/dpkg/status`.
type LocationArgs struct {
	// Deprecated. The CPE URI in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
	//
	// Deprecated: Deprecated. The CPE URI in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
	CpeUri pulumi.StringPtrInput `pulumi:"cpeUri"`
	// The path from which we gathered that this package/version is installed.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Deprecated. The version installed at this location.
	//
	// Deprecated: Deprecated. The version installed at this location.
	Version VersionPtrInput `pulumi:"version"`
}

func (LocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Location)(nil)).Elem()
}

func (i LocationArgs) ToLocationOutput() LocationOutput {
	return i.ToLocationOutputWithContext(context.Background())
}

func (i LocationArgs) ToLocationOutputWithContext(ctx context.Context) LocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationOutput)
}

// LocationArrayInput is an input type that accepts LocationArray and LocationArrayOutput values.
// You can construct a concrete instance of `LocationArrayInput` via:
//
//	LocationArray{ LocationArgs{...} }
type LocationArrayInput interface {
	pulumi.Input

	ToLocationArrayOutput() LocationArrayOutput
	ToLocationArrayOutputWithContext(context.Context) LocationArrayOutput
}

type LocationArray []LocationInput

func (LocationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Location)(nil)).Elem()
}

func (i LocationArray) ToLocationArrayOutput() LocationArrayOutput {
	return i.ToLocationArrayOutputWithContext(context.Background())
}

func (i LocationArray) ToLocationArrayOutputWithContext(ctx context.Context) LocationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationArrayOutput)
}

// An occurrence of a particular package installation found within a system's filesystem. E.g., glibc was found in `/var/lib/dpkg/status`.
type LocationOutput struct{ *pulumi.OutputState }

func (LocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Location)(nil)).Elem()
}

func (o LocationOutput) ToLocationOutput() LocationOutput {
	return o
}

func (o LocationOutput) ToLocationOutputWithContext(ctx context.Context) LocationOutput {
	return o
}

// Deprecated. The CPE URI in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
//
// Deprecated: Deprecated. The CPE URI in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
func (o LocationOutput) CpeUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Location) *string { return v.CpeUri }).(pulumi.StringPtrOutput)
}

// The path from which we gathered that this package/version is installed.
func (o LocationOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Location) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Deprecated. The version installed at this location.
//
// Deprecated: Deprecated. The version installed at this location.
func (o LocationOutput) Version() VersionPtrOutput {
	return o.ApplyT(func(v Location) *Version { return v.Version }).(VersionPtrOutput)
}

type LocationArrayOutput struct{ *pulumi.OutputState }

func (LocationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Location)(nil)).Elem()
}

func (o LocationArrayOutput) ToLocationArrayOutput() LocationArrayOutput {
	return o
}

func (o LocationArrayOutput) ToLocationArrayOutputWithContext(ctx context.Context) LocationArrayOutput {
	return o
}

func (o LocationArrayOutput) Index(i pulumi.IntInput) LocationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Location {
		return vs[0].([]Location)[vs[1].(int)]
	}).(LocationOutput)
}

// An occurrence of a particular package installation found within a system's filesystem. E.g., glibc was found in `/var/lib/dpkg/status`.
type LocationResponse struct {
	// Deprecated. The CPE URI in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
	//
	// Deprecated: Deprecated. The CPE URI in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
	CpeUri string `pulumi:"cpeUri"`
	// The path from which we gathered that this package/version is installed.
	Path string `pulumi:"path"`
	// Deprecated. The version installed at this location.
	//
	// Deprecated: Deprecated. The version installed at this location.
	Version VersionResponse `pulumi:"version"`
}

// An occurrence of a particular package installation found within a system's filesystem. E.g., glibc was found in `/var/lib/dpkg/status`.
type LocationResponseOutput struct{ *pulumi.OutputState }

func (LocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationResponse)(nil)).Elem()
}

func (o LocationResponseOutput) ToLocationResponseOutput() LocationResponseOutput {
	return o
}

func (o LocationResponseOutput) ToLocationResponseOutputWithContext(ctx context.Context) LocationResponseOutput {
	return o
}

// Deprecated. The CPE URI in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
//
// Deprecated: Deprecated. The CPE URI in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
func (o LocationResponseOutput) CpeUri() pulumi.StringOutput {
	return o.ApplyT(func(v LocationResponse) string { return v.CpeUri }).(pulumi.StringOutput)
}

// The path from which we gathered that this package/version is installed.
func (o LocationResponseOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v LocationResponse) string { return v.Path }).(pulumi.StringOutput)
}

// Deprecated. The version installed at this location.
//
// Deprecated: Deprecated. The version installed at this location.
func (o LocationResponseOutput) Version() VersionResponseOutput {
	return o.ApplyT(func(v LocationResponse) VersionResponse { return v.Version }).(VersionResponseOutput)
}

type LocationResponseArrayOutput struct{ *pulumi.OutputState }

func (LocationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LocationResponse)(nil)).Elem()
}

func (o LocationResponseArrayOutput) ToLocationResponseArrayOutput() LocationResponseArrayOutput {
	return o
}

func (o LocationResponseArrayOutput) ToLocationResponseArrayOutputWithContext(ctx context.Context) LocationResponseArrayOutput {
	return o
}

func (o LocationResponseArrayOutput) Index(i pulumi.IntInput) LocationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LocationResponse {
		return vs[0].([]LocationResponse)[vs[1].(int)]
	}).(LocationResponseOutput)
}

// Package represents a particular package version.
type Package struct {
	// The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.
	Architecture *PackageArchitecture `pulumi:"architecture"`
	// The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages.
	CpeUri *string `pulumi:"cpeUri"`
	// The description of this package.
	Description *string `pulumi:"description"`
	// Hash value, typically a file digest, that allows unique identification a specific package.
	Digest []Digest `pulumi:"digest"`
	// The various channels by which a package is distributed.
	Distribution []Distribution `pulumi:"distribution"`
	// Licenses that have been declared by the authors of the package.
	License *License `pulumi:"license"`
	// A freeform text denoting the maintainer of this package.
	Maintainer *string `pulumi:"maintainer"`
	// Immutable. The name of the package.
	Name string `pulumi:"name"`
	// The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
	PackageType *string `pulumi:"packageType"`
	// The homepage for this package.
	Url *string `pulumi:"url"`
	// The version of the package.
	Version *Version `pulumi:"version"`
}

// PackageInput is an input type that accepts PackageArgs and PackageOutput values.
// You can construct a concrete instance of `PackageInput` via:
//
//	PackageArgs{...}
type PackageInput interface {
	pulumi.Input

	ToPackageOutput() PackageOutput
	ToPackageOutputWithContext(context.Context) PackageOutput
}

// Package represents a particular package version.
type PackageArgs struct {
	// The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.
	Architecture PackageArchitecturePtrInput `pulumi:"architecture"`
	// The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages.
	CpeUri pulumi.StringPtrInput `pulumi:"cpeUri"`
	// The description of this package.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Hash value, typically a file digest, that allows unique identification a specific package.
	Digest DigestArrayInput `pulumi:"digest"`
	// The various channels by which a package is distributed.
	Distribution DistributionArrayInput `pulumi:"distribution"`
	// Licenses that have been declared by the authors of the package.
	License LicensePtrInput `pulumi:"license"`
	// A freeform text denoting the maintainer of this package.
	Maintainer pulumi.StringPtrInput `pulumi:"maintainer"`
	// Immutable. The name of the package.
	Name pulumi.StringInput `pulumi:"name"`
	// The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
	PackageType pulumi.StringPtrInput `pulumi:"packageType"`
	// The homepage for this package.
	Url pulumi.StringPtrInput `pulumi:"url"`
	// The version of the package.
	Version VersionPtrInput `pulumi:"version"`
}

func (PackageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Package)(nil)).Elem()
}

func (i PackageArgs) ToPackageOutput() PackageOutput {
	return i.ToPackageOutputWithContext(context.Background())
}

func (i PackageArgs) ToPackageOutputWithContext(ctx context.Context) PackageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageOutput)
}

func (i PackageArgs) ToPackagePtrOutput() PackagePtrOutput {
	return i.ToPackagePtrOutputWithContext(context.Background())
}

func (i PackageArgs) ToPackagePtrOutputWithContext(ctx context.Context) PackagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageOutput).ToPackagePtrOutputWithContext(ctx)
}

// PackagePtrInput is an input type that accepts PackageArgs, PackagePtr and PackagePtrOutput values.
// You can construct a concrete instance of `PackagePtrInput` via:
//
//	        PackageArgs{...}
//
//	or:
//
//	        nil
type PackagePtrInput interface {
	pulumi.Input

	ToPackagePtrOutput() PackagePtrOutput
	ToPackagePtrOutputWithContext(context.Context) PackagePtrOutput
}

type packagePtrType PackageArgs

func PackagePtr(v *PackageArgs) PackagePtrInput {
	return (*packagePtrType)(v)
}

func (*packagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Package)(nil)).Elem()
}

func (i *packagePtrType) ToPackagePtrOutput() PackagePtrOutput {
	return i.ToPackagePtrOutputWithContext(context.Background())
}

func (i *packagePtrType) ToPackagePtrOutputWithContext(ctx context.Context) PackagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackagePtrOutput)
}

// Package represents a particular package version.
type PackageOutput struct{ *pulumi.OutputState }

func (PackageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Package)(nil)).Elem()
}

func (o PackageOutput) ToPackageOutput() PackageOutput {
	return o
}

func (o PackageOutput) ToPackageOutputWithContext(ctx context.Context) PackageOutput {
	return o
}

func (o PackageOutput) ToPackagePtrOutput() PackagePtrOutput {
	return o.ToPackagePtrOutputWithContext(context.Background())
}

func (o PackageOutput) ToPackagePtrOutputWithContext(ctx context.Context) PackagePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Package) *Package {
		return &v
	}).(PackagePtrOutput)
}

// The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.
func (o PackageOutput) Architecture() PackageArchitecturePtrOutput {
	return o.ApplyT(func(v Package) *PackageArchitecture { return v.Architecture }).(PackageArchitecturePtrOutput)
}

// The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages.
func (o PackageOutput) CpeUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Package) *string { return v.CpeUri }).(pulumi.StringPtrOutput)
}

// The description of this package.
func (o PackageOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Package) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Hash value, typically a file digest, that allows unique identification a specific package.
func (o PackageOutput) Digest() DigestArrayOutput {
	return o.ApplyT(func(v Package) []Digest { return v.Digest }).(DigestArrayOutput)
}

// The various channels by which a package is distributed.
func (o PackageOutput) Distribution() DistributionArrayOutput {
	return o.ApplyT(func(v Package) []Distribution { return v.Distribution }).(DistributionArrayOutput)
}

// Licenses that have been declared by the authors of the package.
func (o PackageOutput) License() LicensePtrOutput {
	return o.ApplyT(func(v Package) *License { return v.License }).(LicensePtrOutput)
}

// A freeform text denoting the maintainer of this package.
func (o PackageOutput) Maintainer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Package) *string { return v.Maintainer }).(pulumi.StringPtrOutput)
}

// Immutable. The name of the package.
func (o PackageOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Package) string { return v.Name }).(pulumi.StringOutput)
}

// The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
func (o PackageOutput) PackageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Package) *string { return v.PackageType }).(pulumi.StringPtrOutput)
}

// The homepage for this package.
func (o PackageOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Package) *string { return v.Url }).(pulumi.StringPtrOutput)
}

// The version of the package.
func (o PackageOutput) Version() VersionPtrOutput {
	return o.ApplyT(func(v Package) *Version { return v.Version }).(VersionPtrOutput)
}

type PackagePtrOutput struct{ *pulumi.OutputState }

func (PackagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Package)(nil)).Elem()
}

func (o PackagePtrOutput) ToPackagePtrOutput() PackagePtrOutput {
	return o
}

func (o PackagePtrOutput) ToPackagePtrOutputWithContext(ctx context.Context) PackagePtrOutput {
	return o
}

func (o PackagePtrOutput) Elem() PackageOutput {
	return o.ApplyT(func(v *Package) Package {
		if v != nil {
			return *v
		}
		var ret Package
		return ret
	}).(PackageOutput)
}

// The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.
func (o PackagePtrOutput) Architecture() PackageArchitecturePtrOutput {
	return o.ApplyT(func(v *Package) *PackageArchitecture {
		if v == nil {
			return nil
		}
		return v.Architecture
	}).(PackageArchitecturePtrOutput)
}

// The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages.
func (o PackagePtrOutput) CpeUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Package) *string {
		if v == nil {
			return nil
		}
		return v.CpeUri
	}).(pulumi.StringPtrOutput)
}

// The description of this package.
func (o PackagePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Package) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Hash value, typically a file digest, that allows unique identification a specific package.
func (o PackagePtrOutput) Digest() DigestArrayOutput {
	return o.ApplyT(func(v *Package) []Digest {
		if v == nil {
			return nil
		}
		return v.Digest
	}).(DigestArrayOutput)
}

// The various channels by which a package is distributed.
func (o PackagePtrOutput) Distribution() DistributionArrayOutput {
	return o.ApplyT(func(v *Package) []Distribution {
		if v == nil {
			return nil
		}
		return v.Distribution
	}).(DistributionArrayOutput)
}

// Licenses that have been declared by the authors of the package.
func (o PackagePtrOutput) License() LicensePtrOutput {
	return o.ApplyT(func(v *Package) *License {
		if v == nil {
			return nil
		}
		return v.License
	}).(LicensePtrOutput)
}

// A freeform text denoting the maintainer of this package.
func (o PackagePtrOutput) Maintainer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Package) *string {
		if v == nil {
			return nil
		}
		return v.Maintainer
	}).(pulumi.StringPtrOutput)
}

// Immutable. The name of the package.
func (o PackagePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Package) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
func (o PackagePtrOutput) PackageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Package) *string {
		if v == nil {
			return nil
		}
		return v.PackageType
	}).(pulumi.StringPtrOutput)
}

// The homepage for this package.
func (o PackagePtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Package) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// The version of the package.
func (o PackagePtrOutput) Version() VersionPtrOutput {
	return o.ApplyT(func(v *Package) *Version {
		if v == nil {
			return nil
		}
		return v.Version
	}).(VersionPtrOutput)
}

// PackageInfoNote represents an SPDX Package Information section: https://spdx.github.io/spdx-spec/3-package-information/
type PackageInfoNote struct {
	// Indicates whether the file content of this package has been available for or subjected to analysis when creating the SPDX document
	Analyzed *bool `pulumi:"analyzed"`
	// A place for the SPDX data creator to record, at the package level, acknowledgements that may be needed to be communicated in some contexts
	Attribution *string `pulumi:"attribution"`
	// Provide an independently reproducible mechanism that permits unique identification of a specific package that correlates to the data in this SPDX file
	Checksum *string `pulumi:"checksum"`
	// Identify the copyright holders of the package, as well as any dates present
	Copyright *string `pulumi:"copyright"`
	// A more detailed description of the package
	DetailedDescription *string `pulumi:"detailedDescription"`
	// This section identifies the download Universal Resource Locator (URL), or a specific location within a version control system (VCS) for the package at the time that the SPDX file was created
	DownloadLocation *string `pulumi:"downloadLocation"`
	// ExternalRef
	ExternalRefs []ExternalRef `pulumi:"externalRefs"`
	// Contain the license the SPDX file creator has concluded as governing the This field is to contain a list of all licenses found in the package. The relationship between licenses (i.e., conjunctive, disjunctive) is not specified in this field – it is simply a listing of all licenses found
	FilesLicenseInfo []string `pulumi:"filesLicenseInfo"`
	// Provide a place for the SPDX file creator to record a web site that serves as the package's home page
	HomePage *string `pulumi:"homePage"`
	// List the licenses that have been declared by the authors of the package
	LicenseDeclared *License `pulumi:"licenseDeclared"`
	// If the package identified in the SPDX file originated from a different person or organization than identified as Package Supplier, this field identifies from where or whom the package originally came
	Originator *string `pulumi:"originator"`
	// The type of package: OS, MAVEN, GO, GO_STDLIB, etc.
	PackageType *string `pulumi:"packageType"`
	// A short description of the package
	SummaryDescription *string `pulumi:"summaryDescription"`
	// Identify the actual distribution source for the package/directory identified in the SPDX file
	Supplier *string `pulumi:"supplier"`
	// Identify the full name of the package as given by the Package Originator
	Title *string `pulumi:"title"`
	// This field provides an independently reproducible mechanism identifying specific contents of a package based on the actual files (except the SPDX file itself, if it is included in the package) that make up each package and that correlates to the data in this SPDX file
	VerificationCode *string `pulumi:"verificationCode"`
	// Identify the version of the package
	Version *string `pulumi:"version"`
}

// PackageInfoNoteInput is an input type that accepts PackageInfoNoteArgs and PackageInfoNoteOutput values.
// You can construct a concrete instance of `PackageInfoNoteInput` via:
//
//	PackageInfoNoteArgs{...}
type PackageInfoNoteInput interface {
	pulumi.Input

	ToPackageInfoNoteOutput() PackageInfoNoteOutput
	ToPackageInfoNoteOutputWithContext(context.Context) PackageInfoNoteOutput
}

// PackageInfoNote represents an SPDX Package Information section: https://spdx.github.io/spdx-spec/3-package-information/
type PackageInfoNoteArgs struct {
	// Indicates whether the file content of this package has been available for or subjected to analysis when creating the SPDX document
	Analyzed pulumi.BoolPtrInput `pulumi:"analyzed"`
	// A place for the SPDX data creator to record, at the package level, acknowledgements that may be needed to be communicated in some contexts
	Attribution pulumi.StringPtrInput `pulumi:"attribution"`
	// Provide an independently reproducible mechanism that permits unique identification of a specific package that correlates to the data in this SPDX file
	Checksum pulumi.StringPtrInput `pulumi:"checksum"`
	// Identify the copyright holders of the package, as well as any dates present
	Copyright pulumi.StringPtrInput `pulumi:"copyright"`
	// A more detailed description of the package
	DetailedDescription pulumi.StringPtrInput `pulumi:"detailedDescription"`
	// This section identifies the download Universal Resource Locator (URL), or a specific location within a version control system (VCS) for the package at the time that the SPDX file was created
	DownloadLocation pulumi.StringPtrInput `pulumi:"downloadLocation"`
	// ExternalRef
	ExternalRefs ExternalRefArrayInput `pulumi:"externalRefs"`
	// Contain the license the SPDX file creator has concluded as governing the This field is to contain a list of all licenses found in the package. The relationship between licenses (i.e., conjunctive, disjunctive) is not specified in this field – it is simply a listing of all licenses found
	FilesLicenseInfo pulumi.StringArrayInput `pulumi:"filesLicenseInfo"`
	// Provide a place for the SPDX file creator to record a web site that serves as the package's home page
	HomePage pulumi.StringPtrInput `pulumi:"homePage"`
	// List the licenses that have been declared by the authors of the package
	LicenseDeclared LicensePtrInput `pulumi:"licenseDeclared"`
	// If the package identified in the SPDX file originated from a different person or organization than identified as Package Supplier, this field identifies from where or whom the package originally came
	Originator pulumi.StringPtrInput `pulumi:"originator"`
	// The type of package: OS, MAVEN, GO, GO_STDLIB, etc.
	PackageType pulumi.StringPtrInput `pulumi:"packageType"`
	// A short description of the package
	SummaryDescription pulumi.StringPtrInput `pulumi:"summaryDescription"`
	// Identify the actual distribution source for the package/directory identified in the SPDX file
	Supplier pulumi.StringPtrInput `pulumi:"supplier"`
	// Identify the full name of the package as given by the Package Originator
	Title pulumi.StringPtrInput `pulumi:"title"`
	// This field provides an independently reproducible mechanism identifying specific contents of a package based on the actual files (except the SPDX file itself, if it is included in the package) that make up each package and that correlates to the data in this SPDX file
	VerificationCode pulumi.StringPtrInput `pulumi:"verificationCode"`
	// Identify the version of the package
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (PackageInfoNoteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PackageInfoNote)(nil)).Elem()
}

func (i PackageInfoNoteArgs) ToPackageInfoNoteOutput() PackageInfoNoteOutput {
	return i.ToPackageInfoNoteOutputWithContext(context.Background())
}

func (i PackageInfoNoteArgs) ToPackageInfoNoteOutputWithContext(ctx context.Context) PackageInfoNoteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageInfoNoteOutput)
}

func (i PackageInfoNoteArgs) ToPackageInfoNotePtrOutput() PackageInfoNotePtrOutput {
	return i.ToPackageInfoNotePtrOutputWithContext(context.Background())
}

func (i PackageInfoNoteArgs) ToPackageInfoNotePtrOutputWithContext(ctx context.Context) PackageInfoNotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageInfoNoteOutput).ToPackageInfoNotePtrOutputWithContext(ctx)
}

// PackageInfoNotePtrInput is an input type that accepts PackageInfoNoteArgs, PackageInfoNotePtr and PackageInfoNotePtrOutput values.
// You can construct a concrete instance of `PackageInfoNotePtrInput` via:
//
//	        PackageInfoNoteArgs{...}
//
//	or:
//
//	        nil
type PackageInfoNotePtrInput interface {
	pulumi.Input

	ToPackageInfoNotePtrOutput() PackageInfoNotePtrOutput
	ToPackageInfoNotePtrOutputWithContext(context.Context) PackageInfoNotePtrOutput
}

type packageInfoNotePtrType PackageInfoNoteArgs

func PackageInfoNotePtr(v *PackageInfoNoteArgs) PackageInfoNotePtrInput {
	return (*packageInfoNotePtrType)(v)
}

func (*packageInfoNotePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PackageInfoNote)(nil)).Elem()
}

func (i *packageInfoNotePtrType) ToPackageInfoNotePtrOutput() PackageInfoNotePtrOutput {
	return i.ToPackageInfoNotePtrOutputWithContext(context.Background())
}

func (i *packageInfoNotePtrType) ToPackageInfoNotePtrOutputWithContext(ctx context.Context) PackageInfoNotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageInfoNotePtrOutput)
}

// PackageInfoNote represents an SPDX Package Information section: https://spdx.github.io/spdx-spec/3-package-information/
type PackageInfoNoteOutput struct{ *pulumi.OutputState }

func (PackageInfoNoteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PackageInfoNote)(nil)).Elem()
}

func (o PackageInfoNoteOutput) ToPackageInfoNoteOutput() PackageInfoNoteOutput {
	return o
}

func (o PackageInfoNoteOutput) ToPackageInfoNoteOutputWithContext(ctx context.Context) PackageInfoNoteOutput {
	return o
}

func (o PackageInfoNoteOutput) ToPackageInfoNotePtrOutput() PackageInfoNotePtrOutput {
	return o.ToPackageInfoNotePtrOutputWithContext(context.Background())
}

func (o PackageInfoNoteOutput) ToPackageInfoNotePtrOutputWithContext(ctx context.Context) PackageInfoNotePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PackageInfoNote) *PackageInfoNote {
		return &v
	}).(PackageInfoNotePtrOutput)
}

// Indicates whether the file content of this package has been available for or subjected to analysis when creating the SPDX document
func (o PackageInfoNoteOutput) Analyzed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PackageInfoNote) *bool { return v.Analyzed }).(pulumi.BoolPtrOutput)
}

// A place for the SPDX data creator to record, at the package level, acknowledgements that may be needed to be communicated in some contexts
func (o PackageInfoNoteOutput) Attribution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PackageInfoNote) *string { return v.Attribution }).(pulumi.StringPtrOutput)
}

// Provide an independently reproducible mechanism that permits unique identification of a specific package that correlates to the data in this SPDX file
func (o PackageInfoNoteOutput) Checksum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PackageInfoNote) *string { return v.Checksum }).(pulumi.StringPtrOutput)
}

// Identify the copyright holders of the package, as well as any dates present
func (o PackageInfoNoteOutput) Copyright() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PackageInfoNote) *string { return v.Copyright }).(pulumi.StringPtrOutput)
}

// A more detailed description of the package
func (o PackageInfoNoteOutput) DetailedDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PackageInfoNote) *string { return v.DetailedDescription }).(pulumi.StringPtrOutput)
}

// This section identifies the download Universal Resource Locator (URL), or a specific location within a version control system (VCS) for the package at the time that the SPDX file was created
func (o PackageInfoNoteOutput) DownloadLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PackageInfoNote) *string { return v.DownloadLocation }).(pulumi.StringPtrOutput)
}

// ExternalRef
func (o PackageInfoNoteOutput) ExternalRefs() ExternalRefArrayOutput {
	return o.ApplyT(func(v PackageInfoNote) []ExternalRef { return v.ExternalRefs }).(ExternalRefArrayOutput)
}

// Contain the license the SPDX file creator has concluded as governing the This field is to contain a list of all licenses found in the package. The relationship between licenses (i.e., conjunctive, disjunctive) is not specified in this field – it is simply a listing of all licenses found
func (o PackageInfoNoteOutput) FilesLicenseInfo() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PackageInfoNote) []string { return v.FilesLicenseInfo }).(pulumi.StringArrayOutput)
}

// Provide a place for the SPDX file creator to record a web site that serves as the package's home page
func (o PackageInfoNoteOutput) HomePage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PackageInfoNote) *string { return v.HomePage }).(pulumi.StringPtrOutput)
}

// List the licenses that have been declared by the authors of the package
func (o PackageInfoNoteOutput) LicenseDeclared() LicensePtrOutput {
	return o.ApplyT(func(v PackageInfoNote) *License { return v.LicenseDeclared }).(LicensePtrOutput)
}

// If the package identified in the SPDX file originated from a different person or organization than identified as Package Supplier, this field identifies from where or whom the package originally came
func (o PackageInfoNoteOutput) Originator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PackageInfoNote) *string { return v.Originator }).(pulumi.StringPtrOutput)
}

// The type of package: OS, MAVEN, GO, GO_STDLIB, etc.
func (o PackageInfoNoteOutput) PackageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PackageInfoNote) *string { return v.PackageType }).(pulumi.StringPtrOutput)
}

// A short description of the package
func (o PackageInfoNoteOutput) SummaryDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PackageInfoNote) *string { return v.SummaryDescription }).(pulumi.StringPtrOutput)
}

// Identify the actual distribution source for the package/directory identified in the SPDX file
func (o PackageInfoNoteOutput) Supplier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PackageInfoNote) *string { return v.Supplier }).(pulumi.StringPtrOutput)
}

// Identify the full name of the package as given by the Package Originator
func (o PackageInfoNoteOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PackageInfoNote) *string { return v.Title }).(pulumi.StringPtrOutput)
}

// This field provides an independently reproducible mechanism identifying specific contents of a package based on the actual files (except the SPDX file itself, if it is included in the package) that make up each package and that correlates to the data in this SPDX file
func (o PackageInfoNoteOutput) VerificationCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PackageInfoNote) *string { return v.VerificationCode }).(pulumi.StringPtrOutput)
}

// Identify the version of the package
func (o PackageInfoNoteOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PackageInfoNote) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type PackageInfoNotePtrOutput struct{ *pulumi.OutputState }

func (PackageInfoNotePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PackageInfoNote)(nil)).Elem()
}

func (o PackageInfoNotePtrOutput) ToPackageInfoNotePtrOutput() PackageInfoNotePtrOutput {
	return o
}

func (o PackageInfoNotePtrOutput) ToPackageInfoNotePtrOutputWithContext(ctx context.Context) PackageInfoNotePtrOutput {
	return o
}

func (o PackageInfoNotePtrOutput) Elem() PackageInfoNoteOutput {
	return o.ApplyT(func(v *PackageInfoNote) PackageInfoNote {
		if v != nil {
			return *v
		}
		var ret PackageInfoNote
		return ret
	}).(PackageInfoNoteOutput)
}

// Indicates whether the file content of this package has been available for or subjected to analysis when creating the SPDX document
func (o PackageInfoNotePtrOutput) Analyzed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PackageInfoNote) *bool {
		if v == nil {
			return nil
		}
		return v.Analyzed
	}).(pulumi.BoolPtrOutput)
}

// A place for the SPDX data creator to record, at the package level, acknowledgements that may be needed to be communicated in some contexts
func (o PackageInfoNotePtrOutput) Attribution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PackageInfoNote) *string {
		if v == nil {
			return nil
		}
		return v.Attribution
	}).(pulumi.StringPtrOutput)
}

// Provide an independently reproducible mechanism that permits unique identification of a specific package that correlates to the data in this SPDX file
func (o PackageInfoNotePtrOutput) Checksum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PackageInfoNote) *string {
		if v == nil {
			return nil
		}
		return v.Checksum
	}).(pulumi.StringPtrOutput)
}

// Identify the copyright holders of the package, as well as any dates present
func (o PackageInfoNotePtrOutput) Copyright() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PackageInfoNote) *string {
		if v == nil {
			return nil
		}
		return v.Copyright
	}).(pulumi.StringPtrOutput)
}

// A more detailed description of the package
func (o PackageInfoNotePtrOutput) DetailedDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PackageInfoNote) *string {
		if v == nil {
			return nil
		}
		return v.DetailedDescription
	}).(pulumi.StringPtrOutput)
}

// This section identifies the download Universal Resource Locator (URL), or a specific location within a version control system (VCS) for the package at the time that the SPDX file was created
func (o PackageInfoNotePtrOutput) DownloadLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PackageInfoNote) *string {
		if v == nil {
			return nil
		}
		return v.DownloadLocation
	}).(pulumi.StringPtrOutput)
}

// ExternalRef
func (o PackageInfoNotePtrOutput) ExternalRefs() ExternalRefArrayOutput {
	return o.ApplyT(func(v *PackageInfoNote) []ExternalRef {
		if v == nil {
			return nil
		}
		return v.ExternalRefs
	}).(ExternalRefArrayOutput)
}

// Contain the license the SPDX file creator has concluded as governing the This field is to contain a list of all licenses found in the package. The relationship between licenses (i.e., conjunctive, disjunctive) is not specified in this field – it is simply a listing of all licenses found
func (o PackageInfoNotePtrOutput) FilesLicenseInfo() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PackageInfoNote) []string {
		if v == nil {
			return nil
		}
		return v.FilesLicenseInfo
	}).(pulumi.StringArrayOutput)
}

// Provide a place for the SPDX file creator to record a web site that serves as the package's home page
func (o PackageInfoNotePtrOutput) HomePage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PackageInfoNote) *string {
		if v == nil {
			return nil
		}
		return v.HomePage
	}).(pulumi.StringPtrOutput)
}

// List the licenses that have been declared by the authors of the package
func (o PackageInfoNotePtrOutput) LicenseDeclared() LicensePtrOutput {
	return o.ApplyT(func(v *PackageInfoNote) *License {
		if v == nil {
			return nil
		}
		return v.LicenseDeclared
	}).(LicensePtrOutput)
}

// If the package identified in the SPDX file originated from a different person or organization than identified as Package Supplier, this field identifies from where or whom the package originally came
func (o PackageInfoNotePtrOutput) Originator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PackageInfoNote) *string {
		if v == nil {
			return nil
		}
		return v.Originator
	}).(pulumi.StringPtrOutput)
}

// The type of package: OS, MAVEN, GO, GO_STDLIB, etc.
func (o PackageInfoNotePtrOutput) PackageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PackageInfoNote) *string {
		if v == nil {
			return nil
		}
		return v.PackageType
	}).(pulumi.StringPtrOutput)
}

// A short description of the package
func (o PackageInfoNotePtrOutput) SummaryDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PackageInfoNote) *string {
		if v == nil {
			return nil
		}
		return v.SummaryDescription
	}).(pulumi.StringPtrOutput)
}

// Identify the actual distribution source for the package/directory identified in the SPDX file
func (o PackageInfoNotePtrOutput) Supplier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PackageInfoNote) *string {
		if v == nil {
			return nil
		}
		return v.Supplier
	}).(pulumi.StringPtrOutput)
}

// Identify the full name of the package as given by the Package Originator
func (o PackageInfoNotePtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PackageInfoNote) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// This field provides an independently reproducible mechanism identifying specific contents of a package based on the actual files (except the SPDX file itself, if it is included in the package) that make up each package and that correlates to the data in this SPDX file
func (o PackageInfoNotePtrOutput) VerificationCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PackageInfoNote) *string {
		if v == nil {
			return nil
		}
		return v.VerificationCode
	}).(pulumi.StringPtrOutput)
}

// Identify the version of the package
func (o PackageInfoNotePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PackageInfoNote) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// PackageInfoNote represents an SPDX Package Information section: https://spdx.github.io/spdx-spec/3-package-information/
type PackageInfoNoteResponse struct {
	// Indicates whether the file content of this package has been available for or subjected to analysis when creating the SPDX document
	Analyzed bool `pulumi:"analyzed"`
	// A place for the SPDX data creator to record, at the package level, acknowledgements that may be needed to be communicated in some contexts
	Attribution string `pulumi:"attribution"`
	// Provide an independently reproducible mechanism that permits unique identification of a specific package that correlates to the data in this SPDX file
	Checksum string `pulumi:"checksum"`
	// Identify the copyright holders of the package, as well as any dates present
	Copyright string `pulumi:"copyright"`
	// A more detailed description of the package
	DetailedDescription string `pulumi:"detailedDescription"`
	// This section identifies the download Universal Resource Locator (URL), or a specific location within a version control system (VCS) for the package at the time that the SPDX file was created
	DownloadLocation string `pulumi:"downloadLocation"`
	// ExternalRef
	ExternalRefs []ExternalRefResponse `pulumi:"externalRefs"`
	// Contain the license the SPDX file creator has concluded as governing the This field is to contain a list of all licenses found in the package. The relationship between licenses (i.e., conjunctive, disjunctive) is not specified in this field – it is simply a listing of all licenses found
	FilesLicenseInfo []string `pulumi:"filesLicenseInfo"`
	// Provide a place for the SPDX file creator to record a web site that serves as the package's home page
	HomePage string `pulumi:"homePage"`
	// List the licenses that have been declared by the authors of the package
	LicenseDeclared LicenseResponse `pulumi:"licenseDeclared"`
	// If the package identified in the SPDX file originated from a different person or organization than identified as Package Supplier, this field identifies from where or whom the package originally came
	Originator string `pulumi:"originator"`
	// The type of package: OS, MAVEN, GO, GO_STDLIB, etc.
	PackageType string `pulumi:"packageType"`
	// A short description of the package
	SummaryDescription string `pulumi:"summaryDescription"`
	// Identify the actual distribution source for the package/directory identified in the SPDX file
	Supplier string `pulumi:"supplier"`
	// Identify the full name of the package as given by the Package Originator
	Title string `pulumi:"title"`
	// This field provides an independently reproducible mechanism identifying specific contents of a package based on the actual files (except the SPDX file itself, if it is included in the package) that make up each package and that correlates to the data in this SPDX file
	VerificationCode string `pulumi:"verificationCode"`
	// Identify the version of the package
	Version string `pulumi:"version"`
}

// PackageInfoNote represents an SPDX Package Information section: https://spdx.github.io/spdx-spec/3-package-information/
type PackageInfoNoteResponseOutput struct{ *pulumi.OutputState }

func (PackageInfoNoteResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PackageInfoNoteResponse)(nil)).Elem()
}

func (o PackageInfoNoteResponseOutput) ToPackageInfoNoteResponseOutput() PackageInfoNoteResponseOutput {
	return o
}

func (o PackageInfoNoteResponseOutput) ToPackageInfoNoteResponseOutputWithContext(ctx context.Context) PackageInfoNoteResponseOutput {
	return o
}

// Indicates whether the file content of this package has been available for or subjected to analysis when creating the SPDX document
func (o PackageInfoNoteResponseOutput) Analyzed() pulumi.BoolOutput {
	return o.ApplyT(func(v PackageInfoNoteResponse) bool { return v.Analyzed }).(pulumi.BoolOutput)
}

// A place for the SPDX data creator to record, at the package level, acknowledgements that may be needed to be communicated in some contexts
func (o PackageInfoNoteResponseOutput) Attribution() pulumi.StringOutput {
	return o.ApplyT(func(v PackageInfoNoteResponse) string { return v.Attribution }).(pulumi.StringOutput)
}

// Provide an independently reproducible mechanism that permits unique identification of a specific package that correlates to the data in this SPDX file
func (o PackageInfoNoteResponseOutput) Checksum() pulumi.StringOutput {
	return o.ApplyT(func(v PackageInfoNoteResponse) string { return v.Checksum }).(pulumi.StringOutput)
}

// Identify the copyright holders of the package, as well as any dates present
func (o PackageInfoNoteResponseOutput) Copyright() pulumi.StringOutput {
	return o.ApplyT(func(v PackageInfoNoteResponse) string { return v.Copyright }).(pulumi.StringOutput)
}

// A more detailed description of the package
func (o PackageInfoNoteResponseOutput) DetailedDescription() pulumi.StringOutput {
	return o.ApplyT(func(v PackageInfoNoteResponse) string { return v.DetailedDescription }).(pulumi.StringOutput)
}

// This section identifies the download Universal Resource Locator (URL), or a specific location within a version control system (VCS) for the package at the time that the SPDX file was created
func (o PackageInfoNoteResponseOutput) DownloadLocation() pulumi.StringOutput {
	return o.ApplyT(func(v PackageInfoNoteResponse) string { return v.DownloadLocation }).(pulumi.StringOutput)
}

// ExternalRef
func (o PackageInfoNoteResponseOutput) ExternalRefs() ExternalRefResponseArrayOutput {
	return o.ApplyT(func(v PackageInfoNoteResponse) []ExternalRefResponse { return v.ExternalRefs }).(ExternalRefResponseArrayOutput)
}

// Contain the license the SPDX file creator has concluded as governing the This field is to contain a list of all licenses found in the package. The relationship between licenses (i.e., conjunctive, disjunctive) is not specified in this field – it is simply a listing of all licenses found
func (o PackageInfoNoteResponseOutput) FilesLicenseInfo() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PackageInfoNoteResponse) []string { return v.FilesLicenseInfo }).(pulumi.StringArrayOutput)
}

// Provide a place for the SPDX file creator to record a web site that serves as the package's home page
func (o PackageInfoNoteResponseOutput) HomePage() pulumi.StringOutput {
	return o.ApplyT(func(v PackageInfoNoteResponse) string { return v.HomePage }).(pulumi.StringOutput)
}

// List the licenses that have been declared by the authors of the package
func (o PackageInfoNoteResponseOutput) LicenseDeclared() LicenseResponseOutput {
	return o.ApplyT(func(v PackageInfoNoteResponse) LicenseResponse { return v.LicenseDeclared }).(LicenseResponseOutput)
}

// If the package identified in the SPDX file originated from a different person or organization than identified as Package Supplier, this field identifies from where or whom the package originally came
func (o PackageInfoNoteResponseOutput) Originator() pulumi.StringOutput {
	return o.ApplyT(func(v PackageInfoNoteResponse) string { return v.Originator }).(pulumi.StringOutput)
}

// The type of package: OS, MAVEN, GO, GO_STDLIB, etc.
func (o PackageInfoNoteResponseOutput) PackageType() pulumi.StringOutput {
	return o.ApplyT(func(v PackageInfoNoteResponse) string { return v.PackageType }).(pulumi.StringOutput)
}

// A short description of the package
func (o PackageInfoNoteResponseOutput) SummaryDescription() pulumi.StringOutput {
	return o.ApplyT(func(v PackageInfoNoteResponse) string { return v.SummaryDescription }).(pulumi.StringOutput)
}

// Identify the actual distribution source for the package/directory identified in the SPDX file
func (o PackageInfoNoteResponseOutput) Supplier() pulumi.StringOutput {
	return o.ApplyT(func(v PackageInfoNoteResponse) string { return v.Supplier }).(pulumi.StringOutput)
}

// Identify the full name of the package as given by the Package Originator
func (o PackageInfoNoteResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v PackageInfoNoteResponse) string { return v.Title }).(pulumi.StringOutput)
}

// This field provides an independently reproducible mechanism identifying specific contents of a package based on the actual files (except the SPDX file itself, if it is included in the package) that make up each package and that correlates to the data in this SPDX file
func (o PackageInfoNoteResponseOutput) VerificationCode() pulumi.StringOutput {
	return o.ApplyT(func(v PackageInfoNoteResponse) string { return v.VerificationCode }).(pulumi.StringOutput)
}

// Identify the version of the package
func (o PackageInfoNoteResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v PackageInfoNoteResponse) string { return v.Version }).(pulumi.StringOutput)
}

// PackageInfoOccurrence represents an SPDX Package Information section: https://spdx.github.io/spdx-spec/3-package-information/
type PackageInfoOccurrence struct {
	// A place for the SPDX file creator to record any general comments about the package being described
	Comment *string `pulumi:"comment"`
	// Provide the actual file name of the package, or path of the directory being treated as a package
	Filename *string `pulumi:"filename"`
	// Uniquely identify any element in an SPDX document which may be referenced by other elements
	Id *string `pulumi:"id"`
	// package or alternative values, if the governing license cannot be determined
	LicenseConcluded *License `pulumi:"licenseConcluded"`
	// Provide a place for the SPDX file creator to record any relevant background information or additional comments about the origin of the package
	SourceInfo *string `pulumi:"sourceInfo"`
}

// PackageInfoOccurrenceInput is an input type that accepts PackageInfoOccurrenceArgs and PackageInfoOccurrenceOutput values.
// You can construct a concrete instance of `PackageInfoOccurrenceInput` via:
//
//	PackageInfoOccurrenceArgs{...}
type PackageInfoOccurrenceInput interface {
	pulumi.Input

	ToPackageInfoOccurrenceOutput() PackageInfoOccurrenceOutput
	ToPackageInfoOccurrenceOutputWithContext(context.Context) PackageInfoOccurrenceOutput
}

// PackageInfoOccurrence represents an SPDX Package Information section: https://spdx.github.io/spdx-spec/3-package-information/
type PackageInfoOccurrenceArgs struct {
	// A place for the SPDX file creator to record any general comments about the package being described
	Comment pulumi.StringPtrInput `pulumi:"comment"`
	// Provide the actual file name of the package, or path of the directory being treated as a package
	Filename pulumi.StringPtrInput `pulumi:"filename"`
	// Uniquely identify any element in an SPDX document which may be referenced by other elements
	Id pulumi.StringPtrInput `pulumi:"id"`
	// package or alternative values, if the governing license cannot be determined
	LicenseConcluded LicensePtrInput `pulumi:"licenseConcluded"`
	// Provide a place for the SPDX file creator to record any relevant background information or additional comments about the origin of the package
	SourceInfo pulumi.StringPtrInput `pulumi:"sourceInfo"`
}

func (PackageInfoOccurrenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PackageInfoOccurrence)(nil)).Elem()
}

func (i PackageInfoOccurrenceArgs) ToPackageInfoOccurrenceOutput() PackageInfoOccurrenceOutput {
	return i.ToPackageInfoOccurrenceOutputWithContext(context.Background())
}

func (i PackageInfoOccurrenceArgs) ToPackageInfoOccurrenceOutputWithContext(ctx context.Context) PackageInfoOccurrenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageInfoOccurrenceOutput)
}

func (i PackageInfoOccurrenceArgs) ToPackageInfoOccurrencePtrOutput() PackageInfoOccurrencePtrOutput {
	return i.ToPackageInfoOccurrencePtrOutputWithContext(context.Background())
}

func (i PackageInfoOccurrenceArgs) ToPackageInfoOccurrencePtrOutputWithContext(ctx context.Context) PackageInfoOccurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageInfoOccurrenceOutput).ToPackageInfoOccurrencePtrOutputWithContext(ctx)
}

// PackageInfoOccurrencePtrInput is an input type that accepts PackageInfoOccurrenceArgs, PackageInfoOccurrencePtr and PackageInfoOccurrencePtrOutput values.
// You can construct a concrete instance of `PackageInfoOccurrencePtrInput` via:
//
//	        PackageInfoOccurrenceArgs{...}
//
//	or:
//
//	        nil
type PackageInfoOccurrencePtrInput interface {
	pulumi.Input

	ToPackageInfoOccurrencePtrOutput() PackageInfoOccurrencePtrOutput
	ToPackageInfoOccurrencePtrOutputWithContext(context.Context) PackageInfoOccurrencePtrOutput
}

type packageInfoOccurrencePtrType PackageInfoOccurrenceArgs

func PackageInfoOccurrencePtr(v *PackageInfoOccurrenceArgs) PackageInfoOccurrencePtrInput {
	return (*packageInfoOccurrencePtrType)(v)
}

func (*packageInfoOccurrencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PackageInfoOccurrence)(nil)).Elem()
}

func (i *packageInfoOccurrencePtrType) ToPackageInfoOccurrencePtrOutput() PackageInfoOccurrencePtrOutput {
	return i.ToPackageInfoOccurrencePtrOutputWithContext(context.Background())
}

func (i *packageInfoOccurrencePtrType) ToPackageInfoOccurrencePtrOutputWithContext(ctx context.Context) PackageInfoOccurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageInfoOccurrencePtrOutput)
}

// PackageInfoOccurrence represents an SPDX Package Information section: https://spdx.github.io/spdx-spec/3-package-information/
type PackageInfoOccurrenceOutput struct{ *pulumi.OutputState }

func (PackageInfoOccurrenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PackageInfoOccurrence)(nil)).Elem()
}

func (o PackageInfoOccurrenceOutput) ToPackageInfoOccurrenceOutput() PackageInfoOccurrenceOutput {
	return o
}

func (o PackageInfoOccurrenceOutput) ToPackageInfoOccurrenceOutputWithContext(ctx context.Context) PackageInfoOccurrenceOutput {
	return o
}

func (o PackageInfoOccurrenceOutput) ToPackageInfoOccurrencePtrOutput() PackageInfoOccurrencePtrOutput {
	return o.ToPackageInfoOccurrencePtrOutputWithContext(context.Background())
}

func (o PackageInfoOccurrenceOutput) ToPackageInfoOccurrencePtrOutputWithContext(ctx context.Context) PackageInfoOccurrencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PackageInfoOccurrence) *PackageInfoOccurrence {
		return &v
	}).(PackageInfoOccurrencePtrOutput)
}

// A place for the SPDX file creator to record any general comments about the package being described
func (o PackageInfoOccurrenceOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PackageInfoOccurrence) *string { return v.Comment }).(pulumi.StringPtrOutput)
}

// Provide the actual file name of the package, or path of the directory being treated as a package
func (o PackageInfoOccurrenceOutput) Filename() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PackageInfoOccurrence) *string { return v.Filename }).(pulumi.StringPtrOutput)
}

// Uniquely identify any element in an SPDX document which may be referenced by other elements
func (o PackageInfoOccurrenceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PackageInfoOccurrence) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// package or alternative values, if the governing license cannot be determined
func (o PackageInfoOccurrenceOutput) LicenseConcluded() LicensePtrOutput {
	return o.ApplyT(func(v PackageInfoOccurrence) *License { return v.LicenseConcluded }).(LicensePtrOutput)
}

// Provide a place for the SPDX file creator to record any relevant background information or additional comments about the origin of the package
func (o PackageInfoOccurrenceOutput) SourceInfo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PackageInfoOccurrence) *string { return v.SourceInfo }).(pulumi.StringPtrOutput)
}

type PackageInfoOccurrencePtrOutput struct{ *pulumi.OutputState }

func (PackageInfoOccurrencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PackageInfoOccurrence)(nil)).Elem()
}

func (o PackageInfoOccurrencePtrOutput) ToPackageInfoOccurrencePtrOutput() PackageInfoOccurrencePtrOutput {
	return o
}

func (o PackageInfoOccurrencePtrOutput) ToPackageInfoOccurrencePtrOutputWithContext(ctx context.Context) PackageInfoOccurrencePtrOutput {
	return o
}

func (o PackageInfoOccurrencePtrOutput) Elem() PackageInfoOccurrenceOutput {
	return o.ApplyT(func(v *PackageInfoOccurrence) PackageInfoOccurrence {
		if v != nil {
			return *v
		}
		var ret PackageInfoOccurrence
		return ret
	}).(PackageInfoOccurrenceOutput)
}

// A place for the SPDX file creator to record any general comments about the package being described
func (o PackageInfoOccurrencePtrOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PackageInfoOccurrence) *string {
		if v == nil {
			return nil
		}
		return v.Comment
	}).(pulumi.StringPtrOutput)
}

// Provide the actual file name of the package, or path of the directory being treated as a package
func (o PackageInfoOccurrencePtrOutput) Filename() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PackageInfoOccurrence) *string {
		if v == nil {
			return nil
		}
		return v.Filename
	}).(pulumi.StringPtrOutput)
}

// Uniquely identify any element in an SPDX document which may be referenced by other elements
func (o PackageInfoOccurrencePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PackageInfoOccurrence) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// package or alternative values, if the governing license cannot be determined
func (o PackageInfoOccurrencePtrOutput) LicenseConcluded() LicensePtrOutput {
	return o.ApplyT(func(v *PackageInfoOccurrence) *License {
		if v == nil {
			return nil
		}
		return v.LicenseConcluded
	}).(LicensePtrOutput)
}

// Provide a place for the SPDX file creator to record any relevant background information or additional comments about the origin of the package
func (o PackageInfoOccurrencePtrOutput) SourceInfo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PackageInfoOccurrence) *string {
		if v == nil {
			return nil
		}
		return v.SourceInfo
	}).(pulumi.StringPtrOutput)
}

// PackageInfoOccurrence represents an SPDX Package Information section: https://spdx.github.io/spdx-spec/3-package-information/
type PackageInfoOccurrenceResponse struct {
	// A place for the SPDX file creator to record any general comments about the package being described
	Comment string `pulumi:"comment"`
	// Provide the actual file name of the package, or path of the directory being treated as a package
	Filename string `pulumi:"filename"`
	// Provide a place for the SPDX file creator to record a web site that serves as the package's home page
	HomePage string `pulumi:"homePage"`
	// package or alternative values, if the governing license cannot be determined
	LicenseConcluded LicenseResponse `pulumi:"licenseConcluded"`
	// The type of package: OS, MAVEN, GO, GO_STDLIB, etc.
	PackageType string `pulumi:"packageType"`
	// Provide a place for the SPDX file creator to record any relevant background information or additional comments about the origin of the package
	SourceInfo string `pulumi:"sourceInfo"`
	// A short description of the package
	SummaryDescription string `pulumi:"summaryDescription"`
	// Identify the full name of the package as given by the Package Originator
	Title string `pulumi:"title"`
	// Identify the version of the package
	Version string `pulumi:"version"`
}

// PackageInfoOccurrence represents an SPDX Package Information section: https://spdx.github.io/spdx-spec/3-package-information/
type PackageInfoOccurrenceResponseOutput struct{ *pulumi.OutputState }

func (PackageInfoOccurrenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PackageInfoOccurrenceResponse)(nil)).Elem()
}

func (o PackageInfoOccurrenceResponseOutput) ToPackageInfoOccurrenceResponseOutput() PackageInfoOccurrenceResponseOutput {
	return o
}

func (o PackageInfoOccurrenceResponseOutput) ToPackageInfoOccurrenceResponseOutputWithContext(ctx context.Context) PackageInfoOccurrenceResponseOutput {
	return o
}

// A place for the SPDX file creator to record any general comments about the package being described
func (o PackageInfoOccurrenceResponseOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v PackageInfoOccurrenceResponse) string { return v.Comment }).(pulumi.StringOutput)
}

// Provide the actual file name of the package, or path of the directory being treated as a package
func (o PackageInfoOccurrenceResponseOutput) Filename() pulumi.StringOutput {
	return o.ApplyT(func(v PackageInfoOccurrenceResponse) string { return v.Filename }).(pulumi.StringOutput)
}

// Provide a place for the SPDX file creator to record a web site that serves as the package's home page
func (o PackageInfoOccurrenceResponseOutput) HomePage() pulumi.StringOutput {
	return o.ApplyT(func(v PackageInfoOccurrenceResponse) string { return v.HomePage }).(pulumi.StringOutput)
}

// package or alternative values, if the governing license cannot be determined
func (o PackageInfoOccurrenceResponseOutput) LicenseConcluded() LicenseResponseOutput {
	return o.ApplyT(func(v PackageInfoOccurrenceResponse) LicenseResponse { return v.LicenseConcluded }).(LicenseResponseOutput)
}

// The type of package: OS, MAVEN, GO, GO_STDLIB, etc.
func (o PackageInfoOccurrenceResponseOutput) PackageType() pulumi.StringOutput {
	return o.ApplyT(func(v PackageInfoOccurrenceResponse) string { return v.PackageType }).(pulumi.StringOutput)
}

// Provide a place for the SPDX file creator to record any relevant background information or additional comments about the origin of the package
func (o PackageInfoOccurrenceResponseOutput) SourceInfo() pulumi.StringOutput {
	return o.ApplyT(func(v PackageInfoOccurrenceResponse) string { return v.SourceInfo }).(pulumi.StringOutput)
}

// A short description of the package
func (o PackageInfoOccurrenceResponseOutput) SummaryDescription() pulumi.StringOutput {
	return o.ApplyT(func(v PackageInfoOccurrenceResponse) string { return v.SummaryDescription }).(pulumi.StringOutput)
}

// Identify the full name of the package as given by the Package Originator
func (o PackageInfoOccurrenceResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v PackageInfoOccurrenceResponse) string { return v.Title }).(pulumi.StringOutput)
}

// Identify the version of the package
func (o PackageInfoOccurrenceResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v PackageInfoOccurrenceResponse) string { return v.Version }).(pulumi.StringOutput)
}

// This message wraps a location affected by a vulnerability and its associated fix (if one is available).
type PackageIssue struct {
	// The location of the vulnerability.
	AffectedLocation VulnerabilityLocation `pulumi:"affectedLocation"`
	// The location of the available fix for vulnerability.
	FixedLocation *VulnerabilityLocation `pulumi:"fixedLocation"`
	// The type of package (e.g. OS, MAVEN, GO).
	PackageType *string `pulumi:"packageType"`
	// Deprecated, use Details.effective_severity instead The severity (e.g., distro assigned severity) for this vulnerability.
	//
	// Deprecated: Deprecated, use Details.effective_severity instead The severity (e.g., distro assigned severity) for this vulnerability.
	SeverityName *string `pulumi:"severityName"`
}

// PackageIssueInput is an input type that accepts PackageIssueArgs and PackageIssueOutput values.
// You can construct a concrete instance of `PackageIssueInput` via:
//
//	PackageIssueArgs{...}
type PackageIssueInput interface {
	pulumi.Input

	ToPackageIssueOutput() PackageIssueOutput
	ToPackageIssueOutputWithContext(context.Context) PackageIssueOutput
}

// This message wraps a location affected by a vulnerability and its associated fix (if one is available).
type PackageIssueArgs struct {
	// The location of the vulnerability.
	AffectedLocation VulnerabilityLocationInput `pulumi:"affectedLocation"`
	// The location of the available fix for vulnerability.
	FixedLocation VulnerabilityLocationPtrInput `pulumi:"fixedLocation"`
	// The type of package (e.g. OS, MAVEN, GO).
	PackageType pulumi.StringPtrInput `pulumi:"packageType"`
	// Deprecated, use Details.effective_severity instead The severity (e.g., distro assigned severity) for this vulnerability.
	//
	// Deprecated: Deprecated, use Details.effective_severity instead The severity (e.g., distro assigned severity) for this vulnerability.
	SeverityName pulumi.StringPtrInput `pulumi:"severityName"`
}

func (PackageIssueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PackageIssue)(nil)).Elem()
}

func (i PackageIssueArgs) ToPackageIssueOutput() PackageIssueOutput {
	return i.ToPackageIssueOutputWithContext(context.Background())
}

func (i PackageIssueArgs) ToPackageIssueOutputWithContext(ctx context.Context) PackageIssueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageIssueOutput)
}

// PackageIssueArrayInput is an input type that accepts PackageIssueArray and PackageIssueArrayOutput values.
// You can construct a concrete instance of `PackageIssueArrayInput` via:
//
//	PackageIssueArray{ PackageIssueArgs{...} }
type PackageIssueArrayInput interface {
	pulumi.Input

	ToPackageIssueArrayOutput() PackageIssueArrayOutput
	ToPackageIssueArrayOutputWithContext(context.Context) PackageIssueArrayOutput
}

type PackageIssueArray []PackageIssueInput

func (PackageIssueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PackageIssue)(nil)).Elem()
}

func (i PackageIssueArray) ToPackageIssueArrayOutput() PackageIssueArrayOutput {
	return i.ToPackageIssueArrayOutputWithContext(context.Background())
}

func (i PackageIssueArray) ToPackageIssueArrayOutputWithContext(ctx context.Context) PackageIssueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageIssueArrayOutput)
}

// This message wraps a location affected by a vulnerability and its associated fix (if one is available).
type PackageIssueOutput struct{ *pulumi.OutputState }

func (PackageIssueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PackageIssue)(nil)).Elem()
}

func (o PackageIssueOutput) ToPackageIssueOutput() PackageIssueOutput {
	return o
}

func (o PackageIssueOutput) ToPackageIssueOutputWithContext(ctx context.Context) PackageIssueOutput {
	return o
}

// The location of the vulnerability.
func (o PackageIssueOutput) AffectedLocation() VulnerabilityLocationOutput {
	return o.ApplyT(func(v PackageIssue) VulnerabilityLocation { return v.AffectedLocation }).(VulnerabilityLocationOutput)
}

// The location of the available fix for vulnerability.
func (o PackageIssueOutput) FixedLocation() VulnerabilityLocationPtrOutput {
	return o.ApplyT(func(v PackageIssue) *VulnerabilityLocation { return v.FixedLocation }).(VulnerabilityLocationPtrOutput)
}

// The type of package (e.g. OS, MAVEN, GO).
func (o PackageIssueOutput) PackageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PackageIssue) *string { return v.PackageType }).(pulumi.StringPtrOutput)
}

// Deprecated, use Details.effective_severity instead The severity (e.g., distro assigned severity) for this vulnerability.
//
// Deprecated: Deprecated, use Details.effective_severity instead The severity (e.g., distro assigned severity) for this vulnerability.
func (o PackageIssueOutput) SeverityName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PackageIssue) *string { return v.SeverityName }).(pulumi.StringPtrOutput)
}

type PackageIssueArrayOutput struct{ *pulumi.OutputState }

func (PackageIssueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PackageIssue)(nil)).Elem()
}

func (o PackageIssueArrayOutput) ToPackageIssueArrayOutput() PackageIssueArrayOutput {
	return o
}

func (o PackageIssueArrayOutput) ToPackageIssueArrayOutputWithContext(ctx context.Context) PackageIssueArrayOutput {
	return o
}

func (o PackageIssueArrayOutput) Index(i pulumi.IntInput) PackageIssueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PackageIssue {
		return vs[0].([]PackageIssue)[vs[1].(int)]
	}).(PackageIssueOutput)
}

// This message wraps a location affected by a vulnerability and its associated fix (if one is available).
type PackageIssueResponse struct {
	// The location of the vulnerability.
	AffectedLocation VulnerabilityLocationResponse `pulumi:"affectedLocation"`
	// The distro or language system assigned severity for this vulnerability when that is available and note provider assigned severity when it is not available.
	EffectiveSeverity string `pulumi:"effectiveSeverity"`
	// The location of the available fix for vulnerability.
	FixedLocation VulnerabilityLocationResponse `pulumi:"fixedLocation"`
	// The type of package (e.g. OS, MAVEN, GO).
	PackageType string `pulumi:"packageType"`
	// Deprecated, use Details.effective_severity instead The severity (e.g., distro assigned severity) for this vulnerability.
	//
	// Deprecated: Deprecated, use Details.effective_severity instead The severity (e.g., distro assigned severity) for this vulnerability.
	SeverityName string `pulumi:"severityName"`
}

// This message wraps a location affected by a vulnerability and its associated fix (if one is available).
type PackageIssueResponseOutput struct{ *pulumi.OutputState }

func (PackageIssueResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PackageIssueResponse)(nil)).Elem()
}

func (o PackageIssueResponseOutput) ToPackageIssueResponseOutput() PackageIssueResponseOutput {
	return o
}

func (o PackageIssueResponseOutput) ToPackageIssueResponseOutputWithContext(ctx context.Context) PackageIssueResponseOutput {
	return o
}

// The location of the vulnerability.
func (o PackageIssueResponseOutput) AffectedLocation() VulnerabilityLocationResponseOutput {
	return o.ApplyT(func(v PackageIssueResponse) VulnerabilityLocationResponse { return v.AffectedLocation }).(VulnerabilityLocationResponseOutput)
}

// The distro or language system assigned severity for this vulnerability when that is available and note provider assigned severity when it is not available.
func (o PackageIssueResponseOutput) EffectiveSeverity() pulumi.StringOutput {
	return o.ApplyT(func(v PackageIssueResponse) string { return v.EffectiveSeverity }).(pulumi.StringOutput)
}

// The location of the available fix for vulnerability.
func (o PackageIssueResponseOutput) FixedLocation() VulnerabilityLocationResponseOutput {
	return o.ApplyT(func(v PackageIssueResponse) VulnerabilityLocationResponse { return v.FixedLocation }).(VulnerabilityLocationResponseOutput)
}

// The type of package (e.g. OS, MAVEN, GO).
func (o PackageIssueResponseOutput) PackageType() pulumi.StringOutput {
	return o.ApplyT(func(v PackageIssueResponse) string { return v.PackageType }).(pulumi.StringOutput)
}

// Deprecated, use Details.effective_severity instead The severity (e.g., distro assigned severity) for this vulnerability.
//
// Deprecated: Deprecated, use Details.effective_severity instead The severity (e.g., distro assigned severity) for this vulnerability.
func (o PackageIssueResponseOutput) SeverityName() pulumi.StringOutput {
	return o.ApplyT(func(v PackageIssueResponse) string { return v.SeverityName }).(pulumi.StringOutput)
}

type PackageIssueResponseArrayOutput struct{ *pulumi.OutputState }

func (PackageIssueResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PackageIssueResponse)(nil)).Elem()
}

func (o PackageIssueResponseArrayOutput) ToPackageIssueResponseArrayOutput() PackageIssueResponseArrayOutput {
	return o
}

func (o PackageIssueResponseArrayOutput) ToPackageIssueResponseArrayOutputWithContext(ctx context.Context) PackageIssueResponseArrayOutput {
	return o
}

func (o PackageIssueResponseArrayOutput) Index(i pulumi.IntInput) PackageIssueResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PackageIssueResponse {
		return vs[0].([]PackageIssueResponse)[vs[1].(int)]
	}).(PackageIssueResponseOutput)
}

// Package represents a particular package version.
type PackageResponse struct {
	// The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.
	Architecture string `pulumi:"architecture"`
	// The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages.
	CpeUri string `pulumi:"cpeUri"`
	// The description of this package.
	Description string `pulumi:"description"`
	// Hash value, typically a file digest, that allows unique identification a specific package.
	Digest []DigestResponse `pulumi:"digest"`
	// The various channels by which a package is distributed.
	Distribution []DistributionResponse `pulumi:"distribution"`
	// Licenses that have been declared by the authors of the package.
	License LicenseResponse `pulumi:"license"`
	// A freeform text denoting the maintainer of this package.
	Maintainer string `pulumi:"maintainer"`
	// Immutable. The name of the package.
	Name string `pulumi:"name"`
	// The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
	PackageType string `pulumi:"packageType"`
	// The homepage for this package.
	Url string `pulumi:"url"`
	// The version of the package.
	Version VersionResponse `pulumi:"version"`
}

// Package represents a particular package version.
type PackageResponseOutput struct{ *pulumi.OutputState }

func (PackageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PackageResponse)(nil)).Elem()
}

func (o PackageResponseOutput) ToPackageResponseOutput() PackageResponseOutput {
	return o
}

func (o PackageResponseOutput) ToPackageResponseOutputWithContext(ctx context.Context) PackageResponseOutput {
	return o
}

// The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.
func (o PackageResponseOutput) Architecture() pulumi.StringOutput {
	return o.ApplyT(func(v PackageResponse) string { return v.Architecture }).(pulumi.StringOutput)
}

// The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages.
func (o PackageResponseOutput) CpeUri() pulumi.StringOutput {
	return o.ApplyT(func(v PackageResponse) string { return v.CpeUri }).(pulumi.StringOutput)
}

// The description of this package.
func (o PackageResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v PackageResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Hash value, typically a file digest, that allows unique identification a specific package.
func (o PackageResponseOutput) Digest() DigestResponseArrayOutput {
	return o.ApplyT(func(v PackageResponse) []DigestResponse { return v.Digest }).(DigestResponseArrayOutput)
}

// The various channels by which a package is distributed.
func (o PackageResponseOutput) Distribution() DistributionResponseArrayOutput {
	return o.ApplyT(func(v PackageResponse) []DistributionResponse { return v.Distribution }).(DistributionResponseArrayOutput)
}

// Licenses that have been declared by the authors of the package.
func (o PackageResponseOutput) License() LicenseResponseOutput {
	return o.ApplyT(func(v PackageResponse) LicenseResponse { return v.License }).(LicenseResponseOutput)
}

// A freeform text denoting the maintainer of this package.
func (o PackageResponseOutput) Maintainer() pulumi.StringOutput {
	return o.ApplyT(func(v PackageResponse) string { return v.Maintainer }).(pulumi.StringOutput)
}

// Immutable. The name of the package.
func (o PackageResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PackageResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
func (o PackageResponseOutput) PackageType() pulumi.StringOutput {
	return o.ApplyT(func(v PackageResponse) string { return v.PackageType }).(pulumi.StringOutput)
}

// The homepage for this package.
func (o PackageResponseOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v PackageResponse) string { return v.Url }).(pulumi.StringOutput)
}

// The version of the package.
func (o PackageResponseOutput) Version() VersionResponseOutput {
	return o.ApplyT(func(v PackageResponse) VersionResponse { return v.Version }).(VersionResponseOutput)
}

// An attestation wrapper with a PGP-compatible signature. This message only supports `ATTACHED` signatures, where the payload that is signed is included alongside the signature itself in the same file.
type PgpSignedAttestation struct {
	// Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).
	ContentType *PgpSignedAttestationContentType `pulumi:"contentType"`
	// The cryptographic fingerprint of the key used to generate the signature, as output by, e.g. `gpg --list-keys`. This should be the version 4, full 160-bit fingerprint, expressed as a 40 character hexadecimal string. See https://tools.ietf.org/html/rfc4880#section-12.2 for details. Implementations may choose to acknowledge "LONG", "SHORT", or other abbreviated key IDs, but only the full fingerprint is guaranteed to work. In gpg, the full fingerprint can be retrieved from the `fpr` field returned when calling --list-keys with --with-colons. For example: ```gpg --with-colons --with-fingerprint --force-v4-certs \ --list-keys attester@example.com tru::1:1513631572:0:3:1:5 pub:...... fpr:::::::::24FF6481B76AC91E66A00AC657A93A81EF3AE6FB:``` Above, the fingerprint is `24FF6481B76AC91E66A00AC657A93A81EF3AE6FB`.
	PgpKeyId *string `pulumi:"pgpKeyId"`
	// The raw content of the signature, as output by GNU Privacy Guard (GPG) or equivalent. Since this message only supports attached signatures, the payload that was signed must be attached. While the signature format supported is dependent on the verification implementation, currently only ASCII-armored (`--armor` to gpg), non-clearsigned (`--sign` rather than `--clearsign` to gpg) are supported. Concretely, `gpg --sign --armor --output=signature.gpg payload.json` will create the signature content expected in this field in `signature.gpg` for the `payload.json` attestation payload.
	Signature string `pulumi:"signature"`
}

// PgpSignedAttestationInput is an input type that accepts PgpSignedAttestationArgs and PgpSignedAttestationOutput values.
// You can construct a concrete instance of `PgpSignedAttestationInput` via:
//
//	PgpSignedAttestationArgs{...}
type PgpSignedAttestationInput interface {
	pulumi.Input

	ToPgpSignedAttestationOutput() PgpSignedAttestationOutput
	ToPgpSignedAttestationOutputWithContext(context.Context) PgpSignedAttestationOutput
}

// An attestation wrapper with a PGP-compatible signature. This message only supports `ATTACHED` signatures, where the payload that is signed is included alongside the signature itself in the same file.
type PgpSignedAttestationArgs struct {
	// Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).
	ContentType PgpSignedAttestationContentTypePtrInput `pulumi:"contentType"`
	// The cryptographic fingerprint of the key used to generate the signature, as output by, e.g. `gpg --list-keys`. This should be the version 4, full 160-bit fingerprint, expressed as a 40 character hexadecimal string. See https://tools.ietf.org/html/rfc4880#section-12.2 for details. Implementations may choose to acknowledge "LONG", "SHORT", or other abbreviated key IDs, but only the full fingerprint is guaranteed to work. In gpg, the full fingerprint can be retrieved from the `fpr` field returned when calling --list-keys with --with-colons. For example: ```gpg --with-colons --with-fingerprint --force-v4-certs \ --list-keys attester@example.com tru::1:1513631572:0:3:1:5 pub:...... fpr:::::::::24FF6481B76AC91E66A00AC657A93A81EF3AE6FB:``` Above, the fingerprint is `24FF6481B76AC91E66A00AC657A93A81EF3AE6FB`.
	PgpKeyId pulumi.StringPtrInput `pulumi:"pgpKeyId"`
	// The raw content of the signature, as output by GNU Privacy Guard (GPG) or equivalent. Since this message only supports attached signatures, the payload that was signed must be attached. While the signature format supported is dependent on the verification implementation, currently only ASCII-armored (`--armor` to gpg), non-clearsigned (`--sign` rather than `--clearsign` to gpg) are supported. Concretely, `gpg --sign --armor --output=signature.gpg payload.json` will create the signature content expected in this field in `signature.gpg` for the `payload.json` attestation payload.
	Signature pulumi.StringInput `pulumi:"signature"`
}

func (PgpSignedAttestationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PgpSignedAttestation)(nil)).Elem()
}

func (i PgpSignedAttestationArgs) ToPgpSignedAttestationOutput() PgpSignedAttestationOutput {
	return i.ToPgpSignedAttestationOutputWithContext(context.Background())
}

func (i PgpSignedAttestationArgs) ToPgpSignedAttestationOutputWithContext(ctx context.Context) PgpSignedAttestationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PgpSignedAttestationOutput)
}

func (i PgpSignedAttestationArgs) ToPgpSignedAttestationPtrOutput() PgpSignedAttestationPtrOutput {
	return i.ToPgpSignedAttestationPtrOutputWithContext(context.Background())
}

func (i PgpSignedAttestationArgs) ToPgpSignedAttestationPtrOutputWithContext(ctx context.Context) PgpSignedAttestationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PgpSignedAttestationOutput).ToPgpSignedAttestationPtrOutputWithContext(ctx)
}

// PgpSignedAttestationPtrInput is an input type that accepts PgpSignedAttestationArgs, PgpSignedAttestationPtr and PgpSignedAttestationPtrOutput values.
// You can construct a concrete instance of `PgpSignedAttestationPtrInput` via:
//
//	        PgpSignedAttestationArgs{...}
//
//	or:
//
//	        nil
type PgpSignedAttestationPtrInput interface {
	pulumi.Input

	ToPgpSignedAttestationPtrOutput() PgpSignedAttestationPtrOutput
	ToPgpSignedAttestationPtrOutputWithContext(context.Context) PgpSignedAttestationPtrOutput
}

type pgpSignedAttestationPtrType PgpSignedAttestationArgs

func PgpSignedAttestationPtr(v *PgpSignedAttestationArgs) PgpSignedAttestationPtrInput {
	return (*pgpSignedAttestationPtrType)(v)
}

func (*pgpSignedAttestationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PgpSignedAttestation)(nil)).Elem()
}

func (i *pgpSignedAttestationPtrType) ToPgpSignedAttestationPtrOutput() PgpSignedAttestationPtrOutput {
	return i.ToPgpSignedAttestationPtrOutputWithContext(context.Background())
}

func (i *pgpSignedAttestationPtrType) ToPgpSignedAttestationPtrOutputWithContext(ctx context.Context) PgpSignedAttestationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PgpSignedAttestationPtrOutput)
}

// An attestation wrapper with a PGP-compatible signature. This message only supports `ATTACHED` signatures, where the payload that is signed is included alongside the signature itself in the same file.
type PgpSignedAttestationOutput struct{ *pulumi.OutputState }

func (PgpSignedAttestationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PgpSignedAttestation)(nil)).Elem()
}

func (o PgpSignedAttestationOutput) ToPgpSignedAttestationOutput() PgpSignedAttestationOutput {
	return o
}

func (o PgpSignedAttestationOutput) ToPgpSignedAttestationOutputWithContext(ctx context.Context) PgpSignedAttestationOutput {
	return o
}

func (o PgpSignedAttestationOutput) ToPgpSignedAttestationPtrOutput() PgpSignedAttestationPtrOutput {
	return o.ToPgpSignedAttestationPtrOutputWithContext(context.Background())
}

func (o PgpSignedAttestationOutput) ToPgpSignedAttestationPtrOutputWithContext(ctx context.Context) PgpSignedAttestationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PgpSignedAttestation) *PgpSignedAttestation {
		return &v
	}).(PgpSignedAttestationPtrOutput)
}

// Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).
func (o PgpSignedAttestationOutput) ContentType() PgpSignedAttestationContentTypePtrOutput {
	return o.ApplyT(func(v PgpSignedAttestation) *PgpSignedAttestationContentType { return v.ContentType }).(PgpSignedAttestationContentTypePtrOutput)
}

// The cryptographic fingerprint of the key used to generate the signature, as output by, e.g. `gpg --list-keys`. This should be the version 4, full 160-bit fingerprint, expressed as a 40 character hexadecimal string. See https://tools.ietf.org/html/rfc4880#section-12.2 for details. Implementations may choose to acknowledge "LONG", "SHORT", or other abbreviated key IDs, but only the full fingerprint is guaranteed to work. In gpg, the full fingerprint can be retrieved from the `fpr` field returned when calling --list-keys with --with-colons. For example: ```gpg --with-colons --with-fingerprint --force-v4-certs \ --list-keys attester@example.com tru::1:1513631572:0:3:1:5 pub:...... fpr:::::::::24FF6481B76AC91E66A00AC657A93A81EF3AE6FB:``` Above, the fingerprint is `24FF6481B76AC91E66A00AC657A93A81EF3AE6FB`.
func (o PgpSignedAttestationOutput) PgpKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PgpSignedAttestation) *string { return v.PgpKeyId }).(pulumi.StringPtrOutput)
}

// The raw content of the signature, as output by GNU Privacy Guard (GPG) or equivalent. Since this message only supports attached signatures, the payload that was signed must be attached. While the signature format supported is dependent on the verification implementation, currently only ASCII-armored (`--armor` to gpg), non-clearsigned (`--sign` rather than `--clearsign` to gpg) are supported. Concretely, `gpg --sign --armor --output=signature.gpg payload.json` will create the signature content expected in this field in `signature.gpg` for the `payload.json` attestation payload.
func (o PgpSignedAttestationOutput) Signature() pulumi.StringOutput {
	return o.ApplyT(func(v PgpSignedAttestation) string { return v.Signature }).(pulumi.StringOutput)
}

type PgpSignedAttestationPtrOutput struct{ *pulumi.OutputState }

func (PgpSignedAttestationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PgpSignedAttestation)(nil)).Elem()
}

func (o PgpSignedAttestationPtrOutput) ToPgpSignedAttestationPtrOutput() PgpSignedAttestationPtrOutput {
	return o
}

func (o PgpSignedAttestationPtrOutput) ToPgpSignedAttestationPtrOutputWithContext(ctx context.Context) PgpSignedAttestationPtrOutput {
	return o
}

func (o PgpSignedAttestationPtrOutput) Elem() PgpSignedAttestationOutput {
	return o.ApplyT(func(v *PgpSignedAttestation) PgpSignedAttestation {
		if v != nil {
			return *v
		}
		var ret PgpSignedAttestation
		return ret
	}).(PgpSignedAttestationOutput)
}

// Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).
func (o PgpSignedAttestationPtrOutput) ContentType() PgpSignedAttestationContentTypePtrOutput {
	return o.ApplyT(func(v *PgpSignedAttestation) *PgpSignedAttestationContentType {
		if v == nil {
			return nil
		}
		return v.ContentType
	}).(PgpSignedAttestationContentTypePtrOutput)
}

// The cryptographic fingerprint of the key used to generate the signature, as output by, e.g. `gpg --list-keys`. This should be the version 4, full 160-bit fingerprint, expressed as a 40 character hexadecimal string. See https://tools.ietf.org/html/rfc4880#section-12.2 for details. Implementations may choose to acknowledge "LONG", "SHORT", or other abbreviated key IDs, but only the full fingerprint is guaranteed to work. In gpg, the full fingerprint can be retrieved from the `fpr` field returned when calling --list-keys with --with-colons. For example: ```gpg --with-colons --with-fingerprint --force-v4-certs \ --list-keys attester@example.com tru::1:1513631572:0:3:1:5 pub:...... fpr:::::::::24FF6481B76AC91E66A00AC657A93A81EF3AE6FB:``` Above, the fingerprint is `24FF6481B76AC91E66A00AC657A93A81EF3AE6FB`.
func (o PgpSignedAttestationPtrOutput) PgpKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PgpSignedAttestation) *string {
		if v == nil {
			return nil
		}
		return v.PgpKeyId
	}).(pulumi.StringPtrOutput)
}

// The raw content of the signature, as output by GNU Privacy Guard (GPG) or equivalent. Since this message only supports attached signatures, the payload that was signed must be attached. While the signature format supported is dependent on the verification implementation, currently only ASCII-armored (`--armor` to gpg), non-clearsigned (`--sign` rather than `--clearsign` to gpg) are supported. Concretely, `gpg --sign --armor --output=signature.gpg payload.json` will create the signature content expected in this field in `signature.gpg` for the `payload.json` attestation payload.
func (o PgpSignedAttestationPtrOutput) Signature() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PgpSignedAttestation) *string {
		if v == nil {
			return nil
		}
		return &v.Signature
	}).(pulumi.StringPtrOutput)
}

// An attestation wrapper with a PGP-compatible signature. This message only supports `ATTACHED` signatures, where the payload that is signed is included alongside the signature itself in the same file.
type PgpSignedAttestationResponse struct {
	// Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).
	ContentType string `pulumi:"contentType"`
	// The cryptographic fingerprint of the key used to generate the signature, as output by, e.g. `gpg --list-keys`. This should be the version 4, full 160-bit fingerprint, expressed as a 40 character hexadecimal string. See https://tools.ietf.org/html/rfc4880#section-12.2 for details. Implementations may choose to acknowledge "LONG", "SHORT", or other abbreviated key IDs, but only the full fingerprint is guaranteed to work. In gpg, the full fingerprint can be retrieved from the `fpr` field returned when calling --list-keys with --with-colons. For example: ```gpg --with-colons --with-fingerprint --force-v4-certs \ --list-keys attester@example.com tru::1:1513631572:0:3:1:5 pub:...... fpr:::::::::24FF6481B76AC91E66A00AC657A93A81EF3AE6FB:``` Above, the fingerprint is `24FF6481B76AC91E66A00AC657A93A81EF3AE6FB`.
	PgpKeyId string `pulumi:"pgpKeyId"`
	// The raw content of the signature, as output by GNU Privacy Guard (GPG) or equivalent. Since this message only supports attached signatures, the payload that was signed must be attached. While the signature format supported is dependent on the verification implementation, currently only ASCII-armored (`--armor` to gpg), non-clearsigned (`--sign` rather than `--clearsign` to gpg) are supported. Concretely, `gpg --sign --armor --output=signature.gpg payload.json` will create the signature content expected in this field in `signature.gpg` for the `payload.json` attestation payload.
	Signature string `pulumi:"signature"`
}

// An attestation wrapper with a PGP-compatible signature. This message only supports `ATTACHED` signatures, where the payload that is signed is included alongside the signature itself in the same file.
type PgpSignedAttestationResponseOutput struct{ *pulumi.OutputState }

func (PgpSignedAttestationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PgpSignedAttestationResponse)(nil)).Elem()
}

func (o PgpSignedAttestationResponseOutput) ToPgpSignedAttestationResponseOutput() PgpSignedAttestationResponseOutput {
	return o
}

func (o PgpSignedAttestationResponseOutput) ToPgpSignedAttestationResponseOutputWithContext(ctx context.Context) PgpSignedAttestationResponseOutput {
	return o
}

// Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).
func (o PgpSignedAttestationResponseOutput) ContentType() pulumi.StringOutput {
	return o.ApplyT(func(v PgpSignedAttestationResponse) string { return v.ContentType }).(pulumi.StringOutput)
}

// The cryptographic fingerprint of the key used to generate the signature, as output by, e.g. `gpg --list-keys`. This should be the version 4, full 160-bit fingerprint, expressed as a 40 character hexadecimal string. See https://tools.ietf.org/html/rfc4880#section-12.2 for details. Implementations may choose to acknowledge "LONG", "SHORT", or other abbreviated key IDs, but only the full fingerprint is guaranteed to work. In gpg, the full fingerprint can be retrieved from the `fpr` field returned when calling --list-keys with --with-colons. For example: ```gpg --with-colons --with-fingerprint --force-v4-certs \ --list-keys attester@example.com tru::1:1513631572:0:3:1:5 pub:...... fpr:::::::::24FF6481B76AC91E66A00AC657A93A81EF3AE6FB:``` Above, the fingerprint is `24FF6481B76AC91E66A00AC657A93A81EF3AE6FB`.
func (o PgpSignedAttestationResponseOutput) PgpKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v PgpSignedAttestationResponse) string { return v.PgpKeyId }).(pulumi.StringOutput)
}

// The raw content of the signature, as output by GNU Privacy Guard (GPG) or equivalent. Since this message only supports attached signatures, the payload that was signed must be attached. While the signature format supported is dependent on the verification implementation, currently only ASCII-armored (`--armor` to gpg), non-clearsigned (`--sign` rather than `--clearsign` to gpg) are supported. Concretely, `gpg --sign --armor --output=signature.gpg payload.json` will create the signature content expected in this field in `signature.gpg` for the `payload.json` attestation payload.
func (o PgpSignedAttestationResponseOutput) Signature() pulumi.StringOutput {
	return o.ApplyT(func(v PgpSignedAttestationResponse) string { return v.Signature }).(pulumi.StringOutput)
}

// Product contains information about a product and how to uniquely identify it.
type Product struct {
	// Contains a URI which is vendor-specific. Example: The artifact repository URL of an image.
	GenericUri *string `pulumi:"genericUri"`
	// Token that identifies a product so that it can be referred to from other parts in the document. There is no predefined format as long as it uniquely identifies a group in the context of the current document.
	Id *string `pulumi:"id"`
	// Name of the product.
	Name *string `pulumi:"name"`
}

// ProductInput is an input type that accepts ProductArgs and ProductOutput values.
// You can construct a concrete instance of `ProductInput` via:
//
//	ProductArgs{...}
type ProductInput interface {
	pulumi.Input

	ToProductOutput() ProductOutput
	ToProductOutputWithContext(context.Context) ProductOutput
}

// Product contains information about a product and how to uniquely identify it.
type ProductArgs struct {
	// Contains a URI which is vendor-specific. Example: The artifact repository URL of an image.
	GenericUri pulumi.StringPtrInput `pulumi:"genericUri"`
	// Token that identifies a product so that it can be referred to from other parts in the document. There is no predefined format as long as it uniquely identifies a group in the context of the current document.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Name of the product.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ProductArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Product)(nil)).Elem()
}

func (i ProductArgs) ToProductOutput() ProductOutput {
	return i.ToProductOutputWithContext(context.Background())
}

func (i ProductArgs) ToProductOutputWithContext(ctx context.Context) ProductOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProductOutput)
}

func (i ProductArgs) ToProductPtrOutput() ProductPtrOutput {
	return i.ToProductPtrOutputWithContext(context.Background())
}

func (i ProductArgs) ToProductPtrOutputWithContext(ctx context.Context) ProductPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProductOutput).ToProductPtrOutputWithContext(ctx)
}

// ProductPtrInput is an input type that accepts ProductArgs, ProductPtr and ProductPtrOutput values.
// You can construct a concrete instance of `ProductPtrInput` via:
//
//	        ProductArgs{...}
//
//	or:
//
//	        nil
type ProductPtrInput interface {
	pulumi.Input

	ToProductPtrOutput() ProductPtrOutput
	ToProductPtrOutputWithContext(context.Context) ProductPtrOutput
}

type productPtrType ProductArgs

func ProductPtr(v *ProductArgs) ProductPtrInput {
	return (*productPtrType)(v)
}

func (*productPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Product)(nil)).Elem()
}

func (i *productPtrType) ToProductPtrOutput() ProductPtrOutput {
	return i.ToProductPtrOutputWithContext(context.Background())
}

func (i *productPtrType) ToProductPtrOutputWithContext(ctx context.Context) ProductPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProductPtrOutput)
}

// Product contains information about a product and how to uniquely identify it.
type ProductOutput struct{ *pulumi.OutputState }

func (ProductOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Product)(nil)).Elem()
}

func (o ProductOutput) ToProductOutput() ProductOutput {
	return o
}

func (o ProductOutput) ToProductOutputWithContext(ctx context.Context) ProductOutput {
	return o
}

func (o ProductOutput) ToProductPtrOutput() ProductPtrOutput {
	return o.ToProductPtrOutputWithContext(context.Background())
}

func (o ProductOutput) ToProductPtrOutputWithContext(ctx context.Context) ProductPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Product) *Product {
		return &v
	}).(ProductPtrOutput)
}

// Contains a URI which is vendor-specific. Example: The artifact repository URL of an image.
func (o ProductOutput) GenericUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Product) *string { return v.GenericUri }).(pulumi.StringPtrOutput)
}

// Token that identifies a product so that it can be referred to from other parts in the document. There is no predefined format as long as it uniquely identifies a group in the context of the current document.
func (o ProductOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Product) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Name of the product.
func (o ProductOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Product) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ProductPtrOutput struct{ *pulumi.OutputState }

func (ProductPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Product)(nil)).Elem()
}

func (o ProductPtrOutput) ToProductPtrOutput() ProductPtrOutput {
	return o
}

func (o ProductPtrOutput) ToProductPtrOutputWithContext(ctx context.Context) ProductPtrOutput {
	return o
}

func (o ProductPtrOutput) Elem() ProductOutput {
	return o.ApplyT(func(v *Product) Product {
		if v != nil {
			return *v
		}
		var ret Product
		return ret
	}).(ProductOutput)
}

// Contains a URI which is vendor-specific. Example: The artifact repository URL of an image.
func (o ProductPtrOutput) GenericUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Product) *string {
		if v == nil {
			return nil
		}
		return v.GenericUri
	}).(pulumi.StringPtrOutput)
}

// Token that identifies a product so that it can be referred to from other parts in the document. There is no predefined format as long as it uniquely identifies a group in the context of the current document.
func (o ProductPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Product) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Name of the product.
func (o ProductPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Product) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Product contains information about a product and how to uniquely identify it.
type ProductResponse struct {
	// Contains a URI which is vendor-specific. Example: The artifact repository URL of an image.
	GenericUri string `pulumi:"genericUri"`
	// Name of the product.
	Name string `pulumi:"name"`
}

// Product contains information about a product and how to uniquely identify it.
type ProductResponseOutput struct{ *pulumi.OutputState }

func (ProductResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProductResponse)(nil)).Elem()
}

func (o ProductResponseOutput) ToProductResponseOutput() ProductResponseOutput {
	return o
}

func (o ProductResponseOutput) ToProductResponseOutputWithContext(ctx context.Context) ProductResponseOutput {
	return o
}

// Contains a URI which is vendor-specific. Example: The artifact repository URL of an image.
func (o ProductResponseOutput) GenericUri() pulumi.StringOutput {
	return o.ApplyT(func(v ProductResponse) string { return v.GenericUri }).(pulumi.StringOutput)
}

// Name of the product.
func (o ProductResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProductResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Selects a repo using a Google Cloud Platform project ID (e.g., winged-cargo-31) and a repo name within that project.
type ProjectRepoId struct {
	// The ID of the project.
	Project *string `pulumi:"project"`
	// The name of the repo. Leave empty for the default repo.
	RepoName *string `pulumi:"repoName"`
}

// ProjectRepoIdInput is an input type that accepts ProjectRepoIdArgs and ProjectRepoIdOutput values.
// You can construct a concrete instance of `ProjectRepoIdInput` via:
//
//	ProjectRepoIdArgs{...}
type ProjectRepoIdInput interface {
	pulumi.Input

	ToProjectRepoIdOutput() ProjectRepoIdOutput
	ToProjectRepoIdOutputWithContext(context.Context) ProjectRepoIdOutput
}

// Selects a repo using a Google Cloud Platform project ID (e.g., winged-cargo-31) and a repo name within that project.
type ProjectRepoIdArgs struct {
	// The ID of the project.
	Project pulumi.StringPtrInput `pulumi:"project"`
	// The name of the repo. Leave empty for the default repo.
	RepoName pulumi.StringPtrInput `pulumi:"repoName"`
}

func (ProjectRepoIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectRepoId)(nil)).Elem()
}

func (i ProjectRepoIdArgs) ToProjectRepoIdOutput() ProjectRepoIdOutput {
	return i.ToProjectRepoIdOutputWithContext(context.Background())
}

func (i ProjectRepoIdArgs) ToProjectRepoIdOutputWithContext(ctx context.Context) ProjectRepoIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectRepoIdOutput)
}

func (i ProjectRepoIdArgs) ToProjectRepoIdPtrOutput() ProjectRepoIdPtrOutput {
	return i.ToProjectRepoIdPtrOutputWithContext(context.Background())
}

func (i ProjectRepoIdArgs) ToProjectRepoIdPtrOutputWithContext(ctx context.Context) ProjectRepoIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectRepoIdOutput).ToProjectRepoIdPtrOutputWithContext(ctx)
}

// ProjectRepoIdPtrInput is an input type that accepts ProjectRepoIdArgs, ProjectRepoIdPtr and ProjectRepoIdPtrOutput values.
// You can construct a concrete instance of `ProjectRepoIdPtrInput` via:
//
//	        ProjectRepoIdArgs{...}
//
//	or:
//
//	        nil
type ProjectRepoIdPtrInput interface {
	pulumi.Input

	ToProjectRepoIdPtrOutput() ProjectRepoIdPtrOutput
	ToProjectRepoIdPtrOutputWithContext(context.Context) ProjectRepoIdPtrOutput
}

type projectRepoIdPtrType ProjectRepoIdArgs

func ProjectRepoIdPtr(v *ProjectRepoIdArgs) ProjectRepoIdPtrInput {
	return (*projectRepoIdPtrType)(v)
}

func (*projectRepoIdPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectRepoId)(nil)).Elem()
}

func (i *projectRepoIdPtrType) ToProjectRepoIdPtrOutput() ProjectRepoIdPtrOutput {
	return i.ToProjectRepoIdPtrOutputWithContext(context.Background())
}

func (i *projectRepoIdPtrType) ToProjectRepoIdPtrOutputWithContext(ctx context.Context) ProjectRepoIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectRepoIdPtrOutput)
}

// Selects a repo using a Google Cloud Platform project ID (e.g., winged-cargo-31) and a repo name within that project.
type ProjectRepoIdOutput struct{ *pulumi.OutputState }

func (ProjectRepoIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectRepoId)(nil)).Elem()
}

func (o ProjectRepoIdOutput) ToProjectRepoIdOutput() ProjectRepoIdOutput {
	return o
}

func (o ProjectRepoIdOutput) ToProjectRepoIdOutputWithContext(ctx context.Context) ProjectRepoIdOutput {
	return o
}

func (o ProjectRepoIdOutput) ToProjectRepoIdPtrOutput() ProjectRepoIdPtrOutput {
	return o.ToProjectRepoIdPtrOutputWithContext(context.Background())
}

func (o ProjectRepoIdOutput) ToProjectRepoIdPtrOutputWithContext(ctx context.Context) ProjectRepoIdPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectRepoId) *ProjectRepoId {
		return &v
	}).(ProjectRepoIdPtrOutput)
}

// The ID of the project.
func (o ProjectRepoIdOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectRepoId) *string { return v.Project }).(pulumi.StringPtrOutput)
}

// The name of the repo. Leave empty for the default repo.
func (o ProjectRepoIdOutput) RepoName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectRepoId) *string { return v.RepoName }).(pulumi.StringPtrOutput)
}

type ProjectRepoIdPtrOutput struct{ *pulumi.OutputState }

func (ProjectRepoIdPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectRepoId)(nil)).Elem()
}

func (o ProjectRepoIdPtrOutput) ToProjectRepoIdPtrOutput() ProjectRepoIdPtrOutput {
	return o
}

func (o ProjectRepoIdPtrOutput) ToProjectRepoIdPtrOutputWithContext(ctx context.Context) ProjectRepoIdPtrOutput {
	return o
}

func (o ProjectRepoIdPtrOutput) Elem() ProjectRepoIdOutput {
	return o.ApplyT(func(v *ProjectRepoId) ProjectRepoId {
		if v != nil {
			return *v
		}
		var ret ProjectRepoId
		return ret
	}).(ProjectRepoIdOutput)
}

// The ID of the project.
func (o ProjectRepoIdPtrOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectRepoId) *string {
		if v == nil {
			return nil
		}
		return v.Project
	}).(pulumi.StringPtrOutput)
}

// The name of the repo. Leave empty for the default repo.
func (o ProjectRepoIdPtrOutput) RepoName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectRepoId) *string {
		if v == nil {
			return nil
		}
		return v.RepoName
	}).(pulumi.StringPtrOutput)
}

// Selects a repo using a Google Cloud Platform project ID (e.g., winged-cargo-31) and a repo name within that project.
type ProjectRepoIdResponse struct {
	// The ID of the project.
	Project string `pulumi:"project"`
	// The name of the repo. Leave empty for the default repo.
	RepoName string `pulumi:"repoName"`
}

// Selects a repo using a Google Cloud Platform project ID (e.g., winged-cargo-31) and a repo name within that project.
type ProjectRepoIdResponseOutput struct{ *pulumi.OutputState }

func (ProjectRepoIdResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectRepoIdResponse)(nil)).Elem()
}

func (o ProjectRepoIdResponseOutput) ToProjectRepoIdResponseOutput() ProjectRepoIdResponseOutput {
	return o
}

func (o ProjectRepoIdResponseOutput) ToProjectRepoIdResponseOutputWithContext(ctx context.Context) ProjectRepoIdResponseOutput {
	return o
}

// The ID of the project.
func (o ProjectRepoIdResponseOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectRepoIdResponse) string { return v.Project }).(pulumi.StringOutput)
}

// The name of the repo. Leave empty for the default repo.
func (o ProjectRepoIdResponseOutput) RepoName() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectRepoIdResponse) string { return v.RepoName }).(pulumi.StringOutput)
}

type ProvenanceBuilder struct {
	BuilderDependencies []ResourceDescriptor `pulumi:"builderDependencies"`
	Id                  *string              `pulumi:"id"`
	Version             map[string]string    `pulumi:"version"`
}

// ProvenanceBuilderInput is an input type that accepts ProvenanceBuilderArgs and ProvenanceBuilderOutput values.
// You can construct a concrete instance of `ProvenanceBuilderInput` via:
//
//	ProvenanceBuilderArgs{...}
type ProvenanceBuilderInput interface {
	pulumi.Input

	ToProvenanceBuilderOutput() ProvenanceBuilderOutput
	ToProvenanceBuilderOutputWithContext(context.Context) ProvenanceBuilderOutput
}

type ProvenanceBuilderArgs struct {
	BuilderDependencies ResourceDescriptorArrayInput `pulumi:"builderDependencies"`
	Id                  pulumi.StringPtrInput        `pulumi:"id"`
	Version             pulumi.StringMapInput        `pulumi:"version"`
}

func (ProvenanceBuilderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProvenanceBuilder)(nil)).Elem()
}

func (i ProvenanceBuilderArgs) ToProvenanceBuilderOutput() ProvenanceBuilderOutput {
	return i.ToProvenanceBuilderOutputWithContext(context.Background())
}

func (i ProvenanceBuilderArgs) ToProvenanceBuilderOutputWithContext(ctx context.Context) ProvenanceBuilderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProvenanceBuilderOutput)
}

func (i ProvenanceBuilderArgs) ToProvenanceBuilderPtrOutput() ProvenanceBuilderPtrOutput {
	return i.ToProvenanceBuilderPtrOutputWithContext(context.Background())
}

func (i ProvenanceBuilderArgs) ToProvenanceBuilderPtrOutputWithContext(ctx context.Context) ProvenanceBuilderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProvenanceBuilderOutput).ToProvenanceBuilderPtrOutputWithContext(ctx)
}

// ProvenanceBuilderPtrInput is an input type that accepts ProvenanceBuilderArgs, ProvenanceBuilderPtr and ProvenanceBuilderPtrOutput values.
// You can construct a concrete instance of `ProvenanceBuilderPtrInput` via:
//
//	        ProvenanceBuilderArgs{...}
//
//	or:
//
//	        nil
type ProvenanceBuilderPtrInput interface {
	pulumi.Input

	ToProvenanceBuilderPtrOutput() ProvenanceBuilderPtrOutput
	ToProvenanceBuilderPtrOutputWithContext(context.Context) ProvenanceBuilderPtrOutput
}

type provenanceBuilderPtrType ProvenanceBuilderArgs

func ProvenanceBuilderPtr(v *ProvenanceBuilderArgs) ProvenanceBuilderPtrInput {
	return (*provenanceBuilderPtrType)(v)
}

func (*provenanceBuilderPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProvenanceBuilder)(nil)).Elem()
}

func (i *provenanceBuilderPtrType) ToProvenanceBuilderPtrOutput() ProvenanceBuilderPtrOutput {
	return i.ToProvenanceBuilderPtrOutputWithContext(context.Background())
}

func (i *provenanceBuilderPtrType) ToProvenanceBuilderPtrOutputWithContext(ctx context.Context) ProvenanceBuilderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProvenanceBuilderPtrOutput)
}

type ProvenanceBuilderOutput struct{ *pulumi.OutputState }

func (ProvenanceBuilderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProvenanceBuilder)(nil)).Elem()
}

func (o ProvenanceBuilderOutput) ToProvenanceBuilderOutput() ProvenanceBuilderOutput {
	return o
}

func (o ProvenanceBuilderOutput) ToProvenanceBuilderOutputWithContext(ctx context.Context) ProvenanceBuilderOutput {
	return o
}

func (o ProvenanceBuilderOutput) ToProvenanceBuilderPtrOutput() ProvenanceBuilderPtrOutput {
	return o.ToProvenanceBuilderPtrOutputWithContext(context.Background())
}

func (o ProvenanceBuilderOutput) ToProvenanceBuilderPtrOutputWithContext(ctx context.Context) ProvenanceBuilderPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProvenanceBuilder) *ProvenanceBuilder {
		return &v
	}).(ProvenanceBuilderPtrOutput)
}

func (o ProvenanceBuilderOutput) BuilderDependencies() ResourceDescriptorArrayOutput {
	return o.ApplyT(func(v ProvenanceBuilder) []ResourceDescriptor { return v.BuilderDependencies }).(ResourceDescriptorArrayOutput)
}

func (o ProvenanceBuilderOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProvenanceBuilder) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o ProvenanceBuilderOutput) Version() pulumi.StringMapOutput {
	return o.ApplyT(func(v ProvenanceBuilder) map[string]string { return v.Version }).(pulumi.StringMapOutput)
}

type ProvenanceBuilderPtrOutput struct{ *pulumi.OutputState }

func (ProvenanceBuilderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProvenanceBuilder)(nil)).Elem()
}

func (o ProvenanceBuilderPtrOutput) ToProvenanceBuilderPtrOutput() ProvenanceBuilderPtrOutput {
	return o
}

func (o ProvenanceBuilderPtrOutput) ToProvenanceBuilderPtrOutputWithContext(ctx context.Context) ProvenanceBuilderPtrOutput {
	return o
}

func (o ProvenanceBuilderPtrOutput) Elem() ProvenanceBuilderOutput {
	return o.ApplyT(func(v *ProvenanceBuilder) ProvenanceBuilder {
		if v != nil {
			return *v
		}
		var ret ProvenanceBuilder
		return ret
	}).(ProvenanceBuilderOutput)
}

func (o ProvenanceBuilderPtrOutput) BuilderDependencies() ResourceDescriptorArrayOutput {
	return o.ApplyT(func(v *ProvenanceBuilder) []ResourceDescriptor {
		if v == nil {
			return nil
		}
		return v.BuilderDependencies
	}).(ResourceDescriptorArrayOutput)
}

func (o ProvenanceBuilderPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProvenanceBuilder) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

func (o ProvenanceBuilderPtrOutput) Version() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ProvenanceBuilder) map[string]string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringMapOutput)
}

type ProvenanceBuilderResponse struct {
	BuilderDependencies []ResourceDescriptorResponse `pulumi:"builderDependencies"`
	Version             map[string]string            `pulumi:"version"`
}

type ProvenanceBuilderResponseOutput struct{ *pulumi.OutputState }

func (ProvenanceBuilderResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProvenanceBuilderResponse)(nil)).Elem()
}

func (o ProvenanceBuilderResponseOutput) ToProvenanceBuilderResponseOutput() ProvenanceBuilderResponseOutput {
	return o
}

func (o ProvenanceBuilderResponseOutput) ToProvenanceBuilderResponseOutputWithContext(ctx context.Context) ProvenanceBuilderResponseOutput {
	return o
}

func (o ProvenanceBuilderResponseOutput) BuilderDependencies() ResourceDescriptorResponseArrayOutput {
	return o.ApplyT(func(v ProvenanceBuilderResponse) []ResourceDescriptorResponse { return v.BuilderDependencies }).(ResourceDescriptorResponseArrayOutput)
}

func (o ProvenanceBuilderResponseOutput) Version() pulumi.StringMapOutput {
	return o.ApplyT(func(v ProvenanceBuilderResponse) map[string]string { return v.Version }).(pulumi.StringMapOutput)
}

// Publisher contains information about the publisher of this Note.
type Publisher struct {
	// Provides information about the authority of the issuing party to release the document, in particular, the party's constituency and responsibilities or other obligations.
	IssuingAuthority *string `pulumi:"issuingAuthority"`
	// Name of the publisher. Examples: 'Google', 'Google Cloud Platform'.
	Name *string `pulumi:"name"`
	// The context or namespace. Contains a URL which is under control of the issuing party and can be used as a globally unique identifier for that issuing party. Example: https://csaf.io
	PublisherNamespace *string `pulumi:"publisherNamespace"`
}

// PublisherInput is an input type that accepts PublisherArgs and PublisherOutput values.
// You can construct a concrete instance of `PublisherInput` via:
//
//	PublisherArgs{...}
type PublisherInput interface {
	pulumi.Input

	ToPublisherOutput() PublisherOutput
	ToPublisherOutputWithContext(context.Context) PublisherOutput
}

// Publisher contains information about the publisher of this Note.
type PublisherArgs struct {
	// Provides information about the authority of the issuing party to release the document, in particular, the party's constituency and responsibilities or other obligations.
	IssuingAuthority pulumi.StringPtrInput `pulumi:"issuingAuthority"`
	// Name of the publisher. Examples: 'Google', 'Google Cloud Platform'.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The context or namespace. Contains a URL which is under control of the issuing party and can be used as a globally unique identifier for that issuing party. Example: https://csaf.io
	PublisherNamespace pulumi.StringPtrInput `pulumi:"publisherNamespace"`
}

func (PublisherArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Publisher)(nil)).Elem()
}

func (i PublisherArgs) ToPublisherOutput() PublisherOutput {
	return i.ToPublisherOutputWithContext(context.Background())
}

func (i PublisherArgs) ToPublisherOutputWithContext(ctx context.Context) PublisherOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublisherOutput)
}

func (i PublisherArgs) ToPublisherPtrOutput() PublisherPtrOutput {
	return i.ToPublisherPtrOutputWithContext(context.Background())
}

func (i PublisherArgs) ToPublisherPtrOutputWithContext(ctx context.Context) PublisherPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublisherOutput).ToPublisherPtrOutputWithContext(ctx)
}

// PublisherPtrInput is an input type that accepts PublisherArgs, PublisherPtr and PublisherPtrOutput values.
// You can construct a concrete instance of `PublisherPtrInput` via:
//
//	        PublisherArgs{...}
//
//	or:
//
//	        nil
type PublisherPtrInput interface {
	pulumi.Input

	ToPublisherPtrOutput() PublisherPtrOutput
	ToPublisherPtrOutputWithContext(context.Context) PublisherPtrOutput
}

type publisherPtrType PublisherArgs

func PublisherPtr(v *PublisherArgs) PublisherPtrInput {
	return (*publisherPtrType)(v)
}

func (*publisherPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Publisher)(nil)).Elem()
}

func (i *publisherPtrType) ToPublisherPtrOutput() PublisherPtrOutput {
	return i.ToPublisherPtrOutputWithContext(context.Background())
}

func (i *publisherPtrType) ToPublisherPtrOutputWithContext(ctx context.Context) PublisherPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublisherPtrOutput)
}

// Publisher contains information about the publisher of this Note.
type PublisherOutput struct{ *pulumi.OutputState }

func (PublisherOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Publisher)(nil)).Elem()
}

func (o PublisherOutput) ToPublisherOutput() PublisherOutput {
	return o
}

func (o PublisherOutput) ToPublisherOutputWithContext(ctx context.Context) PublisherOutput {
	return o
}

func (o PublisherOutput) ToPublisherPtrOutput() PublisherPtrOutput {
	return o.ToPublisherPtrOutputWithContext(context.Background())
}

func (o PublisherOutput) ToPublisherPtrOutputWithContext(ctx context.Context) PublisherPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Publisher) *Publisher {
		return &v
	}).(PublisherPtrOutput)
}

// Provides information about the authority of the issuing party to release the document, in particular, the party's constituency and responsibilities or other obligations.
func (o PublisherOutput) IssuingAuthority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Publisher) *string { return v.IssuingAuthority }).(pulumi.StringPtrOutput)
}

// Name of the publisher. Examples: 'Google', 'Google Cloud Platform'.
func (o PublisherOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Publisher) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The context or namespace. Contains a URL which is under control of the issuing party and can be used as a globally unique identifier for that issuing party. Example: https://csaf.io
func (o PublisherOutput) PublisherNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Publisher) *string { return v.PublisherNamespace }).(pulumi.StringPtrOutput)
}

type PublisherPtrOutput struct{ *pulumi.OutputState }

func (PublisherPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Publisher)(nil)).Elem()
}

func (o PublisherPtrOutput) ToPublisherPtrOutput() PublisherPtrOutput {
	return o
}

func (o PublisherPtrOutput) ToPublisherPtrOutputWithContext(ctx context.Context) PublisherPtrOutput {
	return o
}

func (o PublisherPtrOutput) Elem() PublisherOutput {
	return o.ApplyT(func(v *Publisher) Publisher {
		if v != nil {
			return *v
		}
		var ret Publisher
		return ret
	}).(PublisherOutput)
}

// Provides information about the authority of the issuing party to release the document, in particular, the party's constituency and responsibilities or other obligations.
func (o PublisherPtrOutput) IssuingAuthority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Publisher) *string {
		if v == nil {
			return nil
		}
		return v.IssuingAuthority
	}).(pulumi.StringPtrOutput)
}

// Name of the publisher. Examples: 'Google', 'Google Cloud Platform'.
func (o PublisherPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Publisher) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The context or namespace. Contains a URL which is under control of the issuing party and can be used as a globally unique identifier for that issuing party. Example: https://csaf.io
func (o PublisherPtrOutput) PublisherNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Publisher) *string {
		if v == nil {
			return nil
		}
		return v.PublisherNamespace
	}).(pulumi.StringPtrOutput)
}

// Publisher contains information about the publisher of this Note.
type PublisherResponse struct {
	// Provides information about the authority of the issuing party to release the document, in particular, the party's constituency and responsibilities or other obligations.
	IssuingAuthority string `pulumi:"issuingAuthority"`
	// Name of the publisher. Examples: 'Google', 'Google Cloud Platform'.
	Name string `pulumi:"name"`
	// The context or namespace. Contains a URL which is under control of the issuing party and can be used as a globally unique identifier for that issuing party. Example: https://csaf.io
	PublisherNamespace string `pulumi:"publisherNamespace"`
}

// Publisher contains information about the publisher of this Note.
type PublisherResponseOutput struct{ *pulumi.OutputState }

func (PublisherResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PublisherResponse)(nil)).Elem()
}

func (o PublisherResponseOutput) ToPublisherResponseOutput() PublisherResponseOutput {
	return o
}

func (o PublisherResponseOutput) ToPublisherResponseOutputWithContext(ctx context.Context) PublisherResponseOutput {
	return o
}

// Provides information about the authority of the issuing party to release the document, in particular, the party's constituency and responsibilities or other obligations.
func (o PublisherResponseOutput) IssuingAuthority() pulumi.StringOutput {
	return o.ApplyT(func(v PublisherResponse) string { return v.IssuingAuthority }).(pulumi.StringOutput)
}

// Name of the publisher. Examples: 'Google', 'Google Cloud Platform'.
func (o PublisherResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PublisherResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The context or namespace. Contains a URL which is under control of the issuing party and can be used as a globally unique identifier for that issuing party. Example: https://csaf.io
func (o PublisherResponseOutput) PublisherNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v PublisherResponse) string { return v.PublisherNamespace }).(pulumi.StringOutput)
}

// Metadata for any related URL information.
type RelatedUrl struct {
	// Label to describe usage of the URL.
	Label *string `pulumi:"label"`
	// Specific URL associated with the resource.
	Url *string `pulumi:"url"`
}

// RelatedUrlInput is an input type that accepts RelatedUrlArgs and RelatedUrlOutput values.
// You can construct a concrete instance of `RelatedUrlInput` via:
//
//	RelatedUrlArgs{...}
type RelatedUrlInput interface {
	pulumi.Input

	ToRelatedUrlOutput() RelatedUrlOutput
	ToRelatedUrlOutputWithContext(context.Context) RelatedUrlOutput
}

// Metadata for any related URL information.
type RelatedUrlArgs struct {
	// Label to describe usage of the URL.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// Specific URL associated with the resource.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (RelatedUrlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RelatedUrl)(nil)).Elem()
}

func (i RelatedUrlArgs) ToRelatedUrlOutput() RelatedUrlOutput {
	return i.ToRelatedUrlOutputWithContext(context.Background())
}

func (i RelatedUrlArgs) ToRelatedUrlOutputWithContext(ctx context.Context) RelatedUrlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelatedUrlOutput)
}

func (i RelatedUrlArgs) ToRelatedUrlPtrOutput() RelatedUrlPtrOutput {
	return i.ToRelatedUrlPtrOutputWithContext(context.Background())
}

func (i RelatedUrlArgs) ToRelatedUrlPtrOutputWithContext(ctx context.Context) RelatedUrlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelatedUrlOutput).ToRelatedUrlPtrOutputWithContext(ctx)
}

// RelatedUrlPtrInput is an input type that accepts RelatedUrlArgs, RelatedUrlPtr and RelatedUrlPtrOutput values.
// You can construct a concrete instance of `RelatedUrlPtrInput` via:
//
//	        RelatedUrlArgs{...}
//
//	or:
//
//	        nil
type RelatedUrlPtrInput interface {
	pulumi.Input

	ToRelatedUrlPtrOutput() RelatedUrlPtrOutput
	ToRelatedUrlPtrOutputWithContext(context.Context) RelatedUrlPtrOutput
}

type relatedUrlPtrType RelatedUrlArgs

func RelatedUrlPtr(v *RelatedUrlArgs) RelatedUrlPtrInput {
	return (*relatedUrlPtrType)(v)
}

func (*relatedUrlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RelatedUrl)(nil)).Elem()
}

func (i *relatedUrlPtrType) ToRelatedUrlPtrOutput() RelatedUrlPtrOutput {
	return i.ToRelatedUrlPtrOutputWithContext(context.Background())
}

func (i *relatedUrlPtrType) ToRelatedUrlPtrOutputWithContext(ctx context.Context) RelatedUrlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelatedUrlPtrOutput)
}

// RelatedUrlArrayInput is an input type that accepts RelatedUrlArray and RelatedUrlArrayOutput values.
// You can construct a concrete instance of `RelatedUrlArrayInput` via:
//
//	RelatedUrlArray{ RelatedUrlArgs{...} }
type RelatedUrlArrayInput interface {
	pulumi.Input

	ToRelatedUrlArrayOutput() RelatedUrlArrayOutput
	ToRelatedUrlArrayOutputWithContext(context.Context) RelatedUrlArrayOutput
}

type RelatedUrlArray []RelatedUrlInput

func (RelatedUrlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RelatedUrl)(nil)).Elem()
}

func (i RelatedUrlArray) ToRelatedUrlArrayOutput() RelatedUrlArrayOutput {
	return i.ToRelatedUrlArrayOutputWithContext(context.Background())
}

func (i RelatedUrlArray) ToRelatedUrlArrayOutputWithContext(ctx context.Context) RelatedUrlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelatedUrlArrayOutput)
}

// Metadata for any related URL information.
type RelatedUrlOutput struct{ *pulumi.OutputState }

func (RelatedUrlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RelatedUrl)(nil)).Elem()
}

func (o RelatedUrlOutput) ToRelatedUrlOutput() RelatedUrlOutput {
	return o
}

func (o RelatedUrlOutput) ToRelatedUrlOutputWithContext(ctx context.Context) RelatedUrlOutput {
	return o
}

func (o RelatedUrlOutput) ToRelatedUrlPtrOutput() RelatedUrlPtrOutput {
	return o.ToRelatedUrlPtrOutputWithContext(context.Background())
}

func (o RelatedUrlOutput) ToRelatedUrlPtrOutputWithContext(ctx context.Context) RelatedUrlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RelatedUrl) *RelatedUrl {
		return &v
	}).(RelatedUrlPtrOutput)
}

// Label to describe usage of the URL.
func (o RelatedUrlOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RelatedUrl) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// Specific URL associated with the resource.
func (o RelatedUrlOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RelatedUrl) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type RelatedUrlPtrOutput struct{ *pulumi.OutputState }

func (RelatedUrlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RelatedUrl)(nil)).Elem()
}

func (o RelatedUrlPtrOutput) ToRelatedUrlPtrOutput() RelatedUrlPtrOutput {
	return o
}

func (o RelatedUrlPtrOutput) ToRelatedUrlPtrOutputWithContext(ctx context.Context) RelatedUrlPtrOutput {
	return o
}

func (o RelatedUrlPtrOutput) Elem() RelatedUrlOutput {
	return o.ApplyT(func(v *RelatedUrl) RelatedUrl {
		if v != nil {
			return *v
		}
		var ret RelatedUrl
		return ret
	}).(RelatedUrlOutput)
}

// Label to describe usage of the URL.
func (o RelatedUrlPtrOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RelatedUrl) *string {
		if v == nil {
			return nil
		}
		return v.Label
	}).(pulumi.StringPtrOutput)
}

// Specific URL associated with the resource.
func (o RelatedUrlPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RelatedUrl) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

type RelatedUrlArrayOutput struct{ *pulumi.OutputState }

func (RelatedUrlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RelatedUrl)(nil)).Elem()
}

func (o RelatedUrlArrayOutput) ToRelatedUrlArrayOutput() RelatedUrlArrayOutput {
	return o
}

func (o RelatedUrlArrayOutput) ToRelatedUrlArrayOutputWithContext(ctx context.Context) RelatedUrlArrayOutput {
	return o
}

func (o RelatedUrlArrayOutput) Index(i pulumi.IntInput) RelatedUrlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RelatedUrl {
		return vs[0].([]RelatedUrl)[vs[1].(int)]
	}).(RelatedUrlOutput)
}

// Metadata for any related URL information.
type RelatedUrlResponse struct {
	// Label to describe usage of the URL.
	Label string `pulumi:"label"`
	// Specific URL associated with the resource.
	Url string `pulumi:"url"`
}

// Metadata for any related URL information.
type RelatedUrlResponseOutput struct{ *pulumi.OutputState }

func (RelatedUrlResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RelatedUrlResponse)(nil)).Elem()
}

func (o RelatedUrlResponseOutput) ToRelatedUrlResponseOutput() RelatedUrlResponseOutput {
	return o
}

func (o RelatedUrlResponseOutput) ToRelatedUrlResponseOutputWithContext(ctx context.Context) RelatedUrlResponseOutput {
	return o
}

// Label to describe usage of the URL.
func (o RelatedUrlResponseOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v RelatedUrlResponse) string { return v.Label }).(pulumi.StringOutput)
}

// Specific URL associated with the resource.
func (o RelatedUrlResponseOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v RelatedUrlResponse) string { return v.Url }).(pulumi.StringOutput)
}

type RelatedUrlResponseArrayOutput struct{ *pulumi.OutputState }

func (RelatedUrlResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RelatedUrlResponse)(nil)).Elem()
}

func (o RelatedUrlResponseArrayOutput) ToRelatedUrlResponseArrayOutput() RelatedUrlResponseArrayOutput {
	return o
}

func (o RelatedUrlResponseArrayOutput) ToRelatedUrlResponseArrayOutputWithContext(ctx context.Context) RelatedUrlResponseArrayOutput {
	return o
}

func (o RelatedUrlResponseArrayOutput) Index(i pulumi.IntInput) RelatedUrlResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RelatedUrlResponse {
		return vs[0].([]RelatedUrlResponse)[vs[1].(int)]
	}).(RelatedUrlResponseOutput)
}

// RelationshipNote represents an SPDX Relationship section: https://spdx.github.io/spdx-spec/7-relationships-between-SPDX-elements/
type RelationshipNote struct {
	// The type of relationship between the source and target SPDX elements
	Type *RelationshipNoteType `pulumi:"type"`
}

// RelationshipNoteInput is an input type that accepts RelationshipNoteArgs and RelationshipNoteOutput values.
// You can construct a concrete instance of `RelationshipNoteInput` via:
//
//	RelationshipNoteArgs{...}
type RelationshipNoteInput interface {
	pulumi.Input

	ToRelationshipNoteOutput() RelationshipNoteOutput
	ToRelationshipNoteOutputWithContext(context.Context) RelationshipNoteOutput
}

// RelationshipNote represents an SPDX Relationship section: https://spdx.github.io/spdx-spec/7-relationships-between-SPDX-elements/
type RelationshipNoteArgs struct {
	// The type of relationship between the source and target SPDX elements
	Type RelationshipNoteTypePtrInput `pulumi:"type"`
}

func (RelationshipNoteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RelationshipNote)(nil)).Elem()
}

func (i RelationshipNoteArgs) ToRelationshipNoteOutput() RelationshipNoteOutput {
	return i.ToRelationshipNoteOutputWithContext(context.Background())
}

func (i RelationshipNoteArgs) ToRelationshipNoteOutputWithContext(ctx context.Context) RelationshipNoteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelationshipNoteOutput)
}

func (i RelationshipNoteArgs) ToRelationshipNotePtrOutput() RelationshipNotePtrOutput {
	return i.ToRelationshipNotePtrOutputWithContext(context.Background())
}

func (i RelationshipNoteArgs) ToRelationshipNotePtrOutputWithContext(ctx context.Context) RelationshipNotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelationshipNoteOutput).ToRelationshipNotePtrOutputWithContext(ctx)
}

// RelationshipNotePtrInput is an input type that accepts RelationshipNoteArgs, RelationshipNotePtr and RelationshipNotePtrOutput values.
// You can construct a concrete instance of `RelationshipNotePtrInput` via:
//
//	        RelationshipNoteArgs{...}
//
//	or:
//
//	        nil
type RelationshipNotePtrInput interface {
	pulumi.Input

	ToRelationshipNotePtrOutput() RelationshipNotePtrOutput
	ToRelationshipNotePtrOutputWithContext(context.Context) RelationshipNotePtrOutput
}

type relationshipNotePtrType RelationshipNoteArgs

func RelationshipNotePtr(v *RelationshipNoteArgs) RelationshipNotePtrInput {
	return (*relationshipNotePtrType)(v)
}

func (*relationshipNotePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RelationshipNote)(nil)).Elem()
}

func (i *relationshipNotePtrType) ToRelationshipNotePtrOutput() RelationshipNotePtrOutput {
	return i.ToRelationshipNotePtrOutputWithContext(context.Background())
}

func (i *relationshipNotePtrType) ToRelationshipNotePtrOutputWithContext(ctx context.Context) RelationshipNotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelationshipNotePtrOutput)
}

// RelationshipNote represents an SPDX Relationship section: https://spdx.github.io/spdx-spec/7-relationships-between-SPDX-elements/
type RelationshipNoteOutput struct{ *pulumi.OutputState }

func (RelationshipNoteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RelationshipNote)(nil)).Elem()
}

func (o RelationshipNoteOutput) ToRelationshipNoteOutput() RelationshipNoteOutput {
	return o
}

func (o RelationshipNoteOutput) ToRelationshipNoteOutputWithContext(ctx context.Context) RelationshipNoteOutput {
	return o
}

func (o RelationshipNoteOutput) ToRelationshipNotePtrOutput() RelationshipNotePtrOutput {
	return o.ToRelationshipNotePtrOutputWithContext(context.Background())
}

func (o RelationshipNoteOutput) ToRelationshipNotePtrOutputWithContext(ctx context.Context) RelationshipNotePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RelationshipNote) *RelationshipNote {
		return &v
	}).(RelationshipNotePtrOutput)
}

// The type of relationship between the source and target SPDX elements
func (o RelationshipNoteOutput) Type() RelationshipNoteTypePtrOutput {
	return o.ApplyT(func(v RelationshipNote) *RelationshipNoteType { return v.Type }).(RelationshipNoteTypePtrOutput)
}

type RelationshipNotePtrOutput struct{ *pulumi.OutputState }

func (RelationshipNotePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RelationshipNote)(nil)).Elem()
}

func (o RelationshipNotePtrOutput) ToRelationshipNotePtrOutput() RelationshipNotePtrOutput {
	return o
}

func (o RelationshipNotePtrOutput) ToRelationshipNotePtrOutputWithContext(ctx context.Context) RelationshipNotePtrOutput {
	return o
}

func (o RelationshipNotePtrOutput) Elem() RelationshipNoteOutput {
	return o.ApplyT(func(v *RelationshipNote) RelationshipNote {
		if v != nil {
			return *v
		}
		var ret RelationshipNote
		return ret
	}).(RelationshipNoteOutput)
}

// The type of relationship between the source and target SPDX elements
func (o RelationshipNotePtrOutput) Type() RelationshipNoteTypePtrOutput {
	return o.ApplyT(func(v *RelationshipNote) *RelationshipNoteType {
		if v == nil {
			return nil
		}
		return v.Type
	}).(RelationshipNoteTypePtrOutput)
}

// RelationshipNote represents an SPDX Relationship section: https://spdx.github.io/spdx-spec/7-relationships-between-SPDX-elements/
type RelationshipNoteResponse struct {
	// The type of relationship between the source and target SPDX elements
	Type string `pulumi:"type"`
}

// RelationshipNote represents an SPDX Relationship section: https://spdx.github.io/spdx-spec/7-relationships-between-SPDX-elements/
type RelationshipNoteResponseOutput struct{ *pulumi.OutputState }

func (RelationshipNoteResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RelationshipNoteResponse)(nil)).Elem()
}

func (o RelationshipNoteResponseOutput) ToRelationshipNoteResponseOutput() RelationshipNoteResponseOutput {
	return o
}

func (o RelationshipNoteResponseOutput) ToRelationshipNoteResponseOutputWithContext(ctx context.Context) RelationshipNoteResponseOutput {
	return o
}

// The type of relationship between the source and target SPDX elements
func (o RelationshipNoteResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RelationshipNoteResponse) string { return v.Type }).(pulumi.StringOutput)
}

// RelationshipOccurrence represents an SPDX Relationship section: https://spdx.github.io/spdx-spec/7-relationships-between-SPDX-elements/
type RelationshipOccurrence struct {
	// A place for the SPDX file creator to record any general comments about the relationship
	Comment *string `pulumi:"comment"`
	// Also referred to as SPDXRef-A The source SPDX element (file, package, etc)
	Source *string `pulumi:"source"`
	// Also referred to as SPDXRef-B The target SPDC element (file, package, etc) In cases where there are "known unknowns", the use of the keyword NOASSERTION can be used The keywords NONE can be used to indicate that an SPDX element (package/file/snippet) has no other elements connected by some relationship to it
	Target *string `pulumi:"target"`
}

// RelationshipOccurrenceInput is an input type that accepts RelationshipOccurrenceArgs and RelationshipOccurrenceOutput values.
// You can construct a concrete instance of `RelationshipOccurrenceInput` via:
//
//	RelationshipOccurrenceArgs{...}
type RelationshipOccurrenceInput interface {
	pulumi.Input

	ToRelationshipOccurrenceOutput() RelationshipOccurrenceOutput
	ToRelationshipOccurrenceOutputWithContext(context.Context) RelationshipOccurrenceOutput
}

// RelationshipOccurrence represents an SPDX Relationship section: https://spdx.github.io/spdx-spec/7-relationships-between-SPDX-elements/
type RelationshipOccurrenceArgs struct {
	// A place for the SPDX file creator to record any general comments about the relationship
	Comment pulumi.StringPtrInput `pulumi:"comment"`
	// Also referred to as SPDXRef-A The source SPDX element (file, package, etc)
	Source pulumi.StringPtrInput `pulumi:"source"`
	// Also referred to as SPDXRef-B The target SPDC element (file, package, etc) In cases where there are "known unknowns", the use of the keyword NOASSERTION can be used The keywords NONE can be used to indicate that an SPDX element (package/file/snippet) has no other elements connected by some relationship to it
	Target pulumi.StringPtrInput `pulumi:"target"`
}

func (RelationshipOccurrenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RelationshipOccurrence)(nil)).Elem()
}

func (i RelationshipOccurrenceArgs) ToRelationshipOccurrenceOutput() RelationshipOccurrenceOutput {
	return i.ToRelationshipOccurrenceOutputWithContext(context.Background())
}

func (i RelationshipOccurrenceArgs) ToRelationshipOccurrenceOutputWithContext(ctx context.Context) RelationshipOccurrenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelationshipOccurrenceOutput)
}

func (i RelationshipOccurrenceArgs) ToRelationshipOccurrencePtrOutput() RelationshipOccurrencePtrOutput {
	return i.ToRelationshipOccurrencePtrOutputWithContext(context.Background())
}

func (i RelationshipOccurrenceArgs) ToRelationshipOccurrencePtrOutputWithContext(ctx context.Context) RelationshipOccurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelationshipOccurrenceOutput).ToRelationshipOccurrencePtrOutputWithContext(ctx)
}

// RelationshipOccurrencePtrInput is an input type that accepts RelationshipOccurrenceArgs, RelationshipOccurrencePtr and RelationshipOccurrencePtrOutput values.
// You can construct a concrete instance of `RelationshipOccurrencePtrInput` via:
//
//	        RelationshipOccurrenceArgs{...}
//
//	or:
//
//	        nil
type RelationshipOccurrencePtrInput interface {
	pulumi.Input

	ToRelationshipOccurrencePtrOutput() RelationshipOccurrencePtrOutput
	ToRelationshipOccurrencePtrOutputWithContext(context.Context) RelationshipOccurrencePtrOutput
}

type relationshipOccurrencePtrType RelationshipOccurrenceArgs

func RelationshipOccurrencePtr(v *RelationshipOccurrenceArgs) RelationshipOccurrencePtrInput {
	return (*relationshipOccurrencePtrType)(v)
}

func (*relationshipOccurrencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RelationshipOccurrence)(nil)).Elem()
}

func (i *relationshipOccurrencePtrType) ToRelationshipOccurrencePtrOutput() RelationshipOccurrencePtrOutput {
	return i.ToRelationshipOccurrencePtrOutputWithContext(context.Background())
}

func (i *relationshipOccurrencePtrType) ToRelationshipOccurrencePtrOutputWithContext(ctx context.Context) RelationshipOccurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelationshipOccurrencePtrOutput)
}

// RelationshipOccurrence represents an SPDX Relationship section: https://spdx.github.io/spdx-spec/7-relationships-between-SPDX-elements/
type RelationshipOccurrenceOutput struct{ *pulumi.OutputState }

func (RelationshipOccurrenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RelationshipOccurrence)(nil)).Elem()
}

func (o RelationshipOccurrenceOutput) ToRelationshipOccurrenceOutput() RelationshipOccurrenceOutput {
	return o
}

func (o RelationshipOccurrenceOutput) ToRelationshipOccurrenceOutputWithContext(ctx context.Context) RelationshipOccurrenceOutput {
	return o
}

func (o RelationshipOccurrenceOutput) ToRelationshipOccurrencePtrOutput() RelationshipOccurrencePtrOutput {
	return o.ToRelationshipOccurrencePtrOutputWithContext(context.Background())
}

func (o RelationshipOccurrenceOutput) ToRelationshipOccurrencePtrOutputWithContext(ctx context.Context) RelationshipOccurrencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RelationshipOccurrence) *RelationshipOccurrence {
		return &v
	}).(RelationshipOccurrencePtrOutput)
}

// A place for the SPDX file creator to record any general comments about the relationship
func (o RelationshipOccurrenceOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RelationshipOccurrence) *string { return v.Comment }).(pulumi.StringPtrOutput)
}

// Also referred to as SPDXRef-A The source SPDX element (file, package, etc)
func (o RelationshipOccurrenceOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RelationshipOccurrence) *string { return v.Source }).(pulumi.StringPtrOutput)
}

// Also referred to as SPDXRef-B The target SPDC element (file, package, etc) In cases where there are "known unknowns", the use of the keyword NOASSERTION can be used The keywords NONE can be used to indicate that an SPDX element (package/file/snippet) has no other elements connected by some relationship to it
func (o RelationshipOccurrenceOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RelationshipOccurrence) *string { return v.Target }).(pulumi.StringPtrOutput)
}

type RelationshipOccurrencePtrOutput struct{ *pulumi.OutputState }

func (RelationshipOccurrencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RelationshipOccurrence)(nil)).Elem()
}

func (o RelationshipOccurrencePtrOutput) ToRelationshipOccurrencePtrOutput() RelationshipOccurrencePtrOutput {
	return o
}

func (o RelationshipOccurrencePtrOutput) ToRelationshipOccurrencePtrOutputWithContext(ctx context.Context) RelationshipOccurrencePtrOutput {
	return o
}

func (o RelationshipOccurrencePtrOutput) Elem() RelationshipOccurrenceOutput {
	return o.ApplyT(func(v *RelationshipOccurrence) RelationshipOccurrence {
		if v != nil {
			return *v
		}
		var ret RelationshipOccurrence
		return ret
	}).(RelationshipOccurrenceOutput)
}

// A place for the SPDX file creator to record any general comments about the relationship
func (o RelationshipOccurrencePtrOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RelationshipOccurrence) *string {
		if v == nil {
			return nil
		}
		return v.Comment
	}).(pulumi.StringPtrOutput)
}

// Also referred to as SPDXRef-A The source SPDX element (file, package, etc)
func (o RelationshipOccurrencePtrOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RelationshipOccurrence) *string {
		if v == nil {
			return nil
		}
		return v.Source
	}).(pulumi.StringPtrOutput)
}

// Also referred to as SPDXRef-B The target SPDC element (file, package, etc) In cases where there are "known unknowns", the use of the keyword NOASSERTION can be used The keywords NONE can be used to indicate that an SPDX element (package/file/snippet) has no other elements connected by some relationship to it
func (o RelationshipOccurrencePtrOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RelationshipOccurrence) *string {
		if v == nil {
			return nil
		}
		return v.Target
	}).(pulumi.StringPtrOutput)
}

// RelationshipOccurrence represents an SPDX Relationship section: https://spdx.github.io/spdx-spec/7-relationships-between-SPDX-elements/
type RelationshipOccurrenceResponse struct {
	// A place for the SPDX file creator to record any general comments about the relationship
	Comment string `pulumi:"comment"`
	// Also referred to as SPDXRef-A The source SPDX element (file, package, etc)
	Source string `pulumi:"source"`
	// Also referred to as SPDXRef-B The target SPDC element (file, package, etc) In cases where there are "known unknowns", the use of the keyword NOASSERTION can be used The keywords NONE can be used to indicate that an SPDX element (package/file/snippet) has no other elements connected by some relationship to it
	Target string `pulumi:"target"`
	// The type of relationship between the source and target SPDX elements
	Type string `pulumi:"type"`
}

// RelationshipOccurrence represents an SPDX Relationship section: https://spdx.github.io/spdx-spec/7-relationships-between-SPDX-elements/
type RelationshipOccurrenceResponseOutput struct{ *pulumi.OutputState }

func (RelationshipOccurrenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RelationshipOccurrenceResponse)(nil)).Elem()
}

func (o RelationshipOccurrenceResponseOutput) ToRelationshipOccurrenceResponseOutput() RelationshipOccurrenceResponseOutput {
	return o
}

func (o RelationshipOccurrenceResponseOutput) ToRelationshipOccurrenceResponseOutputWithContext(ctx context.Context) RelationshipOccurrenceResponseOutput {
	return o
}

// A place for the SPDX file creator to record any general comments about the relationship
func (o RelationshipOccurrenceResponseOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v RelationshipOccurrenceResponse) string { return v.Comment }).(pulumi.StringOutput)
}

// Also referred to as SPDXRef-A The source SPDX element (file, package, etc)
func (o RelationshipOccurrenceResponseOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v RelationshipOccurrenceResponse) string { return v.Source }).(pulumi.StringOutput)
}

// Also referred to as SPDXRef-B The target SPDC element (file, package, etc) In cases where there are "known unknowns", the use of the keyword NOASSERTION can be used The keywords NONE can be used to indicate that an SPDX element (package/file/snippet) has no other elements connected by some relationship to it
func (o RelationshipOccurrenceResponseOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v RelationshipOccurrenceResponse) string { return v.Target }).(pulumi.StringOutput)
}

// The type of relationship between the source and target SPDX elements
func (o RelationshipOccurrenceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RelationshipOccurrenceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies details on how to handle (and presumably, fix) a vulnerability.
type Remediation struct {
	// Contains a comprehensive human-readable discussion of the remediation.
	Details *string `pulumi:"details"`
	// The type of remediation that can be applied.
	RemediationType *RemediationRemediationType `pulumi:"remediationType"`
	// Contains the URL where to obtain the remediation.
	RemediationUri *RelatedUrl `pulumi:"remediationUri"`
}

// RemediationInput is an input type that accepts RemediationArgs and RemediationOutput values.
// You can construct a concrete instance of `RemediationInput` via:
//
//	RemediationArgs{...}
type RemediationInput interface {
	pulumi.Input

	ToRemediationOutput() RemediationOutput
	ToRemediationOutputWithContext(context.Context) RemediationOutput
}

// Specifies details on how to handle (and presumably, fix) a vulnerability.
type RemediationArgs struct {
	// Contains a comprehensive human-readable discussion of the remediation.
	Details pulumi.StringPtrInput `pulumi:"details"`
	// The type of remediation that can be applied.
	RemediationType RemediationRemediationTypePtrInput `pulumi:"remediationType"`
	// Contains the URL where to obtain the remediation.
	RemediationUri RelatedUrlPtrInput `pulumi:"remediationUri"`
}

func (RemediationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Remediation)(nil)).Elem()
}

func (i RemediationArgs) ToRemediationOutput() RemediationOutput {
	return i.ToRemediationOutputWithContext(context.Background())
}

func (i RemediationArgs) ToRemediationOutputWithContext(ctx context.Context) RemediationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemediationOutput)
}

// RemediationArrayInput is an input type that accepts RemediationArray and RemediationArrayOutput values.
// You can construct a concrete instance of `RemediationArrayInput` via:
//
//	RemediationArray{ RemediationArgs{...} }
type RemediationArrayInput interface {
	pulumi.Input

	ToRemediationArrayOutput() RemediationArrayOutput
	ToRemediationArrayOutputWithContext(context.Context) RemediationArrayOutput
}

type RemediationArray []RemediationInput

func (RemediationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Remediation)(nil)).Elem()
}

func (i RemediationArray) ToRemediationArrayOutput() RemediationArrayOutput {
	return i.ToRemediationArrayOutputWithContext(context.Background())
}

func (i RemediationArray) ToRemediationArrayOutputWithContext(ctx context.Context) RemediationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemediationArrayOutput)
}

// Specifies details on how to handle (and presumably, fix) a vulnerability.
type RemediationOutput struct{ *pulumi.OutputState }

func (RemediationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Remediation)(nil)).Elem()
}

func (o RemediationOutput) ToRemediationOutput() RemediationOutput {
	return o
}

func (o RemediationOutput) ToRemediationOutputWithContext(ctx context.Context) RemediationOutput {
	return o
}

// Contains a comprehensive human-readable discussion of the remediation.
func (o RemediationOutput) Details() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Remediation) *string { return v.Details }).(pulumi.StringPtrOutput)
}

// The type of remediation that can be applied.
func (o RemediationOutput) RemediationType() RemediationRemediationTypePtrOutput {
	return o.ApplyT(func(v Remediation) *RemediationRemediationType { return v.RemediationType }).(RemediationRemediationTypePtrOutput)
}

// Contains the URL where to obtain the remediation.
func (o RemediationOutput) RemediationUri() RelatedUrlPtrOutput {
	return o.ApplyT(func(v Remediation) *RelatedUrl { return v.RemediationUri }).(RelatedUrlPtrOutput)
}

type RemediationArrayOutput struct{ *pulumi.OutputState }

func (RemediationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Remediation)(nil)).Elem()
}

func (o RemediationArrayOutput) ToRemediationArrayOutput() RemediationArrayOutput {
	return o
}

func (o RemediationArrayOutput) ToRemediationArrayOutputWithContext(ctx context.Context) RemediationArrayOutput {
	return o
}

func (o RemediationArrayOutput) Index(i pulumi.IntInput) RemediationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Remediation {
		return vs[0].([]Remediation)[vs[1].(int)]
	}).(RemediationOutput)
}

// Specifies details on how to handle (and presumably, fix) a vulnerability.
type RemediationResponse struct {
	// Contains a comprehensive human-readable discussion of the remediation.
	Details string `pulumi:"details"`
	// The type of remediation that can be applied.
	RemediationType string `pulumi:"remediationType"`
	// Contains the URL where to obtain the remediation.
	RemediationUri RelatedUrlResponse `pulumi:"remediationUri"`
}

// Specifies details on how to handle (and presumably, fix) a vulnerability.
type RemediationResponseOutput struct{ *pulumi.OutputState }

func (RemediationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemediationResponse)(nil)).Elem()
}

func (o RemediationResponseOutput) ToRemediationResponseOutput() RemediationResponseOutput {
	return o
}

func (o RemediationResponseOutput) ToRemediationResponseOutputWithContext(ctx context.Context) RemediationResponseOutput {
	return o
}

// Contains a comprehensive human-readable discussion of the remediation.
func (o RemediationResponseOutput) Details() pulumi.StringOutput {
	return o.ApplyT(func(v RemediationResponse) string { return v.Details }).(pulumi.StringOutput)
}

// The type of remediation that can be applied.
func (o RemediationResponseOutput) RemediationType() pulumi.StringOutput {
	return o.ApplyT(func(v RemediationResponse) string { return v.RemediationType }).(pulumi.StringOutput)
}

// Contains the URL where to obtain the remediation.
func (o RemediationResponseOutput) RemediationUri() RelatedUrlResponseOutput {
	return o.ApplyT(func(v RemediationResponse) RelatedUrlResponse { return v.RemediationUri }).(RelatedUrlResponseOutput)
}

type RemediationResponseArrayOutput struct{ *pulumi.OutputState }

func (RemediationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RemediationResponse)(nil)).Elem()
}

func (o RemediationResponseArrayOutput) ToRemediationResponseArrayOutput() RemediationResponseArrayOutput {
	return o
}

func (o RemediationResponseArrayOutput) ToRemediationResponseArrayOutputWithContext(ctx context.Context) RemediationResponseArrayOutput {
	return o
}

func (o RemediationResponseArrayOutput) Index(i pulumi.IntInput) RemediationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RemediationResponse {
		return vs[0].([]RemediationResponse)[vs[1].(int)]
	}).(RemediationResponseOutput)
}

// A unique identifier for a Cloud Repo.
type RepoId struct {
	// A combination of a project ID and a repo name.
	ProjectRepoId *ProjectRepoId `pulumi:"projectRepoId"`
	// A server-assigned, globally unique identifier.
	Uid *string `pulumi:"uid"`
}

// RepoIdInput is an input type that accepts RepoIdArgs and RepoIdOutput values.
// You can construct a concrete instance of `RepoIdInput` via:
//
//	RepoIdArgs{...}
type RepoIdInput interface {
	pulumi.Input

	ToRepoIdOutput() RepoIdOutput
	ToRepoIdOutputWithContext(context.Context) RepoIdOutput
}

// A unique identifier for a Cloud Repo.
type RepoIdArgs struct {
	// A combination of a project ID and a repo name.
	ProjectRepoId ProjectRepoIdPtrInput `pulumi:"projectRepoId"`
	// A server-assigned, globally unique identifier.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (RepoIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepoId)(nil)).Elem()
}

func (i RepoIdArgs) ToRepoIdOutput() RepoIdOutput {
	return i.ToRepoIdOutputWithContext(context.Background())
}

func (i RepoIdArgs) ToRepoIdOutputWithContext(ctx context.Context) RepoIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepoIdOutput)
}

func (i RepoIdArgs) ToRepoIdPtrOutput() RepoIdPtrOutput {
	return i.ToRepoIdPtrOutputWithContext(context.Background())
}

func (i RepoIdArgs) ToRepoIdPtrOutputWithContext(ctx context.Context) RepoIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepoIdOutput).ToRepoIdPtrOutputWithContext(ctx)
}

// RepoIdPtrInput is an input type that accepts RepoIdArgs, RepoIdPtr and RepoIdPtrOutput values.
// You can construct a concrete instance of `RepoIdPtrInput` via:
//
//	        RepoIdArgs{...}
//
//	or:
//
//	        nil
type RepoIdPtrInput interface {
	pulumi.Input

	ToRepoIdPtrOutput() RepoIdPtrOutput
	ToRepoIdPtrOutputWithContext(context.Context) RepoIdPtrOutput
}

type repoIdPtrType RepoIdArgs

func RepoIdPtr(v *RepoIdArgs) RepoIdPtrInput {
	return (*repoIdPtrType)(v)
}

func (*repoIdPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepoId)(nil)).Elem()
}

func (i *repoIdPtrType) ToRepoIdPtrOutput() RepoIdPtrOutput {
	return i.ToRepoIdPtrOutputWithContext(context.Background())
}

func (i *repoIdPtrType) ToRepoIdPtrOutputWithContext(ctx context.Context) RepoIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepoIdPtrOutput)
}

// A unique identifier for a Cloud Repo.
type RepoIdOutput struct{ *pulumi.OutputState }

func (RepoIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepoId)(nil)).Elem()
}

func (o RepoIdOutput) ToRepoIdOutput() RepoIdOutput {
	return o
}

func (o RepoIdOutput) ToRepoIdOutputWithContext(ctx context.Context) RepoIdOutput {
	return o
}

func (o RepoIdOutput) ToRepoIdPtrOutput() RepoIdPtrOutput {
	return o.ToRepoIdPtrOutputWithContext(context.Background())
}

func (o RepoIdOutput) ToRepoIdPtrOutputWithContext(ctx context.Context) RepoIdPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepoId) *RepoId {
		return &v
	}).(RepoIdPtrOutput)
}

// A combination of a project ID and a repo name.
func (o RepoIdOutput) ProjectRepoId() ProjectRepoIdPtrOutput {
	return o.ApplyT(func(v RepoId) *ProjectRepoId { return v.ProjectRepoId }).(ProjectRepoIdPtrOutput)
}

// A server-assigned, globally unique identifier.
func (o RepoIdOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepoId) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type RepoIdPtrOutput struct{ *pulumi.OutputState }

func (RepoIdPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepoId)(nil)).Elem()
}

func (o RepoIdPtrOutput) ToRepoIdPtrOutput() RepoIdPtrOutput {
	return o
}

func (o RepoIdPtrOutput) ToRepoIdPtrOutputWithContext(ctx context.Context) RepoIdPtrOutput {
	return o
}

func (o RepoIdPtrOutput) Elem() RepoIdOutput {
	return o.ApplyT(func(v *RepoId) RepoId {
		if v != nil {
			return *v
		}
		var ret RepoId
		return ret
	}).(RepoIdOutput)
}

// A combination of a project ID and a repo name.
func (o RepoIdPtrOutput) ProjectRepoId() ProjectRepoIdPtrOutput {
	return o.ApplyT(func(v *RepoId) *ProjectRepoId {
		if v == nil {
			return nil
		}
		return v.ProjectRepoId
	}).(ProjectRepoIdPtrOutput)
}

// A server-assigned, globally unique identifier.
func (o RepoIdPtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepoId) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

// A unique identifier for a Cloud Repo.
type RepoIdResponse struct {
	// A combination of a project ID and a repo name.
	ProjectRepoId ProjectRepoIdResponse `pulumi:"projectRepoId"`
	// A server-assigned, globally unique identifier.
	Uid string `pulumi:"uid"`
}

// A unique identifier for a Cloud Repo.
type RepoIdResponseOutput struct{ *pulumi.OutputState }

func (RepoIdResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepoIdResponse)(nil)).Elem()
}

func (o RepoIdResponseOutput) ToRepoIdResponseOutput() RepoIdResponseOutput {
	return o
}

func (o RepoIdResponseOutput) ToRepoIdResponseOutputWithContext(ctx context.Context) RepoIdResponseOutput {
	return o
}

// A combination of a project ID and a repo name.
func (o RepoIdResponseOutput) ProjectRepoId() ProjectRepoIdResponseOutput {
	return o.ApplyT(func(v RepoIdResponse) ProjectRepoIdResponse { return v.ProjectRepoId }).(ProjectRepoIdResponseOutput)
}

// A server-assigned, globally unique identifier.
func (o RepoIdResponseOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v RepoIdResponse) string { return v.Uid }).(pulumi.StringOutput)
}

// An entity that can have metadata. For example, a Docker image.
type Resource struct {
	// Deprecated, do not use. Use uri instead. The hash of the resource content. For example, the Docker digest.
	//
	// Deprecated: Deprecated, do not use. Use uri instead. The hash of the resource content. For example, the Docker digest.
	ContentHash *Hash `pulumi:"contentHash"`
	// Deprecated, do not use. Use uri instead. The name of the resource. For example, the name of a Docker image - "Debian".
	//
	// Deprecated: Deprecated, do not use. Use uri instead. The name of the resource. For example, the name of a Docker image - "Debian".
	Name *string `pulumi:"name"`
	// The unique URI of the resource. For example, `https://gcr.io/project/image@sha256:foo` for a Docker image.
	Uri string `pulumi:"uri"`
}

// ResourceInput is an input type that accepts ResourceArgs and ResourceOutput values.
// You can construct a concrete instance of `ResourceInput` via:
//
//	ResourceArgs{...}
type ResourceInput interface {
	pulumi.Input

	ToResourceOutput() ResourceOutput
	ToResourceOutputWithContext(context.Context) ResourceOutput
}

// An entity that can have metadata. For example, a Docker image.
type ResourceArgs struct {
	// Deprecated, do not use. Use uri instead. The hash of the resource content. For example, the Docker digest.
	//
	// Deprecated: Deprecated, do not use. Use uri instead. The hash of the resource content. For example, the Docker digest.
	ContentHash HashPtrInput `pulumi:"contentHash"`
	// Deprecated, do not use. Use uri instead. The name of the resource. For example, the name of a Docker image - "Debian".
	//
	// Deprecated: Deprecated, do not use. Use uri instead. The name of the resource. For example, the name of a Docker image - "Debian".
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The unique URI of the resource. For example, `https://gcr.io/project/image@sha256:foo` for a Docker image.
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (ResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Resource)(nil)).Elem()
}

func (i ResourceArgs) ToResourceOutput() ResourceOutput {
	return i.ToResourceOutputWithContext(context.Background())
}

func (i ResourceArgs) ToResourceOutputWithContext(ctx context.Context) ResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceOutput)
}

// An entity that can have metadata. For example, a Docker image.
type ResourceOutput struct{ *pulumi.OutputState }

func (ResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Resource)(nil)).Elem()
}

func (o ResourceOutput) ToResourceOutput() ResourceOutput {
	return o
}

func (o ResourceOutput) ToResourceOutputWithContext(ctx context.Context) ResourceOutput {
	return o
}

// Deprecated, do not use. Use uri instead. The hash of the resource content. For example, the Docker digest.
//
// Deprecated: Deprecated, do not use. Use uri instead. The hash of the resource content. For example, the Docker digest.
func (o ResourceOutput) ContentHash() HashPtrOutput {
	return o.ApplyT(func(v Resource) *Hash { return v.ContentHash }).(HashPtrOutput)
}

// Deprecated, do not use. Use uri instead. The name of the resource. For example, the name of a Docker image - "Debian".
//
// Deprecated: Deprecated, do not use. Use uri instead. The name of the resource. For example, the name of a Docker image - "Debian".
func (o ResourceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Resource) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The unique URI of the resource. For example, `https://gcr.io/project/image@sha256:foo` for a Docker image.
func (o ResourceOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v Resource) string { return v.Uri }).(pulumi.StringOutput)
}

type ResourceDescriptor struct {
	Annotations      map[string]interface{} `pulumi:"annotations"`
	Content          *string                `pulumi:"content"`
	Digest           map[string]string      `pulumi:"digest"`
	DownloadLocation *string                `pulumi:"downloadLocation"`
	MediaType        *string                `pulumi:"mediaType"`
	Name             *string                `pulumi:"name"`
	Uri              *string                `pulumi:"uri"`
}

// ResourceDescriptorInput is an input type that accepts ResourceDescriptorArgs and ResourceDescriptorOutput values.
// You can construct a concrete instance of `ResourceDescriptorInput` via:
//
//	ResourceDescriptorArgs{...}
type ResourceDescriptorInput interface {
	pulumi.Input

	ToResourceDescriptorOutput() ResourceDescriptorOutput
	ToResourceDescriptorOutputWithContext(context.Context) ResourceDescriptorOutput
}

type ResourceDescriptorArgs struct {
	Annotations      pulumi.MapInput       `pulumi:"annotations"`
	Content          pulumi.StringPtrInput `pulumi:"content"`
	Digest           pulumi.StringMapInput `pulumi:"digest"`
	DownloadLocation pulumi.StringPtrInput `pulumi:"downloadLocation"`
	MediaType        pulumi.StringPtrInput `pulumi:"mediaType"`
	Name             pulumi.StringPtrInput `pulumi:"name"`
	Uri              pulumi.StringPtrInput `pulumi:"uri"`
}

func (ResourceDescriptorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceDescriptor)(nil)).Elem()
}

func (i ResourceDescriptorArgs) ToResourceDescriptorOutput() ResourceDescriptorOutput {
	return i.ToResourceDescriptorOutputWithContext(context.Background())
}

func (i ResourceDescriptorArgs) ToResourceDescriptorOutputWithContext(ctx context.Context) ResourceDescriptorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceDescriptorOutput)
}

// ResourceDescriptorArrayInput is an input type that accepts ResourceDescriptorArray and ResourceDescriptorArrayOutput values.
// You can construct a concrete instance of `ResourceDescriptorArrayInput` via:
//
//	ResourceDescriptorArray{ ResourceDescriptorArgs{...} }
type ResourceDescriptorArrayInput interface {
	pulumi.Input

	ToResourceDescriptorArrayOutput() ResourceDescriptorArrayOutput
	ToResourceDescriptorArrayOutputWithContext(context.Context) ResourceDescriptorArrayOutput
}

type ResourceDescriptorArray []ResourceDescriptorInput

func (ResourceDescriptorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceDescriptor)(nil)).Elem()
}

func (i ResourceDescriptorArray) ToResourceDescriptorArrayOutput() ResourceDescriptorArrayOutput {
	return i.ToResourceDescriptorArrayOutputWithContext(context.Background())
}

func (i ResourceDescriptorArray) ToResourceDescriptorArrayOutputWithContext(ctx context.Context) ResourceDescriptorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceDescriptorArrayOutput)
}

type ResourceDescriptorOutput struct{ *pulumi.OutputState }

func (ResourceDescriptorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceDescriptor)(nil)).Elem()
}

func (o ResourceDescriptorOutput) ToResourceDescriptorOutput() ResourceDescriptorOutput {
	return o
}

func (o ResourceDescriptorOutput) ToResourceDescriptorOutputWithContext(ctx context.Context) ResourceDescriptorOutput {
	return o
}

func (o ResourceDescriptorOutput) Annotations() pulumi.MapOutput {
	return o.ApplyT(func(v ResourceDescriptor) map[string]interface{} { return v.Annotations }).(pulumi.MapOutput)
}

func (o ResourceDescriptorOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDescriptor) *string { return v.Content }).(pulumi.StringPtrOutput)
}

func (o ResourceDescriptorOutput) Digest() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceDescriptor) map[string]string { return v.Digest }).(pulumi.StringMapOutput)
}

func (o ResourceDescriptorOutput) DownloadLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDescriptor) *string { return v.DownloadLocation }).(pulumi.StringPtrOutput)
}

func (o ResourceDescriptorOutput) MediaType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDescriptor) *string { return v.MediaType }).(pulumi.StringPtrOutput)
}

func (o ResourceDescriptorOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDescriptor) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o ResourceDescriptorOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDescriptor) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type ResourceDescriptorArrayOutput struct{ *pulumi.OutputState }

func (ResourceDescriptorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceDescriptor)(nil)).Elem()
}

func (o ResourceDescriptorArrayOutput) ToResourceDescriptorArrayOutput() ResourceDescriptorArrayOutput {
	return o
}

func (o ResourceDescriptorArrayOutput) ToResourceDescriptorArrayOutputWithContext(ctx context.Context) ResourceDescriptorArrayOutput {
	return o
}

func (o ResourceDescriptorArrayOutput) Index(i pulumi.IntInput) ResourceDescriptorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceDescriptor {
		return vs[0].([]ResourceDescriptor)[vs[1].(int)]
	}).(ResourceDescriptorOutput)
}

type ResourceDescriptorResponse struct {
	Annotations      map[string]interface{} `pulumi:"annotations"`
	Content          string                 `pulumi:"content"`
	Digest           map[string]string      `pulumi:"digest"`
	DownloadLocation string                 `pulumi:"downloadLocation"`
	MediaType        string                 `pulumi:"mediaType"`
	Name             string                 `pulumi:"name"`
	Uri              string                 `pulumi:"uri"`
}

type ResourceDescriptorResponseOutput struct{ *pulumi.OutputState }

func (ResourceDescriptorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceDescriptorResponse)(nil)).Elem()
}

func (o ResourceDescriptorResponseOutput) ToResourceDescriptorResponseOutput() ResourceDescriptorResponseOutput {
	return o
}

func (o ResourceDescriptorResponseOutput) ToResourceDescriptorResponseOutputWithContext(ctx context.Context) ResourceDescriptorResponseOutput {
	return o
}

func (o ResourceDescriptorResponseOutput) Annotations() pulumi.MapOutput {
	return o.ApplyT(func(v ResourceDescriptorResponse) map[string]interface{} { return v.Annotations }).(pulumi.MapOutput)
}

func (o ResourceDescriptorResponseOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceDescriptorResponse) string { return v.Content }).(pulumi.StringOutput)
}

func (o ResourceDescriptorResponseOutput) Digest() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceDescriptorResponse) map[string]string { return v.Digest }).(pulumi.StringMapOutput)
}

func (o ResourceDescriptorResponseOutput) DownloadLocation() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceDescriptorResponse) string { return v.DownloadLocation }).(pulumi.StringOutput)
}

func (o ResourceDescriptorResponseOutput) MediaType() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceDescriptorResponse) string { return v.MediaType }).(pulumi.StringOutput)
}

func (o ResourceDescriptorResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceDescriptorResponse) string { return v.Name }).(pulumi.StringOutput)
}

func (o ResourceDescriptorResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceDescriptorResponse) string { return v.Uri }).(pulumi.StringOutput)
}

type ResourceDescriptorResponseArrayOutput struct{ *pulumi.OutputState }

func (ResourceDescriptorResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceDescriptorResponse)(nil)).Elem()
}

func (o ResourceDescriptorResponseArrayOutput) ToResourceDescriptorResponseArrayOutput() ResourceDescriptorResponseArrayOutput {
	return o
}

func (o ResourceDescriptorResponseArrayOutput) ToResourceDescriptorResponseArrayOutputWithContext(ctx context.Context) ResourceDescriptorResponseArrayOutput {
	return o
}

func (o ResourceDescriptorResponseArrayOutput) Index(i pulumi.IntInput) ResourceDescriptorResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceDescriptorResponse {
		return vs[0].([]ResourceDescriptorResponse)[vs[1].(int)]
	}).(ResourceDescriptorResponseOutput)
}

// An entity that can have metadata. For example, a Docker image.
type ResourceResponse struct {
	// Deprecated, do not use. Use uri instead. The hash of the resource content. For example, the Docker digest.
	//
	// Deprecated: Deprecated, do not use. Use uri instead. The hash of the resource content. For example, the Docker digest.
	ContentHash HashResponse `pulumi:"contentHash"`
	// Deprecated, do not use. Use uri instead. The name of the resource. For example, the name of a Docker image - "Debian".
	//
	// Deprecated: Deprecated, do not use. Use uri instead. The name of the resource. For example, the name of a Docker image - "Debian".
	Name string `pulumi:"name"`
	// The unique URI of the resource. For example, `https://gcr.io/project/image@sha256:foo` for a Docker image.
	Uri string `pulumi:"uri"`
}

// An entity that can have metadata. For example, a Docker image.
type ResourceResponseOutput struct{ *pulumi.OutputState }

func (ResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceResponse)(nil)).Elem()
}

func (o ResourceResponseOutput) ToResourceResponseOutput() ResourceResponseOutput {
	return o
}

func (o ResourceResponseOutput) ToResourceResponseOutputWithContext(ctx context.Context) ResourceResponseOutput {
	return o
}

// Deprecated, do not use. Use uri instead. The hash of the resource content. For example, the Docker digest.
//
// Deprecated: Deprecated, do not use. Use uri instead. The hash of the resource content. For example, the Docker digest.
func (o ResourceResponseOutput) ContentHash() HashResponseOutput {
	return o.ApplyT(func(v ResourceResponse) HashResponse { return v.ContentHash }).(HashResponseOutput)
}

// Deprecated, do not use. Use uri instead. The name of the resource. For example, the name of a Docker image - "Debian".
//
// Deprecated: Deprecated, do not use. Use uri instead. The name of the resource. For example, the name of a Docker image - "Debian".
func (o ResourceResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The unique URI of the resource. For example, `https://gcr.io/project/image@sha256:foo` for a Docker image.
func (o ResourceResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceResponse) string { return v.Uri }).(pulumi.StringOutput)
}

type RunDetails struct {
	Builder    *ProvenanceBuilder   `pulumi:"builder"`
	Byproducts []ResourceDescriptor `pulumi:"byproducts"`
	Metadata   *BuildMetadata       `pulumi:"metadata"`
}

// RunDetailsInput is an input type that accepts RunDetailsArgs and RunDetailsOutput values.
// You can construct a concrete instance of `RunDetailsInput` via:
//
//	RunDetailsArgs{...}
type RunDetailsInput interface {
	pulumi.Input

	ToRunDetailsOutput() RunDetailsOutput
	ToRunDetailsOutputWithContext(context.Context) RunDetailsOutput
}

type RunDetailsArgs struct {
	Builder    ProvenanceBuilderPtrInput    `pulumi:"builder"`
	Byproducts ResourceDescriptorArrayInput `pulumi:"byproducts"`
	Metadata   BuildMetadataPtrInput        `pulumi:"metadata"`
}

func (RunDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RunDetails)(nil)).Elem()
}

func (i RunDetailsArgs) ToRunDetailsOutput() RunDetailsOutput {
	return i.ToRunDetailsOutputWithContext(context.Background())
}

func (i RunDetailsArgs) ToRunDetailsOutputWithContext(ctx context.Context) RunDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RunDetailsOutput)
}

func (i RunDetailsArgs) ToRunDetailsPtrOutput() RunDetailsPtrOutput {
	return i.ToRunDetailsPtrOutputWithContext(context.Background())
}

func (i RunDetailsArgs) ToRunDetailsPtrOutputWithContext(ctx context.Context) RunDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RunDetailsOutput).ToRunDetailsPtrOutputWithContext(ctx)
}

// RunDetailsPtrInput is an input type that accepts RunDetailsArgs, RunDetailsPtr and RunDetailsPtrOutput values.
// You can construct a concrete instance of `RunDetailsPtrInput` via:
//
//	        RunDetailsArgs{...}
//
//	or:
//
//	        nil
type RunDetailsPtrInput interface {
	pulumi.Input

	ToRunDetailsPtrOutput() RunDetailsPtrOutput
	ToRunDetailsPtrOutputWithContext(context.Context) RunDetailsPtrOutput
}

type runDetailsPtrType RunDetailsArgs

func RunDetailsPtr(v *RunDetailsArgs) RunDetailsPtrInput {
	return (*runDetailsPtrType)(v)
}

func (*runDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RunDetails)(nil)).Elem()
}

func (i *runDetailsPtrType) ToRunDetailsPtrOutput() RunDetailsPtrOutput {
	return i.ToRunDetailsPtrOutputWithContext(context.Background())
}

func (i *runDetailsPtrType) ToRunDetailsPtrOutputWithContext(ctx context.Context) RunDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RunDetailsPtrOutput)
}

type RunDetailsOutput struct{ *pulumi.OutputState }

func (RunDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RunDetails)(nil)).Elem()
}

func (o RunDetailsOutput) ToRunDetailsOutput() RunDetailsOutput {
	return o
}

func (o RunDetailsOutput) ToRunDetailsOutputWithContext(ctx context.Context) RunDetailsOutput {
	return o
}

func (o RunDetailsOutput) ToRunDetailsPtrOutput() RunDetailsPtrOutput {
	return o.ToRunDetailsPtrOutputWithContext(context.Background())
}

func (o RunDetailsOutput) ToRunDetailsPtrOutputWithContext(ctx context.Context) RunDetailsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RunDetails) *RunDetails {
		return &v
	}).(RunDetailsPtrOutput)
}

func (o RunDetailsOutput) Builder() ProvenanceBuilderPtrOutput {
	return o.ApplyT(func(v RunDetails) *ProvenanceBuilder { return v.Builder }).(ProvenanceBuilderPtrOutput)
}

func (o RunDetailsOutput) Byproducts() ResourceDescriptorArrayOutput {
	return o.ApplyT(func(v RunDetails) []ResourceDescriptor { return v.Byproducts }).(ResourceDescriptorArrayOutput)
}

func (o RunDetailsOutput) Metadata() BuildMetadataPtrOutput {
	return o.ApplyT(func(v RunDetails) *BuildMetadata { return v.Metadata }).(BuildMetadataPtrOutput)
}

type RunDetailsPtrOutput struct{ *pulumi.OutputState }

func (RunDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RunDetails)(nil)).Elem()
}

func (o RunDetailsPtrOutput) ToRunDetailsPtrOutput() RunDetailsPtrOutput {
	return o
}

func (o RunDetailsPtrOutput) ToRunDetailsPtrOutputWithContext(ctx context.Context) RunDetailsPtrOutput {
	return o
}

func (o RunDetailsPtrOutput) Elem() RunDetailsOutput {
	return o.ApplyT(func(v *RunDetails) RunDetails {
		if v != nil {
			return *v
		}
		var ret RunDetails
		return ret
	}).(RunDetailsOutput)
}

func (o RunDetailsPtrOutput) Builder() ProvenanceBuilderPtrOutput {
	return o.ApplyT(func(v *RunDetails) *ProvenanceBuilder {
		if v == nil {
			return nil
		}
		return v.Builder
	}).(ProvenanceBuilderPtrOutput)
}

func (o RunDetailsPtrOutput) Byproducts() ResourceDescriptorArrayOutput {
	return o.ApplyT(func(v *RunDetails) []ResourceDescriptor {
		if v == nil {
			return nil
		}
		return v.Byproducts
	}).(ResourceDescriptorArrayOutput)
}

func (o RunDetailsPtrOutput) Metadata() BuildMetadataPtrOutput {
	return o.ApplyT(func(v *RunDetails) *BuildMetadata {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(BuildMetadataPtrOutput)
}

type RunDetailsResponse struct {
	Builder    ProvenanceBuilderResponse    `pulumi:"builder"`
	Byproducts []ResourceDescriptorResponse `pulumi:"byproducts"`
	Metadata   BuildMetadataResponse        `pulumi:"metadata"`
}

type RunDetailsResponseOutput struct{ *pulumi.OutputState }

func (RunDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RunDetailsResponse)(nil)).Elem()
}

func (o RunDetailsResponseOutput) ToRunDetailsResponseOutput() RunDetailsResponseOutput {
	return o
}

func (o RunDetailsResponseOutput) ToRunDetailsResponseOutputWithContext(ctx context.Context) RunDetailsResponseOutput {
	return o
}

func (o RunDetailsResponseOutput) Builder() ProvenanceBuilderResponseOutput {
	return o.ApplyT(func(v RunDetailsResponse) ProvenanceBuilderResponse { return v.Builder }).(ProvenanceBuilderResponseOutput)
}

func (o RunDetailsResponseOutput) Byproducts() ResourceDescriptorResponseArrayOutput {
	return o.ApplyT(func(v RunDetailsResponse) []ResourceDescriptorResponse { return v.Byproducts }).(ResourceDescriptorResponseArrayOutput)
}

func (o RunDetailsResponseOutput) Metadata() BuildMetadataResponseOutput {
	return o.ApplyT(func(v RunDetailsResponse) BuildMetadataResponse { return v.Metadata }).(BuildMetadataResponseOutput)
}

// The note representing an SBOM reference.
type SBOMReferenceNote struct {
	// The format that SBOM takes. E.g. may be spdx, cyclonedx, etc...
	Format *string `pulumi:"format"`
	// The version of the format that the SBOM takes. E.g. if the format is spdx, the version may be 2.3.
	Version *string `pulumi:"version"`
}

// SBOMReferenceNoteInput is an input type that accepts SBOMReferenceNoteArgs and SBOMReferenceNoteOutput values.
// You can construct a concrete instance of `SBOMReferenceNoteInput` via:
//
//	SBOMReferenceNoteArgs{...}
type SBOMReferenceNoteInput interface {
	pulumi.Input

	ToSBOMReferenceNoteOutput() SBOMReferenceNoteOutput
	ToSBOMReferenceNoteOutputWithContext(context.Context) SBOMReferenceNoteOutput
}

// The note representing an SBOM reference.
type SBOMReferenceNoteArgs struct {
	// The format that SBOM takes. E.g. may be spdx, cyclonedx, etc...
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the format that the SBOM takes. E.g. if the format is spdx, the version may be 2.3.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (SBOMReferenceNoteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SBOMReferenceNote)(nil)).Elem()
}

func (i SBOMReferenceNoteArgs) ToSBOMReferenceNoteOutput() SBOMReferenceNoteOutput {
	return i.ToSBOMReferenceNoteOutputWithContext(context.Background())
}

func (i SBOMReferenceNoteArgs) ToSBOMReferenceNoteOutputWithContext(ctx context.Context) SBOMReferenceNoteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SBOMReferenceNoteOutput)
}

func (i SBOMReferenceNoteArgs) ToSBOMReferenceNotePtrOutput() SBOMReferenceNotePtrOutput {
	return i.ToSBOMReferenceNotePtrOutputWithContext(context.Background())
}

func (i SBOMReferenceNoteArgs) ToSBOMReferenceNotePtrOutputWithContext(ctx context.Context) SBOMReferenceNotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SBOMReferenceNoteOutput).ToSBOMReferenceNotePtrOutputWithContext(ctx)
}

// SBOMReferenceNotePtrInput is an input type that accepts SBOMReferenceNoteArgs, SBOMReferenceNotePtr and SBOMReferenceNotePtrOutput values.
// You can construct a concrete instance of `SBOMReferenceNotePtrInput` via:
//
//	        SBOMReferenceNoteArgs{...}
//
//	or:
//
//	        nil
type SBOMReferenceNotePtrInput interface {
	pulumi.Input

	ToSBOMReferenceNotePtrOutput() SBOMReferenceNotePtrOutput
	ToSBOMReferenceNotePtrOutputWithContext(context.Context) SBOMReferenceNotePtrOutput
}

type sbomreferenceNotePtrType SBOMReferenceNoteArgs

func SBOMReferenceNotePtr(v *SBOMReferenceNoteArgs) SBOMReferenceNotePtrInput {
	return (*sbomreferenceNotePtrType)(v)
}

func (*sbomreferenceNotePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SBOMReferenceNote)(nil)).Elem()
}

func (i *sbomreferenceNotePtrType) ToSBOMReferenceNotePtrOutput() SBOMReferenceNotePtrOutput {
	return i.ToSBOMReferenceNotePtrOutputWithContext(context.Background())
}

func (i *sbomreferenceNotePtrType) ToSBOMReferenceNotePtrOutputWithContext(ctx context.Context) SBOMReferenceNotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SBOMReferenceNotePtrOutput)
}

// The note representing an SBOM reference.
type SBOMReferenceNoteOutput struct{ *pulumi.OutputState }

func (SBOMReferenceNoteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SBOMReferenceNote)(nil)).Elem()
}

func (o SBOMReferenceNoteOutput) ToSBOMReferenceNoteOutput() SBOMReferenceNoteOutput {
	return o
}

func (o SBOMReferenceNoteOutput) ToSBOMReferenceNoteOutputWithContext(ctx context.Context) SBOMReferenceNoteOutput {
	return o
}

func (o SBOMReferenceNoteOutput) ToSBOMReferenceNotePtrOutput() SBOMReferenceNotePtrOutput {
	return o.ToSBOMReferenceNotePtrOutputWithContext(context.Background())
}

func (o SBOMReferenceNoteOutput) ToSBOMReferenceNotePtrOutputWithContext(ctx context.Context) SBOMReferenceNotePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SBOMReferenceNote) *SBOMReferenceNote {
		return &v
	}).(SBOMReferenceNotePtrOutput)
}

// The format that SBOM takes. E.g. may be spdx, cyclonedx, etc...
func (o SBOMReferenceNoteOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SBOMReferenceNote) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the format that the SBOM takes. E.g. if the format is spdx, the version may be 2.3.
func (o SBOMReferenceNoteOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SBOMReferenceNote) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type SBOMReferenceNotePtrOutput struct{ *pulumi.OutputState }

func (SBOMReferenceNotePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SBOMReferenceNote)(nil)).Elem()
}

func (o SBOMReferenceNotePtrOutput) ToSBOMReferenceNotePtrOutput() SBOMReferenceNotePtrOutput {
	return o
}

func (o SBOMReferenceNotePtrOutput) ToSBOMReferenceNotePtrOutputWithContext(ctx context.Context) SBOMReferenceNotePtrOutput {
	return o
}

func (o SBOMReferenceNotePtrOutput) Elem() SBOMReferenceNoteOutput {
	return o.ApplyT(func(v *SBOMReferenceNote) SBOMReferenceNote {
		if v != nil {
			return *v
		}
		var ret SBOMReferenceNote
		return ret
	}).(SBOMReferenceNoteOutput)
}

// The format that SBOM takes. E.g. may be spdx, cyclonedx, etc...
func (o SBOMReferenceNotePtrOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBOMReferenceNote) *string {
		if v == nil {
			return nil
		}
		return v.Format
	}).(pulumi.StringPtrOutput)
}

// The version of the format that the SBOM takes. E.g. if the format is spdx, the version may be 2.3.
func (o SBOMReferenceNotePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBOMReferenceNote) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// The note representing an SBOM reference.
type SBOMReferenceNoteResponse struct {
	// The format that SBOM takes. E.g. may be spdx, cyclonedx, etc...
	Format string `pulumi:"format"`
	// The version of the format that the SBOM takes. E.g. if the format is spdx, the version may be 2.3.
	Version string `pulumi:"version"`
}

// The note representing an SBOM reference.
type SBOMReferenceNoteResponseOutput struct{ *pulumi.OutputState }

func (SBOMReferenceNoteResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SBOMReferenceNoteResponse)(nil)).Elem()
}

func (o SBOMReferenceNoteResponseOutput) ToSBOMReferenceNoteResponseOutput() SBOMReferenceNoteResponseOutput {
	return o
}

func (o SBOMReferenceNoteResponseOutput) ToSBOMReferenceNoteResponseOutputWithContext(ctx context.Context) SBOMReferenceNoteResponseOutput {
	return o
}

// The format that SBOM takes. E.g. may be spdx, cyclonedx, etc...
func (o SBOMReferenceNoteResponseOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v SBOMReferenceNoteResponse) string { return v.Format }).(pulumi.StringOutput)
}

// The version of the format that the SBOM takes. E.g. if the format is spdx, the version may be 2.3.
func (o SBOMReferenceNoteResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v SBOMReferenceNoteResponse) string { return v.Version }).(pulumi.StringOutput)
}

// The occurrence representing an SBOM reference as applied to a specific resource. The occurrence follows the DSSE specification. See https://github.com/secure-systems-lab/dsse/blob/master/envelope.md for more details.
type SBOMReferenceOccurrence struct {
	// The actual payload that contains the SBOM reference data.
	Payload *SbomReferenceIntotoPayload `pulumi:"payload"`
	// The kind of payload that SbomReferenceIntotoPayload takes. Since it's in the intoto format, this value is expected to be 'application/vnd.in-toto+json'.
	PayloadType *string `pulumi:"payloadType"`
	// The signatures over the payload.
	Signatures []EnvelopeSignature `pulumi:"signatures"`
}

// SBOMReferenceOccurrenceInput is an input type that accepts SBOMReferenceOccurrenceArgs and SBOMReferenceOccurrenceOutput values.
// You can construct a concrete instance of `SBOMReferenceOccurrenceInput` via:
//
//	SBOMReferenceOccurrenceArgs{...}
type SBOMReferenceOccurrenceInput interface {
	pulumi.Input

	ToSBOMReferenceOccurrenceOutput() SBOMReferenceOccurrenceOutput
	ToSBOMReferenceOccurrenceOutputWithContext(context.Context) SBOMReferenceOccurrenceOutput
}

// The occurrence representing an SBOM reference as applied to a specific resource. The occurrence follows the DSSE specification. See https://github.com/secure-systems-lab/dsse/blob/master/envelope.md for more details.
type SBOMReferenceOccurrenceArgs struct {
	// The actual payload that contains the SBOM reference data.
	Payload SbomReferenceIntotoPayloadPtrInput `pulumi:"payload"`
	// The kind of payload that SbomReferenceIntotoPayload takes. Since it's in the intoto format, this value is expected to be 'application/vnd.in-toto+json'.
	PayloadType pulumi.StringPtrInput `pulumi:"payloadType"`
	// The signatures over the payload.
	Signatures EnvelopeSignatureArrayInput `pulumi:"signatures"`
}

func (SBOMReferenceOccurrenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SBOMReferenceOccurrence)(nil)).Elem()
}

func (i SBOMReferenceOccurrenceArgs) ToSBOMReferenceOccurrenceOutput() SBOMReferenceOccurrenceOutput {
	return i.ToSBOMReferenceOccurrenceOutputWithContext(context.Background())
}

func (i SBOMReferenceOccurrenceArgs) ToSBOMReferenceOccurrenceOutputWithContext(ctx context.Context) SBOMReferenceOccurrenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SBOMReferenceOccurrenceOutput)
}

func (i SBOMReferenceOccurrenceArgs) ToSBOMReferenceOccurrencePtrOutput() SBOMReferenceOccurrencePtrOutput {
	return i.ToSBOMReferenceOccurrencePtrOutputWithContext(context.Background())
}

func (i SBOMReferenceOccurrenceArgs) ToSBOMReferenceOccurrencePtrOutputWithContext(ctx context.Context) SBOMReferenceOccurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SBOMReferenceOccurrenceOutput).ToSBOMReferenceOccurrencePtrOutputWithContext(ctx)
}

// SBOMReferenceOccurrencePtrInput is an input type that accepts SBOMReferenceOccurrenceArgs, SBOMReferenceOccurrencePtr and SBOMReferenceOccurrencePtrOutput values.
// You can construct a concrete instance of `SBOMReferenceOccurrencePtrInput` via:
//
//	        SBOMReferenceOccurrenceArgs{...}
//
//	or:
//
//	        nil
type SBOMReferenceOccurrencePtrInput interface {
	pulumi.Input

	ToSBOMReferenceOccurrencePtrOutput() SBOMReferenceOccurrencePtrOutput
	ToSBOMReferenceOccurrencePtrOutputWithContext(context.Context) SBOMReferenceOccurrencePtrOutput
}

type sbomreferenceOccurrencePtrType SBOMReferenceOccurrenceArgs

func SBOMReferenceOccurrencePtr(v *SBOMReferenceOccurrenceArgs) SBOMReferenceOccurrencePtrInput {
	return (*sbomreferenceOccurrencePtrType)(v)
}

func (*sbomreferenceOccurrencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SBOMReferenceOccurrence)(nil)).Elem()
}

func (i *sbomreferenceOccurrencePtrType) ToSBOMReferenceOccurrencePtrOutput() SBOMReferenceOccurrencePtrOutput {
	return i.ToSBOMReferenceOccurrencePtrOutputWithContext(context.Background())
}

func (i *sbomreferenceOccurrencePtrType) ToSBOMReferenceOccurrencePtrOutputWithContext(ctx context.Context) SBOMReferenceOccurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SBOMReferenceOccurrencePtrOutput)
}

// The occurrence representing an SBOM reference as applied to a specific resource. The occurrence follows the DSSE specification. See https://github.com/secure-systems-lab/dsse/blob/master/envelope.md for more details.
type SBOMReferenceOccurrenceOutput struct{ *pulumi.OutputState }

func (SBOMReferenceOccurrenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SBOMReferenceOccurrence)(nil)).Elem()
}

func (o SBOMReferenceOccurrenceOutput) ToSBOMReferenceOccurrenceOutput() SBOMReferenceOccurrenceOutput {
	return o
}

func (o SBOMReferenceOccurrenceOutput) ToSBOMReferenceOccurrenceOutputWithContext(ctx context.Context) SBOMReferenceOccurrenceOutput {
	return o
}

func (o SBOMReferenceOccurrenceOutput) ToSBOMReferenceOccurrencePtrOutput() SBOMReferenceOccurrencePtrOutput {
	return o.ToSBOMReferenceOccurrencePtrOutputWithContext(context.Background())
}

func (o SBOMReferenceOccurrenceOutput) ToSBOMReferenceOccurrencePtrOutputWithContext(ctx context.Context) SBOMReferenceOccurrencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SBOMReferenceOccurrence) *SBOMReferenceOccurrence {
		return &v
	}).(SBOMReferenceOccurrencePtrOutput)
}

// The actual payload that contains the SBOM reference data.
func (o SBOMReferenceOccurrenceOutput) Payload() SbomReferenceIntotoPayloadPtrOutput {
	return o.ApplyT(func(v SBOMReferenceOccurrence) *SbomReferenceIntotoPayload { return v.Payload }).(SbomReferenceIntotoPayloadPtrOutput)
}

// The kind of payload that SbomReferenceIntotoPayload takes. Since it's in the intoto format, this value is expected to be 'application/vnd.in-toto+json'.
func (o SBOMReferenceOccurrenceOutput) PayloadType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SBOMReferenceOccurrence) *string { return v.PayloadType }).(pulumi.StringPtrOutput)
}

// The signatures over the payload.
func (o SBOMReferenceOccurrenceOutput) Signatures() EnvelopeSignatureArrayOutput {
	return o.ApplyT(func(v SBOMReferenceOccurrence) []EnvelopeSignature { return v.Signatures }).(EnvelopeSignatureArrayOutput)
}

type SBOMReferenceOccurrencePtrOutput struct{ *pulumi.OutputState }

func (SBOMReferenceOccurrencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SBOMReferenceOccurrence)(nil)).Elem()
}

func (o SBOMReferenceOccurrencePtrOutput) ToSBOMReferenceOccurrencePtrOutput() SBOMReferenceOccurrencePtrOutput {
	return o
}

func (o SBOMReferenceOccurrencePtrOutput) ToSBOMReferenceOccurrencePtrOutputWithContext(ctx context.Context) SBOMReferenceOccurrencePtrOutput {
	return o
}

func (o SBOMReferenceOccurrencePtrOutput) Elem() SBOMReferenceOccurrenceOutput {
	return o.ApplyT(func(v *SBOMReferenceOccurrence) SBOMReferenceOccurrence {
		if v != nil {
			return *v
		}
		var ret SBOMReferenceOccurrence
		return ret
	}).(SBOMReferenceOccurrenceOutput)
}

// The actual payload that contains the SBOM reference data.
func (o SBOMReferenceOccurrencePtrOutput) Payload() SbomReferenceIntotoPayloadPtrOutput {
	return o.ApplyT(func(v *SBOMReferenceOccurrence) *SbomReferenceIntotoPayload {
		if v == nil {
			return nil
		}
		return v.Payload
	}).(SbomReferenceIntotoPayloadPtrOutput)
}

// The kind of payload that SbomReferenceIntotoPayload takes. Since it's in the intoto format, this value is expected to be 'application/vnd.in-toto+json'.
func (o SBOMReferenceOccurrencePtrOutput) PayloadType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBOMReferenceOccurrence) *string {
		if v == nil {
			return nil
		}
		return v.PayloadType
	}).(pulumi.StringPtrOutput)
}

// The signatures over the payload.
func (o SBOMReferenceOccurrencePtrOutput) Signatures() EnvelopeSignatureArrayOutput {
	return o.ApplyT(func(v *SBOMReferenceOccurrence) []EnvelopeSignature {
		if v == nil {
			return nil
		}
		return v.Signatures
	}).(EnvelopeSignatureArrayOutput)
}

// The occurrence representing an SBOM reference as applied to a specific resource. The occurrence follows the DSSE specification. See https://github.com/secure-systems-lab/dsse/blob/master/envelope.md for more details.
type SBOMReferenceOccurrenceResponse struct {
	// The actual payload that contains the SBOM reference data.
	Payload SbomReferenceIntotoPayloadResponse `pulumi:"payload"`
	// The kind of payload that SbomReferenceIntotoPayload takes. Since it's in the intoto format, this value is expected to be 'application/vnd.in-toto+json'.
	PayloadType string `pulumi:"payloadType"`
	// The signatures over the payload.
	Signatures []EnvelopeSignatureResponse `pulumi:"signatures"`
}

// The occurrence representing an SBOM reference as applied to a specific resource. The occurrence follows the DSSE specification. See https://github.com/secure-systems-lab/dsse/blob/master/envelope.md for more details.
type SBOMReferenceOccurrenceResponseOutput struct{ *pulumi.OutputState }

func (SBOMReferenceOccurrenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SBOMReferenceOccurrenceResponse)(nil)).Elem()
}

func (o SBOMReferenceOccurrenceResponseOutput) ToSBOMReferenceOccurrenceResponseOutput() SBOMReferenceOccurrenceResponseOutput {
	return o
}

func (o SBOMReferenceOccurrenceResponseOutput) ToSBOMReferenceOccurrenceResponseOutputWithContext(ctx context.Context) SBOMReferenceOccurrenceResponseOutput {
	return o
}

// The actual payload that contains the SBOM reference data.
func (o SBOMReferenceOccurrenceResponseOutput) Payload() SbomReferenceIntotoPayloadResponseOutput {
	return o.ApplyT(func(v SBOMReferenceOccurrenceResponse) SbomReferenceIntotoPayloadResponse { return v.Payload }).(SbomReferenceIntotoPayloadResponseOutput)
}

// The kind of payload that SbomReferenceIntotoPayload takes. Since it's in the intoto format, this value is expected to be 'application/vnd.in-toto+json'.
func (o SBOMReferenceOccurrenceResponseOutput) PayloadType() pulumi.StringOutput {
	return o.ApplyT(func(v SBOMReferenceOccurrenceResponse) string { return v.PayloadType }).(pulumi.StringOutput)
}

// The signatures over the payload.
func (o SBOMReferenceOccurrenceResponseOutput) Signatures() EnvelopeSignatureResponseArrayOutput {
	return o.ApplyT(func(v SBOMReferenceOccurrenceResponse) []EnvelopeSignatureResponse { return v.Signatures }).(EnvelopeSignatureResponseArrayOutput)
}

// The status of an SBOM generation.
type SBOMStatus struct {
	// If there was an error generating an SBOM, this will indicate what that error was.
	Error *string `pulumi:"error"`
	// The progress of the SBOM generation.
	SbomState *SBOMStatusSbomState `pulumi:"sbomState"`
}

// SBOMStatusInput is an input type that accepts SBOMStatusArgs and SBOMStatusOutput values.
// You can construct a concrete instance of `SBOMStatusInput` via:
//
//	SBOMStatusArgs{...}
type SBOMStatusInput interface {
	pulumi.Input

	ToSBOMStatusOutput() SBOMStatusOutput
	ToSBOMStatusOutputWithContext(context.Context) SBOMStatusOutput
}

// The status of an SBOM generation.
type SBOMStatusArgs struct {
	// If there was an error generating an SBOM, this will indicate what that error was.
	Error pulumi.StringPtrInput `pulumi:"error"`
	// The progress of the SBOM generation.
	SbomState SBOMStatusSbomStatePtrInput `pulumi:"sbomState"`
}

func (SBOMStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SBOMStatus)(nil)).Elem()
}

func (i SBOMStatusArgs) ToSBOMStatusOutput() SBOMStatusOutput {
	return i.ToSBOMStatusOutputWithContext(context.Background())
}

func (i SBOMStatusArgs) ToSBOMStatusOutputWithContext(ctx context.Context) SBOMStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SBOMStatusOutput)
}

func (i SBOMStatusArgs) ToSBOMStatusPtrOutput() SBOMStatusPtrOutput {
	return i.ToSBOMStatusPtrOutputWithContext(context.Background())
}

func (i SBOMStatusArgs) ToSBOMStatusPtrOutputWithContext(ctx context.Context) SBOMStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SBOMStatusOutput).ToSBOMStatusPtrOutputWithContext(ctx)
}

// SBOMStatusPtrInput is an input type that accepts SBOMStatusArgs, SBOMStatusPtr and SBOMStatusPtrOutput values.
// You can construct a concrete instance of `SBOMStatusPtrInput` via:
//
//	        SBOMStatusArgs{...}
//
//	or:
//
//	        nil
type SBOMStatusPtrInput interface {
	pulumi.Input

	ToSBOMStatusPtrOutput() SBOMStatusPtrOutput
	ToSBOMStatusPtrOutputWithContext(context.Context) SBOMStatusPtrOutput
}

type sbomstatusPtrType SBOMStatusArgs

func SBOMStatusPtr(v *SBOMStatusArgs) SBOMStatusPtrInput {
	return (*sbomstatusPtrType)(v)
}

func (*sbomstatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SBOMStatus)(nil)).Elem()
}

func (i *sbomstatusPtrType) ToSBOMStatusPtrOutput() SBOMStatusPtrOutput {
	return i.ToSBOMStatusPtrOutputWithContext(context.Background())
}

func (i *sbomstatusPtrType) ToSBOMStatusPtrOutputWithContext(ctx context.Context) SBOMStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SBOMStatusPtrOutput)
}

// The status of an SBOM generation.
type SBOMStatusOutput struct{ *pulumi.OutputState }

func (SBOMStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SBOMStatus)(nil)).Elem()
}

func (o SBOMStatusOutput) ToSBOMStatusOutput() SBOMStatusOutput {
	return o
}

func (o SBOMStatusOutput) ToSBOMStatusOutputWithContext(ctx context.Context) SBOMStatusOutput {
	return o
}

func (o SBOMStatusOutput) ToSBOMStatusPtrOutput() SBOMStatusPtrOutput {
	return o.ToSBOMStatusPtrOutputWithContext(context.Background())
}

func (o SBOMStatusOutput) ToSBOMStatusPtrOutputWithContext(ctx context.Context) SBOMStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SBOMStatus) *SBOMStatus {
		return &v
	}).(SBOMStatusPtrOutput)
}

// If there was an error generating an SBOM, this will indicate what that error was.
func (o SBOMStatusOutput) Error() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SBOMStatus) *string { return v.Error }).(pulumi.StringPtrOutput)
}

// The progress of the SBOM generation.
func (o SBOMStatusOutput) SbomState() SBOMStatusSbomStatePtrOutput {
	return o.ApplyT(func(v SBOMStatus) *SBOMStatusSbomState { return v.SbomState }).(SBOMStatusSbomStatePtrOutput)
}

type SBOMStatusPtrOutput struct{ *pulumi.OutputState }

func (SBOMStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SBOMStatus)(nil)).Elem()
}

func (o SBOMStatusPtrOutput) ToSBOMStatusPtrOutput() SBOMStatusPtrOutput {
	return o
}

func (o SBOMStatusPtrOutput) ToSBOMStatusPtrOutputWithContext(ctx context.Context) SBOMStatusPtrOutput {
	return o
}

func (o SBOMStatusPtrOutput) Elem() SBOMStatusOutput {
	return o.ApplyT(func(v *SBOMStatus) SBOMStatus {
		if v != nil {
			return *v
		}
		var ret SBOMStatus
		return ret
	}).(SBOMStatusOutput)
}

// If there was an error generating an SBOM, this will indicate what that error was.
func (o SBOMStatusPtrOutput) Error() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBOMStatus) *string {
		if v == nil {
			return nil
		}
		return v.Error
	}).(pulumi.StringPtrOutput)
}

// The progress of the SBOM generation.
func (o SBOMStatusPtrOutput) SbomState() SBOMStatusSbomStatePtrOutput {
	return o.ApplyT(func(v *SBOMStatus) *SBOMStatusSbomState {
		if v == nil {
			return nil
		}
		return v.SbomState
	}).(SBOMStatusSbomStatePtrOutput)
}

// The status of an SBOM generation.
type SBOMStatusResponse struct {
	// If there was an error generating an SBOM, this will indicate what that error was.
	Error string `pulumi:"error"`
	// The progress of the SBOM generation.
	SbomState string `pulumi:"sbomState"`
}

// The status of an SBOM generation.
type SBOMStatusResponseOutput struct{ *pulumi.OutputState }

func (SBOMStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SBOMStatusResponse)(nil)).Elem()
}

func (o SBOMStatusResponseOutput) ToSBOMStatusResponseOutput() SBOMStatusResponseOutput {
	return o
}

func (o SBOMStatusResponseOutput) ToSBOMStatusResponseOutputWithContext(ctx context.Context) SBOMStatusResponseOutput {
	return o
}

// If there was an error generating an SBOM, this will indicate what that error was.
func (o SBOMStatusResponseOutput) Error() pulumi.StringOutput {
	return o.ApplyT(func(v SBOMStatusResponse) string { return v.Error }).(pulumi.StringOutput)
}

// The progress of the SBOM generation.
func (o SBOMStatusResponseOutput) SbomState() pulumi.StringOutput {
	return o.ApplyT(func(v SBOMStatusResponse) string { return v.SbomState }).(pulumi.StringOutput)
}

// The actual payload that contains the SBOM Reference data. The payload follows the intoto statement specification. See https://github.com/in-toto/attestation/blob/main/spec/v1.0/statement.md for more details.
type SbomReferenceIntotoPayload struct {
	// Additional parameters of the Predicate. Includes the actual data about the SBOM.
	Predicate *SbomReferenceIntotoPredicate `pulumi:"predicate"`
	// URI identifying the type of the Predicate.
	PredicateType *string `pulumi:"predicateType"`
	// Set of software artifacts that the attestation applies to. Each element represents a single software artifact.
	Subject []Subject `pulumi:"subject"`
	// Identifier for the schema of the Statement.
	Type *string `pulumi:"type"`
}

// SbomReferenceIntotoPayloadInput is an input type that accepts SbomReferenceIntotoPayloadArgs and SbomReferenceIntotoPayloadOutput values.
// You can construct a concrete instance of `SbomReferenceIntotoPayloadInput` via:
//
//	SbomReferenceIntotoPayloadArgs{...}
type SbomReferenceIntotoPayloadInput interface {
	pulumi.Input

	ToSbomReferenceIntotoPayloadOutput() SbomReferenceIntotoPayloadOutput
	ToSbomReferenceIntotoPayloadOutputWithContext(context.Context) SbomReferenceIntotoPayloadOutput
}

// The actual payload that contains the SBOM Reference data. The payload follows the intoto statement specification. See https://github.com/in-toto/attestation/blob/main/spec/v1.0/statement.md for more details.
type SbomReferenceIntotoPayloadArgs struct {
	// Additional parameters of the Predicate. Includes the actual data about the SBOM.
	Predicate SbomReferenceIntotoPredicatePtrInput `pulumi:"predicate"`
	// URI identifying the type of the Predicate.
	PredicateType pulumi.StringPtrInput `pulumi:"predicateType"`
	// Set of software artifacts that the attestation applies to. Each element represents a single software artifact.
	Subject SubjectArrayInput `pulumi:"subject"`
	// Identifier for the schema of the Statement.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (SbomReferenceIntotoPayloadArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SbomReferenceIntotoPayload)(nil)).Elem()
}

func (i SbomReferenceIntotoPayloadArgs) ToSbomReferenceIntotoPayloadOutput() SbomReferenceIntotoPayloadOutput {
	return i.ToSbomReferenceIntotoPayloadOutputWithContext(context.Background())
}

func (i SbomReferenceIntotoPayloadArgs) ToSbomReferenceIntotoPayloadOutputWithContext(ctx context.Context) SbomReferenceIntotoPayloadOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SbomReferenceIntotoPayloadOutput)
}

func (i SbomReferenceIntotoPayloadArgs) ToSbomReferenceIntotoPayloadPtrOutput() SbomReferenceIntotoPayloadPtrOutput {
	return i.ToSbomReferenceIntotoPayloadPtrOutputWithContext(context.Background())
}

func (i SbomReferenceIntotoPayloadArgs) ToSbomReferenceIntotoPayloadPtrOutputWithContext(ctx context.Context) SbomReferenceIntotoPayloadPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SbomReferenceIntotoPayloadOutput).ToSbomReferenceIntotoPayloadPtrOutputWithContext(ctx)
}

// SbomReferenceIntotoPayloadPtrInput is an input type that accepts SbomReferenceIntotoPayloadArgs, SbomReferenceIntotoPayloadPtr and SbomReferenceIntotoPayloadPtrOutput values.
// You can construct a concrete instance of `SbomReferenceIntotoPayloadPtrInput` via:
//
//	        SbomReferenceIntotoPayloadArgs{...}
//
//	or:
//
//	        nil
type SbomReferenceIntotoPayloadPtrInput interface {
	pulumi.Input

	ToSbomReferenceIntotoPayloadPtrOutput() SbomReferenceIntotoPayloadPtrOutput
	ToSbomReferenceIntotoPayloadPtrOutputWithContext(context.Context) SbomReferenceIntotoPayloadPtrOutput
}

type sbomReferenceIntotoPayloadPtrType SbomReferenceIntotoPayloadArgs

func SbomReferenceIntotoPayloadPtr(v *SbomReferenceIntotoPayloadArgs) SbomReferenceIntotoPayloadPtrInput {
	return (*sbomReferenceIntotoPayloadPtrType)(v)
}

func (*sbomReferenceIntotoPayloadPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SbomReferenceIntotoPayload)(nil)).Elem()
}

func (i *sbomReferenceIntotoPayloadPtrType) ToSbomReferenceIntotoPayloadPtrOutput() SbomReferenceIntotoPayloadPtrOutput {
	return i.ToSbomReferenceIntotoPayloadPtrOutputWithContext(context.Background())
}

func (i *sbomReferenceIntotoPayloadPtrType) ToSbomReferenceIntotoPayloadPtrOutputWithContext(ctx context.Context) SbomReferenceIntotoPayloadPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SbomReferenceIntotoPayloadPtrOutput)
}

// The actual payload that contains the SBOM Reference data. The payload follows the intoto statement specification. See https://github.com/in-toto/attestation/blob/main/spec/v1.0/statement.md for more details.
type SbomReferenceIntotoPayloadOutput struct{ *pulumi.OutputState }

func (SbomReferenceIntotoPayloadOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SbomReferenceIntotoPayload)(nil)).Elem()
}

func (o SbomReferenceIntotoPayloadOutput) ToSbomReferenceIntotoPayloadOutput() SbomReferenceIntotoPayloadOutput {
	return o
}

func (o SbomReferenceIntotoPayloadOutput) ToSbomReferenceIntotoPayloadOutputWithContext(ctx context.Context) SbomReferenceIntotoPayloadOutput {
	return o
}

func (o SbomReferenceIntotoPayloadOutput) ToSbomReferenceIntotoPayloadPtrOutput() SbomReferenceIntotoPayloadPtrOutput {
	return o.ToSbomReferenceIntotoPayloadPtrOutputWithContext(context.Background())
}

func (o SbomReferenceIntotoPayloadOutput) ToSbomReferenceIntotoPayloadPtrOutputWithContext(ctx context.Context) SbomReferenceIntotoPayloadPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SbomReferenceIntotoPayload) *SbomReferenceIntotoPayload {
		return &v
	}).(SbomReferenceIntotoPayloadPtrOutput)
}

// Additional parameters of the Predicate. Includes the actual data about the SBOM.
func (o SbomReferenceIntotoPayloadOutput) Predicate() SbomReferenceIntotoPredicatePtrOutput {
	return o.ApplyT(func(v SbomReferenceIntotoPayload) *SbomReferenceIntotoPredicate { return v.Predicate }).(SbomReferenceIntotoPredicatePtrOutput)
}

// URI identifying the type of the Predicate.
func (o SbomReferenceIntotoPayloadOutput) PredicateType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SbomReferenceIntotoPayload) *string { return v.PredicateType }).(pulumi.StringPtrOutput)
}

// Set of software artifacts that the attestation applies to. Each element represents a single software artifact.
func (o SbomReferenceIntotoPayloadOutput) Subject() SubjectArrayOutput {
	return o.ApplyT(func(v SbomReferenceIntotoPayload) []Subject { return v.Subject }).(SubjectArrayOutput)
}

// Identifier for the schema of the Statement.
func (o SbomReferenceIntotoPayloadOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SbomReferenceIntotoPayload) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type SbomReferenceIntotoPayloadPtrOutput struct{ *pulumi.OutputState }

func (SbomReferenceIntotoPayloadPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SbomReferenceIntotoPayload)(nil)).Elem()
}

func (o SbomReferenceIntotoPayloadPtrOutput) ToSbomReferenceIntotoPayloadPtrOutput() SbomReferenceIntotoPayloadPtrOutput {
	return o
}

func (o SbomReferenceIntotoPayloadPtrOutput) ToSbomReferenceIntotoPayloadPtrOutputWithContext(ctx context.Context) SbomReferenceIntotoPayloadPtrOutput {
	return o
}

func (o SbomReferenceIntotoPayloadPtrOutput) Elem() SbomReferenceIntotoPayloadOutput {
	return o.ApplyT(func(v *SbomReferenceIntotoPayload) SbomReferenceIntotoPayload {
		if v != nil {
			return *v
		}
		var ret SbomReferenceIntotoPayload
		return ret
	}).(SbomReferenceIntotoPayloadOutput)
}

// Additional parameters of the Predicate. Includes the actual data about the SBOM.
func (o SbomReferenceIntotoPayloadPtrOutput) Predicate() SbomReferenceIntotoPredicatePtrOutput {
	return o.ApplyT(func(v *SbomReferenceIntotoPayload) *SbomReferenceIntotoPredicate {
		if v == nil {
			return nil
		}
		return v.Predicate
	}).(SbomReferenceIntotoPredicatePtrOutput)
}

// URI identifying the type of the Predicate.
func (o SbomReferenceIntotoPayloadPtrOutput) PredicateType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SbomReferenceIntotoPayload) *string {
		if v == nil {
			return nil
		}
		return v.PredicateType
	}).(pulumi.StringPtrOutput)
}

// Set of software artifacts that the attestation applies to. Each element represents a single software artifact.
func (o SbomReferenceIntotoPayloadPtrOutput) Subject() SubjectArrayOutput {
	return o.ApplyT(func(v *SbomReferenceIntotoPayload) []Subject {
		if v == nil {
			return nil
		}
		return v.Subject
	}).(SubjectArrayOutput)
}

// Identifier for the schema of the Statement.
func (o SbomReferenceIntotoPayloadPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SbomReferenceIntotoPayload) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The actual payload that contains the SBOM Reference data. The payload follows the intoto statement specification. See https://github.com/in-toto/attestation/blob/main/spec/v1.0/statement.md for more details.
type SbomReferenceIntotoPayloadResponse struct {
	// Additional parameters of the Predicate. Includes the actual data about the SBOM.
	Predicate SbomReferenceIntotoPredicateResponse `pulumi:"predicate"`
	// URI identifying the type of the Predicate.
	PredicateType string `pulumi:"predicateType"`
	// Set of software artifacts that the attestation applies to. Each element represents a single software artifact.
	Subject []SubjectResponse `pulumi:"subject"`
	// Identifier for the schema of the Statement.
	Type string `pulumi:"type"`
}

// The actual payload that contains the SBOM Reference data. The payload follows the intoto statement specification. See https://github.com/in-toto/attestation/blob/main/spec/v1.0/statement.md for more details.
type SbomReferenceIntotoPayloadResponseOutput struct{ *pulumi.OutputState }

func (SbomReferenceIntotoPayloadResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SbomReferenceIntotoPayloadResponse)(nil)).Elem()
}

func (o SbomReferenceIntotoPayloadResponseOutput) ToSbomReferenceIntotoPayloadResponseOutput() SbomReferenceIntotoPayloadResponseOutput {
	return o
}

func (o SbomReferenceIntotoPayloadResponseOutput) ToSbomReferenceIntotoPayloadResponseOutputWithContext(ctx context.Context) SbomReferenceIntotoPayloadResponseOutput {
	return o
}

// Additional parameters of the Predicate. Includes the actual data about the SBOM.
func (o SbomReferenceIntotoPayloadResponseOutput) Predicate() SbomReferenceIntotoPredicateResponseOutput {
	return o.ApplyT(func(v SbomReferenceIntotoPayloadResponse) SbomReferenceIntotoPredicateResponse { return v.Predicate }).(SbomReferenceIntotoPredicateResponseOutput)
}

// URI identifying the type of the Predicate.
func (o SbomReferenceIntotoPayloadResponseOutput) PredicateType() pulumi.StringOutput {
	return o.ApplyT(func(v SbomReferenceIntotoPayloadResponse) string { return v.PredicateType }).(pulumi.StringOutput)
}

// Set of software artifacts that the attestation applies to. Each element represents a single software artifact.
func (o SbomReferenceIntotoPayloadResponseOutput) Subject() SubjectResponseArrayOutput {
	return o.ApplyT(func(v SbomReferenceIntotoPayloadResponse) []SubjectResponse { return v.Subject }).(SubjectResponseArrayOutput)
}

// Identifier for the schema of the Statement.
func (o SbomReferenceIntotoPayloadResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SbomReferenceIntotoPayloadResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A predicate which describes the SBOM being referenced.
type SbomReferenceIntotoPredicate struct {
	// A map of algorithm to digest of the contents of the SBOM.
	Digest map[string]string `pulumi:"digest"`
	// The location of the SBOM.
	Location *string `pulumi:"location"`
	// The mime type of the SBOM.
	MimeType *string `pulumi:"mimeType"`
	// The person or system referring this predicate to the consumer.
	ReferrerId *string `pulumi:"referrerId"`
}

// SbomReferenceIntotoPredicateInput is an input type that accepts SbomReferenceIntotoPredicateArgs and SbomReferenceIntotoPredicateOutput values.
// You can construct a concrete instance of `SbomReferenceIntotoPredicateInput` via:
//
//	SbomReferenceIntotoPredicateArgs{...}
type SbomReferenceIntotoPredicateInput interface {
	pulumi.Input

	ToSbomReferenceIntotoPredicateOutput() SbomReferenceIntotoPredicateOutput
	ToSbomReferenceIntotoPredicateOutputWithContext(context.Context) SbomReferenceIntotoPredicateOutput
}

// A predicate which describes the SBOM being referenced.
type SbomReferenceIntotoPredicateArgs struct {
	// A map of algorithm to digest of the contents of the SBOM.
	Digest pulumi.StringMapInput `pulumi:"digest"`
	// The location of the SBOM.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// The mime type of the SBOM.
	MimeType pulumi.StringPtrInput `pulumi:"mimeType"`
	// The person or system referring this predicate to the consumer.
	ReferrerId pulumi.StringPtrInput `pulumi:"referrerId"`
}

func (SbomReferenceIntotoPredicateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SbomReferenceIntotoPredicate)(nil)).Elem()
}

func (i SbomReferenceIntotoPredicateArgs) ToSbomReferenceIntotoPredicateOutput() SbomReferenceIntotoPredicateOutput {
	return i.ToSbomReferenceIntotoPredicateOutputWithContext(context.Background())
}

func (i SbomReferenceIntotoPredicateArgs) ToSbomReferenceIntotoPredicateOutputWithContext(ctx context.Context) SbomReferenceIntotoPredicateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SbomReferenceIntotoPredicateOutput)
}

func (i SbomReferenceIntotoPredicateArgs) ToSbomReferenceIntotoPredicatePtrOutput() SbomReferenceIntotoPredicatePtrOutput {
	return i.ToSbomReferenceIntotoPredicatePtrOutputWithContext(context.Background())
}

func (i SbomReferenceIntotoPredicateArgs) ToSbomReferenceIntotoPredicatePtrOutputWithContext(ctx context.Context) SbomReferenceIntotoPredicatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SbomReferenceIntotoPredicateOutput).ToSbomReferenceIntotoPredicatePtrOutputWithContext(ctx)
}

// SbomReferenceIntotoPredicatePtrInput is an input type that accepts SbomReferenceIntotoPredicateArgs, SbomReferenceIntotoPredicatePtr and SbomReferenceIntotoPredicatePtrOutput values.
// You can construct a concrete instance of `SbomReferenceIntotoPredicatePtrInput` via:
//
//	        SbomReferenceIntotoPredicateArgs{...}
//
//	or:
//
//	        nil
type SbomReferenceIntotoPredicatePtrInput interface {
	pulumi.Input

	ToSbomReferenceIntotoPredicatePtrOutput() SbomReferenceIntotoPredicatePtrOutput
	ToSbomReferenceIntotoPredicatePtrOutputWithContext(context.Context) SbomReferenceIntotoPredicatePtrOutput
}

type sbomReferenceIntotoPredicatePtrType SbomReferenceIntotoPredicateArgs

func SbomReferenceIntotoPredicatePtr(v *SbomReferenceIntotoPredicateArgs) SbomReferenceIntotoPredicatePtrInput {
	return (*sbomReferenceIntotoPredicatePtrType)(v)
}

func (*sbomReferenceIntotoPredicatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SbomReferenceIntotoPredicate)(nil)).Elem()
}

func (i *sbomReferenceIntotoPredicatePtrType) ToSbomReferenceIntotoPredicatePtrOutput() SbomReferenceIntotoPredicatePtrOutput {
	return i.ToSbomReferenceIntotoPredicatePtrOutputWithContext(context.Background())
}

func (i *sbomReferenceIntotoPredicatePtrType) ToSbomReferenceIntotoPredicatePtrOutputWithContext(ctx context.Context) SbomReferenceIntotoPredicatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SbomReferenceIntotoPredicatePtrOutput)
}

// A predicate which describes the SBOM being referenced.
type SbomReferenceIntotoPredicateOutput struct{ *pulumi.OutputState }

func (SbomReferenceIntotoPredicateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SbomReferenceIntotoPredicate)(nil)).Elem()
}

func (o SbomReferenceIntotoPredicateOutput) ToSbomReferenceIntotoPredicateOutput() SbomReferenceIntotoPredicateOutput {
	return o
}

func (o SbomReferenceIntotoPredicateOutput) ToSbomReferenceIntotoPredicateOutputWithContext(ctx context.Context) SbomReferenceIntotoPredicateOutput {
	return o
}

func (o SbomReferenceIntotoPredicateOutput) ToSbomReferenceIntotoPredicatePtrOutput() SbomReferenceIntotoPredicatePtrOutput {
	return o.ToSbomReferenceIntotoPredicatePtrOutputWithContext(context.Background())
}

func (o SbomReferenceIntotoPredicateOutput) ToSbomReferenceIntotoPredicatePtrOutputWithContext(ctx context.Context) SbomReferenceIntotoPredicatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SbomReferenceIntotoPredicate) *SbomReferenceIntotoPredicate {
		return &v
	}).(SbomReferenceIntotoPredicatePtrOutput)
}

// A map of algorithm to digest of the contents of the SBOM.
func (o SbomReferenceIntotoPredicateOutput) Digest() pulumi.StringMapOutput {
	return o.ApplyT(func(v SbomReferenceIntotoPredicate) map[string]string { return v.Digest }).(pulumi.StringMapOutput)
}

// The location of the SBOM.
func (o SbomReferenceIntotoPredicateOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SbomReferenceIntotoPredicate) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// The mime type of the SBOM.
func (o SbomReferenceIntotoPredicateOutput) MimeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SbomReferenceIntotoPredicate) *string { return v.MimeType }).(pulumi.StringPtrOutput)
}

// The person or system referring this predicate to the consumer.
func (o SbomReferenceIntotoPredicateOutput) ReferrerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SbomReferenceIntotoPredicate) *string { return v.ReferrerId }).(pulumi.StringPtrOutput)
}

type SbomReferenceIntotoPredicatePtrOutput struct{ *pulumi.OutputState }

func (SbomReferenceIntotoPredicatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SbomReferenceIntotoPredicate)(nil)).Elem()
}

func (o SbomReferenceIntotoPredicatePtrOutput) ToSbomReferenceIntotoPredicatePtrOutput() SbomReferenceIntotoPredicatePtrOutput {
	return o
}

func (o SbomReferenceIntotoPredicatePtrOutput) ToSbomReferenceIntotoPredicatePtrOutputWithContext(ctx context.Context) SbomReferenceIntotoPredicatePtrOutput {
	return o
}

func (o SbomReferenceIntotoPredicatePtrOutput) Elem() SbomReferenceIntotoPredicateOutput {
	return o.ApplyT(func(v *SbomReferenceIntotoPredicate) SbomReferenceIntotoPredicate {
		if v != nil {
			return *v
		}
		var ret SbomReferenceIntotoPredicate
		return ret
	}).(SbomReferenceIntotoPredicateOutput)
}

// A map of algorithm to digest of the contents of the SBOM.
func (o SbomReferenceIntotoPredicatePtrOutput) Digest() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SbomReferenceIntotoPredicate) map[string]string {
		if v == nil {
			return nil
		}
		return v.Digest
	}).(pulumi.StringMapOutput)
}

// The location of the SBOM.
func (o SbomReferenceIntotoPredicatePtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SbomReferenceIntotoPredicate) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// The mime type of the SBOM.
func (o SbomReferenceIntotoPredicatePtrOutput) MimeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SbomReferenceIntotoPredicate) *string {
		if v == nil {
			return nil
		}
		return v.MimeType
	}).(pulumi.StringPtrOutput)
}

// The person or system referring this predicate to the consumer.
func (o SbomReferenceIntotoPredicatePtrOutput) ReferrerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SbomReferenceIntotoPredicate) *string {
		if v == nil {
			return nil
		}
		return v.ReferrerId
	}).(pulumi.StringPtrOutput)
}

// A predicate which describes the SBOM being referenced.
type SbomReferenceIntotoPredicateResponse struct {
	// A map of algorithm to digest of the contents of the SBOM.
	Digest map[string]string `pulumi:"digest"`
	// The location of the SBOM.
	Location string `pulumi:"location"`
	// The mime type of the SBOM.
	MimeType string `pulumi:"mimeType"`
	// The person or system referring this predicate to the consumer.
	ReferrerId string `pulumi:"referrerId"`
}

// A predicate which describes the SBOM being referenced.
type SbomReferenceIntotoPredicateResponseOutput struct{ *pulumi.OutputState }

func (SbomReferenceIntotoPredicateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SbomReferenceIntotoPredicateResponse)(nil)).Elem()
}

func (o SbomReferenceIntotoPredicateResponseOutput) ToSbomReferenceIntotoPredicateResponseOutput() SbomReferenceIntotoPredicateResponseOutput {
	return o
}

func (o SbomReferenceIntotoPredicateResponseOutput) ToSbomReferenceIntotoPredicateResponseOutputWithContext(ctx context.Context) SbomReferenceIntotoPredicateResponseOutput {
	return o
}

// A map of algorithm to digest of the contents of the SBOM.
func (o SbomReferenceIntotoPredicateResponseOutput) Digest() pulumi.StringMapOutput {
	return o.ApplyT(func(v SbomReferenceIntotoPredicateResponse) map[string]string { return v.Digest }).(pulumi.StringMapOutput)
}

// The location of the SBOM.
func (o SbomReferenceIntotoPredicateResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v SbomReferenceIntotoPredicateResponse) string { return v.Location }).(pulumi.StringOutput)
}

// The mime type of the SBOM.
func (o SbomReferenceIntotoPredicateResponseOutput) MimeType() pulumi.StringOutput {
	return o.ApplyT(func(v SbomReferenceIntotoPredicateResponse) string { return v.MimeType }).(pulumi.StringOutput)
}

// The person or system referring this predicate to the consumer.
func (o SbomReferenceIntotoPredicateResponseOutput) ReferrerId() pulumi.StringOutput {
	return o.ApplyT(func(v SbomReferenceIntotoPredicateResponse) string { return v.ReferrerId }).(pulumi.StringOutput)
}

// Verifiers (e.g. Kritis implementations) MUST verify signatures with respect to the trust anchors defined in policy (e.g. a Kritis policy). Typically this means that the verifier has been configured with a map from `public_key_id` to public key material (and any required parameters, e.g. signing algorithm). In particular, verification implementations MUST NOT treat the signature `public_key_id` as anything more than a key lookup hint. The `public_key_id` DOES NOT validate or authenticate a public key; it only provides a mechanism for quickly selecting a public key ALREADY CONFIGURED on the verifier through a trusted channel. Verification implementations MUST reject signatures in any of the following circumstances: * The `public_key_id` is not recognized by the verifier. * The public key that `public_key_id` refers to does not verify the signature with respect to the payload. The `signature` contents SHOULD NOT be "attached" (where the payload is included with the serialized `signature` bytes). Verifiers MUST ignore any "attached" payload and only verify signatures with respect to explicitly provided payload (e.g. a `payload` field on the proto message that holds this Signature, or the canonical serialization of the proto message that holds this signature).
type Signature struct {
	// The identifier for the public key that verifies this signature. * The `public_key_id` is required. * The `public_key_id` SHOULD be an RFC3986 conformant URI. * When possible, the `public_key_id` SHOULD be an immutable reference, such as a cryptographic digest. Examples of valid `public_key_id`s: OpenPGP V4 public key fingerprint: * "openpgp4fpr:74FAF3B861BDA0870C7B6DEF607E48D2A663AEEA" See https://www.iana.org/assignments/uri-schemes/prov/openpgp4fpr for more details on this scheme. RFC6920 digest-named SubjectPublicKeyInfo (digest of the DER serialization): * "ni:///sha-256;cD9o9Cq6LG3jD0iKXqEi_vdjJGecm_iXkbqVoScViaU" * "nih:///sha-256;703f68f42aba2c6de30f488a5ea122fef76324679c9bf89791ba95a1271589a5"
	PublicKeyId *string `pulumi:"publicKeyId"`
	// The content of the signature, an opaque bytestring. The payload that this signature verifies MUST be unambiguously provided with the Signature during verification. A wrapper message might provide the payload explicitly. Alternatively, a message might have a canonical serialization that can always be unambiguously computed to derive the payload.
	Signature *string `pulumi:"signature"`
}

// SignatureInput is an input type that accepts SignatureArgs and SignatureOutput values.
// You can construct a concrete instance of `SignatureInput` via:
//
//	SignatureArgs{...}
type SignatureInput interface {
	pulumi.Input

	ToSignatureOutput() SignatureOutput
	ToSignatureOutputWithContext(context.Context) SignatureOutput
}

// Verifiers (e.g. Kritis implementations) MUST verify signatures with respect to the trust anchors defined in policy (e.g. a Kritis policy). Typically this means that the verifier has been configured with a map from `public_key_id` to public key material (and any required parameters, e.g. signing algorithm). In particular, verification implementations MUST NOT treat the signature `public_key_id` as anything more than a key lookup hint. The `public_key_id` DOES NOT validate or authenticate a public key; it only provides a mechanism for quickly selecting a public key ALREADY CONFIGURED on the verifier through a trusted channel. Verification implementations MUST reject signatures in any of the following circumstances: * The `public_key_id` is not recognized by the verifier. * The public key that `public_key_id` refers to does not verify the signature with respect to the payload. The `signature` contents SHOULD NOT be "attached" (where the payload is included with the serialized `signature` bytes). Verifiers MUST ignore any "attached" payload and only verify signatures with respect to explicitly provided payload (e.g. a `payload` field on the proto message that holds this Signature, or the canonical serialization of the proto message that holds this signature).
type SignatureArgs struct {
	// The identifier for the public key that verifies this signature. * The `public_key_id` is required. * The `public_key_id` SHOULD be an RFC3986 conformant URI. * When possible, the `public_key_id` SHOULD be an immutable reference, such as a cryptographic digest. Examples of valid `public_key_id`s: OpenPGP V4 public key fingerprint: * "openpgp4fpr:74FAF3B861BDA0870C7B6DEF607E48D2A663AEEA" See https://www.iana.org/assignments/uri-schemes/prov/openpgp4fpr for more details on this scheme. RFC6920 digest-named SubjectPublicKeyInfo (digest of the DER serialization): * "ni:///sha-256;cD9o9Cq6LG3jD0iKXqEi_vdjJGecm_iXkbqVoScViaU" * "nih:///sha-256;703f68f42aba2c6de30f488a5ea122fef76324679c9bf89791ba95a1271589a5"
	PublicKeyId pulumi.StringPtrInput `pulumi:"publicKeyId"`
	// The content of the signature, an opaque bytestring. The payload that this signature verifies MUST be unambiguously provided with the Signature during verification. A wrapper message might provide the payload explicitly. Alternatively, a message might have a canonical serialization that can always be unambiguously computed to derive the payload.
	Signature pulumi.StringPtrInput `pulumi:"signature"`
}

func (SignatureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Signature)(nil)).Elem()
}

func (i SignatureArgs) ToSignatureOutput() SignatureOutput {
	return i.ToSignatureOutputWithContext(context.Background())
}

func (i SignatureArgs) ToSignatureOutputWithContext(ctx context.Context) SignatureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignatureOutput)
}

// SignatureArrayInput is an input type that accepts SignatureArray and SignatureArrayOutput values.
// You can construct a concrete instance of `SignatureArrayInput` via:
//
//	SignatureArray{ SignatureArgs{...} }
type SignatureArrayInput interface {
	pulumi.Input

	ToSignatureArrayOutput() SignatureArrayOutput
	ToSignatureArrayOutputWithContext(context.Context) SignatureArrayOutput
}

type SignatureArray []SignatureInput

func (SignatureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Signature)(nil)).Elem()
}

func (i SignatureArray) ToSignatureArrayOutput() SignatureArrayOutput {
	return i.ToSignatureArrayOutputWithContext(context.Background())
}

func (i SignatureArray) ToSignatureArrayOutputWithContext(ctx context.Context) SignatureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignatureArrayOutput)
}

// Verifiers (e.g. Kritis implementations) MUST verify signatures with respect to the trust anchors defined in policy (e.g. a Kritis policy). Typically this means that the verifier has been configured with a map from `public_key_id` to public key material (and any required parameters, e.g. signing algorithm). In particular, verification implementations MUST NOT treat the signature `public_key_id` as anything more than a key lookup hint. The `public_key_id` DOES NOT validate or authenticate a public key; it only provides a mechanism for quickly selecting a public key ALREADY CONFIGURED on the verifier through a trusted channel. Verification implementations MUST reject signatures in any of the following circumstances: * The `public_key_id` is not recognized by the verifier. * The public key that `public_key_id` refers to does not verify the signature with respect to the payload. The `signature` contents SHOULD NOT be "attached" (where the payload is included with the serialized `signature` bytes). Verifiers MUST ignore any "attached" payload and only verify signatures with respect to explicitly provided payload (e.g. a `payload` field on the proto message that holds this Signature, or the canonical serialization of the proto message that holds this signature).
type SignatureOutput struct{ *pulumi.OutputState }

func (SignatureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Signature)(nil)).Elem()
}

func (o SignatureOutput) ToSignatureOutput() SignatureOutput {
	return o
}

func (o SignatureOutput) ToSignatureOutputWithContext(ctx context.Context) SignatureOutput {
	return o
}

// The identifier for the public key that verifies this signature. * The `public_key_id` is required. * The `public_key_id` SHOULD be an RFC3986 conformant URI. * When possible, the `public_key_id` SHOULD be an immutable reference, such as a cryptographic digest. Examples of valid `public_key_id`s: OpenPGP V4 public key fingerprint: * "openpgp4fpr:74FAF3B861BDA0870C7B6DEF607E48D2A663AEEA" See https://www.iana.org/assignments/uri-schemes/prov/openpgp4fpr for more details on this scheme. RFC6920 digest-named SubjectPublicKeyInfo (digest of the DER serialization): * "ni:///sha-256;cD9o9Cq6LG3jD0iKXqEi_vdjJGecm_iXkbqVoScViaU" * "nih:///sha-256;703f68f42aba2c6de30f488a5ea122fef76324679c9bf89791ba95a1271589a5"
func (o SignatureOutput) PublicKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Signature) *string { return v.PublicKeyId }).(pulumi.StringPtrOutput)
}

// The content of the signature, an opaque bytestring. The payload that this signature verifies MUST be unambiguously provided with the Signature during verification. A wrapper message might provide the payload explicitly. Alternatively, a message might have a canonical serialization that can always be unambiguously computed to derive the payload.
func (o SignatureOutput) Signature() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Signature) *string { return v.Signature }).(pulumi.StringPtrOutput)
}

type SignatureArrayOutput struct{ *pulumi.OutputState }

func (SignatureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Signature)(nil)).Elem()
}

func (o SignatureArrayOutput) ToSignatureArrayOutput() SignatureArrayOutput {
	return o
}

func (o SignatureArrayOutput) ToSignatureArrayOutputWithContext(ctx context.Context) SignatureArrayOutput {
	return o
}

func (o SignatureArrayOutput) Index(i pulumi.IntInput) SignatureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Signature {
		return vs[0].([]Signature)[vs[1].(int)]
	}).(SignatureOutput)
}

// Verifiers (e.g. Kritis implementations) MUST verify signatures with respect to the trust anchors defined in policy (e.g. a Kritis policy). Typically this means that the verifier has been configured with a map from `public_key_id` to public key material (and any required parameters, e.g. signing algorithm). In particular, verification implementations MUST NOT treat the signature `public_key_id` as anything more than a key lookup hint. The `public_key_id` DOES NOT validate or authenticate a public key; it only provides a mechanism for quickly selecting a public key ALREADY CONFIGURED on the verifier through a trusted channel. Verification implementations MUST reject signatures in any of the following circumstances: * The `public_key_id` is not recognized by the verifier. * The public key that `public_key_id` refers to does not verify the signature with respect to the payload. The `signature` contents SHOULD NOT be "attached" (where the payload is included with the serialized `signature` bytes). Verifiers MUST ignore any "attached" payload and only verify signatures with respect to explicitly provided payload (e.g. a `payload` field on the proto message that holds this Signature, or the canonical serialization of the proto message that holds this signature).
type SignatureResponse struct {
	// The identifier for the public key that verifies this signature. * The `public_key_id` is required. * The `public_key_id` SHOULD be an RFC3986 conformant URI. * When possible, the `public_key_id` SHOULD be an immutable reference, such as a cryptographic digest. Examples of valid `public_key_id`s: OpenPGP V4 public key fingerprint: * "openpgp4fpr:74FAF3B861BDA0870C7B6DEF607E48D2A663AEEA" See https://www.iana.org/assignments/uri-schemes/prov/openpgp4fpr for more details on this scheme. RFC6920 digest-named SubjectPublicKeyInfo (digest of the DER serialization): * "ni:///sha-256;cD9o9Cq6LG3jD0iKXqEi_vdjJGecm_iXkbqVoScViaU" * "nih:///sha-256;703f68f42aba2c6de30f488a5ea122fef76324679c9bf89791ba95a1271589a5"
	PublicKeyId string `pulumi:"publicKeyId"`
	// The content of the signature, an opaque bytestring. The payload that this signature verifies MUST be unambiguously provided with the Signature during verification. A wrapper message might provide the payload explicitly. Alternatively, a message might have a canonical serialization that can always be unambiguously computed to derive the payload.
	Signature string `pulumi:"signature"`
}

// Verifiers (e.g. Kritis implementations) MUST verify signatures with respect to the trust anchors defined in policy (e.g. a Kritis policy). Typically this means that the verifier has been configured with a map from `public_key_id` to public key material (and any required parameters, e.g. signing algorithm). In particular, verification implementations MUST NOT treat the signature `public_key_id` as anything more than a key lookup hint. The `public_key_id` DOES NOT validate or authenticate a public key; it only provides a mechanism for quickly selecting a public key ALREADY CONFIGURED on the verifier through a trusted channel. Verification implementations MUST reject signatures in any of the following circumstances: * The `public_key_id` is not recognized by the verifier. * The public key that `public_key_id` refers to does not verify the signature with respect to the payload. The `signature` contents SHOULD NOT be "attached" (where the payload is included with the serialized `signature` bytes). Verifiers MUST ignore any "attached" payload and only verify signatures with respect to explicitly provided payload (e.g. a `payload` field on the proto message that holds this Signature, or the canonical serialization of the proto message that holds this signature).
type SignatureResponseOutput struct{ *pulumi.OutputState }

func (SignatureResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SignatureResponse)(nil)).Elem()
}

func (o SignatureResponseOutput) ToSignatureResponseOutput() SignatureResponseOutput {
	return o
}

func (o SignatureResponseOutput) ToSignatureResponseOutputWithContext(ctx context.Context) SignatureResponseOutput {
	return o
}

// The identifier for the public key that verifies this signature. * The `public_key_id` is required. * The `public_key_id` SHOULD be an RFC3986 conformant URI. * When possible, the `public_key_id` SHOULD be an immutable reference, such as a cryptographic digest. Examples of valid `public_key_id`s: OpenPGP V4 public key fingerprint: * "openpgp4fpr:74FAF3B861BDA0870C7B6DEF607E48D2A663AEEA" See https://www.iana.org/assignments/uri-schemes/prov/openpgp4fpr for more details on this scheme. RFC6920 digest-named SubjectPublicKeyInfo (digest of the DER serialization): * "ni:///sha-256;cD9o9Cq6LG3jD0iKXqEi_vdjJGecm_iXkbqVoScViaU" * "nih:///sha-256;703f68f42aba2c6de30f488a5ea122fef76324679c9bf89791ba95a1271589a5"
func (o SignatureResponseOutput) PublicKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v SignatureResponse) string { return v.PublicKeyId }).(pulumi.StringOutput)
}

// The content of the signature, an opaque bytestring. The payload that this signature verifies MUST be unambiguously provided with the Signature during verification. A wrapper message might provide the payload explicitly. Alternatively, a message might have a canonical serialization that can always be unambiguously computed to derive the payload.
func (o SignatureResponseOutput) Signature() pulumi.StringOutput {
	return o.ApplyT(func(v SignatureResponse) string { return v.Signature }).(pulumi.StringOutput)
}

type SignatureResponseArrayOutput struct{ *pulumi.OutputState }

func (SignatureResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SignatureResponse)(nil)).Elem()
}

func (o SignatureResponseArrayOutput) ToSignatureResponseArrayOutput() SignatureResponseArrayOutput {
	return o
}

func (o SignatureResponseArrayOutput) ToSignatureResponseArrayOutputWithContext(ctx context.Context) SignatureResponseArrayOutput {
	return o
}

func (o SignatureResponseArrayOutput) Index(i pulumi.IntInput) SignatureResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SignatureResponse {
		return vs[0].([]SignatureResponse)[vs[1].(int)]
	}).(SignatureResponseOutput)
}

// This defines the format used to record keys used in the software supply chain. An in-toto link is attested using one or more keys defined in the in-toto layout. An example of this is: { "key_id": "776a00e29f3559e0141b3b096f696abc6cfb0c657ab40f441132b345b0...", "key_type": "rsa", "public_key_value": "-----BEGIN PUBLIC KEY-----\nMIIBojANBgkqhkiG9w0B...", "key_scheme": "rsassa-pss-sha256" } The format for in-toto's key definition can be found in section 4.2 of the in-toto specification.
type SigningKey struct {
	// key_id is an identifier for the signing key.
	KeyId *string `pulumi:"keyId"`
	// This field contains the corresponding signature scheme. Eg: "rsassa-pss-sha256".
	KeyScheme *string `pulumi:"keyScheme"`
	// This field identifies the specific signing method. Eg: "rsa", "ed25519", and "ecdsa".
	KeyType *string `pulumi:"keyType"`
	// This field contains the actual public key.
	PublicKeyValue *string `pulumi:"publicKeyValue"`
}

// SigningKeyInput is an input type that accepts SigningKeyArgs and SigningKeyOutput values.
// You can construct a concrete instance of `SigningKeyInput` via:
//
//	SigningKeyArgs{...}
type SigningKeyInput interface {
	pulumi.Input

	ToSigningKeyOutput() SigningKeyOutput
	ToSigningKeyOutputWithContext(context.Context) SigningKeyOutput
}

// This defines the format used to record keys used in the software supply chain. An in-toto link is attested using one or more keys defined in the in-toto layout. An example of this is: { "key_id": "776a00e29f3559e0141b3b096f696abc6cfb0c657ab40f441132b345b0...", "key_type": "rsa", "public_key_value": "-----BEGIN PUBLIC KEY-----\nMIIBojANBgkqhkiG9w0B...", "key_scheme": "rsassa-pss-sha256" } The format for in-toto's key definition can be found in section 4.2 of the in-toto specification.
type SigningKeyArgs struct {
	// key_id is an identifier for the signing key.
	KeyId pulumi.StringPtrInput `pulumi:"keyId"`
	// This field contains the corresponding signature scheme. Eg: "rsassa-pss-sha256".
	KeyScheme pulumi.StringPtrInput `pulumi:"keyScheme"`
	// This field identifies the specific signing method. Eg: "rsa", "ed25519", and "ecdsa".
	KeyType pulumi.StringPtrInput `pulumi:"keyType"`
	// This field contains the actual public key.
	PublicKeyValue pulumi.StringPtrInput `pulumi:"publicKeyValue"`
}

func (SigningKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SigningKey)(nil)).Elem()
}

func (i SigningKeyArgs) ToSigningKeyOutput() SigningKeyOutput {
	return i.ToSigningKeyOutputWithContext(context.Background())
}

func (i SigningKeyArgs) ToSigningKeyOutputWithContext(ctx context.Context) SigningKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SigningKeyOutput)
}

// SigningKeyArrayInput is an input type that accepts SigningKeyArray and SigningKeyArrayOutput values.
// You can construct a concrete instance of `SigningKeyArrayInput` via:
//
//	SigningKeyArray{ SigningKeyArgs{...} }
type SigningKeyArrayInput interface {
	pulumi.Input

	ToSigningKeyArrayOutput() SigningKeyArrayOutput
	ToSigningKeyArrayOutputWithContext(context.Context) SigningKeyArrayOutput
}

type SigningKeyArray []SigningKeyInput

func (SigningKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SigningKey)(nil)).Elem()
}

func (i SigningKeyArray) ToSigningKeyArrayOutput() SigningKeyArrayOutput {
	return i.ToSigningKeyArrayOutputWithContext(context.Background())
}

func (i SigningKeyArray) ToSigningKeyArrayOutputWithContext(ctx context.Context) SigningKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SigningKeyArrayOutput)
}

// This defines the format used to record keys used in the software supply chain. An in-toto link is attested using one or more keys defined in the in-toto layout. An example of this is: { "key_id": "776a00e29f3559e0141b3b096f696abc6cfb0c657ab40f441132b345b0...", "key_type": "rsa", "public_key_value": "-----BEGIN PUBLIC KEY-----\nMIIBojANBgkqhkiG9w0B...", "key_scheme": "rsassa-pss-sha256" } The format for in-toto's key definition can be found in section 4.2 of the in-toto specification.
type SigningKeyOutput struct{ *pulumi.OutputState }

func (SigningKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SigningKey)(nil)).Elem()
}

func (o SigningKeyOutput) ToSigningKeyOutput() SigningKeyOutput {
	return o
}

func (o SigningKeyOutput) ToSigningKeyOutputWithContext(ctx context.Context) SigningKeyOutput {
	return o
}

// key_id is an identifier for the signing key.
func (o SigningKeyOutput) KeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SigningKey) *string { return v.KeyId }).(pulumi.StringPtrOutput)
}

// This field contains the corresponding signature scheme. Eg: "rsassa-pss-sha256".
func (o SigningKeyOutput) KeyScheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SigningKey) *string { return v.KeyScheme }).(pulumi.StringPtrOutput)
}

// This field identifies the specific signing method. Eg: "rsa", "ed25519", and "ecdsa".
func (o SigningKeyOutput) KeyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SigningKey) *string { return v.KeyType }).(pulumi.StringPtrOutput)
}

// This field contains the actual public key.
func (o SigningKeyOutput) PublicKeyValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SigningKey) *string { return v.PublicKeyValue }).(pulumi.StringPtrOutput)
}

type SigningKeyArrayOutput struct{ *pulumi.OutputState }

func (SigningKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SigningKey)(nil)).Elem()
}

func (o SigningKeyArrayOutput) ToSigningKeyArrayOutput() SigningKeyArrayOutput {
	return o
}

func (o SigningKeyArrayOutput) ToSigningKeyArrayOutputWithContext(ctx context.Context) SigningKeyArrayOutput {
	return o
}

func (o SigningKeyArrayOutput) Index(i pulumi.IntInput) SigningKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SigningKey {
		return vs[0].([]SigningKey)[vs[1].(int)]
	}).(SigningKeyOutput)
}

// This defines the format used to record keys used in the software supply chain. An in-toto link is attested using one or more keys defined in the in-toto layout. An example of this is: { "key_id": "776a00e29f3559e0141b3b096f696abc6cfb0c657ab40f441132b345b0...", "key_type": "rsa", "public_key_value": "-----BEGIN PUBLIC KEY-----\nMIIBojANBgkqhkiG9w0B...", "key_scheme": "rsassa-pss-sha256" } The format for in-toto's key definition can be found in section 4.2 of the in-toto specification.
type SigningKeyResponse struct {
	// key_id is an identifier for the signing key.
	KeyId string `pulumi:"keyId"`
	// This field contains the corresponding signature scheme. Eg: "rsassa-pss-sha256".
	KeyScheme string `pulumi:"keyScheme"`
	// This field identifies the specific signing method. Eg: "rsa", "ed25519", and "ecdsa".
	KeyType string `pulumi:"keyType"`
	// This field contains the actual public key.
	PublicKeyValue string `pulumi:"publicKeyValue"`
}

// This defines the format used to record keys used in the software supply chain. An in-toto link is attested using one or more keys defined in the in-toto layout. An example of this is: { "key_id": "776a00e29f3559e0141b3b096f696abc6cfb0c657ab40f441132b345b0...", "key_type": "rsa", "public_key_value": "-----BEGIN PUBLIC KEY-----\nMIIBojANBgkqhkiG9w0B...", "key_scheme": "rsassa-pss-sha256" } The format for in-toto's key definition can be found in section 4.2 of the in-toto specification.
type SigningKeyResponseOutput struct{ *pulumi.OutputState }

func (SigningKeyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SigningKeyResponse)(nil)).Elem()
}

func (o SigningKeyResponseOutput) ToSigningKeyResponseOutput() SigningKeyResponseOutput {
	return o
}

func (o SigningKeyResponseOutput) ToSigningKeyResponseOutputWithContext(ctx context.Context) SigningKeyResponseOutput {
	return o
}

// key_id is an identifier for the signing key.
func (o SigningKeyResponseOutput) KeyId() pulumi.StringOutput {
	return o.ApplyT(func(v SigningKeyResponse) string { return v.KeyId }).(pulumi.StringOutput)
}

// This field contains the corresponding signature scheme. Eg: "rsassa-pss-sha256".
func (o SigningKeyResponseOutput) KeyScheme() pulumi.StringOutput {
	return o.ApplyT(func(v SigningKeyResponse) string { return v.KeyScheme }).(pulumi.StringOutput)
}

// This field identifies the specific signing method. Eg: "rsa", "ed25519", and "ecdsa".
func (o SigningKeyResponseOutput) KeyType() pulumi.StringOutput {
	return o.ApplyT(func(v SigningKeyResponse) string { return v.KeyType }).(pulumi.StringOutput)
}

// This field contains the actual public key.
func (o SigningKeyResponseOutput) PublicKeyValue() pulumi.StringOutput {
	return o.ApplyT(func(v SigningKeyResponse) string { return v.PublicKeyValue }).(pulumi.StringOutput)
}

type SigningKeyResponseArrayOutput struct{ *pulumi.OutputState }

func (SigningKeyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SigningKeyResponse)(nil)).Elem()
}

func (o SigningKeyResponseArrayOutput) ToSigningKeyResponseArrayOutput() SigningKeyResponseArrayOutput {
	return o
}

func (o SigningKeyResponseArrayOutput) ToSigningKeyResponseArrayOutputWithContext(ctx context.Context) SigningKeyResponseArrayOutput {
	return o
}

func (o SigningKeyResponseArrayOutput) Index(i pulumi.IntInput) SigningKeyResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SigningKeyResponse {
		return vs[0].([]SigningKeyResponse)[vs[1].(int)]
	}).(SigningKeyResponseOutput)
}

// Keep in sync with schema at https://github.com/slsa-framework/slsa/blob/main/docs/provenance/schema/v1/provenance.proto Builder renamed to ProvenanceBuilder because of Java conflicts.
type SlsaProvenanceV1 struct {
	BuildDefinition *BuildDefinition `pulumi:"buildDefinition"`
	RunDetails      *RunDetails      `pulumi:"runDetails"`
}

// SlsaProvenanceV1Input is an input type that accepts SlsaProvenanceV1Args and SlsaProvenanceV1Output values.
// You can construct a concrete instance of `SlsaProvenanceV1Input` via:
//
//	SlsaProvenanceV1Args{...}
type SlsaProvenanceV1Input interface {
	pulumi.Input

	ToSlsaProvenanceV1Output() SlsaProvenanceV1Output
	ToSlsaProvenanceV1OutputWithContext(context.Context) SlsaProvenanceV1Output
}

// Keep in sync with schema at https://github.com/slsa-framework/slsa/blob/main/docs/provenance/schema/v1/provenance.proto Builder renamed to ProvenanceBuilder because of Java conflicts.
type SlsaProvenanceV1Args struct {
	BuildDefinition BuildDefinitionPtrInput `pulumi:"buildDefinition"`
	RunDetails      RunDetailsPtrInput      `pulumi:"runDetails"`
}

func (SlsaProvenanceV1Args) ElementType() reflect.Type {
	return reflect.TypeOf((*SlsaProvenanceV1)(nil)).Elem()
}

func (i SlsaProvenanceV1Args) ToSlsaProvenanceV1Output() SlsaProvenanceV1Output {
	return i.ToSlsaProvenanceV1OutputWithContext(context.Background())
}

func (i SlsaProvenanceV1Args) ToSlsaProvenanceV1OutputWithContext(ctx context.Context) SlsaProvenanceV1Output {
	return pulumi.ToOutputWithContext(ctx, i).(SlsaProvenanceV1Output)
}

func (i SlsaProvenanceV1Args) ToSlsaProvenanceV1PtrOutput() SlsaProvenanceV1PtrOutput {
	return i.ToSlsaProvenanceV1PtrOutputWithContext(context.Background())
}

func (i SlsaProvenanceV1Args) ToSlsaProvenanceV1PtrOutputWithContext(ctx context.Context) SlsaProvenanceV1PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlsaProvenanceV1Output).ToSlsaProvenanceV1PtrOutputWithContext(ctx)
}

// SlsaProvenanceV1PtrInput is an input type that accepts SlsaProvenanceV1Args, SlsaProvenanceV1Ptr and SlsaProvenanceV1PtrOutput values.
// You can construct a concrete instance of `SlsaProvenanceV1PtrInput` via:
//
//	        SlsaProvenanceV1Args{...}
//
//	or:
//
//	        nil
type SlsaProvenanceV1PtrInput interface {
	pulumi.Input

	ToSlsaProvenanceV1PtrOutput() SlsaProvenanceV1PtrOutput
	ToSlsaProvenanceV1PtrOutputWithContext(context.Context) SlsaProvenanceV1PtrOutput
}

type slsaProvenanceV1PtrType SlsaProvenanceV1Args

func SlsaProvenanceV1Ptr(v *SlsaProvenanceV1Args) SlsaProvenanceV1PtrInput {
	return (*slsaProvenanceV1PtrType)(v)
}

func (*slsaProvenanceV1PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SlsaProvenanceV1)(nil)).Elem()
}

func (i *slsaProvenanceV1PtrType) ToSlsaProvenanceV1PtrOutput() SlsaProvenanceV1PtrOutput {
	return i.ToSlsaProvenanceV1PtrOutputWithContext(context.Background())
}

func (i *slsaProvenanceV1PtrType) ToSlsaProvenanceV1PtrOutputWithContext(ctx context.Context) SlsaProvenanceV1PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlsaProvenanceV1PtrOutput)
}

// Keep in sync with schema at https://github.com/slsa-framework/slsa/blob/main/docs/provenance/schema/v1/provenance.proto Builder renamed to ProvenanceBuilder because of Java conflicts.
type SlsaProvenanceV1Output struct{ *pulumi.OutputState }

func (SlsaProvenanceV1Output) ElementType() reflect.Type {
	return reflect.TypeOf((*SlsaProvenanceV1)(nil)).Elem()
}

func (o SlsaProvenanceV1Output) ToSlsaProvenanceV1Output() SlsaProvenanceV1Output {
	return o
}

func (o SlsaProvenanceV1Output) ToSlsaProvenanceV1OutputWithContext(ctx context.Context) SlsaProvenanceV1Output {
	return o
}

func (o SlsaProvenanceV1Output) ToSlsaProvenanceV1PtrOutput() SlsaProvenanceV1PtrOutput {
	return o.ToSlsaProvenanceV1PtrOutputWithContext(context.Background())
}

func (o SlsaProvenanceV1Output) ToSlsaProvenanceV1PtrOutputWithContext(ctx context.Context) SlsaProvenanceV1PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SlsaProvenanceV1) *SlsaProvenanceV1 {
		return &v
	}).(SlsaProvenanceV1PtrOutput)
}

func (o SlsaProvenanceV1Output) BuildDefinition() BuildDefinitionPtrOutput {
	return o.ApplyT(func(v SlsaProvenanceV1) *BuildDefinition { return v.BuildDefinition }).(BuildDefinitionPtrOutput)
}

func (o SlsaProvenanceV1Output) RunDetails() RunDetailsPtrOutput {
	return o.ApplyT(func(v SlsaProvenanceV1) *RunDetails { return v.RunDetails }).(RunDetailsPtrOutput)
}

type SlsaProvenanceV1PtrOutput struct{ *pulumi.OutputState }

func (SlsaProvenanceV1PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SlsaProvenanceV1)(nil)).Elem()
}

func (o SlsaProvenanceV1PtrOutput) ToSlsaProvenanceV1PtrOutput() SlsaProvenanceV1PtrOutput {
	return o
}

func (o SlsaProvenanceV1PtrOutput) ToSlsaProvenanceV1PtrOutputWithContext(ctx context.Context) SlsaProvenanceV1PtrOutput {
	return o
}

func (o SlsaProvenanceV1PtrOutput) Elem() SlsaProvenanceV1Output {
	return o.ApplyT(func(v *SlsaProvenanceV1) SlsaProvenanceV1 {
		if v != nil {
			return *v
		}
		var ret SlsaProvenanceV1
		return ret
	}).(SlsaProvenanceV1Output)
}

func (o SlsaProvenanceV1PtrOutput) BuildDefinition() BuildDefinitionPtrOutput {
	return o.ApplyT(func(v *SlsaProvenanceV1) *BuildDefinition {
		if v == nil {
			return nil
		}
		return v.BuildDefinition
	}).(BuildDefinitionPtrOutput)
}

func (o SlsaProvenanceV1PtrOutput) RunDetails() RunDetailsPtrOutput {
	return o.ApplyT(func(v *SlsaProvenanceV1) *RunDetails {
		if v == nil {
			return nil
		}
		return v.RunDetails
	}).(RunDetailsPtrOutput)
}

// Keep in sync with schema at https://github.com/slsa-framework/slsa/blob/main/docs/provenance/schema/v1/provenance.proto Builder renamed to ProvenanceBuilder because of Java conflicts.
type SlsaProvenanceV1Response struct {
	BuildDefinition BuildDefinitionResponse `pulumi:"buildDefinition"`
	RunDetails      RunDetailsResponse      `pulumi:"runDetails"`
}

// Keep in sync with schema at https://github.com/slsa-framework/slsa/blob/main/docs/provenance/schema/v1/provenance.proto Builder renamed to ProvenanceBuilder because of Java conflicts.
type SlsaProvenanceV1ResponseOutput struct{ *pulumi.OutputState }

func (SlsaProvenanceV1ResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SlsaProvenanceV1Response)(nil)).Elem()
}

func (o SlsaProvenanceV1ResponseOutput) ToSlsaProvenanceV1ResponseOutput() SlsaProvenanceV1ResponseOutput {
	return o
}

func (o SlsaProvenanceV1ResponseOutput) ToSlsaProvenanceV1ResponseOutputWithContext(ctx context.Context) SlsaProvenanceV1ResponseOutput {
	return o
}

func (o SlsaProvenanceV1ResponseOutput) BuildDefinition() BuildDefinitionResponseOutput {
	return o.ApplyT(func(v SlsaProvenanceV1Response) BuildDefinitionResponse { return v.BuildDefinition }).(BuildDefinitionResponseOutput)
}

func (o SlsaProvenanceV1ResponseOutput) RunDetails() RunDetailsResponseOutput {
	return o.ApplyT(func(v SlsaProvenanceV1Response) RunDetailsResponse { return v.RunDetails }).(RunDetailsResponseOutput)
}

// Source describes the location of the source used for the build.
type Source struct {
	// If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field.
	AdditionalContexts []SourceContext `pulumi:"additionalContexts"`
	// If provided, the input binary artifacts for the build came from this location.
	ArtifactStorageSourceUri *string `pulumi:"artifactStorageSourceUri"`
	// If provided, the source code used for the build came from this location.
	Context *SourceContext `pulumi:"context"`
	// Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file.
	FileHashes *FileHashes `pulumi:"fileHashes"`
}

// SourceInput is an input type that accepts SourceArgs and SourceOutput values.
// You can construct a concrete instance of `SourceInput` via:
//
//	SourceArgs{...}
type SourceInput interface {
	pulumi.Input

	ToSourceOutput() SourceOutput
	ToSourceOutputWithContext(context.Context) SourceOutput
}

// Source describes the location of the source used for the build.
type SourceArgs struct {
	// If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field.
	AdditionalContexts SourceContextArrayInput `pulumi:"additionalContexts"`
	// If provided, the input binary artifacts for the build came from this location.
	ArtifactStorageSourceUri pulumi.StringPtrInput `pulumi:"artifactStorageSourceUri"`
	// If provided, the source code used for the build came from this location.
	Context SourceContextPtrInput `pulumi:"context"`
	// Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file.
	FileHashes FileHashesPtrInput `pulumi:"fileHashes"`
}

func (SourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Source)(nil)).Elem()
}

func (i SourceArgs) ToSourceOutput() SourceOutput {
	return i.ToSourceOutputWithContext(context.Background())
}

func (i SourceArgs) ToSourceOutputWithContext(ctx context.Context) SourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceOutput)
}

func (i SourceArgs) ToSourcePtrOutput() SourcePtrOutput {
	return i.ToSourcePtrOutputWithContext(context.Background())
}

func (i SourceArgs) ToSourcePtrOutputWithContext(ctx context.Context) SourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceOutput).ToSourcePtrOutputWithContext(ctx)
}

// SourcePtrInput is an input type that accepts SourceArgs, SourcePtr and SourcePtrOutput values.
// You can construct a concrete instance of `SourcePtrInput` via:
//
//	        SourceArgs{...}
//
//	or:
//
//	        nil
type SourcePtrInput interface {
	pulumi.Input

	ToSourcePtrOutput() SourcePtrOutput
	ToSourcePtrOutputWithContext(context.Context) SourcePtrOutput
}

type sourcePtrType SourceArgs

func SourcePtr(v *SourceArgs) SourcePtrInput {
	return (*sourcePtrType)(v)
}

func (*sourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Source)(nil)).Elem()
}

func (i *sourcePtrType) ToSourcePtrOutput() SourcePtrOutput {
	return i.ToSourcePtrOutputWithContext(context.Background())
}

func (i *sourcePtrType) ToSourcePtrOutputWithContext(ctx context.Context) SourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourcePtrOutput)
}

// Source describes the location of the source used for the build.
type SourceOutput struct{ *pulumi.OutputState }

func (SourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Source)(nil)).Elem()
}

func (o SourceOutput) ToSourceOutput() SourceOutput {
	return o
}

func (o SourceOutput) ToSourceOutputWithContext(ctx context.Context) SourceOutput {
	return o
}

func (o SourceOutput) ToSourcePtrOutput() SourcePtrOutput {
	return o.ToSourcePtrOutputWithContext(context.Background())
}

func (o SourceOutput) ToSourcePtrOutputWithContext(ctx context.Context) SourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Source) *Source {
		return &v
	}).(SourcePtrOutput)
}

// If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field.
func (o SourceOutput) AdditionalContexts() SourceContextArrayOutput {
	return o.ApplyT(func(v Source) []SourceContext { return v.AdditionalContexts }).(SourceContextArrayOutput)
}

// If provided, the input binary artifacts for the build came from this location.
func (o SourceOutput) ArtifactStorageSourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Source) *string { return v.ArtifactStorageSourceUri }).(pulumi.StringPtrOutput)
}

// If provided, the source code used for the build came from this location.
func (o SourceOutput) Context() SourceContextPtrOutput {
	return o.ApplyT(func(v Source) *SourceContext { return v.Context }).(SourceContextPtrOutput)
}

// Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file.
func (o SourceOutput) FileHashes() FileHashesPtrOutput {
	return o.ApplyT(func(v Source) *FileHashes { return v.FileHashes }).(FileHashesPtrOutput)
}

type SourcePtrOutput struct{ *pulumi.OutputState }

func (SourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Source)(nil)).Elem()
}

func (o SourcePtrOutput) ToSourcePtrOutput() SourcePtrOutput {
	return o
}

func (o SourcePtrOutput) ToSourcePtrOutputWithContext(ctx context.Context) SourcePtrOutput {
	return o
}

func (o SourcePtrOutput) Elem() SourceOutput {
	return o.ApplyT(func(v *Source) Source {
		if v != nil {
			return *v
		}
		var ret Source
		return ret
	}).(SourceOutput)
}

// If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field.
func (o SourcePtrOutput) AdditionalContexts() SourceContextArrayOutput {
	return o.ApplyT(func(v *Source) []SourceContext {
		if v == nil {
			return nil
		}
		return v.AdditionalContexts
	}).(SourceContextArrayOutput)
}

// If provided, the input binary artifacts for the build came from this location.
func (o SourcePtrOutput) ArtifactStorageSourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Source) *string {
		if v == nil {
			return nil
		}
		return v.ArtifactStorageSourceUri
	}).(pulumi.StringPtrOutput)
}

// If provided, the source code used for the build came from this location.
func (o SourcePtrOutput) Context() SourceContextPtrOutput {
	return o.ApplyT(func(v *Source) *SourceContext {
		if v == nil {
			return nil
		}
		return v.Context
	}).(SourceContextPtrOutput)
}

// Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file.
func (o SourcePtrOutput) FileHashes() FileHashesPtrOutput {
	return o.ApplyT(func(v *Source) *FileHashes {
		if v == nil {
			return nil
		}
		return v.FileHashes
	}).(FileHashesPtrOutput)
}

// A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory.
type SourceContext struct {
	// A SourceContext referring to a revision in a Google Cloud Source Repo.
	CloudRepo *CloudRepoSourceContext `pulumi:"cloudRepo"`
	// A SourceContext referring to a Gerrit project.
	Gerrit *GerritSourceContext `pulumi:"gerrit"`
	// A SourceContext referring to any third party Git repo (e.g., GitHub).
	Git *GitSourceContext `pulumi:"git"`
	// Labels with user defined metadata.
	Labels map[string]string `pulumi:"labels"`
}

// SourceContextInput is an input type that accepts SourceContextArgs and SourceContextOutput values.
// You can construct a concrete instance of `SourceContextInput` via:
//
//	SourceContextArgs{...}
type SourceContextInput interface {
	pulumi.Input

	ToSourceContextOutput() SourceContextOutput
	ToSourceContextOutputWithContext(context.Context) SourceContextOutput
}

// A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory.
type SourceContextArgs struct {
	// A SourceContext referring to a revision in a Google Cloud Source Repo.
	CloudRepo CloudRepoSourceContextPtrInput `pulumi:"cloudRepo"`
	// A SourceContext referring to a Gerrit project.
	Gerrit GerritSourceContextPtrInput `pulumi:"gerrit"`
	// A SourceContext referring to any third party Git repo (e.g., GitHub).
	Git GitSourceContextPtrInput `pulumi:"git"`
	// Labels with user defined metadata.
	Labels pulumi.StringMapInput `pulumi:"labels"`
}

func (SourceContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceContext)(nil)).Elem()
}

func (i SourceContextArgs) ToSourceContextOutput() SourceContextOutput {
	return i.ToSourceContextOutputWithContext(context.Background())
}

func (i SourceContextArgs) ToSourceContextOutputWithContext(ctx context.Context) SourceContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceContextOutput)
}

func (i SourceContextArgs) ToSourceContextPtrOutput() SourceContextPtrOutput {
	return i.ToSourceContextPtrOutputWithContext(context.Background())
}

func (i SourceContextArgs) ToSourceContextPtrOutputWithContext(ctx context.Context) SourceContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceContextOutput).ToSourceContextPtrOutputWithContext(ctx)
}

// SourceContextPtrInput is an input type that accepts SourceContextArgs, SourceContextPtr and SourceContextPtrOutput values.
// You can construct a concrete instance of `SourceContextPtrInput` via:
//
//	        SourceContextArgs{...}
//
//	or:
//
//	        nil
type SourceContextPtrInput interface {
	pulumi.Input

	ToSourceContextPtrOutput() SourceContextPtrOutput
	ToSourceContextPtrOutputWithContext(context.Context) SourceContextPtrOutput
}

type sourceContextPtrType SourceContextArgs

func SourceContextPtr(v *SourceContextArgs) SourceContextPtrInput {
	return (*sourceContextPtrType)(v)
}

func (*sourceContextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceContext)(nil)).Elem()
}

func (i *sourceContextPtrType) ToSourceContextPtrOutput() SourceContextPtrOutput {
	return i.ToSourceContextPtrOutputWithContext(context.Background())
}

func (i *sourceContextPtrType) ToSourceContextPtrOutputWithContext(ctx context.Context) SourceContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceContextPtrOutput)
}

// SourceContextArrayInput is an input type that accepts SourceContextArray and SourceContextArrayOutput values.
// You can construct a concrete instance of `SourceContextArrayInput` via:
//
//	SourceContextArray{ SourceContextArgs{...} }
type SourceContextArrayInput interface {
	pulumi.Input

	ToSourceContextArrayOutput() SourceContextArrayOutput
	ToSourceContextArrayOutputWithContext(context.Context) SourceContextArrayOutput
}

type SourceContextArray []SourceContextInput

func (SourceContextArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SourceContext)(nil)).Elem()
}

func (i SourceContextArray) ToSourceContextArrayOutput() SourceContextArrayOutput {
	return i.ToSourceContextArrayOutputWithContext(context.Background())
}

func (i SourceContextArray) ToSourceContextArrayOutputWithContext(ctx context.Context) SourceContextArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceContextArrayOutput)
}

// A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory.
type SourceContextOutput struct{ *pulumi.OutputState }

func (SourceContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceContext)(nil)).Elem()
}

func (o SourceContextOutput) ToSourceContextOutput() SourceContextOutput {
	return o
}

func (o SourceContextOutput) ToSourceContextOutputWithContext(ctx context.Context) SourceContextOutput {
	return o
}

func (o SourceContextOutput) ToSourceContextPtrOutput() SourceContextPtrOutput {
	return o.ToSourceContextPtrOutputWithContext(context.Background())
}

func (o SourceContextOutput) ToSourceContextPtrOutputWithContext(ctx context.Context) SourceContextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SourceContext) *SourceContext {
		return &v
	}).(SourceContextPtrOutput)
}

// A SourceContext referring to a revision in a Google Cloud Source Repo.
func (o SourceContextOutput) CloudRepo() CloudRepoSourceContextPtrOutput {
	return o.ApplyT(func(v SourceContext) *CloudRepoSourceContext { return v.CloudRepo }).(CloudRepoSourceContextPtrOutput)
}

// A SourceContext referring to a Gerrit project.
func (o SourceContextOutput) Gerrit() GerritSourceContextPtrOutput {
	return o.ApplyT(func(v SourceContext) *GerritSourceContext { return v.Gerrit }).(GerritSourceContextPtrOutput)
}

// A SourceContext referring to any third party Git repo (e.g., GitHub).
func (o SourceContextOutput) Git() GitSourceContextPtrOutput {
	return o.ApplyT(func(v SourceContext) *GitSourceContext { return v.Git }).(GitSourceContextPtrOutput)
}

// Labels with user defined metadata.
func (o SourceContextOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v SourceContext) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

type SourceContextPtrOutput struct{ *pulumi.OutputState }

func (SourceContextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceContext)(nil)).Elem()
}

func (o SourceContextPtrOutput) ToSourceContextPtrOutput() SourceContextPtrOutput {
	return o
}

func (o SourceContextPtrOutput) ToSourceContextPtrOutputWithContext(ctx context.Context) SourceContextPtrOutput {
	return o
}

func (o SourceContextPtrOutput) Elem() SourceContextOutput {
	return o.ApplyT(func(v *SourceContext) SourceContext {
		if v != nil {
			return *v
		}
		var ret SourceContext
		return ret
	}).(SourceContextOutput)
}

// A SourceContext referring to a revision in a Google Cloud Source Repo.
func (o SourceContextPtrOutput) CloudRepo() CloudRepoSourceContextPtrOutput {
	return o.ApplyT(func(v *SourceContext) *CloudRepoSourceContext {
		if v == nil {
			return nil
		}
		return v.CloudRepo
	}).(CloudRepoSourceContextPtrOutput)
}

// A SourceContext referring to a Gerrit project.
func (o SourceContextPtrOutput) Gerrit() GerritSourceContextPtrOutput {
	return o.ApplyT(func(v *SourceContext) *GerritSourceContext {
		if v == nil {
			return nil
		}
		return v.Gerrit
	}).(GerritSourceContextPtrOutput)
}

// A SourceContext referring to any third party Git repo (e.g., GitHub).
func (o SourceContextPtrOutput) Git() GitSourceContextPtrOutput {
	return o.ApplyT(func(v *SourceContext) *GitSourceContext {
		if v == nil {
			return nil
		}
		return v.Git
	}).(GitSourceContextPtrOutput)
}

// Labels with user defined metadata.
func (o SourceContextPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SourceContext) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

type SourceContextArrayOutput struct{ *pulumi.OutputState }

func (SourceContextArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SourceContext)(nil)).Elem()
}

func (o SourceContextArrayOutput) ToSourceContextArrayOutput() SourceContextArrayOutput {
	return o
}

func (o SourceContextArrayOutput) ToSourceContextArrayOutputWithContext(ctx context.Context) SourceContextArrayOutput {
	return o
}

func (o SourceContextArrayOutput) Index(i pulumi.IntInput) SourceContextOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SourceContext {
		return vs[0].([]SourceContext)[vs[1].(int)]
	}).(SourceContextOutput)
}

// A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory.
type SourceContextResponse struct {
	// A SourceContext referring to a revision in a Google Cloud Source Repo.
	CloudRepo CloudRepoSourceContextResponse `pulumi:"cloudRepo"`
	// A SourceContext referring to a Gerrit project.
	Gerrit GerritSourceContextResponse `pulumi:"gerrit"`
	// A SourceContext referring to any third party Git repo (e.g., GitHub).
	Git GitSourceContextResponse `pulumi:"git"`
	// Labels with user defined metadata.
	Labels map[string]string `pulumi:"labels"`
}

// A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory.
type SourceContextResponseOutput struct{ *pulumi.OutputState }

func (SourceContextResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceContextResponse)(nil)).Elem()
}

func (o SourceContextResponseOutput) ToSourceContextResponseOutput() SourceContextResponseOutput {
	return o
}

func (o SourceContextResponseOutput) ToSourceContextResponseOutputWithContext(ctx context.Context) SourceContextResponseOutput {
	return o
}

// A SourceContext referring to a revision in a Google Cloud Source Repo.
func (o SourceContextResponseOutput) CloudRepo() CloudRepoSourceContextResponseOutput {
	return o.ApplyT(func(v SourceContextResponse) CloudRepoSourceContextResponse { return v.CloudRepo }).(CloudRepoSourceContextResponseOutput)
}

// A SourceContext referring to a Gerrit project.
func (o SourceContextResponseOutput) Gerrit() GerritSourceContextResponseOutput {
	return o.ApplyT(func(v SourceContextResponse) GerritSourceContextResponse { return v.Gerrit }).(GerritSourceContextResponseOutput)
}

// A SourceContext referring to any third party Git repo (e.g., GitHub).
func (o SourceContextResponseOutput) Git() GitSourceContextResponseOutput {
	return o.ApplyT(func(v SourceContextResponse) GitSourceContextResponse { return v.Git }).(GitSourceContextResponseOutput)
}

// Labels with user defined metadata.
func (o SourceContextResponseOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v SourceContextResponse) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

type SourceContextResponseArrayOutput struct{ *pulumi.OutputState }

func (SourceContextResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SourceContextResponse)(nil)).Elem()
}

func (o SourceContextResponseArrayOutput) ToSourceContextResponseArrayOutput() SourceContextResponseArrayOutput {
	return o
}

func (o SourceContextResponseArrayOutput) ToSourceContextResponseArrayOutputWithContext(ctx context.Context) SourceContextResponseArrayOutput {
	return o
}

func (o SourceContextResponseArrayOutput) Index(i pulumi.IntInput) SourceContextResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SourceContextResponse {
		return vs[0].([]SourceContextResponse)[vs[1].(int)]
	}).(SourceContextResponseOutput)
}

// Source describes the location of the source used for the build.
type SourceResponse struct {
	// If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field.
	AdditionalContexts []SourceContextResponse `pulumi:"additionalContexts"`
	// If provided, the input binary artifacts for the build came from this location.
	ArtifactStorageSourceUri string `pulumi:"artifactStorageSourceUri"`
	// If provided, the source code used for the build came from this location.
	Context SourceContextResponse `pulumi:"context"`
	// Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file.
	FileHashes FileHashesResponse `pulumi:"fileHashes"`
}

// Source describes the location of the source used for the build.
type SourceResponseOutput struct{ *pulumi.OutputState }

func (SourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceResponse)(nil)).Elem()
}

func (o SourceResponseOutput) ToSourceResponseOutput() SourceResponseOutput {
	return o
}

func (o SourceResponseOutput) ToSourceResponseOutputWithContext(ctx context.Context) SourceResponseOutput {
	return o
}

// If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field.
func (o SourceResponseOutput) AdditionalContexts() SourceContextResponseArrayOutput {
	return o.ApplyT(func(v SourceResponse) []SourceContextResponse { return v.AdditionalContexts }).(SourceContextResponseArrayOutput)
}

// If provided, the input binary artifacts for the build came from this location.
func (o SourceResponseOutput) ArtifactStorageSourceUri() pulumi.StringOutput {
	return o.ApplyT(func(v SourceResponse) string { return v.ArtifactStorageSourceUri }).(pulumi.StringOutput)
}

// If provided, the source code used for the build came from this location.
func (o SourceResponseOutput) Context() SourceContextResponseOutput {
	return o.ApplyT(func(v SourceResponse) SourceContextResponse { return v.Context }).(SourceContextResponseOutput)
}

// Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file.
func (o SourceResponseOutput) FileHashes() FileHashesResponseOutput {
	return o.ApplyT(func(v SourceResponse) FileHashesResponse { return v.FileHashes }).(FileHashesResponseOutput)
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type Status struct {
	// The status code, which should be an enum value of google.rpc.Code.
	Code *int `pulumi:"code"`
	// A list of messages that carry the error details. There is a common set of message types for APIs to use.
	Details []map[string]interface{} `pulumi:"details"`
	// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
	Message *string `pulumi:"message"`
}

// StatusInput is an input type that accepts StatusArgs and StatusOutput values.
// You can construct a concrete instance of `StatusInput` via:
//
//	StatusArgs{...}
type StatusInput interface {
	pulumi.Input

	ToStatusOutput() StatusOutput
	ToStatusOutputWithContext(context.Context) StatusOutput
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type StatusArgs struct {
	// The status code, which should be an enum value of google.rpc.Code.
	Code pulumi.IntPtrInput `pulumi:"code"`
	// A list of messages that carry the error details. There is a common set of message types for APIs to use.
	Details pulumi.MapArrayInput `pulumi:"details"`
	// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
	Message pulumi.StringPtrInput `pulumi:"message"`
}

func (StatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Status)(nil)).Elem()
}

func (i StatusArgs) ToStatusOutput() StatusOutput {
	return i.ToStatusOutputWithContext(context.Background())
}

func (i StatusArgs) ToStatusOutputWithContext(ctx context.Context) StatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusOutput)
}

func (i StatusArgs) ToStatusPtrOutput() StatusPtrOutput {
	return i.ToStatusPtrOutputWithContext(context.Background())
}

func (i StatusArgs) ToStatusPtrOutputWithContext(ctx context.Context) StatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusOutput).ToStatusPtrOutputWithContext(ctx)
}

// StatusPtrInput is an input type that accepts StatusArgs, StatusPtr and StatusPtrOutput values.
// You can construct a concrete instance of `StatusPtrInput` via:
//
//	        StatusArgs{...}
//
//	or:
//
//	        nil
type StatusPtrInput interface {
	pulumi.Input

	ToStatusPtrOutput() StatusPtrOutput
	ToStatusPtrOutputWithContext(context.Context) StatusPtrOutput
}

type statusPtrType StatusArgs

func StatusPtr(v *StatusArgs) StatusPtrInput {
	return (*statusPtrType)(v)
}

func (*statusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Status)(nil)).Elem()
}

func (i *statusPtrType) ToStatusPtrOutput() StatusPtrOutput {
	return i.ToStatusPtrOutputWithContext(context.Background())
}

func (i *statusPtrType) ToStatusPtrOutputWithContext(ctx context.Context) StatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusPtrOutput)
}

// StatusArrayInput is an input type that accepts StatusArray and StatusArrayOutput values.
// You can construct a concrete instance of `StatusArrayInput` via:
//
//	StatusArray{ StatusArgs{...} }
type StatusArrayInput interface {
	pulumi.Input

	ToStatusArrayOutput() StatusArrayOutput
	ToStatusArrayOutputWithContext(context.Context) StatusArrayOutput
}

type StatusArray []StatusInput

func (StatusArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Status)(nil)).Elem()
}

func (i StatusArray) ToStatusArrayOutput() StatusArrayOutput {
	return i.ToStatusArrayOutputWithContext(context.Background())
}

func (i StatusArray) ToStatusArrayOutputWithContext(ctx context.Context) StatusArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusArrayOutput)
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type StatusOutput struct{ *pulumi.OutputState }

func (StatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Status)(nil)).Elem()
}

func (o StatusOutput) ToStatusOutput() StatusOutput {
	return o
}

func (o StatusOutput) ToStatusOutputWithContext(ctx context.Context) StatusOutput {
	return o
}

func (o StatusOutput) ToStatusPtrOutput() StatusPtrOutput {
	return o.ToStatusPtrOutputWithContext(context.Background())
}

func (o StatusOutput) ToStatusPtrOutputWithContext(ctx context.Context) StatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Status) *Status {
		return &v
	}).(StatusPtrOutput)
}

// The status code, which should be an enum value of google.rpc.Code.
func (o StatusOutput) Code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Status) *int { return v.Code }).(pulumi.IntPtrOutput)
}

// A list of messages that carry the error details. There is a common set of message types for APIs to use.
func (o StatusOutput) Details() pulumi.MapArrayOutput {
	return o.ApplyT(func(v Status) []map[string]interface{} { return v.Details }).(pulumi.MapArrayOutput)
}

// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
func (o StatusOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Status) *string { return v.Message }).(pulumi.StringPtrOutput)
}

type StatusPtrOutput struct{ *pulumi.OutputState }

func (StatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Status)(nil)).Elem()
}

func (o StatusPtrOutput) ToStatusPtrOutput() StatusPtrOutput {
	return o
}

func (o StatusPtrOutput) ToStatusPtrOutputWithContext(ctx context.Context) StatusPtrOutput {
	return o
}

func (o StatusPtrOutput) Elem() StatusOutput {
	return o.ApplyT(func(v *Status) Status {
		if v != nil {
			return *v
		}
		var ret Status
		return ret
	}).(StatusOutput)
}

// The status code, which should be an enum value of google.rpc.Code.
func (o StatusPtrOutput) Code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Status) *int {
		if v == nil {
			return nil
		}
		return v.Code
	}).(pulumi.IntPtrOutput)
}

// A list of messages that carry the error details. There is a common set of message types for APIs to use.
func (o StatusPtrOutput) Details() pulumi.MapArrayOutput {
	return o.ApplyT(func(v *Status) []map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Details
	}).(pulumi.MapArrayOutput)
}

// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
func (o StatusPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Status) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

type StatusArrayOutput struct{ *pulumi.OutputState }

func (StatusArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Status)(nil)).Elem()
}

func (o StatusArrayOutput) ToStatusArrayOutput() StatusArrayOutput {
	return o
}

func (o StatusArrayOutput) ToStatusArrayOutputWithContext(ctx context.Context) StatusArrayOutput {
	return o
}

func (o StatusArrayOutput) Index(i pulumi.IntInput) StatusOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Status {
		return vs[0].([]Status)[vs[1].(int)]
	}).(StatusOutput)
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type StatusResponse struct {
	// The status code, which should be an enum value of google.rpc.Code.
	Code int `pulumi:"code"`
	// A list of messages that carry the error details. There is a common set of message types for APIs to use.
	Details []map[string]interface{} `pulumi:"details"`
	// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
	Message string `pulumi:"message"`
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type StatusResponseOutput struct{ *pulumi.OutputState }

func (StatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusResponse)(nil)).Elem()
}

func (o StatusResponseOutput) ToStatusResponseOutput() StatusResponseOutput {
	return o
}

func (o StatusResponseOutput) ToStatusResponseOutputWithContext(ctx context.Context) StatusResponseOutput {
	return o
}

// The status code, which should be an enum value of google.rpc.Code.
func (o StatusResponseOutput) Code() pulumi.IntOutput {
	return o.ApplyT(func(v StatusResponse) int { return v.Code }).(pulumi.IntOutput)
}

// A list of messages that carry the error details. There is a common set of message types for APIs to use.
func (o StatusResponseOutput) Details() pulumi.MapArrayOutput {
	return o.ApplyT(func(v StatusResponse) []map[string]interface{} { return v.Details }).(pulumi.MapArrayOutput)
}

// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
func (o StatusResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v StatusResponse) string { return v.Message }).(pulumi.StringOutput)
}

type StatusResponseArrayOutput struct{ *pulumi.OutputState }

func (StatusResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StatusResponse)(nil)).Elem()
}

func (o StatusResponseArrayOutput) ToStatusResponseArrayOutput() StatusResponseArrayOutput {
	return o
}

func (o StatusResponseArrayOutput) ToStatusResponseArrayOutputWithContext(ctx context.Context) StatusResponseArrayOutput {
	return o
}

func (o StatusResponseArrayOutput) Index(i pulumi.IntInput) StatusResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StatusResponse {
		return vs[0].([]StatusResponse)[vs[1].(int)]
	}).(StatusResponseOutput)
}

// Set of software artifacts that the attestation applies to. Each element represents a single software artifact.
type Subject struct {
	// `"": ""` Algorithms can be e.g. sha256, sha512 See https://github.com/in-toto/attestation/blob/main/spec/field_types.md#DigestSet
	Digest map[string]string `pulumi:"digest"`
	// Identifier to distinguish this artifact from others within the subject.
	Name *string `pulumi:"name"`
}

// SubjectInput is an input type that accepts SubjectArgs and SubjectOutput values.
// You can construct a concrete instance of `SubjectInput` via:
//
//	SubjectArgs{...}
type SubjectInput interface {
	pulumi.Input

	ToSubjectOutput() SubjectOutput
	ToSubjectOutputWithContext(context.Context) SubjectOutput
}

// Set of software artifacts that the attestation applies to. Each element represents a single software artifact.
type SubjectArgs struct {
	// `"": ""` Algorithms can be e.g. sha256, sha512 See https://github.com/in-toto/attestation/blob/main/spec/field_types.md#DigestSet
	Digest pulumi.StringMapInput `pulumi:"digest"`
	// Identifier to distinguish this artifact from others within the subject.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (SubjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Subject)(nil)).Elem()
}

func (i SubjectArgs) ToSubjectOutput() SubjectOutput {
	return i.ToSubjectOutputWithContext(context.Background())
}

func (i SubjectArgs) ToSubjectOutputWithContext(ctx context.Context) SubjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectOutput)
}

// SubjectArrayInput is an input type that accepts SubjectArray and SubjectArrayOutput values.
// You can construct a concrete instance of `SubjectArrayInput` via:
//
//	SubjectArray{ SubjectArgs{...} }
type SubjectArrayInput interface {
	pulumi.Input

	ToSubjectArrayOutput() SubjectArrayOutput
	ToSubjectArrayOutputWithContext(context.Context) SubjectArrayOutput
}

type SubjectArray []SubjectInput

func (SubjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Subject)(nil)).Elem()
}

func (i SubjectArray) ToSubjectArrayOutput() SubjectArrayOutput {
	return i.ToSubjectArrayOutputWithContext(context.Background())
}

func (i SubjectArray) ToSubjectArrayOutputWithContext(ctx context.Context) SubjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectArrayOutput)
}

// Set of software artifacts that the attestation applies to. Each element represents a single software artifact.
type SubjectOutput struct{ *pulumi.OutputState }

func (SubjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Subject)(nil)).Elem()
}

func (o SubjectOutput) ToSubjectOutput() SubjectOutput {
	return o
}

func (o SubjectOutput) ToSubjectOutputWithContext(ctx context.Context) SubjectOutput {
	return o
}

// `"": ""` Algorithms can be e.g. sha256, sha512 See https://github.com/in-toto/attestation/blob/main/spec/field_types.md#DigestSet
func (o SubjectOutput) Digest() pulumi.StringMapOutput {
	return o.ApplyT(func(v Subject) map[string]string { return v.Digest }).(pulumi.StringMapOutput)
}

// Identifier to distinguish this artifact from others within the subject.
func (o SubjectOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Subject) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type SubjectArrayOutput struct{ *pulumi.OutputState }

func (SubjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Subject)(nil)).Elem()
}

func (o SubjectArrayOutput) ToSubjectArrayOutput() SubjectArrayOutput {
	return o
}

func (o SubjectArrayOutput) ToSubjectArrayOutputWithContext(ctx context.Context) SubjectArrayOutput {
	return o
}

func (o SubjectArrayOutput) Index(i pulumi.IntInput) SubjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Subject {
		return vs[0].([]Subject)[vs[1].(int)]
	}).(SubjectOutput)
}

// Set of software artifacts that the attestation applies to. Each element represents a single software artifact.
type SubjectResponse struct {
	// `"": ""` Algorithms can be e.g. sha256, sha512 See https://github.com/in-toto/attestation/blob/main/spec/field_types.md#DigestSet
	Digest map[string]string `pulumi:"digest"`
	// Identifier to distinguish this artifact from others within the subject.
	Name string `pulumi:"name"`
}

// Set of software artifacts that the attestation applies to. Each element represents a single software artifact.
type SubjectResponseOutput struct{ *pulumi.OutputState }

func (SubjectResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubjectResponse)(nil)).Elem()
}

func (o SubjectResponseOutput) ToSubjectResponseOutput() SubjectResponseOutput {
	return o
}

func (o SubjectResponseOutput) ToSubjectResponseOutputWithContext(ctx context.Context) SubjectResponseOutput {
	return o
}

// `"": ""` Algorithms can be e.g. sha256, sha512 See https://github.com/in-toto/attestation/blob/main/spec/field_types.md#DigestSet
func (o SubjectResponseOutput) Digest() pulumi.StringMapOutput {
	return o.ApplyT(func(v SubjectResponse) map[string]string { return v.Digest }).(pulumi.StringMapOutput)
}

// Identifier to distinguish this artifact from others within the subject.
func (o SubjectResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SubjectResponse) string { return v.Name }).(pulumi.StringOutput)
}

type SubjectResponseArrayOutput struct{ *pulumi.OutputState }

func (SubjectResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubjectResponse)(nil)).Elem()
}

func (o SubjectResponseArrayOutput) ToSubjectResponseArrayOutput() SubjectResponseArrayOutput {
	return o
}

func (o SubjectResponseArrayOutput) ToSubjectResponseArrayOutputWithContext(ctx context.Context) SubjectResponseArrayOutput {
	return o
}

func (o SubjectResponseArrayOutput) Index(i pulumi.IntInput) SubjectResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SubjectResponse {
		return vs[0].([]SubjectResponse)[vs[1].(int)]
	}).(SubjectResponseOutput)
}

// Version contains structured information about the version of a package.
type Version struct {
	// Used to correct mistakes in the version numbering scheme.
	Epoch *int `pulumi:"epoch"`
	// Whether this version is specifying part of an inclusive range. Grafeas does not have the capability to specify version ranges; instead we have fields that specify start version and end versions. At times this is insufficient - we also need to specify whether the version is included in the range or is excluded from the range. This boolean is expected to be set to true when the version is included in a range.
	Inclusive *bool `pulumi:"inclusive"`
	// Distinguishes between sentinel MIN/MAX versions and normal versions.
	Kind VersionKind `pulumi:"kind"`
	// Required only when version kind is NORMAL. The main part of the version name.
	Name *string `pulumi:"name"`
	// The iteration of the package build from the above version.
	Revision *string `pulumi:"revision"`
}

// VersionInput is an input type that accepts VersionArgs and VersionOutput values.
// You can construct a concrete instance of `VersionInput` via:
//
//	VersionArgs{...}
type VersionInput interface {
	pulumi.Input

	ToVersionOutput() VersionOutput
	ToVersionOutputWithContext(context.Context) VersionOutput
}

// Version contains structured information about the version of a package.
type VersionArgs struct {
	// Used to correct mistakes in the version numbering scheme.
	Epoch pulumi.IntPtrInput `pulumi:"epoch"`
	// Whether this version is specifying part of an inclusive range. Grafeas does not have the capability to specify version ranges; instead we have fields that specify start version and end versions. At times this is insufficient - we also need to specify whether the version is included in the range or is excluded from the range. This boolean is expected to be set to true when the version is included in a range.
	Inclusive pulumi.BoolPtrInput `pulumi:"inclusive"`
	// Distinguishes between sentinel MIN/MAX versions and normal versions.
	Kind VersionKindInput `pulumi:"kind"`
	// Required only when version kind is NORMAL. The main part of the version name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The iteration of the package build from the above version.
	Revision pulumi.StringPtrInput `pulumi:"revision"`
}

func (VersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Version)(nil)).Elem()
}

func (i VersionArgs) ToVersionOutput() VersionOutput {
	return i.ToVersionOutputWithContext(context.Background())
}

func (i VersionArgs) ToVersionOutputWithContext(ctx context.Context) VersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VersionOutput)
}

func (i VersionArgs) ToVersionPtrOutput() VersionPtrOutput {
	return i.ToVersionPtrOutputWithContext(context.Background())
}

func (i VersionArgs) ToVersionPtrOutputWithContext(ctx context.Context) VersionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VersionOutput).ToVersionPtrOutputWithContext(ctx)
}

// VersionPtrInput is an input type that accepts VersionArgs, VersionPtr and VersionPtrOutput values.
// You can construct a concrete instance of `VersionPtrInput` via:
//
//	        VersionArgs{...}
//
//	or:
//
//	        nil
type VersionPtrInput interface {
	pulumi.Input

	ToVersionPtrOutput() VersionPtrOutput
	ToVersionPtrOutputWithContext(context.Context) VersionPtrOutput
}

type versionPtrType VersionArgs

func VersionPtr(v *VersionArgs) VersionPtrInput {
	return (*versionPtrType)(v)
}

func (*versionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Version)(nil)).Elem()
}

func (i *versionPtrType) ToVersionPtrOutput() VersionPtrOutput {
	return i.ToVersionPtrOutputWithContext(context.Background())
}

func (i *versionPtrType) ToVersionPtrOutputWithContext(ctx context.Context) VersionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VersionPtrOutput)
}

// Version contains structured information about the version of a package.
type VersionOutput struct{ *pulumi.OutputState }

func (VersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Version)(nil)).Elem()
}

func (o VersionOutput) ToVersionOutput() VersionOutput {
	return o
}

func (o VersionOutput) ToVersionOutputWithContext(ctx context.Context) VersionOutput {
	return o
}

func (o VersionOutput) ToVersionPtrOutput() VersionPtrOutput {
	return o.ToVersionPtrOutputWithContext(context.Background())
}

func (o VersionOutput) ToVersionPtrOutputWithContext(ctx context.Context) VersionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Version) *Version {
		return &v
	}).(VersionPtrOutput)
}

// Used to correct mistakes in the version numbering scheme.
func (o VersionOutput) Epoch() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Version) *int { return v.Epoch }).(pulumi.IntPtrOutput)
}

// Whether this version is specifying part of an inclusive range. Grafeas does not have the capability to specify version ranges; instead we have fields that specify start version and end versions. At times this is insufficient - we also need to specify whether the version is included in the range or is excluded from the range. This boolean is expected to be set to true when the version is included in a range.
func (o VersionOutput) Inclusive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Version) *bool { return v.Inclusive }).(pulumi.BoolPtrOutput)
}

// Distinguishes between sentinel MIN/MAX versions and normal versions.
func (o VersionOutput) Kind() VersionKindOutput {
	return o.ApplyT(func(v Version) VersionKind { return v.Kind }).(VersionKindOutput)
}

// Required only when version kind is NORMAL. The main part of the version name.
func (o VersionOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Version) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The iteration of the package build from the above version.
func (o VersionOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Version) *string { return v.Revision }).(pulumi.StringPtrOutput)
}

type VersionPtrOutput struct{ *pulumi.OutputState }

func (VersionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Version)(nil)).Elem()
}

func (o VersionPtrOutput) ToVersionPtrOutput() VersionPtrOutput {
	return o
}

func (o VersionPtrOutput) ToVersionPtrOutputWithContext(ctx context.Context) VersionPtrOutput {
	return o
}

func (o VersionPtrOutput) Elem() VersionOutput {
	return o.ApplyT(func(v *Version) Version {
		if v != nil {
			return *v
		}
		var ret Version
		return ret
	}).(VersionOutput)
}

// Used to correct mistakes in the version numbering scheme.
func (o VersionPtrOutput) Epoch() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Version) *int {
		if v == nil {
			return nil
		}
		return v.Epoch
	}).(pulumi.IntPtrOutput)
}

// Whether this version is specifying part of an inclusive range. Grafeas does not have the capability to specify version ranges; instead we have fields that specify start version and end versions. At times this is insufficient - we also need to specify whether the version is included in the range or is excluded from the range. This boolean is expected to be set to true when the version is included in a range.
func (o VersionPtrOutput) Inclusive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Version) *bool {
		if v == nil {
			return nil
		}
		return v.Inclusive
	}).(pulumi.BoolPtrOutput)
}

// Distinguishes between sentinel MIN/MAX versions and normal versions.
func (o VersionPtrOutput) Kind() VersionKindPtrOutput {
	return o.ApplyT(func(v *Version) *VersionKind {
		if v == nil {
			return nil
		}
		return &v.Kind
	}).(VersionKindPtrOutput)
}

// Required only when version kind is NORMAL. The main part of the version name.
func (o VersionPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Version) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The iteration of the package build from the above version.
func (o VersionPtrOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Version) *string {
		if v == nil {
			return nil
		}
		return v.Revision
	}).(pulumi.StringPtrOutput)
}

// Version contains structured information about the version of a package.
type VersionResponse struct {
	// Used to correct mistakes in the version numbering scheme.
	Epoch int `pulumi:"epoch"`
	// Whether this version is specifying part of an inclusive range. Grafeas does not have the capability to specify version ranges; instead we have fields that specify start version and end versions. At times this is insufficient - we also need to specify whether the version is included in the range or is excluded from the range. This boolean is expected to be set to true when the version is included in a range.
	Inclusive bool `pulumi:"inclusive"`
	// Distinguishes between sentinel MIN/MAX versions and normal versions.
	Kind string `pulumi:"kind"`
	// Required only when version kind is NORMAL. The main part of the version name.
	Name string `pulumi:"name"`
	// The iteration of the package build from the above version.
	Revision string `pulumi:"revision"`
}

// Version contains structured information about the version of a package.
type VersionResponseOutput struct{ *pulumi.OutputState }

func (VersionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VersionResponse)(nil)).Elem()
}

func (o VersionResponseOutput) ToVersionResponseOutput() VersionResponseOutput {
	return o
}

func (o VersionResponseOutput) ToVersionResponseOutputWithContext(ctx context.Context) VersionResponseOutput {
	return o
}

// Used to correct mistakes in the version numbering scheme.
func (o VersionResponseOutput) Epoch() pulumi.IntOutput {
	return o.ApplyT(func(v VersionResponse) int { return v.Epoch }).(pulumi.IntOutput)
}

// Whether this version is specifying part of an inclusive range. Grafeas does not have the capability to specify version ranges; instead we have fields that specify start version and end versions. At times this is insufficient - we also need to specify whether the version is included in the range or is excluded from the range. This boolean is expected to be set to true when the version is included in a range.
func (o VersionResponseOutput) Inclusive() pulumi.BoolOutput {
	return o.ApplyT(func(v VersionResponse) bool { return v.Inclusive }).(pulumi.BoolOutput)
}

// Distinguishes between sentinel MIN/MAX versions and normal versions.
func (o VersionResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v VersionResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// Required only when version kind is NORMAL. The main part of the version name.
func (o VersionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VersionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The iteration of the package build from the above version.
func (o VersionResponseOutput) Revision() pulumi.StringOutput {
	return o.ApplyT(func(v VersionResponse) string { return v.Revision }).(pulumi.StringOutput)
}

// VexAssessment provides all publisher provided Vex information that is related to this vulnerability.
type VexAssessment struct {
	// Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.
	//
	// Deprecated: Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.
	Cve *string `pulumi:"cve"`
	// Contains information about the impact of this vulnerability, this will change with time.
	Impacts []string `pulumi:"impacts"`
	// Justification provides the justification when the state of the assessment if NOT_AFFECTED.
	Justification *Justification `pulumi:"justification"`
	// The VulnerabilityAssessment note from which this VexAssessment was generated. This will be of the form: `projects/[PROJECT_ID]/notes/[NOTE_ID]`.
	NoteName *string `pulumi:"noteName"`
	// Holds a list of references associated with this vulnerability item and assessment.
	RelatedUris []RelatedUrl `pulumi:"relatedUris"`
	// Specifies details on how to handle (and presumably, fix) a vulnerability.
	Remediations []Remediation `pulumi:"remediations"`
	// Provides the state of this Vulnerability assessment.
	State *VexAssessmentState `pulumi:"state"`
	// The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc.
	VulnerabilityId *string `pulumi:"vulnerabilityId"`
}

// VexAssessmentInput is an input type that accepts VexAssessmentArgs and VexAssessmentOutput values.
// You can construct a concrete instance of `VexAssessmentInput` via:
//
//	VexAssessmentArgs{...}
type VexAssessmentInput interface {
	pulumi.Input

	ToVexAssessmentOutput() VexAssessmentOutput
	ToVexAssessmentOutputWithContext(context.Context) VexAssessmentOutput
}

// VexAssessment provides all publisher provided Vex information that is related to this vulnerability.
type VexAssessmentArgs struct {
	// Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.
	//
	// Deprecated: Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.
	Cve pulumi.StringPtrInput `pulumi:"cve"`
	// Contains information about the impact of this vulnerability, this will change with time.
	Impacts pulumi.StringArrayInput `pulumi:"impacts"`
	// Justification provides the justification when the state of the assessment if NOT_AFFECTED.
	Justification JustificationPtrInput `pulumi:"justification"`
	// The VulnerabilityAssessment note from which this VexAssessment was generated. This will be of the form: `projects/[PROJECT_ID]/notes/[NOTE_ID]`.
	NoteName pulumi.StringPtrInput `pulumi:"noteName"`
	// Holds a list of references associated with this vulnerability item and assessment.
	RelatedUris RelatedUrlArrayInput `pulumi:"relatedUris"`
	// Specifies details on how to handle (and presumably, fix) a vulnerability.
	Remediations RemediationArrayInput `pulumi:"remediations"`
	// Provides the state of this Vulnerability assessment.
	State VexAssessmentStatePtrInput `pulumi:"state"`
	// The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc.
	VulnerabilityId pulumi.StringPtrInput `pulumi:"vulnerabilityId"`
}

func (VexAssessmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VexAssessment)(nil)).Elem()
}

func (i VexAssessmentArgs) ToVexAssessmentOutput() VexAssessmentOutput {
	return i.ToVexAssessmentOutputWithContext(context.Background())
}

func (i VexAssessmentArgs) ToVexAssessmentOutputWithContext(ctx context.Context) VexAssessmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VexAssessmentOutput)
}

func (i VexAssessmentArgs) ToVexAssessmentPtrOutput() VexAssessmentPtrOutput {
	return i.ToVexAssessmentPtrOutputWithContext(context.Background())
}

func (i VexAssessmentArgs) ToVexAssessmentPtrOutputWithContext(ctx context.Context) VexAssessmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VexAssessmentOutput).ToVexAssessmentPtrOutputWithContext(ctx)
}

// VexAssessmentPtrInput is an input type that accepts VexAssessmentArgs, VexAssessmentPtr and VexAssessmentPtrOutput values.
// You can construct a concrete instance of `VexAssessmentPtrInput` via:
//
//	        VexAssessmentArgs{...}
//
//	or:
//
//	        nil
type VexAssessmentPtrInput interface {
	pulumi.Input

	ToVexAssessmentPtrOutput() VexAssessmentPtrOutput
	ToVexAssessmentPtrOutputWithContext(context.Context) VexAssessmentPtrOutput
}

type vexAssessmentPtrType VexAssessmentArgs

func VexAssessmentPtr(v *VexAssessmentArgs) VexAssessmentPtrInput {
	return (*vexAssessmentPtrType)(v)
}

func (*vexAssessmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VexAssessment)(nil)).Elem()
}

func (i *vexAssessmentPtrType) ToVexAssessmentPtrOutput() VexAssessmentPtrOutput {
	return i.ToVexAssessmentPtrOutputWithContext(context.Background())
}

func (i *vexAssessmentPtrType) ToVexAssessmentPtrOutputWithContext(ctx context.Context) VexAssessmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VexAssessmentPtrOutput)
}

// VexAssessment provides all publisher provided Vex information that is related to this vulnerability.
type VexAssessmentOutput struct{ *pulumi.OutputState }

func (VexAssessmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VexAssessment)(nil)).Elem()
}

func (o VexAssessmentOutput) ToVexAssessmentOutput() VexAssessmentOutput {
	return o
}

func (o VexAssessmentOutput) ToVexAssessmentOutputWithContext(ctx context.Context) VexAssessmentOutput {
	return o
}

func (o VexAssessmentOutput) ToVexAssessmentPtrOutput() VexAssessmentPtrOutput {
	return o.ToVexAssessmentPtrOutputWithContext(context.Background())
}

func (o VexAssessmentOutput) ToVexAssessmentPtrOutputWithContext(ctx context.Context) VexAssessmentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VexAssessment) *VexAssessment {
		return &v
	}).(VexAssessmentPtrOutput)
}

// Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.
//
// Deprecated: Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.
func (o VexAssessmentOutput) Cve() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VexAssessment) *string { return v.Cve }).(pulumi.StringPtrOutput)
}

// Contains information about the impact of this vulnerability, this will change with time.
func (o VexAssessmentOutput) Impacts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VexAssessment) []string { return v.Impacts }).(pulumi.StringArrayOutput)
}

// Justification provides the justification when the state of the assessment if NOT_AFFECTED.
func (o VexAssessmentOutput) Justification() JustificationPtrOutput {
	return o.ApplyT(func(v VexAssessment) *Justification { return v.Justification }).(JustificationPtrOutput)
}

// The VulnerabilityAssessment note from which this VexAssessment was generated. This will be of the form: `projects/[PROJECT_ID]/notes/[NOTE_ID]`.
func (o VexAssessmentOutput) NoteName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VexAssessment) *string { return v.NoteName }).(pulumi.StringPtrOutput)
}

// Holds a list of references associated with this vulnerability item and assessment.
func (o VexAssessmentOutput) RelatedUris() RelatedUrlArrayOutput {
	return o.ApplyT(func(v VexAssessment) []RelatedUrl { return v.RelatedUris }).(RelatedUrlArrayOutput)
}

// Specifies details on how to handle (and presumably, fix) a vulnerability.
func (o VexAssessmentOutput) Remediations() RemediationArrayOutput {
	return o.ApplyT(func(v VexAssessment) []Remediation { return v.Remediations }).(RemediationArrayOutput)
}

// Provides the state of this Vulnerability assessment.
func (o VexAssessmentOutput) State() VexAssessmentStatePtrOutput {
	return o.ApplyT(func(v VexAssessment) *VexAssessmentState { return v.State }).(VexAssessmentStatePtrOutput)
}

// The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc.
func (o VexAssessmentOutput) VulnerabilityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VexAssessment) *string { return v.VulnerabilityId }).(pulumi.StringPtrOutput)
}

type VexAssessmentPtrOutput struct{ *pulumi.OutputState }

func (VexAssessmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VexAssessment)(nil)).Elem()
}

func (o VexAssessmentPtrOutput) ToVexAssessmentPtrOutput() VexAssessmentPtrOutput {
	return o
}

func (o VexAssessmentPtrOutput) ToVexAssessmentPtrOutputWithContext(ctx context.Context) VexAssessmentPtrOutput {
	return o
}

func (o VexAssessmentPtrOutput) Elem() VexAssessmentOutput {
	return o.ApplyT(func(v *VexAssessment) VexAssessment {
		if v != nil {
			return *v
		}
		var ret VexAssessment
		return ret
	}).(VexAssessmentOutput)
}

// Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.
//
// Deprecated: Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.
func (o VexAssessmentPtrOutput) Cve() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VexAssessment) *string {
		if v == nil {
			return nil
		}
		return v.Cve
	}).(pulumi.StringPtrOutput)
}

// Contains information about the impact of this vulnerability, this will change with time.
func (o VexAssessmentPtrOutput) Impacts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VexAssessment) []string {
		if v == nil {
			return nil
		}
		return v.Impacts
	}).(pulumi.StringArrayOutput)
}

// Justification provides the justification when the state of the assessment if NOT_AFFECTED.
func (o VexAssessmentPtrOutput) Justification() JustificationPtrOutput {
	return o.ApplyT(func(v *VexAssessment) *Justification {
		if v == nil {
			return nil
		}
		return v.Justification
	}).(JustificationPtrOutput)
}

// The VulnerabilityAssessment note from which this VexAssessment was generated. This will be of the form: `projects/[PROJECT_ID]/notes/[NOTE_ID]`.
func (o VexAssessmentPtrOutput) NoteName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VexAssessment) *string {
		if v == nil {
			return nil
		}
		return v.NoteName
	}).(pulumi.StringPtrOutput)
}

// Holds a list of references associated with this vulnerability item and assessment.
func (o VexAssessmentPtrOutput) RelatedUris() RelatedUrlArrayOutput {
	return o.ApplyT(func(v *VexAssessment) []RelatedUrl {
		if v == nil {
			return nil
		}
		return v.RelatedUris
	}).(RelatedUrlArrayOutput)
}

// Specifies details on how to handle (and presumably, fix) a vulnerability.
func (o VexAssessmentPtrOutput) Remediations() RemediationArrayOutput {
	return o.ApplyT(func(v *VexAssessment) []Remediation {
		if v == nil {
			return nil
		}
		return v.Remediations
	}).(RemediationArrayOutput)
}

// Provides the state of this Vulnerability assessment.
func (o VexAssessmentPtrOutput) State() VexAssessmentStatePtrOutput {
	return o.ApplyT(func(v *VexAssessment) *VexAssessmentState {
		if v == nil {
			return nil
		}
		return v.State
	}).(VexAssessmentStatePtrOutput)
}

// The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc.
func (o VexAssessmentPtrOutput) VulnerabilityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VexAssessment) *string {
		if v == nil {
			return nil
		}
		return v.VulnerabilityId
	}).(pulumi.StringPtrOutput)
}

// VexAssessment provides all publisher provided Vex information that is related to this vulnerability.
type VexAssessmentResponse struct {
	// Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.
	//
	// Deprecated: Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.
	Cve string `pulumi:"cve"`
	// Contains information about the impact of this vulnerability, this will change with time.
	Impacts []string `pulumi:"impacts"`
	// Justification provides the justification when the state of the assessment if NOT_AFFECTED.
	Justification JustificationResponse `pulumi:"justification"`
	// The VulnerabilityAssessment note from which this VexAssessment was generated. This will be of the form: `projects/[PROJECT_ID]/notes/[NOTE_ID]`.
	NoteName string `pulumi:"noteName"`
	// Holds a list of references associated with this vulnerability item and assessment.
	RelatedUris []RelatedUrlResponse `pulumi:"relatedUris"`
	// Specifies details on how to handle (and presumably, fix) a vulnerability.
	Remediations []RemediationResponse `pulumi:"remediations"`
	// Provides the state of this Vulnerability assessment.
	State string `pulumi:"state"`
	// The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc.
	VulnerabilityId string `pulumi:"vulnerabilityId"`
}

// VexAssessment provides all publisher provided Vex information that is related to this vulnerability.
type VexAssessmentResponseOutput struct{ *pulumi.OutputState }

func (VexAssessmentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VexAssessmentResponse)(nil)).Elem()
}

func (o VexAssessmentResponseOutput) ToVexAssessmentResponseOutput() VexAssessmentResponseOutput {
	return o
}

func (o VexAssessmentResponseOutput) ToVexAssessmentResponseOutputWithContext(ctx context.Context) VexAssessmentResponseOutput {
	return o
}

// Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.
//
// Deprecated: Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.
func (o VexAssessmentResponseOutput) Cve() pulumi.StringOutput {
	return o.ApplyT(func(v VexAssessmentResponse) string { return v.Cve }).(pulumi.StringOutput)
}

// Contains information about the impact of this vulnerability, this will change with time.
func (o VexAssessmentResponseOutput) Impacts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VexAssessmentResponse) []string { return v.Impacts }).(pulumi.StringArrayOutput)
}

// Justification provides the justification when the state of the assessment if NOT_AFFECTED.
func (o VexAssessmentResponseOutput) Justification() JustificationResponseOutput {
	return o.ApplyT(func(v VexAssessmentResponse) JustificationResponse { return v.Justification }).(JustificationResponseOutput)
}

// The VulnerabilityAssessment note from which this VexAssessment was generated. This will be of the form: `projects/[PROJECT_ID]/notes/[NOTE_ID]`.
func (o VexAssessmentResponseOutput) NoteName() pulumi.StringOutput {
	return o.ApplyT(func(v VexAssessmentResponse) string { return v.NoteName }).(pulumi.StringOutput)
}

// Holds a list of references associated with this vulnerability item and assessment.
func (o VexAssessmentResponseOutput) RelatedUris() RelatedUrlResponseArrayOutput {
	return o.ApplyT(func(v VexAssessmentResponse) []RelatedUrlResponse { return v.RelatedUris }).(RelatedUrlResponseArrayOutput)
}

// Specifies details on how to handle (and presumably, fix) a vulnerability.
func (o VexAssessmentResponseOutput) Remediations() RemediationResponseArrayOutput {
	return o.ApplyT(func(v VexAssessmentResponse) []RemediationResponse { return v.Remediations }).(RemediationResponseArrayOutput)
}

// Provides the state of this Vulnerability assessment.
func (o VexAssessmentResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v VexAssessmentResponse) string { return v.State }).(pulumi.StringOutput)
}

// The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc.
func (o VexAssessmentResponseOutput) VulnerabilityId() pulumi.StringOutput {
	return o.ApplyT(func(v VexAssessmentResponse) string { return v.VulnerabilityId }).(pulumi.StringOutput)
}

// Vulnerability provides metadata about a security vulnerability in a Note.
type Vulnerability struct {
	// The CVSS score for this vulnerability.
	CvssScore *float64 `pulumi:"cvssScore"`
	// The full description of the CVSS for version 2.
	CvssV2 *CVSS `pulumi:"cvssV2"`
	// The full description of the CVSS for version 3.
	CvssV3 *CVSSv3 `pulumi:"cvssV3"`
	// CVSS version used to populate cvss_score and severity.
	CvssVersion *VulnerabilityCvssVersion `pulumi:"cvssVersion"`
	// A list of CWE for this vulnerability. For details, see: https://cwe.mitre.org/index.html
	Cwe []string `pulumi:"cwe"`
	// All information about the package to specifically identify this vulnerability. One entry per (version range and cpe_uri) the package vulnerability has manifested in.
	Details []Detail `pulumi:"details"`
	// Note provider assigned impact of the vulnerability.
	Severity *VulnerabilitySeverity `pulumi:"severity"`
	// The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.
	SourceUpdateTime *string `pulumi:"sourceUpdateTime"`
	// Windows details get their own format because the information format and model don't match a normal detail. Specifically Windows updates are done as patches, thus Windows vulnerabilities really are a missing package, rather than a package being at an incorrect version.
	WindowsDetails []WindowsDetail `pulumi:"windowsDetails"`
}

// VulnerabilityInput is an input type that accepts VulnerabilityArgs and VulnerabilityOutput values.
// You can construct a concrete instance of `VulnerabilityInput` via:
//
//	VulnerabilityArgs{...}
type VulnerabilityInput interface {
	pulumi.Input

	ToVulnerabilityOutput() VulnerabilityOutput
	ToVulnerabilityOutputWithContext(context.Context) VulnerabilityOutput
}

// Vulnerability provides metadata about a security vulnerability in a Note.
type VulnerabilityArgs struct {
	// The CVSS score for this vulnerability.
	CvssScore pulumi.Float64PtrInput `pulumi:"cvssScore"`
	// The full description of the CVSS for version 2.
	CvssV2 CVSSPtrInput `pulumi:"cvssV2"`
	// The full description of the CVSS for version 3.
	CvssV3 CVSSv3PtrInput `pulumi:"cvssV3"`
	// CVSS version used to populate cvss_score and severity.
	CvssVersion VulnerabilityCvssVersionPtrInput `pulumi:"cvssVersion"`
	// A list of CWE for this vulnerability. For details, see: https://cwe.mitre.org/index.html
	Cwe pulumi.StringArrayInput `pulumi:"cwe"`
	// All information about the package to specifically identify this vulnerability. One entry per (version range and cpe_uri) the package vulnerability has manifested in.
	Details DetailArrayInput `pulumi:"details"`
	// Note provider assigned impact of the vulnerability.
	Severity VulnerabilitySeverityPtrInput `pulumi:"severity"`
	// The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.
	SourceUpdateTime pulumi.StringPtrInput `pulumi:"sourceUpdateTime"`
	// Windows details get their own format because the information format and model don't match a normal detail. Specifically Windows updates are done as patches, thus Windows vulnerabilities really are a missing package, rather than a package being at an incorrect version.
	WindowsDetails WindowsDetailArrayInput `pulumi:"windowsDetails"`
}

func (VulnerabilityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Vulnerability)(nil)).Elem()
}

func (i VulnerabilityArgs) ToVulnerabilityOutput() VulnerabilityOutput {
	return i.ToVulnerabilityOutputWithContext(context.Background())
}

func (i VulnerabilityArgs) ToVulnerabilityOutputWithContext(ctx context.Context) VulnerabilityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityOutput)
}

func (i VulnerabilityArgs) ToVulnerabilityPtrOutput() VulnerabilityPtrOutput {
	return i.ToVulnerabilityPtrOutputWithContext(context.Background())
}

func (i VulnerabilityArgs) ToVulnerabilityPtrOutputWithContext(ctx context.Context) VulnerabilityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityOutput).ToVulnerabilityPtrOutputWithContext(ctx)
}

// VulnerabilityPtrInput is an input type that accepts VulnerabilityArgs, VulnerabilityPtr and VulnerabilityPtrOutput values.
// You can construct a concrete instance of `VulnerabilityPtrInput` via:
//
//	        VulnerabilityArgs{...}
//
//	or:
//
//	        nil
type VulnerabilityPtrInput interface {
	pulumi.Input

	ToVulnerabilityPtrOutput() VulnerabilityPtrOutput
	ToVulnerabilityPtrOutputWithContext(context.Context) VulnerabilityPtrOutput
}

type vulnerabilityPtrType VulnerabilityArgs

func VulnerabilityPtr(v *VulnerabilityArgs) VulnerabilityPtrInput {
	return (*vulnerabilityPtrType)(v)
}

func (*vulnerabilityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Vulnerability)(nil)).Elem()
}

func (i *vulnerabilityPtrType) ToVulnerabilityPtrOutput() VulnerabilityPtrOutput {
	return i.ToVulnerabilityPtrOutputWithContext(context.Background())
}

func (i *vulnerabilityPtrType) ToVulnerabilityPtrOutputWithContext(ctx context.Context) VulnerabilityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityPtrOutput)
}

// Vulnerability provides metadata about a security vulnerability in a Note.
type VulnerabilityOutput struct{ *pulumi.OutputState }

func (VulnerabilityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Vulnerability)(nil)).Elem()
}

func (o VulnerabilityOutput) ToVulnerabilityOutput() VulnerabilityOutput {
	return o
}

func (o VulnerabilityOutput) ToVulnerabilityOutputWithContext(ctx context.Context) VulnerabilityOutput {
	return o
}

func (o VulnerabilityOutput) ToVulnerabilityPtrOutput() VulnerabilityPtrOutput {
	return o.ToVulnerabilityPtrOutputWithContext(context.Background())
}

func (o VulnerabilityOutput) ToVulnerabilityPtrOutputWithContext(ctx context.Context) VulnerabilityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Vulnerability) *Vulnerability {
		return &v
	}).(VulnerabilityPtrOutput)
}

// The CVSS score for this vulnerability.
func (o VulnerabilityOutput) CvssScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Vulnerability) *float64 { return v.CvssScore }).(pulumi.Float64PtrOutput)
}

// The full description of the CVSS for version 2.
func (o VulnerabilityOutput) CvssV2() CVSSPtrOutput {
	return o.ApplyT(func(v Vulnerability) *CVSS { return v.CvssV2 }).(CVSSPtrOutput)
}

// The full description of the CVSS for version 3.
func (o VulnerabilityOutput) CvssV3() CVSSv3PtrOutput {
	return o.ApplyT(func(v Vulnerability) *CVSSv3 { return v.CvssV3 }).(CVSSv3PtrOutput)
}

// CVSS version used to populate cvss_score and severity.
func (o VulnerabilityOutput) CvssVersion() VulnerabilityCvssVersionPtrOutput {
	return o.ApplyT(func(v Vulnerability) *VulnerabilityCvssVersion { return v.CvssVersion }).(VulnerabilityCvssVersionPtrOutput)
}

// A list of CWE for this vulnerability. For details, see: https://cwe.mitre.org/index.html
func (o VulnerabilityOutput) Cwe() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Vulnerability) []string { return v.Cwe }).(pulumi.StringArrayOutput)
}

// All information about the package to specifically identify this vulnerability. One entry per (version range and cpe_uri) the package vulnerability has manifested in.
func (o VulnerabilityOutput) Details() DetailArrayOutput {
	return o.ApplyT(func(v Vulnerability) []Detail { return v.Details }).(DetailArrayOutput)
}

// Note provider assigned impact of the vulnerability.
func (o VulnerabilityOutput) Severity() VulnerabilitySeverityPtrOutput {
	return o.ApplyT(func(v Vulnerability) *VulnerabilitySeverity { return v.Severity }).(VulnerabilitySeverityPtrOutput)
}

// The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.
func (o VulnerabilityOutput) SourceUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Vulnerability) *string { return v.SourceUpdateTime }).(pulumi.StringPtrOutput)
}

// Windows details get their own format because the information format and model don't match a normal detail. Specifically Windows updates are done as patches, thus Windows vulnerabilities really are a missing package, rather than a package being at an incorrect version.
func (o VulnerabilityOutput) WindowsDetails() WindowsDetailArrayOutput {
	return o.ApplyT(func(v Vulnerability) []WindowsDetail { return v.WindowsDetails }).(WindowsDetailArrayOutput)
}

type VulnerabilityPtrOutput struct{ *pulumi.OutputState }

func (VulnerabilityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Vulnerability)(nil)).Elem()
}

func (o VulnerabilityPtrOutput) ToVulnerabilityPtrOutput() VulnerabilityPtrOutput {
	return o
}

func (o VulnerabilityPtrOutput) ToVulnerabilityPtrOutputWithContext(ctx context.Context) VulnerabilityPtrOutput {
	return o
}

func (o VulnerabilityPtrOutput) Elem() VulnerabilityOutput {
	return o.ApplyT(func(v *Vulnerability) Vulnerability {
		if v != nil {
			return *v
		}
		var ret Vulnerability
		return ret
	}).(VulnerabilityOutput)
}

// The CVSS score for this vulnerability.
func (o VulnerabilityPtrOutput) CvssScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Vulnerability) *float64 {
		if v == nil {
			return nil
		}
		return v.CvssScore
	}).(pulumi.Float64PtrOutput)
}

// The full description of the CVSS for version 2.
func (o VulnerabilityPtrOutput) CvssV2() CVSSPtrOutput {
	return o.ApplyT(func(v *Vulnerability) *CVSS {
		if v == nil {
			return nil
		}
		return v.CvssV2
	}).(CVSSPtrOutput)
}

// The full description of the CVSS for version 3.
func (o VulnerabilityPtrOutput) CvssV3() CVSSv3PtrOutput {
	return o.ApplyT(func(v *Vulnerability) *CVSSv3 {
		if v == nil {
			return nil
		}
		return v.CvssV3
	}).(CVSSv3PtrOutput)
}

// CVSS version used to populate cvss_score and severity.
func (o VulnerabilityPtrOutput) CvssVersion() VulnerabilityCvssVersionPtrOutput {
	return o.ApplyT(func(v *Vulnerability) *VulnerabilityCvssVersion {
		if v == nil {
			return nil
		}
		return v.CvssVersion
	}).(VulnerabilityCvssVersionPtrOutput)
}

// A list of CWE for this vulnerability. For details, see: https://cwe.mitre.org/index.html
func (o VulnerabilityPtrOutput) Cwe() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Vulnerability) []string {
		if v == nil {
			return nil
		}
		return v.Cwe
	}).(pulumi.StringArrayOutput)
}

// All information about the package to specifically identify this vulnerability. One entry per (version range and cpe_uri) the package vulnerability has manifested in.
func (o VulnerabilityPtrOutput) Details() DetailArrayOutput {
	return o.ApplyT(func(v *Vulnerability) []Detail {
		if v == nil {
			return nil
		}
		return v.Details
	}).(DetailArrayOutput)
}

// Note provider assigned impact of the vulnerability.
func (o VulnerabilityPtrOutput) Severity() VulnerabilitySeverityPtrOutput {
	return o.ApplyT(func(v *Vulnerability) *VulnerabilitySeverity {
		if v == nil {
			return nil
		}
		return v.Severity
	}).(VulnerabilitySeverityPtrOutput)
}

// The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.
func (o VulnerabilityPtrOutput) SourceUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vulnerability) *string {
		if v == nil {
			return nil
		}
		return v.SourceUpdateTime
	}).(pulumi.StringPtrOutput)
}

// Windows details get their own format because the information format and model don't match a normal detail. Specifically Windows updates are done as patches, thus Windows vulnerabilities really are a missing package, rather than a package being at an incorrect version.
func (o VulnerabilityPtrOutput) WindowsDetails() WindowsDetailArrayOutput {
	return o.ApplyT(func(v *Vulnerability) []WindowsDetail {
		if v == nil {
			return nil
		}
		return v.WindowsDetails
	}).(WindowsDetailArrayOutput)
}

// A single VulnerabilityAssessmentNote represents one particular product's vulnerability assessment for one CVE.
type VulnerabilityAssessmentNote struct {
	// Represents a vulnerability assessment for the product.
	Assessment *Assessment `pulumi:"assessment"`
	// Identifies the language used by this document, corresponding to IETF BCP 47 / RFC 5646.
	LanguageCode *string `pulumi:"languageCode"`
	// A detailed description of this Vex.
	LongDescription *string `pulumi:"longDescription"`
	// The product affected by this vex.
	Product *Product `pulumi:"product"`
	// Publisher details of this Note.
	Publisher *Publisher `pulumi:"publisher"`
	// A one sentence description of this Vex.
	ShortDescription *string `pulumi:"shortDescription"`
	// The title of the note. E.g. `Vex-Debian-11.4`
	Title *string `pulumi:"title"`
}

// VulnerabilityAssessmentNoteInput is an input type that accepts VulnerabilityAssessmentNoteArgs and VulnerabilityAssessmentNoteOutput values.
// You can construct a concrete instance of `VulnerabilityAssessmentNoteInput` via:
//
//	VulnerabilityAssessmentNoteArgs{...}
type VulnerabilityAssessmentNoteInput interface {
	pulumi.Input

	ToVulnerabilityAssessmentNoteOutput() VulnerabilityAssessmentNoteOutput
	ToVulnerabilityAssessmentNoteOutputWithContext(context.Context) VulnerabilityAssessmentNoteOutput
}

// A single VulnerabilityAssessmentNote represents one particular product's vulnerability assessment for one CVE.
type VulnerabilityAssessmentNoteArgs struct {
	// Represents a vulnerability assessment for the product.
	Assessment AssessmentPtrInput `pulumi:"assessment"`
	// Identifies the language used by this document, corresponding to IETF BCP 47 / RFC 5646.
	LanguageCode pulumi.StringPtrInput `pulumi:"languageCode"`
	// A detailed description of this Vex.
	LongDescription pulumi.StringPtrInput `pulumi:"longDescription"`
	// The product affected by this vex.
	Product ProductPtrInput `pulumi:"product"`
	// Publisher details of this Note.
	Publisher PublisherPtrInput `pulumi:"publisher"`
	// A one sentence description of this Vex.
	ShortDescription pulumi.StringPtrInput `pulumi:"shortDescription"`
	// The title of the note. E.g. `Vex-Debian-11.4`
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (VulnerabilityAssessmentNoteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VulnerabilityAssessmentNote)(nil)).Elem()
}

func (i VulnerabilityAssessmentNoteArgs) ToVulnerabilityAssessmentNoteOutput() VulnerabilityAssessmentNoteOutput {
	return i.ToVulnerabilityAssessmentNoteOutputWithContext(context.Background())
}

func (i VulnerabilityAssessmentNoteArgs) ToVulnerabilityAssessmentNoteOutputWithContext(ctx context.Context) VulnerabilityAssessmentNoteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityAssessmentNoteOutput)
}

func (i VulnerabilityAssessmentNoteArgs) ToVulnerabilityAssessmentNotePtrOutput() VulnerabilityAssessmentNotePtrOutput {
	return i.ToVulnerabilityAssessmentNotePtrOutputWithContext(context.Background())
}

func (i VulnerabilityAssessmentNoteArgs) ToVulnerabilityAssessmentNotePtrOutputWithContext(ctx context.Context) VulnerabilityAssessmentNotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityAssessmentNoteOutput).ToVulnerabilityAssessmentNotePtrOutputWithContext(ctx)
}

// VulnerabilityAssessmentNotePtrInput is an input type that accepts VulnerabilityAssessmentNoteArgs, VulnerabilityAssessmentNotePtr and VulnerabilityAssessmentNotePtrOutput values.
// You can construct a concrete instance of `VulnerabilityAssessmentNotePtrInput` via:
//
//	        VulnerabilityAssessmentNoteArgs{...}
//
//	or:
//
//	        nil
type VulnerabilityAssessmentNotePtrInput interface {
	pulumi.Input

	ToVulnerabilityAssessmentNotePtrOutput() VulnerabilityAssessmentNotePtrOutput
	ToVulnerabilityAssessmentNotePtrOutputWithContext(context.Context) VulnerabilityAssessmentNotePtrOutput
}

type vulnerabilityAssessmentNotePtrType VulnerabilityAssessmentNoteArgs

func VulnerabilityAssessmentNotePtr(v *VulnerabilityAssessmentNoteArgs) VulnerabilityAssessmentNotePtrInput {
	return (*vulnerabilityAssessmentNotePtrType)(v)
}

func (*vulnerabilityAssessmentNotePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VulnerabilityAssessmentNote)(nil)).Elem()
}

func (i *vulnerabilityAssessmentNotePtrType) ToVulnerabilityAssessmentNotePtrOutput() VulnerabilityAssessmentNotePtrOutput {
	return i.ToVulnerabilityAssessmentNotePtrOutputWithContext(context.Background())
}

func (i *vulnerabilityAssessmentNotePtrType) ToVulnerabilityAssessmentNotePtrOutputWithContext(ctx context.Context) VulnerabilityAssessmentNotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityAssessmentNotePtrOutput)
}

// A single VulnerabilityAssessmentNote represents one particular product's vulnerability assessment for one CVE.
type VulnerabilityAssessmentNoteOutput struct{ *pulumi.OutputState }

func (VulnerabilityAssessmentNoteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VulnerabilityAssessmentNote)(nil)).Elem()
}

func (o VulnerabilityAssessmentNoteOutput) ToVulnerabilityAssessmentNoteOutput() VulnerabilityAssessmentNoteOutput {
	return o
}

func (o VulnerabilityAssessmentNoteOutput) ToVulnerabilityAssessmentNoteOutputWithContext(ctx context.Context) VulnerabilityAssessmentNoteOutput {
	return o
}

func (o VulnerabilityAssessmentNoteOutput) ToVulnerabilityAssessmentNotePtrOutput() VulnerabilityAssessmentNotePtrOutput {
	return o.ToVulnerabilityAssessmentNotePtrOutputWithContext(context.Background())
}

func (o VulnerabilityAssessmentNoteOutput) ToVulnerabilityAssessmentNotePtrOutputWithContext(ctx context.Context) VulnerabilityAssessmentNotePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VulnerabilityAssessmentNote) *VulnerabilityAssessmentNote {
		return &v
	}).(VulnerabilityAssessmentNotePtrOutput)
}

// Represents a vulnerability assessment for the product.
func (o VulnerabilityAssessmentNoteOutput) Assessment() AssessmentPtrOutput {
	return o.ApplyT(func(v VulnerabilityAssessmentNote) *Assessment { return v.Assessment }).(AssessmentPtrOutput)
}

// Identifies the language used by this document, corresponding to IETF BCP 47 / RFC 5646.
func (o VulnerabilityAssessmentNoteOutput) LanguageCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VulnerabilityAssessmentNote) *string { return v.LanguageCode }).(pulumi.StringPtrOutput)
}

// A detailed description of this Vex.
func (o VulnerabilityAssessmentNoteOutput) LongDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VulnerabilityAssessmentNote) *string { return v.LongDescription }).(pulumi.StringPtrOutput)
}

// The product affected by this vex.
func (o VulnerabilityAssessmentNoteOutput) Product() ProductPtrOutput {
	return o.ApplyT(func(v VulnerabilityAssessmentNote) *Product { return v.Product }).(ProductPtrOutput)
}

// Publisher details of this Note.
func (o VulnerabilityAssessmentNoteOutput) Publisher() PublisherPtrOutput {
	return o.ApplyT(func(v VulnerabilityAssessmentNote) *Publisher { return v.Publisher }).(PublisherPtrOutput)
}

// A one sentence description of this Vex.
func (o VulnerabilityAssessmentNoteOutput) ShortDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VulnerabilityAssessmentNote) *string { return v.ShortDescription }).(pulumi.StringPtrOutput)
}

// The title of the note. E.g. `Vex-Debian-11.4`
func (o VulnerabilityAssessmentNoteOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VulnerabilityAssessmentNote) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type VulnerabilityAssessmentNotePtrOutput struct{ *pulumi.OutputState }

func (VulnerabilityAssessmentNotePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VulnerabilityAssessmentNote)(nil)).Elem()
}

func (o VulnerabilityAssessmentNotePtrOutput) ToVulnerabilityAssessmentNotePtrOutput() VulnerabilityAssessmentNotePtrOutput {
	return o
}

func (o VulnerabilityAssessmentNotePtrOutput) ToVulnerabilityAssessmentNotePtrOutputWithContext(ctx context.Context) VulnerabilityAssessmentNotePtrOutput {
	return o
}

func (o VulnerabilityAssessmentNotePtrOutput) Elem() VulnerabilityAssessmentNoteOutput {
	return o.ApplyT(func(v *VulnerabilityAssessmentNote) VulnerabilityAssessmentNote {
		if v != nil {
			return *v
		}
		var ret VulnerabilityAssessmentNote
		return ret
	}).(VulnerabilityAssessmentNoteOutput)
}

// Represents a vulnerability assessment for the product.
func (o VulnerabilityAssessmentNotePtrOutput) Assessment() AssessmentPtrOutput {
	return o.ApplyT(func(v *VulnerabilityAssessmentNote) *Assessment {
		if v == nil {
			return nil
		}
		return v.Assessment
	}).(AssessmentPtrOutput)
}

// Identifies the language used by this document, corresponding to IETF BCP 47 / RFC 5646.
func (o VulnerabilityAssessmentNotePtrOutput) LanguageCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VulnerabilityAssessmentNote) *string {
		if v == nil {
			return nil
		}
		return v.LanguageCode
	}).(pulumi.StringPtrOutput)
}

// A detailed description of this Vex.
func (o VulnerabilityAssessmentNotePtrOutput) LongDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VulnerabilityAssessmentNote) *string {
		if v == nil {
			return nil
		}
		return v.LongDescription
	}).(pulumi.StringPtrOutput)
}

// The product affected by this vex.
func (o VulnerabilityAssessmentNotePtrOutput) Product() ProductPtrOutput {
	return o.ApplyT(func(v *VulnerabilityAssessmentNote) *Product {
		if v == nil {
			return nil
		}
		return v.Product
	}).(ProductPtrOutput)
}

// Publisher details of this Note.
func (o VulnerabilityAssessmentNotePtrOutput) Publisher() PublisherPtrOutput {
	return o.ApplyT(func(v *VulnerabilityAssessmentNote) *Publisher {
		if v == nil {
			return nil
		}
		return v.Publisher
	}).(PublisherPtrOutput)
}

// A one sentence description of this Vex.
func (o VulnerabilityAssessmentNotePtrOutput) ShortDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VulnerabilityAssessmentNote) *string {
		if v == nil {
			return nil
		}
		return v.ShortDescription
	}).(pulumi.StringPtrOutput)
}

// The title of the note. E.g. `Vex-Debian-11.4`
func (o VulnerabilityAssessmentNotePtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VulnerabilityAssessmentNote) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// A single VulnerabilityAssessmentNote represents one particular product's vulnerability assessment for one CVE.
type VulnerabilityAssessmentNoteResponse struct {
	// Represents a vulnerability assessment for the product.
	Assessment AssessmentResponse `pulumi:"assessment"`
	// Identifies the language used by this document, corresponding to IETF BCP 47 / RFC 5646.
	LanguageCode string `pulumi:"languageCode"`
	// A detailed description of this Vex.
	LongDescription string `pulumi:"longDescription"`
	// The product affected by this vex.
	Product ProductResponse `pulumi:"product"`
	// Publisher details of this Note.
	Publisher PublisherResponse `pulumi:"publisher"`
	// A one sentence description of this Vex.
	ShortDescription string `pulumi:"shortDescription"`
	// The title of the note. E.g. `Vex-Debian-11.4`
	Title string `pulumi:"title"`
}

// A single VulnerabilityAssessmentNote represents one particular product's vulnerability assessment for one CVE.
type VulnerabilityAssessmentNoteResponseOutput struct{ *pulumi.OutputState }

func (VulnerabilityAssessmentNoteResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VulnerabilityAssessmentNoteResponse)(nil)).Elem()
}

func (o VulnerabilityAssessmentNoteResponseOutput) ToVulnerabilityAssessmentNoteResponseOutput() VulnerabilityAssessmentNoteResponseOutput {
	return o
}

func (o VulnerabilityAssessmentNoteResponseOutput) ToVulnerabilityAssessmentNoteResponseOutputWithContext(ctx context.Context) VulnerabilityAssessmentNoteResponseOutput {
	return o
}

// Represents a vulnerability assessment for the product.
func (o VulnerabilityAssessmentNoteResponseOutput) Assessment() AssessmentResponseOutput {
	return o.ApplyT(func(v VulnerabilityAssessmentNoteResponse) AssessmentResponse { return v.Assessment }).(AssessmentResponseOutput)
}

// Identifies the language used by this document, corresponding to IETF BCP 47 / RFC 5646.
func (o VulnerabilityAssessmentNoteResponseOutput) LanguageCode() pulumi.StringOutput {
	return o.ApplyT(func(v VulnerabilityAssessmentNoteResponse) string { return v.LanguageCode }).(pulumi.StringOutput)
}

// A detailed description of this Vex.
func (o VulnerabilityAssessmentNoteResponseOutput) LongDescription() pulumi.StringOutput {
	return o.ApplyT(func(v VulnerabilityAssessmentNoteResponse) string { return v.LongDescription }).(pulumi.StringOutput)
}

// The product affected by this vex.
func (o VulnerabilityAssessmentNoteResponseOutput) Product() ProductResponseOutput {
	return o.ApplyT(func(v VulnerabilityAssessmentNoteResponse) ProductResponse { return v.Product }).(ProductResponseOutput)
}

// Publisher details of this Note.
func (o VulnerabilityAssessmentNoteResponseOutput) Publisher() PublisherResponseOutput {
	return o.ApplyT(func(v VulnerabilityAssessmentNoteResponse) PublisherResponse { return v.Publisher }).(PublisherResponseOutput)
}

// A one sentence description of this Vex.
func (o VulnerabilityAssessmentNoteResponseOutput) ShortDescription() pulumi.StringOutput {
	return o.ApplyT(func(v VulnerabilityAssessmentNoteResponse) string { return v.ShortDescription }).(pulumi.StringOutput)
}

// The title of the note. E.g. `Vex-Debian-11.4`
func (o VulnerabilityAssessmentNoteResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v VulnerabilityAssessmentNoteResponse) string { return v.Title }).(pulumi.StringOutput)
}

// The location of the vulnerability.
type VulnerabilityLocation struct {
	// The CPE URI in [cpe format](https://cpe.mitre.org/specification/) format. Examples include distro or storage location for vulnerable jar.
	CpeUri string `pulumi:"cpeUri"`
	// The package being described.
	Package string `pulumi:"package"`
	// The version of the package being described.
	Version Version `pulumi:"version"`
}

// VulnerabilityLocationInput is an input type that accepts VulnerabilityLocationArgs and VulnerabilityLocationOutput values.
// You can construct a concrete instance of `VulnerabilityLocationInput` via:
//
//	VulnerabilityLocationArgs{...}
type VulnerabilityLocationInput interface {
	pulumi.Input

	ToVulnerabilityLocationOutput() VulnerabilityLocationOutput
	ToVulnerabilityLocationOutputWithContext(context.Context) VulnerabilityLocationOutput
}

// The location of the vulnerability.
type VulnerabilityLocationArgs struct {
	// The CPE URI in [cpe format](https://cpe.mitre.org/specification/) format. Examples include distro or storage location for vulnerable jar.
	CpeUri pulumi.StringInput `pulumi:"cpeUri"`
	// The package being described.
	Package pulumi.StringInput `pulumi:"package"`
	// The version of the package being described.
	Version VersionInput `pulumi:"version"`
}

func (VulnerabilityLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VulnerabilityLocation)(nil)).Elem()
}

func (i VulnerabilityLocationArgs) ToVulnerabilityLocationOutput() VulnerabilityLocationOutput {
	return i.ToVulnerabilityLocationOutputWithContext(context.Background())
}

func (i VulnerabilityLocationArgs) ToVulnerabilityLocationOutputWithContext(ctx context.Context) VulnerabilityLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityLocationOutput)
}

func (i VulnerabilityLocationArgs) ToVulnerabilityLocationPtrOutput() VulnerabilityLocationPtrOutput {
	return i.ToVulnerabilityLocationPtrOutputWithContext(context.Background())
}

func (i VulnerabilityLocationArgs) ToVulnerabilityLocationPtrOutputWithContext(ctx context.Context) VulnerabilityLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityLocationOutput).ToVulnerabilityLocationPtrOutputWithContext(ctx)
}

// VulnerabilityLocationPtrInput is an input type that accepts VulnerabilityLocationArgs, VulnerabilityLocationPtr and VulnerabilityLocationPtrOutput values.
// You can construct a concrete instance of `VulnerabilityLocationPtrInput` via:
//
//	        VulnerabilityLocationArgs{...}
//
//	or:
//
//	        nil
type VulnerabilityLocationPtrInput interface {
	pulumi.Input

	ToVulnerabilityLocationPtrOutput() VulnerabilityLocationPtrOutput
	ToVulnerabilityLocationPtrOutputWithContext(context.Context) VulnerabilityLocationPtrOutput
}

type vulnerabilityLocationPtrType VulnerabilityLocationArgs

func VulnerabilityLocationPtr(v *VulnerabilityLocationArgs) VulnerabilityLocationPtrInput {
	return (*vulnerabilityLocationPtrType)(v)
}

func (*vulnerabilityLocationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VulnerabilityLocation)(nil)).Elem()
}

func (i *vulnerabilityLocationPtrType) ToVulnerabilityLocationPtrOutput() VulnerabilityLocationPtrOutput {
	return i.ToVulnerabilityLocationPtrOutputWithContext(context.Background())
}

func (i *vulnerabilityLocationPtrType) ToVulnerabilityLocationPtrOutputWithContext(ctx context.Context) VulnerabilityLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityLocationPtrOutput)
}

// The location of the vulnerability.
type VulnerabilityLocationOutput struct{ *pulumi.OutputState }

func (VulnerabilityLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VulnerabilityLocation)(nil)).Elem()
}

func (o VulnerabilityLocationOutput) ToVulnerabilityLocationOutput() VulnerabilityLocationOutput {
	return o
}

func (o VulnerabilityLocationOutput) ToVulnerabilityLocationOutputWithContext(ctx context.Context) VulnerabilityLocationOutput {
	return o
}

func (o VulnerabilityLocationOutput) ToVulnerabilityLocationPtrOutput() VulnerabilityLocationPtrOutput {
	return o.ToVulnerabilityLocationPtrOutputWithContext(context.Background())
}

func (o VulnerabilityLocationOutput) ToVulnerabilityLocationPtrOutputWithContext(ctx context.Context) VulnerabilityLocationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VulnerabilityLocation) *VulnerabilityLocation {
		return &v
	}).(VulnerabilityLocationPtrOutput)
}

// The CPE URI in [cpe format](https://cpe.mitre.org/specification/) format. Examples include distro or storage location for vulnerable jar.
func (o VulnerabilityLocationOutput) CpeUri() pulumi.StringOutput {
	return o.ApplyT(func(v VulnerabilityLocation) string { return v.CpeUri }).(pulumi.StringOutput)
}

// The package being described.
func (o VulnerabilityLocationOutput) Package() pulumi.StringOutput {
	return o.ApplyT(func(v VulnerabilityLocation) string { return v.Package }).(pulumi.StringOutput)
}

// The version of the package being described.
func (o VulnerabilityLocationOutput) Version() VersionOutput {
	return o.ApplyT(func(v VulnerabilityLocation) Version { return v.Version }).(VersionOutput)
}

type VulnerabilityLocationPtrOutput struct{ *pulumi.OutputState }

func (VulnerabilityLocationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VulnerabilityLocation)(nil)).Elem()
}

func (o VulnerabilityLocationPtrOutput) ToVulnerabilityLocationPtrOutput() VulnerabilityLocationPtrOutput {
	return o
}

func (o VulnerabilityLocationPtrOutput) ToVulnerabilityLocationPtrOutputWithContext(ctx context.Context) VulnerabilityLocationPtrOutput {
	return o
}

func (o VulnerabilityLocationPtrOutput) Elem() VulnerabilityLocationOutput {
	return o.ApplyT(func(v *VulnerabilityLocation) VulnerabilityLocation {
		if v != nil {
			return *v
		}
		var ret VulnerabilityLocation
		return ret
	}).(VulnerabilityLocationOutput)
}

// The CPE URI in [cpe format](https://cpe.mitre.org/specification/) format. Examples include distro or storage location for vulnerable jar.
func (o VulnerabilityLocationPtrOutput) CpeUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VulnerabilityLocation) *string {
		if v == nil {
			return nil
		}
		return &v.CpeUri
	}).(pulumi.StringPtrOutput)
}

// The package being described.
func (o VulnerabilityLocationPtrOutput) Package() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VulnerabilityLocation) *string {
		if v == nil {
			return nil
		}
		return &v.Package
	}).(pulumi.StringPtrOutput)
}

// The version of the package being described.
func (o VulnerabilityLocationPtrOutput) Version() VersionPtrOutput {
	return o.ApplyT(func(v *VulnerabilityLocation) *Version {
		if v == nil {
			return nil
		}
		return &v.Version
	}).(VersionPtrOutput)
}

// The location of the vulnerability.
type VulnerabilityLocationResponse struct {
	// The CPE URI in [cpe format](https://cpe.mitre.org/specification/) format. Examples include distro or storage location for vulnerable jar.
	CpeUri string `pulumi:"cpeUri"`
	// The package being described.
	Package string `pulumi:"package"`
	// The version of the package being described.
	Version VersionResponse `pulumi:"version"`
}

// The location of the vulnerability.
type VulnerabilityLocationResponseOutput struct{ *pulumi.OutputState }

func (VulnerabilityLocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VulnerabilityLocationResponse)(nil)).Elem()
}

func (o VulnerabilityLocationResponseOutput) ToVulnerabilityLocationResponseOutput() VulnerabilityLocationResponseOutput {
	return o
}

func (o VulnerabilityLocationResponseOutput) ToVulnerabilityLocationResponseOutputWithContext(ctx context.Context) VulnerabilityLocationResponseOutput {
	return o
}

// The CPE URI in [cpe format](https://cpe.mitre.org/specification/) format. Examples include distro or storage location for vulnerable jar.
func (o VulnerabilityLocationResponseOutput) CpeUri() pulumi.StringOutput {
	return o.ApplyT(func(v VulnerabilityLocationResponse) string { return v.CpeUri }).(pulumi.StringOutput)
}

// The package being described.
func (o VulnerabilityLocationResponseOutput) Package() pulumi.StringOutput {
	return o.ApplyT(func(v VulnerabilityLocationResponse) string { return v.Package }).(pulumi.StringOutput)
}

// The version of the package being described.
func (o VulnerabilityLocationResponseOutput) Version() VersionResponseOutput {
	return o.ApplyT(func(v VulnerabilityLocationResponse) VersionResponse { return v.Version }).(VersionResponseOutput)
}

// Vulnerability provides metadata about a security vulnerability in a Note.
type VulnerabilityResponse struct {
	// The CVSS score for this vulnerability.
	CvssScore float64 `pulumi:"cvssScore"`
	// The full description of the CVSS for version 2.
	CvssV2 CVSSResponse `pulumi:"cvssV2"`
	// The full description of the CVSS for version 3.
	CvssV3 CVSSv3Response `pulumi:"cvssV3"`
	// CVSS version used to populate cvss_score and severity.
	CvssVersion string `pulumi:"cvssVersion"`
	// A list of CWE for this vulnerability. For details, see: https://cwe.mitre.org/index.html
	Cwe []string `pulumi:"cwe"`
	// All information about the package to specifically identify this vulnerability. One entry per (version range and cpe_uri) the package vulnerability has manifested in.
	Details []DetailResponse `pulumi:"details"`
	// Note provider assigned impact of the vulnerability.
	Severity string `pulumi:"severity"`
	// The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.
	SourceUpdateTime string `pulumi:"sourceUpdateTime"`
	// Windows details get their own format because the information format and model don't match a normal detail. Specifically Windows updates are done as patches, thus Windows vulnerabilities really are a missing package, rather than a package being at an incorrect version.
	WindowsDetails []WindowsDetailResponse `pulumi:"windowsDetails"`
}

// Vulnerability provides metadata about a security vulnerability in a Note.
type VulnerabilityResponseOutput struct{ *pulumi.OutputState }

func (VulnerabilityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VulnerabilityResponse)(nil)).Elem()
}

func (o VulnerabilityResponseOutput) ToVulnerabilityResponseOutput() VulnerabilityResponseOutput {
	return o
}

func (o VulnerabilityResponseOutput) ToVulnerabilityResponseOutputWithContext(ctx context.Context) VulnerabilityResponseOutput {
	return o
}

// The CVSS score for this vulnerability.
func (o VulnerabilityResponseOutput) CvssScore() pulumi.Float64Output {
	return o.ApplyT(func(v VulnerabilityResponse) float64 { return v.CvssScore }).(pulumi.Float64Output)
}

// The full description of the CVSS for version 2.
func (o VulnerabilityResponseOutput) CvssV2() CVSSResponseOutput {
	return o.ApplyT(func(v VulnerabilityResponse) CVSSResponse { return v.CvssV2 }).(CVSSResponseOutput)
}

// The full description of the CVSS for version 3.
func (o VulnerabilityResponseOutput) CvssV3() CVSSv3ResponseOutput {
	return o.ApplyT(func(v VulnerabilityResponse) CVSSv3Response { return v.CvssV3 }).(CVSSv3ResponseOutput)
}

// CVSS version used to populate cvss_score and severity.
func (o VulnerabilityResponseOutput) CvssVersion() pulumi.StringOutput {
	return o.ApplyT(func(v VulnerabilityResponse) string { return v.CvssVersion }).(pulumi.StringOutput)
}

// A list of CWE for this vulnerability. For details, see: https://cwe.mitre.org/index.html
func (o VulnerabilityResponseOutput) Cwe() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VulnerabilityResponse) []string { return v.Cwe }).(pulumi.StringArrayOutput)
}

// All information about the package to specifically identify this vulnerability. One entry per (version range and cpe_uri) the package vulnerability has manifested in.
func (o VulnerabilityResponseOutput) Details() DetailResponseArrayOutput {
	return o.ApplyT(func(v VulnerabilityResponse) []DetailResponse { return v.Details }).(DetailResponseArrayOutput)
}

// Note provider assigned impact of the vulnerability.
func (o VulnerabilityResponseOutput) Severity() pulumi.StringOutput {
	return o.ApplyT(func(v VulnerabilityResponse) string { return v.Severity }).(pulumi.StringOutput)
}

// The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.
func (o VulnerabilityResponseOutput) SourceUpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v VulnerabilityResponse) string { return v.SourceUpdateTime }).(pulumi.StringOutput)
}

// Windows details get their own format because the information format and model don't match a normal detail. Specifically Windows updates are done as patches, thus Windows vulnerabilities really are a missing package, rather than a package being at an incorrect version.
func (o VulnerabilityResponseOutput) WindowsDetails() WindowsDetailResponseArrayOutput {
	return o.ApplyT(func(v VulnerabilityResponse) []WindowsDetailResponse { return v.WindowsDetails }).(WindowsDetailResponseArrayOutput)
}

type WindowsDetail struct {
	// The CPE URI in [cpe format](https://cpe.mitre.org/specification/) in which the vulnerability manifests. Examples include distro or storage location for vulnerable jar.
	CpeUri string `pulumi:"cpeUri"`
	// The description of the vulnerability.
	Description *string `pulumi:"description"`
	// The names of the KBs which have hotfixes to mitigate this vulnerability. Note that there may be multiple hotfixes (and thus multiple KBs) that mitigate a given vulnerability. Currently any listed kb's presence is considered a fix.
	FixingKbs []KnowledgeBase `pulumi:"fixingKbs"`
	// The name of the vulnerability.
	Name string `pulumi:"name"`
}

// WindowsDetailInput is an input type that accepts WindowsDetailArgs and WindowsDetailOutput values.
// You can construct a concrete instance of `WindowsDetailInput` via:
//
//	WindowsDetailArgs{...}
type WindowsDetailInput interface {
	pulumi.Input

	ToWindowsDetailOutput() WindowsDetailOutput
	ToWindowsDetailOutputWithContext(context.Context) WindowsDetailOutput
}

type WindowsDetailArgs struct {
	// The CPE URI in [cpe format](https://cpe.mitre.org/specification/) in which the vulnerability manifests. Examples include distro or storage location for vulnerable jar.
	CpeUri pulumi.StringInput `pulumi:"cpeUri"`
	// The description of the vulnerability.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The names of the KBs which have hotfixes to mitigate this vulnerability. Note that there may be multiple hotfixes (and thus multiple KBs) that mitigate a given vulnerability. Currently any listed kb's presence is considered a fix.
	FixingKbs KnowledgeBaseArrayInput `pulumi:"fixingKbs"`
	// The name of the vulnerability.
	Name pulumi.StringInput `pulumi:"name"`
}

func (WindowsDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsDetail)(nil)).Elem()
}

func (i WindowsDetailArgs) ToWindowsDetailOutput() WindowsDetailOutput {
	return i.ToWindowsDetailOutputWithContext(context.Background())
}

func (i WindowsDetailArgs) ToWindowsDetailOutputWithContext(ctx context.Context) WindowsDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsDetailOutput)
}

// WindowsDetailArrayInput is an input type that accepts WindowsDetailArray and WindowsDetailArrayOutput values.
// You can construct a concrete instance of `WindowsDetailArrayInput` via:
//
//	WindowsDetailArray{ WindowsDetailArgs{...} }
type WindowsDetailArrayInput interface {
	pulumi.Input

	ToWindowsDetailArrayOutput() WindowsDetailArrayOutput
	ToWindowsDetailArrayOutputWithContext(context.Context) WindowsDetailArrayOutput
}

type WindowsDetailArray []WindowsDetailInput

func (WindowsDetailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WindowsDetail)(nil)).Elem()
}

func (i WindowsDetailArray) ToWindowsDetailArrayOutput() WindowsDetailArrayOutput {
	return i.ToWindowsDetailArrayOutputWithContext(context.Background())
}

func (i WindowsDetailArray) ToWindowsDetailArrayOutputWithContext(ctx context.Context) WindowsDetailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsDetailArrayOutput)
}

type WindowsDetailOutput struct{ *pulumi.OutputState }

func (WindowsDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsDetail)(nil)).Elem()
}

func (o WindowsDetailOutput) ToWindowsDetailOutput() WindowsDetailOutput {
	return o
}

func (o WindowsDetailOutput) ToWindowsDetailOutputWithContext(ctx context.Context) WindowsDetailOutput {
	return o
}

// The CPE URI in [cpe format](https://cpe.mitre.org/specification/) in which the vulnerability manifests. Examples include distro or storage location for vulnerable jar.
func (o WindowsDetailOutput) CpeUri() pulumi.StringOutput {
	return o.ApplyT(func(v WindowsDetail) string { return v.CpeUri }).(pulumi.StringOutput)
}

// The description of the vulnerability.
func (o WindowsDetailOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WindowsDetail) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The names of the KBs which have hotfixes to mitigate this vulnerability. Note that there may be multiple hotfixes (and thus multiple KBs) that mitigate a given vulnerability. Currently any listed kb's presence is considered a fix.
func (o WindowsDetailOutput) FixingKbs() KnowledgeBaseArrayOutput {
	return o.ApplyT(func(v WindowsDetail) []KnowledgeBase { return v.FixingKbs }).(KnowledgeBaseArrayOutput)
}

// The name of the vulnerability.
func (o WindowsDetailOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v WindowsDetail) string { return v.Name }).(pulumi.StringOutput)
}

type WindowsDetailArrayOutput struct{ *pulumi.OutputState }

func (WindowsDetailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WindowsDetail)(nil)).Elem()
}

func (o WindowsDetailArrayOutput) ToWindowsDetailArrayOutput() WindowsDetailArrayOutput {
	return o
}

func (o WindowsDetailArrayOutput) ToWindowsDetailArrayOutputWithContext(ctx context.Context) WindowsDetailArrayOutput {
	return o
}

func (o WindowsDetailArrayOutput) Index(i pulumi.IntInput) WindowsDetailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WindowsDetail {
		return vs[0].([]WindowsDetail)[vs[1].(int)]
	}).(WindowsDetailOutput)
}

type WindowsDetailResponse struct {
	// The CPE URI in [cpe format](https://cpe.mitre.org/specification/) in which the vulnerability manifests. Examples include distro or storage location for vulnerable jar.
	CpeUri string `pulumi:"cpeUri"`
	// The description of the vulnerability.
	Description string `pulumi:"description"`
	// The names of the KBs which have hotfixes to mitigate this vulnerability. Note that there may be multiple hotfixes (and thus multiple KBs) that mitigate a given vulnerability. Currently any listed kb's presence is considered a fix.
	FixingKbs []KnowledgeBaseResponse `pulumi:"fixingKbs"`
	// The name of the vulnerability.
	Name string `pulumi:"name"`
}

type WindowsDetailResponseOutput struct{ *pulumi.OutputState }

func (WindowsDetailResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsDetailResponse)(nil)).Elem()
}

func (o WindowsDetailResponseOutput) ToWindowsDetailResponseOutput() WindowsDetailResponseOutput {
	return o
}

func (o WindowsDetailResponseOutput) ToWindowsDetailResponseOutputWithContext(ctx context.Context) WindowsDetailResponseOutput {
	return o
}

// The CPE URI in [cpe format](https://cpe.mitre.org/specification/) in which the vulnerability manifests. Examples include distro or storage location for vulnerable jar.
func (o WindowsDetailResponseOutput) CpeUri() pulumi.StringOutput {
	return o.ApplyT(func(v WindowsDetailResponse) string { return v.CpeUri }).(pulumi.StringOutput)
}

// The description of the vulnerability.
func (o WindowsDetailResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v WindowsDetailResponse) string { return v.Description }).(pulumi.StringOutput)
}

// The names of the KBs which have hotfixes to mitigate this vulnerability. Note that there may be multiple hotfixes (and thus multiple KBs) that mitigate a given vulnerability. Currently any listed kb's presence is considered a fix.
func (o WindowsDetailResponseOutput) FixingKbs() KnowledgeBaseResponseArrayOutput {
	return o.ApplyT(func(v WindowsDetailResponse) []KnowledgeBaseResponse { return v.FixingKbs }).(KnowledgeBaseResponseArrayOutput)
}

// The name of the vulnerability.
func (o WindowsDetailResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v WindowsDetailResponse) string { return v.Name }).(pulumi.StringOutput)
}

type WindowsDetailResponseArrayOutput struct{ *pulumi.OutputState }

func (WindowsDetailResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WindowsDetailResponse)(nil)).Elem()
}

func (o WindowsDetailResponseArrayOutput) ToWindowsDetailResponseArrayOutput() WindowsDetailResponseArrayOutput {
	return o
}

func (o WindowsDetailResponseArrayOutput) ToWindowsDetailResponseArrayOutputWithContext(ctx context.Context) WindowsDetailResponseArrayOutput {
	return o
}

func (o WindowsDetailResponseArrayOutput) Index(i pulumi.IntInput) WindowsDetailResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WindowsDetailResponse {
		return vs[0].([]WindowsDetailResponse)[vs[1].(int)]
	}).(WindowsDetailResponseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AliasContextInput)(nil)).Elem(), AliasContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AliasContextPtrInput)(nil)).Elem(), AliasContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnalysisCompletedInput)(nil)).Elem(), AnalysisCompletedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnalysisCompletedPtrInput)(nil)).Elem(), AnalysisCompletedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ArtifactInput)(nil)).Elem(), ArtifactArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ArtifactArrayInput)(nil)).Elem(), ArtifactArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ArtifactHashesInput)(nil)).Elem(), ArtifactHashesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ArtifactHashesPtrInput)(nil)).Elem(), ArtifactHashesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ArtifactRuleInput)(nil)).Elem(), ArtifactRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ArtifactRuleArrayInput)(nil)).Elem(), ArtifactRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssessmentInput)(nil)).Elem(), AssessmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssessmentPtrInput)(nil)).Elem(), AssessmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AttestationInput)(nil)).Elem(), AttestationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AttestationPtrInput)(nil)).Elem(), AttestationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorityInput)(nil)).Elem(), AuthorityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorityPtrInput)(nil)).Elem(), AuthorityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BasisInput)(nil)).Elem(), BasisArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BasisPtrInput)(nil)).Elem(), BasisArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingInput)(nil)).Elem(), BindingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingArrayInput)(nil)).Elem(), BindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BuildInput)(nil)).Elem(), BuildArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BuildPtrInput)(nil)).Elem(), BuildArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BuildDefinitionInput)(nil)).Elem(), BuildDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BuildDefinitionPtrInput)(nil)).Elem(), BuildDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BuildMetadataInput)(nil)).Elem(), BuildMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BuildMetadataPtrInput)(nil)).Elem(), BuildMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BuildProvenanceInput)(nil)).Elem(), BuildProvenanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BuildProvenancePtrInput)(nil)).Elem(), BuildProvenanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BuildSignatureInput)(nil)).Elem(), BuildSignatureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BuildSignaturePtrInput)(nil)).Elem(), BuildSignatureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ByProductsInput)(nil)).Elem(), ByProductsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ByProductsPtrInput)(nil)).Elem(), ByProductsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CVSSInput)(nil)).Elem(), CVSSArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CVSSPtrInput)(nil)).Elem(), CVSSArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CVSSv3Input)(nil)).Elem(), CVSSv3Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*CVSSv3PtrInput)(nil)).Elem(), CVSSv3Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudRepoSourceContextInput)(nil)).Elem(), CloudRepoSourceContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudRepoSourceContextPtrInput)(nil)).Elem(), CloudRepoSourceContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CommandInput)(nil)).Elem(), CommandArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CommandArrayInput)(nil)).Elem(), CommandArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeployableInput)(nil)).Elem(), DeployableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeployablePtrInput)(nil)).Elem(), DeployableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentInput)(nil)).Elem(), DeploymentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentPtrInput)(nil)).Elem(), DeploymentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DerivedInput)(nil)).Elem(), DerivedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DerivedPtrInput)(nil)).Elem(), DerivedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DetailInput)(nil)).Elem(), DetailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DetailArrayInput)(nil)).Elem(), DetailArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DetailsInput)(nil)).Elem(), DetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DetailsPtrInput)(nil)).Elem(), DetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DigestInput)(nil)).Elem(), DigestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DigestArrayInput)(nil)).Elem(), DigestArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DiscoveredInput)(nil)).Elem(), DiscoveredArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DiscoveredPtrInput)(nil)).Elem(), DiscoveredArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DiscoveryInput)(nil)).Elem(), DiscoveryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DiscoveryPtrInput)(nil)).Elem(), DiscoveryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DistributionInput)(nil)).Elem(), DistributionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DistributionArrayInput)(nil)).Elem(), DistributionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DocumentNoteInput)(nil)).Elem(), DocumentNoteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DocumentNotePtrInput)(nil)).Elem(), DocumentNoteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DocumentOccurrenceInput)(nil)).Elem(), DocumentOccurrenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DocumentOccurrencePtrInput)(nil)).Elem(), DocumentOccurrenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvelopeInput)(nil)).Elem(), EnvelopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvelopePtrInput)(nil)).Elem(), EnvelopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvelopeSignatureInput)(nil)).Elem(), EnvelopeSignatureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvelopeSignatureArrayInput)(nil)).Elem(), EnvelopeSignatureArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentInput)(nil)).Elem(), EnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentPtrInput)(nil)).Elem(), EnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprPtrInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalRefInput)(nil)).Elem(), ExternalRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalRefArrayInput)(nil)).Elem(), ExternalRefArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileHashesInput)(nil)).Elem(), FileHashesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileHashesPtrInput)(nil)).Elem(), FileHashesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileNoteInput)(nil)).Elem(), FileNoteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileNotePtrInput)(nil)).Elem(), FileNoteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileOccurrenceInput)(nil)).Elem(), FileOccurrenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileOccurrencePtrInput)(nil)).Elem(), FileOccurrenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FingerprintInput)(nil)).Elem(), FingerprintArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FingerprintPtrInput)(nil)).Elem(), FingerprintArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GenericSignedAttestationInput)(nil)).Elem(), GenericSignedAttestationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GenericSignedAttestationPtrInput)(nil)).Elem(), GenericSignedAttestationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GerritSourceContextInput)(nil)).Elem(), GerritSourceContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GerritSourceContextPtrInput)(nil)).Elem(), GerritSourceContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitSourceContextInput)(nil)).Elem(), GitSourceContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitSourceContextPtrInput)(nil)).Elem(), GitSourceContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrafeasV1beta1BuildDetailsInput)(nil)).Elem(), GrafeasV1beta1BuildDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrafeasV1beta1BuildDetailsPtrInput)(nil)).Elem(), GrafeasV1beta1BuildDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrafeasV1beta1DeploymentDetailsInput)(nil)).Elem(), GrafeasV1beta1DeploymentDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrafeasV1beta1DeploymentDetailsPtrInput)(nil)).Elem(), GrafeasV1beta1DeploymentDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrafeasV1beta1DiscoveryDetailsInput)(nil)).Elem(), GrafeasV1beta1DiscoveryDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrafeasV1beta1DiscoveryDetailsPtrInput)(nil)).Elem(), GrafeasV1beta1DiscoveryDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrafeasV1beta1ImageDetailsInput)(nil)).Elem(), GrafeasV1beta1ImageDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrafeasV1beta1ImageDetailsPtrInput)(nil)).Elem(), GrafeasV1beta1ImageDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrafeasV1beta1IntotoArtifactInput)(nil)).Elem(), GrafeasV1beta1IntotoArtifactArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrafeasV1beta1IntotoArtifactArrayInput)(nil)).Elem(), GrafeasV1beta1IntotoArtifactArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrafeasV1beta1IntotoDetailsInput)(nil)).Elem(), GrafeasV1beta1IntotoDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrafeasV1beta1IntotoDetailsPtrInput)(nil)).Elem(), GrafeasV1beta1IntotoDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrafeasV1beta1IntotoSignatureInput)(nil)).Elem(), GrafeasV1beta1IntotoSignatureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrafeasV1beta1IntotoSignatureArrayInput)(nil)).Elem(), GrafeasV1beta1IntotoSignatureArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrafeasV1beta1PackageDetailsInput)(nil)).Elem(), GrafeasV1beta1PackageDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrafeasV1beta1PackageDetailsPtrInput)(nil)).Elem(), GrafeasV1beta1PackageDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrafeasV1beta1VulnerabilityDetailsInput)(nil)).Elem(), GrafeasV1beta1VulnerabilityDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrafeasV1beta1VulnerabilityDetailsPtrInput)(nil)).Elem(), GrafeasV1beta1VulnerabilityDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HashInput)(nil)).Elem(), HashArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HashPtrInput)(nil)).Elem(), HashArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HashArrayInput)(nil)).Elem(), HashArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HintInput)(nil)).Elem(), HintArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HintPtrInput)(nil)).Elem(), HintArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InTotoInput)(nil)).Elem(), InTotoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InTotoPtrInput)(nil)).Elem(), InTotoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InTotoSlsaProvenanceV1Input)(nil)).Elem(), InTotoSlsaProvenanceV1Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*InTotoSlsaProvenanceV1PtrInput)(nil)).Elem(), InTotoSlsaProvenanceV1Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstallationInput)(nil)).Elem(), InstallationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstallationPtrInput)(nil)).Elem(), InstallationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JustificationInput)(nil)).Elem(), JustificationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JustificationPtrInput)(nil)).Elem(), JustificationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KnowledgeBaseInput)(nil)).Elem(), KnowledgeBaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KnowledgeBaseArrayInput)(nil)).Elem(), KnowledgeBaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LayerInput)(nil)).Elem(), LayerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LayerArrayInput)(nil)).Elem(), LayerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LicenseInput)(nil)).Elem(), LicenseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LicensePtrInput)(nil)).Elem(), LicenseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LinkInput)(nil)).Elem(), LinkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LinkPtrInput)(nil)).Elem(), LinkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationInput)(nil)).Elem(), LocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationArrayInput)(nil)).Elem(), LocationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PackageInput)(nil)).Elem(), PackageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PackagePtrInput)(nil)).Elem(), PackageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PackageInfoNoteInput)(nil)).Elem(), PackageInfoNoteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PackageInfoNotePtrInput)(nil)).Elem(), PackageInfoNoteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PackageInfoOccurrenceInput)(nil)).Elem(), PackageInfoOccurrenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PackageInfoOccurrencePtrInput)(nil)).Elem(), PackageInfoOccurrenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PackageIssueInput)(nil)).Elem(), PackageIssueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PackageIssueArrayInput)(nil)).Elem(), PackageIssueArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PgpSignedAttestationInput)(nil)).Elem(), PgpSignedAttestationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PgpSignedAttestationPtrInput)(nil)).Elem(), PgpSignedAttestationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProductInput)(nil)).Elem(), ProductArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProductPtrInput)(nil)).Elem(), ProductArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectRepoIdInput)(nil)).Elem(), ProjectRepoIdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectRepoIdPtrInput)(nil)).Elem(), ProjectRepoIdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProvenanceBuilderInput)(nil)).Elem(), ProvenanceBuilderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProvenanceBuilderPtrInput)(nil)).Elem(), ProvenanceBuilderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublisherInput)(nil)).Elem(), PublisherArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublisherPtrInput)(nil)).Elem(), PublisherArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RelatedUrlInput)(nil)).Elem(), RelatedUrlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RelatedUrlPtrInput)(nil)).Elem(), RelatedUrlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RelatedUrlArrayInput)(nil)).Elem(), RelatedUrlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RelationshipNoteInput)(nil)).Elem(), RelationshipNoteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RelationshipNotePtrInput)(nil)).Elem(), RelationshipNoteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RelationshipOccurrenceInput)(nil)).Elem(), RelationshipOccurrenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RelationshipOccurrencePtrInput)(nil)).Elem(), RelationshipOccurrenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemediationInput)(nil)).Elem(), RemediationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemediationArrayInput)(nil)).Elem(), RemediationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepoIdInput)(nil)).Elem(), RepoIdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepoIdPtrInput)(nil)).Elem(), RepoIdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceInput)(nil)).Elem(), ResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceDescriptorInput)(nil)).Elem(), ResourceDescriptorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceDescriptorArrayInput)(nil)).Elem(), ResourceDescriptorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RunDetailsInput)(nil)).Elem(), RunDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RunDetailsPtrInput)(nil)).Elem(), RunDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SBOMReferenceNoteInput)(nil)).Elem(), SBOMReferenceNoteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SBOMReferenceNotePtrInput)(nil)).Elem(), SBOMReferenceNoteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SBOMReferenceOccurrenceInput)(nil)).Elem(), SBOMReferenceOccurrenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SBOMReferenceOccurrencePtrInput)(nil)).Elem(), SBOMReferenceOccurrenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SBOMStatusInput)(nil)).Elem(), SBOMStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SBOMStatusPtrInput)(nil)).Elem(), SBOMStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SbomReferenceIntotoPayloadInput)(nil)).Elem(), SbomReferenceIntotoPayloadArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SbomReferenceIntotoPayloadPtrInput)(nil)).Elem(), SbomReferenceIntotoPayloadArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SbomReferenceIntotoPredicateInput)(nil)).Elem(), SbomReferenceIntotoPredicateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SbomReferenceIntotoPredicatePtrInput)(nil)).Elem(), SbomReferenceIntotoPredicateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SignatureInput)(nil)).Elem(), SignatureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SignatureArrayInput)(nil)).Elem(), SignatureArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SigningKeyInput)(nil)).Elem(), SigningKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SigningKeyArrayInput)(nil)).Elem(), SigningKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SlsaProvenanceV1Input)(nil)).Elem(), SlsaProvenanceV1Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*SlsaProvenanceV1PtrInput)(nil)).Elem(), SlsaProvenanceV1Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceInput)(nil)).Elem(), SourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourcePtrInput)(nil)).Elem(), SourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceContextInput)(nil)).Elem(), SourceContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceContextPtrInput)(nil)).Elem(), SourceContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceContextArrayInput)(nil)).Elem(), SourceContextArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StatusInput)(nil)).Elem(), StatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StatusPtrInput)(nil)).Elem(), StatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StatusArrayInput)(nil)).Elem(), StatusArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubjectInput)(nil)).Elem(), SubjectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubjectArrayInput)(nil)).Elem(), SubjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VersionInput)(nil)).Elem(), VersionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VersionPtrInput)(nil)).Elem(), VersionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VexAssessmentInput)(nil)).Elem(), VexAssessmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VexAssessmentPtrInput)(nil)).Elem(), VexAssessmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VulnerabilityInput)(nil)).Elem(), VulnerabilityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VulnerabilityPtrInput)(nil)).Elem(), VulnerabilityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VulnerabilityAssessmentNoteInput)(nil)).Elem(), VulnerabilityAssessmentNoteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VulnerabilityAssessmentNotePtrInput)(nil)).Elem(), VulnerabilityAssessmentNoteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VulnerabilityLocationInput)(nil)).Elem(), VulnerabilityLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VulnerabilityLocationPtrInput)(nil)).Elem(), VulnerabilityLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WindowsDetailInput)(nil)).Elem(), WindowsDetailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WindowsDetailArrayInput)(nil)).Elem(), WindowsDetailArray{})
	pulumi.RegisterOutputType(AliasContextOutput{})
	pulumi.RegisterOutputType(AliasContextPtrOutput{})
	pulumi.RegisterOutputType(AliasContextResponseOutput{})
	pulumi.RegisterOutputType(AnalysisCompletedOutput{})
	pulumi.RegisterOutputType(AnalysisCompletedPtrOutput{})
	pulumi.RegisterOutputType(AnalysisCompletedResponseOutput{})
	pulumi.RegisterOutputType(ArtifactOutput{})
	pulumi.RegisterOutputType(ArtifactArrayOutput{})
	pulumi.RegisterOutputType(ArtifactHashesOutput{})
	pulumi.RegisterOutputType(ArtifactHashesPtrOutput{})
	pulumi.RegisterOutputType(ArtifactHashesResponseOutput{})
	pulumi.RegisterOutputType(ArtifactResponseOutput{})
	pulumi.RegisterOutputType(ArtifactResponseArrayOutput{})
	pulumi.RegisterOutputType(ArtifactRuleOutput{})
	pulumi.RegisterOutputType(ArtifactRuleArrayOutput{})
	pulumi.RegisterOutputType(ArtifactRuleResponseOutput{})
	pulumi.RegisterOutputType(ArtifactRuleResponseArrayOutput{})
	pulumi.RegisterOutputType(AssessmentOutput{})
	pulumi.RegisterOutputType(AssessmentPtrOutput{})
	pulumi.RegisterOutputType(AssessmentResponseOutput{})
	pulumi.RegisterOutputType(AttestationOutput{})
	pulumi.RegisterOutputType(AttestationPtrOutput{})
	pulumi.RegisterOutputType(AttestationResponseOutput{})
	pulumi.RegisterOutputType(AuthorityOutput{})
	pulumi.RegisterOutputType(AuthorityPtrOutput{})
	pulumi.RegisterOutputType(AuthorityResponseOutput{})
	pulumi.RegisterOutputType(BasisOutput{})
	pulumi.RegisterOutputType(BasisPtrOutput{})
	pulumi.RegisterOutputType(BasisResponseOutput{})
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(BindingResponseOutput{})
	pulumi.RegisterOutputType(BindingResponseArrayOutput{})
	pulumi.RegisterOutputType(BuildOutput{})
	pulumi.RegisterOutputType(BuildPtrOutput{})
	pulumi.RegisterOutputType(BuildDefinitionOutput{})
	pulumi.RegisterOutputType(BuildDefinitionPtrOutput{})
	pulumi.RegisterOutputType(BuildDefinitionResponseOutput{})
	pulumi.RegisterOutputType(BuildMetadataOutput{})
	pulumi.RegisterOutputType(BuildMetadataPtrOutput{})
	pulumi.RegisterOutputType(BuildMetadataResponseOutput{})
	pulumi.RegisterOutputType(BuildProvenanceOutput{})
	pulumi.RegisterOutputType(BuildProvenancePtrOutput{})
	pulumi.RegisterOutputType(BuildProvenanceResponseOutput{})
	pulumi.RegisterOutputType(BuildResponseOutput{})
	pulumi.RegisterOutputType(BuildSignatureOutput{})
	pulumi.RegisterOutputType(BuildSignaturePtrOutput{})
	pulumi.RegisterOutputType(BuildSignatureResponseOutput{})
	pulumi.RegisterOutputType(ByProductsOutput{})
	pulumi.RegisterOutputType(ByProductsPtrOutput{})
	pulumi.RegisterOutputType(ByProductsResponseOutput{})
	pulumi.RegisterOutputType(CVSSOutput{})
	pulumi.RegisterOutputType(CVSSPtrOutput{})
	pulumi.RegisterOutputType(CVSSResponseOutput{})
	pulumi.RegisterOutputType(CVSSv3Output{})
	pulumi.RegisterOutputType(CVSSv3PtrOutput{})
	pulumi.RegisterOutputType(CVSSv3ResponseOutput{})
	pulumi.RegisterOutputType(CloudRepoSourceContextOutput{})
	pulumi.RegisterOutputType(CloudRepoSourceContextPtrOutput{})
	pulumi.RegisterOutputType(CloudRepoSourceContextResponseOutput{})
	pulumi.RegisterOutputType(CommandOutput{})
	pulumi.RegisterOutputType(CommandArrayOutput{})
	pulumi.RegisterOutputType(CommandResponseOutput{})
	pulumi.RegisterOutputType(CommandResponseArrayOutput{})
	pulumi.RegisterOutputType(DeployableOutput{})
	pulumi.RegisterOutputType(DeployablePtrOutput{})
	pulumi.RegisterOutputType(DeployableResponseOutput{})
	pulumi.RegisterOutputType(DeploymentOutput{})
	pulumi.RegisterOutputType(DeploymentPtrOutput{})
	pulumi.RegisterOutputType(DeploymentResponseOutput{})
	pulumi.RegisterOutputType(DerivedOutput{})
	pulumi.RegisterOutputType(DerivedPtrOutput{})
	pulumi.RegisterOutputType(DerivedResponseOutput{})
	pulumi.RegisterOutputType(DetailOutput{})
	pulumi.RegisterOutputType(DetailArrayOutput{})
	pulumi.RegisterOutputType(DetailResponseOutput{})
	pulumi.RegisterOutputType(DetailResponseArrayOutput{})
	pulumi.RegisterOutputType(DetailsOutput{})
	pulumi.RegisterOutputType(DetailsPtrOutput{})
	pulumi.RegisterOutputType(DetailsResponseOutput{})
	pulumi.RegisterOutputType(DigestOutput{})
	pulumi.RegisterOutputType(DigestArrayOutput{})
	pulumi.RegisterOutputType(DigestResponseOutput{})
	pulumi.RegisterOutputType(DigestResponseArrayOutput{})
	pulumi.RegisterOutputType(DiscoveredOutput{})
	pulumi.RegisterOutputType(DiscoveredPtrOutput{})
	pulumi.RegisterOutputType(DiscoveredResponseOutput{})
	pulumi.RegisterOutputType(DiscoveryOutput{})
	pulumi.RegisterOutputType(DiscoveryPtrOutput{})
	pulumi.RegisterOutputType(DiscoveryResponseOutput{})
	pulumi.RegisterOutputType(DistributionOutput{})
	pulumi.RegisterOutputType(DistributionArrayOutput{})
	pulumi.RegisterOutputType(DistributionResponseOutput{})
	pulumi.RegisterOutputType(DistributionResponseArrayOutput{})
	pulumi.RegisterOutputType(DocumentNoteOutput{})
	pulumi.RegisterOutputType(DocumentNotePtrOutput{})
	pulumi.RegisterOutputType(DocumentNoteResponseOutput{})
	pulumi.RegisterOutputType(DocumentOccurrenceOutput{})
	pulumi.RegisterOutputType(DocumentOccurrencePtrOutput{})
	pulumi.RegisterOutputType(DocumentOccurrenceResponseOutput{})
	pulumi.RegisterOutputType(EnvelopeOutput{})
	pulumi.RegisterOutputType(EnvelopePtrOutput{})
	pulumi.RegisterOutputType(EnvelopeResponseOutput{})
	pulumi.RegisterOutputType(EnvelopeSignatureOutput{})
	pulumi.RegisterOutputType(EnvelopeSignatureArrayOutput{})
	pulumi.RegisterOutputType(EnvelopeSignatureResponseOutput{})
	pulumi.RegisterOutputType(EnvelopeSignatureResponseArrayOutput{})
	pulumi.RegisterOutputType(EnvironmentOutput{})
	pulumi.RegisterOutputType(EnvironmentPtrOutput{})
	pulumi.RegisterOutputType(EnvironmentResponseOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(ExprResponseOutput{})
	pulumi.RegisterOutputType(ExternalRefOutput{})
	pulumi.RegisterOutputType(ExternalRefArrayOutput{})
	pulumi.RegisterOutputType(ExternalRefResponseOutput{})
	pulumi.RegisterOutputType(ExternalRefResponseArrayOutput{})
	pulumi.RegisterOutputType(FileHashesOutput{})
	pulumi.RegisterOutputType(FileHashesPtrOutput{})
	pulumi.RegisterOutputType(FileHashesResponseOutput{})
	pulumi.RegisterOutputType(FileNoteOutput{})
	pulumi.RegisterOutputType(FileNotePtrOutput{})
	pulumi.RegisterOutputType(FileNoteResponseOutput{})
	pulumi.RegisterOutputType(FileOccurrenceOutput{})
	pulumi.RegisterOutputType(FileOccurrencePtrOutput{})
	pulumi.RegisterOutputType(FileOccurrenceResponseOutput{})
	pulumi.RegisterOutputType(FingerprintOutput{})
	pulumi.RegisterOutputType(FingerprintPtrOutput{})
	pulumi.RegisterOutputType(FingerprintResponseOutput{})
	pulumi.RegisterOutputType(GenericSignedAttestationOutput{})
	pulumi.RegisterOutputType(GenericSignedAttestationPtrOutput{})
	pulumi.RegisterOutputType(GenericSignedAttestationResponseOutput{})
	pulumi.RegisterOutputType(GerritSourceContextOutput{})
	pulumi.RegisterOutputType(GerritSourceContextPtrOutput{})
	pulumi.RegisterOutputType(GerritSourceContextResponseOutput{})
	pulumi.RegisterOutputType(GitSourceContextOutput{})
	pulumi.RegisterOutputType(GitSourceContextPtrOutput{})
	pulumi.RegisterOutputType(GitSourceContextResponseOutput{})
	pulumi.RegisterOutputType(GrafeasV1beta1BuildDetailsOutput{})
	pulumi.RegisterOutputType(GrafeasV1beta1BuildDetailsPtrOutput{})
	pulumi.RegisterOutputType(GrafeasV1beta1BuildDetailsResponseOutput{})
	pulumi.RegisterOutputType(GrafeasV1beta1DeploymentDetailsOutput{})
	pulumi.RegisterOutputType(GrafeasV1beta1DeploymentDetailsPtrOutput{})
	pulumi.RegisterOutputType(GrafeasV1beta1DeploymentDetailsResponseOutput{})
	pulumi.RegisterOutputType(GrafeasV1beta1DiscoveryDetailsOutput{})
	pulumi.RegisterOutputType(GrafeasV1beta1DiscoveryDetailsPtrOutput{})
	pulumi.RegisterOutputType(GrafeasV1beta1DiscoveryDetailsResponseOutput{})
	pulumi.RegisterOutputType(GrafeasV1beta1ImageDetailsOutput{})
	pulumi.RegisterOutputType(GrafeasV1beta1ImageDetailsPtrOutput{})
	pulumi.RegisterOutputType(GrafeasV1beta1ImageDetailsResponseOutput{})
	pulumi.RegisterOutputType(GrafeasV1beta1IntotoArtifactOutput{})
	pulumi.RegisterOutputType(GrafeasV1beta1IntotoArtifactArrayOutput{})
	pulumi.RegisterOutputType(GrafeasV1beta1IntotoArtifactResponseOutput{})
	pulumi.RegisterOutputType(GrafeasV1beta1IntotoArtifactResponseArrayOutput{})
	pulumi.RegisterOutputType(GrafeasV1beta1IntotoDetailsOutput{})
	pulumi.RegisterOutputType(GrafeasV1beta1IntotoDetailsPtrOutput{})
	pulumi.RegisterOutputType(GrafeasV1beta1IntotoDetailsResponseOutput{})
	pulumi.RegisterOutputType(GrafeasV1beta1IntotoSignatureOutput{})
	pulumi.RegisterOutputType(GrafeasV1beta1IntotoSignatureArrayOutput{})
	pulumi.RegisterOutputType(GrafeasV1beta1IntotoSignatureResponseOutput{})
	pulumi.RegisterOutputType(GrafeasV1beta1IntotoSignatureResponseArrayOutput{})
	pulumi.RegisterOutputType(GrafeasV1beta1PackageDetailsOutput{})
	pulumi.RegisterOutputType(GrafeasV1beta1PackageDetailsPtrOutput{})
	pulumi.RegisterOutputType(GrafeasV1beta1PackageDetailsResponseOutput{})
	pulumi.RegisterOutputType(GrafeasV1beta1VulnerabilityDetailsOutput{})
	pulumi.RegisterOutputType(GrafeasV1beta1VulnerabilityDetailsPtrOutput{})
	pulumi.RegisterOutputType(GrafeasV1beta1VulnerabilityDetailsResponseOutput{})
	pulumi.RegisterOutputType(HashOutput{})
	pulumi.RegisterOutputType(HashPtrOutput{})
	pulumi.RegisterOutputType(HashArrayOutput{})
	pulumi.RegisterOutputType(HashResponseOutput{})
	pulumi.RegisterOutputType(HashResponseArrayOutput{})
	pulumi.RegisterOutputType(HintOutput{})
	pulumi.RegisterOutputType(HintPtrOutput{})
	pulumi.RegisterOutputType(HintResponseOutput{})
	pulumi.RegisterOutputType(InTotoOutput{})
	pulumi.RegisterOutputType(InTotoPtrOutput{})
	pulumi.RegisterOutputType(InTotoResponseOutput{})
	pulumi.RegisterOutputType(InTotoSlsaProvenanceV1Output{})
	pulumi.RegisterOutputType(InTotoSlsaProvenanceV1PtrOutput{})
	pulumi.RegisterOutputType(InTotoSlsaProvenanceV1ResponseOutput{})
	pulumi.RegisterOutputType(InstallationOutput{})
	pulumi.RegisterOutputType(InstallationPtrOutput{})
	pulumi.RegisterOutputType(InstallationResponseOutput{})
	pulumi.RegisterOutputType(JustificationOutput{})
	pulumi.RegisterOutputType(JustificationPtrOutput{})
	pulumi.RegisterOutputType(JustificationResponseOutput{})
	pulumi.RegisterOutputType(KnowledgeBaseOutput{})
	pulumi.RegisterOutputType(KnowledgeBaseArrayOutput{})
	pulumi.RegisterOutputType(KnowledgeBaseResponseOutput{})
	pulumi.RegisterOutputType(KnowledgeBaseResponseArrayOutput{})
	pulumi.RegisterOutputType(LayerOutput{})
	pulumi.RegisterOutputType(LayerArrayOutput{})
	pulumi.RegisterOutputType(LayerResponseOutput{})
	pulumi.RegisterOutputType(LayerResponseArrayOutput{})
	pulumi.RegisterOutputType(LicenseOutput{})
	pulumi.RegisterOutputType(LicensePtrOutput{})
	pulumi.RegisterOutputType(LicenseResponseOutput{})
	pulumi.RegisterOutputType(LinkOutput{})
	pulumi.RegisterOutputType(LinkPtrOutput{})
	pulumi.RegisterOutputType(LinkResponseOutput{})
	pulumi.RegisterOutputType(LocationOutput{})
	pulumi.RegisterOutputType(LocationArrayOutput{})
	pulumi.RegisterOutputType(LocationResponseOutput{})
	pulumi.RegisterOutputType(LocationResponseArrayOutput{})
	pulumi.RegisterOutputType(PackageOutput{})
	pulumi.RegisterOutputType(PackagePtrOutput{})
	pulumi.RegisterOutputType(PackageInfoNoteOutput{})
	pulumi.RegisterOutputType(PackageInfoNotePtrOutput{})
	pulumi.RegisterOutputType(PackageInfoNoteResponseOutput{})
	pulumi.RegisterOutputType(PackageInfoOccurrenceOutput{})
	pulumi.RegisterOutputType(PackageInfoOccurrencePtrOutput{})
	pulumi.RegisterOutputType(PackageInfoOccurrenceResponseOutput{})
	pulumi.RegisterOutputType(PackageIssueOutput{})
	pulumi.RegisterOutputType(PackageIssueArrayOutput{})
	pulumi.RegisterOutputType(PackageIssueResponseOutput{})
	pulumi.RegisterOutputType(PackageIssueResponseArrayOutput{})
	pulumi.RegisterOutputType(PackageResponseOutput{})
	pulumi.RegisterOutputType(PgpSignedAttestationOutput{})
	pulumi.RegisterOutputType(PgpSignedAttestationPtrOutput{})
	pulumi.RegisterOutputType(PgpSignedAttestationResponseOutput{})
	pulumi.RegisterOutputType(ProductOutput{})
	pulumi.RegisterOutputType(ProductPtrOutput{})
	pulumi.RegisterOutputType(ProductResponseOutput{})
	pulumi.RegisterOutputType(ProjectRepoIdOutput{})
	pulumi.RegisterOutputType(ProjectRepoIdPtrOutput{})
	pulumi.RegisterOutputType(ProjectRepoIdResponseOutput{})
	pulumi.RegisterOutputType(ProvenanceBuilderOutput{})
	pulumi.RegisterOutputType(ProvenanceBuilderPtrOutput{})
	pulumi.RegisterOutputType(ProvenanceBuilderResponseOutput{})
	pulumi.RegisterOutputType(PublisherOutput{})
	pulumi.RegisterOutputType(PublisherPtrOutput{})
	pulumi.RegisterOutputType(PublisherResponseOutput{})
	pulumi.RegisterOutputType(RelatedUrlOutput{})
	pulumi.RegisterOutputType(RelatedUrlPtrOutput{})
	pulumi.RegisterOutputType(RelatedUrlArrayOutput{})
	pulumi.RegisterOutputType(RelatedUrlResponseOutput{})
	pulumi.RegisterOutputType(RelatedUrlResponseArrayOutput{})
	pulumi.RegisterOutputType(RelationshipNoteOutput{})
	pulumi.RegisterOutputType(RelationshipNotePtrOutput{})
	pulumi.RegisterOutputType(RelationshipNoteResponseOutput{})
	pulumi.RegisterOutputType(RelationshipOccurrenceOutput{})
	pulumi.RegisterOutputType(RelationshipOccurrencePtrOutput{})
	pulumi.RegisterOutputType(RelationshipOccurrenceResponseOutput{})
	pulumi.RegisterOutputType(RemediationOutput{})
	pulumi.RegisterOutputType(RemediationArrayOutput{})
	pulumi.RegisterOutputType(RemediationResponseOutput{})
	pulumi.RegisterOutputType(RemediationResponseArrayOutput{})
	pulumi.RegisterOutputType(RepoIdOutput{})
	pulumi.RegisterOutputType(RepoIdPtrOutput{})
	pulumi.RegisterOutputType(RepoIdResponseOutput{})
	pulumi.RegisterOutputType(ResourceOutput{})
	pulumi.RegisterOutputType(ResourceDescriptorOutput{})
	pulumi.RegisterOutputType(ResourceDescriptorArrayOutput{})
	pulumi.RegisterOutputType(ResourceDescriptorResponseOutput{})
	pulumi.RegisterOutputType(ResourceDescriptorResponseArrayOutput{})
	pulumi.RegisterOutputType(ResourceResponseOutput{})
	pulumi.RegisterOutputType(RunDetailsOutput{})
	pulumi.RegisterOutputType(RunDetailsPtrOutput{})
	pulumi.RegisterOutputType(RunDetailsResponseOutput{})
	pulumi.RegisterOutputType(SBOMReferenceNoteOutput{})
	pulumi.RegisterOutputType(SBOMReferenceNotePtrOutput{})
	pulumi.RegisterOutputType(SBOMReferenceNoteResponseOutput{})
	pulumi.RegisterOutputType(SBOMReferenceOccurrenceOutput{})
	pulumi.RegisterOutputType(SBOMReferenceOccurrencePtrOutput{})
	pulumi.RegisterOutputType(SBOMReferenceOccurrenceResponseOutput{})
	pulumi.RegisterOutputType(SBOMStatusOutput{})
	pulumi.RegisterOutputType(SBOMStatusPtrOutput{})
	pulumi.RegisterOutputType(SBOMStatusResponseOutput{})
	pulumi.RegisterOutputType(SbomReferenceIntotoPayloadOutput{})
	pulumi.RegisterOutputType(SbomReferenceIntotoPayloadPtrOutput{})
	pulumi.RegisterOutputType(SbomReferenceIntotoPayloadResponseOutput{})
	pulumi.RegisterOutputType(SbomReferenceIntotoPredicateOutput{})
	pulumi.RegisterOutputType(SbomReferenceIntotoPredicatePtrOutput{})
	pulumi.RegisterOutputType(SbomReferenceIntotoPredicateResponseOutput{})
	pulumi.RegisterOutputType(SignatureOutput{})
	pulumi.RegisterOutputType(SignatureArrayOutput{})
	pulumi.RegisterOutputType(SignatureResponseOutput{})
	pulumi.RegisterOutputType(SignatureResponseArrayOutput{})
	pulumi.RegisterOutputType(SigningKeyOutput{})
	pulumi.RegisterOutputType(SigningKeyArrayOutput{})
	pulumi.RegisterOutputType(SigningKeyResponseOutput{})
	pulumi.RegisterOutputType(SigningKeyResponseArrayOutput{})
	pulumi.RegisterOutputType(SlsaProvenanceV1Output{})
	pulumi.RegisterOutputType(SlsaProvenanceV1PtrOutput{})
	pulumi.RegisterOutputType(SlsaProvenanceV1ResponseOutput{})
	pulumi.RegisterOutputType(SourceOutput{})
	pulumi.RegisterOutputType(SourcePtrOutput{})
	pulumi.RegisterOutputType(SourceContextOutput{})
	pulumi.RegisterOutputType(SourceContextPtrOutput{})
	pulumi.RegisterOutputType(SourceContextArrayOutput{})
	pulumi.RegisterOutputType(SourceContextResponseOutput{})
	pulumi.RegisterOutputType(SourceContextResponseArrayOutput{})
	pulumi.RegisterOutputType(SourceResponseOutput{})
	pulumi.RegisterOutputType(StatusOutput{})
	pulumi.RegisterOutputType(StatusPtrOutput{})
	pulumi.RegisterOutputType(StatusArrayOutput{})
	pulumi.RegisterOutputType(StatusResponseOutput{})
	pulumi.RegisterOutputType(StatusResponseArrayOutput{})
	pulumi.RegisterOutputType(SubjectOutput{})
	pulumi.RegisterOutputType(SubjectArrayOutput{})
	pulumi.RegisterOutputType(SubjectResponseOutput{})
	pulumi.RegisterOutputType(SubjectResponseArrayOutput{})
	pulumi.RegisterOutputType(VersionOutput{})
	pulumi.RegisterOutputType(VersionPtrOutput{})
	pulumi.RegisterOutputType(VersionResponseOutput{})
	pulumi.RegisterOutputType(VexAssessmentOutput{})
	pulumi.RegisterOutputType(VexAssessmentPtrOutput{})
	pulumi.RegisterOutputType(VexAssessmentResponseOutput{})
	pulumi.RegisterOutputType(VulnerabilityOutput{})
	pulumi.RegisterOutputType(VulnerabilityPtrOutput{})
	pulumi.RegisterOutputType(VulnerabilityAssessmentNoteOutput{})
	pulumi.RegisterOutputType(VulnerabilityAssessmentNotePtrOutput{})
	pulumi.RegisterOutputType(VulnerabilityAssessmentNoteResponseOutput{})
	pulumi.RegisterOutputType(VulnerabilityLocationOutput{})
	pulumi.RegisterOutputType(VulnerabilityLocationPtrOutput{})
	pulumi.RegisterOutputType(VulnerabilityLocationResponseOutput{})
	pulumi.RegisterOutputType(VulnerabilityResponseOutput{})
	pulumi.RegisterOutputType(WindowsDetailOutput{})
	pulumi.RegisterOutputType(WindowsDetailArrayOutput{})
	pulumi.RegisterOutputType(WindowsDetailResponseOutput{})
	pulumi.RegisterOutputType(WindowsDetailResponseArrayOutput{})
}
