// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new occurrence.
// Auto-naming is currently not supported for this resource.
type Occurrence struct {
	pulumi.CustomResourceState

	// Describes an attestation of an artifact.
	Attestation DetailsResponseOutput `pulumi:"attestation"`
	// Describes a verifiable build.
	Build GrafeasV1beta1BuildDetailsResponseOutput `pulumi:"build"`
	// The time this occurrence was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Describes the deployment of an artifact on a runtime.
	Deployment GrafeasV1beta1DeploymentDetailsResponseOutput `pulumi:"deployment"`
	// Describes how this resource derives from the basis in the associated note.
	DerivedImage GrafeasV1beta1ImageDetailsResponseOutput `pulumi:"derivedImage"`
	// Describes when a resource was discovered.
	Discovered GrafeasV1beta1DiscoveryDetailsResponseOutput `pulumi:"discovered"`
	// https://github.com/secure-systems-lab/dsse
	Envelope EnvelopeResponseOutput `pulumi:"envelope"`
	// Describes the installation of a package on the linked resource.
	Installation GrafeasV1beta1PackageDetailsResponseOutput `pulumi:"installation"`
	// Describes a specific in-toto link.
	Intoto GrafeasV1beta1IntotoDetailsResponseOutput `pulumi:"intoto"`
	// This explicitly denotes which of the occurrence details are specified. This field can be used as a filter in list requests.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// The name of the occurrence in the form of `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
	Name pulumi.StringOutput `pulumi:"name"`
	// Immutable. The analysis note associated with this occurrence, in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`. This field can be used as a filter in list requests.
	NoteName pulumi.StringOutput `pulumi:"noteName"`
	Project  pulumi.StringOutput `pulumi:"project"`
	// A description of actions that can be taken to remedy the note.
	Remediation pulumi.StringOutput `pulumi:"remediation"`
	// Immutable. The resource for which the occurrence applies.
	Resource ResourceResponseOutput `pulumi:"resource"`
	// Describes a specific software bill of materials document.
	Sbom DocumentOccurrenceResponseOutput `pulumi:"sbom"`
	// Describes a specific SBOM reference occurrences.
	SbomReference SBOMReferenceOccurrenceResponseOutput `pulumi:"sbomReference"`
	// Describes a specific SPDX File.
	SpdxFile FileOccurrenceResponseOutput `pulumi:"spdxFile"`
	// Describes a specific SPDX Package.
	SpdxPackage PackageInfoOccurrenceResponseOutput `pulumi:"spdxPackage"`
	// Describes a specific SPDX Relationship.
	SpdxRelationship RelationshipOccurrenceResponseOutput `pulumi:"spdxRelationship"`
	// The time this occurrence was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// Describes a security vulnerability.
	Vulnerability GrafeasV1beta1VulnerabilityDetailsResponseOutput `pulumi:"vulnerability"`
}

// NewOccurrence registers a new resource with the given unique name, arguments, and options.
func NewOccurrence(ctx *pulumi.Context,
	name string, args *OccurrenceArgs, opts ...pulumi.ResourceOption) (*Occurrence, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NoteName == nil {
		return nil, errors.New("invalid value for required argument 'NoteName'")
	}
	if args.Resource == nil {
		return nil, errors.New("invalid value for required argument 'Resource'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Occurrence
	err := ctx.RegisterResource("google-native:containeranalysis/v1beta1:Occurrence", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOccurrence gets an existing Occurrence resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOccurrence(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OccurrenceState, opts ...pulumi.ResourceOption) (*Occurrence, error) {
	var resource Occurrence
	err := ctx.ReadResource("google-native:containeranalysis/v1beta1:Occurrence", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Occurrence resources.
type occurrenceState struct {
}

type OccurrenceState struct {
}

func (OccurrenceState) ElementType() reflect.Type {
	return reflect.TypeOf((*occurrenceState)(nil)).Elem()
}

type occurrenceArgs struct {
	// Describes an attestation of an artifact.
	Attestation *Details `pulumi:"attestation"`
	// Describes a verifiable build.
	Build *GrafeasV1beta1BuildDetails `pulumi:"build"`
	// Describes the deployment of an artifact on a runtime.
	Deployment *GrafeasV1beta1DeploymentDetails `pulumi:"deployment"`
	// Describes how this resource derives from the basis in the associated note.
	DerivedImage *GrafeasV1beta1ImageDetails `pulumi:"derivedImage"`
	// Describes when a resource was discovered.
	Discovered *GrafeasV1beta1DiscoveryDetails `pulumi:"discovered"`
	// https://github.com/secure-systems-lab/dsse
	Envelope *Envelope `pulumi:"envelope"`
	// Describes the installation of a package on the linked resource.
	Installation *GrafeasV1beta1PackageDetails `pulumi:"installation"`
	// Describes a specific in-toto link.
	Intoto *GrafeasV1beta1IntotoDetails `pulumi:"intoto"`
	// Immutable. The analysis note associated with this occurrence, in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`. This field can be used as a filter in list requests.
	NoteName string  `pulumi:"noteName"`
	Project  *string `pulumi:"project"`
	// A description of actions that can be taken to remedy the note.
	Remediation *string `pulumi:"remediation"`
	// Immutable. The resource for which the occurrence applies.
	Resource Resource `pulumi:"resource"`
	// Describes a specific software bill of materials document.
	Sbom *DocumentOccurrence `pulumi:"sbom"`
	// Describes a specific SBOM reference occurrences.
	SbomReference *SBOMReferenceOccurrence `pulumi:"sbomReference"`
	// Describes a specific SPDX File.
	SpdxFile *FileOccurrence `pulumi:"spdxFile"`
	// Describes a specific SPDX Package.
	SpdxPackage *PackageInfoOccurrence `pulumi:"spdxPackage"`
	// Describes a specific SPDX Relationship.
	SpdxRelationship *RelationshipOccurrence `pulumi:"spdxRelationship"`
	// Describes a security vulnerability.
	Vulnerability *GrafeasV1beta1VulnerabilityDetails `pulumi:"vulnerability"`
}

// The set of arguments for constructing a Occurrence resource.
type OccurrenceArgs struct {
	// Describes an attestation of an artifact.
	Attestation DetailsPtrInput
	// Describes a verifiable build.
	Build GrafeasV1beta1BuildDetailsPtrInput
	// Describes the deployment of an artifact on a runtime.
	Deployment GrafeasV1beta1DeploymentDetailsPtrInput
	// Describes how this resource derives from the basis in the associated note.
	DerivedImage GrafeasV1beta1ImageDetailsPtrInput
	// Describes when a resource was discovered.
	Discovered GrafeasV1beta1DiscoveryDetailsPtrInput
	// https://github.com/secure-systems-lab/dsse
	Envelope EnvelopePtrInput
	// Describes the installation of a package on the linked resource.
	Installation GrafeasV1beta1PackageDetailsPtrInput
	// Describes a specific in-toto link.
	Intoto GrafeasV1beta1IntotoDetailsPtrInput
	// Immutable. The analysis note associated with this occurrence, in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`. This field can be used as a filter in list requests.
	NoteName pulumi.StringInput
	Project  pulumi.StringPtrInput
	// A description of actions that can be taken to remedy the note.
	Remediation pulumi.StringPtrInput
	// Immutable. The resource for which the occurrence applies.
	Resource ResourceInput
	// Describes a specific software bill of materials document.
	Sbom DocumentOccurrencePtrInput
	// Describes a specific SBOM reference occurrences.
	SbomReference SBOMReferenceOccurrencePtrInput
	// Describes a specific SPDX File.
	SpdxFile FileOccurrencePtrInput
	// Describes a specific SPDX Package.
	SpdxPackage PackageInfoOccurrencePtrInput
	// Describes a specific SPDX Relationship.
	SpdxRelationship RelationshipOccurrencePtrInput
	// Describes a security vulnerability.
	Vulnerability GrafeasV1beta1VulnerabilityDetailsPtrInput
}

func (OccurrenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*occurrenceArgs)(nil)).Elem()
}

type OccurrenceInput interface {
	pulumi.Input

	ToOccurrenceOutput() OccurrenceOutput
	ToOccurrenceOutputWithContext(ctx context.Context) OccurrenceOutput
}

func (*Occurrence) ElementType() reflect.Type {
	return reflect.TypeOf((**Occurrence)(nil)).Elem()
}

func (i *Occurrence) ToOccurrenceOutput() OccurrenceOutput {
	return i.ToOccurrenceOutputWithContext(context.Background())
}

func (i *Occurrence) ToOccurrenceOutputWithContext(ctx context.Context) OccurrenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OccurrenceOutput)
}

type OccurrenceOutput struct{ *pulumi.OutputState }

func (OccurrenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Occurrence)(nil)).Elem()
}

func (o OccurrenceOutput) ToOccurrenceOutput() OccurrenceOutput {
	return o
}

func (o OccurrenceOutput) ToOccurrenceOutputWithContext(ctx context.Context) OccurrenceOutput {
	return o
}

// Describes an attestation of an artifact.
func (o OccurrenceOutput) Attestation() DetailsResponseOutput {
	return o.ApplyT(func(v *Occurrence) DetailsResponseOutput { return v.Attestation }).(DetailsResponseOutput)
}

// Describes a verifiable build.
func (o OccurrenceOutput) Build() GrafeasV1beta1BuildDetailsResponseOutput {
	return o.ApplyT(func(v *Occurrence) GrafeasV1beta1BuildDetailsResponseOutput { return v.Build }).(GrafeasV1beta1BuildDetailsResponseOutput)
}

// The time this occurrence was created.
func (o OccurrenceOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Occurrence) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Describes the deployment of an artifact on a runtime.
func (o OccurrenceOutput) Deployment() GrafeasV1beta1DeploymentDetailsResponseOutput {
	return o.ApplyT(func(v *Occurrence) GrafeasV1beta1DeploymentDetailsResponseOutput { return v.Deployment }).(GrafeasV1beta1DeploymentDetailsResponseOutput)
}

// Describes how this resource derives from the basis in the associated note.
func (o OccurrenceOutput) DerivedImage() GrafeasV1beta1ImageDetailsResponseOutput {
	return o.ApplyT(func(v *Occurrence) GrafeasV1beta1ImageDetailsResponseOutput { return v.DerivedImage }).(GrafeasV1beta1ImageDetailsResponseOutput)
}

// Describes when a resource was discovered.
func (o OccurrenceOutput) Discovered() GrafeasV1beta1DiscoveryDetailsResponseOutput {
	return o.ApplyT(func(v *Occurrence) GrafeasV1beta1DiscoveryDetailsResponseOutput { return v.Discovered }).(GrafeasV1beta1DiscoveryDetailsResponseOutput)
}

// https://github.com/secure-systems-lab/dsse
func (o OccurrenceOutput) Envelope() EnvelopeResponseOutput {
	return o.ApplyT(func(v *Occurrence) EnvelopeResponseOutput { return v.Envelope }).(EnvelopeResponseOutput)
}

// Describes the installation of a package on the linked resource.
func (o OccurrenceOutput) Installation() GrafeasV1beta1PackageDetailsResponseOutput {
	return o.ApplyT(func(v *Occurrence) GrafeasV1beta1PackageDetailsResponseOutput { return v.Installation }).(GrafeasV1beta1PackageDetailsResponseOutput)
}

// Describes a specific in-toto link.
func (o OccurrenceOutput) Intoto() GrafeasV1beta1IntotoDetailsResponseOutput {
	return o.ApplyT(func(v *Occurrence) GrafeasV1beta1IntotoDetailsResponseOutput { return v.Intoto }).(GrafeasV1beta1IntotoDetailsResponseOutput)
}

// This explicitly denotes which of the occurrence details are specified. This field can be used as a filter in list requests.
func (o OccurrenceOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *Occurrence) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// The name of the occurrence in the form of `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
func (o OccurrenceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Occurrence) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Immutable. The analysis note associated with this occurrence, in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`. This field can be used as a filter in list requests.
func (o OccurrenceOutput) NoteName() pulumi.StringOutput {
	return o.ApplyT(func(v *Occurrence) pulumi.StringOutput { return v.NoteName }).(pulumi.StringOutput)
}

func (o OccurrenceOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Occurrence) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// A description of actions that can be taken to remedy the note.
func (o OccurrenceOutput) Remediation() pulumi.StringOutput {
	return o.ApplyT(func(v *Occurrence) pulumi.StringOutput { return v.Remediation }).(pulumi.StringOutput)
}

// Immutable. The resource for which the occurrence applies.
func (o OccurrenceOutput) Resource() ResourceResponseOutput {
	return o.ApplyT(func(v *Occurrence) ResourceResponseOutput { return v.Resource }).(ResourceResponseOutput)
}

// Describes a specific software bill of materials document.
func (o OccurrenceOutput) Sbom() DocumentOccurrenceResponseOutput {
	return o.ApplyT(func(v *Occurrence) DocumentOccurrenceResponseOutput { return v.Sbom }).(DocumentOccurrenceResponseOutput)
}

// Describes a specific SBOM reference occurrences.
func (o OccurrenceOutput) SbomReference() SBOMReferenceOccurrenceResponseOutput {
	return o.ApplyT(func(v *Occurrence) SBOMReferenceOccurrenceResponseOutput { return v.SbomReference }).(SBOMReferenceOccurrenceResponseOutput)
}

// Describes a specific SPDX File.
func (o OccurrenceOutput) SpdxFile() FileOccurrenceResponseOutput {
	return o.ApplyT(func(v *Occurrence) FileOccurrenceResponseOutput { return v.SpdxFile }).(FileOccurrenceResponseOutput)
}

// Describes a specific SPDX Package.
func (o OccurrenceOutput) SpdxPackage() PackageInfoOccurrenceResponseOutput {
	return o.ApplyT(func(v *Occurrence) PackageInfoOccurrenceResponseOutput { return v.SpdxPackage }).(PackageInfoOccurrenceResponseOutput)
}

// Describes a specific SPDX Relationship.
func (o OccurrenceOutput) SpdxRelationship() RelationshipOccurrenceResponseOutput {
	return o.ApplyT(func(v *Occurrence) RelationshipOccurrenceResponseOutput { return v.SpdxRelationship }).(RelationshipOccurrenceResponseOutput)
}

// The time this occurrence was last updated.
func (o OccurrenceOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Occurrence) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// Describes a security vulnerability.
func (o OccurrenceOutput) Vulnerability() GrafeasV1beta1VulnerabilityDetailsResponseOutput {
	return o.ApplyT(func(v *Occurrence) GrafeasV1beta1VulnerabilityDetailsResponseOutput { return v.Vulnerability }).(GrafeasV1beta1VulnerabilityDetailsResponseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OccurrenceInput)(nil)).Elem(), &Occurrence{})
	pulumi.RegisterOutputType(OccurrenceOutput{})
}
