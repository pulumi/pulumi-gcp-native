// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new occurrence.
type Occurrence struct {
	pulumi.CustomResourceState

	// Describes an attestation of an artifact.
	Attestation DetailsResponseOutput `pulumi:"attestation"`
	// Describes a verifiable build.
	Build GrafeasV1beta1BuildDetailsResponseOutput `pulumi:"build"`
	// The time this occurrence was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Describes the deployment of an artifact on a runtime.
	Deployment GrafeasV1beta1DeploymentDetailsResponseOutput `pulumi:"deployment"`
	// Describes how this resource derives from the basis in the associated note.
	DerivedImage GrafeasV1beta1ImageDetailsResponseOutput `pulumi:"derivedImage"`
	// Describes when a resource was discovered.
	Discovered GrafeasV1beta1DiscoveryDetailsResponseOutput `pulumi:"discovered"`
	// Describes the installation of a package on the linked resource.
	Installation GrafeasV1beta1PackageDetailsResponseOutput `pulumi:"installation"`
	// Describes a specific in-toto link.
	Intoto GrafeasV1beta1IntotoDetailsResponseOutput `pulumi:"intoto"`
	// This explicitly denotes which of the occurrence details are specified. This field can be used as a filter in list requests.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// The name of the occurrence in the form of `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
	Name pulumi.StringOutput `pulumi:"name"`
	// Immutable. The analysis note associated with this occurrence, in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`. This field can be used as a filter in list requests.
	NoteName pulumi.StringOutput `pulumi:"noteName"`
	// A description of actions that can be taken to remedy the note.
	Remediation pulumi.StringOutput `pulumi:"remediation"`
	// Immutable. The resource for which the occurrence applies.
	Resource ResourceResponseOutput `pulumi:"resource"`
	// The time this occurrence was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// Describes a security vulnerability.
	Vulnerability GrafeasV1beta1VulnerabilityDetailsResponseOutput `pulumi:"vulnerability"`
}

// NewOccurrence registers a new resource with the given unique name, arguments, and options.
func NewOccurrence(ctx *pulumi.Context,
	name string, args *OccurrenceArgs, opts ...pulumi.ResourceOption) (*Occurrence, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NoteName == nil {
		return nil, errors.New("invalid value for required argument 'NoteName'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.Resource == nil {
		return nil, errors.New("invalid value for required argument 'Resource'")
	}
	var resource Occurrence
	err := ctx.RegisterResource("google-native:containeranalysis/v1beta1:Occurrence", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOccurrence gets an existing Occurrence resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOccurrence(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OccurrenceState, opts ...pulumi.ResourceOption) (*Occurrence, error) {
	var resource Occurrence
	err := ctx.ReadResource("google-native:containeranalysis/v1beta1:Occurrence", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Occurrence resources.
type occurrenceState struct {
	// Describes an attestation of an artifact.
	Attestation *DetailsResponse `pulumi:"attestation"`
	// Describes a verifiable build.
	Build *GrafeasV1beta1BuildDetailsResponse `pulumi:"build"`
	// The time this occurrence was created.
	CreateTime *string `pulumi:"createTime"`
	// Describes the deployment of an artifact on a runtime.
	Deployment *GrafeasV1beta1DeploymentDetailsResponse `pulumi:"deployment"`
	// Describes how this resource derives from the basis in the associated note.
	DerivedImage *GrafeasV1beta1ImageDetailsResponse `pulumi:"derivedImage"`
	// Describes when a resource was discovered.
	Discovered *GrafeasV1beta1DiscoveryDetailsResponse `pulumi:"discovered"`
	// Describes the installation of a package on the linked resource.
	Installation *GrafeasV1beta1PackageDetailsResponse `pulumi:"installation"`
	// Describes a specific in-toto link.
	Intoto *GrafeasV1beta1IntotoDetailsResponse `pulumi:"intoto"`
	// This explicitly denotes which of the occurrence details are specified. This field can be used as a filter in list requests.
	Kind *string `pulumi:"kind"`
	// The name of the occurrence in the form of `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
	Name *string `pulumi:"name"`
	// Immutable. The analysis note associated with this occurrence, in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`. This field can be used as a filter in list requests.
	NoteName *string `pulumi:"noteName"`
	// A description of actions that can be taken to remedy the note.
	Remediation *string `pulumi:"remediation"`
	// Immutable. The resource for which the occurrence applies.
	Resource *ResourceResponse `pulumi:"resource"`
	// The time this occurrence was last updated.
	UpdateTime *string `pulumi:"updateTime"`
	// Describes a security vulnerability.
	Vulnerability *GrafeasV1beta1VulnerabilityDetailsResponse `pulumi:"vulnerability"`
}

type OccurrenceState struct {
	// Describes an attestation of an artifact.
	Attestation DetailsResponsePtrInput
	// Describes a verifiable build.
	Build GrafeasV1beta1BuildDetailsResponsePtrInput
	// The time this occurrence was created.
	CreateTime pulumi.StringPtrInput
	// Describes the deployment of an artifact on a runtime.
	Deployment GrafeasV1beta1DeploymentDetailsResponsePtrInput
	// Describes how this resource derives from the basis in the associated note.
	DerivedImage GrafeasV1beta1ImageDetailsResponsePtrInput
	// Describes when a resource was discovered.
	Discovered GrafeasV1beta1DiscoveryDetailsResponsePtrInput
	// Describes the installation of a package on the linked resource.
	Installation GrafeasV1beta1PackageDetailsResponsePtrInput
	// Describes a specific in-toto link.
	Intoto GrafeasV1beta1IntotoDetailsResponsePtrInput
	// This explicitly denotes which of the occurrence details are specified. This field can be used as a filter in list requests.
	Kind pulumi.StringPtrInput
	// The name of the occurrence in the form of `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
	Name pulumi.StringPtrInput
	// Immutable. The analysis note associated with this occurrence, in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`. This field can be used as a filter in list requests.
	NoteName pulumi.StringPtrInput
	// A description of actions that can be taken to remedy the note.
	Remediation pulumi.StringPtrInput
	// Immutable. The resource for which the occurrence applies.
	Resource ResourceResponsePtrInput
	// The time this occurrence was last updated.
	UpdateTime pulumi.StringPtrInput
	// Describes a security vulnerability.
	Vulnerability GrafeasV1beta1VulnerabilityDetailsResponsePtrInput
}

func (OccurrenceState) ElementType() reflect.Type {
	return reflect.TypeOf((*occurrenceState)(nil)).Elem()
}

type occurrenceArgs struct {
	// Describes an attestation of an artifact.
	Attestation *Details `pulumi:"attestation"`
	// Describes a verifiable build.
	Build *GrafeasV1beta1BuildDetails `pulumi:"build"`
	// Describes the deployment of an artifact on a runtime.
	Deployment *GrafeasV1beta1DeploymentDetails `pulumi:"deployment"`
	// Describes how this resource derives from the basis in the associated note.
	DerivedImage *GrafeasV1beta1ImageDetails `pulumi:"derivedImage"`
	// Describes when a resource was discovered.
	Discovered *GrafeasV1beta1DiscoveryDetails `pulumi:"discovered"`
	// Describes the installation of a package on the linked resource.
	Installation *GrafeasV1beta1PackageDetails `pulumi:"installation"`
	// Describes a specific in-toto link.
	Intoto *GrafeasV1beta1IntotoDetails `pulumi:"intoto"`
	// Immutable. The analysis note associated with this occurrence, in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`. This field can be used as a filter in list requests.
	NoteName string `pulumi:"noteName"`
	Project  string `pulumi:"project"`
	// A description of actions that can be taken to remedy the note.
	Remediation *string `pulumi:"remediation"`
	// Immutable. The resource for which the occurrence applies.
	Resource Resource `pulumi:"resource"`
	// Describes a security vulnerability.
	Vulnerability *GrafeasV1beta1VulnerabilityDetails `pulumi:"vulnerability"`
}

// The set of arguments for constructing a Occurrence resource.
type OccurrenceArgs struct {
	// Describes an attestation of an artifact.
	Attestation DetailsPtrInput
	// Describes a verifiable build.
	Build GrafeasV1beta1BuildDetailsPtrInput
	// Describes the deployment of an artifact on a runtime.
	Deployment GrafeasV1beta1DeploymentDetailsPtrInput
	// Describes how this resource derives from the basis in the associated note.
	DerivedImage GrafeasV1beta1ImageDetailsPtrInput
	// Describes when a resource was discovered.
	Discovered GrafeasV1beta1DiscoveryDetailsPtrInput
	// Describes the installation of a package on the linked resource.
	Installation GrafeasV1beta1PackageDetailsPtrInput
	// Describes a specific in-toto link.
	Intoto GrafeasV1beta1IntotoDetailsPtrInput
	// Immutable. The analysis note associated with this occurrence, in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`. This field can be used as a filter in list requests.
	NoteName pulumi.StringInput
	Project  pulumi.StringInput
	// A description of actions that can be taken to remedy the note.
	Remediation pulumi.StringPtrInput
	// Immutable. The resource for which the occurrence applies.
	Resource ResourceInput
	// Describes a security vulnerability.
	Vulnerability GrafeasV1beta1VulnerabilityDetailsPtrInput
}

func (OccurrenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*occurrenceArgs)(nil)).Elem()
}

type OccurrenceInput interface {
	pulumi.Input

	ToOccurrenceOutput() OccurrenceOutput
	ToOccurrenceOutputWithContext(ctx context.Context) OccurrenceOutput
}

func (*Occurrence) ElementType() reflect.Type {
	return reflect.TypeOf((*Occurrence)(nil))
}

func (i *Occurrence) ToOccurrenceOutput() OccurrenceOutput {
	return i.ToOccurrenceOutputWithContext(context.Background())
}

func (i *Occurrence) ToOccurrenceOutputWithContext(ctx context.Context) OccurrenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OccurrenceOutput)
}

type OccurrenceOutput struct {
	*pulumi.OutputState
}

func (OccurrenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Occurrence)(nil))
}

func (o OccurrenceOutput) ToOccurrenceOutput() OccurrenceOutput {
	return o
}

func (o OccurrenceOutput) ToOccurrenceOutputWithContext(ctx context.Context) OccurrenceOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(OccurrenceOutput{})
}
