// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The alias kind.
type AliasContextKind string

const (
	// Unknown.
	AliasContextKindKindUnspecified = AliasContextKind("KIND_UNSPECIFIED")
	// Git tag.
	AliasContextKindFixed = AliasContextKind("FIXED")
	// Git branch.
	AliasContextKindMovable = AliasContextKind("MOVABLE")
	// Used to specify non-standard aliases. For example, if a Git repo has a ref named "refs/foo/bar".
	AliasContextKindOther = AliasContextKind("OTHER")
)

func (AliasContextKind) ElementType() reflect.Type {
	return reflect.TypeOf((*AliasContextKind)(nil)).Elem()
}

func (e AliasContextKind) ToAliasContextKindOutput() AliasContextKindOutput {
	return pulumi.ToOutput(e).(AliasContextKindOutput)
}

func (e AliasContextKind) ToAliasContextKindOutputWithContext(ctx context.Context) AliasContextKindOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AliasContextKindOutput)
}

func (e AliasContextKind) ToAliasContextKindPtrOutput() AliasContextKindPtrOutput {
	return e.ToAliasContextKindPtrOutputWithContext(context.Background())
}

func (e AliasContextKind) ToAliasContextKindPtrOutputWithContext(ctx context.Context) AliasContextKindPtrOutput {
	return AliasContextKind(e).ToAliasContextKindOutputWithContext(ctx).ToAliasContextKindPtrOutputWithContext(ctx)
}

func (e AliasContextKind) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AliasContextKind) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AliasContextKind) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AliasContextKind) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AliasContextKindOutput struct{ *pulumi.OutputState }

func (AliasContextKindOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AliasContextKind)(nil)).Elem()
}

func (o AliasContextKindOutput) ToAliasContextKindOutput() AliasContextKindOutput {
	return o
}

func (o AliasContextKindOutput) ToAliasContextKindOutputWithContext(ctx context.Context) AliasContextKindOutput {
	return o
}

func (o AliasContextKindOutput) ToAliasContextKindPtrOutput() AliasContextKindPtrOutput {
	return o.ToAliasContextKindPtrOutputWithContext(context.Background())
}

func (o AliasContextKindOutput) ToAliasContextKindPtrOutputWithContext(ctx context.Context) AliasContextKindPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AliasContextKind) *AliasContextKind {
		return &v
	}).(AliasContextKindPtrOutput)
}

func (o AliasContextKindOutput) ToOutput(ctx context.Context) pulumix.Output[AliasContextKind] {
	return pulumix.Output[AliasContextKind]{
		OutputState: o.OutputState,
	}
}

func (o AliasContextKindOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AliasContextKindOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AliasContextKind) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AliasContextKindOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AliasContextKindOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AliasContextKind) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AliasContextKindPtrOutput struct{ *pulumi.OutputState }

func (AliasContextKindPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AliasContextKind)(nil)).Elem()
}

func (o AliasContextKindPtrOutput) ToAliasContextKindPtrOutput() AliasContextKindPtrOutput {
	return o
}

func (o AliasContextKindPtrOutput) ToAliasContextKindPtrOutputWithContext(ctx context.Context) AliasContextKindPtrOutput {
	return o
}

func (o AliasContextKindPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AliasContextKind] {
	return pulumix.Output[*AliasContextKind]{
		OutputState: o.OutputState,
	}
}

func (o AliasContextKindPtrOutput) Elem() AliasContextKindOutput {
	return o.ApplyT(func(v *AliasContextKind) AliasContextKind {
		if v != nil {
			return *v
		}
		var ret AliasContextKind
		return ret
	}).(AliasContextKindOutput)
}

func (o AliasContextKindPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AliasContextKindPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AliasContextKind) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AliasContextKindInput is an input type that accepts AliasContextKindArgs and AliasContextKindOutput values.
// You can construct a concrete instance of `AliasContextKindInput` via:
//
//	AliasContextKindArgs{...}
type AliasContextKindInput interface {
	pulumi.Input

	ToAliasContextKindOutput() AliasContextKindOutput
	ToAliasContextKindOutputWithContext(context.Context) AliasContextKindOutput
}

var aliasContextKindPtrType = reflect.TypeOf((**AliasContextKind)(nil)).Elem()

type AliasContextKindPtrInput interface {
	pulumi.Input

	ToAliasContextKindPtrOutput() AliasContextKindPtrOutput
	ToAliasContextKindPtrOutputWithContext(context.Context) AliasContextKindPtrOutput
}

type aliasContextKindPtr string

func AliasContextKindPtr(v string) AliasContextKindPtrInput {
	return (*aliasContextKindPtr)(&v)
}

func (*aliasContextKindPtr) ElementType() reflect.Type {
	return aliasContextKindPtrType
}

func (in *aliasContextKindPtr) ToAliasContextKindPtrOutput() AliasContextKindPtrOutput {
	return pulumi.ToOutput(in).(AliasContextKindPtrOutput)
}

func (in *aliasContextKindPtr) ToAliasContextKindPtrOutputWithContext(ctx context.Context) AliasContextKindPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AliasContextKindPtrOutput)
}

func (in *aliasContextKindPtr) ToOutput(ctx context.Context) pulumix.Output[*AliasContextKind] {
	return pulumix.Output[*AliasContextKind]{
		OutputState: in.ToAliasContextKindPtrOutputWithContext(ctx).OutputState,
	}
}

// Provides the state of this Vulnerability assessment.
type AssessmentState string

const (
	// No state is specified.
	AssessmentStateStateUnspecified = AssessmentState("STATE_UNSPECIFIED")
	// This product is known to be affected by this vulnerability.
	AssessmentStateAffected = AssessmentState("AFFECTED")
	// This product is known to be not affected by this vulnerability.
	AssessmentStateNotAffected = AssessmentState("NOT_AFFECTED")
	// This product contains a fix for this vulnerability.
	AssessmentStateFixed = AssessmentState("FIXED")
	// It is not known yet whether these versions are or are not affected by the vulnerability. However, it is still under investigation.
	AssessmentStateUnderInvestigation = AssessmentState("UNDER_INVESTIGATION")
)

func (AssessmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentState)(nil)).Elem()
}

func (e AssessmentState) ToAssessmentStateOutput() AssessmentStateOutput {
	return pulumi.ToOutput(e).(AssessmentStateOutput)
}

func (e AssessmentState) ToAssessmentStateOutputWithContext(ctx context.Context) AssessmentStateOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AssessmentStateOutput)
}

func (e AssessmentState) ToAssessmentStatePtrOutput() AssessmentStatePtrOutput {
	return e.ToAssessmentStatePtrOutputWithContext(context.Background())
}

func (e AssessmentState) ToAssessmentStatePtrOutputWithContext(ctx context.Context) AssessmentStatePtrOutput {
	return AssessmentState(e).ToAssessmentStateOutputWithContext(ctx).ToAssessmentStatePtrOutputWithContext(ctx)
}

func (e AssessmentState) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AssessmentState) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AssessmentState) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AssessmentState) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AssessmentStateOutput struct{ *pulumi.OutputState }

func (AssessmentStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentState)(nil)).Elem()
}

func (o AssessmentStateOutput) ToAssessmentStateOutput() AssessmentStateOutput {
	return o
}

func (o AssessmentStateOutput) ToAssessmentStateOutputWithContext(ctx context.Context) AssessmentStateOutput {
	return o
}

func (o AssessmentStateOutput) ToAssessmentStatePtrOutput() AssessmentStatePtrOutput {
	return o.ToAssessmentStatePtrOutputWithContext(context.Background())
}

func (o AssessmentStateOutput) ToAssessmentStatePtrOutputWithContext(ctx context.Context) AssessmentStatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AssessmentState) *AssessmentState {
		return &v
	}).(AssessmentStatePtrOutput)
}

func (o AssessmentStateOutput) ToOutput(ctx context.Context) pulumix.Output[AssessmentState] {
	return pulumix.Output[AssessmentState]{
		OutputState: o.OutputState,
	}
}

func (o AssessmentStateOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AssessmentStateOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AssessmentState) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AssessmentStateOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AssessmentStateOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AssessmentState) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AssessmentStatePtrOutput struct{ *pulumi.OutputState }

func (AssessmentStatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AssessmentState)(nil)).Elem()
}

func (o AssessmentStatePtrOutput) ToAssessmentStatePtrOutput() AssessmentStatePtrOutput {
	return o
}

func (o AssessmentStatePtrOutput) ToAssessmentStatePtrOutputWithContext(ctx context.Context) AssessmentStatePtrOutput {
	return o
}

func (o AssessmentStatePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AssessmentState] {
	return pulumix.Output[*AssessmentState]{
		OutputState: o.OutputState,
	}
}

func (o AssessmentStatePtrOutput) Elem() AssessmentStateOutput {
	return o.ApplyT(func(v *AssessmentState) AssessmentState {
		if v != nil {
			return *v
		}
		var ret AssessmentState
		return ret
	}).(AssessmentStateOutput)
}

func (o AssessmentStatePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AssessmentStatePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AssessmentState) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AssessmentStateInput is an input type that accepts AssessmentStateArgs and AssessmentStateOutput values.
// You can construct a concrete instance of `AssessmentStateInput` via:
//
//	AssessmentStateArgs{...}
type AssessmentStateInput interface {
	pulumi.Input

	ToAssessmentStateOutput() AssessmentStateOutput
	ToAssessmentStateOutputWithContext(context.Context) AssessmentStateOutput
}

var assessmentStatePtrType = reflect.TypeOf((**AssessmentState)(nil)).Elem()

type AssessmentStatePtrInput interface {
	pulumi.Input

	ToAssessmentStatePtrOutput() AssessmentStatePtrOutput
	ToAssessmentStatePtrOutputWithContext(context.Context) AssessmentStatePtrOutput
}

type assessmentStatePtr string

func AssessmentStatePtr(v string) AssessmentStatePtrInput {
	return (*assessmentStatePtr)(&v)
}

func (*assessmentStatePtr) ElementType() reflect.Type {
	return assessmentStatePtrType
}

func (in *assessmentStatePtr) ToAssessmentStatePtrOutput() AssessmentStatePtrOutput {
	return pulumi.ToOutput(in).(AssessmentStatePtrOutput)
}

func (in *assessmentStatePtr) ToAssessmentStatePtrOutputWithContext(ctx context.Context) AssessmentStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AssessmentStatePtrOutput)
}

func (in *assessmentStatePtr) ToOutput(ctx context.Context) pulumix.Output[*AssessmentState] {
	return pulumix.Output[*AssessmentState]{
		OutputState: in.ToAssessmentStatePtrOutputWithContext(ctx).OutputState,
	}
}

// The type of the key, either stored in `public_key` or referenced in `key_id`.
type BuildSignatureKeyType string

const (
	// `KeyType` is not set.
	BuildSignatureKeyTypeKeyTypeUnspecified = BuildSignatureKeyType("KEY_TYPE_UNSPECIFIED")
	// `PGP ASCII Armored` public key.
	BuildSignatureKeyTypePgpAsciiArmored = BuildSignatureKeyType("PGP_ASCII_ARMORED")
	// `PKIX PEM` public key.
	BuildSignatureKeyTypePkixPem = BuildSignatureKeyType("PKIX_PEM")
)

func (BuildSignatureKeyType) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildSignatureKeyType)(nil)).Elem()
}

func (e BuildSignatureKeyType) ToBuildSignatureKeyTypeOutput() BuildSignatureKeyTypeOutput {
	return pulumi.ToOutput(e).(BuildSignatureKeyTypeOutput)
}

func (e BuildSignatureKeyType) ToBuildSignatureKeyTypeOutputWithContext(ctx context.Context) BuildSignatureKeyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(BuildSignatureKeyTypeOutput)
}

func (e BuildSignatureKeyType) ToBuildSignatureKeyTypePtrOutput() BuildSignatureKeyTypePtrOutput {
	return e.ToBuildSignatureKeyTypePtrOutputWithContext(context.Background())
}

func (e BuildSignatureKeyType) ToBuildSignatureKeyTypePtrOutputWithContext(ctx context.Context) BuildSignatureKeyTypePtrOutput {
	return BuildSignatureKeyType(e).ToBuildSignatureKeyTypeOutputWithContext(ctx).ToBuildSignatureKeyTypePtrOutputWithContext(ctx)
}

func (e BuildSignatureKeyType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e BuildSignatureKeyType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e BuildSignatureKeyType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e BuildSignatureKeyType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type BuildSignatureKeyTypeOutput struct{ *pulumi.OutputState }

func (BuildSignatureKeyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildSignatureKeyType)(nil)).Elem()
}

func (o BuildSignatureKeyTypeOutput) ToBuildSignatureKeyTypeOutput() BuildSignatureKeyTypeOutput {
	return o
}

func (o BuildSignatureKeyTypeOutput) ToBuildSignatureKeyTypeOutputWithContext(ctx context.Context) BuildSignatureKeyTypeOutput {
	return o
}

func (o BuildSignatureKeyTypeOutput) ToBuildSignatureKeyTypePtrOutput() BuildSignatureKeyTypePtrOutput {
	return o.ToBuildSignatureKeyTypePtrOutputWithContext(context.Background())
}

func (o BuildSignatureKeyTypeOutput) ToBuildSignatureKeyTypePtrOutputWithContext(ctx context.Context) BuildSignatureKeyTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BuildSignatureKeyType) *BuildSignatureKeyType {
		return &v
	}).(BuildSignatureKeyTypePtrOutput)
}

func (o BuildSignatureKeyTypeOutput) ToOutput(ctx context.Context) pulumix.Output[BuildSignatureKeyType] {
	return pulumix.Output[BuildSignatureKeyType]{
		OutputState: o.OutputState,
	}
}

func (o BuildSignatureKeyTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o BuildSignatureKeyTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BuildSignatureKeyType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o BuildSignatureKeyTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BuildSignatureKeyTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BuildSignatureKeyType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type BuildSignatureKeyTypePtrOutput struct{ *pulumi.OutputState }

func (BuildSignatureKeyTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildSignatureKeyType)(nil)).Elem()
}

func (o BuildSignatureKeyTypePtrOutput) ToBuildSignatureKeyTypePtrOutput() BuildSignatureKeyTypePtrOutput {
	return o
}

func (o BuildSignatureKeyTypePtrOutput) ToBuildSignatureKeyTypePtrOutputWithContext(ctx context.Context) BuildSignatureKeyTypePtrOutput {
	return o
}

func (o BuildSignatureKeyTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*BuildSignatureKeyType] {
	return pulumix.Output[*BuildSignatureKeyType]{
		OutputState: o.OutputState,
	}
}

func (o BuildSignatureKeyTypePtrOutput) Elem() BuildSignatureKeyTypeOutput {
	return o.ApplyT(func(v *BuildSignatureKeyType) BuildSignatureKeyType {
		if v != nil {
			return *v
		}
		var ret BuildSignatureKeyType
		return ret
	}).(BuildSignatureKeyTypeOutput)
}

func (o BuildSignatureKeyTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BuildSignatureKeyTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *BuildSignatureKeyType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// BuildSignatureKeyTypeInput is an input type that accepts BuildSignatureKeyTypeArgs and BuildSignatureKeyTypeOutput values.
// You can construct a concrete instance of `BuildSignatureKeyTypeInput` via:
//
//	BuildSignatureKeyTypeArgs{...}
type BuildSignatureKeyTypeInput interface {
	pulumi.Input

	ToBuildSignatureKeyTypeOutput() BuildSignatureKeyTypeOutput
	ToBuildSignatureKeyTypeOutputWithContext(context.Context) BuildSignatureKeyTypeOutput
}

var buildSignatureKeyTypePtrType = reflect.TypeOf((**BuildSignatureKeyType)(nil)).Elem()

type BuildSignatureKeyTypePtrInput interface {
	pulumi.Input

	ToBuildSignatureKeyTypePtrOutput() BuildSignatureKeyTypePtrOutput
	ToBuildSignatureKeyTypePtrOutputWithContext(context.Context) BuildSignatureKeyTypePtrOutput
}

type buildSignatureKeyTypePtr string

func BuildSignatureKeyTypePtr(v string) BuildSignatureKeyTypePtrInput {
	return (*buildSignatureKeyTypePtr)(&v)
}

func (*buildSignatureKeyTypePtr) ElementType() reflect.Type {
	return buildSignatureKeyTypePtrType
}

func (in *buildSignatureKeyTypePtr) ToBuildSignatureKeyTypePtrOutput() BuildSignatureKeyTypePtrOutput {
	return pulumi.ToOutput(in).(BuildSignatureKeyTypePtrOutput)
}

func (in *buildSignatureKeyTypePtr) ToBuildSignatureKeyTypePtrOutputWithContext(ctx context.Context) BuildSignatureKeyTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(BuildSignatureKeyTypePtrOutput)
}

func (in *buildSignatureKeyTypePtr) ToOutput(ctx context.Context) pulumix.Output[*BuildSignatureKeyType] {
	return pulumix.Output[*BuildSignatureKeyType]{
		OutputState: in.ToBuildSignatureKeyTypePtrOutputWithContext(ctx).OutputState,
	}
}

// Defined in CVSS v3, CVSS v2
type CVSSAttackComplexity string

const (
	// Defined in CVSS v3, CVSS v2
	CVSSAttackComplexityAttackComplexityUnspecified = CVSSAttackComplexity("ATTACK_COMPLEXITY_UNSPECIFIED")
	// Defined in CVSS v3, CVSS v2
	CVSSAttackComplexityAttackComplexityLow = CVSSAttackComplexity("ATTACK_COMPLEXITY_LOW")
	// Defined in CVSS v3, CVSS v2
	CVSSAttackComplexityAttackComplexityHigh = CVSSAttackComplexity("ATTACK_COMPLEXITY_HIGH")
	// Defined in CVSS v2
	CVSSAttackComplexityAttackComplexityMedium = CVSSAttackComplexity("ATTACK_COMPLEXITY_MEDIUM")
)

func (CVSSAttackComplexity) ElementType() reflect.Type {
	return reflect.TypeOf((*CVSSAttackComplexity)(nil)).Elem()
}

func (e CVSSAttackComplexity) ToCVSSAttackComplexityOutput() CVSSAttackComplexityOutput {
	return pulumi.ToOutput(e).(CVSSAttackComplexityOutput)
}

func (e CVSSAttackComplexity) ToCVSSAttackComplexityOutputWithContext(ctx context.Context) CVSSAttackComplexityOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CVSSAttackComplexityOutput)
}

func (e CVSSAttackComplexity) ToCVSSAttackComplexityPtrOutput() CVSSAttackComplexityPtrOutput {
	return e.ToCVSSAttackComplexityPtrOutputWithContext(context.Background())
}

func (e CVSSAttackComplexity) ToCVSSAttackComplexityPtrOutputWithContext(ctx context.Context) CVSSAttackComplexityPtrOutput {
	return CVSSAttackComplexity(e).ToCVSSAttackComplexityOutputWithContext(ctx).ToCVSSAttackComplexityPtrOutputWithContext(ctx)
}

func (e CVSSAttackComplexity) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CVSSAttackComplexity) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CVSSAttackComplexity) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CVSSAttackComplexity) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CVSSAttackComplexityOutput struct{ *pulumi.OutputState }

func (CVSSAttackComplexityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CVSSAttackComplexity)(nil)).Elem()
}

func (o CVSSAttackComplexityOutput) ToCVSSAttackComplexityOutput() CVSSAttackComplexityOutput {
	return o
}

func (o CVSSAttackComplexityOutput) ToCVSSAttackComplexityOutputWithContext(ctx context.Context) CVSSAttackComplexityOutput {
	return o
}

func (o CVSSAttackComplexityOutput) ToCVSSAttackComplexityPtrOutput() CVSSAttackComplexityPtrOutput {
	return o.ToCVSSAttackComplexityPtrOutputWithContext(context.Background())
}

func (o CVSSAttackComplexityOutput) ToCVSSAttackComplexityPtrOutputWithContext(ctx context.Context) CVSSAttackComplexityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CVSSAttackComplexity) *CVSSAttackComplexity {
		return &v
	}).(CVSSAttackComplexityPtrOutput)
}

func (o CVSSAttackComplexityOutput) ToOutput(ctx context.Context) pulumix.Output[CVSSAttackComplexity] {
	return pulumix.Output[CVSSAttackComplexity]{
		OutputState: o.OutputState,
	}
}

func (o CVSSAttackComplexityOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CVSSAttackComplexityOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CVSSAttackComplexity) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CVSSAttackComplexityOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CVSSAttackComplexityOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CVSSAttackComplexity) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CVSSAttackComplexityPtrOutput struct{ *pulumi.OutputState }

func (CVSSAttackComplexityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CVSSAttackComplexity)(nil)).Elem()
}

func (o CVSSAttackComplexityPtrOutput) ToCVSSAttackComplexityPtrOutput() CVSSAttackComplexityPtrOutput {
	return o
}

func (o CVSSAttackComplexityPtrOutput) ToCVSSAttackComplexityPtrOutputWithContext(ctx context.Context) CVSSAttackComplexityPtrOutput {
	return o
}

func (o CVSSAttackComplexityPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CVSSAttackComplexity] {
	return pulumix.Output[*CVSSAttackComplexity]{
		OutputState: o.OutputState,
	}
}

func (o CVSSAttackComplexityPtrOutput) Elem() CVSSAttackComplexityOutput {
	return o.ApplyT(func(v *CVSSAttackComplexity) CVSSAttackComplexity {
		if v != nil {
			return *v
		}
		var ret CVSSAttackComplexity
		return ret
	}).(CVSSAttackComplexityOutput)
}

func (o CVSSAttackComplexityPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CVSSAttackComplexityPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CVSSAttackComplexity) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CVSSAttackComplexityInput is an input type that accepts CVSSAttackComplexityArgs and CVSSAttackComplexityOutput values.
// You can construct a concrete instance of `CVSSAttackComplexityInput` via:
//
//	CVSSAttackComplexityArgs{...}
type CVSSAttackComplexityInput interface {
	pulumi.Input

	ToCVSSAttackComplexityOutput() CVSSAttackComplexityOutput
	ToCVSSAttackComplexityOutputWithContext(context.Context) CVSSAttackComplexityOutput
}

var cvssattackComplexityPtrType = reflect.TypeOf((**CVSSAttackComplexity)(nil)).Elem()

type CVSSAttackComplexityPtrInput interface {
	pulumi.Input

	ToCVSSAttackComplexityPtrOutput() CVSSAttackComplexityPtrOutput
	ToCVSSAttackComplexityPtrOutputWithContext(context.Context) CVSSAttackComplexityPtrOutput
}

type cvssattackComplexityPtr string

func CVSSAttackComplexityPtr(v string) CVSSAttackComplexityPtrInput {
	return (*cvssattackComplexityPtr)(&v)
}

func (*cvssattackComplexityPtr) ElementType() reflect.Type {
	return cvssattackComplexityPtrType
}

func (in *cvssattackComplexityPtr) ToCVSSAttackComplexityPtrOutput() CVSSAttackComplexityPtrOutput {
	return pulumi.ToOutput(in).(CVSSAttackComplexityPtrOutput)
}

func (in *cvssattackComplexityPtr) ToCVSSAttackComplexityPtrOutputWithContext(ctx context.Context) CVSSAttackComplexityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CVSSAttackComplexityPtrOutput)
}

func (in *cvssattackComplexityPtr) ToOutput(ctx context.Context) pulumix.Output[*CVSSAttackComplexity] {
	return pulumix.Output[*CVSSAttackComplexity]{
		OutputState: in.ToCVSSAttackComplexityPtrOutputWithContext(ctx).OutputState,
	}
}

// Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments. Defined in CVSS v3, CVSS v2
type CVSSAttackVector string

const (
	// Defined in CVSS v3, CVSS v2
	CVSSAttackVectorAttackVectorUnspecified = CVSSAttackVector("ATTACK_VECTOR_UNSPECIFIED")
	// Defined in CVSS v3, CVSS v2
	CVSSAttackVectorAttackVectorNetwork = CVSSAttackVector("ATTACK_VECTOR_NETWORK")
	// Defined in CVSS v3, CVSS v2
	CVSSAttackVectorAttackVectorAdjacent = CVSSAttackVector("ATTACK_VECTOR_ADJACENT")
	// Defined in CVSS v3, CVSS v2
	CVSSAttackVectorAttackVectorLocal = CVSSAttackVector("ATTACK_VECTOR_LOCAL")
	// Defined in CVSS v3
	CVSSAttackVectorAttackVectorPhysical = CVSSAttackVector("ATTACK_VECTOR_PHYSICAL")
)

func (CVSSAttackVector) ElementType() reflect.Type {
	return reflect.TypeOf((*CVSSAttackVector)(nil)).Elem()
}

func (e CVSSAttackVector) ToCVSSAttackVectorOutput() CVSSAttackVectorOutput {
	return pulumi.ToOutput(e).(CVSSAttackVectorOutput)
}

func (e CVSSAttackVector) ToCVSSAttackVectorOutputWithContext(ctx context.Context) CVSSAttackVectorOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CVSSAttackVectorOutput)
}

func (e CVSSAttackVector) ToCVSSAttackVectorPtrOutput() CVSSAttackVectorPtrOutput {
	return e.ToCVSSAttackVectorPtrOutputWithContext(context.Background())
}

func (e CVSSAttackVector) ToCVSSAttackVectorPtrOutputWithContext(ctx context.Context) CVSSAttackVectorPtrOutput {
	return CVSSAttackVector(e).ToCVSSAttackVectorOutputWithContext(ctx).ToCVSSAttackVectorPtrOutputWithContext(ctx)
}

func (e CVSSAttackVector) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CVSSAttackVector) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CVSSAttackVector) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CVSSAttackVector) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CVSSAttackVectorOutput struct{ *pulumi.OutputState }

func (CVSSAttackVectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CVSSAttackVector)(nil)).Elem()
}

func (o CVSSAttackVectorOutput) ToCVSSAttackVectorOutput() CVSSAttackVectorOutput {
	return o
}

func (o CVSSAttackVectorOutput) ToCVSSAttackVectorOutputWithContext(ctx context.Context) CVSSAttackVectorOutput {
	return o
}

func (o CVSSAttackVectorOutput) ToCVSSAttackVectorPtrOutput() CVSSAttackVectorPtrOutput {
	return o.ToCVSSAttackVectorPtrOutputWithContext(context.Background())
}

func (o CVSSAttackVectorOutput) ToCVSSAttackVectorPtrOutputWithContext(ctx context.Context) CVSSAttackVectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CVSSAttackVector) *CVSSAttackVector {
		return &v
	}).(CVSSAttackVectorPtrOutput)
}

func (o CVSSAttackVectorOutput) ToOutput(ctx context.Context) pulumix.Output[CVSSAttackVector] {
	return pulumix.Output[CVSSAttackVector]{
		OutputState: o.OutputState,
	}
}

func (o CVSSAttackVectorOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CVSSAttackVectorOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CVSSAttackVector) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CVSSAttackVectorOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CVSSAttackVectorOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CVSSAttackVector) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CVSSAttackVectorPtrOutput struct{ *pulumi.OutputState }

func (CVSSAttackVectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CVSSAttackVector)(nil)).Elem()
}

func (o CVSSAttackVectorPtrOutput) ToCVSSAttackVectorPtrOutput() CVSSAttackVectorPtrOutput {
	return o
}

func (o CVSSAttackVectorPtrOutput) ToCVSSAttackVectorPtrOutputWithContext(ctx context.Context) CVSSAttackVectorPtrOutput {
	return o
}

func (o CVSSAttackVectorPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CVSSAttackVector] {
	return pulumix.Output[*CVSSAttackVector]{
		OutputState: o.OutputState,
	}
}

func (o CVSSAttackVectorPtrOutput) Elem() CVSSAttackVectorOutput {
	return o.ApplyT(func(v *CVSSAttackVector) CVSSAttackVector {
		if v != nil {
			return *v
		}
		var ret CVSSAttackVector
		return ret
	}).(CVSSAttackVectorOutput)
}

func (o CVSSAttackVectorPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CVSSAttackVectorPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CVSSAttackVector) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CVSSAttackVectorInput is an input type that accepts CVSSAttackVectorArgs and CVSSAttackVectorOutput values.
// You can construct a concrete instance of `CVSSAttackVectorInput` via:
//
//	CVSSAttackVectorArgs{...}
type CVSSAttackVectorInput interface {
	pulumi.Input

	ToCVSSAttackVectorOutput() CVSSAttackVectorOutput
	ToCVSSAttackVectorOutputWithContext(context.Context) CVSSAttackVectorOutput
}

var cvssattackVectorPtrType = reflect.TypeOf((**CVSSAttackVector)(nil)).Elem()

type CVSSAttackVectorPtrInput interface {
	pulumi.Input

	ToCVSSAttackVectorPtrOutput() CVSSAttackVectorPtrOutput
	ToCVSSAttackVectorPtrOutputWithContext(context.Context) CVSSAttackVectorPtrOutput
}

type cvssattackVectorPtr string

func CVSSAttackVectorPtr(v string) CVSSAttackVectorPtrInput {
	return (*cvssattackVectorPtr)(&v)
}

func (*cvssattackVectorPtr) ElementType() reflect.Type {
	return cvssattackVectorPtrType
}

func (in *cvssattackVectorPtr) ToCVSSAttackVectorPtrOutput() CVSSAttackVectorPtrOutput {
	return pulumi.ToOutput(in).(CVSSAttackVectorPtrOutput)
}

func (in *cvssattackVectorPtr) ToCVSSAttackVectorPtrOutputWithContext(ctx context.Context) CVSSAttackVectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CVSSAttackVectorPtrOutput)
}

func (in *cvssattackVectorPtr) ToOutput(ctx context.Context) pulumix.Output[*CVSSAttackVector] {
	return pulumix.Output[*CVSSAttackVector]{
		OutputState: in.ToCVSSAttackVectorPtrOutputWithContext(ctx).OutputState,
	}
}

// Defined in CVSS v2
type CVSSAuthentication string

const (
	// Defined in CVSS v2
	CVSSAuthenticationAuthenticationUnspecified = CVSSAuthentication("AUTHENTICATION_UNSPECIFIED")
	// Defined in CVSS v2
	CVSSAuthenticationAuthenticationMultiple = CVSSAuthentication("AUTHENTICATION_MULTIPLE")
	// Defined in CVSS v2
	CVSSAuthenticationAuthenticationSingle = CVSSAuthentication("AUTHENTICATION_SINGLE")
	// Defined in CVSS v2
	CVSSAuthenticationAuthenticationNone = CVSSAuthentication("AUTHENTICATION_NONE")
)

func (CVSSAuthentication) ElementType() reflect.Type {
	return reflect.TypeOf((*CVSSAuthentication)(nil)).Elem()
}

func (e CVSSAuthentication) ToCVSSAuthenticationOutput() CVSSAuthenticationOutput {
	return pulumi.ToOutput(e).(CVSSAuthenticationOutput)
}

func (e CVSSAuthentication) ToCVSSAuthenticationOutputWithContext(ctx context.Context) CVSSAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CVSSAuthenticationOutput)
}

func (e CVSSAuthentication) ToCVSSAuthenticationPtrOutput() CVSSAuthenticationPtrOutput {
	return e.ToCVSSAuthenticationPtrOutputWithContext(context.Background())
}

func (e CVSSAuthentication) ToCVSSAuthenticationPtrOutputWithContext(ctx context.Context) CVSSAuthenticationPtrOutput {
	return CVSSAuthentication(e).ToCVSSAuthenticationOutputWithContext(ctx).ToCVSSAuthenticationPtrOutputWithContext(ctx)
}

func (e CVSSAuthentication) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CVSSAuthentication) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CVSSAuthentication) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CVSSAuthentication) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CVSSAuthenticationOutput struct{ *pulumi.OutputState }

func (CVSSAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CVSSAuthentication)(nil)).Elem()
}

func (o CVSSAuthenticationOutput) ToCVSSAuthenticationOutput() CVSSAuthenticationOutput {
	return o
}

func (o CVSSAuthenticationOutput) ToCVSSAuthenticationOutputWithContext(ctx context.Context) CVSSAuthenticationOutput {
	return o
}

func (o CVSSAuthenticationOutput) ToCVSSAuthenticationPtrOutput() CVSSAuthenticationPtrOutput {
	return o.ToCVSSAuthenticationPtrOutputWithContext(context.Background())
}

func (o CVSSAuthenticationOutput) ToCVSSAuthenticationPtrOutputWithContext(ctx context.Context) CVSSAuthenticationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CVSSAuthentication) *CVSSAuthentication {
		return &v
	}).(CVSSAuthenticationPtrOutput)
}

func (o CVSSAuthenticationOutput) ToOutput(ctx context.Context) pulumix.Output[CVSSAuthentication] {
	return pulumix.Output[CVSSAuthentication]{
		OutputState: o.OutputState,
	}
}

func (o CVSSAuthenticationOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CVSSAuthenticationOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CVSSAuthentication) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CVSSAuthenticationOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CVSSAuthenticationOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CVSSAuthentication) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CVSSAuthenticationPtrOutput struct{ *pulumi.OutputState }

func (CVSSAuthenticationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CVSSAuthentication)(nil)).Elem()
}

func (o CVSSAuthenticationPtrOutput) ToCVSSAuthenticationPtrOutput() CVSSAuthenticationPtrOutput {
	return o
}

func (o CVSSAuthenticationPtrOutput) ToCVSSAuthenticationPtrOutputWithContext(ctx context.Context) CVSSAuthenticationPtrOutput {
	return o
}

func (o CVSSAuthenticationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CVSSAuthentication] {
	return pulumix.Output[*CVSSAuthentication]{
		OutputState: o.OutputState,
	}
}

func (o CVSSAuthenticationPtrOutput) Elem() CVSSAuthenticationOutput {
	return o.ApplyT(func(v *CVSSAuthentication) CVSSAuthentication {
		if v != nil {
			return *v
		}
		var ret CVSSAuthentication
		return ret
	}).(CVSSAuthenticationOutput)
}

func (o CVSSAuthenticationPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CVSSAuthenticationPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CVSSAuthentication) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CVSSAuthenticationInput is an input type that accepts CVSSAuthenticationArgs and CVSSAuthenticationOutput values.
// You can construct a concrete instance of `CVSSAuthenticationInput` via:
//
//	CVSSAuthenticationArgs{...}
type CVSSAuthenticationInput interface {
	pulumi.Input

	ToCVSSAuthenticationOutput() CVSSAuthenticationOutput
	ToCVSSAuthenticationOutputWithContext(context.Context) CVSSAuthenticationOutput
}

var cvssauthenticationPtrType = reflect.TypeOf((**CVSSAuthentication)(nil)).Elem()

type CVSSAuthenticationPtrInput interface {
	pulumi.Input

	ToCVSSAuthenticationPtrOutput() CVSSAuthenticationPtrOutput
	ToCVSSAuthenticationPtrOutputWithContext(context.Context) CVSSAuthenticationPtrOutput
}

type cvssauthenticationPtr string

func CVSSAuthenticationPtr(v string) CVSSAuthenticationPtrInput {
	return (*cvssauthenticationPtr)(&v)
}

func (*cvssauthenticationPtr) ElementType() reflect.Type {
	return cvssauthenticationPtrType
}

func (in *cvssauthenticationPtr) ToCVSSAuthenticationPtrOutput() CVSSAuthenticationPtrOutput {
	return pulumi.ToOutput(in).(CVSSAuthenticationPtrOutput)
}

func (in *cvssauthenticationPtr) ToCVSSAuthenticationPtrOutputWithContext(ctx context.Context) CVSSAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CVSSAuthenticationPtrOutput)
}

func (in *cvssauthenticationPtr) ToOutput(ctx context.Context) pulumix.Output[*CVSSAuthentication] {
	return pulumix.Output[*CVSSAuthentication]{
		OutputState: in.ToCVSSAuthenticationPtrOutputWithContext(ctx).OutputState,
	}
}

// Defined in CVSS v3, CVSS v2
type CVSSAvailabilityImpact string

const (
	// Defined in CVSS v3, CVSS v2
	CVSSAvailabilityImpactImpactUnspecified = CVSSAvailabilityImpact("IMPACT_UNSPECIFIED")
	// Defined in CVSS v3
	CVSSAvailabilityImpactImpactHigh = CVSSAvailabilityImpact("IMPACT_HIGH")
	// Defined in CVSS v3
	CVSSAvailabilityImpactImpactLow = CVSSAvailabilityImpact("IMPACT_LOW")
	// Defined in CVSS v3, CVSS v2
	CVSSAvailabilityImpactImpactNone = CVSSAvailabilityImpact("IMPACT_NONE")
	// Defined in CVSS v2
	CVSSAvailabilityImpactImpactPartial = CVSSAvailabilityImpact("IMPACT_PARTIAL")
	// Defined in CVSS v2
	CVSSAvailabilityImpactImpactComplete = CVSSAvailabilityImpact("IMPACT_COMPLETE")
)

func (CVSSAvailabilityImpact) ElementType() reflect.Type {
	return reflect.TypeOf((*CVSSAvailabilityImpact)(nil)).Elem()
}

func (e CVSSAvailabilityImpact) ToCVSSAvailabilityImpactOutput() CVSSAvailabilityImpactOutput {
	return pulumi.ToOutput(e).(CVSSAvailabilityImpactOutput)
}

func (e CVSSAvailabilityImpact) ToCVSSAvailabilityImpactOutputWithContext(ctx context.Context) CVSSAvailabilityImpactOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CVSSAvailabilityImpactOutput)
}

func (e CVSSAvailabilityImpact) ToCVSSAvailabilityImpactPtrOutput() CVSSAvailabilityImpactPtrOutput {
	return e.ToCVSSAvailabilityImpactPtrOutputWithContext(context.Background())
}

func (e CVSSAvailabilityImpact) ToCVSSAvailabilityImpactPtrOutputWithContext(ctx context.Context) CVSSAvailabilityImpactPtrOutput {
	return CVSSAvailabilityImpact(e).ToCVSSAvailabilityImpactOutputWithContext(ctx).ToCVSSAvailabilityImpactPtrOutputWithContext(ctx)
}

func (e CVSSAvailabilityImpact) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CVSSAvailabilityImpact) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CVSSAvailabilityImpact) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CVSSAvailabilityImpact) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CVSSAvailabilityImpactOutput struct{ *pulumi.OutputState }

func (CVSSAvailabilityImpactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CVSSAvailabilityImpact)(nil)).Elem()
}

func (o CVSSAvailabilityImpactOutput) ToCVSSAvailabilityImpactOutput() CVSSAvailabilityImpactOutput {
	return o
}

func (o CVSSAvailabilityImpactOutput) ToCVSSAvailabilityImpactOutputWithContext(ctx context.Context) CVSSAvailabilityImpactOutput {
	return o
}

func (o CVSSAvailabilityImpactOutput) ToCVSSAvailabilityImpactPtrOutput() CVSSAvailabilityImpactPtrOutput {
	return o.ToCVSSAvailabilityImpactPtrOutputWithContext(context.Background())
}

func (o CVSSAvailabilityImpactOutput) ToCVSSAvailabilityImpactPtrOutputWithContext(ctx context.Context) CVSSAvailabilityImpactPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CVSSAvailabilityImpact) *CVSSAvailabilityImpact {
		return &v
	}).(CVSSAvailabilityImpactPtrOutput)
}

func (o CVSSAvailabilityImpactOutput) ToOutput(ctx context.Context) pulumix.Output[CVSSAvailabilityImpact] {
	return pulumix.Output[CVSSAvailabilityImpact]{
		OutputState: o.OutputState,
	}
}

func (o CVSSAvailabilityImpactOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CVSSAvailabilityImpactOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CVSSAvailabilityImpact) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CVSSAvailabilityImpactOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CVSSAvailabilityImpactOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CVSSAvailabilityImpact) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CVSSAvailabilityImpactPtrOutput struct{ *pulumi.OutputState }

func (CVSSAvailabilityImpactPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CVSSAvailabilityImpact)(nil)).Elem()
}

func (o CVSSAvailabilityImpactPtrOutput) ToCVSSAvailabilityImpactPtrOutput() CVSSAvailabilityImpactPtrOutput {
	return o
}

func (o CVSSAvailabilityImpactPtrOutput) ToCVSSAvailabilityImpactPtrOutputWithContext(ctx context.Context) CVSSAvailabilityImpactPtrOutput {
	return o
}

func (o CVSSAvailabilityImpactPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CVSSAvailabilityImpact] {
	return pulumix.Output[*CVSSAvailabilityImpact]{
		OutputState: o.OutputState,
	}
}

func (o CVSSAvailabilityImpactPtrOutput) Elem() CVSSAvailabilityImpactOutput {
	return o.ApplyT(func(v *CVSSAvailabilityImpact) CVSSAvailabilityImpact {
		if v != nil {
			return *v
		}
		var ret CVSSAvailabilityImpact
		return ret
	}).(CVSSAvailabilityImpactOutput)
}

func (o CVSSAvailabilityImpactPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CVSSAvailabilityImpactPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CVSSAvailabilityImpact) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CVSSAvailabilityImpactInput is an input type that accepts CVSSAvailabilityImpactArgs and CVSSAvailabilityImpactOutput values.
// You can construct a concrete instance of `CVSSAvailabilityImpactInput` via:
//
//	CVSSAvailabilityImpactArgs{...}
type CVSSAvailabilityImpactInput interface {
	pulumi.Input

	ToCVSSAvailabilityImpactOutput() CVSSAvailabilityImpactOutput
	ToCVSSAvailabilityImpactOutputWithContext(context.Context) CVSSAvailabilityImpactOutput
}

var cvssavailabilityImpactPtrType = reflect.TypeOf((**CVSSAvailabilityImpact)(nil)).Elem()

type CVSSAvailabilityImpactPtrInput interface {
	pulumi.Input

	ToCVSSAvailabilityImpactPtrOutput() CVSSAvailabilityImpactPtrOutput
	ToCVSSAvailabilityImpactPtrOutputWithContext(context.Context) CVSSAvailabilityImpactPtrOutput
}

type cvssavailabilityImpactPtr string

func CVSSAvailabilityImpactPtr(v string) CVSSAvailabilityImpactPtrInput {
	return (*cvssavailabilityImpactPtr)(&v)
}

func (*cvssavailabilityImpactPtr) ElementType() reflect.Type {
	return cvssavailabilityImpactPtrType
}

func (in *cvssavailabilityImpactPtr) ToCVSSAvailabilityImpactPtrOutput() CVSSAvailabilityImpactPtrOutput {
	return pulumi.ToOutput(in).(CVSSAvailabilityImpactPtrOutput)
}

func (in *cvssavailabilityImpactPtr) ToCVSSAvailabilityImpactPtrOutputWithContext(ctx context.Context) CVSSAvailabilityImpactPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CVSSAvailabilityImpactPtrOutput)
}

func (in *cvssavailabilityImpactPtr) ToOutput(ctx context.Context) pulumix.Output[*CVSSAvailabilityImpact] {
	return pulumix.Output[*CVSSAvailabilityImpact]{
		OutputState: in.ToCVSSAvailabilityImpactPtrOutputWithContext(ctx).OutputState,
	}
}

// Defined in CVSS v3, CVSS v2
type CVSSConfidentialityImpact string

const (
	// Defined in CVSS v3, CVSS v2
	CVSSConfidentialityImpactImpactUnspecified = CVSSConfidentialityImpact("IMPACT_UNSPECIFIED")
	// Defined in CVSS v3
	CVSSConfidentialityImpactImpactHigh = CVSSConfidentialityImpact("IMPACT_HIGH")
	// Defined in CVSS v3
	CVSSConfidentialityImpactImpactLow = CVSSConfidentialityImpact("IMPACT_LOW")
	// Defined in CVSS v3, CVSS v2
	CVSSConfidentialityImpactImpactNone = CVSSConfidentialityImpact("IMPACT_NONE")
	// Defined in CVSS v2
	CVSSConfidentialityImpactImpactPartial = CVSSConfidentialityImpact("IMPACT_PARTIAL")
	// Defined in CVSS v2
	CVSSConfidentialityImpactImpactComplete = CVSSConfidentialityImpact("IMPACT_COMPLETE")
)

func (CVSSConfidentialityImpact) ElementType() reflect.Type {
	return reflect.TypeOf((*CVSSConfidentialityImpact)(nil)).Elem()
}

func (e CVSSConfidentialityImpact) ToCVSSConfidentialityImpactOutput() CVSSConfidentialityImpactOutput {
	return pulumi.ToOutput(e).(CVSSConfidentialityImpactOutput)
}

func (e CVSSConfidentialityImpact) ToCVSSConfidentialityImpactOutputWithContext(ctx context.Context) CVSSConfidentialityImpactOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CVSSConfidentialityImpactOutput)
}

func (e CVSSConfidentialityImpact) ToCVSSConfidentialityImpactPtrOutput() CVSSConfidentialityImpactPtrOutput {
	return e.ToCVSSConfidentialityImpactPtrOutputWithContext(context.Background())
}

func (e CVSSConfidentialityImpact) ToCVSSConfidentialityImpactPtrOutputWithContext(ctx context.Context) CVSSConfidentialityImpactPtrOutput {
	return CVSSConfidentialityImpact(e).ToCVSSConfidentialityImpactOutputWithContext(ctx).ToCVSSConfidentialityImpactPtrOutputWithContext(ctx)
}

func (e CVSSConfidentialityImpact) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CVSSConfidentialityImpact) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CVSSConfidentialityImpact) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CVSSConfidentialityImpact) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CVSSConfidentialityImpactOutput struct{ *pulumi.OutputState }

func (CVSSConfidentialityImpactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CVSSConfidentialityImpact)(nil)).Elem()
}

func (o CVSSConfidentialityImpactOutput) ToCVSSConfidentialityImpactOutput() CVSSConfidentialityImpactOutput {
	return o
}

func (o CVSSConfidentialityImpactOutput) ToCVSSConfidentialityImpactOutputWithContext(ctx context.Context) CVSSConfidentialityImpactOutput {
	return o
}

func (o CVSSConfidentialityImpactOutput) ToCVSSConfidentialityImpactPtrOutput() CVSSConfidentialityImpactPtrOutput {
	return o.ToCVSSConfidentialityImpactPtrOutputWithContext(context.Background())
}

func (o CVSSConfidentialityImpactOutput) ToCVSSConfidentialityImpactPtrOutputWithContext(ctx context.Context) CVSSConfidentialityImpactPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CVSSConfidentialityImpact) *CVSSConfidentialityImpact {
		return &v
	}).(CVSSConfidentialityImpactPtrOutput)
}

func (o CVSSConfidentialityImpactOutput) ToOutput(ctx context.Context) pulumix.Output[CVSSConfidentialityImpact] {
	return pulumix.Output[CVSSConfidentialityImpact]{
		OutputState: o.OutputState,
	}
}

func (o CVSSConfidentialityImpactOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CVSSConfidentialityImpactOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CVSSConfidentialityImpact) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CVSSConfidentialityImpactOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CVSSConfidentialityImpactOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CVSSConfidentialityImpact) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CVSSConfidentialityImpactPtrOutput struct{ *pulumi.OutputState }

func (CVSSConfidentialityImpactPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CVSSConfidentialityImpact)(nil)).Elem()
}

func (o CVSSConfidentialityImpactPtrOutput) ToCVSSConfidentialityImpactPtrOutput() CVSSConfidentialityImpactPtrOutput {
	return o
}

func (o CVSSConfidentialityImpactPtrOutput) ToCVSSConfidentialityImpactPtrOutputWithContext(ctx context.Context) CVSSConfidentialityImpactPtrOutput {
	return o
}

func (o CVSSConfidentialityImpactPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CVSSConfidentialityImpact] {
	return pulumix.Output[*CVSSConfidentialityImpact]{
		OutputState: o.OutputState,
	}
}

func (o CVSSConfidentialityImpactPtrOutput) Elem() CVSSConfidentialityImpactOutput {
	return o.ApplyT(func(v *CVSSConfidentialityImpact) CVSSConfidentialityImpact {
		if v != nil {
			return *v
		}
		var ret CVSSConfidentialityImpact
		return ret
	}).(CVSSConfidentialityImpactOutput)
}

func (o CVSSConfidentialityImpactPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CVSSConfidentialityImpactPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CVSSConfidentialityImpact) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CVSSConfidentialityImpactInput is an input type that accepts CVSSConfidentialityImpactArgs and CVSSConfidentialityImpactOutput values.
// You can construct a concrete instance of `CVSSConfidentialityImpactInput` via:
//
//	CVSSConfidentialityImpactArgs{...}
type CVSSConfidentialityImpactInput interface {
	pulumi.Input

	ToCVSSConfidentialityImpactOutput() CVSSConfidentialityImpactOutput
	ToCVSSConfidentialityImpactOutputWithContext(context.Context) CVSSConfidentialityImpactOutput
}

var cvssconfidentialityImpactPtrType = reflect.TypeOf((**CVSSConfidentialityImpact)(nil)).Elem()

type CVSSConfidentialityImpactPtrInput interface {
	pulumi.Input

	ToCVSSConfidentialityImpactPtrOutput() CVSSConfidentialityImpactPtrOutput
	ToCVSSConfidentialityImpactPtrOutputWithContext(context.Context) CVSSConfidentialityImpactPtrOutput
}

type cvssconfidentialityImpactPtr string

func CVSSConfidentialityImpactPtr(v string) CVSSConfidentialityImpactPtrInput {
	return (*cvssconfidentialityImpactPtr)(&v)
}

func (*cvssconfidentialityImpactPtr) ElementType() reflect.Type {
	return cvssconfidentialityImpactPtrType
}

func (in *cvssconfidentialityImpactPtr) ToCVSSConfidentialityImpactPtrOutput() CVSSConfidentialityImpactPtrOutput {
	return pulumi.ToOutput(in).(CVSSConfidentialityImpactPtrOutput)
}

func (in *cvssconfidentialityImpactPtr) ToCVSSConfidentialityImpactPtrOutputWithContext(ctx context.Context) CVSSConfidentialityImpactPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CVSSConfidentialityImpactPtrOutput)
}

func (in *cvssconfidentialityImpactPtr) ToOutput(ctx context.Context) pulumix.Output[*CVSSConfidentialityImpact] {
	return pulumix.Output[*CVSSConfidentialityImpact]{
		OutputState: in.ToCVSSConfidentialityImpactPtrOutputWithContext(ctx).OutputState,
	}
}

// Defined in CVSS v3, CVSS v2
type CVSSIntegrityImpact string

const (
	// Defined in CVSS v3, CVSS v2
	CVSSIntegrityImpactImpactUnspecified = CVSSIntegrityImpact("IMPACT_UNSPECIFIED")
	// Defined in CVSS v3
	CVSSIntegrityImpactImpactHigh = CVSSIntegrityImpact("IMPACT_HIGH")
	// Defined in CVSS v3
	CVSSIntegrityImpactImpactLow = CVSSIntegrityImpact("IMPACT_LOW")
	// Defined in CVSS v3, CVSS v2
	CVSSIntegrityImpactImpactNone = CVSSIntegrityImpact("IMPACT_NONE")
	// Defined in CVSS v2
	CVSSIntegrityImpactImpactPartial = CVSSIntegrityImpact("IMPACT_PARTIAL")
	// Defined in CVSS v2
	CVSSIntegrityImpactImpactComplete = CVSSIntegrityImpact("IMPACT_COMPLETE")
)

func (CVSSIntegrityImpact) ElementType() reflect.Type {
	return reflect.TypeOf((*CVSSIntegrityImpact)(nil)).Elem()
}

func (e CVSSIntegrityImpact) ToCVSSIntegrityImpactOutput() CVSSIntegrityImpactOutput {
	return pulumi.ToOutput(e).(CVSSIntegrityImpactOutput)
}

func (e CVSSIntegrityImpact) ToCVSSIntegrityImpactOutputWithContext(ctx context.Context) CVSSIntegrityImpactOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CVSSIntegrityImpactOutput)
}

func (e CVSSIntegrityImpact) ToCVSSIntegrityImpactPtrOutput() CVSSIntegrityImpactPtrOutput {
	return e.ToCVSSIntegrityImpactPtrOutputWithContext(context.Background())
}

func (e CVSSIntegrityImpact) ToCVSSIntegrityImpactPtrOutputWithContext(ctx context.Context) CVSSIntegrityImpactPtrOutput {
	return CVSSIntegrityImpact(e).ToCVSSIntegrityImpactOutputWithContext(ctx).ToCVSSIntegrityImpactPtrOutputWithContext(ctx)
}

func (e CVSSIntegrityImpact) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CVSSIntegrityImpact) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CVSSIntegrityImpact) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CVSSIntegrityImpact) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CVSSIntegrityImpactOutput struct{ *pulumi.OutputState }

func (CVSSIntegrityImpactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CVSSIntegrityImpact)(nil)).Elem()
}

func (o CVSSIntegrityImpactOutput) ToCVSSIntegrityImpactOutput() CVSSIntegrityImpactOutput {
	return o
}

func (o CVSSIntegrityImpactOutput) ToCVSSIntegrityImpactOutputWithContext(ctx context.Context) CVSSIntegrityImpactOutput {
	return o
}

func (o CVSSIntegrityImpactOutput) ToCVSSIntegrityImpactPtrOutput() CVSSIntegrityImpactPtrOutput {
	return o.ToCVSSIntegrityImpactPtrOutputWithContext(context.Background())
}

func (o CVSSIntegrityImpactOutput) ToCVSSIntegrityImpactPtrOutputWithContext(ctx context.Context) CVSSIntegrityImpactPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CVSSIntegrityImpact) *CVSSIntegrityImpact {
		return &v
	}).(CVSSIntegrityImpactPtrOutput)
}

func (o CVSSIntegrityImpactOutput) ToOutput(ctx context.Context) pulumix.Output[CVSSIntegrityImpact] {
	return pulumix.Output[CVSSIntegrityImpact]{
		OutputState: o.OutputState,
	}
}

func (o CVSSIntegrityImpactOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CVSSIntegrityImpactOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CVSSIntegrityImpact) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CVSSIntegrityImpactOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CVSSIntegrityImpactOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CVSSIntegrityImpact) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CVSSIntegrityImpactPtrOutput struct{ *pulumi.OutputState }

func (CVSSIntegrityImpactPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CVSSIntegrityImpact)(nil)).Elem()
}

func (o CVSSIntegrityImpactPtrOutput) ToCVSSIntegrityImpactPtrOutput() CVSSIntegrityImpactPtrOutput {
	return o
}

func (o CVSSIntegrityImpactPtrOutput) ToCVSSIntegrityImpactPtrOutputWithContext(ctx context.Context) CVSSIntegrityImpactPtrOutput {
	return o
}

func (o CVSSIntegrityImpactPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CVSSIntegrityImpact] {
	return pulumix.Output[*CVSSIntegrityImpact]{
		OutputState: o.OutputState,
	}
}

func (o CVSSIntegrityImpactPtrOutput) Elem() CVSSIntegrityImpactOutput {
	return o.ApplyT(func(v *CVSSIntegrityImpact) CVSSIntegrityImpact {
		if v != nil {
			return *v
		}
		var ret CVSSIntegrityImpact
		return ret
	}).(CVSSIntegrityImpactOutput)
}

func (o CVSSIntegrityImpactPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CVSSIntegrityImpactPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CVSSIntegrityImpact) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CVSSIntegrityImpactInput is an input type that accepts CVSSIntegrityImpactArgs and CVSSIntegrityImpactOutput values.
// You can construct a concrete instance of `CVSSIntegrityImpactInput` via:
//
//	CVSSIntegrityImpactArgs{...}
type CVSSIntegrityImpactInput interface {
	pulumi.Input

	ToCVSSIntegrityImpactOutput() CVSSIntegrityImpactOutput
	ToCVSSIntegrityImpactOutputWithContext(context.Context) CVSSIntegrityImpactOutput
}

var cvssintegrityImpactPtrType = reflect.TypeOf((**CVSSIntegrityImpact)(nil)).Elem()

type CVSSIntegrityImpactPtrInput interface {
	pulumi.Input

	ToCVSSIntegrityImpactPtrOutput() CVSSIntegrityImpactPtrOutput
	ToCVSSIntegrityImpactPtrOutputWithContext(context.Context) CVSSIntegrityImpactPtrOutput
}

type cvssintegrityImpactPtr string

func CVSSIntegrityImpactPtr(v string) CVSSIntegrityImpactPtrInput {
	return (*cvssintegrityImpactPtr)(&v)
}

func (*cvssintegrityImpactPtr) ElementType() reflect.Type {
	return cvssintegrityImpactPtrType
}

func (in *cvssintegrityImpactPtr) ToCVSSIntegrityImpactPtrOutput() CVSSIntegrityImpactPtrOutput {
	return pulumi.ToOutput(in).(CVSSIntegrityImpactPtrOutput)
}

func (in *cvssintegrityImpactPtr) ToCVSSIntegrityImpactPtrOutputWithContext(ctx context.Context) CVSSIntegrityImpactPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CVSSIntegrityImpactPtrOutput)
}

func (in *cvssintegrityImpactPtr) ToOutput(ctx context.Context) pulumix.Output[*CVSSIntegrityImpact] {
	return pulumix.Output[*CVSSIntegrityImpact]{
		OutputState: in.ToCVSSIntegrityImpactPtrOutputWithContext(ctx).OutputState,
	}
}

// Defined in CVSS v3
type CVSSPrivilegesRequired string

const (
	// Defined in CVSS v3
	CVSSPrivilegesRequiredPrivilegesRequiredUnspecified = CVSSPrivilegesRequired("PRIVILEGES_REQUIRED_UNSPECIFIED")
	// Defined in CVSS v3
	CVSSPrivilegesRequiredPrivilegesRequiredNone = CVSSPrivilegesRequired("PRIVILEGES_REQUIRED_NONE")
	// Defined in CVSS v3
	CVSSPrivilegesRequiredPrivilegesRequiredLow = CVSSPrivilegesRequired("PRIVILEGES_REQUIRED_LOW")
	// Defined in CVSS v3
	CVSSPrivilegesRequiredPrivilegesRequiredHigh = CVSSPrivilegesRequired("PRIVILEGES_REQUIRED_HIGH")
)

func (CVSSPrivilegesRequired) ElementType() reflect.Type {
	return reflect.TypeOf((*CVSSPrivilegesRequired)(nil)).Elem()
}

func (e CVSSPrivilegesRequired) ToCVSSPrivilegesRequiredOutput() CVSSPrivilegesRequiredOutput {
	return pulumi.ToOutput(e).(CVSSPrivilegesRequiredOutput)
}

func (e CVSSPrivilegesRequired) ToCVSSPrivilegesRequiredOutputWithContext(ctx context.Context) CVSSPrivilegesRequiredOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CVSSPrivilegesRequiredOutput)
}

func (e CVSSPrivilegesRequired) ToCVSSPrivilegesRequiredPtrOutput() CVSSPrivilegesRequiredPtrOutput {
	return e.ToCVSSPrivilegesRequiredPtrOutputWithContext(context.Background())
}

func (e CVSSPrivilegesRequired) ToCVSSPrivilegesRequiredPtrOutputWithContext(ctx context.Context) CVSSPrivilegesRequiredPtrOutput {
	return CVSSPrivilegesRequired(e).ToCVSSPrivilegesRequiredOutputWithContext(ctx).ToCVSSPrivilegesRequiredPtrOutputWithContext(ctx)
}

func (e CVSSPrivilegesRequired) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CVSSPrivilegesRequired) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CVSSPrivilegesRequired) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CVSSPrivilegesRequired) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CVSSPrivilegesRequiredOutput struct{ *pulumi.OutputState }

func (CVSSPrivilegesRequiredOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CVSSPrivilegesRequired)(nil)).Elem()
}

func (o CVSSPrivilegesRequiredOutput) ToCVSSPrivilegesRequiredOutput() CVSSPrivilegesRequiredOutput {
	return o
}

func (o CVSSPrivilegesRequiredOutput) ToCVSSPrivilegesRequiredOutputWithContext(ctx context.Context) CVSSPrivilegesRequiredOutput {
	return o
}

func (o CVSSPrivilegesRequiredOutput) ToCVSSPrivilegesRequiredPtrOutput() CVSSPrivilegesRequiredPtrOutput {
	return o.ToCVSSPrivilegesRequiredPtrOutputWithContext(context.Background())
}

func (o CVSSPrivilegesRequiredOutput) ToCVSSPrivilegesRequiredPtrOutputWithContext(ctx context.Context) CVSSPrivilegesRequiredPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CVSSPrivilegesRequired) *CVSSPrivilegesRequired {
		return &v
	}).(CVSSPrivilegesRequiredPtrOutput)
}

func (o CVSSPrivilegesRequiredOutput) ToOutput(ctx context.Context) pulumix.Output[CVSSPrivilegesRequired] {
	return pulumix.Output[CVSSPrivilegesRequired]{
		OutputState: o.OutputState,
	}
}

func (o CVSSPrivilegesRequiredOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CVSSPrivilegesRequiredOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CVSSPrivilegesRequired) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CVSSPrivilegesRequiredOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CVSSPrivilegesRequiredOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CVSSPrivilegesRequired) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CVSSPrivilegesRequiredPtrOutput struct{ *pulumi.OutputState }

func (CVSSPrivilegesRequiredPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CVSSPrivilegesRequired)(nil)).Elem()
}

func (o CVSSPrivilegesRequiredPtrOutput) ToCVSSPrivilegesRequiredPtrOutput() CVSSPrivilegesRequiredPtrOutput {
	return o
}

func (o CVSSPrivilegesRequiredPtrOutput) ToCVSSPrivilegesRequiredPtrOutputWithContext(ctx context.Context) CVSSPrivilegesRequiredPtrOutput {
	return o
}

func (o CVSSPrivilegesRequiredPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CVSSPrivilegesRequired] {
	return pulumix.Output[*CVSSPrivilegesRequired]{
		OutputState: o.OutputState,
	}
}

func (o CVSSPrivilegesRequiredPtrOutput) Elem() CVSSPrivilegesRequiredOutput {
	return o.ApplyT(func(v *CVSSPrivilegesRequired) CVSSPrivilegesRequired {
		if v != nil {
			return *v
		}
		var ret CVSSPrivilegesRequired
		return ret
	}).(CVSSPrivilegesRequiredOutput)
}

func (o CVSSPrivilegesRequiredPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CVSSPrivilegesRequiredPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CVSSPrivilegesRequired) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CVSSPrivilegesRequiredInput is an input type that accepts CVSSPrivilegesRequiredArgs and CVSSPrivilegesRequiredOutput values.
// You can construct a concrete instance of `CVSSPrivilegesRequiredInput` via:
//
//	CVSSPrivilegesRequiredArgs{...}
type CVSSPrivilegesRequiredInput interface {
	pulumi.Input

	ToCVSSPrivilegesRequiredOutput() CVSSPrivilegesRequiredOutput
	ToCVSSPrivilegesRequiredOutputWithContext(context.Context) CVSSPrivilegesRequiredOutput
}

var cvssprivilegesRequiredPtrType = reflect.TypeOf((**CVSSPrivilegesRequired)(nil)).Elem()

type CVSSPrivilegesRequiredPtrInput interface {
	pulumi.Input

	ToCVSSPrivilegesRequiredPtrOutput() CVSSPrivilegesRequiredPtrOutput
	ToCVSSPrivilegesRequiredPtrOutputWithContext(context.Context) CVSSPrivilegesRequiredPtrOutput
}

type cvssprivilegesRequiredPtr string

func CVSSPrivilegesRequiredPtr(v string) CVSSPrivilegesRequiredPtrInput {
	return (*cvssprivilegesRequiredPtr)(&v)
}

func (*cvssprivilegesRequiredPtr) ElementType() reflect.Type {
	return cvssprivilegesRequiredPtrType
}

func (in *cvssprivilegesRequiredPtr) ToCVSSPrivilegesRequiredPtrOutput() CVSSPrivilegesRequiredPtrOutput {
	return pulumi.ToOutput(in).(CVSSPrivilegesRequiredPtrOutput)
}

func (in *cvssprivilegesRequiredPtr) ToCVSSPrivilegesRequiredPtrOutputWithContext(ctx context.Context) CVSSPrivilegesRequiredPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CVSSPrivilegesRequiredPtrOutput)
}

func (in *cvssprivilegesRequiredPtr) ToOutput(ctx context.Context) pulumix.Output[*CVSSPrivilegesRequired] {
	return pulumix.Output[*CVSSPrivilegesRequired]{
		OutputState: in.ToCVSSPrivilegesRequiredPtrOutputWithContext(ctx).OutputState,
	}
}

// Defined in CVSS v3
type CVSSScope string

const (
	// Defined in CVSS v3
	CVSSScopeScopeUnspecified = CVSSScope("SCOPE_UNSPECIFIED")
	// Defined in CVSS v3
	CVSSScopeScopeUnchanged = CVSSScope("SCOPE_UNCHANGED")
	// Defined in CVSS v3
	CVSSScopeScopeChanged = CVSSScope("SCOPE_CHANGED")
)

func (CVSSScope) ElementType() reflect.Type {
	return reflect.TypeOf((*CVSSScope)(nil)).Elem()
}

func (e CVSSScope) ToCVSSScopeOutput() CVSSScopeOutput {
	return pulumi.ToOutput(e).(CVSSScopeOutput)
}

func (e CVSSScope) ToCVSSScopeOutputWithContext(ctx context.Context) CVSSScopeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CVSSScopeOutput)
}

func (e CVSSScope) ToCVSSScopePtrOutput() CVSSScopePtrOutput {
	return e.ToCVSSScopePtrOutputWithContext(context.Background())
}

func (e CVSSScope) ToCVSSScopePtrOutputWithContext(ctx context.Context) CVSSScopePtrOutput {
	return CVSSScope(e).ToCVSSScopeOutputWithContext(ctx).ToCVSSScopePtrOutputWithContext(ctx)
}

func (e CVSSScope) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CVSSScope) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CVSSScope) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CVSSScope) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CVSSScopeOutput struct{ *pulumi.OutputState }

func (CVSSScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CVSSScope)(nil)).Elem()
}

func (o CVSSScopeOutput) ToCVSSScopeOutput() CVSSScopeOutput {
	return o
}

func (o CVSSScopeOutput) ToCVSSScopeOutputWithContext(ctx context.Context) CVSSScopeOutput {
	return o
}

func (o CVSSScopeOutput) ToCVSSScopePtrOutput() CVSSScopePtrOutput {
	return o.ToCVSSScopePtrOutputWithContext(context.Background())
}

func (o CVSSScopeOutput) ToCVSSScopePtrOutputWithContext(ctx context.Context) CVSSScopePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CVSSScope) *CVSSScope {
		return &v
	}).(CVSSScopePtrOutput)
}

func (o CVSSScopeOutput) ToOutput(ctx context.Context) pulumix.Output[CVSSScope] {
	return pulumix.Output[CVSSScope]{
		OutputState: o.OutputState,
	}
}

func (o CVSSScopeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CVSSScopeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CVSSScope) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CVSSScopeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CVSSScopeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CVSSScope) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CVSSScopePtrOutput struct{ *pulumi.OutputState }

func (CVSSScopePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CVSSScope)(nil)).Elem()
}

func (o CVSSScopePtrOutput) ToCVSSScopePtrOutput() CVSSScopePtrOutput {
	return o
}

func (o CVSSScopePtrOutput) ToCVSSScopePtrOutputWithContext(ctx context.Context) CVSSScopePtrOutput {
	return o
}

func (o CVSSScopePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CVSSScope] {
	return pulumix.Output[*CVSSScope]{
		OutputState: o.OutputState,
	}
}

func (o CVSSScopePtrOutput) Elem() CVSSScopeOutput {
	return o.ApplyT(func(v *CVSSScope) CVSSScope {
		if v != nil {
			return *v
		}
		var ret CVSSScope
		return ret
	}).(CVSSScopeOutput)
}

func (o CVSSScopePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CVSSScopePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CVSSScope) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CVSSScopeInput is an input type that accepts CVSSScopeArgs and CVSSScopeOutput values.
// You can construct a concrete instance of `CVSSScopeInput` via:
//
//	CVSSScopeArgs{...}
type CVSSScopeInput interface {
	pulumi.Input

	ToCVSSScopeOutput() CVSSScopeOutput
	ToCVSSScopeOutputWithContext(context.Context) CVSSScopeOutput
}

var cvssscopePtrType = reflect.TypeOf((**CVSSScope)(nil)).Elem()

type CVSSScopePtrInput interface {
	pulumi.Input

	ToCVSSScopePtrOutput() CVSSScopePtrOutput
	ToCVSSScopePtrOutputWithContext(context.Context) CVSSScopePtrOutput
}

type cvssscopePtr string

func CVSSScopePtr(v string) CVSSScopePtrInput {
	return (*cvssscopePtr)(&v)
}

func (*cvssscopePtr) ElementType() reflect.Type {
	return cvssscopePtrType
}

func (in *cvssscopePtr) ToCVSSScopePtrOutput() CVSSScopePtrOutput {
	return pulumi.ToOutput(in).(CVSSScopePtrOutput)
}

func (in *cvssscopePtr) ToCVSSScopePtrOutputWithContext(ctx context.Context) CVSSScopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CVSSScopePtrOutput)
}

func (in *cvssscopePtr) ToOutput(ctx context.Context) pulumix.Output[*CVSSScope] {
	return pulumix.Output[*CVSSScope]{
		OutputState: in.ToCVSSScopePtrOutputWithContext(ctx).OutputState,
	}
}

// Defined in CVSS v3
type CVSSUserInteraction string

const (
	// Defined in CVSS v3
	CVSSUserInteractionUserInteractionUnspecified = CVSSUserInteraction("USER_INTERACTION_UNSPECIFIED")
	// Defined in CVSS v3
	CVSSUserInteractionUserInteractionNone = CVSSUserInteraction("USER_INTERACTION_NONE")
	// Defined in CVSS v3
	CVSSUserInteractionUserInteractionRequired = CVSSUserInteraction("USER_INTERACTION_REQUIRED")
)

func (CVSSUserInteraction) ElementType() reflect.Type {
	return reflect.TypeOf((*CVSSUserInteraction)(nil)).Elem()
}

func (e CVSSUserInteraction) ToCVSSUserInteractionOutput() CVSSUserInteractionOutput {
	return pulumi.ToOutput(e).(CVSSUserInteractionOutput)
}

func (e CVSSUserInteraction) ToCVSSUserInteractionOutputWithContext(ctx context.Context) CVSSUserInteractionOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CVSSUserInteractionOutput)
}

func (e CVSSUserInteraction) ToCVSSUserInteractionPtrOutput() CVSSUserInteractionPtrOutput {
	return e.ToCVSSUserInteractionPtrOutputWithContext(context.Background())
}

func (e CVSSUserInteraction) ToCVSSUserInteractionPtrOutputWithContext(ctx context.Context) CVSSUserInteractionPtrOutput {
	return CVSSUserInteraction(e).ToCVSSUserInteractionOutputWithContext(ctx).ToCVSSUserInteractionPtrOutputWithContext(ctx)
}

func (e CVSSUserInteraction) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CVSSUserInteraction) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CVSSUserInteraction) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CVSSUserInteraction) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CVSSUserInteractionOutput struct{ *pulumi.OutputState }

func (CVSSUserInteractionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CVSSUserInteraction)(nil)).Elem()
}

func (o CVSSUserInteractionOutput) ToCVSSUserInteractionOutput() CVSSUserInteractionOutput {
	return o
}

func (o CVSSUserInteractionOutput) ToCVSSUserInteractionOutputWithContext(ctx context.Context) CVSSUserInteractionOutput {
	return o
}

func (o CVSSUserInteractionOutput) ToCVSSUserInteractionPtrOutput() CVSSUserInteractionPtrOutput {
	return o.ToCVSSUserInteractionPtrOutputWithContext(context.Background())
}

func (o CVSSUserInteractionOutput) ToCVSSUserInteractionPtrOutputWithContext(ctx context.Context) CVSSUserInteractionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CVSSUserInteraction) *CVSSUserInteraction {
		return &v
	}).(CVSSUserInteractionPtrOutput)
}

func (o CVSSUserInteractionOutput) ToOutput(ctx context.Context) pulumix.Output[CVSSUserInteraction] {
	return pulumix.Output[CVSSUserInteraction]{
		OutputState: o.OutputState,
	}
}

func (o CVSSUserInteractionOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CVSSUserInteractionOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CVSSUserInteraction) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CVSSUserInteractionOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CVSSUserInteractionOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CVSSUserInteraction) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CVSSUserInteractionPtrOutput struct{ *pulumi.OutputState }

func (CVSSUserInteractionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CVSSUserInteraction)(nil)).Elem()
}

func (o CVSSUserInteractionPtrOutput) ToCVSSUserInteractionPtrOutput() CVSSUserInteractionPtrOutput {
	return o
}

func (o CVSSUserInteractionPtrOutput) ToCVSSUserInteractionPtrOutputWithContext(ctx context.Context) CVSSUserInteractionPtrOutput {
	return o
}

func (o CVSSUserInteractionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CVSSUserInteraction] {
	return pulumix.Output[*CVSSUserInteraction]{
		OutputState: o.OutputState,
	}
}

func (o CVSSUserInteractionPtrOutput) Elem() CVSSUserInteractionOutput {
	return o.ApplyT(func(v *CVSSUserInteraction) CVSSUserInteraction {
		if v != nil {
			return *v
		}
		var ret CVSSUserInteraction
		return ret
	}).(CVSSUserInteractionOutput)
}

func (o CVSSUserInteractionPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CVSSUserInteractionPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CVSSUserInteraction) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CVSSUserInteractionInput is an input type that accepts CVSSUserInteractionArgs and CVSSUserInteractionOutput values.
// You can construct a concrete instance of `CVSSUserInteractionInput` via:
//
//	CVSSUserInteractionArgs{...}
type CVSSUserInteractionInput interface {
	pulumi.Input

	ToCVSSUserInteractionOutput() CVSSUserInteractionOutput
	ToCVSSUserInteractionOutputWithContext(context.Context) CVSSUserInteractionOutput
}

var cvssuserInteractionPtrType = reflect.TypeOf((**CVSSUserInteraction)(nil)).Elem()

type CVSSUserInteractionPtrInput interface {
	pulumi.Input

	ToCVSSUserInteractionPtrOutput() CVSSUserInteractionPtrOutput
	ToCVSSUserInteractionPtrOutputWithContext(context.Context) CVSSUserInteractionPtrOutput
}

type cvssuserInteractionPtr string

func CVSSUserInteractionPtr(v string) CVSSUserInteractionPtrInput {
	return (*cvssuserInteractionPtr)(&v)
}

func (*cvssuserInteractionPtr) ElementType() reflect.Type {
	return cvssuserInteractionPtrType
}

func (in *cvssuserInteractionPtr) ToCVSSUserInteractionPtrOutput() CVSSUserInteractionPtrOutput {
	return pulumi.ToOutput(in).(CVSSUserInteractionPtrOutput)
}

func (in *cvssuserInteractionPtr) ToCVSSUserInteractionPtrOutputWithContext(ctx context.Context) CVSSUserInteractionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CVSSUserInteractionPtrOutput)
}

func (in *cvssuserInteractionPtr) ToOutput(ctx context.Context) pulumix.Output[*CVSSUserInteraction] {
	return pulumix.Output[*CVSSUserInteraction]{
		OutputState: in.ToCVSSUserInteractionPtrOutputWithContext(ctx).OutputState,
	}
}

type CVSSv3AttackComplexity string

const (
	CVSSv3AttackComplexityAttackComplexityUnspecified = CVSSv3AttackComplexity("ATTACK_COMPLEXITY_UNSPECIFIED")
	CVSSv3AttackComplexityAttackComplexityLow         = CVSSv3AttackComplexity("ATTACK_COMPLEXITY_LOW")
	CVSSv3AttackComplexityAttackComplexityHigh        = CVSSv3AttackComplexity("ATTACK_COMPLEXITY_HIGH")
)

func (CVSSv3AttackComplexity) ElementType() reflect.Type {
	return reflect.TypeOf((*CVSSv3AttackComplexity)(nil)).Elem()
}

func (e CVSSv3AttackComplexity) ToCVSSv3AttackComplexityOutput() CVSSv3AttackComplexityOutput {
	return pulumi.ToOutput(e).(CVSSv3AttackComplexityOutput)
}

func (e CVSSv3AttackComplexity) ToCVSSv3AttackComplexityOutputWithContext(ctx context.Context) CVSSv3AttackComplexityOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CVSSv3AttackComplexityOutput)
}

func (e CVSSv3AttackComplexity) ToCVSSv3AttackComplexityPtrOutput() CVSSv3AttackComplexityPtrOutput {
	return e.ToCVSSv3AttackComplexityPtrOutputWithContext(context.Background())
}

func (e CVSSv3AttackComplexity) ToCVSSv3AttackComplexityPtrOutputWithContext(ctx context.Context) CVSSv3AttackComplexityPtrOutput {
	return CVSSv3AttackComplexity(e).ToCVSSv3AttackComplexityOutputWithContext(ctx).ToCVSSv3AttackComplexityPtrOutputWithContext(ctx)
}

func (e CVSSv3AttackComplexity) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CVSSv3AttackComplexity) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CVSSv3AttackComplexity) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CVSSv3AttackComplexity) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CVSSv3AttackComplexityOutput struct{ *pulumi.OutputState }

func (CVSSv3AttackComplexityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CVSSv3AttackComplexity)(nil)).Elem()
}

func (o CVSSv3AttackComplexityOutput) ToCVSSv3AttackComplexityOutput() CVSSv3AttackComplexityOutput {
	return o
}

func (o CVSSv3AttackComplexityOutput) ToCVSSv3AttackComplexityOutputWithContext(ctx context.Context) CVSSv3AttackComplexityOutput {
	return o
}

func (o CVSSv3AttackComplexityOutput) ToCVSSv3AttackComplexityPtrOutput() CVSSv3AttackComplexityPtrOutput {
	return o.ToCVSSv3AttackComplexityPtrOutputWithContext(context.Background())
}

func (o CVSSv3AttackComplexityOutput) ToCVSSv3AttackComplexityPtrOutputWithContext(ctx context.Context) CVSSv3AttackComplexityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CVSSv3AttackComplexity) *CVSSv3AttackComplexity {
		return &v
	}).(CVSSv3AttackComplexityPtrOutput)
}

func (o CVSSv3AttackComplexityOutput) ToOutput(ctx context.Context) pulumix.Output[CVSSv3AttackComplexity] {
	return pulumix.Output[CVSSv3AttackComplexity]{
		OutputState: o.OutputState,
	}
}

func (o CVSSv3AttackComplexityOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CVSSv3AttackComplexityOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CVSSv3AttackComplexity) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CVSSv3AttackComplexityOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CVSSv3AttackComplexityOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CVSSv3AttackComplexity) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CVSSv3AttackComplexityPtrOutput struct{ *pulumi.OutputState }

func (CVSSv3AttackComplexityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CVSSv3AttackComplexity)(nil)).Elem()
}

func (o CVSSv3AttackComplexityPtrOutput) ToCVSSv3AttackComplexityPtrOutput() CVSSv3AttackComplexityPtrOutput {
	return o
}

func (o CVSSv3AttackComplexityPtrOutput) ToCVSSv3AttackComplexityPtrOutputWithContext(ctx context.Context) CVSSv3AttackComplexityPtrOutput {
	return o
}

func (o CVSSv3AttackComplexityPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CVSSv3AttackComplexity] {
	return pulumix.Output[*CVSSv3AttackComplexity]{
		OutputState: o.OutputState,
	}
}

func (o CVSSv3AttackComplexityPtrOutput) Elem() CVSSv3AttackComplexityOutput {
	return o.ApplyT(func(v *CVSSv3AttackComplexity) CVSSv3AttackComplexity {
		if v != nil {
			return *v
		}
		var ret CVSSv3AttackComplexity
		return ret
	}).(CVSSv3AttackComplexityOutput)
}

func (o CVSSv3AttackComplexityPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CVSSv3AttackComplexityPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CVSSv3AttackComplexity) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CVSSv3AttackComplexityInput is an input type that accepts CVSSv3AttackComplexityArgs and CVSSv3AttackComplexityOutput values.
// You can construct a concrete instance of `CVSSv3AttackComplexityInput` via:
//
//	CVSSv3AttackComplexityArgs{...}
type CVSSv3AttackComplexityInput interface {
	pulumi.Input

	ToCVSSv3AttackComplexityOutput() CVSSv3AttackComplexityOutput
	ToCVSSv3AttackComplexityOutputWithContext(context.Context) CVSSv3AttackComplexityOutput
}

var cvssv3AttackComplexityPtrType = reflect.TypeOf((**CVSSv3AttackComplexity)(nil)).Elem()

type CVSSv3AttackComplexityPtrInput interface {
	pulumi.Input

	ToCVSSv3AttackComplexityPtrOutput() CVSSv3AttackComplexityPtrOutput
	ToCVSSv3AttackComplexityPtrOutputWithContext(context.Context) CVSSv3AttackComplexityPtrOutput
}

type cvssv3AttackComplexityPtr string

func CVSSv3AttackComplexityPtr(v string) CVSSv3AttackComplexityPtrInput {
	return (*cvssv3AttackComplexityPtr)(&v)
}

func (*cvssv3AttackComplexityPtr) ElementType() reflect.Type {
	return cvssv3AttackComplexityPtrType
}

func (in *cvssv3AttackComplexityPtr) ToCVSSv3AttackComplexityPtrOutput() CVSSv3AttackComplexityPtrOutput {
	return pulumi.ToOutput(in).(CVSSv3AttackComplexityPtrOutput)
}

func (in *cvssv3AttackComplexityPtr) ToCVSSv3AttackComplexityPtrOutputWithContext(ctx context.Context) CVSSv3AttackComplexityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CVSSv3AttackComplexityPtrOutput)
}

func (in *cvssv3AttackComplexityPtr) ToOutput(ctx context.Context) pulumix.Output[*CVSSv3AttackComplexity] {
	return pulumix.Output[*CVSSv3AttackComplexity]{
		OutputState: in.ToCVSSv3AttackComplexityPtrOutputWithContext(ctx).OutputState,
	}
}

// Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments.
type CVSSv3AttackVector string

const (
	CVSSv3AttackVectorAttackVectorUnspecified = CVSSv3AttackVector("ATTACK_VECTOR_UNSPECIFIED")
	CVSSv3AttackVectorAttackVectorNetwork     = CVSSv3AttackVector("ATTACK_VECTOR_NETWORK")
	CVSSv3AttackVectorAttackVectorAdjacent    = CVSSv3AttackVector("ATTACK_VECTOR_ADJACENT")
	CVSSv3AttackVectorAttackVectorLocal       = CVSSv3AttackVector("ATTACK_VECTOR_LOCAL")
	CVSSv3AttackVectorAttackVectorPhysical    = CVSSv3AttackVector("ATTACK_VECTOR_PHYSICAL")
)

func (CVSSv3AttackVector) ElementType() reflect.Type {
	return reflect.TypeOf((*CVSSv3AttackVector)(nil)).Elem()
}

func (e CVSSv3AttackVector) ToCVSSv3AttackVectorOutput() CVSSv3AttackVectorOutput {
	return pulumi.ToOutput(e).(CVSSv3AttackVectorOutput)
}

func (e CVSSv3AttackVector) ToCVSSv3AttackVectorOutputWithContext(ctx context.Context) CVSSv3AttackVectorOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CVSSv3AttackVectorOutput)
}

func (e CVSSv3AttackVector) ToCVSSv3AttackVectorPtrOutput() CVSSv3AttackVectorPtrOutput {
	return e.ToCVSSv3AttackVectorPtrOutputWithContext(context.Background())
}

func (e CVSSv3AttackVector) ToCVSSv3AttackVectorPtrOutputWithContext(ctx context.Context) CVSSv3AttackVectorPtrOutput {
	return CVSSv3AttackVector(e).ToCVSSv3AttackVectorOutputWithContext(ctx).ToCVSSv3AttackVectorPtrOutputWithContext(ctx)
}

func (e CVSSv3AttackVector) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CVSSv3AttackVector) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CVSSv3AttackVector) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CVSSv3AttackVector) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CVSSv3AttackVectorOutput struct{ *pulumi.OutputState }

func (CVSSv3AttackVectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CVSSv3AttackVector)(nil)).Elem()
}

func (o CVSSv3AttackVectorOutput) ToCVSSv3AttackVectorOutput() CVSSv3AttackVectorOutput {
	return o
}

func (o CVSSv3AttackVectorOutput) ToCVSSv3AttackVectorOutputWithContext(ctx context.Context) CVSSv3AttackVectorOutput {
	return o
}

func (o CVSSv3AttackVectorOutput) ToCVSSv3AttackVectorPtrOutput() CVSSv3AttackVectorPtrOutput {
	return o.ToCVSSv3AttackVectorPtrOutputWithContext(context.Background())
}

func (o CVSSv3AttackVectorOutput) ToCVSSv3AttackVectorPtrOutputWithContext(ctx context.Context) CVSSv3AttackVectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CVSSv3AttackVector) *CVSSv3AttackVector {
		return &v
	}).(CVSSv3AttackVectorPtrOutput)
}

func (o CVSSv3AttackVectorOutput) ToOutput(ctx context.Context) pulumix.Output[CVSSv3AttackVector] {
	return pulumix.Output[CVSSv3AttackVector]{
		OutputState: o.OutputState,
	}
}

func (o CVSSv3AttackVectorOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CVSSv3AttackVectorOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CVSSv3AttackVector) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CVSSv3AttackVectorOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CVSSv3AttackVectorOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CVSSv3AttackVector) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CVSSv3AttackVectorPtrOutput struct{ *pulumi.OutputState }

func (CVSSv3AttackVectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CVSSv3AttackVector)(nil)).Elem()
}

func (o CVSSv3AttackVectorPtrOutput) ToCVSSv3AttackVectorPtrOutput() CVSSv3AttackVectorPtrOutput {
	return o
}

func (o CVSSv3AttackVectorPtrOutput) ToCVSSv3AttackVectorPtrOutputWithContext(ctx context.Context) CVSSv3AttackVectorPtrOutput {
	return o
}

func (o CVSSv3AttackVectorPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CVSSv3AttackVector] {
	return pulumix.Output[*CVSSv3AttackVector]{
		OutputState: o.OutputState,
	}
}

func (o CVSSv3AttackVectorPtrOutput) Elem() CVSSv3AttackVectorOutput {
	return o.ApplyT(func(v *CVSSv3AttackVector) CVSSv3AttackVector {
		if v != nil {
			return *v
		}
		var ret CVSSv3AttackVector
		return ret
	}).(CVSSv3AttackVectorOutput)
}

func (o CVSSv3AttackVectorPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CVSSv3AttackVectorPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CVSSv3AttackVector) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CVSSv3AttackVectorInput is an input type that accepts CVSSv3AttackVectorArgs and CVSSv3AttackVectorOutput values.
// You can construct a concrete instance of `CVSSv3AttackVectorInput` via:
//
//	CVSSv3AttackVectorArgs{...}
type CVSSv3AttackVectorInput interface {
	pulumi.Input

	ToCVSSv3AttackVectorOutput() CVSSv3AttackVectorOutput
	ToCVSSv3AttackVectorOutputWithContext(context.Context) CVSSv3AttackVectorOutput
}

var cvssv3AttackVectorPtrType = reflect.TypeOf((**CVSSv3AttackVector)(nil)).Elem()

type CVSSv3AttackVectorPtrInput interface {
	pulumi.Input

	ToCVSSv3AttackVectorPtrOutput() CVSSv3AttackVectorPtrOutput
	ToCVSSv3AttackVectorPtrOutputWithContext(context.Context) CVSSv3AttackVectorPtrOutput
}

type cvssv3AttackVectorPtr string

func CVSSv3AttackVectorPtr(v string) CVSSv3AttackVectorPtrInput {
	return (*cvssv3AttackVectorPtr)(&v)
}

func (*cvssv3AttackVectorPtr) ElementType() reflect.Type {
	return cvssv3AttackVectorPtrType
}

func (in *cvssv3AttackVectorPtr) ToCVSSv3AttackVectorPtrOutput() CVSSv3AttackVectorPtrOutput {
	return pulumi.ToOutput(in).(CVSSv3AttackVectorPtrOutput)
}

func (in *cvssv3AttackVectorPtr) ToCVSSv3AttackVectorPtrOutputWithContext(ctx context.Context) CVSSv3AttackVectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CVSSv3AttackVectorPtrOutput)
}

func (in *cvssv3AttackVectorPtr) ToOutput(ctx context.Context) pulumix.Output[*CVSSv3AttackVector] {
	return pulumix.Output[*CVSSv3AttackVector]{
		OutputState: in.ToCVSSv3AttackVectorPtrOutputWithContext(ctx).OutputState,
	}
}

type CVSSv3AvailabilityImpact string

const (
	CVSSv3AvailabilityImpactImpactUnspecified = CVSSv3AvailabilityImpact("IMPACT_UNSPECIFIED")
	CVSSv3AvailabilityImpactImpactHigh        = CVSSv3AvailabilityImpact("IMPACT_HIGH")
	CVSSv3AvailabilityImpactImpactLow         = CVSSv3AvailabilityImpact("IMPACT_LOW")
	CVSSv3AvailabilityImpactImpactNone        = CVSSv3AvailabilityImpact("IMPACT_NONE")
)

func (CVSSv3AvailabilityImpact) ElementType() reflect.Type {
	return reflect.TypeOf((*CVSSv3AvailabilityImpact)(nil)).Elem()
}

func (e CVSSv3AvailabilityImpact) ToCVSSv3AvailabilityImpactOutput() CVSSv3AvailabilityImpactOutput {
	return pulumi.ToOutput(e).(CVSSv3AvailabilityImpactOutput)
}

func (e CVSSv3AvailabilityImpact) ToCVSSv3AvailabilityImpactOutputWithContext(ctx context.Context) CVSSv3AvailabilityImpactOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CVSSv3AvailabilityImpactOutput)
}

func (e CVSSv3AvailabilityImpact) ToCVSSv3AvailabilityImpactPtrOutput() CVSSv3AvailabilityImpactPtrOutput {
	return e.ToCVSSv3AvailabilityImpactPtrOutputWithContext(context.Background())
}

func (e CVSSv3AvailabilityImpact) ToCVSSv3AvailabilityImpactPtrOutputWithContext(ctx context.Context) CVSSv3AvailabilityImpactPtrOutput {
	return CVSSv3AvailabilityImpact(e).ToCVSSv3AvailabilityImpactOutputWithContext(ctx).ToCVSSv3AvailabilityImpactPtrOutputWithContext(ctx)
}

func (e CVSSv3AvailabilityImpact) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CVSSv3AvailabilityImpact) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CVSSv3AvailabilityImpact) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CVSSv3AvailabilityImpact) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CVSSv3AvailabilityImpactOutput struct{ *pulumi.OutputState }

func (CVSSv3AvailabilityImpactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CVSSv3AvailabilityImpact)(nil)).Elem()
}

func (o CVSSv3AvailabilityImpactOutput) ToCVSSv3AvailabilityImpactOutput() CVSSv3AvailabilityImpactOutput {
	return o
}

func (o CVSSv3AvailabilityImpactOutput) ToCVSSv3AvailabilityImpactOutputWithContext(ctx context.Context) CVSSv3AvailabilityImpactOutput {
	return o
}

func (o CVSSv3AvailabilityImpactOutput) ToCVSSv3AvailabilityImpactPtrOutput() CVSSv3AvailabilityImpactPtrOutput {
	return o.ToCVSSv3AvailabilityImpactPtrOutputWithContext(context.Background())
}

func (o CVSSv3AvailabilityImpactOutput) ToCVSSv3AvailabilityImpactPtrOutputWithContext(ctx context.Context) CVSSv3AvailabilityImpactPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CVSSv3AvailabilityImpact) *CVSSv3AvailabilityImpact {
		return &v
	}).(CVSSv3AvailabilityImpactPtrOutput)
}

func (o CVSSv3AvailabilityImpactOutput) ToOutput(ctx context.Context) pulumix.Output[CVSSv3AvailabilityImpact] {
	return pulumix.Output[CVSSv3AvailabilityImpact]{
		OutputState: o.OutputState,
	}
}

func (o CVSSv3AvailabilityImpactOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CVSSv3AvailabilityImpactOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CVSSv3AvailabilityImpact) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CVSSv3AvailabilityImpactOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CVSSv3AvailabilityImpactOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CVSSv3AvailabilityImpact) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CVSSv3AvailabilityImpactPtrOutput struct{ *pulumi.OutputState }

func (CVSSv3AvailabilityImpactPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CVSSv3AvailabilityImpact)(nil)).Elem()
}

func (o CVSSv3AvailabilityImpactPtrOutput) ToCVSSv3AvailabilityImpactPtrOutput() CVSSv3AvailabilityImpactPtrOutput {
	return o
}

func (o CVSSv3AvailabilityImpactPtrOutput) ToCVSSv3AvailabilityImpactPtrOutputWithContext(ctx context.Context) CVSSv3AvailabilityImpactPtrOutput {
	return o
}

func (o CVSSv3AvailabilityImpactPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CVSSv3AvailabilityImpact] {
	return pulumix.Output[*CVSSv3AvailabilityImpact]{
		OutputState: o.OutputState,
	}
}

func (o CVSSv3AvailabilityImpactPtrOutput) Elem() CVSSv3AvailabilityImpactOutput {
	return o.ApplyT(func(v *CVSSv3AvailabilityImpact) CVSSv3AvailabilityImpact {
		if v != nil {
			return *v
		}
		var ret CVSSv3AvailabilityImpact
		return ret
	}).(CVSSv3AvailabilityImpactOutput)
}

func (o CVSSv3AvailabilityImpactPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CVSSv3AvailabilityImpactPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CVSSv3AvailabilityImpact) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CVSSv3AvailabilityImpactInput is an input type that accepts CVSSv3AvailabilityImpactArgs and CVSSv3AvailabilityImpactOutput values.
// You can construct a concrete instance of `CVSSv3AvailabilityImpactInput` via:
//
//	CVSSv3AvailabilityImpactArgs{...}
type CVSSv3AvailabilityImpactInput interface {
	pulumi.Input

	ToCVSSv3AvailabilityImpactOutput() CVSSv3AvailabilityImpactOutput
	ToCVSSv3AvailabilityImpactOutputWithContext(context.Context) CVSSv3AvailabilityImpactOutput
}

var cvssv3AvailabilityImpactPtrType = reflect.TypeOf((**CVSSv3AvailabilityImpact)(nil)).Elem()

type CVSSv3AvailabilityImpactPtrInput interface {
	pulumi.Input

	ToCVSSv3AvailabilityImpactPtrOutput() CVSSv3AvailabilityImpactPtrOutput
	ToCVSSv3AvailabilityImpactPtrOutputWithContext(context.Context) CVSSv3AvailabilityImpactPtrOutput
}

type cvssv3AvailabilityImpactPtr string

func CVSSv3AvailabilityImpactPtr(v string) CVSSv3AvailabilityImpactPtrInput {
	return (*cvssv3AvailabilityImpactPtr)(&v)
}

func (*cvssv3AvailabilityImpactPtr) ElementType() reflect.Type {
	return cvssv3AvailabilityImpactPtrType
}

func (in *cvssv3AvailabilityImpactPtr) ToCVSSv3AvailabilityImpactPtrOutput() CVSSv3AvailabilityImpactPtrOutput {
	return pulumi.ToOutput(in).(CVSSv3AvailabilityImpactPtrOutput)
}

func (in *cvssv3AvailabilityImpactPtr) ToCVSSv3AvailabilityImpactPtrOutputWithContext(ctx context.Context) CVSSv3AvailabilityImpactPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CVSSv3AvailabilityImpactPtrOutput)
}

func (in *cvssv3AvailabilityImpactPtr) ToOutput(ctx context.Context) pulumix.Output[*CVSSv3AvailabilityImpact] {
	return pulumix.Output[*CVSSv3AvailabilityImpact]{
		OutputState: in.ToCVSSv3AvailabilityImpactPtrOutputWithContext(ctx).OutputState,
	}
}

type CVSSv3ConfidentialityImpact string

const (
	CVSSv3ConfidentialityImpactImpactUnspecified = CVSSv3ConfidentialityImpact("IMPACT_UNSPECIFIED")
	CVSSv3ConfidentialityImpactImpactHigh        = CVSSv3ConfidentialityImpact("IMPACT_HIGH")
	CVSSv3ConfidentialityImpactImpactLow         = CVSSv3ConfidentialityImpact("IMPACT_LOW")
	CVSSv3ConfidentialityImpactImpactNone        = CVSSv3ConfidentialityImpact("IMPACT_NONE")
)

func (CVSSv3ConfidentialityImpact) ElementType() reflect.Type {
	return reflect.TypeOf((*CVSSv3ConfidentialityImpact)(nil)).Elem()
}

func (e CVSSv3ConfidentialityImpact) ToCVSSv3ConfidentialityImpactOutput() CVSSv3ConfidentialityImpactOutput {
	return pulumi.ToOutput(e).(CVSSv3ConfidentialityImpactOutput)
}

func (e CVSSv3ConfidentialityImpact) ToCVSSv3ConfidentialityImpactOutputWithContext(ctx context.Context) CVSSv3ConfidentialityImpactOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CVSSv3ConfidentialityImpactOutput)
}

func (e CVSSv3ConfidentialityImpact) ToCVSSv3ConfidentialityImpactPtrOutput() CVSSv3ConfidentialityImpactPtrOutput {
	return e.ToCVSSv3ConfidentialityImpactPtrOutputWithContext(context.Background())
}

func (e CVSSv3ConfidentialityImpact) ToCVSSv3ConfidentialityImpactPtrOutputWithContext(ctx context.Context) CVSSv3ConfidentialityImpactPtrOutput {
	return CVSSv3ConfidentialityImpact(e).ToCVSSv3ConfidentialityImpactOutputWithContext(ctx).ToCVSSv3ConfidentialityImpactPtrOutputWithContext(ctx)
}

func (e CVSSv3ConfidentialityImpact) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CVSSv3ConfidentialityImpact) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CVSSv3ConfidentialityImpact) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CVSSv3ConfidentialityImpact) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CVSSv3ConfidentialityImpactOutput struct{ *pulumi.OutputState }

func (CVSSv3ConfidentialityImpactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CVSSv3ConfidentialityImpact)(nil)).Elem()
}

func (o CVSSv3ConfidentialityImpactOutput) ToCVSSv3ConfidentialityImpactOutput() CVSSv3ConfidentialityImpactOutput {
	return o
}

func (o CVSSv3ConfidentialityImpactOutput) ToCVSSv3ConfidentialityImpactOutputWithContext(ctx context.Context) CVSSv3ConfidentialityImpactOutput {
	return o
}

func (o CVSSv3ConfidentialityImpactOutput) ToCVSSv3ConfidentialityImpactPtrOutput() CVSSv3ConfidentialityImpactPtrOutput {
	return o.ToCVSSv3ConfidentialityImpactPtrOutputWithContext(context.Background())
}

func (o CVSSv3ConfidentialityImpactOutput) ToCVSSv3ConfidentialityImpactPtrOutputWithContext(ctx context.Context) CVSSv3ConfidentialityImpactPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CVSSv3ConfidentialityImpact) *CVSSv3ConfidentialityImpact {
		return &v
	}).(CVSSv3ConfidentialityImpactPtrOutput)
}

func (o CVSSv3ConfidentialityImpactOutput) ToOutput(ctx context.Context) pulumix.Output[CVSSv3ConfidentialityImpact] {
	return pulumix.Output[CVSSv3ConfidentialityImpact]{
		OutputState: o.OutputState,
	}
}

func (o CVSSv3ConfidentialityImpactOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CVSSv3ConfidentialityImpactOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CVSSv3ConfidentialityImpact) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CVSSv3ConfidentialityImpactOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CVSSv3ConfidentialityImpactOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CVSSv3ConfidentialityImpact) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CVSSv3ConfidentialityImpactPtrOutput struct{ *pulumi.OutputState }

func (CVSSv3ConfidentialityImpactPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CVSSv3ConfidentialityImpact)(nil)).Elem()
}

func (o CVSSv3ConfidentialityImpactPtrOutput) ToCVSSv3ConfidentialityImpactPtrOutput() CVSSv3ConfidentialityImpactPtrOutput {
	return o
}

func (o CVSSv3ConfidentialityImpactPtrOutput) ToCVSSv3ConfidentialityImpactPtrOutputWithContext(ctx context.Context) CVSSv3ConfidentialityImpactPtrOutput {
	return o
}

func (o CVSSv3ConfidentialityImpactPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CVSSv3ConfidentialityImpact] {
	return pulumix.Output[*CVSSv3ConfidentialityImpact]{
		OutputState: o.OutputState,
	}
}

func (o CVSSv3ConfidentialityImpactPtrOutput) Elem() CVSSv3ConfidentialityImpactOutput {
	return o.ApplyT(func(v *CVSSv3ConfidentialityImpact) CVSSv3ConfidentialityImpact {
		if v != nil {
			return *v
		}
		var ret CVSSv3ConfidentialityImpact
		return ret
	}).(CVSSv3ConfidentialityImpactOutput)
}

func (o CVSSv3ConfidentialityImpactPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CVSSv3ConfidentialityImpactPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CVSSv3ConfidentialityImpact) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CVSSv3ConfidentialityImpactInput is an input type that accepts CVSSv3ConfidentialityImpactArgs and CVSSv3ConfidentialityImpactOutput values.
// You can construct a concrete instance of `CVSSv3ConfidentialityImpactInput` via:
//
//	CVSSv3ConfidentialityImpactArgs{...}
type CVSSv3ConfidentialityImpactInput interface {
	pulumi.Input

	ToCVSSv3ConfidentialityImpactOutput() CVSSv3ConfidentialityImpactOutput
	ToCVSSv3ConfidentialityImpactOutputWithContext(context.Context) CVSSv3ConfidentialityImpactOutput
}

var cvssv3ConfidentialityImpactPtrType = reflect.TypeOf((**CVSSv3ConfidentialityImpact)(nil)).Elem()

type CVSSv3ConfidentialityImpactPtrInput interface {
	pulumi.Input

	ToCVSSv3ConfidentialityImpactPtrOutput() CVSSv3ConfidentialityImpactPtrOutput
	ToCVSSv3ConfidentialityImpactPtrOutputWithContext(context.Context) CVSSv3ConfidentialityImpactPtrOutput
}

type cvssv3ConfidentialityImpactPtr string

func CVSSv3ConfidentialityImpactPtr(v string) CVSSv3ConfidentialityImpactPtrInput {
	return (*cvssv3ConfidentialityImpactPtr)(&v)
}

func (*cvssv3ConfidentialityImpactPtr) ElementType() reflect.Type {
	return cvssv3ConfidentialityImpactPtrType
}

func (in *cvssv3ConfidentialityImpactPtr) ToCVSSv3ConfidentialityImpactPtrOutput() CVSSv3ConfidentialityImpactPtrOutput {
	return pulumi.ToOutput(in).(CVSSv3ConfidentialityImpactPtrOutput)
}

func (in *cvssv3ConfidentialityImpactPtr) ToCVSSv3ConfidentialityImpactPtrOutputWithContext(ctx context.Context) CVSSv3ConfidentialityImpactPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CVSSv3ConfidentialityImpactPtrOutput)
}

func (in *cvssv3ConfidentialityImpactPtr) ToOutput(ctx context.Context) pulumix.Output[*CVSSv3ConfidentialityImpact] {
	return pulumix.Output[*CVSSv3ConfidentialityImpact]{
		OutputState: in.ToCVSSv3ConfidentialityImpactPtrOutputWithContext(ctx).OutputState,
	}
}

type CVSSv3IntegrityImpact string

const (
	CVSSv3IntegrityImpactImpactUnspecified = CVSSv3IntegrityImpact("IMPACT_UNSPECIFIED")
	CVSSv3IntegrityImpactImpactHigh        = CVSSv3IntegrityImpact("IMPACT_HIGH")
	CVSSv3IntegrityImpactImpactLow         = CVSSv3IntegrityImpact("IMPACT_LOW")
	CVSSv3IntegrityImpactImpactNone        = CVSSv3IntegrityImpact("IMPACT_NONE")
)

func (CVSSv3IntegrityImpact) ElementType() reflect.Type {
	return reflect.TypeOf((*CVSSv3IntegrityImpact)(nil)).Elem()
}

func (e CVSSv3IntegrityImpact) ToCVSSv3IntegrityImpactOutput() CVSSv3IntegrityImpactOutput {
	return pulumi.ToOutput(e).(CVSSv3IntegrityImpactOutput)
}

func (e CVSSv3IntegrityImpact) ToCVSSv3IntegrityImpactOutputWithContext(ctx context.Context) CVSSv3IntegrityImpactOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CVSSv3IntegrityImpactOutput)
}

func (e CVSSv3IntegrityImpact) ToCVSSv3IntegrityImpactPtrOutput() CVSSv3IntegrityImpactPtrOutput {
	return e.ToCVSSv3IntegrityImpactPtrOutputWithContext(context.Background())
}

func (e CVSSv3IntegrityImpact) ToCVSSv3IntegrityImpactPtrOutputWithContext(ctx context.Context) CVSSv3IntegrityImpactPtrOutput {
	return CVSSv3IntegrityImpact(e).ToCVSSv3IntegrityImpactOutputWithContext(ctx).ToCVSSv3IntegrityImpactPtrOutputWithContext(ctx)
}

func (e CVSSv3IntegrityImpact) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CVSSv3IntegrityImpact) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CVSSv3IntegrityImpact) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CVSSv3IntegrityImpact) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CVSSv3IntegrityImpactOutput struct{ *pulumi.OutputState }

func (CVSSv3IntegrityImpactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CVSSv3IntegrityImpact)(nil)).Elem()
}

func (o CVSSv3IntegrityImpactOutput) ToCVSSv3IntegrityImpactOutput() CVSSv3IntegrityImpactOutput {
	return o
}

func (o CVSSv3IntegrityImpactOutput) ToCVSSv3IntegrityImpactOutputWithContext(ctx context.Context) CVSSv3IntegrityImpactOutput {
	return o
}

func (o CVSSv3IntegrityImpactOutput) ToCVSSv3IntegrityImpactPtrOutput() CVSSv3IntegrityImpactPtrOutput {
	return o.ToCVSSv3IntegrityImpactPtrOutputWithContext(context.Background())
}

func (o CVSSv3IntegrityImpactOutput) ToCVSSv3IntegrityImpactPtrOutputWithContext(ctx context.Context) CVSSv3IntegrityImpactPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CVSSv3IntegrityImpact) *CVSSv3IntegrityImpact {
		return &v
	}).(CVSSv3IntegrityImpactPtrOutput)
}

func (o CVSSv3IntegrityImpactOutput) ToOutput(ctx context.Context) pulumix.Output[CVSSv3IntegrityImpact] {
	return pulumix.Output[CVSSv3IntegrityImpact]{
		OutputState: o.OutputState,
	}
}

func (o CVSSv3IntegrityImpactOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CVSSv3IntegrityImpactOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CVSSv3IntegrityImpact) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CVSSv3IntegrityImpactOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CVSSv3IntegrityImpactOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CVSSv3IntegrityImpact) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CVSSv3IntegrityImpactPtrOutput struct{ *pulumi.OutputState }

func (CVSSv3IntegrityImpactPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CVSSv3IntegrityImpact)(nil)).Elem()
}

func (o CVSSv3IntegrityImpactPtrOutput) ToCVSSv3IntegrityImpactPtrOutput() CVSSv3IntegrityImpactPtrOutput {
	return o
}

func (o CVSSv3IntegrityImpactPtrOutput) ToCVSSv3IntegrityImpactPtrOutputWithContext(ctx context.Context) CVSSv3IntegrityImpactPtrOutput {
	return o
}

func (o CVSSv3IntegrityImpactPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CVSSv3IntegrityImpact] {
	return pulumix.Output[*CVSSv3IntegrityImpact]{
		OutputState: o.OutputState,
	}
}

func (o CVSSv3IntegrityImpactPtrOutput) Elem() CVSSv3IntegrityImpactOutput {
	return o.ApplyT(func(v *CVSSv3IntegrityImpact) CVSSv3IntegrityImpact {
		if v != nil {
			return *v
		}
		var ret CVSSv3IntegrityImpact
		return ret
	}).(CVSSv3IntegrityImpactOutput)
}

func (o CVSSv3IntegrityImpactPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CVSSv3IntegrityImpactPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CVSSv3IntegrityImpact) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CVSSv3IntegrityImpactInput is an input type that accepts CVSSv3IntegrityImpactArgs and CVSSv3IntegrityImpactOutput values.
// You can construct a concrete instance of `CVSSv3IntegrityImpactInput` via:
//
//	CVSSv3IntegrityImpactArgs{...}
type CVSSv3IntegrityImpactInput interface {
	pulumi.Input

	ToCVSSv3IntegrityImpactOutput() CVSSv3IntegrityImpactOutput
	ToCVSSv3IntegrityImpactOutputWithContext(context.Context) CVSSv3IntegrityImpactOutput
}

var cvssv3IntegrityImpactPtrType = reflect.TypeOf((**CVSSv3IntegrityImpact)(nil)).Elem()

type CVSSv3IntegrityImpactPtrInput interface {
	pulumi.Input

	ToCVSSv3IntegrityImpactPtrOutput() CVSSv3IntegrityImpactPtrOutput
	ToCVSSv3IntegrityImpactPtrOutputWithContext(context.Context) CVSSv3IntegrityImpactPtrOutput
}

type cvssv3IntegrityImpactPtr string

func CVSSv3IntegrityImpactPtr(v string) CVSSv3IntegrityImpactPtrInput {
	return (*cvssv3IntegrityImpactPtr)(&v)
}

func (*cvssv3IntegrityImpactPtr) ElementType() reflect.Type {
	return cvssv3IntegrityImpactPtrType
}

func (in *cvssv3IntegrityImpactPtr) ToCVSSv3IntegrityImpactPtrOutput() CVSSv3IntegrityImpactPtrOutput {
	return pulumi.ToOutput(in).(CVSSv3IntegrityImpactPtrOutput)
}

func (in *cvssv3IntegrityImpactPtr) ToCVSSv3IntegrityImpactPtrOutputWithContext(ctx context.Context) CVSSv3IntegrityImpactPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CVSSv3IntegrityImpactPtrOutput)
}

func (in *cvssv3IntegrityImpactPtr) ToOutput(ctx context.Context) pulumix.Output[*CVSSv3IntegrityImpact] {
	return pulumix.Output[*CVSSv3IntegrityImpact]{
		OutputState: in.ToCVSSv3IntegrityImpactPtrOutputWithContext(ctx).OutputState,
	}
}

type CVSSv3PrivilegesRequired string

const (
	CVSSv3PrivilegesRequiredPrivilegesRequiredUnspecified = CVSSv3PrivilegesRequired("PRIVILEGES_REQUIRED_UNSPECIFIED")
	CVSSv3PrivilegesRequiredPrivilegesRequiredNone        = CVSSv3PrivilegesRequired("PRIVILEGES_REQUIRED_NONE")
	CVSSv3PrivilegesRequiredPrivilegesRequiredLow         = CVSSv3PrivilegesRequired("PRIVILEGES_REQUIRED_LOW")
	CVSSv3PrivilegesRequiredPrivilegesRequiredHigh        = CVSSv3PrivilegesRequired("PRIVILEGES_REQUIRED_HIGH")
)

func (CVSSv3PrivilegesRequired) ElementType() reflect.Type {
	return reflect.TypeOf((*CVSSv3PrivilegesRequired)(nil)).Elem()
}

func (e CVSSv3PrivilegesRequired) ToCVSSv3PrivilegesRequiredOutput() CVSSv3PrivilegesRequiredOutput {
	return pulumi.ToOutput(e).(CVSSv3PrivilegesRequiredOutput)
}

func (e CVSSv3PrivilegesRequired) ToCVSSv3PrivilegesRequiredOutputWithContext(ctx context.Context) CVSSv3PrivilegesRequiredOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CVSSv3PrivilegesRequiredOutput)
}

func (e CVSSv3PrivilegesRequired) ToCVSSv3PrivilegesRequiredPtrOutput() CVSSv3PrivilegesRequiredPtrOutput {
	return e.ToCVSSv3PrivilegesRequiredPtrOutputWithContext(context.Background())
}

func (e CVSSv3PrivilegesRequired) ToCVSSv3PrivilegesRequiredPtrOutputWithContext(ctx context.Context) CVSSv3PrivilegesRequiredPtrOutput {
	return CVSSv3PrivilegesRequired(e).ToCVSSv3PrivilegesRequiredOutputWithContext(ctx).ToCVSSv3PrivilegesRequiredPtrOutputWithContext(ctx)
}

func (e CVSSv3PrivilegesRequired) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CVSSv3PrivilegesRequired) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CVSSv3PrivilegesRequired) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CVSSv3PrivilegesRequired) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CVSSv3PrivilegesRequiredOutput struct{ *pulumi.OutputState }

func (CVSSv3PrivilegesRequiredOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CVSSv3PrivilegesRequired)(nil)).Elem()
}

func (o CVSSv3PrivilegesRequiredOutput) ToCVSSv3PrivilegesRequiredOutput() CVSSv3PrivilegesRequiredOutput {
	return o
}

func (o CVSSv3PrivilegesRequiredOutput) ToCVSSv3PrivilegesRequiredOutputWithContext(ctx context.Context) CVSSv3PrivilegesRequiredOutput {
	return o
}

func (o CVSSv3PrivilegesRequiredOutput) ToCVSSv3PrivilegesRequiredPtrOutput() CVSSv3PrivilegesRequiredPtrOutput {
	return o.ToCVSSv3PrivilegesRequiredPtrOutputWithContext(context.Background())
}

func (o CVSSv3PrivilegesRequiredOutput) ToCVSSv3PrivilegesRequiredPtrOutputWithContext(ctx context.Context) CVSSv3PrivilegesRequiredPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CVSSv3PrivilegesRequired) *CVSSv3PrivilegesRequired {
		return &v
	}).(CVSSv3PrivilegesRequiredPtrOutput)
}

func (o CVSSv3PrivilegesRequiredOutput) ToOutput(ctx context.Context) pulumix.Output[CVSSv3PrivilegesRequired] {
	return pulumix.Output[CVSSv3PrivilegesRequired]{
		OutputState: o.OutputState,
	}
}

func (o CVSSv3PrivilegesRequiredOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CVSSv3PrivilegesRequiredOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CVSSv3PrivilegesRequired) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CVSSv3PrivilegesRequiredOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CVSSv3PrivilegesRequiredOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CVSSv3PrivilegesRequired) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CVSSv3PrivilegesRequiredPtrOutput struct{ *pulumi.OutputState }

func (CVSSv3PrivilegesRequiredPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CVSSv3PrivilegesRequired)(nil)).Elem()
}

func (o CVSSv3PrivilegesRequiredPtrOutput) ToCVSSv3PrivilegesRequiredPtrOutput() CVSSv3PrivilegesRequiredPtrOutput {
	return o
}

func (o CVSSv3PrivilegesRequiredPtrOutput) ToCVSSv3PrivilegesRequiredPtrOutputWithContext(ctx context.Context) CVSSv3PrivilegesRequiredPtrOutput {
	return o
}

func (o CVSSv3PrivilegesRequiredPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CVSSv3PrivilegesRequired] {
	return pulumix.Output[*CVSSv3PrivilegesRequired]{
		OutputState: o.OutputState,
	}
}

func (o CVSSv3PrivilegesRequiredPtrOutput) Elem() CVSSv3PrivilegesRequiredOutput {
	return o.ApplyT(func(v *CVSSv3PrivilegesRequired) CVSSv3PrivilegesRequired {
		if v != nil {
			return *v
		}
		var ret CVSSv3PrivilegesRequired
		return ret
	}).(CVSSv3PrivilegesRequiredOutput)
}

func (o CVSSv3PrivilegesRequiredPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CVSSv3PrivilegesRequiredPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CVSSv3PrivilegesRequired) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CVSSv3PrivilegesRequiredInput is an input type that accepts CVSSv3PrivilegesRequiredArgs and CVSSv3PrivilegesRequiredOutput values.
// You can construct a concrete instance of `CVSSv3PrivilegesRequiredInput` via:
//
//	CVSSv3PrivilegesRequiredArgs{...}
type CVSSv3PrivilegesRequiredInput interface {
	pulumi.Input

	ToCVSSv3PrivilegesRequiredOutput() CVSSv3PrivilegesRequiredOutput
	ToCVSSv3PrivilegesRequiredOutputWithContext(context.Context) CVSSv3PrivilegesRequiredOutput
}

var cvssv3PrivilegesRequiredPtrType = reflect.TypeOf((**CVSSv3PrivilegesRequired)(nil)).Elem()

type CVSSv3PrivilegesRequiredPtrInput interface {
	pulumi.Input

	ToCVSSv3PrivilegesRequiredPtrOutput() CVSSv3PrivilegesRequiredPtrOutput
	ToCVSSv3PrivilegesRequiredPtrOutputWithContext(context.Context) CVSSv3PrivilegesRequiredPtrOutput
}

type cvssv3PrivilegesRequiredPtr string

func CVSSv3PrivilegesRequiredPtr(v string) CVSSv3PrivilegesRequiredPtrInput {
	return (*cvssv3PrivilegesRequiredPtr)(&v)
}

func (*cvssv3PrivilegesRequiredPtr) ElementType() reflect.Type {
	return cvssv3PrivilegesRequiredPtrType
}

func (in *cvssv3PrivilegesRequiredPtr) ToCVSSv3PrivilegesRequiredPtrOutput() CVSSv3PrivilegesRequiredPtrOutput {
	return pulumi.ToOutput(in).(CVSSv3PrivilegesRequiredPtrOutput)
}

func (in *cvssv3PrivilegesRequiredPtr) ToCVSSv3PrivilegesRequiredPtrOutputWithContext(ctx context.Context) CVSSv3PrivilegesRequiredPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CVSSv3PrivilegesRequiredPtrOutput)
}

func (in *cvssv3PrivilegesRequiredPtr) ToOutput(ctx context.Context) pulumix.Output[*CVSSv3PrivilegesRequired] {
	return pulumix.Output[*CVSSv3PrivilegesRequired]{
		OutputState: in.ToCVSSv3PrivilegesRequiredPtrOutputWithContext(ctx).OutputState,
	}
}

type CVSSv3Scope string

const (
	CVSSv3ScopeScopeUnspecified = CVSSv3Scope("SCOPE_UNSPECIFIED")
	CVSSv3ScopeScopeUnchanged   = CVSSv3Scope("SCOPE_UNCHANGED")
	CVSSv3ScopeScopeChanged     = CVSSv3Scope("SCOPE_CHANGED")
)

func (CVSSv3Scope) ElementType() reflect.Type {
	return reflect.TypeOf((*CVSSv3Scope)(nil)).Elem()
}

func (e CVSSv3Scope) ToCVSSv3ScopeOutput() CVSSv3ScopeOutput {
	return pulumi.ToOutput(e).(CVSSv3ScopeOutput)
}

func (e CVSSv3Scope) ToCVSSv3ScopeOutputWithContext(ctx context.Context) CVSSv3ScopeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CVSSv3ScopeOutput)
}

func (e CVSSv3Scope) ToCVSSv3ScopePtrOutput() CVSSv3ScopePtrOutput {
	return e.ToCVSSv3ScopePtrOutputWithContext(context.Background())
}

func (e CVSSv3Scope) ToCVSSv3ScopePtrOutputWithContext(ctx context.Context) CVSSv3ScopePtrOutput {
	return CVSSv3Scope(e).ToCVSSv3ScopeOutputWithContext(ctx).ToCVSSv3ScopePtrOutputWithContext(ctx)
}

func (e CVSSv3Scope) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CVSSv3Scope) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CVSSv3Scope) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CVSSv3Scope) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CVSSv3ScopeOutput struct{ *pulumi.OutputState }

func (CVSSv3ScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CVSSv3Scope)(nil)).Elem()
}

func (o CVSSv3ScopeOutput) ToCVSSv3ScopeOutput() CVSSv3ScopeOutput {
	return o
}

func (o CVSSv3ScopeOutput) ToCVSSv3ScopeOutputWithContext(ctx context.Context) CVSSv3ScopeOutput {
	return o
}

func (o CVSSv3ScopeOutput) ToCVSSv3ScopePtrOutput() CVSSv3ScopePtrOutput {
	return o.ToCVSSv3ScopePtrOutputWithContext(context.Background())
}

func (o CVSSv3ScopeOutput) ToCVSSv3ScopePtrOutputWithContext(ctx context.Context) CVSSv3ScopePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CVSSv3Scope) *CVSSv3Scope {
		return &v
	}).(CVSSv3ScopePtrOutput)
}

func (o CVSSv3ScopeOutput) ToOutput(ctx context.Context) pulumix.Output[CVSSv3Scope] {
	return pulumix.Output[CVSSv3Scope]{
		OutputState: o.OutputState,
	}
}

func (o CVSSv3ScopeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CVSSv3ScopeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CVSSv3Scope) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CVSSv3ScopeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CVSSv3ScopeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CVSSv3Scope) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CVSSv3ScopePtrOutput struct{ *pulumi.OutputState }

func (CVSSv3ScopePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CVSSv3Scope)(nil)).Elem()
}

func (o CVSSv3ScopePtrOutput) ToCVSSv3ScopePtrOutput() CVSSv3ScopePtrOutput {
	return o
}

func (o CVSSv3ScopePtrOutput) ToCVSSv3ScopePtrOutputWithContext(ctx context.Context) CVSSv3ScopePtrOutput {
	return o
}

func (o CVSSv3ScopePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CVSSv3Scope] {
	return pulumix.Output[*CVSSv3Scope]{
		OutputState: o.OutputState,
	}
}

func (o CVSSv3ScopePtrOutput) Elem() CVSSv3ScopeOutput {
	return o.ApplyT(func(v *CVSSv3Scope) CVSSv3Scope {
		if v != nil {
			return *v
		}
		var ret CVSSv3Scope
		return ret
	}).(CVSSv3ScopeOutput)
}

func (o CVSSv3ScopePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CVSSv3ScopePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CVSSv3Scope) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CVSSv3ScopeInput is an input type that accepts CVSSv3ScopeArgs and CVSSv3ScopeOutput values.
// You can construct a concrete instance of `CVSSv3ScopeInput` via:
//
//	CVSSv3ScopeArgs{...}
type CVSSv3ScopeInput interface {
	pulumi.Input

	ToCVSSv3ScopeOutput() CVSSv3ScopeOutput
	ToCVSSv3ScopeOutputWithContext(context.Context) CVSSv3ScopeOutput
}

var cvssv3ScopePtrType = reflect.TypeOf((**CVSSv3Scope)(nil)).Elem()

type CVSSv3ScopePtrInput interface {
	pulumi.Input

	ToCVSSv3ScopePtrOutput() CVSSv3ScopePtrOutput
	ToCVSSv3ScopePtrOutputWithContext(context.Context) CVSSv3ScopePtrOutput
}

type cvssv3ScopePtr string

func CVSSv3ScopePtr(v string) CVSSv3ScopePtrInput {
	return (*cvssv3ScopePtr)(&v)
}

func (*cvssv3ScopePtr) ElementType() reflect.Type {
	return cvssv3ScopePtrType
}

func (in *cvssv3ScopePtr) ToCVSSv3ScopePtrOutput() CVSSv3ScopePtrOutput {
	return pulumi.ToOutput(in).(CVSSv3ScopePtrOutput)
}

func (in *cvssv3ScopePtr) ToCVSSv3ScopePtrOutputWithContext(ctx context.Context) CVSSv3ScopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CVSSv3ScopePtrOutput)
}

func (in *cvssv3ScopePtr) ToOutput(ctx context.Context) pulumix.Output[*CVSSv3Scope] {
	return pulumix.Output[*CVSSv3Scope]{
		OutputState: in.ToCVSSv3ScopePtrOutputWithContext(ctx).OutputState,
	}
}

type CVSSv3UserInteraction string

const (
	CVSSv3UserInteractionUserInteractionUnspecified = CVSSv3UserInteraction("USER_INTERACTION_UNSPECIFIED")
	CVSSv3UserInteractionUserInteractionNone        = CVSSv3UserInteraction("USER_INTERACTION_NONE")
	CVSSv3UserInteractionUserInteractionRequired    = CVSSv3UserInteraction("USER_INTERACTION_REQUIRED")
)

func (CVSSv3UserInteraction) ElementType() reflect.Type {
	return reflect.TypeOf((*CVSSv3UserInteraction)(nil)).Elem()
}

func (e CVSSv3UserInteraction) ToCVSSv3UserInteractionOutput() CVSSv3UserInteractionOutput {
	return pulumi.ToOutput(e).(CVSSv3UserInteractionOutput)
}

func (e CVSSv3UserInteraction) ToCVSSv3UserInteractionOutputWithContext(ctx context.Context) CVSSv3UserInteractionOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CVSSv3UserInteractionOutput)
}

func (e CVSSv3UserInteraction) ToCVSSv3UserInteractionPtrOutput() CVSSv3UserInteractionPtrOutput {
	return e.ToCVSSv3UserInteractionPtrOutputWithContext(context.Background())
}

func (e CVSSv3UserInteraction) ToCVSSv3UserInteractionPtrOutputWithContext(ctx context.Context) CVSSv3UserInteractionPtrOutput {
	return CVSSv3UserInteraction(e).ToCVSSv3UserInteractionOutputWithContext(ctx).ToCVSSv3UserInteractionPtrOutputWithContext(ctx)
}

func (e CVSSv3UserInteraction) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CVSSv3UserInteraction) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CVSSv3UserInteraction) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CVSSv3UserInteraction) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CVSSv3UserInteractionOutput struct{ *pulumi.OutputState }

func (CVSSv3UserInteractionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CVSSv3UserInteraction)(nil)).Elem()
}

func (o CVSSv3UserInteractionOutput) ToCVSSv3UserInteractionOutput() CVSSv3UserInteractionOutput {
	return o
}

func (o CVSSv3UserInteractionOutput) ToCVSSv3UserInteractionOutputWithContext(ctx context.Context) CVSSv3UserInteractionOutput {
	return o
}

func (o CVSSv3UserInteractionOutput) ToCVSSv3UserInteractionPtrOutput() CVSSv3UserInteractionPtrOutput {
	return o.ToCVSSv3UserInteractionPtrOutputWithContext(context.Background())
}

func (o CVSSv3UserInteractionOutput) ToCVSSv3UserInteractionPtrOutputWithContext(ctx context.Context) CVSSv3UserInteractionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CVSSv3UserInteraction) *CVSSv3UserInteraction {
		return &v
	}).(CVSSv3UserInteractionPtrOutput)
}

func (o CVSSv3UserInteractionOutput) ToOutput(ctx context.Context) pulumix.Output[CVSSv3UserInteraction] {
	return pulumix.Output[CVSSv3UserInteraction]{
		OutputState: o.OutputState,
	}
}

func (o CVSSv3UserInteractionOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CVSSv3UserInteractionOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CVSSv3UserInteraction) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CVSSv3UserInteractionOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CVSSv3UserInteractionOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CVSSv3UserInteraction) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CVSSv3UserInteractionPtrOutput struct{ *pulumi.OutputState }

func (CVSSv3UserInteractionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CVSSv3UserInteraction)(nil)).Elem()
}

func (o CVSSv3UserInteractionPtrOutput) ToCVSSv3UserInteractionPtrOutput() CVSSv3UserInteractionPtrOutput {
	return o
}

func (o CVSSv3UserInteractionPtrOutput) ToCVSSv3UserInteractionPtrOutputWithContext(ctx context.Context) CVSSv3UserInteractionPtrOutput {
	return o
}

func (o CVSSv3UserInteractionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CVSSv3UserInteraction] {
	return pulumix.Output[*CVSSv3UserInteraction]{
		OutputState: o.OutputState,
	}
}

func (o CVSSv3UserInteractionPtrOutput) Elem() CVSSv3UserInteractionOutput {
	return o.ApplyT(func(v *CVSSv3UserInteraction) CVSSv3UserInteraction {
		if v != nil {
			return *v
		}
		var ret CVSSv3UserInteraction
		return ret
	}).(CVSSv3UserInteractionOutput)
}

func (o CVSSv3UserInteractionPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CVSSv3UserInteractionPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CVSSv3UserInteraction) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CVSSv3UserInteractionInput is an input type that accepts CVSSv3UserInteractionArgs and CVSSv3UserInteractionOutput values.
// You can construct a concrete instance of `CVSSv3UserInteractionInput` via:
//
//	CVSSv3UserInteractionArgs{...}
type CVSSv3UserInteractionInput interface {
	pulumi.Input

	ToCVSSv3UserInteractionOutput() CVSSv3UserInteractionOutput
	ToCVSSv3UserInteractionOutputWithContext(context.Context) CVSSv3UserInteractionOutput
}

var cvssv3UserInteractionPtrType = reflect.TypeOf((**CVSSv3UserInteraction)(nil)).Elem()

type CVSSv3UserInteractionPtrInput interface {
	pulumi.Input

	ToCVSSv3UserInteractionPtrOutput() CVSSv3UserInteractionPtrOutput
	ToCVSSv3UserInteractionPtrOutputWithContext(context.Context) CVSSv3UserInteractionPtrOutput
}

type cvssv3UserInteractionPtr string

func CVSSv3UserInteractionPtr(v string) CVSSv3UserInteractionPtrInput {
	return (*cvssv3UserInteractionPtr)(&v)
}

func (*cvssv3UserInteractionPtr) ElementType() reflect.Type {
	return cvssv3UserInteractionPtrType
}

func (in *cvssv3UserInteractionPtr) ToCVSSv3UserInteractionPtrOutput() CVSSv3UserInteractionPtrOutput {
	return pulumi.ToOutput(in).(CVSSv3UserInteractionPtrOutput)
}

func (in *cvssv3UserInteractionPtr) ToCVSSv3UserInteractionPtrOutputWithContext(ctx context.Context) CVSSv3UserInteractionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CVSSv3UserInteractionPtrOutput)
}

func (in *cvssv3UserInteractionPtr) ToOutput(ctx context.Context) pulumix.Output[*CVSSv3UserInteraction] {
	return pulumix.Output[*CVSSv3UserInteraction]{
		OutputState: in.ToCVSSv3UserInteractionPtrOutputWithContext(ctx).OutputState,
	}
}

// Platform hosting this deployment.
type DeploymentPlatform string

const (
	// Unknown.
	DeploymentPlatformPlatformUnspecified = DeploymentPlatform("PLATFORM_UNSPECIFIED")
	// Google Container Engine.
	DeploymentPlatformGke = DeploymentPlatform("GKE")
	// Google App Engine: Flexible Environment.
	DeploymentPlatformFlex = DeploymentPlatform("FLEX")
	// Custom user-defined platform.
	DeploymentPlatformCustom = DeploymentPlatform("CUSTOM")
)

func (DeploymentPlatform) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentPlatform)(nil)).Elem()
}

func (e DeploymentPlatform) ToDeploymentPlatformOutput() DeploymentPlatformOutput {
	return pulumi.ToOutput(e).(DeploymentPlatformOutput)
}

func (e DeploymentPlatform) ToDeploymentPlatformOutputWithContext(ctx context.Context) DeploymentPlatformOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DeploymentPlatformOutput)
}

func (e DeploymentPlatform) ToDeploymentPlatformPtrOutput() DeploymentPlatformPtrOutput {
	return e.ToDeploymentPlatformPtrOutputWithContext(context.Background())
}

func (e DeploymentPlatform) ToDeploymentPlatformPtrOutputWithContext(ctx context.Context) DeploymentPlatformPtrOutput {
	return DeploymentPlatform(e).ToDeploymentPlatformOutputWithContext(ctx).ToDeploymentPlatformPtrOutputWithContext(ctx)
}

func (e DeploymentPlatform) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DeploymentPlatform) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DeploymentPlatform) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DeploymentPlatform) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DeploymentPlatformOutput struct{ *pulumi.OutputState }

func (DeploymentPlatformOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentPlatform)(nil)).Elem()
}

func (o DeploymentPlatformOutput) ToDeploymentPlatformOutput() DeploymentPlatformOutput {
	return o
}

func (o DeploymentPlatformOutput) ToDeploymentPlatformOutputWithContext(ctx context.Context) DeploymentPlatformOutput {
	return o
}

func (o DeploymentPlatformOutput) ToDeploymentPlatformPtrOutput() DeploymentPlatformPtrOutput {
	return o.ToDeploymentPlatformPtrOutputWithContext(context.Background())
}

func (o DeploymentPlatformOutput) ToDeploymentPlatformPtrOutputWithContext(ctx context.Context) DeploymentPlatformPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeploymentPlatform) *DeploymentPlatform {
		return &v
	}).(DeploymentPlatformPtrOutput)
}

func (o DeploymentPlatformOutput) ToOutput(ctx context.Context) pulumix.Output[DeploymentPlatform] {
	return pulumix.Output[DeploymentPlatform]{
		OutputState: o.OutputState,
	}
}

func (o DeploymentPlatformOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DeploymentPlatformOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DeploymentPlatform) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DeploymentPlatformOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DeploymentPlatformOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DeploymentPlatform) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DeploymentPlatformPtrOutput struct{ *pulumi.OutputState }

func (DeploymentPlatformPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentPlatform)(nil)).Elem()
}

func (o DeploymentPlatformPtrOutput) ToDeploymentPlatformPtrOutput() DeploymentPlatformPtrOutput {
	return o
}

func (o DeploymentPlatformPtrOutput) ToDeploymentPlatformPtrOutputWithContext(ctx context.Context) DeploymentPlatformPtrOutput {
	return o
}

func (o DeploymentPlatformPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DeploymentPlatform] {
	return pulumix.Output[*DeploymentPlatform]{
		OutputState: o.OutputState,
	}
}

func (o DeploymentPlatformPtrOutput) Elem() DeploymentPlatformOutput {
	return o.ApplyT(func(v *DeploymentPlatform) DeploymentPlatform {
		if v != nil {
			return *v
		}
		var ret DeploymentPlatform
		return ret
	}).(DeploymentPlatformOutput)
}

func (o DeploymentPlatformPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DeploymentPlatformPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DeploymentPlatform) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DeploymentPlatformInput is an input type that accepts DeploymentPlatformArgs and DeploymentPlatformOutput values.
// You can construct a concrete instance of `DeploymentPlatformInput` via:
//
//	DeploymentPlatformArgs{...}
type DeploymentPlatformInput interface {
	pulumi.Input

	ToDeploymentPlatformOutput() DeploymentPlatformOutput
	ToDeploymentPlatformOutputWithContext(context.Context) DeploymentPlatformOutput
}

var deploymentPlatformPtrType = reflect.TypeOf((**DeploymentPlatform)(nil)).Elem()

type DeploymentPlatformPtrInput interface {
	pulumi.Input

	ToDeploymentPlatformPtrOutput() DeploymentPlatformPtrOutput
	ToDeploymentPlatformPtrOutputWithContext(context.Context) DeploymentPlatformPtrOutput
}

type deploymentPlatformPtr string

func DeploymentPlatformPtr(v string) DeploymentPlatformPtrInput {
	return (*deploymentPlatformPtr)(&v)
}

func (*deploymentPlatformPtr) ElementType() reflect.Type {
	return deploymentPlatformPtrType
}

func (in *deploymentPlatformPtr) ToDeploymentPlatformPtrOutput() DeploymentPlatformPtrOutput {
	return pulumi.ToOutput(in).(DeploymentPlatformPtrOutput)
}

func (in *deploymentPlatformPtr) ToDeploymentPlatformPtrOutputWithContext(ctx context.Context) DeploymentPlatformPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DeploymentPlatformPtrOutput)
}

func (in *deploymentPlatformPtr) ToOutput(ctx context.Context) pulumix.Output[*DeploymentPlatform] {
	return pulumix.Output[*DeploymentPlatform]{
		OutputState: in.ToDeploymentPlatformPtrOutputWithContext(ctx).OutputState,
	}
}

// The status of discovery for the resource.
type DiscoveredAnalysisStatus string

const (
	// Unknown.
	DiscoveredAnalysisStatusAnalysisStatusUnspecified = DiscoveredAnalysisStatus("ANALYSIS_STATUS_UNSPECIFIED")
	// Resource is known but no action has been taken yet.
	DiscoveredAnalysisStatusPending = DiscoveredAnalysisStatus("PENDING")
	// Resource is being analyzed.
	DiscoveredAnalysisStatusScanning = DiscoveredAnalysisStatus("SCANNING")
	// Analysis has finished successfully.
	DiscoveredAnalysisStatusFinishedSuccess = DiscoveredAnalysisStatus("FINISHED_SUCCESS")
	// Analysis has completed.
	DiscoveredAnalysisStatusComplete = DiscoveredAnalysisStatus("COMPLETE")
	// Analysis has finished unsuccessfully, the analysis itself is in a bad state.
	DiscoveredAnalysisStatusFinishedFailed = DiscoveredAnalysisStatus("FINISHED_FAILED")
	// The resource is known not to be supported
	DiscoveredAnalysisStatusFinishedUnsupported = DiscoveredAnalysisStatus("FINISHED_UNSUPPORTED")
)

func (DiscoveredAnalysisStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*DiscoveredAnalysisStatus)(nil)).Elem()
}

func (e DiscoveredAnalysisStatus) ToDiscoveredAnalysisStatusOutput() DiscoveredAnalysisStatusOutput {
	return pulumi.ToOutput(e).(DiscoveredAnalysisStatusOutput)
}

func (e DiscoveredAnalysisStatus) ToDiscoveredAnalysisStatusOutputWithContext(ctx context.Context) DiscoveredAnalysisStatusOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DiscoveredAnalysisStatusOutput)
}

func (e DiscoveredAnalysisStatus) ToDiscoveredAnalysisStatusPtrOutput() DiscoveredAnalysisStatusPtrOutput {
	return e.ToDiscoveredAnalysisStatusPtrOutputWithContext(context.Background())
}

func (e DiscoveredAnalysisStatus) ToDiscoveredAnalysisStatusPtrOutputWithContext(ctx context.Context) DiscoveredAnalysisStatusPtrOutput {
	return DiscoveredAnalysisStatus(e).ToDiscoveredAnalysisStatusOutputWithContext(ctx).ToDiscoveredAnalysisStatusPtrOutputWithContext(ctx)
}

func (e DiscoveredAnalysisStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DiscoveredAnalysisStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DiscoveredAnalysisStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DiscoveredAnalysisStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DiscoveredAnalysisStatusOutput struct{ *pulumi.OutputState }

func (DiscoveredAnalysisStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiscoveredAnalysisStatus)(nil)).Elem()
}

func (o DiscoveredAnalysisStatusOutput) ToDiscoveredAnalysisStatusOutput() DiscoveredAnalysisStatusOutput {
	return o
}

func (o DiscoveredAnalysisStatusOutput) ToDiscoveredAnalysisStatusOutputWithContext(ctx context.Context) DiscoveredAnalysisStatusOutput {
	return o
}

func (o DiscoveredAnalysisStatusOutput) ToDiscoveredAnalysisStatusPtrOutput() DiscoveredAnalysisStatusPtrOutput {
	return o.ToDiscoveredAnalysisStatusPtrOutputWithContext(context.Background())
}

func (o DiscoveredAnalysisStatusOutput) ToDiscoveredAnalysisStatusPtrOutputWithContext(ctx context.Context) DiscoveredAnalysisStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DiscoveredAnalysisStatus) *DiscoveredAnalysisStatus {
		return &v
	}).(DiscoveredAnalysisStatusPtrOutput)
}

func (o DiscoveredAnalysisStatusOutput) ToOutput(ctx context.Context) pulumix.Output[DiscoveredAnalysisStatus] {
	return pulumix.Output[DiscoveredAnalysisStatus]{
		OutputState: o.OutputState,
	}
}

func (o DiscoveredAnalysisStatusOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DiscoveredAnalysisStatusOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DiscoveredAnalysisStatus) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DiscoveredAnalysisStatusOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DiscoveredAnalysisStatusOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DiscoveredAnalysisStatus) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DiscoveredAnalysisStatusPtrOutput struct{ *pulumi.OutputState }

func (DiscoveredAnalysisStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiscoveredAnalysisStatus)(nil)).Elem()
}

func (o DiscoveredAnalysisStatusPtrOutput) ToDiscoveredAnalysisStatusPtrOutput() DiscoveredAnalysisStatusPtrOutput {
	return o
}

func (o DiscoveredAnalysisStatusPtrOutput) ToDiscoveredAnalysisStatusPtrOutputWithContext(ctx context.Context) DiscoveredAnalysisStatusPtrOutput {
	return o
}

func (o DiscoveredAnalysisStatusPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DiscoveredAnalysisStatus] {
	return pulumix.Output[*DiscoveredAnalysisStatus]{
		OutputState: o.OutputState,
	}
}

func (o DiscoveredAnalysisStatusPtrOutput) Elem() DiscoveredAnalysisStatusOutput {
	return o.ApplyT(func(v *DiscoveredAnalysisStatus) DiscoveredAnalysisStatus {
		if v != nil {
			return *v
		}
		var ret DiscoveredAnalysisStatus
		return ret
	}).(DiscoveredAnalysisStatusOutput)
}

func (o DiscoveredAnalysisStatusPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DiscoveredAnalysisStatusPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DiscoveredAnalysisStatus) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DiscoveredAnalysisStatusInput is an input type that accepts DiscoveredAnalysisStatusArgs and DiscoveredAnalysisStatusOutput values.
// You can construct a concrete instance of `DiscoveredAnalysisStatusInput` via:
//
//	DiscoveredAnalysisStatusArgs{...}
type DiscoveredAnalysisStatusInput interface {
	pulumi.Input

	ToDiscoveredAnalysisStatusOutput() DiscoveredAnalysisStatusOutput
	ToDiscoveredAnalysisStatusOutputWithContext(context.Context) DiscoveredAnalysisStatusOutput
}

var discoveredAnalysisStatusPtrType = reflect.TypeOf((**DiscoveredAnalysisStatus)(nil)).Elem()

type DiscoveredAnalysisStatusPtrInput interface {
	pulumi.Input

	ToDiscoveredAnalysisStatusPtrOutput() DiscoveredAnalysisStatusPtrOutput
	ToDiscoveredAnalysisStatusPtrOutputWithContext(context.Context) DiscoveredAnalysisStatusPtrOutput
}

type discoveredAnalysisStatusPtr string

func DiscoveredAnalysisStatusPtr(v string) DiscoveredAnalysisStatusPtrInput {
	return (*discoveredAnalysisStatusPtr)(&v)
}

func (*discoveredAnalysisStatusPtr) ElementType() reflect.Type {
	return discoveredAnalysisStatusPtrType
}

func (in *discoveredAnalysisStatusPtr) ToDiscoveredAnalysisStatusPtrOutput() DiscoveredAnalysisStatusPtrOutput {
	return pulumi.ToOutput(in).(DiscoveredAnalysisStatusPtrOutput)
}

func (in *discoveredAnalysisStatusPtr) ToDiscoveredAnalysisStatusPtrOutputWithContext(ctx context.Context) DiscoveredAnalysisStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DiscoveredAnalysisStatusPtrOutput)
}

func (in *discoveredAnalysisStatusPtr) ToOutput(ctx context.Context) pulumix.Output[*DiscoveredAnalysisStatus] {
	return pulumix.Output[*DiscoveredAnalysisStatus]{
		OutputState: in.ToDiscoveredAnalysisStatusPtrOutputWithContext(ctx).OutputState,
	}
}

// Whether the resource is continuously analyzed.
type DiscoveredContinuousAnalysis string

const (
	// Unknown.
	DiscoveredContinuousAnalysisContinuousAnalysisUnspecified = DiscoveredContinuousAnalysis("CONTINUOUS_ANALYSIS_UNSPECIFIED")
	// The resource is continuously analyzed.
	DiscoveredContinuousAnalysisActive = DiscoveredContinuousAnalysis("ACTIVE")
	// The resource is ignored for continuous analysis.
	DiscoveredContinuousAnalysisInactive = DiscoveredContinuousAnalysis("INACTIVE")
)

func (DiscoveredContinuousAnalysis) ElementType() reflect.Type {
	return reflect.TypeOf((*DiscoveredContinuousAnalysis)(nil)).Elem()
}

func (e DiscoveredContinuousAnalysis) ToDiscoveredContinuousAnalysisOutput() DiscoveredContinuousAnalysisOutput {
	return pulumi.ToOutput(e).(DiscoveredContinuousAnalysisOutput)
}

func (e DiscoveredContinuousAnalysis) ToDiscoveredContinuousAnalysisOutputWithContext(ctx context.Context) DiscoveredContinuousAnalysisOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DiscoveredContinuousAnalysisOutput)
}

func (e DiscoveredContinuousAnalysis) ToDiscoveredContinuousAnalysisPtrOutput() DiscoveredContinuousAnalysisPtrOutput {
	return e.ToDiscoveredContinuousAnalysisPtrOutputWithContext(context.Background())
}

func (e DiscoveredContinuousAnalysis) ToDiscoveredContinuousAnalysisPtrOutputWithContext(ctx context.Context) DiscoveredContinuousAnalysisPtrOutput {
	return DiscoveredContinuousAnalysis(e).ToDiscoveredContinuousAnalysisOutputWithContext(ctx).ToDiscoveredContinuousAnalysisPtrOutputWithContext(ctx)
}

func (e DiscoveredContinuousAnalysis) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DiscoveredContinuousAnalysis) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DiscoveredContinuousAnalysis) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DiscoveredContinuousAnalysis) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DiscoveredContinuousAnalysisOutput struct{ *pulumi.OutputState }

func (DiscoveredContinuousAnalysisOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiscoveredContinuousAnalysis)(nil)).Elem()
}

func (o DiscoveredContinuousAnalysisOutput) ToDiscoveredContinuousAnalysisOutput() DiscoveredContinuousAnalysisOutput {
	return o
}

func (o DiscoveredContinuousAnalysisOutput) ToDiscoveredContinuousAnalysisOutputWithContext(ctx context.Context) DiscoveredContinuousAnalysisOutput {
	return o
}

func (o DiscoveredContinuousAnalysisOutput) ToDiscoveredContinuousAnalysisPtrOutput() DiscoveredContinuousAnalysisPtrOutput {
	return o.ToDiscoveredContinuousAnalysisPtrOutputWithContext(context.Background())
}

func (o DiscoveredContinuousAnalysisOutput) ToDiscoveredContinuousAnalysisPtrOutputWithContext(ctx context.Context) DiscoveredContinuousAnalysisPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DiscoveredContinuousAnalysis) *DiscoveredContinuousAnalysis {
		return &v
	}).(DiscoveredContinuousAnalysisPtrOutput)
}

func (o DiscoveredContinuousAnalysisOutput) ToOutput(ctx context.Context) pulumix.Output[DiscoveredContinuousAnalysis] {
	return pulumix.Output[DiscoveredContinuousAnalysis]{
		OutputState: o.OutputState,
	}
}

func (o DiscoveredContinuousAnalysisOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DiscoveredContinuousAnalysisOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DiscoveredContinuousAnalysis) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DiscoveredContinuousAnalysisOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DiscoveredContinuousAnalysisOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DiscoveredContinuousAnalysis) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DiscoveredContinuousAnalysisPtrOutput struct{ *pulumi.OutputState }

func (DiscoveredContinuousAnalysisPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiscoveredContinuousAnalysis)(nil)).Elem()
}

func (o DiscoveredContinuousAnalysisPtrOutput) ToDiscoveredContinuousAnalysisPtrOutput() DiscoveredContinuousAnalysisPtrOutput {
	return o
}

func (o DiscoveredContinuousAnalysisPtrOutput) ToDiscoveredContinuousAnalysisPtrOutputWithContext(ctx context.Context) DiscoveredContinuousAnalysisPtrOutput {
	return o
}

func (o DiscoveredContinuousAnalysisPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DiscoveredContinuousAnalysis] {
	return pulumix.Output[*DiscoveredContinuousAnalysis]{
		OutputState: o.OutputState,
	}
}

func (o DiscoveredContinuousAnalysisPtrOutput) Elem() DiscoveredContinuousAnalysisOutput {
	return o.ApplyT(func(v *DiscoveredContinuousAnalysis) DiscoveredContinuousAnalysis {
		if v != nil {
			return *v
		}
		var ret DiscoveredContinuousAnalysis
		return ret
	}).(DiscoveredContinuousAnalysisOutput)
}

func (o DiscoveredContinuousAnalysisPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DiscoveredContinuousAnalysisPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DiscoveredContinuousAnalysis) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DiscoveredContinuousAnalysisInput is an input type that accepts DiscoveredContinuousAnalysisArgs and DiscoveredContinuousAnalysisOutput values.
// You can construct a concrete instance of `DiscoveredContinuousAnalysisInput` via:
//
//	DiscoveredContinuousAnalysisArgs{...}
type DiscoveredContinuousAnalysisInput interface {
	pulumi.Input

	ToDiscoveredContinuousAnalysisOutput() DiscoveredContinuousAnalysisOutput
	ToDiscoveredContinuousAnalysisOutputWithContext(context.Context) DiscoveredContinuousAnalysisOutput
}

var discoveredContinuousAnalysisPtrType = reflect.TypeOf((**DiscoveredContinuousAnalysis)(nil)).Elem()

type DiscoveredContinuousAnalysisPtrInput interface {
	pulumi.Input

	ToDiscoveredContinuousAnalysisPtrOutput() DiscoveredContinuousAnalysisPtrOutput
	ToDiscoveredContinuousAnalysisPtrOutputWithContext(context.Context) DiscoveredContinuousAnalysisPtrOutput
}

type discoveredContinuousAnalysisPtr string

func DiscoveredContinuousAnalysisPtr(v string) DiscoveredContinuousAnalysisPtrInput {
	return (*discoveredContinuousAnalysisPtr)(&v)
}

func (*discoveredContinuousAnalysisPtr) ElementType() reflect.Type {
	return discoveredContinuousAnalysisPtrType
}

func (in *discoveredContinuousAnalysisPtr) ToDiscoveredContinuousAnalysisPtrOutput() DiscoveredContinuousAnalysisPtrOutput {
	return pulumi.ToOutput(in).(DiscoveredContinuousAnalysisPtrOutput)
}

func (in *discoveredContinuousAnalysisPtr) ToDiscoveredContinuousAnalysisPtrOutputWithContext(ctx context.Context) DiscoveredContinuousAnalysisPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DiscoveredContinuousAnalysisPtrOutput)
}

func (in *discoveredContinuousAnalysisPtr) ToOutput(ctx context.Context) pulumix.Output[*DiscoveredContinuousAnalysis] {
	return pulumix.Output[*DiscoveredContinuousAnalysis]{
		OutputState: in.ToDiscoveredContinuousAnalysisPtrOutputWithContext(ctx).OutputState,
	}
}

// Required. Immutable. The kind of analysis that is handled by this discovery.
type DiscoveryAnalysisKind string

const (
	// Default value. This value is unused.
	DiscoveryAnalysisKindNoteKindUnspecified = DiscoveryAnalysisKind("NOTE_KIND_UNSPECIFIED")
	// The note and occurrence represent a package vulnerability.
	DiscoveryAnalysisKindVulnerability = DiscoveryAnalysisKind("VULNERABILITY")
	// The note and occurrence assert build provenance.
	DiscoveryAnalysisKindBuild = DiscoveryAnalysisKind("BUILD")
	// This represents an image basis relationship.
	DiscoveryAnalysisKindImage = DiscoveryAnalysisKind("IMAGE")
	// This represents a package installed via a package manager.
	DiscoveryAnalysisKindPackage = DiscoveryAnalysisKind("PACKAGE")
	// The note and occurrence track deployment events.
	DiscoveryAnalysisKindDeployment = DiscoveryAnalysisKind("DEPLOYMENT")
	// The note and occurrence track the initial discovery status of a resource.
	DiscoveryAnalysisKindDiscovery = DiscoveryAnalysisKind("DISCOVERY")
	// This represents a logical "role" that can attest to artifacts.
	DiscoveryAnalysisKindAttestation = DiscoveryAnalysisKind("ATTESTATION")
	// This represents an in-toto link.
	DiscoveryAnalysisKindIntoto = DiscoveryAnalysisKind("INTOTO")
	// This represents a software bill of materials.
	DiscoveryAnalysisKindSbom = DiscoveryAnalysisKind("SBOM")
	// This represents an SPDX Package.
	DiscoveryAnalysisKindSpdxPackage = DiscoveryAnalysisKind("SPDX_PACKAGE")
	// This represents an SPDX File.
	DiscoveryAnalysisKindSpdxFile = DiscoveryAnalysisKind("SPDX_FILE")
	// This represents an SPDX Relationship.
	DiscoveryAnalysisKindSpdxRelationship = DiscoveryAnalysisKind("SPDX_RELATIONSHIP")
	// This represents a Vulnerability Assessment.
	DiscoveryAnalysisKindVulnerabilityAssessment = DiscoveryAnalysisKind("VULNERABILITY_ASSESSMENT")
	// This represents an SBOM Reference.
	DiscoveryAnalysisKindSbomReference = DiscoveryAnalysisKind("SBOM_REFERENCE")
)

func (DiscoveryAnalysisKind) ElementType() reflect.Type {
	return reflect.TypeOf((*DiscoveryAnalysisKind)(nil)).Elem()
}

func (e DiscoveryAnalysisKind) ToDiscoveryAnalysisKindOutput() DiscoveryAnalysisKindOutput {
	return pulumi.ToOutput(e).(DiscoveryAnalysisKindOutput)
}

func (e DiscoveryAnalysisKind) ToDiscoveryAnalysisKindOutputWithContext(ctx context.Context) DiscoveryAnalysisKindOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DiscoveryAnalysisKindOutput)
}

func (e DiscoveryAnalysisKind) ToDiscoveryAnalysisKindPtrOutput() DiscoveryAnalysisKindPtrOutput {
	return e.ToDiscoveryAnalysisKindPtrOutputWithContext(context.Background())
}

func (e DiscoveryAnalysisKind) ToDiscoveryAnalysisKindPtrOutputWithContext(ctx context.Context) DiscoveryAnalysisKindPtrOutput {
	return DiscoveryAnalysisKind(e).ToDiscoveryAnalysisKindOutputWithContext(ctx).ToDiscoveryAnalysisKindPtrOutputWithContext(ctx)
}

func (e DiscoveryAnalysisKind) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DiscoveryAnalysisKind) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DiscoveryAnalysisKind) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DiscoveryAnalysisKind) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DiscoveryAnalysisKindOutput struct{ *pulumi.OutputState }

func (DiscoveryAnalysisKindOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiscoveryAnalysisKind)(nil)).Elem()
}

func (o DiscoveryAnalysisKindOutput) ToDiscoveryAnalysisKindOutput() DiscoveryAnalysisKindOutput {
	return o
}

func (o DiscoveryAnalysisKindOutput) ToDiscoveryAnalysisKindOutputWithContext(ctx context.Context) DiscoveryAnalysisKindOutput {
	return o
}

func (o DiscoveryAnalysisKindOutput) ToDiscoveryAnalysisKindPtrOutput() DiscoveryAnalysisKindPtrOutput {
	return o.ToDiscoveryAnalysisKindPtrOutputWithContext(context.Background())
}

func (o DiscoveryAnalysisKindOutput) ToDiscoveryAnalysisKindPtrOutputWithContext(ctx context.Context) DiscoveryAnalysisKindPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DiscoveryAnalysisKind) *DiscoveryAnalysisKind {
		return &v
	}).(DiscoveryAnalysisKindPtrOutput)
}

func (o DiscoveryAnalysisKindOutput) ToOutput(ctx context.Context) pulumix.Output[DiscoveryAnalysisKind] {
	return pulumix.Output[DiscoveryAnalysisKind]{
		OutputState: o.OutputState,
	}
}

func (o DiscoveryAnalysisKindOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DiscoveryAnalysisKindOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DiscoveryAnalysisKind) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DiscoveryAnalysisKindOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DiscoveryAnalysisKindOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DiscoveryAnalysisKind) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DiscoveryAnalysisKindPtrOutput struct{ *pulumi.OutputState }

func (DiscoveryAnalysisKindPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiscoveryAnalysisKind)(nil)).Elem()
}

func (o DiscoveryAnalysisKindPtrOutput) ToDiscoveryAnalysisKindPtrOutput() DiscoveryAnalysisKindPtrOutput {
	return o
}

func (o DiscoveryAnalysisKindPtrOutput) ToDiscoveryAnalysisKindPtrOutputWithContext(ctx context.Context) DiscoveryAnalysisKindPtrOutput {
	return o
}

func (o DiscoveryAnalysisKindPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DiscoveryAnalysisKind] {
	return pulumix.Output[*DiscoveryAnalysisKind]{
		OutputState: o.OutputState,
	}
}

func (o DiscoveryAnalysisKindPtrOutput) Elem() DiscoveryAnalysisKindOutput {
	return o.ApplyT(func(v *DiscoveryAnalysisKind) DiscoveryAnalysisKind {
		if v != nil {
			return *v
		}
		var ret DiscoveryAnalysisKind
		return ret
	}).(DiscoveryAnalysisKindOutput)
}

func (o DiscoveryAnalysisKindPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DiscoveryAnalysisKindPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DiscoveryAnalysisKind) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DiscoveryAnalysisKindInput is an input type that accepts DiscoveryAnalysisKindArgs and DiscoveryAnalysisKindOutput values.
// You can construct a concrete instance of `DiscoveryAnalysisKindInput` via:
//
//	DiscoveryAnalysisKindArgs{...}
type DiscoveryAnalysisKindInput interface {
	pulumi.Input

	ToDiscoveryAnalysisKindOutput() DiscoveryAnalysisKindOutput
	ToDiscoveryAnalysisKindOutputWithContext(context.Context) DiscoveryAnalysisKindOutput
}

var discoveryAnalysisKindPtrType = reflect.TypeOf((**DiscoveryAnalysisKind)(nil)).Elem()

type DiscoveryAnalysisKindPtrInput interface {
	pulumi.Input

	ToDiscoveryAnalysisKindPtrOutput() DiscoveryAnalysisKindPtrOutput
	ToDiscoveryAnalysisKindPtrOutputWithContext(context.Context) DiscoveryAnalysisKindPtrOutput
}

type discoveryAnalysisKindPtr string

func DiscoveryAnalysisKindPtr(v string) DiscoveryAnalysisKindPtrInput {
	return (*discoveryAnalysisKindPtr)(&v)
}

func (*discoveryAnalysisKindPtr) ElementType() reflect.Type {
	return discoveryAnalysisKindPtrType
}

func (in *discoveryAnalysisKindPtr) ToDiscoveryAnalysisKindPtrOutput() DiscoveryAnalysisKindPtrOutput {
	return pulumi.ToOutput(in).(DiscoveryAnalysisKindPtrOutput)
}

func (in *discoveryAnalysisKindPtr) ToDiscoveryAnalysisKindPtrOutputWithContext(ctx context.Context) DiscoveryAnalysisKindPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DiscoveryAnalysisKindPtrOutput)
}

func (in *discoveryAnalysisKindPtr) ToOutput(ctx context.Context) pulumix.Output[*DiscoveryAnalysisKind] {
	return pulumix.Output[*DiscoveryAnalysisKind]{
		OutputState: in.ToDiscoveryAnalysisKindPtrOutputWithContext(ctx).OutputState,
	}
}

// The CPU architecture for which packages in this distribution channel were built.
type DistributionArchitecture string

const (
	// Unknown architecture.
	DistributionArchitectureArchitectureUnspecified = DistributionArchitecture("ARCHITECTURE_UNSPECIFIED")
	// X86 architecture.
	DistributionArchitectureX86 = DistributionArchitecture("X86")
	// X64 architecture.
	DistributionArchitectureX64 = DistributionArchitecture("X64")
)

func (DistributionArchitecture) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionArchitecture)(nil)).Elem()
}

func (e DistributionArchitecture) ToDistributionArchitectureOutput() DistributionArchitectureOutput {
	return pulumi.ToOutput(e).(DistributionArchitectureOutput)
}

func (e DistributionArchitecture) ToDistributionArchitectureOutputWithContext(ctx context.Context) DistributionArchitectureOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DistributionArchitectureOutput)
}

func (e DistributionArchitecture) ToDistributionArchitecturePtrOutput() DistributionArchitecturePtrOutput {
	return e.ToDistributionArchitecturePtrOutputWithContext(context.Background())
}

func (e DistributionArchitecture) ToDistributionArchitecturePtrOutputWithContext(ctx context.Context) DistributionArchitecturePtrOutput {
	return DistributionArchitecture(e).ToDistributionArchitectureOutputWithContext(ctx).ToDistributionArchitecturePtrOutputWithContext(ctx)
}

func (e DistributionArchitecture) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DistributionArchitecture) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DistributionArchitecture) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DistributionArchitecture) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DistributionArchitectureOutput struct{ *pulumi.OutputState }

func (DistributionArchitectureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionArchitecture)(nil)).Elem()
}

func (o DistributionArchitectureOutput) ToDistributionArchitectureOutput() DistributionArchitectureOutput {
	return o
}

func (o DistributionArchitectureOutput) ToDistributionArchitectureOutputWithContext(ctx context.Context) DistributionArchitectureOutput {
	return o
}

func (o DistributionArchitectureOutput) ToDistributionArchitecturePtrOutput() DistributionArchitecturePtrOutput {
	return o.ToDistributionArchitecturePtrOutputWithContext(context.Background())
}

func (o DistributionArchitectureOutput) ToDistributionArchitecturePtrOutputWithContext(ctx context.Context) DistributionArchitecturePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DistributionArchitecture) *DistributionArchitecture {
		return &v
	}).(DistributionArchitecturePtrOutput)
}

func (o DistributionArchitectureOutput) ToOutput(ctx context.Context) pulumix.Output[DistributionArchitecture] {
	return pulumix.Output[DistributionArchitecture]{
		OutputState: o.OutputState,
	}
}

func (o DistributionArchitectureOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DistributionArchitectureOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DistributionArchitecture) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DistributionArchitectureOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DistributionArchitectureOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DistributionArchitecture) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DistributionArchitecturePtrOutput struct{ *pulumi.OutputState }

func (DistributionArchitecturePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DistributionArchitecture)(nil)).Elem()
}

func (o DistributionArchitecturePtrOutput) ToDistributionArchitecturePtrOutput() DistributionArchitecturePtrOutput {
	return o
}

func (o DistributionArchitecturePtrOutput) ToDistributionArchitecturePtrOutputWithContext(ctx context.Context) DistributionArchitecturePtrOutput {
	return o
}

func (o DistributionArchitecturePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DistributionArchitecture] {
	return pulumix.Output[*DistributionArchitecture]{
		OutputState: o.OutputState,
	}
}

func (o DistributionArchitecturePtrOutput) Elem() DistributionArchitectureOutput {
	return o.ApplyT(func(v *DistributionArchitecture) DistributionArchitecture {
		if v != nil {
			return *v
		}
		var ret DistributionArchitecture
		return ret
	}).(DistributionArchitectureOutput)
}

func (o DistributionArchitecturePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DistributionArchitecturePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DistributionArchitecture) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DistributionArchitectureInput is an input type that accepts DistributionArchitectureArgs and DistributionArchitectureOutput values.
// You can construct a concrete instance of `DistributionArchitectureInput` via:
//
//	DistributionArchitectureArgs{...}
type DistributionArchitectureInput interface {
	pulumi.Input

	ToDistributionArchitectureOutput() DistributionArchitectureOutput
	ToDistributionArchitectureOutputWithContext(context.Context) DistributionArchitectureOutput
}

var distributionArchitecturePtrType = reflect.TypeOf((**DistributionArchitecture)(nil)).Elem()

type DistributionArchitecturePtrInput interface {
	pulumi.Input

	ToDistributionArchitecturePtrOutput() DistributionArchitecturePtrOutput
	ToDistributionArchitecturePtrOutputWithContext(context.Context) DistributionArchitecturePtrOutput
}

type distributionArchitecturePtr string

func DistributionArchitecturePtr(v string) DistributionArchitecturePtrInput {
	return (*distributionArchitecturePtr)(&v)
}

func (*distributionArchitecturePtr) ElementType() reflect.Type {
	return distributionArchitecturePtrType
}

func (in *distributionArchitecturePtr) ToDistributionArchitecturePtrOutput() DistributionArchitecturePtrOutput {
	return pulumi.ToOutput(in).(DistributionArchitecturePtrOutput)
}

func (in *distributionArchitecturePtr) ToDistributionArchitecturePtrOutputWithContext(ctx context.Context) DistributionArchitecturePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DistributionArchitecturePtrOutput)
}

func (in *distributionArchitecturePtr) ToOutput(ctx context.Context) pulumix.Output[*DistributionArchitecture] {
	return pulumix.Output[*DistributionArchitecture]{
		OutputState: in.ToDistributionArchitecturePtrOutputWithContext(ctx).OutputState,
	}
}

// An External Reference allows a Package to reference an external source of additional information, metadata, enumerations, asset identifiers, or downloadable content believed to be relevant to the Package
type ExternalRefCategory string

const (
	// Unspecified
	ExternalRefCategoryCategoryUnspecified = ExternalRefCategory("CATEGORY_UNSPECIFIED")
	// Security (e.g. cpe22Type, cpe23Type)
	ExternalRefCategorySecurity = ExternalRefCategory("SECURITY")
	// Package Manager (e.g. maven-central, npm, nuget, bower, purl)
	ExternalRefCategoryPackageManager = ExternalRefCategory("PACKAGE_MANAGER")
	// Persistent-Id (e.g. swh)
	ExternalRefCategoryPersistentId = ExternalRefCategory("PERSISTENT_ID")
	// Other
	ExternalRefCategoryOther = ExternalRefCategory("OTHER")
)

func (ExternalRefCategory) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalRefCategory)(nil)).Elem()
}

func (e ExternalRefCategory) ToExternalRefCategoryOutput() ExternalRefCategoryOutput {
	return pulumi.ToOutput(e).(ExternalRefCategoryOutput)
}

func (e ExternalRefCategory) ToExternalRefCategoryOutputWithContext(ctx context.Context) ExternalRefCategoryOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ExternalRefCategoryOutput)
}

func (e ExternalRefCategory) ToExternalRefCategoryPtrOutput() ExternalRefCategoryPtrOutput {
	return e.ToExternalRefCategoryPtrOutputWithContext(context.Background())
}

func (e ExternalRefCategory) ToExternalRefCategoryPtrOutputWithContext(ctx context.Context) ExternalRefCategoryPtrOutput {
	return ExternalRefCategory(e).ToExternalRefCategoryOutputWithContext(ctx).ToExternalRefCategoryPtrOutputWithContext(ctx)
}

func (e ExternalRefCategory) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ExternalRefCategory) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ExternalRefCategory) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ExternalRefCategory) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ExternalRefCategoryOutput struct{ *pulumi.OutputState }

func (ExternalRefCategoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalRefCategory)(nil)).Elem()
}

func (o ExternalRefCategoryOutput) ToExternalRefCategoryOutput() ExternalRefCategoryOutput {
	return o
}

func (o ExternalRefCategoryOutput) ToExternalRefCategoryOutputWithContext(ctx context.Context) ExternalRefCategoryOutput {
	return o
}

func (o ExternalRefCategoryOutput) ToExternalRefCategoryPtrOutput() ExternalRefCategoryPtrOutput {
	return o.ToExternalRefCategoryPtrOutputWithContext(context.Background())
}

func (o ExternalRefCategoryOutput) ToExternalRefCategoryPtrOutputWithContext(ctx context.Context) ExternalRefCategoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExternalRefCategory) *ExternalRefCategory {
		return &v
	}).(ExternalRefCategoryPtrOutput)
}

func (o ExternalRefCategoryOutput) ToOutput(ctx context.Context) pulumix.Output[ExternalRefCategory] {
	return pulumix.Output[ExternalRefCategory]{
		OutputState: o.OutputState,
	}
}

func (o ExternalRefCategoryOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ExternalRefCategoryOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ExternalRefCategory) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ExternalRefCategoryOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ExternalRefCategoryOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ExternalRefCategory) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ExternalRefCategoryPtrOutput struct{ *pulumi.OutputState }

func (ExternalRefCategoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExternalRefCategory)(nil)).Elem()
}

func (o ExternalRefCategoryPtrOutput) ToExternalRefCategoryPtrOutput() ExternalRefCategoryPtrOutput {
	return o
}

func (o ExternalRefCategoryPtrOutput) ToExternalRefCategoryPtrOutputWithContext(ctx context.Context) ExternalRefCategoryPtrOutput {
	return o
}

func (o ExternalRefCategoryPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ExternalRefCategory] {
	return pulumix.Output[*ExternalRefCategory]{
		OutputState: o.OutputState,
	}
}

func (o ExternalRefCategoryPtrOutput) Elem() ExternalRefCategoryOutput {
	return o.ApplyT(func(v *ExternalRefCategory) ExternalRefCategory {
		if v != nil {
			return *v
		}
		var ret ExternalRefCategory
		return ret
	}).(ExternalRefCategoryOutput)
}

func (o ExternalRefCategoryPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ExternalRefCategoryPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ExternalRefCategory) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ExternalRefCategoryInput is an input type that accepts ExternalRefCategoryArgs and ExternalRefCategoryOutput values.
// You can construct a concrete instance of `ExternalRefCategoryInput` via:
//
//	ExternalRefCategoryArgs{...}
type ExternalRefCategoryInput interface {
	pulumi.Input

	ToExternalRefCategoryOutput() ExternalRefCategoryOutput
	ToExternalRefCategoryOutputWithContext(context.Context) ExternalRefCategoryOutput
}

var externalRefCategoryPtrType = reflect.TypeOf((**ExternalRefCategory)(nil)).Elem()

type ExternalRefCategoryPtrInput interface {
	pulumi.Input

	ToExternalRefCategoryPtrOutput() ExternalRefCategoryPtrOutput
	ToExternalRefCategoryPtrOutputWithContext(context.Context) ExternalRefCategoryPtrOutput
}

type externalRefCategoryPtr string

func ExternalRefCategoryPtr(v string) ExternalRefCategoryPtrInput {
	return (*externalRefCategoryPtr)(&v)
}

func (*externalRefCategoryPtr) ElementType() reflect.Type {
	return externalRefCategoryPtrType
}

func (in *externalRefCategoryPtr) ToExternalRefCategoryPtrOutput() ExternalRefCategoryPtrOutput {
	return pulumi.ToOutput(in).(ExternalRefCategoryPtrOutput)
}

func (in *externalRefCategoryPtr) ToExternalRefCategoryPtrOutputWithContext(ctx context.Context) ExternalRefCategoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ExternalRefCategoryPtrOutput)
}

func (in *externalRefCategoryPtr) ToOutput(ctx context.Context) pulumix.Output[*ExternalRefCategory] {
	return pulumix.Output[*ExternalRefCategory]{
		OutputState: in.ToExternalRefCategoryPtrOutputWithContext(ctx).OutputState,
	}
}

// This field provides information about the type of file identified
type FileNoteFileType string

const (
	// Unspecified
	FileNoteFileTypeFileTypeUnspecified = FileNoteFileType("FILE_TYPE_UNSPECIFIED")
	// The file is human readable source code (.c, .html, etc.)
	FileNoteFileTypeSource = FileNoteFileType("SOURCE")
	// The file is a compiled object, target image or binary executable (.o, .a, etc.)
	FileNoteFileTypeBinary = FileNoteFileType("BINARY")
	// The file represents an archive (.tar, .jar, etc.)
	FileNoteFileTypeArchive = FileNoteFileType("ARCHIVE")
	// The file is associated with a specific application type (MIME type of application/*)
	FileNoteFileTypeApplication = FileNoteFileType("APPLICATION")
	// The file is associated with an audio file (MIME type of audio/* , e.g. .mp3)
	FileNoteFileTypeAudio = FileNoteFileType("AUDIO")
	// The file is associated with an picture image file (MIME type of image/*, e.g., .jpg, .gif)
	FileNoteFileTypeImage = FileNoteFileType("IMAGE")
	// The file is human readable text file (MIME type of text/*)
	FileNoteFileTypeText = FileNoteFileType("TEXT")
	// The file is associated with a video file type (MIME type of video/*)
	FileNoteFileTypeVideo = FileNoteFileType("VIDEO")
	// The file serves as documentation
	FileNoteFileTypeDocumentation = FileNoteFileType("DOCUMENTATION")
	// The file is an SPDX document
	FileNoteFileTypeSpdx = FileNoteFileType("SPDX")
	// The file doesn't fit into the above categories (generated artifacts, data files, etc.)
	FileNoteFileTypeOther = FileNoteFileType("OTHER")
)

func (FileNoteFileType) ElementType() reflect.Type {
	return reflect.TypeOf((*FileNoteFileType)(nil)).Elem()
}

func (e FileNoteFileType) ToFileNoteFileTypeOutput() FileNoteFileTypeOutput {
	return pulumi.ToOutput(e).(FileNoteFileTypeOutput)
}

func (e FileNoteFileType) ToFileNoteFileTypeOutputWithContext(ctx context.Context) FileNoteFileTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FileNoteFileTypeOutput)
}

func (e FileNoteFileType) ToFileNoteFileTypePtrOutput() FileNoteFileTypePtrOutput {
	return e.ToFileNoteFileTypePtrOutputWithContext(context.Background())
}

func (e FileNoteFileType) ToFileNoteFileTypePtrOutputWithContext(ctx context.Context) FileNoteFileTypePtrOutput {
	return FileNoteFileType(e).ToFileNoteFileTypeOutputWithContext(ctx).ToFileNoteFileTypePtrOutputWithContext(ctx)
}

func (e FileNoteFileType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FileNoteFileType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FileNoteFileType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FileNoteFileType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FileNoteFileTypeOutput struct{ *pulumi.OutputState }

func (FileNoteFileTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileNoteFileType)(nil)).Elem()
}

func (o FileNoteFileTypeOutput) ToFileNoteFileTypeOutput() FileNoteFileTypeOutput {
	return o
}

func (o FileNoteFileTypeOutput) ToFileNoteFileTypeOutputWithContext(ctx context.Context) FileNoteFileTypeOutput {
	return o
}

func (o FileNoteFileTypeOutput) ToFileNoteFileTypePtrOutput() FileNoteFileTypePtrOutput {
	return o.ToFileNoteFileTypePtrOutputWithContext(context.Background())
}

func (o FileNoteFileTypeOutput) ToFileNoteFileTypePtrOutputWithContext(ctx context.Context) FileNoteFileTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FileNoteFileType) *FileNoteFileType {
		return &v
	}).(FileNoteFileTypePtrOutput)
}

func (o FileNoteFileTypeOutput) ToOutput(ctx context.Context) pulumix.Output[FileNoteFileType] {
	return pulumix.Output[FileNoteFileType]{
		OutputState: o.OutputState,
	}
}

func (o FileNoteFileTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FileNoteFileTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FileNoteFileType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FileNoteFileTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FileNoteFileTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FileNoteFileType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FileNoteFileTypePtrOutput struct{ *pulumi.OutputState }

func (FileNoteFileTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileNoteFileType)(nil)).Elem()
}

func (o FileNoteFileTypePtrOutput) ToFileNoteFileTypePtrOutput() FileNoteFileTypePtrOutput {
	return o
}

func (o FileNoteFileTypePtrOutput) ToFileNoteFileTypePtrOutputWithContext(ctx context.Context) FileNoteFileTypePtrOutput {
	return o
}

func (o FileNoteFileTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*FileNoteFileType] {
	return pulumix.Output[*FileNoteFileType]{
		OutputState: o.OutputState,
	}
}

func (o FileNoteFileTypePtrOutput) Elem() FileNoteFileTypeOutput {
	return o.ApplyT(func(v *FileNoteFileType) FileNoteFileType {
		if v != nil {
			return *v
		}
		var ret FileNoteFileType
		return ret
	}).(FileNoteFileTypeOutput)
}

func (o FileNoteFileTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FileNoteFileTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FileNoteFileType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FileNoteFileTypeInput is an input type that accepts FileNoteFileTypeArgs and FileNoteFileTypeOutput values.
// You can construct a concrete instance of `FileNoteFileTypeInput` via:
//
//	FileNoteFileTypeArgs{...}
type FileNoteFileTypeInput interface {
	pulumi.Input

	ToFileNoteFileTypeOutput() FileNoteFileTypeOutput
	ToFileNoteFileTypeOutputWithContext(context.Context) FileNoteFileTypeOutput
}

var fileNoteFileTypePtrType = reflect.TypeOf((**FileNoteFileType)(nil)).Elem()

type FileNoteFileTypePtrInput interface {
	pulumi.Input

	ToFileNoteFileTypePtrOutput() FileNoteFileTypePtrOutput
	ToFileNoteFileTypePtrOutputWithContext(context.Context) FileNoteFileTypePtrOutput
}

type fileNoteFileTypePtr string

func FileNoteFileTypePtr(v string) FileNoteFileTypePtrInput {
	return (*fileNoteFileTypePtr)(&v)
}

func (*fileNoteFileTypePtr) ElementType() reflect.Type {
	return fileNoteFileTypePtrType
}

func (in *fileNoteFileTypePtr) ToFileNoteFileTypePtrOutput() FileNoteFileTypePtrOutput {
	return pulumi.ToOutput(in).(FileNoteFileTypePtrOutput)
}

func (in *fileNoteFileTypePtr) ToFileNoteFileTypePtrOutputWithContext(ctx context.Context) FileNoteFileTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FileNoteFileTypePtrOutput)
}

func (in *fileNoteFileTypePtr) ToOutput(ctx context.Context) pulumix.Output[*FileNoteFileType] {
	return pulumix.Output[*FileNoteFileType]{
		OutputState: in.ToFileNoteFileTypePtrOutputWithContext(ctx).OutputState,
	}
}

// Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).
type GenericSignedAttestationContentType string

const (
	// `ContentType` is not set.
	GenericSignedAttestationContentTypeContentTypeUnspecified = GenericSignedAttestationContentType("CONTENT_TYPE_UNSPECIFIED")
	// Atomic format attestation signature. See https://github.com/containers/image/blob/8a5d2f82a6e3263290c8e0276c3e0f64e77723e7/docs/atomic-signature.md The payload extracted in `plaintext` is a JSON blob conforming to the linked schema.
	GenericSignedAttestationContentTypeSimpleSigningJson = GenericSignedAttestationContentType("SIMPLE_SIGNING_JSON")
)

func (GenericSignedAttestationContentType) ElementType() reflect.Type {
	return reflect.TypeOf((*GenericSignedAttestationContentType)(nil)).Elem()
}

func (e GenericSignedAttestationContentType) ToGenericSignedAttestationContentTypeOutput() GenericSignedAttestationContentTypeOutput {
	return pulumi.ToOutput(e).(GenericSignedAttestationContentTypeOutput)
}

func (e GenericSignedAttestationContentType) ToGenericSignedAttestationContentTypeOutputWithContext(ctx context.Context) GenericSignedAttestationContentTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(GenericSignedAttestationContentTypeOutput)
}

func (e GenericSignedAttestationContentType) ToGenericSignedAttestationContentTypePtrOutput() GenericSignedAttestationContentTypePtrOutput {
	return e.ToGenericSignedAttestationContentTypePtrOutputWithContext(context.Background())
}

func (e GenericSignedAttestationContentType) ToGenericSignedAttestationContentTypePtrOutputWithContext(ctx context.Context) GenericSignedAttestationContentTypePtrOutput {
	return GenericSignedAttestationContentType(e).ToGenericSignedAttestationContentTypeOutputWithContext(ctx).ToGenericSignedAttestationContentTypePtrOutputWithContext(ctx)
}

func (e GenericSignedAttestationContentType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e GenericSignedAttestationContentType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e GenericSignedAttestationContentType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e GenericSignedAttestationContentType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type GenericSignedAttestationContentTypeOutput struct{ *pulumi.OutputState }

func (GenericSignedAttestationContentTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GenericSignedAttestationContentType)(nil)).Elem()
}

func (o GenericSignedAttestationContentTypeOutput) ToGenericSignedAttestationContentTypeOutput() GenericSignedAttestationContentTypeOutput {
	return o
}

func (o GenericSignedAttestationContentTypeOutput) ToGenericSignedAttestationContentTypeOutputWithContext(ctx context.Context) GenericSignedAttestationContentTypeOutput {
	return o
}

func (o GenericSignedAttestationContentTypeOutput) ToGenericSignedAttestationContentTypePtrOutput() GenericSignedAttestationContentTypePtrOutput {
	return o.ToGenericSignedAttestationContentTypePtrOutputWithContext(context.Background())
}

func (o GenericSignedAttestationContentTypeOutput) ToGenericSignedAttestationContentTypePtrOutputWithContext(ctx context.Context) GenericSignedAttestationContentTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GenericSignedAttestationContentType) *GenericSignedAttestationContentType {
		return &v
	}).(GenericSignedAttestationContentTypePtrOutput)
}

func (o GenericSignedAttestationContentTypeOutput) ToOutput(ctx context.Context) pulumix.Output[GenericSignedAttestationContentType] {
	return pulumix.Output[GenericSignedAttestationContentType]{
		OutputState: o.OutputState,
	}
}

func (o GenericSignedAttestationContentTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o GenericSignedAttestationContentTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e GenericSignedAttestationContentType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o GenericSignedAttestationContentTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o GenericSignedAttestationContentTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e GenericSignedAttestationContentType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type GenericSignedAttestationContentTypePtrOutput struct{ *pulumi.OutputState }

func (GenericSignedAttestationContentTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GenericSignedAttestationContentType)(nil)).Elem()
}

func (o GenericSignedAttestationContentTypePtrOutput) ToGenericSignedAttestationContentTypePtrOutput() GenericSignedAttestationContentTypePtrOutput {
	return o
}

func (o GenericSignedAttestationContentTypePtrOutput) ToGenericSignedAttestationContentTypePtrOutputWithContext(ctx context.Context) GenericSignedAttestationContentTypePtrOutput {
	return o
}

func (o GenericSignedAttestationContentTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GenericSignedAttestationContentType] {
	return pulumix.Output[*GenericSignedAttestationContentType]{
		OutputState: o.OutputState,
	}
}

func (o GenericSignedAttestationContentTypePtrOutput) Elem() GenericSignedAttestationContentTypeOutput {
	return o.ApplyT(func(v *GenericSignedAttestationContentType) GenericSignedAttestationContentType {
		if v != nil {
			return *v
		}
		var ret GenericSignedAttestationContentType
		return ret
	}).(GenericSignedAttestationContentTypeOutput)
}

func (o GenericSignedAttestationContentTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o GenericSignedAttestationContentTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *GenericSignedAttestationContentType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// GenericSignedAttestationContentTypeInput is an input type that accepts GenericSignedAttestationContentTypeArgs and GenericSignedAttestationContentTypeOutput values.
// You can construct a concrete instance of `GenericSignedAttestationContentTypeInput` via:
//
//	GenericSignedAttestationContentTypeArgs{...}
type GenericSignedAttestationContentTypeInput interface {
	pulumi.Input

	ToGenericSignedAttestationContentTypeOutput() GenericSignedAttestationContentTypeOutput
	ToGenericSignedAttestationContentTypeOutputWithContext(context.Context) GenericSignedAttestationContentTypeOutput
}

var genericSignedAttestationContentTypePtrType = reflect.TypeOf((**GenericSignedAttestationContentType)(nil)).Elem()

type GenericSignedAttestationContentTypePtrInput interface {
	pulumi.Input

	ToGenericSignedAttestationContentTypePtrOutput() GenericSignedAttestationContentTypePtrOutput
	ToGenericSignedAttestationContentTypePtrOutputWithContext(context.Context) GenericSignedAttestationContentTypePtrOutput
}

type genericSignedAttestationContentTypePtr string

func GenericSignedAttestationContentTypePtr(v string) GenericSignedAttestationContentTypePtrInput {
	return (*genericSignedAttestationContentTypePtr)(&v)
}

func (*genericSignedAttestationContentTypePtr) ElementType() reflect.Type {
	return genericSignedAttestationContentTypePtrType
}

func (in *genericSignedAttestationContentTypePtr) ToGenericSignedAttestationContentTypePtrOutput() GenericSignedAttestationContentTypePtrOutput {
	return pulumi.ToOutput(in).(GenericSignedAttestationContentTypePtrOutput)
}

func (in *genericSignedAttestationContentTypePtr) ToGenericSignedAttestationContentTypePtrOutputWithContext(ctx context.Context) GenericSignedAttestationContentTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(GenericSignedAttestationContentTypePtrOutput)
}

func (in *genericSignedAttestationContentTypePtr) ToOutput(ctx context.Context) pulumix.Output[*GenericSignedAttestationContentType] {
	return pulumix.Output[*GenericSignedAttestationContentType]{
		OutputState: in.ToGenericSignedAttestationContentTypePtrOutputWithContext(ctx).OutputState,
	}
}

// The distro assigned severity for this vulnerability when it is available, and note provider assigned severity when distro has not yet assigned a severity for this vulnerability. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues.
type GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity string

const (
	// Unknown.
	GrafeasV1beta1VulnerabilityDetailsEffectiveSeveritySeverityUnspecified = GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity("SEVERITY_UNSPECIFIED")
	// Minimal severity.
	GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityMinimal = GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity("MINIMAL")
	// Low severity.
	GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityLow = GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity("LOW")
	// Medium severity.
	GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityMedium = GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity("MEDIUM")
	// High severity.
	GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityHigh = GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity("HIGH")
	// Critical severity.
	GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityCritical = GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity("CRITICAL")
)

func (GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity)(nil)).Elem()
}

func (e GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity) ToGrafeasV1beta1VulnerabilityDetailsEffectiveSeverityOutput() GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityOutput {
	return pulumi.ToOutput(e).(GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityOutput)
}

func (e GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity) ToGrafeasV1beta1VulnerabilityDetailsEffectiveSeverityOutputWithContext(ctx context.Context) GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityOutput {
	return pulumi.ToOutputWithContext(ctx, e).(GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityOutput)
}

func (e GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity) ToGrafeasV1beta1VulnerabilityDetailsEffectiveSeverityPtrOutput() GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityPtrOutput {
	return e.ToGrafeasV1beta1VulnerabilityDetailsEffectiveSeverityPtrOutputWithContext(context.Background())
}

func (e GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity) ToGrafeasV1beta1VulnerabilityDetailsEffectiveSeverityPtrOutputWithContext(ctx context.Context) GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityPtrOutput {
	return GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity(e).ToGrafeasV1beta1VulnerabilityDetailsEffectiveSeverityOutputWithContext(ctx).ToGrafeasV1beta1VulnerabilityDetailsEffectiveSeverityPtrOutputWithContext(ctx)
}

func (e GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityOutput struct{ *pulumi.OutputState }

func (GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity)(nil)).Elem()
}

func (o GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityOutput) ToGrafeasV1beta1VulnerabilityDetailsEffectiveSeverityOutput() GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityOutput {
	return o
}

func (o GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityOutput) ToGrafeasV1beta1VulnerabilityDetailsEffectiveSeverityOutputWithContext(ctx context.Context) GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityOutput {
	return o
}

func (o GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityOutput) ToGrafeasV1beta1VulnerabilityDetailsEffectiveSeverityPtrOutput() GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityPtrOutput {
	return o.ToGrafeasV1beta1VulnerabilityDetailsEffectiveSeverityPtrOutputWithContext(context.Background())
}

func (o GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityOutput) ToGrafeasV1beta1VulnerabilityDetailsEffectiveSeverityPtrOutputWithContext(ctx context.Context) GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity) *GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity {
		return &v
	}).(GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityPtrOutput)
}

func (o GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityOutput) ToOutput(ctx context.Context) pulumix.Output[GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity] {
	return pulumix.Output[GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity]{
		OutputState: o.OutputState,
	}
}

func (o GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityPtrOutput struct{ *pulumi.OutputState }

func (GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity)(nil)).Elem()
}

func (o GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityPtrOutput) ToGrafeasV1beta1VulnerabilityDetailsEffectiveSeverityPtrOutput() GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityPtrOutput {
	return o
}

func (o GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityPtrOutput) ToGrafeasV1beta1VulnerabilityDetailsEffectiveSeverityPtrOutputWithContext(ctx context.Context) GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityPtrOutput {
	return o
}

func (o GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity] {
	return pulumix.Output[*GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity]{
		OutputState: o.OutputState,
	}
}

func (o GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityPtrOutput) Elem() GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityOutput {
	return o.ApplyT(func(v *GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity) GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity {
		if v != nil {
			return *v
		}
		var ret GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity
		return ret
	}).(GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityOutput)
}

func (o GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityInput is an input type that accepts GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityArgs and GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityOutput values.
// You can construct a concrete instance of `GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityInput` via:
//
//	GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityArgs{...}
type GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityInput interface {
	pulumi.Input

	ToGrafeasV1beta1VulnerabilityDetailsEffectiveSeverityOutput() GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityOutput
	ToGrafeasV1beta1VulnerabilityDetailsEffectiveSeverityOutputWithContext(context.Context) GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityOutput
}

var grafeasV1beta1VulnerabilityDetailsEffectiveSeverityPtrType = reflect.TypeOf((**GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity)(nil)).Elem()

type GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityPtrInput interface {
	pulumi.Input

	ToGrafeasV1beta1VulnerabilityDetailsEffectiveSeverityPtrOutput() GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityPtrOutput
	ToGrafeasV1beta1VulnerabilityDetailsEffectiveSeverityPtrOutputWithContext(context.Context) GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityPtrOutput
}

type grafeasV1beta1VulnerabilityDetailsEffectiveSeverityPtr string

func GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityPtr(v string) GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityPtrInput {
	return (*grafeasV1beta1VulnerabilityDetailsEffectiveSeverityPtr)(&v)
}

func (*grafeasV1beta1VulnerabilityDetailsEffectiveSeverityPtr) ElementType() reflect.Type {
	return grafeasV1beta1VulnerabilityDetailsEffectiveSeverityPtrType
}

func (in *grafeasV1beta1VulnerabilityDetailsEffectiveSeverityPtr) ToGrafeasV1beta1VulnerabilityDetailsEffectiveSeverityPtrOutput() GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityPtrOutput {
	return pulumi.ToOutput(in).(GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityPtrOutput)
}

func (in *grafeasV1beta1VulnerabilityDetailsEffectiveSeverityPtr) ToGrafeasV1beta1VulnerabilityDetailsEffectiveSeverityPtrOutputWithContext(ctx context.Context) GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityPtrOutput)
}

func (in *grafeasV1beta1VulnerabilityDetailsEffectiveSeverityPtr) ToOutput(ctx context.Context) pulumix.Output[*GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity] {
	return pulumix.Output[*GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity]{
		OutputState: in.ToGrafeasV1beta1VulnerabilityDetailsEffectiveSeverityPtrOutputWithContext(ctx).OutputState,
	}
}

// Required. The type of hash that was performed.
type HashType string

const (
	// Unknown.
	HashTypeHashTypeUnspecified = HashType("HASH_TYPE_UNSPECIFIED")
	// A SHA-256 hash.
	HashTypeSha256 = HashType("SHA256")
	// Dirhash of a Go module's source code which is then hex-encoded. See b/244466565 and https://github.com/in-toto/attestation/pull/108.
	HashTypeGoModuleH1 = HashType("GO_MODULE_H1")
	// A SHA-512 hash.
	HashTypeSha512 = HashType("SHA512")
)

func (HashType) ElementType() reflect.Type {
	return reflect.TypeOf((*HashType)(nil)).Elem()
}

func (e HashType) ToHashTypeOutput() HashTypeOutput {
	return pulumi.ToOutput(e).(HashTypeOutput)
}

func (e HashType) ToHashTypeOutputWithContext(ctx context.Context) HashTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(HashTypeOutput)
}

func (e HashType) ToHashTypePtrOutput() HashTypePtrOutput {
	return e.ToHashTypePtrOutputWithContext(context.Background())
}

func (e HashType) ToHashTypePtrOutputWithContext(ctx context.Context) HashTypePtrOutput {
	return HashType(e).ToHashTypeOutputWithContext(ctx).ToHashTypePtrOutputWithContext(ctx)
}

func (e HashType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e HashType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e HashType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e HashType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type HashTypeOutput struct{ *pulumi.OutputState }

func (HashTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HashType)(nil)).Elem()
}

func (o HashTypeOutput) ToHashTypeOutput() HashTypeOutput {
	return o
}

func (o HashTypeOutput) ToHashTypeOutputWithContext(ctx context.Context) HashTypeOutput {
	return o
}

func (o HashTypeOutput) ToHashTypePtrOutput() HashTypePtrOutput {
	return o.ToHashTypePtrOutputWithContext(context.Background())
}

func (o HashTypeOutput) ToHashTypePtrOutputWithContext(ctx context.Context) HashTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HashType) *HashType {
		return &v
	}).(HashTypePtrOutput)
}

func (o HashTypeOutput) ToOutput(ctx context.Context) pulumix.Output[HashType] {
	return pulumix.Output[HashType]{
		OutputState: o.OutputState,
	}
}

func (o HashTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o HashTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e HashType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o HashTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o HashTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e HashType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type HashTypePtrOutput struct{ *pulumi.OutputState }

func (HashTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HashType)(nil)).Elem()
}

func (o HashTypePtrOutput) ToHashTypePtrOutput() HashTypePtrOutput {
	return o
}

func (o HashTypePtrOutput) ToHashTypePtrOutputWithContext(ctx context.Context) HashTypePtrOutput {
	return o
}

func (o HashTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*HashType] {
	return pulumix.Output[*HashType]{
		OutputState: o.OutputState,
	}
}

func (o HashTypePtrOutput) Elem() HashTypeOutput {
	return o.ApplyT(func(v *HashType) HashType {
		if v != nil {
			return *v
		}
		var ret HashType
		return ret
	}).(HashTypeOutput)
}

func (o HashTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o HashTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *HashType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// HashTypeInput is an input type that accepts HashTypeArgs and HashTypeOutput values.
// You can construct a concrete instance of `HashTypeInput` via:
//
//	HashTypeArgs{...}
type HashTypeInput interface {
	pulumi.Input

	ToHashTypeOutput() HashTypeOutput
	ToHashTypeOutputWithContext(context.Context) HashTypeOutput
}

var hashTypePtrType = reflect.TypeOf((**HashType)(nil)).Elem()

type HashTypePtrInput interface {
	pulumi.Input

	ToHashTypePtrOutput() HashTypePtrOutput
	ToHashTypePtrOutputWithContext(context.Context) HashTypePtrOutput
}

type hashTypePtr string

func HashTypePtr(v string) HashTypePtrInput {
	return (*hashTypePtr)(&v)
}

func (*hashTypePtr) ElementType() reflect.Type {
	return hashTypePtrType
}

func (in *hashTypePtr) ToHashTypePtrOutput() HashTypePtrOutput {
	return pulumi.ToOutput(in).(HashTypePtrOutput)
}

func (in *hashTypePtr) ToHashTypePtrOutputWithContext(ctx context.Context) HashTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(HashTypePtrOutput)
}

func (in *hashTypePtr) ToOutput(ctx context.Context) pulumix.Output[*HashType] {
	return pulumix.Output[*HashType]{
		OutputState: in.ToHashTypePtrOutputWithContext(ctx).OutputState,
	}
}

// The justification type for this vulnerability.
type JustificationJustificationType string

const (
	// JUSTIFICATION_TYPE_UNSPECIFIED.
	JustificationJustificationTypeJustificationTypeUnspecified = JustificationJustificationType("JUSTIFICATION_TYPE_UNSPECIFIED")
	// The vulnerable component is not present in the product.
	JustificationJustificationTypeComponentNotPresent = JustificationJustificationType("COMPONENT_NOT_PRESENT")
	// The vulnerable code is not present. Typically this case occurs when source code is configured or built in a way that excludes the vulnerable code.
	JustificationJustificationTypeVulnerableCodeNotPresent = JustificationJustificationType("VULNERABLE_CODE_NOT_PRESENT")
	// The vulnerable code can not be executed. Typically this case occurs when the product includes the vulnerable code but does not call or use the vulnerable code.
	JustificationJustificationTypeVulnerableCodeNotInExecutePath = JustificationJustificationType("VULNERABLE_CODE_NOT_IN_EXECUTE_PATH")
	// The vulnerable code cannot be controlled by an attacker to exploit the vulnerability.
	JustificationJustificationTypeVulnerableCodeCannotBeControlledByAdversary = JustificationJustificationType("VULNERABLE_CODE_CANNOT_BE_CONTROLLED_BY_ADVERSARY")
	// The product includes built-in protections or features that prevent exploitation of the vulnerability. These built-in protections cannot be subverted by the attacker and cannot be configured or disabled by the user. These mitigations completely prevent exploitation based on known attack vectors.
	JustificationJustificationTypeInlineMitigationsAlreadyExist = JustificationJustificationType("INLINE_MITIGATIONS_ALREADY_EXIST")
)

func (JustificationJustificationType) ElementType() reflect.Type {
	return reflect.TypeOf((*JustificationJustificationType)(nil)).Elem()
}

func (e JustificationJustificationType) ToJustificationJustificationTypeOutput() JustificationJustificationTypeOutput {
	return pulumi.ToOutput(e).(JustificationJustificationTypeOutput)
}

func (e JustificationJustificationType) ToJustificationJustificationTypeOutputWithContext(ctx context.Context) JustificationJustificationTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(JustificationJustificationTypeOutput)
}

func (e JustificationJustificationType) ToJustificationJustificationTypePtrOutput() JustificationJustificationTypePtrOutput {
	return e.ToJustificationJustificationTypePtrOutputWithContext(context.Background())
}

func (e JustificationJustificationType) ToJustificationJustificationTypePtrOutputWithContext(ctx context.Context) JustificationJustificationTypePtrOutput {
	return JustificationJustificationType(e).ToJustificationJustificationTypeOutputWithContext(ctx).ToJustificationJustificationTypePtrOutputWithContext(ctx)
}

func (e JustificationJustificationType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e JustificationJustificationType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e JustificationJustificationType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e JustificationJustificationType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type JustificationJustificationTypeOutput struct{ *pulumi.OutputState }

func (JustificationJustificationTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JustificationJustificationType)(nil)).Elem()
}

func (o JustificationJustificationTypeOutput) ToJustificationJustificationTypeOutput() JustificationJustificationTypeOutput {
	return o
}

func (o JustificationJustificationTypeOutput) ToJustificationJustificationTypeOutputWithContext(ctx context.Context) JustificationJustificationTypeOutput {
	return o
}

func (o JustificationJustificationTypeOutput) ToJustificationJustificationTypePtrOutput() JustificationJustificationTypePtrOutput {
	return o.ToJustificationJustificationTypePtrOutputWithContext(context.Background())
}

func (o JustificationJustificationTypeOutput) ToJustificationJustificationTypePtrOutputWithContext(ctx context.Context) JustificationJustificationTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JustificationJustificationType) *JustificationJustificationType {
		return &v
	}).(JustificationJustificationTypePtrOutput)
}

func (o JustificationJustificationTypeOutput) ToOutput(ctx context.Context) pulumix.Output[JustificationJustificationType] {
	return pulumix.Output[JustificationJustificationType]{
		OutputState: o.OutputState,
	}
}

func (o JustificationJustificationTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o JustificationJustificationTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e JustificationJustificationType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o JustificationJustificationTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o JustificationJustificationTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e JustificationJustificationType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type JustificationJustificationTypePtrOutput struct{ *pulumi.OutputState }

func (JustificationJustificationTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JustificationJustificationType)(nil)).Elem()
}

func (o JustificationJustificationTypePtrOutput) ToJustificationJustificationTypePtrOutput() JustificationJustificationTypePtrOutput {
	return o
}

func (o JustificationJustificationTypePtrOutput) ToJustificationJustificationTypePtrOutputWithContext(ctx context.Context) JustificationJustificationTypePtrOutput {
	return o
}

func (o JustificationJustificationTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*JustificationJustificationType] {
	return pulumix.Output[*JustificationJustificationType]{
		OutputState: o.OutputState,
	}
}

func (o JustificationJustificationTypePtrOutput) Elem() JustificationJustificationTypeOutput {
	return o.ApplyT(func(v *JustificationJustificationType) JustificationJustificationType {
		if v != nil {
			return *v
		}
		var ret JustificationJustificationType
		return ret
	}).(JustificationJustificationTypeOutput)
}

func (o JustificationJustificationTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o JustificationJustificationTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *JustificationJustificationType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// JustificationJustificationTypeInput is an input type that accepts JustificationJustificationTypeArgs and JustificationJustificationTypeOutput values.
// You can construct a concrete instance of `JustificationJustificationTypeInput` via:
//
//	JustificationJustificationTypeArgs{...}
type JustificationJustificationTypeInput interface {
	pulumi.Input

	ToJustificationJustificationTypeOutput() JustificationJustificationTypeOutput
	ToJustificationJustificationTypeOutputWithContext(context.Context) JustificationJustificationTypeOutput
}

var justificationJustificationTypePtrType = reflect.TypeOf((**JustificationJustificationType)(nil)).Elem()

type JustificationJustificationTypePtrInput interface {
	pulumi.Input

	ToJustificationJustificationTypePtrOutput() JustificationJustificationTypePtrOutput
	ToJustificationJustificationTypePtrOutputWithContext(context.Context) JustificationJustificationTypePtrOutput
}

type justificationJustificationTypePtr string

func JustificationJustificationTypePtr(v string) JustificationJustificationTypePtrInput {
	return (*justificationJustificationTypePtr)(&v)
}

func (*justificationJustificationTypePtr) ElementType() reflect.Type {
	return justificationJustificationTypePtrType
}

func (in *justificationJustificationTypePtr) ToJustificationJustificationTypePtrOutput() JustificationJustificationTypePtrOutput {
	return pulumi.ToOutput(in).(JustificationJustificationTypePtrOutput)
}

func (in *justificationJustificationTypePtr) ToJustificationJustificationTypePtrOutputWithContext(ctx context.Context) JustificationJustificationTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(JustificationJustificationTypePtrOutput)
}

func (in *justificationJustificationTypePtr) ToOutput(ctx context.Context) pulumix.Output[*JustificationJustificationType] {
	return pulumix.Output[*JustificationJustificationType]{
		OutputState: in.ToJustificationJustificationTypePtrOutputWithContext(ctx).OutputState,
	}
}

// Required. The recovered Dockerfile directive used to construct this layer.
type LayerDirective string

const (
	// Default value for unsupported/missing directive.
	LayerDirectiveDirectiveUnspecified = LayerDirective("DIRECTIVE_UNSPECIFIED")
	// https://docs.docker.com/engine/reference/builder/
	LayerDirectiveMaintainer = LayerDirective("MAINTAINER")
	// https://docs.docker.com/engine/reference/builder/
	LayerDirectiveRun = LayerDirective("RUN")
	// https://docs.docker.com/engine/reference/builder/
	LayerDirectiveCmd = LayerDirective("CMD")
	// https://docs.docker.com/engine/reference/builder/
	LayerDirectiveLabel = LayerDirective("LABEL")
	// https://docs.docker.com/engine/reference/builder/
	LayerDirectiveExpose = LayerDirective("EXPOSE")
	// https://docs.docker.com/engine/reference/builder/
	LayerDirectiveEnv = LayerDirective("ENV")
	// https://docs.docker.com/engine/reference/builder/
	LayerDirectiveAdd = LayerDirective("ADD")
	// https://docs.docker.com/engine/reference/builder/
	LayerDirectiveCopy = LayerDirective("COPY")
	// https://docs.docker.com/engine/reference/builder/
	LayerDirectiveEntrypoint = LayerDirective("ENTRYPOINT")
	// https://docs.docker.com/engine/reference/builder/
	LayerDirectiveVolume = LayerDirective("VOLUME")
	// https://docs.docker.com/engine/reference/builder/
	LayerDirectiveUser = LayerDirective("USER")
	// https://docs.docker.com/engine/reference/builder/
	LayerDirectiveWorkdir = LayerDirective("WORKDIR")
	// https://docs.docker.com/engine/reference/builder/
	LayerDirectiveArg = LayerDirective("ARG")
	// https://docs.docker.com/engine/reference/builder/
	LayerDirectiveOnbuild = LayerDirective("ONBUILD")
	// https://docs.docker.com/engine/reference/builder/
	LayerDirectiveStopsignal = LayerDirective("STOPSIGNAL")
	// https://docs.docker.com/engine/reference/builder/
	LayerDirectiveHealthcheck = LayerDirective("HEALTHCHECK")
	// https://docs.docker.com/engine/reference/builder/
	LayerDirectiveShell = LayerDirective("SHELL")
)

func (LayerDirective) ElementType() reflect.Type {
	return reflect.TypeOf((*LayerDirective)(nil)).Elem()
}

func (e LayerDirective) ToLayerDirectiveOutput() LayerDirectiveOutput {
	return pulumi.ToOutput(e).(LayerDirectiveOutput)
}

func (e LayerDirective) ToLayerDirectiveOutputWithContext(ctx context.Context) LayerDirectiveOutput {
	return pulumi.ToOutputWithContext(ctx, e).(LayerDirectiveOutput)
}

func (e LayerDirective) ToLayerDirectivePtrOutput() LayerDirectivePtrOutput {
	return e.ToLayerDirectivePtrOutputWithContext(context.Background())
}

func (e LayerDirective) ToLayerDirectivePtrOutputWithContext(ctx context.Context) LayerDirectivePtrOutput {
	return LayerDirective(e).ToLayerDirectiveOutputWithContext(ctx).ToLayerDirectivePtrOutputWithContext(ctx)
}

func (e LayerDirective) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e LayerDirective) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e LayerDirective) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e LayerDirective) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type LayerDirectiveOutput struct{ *pulumi.OutputState }

func (LayerDirectiveOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LayerDirective)(nil)).Elem()
}

func (o LayerDirectiveOutput) ToLayerDirectiveOutput() LayerDirectiveOutput {
	return o
}

func (o LayerDirectiveOutput) ToLayerDirectiveOutputWithContext(ctx context.Context) LayerDirectiveOutput {
	return o
}

func (o LayerDirectiveOutput) ToLayerDirectivePtrOutput() LayerDirectivePtrOutput {
	return o.ToLayerDirectivePtrOutputWithContext(context.Background())
}

func (o LayerDirectiveOutput) ToLayerDirectivePtrOutputWithContext(ctx context.Context) LayerDirectivePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LayerDirective) *LayerDirective {
		return &v
	}).(LayerDirectivePtrOutput)
}

func (o LayerDirectiveOutput) ToOutput(ctx context.Context) pulumix.Output[LayerDirective] {
	return pulumix.Output[LayerDirective]{
		OutputState: o.OutputState,
	}
}

func (o LayerDirectiveOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o LayerDirectiveOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e LayerDirective) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o LayerDirectiveOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o LayerDirectiveOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e LayerDirective) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type LayerDirectivePtrOutput struct{ *pulumi.OutputState }

func (LayerDirectivePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LayerDirective)(nil)).Elem()
}

func (o LayerDirectivePtrOutput) ToLayerDirectivePtrOutput() LayerDirectivePtrOutput {
	return o
}

func (o LayerDirectivePtrOutput) ToLayerDirectivePtrOutputWithContext(ctx context.Context) LayerDirectivePtrOutput {
	return o
}

func (o LayerDirectivePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*LayerDirective] {
	return pulumix.Output[*LayerDirective]{
		OutputState: o.OutputState,
	}
}

func (o LayerDirectivePtrOutput) Elem() LayerDirectiveOutput {
	return o.ApplyT(func(v *LayerDirective) LayerDirective {
		if v != nil {
			return *v
		}
		var ret LayerDirective
		return ret
	}).(LayerDirectiveOutput)
}

func (o LayerDirectivePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o LayerDirectivePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *LayerDirective) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// LayerDirectiveInput is an input type that accepts LayerDirectiveArgs and LayerDirectiveOutput values.
// You can construct a concrete instance of `LayerDirectiveInput` via:
//
//	LayerDirectiveArgs{...}
type LayerDirectiveInput interface {
	pulumi.Input

	ToLayerDirectiveOutput() LayerDirectiveOutput
	ToLayerDirectiveOutputWithContext(context.Context) LayerDirectiveOutput
}

var layerDirectivePtrType = reflect.TypeOf((**LayerDirective)(nil)).Elem()

type LayerDirectivePtrInput interface {
	pulumi.Input

	ToLayerDirectivePtrOutput() LayerDirectivePtrOutput
	ToLayerDirectivePtrOutputWithContext(context.Context) LayerDirectivePtrOutput
}

type layerDirectivePtr string

func LayerDirectivePtr(v string) LayerDirectivePtrInput {
	return (*layerDirectivePtr)(&v)
}

func (*layerDirectivePtr) ElementType() reflect.Type {
	return layerDirectivePtrType
}

func (in *layerDirectivePtr) ToLayerDirectivePtrOutput() LayerDirectivePtrOutput {
	return pulumi.ToOutput(in).(LayerDirectivePtrOutput)
}

func (in *layerDirectivePtr) ToLayerDirectivePtrOutputWithContext(ctx context.Context) LayerDirectivePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(LayerDirectivePtrOutput)
}

func (in *layerDirectivePtr) ToOutput(ctx context.Context) pulumix.Output[*LayerDirective] {
	return pulumix.Output[*LayerDirective]{
		OutputState: in.ToLayerDirectivePtrOutputWithContext(ctx).OutputState,
	}
}

// The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.
type PackageArchitecture string

const (
	// Unknown architecture.
	PackageArchitectureArchitectureUnspecified = PackageArchitecture("ARCHITECTURE_UNSPECIFIED")
	// X86 architecture.
	PackageArchitectureX86 = PackageArchitecture("X86")
	// X64 architecture.
	PackageArchitectureX64 = PackageArchitecture("X64")
)

func (PackageArchitecture) ElementType() reflect.Type {
	return reflect.TypeOf((*PackageArchitecture)(nil)).Elem()
}

func (e PackageArchitecture) ToPackageArchitectureOutput() PackageArchitectureOutput {
	return pulumi.ToOutput(e).(PackageArchitectureOutput)
}

func (e PackageArchitecture) ToPackageArchitectureOutputWithContext(ctx context.Context) PackageArchitectureOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PackageArchitectureOutput)
}

func (e PackageArchitecture) ToPackageArchitecturePtrOutput() PackageArchitecturePtrOutput {
	return e.ToPackageArchitecturePtrOutputWithContext(context.Background())
}

func (e PackageArchitecture) ToPackageArchitecturePtrOutputWithContext(ctx context.Context) PackageArchitecturePtrOutput {
	return PackageArchitecture(e).ToPackageArchitectureOutputWithContext(ctx).ToPackageArchitecturePtrOutputWithContext(ctx)
}

func (e PackageArchitecture) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PackageArchitecture) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PackageArchitecture) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PackageArchitecture) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PackageArchitectureOutput struct{ *pulumi.OutputState }

func (PackageArchitectureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PackageArchitecture)(nil)).Elem()
}

func (o PackageArchitectureOutput) ToPackageArchitectureOutput() PackageArchitectureOutput {
	return o
}

func (o PackageArchitectureOutput) ToPackageArchitectureOutputWithContext(ctx context.Context) PackageArchitectureOutput {
	return o
}

func (o PackageArchitectureOutput) ToPackageArchitecturePtrOutput() PackageArchitecturePtrOutput {
	return o.ToPackageArchitecturePtrOutputWithContext(context.Background())
}

func (o PackageArchitectureOutput) ToPackageArchitecturePtrOutputWithContext(ctx context.Context) PackageArchitecturePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PackageArchitecture) *PackageArchitecture {
		return &v
	}).(PackageArchitecturePtrOutput)
}

func (o PackageArchitectureOutput) ToOutput(ctx context.Context) pulumix.Output[PackageArchitecture] {
	return pulumix.Output[PackageArchitecture]{
		OutputState: o.OutputState,
	}
}

func (o PackageArchitectureOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PackageArchitectureOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PackageArchitecture) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PackageArchitectureOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PackageArchitectureOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PackageArchitecture) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PackageArchitecturePtrOutput struct{ *pulumi.OutputState }

func (PackageArchitecturePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PackageArchitecture)(nil)).Elem()
}

func (o PackageArchitecturePtrOutput) ToPackageArchitecturePtrOutput() PackageArchitecturePtrOutput {
	return o
}

func (o PackageArchitecturePtrOutput) ToPackageArchitecturePtrOutputWithContext(ctx context.Context) PackageArchitecturePtrOutput {
	return o
}

func (o PackageArchitecturePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PackageArchitecture] {
	return pulumix.Output[*PackageArchitecture]{
		OutputState: o.OutputState,
	}
}

func (o PackageArchitecturePtrOutput) Elem() PackageArchitectureOutput {
	return o.ApplyT(func(v *PackageArchitecture) PackageArchitecture {
		if v != nil {
			return *v
		}
		var ret PackageArchitecture
		return ret
	}).(PackageArchitectureOutput)
}

func (o PackageArchitecturePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PackageArchitecturePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PackageArchitecture) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PackageArchitectureInput is an input type that accepts PackageArchitectureArgs and PackageArchitectureOutput values.
// You can construct a concrete instance of `PackageArchitectureInput` via:
//
//	PackageArchitectureArgs{...}
type PackageArchitectureInput interface {
	pulumi.Input

	ToPackageArchitectureOutput() PackageArchitectureOutput
	ToPackageArchitectureOutputWithContext(context.Context) PackageArchitectureOutput
}

var packageArchitecturePtrType = reflect.TypeOf((**PackageArchitecture)(nil)).Elem()

type PackageArchitecturePtrInput interface {
	pulumi.Input

	ToPackageArchitecturePtrOutput() PackageArchitecturePtrOutput
	ToPackageArchitecturePtrOutputWithContext(context.Context) PackageArchitecturePtrOutput
}

type packageArchitecturePtr string

func PackageArchitecturePtr(v string) PackageArchitecturePtrInput {
	return (*packageArchitecturePtr)(&v)
}

func (*packageArchitecturePtr) ElementType() reflect.Type {
	return packageArchitecturePtrType
}

func (in *packageArchitecturePtr) ToPackageArchitecturePtrOutput() PackageArchitecturePtrOutput {
	return pulumi.ToOutput(in).(PackageArchitecturePtrOutput)
}

func (in *packageArchitecturePtr) ToPackageArchitecturePtrOutputWithContext(ctx context.Context) PackageArchitecturePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PackageArchitecturePtrOutput)
}

func (in *packageArchitecturePtr) ToOutput(ctx context.Context) pulumix.Output[*PackageArchitecture] {
	return pulumix.Output[*PackageArchitecture]{
		OutputState: in.ToPackageArchitecturePtrOutputWithContext(ctx).OutputState,
	}
}

// Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).
type PgpSignedAttestationContentType string

const (
	// `ContentType` is not set.
	PgpSignedAttestationContentTypeContentTypeUnspecified = PgpSignedAttestationContentType("CONTENT_TYPE_UNSPECIFIED")
	// Atomic format attestation signature. See https://github.com/containers/image/blob/8a5d2f82a6e3263290c8e0276c3e0f64e77723e7/docs/atomic-signature.md The payload extracted from `signature` is a JSON blob conforming to the linked schema.
	PgpSignedAttestationContentTypeSimpleSigningJson = PgpSignedAttestationContentType("SIMPLE_SIGNING_JSON")
)

func (PgpSignedAttestationContentType) ElementType() reflect.Type {
	return reflect.TypeOf((*PgpSignedAttestationContentType)(nil)).Elem()
}

func (e PgpSignedAttestationContentType) ToPgpSignedAttestationContentTypeOutput() PgpSignedAttestationContentTypeOutput {
	return pulumi.ToOutput(e).(PgpSignedAttestationContentTypeOutput)
}

func (e PgpSignedAttestationContentType) ToPgpSignedAttestationContentTypeOutputWithContext(ctx context.Context) PgpSignedAttestationContentTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PgpSignedAttestationContentTypeOutput)
}

func (e PgpSignedAttestationContentType) ToPgpSignedAttestationContentTypePtrOutput() PgpSignedAttestationContentTypePtrOutput {
	return e.ToPgpSignedAttestationContentTypePtrOutputWithContext(context.Background())
}

func (e PgpSignedAttestationContentType) ToPgpSignedAttestationContentTypePtrOutputWithContext(ctx context.Context) PgpSignedAttestationContentTypePtrOutput {
	return PgpSignedAttestationContentType(e).ToPgpSignedAttestationContentTypeOutputWithContext(ctx).ToPgpSignedAttestationContentTypePtrOutputWithContext(ctx)
}

func (e PgpSignedAttestationContentType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PgpSignedAttestationContentType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PgpSignedAttestationContentType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PgpSignedAttestationContentType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PgpSignedAttestationContentTypeOutput struct{ *pulumi.OutputState }

func (PgpSignedAttestationContentTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PgpSignedAttestationContentType)(nil)).Elem()
}

func (o PgpSignedAttestationContentTypeOutput) ToPgpSignedAttestationContentTypeOutput() PgpSignedAttestationContentTypeOutput {
	return o
}

func (o PgpSignedAttestationContentTypeOutput) ToPgpSignedAttestationContentTypeOutputWithContext(ctx context.Context) PgpSignedAttestationContentTypeOutput {
	return o
}

func (o PgpSignedAttestationContentTypeOutput) ToPgpSignedAttestationContentTypePtrOutput() PgpSignedAttestationContentTypePtrOutput {
	return o.ToPgpSignedAttestationContentTypePtrOutputWithContext(context.Background())
}

func (o PgpSignedAttestationContentTypeOutput) ToPgpSignedAttestationContentTypePtrOutputWithContext(ctx context.Context) PgpSignedAttestationContentTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PgpSignedAttestationContentType) *PgpSignedAttestationContentType {
		return &v
	}).(PgpSignedAttestationContentTypePtrOutput)
}

func (o PgpSignedAttestationContentTypeOutput) ToOutput(ctx context.Context) pulumix.Output[PgpSignedAttestationContentType] {
	return pulumix.Output[PgpSignedAttestationContentType]{
		OutputState: o.OutputState,
	}
}

func (o PgpSignedAttestationContentTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PgpSignedAttestationContentTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PgpSignedAttestationContentType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PgpSignedAttestationContentTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PgpSignedAttestationContentTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PgpSignedAttestationContentType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PgpSignedAttestationContentTypePtrOutput struct{ *pulumi.OutputState }

func (PgpSignedAttestationContentTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PgpSignedAttestationContentType)(nil)).Elem()
}

func (o PgpSignedAttestationContentTypePtrOutput) ToPgpSignedAttestationContentTypePtrOutput() PgpSignedAttestationContentTypePtrOutput {
	return o
}

func (o PgpSignedAttestationContentTypePtrOutput) ToPgpSignedAttestationContentTypePtrOutputWithContext(ctx context.Context) PgpSignedAttestationContentTypePtrOutput {
	return o
}

func (o PgpSignedAttestationContentTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PgpSignedAttestationContentType] {
	return pulumix.Output[*PgpSignedAttestationContentType]{
		OutputState: o.OutputState,
	}
}

func (o PgpSignedAttestationContentTypePtrOutput) Elem() PgpSignedAttestationContentTypeOutput {
	return o.ApplyT(func(v *PgpSignedAttestationContentType) PgpSignedAttestationContentType {
		if v != nil {
			return *v
		}
		var ret PgpSignedAttestationContentType
		return ret
	}).(PgpSignedAttestationContentTypeOutput)
}

func (o PgpSignedAttestationContentTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PgpSignedAttestationContentTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PgpSignedAttestationContentType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PgpSignedAttestationContentTypeInput is an input type that accepts PgpSignedAttestationContentTypeArgs and PgpSignedAttestationContentTypeOutput values.
// You can construct a concrete instance of `PgpSignedAttestationContentTypeInput` via:
//
//	PgpSignedAttestationContentTypeArgs{...}
type PgpSignedAttestationContentTypeInput interface {
	pulumi.Input

	ToPgpSignedAttestationContentTypeOutput() PgpSignedAttestationContentTypeOutput
	ToPgpSignedAttestationContentTypeOutputWithContext(context.Context) PgpSignedAttestationContentTypeOutput
}

var pgpSignedAttestationContentTypePtrType = reflect.TypeOf((**PgpSignedAttestationContentType)(nil)).Elem()

type PgpSignedAttestationContentTypePtrInput interface {
	pulumi.Input

	ToPgpSignedAttestationContentTypePtrOutput() PgpSignedAttestationContentTypePtrOutput
	ToPgpSignedAttestationContentTypePtrOutputWithContext(context.Context) PgpSignedAttestationContentTypePtrOutput
}

type pgpSignedAttestationContentTypePtr string

func PgpSignedAttestationContentTypePtr(v string) PgpSignedAttestationContentTypePtrInput {
	return (*pgpSignedAttestationContentTypePtr)(&v)
}

func (*pgpSignedAttestationContentTypePtr) ElementType() reflect.Type {
	return pgpSignedAttestationContentTypePtrType
}

func (in *pgpSignedAttestationContentTypePtr) ToPgpSignedAttestationContentTypePtrOutput() PgpSignedAttestationContentTypePtrOutput {
	return pulumi.ToOutput(in).(PgpSignedAttestationContentTypePtrOutput)
}

func (in *pgpSignedAttestationContentTypePtr) ToPgpSignedAttestationContentTypePtrOutputWithContext(ctx context.Context) PgpSignedAttestationContentTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PgpSignedAttestationContentTypePtrOutput)
}

func (in *pgpSignedAttestationContentTypePtr) ToOutput(ctx context.Context) pulumix.Output[*PgpSignedAttestationContentType] {
	return pulumix.Output[*PgpSignedAttestationContentType]{
		OutputState: in.ToPgpSignedAttestationContentTypePtrOutputWithContext(ctx).OutputState,
	}
}

// The type of relationship between the source and target SPDX elements
type RelationshipNoteType string

const (
	// Unspecified
	RelationshipNoteTypeRelationshipTypeUnspecified = RelationshipNoteType("RELATIONSHIP_TYPE_UNSPECIFIED")
	// Is to be used when SPDXRef-DOCUMENT describes SPDXRef-A
	RelationshipNoteTypeDescribes = RelationshipNoteType("DESCRIBES")
	// Is to be used when SPDXRef-A is described by SPDXREF-Document
	RelationshipNoteTypeDescribedBy = RelationshipNoteType("DESCRIBED_BY")
	// Is to be used when SPDXRef-A contains SPDXRef-B
	RelationshipNoteTypeContains = RelationshipNoteType("CONTAINS")
	// Is to be used when SPDXRef-A is contained by SPDXRef-B
	RelationshipNoteTypeContainedBy = RelationshipNoteType("CONTAINED_BY")
	// Is to be used when SPDXRef-A depends on SPDXRef-B
	RelationshipNoteTypeDependsOn = RelationshipNoteType("DEPENDS_ON")
	// Is to be used when SPDXRef-A is dependency of SPDXRef-B
	RelationshipNoteTypeDependencyOf = RelationshipNoteType("DEPENDENCY_OF")
	// Is to be used when SPDXRef-A is a manifest file that lists a set of dependencies for SPDXRef-B
	RelationshipNoteTypeDependencyManifestOf = RelationshipNoteType("DEPENDENCY_MANIFEST_OF")
	// Is to be used when SPDXRef-A is a build dependency of SPDXRef-B
	RelationshipNoteTypeBuildDependencyOf = RelationshipNoteType("BUILD_DEPENDENCY_OF")
	// Is to be used when SPDXRef-A is a development dependency of SPDXRef-B
	RelationshipNoteTypeDevDependencyOf = RelationshipNoteType("DEV_DEPENDENCY_OF")
	// Is to be used when SPDXRef-A is an optional dependency of SPDXRef-B
	RelationshipNoteTypeOptionalDependencyOf = RelationshipNoteType("OPTIONAL_DEPENDENCY_OF")
	// Is to be used when SPDXRef-A is a to be provided dependency of SPDXRef-B
	RelationshipNoteTypeProvidedDependencyOf = RelationshipNoteType("PROVIDED_DEPENDENCY_OF")
	// Is to be used when SPDXRef-A is a test dependency of SPDXRef-B
	RelationshipNoteTypeTestDependencyOf = RelationshipNoteType("TEST_DEPENDENCY_OF")
	// Is to be used when SPDXRef-A is a dependency required for the execution of SPDXRef-B
	RelationshipNoteTypeRuntimeDependencyOf = RelationshipNoteType("RUNTIME_DEPENDENCY_OF")
	// Is to be used when SPDXRef-A is an example of SPDXRef-B
	RelationshipNoteTypeExampleOf = RelationshipNoteType("EXAMPLE_OF")
	// Is to be used when SPDXRef-A generates SPDXRef-B
	RelationshipNoteTypeGenerates = RelationshipNoteType("GENERATES")
	// Is to be used when SPDXRef-A was generated from SPDXRef-B
	RelationshipNoteTypeGeneratedFrom = RelationshipNoteType("GENERATED_FROM")
	// Is to be used when SPDXRef-A is an ancestor (same lineage but pre-dates) SPDXRef-B
	RelationshipNoteTypeAncestorOf = RelationshipNoteType("ANCESTOR_OF")
	// Is to be used when SPDXRef-A is a descendant of (same lineage but postdates) SPDXRef-B
	RelationshipNoteTypeDescendantOf = RelationshipNoteType("DESCENDANT_OF")
	// Is to be used when SPDXRef-A is a variant of (same lineage but not clear which came first) SPDXRef-B
	RelationshipNoteTypeVariantOf = RelationshipNoteType("VARIANT_OF")
	// Is to be used when distributing SPDXRef-A requires that SPDXRef-B also be distributed
	RelationshipNoteTypeDistributionArtifact = RelationshipNoteType("DISTRIBUTION_ARTIFACT")
	// Is to be used when SPDXRef-A is a patch file for (to be applied to) SPDXRef-B
	RelationshipNoteTypePatchFor = RelationshipNoteType("PATCH_FOR")
	// Is to be used when SPDXRef-A is a patch file that has been applied to SPDXRef-B
	RelationshipNoteTypePatchApplied = RelationshipNoteType("PATCH_APPLIED")
	// Is to be used when SPDXRef-A is an exact copy of SPDXRef-B
	RelationshipNoteTypeCopyOf = RelationshipNoteType("COPY_OF")
	// Is to be used when SPDXRef-A is a file that was added to SPDXRef-B
	RelationshipNoteTypeFileAdded = RelationshipNoteType("FILE_ADDED")
	// Is to be used when SPDXRef-A is a file that was deleted from SPDXRef-B
	RelationshipNoteTypeFileDeleted = RelationshipNoteType("FILE_DELETED")
	// Is to be used when SPDXRef-A is a file that was modified from SPDXRef-B
	RelationshipNoteTypeFileModified = RelationshipNoteType("FILE_MODIFIED")
	// Is to be used when SPDXRef-A is expanded from the archive SPDXRef-B
	RelationshipNoteTypeExpandedFromArchive = RelationshipNoteType("EXPANDED_FROM_ARCHIVE")
	// Is to be used when SPDXRef-A dynamically links to SPDXRef-B
	RelationshipNoteTypeDynamicLink = RelationshipNoteType("DYNAMIC_LINK")
	// Is to be used when SPDXRef-A statically links to SPDXRef-B
	RelationshipNoteTypeStaticLink = RelationshipNoteType("STATIC_LINK")
	// Is to be used when SPDXRef-A is a data file used in SPDXRef-B
	RelationshipNoteTypeDataFileOf = RelationshipNoteType("DATA_FILE_OF")
	// Is to be used when SPDXRef-A is a test case used in testing SPDXRef-B
	RelationshipNoteTypeTestCaseOf = RelationshipNoteType("TEST_CASE_OF")
	// Is to be used when SPDXRef-A is used to build SPDXRef-B
	RelationshipNoteTypeBuildToolOf = RelationshipNoteType("BUILD_TOOL_OF")
	// Is to be used when SPDXRef-A is used as a development tool for SPDXRef-B
	RelationshipNoteTypeDevToolOf = RelationshipNoteType("DEV_TOOL_OF")
	// Is to be used when SPDXRef-A is used for testing SPDXRef-B
	RelationshipNoteTypeTestOf = RelationshipNoteType("TEST_OF")
	// Is to be used when SPDXRef-A is used as a test tool for SPDXRef-B
	RelationshipNoteTypeTestToolOf = RelationshipNoteType("TEST_TOOL_OF")
	// Is to be used when SPDXRef-A provides documentation of SPDXRef-B
	RelationshipNoteTypeDocumentationOf = RelationshipNoteType("DOCUMENTATION_OF")
	// Is to be used when SPDXRef-A is an optional component of SPDXRef-B
	RelationshipNoteTypeOptionalComponentOf = RelationshipNoteType("OPTIONAL_COMPONENT_OF")
	// Is to be used when SPDXRef-A is a metafile of SPDXRef-B
	RelationshipNoteTypeMetafileOf = RelationshipNoteType("METAFILE_OF")
	// Is to be used when SPDXRef-A is used as a package as part of SPDXRef-B
	RelationshipNoteTypePackageOf = RelationshipNoteType("PACKAGE_OF")
	// Is to be used when (current) SPDXRef-DOCUMENT amends the SPDX information in SPDXRef-B
	RelationshipNoteTypeAmends = RelationshipNoteType("AMENDS")
	// Is to be used when SPDXRef-A is a prerequisite for SPDXRef-B
	RelationshipNoteTypePrerequisiteFor = RelationshipNoteType("PREREQUISITE_FOR")
	// Is to be used when SPDXRef-A has as a prerequisite SPDXRef-B
	RelationshipNoteTypeHasPrerequisite = RelationshipNoteType("HAS_PREREQUISITE")
	// Is to be used for a relationship which has not been defined in the formal SPDX specification. A description of the relationship should be included in the Relationship comments field
	RelationshipNoteTypeOther = RelationshipNoteType("OTHER")
)

func (RelationshipNoteType) ElementType() reflect.Type {
	return reflect.TypeOf((*RelationshipNoteType)(nil)).Elem()
}

func (e RelationshipNoteType) ToRelationshipNoteTypeOutput() RelationshipNoteTypeOutput {
	return pulumi.ToOutput(e).(RelationshipNoteTypeOutput)
}

func (e RelationshipNoteType) ToRelationshipNoteTypeOutputWithContext(ctx context.Context) RelationshipNoteTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(RelationshipNoteTypeOutput)
}

func (e RelationshipNoteType) ToRelationshipNoteTypePtrOutput() RelationshipNoteTypePtrOutput {
	return e.ToRelationshipNoteTypePtrOutputWithContext(context.Background())
}

func (e RelationshipNoteType) ToRelationshipNoteTypePtrOutputWithContext(ctx context.Context) RelationshipNoteTypePtrOutput {
	return RelationshipNoteType(e).ToRelationshipNoteTypeOutputWithContext(ctx).ToRelationshipNoteTypePtrOutputWithContext(ctx)
}

func (e RelationshipNoteType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RelationshipNoteType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RelationshipNoteType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RelationshipNoteType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type RelationshipNoteTypeOutput struct{ *pulumi.OutputState }

func (RelationshipNoteTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RelationshipNoteType)(nil)).Elem()
}

func (o RelationshipNoteTypeOutput) ToRelationshipNoteTypeOutput() RelationshipNoteTypeOutput {
	return o
}

func (o RelationshipNoteTypeOutput) ToRelationshipNoteTypeOutputWithContext(ctx context.Context) RelationshipNoteTypeOutput {
	return o
}

func (o RelationshipNoteTypeOutput) ToRelationshipNoteTypePtrOutput() RelationshipNoteTypePtrOutput {
	return o.ToRelationshipNoteTypePtrOutputWithContext(context.Background())
}

func (o RelationshipNoteTypeOutput) ToRelationshipNoteTypePtrOutputWithContext(ctx context.Context) RelationshipNoteTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RelationshipNoteType) *RelationshipNoteType {
		return &v
	}).(RelationshipNoteTypePtrOutput)
}

func (o RelationshipNoteTypeOutput) ToOutput(ctx context.Context) pulumix.Output[RelationshipNoteType] {
	return pulumix.Output[RelationshipNoteType]{
		OutputState: o.OutputState,
	}
}

func (o RelationshipNoteTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o RelationshipNoteTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RelationshipNoteType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o RelationshipNoteTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RelationshipNoteTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RelationshipNoteType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type RelationshipNoteTypePtrOutput struct{ *pulumi.OutputState }

func (RelationshipNoteTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RelationshipNoteType)(nil)).Elem()
}

func (o RelationshipNoteTypePtrOutput) ToRelationshipNoteTypePtrOutput() RelationshipNoteTypePtrOutput {
	return o
}

func (o RelationshipNoteTypePtrOutput) ToRelationshipNoteTypePtrOutputWithContext(ctx context.Context) RelationshipNoteTypePtrOutput {
	return o
}

func (o RelationshipNoteTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*RelationshipNoteType] {
	return pulumix.Output[*RelationshipNoteType]{
		OutputState: o.OutputState,
	}
}

func (o RelationshipNoteTypePtrOutput) Elem() RelationshipNoteTypeOutput {
	return o.ApplyT(func(v *RelationshipNoteType) RelationshipNoteType {
		if v != nil {
			return *v
		}
		var ret RelationshipNoteType
		return ret
	}).(RelationshipNoteTypeOutput)
}

func (o RelationshipNoteTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RelationshipNoteTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *RelationshipNoteType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// RelationshipNoteTypeInput is an input type that accepts RelationshipNoteTypeArgs and RelationshipNoteTypeOutput values.
// You can construct a concrete instance of `RelationshipNoteTypeInput` via:
//
//	RelationshipNoteTypeArgs{...}
type RelationshipNoteTypeInput interface {
	pulumi.Input

	ToRelationshipNoteTypeOutput() RelationshipNoteTypeOutput
	ToRelationshipNoteTypeOutputWithContext(context.Context) RelationshipNoteTypeOutput
}

var relationshipNoteTypePtrType = reflect.TypeOf((**RelationshipNoteType)(nil)).Elem()

type RelationshipNoteTypePtrInput interface {
	pulumi.Input

	ToRelationshipNoteTypePtrOutput() RelationshipNoteTypePtrOutput
	ToRelationshipNoteTypePtrOutputWithContext(context.Context) RelationshipNoteTypePtrOutput
}

type relationshipNoteTypePtr string

func RelationshipNoteTypePtr(v string) RelationshipNoteTypePtrInput {
	return (*relationshipNoteTypePtr)(&v)
}

func (*relationshipNoteTypePtr) ElementType() reflect.Type {
	return relationshipNoteTypePtrType
}

func (in *relationshipNoteTypePtr) ToRelationshipNoteTypePtrOutput() RelationshipNoteTypePtrOutput {
	return pulumi.ToOutput(in).(RelationshipNoteTypePtrOutput)
}

func (in *relationshipNoteTypePtr) ToRelationshipNoteTypePtrOutputWithContext(ctx context.Context) RelationshipNoteTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(RelationshipNoteTypePtrOutput)
}

func (in *relationshipNoteTypePtr) ToOutput(ctx context.Context) pulumix.Output[*RelationshipNoteType] {
	return pulumix.Output[*RelationshipNoteType]{
		OutputState: in.ToRelationshipNoteTypePtrOutputWithContext(ctx).OutputState,
	}
}

// The type of remediation that can be applied.
type RemediationRemediationType string

const (
	// No remediation type specified.
	RemediationRemediationTypeRemediationTypeUnspecified = RemediationRemediationType("REMEDIATION_TYPE_UNSPECIFIED")
	// A MITIGATION is available.
	RemediationRemediationTypeMitigation = RemediationRemediationType("MITIGATION")
	// No fix is planned.
	RemediationRemediationTypeNoFixPlanned = RemediationRemediationType("NO_FIX_PLANNED")
	// Not available.
	RemediationRemediationTypeNoneAvailable = RemediationRemediationType("NONE_AVAILABLE")
	// A vendor fix is available.
	RemediationRemediationTypeVendorFix = RemediationRemediationType("VENDOR_FIX")
	// A workaround is available.
	RemediationRemediationTypeWorkaround = RemediationRemediationType("WORKAROUND")
)

func (RemediationRemediationType) ElementType() reflect.Type {
	return reflect.TypeOf((*RemediationRemediationType)(nil)).Elem()
}

func (e RemediationRemediationType) ToRemediationRemediationTypeOutput() RemediationRemediationTypeOutput {
	return pulumi.ToOutput(e).(RemediationRemediationTypeOutput)
}

func (e RemediationRemediationType) ToRemediationRemediationTypeOutputWithContext(ctx context.Context) RemediationRemediationTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(RemediationRemediationTypeOutput)
}

func (e RemediationRemediationType) ToRemediationRemediationTypePtrOutput() RemediationRemediationTypePtrOutput {
	return e.ToRemediationRemediationTypePtrOutputWithContext(context.Background())
}

func (e RemediationRemediationType) ToRemediationRemediationTypePtrOutputWithContext(ctx context.Context) RemediationRemediationTypePtrOutput {
	return RemediationRemediationType(e).ToRemediationRemediationTypeOutputWithContext(ctx).ToRemediationRemediationTypePtrOutputWithContext(ctx)
}

func (e RemediationRemediationType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RemediationRemediationType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RemediationRemediationType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RemediationRemediationType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type RemediationRemediationTypeOutput struct{ *pulumi.OutputState }

func (RemediationRemediationTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemediationRemediationType)(nil)).Elem()
}

func (o RemediationRemediationTypeOutput) ToRemediationRemediationTypeOutput() RemediationRemediationTypeOutput {
	return o
}

func (o RemediationRemediationTypeOutput) ToRemediationRemediationTypeOutputWithContext(ctx context.Context) RemediationRemediationTypeOutput {
	return o
}

func (o RemediationRemediationTypeOutput) ToRemediationRemediationTypePtrOutput() RemediationRemediationTypePtrOutput {
	return o.ToRemediationRemediationTypePtrOutputWithContext(context.Background())
}

func (o RemediationRemediationTypeOutput) ToRemediationRemediationTypePtrOutputWithContext(ctx context.Context) RemediationRemediationTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RemediationRemediationType) *RemediationRemediationType {
		return &v
	}).(RemediationRemediationTypePtrOutput)
}

func (o RemediationRemediationTypeOutput) ToOutput(ctx context.Context) pulumix.Output[RemediationRemediationType] {
	return pulumix.Output[RemediationRemediationType]{
		OutputState: o.OutputState,
	}
}

func (o RemediationRemediationTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o RemediationRemediationTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RemediationRemediationType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o RemediationRemediationTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RemediationRemediationTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RemediationRemediationType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type RemediationRemediationTypePtrOutput struct{ *pulumi.OutputState }

func (RemediationRemediationTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RemediationRemediationType)(nil)).Elem()
}

func (o RemediationRemediationTypePtrOutput) ToRemediationRemediationTypePtrOutput() RemediationRemediationTypePtrOutput {
	return o
}

func (o RemediationRemediationTypePtrOutput) ToRemediationRemediationTypePtrOutputWithContext(ctx context.Context) RemediationRemediationTypePtrOutput {
	return o
}

func (o RemediationRemediationTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*RemediationRemediationType] {
	return pulumix.Output[*RemediationRemediationType]{
		OutputState: o.OutputState,
	}
}

func (o RemediationRemediationTypePtrOutput) Elem() RemediationRemediationTypeOutput {
	return o.ApplyT(func(v *RemediationRemediationType) RemediationRemediationType {
		if v != nil {
			return *v
		}
		var ret RemediationRemediationType
		return ret
	}).(RemediationRemediationTypeOutput)
}

func (o RemediationRemediationTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RemediationRemediationTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *RemediationRemediationType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// RemediationRemediationTypeInput is an input type that accepts RemediationRemediationTypeArgs and RemediationRemediationTypeOutput values.
// You can construct a concrete instance of `RemediationRemediationTypeInput` via:
//
//	RemediationRemediationTypeArgs{...}
type RemediationRemediationTypeInput interface {
	pulumi.Input

	ToRemediationRemediationTypeOutput() RemediationRemediationTypeOutput
	ToRemediationRemediationTypeOutputWithContext(context.Context) RemediationRemediationTypeOutput
}

var remediationRemediationTypePtrType = reflect.TypeOf((**RemediationRemediationType)(nil)).Elem()

type RemediationRemediationTypePtrInput interface {
	pulumi.Input

	ToRemediationRemediationTypePtrOutput() RemediationRemediationTypePtrOutput
	ToRemediationRemediationTypePtrOutputWithContext(context.Context) RemediationRemediationTypePtrOutput
}

type remediationRemediationTypePtr string

func RemediationRemediationTypePtr(v string) RemediationRemediationTypePtrInput {
	return (*remediationRemediationTypePtr)(&v)
}

func (*remediationRemediationTypePtr) ElementType() reflect.Type {
	return remediationRemediationTypePtrType
}

func (in *remediationRemediationTypePtr) ToRemediationRemediationTypePtrOutput() RemediationRemediationTypePtrOutput {
	return pulumi.ToOutput(in).(RemediationRemediationTypePtrOutput)
}

func (in *remediationRemediationTypePtr) ToRemediationRemediationTypePtrOutputWithContext(ctx context.Context) RemediationRemediationTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(RemediationRemediationTypePtrOutput)
}

func (in *remediationRemediationTypePtr) ToOutput(ctx context.Context) pulumix.Output[*RemediationRemediationType] {
	return pulumix.Output[*RemediationRemediationType]{
		OutputState: in.ToRemediationRemediationTypePtrOutputWithContext(ctx).OutputState,
	}
}

// The progress of the SBOM generation.
type SBOMStatusSbomState string

const (
	// Default unknown state.
	SBOMStatusSbomStateSbomStateUnspecified = SBOMStatusSbomState("SBOM_STATE_UNSPECIFIED")
	// SBOM scanning is pending.
	SBOMStatusSbomStatePending = SBOMStatusSbomState("PENDING")
	// SBOM scanning has completed.
	SBOMStatusSbomStateComplete = SBOMStatusSbomState("COMPLETE")
)

func (SBOMStatusSbomState) ElementType() reflect.Type {
	return reflect.TypeOf((*SBOMStatusSbomState)(nil)).Elem()
}

func (e SBOMStatusSbomState) ToSBOMStatusSbomStateOutput() SBOMStatusSbomStateOutput {
	return pulumi.ToOutput(e).(SBOMStatusSbomStateOutput)
}

func (e SBOMStatusSbomState) ToSBOMStatusSbomStateOutputWithContext(ctx context.Context) SBOMStatusSbomStateOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SBOMStatusSbomStateOutput)
}

func (e SBOMStatusSbomState) ToSBOMStatusSbomStatePtrOutput() SBOMStatusSbomStatePtrOutput {
	return e.ToSBOMStatusSbomStatePtrOutputWithContext(context.Background())
}

func (e SBOMStatusSbomState) ToSBOMStatusSbomStatePtrOutputWithContext(ctx context.Context) SBOMStatusSbomStatePtrOutput {
	return SBOMStatusSbomState(e).ToSBOMStatusSbomStateOutputWithContext(ctx).ToSBOMStatusSbomStatePtrOutputWithContext(ctx)
}

func (e SBOMStatusSbomState) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SBOMStatusSbomState) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SBOMStatusSbomState) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SBOMStatusSbomState) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SBOMStatusSbomStateOutput struct{ *pulumi.OutputState }

func (SBOMStatusSbomStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SBOMStatusSbomState)(nil)).Elem()
}

func (o SBOMStatusSbomStateOutput) ToSBOMStatusSbomStateOutput() SBOMStatusSbomStateOutput {
	return o
}

func (o SBOMStatusSbomStateOutput) ToSBOMStatusSbomStateOutputWithContext(ctx context.Context) SBOMStatusSbomStateOutput {
	return o
}

func (o SBOMStatusSbomStateOutput) ToSBOMStatusSbomStatePtrOutput() SBOMStatusSbomStatePtrOutput {
	return o.ToSBOMStatusSbomStatePtrOutputWithContext(context.Background())
}

func (o SBOMStatusSbomStateOutput) ToSBOMStatusSbomStatePtrOutputWithContext(ctx context.Context) SBOMStatusSbomStatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SBOMStatusSbomState) *SBOMStatusSbomState {
		return &v
	}).(SBOMStatusSbomStatePtrOutput)
}

func (o SBOMStatusSbomStateOutput) ToOutput(ctx context.Context) pulumix.Output[SBOMStatusSbomState] {
	return pulumix.Output[SBOMStatusSbomState]{
		OutputState: o.OutputState,
	}
}

func (o SBOMStatusSbomStateOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SBOMStatusSbomStateOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SBOMStatusSbomState) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SBOMStatusSbomStateOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SBOMStatusSbomStateOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SBOMStatusSbomState) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SBOMStatusSbomStatePtrOutput struct{ *pulumi.OutputState }

func (SBOMStatusSbomStatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SBOMStatusSbomState)(nil)).Elem()
}

func (o SBOMStatusSbomStatePtrOutput) ToSBOMStatusSbomStatePtrOutput() SBOMStatusSbomStatePtrOutput {
	return o
}

func (o SBOMStatusSbomStatePtrOutput) ToSBOMStatusSbomStatePtrOutputWithContext(ctx context.Context) SBOMStatusSbomStatePtrOutput {
	return o
}

func (o SBOMStatusSbomStatePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SBOMStatusSbomState] {
	return pulumix.Output[*SBOMStatusSbomState]{
		OutputState: o.OutputState,
	}
}

func (o SBOMStatusSbomStatePtrOutput) Elem() SBOMStatusSbomStateOutput {
	return o.ApplyT(func(v *SBOMStatusSbomState) SBOMStatusSbomState {
		if v != nil {
			return *v
		}
		var ret SBOMStatusSbomState
		return ret
	}).(SBOMStatusSbomStateOutput)
}

func (o SBOMStatusSbomStatePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SBOMStatusSbomStatePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SBOMStatusSbomState) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SBOMStatusSbomStateInput is an input type that accepts SBOMStatusSbomStateArgs and SBOMStatusSbomStateOutput values.
// You can construct a concrete instance of `SBOMStatusSbomStateInput` via:
//
//	SBOMStatusSbomStateArgs{...}
type SBOMStatusSbomStateInput interface {
	pulumi.Input

	ToSBOMStatusSbomStateOutput() SBOMStatusSbomStateOutput
	ToSBOMStatusSbomStateOutputWithContext(context.Context) SBOMStatusSbomStateOutput
}

var sbomstatusSbomStatePtrType = reflect.TypeOf((**SBOMStatusSbomState)(nil)).Elem()

type SBOMStatusSbomStatePtrInput interface {
	pulumi.Input

	ToSBOMStatusSbomStatePtrOutput() SBOMStatusSbomStatePtrOutput
	ToSBOMStatusSbomStatePtrOutputWithContext(context.Context) SBOMStatusSbomStatePtrOutput
}

type sbomstatusSbomStatePtr string

func SBOMStatusSbomStatePtr(v string) SBOMStatusSbomStatePtrInput {
	return (*sbomstatusSbomStatePtr)(&v)
}

func (*sbomstatusSbomStatePtr) ElementType() reflect.Type {
	return sbomstatusSbomStatePtrType
}

func (in *sbomstatusSbomStatePtr) ToSBOMStatusSbomStatePtrOutput() SBOMStatusSbomStatePtrOutput {
	return pulumi.ToOutput(in).(SBOMStatusSbomStatePtrOutput)
}

func (in *sbomstatusSbomStatePtr) ToSBOMStatusSbomStatePtrOutputWithContext(ctx context.Context) SBOMStatusSbomStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SBOMStatusSbomStatePtrOutput)
}

func (in *sbomstatusSbomStatePtr) ToOutput(ctx context.Context) pulumix.Output[*SBOMStatusSbomState] {
	return pulumix.Output[*SBOMStatusSbomState]{
		OutputState: in.ToSBOMStatusSbomStatePtrOutputWithContext(ctx).OutputState,
	}
}

// Required. Distinguishes between sentinel MIN/MAX versions and normal versions.
type VersionKind string

const (
	// Unknown.
	VersionKindVersionKindUnspecified = VersionKind("VERSION_KIND_UNSPECIFIED")
	// A standard package version.
	VersionKindNormal = VersionKind("NORMAL")
	// A special version representing negative infinity.
	VersionKindMinimum = VersionKind("MINIMUM")
	// A special version representing positive infinity.
	VersionKindMaximum = VersionKind("MAXIMUM")
)

func (VersionKind) ElementType() reflect.Type {
	return reflect.TypeOf((*VersionKind)(nil)).Elem()
}

func (e VersionKind) ToVersionKindOutput() VersionKindOutput {
	return pulumi.ToOutput(e).(VersionKindOutput)
}

func (e VersionKind) ToVersionKindOutputWithContext(ctx context.Context) VersionKindOutput {
	return pulumi.ToOutputWithContext(ctx, e).(VersionKindOutput)
}

func (e VersionKind) ToVersionKindPtrOutput() VersionKindPtrOutput {
	return e.ToVersionKindPtrOutputWithContext(context.Background())
}

func (e VersionKind) ToVersionKindPtrOutputWithContext(ctx context.Context) VersionKindPtrOutput {
	return VersionKind(e).ToVersionKindOutputWithContext(ctx).ToVersionKindPtrOutputWithContext(ctx)
}

func (e VersionKind) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e VersionKind) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e VersionKind) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e VersionKind) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type VersionKindOutput struct{ *pulumi.OutputState }

func (VersionKindOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VersionKind)(nil)).Elem()
}

func (o VersionKindOutput) ToVersionKindOutput() VersionKindOutput {
	return o
}

func (o VersionKindOutput) ToVersionKindOutputWithContext(ctx context.Context) VersionKindOutput {
	return o
}

func (o VersionKindOutput) ToVersionKindPtrOutput() VersionKindPtrOutput {
	return o.ToVersionKindPtrOutputWithContext(context.Background())
}

func (o VersionKindOutput) ToVersionKindPtrOutputWithContext(ctx context.Context) VersionKindPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VersionKind) *VersionKind {
		return &v
	}).(VersionKindPtrOutput)
}

func (o VersionKindOutput) ToOutput(ctx context.Context) pulumix.Output[VersionKind] {
	return pulumix.Output[VersionKind]{
		OutputState: o.OutputState,
	}
}

func (o VersionKindOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o VersionKindOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e VersionKind) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o VersionKindOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o VersionKindOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e VersionKind) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type VersionKindPtrOutput struct{ *pulumi.OutputState }

func (VersionKindPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VersionKind)(nil)).Elem()
}

func (o VersionKindPtrOutput) ToVersionKindPtrOutput() VersionKindPtrOutput {
	return o
}

func (o VersionKindPtrOutput) ToVersionKindPtrOutputWithContext(ctx context.Context) VersionKindPtrOutput {
	return o
}

func (o VersionKindPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*VersionKind] {
	return pulumix.Output[*VersionKind]{
		OutputState: o.OutputState,
	}
}

func (o VersionKindPtrOutput) Elem() VersionKindOutput {
	return o.ApplyT(func(v *VersionKind) VersionKind {
		if v != nil {
			return *v
		}
		var ret VersionKind
		return ret
	}).(VersionKindOutput)
}

func (o VersionKindPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o VersionKindPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *VersionKind) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// VersionKindInput is an input type that accepts VersionKindArgs and VersionKindOutput values.
// You can construct a concrete instance of `VersionKindInput` via:
//
//	VersionKindArgs{...}
type VersionKindInput interface {
	pulumi.Input

	ToVersionKindOutput() VersionKindOutput
	ToVersionKindOutputWithContext(context.Context) VersionKindOutput
}

var versionKindPtrType = reflect.TypeOf((**VersionKind)(nil)).Elem()

type VersionKindPtrInput interface {
	pulumi.Input

	ToVersionKindPtrOutput() VersionKindPtrOutput
	ToVersionKindPtrOutputWithContext(context.Context) VersionKindPtrOutput
}

type versionKindPtr string

func VersionKindPtr(v string) VersionKindPtrInput {
	return (*versionKindPtr)(&v)
}

func (*versionKindPtr) ElementType() reflect.Type {
	return versionKindPtrType
}

func (in *versionKindPtr) ToVersionKindPtrOutput() VersionKindPtrOutput {
	return pulumi.ToOutput(in).(VersionKindPtrOutput)
}

func (in *versionKindPtr) ToVersionKindPtrOutputWithContext(ctx context.Context) VersionKindPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(VersionKindPtrOutput)
}

func (in *versionKindPtr) ToOutput(ctx context.Context) pulumix.Output[*VersionKind] {
	return pulumix.Output[*VersionKind]{
		OutputState: in.ToVersionKindPtrOutputWithContext(ctx).OutputState,
	}
}

// Provides the state of this Vulnerability assessment.
type VexAssessmentState string

const (
	// No state is specified.
	VexAssessmentStateStateUnspecified = VexAssessmentState("STATE_UNSPECIFIED")
	// This product is known to be affected by this vulnerability.
	VexAssessmentStateAffected = VexAssessmentState("AFFECTED")
	// This product is known to be not affected by this vulnerability.
	VexAssessmentStateNotAffected = VexAssessmentState("NOT_AFFECTED")
	// This product contains a fix for this vulnerability.
	VexAssessmentStateFixed = VexAssessmentState("FIXED")
	// It is not known yet whether these versions are or are not affected by the vulnerability. However, it is still under investigation.
	VexAssessmentStateUnderInvestigation = VexAssessmentState("UNDER_INVESTIGATION")
)

func (VexAssessmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*VexAssessmentState)(nil)).Elem()
}

func (e VexAssessmentState) ToVexAssessmentStateOutput() VexAssessmentStateOutput {
	return pulumi.ToOutput(e).(VexAssessmentStateOutput)
}

func (e VexAssessmentState) ToVexAssessmentStateOutputWithContext(ctx context.Context) VexAssessmentStateOutput {
	return pulumi.ToOutputWithContext(ctx, e).(VexAssessmentStateOutput)
}

func (e VexAssessmentState) ToVexAssessmentStatePtrOutput() VexAssessmentStatePtrOutput {
	return e.ToVexAssessmentStatePtrOutputWithContext(context.Background())
}

func (e VexAssessmentState) ToVexAssessmentStatePtrOutputWithContext(ctx context.Context) VexAssessmentStatePtrOutput {
	return VexAssessmentState(e).ToVexAssessmentStateOutputWithContext(ctx).ToVexAssessmentStatePtrOutputWithContext(ctx)
}

func (e VexAssessmentState) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e VexAssessmentState) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e VexAssessmentState) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e VexAssessmentState) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type VexAssessmentStateOutput struct{ *pulumi.OutputState }

func (VexAssessmentStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VexAssessmentState)(nil)).Elem()
}

func (o VexAssessmentStateOutput) ToVexAssessmentStateOutput() VexAssessmentStateOutput {
	return o
}

func (o VexAssessmentStateOutput) ToVexAssessmentStateOutputWithContext(ctx context.Context) VexAssessmentStateOutput {
	return o
}

func (o VexAssessmentStateOutput) ToVexAssessmentStatePtrOutput() VexAssessmentStatePtrOutput {
	return o.ToVexAssessmentStatePtrOutputWithContext(context.Background())
}

func (o VexAssessmentStateOutput) ToVexAssessmentStatePtrOutputWithContext(ctx context.Context) VexAssessmentStatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VexAssessmentState) *VexAssessmentState {
		return &v
	}).(VexAssessmentStatePtrOutput)
}

func (o VexAssessmentStateOutput) ToOutput(ctx context.Context) pulumix.Output[VexAssessmentState] {
	return pulumix.Output[VexAssessmentState]{
		OutputState: o.OutputState,
	}
}

func (o VexAssessmentStateOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o VexAssessmentStateOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e VexAssessmentState) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o VexAssessmentStateOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o VexAssessmentStateOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e VexAssessmentState) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type VexAssessmentStatePtrOutput struct{ *pulumi.OutputState }

func (VexAssessmentStatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VexAssessmentState)(nil)).Elem()
}

func (o VexAssessmentStatePtrOutput) ToVexAssessmentStatePtrOutput() VexAssessmentStatePtrOutput {
	return o
}

func (o VexAssessmentStatePtrOutput) ToVexAssessmentStatePtrOutputWithContext(ctx context.Context) VexAssessmentStatePtrOutput {
	return o
}

func (o VexAssessmentStatePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*VexAssessmentState] {
	return pulumix.Output[*VexAssessmentState]{
		OutputState: o.OutputState,
	}
}

func (o VexAssessmentStatePtrOutput) Elem() VexAssessmentStateOutput {
	return o.ApplyT(func(v *VexAssessmentState) VexAssessmentState {
		if v != nil {
			return *v
		}
		var ret VexAssessmentState
		return ret
	}).(VexAssessmentStateOutput)
}

func (o VexAssessmentStatePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o VexAssessmentStatePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *VexAssessmentState) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// VexAssessmentStateInput is an input type that accepts VexAssessmentStateArgs and VexAssessmentStateOutput values.
// You can construct a concrete instance of `VexAssessmentStateInput` via:
//
//	VexAssessmentStateArgs{...}
type VexAssessmentStateInput interface {
	pulumi.Input

	ToVexAssessmentStateOutput() VexAssessmentStateOutput
	ToVexAssessmentStateOutputWithContext(context.Context) VexAssessmentStateOutput
}

var vexAssessmentStatePtrType = reflect.TypeOf((**VexAssessmentState)(nil)).Elem()

type VexAssessmentStatePtrInput interface {
	pulumi.Input

	ToVexAssessmentStatePtrOutput() VexAssessmentStatePtrOutput
	ToVexAssessmentStatePtrOutputWithContext(context.Context) VexAssessmentStatePtrOutput
}

type vexAssessmentStatePtr string

func VexAssessmentStatePtr(v string) VexAssessmentStatePtrInput {
	return (*vexAssessmentStatePtr)(&v)
}

func (*vexAssessmentStatePtr) ElementType() reflect.Type {
	return vexAssessmentStatePtrType
}

func (in *vexAssessmentStatePtr) ToVexAssessmentStatePtrOutput() VexAssessmentStatePtrOutput {
	return pulumi.ToOutput(in).(VexAssessmentStatePtrOutput)
}

func (in *vexAssessmentStatePtr) ToVexAssessmentStatePtrOutputWithContext(ctx context.Context) VexAssessmentStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(VexAssessmentStatePtrOutput)
}

func (in *vexAssessmentStatePtr) ToOutput(ctx context.Context) pulumix.Output[*VexAssessmentState] {
	return pulumix.Output[*VexAssessmentState]{
		OutputState: in.ToVexAssessmentStatePtrOutputWithContext(ctx).OutputState,
	}
}

// CVSS version used to populate cvss_score and severity.
type VulnerabilityCvssVersion string

const (
	VulnerabilityCvssVersionCvssVersionUnspecified = VulnerabilityCvssVersion("CVSS_VERSION_UNSPECIFIED")
	VulnerabilityCvssVersionCvssVersion2           = VulnerabilityCvssVersion("CVSS_VERSION_2")
	VulnerabilityCvssVersionCvssVersion3           = VulnerabilityCvssVersion("CVSS_VERSION_3")
)

func (VulnerabilityCvssVersion) ElementType() reflect.Type {
	return reflect.TypeOf((*VulnerabilityCvssVersion)(nil)).Elem()
}

func (e VulnerabilityCvssVersion) ToVulnerabilityCvssVersionOutput() VulnerabilityCvssVersionOutput {
	return pulumi.ToOutput(e).(VulnerabilityCvssVersionOutput)
}

func (e VulnerabilityCvssVersion) ToVulnerabilityCvssVersionOutputWithContext(ctx context.Context) VulnerabilityCvssVersionOutput {
	return pulumi.ToOutputWithContext(ctx, e).(VulnerabilityCvssVersionOutput)
}

func (e VulnerabilityCvssVersion) ToVulnerabilityCvssVersionPtrOutput() VulnerabilityCvssVersionPtrOutput {
	return e.ToVulnerabilityCvssVersionPtrOutputWithContext(context.Background())
}

func (e VulnerabilityCvssVersion) ToVulnerabilityCvssVersionPtrOutputWithContext(ctx context.Context) VulnerabilityCvssVersionPtrOutput {
	return VulnerabilityCvssVersion(e).ToVulnerabilityCvssVersionOutputWithContext(ctx).ToVulnerabilityCvssVersionPtrOutputWithContext(ctx)
}

func (e VulnerabilityCvssVersion) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e VulnerabilityCvssVersion) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e VulnerabilityCvssVersion) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e VulnerabilityCvssVersion) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type VulnerabilityCvssVersionOutput struct{ *pulumi.OutputState }

func (VulnerabilityCvssVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VulnerabilityCvssVersion)(nil)).Elem()
}

func (o VulnerabilityCvssVersionOutput) ToVulnerabilityCvssVersionOutput() VulnerabilityCvssVersionOutput {
	return o
}

func (o VulnerabilityCvssVersionOutput) ToVulnerabilityCvssVersionOutputWithContext(ctx context.Context) VulnerabilityCvssVersionOutput {
	return o
}

func (o VulnerabilityCvssVersionOutput) ToVulnerabilityCvssVersionPtrOutput() VulnerabilityCvssVersionPtrOutput {
	return o.ToVulnerabilityCvssVersionPtrOutputWithContext(context.Background())
}

func (o VulnerabilityCvssVersionOutput) ToVulnerabilityCvssVersionPtrOutputWithContext(ctx context.Context) VulnerabilityCvssVersionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VulnerabilityCvssVersion) *VulnerabilityCvssVersion {
		return &v
	}).(VulnerabilityCvssVersionPtrOutput)
}

func (o VulnerabilityCvssVersionOutput) ToOutput(ctx context.Context) pulumix.Output[VulnerabilityCvssVersion] {
	return pulumix.Output[VulnerabilityCvssVersion]{
		OutputState: o.OutputState,
	}
}

func (o VulnerabilityCvssVersionOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o VulnerabilityCvssVersionOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e VulnerabilityCvssVersion) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o VulnerabilityCvssVersionOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o VulnerabilityCvssVersionOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e VulnerabilityCvssVersion) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type VulnerabilityCvssVersionPtrOutput struct{ *pulumi.OutputState }

func (VulnerabilityCvssVersionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VulnerabilityCvssVersion)(nil)).Elem()
}

func (o VulnerabilityCvssVersionPtrOutput) ToVulnerabilityCvssVersionPtrOutput() VulnerabilityCvssVersionPtrOutput {
	return o
}

func (o VulnerabilityCvssVersionPtrOutput) ToVulnerabilityCvssVersionPtrOutputWithContext(ctx context.Context) VulnerabilityCvssVersionPtrOutput {
	return o
}

func (o VulnerabilityCvssVersionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*VulnerabilityCvssVersion] {
	return pulumix.Output[*VulnerabilityCvssVersion]{
		OutputState: o.OutputState,
	}
}

func (o VulnerabilityCvssVersionPtrOutput) Elem() VulnerabilityCvssVersionOutput {
	return o.ApplyT(func(v *VulnerabilityCvssVersion) VulnerabilityCvssVersion {
		if v != nil {
			return *v
		}
		var ret VulnerabilityCvssVersion
		return ret
	}).(VulnerabilityCvssVersionOutput)
}

func (o VulnerabilityCvssVersionPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o VulnerabilityCvssVersionPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *VulnerabilityCvssVersion) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// VulnerabilityCvssVersionInput is an input type that accepts VulnerabilityCvssVersionArgs and VulnerabilityCvssVersionOutput values.
// You can construct a concrete instance of `VulnerabilityCvssVersionInput` via:
//
//	VulnerabilityCvssVersionArgs{...}
type VulnerabilityCvssVersionInput interface {
	pulumi.Input

	ToVulnerabilityCvssVersionOutput() VulnerabilityCvssVersionOutput
	ToVulnerabilityCvssVersionOutputWithContext(context.Context) VulnerabilityCvssVersionOutput
}

var vulnerabilityCvssVersionPtrType = reflect.TypeOf((**VulnerabilityCvssVersion)(nil)).Elem()

type VulnerabilityCvssVersionPtrInput interface {
	pulumi.Input

	ToVulnerabilityCvssVersionPtrOutput() VulnerabilityCvssVersionPtrOutput
	ToVulnerabilityCvssVersionPtrOutputWithContext(context.Context) VulnerabilityCvssVersionPtrOutput
}

type vulnerabilityCvssVersionPtr string

func VulnerabilityCvssVersionPtr(v string) VulnerabilityCvssVersionPtrInput {
	return (*vulnerabilityCvssVersionPtr)(&v)
}

func (*vulnerabilityCvssVersionPtr) ElementType() reflect.Type {
	return vulnerabilityCvssVersionPtrType
}

func (in *vulnerabilityCvssVersionPtr) ToVulnerabilityCvssVersionPtrOutput() VulnerabilityCvssVersionPtrOutput {
	return pulumi.ToOutput(in).(VulnerabilityCvssVersionPtrOutput)
}

func (in *vulnerabilityCvssVersionPtr) ToVulnerabilityCvssVersionPtrOutputWithContext(ctx context.Context) VulnerabilityCvssVersionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(VulnerabilityCvssVersionPtrOutput)
}

func (in *vulnerabilityCvssVersionPtr) ToOutput(ctx context.Context) pulumix.Output[*VulnerabilityCvssVersion] {
	return pulumix.Output[*VulnerabilityCvssVersion]{
		OutputState: in.ToVulnerabilityCvssVersionPtrOutputWithContext(ctx).OutputState,
	}
}

// Note provider assigned impact of the vulnerability.
type VulnerabilitySeverity string

const (
	// Unknown.
	VulnerabilitySeveritySeverityUnspecified = VulnerabilitySeverity("SEVERITY_UNSPECIFIED")
	// Minimal severity.
	VulnerabilitySeverityMinimal = VulnerabilitySeverity("MINIMAL")
	// Low severity.
	VulnerabilitySeverityLow = VulnerabilitySeverity("LOW")
	// Medium severity.
	VulnerabilitySeverityMedium = VulnerabilitySeverity("MEDIUM")
	// High severity.
	VulnerabilitySeverityHigh = VulnerabilitySeverity("HIGH")
	// Critical severity.
	VulnerabilitySeverityCritical = VulnerabilitySeverity("CRITICAL")
)

func (VulnerabilitySeverity) ElementType() reflect.Type {
	return reflect.TypeOf((*VulnerabilitySeverity)(nil)).Elem()
}

func (e VulnerabilitySeverity) ToVulnerabilitySeverityOutput() VulnerabilitySeverityOutput {
	return pulumi.ToOutput(e).(VulnerabilitySeverityOutput)
}

func (e VulnerabilitySeverity) ToVulnerabilitySeverityOutputWithContext(ctx context.Context) VulnerabilitySeverityOutput {
	return pulumi.ToOutputWithContext(ctx, e).(VulnerabilitySeverityOutput)
}

func (e VulnerabilitySeverity) ToVulnerabilitySeverityPtrOutput() VulnerabilitySeverityPtrOutput {
	return e.ToVulnerabilitySeverityPtrOutputWithContext(context.Background())
}

func (e VulnerabilitySeverity) ToVulnerabilitySeverityPtrOutputWithContext(ctx context.Context) VulnerabilitySeverityPtrOutput {
	return VulnerabilitySeverity(e).ToVulnerabilitySeverityOutputWithContext(ctx).ToVulnerabilitySeverityPtrOutputWithContext(ctx)
}

func (e VulnerabilitySeverity) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e VulnerabilitySeverity) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e VulnerabilitySeverity) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e VulnerabilitySeverity) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type VulnerabilitySeverityOutput struct{ *pulumi.OutputState }

func (VulnerabilitySeverityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VulnerabilitySeverity)(nil)).Elem()
}

func (o VulnerabilitySeverityOutput) ToVulnerabilitySeverityOutput() VulnerabilitySeverityOutput {
	return o
}

func (o VulnerabilitySeverityOutput) ToVulnerabilitySeverityOutputWithContext(ctx context.Context) VulnerabilitySeverityOutput {
	return o
}

func (o VulnerabilitySeverityOutput) ToVulnerabilitySeverityPtrOutput() VulnerabilitySeverityPtrOutput {
	return o.ToVulnerabilitySeverityPtrOutputWithContext(context.Background())
}

func (o VulnerabilitySeverityOutput) ToVulnerabilitySeverityPtrOutputWithContext(ctx context.Context) VulnerabilitySeverityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VulnerabilitySeverity) *VulnerabilitySeverity {
		return &v
	}).(VulnerabilitySeverityPtrOutput)
}

func (o VulnerabilitySeverityOutput) ToOutput(ctx context.Context) pulumix.Output[VulnerabilitySeverity] {
	return pulumix.Output[VulnerabilitySeverity]{
		OutputState: o.OutputState,
	}
}

func (o VulnerabilitySeverityOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o VulnerabilitySeverityOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e VulnerabilitySeverity) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o VulnerabilitySeverityOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o VulnerabilitySeverityOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e VulnerabilitySeverity) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type VulnerabilitySeverityPtrOutput struct{ *pulumi.OutputState }

func (VulnerabilitySeverityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VulnerabilitySeverity)(nil)).Elem()
}

func (o VulnerabilitySeverityPtrOutput) ToVulnerabilitySeverityPtrOutput() VulnerabilitySeverityPtrOutput {
	return o
}

func (o VulnerabilitySeverityPtrOutput) ToVulnerabilitySeverityPtrOutputWithContext(ctx context.Context) VulnerabilitySeverityPtrOutput {
	return o
}

func (o VulnerabilitySeverityPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*VulnerabilitySeverity] {
	return pulumix.Output[*VulnerabilitySeverity]{
		OutputState: o.OutputState,
	}
}

func (o VulnerabilitySeverityPtrOutput) Elem() VulnerabilitySeverityOutput {
	return o.ApplyT(func(v *VulnerabilitySeverity) VulnerabilitySeverity {
		if v != nil {
			return *v
		}
		var ret VulnerabilitySeverity
		return ret
	}).(VulnerabilitySeverityOutput)
}

func (o VulnerabilitySeverityPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o VulnerabilitySeverityPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *VulnerabilitySeverity) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// VulnerabilitySeverityInput is an input type that accepts VulnerabilitySeverityArgs and VulnerabilitySeverityOutput values.
// You can construct a concrete instance of `VulnerabilitySeverityInput` via:
//
//	VulnerabilitySeverityArgs{...}
type VulnerabilitySeverityInput interface {
	pulumi.Input

	ToVulnerabilitySeverityOutput() VulnerabilitySeverityOutput
	ToVulnerabilitySeverityOutputWithContext(context.Context) VulnerabilitySeverityOutput
}

var vulnerabilitySeverityPtrType = reflect.TypeOf((**VulnerabilitySeverity)(nil)).Elem()

type VulnerabilitySeverityPtrInput interface {
	pulumi.Input

	ToVulnerabilitySeverityPtrOutput() VulnerabilitySeverityPtrOutput
	ToVulnerabilitySeverityPtrOutputWithContext(context.Context) VulnerabilitySeverityPtrOutput
}

type vulnerabilitySeverityPtr string

func VulnerabilitySeverityPtr(v string) VulnerabilitySeverityPtrInput {
	return (*vulnerabilitySeverityPtr)(&v)
}

func (*vulnerabilitySeverityPtr) ElementType() reflect.Type {
	return vulnerabilitySeverityPtrType
}

func (in *vulnerabilitySeverityPtr) ToVulnerabilitySeverityPtrOutput() VulnerabilitySeverityPtrOutput {
	return pulumi.ToOutput(in).(VulnerabilitySeverityPtrOutput)
}

func (in *vulnerabilitySeverityPtr) ToVulnerabilitySeverityPtrOutputWithContext(ctx context.Context) VulnerabilitySeverityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(VulnerabilitySeverityPtrOutput)
}

func (in *vulnerabilitySeverityPtr) ToOutput(ctx context.Context) pulumix.Output[*VulnerabilitySeverity] {
	return pulumix.Output[*VulnerabilitySeverity]{
		OutputState: in.ToVulnerabilitySeverityPtrOutputWithContext(ctx).OutputState,
	}
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AliasContextKindInput)(nil)).Elem(), AliasContextKind("KIND_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*AliasContextKindPtrInput)(nil)).Elem(), AliasContextKind("KIND_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*AssessmentStateInput)(nil)).Elem(), AssessmentState("STATE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*AssessmentStatePtrInput)(nil)).Elem(), AssessmentState("STATE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*BuildSignatureKeyTypeInput)(nil)).Elem(), BuildSignatureKeyType("KEY_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*BuildSignatureKeyTypePtrInput)(nil)).Elem(), BuildSignatureKeyType("KEY_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*CVSSAttackComplexityInput)(nil)).Elem(), CVSSAttackComplexity("ATTACK_COMPLEXITY_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*CVSSAttackComplexityPtrInput)(nil)).Elem(), CVSSAttackComplexity("ATTACK_COMPLEXITY_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*CVSSAttackVectorInput)(nil)).Elem(), CVSSAttackVector("ATTACK_VECTOR_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*CVSSAttackVectorPtrInput)(nil)).Elem(), CVSSAttackVector("ATTACK_VECTOR_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*CVSSAuthenticationInput)(nil)).Elem(), CVSSAuthentication("AUTHENTICATION_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*CVSSAuthenticationPtrInput)(nil)).Elem(), CVSSAuthentication("AUTHENTICATION_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*CVSSAvailabilityImpactInput)(nil)).Elem(), CVSSAvailabilityImpact("IMPACT_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*CVSSAvailabilityImpactPtrInput)(nil)).Elem(), CVSSAvailabilityImpact("IMPACT_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*CVSSConfidentialityImpactInput)(nil)).Elem(), CVSSConfidentialityImpact("IMPACT_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*CVSSConfidentialityImpactPtrInput)(nil)).Elem(), CVSSConfidentialityImpact("IMPACT_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*CVSSIntegrityImpactInput)(nil)).Elem(), CVSSIntegrityImpact("IMPACT_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*CVSSIntegrityImpactPtrInput)(nil)).Elem(), CVSSIntegrityImpact("IMPACT_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*CVSSPrivilegesRequiredInput)(nil)).Elem(), CVSSPrivilegesRequired("PRIVILEGES_REQUIRED_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*CVSSPrivilegesRequiredPtrInput)(nil)).Elem(), CVSSPrivilegesRequired("PRIVILEGES_REQUIRED_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*CVSSScopeInput)(nil)).Elem(), CVSSScope("SCOPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*CVSSScopePtrInput)(nil)).Elem(), CVSSScope("SCOPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*CVSSUserInteractionInput)(nil)).Elem(), CVSSUserInteraction("USER_INTERACTION_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*CVSSUserInteractionPtrInput)(nil)).Elem(), CVSSUserInteraction("USER_INTERACTION_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*CVSSv3AttackComplexityInput)(nil)).Elem(), CVSSv3AttackComplexity("ATTACK_COMPLEXITY_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*CVSSv3AttackComplexityPtrInput)(nil)).Elem(), CVSSv3AttackComplexity("ATTACK_COMPLEXITY_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*CVSSv3AttackVectorInput)(nil)).Elem(), CVSSv3AttackVector("ATTACK_VECTOR_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*CVSSv3AttackVectorPtrInput)(nil)).Elem(), CVSSv3AttackVector("ATTACK_VECTOR_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*CVSSv3AvailabilityImpactInput)(nil)).Elem(), CVSSv3AvailabilityImpact("IMPACT_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*CVSSv3AvailabilityImpactPtrInput)(nil)).Elem(), CVSSv3AvailabilityImpact("IMPACT_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*CVSSv3ConfidentialityImpactInput)(nil)).Elem(), CVSSv3ConfidentialityImpact("IMPACT_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*CVSSv3ConfidentialityImpactPtrInput)(nil)).Elem(), CVSSv3ConfidentialityImpact("IMPACT_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*CVSSv3IntegrityImpactInput)(nil)).Elem(), CVSSv3IntegrityImpact("IMPACT_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*CVSSv3IntegrityImpactPtrInput)(nil)).Elem(), CVSSv3IntegrityImpact("IMPACT_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*CVSSv3PrivilegesRequiredInput)(nil)).Elem(), CVSSv3PrivilegesRequired("PRIVILEGES_REQUIRED_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*CVSSv3PrivilegesRequiredPtrInput)(nil)).Elem(), CVSSv3PrivilegesRequired("PRIVILEGES_REQUIRED_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*CVSSv3ScopeInput)(nil)).Elem(), CVSSv3Scope("SCOPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*CVSSv3ScopePtrInput)(nil)).Elem(), CVSSv3Scope("SCOPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*CVSSv3UserInteractionInput)(nil)).Elem(), CVSSv3UserInteraction("USER_INTERACTION_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*CVSSv3UserInteractionPtrInput)(nil)).Elem(), CVSSv3UserInteraction("USER_INTERACTION_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentPlatformInput)(nil)).Elem(), DeploymentPlatform("PLATFORM_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentPlatformPtrInput)(nil)).Elem(), DeploymentPlatform("PLATFORM_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*DiscoveredAnalysisStatusInput)(nil)).Elem(), DiscoveredAnalysisStatus("ANALYSIS_STATUS_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*DiscoveredAnalysisStatusPtrInput)(nil)).Elem(), DiscoveredAnalysisStatus("ANALYSIS_STATUS_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*DiscoveredContinuousAnalysisInput)(nil)).Elem(), DiscoveredContinuousAnalysis("CONTINUOUS_ANALYSIS_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*DiscoveredContinuousAnalysisPtrInput)(nil)).Elem(), DiscoveredContinuousAnalysis("CONTINUOUS_ANALYSIS_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*DiscoveryAnalysisKindInput)(nil)).Elem(), DiscoveryAnalysisKind("NOTE_KIND_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*DiscoveryAnalysisKindPtrInput)(nil)).Elem(), DiscoveryAnalysisKind("NOTE_KIND_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*DistributionArchitectureInput)(nil)).Elem(), DistributionArchitecture("ARCHITECTURE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*DistributionArchitecturePtrInput)(nil)).Elem(), DistributionArchitecture("ARCHITECTURE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalRefCategoryInput)(nil)).Elem(), ExternalRefCategory("CATEGORY_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalRefCategoryPtrInput)(nil)).Elem(), ExternalRefCategory("CATEGORY_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*FileNoteFileTypeInput)(nil)).Elem(), FileNoteFileType("FILE_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*FileNoteFileTypePtrInput)(nil)).Elem(), FileNoteFileType("FILE_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*GenericSignedAttestationContentTypeInput)(nil)).Elem(), GenericSignedAttestationContentType("CONTENT_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*GenericSignedAttestationContentTypePtrInput)(nil)).Elem(), GenericSignedAttestationContentType("CONTENT_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityInput)(nil)).Elem(), GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity("SEVERITY_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityPtrInput)(nil)).Elem(), GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity("SEVERITY_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*HashTypeInput)(nil)).Elem(), HashType("HASH_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*HashTypePtrInput)(nil)).Elem(), HashType("HASH_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*JustificationJustificationTypeInput)(nil)).Elem(), JustificationJustificationType("JUSTIFICATION_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*JustificationJustificationTypePtrInput)(nil)).Elem(), JustificationJustificationType("JUSTIFICATION_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*LayerDirectiveInput)(nil)).Elem(), LayerDirective("DIRECTIVE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*LayerDirectivePtrInput)(nil)).Elem(), LayerDirective("DIRECTIVE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*PackageArchitectureInput)(nil)).Elem(), PackageArchitecture("ARCHITECTURE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*PackageArchitecturePtrInput)(nil)).Elem(), PackageArchitecture("ARCHITECTURE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*PgpSignedAttestationContentTypeInput)(nil)).Elem(), PgpSignedAttestationContentType("CONTENT_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*PgpSignedAttestationContentTypePtrInput)(nil)).Elem(), PgpSignedAttestationContentType("CONTENT_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*RelationshipNoteTypeInput)(nil)).Elem(), RelationshipNoteType("RELATIONSHIP_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*RelationshipNoteTypePtrInput)(nil)).Elem(), RelationshipNoteType("RELATIONSHIP_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*RemediationRemediationTypeInput)(nil)).Elem(), RemediationRemediationType("REMEDIATION_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*RemediationRemediationTypePtrInput)(nil)).Elem(), RemediationRemediationType("REMEDIATION_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*SBOMStatusSbomStateInput)(nil)).Elem(), SBOMStatusSbomState("SBOM_STATE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*SBOMStatusSbomStatePtrInput)(nil)).Elem(), SBOMStatusSbomState("SBOM_STATE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*VersionKindInput)(nil)).Elem(), VersionKind("VERSION_KIND_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*VersionKindPtrInput)(nil)).Elem(), VersionKind("VERSION_KIND_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*VexAssessmentStateInput)(nil)).Elem(), VexAssessmentState("STATE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*VexAssessmentStatePtrInput)(nil)).Elem(), VexAssessmentState("STATE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*VulnerabilityCvssVersionInput)(nil)).Elem(), VulnerabilityCvssVersion("CVSS_VERSION_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*VulnerabilityCvssVersionPtrInput)(nil)).Elem(), VulnerabilityCvssVersion("CVSS_VERSION_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*VulnerabilitySeverityInput)(nil)).Elem(), VulnerabilitySeverity("SEVERITY_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*VulnerabilitySeverityPtrInput)(nil)).Elem(), VulnerabilitySeverity("SEVERITY_UNSPECIFIED"))
	pulumi.RegisterOutputType(AliasContextKindOutput{})
	pulumi.RegisterOutputType(AliasContextKindPtrOutput{})
	pulumi.RegisterOutputType(AssessmentStateOutput{})
	pulumi.RegisterOutputType(AssessmentStatePtrOutput{})
	pulumi.RegisterOutputType(BuildSignatureKeyTypeOutput{})
	pulumi.RegisterOutputType(BuildSignatureKeyTypePtrOutput{})
	pulumi.RegisterOutputType(CVSSAttackComplexityOutput{})
	pulumi.RegisterOutputType(CVSSAttackComplexityPtrOutput{})
	pulumi.RegisterOutputType(CVSSAttackVectorOutput{})
	pulumi.RegisterOutputType(CVSSAttackVectorPtrOutput{})
	pulumi.RegisterOutputType(CVSSAuthenticationOutput{})
	pulumi.RegisterOutputType(CVSSAuthenticationPtrOutput{})
	pulumi.RegisterOutputType(CVSSAvailabilityImpactOutput{})
	pulumi.RegisterOutputType(CVSSAvailabilityImpactPtrOutput{})
	pulumi.RegisterOutputType(CVSSConfidentialityImpactOutput{})
	pulumi.RegisterOutputType(CVSSConfidentialityImpactPtrOutput{})
	pulumi.RegisterOutputType(CVSSIntegrityImpactOutput{})
	pulumi.RegisterOutputType(CVSSIntegrityImpactPtrOutput{})
	pulumi.RegisterOutputType(CVSSPrivilegesRequiredOutput{})
	pulumi.RegisterOutputType(CVSSPrivilegesRequiredPtrOutput{})
	pulumi.RegisterOutputType(CVSSScopeOutput{})
	pulumi.RegisterOutputType(CVSSScopePtrOutput{})
	pulumi.RegisterOutputType(CVSSUserInteractionOutput{})
	pulumi.RegisterOutputType(CVSSUserInteractionPtrOutput{})
	pulumi.RegisterOutputType(CVSSv3AttackComplexityOutput{})
	pulumi.RegisterOutputType(CVSSv3AttackComplexityPtrOutput{})
	pulumi.RegisterOutputType(CVSSv3AttackVectorOutput{})
	pulumi.RegisterOutputType(CVSSv3AttackVectorPtrOutput{})
	pulumi.RegisterOutputType(CVSSv3AvailabilityImpactOutput{})
	pulumi.RegisterOutputType(CVSSv3AvailabilityImpactPtrOutput{})
	pulumi.RegisterOutputType(CVSSv3ConfidentialityImpactOutput{})
	pulumi.RegisterOutputType(CVSSv3ConfidentialityImpactPtrOutput{})
	pulumi.RegisterOutputType(CVSSv3IntegrityImpactOutput{})
	pulumi.RegisterOutputType(CVSSv3IntegrityImpactPtrOutput{})
	pulumi.RegisterOutputType(CVSSv3PrivilegesRequiredOutput{})
	pulumi.RegisterOutputType(CVSSv3PrivilegesRequiredPtrOutput{})
	pulumi.RegisterOutputType(CVSSv3ScopeOutput{})
	pulumi.RegisterOutputType(CVSSv3ScopePtrOutput{})
	pulumi.RegisterOutputType(CVSSv3UserInteractionOutput{})
	pulumi.RegisterOutputType(CVSSv3UserInteractionPtrOutput{})
	pulumi.RegisterOutputType(DeploymentPlatformOutput{})
	pulumi.RegisterOutputType(DeploymentPlatformPtrOutput{})
	pulumi.RegisterOutputType(DiscoveredAnalysisStatusOutput{})
	pulumi.RegisterOutputType(DiscoveredAnalysisStatusPtrOutput{})
	pulumi.RegisterOutputType(DiscoveredContinuousAnalysisOutput{})
	pulumi.RegisterOutputType(DiscoveredContinuousAnalysisPtrOutput{})
	pulumi.RegisterOutputType(DiscoveryAnalysisKindOutput{})
	pulumi.RegisterOutputType(DiscoveryAnalysisKindPtrOutput{})
	pulumi.RegisterOutputType(DistributionArchitectureOutput{})
	pulumi.RegisterOutputType(DistributionArchitecturePtrOutput{})
	pulumi.RegisterOutputType(ExternalRefCategoryOutput{})
	pulumi.RegisterOutputType(ExternalRefCategoryPtrOutput{})
	pulumi.RegisterOutputType(FileNoteFileTypeOutput{})
	pulumi.RegisterOutputType(FileNoteFileTypePtrOutput{})
	pulumi.RegisterOutputType(GenericSignedAttestationContentTypeOutput{})
	pulumi.RegisterOutputType(GenericSignedAttestationContentTypePtrOutput{})
	pulumi.RegisterOutputType(GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityOutput{})
	pulumi.RegisterOutputType(GrafeasV1beta1VulnerabilityDetailsEffectiveSeverityPtrOutput{})
	pulumi.RegisterOutputType(HashTypeOutput{})
	pulumi.RegisterOutputType(HashTypePtrOutput{})
	pulumi.RegisterOutputType(JustificationJustificationTypeOutput{})
	pulumi.RegisterOutputType(JustificationJustificationTypePtrOutput{})
	pulumi.RegisterOutputType(LayerDirectiveOutput{})
	pulumi.RegisterOutputType(LayerDirectivePtrOutput{})
	pulumi.RegisterOutputType(PackageArchitectureOutput{})
	pulumi.RegisterOutputType(PackageArchitecturePtrOutput{})
	pulumi.RegisterOutputType(PgpSignedAttestationContentTypeOutput{})
	pulumi.RegisterOutputType(PgpSignedAttestationContentTypePtrOutput{})
	pulumi.RegisterOutputType(RelationshipNoteTypeOutput{})
	pulumi.RegisterOutputType(RelationshipNoteTypePtrOutput{})
	pulumi.RegisterOutputType(RemediationRemediationTypeOutput{})
	pulumi.RegisterOutputType(RemediationRemediationTypePtrOutput{})
	pulumi.RegisterOutputType(SBOMStatusSbomStateOutput{})
	pulumi.RegisterOutputType(SBOMStatusSbomStatePtrOutput{})
	pulumi.RegisterOutputType(VersionKindOutput{})
	pulumi.RegisterOutputType(VersionKindPtrOutput{})
	pulumi.RegisterOutputType(VexAssessmentStateOutput{})
	pulumi.RegisterOutputType(VexAssessmentStatePtrOutput{})
	pulumi.RegisterOutputType(VulnerabilityCvssVersionOutput{})
	pulumi.RegisterOutputType(VulnerabilityCvssVersionPtrOutput{})
	pulumi.RegisterOutputType(VulnerabilitySeverityOutput{})
	pulumi.RegisterOutputType(VulnerabilitySeverityPtrOutput{})
}
