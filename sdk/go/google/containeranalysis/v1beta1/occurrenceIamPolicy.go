// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Sets the access control policy on the specified note or occurrence. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or an occurrence, respectively. The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences.
type OccurrenceIamPolicy struct {
	pulumi.CustomResourceState
}

// NewOccurrenceIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewOccurrenceIamPolicy(ctx *pulumi.Context,
	name string, args *OccurrenceIamPolicyArgs, opts ...pulumi.ResourceOption) (*OccurrenceIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OccurrencesId == nil {
		return nil, errors.New("invalid value for required argument 'OccurrencesId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	var resource OccurrenceIamPolicy
	err := ctx.RegisterResource("google-cloud:containeranalysis/v1beta1:OccurrenceIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOccurrenceIamPolicy gets an existing OccurrenceIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOccurrenceIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OccurrenceIamPolicyState, opts ...pulumi.ResourceOption) (*OccurrenceIamPolicy, error) {
	var resource OccurrenceIamPolicy
	err := ctx.ReadResource("google-cloud:containeranalysis/v1beta1:OccurrenceIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OccurrenceIamPolicy resources.
type occurrenceIamPolicyState struct {
}

type OccurrenceIamPolicyState struct {
}

func (OccurrenceIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*occurrenceIamPolicyState)(nil)).Elem()
}

type occurrenceIamPolicyArgs struct {
	OccurrencesId string `pulumi:"occurrencesId"`
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy     *Policy `pulumi:"policy"`
	ProjectsId string  `pulumi:"projectsId"`
}

// The set of arguments for constructing a OccurrenceIamPolicy resource.
type OccurrenceIamPolicyArgs struct {
	OccurrencesId pulumi.StringInput
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy     PolicyPtrInput
	ProjectsId pulumi.StringInput
}

func (OccurrenceIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*occurrenceIamPolicyArgs)(nil)).Elem()
}

type OccurrenceIamPolicyInput interface {
	pulumi.Input

	ToOccurrenceIamPolicyOutput() OccurrenceIamPolicyOutput
	ToOccurrenceIamPolicyOutputWithContext(ctx context.Context) OccurrenceIamPolicyOutput
}

func (*OccurrenceIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*OccurrenceIamPolicy)(nil))
}

func (i *OccurrenceIamPolicy) ToOccurrenceIamPolicyOutput() OccurrenceIamPolicyOutput {
	return i.ToOccurrenceIamPolicyOutputWithContext(context.Background())
}

func (i *OccurrenceIamPolicy) ToOccurrenceIamPolicyOutputWithContext(ctx context.Context) OccurrenceIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OccurrenceIamPolicyOutput)
}

type OccurrenceIamPolicyOutput struct {
	*pulumi.OutputState
}

func (OccurrenceIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OccurrenceIamPolicy)(nil))
}

func (o OccurrenceIamPolicyOutput) ToOccurrenceIamPolicyOutput() OccurrenceIamPolicyOutput {
	return o
}

func (o OccurrenceIamPolicyOutput) ToOccurrenceIamPolicyOutputWithContext(ctx context.Context) OccurrenceIamPolicyOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(OccurrenceIamPolicyOutput{})
}
