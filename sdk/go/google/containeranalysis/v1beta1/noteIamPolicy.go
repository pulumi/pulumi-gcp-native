// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Sets the access control policy on the specified note or occurrence. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or an occurrence, respectively. The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences.
type NoteIamPolicy struct {
	pulumi.CustomResourceState
}

// NewNoteIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewNoteIamPolicy(ctx *pulumi.Context,
	name string, args *NoteIamPolicyArgs, opts ...pulumi.ResourceOption) (*NoteIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NotesId == nil {
		return nil, errors.New("invalid value for required argument 'NotesId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	var resource NoteIamPolicy
	err := ctx.RegisterResource("google-cloud:containeranalysis/v1beta1:NoteIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNoteIamPolicy gets an existing NoteIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNoteIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NoteIamPolicyState, opts ...pulumi.ResourceOption) (*NoteIamPolicy, error) {
	var resource NoteIamPolicy
	err := ctx.ReadResource("google-cloud:containeranalysis/v1beta1:NoteIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NoteIamPolicy resources.
type noteIamPolicyState struct {
}

type NoteIamPolicyState struct {
}

func (NoteIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*noteIamPolicyState)(nil)).Elem()
}

type noteIamPolicyArgs struct {
	NotesId string `pulumi:"notesId"`
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy     *Policy `pulumi:"policy"`
	ProjectsId string  `pulumi:"projectsId"`
}

// The set of arguments for constructing a NoteIamPolicy resource.
type NoteIamPolicyArgs struct {
	NotesId pulumi.StringInput
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy     PolicyPtrInput
	ProjectsId pulumi.StringInput
}

func (NoteIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*noteIamPolicyArgs)(nil)).Elem()
}

type NoteIamPolicyInput interface {
	pulumi.Input

	ToNoteIamPolicyOutput() NoteIamPolicyOutput
	ToNoteIamPolicyOutputWithContext(ctx context.Context) NoteIamPolicyOutput
}

func (*NoteIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*NoteIamPolicy)(nil))
}

func (i *NoteIamPolicy) ToNoteIamPolicyOutput() NoteIamPolicyOutput {
	return i.ToNoteIamPolicyOutputWithContext(context.Background())
}

func (i *NoteIamPolicy) ToNoteIamPolicyOutputWithContext(ctx context.Context) NoteIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NoteIamPolicyOutput)
}

type NoteIamPolicyOutput struct {
	*pulumi.OutputState
}

func (NoteIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NoteIamPolicy)(nil))
}

func (o NoteIamPolicyOutput) ToNoteIamPolicyOutput() NoteIamPolicyOutput {
	return o
}

func (o NoteIamPolicyOutput) ToNoteIamPolicyOutputWithContext(ctx context.Context) NoteIamPolicyOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(NoteIamPolicyOutput{})
}
