// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
type ApiConfigIamPolicy struct {
	pulumi.CustomResourceState
}

// NewApiConfigIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewApiConfigIamPolicy(ctx *pulumi.Context,
	name string, args *ApiConfigIamPolicyArgs, opts ...pulumi.ResourceOption) (*ApiConfigIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApisId == nil {
		return nil, errors.New("invalid value for required argument 'ApisId'")
	}
	if args.ConfigsId == nil {
		return nil, errors.New("invalid value for required argument 'ConfigsId'")
	}
	if args.LocationsId == nil {
		return nil, errors.New("invalid value for required argument 'LocationsId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	var resource ApiConfigIamPolicy
	err := ctx.RegisterResource("google-cloud:apigateway/v1beta:ApiConfigIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApiConfigIamPolicy gets an existing ApiConfigIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApiConfigIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApiConfigIamPolicyState, opts ...pulumi.ResourceOption) (*ApiConfigIamPolicy, error) {
	var resource ApiConfigIamPolicy
	err := ctx.ReadResource("google-cloud:apigateway/v1beta:ApiConfigIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApiConfigIamPolicy resources.
type apiConfigIamPolicyState struct {
}

type ApiConfigIamPolicyState struct {
}

func (ApiConfigIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*apiConfigIamPolicyState)(nil)).Elem()
}

type apiConfigIamPolicyArgs struct {
	ApisId      string `pulumi:"apisId"`
	ConfigsId   string `pulumi:"configsId"`
	LocationsId string `pulumi:"locationsId"`
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy     *ApigatewayPolicy `pulumi:"policy"`
	ProjectsId string            `pulumi:"projectsId"`
	// OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`
	UpdateMask *string `pulumi:"updateMask"`
}

// The set of arguments for constructing a ApiConfigIamPolicy resource.
type ApiConfigIamPolicyArgs struct {
	ApisId      pulumi.StringInput
	ConfigsId   pulumi.StringInput
	LocationsId pulumi.StringInput
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy     ApigatewayPolicyPtrInput
	ProjectsId pulumi.StringInput
	// OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`
	UpdateMask pulumi.StringPtrInput
}

func (ApiConfigIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*apiConfigIamPolicyArgs)(nil)).Elem()
}

type ApiConfigIamPolicyInput interface {
	pulumi.Input

	ToApiConfigIamPolicyOutput() ApiConfigIamPolicyOutput
	ToApiConfigIamPolicyOutputWithContext(ctx context.Context) ApiConfigIamPolicyOutput
}

func (*ApiConfigIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiConfigIamPolicy)(nil))
}

func (i *ApiConfigIamPolicy) ToApiConfigIamPolicyOutput() ApiConfigIamPolicyOutput {
	return i.ToApiConfigIamPolicyOutputWithContext(context.Background())
}

func (i *ApiConfigIamPolicy) ToApiConfigIamPolicyOutputWithContext(ctx context.Context) ApiConfigIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiConfigIamPolicyOutput)
}

type ApiConfigIamPolicyOutput struct {
	*pulumi.OutputState
}

func (ApiConfigIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiConfigIamPolicy)(nil))
}

func (o ApiConfigIamPolicyOutput) ToApiConfigIamPolicyOutput() ApiConfigIamPolicyOutput {
	return o
}

func (o ApiConfigIamPolicyOutput) ToApiConfigIamPolicyOutputWithContext(ctx context.Context) ApiConfigIamPolicyOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ApiConfigIamPolicyOutput{})
}
