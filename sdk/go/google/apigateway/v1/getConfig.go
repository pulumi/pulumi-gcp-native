// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Gets details of a single ApiConfig.
func LookupConfig(ctx *pulumi.Context, args *LookupConfigArgs, opts ...pulumi.InvokeOption) (*LookupConfigResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupConfigResult
	err := ctx.Invoke("google-native:apigateway/v1:getConfig", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupConfigArgs struct {
	ApiId    string  `pulumi:"apiId"`
	ConfigId string  `pulumi:"configId"`
	Location string  `pulumi:"location"`
	Project  *string `pulumi:"project"`
	View     *string `pulumi:"view"`
}

type LookupConfigResult struct {
	// Created time.
	CreateTime string `pulumi:"createTime"`
	// Optional. Display name.
	DisplayName string `pulumi:"displayName"`
	// Immutable. The Google Cloud IAM Service Account that Gateways serving this config should use to authenticate to other services. This may either be the Service Account's email (`{ACCOUNT_ID}@{PROJECT}.iam.gserviceaccount.com`) or its full resource name (`projects/{PROJECT}/accounts/{UNIQUE_ID}`). This is most often used when the service is a GCP resource such as a Cloud Run Service or an IAP-secured service.
	GatewayServiceAccount string `pulumi:"gatewayServiceAccount"`
	// Optional. gRPC service definition files. If specified, openapi_documents must not be included.
	GrpcServices []ApigatewayApiConfigGrpcServiceDefinitionResponse `pulumi:"grpcServices"`
	// Optional. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources
	Labels map[string]string `pulumi:"labels"`
	// Optional. Service Configuration files. At least one must be included when using gRPC service definitions. See https://cloud.google.com/endpoints/docs/grpc/grpc-service-config#service_configuration_overview for the expected file contents. If multiple files are specified, the files are merged with the following rules: * All singular scalar fields are merged using "last one wins" semantics in the order of the files uploaded. * Repeated fields are concatenated. * Singular embedded messages are merged using these rules for nested fields.
	ManagedServiceConfigs []ApigatewayApiConfigFileResponse `pulumi:"managedServiceConfigs"`
	// Resource name of the API Config. Format: projects/{project}/locations/global/apis/{api}/configs/{api_config}
	Name string `pulumi:"name"`
	// Optional. OpenAPI specification documents. If specified, grpc_services and managed_service_configs must not be included.
	OpenapiDocuments []ApigatewayApiConfigOpenApiDocumentResponse `pulumi:"openapiDocuments"`
	// The ID of the associated Service Config ( https://cloud.google.com/service-infrastructure/docs/glossary#config).
	ServiceConfigId string `pulumi:"serviceConfigId"`
	// State of the API Config.
	State string `pulumi:"state"`
	// Updated time.
	UpdateTime string `pulumi:"updateTime"`
}

func LookupConfigOutput(ctx *pulumi.Context, args LookupConfigOutputArgs, opts ...pulumi.InvokeOption) LookupConfigResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupConfigResult, error) {
			args := v.(LookupConfigArgs)
			r, err := LookupConfig(ctx, &args, opts...)
			var s LookupConfigResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupConfigResultOutput)
}

type LookupConfigOutputArgs struct {
	ApiId    pulumi.StringInput    `pulumi:"apiId"`
	ConfigId pulumi.StringInput    `pulumi:"configId"`
	Location pulumi.StringInput    `pulumi:"location"`
	Project  pulumi.StringPtrInput `pulumi:"project"`
	View     pulumi.StringPtrInput `pulumi:"view"`
}

func (LookupConfigOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConfigArgs)(nil)).Elem()
}

type LookupConfigResultOutput struct{ *pulumi.OutputState }

func (LookupConfigResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConfigResult)(nil)).Elem()
}

func (o LookupConfigResultOutput) ToLookupConfigResultOutput() LookupConfigResultOutput {
	return o
}

func (o LookupConfigResultOutput) ToLookupConfigResultOutputWithContext(ctx context.Context) LookupConfigResultOutput {
	return o
}

func (o LookupConfigResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupConfigResult] {
	return pulumix.Output[LookupConfigResult]{
		OutputState: o.OutputState,
	}
}

// Created time.
func (o LookupConfigResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConfigResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Optional. Display name.
func (o LookupConfigResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConfigResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Immutable. The Google Cloud IAM Service Account that Gateways serving this config should use to authenticate to other services. This may either be the Service Account's email (`{ACCOUNT_ID}@{PROJECT}.iam.gserviceaccount.com`) or its full resource name (`projects/{PROJECT}/accounts/{UNIQUE_ID}`). This is most often used when the service is a GCP resource such as a Cloud Run Service or an IAP-secured service.
func (o LookupConfigResultOutput) GatewayServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConfigResult) string { return v.GatewayServiceAccount }).(pulumi.StringOutput)
}

// Optional. gRPC service definition files. If specified, openapi_documents must not be included.
func (o LookupConfigResultOutput) GrpcServices() ApigatewayApiConfigGrpcServiceDefinitionResponseArrayOutput {
	return o.ApplyT(func(v LookupConfigResult) []ApigatewayApiConfigGrpcServiceDefinitionResponse { return v.GrpcServices }).(ApigatewayApiConfigGrpcServiceDefinitionResponseArrayOutput)
}

// Optional. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources
func (o LookupConfigResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupConfigResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Optional. Service Configuration files. At least one must be included when using gRPC service definitions. See https://cloud.google.com/endpoints/docs/grpc/grpc-service-config#service_configuration_overview for the expected file contents. If multiple files are specified, the files are merged with the following rules: * All singular scalar fields are merged using "last one wins" semantics in the order of the files uploaded. * Repeated fields are concatenated. * Singular embedded messages are merged using these rules for nested fields.
func (o LookupConfigResultOutput) ManagedServiceConfigs() ApigatewayApiConfigFileResponseArrayOutput {
	return o.ApplyT(func(v LookupConfigResult) []ApigatewayApiConfigFileResponse { return v.ManagedServiceConfigs }).(ApigatewayApiConfigFileResponseArrayOutput)
}

// Resource name of the API Config. Format: projects/{project}/locations/global/apis/{api}/configs/{api_config}
func (o LookupConfigResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConfigResult) string { return v.Name }).(pulumi.StringOutput)
}

// Optional. OpenAPI specification documents. If specified, grpc_services and managed_service_configs must not be included.
func (o LookupConfigResultOutput) OpenapiDocuments() ApigatewayApiConfigOpenApiDocumentResponseArrayOutput {
	return o.ApplyT(func(v LookupConfigResult) []ApigatewayApiConfigOpenApiDocumentResponse { return v.OpenapiDocuments }).(ApigatewayApiConfigOpenApiDocumentResponseArrayOutput)
}

// The ID of the associated Service Config ( https://cloud.google.com/service-infrastructure/docs/glossary#config).
func (o LookupConfigResultOutput) ServiceConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConfigResult) string { return v.ServiceConfigId }).(pulumi.StringOutput)
}

// State of the API Config.
func (o LookupConfigResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConfigResult) string { return v.State }).(pulumi.StringOutput)
}

// Updated time.
func (o LookupConfigResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConfigResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupConfigResultOutput{})
}
