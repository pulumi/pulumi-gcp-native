// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new ApiConfig in a given project and location.
type ApiConfig struct {
	pulumi.CustomResourceState

	// Created time.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Optional. Display name.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Immutable. The Google Cloud IAM Service Account that Gateways serving this config should use to authenticate to other services. This may either be the Service Account's email (`{ACCOUNT_ID}@{PROJECT}.iam.gserviceaccount.com`) or its full resource name (`projects/{PROJECT}/accounts/{UNIQUE_ID}`). This is most often used when the service is a GCP resource such as a Cloud Run Service or an IAP-secured service.
	GatewayServiceAccount pulumi.StringOutput `pulumi:"gatewayServiceAccount"`
	// Optional. gRPC service definition files. If specified, openapi_documents must not be included.
	GrpcServices ApigatewayApiConfigGrpcServiceDefinitionResponseArrayOutput `pulumi:"grpcServices"`
	// Optional. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Optional. Service Configuration files. At least one must be included when using gRPC service definitions. See https://cloud.google.com/endpoints/docs/grpc/grpc-service-config#service_configuration_overview for the expected file contents. If multiple files are specified, the files are merged with the following rules: * All singular scalar fields are merged using "last one wins" semantics in the order of the files uploaded. * Repeated fields are concatenated. * Singular embedded messages are merged using these rules for nested fields.
	ManagedServiceConfigs ApigatewayApiConfigFileResponseArrayOutput `pulumi:"managedServiceConfigs"`
	// Resource name of the API Config. Format: projects/{project}/locations/global/apis/{api}/configs/{api_config}
	Name pulumi.StringOutput `pulumi:"name"`
	// Optional. OpenAPI specification documents. If specified, grpc_services and managed_service_configs must not be included.
	OpenapiDocuments ApigatewayApiConfigOpenApiDocumentResponseArrayOutput `pulumi:"openapiDocuments"`
	// The ID of the associated Service Config ( https://cloud.google.com/service-infrastructure/docs/glossary#config).
	ServiceConfigId pulumi.StringOutput `pulumi:"serviceConfigId"`
	// State of the API Config.
	State pulumi.StringOutput `pulumi:"state"`
	// Updated time.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewApiConfig registers a new resource with the given unique name, arguments, and options.
func NewApiConfig(ctx *pulumi.Context,
	name string, args *ApiConfigArgs, opts ...pulumi.ResourceOption) (*ApiConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiConfigId == nil {
		return nil, errors.New("invalid value for required argument 'ApiConfigId'")
	}
	if args.ApisId == nil {
		return nil, errors.New("invalid value for required argument 'ApisId'")
	}
	if args.ConfigsId == nil {
		return nil, errors.New("invalid value for required argument 'ConfigsId'")
	}
	if args.LocationsId == nil {
		return nil, errors.New("invalid value for required argument 'LocationsId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	var resource ApiConfig
	err := ctx.RegisterResource("google-native:apigateway/v1:ApiConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApiConfig gets an existing ApiConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApiConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApiConfigState, opts ...pulumi.ResourceOption) (*ApiConfig, error) {
	var resource ApiConfig
	err := ctx.ReadResource("google-native:apigateway/v1:ApiConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApiConfig resources.
type apiConfigState struct {
	// Created time.
	CreateTime *string `pulumi:"createTime"`
	// Optional. Display name.
	DisplayName *string `pulumi:"displayName"`
	// Immutable. The Google Cloud IAM Service Account that Gateways serving this config should use to authenticate to other services. This may either be the Service Account's email (`{ACCOUNT_ID}@{PROJECT}.iam.gserviceaccount.com`) or its full resource name (`projects/{PROJECT}/accounts/{UNIQUE_ID}`). This is most often used when the service is a GCP resource such as a Cloud Run Service or an IAP-secured service.
	GatewayServiceAccount *string `pulumi:"gatewayServiceAccount"`
	// Optional. gRPC service definition files. If specified, openapi_documents must not be included.
	GrpcServices []ApigatewayApiConfigGrpcServiceDefinitionResponse `pulumi:"grpcServices"`
	// Optional. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources
	Labels map[string]string `pulumi:"labels"`
	// Optional. Service Configuration files. At least one must be included when using gRPC service definitions. See https://cloud.google.com/endpoints/docs/grpc/grpc-service-config#service_configuration_overview for the expected file contents. If multiple files are specified, the files are merged with the following rules: * All singular scalar fields are merged using "last one wins" semantics in the order of the files uploaded. * Repeated fields are concatenated. * Singular embedded messages are merged using these rules for nested fields.
	ManagedServiceConfigs []ApigatewayApiConfigFileResponse `pulumi:"managedServiceConfigs"`
	// Resource name of the API Config. Format: projects/{project}/locations/global/apis/{api}/configs/{api_config}
	Name *string `pulumi:"name"`
	// Optional. OpenAPI specification documents. If specified, grpc_services and managed_service_configs must not be included.
	OpenapiDocuments []ApigatewayApiConfigOpenApiDocumentResponse `pulumi:"openapiDocuments"`
	// The ID of the associated Service Config ( https://cloud.google.com/service-infrastructure/docs/glossary#config).
	ServiceConfigId *string `pulumi:"serviceConfigId"`
	// State of the API Config.
	State *string `pulumi:"state"`
	// Updated time.
	UpdateTime *string `pulumi:"updateTime"`
}

type ApiConfigState struct {
	// Created time.
	CreateTime pulumi.StringPtrInput
	// Optional. Display name.
	DisplayName pulumi.StringPtrInput
	// Immutable. The Google Cloud IAM Service Account that Gateways serving this config should use to authenticate to other services. This may either be the Service Account's email (`{ACCOUNT_ID}@{PROJECT}.iam.gserviceaccount.com`) or its full resource name (`projects/{PROJECT}/accounts/{UNIQUE_ID}`). This is most often used when the service is a GCP resource such as a Cloud Run Service or an IAP-secured service.
	GatewayServiceAccount pulumi.StringPtrInput
	// Optional. gRPC service definition files. If specified, openapi_documents must not be included.
	GrpcServices ApigatewayApiConfigGrpcServiceDefinitionResponseArrayInput
	// Optional. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources
	Labels pulumi.StringMapInput
	// Optional. Service Configuration files. At least one must be included when using gRPC service definitions. See https://cloud.google.com/endpoints/docs/grpc/grpc-service-config#service_configuration_overview for the expected file contents. If multiple files are specified, the files are merged with the following rules: * All singular scalar fields are merged using "last one wins" semantics in the order of the files uploaded. * Repeated fields are concatenated. * Singular embedded messages are merged using these rules for nested fields.
	ManagedServiceConfigs ApigatewayApiConfigFileResponseArrayInput
	// Resource name of the API Config. Format: projects/{project}/locations/global/apis/{api}/configs/{api_config}
	Name pulumi.StringPtrInput
	// Optional. OpenAPI specification documents. If specified, grpc_services and managed_service_configs must not be included.
	OpenapiDocuments ApigatewayApiConfigOpenApiDocumentResponseArrayInput
	// The ID of the associated Service Config ( https://cloud.google.com/service-infrastructure/docs/glossary#config).
	ServiceConfigId pulumi.StringPtrInput
	// State of the API Config.
	State pulumi.StringPtrInput
	// Updated time.
	UpdateTime pulumi.StringPtrInput
}

func (ApiConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*apiConfigState)(nil)).Elem()
}

type apiConfigArgs struct {
	ApiConfigId string `pulumi:"apiConfigId"`
	ApisId      string `pulumi:"apisId"`
	ConfigsId   string `pulumi:"configsId"`
	// Optional. Display name.
	DisplayName *string `pulumi:"displayName"`
	// Immutable. The Google Cloud IAM Service Account that Gateways serving this config should use to authenticate to other services. This may either be the Service Account's email (`{ACCOUNT_ID}@{PROJECT}.iam.gserviceaccount.com`) or its full resource name (`projects/{PROJECT}/accounts/{UNIQUE_ID}`). This is most often used when the service is a GCP resource such as a Cloud Run Service or an IAP-secured service.
	GatewayServiceAccount *string `pulumi:"gatewayServiceAccount"`
	// Optional. gRPC service definition files. If specified, openapi_documents must not be included.
	GrpcServices []ApigatewayApiConfigGrpcServiceDefinition `pulumi:"grpcServices"`
	// Optional. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources
	Labels      map[string]string `pulumi:"labels"`
	LocationsId string            `pulumi:"locationsId"`
	// Optional. Service Configuration files. At least one must be included when using gRPC service definitions. See https://cloud.google.com/endpoints/docs/grpc/grpc-service-config#service_configuration_overview for the expected file contents. If multiple files are specified, the files are merged with the following rules: * All singular scalar fields are merged using "last one wins" semantics in the order of the files uploaded. * Repeated fields are concatenated. * Singular embedded messages are merged using these rules for nested fields.
	ManagedServiceConfigs []ApigatewayApiConfigFile `pulumi:"managedServiceConfigs"`
	// Optional. OpenAPI specification documents. If specified, grpc_services and managed_service_configs must not be included.
	OpenapiDocuments []ApigatewayApiConfigOpenApiDocument `pulumi:"openapiDocuments"`
	ProjectsId       string                               `pulumi:"projectsId"`
}

// The set of arguments for constructing a ApiConfig resource.
type ApiConfigArgs struct {
	ApiConfigId pulumi.StringInput
	ApisId      pulumi.StringInput
	ConfigsId   pulumi.StringInput
	// Optional. Display name.
	DisplayName pulumi.StringPtrInput
	// Immutable. The Google Cloud IAM Service Account that Gateways serving this config should use to authenticate to other services. This may either be the Service Account's email (`{ACCOUNT_ID}@{PROJECT}.iam.gserviceaccount.com`) or its full resource name (`projects/{PROJECT}/accounts/{UNIQUE_ID}`). This is most often used when the service is a GCP resource such as a Cloud Run Service or an IAP-secured service.
	GatewayServiceAccount pulumi.StringPtrInput
	// Optional. gRPC service definition files. If specified, openapi_documents must not be included.
	GrpcServices ApigatewayApiConfigGrpcServiceDefinitionArrayInput
	// Optional. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources
	Labels      pulumi.StringMapInput
	LocationsId pulumi.StringInput
	// Optional. Service Configuration files. At least one must be included when using gRPC service definitions. See https://cloud.google.com/endpoints/docs/grpc/grpc-service-config#service_configuration_overview for the expected file contents. If multiple files are specified, the files are merged with the following rules: * All singular scalar fields are merged using "last one wins" semantics in the order of the files uploaded. * Repeated fields are concatenated. * Singular embedded messages are merged using these rules for nested fields.
	ManagedServiceConfigs ApigatewayApiConfigFileArrayInput
	// Optional. OpenAPI specification documents. If specified, grpc_services and managed_service_configs must not be included.
	OpenapiDocuments ApigatewayApiConfigOpenApiDocumentArrayInput
	ProjectsId       pulumi.StringInput
}

func (ApiConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*apiConfigArgs)(nil)).Elem()
}

type ApiConfigInput interface {
	pulumi.Input

	ToApiConfigOutput() ApiConfigOutput
	ToApiConfigOutputWithContext(ctx context.Context) ApiConfigOutput
}

func (*ApiConfig) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiConfig)(nil))
}

func (i *ApiConfig) ToApiConfigOutput() ApiConfigOutput {
	return i.ToApiConfigOutputWithContext(context.Background())
}

func (i *ApiConfig) ToApiConfigOutputWithContext(ctx context.Context) ApiConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiConfigOutput)
}

type ApiConfigOutput struct {
	*pulumi.OutputState
}

func (ApiConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiConfig)(nil))
}

func (o ApiConfigOutput) ToApiConfigOutput() ApiConfigOutput {
	return o
}

func (o ApiConfigOutput) ToApiConfigOutputWithContext(ctx context.Context) ApiConfigOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ApiConfigOutput{})
}
