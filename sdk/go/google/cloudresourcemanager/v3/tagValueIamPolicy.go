// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v3

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Sets the access control policy on a TagValue, replacing any existing policy. The `resource` field should be the TagValue's resource name. For example: `tagValues/1234`. The caller must have `resourcemanager.tagValues.setIamPolicy` permission on the identified tagValue.
type TagValueIamPolicy struct {
	pulumi.CustomResourceState
}

// NewTagValueIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewTagValueIamPolicy(ctx *pulumi.Context,
	name string, args *TagValueIamPolicyArgs, opts ...pulumi.ResourceOption) (*TagValueIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TagValuesId == nil {
		return nil, errors.New("invalid value for required argument 'TagValuesId'")
	}
	var resource TagValueIamPolicy
	err := ctx.RegisterResource("google-cloud:cloudresourcemanager/v3:TagValueIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTagValueIamPolicy gets an existing TagValueIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTagValueIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TagValueIamPolicyState, opts ...pulumi.ResourceOption) (*TagValueIamPolicy, error) {
	var resource TagValueIamPolicy
	err := ctx.ReadResource("google-cloud:cloudresourcemanager/v3:TagValueIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TagValueIamPolicy resources.
type tagValueIamPolicyState struct {
}

type TagValueIamPolicyState struct {
}

func (TagValueIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*tagValueIamPolicyState)(nil)).Elem()
}

type tagValueIamPolicyArgs struct {
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy      *Policy `pulumi:"policy"`
	TagValuesId string  `pulumi:"tagValuesId"`
	// OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`
	UpdateMask *string `pulumi:"updateMask"`
}

// The set of arguments for constructing a TagValueIamPolicy resource.
type TagValueIamPolicyArgs struct {
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy      PolicyPtrInput
	TagValuesId pulumi.StringInput
	// OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`
	UpdateMask pulumi.StringPtrInput
}

func (TagValueIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tagValueIamPolicyArgs)(nil)).Elem()
}

type TagValueIamPolicyInput interface {
	pulumi.Input

	ToTagValueIamPolicyOutput() TagValueIamPolicyOutput
	ToTagValueIamPolicyOutputWithContext(ctx context.Context) TagValueIamPolicyOutput
}

func (*TagValueIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*TagValueIamPolicy)(nil))
}

func (i *TagValueIamPolicy) ToTagValueIamPolicyOutput() TagValueIamPolicyOutput {
	return i.ToTagValueIamPolicyOutputWithContext(context.Background())
}

func (i *TagValueIamPolicy) ToTagValueIamPolicyOutputWithContext(ctx context.Context) TagValueIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagValueIamPolicyOutput)
}

type TagValueIamPolicyOutput struct {
	*pulumi.OutputState
}

func (TagValueIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TagValueIamPolicy)(nil))
}

func (o TagValueIamPolicyOutput) ToTagValueIamPolicyOutput() TagValueIamPolicyOutput {
	return o
}

func (o TagValueIamPolicyOutput) ToTagValueIamPolicyOutputWithContext(ctx context.Context) TagValueIamPolicyOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(TagValueIamPolicyOutput{})
}
