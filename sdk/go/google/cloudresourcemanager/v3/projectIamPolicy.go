// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v3

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Sets the IAM access control policy for the specified project. CAUTION: This method will replace the existing policy, and cannot be used to append additional IAM settings. Note: Removing service accounts from policies or changing their roles can render services completely inoperable. It is important to understand how the service account is being used before removing or updating its roles. The following constraints apply when using `setIamPolicy()`: + Project does not support `allUsers` and `allAuthenticatedUsers` as `members` in a `Binding` of a `Policy`. + The owner role can be granted to a `user`, `serviceAccount`, or a group that is part of an organization. For example, group@myownpersonaldomain.com could be added as an owner to a project in the myownpersonaldomain.com organization, but not the examplepetstore.com organization. + Service accounts can be made owners of a project directly without any restrictions. However, to be added as an owner, a user must be invited using the Cloud Platform console and must accept the invitation. + A user cannot be granted the owner role using `setIamPolicy()`. The user must be granted the owner role using the Cloud Platform Console and must explicitly accept the invitation. + Invitations to grant the owner role cannot be sent using `setIamPolicy()`; they must be sent only using the Cloud Platform Console. + Membership changes that leave the project without any owners that have accepted the Terms of Service (ToS) will be rejected. + If the project is not part of an organization, there must be at least one owner who has accepted the Terms of Service (ToS) agreement in the policy. Calling `setIamPolicy()` to remove the last ToS-accepted owner from the policy will fail. This restriction also applies to legacy projects that no longer have owners who have accepted the ToS. Edits to IAM policies will be rejected until the lack of a ToS-accepting owner is rectified. + Calling this method requires enabling the App Engine Admin API.
type ProjectIamPolicy struct {
	pulumi.CustomResourceState
}

// NewProjectIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewProjectIamPolicy(ctx *pulumi.Context,
	name string, args *ProjectIamPolicyArgs, opts ...pulumi.ResourceOption) (*ProjectIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	var resource ProjectIamPolicy
	err := ctx.RegisterResource("google-cloud:cloudresourcemanager/v3:ProjectIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectIamPolicy gets an existing ProjectIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectIamPolicyState, opts ...pulumi.ResourceOption) (*ProjectIamPolicy, error) {
	var resource ProjectIamPolicy
	err := ctx.ReadResource("google-cloud:cloudresourcemanager/v3:ProjectIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectIamPolicy resources.
type projectIamPolicyState struct {
}

type ProjectIamPolicyState struct {
}

func (ProjectIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectIamPolicyState)(nil)).Elem()
}

type projectIamPolicyArgs struct {
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy     *Policy `pulumi:"policy"`
	ProjectsId string  `pulumi:"projectsId"`
	// OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`
	UpdateMask *string `pulumi:"updateMask"`
}

// The set of arguments for constructing a ProjectIamPolicy resource.
type ProjectIamPolicyArgs struct {
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy     PolicyPtrInput
	ProjectsId pulumi.StringInput
	// OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`
	UpdateMask pulumi.StringPtrInput
}

func (ProjectIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectIamPolicyArgs)(nil)).Elem()
}

type ProjectIamPolicyInput interface {
	pulumi.Input

	ToProjectIamPolicyOutput() ProjectIamPolicyOutput
	ToProjectIamPolicyOutputWithContext(ctx context.Context) ProjectIamPolicyOutput
}

func (*ProjectIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectIamPolicy)(nil))
}

func (i *ProjectIamPolicy) ToProjectIamPolicyOutput() ProjectIamPolicyOutput {
	return i.ToProjectIamPolicyOutputWithContext(context.Background())
}

func (i *ProjectIamPolicy) ToProjectIamPolicyOutputWithContext(ctx context.Context) ProjectIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectIamPolicyOutput)
}

type ProjectIamPolicyOutput struct {
	*pulumi.OutputState
}

func (ProjectIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectIamPolicy)(nil))
}

func (o ProjectIamPolicyOutput) ToProjectIamPolicyOutput() ProjectIamPolicyOutput {
	return o
}

func (o ProjectIamPolicyOutput) ToProjectIamPolicyOutputWithContext(ctx context.Context) ProjectIamPolicyOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ProjectIamPolicyOutput{})
}
