// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v3

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Sets the access control policy on a TagKey, replacing any existing policy. The `resource` field should be the TagKey's resource name. For example, "tagKeys/1234". The caller must have `resourcemanager.tagKeys.setIamPolicy` permission on the identified tagValue.
type TagKeyIamPolicy struct {
	pulumi.CustomResourceState
}

// NewTagKeyIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewTagKeyIamPolicy(ctx *pulumi.Context,
	name string, args *TagKeyIamPolicyArgs, opts ...pulumi.ResourceOption) (*TagKeyIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TagKeysId == nil {
		return nil, errors.New("invalid value for required argument 'TagKeysId'")
	}
	var resource TagKeyIamPolicy
	err := ctx.RegisterResource("google-cloud:cloudresourcemanager/v3:TagKeyIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTagKeyIamPolicy gets an existing TagKeyIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTagKeyIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TagKeyIamPolicyState, opts ...pulumi.ResourceOption) (*TagKeyIamPolicy, error) {
	var resource TagKeyIamPolicy
	err := ctx.ReadResource("google-cloud:cloudresourcemanager/v3:TagKeyIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TagKeyIamPolicy resources.
type tagKeyIamPolicyState struct {
}

type TagKeyIamPolicyState struct {
}

func (TagKeyIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*tagKeyIamPolicyState)(nil)).Elem()
}

type tagKeyIamPolicyArgs struct {
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy    *Policy `pulumi:"policy"`
	TagKeysId string  `pulumi:"tagKeysId"`
	// OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`
	UpdateMask *string `pulumi:"updateMask"`
}

// The set of arguments for constructing a TagKeyIamPolicy resource.
type TagKeyIamPolicyArgs struct {
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy    PolicyPtrInput
	TagKeysId pulumi.StringInput
	// OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`
	UpdateMask pulumi.StringPtrInput
}

func (TagKeyIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tagKeyIamPolicyArgs)(nil)).Elem()
}

type TagKeyIamPolicyInput interface {
	pulumi.Input

	ToTagKeyIamPolicyOutput() TagKeyIamPolicyOutput
	ToTagKeyIamPolicyOutputWithContext(ctx context.Context) TagKeyIamPolicyOutput
}

func (*TagKeyIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*TagKeyIamPolicy)(nil))
}

func (i *TagKeyIamPolicy) ToTagKeyIamPolicyOutput() TagKeyIamPolicyOutput {
	return i.ToTagKeyIamPolicyOutputWithContext(context.Background())
}

func (i *TagKeyIamPolicy) ToTagKeyIamPolicyOutputWithContext(ctx context.Context) TagKeyIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagKeyIamPolicyOutput)
}

type TagKeyIamPolicyOutput struct {
	*pulumi.OutputState
}

func (TagKeyIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TagKeyIamPolicy)(nil))
}

func (o TagKeyIamPolicyOutput) ToTagKeyIamPolicyOutput() TagKeyIamPolicyOutput {
	return o
}

func (o TagKeyIamPolicyOutput) ToTagKeyIamPolicyOutputWithContext(ctx context.Context) TagKeyIamPolicyOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(TagKeyIamPolicyOutput{})
}
