// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Sets the access control policy on a Folder, replacing any existing policy. The `resource` field should be the Folder's resource name, e.g. "folders/1234". The caller must have `resourcemanager.folders.setIamPolicy` permission on the identified folder.
type FolderIamPolicy struct {
	pulumi.CustomResourceState
}

// NewFolderIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewFolderIamPolicy(ctx *pulumi.Context,
	name string, args *FolderIamPolicyArgs, opts ...pulumi.ResourceOption) (*FolderIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FoldersId == nil {
		return nil, errors.New("invalid value for required argument 'FoldersId'")
	}
	var resource FolderIamPolicy
	err := ctx.RegisterResource("google-cloud:cloudresourcemanager/v2:FolderIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFolderIamPolicy gets an existing FolderIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFolderIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FolderIamPolicyState, opts ...pulumi.ResourceOption) (*FolderIamPolicy, error) {
	var resource FolderIamPolicy
	err := ctx.ReadResource("google-cloud:cloudresourcemanager/v2:FolderIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FolderIamPolicy resources.
type folderIamPolicyState struct {
}

type FolderIamPolicyState struct {
}

func (FolderIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*folderIamPolicyState)(nil)).Elem()
}

type folderIamPolicyArgs struct {
	FoldersId string `pulumi:"foldersId"`
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy *Policy `pulumi:"policy"`
	// OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`
	UpdateMask *string `pulumi:"updateMask"`
}

// The set of arguments for constructing a FolderIamPolicy resource.
type FolderIamPolicyArgs struct {
	FoldersId pulumi.StringInput
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy PolicyPtrInput
	// OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`
	UpdateMask pulumi.StringPtrInput
}

func (FolderIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*folderIamPolicyArgs)(nil)).Elem()
}

type FolderIamPolicyInput interface {
	pulumi.Input

	ToFolderIamPolicyOutput() FolderIamPolicyOutput
	ToFolderIamPolicyOutputWithContext(ctx context.Context) FolderIamPolicyOutput
}

func (*FolderIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*FolderIamPolicy)(nil))
}

func (i *FolderIamPolicy) ToFolderIamPolicyOutput() FolderIamPolicyOutput {
	return i.ToFolderIamPolicyOutputWithContext(context.Background())
}

func (i *FolderIamPolicy) ToFolderIamPolicyOutputWithContext(ctx context.Context) FolderIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FolderIamPolicyOutput)
}

type FolderIamPolicyOutput struct {
	*pulumi.OutputState
}

func (FolderIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FolderIamPolicy)(nil))
}

func (o FolderIamPolicyOutput) ToFolderIamPolicyOutput() FolderIamPolicyOutput {
	return o
}

func (o FolderIamPolicyOutput) ToFolderIamPolicyOutputWithContext(ctx context.Context) FolderIamPolicyOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(FolderIamPolicyOutput{})
}
