// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
type TopicIamPolicy struct {
	pulumi.CustomResourceState
}

// NewTopicIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewTopicIamPolicy(ctx *pulumi.Context,
	name string, args *TopicIamPolicyArgs, opts ...pulumi.ResourceOption) (*TopicIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	if args.TopicsId == nil {
		return nil, errors.New("invalid value for required argument 'TopicsId'")
	}
	var resource TopicIamPolicy
	err := ctx.RegisterResource("google-cloud:pubsub/v1beta2:TopicIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTopicIamPolicy gets an existing TopicIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTopicIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TopicIamPolicyState, opts ...pulumi.ResourceOption) (*TopicIamPolicy, error) {
	var resource TopicIamPolicy
	err := ctx.ReadResource("google-cloud:pubsub/v1beta2:TopicIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TopicIamPolicy resources.
type topicIamPolicyState struct {
}

type TopicIamPolicyState struct {
}

func (TopicIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*topicIamPolicyState)(nil)).Elem()
}

type topicIamPolicyArgs struct {
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy     *Policy `pulumi:"policy"`
	ProjectsId string  `pulumi:"projectsId"`
	TopicsId   string  `pulumi:"topicsId"`
}

// The set of arguments for constructing a TopicIamPolicy resource.
type TopicIamPolicyArgs struct {
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy     PolicyPtrInput
	ProjectsId pulumi.StringInput
	TopicsId   pulumi.StringInput
}

func (TopicIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*topicIamPolicyArgs)(nil)).Elem()
}

type TopicIamPolicyInput interface {
	pulumi.Input

	ToTopicIamPolicyOutput() TopicIamPolicyOutput
	ToTopicIamPolicyOutputWithContext(ctx context.Context) TopicIamPolicyOutput
}

func (*TopicIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicIamPolicy)(nil))
}

func (i *TopicIamPolicy) ToTopicIamPolicyOutput() TopicIamPolicyOutput {
	return i.ToTopicIamPolicyOutputWithContext(context.Background())
}

func (i *TopicIamPolicy) ToTopicIamPolicyOutputWithContext(ctx context.Context) TopicIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicIamPolicyOutput)
}

type TopicIamPolicyOutput struct {
	*pulumi.OutputState
}

func (TopicIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicIamPolicy)(nil))
}

func (o TopicIamPolicyOutput) ToTopicIamPolicyOutput() TopicIamPolicyOutput {
	return o
}

func (o TopicIamPolicyOutput) ToTopicIamPolicyOutputWithContext(ctx context.Context) TopicIamPolicyOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(TopicIamPolicyOutput{})
}
