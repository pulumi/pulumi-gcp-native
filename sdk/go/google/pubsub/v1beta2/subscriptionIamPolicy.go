// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
type SubscriptionIamPolicy struct {
	pulumi.CustomResourceState
}

// NewSubscriptionIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewSubscriptionIamPolicy(ctx *pulumi.Context,
	name string, args *SubscriptionIamPolicyArgs, opts ...pulumi.ResourceOption) (*SubscriptionIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	if args.SubscriptionsId == nil {
		return nil, errors.New("invalid value for required argument 'SubscriptionsId'")
	}
	var resource SubscriptionIamPolicy
	err := ctx.RegisterResource("google-cloud:pubsub/v1beta2:SubscriptionIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubscriptionIamPolicy gets an existing SubscriptionIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubscriptionIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubscriptionIamPolicyState, opts ...pulumi.ResourceOption) (*SubscriptionIamPolicy, error) {
	var resource SubscriptionIamPolicy
	err := ctx.ReadResource("google-cloud:pubsub/v1beta2:SubscriptionIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SubscriptionIamPolicy resources.
type subscriptionIamPolicyState struct {
}

type SubscriptionIamPolicyState struct {
}

func (SubscriptionIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*subscriptionIamPolicyState)(nil)).Elem()
}

type subscriptionIamPolicyArgs struct {
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy          *Policy `pulumi:"policy"`
	ProjectsId      string  `pulumi:"projectsId"`
	SubscriptionsId string  `pulumi:"subscriptionsId"`
}

// The set of arguments for constructing a SubscriptionIamPolicy resource.
type SubscriptionIamPolicyArgs struct {
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy          PolicyPtrInput
	ProjectsId      pulumi.StringInput
	SubscriptionsId pulumi.StringInput
}

func (SubscriptionIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subscriptionIamPolicyArgs)(nil)).Elem()
}

type SubscriptionIamPolicyInput interface {
	pulumi.Input

	ToSubscriptionIamPolicyOutput() SubscriptionIamPolicyOutput
	ToSubscriptionIamPolicyOutputWithContext(ctx context.Context) SubscriptionIamPolicyOutput
}

func (*SubscriptionIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionIamPolicy)(nil))
}

func (i *SubscriptionIamPolicy) ToSubscriptionIamPolicyOutput() SubscriptionIamPolicyOutput {
	return i.ToSubscriptionIamPolicyOutputWithContext(context.Background())
}

func (i *SubscriptionIamPolicy) ToSubscriptionIamPolicyOutputWithContext(ctx context.Context) SubscriptionIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionIamPolicyOutput)
}

type SubscriptionIamPolicyOutput struct {
	*pulumi.OutputState
}

func (SubscriptionIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionIamPolicy)(nil))
}

func (o SubscriptionIamPolicyOutput) ToSubscriptionIamPolicyOutput() SubscriptionIamPolicyOutput {
	return o
}

func (o SubscriptionIamPolicyOutput) ToSubscriptionIamPolicyOutputWithContext(ctx context.Context) SubscriptionIamPolicyOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(SubscriptionIamPolicyOutput{})
}
