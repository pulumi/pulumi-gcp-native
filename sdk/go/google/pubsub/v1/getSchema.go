// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets a schema.
func LookupSchema(ctx *pulumi.Context, args *LookupSchemaArgs, opts ...pulumi.InvokeOption) (*LookupSchemaResult, error) {
	var rv LookupSchemaResult
	err := ctx.Invoke("google-native:pubsub/v1:getSchema", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupSchemaArgs struct {
	Project  *string `pulumi:"project"`
	SchemaId string  `pulumi:"schemaId"`
	View     *string `pulumi:"view"`
}

type LookupSchemaResult struct {
	// The definition of the schema. This should contain a string representing the full definition of the schema that is a valid schema definition of the type specified in `type`.
	Definition string `pulumi:"definition"`
	// Name of the schema. Format is `projects/{project}/schemas/{schema}`.
	Name string `pulumi:"name"`
	// The timestamp that the revision was created.
	RevisionCreateTime string `pulumi:"revisionCreateTime"`
	// Immutable. The revision ID of the schema.
	RevisionId string `pulumi:"revisionId"`
	// The type of the schema definition.
	Type string `pulumi:"type"`
}

func LookupSchemaOutput(ctx *pulumi.Context, args LookupSchemaOutputArgs, opts ...pulumi.InvokeOption) LookupSchemaResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSchemaResult, error) {
			args := v.(LookupSchemaArgs)
			r, err := LookupSchema(ctx, &args, opts...)
			return *r, err
		}).(LookupSchemaResultOutput)
}

type LookupSchemaOutputArgs struct {
	Project  pulumi.StringPtrInput `pulumi:"project"`
	SchemaId pulumi.StringInput    `pulumi:"schemaId"`
	View     pulumi.StringPtrInput `pulumi:"view"`
}

func (LookupSchemaOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSchemaArgs)(nil)).Elem()
}

type LookupSchemaResultOutput struct{ *pulumi.OutputState }

func (LookupSchemaResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSchemaResult)(nil)).Elem()
}

func (o LookupSchemaResultOutput) ToLookupSchemaResultOutput() LookupSchemaResultOutput {
	return o
}

func (o LookupSchemaResultOutput) ToLookupSchemaResultOutputWithContext(ctx context.Context) LookupSchemaResultOutput {
	return o
}

// The definition of the schema. This should contain a string representing the full definition of the schema that is a valid schema definition of the type specified in `type`.
func (o LookupSchemaResultOutput) Definition() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSchemaResult) string { return v.Definition }).(pulumi.StringOutput)
}

// Name of the schema. Format is `projects/{project}/schemas/{schema}`.
func (o LookupSchemaResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSchemaResult) string { return v.Name }).(pulumi.StringOutput)
}

// The timestamp that the revision was created.
func (o LookupSchemaResultOutput) RevisionCreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSchemaResult) string { return v.RevisionCreateTime }).(pulumi.StringOutput)
}

// Immutable. The revision ID of the schema.
func (o LookupSchemaResultOutput) RevisionId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSchemaResult) string { return v.RevisionId }).(pulumi.StringOutput)
}

// The type of the schema definition.
func (o LookupSchemaResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSchemaResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSchemaResultOutput{})
}
