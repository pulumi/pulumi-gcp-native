// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configuration for a BigQuery subscription.
type BigQueryConfig struct {
	// When true and use_topic_schema is true, any fields that are a part of the topic schema that are not part of the BigQuery table schema are dropped when writing to BigQuery. Otherwise, the schemas must be kept in sync and any messages with extra fields are not written and remain in the subscription's backlog.
	DropUnknownFields *bool `pulumi:"dropUnknownFields"`
	// The name of the table to which to write data, of the form {projectId}.{datasetId}.{tableId}
	Table *string `pulumi:"table"`
	// When true, use the topic's schema as the columns to write to in BigQuery, if it exists.
	UseTopicSchema *bool `pulumi:"useTopicSchema"`
	// When true, write the subscription name, message_id, publish_time, attributes, and ordering_key to additional columns in the table. The subscription name, message_id, and publish_time fields are put in their own columns while all other message properties (other than data) are written to a JSON object in the attributes column.
	WriteMetadata *bool `pulumi:"writeMetadata"`
}

// BigQueryConfigInput is an input type that accepts BigQueryConfigArgs and BigQueryConfigOutput values.
// You can construct a concrete instance of `BigQueryConfigInput` via:
//
//	BigQueryConfigArgs{...}
type BigQueryConfigInput interface {
	pulumi.Input

	ToBigQueryConfigOutput() BigQueryConfigOutput
	ToBigQueryConfigOutputWithContext(context.Context) BigQueryConfigOutput
}

// Configuration for a BigQuery subscription.
type BigQueryConfigArgs struct {
	// When true and use_topic_schema is true, any fields that are a part of the topic schema that are not part of the BigQuery table schema are dropped when writing to BigQuery. Otherwise, the schemas must be kept in sync and any messages with extra fields are not written and remain in the subscription's backlog.
	DropUnknownFields pulumi.BoolPtrInput `pulumi:"dropUnknownFields"`
	// The name of the table to which to write data, of the form {projectId}.{datasetId}.{tableId}
	Table pulumi.StringPtrInput `pulumi:"table"`
	// When true, use the topic's schema as the columns to write to in BigQuery, if it exists.
	UseTopicSchema pulumi.BoolPtrInput `pulumi:"useTopicSchema"`
	// When true, write the subscription name, message_id, publish_time, attributes, and ordering_key to additional columns in the table. The subscription name, message_id, and publish_time fields are put in their own columns while all other message properties (other than data) are written to a JSON object in the attributes column.
	WriteMetadata pulumi.BoolPtrInput `pulumi:"writeMetadata"`
}

func (BigQueryConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BigQueryConfig)(nil)).Elem()
}

func (i BigQueryConfigArgs) ToBigQueryConfigOutput() BigQueryConfigOutput {
	return i.ToBigQueryConfigOutputWithContext(context.Background())
}

func (i BigQueryConfigArgs) ToBigQueryConfigOutputWithContext(ctx context.Context) BigQueryConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigQueryConfigOutput)
}

func (i BigQueryConfigArgs) ToBigQueryConfigPtrOutput() BigQueryConfigPtrOutput {
	return i.ToBigQueryConfigPtrOutputWithContext(context.Background())
}

func (i BigQueryConfigArgs) ToBigQueryConfigPtrOutputWithContext(ctx context.Context) BigQueryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigQueryConfigOutput).ToBigQueryConfigPtrOutputWithContext(ctx)
}

// BigQueryConfigPtrInput is an input type that accepts BigQueryConfigArgs, BigQueryConfigPtr and BigQueryConfigPtrOutput values.
// You can construct a concrete instance of `BigQueryConfigPtrInput` via:
//
//	        BigQueryConfigArgs{...}
//
//	or:
//
//	        nil
type BigQueryConfigPtrInput interface {
	pulumi.Input

	ToBigQueryConfigPtrOutput() BigQueryConfigPtrOutput
	ToBigQueryConfigPtrOutputWithContext(context.Context) BigQueryConfigPtrOutput
}

type bigQueryConfigPtrType BigQueryConfigArgs

func BigQueryConfigPtr(v *BigQueryConfigArgs) BigQueryConfigPtrInput {
	return (*bigQueryConfigPtrType)(v)
}

func (*bigQueryConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BigQueryConfig)(nil)).Elem()
}

func (i *bigQueryConfigPtrType) ToBigQueryConfigPtrOutput() BigQueryConfigPtrOutput {
	return i.ToBigQueryConfigPtrOutputWithContext(context.Background())
}

func (i *bigQueryConfigPtrType) ToBigQueryConfigPtrOutputWithContext(ctx context.Context) BigQueryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigQueryConfigPtrOutput)
}

// Configuration for a BigQuery subscription.
type BigQueryConfigOutput struct{ *pulumi.OutputState }

func (BigQueryConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BigQueryConfig)(nil)).Elem()
}

func (o BigQueryConfigOutput) ToBigQueryConfigOutput() BigQueryConfigOutput {
	return o
}

func (o BigQueryConfigOutput) ToBigQueryConfigOutputWithContext(ctx context.Context) BigQueryConfigOutput {
	return o
}

func (o BigQueryConfigOutput) ToBigQueryConfigPtrOutput() BigQueryConfigPtrOutput {
	return o.ToBigQueryConfigPtrOutputWithContext(context.Background())
}

func (o BigQueryConfigOutput) ToBigQueryConfigPtrOutputWithContext(ctx context.Context) BigQueryConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BigQueryConfig) *BigQueryConfig {
		return &v
	}).(BigQueryConfigPtrOutput)
}

// When true and use_topic_schema is true, any fields that are a part of the topic schema that are not part of the BigQuery table schema are dropped when writing to BigQuery. Otherwise, the schemas must be kept in sync and any messages with extra fields are not written and remain in the subscription's backlog.
func (o BigQueryConfigOutput) DropUnknownFields() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BigQueryConfig) *bool { return v.DropUnknownFields }).(pulumi.BoolPtrOutput)
}

// The name of the table to which to write data, of the form {projectId}.{datasetId}.{tableId}
func (o BigQueryConfigOutput) Table() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BigQueryConfig) *string { return v.Table }).(pulumi.StringPtrOutput)
}

// When true, use the topic's schema as the columns to write to in BigQuery, if it exists.
func (o BigQueryConfigOutput) UseTopicSchema() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BigQueryConfig) *bool { return v.UseTopicSchema }).(pulumi.BoolPtrOutput)
}

// When true, write the subscription name, message_id, publish_time, attributes, and ordering_key to additional columns in the table. The subscription name, message_id, and publish_time fields are put in their own columns while all other message properties (other than data) are written to a JSON object in the attributes column.
func (o BigQueryConfigOutput) WriteMetadata() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BigQueryConfig) *bool { return v.WriteMetadata }).(pulumi.BoolPtrOutput)
}

type BigQueryConfigPtrOutput struct{ *pulumi.OutputState }

func (BigQueryConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BigQueryConfig)(nil)).Elem()
}

func (o BigQueryConfigPtrOutput) ToBigQueryConfigPtrOutput() BigQueryConfigPtrOutput {
	return o
}

func (o BigQueryConfigPtrOutput) ToBigQueryConfigPtrOutputWithContext(ctx context.Context) BigQueryConfigPtrOutput {
	return o
}

func (o BigQueryConfigPtrOutput) Elem() BigQueryConfigOutput {
	return o.ApplyT(func(v *BigQueryConfig) BigQueryConfig {
		if v != nil {
			return *v
		}
		var ret BigQueryConfig
		return ret
	}).(BigQueryConfigOutput)
}

// When true and use_topic_schema is true, any fields that are a part of the topic schema that are not part of the BigQuery table schema are dropped when writing to BigQuery. Otherwise, the schemas must be kept in sync and any messages with extra fields are not written and remain in the subscription's backlog.
func (o BigQueryConfigPtrOutput) DropUnknownFields() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BigQueryConfig) *bool {
		if v == nil {
			return nil
		}
		return v.DropUnknownFields
	}).(pulumi.BoolPtrOutput)
}

// The name of the table to which to write data, of the form {projectId}.{datasetId}.{tableId}
func (o BigQueryConfigPtrOutput) Table() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BigQueryConfig) *string {
		if v == nil {
			return nil
		}
		return v.Table
	}).(pulumi.StringPtrOutput)
}

// When true, use the topic's schema as the columns to write to in BigQuery, if it exists.
func (o BigQueryConfigPtrOutput) UseTopicSchema() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BigQueryConfig) *bool {
		if v == nil {
			return nil
		}
		return v.UseTopicSchema
	}).(pulumi.BoolPtrOutput)
}

// When true, write the subscription name, message_id, publish_time, attributes, and ordering_key to additional columns in the table. The subscription name, message_id, and publish_time fields are put in their own columns while all other message properties (other than data) are written to a JSON object in the attributes column.
func (o BigQueryConfigPtrOutput) WriteMetadata() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BigQueryConfig) *bool {
		if v == nil {
			return nil
		}
		return v.WriteMetadata
	}).(pulumi.BoolPtrOutput)
}

// Configuration for a BigQuery subscription.
type BigQueryConfigResponse struct {
	// When true and use_topic_schema is true, any fields that are a part of the topic schema that are not part of the BigQuery table schema are dropped when writing to BigQuery. Otherwise, the schemas must be kept in sync and any messages with extra fields are not written and remain in the subscription's backlog.
	DropUnknownFields bool `pulumi:"dropUnknownFields"`
	// An output-only field that indicates whether or not the subscription can receive messages.
	State string `pulumi:"state"`
	// The name of the table to which to write data, of the form {projectId}.{datasetId}.{tableId}
	Table string `pulumi:"table"`
	// When true, use the topic's schema as the columns to write to in BigQuery, if it exists.
	UseTopicSchema bool `pulumi:"useTopicSchema"`
	// When true, write the subscription name, message_id, publish_time, attributes, and ordering_key to additional columns in the table. The subscription name, message_id, and publish_time fields are put in their own columns while all other message properties (other than data) are written to a JSON object in the attributes column.
	WriteMetadata bool `pulumi:"writeMetadata"`
}

// Configuration for a BigQuery subscription.
type BigQueryConfigResponseOutput struct{ *pulumi.OutputState }

func (BigQueryConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BigQueryConfigResponse)(nil)).Elem()
}

func (o BigQueryConfigResponseOutput) ToBigQueryConfigResponseOutput() BigQueryConfigResponseOutput {
	return o
}

func (o BigQueryConfigResponseOutput) ToBigQueryConfigResponseOutputWithContext(ctx context.Context) BigQueryConfigResponseOutput {
	return o
}

// When true and use_topic_schema is true, any fields that are a part of the topic schema that are not part of the BigQuery table schema are dropped when writing to BigQuery. Otherwise, the schemas must be kept in sync and any messages with extra fields are not written and remain in the subscription's backlog.
func (o BigQueryConfigResponseOutput) DropUnknownFields() pulumi.BoolOutput {
	return o.ApplyT(func(v BigQueryConfigResponse) bool { return v.DropUnknownFields }).(pulumi.BoolOutput)
}

// An output-only field that indicates whether or not the subscription can receive messages.
func (o BigQueryConfigResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v BigQueryConfigResponse) string { return v.State }).(pulumi.StringOutput)
}

// The name of the table to which to write data, of the form {projectId}.{datasetId}.{tableId}
func (o BigQueryConfigResponseOutput) Table() pulumi.StringOutput {
	return o.ApplyT(func(v BigQueryConfigResponse) string { return v.Table }).(pulumi.StringOutput)
}

// When true, use the topic's schema as the columns to write to in BigQuery, if it exists.
func (o BigQueryConfigResponseOutput) UseTopicSchema() pulumi.BoolOutput {
	return o.ApplyT(func(v BigQueryConfigResponse) bool { return v.UseTopicSchema }).(pulumi.BoolOutput)
}

// When true, write the subscription name, message_id, publish_time, attributes, and ordering_key to additional columns in the table. The subscription name, message_id, and publish_time fields are put in their own columns while all other message properties (other than data) are written to a JSON object in the attributes column.
func (o BigQueryConfigResponseOutput) WriteMetadata() pulumi.BoolOutput {
	return o.ApplyT(func(v BigQueryConfigResponse) bool { return v.WriteMetadata }).(pulumi.BoolOutput)
}

// Associates `members`, or principals, with a `role`.
type Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//	BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates `members`, or principals, with a `role`.
type BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//	BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingResponse struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprResponse `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role string `pulumi:"role"`
}

// Associates `members`, or principals, with a `role`.
type BindingResponseOutput struct{ *pulumi.OutputState }

func (BindingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingResponse)(nil)).Elem()
}

func (o BindingResponseOutput) ToBindingResponseOutput() BindingResponseOutput {
	return o
}

func (o BindingResponseOutput) ToBindingResponseOutputWithContext(ctx context.Context) BindingResponseOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingResponseOutput) Condition() ExprResponseOutput {
	return o.ApplyT(func(v BindingResponse) ExprResponse { return v.Condition }).(ExprResponseOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
func (o BindingResponseOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BindingResponse) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingResponseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v BindingResponse) string { return v.Role }).(pulumi.StringOutput)
}

type BindingResponseArrayOutput struct{ *pulumi.OutputState }

func (BindingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingResponse)(nil)).Elem()
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutput() BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutputWithContext(ctx context.Context) BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) Index(i pulumi.IntInput) BindingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BindingResponse {
		return vs[0].([]BindingResponse)[vs[1].(int)]
	}).(BindingResponseOutput)
}

// Dead lettering is done on a best effort basis. The same message might be dead lettered multiple times. If validation on any of the fields fails at subscription creation/updation, the create/update subscription request will fail.
type DeadLetterPolicy struct {
	// The name of the topic to which dead letter messages should be published. Format is `projects/{project}/topics/{topic}`.The Cloud Pub/Sub service account associated with the enclosing subscription's parent project (i.e., service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com) must have permission to Publish() to this topic. The operation will fail if the topic does not exist. Users should ensure that there is a subscription attached to this topic since messages published to a topic with no subscriptions are lost.
	DeadLetterTopic *string `pulumi:"deadLetterTopic"`
	// The maximum number of delivery attempts for any message. The value must be between 5 and 100. The number of delivery attempts is defined as 1 + (the sum of number of NACKs and number of times the acknowledgement deadline has been exceeded for the message). A NACK is any call to ModifyAckDeadline with a 0 deadline. Note that client libraries may automatically extend ack_deadlines. This field will be honored on a best effort basis. If this parameter is 0, a default value of 5 is used.
	MaxDeliveryAttempts *int `pulumi:"maxDeliveryAttempts"`
}

// DeadLetterPolicyInput is an input type that accepts DeadLetterPolicyArgs and DeadLetterPolicyOutput values.
// You can construct a concrete instance of `DeadLetterPolicyInput` via:
//
//	DeadLetterPolicyArgs{...}
type DeadLetterPolicyInput interface {
	pulumi.Input

	ToDeadLetterPolicyOutput() DeadLetterPolicyOutput
	ToDeadLetterPolicyOutputWithContext(context.Context) DeadLetterPolicyOutput
}

// Dead lettering is done on a best effort basis. The same message might be dead lettered multiple times. If validation on any of the fields fails at subscription creation/updation, the create/update subscription request will fail.
type DeadLetterPolicyArgs struct {
	// The name of the topic to which dead letter messages should be published. Format is `projects/{project}/topics/{topic}`.The Cloud Pub/Sub service account associated with the enclosing subscription's parent project (i.e., service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com) must have permission to Publish() to this topic. The operation will fail if the topic does not exist. Users should ensure that there is a subscription attached to this topic since messages published to a topic with no subscriptions are lost.
	DeadLetterTopic pulumi.StringPtrInput `pulumi:"deadLetterTopic"`
	// The maximum number of delivery attempts for any message. The value must be between 5 and 100. The number of delivery attempts is defined as 1 + (the sum of number of NACKs and number of times the acknowledgement deadline has been exceeded for the message). A NACK is any call to ModifyAckDeadline with a 0 deadline. Note that client libraries may automatically extend ack_deadlines. This field will be honored on a best effort basis. If this parameter is 0, a default value of 5 is used.
	MaxDeliveryAttempts pulumi.IntPtrInput `pulumi:"maxDeliveryAttempts"`
}

func (DeadLetterPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeadLetterPolicy)(nil)).Elem()
}

func (i DeadLetterPolicyArgs) ToDeadLetterPolicyOutput() DeadLetterPolicyOutput {
	return i.ToDeadLetterPolicyOutputWithContext(context.Background())
}

func (i DeadLetterPolicyArgs) ToDeadLetterPolicyOutputWithContext(ctx context.Context) DeadLetterPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeadLetterPolicyOutput)
}

func (i DeadLetterPolicyArgs) ToDeadLetterPolicyPtrOutput() DeadLetterPolicyPtrOutput {
	return i.ToDeadLetterPolicyPtrOutputWithContext(context.Background())
}

func (i DeadLetterPolicyArgs) ToDeadLetterPolicyPtrOutputWithContext(ctx context.Context) DeadLetterPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeadLetterPolicyOutput).ToDeadLetterPolicyPtrOutputWithContext(ctx)
}

// DeadLetterPolicyPtrInput is an input type that accepts DeadLetterPolicyArgs, DeadLetterPolicyPtr and DeadLetterPolicyPtrOutput values.
// You can construct a concrete instance of `DeadLetterPolicyPtrInput` via:
//
//	        DeadLetterPolicyArgs{...}
//
//	or:
//
//	        nil
type DeadLetterPolicyPtrInput interface {
	pulumi.Input

	ToDeadLetterPolicyPtrOutput() DeadLetterPolicyPtrOutput
	ToDeadLetterPolicyPtrOutputWithContext(context.Context) DeadLetterPolicyPtrOutput
}

type deadLetterPolicyPtrType DeadLetterPolicyArgs

func DeadLetterPolicyPtr(v *DeadLetterPolicyArgs) DeadLetterPolicyPtrInput {
	return (*deadLetterPolicyPtrType)(v)
}

func (*deadLetterPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeadLetterPolicy)(nil)).Elem()
}

func (i *deadLetterPolicyPtrType) ToDeadLetterPolicyPtrOutput() DeadLetterPolicyPtrOutput {
	return i.ToDeadLetterPolicyPtrOutputWithContext(context.Background())
}

func (i *deadLetterPolicyPtrType) ToDeadLetterPolicyPtrOutputWithContext(ctx context.Context) DeadLetterPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeadLetterPolicyPtrOutput)
}

// Dead lettering is done on a best effort basis. The same message might be dead lettered multiple times. If validation on any of the fields fails at subscription creation/updation, the create/update subscription request will fail.
type DeadLetterPolicyOutput struct{ *pulumi.OutputState }

func (DeadLetterPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeadLetterPolicy)(nil)).Elem()
}

func (o DeadLetterPolicyOutput) ToDeadLetterPolicyOutput() DeadLetterPolicyOutput {
	return o
}

func (o DeadLetterPolicyOutput) ToDeadLetterPolicyOutputWithContext(ctx context.Context) DeadLetterPolicyOutput {
	return o
}

func (o DeadLetterPolicyOutput) ToDeadLetterPolicyPtrOutput() DeadLetterPolicyPtrOutput {
	return o.ToDeadLetterPolicyPtrOutputWithContext(context.Background())
}

func (o DeadLetterPolicyOutput) ToDeadLetterPolicyPtrOutputWithContext(ctx context.Context) DeadLetterPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeadLetterPolicy) *DeadLetterPolicy {
		return &v
	}).(DeadLetterPolicyPtrOutput)
}

// The name of the topic to which dead letter messages should be published. Format is `projects/{project}/topics/{topic}`.The Cloud Pub/Sub service account associated with the enclosing subscription's parent project (i.e., service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com) must have permission to Publish() to this topic. The operation will fail if the topic does not exist. Users should ensure that there is a subscription attached to this topic since messages published to a topic with no subscriptions are lost.
func (o DeadLetterPolicyOutput) DeadLetterTopic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeadLetterPolicy) *string { return v.DeadLetterTopic }).(pulumi.StringPtrOutput)
}

// The maximum number of delivery attempts for any message. The value must be between 5 and 100. The number of delivery attempts is defined as 1 + (the sum of number of NACKs and number of times the acknowledgement deadline has been exceeded for the message). A NACK is any call to ModifyAckDeadline with a 0 deadline. Note that client libraries may automatically extend ack_deadlines. This field will be honored on a best effort basis. If this parameter is 0, a default value of 5 is used.
func (o DeadLetterPolicyOutput) MaxDeliveryAttempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeadLetterPolicy) *int { return v.MaxDeliveryAttempts }).(pulumi.IntPtrOutput)
}

type DeadLetterPolicyPtrOutput struct{ *pulumi.OutputState }

func (DeadLetterPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeadLetterPolicy)(nil)).Elem()
}

func (o DeadLetterPolicyPtrOutput) ToDeadLetterPolicyPtrOutput() DeadLetterPolicyPtrOutput {
	return o
}

func (o DeadLetterPolicyPtrOutput) ToDeadLetterPolicyPtrOutputWithContext(ctx context.Context) DeadLetterPolicyPtrOutput {
	return o
}

func (o DeadLetterPolicyPtrOutput) Elem() DeadLetterPolicyOutput {
	return o.ApplyT(func(v *DeadLetterPolicy) DeadLetterPolicy {
		if v != nil {
			return *v
		}
		var ret DeadLetterPolicy
		return ret
	}).(DeadLetterPolicyOutput)
}

// The name of the topic to which dead letter messages should be published. Format is `projects/{project}/topics/{topic}`.The Cloud Pub/Sub service account associated with the enclosing subscription's parent project (i.e., service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com) must have permission to Publish() to this topic. The operation will fail if the topic does not exist. Users should ensure that there is a subscription attached to this topic since messages published to a topic with no subscriptions are lost.
func (o DeadLetterPolicyPtrOutput) DeadLetterTopic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeadLetterPolicy) *string {
		if v == nil {
			return nil
		}
		return v.DeadLetterTopic
	}).(pulumi.StringPtrOutput)
}

// The maximum number of delivery attempts for any message. The value must be between 5 and 100. The number of delivery attempts is defined as 1 + (the sum of number of NACKs and number of times the acknowledgement deadline has been exceeded for the message). A NACK is any call to ModifyAckDeadline with a 0 deadline. Note that client libraries may automatically extend ack_deadlines. This field will be honored on a best effort basis. If this parameter is 0, a default value of 5 is used.
func (o DeadLetterPolicyPtrOutput) MaxDeliveryAttempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeadLetterPolicy) *int {
		if v == nil {
			return nil
		}
		return v.MaxDeliveryAttempts
	}).(pulumi.IntPtrOutput)
}

// Dead lettering is done on a best effort basis. The same message might be dead lettered multiple times. If validation on any of the fields fails at subscription creation/updation, the create/update subscription request will fail.
type DeadLetterPolicyResponse struct {
	// The name of the topic to which dead letter messages should be published. Format is `projects/{project}/topics/{topic}`.The Cloud Pub/Sub service account associated with the enclosing subscription's parent project (i.e., service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com) must have permission to Publish() to this topic. The operation will fail if the topic does not exist. Users should ensure that there is a subscription attached to this topic since messages published to a topic with no subscriptions are lost.
	DeadLetterTopic string `pulumi:"deadLetterTopic"`
	// The maximum number of delivery attempts for any message. The value must be between 5 and 100. The number of delivery attempts is defined as 1 + (the sum of number of NACKs and number of times the acknowledgement deadline has been exceeded for the message). A NACK is any call to ModifyAckDeadline with a 0 deadline. Note that client libraries may automatically extend ack_deadlines. This field will be honored on a best effort basis. If this parameter is 0, a default value of 5 is used.
	MaxDeliveryAttempts int `pulumi:"maxDeliveryAttempts"`
}

// Dead lettering is done on a best effort basis. The same message might be dead lettered multiple times. If validation on any of the fields fails at subscription creation/updation, the create/update subscription request will fail.
type DeadLetterPolicyResponseOutput struct{ *pulumi.OutputState }

func (DeadLetterPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeadLetterPolicyResponse)(nil)).Elem()
}

func (o DeadLetterPolicyResponseOutput) ToDeadLetterPolicyResponseOutput() DeadLetterPolicyResponseOutput {
	return o
}

func (o DeadLetterPolicyResponseOutput) ToDeadLetterPolicyResponseOutputWithContext(ctx context.Context) DeadLetterPolicyResponseOutput {
	return o
}

// The name of the topic to which dead letter messages should be published. Format is `projects/{project}/topics/{topic}`.The Cloud Pub/Sub service account associated with the enclosing subscription's parent project (i.e., service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com) must have permission to Publish() to this topic. The operation will fail if the topic does not exist. Users should ensure that there is a subscription attached to this topic since messages published to a topic with no subscriptions are lost.
func (o DeadLetterPolicyResponseOutput) DeadLetterTopic() pulumi.StringOutput {
	return o.ApplyT(func(v DeadLetterPolicyResponse) string { return v.DeadLetterTopic }).(pulumi.StringOutput)
}

// The maximum number of delivery attempts for any message. The value must be between 5 and 100. The number of delivery attempts is defined as 1 + (the sum of number of NACKs and number of times the acknowledgement deadline has been exceeded for the message). A NACK is any call to ModifyAckDeadline with a 0 deadline. Note that client libraries may automatically extend ack_deadlines. This field will be honored on a best effort basis. If this parameter is 0, a default value of 5 is used.
func (o DeadLetterPolicyResponseOutput) MaxDeliveryAttempts() pulumi.IntOutput {
	return o.ApplyT(func(v DeadLetterPolicyResponse) int { return v.MaxDeliveryAttempts }).(pulumi.IntOutput)
}

// A policy that specifies the conditions for resource expiration (i.e., automatic resource deletion).
type ExpirationPolicy struct {
	// Specifies the "time-to-live" duration for an associated resource. The resource expires if it is not active for a period of `ttl`. The definition of "activity" depends on the type of the associated resource. The minimum and maximum allowed values for `ttl` depend on the type of the associated resource, as well. If `ttl` is not set, the associated resource never expires.
	Ttl *string `pulumi:"ttl"`
}

// ExpirationPolicyInput is an input type that accepts ExpirationPolicyArgs and ExpirationPolicyOutput values.
// You can construct a concrete instance of `ExpirationPolicyInput` via:
//
//	ExpirationPolicyArgs{...}
type ExpirationPolicyInput interface {
	pulumi.Input

	ToExpirationPolicyOutput() ExpirationPolicyOutput
	ToExpirationPolicyOutputWithContext(context.Context) ExpirationPolicyOutput
}

// A policy that specifies the conditions for resource expiration (i.e., automatic resource deletion).
type ExpirationPolicyArgs struct {
	// Specifies the "time-to-live" duration for an associated resource. The resource expires if it is not active for a period of `ttl`. The definition of "activity" depends on the type of the associated resource. The minimum and maximum allowed values for `ttl` depend on the type of the associated resource, as well. If `ttl` is not set, the associated resource never expires.
	Ttl pulumi.StringPtrInput `pulumi:"ttl"`
}

func (ExpirationPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExpirationPolicy)(nil)).Elem()
}

func (i ExpirationPolicyArgs) ToExpirationPolicyOutput() ExpirationPolicyOutput {
	return i.ToExpirationPolicyOutputWithContext(context.Background())
}

func (i ExpirationPolicyArgs) ToExpirationPolicyOutputWithContext(ctx context.Context) ExpirationPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExpirationPolicyOutput)
}

func (i ExpirationPolicyArgs) ToExpirationPolicyPtrOutput() ExpirationPolicyPtrOutput {
	return i.ToExpirationPolicyPtrOutputWithContext(context.Background())
}

func (i ExpirationPolicyArgs) ToExpirationPolicyPtrOutputWithContext(ctx context.Context) ExpirationPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExpirationPolicyOutput).ToExpirationPolicyPtrOutputWithContext(ctx)
}

// ExpirationPolicyPtrInput is an input type that accepts ExpirationPolicyArgs, ExpirationPolicyPtr and ExpirationPolicyPtrOutput values.
// You can construct a concrete instance of `ExpirationPolicyPtrInput` via:
//
//	        ExpirationPolicyArgs{...}
//
//	or:
//
//	        nil
type ExpirationPolicyPtrInput interface {
	pulumi.Input

	ToExpirationPolicyPtrOutput() ExpirationPolicyPtrOutput
	ToExpirationPolicyPtrOutputWithContext(context.Context) ExpirationPolicyPtrOutput
}

type expirationPolicyPtrType ExpirationPolicyArgs

func ExpirationPolicyPtr(v *ExpirationPolicyArgs) ExpirationPolicyPtrInput {
	return (*expirationPolicyPtrType)(v)
}

func (*expirationPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExpirationPolicy)(nil)).Elem()
}

func (i *expirationPolicyPtrType) ToExpirationPolicyPtrOutput() ExpirationPolicyPtrOutput {
	return i.ToExpirationPolicyPtrOutputWithContext(context.Background())
}

func (i *expirationPolicyPtrType) ToExpirationPolicyPtrOutputWithContext(ctx context.Context) ExpirationPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExpirationPolicyPtrOutput)
}

// A policy that specifies the conditions for resource expiration (i.e., automatic resource deletion).
type ExpirationPolicyOutput struct{ *pulumi.OutputState }

func (ExpirationPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExpirationPolicy)(nil)).Elem()
}

func (o ExpirationPolicyOutput) ToExpirationPolicyOutput() ExpirationPolicyOutput {
	return o
}

func (o ExpirationPolicyOutput) ToExpirationPolicyOutputWithContext(ctx context.Context) ExpirationPolicyOutput {
	return o
}

func (o ExpirationPolicyOutput) ToExpirationPolicyPtrOutput() ExpirationPolicyPtrOutput {
	return o.ToExpirationPolicyPtrOutputWithContext(context.Background())
}

func (o ExpirationPolicyOutput) ToExpirationPolicyPtrOutputWithContext(ctx context.Context) ExpirationPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExpirationPolicy) *ExpirationPolicy {
		return &v
	}).(ExpirationPolicyPtrOutput)
}

// Specifies the "time-to-live" duration for an associated resource. The resource expires if it is not active for a period of `ttl`. The definition of "activity" depends on the type of the associated resource. The minimum and maximum allowed values for `ttl` depend on the type of the associated resource, as well. If `ttl` is not set, the associated resource never expires.
func (o ExpirationPolicyOutput) Ttl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExpirationPolicy) *string { return v.Ttl }).(pulumi.StringPtrOutput)
}

type ExpirationPolicyPtrOutput struct{ *pulumi.OutputState }

func (ExpirationPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExpirationPolicy)(nil)).Elem()
}

func (o ExpirationPolicyPtrOutput) ToExpirationPolicyPtrOutput() ExpirationPolicyPtrOutput {
	return o
}

func (o ExpirationPolicyPtrOutput) ToExpirationPolicyPtrOutputWithContext(ctx context.Context) ExpirationPolicyPtrOutput {
	return o
}

func (o ExpirationPolicyPtrOutput) Elem() ExpirationPolicyOutput {
	return o.ApplyT(func(v *ExpirationPolicy) ExpirationPolicy {
		if v != nil {
			return *v
		}
		var ret ExpirationPolicy
		return ret
	}).(ExpirationPolicyOutput)
}

// Specifies the "time-to-live" duration for an associated resource. The resource expires if it is not active for a period of `ttl`. The definition of "activity" depends on the type of the associated resource. The minimum and maximum allowed values for `ttl` depend on the type of the associated resource, as well. If `ttl` is not set, the associated resource never expires.
func (o ExpirationPolicyPtrOutput) Ttl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExpirationPolicy) *string {
		if v == nil {
			return nil
		}
		return v.Ttl
	}).(pulumi.StringPtrOutput)
}

// A policy that specifies the conditions for resource expiration (i.e., automatic resource deletion).
type ExpirationPolicyResponse struct {
	// Specifies the "time-to-live" duration for an associated resource. The resource expires if it is not active for a period of `ttl`. The definition of "activity" depends on the type of the associated resource. The minimum and maximum allowed values for `ttl` depend on the type of the associated resource, as well. If `ttl` is not set, the associated resource never expires.
	Ttl string `pulumi:"ttl"`
}

// A policy that specifies the conditions for resource expiration (i.e., automatic resource deletion).
type ExpirationPolicyResponseOutput struct{ *pulumi.OutputState }

func (ExpirationPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExpirationPolicyResponse)(nil)).Elem()
}

func (o ExpirationPolicyResponseOutput) ToExpirationPolicyResponseOutput() ExpirationPolicyResponseOutput {
	return o
}

func (o ExpirationPolicyResponseOutput) ToExpirationPolicyResponseOutputWithContext(ctx context.Context) ExpirationPolicyResponseOutput {
	return o
}

// Specifies the "time-to-live" duration for an associated resource. The resource expires if it is not active for a period of `ttl`. The definition of "activity" depends on the type of the associated resource. The minimum and maximum allowed values for `ttl` depend on the type of the associated resource, as well. If `ttl` is not set, the associated resource never expires.
func (o ExpirationPolicyResponseOutput) Ttl() pulumi.StringOutput {
	return o.ApplyT(func(v ExpirationPolicyResponse) string { return v.Ttl }).(pulumi.StringOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//	ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//	        ExprArgs{...}
//
//	or:
//
//	        nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr {
		if v != nil {
			return *v
		}
		var ret Expr
		return ret
	}).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponse struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title string `pulumi:"title"`
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseOutput struct{ *pulumi.OutputState }

func (ExprResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (o ExprResponseOutput) ToExprResponseOutput() ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return o
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Title }).(pulumi.StringOutput)
}

// A policy constraining the storage of messages published to the topic.
type MessageStoragePolicy struct {
	// A list of IDs of GCP regions where messages that are published to the topic may be persisted in storage. Messages published by publishers running in non-allowed GCP regions (or running outside of GCP altogether) will be routed for storage in one of the allowed regions. An empty list means that no regions are allowed, and is not a valid configuration.
	AllowedPersistenceRegions []string `pulumi:"allowedPersistenceRegions"`
}

// MessageStoragePolicyInput is an input type that accepts MessageStoragePolicyArgs and MessageStoragePolicyOutput values.
// You can construct a concrete instance of `MessageStoragePolicyInput` via:
//
//	MessageStoragePolicyArgs{...}
type MessageStoragePolicyInput interface {
	pulumi.Input

	ToMessageStoragePolicyOutput() MessageStoragePolicyOutput
	ToMessageStoragePolicyOutputWithContext(context.Context) MessageStoragePolicyOutput
}

// A policy constraining the storage of messages published to the topic.
type MessageStoragePolicyArgs struct {
	// A list of IDs of GCP regions where messages that are published to the topic may be persisted in storage. Messages published by publishers running in non-allowed GCP regions (or running outside of GCP altogether) will be routed for storage in one of the allowed regions. An empty list means that no regions are allowed, and is not a valid configuration.
	AllowedPersistenceRegions pulumi.StringArrayInput `pulumi:"allowedPersistenceRegions"`
}

func (MessageStoragePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MessageStoragePolicy)(nil)).Elem()
}

func (i MessageStoragePolicyArgs) ToMessageStoragePolicyOutput() MessageStoragePolicyOutput {
	return i.ToMessageStoragePolicyOutputWithContext(context.Background())
}

func (i MessageStoragePolicyArgs) ToMessageStoragePolicyOutputWithContext(ctx context.Context) MessageStoragePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MessageStoragePolicyOutput)
}

func (i MessageStoragePolicyArgs) ToMessageStoragePolicyPtrOutput() MessageStoragePolicyPtrOutput {
	return i.ToMessageStoragePolicyPtrOutputWithContext(context.Background())
}

func (i MessageStoragePolicyArgs) ToMessageStoragePolicyPtrOutputWithContext(ctx context.Context) MessageStoragePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MessageStoragePolicyOutput).ToMessageStoragePolicyPtrOutputWithContext(ctx)
}

// MessageStoragePolicyPtrInput is an input type that accepts MessageStoragePolicyArgs, MessageStoragePolicyPtr and MessageStoragePolicyPtrOutput values.
// You can construct a concrete instance of `MessageStoragePolicyPtrInput` via:
//
//	        MessageStoragePolicyArgs{...}
//
//	or:
//
//	        nil
type MessageStoragePolicyPtrInput interface {
	pulumi.Input

	ToMessageStoragePolicyPtrOutput() MessageStoragePolicyPtrOutput
	ToMessageStoragePolicyPtrOutputWithContext(context.Context) MessageStoragePolicyPtrOutput
}

type messageStoragePolicyPtrType MessageStoragePolicyArgs

func MessageStoragePolicyPtr(v *MessageStoragePolicyArgs) MessageStoragePolicyPtrInput {
	return (*messageStoragePolicyPtrType)(v)
}

func (*messageStoragePolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MessageStoragePolicy)(nil)).Elem()
}

func (i *messageStoragePolicyPtrType) ToMessageStoragePolicyPtrOutput() MessageStoragePolicyPtrOutput {
	return i.ToMessageStoragePolicyPtrOutputWithContext(context.Background())
}

func (i *messageStoragePolicyPtrType) ToMessageStoragePolicyPtrOutputWithContext(ctx context.Context) MessageStoragePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MessageStoragePolicyPtrOutput)
}

// A policy constraining the storage of messages published to the topic.
type MessageStoragePolicyOutput struct{ *pulumi.OutputState }

func (MessageStoragePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MessageStoragePolicy)(nil)).Elem()
}

func (o MessageStoragePolicyOutput) ToMessageStoragePolicyOutput() MessageStoragePolicyOutput {
	return o
}

func (o MessageStoragePolicyOutput) ToMessageStoragePolicyOutputWithContext(ctx context.Context) MessageStoragePolicyOutput {
	return o
}

func (o MessageStoragePolicyOutput) ToMessageStoragePolicyPtrOutput() MessageStoragePolicyPtrOutput {
	return o.ToMessageStoragePolicyPtrOutputWithContext(context.Background())
}

func (o MessageStoragePolicyOutput) ToMessageStoragePolicyPtrOutputWithContext(ctx context.Context) MessageStoragePolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MessageStoragePolicy) *MessageStoragePolicy {
		return &v
	}).(MessageStoragePolicyPtrOutput)
}

// A list of IDs of GCP regions where messages that are published to the topic may be persisted in storage. Messages published by publishers running in non-allowed GCP regions (or running outside of GCP altogether) will be routed for storage in one of the allowed regions. An empty list means that no regions are allowed, and is not a valid configuration.
func (o MessageStoragePolicyOutput) AllowedPersistenceRegions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MessageStoragePolicy) []string { return v.AllowedPersistenceRegions }).(pulumi.StringArrayOutput)
}

type MessageStoragePolicyPtrOutput struct{ *pulumi.OutputState }

func (MessageStoragePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MessageStoragePolicy)(nil)).Elem()
}

func (o MessageStoragePolicyPtrOutput) ToMessageStoragePolicyPtrOutput() MessageStoragePolicyPtrOutput {
	return o
}

func (o MessageStoragePolicyPtrOutput) ToMessageStoragePolicyPtrOutputWithContext(ctx context.Context) MessageStoragePolicyPtrOutput {
	return o
}

func (o MessageStoragePolicyPtrOutput) Elem() MessageStoragePolicyOutput {
	return o.ApplyT(func(v *MessageStoragePolicy) MessageStoragePolicy {
		if v != nil {
			return *v
		}
		var ret MessageStoragePolicy
		return ret
	}).(MessageStoragePolicyOutput)
}

// A list of IDs of GCP regions where messages that are published to the topic may be persisted in storage. Messages published by publishers running in non-allowed GCP regions (or running outside of GCP altogether) will be routed for storage in one of the allowed regions. An empty list means that no regions are allowed, and is not a valid configuration.
func (o MessageStoragePolicyPtrOutput) AllowedPersistenceRegions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MessageStoragePolicy) []string {
		if v == nil {
			return nil
		}
		return v.AllowedPersistenceRegions
	}).(pulumi.StringArrayOutput)
}

// A policy constraining the storage of messages published to the topic.
type MessageStoragePolicyResponse struct {
	// A list of IDs of GCP regions where messages that are published to the topic may be persisted in storage. Messages published by publishers running in non-allowed GCP regions (or running outside of GCP altogether) will be routed for storage in one of the allowed regions. An empty list means that no regions are allowed, and is not a valid configuration.
	AllowedPersistenceRegions []string `pulumi:"allowedPersistenceRegions"`
}

// A policy constraining the storage of messages published to the topic.
type MessageStoragePolicyResponseOutput struct{ *pulumi.OutputState }

func (MessageStoragePolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MessageStoragePolicyResponse)(nil)).Elem()
}

func (o MessageStoragePolicyResponseOutput) ToMessageStoragePolicyResponseOutput() MessageStoragePolicyResponseOutput {
	return o
}

func (o MessageStoragePolicyResponseOutput) ToMessageStoragePolicyResponseOutputWithContext(ctx context.Context) MessageStoragePolicyResponseOutput {
	return o
}

// A list of IDs of GCP regions where messages that are published to the topic may be persisted in storage. Messages published by publishers running in non-allowed GCP regions (or running outside of GCP altogether) will be routed for storage in one of the allowed regions. An empty list means that no regions are allowed, and is not a valid configuration.
func (o MessageStoragePolicyResponseOutput) AllowedPersistenceRegions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MessageStoragePolicyResponse) []string { return v.AllowedPersistenceRegions }).(pulumi.StringArrayOutput)
}

// Contains information needed for generating an [OpenID Connect token](https://developers.google.com/identity/protocols/OpenIDConnect). [Service account email](https://cloud.google.com/iam/docs/service-accounts) used for generating the OIDC token. For more information on setting up authentication, see [Push subscriptions](https://cloud.google.com/pubsub/docs/push).
type OidcToken struct {
	// Audience to be used when generating OIDC token. The audience claim identifies the recipients that the JWT is intended for. The audience value is a single case-sensitive string. Having multiple values (array) for the audience field is not supported. More info about the OIDC JWT token audience here: https://tools.ietf.org/html/rfc7519#section-4.1.3 Note: if not specified, the Push endpoint URL will be used.
	Audience            *string `pulumi:"audience"`
	ServiceAccountEmail *string `pulumi:"serviceAccountEmail"`
}

// OidcTokenInput is an input type that accepts OidcTokenArgs and OidcTokenOutput values.
// You can construct a concrete instance of `OidcTokenInput` via:
//
//	OidcTokenArgs{...}
type OidcTokenInput interface {
	pulumi.Input

	ToOidcTokenOutput() OidcTokenOutput
	ToOidcTokenOutputWithContext(context.Context) OidcTokenOutput
}

// Contains information needed for generating an [OpenID Connect token](https://developers.google.com/identity/protocols/OpenIDConnect). [Service account email](https://cloud.google.com/iam/docs/service-accounts) used for generating the OIDC token. For more information on setting up authentication, see [Push subscriptions](https://cloud.google.com/pubsub/docs/push).
type OidcTokenArgs struct {
	// Audience to be used when generating OIDC token. The audience claim identifies the recipients that the JWT is intended for. The audience value is a single case-sensitive string. Having multiple values (array) for the audience field is not supported. More info about the OIDC JWT token audience here: https://tools.ietf.org/html/rfc7519#section-4.1.3 Note: if not specified, the Push endpoint URL will be used.
	Audience            pulumi.StringPtrInput `pulumi:"audience"`
	ServiceAccountEmail pulumi.StringPtrInput `pulumi:"serviceAccountEmail"`
}

func (OidcTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OidcToken)(nil)).Elem()
}

func (i OidcTokenArgs) ToOidcTokenOutput() OidcTokenOutput {
	return i.ToOidcTokenOutputWithContext(context.Background())
}

func (i OidcTokenArgs) ToOidcTokenOutputWithContext(ctx context.Context) OidcTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OidcTokenOutput)
}

func (i OidcTokenArgs) ToOidcTokenPtrOutput() OidcTokenPtrOutput {
	return i.ToOidcTokenPtrOutputWithContext(context.Background())
}

func (i OidcTokenArgs) ToOidcTokenPtrOutputWithContext(ctx context.Context) OidcTokenPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OidcTokenOutput).ToOidcTokenPtrOutputWithContext(ctx)
}

// OidcTokenPtrInput is an input type that accepts OidcTokenArgs, OidcTokenPtr and OidcTokenPtrOutput values.
// You can construct a concrete instance of `OidcTokenPtrInput` via:
//
//	        OidcTokenArgs{...}
//
//	or:
//
//	        nil
type OidcTokenPtrInput interface {
	pulumi.Input

	ToOidcTokenPtrOutput() OidcTokenPtrOutput
	ToOidcTokenPtrOutputWithContext(context.Context) OidcTokenPtrOutput
}

type oidcTokenPtrType OidcTokenArgs

func OidcTokenPtr(v *OidcTokenArgs) OidcTokenPtrInput {
	return (*oidcTokenPtrType)(v)
}

func (*oidcTokenPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OidcToken)(nil)).Elem()
}

func (i *oidcTokenPtrType) ToOidcTokenPtrOutput() OidcTokenPtrOutput {
	return i.ToOidcTokenPtrOutputWithContext(context.Background())
}

func (i *oidcTokenPtrType) ToOidcTokenPtrOutputWithContext(ctx context.Context) OidcTokenPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OidcTokenPtrOutput)
}

// Contains information needed for generating an [OpenID Connect token](https://developers.google.com/identity/protocols/OpenIDConnect). [Service account email](https://cloud.google.com/iam/docs/service-accounts) used for generating the OIDC token. For more information on setting up authentication, see [Push subscriptions](https://cloud.google.com/pubsub/docs/push).
type OidcTokenOutput struct{ *pulumi.OutputState }

func (OidcTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OidcToken)(nil)).Elem()
}

func (o OidcTokenOutput) ToOidcTokenOutput() OidcTokenOutput {
	return o
}

func (o OidcTokenOutput) ToOidcTokenOutputWithContext(ctx context.Context) OidcTokenOutput {
	return o
}

func (o OidcTokenOutput) ToOidcTokenPtrOutput() OidcTokenPtrOutput {
	return o.ToOidcTokenPtrOutputWithContext(context.Background())
}

func (o OidcTokenOutput) ToOidcTokenPtrOutputWithContext(ctx context.Context) OidcTokenPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OidcToken) *OidcToken {
		return &v
	}).(OidcTokenPtrOutput)
}

// Audience to be used when generating OIDC token. The audience claim identifies the recipients that the JWT is intended for. The audience value is a single case-sensitive string. Having multiple values (array) for the audience field is not supported. More info about the OIDC JWT token audience here: https://tools.ietf.org/html/rfc7519#section-4.1.3 Note: if not specified, the Push endpoint URL will be used.
func (o OidcTokenOutput) Audience() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OidcToken) *string { return v.Audience }).(pulumi.StringPtrOutput)
}

func (o OidcTokenOutput) ServiceAccountEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OidcToken) *string { return v.ServiceAccountEmail }).(pulumi.StringPtrOutput)
}

type OidcTokenPtrOutput struct{ *pulumi.OutputState }

func (OidcTokenPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OidcToken)(nil)).Elem()
}

func (o OidcTokenPtrOutput) ToOidcTokenPtrOutput() OidcTokenPtrOutput {
	return o
}

func (o OidcTokenPtrOutput) ToOidcTokenPtrOutputWithContext(ctx context.Context) OidcTokenPtrOutput {
	return o
}

func (o OidcTokenPtrOutput) Elem() OidcTokenOutput {
	return o.ApplyT(func(v *OidcToken) OidcToken {
		if v != nil {
			return *v
		}
		var ret OidcToken
		return ret
	}).(OidcTokenOutput)
}

// Audience to be used when generating OIDC token. The audience claim identifies the recipients that the JWT is intended for. The audience value is a single case-sensitive string. Having multiple values (array) for the audience field is not supported. More info about the OIDC JWT token audience here: https://tools.ietf.org/html/rfc7519#section-4.1.3 Note: if not specified, the Push endpoint URL will be used.
func (o OidcTokenPtrOutput) Audience() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OidcToken) *string {
		if v == nil {
			return nil
		}
		return v.Audience
	}).(pulumi.StringPtrOutput)
}

func (o OidcTokenPtrOutput) ServiceAccountEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OidcToken) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccountEmail
	}).(pulumi.StringPtrOutput)
}

// Contains information needed for generating an [OpenID Connect token](https://developers.google.com/identity/protocols/OpenIDConnect). [Service account email](https://cloud.google.com/iam/docs/service-accounts) used for generating the OIDC token. For more information on setting up authentication, see [Push subscriptions](https://cloud.google.com/pubsub/docs/push).
type OidcTokenResponse struct {
	// Audience to be used when generating OIDC token. The audience claim identifies the recipients that the JWT is intended for. The audience value is a single case-sensitive string. Having multiple values (array) for the audience field is not supported. More info about the OIDC JWT token audience here: https://tools.ietf.org/html/rfc7519#section-4.1.3 Note: if not specified, the Push endpoint URL will be used.
	Audience            string `pulumi:"audience"`
	ServiceAccountEmail string `pulumi:"serviceAccountEmail"`
}

// Contains information needed for generating an [OpenID Connect token](https://developers.google.com/identity/protocols/OpenIDConnect). [Service account email](https://cloud.google.com/iam/docs/service-accounts) used for generating the OIDC token. For more information on setting up authentication, see [Push subscriptions](https://cloud.google.com/pubsub/docs/push).
type OidcTokenResponseOutput struct{ *pulumi.OutputState }

func (OidcTokenResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OidcTokenResponse)(nil)).Elem()
}

func (o OidcTokenResponseOutput) ToOidcTokenResponseOutput() OidcTokenResponseOutput {
	return o
}

func (o OidcTokenResponseOutput) ToOidcTokenResponseOutputWithContext(ctx context.Context) OidcTokenResponseOutput {
	return o
}

// Audience to be used when generating OIDC token. The audience claim identifies the recipients that the JWT is intended for. The audience value is a single case-sensitive string. Having multiple values (array) for the audience field is not supported. More info about the OIDC JWT token audience here: https://tools.ietf.org/html/rfc7519#section-4.1.3 Note: if not specified, the Push endpoint URL will be used.
func (o OidcTokenResponseOutput) Audience() pulumi.StringOutput {
	return o.ApplyT(func(v OidcTokenResponse) string { return v.Audience }).(pulumi.StringOutput)
}

func (o OidcTokenResponseOutput) ServiceAccountEmail() pulumi.StringOutput {
	return o.ApplyT(func(v OidcTokenResponse) string { return v.ServiceAccountEmail }).(pulumi.StringOutput)
}

// Configuration for a push delivery endpoint.
type PushConfig struct {
	// Endpoint configuration attributes that can be used to control different aspects of the message delivery. The only currently supported attribute is `x-goog-version`, which you can use to change the format of the pushed message. This attribute indicates the version of the data expected by the endpoint. This controls the shape of the pushed message (i.e., its fields and metadata). If not present during the `CreateSubscription` call, it will default to the version of the Pub/Sub API used to make such call. If not present in a `ModifyPushConfig` call, its value will not be changed. `GetSubscription` calls will always return a valid version, even if the subscription was created without this attribute. The only supported values for the `x-goog-version` attribute are: * `v1beta1`: uses the push format defined in the v1beta1 Pub/Sub API. * `v1` or `v1beta2`: uses the push format defined in the v1 Pub/Sub API. For example: attributes { "x-goog-version": "v1" }
	Attributes map[string]string `pulumi:"attributes"`
	// If specified, Pub/Sub will generate and attach an OIDC JWT token as an `Authorization` header in the HTTP request for every pushed message.
	OidcToken *OidcToken `pulumi:"oidcToken"`
	// A URL locating the endpoint to which messages should be pushed. For example, a Webhook endpoint might use `https://example.com/push`.
	PushEndpoint *string `pulumi:"pushEndpoint"`
}

// PushConfigInput is an input type that accepts PushConfigArgs and PushConfigOutput values.
// You can construct a concrete instance of `PushConfigInput` via:
//
//	PushConfigArgs{...}
type PushConfigInput interface {
	pulumi.Input

	ToPushConfigOutput() PushConfigOutput
	ToPushConfigOutputWithContext(context.Context) PushConfigOutput
}

// Configuration for a push delivery endpoint.
type PushConfigArgs struct {
	// Endpoint configuration attributes that can be used to control different aspects of the message delivery. The only currently supported attribute is `x-goog-version`, which you can use to change the format of the pushed message. This attribute indicates the version of the data expected by the endpoint. This controls the shape of the pushed message (i.e., its fields and metadata). If not present during the `CreateSubscription` call, it will default to the version of the Pub/Sub API used to make such call. If not present in a `ModifyPushConfig` call, its value will not be changed. `GetSubscription` calls will always return a valid version, even if the subscription was created without this attribute. The only supported values for the `x-goog-version` attribute are: * `v1beta1`: uses the push format defined in the v1beta1 Pub/Sub API. * `v1` or `v1beta2`: uses the push format defined in the v1 Pub/Sub API. For example: attributes { "x-goog-version": "v1" }
	Attributes pulumi.StringMapInput `pulumi:"attributes"`
	// If specified, Pub/Sub will generate and attach an OIDC JWT token as an `Authorization` header in the HTTP request for every pushed message.
	OidcToken OidcTokenPtrInput `pulumi:"oidcToken"`
	// A URL locating the endpoint to which messages should be pushed. For example, a Webhook endpoint might use `https://example.com/push`.
	PushEndpoint pulumi.StringPtrInput `pulumi:"pushEndpoint"`
}

func (PushConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PushConfig)(nil)).Elem()
}

func (i PushConfigArgs) ToPushConfigOutput() PushConfigOutput {
	return i.ToPushConfigOutputWithContext(context.Background())
}

func (i PushConfigArgs) ToPushConfigOutputWithContext(ctx context.Context) PushConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PushConfigOutput)
}

func (i PushConfigArgs) ToPushConfigPtrOutput() PushConfigPtrOutput {
	return i.ToPushConfigPtrOutputWithContext(context.Background())
}

func (i PushConfigArgs) ToPushConfigPtrOutputWithContext(ctx context.Context) PushConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PushConfigOutput).ToPushConfigPtrOutputWithContext(ctx)
}

// PushConfigPtrInput is an input type that accepts PushConfigArgs, PushConfigPtr and PushConfigPtrOutput values.
// You can construct a concrete instance of `PushConfigPtrInput` via:
//
//	        PushConfigArgs{...}
//
//	or:
//
//	        nil
type PushConfigPtrInput interface {
	pulumi.Input

	ToPushConfigPtrOutput() PushConfigPtrOutput
	ToPushConfigPtrOutputWithContext(context.Context) PushConfigPtrOutput
}

type pushConfigPtrType PushConfigArgs

func PushConfigPtr(v *PushConfigArgs) PushConfigPtrInput {
	return (*pushConfigPtrType)(v)
}

func (*pushConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PushConfig)(nil)).Elem()
}

func (i *pushConfigPtrType) ToPushConfigPtrOutput() PushConfigPtrOutput {
	return i.ToPushConfigPtrOutputWithContext(context.Background())
}

func (i *pushConfigPtrType) ToPushConfigPtrOutputWithContext(ctx context.Context) PushConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PushConfigPtrOutput)
}

// Configuration for a push delivery endpoint.
type PushConfigOutput struct{ *pulumi.OutputState }

func (PushConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PushConfig)(nil)).Elem()
}

func (o PushConfigOutput) ToPushConfigOutput() PushConfigOutput {
	return o
}

func (o PushConfigOutput) ToPushConfigOutputWithContext(ctx context.Context) PushConfigOutput {
	return o
}

func (o PushConfigOutput) ToPushConfigPtrOutput() PushConfigPtrOutput {
	return o.ToPushConfigPtrOutputWithContext(context.Background())
}

func (o PushConfigOutput) ToPushConfigPtrOutputWithContext(ctx context.Context) PushConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PushConfig) *PushConfig {
		return &v
	}).(PushConfigPtrOutput)
}

// Endpoint configuration attributes that can be used to control different aspects of the message delivery. The only currently supported attribute is `x-goog-version`, which you can use to change the format of the pushed message. This attribute indicates the version of the data expected by the endpoint. This controls the shape of the pushed message (i.e., its fields and metadata). If not present during the `CreateSubscription` call, it will default to the version of the Pub/Sub API used to make such call. If not present in a `ModifyPushConfig` call, its value will not be changed. `GetSubscription` calls will always return a valid version, even if the subscription was created without this attribute. The only supported values for the `x-goog-version` attribute are: * `v1beta1`: uses the push format defined in the v1beta1 Pub/Sub API. * `v1` or `v1beta2`: uses the push format defined in the v1 Pub/Sub API. For example: attributes { "x-goog-version": "v1" }
func (o PushConfigOutput) Attributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v PushConfig) map[string]string { return v.Attributes }).(pulumi.StringMapOutput)
}

// If specified, Pub/Sub will generate and attach an OIDC JWT token as an `Authorization` header in the HTTP request for every pushed message.
func (o PushConfigOutput) OidcToken() OidcTokenPtrOutput {
	return o.ApplyT(func(v PushConfig) *OidcToken { return v.OidcToken }).(OidcTokenPtrOutput)
}

// A URL locating the endpoint to which messages should be pushed. For example, a Webhook endpoint might use `https://example.com/push`.
func (o PushConfigOutput) PushEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PushConfig) *string { return v.PushEndpoint }).(pulumi.StringPtrOutput)
}

type PushConfigPtrOutput struct{ *pulumi.OutputState }

func (PushConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PushConfig)(nil)).Elem()
}

func (o PushConfigPtrOutput) ToPushConfigPtrOutput() PushConfigPtrOutput {
	return o
}

func (o PushConfigPtrOutput) ToPushConfigPtrOutputWithContext(ctx context.Context) PushConfigPtrOutput {
	return o
}

func (o PushConfigPtrOutput) Elem() PushConfigOutput {
	return o.ApplyT(func(v *PushConfig) PushConfig {
		if v != nil {
			return *v
		}
		var ret PushConfig
		return ret
	}).(PushConfigOutput)
}

// Endpoint configuration attributes that can be used to control different aspects of the message delivery. The only currently supported attribute is `x-goog-version`, which you can use to change the format of the pushed message. This attribute indicates the version of the data expected by the endpoint. This controls the shape of the pushed message (i.e., its fields and metadata). If not present during the `CreateSubscription` call, it will default to the version of the Pub/Sub API used to make such call. If not present in a `ModifyPushConfig` call, its value will not be changed. `GetSubscription` calls will always return a valid version, even if the subscription was created without this attribute. The only supported values for the `x-goog-version` attribute are: * `v1beta1`: uses the push format defined in the v1beta1 Pub/Sub API. * `v1` or `v1beta2`: uses the push format defined in the v1 Pub/Sub API. For example: attributes { "x-goog-version": "v1" }
func (o PushConfigPtrOutput) Attributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PushConfig) map[string]string {
		if v == nil {
			return nil
		}
		return v.Attributes
	}).(pulumi.StringMapOutput)
}

// If specified, Pub/Sub will generate and attach an OIDC JWT token as an `Authorization` header in the HTTP request for every pushed message.
func (o PushConfigPtrOutput) OidcToken() OidcTokenPtrOutput {
	return o.ApplyT(func(v *PushConfig) *OidcToken {
		if v == nil {
			return nil
		}
		return v.OidcToken
	}).(OidcTokenPtrOutput)
}

// A URL locating the endpoint to which messages should be pushed. For example, a Webhook endpoint might use `https://example.com/push`.
func (o PushConfigPtrOutput) PushEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PushConfig) *string {
		if v == nil {
			return nil
		}
		return v.PushEndpoint
	}).(pulumi.StringPtrOutput)
}

// Configuration for a push delivery endpoint.
type PushConfigResponse struct {
	// Endpoint configuration attributes that can be used to control different aspects of the message delivery. The only currently supported attribute is `x-goog-version`, which you can use to change the format of the pushed message. This attribute indicates the version of the data expected by the endpoint. This controls the shape of the pushed message (i.e., its fields and metadata). If not present during the `CreateSubscription` call, it will default to the version of the Pub/Sub API used to make such call. If not present in a `ModifyPushConfig` call, its value will not be changed. `GetSubscription` calls will always return a valid version, even if the subscription was created without this attribute. The only supported values for the `x-goog-version` attribute are: * `v1beta1`: uses the push format defined in the v1beta1 Pub/Sub API. * `v1` or `v1beta2`: uses the push format defined in the v1 Pub/Sub API. For example: attributes { "x-goog-version": "v1" }
	Attributes map[string]string `pulumi:"attributes"`
	// If specified, Pub/Sub will generate and attach an OIDC JWT token as an `Authorization` header in the HTTP request for every pushed message.
	OidcToken OidcTokenResponse `pulumi:"oidcToken"`
	// A URL locating the endpoint to which messages should be pushed. For example, a Webhook endpoint might use `https://example.com/push`.
	PushEndpoint string `pulumi:"pushEndpoint"`
}

// Configuration for a push delivery endpoint.
type PushConfigResponseOutput struct{ *pulumi.OutputState }

func (PushConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PushConfigResponse)(nil)).Elem()
}

func (o PushConfigResponseOutput) ToPushConfigResponseOutput() PushConfigResponseOutput {
	return o
}

func (o PushConfigResponseOutput) ToPushConfigResponseOutputWithContext(ctx context.Context) PushConfigResponseOutput {
	return o
}

// Endpoint configuration attributes that can be used to control different aspects of the message delivery. The only currently supported attribute is `x-goog-version`, which you can use to change the format of the pushed message. This attribute indicates the version of the data expected by the endpoint. This controls the shape of the pushed message (i.e., its fields and metadata). If not present during the `CreateSubscription` call, it will default to the version of the Pub/Sub API used to make such call. If not present in a `ModifyPushConfig` call, its value will not be changed. `GetSubscription` calls will always return a valid version, even if the subscription was created without this attribute. The only supported values for the `x-goog-version` attribute are: * `v1beta1`: uses the push format defined in the v1beta1 Pub/Sub API. * `v1` or `v1beta2`: uses the push format defined in the v1 Pub/Sub API. For example: attributes { "x-goog-version": "v1" }
func (o PushConfigResponseOutput) Attributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v PushConfigResponse) map[string]string { return v.Attributes }).(pulumi.StringMapOutput)
}

// If specified, Pub/Sub will generate and attach an OIDC JWT token as an `Authorization` header in the HTTP request for every pushed message.
func (o PushConfigResponseOutput) OidcToken() OidcTokenResponseOutput {
	return o.ApplyT(func(v PushConfigResponse) OidcTokenResponse { return v.OidcToken }).(OidcTokenResponseOutput)
}

// A URL locating the endpoint to which messages should be pushed. For example, a Webhook endpoint might use `https://example.com/push`.
func (o PushConfigResponseOutput) PushEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v PushConfigResponse) string { return v.PushEndpoint }).(pulumi.StringOutput)
}

// A policy that specifies how Cloud Pub/Sub retries message delivery. Retry delay will be exponential based on provided minimum and maximum backoffs. https://en.wikipedia.org/wiki/Exponential_backoff. RetryPolicy will be triggered on NACKs or acknowledgement deadline exceeded events for a given message. Retry Policy is implemented on a best effort basis. At times, the delay between consecutive deliveries may not match the configuration. That is, delay can be more or less than configured backoff.
type RetryPolicy struct {
	// The maximum delay between consecutive deliveries of a given message. Value should be between 0 and 600 seconds. Defaults to 600 seconds.
	MaximumBackoff *string `pulumi:"maximumBackoff"`
	// The minimum delay between consecutive deliveries of a given message. Value should be between 0 and 600 seconds. Defaults to 10 seconds.
	MinimumBackoff *string `pulumi:"minimumBackoff"`
}

// RetryPolicyInput is an input type that accepts RetryPolicyArgs and RetryPolicyOutput values.
// You can construct a concrete instance of `RetryPolicyInput` via:
//
//	RetryPolicyArgs{...}
type RetryPolicyInput interface {
	pulumi.Input

	ToRetryPolicyOutput() RetryPolicyOutput
	ToRetryPolicyOutputWithContext(context.Context) RetryPolicyOutput
}

// A policy that specifies how Cloud Pub/Sub retries message delivery. Retry delay will be exponential based on provided minimum and maximum backoffs. https://en.wikipedia.org/wiki/Exponential_backoff. RetryPolicy will be triggered on NACKs or acknowledgement deadline exceeded events for a given message. Retry Policy is implemented on a best effort basis. At times, the delay between consecutive deliveries may not match the configuration. That is, delay can be more or less than configured backoff.
type RetryPolicyArgs struct {
	// The maximum delay between consecutive deliveries of a given message. Value should be between 0 and 600 seconds. Defaults to 600 seconds.
	MaximumBackoff pulumi.StringPtrInput `pulumi:"maximumBackoff"`
	// The minimum delay between consecutive deliveries of a given message. Value should be between 0 and 600 seconds. Defaults to 10 seconds.
	MinimumBackoff pulumi.StringPtrInput `pulumi:"minimumBackoff"`
}

func (RetryPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RetryPolicy)(nil)).Elem()
}

func (i RetryPolicyArgs) ToRetryPolicyOutput() RetryPolicyOutput {
	return i.ToRetryPolicyOutputWithContext(context.Background())
}

func (i RetryPolicyArgs) ToRetryPolicyOutputWithContext(ctx context.Context) RetryPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryPolicyOutput)
}

func (i RetryPolicyArgs) ToRetryPolicyPtrOutput() RetryPolicyPtrOutput {
	return i.ToRetryPolicyPtrOutputWithContext(context.Background())
}

func (i RetryPolicyArgs) ToRetryPolicyPtrOutputWithContext(ctx context.Context) RetryPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryPolicyOutput).ToRetryPolicyPtrOutputWithContext(ctx)
}

// RetryPolicyPtrInput is an input type that accepts RetryPolicyArgs, RetryPolicyPtr and RetryPolicyPtrOutput values.
// You can construct a concrete instance of `RetryPolicyPtrInput` via:
//
//	        RetryPolicyArgs{...}
//
//	or:
//
//	        nil
type RetryPolicyPtrInput interface {
	pulumi.Input

	ToRetryPolicyPtrOutput() RetryPolicyPtrOutput
	ToRetryPolicyPtrOutputWithContext(context.Context) RetryPolicyPtrOutput
}

type retryPolicyPtrType RetryPolicyArgs

func RetryPolicyPtr(v *RetryPolicyArgs) RetryPolicyPtrInput {
	return (*retryPolicyPtrType)(v)
}

func (*retryPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RetryPolicy)(nil)).Elem()
}

func (i *retryPolicyPtrType) ToRetryPolicyPtrOutput() RetryPolicyPtrOutput {
	return i.ToRetryPolicyPtrOutputWithContext(context.Background())
}

func (i *retryPolicyPtrType) ToRetryPolicyPtrOutputWithContext(ctx context.Context) RetryPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryPolicyPtrOutput)
}

// A policy that specifies how Cloud Pub/Sub retries message delivery. Retry delay will be exponential based on provided minimum and maximum backoffs. https://en.wikipedia.org/wiki/Exponential_backoff. RetryPolicy will be triggered on NACKs or acknowledgement deadline exceeded events for a given message. Retry Policy is implemented on a best effort basis. At times, the delay between consecutive deliveries may not match the configuration. That is, delay can be more or less than configured backoff.
type RetryPolicyOutput struct{ *pulumi.OutputState }

func (RetryPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RetryPolicy)(nil)).Elem()
}

func (o RetryPolicyOutput) ToRetryPolicyOutput() RetryPolicyOutput {
	return o
}

func (o RetryPolicyOutput) ToRetryPolicyOutputWithContext(ctx context.Context) RetryPolicyOutput {
	return o
}

func (o RetryPolicyOutput) ToRetryPolicyPtrOutput() RetryPolicyPtrOutput {
	return o.ToRetryPolicyPtrOutputWithContext(context.Background())
}

func (o RetryPolicyOutput) ToRetryPolicyPtrOutputWithContext(ctx context.Context) RetryPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RetryPolicy) *RetryPolicy {
		return &v
	}).(RetryPolicyPtrOutput)
}

// The maximum delay between consecutive deliveries of a given message. Value should be between 0 and 600 seconds. Defaults to 600 seconds.
func (o RetryPolicyOutput) MaximumBackoff() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RetryPolicy) *string { return v.MaximumBackoff }).(pulumi.StringPtrOutput)
}

// The minimum delay between consecutive deliveries of a given message. Value should be between 0 and 600 seconds. Defaults to 10 seconds.
func (o RetryPolicyOutput) MinimumBackoff() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RetryPolicy) *string { return v.MinimumBackoff }).(pulumi.StringPtrOutput)
}

type RetryPolicyPtrOutput struct{ *pulumi.OutputState }

func (RetryPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RetryPolicy)(nil)).Elem()
}

func (o RetryPolicyPtrOutput) ToRetryPolicyPtrOutput() RetryPolicyPtrOutput {
	return o
}

func (o RetryPolicyPtrOutput) ToRetryPolicyPtrOutputWithContext(ctx context.Context) RetryPolicyPtrOutput {
	return o
}

func (o RetryPolicyPtrOutput) Elem() RetryPolicyOutput {
	return o.ApplyT(func(v *RetryPolicy) RetryPolicy {
		if v != nil {
			return *v
		}
		var ret RetryPolicy
		return ret
	}).(RetryPolicyOutput)
}

// The maximum delay between consecutive deliveries of a given message. Value should be between 0 and 600 seconds. Defaults to 600 seconds.
func (o RetryPolicyPtrOutput) MaximumBackoff() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RetryPolicy) *string {
		if v == nil {
			return nil
		}
		return v.MaximumBackoff
	}).(pulumi.StringPtrOutput)
}

// The minimum delay between consecutive deliveries of a given message. Value should be between 0 and 600 seconds. Defaults to 10 seconds.
func (o RetryPolicyPtrOutput) MinimumBackoff() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RetryPolicy) *string {
		if v == nil {
			return nil
		}
		return v.MinimumBackoff
	}).(pulumi.StringPtrOutput)
}

// A policy that specifies how Cloud Pub/Sub retries message delivery. Retry delay will be exponential based on provided minimum and maximum backoffs. https://en.wikipedia.org/wiki/Exponential_backoff. RetryPolicy will be triggered on NACKs or acknowledgement deadline exceeded events for a given message. Retry Policy is implemented on a best effort basis. At times, the delay between consecutive deliveries may not match the configuration. That is, delay can be more or less than configured backoff.
type RetryPolicyResponse struct {
	// The maximum delay between consecutive deliveries of a given message. Value should be between 0 and 600 seconds. Defaults to 600 seconds.
	MaximumBackoff string `pulumi:"maximumBackoff"`
	// The minimum delay between consecutive deliveries of a given message. Value should be between 0 and 600 seconds. Defaults to 10 seconds.
	MinimumBackoff string `pulumi:"minimumBackoff"`
}

// A policy that specifies how Cloud Pub/Sub retries message delivery. Retry delay will be exponential based on provided minimum and maximum backoffs. https://en.wikipedia.org/wiki/Exponential_backoff. RetryPolicy will be triggered on NACKs or acknowledgement deadline exceeded events for a given message. Retry Policy is implemented on a best effort basis. At times, the delay between consecutive deliveries may not match the configuration. That is, delay can be more or less than configured backoff.
type RetryPolicyResponseOutput struct{ *pulumi.OutputState }

func (RetryPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RetryPolicyResponse)(nil)).Elem()
}

func (o RetryPolicyResponseOutput) ToRetryPolicyResponseOutput() RetryPolicyResponseOutput {
	return o
}

func (o RetryPolicyResponseOutput) ToRetryPolicyResponseOutputWithContext(ctx context.Context) RetryPolicyResponseOutput {
	return o
}

// The maximum delay between consecutive deliveries of a given message. Value should be between 0 and 600 seconds. Defaults to 600 seconds.
func (o RetryPolicyResponseOutput) MaximumBackoff() pulumi.StringOutput {
	return o.ApplyT(func(v RetryPolicyResponse) string { return v.MaximumBackoff }).(pulumi.StringOutput)
}

// The minimum delay between consecutive deliveries of a given message. Value should be between 0 and 600 seconds. Defaults to 10 seconds.
func (o RetryPolicyResponseOutput) MinimumBackoff() pulumi.StringOutput {
	return o.ApplyT(func(v RetryPolicyResponse) string { return v.MinimumBackoff }).(pulumi.StringOutput)
}

// Settings for validating messages published against a schema.
type SchemaSettings struct {
	// The encoding of messages validated against `schema`.
	Encoding *SchemaSettingsEncoding `pulumi:"encoding"`
	// The minimum (inclusive) revision allowed for validating messages. If empty or not present, allow any revision to be validated against last_revision or any revision created before.
	FirstRevisionId *string `pulumi:"firstRevisionId"`
	// The maximum (inclusive) revision allowed for validating messages. If empty or not present, allow any revision to be validated against first_revision or any revision created after.
	LastRevisionId *string `pulumi:"lastRevisionId"`
	// The name of the schema that messages published should be validated against. Format is `projects/{project}/schemas/{schema}`. The value of this field will be `_deleted-schema_` if the schema has been deleted.
	Schema string `pulumi:"schema"`
}

// SchemaSettingsInput is an input type that accepts SchemaSettingsArgs and SchemaSettingsOutput values.
// You can construct a concrete instance of `SchemaSettingsInput` via:
//
//	SchemaSettingsArgs{...}
type SchemaSettingsInput interface {
	pulumi.Input

	ToSchemaSettingsOutput() SchemaSettingsOutput
	ToSchemaSettingsOutputWithContext(context.Context) SchemaSettingsOutput
}

// Settings for validating messages published against a schema.
type SchemaSettingsArgs struct {
	// The encoding of messages validated against `schema`.
	Encoding SchemaSettingsEncodingPtrInput `pulumi:"encoding"`
	// The minimum (inclusive) revision allowed for validating messages. If empty or not present, allow any revision to be validated against last_revision or any revision created before.
	FirstRevisionId pulumi.StringPtrInput `pulumi:"firstRevisionId"`
	// The maximum (inclusive) revision allowed for validating messages. If empty or not present, allow any revision to be validated against first_revision or any revision created after.
	LastRevisionId pulumi.StringPtrInput `pulumi:"lastRevisionId"`
	// The name of the schema that messages published should be validated against. Format is `projects/{project}/schemas/{schema}`. The value of this field will be `_deleted-schema_` if the schema has been deleted.
	Schema pulumi.StringInput `pulumi:"schema"`
}

func (SchemaSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaSettings)(nil)).Elem()
}

func (i SchemaSettingsArgs) ToSchemaSettingsOutput() SchemaSettingsOutput {
	return i.ToSchemaSettingsOutputWithContext(context.Background())
}

func (i SchemaSettingsArgs) ToSchemaSettingsOutputWithContext(ctx context.Context) SchemaSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaSettingsOutput)
}

func (i SchemaSettingsArgs) ToSchemaSettingsPtrOutput() SchemaSettingsPtrOutput {
	return i.ToSchemaSettingsPtrOutputWithContext(context.Background())
}

func (i SchemaSettingsArgs) ToSchemaSettingsPtrOutputWithContext(ctx context.Context) SchemaSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaSettingsOutput).ToSchemaSettingsPtrOutputWithContext(ctx)
}

// SchemaSettingsPtrInput is an input type that accepts SchemaSettingsArgs, SchemaSettingsPtr and SchemaSettingsPtrOutput values.
// You can construct a concrete instance of `SchemaSettingsPtrInput` via:
//
//	        SchemaSettingsArgs{...}
//
//	or:
//
//	        nil
type SchemaSettingsPtrInput interface {
	pulumi.Input

	ToSchemaSettingsPtrOutput() SchemaSettingsPtrOutput
	ToSchemaSettingsPtrOutputWithContext(context.Context) SchemaSettingsPtrOutput
}

type schemaSettingsPtrType SchemaSettingsArgs

func SchemaSettingsPtr(v *SchemaSettingsArgs) SchemaSettingsPtrInput {
	return (*schemaSettingsPtrType)(v)
}

func (*schemaSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaSettings)(nil)).Elem()
}

func (i *schemaSettingsPtrType) ToSchemaSettingsPtrOutput() SchemaSettingsPtrOutput {
	return i.ToSchemaSettingsPtrOutputWithContext(context.Background())
}

func (i *schemaSettingsPtrType) ToSchemaSettingsPtrOutputWithContext(ctx context.Context) SchemaSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaSettingsPtrOutput)
}

// Settings for validating messages published against a schema.
type SchemaSettingsOutput struct{ *pulumi.OutputState }

func (SchemaSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaSettings)(nil)).Elem()
}

func (o SchemaSettingsOutput) ToSchemaSettingsOutput() SchemaSettingsOutput {
	return o
}

func (o SchemaSettingsOutput) ToSchemaSettingsOutputWithContext(ctx context.Context) SchemaSettingsOutput {
	return o
}

func (o SchemaSettingsOutput) ToSchemaSettingsPtrOutput() SchemaSettingsPtrOutput {
	return o.ToSchemaSettingsPtrOutputWithContext(context.Background())
}

func (o SchemaSettingsOutput) ToSchemaSettingsPtrOutputWithContext(ctx context.Context) SchemaSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SchemaSettings) *SchemaSettings {
		return &v
	}).(SchemaSettingsPtrOutput)
}

// The encoding of messages validated against `schema`.
func (o SchemaSettingsOutput) Encoding() SchemaSettingsEncodingPtrOutput {
	return o.ApplyT(func(v SchemaSettings) *SchemaSettingsEncoding { return v.Encoding }).(SchemaSettingsEncodingPtrOutput)
}

// The minimum (inclusive) revision allowed for validating messages. If empty or not present, allow any revision to be validated against last_revision or any revision created before.
func (o SchemaSettingsOutput) FirstRevisionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchemaSettings) *string { return v.FirstRevisionId }).(pulumi.StringPtrOutput)
}

// The maximum (inclusive) revision allowed for validating messages. If empty or not present, allow any revision to be validated against first_revision or any revision created after.
func (o SchemaSettingsOutput) LastRevisionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchemaSettings) *string { return v.LastRevisionId }).(pulumi.StringPtrOutput)
}

// The name of the schema that messages published should be validated against. Format is `projects/{project}/schemas/{schema}`. The value of this field will be `_deleted-schema_` if the schema has been deleted.
func (o SchemaSettingsOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v SchemaSettings) string { return v.Schema }).(pulumi.StringOutput)
}

type SchemaSettingsPtrOutput struct{ *pulumi.OutputState }

func (SchemaSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaSettings)(nil)).Elem()
}

func (o SchemaSettingsPtrOutput) ToSchemaSettingsPtrOutput() SchemaSettingsPtrOutput {
	return o
}

func (o SchemaSettingsPtrOutput) ToSchemaSettingsPtrOutputWithContext(ctx context.Context) SchemaSettingsPtrOutput {
	return o
}

func (o SchemaSettingsPtrOutput) Elem() SchemaSettingsOutput {
	return o.ApplyT(func(v *SchemaSettings) SchemaSettings {
		if v != nil {
			return *v
		}
		var ret SchemaSettings
		return ret
	}).(SchemaSettingsOutput)
}

// The encoding of messages validated against `schema`.
func (o SchemaSettingsPtrOutput) Encoding() SchemaSettingsEncodingPtrOutput {
	return o.ApplyT(func(v *SchemaSettings) *SchemaSettingsEncoding {
		if v == nil {
			return nil
		}
		return v.Encoding
	}).(SchemaSettingsEncodingPtrOutput)
}

// The minimum (inclusive) revision allowed for validating messages. If empty or not present, allow any revision to be validated against last_revision or any revision created before.
func (o SchemaSettingsPtrOutput) FirstRevisionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SchemaSettings) *string {
		if v == nil {
			return nil
		}
		return v.FirstRevisionId
	}).(pulumi.StringPtrOutput)
}

// The maximum (inclusive) revision allowed for validating messages. If empty or not present, allow any revision to be validated against first_revision or any revision created after.
func (o SchemaSettingsPtrOutput) LastRevisionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SchemaSettings) *string {
		if v == nil {
			return nil
		}
		return v.LastRevisionId
	}).(pulumi.StringPtrOutput)
}

// The name of the schema that messages published should be validated against. Format is `projects/{project}/schemas/{schema}`. The value of this field will be `_deleted-schema_` if the schema has been deleted.
func (o SchemaSettingsPtrOutput) Schema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SchemaSettings) *string {
		if v == nil {
			return nil
		}
		return &v.Schema
	}).(pulumi.StringPtrOutput)
}

// Settings for validating messages published against a schema.
type SchemaSettingsResponse struct {
	// The encoding of messages validated against `schema`.
	Encoding string `pulumi:"encoding"`
	// The minimum (inclusive) revision allowed for validating messages. If empty or not present, allow any revision to be validated against last_revision or any revision created before.
	FirstRevisionId string `pulumi:"firstRevisionId"`
	// The maximum (inclusive) revision allowed for validating messages. If empty or not present, allow any revision to be validated against first_revision or any revision created after.
	LastRevisionId string `pulumi:"lastRevisionId"`
	// The name of the schema that messages published should be validated against. Format is `projects/{project}/schemas/{schema}`. The value of this field will be `_deleted-schema_` if the schema has been deleted.
	Schema string `pulumi:"schema"`
}

// Settings for validating messages published against a schema.
type SchemaSettingsResponseOutput struct{ *pulumi.OutputState }

func (SchemaSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaSettingsResponse)(nil)).Elem()
}

func (o SchemaSettingsResponseOutput) ToSchemaSettingsResponseOutput() SchemaSettingsResponseOutput {
	return o
}

func (o SchemaSettingsResponseOutput) ToSchemaSettingsResponseOutputWithContext(ctx context.Context) SchemaSettingsResponseOutput {
	return o
}

// The encoding of messages validated against `schema`.
func (o SchemaSettingsResponseOutput) Encoding() pulumi.StringOutput {
	return o.ApplyT(func(v SchemaSettingsResponse) string { return v.Encoding }).(pulumi.StringOutput)
}

// The minimum (inclusive) revision allowed for validating messages. If empty or not present, allow any revision to be validated against last_revision or any revision created before.
func (o SchemaSettingsResponseOutput) FirstRevisionId() pulumi.StringOutput {
	return o.ApplyT(func(v SchemaSettingsResponse) string { return v.FirstRevisionId }).(pulumi.StringOutput)
}

// The maximum (inclusive) revision allowed for validating messages. If empty or not present, allow any revision to be validated against first_revision or any revision created after.
func (o SchemaSettingsResponseOutput) LastRevisionId() pulumi.StringOutput {
	return o.ApplyT(func(v SchemaSettingsResponse) string { return v.LastRevisionId }).(pulumi.StringOutput)
}

// The name of the schema that messages published should be validated against. Format is `projects/{project}/schemas/{schema}`. The value of this field will be `_deleted-schema_` if the schema has been deleted.
func (o SchemaSettingsResponseOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v SchemaSettingsResponse) string { return v.Schema }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BigQueryConfigInput)(nil)).Elem(), BigQueryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BigQueryConfigPtrInput)(nil)).Elem(), BigQueryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingInput)(nil)).Elem(), BindingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingArrayInput)(nil)).Elem(), BindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeadLetterPolicyInput)(nil)).Elem(), DeadLetterPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeadLetterPolicyPtrInput)(nil)).Elem(), DeadLetterPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExpirationPolicyInput)(nil)).Elem(), ExpirationPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExpirationPolicyPtrInput)(nil)).Elem(), ExpirationPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprPtrInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MessageStoragePolicyInput)(nil)).Elem(), MessageStoragePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MessageStoragePolicyPtrInput)(nil)).Elem(), MessageStoragePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OidcTokenInput)(nil)).Elem(), OidcTokenArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OidcTokenPtrInput)(nil)).Elem(), OidcTokenArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PushConfigInput)(nil)).Elem(), PushConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PushConfigPtrInput)(nil)).Elem(), PushConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RetryPolicyInput)(nil)).Elem(), RetryPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RetryPolicyPtrInput)(nil)).Elem(), RetryPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaSettingsInput)(nil)).Elem(), SchemaSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaSettingsPtrInput)(nil)).Elem(), SchemaSettingsArgs{})
	pulumi.RegisterOutputType(BigQueryConfigOutput{})
	pulumi.RegisterOutputType(BigQueryConfigPtrOutput{})
	pulumi.RegisterOutputType(BigQueryConfigResponseOutput{})
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(BindingResponseOutput{})
	pulumi.RegisterOutputType(BindingResponseArrayOutput{})
	pulumi.RegisterOutputType(DeadLetterPolicyOutput{})
	pulumi.RegisterOutputType(DeadLetterPolicyPtrOutput{})
	pulumi.RegisterOutputType(DeadLetterPolicyResponseOutput{})
	pulumi.RegisterOutputType(ExpirationPolicyOutput{})
	pulumi.RegisterOutputType(ExpirationPolicyPtrOutput{})
	pulumi.RegisterOutputType(ExpirationPolicyResponseOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(ExprResponseOutput{})
	pulumi.RegisterOutputType(MessageStoragePolicyOutput{})
	pulumi.RegisterOutputType(MessageStoragePolicyPtrOutput{})
	pulumi.RegisterOutputType(MessageStoragePolicyResponseOutput{})
	pulumi.RegisterOutputType(OidcTokenOutput{})
	pulumi.RegisterOutputType(OidcTokenPtrOutput{})
	pulumi.RegisterOutputType(OidcTokenResponseOutput{})
	pulumi.RegisterOutputType(PushConfigOutput{})
	pulumi.RegisterOutputType(PushConfigPtrOutput{})
	pulumi.RegisterOutputType(PushConfigResponseOutput{})
	pulumi.RegisterOutputType(RetryPolicyOutput{})
	pulumi.RegisterOutputType(RetryPolicyPtrOutput{})
	pulumi.RegisterOutputType(RetryPolicyResponseOutput{})
	pulumi.RegisterOutputType(SchemaSettingsOutput{})
	pulumi.RegisterOutputType(SchemaSettingsPtrOutput{})
	pulumi.RegisterOutputType(SchemaSettingsResponseOutput{})
}
