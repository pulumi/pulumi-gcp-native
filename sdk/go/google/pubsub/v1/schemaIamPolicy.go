// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
type SchemaIamPolicy struct {
	pulumi.CustomResourceState
}

// NewSchemaIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewSchemaIamPolicy(ctx *pulumi.Context,
	name string, args *SchemaIamPolicyArgs, opts ...pulumi.ResourceOption) (*SchemaIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	if args.SchemasId == nil {
		return nil, errors.New("invalid value for required argument 'SchemasId'")
	}
	var resource SchemaIamPolicy
	err := ctx.RegisterResource("google-cloud:pubsub/v1:SchemaIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSchemaIamPolicy gets an existing SchemaIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSchemaIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SchemaIamPolicyState, opts ...pulumi.ResourceOption) (*SchemaIamPolicy, error) {
	var resource SchemaIamPolicy
	err := ctx.ReadResource("google-cloud:pubsub/v1:SchemaIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SchemaIamPolicy resources.
type schemaIamPolicyState struct {
}

type SchemaIamPolicyState struct {
}

func (SchemaIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*schemaIamPolicyState)(nil)).Elem()
}

type schemaIamPolicyArgs struct {
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy     *Policy `pulumi:"policy"`
	ProjectsId string  `pulumi:"projectsId"`
	SchemasId  string  `pulumi:"schemasId"`
}

// The set of arguments for constructing a SchemaIamPolicy resource.
type SchemaIamPolicyArgs struct {
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy     PolicyPtrInput
	ProjectsId pulumi.StringInput
	SchemasId  pulumi.StringInput
}

func (SchemaIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*schemaIamPolicyArgs)(nil)).Elem()
}

type SchemaIamPolicyInput interface {
	pulumi.Input

	ToSchemaIamPolicyOutput() SchemaIamPolicyOutput
	ToSchemaIamPolicyOutputWithContext(ctx context.Context) SchemaIamPolicyOutput
}

func (*SchemaIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaIamPolicy)(nil))
}

func (i *SchemaIamPolicy) ToSchemaIamPolicyOutput() SchemaIamPolicyOutput {
	return i.ToSchemaIamPolicyOutputWithContext(context.Background())
}

func (i *SchemaIamPolicy) ToSchemaIamPolicyOutputWithContext(ctx context.Context) SchemaIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaIamPolicyOutput)
}

type SchemaIamPolicyOutput struct {
	*pulumi.OutputState
}

func (SchemaIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaIamPolicy)(nil))
}

func (o SchemaIamPolicyOutput) ToSchemaIamPolicyOutput() SchemaIamPolicyOutput {
	return o
}

func (o SchemaIamPolicyOutput) ToSchemaIamPolicyOutputWithContext(ctx context.Context) SchemaIamPolicyOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(SchemaIamPolicyOutput{})
}
