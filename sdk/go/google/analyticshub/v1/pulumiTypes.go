// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfig struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfig `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service *string `pulumi:"service"`
}

// AuditConfigInput is an input type that accepts AuditConfigArgs and AuditConfigOutput values.
// You can construct a concrete instance of `AuditConfigInput` via:
//
//	AuditConfigArgs{...}
type AuditConfigInput interface {
	pulumi.Input

	ToAuditConfigOutput() AuditConfigOutput
	ToAuditConfigOutputWithContext(context.Context) AuditConfigOutput
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigArgs struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs AuditLogConfigArrayInput `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (AuditConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (i AuditConfigArgs) ToAuditConfigOutput() AuditConfigOutput {
	return i.ToAuditConfigOutputWithContext(context.Background())
}

func (i AuditConfigArgs) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigOutput)
}

// AuditConfigArrayInput is an input type that accepts AuditConfigArray and AuditConfigArrayOutput values.
// You can construct a concrete instance of `AuditConfigArrayInput` via:
//
//	AuditConfigArray{ AuditConfigArgs{...} }
type AuditConfigArrayInput interface {
	pulumi.Input

	ToAuditConfigArrayOutput() AuditConfigArrayOutput
	ToAuditConfigArrayOutputWithContext(context.Context) AuditConfigArrayOutput
}

type AuditConfigArray []AuditConfigInput

func (AuditConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (i AuditConfigArray) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return i.ToAuditConfigArrayOutputWithContext(context.Background())
}

func (i AuditConfigArray) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigArrayOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigOutput struct{ *pulumi.OutputState }

func (AuditConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (o AuditConfigOutput) ToAuditConfigOutput() AuditConfigOutput {
	return o
}

func (o AuditConfigOutput) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigOutput) AuditLogConfigs() AuditLogConfigArrayOutput {
	return o.ApplyT(func(v AuditConfig) []AuditLogConfig { return v.AuditLogConfigs }).(AuditLogConfigArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuditConfig) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type AuditConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) Index(i pulumi.IntInput) AuditConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfig {
		return vs[0].([]AuditConfig)[vs[1].(int)]
	}).(AuditConfigOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigResponse struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfigResponse `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service string `pulumi:"service"`
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutput() AuditConfigResponseOutput {
	return o
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutputWithContext(ctx context.Context) AuditConfigResponseOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigResponseOutput) AuditLogConfigs() AuditLogConfigResponseArrayOutput {
	return o.ApplyT(func(v AuditConfigResponse) []AuditLogConfigResponse { return v.AuditLogConfigs }).(AuditLogConfigResponseArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v AuditConfigResponse) string { return v.Service }).(pulumi.StringOutput)
}

type AuditConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutput() AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutputWithContext(ctx context.Context) AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfigResponse {
		return vs[0].([]AuditConfigResponse)[vs[1].(int)]
	}).(AuditConfigResponseOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfig struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType *AuditLogConfigLogType `pulumi:"logType"`
}

// AuditLogConfigInput is an input type that accepts AuditLogConfigArgs and AuditLogConfigOutput values.
// You can construct a concrete instance of `AuditLogConfigInput` via:
//
//	AuditLogConfigArgs{...}
type AuditLogConfigInput interface {
	pulumi.Input

	ToAuditLogConfigOutput() AuditLogConfigOutput
	ToAuditLogConfigOutputWithContext(context.Context) AuditLogConfigOutput
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigArgs struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers pulumi.StringArrayInput `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType AuditLogConfigLogTypePtrInput `pulumi:"logType"`
}

func (AuditLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return i.ToAuditLogConfigOutputWithContext(context.Background())
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigOutput)
}

// AuditLogConfigArrayInput is an input type that accepts AuditLogConfigArray and AuditLogConfigArrayOutput values.
// You can construct a concrete instance of `AuditLogConfigArrayInput` via:
//
//	AuditLogConfigArray{ AuditLogConfigArgs{...} }
type AuditLogConfigArrayInput interface {
	pulumi.Input

	ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput
	ToAuditLogConfigArrayOutputWithContext(context.Context) AuditLogConfigArrayOutput
}

type AuditLogConfigArray []AuditLogConfigInput

func (AuditLogConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return i.ToAuditLogConfigArrayOutputWithContext(context.Background())
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigArrayOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigOutput struct{ *pulumi.OutputState }

func (AuditLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return o
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfig) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigOutput) LogType() AuditLogConfigLogTypePtrOutput {
	return o.ApplyT(func(v AuditLogConfig) *AuditLogConfigLogType { return v.LogType }).(AuditLogConfigLogTypePtrOutput)
}

type AuditLogConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) Index(i pulumi.IntInput) AuditLogConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfig {
		return vs[0].([]AuditLogConfig)[vs[1].(int)]
	}).(AuditLogConfigOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponse struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType string `pulumi:"logType"`
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutput() AuditLogConfigResponseOutput {
	return o
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutputWithContext(ctx context.Context) AuditLogConfigResponseOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigResponseOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigResponseOutput) LogType() pulumi.StringOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) string { return v.LogType }).(pulumi.StringOutput)
}

type AuditLogConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutput() AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutputWithContext(ctx context.Context) AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditLogConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfigResponse {
		return vs[0].([]AuditLogConfigResponse)[vs[1].(int)]
	}).(AuditLogConfigResponseOutput)
}

// A reference to a shared dataset. It is an existing BigQuery dataset with a collection of objects such as tables and views that you want to share with subscribers. When subscriber's subscribe to a listing, Analytics Hub creates a linked dataset in the subscriber's project. A Linked dataset is an opaque, read-only BigQuery dataset that serves as a _symbolic link_ to a shared dataset.
type BigQueryDatasetSource struct {
	// Resource name of the dataset source for this listing. e.g. `projects/myproject/datasets/123`
	Dataset *string `pulumi:"dataset"`
}

// BigQueryDatasetSourceInput is an input type that accepts BigQueryDatasetSourceArgs and BigQueryDatasetSourceOutput values.
// You can construct a concrete instance of `BigQueryDatasetSourceInput` via:
//
//	BigQueryDatasetSourceArgs{...}
type BigQueryDatasetSourceInput interface {
	pulumi.Input

	ToBigQueryDatasetSourceOutput() BigQueryDatasetSourceOutput
	ToBigQueryDatasetSourceOutputWithContext(context.Context) BigQueryDatasetSourceOutput
}

// A reference to a shared dataset. It is an existing BigQuery dataset with a collection of objects such as tables and views that you want to share with subscribers. When subscriber's subscribe to a listing, Analytics Hub creates a linked dataset in the subscriber's project. A Linked dataset is an opaque, read-only BigQuery dataset that serves as a _symbolic link_ to a shared dataset.
type BigQueryDatasetSourceArgs struct {
	// Resource name of the dataset source for this listing. e.g. `projects/myproject/datasets/123`
	Dataset pulumi.StringPtrInput `pulumi:"dataset"`
}

func (BigQueryDatasetSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BigQueryDatasetSource)(nil)).Elem()
}

func (i BigQueryDatasetSourceArgs) ToBigQueryDatasetSourceOutput() BigQueryDatasetSourceOutput {
	return i.ToBigQueryDatasetSourceOutputWithContext(context.Background())
}

func (i BigQueryDatasetSourceArgs) ToBigQueryDatasetSourceOutputWithContext(ctx context.Context) BigQueryDatasetSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigQueryDatasetSourceOutput)
}

// A reference to a shared dataset. It is an existing BigQuery dataset with a collection of objects such as tables and views that you want to share with subscribers. When subscriber's subscribe to a listing, Analytics Hub creates a linked dataset in the subscriber's project. A Linked dataset is an opaque, read-only BigQuery dataset that serves as a _symbolic link_ to a shared dataset.
type BigQueryDatasetSourceOutput struct{ *pulumi.OutputState }

func (BigQueryDatasetSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BigQueryDatasetSource)(nil)).Elem()
}

func (o BigQueryDatasetSourceOutput) ToBigQueryDatasetSourceOutput() BigQueryDatasetSourceOutput {
	return o
}

func (o BigQueryDatasetSourceOutput) ToBigQueryDatasetSourceOutputWithContext(ctx context.Context) BigQueryDatasetSourceOutput {
	return o
}

// Resource name of the dataset source for this listing. e.g. `projects/myproject/datasets/123`
func (o BigQueryDatasetSourceOutput) Dataset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BigQueryDatasetSource) *string { return v.Dataset }).(pulumi.StringPtrOutput)
}

// A reference to a shared dataset. It is an existing BigQuery dataset with a collection of objects such as tables and views that you want to share with subscribers. When subscriber's subscribe to a listing, Analytics Hub creates a linked dataset in the subscriber's project. A Linked dataset is an opaque, read-only BigQuery dataset that serves as a _symbolic link_ to a shared dataset.
type BigQueryDatasetSourceResponse struct {
	// Resource name of the dataset source for this listing. e.g. `projects/myproject/datasets/123`
	Dataset string `pulumi:"dataset"`
}

// A reference to a shared dataset. It is an existing BigQuery dataset with a collection of objects such as tables and views that you want to share with subscribers. When subscriber's subscribe to a listing, Analytics Hub creates a linked dataset in the subscriber's project. A Linked dataset is an opaque, read-only BigQuery dataset that serves as a _symbolic link_ to a shared dataset.
type BigQueryDatasetSourceResponseOutput struct{ *pulumi.OutputState }

func (BigQueryDatasetSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BigQueryDatasetSourceResponse)(nil)).Elem()
}

func (o BigQueryDatasetSourceResponseOutput) ToBigQueryDatasetSourceResponseOutput() BigQueryDatasetSourceResponseOutput {
	return o
}

func (o BigQueryDatasetSourceResponseOutput) ToBigQueryDatasetSourceResponseOutputWithContext(ctx context.Context) BigQueryDatasetSourceResponseOutput {
	return o
}

// Resource name of the dataset source for this listing. e.g. `projects/myproject/datasets/123`
func (o BigQueryDatasetSourceResponseOutput) Dataset() pulumi.StringOutput {
	return o.ApplyT(func(v BigQueryDatasetSourceResponse) string { return v.Dataset }).(pulumi.StringOutput)
}

// Associates `members`, or principals, with a `role`.
type Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//	BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates `members`, or principals, with a `role`.
type BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//	BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingResponse struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprResponse `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role string `pulumi:"role"`
}

// Associates `members`, or principals, with a `role`.
type BindingResponseOutput struct{ *pulumi.OutputState }

func (BindingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingResponse)(nil)).Elem()
}

func (o BindingResponseOutput) ToBindingResponseOutput() BindingResponseOutput {
	return o
}

func (o BindingResponseOutput) ToBindingResponseOutputWithContext(ctx context.Context) BindingResponseOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingResponseOutput) Condition() ExprResponseOutput {
	return o.ApplyT(func(v BindingResponse) ExprResponse { return v.Condition }).(ExprResponseOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
func (o BindingResponseOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BindingResponse) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingResponseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v BindingResponse) string { return v.Role }).(pulumi.StringOutput)
}

type BindingResponseArrayOutput struct{ *pulumi.OutputState }

func (BindingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingResponse)(nil)).Elem()
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutput() BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutputWithContext(ctx context.Context) BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) Index(i pulumi.IntInput) BindingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BindingResponse {
		return vs[0].([]BindingResponse)[vs[1].(int)]
	}).(BindingResponseOutput)
}

// Contains details of the data provider.
type DataProvider struct {
	// Optional. Name of the data provider.
	Name *string `pulumi:"name"`
	// Optional. Email or URL of the data provider. Max Length: 1000 bytes.
	PrimaryContact *string `pulumi:"primaryContact"`
}

// DataProviderInput is an input type that accepts DataProviderArgs and DataProviderOutput values.
// You can construct a concrete instance of `DataProviderInput` via:
//
//	DataProviderArgs{...}
type DataProviderInput interface {
	pulumi.Input

	ToDataProviderOutput() DataProviderOutput
	ToDataProviderOutputWithContext(context.Context) DataProviderOutput
}

// Contains details of the data provider.
type DataProviderArgs struct {
	// Optional. Name of the data provider.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Optional. Email or URL of the data provider. Max Length: 1000 bytes.
	PrimaryContact pulumi.StringPtrInput `pulumi:"primaryContact"`
}

func (DataProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataProvider)(nil)).Elem()
}

func (i DataProviderArgs) ToDataProviderOutput() DataProviderOutput {
	return i.ToDataProviderOutputWithContext(context.Background())
}

func (i DataProviderArgs) ToDataProviderOutputWithContext(ctx context.Context) DataProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataProviderOutput)
}

func (i DataProviderArgs) ToDataProviderPtrOutput() DataProviderPtrOutput {
	return i.ToDataProviderPtrOutputWithContext(context.Background())
}

func (i DataProviderArgs) ToDataProviderPtrOutputWithContext(ctx context.Context) DataProviderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataProviderOutput).ToDataProviderPtrOutputWithContext(ctx)
}

// DataProviderPtrInput is an input type that accepts DataProviderArgs, DataProviderPtr and DataProviderPtrOutput values.
// You can construct a concrete instance of `DataProviderPtrInput` via:
//
//	        DataProviderArgs{...}
//
//	or:
//
//	        nil
type DataProviderPtrInput interface {
	pulumi.Input

	ToDataProviderPtrOutput() DataProviderPtrOutput
	ToDataProviderPtrOutputWithContext(context.Context) DataProviderPtrOutput
}

type dataProviderPtrType DataProviderArgs

func DataProviderPtr(v *DataProviderArgs) DataProviderPtrInput {
	return (*dataProviderPtrType)(v)
}

func (*dataProviderPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataProvider)(nil)).Elem()
}

func (i *dataProviderPtrType) ToDataProviderPtrOutput() DataProviderPtrOutput {
	return i.ToDataProviderPtrOutputWithContext(context.Background())
}

func (i *dataProviderPtrType) ToDataProviderPtrOutputWithContext(ctx context.Context) DataProviderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataProviderPtrOutput)
}

// Contains details of the data provider.
type DataProviderOutput struct{ *pulumi.OutputState }

func (DataProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataProvider)(nil)).Elem()
}

func (o DataProviderOutput) ToDataProviderOutput() DataProviderOutput {
	return o
}

func (o DataProviderOutput) ToDataProviderOutputWithContext(ctx context.Context) DataProviderOutput {
	return o
}

func (o DataProviderOutput) ToDataProviderPtrOutput() DataProviderPtrOutput {
	return o.ToDataProviderPtrOutputWithContext(context.Background())
}

func (o DataProviderOutput) ToDataProviderPtrOutputWithContext(ctx context.Context) DataProviderPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataProvider) *DataProvider {
		return &v
	}).(DataProviderPtrOutput)
}

// Optional. Name of the data provider.
func (o DataProviderOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataProvider) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Optional. Email or URL of the data provider. Max Length: 1000 bytes.
func (o DataProviderOutput) PrimaryContact() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataProvider) *string { return v.PrimaryContact }).(pulumi.StringPtrOutput)
}

type DataProviderPtrOutput struct{ *pulumi.OutputState }

func (DataProviderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataProvider)(nil)).Elem()
}

func (o DataProviderPtrOutput) ToDataProviderPtrOutput() DataProviderPtrOutput {
	return o
}

func (o DataProviderPtrOutput) ToDataProviderPtrOutputWithContext(ctx context.Context) DataProviderPtrOutput {
	return o
}

func (o DataProviderPtrOutput) Elem() DataProviderOutput {
	return o.ApplyT(func(v *DataProvider) DataProvider {
		if v != nil {
			return *v
		}
		var ret DataProvider
		return ret
	}).(DataProviderOutput)
}

// Optional. Name of the data provider.
func (o DataProviderPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataProvider) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Optional. Email or URL of the data provider. Max Length: 1000 bytes.
func (o DataProviderPtrOutput) PrimaryContact() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataProvider) *string {
		if v == nil {
			return nil
		}
		return v.PrimaryContact
	}).(pulumi.StringPtrOutput)
}

// Contains details of the data provider.
type DataProviderResponse struct {
	// Optional. Name of the data provider.
	Name string `pulumi:"name"`
	// Optional. Email or URL of the data provider. Max Length: 1000 bytes.
	PrimaryContact string `pulumi:"primaryContact"`
}

// Contains details of the data provider.
type DataProviderResponseOutput struct{ *pulumi.OutputState }

func (DataProviderResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataProviderResponse)(nil)).Elem()
}

func (o DataProviderResponseOutput) ToDataProviderResponseOutput() DataProviderResponseOutput {
	return o
}

func (o DataProviderResponseOutput) ToDataProviderResponseOutputWithContext(ctx context.Context) DataProviderResponseOutput {
	return o
}

// Optional. Name of the data provider.
func (o DataProviderResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DataProviderResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Optional. Email or URL of the data provider. Max Length: 1000 bytes.
func (o DataProviderResponseOutput) PrimaryContact() pulumi.StringOutput {
	return o.ApplyT(func(v DataProviderResponse) string { return v.PrimaryContact }).(pulumi.StringOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//	ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//	        ExprArgs{...}
//
//	or:
//
//	        nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr {
		if v != nil {
			return *v
		}
		var ret Expr
		return ret
	}).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponse struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title string `pulumi:"title"`
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseOutput struct{ *pulumi.OutputState }

func (ExprResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (o ExprResponseOutput) ToExprResponseOutput() ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return o
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Title }).(pulumi.StringOutput)
}

// Contains details of the listing publisher.
type Publisher struct {
	// Optional. Name of the listing publisher.
	Name *string `pulumi:"name"`
	// Optional. Email or URL of the listing publisher. Max Length: 1000 bytes.
	PrimaryContact *string `pulumi:"primaryContact"`
}

// PublisherInput is an input type that accepts PublisherArgs and PublisherOutput values.
// You can construct a concrete instance of `PublisherInput` via:
//
//	PublisherArgs{...}
type PublisherInput interface {
	pulumi.Input

	ToPublisherOutput() PublisherOutput
	ToPublisherOutputWithContext(context.Context) PublisherOutput
}

// Contains details of the listing publisher.
type PublisherArgs struct {
	// Optional. Name of the listing publisher.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Optional. Email or URL of the listing publisher. Max Length: 1000 bytes.
	PrimaryContact pulumi.StringPtrInput `pulumi:"primaryContact"`
}

func (PublisherArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Publisher)(nil)).Elem()
}

func (i PublisherArgs) ToPublisherOutput() PublisherOutput {
	return i.ToPublisherOutputWithContext(context.Background())
}

func (i PublisherArgs) ToPublisherOutputWithContext(ctx context.Context) PublisherOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublisherOutput)
}

func (i PublisherArgs) ToPublisherPtrOutput() PublisherPtrOutput {
	return i.ToPublisherPtrOutputWithContext(context.Background())
}

func (i PublisherArgs) ToPublisherPtrOutputWithContext(ctx context.Context) PublisherPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublisherOutput).ToPublisherPtrOutputWithContext(ctx)
}

// PublisherPtrInput is an input type that accepts PublisherArgs, PublisherPtr and PublisherPtrOutput values.
// You can construct a concrete instance of `PublisherPtrInput` via:
//
//	        PublisherArgs{...}
//
//	or:
//
//	        nil
type PublisherPtrInput interface {
	pulumi.Input

	ToPublisherPtrOutput() PublisherPtrOutput
	ToPublisherPtrOutputWithContext(context.Context) PublisherPtrOutput
}

type publisherPtrType PublisherArgs

func PublisherPtr(v *PublisherArgs) PublisherPtrInput {
	return (*publisherPtrType)(v)
}

func (*publisherPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Publisher)(nil)).Elem()
}

func (i *publisherPtrType) ToPublisherPtrOutput() PublisherPtrOutput {
	return i.ToPublisherPtrOutputWithContext(context.Background())
}

func (i *publisherPtrType) ToPublisherPtrOutputWithContext(ctx context.Context) PublisherPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublisherPtrOutput)
}

// Contains details of the listing publisher.
type PublisherOutput struct{ *pulumi.OutputState }

func (PublisherOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Publisher)(nil)).Elem()
}

func (o PublisherOutput) ToPublisherOutput() PublisherOutput {
	return o
}

func (o PublisherOutput) ToPublisherOutputWithContext(ctx context.Context) PublisherOutput {
	return o
}

func (o PublisherOutput) ToPublisherPtrOutput() PublisherPtrOutput {
	return o.ToPublisherPtrOutputWithContext(context.Background())
}

func (o PublisherOutput) ToPublisherPtrOutputWithContext(ctx context.Context) PublisherPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Publisher) *Publisher {
		return &v
	}).(PublisherPtrOutput)
}

// Optional. Name of the listing publisher.
func (o PublisherOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Publisher) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Optional. Email or URL of the listing publisher. Max Length: 1000 bytes.
func (o PublisherOutput) PrimaryContact() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Publisher) *string { return v.PrimaryContact }).(pulumi.StringPtrOutput)
}

type PublisherPtrOutput struct{ *pulumi.OutputState }

func (PublisherPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Publisher)(nil)).Elem()
}

func (o PublisherPtrOutput) ToPublisherPtrOutput() PublisherPtrOutput {
	return o
}

func (o PublisherPtrOutput) ToPublisherPtrOutputWithContext(ctx context.Context) PublisherPtrOutput {
	return o
}

func (o PublisherPtrOutput) Elem() PublisherOutput {
	return o.ApplyT(func(v *Publisher) Publisher {
		if v != nil {
			return *v
		}
		var ret Publisher
		return ret
	}).(PublisherOutput)
}

// Optional. Name of the listing publisher.
func (o PublisherPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Publisher) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Optional. Email or URL of the listing publisher. Max Length: 1000 bytes.
func (o PublisherPtrOutput) PrimaryContact() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Publisher) *string {
		if v == nil {
			return nil
		}
		return v.PrimaryContact
	}).(pulumi.StringPtrOutput)
}

// Contains details of the listing publisher.
type PublisherResponse struct {
	// Optional. Name of the listing publisher.
	Name string `pulumi:"name"`
	// Optional. Email or URL of the listing publisher. Max Length: 1000 bytes.
	PrimaryContact string `pulumi:"primaryContact"`
}

// Contains details of the listing publisher.
type PublisherResponseOutput struct{ *pulumi.OutputState }

func (PublisherResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PublisherResponse)(nil)).Elem()
}

func (o PublisherResponseOutput) ToPublisherResponseOutput() PublisherResponseOutput {
	return o
}

func (o PublisherResponseOutput) ToPublisherResponseOutputWithContext(ctx context.Context) PublisherResponseOutput {
	return o
}

// Optional. Name of the listing publisher.
func (o PublisherResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PublisherResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Optional. Email or URL of the listing publisher. Max Length: 1000 bytes.
func (o PublisherResponseOutput) PrimaryContact() pulumi.StringOutput {
	return o.ApplyT(func(v PublisherResponse) string { return v.PrimaryContact }).(pulumi.StringOutput)
}

// Restricted export config, used to configure restricted export on linked dataset.
type RestrictedExportConfig struct {
	// If true, enable restricted export.
	Enabled *bool `pulumi:"enabled"`
	// If true, restrict export of query result derived from restricted linked dataset table.
	RestrictQueryResult *bool `pulumi:"restrictQueryResult"`
}

// RestrictedExportConfigInput is an input type that accepts RestrictedExportConfigArgs and RestrictedExportConfigOutput values.
// You can construct a concrete instance of `RestrictedExportConfigInput` via:
//
//	RestrictedExportConfigArgs{...}
type RestrictedExportConfigInput interface {
	pulumi.Input

	ToRestrictedExportConfigOutput() RestrictedExportConfigOutput
	ToRestrictedExportConfigOutputWithContext(context.Context) RestrictedExportConfigOutput
}

// Restricted export config, used to configure restricted export on linked dataset.
type RestrictedExportConfigArgs struct {
	// If true, enable restricted export.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// If true, restrict export of query result derived from restricted linked dataset table.
	RestrictQueryResult pulumi.BoolPtrInput `pulumi:"restrictQueryResult"`
}

func (RestrictedExportConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RestrictedExportConfig)(nil)).Elem()
}

func (i RestrictedExportConfigArgs) ToRestrictedExportConfigOutput() RestrictedExportConfigOutput {
	return i.ToRestrictedExportConfigOutputWithContext(context.Background())
}

func (i RestrictedExportConfigArgs) ToRestrictedExportConfigOutputWithContext(ctx context.Context) RestrictedExportConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestrictedExportConfigOutput)
}

func (i RestrictedExportConfigArgs) ToRestrictedExportConfigPtrOutput() RestrictedExportConfigPtrOutput {
	return i.ToRestrictedExportConfigPtrOutputWithContext(context.Background())
}

func (i RestrictedExportConfigArgs) ToRestrictedExportConfigPtrOutputWithContext(ctx context.Context) RestrictedExportConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestrictedExportConfigOutput).ToRestrictedExportConfigPtrOutputWithContext(ctx)
}

// RestrictedExportConfigPtrInput is an input type that accepts RestrictedExportConfigArgs, RestrictedExportConfigPtr and RestrictedExportConfigPtrOutput values.
// You can construct a concrete instance of `RestrictedExportConfigPtrInput` via:
//
//	        RestrictedExportConfigArgs{...}
//
//	or:
//
//	        nil
type RestrictedExportConfigPtrInput interface {
	pulumi.Input

	ToRestrictedExportConfigPtrOutput() RestrictedExportConfigPtrOutput
	ToRestrictedExportConfigPtrOutputWithContext(context.Context) RestrictedExportConfigPtrOutput
}

type restrictedExportConfigPtrType RestrictedExportConfigArgs

func RestrictedExportConfigPtr(v *RestrictedExportConfigArgs) RestrictedExportConfigPtrInput {
	return (*restrictedExportConfigPtrType)(v)
}

func (*restrictedExportConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RestrictedExportConfig)(nil)).Elem()
}

func (i *restrictedExportConfigPtrType) ToRestrictedExportConfigPtrOutput() RestrictedExportConfigPtrOutput {
	return i.ToRestrictedExportConfigPtrOutputWithContext(context.Background())
}

func (i *restrictedExportConfigPtrType) ToRestrictedExportConfigPtrOutputWithContext(ctx context.Context) RestrictedExportConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestrictedExportConfigPtrOutput)
}

// Restricted export config, used to configure restricted export on linked dataset.
type RestrictedExportConfigOutput struct{ *pulumi.OutputState }

func (RestrictedExportConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RestrictedExportConfig)(nil)).Elem()
}

func (o RestrictedExportConfigOutput) ToRestrictedExportConfigOutput() RestrictedExportConfigOutput {
	return o
}

func (o RestrictedExportConfigOutput) ToRestrictedExportConfigOutputWithContext(ctx context.Context) RestrictedExportConfigOutput {
	return o
}

func (o RestrictedExportConfigOutput) ToRestrictedExportConfigPtrOutput() RestrictedExportConfigPtrOutput {
	return o.ToRestrictedExportConfigPtrOutputWithContext(context.Background())
}

func (o RestrictedExportConfigOutput) ToRestrictedExportConfigPtrOutputWithContext(ctx context.Context) RestrictedExportConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RestrictedExportConfig) *RestrictedExportConfig {
		return &v
	}).(RestrictedExportConfigPtrOutput)
}

// If true, enable restricted export.
func (o RestrictedExportConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RestrictedExportConfig) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// If true, restrict export of query result derived from restricted linked dataset table.
func (o RestrictedExportConfigOutput) RestrictQueryResult() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RestrictedExportConfig) *bool { return v.RestrictQueryResult }).(pulumi.BoolPtrOutput)
}

type RestrictedExportConfigPtrOutput struct{ *pulumi.OutputState }

func (RestrictedExportConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RestrictedExportConfig)(nil)).Elem()
}

func (o RestrictedExportConfigPtrOutput) ToRestrictedExportConfigPtrOutput() RestrictedExportConfigPtrOutput {
	return o
}

func (o RestrictedExportConfigPtrOutput) ToRestrictedExportConfigPtrOutputWithContext(ctx context.Context) RestrictedExportConfigPtrOutput {
	return o
}

func (o RestrictedExportConfigPtrOutput) Elem() RestrictedExportConfigOutput {
	return o.ApplyT(func(v *RestrictedExportConfig) RestrictedExportConfig {
		if v != nil {
			return *v
		}
		var ret RestrictedExportConfig
		return ret
	}).(RestrictedExportConfigOutput)
}

// If true, enable restricted export.
func (o RestrictedExportConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RestrictedExportConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// If true, restrict export of query result derived from restricted linked dataset table.
func (o RestrictedExportConfigPtrOutput) RestrictQueryResult() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RestrictedExportConfig) *bool {
		if v == nil {
			return nil
		}
		return v.RestrictQueryResult
	}).(pulumi.BoolPtrOutput)
}

// Restricted export config, used to configure restricted export on linked dataset.
type RestrictedExportConfigResponse struct {
	// If true, enable restricted export.
	Enabled bool `pulumi:"enabled"`
	// If true, restrict export of query result derived from restricted linked dataset table.
	RestrictQueryResult bool `pulumi:"restrictQueryResult"`
}

// Restricted export config, used to configure restricted export on linked dataset.
type RestrictedExportConfigResponseOutput struct{ *pulumi.OutputState }

func (RestrictedExportConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RestrictedExportConfigResponse)(nil)).Elem()
}

func (o RestrictedExportConfigResponseOutput) ToRestrictedExportConfigResponseOutput() RestrictedExportConfigResponseOutput {
	return o
}

func (o RestrictedExportConfigResponseOutput) ToRestrictedExportConfigResponseOutputWithContext(ctx context.Context) RestrictedExportConfigResponseOutput {
	return o
}

// If true, enable restricted export.
func (o RestrictedExportConfigResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v RestrictedExportConfigResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// If true, restrict export of query result derived from restricted linked dataset table.
func (o RestrictedExportConfigResponseOutput) RestrictQueryResult() pulumi.BoolOutput {
	return o.ApplyT(func(v RestrictedExportConfigResponse) bool { return v.RestrictQueryResult }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigInput)(nil)).Elem(), AuditConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigArrayInput)(nil)).Elem(), AuditConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigInput)(nil)).Elem(), AuditLogConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigArrayInput)(nil)).Elem(), AuditLogConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BigQueryDatasetSourceInput)(nil)).Elem(), BigQueryDatasetSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingInput)(nil)).Elem(), BindingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingArrayInput)(nil)).Elem(), BindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataProviderInput)(nil)).Elem(), DataProviderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataProviderPtrInput)(nil)).Elem(), DataProviderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprPtrInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublisherInput)(nil)).Elem(), PublisherArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublisherPtrInput)(nil)).Elem(), PublisherArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RestrictedExportConfigInput)(nil)).Elem(), RestrictedExportConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RestrictedExportConfigPtrInput)(nil)).Elem(), RestrictedExportConfigArgs{})
	pulumi.RegisterOutputType(AuditConfigOutput{})
	pulumi.RegisterOutputType(AuditConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigOutput{})
	pulumi.RegisterOutputType(AuditLogConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(BigQueryDatasetSourceOutput{})
	pulumi.RegisterOutputType(BigQueryDatasetSourceResponseOutput{})
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(BindingResponseOutput{})
	pulumi.RegisterOutputType(BindingResponseArrayOutput{})
	pulumi.RegisterOutputType(DataProviderOutput{})
	pulumi.RegisterOutputType(DataProviderPtrOutput{})
	pulumi.RegisterOutputType(DataProviderResponseOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(ExprResponseOutput{})
	pulumi.RegisterOutputType(PublisherOutput{})
	pulumi.RegisterOutputType(PublisherPtrOutput{})
	pulumi.RegisterOutputType(PublisherResponseOutput{})
	pulumi.RegisterOutputType(RestrictedExportConfigOutput{})
	pulumi.RegisterOutputType(RestrictedExportConfigPtrOutput{})
	pulumi.RegisterOutputType(RestrictedExportConfigResponseOutput{})
}
