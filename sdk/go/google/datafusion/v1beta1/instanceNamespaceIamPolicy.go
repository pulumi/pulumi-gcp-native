// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
type InstanceNamespaceIamPolicy struct {
	pulumi.CustomResourceState
}

// NewInstanceNamespaceIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewInstanceNamespaceIamPolicy(ctx *pulumi.Context,
	name string, args *InstanceNamespaceIamPolicyArgs, opts ...pulumi.ResourceOption) (*InstanceNamespaceIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstancesId == nil {
		return nil, errors.New("invalid value for required argument 'InstancesId'")
	}
	if args.LocationsId == nil {
		return nil, errors.New("invalid value for required argument 'LocationsId'")
	}
	if args.NamespacesId == nil {
		return nil, errors.New("invalid value for required argument 'NamespacesId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	var resource InstanceNamespaceIamPolicy
	err := ctx.RegisterResource("google-cloud:datafusion/v1beta1:InstanceNamespaceIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstanceNamespaceIamPolicy gets an existing InstanceNamespaceIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstanceNamespaceIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceNamespaceIamPolicyState, opts ...pulumi.ResourceOption) (*InstanceNamespaceIamPolicy, error) {
	var resource InstanceNamespaceIamPolicy
	err := ctx.ReadResource("google-cloud:datafusion/v1beta1:InstanceNamespaceIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InstanceNamespaceIamPolicy resources.
type instanceNamespaceIamPolicyState struct {
}

type InstanceNamespaceIamPolicyState struct {
}

func (InstanceNamespaceIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceNamespaceIamPolicyState)(nil)).Elem()
}

type instanceNamespaceIamPolicyArgs struct {
	InstancesId  string `pulumi:"instancesId"`
	LocationsId  string `pulumi:"locationsId"`
	NamespacesId string `pulumi:"namespacesId"`
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy     *Policy `pulumi:"policy"`
	ProjectsId string  `pulumi:"projectsId"`
	// OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`
	UpdateMask *string `pulumi:"updateMask"`
}

// The set of arguments for constructing a InstanceNamespaceIamPolicy resource.
type InstanceNamespaceIamPolicyArgs struct {
	InstancesId  pulumi.StringInput
	LocationsId  pulumi.StringInput
	NamespacesId pulumi.StringInput
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy     PolicyPtrInput
	ProjectsId pulumi.StringInput
	// OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`
	UpdateMask pulumi.StringPtrInput
}

func (InstanceNamespaceIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceNamespaceIamPolicyArgs)(nil)).Elem()
}

type InstanceNamespaceIamPolicyInput interface {
	pulumi.Input

	ToInstanceNamespaceIamPolicyOutput() InstanceNamespaceIamPolicyOutput
	ToInstanceNamespaceIamPolicyOutputWithContext(ctx context.Context) InstanceNamespaceIamPolicyOutput
}

func (*InstanceNamespaceIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceNamespaceIamPolicy)(nil))
}

func (i *InstanceNamespaceIamPolicy) ToInstanceNamespaceIamPolicyOutput() InstanceNamespaceIamPolicyOutput {
	return i.ToInstanceNamespaceIamPolicyOutputWithContext(context.Background())
}

func (i *InstanceNamespaceIamPolicy) ToInstanceNamespaceIamPolicyOutputWithContext(ctx context.Context) InstanceNamespaceIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceNamespaceIamPolicyOutput)
}

type InstanceNamespaceIamPolicyOutput struct {
	*pulumi.OutputState
}

func (InstanceNamespaceIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceNamespaceIamPolicy)(nil))
}

func (o InstanceNamespaceIamPolicyOutput) ToInstanceNamespaceIamPolicyOutput() InstanceNamespaceIamPolicyOutput {
	return o
}

func (o InstanceNamespaceIamPolicyOutput) ToInstanceNamespaceIamPolicyOutputWithContext(ctx context.Context) InstanceNamespaceIamPolicyOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(InstanceNamespaceIamPolicyOutput{})
}
