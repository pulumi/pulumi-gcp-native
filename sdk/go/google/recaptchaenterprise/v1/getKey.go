// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Returns the specified key.
func LookupKey(ctx *pulumi.Context, args *LookupKeyArgs, opts ...pulumi.InvokeOption) (*LookupKeyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupKeyResult
	err := ctx.Invoke("google-native:recaptchaenterprise/v1:getKey", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupKeyArgs struct {
	KeyId   string  `pulumi:"keyId"`
	Project *string `pulumi:"project"`
}

type LookupKeyResult struct {
	// Settings for keys that can be used by Android apps.
	AndroidSettings GoogleCloudRecaptchaenterpriseV1AndroidKeySettingsResponse `pulumi:"androidSettings"`
	// The timestamp corresponding to the creation of this key.
	CreateTime string `pulumi:"createTime"`
	// Human-readable display name of this key. Modifiable by user.
	DisplayName string `pulumi:"displayName"`
	// Settings for keys that can be used by iOS apps.
	IosSettings GoogleCloudRecaptchaenterpriseV1IOSKeySettingsResponse `pulumi:"iosSettings"`
	// Optional. See [Creating and managing labels] (https://cloud.google.com/recaptcha-enterprise/docs/labels).
	Labels map[string]string `pulumi:"labels"`
	// Identifier. The resource name for the Key in the format `projects/{project}/keys/{key}`.
	Name string `pulumi:"name"`
	// Optional. Options for user acceptance testing.
	TestingOptions GoogleCloudRecaptchaenterpriseV1TestingOptionsResponse `pulumi:"testingOptions"`
	// Optional. Settings for WAF
	WafSettings GoogleCloudRecaptchaenterpriseV1WafSettingsResponse `pulumi:"wafSettings"`
	// Settings for keys that can be used by websites.
	WebSettings GoogleCloudRecaptchaenterpriseV1WebKeySettingsResponse `pulumi:"webSettings"`
}

func LookupKeyOutput(ctx *pulumi.Context, args LookupKeyOutputArgs, opts ...pulumi.InvokeOption) LookupKeyResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupKeyResult, error) {
			args := v.(LookupKeyArgs)
			r, err := LookupKey(ctx, &args, opts...)
			var s LookupKeyResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupKeyResultOutput)
}

type LookupKeyOutputArgs struct {
	KeyId   pulumi.StringInput    `pulumi:"keyId"`
	Project pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupKeyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupKeyArgs)(nil)).Elem()
}

type LookupKeyResultOutput struct{ *pulumi.OutputState }

func (LookupKeyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupKeyResult)(nil)).Elem()
}

func (o LookupKeyResultOutput) ToLookupKeyResultOutput() LookupKeyResultOutput {
	return o
}

func (o LookupKeyResultOutput) ToLookupKeyResultOutputWithContext(ctx context.Context) LookupKeyResultOutput {
	return o
}

func (o LookupKeyResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupKeyResult] {
	return pulumix.Output[LookupKeyResult]{
		OutputState: o.OutputState,
	}
}

// Settings for keys that can be used by Android apps.
func (o LookupKeyResultOutput) AndroidSettings() GoogleCloudRecaptchaenterpriseV1AndroidKeySettingsResponseOutput {
	return o.ApplyT(func(v LookupKeyResult) GoogleCloudRecaptchaenterpriseV1AndroidKeySettingsResponse {
		return v.AndroidSettings
	}).(GoogleCloudRecaptchaenterpriseV1AndroidKeySettingsResponseOutput)
}

// The timestamp corresponding to the creation of this key.
func (o LookupKeyResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKeyResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Human-readable display name of this key. Modifiable by user.
func (o LookupKeyResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKeyResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Settings for keys that can be used by iOS apps.
func (o LookupKeyResultOutput) IosSettings() GoogleCloudRecaptchaenterpriseV1IOSKeySettingsResponseOutput {
	return o.ApplyT(func(v LookupKeyResult) GoogleCloudRecaptchaenterpriseV1IOSKeySettingsResponse { return v.IosSettings }).(GoogleCloudRecaptchaenterpriseV1IOSKeySettingsResponseOutput)
}

// Optional. See [Creating and managing labels] (https://cloud.google.com/recaptcha-enterprise/docs/labels).
func (o LookupKeyResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupKeyResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Identifier. The resource name for the Key in the format `projects/{project}/keys/{key}`.
func (o LookupKeyResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKeyResult) string { return v.Name }).(pulumi.StringOutput)
}

// Optional. Options for user acceptance testing.
func (o LookupKeyResultOutput) TestingOptions() GoogleCloudRecaptchaenterpriseV1TestingOptionsResponseOutput {
	return o.ApplyT(func(v LookupKeyResult) GoogleCloudRecaptchaenterpriseV1TestingOptionsResponse {
		return v.TestingOptions
	}).(GoogleCloudRecaptchaenterpriseV1TestingOptionsResponseOutput)
}

// Optional. Settings for WAF
func (o LookupKeyResultOutput) WafSettings() GoogleCloudRecaptchaenterpriseV1WafSettingsResponseOutput {
	return o.ApplyT(func(v LookupKeyResult) GoogleCloudRecaptchaenterpriseV1WafSettingsResponse { return v.WafSettings }).(GoogleCloudRecaptchaenterpriseV1WafSettingsResponseOutput)
}

// Settings for keys that can be used by websites.
func (o LookupKeyResultOutput) WebSettings() GoogleCloudRecaptchaenterpriseV1WebKeySettingsResponseOutput {
	return o.ApplyT(func(v LookupKeyResult) GoogleCloudRecaptchaenterpriseV1WebKeySettingsResponse { return v.WebSettings }).(GoogleCloudRecaptchaenterpriseV1WebKeySettingsResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupKeyResultOutput{})
}
