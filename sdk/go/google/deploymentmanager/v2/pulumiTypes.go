// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfig struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfig `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service *string `pulumi:"service"`
}

// AuditConfigInput is an input type that accepts AuditConfigArgs and AuditConfigOutput values.
// You can construct a concrete instance of `AuditConfigInput` via:
//
//          AuditConfigArgs{...}
type AuditConfigInput interface {
	pulumi.Input

	ToAuditConfigOutput() AuditConfigOutput
	ToAuditConfigOutputWithContext(context.Context) AuditConfigOutput
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigArgs struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs AuditLogConfigArrayInput `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (AuditConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (i AuditConfigArgs) ToAuditConfigOutput() AuditConfigOutput {
	return i.ToAuditConfigOutputWithContext(context.Background())
}

func (i AuditConfigArgs) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigOutput)
}

// AuditConfigArrayInput is an input type that accepts AuditConfigArray and AuditConfigArrayOutput values.
// You can construct a concrete instance of `AuditConfigArrayInput` via:
//
//          AuditConfigArray{ AuditConfigArgs{...} }
type AuditConfigArrayInput interface {
	pulumi.Input

	ToAuditConfigArrayOutput() AuditConfigArrayOutput
	ToAuditConfigArrayOutputWithContext(context.Context) AuditConfigArrayOutput
}

type AuditConfigArray []AuditConfigInput

func (AuditConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (i AuditConfigArray) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return i.ToAuditConfigArrayOutputWithContext(context.Background())
}

func (i AuditConfigArray) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigArrayOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigOutput struct{ *pulumi.OutputState }

func (AuditConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (o AuditConfigOutput) ToAuditConfigOutput() AuditConfigOutput {
	return o
}

func (o AuditConfigOutput) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigOutput) AuditLogConfigs() AuditLogConfigArrayOutput {
	return o.ApplyT(func(v AuditConfig) []AuditLogConfig { return v.AuditLogConfigs }).(AuditLogConfigArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuditConfig) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type AuditConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) Index(i pulumi.IntInput) AuditConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfig {
		return vs[0].([]AuditConfig)[vs[1].(int)]
	}).(AuditConfigOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfig struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType *string `pulumi:"logType"`
}

// AuditLogConfigInput is an input type that accepts AuditLogConfigArgs and AuditLogConfigOutput values.
// You can construct a concrete instance of `AuditLogConfigInput` via:
//
//          AuditLogConfigArgs{...}
type AuditLogConfigInput interface {
	pulumi.Input

	ToAuditLogConfigOutput() AuditLogConfigOutput
	ToAuditLogConfigOutputWithContext(context.Context) AuditLogConfigOutput
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigArgs struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers pulumi.StringArrayInput `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType pulumi.StringPtrInput `pulumi:"logType"`
}

func (AuditLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return i.ToAuditLogConfigOutputWithContext(context.Background())
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigOutput)
}

// AuditLogConfigArrayInput is an input type that accepts AuditLogConfigArray and AuditLogConfigArrayOutput values.
// You can construct a concrete instance of `AuditLogConfigArrayInput` via:
//
//          AuditLogConfigArray{ AuditLogConfigArgs{...} }
type AuditLogConfigArrayInput interface {
	pulumi.Input

	ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput
	ToAuditLogConfigArrayOutputWithContext(context.Context) AuditLogConfigArrayOutput
}

type AuditLogConfigArray []AuditLogConfigInput

func (AuditLogConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return i.ToAuditLogConfigArrayOutputWithContext(context.Background())
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigArrayOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigOutput struct{ *pulumi.OutputState }

func (AuditLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return o
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfig) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigOutput) LogType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuditLogConfig) *string { return v.LogType }).(pulumi.StringPtrOutput)
}

type AuditLogConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) Index(i pulumi.IntInput) AuditLogConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfig {
		return vs[0].([]AuditLogConfig)[vs[1].(int)]
	}).(AuditLogConfigOutput)
}

// Associates `members` with a `role`.
type Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members []string `pulumi:"members"`
	// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//          BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates `members` with a `role`.
type BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//          BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

// Associates `members` with a `role`.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

type ConfigFile struct {
	// The contents of the file.
	Content *string `pulumi:"content"`
}

// ConfigFileInput is an input type that accepts ConfigFileArgs and ConfigFileOutput values.
// You can construct a concrete instance of `ConfigFileInput` via:
//
//          ConfigFileArgs{...}
type ConfigFileInput interface {
	pulumi.Input

	ToConfigFileOutput() ConfigFileOutput
	ToConfigFileOutputWithContext(context.Context) ConfigFileOutput
}

type ConfigFileArgs struct {
	// The contents of the file.
	Content pulumi.StringPtrInput `pulumi:"content"`
}

func (ConfigFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigFile)(nil)).Elem()
}

func (i ConfigFileArgs) ToConfigFileOutput() ConfigFileOutput {
	return i.ToConfigFileOutputWithContext(context.Background())
}

func (i ConfigFileArgs) ToConfigFileOutputWithContext(ctx context.Context) ConfigFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigFileOutput)
}

func (i ConfigFileArgs) ToConfigFilePtrOutput() ConfigFilePtrOutput {
	return i.ToConfigFilePtrOutputWithContext(context.Background())
}

func (i ConfigFileArgs) ToConfigFilePtrOutputWithContext(ctx context.Context) ConfigFilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigFileOutput).ToConfigFilePtrOutputWithContext(ctx)
}

// ConfigFilePtrInput is an input type that accepts ConfigFileArgs, ConfigFilePtr and ConfigFilePtrOutput values.
// You can construct a concrete instance of `ConfigFilePtrInput` via:
//
//          ConfigFileArgs{...}
//
//  or:
//
//          nil
type ConfigFilePtrInput interface {
	pulumi.Input

	ToConfigFilePtrOutput() ConfigFilePtrOutput
	ToConfigFilePtrOutputWithContext(context.Context) ConfigFilePtrOutput
}

type configFilePtrType ConfigFileArgs

func ConfigFilePtr(v *ConfigFileArgs) ConfigFilePtrInput {
	return (*configFilePtrType)(v)
}

func (*configFilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigFile)(nil)).Elem()
}

func (i *configFilePtrType) ToConfigFilePtrOutput() ConfigFilePtrOutput {
	return i.ToConfigFilePtrOutputWithContext(context.Background())
}

func (i *configFilePtrType) ToConfigFilePtrOutputWithContext(ctx context.Context) ConfigFilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigFilePtrOutput)
}

type ConfigFileOutput struct{ *pulumi.OutputState }

func (ConfigFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigFile)(nil)).Elem()
}

func (o ConfigFileOutput) ToConfigFileOutput() ConfigFileOutput {
	return o
}

func (o ConfigFileOutput) ToConfigFileOutputWithContext(ctx context.Context) ConfigFileOutput {
	return o
}

func (o ConfigFileOutput) ToConfigFilePtrOutput() ConfigFilePtrOutput {
	return o.ToConfigFilePtrOutputWithContext(context.Background())
}

func (o ConfigFileOutput) ToConfigFilePtrOutputWithContext(ctx context.Context) ConfigFilePtrOutput {
	return o.ApplyT(func(v ConfigFile) *ConfigFile {
		return &v
	}).(ConfigFilePtrOutput)
}

// The contents of the file.
func (o ConfigFileOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigFile) *string { return v.Content }).(pulumi.StringPtrOutput)
}

type ConfigFilePtrOutput struct{ *pulumi.OutputState }

func (ConfigFilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigFile)(nil)).Elem()
}

func (o ConfigFilePtrOutput) ToConfigFilePtrOutput() ConfigFilePtrOutput {
	return o
}

func (o ConfigFilePtrOutput) ToConfigFilePtrOutputWithContext(ctx context.Context) ConfigFilePtrOutput {
	return o
}

func (o ConfigFilePtrOutput) Elem() ConfigFileOutput {
	return o.ApplyT(func(v *ConfigFile) ConfigFile { return *v }).(ConfigFileOutput)
}

// The contents of the file.
func (o ConfigFilePtrOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigFile) *string {
		if v == nil {
			return nil
		}
		return v.Content
	}).(pulumi.StringPtrOutput)
}

// Label object for Deployments
type DeploymentLabelEntry struct {
	// Key of the label
	Key *string `pulumi:"key"`
	// Value of the label
	Value *string `pulumi:"value"`
}

// DeploymentLabelEntryInput is an input type that accepts DeploymentLabelEntryArgs and DeploymentLabelEntryOutput values.
// You can construct a concrete instance of `DeploymentLabelEntryInput` via:
//
//          DeploymentLabelEntryArgs{...}
type DeploymentLabelEntryInput interface {
	pulumi.Input

	ToDeploymentLabelEntryOutput() DeploymentLabelEntryOutput
	ToDeploymentLabelEntryOutputWithContext(context.Context) DeploymentLabelEntryOutput
}

// Label object for Deployments
type DeploymentLabelEntryArgs struct {
	// Key of the label
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Value of the label
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (DeploymentLabelEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentLabelEntry)(nil)).Elem()
}

func (i DeploymentLabelEntryArgs) ToDeploymentLabelEntryOutput() DeploymentLabelEntryOutput {
	return i.ToDeploymentLabelEntryOutputWithContext(context.Background())
}

func (i DeploymentLabelEntryArgs) ToDeploymentLabelEntryOutputWithContext(ctx context.Context) DeploymentLabelEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentLabelEntryOutput)
}

// DeploymentLabelEntryArrayInput is an input type that accepts DeploymentLabelEntryArray and DeploymentLabelEntryArrayOutput values.
// You can construct a concrete instance of `DeploymentLabelEntryArrayInput` via:
//
//          DeploymentLabelEntryArray{ DeploymentLabelEntryArgs{...} }
type DeploymentLabelEntryArrayInput interface {
	pulumi.Input

	ToDeploymentLabelEntryArrayOutput() DeploymentLabelEntryArrayOutput
	ToDeploymentLabelEntryArrayOutputWithContext(context.Context) DeploymentLabelEntryArrayOutput
}

type DeploymentLabelEntryArray []DeploymentLabelEntryInput

func (DeploymentLabelEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeploymentLabelEntry)(nil)).Elem()
}

func (i DeploymentLabelEntryArray) ToDeploymentLabelEntryArrayOutput() DeploymentLabelEntryArrayOutput {
	return i.ToDeploymentLabelEntryArrayOutputWithContext(context.Background())
}

func (i DeploymentLabelEntryArray) ToDeploymentLabelEntryArrayOutputWithContext(ctx context.Context) DeploymentLabelEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentLabelEntryArrayOutput)
}

// Label object for Deployments
type DeploymentLabelEntryOutput struct{ *pulumi.OutputState }

func (DeploymentLabelEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentLabelEntry)(nil)).Elem()
}

func (o DeploymentLabelEntryOutput) ToDeploymentLabelEntryOutput() DeploymentLabelEntryOutput {
	return o
}

func (o DeploymentLabelEntryOutput) ToDeploymentLabelEntryOutputWithContext(ctx context.Context) DeploymentLabelEntryOutput {
	return o
}

// Key of the label
func (o DeploymentLabelEntryOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentLabelEntry) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Value of the label
func (o DeploymentLabelEntryOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentLabelEntry) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type DeploymentLabelEntryArrayOutput struct{ *pulumi.OutputState }

func (DeploymentLabelEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeploymentLabelEntry)(nil)).Elem()
}

func (o DeploymentLabelEntryArrayOutput) ToDeploymentLabelEntryArrayOutput() DeploymentLabelEntryArrayOutput {
	return o
}

func (o DeploymentLabelEntryArrayOutput) ToDeploymentLabelEntryArrayOutputWithContext(ctx context.Context) DeploymentLabelEntryArrayOutput {
	return o
}

func (o DeploymentLabelEntryArrayOutput) Index(i pulumi.IntInput) DeploymentLabelEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DeploymentLabelEntry {
		return vs[0].([]DeploymentLabelEntry)[vs[1].(int)]
	}).(DeploymentLabelEntryOutput)
}

type DeploymentUpdate struct {
	// Output only. An optional user-provided description of the deployment after the current update has been applied.
	Description *string `pulumi:"description"`
	// Map of One Platform labels; provided by the client when the resource is created or updated. Specifically: Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?` Label values must be between 0 and 63 characters long and must conform to the regular expression `([a-z]([-a-z0-9]*[a-z0-9])?)?`.
	Labels []DeploymentUpdateLabelEntry `pulumi:"labels"`
	// Output only. URL of the manifest representing the update configuration of this deployment.
	Manifest *string `pulumi:"manifest"`
}

// DeploymentUpdateInput is an input type that accepts DeploymentUpdateArgs and DeploymentUpdateOutput values.
// You can construct a concrete instance of `DeploymentUpdateInput` via:
//
//          DeploymentUpdateArgs{...}
type DeploymentUpdateInput interface {
	pulumi.Input

	ToDeploymentUpdateOutput() DeploymentUpdateOutput
	ToDeploymentUpdateOutputWithContext(context.Context) DeploymentUpdateOutput
}

type DeploymentUpdateArgs struct {
	// Output only. An optional user-provided description of the deployment after the current update has been applied.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Map of One Platform labels; provided by the client when the resource is created or updated. Specifically: Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?` Label values must be between 0 and 63 characters long and must conform to the regular expression `([a-z]([-a-z0-9]*[a-z0-9])?)?`.
	Labels DeploymentUpdateLabelEntryArrayInput `pulumi:"labels"`
	// Output only. URL of the manifest representing the update configuration of this deployment.
	Manifest pulumi.StringPtrInput `pulumi:"manifest"`
}

func (DeploymentUpdateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentUpdate)(nil)).Elem()
}

func (i DeploymentUpdateArgs) ToDeploymentUpdateOutput() DeploymentUpdateOutput {
	return i.ToDeploymentUpdateOutputWithContext(context.Background())
}

func (i DeploymentUpdateArgs) ToDeploymentUpdateOutputWithContext(ctx context.Context) DeploymentUpdateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentUpdateOutput)
}

func (i DeploymentUpdateArgs) ToDeploymentUpdatePtrOutput() DeploymentUpdatePtrOutput {
	return i.ToDeploymentUpdatePtrOutputWithContext(context.Background())
}

func (i DeploymentUpdateArgs) ToDeploymentUpdatePtrOutputWithContext(ctx context.Context) DeploymentUpdatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentUpdateOutput).ToDeploymentUpdatePtrOutputWithContext(ctx)
}

// DeploymentUpdatePtrInput is an input type that accepts DeploymentUpdateArgs, DeploymentUpdatePtr and DeploymentUpdatePtrOutput values.
// You can construct a concrete instance of `DeploymentUpdatePtrInput` via:
//
//          DeploymentUpdateArgs{...}
//
//  or:
//
//          nil
type DeploymentUpdatePtrInput interface {
	pulumi.Input

	ToDeploymentUpdatePtrOutput() DeploymentUpdatePtrOutput
	ToDeploymentUpdatePtrOutputWithContext(context.Context) DeploymentUpdatePtrOutput
}

type deploymentUpdatePtrType DeploymentUpdateArgs

func DeploymentUpdatePtr(v *DeploymentUpdateArgs) DeploymentUpdatePtrInput {
	return (*deploymentUpdatePtrType)(v)
}

func (*deploymentUpdatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentUpdate)(nil)).Elem()
}

func (i *deploymentUpdatePtrType) ToDeploymentUpdatePtrOutput() DeploymentUpdatePtrOutput {
	return i.ToDeploymentUpdatePtrOutputWithContext(context.Background())
}

func (i *deploymentUpdatePtrType) ToDeploymentUpdatePtrOutputWithContext(ctx context.Context) DeploymentUpdatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentUpdatePtrOutput)
}

type DeploymentUpdateOutput struct{ *pulumi.OutputState }

func (DeploymentUpdateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentUpdate)(nil)).Elem()
}

func (o DeploymentUpdateOutput) ToDeploymentUpdateOutput() DeploymentUpdateOutput {
	return o
}

func (o DeploymentUpdateOutput) ToDeploymentUpdateOutputWithContext(ctx context.Context) DeploymentUpdateOutput {
	return o
}

func (o DeploymentUpdateOutput) ToDeploymentUpdatePtrOutput() DeploymentUpdatePtrOutput {
	return o.ToDeploymentUpdatePtrOutputWithContext(context.Background())
}

func (o DeploymentUpdateOutput) ToDeploymentUpdatePtrOutputWithContext(ctx context.Context) DeploymentUpdatePtrOutput {
	return o.ApplyT(func(v DeploymentUpdate) *DeploymentUpdate {
		return &v
	}).(DeploymentUpdatePtrOutput)
}

// Output only. An optional user-provided description of the deployment after the current update has been applied.
func (o DeploymentUpdateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentUpdate) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Map of One Platform labels; provided by the client when the resource is created or updated. Specifically: Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?` Label values must be between 0 and 63 characters long and must conform to the regular expression `([a-z]([-a-z0-9]*[a-z0-9])?)?`.
func (o DeploymentUpdateOutput) Labels() DeploymentUpdateLabelEntryArrayOutput {
	return o.ApplyT(func(v DeploymentUpdate) []DeploymentUpdateLabelEntry { return v.Labels }).(DeploymentUpdateLabelEntryArrayOutput)
}

// Output only. URL of the manifest representing the update configuration of this deployment.
func (o DeploymentUpdateOutput) Manifest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentUpdate) *string { return v.Manifest }).(pulumi.StringPtrOutput)
}

type DeploymentUpdatePtrOutput struct{ *pulumi.OutputState }

func (DeploymentUpdatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentUpdate)(nil)).Elem()
}

func (o DeploymentUpdatePtrOutput) ToDeploymentUpdatePtrOutput() DeploymentUpdatePtrOutput {
	return o
}

func (o DeploymentUpdatePtrOutput) ToDeploymentUpdatePtrOutputWithContext(ctx context.Context) DeploymentUpdatePtrOutput {
	return o
}

func (o DeploymentUpdatePtrOutput) Elem() DeploymentUpdateOutput {
	return o.ApplyT(func(v *DeploymentUpdate) DeploymentUpdate { return *v }).(DeploymentUpdateOutput)
}

// Output only. An optional user-provided description of the deployment after the current update has been applied.
func (o DeploymentUpdatePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeploymentUpdate) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Map of One Platform labels; provided by the client when the resource is created or updated. Specifically: Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?` Label values must be between 0 and 63 characters long and must conform to the regular expression `([a-z]([-a-z0-9]*[a-z0-9])?)?`.
func (o DeploymentUpdatePtrOutput) Labels() DeploymentUpdateLabelEntryArrayOutput {
	return o.ApplyT(func(v *DeploymentUpdate) []DeploymentUpdateLabelEntry {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(DeploymentUpdateLabelEntryArrayOutput)
}

// Output only. URL of the manifest representing the update configuration of this deployment.
func (o DeploymentUpdatePtrOutput) Manifest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeploymentUpdate) *string {
		if v == nil {
			return nil
		}
		return v.Manifest
	}).(pulumi.StringPtrOutput)
}

// Label object for DeploymentUpdate
type DeploymentUpdateLabelEntry struct {
	// Key of the label
	Key *string `pulumi:"key"`
	// Value of the label
	Value *string `pulumi:"value"`
}

// DeploymentUpdateLabelEntryInput is an input type that accepts DeploymentUpdateLabelEntryArgs and DeploymentUpdateLabelEntryOutput values.
// You can construct a concrete instance of `DeploymentUpdateLabelEntryInput` via:
//
//          DeploymentUpdateLabelEntryArgs{...}
type DeploymentUpdateLabelEntryInput interface {
	pulumi.Input

	ToDeploymentUpdateLabelEntryOutput() DeploymentUpdateLabelEntryOutput
	ToDeploymentUpdateLabelEntryOutputWithContext(context.Context) DeploymentUpdateLabelEntryOutput
}

// Label object for DeploymentUpdate
type DeploymentUpdateLabelEntryArgs struct {
	// Key of the label
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Value of the label
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (DeploymentUpdateLabelEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentUpdateLabelEntry)(nil)).Elem()
}

func (i DeploymentUpdateLabelEntryArgs) ToDeploymentUpdateLabelEntryOutput() DeploymentUpdateLabelEntryOutput {
	return i.ToDeploymentUpdateLabelEntryOutputWithContext(context.Background())
}

func (i DeploymentUpdateLabelEntryArgs) ToDeploymentUpdateLabelEntryOutputWithContext(ctx context.Context) DeploymentUpdateLabelEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentUpdateLabelEntryOutput)
}

// DeploymentUpdateLabelEntryArrayInput is an input type that accepts DeploymentUpdateLabelEntryArray and DeploymentUpdateLabelEntryArrayOutput values.
// You can construct a concrete instance of `DeploymentUpdateLabelEntryArrayInput` via:
//
//          DeploymentUpdateLabelEntryArray{ DeploymentUpdateLabelEntryArgs{...} }
type DeploymentUpdateLabelEntryArrayInput interface {
	pulumi.Input

	ToDeploymentUpdateLabelEntryArrayOutput() DeploymentUpdateLabelEntryArrayOutput
	ToDeploymentUpdateLabelEntryArrayOutputWithContext(context.Context) DeploymentUpdateLabelEntryArrayOutput
}

type DeploymentUpdateLabelEntryArray []DeploymentUpdateLabelEntryInput

func (DeploymentUpdateLabelEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeploymentUpdateLabelEntry)(nil)).Elem()
}

func (i DeploymentUpdateLabelEntryArray) ToDeploymentUpdateLabelEntryArrayOutput() DeploymentUpdateLabelEntryArrayOutput {
	return i.ToDeploymentUpdateLabelEntryArrayOutputWithContext(context.Background())
}

func (i DeploymentUpdateLabelEntryArray) ToDeploymentUpdateLabelEntryArrayOutputWithContext(ctx context.Context) DeploymentUpdateLabelEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentUpdateLabelEntryArrayOutput)
}

// Label object for DeploymentUpdate
type DeploymentUpdateLabelEntryOutput struct{ *pulumi.OutputState }

func (DeploymentUpdateLabelEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentUpdateLabelEntry)(nil)).Elem()
}

func (o DeploymentUpdateLabelEntryOutput) ToDeploymentUpdateLabelEntryOutput() DeploymentUpdateLabelEntryOutput {
	return o
}

func (o DeploymentUpdateLabelEntryOutput) ToDeploymentUpdateLabelEntryOutputWithContext(ctx context.Context) DeploymentUpdateLabelEntryOutput {
	return o
}

// Key of the label
func (o DeploymentUpdateLabelEntryOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentUpdateLabelEntry) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Value of the label
func (o DeploymentUpdateLabelEntryOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentUpdateLabelEntry) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type DeploymentUpdateLabelEntryArrayOutput struct{ *pulumi.OutputState }

func (DeploymentUpdateLabelEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeploymentUpdateLabelEntry)(nil)).Elem()
}

func (o DeploymentUpdateLabelEntryArrayOutput) ToDeploymentUpdateLabelEntryArrayOutput() DeploymentUpdateLabelEntryArrayOutput {
	return o
}

func (o DeploymentUpdateLabelEntryArrayOutput) ToDeploymentUpdateLabelEntryArrayOutputWithContext(ctx context.Context) DeploymentUpdateLabelEntryArrayOutput {
	return o
}

func (o DeploymentUpdateLabelEntryArrayOutput) Index(i pulumi.IntInput) DeploymentUpdateLabelEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DeploymentUpdateLabelEntry {
		return vs[0].([]DeploymentUpdateLabelEntry)[vs[1].(int)]
	}).(DeploymentUpdateLabelEntryOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//          ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//          ExprArgs{...}
//
//  or:
//
//          nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyT(func(v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr { return *v }).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

type ImportFile struct {
	// The contents of the file.
	Content *string `pulumi:"content"`
	// The name of the file.
	Name *string `pulumi:"name"`
}

// ImportFileInput is an input type that accepts ImportFileArgs and ImportFileOutput values.
// You can construct a concrete instance of `ImportFileInput` via:
//
//          ImportFileArgs{...}
type ImportFileInput interface {
	pulumi.Input

	ToImportFileOutput() ImportFileOutput
	ToImportFileOutputWithContext(context.Context) ImportFileOutput
}

type ImportFileArgs struct {
	// The contents of the file.
	Content pulumi.StringPtrInput `pulumi:"content"`
	// The name of the file.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ImportFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImportFile)(nil)).Elem()
}

func (i ImportFileArgs) ToImportFileOutput() ImportFileOutput {
	return i.ToImportFileOutputWithContext(context.Background())
}

func (i ImportFileArgs) ToImportFileOutputWithContext(ctx context.Context) ImportFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImportFileOutput)
}

// ImportFileArrayInput is an input type that accepts ImportFileArray and ImportFileArrayOutput values.
// You can construct a concrete instance of `ImportFileArrayInput` via:
//
//          ImportFileArray{ ImportFileArgs{...} }
type ImportFileArrayInput interface {
	pulumi.Input

	ToImportFileArrayOutput() ImportFileArrayOutput
	ToImportFileArrayOutputWithContext(context.Context) ImportFileArrayOutput
}

type ImportFileArray []ImportFileInput

func (ImportFileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImportFile)(nil)).Elem()
}

func (i ImportFileArray) ToImportFileArrayOutput() ImportFileArrayOutput {
	return i.ToImportFileArrayOutputWithContext(context.Background())
}

func (i ImportFileArray) ToImportFileArrayOutputWithContext(ctx context.Context) ImportFileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImportFileArrayOutput)
}

type ImportFileOutput struct{ *pulumi.OutputState }

func (ImportFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImportFile)(nil)).Elem()
}

func (o ImportFileOutput) ToImportFileOutput() ImportFileOutput {
	return o
}

func (o ImportFileOutput) ToImportFileOutputWithContext(ctx context.Context) ImportFileOutput {
	return o
}

// The contents of the file.
func (o ImportFileOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImportFile) *string { return v.Content }).(pulumi.StringPtrOutput)
}

// The name of the file.
func (o ImportFileOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImportFile) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ImportFileArrayOutput struct{ *pulumi.OutputState }

func (ImportFileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImportFile)(nil)).Elem()
}

func (o ImportFileArrayOutput) ToImportFileArrayOutput() ImportFileArrayOutput {
	return o
}

func (o ImportFileArrayOutput) ToImportFileArrayOutputWithContext(ctx context.Context) ImportFileArrayOutput {
	return o
}

func (o ImportFileArrayOutput) Index(i pulumi.IntInput) ImportFileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImportFile {
		return vs[0].([]ImportFile)[vs[1].(int)]
	}).(ImportFileOutput)
}

// Represents an Operation resource. Google Compute Engine has three Operation resources: * [Global](/compute/docs/reference/rest/{$api_version}/globalOperations) * [Regional](/compute/docs/reference/rest/{$api_version}/regionOperations) * [Zonal](/compute/docs/reference/rest/{$api_version}/zoneOperations) You can use an operation resource to manage asynchronous API requests. For more information, read Handling API responses. Operations can be global, regional or zonal. - For global operations, use the `globalOperations` resource. - For regional operations, use the `regionOperations` resource. - For zonal operations, use the `zonalOperations` resource. For more information, read Global, Regional, and Zonal Resources.
type Operation struct {
	// [Output Only] The value of `requestId` if you provided it in the request. Not present otherwise.
	ClientOperationId *string `pulumi:"clientOperationId"`
	// [Deprecated] This field is deprecated.
	CreationTimestamp *string `pulumi:"creationTimestamp"`
	// [Output Only] A textual description of the operation, which is set when the operation is created.
	Description *string `pulumi:"description"`
	// [Output Only] The time that this operation was completed. This value is in RFC3339 text format.
	EndTime *string `pulumi:"endTime"`
	// [Output Only] If errors are generated during processing of the operation, this field will be populated.
	Error map[string]string `pulumi:"error"`
	// [Output Only] If the operation fails, this field contains the HTTP error message that was returned, such as `NOT FOUND`.
	HttpErrorMessage *string `pulumi:"httpErrorMessage"`
	// [Output Only] If the operation fails, this field contains the HTTP error status code that was returned. For example, a `404` means the resource was not found.
	HttpErrorStatusCode *int `pulumi:"httpErrorStatusCode"`
	// [Output Only] The unique identifier for the operation. This identifier is defined by the server.
	Id *string `pulumi:"id"`
	// [Output Only] The time that this operation was requested. This value is in RFC3339 text format.
	InsertTime *string `pulumi:"insertTime"`
	// [Output Only] Type of the resource. Always `compute#operation` for Operation resources.
	Kind *string `pulumi:"kind"`
	// [Output Only] Name of the operation.
	Name *string `pulumi:"name"`
	// [Output Only] An ID that represents a group of operations, such as when a group of operations results from a `bulkInsert` API request.
	OperationGroupId *string `pulumi:"operationGroupId"`
	// [Output Only] The type of operation, such as `insert`, `update`, or `delete`, and so on.
	OperationType *string `pulumi:"operationType"`
	// [Output Only] An optional progress indicator that ranges from 0 to 100. There is no requirement that this be linear or support any granularity of operations. This should not be used to guess when the operation will be complete. This number should monotonically increase as the operation progresses.
	Progress *int `pulumi:"progress"`
	// [Output Only] The URL of the region where the operation resides. Only applicable when performing regional operations.
	Region *string `pulumi:"region"`
	// [Output Only] Server-defined URL for the resource.
	SelfLink *string `pulumi:"selfLink"`
	// [Output Only] The time that this operation was started by the server. This value is in RFC3339 text format.
	StartTime *string `pulumi:"startTime"`
	// [Output Only] The status of the operation, which can be one of the following: `PENDING`, `RUNNING`, or `DONE`.
	Status *string `pulumi:"status"`
	// [Output Only] An optional textual description of the current status of the operation.
	StatusMessage *string `pulumi:"statusMessage"`
	// [Output Only] The unique target ID, which identifies a specific incarnation of the target resource.
	TargetId *string `pulumi:"targetId"`
	// [Output Only] The URL of the resource that the operation modifies. For operations related to creating a snapshot, this points to the persistent disk that the snapshot was created from.
	TargetLink *string `pulumi:"targetLink"`
	// [Output Only] User who requested the operation, for example: `user@example.com`.
	User *string `pulumi:"user"`
	// [Output Only] If warning messages are generated during processing of the operation, this field will be populated.
	Warnings []map[string]string `pulumi:"warnings"`
	// [Output Only] The URL of the zone where the operation resides. Only applicable when performing per-zone operations.
	Zone *string `pulumi:"zone"`
}

// OperationInput is an input type that accepts OperationArgs and OperationOutput values.
// You can construct a concrete instance of `OperationInput` via:
//
//          OperationArgs{...}
type OperationInput interface {
	pulumi.Input

	ToOperationOutput() OperationOutput
	ToOperationOutputWithContext(context.Context) OperationOutput
}

// Represents an Operation resource. Google Compute Engine has three Operation resources: * [Global](/compute/docs/reference/rest/{$api_version}/globalOperations) * [Regional](/compute/docs/reference/rest/{$api_version}/regionOperations) * [Zonal](/compute/docs/reference/rest/{$api_version}/zoneOperations) You can use an operation resource to manage asynchronous API requests. For more information, read Handling API responses. Operations can be global, regional or zonal. - For global operations, use the `globalOperations` resource. - For regional operations, use the `regionOperations` resource. - For zonal operations, use the `zonalOperations` resource. For more information, read Global, Regional, and Zonal Resources.
type OperationArgs struct {
	// [Output Only] The value of `requestId` if you provided it in the request. Not present otherwise.
	ClientOperationId pulumi.StringPtrInput `pulumi:"clientOperationId"`
	// [Deprecated] This field is deprecated.
	CreationTimestamp pulumi.StringPtrInput `pulumi:"creationTimestamp"`
	// [Output Only] A textual description of the operation, which is set when the operation is created.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// [Output Only] The time that this operation was completed. This value is in RFC3339 text format.
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// [Output Only] If errors are generated during processing of the operation, this field will be populated.
	Error pulumi.StringMapInput `pulumi:"error"`
	// [Output Only] If the operation fails, this field contains the HTTP error message that was returned, such as `NOT FOUND`.
	HttpErrorMessage pulumi.StringPtrInput `pulumi:"httpErrorMessage"`
	// [Output Only] If the operation fails, this field contains the HTTP error status code that was returned. For example, a `404` means the resource was not found.
	HttpErrorStatusCode pulumi.IntPtrInput `pulumi:"httpErrorStatusCode"`
	// [Output Only] The unique identifier for the operation. This identifier is defined by the server.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// [Output Only] The time that this operation was requested. This value is in RFC3339 text format.
	InsertTime pulumi.StringPtrInput `pulumi:"insertTime"`
	// [Output Only] Type of the resource. Always `compute#operation` for Operation resources.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// [Output Only] Name of the operation.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [Output Only] An ID that represents a group of operations, such as when a group of operations results from a `bulkInsert` API request.
	OperationGroupId pulumi.StringPtrInput `pulumi:"operationGroupId"`
	// [Output Only] The type of operation, such as `insert`, `update`, or `delete`, and so on.
	OperationType pulumi.StringPtrInput `pulumi:"operationType"`
	// [Output Only] An optional progress indicator that ranges from 0 to 100. There is no requirement that this be linear or support any granularity of operations. This should not be used to guess when the operation will be complete. This number should monotonically increase as the operation progresses.
	Progress pulumi.IntPtrInput `pulumi:"progress"`
	// [Output Only] The URL of the region where the operation resides. Only applicable when performing regional operations.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// [Output Only] Server-defined URL for the resource.
	SelfLink pulumi.StringPtrInput `pulumi:"selfLink"`
	// [Output Only] The time that this operation was started by the server. This value is in RFC3339 text format.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
	// [Output Only] The status of the operation, which can be one of the following: `PENDING`, `RUNNING`, or `DONE`.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// [Output Only] An optional textual description of the current status of the operation.
	StatusMessage pulumi.StringPtrInput `pulumi:"statusMessage"`
	// [Output Only] The unique target ID, which identifies a specific incarnation of the target resource.
	TargetId pulumi.StringPtrInput `pulumi:"targetId"`
	// [Output Only] The URL of the resource that the operation modifies. For operations related to creating a snapshot, this points to the persistent disk that the snapshot was created from.
	TargetLink pulumi.StringPtrInput `pulumi:"targetLink"`
	// [Output Only] User who requested the operation, for example: `user@example.com`.
	User pulumi.StringPtrInput `pulumi:"user"`
	// [Output Only] If warning messages are generated during processing of the operation, this field will be populated.
	Warnings pulumi.StringMapArrayInput `pulumi:"warnings"`
	// [Output Only] The URL of the zone where the operation resides. Only applicable when performing per-zone operations.
	Zone pulumi.StringPtrInput `pulumi:"zone"`
}

func (OperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Operation)(nil)).Elem()
}

func (i OperationArgs) ToOperationOutput() OperationOutput {
	return i.ToOperationOutputWithContext(context.Background())
}

func (i OperationArgs) ToOperationOutputWithContext(ctx context.Context) OperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperationOutput)
}

func (i OperationArgs) ToOperationPtrOutput() OperationPtrOutput {
	return i.ToOperationPtrOutputWithContext(context.Background())
}

func (i OperationArgs) ToOperationPtrOutputWithContext(ctx context.Context) OperationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperationOutput).ToOperationPtrOutputWithContext(ctx)
}

// OperationPtrInput is an input type that accepts OperationArgs, OperationPtr and OperationPtrOutput values.
// You can construct a concrete instance of `OperationPtrInput` via:
//
//          OperationArgs{...}
//
//  or:
//
//          nil
type OperationPtrInput interface {
	pulumi.Input

	ToOperationPtrOutput() OperationPtrOutput
	ToOperationPtrOutputWithContext(context.Context) OperationPtrOutput
}

type operationPtrType OperationArgs

func OperationPtr(v *OperationArgs) OperationPtrInput {
	return (*operationPtrType)(v)
}

func (*operationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Operation)(nil)).Elem()
}

func (i *operationPtrType) ToOperationPtrOutput() OperationPtrOutput {
	return i.ToOperationPtrOutputWithContext(context.Background())
}

func (i *operationPtrType) ToOperationPtrOutputWithContext(ctx context.Context) OperationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperationPtrOutput)
}

// Represents an Operation resource. Google Compute Engine has three Operation resources: * [Global](/compute/docs/reference/rest/{$api_version}/globalOperations) * [Regional](/compute/docs/reference/rest/{$api_version}/regionOperations) * [Zonal](/compute/docs/reference/rest/{$api_version}/zoneOperations) You can use an operation resource to manage asynchronous API requests. For more information, read Handling API responses. Operations can be global, regional or zonal. - For global operations, use the `globalOperations` resource. - For regional operations, use the `regionOperations` resource. - For zonal operations, use the `zonalOperations` resource. For more information, read Global, Regional, and Zonal Resources.
type OperationOutput struct{ *pulumi.OutputState }

func (OperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Operation)(nil)).Elem()
}

func (o OperationOutput) ToOperationOutput() OperationOutput {
	return o
}

func (o OperationOutput) ToOperationOutputWithContext(ctx context.Context) OperationOutput {
	return o
}

func (o OperationOutput) ToOperationPtrOutput() OperationPtrOutput {
	return o.ToOperationPtrOutputWithContext(context.Background())
}

func (o OperationOutput) ToOperationPtrOutputWithContext(ctx context.Context) OperationPtrOutput {
	return o.ApplyT(func(v Operation) *Operation {
		return &v
	}).(OperationPtrOutput)
}

// [Output Only] The value of `requestId` if you provided it in the request. Not present otherwise.
func (o OperationOutput) ClientOperationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Operation) *string { return v.ClientOperationId }).(pulumi.StringPtrOutput)
}

// [Deprecated] This field is deprecated.
func (o OperationOutput) CreationTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Operation) *string { return v.CreationTimestamp }).(pulumi.StringPtrOutput)
}

// [Output Only] A textual description of the operation, which is set when the operation is created.
func (o OperationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Operation) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// [Output Only] The time that this operation was completed. This value is in RFC3339 text format.
func (o OperationOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Operation) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// [Output Only] If errors are generated during processing of the operation, this field will be populated.
func (o OperationOutput) Error() pulumi.StringMapOutput {
	return o.ApplyT(func(v Operation) map[string]string { return v.Error }).(pulumi.StringMapOutput)
}

// [Output Only] If the operation fails, this field contains the HTTP error message that was returned, such as `NOT FOUND`.
func (o OperationOutput) HttpErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Operation) *string { return v.HttpErrorMessage }).(pulumi.StringPtrOutput)
}

// [Output Only] If the operation fails, this field contains the HTTP error status code that was returned. For example, a `404` means the resource was not found.
func (o OperationOutput) HttpErrorStatusCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Operation) *int { return v.HttpErrorStatusCode }).(pulumi.IntPtrOutput)
}

// [Output Only] The unique identifier for the operation. This identifier is defined by the server.
func (o OperationOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Operation) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// [Output Only] The time that this operation was requested. This value is in RFC3339 text format.
func (o OperationOutput) InsertTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Operation) *string { return v.InsertTime }).(pulumi.StringPtrOutput)
}

// [Output Only] Type of the resource. Always `compute#operation` for Operation resources.
func (o OperationOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Operation) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// [Output Only] Name of the operation.
func (o OperationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Operation) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [Output Only] An ID that represents a group of operations, such as when a group of operations results from a `bulkInsert` API request.
func (o OperationOutput) OperationGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Operation) *string { return v.OperationGroupId }).(pulumi.StringPtrOutput)
}

// [Output Only] The type of operation, such as `insert`, `update`, or `delete`, and so on.
func (o OperationOutput) OperationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Operation) *string { return v.OperationType }).(pulumi.StringPtrOutput)
}

// [Output Only] An optional progress indicator that ranges from 0 to 100. There is no requirement that this be linear or support any granularity of operations. This should not be used to guess when the operation will be complete. This number should monotonically increase as the operation progresses.
func (o OperationOutput) Progress() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Operation) *int { return v.Progress }).(pulumi.IntPtrOutput)
}

// [Output Only] The URL of the region where the operation resides. Only applicable when performing regional operations.
func (o OperationOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Operation) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// [Output Only] Server-defined URL for the resource.
func (o OperationOutput) SelfLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Operation) *string { return v.SelfLink }).(pulumi.StringPtrOutput)
}

// [Output Only] The time that this operation was started by the server. This value is in RFC3339 text format.
func (o OperationOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Operation) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// [Output Only] The status of the operation, which can be one of the following: `PENDING`, `RUNNING`, or `DONE`.
func (o OperationOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Operation) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// [Output Only] An optional textual description of the current status of the operation.
func (o OperationOutput) StatusMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Operation) *string { return v.StatusMessage }).(pulumi.StringPtrOutput)
}

// [Output Only] The unique target ID, which identifies a specific incarnation of the target resource.
func (o OperationOutput) TargetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Operation) *string { return v.TargetId }).(pulumi.StringPtrOutput)
}

// [Output Only] The URL of the resource that the operation modifies. For operations related to creating a snapshot, this points to the persistent disk that the snapshot was created from.
func (o OperationOutput) TargetLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Operation) *string { return v.TargetLink }).(pulumi.StringPtrOutput)
}

// [Output Only] User who requested the operation, for example: `user@example.com`.
func (o OperationOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Operation) *string { return v.User }).(pulumi.StringPtrOutput)
}

// [Output Only] If warning messages are generated during processing of the operation, this field will be populated.
func (o OperationOutput) Warnings() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v Operation) []map[string]string { return v.Warnings }).(pulumi.StringMapArrayOutput)
}

// [Output Only] The URL of the zone where the operation resides. Only applicable when performing per-zone operations.
func (o OperationOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Operation) *string { return v.Zone }).(pulumi.StringPtrOutput)
}

type OperationPtrOutput struct{ *pulumi.OutputState }

func (OperationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Operation)(nil)).Elem()
}

func (o OperationPtrOutput) ToOperationPtrOutput() OperationPtrOutput {
	return o
}

func (o OperationPtrOutput) ToOperationPtrOutputWithContext(ctx context.Context) OperationPtrOutput {
	return o
}

func (o OperationPtrOutput) Elem() OperationOutput {
	return o.ApplyT(func(v *Operation) Operation { return *v }).(OperationOutput)
}

// [Output Only] The value of `requestId` if you provided it in the request. Not present otherwise.
func (o OperationPtrOutput) ClientOperationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Operation) *string {
		if v == nil {
			return nil
		}
		return v.ClientOperationId
	}).(pulumi.StringPtrOutput)
}

// [Deprecated] This field is deprecated.
func (o OperationPtrOutput) CreationTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Operation) *string {
		if v == nil {
			return nil
		}
		return v.CreationTimestamp
	}).(pulumi.StringPtrOutput)
}

// [Output Only] A textual description of the operation, which is set when the operation is created.
func (o OperationPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Operation) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// [Output Only] The time that this operation was completed. This value is in RFC3339 text format.
func (o OperationPtrOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Operation) *string {
		if v == nil {
			return nil
		}
		return v.EndTime
	}).(pulumi.StringPtrOutput)
}

// [Output Only] If errors are generated during processing of the operation, this field will be populated.
func (o OperationPtrOutput) Error() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Operation) map[string]string {
		if v == nil {
			return nil
		}
		return v.Error
	}).(pulumi.StringMapOutput)
}

// [Output Only] If the operation fails, this field contains the HTTP error message that was returned, such as `NOT FOUND`.
func (o OperationPtrOutput) HttpErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Operation) *string {
		if v == nil {
			return nil
		}
		return v.HttpErrorMessage
	}).(pulumi.StringPtrOutput)
}

// [Output Only] If the operation fails, this field contains the HTTP error status code that was returned. For example, a `404` means the resource was not found.
func (o OperationPtrOutput) HttpErrorStatusCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Operation) *int {
		if v == nil {
			return nil
		}
		return v.HttpErrorStatusCode
	}).(pulumi.IntPtrOutput)
}

// [Output Only] The unique identifier for the operation. This identifier is defined by the server.
func (o OperationPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Operation) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// [Output Only] The time that this operation was requested. This value is in RFC3339 text format.
func (o OperationPtrOutput) InsertTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Operation) *string {
		if v == nil {
			return nil
		}
		return v.InsertTime
	}).(pulumi.StringPtrOutput)
}

// [Output Only] Type of the resource. Always `compute#operation` for Operation resources.
func (o OperationPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Operation) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// [Output Only] Name of the operation.
func (o OperationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Operation) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// [Output Only] An ID that represents a group of operations, such as when a group of operations results from a `bulkInsert` API request.
func (o OperationPtrOutput) OperationGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Operation) *string {
		if v == nil {
			return nil
		}
		return v.OperationGroupId
	}).(pulumi.StringPtrOutput)
}

// [Output Only] The type of operation, such as `insert`, `update`, or `delete`, and so on.
func (o OperationPtrOutput) OperationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Operation) *string {
		if v == nil {
			return nil
		}
		return v.OperationType
	}).(pulumi.StringPtrOutput)
}

// [Output Only] An optional progress indicator that ranges from 0 to 100. There is no requirement that this be linear or support any granularity of operations. This should not be used to guess when the operation will be complete. This number should monotonically increase as the operation progresses.
func (o OperationPtrOutput) Progress() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Operation) *int {
		if v == nil {
			return nil
		}
		return v.Progress
	}).(pulumi.IntPtrOutput)
}

// [Output Only] The URL of the region where the operation resides. Only applicable when performing regional operations.
func (o OperationPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Operation) *string {
		if v == nil {
			return nil
		}
		return v.Region
	}).(pulumi.StringPtrOutput)
}

// [Output Only] Server-defined URL for the resource.
func (o OperationPtrOutput) SelfLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Operation) *string {
		if v == nil {
			return nil
		}
		return v.SelfLink
	}).(pulumi.StringPtrOutput)
}

// [Output Only] The time that this operation was started by the server. This value is in RFC3339 text format.
func (o OperationPtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Operation) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// [Output Only] The status of the operation, which can be one of the following: `PENDING`, `RUNNING`, or `DONE`.
func (o OperationPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Operation) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// [Output Only] An optional textual description of the current status of the operation.
func (o OperationPtrOutput) StatusMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Operation) *string {
		if v == nil {
			return nil
		}
		return v.StatusMessage
	}).(pulumi.StringPtrOutput)
}

// [Output Only] The unique target ID, which identifies a specific incarnation of the target resource.
func (o OperationPtrOutput) TargetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Operation) *string {
		if v == nil {
			return nil
		}
		return v.TargetId
	}).(pulumi.StringPtrOutput)
}

// [Output Only] The URL of the resource that the operation modifies. For operations related to creating a snapshot, this points to the persistent disk that the snapshot was created from.
func (o OperationPtrOutput) TargetLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Operation) *string {
		if v == nil {
			return nil
		}
		return v.TargetLink
	}).(pulumi.StringPtrOutput)
}

// [Output Only] User who requested the operation, for example: `user@example.com`.
func (o OperationPtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Operation) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

// [Output Only] If warning messages are generated during processing of the operation, this field will be populated.
func (o OperationPtrOutput) Warnings() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v *Operation) []map[string]string {
		if v == nil {
			return nil
		}
		return v.Warnings
	}).(pulumi.StringMapArrayOutput)
}

// [Output Only] The URL of the zone where the operation resides. Only applicable when performing per-zone operations.
func (o OperationPtrOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Operation) *string {
		if v == nil {
			return nil
		}
		return v.Zone
	}).(pulumi.StringPtrOutput)
}

// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
type Policy struct {
	// Specifies cloud audit logging configuration for this policy.
	AuditConfigs []AuditConfig `pulumi:"auditConfigs"`
	// Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
	Bindings []Binding `pulumi:"bindings"`
	// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
	Etag *string `pulumi:"etag"`
	// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Version *int `pulumi:"version"`
}

// PolicyInput is an input type that accepts PolicyArgs and PolicyOutput values.
// You can construct a concrete instance of `PolicyInput` via:
//
//          PolicyArgs{...}
type PolicyInput interface {
	pulumi.Input

	ToPolicyOutput() PolicyOutput
	ToPolicyOutputWithContext(context.Context) PolicyOutput
}

// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
type PolicyArgs struct {
	// Specifies cloud audit logging configuration for this policy.
	AuditConfigs AuditConfigArrayInput `pulumi:"auditConfigs"`
	// Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
	Bindings BindingArrayInput `pulumi:"bindings"`
	// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
	Etag pulumi.StringPtrInput `pulumi:"etag"`
	// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Version pulumi.IntPtrInput `pulumi:"version"`
}

func (PolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Policy)(nil)).Elem()
}

func (i PolicyArgs) ToPolicyOutput() PolicyOutput {
	return i.ToPolicyOutputWithContext(context.Background())
}

func (i PolicyArgs) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyOutput)
}

func (i PolicyArgs) ToPolicyPtrOutput() PolicyPtrOutput {
	return i.ToPolicyPtrOutputWithContext(context.Background())
}

func (i PolicyArgs) ToPolicyPtrOutputWithContext(ctx context.Context) PolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyOutput).ToPolicyPtrOutputWithContext(ctx)
}

// PolicyPtrInput is an input type that accepts PolicyArgs, PolicyPtr and PolicyPtrOutput values.
// You can construct a concrete instance of `PolicyPtrInput` via:
//
//          PolicyArgs{...}
//
//  or:
//
//          nil
type PolicyPtrInput interface {
	pulumi.Input

	ToPolicyPtrOutput() PolicyPtrOutput
	ToPolicyPtrOutputWithContext(context.Context) PolicyPtrOutput
}

type policyPtrType PolicyArgs

func PolicyPtr(v *PolicyArgs) PolicyPtrInput {
	return (*policyPtrType)(v)
}

func (*policyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Policy)(nil)).Elem()
}

func (i *policyPtrType) ToPolicyPtrOutput() PolicyPtrOutput {
	return i.ToPolicyPtrOutputWithContext(context.Background())
}

func (i *policyPtrType) ToPolicyPtrOutputWithContext(ctx context.Context) PolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyPtrOutput)
}

// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
type PolicyOutput struct{ *pulumi.OutputState }

func (PolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Policy)(nil)).Elem()
}

func (o PolicyOutput) ToPolicyOutput() PolicyOutput {
	return o
}

func (o PolicyOutput) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return o
}

func (o PolicyOutput) ToPolicyPtrOutput() PolicyPtrOutput {
	return o.ToPolicyPtrOutputWithContext(context.Background())
}

func (o PolicyOutput) ToPolicyPtrOutputWithContext(ctx context.Context) PolicyPtrOutput {
	return o.ApplyT(func(v Policy) *Policy {
		return &v
	}).(PolicyPtrOutput)
}

// Specifies cloud audit logging configuration for this policy.
func (o PolicyOutput) AuditConfigs() AuditConfigArrayOutput {
	return o.ApplyT(func(v Policy) []AuditConfig { return v.AuditConfigs }).(AuditConfigArrayOutput)
}

// Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
func (o PolicyOutput) Bindings() BindingArrayOutput {
	return o.ApplyT(func(v Policy) []Binding { return v.Bindings }).(BindingArrayOutput)
}

// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
func (o PolicyOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Policy) *string { return v.Etag }).(pulumi.StringPtrOutput)
}

// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o PolicyOutput) Version() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Policy) *int { return v.Version }).(pulumi.IntPtrOutput)
}

type PolicyPtrOutput struct{ *pulumi.OutputState }

func (PolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Policy)(nil)).Elem()
}

func (o PolicyPtrOutput) ToPolicyPtrOutput() PolicyPtrOutput {
	return o
}

func (o PolicyPtrOutput) ToPolicyPtrOutputWithContext(ctx context.Context) PolicyPtrOutput {
	return o
}

func (o PolicyPtrOutput) Elem() PolicyOutput {
	return o.ApplyT(func(v *Policy) Policy { return *v }).(PolicyOutput)
}

// Specifies cloud audit logging configuration for this policy.
func (o PolicyPtrOutput) AuditConfigs() AuditConfigArrayOutput {
	return o.ApplyT(func(v *Policy) []AuditConfig {
		if v == nil {
			return nil
		}
		return v.AuditConfigs
	}).(AuditConfigArrayOutput)
}

// Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
func (o PolicyPtrOutput) Bindings() BindingArrayOutput {
	return o.ApplyT(func(v *Policy) []Binding {
		if v == nil {
			return nil
		}
		return v.Bindings
	}).(BindingArrayOutput)
}

// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
func (o PolicyPtrOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Policy) *string {
		if v == nil {
			return nil
		}
		return v.Etag
	}).(pulumi.StringPtrOutput)
}

// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o PolicyPtrOutput) Version() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Policy) *int {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.IntPtrOutput)
}

type TargetConfiguration struct {
	// The configuration to use for this deployment.
	Config *ConfigFile `pulumi:"config"`
	// Specifies any files to import for this configuration. This can be used to import templates or other files. For example, you might import a text file in order to use the file in a template.
	Imports []ImportFile `pulumi:"imports"`
}

// TargetConfigurationInput is an input type that accepts TargetConfigurationArgs and TargetConfigurationOutput values.
// You can construct a concrete instance of `TargetConfigurationInput` via:
//
//          TargetConfigurationArgs{...}
type TargetConfigurationInput interface {
	pulumi.Input

	ToTargetConfigurationOutput() TargetConfigurationOutput
	ToTargetConfigurationOutputWithContext(context.Context) TargetConfigurationOutput
}

type TargetConfigurationArgs struct {
	// The configuration to use for this deployment.
	Config ConfigFilePtrInput `pulumi:"config"`
	// Specifies any files to import for this configuration. This can be used to import templates or other files. For example, you might import a text file in order to use the file in a template.
	Imports ImportFileArrayInput `pulumi:"imports"`
}

func (TargetConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetConfiguration)(nil)).Elem()
}

func (i TargetConfigurationArgs) ToTargetConfigurationOutput() TargetConfigurationOutput {
	return i.ToTargetConfigurationOutputWithContext(context.Background())
}

func (i TargetConfigurationArgs) ToTargetConfigurationOutputWithContext(ctx context.Context) TargetConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetConfigurationOutput)
}

func (i TargetConfigurationArgs) ToTargetConfigurationPtrOutput() TargetConfigurationPtrOutput {
	return i.ToTargetConfigurationPtrOutputWithContext(context.Background())
}

func (i TargetConfigurationArgs) ToTargetConfigurationPtrOutputWithContext(ctx context.Context) TargetConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetConfigurationOutput).ToTargetConfigurationPtrOutputWithContext(ctx)
}

// TargetConfigurationPtrInput is an input type that accepts TargetConfigurationArgs, TargetConfigurationPtr and TargetConfigurationPtrOutput values.
// You can construct a concrete instance of `TargetConfigurationPtrInput` via:
//
//          TargetConfigurationArgs{...}
//
//  or:
//
//          nil
type TargetConfigurationPtrInput interface {
	pulumi.Input

	ToTargetConfigurationPtrOutput() TargetConfigurationPtrOutput
	ToTargetConfigurationPtrOutputWithContext(context.Context) TargetConfigurationPtrOutput
}

type targetConfigurationPtrType TargetConfigurationArgs

func TargetConfigurationPtr(v *TargetConfigurationArgs) TargetConfigurationPtrInput {
	return (*targetConfigurationPtrType)(v)
}

func (*targetConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TargetConfiguration)(nil)).Elem()
}

func (i *targetConfigurationPtrType) ToTargetConfigurationPtrOutput() TargetConfigurationPtrOutput {
	return i.ToTargetConfigurationPtrOutputWithContext(context.Background())
}

func (i *targetConfigurationPtrType) ToTargetConfigurationPtrOutputWithContext(ctx context.Context) TargetConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetConfigurationPtrOutput)
}

type TargetConfigurationOutput struct{ *pulumi.OutputState }

func (TargetConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetConfiguration)(nil)).Elem()
}

func (o TargetConfigurationOutput) ToTargetConfigurationOutput() TargetConfigurationOutput {
	return o
}

func (o TargetConfigurationOutput) ToTargetConfigurationOutputWithContext(ctx context.Context) TargetConfigurationOutput {
	return o
}

func (o TargetConfigurationOutput) ToTargetConfigurationPtrOutput() TargetConfigurationPtrOutput {
	return o.ToTargetConfigurationPtrOutputWithContext(context.Background())
}

func (o TargetConfigurationOutput) ToTargetConfigurationPtrOutputWithContext(ctx context.Context) TargetConfigurationPtrOutput {
	return o.ApplyT(func(v TargetConfiguration) *TargetConfiguration {
		return &v
	}).(TargetConfigurationPtrOutput)
}

// The configuration to use for this deployment.
func (o TargetConfigurationOutput) Config() ConfigFilePtrOutput {
	return o.ApplyT(func(v TargetConfiguration) *ConfigFile { return v.Config }).(ConfigFilePtrOutput)
}

// Specifies any files to import for this configuration. This can be used to import templates or other files. For example, you might import a text file in order to use the file in a template.
func (o TargetConfigurationOutput) Imports() ImportFileArrayOutput {
	return o.ApplyT(func(v TargetConfiguration) []ImportFile { return v.Imports }).(ImportFileArrayOutput)
}

type TargetConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TargetConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TargetConfiguration)(nil)).Elem()
}

func (o TargetConfigurationPtrOutput) ToTargetConfigurationPtrOutput() TargetConfigurationPtrOutput {
	return o
}

func (o TargetConfigurationPtrOutput) ToTargetConfigurationPtrOutputWithContext(ctx context.Context) TargetConfigurationPtrOutput {
	return o
}

func (o TargetConfigurationPtrOutput) Elem() TargetConfigurationOutput {
	return o.ApplyT(func(v *TargetConfiguration) TargetConfiguration { return *v }).(TargetConfigurationOutput)
}

// The configuration to use for this deployment.
func (o TargetConfigurationPtrOutput) Config() ConfigFilePtrOutput {
	return o.ApplyT(func(v *TargetConfiguration) *ConfigFile {
		if v == nil {
			return nil
		}
		return v.Config
	}).(ConfigFilePtrOutput)
}

// Specifies any files to import for this configuration. This can be used to import templates or other files. For example, you might import a text file in order to use the file in a template.
func (o TargetConfigurationPtrOutput) Imports() ImportFileArrayOutput {
	return o.ApplyT(func(v *TargetConfiguration) []ImportFile {
		if v == nil {
			return nil
		}
		return v.Imports
	}).(ImportFileArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(AuditConfigOutput{})
	pulumi.RegisterOutputType(AuditConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigOutput{})
	pulumi.RegisterOutputType(AuditLogConfigArrayOutput{})
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(ConfigFileOutput{})
	pulumi.RegisterOutputType(ConfigFilePtrOutput{})
	pulumi.RegisterOutputType(DeploymentLabelEntryOutput{})
	pulumi.RegisterOutputType(DeploymentLabelEntryArrayOutput{})
	pulumi.RegisterOutputType(DeploymentUpdateOutput{})
	pulumi.RegisterOutputType(DeploymentUpdatePtrOutput{})
	pulumi.RegisterOutputType(DeploymentUpdateLabelEntryOutput{})
	pulumi.RegisterOutputType(DeploymentUpdateLabelEntryArrayOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(ImportFileOutput{})
	pulumi.RegisterOutputType(ImportFileArrayOutput{})
	pulumi.RegisterOutputType(OperationOutput{})
	pulumi.RegisterOutputType(OperationPtrOutput{})
	pulumi.RegisterOutputType(PolicyOutput{})
	pulumi.RegisterOutputType(PolicyPtrOutput{})
	pulumi.RegisterOutputType(TargetConfigurationOutput{})
	pulumi.RegisterOutputType(TargetConfigurationPtrOutput{})
}
