// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a service, and returns the new service.
type NamespaceService struct {
	pulumi.CustomResourceState

	// Optional. Annotations for the service. This data can be consumed by service clients. Restrictions: * The entire annotations dictionary may contain up to 2000 characters, spread accoss all key-value pairs. Annotations that go beyond this limit are rejected * Valid annotation keys have two segments: an optional prefix and name, separated by a slash (/). The name segment is required and must be 63 characters or less, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and alphanumerics between. The prefix is optional. If specified, the prefix must be a DNS subdomain: a series of DNS labels separated by dots (.), not longer than 253 characters in total, followed by a slash (/). Annotations that fails to meet these requirements are rejected * The `(*.)google.com/` and `(*.)googleapis.com/` prefixes are reserved for system annotations managed by Service Directory. If the user tries to write to these keyspaces, those entries are silently ignored by the system Note: This field is equivalent to the `metadata` field in the v1beta1 API. They have the same syntax and read/write to the same location in Service Directory.
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// Endpoints associated with this service. Returned on LookupService.ResolveService. Control plane clients should use RegistrationService.ListEndpoints.
	Endpoints EndpointResponseArrayOutput `pulumi:"endpoints"`
	// Immutable. The resource name for the service in the format `projects/*/locations/*/namespaces/*/services/*`.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewNamespaceService registers a new resource with the given unique name, arguments, and options.
func NewNamespaceService(ctx *pulumi.Context,
	name string, args *NamespaceServiceArgs, opts ...pulumi.ResourceOption) (*NamespaceService, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.NamespaceId == nil {
		return nil, errors.New("invalid value for required argument 'NamespaceId'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.ServiceId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceId'")
	}
	var resource NamespaceService
	err := ctx.RegisterResource("google-native:servicedirectory/v1:NamespaceService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNamespaceService gets an existing NamespaceService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNamespaceService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NamespaceServiceState, opts ...pulumi.ResourceOption) (*NamespaceService, error) {
	var resource NamespaceService
	err := ctx.ReadResource("google-native:servicedirectory/v1:NamespaceService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NamespaceService resources.
type namespaceServiceState struct {
	// Optional. Annotations for the service. This data can be consumed by service clients. Restrictions: * The entire annotations dictionary may contain up to 2000 characters, spread accoss all key-value pairs. Annotations that go beyond this limit are rejected * Valid annotation keys have two segments: an optional prefix and name, separated by a slash (/). The name segment is required and must be 63 characters or less, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and alphanumerics between. The prefix is optional. If specified, the prefix must be a DNS subdomain: a series of DNS labels separated by dots (.), not longer than 253 characters in total, followed by a slash (/). Annotations that fails to meet these requirements are rejected * The `(*.)google.com/` and `(*.)googleapis.com/` prefixes are reserved for system annotations managed by Service Directory. If the user tries to write to these keyspaces, those entries are silently ignored by the system Note: This field is equivalent to the `metadata` field in the v1beta1 API. They have the same syntax and read/write to the same location in Service Directory.
	Annotations map[string]string `pulumi:"annotations"`
	// Endpoints associated with this service. Returned on LookupService.ResolveService. Control plane clients should use RegistrationService.ListEndpoints.
	Endpoints []EndpointResponse `pulumi:"endpoints"`
	// Immutable. The resource name for the service in the format `projects/*/locations/*/namespaces/*/services/*`.
	Name *string `pulumi:"name"`
}

type NamespaceServiceState struct {
	// Optional. Annotations for the service. This data can be consumed by service clients. Restrictions: * The entire annotations dictionary may contain up to 2000 characters, spread accoss all key-value pairs. Annotations that go beyond this limit are rejected * Valid annotation keys have two segments: an optional prefix and name, separated by a slash (/). The name segment is required and must be 63 characters or less, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and alphanumerics between. The prefix is optional. If specified, the prefix must be a DNS subdomain: a series of DNS labels separated by dots (.), not longer than 253 characters in total, followed by a slash (/). Annotations that fails to meet these requirements are rejected * The `(*.)google.com/` and `(*.)googleapis.com/` prefixes are reserved for system annotations managed by Service Directory. If the user tries to write to these keyspaces, those entries are silently ignored by the system Note: This field is equivalent to the `metadata` field in the v1beta1 API. They have the same syntax and read/write to the same location in Service Directory.
	Annotations pulumi.StringMapInput
	// Endpoints associated with this service. Returned on LookupService.ResolveService. Control plane clients should use RegistrationService.ListEndpoints.
	Endpoints EndpointResponseArrayInput
	// Immutable. The resource name for the service in the format `projects/*/locations/*/namespaces/*/services/*`.
	Name pulumi.StringPtrInput
}

func (NamespaceServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*namespaceServiceState)(nil)).Elem()
}

type namespaceServiceArgs struct {
	// Optional. Annotations for the service. This data can be consumed by service clients. Restrictions: * The entire annotations dictionary may contain up to 2000 characters, spread accoss all key-value pairs. Annotations that go beyond this limit are rejected * Valid annotation keys have two segments: an optional prefix and name, separated by a slash (/). The name segment is required and must be 63 characters or less, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and alphanumerics between. The prefix is optional. If specified, the prefix must be a DNS subdomain: a series of DNS labels separated by dots (.), not longer than 253 characters in total, followed by a slash (/). Annotations that fails to meet these requirements are rejected * The `(*.)google.com/` and `(*.)googleapis.com/` prefixes are reserved for system annotations managed by Service Directory. If the user tries to write to these keyspaces, those entries are silently ignored by the system Note: This field is equivalent to the `metadata` field in the v1beta1 API. They have the same syntax and read/write to the same location in Service Directory.
	Annotations map[string]string `pulumi:"annotations"`
	Location    string            `pulumi:"location"`
	// Immutable. The resource name for the service in the format `projects/*/locations/*/namespaces/*/services/*`.
	Name        *string `pulumi:"name"`
	NamespaceId string  `pulumi:"namespaceId"`
	Project     string  `pulumi:"project"`
	ServiceId   string  `pulumi:"serviceId"`
}

// The set of arguments for constructing a NamespaceService resource.
type NamespaceServiceArgs struct {
	// Optional. Annotations for the service. This data can be consumed by service clients. Restrictions: * The entire annotations dictionary may contain up to 2000 characters, spread accoss all key-value pairs. Annotations that go beyond this limit are rejected * Valid annotation keys have two segments: an optional prefix and name, separated by a slash (/). The name segment is required and must be 63 characters or less, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and alphanumerics between. The prefix is optional. If specified, the prefix must be a DNS subdomain: a series of DNS labels separated by dots (.), not longer than 253 characters in total, followed by a slash (/). Annotations that fails to meet these requirements are rejected * The `(*.)google.com/` and `(*.)googleapis.com/` prefixes are reserved for system annotations managed by Service Directory. If the user tries to write to these keyspaces, those entries are silently ignored by the system Note: This field is equivalent to the `metadata` field in the v1beta1 API. They have the same syntax and read/write to the same location in Service Directory.
	Annotations pulumi.StringMapInput
	Location    pulumi.StringInput
	// Immutable. The resource name for the service in the format `projects/*/locations/*/namespaces/*/services/*`.
	Name        pulumi.StringPtrInput
	NamespaceId pulumi.StringInput
	Project     pulumi.StringInput
	ServiceId   pulumi.StringInput
}

func (NamespaceServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*namespaceServiceArgs)(nil)).Elem()
}

type NamespaceServiceInput interface {
	pulumi.Input

	ToNamespaceServiceOutput() NamespaceServiceOutput
	ToNamespaceServiceOutputWithContext(ctx context.Context) NamespaceServiceOutput
}

func (*NamespaceService) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceService)(nil))
}

func (i *NamespaceService) ToNamespaceServiceOutput() NamespaceServiceOutput {
	return i.ToNamespaceServiceOutputWithContext(context.Background())
}

func (i *NamespaceService) ToNamespaceServiceOutputWithContext(ctx context.Context) NamespaceServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceServiceOutput)
}

type NamespaceServiceOutput struct {
	*pulumi.OutputState
}

func (NamespaceServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceService)(nil))
}

func (o NamespaceServiceOutput) ToNamespaceServiceOutput() NamespaceServiceOutput {
	return o
}

func (o NamespaceServiceOutput) ToNamespaceServiceOutputWithContext(ctx context.Context) NamespaceServiceOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(NamespaceServiceOutput{})
}
