// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Sets the IAM Policy for a resource (namespace or service only).
type NamespaceServiceIamPolicy struct {
	pulumi.CustomResourceState
}

// NewNamespaceServiceIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewNamespaceServiceIamPolicy(ctx *pulumi.Context,
	name string, args *NamespaceServiceIamPolicyArgs, opts ...pulumi.ResourceOption) (*NamespaceServiceIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LocationsId == nil {
		return nil, errors.New("invalid value for required argument 'LocationsId'")
	}
	if args.NamespacesId == nil {
		return nil, errors.New("invalid value for required argument 'NamespacesId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	if args.ServicesId == nil {
		return nil, errors.New("invalid value for required argument 'ServicesId'")
	}
	var resource NamespaceServiceIamPolicy
	err := ctx.RegisterResource("google-cloud:servicedirectory/v1:NamespaceServiceIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNamespaceServiceIamPolicy gets an existing NamespaceServiceIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNamespaceServiceIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NamespaceServiceIamPolicyState, opts ...pulumi.ResourceOption) (*NamespaceServiceIamPolicy, error) {
	var resource NamespaceServiceIamPolicy
	err := ctx.ReadResource("google-cloud:servicedirectory/v1:NamespaceServiceIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NamespaceServiceIamPolicy resources.
type namespaceServiceIamPolicyState struct {
}

type NamespaceServiceIamPolicyState struct {
}

func (NamespaceServiceIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*namespaceServiceIamPolicyState)(nil)).Elem()
}

type namespaceServiceIamPolicyArgs struct {
	LocationsId  string `pulumi:"locationsId"`
	NamespacesId string `pulumi:"namespacesId"`
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy     *Policy `pulumi:"policy"`
	ProjectsId string  `pulumi:"projectsId"`
	ServicesId string  `pulumi:"servicesId"`
}

// The set of arguments for constructing a NamespaceServiceIamPolicy resource.
type NamespaceServiceIamPolicyArgs struct {
	LocationsId  pulumi.StringInput
	NamespacesId pulumi.StringInput
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy     PolicyPtrInput
	ProjectsId pulumi.StringInput
	ServicesId pulumi.StringInput
}

func (NamespaceServiceIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*namespaceServiceIamPolicyArgs)(nil)).Elem()
}

type NamespaceServiceIamPolicyInput interface {
	pulumi.Input

	ToNamespaceServiceIamPolicyOutput() NamespaceServiceIamPolicyOutput
	ToNamespaceServiceIamPolicyOutputWithContext(ctx context.Context) NamespaceServiceIamPolicyOutput
}

func (*NamespaceServiceIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceServiceIamPolicy)(nil))
}

func (i *NamespaceServiceIamPolicy) ToNamespaceServiceIamPolicyOutput() NamespaceServiceIamPolicyOutput {
	return i.ToNamespaceServiceIamPolicyOutputWithContext(context.Background())
}

func (i *NamespaceServiceIamPolicy) ToNamespaceServiceIamPolicyOutputWithContext(ctx context.Context) NamespaceServiceIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceServiceIamPolicyOutput)
}

type NamespaceServiceIamPolicyOutput struct {
	*pulumi.OutputState
}

func (NamespaceServiceIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceServiceIamPolicy)(nil))
}

func (o NamespaceServiceIamPolicyOutput) ToNamespaceServiceIamPolicyOutput() NamespaceServiceIamPolicyOutput {
	return o
}

func (o NamespaceServiceIamPolicyOutput) ToNamespaceServiceIamPolicyOutputWithContext(ctx context.Context) NamespaceServiceIamPolicyOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(NamespaceServiceIamPolicyOutput{})
}
