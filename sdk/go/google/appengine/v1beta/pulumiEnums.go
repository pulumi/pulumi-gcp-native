// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Action to take when users access resources that require authentication. Defaults to redirect.
type ApiConfigHandlerAuthFailAction pulumi.String

const (
	// Not specified. AUTH_FAIL_ACTION_REDIRECT is assumed.
	ApiConfigHandlerAuthFailActionAuthFailActionUnspecified = ApiConfigHandlerAuthFailAction("AUTH_FAIL_ACTION_UNSPECIFIED")
	// Redirects user to "accounts.google.com". The user is redirected back to the application URL after signing in or creating an account.
	ApiConfigHandlerAuthFailActionAuthFailActionRedirect = ApiConfigHandlerAuthFailAction("AUTH_FAIL_ACTION_REDIRECT")
	// Rejects request with a 401 HTTP status code and an error message.
	ApiConfigHandlerAuthFailActionAuthFailActionUnauthorized = ApiConfigHandlerAuthFailAction("AUTH_FAIL_ACTION_UNAUTHORIZED")
)

func (ApiConfigHandlerAuthFailAction) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ApiConfigHandlerAuthFailAction) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ApiConfigHandlerAuthFailAction) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ApiConfigHandlerAuthFailAction) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ApiConfigHandlerAuthFailAction) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Level of login required to access this resource. Defaults to optional.
type ApiConfigHandlerLogin pulumi.String

const (
	// Not specified. LOGIN_OPTIONAL is assumed.
	ApiConfigHandlerLoginLoginUnspecified = ApiConfigHandlerLogin("LOGIN_UNSPECIFIED")
	// Does not require that the user is signed in.
	ApiConfigHandlerLoginLoginOptional = ApiConfigHandlerLogin("LOGIN_OPTIONAL")
	// If the user is not signed in, the auth_fail_action is taken. In addition, if the user is not an administrator for the application, they are given an error message regardless of auth_fail_action. If the user is an administrator, the handler proceeds.
	ApiConfigHandlerLoginLoginAdmin = ApiConfigHandlerLogin("LOGIN_ADMIN")
	// If the user has signed in, the handler proceeds normally. Otherwise, the auth_fail_action is taken.
	ApiConfigHandlerLoginLoginRequired = ApiConfigHandlerLogin("LOGIN_REQUIRED")
)

func (ApiConfigHandlerLogin) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ApiConfigHandlerLogin) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ApiConfigHandlerLogin) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ApiConfigHandlerLogin) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ApiConfigHandlerLogin) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Security (HTTPS) enforcement for this URL.
type ApiConfigHandlerSecurityLevel pulumi.String

const (
	// Not specified.
	ApiConfigHandlerSecurityLevelSecureUnspecified = ApiConfigHandlerSecurityLevel("SECURE_UNSPECIFIED")
	// Both HTTP and HTTPS requests with URLs that match the handler succeed without redirects. The application can examine the request to determine which protocol was used, and respond accordingly.
	ApiConfigHandlerSecurityLevelSecureDefault = ApiConfigHandlerSecurityLevel("SECURE_DEFAULT")
	// Requests for a URL that match this handler that use HTTPS are automatically redirected to the HTTP equivalent URL.
	ApiConfigHandlerSecurityLevelSecureNever = ApiConfigHandlerSecurityLevel("SECURE_NEVER")
	// Both HTTP and HTTPS requests with URLs that match the handler succeed without redirects. The application can examine the request to determine which protocol was used and respond accordingly.
	ApiConfigHandlerSecurityLevelSecureOptional = ApiConfigHandlerSecurityLevel("SECURE_OPTIONAL")
	// Requests for a URL that match this handler that do not use HTTPS are automatically redirected to the HTTPS URL with the same path. Query parameters are reserved for the redirect.
	ApiConfigHandlerSecurityLevelSecureAlways = ApiConfigHandlerSecurityLevel("SECURE_ALWAYS")
)

func (ApiConfigHandlerSecurityLevel) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ApiConfigHandlerSecurityLevel) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ApiConfigHandlerSecurityLevel) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ApiConfigHandlerSecurityLevel) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ApiConfigHandlerSecurityLevel) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The type of the Cloud Firestore or Cloud Datastore database associated with this application.
type AppDatabaseType pulumi.String

const (
	// Database type is unspecified.
	AppDatabaseTypeDatabaseTypeUnspecified = AppDatabaseType("DATABASE_TYPE_UNSPECIFIED")
	// Cloud Datastore
	AppDatabaseTypeCloudDatastore = AppDatabaseType("CLOUD_DATASTORE")
	// Cloud Firestore Native
	AppDatabaseTypeCloudFirestore = AppDatabaseType("CLOUD_FIRESTORE")
	// Cloud Firestore in Datastore Mode
	AppDatabaseTypeCloudDatastoreCompatibility = AppDatabaseType("CLOUD_DATASTORE_COMPATIBILITY")
)

func (AppDatabaseType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e AppDatabaseType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AppDatabaseType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AppDatabaseType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AppDatabaseType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Serving status of this application.
type AppServingStatus pulumi.String

const (
	// Serving status is unspecified.
	AppServingStatusUnspecified = AppServingStatus("UNSPECIFIED")
	// Application is serving.
	AppServingStatusServing = AppServingStatus("SERVING")
	// Application has been disabled by the user.
	AppServingStatusUserDisabled = AppServingStatus("USER_DISABLED")
	// Application has been disabled by the system.
	AppServingStatusSystemDisabled = AppServingStatus("SYSTEM_DISABLED")
)

func (AppServingStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e AppServingStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AppServingStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AppServingStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AppServingStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Endpoints rollout strategy. If FIXED, config_id must be specified. If MANAGED, config_id must be omitted.
type EndpointsApiServiceRolloutStrategy pulumi.String

const (
	// Not specified. Defaults to FIXED.
	EndpointsApiServiceRolloutStrategyUnspecifiedRolloutStrategy = EndpointsApiServiceRolloutStrategy("UNSPECIFIED_ROLLOUT_STRATEGY")
	// Endpoints service configuration ID will be fixed to the configuration ID specified by config_id.
	EndpointsApiServiceRolloutStrategyFixed = EndpointsApiServiceRolloutStrategy("FIXED")
	// Endpoints service configuration ID will be updated with each rollout.
	EndpointsApiServiceRolloutStrategyManaged = EndpointsApiServiceRolloutStrategy("MANAGED")
)

func (EndpointsApiServiceRolloutStrategy) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e EndpointsApiServiceRolloutStrategy) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e EndpointsApiServiceRolloutStrategy) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e EndpointsApiServiceRolloutStrategy) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e EndpointsApiServiceRolloutStrategy) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Error condition this handler applies to.
type ErrorHandlerErrorCode pulumi.String

const (
	// Not specified. ERROR_CODE_DEFAULT is assumed.
	ErrorHandlerErrorCodeErrorCodeUnspecified = ErrorHandlerErrorCode("ERROR_CODE_UNSPECIFIED")
	// All other error types.
	ErrorHandlerErrorCodeErrorCodeDefault = ErrorHandlerErrorCode("ERROR_CODE_DEFAULT")
	// Application has exceeded a resource quota.
	ErrorHandlerErrorCodeErrorCodeOverQuota = ErrorHandlerErrorCode("ERROR_CODE_OVER_QUOTA")
	// Client blocked by the application's Denial of Service protection configuration.
	ErrorHandlerErrorCodeErrorCodeDosApiDenial = ErrorHandlerErrorCode("ERROR_CODE_DOS_API_DENIAL")
	// Deadline reached before the application responds.
	ErrorHandlerErrorCodeErrorCodeTimeout = ErrorHandlerErrorCode("ERROR_CODE_TIMEOUT")
)

func (ErrorHandlerErrorCode) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ErrorHandlerErrorCode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ErrorHandlerErrorCode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ErrorHandlerErrorCode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ErrorHandlerErrorCode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The action to take on matched requests.
type IngressRuleAction pulumi.String

const (
	IngressRuleActionUnspecifiedAction = IngressRuleAction("UNSPECIFIED_ACTION")
	// Matching requests are allowed.
	IngressRuleActionAllow = IngressRuleAction("ALLOW")
	// Matching requests are denied.
	IngressRuleActionDeny = IngressRuleAction("DENY")
)

func (IngressRuleAction) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e IngressRuleAction) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e IngressRuleAction) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e IngressRuleAction) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e IngressRuleAction) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Status of certificate management. Refers to the most recent certificate acquisition or renewal attempt.@OutputOnly
type ManagedCertificateStatus pulumi.String

const (
	ManagedCertificateStatusManagementStatusUnspecified = ManagedCertificateStatus("MANAGEMENT_STATUS_UNSPECIFIED")
	// Certificate was successfully obtained and inserted into the serving system.
	ManagedCertificateStatusOk = ManagedCertificateStatus("OK")
	// Certificate is under active attempts to acquire or renew.
	ManagedCertificateStatusPending = ManagedCertificateStatus("PENDING")
	// Most recent renewal failed due to an invalid DNS setup and will be retried. Renewal attempts will continue to fail until the certificate domain's DNS configuration is fixed. The last successfully provisioned certificate may still be serving.
	ManagedCertificateStatusFailedRetryingNotVisible = ManagedCertificateStatus("FAILED_RETRYING_NOT_VISIBLE")
	// All renewal attempts have been exhausted, likely due to an invalid DNS setup.
	ManagedCertificateStatusFailedPermanent = ManagedCertificateStatus("FAILED_PERMANENT")
	// Most recent renewal failed due to an explicit CAA record that does not include one of the in-use CAs (Google CA and Let's Encrypt). Renewals will continue to fail until the CAA is reconfigured. The last successfully provisioned certificate may still be serving.
	ManagedCertificateStatusFailedRetryingCaaForbidden = ManagedCertificateStatus("FAILED_RETRYING_CAA_FORBIDDEN")
	// Most recent renewal failed due to a CAA retrieval failure. This means that the domain's DNS provider does not properly handle CAA records, failing requests for CAA records when no CAA records are defined. Renewals will continue to fail until the DNS provider is changed or a CAA record is added for the given domain. The last successfully provisioned certificate may still be serving.
	ManagedCertificateStatusFailedRetryingCaaChecking = ManagedCertificateStatus("FAILED_RETRYING_CAA_CHECKING")
)

func (ManagedCertificateStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ManagedCertificateStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ManagedCertificateStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ManagedCertificateStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ManagedCertificateStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Resource record type. Example: AAAA.
type ResourceRecordType pulumi.String

const (
	// An A resource record. Data is an IPv4 address.
	ResourceRecordTypeA = ResourceRecordType("A")
	// An AAAA resource record. Data is an IPv6 address.
	ResourceRecordTypeAaaa = ResourceRecordType("AAAA")
	// A CNAME resource record. Data is a domain name to be aliased.
	ResourceRecordTypeCname = ResourceRecordType("CNAME")
)

func (ResourceRecordType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ResourceRecordType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ResourceRecordType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ResourceRecordType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ResourceRecordType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// SSL management type for this domain. If AUTOMATIC, a managed certificate is automatically provisioned. If MANUAL, certificate_id must be manually specified in order to configure SSL for this domain.
type SslSettingsSslManagementType pulumi.String

const (
	// SSL support for this domain is configured automatically. The mapped SSL certificate will be automatically renewed.
	SslSettingsSslManagementTypeAutomatic = SslSettingsSslManagementType("AUTOMATIC")
	// SSL support for this domain is configured manually by the user. Either the domain has no SSL support or a user-obtained SSL certificate has been explictly mapped to this domain.
	SslSettingsSslManagementTypeManual = SslSettingsSslManagementType("MANUAL")
)

func (SslSettingsSslManagementType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e SslSettingsSslManagementType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SslSettingsSslManagementType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SslSettingsSslManagementType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SslSettingsSslManagementType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Action to take when users access resources that require authentication. Defaults to redirect.
type UrlMapAuthFailAction pulumi.String

const (
	// Not specified. AUTH_FAIL_ACTION_REDIRECT is assumed.
	UrlMapAuthFailActionAuthFailActionUnspecified = UrlMapAuthFailAction("AUTH_FAIL_ACTION_UNSPECIFIED")
	// Redirects user to "accounts.google.com". The user is redirected back to the application URL after signing in or creating an account.
	UrlMapAuthFailActionAuthFailActionRedirect = UrlMapAuthFailAction("AUTH_FAIL_ACTION_REDIRECT")
	// Rejects request with a 401 HTTP status code and an error message.
	UrlMapAuthFailActionAuthFailActionUnauthorized = UrlMapAuthFailAction("AUTH_FAIL_ACTION_UNAUTHORIZED")
)

func (UrlMapAuthFailAction) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e UrlMapAuthFailAction) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e UrlMapAuthFailAction) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e UrlMapAuthFailAction) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e UrlMapAuthFailAction) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Level of login required to access this resource. Not supported for Node.js in the App Engine standard environment.
type UrlMapLogin pulumi.String

const (
	// Not specified. LOGIN_OPTIONAL is assumed.
	UrlMapLoginLoginUnspecified = UrlMapLogin("LOGIN_UNSPECIFIED")
	// Does not require that the user is signed in.
	UrlMapLoginLoginOptional = UrlMapLogin("LOGIN_OPTIONAL")
	// If the user is not signed in, the auth_fail_action is taken. In addition, if the user is not an administrator for the application, they are given an error message regardless of auth_fail_action. If the user is an administrator, the handler proceeds.
	UrlMapLoginLoginAdmin = UrlMapLogin("LOGIN_ADMIN")
	// If the user has signed in, the handler proceeds normally. Otherwise, the auth_fail_action is taken.
	UrlMapLoginLoginRequired = UrlMapLogin("LOGIN_REQUIRED")
)

func (UrlMapLogin) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e UrlMapLogin) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e UrlMapLogin) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e UrlMapLogin) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e UrlMapLogin) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// 30x code to use when performing redirects for the secure field. Defaults to 302.
type UrlMapRedirectHttpResponseCode pulumi.String

const (
	// Not specified. 302 is assumed.
	UrlMapRedirectHttpResponseCodeRedirectHttpResponseCodeUnspecified = UrlMapRedirectHttpResponseCode("REDIRECT_HTTP_RESPONSE_CODE_UNSPECIFIED")
	// 301 Moved Permanently code.
	UrlMapRedirectHttpResponseCodeRedirectHttpResponseCode301 = UrlMapRedirectHttpResponseCode("REDIRECT_HTTP_RESPONSE_CODE_301")
	// 302 Moved Temporarily code.
	UrlMapRedirectHttpResponseCodeRedirectHttpResponseCode302 = UrlMapRedirectHttpResponseCode("REDIRECT_HTTP_RESPONSE_CODE_302")
	// 303 See Other code.
	UrlMapRedirectHttpResponseCodeRedirectHttpResponseCode303 = UrlMapRedirectHttpResponseCode("REDIRECT_HTTP_RESPONSE_CODE_303")
	// 307 Temporary Redirect code.
	UrlMapRedirectHttpResponseCodeRedirectHttpResponseCode307 = UrlMapRedirectHttpResponseCode("REDIRECT_HTTP_RESPONSE_CODE_307")
)

func (UrlMapRedirectHttpResponseCode) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e UrlMapRedirectHttpResponseCode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e UrlMapRedirectHttpResponseCode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e UrlMapRedirectHttpResponseCode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e UrlMapRedirectHttpResponseCode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Security (HTTPS) enforcement for this URL.
type UrlMapSecurityLevel pulumi.String

const (
	// Not specified.
	UrlMapSecurityLevelSecureUnspecified = UrlMapSecurityLevel("SECURE_UNSPECIFIED")
	// Both HTTP and HTTPS requests with URLs that match the handler succeed without redirects. The application can examine the request to determine which protocol was used, and respond accordingly.
	UrlMapSecurityLevelSecureDefault = UrlMapSecurityLevel("SECURE_DEFAULT")
	// Requests for a URL that match this handler that use HTTPS are automatically redirected to the HTTP equivalent URL.
	UrlMapSecurityLevelSecureNever = UrlMapSecurityLevel("SECURE_NEVER")
	// Both HTTP and HTTPS requests with URLs that match the handler succeed without redirects. The application can examine the request to determine which protocol was used and respond accordingly.
	UrlMapSecurityLevelSecureOptional = UrlMapSecurityLevel("SECURE_OPTIONAL")
	// Requests for a URL that match this handler that do not use HTTPS are automatically redirected to the HTTPS URL with the same path. Query parameters are reserved for the redirect.
	UrlMapSecurityLevelSecureAlways = UrlMapSecurityLevel("SECURE_ALWAYS")
)

func (UrlMapSecurityLevel) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e UrlMapSecurityLevel) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e UrlMapSecurityLevel) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e UrlMapSecurityLevel) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e UrlMapSecurityLevel) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type VersionInboundServicesItem pulumi.String

const (
	// Not specified.
	VersionInboundServicesItemInboundServiceUnspecified = VersionInboundServicesItem("INBOUND_SERVICE_UNSPECIFIED")
	// Allows an application to receive mail.
	VersionInboundServicesItemInboundServiceMail = VersionInboundServicesItem("INBOUND_SERVICE_MAIL")
	// Allows an application to receive email-bound notifications.
	VersionInboundServicesItemInboundServiceMailBounce = VersionInboundServicesItem("INBOUND_SERVICE_MAIL_BOUNCE")
	// Allows an application to receive error stanzas.
	VersionInboundServicesItemInboundServiceXmppError = VersionInboundServicesItem("INBOUND_SERVICE_XMPP_ERROR")
	// Allows an application to receive instant messages.
	VersionInboundServicesItemInboundServiceXmppMessage = VersionInboundServicesItem("INBOUND_SERVICE_XMPP_MESSAGE")
	// Allows an application to receive user subscription POSTs.
	VersionInboundServicesItemInboundServiceXmppSubscribe = VersionInboundServicesItem("INBOUND_SERVICE_XMPP_SUBSCRIBE")
	// Allows an application to receive a user's chat presence.
	VersionInboundServicesItemInboundServiceXmppPresence = VersionInboundServicesItem("INBOUND_SERVICE_XMPP_PRESENCE")
	// Registers an application for notifications when a client connects or disconnects from a channel.
	VersionInboundServicesItemInboundServiceChannelPresence = VersionInboundServicesItem("INBOUND_SERVICE_CHANNEL_PRESENCE")
	// Enables warmup requests.
	VersionInboundServicesItemInboundServiceWarmup = VersionInboundServicesItem("INBOUND_SERVICE_WARMUP")
)

func (VersionInboundServicesItem) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e VersionInboundServicesItem) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e VersionInboundServicesItem) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e VersionInboundServicesItem) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e VersionInboundServicesItem) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// VersionInboundServicesItemArrayInput is an input type that accepts VersionInboundServicesItemArray and VersionInboundServicesItemArrayOutput values.
// You can construct a concrete instance of `VersionInboundServicesItemArrayInput` via:
//
//          VersionInboundServicesItemArray{ VersionInboundServicesItemArgs{...} }
type VersionInboundServicesItemArrayInput interface {
	pulumi.Input

	ToVersionInboundServicesItemArrayOutput() VersionInboundServicesItemArrayOutput
	ToVersionInboundServicesItemArrayOutputWithContext(context.Context) VersionInboundServicesItemArrayOutput
}

type VersionInboundServicesItemArray []VersionInboundServicesItem

func (VersionInboundServicesItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VersionInboundServicesItem)(nil)).Elem()
}

func (i VersionInboundServicesItemArray) ToVersionInboundServicesItemArrayOutput() VersionInboundServicesItemArrayOutput {
	return i.ToVersionInboundServicesItemArrayOutputWithContext(context.Background())
}

func (i VersionInboundServicesItemArray) ToVersionInboundServicesItemArrayOutputWithContext(ctx context.Context) VersionInboundServicesItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VersionInboundServicesItemArrayOutput)
}

type VersionInboundServicesItemArrayOutput struct{ *pulumi.OutputState }

func (VersionInboundServicesItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VersionInboundServicesItem)(nil)).Elem()
}

func (o VersionInboundServicesItemArrayOutput) ToVersionInboundServicesItemArrayOutput() VersionInboundServicesItemArrayOutput {
	return o
}

func (o VersionInboundServicesItemArrayOutput) ToVersionInboundServicesItemArrayOutputWithContext(ctx context.Context) VersionInboundServicesItemArrayOutput {
	return o
}

func (o VersionInboundServicesItemArrayOutput) Index(i pulumi.IntInput) pulumi.StringOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) pulumi.StringOutput {
		return vs[0].([]VersionInboundServicesItem)[vs[1].(int)].ToStringOutput()
	}).(pulumi.StringOutput)
}

// Current serving status of this version. Only the versions with a SERVING status create instances and can be billed.SERVING_STATUS_UNSPECIFIED is an invalid value. Defaults to SERVING.
type VersionServingStatus pulumi.String

const (
	// Not specified.
	VersionServingStatusServingStatusUnspecified = VersionServingStatus("SERVING_STATUS_UNSPECIFIED")
	// Currently serving. Instances are created according to the scaling settings of the version.
	VersionServingStatusServing = VersionServingStatus("SERVING")
	// Disabled. No instances will be created and the scaling settings are ignored until the state of the version changes to SERVING.
	VersionServingStatusStopped = VersionServingStatus("STOPPED")
)

func (VersionServingStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e VersionServingStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e VersionServingStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e VersionServingStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e VersionServingStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}
