// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a firewall rule for the application.
// Auto-naming is currently not supported for this resource.
type IngressRule struct {
	pulumi.CustomResourceState

	// The action to take on matched requests.
	Action pulumi.StringOutput `pulumi:"action"`
	// An optional string description of this rule. This field has a maximum length of 400 characters.
	Description pulumi.StringOutput `pulumi:"description"`
	// A positive integer between 1, Int32.MaxValue-1 that defines the order of rule evaluation. Rules with the lowest priority are evaluated first.A default rule at priority Int32.MaxValue matches all IPv4 and IPv6 traffic when no previous rule matches. Only the action of this rule can be modified by the user.
	Priority pulumi.IntOutput `pulumi:"priority"`
	// IP address or range, defined using CIDR notation, of requests that this rule applies to. You can use the wildcard character "*" to match all IPs equivalent to "0/0" and "::/0" together. Examples: 192.168.1.1 or 192.168.0.0/16 or 2001:db8::/32 or 2001:0db8:0000:0042:0000:8a2e:0370:7334. Truncation will be silently performed on addresses which are not properly truncated. For example, 1.2.3.4/24 is accepted as the same address as 1.2.3.0/24. Similarly, for IPv6, 2001:db8::1/32 is accepted as the same address as 2001:db8::/32.
	SourceRange pulumi.StringOutput `pulumi:"sourceRange"`
}

// NewIngressRule registers a new resource with the given unique name, arguments, and options.
func NewIngressRule(ctx *pulumi.Context,
	name string, args *IngressRuleArgs, opts ...pulumi.ResourceOption) (*IngressRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppId == nil {
		return nil, errors.New("invalid value for required argument 'AppId'")
	}
	var resource IngressRule
	err := ctx.RegisterResource("google-native:appengine/v1:IngressRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIngressRule gets an existing IngressRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIngressRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IngressRuleState, opts ...pulumi.ResourceOption) (*IngressRule, error) {
	var resource IngressRule
	err := ctx.ReadResource("google-native:appengine/v1:IngressRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IngressRule resources.
type ingressRuleState struct {
}

type IngressRuleState struct {
}

func (IngressRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*ingressRuleState)(nil)).Elem()
}

type ingressRuleArgs struct {
	// The action to take on matched requests.
	Action *IngressRuleAction `pulumi:"action"`
	AppId  string             `pulumi:"appId"`
	// An optional string description of this rule. This field has a maximum length of 400 characters.
	Description *string `pulumi:"description"`
	// A positive integer between 1, Int32.MaxValue-1 that defines the order of rule evaluation. Rules with the lowest priority are evaluated first.A default rule at priority Int32.MaxValue matches all IPv4 and IPv6 traffic when no previous rule matches. Only the action of this rule can be modified by the user.
	Priority *int `pulumi:"priority"`
	// IP address or range, defined using CIDR notation, of requests that this rule applies to. You can use the wildcard character "*" to match all IPs equivalent to "0/0" and "::/0" together. Examples: 192.168.1.1 or 192.168.0.0/16 or 2001:db8::/32 or 2001:0db8:0000:0042:0000:8a2e:0370:7334. Truncation will be silently performed on addresses which are not properly truncated. For example, 1.2.3.4/24 is accepted as the same address as 1.2.3.0/24. Similarly, for IPv6, 2001:db8::1/32 is accepted as the same address as 2001:db8::/32.
	SourceRange *string `pulumi:"sourceRange"`
}

// The set of arguments for constructing a IngressRule resource.
type IngressRuleArgs struct {
	// The action to take on matched requests.
	Action IngressRuleActionPtrInput
	AppId  pulumi.StringInput
	// An optional string description of this rule. This field has a maximum length of 400 characters.
	Description pulumi.StringPtrInput
	// A positive integer between 1, Int32.MaxValue-1 that defines the order of rule evaluation. Rules with the lowest priority are evaluated first.A default rule at priority Int32.MaxValue matches all IPv4 and IPv6 traffic when no previous rule matches. Only the action of this rule can be modified by the user.
	Priority pulumi.IntPtrInput
	// IP address or range, defined using CIDR notation, of requests that this rule applies to. You can use the wildcard character "*" to match all IPs equivalent to "0/0" and "::/0" together. Examples: 192.168.1.1 or 192.168.0.0/16 or 2001:db8::/32 or 2001:0db8:0000:0042:0000:8a2e:0370:7334. Truncation will be silently performed on addresses which are not properly truncated. For example, 1.2.3.4/24 is accepted as the same address as 1.2.3.0/24. Similarly, for IPv6, 2001:db8::1/32 is accepted as the same address as 2001:db8::/32.
	SourceRange pulumi.StringPtrInput
}

func (IngressRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ingressRuleArgs)(nil)).Elem()
}

type IngressRuleInput interface {
	pulumi.Input

	ToIngressRuleOutput() IngressRuleOutput
	ToIngressRuleOutputWithContext(ctx context.Context) IngressRuleOutput
}

func (*IngressRule) ElementType() reflect.Type {
	return reflect.TypeOf((**IngressRule)(nil)).Elem()
}

func (i *IngressRule) ToIngressRuleOutput() IngressRuleOutput {
	return i.ToIngressRuleOutputWithContext(context.Background())
}

func (i *IngressRule) ToIngressRuleOutputWithContext(ctx context.Context) IngressRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressRuleOutput)
}

type IngressRuleOutput struct{ *pulumi.OutputState }

func (IngressRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IngressRule)(nil)).Elem()
}

func (o IngressRuleOutput) ToIngressRuleOutput() IngressRuleOutput {
	return o
}

func (o IngressRuleOutput) ToIngressRuleOutputWithContext(ctx context.Context) IngressRuleOutput {
	return o
}

// The action to take on matched requests.
func (o IngressRuleOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *IngressRule) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

// An optional string description of this rule. This field has a maximum length of 400 characters.
func (o IngressRuleOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *IngressRule) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// A positive integer between 1, Int32.MaxValue-1 that defines the order of rule evaluation. Rules with the lowest priority are evaluated first.A default rule at priority Int32.MaxValue matches all IPv4 and IPv6 traffic when no previous rule matches. Only the action of this rule can be modified by the user.
func (o IngressRuleOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v *IngressRule) pulumi.IntOutput { return v.Priority }).(pulumi.IntOutput)
}

// IP address or range, defined using CIDR notation, of requests that this rule applies to. You can use the wildcard character "*" to match all IPs equivalent to "0/0" and "::/0" together. Examples: 192.168.1.1 or 192.168.0.0/16 or 2001:db8::/32 or 2001:0db8:0000:0042:0000:8a2e:0370:7334. Truncation will be silently performed on addresses which are not properly truncated. For example, 1.2.3.4/24 is accepted as the same address as 1.2.3.0/24. Similarly, for IPv6, 2001:db8::1/32 is accepted as the same address as 2001:db8::/32.
func (o IngressRuleOutput) SourceRange() pulumi.StringOutput {
	return o.ApplyT(func(v *IngressRule) pulumi.StringOutput { return v.SourceRange }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IngressRuleInput)(nil)).Elem(), &IngressRule{})
	pulumi.RegisterOutputType(IngressRuleOutput{})
}
