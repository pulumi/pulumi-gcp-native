// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// Google Cloud Endpoints (https://cloud.google.com/endpoints) configuration for API handlers.
type ApiConfigHandler struct {
	// Action to take when users access resources that require authentication. Defaults to redirect.
	AuthFailAction *ApiConfigHandlerAuthFailAction `pulumi:"authFailAction"`
	// Level of login required to access this resource. Defaults to optional.
	Login *ApiConfigHandlerLogin `pulumi:"login"`
	// Path to the script from the application root directory.
	Script *string `pulumi:"script"`
	// Security (HTTPS) enforcement for this URL.
	SecurityLevel *ApiConfigHandlerSecurityLevel `pulumi:"securityLevel"`
	// URL to serve the endpoint at.
	Url *string `pulumi:"url"`
}

// ApiConfigHandlerInput is an input type that accepts ApiConfigHandlerArgs and ApiConfigHandlerOutput values.
// You can construct a concrete instance of `ApiConfigHandlerInput` via:
//
//	ApiConfigHandlerArgs{...}
type ApiConfigHandlerInput interface {
	pulumi.Input

	ToApiConfigHandlerOutput() ApiConfigHandlerOutput
	ToApiConfigHandlerOutputWithContext(context.Context) ApiConfigHandlerOutput
}

// Google Cloud Endpoints (https://cloud.google.com/endpoints) configuration for API handlers.
type ApiConfigHandlerArgs struct {
	// Action to take when users access resources that require authentication. Defaults to redirect.
	AuthFailAction ApiConfigHandlerAuthFailActionPtrInput `pulumi:"authFailAction"`
	// Level of login required to access this resource. Defaults to optional.
	Login ApiConfigHandlerLoginPtrInput `pulumi:"login"`
	// Path to the script from the application root directory.
	Script pulumi.StringPtrInput `pulumi:"script"`
	// Security (HTTPS) enforcement for this URL.
	SecurityLevel ApiConfigHandlerSecurityLevelPtrInput `pulumi:"securityLevel"`
	// URL to serve the endpoint at.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (ApiConfigHandlerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiConfigHandler)(nil)).Elem()
}

func (i ApiConfigHandlerArgs) ToApiConfigHandlerOutput() ApiConfigHandlerOutput {
	return i.ToApiConfigHandlerOutputWithContext(context.Background())
}

func (i ApiConfigHandlerArgs) ToApiConfigHandlerOutputWithContext(ctx context.Context) ApiConfigHandlerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiConfigHandlerOutput)
}

func (i ApiConfigHandlerArgs) ToApiConfigHandlerPtrOutput() ApiConfigHandlerPtrOutput {
	return i.ToApiConfigHandlerPtrOutputWithContext(context.Background())
}

func (i ApiConfigHandlerArgs) ToApiConfigHandlerPtrOutputWithContext(ctx context.Context) ApiConfigHandlerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiConfigHandlerOutput).ToApiConfigHandlerPtrOutputWithContext(ctx)
}

// ApiConfigHandlerPtrInput is an input type that accepts ApiConfigHandlerArgs, ApiConfigHandlerPtr and ApiConfigHandlerPtrOutput values.
// You can construct a concrete instance of `ApiConfigHandlerPtrInput` via:
//
//	        ApiConfigHandlerArgs{...}
//
//	or:
//
//	        nil
type ApiConfigHandlerPtrInput interface {
	pulumi.Input

	ToApiConfigHandlerPtrOutput() ApiConfigHandlerPtrOutput
	ToApiConfigHandlerPtrOutputWithContext(context.Context) ApiConfigHandlerPtrOutput
}

type apiConfigHandlerPtrType ApiConfigHandlerArgs

func ApiConfigHandlerPtr(v *ApiConfigHandlerArgs) ApiConfigHandlerPtrInput {
	return (*apiConfigHandlerPtrType)(v)
}

func (*apiConfigHandlerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiConfigHandler)(nil)).Elem()
}

func (i *apiConfigHandlerPtrType) ToApiConfigHandlerPtrOutput() ApiConfigHandlerPtrOutput {
	return i.ToApiConfigHandlerPtrOutputWithContext(context.Background())
}

func (i *apiConfigHandlerPtrType) ToApiConfigHandlerPtrOutputWithContext(ctx context.Context) ApiConfigHandlerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiConfigHandlerPtrOutput)
}

// Google Cloud Endpoints (https://cloud.google.com/endpoints) configuration for API handlers.
type ApiConfigHandlerOutput struct{ *pulumi.OutputState }

func (ApiConfigHandlerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiConfigHandler)(nil)).Elem()
}

func (o ApiConfigHandlerOutput) ToApiConfigHandlerOutput() ApiConfigHandlerOutput {
	return o
}

func (o ApiConfigHandlerOutput) ToApiConfigHandlerOutputWithContext(ctx context.Context) ApiConfigHandlerOutput {
	return o
}

func (o ApiConfigHandlerOutput) ToApiConfigHandlerPtrOutput() ApiConfigHandlerPtrOutput {
	return o.ToApiConfigHandlerPtrOutputWithContext(context.Background())
}

func (o ApiConfigHandlerOutput) ToApiConfigHandlerPtrOutputWithContext(ctx context.Context) ApiConfigHandlerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApiConfigHandler) *ApiConfigHandler {
		return &v
	}).(ApiConfigHandlerPtrOutput)
}

// Action to take when users access resources that require authentication. Defaults to redirect.
func (o ApiConfigHandlerOutput) AuthFailAction() ApiConfigHandlerAuthFailActionPtrOutput {
	return o.ApplyT(func(v ApiConfigHandler) *ApiConfigHandlerAuthFailAction { return v.AuthFailAction }).(ApiConfigHandlerAuthFailActionPtrOutput)
}

// Level of login required to access this resource. Defaults to optional.
func (o ApiConfigHandlerOutput) Login() ApiConfigHandlerLoginPtrOutput {
	return o.ApplyT(func(v ApiConfigHandler) *ApiConfigHandlerLogin { return v.Login }).(ApiConfigHandlerLoginPtrOutput)
}

// Path to the script from the application root directory.
func (o ApiConfigHandlerOutput) Script() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiConfigHandler) *string { return v.Script }).(pulumi.StringPtrOutput)
}

// Security (HTTPS) enforcement for this URL.
func (o ApiConfigHandlerOutput) SecurityLevel() ApiConfigHandlerSecurityLevelPtrOutput {
	return o.ApplyT(func(v ApiConfigHandler) *ApiConfigHandlerSecurityLevel { return v.SecurityLevel }).(ApiConfigHandlerSecurityLevelPtrOutput)
}

// URL to serve the endpoint at.
func (o ApiConfigHandlerOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiConfigHandler) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type ApiConfigHandlerPtrOutput struct{ *pulumi.OutputState }

func (ApiConfigHandlerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiConfigHandler)(nil)).Elem()
}

func (o ApiConfigHandlerPtrOutput) ToApiConfigHandlerPtrOutput() ApiConfigHandlerPtrOutput {
	return o
}

func (o ApiConfigHandlerPtrOutput) ToApiConfigHandlerPtrOutputWithContext(ctx context.Context) ApiConfigHandlerPtrOutput {
	return o
}

func (o ApiConfigHandlerPtrOutput) Elem() ApiConfigHandlerOutput {
	return o.ApplyT(func(v *ApiConfigHandler) ApiConfigHandler {
		if v != nil {
			return *v
		}
		var ret ApiConfigHandler
		return ret
	}).(ApiConfigHandlerOutput)
}

// Action to take when users access resources that require authentication. Defaults to redirect.
func (o ApiConfigHandlerPtrOutput) AuthFailAction() ApiConfigHandlerAuthFailActionPtrOutput {
	return o.ApplyT(func(v *ApiConfigHandler) *ApiConfigHandlerAuthFailAction {
		if v == nil {
			return nil
		}
		return v.AuthFailAction
	}).(ApiConfigHandlerAuthFailActionPtrOutput)
}

// Level of login required to access this resource. Defaults to optional.
func (o ApiConfigHandlerPtrOutput) Login() ApiConfigHandlerLoginPtrOutput {
	return o.ApplyT(func(v *ApiConfigHandler) *ApiConfigHandlerLogin {
		if v == nil {
			return nil
		}
		return v.Login
	}).(ApiConfigHandlerLoginPtrOutput)
}

// Path to the script from the application root directory.
func (o ApiConfigHandlerPtrOutput) Script() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiConfigHandler) *string {
		if v == nil {
			return nil
		}
		return v.Script
	}).(pulumi.StringPtrOutput)
}

// Security (HTTPS) enforcement for this URL.
func (o ApiConfigHandlerPtrOutput) SecurityLevel() ApiConfigHandlerSecurityLevelPtrOutput {
	return o.ApplyT(func(v *ApiConfigHandler) *ApiConfigHandlerSecurityLevel {
		if v == nil {
			return nil
		}
		return v.SecurityLevel
	}).(ApiConfigHandlerSecurityLevelPtrOutput)
}

// URL to serve the endpoint at.
func (o ApiConfigHandlerPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiConfigHandler) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// Google Cloud Endpoints (https://cloud.google.com/endpoints) configuration for API handlers.
type ApiConfigHandlerResponse struct {
	// Action to take when users access resources that require authentication. Defaults to redirect.
	AuthFailAction string `pulumi:"authFailAction"`
	// Level of login required to access this resource. Defaults to optional.
	Login string `pulumi:"login"`
	// Path to the script from the application root directory.
	Script string `pulumi:"script"`
	// Security (HTTPS) enforcement for this URL.
	SecurityLevel string `pulumi:"securityLevel"`
	// URL to serve the endpoint at.
	Url string `pulumi:"url"`
}

// Google Cloud Endpoints (https://cloud.google.com/endpoints) configuration for API handlers.
type ApiConfigHandlerResponseOutput struct{ *pulumi.OutputState }

func (ApiConfigHandlerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiConfigHandlerResponse)(nil)).Elem()
}

func (o ApiConfigHandlerResponseOutput) ToApiConfigHandlerResponseOutput() ApiConfigHandlerResponseOutput {
	return o
}

func (o ApiConfigHandlerResponseOutput) ToApiConfigHandlerResponseOutputWithContext(ctx context.Context) ApiConfigHandlerResponseOutput {
	return o
}

// Action to take when users access resources that require authentication. Defaults to redirect.
func (o ApiConfigHandlerResponseOutput) AuthFailAction() pulumi.StringOutput {
	return o.ApplyT(func(v ApiConfigHandlerResponse) string { return v.AuthFailAction }).(pulumi.StringOutput)
}

// Level of login required to access this resource. Defaults to optional.
func (o ApiConfigHandlerResponseOutput) Login() pulumi.StringOutput {
	return o.ApplyT(func(v ApiConfigHandlerResponse) string { return v.Login }).(pulumi.StringOutput)
}

// Path to the script from the application root directory.
func (o ApiConfigHandlerResponseOutput) Script() pulumi.StringOutput {
	return o.ApplyT(func(v ApiConfigHandlerResponse) string { return v.Script }).(pulumi.StringOutput)
}

// Security (HTTPS) enforcement for this URL.
func (o ApiConfigHandlerResponseOutput) SecurityLevel() pulumi.StringOutput {
	return o.ApplyT(func(v ApiConfigHandlerResponse) string { return v.SecurityLevel }).(pulumi.StringOutput)
}

// URL to serve the endpoint at.
func (o ApiConfigHandlerResponseOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ApiConfigHandlerResponse) string { return v.Url }).(pulumi.StringOutput)
}

// Uses Google Cloud Endpoints to handle requests.
type ApiEndpointHandler struct {
	// Path to the script from the application root directory.
	ScriptPath *string `pulumi:"scriptPath"`
}

// ApiEndpointHandlerInput is an input type that accepts ApiEndpointHandlerArgs and ApiEndpointHandlerOutput values.
// You can construct a concrete instance of `ApiEndpointHandlerInput` via:
//
//	ApiEndpointHandlerArgs{...}
type ApiEndpointHandlerInput interface {
	pulumi.Input

	ToApiEndpointHandlerOutput() ApiEndpointHandlerOutput
	ToApiEndpointHandlerOutputWithContext(context.Context) ApiEndpointHandlerOutput
}

// Uses Google Cloud Endpoints to handle requests.
type ApiEndpointHandlerArgs struct {
	// Path to the script from the application root directory.
	ScriptPath pulumi.StringPtrInput `pulumi:"scriptPath"`
}

func (ApiEndpointHandlerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiEndpointHandler)(nil)).Elem()
}

func (i ApiEndpointHandlerArgs) ToApiEndpointHandlerOutput() ApiEndpointHandlerOutput {
	return i.ToApiEndpointHandlerOutputWithContext(context.Background())
}

func (i ApiEndpointHandlerArgs) ToApiEndpointHandlerOutputWithContext(ctx context.Context) ApiEndpointHandlerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiEndpointHandlerOutput)
}

func (i ApiEndpointHandlerArgs) ToApiEndpointHandlerPtrOutput() ApiEndpointHandlerPtrOutput {
	return i.ToApiEndpointHandlerPtrOutputWithContext(context.Background())
}

func (i ApiEndpointHandlerArgs) ToApiEndpointHandlerPtrOutputWithContext(ctx context.Context) ApiEndpointHandlerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiEndpointHandlerOutput).ToApiEndpointHandlerPtrOutputWithContext(ctx)
}

// ApiEndpointHandlerPtrInput is an input type that accepts ApiEndpointHandlerArgs, ApiEndpointHandlerPtr and ApiEndpointHandlerPtrOutput values.
// You can construct a concrete instance of `ApiEndpointHandlerPtrInput` via:
//
//	        ApiEndpointHandlerArgs{...}
//
//	or:
//
//	        nil
type ApiEndpointHandlerPtrInput interface {
	pulumi.Input

	ToApiEndpointHandlerPtrOutput() ApiEndpointHandlerPtrOutput
	ToApiEndpointHandlerPtrOutputWithContext(context.Context) ApiEndpointHandlerPtrOutput
}

type apiEndpointHandlerPtrType ApiEndpointHandlerArgs

func ApiEndpointHandlerPtr(v *ApiEndpointHandlerArgs) ApiEndpointHandlerPtrInput {
	return (*apiEndpointHandlerPtrType)(v)
}

func (*apiEndpointHandlerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiEndpointHandler)(nil)).Elem()
}

func (i *apiEndpointHandlerPtrType) ToApiEndpointHandlerPtrOutput() ApiEndpointHandlerPtrOutput {
	return i.ToApiEndpointHandlerPtrOutputWithContext(context.Background())
}

func (i *apiEndpointHandlerPtrType) ToApiEndpointHandlerPtrOutputWithContext(ctx context.Context) ApiEndpointHandlerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiEndpointHandlerPtrOutput)
}

// Uses Google Cloud Endpoints to handle requests.
type ApiEndpointHandlerOutput struct{ *pulumi.OutputState }

func (ApiEndpointHandlerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiEndpointHandler)(nil)).Elem()
}

func (o ApiEndpointHandlerOutput) ToApiEndpointHandlerOutput() ApiEndpointHandlerOutput {
	return o
}

func (o ApiEndpointHandlerOutput) ToApiEndpointHandlerOutputWithContext(ctx context.Context) ApiEndpointHandlerOutput {
	return o
}

func (o ApiEndpointHandlerOutput) ToApiEndpointHandlerPtrOutput() ApiEndpointHandlerPtrOutput {
	return o.ToApiEndpointHandlerPtrOutputWithContext(context.Background())
}

func (o ApiEndpointHandlerOutput) ToApiEndpointHandlerPtrOutputWithContext(ctx context.Context) ApiEndpointHandlerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApiEndpointHandler) *ApiEndpointHandler {
		return &v
	}).(ApiEndpointHandlerPtrOutput)
}

// Path to the script from the application root directory.
func (o ApiEndpointHandlerOutput) ScriptPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiEndpointHandler) *string { return v.ScriptPath }).(pulumi.StringPtrOutput)
}

type ApiEndpointHandlerPtrOutput struct{ *pulumi.OutputState }

func (ApiEndpointHandlerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiEndpointHandler)(nil)).Elem()
}

func (o ApiEndpointHandlerPtrOutput) ToApiEndpointHandlerPtrOutput() ApiEndpointHandlerPtrOutput {
	return o
}

func (o ApiEndpointHandlerPtrOutput) ToApiEndpointHandlerPtrOutputWithContext(ctx context.Context) ApiEndpointHandlerPtrOutput {
	return o
}

func (o ApiEndpointHandlerPtrOutput) Elem() ApiEndpointHandlerOutput {
	return o.ApplyT(func(v *ApiEndpointHandler) ApiEndpointHandler {
		if v != nil {
			return *v
		}
		var ret ApiEndpointHandler
		return ret
	}).(ApiEndpointHandlerOutput)
}

// Path to the script from the application root directory.
func (o ApiEndpointHandlerPtrOutput) ScriptPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiEndpointHandler) *string {
		if v == nil {
			return nil
		}
		return v.ScriptPath
	}).(pulumi.StringPtrOutput)
}

// Uses Google Cloud Endpoints to handle requests.
type ApiEndpointHandlerResponse struct {
	// Path to the script from the application root directory.
	ScriptPath string `pulumi:"scriptPath"`
}

// Uses Google Cloud Endpoints to handle requests.
type ApiEndpointHandlerResponseOutput struct{ *pulumi.OutputState }

func (ApiEndpointHandlerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiEndpointHandlerResponse)(nil)).Elem()
}

func (o ApiEndpointHandlerResponseOutput) ToApiEndpointHandlerResponseOutput() ApiEndpointHandlerResponseOutput {
	return o
}

func (o ApiEndpointHandlerResponseOutput) ToApiEndpointHandlerResponseOutputWithContext(ctx context.Context) ApiEndpointHandlerResponseOutput {
	return o
}

// Path to the script from the application root directory.
func (o ApiEndpointHandlerResponseOutput) ScriptPath() pulumi.StringOutput {
	return o.ApplyT(func(v ApiEndpointHandlerResponse) string { return v.ScriptPath }).(pulumi.StringOutput)
}

// Automatic scaling is based on request rate, response latencies, and other application metrics.
type AutomaticScaling struct {
	// The time period that the Autoscaler (https://cloud.google.com/compute/docs/autoscaler/) should wait before it starts collecting information from a new instance. This prevents the autoscaler from collecting information when the instance is initializing, during which the collected usage would not be reliable. Only applicable in the App Engine flexible environment.
	CoolDownPeriod *string `pulumi:"coolDownPeriod"`
	// Target scaling by CPU usage.
	CpuUtilization *CpuUtilization `pulumi:"cpuUtilization"`
	// Target scaling by disk usage.
	DiskUtilization *DiskUtilization `pulumi:"diskUtilization"`
	// Number of concurrent requests an automatic scaling instance can accept before the scheduler spawns a new instance.Defaults to a runtime-specific value.
	MaxConcurrentRequests *int `pulumi:"maxConcurrentRequests"`
	// Maximum number of idle instances that should be maintained for this version.
	MaxIdleInstances *int `pulumi:"maxIdleInstances"`
	// Maximum amount of time that a request should wait in the pending queue before starting a new instance to handle it.
	MaxPendingLatency *string `pulumi:"maxPendingLatency"`
	// Maximum number of instances that should be started to handle requests for this version.
	MaxTotalInstances *int `pulumi:"maxTotalInstances"`
	// Minimum number of idle instances that should be maintained for this version. Only applicable for the default version of a service.
	MinIdleInstances *int `pulumi:"minIdleInstances"`
	// Minimum amount of time a request should wait in the pending queue before starting a new instance to handle it.
	MinPendingLatency *string `pulumi:"minPendingLatency"`
	// Minimum number of running instances that should be maintained for this version.
	MinTotalInstances *int `pulumi:"minTotalInstances"`
	// Target scaling by network usage.
	NetworkUtilization *NetworkUtilization `pulumi:"networkUtilization"`
	// Target scaling by request utilization.
	RequestUtilization *RequestUtilization `pulumi:"requestUtilization"`
	// Scheduler settings for standard environment.
	StandardSchedulerSettings *StandardSchedulerSettings `pulumi:"standardSchedulerSettings"`
}

// AutomaticScalingInput is an input type that accepts AutomaticScalingArgs and AutomaticScalingOutput values.
// You can construct a concrete instance of `AutomaticScalingInput` via:
//
//	AutomaticScalingArgs{...}
type AutomaticScalingInput interface {
	pulumi.Input

	ToAutomaticScalingOutput() AutomaticScalingOutput
	ToAutomaticScalingOutputWithContext(context.Context) AutomaticScalingOutput
}

// Automatic scaling is based on request rate, response latencies, and other application metrics.
type AutomaticScalingArgs struct {
	// The time period that the Autoscaler (https://cloud.google.com/compute/docs/autoscaler/) should wait before it starts collecting information from a new instance. This prevents the autoscaler from collecting information when the instance is initializing, during which the collected usage would not be reliable. Only applicable in the App Engine flexible environment.
	CoolDownPeriod pulumi.StringPtrInput `pulumi:"coolDownPeriod"`
	// Target scaling by CPU usage.
	CpuUtilization CpuUtilizationPtrInput `pulumi:"cpuUtilization"`
	// Target scaling by disk usage.
	DiskUtilization DiskUtilizationPtrInput `pulumi:"diskUtilization"`
	// Number of concurrent requests an automatic scaling instance can accept before the scheduler spawns a new instance.Defaults to a runtime-specific value.
	MaxConcurrentRequests pulumi.IntPtrInput `pulumi:"maxConcurrentRequests"`
	// Maximum number of idle instances that should be maintained for this version.
	MaxIdleInstances pulumi.IntPtrInput `pulumi:"maxIdleInstances"`
	// Maximum amount of time that a request should wait in the pending queue before starting a new instance to handle it.
	MaxPendingLatency pulumi.StringPtrInput `pulumi:"maxPendingLatency"`
	// Maximum number of instances that should be started to handle requests for this version.
	MaxTotalInstances pulumi.IntPtrInput `pulumi:"maxTotalInstances"`
	// Minimum number of idle instances that should be maintained for this version. Only applicable for the default version of a service.
	MinIdleInstances pulumi.IntPtrInput `pulumi:"minIdleInstances"`
	// Minimum amount of time a request should wait in the pending queue before starting a new instance to handle it.
	MinPendingLatency pulumi.StringPtrInput `pulumi:"minPendingLatency"`
	// Minimum number of running instances that should be maintained for this version.
	MinTotalInstances pulumi.IntPtrInput `pulumi:"minTotalInstances"`
	// Target scaling by network usage.
	NetworkUtilization NetworkUtilizationPtrInput `pulumi:"networkUtilization"`
	// Target scaling by request utilization.
	RequestUtilization RequestUtilizationPtrInput `pulumi:"requestUtilization"`
	// Scheduler settings for standard environment.
	StandardSchedulerSettings StandardSchedulerSettingsPtrInput `pulumi:"standardSchedulerSettings"`
}

func (AutomaticScalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomaticScaling)(nil)).Elem()
}

func (i AutomaticScalingArgs) ToAutomaticScalingOutput() AutomaticScalingOutput {
	return i.ToAutomaticScalingOutputWithContext(context.Background())
}

func (i AutomaticScalingArgs) ToAutomaticScalingOutputWithContext(ctx context.Context) AutomaticScalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomaticScalingOutput)
}

func (i AutomaticScalingArgs) ToAutomaticScalingPtrOutput() AutomaticScalingPtrOutput {
	return i.ToAutomaticScalingPtrOutputWithContext(context.Background())
}

func (i AutomaticScalingArgs) ToAutomaticScalingPtrOutputWithContext(ctx context.Context) AutomaticScalingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomaticScalingOutput).ToAutomaticScalingPtrOutputWithContext(ctx)
}

// AutomaticScalingPtrInput is an input type that accepts AutomaticScalingArgs, AutomaticScalingPtr and AutomaticScalingPtrOutput values.
// You can construct a concrete instance of `AutomaticScalingPtrInput` via:
//
//	        AutomaticScalingArgs{...}
//
//	or:
//
//	        nil
type AutomaticScalingPtrInput interface {
	pulumi.Input

	ToAutomaticScalingPtrOutput() AutomaticScalingPtrOutput
	ToAutomaticScalingPtrOutputWithContext(context.Context) AutomaticScalingPtrOutput
}

type automaticScalingPtrType AutomaticScalingArgs

func AutomaticScalingPtr(v *AutomaticScalingArgs) AutomaticScalingPtrInput {
	return (*automaticScalingPtrType)(v)
}

func (*automaticScalingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutomaticScaling)(nil)).Elem()
}

func (i *automaticScalingPtrType) ToAutomaticScalingPtrOutput() AutomaticScalingPtrOutput {
	return i.ToAutomaticScalingPtrOutputWithContext(context.Background())
}

func (i *automaticScalingPtrType) ToAutomaticScalingPtrOutputWithContext(ctx context.Context) AutomaticScalingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomaticScalingPtrOutput)
}

// Automatic scaling is based on request rate, response latencies, and other application metrics.
type AutomaticScalingOutput struct{ *pulumi.OutputState }

func (AutomaticScalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomaticScaling)(nil)).Elem()
}

func (o AutomaticScalingOutput) ToAutomaticScalingOutput() AutomaticScalingOutput {
	return o
}

func (o AutomaticScalingOutput) ToAutomaticScalingOutputWithContext(ctx context.Context) AutomaticScalingOutput {
	return o
}

func (o AutomaticScalingOutput) ToAutomaticScalingPtrOutput() AutomaticScalingPtrOutput {
	return o.ToAutomaticScalingPtrOutputWithContext(context.Background())
}

func (o AutomaticScalingOutput) ToAutomaticScalingPtrOutputWithContext(ctx context.Context) AutomaticScalingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AutomaticScaling) *AutomaticScaling {
		return &v
	}).(AutomaticScalingPtrOutput)
}

// The time period that the Autoscaler (https://cloud.google.com/compute/docs/autoscaler/) should wait before it starts collecting information from a new instance. This prevents the autoscaler from collecting information when the instance is initializing, during which the collected usage would not be reliable. Only applicable in the App Engine flexible environment.
func (o AutomaticScalingOutput) CoolDownPeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutomaticScaling) *string { return v.CoolDownPeriod }).(pulumi.StringPtrOutput)
}

// Target scaling by CPU usage.
func (o AutomaticScalingOutput) CpuUtilization() CpuUtilizationPtrOutput {
	return o.ApplyT(func(v AutomaticScaling) *CpuUtilization { return v.CpuUtilization }).(CpuUtilizationPtrOutput)
}

// Target scaling by disk usage.
func (o AutomaticScalingOutput) DiskUtilization() DiskUtilizationPtrOutput {
	return o.ApplyT(func(v AutomaticScaling) *DiskUtilization { return v.DiskUtilization }).(DiskUtilizationPtrOutput)
}

// Number of concurrent requests an automatic scaling instance can accept before the scheduler spawns a new instance.Defaults to a runtime-specific value.
func (o AutomaticScalingOutput) MaxConcurrentRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AutomaticScaling) *int { return v.MaxConcurrentRequests }).(pulumi.IntPtrOutput)
}

// Maximum number of idle instances that should be maintained for this version.
func (o AutomaticScalingOutput) MaxIdleInstances() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AutomaticScaling) *int { return v.MaxIdleInstances }).(pulumi.IntPtrOutput)
}

// Maximum amount of time that a request should wait in the pending queue before starting a new instance to handle it.
func (o AutomaticScalingOutput) MaxPendingLatency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutomaticScaling) *string { return v.MaxPendingLatency }).(pulumi.StringPtrOutput)
}

// Maximum number of instances that should be started to handle requests for this version.
func (o AutomaticScalingOutput) MaxTotalInstances() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AutomaticScaling) *int { return v.MaxTotalInstances }).(pulumi.IntPtrOutput)
}

// Minimum number of idle instances that should be maintained for this version. Only applicable for the default version of a service.
func (o AutomaticScalingOutput) MinIdleInstances() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AutomaticScaling) *int { return v.MinIdleInstances }).(pulumi.IntPtrOutput)
}

// Minimum amount of time a request should wait in the pending queue before starting a new instance to handle it.
func (o AutomaticScalingOutput) MinPendingLatency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutomaticScaling) *string { return v.MinPendingLatency }).(pulumi.StringPtrOutput)
}

// Minimum number of running instances that should be maintained for this version.
func (o AutomaticScalingOutput) MinTotalInstances() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AutomaticScaling) *int { return v.MinTotalInstances }).(pulumi.IntPtrOutput)
}

// Target scaling by network usage.
func (o AutomaticScalingOutput) NetworkUtilization() NetworkUtilizationPtrOutput {
	return o.ApplyT(func(v AutomaticScaling) *NetworkUtilization { return v.NetworkUtilization }).(NetworkUtilizationPtrOutput)
}

// Target scaling by request utilization.
func (o AutomaticScalingOutput) RequestUtilization() RequestUtilizationPtrOutput {
	return o.ApplyT(func(v AutomaticScaling) *RequestUtilization { return v.RequestUtilization }).(RequestUtilizationPtrOutput)
}

// Scheduler settings for standard environment.
func (o AutomaticScalingOutput) StandardSchedulerSettings() StandardSchedulerSettingsPtrOutput {
	return o.ApplyT(func(v AutomaticScaling) *StandardSchedulerSettings { return v.StandardSchedulerSettings }).(StandardSchedulerSettingsPtrOutput)
}

type AutomaticScalingPtrOutput struct{ *pulumi.OutputState }

func (AutomaticScalingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutomaticScaling)(nil)).Elem()
}

func (o AutomaticScalingPtrOutput) ToAutomaticScalingPtrOutput() AutomaticScalingPtrOutput {
	return o
}

func (o AutomaticScalingPtrOutput) ToAutomaticScalingPtrOutputWithContext(ctx context.Context) AutomaticScalingPtrOutput {
	return o
}

func (o AutomaticScalingPtrOutput) Elem() AutomaticScalingOutput {
	return o.ApplyT(func(v *AutomaticScaling) AutomaticScaling {
		if v != nil {
			return *v
		}
		var ret AutomaticScaling
		return ret
	}).(AutomaticScalingOutput)
}

// The time period that the Autoscaler (https://cloud.google.com/compute/docs/autoscaler/) should wait before it starts collecting information from a new instance. This prevents the autoscaler from collecting information when the instance is initializing, during which the collected usage would not be reliable. Only applicable in the App Engine flexible environment.
func (o AutomaticScalingPtrOutput) CoolDownPeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutomaticScaling) *string {
		if v == nil {
			return nil
		}
		return v.CoolDownPeriod
	}).(pulumi.StringPtrOutput)
}

// Target scaling by CPU usage.
func (o AutomaticScalingPtrOutput) CpuUtilization() CpuUtilizationPtrOutput {
	return o.ApplyT(func(v *AutomaticScaling) *CpuUtilization {
		if v == nil {
			return nil
		}
		return v.CpuUtilization
	}).(CpuUtilizationPtrOutput)
}

// Target scaling by disk usage.
func (o AutomaticScalingPtrOutput) DiskUtilization() DiskUtilizationPtrOutput {
	return o.ApplyT(func(v *AutomaticScaling) *DiskUtilization {
		if v == nil {
			return nil
		}
		return v.DiskUtilization
	}).(DiskUtilizationPtrOutput)
}

// Number of concurrent requests an automatic scaling instance can accept before the scheduler spawns a new instance.Defaults to a runtime-specific value.
func (o AutomaticScalingPtrOutput) MaxConcurrentRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutomaticScaling) *int {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentRequests
	}).(pulumi.IntPtrOutput)
}

// Maximum number of idle instances that should be maintained for this version.
func (o AutomaticScalingPtrOutput) MaxIdleInstances() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutomaticScaling) *int {
		if v == nil {
			return nil
		}
		return v.MaxIdleInstances
	}).(pulumi.IntPtrOutput)
}

// Maximum amount of time that a request should wait in the pending queue before starting a new instance to handle it.
func (o AutomaticScalingPtrOutput) MaxPendingLatency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutomaticScaling) *string {
		if v == nil {
			return nil
		}
		return v.MaxPendingLatency
	}).(pulumi.StringPtrOutput)
}

// Maximum number of instances that should be started to handle requests for this version.
func (o AutomaticScalingPtrOutput) MaxTotalInstances() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutomaticScaling) *int {
		if v == nil {
			return nil
		}
		return v.MaxTotalInstances
	}).(pulumi.IntPtrOutput)
}

// Minimum number of idle instances that should be maintained for this version. Only applicable for the default version of a service.
func (o AutomaticScalingPtrOutput) MinIdleInstances() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutomaticScaling) *int {
		if v == nil {
			return nil
		}
		return v.MinIdleInstances
	}).(pulumi.IntPtrOutput)
}

// Minimum amount of time a request should wait in the pending queue before starting a new instance to handle it.
func (o AutomaticScalingPtrOutput) MinPendingLatency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutomaticScaling) *string {
		if v == nil {
			return nil
		}
		return v.MinPendingLatency
	}).(pulumi.StringPtrOutput)
}

// Minimum number of running instances that should be maintained for this version.
func (o AutomaticScalingPtrOutput) MinTotalInstances() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutomaticScaling) *int {
		if v == nil {
			return nil
		}
		return v.MinTotalInstances
	}).(pulumi.IntPtrOutput)
}

// Target scaling by network usage.
func (o AutomaticScalingPtrOutput) NetworkUtilization() NetworkUtilizationPtrOutput {
	return o.ApplyT(func(v *AutomaticScaling) *NetworkUtilization {
		if v == nil {
			return nil
		}
		return v.NetworkUtilization
	}).(NetworkUtilizationPtrOutput)
}

// Target scaling by request utilization.
func (o AutomaticScalingPtrOutput) RequestUtilization() RequestUtilizationPtrOutput {
	return o.ApplyT(func(v *AutomaticScaling) *RequestUtilization {
		if v == nil {
			return nil
		}
		return v.RequestUtilization
	}).(RequestUtilizationPtrOutput)
}

// Scheduler settings for standard environment.
func (o AutomaticScalingPtrOutput) StandardSchedulerSettings() StandardSchedulerSettingsPtrOutput {
	return o.ApplyT(func(v *AutomaticScaling) *StandardSchedulerSettings {
		if v == nil {
			return nil
		}
		return v.StandardSchedulerSettings
	}).(StandardSchedulerSettingsPtrOutput)
}

// Automatic scaling is based on request rate, response latencies, and other application metrics.
type AutomaticScalingResponse struct {
	// The time period that the Autoscaler (https://cloud.google.com/compute/docs/autoscaler/) should wait before it starts collecting information from a new instance. This prevents the autoscaler from collecting information when the instance is initializing, during which the collected usage would not be reliable. Only applicable in the App Engine flexible environment.
	CoolDownPeriod string `pulumi:"coolDownPeriod"`
	// Target scaling by CPU usage.
	CpuUtilization CpuUtilizationResponse `pulumi:"cpuUtilization"`
	// Target scaling by disk usage.
	DiskUtilization DiskUtilizationResponse `pulumi:"diskUtilization"`
	// Number of concurrent requests an automatic scaling instance can accept before the scheduler spawns a new instance.Defaults to a runtime-specific value.
	MaxConcurrentRequests int `pulumi:"maxConcurrentRequests"`
	// Maximum number of idle instances that should be maintained for this version.
	MaxIdleInstances int `pulumi:"maxIdleInstances"`
	// Maximum amount of time that a request should wait in the pending queue before starting a new instance to handle it.
	MaxPendingLatency string `pulumi:"maxPendingLatency"`
	// Maximum number of instances that should be started to handle requests for this version.
	MaxTotalInstances int `pulumi:"maxTotalInstances"`
	// Minimum number of idle instances that should be maintained for this version. Only applicable for the default version of a service.
	MinIdleInstances int `pulumi:"minIdleInstances"`
	// Minimum amount of time a request should wait in the pending queue before starting a new instance to handle it.
	MinPendingLatency string `pulumi:"minPendingLatency"`
	// Minimum number of running instances that should be maintained for this version.
	MinTotalInstances int `pulumi:"minTotalInstances"`
	// Target scaling by network usage.
	NetworkUtilization NetworkUtilizationResponse `pulumi:"networkUtilization"`
	// Target scaling by request utilization.
	RequestUtilization RequestUtilizationResponse `pulumi:"requestUtilization"`
	// Scheduler settings for standard environment.
	StandardSchedulerSettings StandardSchedulerSettingsResponse `pulumi:"standardSchedulerSettings"`
}

// Automatic scaling is based on request rate, response latencies, and other application metrics.
type AutomaticScalingResponseOutput struct{ *pulumi.OutputState }

func (AutomaticScalingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomaticScalingResponse)(nil)).Elem()
}

func (o AutomaticScalingResponseOutput) ToAutomaticScalingResponseOutput() AutomaticScalingResponseOutput {
	return o
}

func (o AutomaticScalingResponseOutput) ToAutomaticScalingResponseOutputWithContext(ctx context.Context) AutomaticScalingResponseOutput {
	return o
}

// The time period that the Autoscaler (https://cloud.google.com/compute/docs/autoscaler/) should wait before it starts collecting information from a new instance. This prevents the autoscaler from collecting information when the instance is initializing, during which the collected usage would not be reliable. Only applicable in the App Engine flexible environment.
func (o AutomaticScalingResponseOutput) CoolDownPeriod() pulumi.StringOutput {
	return o.ApplyT(func(v AutomaticScalingResponse) string { return v.CoolDownPeriod }).(pulumi.StringOutput)
}

// Target scaling by CPU usage.
func (o AutomaticScalingResponseOutput) CpuUtilization() CpuUtilizationResponseOutput {
	return o.ApplyT(func(v AutomaticScalingResponse) CpuUtilizationResponse { return v.CpuUtilization }).(CpuUtilizationResponseOutput)
}

// Target scaling by disk usage.
func (o AutomaticScalingResponseOutput) DiskUtilization() DiskUtilizationResponseOutput {
	return o.ApplyT(func(v AutomaticScalingResponse) DiskUtilizationResponse { return v.DiskUtilization }).(DiskUtilizationResponseOutput)
}

// Number of concurrent requests an automatic scaling instance can accept before the scheduler spawns a new instance.Defaults to a runtime-specific value.
func (o AutomaticScalingResponseOutput) MaxConcurrentRequests() pulumi.IntOutput {
	return o.ApplyT(func(v AutomaticScalingResponse) int { return v.MaxConcurrentRequests }).(pulumi.IntOutput)
}

// Maximum number of idle instances that should be maintained for this version.
func (o AutomaticScalingResponseOutput) MaxIdleInstances() pulumi.IntOutput {
	return o.ApplyT(func(v AutomaticScalingResponse) int { return v.MaxIdleInstances }).(pulumi.IntOutput)
}

// Maximum amount of time that a request should wait in the pending queue before starting a new instance to handle it.
func (o AutomaticScalingResponseOutput) MaxPendingLatency() pulumi.StringOutput {
	return o.ApplyT(func(v AutomaticScalingResponse) string { return v.MaxPendingLatency }).(pulumi.StringOutput)
}

// Maximum number of instances that should be started to handle requests for this version.
func (o AutomaticScalingResponseOutput) MaxTotalInstances() pulumi.IntOutput {
	return o.ApplyT(func(v AutomaticScalingResponse) int { return v.MaxTotalInstances }).(pulumi.IntOutput)
}

// Minimum number of idle instances that should be maintained for this version. Only applicable for the default version of a service.
func (o AutomaticScalingResponseOutput) MinIdleInstances() pulumi.IntOutput {
	return o.ApplyT(func(v AutomaticScalingResponse) int { return v.MinIdleInstances }).(pulumi.IntOutput)
}

// Minimum amount of time a request should wait in the pending queue before starting a new instance to handle it.
func (o AutomaticScalingResponseOutput) MinPendingLatency() pulumi.StringOutput {
	return o.ApplyT(func(v AutomaticScalingResponse) string { return v.MinPendingLatency }).(pulumi.StringOutput)
}

// Minimum number of running instances that should be maintained for this version.
func (o AutomaticScalingResponseOutput) MinTotalInstances() pulumi.IntOutput {
	return o.ApplyT(func(v AutomaticScalingResponse) int { return v.MinTotalInstances }).(pulumi.IntOutput)
}

// Target scaling by network usage.
func (o AutomaticScalingResponseOutput) NetworkUtilization() NetworkUtilizationResponseOutput {
	return o.ApplyT(func(v AutomaticScalingResponse) NetworkUtilizationResponse { return v.NetworkUtilization }).(NetworkUtilizationResponseOutput)
}

// Target scaling by request utilization.
func (o AutomaticScalingResponseOutput) RequestUtilization() RequestUtilizationResponseOutput {
	return o.ApplyT(func(v AutomaticScalingResponse) RequestUtilizationResponse { return v.RequestUtilization }).(RequestUtilizationResponseOutput)
}

// Scheduler settings for standard environment.
func (o AutomaticScalingResponseOutput) StandardSchedulerSettings() StandardSchedulerSettingsResponseOutput {
	return o.ApplyT(func(v AutomaticScalingResponse) StandardSchedulerSettingsResponse { return v.StandardSchedulerSettings }).(StandardSchedulerSettingsResponseOutput)
}

// A service with basic scaling will create an instance when the application receives a request. The instance will be turned down when the app becomes idle. Basic scaling is ideal for work that is intermittent or driven by user activity.
type BasicScaling struct {
	// Duration of time after the last request that an instance must wait before the instance is shut down.
	IdleTimeout *string `pulumi:"idleTimeout"`
	// Maximum number of instances to create for this version.
	MaxInstances *int `pulumi:"maxInstances"`
}

// BasicScalingInput is an input type that accepts BasicScalingArgs and BasicScalingOutput values.
// You can construct a concrete instance of `BasicScalingInput` via:
//
//	BasicScalingArgs{...}
type BasicScalingInput interface {
	pulumi.Input

	ToBasicScalingOutput() BasicScalingOutput
	ToBasicScalingOutputWithContext(context.Context) BasicScalingOutput
}

// A service with basic scaling will create an instance when the application receives a request. The instance will be turned down when the app becomes idle. Basic scaling is ideal for work that is intermittent or driven by user activity.
type BasicScalingArgs struct {
	// Duration of time after the last request that an instance must wait before the instance is shut down.
	IdleTimeout pulumi.StringPtrInput `pulumi:"idleTimeout"`
	// Maximum number of instances to create for this version.
	MaxInstances pulumi.IntPtrInput `pulumi:"maxInstances"`
}

func (BasicScalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BasicScaling)(nil)).Elem()
}

func (i BasicScalingArgs) ToBasicScalingOutput() BasicScalingOutput {
	return i.ToBasicScalingOutputWithContext(context.Background())
}

func (i BasicScalingArgs) ToBasicScalingOutputWithContext(ctx context.Context) BasicScalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BasicScalingOutput)
}

func (i BasicScalingArgs) ToBasicScalingPtrOutput() BasicScalingPtrOutput {
	return i.ToBasicScalingPtrOutputWithContext(context.Background())
}

func (i BasicScalingArgs) ToBasicScalingPtrOutputWithContext(ctx context.Context) BasicScalingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BasicScalingOutput).ToBasicScalingPtrOutputWithContext(ctx)
}

// BasicScalingPtrInput is an input type that accepts BasicScalingArgs, BasicScalingPtr and BasicScalingPtrOutput values.
// You can construct a concrete instance of `BasicScalingPtrInput` via:
//
//	        BasicScalingArgs{...}
//
//	or:
//
//	        nil
type BasicScalingPtrInput interface {
	pulumi.Input

	ToBasicScalingPtrOutput() BasicScalingPtrOutput
	ToBasicScalingPtrOutputWithContext(context.Context) BasicScalingPtrOutput
}

type basicScalingPtrType BasicScalingArgs

func BasicScalingPtr(v *BasicScalingArgs) BasicScalingPtrInput {
	return (*basicScalingPtrType)(v)
}

func (*basicScalingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BasicScaling)(nil)).Elem()
}

func (i *basicScalingPtrType) ToBasicScalingPtrOutput() BasicScalingPtrOutput {
	return i.ToBasicScalingPtrOutputWithContext(context.Background())
}

func (i *basicScalingPtrType) ToBasicScalingPtrOutputWithContext(ctx context.Context) BasicScalingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BasicScalingPtrOutput)
}

// A service with basic scaling will create an instance when the application receives a request. The instance will be turned down when the app becomes idle. Basic scaling is ideal for work that is intermittent or driven by user activity.
type BasicScalingOutput struct{ *pulumi.OutputState }

func (BasicScalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BasicScaling)(nil)).Elem()
}

func (o BasicScalingOutput) ToBasicScalingOutput() BasicScalingOutput {
	return o
}

func (o BasicScalingOutput) ToBasicScalingOutputWithContext(ctx context.Context) BasicScalingOutput {
	return o
}

func (o BasicScalingOutput) ToBasicScalingPtrOutput() BasicScalingPtrOutput {
	return o.ToBasicScalingPtrOutputWithContext(context.Background())
}

func (o BasicScalingOutput) ToBasicScalingPtrOutputWithContext(ctx context.Context) BasicScalingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BasicScaling) *BasicScaling {
		return &v
	}).(BasicScalingPtrOutput)
}

// Duration of time after the last request that an instance must wait before the instance is shut down.
func (o BasicScalingOutput) IdleTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BasicScaling) *string { return v.IdleTimeout }).(pulumi.StringPtrOutput)
}

// Maximum number of instances to create for this version.
func (o BasicScalingOutput) MaxInstances() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BasicScaling) *int { return v.MaxInstances }).(pulumi.IntPtrOutput)
}

type BasicScalingPtrOutput struct{ *pulumi.OutputState }

func (BasicScalingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BasicScaling)(nil)).Elem()
}

func (o BasicScalingPtrOutput) ToBasicScalingPtrOutput() BasicScalingPtrOutput {
	return o
}

func (o BasicScalingPtrOutput) ToBasicScalingPtrOutputWithContext(ctx context.Context) BasicScalingPtrOutput {
	return o
}

func (o BasicScalingPtrOutput) Elem() BasicScalingOutput {
	return o.ApplyT(func(v *BasicScaling) BasicScaling {
		if v != nil {
			return *v
		}
		var ret BasicScaling
		return ret
	}).(BasicScalingOutput)
}

// Duration of time after the last request that an instance must wait before the instance is shut down.
func (o BasicScalingPtrOutput) IdleTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BasicScaling) *string {
		if v == nil {
			return nil
		}
		return v.IdleTimeout
	}).(pulumi.StringPtrOutput)
}

// Maximum number of instances to create for this version.
func (o BasicScalingPtrOutput) MaxInstances() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BasicScaling) *int {
		if v == nil {
			return nil
		}
		return v.MaxInstances
	}).(pulumi.IntPtrOutput)
}

// A service with basic scaling will create an instance when the application receives a request. The instance will be turned down when the app becomes idle. Basic scaling is ideal for work that is intermittent or driven by user activity.
type BasicScalingResponse struct {
	// Duration of time after the last request that an instance must wait before the instance is shut down.
	IdleTimeout string `pulumi:"idleTimeout"`
	// Maximum number of instances to create for this version.
	MaxInstances int `pulumi:"maxInstances"`
}

// A service with basic scaling will create an instance when the application receives a request. The instance will be turned down when the app becomes idle. Basic scaling is ideal for work that is intermittent or driven by user activity.
type BasicScalingResponseOutput struct{ *pulumi.OutputState }

func (BasicScalingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BasicScalingResponse)(nil)).Elem()
}

func (o BasicScalingResponseOutput) ToBasicScalingResponseOutput() BasicScalingResponseOutput {
	return o
}

func (o BasicScalingResponseOutput) ToBasicScalingResponseOutputWithContext(ctx context.Context) BasicScalingResponseOutput {
	return o
}

// Duration of time after the last request that an instance must wait before the instance is shut down.
func (o BasicScalingResponseOutput) IdleTimeout() pulumi.StringOutput {
	return o.ApplyT(func(v BasicScalingResponse) string { return v.IdleTimeout }).(pulumi.StringOutput)
}

// Maximum number of instances to create for this version.
func (o BasicScalingResponseOutput) MaxInstances() pulumi.IntOutput {
	return o.ApplyT(func(v BasicScalingResponse) int { return v.MaxInstances }).(pulumi.IntOutput)
}

// An SSL certificate obtained from a certificate authority.
type CertificateRawData struct {
	// Unencrypted PEM encoded RSA private key. This field is set once on certificate creation and then encrypted. The key size must be 2048 bits or fewer. Must include the header and footer. Example: -----BEGIN RSA PRIVATE KEY----- -----END RSA PRIVATE KEY----- @InputOnly
	PrivateKey *string `pulumi:"privateKey"`
	// PEM encoded x.509 public key certificate. This field is set once on certificate creation. Must include the header and footer. Example: -----BEGIN CERTIFICATE----- -----END CERTIFICATE-----
	PublicCertificate *string `pulumi:"publicCertificate"`
}

// CertificateRawDataInput is an input type that accepts CertificateRawDataArgs and CertificateRawDataOutput values.
// You can construct a concrete instance of `CertificateRawDataInput` via:
//
//	CertificateRawDataArgs{...}
type CertificateRawDataInput interface {
	pulumi.Input

	ToCertificateRawDataOutput() CertificateRawDataOutput
	ToCertificateRawDataOutputWithContext(context.Context) CertificateRawDataOutput
}

// An SSL certificate obtained from a certificate authority.
type CertificateRawDataArgs struct {
	// Unencrypted PEM encoded RSA private key. This field is set once on certificate creation and then encrypted. The key size must be 2048 bits or fewer. Must include the header and footer. Example: -----BEGIN RSA PRIVATE KEY----- -----END RSA PRIVATE KEY----- @InputOnly
	PrivateKey pulumi.StringPtrInput `pulumi:"privateKey"`
	// PEM encoded x.509 public key certificate. This field is set once on certificate creation. Must include the header and footer. Example: -----BEGIN CERTIFICATE----- -----END CERTIFICATE-----
	PublicCertificate pulumi.StringPtrInput `pulumi:"publicCertificate"`
}

func (CertificateRawDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateRawData)(nil)).Elem()
}

func (i CertificateRawDataArgs) ToCertificateRawDataOutput() CertificateRawDataOutput {
	return i.ToCertificateRawDataOutputWithContext(context.Background())
}

func (i CertificateRawDataArgs) ToCertificateRawDataOutputWithContext(ctx context.Context) CertificateRawDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateRawDataOutput)
}

func (i CertificateRawDataArgs) ToCertificateRawDataPtrOutput() CertificateRawDataPtrOutput {
	return i.ToCertificateRawDataPtrOutputWithContext(context.Background())
}

func (i CertificateRawDataArgs) ToCertificateRawDataPtrOutputWithContext(ctx context.Context) CertificateRawDataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateRawDataOutput).ToCertificateRawDataPtrOutputWithContext(ctx)
}

// CertificateRawDataPtrInput is an input type that accepts CertificateRawDataArgs, CertificateRawDataPtr and CertificateRawDataPtrOutput values.
// You can construct a concrete instance of `CertificateRawDataPtrInput` via:
//
//	        CertificateRawDataArgs{...}
//
//	or:
//
//	        nil
type CertificateRawDataPtrInput interface {
	pulumi.Input

	ToCertificateRawDataPtrOutput() CertificateRawDataPtrOutput
	ToCertificateRawDataPtrOutputWithContext(context.Context) CertificateRawDataPtrOutput
}

type certificateRawDataPtrType CertificateRawDataArgs

func CertificateRawDataPtr(v *CertificateRawDataArgs) CertificateRawDataPtrInput {
	return (*certificateRawDataPtrType)(v)
}

func (*certificateRawDataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateRawData)(nil)).Elem()
}

func (i *certificateRawDataPtrType) ToCertificateRawDataPtrOutput() CertificateRawDataPtrOutput {
	return i.ToCertificateRawDataPtrOutputWithContext(context.Background())
}

func (i *certificateRawDataPtrType) ToCertificateRawDataPtrOutputWithContext(ctx context.Context) CertificateRawDataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateRawDataPtrOutput)
}

// An SSL certificate obtained from a certificate authority.
type CertificateRawDataOutput struct{ *pulumi.OutputState }

func (CertificateRawDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateRawData)(nil)).Elem()
}

func (o CertificateRawDataOutput) ToCertificateRawDataOutput() CertificateRawDataOutput {
	return o
}

func (o CertificateRawDataOutput) ToCertificateRawDataOutputWithContext(ctx context.Context) CertificateRawDataOutput {
	return o
}

func (o CertificateRawDataOutput) ToCertificateRawDataPtrOutput() CertificateRawDataPtrOutput {
	return o.ToCertificateRawDataPtrOutputWithContext(context.Background())
}

func (o CertificateRawDataOutput) ToCertificateRawDataPtrOutputWithContext(ctx context.Context) CertificateRawDataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CertificateRawData) *CertificateRawData {
		return &v
	}).(CertificateRawDataPtrOutput)
}

// Unencrypted PEM encoded RSA private key. This field is set once on certificate creation and then encrypted. The key size must be 2048 bits or fewer. Must include the header and footer. Example: -----BEGIN RSA PRIVATE KEY----- -----END RSA PRIVATE KEY----- @InputOnly
func (o CertificateRawDataOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateRawData) *string { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

// PEM encoded x.509 public key certificate. This field is set once on certificate creation. Must include the header and footer. Example: -----BEGIN CERTIFICATE----- -----END CERTIFICATE-----
func (o CertificateRawDataOutput) PublicCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateRawData) *string { return v.PublicCertificate }).(pulumi.StringPtrOutput)
}

type CertificateRawDataPtrOutput struct{ *pulumi.OutputState }

func (CertificateRawDataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateRawData)(nil)).Elem()
}

func (o CertificateRawDataPtrOutput) ToCertificateRawDataPtrOutput() CertificateRawDataPtrOutput {
	return o
}

func (o CertificateRawDataPtrOutput) ToCertificateRawDataPtrOutputWithContext(ctx context.Context) CertificateRawDataPtrOutput {
	return o
}

func (o CertificateRawDataPtrOutput) Elem() CertificateRawDataOutput {
	return o.ApplyT(func(v *CertificateRawData) CertificateRawData {
		if v != nil {
			return *v
		}
		var ret CertificateRawData
		return ret
	}).(CertificateRawDataOutput)
}

// Unencrypted PEM encoded RSA private key. This field is set once on certificate creation and then encrypted. The key size must be 2048 bits or fewer. Must include the header and footer. Example: -----BEGIN RSA PRIVATE KEY----- -----END RSA PRIVATE KEY----- @InputOnly
func (o CertificateRawDataPtrOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateRawData) *string {
		if v == nil {
			return nil
		}
		return v.PrivateKey
	}).(pulumi.StringPtrOutput)
}

// PEM encoded x.509 public key certificate. This field is set once on certificate creation. Must include the header and footer. Example: -----BEGIN CERTIFICATE----- -----END CERTIFICATE-----
func (o CertificateRawDataPtrOutput) PublicCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateRawData) *string {
		if v == nil {
			return nil
		}
		return v.PublicCertificate
	}).(pulumi.StringPtrOutput)
}

// An SSL certificate obtained from a certificate authority.
type CertificateRawDataResponse struct {
	// Unencrypted PEM encoded RSA private key. This field is set once on certificate creation and then encrypted. The key size must be 2048 bits or fewer. Must include the header and footer. Example: -----BEGIN RSA PRIVATE KEY----- -----END RSA PRIVATE KEY----- @InputOnly
	PrivateKey string `pulumi:"privateKey"`
	// PEM encoded x.509 public key certificate. This field is set once on certificate creation. Must include the header and footer. Example: -----BEGIN CERTIFICATE----- -----END CERTIFICATE-----
	PublicCertificate string `pulumi:"publicCertificate"`
}

// An SSL certificate obtained from a certificate authority.
type CertificateRawDataResponseOutput struct{ *pulumi.OutputState }

func (CertificateRawDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateRawDataResponse)(nil)).Elem()
}

func (o CertificateRawDataResponseOutput) ToCertificateRawDataResponseOutput() CertificateRawDataResponseOutput {
	return o
}

func (o CertificateRawDataResponseOutput) ToCertificateRawDataResponseOutputWithContext(ctx context.Context) CertificateRawDataResponseOutput {
	return o
}

// Unencrypted PEM encoded RSA private key. This field is set once on certificate creation and then encrypted. The key size must be 2048 bits or fewer. Must include the header and footer. Example: -----BEGIN RSA PRIVATE KEY----- -----END RSA PRIVATE KEY----- @InputOnly
func (o CertificateRawDataResponseOutput) PrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateRawDataResponse) string { return v.PrivateKey }).(pulumi.StringOutput)
}

// PEM encoded x.509 public key certificate. This field is set once on certificate creation. Must include the header and footer. Example: -----BEGIN CERTIFICATE----- -----END CERTIFICATE-----
func (o CertificateRawDataResponseOutput) PublicCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateRawDataResponse) string { return v.PublicCertificate }).(pulumi.StringOutput)
}

// Options for the build operations performed as a part of the version deployment. Only applicable for App Engine flexible environment when creating a version using source code directly.
type CloudBuildOptions struct {
	// Path to the yaml file used in deployment, used to determine runtime configuration details.Required for flexible environment builds.See https://cloud.google.com/appengine/docs/standard/python/config/appref for more details.
	AppYamlPath *string `pulumi:"appYamlPath"`
	// The Cloud Build timeout used as part of any dependent builds performed by version creation. Defaults to 10 minutes.
	CloudBuildTimeout *string `pulumi:"cloudBuildTimeout"`
}

// CloudBuildOptionsInput is an input type that accepts CloudBuildOptionsArgs and CloudBuildOptionsOutput values.
// You can construct a concrete instance of `CloudBuildOptionsInput` via:
//
//	CloudBuildOptionsArgs{...}
type CloudBuildOptionsInput interface {
	pulumi.Input

	ToCloudBuildOptionsOutput() CloudBuildOptionsOutput
	ToCloudBuildOptionsOutputWithContext(context.Context) CloudBuildOptionsOutput
}

// Options for the build operations performed as a part of the version deployment. Only applicable for App Engine flexible environment when creating a version using source code directly.
type CloudBuildOptionsArgs struct {
	// Path to the yaml file used in deployment, used to determine runtime configuration details.Required for flexible environment builds.See https://cloud.google.com/appengine/docs/standard/python/config/appref for more details.
	AppYamlPath pulumi.StringPtrInput `pulumi:"appYamlPath"`
	// The Cloud Build timeout used as part of any dependent builds performed by version creation. Defaults to 10 minutes.
	CloudBuildTimeout pulumi.StringPtrInput `pulumi:"cloudBuildTimeout"`
}

func (CloudBuildOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudBuildOptions)(nil)).Elem()
}

func (i CloudBuildOptionsArgs) ToCloudBuildOptionsOutput() CloudBuildOptionsOutput {
	return i.ToCloudBuildOptionsOutputWithContext(context.Background())
}

func (i CloudBuildOptionsArgs) ToCloudBuildOptionsOutputWithContext(ctx context.Context) CloudBuildOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudBuildOptionsOutput)
}

func (i CloudBuildOptionsArgs) ToCloudBuildOptionsPtrOutput() CloudBuildOptionsPtrOutput {
	return i.ToCloudBuildOptionsPtrOutputWithContext(context.Background())
}

func (i CloudBuildOptionsArgs) ToCloudBuildOptionsPtrOutputWithContext(ctx context.Context) CloudBuildOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudBuildOptionsOutput).ToCloudBuildOptionsPtrOutputWithContext(ctx)
}

// CloudBuildOptionsPtrInput is an input type that accepts CloudBuildOptionsArgs, CloudBuildOptionsPtr and CloudBuildOptionsPtrOutput values.
// You can construct a concrete instance of `CloudBuildOptionsPtrInput` via:
//
//	        CloudBuildOptionsArgs{...}
//
//	or:
//
//	        nil
type CloudBuildOptionsPtrInput interface {
	pulumi.Input

	ToCloudBuildOptionsPtrOutput() CloudBuildOptionsPtrOutput
	ToCloudBuildOptionsPtrOutputWithContext(context.Context) CloudBuildOptionsPtrOutput
}

type cloudBuildOptionsPtrType CloudBuildOptionsArgs

func CloudBuildOptionsPtr(v *CloudBuildOptionsArgs) CloudBuildOptionsPtrInput {
	return (*cloudBuildOptionsPtrType)(v)
}

func (*cloudBuildOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudBuildOptions)(nil)).Elem()
}

func (i *cloudBuildOptionsPtrType) ToCloudBuildOptionsPtrOutput() CloudBuildOptionsPtrOutput {
	return i.ToCloudBuildOptionsPtrOutputWithContext(context.Background())
}

func (i *cloudBuildOptionsPtrType) ToCloudBuildOptionsPtrOutputWithContext(ctx context.Context) CloudBuildOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudBuildOptionsPtrOutput)
}

// Options for the build operations performed as a part of the version deployment. Only applicable for App Engine flexible environment when creating a version using source code directly.
type CloudBuildOptionsOutput struct{ *pulumi.OutputState }

func (CloudBuildOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudBuildOptions)(nil)).Elem()
}

func (o CloudBuildOptionsOutput) ToCloudBuildOptionsOutput() CloudBuildOptionsOutput {
	return o
}

func (o CloudBuildOptionsOutput) ToCloudBuildOptionsOutputWithContext(ctx context.Context) CloudBuildOptionsOutput {
	return o
}

func (o CloudBuildOptionsOutput) ToCloudBuildOptionsPtrOutput() CloudBuildOptionsPtrOutput {
	return o.ToCloudBuildOptionsPtrOutputWithContext(context.Background())
}

func (o CloudBuildOptionsOutput) ToCloudBuildOptionsPtrOutputWithContext(ctx context.Context) CloudBuildOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CloudBuildOptions) *CloudBuildOptions {
		return &v
	}).(CloudBuildOptionsPtrOutput)
}

// Path to the yaml file used in deployment, used to determine runtime configuration details.Required for flexible environment builds.See https://cloud.google.com/appengine/docs/standard/python/config/appref for more details.
func (o CloudBuildOptionsOutput) AppYamlPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CloudBuildOptions) *string { return v.AppYamlPath }).(pulumi.StringPtrOutput)
}

// The Cloud Build timeout used as part of any dependent builds performed by version creation. Defaults to 10 minutes.
func (o CloudBuildOptionsOutput) CloudBuildTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CloudBuildOptions) *string { return v.CloudBuildTimeout }).(pulumi.StringPtrOutput)
}

type CloudBuildOptionsPtrOutput struct{ *pulumi.OutputState }

func (CloudBuildOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudBuildOptions)(nil)).Elem()
}

func (o CloudBuildOptionsPtrOutput) ToCloudBuildOptionsPtrOutput() CloudBuildOptionsPtrOutput {
	return o
}

func (o CloudBuildOptionsPtrOutput) ToCloudBuildOptionsPtrOutputWithContext(ctx context.Context) CloudBuildOptionsPtrOutput {
	return o
}

func (o CloudBuildOptionsPtrOutput) Elem() CloudBuildOptionsOutput {
	return o.ApplyT(func(v *CloudBuildOptions) CloudBuildOptions {
		if v != nil {
			return *v
		}
		var ret CloudBuildOptions
		return ret
	}).(CloudBuildOptionsOutput)
}

// Path to the yaml file used in deployment, used to determine runtime configuration details.Required for flexible environment builds.See https://cloud.google.com/appengine/docs/standard/python/config/appref for more details.
func (o CloudBuildOptionsPtrOutput) AppYamlPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudBuildOptions) *string {
		if v == nil {
			return nil
		}
		return v.AppYamlPath
	}).(pulumi.StringPtrOutput)
}

// The Cloud Build timeout used as part of any dependent builds performed by version creation. Defaults to 10 minutes.
func (o CloudBuildOptionsPtrOutput) CloudBuildTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudBuildOptions) *string {
		if v == nil {
			return nil
		}
		return v.CloudBuildTimeout
	}).(pulumi.StringPtrOutput)
}

// Options for the build operations performed as a part of the version deployment. Only applicable for App Engine flexible environment when creating a version using source code directly.
type CloudBuildOptionsResponse struct {
	// Path to the yaml file used in deployment, used to determine runtime configuration details.Required for flexible environment builds.See https://cloud.google.com/appengine/docs/standard/python/config/appref for more details.
	AppYamlPath string `pulumi:"appYamlPath"`
	// The Cloud Build timeout used as part of any dependent builds performed by version creation. Defaults to 10 minutes.
	CloudBuildTimeout string `pulumi:"cloudBuildTimeout"`
}

// Options for the build operations performed as a part of the version deployment. Only applicable for App Engine flexible environment when creating a version using source code directly.
type CloudBuildOptionsResponseOutput struct{ *pulumi.OutputState }

func (CloudBuildOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudBuildOptionsResponse)(nil)).Elem()
}

func (o CloudBuildOptionsResponseOutput) ToCloudBuildOptionsResponseOutput() CloudBuildOptionsResponseOutput {
	return o
}

func (o CloudBuildOptionsResponseOutput) ToCloudBuildOptionsResponseOutputWithContext(ctx context.Context) CloudBuildOptionsResponseOutput {
	return o
}

// Path to the yaml file used in deployment, used to determine runtime configuration details.Required for flexible environment builds.See https://cloud.google.com/appengine/docs/standard/python/config/appref for more details.
func (o CloudBuildOptionsResponseOutput) AppYamlPath() pulumi.StringOutput {
	return o.ApplyT(func(v CloudBuildOptionsResponse) string { return v.AppYamlPath }).(pulumi.StringOutput)
}

// The Cloud Build timeout used as part of any dependent builds performed by version creation. Defaults to 10 minutes.
func (o CloudBuildOptionsResponseOutput) CloudBuildTimeout() pulumi.StringOutput {
	return o.ApplyT(func(v CloudBuildOptionsResponse) string { return v.CloudBuildTimeout }).(pulumi.StringOutput)
}

// Docker image that is used to create a container and start a VM instance for the version that you deploy. Only applicable for instances running in the App Engine flexible environment.
type ContainerInfo struct {
	// URI to the hosted container image in Google Container Registry. The URI must be fully qualified and include a tag or digest. Examples: "gcr.io/my-project/image:tag" or "gcr.io/my-project/image@digest"
	Image *string `pulumi:"image"`
}

// ContainerInfoInput is an input type that accepts ContainerInfoArgs and ContainerInfoOutput values.
// You can construct a concrete instance of `ContainerInfoInput` via:
//
//	ContainerInfoArgs{...}
type ContainerInfoInput interface {
	pulumi.Input

	ToContainerInfoOutput() ContainerInfoOutput
	ToContainerInfoOutputWithContext(context.Context) ContainerInfoOutput
}

// Docker image that is used to create a container and start a VM instance for the version that you deploy. Only applicable for instances running in the App Engine flexible environment.
type ContainerInfoArgs struct {
	// URI to the hosted container image in Google Container Registry. The URI must be fully qualified and include a tag or digest. Examples: "gcr.io/my-project/image:tag" or "gcr.io/my-project/image@digest"
	Image pulumi.StringPtrInput `pulumi:"image"`
}

func (ContainerInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerInfo)(nil)).Elem()
}

func (i ContainerInfoArgs) ToContainerInfoOutput() ContainerInfoOutput {
	return i.ToContainerInfoOutputWithContext(context.Background())
}

func (i ContainerInfoArgs) ToContainerInfoOutputWithContext(ctx context.Context) ContainerInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerInfoOutput)
}

func (i ContainerInfoArgs) ToContainerInfoPtrOutput() ContainerInfoPtrOutput {
	return i.ToContainerInfoPtrOutputWithContext(context.Background())
}

func (i ContainerInfoArgs) ToContainerInfoPtrOutputWithContext(ctx context.Context) ContainerInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerInfoOutput).ToContainerInfoPtrOutputWithContext(ctx)
}

// ContainerInfoPtrInput is an input type that accepts ContainerInfoArgs, ContainerInfoPtr and ContainerInfoPtrOutput values.
// You can construct a concrete instance of `ContainerInfoPtrInput` via:
//
//	        ContainerInfoArgs{...}
//
//	or:
//
//	        nil
type ContainerInfoPtrInput interface {
	pulumi.Input

	ToContainerInfoPtrOutput() ContainerInfoPtrOutput
	ToContainerInfoPtrOutputWithContext(context.Context) ContainerInfoPtrOutput
}

type containerInfoPtrType ContainerInfoArgs

func ContainerInfoPtr(v *ContainerInfoArgs) ContainerInfoPtrInput {
	return (*containerInfoPtrType)(v)
}

func (*containerInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerInfo)(nil)).Elem()
}

func (i *containerInfoPtrType) ToContainerInfoPtrOutput() ContainerInfoPtrOutput {
	return i.ToContainerInfoPtrOutputWithContext(context.Background())
}

func (i *containerInfoPtrType) ToContainerInfoPtrOutputWithContext(ctx context.Context) ContainerInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerInfoPtrOutput)
}

// Docker image that is used to create a container and start a VM instance for the version that you deploy. Only applicable for instances running in the App Engine flexible environment.
type ContainerInfoOutput struct{ *pulumi.OutputState }

func (ContainerInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerInfo)(nil)).Elem()
}

func (o ContainerInfoOutput) ToContainerInfoOutput() ContainerInfoOutput {
	return o
}

func (o ContainerInfoOutput) ToContainerInfoOutputWithContext(ctx context.Context) ContainerInfoOutput {
	return o
}

func (o ContainerInfoOutput) ToContainerInfoPtrOutput() ContainerInfoPtrOutput {
	return o.ToContainerInfoPtrOutputWithContext(context.Background())
}

func (o ContainerInfoOutput) ToContainerInfoPtrOutputWithContext(ctx context.Context) ContainerInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContainerInfo) *ContainerInfo {
		return &v
	}).(ContainerInfoPtrOutput)
}

// URI to the hosted container image in Google Container Registry. The URI must be fully qualified and include a tag or digest. Examples: "gcr.io/my-project/image:tag" or "gcr.io/my-project/image@digest"
func (o ContainerInfoOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerInfo) *string { return v.Image }).(pulumi.StringPtrOutput)
}

type ContainerInfoPtrOutput struct{ *pulumi.OutputState }

func (ContainerInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerInfo)(nil)).Elem()
}

func (o ContainerInfoPtrOutput) ToContainerInfoPtrOutput() ContainerInfoPtrOutput {
	return o
}

func (o ContainerInfoPtrOutput) ToContainerInfoPtrOutputWithContext(ctx context.Context) ContainerInfoPtrOutput {
	return o
}

func (o ContainerInfoPtrOutput) Elem() ContainerInfoOutput {
	return o.ApplyT(func(v *ContainerInfo) ContainerInfo {
		if v != nil {
			return *v
		}
		var ret ContainerInfo
		return ret
	}).(ContainerInfoOutput)
}

// URI to the hosted container image in Google Container Registry. The URI must be fully qualified and include a tag or digest. Examples: "gcr.io/my-project/image:tag" or "gcr.io/my-project/image@digest"
func (o ContainerInfoPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerInfo) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// Docker image that is used to create a container and start a VM instance for the version that you deploy. Only applicable for instances running in the App Engine flexible environment.
type ContainerInfoResponse struct {
	// URI to the hosted container image in Google Container Registry. The URI must be fully qualified and include a tag or digest. Examples: "gcr.io/my-project/image:tag" or "gcr.io/my-project/image@digest"
	Image string `pulumi:"image"`
}

// Docker image that is used to create a container and start a VM instance for the version that you deploy. Only applicable for instances running in the App Engine flexible environment.
type ContainerInfoResponseOutput struct{ *pulumi.OutputState }

func (ContainerInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerInfoResponse)(nil)).Elem()
}

func (o ContainerInfoResponseOutput) ToContainerInfoResponseOutput() ContainerInfoResponseOutput {
	return o
}

func (o ContainerInfoResponseOutput) ToContainerInfoResponseOutputWithContext(ctx context.Context) ContainerInfoResponseOutput {
	return o
}

// URI to the hosted container image in Google Container Registry. The URI must be fully qualified and include a tag or digest. Examples: "gcr.io/my-project/image:tag" or "gcr.io/my-project/image@digest"
func (o ContainerInfoResponseOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerInfoResponse) string { return v.Image }).(pulumi.StringOutput)
}

// Target scaling by CPU usage.
type CpuUtilization struct {
	// Period of time over which CPU utilization is calculated.
	AggregationWindowLength *string `pulumi:"aggregationWindowLength"`
	// Target CPU utilization ratio to maintain when scaling. Must be between 0 and 1.
	TargetUtilization *float64 `pulumi:"targetUtilization"`
}

// CpuUtilizationInput is an input type that accepts CpuUtilizationArgs and CpuUtilizationOutput values.
// You can construct a concrete instance of `CpuUtilizationInput` via:
//
//	CpuUtilizationArgs{...}
type CpuUtilizationInput interface {
	pulumi.Input

	ToCpuUtilizationOutput() CpuUtilizationOutput
	ToCpuUtilizationOutputWithContext(context.Context) CpuUtilizationOutput
}

// Target scaling by CPU usage.
type CpuUtilizationArgs struct {
	// Period of time over which CPU utilization is calculated.
	AggregationWindowLength pulumi.StringPtrInput `pulumi:"aggregationWindowLength"`
	// Target CPU utilization ratio to maintain when scaling. Must be between 0 and 1.
	TargetUtilization pulumi.Float64PtrInput `pulumi:"targetUtilization"`
}

func (CpuUtilizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CpuUtilization)(nil)).Elem()
}

func (i CpuUtilizationArgs) ToCpuUtilizationOutput() CpuUtilizationOutput {
	return i.ToCpuUtilizationOutputWithContext(context.Background())
}

func (i CpuUtilizationArgs) ToCpuUtilizationOutputWithContext(ctx context.Context) CpuUtilizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CpuUtilizationOutput)
}

func (i CpuUtilizationArgs) ToCpuUtilizationPtrOutput() CpuUtilizationPtrOutput {
	return i.ToCpuUtilizationPtrOutputWithContext(context.Background())
}

func (i CpuUtilizationArgs) ToCpuUtilizationPtrOutputWithContext(ctx context.Context) CpuUtilizationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CpuUtilizationOutput).ToCpuUtilizationPtrOutputWithContext(ctx)
}

// CpuUtilizationPtrInput is an input type that accepts CpuUtilizationArgs, CpuUtilizationPtr and CpuUtilizationPtrOutput values.
// You can construct a concrete instance of `CpuUtilizationPtrInput` via:
//
//	        CpuUtilizationArgs{...}
//
//	or:
//
//	        nil
type CpuUtilizationPtrInput interface {
	pulumi.Input

	ToCpuUtilizationPtrOutput() CpuUtilizationPtrOutput
	ToCpuUtilizationPtrOutputWithContext(context.Context) CpuUtilizationPtrOutput
}

type cpuUtilizationPtrType CpuUtilizationArgs

func CpuUtilizationPtr(v *CpuUtilizationArgs) CpuUtilizationPtrInput {
	return (*cpuUtilizationPtrType)(v)
}

func (*cpuUtilizationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CpuUtilization)(nil)).Elem()
}

func (i *cpuUtilizationPtrType) ToCpuUtilizationPtrOutput() CpuUtilizationPtrOutput {
	return i.ToCpuUtilizationPtrOutputWithContext(context.Background())
}

func (i *cpuUtilizationPtrType) ToCpuUtilizationPtrOutputWithContext(ctx context.Context) CpuUtilizationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CpuUtilizationPtrOutput)
}

// Target scaling by CPU usage.
type CpuUtilizationOutput struct{ *pulumi.OutputState }

func (CpuUtilizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CpuUtilization)(nil)).Elem()
}

func (o CpuUtilizationOutput) ToCpuUtilizationOutput() CpuUtilizationOutput {
	return o
}

func (o CpuUtilizationOutput) ToCpuUtilizationOutputWithContext(ctx context.Context) CpuUtilizationOutput {
	return o
}

func (o CpuUtilizationOutput) ToCpuUtilizationPtrOutput() CpuUtilizationPtrOutput {
	return o.ToCpuUtilizationPtrOutputWithContext(context.Background())
}

func (o CpuUtilizationOutput) ToCpuUtilizationPtrOutputWithContext(ctx context.Context) CpuUtilizationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CpuUtilization) *CpuUtilization {
		return &v
	}).(CpuUtilizationPtrOutput)
}

// Period of time over which CPU utilization is calculated.
func (o CpuUtilizationOutput) AggregationWindowLength() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CpuUtilization) *string { return v.AggregationWindowLength }).(pulumi.StringPtrOutput)
}

// Target CPU utilization ratio to maintain when scaling. Must be between 0 and 1.
func (o CpuUtilizationOutput) TargetUtilization() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v CpuUtilization) *float64 { return v.TargetUtilization }).(pulumi.Float64PtrOutput)
}

type CpuUtilizationPtrOutput struct{ *pulumi.OutputState }

func (CpuUtilizationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CpuUtilization)(nil)).Elem()
}

func (o CpuUtilizationPtrOutput) ToCpuUtilizationPtrOutput() CpuUtilizationPtrOutput {
	return o
}

func (o CpuUtilizationPtrOutput) ToCpuUtilizationPtrOutputWithContext(ctx context.Context) CpuUtilizationPtrOutput {
	return o
}

func (o CpuUtilizationPtrOutput) Elem() CpuUtilizationOutput {
	return o.ApplyT(func(v *CpuUtilization) CpuUtilization {
		if v != nil {
			return *v
		}
		var ret CpuUtilization
		return ret
	}).(CpuUtilizationOutput)
}

// Period of time over which CPU utilization is calculated.
func (o CpuUtilizationPtrOutput) AggregationWindowLength() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CpuUtilization) *string {
		if v == nil {
			return nil
		}
		return v.AggregationWindowLength
	}).(pulumi.StringPtrOutput)
}

// Target CPU utilization ratio to maintain when scaling. Must be between 0 and 1.
func (o CpuUtilizationPtrOutput) TargetUtilization() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *CpuUtilization) *float64 {
		if v == nil {
			return nil
		}
		return v.TargetUtilization
	}).(pulumi.Float64PtrOutput)
}

// Target scaling by CPU usage.
type CpuUtilizationResponse struct {
	// Period of time over which CPU utilization is calculated.
	AggregationWindowLength string `pulumi:"aggregationWindowLength"`
	// Target CPU utilization ratio to maintain when scaling. Must be between 0 and 1.
	TargetUtilization float64 `pulumi:"targetUtilization"`
}

// Target scaling by CPU usage.
type CpuUtilizationResponseOutput struct{ *pulumi.OutputState }

func (CpuUtilizationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CpuUtilizationResponse)(nil)).Elem()
}

func (o CpuUtilizationResponseOutput) ToCpuUtilizationResponseOutput() CpuUtilizationResponseOutput {
	return o
}

func (o CpuUtilizationResponseOutput) ToCpuUtilizationResponseOutputWithContext(ctx context.Context) CpuUtilizationResponseOutput {
	return o
}

// Period of time over which CPU utilization is calculated.
func (o CpuUtilizationResponseOutput) AggregationWindowLength() pulumi.StringOutput {
	return o.ApplyT(func(v CpuUtilizationResponse) string { return v.AggregationWindowLength }).(pulumi.StringOutput)
}

// Target CPU utilization ratio to maintain when scaling. Must be between 0 and 1.
func (o CpuUtilizationResponseOutput) TargetUtilization() pulumi.Float64Output {
	return o.ApplyT(func(v CpuUtilizationResponse) float64 { return v.TargetUtilization }).(pulumi.Float64Output)
}

// Code and application artifacts used to deploy a version to App Engine.
type Deployment struct {
	// Options for any Google Cloud Build builds created as a part of this deployment.These options will only be used if a new build is created, such as when deploying to the App Engine flexible environment using files or zip.
	CloudBuildOptions *CloudBuildOptions `pulumi:"cloudBuildOptions"`
	// The Docker image for the container that runs the version. Only applicable for instances running in the App Engine flexible environment.
	Container *ContainerInfo `pulumi:"container"`
	// Manifest of the files stored in Google Cloud Storage that are included as part of this version. All files must be readable using the credentials supplied with this call.
	Files *FileInfo `pulumi:"files"`
	// The zip file for this deployment, if this is a zip deployment.
	Zip *ZipInfo `pulumi:"zip"`
}

// DeploymentInput is an input type that accepts DeploymentArgs and DeploymentOutput values.
// You can construct a concrete instance of `DeploymentInput` via:
//
//	DeploymentArgs{...}
type DeploymentInput interface {
	pulumi.Input

	ToDeploymentOutput() DeploymentOutput
	ToDeploymentOutputWithContext(context.Context) DeploymentOutput
}

// Code and application artifacts used to deploy a version to App Engine.
type DeploymentArgs struct {
	// Options for any Google Cloud Build builds created as a part of this deployment.These options will only be used if a new build is created, such as when deploying to the App Engine flexible environment using files or zip.
	CloudBuildOptions CloudBuildOptionsPtrInput `pulumi:"cloudBuildOptions"`
	// The Docker image for the container that runs the version. Only applicable for instances running in the App Engine flexible environment.
	Container ContainerInfoPtrInput `pulumi:"container"`
	// Manifest of the files stored in Google Cloud Storage that are included as part of this version. All files must be readable using the credentials supplied with this call.
	Files FileInfoPtrInput `pulumi:"files"`
	// The zip file for this deployment, if this is a zip deployment.
	Zip ZipInfoPtrInput `pulumi:"zip"`
}

func (DeploymentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Deployment)(nil)).Elem()
}

func (i DeploymentArgs) ToDeploymentOutput() DeploymentOutput {
	return i.ToDeploymentOutputWithContext(context.Background())
}

func (i DeploymentArgs) ToDeploymentOutputWithContext(ctx context.Context) DeploymentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentOutput)
}

func (i DeploymentArgs) ToDeploymentPtrOutput() DeploymentPtrOutput {
	return i.ToDeploymentPtrOutputWithContext(context.Background())
}

func (i DeploymentArgs) ToDeploymentPtrOutputWithContext(ctx context.Context) DeploymentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentOutput).ToDeploymentPtrOutputWithContext(ctx)
}

// DeploymentPtrInput is an input type that accepts DeploymentArgs, DeploymentPtr and DeploymentPtrOutput values.
// You can construct a concrete instance of `DeploymentPtrInput` via:
//
//	        DeploymentArgs{...}
//
//	or:
//
//	        nil
type DeploymentPtrInput interface {
	pulumi.Input

	ToDeploymentPtrOutput() DeploymentPtrOutput
	ToDeploymentPtrOutputWithContext(context.Context) DeploymentPtrOutput
}

type deploymentPtrType DeploymentArgs

func DeploymentPtr(v *DeploymentArgs) DeploymentPtrInput {
	return (*deploymentPtrType)(v)
}

func (*deploymentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Deployment)(nil)).Elem()
}

func (i *deploymentPtrType) ToDeploymentPtrOutput() DeploymentPtrOutput {
	return i.ToDeploymentPtrOutputWithContext(context.Background())
}

func (i *deploymentPtrType) ToDeploymentPtrOutputWithContext(ctx context.Context) DeploymentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentPtrOutput)
}

// Code and application artifacts used to deploy a version to App Engine.
type DeploymentOutput struct{ *pulumi.OutputState }

func (DeploymentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Deployment)(nil)).Elem()
}

func (o DeploymentOutput) ToDeploymentOutput() DeploymentOutput {
	return o
}

func (o DeploymentOutput) ToDeploymentOutputWithContext(ctx context.Context) DeploymentOutput {
	return o
}

func (o DeploymentOutput) ToDeploymentPtrOutput() DeploymentPtrOutput {
	return o.ToDeploymentPtrOutputWithContext(context.Background())
}

func (o DeploymentOutput) ToDeploymentPtrOutputWithContext(ctx context.Context) DeploymentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Deployment) *Deployment {
		return &v
	}).(DeploymentPtrOutput)
}

// Options for any Google Cloud Build builds created as a part of this deployment.These options will only be used if a new build is created, such as when deploying to the App Engine flexible environment using files or zip.
func (o DeploymentOutput) CloudBuildOptions() CloudBuildOptionsPtrOutput {
	return o.ApplyT(func(v Deployment) *CloudBuildOptions { return v.CloudBuildOptions }).(CloudBuildOptionsPtrOutput)
}

// The Docker image for the container that runs the version. Only applicable for instances running in the App Engine flexible environment.
func (o DeploymentOutput) Container() ContainerInfoPtrOutput {
	return o.ApplyT(func(v Deployment) *ContainerInfo { return v.Container }).(ContainerInfoPtrOutput)
}

// Manifest of the files stored in Google Cloud Storage that are included as part of this version. All files must be readable using the credentials supplied with this call.
func (o DeploymentOutput) Files() FileInfoPtrOutput {
	return o.ApplyT(func(v Deployment) *FileInfo { return v.Files }).(FileInfoPtrOutput)
}

// The zip file for this deployment, if this is a zip deployment.
func (o DeploymentOutput) Zip() ZipInfoPtrOutput {
	return o.ApplyT(func(v Deployment) *ZipInfo { return v.Zip }).(ZipInfoPtrOutput)
}

type DeploymentPtrOutput struct{ *pulumi.OutputState }

func (DeploymentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Deployment)(nil)).Elem()
}

func (o DeploymentPtrOutput) ToDeploymentPtrOutput() DeploymentPtrOutput {
	return o
}

func (o DeploymentPtrOutput) ToDeploymentPtrOutputWithContext(ctx context.Context) DeploymentPtrOutput {
	return o
}

func (o DeploymentPtrOutput) Elem() DeploymentOutput {
	return o.ApplyT(func(v *Deployment) Deployment {
		if v != nil {
			return *v
		}
		var ret Deployment
		return ret
	}).(DeploymentOutput)
}

// Options for any Google Cloud Build builds created as a part of this deployment.These options will only be used if a new build is created, such as when deploying to the App Engine flexible environment using files or zip.
func (o DeploymentPtrOutput) CloudBuildOptions() CloudBuildOptionsPtrOutput {
	return o.ApplyT(func(v *Deployment) *CloudBuildOptions {
		if v == nil {
			return nil
		}
		return v.CloudBuildOptions
	}).(CloudBuildOptionsPtrOutput)
}

// The Docker image for the container that runs the version. Only applicable for instances running in the App Engine flexible environment.
func (o DeploymentPtrOutput) Container() ContainerInfoPtrOutput {
	return o.ApplyT(func(v *Deployment) *ContainerInfo {
		if v == nil {
			return nil
		}
		return v.Container
	}).(ContainerInfoPtrOutput)
}

// Manifest of the files stored in Google Cloud Storage that are included as part of this version. All files must be readable using the credentials supplied with this call.
func (o DeploymentPtrOutput) Files() FileInfoPtrOutput {
	return o.ApplyT(func(v *Deployment) *FileInfo {
		if v == nil {
			return nil
		}
		return v.Files
	}).(FileInfoPtrOutput)
}

// The zip file for this deployment, if this is a zip deployment.
func (o DeploymentPtrOutput) Zip() ZipInfoPtrOutput {
	return o.ApplyT(func(v *Deployment) *ZipInfo {
		if v == nil {
			return nil
		}
		return v.Zip
	}).(ZipInfoPtrOutput)
}

// Code and application artifacts used to deploy a version to App Engine.
type DeploymentResponse struct {
	// Options for any Google Cloud Build builds created as a part of this deployment.These options will only be used if a new build is created, such as when deploying to the App Engine flexible environment using files or zip.
	CloudBuildOptions CloudBuildOptionsResponse `pulumi:"cloudBuildOptions"`
	// The Docker image for the container that runs the version. Only applicable for instances running in the App Engine flexible environment.
	Container ContainerInfoResponse `pulumi:"container"`
	// Manifest of the files stored in Google Cloud Storage that are included as part of this version. All files must be readable using the credentials supplied with this call.
	Files FileInfoResponse `pulumi:"files"`
	// The zip file for this deployment, if this is a zip deployment.
	Zip ZipInfoResponse `pulumi:"zip"`
}

// Code and application artifacts used to deploy a version to App Engine.
type DeploymentResponseOutput struct{ *pulumi.OutputState }

func (DeploymentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentResponse)(nil)).Elem()
}

func (o DeploymentResponseOutput) ToDeploymentResponseOutput() DeploymentResponseOutput {
	return o
}

func (o DeploymentResponseOutput) ToDeploymentResponseOutputWithContext(ctx context.Context) DeploymentResponseOutput {
	return o
}

// Options for any Google Cloud Build builds created as a part of this deployment.These options will only be used if a new build is created, such as when deploying to the App Engine flexible environment using files or zip.
func (o DeploymentResponseOutput) CloudBuildOptions() CloudBuildOptionsResponseOutput {
	return o.ApplyT(func(v DeploymentResponse) CloudBuildOptionsResponse { return v.CloudBuildOptions }).(CloudBuildOptionsResponseOutput)
}

// The Docker image for the container that runs the version. Only applicable for instances running in the App Engine flexible environment.
func (o DeploymentResponseOutput) Container() ContainerInfoResponseOutput {
	return o.ApplyT(func(v DeploymentResponse) ContainerInfoResponse { return v.Container }).(ContainerInfoResponseOutput)
}

// Manifest of the files stored in Google Cloud Storage that are included as part of this version. All files must be readable using the credentials supplied with this call.
func (o DeploymentResponseOutput) Files() FileInfoResponseOutput {
	return o.ApplyT(func(v DeploymentResponse) FileInfoResponse { return v.Files }).(FileInfoResponseOutput)
}

// The zip file for this deployment, if this is a zip deployment.
func (o DeploymentResponseOutput) Zip() ZipInfoResponseOutput {
	return o.ApplyT(func(v DeploymentResponse) ZipInfoResponse { return v.Zip }).(ZipInfoResponseOutput)
}

// Target scaling by disk usage. Only applicable in the App Engine flexible environment.
type DiskUtilization struct {
	// Target bytes read per second.
	TargetReadBytesPerSecond *int `pulumi:"targetReadBytesPerSecond"`
	// Target ops read per seconds.
	TargetReadOpsPerSecond *int `pulumi:"targetReadOpsPerSecond"`
	// Target bytes written per second.
	TargetWriteBytesPerSecond *int `pulumi:"targetWriteBytesPerSecond"`
	// Target ops written per second.
	TargetWriteOpsPerSecond *int `pulumi:"targetWriteOpsPerSecond"`
}

// DiskUtilizationInput is an input type that accepts DiskUtilizationArgs and DiskUtilizationOutput values.
// You can construct a concrete instance of `DiskUtilizationInput` via:
//
//	DiskUtilizationArgs{...}
type DiskUtilizationInput interface {
	pulumi.Input

	ToDiskUtilizationOutput() DiskUtilizationOutput
	ToDiskUtilizationOutputWithContext(context.Context) DiskUtilizationOutput
}

// Target scaling by disk usage. Only applicable in the App Engine flexible environment.
type DiskUtilizationArgs struct {
	// Target bytes read per second.
	TargetReadBytesPerSecond pulumi.IntPtrInput `pulumi:"targetReadBytesPerSecond"`
	// Target ops read per seconds.
	TargetReadOpsPerSecond pulumi.IntPtrInput `pulumi:"targetReadOpsPerSecond"`
	// Target bytes written per second.
	TargetWriteBytesPerSecond pulumi.IntPtrInput `pulumi:"targetWriteBytesPerSecond"`
	// Target ops written per second.
	TargetWriteOpsPerSecond pulumi.IntPtrInput `pulumi:"targetWriteOpsPerSecond"`
}

func (DiskUtilizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskUtilization)(nil)).Elem()
}

func (i DiskUtilizationArgs) ToDiskUtilizationOutput() DiskUtilizationOutput {
	return i.ToDiskUtilizationOutputWithContext(context.Background())
}

func (i DiskUtilizationArgs) ToDiskUtilizationOutputWithContext(ctx context.Context) DiskUtilizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskUtilizationOutput)
}

func (i DiskUtilizationArgs) ToDiskUtilizationPtrOutput() DiskUtilizationPtrOutput {
	return i.ToDiskUtilizationPtrOutputWithContext(context.Background())
}

func (i DiskUtilizationArgs) ToDiskUtilizationPtrOutputWithContext(ctx context.Context) DiskUtilizationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskUtilizationOutput).ToDiskUtilizationPtrOutputWithContext(ctx)
}

// DiskUtilizationPtrInput is an input type that accepts DiskUtilizationArgs, DiskUtilizationPtr and DiskUtilizationPtrOutput values.
// You can construct a concrete instance of `DiskUtilizationPtrInput` via:
//
//	        DiskUtilizationArgs{...}
//
//	or:
//
//	        nil
type DiskUtilizationPtrInput interface {
	pulumi.Input

	ToDiskUtilizationPtrOutput() DiskUtilizationPtrOutput
	ToDiskUtilizationPtrOutputWithContext(context.Context) DiskUtilizationPtrOutput
}

type diskUtilizationPtrType DiskUtilizationArgs

func DiskUtilizationPtr(v *DiskUtilizationArgs) DiskUtilizationPtrInput {
	return (*diskUtilizationPtrType)(v)
}

func (*diskUtilizationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskUtilization)(nil)).Elem()
}

func (i *diskUtilizationPtrType) ToDiskUtilizationPtrOutput() DiskUtilizationPtrOutput {
	return i.ToDiskUtilizationPtrOutputWithContext(context.Background())
}

func (i *diskUtilizationPtrType) ToDiskUtilizationPtrOutputWithContext(ctx context.Context) DiskUtilizationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskUtilizationPtrOutput)
}

// Target scaling by disk usage. Only applicable in the App Engine flexible environment.
type DiskUtilizationOutput struct{ *pulumi.OutputState }

func (DiskUtilizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskUtilization)(nil)).Elem()
}

func (o DiskUtilizationOutput) ToDiskUtilizationOutput() DiskUtilizationOutput {
	return o
}

func (o DiskUtilizationOutput) ToDiskUtilizationOutputWithContext(ctx context.Context) DiskUtilizationOutput {
	return o
}

func (o DiskUtilizationOutput) ToDiskUtilizationPtrOutput() DiskUtilizationPtrOutput {
	return o.ToDiskUtilizationPtrOutputWithContext(context.Background())
}

func (o DiskUtilizationOutput) ToDiskUtilizationPtrOutputWithContext(ctx context.Context) DiskUtilizationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DiskUtilization) *DiskUtilization {
		return &v
	}).(DiskUtilizationPtrOutput)
}

// Target bytes read per second.
func (o DiskUtilizationOutput) TargetReadBytesPerSecond() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DiskUtilization) *int { return v.TargetReadBytesPerSecond }).(pulumi.IntPtrOutput)
}

// Target ops read per seconds.
func (o DiskUtilizationOutput) TargetReadOpsPerSecond() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DiskUtilization) *int { return v.TargetReadOpsPerSecond }).(pulumi.IntPtrOutput)
}

// Target bytes written per second.
func (o DiskUtilizationOutput) TargetWriteBytesPerSecond() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DiskUtilization) *int { return v.TargetWriteBytesPerSecond }).(pulumi.IntPtrOutput)
}

// Target ops written per second.
func (o DiskUtilizationOutput) TargetWriteOpsPerSecond() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DiskUtilization) *int { return v.TargetWriteOpsPerSecond }).(pulumi.IntPtrOutput)
}

type DiskUtilizationPtrOutput struct{ *pulumi.OutputState }

func (DiskUtilizationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskUtilization)(nil)).Elem()
}

func (o DiskUtilizationPtrOutput) ToDiskUtilizationPtrOutput() DiskUtilizationPtrOutput {
	return o
}

func (o DiskUtilizationPtrOutput) ToDiskUtilizationPtrOutputWithContext(ctx context.Context) DiskUtilizationPtrOutput {
	return o
}

func (o DiskUtilizationPtrOutput) Elem() DiskUtilizationOutput {
	return o.ApplyT(func(v *DiskUtilization) DiskUtilization {
		if v != nil {
			return *v
		}
		var ret DiskUtilization
		return ret
	}).(DiskUtilizationOutput)
}

// Target bytes read per second.
func (o DiskUtilizationPtrOutput) TargetReadBytesPerSecond() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DiskUtilization) *int {
		if v == nil {
			return nil
		}
		return v.TargetReadBytesPerSecond
	}).(pulumi.IntPtrOutput)
}

// Target ops read per seconds.
func (o DiskUtilizationPtrOutput) TargetReadOpsPerSecond() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DiskUtilization) *int {
		if v == nil {
			return nil
		}
		return v.TargetReadOpsPerSecond
	}).(pulumi.IntPtrOutput)
}

// Target bytes written per second.
func (o DiskUtilizationPtrOutput) TargetWriteBytesPerSecond() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DiskUtilization) *int {
		if v == nil {
			return nil
		}
		return v.TargetWriteBytesPerSecond
	}).(pulumi.IntPtrOutput)
}

// Target ops written per second.
func (o DiskUtilizationPtrOutput) TargetWriteOpsPerSecond() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DiskUtilization) *int {
		if v == nil {
			return nil
		}
		return v.TargetWriteOpsPerSecond
	}).(pulumi.IntPtrOutput)
}

// Target scaling by disk usage. Only applicable in the App Engine flexible environment.
type DiskUtilizationResponse struct {
	// Target bytes read per second.
	TargetReadBytesPerSecond int `pulumi:"targetReadBytesPerSecond"`
	// Target ops read per seconds.
	TargetReadOpsPerSecond int `pulumi:"targetReadOpsPerSecond"`
	// Target bytes written per second.
	TargetWriteBytesPerSecond int `pulumi:"targetWriteBytesPerSecond"`
	// Target ops written per second.
	TargetWriteOpsPerSecond int `pulumi:"targetWriteOpsPerSecond"`
}

// Target scaling by disk usage. Only applicable in the App Engine flexible environment.
type DiskUtilizationResponseOutput struct{ *pulumi.OutputState }

func (DiskUtilizationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskUtilizationResponse)(nil)).Elem()
}

func (o DiskUtilizationResponseOutput) ToDiskUtilizationResponseOutput() DiskUtilizationResponseOutput {
	return o
}

func (o DiskUtilizationResponseOutput) ToDiskUtilizationResponseOutputWithContext(ctx context.Context) DiskUtilizationResponseOutput {
	return o
}

// Target bytes read per second.
func (o DiskUtilizationResponseOutput) TargetReadBytesPerSecond() pulumi.IntOutput {
	return o.ApplyT(func(v DiskUtilizationResponse) int { return v.TargetReadBytesPerSecond }).(pulumi.IntOutput)
}

// Target ops read per seconds.
func (o DiskUtilizationResponseOutput) TargetReadOpsPerSecond() pulumi.IntOutput {
	return o.ApplyT(func(v DiskUtilizationResponse) int { return v.TargetReadOpsPerSecond }).(pulumi.IntOutput)
}

// Target bytes written per second.
func (o DiskUtilizationResponseOutput) TargetWriteBytesPerSecond() pulumi.IntOutput {
	return o.ApplyT(func(v DiskUtilizationResponse) int { return v.TargetWriteBytesPerSecond }).(pulumi.IntOutput)
}

// Target ops written per second.
func (o DiskUtilizationResponseOutput) TargetWriteOpsPerSecond() pulumi.IntOutput {
	return o.ApplyT(func(v DiskUtilizationResponse) int { return v.TargetWriteOpsPerSecond }).(pulumi.IntOutput)
}

// Google Cloud Endpoints (https://cloud.google.com/endpoints) configuration. The Endpoints API Service provides tooling for serving Open API and gRPC endpoints via an NGINX proxy. Only valid for App Engine Flexible environment deployments.The fields here refer to the name and configuration ID of a "service" resource in the Service Management API (https://cloud.google.com/service-management/overview).
type EndpointsApiService struct {
	// Endpoints service configuration ID as specified by the Service Management API. For example "2016-09-19r1".By default, the rollout strategy for Endpoints is RolloutStrategy.FIXED. This means that Endpoints starts up with a particular configuration ID. When a new configuration is rolled out, Endpoints must be given the new configuration ID. The config_id field is used to give the configuration ID and is required in this case.Endpoints also has a rollout strategy called RolloutStrategy.MANAGED. When using this, Endpoints fetches the latest configuration and does not need the configuration ID. In this case, config_id must be omitted.
	ConfigId *string `pulumi:"configId"`
	// Enable or disable trace sampling. By default, this is set to false for enabled.
	DisableTraceSampling *bool `pulumi:"disableTraceSampling"`
	// Endpoints service name which is the name of the "service" resource in the Service Management API. For example "myapi.endpoints.myproject.cloud.goog"
	Name *string `pulumi:"name"`
	// Endpoints rollout strategy. If FIXED, config_id must be specified. If MANAGED, config_id must be omitted.
	RolloutStrategy *EndpointsApiServiceRolloutStrategy `pulumi:"rolloutStrategy"`
}

// EndpointsApiServiceInput is an input type that accepts EndpointsApiServiceArgs and EndpointsApiServiceOutput values.
// You can construct a concrete instance of `EndpointsApiServiceInput` via:
//
//	EndpointsApiServiceArgs{...}
type EndpointsApiServiceInput interface {
	pulumi.Input

	ToEndpointsApiServiceOutput() EndpointsApiServiceOutput
	ToEndpointsApiServiceOutputWithContext(context.Context) EndpointsApiServiceOutput
}

// Google Cloud Endpoints (https://cloud.google.com/endpoints) configuration. The Endpoints API Service provides tooling for serving Open API and gRPC endpoints via an NGINX proxy. Only valid for App Engine Flexible environment deployments.The fields here refer to the name and configuration ID of a "service" resource in the Service Management API (https://cloud.google.com/service-management/overview).
type EndpointsApiServiceArgs struct {
	// Endpoints service configuration ID as specified by the Service Management API. For example "2016-09-19r1".By default, the rollout strategy for Endpoints is RolloutStrategy.FIXED. This means that Endpoints starts up with a particular configuration ID. When a new configuration is rolled out, Endpoints must be given the new configuration ID. The config_id field is used to give the configuration ID and is required in this case.Endpoints also has a rollout strategy called RolloutStrategy.MANAGED. When using this, Endpoints fetches the latest configuration and does not need the configuration ID. In this case, config_id must be omitted.
	ConfigId pulumi.StringPtrInput `pulumi:"configId"`
	// Enable or disable trace sampling. By default, this is set to false for enabled.
	DisableTraceSampling pulumi.BoolPtrInput `pulumi:"disableTraceSampling"`
	// Endpoints service name which is the name of the "service" resource in the Service Management API. For example "myapi.endpoints.myproject.cloud.goog"
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Endpoints rollout strategy. If FIXED, config_id must be specified. If MANAGED, config_id must be omitted.
	RolloutStrategy EndpointsApiServiceRolloutStrategyPtrInput `pulumi:"rolloutStrategy"`
}

func (EndpointsApiServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointsApiService)(nil)).Elem()
}

func (i EndpointsApiServiceArgs) ToEndpointsApiServiceOutput() EndpointsApiServiceOutput {
	return i.ToEndpointsApiServiceOutputWithContext(context.Background())
}

func (i EndpointsApiServiceArgs) ToEndpointsApiServiceOutputWithContext(ctx context.Context) EndpointsApiServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointsApiServiceOutput)
}

func (i EndpointsApiServiceArgs) ToEndpointsApiServicePtrOutput() EndpointsApiServicePtrOutput {
	return i.ToEndpointsApiServicePtrOutputWithContext(context.Background())
}

func (i EndpointsApiServiceArgs) ToEndpointsApiServicePtrOutputWithContext(ctx context.Context) EndpointsApiServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointsApiServiceOutput).ToEndpointsApiServicePtrOutputWithContext(ctx)
}

// EndpointsApiServicePtrInput is an input type that accepts EndpointsApiServiceArgs, EndpointsApiServicePtr and EndpointsApiServicePtrOutput values.
// You can construct a concrete instance of `EndpointsApiServicePtrInput` via:
//
//	        EndpointsApiServiceArgs{...}
//
//	or:
//
//	        nil
type EndpointsApiServicePtrInput interface {
	pulumi.Input

	ToEndpointsApiServicePtrOutput() EndpointsApiServicePtrOutput
	ToEndpointsApiServicePtrOutputWithContext(context.Context) EndpointsApiServicePtrOutput
}

type endpointsApiServicePtrType EndpointsApiServiceArgs

func EndpointsApiServicePtr(v *EndpointsApiServiceArgs) EndpointsApiServicePtrInput {
	return (*endpointsApiServicePtrType)(v)
}

func (*endpointsApiServicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointsApiService)(nil)).Elem()
}

func (i *endpointsApiServicePtrType) ToEndpointsApiServicePtrOutput() EndpointsApiServicePtrOutput {
	return i.ToEndpointsApiServicePtrOutputWithContext(context.Background())
}

func (i *endpointsApiServicePtrType) ToEndpointsApiServicePtrOutputWithContext(ctx context.Context) EndpointsApiServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointsApiServicePtrOutput)
}

// Google Cloud Endpoints (https://cloud.google.com/endpoints) configuration. The Endpoints API Service provides tooling for serving Open API and gRPC endpoints via an NGINX proxy. Only valid for App Engine Flexible environment deployments.The fields here refer to the name and configuration ID of a "service" resource in the Service Management API (https://cloud.google.com/service-management/overview).
type EndpointsApiServiceOutput struct{ *pulumi.OutputState }

func (EndpointsApiServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointsApiService)(nil)).Elem()
}

func (o EndpointsApiServiceOutput) ToEndpointsApiServiceOutput() EndpointsApiServiceOutput {
	return o
}

func (o EndpointsApiServiceOutput) ToEndpointsApiServiceOutputWithContext(ctx context.Context) EndpointsApiServiceOutput {
	return o
}

func (o EndpointsApiServiceOutput) ToEndpointsApiServicePtrOutput() EndpointsApiServicePtrOutput {
	return o.ToEndpointsApiServicePtrOutputWithContext(context.Background())
}

func (o EndpointsApiServiceOutput) ToEndpointsApiServicePtrOutputWithContext(ctx context.Context) EndpointsApiServicePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EndpointsApiService) *EndpointsApiService {
		return &v
	}).(EndpointsApiServicePtrOutput)
}

// Endpoints service configuration ID as specified by the Service Management API. For example "2016-09-19r1".By default, the rollout strategy for Endpoints is RolloutStrategy.FIXED. This means that Endpoints starts up with a particular configuration ID. When a new configuration is rolled out, Endpoints must be given the new configuration ID. The config_id field is used to give the configuration ID and is required in this case.Endpoints also has a rollout strategy called RolloutStrategy.MANAGED. When using this, Endpoints fetches the latest configuration and does not need the configuration ID. In this case, config_id must be omitted.
func (o EndpointsApiServiceOutput) ConfigId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointsApiService) *string { return v.ConfigId }).(pulumi.StringPtrOutput)
}

// Enable or disable trace sampling. By default, this is set to false for enabled.
func (o EndpointsApiServiceOutput) DisableTraceSampling() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EndpointsApiService) *bool { return v.DisableTraceSampling }).(pulumi.BoolPtrOutput)
}

// Endpoints service name which is the name of the "service" resource in the Service Management API. For example "myapi.endpoints.myproject.cloud.goog"
func (o EndpointsApiServiceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointsApiService) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Endpoints rollout strategy. If FIXED, config_id must be specified. If MANAGED, config_id must be omitted.
func (o EndpointsApiServiceOutput) RolloutStrategy() EndpointsApiServiceRolloutStrategyPtrOutput {
	return o.ApplyT(func(v EndpointsApiService) *EndpointsApiServiceRolloutStrategy { return v.RolloutStrategy }).(EndpointsApiServiceRolloutStrategyPtrOutput)
}

type EndpointsApiServicePtrOutput struct{ *pulumi.OutputState }

func (EndpointsApiServicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointsApiService)(nil)).Elem()
}

func (o EndpointsApiServicePtrOutput) ToEndpointsApiServicePtrOutput() EndpointsApiServicePtrOutput {
	return o
}

func (o EndpointsApiServicePtrOutput) ToEndpointsApiServicePtrOutputWithContext(ctx context.Context) EndpointsApiServicePtrOutput {
	return o
}

func (o EndpointsApiServicePtrOutput) Elem() EndpointsApiServiceOutput {
	return o.ApplyT(func(v *EndpointsApiService) EndpointsApiService {
		if v != nil {
			return *v
		}
		var ret EndpointsApiService
		return ret
	}).(EndpointsApiServiceOutput)
}

// Endpoints service configuration ID as specified by the Service Management API. For example "2016-09-19r1".By default, the rollout strategy for Endpoints is RolloutStrategy.FIXED. This means that Endpoints starts up with a particular configuration ID. When a new configuration is rolled out, Endpoints must be given the new configuration ID. The config_id field is used to give the configuration ID and is required in this case.Endpoints also has a rollout strategy called RolloutStrategy.MANAGED. When using this, Endpoints fetches the latest configuration and does not need the configuration ID. In this case, config_id must be omitted.
func (o EndpointsApiServicePtrOutput) ConfigId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EndpointsApiService) *string {
		if v == nil {
			return nil
		}
		return v.ConfigId
	}).(pulumi.StringPtrOutput)
}

// Enable or disable trace sampling. By default, this is set to false for enabled.
func (o EndpointsApiServicePtrOutput) DisableTraceSampling() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EndpointsApiService) *bool {
		if v == nil {
			return nil
		}
		return v.DisableTraceSampling
	}).(pulumi.BoolPtrOutput)
}

// Endpoints service name which is the name of the "service" resource in the Service Management API. For example "myapi.endpoints.myproject.cloud.goog"
func (o EndpointsApiServicePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EndpointsApiService) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Endpoints rollout strategy. If FIXED, config_id must be specified. If MANAGED, config_id must be omitted.
func (o EndpointsApiServicePtrOutput) RolloutStrategy() EndpointsApiServiceRolloutStrategyPtrOutput {
	return o.ApplyT(func(v *EndpointsApiService) *EndpointsApiServiceRolloutStrategy {
		if v == nil {
			return nil
		}
		return v.RolloutStrategy
	}).(EndpointsApiServiceRolloutStrategyPtrOutput)
}

// Google Cloud Endpoints (https://cloud.google.com/endpoints) configuration. The Endpoints API Service provides tooling for serving Open API and gRPC endpoints via an NGINX proxy. Only valid for App Engine Flexible environment deployments.The fields here refer to the name and configuration ID of a "service" resource in the Service Management API (https://cloud.google.com/service-management/overview).
type EndpointsApiServiceResponse struct {
	// Endpoints service configuration ID as specified by the Service Management API. For example "2016-09-19r1".By default, the rollout strategy for Endpoints is RolloutStrategy.FIXED. This means that Endpoints starts up with a particular configuration ID. When a new configuration is rolled out, Endpoints must be given the new configuration ID. The config_id field is used to give the configuration ID and is required in this case.Endpoints also has a rollout strategy called RolloutStrategy.MANAGED. When using this, Endpoints fetches the latest configuration and does not need the configuration ID. In this case, config_id must be omitted.
	ConfigId string `pulumi:"configId"`
	// Enable or disable trace sampling. By default, this is set to false for enabled.
	DisableTraceSampling bool `pulumi:"disableTraceSampling"`
	// Endpoints service name which is the name of the "service" resource in the Service Management API. For example "myapi.endpoints.myproject.cloud.goog"
	Name string `pulumi:"name"`
	// Endpoints rollout strategy. If FIXED, config_id must be specified. If MANAGED, config_id must be omitted.
	RolloutStrategy string `pulumi:"rolloutStrategy"`
}

// Google Cloud Endpoints (https://cloud.google.com/endpoints) configuration. The Endpoints API Service provides tooling for serving Open API and gRPC endpoints via an NGINX proxy. Only valid for App Engine Flexible environment deployments.The fields here refer to the name and configuration ID of a "service" resource in the Service Management API (https://cloud.google.com/service-management/overview).
type EndpointsApiServiceResponseOutput struct{ *pulumi.OutputState }

func (EndpointsApiServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointsApiServiceResponse)(nil)).Elem()
}

func (o EndpointsApiServiceResponseOutput) ToEndpointsApiServiceResponseOutput() EndpointsApiServiceResponseOutput {
	return o
}

func (o EndpointsApiServiceResponseOutput) ToEndpointsApiServiceResponseOutputWithContext(ctx context.Context) EndpointsApiServiceResponseOutput {
	return o
}

// Endpoints service configuration ID as specified by the Service Management API. For example "2016-09-19r1".By default, the rollout strategy for Endpoints is RolloutStrategy.FIXED. This means that Endpoints starts up with a particular configuration ID. When a new configuration is rolled out, Endpoints must be given the new configuration ID. The config_id field is used to give the configuration ID and is required in this case.Endpoints also has a rollout strategy called RolloutStrategy.MANAGED. When using this, Endpoints fetches the latest configuration and does not need the configuration ID. In this case, config_id must be omitted.
func (o EndpointsApiServiceResponseOutput) ConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointsApiServiceResponse) string { return v.ConfigId }).(pulumi.StringOutput)
}

// Enable or disable trace sampling. By default, this is set to false for enabled.
func (o EndpointsApiServiceResponseOutput) DisableTraceSampling() pulumi.BoolOutput {
	return o.ApplyT(func(v EndpointsApiServiceResponse) bool { return v.DisableTraceSampling }).(pulumi.BoolOutput)
}

// Endpoints service name which is the name of the "service" resource in the Service Management API. For example "myapi.endpoints.myproject.cloud.goog"
func (o EndpointsApiServiceResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointsApiServiceResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Endpoints rollout strategy. If FIXED, config_id must be specified. If MANAGED, config_id must be omitted.
func (o EndpointsApiServiceResponseOutput) RolloutStrategy() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointsApiServiceResponse) string { return v.RolloutStrategy }).(pulumi.StringOutput)
}

// The entrypoint for the application.
type Entrypoint struct {
	// The format should be a shell command that can be fed to bash -c.
	Shell *string `pulumi:"shell"`
}

// EntrypointInput is an input type that accepts EntrypointArgs and EntrypointOutput values.
// You can construct a concrete instance of `EntrypointInput` via:
//
//	EntrypointArgs{...}
type EntrypointInput interface {
	pulumi.Input

	ToEntrypointOutput() EntrypointOutput
	ToEntrypointOutputWithContext(context.Context) EntrypointOutput
}

// The entrypoint for the application.
type EntrypointArgs struct {
	// The format should be a shell command that can be fed to bash -c.
	Shell pulumi.StringPtrInput `pulumi:"shell"`
}

func (EntrypointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Entrypoint)(nil)).Elem()
}

func (i EntrypointArgs) ToEntrypointOutput() EntrypointOutput {
	return i.ToEntrypointOutputWithContext(context.Background())
}

func (i EntrypointArgs) ToEntrypointOutputWithContext(ctx context.Context) EntrypointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntrypointOutput)
}

func (i EntrypointArgs) ToEntrypointPtrOutput() EntrypointPtrOutput {
	return i.ToEntrypointPtrOutputWithContext(context.Background())
}

func (i EntrypointArgs) ToEntrypointPtrOutputWithContext(ctx context.Context) EntrypointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntrypointOutput).ToEntrypointPtrOutputWithContext(ctx)
}

// EntrypointPtrInput is an input type that accepts EntrypointArgs, EntrypointPtr and EntrypointPtrOutput values.
// You can construct a concrete instance of `EntrypointPtrInput` via:
//
//	        EntrypointArgs{...}
//
//	or:
//
//	        nil
type EntrypointPtrInput interface {
	pulumi.Input

	ToEntrypointPtrOutput() EntrypointPtrOutput
	ToEntrypointPtrOutputWithContext(context.Context) EntrypointPtrOutput
}

type entrypointPtrType EntrypointArgs

func EntrypointPtr(v *EntrypointArgs) EntrypointPtrInput {
	return (*entrypointPtrType)(v)
}

func (*entrypointPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Entrypoint)(nil)).Elem()
}

func (i *entrypointPtrType) ToEntrypointPtrOutput() EntrypointPtrOutput {
	return i.ToEntrypointPtrOutputWithContext(context.Background())
}

func (i *entrypointPtrType) ToEntrypointPtrOutputWithContext(ctx context.Context) EntrypointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntrypointPtrOutput)
}

// The entrypoint for the application.
type EntrypointOutput struct{ *pulumi.OutputState }

func (EntrypointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Entrypoint)(nil)).Elem()
}

func (o EntrypointOutput) ToEntrypointOutput() EntrypointOutput {
	return o
}

func (o EntrypointOutput) ToEntrypointOutputWithContext(ctx context.Context) EntrypointOutput {
	return o
}

func (o EntrypointOutput) ToEntrypointPtrOutput() EntrypointPtrOutput {
	return o.ToEntrypointPtrOutputWithContext(context.Background())
}

func (o EntrypointOutput) ToEntrypointPtrOutputWithContext(ctx context.Context) EntrypointPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Entrypoint) *Entrypoint {
		return &v
	}).(EntrypointPtrOutput)
}

// The format should be a shell command that can be fed to bash -c.
func (o EntrypointOutput) Shell() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Entrypoint) *string { return v.Shell }).(pulumi.StringPtrOutput)
}

type EntrypointPtrOutput struct{ *pulumi.OutputState }

func (EntrypointPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Entrypoint)(nil)).Elem()
}

func (o EntrypointPtrOutput) ToEntrypointPtrOutput() EntrypointPtrOutput {
	return o
}

func (o EntrypointPtrOutput) ToEntrypointPtrOutputWithContext(ctx context.Context) EntrypointPtrOutput {
	return o
}

func (o EntrypointPtrOutput) Elem() EntrypointOutput {
	return o.ApplyT(func(v *Entrypoint) Entrypoint {
		if v != nil {
			return *v
		}
		var ret Entrypoint
		return ret
	}).(EntrypointOutput)
}

// The format should be a shell command that can be fed to bash -c.
func (o EntrypointPtrOutput) Shell() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Entrypoint) *string {
		if v == nil {
			return nil
		}
		return v.Shell
	}).(pulumi.StringPtrOutput)
}

// The entrypoint for the application.
type EntrypointResponse struct {
	// The format should be a shell command that can be fed to bash -c.
	Shell string `pulumi:"shell"`
}

// The entrypoint for the application.
type EntrypointResponseOutput struct{ *pulumi.OutputState }

func (EntrypointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntrypointResponse)(nil)).Elem()
}

func (o EntrypointResponseOutput) ToEntrypointResponseOutput() EntrypointResponseOutput {
	return o
}

func (o EntrypointResponseOutput) ToEntrypointResponseOutputWithContext(ctx context.Context) EntrypointResponseOutput {
	return o
}

// The format should be a shell command that can be fed to bash -c.
func (o EntrypointResponseOutput) Shell() pulumi.StringOutput {
	return o.ApplyT(func(v EntrypointResponse) string { return v.Shell }).(pulumi.StringOutput)
}

// Custom static error page to be served when an error occurs.
type ErrorHandler struct {
	// Error condition this handler applies to.
	ErrorCode *ErrorHandlerErrorCode `pulumi:"errorCode"`
	// MIME type of file. Defaults to text/html.
	MimeType *string `pulumi:"mimeType"`
	// Static file content to be served for this error.
	StaticFile *string `pulumi:"staticFile"`
}

// ErrorHandlerInput is an input type that accepts ErrorHandlerArgs and ErrorHandlerOutput values.
// You can construct a concrete instance of `ErrorHandlerInput` via:
//
//	ErrorHandlerArgs{...}
type ErrorHandlerInput interface {
	pulumi.Input

	ToErrorHandlerOutput() ErrorHandlerOutput
	ToErrorHandlerOutputWithContext(context.Context) ErrorHandlerOutput
}

// Custom static error page to be served when an error occurs.
type ErrorHandlerArgs struct {
	// Error condition this handler applies to.
	ErrorCode ErrorHandlerErrorCodePtrInput `pulumi:"errorCode"`
	// MIME type of file. Defaults to text/html.
	MimeType pulumi.StringPtrInput `pulumi:"mimeType"`
	// Static file content to be served for this error.
	StaticFile pulumi.StringPtrInput `pulumi:"staticFile"`
}

func (ErrorHandlerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ErrorHandler)(nil)).Elem()
}

func (i ErrorHandlerArgs) ToErrorHandlerOutput() ErrorHandlerOutput {
	return i.ToErrorHandlerOutputWithContext(context.Background())
}

func (i ErrorHandlerArgs) ToErrorHandlerOutputWithContext(ctx context.Context) ErrorHandlerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ErrorHandlerOutput)
}

// ErrorHandlerArrayInput is an input type that accepts ErrorHandlerArray and ErrorHandlerArrayOutput values.
// You can construct a concrete instance of `ErrorHandlerArrayInput` via:
//
//	ErrorHandlerArray{ ErrorHandlerArgs{...} }
type ErrorHandlerArrayInput interface {
	pulumi.Input

	ToErrorHandlerArrayOutput() ErrorHandlerArrayOutput
	ToErrorHandlerArrayOutputWithContext(context.Context) ErrorHandlerArrayOutput
}

type ErrorHandlerArray []ErrorHandlerInput

func (ErrorHandlerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ErrorHandler)(nil)).Elem()
}

func (i ErrorHandlerArray) ToErrorHandlerArrayOutput() ErrorHandlerArrayOutput {
	return i.ToErrorHandlerArrayOutputWithContext(context.Background())
}

func (i ErrorHandlerArray) ToErrorHandlerArrayOutputWithContext(ctx context.Context) ErrorHandlerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ErrorHandlerArrayOutput)
}

// Custom static error page to be served when an error occurs.
type ErrorHandlerOutput struct{ *pulumi.OutputState }

func (ErrorHandlerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ErrorHandler)(nil)).Elem()
}

func (o ErrorHandlerOutput) ToErrorHandlerOutput() ErrorHandlerOutput {
	return o
}

func (o ErrorHandlerOutput) ToErrorHandlerOutputWithContext(ctx context.Context) ErrorHandlerOutput {
	return o
}

// Error condition this handler applies to.
func (o ErrorHandlerOutput) ErrorCode() ErrorHandlerErrorCodePtrOutput {
	return o.ApplyT(func(v ErrorHandler) *ErrorHandlerErrorCode { return v.ErrorCode }).(ErrorHandlerErrorCodePtrOutput)
}

// MIME type of file. Defaults to text/html.
func (o ErrorHandlerOutput) MimeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ErrorHandler) *string { return v.MimeType }).(pulumi.StringPtrOutput)
}

// Static file content to be served for this error.
func (o ErrorHandlerOutput) StaticFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ErrorHandler) *string { return v.StaticFile }).(pulumi.StringPtrOutput)
}

type ErrorHandlerArrayOutput struct{ *pulumi.OutputState }

func (ErrorHandlerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ErrorHandler)(nil)).Elem()
}

func (o ErrorHandlerArrayOutput) ToErrorHandlerArrayOutput() ErrorHandlerArrayOutput {
	return o
}

func (o ErrorHandlerArrayOutput) ToErrorHandlerArrayOutputWithContext(ctx context.Context) ErrorHandlerArrayOutput {
	return o
}

func (o ErrorHandlerArrayOutput) Index(i pulumi.IntInput) ErrorHandlerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ErrorHandler {
		return vs[0].([]ErrorHandler)[vs[1].(int)]
	}).(ErrorHandlerOutput)
}

// Custom static error page to be served when an error occurs.
type ErrorHandlerResponse struct {
	// Error condition this handler applies to.
	ErrorCode string `pulumi:"errorCode"`
	// MIME type of file. Defaults to text/html.
	MimeType string `pulumi:"mimeType"`
	// Static file content to be served for this error.
	StaticFile string `pulumi:"staticFile"`
}

// Custom static error page to be served when an error occurs.
type ErrorHandlerResponseOutput struct{ *pulumi.OutputState }

func (ErrorHandlerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ErrorHandlerResponse)(nil)).Elem()
}

func (o ErrorHandlerResponseOutput) ToErrorHandlerResponseOutput() ErrorHandlerResponseOutput {
	return o
}

func (o ErrorHandlerResponseOutput) ToErrorHandlerResponseOutputWithContext(ctx context.Context) ErrorHandlerResponseOutput {
	return o
}

// Error condition this handler applies to.
func (o ErrorHandlerResponseOutput) ErrorCode() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorHandlerResponse) string { return v.ErrorCode }).(pulumi.StringOutput)
}

// MIME type of file. Defaults to text/html.
func (o ErrorHandlerResponseOutput) MimeType() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorHandlerResponse) string { return v.MimeType }).(pulumi.StringOutput)
}

// Static file content to be served for this error.
func (o ErrorHandlerResponseOutput) StaticFile() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorHandlerResponse) string { return v.StaticFile }).(pulumi.StringOutput)
}

type ErrorHandlerResponseArrayOutput struct{ *pulumi.OutputState }

func (ErrorHandlerResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ErrorHandlerResponse)(nil)).Elem()
}

func (o ErrorHandlerResponseArrayOutput) ToErrorHandlerResponseArrayOutput() ErrorHandlerResponseArrayOutput {
	return o
}

func (o ErrorHandlerResponseArrayOutput) ToErrorHandlerResponseArrayOutputWithContext(ctx context.Context) ErrorHandlerResponseArrayOutput {
	return o
}

func (o ErrorHandlerResponseArrayOutput) Index(i pulumi.IntInput) ErrorHandlerResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ErrorHandlerResponse {
		return vs[0].([]ErrorHandlerResponse)[vs[1].(int)]
	}).(ErrorHandlerResponseOutput)
}

// The feature specific settings to be used in the application. These define behaviors that are user configurable.
type FeatureSettings struct {
	// Boolean value indicating if split health checks should be used instead of the legacy health checks. At an app.yaml level, this means defaulting to 'readiness_check' and 'liveness_check' values instead of 'health_check' ones. Once the legacy 'health_check' behavior is deprecated, and this value is always true, this setting can be removed.
	SplitHealthChecks *bool `pulumi:"splitHealthChecks"`
	// If true, use Container-Optimized OS (https://cloud.google.com/container-optimized-os/) base image for VMs, rather than a base Debian image.
	UseContainerOptimizedOs *bool `pulumi:"useContainerOptimizedOs"`
}

// FeatureSettingsInput is an input type that accepts FeatureSettingsArgs and FeatureSettingsOutput values.
// You can construct a concrete instance of `FeatureSettingsInput` via:
//
//	FeatureSettingsArgs{...}
type FeatureSettingsInput interface {
	pulumi.Input

	ToFeatureSettingsOutput() FeatureSettingsOutput
	ToFeatureSettingsOutputWithContext(context.Context) FeatureSettingsOutput
}

// The feature specific settings to be used in the application. These define behaviors that are user configurable.
type FeatureSettingsArgs struct {
	// Boolean value indicating if split health checks should be used instead of the legacy health checks. At an app.yaml level, this means defaulting to 'readiness_check' and 'liveness_check' values instead of 'health_check' ones. Once the legacy 'health_check' behavior is deprecated, and this value is always true, this setting can be removed.
	SplitHealthChecks pulumi.BoolPtrInput `pulumi:"splitHealthChecks"`
	// If true, use Container-Optimized OS (https://cloud.google.com/container-optimized-os/) base image for VMs, rather than a base Debian image.
	UseContainerOptimizedOs pulumi.BoolPtrInput `pulumi:"useContainerOptimizedOs"`
}

func (FeatureSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureSettings)(nil)).Elem()
}

func (i FeatureSettingsArgs) ToFeatureSettingsOutput() FeatureSettingsOutput {
	return i.ToFeatureSettingsOutputWithContext(context.Background())
}

func (i FeatureSettingsArgs) ToFeatureSettingsOutputWithContext(ctx context.Context) FeatureSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureSettingsOutput)
}

func (i FeatureSettingsArgs) ToFeatureSettingsPtrOutput() FeatureSettingsPtrOutput {
	return i.ToFeatureSettingsPtrOutputWithContext(context.Background())
}

func (i FeatureSettingsArgs) ToFeatureSettingsPtrOutputWithContext(ctx context.Context) FeatureSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureSettingsOutput).ToFeatureSettingsPtrOutputWithContext(ctx)
}

// FeatureSettingsPtrInput is an input type that accepts FeatureSettingsArgs, FeatureSettingsPtr and FeatureSettingsPtrOutput values.
// You can construct a concrete instance of `FeatureSettingsPtrInput` via:
//
//	        FeatureSettingsArgs{...}
//
//	or:
//
//	        nil
type FeatureSettingsPtrInput interface {
	pulumi.Input

	ToFeatureSettingsPtrOutput() FeatureSettingsPtrOutput
	ToFeatureSettingsPtrOutputWithContext(context.Context) FeatureSettingsPtrOutput
}

type featureSettingsPtrType FeatureSettingsArgs

func FeatureSettingsPtr(v *FeatureSettingsArgs) FeatureSettingsPtrInput {
	return (*featureSettingsPtrType)(v)
}

func (*featureSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureSettings)(nil)).Elem()
}

func (i *featureSettingsPtrType) ToFeatureSettingsPtrOutput() FeatureSettingsPtrOutput {
	return i.ToFeatureSettingsPtrOutputWithContext(context.Background())
}

func (i *featureSettingsPtrType) ToFeatureSettingsPtrOutputWithContext(ctx context.Context) FeatureSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureSettingsPtrOutput)
}

// The feature specific settings to be used in the application. These define behaviors that are user configurable.
type FeatureSettingsOutput struct{ *pulumi.OutputState }

func (FeatureSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureSettings)(nil)).Elem()
}

func (o FeatureSettingsOutput) ToFeatureSettingsOutput() FeatureSettingsOutput {
	return o
}

func (o FeatureSettingsOutput) ToFeatureSettingsOutputWithContext(ctx context.Context) FeatureSettingsOutput {
	return o
}

func (o FeatureSettingsOutput) ToFeatureSettingsPtrOutput() FeatureSettingsPtrOutput {
	return o.ToFeatureSettingsPtrOutputWithContext(context.Background())
}

func (o FeatureSettingsOutput) ToFeatureSettingsPtrOutputWithContext(ctx context.Context) FeatureSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FeatureSettings) *FeatureSettings {
		return &v
	}).(FeatureSettingsPtrOutput)
}

// Boolean value indicating if split health checks should be used instead of the legacy health checks. At an app.yaml level, this means defaulting to 'readiness_check' and 'liveness_check' values instead of 'health_check' ones. Once the legacy 'health_check' behavior is deprecated, and this value is always true, this setting can be removed.
func (o FeatureSettingsOutput) SplitHealthChecks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FeatureSettings) *bool { return v.SplitHealthChecks }).(pulumi.BoolPtrOutput)
}

// If true, use Container-Optimized OS (https://cloud.google.com/container-optimized-os/) base image for VMs, rather than a base Debian image.
func (o FeatureSettingsOutput) UseContainerOptimizedOs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FeatureSettings) *bool { return v.UseContainerOptimizedOs }).(pulumi.BoolPtrOutput)
}

type FeatureSettingsPtrOutput struct{ *pulumi.OutputState }

func (FeatureSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureSettings)(nil)).Elem()
}

func (o FeatureSettingsPtrOutput) ToFeatureSettingsPtrOutput() FeatureSettingsPtrOutput {
	return o
}

func (o FeatureSettingsPtrOutput) ToFeatureSettingsPtrOutputWithContext(ctx context.Context) FeatureSettingsPtrOutput {
	return o
}

func (o FeatureSettingsPtrOutput) Elem() FeatureSettingsOutput {
	return o.ApplyT(func(v *FeatureSettings) FeatureSettings {
		if v != nil {
			return *v
		}
		var ret FeatureSettings
		return ret
	}).(FeatureSettingsOutput)
}

// Boolean value indicating if split health checks should be used instead of the legacy health checks. At an app.yaml level, this means defaulting to 'readiness_check' and 'liveness_check' values instead of 'health_check' ones. Once the legacy 'health_check' behavior is deprecated, and this value is always true, this setting can be removed.
func (o FeatureSettingsPtrOutput) SplitHealthChecks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FeatureSettings) *bool {
		if v == nil {
			return nil
		}
		return v.SplitHealthChecks
	}).(pulumi.BoolPtrOutput)
}

// If true, use Container-Optimized OS (https://cloud.google.com/container-optimized-os/) base image for VMs, rather than a base Debian image.
func (o FeatureSettingsPtrOutput) UseContainerOptimizedOs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FeatureSettings) *bool {
		if v == nil {
			return nil
		}
		return v.UseContainerOptimizedOs
	}).(pulumi.BoolPtrOutput)
}

// The feature specific settings to be used in the application. These define behaviors that are user configurable.
type FeatureSettingsResponse struct {
	// Boolean value indicating if split health checks should be used instead of the legacy health checks. At an app.yaml level, this means defaulting to 'readiness_check' and 'liveness_check' values instead of 'health_check' ones. Once the legacy 'health_check' behavior is deprecated, and this value is always true, this setting can be removed.
	SplitHealthChecks bool `pulumi:"splitHealthChecks"`
	// If true, use Container-Optimized OS (https://cloud.google.com/container-optimized-os/) base image for VMs, rather than a base Debian image.
	UseContainerOptimizedOs bool `pulumi:"useContainerOptimizedOs"`
}

// The feature specific settings to be used in the application. These define behaviors that are user configurable.
type FeatureSettingsResponseOutput struct{ *pulumi.OutputState }

func (FeatureSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureSettingsResponse)(nil)).Elem()
}

func (o FeatureSettingsResponseOutput) ToFeatureSettingsResponseOutput() FeatureSettingsResponseOutput {
	return o
}

func (o FeatureSettingsResponseOutput) ToFeatureSettingsResponseOutputWithContext(ctx context.Context) FeatureSettingsResponseOutput {
	return o
}

// Boolean value indicating if split health checks should be used instead of the legacy health checks. At an app.yaml level, this means defaulting to 'readiness_check' and 'liveness_check' values instead of 'health_check' ones. Once the legacy 'health_check' behavior is deprecated, and this value is always true, this setting can be removed.
func (o FeatureSettingsResponseOutput) SplitHealthChecks() pulumi.BoolOutput {
	return o.ApplyT(func(v FeatureSettingsResponse) bool { return v.SplitHealthChecks }).(pulumi.BoolOutput)
}

// If true, use Container-Optimized OS (https://cloud.google.com/container-optimized-os/) base image for VMs, rather than a base Debian image.
func (o FeatureSettingsResponseOutput) UseContainerOptimizedOs() pulumi.BoolOutput {
	return o.ApplyT(func(v FeatureSettingsResponse) bool { return v.UseContainerOptimizedOs }).(pulumi.BoolOutput)
}

// Single source file that is part of the version to be deployed. Each source file that is deployed must be specified separately.
type FileInfo struct {
	// The MIME type of the file.Defaults to the value from Google Cloud Storage.
	MimeType *string `pulumi:"mimeType"`
	// The SHA1 hash of the file, in hex.
	Sha1Sum *string `pulumi:"sha1Sum"`
	// URL source to use to fetch this file. Must be a URL to a resource in Google Cloud Storage in the form 'http(s)://storage.googleapis.com//'.
	SourceUrl *string `pulumi:"sourceUrl"`
}

// FileInfoInput is an input type that accepts FileInfoArgs and FileInfoOutput values.
// You can construct a concrete instance of `FileInfoInput` via:
//
//	FileInfoArgs{...}
type FileInfoInput interface {
	pulumi.Input

	ToFileInfoOutput() FileInfoOutput
	ToFileInfoOutputWithContext(context.Context) FileInfoOutput
}

// Single source file that is part of the version to be deployed. Each source file that is deployed must be specified separately.
type FileInfoArgs struct {
	// The MIME type of the file.Defaults to the value from Google Cloud Storage.
	MimeType pulumi.StringPtrInput `pulumi:"mimeType"`
	// The SHA1 hash of the file, in hex.
	Sha1Sum pulumi.StringPtrInput `pulumi:"sha1Sum"`
	// URL source to use to fetch this file. Must be a URL to a resource in Google Cloud Storage in the form 'http(s)://storage.googleapis.com//'.
	SourceUrl pulumi.StringPtrInput `pulumi:"sourceUrl"`
}

func (FileInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileInfo)(nil)).Elem()
}

func (i FileInfoArgs) ToFileInfoOutput() FileInfoOutput {
	return i.ToFileInfoOutputWithContext(context.Background())
}

func (i FileInfoArgs) ToFileInfoOutputWithContext(ctx context.Context) FileInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileInfoOutput)
}

func (i FileInfoArgs) ToFileInfoPtrOutput() FileInfoPtrOutput {
	return i.ToFileInfoPtrOutputWithContext(context.Background())
}

func (i FileInfoArgs) ToFileInfoPtrOutputWithContext(ctx context.Context) FileInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileInfoOutput).ToFileInfoPtrOutputWithContext(ctx)
}

// FileInfoPtrInput is an input type that accepts FileInfoArgs, FileInfoPtr and FileInfoPtrOutput values.
// You can construct a concrete instance of `FileInfoPtrInput` via:
//
//	        FileInfoArgs{...}
//
//	or:
//
//	        nil
type FileInfoPtrInput interface {
	pulumi.Input

	ToFileInfoPtrOutput() FileInfoPtrOutput
	ToFileInfoPtrOutputWithContext(context.Context) FileInfoPtrOutput
}

type fileInfoPtrType FileInfoArgs

func FileInfoPtr(v *FileInfoArgs) FileInfoPtrInput {
	return (*fileInfoPtrType)(v)
}

func (*fileInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FileInfo)(nil)).Elem()
}

func (i *fileInfoPtrType) ToFileInfoPtrOutput() FileInfoPtrOutput {
	return i.ToFileInfoPtrOutputWithContext(context.Background())
}

func (i *fileInfoPtrType) ToFileInfoPtrOutputWithContext(ctx context.Context) FileInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileInfoPtrOutput)
}

// Single source file that is part of the version to be deployed. Each source file that is deployed must be specified separately.
type FileInfoOutput struct{ *pulumi.OutputState }

func (FileInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileInfo)(nil)).Elem()
}

func (o FileInfoOutput) ToFileInfoOutput() FileInfoOutput {
	return o
}

func (o FileInfoOutput) ToFileInfoOutputWithContext(ctx context.Context) FileInfoOutput {
	return o
}

func (o FileInfoOutput) ToFileInfoPtrOutput() FileInfoPtrOutput {
	return o.ToFileInfoPtrOutputWithContext(context.Background())
}

func (o FileInfoOutput) ToFileInfoPtrOutputWithContext(ctx context.Context) FileInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FileInfo) *FileInfo {
		return &v
	}).(FileInfoPtrOutput)
}

// The MIME type of the file.Defaults to the value from Google Cloud Storage.
func (o FileInfoOutput) MimeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileInfo) *string { return v.MimeType }).(pulumi.StringPtrOutput)
}

// The SHA1 hash of the file, in hex.
func (o FileInfoOutput) Sha1Sum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileInfo) *string { return v.Sha1Sum }).(pulumi.StringPtrOutput)
}

// URL source to use to fetch this file. Must be a URL to a resource in Google Cloud Storage in the form 'http(s)://storage.googleapis.com//'.
func (o FileInfoOutput) SourceUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileInfo) *string { return v.SourceUrl }).(pulumi.StringPtrOutput)
}

type FileInfoPtrOutput struct{ *pulumi.OutputState }

func (FileInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileInfo)(nil)).Elem()
}

func (o FileInfoPtrOutput) ToFileInfoPtrOutput() FileInfoPtrOutput {
	return o
}

func (o FileInfoPtrOutput) ToFileInfoPtrOutputWithContext(ctx context.Context) FileInfoPtrOutput {
	return o
}

func (o FileInfoPtrOutput) Elem() FileInfoOutput {
	return o.ApplyT(func(v *FileInfo) FileInfo {
		if v != nil {
			return *v
		}
		var ret FileInfo
		return ret
	}).(FileInfoOutput)
}

// The MIME type of the file.Defaults to the value from Google Cloud Storage.
func (o FileInfoPtrOutput) MimeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileInfo) *string {
		if v == nil {
			return nil
		}
		return v.MimeType
	}).(pulumi.StringPtrOutput)
}

// The SHA1 hash of the file, in hex.
func (o FileInfoPtrOutput) Sha1Sum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileInfo) *string {
		if v == nil {
			return nil
		}
		return v.Sha1Sum
	}).(pulumi.StringPtrOutput)
}

// URL source to use to fetch this file. Must be a URL to a resource in Google Cloud Storage in the form 'http(s)://storage.googleapis.com//'.
func (o FileInfoPtrOutput) SourceUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileInfo) *string {
		if v == nil {
			return nil
		}
		return v.SourceUrl
	}).(pulumi.StringPtrOutput)
}

// Single source file that is part of the version to be deployed. Each source file that is deployed must be specified separately.
type FileInfoResponse struct {
	// The MIME type of the file.Defaults to the value from Google Cloud Storage.
	MimeType string `pulumi:"mimeType"`
	// The SHA1 hash of the file, in hex.
	Sha1Sum string `pulumi:"sha1Sum"`
	// URL source to use to fetch this file. Must be a URL to a resource in Google Cloud Storage in the form 'http(s)://storage.googleapis.com//'.
	SourceUrl string `pulumi:"sourceUrl"`
}

// Single source file that is part of the version to be deployed. Each source file that is deployed must be specified separately.
type FileInfoResponseOutput struct{ *pulumi.OutputState }

func (FileInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileInfoResponse)(nil)).Elem()
}

func (o FileInfoResponseOutput) ToFileInfoResponseOutput() FileInfoResponseOutput {
	return o
}

func (o FileInfoResponseOutput) ToFileInfoResponseOutputWithContext(ctx context.Context) FileInfoResponseOutput {
	return o
}

// The MIME type of the file.Defaults to the value from Google Cloud Storage.
func (o FileInfoResponseOutput) MimeType() pulumi.StringOutput {
	return o.ApplyT(func(v FileInfoResponse) string { return v.MimeType }).(pulumi.StringOutput)
}

// The SHA1 hash of the file, in hex.
func (o FileInfoResponseOutput) Sha1Sum() pulumi.StringOutput {
	return o.ApplyT(func(v FileInfoResponse) string { return v.Sha1Sum }).(pulumi.StringOutput)
}

// URL source to use to fetch this file. Must be a URL to a resource in Google Cloud Storage in the form 'http(s)://storage.googleapis.com//'.
func (o FileInfoResponseOutput) SourceUrl() pulumi.StringOutput {
	return o.ApplyT(func(v FileInfoResponse) string { return v.SourceUrl }).(pulumi.StringOutput)
}

// Runtime settings for the App Engine flexible environment.
type FlexibleRuntimeSettings struct {
	// The operating system of the application runtime.
	OperatingSystem *string `pulumi:"operatingSystem"`
	// The runtime version of an App Engine flexible application.
	RuntimeVersion *string `pulumi:"runtimeVersion"`
}

// FlexibleRuntimeSettingsInput is an input type that accepts FlexibleRuntimeSettingsArgs and FlexibleRuntimeSettingsOutput values.
// You can construct a concrete instance of `FlexibleRuntimeSettingsInput` via:
//
//	FlexibleRuntimeSettingsArgs{...}
type FlexibleRuntimeSettingsInput interface {
	pulumi.Input

	ToFlexibleRuntimeSettingsOutput() FlexibleRuntimeSettingsOutput
	ToFlexibleRuntimeSettingsOutputWithContext(context.Context) FlexibleRuntimeSettingsOutput
}

// Runtime settings for the App Engine flexible environment.
type FlexibleRuntimeSettingsArgs struct {
	// The operating system of the application runtime.
	OperatingSystem pulumi.StringPtrInput `pulumi:"operatingSystem"`
	// The runtime version of an App Engine flexible application.
	RuntimeVersion pulumi.StringPtrInput `pulumi:"runtimeVersion"`
}

func (FlexibleRuntimeSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlexibleRuntimeSettings)(nil)).Elem()
}

func (i FlexibleRuntimeSettingsArgs) ToFlexibleRuntimeSettingsOutput() FlexibleRuntimeSettingsOutput {
	return i.ToFlexibleRuntimeSettingsOutputWithContext(context.Background())
}

func (i FlexibleRuntimeSettingsArgs) ToFlexibleRuntimeSettingsOutputWithContext(ctx context.Context) FlexibleRuntimeSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlexibleRuntimeSettingsOutput)
}

func (i FlexibleRuntimeSettingsArgs) ToFlexibleRuntimeSettingsPtrOutput() FlexibleRuntimeSettingsPtrOutput {
	return i.ToFlexibleRuntimeSettingsPtrOutputWithContext(context.Background())
}

func (i FlexibleRuntimeSettingsArgs) ToFlexibleRuntimeSettingsPtrOutputWithContext(ctx context.Context) FlexibleRuntimeSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlexibleRuntimeSettingsOutput).ToFlexibleRuntimeSettingsPtrOutputWithContext(ctx)
}

// FlexibleRuntimeSettingsPtrInput is an input type that accepts FlexibleRuntimeSettingsArgs, FlexibleRuntimeSettingsPtr and FlexibleRuntimeSettingsPtrOutput values.
// You can construct a concrete instance of `FlexibleRuntimeSettingsPtrInput` via:
//
//	        FlexibleRuntimeSettingsArgs{...}
//
//	or:
//
//	        nil
type FlexibleRuntimeSettingsPtrInput interface {
	pulumi.Input

	ToFlexibleRuntimeSettingsPtrOutput() FlexibleRuntimeSettingsPtrOutput
	ToFlexibleRuntimeSettingsPtrOutputWithContext(context.Context) FlexibleRuntimeSettingsPtrOutput
}

type flexibleRuntimeSettingsPtrType FlexibleRuntimeSettingsArgs

func FlexibleRuntimeSettingsPtr(v *FlexibleRuntimeSettingsArgs) FlexibleRuntimeSettingsPtrInput {
	return (*flexibleRuntimeSettingsPtrType)(v)
}

func (*flexibleRuntimeSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlexibleRuntimeSettings)(nil)).Elem()
}

func (i *flexibleRuntimeSettingsPtrType) ToFlexibleRuntimeSettingsPtrOutput() FlexibleRuntimeSettingsPtrOutput {
	return i.ToFlexibleRuntimeSettingsPtrOutputWithContext(context.Background())
}

func (i *flexibleRuntimeSettingsPtrType) ToFlexibleRuntimeSettingsPtrOutputWithContext(ctx context.Context) FlexibleRuntimeSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlexibleRuntimeSettingsPtrOutput)
}

// Runtime settings for the App Engine flexible environment.
type FlexibleRuntimeSettingsOutput struct{ *pulumi.OutputState }

func (FlexibleRuntimeSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlexibleRuntimeSettings)(nil)).Elem()
}

func (o FlexibleRuntimeSettingsOutput) ToFlexibleRuntimeSettingsOutput() FlexibleRuntimeSettingsOutput {
	return o
}

func (o FlexibleRuntimeSettingsOutput) ToFlexibleRuntimeSettingsOutputWithContext(ctx context.Context) FlexibleRuntimeSettingsOutput {
	return o
}

func (o FlexibleRuntimeSettingsOutput) ToFlexibleRuntimeSettingsPtrOutput() FlexibleRuntimeSettingsPtrOutput {
	return o.ToFlexibleRuntimeSettingsPtrOutputWithContext(context.Background())
}

func (o FlexibleRuntimeSettingsOutput) ToFlexibleRuntimeSettingsPtrOutputWithContext(ctx context.Context) FlexibleRuntimeSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlexibleRuntimeSettings) *FlexibleRuntimeSettings {
		return &v
	}).(FlexibleRuntimeSettingsPtrOutput)
}

// The operating system of the application runtime.
func (o FlexibleRuntimeSettingsOutput) OperatingSystem() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlexibleRuntimeSettings) *string { return v.OperatingSystem }).(pulumi.StringPtrOutput)
}

// The runtime version of an App Engine flexible application.
func (o FlexibleRuntimeSettingsOutput) RuntimeVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlexibleRuntimeSettings) *string { return v.RuntimeVersion }).(pulumi.StringPtrOutput)
}

type FlexibleRuntimeSettingsPtrOutput struct{ *pulumi.OutputState }

func (FlexibleRuntimeSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlexibleRuntimeSettings)(nil)).Elem()
}

func (o FlexibleRuntimeSettingsPtrOutput) ToFlexibleRuntimeSettingsPtrOutput() FlexibleRuntimeSettingsPtrOutput {
	return o
}

func (o FlexibleRuntimeSettingsPtrOutput) ToFlexibleRuntimeSettingsPtrOutputWithContext(ctx context.Context) FlexibleRuntimeSettingsPtrOutput {
	return o
}

func (o FlexibleRuntimeSettingsPtrOutput) Elem() FlexibleRuntimeSettingsOutput {
	return o.ApplyT(func(v *FlexibleRuntimeSettings) FlexibleRuntimeSettings {
		if v != nil {
			return *v
		}
		var ret FlexibleRuntimeSettings
		return ret
	}).(FlexibleRuntimeSettingsOutput)
}

// The operating system of the application runtime.
func (o FlexibleRuntimeSettingsPtrOutput) OperatingSystem() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlexibleRuntimeSettings) *string {
		if v == nil {
			return nil
		}
		return v.OperatingSystem
	}).(pulumi.StringPtrOutput)
}

// The runtime version of an App Engine flexible application.
func (o FlexibleRuntimeSettingsPtrOutput) RuntimeVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlexibleRuntimeSettings) *string {
		if v == nil {
			return nil
		}
		return v.RuntimeVersion
	}).(pulumi.StringPtrOutput)
}

// Runtime settings for the App Engine flexible environment.
type FlexibleRuntimeSettingsResponse struct {
	// The operating system of the application runtime.
	OperatingSystem string `pulumi:"operatingSystem"`
	// The runtime version of an App Engine flexible application.
	RuntimeVersion string `pulumi:"runtimeVersion"`
}

// Runtime settings for the App Engine flexible environment.
type FlexibleRuntimeSettingsResponseOutput struct{ *pulumi.OutputState }

func (FlexibleRuntimeSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlexibleRuntimeSettingsResponse)(nil)).Elem()
}

func (o FlexibleRuntimeSettingsResponseOutput) ToFlexibleRuntimeSettingsResponseOutput() FlexibleRuntimeSettingsResponseOutput {
	return o
}

func (o FlexibleRuntimeSettingsResponseOutput) ToFlexibleRuntimeSettingsResponseOutputWithContext(ctx context.Context) FlexibleRuntimeSettingsResponseOutput {
	return o
}

// The operating system of the application runtime.
func (o FlexibleRuntimeSettingsResponseOutput) OperatingSystem() pulumi.StringOutput {
	return o.ApplyT(func(v FlexibleRuntimeSettingsResponse) string { return v.OperatingSystem }).(pulumi.StringOutput)
}

// The runtime version of an App Engine flexible application.
func (o FlexibleRuntimeSettingsResponseOutput) RuntimeVersion() pulumi.StringOutput {
	return o.ApplyT(func(v FlexibleRuntimeSettingsResponse) string { return v.RuntimeVersion }).(pulumi.StringOutput)
}

// Health checking configuration for VM instances. Unhealthy instances are killed and replaced with new instances. Only applicable for instances in App Engine flexible environment.
type HealthCheck struct {
	// Interval between health checks.
	CheckInterval *string `pulumi:"checkInterval"`
	// Whether to explicitly disable health checks for this instance.
	DisableHealthCheck *bool `pulumi:"disableHealthCheck"`
	// Number of consecutive successful health checks required before receiving traffic.
	HealthyThreshold *int `pulumi:"healthyThreshold"`
	// Host header to send when performing an HTTP health check. Example: "myapp.appspot.com"
	Host *string `pulumi:"host"`
	// Number of consecutive failed health checks required before an instance is restarted.
	RestartThreshold *int `pulumi:"restartThreshold"`
	// Time before the health check is considered failed.
	Timeout *string `pulumi:"timeout"`
	// Number of consecutive failed health checks required before removing traffic.
	UnhealthyThreshold *int `pulumi:"unhealthyThreshold"`
}

// HealthCheckInput is an input type that accepts HealthCheckArgs and HealthCheckOutput values.
// You can construct a concrete instance of `HealthCheckInput` via:
//
//	HealthCheckArgs{...}
type HealthCheckInput interface {
	pulumi.Input

	ToHealthCheckOutput() HealthCheckOutput
	ToHealthCheckOutputWithContext(context.Context) HealthCheckOutput
}

// Health checking configuration for VM instances. Unhealthy instances are killed and replaced with new instances. Only applicable for instances in App Engine flexible environment.
type HealthCheckArgs struct {
	// Interval between health checks.
	CheckInterval pulumi.StringPtrInput `pulumi:"checkInterval"`
	// Whether to explicitly disable health checks for this instance.
	DisableHealthCheck pulumi.BoolPtrInput `pulumi:"disableHealthCheck"`
	// Number of consecutive successful health checks required before receiving traffic.
	HealthyThreshold pulumi.IntPtrInput `pulumi:"healthyThreshold"`
	// Host header to send when performing an HTTP health check. Example: "myapp.appspot.com"
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Number of consecutive failed health checks required before an instance is restarted.
	RestartThreshold pulumi.IntPtrInput `pulumi:"restartThreshold"`
	// Time before the health check is considered failed.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
	// Number of consecutive failed health checks required before removing traffic.
	UnhealthyThreshold pulumi.IntPtrInput `pulumi:"unhealthyThreshold"`
}

func (HealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthCheck)(nil)).Elem()
}

func (i HealthCheckArgs) ToHealthCheckOutput() HealthCheckOutput {
	return i.ToHealthCheckOutputWithContext(context.Background())
}

func (i HealthCheckArgs) ToHealthCheckOutputWithContext(ctx context.Context) HealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthCheckOutput)
}

func (i HealthCheckArgs) ToHealthCheckPtrOutput() HealthCheckPtrOutput {
	return i.ToHealthCheckPtrOutputWithContext(context.Background())
}

func (i HealthCheckArgs) ToHealthCheckPtrOutputWithContext(ctx context.Context) HealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthCheckOutput).ToHealthCheckPtrOutputWithContext(ctx)
}

// HealthCheckPtrInput is an input type that accepts HealthCheckArgs, HealthCheckPtr and HealthCheckPtrOutput values.
// You can construct a concrete instance of `HealthCheckPtrInput` via:
//
//	        HealthCheckArgs{...}
//
//	or:
//
//	        nil
type HealthCheckPtrInput interface {
	pulumi.Input

	ToHealthCheckPtrOutput() HealthCheckPtrOutput
	ToHealthCheckPtrOutputWithContext(context.Context) HealthCheckPtrOutput
}

type healthCheckPtrType HealthCheckArgs

func HealthCheckPtr(v *HealthCheckArgs) HealthCheckPtrInput {
	return (*healthCheckPtrType)(v)
}

func (*healthCheckPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HealthCheck)(nil)).Elem()
}

func (i *healthCheckPtrType) ToHealthCheckPtrOutput() HealthCheckPtrOutput {
	return i.ToHealthCheckPtrOutputWithContext(context.Background())
}

func (i *healthCheckPtrType) ToHealthCheckPtrOutputWithContext(ctx context.Context) HealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthCheckPtrOutput)
}

// Health checking configuration for VM instances. Unhealthy instances are killed and replaced with new instances. Only applicable for instances in App Engine flexible environment.
type HealthCheckOutput struct{ *pulumi.OutputState }

func (HealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthCheck)(nil)).Elem()
}

func (o HealthCheckOutput) ToHealthCheckOutput() HealthCheckOutput {
	return o
}

func (o HealthCheckOutput) ToHealthCheckOutputWithContext(ctx context.Context) HealthCheckOutput {
	return o
}

func (o HealthCheckOutput) ToHealthCheckPtrOutput() HealthCheckPtrOutput {
	return o.ToHealthCheckPtrOutputWithContext(context.Background())
}

func (o HealthCheckOutput) ToHealthCheckPtrOutputWithContext(ctx context.Context) HealthCheckPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HealthCheck) *HealthCheck {
		return &v
	}).(HealthCheckPtrOutput)
}

// Interval between health checks.
func (o HealthCheckOutput) CheckInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HealthCheck) *string { return v.CheckInterval }).(pulumi.StringPtrOutput)
}

// Whether to explicitly disable health checks for this instance.
func (o HealthCheckOutput) DisableHealthCheck() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HealthCheck) *bool { return v.DisableHealthCheck }).(pulumi.BoolPtrOutput)
}

// Number of consecutive successful health checks required before receiving traffic.
func (o HealthCheckOutput) HealthyThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HealthCheck) *int { return v.HealthyThreshold }).(pulumi.IntPtrOutput)
}

// Host header to send when performing an HTTP health check. Example: "myapp.appspot.com"
func (o HealthCheckOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HealthCheck) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Number of consecutive failed health checks required before an instance is restarted.
func (o HealthCheckOutput) RestartThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HealthCheck) *int { return v.RestartThreshold }).(pulumi.IntPtrOutput)
}

// Time before the health check is considered failed.
func (o HealthCheckOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HealthCheck) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

// Number of consecutive failed health checks required before removing traffic.
func (o HealthCheckOutput) UnhealthyThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HealthCheck) *int { return v.UnhealthyThreshold }).(pulumi.IntPtrOutput)
}

type HealthCheckPtrOutput struct{ *pulumi.OutputState }

func (HealthCheckPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HealthCheck)(nil)).Elem()
}

func (o HealthCheckPtrOutput) ToHealthCheckPtrOutput() HealthCheckPtrOutput {
	return o
}

func (o HealthCheckPtrOutput) ToHealthCheckPtrOutputWithContext(ctx context.Context) HealthCheckPtrOutput {
	return o
}

func (o HealthCheckPtrOutput) Elem() HealthCheckOutput {
	return o.ApplyT(func(v *HealthCheck) HealthCheck {
		if v != nil {
			return *v
		}
		var ret HealthCheck
		return ret
	}).(HealthCheckOutput)
}

// Interval between health checks.
func (o HealthCheckPtrOutput) CheckInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.CheckInterval
	}).(pulumi.StringPtrOutput)
}

// Whether to explicitly disable health checks for this instance.
func (o HealthCheckPtrOutput) DisableHealthCheck() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HealthCheck) *bool {
		if v == nil {
			return nil
		}
		return v.DisableHealthCheck
	}).(pulumi.BoolPtrOutput)
}

// Number of consecutive successful health checks required before receiving traffic.
func (o HealthCheckPtrOutput) HealthyThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.HealthyThreshold
	}).(pulumi.IntPtrOutput)
}

// Host header to send when performing an HTTP health check. Example: "myapp.appspot.com"
func (o HealthCheckPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Number of consecutive failed health checks required before an instance is restarted.
func (o HealthCheckPtrOutput) RestartThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.RestartThreshold
	}).(pulumi.IntPtrOutput)
}

// Time before the health check is considered failed.
func (o HealthCheckPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Number of consecutive failed health checks required before removing traffic.
func (o HealthCheckPtrOutput) UnhealthyThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.UnhealthyThreshold
	}).(pulumi.IntPtrOutput)
}

// Health checking configuration for VM instances. Unhealthy instances are killed and replaced with new instances. Only applicable for instances in App Engine flexible environment.
type HealthCheckResponse struct {
	// Interval between health checks.
	CheckInterval string `pulumi:"checkInterval"`
	// Whether to explicitly disable health checks for this instance.
	DisableHealthCheck bool `pulumi:"disableHealthCheck"`
	// Number of consecutive successful health checks required before receiving traffic.
	HealthyThreshold int `pulumi:"healthyThreshold"`
	// Host header to send when performing an HTTP health check. Example: "myapp.appspot.com"
	Host string `pulumi:"host"`
	// Number of consecutive failed health checks required before an instance is restarted.
	RestartThreshold int `pulumi:"restartThreshold"`
	// Time before the health check is considered failed.
	Timeout string `pulumi:"timeout"`
	// Number of consecutive failed health checks required before removing traffic.
	UnhealthyThreshold int `pulumi:"unhealthyThreshold"`
}

// Health checking configuration for VM instances. Unhealthy instances are killed and replaced with new instances. Only applicable for instances in App Engine flexible environment.
type HealthCheckResponseOutput struct{ *pulumi.OutputState }

func (HealthCheckResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthCheckResponse)(nil)).Elem()
}

func (o HealthCheckResponseOutput) ToHealthCheckResponseOutput() HealthCheckResponseOutput {
	return o
}

func (o HealthCheckResponseOutput) ToHealthCheckResponseOutputWithContext(ctx context.Context) HealthCheckResponseOutput {
	return o
}

// Interval between health checks.
func (o HealthCheckResponseOutput) CheckInterval() pulumi.StringOutput {
	return o.ApplyT(func(v HealthCheckResponse) string { return v.CheckInterval }).(pulumi.StringOutput)
}

// Whether to explicitly disable health checks for this instance.
func (o HealthCheckResponseOutput) DisableHealthCheck() pulumi.BoolOutput {
	return o.ApplyT(func(v HealthCheckResponse) bool { return v.DisableHealthCheck }).(pulumi.BoolOutput)
}

// Number of consecutive successful health checks required before receiving traffic.
func (o HealthCheckResponseOutput) HealthyThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v HealthCheckResponse) int { return v.HealthyThreshold }).(pulumi.IntOutput)
}

// Host header to send when performing an HTTP health check. Example: "myapp.appspot.com"
func (o HealthCheckResponseOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v HealthCheckResponse) string { return v.Host }).(pulumi.StringOutput)
}

// Number of consecutive failed health checks required before an instance is restarted.
func (o HealthCheckResponseOutput) RestartThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v HealthCheckResponse) int { return v.RestartThreshold }).(pulumi.IntOutput)
}

// Time before the health check is considered failed.
func (o HealthCheckResponseOutput) Timeout() pulumi.StringOutput {
	return o.ApplyT(func(v HealthCheckResponse) string { return v.Timeout }).(pulumi.StringOutput)
}

// Number of consecutive failed health checks required before removing traffic.
func (o HealthCheckResponseOutput) UnhealthyThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v HealthCheckResponse) int { return v.UnhealthyThreshold }).(pulumi.IntOutput)
}

// Identity-Aware Proxy
type IdentityAwareProxy struct {
	// Whether the serving infrastructure will authenticate and authorize all incoming requests.If true, the oauth2_client_id and oauth2_client_secret fields must be non-empty.
	Enabled *bool `pulumi:"enabled"`
	// OAuth2 client ID to use for the authentication flow.
	Oauth2ClientId *string `pulumi:"oauth2ClientId"`
	// OAuth2 client secret to use for the authentication flow.For security reasons, this value cannot be retrieved via the API. Instead, the SHA-256 hash of the value is returned in the oauth2_client_secret_sha256 field.@InputOnly
	Oauth2ClientSecret *string `pulumi:"oauth2ClientSecret"`
}

// IdentityAwareProxyInput is an input type that accepts IdentityAwareProxyArgs and IdentityAwareProxyOutput values.
// You can construct a concrete instance of `IdentityAwareProxyInput` via:
//
//	IdentityAwareProxyArgs{...}
type IdentityAwareProxyInput interface {
	pulumi.Input

	ToIdentityAwareProxyOutput() IdentityAwareProxyOutput
	ToIdentityAwareProxyOutputWithContext(context.Context) IdentityAwareProxyOutput
}

// Identity-Aware Proxy
type IdentityAwareProxyArgs struct {
	// Whether the serving infrastructure will authenticate and authorize all incoming requests.If true, the oauth2_client_id and oauth2_client_secret fields must be non-empty.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// OAuth2 client ID to use for the authentication flow.
	Oauth2ClientId pulumi.StringPtrInput `pulumi:"oauth2ClientId"`
	// OAuth2 client secret to use for the authentication flow.For security reasons, this value cannot be retrieved via the API. Instead, the SHA-256 hash of the value is returned in the oauth2_client_secret_sha256 field.@InputOnly
	Oauth2ClientSecret pulumi.StringPtrInput `pulumi:"oauth2ClientSecret"`
}

func (IdentityAwareProxyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityAwareProxy)(nil)).Elem()
}

func (i IdentityAwareProxyArgs) ToIdentityAwareProxyOutput() IdentityAwareProxyOutput {
	return i.ToIdentityAwareProxyOutputWithContext(context.Background())
}

func (i IdentityAwareProxyArgs) ToIdentityAwareProxyOutputWithContext(ctx context.Context) IdentityAwareProxyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityAwareProxyOutput)
}

func (i IdentityAwareProxyArgs) ToIdentityAwareProxyPtrOutput() IdentityAwareProxyPtrOutput {
	return i.ToIdentityAwareProxyPtrOutputWithContext(context.Background())
}

func (i IdentityAwareProxyArgs) ToIdentityAwareProxyPtrOutputWithContext(ctx context.Context) IdentityAwareProxyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityAwareProxyOutput).ToIdentityAwareProxyPtrOutputWithContext(ctx)
}

// IdentityAwareProxyPtrInput is an input type that accepts IdentityAwareProxyArgs, IdentityAwareProxyPtr and IdentityAwareProxyPtrOutput values.
// You can construct a concrete instance of `IdentityAwareProxyPtrInput` via:
//
//	        IdentityAwareProxyArgs{...}
//
//	or:
//
//	        nil
type IdentityAwareProxyPtrInput interface {
	pulumi.Input

	ToIdentityAwareProxyPtrOutput() IdentityAwareProxyPtrOutput
	ToIdentityAwareProxyPtrOutputWithContext(context.Context) IdentityAwareProxyPtrOutput
}

type identityAwareProxyPtrType IdentityAwareProxyArgs

func IdentityAwareProxyPtr(v *IdentityAwareProxyArgs) IdentityAwareProxyPtrInput {
	return (*identityAwareProxyPtrType)(v)
}

func (*identityAwareProxyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityAwareProxy)(nil)).Elem()
}

func (i *identityAwareProxyPtrType) ToIdentityAwareProxyPtrOutput() IdentityAwareProxyPtrOutput {
	return i.ToIdentityAwareProxyPtrOutputWithContext(context.Background())
}

func (i *identityAwareProxyPtrType) ToIdentityAwareProxyPtrOutputWithContext(ctx context.Context) IdentityAwareProxyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityAwareProxyPtrOutput)
}

// Identity-Aware Proxy
type IdentityAwareProxyOutput struct{ *pulumi.OutputState }

func (IdentityAwareProxyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityAwareProxy)(nil)).Elem()
}

func (o IdentityAwareProxyOutput) ToIdentityAwareProxyOutput() IdentityAwareProxyOutput {
	return o
}

func (o IdentityAwareProxyOutput) ToIdentityAwareProxyOutputWithContext(ctx context.Context) IdentityAwareProxyOutput {
	return o
}

func (o IdentityAwareProxyOutput) ToIdentityAwareProxyPtrOutput() IdentityAwareProxyPtrOutput {
	return o.ToIdentityAwareProxyPtrOutputWithContext(context.Background())
}

func (o IdentityAwareProxyOutput) ToIdentityAwareProxyPtrOutputWithContext(ctx context.Context) IdentityAwareProxyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IdentityAwareProxy) *IdentityAwareProxy {
		return &v
	}).(IdentityAwareProxyPtrOutput)
}

// Whether the serving infrastructure will authenticate and authorize all incoming requests.If true, the oauth2_client_id and oauth2_client_secret fields must be non-empty.
func (o IdentityAwareProxyOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v IdentityAwareProxy) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// OAuth2 client ID to use for the authentication flow.
func (o IdentityAwareProxyOutput) Oauth2ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentityAwareProxy) *string { return v.Oauth2ClientId }).(pulumi.StringPtrOutput)
}

// OAuth2 client secret to use for the authentication flow.For security reasons, this value cannot be retrieved via the API. Instead, the SHA-256 hash of the value is returned in the oauth2_client_secret_sha256 field.@InputOnly
func (o IdentityAwareProxyOutput) Oauth2ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentityAwareProxy) *string { return v.Oauth2ClientSecret }).(pulumi.StringPtrOutput)
}

type IdentityAwareProxyPtrOutput struct{ *pulumi.OutputState }

func (IdentityAwareProxyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityAwareProxy)(nil)).Elem()
}

func (o IdentityAwareProxyPtrOutput) ToIdentityAwareProxyPtrOutput() IdentityAwareProxyPtrOutput {
	return o
}

func (o IdentityAwareProxyPtrOutput) ToIdentityAwareProxyPtrOutputWithContext(ctx context.Context) IdentityAwareProxyPtrOutput {
	return o
}

func (o IdentityAwareProxyPtrOutput) Elem() IdentityAwareProxyOutput {
	return o.ApplyT(func(v *IdentityAwareProxy) IdentityAwareProxy {
		if v != nil {
			return *v
		}
		var ret IdentityAwareProxy
		return ret
	}).(IdentityAwareProxyOutput)
}

// Whether the serving infrastructure will authenticate and authorize all incoming requests.If true, the oauth2_client_id and oauth2_client_secret fields must be non-empty.
func (o IdentityAwareProxyPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IdentityAwareProxy) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// OAuth2 client ID to use for the authentication flow.
func (o IdentityAwareProxyPtrOutput) Oauth2ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityAwareProxy) *string {
		if v == nil {
			return nil
		}
		return v.Oauth2ClientId
	}).(pulumi.StringPtrOutput)
}

// OAuth2 client secret to use for the authentication flow.For security reasons, this value cannot be retrieved via the API. Instead, the SHA-256 hash of the value is returned in the oauth2_client_secret_sha256 field.@InputOnly
func (o IdentityAwareProxyPtrOutput) Oauth2ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityAwareProxy) *string {
		if v == nil {
			return nil
		}
		return v.Oauth2ClientSecret
	}).(pulumi.StringPtrOutput)
}

// Identity-Aware Proxy
type IdentityAwareProxyResponse struct {
	// Whether the serving infrastructure will authenticate and authorize all incoming requests.If true, the oauth2_client_id and oauth2_client_secret fields must be non-empty.
	Enabled bool `pulumi:"enabled"`
	// OAuth2 client ID to use for the authentication flow.
	Oauth2ClientId string `pulumi:"oauth2ClientId"`
	// OAuth2 client secret to use for the authentication flow.For security reasons, this value cannot be retrieved via the API. Instead, the SHA-256 hash of the value is returned in the oauth2_client_secret_sha256 field.@InputOnly
	Oauth2ClientSecret string `pulumi:"oauth2ClientSecret"`
	// Hex-encoded SHA-256 hash of the client secret.
	Oauth2ClientSecretSha256 string `pulumi:"oauth2ClientSecretSha256"`
}

// Identity-Aware Proxy
type IdentityAwareProxyResponseOutput struct{ *pulumi.OutputState }

func (IdentityAwareProxyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityAwareProxyResponse)(nil)).Elem()
}

func (o IdentityAwareProxyResponseOutput) ToIdentityAwareProxyResponseOutput() IdentityAwareProxyResponseOutput {
	return o
}

func (o IdentityAwareProxyResponseOutput) ToIdentityAwareProxyResponseOutputWithContext(ctx context.Context) IdentityAwareProxyResponseOutput {
	return o
}

// Whether the serving infrastructure will authenticate and authorize all incoming requests.If true, the oauth2_client_id and oauth2_client_secret fields must be non-empty.
func (o IdentityAwareProxyResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v IdentityAwareProxyResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// OAuth2 client ID to use for the authentication flow.
func (o IdentityAwareProxyResponseOutput) Oauth2ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityAwareProxyResponse) string { return v.Oauth2ClientId }).(pulumi.StringOutput)
}

// OAuth2 client secret to use for the authentication flow.For security reasons, this value cannot be retrieved via the API. Instead, the SHA-256 hash of the value is returned in the oauth2_client_secret_sha256 field.@InputOnly
func (o IdentityAwareProxyResponseOutput) Oauth2ClientSecret() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityAwareProxyResponse) string { return v.Oauth2ClientSecret }).(pulumi.StringOutput)
}

// Hex-encoded SHA-256 hash of the client secret.
func (o IdentityAwareProxyResponseOutput) Oauth2ClientSecretSha256() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityAwareProxyResponse) string { return v.Oauth2ClientSecretSha256 }).(pulumi.StringOutput)
}

// Third-party Python runtime library that is required by the application.
type Library struct {
	// Name of the library. Example: "django".
	Name *string `pulumi:"name"`
	// Version of the library to select, or "latest".
	Version *string `pulumi:"version"`
}

// LibraryInput is an input type that accepts LibraryArgs and LibraryOutput values.
// You can construct a concrete instance of `LibraryInput` via:
//
//	LibraryArgs{...}
type LibraryInput interface {
	pulumi.Input

	ToLibraryOutput() LibraryOutput
	ToLibraryOutputWithContext(context.Context) LibraryOutput
}

// Third-party Python runtime library that is required by the application.
type LibraryArgs struct {
	// Name of the library. Example: "django".
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Version of the library to select, or "latest".
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (LibraryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Library)(nil)).Elem()
}

func (i LibraryArgs) ToLibraryOutput() LibraryOutput {
	return i.ToLibraryOutputWithContext(context.Background())
}

func (i LibraryArgs) ToLibraryOutputWithContext(ctx context.Context) LibraryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LibraryOutput)
}

// LibraryArrayInput is an input type that accepts LibraryArray and LibraryArrayOutput values.
// You can construct a concrete instance of `LibraryArrayInput` via:
//
//	LibraryArray{ LibraryArgs{...} }
type LibraryArrayInput interface {
	pulumi.Input

	ToLibraryArrayOutput() LibraryArrayOutput
	ToLibraryArrayOutputWithContext(context.Context) LibraryArrayOutput
}

type LibraryArray []LibraryInput

func (LibraryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Library)(nil)).Elem()
}

func (i LibraryArray) ToLibraryArrayOutput() LibraryArrayOutput {
	return i.ToLibraryArrayOutputWithContext(context.Background())
}

func (i LibraryArray) ToLibraryArrayOutputWithContext(ctx context.Context) LibraryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LibraryArrayOutput)
}

// Third-party Python runtime library that is required by the application.
type LibraryOutput struct{ *pulumi.OutputState }

func (LibraryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Library)(nil)).Elem()
}

func (o LibraryOutput) ToLibraryOutput() LibraryOutput {
	return o
}

func (o LibraryOutput) ToLibraryOutputWithContext(ctx context.Context) LibraryOutput {
	return o
}

// Name of the library. Example: "django".
func (o LibraryOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Library) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Version of the library to select, or "latest".
func (o LibraryOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Library) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type LibraryArrayOutput struct{ *pulumi.OutputState }

func (LibraryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Library)(nil)).Elem()
}

func (o LibraryArrayOutput) ToLibraryArrayOutput() LibraryArrayOutput {
	return o
}

func (o LibraryArrayOutput) ToLibraryArrayOutputWithContext(ctx context.Context) LibraryArrayOutput {
	return o
}

func (o LibraryArrayOutput) Index(i pulumi.IntInput) LibraryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Library {
		return vs[0].([]Library)[vs[1].(int)]
	}).(LibraryOutput)
}

// Third-party Python runtime library that is required by the application.
type LibraryResponse struct {
	// Name of the library. Example: "django".
	Name string `pulumi:"name"`
	// Version of the library to select, or "latest".
	Version string `pulumi:"version"`
}

// Third-party Python runtime library that is required by the application.
type LibraryResponseOutput struct{ *pulumi.OutputState }

func (LibraryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LibraryResponse)(nil)).Elem()
}

func (o LibraryResponseOutput) ToLibraryResponseOutput() LibraryResponseOutput {
	return o
}

func (o LibraryResponseOutput) ToLibraryResponseOutputWithContext(ctx context.Context) LibraryResponseOutput {
	return o
}

// Name of the library. Example: "django".
func (o LibraryResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LibraryResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Version of the library to select, or "latest".
func (o LibraryResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v LibraryResponse) string { return v.Version }).(pulumi.StringOutput)
}

type LibraryResponseArrayOutput struct{ *pulumi.OutputState }

func (LibraryResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LibraryResponse)(nil)).Elem()
}

func (o LibraryResponseArrayOutput) ToLibraryResponseArrayOutput() LibraryResponseArrayOutput {
	return o
}

func (o LibraryResponseArrayOutput) ToLibraryResponseArrayOutputWithContext(ctx context.Context) LibraryResponseArrayOutput {
	return o
}

func (o LibraryResponseArrayOutput) Index(i pulumi.IntInput) LibraryResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LibraryResponse {
		return vs[0].([]LibraryResponse)[vs[1].(int)]
	}).(LibraryResponseOutput)
}

// Health checking configuration for VM instances. Unhealthy instances are killed and replaced with new instances.
type LivenessCheck struct {
	// Interval between health checks.
	CheckInterval *string `pulumi:"checkInterval"`
	// Number of consecutive failed checks required before considering the VM unhealthy.
	FailureThreshold *int `pulumi:"failureThreshold"`
	// Host header to send when performing a HTTP Liveness check. Example: "myapp.appspot.com"
	Host *string `pulumi:"host"`
	// The initial delay before starting to execute the checks.
	InitialDelay *string `pulumi:"initialDelay"`
	// The request path.
	Path *string `pulumi:"path"`
	// Number of consecutive successful checks required before considering the VM healthy.
	SuccessThreshold *int `pulumi:"successThreshold"`
	// Time before the check is considered failed.
	Timeout *string `pulumi:"timeout"`
}

// LivenessCheckInput is an input type that accepts LivenessCheckArgs and LivenessCheckOutput values.
// You can construct a concrete instance of `LivenessCheckInput` via:
//
//	LivenessCheckArgs{...}
type LivenessCheckInput interface {
	pulumi.Input

	ToLivenessCheckOutput() LivenessCheckOutput
	ToLivenessCheckOutputWithContext(context.Context) LivenessCheckOutput
}

// Health checking configuration for VM instances. Unhealthy instances are killed and replaced with new instances.
type LivenessCheckArgs struct {
	// Interval between health checks.
	CheckInterval pulumi.StringPtrInput `pulumi:"checkInterval"`
	// Number of consecutive failed checks required before considering the VM unhealthy.
	FailureThreshold pulumi.IntPtrInput `pulumi:"failureThreshold"`
	// Host header to send when performing a HTTP Liveness check. Example: "myapp.appspot.com"
	Host pulumi.StringPtrInput `pulumi:"host"`
	// The initial delay before starting to execute the checks.
	InitialDelay pulumi.StringPtrInput `pulumi:"initialDelay"`
	// The request path.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Number of consecutive successful checks required before considering the VM healthy.
	SuccessThreshold pulumi.IntPtrInput `pulumi:"successThreshold"`
	// Time before the check is considered failed.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
}

func (LivenessCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LivenessCheck)(nil)).Elem()
}

func (i LivenessCheckArgs) ToLivenessCheckOutput() LivenessCheckOutput {
	return i.ToLivenessCheckOutputWithContext(context.Background())
}

func (i LivenessCheckArgs) ToLivenessCheckOutputWithContext(ctx context.Context) LivenessCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LivenessCheckOutput)
}

func (i LivenessCheckArgs) ToLivenessCheckPtrOutput() LivenessCheckPtrOutput {
	return i.ToLivenessCheckPtrOutputWithContext(context.Background())
}

func (i LivenessCheckArgs) ToLivenessCheckPtrOutputWithContext(ctx context.Context) LivenessCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LivenessCheckOutput).ToLivenessCheckPtrOutputWithContext(ctx)
}

// LivenessCheckPtrInput is an input type that accepts LivenessCheckArgs, LivenessCheckPtr and LivenessCheckPtrOutput values.
// You can construct a concrete instance of `LivenessCheckPtrInput` via:
//
//	        LivenessCheckArgs{...}
//
//	or:
//
//	        nil
type LivenessCheckPtrInput interface {
	pulumi.Input

	ToLivenessCheckPtrOutput() LivenessCheckPtrOutput
	ToLivenessCheckPtrOutputWithContext(context.Context) LivenessCheckPtrOutput
}

type livenessCheckPtrType LivenessCheckArgs

func LivenessCheckPtr(v *LivenessCheckArgs) LivenessCheckPtrInput {
	return (*livenessCheckPtrType)(v)
}

func (*livenessCheckPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LivenessCheck)(nil)).Elem()
}

func (i *livenessCheckPtrType) ToLivenessCheckPtrOutput() LivenessCheckPtrOutput {
	return i.ToLivenessCheckPtrOutputWithContext(context.Background())
}

func (i *livenessCheckPtrType) ToLivenessCheckPtrOutputWithContext(ctx context.Context) LivenessCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LivenessCheckPtrOutput)
}

// Health checking configuration for VM instances. Unhealthy instances are killed and replaced with new instances.
type LivenessCheckOutput struct{ *pulumi.OutputState }

func (LivenessCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LivenessCheck)(nil)).Elem()
}

func (o LivenessCheckOutput) ToLivenessCheckOutput() LivenessCheckOutput {
	return o
}

func (o LivenessCheckOutput) ToLivenessCheckOutputWithContext(ctx context.Context) LivenessCheckOutput {
	return o
}

func (o LivenessCheckOutput) ToLivenessCheckPtrOutput() LivenessCheckPtrOutput {
	return o.ToLivenessCheckPtrOutputWithContext(context.Background())
}

func (o LivenessCheckOutput) ToLivenessCheckPtrOutputWithContext(ctx context.Context) LivenessCheckPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LivenessCheck) *LivenessCheck {
		return &v
	}).(LivenessCheckPtrOutput)
}

// Interval between health checks.
func (o LivenessCheckOutput) CheckInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LivenessCheck) *string { return v.CheckInterval }).(pulumi.StringPtrOutput)
}

// Number of consecutive failed checks required before considering the VM unhealthy.
func (o LivenessCheckOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LivenessCheck) *int { return v.FailureThreshold }).(pulumi.IntPtrOutput)
}

// Host header to send when performing a HTTP Liveness check. Example: "myapp.appspot.com"
func (o LivenessCheckOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LivenessCheck) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// The initial delay before starting to execute the checks.
func (o LivenessCheckOutput) InitialDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LivenessCheck) *string { return v.InitialDelay }).(pulumi.StringPtrOutput)
}

// The request path.
func (o LivenessCheckOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LivenessCheck) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Number of consecutive successful checks required before considering the VM healthy.
func (o LivenessCheckOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LivenessCheck) *int { return v.SuccessThreshold }).(pulumi.IntPtrOutput)
}

// Time before the check is considered failed.
func (o LivenessCheckOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LivenessCheck) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type LivenessCheckPtrOutput struct{ *pulumi.OutputState }

func (LivenessCheckPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LivenessCheck)(nil)).Elem()
}

func (o LivenessCheckPtrOutput) ToLivenessCheckPtrOutput() LivenessCheckPtrOutput {
	return o
}

func (o LivenessCheckPtrOutput) ToLivenessCheckPtrOutputWithContext(ctx context.Context) LivenessCheckPtrOutput {
	return o
}

func (o LivenessCheckPtrOutput) Elem() LivenessCheckOutput {
	return o.ApplyT(func(v *LivenessCheck) LivenessCheck {
		if v != nil {
			return *v
		}
		var ret LivenessCheck
		return ret
	}).(LivenessCheckOutput)
}

// Interval between health checks.
func (o LivenessCheckPtrOutput) CheckInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LivenessCheck) *string {
		if v == nil {
			return nil
		}
		return v.CheckInterval
	}).(pulumi.StringPtrOutput)
}

// Number of consecutive failed checks required before considering the VM unhealthy.
func (o LivenessCheckPtrOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LivenessCheck) *int {
		if v == nil {
			return nil
		}
		return v.FailureThreshold
	}).(pulumi.IntPtrOutput)
}

// Host header to send when performing a HTTP Liveness check. Example: "myapp.appspot.com"
func (o LivenessCheckPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LivenessCheck) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// The initial delay before starting to execute the checks.
func (o LivenessCheckPtrOutput) InitialDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LivenessCheck) *string {
		if v == nil {
			return nil
		}
		return v.InitialDelay
	}).(pulumi.StringPtrOutput)
}

// The request path.
func (o LivenessCheckPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LivenessCheck) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Number of consecutive successful checks required before considering the VM healthy.
func (o LivenessCheckPtrOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LivenessCheck) *int {
		if v == nil {
			return nil
		}
		return v.SuccessThreshold
	}).(pulumi.IntPtrOutput)
}

// Time before the check is considered failed.
func (o LivenessCheckPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LivenessCheck) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Health checking configuration for VM instances. Unhealthy instances are killed and replaced with new instances.
type LivenessCheckResponse struct {
	// Interval between health checks.
	CheckInterval string `pulumi:"checkInterval"`
	// Number of consecutive failed checks required before considering the VM unhealthy.
	FailureThreshold int `pulumi:"failureThreshold"`
	// Host header to send when performing a HTTP Liveness check. Example: "myapp.appspot.com"
	Host string `pulumi:"host"`
	// The initial delay before starting to execute the checks.
	InitialDelay string `pulumi:"initialDelay"`
	// The request path.
	Path string `pulumi:"path"`
	// Number of consecutive successful checks required before considering the VM healthy.
	SuccessThreshold int `pulumi:"successThreshold"`
	// Time before the check is considered failed.
	Timeout string `pulumi:"timeout"`
}

// Health checking configuration for VM instances. Unhealthy instances are killed and replaced with new instances.
type LivenessCheckResponseOutput struct{ *pulumi.OutputState }

func (LivenessCheckResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LivenessCheckResponse)(nil)).Elem()
}

func (o LivenessCheckResponseOutput) ToLivenessCheckResponseOutput() LivenessCheckResponseOutput {
	return o
}

func (o LivenessCheckResponseOutput) ToLivenessCheckResponseOutputWithContext(ctx context.Context) LivenessCheckResponseOutput {
	return o
}

// Interval between health checks.
func (o LivenessCheckResponseOutput) CheckInterval() pulumi.StringOutput {
	return o.ApplyT(func(v LivenessCheckResponse) string { return v.CheckInterval }).(pulumi.StringOutput)
}

// Number of consecutive failed checks required before considering the VM unhealthy.
func (o LivenessCheckResponseOutput) FailureThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v LivenessCheckResponse) int { return v.FailureThreshold }).(pulumi.IntOutput)
}

// Host header to send when performing a HTTP Liveness check. Example: "myapp.appspot.com"
func (o LivenessCheckResponseOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v LivenessCheckResponse) string { return v.Host }).(pulumi.StringOutput)
}

// The initial delay before starting to execute the checks.
func (o LivenessCheckResponseOutput) InitialDelay() pulumi.StringOutput {
	return o.ApplyT(func(v LivenessCheckResponse) string { return v.InitialDelay }).(pulumi.StringOutput)
}

// The request path.
func (o LivenessCheckResponseOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v LivenessCheckResponse) string { return v.Path }).(pulumi.StringOutput)
}

// Number of consecutive successful checks required before considering the VM healthy.
func (o LivenessCheckResponseOutput) SuccessThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v LivenessCheckResponse) int { return v.SuccessThreshold }).(pulumi.IntOutput)
}

// Time before the check is considered failed.
func (o LivenessCheckResponseOutput) Timeout() pulumi.StringOutput {
	return o.ApplyT(func(v LivenessCheckResponse) string { return v.Timeout }).(pulumi.StringOutput)
}

// A certificate managed by App Engine.
type ManagedCertificateResponse struct {
	// Time at which the certificate was last renewed. The renewal process is fully managed. Certificate renewal will automatically occur before the certificate expires. Renewal errors can be tracked via ManagementStatus.
	LastRenewalTime string `pulumi:"lastRenewalTime"`
	// Status of certificate management. Refers to the most recent certificate acquisition or renewal attempt.
	Status string `pulumi:"status"`
}

// A certificate managed by App Engine.
type ManagedCertificateResponseOutput struct{ *pulumi.OutputState }

func (ManagedCertificateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedCertificateResponse)(nil)).Elem()
}

func (o ManagedCertificateResponseOutput) ToManagedCertificateResponseOutput() ManagedCertificateResponseOutput {
	return o
}

func (o ManagedCertificateResponseOutput) ToManagedCertificateResponseOutputWithContext(ctx context.Context) ManagedCertificateResponseOutput {
	return o
}

// Time at which the certificate was last renewed. The renewal process is fully managed. Certificate renewal will automatically occur before the certificate expires. Renewal errors can be tracked via ManagementStatus.
func (o ManagedCertificateResponseOutput) LastRenewalTime() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedCertificateResponse) string { return v.LastRenewalTime }).(pulumi.StringOutput)
}

// Status of certificate management. Refers to the most recent certificate acquisition or renewal attempt.
func (o ManagedCertificateResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedCertificateResponse) string { return v.Status }).(pulumi.StringOutput)
}

// A service with manual scaling runs continuously, allowing you to perform complex initialization and rely on the state of its memory over time.
type ManualScaling struct {
	// Number of instances to assign to the service at the start. This number can later be altered by using the Modules API (https://cloud.google.com/appengine/docs/python/modules/functions) set_num_instances() function.
	Instances *int `pulumi:"instances"`
}

// ManualScalingInput is an input type that accepts ManualScalingArgs and ManualScalingOutput values.
// You can construct a concrete instance of `ManualScalingInput` via:
//
//	ManualScalingArgs{...}
type ManualScalingInput interface {
	pulumi.Input

	ToManualScalingOutput() ManualScalingOutput
	ToManualScalingOutputWithContext(context.Context) ManualScalingOutput
}

// A service with manual scaling runs continuously, allowing you to perform complex initialization and rely on the state of its memory over time.
type ManualScalingArgs struct {
	// Number of instances to assign to the service at the start. This number can later be altered by using the Modules API (https://cloud.google.com/appengine/docs/python/modules/functions) set_num_instances() function.
	Instances pulumi.IntPtrInput `pulumi:"instances"`
}

func (ManualScalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManualScaling)(nil)).Elem()
}

func (i ManualScalingArgs) ToManualScalingOutput() ManualScalingOutput {
	return i.ToManualScalingOutputWithContext(context.Background())
}

func (i ManualScalingArgs) ToManualScalingOutputWithContext(ctx context.Context) ManualScalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManualScalingOutput)
}

func (i ManualScalingArgs) ToManualScalingPtrOutput() ManualScalingPtrOutput {
	return i.ToManualScalingPtrOutputWithContext(context.Background())
}

func (i ManualScalingArgs) ToManualScalingPtrOutputWithContext(ctx context.Context) ManualScalingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManualScalingOutput).ToManualScalingPtrOutputWithContext(ctx)
}

// ManualScalingPtrInput is an input type that accepts ManualScalingArgs, ManualScalingPtr and ManualScalingPtrOutput values.
// You can construct a concrete instance of `ManualScalingPtrInput` via:
//
//	        ManualScalingArgs{...}
//
//	or:
//
//	        nil
type ManualScalingPtrInput interface {
	pulumi.Input

	ToManualScalingPtrOutput() ManualScalingPtrOutput
	ToManualScalingPtrOutputWithContext(context.Context) ManualScalingPtrOutput
}

type manualScalingPtrType ManualScalingArgs

func ManualScalingPtr(v *ManualScalingArgs) ManualScalingPtrInput {
	return (*manualScalingPtrType)(v)
}

func (*manualScalingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManualScaling)(nil)).Elem()
}

func (i *manualScalingPtrType) ToManualScalingPtrOutput() ManualScalingPtrOutput {
	return i.ToManualScalingPtrOutputWithContext(context.Background())
}

func (i *manualScalingPtrType) ToManualScalingPtrOutputWithContext(ctx context.Context) ManualScalingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManualScalingPtrOutput)
}

// A service with manual scaling runs continuously, allowing you to perform complex initialization and rely on the state of its memory over time.
type ManualScalingOutput struct{ *pulumi.OutputState }

func (ManualScalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManualScaling)(nil)).Elem()
}

func (o ManualScalingOutput) ToManualScalingOutput() ManualScalingOutput {
	return o
}

func (o ManualScalingOutput) ToManualScalingOutputWithContext(ctx context.Context) ManualScalingOutput {
	return o
}

func (o ManualScalingOutput) ToManualScalingPtrOutput() ManualScalingPtrOutput {
	return o.ToManualScalingPtrOutputWithContext(context.Background())
}

func (o ManualScalingOutput) ToManualScalingPtrOutputWithContext(ctx context.Context) ManualScalingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManualScaling) *ManualScaling {
		return &v
	}).(ManualScalingPtrOutput)
}

// Number of instances to assign to the service at the start. This number can later be altered by using the Modules API (https://cloud.google.com/appengine/docs/python/modules/functions) set_num_instances() function.
func (o ManualScalingOutput) Instances() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManualScaling) *int { return v.Instances }).(pulumi.IntPtrOutput)
}

type ManualScalingPtrOutput struct{ *pulumi.OutputState }

func (ManualScalingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManualScaling)(nil)).Elem()
}

func (o ManualScalingPtrOutput) ToManualScalingPtrOutput() ManualScalingPtrOutput {
	return o
}

func (o ManualScalingPtrOutput) ToManualScalingPtrOutputWithContext(ctx context.Context) ManualScalingPtrOutput {
	return o
}

func (o ManualScalingPtrOutput) Elem() ManualScalingOutput {
	return o.ApplyT(func(v *ManualScaling) ManualScaling {
		if v != nil {
			return *v
		}
		var ret ManualScaling
		return ret
	}).(ManualScalingOutput)
}

// Number of instances to assign to the service at the start. This number can later be altered by using the Modules API (https://cloud.google.com/appengine/docs/python/modules/functions) set_num_instances() function.
func (o ManualScalingPtrOutput) Instances() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ManualScaling) *int {
		if v == nil {
			return nil
		}
		return v.Instances
	}).(pulumi.IntPtrOutput)
}

// A service with manual scaling runs continuously, allowing you to perform complex initialization and rely on the state of its memory over time.
type ManualScalingResponse struct {
	// Number of instances to assign to the service at the start. This number can later be altered by using the Modules API (https://cloud.google.com/appengine/docs/python/modules/functions) set_num_instances() function.
	Instances int `pulumi:"instances"`
}

// A service with manual scaling runs continuously, allowing you to perform complex initialization and rely on the state of its memory over time.
type ManualScalingResponseOutput struct{ *pulumi.OutputState }

func (ManualScalingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManualScalingResponse)(nil)).Elem()
}

func (o ManualScalingResponseOutput) ToManualScalingResponseOutput() ManualScalingResponseOutput {
	return o
}

func (o ManualScalingResponseOutput) ToManualScalingResponseOutputWithContext(ctx context.Context) ManualScalingResponseOutput {
	return o
}

// Number of instances to assign to the service at the start. This number can later be altered by using the Modules API (https://cloud.google.com/appengine/docs/python/modules/functions) set_num_instances() function.
func (o ManualScalingResponseOutput) Instances() pulumi.IntOutput {
	return o.ApplyT(func(v ManualScalingResponse) int { return v.Instances }).(pulumi.IntOutput)
}

// Extra network settings. Only applicable in the App Engine flexible environment.
type Network struct {
	// List of ports, or port pairs, to forward from the virtual machine to the application container. Only applicable in the App Engine flexible environment.
	ForwardedPorts []string `pulumi:"forwardedPorts"`
	// The IP mode for instances. Only applicable in the App Engine flexible environment.
	InstanceIpMode *NetworkInstanceIpMode `pulumi:"instanceIpMode"`
	// Tag to apply to the instance during creation. Only applicable in the App Engine flexible environment.
	InstanceTag *string `pulumi:"instanceTag"`
	// Google Compute Engine network where the virtual machines are created. Specify the short name, not the resource path.Defaults to default.
	Name *string `pulumi:"name"`
	// Enable session affinity. Only applicable in the App Engine flexible environment.
	SessionAffinity *bool `pulumi:"sessionAffinity"`
	// Google Cloud Platform sub-network where the virtual machines are created. Specify the short name, not the resource path.If a subnetwork name is specified, a network name will also be required unless it is for the default network. If the network that the instance is being created in is a Legacy network, then the IP address is allocated from the IPv4Range. If the network that the instance is being created in is an auto Subnet Mode Network, then only network name should be specified (not the subnetwork_name) and the IP address is created from the IPCidrRange of the subnetwork that exists in that zone for that network. If the network that the instance is being created in is a custom Subnet Mode Network, then the subnetwork_name must be specified and the IP address is created from the IPCidrRange of the subnetwork.If specified, the subnetwork must exist in the same region as the App Engine flexible environment application.
	SubnetworkName *string `pulumi:"subnetworkName"`
}

// NetworkInput is an input type that accepts NetworkArgs and NetworkOutput values.
// You can construct a concrete instance of `NetworkInput` via:
//
//	NetworkArgs{...}
type NetworkInput interface {
	pulumi.Input

	ToNetworkOutput() NetworkOutput
	ToNetworkOutputWithContext(context.Context) NetworkOutput
}

// Extra network settings. Only applicable in the App Engine flexible environment.
type NetworkArgs struct {
	// List of ports, or port pairs, to forward from the virtual machine to the application container. Only applicable in the App Engine flexible environment.
	ForwardedPorts pulumi.StringArrayInput `pulumi:"forwardedPorts"`
	// The IP mode for instances. Only applicable in the App Engine flexible environment.
	InstanceIpMode NetworkInstanceIpModePtrInput `pulumi:"instanceIpMode"`
	// Tag to apply to the instance during creation. Only applicable in the App Engine flexible environment.
	InstanceTag pulumi.StringPtrInput `pulumi:"instanceTag"`
	// Google Compute Engine network where the virtual machines are created. Specify the short name, not the resource path.Defaults to default.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Enable session affinity. Only applicable in the App Engine flexible environment.
	SessionAffinity pulumi.BoolPtrInput `pulumi:"sessionAffinity"`
	// Google Cloud Platform sub-network where the virtual machines are created. Specify the short name, not the resource path.If a subnetwork name is specified, a network name will also be required unless it is for the default network. If the network that the instance is being created in is a Legacy network, then the IP address is allocated from the IPv4Range. If the network that the instance is being created in is an auto Subnet Mode Network, then only network name should be specified (not the subnetwork_name) and the IP address is created from the IPCidrRange of the subnetwork that exists in that zone for that network. If the network that the instance is being created in is a custom Subnet Mode Network, then the subnetwork_name must be specified and the IP address is created from the IPCidrRange of the subnetwork.If specified, the subnetwork must exist in the same region as the App Engine flexible environment application.
	SubnetworkName pulumi.StringPtrInput `pulumi:"subnetworkName"`
}

func (NetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Network)(nil)).Elem()
}

func (i NetworkArgs) ToNetworkOutput() NetworkOutput {
	return i.ToNetworkOutputWithContext(context.Background())
}

func (i NetworkArgs) ToNetworkOutputWithContext(ctx context.Context) NetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkOutput)
}

func (i NetworkArgs) ToNetworkPtrOutput() NetworkPtrOutput {
	return i.ToNetworkPtrOutputWithContext(context.Background())
}

func (i NetworkArgs) ToNetworkPtrOutputWithContext(ctx context.Context) NetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkOutput).ToNetworkPtrOutputWithContext(ctx)
}

// NetworkPtrInput is an input type that accepts NetworkArgs, NetworkPtr and NetworkPtrOutput values.
// You can construct a concrete instance of `NetworkPtrInput` via:
//
//	        NetworkArgs{...}
//
//	or:
//
//	        nil
type NetworkPtrInput interface {
	pulumi.Input

	ToNetworkPtrOutput() NetworkPtrOutput
	ToNetworkPtrOutputWithContext(context.Context) NetworkPtrOutput
}

type networkPtrType NetworkArgs

func NetworkPtr(v *NetworkArgs) NetworkPtrInput {
	return (*networkPtrType)(v)
}

func (*networkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Network)(nil)).Elem()
}

func (i *networkPtrType) ToNetworkPtrOutput() NetworkPtrOutput {
	return i.ToNetworkPtrOutputWithContext(context.Background())
}

func (i *networkPtrType) ToNetworkPtrOutputWithContext(ctx context.Context) NetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPtrOutput)
}

// Extra network settings. Only applicable in the App Engine flexible environment.
type NetworkOutput struct{ *pulumi.OutputState }

func (NetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Network)(nil)).Elem()
}

func (o NetworkOutput) ToNetworkOutput() NetworkOutput {
	return o
}

func (o NetworkOutput) ToNetworkOutputWithContext(ctx context.Context) NetworkOutput {
	return o
}

func (o NetworkOutput) ToNetworkPtrOutput() NetworkPtrOutput {
	return o.ToNetworkPtrOutputWithContext(context.Background())
}

func (o NetworkOutput) ToNetworkPtrOutputWithContext(ctx context.Context) NetworkPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Network) *Network {
		return &v
	}).(NetworkPtrOutput)
}

// List of ports, or port pairs, to forward from the virtual machine to the application container. Only applicable in the App Engine flexible environment.
func (o NetworkOutput) ForwardedPorts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Network) []string { return v.ForwardedPorts }).(pulumi.StringArrayOutput)
}

// The IP mode for instances. Only applicable in the App Engine flexible environment.
func (o NetworkOutput) InstanceIpMode() NetworkInstanceIpModePtrOutput {
	return o.ApplyT(func(v Network) *NetworkInstanceIpMode { return v.InstanceIpMode }).(NetworkInstanceIpModePtrOutput)
}

// Tag to apply to the instance during creation. Only applicable in the App Engine flexible environment.
func (o NetworkOutput) InstanceTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Network) *string { return v.InstanceTag }).(pulumi.StringPtrOutput)
}

// Google Compute Engine network where the virtual machines are created. Specify the short name, not the resource path.Defaults to default.
func (o NetworkOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Network) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Enable session affinity. Only applicable in the App Engine flexible environment.
func (o NetworkOutput) SessionAffinity() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Network) *bool { return v.SessionAffinity }).(pulumi.BoolPtrOutput)
}

// Google Cloud Platform sub-network where the virtual machines are created. Specify the short name, not the resource path.If a subnetwork name is specified, a network name will also be required unless it is for the default network. If the network that the instance is being created in is a Legacy network, then the IP address is allocated from the IPv4Range. If the network that the instance is being created in is an auto Subnet Mode Network, then only network name should be specified (not the subnetwork_name) and the IP address is created from the IPCidrRange of the subnetwork that exists in that zone for that network. If the network that the instance is being created in is a custom Subnet Mode Network, then the subnetwork_name must be specified and the IP address is created from the IPCidrRange of the subnetwork.If specified, the subnetwork must exist in the same region as the App Engine flexible environment application.
func (o NetworkOutput) SubnetworkName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Network) *string { return v.SubnetworkName }).(pulumi.StringPtrOutput)
}

type NetworkPtrOutput struct{ *pulumi.OutputState }

func (NetworkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Network)(nil)).Elem()
}

func (o NetworkPtrOutput) ToNetworkPtrOutput() NetworkPtrOutput {
	return o
}

func (o NetworkPtrOutput) ToNetworkPtrOutputWithContext(ctx context.Context) NetworkPtrOutput {
	return o
}

func (o NetworkPtrOutput) Elem() NetworkOutput {
	return o.ApplyT(func(v *Network) Network {
		if v != nil {
			return *v
		}
		var ret Network
		return ret
	}).(NetworkOutput)
}

// List of ports, or port pairs, to forward from the virtual machine to the application container. Only applicable in the App Engine flexible environment.
func (o NetworkPtrOutput) ForwardedPorts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Network) []string {
		if v == nil {
			return nil
		}
		return v.ForwardedPorts
	}).(pulumi.StringArrayOutput)
}

// The IP mode for instances. Only applicable in the App Engine flexible environment.
func (o NetworkPtrOutput) InstanceIpMode() NetworkInstanceIpModePtrOutput {
	return o.ApplyT(func(v *Network) *NetworkInstanceIpMode {
		if v == nil {
			return nil
		}
		return v.InstanceIpMode
	}).(NetworkInstanceIpModePtrOutput)
}

// Tag to apply to the instance during creation. Only applicable in the App Engine flexible environment.
func (o NetworkPtrOutput) InstanceTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Network) *string {
		if v == nil {
			return nil
		}
		return v.InstanceTag
	}).(pulumi.StringPtrOutput)
}

// Google Compute Engine network where the virtual machines are created. Specify the short name, not the resource path.Defaults to default.
func (o NetworkPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Network) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Enable session affinity. Only applicable in the App Engine flexible environment.
func (o NetworkPtrOutput) SessionAffinity() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Network) *bool {
		if v == nil {
			return nil
		}
		return v.SessionAffinity
	}).(pulumi.BoolPtrOutput)
}

// Google Cloud Platform sub-network where the virtual machines are created. Specify the short name, not the resource path.If a subnetwork name is specified, a network name will also be required unless it is for the default network. If the network that the instance is being created in is a Legacy network, then the IP address is allocated from the IPv4Range. If the network that the instance is being created in is an auto Subnet Mode Network, then only network name should be specified (not the subnetwork_name) and the IP address is created from the IPCidrRange of the subnetwork that exists in that zone for that network. If the network that the instance is being created in is a custom Subnet Mode Network, then the subnetwork_name must be specified and the IP address is created from the IPCidrRange of the subnetwork.If specified, the subnetwork must exist in the same region as the App Engine flexible environment application.
func (o NetworkPtrOutput) SubnetworkName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Network) *string {
		if v == nil {
			return nil
		}
		return v.SubnetworkName
	}).(pulumi.StringPtrOutput)
}

// Extra network settings. Only applicable in the App Engine flexible environment.
type NetworkResponse struct {
	// List of ports, or port pairs, to forward from the virtual machine to the application container. Only applicable in the App Engine flexible environment.
	ForwardedPorts []string `pulumi:"forwardedPorts"`
	// The IP mode for instances. Only applicable in the App Engine flexible environment.
	InstanceIpMode string `pulumi:"instanceIpMode"`
	// Tag to apply to the instance during creation. Only applicable in the App Engine flexible environment.
	InstanceTag string `pulumi:"instanceTag"`
	// Google Compute Engine network where the virtual machines are created. Specify the short name, not the resource path.Defaults to default.
	Name string `pulumi:"name"`
	// Enable session affinity. Only applicable in the App Engine flexible environment.
	SessionAffinity bool `pulumi:"sessionAffinity"`
	// Google Cloud Platform sub-network where the virtual machines are created. Specify the short name, not the resource path.If a subnetwork name is specified, a network name will also be required unless it is for the default network. If the network that the instance is being created in is a Legacy network, then the IP address is allocated from the IPv4Range. If the network that the instance is being created in is an auto Subnet Mode Network, then only network name should be specified (not the subnetwork_name) and the IP address is created from the IPCidrRange of the subnetwork that exists in that zone for that network. If the network that the instance is being created in is a custom Subnet Mode Network, then the subnetwork_name must be specified and the IP address is created from the IPCidrRange of the subnetwork.If specified, the subnetwork must exist in the same region as the App Engine flexible environment application.
	SubnetworkName string `pulumi:"subnetworkName"`
}

// Extra network settings. Only applicable in the App Engine flexible environment.
type NetworkResponseOutput struct{ *pulumi.OutputState }

func (NetworkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkResponse)(nil)).Elem()
}

func (o NetworkResponseOutput) ToNetworkResponseOutput() NetworkResponseOutput {
	return o
}

func (o NetworkResponseOutput) ToNetworkResponseOutputWithContext(ctx context.Context) NetworkResponseOutput {
	return o
}

// List of ports, or port pairs, to forward from the virtual machine to the application container. Only applicable in the App Engine flexible environment.
func (o NetworkResponseOutput) ForwardedPorts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworkResponse) []string { return v.ForwardedPorts }).(pulumi.StringArrayOutput)
}

// The IP mode for instances. Only applicable in the App Engine flexible environment.
func (o NetworkResponseOutput) InstanceIpMode() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkResponse) string { return v.InstanceIpMode }).(pulumi.StringOutput)
}

// Tag to apply to the instance during creation. Only applicable in the App Engine flexible environment.
func (o NetworkResponseOutput) InstanceTag() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkResponse) string { return v.InstanceTag }).(pulumi.StringOutput)
}

// Google Compute Engine network where the virtual machines are created. Specify the short name, not the resource path.Defaults to default.
func (o NetworkResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Enable session affinity. Only applicable in the App Engine flexible environment.
func (o NetworkResponseOutput) SessionAffinity() pulumi.BoolOutput {
	return o.ApplyT(func(v NetworkResponse) bool { return v.SessionAffinity }).(pulumi.BoolOutput)
}

// Google Cloud Platform sub-network where the virtual machines are created. Specify the short name, not the resource path.If a subnetwork name is specified, a network name will also be required unless it is for the default network. If the network that the instance is being created in is a Legacy network, then the IP address is allocated from the IPv4Range. If the network that the instance is being created in is an auto Subnet Mode Network, then only network name should be specified (not the subnetwork_name) and the IP address is created from the IPCidrRange of the subnetwork that exists in that zone for that network. If the network that the instance is being created in is a custom Subnet Mode Network, then the subnetwork_name must be specified and the IP address is created from the IPCidrRange of the subnetwork.If specified, the subnetwork must exist in the same region as the App Engine flexible environment application.
func (o NetworkResponseOutput) SubnetworkName() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkResponse) string { return v.SubnetworkName }).(pulumi.StringOutput)
}

// Target scaling by network usage. Only applicable in the App Engine flexible environment.
type NetworkUtilization struct {
	// Target bytes received per second.
	TargetReceivedBytesPerSecond *int `pulumi:"targetReceivedBytesPerSecond"`
	// Target packets received per second.
	TargetReceivedPacketsPerSecond *int `pulumi:"targetReceivedPacketsPerSecond"`
	// Target bytes sent per second.
	TargetSentBytesPerSecond *int `pulumi:"targetSentBytesPerSecond"`
	// Target packets sent per second.
	TargetSentPacketsPerSecond *int `pulumi:"targetSentPacketsPerSecond"`
}

// NetworkUtilizationInput is an input type that accepts NetworkUtilizationArgs and NetworkUtilizationOutput values.
// You can construct a concrete instance of `NetworkUtilizationInput` via:
//
//	NetworkUtilizationArgs{...}
type NetworkUtilizationInput interface {
	pulumi.Input

	ToNetworkUtilizationOutput() NetworkUtilizationOutput
	ToNetworkUtilizationOutputWithContext(context.Context) NetworkUtilizationOutput
}

// Target scaling by network usage. Only applicable in the App Engine flexible environment.
type NetworkUtilizationArgs struct {
	// Target bytes received per second.
	TargetReceivedBytesPerSecond pulumi.IntPtrInput `pulumi:"targetReceivedBytesPerSecond"`
	// Target packets received per second.
	TargetReceivedPacketsPerSecond pulumi.IntPtrInput `pulumi:"targetReceivedPacketsPerSecond"`
	// Target bytes sent per second.
	TargetSentBytesPerSecond pulumi.IntPtrInput `pulumi:"targetSentBytesPerSecond"`
	// Target packets sent per second.
	TargetSentPacketsPerSecond pulumi.IntPtrInput `pulumi:"targetSentPacketsPerSecond"`
}

func (NetworkUtilizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkUtilization)(nil)).Elem()
}

func (i NetworkUtilizationArgs) ToNetworkUtilizationOutput() NetworkUtilizationOutput {
	return i.ToNetworkUtilizationOutputWithContext(context.Background())
}

func (i NetworkUtilizationArgs) ToNetworkUtilizationOutputWithContext(ctx context.Context) NetworkUtilizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkUtilizationOutput)
}

func (i NetworkUtilizationArgs) ToNetworkUtilizationPtrOutput() NetworkUtilizationPtrOutput {
	return i.ToNetworkUtilizationPtrOutputWithContext(context.Background())
}

func (i NetworkUtilizationArgs) ToNetworkUtilizationPtrOutputWithContext(ctx context.Context) NetworkUtilizationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkUtilizationOutput).ToNetworkUtilizationPtrOutputWithContext(ctx)
}

// NetworkUtilizationPtrInput is an input type that accepts NetworkUtilizationArgs, NetworkUtilizationPtr and NetworkUtilizationPtrOutput values.
// You can construct a concrete instance of `NetworkUtilizationPtrInput` via:
//
//	        NetworkUtilizationArgs{...}
//
//	or:
//
//	        nil
type NetworkUtilizationPtrInput interface {
	pulumi.Input

	ToNetworkUtilizationPtrOutput() NetworkUtilizationPtrOutput
	ToNetworkUtilizationPtrOutputWithContext(context.Context) NetworkUtilizationPtrOutput
}

type networkUtilizationPtrType NetworkUtilizationArgs

func NetworkUtilizationPtr(v *NetworkUtilizationArgs) NetworkUtilizationPtrInput {
	return (*networkUtilizationPtrType)(v)
}

func (*networkUtilizationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkUtilization)(nil)).Elem()
}

func (i *networkUtilizationPtrType) ToNetworkUtilizationPtrOutput() NetworkUtilizationPtrOutput {
	return i.ToNetworkUtilizationPtrOutputWithContext(context.Background())
}

func (i *networkUtilizationPtrType) ToNetworkUtilizationPtrOutputWithContext(ctx context.Context) NetworkUtilizationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkUtilizationPtrOutput)
}

// Target scaling by network usage. Only applicable in the App Engine flexible environment.
type NetworkUtilizationOutput struct{ *pulumi.OutputState }

func (NetworkUtilizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkUtilization)(nil)).Elem()
}

func (o NetworkUtilizationOutput) ToNetworkUtilizationOutput() NetworkUtilizationOutput {
	return o
}

func (o NetworkUtilizationOutput) ToNetworkUtilizationOutputWithContext(ctx context.Context) NetworkUtilizationOutput {
	return o
}

func (o NetworkUtilizationOutput) ToNetworkUtilizationPtrOutput() NetworkUtilizationPtrOutput {
	return o.ToNetworkUtilizationPtrOutputWithContext(context.Background())
}

func (o NetworkUtilizationOutput) ToNetworkUtilizationPtrOutputWithContext(ctx context.Context) NetworkUtilizationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkUtilization) *NetworkUtilization {
		return &v
	}).(NetworkUtilizationPtrOutput)
}

// Target bytes received per second.
func (o NetworkUtilizationOutput) TargetReceivedBytesPerSecond() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworkUtilization) *int { return v.TargetReceivedBytesPerSecond }).(pulumi.IntPtrOutput)
}

// Target packets received per second.
func (o NetworkUtilizationOutput) TargetReceivedPacketsPerSecond() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworkUtilization) *int { return v.TargetReceivedPacketsPerSecond }).(pulumi.IntPtrOutput)
}

// Target bytes sent per second.
func (o NetworkUtilizationOutput) TargetSentBytesPerSecond() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworkUtilization) *int { return v.TargetSentBytesPerSecond }).(pulumi.IntPtrOutput)
}

// Target packets sent per second.
func (o NetworkUtilizationOutput) TargetSentPacketsPerSecond() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworkUtilization) *int { return v.TargetSentPacketsPerSecond }).(pulumi.IntPtrOutput)
}

type NetworkUtilizationPtrOutput struct{ *pulumi.OutputState }

func (NetworkUtilizationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkUtilization)(nil)).Elem()
}

func (o NetworkUtilizationPtrOutput) ToNetworkUtilizationPtrOutput() NetworkUtilizationPtrOutput {
	return o
}

func (o NetworkUtilizationPtrOutput) ToNetworkUtilizationPtrOutputWithContext(ctx context.Context) NetworkUtilizationPtrOutput {
	return o
}

func (o NetworkUtilizationPtrOutput) Elem() NetworkUtilizationOutput {
	return o.ApplyT(func(v *NetworkUtilization) NetworkUtilization {
		if v != nil {
			return *v
		}
		var ret NetworkUtilization
		return ret
	}).(NetworkUtilizationOutput)
}

// Target bytes received per second.
func (o NetworkUtilizationPtrOutput) TargetReceivedBytesPerSecond() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworkUtilization) *int {
		if v == nil {
			return nil
		}
		return v.TargetReceivedBytesPerSecond
	}).(pulumi.IntPtrOutput)
}

// Target packets received per second.
func (o NetworkUtilizationPtrOutput) TargetReceivedPacketsPerSecond() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworkUtilization) *int {
		if v == nil {
			return nil
		}
		return v.TargetReceivedPacketsPerSecond
	}).(pulumi.IntPtrOutput)
}

// Target bytes sent per second.
func (o NetworkUtilizationPtrOutput) TargetSentBytesPerSecond() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworkUtilization) *int {
		if v == nil {
			return nil
		}
		return v.TargetSentBytesPerSecond
	}).(pulumi.IntPtrOutput)
}

// Target packets sent per second.
func (o NetworkUtilizationPtrOutput) TargetSentPacketsPerSecond() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworkUtilization) *int {
		if v == nil {
			return nil
		}
		return v.TargetSentPacketsPerSecond
	}).(pulumi.IntPtrOutput)
}

// Target scaling by network usage. Only applicable in the App Engine flexible environment.
type NetworkUtilizationResponse struct {
	// Target bytes received per second.
	TargetReceivedBytesPerSecond int `pulumi:"targetReceivedBytesPerSecond"`
	// Target packets received per second.
	TargetReceivedPacketsPerSecond int `pulumi:"targetReceivedPacketsPerSecond"`
	// Target bytes sent per second.
	TargetSentBytesPerSecond int `pulumi:"targetSentBytesPerSecond"`
	// Target packets sent per second.
	TargetSentPacketsPerSecond int `pulumi:"targetSentPacketsPerSecond"`
}

// Target scaling by network usage. Only applicable in the App Engine flexible environment.
type NetworkUtilizationResponseOutput struct{ *pulumi.OutputState }

func (NetworkUtilizationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkUtilizationResponse)(nil)).Elem()
}

func (o NetworkUtilizationResponseOutput) ToNetworkUtilizationResponseOutput() NetworkUtilizationResponseOutput {
	return o
}

func (o NetworkUtilizationResponseOutput) ToNetworkUtilizationResponseOutputWithContext(ctx context.Context) NetworkUtilizationResponseOutput {
	return o
}

// Target bytes received per second.
func (o NetworkUtilizationResponseOutput) TargetReceivedBytesPerSecond() pulumi.IntOutput {
	return o.ApplyT(func(v NetworkUtilizationResponse) int { return v.TargetReceivedBytesPerSecond }).(pulumi.IntOutput)
}

// Target packets received per second.
func (o NetworkUtilizationResponseOutput) TargetReceivedPacketsPerSecond() pulumi.IntOutput {
	return o.ApplyT(func(v NetworkUtilizationResponse) int { return v.TargetReceivedPacketsPerSecond }).(pulumi.IntOutput)
}

// Target bytes sent per second.
func (o NetworkUtilizationResponseOutput) TargetSentBytesPerSecond() pulumi.IntOutput {
	return o.ApplyT(func(v NetworkUtilizationResponse) int { return v.TargetSentBytesPerSecond }).(pulumi.IntOutput)
}

// Target packets sent per second.
func (o NetworkUtilizationResponseOutput) TargetSentPacketsPerSecond() pulumi.IntOutput {
	return o.ApplyT(func(v NetworkUtilizationResponse) int { return v.TargetSentPacketsPerSecond }).(pulumi.IntOutput)
}

// Readiness checking configuration for VM instances. Unhealthy instances are removed from traffic rotation.
type ReadinessCheck struct {
	// A maximum time limit on application initialization, measured from moment the application successfully replies to a healthcheck until it is ready to serve traffic.
	AppStartTimeout *string `pulumi:"appStartTimeout"`
	// Interval between health checks.
	CheckInterval *string `pulumi:"checkInterval"`
	// Number of consecutive failed checks required before removing traffic.
	FailureThreshold *int `pulumi:"failureThreshold"`
	// Host header to send when performing a HTTP Readiness check. Example: "myapp.appspot.com"
	Host *string `pulumi:"host"`
	// The request path.
	Path *string `pulumi:"path"`
	// Number of consecutive successful checks required before receiving traffic.
	SuccessThreshold *int `pulumi:"successThreshold"`
	// Time before the check is considered failed.
	Timeout *string `pulumi:"timeout"`
}

// ReadinessCheckInput is an input type that accepts ReadinessCheckArgs and ReadinessCheckOutput values.
// You can construct a concrete instance of `ReadinessCheckInput` via:
//
//	ReadinessCheckArgs{...}
type ReadinessCheckInput interface {
	pulumi.Input

	ToReadinessCheckOutput() ReadinessCheckOutput
	ToReadinessCheckOutputWithContext(context.Context) ReadinessCheckOutput
}

// Readiness checking configuration for VM instances. Unhealthy instances are removed from traffic rotation.
type ReadinessCheckArgs struct {
	// A maximum time limit on application initialization, measured from moment the application successfully replies to a healthcheck until it is ready to serve traffic.
	AppStartTimeout pulumi.StringPtrInput `pulumi:"appStartTimeout"`
	// Interval between health checks.
	CheckInterval pulumi.StringPtrInput `pulumi:"checkInterval"`
	// Number of consecutive failed checks required before removing traffic.
	FailureThreshold pulumi.IntPtrInput `pulumi:"failureThreshold"`
	// Host header to send when performing a HTTP Readiness check. Example: "myapp.appspot.com"
	Host pulumi.StringPtrInput `pulumi:"host"`
	// The request path.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Number of consecutive successful checks required before receiving traffic.
	SuccessThreshold pulumi.IntPtrInput `pulumi:"successThreshold"`
	// Time before the check is considered failed.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
}

func (ReadinessCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReadinessCheck)(nil)).Elem()
}

func (i ReadinessCheckArgs) ToReadinessCheckOutput() ReadinessCheckOutput {
	return i.ToReadinessCheckOutputWithContext(context.Background())
}

func (i ReadinessCheckArgs) ToReadinessCheckOutputWithContext(ctx context.Context) ReadinessCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReadinessCheckOutput)
}

func (i ReadinessCheckArgs) ToReadinessCheckPtrOutput() ReadinessCheckPtrOutput {
	return i.ToReadinessCheckPtrOutputWithContext(context.Background())
}

func (i ReadinessCheckArgs) ToReadinessCheckPtrOutputWithContext(ctx context.Context) ReadinessCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReadinessCheckOutput).ToReadinessCheckPtrOutputWithContext(ctx)
}

// ReadinessCheckPtrInput is an input type that accepts ReadinessCheckArgs, ReadinessCheckPtr and ReadinessCheckPtrOutput values.
// You can construct a concrete instance of `ReadinessCheckPtrInput` via:
//
//	        ReadinessCheckArgs{...}
//
//	or:
//
//	        nil
type ReadinessCheckPtrInput interface {
	pulumi.Input

	ToReadinessCheckPtrOutput() ReadinessCheckPtrOutput
	ToReadinessCheckPtrOutputWithContext(context.Context) ReadinessCheckPtrOutput
}

type readinessCheckPtrType ReadinessCheckArgs

func ReadinessCheckPtr(v *ReadinessCheckArgs) ReadinessCheckPtrInput {
	return (*readinessCheckPtrType)(v)
}

func (*readinessCheckPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReadinessCheck)(nil)).Elem()
}

func (i *readinessCheckPtrType) ToReadinessCheckPtrOutput() ReadinessCheckPtrOutput {
	return i.ToReadinessCheckPtrOutputWithContext(context.Background())
}

func (i *readinessCheckPtrType) ToReadinessCheckPtrOutputWithContext(ctx context.Context) ReadinessCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReadinessCheckPtrOutput)
}

// Readiness checking configuration for VM instances. Unhealthy instances are removed from traffic rotation.
type ReadinessCheckOutput struct{ *pulumi.OutputState }

func (ReadinessCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReadinessCheck)(nil)).Elem()
}

func (o ReadinessCheckOutput) ToReadinessCheckOutput() ReadinessCheckOutput {
	return o
}

func (o ReadinessCheckOutput) ToReadinessCheckOutputWithContext(ctx context.Context) ReadinessCheckOutput {
	return o
}

func (o ReadinessCheckOutput) ToReadinessCheckPtrOutput() ReadinessCheckPtrOutput {
	return o.ToReadinessCheckPtrOutputWithContext(context.Background())
}

func (o ReadinessCheckOutput) ToReadinessCheckPtrOutputWithContext(ctx context.Context) ReadinessCheckPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReadinessCheck) *ReadinessCheck {
		return &v
	}).(ReadinessCheckPtrOutput)
}

// A maximum time limit on application initialization, measured from moment the application successfully replies to a healthcheck until it is ready to serve traffic.
func (o ReadinessCheckOutput) AppStartTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReadinessCheck) *string { return v.AppStartTimeout }).(pulumi.StringPtrOutput)
}

// Interval between health checks.
func (o ReadinessCheckOutput) CheckInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReadinessCheck) *string { return v.CheckInterval }).(pulumi.StringPtrOutput)
}

// Number of consecutive failed checks required before removing traffic.
func (o ReadinessCheckOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ReadinessCheck) *int { return v.FailureThreshold }).(pulumi.IntPtrOutput)
}

// Host header to send when performing a HTTP Readiness check. Example: "myapp.appspot.com"
func (o ReadinessCheckOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReadinessCheck) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// The request path.
func (o ReadinessCheckOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReadinessCheck) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Number of consecutive successful checks required before receiving traffic.
func (o ReadinessCheckOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ReadinessCheck) *int { return v.SuccessThreshold }).(pulumi.IntPtrOutput)
}

// Time before the check is considered failed.
func (o ReadinessCheckOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReadinessCheck) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type ReadinessCheckPtrOutput struct{ *pulumi.OutputState }

func (ReadinessCheckPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReadinessCheck)(nil)).Elem()
}

func (o ReadinessCheckPtrOutput) ToReadinessCheckPtrOutput() ReadinessCheckPtrOutput {
	return o
}

func (o ReadinessCheckPtrOutput) ToReadinessCheckPtrOutputWithContext(ctx context.Context) ReadinessCheckPtrOutput {
	return o
}

func (o ReadinessCheckPtrOutput) Elem() ReadinessCheckOutput {
	return o.ApplyT(func(v *ReadinessCheck) ReadinessCheck {
		if v != nil {
			return *v
		}
		var ret ReadinessCheck
		return ret
	}).(ReadinessCheckOutput)
}

// A maximum time limit on application initialization, measured from moment the application successfully replies to a healthcheck until it is ready to serve traffic.
func (o ReadinessCheckPtrOutput) AppStartTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReadinessCheck) *string {
		if v == nil {
			return nil
		}
		return v.AppStartTimeout
	}).(pulumi.StringPtrOutput)
}

// Interval between health checks.
func (o ReadinessCheckPtrOutput) CheckInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReadinessCheck) *string {
		if v == nil {
			return nil
		}
		return v.CheckInterval
	}).(pulumi.StringPtrOutput)
}

// Number of consecutive failed checks required before removing traffic.
func (o ReadinessCheckPtrOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ReadinessCheck) *int {
		if v == nil {
			return nil
		}
		return v.FailureThreshold
	}).(pulumi.IntPtrOutput)
}

// Host header to send when performing a HTTP Readiness check. Example: "myapp.appspot.com"
func (o ReadinessCheckPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReadinessCheck) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// The request path.
func (o ReadinessCheckPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReadinessCheck) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Number of consecutive successful checks required before receiving traffic.
func (o ReadinessCheckPtrOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ReadinessCheck) *int {
		if v == nil {
			return nil
		}
		return v.SuccessThreshold
	}).(pulumi.IntPtrOutput)
}

// Time before the check is considered failed.
func (o ReadinessCheckPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReadinessCheck) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Readiness checking configuration for VM instances. Unhealthy instances are removed from traffic rotation.
type ReadinessCheckResponse struct {
	// A maximum time limit on application initialization, measured from moment the application successfully replies to a healthcheck until it is ready to serve traffic.
	AppStartTimeout string `pulumi:"appStartTimeout"`
	// Interval between health checks.
	CheckInterval string `pulumi:"checkInterval"`
	// Number of consecutive failed checks required before removing traffic.
	FailureThreshold int `pulumi:"failureThreshold"`
	// Host header to send when performing a HTTP Readiness check. Example: "myapp.appspot.com"
	Host string `pulumi:"host"`
	// The request path.
	Path string `pulumi:"path"`
	// Number of consecutive successful checks required before receiving traffic.
	SuccessThreshold int `pulumi:"successThreshold"`
	// Time before the check is considered failed.
	Timeout string `pulumi:"timeout"`
}

// Readiness checking configuration for VM instances. Unhealthy instances are removed from traffic rotation.
type ReadinessCheckResponseOutput struct{ *pulumi.OutputState }

func (ReadinessCheckResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReadinessCheckResponse)(nil)).Elem()
}

func (o ReadinessCheckResponseOutput) ToReadinessCheckResponseOutput() ReadinessCheckResponseOutput {
	return o
}

func (o ReadinessCheckResponseOutput) ToReadinessCheckResponseOutputWithContext(ctx context.Context) ReadinessCheckResponseOutput {
	return o
}

// A maximum time limit on application initialization, measured from moment the application successfully replies to a healthcheck until it is ready to serve traffic.
func (o ReadinessCheckResponseOutput) AppStartTimeout() pulumi.StringOutput {
	return o.ApplyT(func(v ReadinessCheckResponse) string { return v.AppStartTimeout }).(pulumi.StringOutput)
}

// Interval between health checks.
func (o ReadinessCheckResponseOutput) CheckInterval() pulumi.StringOutput {
	return o.ApplyT(func(v ReadinessCheckResponse) string { return v.CheckInterval }).(pulumi.StringOutput)
}

// Number of consecutive failed checks required before removing traffic.
func (o ReadinessCheckResponseOutput) FailureThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v ReadinessCheckResponse) int { return v.FailureThreshold }).(pulumi.IntOutput)
}

// Host header to send when performing a HTTP Readiness check. Example: "myapp.appspot.com"
func (o ReadinessCheckResponseOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v ReadinessCheckResponse) string { return v.Host }).(pulumi.StringOutput)
}

// The request path.
func (o ReadinessCheckResponseOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v ReadinessCheckResponse) string { return v.Path }).(pulumi.StringOutput)
}

// Number of consecutive successful checks required before receiving traffic.
func (o ReadinessCheckResponseOutput) SuccessThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v ReadinessCheckResponse) int { return v.SuccessThreshold }).(pulumi.IntOutput)
}

// Time before the check is considered failed.
func (o ReadinessCheckResponseOutput) Timeout() pulumi.StringOutput {
	return o.ApplyT(func(v ReadinessCheckResponse) string { return v.Timeout }).(pulumi.StringOutput)
}

// Target scaling by request utilization. Only applicable in the App Engine flexible environment.
type RequestUtilization struct {
	// Target number of concurrent requests.
	TargetConcurrentRequests *int `pulumi:"targetConcurrentRequests"`
	// Target requests per second.
	TargetRequestCountPerSecond *int `pulumi:"targetRequestCountPerSecond"`
}

// RequestUtilizationInput is an input type that accepts RequestUtilizationArgs and RequestUtilizationOutput values.
// You can construct a concrete instance of `RequestUtilizationInput` via:
//
//	RequestUtilizationArgs{...}
type RequestUtilizationInput interface {
	pulumi.Input

	ToRequestUtilizationOutput() RequestUtilizationOutput
	ToRequestUtilizationOutputWithContext(context.Context) RequestUtilizationOutput
}

// Target scaling by request utilization. Only applicable in the App Engine flexible environment.
type RequestUtilizationArgs struct {
	// Target number of concurrent requests.
	TargetConcurrentRequests pulumi.IntPtrInput `pulumi:"targetConcurrentRequests"`
	// Target requests per second.
	TargetRequestCountPerSecond pulumi.IntPtrInput `pulumi:"targetRequestCountPerSecond"`
}

func (RequestUtilizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RequestUtilization)(nil)).Elem()
}

func (i RequestUtilizationArgs) ToRequestUtilizationOutput() RequestUtilizationOutput {
	return i.ToRequestUtilizationOutputWithContext(context.Background())
}

func (i RequestUtilizationArgs) ToRequestUtilizationOutputWithContext(ctx context.Context) RequestUtilizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RequestUtilizationOutput)
}

func (i RequestUtilizationArgs) ToRequestUtilizationPtrOutput() RequestUtilizationPtrOutput {
	return i.ToRequestUtilizationPtrOutputWithContext(context.Background())
}

func (i RequestUtilizationArgs) ToRequestUtilizationPtrOutputWithContext(ctx context.Context) RequestUtilizationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RequestUtilizationOutput).ToRequestUtilizationPtrOutputWithContext(ctx)
}

// RequestUtilizationPtrInput is an input type that accepts RequestUtilizationArgs, RequestUtilizationPtr and RequestUtilizationPtrOutput values.
// You can construct a concrete instance of `RequestUtilizationPtrInput` via:
//
//	        RequestUtilizationArgs{...}
//
//	or:
//
//	        nil
type RequestUtilizationPtrInput interface {
	pulumi.Input

	ToRequestUtilizationPtrOutput() RequestUtilizationPtrOutput
	ToRequestUtilizationPtrOutputWithContext(context.Context) RequestUtilizationPtrOutput
}

type requestUtilizationPtrType RequestUtilizationArgs

func RequestUtilizationPtr(v *RequestUtilizationArgs) RequestUtilizationPtrInput {
	return (*requestUtilizationPtrType)(v)
}

func (*requestUtilizationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RequestUtilization)(nil)).Elem()
}

func (i *requestUtilizationPtrType) ToRequestUtilizationPtrOutput() RequestUtilizationPtrOutput {
	return i.ToRequestUtilizationPtrOutputWithContext(context.Background())
}

func (i *requestUtilizationPtrType) ToRequestUtilizationPtrOutputWithContext(ctx context.Context) RequestUtilizationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RequestUtilizationPtrOutput)
}

// Target scaling by request utilization. Only applicable in the App Engine flexible environment.
type RequestUtilizationOutput struct{ *pulumi.OutputState }

func (RequestUtilizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RequestUtilization)(nil)).Elem()
}

func (o RequestUtilizationOutput) ToRequestUtilizationOutput() RequestUtilizationOutput {
	return o
}

func (o RequestUtilizationOutput) ToRequestUtilizationOutputWithContext(ctx context.Context) RequestUtilizationOutput {
	return o
}

func (o RequestUtilizationOutput) ToRequestUtilizationPtrOutput() RequestUtilizationPtrOutput {
	return o.ToRequestUtilizationPtrOutputWithContext(context.Background())
}

func (o RequestUtilizationOutput) ToRequestUtilizationPtrOutputWithContext(ctx context.Context) RequestUtilizationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RequestUtilization) *RequestUtilization {
		return &v
	}).(RequestUtilizationPtrOutput)
}

// Target number of concurrent requests.
func (o RequestUtilizationOutput) TargetConcurrentRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RequestUtilization) *int { return v.TargetConcurrentRequests }).(pulumi.IntPtrOutput)
}

// Target requests per second.
func (o RequestUtilizationOutput) TargetRequestCountPerSecond() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RequestUtilization) *int { return v.TargetRequestCountPerSecond }).(pulumi.IntPtrOutput)
}

type RequestUtilizationPtrOutput struct{ *pulumi.OutputState }

func (RequestUtilizationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RequestUtilization)(nil)).Elem()
}

func (o RequestUtilizationPtrOutput) ToRequestUtilizationPtrOutput() RequestUtilizationPtrOutput {
	return o
}

func (o RequestUtilizationPtrOutput) ToRequestUtilizationPtrOutputWithContext(ctx context.Context) RequestUtilizationPtrOutput {
	return o
}

func (o RequestUtilizationPtrOutput) Elem() RequestUtilizationOutput {
	return o.ApplyT(func(v *RequestUtilization) RequestUtilization {
		if v != nil {
			return *v
		}
		var ret RequestUtilization
		return ret
	}).(RequestUtilizationOutput)
}

// Target number of concurrent requests.
func (o RequestUtilizationPtrOutput) TargetConcurrentRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RequestUtilization) *int {
		if v == nil {
			return nil
		}
		return v.TargetConcurrentRequests
	}).(pulumi.IntPtrOutput)
}

// Target requests per second.
func (o RequestUtilizationPtrOutput) TargetRequestCountPerSecond() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RequestUtilization) *int {
		if v == nil {
			return nil
		}
		return v.TargetRequestCountPerSecond
	}).(pulumi.IntPtrOutput)
}

// Target scaling by request utilization. Only applicable in the App Engine flexible environment.
type RequestUtilizationResponse struct {
	// Target number of concurrent requests.
	TargetConcurrentRequests int `pulumi:"targetConcurrentRequests"`
	// Target requests per second.
	TargetRequestCountPerSecond int `pulumi:"targetRequestCountPerSecond"`
}

// Target scaling by request utilization. Only applicable in the App Engine flexible environment.
type RequestUtilizationResponseOutput struct{ *pulumi.OutputState }

func (RequestUtilizationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RequestUtilizationResponse)(nil)).Elem()
}

func (o RequestUtilizationResponseOutput) ToRequestUtilizationResponseOutput() RequestUtilizationResponseOutput {
	return o
}

func (o RequestUtilizationResponseOutput) ToRequestUtilizationResponseOutputWithContext(ctx context.Context) RequestUtilizationResponseOutput {
	return o
}

// Target number of concurrent requests.
func (o RequestUtilizationResponseOutput) TargetConcurrentRequests() pulumi.IntOutput {
	return o.ApplyT(func(v RequestUtilizationResponse) int { return v.TargetConcurrentRequests }).(pulumi.IntOutput)
}

// Target requests per second.
func (o RequestUtilizationResponseOutput) TargetRequestCountPerSecond() pulumi.IntOutput {
	return o.ApplyT(func(v RequestUtilizationResponse) int { return v.TargetRequestCountPerSecond }).(pulumi.IntOutput)
}

// A DNS resource record.
type ResourceRecordResponse struct {
	// Relative name of the object affected by this record. Only applicable for CNAME records. Example: 'www'.
	Name string `pulumi:"name"`
	// Data for this record. Values vary by record type, as defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1).
	Rrdata string `pulumi:"rrdata"`
	// Resource record type. Example: AAAA.
	Type string `pulumi:"type"`
}

// A DNS resource record.
type ResourceRecordResponseOutput struct{ *pulumi.OutputState }

func (ResourceRecordResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRecordResponse)(nil)).Elem()
}

func (o ResourceRecordResponseOutput) ToResourceRecordResponseOutput() ResourceRecordResponseOutput {
	return o
}

func (o ResourceRecordResponseOutput) ToResourceRecordResponseOutputWithContext(ctx context.Context) ResourceRecordResponseOutput {
	return o
}

// Relative name of the object affected by this record. Only applicable for CNAME records. Example: 'www'.
func (o ResourceRecordResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceRecordResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Data for this record. Values vary by record type, as defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1).
func (o ResourceRecordResponseOutput) Rrdata() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceRecordResponse) string { return v.Rrdata }).(pulumi.StringOutput)
}

// Resource record type. Example: AAAA.
func (o ResourceRecordResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceRecordResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ResourceRecordResponseArrayOutput struct{ *pulumi.OutputState }

func (ResourceRecordResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceRecordResponse)(nil)).Elem()
}

func (o ResourceRecordResponseArrayOutput) ToResourceRecordResponseArrayOutput() ResourceRecordResponseArrayOutput {
	return o
}

func (o ResourceRecordResponseArrayOutput) ToResourceRecordResponseArrayOutputWithContext(ctx context.Context) ResourceRecordResponseArrayOutput {
	return o
}

func (o ResourceRecordResponseArrayOutput) Index(i pulumi.IntInput) ResourceRecordResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceRecordResponse {
		return vs[0].([]ResourceRecordResponse)[vs[1].(int)]
	}).(ResourceRecordResponseOutput)
}

// Machine resources for a version.
type Resources struct {
	// Number of CPU cores needed.
	Cpu *float64 `pulumi:"cpu"`
	// Disk size (GB) needed.
	DiskGb *float64 `pulumi:"diskGb"`
	// The name of the encryption key that is stored in Google Cloud KMS. Only should be used by Cloud Composer to encrypt the vm disk
	KmsKeyReference *string `pulumi:"kmsKeyReference"`
	// Memory (GB) needed.
	MemoryGb *float64 `pulumi:"memoryGb"`
	// User specified volumes.
	Volumes []Volume `pulumi:"volumes"`
}

// ResourcesInput is an input type that accepts ResourcesArgs and ResourcesOutput values.
// You can construct a concrete instance of `ResourcesInput` via:
//
//	ResourcesArgs{...}
type ResourcesInput interface {
	pulumi.Input

	ToResourcesOutput() ResourcesOutput
	ToResourcesOutputWithContext(context.Context) ResourcesOutput
}

// Machine resources for a version.
type ResourcesArgs struct {
	// Number of CPU cores needed.
	Cpu pulumi.Float64PtrInput `pulumi:"cpu"`
	// Disk size (GB) needed.
	DiskGb pulumi.Float64PtrInput `pulumi:"diskGb"`
	// The name of the encryption key that is stored in Google Cloud KMS. Only should be used by Cloud Composer to encrypt the vm disk
	KmsKeyReference pulumi.StringPtrInput `pulumi:"kmsKeyReference"`
	// Memory (GB) needed.
	MemoryGb pulumi.Float64PtrInput `pulumi:"memoryGb"`
	// User specified volumes.
	Volumes VolumeArrayInput `pulumi:"volumes"`
}

func (ResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Resources)(nil)).Elem()
}

func (i ResourcesArgs) ToResourcesOutput() ResourcesOutput {
	return i.ToResourcesOutputWithContext(context.Background())
}

func (i ResourcesArgs) ToResourcesOutputWithContext(ctx context.Context) ResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcesOutput)
}

func (i ResourcesArgs) ToResourcesPtrOutput() ResourcesPtrOutput {
	return i.ToResourcesPtrOutputWithContext(context.Background())
}

func (i ResourcesArgs) ToResourcesPtrOutputWithContext(ctx context.Context) ResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcesOutput).ToResourcesPtrOutputWithContext(ctx)
}

// ResourcesPtrInput is an input type that accepts ResourcesArgs, ResourcesPtr and ResourcesPtrOutput values.
// You can construct a concrete instance of `ResourcesPtrInput` via:
//
//	        ResourcesArgs{...}
//
//	or:
//
//	        nil
type ResourcesPtrInput interface {
	pulumi.Input

	ToResourcesPtrOutput() ResourcesPtrOutput
	ToResourcesPtrOutputWithContext(context.Context) ResourcesPtrOutput
}

type resourcesPtrType ResourcesArgs

func ResourcesPtr(v *ResourcesArgs) ResourcesPtrInput {
	return (*resourcesPtrType)(v)
}

func (*resourcesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Resources)(nil)).Elem()
}

func (i *resourcesPtrType) ToResourcesPtrOutput() ResourcesPtrOutput {
	return i.ToResourcesPtrOutputWithContext(context.Background())
}

func (i *resourcesPtrType) ToResourcesPtrOutputWithContext(ctx context.Context) ResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcesPtrOutput)
}

// Machine resources for a version.
type ResourcesOutput struct{ *pulumi.OutputState }

func (ResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Resources)(nil)).Elem()
}

func (o ResourcesOutput) ToResourcesOutput() ResourcesOutput {
	return o
}

func (o ResourcesOutput) ToResourcesOutputWithContext(ctx context.Context) ResourcesOutput {
	return o
}

func (o ResourcesOutput) ToResourcesPtrOutput() ResourcesPtrOutput {
	return o.ToResourcesPtrOutputWithContext(context.Background())
}

func (o ResourcesOutput) ToResourcesPtrOutputWithContext(ctx context.Context) ResourcesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Resources) *Resources {
		return &v
	}).(ResourcesPtrOutput)
}

// Number of CPU cores needed.
func (o ResourcesOutput) Cpu() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Resources) *float64 { return v.Cpu }).(pulumi.Float64PtrOutput)
}

// Disk size (GB) needed.
func (o ResourcesOutput) DiskGb() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Resources) *float64 { return v.DiskGb }).(pulumi.Float64PtrOutput)
}

// The name of the encryption key that is stored in Google Cloud KMS. Only should be used by Cloud Composer to encrypt the vm disk
func (o ResourcesOutput) KmsKeyReference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Resources) *string { return v.KmsKeyReference }).(pulumi.StringPtrOutput)
}

// Memory (GB) needed.
func (o ResourcesOutput) MemoryGb() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Resources) *float64 { return v.MemoryGb }).(pulumi.Float64PtrOutput)
}

// User specified volumes.
func (o ResourcesOutput) Volumes() VolumeArrayOutput {
	return o.ApplyT(func(v Resources) []Volume { return v.Volumes }).(VolumeArrayOutput)
}

type ResourcesPtrOutput struct{ *pulumi.OutputState }

func (ResourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Resources)(nil)).Elem()
}

func (o ResourcesPtrOutput) ToResourcesPtrOutput() ResourcesPtrOutput {
	return o
}

func (o ResourcesPtrOutput) ToResourcesPtrOutputWithContext(ctx context.Context) ResourcesPtrOutput {
	return o
}

func (o ResourcesPtrOutput) Elem() ResourcesOutput {
	return o.ApplyT(func(v *Resources) Resources {
		if v != nil {
			return *v
		}
		var ret Resources
		return ret
	}).(ResourcesOutput)
}

// Number of CPU cores needed.
func (o ResourcesPtrOutput) Cpu() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Resources) *float64 {
		if v == nil {
			return nil
		}
		return v.Cpu
	}).(pulumi.Float64PtrOutput)
}

// Disk size (GB) needed.
func (o ResourcesPtrOutput) DiskGb() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Resources) *float64 {
		if v == nil {
			return nil
		}
		return v.DiskGb
	}).(pulumi.Float64PtrOutput)
}

// The name of the encryption key that is stored in Google Cloud KMS. Only should be used by Cloud Composer to encrypt the vm disk
func (o ResourcesPtrOutput) KmsKeyReference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Resources) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyReference
	}).(pulumi.StringPtrOutput)
}

// Memory (GB) needed.
func (o ResourcesPtrOutput) MemoryGb() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Resources) *float64 {
		if v == nil {
			return nil
		}
		return v.MemoryGb
	}).(pulumi.Float64PtrOutput)
}

// User specified volumes.
func (o ResourcesPtrOutput) Volumes() VolumeArrayOutput {
	return o.ApplyT(func(v *Resources) []Volume {
		if v == nil {
			return nil
		}
		return v.Volumes
	}).(VolumeArrayOutput)
}

// Machine resources for a version.
type ResourcesResponse struct {
	// Number of CPU cores needed.
	Cpu float64 `pulumi:"cpu"`
	// Disk size (GB) needed.
	DiskGb float64 `pulumi:"diskGb"`
	// The name of the encryption key that is stored in Google Cloud KMS. Only should be used by Cloud Composer to encrypt the vm disk
	KmsKeyReference string `pulumi:"kmsKeyReference"`
	// Memory (GB) needed.
	MemoryGb float64 `pulumi:"memoryGb"`
	// User specified volumes.
	Volumes []VolumeResponse `pulumi:"volumes"`
}

// Machine resources for a version.
type ResourcesResponseOutput struct{ *pulumi.OutputState }

func (ResourcesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcesResponse)(nil)).Elem()
}

func (o ResourcesResponseOutput) ToResourcesResponseOutput() ResourcesResponseOutput {
	return o
}

func (o ResourcesResponseOutput) ToResourcesResponseOutputWithContext(ctx context.Context) ResourcesResponseOutput {
	return o
}

// Number of CPU cores needed.
func (o ResourcesResponseOutput) Cpu() pulumi.Float64Output {
	return o.ApplyT(func(v ResourcesResponse) float64 { return v.Cpu }).(pulumi.Float64Output)
}

// Disk size (GB) needed.
func (o ResourcesResponseOutput) DiskGb() pulumi.Float64Output {
	return o.ApplyT(func(v ResourcesResponse) float64 { return v.DiskGb }).(pulumi.Float64Output)
}

// The name of the encryption key that is stored in Google Cloud KMS. Only should be used by Cloud Composer to encrypt the vm disk
func (o ResourcesResponseOutput) KmsKeyReference() pulumi.StringOutput {
	return o.ApplyT(func(v ResourcesResponse) string { return v.KmsKeyReference }).(pulumi.StringOutput)
}

// Memory (GB) needed.
func (o ResourcesResponseOutput) MemoryGb() pulumi.Float64Output {
	return o.ApplyT(func(v ResourcesResponse) float64 { return v.MemoryGb }).(pulumi.Float64Output)
}

// User specified volumes.
func (o ResourcesResponseOutput) Volumes() VolumeResponseArrayOutput {
	return o.ApplyT(func(v ResourcesResponse) []VolumeResponse { return v.Volumes }).(VolumeResponseArrayOutput)
}

// Executes a script to handle the request that matches the URL pattern.
type ScriptHandler struct {
	// Path to the script from the application root directory.
	ScriptPath *string `pulumi:"scriptPath"`
}

// ScriptHandlerInput is an input type that accepts ScriptHandlerArgs and ScriptHandlerOutput values.
// You can construct a concrete instance of `ScriptHandlerInput` via:
//
//	ScriptHandlerArgs{...}
type ScriptHandlerInput interface {
	pulumi.Input

	ToScriptHandlerOutput() ScriptHandlerOutput
	ToScriptHandlerOutputWithContext(context.Context) ScriptHandlerOutput
}

// Executes a script to handle the request that matches the URL pattern.
type ScriptHandlerArgs struct {
	// Path to the script from the application root directory.
	ScriptPath pulumi.StringPtrInput `pulumi:"scriptPath"`
}

func (ScriptHandlerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScriptHandler)(nil)).Elem()
}

func (i ScriptHandlerArgs) ToScriptHandlerOutput() ScriptHandlerOutput {
	return i.ToScriptHandlerOutputWithContext(context.Background())
}

func (i ScriptHandlerArgs) ToScriptHandlerOutputWithContext(ctx context.Context) ScriptHandlerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScriptHandlerOutput)
}

func (i ScriptHandlerArgs) ToScriptHandlerPtrOutput() ScriptHandlerPtrOutput {
	return i.ToScriptHandlerPtrOutputWithContext(context.Background())
}

func (i ScriptHandlerArgs) ToScriptHandlerPtrOutputWithContext(ctx context.Context) ScriptHandlerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScriptHandlerOutput).ToScriptHandlerPtrOutputWithContext(ctx)
}

// ScriptHandlerPtrInput is an input type that accepts ScriptHandlerArgs, ScriptHandlerPtr and ScriptHandlerPtrOutput values.
// You can construct a concrete instance of `ScriptHandlerPtrInput` via:
//
//	        ScriptHandlerArgs{...}
//
//	or:
//
//	        nil
type ScriptHandlerPtrInput interface {
	pulumi.Input

	ToScriptHandlerPtrOutput() ScriptHandlerPtrOutput
	ToScriptHandlerPtrOutputWithContext(context.Context) ScriptHandlerPtrOutput
}

type scriptHandlerPtrType ScriptHandlerArgs

func ScriptHandlerPtr(v *ScriptHandlerArgs) ScriptHandlerPtrInput {
	return (*scriptHandlerPtrType)(v)
}

func (*scriptHandlerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScriptHandler)(nil)).Elem()
}

func (i *scriptHandlerPtrType) ToScriptHandlerPtrOutput() ScriptHandlerPtrOutput {
	return i.ToScriptHandlerPtrOutputWithContext(context.Background())
}

func (i *scriptHandlerPtrType) ToScriptHandlerPtrOutputWithContext(ctx context.Context) ScriptHandlerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScriptHandlerPtrOutput)
}

// Executes a script to handle the request that matches the URL pattern.
type ScriptHandlerOutput struct{ *pulumi.OutputState }

func (ScriptHandlerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScriptHandler)(nil)).Elem()
}

func (o ScriptHandlerOutput) ToScriptHandlerOutput() ScriptHandlerOutput {
	return o
}

func (o ScriptHandlerOutput) ToScriptHandlerOutputWithContext(ctx context.Context) ScriptHandlerOutput {
	return o
}

func (o ScriptHandlerOutput) ToScriptHandlerPtrOutput() ScriptHandlerPtrOutput {
	return o.ToScriptHandlerPtrOutputWithContext(context.Background())
}

func (o ScriptHandlerOutput) ToScriptHandlerPtrOutputWithContext(ctx context.Context) ScriptHandlerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScriptHandler) *ScriptHandler {
		return &v
	}).(ScriptHandlerPtrOutput)
}

// Path to the script from the application root directory.
func (o ScriptHandlerOutput) ScriptPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScriptHandler) *string { return v.ScriptPath }).(pulumi.StringPtrOutput)
}

type ScriptHandlerPtrOutput struct{ *pulumi.OutputState }

func (ScriptHandlerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScriptHandler)(nil)).Elem()
}

func (o ScriptHandlerPtrOutput) ToScriptHandlerPtrOutput() ScriptHandlerPtrOutput {
	return o
}

func (o ScriptHandlerPtrOutput) ToScriptHandlerPtrOutputWithContext(ctx context.Context) ScriptHandlerPtrOutput {
	return o
}

func (o ScriptHandlerPtrOutput) Elem() ScriptHandlerOutput {
	return o.ApplyT(func(v *ScriptHandler) ScriptHandler {
		if v != nil {
			return *v
		}
		var ret ScriptHandler
		return ret
	}).(ScriptHandlerOutput)
}

// Path to the script from the application root directory.
func (o ScriptHandlerPtrOutput) ScriptPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScriptHandler) *string {
		if v == nil {
			return nil
		}
		return v.ScriptPath
	}).(pulumi.StringPtrOutput)
}

// Executes a script to handle the request that matches the URL pattern.
type ScriptHandlerResponse struct {
	// Path to the script from the application root directory.
	ScriptPath string `pulumi:"scriptPath"`
}

// Executes a script to handle the request that matches the URL pattern.
type ScriptHandlerResponseOutput struct{ *pulumi.OutputState }

func (ScriptHandlerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScriptHandlerResponse)(nil)).Elem()
}

func (o ScriptHandlerResponseOutput) ToScriptHandlerResponseOutput() ScriptHandlerResponseOutput {
	return o
}

func (o ScriptHandlerResponseOutput) ToScriptHandlerResponseOutputWithContext(ctx context.Context) ScriptHandlerResponseOutput {
	return o
}

// Path to the script from the application root directory.
func (o ScriptHandlerResponseOutput) ScriptPath() pulumi.StringOutput {
	return o.ApplyT(func(v ScriptHandlerResponse) string { return v.ScriptPath }).(pulumi.StringOutput)
}

// SSL configuration for a DomainMapping resource.
type SslSettings struct {
	// ID of the AuthorizedCertificate resource configuring SSL for the application. Clearing this field will remove SSL support.By default, a managed certificate is automatically created for every domain mapping. To omit SSL support or to configure SSL manually, specify SslManagementType.MANUAL on a CREATE or UPDATE request. You must be authorized to administer the AuthorizedCertificate resource to manually map it to a DomainMapping resource. Example: 12345.
	CertificateId *string `pulumi:"certificateId"`
	// SSL management type for this domain. If AUTOMATIC, a managed certificate is automatically provisioned. If MANUAL, certificate_id must be manually specified in order to configure SSL for this domain.
	SslManagementType *SslSettingsSslManagementType `pulumi:"sslManagementType"`
}

// SslSettingsInput is an input type that accepts SslSettingsArgs and SslSettingsOutput values.
// You can construct a concrete instance of `SslSettingsInput` via:
//
//	SslSettingsArgs{...}
type SslSettingsInput interface {
	pulumi.Input

	ToSslSettingsOutput() SslSettingsOutput
	ToSslSettingsOutputWithContext(context.Context) SslSettingsOutput
}

// SSL configuration for a DomainMapping resource.
type SslSettingsArgs struct {
	// ID of the AuthorizedCertificate resource configuring SSL for the application. Clearing this field will remove SSL support.By default, a managed certificate is automatically created for every domain mapping. To omit SSL support or to configure SSL manually, specify SslManagementType.MANUAL on a CREATE or UPDATE request. You must be authorized to administer the AuthorizedCertificate resource to manually map it to a DomainMapping resource. Example: 12345.
	CertificateId pulumi.StringPtrInput `pulumi:"certificateId"`
	// SSL management type for this domain. If AUTOMATIC, a managed certificate is automatically provisioned. If MANUAL, certificate_id must be manually specified in order to configure SSL for this domain.
	SslManagementType SslSettingsSslManagementTypePtrInput `pulumi:"sslManagementType"`
}

func (SslSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SslSettings)(nil)).Elem()
}

func (i SslSettingsArgs) ToSslSettingsOutput() SslSettingsOutput {
	return i.ToSslSettingsOutputWithContext(context.Background())
}

func (i SslSettingsArgs) ToSslSettingsOutputWithContext(ctx context.Context) SslSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslSettingsOutput)
}

func (i SslSettingsArgs) ToSslSettingsPtrOutput() SslSettingsPtrOutput {
	return i.ToSslSettingsPtrOutputWithContext(context.Background())
}

func (i SslSettingsArgs) ToSslSettingsPtrOutputWithContext(ctx context.Context) SslSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslSettingsOutput).ToSslSettingsPtrOutputWithContext(ctx)
}

// SslSettingsPtrInput is an input type that accepts SslSettingsArgs, SslSettingsPtr and SslSettingsPtrOutput values.
// You can construct a concrete instance of `SslSettingsPtrInput` via:
//
//	        SslSettingsArgs{...}
//
//	or:
//
//	        nil
type SslSettingsPtrInput interface {
	pulumi.Input

	ToSslSettingsPtrOutput() SslSettingsPtrOutput
	ToSslSettingsPtrOutputWithContext(context.Context) SslSettingsPtrOutput
}

type sslSettingsPtrType SslSettingsArgs

func SslSettingsPtr(v *SslSettingsArgs) SslSettingsPtrInput {
	return (*sslSettingsPtrType)(v)
}

func (*sslSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SslSettings)(nil)).Elem()
}

func (i *sslSettingsPtrType) ToSslSettingsPtrOutput() SslSettingsPtrOutput {
	return i.ToSslSettingsPtrOutputWithContext(context.Background())
}

func (i *sslSettingsPtrType) ToSslSettingsPtrOutputWithContext(ctx context.Context) SslSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslSettingsPtrOutput)
}

// SSL configuration for a DomainMapping resource.
type SslSettingsOutput struct{ *pulumi.OutputState }

func (SslSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SslSettings)(nil)).Elem()
}

func (o SslSettingsOutput) ToSslSettingsOutput() SslSettingsOutput {
	return o
}

func (o SslSettingsOutput) ToSslSettingsOutputWithContext(ctx context.Context) SslSettingsOutput {
	return o
}

func (o SslSettingsOutput) ToSslSettingsPtrOutput() SslSettingsPtrOutput {
	return o.ToSslSettingsPtrOutputWithContext(context.Background())
}

func (o SslSettingsOutput) ToSslSettingsPtrOutputWithContext(ctx context.Context) SslSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SslSettings) *SslSettings {
		return &v
	}).(SslSettingsPtrOutput)
}

// ID of the AuthorizedCertificate resource configuring SSL for the application. Clearing this field will remove SSL support.By default, a managed certificate is automatically created for every domain mapping. To omit SSL support or to configure SSL manually, specify SslManagementType.MANUAL on a CREATE or UPDATE request. You must be authorized to administer the AuthorizedCertificate resource to manually map it to a DomainMapping resource. Example: 12345.
func (o SslSettingsOutput) CertificateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SslSettings) *string { return v.CertificateId }).(pulumi.StringPtrOutput)
}

// SSL management type for this domain. If AUTOMATIC, a managed certificate is automatically provisioned. If MANUAL, certificate_id must be manually specified in order to configure SSL for this domain.
func (o SslSettingsOutput) SslManagementType() SslSettingsSslManagementTypePtrOutput {
	return o.ApplyT(func(v SslSettings) *SslSettingsSslManagementType { return v.SslManagementType }).(SslSettingsSslManagementTypePtrOutput)
}

type SslSettingsPtrOutput struct{ *pulumi.OutputState }

func (SslSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SslSettings)(nil)).Elem()
}

func (o SslSettingsPtrOutput) ToSslSettingsPtrOutput() SslSettingsPtrOutput {
	return o
}

func (o SslSettingsPtrOutput) ToSslSettingsPtrOutputWithContext(ctx context.Context) SslSettingsPtrOutput {
	return o
}

func (o SslSettingsPtrOutput) Elem() SslSettingsOutput {
	return o.ApplyT(func(v *SslSettings) SslSettings {
		if v != nil {
			return *v
		}
		var ret SslSettings
		return ret
	}).(SslSettingsOutput)
}

// ID of the AuthorizedCertificate resource configuring SSL for the application. Clearing this field will remove SSL support.By default, a managed certificate is automatically created for every domain mapping. To omit SSL support or to configure SSL manually, specify SslManagementType.MANUAL on a CREATE or UPDATE request. You must be authorized to administer the AuthorizedCertificate resource to manually map it to a DomainMapping resource. Example: 12345.
func (o SslSettingsPtrOutput) CertificateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SslSettings) *string {
		if v == nil {
			return nil
		}
		return v.CertificateId
	}).(pulumi.StringPtrOutput)
}

// SSL management type for this domain. If AUTOMATIC, a managed certificate is automatically provisioned. If MANUAL, certificate_id must be manually specified in order to configure SSL for this domain.
func (o SslSettingsPtrOutput) SslManagementType() SslSettingsSslManagementTypePtrOutput {
	return o.ApplyT(func(v *SslSettings) *SslSettingsSslManagementType {
		if v == nil {
			return nil
		}
		return v.SslManagementType
	}).(SslSettingsSslManagementTypePtrOutput)
}

// SSL configuration for a DomainMapping resource.
type SslSettingsResponse struct {
	// ID of the AuthorizedCertificate resource configuring SSL for the application. Clearing this field will remove SSL support.By default, a managed certificate is automatically created for every domain mapping. To omit SSL support or to configure SSL manually, specify SslManagementType.MANUAL on a CREATE or UPDATE request. You must be authorized to administer the AuthorizedCertificate resource to manually map it to a DomainMapping resource. Example: 12345.
	CertificateId string `pulumi:"certificateId"`
	// ID of the managed AuthorizedCertificate resource currently being provisioned, if applicable. Until the new managed certificate has been successfully provisioned, the previous SSL state will be preserved. Once the provisioning process completes, the certificate_id field will reflect the new managed certificate and this field will be left empty. To remove SSL support while there is still a pending managed certificate, clear the certificate_id field with an UpdateDomainMappingRequest.
	PendingManagedCertificateId string `pulumi:"pendingManagedCertificateId"`
	// SSL management type for this domain. If AUTOMATIC, a managed certificate is automatically provisioned. If MANUAL, certificate_id must be manually specified in order to configure SSL for this domain.
	SslManagementType string `pulumi:"sslManagementType"`
}

// SSL configuration for a DomainMapping resource.
type SslSettingsResponseOutput struct{ *pulumi.OutputState }

func (SslSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SslSettingsResponse)(nil)).Elem()
}

func (o SslSettingsResponseOutput) ToSslSettingsResponseOutput() SslSettingsResponseOutput {
	return o
}

func (o SslSettingsResponseOutput) ToSslSettingsResponseOutputWithContext(ctx context.Context) SslSettingsResponseOutput {
	return o
}

// ID of the AuthorizedCertificate resource configuring SSL for the application. Clearing this field will remove SSL support.By default, a managed certificate is automatically created for every domain mapping. To omit SSL support or to configure SSL manually, specify SslManagementType.MANUAL on a CREATE or UPDATE request. You must be authorized to administer the AuthorizedCertificate resource to manually map it to a DomainMapping resource. Example: 12345.
func (o SslSettingsResponseOutput) CertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v SslSettingsResponse) string { return v.CertificateId }).(pulumi.StringOutput)
}

// ID of the managed AuthorizedCertificate resource currently being provisioned, if applicable. Until the new managed certificate has been successfully provisioned, the previous SSL state will be preserved. Once the provisioning process completes, the certificate_id field will reflect the new managed certificate and this field will be left empty. To remove SSL support while there is still a pending managed certificate, clear the certificate_id field with an UpdateDomainMappingRequest.
func (o SslSettingsResponseOutput) PendingManagedCertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v SslSettingsResponse) string { return v.PendingManagedCertificateId }).(pulumi.StringOutput)
}

// SSL management type for this domain. If AUTOMATIC, a managed certificate is automatically provisioned. If MANUAL, certificate_id must be manually specified in order to configure SSL for this domain.
func (o SslSettingsResponseOutput) SslManagementType() pulumi.StringOutput {
	return o.ApplyT(func(v SslSettingsResponse) string { return v.SslManagementType }).(pulumi.StringOutput)
}

// Scheduler settings for standard environment.
type StandardSchedulerSettings struct {
	// Maximum number of instances to run for this version. Set to zero to disable max_instances configuration.
	MaxInstances *int `pulumi:"maxInstances"`
	// Minimum number of instances to run for this version. Set to zero to disable min_instances configuration.
	MinInstances *int `pulumi:"minInstances"`
	// Target CPU utilization ratio to maintain when scaling.
	TargetCpuUtilization *float64 `pulumi:"targetCpuUtilization"`
	// Target throughput utilization ratio to maintain when scaling
	TargetThroughputUtilization *float64 `pulumi:"targetThroughputUtilization"`
}

// StandardSchedulerSettingsInput is an input type that accepts StandardSchedulerSettingsArgs and StandardSchedulerSettingsOutput values.
// You can construct a concrete instance of `StandardSchedulerSettingsInput` via:
//
//	StandardSchedulerSettingsArgs{...}
type StandardSchedulerSettingsInput interface {
	pulumi.Input

	ToStandardSchedulerSettingsOutput() StandardSchedulerSettingsOutput
	ToStandardSchedulerSettingsOutputWithContext(context.Context) StandardSchedulerSettingsOutput
}

// Scheduler settings for standard environment.
type StandardSchedulerSettingsArgs struct {
	// Maximum number of instances to run for this version. Set to zero to disable max_instances configuration.
	MaxInstances pulumi.IntPtrInput `pulumi:"maxInstances"`
	// Minimum number of instances to run for this version. Set to zero to disable min_instances configuration.
	MinInstances pulumi.IntPtrInput `pulumi:"minInstances"`
	// Target CPU utilization ratio to maintain when scaling.
	TargetCpuUtilization pulumi.Float64PtrInput `pulumi:"targetCpuUtilization"`
	// Target throughput utilization ratio to maintain when scaling
	TargetThroughputUtilization pulumi.Float64PtrInput `pulumi:"targetThroughputUtilization"`
}

func (StandardSchedulerSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StandardSchedulerSettings)(nil)).Elem()
}

func (i StandardSchedulerSettingsArgs) ToStandardSchedulerSettingsOutput() StandardSchedulerSettingsOutput {
	return i.ToStandardSchedulerSettingsOutputWithContext(context.Background())
}

func (i StandardSchedulerSettingsArgs) ToStandardSchedulerSettingsOutputWithContext(ctx context.Context) StandardSchedulerSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardSchedulerSettingsOutput)
}

func (i StandardSchedulerSettingsArgs) ToStandardSchedulerSettingsPtrOutput() StandardSchedulerSettingsPtrOutput {
	return i.ToStandardSchedulerSettingsPtrOutputWithContext(context.Background())
}

func (i StandardSchedulerSettingsArgs) ToStandardSchedulerSettingsPtrOutputWithContext(ctx context.Context) StandardSchedulerSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardSchedulerSettingsOutput).ToStandardSchedulerSettingsPtrOutputWithContext(ctx)
}

// StandardSchedulerSettingsPtrInput is an input type that accepts StandardSchedulerSettingsArgs, StandardSchedulerSettingsPtr and StandardSchedulerSettingsPtrOutput values.
// You can construct a concrete instance of `StandardSchedulerSettingsPtrInput` via:
//
//	        StandardSchedulerSettingsArgs{...}
//
//	or:
//
//	        nil
type StandardSchedulerSettingsPtrInput interface {
	pulumi.Input

	ToStandardSchedulerSettingsPtrOutput() StandardSchedulerSettingsPtrOutput
	ToStandardSchedulerSettingsPtrOutputWithContext(context.Context) StandardSchedulerSettingsPtrOutput
}

type standardSchedulerSettingsPtrType StandardSchedulerSettingsArgs

func StandardSchedulerSettingsPtr(v *StandardSchedulerSettingsArgs) StandardSchedulerSettingsPtrInput {
	return (*standardSchedulerSettingsPtrType)(v)
}

func (*standardSchedulerSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StandardSchedulerSettings)(nil)).Elem()
}

func (i *standardSchedulerSettingsPtrType) ToStandardSchedulerSettingsPtrOutput() StandardSchedulerSettingsPtrOutput {
	return i.ToStandardSchedulerSettingsPtrOutputWithContext(context.Background())
}

func (i *standardSchedulerSettingsPtrType) ToStandardSchedulerSettingsPtrOutputWithContext(ctx context.Context) StandardSchedulerSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardSchedulerSettingsPtrOutput)
}

// Scheduler settings for standard environment.
type StandardSchedulerSettingsOutput struct{ *pulumi.OutputState }

func (StandardSchedulerSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StandardSchedulerSettings)(nil)).Elem()
}

func (o StandardSchedulerSettingsOutput) ToStandardSchedulerSettingsOutput() StandardSchedulerSettingsOutput {
	return o
}

func (o StandardSchedulerSettingsOutput) ToStandardSchedulerSettingsOutputWithContext(ctx context.Context) StandardSchedulerSettingsOutput {
	return o
}

func (o StandardSchedulerSettingsOutput) ToStandardSchedulerSettingsPtrOutput() StandardSchedulerSettingsPtrOutput {
	return o.ToStandardSchedulerSettingsPtrOutputWithContext(context.Background())
}

func (o StandardSchedulerSettingsOutput) ToStandardSchedulerSettingsPtrOutputWithContext(ctx context.Context) StandardSchedulerSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StandardSchedulerSettings) *StandardSchedulerSettings {
		return &v
	}).(StandardSchedulerSettingsPtrOutput)
}

// Maximum number of instances to run for this version. Set to zero to disable max_instances configuration.
func (o StandardSchedulerSettingsOutput) MaxInstances() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StandardSchedulerSettings) *int { return v.MaxInstances }).(pulumi.IntPtrOutput)
}

// Minimum number of instances to run for this version. Set to zero to disable min_instances configuration.
func (o StandardSchedulerSettingsOutput) MinInstances() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StandardSchedulerSettings) *int { return v.MinInstances }).(pulumi.IntPtrOutput)
}

// Target CPU utilization ratio to maintain when scaling.
func (o StandardSchedulerSettingsOutput) TargetCpuUtilization() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v StandardSchedulerSettings) *float64 { return v.TargetCpuUtilization }).(pulumi.Float64PtrOutput)
}

// Target throughput utilization ratio to maintain when scaling
func (o StandardSchedulerSettingsOutput) TargetThroughputUtilization() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v StandardSchedulerSettings) *float64 { return v.TargetThroughputUtilization }).(pulumi.Float64PtrOutput)
}

type StandardSchedulerSettingsPtrOutput struct{ *pulumi.OutputState }

func (StandardSchedulerSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StandardSchedulerSettings)(nil)).Elem()
}

func (o StandardSchedulerSettingsPtrOutput) ToStandardSchedulerSettingsPtrOutput() StandardSchedulerSettingsPtrOutput {
	return o
}

func (o StandardSchedulerSettingsPtrOutput) ToStandardSchedulerSettingsPtrOutputWithContext(ctx context.Context) StandardSchedulerSettingsPtrOutput {
	return o
}

func (o StandardSchedulerSettingsPtrOutput) Elem() StandardSchedulerSettingsOutput {
	return o.ApplyT(func(v *StandardSchedulerSettings) StandardSchedulerSettings {
		if v != nil {
			return *v
		}
		var ret StandardSchedulerSettings
		return ret
	}).(StandardSchedulerSettingsOutput)
}

// Maximum number of instances to run for this version. Set to zero to disable max_instances configuration.
func (o StandardSchedulerSettingsPtrOutput) MaxInstances() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StandardSchedulerSettings) *int {
		if v == nil {
			return nil
		}
		return v.MaxInstances
	}).(pulumi.IntPtrOutput)
}

// Minimum number of instances to run for this version. Set to zero to disable min_instances configuration.
func (o StandardSchedulerSettingsPtrOutput) MinInstances() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StandardSchedulerSettings) *int {
		if v == nil {
			return nil
		}
		return v.MinInstances
	}).(pulumi.IntPtrOutput)
}

// Target CPU utilization ratio to maintain when scaling.
func (o StandardSchedulerSettingsPtrOutput) TargetCpuUtilization() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *StandardSchedulerSettings) *float64 {
		if v == nil {
			return nil
		}
		return v.TargetCpuUtilization
	}).(pulumi.Float64PtrOutput)
}

// Target throughput utilization ratio to maintain when scaling
func (o StandardSchedulerSettingsPtrOutput) TargetThroughputUtilization() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *StandardSchedulerSettings) *float64 {
		if v == nil {
			return nil
		}
		return v.TargetThroughputUtilization
	}).(pulumi.Float64PtrOutput)
}

// Scheduler settings for standard environment.
type StandardSchedulerSettingsResponse struct {
	// Maximum number of instances to run for this version. Set to zero to disable max_instances configuration.
	MaxInstances int `pulumi:"maxInstances"`
	// Minimum number of instances to run for this version. Set to zero to disable min_instances configuration.
	MinInstances int `pulumi:"minInstances"`
	// Target CPU utilization ratio to maintain when scaling.
	TargetCpuUtilization float64 `pulumi:"targetCpuUtilization"`
	// Target throughput utilization ratio to maintain when scaling
	TargetThroughputUtilization float64 `pulumi:"targetThroughputUtilization"`
}

// Scheduler settings for standard environment.
type StandardSchedulerSettingsResponseOutput struct{ *pulumi.OutputState }

func (StandardSchedulerSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StandardSchedulerSettingsResponse)(nil)).Elem()
}

func (o StandardSchedulerSettingsResponseOutput) ToStandardSchedulerSettingsResponseOutput() StandardSchedulerSettingsResponseOutput {
	return o
}

func (o StandardSchedulerSettingsResponseOutput) ToStandardSchedulerSettingsResponseOutputWithContext(ctx context.Context) StandardSchedulerSettingsResponseOutput {
	return o
}

// Maximum number of instances to run for this version. Set to zero to disable max_instances configuration.
func (o StandardSchedulerSettingsResponseOutput) MaxInstances() pulumi.IntOutput {
	return o.ApplyT(func(v StandardSchedulerSettingsResponse) int { return v.MaxInstances }).(pulumi.IntOutput)
}

// Minimum number of instances to run for this version. Set to zero to disable min_instances configuration.
func (o StandardSchedulerSettingsResponseOutput) MinInstances() pulumi.IntOutput {
	return o.ApplyT(func(v StandardSchedulerSettingsResponse) int { return v.MinInstances }).(pulumi.IntOutput)
}

// Target CPU utilization ratio to maintain when scaling.
func (o StandardSchedulerSettingsResponseOutput) TargetCpuUtilization() pulumi.Float64Output {
	return o.ApplyT(func(v StandardSchedulerSettingsResponse) float64 { return v.TargetCpuUtilization }).(pulumi.Float64Output)
}

// Target throughput utilization ratio to maintain when scaling
func (o StandardSchedulerSettingsResponseOutput) TargetThroughputUtilization() pulumi.Float64Output {
	return o.ApplyT(func(v StandardSchedulerSettingsResponse) float64 { return v.TargetThroughputUtilization }).(pulumi.Float64Output)
}

// Files served directly to the user for a given URL, such as images, CSS stylesheets, or JavaScript source files. Static file handlers describe which files in the application directory are static files, and which URLs serve them.
type StaticFilesHandler struct {
	// Whether files should also be uploaded as code data. By default, files declared in static file handlers are uploaded as static data and are only served to end users; they cannot be read by the application. If enabled, uploads are charged against both your code and static data storage resource quotas.
	ApplicationReadable *bool `pulumi:"applicationReadable"`
	// Time a static file served by this handler should be cached by web proxies and browsers.
	Expiration *string `pulumi:"expiration"`
	// HTTP headers to use for all responses from these URLs.
	HttpHeaders map[string]string `pulumi:"httpHeaders"`
	// MIME type used to serve all files served by this handler.Defaults to file-specific MIME types, which are derived from each file's filename extension.
	MimeType *string `pulumi:"mimeType"`
	// Path to the static files matched by the URL pattern, from the application root directory. The path can refer to text matched in groupings in the URL pattern.
	Path *string `pulumi:"path"`
	// Whether this handler should match the request if the file referenced by the handler does not exist.
	RequireMatchingFile *bool `pulumi:"requireMatchingFile"`
	// Regular expression that matches the file paths for all files that should be referenced by this handler.
	UploadPathRegex *string `pulumi:"uploadPathRegex"`
}

// StaticFilesHandlerInput is an input type that accepts StaticFilesHandlerArgs and StaticFilesHandlerOutput values.
// You can construct a concrete instance of `StaticFilesHandlerInput` via:
//
//	StaticFilesHandlerArgs{...}
type StaticFilesHandlerInput interface {
	pulumi.Input

	ToStaticFilesHandlerOutput() StaticFilesHandlerOutput
	ToStaticFilesHandlerOutputWithContext(context.Context) StaticFilesHandlerOutput
}

// Files served directly to the user for a given URL, such as images, CSS stylesheets, or JavaScript source files. Static file handlers describe which files in the application directory are static files, and which URLs serve them.
type StaticFilesHandlerArgs struct {
	// Whether files should also be uploaded as code data. By default, files declared in static file handlers are uploaded as static data and are only served to end users; they cannot be read by the application. If enabled, uploads are charged against both your code and static data storage resource quotas.
	ApplicationReadable pulumi.BoolPtrInput `pulumi:"applicationReadable"`
	// Time a static file served by this handler should be cached by web proxies and browsers.
	Expiration pulumi.StringPtrInput `pulumi:"expiration"`
	// HTTP headers to use for all responses from these URLs.
	HttpHeaders pulumi.StringMapInput `pulumi:"httpHeaders"`
	// MIME type used to serve all files served by this handler.Defaults to file-specific MIME types, which are derived from each file's filename extension.
	MimeType pulumi.StringPtrInput `pulumi:"mimeType"`
	// Path to the static files matched by the URL pattern, from the application root directory. The path can refer to text matched in groupings in the URL pattern.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Whether this handler should match the request if the file referenced by the handler does not exist.
	RequireMatchingFile pulumi.BoolPtrInput `pulumi:"requireMatchingFile"`
	// Regular expression that matches the file paths for all files that should be referenced by this handler.
	UploadPathRegex pulumi.StringPtrInput `pulumi:"uploadPathRegex"`
}

func (StaticFilesHandlerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticFilesHandler)(nil)).Elem()
}

func (i StaticFilesHandlerArgs) ToStaticFilesHandlerOutput() StaticFilesHandlerOutput {
	return i.ToStaticFilesHandlerOutputWithContext(context.Background())
}

func (i StaticFilesHandlerArgs) ToStaticFilesHandlerOutputWithContext(ctx context.Context) StaticFilesHandlerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticFilesHandlerOutput)
}

func (i StaticFilesHandlerArgs) ToStaticFilesHandlerPtrOutput() StaticFilesHandlerPtrOutput {
	return i.ToStaticFilesHandlerPtrOutputWithContext(context.Background())
}

func (i StaticFilesHandlerArgs) ToStaticFilesHandlerPtrOutputWithContext(ctx context.Context) StaticFilesHandlerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticFilesHandlerOutput).ToStaticFilesHandlerPtrOutputWithContext(ctx)
}

// StaticFilesHandlerPtrInput is an input type that accepts StaticFilesHandlerArgs, StaticFilesHandlerPtr and StaticFilesHandlerPtrOutput values.
// You can construct a concrete instance of `StaticFilesHandlerPtrInput` via:
//
//	        StaticFilesHandlerArgs{...}
//
//	or:
//
//	        nil
type StaticFilesHandlerPtrInput interface {
	pulumi.Input

	ToStaticFilesHandlerPtrOutput() StaticFilesHandlerPtrOutput
	ToStaticFilesHandlerPtrOutputWithContext(context.Context) StaticFilesHandlerPtrOutput
}

type staticFilesHandlerPtrType StaticFilesHandlerArgs

func StaticFilesHandlerPtr(v *StaticFilesHandlerArgs) StaticFilesHandlerPtrInput {
	return (*staticFilesHandlerPtrType)(v)
}

func (*staticFilesHandlerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StaticFilesHandler)(nil)).Elem()
}

func (i *staticFilesHandlerPtrType) ToStaticFilesHandlerPtrOutput() StaticFilesHandlerPtrOutput {
	return i.ToStaticFilesHandlerPtrOutputWithContext(context.Background())
}

func (i *staticFilesHandlerPtrType) ToStaticFilesHandlerPtrOutputWithContext(ctx context.Context) StaticFilesHandlerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticFilesHandlerPtrOutput)
}

// Files served directly to the user for a given URL, such as images, CSS stylesheets, or JavaScript source files. Static file handlers describe which files in the application directory are static files, and which URLs serve them.
type StaticFilesHandlerOutput struct{ *pulumi.OutputState }

func (StaticFilesHandlerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticFilesHandler)(nil)).Elem()
}

func (o StaticFilesHandlerOutput) ToStaticFilesHandlerOutput() StaticFilesHandlerOutput {
	return o
}

func (o StaticFilesHandlerOutput) ToStaticFilesHandlerOutputWithContext(ctx context.Context) StaticFilesHandlerOutput {
	return o
}

func (o StaticFilesHandlerOutput) ToStaticFilesHandlerPtrOutput() StaticFilesHandlerPtrOutput {
	return o.ToStaticFilesHandlerPtrOutputWithContext(context.Background())
}

func (o StaticFilesHandlerOutput) ToStaticFilesHandlerPtrOutputWithContext(ctx context.Context) StaticFilesHandlerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StaticFilesHandler) *StaticFilesHandler {
		return &v
	}).(StaticFilesHandlerPtrOutput)
}

// Whether files should also be uploaded as code data. By default, files declared in static file handlers are uploaded as static data and are only served to end users; they cannot be read by the application. If enabled, uploads are charged against both your code and static data storage resource quotas.
func (o StaticFilesHandlerOutput) ApplicationReadable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StaticFilesHandler) *bool { return v.ApplicationReadable }).(pulumi.BoolPtrOutput)
}

// Time a static file served by this handler should be cached by web proxies and browsers.
func (o StaticFilesHandlerOutput) Expiration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StaticFilesHandler) *string { return v.Expiration }).(pulumi.StringPtrOutput)
}

// HTTP headers to use for all responses from these URLs.
func (o StaticFilesHandlerOutput) HttpHeaders() pulumi.StringMapOutput {
	return o.ApplyT(func(v StaticFilesHandler) map[string]string { return v.HttpHeaders }).(pulumi.StringMapOutput)
}

// MIME type used to serve all files served by this handler.Defaults to file-specific MIME types, which are derived from each file's filename extension.
func (o StaticFilesHandlerOutput) MimeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StaticFilesHandler) *string { return v.MimeType }).(pulumi.StringPtrOutput)
}

// Path to the static files matched by the URL pattern, from the application root directory. The path can refer to text matched in groupings in the URL pattern.
func (o StaticFilesHandlerOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StaticFilesHandler) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Whether this handler should match the request if the file referenced by the handler does not exist.
func (o StaticFilesHandlerOutput) RequireMatchingFile() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StaticFilesHandler) *bool { return v.RequireMatchingFile }).(pulumi.BoolPtrOutput)
}

// Regular expression that matches the file paths for all files that should be referenced by this handler.
func (o StaticFilesHandlerOutput) UploadPathRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StaticFilesHandler) *string { return v.UploadPathRegex }).(pulumi.StringPtrOutput)
}

type StaticFilesHandlerPtrOutput struct{ *pulumi.OutputState }

func (StaticFilesHandlerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StaticFilesHandler)(nil)).Elem()
}

func (o StaticFilesHandlerPtrOutput) ToStaticFilesHandlerPtrOutput() StaticFilesHandlerPtrOutput {
	return o
}

func (o StaticFilesHandlerPtrOutput) ToStaticFilesHandlerPtrOutputWithContext(ctx context.Context) StaticFilesHandlerPtrOutput {
	return o
}

func (o StaticFilesHandlerPtrOutput) Elem() StaticFilesHandlerOutput {
	return o.ApplyT(func(v *StaticFilesHandler) StaticFilesHandler {
		if v != nil {
			return *v
		}
		var ret StaticFilesHandler
		return ret
	}).(StaticFilesHandlerOutput)
}

// Whether files should also be uploaded as code data. By default, files declared in static file handlers are uploaded as static data and are only served to end users; they cannot be read by the application. If enabled, uploads are charged against both your code and static data storage resource quotas.
func (o StaticFilesHandlerPtrOutput) ApplicationReadable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StaticFilesHandler) *bool {
		if v == nil {
			return nil
		}
		return v.ApplicationReadable
	}).(pulumi.BoolPtrOutput)
}

// Time a static file served by this handler should be cached by web proxies and browsers.
func (o StaticFilesHandlerPtrOutput) Expiration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StaticFilesHandler) *string {
		if v == nil {
			return nil
		}
		return v.Expiration
	}).(pulumi.StringPtrOutput)
}

// HTTP headers to use for all responses from these URLs.
func (o StaticFilesHandlerPtrOutput) HttpHeaders() pulumi.StringMapOutput {
	return o.ApplyT(func(v *StaticFilesHandler) map[string]string {
		if v == nil {
			return nil
		}
		return v.HttpHeaders
	}).(pulumi.StringMapOutput)
}

// MIME type used to serve all files served by this handler.Defaults to file-specific MIME types, which are derived from each file's filename extension.
func (o StaticFilesHandlerPtrOutput) MimeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StaticFilesHandler) *string {
		if v == nil {
			return nil
		}
		return v.MimeType
	}).(pulumi.StringPtrOutput)
}

// Path to the static files matched by the URL pattern, from the application root directory. The path can refer to text matched in groupings in the URL pattern.
func (o StaticFilesHandlerPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StaticFilesHandler) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Whether this handler should match the request if the file referenced by the handler does not exist.
func (o StaticFilesHandlerPtrOutput) RequireMatchingFile() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StaticFilesHandler) *bool {
		if v == nil {
			return nil
		}
		return v.RequireMatchingFile
	}).(pulumi.BoolPtrOutput)
}

// Regular expression that matches the file paths for all files that should be referenced by this handler.
func (o StaticFilesHandlerPtrOutput) UploadPathRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StaticFilesHandler) *string {
		if v == nil {
			return nil
		}
		return v.UploadPathRegex
	}).(pulumi.StringPtrOutput)
}

// Files served directly to the user for a given URL, such as images, CSS stylesheets, or JavaScript source files. Static file handlers describe which files in the application directory are static files, and which URLs serve them.
type StaticFilesHandlerResponse struct {
	// Whether files should also be uploaded as code data. By default, files declared in static file handlers are uploaded as static data and are only served to end users; they cannot be read by the application. If enabled, uploads are charged against both your code and static data storage resource quotas.
	ApplicationReadable bool `pulumi:"applicationReadable"`
	// Time a static file served by this handler should be cached by web proxies and browsers.
	Expiration string `pulumi:"expiration"`
	// HTTP headers to use for all responses from these URLs.
	HttpHeaders map[string]string `pulumi:"httpHeaders"`
	// MIME type used to serve all files served by this handler.Defaults to file-specific MIME types, which are derived from each file's filename extension.
	MimeType string `pulumi:"mimeType"`
	// Path to the static files matched by the URL pattern, from the application root directory. The path can refer to text matched in groupings in the URL pattern.
	Path string `pulumi:"path"`
	// Whether this handler should match the request if the file referenced by the handler does not exist.
	RequireMatchingFile bool `pulumi:"requireMatchingFile"`
	// Regular expression that matches the file paths for all files that should be referenced by this handler.
	UploadPathRegex string `pulumi:"uploadPathRegex"`
}

// Files served directly to the user for a given URL, such as images, CSS stylesheets, or JavaScript source files. Static file handlers describe which files in the application directory are static files, and which URLs serve them.
type StaticFilesHandlerResponseOutput struct{ *pulumi.OutputState }

func (StaticFilesHandlerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticFilesHandlerResponse)(nil)).Elem()
}

func (o StaticFilesHandlerResponseOutput) ToStaticFilesHandlerResponseOutput() StaticFilesHandlerResponseOutput {
	return o
}

func (o StaticFilesHandlerResponseOutput) ToStaticFilesHandlerResponseOutputWithContext(ctx context.Context) StaticFilesHandlerResponseOutput {
	return o
}

// Whether files should also be uploaded as code data. By default, files declared in static file handlers are uploaded as static data and are only served to end users; they cannot be read by the application. If enabled, uploads are charged against both your code and static data storage resource quotas.
func (o StaticFilesHandlerResponseOutput) ApplicationReadable() pulumi.BoolOutput {
	return o.ApplyT(func(v StaticFilesHandlerResponse) bool { return v.ApplicationReadable }).(pulumi.BoolOutput)
}

// Time a static file served by this handler should be cached by web proxies and browsers.
func (o StaticFilesHandlerResponseOutput) Expiration() pulumi.StringOutput {
	return o.ApplyT(func(v StaticFilesHandlerResponse) string { return v.Expiration }).(pulumi.StringOutput)
}

// HTTP headers to use for all responses from these URLs.
func (o StaticFilesHandlerResponseOutput) HttpHeaders() pulumi.StringMapOutput {
	return o.ApplyT(func(v StaticFilesHandlerResponse) map[string]string { return v.HttpHeaders }).(pulumi.StringMapOutput)
}

// MIME type used to serve all files served by this handler.Defaults to file-specific MIME types, which are derived from each file's filename extension.
func (o StaticFilesHandlerResponseOutput) MimeType() pulumi.StringOutput {
	return o.ApplyT(func(v StaticFilesHandlerResponse) string { return v.MimeType }).(pulumi.StringOutput)
}

// Path to the static files matched by the URL pattern, from the application root directory. The path can refer to text matched in groupings in the URL pattern.
func (o StaticFilesHandlerResponseOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v StaticFilesHandlerResponse) string { return v.Path }).(pulumi.StringOutput)
}

// Whether this handler should match the request if the file referenced by the handler does not exist.
func (o StaticFilesHandlerResponseOutput) RequireMatchingFile() pulumi.BoolOutput {
	return o.ApplyT(func(v StaticFilesHandlerResponse) bool { return v.RequireMatchingFile }).(pulumi.BoolOutput)
}

// Regular expression that matches the file paths for all files that should be referenced by this handler.
func (o StaticFilesHandlerResponseOutput) UploadPathRegex() pulumi.StringOutput {
	return o.ApplyT(func(v StaticFilesHandlerResponse) string { return v.UploadPathRegex }).(pulumi.StringOutput)
}

// Rules to match an HTTP request and dispatch that request to a service.
type UrlDispatchRule struct {
	// Domain name to match against. The wildcard "*" is supported if specified before a period: "*.".Defaults to matching all domains: "*".
	Domain *string `pulumi:"domain"`
	// Pathname within the host. Must start with a "/". A single "*" can be included at the end of the path.The sum of the lengths of the domain and path may not exceed 100 characters.
	Path *string `pulumi:"path"`
	// Resource ID of a service in this application that should serve the matched request. The service must already exist. Example: default.
	Service *string `pulumi:"service"`
}

// UrlDispatchRuleInput is an input type that accepts UrlDispatchRuleArgs and UrlDispatchRuleOutput values.
// You can construct a concrete instance of `UrlDispatchRuleInput` via:
//
//	UrlDispatchRuleArgs{...}
type UrlDispatchRuleInput interface {
	pulumi.Input

	ToUrlDispatchRuleOutput() UrlDispatchRuleOutput
	ToUrlDispatchRuleOutputWithContext(context.Context) UrlDispatchRuleOutput
}

// Rules to match an HTTP request and dispatch that request to a service.
type UrlDispatchRuleArgs struct {
	// Domain name to match against. The wildcard "*" is supported if specified before a period: "*.".Defaults to matching all domains: "*".
	Domain pulumi.StringPtrInput `pulumi:"domain"`
	// Pathname within the host. Must start with a "/". A single "*" can be included at the end of the path.The sum of the lengths of the domain and path may not exceed 100 characters.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Resource ID of a service in this application that should serve the matched request. The service must already exist. Example: default.
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (UrlDispatchRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UrlDispatchRule)(nil)).Elem()
}

func (i UrlDispatchRuleArgs) ToUrlDispatchRuleOutput() UrlDispatchRuleOutput {
	return i.ToUrlDispatchRuleOutputWithContext(context.Background())
}

func (i UrlDispatchRuleArgs) ToUrlDispatchRuleOutputWithContext(ctx context.Context) UrlDispatchRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlDispatchRuleOutput)
}

// UrlDispatchRuleArrayInput is an input type that accepts UrlDispatchRuleArray and UrlDispatchRuleArrayOutput values.
// You can construct a concrete instance of `UrlDispatchRuleArrayInput` via:
//
//	UrlDispatchRuleArray{ UrlDispatchRuleArgs{...} }
type UrlDispatchRuleArrayInput interface {
	pulumi.Input

	ToUrlDispatchRuleArrayOutput() UrlDispatchRuleArrayOutput
	ToUrlDispatchRuleArrayOutputWithContext(context.Context) UrlDispatchRuleArrayOutput
}

type UrlDispatchRuleArray []UrlDispatchRuleInput

func (UrlDispatchRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UrlDispatchRule)(nil)).Elem()
}

func (i UrlDispatchRuleArray) ToUrlDispatchRuleArrayOutput() UrlDispatchRuleArrayOutput {
	return i.ToUrlDispatchRuleArrayOutputWithContext(context.Background())
}

func (i UrlDispatchRuleArray) ToUrlDispatchRuleArrayOutputWithContext(ctx context.Context) UrlDispatchRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlDispatchRuleArrayOutput)
}

// Rules to match an HTTP request and dispatch that request to a service.
type UrlDispatchRuleOutput struct{ *pulumi.OutputState }

func (UrlDispatchRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UrlDispatchRule)(nil)).Elem()
}

func (o UrlDispatchRuleOutput) ToUrlDispatchRuleOutput() UrlDispatchRuleOutput {
	return o
}

func (o UrlDispatchRuleOutput) ToUrlDispatchRuleOutputWithContext(ctx context.Context) UrlDispatchRuleOutput {
	return o
}

// Domain name to match against. The wildcard "*" is supported if specified before a period: "*.".Defaults to matching all domains: "*".
func (o UrlDispatchRuleOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UrlDispatchRule) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

// Pathname within the host. Must start with a "/". A single "*" can be included at the end of the path.The sum of the lengths of the domain and path may not exceed 100 characters.
func (o UrlDispatchRuleOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UrlDispatchRule) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Resource ID of a service in this application that should serve the matched request. The service must already exist. Example: default.
func (o UrlDispatchRuleOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UrlDispatchRule) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type UrlDispatchRuleArrayOutput struct{ *pulumi.OutputState }

func (UrlDispatchRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UrlDispatchRule)(nil)).Elem()
}

func (o UrlDispatchRuleArrayOutput) ToUrlDispatchRuleArrayOutput() UrlDispatchRuleArrayOutput {
	return o
}

func (o UrlDispatchRuleArrayOutput) ToUrlDispatchRuleArrayOutputWithContext(ctx context.Context) UrlDispatchRuleArrayOutput {
	return o
}

func (o UrlDispatchRuleArrayOutput) Index(i pulumi.IntInput) UrlDispatchRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UrlDispatchRule {
		return vs[0].([]UrlDispatchRule)[vs[1].(int)]
	}).(UrlDispatchRuleOutput)
}

// Rules to match an HTTP request and dispatch that request to a service.
type UrlDispatchRuleResponse struct {
	// Domain name to match against. The wildcard "*" is supported if specified before a period: "*.".Defaults to matching all domains: "*".
	Domain string `pulumi:"domain"`
	// Pathname within the host. Must start with a "/". A single "*" can be included at the end of the path.The sum of the lengths of the domain and path may not exceed 100 characters.
	Path string `pulumi:"path"`
	// Resource ID of a service in this application that should serve the matched request. The service must already exist. Example: default.
	Service string `pulumi:"service"`
}

// Rules to match an HTTP request and dispatch that request to a service.
type UrlDispatchRuleResponseOutput struct{ *pulumi.OutputState }

func (UrlDispatchRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UrlDispatchRuleResponse)(nil)).Elem()
}

func (o UrlDispatchRuleResponseOutput) ToUrlDispatchRuleResponseOutput() UrlDispatchRuleResponseOutput {
	return o
}

func (o UrlDispatchRuleResponseOutput) ToUrlDispatchRuleResponseOutputWithContext(ctx context.Context) UrlDispatchRuleResponseOutput {
	return o
}

// Domain name to match against. The wildcard "*" is supported if specified before a period: "*.".Defaults to matching all domains: "*".
func (o UrlDispatchRuleResponseOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v UrlDispatchRuleResponse) string { return v.Domain }).(pulumi.StringOutput)
}

// Pathname within the host. Must start with a "/". A single "*" can be included at the end of the path.The sum of the lengths of the domain and path may not exceed 100 characters.
func (o UrlDispatchRuleResponseOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v UrlDispatchRuleResponse) string { return v.Path }).(pulumi.StringOutput)
}

// Resource ID of a service in this application that should serve the matched request. The service must already exist. Example: default.
func (o UrlDispatchRuleResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v UrlDispatchRuleResponse) string { return v.Service }).(pulumi.StringOutput)
}

type UrlDispatchRuleResponseArrayOutput struct{ *pulumi.OutputState }

func (UrlDispatchRuleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UrlDispatchRuleResponse)(nil)).Elem()
}

func (o UrlDispatchRuleResponseArrayOutput) ToUrlDispatchRuleResponseArrayOutput() UrlDispatchRuleResponseArrayOutput {
	return o
}

func (o UrlDispatchRuleResponseArrayOutput) ToUrlDispatchRuleResponseArrayOutputWithContext(ctx context.Context) UrlDispatchRuleResponseArrayOutput {
	return o
}

func (o UrlDispatchRuleResponseArrayOutput) Index(i pulumi.IntInput) UrlDispatchRuleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UrlDispatchRuleResponse {
		return vs[0].([]UrlDispatchRuleResponse)[vs[1].(int)]
	}).(UrlDispatchRuleResponseOutput)
}

// URL pattern and description of how the URL should be handled. App Engine can handle URLs by executing application code or by serving static files uploaded with the version, such as images, CSS, or JavaScript.
type UrlMap struct {
	// Uses API Endpoints to handle requests.
	ApiEndpoint *ApiEndpointHandler `pulumi:"apiEndpoint"`
	// Action to take when users access resources that require authentication. Defaults to redirect.
	AuthFailAction *UrlMapAuthFailAction `pulumi:"authFailAction"`
	// Level of login required to access this resource. Not supported for Node.js in the App Engine standard environment.
	Login *UrlMapLogin `pulumi:"login"`
	// 30x code to use when performing redirects for the secure field. Defaults to 302.
	RedirectHttpResponseCode *UrlMapRedirectHttpResponseCode `pulumi:"redirectHttpResponseCode"`
	// Executes a script to handle the requests that match this URL pattern. Only the auto value is supported for Node.js in the App Engine standard environment, for example "script": "auto".
	Script *ScriptHandler `pulumi:"script"`
	// Security (HTTPS) enforcement for this URL.
	SecurityLevel *UrlMapSecurityLevel `pulumi:"securityLevel"`
	// Returns the contents of a file, such as an image, as the response.
	StaticFiles *StaticFilesHandler `pulumi:"staticFiles"`
	// URL prefix. Uses regular expression syntax, which means regexp special characters must be escaped, but should not contain groupings. All URLs that begin with this prefix are handled by this handler, using the portion of the URL after the prefix as part of the file path.
	UrlRegex *string `pulumi:"urlRegex"`
}

// UrlMapInput is an input type that accepts UrlMap and UrlMapOutput values.
// You can construct a concrete instance of `UrlMapInput` via:
//
//	UrlMap{ "key": UrlArgs{...} }
type UrlMapInput interface {
	pulumi.Input

	ToUrlMapOutput() UrlMapOutput
	ToUrlMapOutputWithContext(context.Context) UrlMapOutput
}

// URL pattern and description of how the URL should be handled. App Engine can handle URLs by executing application code or by serving static files uploaded with the version, such as images, CSS, or JavaScript.
type UrlMapArgs struct {
	// Uses API Endpoints to handle requests.
	ApiEndpoint ApiEndpointHandlerPtrInput `pulumi:"apiEndpoint"`
	// Action to take when users access resources that require authentication. Defaults to redirect.
	AuthFailAction UrlMapAuthFailActionPtrInput `pulumi:"authFailAction"`
	// Level of login required to access this resource. Not supported for Node.js in the App Engine standard environment.
	Login UrlMapLoginPtrInput `pulumi:"login"`
	// 30x code to use when performing redirects for the secure field. Defaults to 302.
	RedirectHttpResponseCode UrlMapRedirectHttpResponseCodePtrInput `pulumi:"redirectHttpResponseCode"`
	// Executes a script to handle the requests that match this URL pattern. Only the auto value is supported for Node.js in the App Engine standard environment, for example "script": "auto".
	Script ScriptHandlerPtrInput `pulumi:"script"`
	// Security (HTTPS) enforcement for this URL.
	SecurityLevel UrlMapSecurityLevelPtrInput `pulumi:"securityLevel"`
	// Returns the contents of a file, such as an image, as the response.
	StaticFiles StaticFilesHandlerPtrInput `pulumi:"staticFiles"`
	// URL prefix. Uses regular expression syntax, which means regexp special characters must be escaped, but should not contain groupings. All URLs that begin with this prefix are handled by this handler, using the portion of the URL after the prefix as part of the file path.
	UrlRegex pulumi.StringPtrInput `pulumi:"urlRegex"`
}

func (UrlMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UrlMap)(nil)).Elem()
}

func (i UrlMapArgs) ToUrlMapOutput() UrlMapOutput {
	return i.ToUrlMapOutputWithContext(context.Background())
}

func (i UrlMapArgs) ToUrlMapOutputWithContext(ctx context.Context) UrlMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlMapOutput)
}

// UrlMapArrayInput is an input type that accepts UrlMapArray and UrlMapArrayOutput values.
// You can construct a concrete instance of `UrlMapArrayInput` via:
//
//	UrlMapArray{ UrlMapArgs{...} }
type UrlMapArrayInput interface {
	pulumi.Input

	ToUrlMapArrayOutput() UrlMapArrayOutput
	ToUrlMapArrayOutputWithContext(context.Context) UrlMapArrayOutput
}

type UrlMapArray []UrlMapInput

func (UrlMapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UrlMap)(nil)).Elem()
}

func (i UrlMapArray) ToUrlMapArrayOutput() UrlMapArrayOutput {
	return i.ToUrlMapArrayOutputWithContext(context.Background())
}

func (i UrlMapArray) ToUrlMapArrayOutputWithContext(ctx context.Context) UrlMapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlMapArrayOutput)
}

// URL pattern and description of how the URL should be handled. App Engine can handle URLs by executing application code or by serving static files uploaded with the version, such as images, CSS, or JavaScript.
type UrlMapOutput struct{ *pulumi.OutputState }

func (UrlMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UrlMap)(nil)).Elem()
}

func (o UrlMapOutput) ToUrlMapOutput() UrlMapOutput {
	return o
}

func (o UrlMapOutput) ToUrlMapOutputWithContext(ctx context.Context) UrlMapOutput {
	return o
}

// Uses API Endpoints to handle requests.
func (o UrlMapOutput) ApiEndpoint() ApiEndpointHandlerPtrOutput {
	return o.ApplyT(func(v UrlMap) *ApiEndpointHandler { return v.ApiEndpoint }).(ApiEndpointHandlerPtrOutput)
}

// Action to take when users access resources that require authentication. Defaults to redirect.
func (o UrlMapOutput) AuthFailAction() UrlMapAuthFailActionPtrOutput {
	return o.ApplyT(func(v UrlMap) *UrlMapAuthFailAction { return v.AuthFailAction }).(UrlMapAuthFailActionPtrOutput)
}

// Level of login required to access this resource. Not supported for Node.js in the App Engine standard environment.
func (o UrlMapOutput) Login() UrlMapLoginPtrOutput {
	return o.ApplyT(func(v UrlMap) *UrlMapLogin { return v.Login }).(UrlMapLoginPtrOutput)
}

// 30x code to use when performing redirects for the secure field. Defaults to 302.
func (o UrlMapOutput) RedirectHttpResponseCode() UrlMapRedirectHttpResponseCodePtrOutput {
	return o.ApplyT(func(v UrlMap) *UrlMapRedirectHttpResponseCode { return v.RedirectHttpResponseCode }).(UrlMapRedirectHttpResponseCodePtrOutput)
}

// Executes a script to handle the requests that match this URL pattern. Only the auto value is supported for Node.js in the App Engine standard environment, for example "script": "auto".
func (o UrlMapOutput) Script() ScriptHandlerPtrOutput {
	return o.ApplyT(func(v UrlMap) *ScriptHandler { return v.Script }).(ScriptHandlerPtrOutput)
}

// Security (HTTPS) enforcement for this URL.
func (o UrlMapOutput) SecurityLevel() UrlMapSecurityLevelPtrOutput {
	return o.ApplyT(func(v UrlMap) *UrlMapSecurityLevel { return v.SecurityLevel }).(UrlMapSecurityLevelPtrOutput)
}

// Returns the contents of a file, such as an image, as the response.
func (o UrlMapOutput) StaticFiles() StaticFilesHandlerPtrOutput {
	return o.ApplyT(func(v UrlMap) *StaticFilesHandler { return v.StaticFiles }).(StaticFilesHandlerPtrOutput)
}

// URL prefix. Uses regular expression syntax, which means regexp special characters must be escaped, but should not contain groupings. All URLs that begin with this prefix are handled by this handler, using the portion of the URL after the prefix as part of the file path.
func (o UrlMapOutput) UrlRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UrlMap) *string { return v.UrlRegex }).(pulumi.StringPtrOutput)
}

type UrlMapArrayOutput struct{ *pulumi.OutputState }

func (UrlMapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UrlMap)(nil)).Elem()
}

func (o UrlMapArrayOutput) ToUrlMapArrayOutput() UrlMapArrayOutput {
	return o
}

func (o UrlMapArrayOutput) ToUrlMapArrayOutputWithContext(ctx context.Context) UrlMapArrayOutput {
	return o
}

func (o UrlMapArrayOutput) Index(i pulumi.IntInput) UrlMapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UrlMap {
		return vs[0].([]UrlMap)[vs[1].(int)]
	}).(UrlMapOutput)
}

// URL pattern and description of how the URL should be handled. App Engine can handle URLs by executing application code or by serving static files uploaded with the version, such as images, CSS, or JavaScript.
type UrlMapResponse struct {
	// Uses API Endpoints to handle requests.
	ApiEndpoint ApiEndpointHandlerResponse `pulumi:"apiEndpoint"`
	// Action to take when users access resources that require authentication. Defaults to redirect.
	AuthFailAction string `pulumi:"authFailAction"`
	// Level of login required to access this resource. Not supported for Node.js in the App Engine standard environment.
	Login string `pulumi:"login"`
	// 30x code to use when performing redirects for the secure field. Defaults to 302.
	RedirectHttpResponseCode string `pulumi:"redirectHttpResponseCode"`
	// Executes a script to handle the requests that match this URL pattern. Only the auto value is supported for Node.js in the App Engine standard environment, for example "script": "auto".
	Script ScriptHandlerResponse `pulumi:"script"`
	// Security (HTTPS) enforcement for this URL.
	SecurityLevel string `pulumi:"securityLevel"`
	// Returns the contents of a file, such as an image, as the response.
	StaticFiles StaticFilesHandlerResponse `pulumi:"staticFiles"`
	// URL prefix. Uses regular expression syntax, which means regexp special characters must be escaped, but should not contain groupings. All URLs that begin with this prefix are handled by this handler, using the portion of the URL after the prefix as part of the file path.
	UrlRegex string `pulumi:"urlRegex"`
}

// URL pattern and description of how the URL should be handled. App Engine can handle URLs by executing application code or by serving static files uploaded with the version, such as images, CSS, or JavaScript.
type UrlMapResponseOutput struct{ *pulumi.OutputState }

func (UrlMapResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UrlMapResponse)(nil)).Elem()
}

func (o UrlMapResponseOutput) ToUrlMapResponseOutput() UrlMapResponseOutput {
	return o
}

func (o UrlMapResponseOutput) ToUrlMapResponseOutputWithContext(ctx context.Context) UrlMapResponseOutput {
	return o
}

// Uses API Endpoints to handle requests.
func (o UrlMapResponseOutput) ApiEndpoint() ApiEndpointHandlerResponseOutput {
	return o.ApplyT(func(v UrlMapResponse) ApiEndpointHandlerResponse { return v.ApiEndpoint }).(ApiEndpointHandlerResponseOutput)
}

// Action to take when users access resources that require authentication. Defaults to redirect.
func (o UrlMapResponseOutput) AuthFailAction() pulumi.StringOutput {
	return o.ApplyT(func(v UrlMapResponse) string { return v.AuthFailAction }).(pulumi.StringOutput)
}

// Level of login required to access this resource. Not supported for Node.js in the App Engine standard environment.
func (o UrlMapResponseOutput) Login() pulumi.StringOutput {
	return o.ApplyT(func(v UrlMapResponse) string { return v.Login }).(pulumi.StringOutput)
}

// 30x code to use when performing redirects for the secure field. Defaults to 302.
func (o UrlMapResponseOutput) RedirectHttpResponseCode() pulumi.StringOutput {
	return o.ApplyT(func(v UrlMapResponse) string { return v.RedirectHttpResponseCode }).(pulumi.StringOutput)
}

// Executes a script to handle the requests that match this URL pattern. Only the auto value is supported for Node.js in the App Engine standard environment, for example "script": "auto".
func (o UrlMapResponseOutput) Script() ScriptHandlerResponseOutput {
	return o.ApplyT(func(v UrlMapResponse) ScriptHandlerResponse { return v.Script }).(ScriptHandlerResponseOutput)
}

// Security (HTTPS) enforcement for this URL.
func (o UrlMapResponseOutput) SecurityLevel() pulumi.StringOutput {
	return o.ApplyT(func(v UrlMapResponse) string { return v.SecurityLevel }).(pulumi.StringOutput)
}

// Returns the contents of a file, such as an image, as the response.
func (o UrlMapResponseOutput) StaticFiles() StaticFilesHandlerResponseOutput {
	return o.ApplyT(func(v UrlMapResponse) StaticFilesHandlerResponse { return v.StaticFiles }).(StaticFilesHandlerResponseOutput)
}

// URL prefix. Uses regular expression syntax, which means regexp special characters must be escaped, but should not contain groupings. All URLs that begin with this prefix are handled by this handler, using the portion of the URL after the prefix as part of the file path.
func (o UrlMapResponseOutput) UrlRegex() pulumi.StringOutput {
	return o.ApplyT(func(v UrlMapResponse) string { return v.UrlRegex }).(pulumi.StringOutput)
}

type UrlMapResponseArrayOutput struct{ *pulumi.OutputState }

func (UrlMapResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UrlMapResponse)(nil)).Elem()
}

func (o UrlMapResponseArrayOutput) ToUrlMapResponseArrayOutput() UrlMapResponseArrayOutput {
	return o
}

func (o UrlMapResponseArrayOutput) ToUrlMapResponseArrayOutputWithContext(ctx context.Context) UrlMapResponseArrayOutput {
	return o
}

func (o UrlMapResponseArrayOutput) Index(i pulumi.IntInput) UrlMapResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UrlMapResponse {
		return vs[0].([]UrlMapResponse)[vs[1].(int)]
	}).(UrlMapResponseOutput)
}

// Volumes mounted within the app container. Only applicable in the App Engine flexible environment.
type Volume struct {
	// Unique name for the volume.
	Name *string `pulumi:"name"`
	// Volume size in gigabytes.
	SizeGb *float64 `pulumi:"sizeGb"`
	// Underlying volume type, e.g. 'tmpfs'.
	VolumeType *string `pulumi:"volumeType"`
}

// VolumeInput is an input type that accepts VolumeArgs and VolumeOutput values.
// You can construct a concrete instance of `VolumeInput` via:
//
//	VolumeArgs{...}
type VolumeInput interface {
	pulumi.Input

	ToVolumeOutput() VolumeOutput
	ToVolumeOutputWithContext(context.Context) VolumeOutput
}

// Volumes mounted within the app container. Only applicable in the App Engine flexible environment.
type VolumeArgs struct {
	// Unique name for the volume.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Volume size in gigabytes.
	SizeGb pulumi.Float64PtrInput `pulumi:"sizeGb"`
	// Underlying volume type, e.g. 'tmpfs'.
	VolumeType pulumi.StringPtrInput `pulumi:"volumeType"`
}

func (VolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Volume)(nil)).Elem()
}

func (i VolumeArgs) ToVolumeOutput() VolumeOutput {
	return i.ToVolumeOutputWithContext(context.Background())
}

func (i VolumeArgs) ToVolumeOutputWithContext(ctx context.Context) VolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeOutput)
}

// VolumeArrayInput is an input type that accepts VolumeArray and VolumeArrayOutput values.
// You can construct a concrete instance of `VolumeArrayInput` via:
//
//	VolumeArray{ VolumeArgs{...} }
type VolumeArrayInput interface {
	pulumi.Input

	ToVolumeArrayOutput() VolumeArrayOutput
	ToVolumeArrayOutputWithContext(context.Context) VolumeArrayOutput
}

type VolumeArray []VolumeInput

func (VolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Volume)(nil)).Elem()
}

func (i VolumeArray) ToVolumeArrayOutput() VolumeArrayOutput {
	return i.ToVolumeArrayOutputWithContext(context.Background())
}

func (i VolumeArray) ToVolumeArrayOutputWithContext(ctx context.Context) VolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeArrayOutput)
}

// Volumes mounted within the app container. Only applicable in the App Engine flexible environment.
type VolumeOutput struct{ *pulumi.OutputState }

func (VolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Volume)(nil)).Elem()
}

func (o VolumeOutput) ToVolumeOutput() VolumeOutput {
	return o
}

func (o VolumeOutput) ToVolumeOutputWithContext(ctx context.Context) VolumeOutput {
	return o
}

// Unique name for the volume.
func (o VolumeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Volume) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Volume size in gigabytes.
func (o VolumeOutput) SizeGb() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Volume) *float64 { return v.SizeGb }).(pulumi.Float64PtrOutput)
}

// Underlying volume type, e.g. 'tmpfs'.
func (o VolumeOutput) VolumeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Volume) *string { return v.VolumeType }).(pulumi.StringPtrOutput)
}

type VolumeArrayOutput struct{ *pulumi.OutputState }

func (VolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Volume)(nil)).Elem()
}

func (o VolumeArrayOutput) ToVolumeArrayOutput() VolumeArrayOutput {
	return o
}

func (o VolumeArrayOutput) ToVolumeArrayOutputWithContext(ctx context.Context) VolumeArrayOutput {
	return o
}

func (o VolumeArrayOutput) Index(i pulumi.IntInput) VolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Volume {
		return vs[0].([]Volume)[vs[1].(int)]
	}).(VolumeOutput)
}

// Volumes mounted within the app container. Only applicable in the App Engine flexible environment.
type VolumeResponse struct {
	// Unique name for the volume.
	Name string `pulumi:"name"`
	// Volume size in gigabytes.
	SizeGb float64 `pulumi:"sizeGb"`
	// Underlying volume type, e.g. 'tmpfs'.
	VolumeType string `pulumi:"volumeType"`
}

// Volumes mounted within the app container. Only applicable in the App Engine flexible environment.
type VolumeResponseOutput struct{ *pulumi.OutputState }

func (VolumeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeResponse)(nil)).Elem()
}

func (o VolumeResponseOutput) ToVolumeResponseOutput() VolumeResponseOutput {
	return o
}

func (o VolumeResponseOutput) ToVolumeResponseOutputWithContext(ctx context.Context) VolumeResponseOutput {
	return o
}

// Unique name for the volume.
func (o VolumeResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Volume size in gigabytes.
func (o VolumeResponseOutput) SizeGb() pulumi.Float64Output {
	return o.ApplyT(func(v VolumeResponse) float64 { return v.SizeGb }).(pulumi.Float64Output)
}

// Underlying volume type, e.g. 'tmpfs'.
func (o VolumeResponseOutput) VolumeType() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeResponse) string { return v.VolumeType }).(pulumi.StringOutput)
}

type VolumeResponseArrayOutput struct{ *pulumi.OutputState }

func (VolumeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeResponse)(nil)).Elem()
}

func (o VolumeResponseArrayOutput) ToVolumeResponseArrayOutput() VolumeResponseArrayOutput {
	return o
}

func (o VolumeResponseArrayOutput) ToVolumeResponseArrayOutputWithContext(ctx context.Context) VolumeResponseArrayOutput {
	return o
}

func (o VolumeResponseArrayOutput) Index(i pulumi.IntInput) VolumeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeResponse {
		return vs[0].([]VolumeResponse)[vs[1].(int)]
	}).(VolumeResponseOutput)
}

// VPC access connector specification.
type VpcAccessConnector struct {
	// The egress setting for the connector, controlling what traffic is diverted through it.
	EgressSetting *VpcAccessConnectorEgressSetting `pulumi:"egressSetting"`
	// Full Serverless VPC Access Connector name e.g. projects/my-project/locations/us-central1/connectors/c1.
	Name *string `pulumi:"name"`
}

// VpcAccessConnectorInput is an input type that accepts VpcAccessConnectorArgs and VpcAccessConnectorOutput values.
// You can construct a concrete instance of `VpcAccessConnectorInput` via:
//
//	VpcAccessConnectorArgs{...}
type VpcAccessConnectorInput interface {
	pulumi.Input

	ToVpcAccessConnectorOutput() VpcAccessConnectorOutput
	ToVpcAccessConnectorOutputWithContext(context.Context) VpcAccessConnectorOutput
}

// VPC access connector specification.
type VpcAccessConnectorArgs struct {
	// The egress setting for the connector, controlling what traffic is diverted through it.
	EgressSetting VpcAccessConnectorEgressSettingPtrInput `pulumi:"egressSetting"`
	// Full Serverless VPC Access Connector name e.g. projects/my-project/locations/us-central1/connectors/c1.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (VpcAccessConnectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcAccessConnector)(nil)).Elem()
}

func (i VpcAccessConnectorArgs) ToVpcAccessConnectorOutput() VpcAccessConnectorOutput {
	return i.ToVpcAccessConnectorOutputWithContext(context.Background())
}

func (i VpcAccessConnectorArgs) ToVpcAccessConnectorOutputWithContext(ctx context.Context) VpcAccessConnectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcAccessConnectorOutput)
}

func (i VpcAccessConnectorArgs) ToVpcAccessConnectorPtrOutput() VpcAccessConnectorPtrOutput {
	return i.ToVpcAccessConnectorPtrOutputWithContext(context.Background())
}

func (i VpcAccessConnectorArgs) ToVpcAccessConnectorPtrOutputWithContext(ctx context.Context) VpcAccessConnectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcAccessConnectorOutput).ToVpcAccessConnectorPtrOutputWithContext(ctx)
}

// VpcAccessConnectorPtrInput is an input type that accepts VpcAccessConnectorArgs, VpcAccessConnectorPtr and VpcAccessConnectorPtrOutput values.
// You can construct a concrete instance of `VpcAccessConnectorPtrInput` via:
//
//	        VpcAccessConnectorArgs{...}
//
//	or:
//
//	        nil
type VpcAccessConnectorPtrInput interface {
	pulumi.Input

	ToVpcAccessConnectorPtrOutput() VpcAccessConnectorPtrOutput
	ToVpcAccessConnectorPtrOutputWithContext(context.Context) VpcAccessConnectorPtrOutput
}

type vpcAccessConnectorPtrType VpcAccessConnectorArgs

func VpcAccessConnectorPtr(v *VpcAccessConnectorArgs) VpcAccessConnectorPtrInput {
	return (*vpcAccessConnectorPtrType)(v)
}

func (*vpcAccessConnectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcAccessConnector)(nil)).Elem()
}

func (i *vpcAccessConnectorPtrType) ToVpcAccessConnectorPtrOutput() VpcAccessConnectorPtrOutput {
	return i.ToVpcAccessConnectorPtrOutputWithContext(context.Background())
}

func (i *vpcAccessConnectorPtrType) ToVpcAccessConnectorPtrOutputWithContext(ctx context.Context) VpcAccessConnectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcAccessConnectorPtrOutput)
}

// VPC access connector specification.
type VpcAccessConnectorOutput struct{ *pulumi.OutputState }

func (VpcAccessConnectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcAccessConnector)(nil)).Elem()
}

func (o VpcAccessConnectorOutput) ToVpcAccessConnectorOutput() VpcAccessConnectorOutput {
	return o
}

func (o VpcAccessConnectorOutput) ToVpcAccessConnectorOutputWithContext(ctx context.Context) VpcAccessConnectorOutput {
	return o
}

func (o VpcAccessConnectorOutput) ToVpcAccessConnectorPtrOutput() VpcAccessConnectorPtrOutput {
	return o.ToVpcAccessConnectorPtrOutputWithContext(context.Background())
}

func (o VpcAccessConnectorOutput) ToVpcAccessConnectorPtrOutputWithContext(ctx context.Context) VpcAccessConnectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VpcAccessConnector) *VpcAccessConnector {
		return &v
	}).(VpcAccessConnectorPtrOutput)
}

// The egress setting for the connector, controlling what traffic is diverted through it.
func (o VpcAccessConnectorOutput) EgressSetting() VpcAccessConnectorEgressSettingPtrOutput {
	return o.ApplyT(func(v VpcAccessConnector) *VpcAccessConnectorEgressSetting { return v.EgressSetting }).(VpcAccessConnectorEgressSettingPtrOutput)
}

// Full Serverless VPC Access Connector name e.g. projects/my-project/locations/us-central1/connectors/c1.
func (o VpcAccessConnectorOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpcAccessConnector) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type VpcAccessConnectorPtrOutput struct{ *pulumi.OutputState }

func (VpcAccessConnectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcAccessConnector)(nil)).Elem()
}

func (o VpcAccessConnectorPtrOutput) ToVpcAccessConnectorPtrOutput() VpcAccessConnectorPtrOutput {
	return o
}

func (o VpcAccessConnectorPtrOutput) ToVpcAccessConnectorPtrOutputWithContext(ctx context.Context) VpcAccessConnectorPtrOutput {
	return o
}

func (o VpcAccessConnectorPtrOutput) Elem() VpcAccessConnectorOutput {
	return o.ApplyT(func(v *VpcAccessConnector) VpcAccessConnector {
		if v != nil {
			return *v
		}
		var ret VpcAccessConnector
		return ret
	}).(VpcAccessConnectorOutput)
}

// The egress setting for the connector, controlling what traffic is diverted through it.
func (o VpcAccessConnectorPtrOutput) EgressSetting() VpcAccessConnectorEgressSettingPtrOutput {
	return o.ApplyT(func(v *VpcAccessConnector) *VpcAccessConnectorEgressSetting {
		if v == nil {
			return nil
		}
		return v.EgressSetting
	}).(VpcAccessConnectorEgressSettingPtrOutput)
}

// Full Serverless VPC Access Connector name e.g. projects/my-project/locations/us-central1/connectors/c1.
func (o VpcAccessConnectorPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpcAccessConnector) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// VPC access connector specification.
type VpcAccessConnectorResponse struct {
	// The egress setting for the connector, controlling what traffic is diverted through it.
	EgressSetting string `pulumi:"egressSetting"`
	// Full Serverless VPC Access Connector name e.g. projects/my-project/locations/us-central1/connectors/c1.
	Name string `pulumi:"name"`
}

// VPC access connector specification.
type VpcAccessConnectorResponseOutput struct{ *pulumi.OutputState }

func (VpcAccessConnectorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcAccessConnectorResponse)(nil)).Elem()
}

func (o VpcAccessConnectorResponseOutput) ToVpcAccessConnectorResponseOutput() VpcAccessConnectorResponseOutput {
	return o
}

func (o VpcAccessConnectorResponseOutput) ToVpcAccessConnectorResponseOutputWithContext(ctx context.Context) VpcAccessConnectorResponseOutput {
	return o
}

// The egress setting for the connector, controlling what traffic is diverted through it.
func (o VpcAccessConnectorResponseOutput) EgressSetting() pulumi.StringOutput {
	return o.ApplyT(func(v VpcAccessConnectorResponse) string { return v.EgressSetting }).(pulumi.StringOutput)
}

// Full Serverless VPC Access Connector name e.g. projects/my-project/locations/us-central1/connectors/c1.
func (o VpcAccessConnectorResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VpcAccessConnectorResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The zip file information for a zip deployment.
type ZipInfo struct {
	// An estimate of the number of files in a zip for a zip deployment. If set, must be greater than or equal to the actual number of files. Used for optimizing performance; if not provided, deployment may be slow.
	FilesCount *int `pulumi:"filesCount"`
	// URL of the zip file to deploy from. Must be a URL to a resource in Google Cloud Storage in the form 'http(s)://storage.googleapis.com//'.
	SourceUrl *string `pulumi:"sourceUrl"`
}

// ZipInfoInput is an input type that accepts ZipInfoArgs and ZipInfoOutput values.
// You can construct a concrete instance of `ZipInfoInput` via:
//
//	ZipInfoArgs{...}
type ZipInfoInput interface {
	pulumi.Input

	ToZipInfoOutput() ZipInfoOutput
	ToZipInfoOutputWithContext(context.Context) ZipInfoOutput
}

// The zip file information for a zip deployment.
type ZipInfoArgs struct {
	// An estimate of the number of files in a zip for a zip deployment. If set, must be greater than or equal to the actual number of files. Used for optimizing performance; if not provided, deployment may be slow.
	FilesCount pulumi.IntPtrInput `pulumi:"filesCount"`
	// URL of the zip file to deploy from. Must be a URL to a resource in Google Cloud Storage in the form 'http(s)://storage.googleapis.com//'.
	SourceUrl pulumi.StringPtrInput `pulumi:"sourceUrl"`
}

func (ZipInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ZipInfo)(nil)).Elem()
}

func (i ZipInfoArgs) ToZipInfoOutput() ZipInfoOutput {
	return i.ToZipInfoOutputWithContext(context.Background())
}

func (i ZipInfoArgs) ToZipInfoOutputWithContext(ctx context.Context) ZipInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZipInfoOutput)
}

func (i ZipInfoArgs) ToZipInfoPtrOutput() ZipInfoPtrOutput {
	return i.ToZipInfoPtrOutputWithContext(context.Background())
}

func (i ZipInfoArgs) ToZipInfoPtrOutputWithContext(ctx context.Context) ZipInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZipInfoOutput).ToZipInfoPtrOutputWithContext(ctx)
}

// ZipInfoPtrInput is an input type that accepts ZipInfoArgs, ZipInfoPtr and ZipInfoPtrOutput values.
// You can construct a concrete instance of `ZipInfoPtrInput` via:
//
//	        ZipInfoArgs{...}
//
//	or:
//
//	        nil
type ZipInfoPtrInput interface {
	pulumi.Input

	ToZipInfoPtrOutput() ZipInfoPtrOutput
	ToZipInfoPtrOutputWithContext(context.Context) ZipInfoPtrOutput
}

type zipInfoPtrType ZipInfoArgs

func ZipInfoPtr(v *ZipInfoArgs) ZipInfoPtrInput {
	return (*zipInfoPtrType)(v)
}

func (*zipInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ZipInfo)(nil)).Elem()
}

func (i *zipInfoPtrType) ToZipInfoPtrOutput() ZipInfoPtrOutput {
	return i.ToZipInfoPtrOutputWithContext(context.Background())
}

func (i *zipInfoPtrType) ToZipInfoPtrOutputWithContext(ctx context.Context) ZipInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZipInfoPtrOutput)
}

// The zip file information for a zip deployment.
type ZipInfoOutput struct{ *pulumi.OutputState }

func (ZipInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ZipInfo)(nil)).Elem()
}

func (o ZipInfoOutput) ToZipInfoOutput() ZipInfoOutput {
	return o
}

func (o ZipInfoOutput) ToZipInfoOutputWithContext(ctx context.Context) ZipInfoOutput {
	return o
}

func (o ZipInfoOutput) ToZipInfoPtrOutput() ZipInfoPtrOutput {
	return o.ToZipInfoPtrOutputWithContext(context.Background())
}

func (o ZipInfoOutput) ToZipInfoPtrOutputWithContext(ctx context.Context) ZipInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ZipInfo) *ZipInfo {
		return &v
	}).(ZipInfoPtrOutput)
}

// An estimate of the number of files in a zip for a zip deployment. If set, must be greater than or equal to the actual number of files. Used for optimizing performance; if not provided, deployment may be slow.
func (o ZipInfoOutput) FilesCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ZipInfo) *int { return v.FilesCount }).(pulumi.IntPtrOutput)
}

// URL of the zip file to deploy from. Must be a URL to a resource in Google Cloud Storage in the form 'http(s)://storage.googleapis.com//'.
func (o ZipInfoOutput) SourceUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ZipInfo) *string { return v.SourceUrl }).(pulumi.StringPtrOutput)
}

type ZipInfoPtrOutput struct{ *pulumi.OutputState }

func (ZipInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ZipInfo)(nil)).Elem()
}

func (o ZipInfoPtrOutput) ToZipInfoPtrOutput() ZipInfoPtrOutput {
	return o
}

func (o ZipInfoPtrOutput) ToZipInfoPtrOutputWithContext(ctx context.Context) ZipInfoPtrOutput {
	return o
}

func (o ZipInfoPtrOutput) Elem() ZipInfoOutput {
	return o.ApplyT(func(v *ZipInfo) ZipInfo {
		if v != nil {
			return *v
		}
		var ret ZipInfo
		return ret
	}).(ZipInfoOutput)
}

// An estimate of the number of files in a zip for a zip deployment. If set, must be greater than or equal to the actual number of files. Used for optimizing performance; if not provided, deployment may be slow.
func (o ZipInfoPtrOutput) FilesCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ZipInfo) *int {
		if v == nil {
			return nil
		}
		return v.FilesCount
	}).(pulumi.IntPtrOutput)
}

// URL of the zip file to deploy from. Must be a URL to a resource in Google Cloud Storage in the form 'http(s)://storage.googleapis.com//'.
func (o ZipInfoPtrOutput) SourceUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ZipInfo) *string {
		if v == nil {
			return nil
		}
		return v.SourceUrl
	}).(pulumi.StringPtrOutput)
}

// The zip file information for a zip deployment.
type ZipInfoResponse struct {
	// An estimate of the number of files in a zip for a zip deployment. If set, must be greater than or equal to the actual number of files. Used for optimizing performance; if not provided, deployment may be slow.
	FilesCount int `pulumi:"filesCount"`
	// URL of the zip file to deploy from. Must be a URL to a resource in Google Cloud Storage in the form 'http(s)://storage.googleapis.com//'.
	SourceUrl string `pulumi:"sourceUrl"`
}

// The zip file information for a zip deployment.
type ZipInfoResponseOutput struct{ *pulumi.OutputState }

func (ZipInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ZipInfoResponse)(nil)).Elem()
}

func (o ZipInfoResponseOutput) ToZipInfoResponseOutput() ZipInfoResponseOutput {
	return o
}

func (o ZipInfoResponseOutput) ToZipInfoResponseOutputWithContext(ctx context.Context) ZipInfoResponseOutput {
	return o
}

// An estimate of the number of files in a zip for a zip deployment. If set, must be greater than or equal to the actual number of files. Used for optimizing performance; if not provided, deployment may be slow.
func (o ZipInfoResponseOutput) FilesCount() pulumi.IntOutput {
	return o.ApplyT(func(v ZipInfoResponse) int { return v.FilesCount }).(pulumi.IntOutput)
}

// URL of the zip file to deploy from. Must be a URL to a resource in Google Cloud Storage in the form 'http(s)://storage.googleapis.com//'.
func (o ZipInfoResponseOutput) SourceUrl() pulumi.StringOutput {
	return o.ApplyT(func(v ZipInfoResponse) string { return v.SourceUrl }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApiConfigHandlerInput)(nil)).Elem(), ApiConfigHandlerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiConfigHandlerPtrInput)(nil)).Elem(), ApiConfigHandlerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiEndpointHandlerInput)(nil)).Elem(), ApiEndpointHandlerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiEndpointHandlerPtrInput)(nil)).Elem(), ApiEndpointHandlerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutomaticScalingInput)(nil)).Elem(), AutomaticScalingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutomaticScalingPtrInput)(nil)).Elem(), AutomaticScalingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BasicScalingInput)(nil)).Elem(), BasicScalingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BasicScalingPtrInput)(nil)).Elem(), BasicScalingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateRawDataInput)(nil)).Elem(), CertificateRawDataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateRawDataPtrInput)(nil)).Elem(), CertificateRawDataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudBuildOptionsInput)(nil)).Elem(), CloudBuildOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudBuildOptionsPtrInput)(nil)).Elem(), CloudBuildOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerInfoInput)(nil)).Elem(), ContainerInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerInfoPtrInput)(nil)).Elem(), ContainerInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CpuUtilizationInput)(nil)).Elem(), CpuUtilizationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CpuUtilizationPtrInput)(nil)).Elem(), CpuUtilizationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentInput)(nil)).Elem(), DeploymentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentPtrInput)(nil)).Elem(), DeploymentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DiskUtilizationInput)(nil)).Elem(), DiskUtilizationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DiskUtilizationPtrInput)(nil)).Elem(), DiskUtilizationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointsApiServiceInput)(nil)).Elem(), EndpointsApiServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointsApiServicePtrInput)(nil)).Elem(), EndpointsApiServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntrypointInput)(nil)).Elem(), EntrypointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntrypointPtrInput)(nil)).Elem(), EntrypointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ErrorHandlerInput)(nil)).Elem(), ErrorHandlerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ErrorHandlerArrayInput)(nil)).Elem(), ErrorHandlerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureSettingsInput)(nil)).Elem(), FeatureSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureSettingsPtrInput)(nil)).Elem(), FeatureSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileInfoInput)(nil)).Elem(), FileInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileInfoPtrInput)(nil)).Elem(), FileInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlexibleRuntimeSettingsInput)(nil)).Elem(), FlexibleRuntimeSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlexibleRuntimeSettingsPtrInput)(nil)).Elem(), FlexibleRuntimeSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HealthCheckInput)(nil)).Elem(), HealthCheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HealthCheckPtrInput)(nil)).Elem(), HealthCheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityAwareProxyInput)(nil)).Elem(), IdentityAwareProxyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityAwareProxyPtrInput)(nil)).Elem(), IdentityAwareProxyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LibraryInput)(nil)).Elem(), LibraryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LibraryArrayInput)(nil)).Elem(), LibraryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LivenessCheckInput)(nil)).Elem(), LivenessCheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LivenessCheckPtrInput)(nil)).Elem(), LivenessCheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManualScalingInput)(nil)).Elem(), ManualScalingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManualScalingPtrInput)(nil)).Elem(), ManualScalingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkInput)(nil)).Elem(), NetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkPtrInput)(nil)).Elem(), NetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkUtilizationInput)(nil)).Elem(), NetworkUtilizationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkUtilizationPtrInput)(nil)).Elem(), NetworkUtilizationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReadinessCheckInput)(nil)).Elem(), ReadinessCheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReadinessCheckPtrInput)(nil)).Elem(), ReadinessCheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RequestUtilizationInput)(nil)).Elem(), RequestUtilizationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RequestUtilizationPtrInput)(nil)).Elem(), RequestUtilizationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourcesInput)(nil)).Elem(), ResourcesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourcesPtrInput)(nil)).Elem(), ResourcesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScriptHandlerInput)(nil)).Elem(), ScriptHandlerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScriptHandlerPtrInput)(nil)).Elem(), ScriptHandlerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SslSettingsInput)(nil)).Elem(), SslSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SslSettingsPtrInput)(nil)).Elem(), SslSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StandardSchedulerSettingsInput)(nil)).Elem(), StandardSchedulerSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StandardSchedulerSettingsPtrInput)(nil)).Elem(), StandardSchedulerSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StaticFilesHandlerInput)(nil)).Elem(), StaticFilesHandlerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StaticFilesHandlerPtrInput)(nil)).Elem(), StaticFilesHandlerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UrlDispatchRuleInput)(nil)).Elem(), UrlDispatchRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UrlDispatchRuleArrayInput)(nil)).Elem(), UrlDispatchRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UrlMapInput)(nil)).Elem(), UrlMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UrlMapArrayInput)(nil)).Elem(), UrlMapArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeInput)(nil)).Elem(), VolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeArrayInput)(nil)).Elem(), VolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcAccessConnectorInput)(nil)).Elem(), VpcAccessConnectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcAccessConnectorPtrInput)(nil)).Elem(), VpcAccessConnectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZipInfoInput)(nil)).Elem(), ZipInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZipInfoPtrInput)(nil)).Elem(), ZipInfoArgs{})
	pulumi.RegisterOutputType(ApiConfigHandlerOutput{})
	pulumi.RegisterOutputType(ApiConfigHandlerPtrOutput{})
	pulumi.RegisterOutputType(ApiConfigHandlerResponseOutput{})
	pulumi.RegisterOutputType(ApiEndpointHandlerOutput{})
	pulumi.RegisterOutputType(ApiEndpointHandlerPtrOutput{})
	pulumi.RegisterOutputType(ApiEndpointHandlerResponseOutput{})
	pulumi.RegisterOutputType(AutomaticScalingOutput{})
	pulumi.RegisterOutputType(AutomaticScalingPtrOutput{})
	pulumi.RegisterOutputType(AutomaticScalingResponseOutput{})
	pulumi.RegisterOutputType(BasicScalingOutput{})
	pulumi.RegisterOutputType(BasicScalingPtrOutput{})
	pulumi.RegisterOutputType(BasicScalingResponseOutput{})
	pulumi.RegisterOutputType(CertificateRawDataOutput{})
	pulumi.RegisterOutputType(CertificateRawDataPtrOutput{})
	pulumi.RegisterOutputType(CertificateRawDataResponseOutput{})
	pulumi.RegisterOutputType(CloudBuildOptionsOutput{})
	pulumi.RegisterOutputType(CloudBuildOptionsPtrOutput{})
	pulumi.RegisterOutputType(CloudBuildOptionsResponseOutput{})
	pulumi.RegisterOutputType(ContainerInfoOutput{})
	pulumi.RegisterOutputType(ContainerInfoPtrOutput{})
	pulumi.RegisterOutputType(ContainerInfoResponseOutput{})
	pulumi.RegisterOutputType(CpuUtilizationOutput{})
	pulumi.RegisterOutputType(CpuUtilizationPtrOutput{})
	pulumi.RegisterOutputType(CpuUtilizationResponseOutput{})
	pulumi.RegisterOutputType(DeploymentOutput{})
	pulumi.RegisterOutputType(DeploymentPtrOutput{})
	pulumi.RegisterOutputType(DeploymentResponseOutput{})
	pulumi.RegisterOutputType(DiskUtilizationOutput{})
	pulumi.RegisterOutputType(DiskUtilizationPtrOutput{})
	pulumi.RegisterOutputType(DiskUtilizationResponseOutput{})
	pulumi.RegisterOutputType(EndpointsApiServiceOutput{})
	pulumi.RegisterOutputType(EndpointsApiServicePtrOutput{})
	pulumi.RegisterOutputType(EndpointsApiServiceResponseOutput{})
	pulumi.RegisterOutputType(EntrypointOutput{})
	pulumi.RegisterOutputType(EntrypointPtrOutput{})
	pulumi.RegisterOutputType(EntrypointResponseOutput{})
	pulumi.RegisterOutputType(ErrorHandlerOutput{})
	pulumi.RegisterOutputType(ErrorHandlerArrayOutput{})
	pulumi.RegisterOutputType(ErrorHandlerResponseOutput{})
	pulumi.RegisterOutputType(ErrorHandlerResponseArrayOutput{})
	pulumi.RegisterOutputType(FeatureSettingsOutput{})
	pulumi.RegisterOutputType(FeatureSettingsPtrOutput{})
	pulumi.RegisterOutputType(FeatureSettingsResponseOutput{})
	pulumi.RegisterOutputType(FileInfoOutput{})
	pulumi.RegisterOutputType(FileInfoPtrOutput{})
	pulumi.RegisterOutputType(FileInfoResponseOutput{})
	pulumi.RegisterOutputType(FlexibleRuntimeSettingsOutput{})
	pulumi.RegisterOutputType(FlexibleRuntimeSettingsPtrOutput{})
	pulumi.RegisterOutputType(FlexibleRuntimeSettingsResponseOutput{})
	pulumi.RegisterOutputType(HealthCheckOutput{})
	pulumi.RegisterOutputType(HealthCheckPtrOutput{})
	pulumi.RegisterOutputType(HealthCheckResponseOutput{})
	pulumi.RegisterOutputType(IdentityAwareProxyOutput{})
	pulumi.RegisterOutputType(IdentityAwareProxyPtrOutput{})
	pulumi.RegisterOutputType(IdentityAwareProxyResponseOutput{})
	pulumi.RegisterOutputType(LibraryOutput{})
	pulumi.RegisterOutputType(LibraryArrayOutput{})
	pulumi.RegisterOutputType(LibraryResponseOutput{})
	pulumi.RegisterOutputType(LibraryResponseArrayOutput{})
	pulumi.RegisterOutputType(LivenessCheckOutput{})
	pulumi.RegisterOutputType(LivenessCheckPtrOutput{})
	pulumi.RegisterOutputType(LivenessCheckResponseOutput{})
	pulumi.RegisterOutputType(ManagedCertificateResponseOutput{})
	pulumi.RegisterOutputType(ManualScalingOutput{})
	pulumi.RegisterOutputType(ManualScalingPtrOutput{})
	pulumi.RegisterOutputType(ManualScalingResponseOutput{})
	pulumi.RegisterOutputType(NetworkOutput{})
	pulumi.RegisterOutputType(NetworkPtrOutput{})
	pulumi.RegisterOutputType(NetworkResponseOutput{})
	pulumi.RegisterOutputType(NetworkUtilizationOutput{})
	pulumi.RegisterOutputType(NetworkUtilizationPtrOutput{})
	pulumi.RegisterOutputType(NetworkUtilizationResponseOutput{})
	pulumi.RegisterOutputType(ReadinessCheckOutput{})
	pulumi.RegisterOutputType(ReadinessCheckPtrOutput{})
	pulumi.RegisterOutputType(ReadinessCheckResponseOutput{})
	pulumi.RegisterOutputType(RequestUtilizationOutput{})
	pulumi.RegisterOutputType(RequestUtilizationPtrOutput{})
	pulumi.RegisterOutputType(RequestUtilizationResponseOutput{})
	pulumi.RegisterOutputType(ResourceRecordResponseOutput{})
	pulumi.RegisterOutputType(ResourceRecordResponseArrayOutput{})
	pulumi.RegisterOutputType(ResourcesOutput{})
	pulumi.RegisterOutputType(ResourcesPtrOutput{})
	pulumi.RegisterOutputType(ResourcesResponseOutput{})
	pulumi.RegisterOutputType(ScriptHandlerOutput{})
	pulumi.RegisterOutputType(ScriptHandlerPtrOutput{})
	pulumi.RegisterOutputType(ScriptHandlerResponseOutput{})
	pulumi.RegisterOutputType(SslSettingsOutput{})
	pulumi.RegisterOutputType(SslSettingsPtrOutput{})
	pulumi.RegisterOutputType(SslSettingsResponseOutput{})
	pulumi.RegisterOutputType(StandardSchedulerSettingsOutput{})
	pulumi.RegisterOutputType(StandardSchedulerSettingsPtrOutput{})
	pulumi.RegisterOutputType(StandardSchedulerSettingsResponseOutput{})
	pulumi.RegisterOutputType(StaticFilesHandlerOutput{})
	pulumi.RegisterOutputType(StaticFilesHandlerPtrOutput{})
	pulumi.RegisterOutputType(StaticFilesHandlerResponseOutput{})
	pulumi.RegisterOutputType(UrlDispatchRuleOutput{})
	pulumi.RegisterOutputType(UrlDispatchRuleArrayOutput{})
	pulumi.RegisterOutputType(UrlDispatchRuleResponseOutput{})
	pulumi.RegisterOutputType(UrlDispatchRuleResponseArrayOutput{})
	pulumi.RegisterOutputType(UrlMapOutput{})
	pulumi.RegisterOutputType(UrlMapArrayOutput{})
	pulumi.RegisterOutputType(UrlMapResponseOutput{})
	pulumi.RegisterOutputType(UrlMapResponseArrayOutput{})
	pulumi.RegisterOutputType(VolumeOutput{})
	pulumi.RegisterOutputType(VolumeArrayOutput{})
	pulumi.RegisterOutputType(VolumeResponseOutput{})
	pulumi.RegisterOutputType(VolumeResponseArrayOutput{})
	pulumi.RegisterOutputType(VpcAccessConnectorOutput{})
	pulumi.RegisterOutputType(VpcAccessConnectorPtrOutput{})
	pulumi.RegisterOutputType(VpcAccessConnectorResponseOutput{})
	pulumi.RegisterOutputType(ZipInfoOutput{})
	pulumi.RegisterOutputType(ZipInfoPtrOutput{})
	pulumi.RegisterOutputType(ZipInfoResponseOutput{})
}
