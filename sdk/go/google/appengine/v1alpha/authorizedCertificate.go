// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Uploads the specified SSL certificate.
// Auto-naming is currently not supported for this resource.
type AuthorizedCertificate struct {
	pulumi.CustomResourceState

	// The SSL certificate serving the AuthorizedCertificate resource. This must be obtained independently from a certificate authority.
	CertificateRawData CertificateRawDataResponseOutput `pulumi:"certificateRawData"`
	// The user-specified display name of the certificate. This is not guaranteed to be unique. Example: My Certificate.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Aggregate count of the domain mappings with this certificate mapped. This count includes domain mappings on applications for which the user does not have VIEWER permissions.Only returned by GET or LIST requests when specifically requested by the view=FULL_CERTIFICATE option.
	DomainMappingsCount pulumi.IntOutput `pulumi:"domainMappingsCount"`
	// Topmost applicable domains of this certificate. This certificate applies to these domains and their subdomains. Example: example.com.
	DomainNames pulumi.StringArrayOutput `pulumi:"domainNames"`
	// The time when this certificate expires. To update the renewal time on this certificate, upload an SSL certificate with a different expiration time using AuthorizedCertificates.UpdateAuthorizedCertificate.
	ExpireTime pulumi.StringOutput `pulumi:"expireTime"`
	// Only applicable if this certificate is managed by App Engine. Managed certificates are tied to the lifecycle of a DomainMapping and cannot be updated or deleted via the AuthorizedCertificates API. If this certificate is manually administered by the user, this field will be empty.
	ManagedCertificate ManagedCertificateResponseOutput `pulumi:"managedCertificate"`
	// Full path to the AuthorizedCertificate resource in the API. Example: apps/myapp/authorizedCertificates/12345.
	Name pulumi.StringOutput `pulumi:"name"`
	// The full paths to user visible Domain Mapping resources that have this certificate mapped. Example: apps/myapp/domainMappings/example.com.This may not represent the full list of mapped domain mappings if the user does not have VIEWER permissions on all of the applications that have this certificate mapped. See domain_mappings_count for a complete count.Only returned by GET or LIST requests when specifically requested by the view=FULL_CERTIFICATE option.
	VisibleDomainMappings pulumi.StringArrayOutput `pulumi:"visibleDomainMappings"`
}

// NewAuthorizedCertificate registers a new resource with the given unique name, arguments, and options.
func NewAuthorizedCertificate(ctx *pulumi.Context,
	name string, args *AuthorizedCertificateArgs, opts ...pulumi.ResourceOption) (*AuthorizedCertificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppId == nil {
		return nil, errors.New("invalid value for required argument 'AppId'")
	}
	var resource AuthorizedCertificate
	err := ctx.RegisterResource("google-native:appengine/v1alpha:AuthorizedCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuthorizedCertificate gets an existing AuthorizedCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthorizedCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthorizedCertificateState, opts ...pulumi.ResourceOption) (*AuthorizedCertificate, error) {
	var resource AuthorizedCertificate
	err := ctx.ReadResource("google-native:appengine/v1alpha:AuthorizedCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AuthorizedCertificate resources.
type authorizedCertificateState struct {
}

type AuthorizedCertificateState struct {
}

func (AuthorizedCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*authorizedCertificateState)(nil)).Elem()
}

type authorizedCertificateArgs struct {
	AppId string `pulumi:"appId"`
	// The SSL certificate serving the AuthorizedCertificate resource. This must be obtained independently from a certificate authority.
	CertificateRawData *CertificateRawData `pulumi:"certificateRawData"`
	// The user-specified display name of the certificate. This is not guaranteed to be unique. Example: My Certificate.
	DisplayName *string `pulumi:"displayName"`
}

// The set of arguments for constructing a AuthorizedCertificate resource.
type AuthorizedCertificateArgs struct {
	AppId pulumi.StringInput
	// The SSL certificate serving the AuthorizedCertificate resource. This must be obtained independently from a certificate authority.
	CertificateRawData CertificateRawDataPtrInput
	// The user-specified display name of the certificate. This is not guaranteed to be unique. Example: My Certificate.
	DisplayName pulumi.StringPtrInput
}

func (AuthorizedCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*authorizedCertificateArgs)(nil)).Elem()
}

type AuthorizedCertificateInput interface {
	pulumi.Input

	ToAuthorizedCertificateOutput() AuthorizedCertificateOutput
	ToAuthorizedCertificateOutputWithContext(ctx context.Context) AuthorizedCertificateOutput
}

func (*AuthorizedCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthorizedCertificate)(nil)).Elem()
}

func (i *AuthorizedCertificate) ToAuthorizedCertificateOutput() AuthorizedCertificateOutput {
	return i.ToAuthorizedCertificateOutputWithContext(context.Background())
}

func (i *AuthorizedCertificate) ToAuthorizedCertificateOutputWithContext(ctx context.Context) AuthorizedCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizedCertificateOutput)
}

type AuthorizedCertificateOutput struct{ *pulumi.OutputState }

func (AuthorizedCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthorizedCertificate)(nil)).Elem()
}

func (o AuthorizedCertificateOutput) ToAuthorizedCertificateOutput() AuthorizedCertificateOutput {
	return o
}

func (o AuthorizedCertificateOutput) ToAuthorizedCertificateOutputWithContext(ctx context.Context) AuthorizedCertificateOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorizedCertificateInput)(nil)).Elem(), &AuthorizedCertificate{})
	pulumi.RegisterOutputType(AuthorizedCertificateOutput{})
}
