// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Parameters for DnsKey key generation. Used for generating initial keys for a new ManagedZone and as default when adding a new DnsKey.
type DnsKeySpec struct {
	// String mnemonic specifying the DNSSEC algorithm of this key.
	Algorithm *string `pulumi:"algorithm"`
	// Length of the keys in bits.
	KeyLength *int `pulumi:"keyLength"`
	// Specifies whether this is a key signing key (KSK) or a zone signing key (ZSK). Key signing keys have the Secure Entry Point flag set and, when active, are only used to sign resource record sets of type DNSKEY. Zone signing keys do not have the Secure Entry Point flag set and are used to sign all other types of resource record sets.
	KeyType *string `pulumi:"keyType"`
	Kind    *string `pulumi:"kind"`
}

// DnsKeySpecInput is an input type that accepts DnsKeySpecArgs and DnsKeySpecOutput values.
// You can construct a concrete instance of `DnsKeySpecInput` via:
//
//          DnsKeySpecArgs{...}
type DnsKeySpecInput interface {
	pulumi.Input

	ToDnsKeySpecOutput() DnsKeySpecOutput
	ToDnsKeySpecOutputWithContext(context.Context) DnsKeySpecOutput
}

// Parameters for DnsKey key generation. Used for generating initial keys for a new ManagedZone and as default when adding a new DnsKey.
type DnsKeySpecArgs struct {
	// String mnemonic specifying the DNSSEC algorithm of this key.
	Algorithm pulumi.StringPtrInput `pulumi:"algorithm"`
	// Length of the keys in bits.
	KeyLength pulumi.IntPtrInput `pulumi:"keyLength"`
	// Specifies whether this is a key signing key (KSK) or a zone signing key (ZSK). Key signing keys have the Secure Entry Point flag set and, when active, are only used to sign resource record sets of type DNSKEY. Zone signing keys do not have the Secure Entry Point flag set and are used to sign all other types of resource record sets.
	KeyType pulumi.StringPtrInput `pulumi:"keyType"`
	Kind    pulumi.StringPtrInput `pulumi:"kind"`
}

func (DnsKeySpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsKeySpec)(nil)).Elem()
}

func (i DnsKeySpecArgs) ToDnsKeySpecOutput() DnsKeySpecOutput {
	return i.ToDnsKeySpecOutputWithContext(context.Background())
}

func (i DnsKeySpecArgs) ToDnsKeySpecOutputWithContext(ctx context.Context) DnsKeySpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsKeySpecOutput)
}

// DnsKeySpecArrayInput is an input type that accepts DnsKeySpecArray and DnsKeySpecArrayOutput values.
// You can construct a concrete instance of `DnsKeySpecArrayInput` via:
//
//          DnsKeySpecArray{ DnsKeySpecArgs{...} }
type DnsKeySpecArrayInput interface {
	pulumi.Input

	ToDnsKeySpecArrayOutput() DnsKeySpecArrayOutput
	ToDnsKeySpecArrayOutputWithContext(context.Context) DnsKeySpecArrayOutput
}

type DnsKeySpecArray []DnsKeySpecInput

func (DnsKeySpecArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DnsKeySpec)(nil)).Elem()
}

func (i DnsKeySpecArray) ToDnsKeySpecArrayOutput() DnsKeySpecArrayOutput {
	return i.ToDnsKeySpecArrayOutputWithContext(context.Background())
}

func (i DnsKeySpecArray) ToDnsKeySpecArrayOutputWithContext(ctx context.Context) DnsKeySpecArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsKeySpecArrayOutput)
}

// Parameters for DnsKey key generation. Used for generating initial keys for a new ManagedZone and as default when adding a new DnsKey.
type DnsKeySpecOutput struct{ *pulumi.OutputState }

func (DnsKeySpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsKeySpec)(nil)).Elem()
}

func (o DnsKeySpecOutput) ToDnsKeySpecOutput() DnsKeySpecOutput {
	return o
}

func (o DnsKeySpecOutput) ToDnsKeySpecOutputWithContext(ctx context.Context) DnsKeySpecOutput {
	return o
}

// String mnemonic specifying the DNSSEC algorithm of this key.
func (o DnsKeySpecOutput) Algorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DnsKeySpec) *string { return v.Algorithm }).(pulumi.StringPtrOutput)
}

// Length of the keys in bits.
func (o DnsKeySpecOutput) KeyLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DnsKeySpec) *int { return v.KeyLength }).(pulumi.IntPtrOutput)
}

// Specifies whether this is a key signing key (KSK) or a zone signing key (ZSK). Key signing keys have the Secure Entry Point flag set and, when active, are only used to sign resource record sets of type DNSKEY. Zone signing keys do not have the Secure Entry Point flag set and are used to sign all other types of resource record sets.
func (o DnsKeySpecOutput) KeyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DnsKeySpec) *string { return v.KeyType }).(pulumi.StringPtrOutput)
}

func (o DnsKeySpecOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DnsKeySpec) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

type DnsKeySpecArrayOutput struct{ *pulumi.OutputState }

func (DnsKeySpecArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DnsKeySpec)(nil)).Elem()
}

func (o DnsKeySpecArrayOutput) ToDnsKeySpecArrayOutput() DnsKeySpecArrayOutput {
	return o
}

func (o DnsKeySpecArrayOutput) ToDnsKeySpecArrayOutputWithContext(ctx context.Context) DnsKeySpecArrayOutput {
	return o
}

func (o DnsKeySpecArrayOutput) Index(i pulumi.IntInput) DnsKeySpecOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DnsKeySpec {
		return vs[0].([]DnsKeySpec)[vs[1].(int)]
	}).(DnsKeySpecOutput)
}

type ManagedZoneDnsSecConfig struct {
	// Specifies parameters for generating initial DnsKeys for this ManagedZone. Can only be changed while the state is OFF.
	DefaultKeySpecs []DnsKeySpec `pulumi:"defaultKeySpecs"`
	Kind            *string      `pulumi:"kind"`
	// Specifies the mechanism for authenticated denial-of-existence responses. Can only be changed while the state is OFF.
	NonExistence *string `pulumi:"nonExistence"`
	// Specifies whether DNSSEC is enabled, and what mode it is in.
	State *string `pulumi:"state"`
}

// ManagedZoneDnsSecConfigInput is an input type that accepts ManagedZoneDnsSecConfigArgs and ManagedZoneDnsSecConfigOutput values.
// You can construct a concrete instance of `ManagedZoneDnsSecConfigInput` via:
//
//          ManagedZoneDnsSecConfigArgs{...}
type ManagedZoneDnsSecConfigInput interface {
	pulumi.Input

	ToManagedZoneDnsSecConfigOutput() ManagedZoneDnsSecConfigOutput
	ToManagedZoneDnsSecConfigOutputWithContext(context.Context) ManagedZoneDnsSecConfigOutput
}

type ManagedZoneDnsSecConfigArgs struct {
	// Specifies parameters for generating initial DnsKeys for this ManagedZone. Can only be changed while the state is OFF.
	DefaultKeySpecs DnsKeySpecArrayInput  `pulumi:"defaultKeySpecs"`
	Kind            pulumi.StringPtrInput `pulumi:"kind"`
	// Specifies the mechanism for authenticated denial-of-existence responses. Can only be changed while the state is OFF.
	NonExistence pulumi.StringPtrInput `pulumi:"nonExistence"`
	// Specifies whether DNSSEC is enabled, and what mode it is in.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (ManagedZoneDnsSecConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneDnsSecConfig)(nil)).Elem()
}

func (i ManagedZoneDnsSecConfigArgs) ToManagedZoneDnsSecConfigOutput() ManagedZoneDnsSecConfigOutput {
	return i.ToManagedZoneDnsSecConfigOutputWithContext(context.Background())
}

func (i ManagedZoneDnsSecConfigArgs) ToManagedZoneDnsSecConfigOutputWithContext(ctx context.Context) ManagedZoneDnsSecConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneDnsSecConfigOutput)
}

func (i ManagedZoneDnsSecConfigArgs) ToManagedZoneDnsSecConfigPtrOutput() ManagedZoneDnsSecConfigPtrOutput {
	return i.ToManagedZoneDnsSecConfigPtrOutputWithContext(context.Background())
}

func (i ManagedZoneDnsSecConfigArgs) ToManagedZoneDnsSecConfigPtrOutputWithContext(ctx context.Context) ManagedZoneDnsSecConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneDnsSecConfigOutput).ToManagedZoneDnsSecConfigPtrOutputWithContext(ctx)
}

// ManagedZoneDnsSecConfigPtrInput is an input type that accepts ManagedZoneDnsSecConfigArgs, ManagedZoneDnsSecConfigPtr and ManagedZoneDnsSecConfigPtrOutput values.
// You can construct a concrete instance of `ManagedZoneDnsSecConfigPtrInput` via:
//
//          ManagedZoneDnsSecConfigArgs{...}
//
//  or:
//
//          nil
type ManagedZoneDnsSecConfigPtrInput interface {
	pulumi.Input

	ToManagedZoneDnsSecConfigPtrOutput() ManagedZoneDnsSecConfigPtrOutput
	ToManagedZoneDnsSecConfigPtrOutputWithContext(context.Context) ManagedZoneDnsSecConfigPtrOutput
}

type managedZoneDnsSecConfigPtrType ManagedZoneDnsSecConfigArgs

func ManagedZoneDnsSecConfigPtr(v *ManagedZoneDnsSecConfigArgs) ManagedZoneDnsSecConfigPtrInput {
	return (*managedZoneDnsSecConfigPtrType)(v)
}

func (*managedZoneDnsSecConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZoneDnsSecConfig)(nil)).Elem()
}

func (i *managedZoneDnsSecConfigPtrType) ToManagedZoneDnsSecConfigPtrOutput() ManagedZoneDnsSecConfigPtrOutput {
	return i.ToManagedZoneDnsSecConfigPtrOutputWithContext(context.Background())
}

func (i *managedZoneDnsSecConfigPtrType) ToManagedZoneDnsSecConfigPtrOutputWithContext(ctx context.Context) ManagedZoneDnsSecConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneDnsSecConfigPtrOutput)
}

type ManagedZoneDnsSecConfigOutput struct{ *pulumi.OutputState }

func (ManagedZoneDnsSecConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneDnsSecConfig)(nil)).Elem()
}

func (o ManagedZoneDnsSecConfigOutput) ToManagedZoneDnsSecConfigOutput() ManagedZoneDnsSecConfigOutput {
	return o
}

func (o ManagedZoneDnsSecConfigOutput) ToManagedZoneDnsSecConfigOutputWithContext(ctx context.Context) ManagedZoneDnsSecConfigOutput {
	return o
}

func (o ManagedZoneDnsSecConfigOutput) ToManagedZoneDnsSecConfigPtrOutput() ManagedZoneDnsSecConfigPtrOutput {
	return o.ToManagedZoneDnsSecConfigPtrOutputWithContext(context.Background())
}

func (o ManagedZoneDnsSecConfigOutput) ToManagedZoneDnsSecConfigPtrOutputWithContext(ctx context.Context) ManagedZoneDnsSecConfigPtrOutput {
	return o.ApplyT(func(v ManagedZoneDnsSecConfig) *ManagedZoneDnsSecConfig {
		return &v
	}).(ManagedZoneDnsSecConfigPtrOutput)
}

// Specifies parameters for generating initial DnsKeys for this ManagedZone. Can only be changed while the state is OFF.
func (o ManagedZoneDnsSecConfigOutput) DefaultKeySpecs() DnsKeySpecArrayOutput {
	return o.ApplyT(func(v ManagedZoneDnsSecConfig) []DnsKeySpec { return v.DefaultKeySpecs }).(DnsKeySpecArrayOutput)
}

func (o ManagedZoneDnsSecConfigOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZoneDnsSecConfig) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Specifies the mechanism for authenticated denial-of-existence responses. Can only be changed while the state is OFF.
func (o ManagedZoneDnsSecConfigOutput) NonExistence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZoneDnsSecConfig) *string { return v.NonExistence }).(pulumi.StringPtrOutput)
}

// Specifies whether DNSSEC is enabled, and what mode it is in.
func (o ManagedZoneDnsSecConfigOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZoneDnsSecConfig) *string { return v.State }).(pulumi.StringPtrOutput)
}

type ManagedZoneDnsSecConfigPtrOutput struct{ *pulumi.OutputState }

func (ManagedZoneDnsSecConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZoneDnsSecConfig)(nil)).Elem()
}

func (o ManagedZoneDnsSecConfigPtrOutput) ToManagedZoneDnsSecConfigPtrOutput() ManagedZoneDnsSecConfigPtrOutput {
	return o
}

func (o ManagedZoneDnsSecConfigPtrOutput) ToManagedZoneDnsSecConfigPtrOutputWithContext(ctx context.Context) ManagedZoneDnsSecConfigPtrOutput {
	return o
}

func (o ManagedZoneDnsSecConfigPtrOutput) Elem() ManagedZoneDnsSecConfigOutput {
	return o.ApplyT(func(v *ManagedZoneDnsSecConfig) ManagedZoneDnsSecConfig { return *v }).(ManagedZoneDnsSecConfigOutput)
}

// Specifies parameters for generating initial DnsKeys for this ManagedZone. Can only be changed while the state is OFF.
func (o ManagedZoneDnsSecConfigPtrOutput) DefaultKeySpecs() DnsKeySpecArrayOutput {
	return o.ApplyT(func(v *ManagedZoneDnsSecConfig) []DnsKeySpec {
		if v == nil {
			return nil
		}
		return v.DefaultKeySpecs
	}).(DnsKeySpecArrayOutput)
}

func (o ManagedZoneDnsSecConfigPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedZoneDnsSecConfig) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Specifies the mechanism for authenticated denial-of-existence responses. Can only be changed while the state is OFF.
func (o ManagedZoneDnsSecConfigPtrOutput) NonExistence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedZoneDnsSecConfig) *string {
		if v == nil {
			return nil
		}
		return v.NonExistence
	}).(pulumi.StringPtrOutput)
}

// Specifies whether DNSSEC is enabled, and what mode it is in.
func (o ManagedZoneDnsSecConfigPtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedZoneDnsSecConfig) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

type ManagedZoneForwardingConfig struct {
	Kind *string `pulumi:"kind"`
	// List of target name servers to forward to. Cloud DNS selects the best available name server if more than one target is given.
	TargetNameServers []ManagedZoneForwardingConfigNameServerTarget `pulumi:"targetNameServers"`
}

// ManagedZoneForwardingConfigInput is an input type that accepts ManagedZoneForwardingConfigArgs and ManagedZoneForwardingConfigOutput values.
// You can construct a concrete instance of `ManagedZoneForwardingConfigInput` via:
//
//          ManagedZoneForwardingConfigArgs{...}
type ManagedZoneForwardingConfigInput interface {
	pulumi.Input

	ToManagedZoneForwardingConfigOutput() ManagedZoneForwardingConfigOutput
	ToManagedZoneForwardingConfigOutputWithContext(context.Context) ManagedZoneForwardingConfigOutput
}

type ManagedZoneForwardingConfigArgs struct {
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// List of target name servers to forward to. Cloud DNS selects the best available name server if more than one target is given.
	TargetNameServers ManagedZoneForwardingConfigNameServerTargetArrayInput `pulumi:"targetNameServers"`
}

func (ManagedZoneForwardingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneForwardingConfig)(nil)).Elem()
}

func (i ManagedZoneForwardingConfigArgs) ToManagedZoneForwardingConfigOutput() ManagedZoneForwardingConfigOutput {
	return i.ToManagedZoneForwardingConfigOutputWithContext(context.Background())
}

func (i ManagedZoneForwardingConfigArgs) ToManagedZoneForwardingConfigOutputWithContext(ctx context.Context) ManagedZoneForwardingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneForwardingConfigOutput)
}

func (i ManagedZoneForwardingConfigArgs) ToManagedZoneForwardingConfigPtrOutput() ManagedZoneForwardingConfigPtrOutput {
	return i.ToManagedZoneForwardingConfigPtrOutputWithContext(context.Background())
}

func (i ManagedZoneForwardingConfigArgs) ToManagedZoneForwardingConfigPtrOutputWithContext(ctx context.Context) ManagedZoneForwardingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneForwardingConfigOutput).ToManagedZoneForwardingConfigPtrOutputWithContext(ctx)
}

// ManagedZoneForwardingConfigPtrInput is an input type that accepts ManagedZoneForwardingConfigArgs, ManagedZoneForwardingConfigPtr and ManagedZoneForwardingConfigPtrOutput values.
// You can construct a concrete instance of `ManagedZoneForwardingConfigPtrInput` via:
//
//          ManagedZoneForwardingConfigArgs{...}
//
//  or:
//
//          nil
type ManagedZoneForwardingConfigPtrInput interface {
	pulumi.Input

	ToManagedZoneForwardingConfigPtrOutput() ManagedZoneForwardingConfigPtrOutput
	ToManagedZoneForwardingConfigPtrOutputWithContext(context.Context) ManagedZoneForwardingConfigPtrOutput
}

type managedZoneForwardingConfigPtrType ManagedZoneForwardingConfigArgs

func ManagedZoneForwardingConfigPtr(v *ManagedZoneForwardingConfigArgs) ManagedZoneForwardingConfigPtrInput {
	return (*managedZoneForwardingConfigPtrType)(v)
}

func (*managedZoneForwardingConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZoneForwardingConfig)(nil)).Elem()
}

func (i *managedZoneForwardingConfigPtrType) ToManagedZoneForwardingConfigPtrOutput() ManagedZoneForwardingConfigPtrOutput {
	return i.ToManagedZoneForwardingConfigPtrOutputWithContext(context.Background())
}

func (i *managedZoneForwardingConfigPtrType) ToManagedZoneForwardingConfigPtrOutputWithContext(ctx context.Context) ManagedZoneForwardingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneForwardingConfigPtrOutput)
}

type ManagedZoneForwardingConfigOutput struct{ *pulumi.OutputState }

func (ManagedZoneForwardingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneForwardingConfig)(nil)).Elem()
}

func (o ManagedZoneForwardingConfigOutput) ToManagedZoneForwardingConfigOutput() ManagedZoneForwardingConfigOutput {
	return o
}

func (o ManagedZoneForwardingConfigOutput) ToManagedZoneForwardingConfigOutputWithContext(ctx context.Context) ManagedZoneForwardingConfigOutput {
	return o
}

func (o ManagedZoneForwardingConfigOutput) ToManagedZoneForwardingConfigPtrOutput() ManagedZoneForwardingConfigPtrOutput {
	return o.ToManagedZoneForwardingConfigPtrOutputWithContext(context.Background())
}

func (o ManagedZoneForwardingConfigOutput) ToManagedZoneForwardingConfigPtrOutputWithContext(ctx context.Context) ManagedZoneForwardingConfigPtrOutput {
	return o.ApplyT(func(v ManagedZoneForwardingConfig) *ManagedZoneForwardingConfig {
		return &v
	}).(ManagedZoneForwardingConfigPtrOutput)
}
func (o ManagedZoneForwardingConfigOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZoneForwardingConfig) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// List of target name servers to forward to. Cloud DNS selects the best available name server if more than one target is given.
func (o ManagedZoneForwardingConfigOutput) TargetNameServers() ManagedZoneForwardingConfigNameServerTargetArrayOutput {
	return o.ApplyT(func(v ManagedZoneForwardingConfig) []ManagedZoneForwardingConfigNameServerTarget {
		return v.TargetNameServers
	}).(ManagedZoneForwardingConfigNameServerTargetArrayOutput)
}

type ManagedZoneForwardingConfigPtrOutput struct{ *pulumi.OutputState }

func (ManagedZoneForwardingConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZoneForwardingConfig)(nil)).Elem()
}

func (o ManagedZoneForwardingConfigPtrOutput) ToManagedZoneForwardingConfigPtrOutput() ManagedZoneForwardingConfigPtrOutput {
	return o
}

func (o ManagedZoneForwardingConfigPtrOutput) ToManagedZoneForwardingConfigPtrOutputWithContext(ctx context.Context) ManagedZoneForwardingConfigPtrOutput {
	return o
}

func (o ManagedZoneForwardingConfigPtrOutput) Elem() ManagedZoneForwardingConfigOutput {
	return o.ApplyT(func(v *ManagedZoneForwardingConfig) ManagedZoneForwardingConfig { return *v }).(ManagedZoneForwardingConfigOutput)
}

func (o ManagedZoneForwardingConfigPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedZoneForwardingConfig) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// List of target name servers to forward to. Cloud DNS selects the best available name server if more than one target is given.
func (o ManagedZoneForwardingConfigPtrOutput) TargetNameServers() ManagedZoneForwardingConfigNameServerTargetArrayOutput {
	return o.ApplyT(func(v *ManagedZoneForwardingConfig) []ManagedZoneForwardingConfigNameServerTarget {
		if v == nil {
			return nil
		}
		return v.TargetNameServers
	}).(ManagedZoneForwardingConfigNameServerTargetArrayOutput)
}

type ManagedZoneForwardingConfigNameServerTarget struct {
	// Forwarding path for this NameServerTarget. If unset or set to DEFAULT, Cloud DNS makes forwarding decisions based on IP address ranges; that is, RFC1918 addresses go to the VPC network, non-RFC1918 addresses go to the internet. When set to PRIVATE, Cloud DNS always sends queries through the VPC network for this target.
	ForwardingPath *string `pulumi:"forwardingPath"`
	// IPv4 address of a target name server.
	Ipv4Address *string `pulumi:"ipv4Address"`
	Kind        *string `pulumi:"kind"`
}

// ManagedZoneForwardingConfigNameServerTargetInput is an input type that accepts ManagedZoneForwardingConfigNameServerTargetArgs and ManagedZoneForwardingConfigNameServerTargetOutput values.
// You can construct a concrete instance of `ManagedZoneForwardingConfigNameServerTargetInput` via:
//
//          ManagedZoneForwardingConfigNameServerTargetArgs{...}
type ManagedZoneForwardingConfigNameServerTargetInput interface {
	pulumi.Input

	ToManagedZoneForwardingConfigNameServerTargetOutput() ManagedZoneForwardingConfigNameServerTargetOutput
	ToManagedZoneForwardingConfigNameServerTargetOutputWithContext(context.Context) ManagedZoneForwardingConfigNameServerTargetOutput
}

type ManagedZoneForwardingConfigNameServerTargetArgs struct {
	// Forwarding path for this NameServerTarget. If unset or set to DEFAULT, Cloud DNS makes forwarding decisions based on IP address ranges; that is, RFC1918 addresses go to the VPC network, non-RFC1918 addresses go to the internet. When set to PRIVATE, Cloud DNS always sends queries through the VPC network for this target.
	ForwardingPath pulumi.StringPtrInput `pulumi:"forwardingPath"`
	// IPv4 address of a target name server.
	Ipv4Address pulumi.StringPtrInput `pulumi:"ipv4Address"`
	Kind        pulumi.StringPtrInput `pulumi:"kind"`
}

func (ManagedZoneForwardingConfigNameServerTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneForwardingConfigNameServerTarget)(nil)).Elem()
}

func (i ManagedZoneForwardingConfigNameServerTargetArgs) ToManagedZoneForwardingConfigNameServerTargetOutput() ManagedZoneForwardingConfigNameServerTargetOutput {
	return i.ToManagedZoneForwardingConfigNameServerTargetOutputWithContext(context.Background())
}

func (i ManagedZoneForwardingConfigNameServerTargetArgs) ToManagedZoneForwardingConfigNameServerTargetOutputWithContext(ctx context.Context) ManagedZoneForwardingConfigNameServerTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneForwardingConfigNameServerTargetOutput)
}

// ManagedZoneForwardingConfigNameServerTargetArrayInput is an input type that accepts ManagedZoneForwardingConfigNameServerTargetArray and ManagedZoneForwardingConfigNameServerTargetArrayOutput values.
// You can construct a concrete instance of `ManagedZoneForwardingConfigNameServerTargetArrayInput` via:
//
//          ManagedZoneForwardingConfigNameServerTargetArray{ ManagedZoneForwardingConfigNameServerTargetArgs{...} }
type ManagedZoneForwardingConfigNameServerTargetArrayInput interface {
	pulumi.Input

	ToManagedZoneForwardingConfigNameServerTargetArrayOutput() ManagedZoneForwardingConfigNameServerTargetArrayOutput
	ToManagedZoneForwardingConfigNameServerTargetArrayOutputWithContext(context.Context) ManagedZoneForwardingConfigNameServerTargetArrayOutput
}

type ManagedZoneForwardingConfigNameServerTargetArray []ManagedZoneForwardingConfigNameServerTargetInput

func (ManagedZoneForwardingConfigNameServerTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedZoneForwardingConfigNameServerTarget)(nil)).Elem()
}

func (i ManagedZoneForwardingConfigNameServerTargetArray) ToManagedZoneForwardingConfigNameServerTargetArrayOutput() ManagedZoneForwardingConfigNameServerTargetArrayOutput {
	return i.ToManagedZoneForwardingConfigNameServerTargetArrayOutputWithContext(context.Background())
}

func (i ManagedZoneForwardingConfigNameServerTargetArray) ToManagedZoneForwardingConfigNameServerTargetArrayOutputWithContext(ctx context.Context) ManagedZoneForwardingConfigNameServerTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneForwardingConfigNameServerTargetArrayOutput)
}

type ManagedZoneForwardingConfigNameServerTargetOutput struct{ *pulumi.OutputState }

func (ManagedZoneForwardingConfigNameServerTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneForwardingConfigNameServerTarget)(nil)).Elem()
}

func (o ManagedZoneForwardingConfigNameServerTargetOutput) ToManagedZoneForwardingConfigNameServerTargetOutput() ManagedZoneForwardingConfigNameServerTargetOutput {
	return o
}

func (o ManagedZoneForwardingConfigNameServerTargetOutput) ToManagedZoneForwardingConfigNameServerTargetOutputWithContext(ctx context.Context) ManagedZoneForwardingConfigNameServerTargetOutput {
	return o
}

// Forwarding path for this NameServerTarget. If unset or set to DEFAULT, Cloud DNS makes forwarding decisions based on IP address ranges; that is, RFC1918 addresses go to the VPC network, non-RFC1918 addresses go to the internet. When set to PRIVATE, Cloud DNS always sends queries through the VPC network for this target.
func (o ManagedZoneForwardingConfigNameServerTargetOutput) ForwardingPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZoneForwardingConfigNameServerTarget) *string { return v.ForwardingPath }).(pulumi.StringPtrOutput)
}

// IPv4 address of a target name server.
func (o ManagedZoneForwardingConfigNameServerTargetOutput) Ipv4Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZoneForwardingConfigNameServerTarget) *string { return v.Ipv4Address }).(pulumi.StringPtrOutput)
}

func (o ManagedZoneForwardingConfigNameServerTargetOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZoneForwardingConfigNameServerTarget) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

type ManagedZoneForwardingConfigNameServerTargetArrayOutput struct{ *pulumi.OutputState }

func (ManagedZoneForwardingConfigNameServerTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedZoneForwardingConfigNameServerTarget)(nil)).Elem()
}

func (o ManagedZoneForwardingConfigNameServerTargetArrayOutput) ToManagedZoneForwardingConfigNameServerTargetArrayOutput() ManagedZoneForwardingConfigNameServerTargetArrayOutput {
	return o
}

func (o ManagedZoneForwardingConfigNameServerTargetArrayOutput) ToManagedZoneForwardingConfigNameServerTargetArrayOutputWithContext(ctx context.Context) ManagedZoneForwardingConfigNameServerTargetArrayOutput {
	return o
}

func (o ManagedZoneForwardingConfigNameServerTargetArrayOutput) Index(i pulumi.IntInput) ManagedZoneForwardingConfigNameServerTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedZoneForwardingConfigNameServerTarget {
		return vs[0].([]ManagedZoneForwardingConfigNameServerTarget)[vs[1].(int)]
	}).(ManagedZoneForwardingConfigNameServerTargetOutput)
}

type ManagedZonePeeringConfig struct {
	Kind *string `pulumi:"kind"`
	// The network with which to peer.
	TargetNetwork *ManagedZonePeeringConfigTargetNetwork `pulumi:"targetNetwork"`
}

// ManagedZonePeeringConfigInput is an input type that accepts ManagedZonePeeringConfigArgs and ManagedZonePeeringConfigOutput values.
// You can construct a concrete instance of `ManagedZonePeeringConfigInput` via:
//
//          ManagedZonePeeringConfigArgs{...}
type ManagedZonePeeringConfigInput interface {
	pulumi.Input

	ToManagedZonePeeringConfigOutput() ManagedZonePeeringConfigOutput
	ToManagedZonePeeringConfigOutputWithContext(context.Context) ManagedZonePeeringConfigOutput
}

type ManagedZonePeeringConfigArgs struct {
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// The network with which to peer.
	TargetNetwork ManagedZonePeeringConfigTargetNetworkPtrInput `pulumi:"targetNetwork"`
}

func (ManagedZonePeeringConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZonePeeringConfig)(nil)).Elem()
}

func (i ManagedZonePeeringConfigArgs) ToManagedZonePeeringConfigOutput() ManagedZonePeeringConfigOutput {
	return i.ToManagedZonePeeringConfigOutputWithContext(context.Background())
}

func (i ManagedZonePeeringConfigArgs) ToManagedZonePeeringConfigOutputWithContext(ctx context.Context) ManagedZonePeeringConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZonePeeringConfigOutput)
}

func (i ManagedZonePeeringConfigArgs) ToManagedZonePeeringConfigPtrOutput() ManagedZonePeeringConfigPtrOutput {
	return i.ToManagedZonePeeringConfigPtrOutputWithContext(context.Background())
}

func (i ManagedZonePeeringConfigArgs) ToManagedZonePeeringConfigPtrOutputWithContext(ctx context.Context) ManagedZonePeeringConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZonePeeringConfigOutput).ToManagedZonePeeringConfigPtrOutputWithContext(ctx)
}

// ManagedZonePeeringConfigPtrInput is an input type that accepts ManagedZonePeeringConfigArgs, ManagedZonePeeringConfigPtr and ManagedZonePeeringConfigPtrOutput values.
// You can construct a concrete instance of `ManagedZonePeeringConfigPtrInput` via:
//
//          ManagedZonePeeringConfigArgs{...}
//
//  or:
//
//          nil
type ManagedZonePeeringConfigPtrInput interface {
	pulumi.Input

	ToManagedZonePeeringConfigPtrOutput() ManagedZonePeeringConfigPtrOutput
	ToManagedZonePeeringConfigPtrOutputWithContext(context.Context) ManagedZonePeeringConfigPtrOutput
}

type managedZonePeeringConfigPtrType ManagedZonePeeringConfigArgs

func ManagedZonePeeringConfigPtr(v *ManagedZonePeeringConfigArgs) ManagedZonePeeringConfigPtrInput {
	return (*managedZonePeeringConfigPtrType)(v)
}

func (*managedZonePeeringConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZonePeeringConfig)(nil)).Elem()
}

func (i *managedZonePeeringConfigPtrType) ToManagedZonePeeringConfigPtrOutput() ManagedZonePeeringConfigPtrOutput {
	return i.ToManagedZonePeeringConfigPtrOutputWithContext(context.Background())
}

func (i *managedZonePeeringConfigPtrType) ToManagedZonePeeringConfigPtrOutputWithContext(ctx context.Context) ManagedZonePeeringConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZonePeeringConfigPtrOutput)
}

type ManagedZonePeeringConfigOutput struct{ *pulumi.OutputState }

func (ManagedZonePeeringConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZonePeeringConfig)(nil)).Elem()
}

func (o ManagedZonePeeringConfigOutput) ToManagedZonePeeringConfigOutput() ManagedZonePeeringConfigOutput {
	return o
}

func (o ManagedZonePeeringConfigOutput) ToManagedZonePeeringConfigOutputWithContext(ctx context.Context) ManagedZonePeeringConfigOutput {
	return o
}

func (o ManagedZonePeeringConfigOutput) ToManagedZonePeeringConfigPtrOutput() ManagedZonePeeringConfigPtrOutput {
	return o.ToManagedZonePeeringConfigPtrOutputWithContext(context.Background())
}

func (o ManagedZonePeeringConfigOutput) ToManagedZonePeeringConfigPtrOutputWithContext(ctx context.Context) ManagedZonePeeringConfigPtrOutput {
	return o.ApplyT(func(v ManagedZonePeeringConfig) *ManagedZonePeeringConfig {
		return &v
	}).(ManagedZonePeeringConfigPtrOutput)
}
func (o ManagedZonePeeringConfigOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZonePeeringConfig) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// The network with which to peer.
func (o ManagedZonePeeringConfigOutput) TargetNetwork() ManagedZonePeeringConfigTargetNetworkPtrOutput {
	return o.ApplyT(func(v ManagedZonePeeringConfig) *ManagedZonePeeringConfigTargetNetwork { return v.TargetNetwork }).(ManagedZonePeeringConfigTargetNetworkPtrOutput)
}

type ManagedZonePeeringConfigPtrOutput struct{ *pulumi.OutputState }

func (ManagedZonePeeringConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZonePeeringConfig)(nil)).Elem()
}

func (o ManagedZonePeeringConfigPtrOutput) ToManagedZonePeeringConfigPtrOutput() ManagedZonePeeringConfigPtrOutput {
	return o
}

func (o ManagedZonePeeringConfigPtrOutput) ToManagedZonePeeringConfigPtrOutputWithContext(ctx context.Context) ManagedZonePeeringConfigPtrOutput {
	return o
}

func (o ManagedZonePeeringConfigPtrOutput) Elem() ManagedZonePeeringConfigOutput {
	return o.ApplyT(func(v *ManagedZonePeeringConfig) ManagedZonePeeringConfig { return *v }).(ManagedZonePeeringConfigOutput)
}

func (o ManagedZonePeeringConfigPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedZonePeeringConfig) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// The network with which to peer.
func (o ManagedZonePeeringConfigPtrOutput) TargetNetwork() ManagedZonePeeringConfigTargetNetworkPtrOutput {
	return o.ApplyT(func(v *ManagedZonePeeringConfig) *ManagedZonePeeringConfigTargetNetwork {
		if v == nil {
			return nil
		}
		return v.TargetNetwork
	}).(ManagedZonePeeringConfigTargetNetworkPtrOutput)
}

type ManagedZonePeeringConfigTargetNetwork struct {
	// The time at which the zone was deactivated, in RFC 3339 date-time format. An empty string indicates that the peering connection is active. The producer network can deactivate a zone. The zone is automatically deactivated if the producer network that the zone targeted is deleted. Output only.
	DeactivateTime *string `pulumi:"deactivateTime"`
	Kind           *string `pulumi:"kind"`
	// The fully qualified URL of the VPC network to forward queries to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
	NetworkUrl *string `pulumi:"networkUrl"`
}

// ManagedZonePeeringConfigTargetNetworkInput is an input type that accepts ManagedZonePeeringConfigTargetNetworkArgs and ManagedZonePeeringConfigTargetNetworkOutput values.
// You can construct a concrete instance of `ManagedZonePeeringConfigTargetNetworkInput` via:
//
//          ManagedZonePeeringConfigTargetNetworkArgs{...}
type ManagedZonePeeringConfigTargetNetworkInput interface {
	pulumi.Input

	ToManagedZonePeeringConfigTargetNetworkOutput() ManagedZonePeeringConfigTargetNetworkOutput
	ToManagedZonePeeringConfigTargetNetworkOutputWithContext(context.Context) ManagedZonePeeringConfigTargetNetworkOutput
}

type ManagedZonePeeringConfigTargetNetworkArgs struct {
	// The time at which the zone was deactivated, in RFC 3339 date-time format. An empty string indicates that the peering connection is active. The producer network can deactivate a zone. The zone is automatically deactivated if the producer network that the zone targeted is deleted. Output only.
	DeactivateTime pulumi.StringPtrInput `pulumi:"deactivateTime"`
	Kind           pulumi.StringPtrInput `pulumi:"kind"`
	// The fully qualified URL of the VPC network to forward queries to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
	NetworkUrl pulumi.StringPtrInput `pulumi:"networkUrl"`
}

func (ManagedZonePeeringConfigTargetNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZonePeeringConfigTargetNetwork)(nil)).Elem()
}

func (i ManagedZonePeeringConfigTargetNetworkArgs) ToManagedZonePeeringConfigTargetNetworkOutput() ManagedZonePeeringConfigTargetNetworkOutput {
	return i.ToManagedZonePeeringConfigTargetNetworkOutputWithContext(context.Background())
}

func (i ManagedZonePeeringConfigTargetNetworkArgs) ToManagedZonePeeringConfigTargetNetworkOutputWithContext(ctx context.Context) ManagedZonePeeringConfigTargetNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZonePeeringConfigTargetNetworkOutput)
}

func (i ManagedZonePeeringConfigTargetNetworkArgs) ToManagedZonePeeringConfigTargetNetworkPtrOutput() ManagedZonePeeringConfigTargetNetworkPtrOutput {
	return i.ToManagedZonePeeringConfigTargetNetworkPtrOutputWithContext(context.Background())
}

func (i ManagedZonePeeringConfigTargetNetworkArgs) ToManagedZonePeeringConfigTargetNetworkPtrOutputWithContext(ctx context.Context) ManagedZonePeeringConfigTargetNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZonePeeringConfigTargetNetworkOutput).ToManagedZonePeeringConfigTargetNetworkPtrOutputWithContext(ctx)
}

// ManagedZonePeeringConfigTargetNetworkPtrInput is an input type that accepts ManagedZonePeeringConfigTargetNetworkArgs, ManagedZonePeeringConfigTargetNetworkPtr and ManagedZonePeeringConfigTargetNetworkPtrOutput values.
// You can construct a concrete instance of `ManagedZonePeeringConfigTargetNetworkPtrInput` via:
//
//          ManagedZonePeeringConfigTargetNetworkArgs{...}
//
//  or:
//
//          nil
type ManagedZonePeeringConfigTargetNetworkPtrInput interface {
	pulumi.Input

	ToManagedZonePeeringConfigTargetNetworkPtrOutput() ManagedZonePeeringConfigTargetNetworkPtrOutput
	ToManagedZonePeeringConfigTargetNetworkPtrOutputWithContext(context.Context) ManagedZonePeeringConfigTargetNetworkPtrOutput
}

type managedZonePeeringConfigTargetNetworkPtrType ManagedZonePeeringConfigTargetNetworkArgs

func ManagedZonePeeringConfigTargetNetworkPtr(v *ManagedZonePeeringConfigTargetNetworkArgs) ManagedZonePeeringConfigTargetNetworkPtrInput {
	return (*managedZonePeeringConfigTargetNetworkPtrType)(v)
}

func (*managedZonePeeringConfigTargetNetworkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZonePeeringConfigTargetNetwork)(nil)).Elem()
}

func (i *managedZonePeeringConfigTargetNetworkPtrType) ToManagedZonePeeringConfigTargetNetworkPtrOutput() ManagedZonePeeringConfigTargetNetworkPtrOutput {
	return i.ToManagedZonePeeringConfigTargetNetworkPtrOutputWithContext(context.Background())
}

func (i *managedZonePeeringConfigTargetNetworkPtrType) ToManagedZonePeeringConfigTargetNetworkPtrOutputWithContext(ctx context.Context) ManagedZonePeeringConfigTargetNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZonePeeringConfigTargetNetworkPtrOutput)
}

type ManagedZonePeeringConfigTargetNetworkOutput struct{ *pulumi.OutputState }

func (ManagedZonePeeringConfigTargetNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZonePeeringConfigTargetNetwork)(nil)).Elem()
}

func (o ManagedZonePeeringConfigTargetNetworkOutput) ToManagedZonePeeringConfigTargetNetworkOutput() ManagedZonePeeringConfigTargetNetworkOutput {
	return o
}

func (o ManagedZonePeeringConfigTargetNetworkOutput) ToManagedZonePeeringConfigTargetNetworkOutputWithContext(ctx context.Context) ManagedZonePeeringConfigTargetNetworkOutput {
	return o
}

func (o ManagedZonePeeringConfigTargetNetworkOutput) ToManagedZonePeeringConfigTargetNetworkPtrOutput() ManagedZonePeeringConfigTargetNetworkPtrOutput {
	return o.ToManagedZonePeeringConfigTargetNetworkPtrOutputWithContext(context.Background())
}

func (o ManagedZonePeeringConfigTargetNetworkOutput) ToManagedZonePeeringConfigTargetNetworkPtrOutputWithContext(ctx context.Context) ManagedZonePeeringConfigTargetNetworkPtrOutput {
	return o.ApplyT(func(v ManagedZonePeeringConfigTargetNetwork) *ManagedZonePeeringConfigTargetNetwork {
		return &v
	}).(ManagedZonePeeringConfigTargetNetworkPtrOutput)
}

// The time at which the zone was deactivated, in RFC 3339 date-time format. An empty string indicates that the peering connection is active. The producer network can deactivate a zone. The zone is automatically deactivated if the producer network that the zone targeted is deleted. Output only.
func (o ManagedZonePeeringConfigTargetNetworkOutput) DeactivateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZonePeeringConfigTargetNetwork) *string { return v.DeactivateTime }).(pulumi.StringPtrOutput)
}

func (o ManagedZonePeeringConfigTargetNetworkOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZonePeeringConfigTargetNetwork) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// The fully qualified URL of the VPC network to forward queries to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
func (o ManagedZonePeeringConfigTargetNetworkOutput) NetworkUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZonePeeringConfigTargetNetwork) *string { return v.NetworkUrl }).(pulumi.StringPtrOutput)
}

type ManagedZonePeeringConfigTargetNetworkPtrOutput struct{ *pulumi.OutputState }

func (ManagedZonePeeringConfigTargetNetworkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZonePeeringConfigTargetNetwork)(nil)).Elem()
}

func (o ManagedZonePeeringConfigTargetNetworkPtrOutput) ToManagedZonePeeringConfigTargetNetworkPtrOutput() ManagedZonePeeringConfigTargetNetworkPtrOutput {
	return o
}

func (o ManagedZonePeeringConfigTargetNetworkPtrOutput) ToManagedZonePeeringConfigTargetNetworkPtrOutputWithContext(ctx context.Context) ManagedZonePeeringConfigTargetNetworkPtrOutput {
	return o
}

func (o ManagedZonePeeringConfigTargetNetworkPtrOutput) Elem() ManagedZonePeeringConfigTargetNetworkOutput {
	return o.ApplyT(func(v *ManagedZonePeeringConfigTargetNetwork) ManagedZonePeeringConfigTargetNetwork { return *v }).(ManagedZonePeeringConfigTargetNetworkOutput)
}

// The time at which the zone was deactivated, in RFC 3339 date-time format. An empty string indicates that the peering connection is active. The producer network can deactivate a zone. The zone is automatically deactivated if the producer network that the zone targeted is deleted. Output only.
func (o ManagedZonePeeringConfigTargetNetworkPtrOutput) DeactivateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedZonePeeringConfigTargetNetwork) *string {
		if v == nil {
			return nil
		}
		return v.DeactivateTime
	}).(pulumi.StringPtrOutput)
}

func (o ManagedZonePeeringConfigTargetNetworkPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedZonePeeringConfigTargetNetwork) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// The fully qualified URL of the VPC network to forward queries to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
func (o ManagedZonePeeringConfigTargetNetworkPtrOutput) NetworkUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedZonePeeringConfigTargetNetwork) *string {
		if v == nil {
			return nil
		}
		return v.NetworkUrl
	}).(pulumi.StringPtrOutput)
}

type ManagedZonePrivateVisibilityConfig struct {
	Kind *string `pulumi:"kind"`
	// The list of VPC networks that can see this zone.
	Networks []ManagedZonePrivateVisibilityConfigNetwork `pulumi:"networks"`
}

// ManagedZonePrivateVisibilityConfigInput is an input type that accepts ManagedZonePrivateVisibilityConfigArgs and ManagedZonePrivateVisibilityConfigOutput values.
// You can construct a concrete instance of `ManagedZonePrivateVisibilityConfigInput` via:
//
//          ManagedZonePrivateVisibilityConfigArgs{...}
type ManagedZonePrivateVisibilityConfigInput interface {
	pulumi.Input

	ToManagedZonePrivateVisibilityConfigOutput() ManagedZonePrivateVisibilityConfigOutput
	ToManagedZonePrivateVisibilityConfigOutputWithContext(context.Context) ManagedZonePrivateVisibilityConfigOutput
}

type ManagedZonePrivateVisibilityConfigArgs struct {
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// The list of VPC networks that can see this zone.
	Networks ManagedZonePrivateVisibilityConfigNetworkArrayInput `pulumi:"networks"`
}

func (ManagedZonePrivateVisibilityConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZonePrivateVisibilityConfig)(nil)).Elem()
}

func (i ManagedZonePrivateVisibilityConfigArgs) ToManagedZonePrivateVisibilityConfigOutput() ManagedZonePrivateVisibilityConfigOutput {
	return i.ToManagedZonePrivateVisibilityConfigOutputWithContext(context.Background())
}

func (i ManagedZonePrivateVisibilityConfigArgs) ToManagedZonePrivateVisibilityConfigOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZonePrivateVisibilityConfigOutput)
}

func (i ManagedZonePrivateVisibilityConfigArgs) ToManagedZonePrivateVisibilityConfigPtrOutput() ManagedZonePrivateVisibilityConfigPtrOutput {
	return i.ToManagedZonePrivateVisibilityConfigPtrOutputWithContext(context.Background())
}

func (i ManagedZonePrivateVisibilityConfigArgs) ToManagedZonePrivateVisibilityConfigPtrOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZonePrivateVisibilityConfigOutput).ToManagedZonePrivateVisibilityConfigPtrOutputWithContext(ctx)
}

// ManagedZonePrivateVisibilityConfigPtrInput is an input type that accepts ManagedZonePrivateVisibilityConfigArgs, ManagedZonePrivateVisibilityConfigPtr and ManagedZonePrivateVisibilityConfigPtrOutput values.
// You can construct a concrete instance of `ManagedZonePrivateVisibilityConfigPtrInput` via:
//
//          ManagedZonePrivateVisibilityConfigArgs{...}
//
//  or:
//
//          nil
type ManagedZonePrivateVisibilityConfigPtrInput interface {
	pulumi.Input

	ToManagedZonePrivateVisibilityConfigPtrOutput() ManagedZonePrivateVisibilityConfigPtrOutput
	ToManagedZonePrivateVisibilityConfigPtrOutputWithContext(context.Context) ManagedZonePrivateVisibilityConfigPtrOutput
}

type managedZonePrivateVisibilityConfigPtrType ManagedZonePrivateVisibilityConfigArgs

func ManagedZonePrivateVisibilityConfigPtr(v *ManagedZonePrivateVisibilityConfigArgs) ManagedZonePrivateVisibilityConfigPtrInput {
	return (*managedZonePrivateVisibilityConfigPtrType)(v)
}

func (*managedZonePrivateVisibilityConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZonePrivateVisibilityConfig)(nil)).Elem()
}

func (i *managedZonePrivateVisibilityConfigPtrType) ToManagedZonePrivateVisibilityConfigPtrOutput() ManagedZonePrivateVisibilityConfigPtrOutput {
	return i.ToManagedZonePrivateVisibilityConfigPtrOutputWithContext(context.Background())
}

func (i *managedZonePrivateVisibilityConfigPtrType) ToManagedZonePrivateVisibilityConfigPtrOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZonePrivateVisibilityConfigPtrOutput)
}

type ManagedZonePrivateVisibilityConfigOutput struct{ *pulumi.OutputState }

func (ManagedZonePrivateVisibilityConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZonePrivateVisibilityConfig)(nil)).Elem()
}

func (o ManagedZonePrivateVisibilityConfigOutput) ToManagedZonePrivateVisibilityConfigOutput() ManagedZonePrivateVisibilityConfigOutput {
	return o
}

func (o ManagedZonePrivateVisibilityConfigOutput) ToManagedZonePrivateVisibilityConfigOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigOutput {
	return o
}

func (o ManagedZonePrivateVisibilityConfigOutput) ToManagedZonePrivateVisibilityConfigPtrOutput() ManagedZonePrivateVisibilityConfigPtrOutput {
	return o.ToManagedZonePrivateVisibilityConfigPtrOutputWithContext(context.Background())
}

func (o ManagedZonePrivateVisibilityConfigOutput) ToManagedZonePrivateVisibilityConfigPtrOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigPtrOutput {
	return o.ApplyT(func(v ManagedZonePrivateVisibilityConfig) *ManagedZonePrivateVisibilityConfig {
		return &v
	}).(ManagedZonePrivateVisibilityConfigPtrOutput)
}
func (o ManagedZonePrivateVisibilityConfigOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZonePrivateVisibilityConfig) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// The list of VPC networks that can see this zone.
func (o ManagedZonePrivateVisibilityConfigOutput) Networks() ManagedZonePrivateVisibilityConfigNetworkArrayOutput {
	return o.ApplyT(func(v ManagedZonePrivateVisibilityConfig) []ManagedZonePrivateVisibilityConfigNetwork {
		return v.Networks
	}).(ManagedZonePrivateVisibilityConfigNetworkArrayOutput)
}

type ManagedZonePrivateVisibilityConfigPtrOutput struct{ *pulumi.OutputState }

func (ManagedZonePrivateVisibilityConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZonePrivateVisibilityConfig)(nil)).Elem()
}

func (o ManagedZonePrivateVisibilityConfigPtrOutput) ToManagedZonePrivateVisibilityConfigPtrOutput() ManagedZonePrivateVisibilityConfigPtrOutput {
	return o
}

func (o ManagedZonePrivateVisibilityConfigPtrOutput) ToManagedZonePrivateVisibilityConfigPtrOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigPtrOutput {
	return o
}

func (o ManagedZonePrivateVisibilityConfigPtrOutput) Elem() ManagedZonePrivateVisibilityConfigOutput {
	return o.ApplyT(func(v *ManagedZonePrivateVisibilityConfig) ManagedZonePrivateVisibilityConfig { return *v }).(ManagedZonePrivateVisibilityConfigOutput)
}

func (o ManagedZonePrivateVisibilityConfigPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedZonePrivateVisibilityConfig) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// The list of VPC networks that can see this zone.
func (o ManagedZonePrivateVisibilityConfigPtrOutput) Networks() ManagedZonePrivateVisibilityConfigNetworkArrayOutput {
	return o.ApplyT(func(v *ManagedZonePrivateVisibilityConfig) []ManagedZonePrivateVisibilityConfigNetwork {
		if v == nil {
			return nil
		}
		return v.Networks
	}).(ManagedZonePrivateVisibilityConfigNetworkArrayOutput)
}

type ManagedZonePrivateVisibilityConfigNetwork struct {
	Kind *string `pulumi:"kind"`
	// The fully qualified URL of the VPC network to bind to. Format this URL like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
	NetworkUrl *string `pulumi:"networkUrl"`
}

// ManagedZonePrivateVisibilityConfigNetworkInput is an input type that accepts ManagedZonePrivateVisibilityConfigNetworkArgs and ManagedZonePrivateVisibilityConfigNetworkOutput values.
// You can construct a concrete instance of `ManagedZonePrivateVisibilityConfigNetworkInput` via:
//
//          ManagedZonePrivateVisibilityConfigNetworkArgs{...}
type ManagedZonePrivateVisibilityConfigNetworkInput interface {
	pulumi.Input

	ToManagedZonePrivateVisibilityConfigNetworkOutput() ManagedZonePrivateVisibilityConfigNetworkOutput
	ToManagedZonePrivateVisibilityConfigNetworkOutputWithContext(context.Context) ManagedZonePrivateVisibilityConfigNetworkOutput
}

type ManagedZonePrivateVisibilityConfigNetworkArgs struct {
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// The fully qualified URL of the VPC network to bind to. Format this URL like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
	NetworkUrl pulumi.StringPtrInput `pulumi:"networkUrl"`
}

func (ManagedZonePrivateVisibilityConfigNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZonePrivateVisibilityConfigNetwork)(nil)).Elem()
}

func (i ManagedZonePrivateVisibilityConfigNetworkArgs) ToManagedZonePrivateVisibilityConfigNetworkOutput() ManagedZonePrivateVisibilityConfigNetworkOutput {
	return i.ToManagedZonePrivateVisibilityConfigNetworkOutputWithContext(context.Background())
}

func (i ManagedZonePrivateVisibilityConfigNetworkArgs) ToManagedZonePrivateVisibilityConfigNetworkOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZonePrivateVisibilityConfigNetworkOutput)
}

// ManagedZonePrivateVisibilityConfigNetworkArrayInput is an input type that accepts ManagedZonePrivateVisibilityConfigNetworkArray and ManagedZonePrivateVisibilityConfigNetworkArrayOutput values.
// You can construct a concrete instance of `ManagedZonePrivateVisibilityConfigNetworkArrayInput` via:
//
//          ManagedZonePrivateVisibilityConfigNetworkArray{ ManagedZonePrivateVisibilityConfigNetworkArgs{...} }
type ManagedZonePrivateVisibilityConfigNetworkArrayInput interface {
	pulumi.Input

	ToManagedZonePrivateVisibilityConfigNetworkArrayOutput() ManagedZonePrivateVisibilityConfigNetworkArrayOutput
	ToManagedZonePrivateVisibilityConfigNetworkArrayOutputWithContext(context.Context) ManagedZonePrivateVisibilityConfigNetworkArrayOutput
}

type ManagedZonePrivateVisibilityConfigNetworkArray []ManagedZonePrivateVisibilityConfigNetworkInput

func (ManagedZonePrivateVisibilityConfigNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedZonePrivateVisibilityConfigNetwork)(nil)).Elem()
}

func (i ManagedZonePrivateVisibilityConfigNetworkArray) ToManagedZonePrivateVisibilityConfigNetworkArrayOutput() ManagedZonePrivateVisibilityConfigNetworkArrayOutput {
	return i.ToManagedZonePrivateVisibilityConfigNetworkArrayOutputWithContext(context.Background())
}

func (i ManagedZonePrivateVisibilityConfigNetworkArray) ToManagedZonePrivateVisibilityConfigNetworkArrayOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZonePrivateVisibilityConfigNetworkArrayOutput)
}

type ManagedZonePrivateVisibilityConfigNetworkOutput struct{ *pulumi.OutputState }

func (ManagedZonePrivateVisibilityConfigNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZonePrivateVisibilityConfigNetwork)(nil)).Elem()
}

func (o ManagedZonePrivateVisibilityConfigNetworkOutput) ToManagedZonePrivateVisibilityConfigNetworkOutput() ManagedZonePrivateVisibilityConfigNetworkOutput {
	return o
}

func (o ManagedZonePrivateVisibilityConfigNetworkOutput) ToManagedZonePrivateVisibilityConfigNetworkOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigNetworkOutput {
	return o
}

func (o ManagedZonePrivateVisibilityConfigNetworkOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZonePrivateVisibilityConfigNetwork) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// The fully qualified URL of the VPC network to bind to. Format this URL like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
func (o ManagedZonePrivateVisibilityConfigNetworkOutput) NetworkUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZonePrivateVisibilityConfigNetwork) *string { return v.NetworkUrl }).(pulumi.StringPtrOutput)
}

type ManagedZonePrivateVisibilityConfigNetworkArrayOutput struct{ *pulumi.OutputState }

func (ManagedZonePrivateVisibilityConfigNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedZonePrivateVisibilityConfigNetwork)(nil)).Elem()
}

func (o ManagedZonePrivateVisibilityConfigNetworkArrayOutput) ToManagedZonePrivateVisibilityConfigNetworkArrayOutput() ManagedZonePrivateVisibilityConfigNetworkArrayOutput {
	return o
}

func (o ManagedZonePrivateVisibilityConfigNetworkArrayOutput) ToManagedZonePrivateVisibilityConfigNetworkArrayOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigNetworkArrayOutput {
	return o
}

func (o ManagedZonePrivateVisibilityConfigNetworkArrayOutput) Index(i pulumi.IntInput) ManagedZonePrivateVisibilityConfigNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedZonePrivateVisibilityConfigNetwork {
		return vs[0].([]ManagedZonePrivateVisibilityConfigNetwork)[vs[1].(int)]
	}).(ManagedZonePrivateVisibilityConfigNetworkOutput)
}

type ManagedZoneReverseLookupConfig struct {
	Kind *string `pulumi:"kind"`
}

// ManagedZoneReverseLookupConfigInput is an input type that accepts ManagedZoneReverseLookupConfigArgs and ManagedZoneReverseLookupConfigOutput values.
// You can construct a concrete instance of `ManagedZoneReverseLookupConfigInput` via:
//
//          ManagedZoneReverseLookupConfigArgs{...}
type ManagedZoneReverseLookupConfigInput interface {
	pulumi.Input

	ToManagedZoneReverseLookupConfigOutput() ManagedZoneReverseLookupConfigOutput
	ToManagedZoneReverseLookupConfigOutputWithContext(context.Context) ManagedZoneReverseLookupConfigOutput
}

type ManagedZoneReverseLookupConfigArgs struct {
	Kind pulumi.StringPtrInput `pulumi:"kind"`
}

func (ManagedZoneReverseLookupConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneReverseLookupConfig)(nil)).Elem()
}

func (i ManagedZoneReverseLookupConfigArgs) ToManagedZoneReverseLookupConfigOutput() ManagedZoneReverseLookupConfigOutput {
	return i.ToManagedZoneReverseLookupConfigOutputWithContext(context.Background())
}

func (i ManagedZoneReverseLookupConfigArgs) ToManagedZoneReverseLookupConfigOutputWithContext(ctx context.Context) ManagedZoneReverseLookupConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneReverseLookupConfigOutput)
}

func (i ManagedZoneReverseLookupConfigArgs) ToManagedZoneReverseLookupConfigPtrOutput() ManagedZoneReverseLookupConfigPtrOutput {
	return i.ToManagedZoneReverseLookupConfigPtrOutputWithContext(context.Background())
}

func (i ManagedZoneReverseLookupConfigArgs) ToManagedZoneReverseLookupConfigPtrOutputWithContext(ctx context.Context) ManagedZoneReverseLookupConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneReverseLookupConfigOutput).ToManagedZoneReverseLookupConfigPtrOutputWithContext(ctx)
}

// ManagedZoneReverseLookupConfigPtrInput is an input type that accepts ManagedZoneReverseLookupConfigArgs, ManagedZoneReverseLookupConfigPtr and ManagedZoneReverseLookupConfigPtrOutput values.
// You can construct a concrete instance of `ManagedZoneReverseLookupConfigPtrInput` via:
//
//          ManagedZoneReverseLookupConfigArgs{...}
//
//  or:
//
//          nil
type ManagedZoneReverseLookupConfigPtrInput interface {
	pulumi.Input

	ToManagedZoneReverseLookupConfigPtrOutput() ManagedZoneReverseLookupConfigPtrOutput
	ToManagedZoneReverseLookupConfigPtrOutputWithContext(context.Context) ManagedZoneReverseLookupConfigPtrOutput
}

type managedZoneReverseLookupConfigPtrType ManagedZoneReverseLookupConfigArgs

func ManagedZoneReverseLookupConfigPtr(v *ManagedZoneReverseLookupConfigArgs) ManagedZoneReverseLookupConfigPtrInput {
	return (*managedZoneReverseLookupConfigPtrType)(v)
}

func (*managedZoneReverseLookupConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZoneReverseLookupConfig)(nil)).Elem()
}

func (i *managedZoneReverseLookupConfigPtrType) ToManagedZoneReverseLookupConfigPtrOutput() ManagedZoneReverseLookupConfigPtrOutput {
	return i.ToManagedZoneReverseLookupConfigPtrOutputWithContext(context.Background())
}

func (i *managedZoneReverseLookupConfigPtrType) ToManagedZoneReverseLookupConfigPtrOutputWithContext(ctx context.Context) ManagedZoneReverseLookupConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneReverseLookupConfigPtrOutput)
}

type ManagedZoneReverseLookupConfigOutput struct{ *pulumi.OutputState }

func (ManagedZoneReverseLookupConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneReverseLookupConfig)(nil)).Elem()
}

func (o ManagedZoneReverseLookupConfigOutput) ToManagedZoneReverseLookupConfigOutput() ManagedZoneReverseLookupConfigOutput {
	return o
}

func (o ManagedZoneReverseLookupConfigOutput) ToManagedZoneReverseLookupConfigOutputWithContext(ctx context.Context) ManagedZoneReverseLookupConfigOutput {
	return o
}

func (o ManagedZoneReverseLookupConfigOutput) ToManagedZoneReverseLookupConfigPtrOutput() ManagedZoneReverseLookupConfigPtrOutput {
	return o.ToManagedZoneReverseLookupConfigPtrOutputWithContext(context.Background())
}

func (o ManagedZoneReverseLookupConfigOutput) ToManagedZoneReverseLookupConfigPtrOutputWithContext(ctx context.Context) ManagedZoneReverseLookupConfigPtrOutput {
	return o.ApplyT(func(v ManagedZoneReverseLookupConfig) *ManagedZoneReverseLookupConfig {
		return &v
	}).(ManagedZoneReverseLookupConfigPtrOutput)
}
func (o ManagedZoneReverseLookupConfigOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZoneReverseLookupConfig) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

type ManagedZoneReverseLookupConfigPtrOutput struct{ *pulumi.OutputState }

func (ManagedZoneReverseLookupConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZoneReverseLookupConfig)(nil)).Elem()
}

func (o ManagedZoneReverseLookupConfigPtrOutput) ToManagedZoneReverseLookupConfigPtrOutput() ManagedZoneReverseLookupConfigPtrOutput {
	return o
}

func (o ManagedZoneReverseLookupConfigPtrOutput) ToManagedZoneReverseLookupConfigPtrOutputWithContext(ctx context.Context) ManagedZoneReverseLookupConfigPtrOutput {
	return o
}

func (o ManagedZoneReverseLookupConfigPtrOutput) Elem() ManagedZoneReverseLookupConfigOutput {
	return o.ApplyT(func(v *ManagedZoneReverseLookupConfig) ManagedZoneReverseLookupConfig { return *v }).(ManagedZoneReverseLookupConfigOutput)
}

func (o ManagedZoneReverseLookupConfigPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedZoneReverseLookupConfig) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Contains information about Service Directory-backed zones.
type ManagedZoneServiceDirectoryConfig struct {
	Kind *string `pulumi:"kind"`
	// Contains information about the namespace associated with the zone.
	Namespace *ManagedZoneServiceDirectoryConfigNamespace `pulumi:"namespace"`
}

// ManagedZoneServiceDirectoryConfigInput is an input type that accepts ManagedZoneServiceDirectoryConfigArgs and ManagedZoneServiceDirectoryConfigOutput values.
// You can construct a concrete instance of `ManagedZoneServiceDirectoryConfigInput` via:
//
//          ManagedZoneServiceDirectoryConfigArgs{...}
type ManagedZoneServiceDirectoryConfigInput interface {
	pulumi.Input

	ToManagedZoneServiceDirectoryConfigOutput() ManagedZoneServiceDirectoryConfigOutput
	ToManagedZoneServiceDirectoryConfigOutputWithContext(context.Context) ManagedZoneServiceDirectoryConfigOutput
}

// Contains information about Service Directory-backed zones.
type ManagedZoneServiceDirectoryConfigArgs struct {
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Contains information about the namespace associated with the zone.
	Namespace ManagedZoneServiceDirectoryConfigNamespacePtrInput `pulumi:"namespace"`
}

func (ManagedZoneServiceDirectoryConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneServiceDirectoryConfig)(nil)).Elem()
}

func (i ManagedZoneServiceDirectoryConfigArgs) ToManagedZoneServiceDirectoryConfigOutput() ManagedZoneServiceDirectoryConfigOutput {
	return i.ToManagedZoneServiceDirectoryConfigOutputWithContext(context.Background())
}

func (i ManagedZoneServiceDirectoryConfigArgs) ToManagedZoneServiceDirectoryConfigOutputWithContext(ctx context.Context) ManagedZoneServiceDirectoryConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneServiceDirectoryConfigOutput)
}

func (i ManagedZoneServiceDirectoryConfigArgs) ToManagedZoneServiceDirectoryConfigPtrOutput() ManagedZoneServiceDirectoryConfigPtrOutput {
	return i.ToManagedZoneServiceDirectoryConfigPtrOutputWithContext(context.Background())
}

func (i ManagedZoneServiceDirectoryConfigArgs) ToManagedZoneServiceDirectoryConfigPtrOutputWithContext(ctx context.Context) ManagedZoneServiceDirectoryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneServiceDirectoryConfigOutput).ToManagedZoneServiceDirectoryConfigPtrOutputWithContext(ctx)
}

// ManagedZoneServiceDirectoryConfigPtrInput is an input type that accepts ManagedZoneServiceDirectoryConfigArgs, ManagedZoneServiceDirectoryConfigPtr and ManagedZoneServiceDirectoryConfigPtrOutput values.
// You can construct a concrete instance of `ManagedZoneServiceDirectoryConfigPtrInput` via:
//
//          ManagedZoneServiceDirectoryConfigArgs{...}
//
//  or:
//
//          nil
type ManagedZoneServiceDirectoryConfigPtrInput interface {
	pulumi.Input

	ToManagedZoneServiceDirectoryConfigPtrOutput() ManagedZoneServiceDirectoryConfigPtrOutput
	ToManagedZoneServiceDirectoryConfigPtrOutputWithContext(context.Context) ManagedZoneServiceDirectoryConfigPtrOutput
}

type managedZoneServiceDirectoryConfigPtrType ManagedZoneServiceDirectoryConfigArgs

func ManagedZoneServiceDirectoryConfigPtr(v *ManagedZoneServiceDirectoryConfigArgs) ManagedZoneServiceDirectoryConfigPtrInput {
	return (*managedZoneServiceDirectoryConfigPtrType)(v)
}

func (*managedZoneServiceDirectoryConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZoneServiceDirectoryConfig)(nil)).Elem()
}

func (i *managedZoneServiceDirectoryConfigPtrType) ToManagedZoneServiceDirectoryConfigPtrOutput() ManagedZoneServiceDirectoryConfigPtrOutput {
	return i.ToManagedZoneServiceDirectoryConfigPtrOutputWithContext(context.Background())
}

func (i *managedZoneServiceDirectoryConfigPtrType) ToManagedZoneServiceDirectoryConfigPtrOutputWithContext(ctx context.Context) ManagedZoneServiceDirectoryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneServiceDirectoryConfigPtrOutput)
}

// Contains information about Service Directory-backed zones.
type ManagedZoneServiceDirectoryConfigOutput struct{ *pulumi.OutputState }

func (ManagedZoneServiceDirectoryConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneServiceDirectoryConfig)(nil)).Elem()
}

func (o ManagedZoneServiceDirectoryConfigOutput) ToManagedZoneServiceDirectoryConfigOutput() ManagedZoneServiceDirectoryConfigOutput {
	return o
}

func (o ManagedZoneServiceDirectoryConfigOutput) ToManagedZoneServiceDirectoryConfigOutputWithContext(ctx context.Context) ManagedZoneServiceDirectoryConfigOutput {
	return o
}

func (o ManagedZoneServiceDirectoryConfigOutput) ToManagedZoneServiceDirectoryConfigPtrOutput() ManagedZoneServiceDirectoryConfigPtrOutput {
	return o.ToManagedZoneServiceDirectoryConfigPtrOutputWithContext(context.Background())
}

func (o ManagedZoneServiceDirectoryConfigOutput) ToManagedZoneServiceDirectoryConfigPtrOutputWithContext(ctx context.Context) ManagedZoneServiceDirectoryConfigPtrOutput {
	return o.ApplyT(func(v ManagedZoneServiceDirectoryConfig) *ManagedZoneServiceDirectoryConfig {
		return &v
	}).(ManagedZoneServiceDirectoryConfigPtrOutput)
}
func (o ManagedZoneServiceDirectoryConfigOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZoneServiceDirectoryConfig) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Contains information about the namespace associated with the zone.
func (o ManagedZoneServiceDirectoryConfigOutput) Namespace() ManagedZoneServiceDirectoryConfigNamespacePtrOutput {
	return o.ApplyT(func(v ManagedZoneServiceDirectoryConfig) *ManagedZoneServiceDirectoryConfigNamespace {
		return v.Namespace
	}).(ManagedZoneServiceDirectoryConfigNamespacePtrOutput)
}

type ManagedZoneServiceDirectoryConfigPtrOutput struct{ *pulumi.OutputState }

func (ManagedZoneServiceDirectoryConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZoneServiceDirectoryConfig)(nil)).Elem()
}

func (o ManagedZoneServiceDirectoryConfigPtrOutput) ToManagedZoneServiceDirectoryConfigPtrOutput() ManagedZoneServiceDirectoryConfigPtrOutput {
	return o
}

func (o ManagedZoneServiceDirectoryConfigPtrOutput) ToManagedZoneServiceDirectoryConfigPtrOutputWithContext(ctx context.Context) ManagedZoneServiceDirectoryConfigPtrOutput {
	return o
}

func (o ManagedZoneServiceDirectoryConfigPtrOutput) Elem() ManagedZoneServiceDirectoryConfigOutput {
	return o.ApplyT(func(v *ManagedZoneServiceDirectoryConfig) ManagedZoneServiceDirectoryConfig { return *v }).(ManagedZoneServiceDirectoryConfigOutput)
}

func (o ManagedZoneServiceDirectoryConfigPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedZoneServiceDirectoryConfig) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Contains information about the namespace associated with the zone.
func (o ManagedZoneServiceDirectoryConfigPtrOutput) Namespace() ManagedZoneServiceDirectoryConfigNamespacePtrOutput {
	return o.ApplyT(func(v *ManagedZoneServiceDirectoryConfig) *ManagedZoneServiceDirectoryConfigNamespace {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(ManagedZoneServiceDirectoryConfigNamespacePtrOutput)
}

type ManagedZoneServiceDirectoryConfigNamespace struct {
	// The time that the namespace backing this zone was deleted; an empty string if it still exists. This is in RFC3339 text format. Output only.
	DeletionTime *string `pulumi:"deletionTime"`
	Kind         *string `pulumi:"kind"`
	// The fully qualified URL of the namespace associated with the zone. Format must be https://servicedirectory.googleapis.com/v1/projects/{project}/locations/{location}/namespaces/{namespace}
	NamespaceUrl *string `pulumi:"namespaceUrl"`
}

// ManagedZoneServiceDirectoryConfigNamespaceInput is an input type that accepts ManagedZoneServiceDirectoryConfigNamespaceArgs and ManagedZoneServiceDirectoryConfigNamespaceOutput values.
// You can construct a concrete instance of `ManagedZoneServiceDirectoryConfigNamespaceInput` via:
//
//          ManagedZoneServiceDirectoryConfigNamespaceArgs{...}
type ManagedZoneServiceDirectoryConfigNamespaceInput interface {
	pulumi.Input

	ToManagedZoneServiceDirectoryConfigNamespaceOutput() ManagedZoneServiceDirectoryConfigNamespaceOutput
	ToManagedZoneServiceDirectoryConfigNamespaceOutputWithContext(context.Context) ManagedZoneServiceDirectoryConfigNamespaceOutput
}

type ManagedZoneServiceDirectoryConfigNamespaceArgs struct {
	// The time that the namespace backing this zone was deleted; an empty string if it still exists. This is in RFC3339 text format. Output only.
	DeletionTime pulumi.StringPtrInput `pulumi:"deletionTime"`
	Kind         pulumi.StringPtrInput `pulumi:"kind"`
	// The fully qualified URL of the namespace associated with the zone. Format must be https://servicedirectory.googleapis.com/v1/projects/{project}/locations/{location}/namespaces/{namespace}
	NamespaceUrl pulumi.StringPtrInput `pulumi:"namespaceUrl"`
}

func (ManagedZoneServiceDirectoryConfigNamespaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneServiceDirectoryConfigNamespace)(nil)).Elem()
}

func (i ManagedZoneServiceDirectoryConfigNamespaceArgs) ToManagedZoneServiceDirectoryConfigNamespaceOutput() ManagedZoneServiceDirectoryConfigNamespaceOutput {
	return i.ToManagedZoneServiceDirectoryConfigNamespaceOutputWithContext(context.Background())
}

func (i ManagedZoneServiceDirectoryConfigNamespaceArgs) ToManagedZoneServiceDirectoryConfigNamespaceOutputWithContext(ctx context.Context) ManagedZoneServiceDirectoryConfigNamespaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneServiceDirectoryConfigNamespaceOutput)
}

func (i ManagedZoneServiceDirectoryConfigNamespaceArgs) ToManagedZoneServiceDirectoryConfigNamespacePtrOutput() ManagedZoneServiceDirectoryConfigNamespacePtrOutput {
	return i.ToManagedZoneServiceDirectoryConfigNamespacePtrOutputWithContext(context.Background())
}

func (i ManagedZoneServiceDirectoryConfigNamespaceArgs) ToManagedZoneServiceDirectoryConfigNamespacePtrOutputWithContext(ctx context.Context) ManagedZoneServiceDirectoryConfigNamespacePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneServiceDirectoryConfigNamespaceOutput).ToManagedZoneServiceDirectoryConfigNamespacePtrOutputWithContext(ctx)
}

// ManagedZoneServiceDirectoryConfigNamespacePtrInput is an input type that accepts ManagedZoneServiceDirectoryConfigNamespaceArgs, ManagedZoneServiceDirectoryConfigNamespacePtr and ManagedZoneServiceDirectoryConfigNamespacePtrOutput values.
// You can construct a concrete instance of `ManagedZoneServiceDirectoryConfigNamespacePtrInput` via:
//
//          ManagedZoneServiceDirectoryConfigNamespaceArgs{...}
//
//  or:
//
//          nil
type ManagedZoneServiceDirectoryConfigNamespacePtrInput interface {
	pulumi.Input

	ToManagedZoneServiceDirectoryConfigNamespacePtrOutput() ManagedZoneServiceDirectoryConfigNamespacePtrOutput
	ToManagedZoneServiceDirectoryConfigNamespacePtrOutputWithContext(context.Context) ManagedZoneServiceDirectoryConfigNamespacePtrOutput
}

type managedZoneServiceDirectoryConfigNamespacePtrType ManagedZoneServiceDirectoryConfigNamespaceArgs

func ManagedZoneServiceDirectoryConfigNamespacePtr(v *ManagedZoneServiceDirectoryConfigNamespaceArgs) ManagedZoneServiceDirectoryConfigNamespacePtrInput {
	return (*managedZoneServiceDirectoryConfigNamespacePtrType)(v)
}

func (*managedZoneServiceDirectoryConfigNamespacePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZoneServiceDirectoryConfigNamespace)(nil)).Elem()
}

func (i *managedZoneServiceDirectoryConfigNamespacePtrType) ToManagedZoneServiceDirectoryConfigNamespacePtrOutput() ManagedZoneServiceDirectoryConfigNamespacePtrOutput {
	return i.ToManagedZoneServiceDirectoryConfigNamespacePtrOutputWithContext(context.Background())
}

func (i *managedZoneServiceDirectoryConfigNamespacePtrType) ToManagedZoneServiceDirectoryConfigNamespacePtrOutputWithContext(ctx context.Context) ManagedZoneServiceDirectoryConfigNamespacePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneServiceDirectoryConfigNamespacePtrOutput)
}

type ManagedZoneServiceDirectoryConfigNamespaceOutput struct{ *pulumi.OutputState }

func (ManagedZoneServiceDirectoryConfigNamespaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneServiceDirectoryConfigNamespace)(nil)).Elem()
}

func (o ManagedZoneServiceDirectoryConfigNamespaceOutput) ToManagedZoneServiceDirectoryConfigNamespaceOutput() ManagedZoneServiceDirectoryConfigNamespaceOutput {
	return o
}

func (o ManagedZoneServiceDirectoryConfigNamespaceOutput) ToManagedZoneServiceDirectoryConfigNamespaceOutputWithContext(ctx context.Context) ManagedZoneServiceDirectoryConfigNamespaceOutput {
	return o
}

func (o ManagedZoneServiceDirectoryConfigNamespaceOutput) ToManagedZoneServiceDirectoryConfigNamespacePtrOutput() ManagedZoneServiceDirectoryConfigNamespacePtrOutput {
	return o.ToManagedZoneServiceDirectoryConfigNamespacePtrOutputWithContext(context.Background())
}

func (o ManagedZoneServiceDirectoryConfigNamespaceOutput) ToManagedZoneServiceDirectoryConfigNamespacePtrOutputWithContext(ctx context.Context) ManagedZoneServiceDirectoryConfigNamespacePtrOutput {
	return o.ApplyT(func(v ManagedZoneServiceDirectoryConfigNamespace) *ManagedZoneServiceDirectoryConfigNamespace {
		return &v
	}).(ManagedZoneServiceDirectoryConfigNamespacePtrOutput)
}

// The time that the namespace backing this zone was deleted; an empty string if it still exists. This is in RFC3339 text format. Output only.
func (o ManagedZoneServiceDirectoryConfigNamespaceOutput) DeletionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZoneServiceDirectoryConfigNamespace) *string { return v.DeletionTime }).(pulumi.StringPtrOutput)
}

func (o ManagedZoneServiceDirectoryConfigNamespaceOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZoneServiceDirectoryConfigNamespace) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// The fully qualified URL of the namespace associated with the zone. Format must be https://servicedirectory.googleapis.com/v1/projects/{project}/locations/{location}/namespaces/{namespace}
func (o ManagedZoneServiceDirectoryConfigNamespaceOutput) NamespaceUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZoneServiceDirectoryConfigNamespace) *string { return v.NamespaceUrl }).(pulumi.StringPtrOutput)
}

type ManagedZoneServiceDirectoryConfigNamespacePtrOutput struct{ *pulumi.OutputState }

func (ManagedZoneServiceDirectoryConfigNamespacePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZoneServiceDirectoryConfigNamespace)(nil)).Elem()
}

func (o ManagedZoneServiceDirectoryConfigNamespacePtrOutput) ToManagedZoneServiceDirectoryConfigNamespacePtrOutput() ManagedZoneServiceDirectoryConfigNamespacePtrOutput {
	return o
}

func (o ManagedZoneServiceDirectoryConfigNamespacePtrOutput) ToManagedZoneServiceDirectoryConfigNamespacePtrOutputWithContext(ctx context.Context) ManagedZoneServiceDirectoryConfigNamespacePtrOutput {
	return o
}

func (o ManagedZoneServiceDirectoryConfigNamespacePtrOutput) Elem() ManagedZoneServiceDirectoryConfigNamespaceOutput {
	return o.ApplyT(func(v *ManagedZoneServiceDirectoryConfigNamespace) ManagedZoneServiceDirectoryConfigNamespace {
		return *v
	}).(ManagedZoneServiceDirectoryConfigNamespaceOutput)
}

// The time that the namespace backing this zone was deleted; an empty string if it still exists. This is in RFC3339 text format. Output only.
func (o ManagedZoneServiceDirectoryConfigNamespacePtrOutput) DeletionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedZoneServiceDirectoryConfigNamespace) *string {
		if v == nil {
			return nil
		}
		return v.DeletionTime
	}).(pulumi.StringPtrOutput)
}

func (o ManagedZoneServiceDirectoryConfigNamespacePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedZoneServiceDirectoryConfigNamespace) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// The fully qualified URL of the namespace associated with the zone. Format must be https://servicedirectory.googleapis.com/v1/projects/{project}/locations/{location}/namespaces/{namespace}
func (o ManagedZoneServiceDirectoryConfigNamespacePtrOutput) NamespaceUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedZoneServiceDirectoryConfigNamespace) *string {
		if v == nil {
			return nil
		}
		return v.NamespaceUrl
	}).(pulumi.StringPtrOutput)
}

type PolicyAlternativeNameServerConfig struct {
	Kind *string `pulumi:"kind"`
	// Sets an alternative name server for the associated networks. When specified, all DNS queries are forwarded to a name server that you choose. Names such as .internal are not available when an alternative name server is specified.
	TargetNameServers []PolicyAlternativeNameServerConfigTargetNameServer `pulumi:"targetNameServers"`
}

// PolicyAlternativeNameServerConfigInput is an input type that accepts PolicyAlternativeNameServerConfigArgs and PolicyAlternativeNameServerConfigOutput values.
// You can construct a concrete instance of `PolicyAlternativeNameServerConfigInput` via:
//
//          PolicyAlternativeNameServerConfigArgs{...}
type PolicyAlternativeNameServerConfigInput interface {
	pulumi.Input

	ToPolicyAlternativeNameServerConfigOutput() PolicyAlternativeNameServerConfigOutput
	ToPolicyAlternativeNameServerConfigOutputWithContext(context.Context) PolicyAlternativeNameServerConfigOutput
}

type PolicyAlternativeNameServerConfigArgs struct {
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Sets an alternative name server for the associated networks. When specified, all DNS queries are forwarded to a name server that you choose. Names such as .internal are not available when an alternative name server is specified.
	TargetNameServers PolicyAlternativeNameServerConfigTargetNameServerArrayInput `pulumi:"targetNameServers"`
}

func (PolicyAlternativeNameServerConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyAlternativeNameServerConfig)(nil)).Elem()
}

func (i PolicyAlternativeNameServerConfigArgs) ToPolicyAlternativeNameServerConfigOutput() PolicyAlternativeNameServerConfigOutput {
	return i.ToPolicyAlternativeNameServerConfigOutputWithContext(context.Background())
}

func (i PolicyAlternativeNameServerConfigArgs) ToPolicyAlternativeNameServerConfigOutputWithContext(ctx context.Context) PolicyAlternativeNameServerConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyAlternativeNameServerConfigOutput)
}

func (i PolicyAlternativeNameServerConfigArgs) ToPolicyAlternativeNameServerConfigPtrOutput() PolicyAlternativeNameServerConfigPtrOutput {
	return i.ToPolicyAlternativeNameServerConfigPtrOutputWithContext(context.Background())
}

func (i PolicyAlternativeNameServerConfigArgs) ToPolicyAlternativeNameServerConfigPtrOutputWithContext(ctx context.Context) PolicyAlternativeNameServerConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyAlternativeNameServerConfigOutput).ToPolicyAlternativeNameServerConfigPtrOutputWithContext(ctx)
}

// PolicyAlternativeNameServerConfigPtrInput is an input type that accepts PolicyAlternativeNameServerConfigArgs, PolicyAlternativeNameServerConfigPtr and PolicyAlternativeNameServerConfigPtrOutput values.
// You can construct a concrete instance of `PolicyAlternativeNameServerConfigPtrInput` via:
//
//          PolicyAlternativeNameServerConfigArgs{...}
//
//  or:
//
//          nil
type PolicyAlternativeNameServerConfigPtrInput interface {
	pulumi.Input

	ToPolicyAlternativeNameServerConfigPtrOutput() PolicyAlternativeNameServerConfigPtrOutput
	ToPolicyAlternativeNameServerConfigPtrOutputWithContext(context.Context) PolicyAlternativeNameServerConfigPtrOutput
}

type policyAlternativeNameServerConfigPtrType PolicyAlternativeNameServerConfigArgs

func PolicyAlternativeNameServerConfigPtr(v *PolicyAlternativeNameServerConfigArgs) PolicyAlternativeNameServerConfigPtrInput {
	return (*policyAlternativeNameServerConfigPtrType)(v)
}

func (*policyAlternativeNameServerConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyAlternativeNameServerConfig)(nil)).Elem()
}

func (i *policyAlternativeNameServerConfigPtrType) ToPolicyAlternativeNameServerConfigPtrOutput() PolicyAlternativeNameServerConfigPtrOutput {
	return i.ToPolicyAlternativeNameServerConfigPtrOutputWithContext(context.Background())
}

func (i *policyAlternativeNameServerConfigPtrType) ToPolicyAlternativeNameServerConfigPtrOutputWithContext(ctx context.Context) PolicyAlternativeNameServerConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyAlternativeNameServerConfigPtrOutput)
}

type PolicyAlternativeNameServerConfigOutput struct{ *pulumi.OutputState }

func (PolicyAlternativeNameServerConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyAlternativeNameServerConfig)(nil)).Elem()
}

func (o PolicyAlternativeNameServerConfigOutput) ToPolicyAlternativeNameServerConfigOutput() PolicyAlternativeNameServerConfigOutput {
	return o
}

func (o PolicyAlternativeNameServerConfigOutput) ToPolicyAlternativeNameServerConfigOutputWithContext(ctx context.Context) PolicyAlternativeNameServerConfigOutput {
	return o
}

func (o PolicyAlternativeNameServerConfigOutput) ToPolicyAlternativeNameServerConfigPtrOutput() PolicyAlternativeNameServerConfigPtrOutput {
	return o.ToPolicyAlternativeNameServerConfigPtrOutputWithContext(context.Background())
}

func (o PolicyAlternativeNameServerConfigOutput) ToPolicyAlternativeNameServerConfigPtrOutputWithContext(ctx context.Context) PolicyAlternativeNameServerConfigPtrOutput {
	return o.ApplyT(func(v PolicyAlternativeNameServerConfig) *PolicyAlternativeNameServerConfig {
		return &v
	}).(PolicyAlternativeNameServerConfigPtrOutput)
}
func (o PolicyAlternativeNameServerConfigOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyAlternativeNameServerConfig) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Sets an alternative name server for the associated networks. When specified, all DNS queries are forwarded to a name server that you choose. Names such as .internal are not available when an alternative name server is specified.
func (o PolicyAlternativeNameServerConfigOutput) TargetNameServers() PolicyAlternativeNameServerConfigTargetNameServerArrayOutput {
	return o.ApplyT(func(v PolicyAlternativeNameServerConfig) []PolicyAlternativeNameServerConfigTargetNameServer {
		return v.TargetNameServers
	}).(PolicyAlternativeNameServerConfigTargetNameServerArrayOutput)
}

type PolicyAlternativeNameServerConfigPtrOutput struct{ *pulumi.OutputState }

func (PolicyAlternativeNameServerConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyAlternativeNameServerConfig)(nil)).Elem()
}

func (o PolicyAlternativeNameServerConfigPtrOutput) ToPolicyAlternativeNameServerConfigPtrOutput() PolicyAlternativeNameServerConfigPtrOutput {
	return o
}

func (o PolicyAlternativeNameServerConfigPtrOutput) ToPolicyAlternativeNameServerConfigPtrOutputWithContext(ctx context.Context) PolicyAlternativeNameServerConfigPtrOutput {
	return o
}

func (o PolicyAlternativeNameServerConfigPtrOutput) Elem() PolicyAlternativeNameServerConfigOutput {
	return o.ApplyT(func(v *PolicyAlternativeNameServerConfig) PolicyAlternativeNameServerConfig { return *v }).(PolicyAlternativeNameServerConfigOutput)
}

func (o PolicyAlternativeNameServerConfigPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyAlternativeNameServerConfig) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Sets an alternative name server for the associated networks. When specified, all DNS queries are forwarded to a name server that you choose. Names such as .internal are not available when an alternative name server is specified.
func (o PolicyAlternativeNameServerConfigPtrOutput) TargetNameServers() PolicyAlternativeNameServerConfigTargetNameServerArrayOutput {
	return o.ApplyT(func(v *PolicyAlternativeNameServerConfig) []PolicyAlternativeNameServerConfigTargetNameServer {
		if v == nil {
			return nil
		}
		return v.TargetNameServers
	}).(PolicyAlternativeNameServerConfigTargetNameServerArrayOutput)
}

type PolicyAlternativeNameServerConfigTargetNameServer struct {
	// Forwarding path for this TargetNameServer. If unset or set to DEFAULT, Cloud DNS makes forwarding decisions based on address ranges; that is, RFC1918 addresses go to the VPC network, non-RFC1918 addresses go to the internet. When set to PRIVATE, Cloud DNS always sends queries through the VPC network for this target.
	ForwardingPath *string `pulumi:"forwardingPath"`
	// IPv4 address to forward to.
	Ipv4Address *string `pulumi:"ipv4Address"`
	Kind        *string `pulumi:"kind"`
}

// PolicyAlternativeNameServerConfigTargetNameServerInput is an input type that accepts PolicyAlternativeNameServerConfigTargetNameServerArgs and PolicyAlternativeNameServerConfigTargetNameServerOutput values.
// You can construct a concrete instance of `PolicyAlternativeNameServerConfigTargetNameServerInput` via:
//
//          PolicyAlternativeNameServerConfigTargetNameServerArgs{...}
type PolicyAlternativeNameServerConfigTargetNameServerInput interface {
	pulumi.Input

	ToPolicyAlternativeNameServerConfigTargetNameServerOutput() PolicyAlternativeNameServerConfigTargetNameServerOutput
	ToPolicyAlternativeNameServerConfigTargetNameServerOutputWithContext(context.Context) PolicyAlternativeNameServerConfigTargetNameServerOutput
}

type PolicyAlternativeNameServerConfigTargetNameServerArgs struct {
	// Forwarding path for this TargetNameServer. If unset or set to DEFAULT, Cloud DNS makes forwarding decisions based on address ranges; that is, RFC1918 addresses go to the VPC network, non-RFC1918 addresses go to the internet. When set to PRIVATE, Cloud DNS always sends queries through the VPC network for this target.
	ForwardingPath pulumi.StringPtrInput `pulumi:"forwardingPath"`
	// IPv4 address to forward to.
	Ipv4Address pulumi.StringPtrInput `pulumi:"ipv4Address"`
	Kind        pulumi.StringPtrInput `pulumi:"kind"`
}

func (PolicyAlternativeNameServerConfigTargetNameServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyAlternativeNameServerConfigTargetNameServer)(nil)).Elem()
}

func (i PolicyAlternativeNameServerConfigTargetNameServerArgs) ToPolicyAlternativeNameServerConfigTargetNameServerOutput() PolicyAlternativeNameServerConfigTargetNameServerOutput {
	return i.ToPolicyAlternativeNameServerConfigTargetNameServerOutputWithContext(context.Background())
}

func (i PolicyAlternativeNameServerConfigTargetNameServerArgs) ToPolicyAlternativeNameServerConfigTargetNameServerOutputWithContext(ctx context.Context) PolicyAlternativeNameServerConfigTargetNameServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyAlternativeNameServerConfigTargetNameServerOutput)
}

// PolicyAlternativeNameServerConfigTargetNameServerArrayInput is an input type that accepts PolicyAlternativeNameServerConfigTargetNameServerArray and PolicyAlternativeNameServerConfigTargetNameServerArrayOutput values.
// You can construct a concrete instance of `PolicyAlternativeNameServerConfigTargetNameServerArrayInput` via:
//
//          PolicyAlternativeNameServerConfigTargetNameServerArray{ PolicyAlternativeNameServerConfigTargetNameServerArgs{...} }
type PolicyAlternativeNameServerConfigTargetNameServerArrayInput interface {
	pulumi.Input

	ToPolicyAlternativeNameServerConfigTargetNameServerArrayOutput() PolicyAlternativeNameServerConfigTargetNameServerArrayOutput
	ToPolicyAlternativeNameServerConfigTargetNameServerArrayOutputWithContext(context.Context) PolicyAlternativeNameServerConfigTargetNameServerArrayOutput
}

type PolicyAlternativeNameServerConfigTargetNameServerArray []PolicyAlternativeNameServerConfigTargetNameServerInput

func (PolicyAlternativeNameServerConfigTargetNameServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyAlternativeNameServerConfigTargetNameServer)(nil)).Elem()
}

func (i PolicyAlternativeNameServerConfigTargetNameServerArray) ToPolicyAlternativeNameServerConfigTargetNameServerArrayOutput() PolicyAlternativeNameServerConfigTargetNameServerArrayOutput {
	return i.ToPolicyAlternativeNameServerConfigTargetNameServerArrayOutputWithContext(context.Background())
}

func (i PolicyAlternativeNameServerConfigTargetNameServerArray) ToPolicyAlternativeNameServerConfigTargetNameServerArrayOutputWithContext(ctx context.Context) PolicyAlternativeNameServerConfigTargetNameServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyAlternativeNameServerConfigTargetNameServerArrayOutput)
}

type PolicyAlternativeNameServerConfigTargetNameServerOutput struct{ *pulumi.OutputState }

func (PolicyAlternativeNameServerConfigTargetNameServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyAlternativeNameServerConfigTargetNameServer)(nil)).Elem()
}

func (o PolicyAlternativeNameServerConfigTargetNameServerOutput) ToPolicyAlternativeNameServerConfigTargetNameServerOutput() PolicyAlternativeNameServerConfigTargetNameServerOutput {
	return o
}

func (o PolicyAlternativeNameServerConfigTargetNameServerOutput) ToPolicyAlternativeNameServerConfigTargetNameServerOutputWithContext(ctx context.Context) PolicyAlternativeNameServerConfigTargetNameServerOutput {
	return o
}

// Forwarding path for this TargetNameServer. If unset or set to DEFAULT, Cloud DNS makes forwarding decisions based on address ranges; that is, RFC1918 addresses go to the VPC network, non-RFC1918 addresses go to the internet. When set to PRIVATE, Cloud DNS always sends queries through the VPC network for this target.
func (o PolicyAlternativeNameServerConfigTargetNameServerOutput) ForwardingPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyAlternativeNameServerConfigTargetNameServer) *string { return v.ForwardingPath }).(pulumi.StringPtrOutput)
}

// IPv4 address to forward to.
func (o PolicyAlternativeNameServerConfigTargetNameServerOutput) Ipv4Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyAlternativeNameServerConfigTargetNameServer) *string { return v.Ipv4Address }).(pulumi.StringPtrOutput)
}

func (o PolicyAlternativeNameServerConfigTargetNameServerOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyAlternativeNameServerConfigTargetNameServer) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

type PolicyAlternativeNameServerConfigTargetNameServerArrayOutput struct{ *pulumi.OutputState }

func (PolicyAlternativeNameServerConfigTargetNameServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyAlternativeNameServerConfigTargetNameServer)(nil)).Elem()
}

func (o PolicyAlternativeNameServerConfigTargetNameServerArrayOutput) ToPolicyAlternativeNameServerConfigTargetNameServerArrayOutput() PolicyAlternativeNameServerConfigTargetNameServerArrayOutput {
	return o
}

func (o PolicyAlternativeNameServerConfigTargetNameServerArrayOutput) ToPolicyAlternativeNameServerConfigTargetNameServerArrayOutputWithContext(ctx context.Context) PolicyAlternativeNameServerConfigTargetNameServerArrayOutput {
	return o
}

func (o PolicyAlternativeNameServerConfigTargetNameServerArrayOutput) Index(i pulumi.IntInput) PolicyAlternativeNameServerConfigTargetNameServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyAlternativeNameServerConfigTargetNameServer {
		return vs[0].([]PolicyAlternativeNameServerConfigTargetNameServer)[vs[1].(int)]
	}).(PolicyAlternativeNameServerConfigTargetNameServerOutput)
}

type PolicyNetwork struct {
	Kind *string `pulumi:"kind"`
	// The fully qualified URL of the VPC network to bind to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
	NetworkUrl *string `pulumi:"networkUrl"`
}

// PolicyNetworkInput is an input type that accepts PolicyNetworkArgs and PolicyNetworkOutput values.
// You can construct a concrete instance of `PolicyNetworkInput` via:
//
//          PolicyNetworkArgs{...}
type PolicyNetworkInput interface {
	pulumi.Input

	ToPolicyNetworkOutput() PolicyNetworkOutput
	ToPolicyNetworkOutputWithContext(context.Context) PolicyNetworkOutput
}

type PolicyNetworkArgs struct {
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// The fully qualified URL of the VPC network to bind to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
	NetworkUrl pulumi.StringPtrInput `pulumi:"networkUrl"`
}

func (PolicyNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyNetwork)(nil)).Elem()
}

func (i PolicyNetworkArgs) ToPolicyNetworkOutput() PolicyNetworkOutput {
	return i.ToPolicyNetworkOutputWithContext(context.Background())
}

func (i PolicyNetworkArgs) ToPolicyNetworkOutputWithContext(ctx context.Context) PolicyNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyNetworkOutput)
}

// PolicyNetworkArrayInput is an input type that accepts PolicyNetworkArray and PolicyNetworkArrayOutput values.
// You can construct a concrete instance of `PolicyNetworkArrayInput` via:
//
//          PolicyNetworkArray{ PolicyNetworkArgs{...} }
type PolicyNetworkArrayInput interface {
	pulumi.Input

	ToPolicyNetworkArrayOutput() PolicyNetworkArrayOutput
	ToPolicyNetworkArrayOutputWithContext(context.Context) PolicyNetworkArrayOutput
}

type PolicyNetworkArray []PolicyNetworkInput

func (PolicyNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyNetwork)(nil)).Elem()
}

func (i PolicyNetworkArray) ToPolicyNetworkArrayOutput() PolicyNetworkArrayOutput {
	return i.ToPolicyNetworkArrayOutputWithContext(context.Background())
}

func (i PolicyNetworkArray) ToPolicyNetworkArrayOutputWithContext(ctx context.Context) PolicyNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyNetworkArrayOutput)
}

type PolicyNetworkOutput struct{ *pulumi.OutputState }

func (PolicyNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyNetwork)(nil)).Elem()
}

func (o PolicyNetworkOutput) ToPolicyNetworkOutput() PolicyNetworkOutput {
	return o
}

func (o PolicyNetworkOutput) ToPolicyNetworkOutputWithContext(ctx context.Context) PolicyNetworkOutput {
	return o
}

func (o PolicyNetworkOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyNetwork) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// The fully qualified URL of the VPC network to bind to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
func (o PolicyNetworkOutput) NetworkUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyNetwork) *string { return v.NetworkUrl }).(pulumi.StringPtrOutput)
}

type PolicyNetworkArrayOutput struct{ *pulumi.OutputState }

func (PolicyNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyNetwork)(nil)).Elem()
}

func (o PolicyNetworkArrayOutput) ToPolicyNetworkArrayOutput() PolicyNetworkArrayOutput {
	return o
}

func (o PolicyNetworkArrayOutput) ToPolicyNetworkArrayOutputWithContext(ctx context.Context) PolicyNetworkArrayOutput {
	return o
}

func (o PolicyNetworkArrayOutput) Index(i pulumi.IntInput) PolicyNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyNetwork {
		return vs[0].([]PolicyNetwork)[vs[1].(int)]
	}).(PolicyNetworkOutput)
}

// A unit of data that is returned by the DNS servers.
type ResourceRecordSetType struct {
	Kind *string `pulumi:"kind"`
	// For example, www.example.com.
	Name *string `pulumi:"name"`
	// As defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1) -- see examples.
	Rrdatas []string `pulumi:"rrdatas"`
	// As defined in RFC 4034 (section 3.2).
	SignatureRrdatas []string `pulumi:"signatureRrdatas"`
	// Number of seconds that this ResourceRecordSet can be cached by resolvers.
	Ttl *int `pulumi:"ttl"`
	// The identifier of a supported record type. See the list of Supported DNS record types.
	Type *string `pulumi:"type"`
}

// ResourceRecordSetTypeInput is an input type that accepts ResourceRecordSetTypeArgs and ResourceRecordSetTypeOutput values.
// You can construct a concrete instance of `ResourceRecordSetTypeInput` via:
//
//          ResourceRecordSetTypeArgs{...}
type ResourceRecordSetTypeInput interface {
	pulumi.Input

	ToResourceRecordSetTypeOutput() ResourceRecordSetTypeOutput
	ToResourceRecordSetTypeOutputWithContext(context.Context) ResourceRecordSetTypeOutput
}

// A unit of data that is returned by the DNS servers.
type ResourceRecordSetTypeArgs struct {
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// For example, www.example.com.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// As defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1) -- see examples.
	Rrdatas pulumi.StringArrayInput `pulumi:"rrdatas"`
	// As defined in RFC 4034 (section 3.2).
	SignatureRrdatas pulumi.StringArrayInput `pulumi:"signatureRrdatas"`
	// Number of seconds that this ResourceRecordSet can be cached by resolvers.
	Ttl pulumi.IntPtrInput `pulumi:"ttl"`
	// The identifier of a supported record type. See the list of Supported DNS record types.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ResourceRecordSetTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRecordSetType)(nil)).Elem()
}

func (i ResourceRecordSetTypeArgs) ToResourceRecordSetTypeOutput() ResourceRecordSetTypeOutput {
	return i.ToResourceRecordSetTypeOutputWithContext(context.Background())
}

func (i ResourceRecordSetTypeArgs) ToResourceRecordSetTypeOutputWithContext(ctx context.Context) ResourceRecordSetTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRecordSetTypeOutput)
}

// ResourceRecordSetTypeArrayInput is an input type that accepts ResourceRecordSetTypeArray and ResourceRecordSetTypeArrayOutput values.
// You can construct a concrete instance of `ResourceRecordSetTypeArrayInput` via:
//
//          ResourceRecordSetTypeArray{ ResourceRecordSetTypeArgs{...} }
type ResourceRecordSetTypeArrayInput interface {
	pulumi.Input

	ToResourceRecordSetTypeArrayOutput() ResourceRecordSetTypeArrayOutput
	ToResourceRecordSetTypeArrayOutputWithContext(context.Context) ResourceRecordSetTypeArrayOutput
}

type ResourceRecordSetTypeArray []ResourceRecordSetTypeInput

func (ResourceRecordSetTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceRecordSetType)(nil)).Elem()
}

func (i ResourceRecordSetTypeArray) ToResourceRecordSetTypeArrayOutput() ResourceRecordSetTypeArrayOutput {
	return i.ToResourceRecordSetTypeArrayOutputWithContext(context.Background())
}

func (i ResourceRecordSetTypeArray) ToResourceRecordSetTypeArrayOutputWithContext(ctx context.Context) ResourceRecordSetTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRecordSetTypeArrayOutput)
}

// A unit of data that is returned by the DNS servers.
type ResourceRecordSetTypeOutput struct{ *pulumi.OutputState }

func (ResourceRecordSetTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRecordSetType)(nil)).Elem()
}

func (o ResourceRecordSetTypeOutput) ToResourceRecordSetTypeOutput() ResourceRecordSetTypeOutput {
	return o
}

func (o ResourceRecordSetTypeOutput) ToResourceRecordSetTypeOutputWithContext(ctx context.Context) ResourceRecordSetTypeOutput {
	return o
}

func (o ResourceRecordSetTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceRecordSetType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// For example, www.example.com.
func (o ResourceRecordSetTypeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceRecordSetType) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// As defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1) -- see examples.
func (o ResourceRecordSetTypeOutput) Rrdatas() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResourceRecordSetType) []string { return v.Rrdatas }).(pulumi.StringArrayOutput)
}

// As defined in RFC 4034 (section 3.2).
func (o ResourceRecordSetTypeOutput) SignatureRrdatas() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResourceRecordSetType) []string { return v.SignatureRrdatas }).(pulumi.StringArrayOutput)
}

// Number of seconds that this ResourceRecordSet can be cached by resolvers.
func (o ResourceRecordSetTypeOutput) Ttl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceRecordSetType) *int { return v.Ttl }).(pulumi.IntPtrOutput)
}

// The identifier of a supported record type. See the list of Supported DNS record types.
func (o ResourceRecordSetTypeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceRecordSetType) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ResourceRecordSetTypeArrayOutput struct{ *pulumi.OutputState }

func (ResourceRecordSetTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceRecordSetType)(nil)).Elem()
}

func (o ResourceRecordSetTypeArrayOutput) ToResourceRecordSetTypeArrayOutput() ResourceRecordSetTypeArrayOutput {
	return o
}

func (o ResourceRecordSetTypeArrayOutput) ToResourceRecordSetTypeArrayOutputWithContext(ctx context.Context) ResourceRecordSetTypeArrayOutput {
	return o
}

func (o ResourceRecordSetTypeArrayOutput) Index(i pulumi.IntInput) ResourceRecordSetTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceRecordSetType {
		return vs[0].([]ResourceRecordSetType)[vs[1].(int)]
	}).(ResourceRecordSetTypeOutput)
}

func init() {
	pulumi.RegisterOutputType(DnsKeySpecOutput{})
	pulumi.RegisterOutputType(DnsKeySpecArrayOutput{})
	pulumi.RegisterOutputType(ManagedZoneDnsSecConfigOutput{})
	pulumi.RegisterOutputType(ManagedZoneDnsSecConfigPtrOutput{})
	pulumi.RegisterOutputType(ManagedZoneForwardingConfigOutput{})
	pulumi.RegisterOutputType(ManagedZoneForwardingConfigPtrOutput{})
	pulumi.RegisterOutputType(ManagedZoneForwardingConfigNameServerTargetOutput{})
	pulumi.RegisterOutputType(ManagedZoneForwardingConfigNameServerTargetArrayOutput{})
	pulumi.RegisterOutputType(ManagedZonePeeringConfigOutput{})
	pulumi.RegisterOutputType(ManagedZonePeeringConfigPtrOutput{})
	pulumi.RegisterOutputType(ManagedZonePeeringConfigTargetNetworkOutput{})
	pulumi.RegisterOutputType(ManagedZonePeeringConfigTargetNetworkPtrOutput{})
	pulumi.RegisterOutputType(ManagedZonePrivateVisibilityConfigOutput{})
	pulumi.RegisterOutputType(ManagedZonePrivateVisibilityConfigPtrOutput{})
	pulumi.RegisterOutputType(ManagedZonePrivateVisibilityConfigNetworkOutput{})
	pulumi.RegisterOutputType(ManagedZonePrivateVisibilityConfigNetworkArrayOutput{})
	pulumi.RegisterOutputType(ManagedZoneReverseLookupConfigOutput{})
	pulumi.RegisterOutputType(ManagedZoneReverseLookupConfigPtrOutput{})
	pulumi.RegisterOutputType(ManagedZoneServiceDirectoryConfigOutput{})
	pulumi.RegisterOutputType(ManagedZoneServiceDirectoryConfigPtrOutput{})
	pulumi.RegisterOutputType(ManagedZoneServiceDirectoryConfigNamespaceOutput{})
	pulumi.RegisterOutputType(ManagedZoneServiceDirectoryConfigNamespacePtrOutput{})
	pulumi.RegisterOutputType(PolicyAlternativeNameServerConfigOutput{})
	pulumi.RegisterOutputType(PolicyAlternativeNameServerConfigPtrOutput{})
	pulumi.RegisterOutputType(PolicyAlternativeNameServerConfigTargetNameServerOutput{})
	pulumi.RegisterOutputType(PolicyAlternativeNameServerConfigTargetNameServerArrayOutput{})
	pulumi.RegisterOutputType(PolicyNetworkOutput{})
	pulumi.RegisterOutputType(PolicyNetworkArrayOutput{})
	pulumi.RegisterOutputType(ResourceRecordSetTypeOutput{})
	pulumi.RegisterOutputType(ResourceRecordSetTypeArrayOutput{})
}
