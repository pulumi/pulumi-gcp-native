// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// Parameters for DnsKey key generation. Used for generating initial keys for a new ManagedZone and as default when adding a new DnsKey.
type DnsKeySpec struct {
	// String mnemonic specifying the DNSSEC algorithm of this key.
	Algorithm *DnsKeySpecAlgorithm `pulumi:"algorithm"`
	// Length of the keys in bits.
	KeyLength *int `pulumi:"keyLength"`
	// Specifies whether this is a key signing key (KSK) or a zone signing key (ZSK). Key signing keys have the Secure Entry Point flag set and, when active, are only used to sign resource record sets of type DNSKEY. Zone signing keys do not have the Secure Entry Point flag set and are used to sign all other types of resource record sets.
	KeyType *DnsKeySpecKeyType `pulumi:"keyType"`
	Kind    *string            `pulumi:"kind"`
}

// DnsKeySpecInput is an input type that accepts DnsKeySpecArgs and DnsKeySpecOutput values.
// You can construct a concrete instance of `DnsKeySpecInput` via:
//
//	DnsKeySpecArgs{...}
type DnsKeySpecInput interface {
	pulumi.Input

	ToDnsKeySpecOutput() DnsKeySpecOutput
	ToDnsKeySpecOutputWithContext(context.Context) DnsKeySpecOutput
}

// Parameters for DnsKey key generation. Used for generating initial keys for a new ManagedZone and as default when adding a new DnsKey.
type DnsKeySpecArgs struct {
	// String mnemonic specifying the DNSSEC algorithm of this key.
	Algorithm DnsKeySpecAlgorithmPtrInput `pulumi:"algorithm"`
	// Length of the keys in bits.
	KeyLength pulumi.IntPtrInput `pulumi:"keyLength"`
	// Specifies whether this is a key signing key (KSK) or a zone signing key (ZSK). Key signing keys have the Secure Entry Point flag set and, when active, are only used to sign resource record sets of type DNSKEY. Zone signing keys do not have the Secure Entry Point flag set and are used to sign all other types of resource record sets.
	KeyType DnsKeySpecKeyTypePtrInput `pulumi:"keyType"`
	Kind    pulumi.StringPtrInput     `pulumi:"kind"`
}

func (DnsKeySpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsKeySpec)(nil)).Elem()
}

func (i DnsKeySpecArgs) ToDnsKeySpecOutput() DnsKeySpecOutput {
	return i.ToDnsKeySpecOutputWithContext(context.Background())
}

func (i DnsKeySpecArgs) ToDnsKeySpecOutputWithContext(ctx context.Context) DnsKeySpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsKeySpecOutput)
}

// DnsKeySpecArrayInput is an input type that accepts DnsKeySpecArray and DnsKeySpecArrayOutput values.
// You can construct a concrete instance of `DnsKeySpecArrayInput` via:
//
//	DnsKeySpecArray{ DnsKeySpecArgs{...} }
type DnsKeySpecArrayInput interface {
	pulumi.Input

	ToDnsKeySpecArrayOutput() DnsKeySpecArrayOutput
	ToDnsKeySpecArrayOutputWithContext(context.Context) DnsKeySpecArrayOutput
}

type DnsKeySpecArray []DnsKeySpecInput

func (DnsKeySpecArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DnsKeySpec)(nil)).Elem()
}

func (i DnsKeySpecArray) ToDnsKeySpecArrayOutput() DnsKeySpecArrayOutput {
	return i.ToDnsKeySpecArrayOutputWithContext(context.Background())
}

func (i DnsKeySpecArray) ToDnsKeySpecArrayOutputWithContext(ctx context.Context) DnsKeySpecArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsKeySpecArrayOutput)
}

// Parameters for DnsKey key generation. Used for generating initial keys for a new ManagedZone and as default when adding a new DnsKey.
type DnsKeySpecOutput struct{ *pulumi.OutputState }

func (DnsKeySpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsKeySpec)(nil)).Elem()
}

func (o DnsKeySpecOutput) ToDnsKeySpecOutput() DnsKeySpecOutput {
	return o
}

func (o DnsKeySpecOutput) ToDnsKeySpecOutputWithContext(ctx context.Context) DnsKeySpecOutput {
	return o
}

// String mnemonic specifying the DNSSEC algorithm of this key.
func (o DnsKeySpecOutput) Algorithm() DnsKeySpecAlgorithmPtrOutput {
	return o.ApplyT(func(v DnsKeySpec) *DnsKeySpecAlgorithm { return v.Algorithm }).(DnsKeySpecAlgorithmPtrOutput)
}

// Length of the keys in bits.
func (o DnsKeySpecOutput) KeyLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DnsKeySpec) *int { return v.KeyLength }).(pulumi.IntPtrOutput)
}

// Specifies whether this is a key signing key (KSK) or a zone signing key (ZSK). Key signing keys have the Secure Entry Point flag set and, when active, are only used to sign resource record sets of type DNSKEY. Zone signing keys do not have the Secure Entry Point flag set and are used to sign all other types of resource record sets.
func (o DnsKeySpecOutput) KeyType() DnsKeySpecKeyTypePtrOutput {
	return o.ApplyT(func(v DnsKeySpec) *DnsKeySpecKeyType { return v.KeyType }).(DnsKeySpecKeyTypePtrOutput)
}

func (o DnsKeySpecOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DnsKeySpec) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

type DnsKeySpecArrayOutput struct{ *pulumi.OutputState }

func (DnsKeySpecArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DnsKeySpec)(nil)).Elem()
}

func (o DnsKeySpecArrayOutput) ToDnsKeySpecArrayOutput() DnsKeySpecArrayOutput {
	return o
}

func (o DnsKeySpecArrayOutput) ToDnsKeySpecArrayOutputWithContext(ctx context.Context) DnsKeySpecArrayOutput {
	return o
}

func (o DnsKeySpecArrayOutput) Index(i pulumi.IntInput) DnsKeySpecOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DnsKeySpec {
		return vs[0].([]DnsKeySpec)[vs[1].(int)]
	}).(DnsKeySpecOutput)
}

// Parameters for DnsKey key generation. Used for generating initial keys for a new ManagedZone and as default when adding a new DnsKey.
type DnsKeySpecResponse struct {
	// String mnemonic specifying the DNSSEC algorithm of this key.
	Algorithm string `pulumi:"algorithm"`
	// Length of the keys in bits.
	KeyLength int `pulumi:"keyLength"`
	// Specifies whether this is a key signing key (KSK) or a zone signing key (ZSK). Key signing keys have the Secure Entry Point flag set and, when active, are only used to sign resource record sets of type DNSKEY. Zone signing keys do not have the Secure Entry Point flag set and are used to sign all other types of resource record sets.
	KeyType string `pulumi:"keyType"`
	Kind    string `pulumi:"kind"`
}

// Parameters for DnsKey key generation. Used for generating initial keys for a new ManagedZone and as default when adding a new DnsKey.
type DnsKeySpecResponseOutput struct{ *pulumi.OutputState }

func (DnsKeySpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsKeySpecResponse)(nil)).Elem()
}

func (o DnsKeySpecResponseOutput) ToDnsKeySpecResponseOutput() DnsKeySpecResponseOutput {
	return o
}

func (o DnsKeySpecResponseOutput) ToDnsKeySpecResponseOutputWithContext(ctx context.Context) DnsKeySpecResponseOutput {
	return o
}

// String mnemonic specifying the DNSSEC algorithm of this key.
func (o DnsKeySpecResponseOutput) Algorithm() pulumi.StringOutput {
	return o.ApplyT(func(v DnsKeySpecResponse) string { return v.Algorithm }).(pulumi.StringOutput)
}

// Length of the keys in bits.
func (o DnsKeySpecResponseOutput) KeyLength() pulumi.IntOutput {
	return o.ApplyT(func(v DnsKeySpecResponse) int { return v.KeyLength }).(pulumi.IntOutput)
}

// Specifies whether this is a key signing key (KSK) or a zone signing key (ZSK). Key signing keys have the Secure Entry Point flag set and, when active, are only used to sign resource record sets of type DNSKEY. Zone signing keys do not have the Secure Entry Point flag set and are used to sign all other types of resource record sets.
func (o DnsKeySpecResponseOutput) KeyType() pulumi.StringOutput {
	return o.ApplyT(func(v DnsKeySpecResponse) string { return v.KeyType }).(pulumi.StringOutput)
}

func (o DnsKeySpecResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v DnsKeySpecResponse) string { return v.Kind }).(pulumi.StringOutput)
}

type DnsKeySpecResponseArrayOutput struct{ *pulumi.OutputState }

func (DnsKeySpecResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DnsKeySpecResponse)(nil)).Elem()
}

func (o DnsKeySpecResponseArrayOutput) ToDnsKeySpecResponseArrayOutput() DnsKeySpecResponseArrayOutput {
	return o
}

func (o DnsKeySpecResponseArrayOutput) ToDnsKeySpecResponseArrayOutputWithContext(ctx context.Context) DnsKeySpecResponseArrayOutput {
	return o
}

func (o DnsKeySpecResponseArrayOutput) Index(i pulumi.IntInput) DnsKeySpecResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DnsKeySpecResponse {
		return vs[0].([]DnsKeySpecResponse)[vs[1].(int)]
	}).(DnsKeySpecResponseOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//	ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//	        ExprArgs{...}
//
//	or:
//
//	        nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr {
		if v != nil {
			return *v
		}
		var ret Expr
		return ret
	}).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponse struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title string `pulumi:"title"`
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseOutput struct{ *pulumi.OutputState }

func (ExprResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (o ExprResponseOutput) ToExprResponseOutput() ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return o
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Title }).(pulumi.StringOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type GoogleIamV1AuditConfig struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []GoogleIamV1AuditLogConfig `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service *string `pulumi:"service"`
}

// GoogleIamV1AuditConfigInput is an input type that accepts GoogleIamV1AuditConfigArgs and GoogleIamV1AuditConfigOutput values.
// You can construct a concrete instance of `GoogleIamV1AuditConfigInput` via:
//
//	GoogleIamV1AuditConfigArgs{...}
type GoogleIamV1AuditConfigInput interface {
	pulumi.Input

	ToGoogleIamV1AuditConfigOutput() GoogleIamV1AuditConfigOutput
	ToGoogleIamV1AuditConfigOutputWithContext(context.Context) GoogleIamV1AuditConfigOutput
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type GoogleIamV1AuditConfigArgs struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs GoogleIamV1AuditLogConfigArrayInput `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (GoogleIamV1AuditConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleIamV1AuditConfig)(nil)).Elem()
}

func (i GoogleIamV1AuditConfigArgs) ToGoogleIamV1AuditConfigOutput() GoogleIamV1AuditConfigOutput {
	return i.ToGoogleIamV1AuditConfigOutputWithContext(context.Background())
}

func (i GoogleIamV1AuditConfigArgs) ToGoogleIamV1AuditConfigOutputWithContext(ctx context.Context) GoogleIamV1AuditConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleIamV1AuditConfigOutput)
}

// GoogleIamV1AuditConfigArrayInput is an input type that accepts GoogleIamV1AuditConfigArray and GoogleIamV1AuditConfigArrayOutput values.
// You can construct a concrete instance of `GoogleIamV1AuditConfigArrayInput` via:
//
//	GoogleIamV1AuditConfigArray{ GoogleIamV1AuditConfigArgs{...} }
type GoogleIamV1AuditConfigArrayInput interface {
	pulumi.Input

	ToGoogleIamV1AuditConfigArrayOutput() GoogleIamV1AuditConfigArrayOutput
	ToGoogleIamV1AuditConfigArrayOutputWithContext(context.Context) GoogleIamV1AuditConfigArrayOutput
}

type GoogleIamV1AuditConfigArray []GoogleIamV1AuditConfigInput

func (GoogleIamV1AuditConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleIamV1AuditConfig)(nil)).Elem()
}

func (i GoogleIamV1AuditConfigArray) ToGoogleIamV1AuditConfigArrayOutput() GoogleIamV1AuditConfigArrayOutput {
	return i.ToGoogleIamV1AuditConfigArrayOutputWithContext(context.Background())
}

func (i GoogleIamV1AuditConfigArray) ToGoogleIamV1AuditConfigArrayOutputWithContext(ctx context.Context) GoogleIamV1AuditConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleIamV1AuditConfigArrayOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type GoogleIamV1AuditConfigOutput struct{ *pulumi.OutputState }

func (GoogleIamV1AuditConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleIamV1AuditConfig)(nil)).Elem()
}

func (o GoogleIamV1AuditConfigOutput) ToGoogleIamV1AuditConfigOutput() GoogleIamV1AuditConfigOutput {
	return o
}

func (o GoogleIamV1AuditConfigOutput) ToGoogleIamV1AuditConfigOutputWithContext(ctx context.Context) GoogleIamV1AuditConfigOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o GoogleIamV1AuditConfigOutput) AuditLogConfigs() GoogleIamV1AuditLogConfigArrayOutput {
	return o.ApplyT(func(v GoogleIamV1AuditConfig) []GoogleIamV1AuditLogConfig { return v.AuditLogConfigs }).(GoogleIamV1AuditLogConfigArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o GoogleIamV1AuditConfigOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleIamV1AuditConfig) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type GoogleIamV1AuditConfigArrayOutput struct{ *pulumi.OutputState }

func (GoogleIamV1AuditConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleIamV1AuditConfig)(nil)).Elem()
}

func (o GoogleIamV1AuditConfigArrayOutput) ToGoogleIamV1AuditConfigArrayOutput() GoogleIamV1AuditConfigArrayOutput {
	return o
}

func (o GoogleIamV1AuditConfigArrayOutput) ToGoogleIamV1AuditConfigArrayOutputWithContext(ctx context.Context) GoogleIamV1AuditConfigArrayOutput {
	return o
}

func (o GoogleIamV1AuditConfigArrayOutput) Index(i pulumi.IntInput) GoogleIamV1AuditConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleIamV1AuditConfig {
		return vs[0].([]GoogleIamV1AuditConfig)[vs[1].(int)]
	}).(GoogleIamV1AuditConfigOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type GoogleIamV1AuditConfigResponse struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []GoogleIamV1AuditLogConfigResponse `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service string `pulumi:"service"`
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type GoogleIamV1AuditConfigResponseOutput struct{ *pulumi.OutputState }

func (GoogleIamV1AuditConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleIamV1AuditConfigResponse)(nil)).Elem()
}

func (o GoogleIamV1AuditConfigResponseOutput) ToGoogleIamV1AuditConfigResponseOutput() GoogleIamV1AuditConfigResponseOutput {
	return o
}

func (o GoogleIamV1AuditConfigResponseOutput) ToGoogleIamV1AuditConfigResponseOutputWithContext(ctx context.Context) GoogleIamV1AuditConfigResponseOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o GoogleIamV1AuditConfigResponseOutput) AuditLogConfigs() GoogleIamV1AuditLogConfigResponseArrayOutput {
	return o.ApplyT(func(v GoogleIamV1AuditConfigResponse) []GoogleIamV1AuditLogConfigResponse { return v.AuditLogConfigs }).(GoogleIamV1AuditLogConfigResponseArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o GoogleIamV1AuditConfigResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleIamV1AuditConfigResponse) string { return v.Service }).(pulumi.StringOutput)
}

type GoogleIamV1AuditConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (GoogleIamV1AuditConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleIamV1AuditConfigResponse)(nil)).Elem()
}

func (o GoogleIamV1AuditConfigResponseArrayOutput) ToGoogleIamV1AuditConfigResponseArrayOutput() GoogleIamV1AuditConfigResponseArrayOutput {
	return o
}

func (o GoogleIamV1AuditConfigResponseArrayOutput) ToGoogleIamV1AuditConfigResponseArrayOutputWithContext(ctx context.Context) GoogleIamV1AuditConfigResponseArrayOutput {
	return o
}

func (o GoogleIamV1AuditConfigResponseArrayOutput) Index(i pulumi.IntInput) GoogleIamV1AuditConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleIamV1AuditConfigResponse {
		return vs[0].([]GoogleIamV1AuditConfigResponse)[vs[1].(int)]
	}).(GoogleIamV1AuditConfigResponseOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type GoogleIamV1AuditLogConfig struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType *GoogleIamV1AuditLogConfigLogType `pulumi:"logType"`
}

// GoogleIamV1AuditLogConfigInput is an input type that accepts GoogleIamV1AuditLogConfigArgs and GoogleIamV1AuditLogConfigOutput values.
// You can construct a concrete instance of `GoogleIamV1AuditLogConfigInput` via:
//
//	GoogleIamV1AuditLogConfigArgs{...}
type GoogleIamV1AuditLogConfigInput interface {
	pulumi.Input

	ToGoogleIamV1AuditLogConfigOutput() GoogleIamV1AuditLogConfigOutput
	ToGoogleIamV1AuditLogConfigOutputWithContext(context.Context) GoogleIamV1AuditLogConfigOutput
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type GoogleIamV1AuditLogConfigArgs struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers pulumi.StringArrayInput `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType GoogleIamV1AuditLogConfigLogTypePtrInput `pulumi:"logType"`
}

func (GoogleIamV1AuditLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleIamV1AuditLogConfig)(nil)).Elem()
}

func (i GoogleIamV1AuditLogConfigArgs) ToGoogleIamV1AuditLogConfigOutput() GoogleIamV1AuditLogConfigOutput {
	return i.ToGoogleIamV1AuditLogConfigOutputWithContext(context.Background())
}

func (i GoogleIamV1AuditLogConfigArgs) ToGoogleIamV1AuditLogConfigOutputWithContext(ctx context.Context) GoogleIamV1AuditLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleIamV1AuditLogConfigOutput)
}

// GoogleIamV1AuditLogConfigArrayInput is an input type that accepts GoogleIamV1AuditLogConfigArray and GoogleIamV1AuditLogConfigArrayOutput values.
// You can construct a concrete instance of `GoogleIamV1AuditLogConfigArrayInput` via:
//
//	GoogleIamV1AuditLogConfigArray{ GoogleIamV1AuditLogConfigArgs{...} }
type GoogleIamV1AuditLogConfigArrayInput interface {
	pulumi.Input

	ToGoogleIamV1AuditLogConfigArrayOutput() GoogleIamV1AuditLogConfigArrayOutput
	ToGoogleIamV1AuditLogConfigArrayOutputWithContext(context.Context) GoogleIamV1AuditLogConfigArrayOutput
}

type GoogleIamV1AuditLogConfigArray []GoogleIamV1AuditLogConfigInput

func (GoogleIamV1AuditLogConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleIamV1AuditLogConfig)(nil)).Elem()
}

func (i GoogleIamV1AuditLogConfigArray) ToGoogleIamV1AuditLogConfigArrayOutput() GoogleIamV1AuditLogConfigArrayOutput {
	return i.ToGoogleIamV1AuditLogConfigArrayOutputWithContext(context.Background())
}

func (i GoogleIamV1AuditLogConfigArray) ToGoogleIamV1AuditLogConfigArrayOutputWithContext(ctx context.Context) GoogleIamV1AuditLogConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleIamV1AuditLogConfigArrayOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type GoogleIamV1AuditLogConfigOutput struct{ *pulumi.OutputState }

func (GoogleIamV1AuditLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleIamV1AuditLogConfig)(nil)).Elem()
}

func (o GoogleIamV1AuditLogConfigOutput) ToGoogleIamV1AuditLogConfigOutput() GoogleIamV1AuditLogConfigOutput {
	return o
}

func (o GoogleIamV1AuditLogConfigOutput) ToGoogleIamV1AuditLogConfigOutputWithContext(ctx context.Context) GoogleIamV1AuditLogConfigOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o GoogleIamV1AuditLogConfigOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GoogleIamV1AuditLogConfig) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o GoogleIamV1AuditLogConfigOutput) LogType() GoogleIamV1AuditLogConfigLogTypePtrOutput {
	return o.ApplyT(func(v GoogleIamV1AuditLogConfig) *GoogleIamV1AuditLogConfigLogType { return v.LogType }).(GoogleIamV1AuditLogConfigLogTypePtrOutput)
}

type GoogleIamV1AuditLogConfigArrayOutput struct{ *pulumi.OutputState }

func (GoogleIamV1AuditLogConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleIamV1AuditLogConfig)(nil)).Elem()
}

func (o GoogleIamV1AuditLogConfigArrayOutput) ToGoogleIamV1AuditLogConfigArrayOutput() GoogleIamV1AuditLogConfigArrayOutput {
	return o
}

func (o GoogleIamV1AuditLogConfigArrayOutput) ToGoogleIamV1AuditLogConfigArrayOutputWithContext(ctx context.Context) GoogleIamV1AuditLogConfigArrayOutput {
	return o
}

func (o GoogleIamV1AuditLogConfigArrayOutput) Index(i pulumi.IntInput) GoogleIamV1AuditLogConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleIamV1AuditLogConfig {
		return vs[0].([]GoogleIamV1AuditLogConfig)[vs[1].(int)]
	}).(GoogleIamV1AuditLogConfigOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type GoogleIamV1AuditLogConfigResponse struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType string `pulumi:"logType"`
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type GoogleIamV1AuditLogConfigResponseOutput struct{ *pulumi.OutputState }

func (GoogleIamV1AuditLogConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleIamV1AuditLogConfigResponse)(nil)).Elem()
}

func (o GoogleIamV1AuditLogConfigResponseOutput) ToGoogleIamV1AuditLogConfigResponseOutput() GoogleIamV1AuditLogConfigResponseOutput {
	return o
}

func (o GoogleIamV1AuditLogConfigResponseOutput) ToGoogleIamV1AuditLogConfigResponseOutputWithContext(ctx context.Context) GoogleIamV1AuditLogConfigResponseOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o GoogleIamV1AuditLogConfigResponseOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GoogleIamV1AuditLogConfigResponse) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o GoogleIamV1AuditLogConfigResponseOutput) LogType() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleIamV1AuditLogConfigResponse) string { return v.LogType }).(pulumi.StringOutput)
}

type GoogleIamV1AuditLogConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (GoogleIamV1AuditLogConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleIamV1AuditLogConfigResponse)(nil)).Elem()
}

func (o GoogleIamV1AuditLogConfigResponseArrayOutput) ToGoogleIamV1AuditLogConfigResponseArrayOutput() GoogleIamV1AuditLogConfigResponseArrayOutput {
	return o
}

func (o GoogleIamV1AuditLogConfigResponseArrayOutput) ToGoogleIamV1AuditLogConfigResponseArrayOutputWithContext(ctx context.Context) GoogleIamV1AuditLogConfigResponseArrayOutput {
	return o
}

func (o GoogleIamV1AuditLogConfigResponseArrayOutput) Index(i pulumi.IntInput) GoogleIamV1AuditLogConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleIamV1AuditLogConfigResponse {
		return vs[0].([]GoogleIamV1AuditLogConfigResponse)[vs[1].(int)]
	}).(GoogleIamV1AuditLogConfigResponseOutput)
}

// Associates `members`, or principals, with a `role`.
type GoogleIamV1Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// GoogleIamV1BindingInput is an input type that accepts GoogleIamV1BindingArgs and GoogleIamV1BindingOutput values.
// You can construct a concrete instance of `GoogleIamV1BindingInput` via:
//
//	GoogleIamV1BindingArgs{...}
type GoogleIamV1BindingInput interface {
	pulumi.Input

	ToGoogleIamV1BindingOutput() GoogleIamV1BindingOutput
	ToGoogleIamV1BindingOutputWithContext(context.Context) GoogleIamV1BindingOutput
}

// Associates `members`, or principals, with a `role`.
type GoogleIamV1BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (GoogleIamV1BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleIamV1Binding)(nil)).Elem()
}

func (i GoogleIamV1BindingArgs) ToGoogleIamV1BindingOutput() GoogleIamV1BindingOutput {
	return i.ToGoogleIamV1BindingOutputWithContext(context.Background())
}

func (i GoogleIamV1BindingArgs) ToGoogleIamV1BindingOutputWithContext(ctx context.Context) GoogleIamV1BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleIamV1BindingOutput)
}

// GoogleIamV1BindingArrayInput is an input type that accepts GoogleIamV1BindingArray and GoogleIamV1BindingArrayOutput values.
// You can construct a concrete instance of `GoogleIamV1BindingArrayInput` via:
//
//	GoogleIamV1BindingArray{ GoogleIamV1BindingArgs{...} }
type GoogleIamV1BindingArrayInput interface {
	pulumi.Input

	ToGoogleIamV1BindingArrayOutput() GoogleIamV1BindingArrayOutput
	ToGoogleIamV1BindingArrayOutputWithContext(context.Context) GoogleIamV1BindingArrayOutput
}

type GoogleIamV1BindingArray []GoogleIamV1BindingInput

func (GoogleIamV1BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleIamV1Binding)(nil)).Elem()
}

func (i GoogleIamV1BindingArray) ToGoogleIamV1BindingArrayOutput() GoogleIamV1BindingArrayOutput {
	return i.ToGoogleIamV1BindingArrayOutputWithContext(context.Background())
}

func (i GoogleIamV1BindingArray) ToGoogleIamV1BindingArrayOutputWithContext(ctx context.Context) GoogleIamV1BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleIamV1BindingArrayOutput)
}

// Associates `members`, or principals, with a `role`.
type GoogleIamV1BindingOutput struct{ *pulumi.OutputState }

func (GoogleIamV1BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleIamV1Binding)(nil)).Elem()
}

func (o GoogleIamV1BindingOutput) ToGoogleIamV1BindingOutput() GoogleIamV1BindingOutput {
	return o
}

func (o GoogleIamV1BindingOutput) ToGoogleIamV1BindingOutputWithContext(ctx context.Context) GoogleIamV1BindingOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o GoogleIamV1BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v GoogleIamV1Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
func (o GoogleIamV1BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GoogleIamV1Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o GoogleIamV1BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleIamV1Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type GoogleIamV1BindingArrayOutput struct{ *pulumi.OutputState }

func (GoogleIamV1BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleIamV1Binding)(nil)).Elem()
}

func (o GoogleIamV1BindingArrayOutput) ToGoogleIamV1BindingArrayOutput() GoogleIamV1BindingArrayOutput {
	return o
}

func (o GoogleIamV1BindingArrayOutput) ToGoogleIamV1BindingArrayOutputWithContext(ctx context.Context) GoogleIamV1BindingArrayOutput {
	return o
}

func (o GoogleIamV1BindingArrayOutput) Index(i pulumi.IntInput) GoogleIamV1BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleIamV1Binding {
		return vs[0].([]GoogleIamV1Binding)[vs[1].(int)]
	}).(GoogleIamV1BindingOutput)
}

// Associates `members`, or principals, with a `role`.
type GoogleIamV1BindingResponse struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprResponse `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role string `pulumi:"role"`
}

// Associates `members`, or principals, with a `role`.
type GoogleIamV1BindingResponseOutput struct{ *pulumi.OutputState }

func (GoogleIamV1BindingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleIamV1BindingResponse)(nil)).Elem()
}

func (o GoogleIamV1BindingResponseOutput) ToGoogleIamV1BindingResponseOutput() GoogleIamV1BindingResponseOutput {
	return o
}

func (o GoogleIamV1BindingResponseOutput) ToGoogleIamV1BindingResponseOutputWithContext(ctx context.Context) GoogleIamV1BindingResponseOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o GoogleIamV1BindingResponseOutput) Condition() ExprResponseOutput {
	return o.ApplyT(func(v GoogleIamV1BindingResponse) ExprResponse { return v.Condition }).(ExprResponseOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
func (o GoogleIamV1BindingResponseOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GoogleIamV1BindingResponse) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o GoogleIamV1BindingResponseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleIamV1BindingResponse) string { return v.Role }).(pulumi.StringOutput)
}

type GoogleIamV1BindingResponseArrayOutput struct{ *pulumi.OutputState }

func (GoogleIamV1BindingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleIamV1BindingResponse)(nil)).Elem()
}

func (o GoogleIamV1BindingResponseArrayOutput) ToGoogleIamV1BindingResponseArrayOutput() GoogleIamV1BindingResponseArrayOutput {
	return o
}

func (o GoogleIamV1BindingResponseArrayOutput) ToGoogleIamV1BindingResponseArrayOutputWithContext(ctx context.Context) GoogleIamV1BindingResponseArrayOutput {
	return o
}

func (o GoogleIamV1BindingResponseArrayOutput) Index(i pulumi.IntInput) GoogleIamV1BindingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleIamV1BindingResponse {
		return vs[0].([]GoogleIamV1BindingResponse)[vs[1].(int)]
	}).(GoogleIamV1BindingResponseOutput)
}

// Cloud Logging configurations for publicly visible zones.
type ManagedZoneCloudLoggingConfig struct {
	// If set, enable query logging for this ManagedZone. False by default, making logging opt-in.
	EnableLogging *bool   `pulumi:"enableLogging"`
	Kind          *string `pulumi:"kind"`
}

// ManagedZoneCloudLoggingConfigInput is an input type that accepts ManagedZoneCloudLoggingConfigArgs and ManagedZoneCloudLoggingConfigOutput values.
// You can construct a concrete instance of `ManagedZoneCloudLoggingConfigInput` via:
//
//	ManagedZoneCloudLoggingConfigArgs{...}
type ManagedZoneCloudLoggingConfigInput interface {
	pulumi.Input

	ToManagedZoneCloudLoggingConfigOutput() ManagedZoneCloudLoggingConfigOutput
	ToManagedZoneCloudLoggingConfigOutputWithContext(context.Context) ManagedZoneCloudLoggingConfigOutput
}

// Cloud Logging configurations for publicly visible zones.
type ManagedZoneCloudLoggingConfigArgs struct {
	// If set, enable query logging for this ManagedZone. False by default, making logging opt-in.
	EnableLogging pulumi.BoolPtrInput   `pulumi:"enableLogging"`
	Kind          pulumi.StringPtrInput `pulumi:"kind"`
}

func (ManagedZoneCloudLoggingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneCloudLoggingConfig)(nil)).Elem()
}

func (i ManagedZoneCloudLoggingConfigArgs) ToManagedZoneCloudLoggingConfigOutput() ManagedZoneCloudLoggingConfigOutput {
	return i.ToManagedZoneCloudLoggingConfigOutputWithContext(context.Background())
}

func (i ManagedZoneCloudLoggingConfigArgs) ToManagedZoneCloudLoggingConfigOutputWithContext(ctx context.Context) ManagedZoneCloudLoggingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneCloudLoggingConfigOutput)
}

func (i ManagedZoneCloudLoggingConfigArgs) ToManagedZoneCloudLoggingConfigPtrOutput() ManagedZoneCloudLoggingConfigPtrOutput {
	return i.ToManagedZoneCloudLoggingConfigPtrOutputWithContext(context.Background())
}

func (i ManagedZoneCloudLoggingConfigArgs) ToManagedZoneCloudLoggingConfigPtrOutputWithContext(ctx context.Context) ManagedZoneCloudLoggingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneCloudLoggingConfigOutput).ToManagedZoneCloudLoggingConfigPtrOutputWithContext(ctx)
}

// ManagedZoneCloudLoggingConfigPtrInput is an input type that accepts ManagedZoneCloudLoggingConfigArgs, ManagedZoneCloudLoggingConfigPtr and ManagedZoneCloudLoggingConfigPtrOutput values.
// You can construct a concrete instance of `ManagedZoneCloudLoggingConfigPtrInput` via:
//
//	        ManagedZoneCloudLoggingConfigArgs{...}
//
//	or:
//
//	        nil
type ManagedZoneCloudLoggingConfigPtrInput interface {
	pulumi.Input

	ToManagedZoneCloudLoggingConfigPtrOutput() ManagedZoneCloudLoggingConfigPtrOutput
	ToManagedZoneCloudLoggingConfigPtrOutputWithContext(context.Context) ManagedZoneCloudLoggingConfigPtrOutput
}

type managedZoneCloudLoggingConfigPtrType ManagedZoneCloudLoggingConfigArgs

func ManagedZoneCloudLoggingConfigPtr(v *ManagedZoneCloudLoggingConfigArgs) ManagedZoneCloudLoggingConfigPtrInput {
	return (*managedZoneCloudLoggingConfigPtrType)(v)
}

func (*managedZoneCloudLoggingConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZoneCloudLoggingConfig)(nil)).Elem()
}

func (i *managedZoneCloudLoggingConfigPtrType) ToManagedZoneCloudLoggingConfigPtrOutput() ManagedZoneCloudLoggingConfigPtrOutput {
	return i.ToManagedZoneCloudLoggingConfigPtrOutputWithContext(context.Background())
}

func (i *managedZoneCloudLoggingConfigPtrType) ToManagedZoneCloudLoggingConfigPtrOutputWithContext(ctx context.Context) ManagedZoneCloudLoggingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneCloudLoggingConfigPtrOutput)
}

// Cloud Logging configurations for publicly visible zones.
type ManagedZoneCloudLoggingConfigOutput struct{ *pulumi.OutputState }

func (ManagedZoneCloudLoggingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneCloudLoggingConfig)(nil)).Elem()
}

func (o ManagedZoneCloudLoggingConfigOutput) ToManagedZoneCloudLoggingConfigOutput() ManagedZoneCloudLoggingConfigOutput {
	return o
}

func (o ManagedZoneCloudLoggingConfigOutput) ToManagedZoneCloudLoggingConfigOutputWithContext(ctx context.Context) ManagedZoneCloudLoggingConfigOutput {
	return o
}

func (o ManagedZoneCloudLoggingConfigOutput) ToManagedZoneCloudLoggingConfigPtrOutput() ManagedZoneCloudLoggingConfigPtrOutput {
	return o.ToManagedZoneCloudLoggingConfigPtrOutputWithContext(context.Background())
}

func (o ManagedZoneCloudLoggingConfigOutput) ToManagedZoneCloudLoggingConfigPtrOutputWithContext(ctx context.Context) ManagedZoneCloudLoggingConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedZoneCloudLoggingConfig) *ManagedZoneCloudLoggingConfig {
		return &v
	}).(ManagedZoneCloudLoggingConfigPtrOutput)
}

// If set, enable query logging for this ManagedZone. False by default, making logging opt-in.
func (o ManagedZoneCloudLoggingConfigOutput) EnableLogging() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedZoneCloudLoggingConfig) *bool { return v.EnableLogging }).(pulumi.BoolPtrOutput)
}

func (o ManagedZoneCloudLoggingConfigOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZoneCloudLoggingConfig) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

type ManagedZoneCloudLoggingConfigPtrOutput struct{ *pulumi.OutputState }

func (ManagedZoneCloudLoggingConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZoneCloudLoggingConfig)(nil)).Elem()
}

func (o ManagedZoneCloudLoggingConfigPtrOutput) ToManagedZoneCloudLoggingConfigPtrOutput() ManagedZoneCloudLoggingConfigPtrOutput {
	return o
}

func (o ManagedZoneCloudLoggingConfigPtrOutput) ToManagedZoneCloudLoggingConfigPtrOutputWithContext(ctx context.Context) ManagedZoneCloudLoggingConfigPtrOutput {
	return o
}

func (o ManagedZoneCloudLoggingConfigPtrOutput) Elem() ManagedZoneCloudLoggingConfigOutput {
	return o.ApplyT(func(v *ManagedZoneCloudLoggingConfig) ManagedZoneCloudLoggingConfig {
		if v != nil {
			return *v
		}
		var ret ManagedZoneCloudLoggingConfig
		return ret
	}).(ManagedZoneCloudLoggingConfigOutput)
}

// If set, enable query logging for this ManagedZone. False by default, making logging opt-in.
func (o ManagedZoneCloudLoggingConfigPtrOutput) EnableLogging() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedZoneCloudLoggingConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableLogging
	}).(pulumi.BoolPtrOutput)
}

func (o ManagedZoneCloudLoggingConfigPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedZoneCloudLoggingConfig) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Cloud Logging configurations for publicly visible zones.
type ManagedZoneCloudLoggingConfigResponse struct {
	// If set, enable query logging for this ManagedZone. False by default, making logging opt-in.
	EnableLogging bool   `pulumi:"enableLogging"`
	Kind          string `pulumi:"kind"`
}

// Cloud Logging configurations for publicly visible zones.
type ManagedZoneCloudLoggingConfigResponseOutput struct{ *pulumi.OutputState }

func (ManagedZoneCloudLoggingConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneCloudLoggingConfigResponse)(nil)).Elem()
}

func (o ManagedZoneCloudLoggingConfigResponseOutput) ToManagedZoneCloudLoggingConfigResponseOutput() ManagedZoneCloudLoggingConfigResponseOutput {
	return o
}

func (o ManagedZoneCloudLoggingConfigResponseOutput) ToManagedZoneCloudLoggingConfigResponseOutputWithContext(ctx context.Context) ManagedZoneCloudLoggingConfigResponseOutput {
	return o
}

// If set, enable query logging for this ManagedZone. False by default, making logging opt-in.
func (o ManagedZoneCloudLoggingConfigResponseOutput) EnableLogging() pulumi.BoolOutput {
	return o.ApplyT(func(v ManagedZoneCloudLoggingConfigResponse) bool { return v.EnableLogging }).(pulumi.BoolOutput)
}

func (o ManagedZoneCloudLoggingConfigResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedZoneCloudLoggingConfigResponse) string { return v.Kind }).(pulumi.StringOutput)
}

type ManagedZoneDnsSecConfig struct {
	// Specifies parameters for generating initial DnsKeys for this ManagedZone. Can only be changed while the state is OFF.
	DefaultKeySpecs []DnsKeySpec `pulumi:"defaultKeySpecs"`
	Kind            *string      `pulumi:"kind"`
	// Specifies the mechanism for authenticated denial-of-existence responses. Can only be changed while the state is OFF.
	NonExistence *ManagedZoneDnsSecConfigNonExistence `pulumi:"nonExistence"`
	// Specifies whether DNSSEC is enabled, and what mode it is in.
	State *ManagedZoneDnsSecConfigState `pulumi:"state"`
}

// ManagedZoneDnsSecConfigInput is an input type that accepts ManagedZoneDnsSecConfigArgs and ManagedZoneDnsSecConfigOutput values.
// You can construct a concrete instance of `ManagedZoneDnsSecConfigInput` via:
//
//	ManagedZoneDnsSecConfigArgs{...}
type ManagedZoneDnsSecConfigInput interface {
	pulumi.Input

	ToManagedZoneDnsSecConfigOutput() ManagedZoneDnsSecConfigOutput
	ToManagedZoneDnsSecConfigOutputWithContext(context.Context) ManagedZoneDnsSecConfigOutput
}

type ManagedZoneDnsSecConfigArgs struct {
	// Specifies parameters for generating initial DnsKeys for this ManagedZone. Can only be changed while the state is OFF.
	DefaultKeySpecs DnsKeySpecArrayInput  `pulumi:"defaultKeySpecs"`
	Kind            pulumi.StringPtrInput `pulumi:"kind"`
	// Specifies the mechanism for authenticated denial-of-existence responses. Can only be changed while the state is OFF.
	NonExistence ManagedZoneDnsSecConfigNonExistencePtrInput `pulumi:"nonExistence"`
	// Specifies whether DNSSEC is enabled, and what mode it is in.
	State ManagedZoneDnsSecConfigStatePtrInput `pulumi:"state"`
}

func (ManagedZoneDnsSecConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneDnsSecConfig)(nil)).Elem()
}

func (i ManagedZoneDnsSecConfigArgs) ToManagedZoneDnsSecConfigOutput() ManagedZoneDnsSecConfigOutput {
	return i.ToManagedZoneDnsSecConfigOutputWithContext(context.Background())
}

func (i ManagedZoneDnsSecConfigArgs) ToManagedZoneDnsSecConfigOutputWithContext(ctx context.Context) ManagedZoneDnsSecConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneDnsSecConfigOutput)
}

func (i ManagedZoneDnsSecConfigArgs) ToManagedZoneDnsSecConfigPtrOutput() ManagedZoneDnsSecConfigPtrOutput {
	return i.ToManagedZoneDnsSecConfigPtrOutputWithContext(context.Background())
}

func (i ManagedZoneDnsSecConfigArgs) ToManagedZoneDnsSecConfigPtrOutputWithContext(ctx context.Context) ManagedZoneDnsSecConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneDnsSecConfigOutput).ToManagedZoneDnsSecConfigPtrOutputWithContext(ctx)
}

// ManagedZoneDnsSecConfigPtrInput is an input type that accepts ManagedZoneDnsSecConfigArgs, ManagedZoneDnsSecConfigPtr and ManagedZoneDnsSecConfigPtrOutput values.
// You can construct a concrete instance of `ManagedZoneDnsSecConfigPtrInput` via:
//
//	        ManagedZoneDnsSecConfigArgs{...}
//
//	or:
//
//	        nil
type ManagedZoneDnsSecConfigPtrInput interface {
	pulumi.Input

	ToManagedZoneDnsSecConfigPtrOutput() ManagedZoneDnsSecConfigPtrOutput
	ToManagedZoneDnsSecConfigPtrOutputWithContext(context.Context) ManagedZoneDnsSecConfigPtrOutput
}

type managedZoneDnsSecConfigPtrType ManagedZoneDnsSecConfigArgs

func ManagedZoneDnsSecConfigPtr(v *ManagedZoneDnsSecConfigArgs) ManagedZoneDnsSecConfigPtrInput {
	return (*managedZoneDnsSecConfigPtrType)(v)
}

func (*managedZoneDnsSecConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZoneDnsSecConfig)(nil)).Elem()
}

func (i *managedZoneDnsSecConfigPtrType) ToManagedZoneDnsSecConfigPtrOutput() ManagedZoneDnsSecConfigPtrOutput {
	return i.ToManagedZoneDnsSecConfigPtrOutputWithContext(context.Background())
}

func (i *managedZoneDnsSecConfigPtrType) ToManagedZoneDnsSecConfigPtrOutputWithContext(ctx context.Context) ManagedZoneDnsSecConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneDnsSecConfigPtrOutput)
}

type ManagedZoneDnsSecConfigOutput struct{ *pulumi.OutputState }

func (ManagedZoneDnsSecConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneDnsSecConfig)(nil)).Elem()
}

func (o ManagedZoneDnsSecConfigOutput) ToManagedZoneDnsSecConfigOutput() ManagedZoneDnsSecConfigOutput {
	return o
}

func (o ManagedZoneDnsSecConfigOutput) ToManagedZoneDnsSecConfigOutputWithContext(ctx context.Context) ManagedZoneDnsSecConfigOutput {
	return o
}

func (o ManagedZoneDnsSecConfigOutput) ToManagedZoneDnsSecConfigPtrOutput() ManagedZoneDnsSecConfigPtrOutput {
	return o.ToManagedZoneDnsSecConfigPtrOutputWithContext(context.Background())
}

func (o ManagedZoneDnsSecConfigOutput) ToManagedZoneDnsSecConfigPtrOutputWithContext(ctx context.Context) ManagedZoneDnsSecConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedZoneDnsSecConfig) *ManagedZoneDnsSecConfig {
		return &v
	}).(ManagedZoneDnsSecConfigPtrOutput)
}

// Specifies parameters for generating initial DnsKeys for this ManagedZone. Can only be changed while the state is OFF.
func (o ManagedZoneDnsSecConfigOutput) DefaultKeySpecs() DnsKeySpecArrayOutput {
	return o.ApplyT(func(v ManagedZoneDnsSecConfig) []DnsKeySpec { return v.DefaultKeySpecs }).(DnsKeySpecArrayOutput)
}

func (o ManagedZoneDnsSecConfigOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZoneDnsSecConfig) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Specifies the mechanism for authenticated denial-of-existence responses. Can only be changed while the state is OFF.
func (o ManagedZoneDnsSecConfigOutput) NonExistence() ManagedZoneDnsSecConfigNonExistencePtrOutput {
	return o.ApplyT(func(v ManagedZoneDnsSecConfig) *ManagedZoneDnsSecConfigNonExistence { return v.NonExistence }).(ManagedZoneDnsSecConfigNonExistencePtrOutput)
}

// Specifies whether DNSSEC is enabled, and what mode it is in.
func (o ManagedZoneDnsSecConfigOutput) State() ManagedZoneDnsSecConfigStatePtrOutput {
	return o.ApplyT(func(v ManagedZoneDnsSecConfig) *ManagedZoneDnsSecConfigState { return v.State }).(ManagedZoneDnsSecConfigStatePtrOutput)
}

type ManagedZoneDnsSecConfigPtrOutput struct{ *pulumi.OutputState }

func (ManagedZoneDnsSecConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZoneDnsSecConfig)(nil)).Elem()
}

func (o ManagedZoneDnsSecConfigPtrOutput) ToManagedZoneDnsSecConfigPtrOutput() ManagedZoneDnsSecConfigPtrOutput {
	return o
}

func (o ManagedZoneDnsSecConfigPtrOutput) ToManagedZoneDnsSecConfigPtrOutputWithContext(ctx context.Context) ManagedZoneDnsSecConfigPtrOutput {
	return o
}

func (o ManagedZoneDnsSecConfigPtrOutput) Elem() ManagedZoneDnsSecConfigOutput {
	return o.ApplyT(func(v *ManagedZoneDnsSecConfig) ManagedZoneDnsSecConfig {
		if v != nil {
			return *v
		}
		var ret ManagedZoneDnsSecConfig
		return ret
	}).(ManagedZoneDnsSecConfigOutput)
}

// Specifies parameters for generating initial DnsKeys for this ManagedZone. Can only be changed while the state is OFF.
func (o ManagedZoneDnsSecConfigPtrOutput) DefaultKeySpecs() DnsKeySpecArrayOutput {
	return o.ApplyT(func(v *ManagedZoneDnsSecConfig) []DnsKeySpec {
		if v == nil {
			return nil
		}
		return v.DefaultKeySpecs
	}).(DnsKeySpecArrayOutput)
}

func (o ManagedZoneDnsSecConfigPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedZoneDnsSecConfig) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Specifies the mechanism for authenticated denial-of-existence responses. Can only be changed while the state is OFF.
func (o ManagedZoneDnsSecConfigPtrOutput) NonExistence() ManagedZoneDnsSecConfigNonExistencePtrOutput {
	return o.ApplyT(func(v *ManagedZoneDnsSecConfig) *ManagedZoneDnsSecConfigNonExistence {
		if v == nil {
			return nil
		}
		return v.NonExistence
	}).(ManagedZoneDnsSecConfigNonExistencePtrOutput)
}

// Specifies whether DNSSEC is enabled, and what mode it is in.
func (o ManagedZoneDnsSecConfigPtrOutput) State() ManagedZoneDnsSecConfigStatePtrOutput {
	return o.ApplyT(func(v *ManagedZoneDnsSecConfig) *ManagedZoneDnsSecConfigState {
		if v == nil {
			return nil
		}
		return v.State
	}).(ManagedZoneDnsSecConfigStatePtrOutput)
}

type ManagedZoneDnsSecConfigResponse struct {
	// Specifies parameters for generating initial DnsKeys for this ManagedZone. Can only be changed while the state is OFF.
	DefaultKeySpecs []DnsKeySpecResponse `pulumi:"defaultKeySpecs"`
	Kind            string               `pulumi:"kind"`
	// Specifies the mechanism for authenticated denial-of-existence responses. Can only be changed while the state is OFF.
	NonExistence string `pulumi:"nonExistence"`
	// Specifies whether DNSSEC is enabled, and what mode it is in.
	State string `pulumi:"state"`
}

type ManagedZoneDnsSecConfigResponseOutput struct{ *pulumi.OutputState }

func (ManagedZoneDnsSecConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneDnsSecConfigResponse)(nil)).Elem()
}

func (o ManagedZoneDnsSecConfigResponseOutput) ToManagedZoneDnsSecConfigResponseOutput() ManagedZoneDnsSecConfigResponseOutput {
	return o
}

func (o ManagedZoneDnsSecConfigResponseOutput) ToManagedZoneDnsSecConfigResponseOutputWithContext(ctx context.Context) ManagedZoneDnsSecConfigResponseOutput {
	return o
}

// Specifies parameters for generating initial DnsKeys for this ManagedZone. Can only be changed while the state is OFF.
func (o ManagedZoneDnsSecConfigResponseOutput) DefaultKeySpecs() DnsKeySpecResponseArrayOutput {
	return o.ApplyT(func(v ManagedZoneDnsSecConfigResponse) []DnsKeySpecResponse { return v.DefaultKeySpecs }).(DnsKeySpecResponseArrayOutput)
}

func (o ManagedZoneDnsSecConfigResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedZoneDnsSecConfigResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// Specifies the mechanism for authenticated denial-of-existence responses. Can only be changed while the state is OFF.
func (o ManagedZoneDnsSecConfigResponseOutput) NonExistence() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedZoneDnsSecConfigResponse) string { return v.NonExistence }).(pulumi.StringOutput)
}

// Specifies whether DNSSEC is enabled, and what mode it is in.
func (o ManagedZoneDnsSecConfigResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedZoneDnsSecConfigResponse) string { return v.State }).(pulumi.StringOutput)
}

type ManagedZoneForwardingConfig struct {
	Kind *string `pulumi:"kind"`
	// List of target name servers to forward to. Cloud DNS selects the best available name server if more than one target is given.
	TargetNameServers []ManagedZoneForwardingConfigNameServerTarget `pulumi:"targetNameServers"`
}

// ManagedZoneForwardingConfigInput is an input type that accepts ManagedZoneForwardingConfigArgs and ManagedZoneForwardingConfigOutput values.
// You can construct a concrete instance of `ManagedZoneForwardingConfigInput` via:
//
//	ManagedZoneForwardingConfigArgs{...}
type ManagedZoneForwardingConfigInput interface {
	pulumi.Input

	ToManagedZoneForwardingConfigOutput() ManagedZoneForwardingConfigOutput
	ToManagedZoneForwardingConfigOutputWithContext(context.Context) ManagedZoneForwardingConfigOutput
}

type ManagedZoneForwardingConfigArgs struct {
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// List of target name servers to forward to. Cloud DNS selects the best available name server if more than one target is given.
	TargetNameServers ManagedZoneForwardingConfigNameServerTargetArrayInput `pulumi:"targetNameServers"`
}

func (ManagedZoneForwardingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneForwardingConfig)(nil)).Elem()
}

func (i ManagedZoneForwardingConfigArgs) ToManagedZoneForwardingConfigOutput() ManagedZoneForwardingConfigOutput {
	return i.ToManagedZoneForwardingConfigOutputWithContext(context.Background())
}

func (i ManagedZoneForwardingConfigArgs) ToManagedZoneForwardingConfigOutputWithContext(ctx context.Context) ManagedZoneForwardingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneForwardingConfigOutput)
}

func (i ManagedZoneForwardingConfigArgs) ToManagedZoneForwardingConfigPtrOutput() ManagedZoneForwardingConfigPtrOutput {
	return i.ToManagedZoneForwardingConfigPtrOutputWithContext(context.Background())
}

func (i ManagedZoneForwardingConfigArgs) ToManagedZoneForwardingConfigPtrOutputWithContext(ctx context.Context) ManagedZoneForwardingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneForwardingConfigOutput).ToManagedZoneForwardingConfigPtrOutputWithContext(ctx)
}

// ManagedZoneForwardingConfigPtrInput is an input type that accepts ManagedZoneForwardingConfigArgs, ManagedZoneForwardingConfigPtr and ManagedZoneForwardingConfigPtrOutput values.
// You can construct a concrete instance of `ManagedZoneForwardingConfigPtrInput` via:
//
//	        ManagedZoneForwardingConfigArgs{...}
//
//	or:
//
//	        nil
type ManagedZoneForwardingConfigPtrInput interface {
	pulumi.Input

	ToManagedZoneForwardingConfigPtrOutput() ManagedZoneForwardingConfigPtrOutput
	ToManagedZoneForwardingConfigPtrOutputWithContext(context.Context) ManagedZoneForwardingConfigPtrOutput
}

type managedZoneForwardingConfigPtrType ManagedZoneForwardingConfigArgs

func ManagedZoneForwardingConfigPtr(v *ManagedZoneForwardingConfigArgs) ManagedZoneForwardingConfigPtrInput {
	return (*managedZoneForwardingConfigPtrType)(v)
}

func (*managedZoneForwardingConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZoneForwardingConfig)(nil)).Elem()
}

func (i *managedZoneForwardingConfigPtrType) ToManagedZoneForwardingConfigPtrOutput() ManagedZoneForwardingConfigPtrOutput {
	return i.ToManagedZoneForwardingConfigPtrOutputWithContext(context.Background())
}

func (i *managedZoneForwardingConfigPtrType) ToManagedZoneForwardingConfigPtrOutputWithContext(ctx context.Context) ManagedZoneForwardingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneForwardingConfigPtrOutput)
}

type ManagedZoneForwardingConfigOutput struct{ *pulumi.OutputState }

func (ManagedZoneForwardingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneForwardingConfig)(nil)).Elem()
}

func (o ManagedZoneForwardingConfigOutput) ToManagedZoneForwardingConfigOutput() ManagedZoneForwardingConfigOutput {
	return o
}

func (o ManagedZoneForwardingConfigOutput) ToManagedZoneForwardingConfigOutputWithContext(ctx context.Context) ManagedZoneForwardingConfigOutput {
	return o
}

func (o ManagedZoneForwardingConfigOutput) ToManagedZoneForwardingConfigPtrOutput() ManagedZoneForwardingConfigPtrOutput {
	return o.ToManagedZoneForwardingConfigPtrOutputWithContext(context.Background())
}

func (o ManagedZoneForwardingConfigOutput) ToManagedZoneForwardingConfigPtrOutputWithContext(ctx context.Context) ManagedZoneForwardingConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedZoneForwardingConfig) *ManagedZoneForwardingConfig {
		return &v
	}).(ManagedZoneForwardingConfigPtrOutput)
}

func (o ManagedZoneForwardingConfigOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZoneForwardingConfig) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// List of target name servers to forward to. Cloud DNS selects the best available name server if more than one target is given.
func (o ManagedZoneForwardingConfigOutput) TargetNameServers() ManagedZoneForwardingConfigNameServerTargetArrayOutput {
	return o.ApplyT(func(v ManagedZoneForwardingConfig) []ManagedZoneForwardingConfigNameServerTarget {
		return v.TargetNameServers
	}).(ManagedZoneForwardingConfigNameServerTargetArrayOutput)
}

type ManagedZoneForwardingConfigPtrOutput struct{ *pulumi.OutputState }

func (ManagedZoneForwardingConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZoneForwardingConfig)(nil)).Elem()
}

func (o ManagedZoneForwardingConfigPtrOutput) ToManagedZoneForwardingConfigPtrOutput() ManagedZoneForwardingConfigPtrOutput {
	return o
}

func (o ManagedZoneForwardingConfigPtrOutput) ToManagedZoneForwardingConfigPtrOutputWithContext(ctx context.Context) ManagedZoneForwardingConfigPtrOutput {
	return o
}

func (o ManagedZoneForwardingConfigPtrOutput) Elem() ManagedZoneForwardingConfigOutput {
	return o.ApplyT(func(v *ManagedZoneForwardingConfig) ManagedZoneForwardingConfig {
		if v != nil {
			return *v
		}
		var ret ManagedZoneForwardingConfig
		return ret
	}).(ManagedZoneForwardingConfigOutput)
}

func (o ManagedZoneForwardingConfigPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedZoneForwardingConfig) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// List of target name servers to forward to. Cloud DNS selects the best available name server if more than one target is given.
func (o ManagedZoneForwardingConfigPtrOutput) TargetNameServers() ManagedZoneForwardingConfigNameServerTargetArrayOutput {
	return o.ApplyT(func(v *ManagedZoneForwardingConfig) []ManagedZoneForwardingConfigNameServerTarget {
		if v == nil {
			return nil
		}
		return v.TargetNameServers
	}).(ManagedZoneForwardingConfigNameServerTargetArrayOutput)
}

type ManagedZoneForwardingConfigNameServerTarget struct {
	// Forwarding path for this NameServerTarget. If unset or set to DEFAULT, Cloud DNS makes forwarding decisions based on IP address ranges; that is, RFC1918 addresses go to the VPC network, non-RFC1918 addresses go to the internet. When set to PRIVATE, Cloud DNS always sends queries through the VPC network for this target.
	ForwardingPath *ManagedZoneForwardingConfigNameServerTargetForwardingPath `pulumi:"forwardingPath"`
	// IPv4 address of a target name server.
	Ipv4Address *string `pulumi:"ipv4Address"`
	// IPv6 address of a target name server. Does not accept both fields (ipv4 & ipv6) being populated. Public preview as of November 2022.
	Ipv6Address *string `pulumi:"ipv6Address"`
	Kind        *string `pulumi:"kind"`
}

// ManagedZoneForwardingConfigNameServerTargetInput is an input type that accepts ManagedZoneForwardingConfigNameServerTargetArgs and ManagedZoneForwardingConfigNameServerTargetOutput values.
// You can construct a concrete instance of `ManagedZoneForwardingConfigNameServerTargetInput` via:
//
//	ManagedZoneForwardingConfigNameServerTargetArgs{...}
type ManagedZoneForwardingConfigNameServerTargetInput interface {
	pulumi.Input

	ToManagedZoneForwardingConfigNameServerTargetOutput() ManagedZoneForwardingConfigNameServerTargetOutput
	ToManagedZoneForwardingConfigNameServerTargetOutputWithContext(context.Context) ManagedZoneForwardingConfigNameServerTargetOutput
}

type ManagedZoneForwardingConfigNameServerTargetArgs struct {
	// Forwarding path for this NameServerTarget. If unset or set to DEFAULT, Cloud DNS makes forwarding decisions based on IP address ranges; that is, RFC1918 addresses go to the VPC network, non-RFC1918 addresses go to the internet. When set to PRIVATE, Cloud DNS always sends queries through the VPC network for this target.
	ForwardingPath ManagedZoneForwardingConfigNameServerTargetForwardingPathPtrInput `pulumi:"forwardingPath"`
	// IPv4 address of a target name server.
	Ipv4Address pulumi.StringPtrInput `pulumi:"ipv4Address"`
	// IPv6 address of a target name server. Does not accept both fields (ipv4 & ipv6) being populated. Public preview as of November 2022.
	Ipv6Address pulumi.StringPtrInput `pulumi:"ipv6Address"`
	Kind        pulumi.StringPtrInput `pulumi:"kind"`
}

func (ManagedZoneForwardingConfigNameServerTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneForwardingConfigNameServerTarget)(nil)).Elem()
}

func (i ManagedZoneForwardingConfigNameServerTargetArgs) ToManagedZoneForwardingConfigNameServerTargetOutput() ManagedZoneForwardingConfigNameServerTargetOutput {
	return i.ToManagedZoneForwardingConfigNameServerTargetOutputWithContext(context.Background())
}

func (i ManagedZoneForwardingConfigNameServerTargetArgs) ToManagedZoneForwardingConfigNameServerTargetOutputWithContext(ctx context.Context) ManagedZoneForwardingConfigNameServerTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneForwardingConfigNameServerTargetOutput)
}

// ManagedZoneForwardingConfigNameServerTargetArrayInput is an input type that accepts ManagedZoneForwardingConfigNameServerTargetArray and ManagedZoneForwardingConfigNameServerTargetArrayOutput values.
// You can construct a concrete instance of `ManagedZoneForwardingConfigNameServerTargetArrayInput` via:
//
//	ManagedZoneForwardingConfigNameServerTargetArray{ ManagedZoneForwardingConfigNameServerTargetArgs{...} }
type ManagedZoneForwardingConfigNameServerTargetArrayInput interface {
	pulumi.Input

	ToManagedZoneForwardingConfigNameServerTargetArrayOutput() ManagedZoneForwardingConfigNameServerTargetArrayOutput
	ToManagedZoneForwardingConfigNameServerTargetArrayOutputWithContext(context.Context) ManagedZoneForwardingConfigNameServerTargetArrayOutput
}

type ManagedZoneForwardingConfigNameServerTargetArray []ManagedZoneForwardingConfigNameServerTargetInput

func (ManagedZoneForwardingConfigNameServerTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedZoneForwardingConfigNameServerTarget)(nil)).Elem()
}

func (i ManagedZoneForwardingConfigNameServerTargetArray) ToManagedZoneForwardingConfigNameServerTargetArrayOutput() ManagedZoneForwardingConfigNameServerTargetArrayOutput {
	return i.ToManagedZoneForwardingConfigNameServerTargetArrayOutputWithContext(context.Background())
}

func (i ManagedZoneForwardingConfigNameServerTargetArray) ToManagedZoneForwardingConfigNameServerTargetArrayOutputWithContext(ctx context.Context) ManagedZoneForwardingConfigNameServerTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneForwardingConfigNameServerTargetArrayOutput)
}

type ManagedZoneForwardingConfigNameServerTargetOutput struct{ *pulumi.OutputState }

func (ManagedZoneForwardingConfigNameServerTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneForwardingConfigNameServerTarget)(nil)).Elem()
}

func (o ManagedZoneForwardingConfigNameServerTargetOutput) ToManagedZoneForwardingConfigNameServerTargetOutput() ManagedZoneForwardingConfigNameServerTargetOutput {
	return o
}

func (o ManagedZoneForwardingConfigNameServerTargetOutput) ToManagedZoneForwardingConfigNameServerTargetOutputWithContext(ctx context.Context) ManagedZoneForwardingConfigNameServerTargetOutput {
	return o
}

// Forwarding path for this NameServerTarget. If unset or set to DEFAULT, Cloud DNS makes forwarding decisions based on IP address ranges; that is, RFC1918 addresses go to the VPC network, non-RFC1918 addresses go to the internet. When set to PRIVATE, Cloud DNS always sends queries through the VPC network for this target.
func (o ManagedZoneForwardingConfigNameServerTargetOutput) ForwardingPath() ManagedZoneForwardingConfigNameServerTargetForwardingPathPtrOutput {
	return o.ApplyT(func(v ManagedZoneForwardingConfigNameServerTarget) *ManagedZoneForwardingConfigNameServerTargetForwardingPath {
		return v.ForwardingPath
	}).(ManagedZoneForwardingConfigNameServerTargetForwardingPathPtrOutput)
}

// IPv4 address of a target name server.
func (o ManagedZoneForwardingConfigNameServerTargetOutput) Ipv4Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZoneForwardingConfigNameServerTarget) *string { return v.Ipv4Address }).(pulumi.StringPtrOutput)
}

// IPv6 address of a target name server. Does not accept both fields (ipv4 & ipv6) being populated. Public preview as of November 2022.
func (o ManagedZoneForwardingConfigNameServerTargetOutput) Ipv6Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZoneForwardingConfigNameServerTarget) *string { return v.Ipv6Address }).(pulumi.StringPtrOutput)
}

func (o ManagedZoneForwardingConfigNameServerTargetOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZoneForwardingConfigNameServerTarget) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

type ManagedZoneForwardingConfigNameServerTargetArrayOutput struct{ *pulumi.OutputState }

func (ManagedZoneForwardingConfigNameServerTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedZoneForwardingConfigNameServerTarget)(nil)).Elem()
}

func (o ManagedZoneForwardingConfigNameServerTargetArrayOutput) ToManagedZoneForwardingConfigNameServerTargetArrayOutput() ManagedZoneForwardingConfigNameServerTargetArrayOutput {
	return o
}

func (o ManagedZoneForwardingConfigNameServerTargetArrayOutput) ToManagedZoneForwardingConfigNameServerTargetArrayOutputWithContext(ctx context.Context) ManagedZoneForwardingConfigNameServerTargetArrayOutput {
	return o
}

func (o ManagedZoneForwardingConfigNameServerTargetArrayOutput) Index(i pulumi.IntInput) ManagedZoneForwardingConfigNameServerTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedZoneForwardingConfigNameServerTarget {
		return vs[0].([]ManagedZoneForwardingConfigNameServerTarget)[vs[1].(int)]
	}).(ManagedZoneForwardingConfigNameServerTargetOutput)
}

type ManagedZoneForwardingConfigNameServerTargetResponse struct {
	// Forwarding path for this NameServerTarget. If unset or set to DEFAULT, Cloud DNS makes forwarding decisions based on IP address ranges; that is, RFC1918 addresses go to the VPC network, non-RFC1918 addresses go to the internet. When set to PRIVATE, Cloud DNS always sends queries through the VPC network for this target.
	ForwardingPath string `pulumi:"forwardingPath"`
	// IPv4 address of a target name server.
	Ipv4Address string `pulumi:"ipv4Address"`
	// IPv6 address of a target name server. Does not accept both fields (ipv4 & ipv6) being populated. Public preview as of November 2022.
	Ipv6Address string `pulumi:"ipv6Address"`
	Kind        string `pulumi:"kind"`
}

type ManagedZoneForwardingConfigNameServerTargetResponseOutput struct{ *pulumi.OutputState }

func (ManagedZoneForwardingConfigNameServerTargetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneForwardingConfigNameServerTargetResponse)(nil)).Elem()
}

func (o ManagedZoneForwardingConfigNameServerTargetResponseOutput) ToManagedZoneForwardingConfigNameServerTargetResponseOutput() ManagedZoneForwardingConfigNameServerTargetResponseOutput {
	return o
}

func (o ManagedZoneForwardingConfigNameServerTargetResponseOutput) ToManagedZoneForwardingConfigNameServerTargetResponseOutputWithContext(ctx context.Context) ManagedZoneForwardingConfigNameServerTargetResponseOutput {
	return o
}

// Forwarding path for this NameServerTarget. If unset or set to DEFAULT, Cloud DNS makes forwarding decisions based on IP address ranges; that is, RFC1918 addresses go to the VPC network, non-RFC1918 addresses go to the internet. When set to PRIVATE, Cloud DNS always sends queries through the VPC network for this target.
func (o ManagedZoneForwardingConfigNameServerTargetResponseOutput) ForwardingPath() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedZoneForwardingConfigNameServerTargetResponse) string { return v.ForwardingPath }).(pulumi.StringOutput)
}

// IPv4 address of a target name server.
func (o ManagedZoneForwardingConfigNameServerTargetResponseOutput) Ipv4Address() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedZoneForwardingConfigNameServerTargetResponse) string { return v.Ipv4Address }).(pulumi.StringOutput)
}

// IPv6 address of a target name server. Does not accept both fields (ipv4 & ipv6) being populated. Public preview as of November 2022.
func (o ManagedZoneForwardingConfigNameServerTargetResponseOutput) Ipv6Address() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedZoneForwardingConfigNameServerTargetResponse) string { return v.Ipv6Address }).(pulumi.StringOutput)
}

func (o ManagedZoneForwardingConfigNameServerTargetResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedZoneForwardingConfigNameServerTargetResponse) string { return v.Kind }).(pulumi.StringOutput)
}

type ManagedZoneForwardingConfigNameServerTargetResponseArrayOutput struct{ *pulumi.OutputState }

func (ManagedZoneForwardingConfigNameServerTargetResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedZoneForwardingConfigNameServerTargetResponse)(nil)).Elem()
}

func (o ManagedZoneForwardingConfigNameServerTargetResponseArrayOutput) ToManagedZoneForwardingConfigNameServerTargetResponseArrayOutput() ManagedZoneForwardingConfigNameServerTargetResponseArrayOutput {
	return o
}

func (o ManagedZoneForwardingConfigNameServerTargetResponseArrayOutput) ToManagedZoneForwardingConfigNameServerTargetResponseArrayOutputWithContext(ctx context.Context) ManagedZoneForwardingConfigNameServerTargetResponseArrayOutput {
	return o
}

func (o ManagedZoneForwardingConfigNameServerTargetResponseArrayOutput) Index(i pulumi.IntInput) ManagedZoneForwardingConfigNameServerTargetResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedZoneForwardingConfigNameServerTargetResponse {
		return vs[0].([]ManagedZoneForwardingConfigNameServerTargetResponse)[vs[1].(int)]
	}).(ManagedZoneForwardingConfigNameServerTargetResponseOutput)
}

type ManagedZoneForwardingConfigResponse struct {
	Kind string `pulumi:"kind"`
	// List of target name servers to forward to. Cloud DNS selects the best available name server if more than one target is given.
	TargetNameServers []ManagedZoneForwardingConfigNameServerTargetResponse `pulumi:"targetNameServers"`
}

type ManagedZoneForwardingConfigResponseOutput struct{ *pulumi.OutputState }

func (ManagedZoneForwardingConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneForwardingConfigResponse)(nil)).Elem()
}

func (o ManagedZoneForwardingConfigResponseOutput) ToManagedZoneForwardingConfigResponseOutput() ManagedZoneForwardingConfigResponseOutput {
	return o
}

func (o ManagedZoneForwardingConfigResponseOutput) ToManagedZoneForwardingConfigResponseOutputWithContext(ctx context.Context) ManagedZoneForwardingConfigResponseOutput {
	return o
}

func (o ManagedZoneForwardingConfigResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedZoneForwardingConfigResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// List of target name servers to forward to. Cloud DNS selects the best available name server if more than one target is given.
func (o ManagedZoneForwardingConfigResponseOutput) TargetNameServers() ManagedZoneForwardingConfigNameServerTargetResponseArrayOutput {
	return o.ApplyT(func(v ManagedZoneForwardingConfigResponse) []ManagedZoneForwardingConfigNameServerTargetResponse {
		return v.TargetNameServers
	}).(ManagedZoneForwardingConfigNameServerTargetResponseArrayOutput)
}

type ManagedZonePeeringConfig struct {
	Kind *string `pulumi:"kind"`
	// The network with which to peer.
	TargetNetwork *ManagedZonePeeringConfigTargetNetwork `pulumi:"targetNetwork"`
}

// ManagedZonePeeringConfigInput is an input type that accepts ManagedZonePeeringConfigArgs and ManagedZonePeeringConfigOutput values.
// You can construct a concrete instance of `ManagedZonePeeringConfigInput` via:
//
//	ManagedZonePeeringConfigArgs{...}
type ManagedZonePeeringConfigInput interface {
	pulumi.Input

	ToManagedZonePeeringConfigOutput() ManagedZonePeeringConfigOutput
	ToManagedZonePeeringConfigOutputWithContext(context.Context) ManagedZonePeeringConfigOutput
}

type ManagedZonePeeringConfigArgs struct {
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// The network with which to peer.
	TargetNetwork ManagedZonePeeringConfigTargetNetworkPtrInput `pulumi:"targetNetwork"`
}

func (ManagedZonePeeringConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZonePeeringConfig)(nil)).Elem()
}

func (i ManagedZonePeeringConfigArgs) ToManagedZonePeeringConfigOutput() ManagedZonePeeringConfigOutput {
	return i.ToManagedZonePeeringConfigOutputWithContext(context.Background())
}

func (i ManagedZonePeeringConfigArgs) ToManagedZonePeeringConfigOutputWithContext(ctx context.Context) ManagedZonePeeringConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZonePeeringConfigOutput)
}

func (i ManagedZonePeeringConfigArgs) ToManagedZonePeeringConfigPtrOutput() ManagedZonePeeringConfigPtrOutput {
	return i.ToManagedZonePeeringConfigPtrOutputWithContext(context.Background())
}

func (i ManagedZonePeeringConfigArgs) ToManagedZonePeeringConfigPtrOutputWithContext(ctx context.Context) ManagedZonePeeringConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZonePeeringConfigOutput).ToManagedZonePeeringConfigPtrOutputWithContext(ctx)
}

// ManagedZonePeeringConfigPtrInput is an input type that accepts ManagedZonePeeringConfigArgs, ManagedZonePeeringConfigPtr and ManagedZonePeeringConfigPtrOutput values.
// You can construct a concrete instance of `ManagedZonePeeringConfigPtrInput` via:
//
//	        ManagedZonePeeringConfigArgs{...}
//
//	or:
//
//	        nil
type ManagedZonePeeringConfigPtrInput interface {
	pulumi.Input

	ToManagedZonePeeringConfigPtrOutput() ManagedZonePeeringConfigPtrOutput
	ToManagedZonePeeringConfigPtrOutputWithContext(context.Context) ManagedZonePeeringConfigPtrOutput
}

type managedZonePeeringConfigPtrType ManagedZonePeeringConfigArgs

func ManagedZonePeeringConfigPtr(v *ManagedZonePeeringConfigArgs) ManagedZonePeeringConfigPtrInput {
	return (*managedZonePeeringConfigPtrType)(v)
}

func (*managedZonePeeringConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZonePeeringConfig)(nil)).Elem()
}

func (i *managedZonePeeringConfigPtrType) ToManagedZonePeeringConfigPtrOutput() ManagedZonePeeringConfigPtrOutput {
	return i.ToManagedZonePeeringConfigPtrOutputWithContext(context.Background())
}

func (i *managedZonePeeringConfigPtrType) ToManagedZonePeeringConfigPtrOutputWithContext(ctx context.Context) ManagedZonePeeringConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZonePeeringConfigPtrOutput)
}

type ManagedZonePeeringConfigOutput struct{ *pulumi.OutputState }

func (ManagedZonePeeringConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZonePeeringConfig)(nil)).Elem()
}

func (o ManagedZonePeeringConfigOutput) ToManagedZonePeeringConfigOutput() ManagedZonePeeringConfigOutput {
	return o
}

func (o ManagedZonePeeringConfigOutput) ToManagedZonePeeringConfigOutputWithContext(ctx context.Context) ManagedZonePeeringConfigOutput {
	return o
}

func (o ManagedZonePeeringConfigOutput) ToManagedZonePeeringConfigPtrOutput() ManagedZonePeeringConfigPtrOutput {
	return o.ToManagedZonePeeringConfigPtrOutputWithContext(context.Background())
}

func (o ManagedZonePeeringConfigOutput) ToManagedZonePeeringConfigPtrOutputWithContext(ctx context.Context) ManagedZonePeeringConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedZonePeeringConfig) *ManagedZonePeeringConfig {
		return &v
	}).(ManagedZonePeeringConfigPtrOutput)
}

func (o ManagedZonePeeringConfigOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZonePeeringConfig) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// The network with which to peer.
func (o ManagedZonePeeringConfigOutput) TargetNetwork() ManagedZonePeeringConfigTargetNetworkPtrOutput {
	return o.ApplyT(func(v ManagedZonePeeringConfig) *ManagedZonePeeringConfigTargetNetwork { return v.TargetNetwork }).(ManagedZonePeeringConfigTargetNetworkPtrOutput)
}

type ManagedZonePeeringConfigPtrOutput struct{ *pulumi.OutputState }

func (ManagedZonePeeringConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZonePeeringConfig)(nil)).Elem()
}

func (o ManagedZonePeeringConfigPtrOutput) ToManagedZonePeeringConfigPtrOutput() ManagedZonePeeringConfigPtrOutput {
	return o
}

func (o ManagedZonePeeringConfigPtrOutput) ToManagedZonePeeringConfigPtrOutputWithContext(ctx context.Context) ManagedZonePeeringConfigPtrOutput {
	return o
}

func (o ManagedZonePeeringConfigPtrOutput) Elem() ManagedZonePeeringConfigOutput {
	return o.ApplyT(func(v *ManagedZonePeeringConfig) ManagedZonePeeringConfig {
		if v != nil {
			return *v
		}
		var ret ManagedZonePeeringConfig
		return ret
	}).(ManagedZonePeeringConfigOutput)
}

func (o ManagedZonePeeringConfigPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedZonePeeringConfig) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// The network with which to peer.
func (o ManagedZonePeeringConfigPtrOutput) TargetNetwork() ManagedZonePeeringConfigTargetNetworkPtrOutput {
	return o.ApplyT(func(v *ManagedZonePeeringConfig) *ManagedZonePeeringConfigTargetNetwork {
		if v == nil {
			return nil
		}
		return v.TargetNetwork
	}).(ManagedZonePeeringConfigTargetNetworkPtrOutput)
}

type ManagedZonePeeringConfigResponse struct {
	Kind string `pulumi:"kind"`
	// The network with which to peer.
	TargetNetwork ManagedZonePeeringConfigTargetNetworkResponse `pulumi:"targetNetwork"`
}

type ManagedZonePeeringConfigResponseOutput struct{ *pulumi.OutputState }

func (ManagedZonePeeringConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZonePeeringConfigResponse)(nil)).Elem()
}

func (o ManagedZonePeeringConfigResponseOutput) ToManagedZonePeeringConfigResponseOutput() ManagedZonePeeringConfigResponseOutput {
	return o
}

func (o ManagedZonePeeringConfigResponseOutput) ToManagedZonePeeringConfigResponseOutputWithContext(ctx context.Context) ManagedZonePeeringConfigResponseOutput {
	return o
}

func (o ManagedZonePeeringConfigResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedZonePeeringConfigResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// The network with which to peer.
func (o ManagedZonePeeringConfigResponseOutput) TargetNetwork() ManagedZonePeeringConfigTargetNetworkResponseOutput {
	return o.ApplyT(func(v ManagedZonePeeringConfigResponse) ManagedZonePeeringConfigTargetNetworkResponse {
		return v.TargetNetwork
	}).(ManagedZonePeeringConfigTargetNetworkResponseOutput)
}

type ManagedZonePeeringConfigTargetNetwork struct {
	// The time at which the zone was deactivated, in RFC 3339 date-time format. An empty string indicates that the peering connection is active. The producer network can deactivate a zone. The zone is automatically deactivated if the producer network that the zone targeted is deleted. Output only.
	DeactivateTime *string `pulumi:"deactivateTime"`
	Kind           *string `pulumi:"kind"`
	// The fully qualified URL of the VPC network to forward queries to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
	NetworkUrl *string `pulumi:"networkUrl"`
}

// ManagedZonePeeringConfigTargetNetworkInput is an input type that accepts ManagedZonePeeringConfigTargetNetworkArgs and ManagedZonePeeringConfigTargetNetworkOutput values.
// You can construct a concrete instance of `ManagedZonePeeringConfigTargetNetworkInput` via:
//
//	ManagedZonePeeringConfigTargetNetworkArgs{...}
type ManagedZonePeeringConfigTargetNetworkInput interface {
	pulumi.Input

	ToManagedZonePeeringConfigTargetNetworkOutput() ManagedZonePeeringConfigTargetNetworkOutput
	ToManagedZonePeeringConfigTargetNetworkOutputWithContext(context.Context) ManagedZonePeeringConfigTargetNetworkOutput
}

type ManagedZonePeeringConfigTargetNetworkArgs struct {
	// The time at which the zone was deactivated, in RFC 3339 date-time format. An empty string indicates that the peering connection is active. The producer network can deactivate a zone. The zone is automatically deactivated if the producer network that the zone targeted is deleted. Output only.
	DeactivateTime pulumi.StringPtrInput `pulumi:"deactivateTime"`
	Kind           pulumi.StringPtrInput `pulumi:"kind"`
	// The fully qualified URL of the VPC network to forward queries to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
	NetworkUrl pulumi.StringPtrInput `pulumi:"networkUrl"`
}

func (ManagedZonePeeringConfigTargetNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZonePeeringConfigTargetNetwork)(nil)).Elem()
}

func (i ManagedZonePeeringConfigTargetNetworkArgs) ToManagedZonePeeringConfigTargetNetworkOutput() ManagedZonePeeringConfigTargetNetworkOutput {
	return i.ToManagedZonePeeringConfigTargetNetworkOutputWithContext(context.Background())
}

func (i ManagedZonePeeringConfigTargetNetworkArgs) ToManagedZonePeeringConfigTargetNetworkOutputWithContext(ctx context.Context) ManagedZonePeeringConfigTargetNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZonePeeringConfigTargetNetworkOutput)
}

func (i ManagedZonePeeringConfigTargetNetworkArgs) ToManagedZonePeeringConfigTargetNetworkPtrOutput() ManagedZonePeeringConfigTargetNetworkPtrOutput {
	return i.ToManagedZonePeeringConfigTargetNetworkPtrOutputWithContext(context.Background())
}

func (i ManagedZonePeeringConfigTargetNetworkArgs) ToManagedZonePeeringConfigTargetNetworkPtrOutputWithContext(ctx context.Context) ManagedZonePeeringConfigTargetNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZonePeeringConfigTargetNetworkOutput).ToManagedZonePeeringConfigTargetNetworkPtrOutputWithContext(ctx)
}

// ManagedZonePeeringConfigTargetNetworkPtrInput is an input type that accepts ManagedZonePeeringConfigTargetNetworkArgs, ManagedZonePeeringConfigTargetNetworkPtr and ManagedZonePeeringConfigTargetNetworkPtrOutput values.
// You can construct a concrete instance of `ManagedZonePeeringConfigTargetNetworkPtrInput` via:
//
//	        ManagedZonePeeringConfigTargetNetworkArgs{...}
//
//	or:
//
//	        nil
type ManagedZonePeeringConfigTargetNetworkPtrInput interface {
	pulumi.Input

	ToManagedZonePeeringConfigTargetNetworkPtrOutput() ManagedZonePeeringConfigTargetNetworkPtrOutput
	ToManagedZonePeeringConfigTargetNetworkPtrOutputWithContext(context.Context) ManagedZonePeeringConfigTargetNetworkPtrOutput
}

type managedZonePeeringConfigTargetNetworkPtrType ManagedZonePeeringConfigTargetNetworkArgs

func ManagedZonePeeringConfigTargetNetworkPtr(v *ManagedZonePeeringConfigTargetNetworkArgs) ManagedZonePeeringConfigTargetNetworkPtrInput {
	return (*managedZonePeeringConfigTargetNetworkPtrType)(v)
}

func (*managedZonePeeringConfigTargetNetworkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZonePeeringConfigTargetNetwork)(nil)).Elem()
}

func (i *managedZonePeeringConfigTargetNetworkPtrType) ToManagedZonePeeringConfigTargetNetworkPtrOutput() ManagedZonePeeringConfigTargetNetworkPtrOutput {
	return i.ToManagedZonePeeringConfigTargetNetworkPtrOutputWithContext(context.Background())
}

func (i *managedZonePeeringConfigTargetNetworkPtrType) ToManagedZonePeeringConfigTargetNetworkPtrOutputWithContext(ctx context.Context) ManagedZonePeeringConfigTargetNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZonePeeringConfigTargetNetworkPtrOutput)
}

type ManagedZonePeeringConfigTargetNetworkOutput struct{ *pulumi.OutputState }

func (ManagedZonePeeringConfigTargetNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZonePeeringConfigTargetNetwork)(nil)).Elem()
}

func (o ManagedZonePeeringConfigTargetNetworkOutput) ToManagedZonePeeringConfigTargetNetworkOutput() ManagedZonePeeringConfigTargetNetworkOutput {
	return o
}

func (o ManagedZonePeeringConfigTargetNetworkOutput) ToManagedZonePeeringConfigTargetNetworkOutputWithContext(ctx context.Context) ManagedZonePeeringConfigTargetNetworkOutput {
	return o
}

func (o ManagedZonePeeringConfigTargetNetworkOutput) ToManagedZonePeeringConfigTargetNetworkPtrOutput() ManagedZonePeeringConfigTargetNetworkPtrOutput {
	return o.ToManagedZonePeeringConfigTargetNetworkPtrOutputWithContext(context.Background())
}

func (o ManagedZonePeeringConfigTargetNetworkOutput) ToManagedZonePeeringConfigTargetNetworkPtrOutputWithContext(ctx context.Context) ManagedZonePeeringConfigTargetNetworkPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedZonePeeringConfigTargetNetwork) *ManagedZonePeeringConfigTargetNetwork {
		return &v
	}).(ManagedZonePeeringConfigTargetNetworkPtrOutput)
}

// The time at which the zone was deactivated, in RFC 3339 date-time format. An empty string indicates that the peering connection is active. The producer network can deactivate a zone. The zone is automatically deactivated if the producer network that the zone targeted is deleted. Output only.
func (o ManagedZonePeeringConfigTargetNetworkOutput) DeactivateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZonePeeringConfigTargetNetwork) *string { return v.DeactivateTime }).(pulumi.StringPtrOutput)
}

func (o ManagedZonePeeringConfigTargetNetworkOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZonePeeringConfigTargetNetwork) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// The fully qualified URL of the VPC network to forward queries to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
func (o ManagedZonePeeringConfigTargetNetworkOutput) NetworkUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZonePeeringConfigTargetNetwork) *string { return v.NetworkUrl }).(pulumi.StringPtrOutput)
}

type ManagedZonePeeringConfigTargetNetworkPtrOutput struct{ *pulumi.OutputState }

func (ManagedZonePeeringConfigTargetNetworkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZonePeeringConfigTargetNetwork)(nil)).Elem()
}

func (o ManagedZonePeeringConfigTargetNetworkPtrOutput) ToManagedZonePeeringConfigTargetNetworkPtrOutput() ManagedZonePeeringConfigTargetNetworkPtrOutput {
	return o
}

func (o ManagedZonePeeringConfigTargetNetworkPtrOutput) ToManagedZonePeeringConfigTargetNetworkPtrOutputWithContext(ctx context.Context) ManagedZonePeeringConfigTargetNetworkPtrOutput {
	return o
}

func (o ManagedZonePeeringConfigTargetNetworkPtrOutput) Elem() ManagedZonePeeringConfigTargetNetworkOutput {
	return o.ApplyT(func(v *ManagedZonePeeringConfigTargetNetwork) ManagedZonePeeringConfigTargetNetwork {
		if v != nil {
			return *v
		}
		var ret ManagedZonePeeringConfigTargetNetwork
		return ret
	}).(ManagedZonePeeringConfigTargetNetworkOutput)
}

// The time at which the zone was deactivated, in RFC 3339 date-time format. An empty string indicates that the peering connection is active. The producer network can deactivate a zone. The zone is automatically deactivated if the producer network that the zone targeted is deleted. Output only.
func (o ManagedZonePeeringConfigTargetNetworkPtrOutput) DeactivateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedZonePeeringConfigTargetNetwork) *string {
		if v == nil {
			return nil
		}
		return v.DeactivateTime
	}).(pulumi.StringPtrOutput)
}

func (o ManagedZonePeeringConfigTargetNetworkPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedZonePeeringConfigTargetNetwork) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// The fully qualified URL of the VPC network to forward queries to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
func (o ManagedZonePeeringConfigTargetNetworkPtrOutput) NetworkUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedZonePeeringConfigTargetNetwork) *string {
		if v == nil {
			return nil
		}
		return v.NetworkUrl
	}).(pulumi.StringPtrOutput)
}

type ManagedZonePeeringConfigTargetNetworkResponse struct {
	// The time at which the zone was deactivated, in RFC 3339 date-time format. An empty string indicates that the peering connection is active. The producer network can deactivate a zone. The zone is automatically deactivated if the producer network that the zone targeted is deleted. Output only.
	DeactivateTime string `pulumi:"deactivateTime"`
	Kind           string `pulumi:"kind"`
	// The fully qualified URL of the VPC network to forward queries to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
	NetworkUrl string `pulumi:"networkUrl"`
}

type ManagedZonePeeringConfigTargetNetworkResponseOutput struct{ *pulumi.OutputState }

func (ManagedZonePeeringConfigTargetNetworkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZonePeeringConfigTargetNetworkResponse)(nil)).Elem()
}

func (o ManagedZonePeeringConfigTargetNetworkResponseOutput) ToManagedZonePeeringConfigTargetNetworkResponseOutput() ManagedZonePeeringConfigTargetNetworkResponseOutput {
	return o
}

func (o ManagedZonePeeringConfigTargetNetworkResponseOutput) ToManagedZonePeeringConfigTargetNetworkResponseOutputWithContext(ctx context.Context) ManagedZonePeeringConfigTargetNetworkResponseOutput {
	return o
}

// The time at which the zone was deactivated, in RFC 3339 date-time format. An empty string indicates that the peering connection is active. The producer network can deactivate a zone. The zone is automatically deactivated if the producer network that the zone targeted is deleted. Output only.
func (o ManagedZonePeeringConfigTargetNetworkResponseOutput) DeactivateTime() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedZonePeeringConfigTargetNetworkResponse) string { return v.DeactivateTime }).(pulumi.StringOutput)
}

func (o ManagedZonePeeringConfigTargetNetworkResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedZonePeeringConfigTargetNetworkResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// The fully qualified URL of the VPC network to forward queries to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
func (o ManagedZonePeeringConfigTargetNetworkResponseOutput) NetworkUrl() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedZonePeeringConfigTargetNetworkResponse) string { return v.NetworkUrl }).(pulumi.StringOutput)
}

type ManagedZonePrivateVisibilityConfig struct {
	// The list of Google Kubernetes Engine clusters that can see this zone.
	GkeClusters []ManagedZonePrivateVisibilityConfigGKECluster `pulumi:"gkeClusters"`
	Kind        *string                                        `pulumi:"kind"`
	// The list of VPC networks that can see this zone.
	Networks []ManagedZonePrivateVisibilityConfigNetwork `pulumi:"networks"`
}

// ManagedZonePrivateVisibilityConfigInput is an input type that accepts ManagedZonePrivateVisibilityConfigArgs and ManagedZonePrivateVisibilityConfigOutput values.
// You can construct a concrete instance of `ManagedZonePrivateVisibilityConfigInput` via:
//
//	ManagedZonePrivateVisibilityConfigArgs{...}
type ManagedZonePrivateVisibilityConfigInput interface {
	pulumi.Input

	ToManagedZonePrivateVisibilityConfigOutput() ManagedZonePrivateVisibilityConfigOutput
	ToManagedZonePrivateVisibilityConfigOutputWithContext(context.Context) ManagedZonePrivateVisibilityConfigOutput
}

type ManagedZonePrivateVisibilityConfigArgs struct {
	// The list of Google Kubernetes Engine clusters that can see this zone.
	GkeClusters ManagedZonePrivateVisibilityConfigGKEClusterArrayInput `pulumi:"gkeClusters"`
	Kind        pulumi.StringPtrInput                                  `pulumi:"kind"`
	// The list of VPC networks that can see this zone.
	Networks ManagedZonePrivateVisibilityConfigNetworkArrayInput `pulumi:"networks"`
}

func (ManagedZonePrivateVisibilityConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZonePrivateVisibilityConfig)(nil)).Elem()
}

func (i ManagedZonePrivateVisibilityConfigArgs) ToManagedZonePrivateVisibilityConfigOutput() ManagedZonePrivateVisibilityConfigOutput {
	return i.ToManagedZonePrivateVisibilityConfigOutputWithContext(context.Background())
}

func (i ManagedZonePrivateVisibilityConfigArgs) ToManagedZonePrivateVisibilityConfigOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZonePrivateVisibilityConfigOutput)
}

func (i ManagedZonePrivateVisibilityConfigArgs) ToManagedZonePrivateVisibilityConfigPtrOutput() ManagedZonePrivateVisibilityConfigPtrOutput {
	return i.ToManagedZonePrivateVisibilityConfigPtrOutputWithContext(context.Background())
}

func (i ManagedZonePrivateVisibilityConfigArgs) ToManagedZonePrivateVisibilityConfigPtrOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZonePrivateVisibilityConfigOutput).ToManagedZonePrivateVisibilityConfigPtrOutputWithContext(ctx)
}

// ManagedZonePrivateVisibilityConfigPtrInput is an input type that accepts ManagedZonePrivateVisibilityConfigArgs, ManagedZonePrivateVisibilityConfigPtr and ManagedZonePrivateVisibilityConfigPtrOutput values.
// You can construct a concrete instance of `ManagedZonePrivateVisibilityConfigPtrInput` via:
//
//	        ManagedZonePrivateVisibilityConfigArgs{...}
//
//	or:
//
//	        nil
type ManagedZonePrivateVisibilityConfigPtrInput interface {
	pulumi.Input

	ToManagedZonePrivateVisibilityConfigPtrOutput() ManagedZonePrivateVisibilityConfigPtrOutput
	ToManagedZonePrivateVisibilityConfigPtrOutputWithContext(context.Context) ManagedZonePrivateVisibilityConfigPtrOutput
}

type managedZonePrivateVisibilityConfigPtrType ManagedZonePrivateVisibilityConfigArgs

func ManagedZonePrivateVisibilityConfigPtr(v *ManagedZonePrivateVisibilityConfigArgs) ManagedZonePrivateVisibilityConfigPtrInput {
	return (*managedZonePrivateVisibilityConfigPtrType)(v)
}

func (*managedZonePrivateVisibilityConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZonePrivateVisibilityConfig)(nil)).Elem()
}

func (i *managedZonePrivateVisibilityConfigPtrType) ToManagedZonePrivateVisibilityConfigPtrOutput() ManagedZonePrivateVisibilityConfigPtrOutput {
	return i.ToManagedZonePrivateVisibilityConfigPtrOutputWithContext(context.Background())
}

func (i *managedZonePrivateVisibilityConfigPtrType) ToManagedZonePrivateVisibilityConfigPtrOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZonePrivateVisibilityConfigPtrOutput)
}

type ManagedZonePrivateVisibilityConfigOutput struct{ *pulumi.OutputState }

func (ManagedZonePrivateVisibilityConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZonePrivateVisibilityConfig)(nil)).Elem()
}

func (o ManagedZonePrivateVisibilityConfigOutput) ToManagedZonePrivateVisibilityConfigOutput() ManagedZonePrivateVisibilityConfigOutput {
	return o
}

func (o ManagedZonePrivateVisibilityConfigOutput) ToManagedZonePrivateVisibilityConfigOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigOutput {
	return o
}

func (o ManagedZonePrivateVisibilityConfigOutput) ToManagedZonePrivateVisibilityConfigPtrOutput() ManagedZonePrivateVisibilityConfigPtrOutput {
	return o.ToManagedZonePrivateVisibilityConfigPtrOutputWithContext(context.Background())
}

func (o ManagedZonePrivateVisibilityConfigOutput) ToManagedZonePrivateVisibilityConfigPtrOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedZonePrivateVisibilityConfig) *ManagedZonePrivateVisibilityConfig {
		return &v
	}).(ManagedZonePrivateVisibilityConfigPtrOutput)
}

// The list of Google Kubernetes Engine clusters that can see this zone.
func (o ManagedZonePrivateVisibilityConfigOutput) GkeClusters() ManagedZonePrivateVisibilityConfigGKEClusterArrayOutput {
	return o.ApplyT(func(v ManagedZonePrivateVisibilityConfig) []ManagedZonePrivateVisibilityConfigGKECluster {
		return v.GkeClusters
	}).(ManagedZonePrivateVisibilityConfigGKEClusterArrayOutput)
}

func (o ManagedZonePrivateVisibilityConfigOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZonePrivateVisibilityConfig) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// The list of VPC networks that can see this zone.
func (o ManagedZonePrivateVisibilityConfigOutput) Networks() ManagedZonePrivateVisibilityConfigNetworkArrayOutput {
	return o.ApplyT(func(v ManagedZonePrivateVisibilityConfig) []ManagedZonePrivateVisibilityConfigNetwork {
		return v.Networks
	}).(ManagedZonePrivateVisibilityConfigNetworkArrayOutput)
}

type ManagedZonePrivateVisibilityConfigPtrOutput struct{ *pulumi.OutputState }

func (ManagedZonePrivateVisibilityConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZonePrivateVisibilityConfig)(nil)).Elem()
}

func (o ManagedZonePrivateVisibilityConfigPtrOutput) ToManagedZonePrivateVisibilityConfigPtrOutput() ManagedZonePrivateVisibilityConfigPtrOutput {
	return o
}

func (o ManagedZonePrivateVisibilityConfigPtrOutput) ToManagedZonePrivateVisibilityConfigPtrOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigPtrOutput {
	return o
}

func (o ManagedZonePrivateVisibilityConfigPtrOutput) Elem() ManagedZonePrivateVisibilityConfigOutput {
	return o.ApplyT(func(v *ManagedZonePrivateVisibilityConfig) ManagedZonePrivateVisibilityConfig {
		if v != nil {
			return *v
		}
		var ret ManagedZonePrivateVisibilityConfig
		return ret
	}).(ManagedZonePrivateVisibilityConfigOutput)
}

// The list of Google Kubernetes Engine clusters that can see this zone.
func (o ManagedZonePrivateVisibilityConfigPtrOutput) GkeClusters() ManagedZonePrivateVisibilityConfigGKEClusterArrayOutput {
	return o.ApplyT(func(v *ManagedZonePrivateVisibilityConfig) []ManagedZonePrivateVisibilityConfigGKECluster {
		if v == nil {
			return nil
		}
		return v.GkeClusters
	}).(ManagedZonePrivateVisibilityConfigGKEClusterArrayOutput)
}

func (o ManagedZonePrivateVisibilityConfigPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedZonePrivateVisibilityConfig) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// The list of VPC networks that can see this zone.
func (o ManagedZonePrivateVisibilityConfigPtrOutput) Networks() ManagedZonePrivateVisibilityConfigNetworkArrayOutput {
	return o.ApplyT(func(v *ManagedZonePrivateVisibilityConfig) []ManagedZonePrivateVisibilityConfigNetwork {
		if v == nil {
			return nil
		}
		return v.Networks
	}).(ManagedZonePrivateVisibilityConfigNetworkArrayOutput)
}

type ManagedZonePrivateVisibilityConfigGKECluster struct {
	// The resource name of the cluster to bind this ManagedZone to. This should be specified in the format like: projects/*/locations/*/clusters/*. This is referenced from GKE projects.locations.clusters.get API: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/get
	GkeClusterName *string `pulumi:"gkeClusterName"`
	Kind           *string `pulumi:"kind"`
}

// ManagedZonePrivateVisibilityConfigGKEClusterInput is an input type that accepts ManagedZonePrivateVisibilityConfigGKEClusterArgs and ManagedZonePrivateVisibilityConfigGKEClusterOutput values.
// You can construct a concrete instance of `ManagedZonePrivateVisibilityConfigGKEClusterInput` via:
//
//	ManagedZonePrivateVisibilityConfigGKEClusterArgs{...}
type ManagedZonePrivateVisibilityConfigGKEClusterInput interface {
	pulumi.Input

	ToManagedZonePrivateVisibilityConfigGKEClusterOutput() ManagedZonePrivateVisibilityConfigGKEClusterOutput
	ToManagedZonePrivateVisibilityConfigGKEClusterOutputWithContext(context.Context) ManagedZonePrivateVisibilityConfigGKEClusterOutput
}

type ManagedZonePrivateVisibilityConfigGKEClusterArgs struct {
	// The resource name of the cluster to bind this ManagedZone to. This should be specified in the format like: projects/*/locations/*/clusters/*. This is referenced from GKE projects.locations.clusters.get API: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/get
	GkeClusterName pulumi.StringPtrInput `pulumi:"gkeClusterName"`
	Kind           pulumi.StringPtrInput `pulumi:"kind"`
}

func (ManagedZonePrivateVisibilityConfigGKEClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZonePrivateVisibilityConfigGKECluster)(nil)).Elem()
}

func (i ManagedZonePrivateVisibilityConfigGKEClusterArgs) ToManagedZonePrivateVisibilityConfigGKEClusterOutput() ManagedZonePrivateVisibilityConfigGKEClusterOutput {
	return i.ToManagedZonePrivateVisibilityConfigGKEClusterOutputWithContext(context.Background())
}

func (i ManagedZonePrivateVisibilityConfigGKEClusterArgs) ToManagedZonePrivateVisibilityConfigGKEClusterOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigGKEClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZonePrivateVisibilityConfigGKEClusterOutput)
}

// ManagedZonePrivateVisibilityConfigGKEClusterArrayInput is an input type that accepts ManagedZonePrivateVisibilityConfigGKEClusterArray and ManagedZonePrivateVisibilityConfigGKEClusterArrayOutput values.
// You can construct a concrete instance of `ManagedZonePrivateVisibilityConfigGKEClusterArrayInput` via:
//
//	ManagedZonePrivateVisibilityConfigGKEClusterArray{ ManagedZonePrivateVisibilityConfigGKEClusterArgs{...} }
type ManagedZonePrivateVisibilityConfigGKEClusterArrayInput interface {
	pulumi.Input

	ToManagedZonePrivateVisibilityConfigGKEClusterArrayOutput() ManagedZonePrivateVisibilityConfigGKEClusterArrayOutput
	ToManagedZonePrivateVisibilityConfigGKEClusterArrayOutputWithContext(context.Context) ManagedZonePrivateVisibilityConfigGKEClusterArrayOutput
}

type ManagedZonePrivateVisibilityConfigGKEClusterArray []ManagedZonePrivateVisibilityConfigGKEClusterInput

func (ManagedZonePrivateVisibilityConfigGKEClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedZonePrivateVisibilityConfigGKECluster)(nil)).Elem()
}

func (i ManagedZonePrivateVisibilityConfigGKEClusterArray) ToManagedZonePrivateVisibilityConfigGKEClusterArrayOutput() ManagedZonePrivateVisibilityConfigGKEClusterArrayOutput {
	return i.ToManagedZonePrivateVisibilityConfigGKEClusterArrayOutputWithContext(context.Background())
}

func (i ManagedZonePrivateVisibilityConfigGKEClusterArray) ToManagedZonePrivateVisibilityConfigGKEClusterArrayOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigGKEClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZonePrivateVisibilityConfigGKEClusterArrayOutput)
}

type ManagedZonePrivateVisibilityConfigGKEClusterOutput struct{ *pulumi.OutputState }

func (ManagedZonePrivateVisibilityConfigGKEClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZonePrivateVisibilityConfigGKECluster)(nil)).Elem()
}

func (o ManagedZonePrivateVisibilityConfigGKEClusterOutput) ToManagedZonePrivateVisibilityConfigGKEClusterOutput() ManagedZonePrivateVisibilityConfigGKEClusterOutput {
	return o
}

func (o ManagedZonePrivateVisibilityConfigGKEClusterOutput) ToManagedZonePrivateVisibilityConfigGKEClusterOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigGKEClusterOutput {
	return o
}

// The resource name of the cluster to bind this ManagedZone to. This should be specified in the format like: projects/*/locations/*/clusters/*. This is referenced from GKE projects.locations.clusters.get API: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/get
func (o ManagedZonePrivateVisibilityConfigGKEClusterOutput) GkeClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZonePrivateVisibilityConfigGKECluster) *string { return v.GkeClusterName }).(pulumi.StringPtrOutput)
}

func (o ManagedZonePrivateVisibilityConfigGKEClusterOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZonePrivateVisibilityConfigGKECluster) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

type ManagedZonePrivateVisibilityConfigGKEClusterArrayOutput struct{ *pulumi.OutputState }

func (ManagedZonePrivateVisibilityConfigGKEClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedZonePrivateVisibilityConfigGKECluster)(nil)).Elem()
}

func (o ManagedZonePrivateVisibilityConfigGKEClusterArrayOutput) ToManagedZonePrivateVisibilityConfigGKEClusterArrayOutput() ManagedZonePrivateVisibilityConfigGKEClusterArrayOutput {
	return o
}

func (o ManagedZonePrivateVisibilityConfigGKEClusterArrayOutput) ToManagedZonePrivateVisibilityConfigGKEClusterArrayOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigGKEClusterArrayOutput {
	return o
}

func (o ManagedZonePrivateVisibilityConfigGKEClusterArrayOutput) Index(i pulumi.IntInput) ManagedZonePrivateVisibilityConfigGKEClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedZonePrivateVisibilityConfigGKECluster {
		return vs[0].([]ManagedZonePrivateVisibilityConfigGKECluster)[vs[1].(int)]
	}).(ManagedZonePrivateVisibilityConfigGKEClusterOutput)
}

type ManagedZonePrivateVisibilityConfigGKEClusterResponse struct {
	// The resource name of the cluster to bind this ManagedZone to. This should be specified in the format like: projects/*/locations/*/clusters/*. This is referenced from GKE projects.locations.clusters.get API: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/get
	GkeClusterName string `pulumi:"gkeClusterName"`
	Kind           string `pulumi:"kind"`
}

type ManagedZonePrivateVisibilityConfigGKEClusterResponseOutput struct{ *pulumi.OutputState }

func (ManagedZonePrivateVisibilityConfigGKEClusterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZonePrivateVisibilityConfigGKEClusterResponse)(nil)).Elem()
}

func (o ManagedZonePrivateVisibilityConfigGKEClusterResponseOutput) ToManagedZonePrivateVisibilityConfigGKEClusterResponseOutput() ManagedZonePrivateVisibilityConfigGKEClusterResponseOutput {
	return o
}

func (o ManagedZonePrivateVisibilityConfigGKEClusterResponseOutput) ToManagedZonePrivateVisibilityConfigGKEClusterResponseOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigGKEClusterResponseOutput {
	return o
}

// The resource name of the cluster to bind this ManagedZone to. This should be specified in the format like: projects/*/locations/*/clusters/*. This is referenced from GKE projects.locations.clusters.get API: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/get
func (o ManagedZonePrivateVisibilityConfigGKEClusterResponseOutput) GkeClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedZonePrivateVisibilityConfigGKEClusterResponse) string { return v.GkeClusterName }).(pulumi.StringOutput)
}

func (o ManagedZonePrivateVisibilityConfigGKEClusterResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedZonePrivateVisibilityConfigGKEClusterResponse) string { return v.Kind }).(pulumi.StringOutput)
}

type ManagedZonePrivateVisibilityConfigGKEClusterResponseArrayOutput struct{ *pulumi.OutputState }

func (ManagedZonePrivateVisibilityConfigGKEClusterResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedZonePrivateVisibilityConfigGKEClusterResponse)(nil)).Elem()
}

func (o ManagedZonePrivateVisibilityConfigGKEClusterResponseArrayOutput) ToManagedZonePrivateVisibilityConfigGKEClusterResponseArrayOutput() ManagedZonePrivateVisibilityConfigGKEClusterResponseArrayOutput {
	return o
}

func (o ManagedZonePrivateVisibilityConfigGKEClusterResponseArrayOutput) ToManagedZonePrivateVisibilityConfigGKEClusterResponseArrayOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigGKEClusterResponseArrayOutput {
	return o
}

func (o ManagedZonePrivateVisibilityConfigGKEClusterResponseArrayOutput) Index(i pulumi.IntInput) ManagedZonePrivateVisibilityConfigGKEClusterResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedZonePrivateVisibilityConfigGKEClusterResponse {
		return vs[0].([]ManagedZonePrivateVisibilityConfigGKEClusterResponse)[vs[1].(int)]
	}).(ManagedZonePrivateVisibilityConfigGKEClusterResponseOutput)
}

type ManagedZonePrivateVisibilityConfigNetwork struct {
	Kind *string `pulumi:"kind"`
	// The fully qualified URL of the VPC network to bind to. Format this URL like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
	NetworkUrl *string `pulumi:"networkUrl"`
}

// ManagedZonePrivateVisibilityConfigNetworkInput is an input type that accepts ManagedZonePrivateVisibilityConfigNetworkArgs and ManagedZonePrivateVisibilityConfigNetworkOutput values.
// You can construct a concrete instance of `ManagedZonePrivateVisibilityConfigNetworkInput` via:
//
//	ManagedZonePrivateVisibilityConfigNetworkArgs{...}
type ManagedZonePrivateVisibilityConfigNetworkInput interface {
	pulumi.Input

	ToManagedZonePrivateVisibilityConfigNetworkOutput() ManagedZonePrivateVisibilityConfigNetworkOutput
	ToManagedZonePrivateVisibilityConfigNetworkOutputWithContext(context.Context) ManagedZonePrivateVisibilityConfigNetworkOutput
}

type ManagedZonePrivateVisibilityConfigNetworkArgs struct {
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// The fully qualified URL of the VPC network to bind to. Format this URL like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
	NetworkUrl pulumi.StringPtrInput `pulumi:"networkUrl"`
}

func (ManagedZonePrivateVisibilityConfigNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZonePrivateVisibilityConfigNetwork)(nil)).Elem()
}

func (i ManagedZonePrivateVisibilityConfigNetworkArgs) ToManagedZonePrivateVisibilityConfigNetworkOutput() ManagedZonePrivateVisibilityConfigNetworkOutput {
	return i.ToManagedZonePrivateVisibilityConfigNetworkOutputWithContext(context.Background())
}

func (i ManagedZonePrivateVisibilityConfigNetworkArgs) ToManagedZonePrivateVisibilityConfigNetworkOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZonePrivateVisibilityConfigNetworkOutput)
}

// ManagedZonePrivateVisibilityConfigNetworkArrayInput is an input type that accepts ManagedZonePrivateVisibilityConfigNetworkArray and ManagedZonePrivateVisibilityConfigNetworkArrayOutput values.
// You can construct a concrete instance of `ManagedZonePrivateVisibilityConfigNetworkArrayInput` via:
//
//	ManagedZonePrivateVisibilityConfigNetworkArray{ ManagedZonePrivateVisibilityConfigNetworkArgs{...} }
type ManagedZonePrivateVisibilityConfigNetworkArrayInput interface {
	pulumi.Input

	ToManagedZonePrivateVisibilityConfigNetworkArrayOutput() ManagedZonePrivateVisibilityConfigNetworkArrayOutput
	ToManagedZonePrivateVisibilityConfigNetworkArrayOutputWithContext(context.Context) ManagedZonePrivateVisibilityConfigNetworkArrayOutput
}

type ManagedZonePrivateVisibilityConfigNetworkArray []ManagedZonePrivateVisibilityConfigNetworkInput

func (ManagedZonePrivateVisibilityConfigNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedZonePrivateVisibilityConfigNetwork)(nil)).Elem()
}

func (i ManagedZonePrivateVisibilityConfigNetworkArray) ToManagedZonePrivateVisibilityConfigNetworkArrayOutput() ManagedZonePrivateVisibilityConfigNetworkArrayOutput {
	return i.ToManagedZonePrivateVisibilityConfigNetworkArrayOutputWithContext(context.Background())
}

func (i ManagedZonePrivateVisibilityConfigNetworkArray) ToManagedZonePrivateVisibilityConfigNetworkArrayOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZonePrivateVisibilityConfigNetworkArrayOutput)
}

type ManagedZonePrivateVisibilityConfigNetworkOutput struct{ *pulumi.OutputState }

func (ManagedZonePrivateVisibilityConfigNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZonePrivateVisibilityConfigNetwork)(nil)).Elem()
}

func (o ManagedZonePrivateVisibilityConfigNetworkOutput) ToManagedZonePrivateVisibilityConfigNetworkOutput() ManagedZonePrivateVisibilityConfigNetworkOutput {
	return o
}

func (o ManagedZonePrivateVisibilityConfigNetworkOutput) ToManagedZonePrivateVisibilityConfigNetworkOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigNetworkOutput {
	return o
}

func (o ManagedZonePrivateVisibilityConfigNetworkOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZonePrivateVisibilityConfigNetwork) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// The fully qualified URL of the VPC network to bind to. Format this URL like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
func (o ManagedZonePrivateVisibilityConfigNetworkOutput) NetworkUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZonePrivateVisibilityConfigNetwork) *string { return v.NetworkUrl }).(pulumi.StringPtrOutput)
}

type ManagedZonePrivateVisibilityConfigNetworkArrayOutput struct{ *pulumi.OutputState }

func (ManagedZonePrivateVisibilityConfigNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedZonePrivateVisibilityConfigNetwork)(nil)).Elem()
}

func (o ManagedZonePrivateVisibilityConfigNetworkArrayOutput) ToManagedZonePrivateVisibilityConfigNetworkArrayOutput() ManagedZonePrivateVisibilityConfigNetworkArrayOutput {
	return o
}

func (o ManagedZonePrivateVisibilityConfigNetworkArrayOutput) ToManagedZonePrivateVisibilityConfigNetworkArrayOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigNetworkArrayOutput {
	return o
}

func (o ManagedZonePrivateVisibilityConfigNetworkArrayOutput) Index(i pulumi.IntInput) ManagedZonePrivateVisibilityConfigNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedZonePrivateVisibilityConfigNetwork {
		return vs[0].([]ManagedZonePrivateVisibilityConfigNetwork)[vs[1].(int)]
	}).(ManagedZonePrivateVisibilityConfigNetworkOutput)
}

type ManagedZonePrivateVisibilityConfigNetworkResponse struct {
	Kind string `pulumi:"kind"`
	// The fully qualified URL of the VPC network to bind to. Format this URL like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
	NetworkUrl string `pulumi:"networkUrl"`
}

type ManagedZonePrivateVisibilityConfigNetworkResponseOutput struct{ *pulumi.OutputState }

func (ManagedZonePrivateVisibilityConfigNetworkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZonePrivateVisibilityConfigNetworkResponse)(nil)).Elem()
}

func (o ManagedZonePrivateVisibilityConfigNetworkResponseOutput) ToManagedZonePrivateVisibilityConfigNetworkResponseOutput() ManagedZonePrivateVisibilityConfigNetworkResponseOutput {
	return o
}

func (o ManagedZonePrivateVisibilityConfigNetworkResponseOutput) ToManagedZonePrivateVisibilityConfigNetworkResponseOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigNetworkResponseOutput {
	return o
}

func (o ManagedZonePrivateVisibilityConfigNetworkResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedZonePrivateVisibilityConfigNetworkResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// The fully qualified URL of the VPC network to bind to. Format this URL like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
func (o ManagedZonePrivateVisibilityConfigNetworkResponseOutput) NetworkUrl() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedZonePrivateVisibilityConfigNetworkResponse) string { return v.NetworkUrl }).(pulumi.StringOutput)
}

type ManagedZonePrivateVisibilityConfigNetworkResponseArrayOutput struct{ *pulumi.OutputState }

func (ManagedZonePrivateVisibilityConfigNetworkResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedZonePrivateVisibilityConfigNetworkResponse)(nil)).Elem()
}

func (o ManagedZonePrivateVisibilityConfigNetworkResponseArrayOutput) ToManagedZonePrivateVisibilityConfigNetworkResponseArrayOutput() ManagedZonePrivateVisibilityConfigNetworkResponseArrayOutput {
	return o
}

func (o ManagedZonePrivateVisibilityConfigNetworkResponseArrayOutput) ToManagedZonePrivateVisibilityConfigNetworkResponseArrayOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigNetworkResponseArrayOutput {
	return o
}

func (o ManagedZonePrivateVisibilityConfigNetworkResponseArrayOutput) Index(i pulumi.IntInput) ManagedZonePrivateVisibilityConfigNetworkResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedZonePrivateVisibilityConfigNetworkResponse {
		return vs[0].([]ManagedZonePrivateVisibilityConfigNetworkResponse)[vs[1].(int)]
	}).(ManagedZonePrivateVisibilityConfigNetworkResponseOutput)
}

type ManagedZonePrivateVisibilityConfigResponse struct {
	// The list of Google Kubernetes Engine clusters that can see this zone.
	GkeClusters []ManagedZonePrivateVisibilityConfigGKEClusterResponse `pulumi:"gkeClusters"`
	Kind        string                                                 `pulumi:"kind"`
	// The list of VPC networks that can see this zone.
	Networks []ManagedZonePrivateVisibilityConfigNetworkResponse `pulumi:"networks"`
}

type ManagedZonePrivateVisibilityConfigResponseOutput struct{ *pulumi.OutputState }

func (ManagedZonePrivateVisibilityConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZonePrivateVisibilityConfigResponse)(nil)).Elem()
}

func (o ManagedZonePrivateVisibilityConfigResponseOutput) ToManagedZonePrivateVisibilityConfigResponseOutput() ManagedZonePrivateVisibilityConfigResponseOutput {
	return o
}

func (o ManagedZonePrivateVisibilityConfigResponseOutput) ToManagedZonePrivateVisibilityConfigResponseOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigResponseOutput {
	return o
}

// The list of Google Kubernetes Engine clusters that can see this zone.
func (o ManagedZonePrivateVisibilityConfigResponseOutput) GkeClusters() ManagedZonePrivateVisibilityConfigGKEClusterResponseArrayOutput {
	return o.ApplyT(func(v ManagedZonePrivateVisibilityConfigResponse) []ManagedZonePrivateVisibilityConfigGKEClusterResponse {
		return v.GkeClusters
	}).(ManagedZonePrivateVisibilityConfigGKEClusterResponseArrayOutput)
}

func (o ManagedZonePrivateVisibilityConfigResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedZonePrivateVisibilityConfigResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// The list of VPC networks that can see this zone.
func (o ManagedZonePrivateVisibilityConfigResponseOutput) Networks() ManagedZonePrivateVisibilityConfigNetworkResponseArrayOutput {
	return o.ApplyT(func(v ManagedZonePrivateVisibilityConfigResponse) []ManagedZonePrivateVisibilityConfigNetworkResponse {
		return v.Networks
	}).(ManagedZonePrivateVisibilityConfigNetworkResponseArrayOutput)
}

type ManagedZoneReverseLookupConfig struct {
	Kind *string `pulumi:"kind"`
}

// ManagedZoneReverseLookupConfigInput is an input type that accepts ManagedZoneReverseLookupConfigArgs and ManagedZoneReverseLookupConfigOutput values.
// You can construct a concrete instance of `ManagedZoneReverseLookupConfigInput` via:
//
//	ManagedZoneReverseLookupConfigArgs{...}
type ManagedZoneReverseLookupConfigInput interface {
	pulumi.Input

	ToManagedZoneReverseLookupConfigOutput() ManagedZoneReverseLookupConfigOutput
	ToManagedZoneReverseLookupConfigOutputWithContext(context.Context) ManagedZoneReverseLookupConfigOutput
}

type ManagedZoneReverseLookupConfigArgs struct {
	Kind pulumi.StringPtrInput `pulumi:"kind"`
}

func (ManagedZoneReverseLookupConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneReverseLookupConfig)(nil)).Elem()
}

func (i ManagedZoneReverseLookupConfigArgs) ToManagedZoneReverseLookupConfigOutput() ManagedZoneReverseLookupConfigOutput {
	return i.ToManagedZoneReverseLookupConfigOutputWithContext(context.Background())
}

func (i ManagedZoneReverseLookupConfigArgs) ToManagedZoneReverseLookupConfigOutputWithContext(ctx context.Context) ManagedZoneReverseLookupConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneReverseLookupConfigOutput)
}

func (i ManagedZoneReverseLookupConfigArgs) ToManagedZoneReverseLookupConfigPtrOutput() ManagedZoneReverseLookupConfigPtrOutput {
	return i.ToManagedZoneReverseLookupConfigPtrOutputWithContext(context.Background())
}

func (i ManagedZoneReverseLookupConfigArgs) ToManagedZoneReverseLookupConfigPtrOutputWithContext(ctx context.Context) ManagedZoneReverseLookupConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneReverseLookupConfigOutput).ToManagedZoneReverseLookupConfigPtrOutputWithContext(ctx)
}

// ManagedZoneReverseLookupConfigPtrInput is an input type that accepts ManagedZoneReverseLookupConfigArgs, ManagedZoneReverseLookupConfigPtr and ManagedZoneReverseLookupConfigPtrOutput values.
// You can construct a concrete instance of `ManagedZoneReverseLookupConfigPtrInput` via:
//
//	        ManagedZoneReverseLookupConfigArgs{...}
//
//	or:
//
//	        nil
type ManagedZoneReverseLookupConfigPtrInput interface {
	pulumi.Input

	ToManagedZoneReverseLookupConfigPtrOutput() ManagedZoneReverseLookupConfigPtrOutput
	ToManagedZoneReverseLookupConfigPtrOutputWithContext(context.Context) ManagedZoneReverseLookupConfigPtrOutput
}

type managedZoneReverseLookupConfigPtrType ManagedZoneReverseLookupConfigArgs

func ManagedZoneReverseLookupConfigPtr(v *ManagedZoneReverseLookupConfigArgs) ManagedZoneReverseLookupConfigPtrInput {
	return (*managedZoneReverseLookupConfigPtrType)(v)
}

func (*managedZoneReverseLookupConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZoneReverseLookupConfig)(nil)).Elem()
}

func (i *managedZoneReverseLookupConfigPtrType) ToManagedZoneReverseLookupConfigPtrOutput() ManagedZoneReverseLookupConfigPtrOutput {
	return i.ToManagedZoneReverseLookupConfigPtrOutputWithContext(context.Background())
}

func (i *managedZoneReverseLookupConfigPtrType) ToManagedZoneReverseLookupConfigPtrOutputWithContext(ctx context.Context) ManagedZoneReverseLookupConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneReverseLookupConfigPtrOutput)
}

type ManagedZoneReverseLookupConfigOutput struct{ *pulumi.OutputState }

func (ManagedZoneReverseLookupConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneReverseLookupConfig)(nil)).Elem()
}

func (o ManagedZoneReverseLookupConfigOutput) ToManagedZoneReverseLookupConfigOutput() ManagedZoneReverseLookupConfigOutput {
	return o
}

func (o ManagedZoneReverseLookupConfigOutput) ToManagedZoneReverseLookupConfigOutputWithContext(ctx context.Context) ManagedZoneReverseLookupConfigOutput {
	return o
}

func (o ManagedZoneReverseLookupConfigOutput) ToManagedZoneReverseLookupConfigPtrOutput() ManagedZoneReverseLookupConfigPtrOutput {
	return o.ToManagedZoneReverseLookupConfigPtrOutputWithContext(context.Background())
}

func (o ManagedZoneReverseLookupConfigOutput) ToManagedZoneReverseLookupConfigPtrOutputWithContext(ctx context.Context) ManagedZoneReverseLookupConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedZoneReverseLookupConfig) *ManagedZoneReverseLookupConfig {
		return &v
	}).(ManagedZoneReverseLookupConfigPtrOutput)
}

func (o ManagedZoneReverseLookupConfigOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZoneReverseLookupConfig) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

type ManagedZoneReverseLookupConfigPtrOutput struct{ *pulumi.OutputState }

func (ManagedZoneReverseLookupConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZoneReverseLookupConfig)(nil)).Elem()
}

func (o ManagedZoneReverseLookupConfigPtrOutput) ToManagedZoneReverseLookupConfigPtrOutput() ManagedZoneReverseLookupConfigPtrOutput {
	return o
}

func (o ManagedZoneReverseLookupConfigPtrOutput) ToManagedZoneReverseLookupConfigPtrOutputWithContext(ctx context.Context) ManagedZoneReverseLookupConfigPtrOutput {
	return o
}

func (o ManagedZoneReverseLookupConfigPtrOutput) Elem() ManagedZoneReverseLookupConfigOutput {
	return o.ApplyT(func(v *ManagedZoneReverseLookupConfig) ManagedZoneReverseLookupConfig {
		if v != nil {
			return *v
		}
		var ret ManagedZoneReverseLookupConfig
		return ret
	}).(ManagedZoneReverseLookupConfigOutput)
}

func (o ManagedZoneReverseLookupConfigPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedZoneReverseLookupConfig) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

type ManagedZoneReverseLookupConfigResponse struct {
	Kind string `pulumi:"kind"`
}

type ManagedZoneReverseLookupConfigResponseOutput struct{ *pulumi.OutputState }

func (ManagedZoneReverseLookupConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneReverseLookupConfigResponse)(nil)).Elem()
}

func (o ManagedZoneReverseLookupConfigResponseOutput) ToManagedZoneReverseLookupConfigResponseOutput() ManagedZoneReverseLookupConfigResponseOutput {
	return o
}

func (o ManagedZoneReverseLookupConfigResponseOutput) ToManagedZoneReverseLookupConfigResponseOutputWithContext(ctx context.Context) ManagedZoneReverseLookupConfigResponseOutput {
	return o
}

func (o ManagedZoneReverseLookupConfigResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedZoneReverseLookupConfigResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// Contains information about Service Directory-backed zones.
type ManagedZoneServiceDirectoryConfig struct {
	Kind *string `pulumi:"kind"`
	// Contains information about the namespace associated with the zone.
	Namespace *ManagedZoneServiceDirectoryConfigNamespace `pulumi:"namespace"`
}

// ManagedZoneServiceDirectoryConfigInput is an input type that accepts ManagedZoneServiceDirectoryConfigArgs and ManagedZoneServiceDirectoryConfigOutput values.
// You can construct a concrete instance of `ManagedZoneServiceDirectoryConfigInput` via:
//
//	ManagedZoneServiceDirectoryConfigArgs{...}
type ManagedZoneServiceDirectoryConfigInput interface {
	pulumi.Input

	ToManagedZoneServiceDirectoryConfigOutput() ManagedZoneServiceDirectoryConfigOutput
	ToManagedZoneServiceDirectoryConfigOutputWithContext(context.Context) ManagedZoneServiceDirectoryConfigOutput
}

// Contains information about Service Directory-backed zones.
type ManagedZoneServiceDirectoryConfigArgs struct {
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Contains information about the namespace associated with the zone.
	Namespace ManagedZoneServiceDirectoryConfigNamespacePtrInput `pulumi:"namespace"`
}

func (ManagedZoneServiceDirectoryConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneServiceDirectoryConfig)(nil)).Elem()
}

func (i ManagedZoneServiceDirectoryConfigArgs) ToManagedZoneServiceDirectoryConfigOutput() ManagedZoneServiceDirectoryConfigOutput {
	return i.ToManagedZoneServiceDirectoryConfigOutputWithContext(context.Background())
}

func (i ManagedZoneServiceDirectoryConfigArgs) ToManagedZoneServiceDirectoryConfigOutputWithContext(ctx context.Context) ManagedZoneServiceDirectoryConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneServiceDirectoryConfigOutput)
}

func (i ManagedZoneServiceDirectoryConfigArgs) ToManagedZoneServiceDirectoryConfigPtrOutput() ManagedZoneServiceDirectoryConfigPtrOutput {
	return i.ToManagedZoneServiceDirectoryConfigPtrOutputWithContext(context.Background())
}

func (i ManagedZoneServiceDirectoryConfigArgs) ToManagedZoneServiceDirectoryConfigPtrOutputWithContext(ctx context.Context) ManagedZoneServiceDirectoryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneServiceDirectoryConfigOutput).ToManagedZoneServiceDirectoryConfigPtrOutputWithContext(ctx)
}

// ManagedZoneServiceDirectoryConfigPtrInput is an input type that accepts ManagedZoneServiceDirectoryConfigArgs, ManagedZoneServiceDirectoryConfigPtr and ManagedZoneServiceDirectoryConfigPtrOutput values.
// You can construct a concrete instance of `ManagedZoneServiceDirectoryConfigPtrInput` via:
//
//	        ManagedZoneServiceDirectoryConfigArgs{...}
//
//	or:
//
//	        nil
type ManagedZoneServiceDirectoryConfigPtrInput interface {
	pulumi.Input

	ToManagedZoneServiceDirectoryConfigPtrOutput() ManagedZoneServiceDirectoryConfigPtrOutput
	ToManagedZoneServiceDirectoryConfigPtrOutputWithContext(context.Context) ManagedZoneServiceDirectoryConfigPtrOutput
}

type managedZoneServiceDirectoryConfigPtrType ManagedZoneServiceDirectoryConfigArgs

func ManagedZoneServiceDirectoryConfigPtr(v *ManagedZoneServiceDirectoryConfigArgs) ManagedZoneServiceDirectoryConfigPtrInput {
	return (*managedZoneServiceDirectoryConfigPtrType)(v)
}

func (*managedZoneServiceDirectoryConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZoneServiceDirectoryConfig)(nil)).Elem()
}

func (i *managedZoneServiceDirectoryConfigPtrType) ToManagedZoneServiceDirectoryConfigPtrOutput() ManagedZoneServiceDirectoryConfigPtrOutput {
	return i.ToManagedZoneServiceDirectoryConfigPtrOutputWithContext(context.Background())
}

func (i *managedZoneServiceDirectoryConfigPtrType) ToManagedZoneServiceDirectoryConfigPtrOutputWithContext(ctx context.Context) ManagedZoneServiceDirectoryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneServiceDirectoryConfigPtrOutput)
}

// Contains information about Service Directory-backed zones.
type ManagedZoneServiceDirectoryConfigOutput struct{ *pulumi.OutputState }

func (ManagedZoneServiceDirectoryConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneServiceDirectoryConfig)(nil)).Elem()
}

func (o ManagedZoneServiceDirectoryConfigOutput) ToManagedZoneServiceDirectoryConfigOutput() ManagedZoneServiceDirectoryConfigOutput {
	return o
}

func (o ManagedZoneServiceDirectoryConfigOutput) ToManagedZoneServiceDirectoryConfigOutputWithContext(ctx context.Context) ManagedZoneServiceDirectoryConfigOutput {
	return o
}

func (o ManagedZoneServiceDirectoryConfigOutput) ToManagedZoneServiceDirectoryConfigPtrOutput() ManagedZoneServiceDirectoryConfigPtrOutput {
	return o.ToManagedZoneServiceDirectoryConfigPtrOutputWithContext(context.Background())
}

func (o ManagedZoneServiceDirectoryConfigOutput) ToManagedZoneServiceDirectoryConfigPtrOutputWithContext(ctx context.Context) ManagedZoneServiceDirectoryConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedZoneServiceDirectoryConfig) *ManagedZoneServiceDirectoryConfig {
		return &v
	}).(ManagedZoneServiceDirectoryConfigPtrOutput)
}

func (o ManagedZoneServiceDirectoryConfigOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZoneServiceDirectoryConfig) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Contains information about the namespace associated with the zone.
func (o ManagedZoneServiceDirectoryConfigOutput) Namespace() ManagedZoneServiceDirectoryConfigNamespacePtrOutput {
	return o.ApplyT(func(v ManagedZoneServiceDirectoryConfig) *ManagedZoneServiceDirectoryConfigNamespace {
		return v.Namespace
	}).(ManagedZoneServiceDirectoryConfigNamespacePtrOutput)
}

type ManagedZoneServiceDirectoryConfigPtrOutput struct{ *pulumi.OutputState }

func (ManagedZoneServiceDirectoryConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZoneServiceDirectoryConfig)(nil)).Elem()
}

func (o ManagedZoneServiceDirectoryConfigPtrOutput) ToManagedZoneServiceDirectoryConfigPtrOutput() ManagedZoneServiceDirectoryConfigPtrOutput {
	return o
}

func (o ManagedZoneServiceDirectoryConfigPtrOutput) ToManagedZoneServiceDirectoryConfigPtrOutputWithContext(ctx context.Context) ManagedZoneServiceDirectoryConfigPtrOutput {
	return o
}

func (o ManagedZoneServiceDirectoryConfigPtrOutput) Elem() ManagedZoneServiceDirectoryConfigOutput {
	return o.ApplyT(func(v *ManagedZoneServiceDirectoryConfig) ManagedZoneServiceDirectoryConfig {
		if v != nil {
			return *v
		}
		var ret ManagedZoneServiceDirectoryConfig
		return ret
	}).(ManagedZoneServiceDirectoryConfigOutput)
}

func (o ManagedZoneServiceDirectoryConfigPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedZoneServiceDirectoryConfig) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Contains information about the namespace associated with the zone.
func (o ManagedZoneServiceDirectoryConfigPtrOutput) Namespace() ManagedZoneServiceDirectoryConfigNamespacePtrOutput {
	return o.ApplyT(func(v *ManagedZoneServiceDirectoryConfig) *ManagedZoneServiceDirectoryConfigNamespace {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(ManagedZoneServiceDirectoryConfigNamespacePtrOutput)
}

type ManagedZoneServiceDirectoryConfigNamespace struct {
	// The time that the namespace backing this zone was deleted; an empty string if it still exists. This is in RFC3339 text format. Output only.
	DeletionTime *string `pulumi:"deletionTime"`
	Kind         *string `pulumi:"kind"`
	// The fully qualified URL of the namespace associated with the zone. Format must be https://servicedirectory.googleapis.com/v1/projects/{project}/locations/{location}/namespaces/{namespace}
	NamespaceUrl *string `pulumi:"namespaceUrl"`
}

// ManagedZoneServiceDirectoryConfigNamespaceInput is an input type that accepts ManagedZoneServiceDirectoryConfigNamespaceArgs and ManagedZoneServiceDirectoryConfigNamespaceOutput values.
// You can construct a concrete instance of `ManagedZoneServiceDirectoryConfigNamespaceInput` via:
//
//	ManagedZoneServiceDirectoryConfigNamespaceArgs{...}
type ManagedZoneServiceDirectoryConfigNamespaceInput interface {
	pulumi.Input

	ToManagedZoneServiceDirectoryConfigNamespaceOutput() ManagedZoneServiceDirectoryConfigNamespaceOutput
	ToManagedZoneServiceDirectoryConfigNamespaceOutputWithContext(context.Context) ManagedZoneServiceDirectoryConfigNamespaceOutput
}

type ManagedZoneServiceDirectoryConfigNamespaceArgs struct {
	// The time that the namespace backing this zone was deleted; an empty string if it still exists. This is in RFC3339 text format. Output only.
	DeletionTime pulumi.StringPtrInput `pulumi:"deletionTime"`
	Kind         pulumi.StringPtrInput `pulumi:"kind"`
	// The fully qualified URL of the namespace associated with the zone. Format must be https://servicedirectory.googleapis.com/v1/projects/{project}/locations/{location}/namespaces/{namespace}
	NamespaceUrl pulumi.StringPtrInput `pulumi:"namespaceUrl"`
}

func (ManagedZoneServiceDirectoryConfigNamespaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneServiceDirectoryConfigNamespace)(nil)).Elem()
}

func (i ManagedZoneServiceDirectoryConfigNamespaceArgs) ToManagedZoneServiceDirectoryConfigNamespaceOutput() ManagedZoneServiceDirectoryConfigNamespaceOutput {
	return i.ToManagedZoneServiceDirectoryConfigNamespaceOutputWithContext(context.Background())
}

func (i ManagedZoneServiceDirectoryConfigNamespaceArgs) ToManagedZoneServiceDirectoryConfigNamespaceOutputWithContext(ctx context.Context) ManagedZoneServiceDirectoryConfigNamespaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneServiceDirectoryConfigNamespaceOutput)
}

func (i ManagedZoneServiceDirectoryConfigNamespaceArgs) ToManagedZoneServiceDirectoryConfigNamespacePtrOutput() ManagedZoneServiceDirectoryConfigNamespacePtrOutput {
	return i.ToManagedZoneServiceDirectoryConfigNamespacePtrOutputWithContext(context.Background())
}

func (i ManagedZoneServiceDirectoryConfigNamespaceArgs) ToManagedZoneServiceDirectoryConfigNamespacePtrOutputWithContext(ctx context.Context) ManagedZoneServiceDirectoryConfigNamespacePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneServiceDirectoryConfigNamespaceOutput).ToManagedZoneServiceDirectoryConfigNamespacePtrOutputWithContext(ctx)
}

// ManagedZoneServiceDirectoryConfigNamespacePtrInput is an input type that accepts ManagedZoneServiceDirectoryConfigNamespaceArgs, ManagedZoneServiceDirectoryConfigNamespacePtr and ManagedZoneServiceDirectoryConfigNamespacePtrOutput values.
// You can construct a concrete instance of `ManagedZoneServiceDirectoryConfigNamespacePtrInput` via:
//
//	        ManagedZoneServiceDirectoryConfigNamespaceArgs{...}
//
//	or:
//
//	        nil
type ManagedZoneServiceDirectoryConfigNamespacePtrInput interface {
	pulumi.Input

	ToManagedZoneServiceDirectoryConfigNamespacePtrOutput() ManagedZoneServiceDirectoryConfigNamespacePtrOutput
	ToManagedZoneServiceDirectoryConfigNamespacePtrOutputWithContext(context.Context) ManagedZoneServiceDirectoryConfigNamespacePtrOutput
}

type managedZoneServiceDirectoryConfigNamespacePtrType ManagedZoneServiceDirectoryConfigNamespaceArgs

func ManagedZoneServiceDirectoryConfigNamespacePtr(v *ManagedZoneServiceDirectoryConfigNamespaceArgs) ManagedZoneServiceDirectoryConfigNamespacePtrInput {
	return (*managedZoneServiceDirectoryConfigNamespacePtrType)(v)
}

func (*managedZoneServiceDirectoryConfigNamespacePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZoneServiceDirectoryConfigNamespace)(nil)).Elem()
}

func (i *managedZoneServiceDirectoryConfigNamespacePtrType) ToManagedZoneServiceDirectoryConfigNamespacePtrOutput() ManagedZoneServiceDirectoryConfigNamespacePtrOutput {
	return i.ToManagedZoneServiceDirectoryConfigNamespacePtrOutputWithContext(context.Background())
}

func (i *managedZoneServiceDirectoryConfigNamespacePtrType) ToManagedZoneServiceDirectoryConfigNamespacePtrOutputWithContext(ctx context.Context) ManagedZoneServiceDirectoryConfigNamespacePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneServiceDirectoryConfigNamespacePtrOutput)
}

type ManagedZoneServiceDirectoryConfigNamespaceOutput struct{ *pulumi.OutputState }

func (ManagedZoneServiceDirectoryConfigNamespaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneServiceDirectoryConfigNamespace)(nil)).Elem()
}

func (o ManagedZoneServiceDirectoryConfigNamespaceOutput) ToManagedZoneServiceDirectoryConfigNamespaceOutput() ManagedZoneServiceDirectoryConfigNamespaceOutput {
	return o
}

func (o ManagedZoneServiceDirectoryConfigNamespaceOutput) ToManagedZoneServiceDirectoryConfigNamespaceOutputWithContext(ctx context.Context) ManagedZoneServiceDirectoryConfigNamespaceOutput {
	return o
}

func (o ManagedZoneServiceDirectoryConfigNamespaceOutput) ToManagedZoneServiceDirectoryConfigNamespacePtrOutput() ManagedZoneServiceDirectoryConfigNamespacePtrOutput {
	return o.ToManagedZoneServiceDirectoryConfigNamespacePtrOutputWithContext(context.Background())
}

func (o ManagedZoneServiceDirectoryConfigNamespaceOutput) ToManagedZoneServiceDirectoryConfigNamespacePtrOutputWithContext(ctx context.Context) ManagedZoneServiceDirectoryConfigNamespacePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedZoneServiceDirectoryConfigNamespace) *ManagedZoneServiceDirectoryConfigNamespace {
		return &v
	}).(ManagedZoneServiceDirectoryConfigNamespacePtrOutput)
}

// The time that the namespace backing this zone was deleted; an empty string if it still exists. This is in RFC3339 text format. Output only.
func (o ManagedZoneServiceDirectoryConfigNamespaceOutput) DeletionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZoneServiceDirectoryConfigNamespace) *string { return v.DeletionTime }).(pulumi.StringPtrOutput)
}

func (o ManagedZoneServiceDirectoryConfigNamespaceOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZoneServiceDirectoryConfigNamespace) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// The fully qualified URL of the namespace associated with the zone. Format must be https://servicedirectory.googleapis.com/v1/projects/{project}/locations/{location}/namespaces/{namespace}
func (o ManagedZoneServiceDirectoryConfigNamespaceOutput) NamespaceUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZoneServiceDirectoryConfigNamespace) *string { return v.NamespaceUrl }).(pulumi.StringPtrOutput)
}

type ManagedZoneServiceDirectoryConfigNamespacePtrOutput struct{ *pulumi.OutputState }

func (ManagedZoneServiceDirectoryConfigNamespacePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZoneServiceDirectoryConfigNamespace)(nil)).Elem()
}

func (o ManagedZoneServiceDirectoryConfigNamespacePtrOutput) ToManagedZoneServiceDirectoryConfigNamespacePtrOutput() ManagedZoneServiceDirectoryConfigNamespacePtrOutput {
	return o
}

func (o ManagedZoneServiceDirectoryConfigNamespacePtrOutput) ToManagedZoneServiceDirectoryConfigNamespacePtrOutputWithContext(ctx context.Context) ManagedZoneServiceDirectoryConfigNamespacePtrOutput {
	return o
}

func (o ManagedZoneServiceDirectoryConfigNamespacePtrOutput) Elem() ManagedZoneServiceDirectoryConfigNamespaceOutput {
	return o.ApplyT(func(v *ManagedZoneServiceDirectoryConfigNamespace) ManagedZoneServiceDirectoryConfigNamespace {
		if v != nil {
			return *v
		}
		var ret ManagedZoneServiceDirectoryConfigNamespace
		return ret
	}).(ManagedZoneServiceDirectoryConfigNamespaceOutput)
}

// The time that the namespace backing this zone was deleted; an empty string if it still exists. This is in RFC3339 text format. Output only.
func (o ManagedZoneServiceDirectoryConfigNamespacePtrOutput) DeletionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedZoneServiceDirectoryConfigNamespace) *string {
		if v == nil {
			return nil
		}
		return v.DeletionTime
	}).(pulumi.StringPtrOutput)
}

func (o ManagedZoneServiceDirectoryConfigNamespacePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedZoneServiceDirectoryConfigNamespace) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// The fully qualified URL of the namespace associated with the zone. Format must be https://servicedirectory.googleapis.com/v1/projects/{project}/locations/{location}/namespaces/{namespace}
func (o ManagedZoneServiceDirectoryConfigNamespacePtrOutput) NamespaceUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedZoneServiceDirectoryConfigNamespace) *string {
		if v == nil {
			return nil
		}
		return v.NamespaceUrl
	}).(pulumi.StringPtrOutput)
}

type ManagedZoneServiceDirectoryConfigNamespaceResponse struct {
	// The time that the namespace backing this zone was deleted; an empty string if it still exists. This is in RFC3339 text format. Output only.
	DeletionTime string `pulumi:"deletionTime"`
	Kind         string `pulumi:"kind"`
	// The fully qualified URL of the namespace associated with the zone. Format must be https://servicedirectory.googleapis.com/v1/projects/{project}/locations/{location}/namespaces/{namespace}
	NamespaceUrl string `pulumi:"namespaceUrl"`
}

type ManagedZoneServiceDirectoryConfigNamespaceResponseOutput struct{ *pulumi.OutputState }

func (ManagedZoneServiceDirectoryConfigNamespaceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneServiceDirectoryConfigNamespaceResponse)(nil)).Elem()
}

func (o ManagedZoneServiceDirectoryConfigNamespaceResponseOutput) ToManagedZoneServiceDirectoryConfigNamespaceResponseOutput() ManagedZoneServiceDirectoryConfigNamespaceResponseOutput {
	return o
}

func (o ManagedZoneServiceDirectoryConfigNamespaceResponseOutput) ToManagedZoneServiceDirectoryConfigNamespaceResponseOutputWithContext(ctx context.Context) ManagedZoneServiceDirectoryConfigNamespaceResponseOutput {
	return o
}

// The time that the namespace backing this zone was deleted; an empty string if it still exists. This is in RFC3339 text format. Output only.
func (o ManagedZoneServiceDirectoryConfigNamespaceResponseOutput) DeletionTime() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedZoneServiceDirectoryConfigNamespaceResponse) string { return v.DeletionTime }).(pulumi.StringOutput)
}

func (o ManagedZoneServiceDirectoryConfigNamespaceResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedZoneServiceDirectoryConfigNamespaceResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// The fully qualified URL of the namespace associated with the zone. Format must be https://servicedirectory.googleapis.com/v1/projects/{project}/locations/{location}/namespaces/{namespace}
func (o ManagedZoneServiceDirectoryConfigNamespaceResponseOutput) NamespaceUrl() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedZoneServiceDirectoryConfigNamespaceResponse) string { return v.NamespaceUrl }).(pulumi.StringOutput)
}

// Contains information about Service Directory-backed zones.
type ManagedZoneServiceDirectoryConfigResponse struct {
	Kind string `pulumi:"kind"`
	// Contains information about the namespace associated with the zone.
	Namespace ManagedZoneServiceDirectoryConfigNamespaceResponse `pulumi:"namespace"`
}

// Contains information about Service Directory-backed zones.
type ManagedZoneServiceDirectoryConfigResponseOutput struct{ *pulumi.OutputState }

func (ManagedZoneServiceDirectoryConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneServiceDirectoryConfigResponse)(nil)).Elem()
}

func (o ManagedZoneServiceDirectoryConfigResponseOutput) ToManagedZoneServiceDirectoryConfigResponseOutput() ManagedZoneServiceDirectoryConfigResponseOutput {
	return o
}

func (o ManagedZoneServiceDirectoryConfigResponseOutput) ToManagedZoneServiceDirectoryConfigResponseOutputWithContext(ctx context.Context) ManagedZoneServiceDirectoryConfigResponseOutput {
	return o
}

func (o ManagedZoneServiceDirectoryConfigResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedZoneServiceDirectoryConfigResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// Contains information about the namespace associated with the zone.
func (o ManagedZoneServiceDirectoryConfigResponseOutput) Namespace() ManagedZoneServiceDirectoryConfigNamespaceResponseOutput {
	return o.ApplyT(func(v ManagedZoneServiceDirectoryConfigResponse) ManagedZoneServiceDirectoryConfigNamespaceResponse {
		return v.Namespace
	}).(ManagedZoneServiceDirectoryConfigNamespaceResponseOutput)
}

type PolicyAlternativeNameServerConfig struct {
	Kind *string `pulumi:"kind"`
	// Sets an alternative name server for the associated networks. When specified, all DNS queries are forwarded to a name server that you choose. Names such as .internal are not available when an alternative name server is specified.
	TargetNameServers []PolicyAlternativeNameServerConfigTargetNameServer `pulumi:"targetNameServers"`
}

// PolicyAlternativeNameServerConfigInput is an input type that accepts PolicyAlternativeNameServerConfigArgs and PolicyAlternativeNameServerConfigOutput values.
// You can construct a concrete instance of `PolicyAlternativeNameServerConfigInput` via:
//
//	PolicyAlternativeNameServerConfigArgs{...}
type PolicyAlternativeNameServerConfigInput interface {
	pulumi.Input

	ToPolicyAlternativeNameServerConfigOutput() PolicyAlternativeNameServerConfigOutput
	ToPolicyAlternativeNameServerConfigOutputWithContext(context.Context) PolicyAlternativeNameServerConfigOutput
}

type PolicyAlternativeNameServerConfigArgs struct {
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Sets an alternative name server for the associated networks. When specified, all DNS queries are forwarded to a name server that you choose. Names such as .internal are not available when an alternative name server is specified.
	TargetNameServers PolicyAlternativeNameServerConfigTargetNameServerArrayInput `pulumi:"targetNameServers"`
}

func (PolicyAlternativeNameServerConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyAlternativeNameServerConfig)(nil)).Elem()
}

func (i PolicyAlternativeNameServerConfigArgs) ToPolicyAlternativeNameServerConfigOutput() PolicyAlternativeNameServerConfigOutput {
	return i.ToPolicyAlternativeNameServerConfigOutputWithContext(context.Background())
}

func (i PolicyAlternativeNameServerConfigArgs) ToPolicyAlternativeNameServerConfigOutputWithContext(ctx context.Context) PolicyAlternativeNameServerConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyAlternativeNameServerConfigOutput)
}

func (i PolicyAlternativeNameServerConfigArgs) ToPolicyAlternativeNameServerConfigPtrOutput() PolicyAlternativeNameServerConfigPtrOutput {
	return i.ToPolicyAlternativeNameServerConfigPtrOutputWithContext(context.Background())
}

func (i PolicyAlternativeNameServerConfigArgs) ToPolicyAlternativeNameServerConfigPtrOutputWithContext(ctx context.Context) PolicyAlternativeNameServerConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyAlternativeNameServerConfigOutput).ToPolicyAlternativeNameServerConfigPtrOutputWithContext(ctx)
}

// PolicyAlternativeNameServerConfigPtrInput is an input type that accepts PolicyAlternativeNameServerConfigArgs, PolicyAlternativeNameServerConfigPtr and PolicyAlternativeNameServerConfigPtrOutput values.
// You can construct a concrete instance of `PolicyAlternativeNameServerConfigPtrInput` via:
//
//	        PolicyAlternativeNameServerConfigArgs{...}
//
//	or:
//
//	        nil
type PolicyAlternativeNameServerConfigPtrInput interface {
	pulumi.Input

	ToPolicyAlternativeNameServerConfigPtrOutput() PolicyAlternativeNameServerConfigPtrOutput
	ToPolicyAlternativeNameServerConfigPtrOutputWithContext(context.Context) PolicyAlternativeNameServerConfigPtrOutput
}

type policyAlternativeNameServerConfigPtrType PolicyAlternativeNameServerConfigArgs

func PolicyAlternativeNameServerConfigPtr(v *PolicyAlternativeNameServerConfigArgs) PolicyAlternativeNameServerConfigPtrInput {
	return (*policyAlternativeNameServerConfigPtrType)(v)
}

func (*policyAlternativeNameServerConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyAlternativeNameServerConfig)(nil)).Elem()
}

func (i *policyAlternativeNameServerConfigPtrType) ToPolicyAlternativeNameServerConfigPtrOutput() PolicyAlternativeNameServerConfigPtrOutput {
	return i.ToPolicyAlternativeNameServerConfigPtrOutputWithContext(context.Background())
}

func (i *policyAlternativeNameServerConfigPtrType) ToPolicyAlternativeNameServerConfigPtrOutputWithContext(ctx context.Context) PolicyAlternativeNameServerConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyAlternativeNameServerConfigPtrOutput)
}

type PolicyAlternativeNameServerConfigOutput struct{ *pulumi.OutputState }

func (PolicyAlternativeNameServerConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyAlternativeNameServerConfig)(nil)).Elem()
}

func (o PolicyAlternativeNameServerConfigOutput) ToPolicyAlternativeNameServerConfigOutput() PolicyAlternativeNameServerConfigOutput {
	return o
}

func (o PolicyAlternativeNameServerConfigOutput) ToPolicyAlternativeNameServerConfigOutputWithContext(ctx context.Context) PolicyAlternativeNameServerConfigOutput {
	return o
}

func (o PolicyAlternativeNameServerConfigOutput) ToPolicyAlternativeNameServerConfigPtrOutput() PolicyAlternativeNameServerConfigPtrOutput {
	return o.ToPolicyAlternativeNameServerConfigPtrOutputWithContext(context.Background())
}

func (o PolicyAlternativeNameServerConfigOutput) ToPolicyAlternativeNameServerConfigPtrOutputWithContext(ctx context.Context) PolicyAlternativeNameServerConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PolicyAlternativeNameServerConfig) *PolicyAlternativeNameServerConfig {
		return &v
	}).(PolicyAlternativeNameServerConfigPtrOutput)
}

func (o PolicyAlternativeNameServerConfigOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyAlternativeNameServerConfig) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Sets an alternative name server for the associated networks. When specified, all DNS queries are forwarded to a name server that you choose. Names such as .internal are not available when an alternative name server is specified.
func (o PolicyAlternativeNameServerConfigOutput) TargetNameServers() PolicyAlternativeNameServerConfigTargetNameServerArrayOutput {
	return o.ApplyT(func(v PolicyAlternativeNameServerConfig) []PolicyAlternativeNameServerConfigTargetNameServer {
		return v.TargetNameServers
	}).(PolicyAlternativeNameServerConfigTargetNameServerArrayOutput)
}

type PolicyAlternativeNameServerConfigPtrOutput struct{ *pulumi.OutputState }

func (PolicyAlternativeNameServerConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyAlternativeNameServerConfig)(nil)).Elem()
}

func (o PolicyAlternativeNameServerConfigPtrOutput) ToPolicyAlternativeNameServerConfigPtrOutput() PolicyAlternativeNameServerConfigPtrOutput {
	return o
}

func (o PolicyAlternativeNameServerConfigPtrOutput) ToPolicyAlternativeNameServerConfigPtrOutputWithContext(ctx context.Context) PolicyAlternativeNameServerConfigPtrOutput {
	return o
}

func (o PolicyAlternativeNameServerConfigPtrOutput) Elem() PolicyAlternativeNameServerConfigOutput {
	return o.ApplyT(func(v *PolicyAlternativeNameServerConfig) PolicyAlternativeNameServerConfig {
		if v != nil {
			return *v
		}
		var ret PolicyAlternativeNameServerConfig
		return ret
	}).(PolicyAlternativeNameServerConfigOutput)
}

func (o PolicyAlternativeNameServerConfigPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyAlternativeNameServerConfig) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Sets an alternative name server for the associated networks. When specified, all DNS queries are forwarded to a name server that you choose. Names such as .internal are not available when an alternative name server is specified.
func (o PolicyAlternativeNameServerConfigPtrOutput) TargetNameServers() PolicyAlternativeNameServerConfigTargetNameServerArrayOutput {
	return o.ApplyT(func(v *PolicyAlternativeNameServerConfig) []PolicyAlternativeNameServerConfigTargetNameServer {
		if v == nil {
			return nil
		}
		return v.TargetNameServers
	}).(PolicyAlternativeNameServerConfigTargetNameServerArrayOutput)
}

type PolicyAlternativeNameServerConfigResponse struct {
	Kind string `pulumi:"kind"`
	// Sets an alternative name server for the associated networks. When specified, all DNS queries are forwarded to a name server that you choose. Names such as .internal are not available when an alternative name server is specified.
	TargetNameServers []PolicyAlternativeNameServerConfigTargetNameServerResponse `pulumi:"targetNameServers"`
}

type PolicyAlternativeNameServerConfigResponseOutput struct{ *pulumi.OutputState }

func (PolicyAlternativeNameServerConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyAlternativeNameServerConfigResponse)(nil)).Elem()
}

func (o PolicyAlternativeNameServerConfigResponseOutput) ToPolicyAlternativeNameServerConfigResponseOutput() PolicyAlternativeNameServerConfigResponseOutput {
	return o
}

func (o PolicyAlternativeNameServerConfigResponseOutput) ToPolicyAlternativeNameServerConfigResponseOutputWithContext(ctx context.Context) PolicyAlternativeNameServerConfigResponseOutput {
	return o
}

func (o PolicyAlternativeNameServerConfigResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyAlternativeNameServerConfigResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// Sets an alternative name server for the associated networks. When specified, all DNS queries are forwarded to a name server that you choose. Names such as .internal are not available when an alternative name server is specified.
func (o PolicyAlternativeNameServerConfigResponseOutput) TargetNameServers() PolicyAlternativeNameServerConfigTargetNameServerResponseArrayOutput {
	return o.ApplyT(func(v PolicyAlternativeNameServerConfigResponse) []PolicyAlternativeNameServerConfigTargetNameServerResponse {
		return v.TargetNameServers
	}).(PolicyAlternativeNameServerConfigTargetNameServerResponseArrayOutput)
}

type PolicyAlternativeNameServerConfigTargetNameServer struct {
	// Forwarding path for this TargetNameServer. If unset or set to DEFAULT, Cloud DNS makes forwarding decisions based on address ranges; that is, RFC1918 addresses go to the VPC network, non-RFC1918 addresses go to the internet. When set to PRIVATE, Cloud DNS always sends queries through the VPC network for this target.
	ForwardingPath *PolicyAlternativeNameServerConfigTargetNameServerForwardingPath `pulumi:"forwardingPath"`
	// IPv4 address to forward queries to.
	Ipv4Address *string `pulumi:"ipv4Address"`
	// IPv6 address to forward to. Does not accept both fields (ipv4 & ipv6) being populated. Public preview as of November 2022.
	Ipv6Address *string `pulumi:"ipv6Address"`
	Kind        *string `pulumi:"kind"`
}

// PolicyAlternativeNameServerConfigTargetNameServerInput is an input type that accepts PolicyAlternativeNameServerConfigTargetNameServerArgs and PolicyAlternativeNameServerConfigTargetNameServerOutput values.
// You can construct a concrete instance of `PolicyAlternativeNameServerConfigTargetNameServerInput` via:
//
//	PolicyAlternativeNameServerConfigTargetNameServerArgs{...}
type PolicyAlternativeNameServerConfigTargetNameServerInput interface {
	pulumi.Input

	ToPolicyAlternativeNameServerConfigTargetNameServerOutput() PolicyAlternativeNameServerConfigTargetNameServerOutput
	ToPolicyAlternativeNameServerConfigTargetNameServerOutputWithContext(context.Context) PolicyAlternativeNameServerConfigTargetNameServerOutput
}

type PolicyAlternativeNameServerConfigTargetNameServerArgs struct {
	// Forwarding path for this TargetNameServer. If unset or set to DEFAULT, Cloud DNS makes forwarding decisions based on address ranges; that is, RFC1918 addresses go to the VPC network, non-RFC1918 addresses go to the internet. When set to PRIVATE, Cloud DNS always sends queries through the VPC network for this target.
	ForwardingPath PolicyAlternativeNameServerConfigTargetNameServerForwardingPathPtrInput `pulumi:"forwardingPath"`
	// IPv4 address to forward queries to.
	Ipv4Address pulumi.StringPtrInput `pulumi:"ipv4Address"`
	// IPv6 address to forward to. Does not accept both fields (ipv4 & ipv6) being populated. Public preview as of November 2022.
	Ipv6Address pulumi.StringPtrInput `pulumi:"ipv6Address"`
	Kind        pulumi.StringPtrInput `pulumi:"kind"`
}

func (PolicyAlternativeNameServerConfigTargetNameServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyAlternativeNameServerConfigTargetNameServer)(nil)).Elem()
}

func (i PolicyAlternativeNameServerConfigTargetNameServerArgs) ToPolicyAlternativeNameServerConfigTargetNameServerOutput() PolicyAlternativeNameServerConfigTargetNameServerOutput {
	return i.ToPolicyAlternativeNameServerConfigTargetNameServerOutputWithContext(context.Background())
}

func (i PolicyAlternativeNameServerConfigTargetNameServerArgs) ToPolicyAlternativeNameServerConfigTargetNameServerOutputWithContext(ctx context.Context) PolicyAlternativeNameServerConfigTargetNameServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyAlternativeNameServerConfigTargetNameServerOutput)
}

// PolicyAlternativeNameServerConfigTargetNameServerArrayInput is an input type that accepts PolicyAlternativeNameServerConfigTargetNameServerArray and PolicyAlternativeNameServerConfigTargetNameServerArrayOutput values.
// You can construct a concrete instance of `PolicyAlternativeNameServerConfigTargetNameServerArrayInput` via:
//
//	PolicyAlternativeNameServerConfigTargetNameServerArray{ PolicyAlternativeNameServerConfigTargetNameServerArgs{...} }
type PolicyAlternativeNameServerConfigTargetNameServerArrayInput interface {
	pulumi.Input

	ToPolicyAlternativeNameServerConfigTargetNameServerArrayOutput() PolicyAlternativeNameServerConfigTargetNameServerArrayOutput
	ToPolicyAlternativeNameServerConfigTargetNameServerArrayOutputWithContext(context.Context) PolicyAlternativeNameServerConfigTargetNameServerArrayOutput
}

type PolicyAlternativeNameServerConfigTargetNameServerArray []PolicyAlternativeNameServerConfigTargetNameServerInput

func (PolicyAlternativeNameServerConfigTargetNameServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyAlternativeNameServerConfigTargetNameServer)(nil)).Elem()
}

func (i PolicyAlternativeNameServerConfigTargetNameServerArray) ToPolicyAlternativeNameServerConfigTargetNameServerArrayOutput() PolicyAlternativeNameServerConfigTargetNameServerArrayOutput {
	return i.ToPolicyAlternativeNameServerConfigTargetNameServerArrayOutputWithContext(context.Background())
}

func (i PolicyAlternativeNameServerConfigTargetNameServerArray) ToPolicyAlternativeNameServerConfigTargetNameServerArrayOutputWithContext(ctx context.Context) PolicyAlternativeNameServerConfigTargetNameServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyAlternativeNameServerConfigTargetNameServerArrayOutput)
}

type PolicyAlternativeNameServerConfigTargetNameServerOutput struct{ *pulumi.OutputState }

func (PolicyAlternativeNameServerConfigTargetNameServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyAlternativeNameServerConfigTargetNameServer)(nil)).Elem()
}

func (o PolicyAlternativeNameServerConfigTargetNameServerOutput) ToPolicyAlternativeNameServerConfigTargetNameServerOutput() PolicyAlternativeNameServerConfigTargetNameServerOutput {
	return o
}

func (o PolicyAlternativeNameServerConfigTargetNameServerOutput) ToPolicyAlternativeNameServerConfigTargetNameServerOutputWithContext(ctx context.Context) PolicyAlternativeNameServerConfigTargetNameServerOutput {
	return o
}

// Forwarding path for this TargetNameServer. If unset or set to DEFAULT, Cloud DNS makes forwarding decisions based on address ranges; that is, RFC1918 addresses go to the VPC network, non-RFC1918 addresses go to the internet. When set to PRIVATE, Cloud DNS always sends queries through the VPC network for this target.
func (o PolicyAlternativeNameServerConfigTargetNameServerOutput) ForwardingPath() PolicyAlternativeNameServerConfigTargetNameServerForwardingPathPtrOutput {
	return o.ApplyT(func(v PolicyAlternativeNameServerConfigTargetNameServer) *PolicyAlternativeNameServerConfigTargetNameServerForwardingPath {
		return v.ForwardingPath
	}).(PolicyAlternativeNameServerConfigTargetNameServerForwardingPathPtrOutput)
}

// IPv4 address to forward queries to.
func (o PolicyAlternativeNameServerConfigTargetNameServerOutput) Ipv4Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyAlternativeNameServerConfigTargetNameServer) *string { return v.Ipv4Address }).(pulumi.StringPtrOutput)
}

// IPv6 address to forward to. Does not accept both fields (ipv4 & ipv6) being populated. Public preview as of November 2022.
func (o PolicyAlternativeNameServerConfigTargetNameServerOutput) Ipv6Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyAlternativeNameServerConfigTargetNameServer) *string { return v.Ipv6Address }).(pulumi.StringPtrOutput)
}

func (o PolicyAlternativeNameServerConfigTargetNameServerOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyAlternativeNameServerConfigTargetNameServer) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

type PolicyAlternativeNameServerConfigTargetNameServerArrayOutput struct{ *pulumi.OutputState }

func (PolicyAlternativeNameServerConfigTargetNameServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyAlternativeNameServerConfigTargetNameServer)(nil)).Elem()
}

func (o PolicyAlternativeNameServerConfigTargetNameServerArrayOutput) ToPolicyAlternativeNameServerConfigTargetNameServerArrayOutput() PolicyAlternativeNameServerConfigTargetNameServerArrayOutput {
	return o
}

func (o PolicyAlternativeNameServerConfigTargetNameServerArrayOutput) ToPolicyAlternativeNameServerConfigTargetNameServerArrayOutputWithContext(ctx context.Context) PolicyAlternativeNameServerConfigTargetNameServerArrayOutput {
	return o
}

func (o PolicyAlternativeNameServerConfigTargetNameServerArrayOutput) Index(i pulumi.IntInput) PolicyAlternativeNameServerConfigTargetNameServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyAlternativeNameServerConfigTargetNameServer {
		return vs[0].([]PolicyAlternativeNameServerConfigTargetNameServer)[vs[1].(int)]
	}).(PolicyAlternativeNameServerConfigTargetNameServerOutput)
}

type PolicyAlternativeNameServerConfigTargetNameServerResponse struct {
	// Forwarding path for this TargetNameServer. If unset or set to DEFAULT, Cloud DNS makes forwarding decisions based on address ranges; that is, RFC1918 addresses go to the VPC network, non-RFC1918 addresses go to the internet. When set to PRIVATE, Cloud DNS always sends queries through the VPC network for this target.
	ForwardingPath string `pulumi:"forwardingPath"`
	// IPv4 address to forward queries to.
	Ipv4Address string `pulumi:"ipv4Address"`
	// IPv6 address to forward to. Does not accept both fields (ipv4 & ipv6) being populated. Public preview as of November 2022.
	Ipv6Address string `pulumi:"ipv6Address"`
	Kind        string `pulumi:"kind"`
}

type PolicyAlternativeNameServerConfigTargetNameServerResponseOutput struct{ *pulumi.OutputState }

func (PolicyAlternativeNameServerConfigTargetNameServerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyAlternativeNameServerConfigTargetNameServerResponse)(nil)).Elem()
}

func (o PolicyAlternativeNameServerConfigTargetNameServerResponseOutput) ToPolicyAlternativeNameServerConfigTargetNameServerResponseOutput() PolicyAlternativeNameServerConfigTargetNameServerResponseOutput {
	return o
}

func (o PolicyAlternativeNameServerConfigTargetNameServerResponseOutput) ToPolicyAlternativeNameServerConfigTargetNameServerResponseOutputWithContext(ctx context.Context) PolicyAlternativeNameServerConfigTargetNameServerResponseOutput {
	return o
}

// Forwarding path for this TargetNameServer. If unset or set to DEFAULT, Cloud DNS makes forwarding decisions based on address ranges; that is, RFC1918 addresses go to the VPC network, non-RFC1918 addresses go to the internet. When set to PRIVATE, Cloud DNS always sends queries through the VPC network for this target.
func (o PolicyAlternativeNameServerConfigTargetNameServerResponseOutput) ForwardingPath() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyAlternativeNameServerConfigTargetNameServerResponse) string { return v.ForwardingPath }).(pulumi.StringOutput)
}

// IPv4 address to forward queries to.
func (o PolicyAlternativeNameServerConfigTargetNameServerResponseOutput) Ipv4Address() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyAlternativeNameServerConfigTargetNameServerResponse) string { return v.Ipv4Address }).(pulumi.StringOutput)
}

// IPv6 address to forward to. Does not accept both fields (ipv4 & ipv6) being populated. Public preview as of November 2022.
func (o PolicyAlternativeNameServerConfigTargetNameServerResponseOutput) Ipv6Address() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyAlternativeNameServerConfigTargetNameServerResponse) string { return v.Ipv6Address }).(pulumi.StringOutput)
}

func (o PolicyAlternativeNameServerConfigTargetNameServerResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyAlternativeNameServerConfigTargetNameServerResponse) string { return v.Kind }).(pulumi.StringOutput)
}

type PolicyAlternativeNameServerConfigTargetNameServerResponseArrayOutput struct{ *pulumi.OutputState }

func (PolicyAlternativeNameServerConfigTargetNameServerResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyAlternativeNameServerConfigTargetNameServerResponse)(nil)).Elem()
}

func (o PolicyAlternativeNameServerConfigTargetNameServerResponseArrayOutput) ToPolicyAlternativeNameServerConfigTargetNameServerResponseArrayOutput() PolicyAlternativeNameServerConfigTargetNameServerResponseArrayOutput {
	return o
}

func (o PolicyAlternativeNameServerConfigTargetNameServerResponseArrayOutput) ToPolicyAlternativeNameServerConfigTargetNameServerResponseArrayOutputWithContext(ctx context.Context) PolicyAlternativeNameServerConfigTargetNameServerResponseArrayOutput {
	return o
}

func (o PolicyAlternativeNameServerConfigTargetNameServerResponseArrayOutput) Index(i pulumi.IntInput) PolicyAlternativeNameServerConfigTargetNameServerResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyAlternativeNameServerConfigTargetNameServerResponse {
		return vs[0].([]PolicyAlternativeNameServerConfigTargetNameServerResponse)[vs[1].(int)]
	}).(PolicyAlternativeNameServerConfigTargetNameServerResponseOutput)
}

type PolicyNetwork struct {
	Kind *string `pulumi:"kind"`
	// The fully qualified URL of the VPC network to bind to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
	NetworkUrl *string `pulumi:"networkUrl"`
}

// PolicyNetworkInput is an input type that accepts PolicyNetworkArgs and PolicyNetworkOutput values.
// You can construct a concrete instance of `PolicyNetworkInput` via:
//
//	PolicyNetworkArgs{...}
type PolicyNetworkInput interface {
	pulumi.Input

	ToPolicyNetworkOutput() PolicyNetworkOutput
	ToPolicyNetworkOutputWithContext(context.Context) PolicyNetworkOutput
}

type PolicyNetworkArgs struct {
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// The fully qualified URL of the VPC network to bind to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
	NetworkUrl pulumi.StringPtrInput `pulumi:"networkUrl"`
}

func (PolicyNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyNetwork)(nil)).Elem()
}

func (i PolicyNetworkArgs) ToPolicyNetworkOutput() PolicyNetworkOutput {
	return i.ToPolicyNetworkOutputWithContext(context.Background())
}

func (i PolicyNetworkArgs) ToPolicyNetworkOutputWithContext(ctx context.Context) PolicyNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyNetworkOutput)
}

// PolicyNetworkArrayInput is an input type that accepts PolicyNetworkArray and PolicyNetworkArrayOutput values.
// You can construct a concrete instance of `PolicyNetworkArrayInput` via:
//
//	PolicyNetworkArray{ PolicyNetworkArgs{...} }
type PolicyNetworkArrayInput interface {
	pulumi.Input

	ToPolicyNetworkArrayOutput() PolicyNetworkArrayOutput
	ToPolicyNetworkArrayOutputWithContext(context.Context) PolicyNetworkArrayOutput
}

type PolicyNetworkArray []PolicyNetworkInput

func (PolicyNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyNetwork)(nil)).Elem()
}

func (i PolicyNetworkArray) ToPolicyNetworkArrayOutput() PolicyNetworkArrayOutput {
	return i.ToPolicyNetworkArrayOutputWithContext(context.Background())
}

func (i PolicyNetworkArray) ToPolicyNetworkArrayOutputWithContext(ctx context.Context) PolicyNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyNetworkArrayOutput)
}

type PolicyNetworkOutput struct{ *pulumi.OutputState }

func (PolicyNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyNetwork)(nil)).Elem()
}

func (o PolicyNetworkOutput) ToPolicyNetworkOutput() PolicyNetworkOutput {
	return o
}

func (o PolicyNetworkOutput) ToPolicyNetworkOutputWithContext(ctx context.Context) PolicyNetworkOutput {
	return o
}

func (o PolicyNetworkOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyNetwork) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// The fully qualified URL of the VPC network to bind to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
func (o PolicyNetworkOutput) NetworkUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyNetwork) *string { return v.NetworkUrl }).(pulumi.StringPtrOutput)
}

type PolicyNetworkArrayOutput struct{ *pulumi.OutputState }

func (PolicyNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyNetwork)(nil)).Elem()
}

func (o PolicyNetworkArrayOutput) ToPolicyNetworkArrayOutput() PolicyNetworkArrayOutput {
	return o
}

func (o PolicyNetworkArrayOutput) ToPolicyNetworkArrayOutputWithContext(ctx context.Context) PolicyNetworkArrayOutput {
	return o
}

func (o PolicyNetworkArrayOutput) Index(i pulumi.IntInput) PolicyNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyNetwork {
		return vs[0].([]PolicyNetwork)[vs[1].(int)]
	}).(PolicyNetworkOutput)
}

type PolicyNetworkResponse struct {
	Kind string `pulumi:"kind"`
	// The fully qualified URL of the VPC network to bind to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
	NetworkUrl string `pulumi:"networkUrl"`
}

type PolicyNetworkResponseOutput struct{ *pulumi.OutputState }

func (PolicyNetworkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyNetworkResponse)(nil)).Elem()
}

func (o PolicyNetworkResponseOutput) ToPolicyNetworkResponseOutput() PolicyNetworkResponseOutput {
	return o
}

func (o PolicyNetworkResponseOutput) ToPolicyNetworkResponseOutputWithContext(ctx context.Context) PolicyNetworkResponseOutput {
	return o
}

func (o PolicyNetworkResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyNetworkResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// The fully qualified URL of the VPC network to bind to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
func (o PolicyNetworkResponseOutput) NetworkUrl() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyNetworkResponse) string { return v.NetworkUrl }).(pulumi.StringOutput)
}

type PolicyNetworkResponseArrayOutput struct{ *pulumi.OutputState }

func (PolicyNetworkResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyNetworkResponse)(nil)).Elem()
}

func (o PolicyNetworkResponseArrayOutput) ToPolicyNetworkResponseArrayOutput() PolicyNetworkResponseArrayOutput {
	return o
}

func (o PolicyNetworkResponseArrayOutput) ToPolicyNetworkResponseArrayOutputWithContext(ctx context.Context) PolicyNetworkResponseArrayOutput {
	return o
}

func (o PolicyNetworkResponseArrayOutput) Index(i pulumi.IntInput) PolicyNetworkResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyNetworkResponse {
		return vs[0].([]PolicyNetworkResponse)[vs[1].(int)]
	}).(PolicyNetworkResponseOutput)
}

// A RRSetRoutingPolicy represents ResourceRecordSet data that is returned dynamically with the response varying based on configured properties such as geolocation or by weighted random selection.
type RRSetRoutingPolicy struct {
	Geo           *RRSetRoutingPolicyGeoPolicy           `pulumi:"geo"`
	GeoPolicy     *RRSetRoutingPolicyGeoPolicy           `pulumi:"geoPolicy"`
	Kind          *string                                `pulumi:"kind"`
	PrimaryBackup *RRSetRoutingPolicyPrimaryBackupPolicy `pulumi:"primaryBackup"`
	Wrr           *RRSetRoutingPolicyWrrPolicy           `pulumi:"wrr"`
	WrrPolicy     *RRSetRoutingPolicyWrrPolicy           `pulumi:"wrrPolicy"`
}

// RRSetRoutingPolicyInput is an input type that accepts RRSetRoutingPolicyArgs and RRSetRoutingPolicyOutput values.
// You can construct a concrete instance of `RRSetRoutingPolicyInput` via:
//
//	RRSetRoutingPolicyArgs{...}
type RRSetRoutingPolicyInput interface {
	pulumi.Input

	ToRRSetRoutingPolicyOutput() RRSetRoutingPolicyOutput
	ToRRSetRoutingPolicyOutputWithContext(context.Context) RRSetRoutingPolicyOutput
}

// A RRSetRoutingPolicy represents ResourceRecordSet data that is returned dynamically with the response varying based on configured properties such as geolocation or by weighted random selection.
type RRSetRoutingPolicyArgs struct {
	Geo           RRSetRoutingPolicyGeoPolicyPtrInput           `pulumi:"geo"`
	GeoPolicy     RRSetRoutingPolicyGeoPolicyPtrInput           `pulumi:"geoPolicy"`
	Kind          pulumi.StringPtrInput                         `pulumi:"kind"`
	PrimaryBackup RRSetRoutingPolicyPrimaryBackupPolicyPtrInput `pulumi:"primaryBackup"`
	Wrr           RRSetRoutingPolicyWrrPolicyPtrInput           `pulumi:"wrr"`
	WrrPolicy     RRSetRoutingPolicyWrrPolicyPtrInput           `pulumi:"wrrPolicy"`
}

func (RRSetRoutingPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RRSetRoutingPolicy)(nil)).Elem()
}

func (i RRSetRoutingPolicyArgs) ToRRSetRoutingPolicyOutput() RRSetRoutingPolicyOutput {
	return i.ToRRSetRoutingPolicyOutputWithContext(context.Background())
}

func (i RRSetRoutingPolicyArgs) ToRRSetRoutingPolicyOutputWithContext(ctx context.Context) RRSetRoutingPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RRSetRoutingPolicyOutput)
}

func (i RRSetRoutingPolicyArgs) ToRRSetRoutingPolicyPtrOutput() RRSetRoutingPolicyPtrOutput {
	return i.ToRRSetRoutingPolicyPtrOutputWithContext(context.Background())
}

func (i RRSetRoutingPolicyArgs) ToRRSetRoutingPolicyPtrOutputWithContext(ctx context.Context) RRSetRoutingPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RRSetRoutingPolicyOutput).ToRRSetRoutingPolicyPtrOutputWithContext(ctx)
}

// RRSetRoutingPolicyPtrInput is an input type that accepts RRSetRoutingPolicyArgs, RRSetRoutingPolicyPtr and RRSetRoutingPolicyPtrOutput values.
// You can construct a concrete instance of `RRSetRoutingPolicyPtrInput` via:
//
//	        RRSetRoutingPolicyArgs{...}
//
//	or:
//
//	        nil
type RRSetRoutingPolicyPtrInput interface {
	pulumi.Input

	ToRRSetRoutingPolicyPtrOutput() RRSetRoutingPolicyPtrOutput
	ToRRSetRoutingPolicyPtrOutputWithContext(context.Context) RRSetRoutingPolicyPtrOutput
}

type rrsetRoutingPolicyPtrType RRSetRoutingPolicyArgs

func RRSetRoutingPolicyPtr(v *RRSetRoutingPolicyArgs) RRSetRoutingPolicyPtrInput {
	return (*rrsetRoutingPolicyPtrType)(v)
}

func (*rrsetRoutingPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RRSetRoutingPolicy)(nil)).Elem()
}

func (i *rrsetRoutingPolicyPtrType) ToRRSetRoutingPolicyPtrOutput() RRSetRoutingPolicyPtrOutput {
	return i.ToRRSetRoutingPolicyPtrOutputWithContext(context.Background())
}

func (i *rrsetRoutingPolicyPtrType) ToRRSetRoutingPolicyPtrOutputWithContext(ctx context.Context) RRSetRoutingPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RRSetRoutingPolicyPtrOutput)
}

// A RRSetRoutingPolicy represents ResourceRecordSet data that is returned dynamically with the response varying based on configured properties such as geolocation or by weighted random selection.
type RRSetRoutingPolicyOutput struct{ *pulumi.OutputState }

func (RRSetRoutingPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RRSetRoutingPolicy)(nil)).Elem()
}

func (o RRSetRoutingPolicyOutput) ToRRSetRoutingPolicyOutput() RRSetRoutingPolicyOutput {
	return o
}

func (o RRSetRoutingPolicyOutput) ToRRSetRoutingPolicyOutputWithContext(ctx context.Context) RRSetRoutingPolicyOutput {
	return o
}

func (o RRSetRoutingPolicyOutput) ToRRSetRoutingPolicyPtrOutput() RRSetRoutingPolicyPtrOutput {
	return o.ToRRSetRoutingPolicyPtrOutputWithContext(context.Background())
}

func (o RRSetRoutingPolicyOutput) ToRRSetRoutingPolicyPtrOutputWithContext(ctx context.Context) RRSetRoutingPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RRSetRoutingPolicy) *RRSetRoutingPolicy {
		return &v
	}).(RRSetRoutingPolicyPtrOutput)
}

func (o RRSetRoutingPolicyOutput) Geo() RRSetRoutingPolicyGeoPolicyPtrOutput {
	return o.ApplyT(func(v RRSetRoutingPolicy) *RRSetRoutingPolicyGeoPolicy { return v.Geo }).(RRSetRoutingPolicyGeoPolicyPtrOutput)
}

func (o RRSetRoutingPolicyOutput) GeoPolicy() RRSetRoutingPolicyGeoPolicyPtrOutput {
	return o.ApplyT(func(v RRSetRoutingPolicy) *RRSetRoutingPolicyGeoPolicy { return v.GeoPolicy }).(RRSetRoutingPolicyGeoPolicyPtrOutput)
}

func (o RRSetRoutingPolicyOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RRSetRoutingPolicy) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o RRSetRoutingPolicyOutput) PrimaryBackup() RRSetRoutingPolicyPrimaryBackupPolicyPtrOutput {
	return o.ApplyT(func(v RRSetRoutingPolicy) *RRSetRoutingPolicyPrimaryBackupPolicy { return v.PrimaryBackup }).(RRSetRoutingPolicyPrimaryBackupPolicyPtrOutput)
}

func (o RRSetRoutingPolicyOutput) Wrr() RRSetRoutingPolicyWrrPolicyPtrOutput {
	return o.ApplyT(func(v RRSetRoutingPolicy) *RRSetRoutingPolicyWrrPolicy { return v.Wrr }).(RRSetRoutingPolicyWrrPolicyPtrOutput)
}

func (o RRSetRoutingPolicyOutput) WrrPolicy() RRSetRoutingPolicyWrrPolicyPtrOutput {
	return o.ApplyT(func(v RRSetRoutingPolicy) *RRSetRoutingPolicyWrrPolicy { return v.WrrPolicy }).(RRSetRoutingPolicyWrrPolicyPtrOutput)
}

type RRSetRoutingPolicyPtrOutput struct{ *pulumi.OutputState }

func (RRSetRoutingPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RRSetRoutingPolicy)(nil)).Elem()
}

func (o RRSetRoutingPolicyPtrOutput) ToRRSetRoutingPolicyPtrOutput() RRSetRoutingPolicyPtrOutput {
	return o
}

func (o RRSetRoutingPolicyPtrOutput) ToRRSetRoutingPolicyPtrOutputWithContext(ctx context.Context) RRSetRoutingPolicyPtrOutput {
	return o
}

func (o RRSetRoutingPolicyPtrOutput) Elem() RRSetRoutingPolicyOutput {
	return o.ApplyT(func(v *RRSetRoutingPolicy) RRSetRoutingPolicy {
		if v != nil {
			return *v
		}
		var ret RRSetRoutingPolicy
		return ret
	}).(RRSetRoutingPolicyOutput)
}

func (o RRSetRoutingPolicyPtrOutput) Geo() RRSetRoutingPolicyGeoPolicyPtrOutput {
	return o.ApplyT(func(v *RRSetRoutingPolicy) *RRSetRoutingPolicyGeoPolicy {
		if v == nil {
			return nil
		}
		return v.Geo
	}).(RRSetRoutingPolicyGeoPolicyPtrOutput)
}

func (o RRSetRoutingPolicyPtrOutput) GeoPolicy() RRSetRoutingPolicyGeoPolicyPtrOutput {
	return o.ApplyT(func(v *RRSetRoutingPolicy) *RRSetRoutingPolicyGeoPolicy {
		if v == nil {
			return nil
		}
		return v.GeoPolicy
	}).(RRSetRoutingPolicyGeoPolicyPtrOutput)
}

func (o RRSetRoutingPolicyPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RRSetRoutingPolicy) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

func (o RRSetRoutingPolicyPtrOutput) PrimaryBackup() RRSetRoutingPolicyPrimaryBackupPolicyPtrOutput {
	return o.ApplyT(func(v *RRSetRoutingPolicy) *RRSetRoutingPolicyPrimaryBackupPolicy {
		if v == nil {
			return nil
		}
		return v.PrimaryBackup
	}).(RRSetRoutingPolicyPrimaryBackupPolicyPtrOutput)
}

func (o RRSetRoutingPolicyPtrOutput) Wrr() RRSetRoutingPolicyWrrPolicyPtrOutput {
	return o.ApplyT(func(v *RRSetRoutingPolicy) *RRSetRoutingPolicyWrrPolicy {
		if v == nil {
			return nil
		}
		return v.Wrr
	}).(RRSetRoutingPolicyWrrPolicyPtrOutput)
}

func (o RRSetRoutingPolicyPtrOutput) WrrPolicy() RRSetRoutingPolicyWrrPolicyPtrOutput {
	return o.ApplyT(func(v *RRSetRoutingPolicy) *RRSetRoutingPolicyWrrPolicy {
		if v == nil {
			return nil
		}
		return v.WrrPolicy
	}).(RRSetRoutingPolicyWrrPolicyPtrOutput)
}

// Configures a RRSetRoutingPolicy that routes based on the geo location of the querying user.
type RRSetRoutingPolicyGeoPolicy struct {
	// Without fencing, if health check fails for all configured items in the current geo bucket, we failover to the next nearest geo bucket. With fencing, if health checking is enabled, as long as some targets in the current geo bucket are healthy, we return only the healthy targets. However, if all targets are unhealthy, we don't failover to the next nearest bucket; instead, we return all the items in the current bucket even when all targets are unhealthy.
	EnableFencing *bool `pulumi:"enableFencing"`
	// The primary geo routing configuration. If there are multiple items with the same location, an error is returned instead.
	Items []RRSetRoutingPolicyGeoPolicyGeoPolicyItem `pulumi:"items"`
	Kind  *string                                    `pulumi:"kind"`
}

// RRSetRoutingPolicyGeoPolicyInput is an input type that accepts RRSetRoutingPolicyGeoPolicyArgs and RRSetRoutingPolicyGeoPolicyOutput values.
// You can construct a concrete instance of `RRSetRoutingPolicyGeoPolicyInput` via:
//
//	RRSetRoutingPolicyGeoPolicyArgs{...}
type RRSetRoutingPolicyGeoPolicyInput interface {
	pulumi.Input

	ToRRSetRoutingPolicyGeoPolicyOutput() RRSetRoutingPolicyGeoPolicyOutput
	ToRRSetRoutingPolicyGeoPolicyOutputWithContext(context.Context) RRSetRoutingPolicyGeoPolicyOutput
}

// Configures a RRSetRoutingPolicy that routes based on the geo location of the querying user.
type RRSetRoutingPolicyGeoPolicyArgs struct {
	// Without fencing, if health check fails for all configured items in the current geo bucket, we failover to the next nearest geo bucket. With fencing, if health checking is enabled, as long as some targets in the current geo bucket are healthy, we return only the healthy targets. However, if all targets are unhealthy, we don't failover to the next nearest bucket; instead, we return all the items in the current bucket even when all targets are unhealthy.
	EnableFencing pulumi.BoolPtrInput `pulumi:"enableFencing"`
	// The primary geo routing configuration. If there are multiple items with the same location, an error is returned instead.
	Items RRSetRoutingPolicyGeoPolicyGeoPolicyItemArrayInput `pulumi:"items"`
	Kind  pulumi.StringPtrInput                              `pulumi:"kind"`
}

func (RRSetRoutingPolicyGeoPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RRSetRoutingPolicyGeoPolicy)(nil)).Elem()
}

func (i RRSetRoutingPolicyGeoPolicyArgs) ToRRSetRoutingPolicyGeoPolicyOutput() RRSetRoutingPolicyGeoPolicyOutput {
	return i.ToRRSetRoutingPolicyGeoPolicyOutputWithContext(context.Background())
}

func (i RRSetRoutingPolicyGeoPolicyArgs) ToRRSetRoutingPolicyGeoPolicyOutputWithContext(ctx context.Context) RRSetRoutingPolicyGeoPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RRSetRoutingPolicyGeoPolicyOutput)
}

func (i RRSetRoutingPolicyGeoPolicyArgs) ToRRSetRoutingPolicyGeoPolicyPtrOutput() RRSetRoutingPolicyGeoPolicyPtrOutput {
	return i.ToRRSetRoutingPolicyGeoPolicyPtrOutputWithContext(context.Background())
}

func (i RRSetRoutingPolicyGeoPolicyArgs) ToRRSetRoutingPolicyGeoPolicyPtrOutputWithContext(ctx context.Context) RRSetRoutingPolicyGeoPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RRSetRoutingPolicyGeoPolicyOutput).ToRRSetRoutingPolicyGeoPolicyPtrOutputWithContext(ctx)
}

// RRSetRoutingPolicyGeoPolicyPtrInput is an input type that accepts RRSetRoutingPolicyGeoPolicyArgs, RRSetRoutingPolicyGeoPolicyPtr and RRSetRoutingPolicyGeoPolicyPtrOutput values.
// You can construct a concrete instance of `RRSetRoutingPolicyGeoPolicyPtrInput` via:
//
//	        RRSetRoutingPolicyGeoPolicyArgs{...}
//
//	or:
//
//	        nil
type RRSetRoutingPolicyGeoPolicyPtrInput interface {
	pulumi.Input

	ToRRSetRoutingPolicyGeoPolicyPtrOutput() RRSetRoutingPolicyGeoPolicyPtrOutput
	ToRRSetRoutingPolicyGeoPolicyPtrOutputWithContext(context.Context) RRSetRoutingPolicyGeoPolicyPtrOutput
}

type rrsetRoutingPolicyGeoPolicyPtrType RRSetRoutingPolicyGeoPolicyArgs

func RRSetRoutingPolicyGeoPolicyPtr(v *RRSetRoutingPolicyGeoPolicyArgs) RRSetRoutingPolicyGeoPolicyPtrInput {
	return (*rrsetRoutingPolicyGeoPolicyPtrType)(v)
}

func (*rrsetRoutingPolicyGeoPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RRSetRoutingPolicyGeoPolicy)(nil)).Elem()
}

func (i *rrsetRoutingPolicyGeoPolicyPtrType) ToRRSetRoutingPolicyGeoPolicyPtrOutput() RRSetRoutingPolicyGeoPolicyPtrOutput {
	return i.ToRRSetRoutingPolicyGeoPolicyPtrOutputWithContext(context.Background())
}

func (i *rrsetRoutingPolicyGeoPolicyPtrType) ToRRSetRoutingPolicyGeoPolicyPtrOutputWithContext(ctx context.Context) RRSetRoutingPolicyGeoPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RRSetRoutingPolicyGeoPolicyPtrOutput)
}

// Configures a RRSetRoutingPolicy that routes based on the geo location of the querying user.
type RRSetRoutingPolicyGeoPolicyOutput struct{ *pulumi.OutputState }

func (RRSetRoutingPolicyGeoPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RRSetRoutingPolicyGeoPolicy)(nil)).Elem()
}

func (o RRSetRoutingPolicyGeoPolicyOutput) ToRRSetRoutingPolicyGeoPolicyOutput() RRSetRoutingPolicyGeoPolicyOutput {
	return o
}

func (o RRSetRoutingPolicyGeoPolicyOutput) ToRRSetRoutingPolicyGeoPolicyOutputWithContext(ctx context.Context) RRSetRoutingPolicyGeoPolicyOutput {
	return o
}

func (o RRSetRoutingPolicyGeoPolicyOutput) ToRRSetRoutingPolicyGeoPolicyPtrOutput() RRSetRoutingPolicyGeoPolicyPtrOutput {
	return o.ToRRSetRoutingPolicyGeoPolicyPtrOutputWithContext(context.Background())
}

func (o RRSetRoutingPolicyGeoPolicyOutput) ToRRSetRoutingPolicyGeoPolicyPtrOutputWithContext(ctx context.Context) RRSetRoutingPolicyGeoPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RRSetRoutingPolicyGeoPolicy) *RRSetRoutingPolicyGeoPolicy {
		return &v
	}).(RRSetRoutingPolicyGeoPolicyPtrOutput)
}

// Without fencing, if health check fails for all configured items in the current geo bucket, we failover to the next nearest geo bucket. With fencing, if health checking is enabled, as long as some targets in the current geo bucket are healthy, we return only the healthy targets. However, if all targets are unhealthy, we don't failover to the next nearest bucket; instead, we return all the items in the current bucket even when all targets are unhealthy.
func (o RRSetRoutingPolicyGeoPolicyOutput) EnableFencing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyGeoPolicy) *bool { return v.EnableFencing }).(pulumi.BoolPtrOutput)
}

// The primary geo routing configuration. If there are multiple items with the same location, an error is returned instead.
func (o RRSetRoutingPolicyGeoPolicyOutput) Items() RRSetRoutingPolicyGeoPolicyGeoPolicyItemArrayOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyGeoPolicy) []RRSetRoutingPolicyGeoPolicyGeoPolicyItem { return v.Items }).(RRSetRoutingPolicyGeoPolicyGeoPolicyItemArrayOutput)
}

func (o RRSetRoutingPolicyGeoPolicyOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyGeoPolicy) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

type RRSetRoutingPolicyGeoPolicyPtrOutput struct{ *pulumi.OutputState }

func (RRSetRoutingPolicyGeoPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RRSetRoutingPolicyGeoPolicy)(nil)).Elem()
}

func (o RRSetRoutingPolicyGeoPolicyPtrOutput) ToRRSetRoutingPolicyGeoPolicyPtrOutput() RRSetRoutingPolicyGeoPolicyPtrOutput {
	return o
}

func (o RRSetRoutingPolicyGeoPolicyPtrOutput) ToRRSetRoutingPolicyGeoPolicyPtrOutputWithContext(ctx context.Context) RRSetRoutingPolicyGeoPolicyPtrOutput {
	return o
}

func (o RRSetRoutingPolicyGeoPolicyPtrOutput) Elem() RRSetRoutingPolicyGeoPolicyOutput {
	return o.ApplyT(func(v *RRSetRoutingPolicyGeoPolicy) RRSetRoutingPolicyGeoPolicy {
		if v != nil {
			return *v
		}
		var ret RRSetRoutingPolicyGeoPolicy
		return ret
	}).(RRSetRoutingPolicyGeoPolicyOutput)
}

// Without fencing, if health check fails for all configured items in the current geo bucket, we failover to the next nearest geo bucket. With fencing, if health checking is enabled, as long as some targets in the current geo bucket are healthy, we return only the healthy targets. However, if all targets are unhealthy, we don't failover to the next nearest bucket; instead, we return all the items in the current bucket even when all targets are unhealthy.
func (o RRSetRoutingPolicyGeoPolicyPtrOutput) EnableFencing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RRSetRoutingPolicyGeoPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.EnableFencing
	}).(pulumi.BoolPtrOutput)
}

// The primary geo routing configuration. If there are multiple items with the same location, an error is returned instead.
func (o RRSetRoutingPolicyGeoPolicyPtrOutput) Items() RRSetRoutingPolicyGeoPolicyGeoPolicyItemArrayOutput {
	return o.ApplyT(func(v *RRSetRoutingPolicyGeoPolicy) []RRSetRoutingPolicyGeoPolicyGeoPolicyItem {
		if v == nil {
			return nil
		}
		return v.Items
	}).(RRSetRoutingPolicyGeoPolicyGeoPolicyItemArrayOutput)
}

func (o RRSetRoutingPolicyGeoPolicyPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RRSetRoutingPolicyGeoPolicy) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// ResourceRecordSet data for one geo location.
type RRSetRoutingPolicyGeoPolicyGeoPolicyItem struct {
	// For A and AAAA types only. Endpoints to return in the query result only if they are healthy. These can be specified along with rrdata within this item.
	HealthCheckedTargets *RRSetRoutingPolicyHealthCheckTargets `pulumi:"healthCheckedTargets"`
	Kind                 *string                               `pulumi:"kind"`
	// The geo-location granularity is a GCP region. This location string should correspond to a GCP region. e.g. "us-east1", "southamerica-east1", "asia-east1", etc.
	Location *string  `pulumi:"location"`
	Rrdatas  []string `pulumi:"rrdatas"`
	// DNSSEC generated signatures for all the rrdata within this item. If health checked targets are provided for DNSSEC enabled zones, there's a restriction of 1 IP address per item.
	SignatureRrdatas []string `pulumi:"signatureRrdatas"`
}

// RRSetRoutingPolicyGeoPolicyGeoPolicyItemInput is an input type that accepts RRSetRoutingPolicyGeoPolicyGeoPolicyItemArgs and RRSetRoutingPolicyGeoPolicyGeoPolicyItemOutput values.
// You can construct a concrete instance of `RRSetRoutingPolicyGeoPolicyGeoPolicyItemInput` via:
//
//	RRSetRoutingPolicyGeoPolicyGeoPolicyItemArgs{...}
type RRSetRoutingPolicyGeoPolicyGeoPolicyItemInput interface {
	pulumi.Input

	ToRRSetRoutingPolicyGeoPolicyGeoPolicyItemOutput() RRSetRoutingPolicyGeoPolicyGeoPolicyItemOutput
	ToRRSetRoutingPolicyGeoPolicyGeoPolicyItemOutputWithContext(context.Context) RRSetRoutingPolicyGeoPolicyGeoPolicyItemOutput
}

// ResourceRecordSet data for one geo location.
type RRSetRoutingPolicyGeoPolicyGeoPolicyItemArgs struct {
	// For A and AAAA types only. Endpoints to return in the query result only if they are healthy. These can be specified along with rrdata within this item.
	HealthCheckedTargets RRSetRoutingPolicyHealthCheckTargetsPtrInput `pulumi:"healthCheckedTargets"`
	Kind                 pulumi.StringPtrInput                        `pulumi:"kind"`
	// The geo-location granularity is a GCP region. This location string should correspond to a GCP region. e.g. "us-east1", "southamerica-east1", "asia-east1", etc.
	Location pulumi.StringPtrInput   `pulumi:"location"`
	Rrdatas  pulumi.StringArrayInput `pulumi:"rrdatas"`
	// DNSSEC generated signatures for all the rrdata within this item. If health checked targets are provided for DNSSEC enabled zones, there's a restriction of 1 IP address per item.
	SignatureRrdatas pulumi.StringArrayInput `pulumi:"signatureRrdatas"`
}

func (RRSetRoutingPolicyGeoPolicyGeoPolicyItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RRSetRoutingPolicyGeoPolicyGeoPolicyItem)(nil)).Elem()
}

func (i RRSetRoutingPolicyGeoPolicyGeoPolicyItemArgs) ToRRSetRoutingPolicyGeoPolicyGeoPolicyItemOutput() RRSetRoutingPolicyGeoPolicyGeoPolicyItemOutput {
	return i.ToRRSetRoutingPolicyGeoPolicyGeoPolicyItemOutputWithContext(context.Background())
}

func (i RRSetRoutingPolicyGeoPolicyGeoPolicyItemArgs) ToRRSetRoutingPolicyGeoPolicyGeoPolicyItemOutputWithContext(ctx context.Context) RRSetRoutingPolicyGeoPolicyGeoPolicyItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RRSetRoutingPolicyGeoPolicyGeoPolicyItemOutput)
}

// RRSetRoutingPolicyGeoPolicyGeoPolicyItemArrayInput is an input type that accepts RRSetRoutingPolicyGeoPolicyGeoPolicyItemArray and RRSetRoutingPolicyGeoPolicyGeoPolicyItemArrayOutput values.
// You can construct a concrete instance of `RRSetRoutingPolicyGeoPolicyGeoPolicyItemArrayInput` via:
//
//	RRSetRoutingPolicyGeoPolicyGeoPolicyItemArray{ RRSetRoutingPolicyGeoPolicyGeoPolicyItemArgs{...} }
type RRSetRoutingPolicyGeoPolicyGeoPolicyItemArrayInput interface {
	pulumi.Input

	ToRRSetRoutingPolicyGeoPolicyGeoPolicyItemArrayOutput() RRSetRoutingPolicyGeoPolicyGeoPolicyItemArrayOutput
	ToRRSetRoutingPolicyGeoPolicyGeoPolicyItemArrayOutputWithContext(context.Context) RRSetRoutingPolicyGeoPolicyGeoPolicyItemArrayOutput
}

type RRSetRoutingPolicyGeoPolicyGeoPolicyItemArray []RRSetRoutingPolicyGeoPolicyGeoPolicyItemInput

func (RRSetRoutingPolicyGeoPolicyGeoPolicyItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RRSetRoutingPolicyGeoPolicyGeoPolicyItem)(nil)).Elem()
}

func (i RRSetRoutingPolicyGeoPolicyGeoPolicyItemArray) ToRRSetRoutingPolicyGeoPolicyGeoPolicyItemArrayOutput() RRSetRoutingPolicyGeoPolicyGeoPolicyItemArrayOutput {
	return i.ToRRSetRoutingPolicyGeoPolicyGeoPolicyItemArrayOutputWithContext(context.Background())
}

func (i RRSetRoutingPolicyGeoPolicyGeoPolicyItemArray) ToRRSetRoutingPolicyGeoPolicyGeoPolicyItemArrayOutputWithContext(ctx context.Context) RRSetRoutingPolicyGeoPolicyGeoPolicyItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RRSetRoutingPolicyGeoPolicyGeoPolicyItemArrayOutput)
}

// ResourceRecordSet data for one geo location.
type RRSetRoutingPolicyGeoPolicyGeoPolicyItemOutput struct{ *pulumi.OutputState }

func (RRSetRoutingPolicyGeoPolicyGeoPolicyItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RRSetRoutingPolicyGeoPolicyGeoPolicyItem)(nil)).Elem()
}

func (o RRSetRoutingPolicyGeoPolicyGeoPolicyItemOutput) ToRRSetRoutingPolicyGeoPolicyGeoPolicyItemOutput() RRSetRoutingPolicyGeoPolicyGeoPolicyItemOutput {
	return o
}

func (o RRSetRoutingPolicyGeoPolicyGeoPolicyItemOutput) ToRRSetRoutingPolicyGeoPolicyGeoPolicyItemOutputWithContext(ctx context.Context) RRSetRoutingPolicyGeoPolicyGeoPolicyItemOutput {
	return o
}

// For A and AAAA types only. Endpoints to return in the query result only if they are healthy. These can be specified along with rrdata within this item.
func (o RRSetRoutingPolicyGeoPolicyGeoPolicyItemOutput) HealthCheckedTargets() RRSetRoutingPolicyHealthCheckTargetsPtrOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyGeoPolicyGeoPolicyItem) *RRSetRoutingPolicyHealthCheckTargets {
		return v.HealthCheckedTargets
	}).(RRSetRoutingPolicyHealthCheckTargetsPtrOutput)
}

func (o RRSetRoutingPolicyGeoPolicyGeoPolicyItemOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyGeoPolicyGeoPolicyItem) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// The geo-location granularity is a GCP region. This location string should correspond to a GCP region. e.g. "us-east1", "southamerica-east1", "asia-east1", etc.
func (o RRSetRoutingPolicyGeoPolicyGeoPolicyItemOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyGeoPolicyGeoPolicyItem) *string { return v.Location }).(pulumi.StringPtrOutput)
}

func (o RRSetRoutingPolicyGeoPolicyGeoPolicyItemOutput) Rrdatas() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyGeoPolicyGeoPolicyItem) []string { return v.Rrdatas }).(pulumi.StringArrayOutput)
}

// DNSSEC generated signatures for all the rrdata within this item. If health checked targets are provided for DNSSEC enabled zones, there's a restriction of 1 IP address per item.
func (o RRSetRoutingPolicyGeoPolicyGeoPolicyItemOutput) SignatureRrdatas() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyGeoPolicyGeoPolicyItem) []string { return v.SignatureRrdatas }).(pulumi.StringArrayOutput)
}

type RRSetRoutingPolicyGeoPolicyGeoPolicyItemArrayOutput struct{ *pulumi.OutputState }

func (RRSetRoutingPolicyGeoPolicyGeoPolicyItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RRSetRoutingPolicyGeoPolicyGeoPolicyItem)(nil)).Elem()
}

func (o RRSetRoutingPolicyGeoPolicyGeoPolicyItemArrayOutput) ToRRSetRoutingPolicyGeoPolicyGeoPolicyItemArrayOutput() RRSetRoutingPolicyGeoPolicyGeoPolicyItemArrayOutput {
	return o
}

func (o RRSetRoutingPolicyGeoPolicyGeoPolicyItemArrayOutput) ToRRSetRoutingPolicyGeoPolicyGeoPolicyItemArrayOutputWithContext(ctx context.Context) RRSetRoutingPolicyGeoPolicyGeoPolicyItemArrayOutput {
	return o
}

func (o RRSetRoutingPolicyGeoPolicyGeoPolicyItemArrayOutput) Index(i pulumi.IntInput) RRSetRoutingPolicyGeoPolicyGeoPolicyItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RRSetRoutingPolicyGeoPolicyGeoPolicyItem {
		return vs[0].([]RRSetRoutingPolicyGeoPolicyGeoPolicyItem)[vs[1].(int)]
	}).(RRSetRoutingPolicyGeoPolicyGeoPolicyItemOutput)
}

// ResourceRecordSet data for one geo location.
type RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponse struct {
	// For A and AAAA types only. Endpoints to return in the query result only if they are healthy. These can be specified along with rrdata within this item.
	HealthCheckedTargets RRSetRoutingPolicyHealthCheckTargetsResponse `pulumi:"healthCheckedTargets"`
	Kind                 string                                       `pulumi:"kind"`
	// The geo-location granularity is a GCP region. This location string should correspond to a GCP region. e.g. "us-east1", "southamerica-east1", "asia-east1", etc.
	Location string   `pulumi:"location"`
	Rrdatas  []string `pulumi:"rrdatas"`
	// DNSSEC generated signatures for all the rrdata within this item. If health checked targets are provided for DNSSEC enabled zones, there's a restriction of 1 IP address per item.
	SignatureRrdatas []string `pulumi:"signatureRrdatas"`
}

// ResourceRecordSet data for one geo location.
type RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseOutput struct{ *pulumi.OutputState }

func (RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponse)(nil)).Elem()
}

func (o RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseOutput) ToRRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseOutput() RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseOutput {
	return o
}

func (o RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseOutput) ToRRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseOutputWithContext(ctx context.Context) RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseOutput {
	return o
}

// For A and AAAA types only. Endpoints to return in the query result only if they are healthy. These can be specified along with rrdata within this item.
func (o RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseOutput) HealthCheckedTargets() RRSetRoutingPolicyHealthCheckTargetsResponseOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponse) RRSetRoutingPolicyHealthCheckTargetsResponse {
		return v.HealthCheckedTargets
	}).(RRSetRoutingPolicyHealthCheckTargetsResponseOutput)
}

func (o RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// The geo-location granularity is a GCP region. This location string should correspond to a GCP region. e.g. "us-east1", "southamerica-east1", "asia-east1", etc.
func (o RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponse) string { return v.Location }).(pulumi.StringOutput)
}

func (o RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseOutput) Rrdatas() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponse) []string { return v.Rrdatas }).(pulumi.StringArrayOutput)
}

// DNSSEC generated signatures for all the rrdata within this item. If health checked targets are provided for DNSSEC enabled zones, there's a restriction of 1 IP address per item.
func (o RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseOutput) SignatureRrdatas() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponse) []string { return v.SignatureRrdatas }).(pulumi.StringArrayOutput)
}

type RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseArrayOutput struct{ *pulumi.OutputState }

func (RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponse)(nil)).Elem()
}

func (o RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseArrayOutput) ToRRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseArrayOutput() RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseArrayOutput {
	return o
}

func (o RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseArrayOutput) ToRRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseArrayOutputWithContext(ctx context.Context) RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseArrayOutput {
	return o
}

func (o RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseArrayOutput) Index(i pulumi.IntInput) RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponse {
		return vs[0].([]RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponse)[vs[1].(int)]
	}).(RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseOutput)
}

// Configures a RRSetRoutingPolicy that routes based on the geo location of the querying user.
type RRSetRoutingPolicyGeoPolicyResponse struct {
	// Without fencing, if health check fails for all configured items in the current geo bucket, we failover to the next nearest geo bucket. With fencing, if health checking is enabled, as long as some targets in the current geo bucket are healthy, we return only the healthy targets. However, if all targets are unhealthy, we don't failover to the next nearest bucket; instead, we return all the items in the current bucket even when all targets are unhealthy.
	EnableFencing bool `pulumi:"enableFencing"`
	// The primary geo routing configuration. If there are multiple items with the same location, an error is returned instead.
	Items []RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponse `pulumi:"items"`
	Kind  string                                             `pulumi:"kind"`
}

// Configures a RRSetRoutingPolicy that routes based on the geo location of the querying user.
type RRSetRoutingPolicyGeoPolicyResponseOutput struct{ *pulumi.OutputState }

func (RRSetRoutingPolicyGeoPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RRSetRoutingPolicyGeoPolicyResponse)(nil)).Elem()
}

func (o RRSetRoutingPolicyGeoPolicyResponseOutput) ToRRSetRoutingPolicyGeoPolicyResponseOutput() RRSetRoutingPolicyGeoPolicyResponseOutput {
	return o
}

func (o RRSetRoutingPolicyGeoPolicyResponseOutput) ToRRSetRoutingPolicyGeoPolicyResponseOutputWithContext(ctx context.Context) RRSetRoutingPolicyGeoPolicyResponseOutput {
	return o
}

// Without fencing, if health check fails for all configured items in the current geo bucket, we failover to the next nearest geo bucket. With fencing, if health checking is enabled, as long as some targets in the current geo bucket are healthy, we return only the healthy targets. However, if all targets are unhealthy, we don't failover to the next nearest bucket; instead, we return all the items in the current bucket even when all targets are unhealthy.
func (o RRSetRoutingPolicyGeoPolicyResponseOutput) EnableFencing() pulumi.BoolOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyGeoPolicyResponse) bool { return v.EnableFencing }).(pulumi.BoolOutput)
}

// The primary geo routing configuration. If there are multiple items with the same location, an error is returned instead.
func (o RRSetRoutingPolicyGeoPolicyResponseOutput) Items() RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseArrayOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyGeoPolicyResponse) []RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponse {
		return v.Items
	}).(RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseArrayOutput)
}

func (o RRSetRoutingPolicyGeoPolicyResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyGeoPolicyResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// HealthCheckTargets describes endpoints to health-check when responding to Routing Policy queries. Only the healthy endpoints will be included in the response.
type RRSetRoutingPolicyHealthCheckTargets struct {
	InternalLoadBalancers []RRSetRoutingPolicyLoadBalancerTarget `pulumi:"internalLoadBalancers"`
}

// RRSetRoutingPolicyHealthCheckTargetsInput is an input type that accepts RRSetRoutingPolicyHealthCheckTargetsArgs and RRSetRoutingPolicyHealthCheckTargetsOutput values.
// You can construct a concrete instance of `RRSetRoutingPolicyHealthCheckTargetsInput` via:
//
//	RRSetRoutingPolicyHealthCheckTargetsArgs{...}
type RRSetRoutingPolicyHealthCheckTargetsInput interface {
	pulumi.Input

	ToRRSetRoutingPolicyHealthCheckTargetsOutput() RRSetRoutingPolicyHealthCheckTargetsOutput
	ToRRSetRoutingPolicyHealthCheckTargetsOutputWithContext(context.Context) RRSetRoutingPolicyHealthCheckTargetsOutput
}

// HealthCheckTargets describes endpoints to health-check when responding to Routing Policy queries. Only the healthy endpoints will be included in the response.
type RRSetRoutingPolicyHealthCheckTargetsArgs struct {
	InternalLoadBalancers RRSetRoutingPolicyLoadBalancerTargetArrayInput `pulumi:"internalLoadBalancers"`
}

func (RRSetRoutingPolicyHealthCheckTargetsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RRSetRoutingPolicyHealthCheckTargets)(nil)).Elem()
}

func (i RRSetRoutingPolicyHealthCheckTargetsArgs) ToRRSetRoutingPolicyHealthCheckTargetsOutput() RRSetRoutingPolicyHealthCheckTargetsOutput {
	return i.ToRRSetRoutingPolicyHealthCheckTargetsOutputWithContext(context.Background())
}

func (i RRSetRoutingPolicyHealthCheckTargetsArgs) ToRRSetRoutingPolicyHealthCheckTargetsOutputWithContext(ctx context.Context) RRSetRoutingPolicyHealthCheckTargetsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RRSetRoutingPolicyHealthCheckTargetsOutput)
}

func (i RRSetRoutingPolicyHealthCheckTargetsArgs) ToRRSetRoutingPolicyHealthCheckTargetsPtrOutput() RRSetRoutingPolicyHealthCheckTargetsPtrOutput {
	return i.ToRRSetRoutingPolicyHealthCheckTargetsPtrOutputWithContext(context.Background())
}

func (i RRSetRoutingPolicyHealthCheckTargetsArgs) ToRRSetRoutingPolicyHealthCheckTargetsPtrOutputWithContext(ctx context.Context) RRSetRoutingPolicyHealthCheckTargetsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RRSetRoutingPolicyHealthCheckTargetsOutput).ToRRSetRoutingPolicyHealthCheckTargetsPtrOutputWithContext(ctx)
}

// RRSetRoutingPolicyHealthCheckTargetsPtrInput is an input type that accepts RRSetRoutingPolicyHealthCheckTargetsArgs, RRSetRoutingPolicyHealthCheckTargetsPtr and RRSetRoutingPolicyHealthCheckTargetsPtrOutput values.
// You can construct a concrete instance of `RRSetRoutingPolicyHealthCheckTargetsPtrInput` via:
//
//	        RRSetRoutingPolicyHealthCheckTargetsArgs{...}
//
//	or:
//
//	        nil
type RRSetRoutingPolicyHealthCheckTargetsPtrInput interface {
	pulumi.Input

	ToRRSetRoutingPolicyHealthCheckTargetsPtrOutput() RRSetRoutingPolicyHealthCheckTargetsPtrOutput
	ToRRSetRoutingPolicyHealthCheckTargetsPtrOutputWithContext(context.Context) RRSetRoutingPolicyHealthCheckTargetsPtrOutput
}

type rrsetRoutingPolicyHealthCheckTargetsPtrType RRSetRoutingPolicyHealthCheckTargetsArgs

func RRSetRoutingPolicyHealthCheckTargetsPtr(v *RRSetRoutingPolicyHealthCheckTargetsArgs) RRSetRoutingPolicyHealthCheckTargetsPtrInput {
	return (*rrsetRoutingPolicyHealthCheckTargetsPtrType)(v)
}

func (*rrsetRoutingPolicyHealthCheckTargetsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RRSetRoutingPolicyHealthCheckTargets)(nil)).Elem()
}

func (i *rrsetRoutingPolicyHealthCheckTargetsPtrType) ToRRSetRoutingPolicyHealthCheckTargetsPtrOutput() RRSetRoutingPolicyHealthCheckTargetsPtrOutput {
	return i.ToRRSetRoutingPolicyHealthCheckTargetsPtrOutputWithContext(context.Background())
}

func (i *rrsetRoutingPolicyHealthCheckTargetsPtrType) ToRRSetRoutingPolicyHealthCheckTargetsPtrOutputWithContext(ctx context.Context) RRSetRoutingPolicyHealthCheckTargetsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RRSetRoutingPolicyHealthCheckTargetsPtrOutput)
}

// HealthCheckTargets describes endpoints to health-check when responding to Routing Policy queries. Only the healthy endpoints will be included in the response.
type RRSetRoutingPolicyHealthCheckTargetsOutput struct{ *pulumi.OutputState }

func (RRSetRoutingPolicyHealthCheckTargetsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RRSetRoutingPolicyHealthCheckTargets)(nil)).Elem()
}

func (o RRSetRoutingPolicyHealthCheckTargetsOutput) ToRRSetRoutingPolicyHealthCheckTargetsOutput() RRSetRoutingPolicyHealthCheckTargetsOutput {
	return o
}

func (o RRSetRoutingPolicyHealthCheckTargetsOutput) ToRRSetRoutingPolicyHealthCheckTargetsOutputWithContext(ctx context.Context) RRSetRoutingPolicyHealthCheckTargetsOutput {
	return o
}

func (o RRSetRoutingPolicyHealthCheckTargetsOutput) ToRRSetRoutingPolicyHealthCheckTargetsPtrOutput() RRSetRoutingPolicyHealthCheckTargetsPtrOutput {
	return o.ToRRSetRoutingPolicyHealthCheckTargetsPtrOutputWithContext(context.Background())
}

func (o RRSetRoutingPolicyHealthCheckTargetsOutput) ToRRSetRoutingPolicyHealthCheckTargetsPtrOutputWithContext(ctx context.Context) RRSetRoutingPolicyHealthCheckTargetsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RRSetRoutingPolicyHealthCheckTargets) *RRSetRoutingPolicyHealthCheckTargets {
		return &v
	}).(RRSetRoutingPolicyHealthCheckTargetsPtrOutput)
}

func (o RRSetRoutingPolicyHealthCheckTargetsOutput) InternalLoadBalancers() RRSetRoutingPolicyLoadBalancerTargetArrayOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyHealthCheckTargets) []RRSetRoutingPolicyLoadBalancerTarget {
		return v.InternalLoadBalancers
	}).(RRSetRoutingPolicyLoadBalancerTargetArrayOutput)
}

type RRSetRoutingPolicyHealthCheckTargetsPtrOutput struct{ *pulumi.OutputState }

func (RRSetRoutingPolicyHealthCheckTargetsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RRSetRoutingPolicyHealthCheckTargets)(nil)).Elem()
}

func (o RRSetRoutingPolicyHealthCheckTargetsPtrOutput) ToRRSetRoutingPolicyHealthCheckTargetsPtrOutput() RRSetRoutingPolicyHealthCheckTargetsPtrOutput {
	return o
}

func (o RRSetRoutingPolicyHealthCheckTargetsPtrOutput) ToRRSetRoutingPolicyHealthCheckTargetsPtrOutputWithContext(ctx context.Context) RRSetRoutingPolicyHealthCheckTargetsPtrOutput {
	return o
}

func (o RRSetRoutingPolicyHealthCheckTargetsPtrOutput) Elem() RRSetRoutingPolicyHealthCheckTargetsOutput {
	return o.ApplyT(func(v *RRSetRoutingPolicyHealthCheckTargets) RRSetRoutingPolicyHealthCheckTargets {
		if v != nil {
			return *v
		}
		var ret RRSetRoutingPolicyHealthCheckTargets
		return ret
	}).(RRSetRoutingPolicyHealthCheckTargetsOutput)
}

func (o RRSetRoutingPolicyHealthCheckTargetsPtrOutput) InternalLoadBalancers() RRSetRoutingPolicyLoadBalancerTargetArrayOutput {
	return o.ApplyT(func(v *RRSetRoutingPolicyHealthCheckTargets) []RRSetRoutingPolicyLoadBalancerTarget {
		if v == nil {
			return nil
		}
		return v.InternalLoadBalancers
	}).(RRSetRoutingPolicyLoadBalancerTargetArrayOutput)
}

// HealthCheckTargets describes endpoints to health-check when responding to Routing Policy queries. Only the healthy endpoints will be included in the response.
type RRSetRoutingPolicyHealthCheckTargetsResponse struct {
	InternalLoadBalancers []RRSetRoutingPolicyLoadBalancerTargetResponse `pulumi:"internalLoadBalancers"`
}

// HealthCheckTargets describes endpoints to health-check when responding to Routing Policy queries. Only the healthy endpoints will be included in the response.
type RRSetRoutingPolicyHealthCheckTargetsResponseOutput struct{ *pulumi.OutputState }

func (RRSetRoutingPolicyHealthCheckTargetsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RRSetRoutingPolicyHealthCheckTargetsResponse)(nil)).Elem()
}

func (o RRSetRoutingPolicyHealthCheckTargetsResponseOutput) ToRRSetRoutingPolicyHealthCheckTargetsResponseOutput() RRSetRoutingPolicyHealthCheckTargetsResponseOutput {
	return o
}

func (o RRSetRoutingPolicyHealthCheckTargetsResponseOutput) ToRRSetRoutingPolicyHealthCheckTargetsResponseOutputWithContext(ctx context.Context) RRSetRoutingPolicyHealthCheckTargetsResponseOutput {
	return o
}

func (o RRSetRoutingPolicyHealthCheckTargetsResponseOutput) InternalLoadBalancers() RRSetRoutingPolicyLoadBalancerTargetResponseArrayOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyHealthCheckTargetsResponse) []RRSetRoutingPolicyLoadBalancerTargetResponse {
		return v.InternalLoadBalancers
	}).(RRSetRoutingPolicyLoadBalancerTargetResponseArrayOutput)
}

// The configuration for an individual load balancer to health check.
type RRSetRoutingPolicyLoadBalancerTarget struct {
	// The frontend IP address of the load balancer to health check.
	IpAddress *string `pulumi:"ipAddress"`
	// The protocol of the load balancer to health check.
	IpProtocol *RRSetRoutingPolicyLoadBalancerTargetIpProtocol `pulumi:"ipProtocol"`
	Kind       *string                                         `pulumi:"kind"`
	// The type of load balancer specified by this target. This value must match the configuration of the load balancer located at the LoadBalancerTarget's IP address, port, and region. Use the following: - *regionalL4ilb*: for a regional internal passthrough Network Load Balancer. - *regionalL7ilb*: for a regional internal Application Load Balancer. - *globalL7ilb*: for a global internal Application Load Balancer.
	LoadBalancerType *RRSetRoutingPolicyLoadBalancerTargetLoadBalancerType `pulumi:"loadBalancerType"`
	// The fully qualified URL of the network that the load balancer is attached to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network} .
	NetworkUrl *string `pulumi:"networkUrl"`
	// The configured port of the load balancer.
	Port *string `pulumi:"port"`
	// The project ID in which the load balancer is located.
	Project *string `pulumi:"project"`
	// The region in which the load balancer is located.
	Region *string `pulumi:"region"`
}

// RRSetRoutingPolicyLoadBalancerTargetInput is an input type that accepts RRSetRoutingPolicyLoadBalancerTargetArgs and RRSetRoutingPolicyLoadBalancerTargetOutput values.
// You can construct a concrete instance of `RRSetRoutingPolicyLoadBalancerTargetInput` via:
//
//	RRSetRoutingPolicyLoadBalancerTargetArgs{...}
type RRSetRoutingPolicyLoadBalancerTargetInput interface {
	pulumi.Input

	ToRRSetRoutingPolicyLoadBalancerTargetOutput() RRSetRoutingPolicyLoadBalancerTargetOutput
	ToRRSetRoutingPolicyLoadBalancerTargetOutputWithContext(context.Context) RRSetRoutingPolicyLoadBalancerTargetOutput
}

// The configuration for an individual load balancer to health check.
type RRSetRoutingPolicyLoadBalancerTargetArgs struct {
	// The frontend IP address of the load balancer to health check.
	IpAddress pulumi.StringPtrInput `pulumi:"ipAddress"`
	// The protocol of the load balancer to health check.
	IpProtocol RRSetRoutingPolicyLoadBalancerTargetIpProtocolPtrInput `pulumi:"ipProtocol"`
	Kind       pulumi.StringPtrInput                                  `pulumi:"kind"`
	// The type of load balancer specified by this target. This value must match the configuration of the load balancer located at the LoadBalancerTarget's IP address, port, and region. Use the following: - *regionalL4ilb*: for a regional internal passthrough Network Load Balancer. - *regionalL7ilb*: for a regional internal Application Load Balancer. - *globalL7ilb*: for a global internal Application Load Balancer.
	LoadBalancerType RRSetRoutingPolicyLoadBalancerTargetLoadBalancerTypePtrInput `pulumi:"loadBalancerType"`
	// The fully qualified URL of the network that the load balancer is attached to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network} .
	NetworkUrl pulumi.StringPtrInput `pulumi:"networkUrl"`
	// The configured port of the load balancer.
	Port pulumi.StringPtrInput `pulumi:"port"`
	// The project ID in which the load balancer is located.
	Project pulumi.StringPtrInput `pulumi:"project"`
	// The region in which the load balancer is located.
	Region pulumi.StringPtrInput `pulumi:"region"`
}

func (RRSetRoutingPolicyLoadBalancerTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RRSetRoutingPolicyLoadBalancerTarget)(nil)).Elem()
}

func (i RRSetRoutingPolicyLoadBalancerTargetArgs) ToRRSetRoutingPolicyLoadBalancerTargetOutput() RRSetRoutingPolicyLoadBalancerTargetOutput {
	return i.ToRRSetRoutingPolicyLoadBalancerTargetOutputWithContext(context.Background())
}

func (i RRSetRoutingPolicyLoadBalancerTargetArgs) ToRRSetRoutingPolicyLoadBalancerTargetOutputWithContext(ctx context.Context) RRSetRoutingPolicyLoadBalancerTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RRSetRoutingPolicyLoadBalancerTargetOutput)
}

// RRSetRoutingPolicyLoadBalancerTargetArrayInput is an input type that accepts RRSetRoutingPolicyLoadBalancerTargetArray and RRSetRoutingPolicyLoadBalancerTargetArrayOutput values.
// You can construct a concrete instance of `RRSetRoutingPolicyLoadBalancerTargetArrayInput` via:
//
//	RRSetRoutingPolicyLoadBalancerTargetArray{ RRSetRoutingPolicyLoadBalancerTargetArgs{...} }
type RRSetRoutingPolicyLoadBalancerTargetArrayInput interface {
	pulumi.Input

	ToRRSetRoutingPolicyLoadBalancerTargetArrayOutput() RRSetRoutingPolicyLoadBalancerTargetArrayOutput
	ToRRSetRoutingPolicyLoadBalancerTargetArrayOutputWithContext(context.Context) RRSetRoutingPolicyLoadBalancerTargetArrayOutput
}

type RRSetRoutingPolicyLoadBalancerTargetArray []RRSetRoutingPolicyLoadBalancerTargetInput

func (RRSetRoutingPolicyLoadBalancerTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RRSetRoutingPolicyLoadBalancerTarget)(nil)).Elem()
}

func (i RRSetRoutingPolicyLoadBalancerTargetArray) ToRRSetRoutingPolicyLoadBalancerTargetArrayOutput() RRSetRoutingPolicyLoadBalancerTargetArrayOutput {
	return i.ToRRSetRoutingPolicyLoadBalancerTargetArrayOutputWithContext(context.Background())
}

func (i RRSetRoutingPolicyLoadBalancerTargetArray) ToRRSetRoutingPolicyLoadBalancerTargetArrayOutputWithContext(ctx context.Context) RRSetRoutingPolicyLoadBalancerTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RRSetRoutingPolicyLoadBalancerTargetArrayOutput)
}

// The configuration for an individual load balancer to health check.
type RRSetRoutingPolicyLoadBalancerTargetOutput struct{ *pulumi.OutputState }

func (RRSetRoutingPolicyLoadBalancerTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RRSetRoutingPolicyLoadBalancerTarget)(nil)).Elem()
}

func (o RRSetRoutingPolicyLoadBalancerTargetOutput) ToRRSetRoutingPolicyLoadBalancerTargetOutput() RRSetRoutingPolicyLoadBalancerTargetOutput {
	return o
}

func (o RRSetRoutingPolicyLoadBalancerTargetOutput) ToRRSetRoutingPolicyLoadBalancerTargetOutputWithContext(ctx context.Context) RRSetRoutingPolicyLoadBalancerTargetOutput {
	return o
}

// The frontend IP address of the load balancer to health check.
func (o RRSetRoutingPolicyLoadBalancerTargetOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyLoadBalancerTarget) *string { return v.IpAddress }).(pulumi.StringPtrOutput)
}

// The protocol of the load balancer to health check.
func (o RRSetRoutingPolicyLoadBalancerTargetOutput) IpProtocol() RRSetRoutingPolicyLoadBalancerTargetIpProtocolPtrOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyLoadBalancerTarget) *RRSetRoutingPolicyLoadBalancerTargetIpProtocol {
		return v.IpProtocol
	}).(RRSetRoutingPolicyLoadBalancerTargetIpProtocolPtrOutput)
}

func (o RRSetRoutingPolicyLoadBalancerTargetOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyLoadBalancerTarget) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// The type of load balancer specified by this target. This value must match the configuration of the load balancer located at the LoadBalancerTarget's IP address, port, and region. Use the following: - *regionalL4ilb*: for a regional internal passthrough Network Load Balancer. - *regionalL7ilb*: for a regional internal Application Load Balancer. - *globalL7ilb*: for a global internal Application Load Balancer.
func (o RRSetRoutingPolicyLoadBalancerTargetOutput) LoadBalancerType() RRSetRoutingPolicyLoadBalancerTargetLoadBalancerTypePtrOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyLoadBalancerTarget) *RRSetRoutingPolicyLoadBalancerTargetLoadBalancerType {
		return v.LoadBalancerType
	}).(RRSetRoutingPolicyLoadBalancerTargetLoadBalancerTypePtrOutput)
}

// The fully qualified URL of the network that the load balancer is attached to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network} .
func (o RRSetRoutingPolicyLoadBalancerTargetOutput) NetworkUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyLoadBalancerTarget) *string { return v.NetworkUrl }).(pulumi.StringPtrOutput)
}

// The configured port of the load balancer.
func (o RRSetRoutingPolicyLoadBalancerTargetOutput) Port() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyLoadBalancerTarget) *string { return v.Port }).(pulumi.StringPtrOutput)
}

// The project ID in which the load balancer is located.
func (o RRSetRoutingPolicyLoadBalancerTargetOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyLoadBalancerTarget) *string { return v.Project }).(pulumi.StringPtrOutput)
}

// The region in which the load balancer is located.
func (o RRSetRoutingPolicyLoadBalancerTargetOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyLoadBalancerTarget) *string { return v.Region }).(pulumi.StringPtrOutput)
}

type RRSetRoutingPolicyLoadBalancerTargetArrayOutput struct{ *pulumi.OutputState }

func (RRSetRoutingPolicyLoadBalancerTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RRSetRoutingPolicyLoadBalancerTarget)(nil)).Elem()
}

func (o RRSetRoutingPolicyLoadBalancerTargetArrayOutput) ToRRSetRoutingPolicyLoadBalancerTargetArrayOutput() RRSetRoutingPolicyLoadBalancerTargetArrayOutput {
	return o
}

func (o RRSetRoutingPolicyLoadBalancerTargetArrayOutput) ToRRSetRoutingPolicyLoadBalancerTargetArrayOutputWithContext(ctx context.Context) RRSetRoutingPolicyLoadBalancerTargetArrayOutput {
	return o
}

func (o RRSetRoutingPolicyLoadBalancerTargetArrayOutput) Index(i pulumi.IntInput) RRSetRoutingPolicyLoadBalancerTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RRSetRoutingPolicyLoadBalancerTarget {
		return vs[0].([]RRSetRoutingPolicyLoadBalancerTarget)[vs[1].(int)]
	}).(RRSetRoutingPolicyLoadBalancerTargetOutput)
}

// The configuration for an individual load balancer to health check.
type RRSetRoutingPolicyLoadBalancerTargetResponse struct {
	// The frontend IP address of the load balancer to health check.
	IpAddress string `pulumi:"ipAddress"`
	// The protocol of the load balancer to health check.
	IpProtocol string `pulumi:"ipProtocol"`
	Kind       string `pulumi:"kind"`
	// The type of load balancer specified by this target. This value must match the configuration of the load balancer located at the LoadBalancerTarget's IP address, port, and region. Use the following: - *regionalL4ilb*: for a regional internal passthrough Network Load Balancer. - *regionalL7ilb*: for a regional internal Application Load Balancer. - *globalL7ilb*: for a global internal Application Load Balancer.
	LoadBalancerType string `pulumi:"loadBalancerType"`
	// The fully qualified URL of the network that the load balancer is attached to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network} .
	NetworkUrl string `pulumi:"networkUrl"`
	// The configured port of the load balancer.
	Port string `pulumi:"port"`
	// The project ID in which the load balancer is located.
	Project string `pulumi:"project"`
	// The region in which the load balancer is located.
	Region string `pulumi:"region"`
}

// The configuration for an individual load balancer to health check.
type RRSetRoutingPolicyLoadBalancerTargetResponseOutput struct{ *pulumi.OutputState }

func (RRSetRoutingPolicyLoadBalancerTargetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RRSetRoutingPolicyLoadBalancerTargetResponse)(nil)).Elem()
}

func (o RRSetRoutingPolicyLoadBalancerTargetResponseOutput) ToRRSetRoutingPolicyLoadBalancerTargetResponseOutput() RRSetRoutingPolicyLoadBalancerTargetResponseOutput {
	return o
}

func (o RRSetRoutingPolicyLoadBalancerTargetResponseOutput) ToRRSetRoutingPolicyLoadBalancerTargetResponseOutputWithContext(ctx context.Context) RRSetRoutingPolicyLoadBalancerTargetResponseOutput {
	return o
}

// The frontend IP address of the load balancer to health check.
func (o RRSetRoutingPolicyLoadBalancerTargetResponseOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyLoadBalancerTargetResponse) string { return v.IpAddress }).(pulumi.StringOutput)
}

// The protocol of the load balancer to health check.
func (o RRSetRoutingPolicyLoadBalancerTargetResponseOutput) IpProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyLoadBalancerTargetResponse) string { return v.IpProtocol }).(pulumi.StringOutput)
}

func (o RRSetRoutingPolicyLoadBalancerTargetResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyLoadBalancerTargetResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// The type of load balancer specified by this target. This value must match the configuration of the load balancer located at the LoadBalancerTarget's IP address, port, and region. Use the following: - *regionalL4ilb*: for a regional internal passthrough Network Load Balancer. - *regionalL7ilb*: for a regional internal Application Load Balancer. - *globalL7ilb*: for a global internal Application Load Balancer.
func (o RRSetRoutingPolicyLoadBalancerTargetResponseOutput) LoadBalancerType() pulumi.StringOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyLoadBalancerTargetResponse) string { return v.LoadBalancerType }).(pulumi.StringOutput)
}

// The fully qualified URL of the network that the load balancer is attached to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network} .
func (o RRSetRoutingPolicyLoadBalancerTargetResponseOutput) NetworkUrl() pulumi.StringOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyLoadBalancerTargetResponse) string { return v.NetworkUrl }).(pulumi.StringOutput)
}

// The configured port of the load balancer.
func (o RRSetRoutingPolicyLoadBalancerTargetResponseOutput) Port() pulumi.StringOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyLoadBalancerTargetResponse) string { return v.Port }).(pulumi.StringOutput)
}

// The project ID in which the load balancer is located.
func (o RRSetRoutingPolicyLoadBalancerTargetResponseOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyLoadBalancerTargetResponse) string { return v.Project }).(pulumi.StringOutput)
}

// The region in which the load balancer is located.
func (o RRSetRoutingPolicyLoadBalancerTargetResponseOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyLoadBalancerTargetResponse) string { return v.Region }).(pulumi.StringOutput)
}

type RRSetRoutingPolicyLoadBalancerTargetResponseArrayOutput struct{ *pulumi.OutputState }

func (RRSetRoutingPolicyLoadBalancerTargetResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RRSetRoutingPolicyLoadBalancerTargetResponse)(nil)).Elem()
}

func (o RRSetRoutingPolicyLoadBalancerTargetResponseArrayOutput) ToRRSetRoutingPolicyLoadBalancerTargetResponseArrayOutput() RRSetRoutingPolicyLoadBalancerTargetResponseArrayOutput {
	return o
}

func (o RRSetRoutingPolicyLoadBalancerTargetResponseArrayOutput) ToRRSetRoutingPolicyLoadBalancerTargetResponseArrayOutputWithContext(ctx context.Context) RRSetRoutingPolicyLoadBalancerTargetResponseArrayOutput {
	return o
}

func (o RRSetRoutingPolicyLoadBalancerTargetResponseArrayOutput) Index(i pulumi.IntInput) RRSetRoutingPolicyLoadBalancerTargetResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RRSetRoutingPolicyLoadBalancerTargetResponse {
		return vs[0].([]RRSetRoutingPolicyLoadBalancerTargetResponse)[vs[1].(int)]
	}).(RRSetRoutingPolicyLoadBalancerTargetResponseOutput)
}

// Configures a RRSetRoutingPolicy such that all queries are responded with the primary_targets if they are healthy. And if all of them are unhealthy, then we fallback to a geo localized policy.
type RRSetRoutingPolicyPrimaryBackupPolicy struct {
	// Backup targets provide a regional failover policy for the otherwise global primary targets. If serving state is set to BACKUP, this policy essentially becomes a geo routing policy.
	BackupGeoTargets *RRSetRoutingPolicyGeoPolicy `pulumi:"backupGeoTargets"`
	Kind             *string                      `pulumi:"kind"`
	// Endpoints that are health checked before making the routing decision. Unhealthy endpoints are omitted from the results. If all endpoints are unhealthy, we serve a response based on the backup_geo_targets.
	PrimaryTargets *RRSetRoutingPolicyHealthCheckTargets `pulumi:"primaryTargets"`
	// When serving state is PRIMARY, this field provides the option of sending a small percentage of the traffic to the backup targets.
	TrickleTraffic *float64 `pulumi:"trickleTraffic"`
}

// RRSetRoutingPolicyPrimaryBackupPolicyInput is an input type that accepts RRSetRoutingPolicyPrimaryBackupPolicyArgs and RRSetRoutingPolicyPrimaryBackupPolicyOutput values.
// You can construct a concrete instance of `RRSetRoutingPolicyPrimaryBackupPolicyInput` via:
//
//	RRSetRoutingPolicyPrimaryBackupPolicyArgs{...}
type RRSetRoutingPolicyPrimaryBackupPolicyInput interface {
	pulumi.Input

	ToRRSetRoutingPolicyPrimaryBackupPolicyOutput() RRSetRoutingPolicyPrimaryBackupPolicyOutput
	ToRRSetRoutingPolicyPrimaryBackupPolicyOutputWithContext(context.Context) RRSetRoutingPolicyPrimaryBackupPolicyOutput
}

// Configures a RRSetRoutingPolicy such that all queries are responded with the primary_targets if they are healthy. And if all of them are unhealthy, then we fallback to a geo localized policy.
type RRSetRoutingPolicyPrimaryBackupPolicyArgs struct {
	// Backup targets provide a regional failover policy for the otherwise global primary targets. If serving state is set to BACKUP, this policy essentially becomes a geo routing policy.
	BackupGeoTargets RRSetRoutingPolicyGeoPolicyPtrInput `pulumi:"backupGeoTargets"`
	Kind             pulumi.StringPtrInput               `pulumi:"kind"`
	// Endpoints that are health checked before making the routing decision. Unhealthy endpoints are omitted from the results. If all endpoints are unhealthy, we serve a response based on the backup_geo_targets.
	PrimaryTargets RRSetRoutingPolicyHealthCheckTargetsPtrInput `pulumi:"primaryTargets"`
	// When serving state is PRIMARY, this field provides the option of sending a small percentage of the traffic to the backup targets.
	TrickleTraffic pulumi.Float64PtrInput `pulumi:"trickleTraffic"`
}

func (RRSetRoutingPolicyPrimaryBackupPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RRSetRoutingPolicyPrimaryBackupPolicy)(nil)).Elem()
}

func (i RRSetRoutingPolicyPrimaryBackupPolicyArgs) ToRRSetRoutingPolicyPrimaryBackupPolicyOutput() RRSetRoutingPolicyPrimaryBackupPolicyOutput {
	return i.ToRRSetRoutingPolicyPrimaryBackupPolicyOutputWithContext(context.Background())
}

func (i RRSetRoutingPolicyPrimaryBackupPolicyArgs) ToRRSetRoutingPolicyPrimaryBackupPolicyOutputWithContext(ctx context.Context) RRSetRoutingPolicyPrimaryBackupPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RRSetRoutingPolicyPrimaryBackupPolicyOutput)
}

func (i RRSetRoutingPolicyPrimaryBackupPolicyArgs) ToRRSetRoutingPolicyPrimaryBackupPolicyPtrOutput() RRSetRoutingPolicyPrimaryBackupPolicyPtrOutput {
	return i.ToRRSetRoutingPolicyPrimaryBackupPolicyPtrOutputWithContext(context.Background())
}

func (i RRSetRoutingPolicyPrimaryBackupPolicyArgs) ToRRSetRoutingPolicyPrimaryBackupPolicyPtrOutputWithContext(ctx context.Context) RRSetRoutingPolicyPrimaryBackupPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RRSetRoutingPolicyPrimaryBackupPolicyOutput).ToRRSetRoutingPolicyPrimaryBackupPolicyPtrOutputWithContext(ctx)
}

// RRSetRoutingPolicyPrimaryBackupPolicyPtrInput is an input type that accepts RRSetRoutingPolicyPrimaryBackupPolicyArgs, RRSetRoutingPolicyPrimaryBackupPolicyPtr and RRSetRoutingPolicyPrimaryBackupPolicyPtrOutput values.
// You can construct a concrete instance of `RRSetRoutingPolicyPrimaryBackupPolicyPtrInput` via:
//
//	        RRSetRoutingPolicyPrimaryBackupPolicyArgs{...}
//
//	or:
//
//	        nil
type RRSetRoutingPolicyPrimaryBackupPolicyPtrInput interface {
	pulumi.Input

	ToRRSetRoutingPolicyPrimaryBackupPolicyPtrOutput() RRSetRoutingPolicyPrimaryBackupPolicyPtrOutput
	ToRRSetRoutingPolicyPrimaryBackupPolicyPtrOutputWithContext(context.Context) RRSetRoutingPolicyPrimaryBackupPolicyPtrOutput
}

type rrsetRoutingPolicyPrimaryBackupPolicyPtrType RRSetRoutingPolicyPrimaryBackupPolicyArgs

func RRSetRoutingPolicyPrimaryBackupPolicyPtr(v *RRSetRoutingPolicyPrimaryBackupPolicyArgs) RRSetRoutingPolicyPrimaryBackupPolicyPtrInput {
	return (*rrsetRoutingPolicyPrimaryBackupPolicyPtrType)(v)
}

func (*rrsetRoutingPolicyPrimaryBackupPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RRSetRoutingPolicyPrimaryBackupPolicy)(nil)).Elem()
}

func (i *rrsetRoutingPolicyPrimaryBackupPolicyPtrType) ToRRSetRoutingPolicyPrimaryBackupPolicyPtrOutput() RRSetRoutingPolicyPrimaryBackupPolicyPtrOutput {
	return i.ToRRSetRoutingPolicyPrimaryBackupPolicyPtrOutputWithContext(context.Background())
}

func (i *rrsetRoutingPolicyPrimaryBackupPolicyPtrType) ToRRSetRoutingPolicyPrimaryBackupPolicyPtrOutputWithContext(ctx context.Context) RRSetRoutingPolicyPrimaryBackupPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RRSetRoutingPolicyPrimaryBackupPolicyPtrOutput)
}

// Configures a RRSetRoutingPolicy such that all queries are responded with the primary_targets if they are healthy. And if all of them are unhealthy, then we fallback to a geo localized policy.
type RRSetRoutingPolicyPrimaryBackupPolicyOutput struct{ *pulumi.OutputState }

func (RRSetRoutingPolicyPrimaryBackupPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RRSetRoutingPolicyPrimaryBackupPolicy)(nil)).Elem()
}

func (o RRSetRoutingPolicyPrimaryBackupPolicyOutput) ToRRSetRoutingPolicyPrimaryBackupPolicyOutput() RRSetRoutingPolicyPrimaryBackupPolicyOutput {
	return o
}

func (o RRSetRoutingPolicyPrimaryBackupPolicyOutput) ToRRSetRoutingPolicyPrimaryBackupPolicyOutputWithContext(ctx context.Context) RRSetRoutingPolicyPrimaryBackupPolicyOutput {
	return o
}

func (o RRSetRoutingPolicyPrimaryBackupPolicyOutput) ToRRSetRoutingPolicyPrimaryBackupPolicyPtrOutput() RRSetRoutingPolicyPrimaryBackupPolicyPtrOutput {
	return o.ToRRSetRoutingPolicyPrimaryBackupPolicyPtrOutputWithContext(context.Background())
}

func (o RRSetRoutingPolicyPrimaryBackupPolicyOutput) ToRRSetRoutingPolicyPrimaryBackupPolicyPtrOutputWithContext(ctx context.Context) RRSetRoutingPolicyPrimaryBackupPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RRSetRoutingPolicyPrimaryBackupPolicy) *RRSetRoutingPolicyPrimaryBackupPolicy {
		return &v
	}).(RRSetRoutingPolicyPrimaryBackupPolicyPtrOutput)
}

// Backup targets provide a regional failover policy for the otherwise global primary targets. If serving state is set to BACKUP, this policy essentially becomes a geo routing policy.
func (o RRSetRoutingPolicyPrimaryBackupPolicyOutput) BackupGeoTargets() RRSetRoutingPolicyGeoPolicyPtrOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyPrimaryBackupPolicy) *RRSetRoutingPolicyGeoPolicy { return v.BackupGeoTargets }).(RRSetRoutingPolicyGeoPolicyPtrOutput)
}

func (o RRSetRoutingPolicyPrimaryBackupPolicyOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyPrimaryBackupPolicy) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Endpoints that are health checked before making the routing decision. Unhealthy endpoints are omitted from the results. If all endpoints are unhealthy, we serve a response based on the backup_geo_targets.
func (o RRSetRoutingPolicyPrimaryBackupPolicyOutput) PrimaryTargets() RRSetRoutingPolicyHealthCheckTargetsPtrOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyPrimaryBackupPolicy) *RRSetRoutingPolicyHealthCheckTargets {
		return v.PrimaryTargets
	}).(RRSetRoutingPolicyHealthCheckTargetsPtrOutput)
}

// When serving state is PRIMARY, this field provides the option of sending a small percentage of the traffic to the backup targets.
func (o RRSetRoutingPolicyPrimaryBackupPolicyOutput) TrickleTraffic() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyPrimaryBackupPolicy) *float64 { return v.TrickleTraffic }).(pulumi.Float64PtrOutput)
}

type RRSetRoutingPolicyPrimaryBackupPolicyPtrOutput struct{ *pulumi.OutputState }

func (RRSetRoutingPolicyPrimaryBackupPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RRSetRoutingPolicyPrimaryBackupPolicy)(nil)).Elem()
}

func (o RRSetRoutingPolicyPrimaryBackupPolicyPtrOutput) ToRRSetRoutingPolicyPrimaryBackupPolicyPtrOutput() RRSetRoutingPolicyPrimaryBackupPolicyPtrOutput {
	return o
}

func (o RRSetRoutingPolicyPrimaryBackupPolicyPtrOutput) ToRRSetRoutingPolicyPrimaryBackupPolicyPtrOutputWithContext(ctx context.Context) RRSetRoutingPolicyPrimaryBackupPolicyPtrOutput {
	return o
}

func (o RRSetRoutingPolicyPrimaryBackupPolicyPtrOutput) Elem() RRSetRoutingPolicyPrimaryBackupPolicyOutput {
	return o.ApplyT(func(v *RRSetRoutingPolicyPrimaryBackupPolicy) RRSetRoutingPolicyPrimaryBackupPolicy {
		if v != nil {
			return *v
		}
		var ret RRSetRoutingPolicyPrimaryBackupPolicy
		return ret
	}).(RRSetRoutingPolicyPrimaryBackupPolicyOutput)
}

// Backup targets provide a regional failover policy for the otherwise global primary targets. If serving state is set to BACKUP, this policy essentially becomes a geo routing policy.
func (o RRSetRoutingPolicyPrimaryBackupPolicyPtrOutput) BackupGeoTargets() RRSetRoutingPolicyGeoPolicyPtrOutput {
	return o.ApplyT(func(v *RRSetRoutingPolicyPrimaryBackupPolicy) *RRSetRoutingPolicyGeoPolicy {
		if v == nil {
			return nil
		}
		return v.BackupGeoTargets
	}).(RRSetRoutingPolicyGeoPolicyPtrOutput)
}

func (o RRSetRoutingPolicyPrimaryBackupPolicyPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RRSetRoutingPolicyPrimaryBackupPolicy) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Endpoints that are health checked before making the routing decision. Unhealthy endpoints are omitted from the results. If all endpoints are unhealthy, we serve a response based on the backup_geo_targets.
func (o RRSetRoutingPolicyPrimaryBackupPolicyPtrOutput) PrimaryTargets() RRSetRoutingPolicyHealthCheckTargetsPtrOutput {
	return o.ApplyT(func(v *RRSetRoutingPolicyPrimaryBackupPolicy) *RRSetRoutingPolicyHealthCheckTargets {
		if v == nil {
			return nil
		}
		return v.PrimaryTargets
	}).(RRSetRoutingPolicyHealthCheckTargetsPtrOutput)
}

// When serving state is PRIMARY, this field provides the option of sending a small percentage of the traffic to the backup targets.
func (o RRSetRoutingPolicyPrimaryBackupPolicyPtrOutput) TrickleTraffic() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *RRSetRoutingPolicyPrimaryBackupPolicy) *float64 {
		if v == nil {
			return nil
		}
		return v.TrickleTraffic
	}).(pulumi.Float64PtrOutput)
}

// Configures a RRSetRoutingPolicy such that all queries are responded with the primary_targets if they are healthy. And if all of them are unhealthy, then we fallback to a geo localized policy.
type RRSetRoutingPolicyPrimaryBackupPolicyResponse struct {
	// Backup targets provide a regional failover policy for the otherwise global primary targets. If serving state is set to BACKUP, this policy essentially becomes a geo routing policy.
	BackupGeoTargets RRSetRoutingPolicyGeoPolicyResponse `pulumi:"backupGeoTargets"`
	Kind             string                              `pulumi:"kind"`
	// Endpoints that are health checked before making the routing decision. Unhealthy endpoints are omitted from the results. If all endpoints are unhealthy, we serve a response based on the backup_geo_targets.
	PrimaryTargets RRSetRoutingPolicyHealthCheckTargetsResponse `pulumi:"primaryTargets"`
	// When serving state is PRIMARY, this field provides the option of sending a small percentage of the traffic to the backup targets.
	TrickleTraffic float64 `pulumi:"trickleTraffic"`
}

// Configures a RRSetRoutingPolicy such that all queries are responded with the primary_targets if they are healthy. And if all of them are unhealthy, then we fallback to a geo localized policy.
type RRSetRoutingPolicyPrimaryBackupPolicyResponseOutput struct{ *pulumi.OutputState }

func (RRSetRoutingPolicyPrimaryBackupPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RRSetRoutingPolicyPrimaryBackupPolicyResponse)(nil)).Elem()
}

func (o RRSetRoutingPolicyPrimaryBackupPolicyResponseOutput) ToRRSetRoutingPolicyPrimaryBackupPolicyResponseOutput() RRSetRoutingPolicyPrimaryBackupPolicyResponseOutput {
	return o
}

func (o RRSetRoutingPolicyPrimaryBackupPolicyResponseOutput) ToRRSetRoutingPolicyPrimaryBackupPolicyResponseOutputWithContext(ctx context.Context) RRSetRoutingPolicyPrimaryBackupPolicyResponseOutput {
	return o
}

// Backup targets provide a regional failover policy for the otherwise global primary targets. If serving state is set to BACKUP, this policy essentially becomes a geo routing policy.
func (o RRSetRoutingPolicyPrimaryBackupPolicyResponseOutput) BackupGeoTargets() RRSetRoutingPolicyGeoPolicyResponseOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyPrimaryBackupPolicyResponse) RRSetRoutingPolicyGeoPolicyResponse {
		return v.BackupGeoTargets
	}).(RRSetRoutingPolicyGeoPolicyResponseOutput)
}

func (o RRSetRoutingPolicyPrimaryBackupPolicyResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyPrimaryBackupPolicyResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// Endpoints that are health checked before making the routing decision. Unhealthy endpoints are omitted from the results. If all endpoints are unhealthy, we serve a response based on the backup_geo_targets.
func (o RRSetRoutingPolicyPrimaryBackupPolicyResponseOutput) PrimaryTargets() RRSetRoutingPolicyHealthCheckTargetsResponseOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyPrimaryBackupPolicyResponse) RRSetRoutingPolicyHealthCheckTargetsResponse {
		return v.PrimaryTargets
	}).(RRSetRoutingPolicyHealthCheckTargetsResponseOutput)
}

// When serving state is PRIMARY, this field provides the option of sending a small percentage of the traffic to the backup targets.
func (o RRSetRoutingPolicyPrimaryBackupPolicyResponseOutput) TrickleTraffic() pulumi.Float64Output {
	return o.ApplyT(func(v RRSetRoutingPolicyPrimaryBackupPolicyResponse) float64 { return v.TrickleTraffic }).(pulumi.Float64Output)
}

// A RRSetRoutingPolicy represents ResourceRecordSet data that is returned dynamically with the response varying based on configured properties such as geolocation or by weighted random selection.
type RRSetRoutingPolicyResponse struct {
	Geo           RRSetRoutingPolicyGeoPolicyResponse           `pulumi:"geo"`
	GeoPolicy     RRSetRoutingPolicyGeoPolicyResponse           `pulumi:"geoPolicy"`
	Kind          string                                        `pulumi:"kind"`
	PrimaryBackup RRSetRoutingPolicyPrimaryBackupPolicyResponse `pulumi:"primaryBackup"`
	Wrr           RRSetRoutingPolicyWrrPolicyResponse           `pulumi:"wrr"`
	WrrPolicy     RRSetRoutingPolicyWrrPolicyResponse           `pulumi:"wrrPolicy"`
}

// A RRSetRoutingPolicy represents ResourceRecordSet data that is returned dynamically with the response varying based on configured properties such as geolocation or by weighted random selection.
type RRSetRoutingPolicyResponseOutput struct{ *pulumi.OutputState }

func (RRSetRoutingPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RRSetRoutingPolicyResponse)(nil)).Elem()
}

func (o RRSetRoutingPolicyResponseOutput) ToRRSetRoutingPolicyResponseOutput() RRSetRoutingPolicyResponseOutput {
	return o
}

func (o RRSetRoutingPolicyResponseOutput) ToRRSetRoutingPolicyResponseOutputWithContext(ctx context.Context) RRSetRoutingPolicyResponseOutput {
	return o
}

func (o RRSetRoutingPolicyResponseOutput) Geo() RRSetRoutingPolicyGeoPolicyResponseOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyResponse) RRSetRoutingPolicyGeoPolicyResponse { return v.Geo }).(RRSetRoutingPolicyGeoPolicyResponseOutput)
}

func (o RRSetRoutingPolicyResponseOutput) GeoPolicy() RRSetRoutingPolicyGeoPolicyResponseOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyResponse) RRSetRoutingPolicyGeoPolicyResponse { return v.GeoPolicy }).(RRSetRoutingPolicyGeoPolicyResponseOutput)
}

func (o RRSetRoutingPolicyResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyResponse) string { return v.Kind }).(pulumi.StringOutput)
}

func (o RRSetRoutingPolicyResponseOutput) PrimaryBackup() RRSetRoutingPolicyPrimaryBackupPolicyResponseOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyResponse) RRSetRoutingPolicyPrimaryBackupPolicyResponse {
		return v.PrimaryBackup
	}).(RRSetRoutingPolicyPrimaryBackupPolicyResponseOutput)
}

func (o RRSetRoutingPolicyResponseOutput) Wrr() RRSetRoutingPolicyWrrPolicyResponseOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyResponse) RRSetRoutingPolicyWrrPolicyResponse { return v.Wrr }).(RRSetRoutingPolicyWrrPolicyResponseOutput)
}

func (o RRSetRoutingPolicyResponseOutput) WrrPolicy() RRSetRoutingPolicyWrrPolicyResponseOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyResponse) RRSetRoutingPolicyWrrPolicyResponse { return v.WrrPolicy }).(RRSetRoutingPolicyWrrPolicyResponseOutput)
}

// Configures a RRSetRoutingPolicy that routes in a weighted round robin fashion.
type RRSetRoutingPolicyWrrPolicy struct {
	Items []RRSetRoutingPolicyWrrPolicyWrrPolicyItem `pulumi:"items"`
	Kind  *string                                    `pulumi:"kind"`
}

// RRSetRoutingPolicyWrrPolicyInput is an input type that accepts RRSetRoutingPolicyWrrPolicyArgs and RRSetRoutingPolicyWrrPolicyOutput values.
// You can construct a concrete instance of `RRSetRoutingPolicyWrrPolicyInput` via:
//
//	RRSetRoutingPolicyWrrPolicyArgs{...}
type RRSetRoutingPolicyWrrPolicyInput interface {
	pulumi.Input

	ToRRSetRoutingPolicyWrrPolicyOutput() RRSetRoutingPolicyWrrPolicyOutput
	ToRRSetRoutingPolicyWrrPolicyOutputWithContext(context.Context) RRSetRoutingPolicyWrrPolicyOutput
}

// Configures a RRSetRoutingPolicy that routes in a weighted round robin fashion.
type RRSetRoutingPolicyWrrPolicyArgs struct {
	Items RRSetRoutingPolicyWrrPolicyWrrPolicyItemArrayInput `pulumi:"items"`
	Kind  pulumi.StringPtrInput                              `pulumi:"kind"`
}

func (RRSetRoutingPolicyWrrPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RRSetRoutingPolicyWrrPolicy)(nil)).Elem()
}

func (i RRSetRoutingPolicyWrrPolicyArgs) ToRRSetRoutingPolicyWrrPolicyOutput() RRSetRoutingPolicyWrrPolicyOutput {
	return i.ToRRSetRoutingPolicyWrrPolicyOutputWithContext(context.Background())
}

func (i RRSetRoutingPolicyWrrPolicyArgs) ToRRSetRoutingPolicyWrrPolicyOutputWithContext(ctx context.Context) RRSetRoutingPolicyWrrPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RRSetRoutingPolicyWrrPolicyOutput)
}

func (i RRSetRoutingPolicyWrrPolicyArgs) ToRRSetRoutingPolicyWrrPolicyPtrOutput() RRSetRoutingPolicyWrrPolicyPtrOutput {
	return i.ToRRSetRoutingPolicyWrrPolicyPtrOutputWithContext(context.Background())
}

func (i RRSetRoutingPolicyWrrPolicyArgs) ToRRSetRoutingPolicyWrrPolicyPtrOutputWithContext(ctx context.Context) RRSetRoutingPolicyWrrPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RRSetRoutingPolicyWrrPolicyOutput).ToRRSetRoutingPolicyWrrPolicyPtrOutputWithContext(ctx)
}

// RRSetRoutingPolicyWrrPolicyPtrInput is an input type that accepts RRSetRoutingPolicyWrrPolicyArgs, RRSetRoutingPolicyWrrPolicyPtr and RRSetRoutingPolicyWrrPolicyPtrOutput values.
// You can construct a concrete instance of `RRSetRoutingPolicyWrrPolicyPtrInput` via:
//
//	        RRSetRoutingPolicyWrrPolicyArgs{...}
//
//	or:
//
//	        nil
type RRSetRoutingPolicyWrrPolicyPtrInput interface {
	pulumi.Input

	ToRRSetRoutingPolicyWrrPolicyPtrOutput() RRSetRoutingPolicyWrrPolicyPtrOutput
	ToRRSetRoutingPolicyWrrPolicyPtrOutputWithContext(context.Context) RRSetRoutingPolicyWrrPolicyPtrOutput
}

type rrsetRoutingPolicyWrrPolicyPtrType RRSetRoutingPolicyWrrPolicyArgs

func RRSetRoutingPolicyWrrPolicyPtr(v *RRSetRoutingPolicyWrrPolicyArgs) RRSetRoutingPolicyWrrPolicyPtrInput {
	return (*rrsetRoutingPolicyWrrPolicyPtrType)(v)
}

func (*rrsetRoutingPolicyWrrPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RRSetRoutingPolicyWrrPolicy)(nil)).Elem()
}

func (i *rrsetRoutingPolicyWrrPolicyPtrType) ToRRSetRoutingPolicyWrrPolicyPtrOutput() RRSetRoutingPolicyWrrPolicyPtrOutput {
	return i.ToRRSetRoutingPolicyWrrPolicyPtrOutputWithContext(context.Background())
}

func (i *rrsetRoutingPolicyWrrPolicyPtrType) ToRRSetRoutingPolicyWrrPolicyPtrOutputWithContext(ctx context.Context) RRSetRoutingPolicyWrrPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RRSetRoutingPolicyWrrPolicyPtrOutput)
}

// Configures a RRSetRoutingPolicy that routes in a weighted round robin fashion.
type RRSetRoutingPolicyWrrPolicyOutput struct{ *pulumi.OutputState }

func (RRSetRoutingPolicyWrrPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RRSetRoutingPolicyWrrPolicy)(nil)).Elem()
}

func (o RRSetRoutingPolicyWrrPolicyOutput) ToRRSetRoutingPolicyWrrPolicyOutput() RRSetRoutingPolicyWrrPolicyOutput {
	return o
}

func (o RRSetRoutingPolicyWrrPolicyOutput) ToRRSetRoutingPolicyWrrPolicyOutputWithContext(ctx context.Context) RRSetRoutingPolicyWrrPolicyOutput {
	return o
}

func (o RRSetRoutingPolicyWrrPolicyOutput) ToRRSetRoutingPolicyWrrPolicyPtrOutput() RRSetRoutingPolicyWrrPolicyPtrOutput {
	return o.ToRRSetRoutingPolicyWrrPolicyPtrOutputWithContext(context.Background())
}

func (o RRSetRoutingPolicyWrrPolicyOutput) ToRRSetRoutingPolicyWrrPolicyPtrOutputWithContext(ctx context.Context) RRSetRoutingPolicyWrrPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RRSetRoutingPolicyWrrPolicy) *RRSetRoutingPolicyWrrPolicy {
		return &v
	}).(RRSetRoutingPolicyWrrPolicyPtrOutput)
}

func (o RRSetRoutingPolicyWrrPolicyOutput) Items() RRSetRoutingPolicyWrrPolicyWrrPolicyItemArrayOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyWrrPolicy) []RRSetRoutingPolicyWrrPolicyWrrPolicyItem { return v.Items }).(RRSetRoutingPolicyWrrPolicyWrrPolicyItemArrayOutput)
}

func (o RRSetRoutingPolicyWrrPolicyOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyWrrPolicy) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

type RRSetRoutingPolicyWrrPolicyPtrOutput struct{ *pulumi.OutputState }

func (RRSetRoutingPolicyWrrPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RRSetRoutingPolicyWrrPolicy)(nil)).Elem()
}

func (o RRSetRoutingPolicyWrrPolicyPtrOutput) ToRRSetRoutingPolicyWrrPolicyPtrOutput() RRSetRoutingPolicyWrrPolicyPtrOutput {
	return o
}

func (o RRSetRoutingPolicyWrrPolicyPtrOutput) ToRRSetRoutingPolicyWrrPolicyPtrOutputWithContext(ctx context.Context) RRSetRoutingPolicyWrrPolicyPtrOutput {
	return o
}

func (o RRSetRoutingPolicyWrrPolicyPtrOutput) Elem() RRSetRoutingPolicyWrrPolicyOutput {
	return o.ApplyT(func(v *RRSetRoutingPolicyWrrPolicy) RRSetRoutingPolicyWrrPolicy {
		if v != nil {
			return *v
		}
		var ret RRSetRoutingPolicyWrrPolicy
		return ret
	}).(RRSetRoutingPolicyWrrPolicyOutput)
}

func (o RRSetRoutingPolicyWrrPolicyPtrOutput) Items() RRSetRoutingPolicyWrrPolicyWrrPolicyItemArrayOutput {
	return o.ApplyT(func(v *RRSetRoutingPolicyWrrPolicy) []RRSetRoutingPolicyWrrPolicyWrrPolicyItem {
		if v == nil {
			return nil
		}
		return v.Items
	}).(RRSetRoutingPolicyWrrPolicyWrrPolicyItemArrayOutput)
}

func (o RRSetRoutingPolicyWrrPolicyPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RRSetRoutingPolicyWrrPolicy) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Configures a RRSetRoutingPolicy that routes in a weighted round robin fashion.
type RRSetRoutingPolicyWrrPolicyResponse struct {
	Items []RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponse `pulumi:"items"`
	Kind  string                                             `pulumi:"kind"`
}

// Configures a RRSetRoutingPolicy that routes in a weighted round robin fashion.
type RRSetRoutingPolicyWrrPolicyResponseOutput struct{ *pulumi.OutputState }

func (RRSetRoutingPolicyWrrPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RRSetRoutingPolicyWrrPolicyResponse)(nil)).Elem()
}

func (o RRSetRoutingPolicyWrrPolicyResponseOutput) ToRRSetRoutingPolicyWrrPolicyResponseOutput() RRSetRoutingPolicyWrrPolicyResponseOutput {
	return o
}

func (o RRSetRoutingPolicyWrrPolicyResponseOutput) ToRRSetRoutingPolicyWrrPolicyResponseOutputWithContext(ctx context.Context) RRSetRoutingPolicyWrrPolicyResponseOutput {
	return o
}

func (o RRSetRoutingPolicyWrrPolicyResponseOutput) Items() RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseArrayOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyWrrPolicyResponse) []RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponse {
		return v.Items
	}).(RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseArrayOutput)
}

func (o RRSetRoutingPolicyWrrPolicyResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyWrrPolicyResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// A routing block which contains the routing information for one WRR item.
type RRSetRoutingPolicyWrrPolicyWrrPolicyItem struct {
	// Endpoints that are health checked before making the routing decision. The unhealthy endpoints are omitted from the result. If all endpoints within a bucket are unhealthy, we choose a different bucket (sampled with respect to its weight) for responding. If DNSSEC is enabled for this zone, only one of rrdata or health_checked_targets can be set.
	HealthCheckedTargets *RRSetRoutingPolicyHealthCheckTargets `pulumi:"healthCheckedTargets"`
	Kind                 *string                               `pulumi:"kind"`
	Rrdatas              []string                              `pulumi:"rrdatas"`
	// DNSSEC generated signatures for all the rrdata within this item. Note that if health checked targets are provided for DNSSEC enabled zones, there's a restriction of 1 IP address per item.
	SignatureRrdatas []string `pulumi:"signatureRrdatas"`
	// The weight corresponding to this WrrPolicyItem object. When multiple WrrPolicyItem objects are configured, the probability of returning an WrrPolicyItem object's data is proportional to its weight relative to the sum of weights configured for all items. This weight must be non-negative.
	Weight *float64 `pulumi:"weight"`
}

// RRSetRoutingPolicyWrrPolicyWrrPolicyItemInput is an input type that accepts RRSetRoutingPolicyWrrPolicyWrrPolicyItemArgs and RRSetRoutingPolicyWrrPolicyWrrPolicyItemOutput values.
// You can construct a concrete instance of `RRSetRoutingPolicyWrrPolicyWrrPolicyItemInput` via:
//
//	RRSetRoutingPolicyWrrPolicyWrrPolicyItemArgs{...}
type RRSetRoutingPolicyWrrPolicyWrrPolicyItemInput interface {
	pulumi.Input

	ToRRSetRoutingPolicyWrrPolicyWrrPolicyItemOutput() RRSetRoutingPolicyWrrPolicyWrrPolicyItemOutput
	ToRRSetRoutingPolicyWrrPolicyWrrPolicyItemOutputWithContext(context.Context) RRSetRoutingPolicyWrrPolicyWrrPolicyItemOutput
}

// A routing block which contains the routing information for one WRR item.
type RRSetRoutingPolicyWrrPolicyWrrPolicyItemArgs struct {
	// Endpoints that are health checked before making the routing decision. The unhealthy endpoints are omitted from the result. If all endpoints within a bucket are unhealthy, we choose a different bucket (sampled with respect to its weight) for responding. If DNSSEC is enabled for this zone, only one of rrdata or health_checked_targets can be set.
	HealthCheckedTargets RRSetRoutingPolicyHealthCheckTargetsPtrInput `pulumi:"healthCheckedTargets"`
	Kind                 pulumi.StringPtrInput                        `pulumi:"kind"`
	Rrdatas              pulumi.StringArrayInput                      `pulumi:"rrdatas"`
	// DNSSEC generated signatures for all the rrdata within this item. Note that if health checked targets are provided for DNSSEC enabled zones, there's a restriction of 1 IP address per item.
	SignatureRrdatas pulumi.StringArrayInput `pulumi:"signatureRrdatas"`
	// The weight corresponding to this WrrPolicyItem object. When multiple WrrPolicyItem objects are configured, the probability of returning an WrrPolicyItem object's data is proportional to its weight relative to the sum of weights configured for all items. This weight must be non-negative.
	Weight pulumi.Float64PtrInput `pulumi:"weight"`
}

func (RRSetRoutingPolicyWrrPolicyWrrPolicyItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RRSetRoutingPolicyWrrPolicyWrrPolicyItem)(nil)).Elem()
}

func (i RRSetRoutingPolicyWrrPolicyWrrPolicyItemArgs) ToRRSetRoutingPolicyWrrPolicyWrrPolicyItemOutput() RRSetRoutingPolicyWrrPolicyWrrPolicyItemOutput {
	return i.ToRRSetRoutingPolicyWrrPolicyWrrPolicyItemOutputWithContext(context.Background())
}

func (i RRSetRoutingPolicyWrrPolicyWrrPolicyItemArgs) ToRRSetRoutingPolicyWrrPolicyWrrPolicyItemOutputWithContext(ctx context.Context) RRSetRoutingPolicyWrrPolicyWrrPolicyItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RRSetRoutingPolicyWrrPolicyWrrPolicyItemOutput)
}

// RRSetRoutingPolicyWrrPolicyWrrPolicyItemArrayInput is an input type that accepts RRSetRoutingPolicyWrrPolicyWrrPolicyItemArray and RRSetRoutingPolicyWrrPolicyWrrPolicyItemArrayOutput values.
// You can construct a concrete instance of `RRSetRoutingPolicyWrrPolicyWrrPolicyItemArrayInput` via:
//
//	RRSetRoutingPolicyWrrPolicyWrrPolicyItemArray{ RRSetRoutingPolicyWrrPolicyWrrPolicyItemArgs{...} }
type RRSetRoutingPolicyWrrPolicyWrrPolicyItemArrayInput interface {
	pulumi.Input

	ToRRSetRoutingPolicyWrrPolicyWrrPolicyItemArrayOutput() RRSetRoutingPolicyWrrPolicyWrrPolicyItemArrayOutput
	ToRRSetRoutingPolicyWrrPolicyWrrPolicyItemArrayOutputWithContext(context.Context) RRSetRoutingPolicyWrrPolicyWrrPolicyItemArrayOutput
}

type RRSetRoutingPolicyWrrPolicyWrrPolicyItemArray []RRSetRoutingPolicyWrrPolicyWrrPolicyItemInput

func (RRSetRoutingPolicyWrrPolicyWrrPolicyItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RRSetRoutingPolicyWrrPolicyWrrPolicyItem)(nil)).Elem()
}

func (i RRSetRoutingPolicyWrrPolicyWrrPolicyItemArray) ToRRSetRoutingPolicyWrrPolicyWrrPolicyItemArrayOutput() RRSetRoutingPolicyWrrPolicyWrrPolicyItemArrayOutput {
	return i.ToRRSetRoutingPolicyWrrPolicyWrrPolicyItemArrayOutputWithContext(context.Background())
}

func (i RRSetRoutingPolicyWrrPolicyWrrPolicyItemArray) ToRRSetRoutingPolicyWrrPolicyWrrPolicyItemArrayOutputWithContext(ctx context.Context) RRSetRoutingPolicyWrrPolicyWrrPolicyItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RRSetRoutingPolicyWrrPolicyWrrPolicyItemArrayOutput)
}

// A routing block which contains the routing information for one WRR item.
type RRSetRoutingPolicyWrrPolicyWrrPolicyItemOutput struct{ *pulumi.OutputState }

func (RRSetRoutingPolicyWrrPolicyWrrPolicyItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RRSetRoutingPolicyWrrPolicyWrrPolicyItem)(nil)).Elem()
}

func (o RRSetRoutingPolicyWrrPolicyWrrPolicyItemOutput) ToRRSetRoutingPolicyWrrPolicyWrrPolicyItemOutput() RRSetRoutingPolicyWrrPolicyWrrPolicyItemOutput {
	return o
}

func (o RRSetRoutingPolicyWrrPolicyWrrPolicyItemOutput) ToRRSetRoutingPolicyWrrPolicyWrrPolicyItemOutputWithContext(ctx context.Context) RRSetRoutingPolicyWrrPolicyWrrPolicyItemOutput {
	return o
}

// Endpoints that are health checked before making the routing decision. The unhealthy endpoints are omitted from the result. If all endpoints within a bucket are unhealthy, we choose a different bucket (sampled with respect to its weight) for responding. If DNSSEC is enabled for this zone, only one of rrdata or health_checked_targets can be set.
func (o RRSetRoutingPolicyWrrPolicyWrrPolicyItemOutput) HealthCheckedTargets() RRSetRoutingPolicyHealthCheckTargetsPtrOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyWrrPolicyWrrPolicyItem) *RRSetRoutingPolicyHealthCheckTargets {
		return v.HealthCheckedTargets
	}).(RRSetRoutingPolicyHealthCheckTargetsPtrOutput)
}

func (o RRSetRoutingPolicyWrrPolicyWrrPolicyItemOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyWrrPolicyWrrPolicyItem) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o RRSetRoutingPolicyWrrPolicyWrrPolicyItemOutput) Rrdatas() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyWrrPolicyWrrPolicyItem) []string { return v.Rrdatas }).(pulumi.StringArrayOutput)
}

// DNSSEC generated signatures for all the rrdata within this item. Note that if health checked targets are provided for DNSSEC enabled zones, there's a restriction of 1 IP address per item.
func (o RRSetRoutingPolicyWrrPolicyWrrPolicyItemOutput) SignatureRrdatas() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyWrrPolicyWrrPolicyItem) []string { return v.SignatureRrdatas }).(pulumi.StringArrayOutput)
}

// The weight corresponding to this WrrPolicyItem object. When multiple WrrPolicyItem objects are configured, the probability of returning an WrrPolicyItem object's data is proportional to its weight relative to the sum of weights configured for all items. This weight must be non-negative.
func (o RRSetRoutingPolicyWrrPolicyWrrPolicyItemOutput) Weight() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyWrrPolicyWrrPolicyItem) *float64 { return v.Weight }).(pulumi.Float64PtrOutput)
}

type RRSetRoutingPolicyWrrPolicyWrrPolicyItemArrayOutput struct{ *pulumi.OutputState }

func (RRSetRoutingPolicyWrrPolicyWrrPolicyItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RRSetRoutingPolicyWrrPolicyWrrPolicyItem)(nil)).Elem()
}

func (o RRSetRoutingPolicyWrrPolicyWrrPolicyItemArrayOutput) ToRRSetRoutingPolicyWrrPolicyWrrPolicyItemArrayOutput() RRSetRoutingPolicyWrrPolicyWrrPolicyItemArrayOutput {
	return o
}

func (o RRSetRoutingPolicyWrrPolicyWrrPolicyItemArrayOutput) ToRRSetRoutingPolicyWrrPolicyWrrPolicyItemArrayOutputWithContext(ctx context.Context) RRSetRoutingPolicyWrrPolicyWrrPolicyItemArrayOutput {
	return o
}

func (o RRSetRoutingPolicyWrrPolicyWrrPolicyItemArrayOutput) Index(i pulumi.IntInput) RRSetRoutingPolicyWrrPolicyWrrPolicyItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RRSetRoutingPolicyWrrPolicyWrrPolicyItem {
		return vs[0].([]RRSetRoutingPolicyWrrPolicyWrrPolicyItem)[vs[1].(int)]
	}).(RRSetRoutingPolicyWrrPolicyWrrPolicyItemOutput)
}

// A routing block which contains the routing information for one WRR item.
type RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponse struct {
	// Endpoints that are health checked before making the routing decision. The unhealthy endpoints are omitted from the result. If all endpoints within a bucket are unhealthy, we choose a different bucket (sampled with respect to its weight) for responding. If DNSSEC is enabled for this zone, only one of rrdata or health_checked_targets can be set.
	HealthCheckedTargets RRSetRoutingPolicyHealthCheckTargetsResponse `pulumi:"healthCheckedTargets"`
	Kind                 string                                       `pulumi:"kind"`
	Rrdatas              []string                                     `pulumi:"rrdatas"`
	// DNSSEC generated signatures for all the rrdata within this item. Note that if health checked targets are provided for DNSSEC enabled zones, there's a restriction of 1 IP address per item.
	SignatureRrdatas []string `pulumi:"signatureRrdatas"`
	// The weight corresponding to this WrrPolicyItem object. When multiple WrrPolicyItem objects are configured, the probability of returning an WrrPolicyItem object's data is proportional to its weight relative to the sum of weights configured for all items. This weight must be non-negative.
	Weight float64 `pulumi:"weight"`
}

// A routing block which contains the routing information for one WRR item.
type RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseOutput struct{ *pulumi.OutputState }

func (RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponse)(nil)).Elem()
}

func (o RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseOutput) ToRRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseOutput() RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseOutput {
	return o
}

func (o RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseOutput) ToRRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseOutputWithContext(ctx context.Context) RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseOutput {
	return o
}

// Endpoints that are health checked before making the routing decision. The unhealthy endpoints are omitted from the result. If all endpoints within a bucket are unhealthy, we choose a different bucket (sampled with respect to its weight) for responding. If DNSSEC is enabled for this zone, only one of rrdata or health_checked_targets can be set.
func (o RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseOutput) HealthCheckedTargets() RRSetRoutingPolicyHealthCheckTargetsResponseOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponse) RRSetRoutingPolicyHealthCheckTargetsResponse {
		return v.HealthCheckedTargets
	}).(RRSetRoutingPolicyHealthCheckTargetsResponseOutput)
}

func (o RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponse) string { return v.Kind }).(pulumi.StringOutput)
}

func (o RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseOutput) Rrdatas() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponse) []string { return v.Rrdatas }).(pulumi.StringArrayOutput)
}

// DNSSEC generated signatures for all the rrdata within this item. Note that if health checked targets are provided for DNSSEC enabled zones, there's a restriction of 1 IP address per item.
func (o RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseOutput) SignatureRrdatas() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponse) []string { return v.SignatureRrdatas }).(pulumi.StringArrayOutput)
}

// The weight corresponding to this WrrPolicyItem object. When multiple WrrPolicyItem objects are configured, the probability of returning an WrrPolicyItem object's data is proportional to its weight relative to the sum of weights configured for all items. This weight must be non-negative.
func (o RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseOutput) Weight() pulumi.Float64Output {
	return o.ApplyT(func(v RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponse) float64 { return v.Weight }).(pulumi.Float64Output)
}

type RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseArrayOutput struct{ *pulumi.OutputState }

func (RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponse)(nil)).Elem()
}

func (o RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseArrayOutput) ToRRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseArrayOutput() RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseArrayOutput {
	return o
}

func (o RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseArrayOutput) ToRRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseArrayOutputWithContext(ctx context.Context) RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseArrayOutput {
	return o
}

func (o RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseArrayOutput) Index(i pulumi.IntInput) RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponse {
		return vs[0].([]RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponse)[vs[1].(int)]
	}).(RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseOutput)
}

// A unit of data that is returned by the DNS servers.
type ResourceRecordSetType struct {
	Kind *string `pulumi:"kind"`
	// For example, www.example.com.
	Name *string `pulumi:"name"`
	// Configures dynamic query responses based on either the geo location of the querying user or a weighted round robin based routing policy. A valid ResourceRecordSet contains only rrdata (for static resolution) or a routing_policy (for dynamic resolution).
	RoutingPolicy *RRSetRoutingPolicy `pulumi:"routingPolicy"`
	// As defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1) -- see examples.
	Rrdatas []string `pulumi:"rrdatas"`
	// As defined in RFC 4034 (section 3.2).
	SignatureRrdatas []string `pulumi:"signatureRrdatas"`
	// Number of seconds that this ResourceRecordSet can be cached by resolvers.
	Ttl *int `pulumi:"ttl"`
	// The identifier of a supported record type. See the list of Supported DNS record types.
	Type *string `pulumi:"type"`
}

// ResourceRecordSetTypeInput is an input type that accepts ResourceRecordSetTypeArgs and ResourceRecordSetTypeOutput values.
// You can construct a concrete instance of `ResourceRecordSetTypeInput` via:
//
//	ResourceRecordSetTypeArgs{...}
type ResourceRecordSetTypeInput interface {
	pulumi.Input

	ToResourceRecordSetTypeOutput() ResourceRecordSetTypeOutput
	ToResourceRecordSetTypeOutputWithContext(context.Context) ResourceRecordSetTypeOutput
}

// A unit of data that is returned by the DNS servers.
type ResourceRecordSetTypeArgs struct {
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// For example, www.example.com.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Configures dynamic query responses based on either the geo location of the querying user or a weighted round robin based routing policy. A valid ResourceRecordSet contains only rrdata (for static resolution) or a routing_policy (for dynamic resolution).
	RoutingPolicy RRSetRoutingPolicyPtrInput `pulumi:"routingPolicy"`
	// As defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1) -- see examples.
	Rrdatas pulumi.StringArrayInput `pulumi:"rrdatas"`
	// As defined in RFC 4034 (section 3.2).
	SignatureRrdatas pulumi.StringArrayInput `pulumi:"signatureRrdatas"`
	// Number of seconds that this ResourceRecordSet can be cached by resolvers.
	Ttl pulumi.IntPtrInput `pulumi:"ttl"`
	// The identifier of a supported record type. See the list of Supported DNS record types.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ResourceRecordSetTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRecordSetType)(nil)).Elem()
}

func (i ResourceRecordSetTypeArgs) ToResourceRecordSetTypeOutput() ResourceRecordSetTypeOutput {
	return i.ToResourceRecordSetTypeOutputWithContext(context.Background())
}

func (i ResourceRecordSetTypeArgs) ToResourceRecordSetTypeOutputWithContext(ctx context.Context) ResourceRecordSetTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRecordSetTypeOutput)
}

// ResourceRecordSetTypeArrayInput is an input type that accepts ResourceRecordSetTypeArray and ResourceRecordSetTypeArrayOutput values.
// You can construct a concrete instance of `ResourceRecordSetTypeArrayInput` via:
//
//	ResourceRecordSetTypeArray{ ResourceRecordSetTypeArgs{...} }
type ResourceRecordSetTypeArrayInput interface {
	pulumi.Input

	ToResourceRecordSetTypeArrayOutput() ResourceRecordSetTypeArrayOutput
	ToResourceRecordSetTypeArrayOutputWithContext(context.Context) ResourceRecordSetTypeArrayOutput
}

type ResourceRecordSetTypeArray []ResourceRecordSetTypeInput

func (ResourceRecordSetTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceRecordSetType)(nil)).Elem()
}

func (i ResourceRecordSetTypeArray) ToResourceRecordSetTypeArrayOutput() ResourceRecordSetTypeArrayOutput {
	return i.ToResourceRecordSetTypeArrayOutputWithContext(context.Background())
}

func (i ResourceRecordSetTypeArray) ToResourceRecordSetTypeArrayOutputWithContext(ctx context.Context) ResourceRecordSetTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRecordSetTypeArrayOutput)
}

// A unit of data that is returned by the DNS servers.
type ResourceRecordSetTypeOutput struct{ *pulumi.OutputState }

func (ResourceRecordSetTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRecordSetType)(nil)).Elem()
}

func (o ResourceRecordSetTypeOutput) ToResourceRecordSetTypeOutput() ResourceRecordSetTypeOutput {
	return o
}

func (o ResourceRecordSetTypeOutput) ToResourceRecordSetTypeOutputWithContext(ctx context.Context) ResourceRecordSetTypeOutput {
	return o
}

func (o ResourceRecordSetTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceRecordSetType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// For example, www.example.com.
func (o ResourceRecordSetTypeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceRecordSetType) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Configures dynamic query responses based on either the geo location of the querying user or a weighted round robin based routing policy. A valid ResourceRecordSet contains only rrdata (for static resolution) or a routing_policy (for dynamic resolution).
func (o ResourceRecordSetTypeOutput) RoutingPolicy() RRSetRoutingPolicyPtrOutput {
	return o.ApplyT(func(v ResourceRecordSetType) *RRSetRoutingPolicy { return v.RoutingPolicy }).(RRSetRoutingPolicyPtrOutput)
}

// As defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1) -- see examples.
func (o ResourceRecordSetTypeOutput) Rrdatas() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResourceRecordSetType) []string { return v.Rrdatas }).(pulumi.StringArrayOutput)
}

// As defined in RFC 4034 (section 3.2).
func (o ResourceRecordSetTypeOutput) SignatureRrdatas() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResourceRecordSetType) []string { return v.SignatureRrdatas }).(pulumi.StringArrayOutput)
}

// Number of seconds that this ResourceRecordSet can be cached by resolvers.
func (o ResourceRecordSetTypeOutput) Ttl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceRecordSetType) *int { return v.Ttl }).(pulumi.IntPtrOutput)
}

// The identifier of a supported record type. See the list of Supported DNS record types.
func (o ResourceRecordSetTypeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceRecordSetType) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ResourceRecordSetTypeArrayOutput struct{ *pulumi.OutputState }

func (ResourceRecordSetTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceRecordSetType)(nil)).Elem()
}

func (o ResourceRecordSetTypeArrayOutput) ToResourceRecordSetTypeArrayOutput() ResourceRecordSetTypeArrayOutput {
	return o
}

func (o ResourceRecordSetTypeArrayOutput) ToResourceRecordSetTypeArrayOutputWithContext(ctx context.Context) ResourceRecordSetTypeArrayOutput {
	return o
}

func (o ResourceRecordSetTypeArrayOutput) Index(i pulumi.IntInput) ResourceRecordSetTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceRecordSetType {
		return vs[0].([]ResourceRecordSetType)[vs[1].(int)]
	}).(ResourceRecordSetTypeOutput)
}

// A unit of data that is returned by the DNS servers.
type ResourceRecordSetResponse struct {
	Kind string `pulumi:"kind"`
	// For example, www.example.com.
	Name string `pulumi:"name"`
	// Configures dynamic query responses based on either the geo location of the querying user or a weighted round robin based routing policy. A valid ResourceRecordSet contains only rrdata (for static resolution) or a routing_policy (for dynamic resolution).
	RoutingPolicy RRSetRoutingPolicyResponse `pulumi:"routingPolicy"`
	// As defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1) -- see examples.
	Rrdatas []string `pulumi:"rrdatas"`
	// As defined in RFC 4034 (section 3.2).
	SignatureRrdatas []string `pulumi:"signatureRrdatas"`
	// Number of seconds that this ResourceRecordSet can be cached by resolvers.
	Ttl int `pulumi:"ttl"`
	// The identifier of a supported record type. See the list of Supported DNS record types.
	Type string `pulumi:"type"`
}

// A unit of data that is returned by the DNS servers.
type ResourceRecordSetResponseOutput struct{ *pulumi.OutputState }

func (ResourceRecordSetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRecordSetResponse)(nil)).Elem()
}

func (o ResourceRecordSetResponseOutput) ToResourceRecordSetResponseOutput() ResourceRecordSetResponseOutput {
	return o
}

func (o ResourceRecordSetResponseOutput) ToResourceRecordSetResponseOutputWithContext(ctx context.Context) ResourceRecordSetResponseOutput {
	return o
}

func (o ResourceRecordSetResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceRecordSetResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// For example, www.example.com.
func (o ResourceRecordSetResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceRecordSetResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Configures dynamic query responses based on either the geo location of the querying user or a weighted round robin based routing policy. A valid ResourceRecordSet contains only rrdata (for static resolution) or a routing_policy (for dynamic resolution).
func (o ResourceRecordSetResponseOutput) RoutingPolicy() RRSetRoutingPolicyResponseOutput {
	return o.ApplyT(func(v ResourceRecordSetResponse) RRSetRoutingPolicyResponse { return v.RoutingPolicy }).(RRSetRoutingPolicyResponseOutput)
}

// As defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1) -- see examples.
func (o ResourceRecordSetResponseOutput) Rrdatas() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResourceRecordSetResponse) []string { return v.Rrdatas }).(pulumi.StringArrayOutput)
}

// As defined in RFC 4034 (section 3.2).
func (o ResourceRecordSetResponseOutput) SignatureRrdatas() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResourceRecordSetResponse) []string { return v.SignatureRrdatas }).(pulumi.StringArrayOutput)
}

// Number of seconds that this ResourceRecordSet can be cached by resolvers.
func (o ResourceRecordSetResponseOutput) Ttl() pulumi.IntOutput {
	return o.ApplyT(func(v ResourceRecordSetResponse) int { return v.Ttl }).(pulumi.IntOutput)
}

// The identifier of a supported record type. See the list of Supported DNS record types.
func (o ResourceRecordSetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceRecordSetResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ResourceRecordSetResponseArrayOutput struct{ *pulumi.OutputState }

func (ResourceRecordSetResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceRecordSetResponse)(nil)).Elem()
}

func (o ResourceRecordSetResponseArrayOutput) ToResourceRecordSetResponseArrayOutput() ResourceRecordSetResponseArrayOutput {
	return o
}

func (o ResourceRecordSetResponseArrayOutput) ToResourceRecordSetResponseArrayOutputWithContext(ctx context.Context) ResourceRecordSetResponseArrayOutput {
	return o
}

func (o ResourceRecordSetResponseArrayOutput) Index(i pulumi.IntInput) ResourceRecordSetResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceRecordSetResponse {
		return vs[0].([]ResourceRecordSetResponse)[vs[1].(int)]
	}).(ResourceRecordSetResponseOutput)
}

type ResponsePolicyGKECluster struct {
	// The resource name of the cluster to bind this response policy to. This should be specified in the format like: projects/*/locations/*/clusters/*. This is referenced from GKE projects.locations.clusters.get API: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/get
	GkeClusterName *string `pulumi:"gkeClusterName"`
	Kind           *string `pulumi:"kind"`
}

// ResponsePolicyGKEClusterInput is an input type that accepts ResponsePolicyGKEClusterArgs and ResponsePolicyGKEClusterOutput values.
// You can construct a concrete instance of `ResponsePolicyGKEClusterInput` via:
//
//	ResponsePolicyGKEClusterArgs{...}
type ResponsePolicyGKEClusterInput interface {
	pulumi.Input

	ToResponsePolicyGKEClusterOutput() ResponsePolicyGKEClusterOutput
	ToResponsePolicyGKEClusterOutputWithContext(context.Context) ResponsePolicyGKEClusterOutput
}

type ResponsePolicyGKEClusterArgs struct {
	// The resource name of the cluster to bind this response policy to. This should be specified in the format like: projects/*/locations/*/clusters/*. This is referenced from GKE projects.locations.clusters.get API: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/get
	GkeClusterName pulumi.StringPtrInput `pulumi:"gkeClusterName"`
	Kind           pulumi.StringPtrInput `pulumi:"kind"`
}

func (ResponsePolicyGKEClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsePolicyGKECluster)(nil)).Elem()
}

func (i ResponsePolicyGKEClusterArgs) ToResponsePolicyGKEClusterOutput() ResponsePolicyGKEClusterOutput {
	return i.ToResponsePolicyGKEClusterOutputWithContext(context.Background())
}

func (i ResponsePolicyGKEClusterArgs) ToResponsePolicyGKEClusterOutputWithContext(ctx context.Context) ResponsePolicyGKEClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResponsePolicyGKEClusterOutput)
}

// ResponsePolicyGKEClusterArrayInput is an input type that accepts ResponsePolicyGKEClusterArray and ResponsePolicyGKEClusterArrayOutput values.
// You can construct a concrete instance of `ResponsePolicyGKEClusterArrayInput` via:
//
//	ResponsePolicyGKEClusterArray{ ResponsePolicyGKEClusterArgs{...} }
type ResponsePolicyGKEClusterArrayInput interface {
	pulumi.Input

	ToResponsePolicyGKEClusterArrayOutput() ResponsePolicyGKEClusterArrayOutput
	ToResponsePolicyGKEClusterArrayOutputWithContext(context.Context) ResponsePolicyGKEClusterArrayOutput
}

type ResponsePolicyGKEClusterArray []ResponsePolicyGKEClusterInput

func (ResponsePolicyGKEClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResponsePolicyGKECluster)(nil)).Elem()
}

func (i ResponsePolicyGKEClusterArray) ToResponsePolicyGKEClusterArrayOutput() ResponsePolicyGKEClusterArrayOutput {
	return i.ToResponsePolicyGKEClusterArrayOutputWithContext(context.Background())
}

func (i ResponsePolicyGKEClusterArray) ToResponsePolicyGKEClusterArrayOutputWithContext(ctx context.Context) ResponsePolicyGKEClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResponsePolicyGKEClusterArrayOutput)
}

type ResponsePolicyGKEClusterOutput struct{ *pulumi.OutputState }

func (ResponsePolicyGKEClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsePolicyGKECluster)(nil)).Elem()
}

func (o ResponsePolicyGKEClusterOutput) ToResponsePolicyGKEClusterOutput() ResponsePolicyGKEClusterOutput {
	return o
}

func (o ResponsePolicyGKEClusterOutput) ToResponsePolicyGKEClusterOutputWithContext(ctx context.Context) ResponsePolicyGKEClusterOutput {
	return o
}

// The resource name of the cluster to bind this response policy to. This should be specified in the format like: projects/*/locations/*/clusters/*. This is referenced from GKE projects.locations.clusters.get API: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/get
func (o ResponsePolicyGKEClusterOutput) GkeClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResponsePolicyGKECluster) *string { return v.GkeClusterName }).(pulumi.StringPtrOutput)
}

func (o ResponsePolicyGKEClusterOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResponsePolicyGKECluster) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

type ResponsePolicyGKEClusterArrayOutput struct{ *pulumi.OutputState }

func (ResponsePolicyGKEClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResponsePolicyGKECluster)(nil)).Elem()
}

func (o ResponsePolicyGKEClusterArrayOutput) ToResponsePolicyGKEClusterArrayOutput() ResponsePolicyGKEClusterArrayOutput {
	return o
}

func (o ResponsePolicyGKEClusterArrayOutput) ToResponsePolicyGKEClusterArrayOutputWithContext(ctx context.Context) ResponsePolicyGKEClusterArrayOutput {
	return o
}

func (o ResponsePolicyGKEClusterArrayOutput) Index(i pulumi.IntInput) ResponsePolicyGKEClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResponsePolicyGKECluster {
		return vs[0].([]ResponsePolicyGKECluster)[vs[1].(int)]
	}).(ResponsePolicyGKEClusterOutput)
}

type ResponsePolicyGKEClusterResponse struct {
	// The resource name of the cluster to bind this response policy to. This should be specified in the format like: projects/*/locations/*/clusters/*. This is referenced from GKE projects.locations.clusters.get API: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/get
	GkeClusterName string `pulumi:"gkeClusterName"`
	Kind           string `pulumi:"kind"`
}

type ResponsePolicyGKEClusterResponseOutput struct{ *pulumi.OutputState }

func (ResponsePolicyGKEClusterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsePolicyGKEClusterResponse)(nil)).Elem()
}

func (o ResponsePolicyGKEClusterResponseOutput) ToResponsePolicyGKEClusterResponseOutput() ResponsePolicyGKEClusterResponseOutput {
	return o
}

func (o ResponsePolicyGKEClusterResponseOutput) ToResponsePolicyGKEClusterResponseOutputWithContext(ctx context.Context) ResponsePolicyGKEClusterResponseOutput {
	return o
}

// The resource name of the cluster to bind this response policy to. This should be specified in the format like: projects/*/locations/*/clusters/*. This is referenced from GKE projects.locations.clusters.get API: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/get
func (o ResponsePolicyGKEClusterResponseOutput) GkeClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v ResponsePolicyGKEClusterResponse) string { return v.GkeClusterName }).(pulumi.StringOutput)
}

func (o ResponsePolicyGKEClusterResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v ResponsePolicyGKEClusterResponse) string { return v.Kind }).(pulumi.StringOutput)
}

type ResponsePolicyGKEClusterResponseArrayOutput struct{ *pulumi.OutputState }

func (ResponsePolicyGKEClusterResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResponsePolicyGKEClusterResponse)(nil)).Elem()
}

func (o ResponsePolicyGKEClusterResponseArrayOutput) ToResponsePolicyGKEClusterResponseArrayOutput() ResponsePolicyGKEClusterResponseArrayOutput {
	return o
}

func (o ResponsePolicyGKEClusterResponseArrayOutput) ToResponsePolicyGKEClusterResponseArrayOutputWithContext(ctx context.Context) ResponsePolicyGKEClusterResponseArrayOutput {
	return o
}

func (o ResponsePolicyGKEClusterResponseArrayOutput) Index(i pulumi.IntInput) ResponsePolicyGKEClusterResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResponsePolicyGKEClusterResponse {
		return vs[0].([]ResponsePolicyGKEClusterResponse)[vs[1].(int)]
	}).(ResponsePolicyGKEClusterResponseOutput)
}

type ResponsePolicyNetwork struct {
	Kind *string `pulumi:"kind"`
	// The fully qualified URL of the VPC network to bind to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
	NetworkUrl *string `pulumi:"networkUrl"`
}

// ResponsePolicyNetworkInput is an input type that accepts ResponsePolicyNetworkArgs and ResponsePolicyNetworkOutput values.
// You can construct a concrete instance of `ResponsePolicyNetworkInput` via:
//
//	ResponsePolicyNetworkArgs{...}
type ResponsePolicyNetworkInput interface {
	pulumi.Input

	ToResponsePolicyNetworkOutput() ResponsePolicyNetworkOutput
	ToResponsePolicyNetworkOutputWithContext(context.Context) ResponsePolicyNetworkOutput
}

type ResponsePolicyNetworkArgs struct {
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// The fully qualified URL of the VPC network to bind to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
	NetworkUrl pulumi.StringPtrInput `pulumi:"networkUrl"`
}

func (ResponsePolicyNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsePolicyNetwork)(nil)).Elem()
}

func (i ResponsePolicyNetworkArgs) ToResponsePolicyNetworkOutput() ResponsePolicyNetworkOutput {
	return i.ToResponsePolicyNetworkOutputWithContext(context.Background())
}

func (i ResponsePolicyNetworkArgs) ToResponsePolicyNetworkOutputWithContext(ctx context.Context) ResponsePolicyNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResponsePolicyNetworkOutput)
}

// ResponsePolicyNetworkArrayInput is an input type that accepts ResponsePolicyNetworkArray and ResponsePolicyNetworkArrayOutput values.
// You can construct a concrete instance of `ResponsePolicyNetworkArrayInput` via:
//
//	ResponsePolicyNetworkArray{ ResponsePolicyNetworkArgs{...} }
type ResponsePolicyNetworkArrayInput interface {
	pulumi.Input

	ToResponsePolicyNetworkArrayOutput() ResponsePolicyNetworkArrayOutput
	ToResponsePolicyNetworkArrayOutputWithContext(context.Context) ResponsePolicyNetworkArrayOutput
}

type ResponsePolicyNetworkArray []ResponsePolicyNetworkInput

func (ResponsePolicyNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResponsePolicyNetwork)(nil)).Elem()
}

func (i ResponsePolicyNetworkArray) ToResponsePolicyNetworkArrayOutput() ResponsePolicyNetworkArrayOutput {
	return i.ToResponsePolicyNetworkArrayOutputWithContext(context.Background())
}

func (i ResponsePolicyNetworkArray) ToResponsePolicyNetworkArrayOutputWithContext(ctx context.Context) ResponsePolicyNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResponsePolicyNetworkArrayOutput)
}

type ResponsePolicyNetworkOutput struct{ *pulumi.OutputState }

func (ResponsePolicyNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsePolicyNetwork)(nil)).Elem()
}

func (o ResponsePolicyNetworkOutput) ToResponsePolicyNetworkOutput() ResponsePolicyNetworkOutput {
	return o
}

func (o ResponsePolicyNetworkOutput) ToResponsePolicyNetworkOutputWithContext(ctx context.Context) ResponsePolicyNetworkOutput {
	return o
}

func (o ResponsePolicyNetworkOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResponsePolicyNetwork) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// The fully qualified URL of the VPC network to bind to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
func (o ResponsePolicyNetworkOutput) NetworkUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResponsePolicyNetwork) *string { return v.NetworkUrl }).(pulumi.StringPtrOutput)
}

type ResponsePolicyNetworkArrayOutput struct{ *pulumi.OutputState }

func (ResponsePolicyNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResponsePolicyNetwork)(nil)).Elem()
}

func (o ResponsePolicyNetworkArrayOutput) ToResponsePolicyNetworkArrayOutput() ResponsePolicyNetworkArrayOutput {
	return o
}

func (o ResponsePolicyNetworkArrayOutput) ToResponsePolicyNetworkArrayOutputWithContext(ctx context.Context) ResponsePolicyNetworkArrayOutput {
	return o
}

func (o ResponsePolicyNetworkArrayOutput) Index(i pulumi.IntInput) ResponsePolicyNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResponsePolicyNetwork {
		return vs[0].([]ResponsePolicyNetwork)[vs[1].(int)]
	}).(ResponsePolicyNetworkOutput)
}

type ResponsePolicyNetworkResponse struct {
	Kind string `pulumi:"kind"`
	// The fully qualified URL of the VPC network to bind to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
	NetworkUrl string `pulumi:"networkUrl"`
}

type ResponsePolicyNetworkResponseOutput struct{ *pulumi.OutputState }

func (ResponsePolicyNetworkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsePolicyNetworkResponse)(nil)).Elem()
}

func (o ResponsePolicyNetworkResponseOutput) ToResponsePolicyNetworkResponseOutput() ResponsePolicyNetworkResponseOutput {
	return o
}

func (o ResponsePolicyNetworkResponseOutput) ToResponsePolicyNetworkResponseOutputWithContext(ctx context.Context) ResponsePolicyNetworkResponseOutput {
	return o
}

func (o ResponsePolicyNetworkResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v ResponsePolicyNetworkResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// The fully qualified URL of the VPC network to bind to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
func (o ResponsePolicyNetworkResponseOutput) NetworkUrl() pulumi.StringOutput {
	return o.ApplyT(func(v ResponsePolicyNetworkResponse) string { return v.NetworkUrl }).(pulumi.StringOutput)
}

type ResponsePolicyNetworkResponseArrayOutput struct{ *pulumi.OutputState }

func (ResponsePolicyNetworkResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResponsePolicyNetworkResponse)(nil)).Elem()
}

func (o ResponsePolicyNetworkResponseArrayOutput) ToResponsePolicyNetworkResponseArrayOutput() ResponsePolicyNetworkResponseArrayOutput {
	return o
}

func (o ResponsePolicyNetworkResponseArrayOutput) ToResponsePolicyNetworkResponseArrayOutputWithContext(ctx context.Context) ResponsePolicyNetworkResponseArrayOutput {
	return o
}

func (o ResponsePolicyNetworkResponseArrayOutput) Index(i pulumi.IntInput) ResponsePolicyNetworkResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResponsePolicyNetworkResponse {
		return vs[0].([]ResponsePolicyNetworkResponse)[vs[1].(int)]
	}).(ResponsePolicyNetworkResponseOutput)
}

type ResponsePolicyRuleLocalData struct {
	// All resource record sets for this selector, one per resource record type. The name must match the dns_name.
	LocalDatas []ResourceRecordSetType `pulumi:"localDatas"`
}

// ResponsePolicyRuleLocalDataInput is an input type that accepts ResponsePolicyRuleLocalDataArgs and ResponsePolicyRuleLocalDataOutput values.
// You can construct a concrete instance of `ResponsePolicyRuleLocalDataInput` via:
//
//	ResponsePolicyRuleLocalDataArgs{...}
type ResponsePolicyRuleLocalDataInput interface {
	pulumi.Input

	ToResponsePolicyRuleLocalDataOutput() ResponsePolicyRuleLocalDataOutput
	ToResponsePolicyRuleLocalDataOutputWithContext(context.Context) ResponsePolicyRuleLocalDataOutput
}

type ResponsePolicyRuleLocalDataArgs struct {
	// All resource record sets for this selector, one per resource record type. The name must match the dns_name.
	LocalDatas ResourceRecordSetTypeArrayInput `pulumi:"localDatas"`
}

func (ResponsePolicyRuleLocalDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsePolicyRuleLocalData)(nil)).Elem()
}

func (i ResponsePolicyRuleLocalDataArgs) ToResponsePolicyRuleLocalDataOutput() ResponsePolicyRuleLocalDataOutput {
	return i.ToResponsePolicyRuleLocalDataOutputWithContext(context.Background())
}

func (i ResponsePolicyRuleLocalDataArgs) ToResponsePolicyRuleLocalDataOutputWithContext(ctx context.Context) ResponsePolicyRuleLocalDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResponsePolicyRuleLocalDataOutput)
}

func (i ResponsePolicyRuleLocalDataArgs) ToResponsePolicyRuleLocalDataPtrOutput() ResponsePolicyRuleLocalDataPtrOutput {
	return i.ToResponsePolicyRuleLocalDataPtrOutputWithContext(context.Background())
}

func (i ResponsePolicyRuleLocalDataArgs) ToResponsePolicyRuleLocalDataPtrOutputWithContext(ctx context.Context) ResponsePolicyRuleLocalDataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResponsePolicyRuleLocalDataOutput).ToResponsePolicyRuleLocalDataPtrOutputWithContext(ctx)
}

// ResponsePolicyRuleLocalDataPtrInput is an input type that accepts ResponsePolicyRuleLocalDataArgs, ResponsePolicyRuleLocalDataPtr and ResponsePolicyRuleLocalDataPtrOutput values.
// You can construct a concrete instance of `ResponsePolicyRuleLocalDataPtrInput` via:
//
//	        ResponsePolicyRuleLocalDataArgs{...}
//
//	or:
//
//	        nil
type ResponsePolicyRuleLocalDataPtrInput interface {
	pulumi.Input

	ToResponsePolicyRuleLocalDataPtrOutput() ResponsePolicyRuleLocalDataPtrOutput
	ToResponsePolicyRuleLocalDataPtrOutputWithContext(context.Context) ResponsePolicyRuleLocalDataPtrOutput
}

type responsePolicyRuleLocalDataPtrType ResponsePolicyRuleLocalDataArgs

func ResponsePolicyRuleLocalDataPtr(v *ResponsePolicyRuleLocalDataArgs) ResponsePolicyRuleLocalDataPtrInput {
	return (*responsePolicyRuleLocalDataPtrType)(v)
}

func (*responsePolicyRuleLocalDataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResponsePolicyRuleLocalData)(nil)).Elem()
}

func (i *responsePolicyRuleLocalDataPtrType) ToResponsePolicyRuleLocalDataPtrOutput() ResponsePolicyRuleLocalDataPtrOutput {
	return i.ToResponsePolicyRuleLocalDataPtrOutputWithContext(context.Background())
}

func (i *responsePolicyRuleLocalDataPtrType) ToResponsePolicyRuleLocalDataPtrOutputWithContext(ctx context.Context) ResponsePolicyRuleLocalDataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResponsePolicyRuleLocalDataPtrOutput)
}

type ResponsePolicyRuleLocalDataOutput struct{ *pulumi.OutputState }

func (ResponsePolicyRuleLocalDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsePolicyRuleLocalData)(nil)).Elem()
}

func (o ResponsePolicyRuleLocalDataOutput) ToResponsePolicyRuleLocalDataOutput() ResponsePolicyRuleLocalDataOutput {
	return o
}

func (o ResponsePolicyRuleLocalDataOutput) ToResponsePolicyRuleLocalDataOutputWithContext(ctx context.Context) ResponsePolicyRuleLocalDataOutput {
	return o
}

func (o ResponsePolicyRuleLocalDataOutput) ToResponsePolicyRuleLocalDataPtrOutput() ResponsePolicyRuleLocalDataPtrOutput {
	return o.ToResponsePolicyRuleLocalDataPtrOutputWithContext(context.Background())
}

func (o ResponsePolicyRuleLocalDataOutput) ToResponsePolicyRuleLocalDataPtrOutputWithContext(ctx context.Context) ResponsePolicyRuleLocalDataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResponsePolicyRuleLocalData) *ResponsePolicyRuleLocalData {
		return &v
	}).(ResponsePolicyRuleLocalDataPtrOutput)
}

// All resource record sets for this selector, one per resource record type. The name must match the dns_name.
func (o ResponsePolicyRuleLocalDataOutput) LocalDatas() ResourceRecordSetTypeArrayOutput {
	return o.ApplyT(func(v ResponsePolicyRuleLocalData) []ResourceRecordSetType { return v.LocalDatas }).(ResourceRecordSetTypeArrayOutput)
}

type ResponsePolicyRuleLocalDataPtrOutput struct{ *pulumi.OutputState }

func (ResponsePolicyRuleLocalDataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResponsePolicyRuleLocalData)(nil)).Elem()
}

func (o ResponsePolicyRuleLocalDataPtrOutput) ToResponsePolicyRuleLocalDataPtrOutput() ResponsePolicyRuleLocalDataPtrOutput {
	return o
}

func (o ResponsePolicyRuleLocalDataPtrOutput) ToResponsePolicyRuleLocalDataPtrOutputWithContext(ctx context.Context) ResponsePolicyRuleLocalDataPtrOutput {
	return o
}

func (o ResponsePolicyRuleLocalDataPtrOutput) Elem() ResponsePolicyRuleLocalDataOutput {
	return o.ApplyT(func(v *ResponsePolicyRuleLocalData) ResponsePolicyRuleLocalData {
		if v != nil {
			return *v
		}
		var ret ResponsePolicyRuleLocalData
		return ret
	}).(ResponsePolicyRuleLocalDataOutput)
}

// All resource record sets for this selector, one per resource record type. The name must match the dns_name.
func (o ResponsePolicyRuleLocalDataPtrOutput) LocalDatas() ResourceRecordSetTypeArrayOutput {
	return o.ApplyT(func(v *ResponsePolicyRuleLocalData) []ResourceRecordSetType {
		if v == nil {
			return nil
		}
		return v.LocalDatas
	}).(ResourceRecordSetTypeArrayOutput)
}

type ResponsePolicyRuleLocalDataResponse struct {
	// All resource record sets for this selector, one per resource record type. The name must match the dns_name.
	LocalDatas []ResourceRecordSetResponse `pulumi:"localDatas"`
}

type ResponsePolicyRuleLocalDataResponseOutput struct{ *pulumi.OutputState }

func (ResponsePolicyRuleLocalDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsePolicyRuleLocalDataResponse)(nil)).Elem()
}

func (o ResponsePolicyRuleLocalDataResponseOutput) ToResponsePolicyRuleLocalDataResponseOutput() ResponsePolicyRuleLocalDataResponseOutput {
	return o
}

func (o ResponsePolicyRuleLocalDataResponseOutput) ToResponsePolicyRuleLocalDataResponseOutputWithContext(ctx context.Context) ResponsePolicyRuleLocalDataResponseOutput {
	return o
}

// All resource record sets for this selector, one per resource record type. The name must match the dns_name.
func (o ResponsePolicyRuleLocalDataResponseOutput) LocalDatas() ResourceRecordSetResponseArrayOutput {
	return o.ApplyT(func(v ResponsePolicyRuleLocalDataResponse) []ResourceRecordSetResponse { return v.LocalDatas }).(ResourceRecordSetResponseArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DnsKeySpecInput)(nil)).Elem(), DnsKeySpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsKeySpecArrayInput)(nil)).Elem(), DnsKeySpecArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprPtrInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleIamV1AuditConfigInput)(nil)).Elem(), GoogleIamV1AuditConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleIamV1AuditConfigArrayInput)(nil)).Elem(), GoogleIamV1AuditConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleIamV1AuditLogConfigInput)(nil)).Elem(), GoogleIamV1AuditLogConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleIamV1AuditLogConfigArrayInput)(nil)).Elem(), GoogleIamV1AuditLogConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleIamV1BindingInput)(nil)).Elem(), GoogleIamV1BindingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleIamV1BindingArrayInput)(nil)).Elem(), GoogleIamV1BindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZoneCloudLoggingConfigInput)(nil)).Elem(), ManagedZoneCloudLoggingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZoneCloudLoggingConfigPtrInput)(nil)).Elem(), ManagedZoneCloudLoggingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZoneDnsSecConfigInput)(nil)).Elem(), ManagedZoneDnsSecConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZoneDnsSecConfigPtrInput)(nil)).Elem(), ManagedZoneDnsSecConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZoneForwardingConfigInput)(nil)).Elem(), ManagedZoneForwardingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZoneForwardingConfigPtrInput)(nil)).Elem(), ManagedZoneForwardingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZoneForwardingConfigNameServerTargetInput)(nil)).Elem(), ManagedZoneForwardingConfigNameServerTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZoneForwardingConfigNameServerTargetArrayInput)(nil)).Elem(), ManagedZoneForwardingConfigNameServerTargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZonePeeringConfigInput)(nil)).Elem(), ManagedZonePeeringConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZonePeeringConfigPtrInput)(nil)).Elem(), ManagedZonePeeringConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZonePeeringConfigTargetNetworkInput)(nil)).Elem(), ManagedZonePeeringConfigTargetNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZonePeeringConfigTargetNetworkPtrInput)(nil)).Elem(), ManagedZonePeeringConfigTargetNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZonePrivateVisibilityConfigInput)(nil)).Elem(), ManagedZonePrivateVisibilityConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZonePrivateVisibilityConfigPtrInput)(nil)).Elem(), ManagedZonePrivateVisibilityConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZonePrivateVisibilityConfigGKEClusterInput)(nil)).Elem(), ManagedZonePrivateVisibilityConfigGKEClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZonePrivateVisibilityConfigGKEClusterArrayInput)(nil)).Elem(), ManagedZonePrivateVisibilityConfigGKEClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZonePrivateVisibilityConfigNetworkInput)(nil)).Elem(), ManagedZonePrivateVisibilityConfigNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZonePrivateVisibilityConfigNetworkArrayInput)(nil)).Elem(), ManagedZonePrivateVisibilityConfigNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZoneReverseLookupConfigInput)(nil)).Elem(), ManagedZoneReverseLookupConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZoneReverseLookupConfigPtrInput)(nil)).Elem(), ManagedZoneReverseLookupConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZoneServiceDirectoryConfigInput)(nil)).Elem(), ManagedZoneServiceDirectoryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZoneServiceDirectoryConfigPtrInput)(nil)).Elem(), ManagedZoneServiceDirectoryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZoneServiceDirectoryConfigNamespaceInput)(nil)).Elem(), ManagedZoneServiceDirectoryConfigNamespaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZoneServiceDirectoryConfigNamespacePtrInput)(nil)).Elem(), ManagedZoneServiceDirectoryConfigNamespaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyAlternativeNameServerConfigInput)(nil)).Elem(), PolicyAlternativeNameServerConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyAlternativeNameServerConfigPtrInput)(nil)).Elem(), PolicyAlternativeNameServerConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyAlternativeNameServerConfigTargetNameServerInput)(nil)).Elem(), PolicyAlternativeNameServerConfigTargetNameServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyAlternativeNameServerConfigTargetNameServerArrayInput)(nil)).Elem(), PolicyAlternativeNameServerConfigTargetNameServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyNetworkInput)(nil)).Elem(), PolicyNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyNetworkArrayInput)(nil)).Elem(), PolicyNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RRSetRoutingPolicyInput)(nil)).Elem(), RRSetRoutingPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RRSetRoutingPolicyPtrInput)(nil)).Elem(), RRSetRoutingPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RRSetRoutingPolicyGeoPolicyInput)(nil)).Elem(), RRSetRoutingPolicyGeoPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RRSetRoutingPolicyGeoPolicyPtrInput)(nil)).Elem(), RRSetRoutingPolicyGeoPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RRSetRoutingPolicyGeoPolicyGeoPolicyItemInput)(nil)).Elem(), RRSetRoutingPolicyGeoPolicyGeoPolicyItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RRSetRoutingPolicyGeoPolicyGeoPolicyItemArrayInput)(nil)).Elem(), RRSetRoutingPolicyGeoPolicyGeoPolicyItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RRSetRoutingPolicyHealthCheckTargetsInput)(nil)).Elem(), RRSetRoutingPolicyHealthCheckTargetsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RRSetRoutingPolicyHealthCheckTargetsPtrInput)(nil)).Elem(), RRSetRoutingPolicyHealthCheckTargetsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RRSetRoutingPolicyLoadBalancerTargetInput)(nil)).Elem(), RRSetRoutingPolicyLoadBalancerTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RRSetRoutingPolicyLoadBalancerTargetArrayInput)(nil)).Elem(), RRSetRoutingPolicyLoadBalancerTargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RRSetRoutingPolicyPrimaryBackupPolicyInput)(nil)).Elem(), RRSetRoutingPolicyPrimaryBackupPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RRSetRoutingPolicyPrimaryBackupPolicyPtrInput)(nil)).Elem(), RRSetRoutingPolicyPrimaryBackupPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RRSetRoutingPolicyWrrPolicyInput)(nil)).Elem(), RRSetRoutingPolicyWrrPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RRSetRoutingPolicyWrrPolicyPtrInput)(nil)).Elem(), RRSetRoutingPolicyWrrPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RRSetRoutingPolicyWrrPolicyWrrPolicyItemInput)(nil)).Elem(), RRSetRoutingPolicyWrrPolicyWrrPolicyItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RRSetRoutingPolicyWrrPolicyWrrPolicyItemArrayInput)(nil)).Elem(), RRSetRoutingPolicyWrrPolicyWrrPolicyItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceRecordSetTypeInput)(nil)).Elem(), ResourceRecordSetTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceRecordSetTypeArrayInput)(nil)).Elem(), ResourceRecordSetTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResponsePolicyGKEClusterInput)(nil)).Elem(), ResponsePolicyGKEClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResponsePolicyGKEClusterArrayInput)(nil)).Elem(), ResponsePolicyGKEClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResponsePolicyNetworkInput)(nil)).Elem(), ResponsePolicyNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResponsePolicyNetworkArrayInput)(nil)).Elem(), ResponsePolicyNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResponsePolicyRuleLocalDataInput)(nil)).Elem(), ResponsePolicyRuleLocalDataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResponsePolicyRuleLocalDataPtrInput)(nil)).Elem(), ResponsePolicyRuleLocalDataArgs{})
	pulumi.RegisterOutputType(DnsKeySpecOutput{})
	pulumi.RegisterOutputType(DnsKeySpecArrayOutput{})
	pulumi.RegisterOutputType(DnsKeySpecResponseOutput{})
	pulumi.RegisterOutputType(DnsKeySpecResponseArrayOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(ExprResponseOutput{})
	pulumi.RegisterOutputType(GoogleIamV1AuditConfigOutput{})
	pulumi.RegisterOutputType(GoogleIamV1AuditConfigArrayOutput{})
	pulumi.RegisterOutputType(GoogleIamV1AuditConfigResponseOutput{})
	pulumi.RegisterOutputType(GoogleIamV1AuditConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(GoogleIamV1AuditLogConfigOutput{})
	pulumi.RegisterOutputType(GoogleIamV1AuditLogConfigArrayOutput{})
	pulumi.RegisterOutputType(GoogleIamV1AuditLogConfigResponseOutput{})
	pulumi.RegisterOutputType(GoogleIamV1AuditLogConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(GoogleIamV1BindingOutput{})
	pulumi.RegisterOutputType(GoogleIamV1BindingArrayOutput{})
	pulumi.RegisterOutputType(GoogleIamV1BindingResponseOutput{})
	pulumi.RegisterOutputType(GoogleIamV1BindingResponseArrayOutput{})
	pulumi.RegisterOutputType(ManagedZoneCloudLoggingConfigOutput{})
	pulumi.RegisterOutputType(ManagedZoneCloudLoggingConfigPtrOutput{})
	pulumi.RegisterOutputType(ManagedZoneCloudLoggingConfigResponseOutput{})
	pulumi.RegisterOutputType(ManagedZoneDnsSecConfigOutput{})
	pulumi.RegisterOutputType(ManagedZoneDnsSecConfigPtrOutput{})
	pulumi.RegisterOutputType(ManagedZoneDnsSecConfigResponseOutput{})
	pulumi.RegisterOutputType(ManagedZoneForwardingConfigOutput{})
	pulumi.RegisterOutputType(ManagedZoneForwardingConfigPtrOutput{})
	pulumi.RegisterOutputType(ManagedZoneForwardingConfigNameServerTargetOutput{})
	pulumi.RegisterOutputType(ManagedZoneForwardingConfigNameServerTargetArrayOutput{})
	pulumi.RegisterOutputType(ManagedZoneForwardingConfigNameServerTargetResponseOutput{})
	pulumi.RegisterOutputType(ManagedZoneForwardingConfigNameServerTargetResponseArrayOutput{})
	pulumi.RegisterOutputType(ManagedZoneForwardingConfigResponseOutput{})
	pulumi.RegisterOutputType(ManagedZonePeeringConfigOutput{})
	pulumi.RegisterOutputType(ManagedZonePeeringConfigPtrOutput{})
	pulumi.RegisterOutputType(ManagedZonePeeringConfigResponseOutput{})
	pulumi.RegisterOutputType(ManagedZonePeeringConfigTargetNetworkOutput{})
	pulumi.RegisterOutputType(ManagedZonePeeringConfigTargetNetworkPtrOutput{})
	pulumi.RegisterOutputType(ManagedZonePeeringConfigTargetNetworkResponseOutput{})
	pulumi.RegisterOutputType(ManagedZonePrivateVisibilityConfigOutput{})
	pulumi.RegisterOutputType(ManagedZonePrivateVisibilityConfigPtrOutput{})
	pulumi.RegisterOutputType(ManagedZonePrivateVisibilityConfigGKEClusterOutput{})
	pulumi.RegisterOutputType(ManagedZonePrivateVisibilityConfigGKEClusterArrayOutput{})
	pulumi.RegisterOutputType(ManagedZonePrivateVisibilityConfigGKEClusterResponseOutput{})
	pulumi.RegisterOutputType(ManagedZonePrivateVisibilityConfigGKEClusterResponseArrayOutput{})
	pulumi.RegisterOutputType(ManagedZonePrivateVisibilityConfigNetworkOutput{})
	pulumi.RegisterOutputType(ManagedZonePrivateVisibilityConfigNetworkArrayOutput{})
	pulumi.RegisterOutputType(ManagedZonePrivateVisibilityConfigNetworkResponseOutput{})
	pulumi.RegisterOutputType(ManagedZonePrivateVisibilityConfigNetworkResponseArrayOutput{})
	pulumi.RegisterOutputType(ManagedZonePrivateVisibilityConfigResponseOutput{})
	pulumi.RegisterOutputType(ManagedZoneReverseLookupConfigOutput{})
	pulumi.RegisterOutputType(ManagedZoneReverseLookupConfigPtrOutput{})
	pulumi.RegisterOutputType(ManagedZoneReverseLookupConfigResponseOutput{})
	pulumi.RegisterOutputType(ManagedZoneServiceDirectoryConfigOutput{})
	pulumi.RegisterOutputType(ManagedZoneServiceDirectoryConfigPtrOutput{})
	pulumi.RegisterOutputType(ManagedZoneServiceDirectoryConfigNamespaceOutput{})
	pulumi.RegisterOutputType(ManagedZoneServiceDirectoryConfigNamespacePtrOutput{})
	pulumi.RegisterOutputType(ManagedZoneServiceDirectoryConfigNamespaceResponseOutput{})
	pulumi.RegisterOutputType(ManagedZoneServiceDirectoryConfigResponseOutput{})
	pulumi.RegisterOutputType(PolicyAlternativeNameServerConfigOutput{})
	pulumi.RegisterOutputType(PolicyAlternativeNameServerConfigPtrOutput{})
	pulumi.RegisterOutputType(PolicyAlternativeNameServerConfigResponseOutput{})
	pulumi.RegisterOutputType(PolicyAlternativeNameServerConfigTargetNameServerOutput{})
	pulumi.RegisterOutputType(PolicyAlternativeNameServerConfigTargetNameServerArrayOutput{})
	pulumi.RegisterOutputType(PolicyAlternativeNameServerConfigTargetNameServerResponseOutput{})
	pulumi.RegisterOutputType(PolicyAlternativeNameServerConfigTargetNameServerResponseArrayOutput{})
	pulumi.RegisterOutputType(PolicyNetworkOutput{})
	pulumi.RegisterOutputType(PolicyNetworkArrayOutput{})
	pulumi.RegisterOutputType(PolicyNetworkResponseOutput{})
	pulumi.RegisterOutputType(PolicyNetworkResponseArrayOutput{})
	pulumi.RegisterOutputType(RRSetRoutingPolicyOutput{})
	pulumi.RegisterOutputType(RRSetRoutingPolicyPtrOutput{})
	pulumi.RegisterOutputType(RRSetRoutingPolicyGeoPolicyOutput{})
	pulumi.RegisterOutputType(RRSetRoutingPolicyGeoPolicyPtrOutput{})
	pulumi.RegisterOutputType(RRSetRoutingPolicyGeoPolicyGeoPolicyItemOutput{})
	pulumi.RegisterOutputType(RRSetRoutingPolicyGeoPolicyGeoPolicyItemArrayOutput{})
	pulumi.RegisterOutputType(RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseOutput{})
	pulumi.RegisterOutputType(RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseArrayOutput{})
	pulumi.RegisterOutputType(RRSetRoutingPolicyGeoPolicyResponseOutput{})
	pulumi.RegisterOutputType(RRSetRoutingPolicyHealthCheckTargetsOutput{})
	pulumi.RegisterOutputType(RRSetRoutingPolicyHealthCheckTargetsPtrOutput{})
	pulumi.RegisterOutputType(RRSetRoutingPolicyHealthCheckTargetsResponseOutput{})
	pulumi.RegisterOutputType(RRSetRoutingPolicyLoadBalancerTargetOutput{})
	pulumi.RegisterOutputType(RRSetRoutingPolicyLoadBalancerTargetArrayOutput{})
	pulumi.RegisterOutputType(RRSetRoutingPolicyLoadBalancerTargetResponseOutput{})
	pulumi.RegisterOutputType(RRSetRoutingPolicyLoadBalancerTargetResponseArrayOutput{})
	pulumi.RegisterOutputType(RRSetRoutingPolicyPrimaryBackupPolicyOutput{})
	pulumi.RegisterOutputType(RRSetRoutingPolicyPrimaryBackupPolicyPtrOutput{})
	pulumi.RegisterOutputType(RRSetRoutingPolicyPrimaryBackupPolicyResponseOutput{})
	pulumi.RegisterOutputType(RRSetRoutingPolicyResponseOutput{})
	pulumi.RegisterOutputType(RRSetRoutingPolicyWrrPolicyOutput{})
	pulumi.RegisterOutputType(RRSetRoutingPolicyWrrPolicyPtrOutput{})
	pulumi.RegisterOutputType(RRSetRoutingPolicyWrrPolicyResponseOutput{})
	pulumi.RegisterOutputType(RRSetRoutingPolicyWrrPolicyWrrPolicyItemOutput{})
	pulumi.RegisterOutputType(RRSetRoutingPolicyWrrPolicyWrrPolicyItemArrayOutput{})
	pulumi.RegisterOutputType(RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseOutput{})
	pulumi.RegisterOutputType(RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseArrayOutput{})
	pulumi.RegisterOutputType(ResourceRecordSetTypeOutput{})
	pulumi.RegisterOutputType(ResourceRecordSetTypeArrayOutput{})
	pulumi.RegisterOutputType(ResourceRecordSetResponseOutput{})
	pulumi.RegisterOutputType(ResourceRecordSetResponseArrayOutput{})
	pulumi.RegisterOutputType(ResponsePolicyGKEClusterOutput{})
	pulumi.RegisterOutputType(ResponsePolicyGKEClusterArrayOutput{})
	pulumi.RegisterOutputType(ResponsePolicyGKEClusterResponseOutput{})
	pulumi.RegisterOutputType(ResponsePolicyGKEClusterResponseArrayOutput{})
	pulumi.RegisterOutputType(ResponsePolicyNetworkOutput{})
	pulumi.RegisterOutputType(ResponsePolicyNetworkArrayOutput{})
	pulumi.RegisterOutputType(ResponsePolicyNetworkResponseOutput{})
	pulumi.RegisterOutputType(ResponsePolicyNetworkResponseArrayOutput{})
	pulumi.RegisterOutputType(ResponsePolicyRuleLocalDataOutput{})
	pulumi.RegisterOutputType(ResponsePolicyRuleLocalDataPtrOutput{})
	pulumi.RegisterOutputType(ResponsePolicyRuleLocalDataResponseOutput{})
}
