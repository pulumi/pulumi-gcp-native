// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Parameters for DnsKey key generation. Used for generating initial keys for a new ManagedZone and as default when adding a new DnsKey.
type DnsKeySpec struct {
	// String mnemonic specifying the DNSSEC algorithm of this key.
	Algorithm *DnsKeySpecAlgorithm `pulumi:"algorithm"`
	// Length of the keys in bits.
	KeyLength *int `pulumi:"keyLength"`
	// Specifies whether this is a key signing key (KSK) or a zone signing key (ZSK). Key signing keys have the Secure Entry Point flag set and, when active, are only used to sign resource record sets of type DNSKEY. Zone signing keys do not have the Secure Entry Point flag set and are used to sign all other types of resource record sets.
	KeyType *DnsKeySpecKeyType `pulumi:"keyType"`
	Kind    *string            `pulumi:"kind"`
}

// DnsKeySpecInput is an input type that accepts DnsKeySpecArgs and DnsKeySpecOutput values.
// You can construct a concrete instance of `DnsKeySpecInput` via:
//
//          DnsKeySpecArgs{...}
type DnsKeySpecInput interface {
	pulumi.Input

	ToDnsKeySpecOutput() DnsKeySpecOutput
	ToDnsKeySpecOutputWithContext(context.Context) DnsKeySpecOutput
}

// Parameters for DnsKey key generation. Used for generating initial keys for a new ManagedZone and as default when adding a new DnsKey.
type DnsKeySpecArgs struct {
	// String mnemonic specifying the DNSSEC algorithm of this key.
	Algorithm DnsKeySpecAlgorithmPtrInput `pulumi:"algorithm"`
	// Length of the keys in bits.
	KeyLength pulumi.IntPtrInput `pulumi:"keyLength"`
	// Specifies whether this is a key signing key (KSK) or a zone signing key (ZSK). Key signing keys have the Secure Entry Point flag set and, when active, are only used to sign resource record sets of type DNSKEY. Zone signing keys do not have the Secure Entry Point flag set and are used to sign all other types of resource record sets.
	KeyType DnsKeySpecKeyTypePtrInput `pulumi:"keyType"`
	Kind    pulumi.StringPtrInput     `pulumi:"kind"`
}

func (DnsKeySpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsKeySpec)(nil)).Elem()
}

func (i DnsKeySpecArgs) ToDnsKeySpecOutput() DnsKeySpecOutput {
	return i.ToDnsKeySpecOutputWithContext(context.Background())
}

func (i DnsKeySpecArgs) ToDnsKeySpecOutputWithContext(ctx context.Context) DnsKeySpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsKeySpecOutput)
}

// DnsKeySpecArrayInput is an input type that accepts DnsKeySpecArray and DnsKeySpecArrayOutput values.
// You can construct a concrete instance of `DnsKeySpecArrayInput` via:
//
//          DnsKeySpecArray{ DnsKeySpecArgs{...} }
type DnsKeySpecArrayInput interface {
	pulumi.Input

	ToDnsKeySpecArrayOutput() DnsKeySpecArrayOutput
	ToDnsKeySpecArrayOutputWithContext(context.Context) DnsKeySpecArrayOutput
}

type DnsKeySpecArray []DnsKeySpecInput

func (DnsKeySpecArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DnsKeySpec)(nil)).Elem()
}

func (i DnsKeySpecArray) ToDnsKeySpecArrayOutput() DnsKeySpecArrayOutput {
	return i.ToDnsKeySpecArrayOutputWithContext(context.Background())
}

func (i DnsKeySpecArray) ToDnsKeySpecArrayOutputWithContext(ctx context.Context) DnsKeySpecArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsKeySpecArrayOutput)
}

// Parameters for DnsKey key generation. Used for generating initial keys for a new ManagedZone and as default when adding a new DnsKey.
type DnsKeySpecOutput struct{ *pulumi.OutputState }

func (DnsKeySpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsKeySpec)(nil)).Elem()
}

func (o DnsKeySpecOutput) ToDnsKeySpecOutput() DnsKeySpecOutput {
	return o
}

func (o DnsKeySpecOutput) ToDnsKeySpecOutputWithContext(ctx context.Context) DnsKeySpecOutput {
	return o
}

// String mnemonic specifying the DNSSEC algorithm of this key.
func (o DnsKeySpecOutput) Algorithm() DnsKeySpecAlgorithmPtrOutput {
	return o.ApplyT(func(v DnsKeySpec) *DnsKeySpecAlgorithm { return v.Algorithm }).(DnsKeySpecAlgorithmPtrOutput)
}

// Length of the keys in bits.
func (o DnsKeySpecOutput) KeyLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DnsKeySpec) *int { return v.KeyLength }).(pulumi.IntPtrOutput)
}

// Specifies whether this is a key signing key (KSK) or a zone signing key (ZSK). Key signing keys have the Secure Entry Point flag set and, when active, are only used to sign resource record sets of type DNSKEY. Zone signing keys do not have the Secure Entry Point flag set and are used to sign all other types of resource record sets.
func (o DnsKeySpecOutput) KeyType() DnsKeySpecKeyTypePtrOutput {
	return o.ApplyT(func(v DnsKeySpec) *DnsKeySpecKeyType { return v.KeyType }).(DnsKeySpecKeyTypePtrOutput)
}

func (o DnsKeySpecOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DnsKeySpec) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

type DnsKeySpecArrayOutput struct{ *pulumi.OutputState }

func (DnsKeySpecArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DnsKeySpec)(nil)).Elem()
}

func (o DnsKeySpecArrayOutput) ToDnsKeySpecArrayOutput() DnsKeySpecArrayOutput {
	return o
}

func (o DnsKeySpecArrayOutput) ToDnsKeySpecArrayOutputWithContext(ctx context.Context) DnsKeySpecArrayOutput {
	return o
}

func (o DnsKeySpecArrayOutput) Index(i pulumi.IntInput) DnsKeySpecOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DnsKeySpec {
		return vs[0].([]DnsKeySpec)[vs[1].(int)]
	}).(DnsKeySpecOutput)
}

// Parameters for DnsKey key generation. Used for generating initial keys for a new ManagedZone and as default when adding a new DnsKey.
type DnsKeySpecResponse struct {
	// String mnemonic specifying the DNSSEC algorithm of this key.
	Algorithm string `pulumi:"algorithm"`
	// Length of the keys in bits.
	KeyLength int `pulumi:"keyLength"`
	// Specifies whether this is a key signing key (KSK) or a zone signing key (ZSK). Key signing keys have the Secure Entry Point flag set and, when active, are only used to sign resource record sets of type DNSKEY. Zone signing keys do not have the Secure Entry Point flag set and are used to sign all other types of resource record sets.
	KeyType string `pulumi:"keyType"`
	Kind    string `pulumi:"kind"`
}

// DnsKeySpecResponseInput is an input type that accepts DnsKeySpecResponseArgs and DnsKeySpecResponseOutput values.
// You can construct a concrete instance of `DnsKeySpecResponseInput` via:
//
//          DnsKeySpecResponseArgs{...}
type DnsKeySpecResponseInput interface {
	pulumi.Input

	ToDnsKeySpecResponseOutput() DnsKeySpecResponseOutput
	ToDnsKeySpecResponseOutputWithContext(context.Context) DnsKeySpecResponseOutput
}

// Parameters for DnsKey key generation. Used for generating initial keys for a new ManagedZone and as default when adding a new DnsKey.
type DnsKeySpecResponseArgs struct {
	// String mnemonic specifying the DNSSEC algorithm of this key.
	Algorithm pulumi.StringInput `pulumi:"algorithm"`
	// Length of the keys in bits.
	KeyLength pulumi.IntInput `pulumi:"keyLength"`
	// Specifies whether this is a key signing key (KSK) or a zone signing key (ZSK). Key signing keys have the Secure Entry Point flag set and, when active, are only used to sign resource record sets of type DNSKEY. Zone signing keys do not have the Secure Entry Point flag set and are used to sign all other types of resource record sets.
	KeyType pulumi.StringInput `pulumi:"keyType"`
	Kind    pulumi.StringInput `pulumi:"kind"`
}

func (DnsKeySpecResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsKeySpecResponse)(nil)).Elem()
}

func (i DnsKeySpecResponseArgs) ToDnsKeySpecResponseOutput() DnsKeySpecResponseOutput {
	return i.ToDnsKeySpecResponseOutputWithContext(context.Background())
}

func (i DnsKeySpecResponseArgs) ToDnsKeySpecResponseOutputWithContext(ctx context.Context) DnsKeySpecResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsKeySpecResponseOutput)
}

// DnsKeySpecResponseArrayInput is an input type that accepts DnsKeySpecResponseArray and DnsKeySpecResponseArrayOutput values.
// You can construct a concrete instance of `DnsKeySpecResponseArrayInput` via:
//
//          DnsKeySpecResponseArray{ DnsKeySpecResponseArgs{...} }
type DnsKeySpecResponseArrayInput interface {
	pulumi.Input

	ToDnsKeySpecResponseArrayOutput() DnsKeySpecResponseArrayOutput
	ToDnsKeySpecResponseArrayOutputWithContext(context.Context) DnsKeySpecResponseArrayOutput
}

type DnsKeySpecResponseArray []DnsKeySpecResponseInput

func (DnsKeySpecResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DnsKeySpecResponse)(nil)).Elem()
}

func (i DnsKeySpecResponseArray) ToDnsKeySpecResponseArrayOutput() DnsKeySpecResponseArrayOutput {
	return i.ToDnsKeySpecResponseArrayOutputWithContext(context.Background())
}

func (i DnsKeySpecResponseArray) ToDnsKeySpecResponseArrayOutputWithContext(ctx context.Context) DnsKeySpecResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsKeySpecResponseArrayOutput)
}

// Parameters for DnsKey key generation. Used for generating initial keys for a new ManagedZone and as default when adding a new DnsKey.
type DnsKeySpecResponseOutput struct{ *pulumi.OutputState }

func (DnsKeySpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsKeySpecResponse)(nil)).Elem()
}

func (o DnsKeySpecResponseOutput) ToDnsKeySpecResponseOutput() DnsKeySpecResponseOutput {
	return o
}

func (o DnsKeySpecResponseOutput) ToDnsKeySpecResponseOutputWithContext(ctx context.Context) DnsKeySpecResponseOutput {
	return o
}

// String mnemonic specifying the DNSSEC algorithm of this key.
func (o DnsKeySpecResponseOutput) Algorithm() pulumi.StringOutput {
	return o.ApplyT(func(v DnsKeySpecResponse) string { return v.Algorithm }).(pulumi.StringOutput)
}

// Length of the keys in bits.
func (o DnsKeySpecResponseOutput) KeyLength() pulumi.IntOutput {
	return o.ApplyT(func(v DnsKeySpecResponse) int { return v.KeyLength }).(pulumi.IntOutput)
}

// Specifies whether this is a key signing key (KSK) or a zone signing key (ZSK). Key signing keys have the Secure Entry Point flag set and, when active, are only used to sign resource record sets of type DNSKEY. Zone signing keys do not have the Secure Entry Point flag set and are used to sign all other types of resource record sets.
func (o DnsKeySpecResponseOutput) KeyType() pulumi.StringOutput {
	return o.ApplyT(func(v DnsKeySpecResponse) string { return v.KeyType }).(pulumi.StringOutput)
}

func (o DnsKeySpecResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v DnsKeySpecResponse) string { return v.Kind }).(pulumi.StringOutput)
}

type DnsKeySpecResponseArrayOutput struct{ *pulumi.OutputState }

func (DnsKeySpecResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DnsKeySpecResponse)(nil)).Elem()
}

func (o DnsKeySpecResponseArrayOutput) ToDnsKeySpecResponseArrayOutput() DnsKeySpecResponseArrayOutput {
	return o
}

func (o DnsKeySpecResponseArrayOutput) ToDnsKeySpecResponseArrayOutputWithContext(ctx context.Context) DnsKeySpecResponseArrayOutput {
	return o
}

func (o DnsKeySpecResponseArrayOutput) Index(i pulumi.IntInput) DnsKeySpecResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DnsKeySpecResponse {
		return vs[0].([]DnsKeySpecResponse)[vs[1].(int)]
	}).(DnsKeySpecResponseOutput)
}

// Cloud Logging configurations for publicly visible zones.
type ManagedZoneCloudLoggingConfig struct {
	// If set, enable query logging for this ManagedZone. False by default, making logging opt-in.
	EnableLogging *bool   `pulumi:"enableLogging"`
	Kind          *string `pulumi:"kind"`
}

// ManagedZoneCloudLoggingConfigInput is an input type that accepts ManagedZoneCloudLoggingConfigArgs and ManagedZoneCloudLoggingConfigOutput values.
// You can construct a concrete instance of `ManagedZoneCloudLoggingConfigInput` via:
//
//          ManagedZoneCloudLoggingConfigArgs{...}
type ManagedZoneCloudLoggingConfigInput interface {
	pulumi.Input

	ToManagedZoneCloudLoggingConfigOutput() ManagedZoneCloudLoggingConfigOutput
	ToManagedZoneCloudLoggingConfigOutputWithContext(context.Context) ManagedZoneCloudLoggingConfigOutput
}

// Cloud Logging configurations for publicly visible zones.
type ManagedZoneCloudLoggingConfigArgs struct {
	// If set, enable query logging for this ManagedZone. False by default, making logging opt-in.
	EnableLogging pulumi.BoolPtrInput   `pulumi:"enableLogging"`
	Kind          pulumi.StringPtrInput `pulumi:"kind"`
}

func (ManagedZoneCloudLoggingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneCloudLoggingConfig)(nil)).Elem()
}

func (i ManagedZoneCloudLoggingConfigArgs) ToManagedZoneCloudLoggingConfigOutput() ManagedZoneCloudLoggingConfigOutput {
	return i.ToManagedZoneCloudLoggingConfigOutputWithContext(context.Background())
}

func (i ManagedZoneCloudLoggingConfigArgs) ToManagedZoneCloudLoggingConfigOutputWithContext(ctx context.Context) ManagedZoneCloudLoggingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneCloudLoggingConfigOutput)
}

func (i ManagedZoneCloudLoggingConfigArgs) ToManagedZoneCloudLoggingConfigPtrOutput() ManagedZoneCloudLoggingConfigPtrOutput {
	return i.ToManagedZoneCloudLoggingConfigPtrOutputWithContext(context.Background())
}

func (i ManagedZoneCloudLoggingConfigArgs) ToManagedZoneCloudLoggingConfigPtrOutputWithContext(ctx context.Context) ManagedZoneCloudLoggingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneCloudLoggingConfigOutput).ToManagedZoneCloudLoggingConfigPtrOutputWithContext(ctx)
}

// ManagedZoneCloudLoggingConfigPtrInput is an input type that accepts ManagedZoneCloudLoggingConfigArgs, ManagedZoneCloudLoggingConfigPtr and ManagedZoneCloudLoggingConfigPtrOutput values.
// You can construct a concrete instance of `ManagedZoneCloudLoggingConfigPtrInput` via:
//
//          ManagedZoneCloudLoggingConfigArgs{...}
//
//  or:
//
//          nil
type ManagedZoneCloudLoggingConfigPtrInput interface {
	pulumi.Input

	ToManagedZoneCloudLoggingConfigPtrOutput() ManagedZoneCloudLoggingConfigPtrOutput
	ToManagedZoneCloudLoggingConfigPtrOutputWithContext(context.Context) ManagedZoneCloudLoggingConfigPtrOutput
}

type managedZoneCloudLoggingConfigPtrType ManagedZoneCloudLoggingConfigArgs

func ManagedZoneCloudLoggingConfigPtr(v *ManagedZoneCloudLoggingConfigArgs) ManagedZoneCloudLoggingConfigPtrInput {
	return (*managedZoneCloudLoggingConfigPtrType)(v)
}

func (*managedZoneCloudLoggingConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZoneCloudLoggingConfig)(nil)).Elem()
}

func (i *managedZoneCloudLoggingConfigPtrType) ToManagedZoneCloudLoggingConfigPtrOutput() ManagedZoneCloudLoggingConfigPtrOutput {
	return i.ToManagedZoneCloudLoggingConfigPtrOutputWithContext(context.Background())
}

func (i *managedZoneCloudLoggingConfigPtrType) ToManagedZoneCloudLoggingConfigPtrOutputWithContext(ctx context.Context) ManagedZoneCloudLoggingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneCloudLoggingConfigPtrOutput)
}

// Cloud Logging configurations for publicly visible zones.
type ManagedZoneCloudLoggingConfigOutput struct{ *pulumi.OutputState }

func (ManagedZoneCloudLoggingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneCloudLoggingConfig)(nil)).Elem()
}

func (o ManagedZoneCloudLoggingConfigOutput) ToManagedZoneCloudLoggingConfigOutput() ManagedZoneCloudLoggingConfigOutput {
	return o
}

func (o ManagedZoneCloudLoggingConfigOutput) ToManagedZoneCloudLoggingConfigOutputWithContext(ctx context.Context) ManagedZoneCloudLoggingConfigOutput {
	return o
}

func (o ManagedZoneCloudLoggingConfigOutput) ToManagedZoneCloudLoggingConfigPtrOutput() ManagedZoneCloudLoggingConfigPtrOutput {
	return o.ToManagedZoneCloudLoggingConfigPtrOutputWithContext(context.Background())
}

func (o ManagedZoneCloudLoggingConfigOutput) ToManagedZoneCloudLoggingConfigPtrOutputWithContext(ctx context.Context) ManagedZoneCloudLoggingConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedZoneCloudLoggingConfig) *ManagedZoneCloudLoggingConfig {
		return &v
	}).(ManagedZoneCloudLoggingConfigPtrOutput)
}

// If set, enable query logging for this ManagedZone. False by default, making logging opt-in.
func (o ManagedZoneCloudLoggingConfigOutput) EnableLogging() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedZoneCloudLoggingConfig) *bool { return v.EnableLogging }).(pulumi.BoolPtrOutput)
}

func (o ManagedZoneCloudLoggingConfigOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZoneCloudLoggingConfig) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

type ManagedZoneCloudLoggingConfigPtrOutput struct{ *pulumi.OutputState }

func (ManagedZoneCloudLoggingConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZoneCloudLoggingConfig)(nil)).Elem()
}

func (o ManagedZoneCloudLoggingConfigPtrOutput) ToManagedZoneCloudLoggingConfigPtrOutput() ManagedZoneCloudLoggingConfigPtrOutput {
	return o
}

func (o ManagedZoneCloudLoggingConfigPtrOutput) ToManagedZoneCloudLoggingConfigPtrOutputWithContext(ctx context.Context) ManagedZoneCloudLoggingConfigPtrOutput {
	return o
}

func (o ManagedZoneCloudLoggingConfigPtrOutput) Elem() ManagedZoneCloudLoggingConfigOutput {
	return o.ApplyT(func(v *ManagedZoneCloudLoggingConfig) ManagedZoneCloudLoggingConfig {
		if v != nil {
			return *v
		}
		var ret ManagedZoneCloudLoggingConfig
		return ret
	}).(ManagedZoneCloudLoggingConfigOutput)
}

// If set, enable query logging for this ManagedZone. False by default, making logging opt-in.
func (o ManagedZoneCloudLoggingConfigPtrOutput) EnableLogging() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedZoneCloudLoggingConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableLogging
	}).(pulumi.BoolPtrOutput)
}

func (o ManagedZoneCloudLoggingConfigPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedZoneCloudLoggingConfig) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Cloud Logging configurations for publicly visible zones.
type ManagedZoneCloudLoggingConfigResponse struct {
	// If set, enable query logging for this ManagedZone. False by default, making logging opt-in.
	EnableLogging bool   `pulumi:"enableLogging"`
	Kind          string `pulumi:"kind"`
}

// ManagedZoneCloudLoggingConfigResponseInput is an input type that accepts ManagedZoneCloudLoggingConfigResponseArgs and ManagedZoneCloudLoggingConfigResponseOutput values.
// You can construct a concrete instance of `ManagedZoneCloudLoggingConfigResponseInput` via:
//
//          ManagedZoneCloudLoggingConfigResponseArgs{...}
type ManagedZoneCloudLoggingConfigResponseInput interface {
	pulumi.Input

	ToManagedZoneCloudLoggingConfigResponseOutput() ManagedZoneCloudLoggingConfigResponseOutput
	ToManagedZoneCloudLoggingConfigResponseOutputWithContext(context.Context) ManagedZoneCloudLoggingConfigResponseOutput
}

// Cloud Logging configurations for publicly visible zones.
type ManagedZoneCloudLoggingConfigResponseArgs struct {
	// If set, enable query logging for this ManagedZone. False by default, making logging opt-in.
	EnableLogging pulumi.BoolInput   `pulumi:"enableLogging"`
	Kind          pulumi.StringInput `pulumi:"kind"`
}

func (ManagedZoneCloudLoggingConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneCloudLoggingConfigResponse)(nil)).Elem()
}

func (i ManagedZoneCloudLoggingConfigResponseArgs) ToManagedZoneCloudLoggingConfigResponseOutput() ManagedZoneCloudLoggingConfigResponseOutput {
	return i.ToManagedZoneCloudLoggingConfigResponseOutputWithContext(context.Background())
}

func (i ManagedZoneCloudLoggingConfigResponseArgs) ToManagedZoneCloudLoggingConfigResponseOutputWithContext(ctx context.Context) ManagedZoneCloudLoggingConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneCloudLoggingConfigResponseOutput)
}

func (i ManagedZoneCloudLoggingConfigResponseArgs) ToManagedZoneCloudLoggingConfigResponsePtrOutput() ManagedZoneCloudLoggingConfigResponsePtrOutput {
	return i.ToManagedZoneCloudLoggingConfigResponsePtrOutputWithContext(context.Background())
}

func (i ManagedZoneCloudLoggingConfigResponseArgs) ToManagedZoneCloudLoggingConfigResponsePtrOutputWithContext(ctx context.Context) ManagedZoneCloudLoggingConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneCloudLoggingConfigResponseOutput).ToManagedZoneCloudLoggingConfigResponsePtrOutputWithContext(ctx)
}

// ManagedZoneCloudLoggingConfigResponsePtrInput is an input type that accepts ManagedZoneCloudLoggingConfigResponseArgs, ManagedZoneCloudLoggingConfigResponsePtr and ManagedZoneCloudLoggingConfigResponsePtrOutput values.
// You can construct a concrete instance of `ManagedZoneCloudLoggingConfigResponsePtrInput` via:
//
//          ManagedZoneCloudLoggingConfigResponseArgs{...}
//
//  or:
//
//          nil
type ManagedZoneCloudLoggingConfigResponsePtrInput interface {
	pulumi.Input

	ToManagedZoneCloudLoggingConfigResponsePtrOutput() ManagedZoneCloudLoggingConfigResponsePtrOutput
	ToManagedZoneCloudLoggingConfigResponsePtrOutputWithContext(context.Context) ManagedZoneCloudLoggingConfigResponsePtrOutput
}

type managedZoneCloudLoggingConfigResponsePtrType ManagedZoneCloudLoggingConfigResponseArgs

func ManagedZoneCloudLoggingConfigResponsePtr(v *ManagedZoneCloudLoggingConfigResponseArgs) ManagedZoneCloudLoggingConfigResponsePtrInput {
	return (*managedZoneCloudLoggingConfigResponsePtrType)(v)
}

func (*managedZoneCloudLoggingConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZoneCloudLoggingConfigResponse)(nil)).Elem()
}

func (i *managedZoneCloudLoggingConfigResponsePtrType) ToManagedZoneCloudLoggingConfigResponsePtrOutput() ManagedZoneCloudLoggingConfigResponsePtrOutput {
	return i.ToManagedZoneCloudLoggingConfigResponsePtrOutputWithContext(context.Background())
}

func (i *managedZoneCloudLoggingConfigResponsePtrType) ToManagedZoneCloudLoggingConfigResponsePtrOutputWithContext(ctx context.Context) ManagedZoneCloudLoggingConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneCloudLoggingConfigResponsePtrOutput)
}

// Cloud Logging configurations for publicly visible zones.
type ManagedZoneCloudLoggingConfigResponseOutput struct{ *pulumi.OutputState }

func (ManagedZoneCloudLoggingConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneCloudLoggingConfigResponse)(nil)).Elem()
}

func (o ManagedZoneCloudLoggingConfigResponseOutput) ToManagedZoneCloudLoggingConfigResponseOutput() ManagedZoneCloudLoggingConfigResponseOutput {
	return o
}

func (o ManagedZoneCloudLoggingConfigResponseOutput) ToManagedZoneCloudLoggingConfigResponseOutputWithContext(ctx context.Context) ManagedZoneCloudLoggingConfigResponseOutput {
	return o
}

func (o ManagedZoneCloudLoggingConfigResponseOutput) ToManagedZoneCloudLoggingConfigResponsePtrOutput() ManagedZoneCloudLoggingConfigResponsePtrOutput {
	return o.ToManagedZoneCloudLoggingConfigResponsePtrOutputWithContext(context.Background())
}

func (o ManagedZoneCloudLoggingConfigResponseOutput) ToManagedZoneCloudLoggingConfigResponsePtrOutputWithContext(ctx context.Context) ManagedZoneCloudLoggingConfigResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedZoneCloudLoggingConfigResponse) *ManagedZoneCloudLoggingConfigResponse {
		return &v
	}).(ManagedZoneCloudLoggingConfigResponsePtrOutput)
}

// If set, enable query logging for this ManagedZone. False by default, making logging opt-in.
func (o ManagedZoneCloudLoggingConfigResponseOutput) EnableLogging() pulumi.BoolOutput {
	return o.ApplyT(func(v ManagedZoneCloudLoggingConfigResponse) bool { return v.EnableLogging }).(pulumi.BoolOutput)
}

func (o ManagedZoneCloudLoggingConfigResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedZoneCloudLoggingConfigResponse) string { return v.Kind }).(pulumi.StringOutput)
}

type ManagedZoneCloudLoggingConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedZoneCloudLoggingConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZoneCloudLoggingConfigResponse)(nil)).Elem()
}

func (o ManagedZoneCloudLoggingConfigResponsePtrOutput) ToManagedZoneCloudLoggingConfigResponsePtrOutput() ManagedZoneCloudLoggingConfigResponsePtrOutput {
	return o
}

func (o ManagedZoneCloudLoggingConfigResponsePtrOutput) ToManagedZoneCloudLoggingConfigResponsePtrOutputWithContext(ctx context.Context) ManagedZoneCloudLoggingConfigResponsePtrOutput {
	return o
}

func (o ManagedZoneCloudLoggingConfigResponsePtrOutput) Elem() ManagedZoneCloudLoggingConfigResponseOutput {
	return o.ApplyT(func(v *ManagedZoneCloudLoggingConfigResponse) ManagedZoneCloudLoggingConfigResponse {
		if v != nil {
			return *v
		}
		var ret ManagedZoneCloudLoggingConfigResponse
		return ret
	}).(ManagedZoneCloudLoggingConfigResponseOutput)
}

// If set, enable query logging for this ManagedZone. False by default, making logging opt-in.
func (o ManagedZoneCloudLoggingConfigResponsePtrOutput) EnableLogging() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedZoneCloudLoggingConfigResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.EnableLogging
	}).(pulumi.BoolPtrOutput)
}

func (o ManagedZoneCloudLoggingConfigResponsePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedZoneCloudLoggingConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Kind
	}).(pulumi.StringPtrOutput)
}

type ManagedZoneDnsSecConfig struct {
	// Specifies parameters for generating initial DnsKeys for this ManagedZone. Can only be changed while the state is OFF.
	DefaultKeySpecs []DnsKeySpec `pulumi:"defaultKeySpecs"`
	Kind            *string      `pulumi:"kind"`
	// Specifies the mechanism for authenticated denial-of-existence responses. Can only be changed while the state is OFF.
	NonExistence *ManagedZoneDnsSecConfigNonExistence `pulumi:"nonExistence"`
	// Specifies whether DNSSEC is enabled, and what mode it is in.
	State *ManagedZoneDnsSecConfigState `pulumi:"state"`
}

// ManagedZoneDnsSecConfigInput is an input type that accepts ManagedZoneDnsSecConfigArgs and ManagedZoneDnsSecConfigOutput values.
// You can construct a concrete instance of `ManagedZoneDnsSecConfigInput` via:
//
//          ManagedZoneDnsSecConfigArgs{...}
type ManagedZoneDnsSecConfigInput interface {
	pulumi.Input

	ToManagedZoneDnsSecConfigOutput() ManagedZoneDnsSecConfigOutput
	ToManagedZoneDnsSecConfigOutputWithContext(context.Context) ManagedZoneDnsSecConfigOutput
}

type ManagedZoneDnsSecConfigArgs struct {
	// Specifies parameters for generating initial DnsKeys for this ManagedZone. Can only be changed while the state is OFF.
	DefaultKeySpecs DnsKeySpecArrayInput  `pulumi:"defaultKeySpecs"`
	Kind            pulumi.StringPtrInput `pulumi:"kind"`
	// Specifies the mechanism for authenticated denial-of-existence responses. Can only be changed while the state is OFF.
	NonExistence ManagedZoneDnsSecConfigNonExistencePtrInput `pulumi:"nonExistence"`
	// Specifies whether DNSSEC is enabled, and what mode it is in.
	State ManagedZoneDnsSecConfigStatePtrInput `pulumi:"state"`
}

func (ManagedZoneDnsSecConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneDnsSecConfig)(nil)).Elem()
}

func (i ManagedZoneDnsSecConfigArgs) ToManagedZoneDnsSecConfigOutput() ManagedZoneDnsSecConfigOutput {
	return i.ToManagedZoneDnsSecConfigOutputWithContext(context.Background())
}

func (i ManagedZoneDnsSecConfigArgs) ToManagedZoneDnsSecConfigOutputWithContext(ctx context.Context) ManagedZoneDnsSecConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneDnsSecConfigOutput)
}

func (i ManagedZoneDnsSecConfigArgs) ToManagedZoneDnsSecConfigPtrOutput() ManagedZoneDnsSecConfigPtrOutput {
	return i.ToManagedZoneDnsSecConfigPtrOutputWithContext(context.Background())
}

func (i ManagedZoneDnsSecConfigArgs) ToManagedZoneDnsSecConfigPtrOutputWithContext(ctx context.Context) ManagedZoneDnsSecConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneDnsSecConfigOutput).ToManagedZoneDnsSecConfigPtrOutputWithContext(ctx)
}

// ManagedZoneDnsSecConfigPtrInput is an input type that accepts ManagedZoneDnsSecConfigArgs, ManagedZoneDnsSecConfigPtr and ManagedZoneDnsSecConfigPtrOutput values.
// You can construct a concrete instance of `ManagedZoneDnsSecConfigPtrInput` via:
//
//          ManagedZoneDnsSecConfigArgs{...}
//
//  or:
//
//          nil
type ManagedZoneDnsSecConfigPtrInput interface {
	pulumi.Input

	ToManagedZoneDnsSecConfigPtrOutput() ManagedZoneDnsSecConfigPtrOutput
	ToManagedZoneDnsSecConfigPtrOutputWithContext(context.Context) ManagedZoneDnsSecConfigPtrOutput
}

type managedZoneDnsSecConfigPtrType ManagedZoneDnsSecConfigArgs

func ManagedZoneDnsSecConfigPtr(v *ManagedZoneDnsSecConfigArgs) ManagedZoneDnsSecConfigPtrInput {
	return (*managedZoneDnsSecConfigPtrType)(v)
}

func (*managedZoneDnsSecConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZoneDnsSecConfig)(nil)).Elem()
}

func (i *managedZoneDnsSecConfigPtrType) ToManagedZoneDnsSecConfigPtrOutput() ManagedZoneDnsSecConfigPtrOutput {
	return i.ToManagedZoneDnsSecConfigPtrOutputWithContext(context.Background())
}

func (i *managedZoneDnsSecConfigPtrType) ToManagedZoneDnsSecConfigPtrOutputWithContext(ctx context.Context) ManagedZoneDnsSecConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneDnsSecConfigPtrOutput)
}

type ManagedZoneDnsSecConfigOutput struct{ *pulumi.OutputState }

func (ManagedZoneDnsSecConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneDnsSecConfig)(nil)).Elem()
}

func (o ManagedZoneDnsSecConfigOutput) ToManagedZoneDnsSecConfigOutput() ManagedZoneDnsSecConfigOutput {
	return o
}

func (o ManagedZoneDnsSecConfigOutput) ToManagedZoneDnsSecConfigOutputWithContext(ctx context.Context) ManagedZoneDnsSecConfigOutput {
	return o
}

func (o ManagedZoneDnsSecConfigOutput) ToManagedZoneDnsSecConfigPtrOutput() ManagedZoneDnsSecConfigPtrOutput {
	return o.ToManagedZoneDnsSecConfigPtrOutputWithContext(context.Background())
}

func (o ManagedZoneDnsSecConfigOutput) ToManagedZoneDnsSecConfigPtrOutputWithContext(ctx context.Context) ManagedZoneDnsSecConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedZoneDnsSecConfig) *ManagedZoneDnsSecConfig {
		return &v
	}).(ManagedZoneDnsSecConfigPtrOutput)
}

// Specifies parameters for generating initial DnsKeys for this ManagedZone. Can only be changed while the state is OFF.
func (o ManagedZoneDnsSecConfigOutput) DefaultKeySpecs() DnsKeySpecArrayOutput {
	return o.ApplyT(func(v ManagedZoneDnsSecConfig) []DnsKeySpec { return v.DefaultKeySpecs }).(DnsKeySpecArrayOutput)
}

func (o ManagedZoneDnsSecConfigOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZoneDnsSecConfig) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Specifies the mechanism for authenticated denial-of-existence responses. Can only be changed while the state is OFF.
func (o ManagedZoneDnsSecConfigOutput) NonExistence() ManagedZoneDnsSecConfigNonExistencePtrOutput {
	return o.ApplyT(func(v ManagedZoneDnsSecConfig) *ManagedZoneDnsSecConfigNonExistence { return v.NonExistence }).(ManagedZoneDnsSecConfigNonExistencePtrOutput)
}

// Specifies whether DNSSEC is enabled, and what mode it is in.
func (o ManagedZoneDnsSecConfigOutput) State() ManagedZoneDnsSecConfigStatePtrOutput {
	return o.ApplyT(func(v ManagedZoneDnsSecConfig) *ManagedZoneDnsSecConfigState { return v.State }).(ManagedZoneDnsSecConfigStatePtrOutput)
}

type ManagedZoneDnsSecConfigPtrOutput struct{ *pulumi.OutputState }

func (ManagedZoneDnsSecConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZoneDnsSecConfig)(nil)).Elem()
}

func (o ManagedZoneDnsSecConfigPtrOutput) ToManagedZoneDnsSecConfigPtrOutput() ManagedZoneDnsSecConfigPtrOutput {
	return o
}

func (o ManagedZoneDnsSecConfigPtrOutput) ToManagedZoneDnsSecConfigPtrOutputWithContext(ctx context.Context) ManagedZoneDnsSecConfigPtrOutput {
	return o
}

func (o ManagedZoneDnsSecConfigPtrOutput) Elem() ManagedZoneDnsSecConfigOutput {
	return o.ApplyT(func(v *ManagedZoneDnsSecConfig) ManagedZoneDnsSecConfig {
		if v != nil {
			return *v
		}
		var ret ManagedZoneDnsSecConfig
		return ret
	}).(ManagedZoneDnsSecConfigOutput)
}

// Specifies parameters for generating initial DnsKeys for this ManagedZone. Can only be changed while the state is OFF.
func (o ManagedZoneDnsSecConfigPtrOutput) DefaultKeySpecs() DnsKeySpecArrayOutput {
	return o.ApplyT(func(v *ManagedZoneDnsSecConfig) []DnsKeySpec {
		if v == nil {
			return nil
		}
		return v.DefaultKeySpecs
	}).(DnsKeySpecArrayOutput)
}

func (o ManagedZoneDnsSecConfigPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedZoneDnsSecConfig) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Specifies the mechanism for authenticated denial-of-existence responses. Can only be changed while the state is OFF.
func (o ManagedZoneDnsSecConfigPtrOutput) NonExistence() ManagedZoneDnsSecConfigNonExistencePtrOutput {
	return o.ApplyT(func(v *ManagedZoneDnsSecConfig) *ManagedZoneDnsSecConfigNonExistence {
		if v == nil {
			return nil
		}
		return v.NonExistence
	}).(ManagedZoneDnsSecConfigNonExistencePtrOutput)
}

// Specifies whether DNSSEC is enabled, and what mode it is in.
func (o ManagedZoneDnsSecConfigPtrOutput) State() ManagedZoneDnsSecConfigStatePtrOutput {
	return o.ApplyT(func(v *ManagedZoneDnsSecConfig) *ManagedZoneDnsSecConfigState {
		if v == nil {
			return nil
		}
		return v.State
	}).(ManagedZoneDnsSecConfigStatePtrOutput)
}

type ManagedZoneDnsSecConfigResponse struct {
	// Specifies parameters for generating initial DnsKeys for this ManagedZone. Can only be changed while the state is OFF.
	DefaultKeySpecs []DnsKeySpecResponse `pulumi:"defaultKeySpecs"`
	Kind            string               `pulumi:"kind"`
	// Specifies the mechanism for authenticated denial-of-existence responses. Can only be changed while the state is OFF.
	NonExistence string `pulumi:"nonExistence"`
	// Specifies whether DNSSEC is enabled, and what mode it is in.
	State string `pulumi:"state"`
}

// ManagedZoneDnsSecConfigResponseInput is an input type that accepts ManagedZoneDnsSecConfigResponseArgs and ManagedZoneDnsSecConfigResponseOutput values.
// You can construct a concrete instance of `ManagedZoneDnsSecConfigResponseInput` via:
//
//          ManagedZoneDnsSecConfigResponseArgs{...}
type ManagedZoneDnsSecConfigResponseInput interface {
	pulumi.Input

	ToManagedZoneDnsSecConfigResponseOutput() ManagedZoneDnsSecConfigResponseOutput
	ToManagedZoneDnsSecConfigResponseOutputWithContext(context.Context) ManagedZoneDnsSecConfigResponseOutput
}

type ManagedZoneDnsSecConfigResponseArgs struct {
	// Specifies parameters for generating initial DnsKeys for this ManagedZone. Can only be changed while the state is OFF.
	DefaultKeySpecs DnsKeySpecResponseArrayInput `pulumi:"defaultKeySpecs"`
	Kind            pulumi.StringInput           `pulumi:"kind"`
	// Specifies the mechanism for authenticated denial-of-existence responses. Can only be changed while the state is OFF.
	NonExistence pulumi.StringInput `pulumi:"nonExistence"`
	// Specifies whether DNSSEC is enabled, and what mode it is in.
	State pulumi.StringInput `pulumi:"state"`
}

func (ManagedZoneDnsSecConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneDnsSecConfigResponse)(nil)).Elem()
}

func (i ManagedZoneDnsSecConfigResponseArgs) ToManagedZoneDnsSecConfigResponseOutput() ManagedZoneDnsSecConfigResponseOutput {
	return i.ToManagedZoneDnsSecConfigResponseOutputWithContext(context.Background())
}

func (i ManagedZoneDnsSecConfigResponseArgs) ToManagedZoneDnsSecConfigResponseOutputWithContext(ctx context.Context) ManagedZoneDnsSecConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneDnsSecConfigResponseOutput)
}

func (i ManagedZoneDnsSecConfigResponseArgs) ToManagedZoneDnsSecConfigResponsePtrOutput() ManagedZoneDnsSecConfigResponsePtrOutput {
	return i.ToManagedZoneDnsSecConfigResponsePtrOutputWithContext(context.Background())
}

func (i ManagedZoneDnsSecConfigResponseArgs) ToManagedZoneDnsSecConfigResponsePtrOutputWithContext(ctx context.Context) ManagedZoneDnsSecConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneDnsSecConfigResponseOutput).ToManagedZoneDnsSecConfigResponsePtrOutputWithContext(ctx)
}

// ManagedZoneDnsSecConfigResponsePtrInput is an input type that accepts ManagedZoneDnsSecConfigResponseArgs, ManagedZoneDnsSecConfigResponsePtr and ManagedZoneDnsSecConfigResponsePtrOutput values.
// You can construct a concrete instance of `ManagedZoneDnsSecConfigResponsePtrInput` via:
//
//          ManagedZoneDnsSecConfigResponseArgs{...}
//
//  or:
//
//          nil
type ManagedZoneDnsSecConfigResponsePtrInput interface {
	pulumi.Input

	ToManagedZoneDnsSecConfigResponsePtrOutput() ManagedZoneDnsSecConfigResponsePtrOutput
	ToManagedZoneDnsSecConfigResponsePtrOutputWithContext(context.Context) ManagedZoneDnsSecConfigResponsePtrOutput
}

type managedZoneDnsSecConfigResponsePtrType ManagedZoneDnsSecConfigResponseArgs

func ManagedZoneDnsSecConfigResponsePtr(v *ManagedZoneDnsSecConfigResponseArgs) ManagedZoneDnsSecConfigResponsePtrInput {
	return (*managedZoneDnsSecConfigResponsePtrType)(v)
}

func (*managedZoneDnsSecConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZoneDnsSecConfigResponse)(nil)).Elem()
}

func (i *managedZoneDnsSecConfigResponsePtrType) ToManagedZoneDnsSecConfigResponsePtrOutput() ManagedZoneDnsSecConfigResponsePtrOutput {
	return i.ToManagedZoneDnsSecConfigResponsePtrOutputWithContext(context.Background())
}

func (i *managedZoneDnsSecConfigResponsePtrType) ToManagedZoneDnsSecConfigResponsePtrOutputWithContext(ctx context.Context) ManagedZoneDnsSecConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneDnsSecConfigResponsePtrOutput)
}

type ManagedZoneDnsSecConfigResponseOutput struct{ *pulumi.OutputState }

func (ManagedZoneDnsSecConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneDnsSecConfigResponse)(nil)).Elem()
}

func (o ManagedZoneDnsSecConfigResponseOutput) ToManagedZoneDnsSecConfigResponseOutput() ManagedZoneDnsSecConfigResponseOutput {
	return o
}

func (o ManagedZoneDnsSecConfigResponseOutput) ToManagedZoneDnsSecConfigResponseOutputWithContext(ctx context.Context) ManagedZoneDnsSecConfigResponseOutput {
	return o
}

func (o ManagedZoneDnsSecConfigResponseOutput) ToManagedZoneDnsSecConfigResponsePtrOutput() ManagedZoneDnsSecConfigResponsePtrOutput {
	return o.ToManagedZoneDnsSecConfigResponsePtrOutputWithContext(context.Background())
}

func (o ManagedZoneDnsSecConfigResponseOutput) ToManagedZoneDnsSecConfigResponsePtrOutputWithContext(ctx context.Context) ManagedZoneDnsSecConfigResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedZoneDnsSecConfigResponse) *ManagedZoneDnsSecConfigResponse {
		return &v
	}).(ManagedZoneDnsSecConfigResponsePtrOutput)
}

// Specifies parameters for generating initial DnsKeys for this ManagedZone. Can only be changed while the state is OFF.
func (o ManagedZoneDnsSecConfigResponseOutput) DefaultKeySpecs() DnsKeySpecResponseArrayOutput {
	return o.ApplyT(func(v ManagedZoneDnsSecConfigResponse) []DnsKeySpecResponse { return v.DefaultKeySpecs }).(DnsKeySpecResponseArrayOutput)
}

func (o ManagedZoneDnsSecConfigResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedZoneDnsSecConfigResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// Specifies the mechanism for authenticated denial-of-existence responses. Can only be changed while the state is OFF.
func (o ManagedZoneDnsSecConfigResponseOutput) NonExistence() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedZoneDnsSecConfigResponse) string { return v.NonExistence }).(pulumi.StringOutput)
}

// Specifies whether DNSSEC is enabled, and what mode it is in.
func (o ManagedZoneDnsSecConfigResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedZoneDnsSecConfigResponse) string { return v.State }).(pulumi.StringOutput)
}

type ManagedZoneDnsSecConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedZoneDnsSecConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZoneDnsSecConfigResponse)(nil)).Elem()
}

func (o ManagedZoneDnsSecConfigResponsePtrOutput) ToManagedZoneDnsSecConfigResponsePtrOutput() ManagedZoneDnsSecConfigResponsePtrOutput {
	return o
}

func (o ManagedZoneDnsSecConfigResponsePtrOutput) ToManagedZoneDnsSecConfigResponsePtrOutputWithContext(ctx context.Context) ManagedZoneDnsSecConfigResponsePtrOutput {
	return o
}

func (o ManagedZoneDnsSecConfigResponsePtrOutput) Elem() ManagedZoneDnsSecConfigResponseOutput {
	return o.ApplyT(func(v *ManagedZoneDnsSecConfigResponse) ManagedZoneDnsSecConfigResponse {
		if v != nil {
			return *v
		}
		var ret ManagedZoneDnsSecConfigResponse
		return ret
	}).(ManagedZoneDnsSecConfigResponseOutput)
}

// Specifies parameters for generating initial DnsKeys for this ManagedZone. Can only be changed while the state is OFF.
func (o ManagedZoneDnsSecConfigResponsePtrOutput) DefaultKeySpecs() DnsKeySpecResponseArrayOutput {
	return o.ApplyT(func(v *ManagedZoneDnsSecConfigResponse) []DnsKeySpecResponse {
		if v == nil {
			return nil
		}
		return v.DefaultKeySpecs
	}).(DnsKeySpecResponseArrayOutput)
}

func (o ManagedZoneDnsSecConfigResponsePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedZoneDnsSecConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Kind
	}).(pulumi.StringPtrOutput)
}

// Specifies the mechanism for authenticated denial-of-existence responses. Can only be changed while the state is OFF.
func (o ManagedZoneDnsSecConfigResponsePtrOutput) NonExistence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedZoneDnsSecConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.NonExistence
	}).(pulumi.StringPtrOutput)
}

// Specifies whether DNSSEC is enabled, and what mode it is in.
func (o ManagedZoneDnsSecConfigResponsePtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedZoneDnsSecConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.State
	}).(pulumi.StringPtrOutput)
}

type ManagedZoneForwardingConfig struct {
	Kind *string `pulumi:"kind"`
	// List of target name servers to forward to. Cloud DNS selects the best available name server if more than one target is given.
	TargetNameServers []ManagedZoneForwardingConfigNameServerTarget `pulumi:"targetNameServers"`
}

// ManagedZoneForwardingConfigInput is an input type that accepts ManagedZoneForwardingConfigArgs and ManagedZoneForwardingConfigOutput values.
// You can construct a concrete instance of `ManagedZoneForwardingConfigInput` via:
//
//          ManagedZoneForwardingConfigArgs{...}
type ManagedZoneForwardingConfigInput interface {
	pulumi.Input

	ToManagedZoneForwardingConfigOutput() ManagedZoneForwardingConfigOutput
	ToManagedZoneForwardingConfigOutputWithContext(context.Context) ManagedZoneForwardingConfigOutput
}

type ManagedZoneForwardingConfigArgs struct {
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// List of target name servers to forward to. Cloud DNS selects the best available name server if more than one target is given.
	TargetNameServers ManagedZoneForwardingConfigNameServerTargetArrayInput `pulumi:"targetNameServers"`
}

func (ManagedZoneForwardingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneForwardingConfig)(nil)).Elem()
}

func (i ManagedZoneForwardingConfigArgs) ToManagedZoneForwardingConfigOutput() ManagedZoneForwardingConfigOutput {
	return i.ToManagedZoneForwardingConfigOutputWithContext(context.Background())
}

func (i ManagedZoneForwardingConfigArgs) ToManagedZoneForwardingConfigOutputWithContext(ctx context.Context) ManagedZoneForwardingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneForwardingConfigOutput)
}

func (i ManagedZoneForwardingConfigArgs) ToManagedZoneForwardingConfigPtrOutput() ManagedZoneForwardingConfigPtrOutput {
	return i.ToManagedZoneForwardingConfigPtrOutputWithContext(context.Background())
}

func (i ManagedZoneForwardingConfigArgs) ToManagedZoneForwardingConfigPtrOutputWithContext(ctx context.Context) ManagedZoneForwardingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneForwardingConfigOutput).ToManagedZoneForwardingConfigPtrOutputWithContext(ctx)
}

// ManagedZoneForwardingConfigPtrInput is an input type that accepts ManagedZoneForwardingConfigArgs, ManagedZoneForwardingConfigPtr and ManagedZoneForwardingConfigPtrOutput values.
// You can construct a concrete instance of `ManagedZoneForwardingConfigPtrInput` via:
//
//          ManagedZoneForwardingConfigArgs{...}
//
//  or:
//
//          nil
type ManagedZoneForwardingConfigPtrInput interface {
	pulumi.Input

	ToManagedZoneForwardingConfigPtrOutput() ManagedZoneForwardingConfigPtrOutput
	ToManagedZoneForwardingConfigPtrOutputWithContext(context.Context) ManagedZoneForwardingConfigPtrOutput
}

type managedZoneForwardingConfigPtrType ManagedZoneForwardingConfigArgs

func ManagedZoneForwardingConfigPtr(v *ManagedZoneForwardingConfigArgs) ManagedZoneForwardingConfigPtrInput {
	return (*managedZoneForwardingConfigPtrType)(v)
}

func (*managedZoneForwardingConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZoneForwardingConfig)(nil)).Elem()
}

func (i *managedZoneForwardingConfigPtrType) ToManagedZoneForwardingConfigPtrOutput() ManagedZoneForwardingConfigPtrOutput {
	return i.ToManagedZoneForwardingConfigPtrOutputWithContext(context.Background())
}

func (i *managedZoneForwardingConfigPtrType) ToManagedZoneForwardingConfigPtrOutputWithContext(ctx context.Context) ManagedZoneForwardingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneForwardingConfigPtrOutput)
}

type ManagedZoneForwardingConfigOutput struct{ *pulumi.OutputState }

func (ManagedZoneForwardingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneForwardingConfig)(nil)).Elem()
}

func (o ManagedZoneForwardingConfigOutput) ToManagedZoneForwardingConfigOutput() ManagedZoneForwardingConfigOutput {
	return o
}

func (o ManagedZoneForwardingConfigOutput) ToManagedZoneForwardingConfigOutputWithContext(ctx context.Context) ManagedZoneForwardingConfigOutput {
	return o
}

func (o ManagedZoneForwardingConfigOutput) ToManagedZoneForwardingConfigPtrOutput() ManagedZoneForwardingConfigPtrOutput {
	return o.ToManagedZoneForwardingConfigPtrOutputWithContext(context.Background())
}

func (o ManagedZoneForwardingConfigOutput) ToManagedZoneForwardingConfigPtrOutputWithContext(ctx context.Context) ManagedZoneForwardingConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedZoneForwardingConfig) *ManagedZoneForwardingConfig {
		return &v
	}).(ManagedZoneForwardingConfigPtrOutput)
}

func (o ManagedZoneForwardingConfigOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZoneForwardingConfig) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// List of target name servers to forward to. Cloud DNS selects the best available name server if more than one target is given.
func (o ManagedZoneForwardingConfigOutput) TargetNameServers() ManagedZoneForwardingConfigNameServerTargetArrayOutput {
	return o.ApplyT(func(v ManagedZoneForwardingConfig) []ManagedZoneForwardingConfigNameServerTarget {
		return v.TargetNameServers
	}).(ManagedZoneForwardingConfigNameServerTargetArrayOutput)
}

type ManagedZoneForwardingConfigPtrOutput struct{ *pulumi.OutputState }

func (ManagedZoneForwardingConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZoneForwardingConfig)(nil)).Elem()
}

func (o ManagedZoneForwardingConfigPtrOutput) ToManagedZoneForwardingConfigPtrOutput() ManagedZoneForwardingConfigPtrOutput {
	return o
}

func (o ManagedZoneForwardingConfigPtrOutput) ToManagedZoneForwardingConfigPtrOutputWithContext(ctx context.Context) ManagedZoneForwardingConfigPtrOutput {
	return o
}

func (o ManagedZoneForwardingConfigPtrOutput) Elem() ManagedZoneForwardingConfigOutput {
	return o.ApplyT(func(v *ManagedZoneForwardingConfig) ManagedZoneForwardingConfig {
		if v != nil {
			return *v
		}
		var ret ManagedZoneForwardingConfig
		return ret
	}).(ManagedZoneForwardingConfigOutput)
}

func (o ManagedZoneForwardingConfigPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedZoneForwardingConfig) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// List of target name servers to forward to. Cloud DNS selects the best available name server if more than one target is given.
func (o ManagedZoneForwardingConfigPtrOutput) TargetNameServers() ManagedZoneForwardingConfigNameServerTargetArrayOutput {
	return o.ApplyT(func(v *ManagedZoneForwardingConfig) []ManagedZoneForwardingConfigNameServerTarget {
		if v == nil {
			return nil
		}
		return v.TargetNameServers
	}).(ManagedZoneForwardingConfigNameServerTargetArrayOutput)
}

type ManagedZoneForwardingConfigNameServerTarget struct {
	// Forwarding path for this NameServerTarget. If unset or set to DEFAULT, Cloud DNS makes forwarding decisions based on IP address ranges; that is, RFC1918 addresses go to the VPC network, non-RFC1918 addresses go to the internet. When set to PRIVATE, Cloud DNS always sends queries through the VPC network for this target.
	ForwardingPath *ManagedZoneForwardingConfigNameServerTargetForwardingPath `pulumi:"forwardingPath"`
	// IPv4 address of a target name server.
	Ipv4Address *string `pulumi:"ipv4Address"`
	// IPv6 address of a target name server. Does not accept both fields (ipv4 & ipv6) being populated.
	Ipv6Address *string `pulumi:"ipv6Address"`
	Kind        *string `pulumi:"kind"`
}

// ManagedZoneForwardingConfigNameServerTargetInput is an input type that accepts ManagedZoneForwardingConfigNameServerTargetArgs and ManagedZoneForwardingConfigNameServerTargetOutput values.
// You can construct a concrete instance of `ManagedZoneForwardingConfigNameServerTargetInput` via:
//
//          ManagedZoneForwardingConfigNameServerTargetArgs{...}
type ManagedZoneForwardingConfigNameServerTargetInput interface {
	pulumi.Input

	ToManagedZoneForwardingConfigNameServerTargetOutput() ManagedZoneForwardingConfigNameServerTargetOutput
	ToManagedZoneForwardingConfigNameServerTargetOutputWithContext(context.Context) ManagedZoneForwardingConfigNameServerTargetOutput
}

type ManagedZoneForwardingConfigNameServerTargetArgs struct {
	// Forwarding path for this NameServerTarget. If unset or set to DEFAULT, Cloud DNS makes forwarding decisions based on IP address ranges; that is, RFC1918 addresses go to the VPC network, non-RFC1918 addresses go to the internet. When set to PRIVATE, Cloud DNS always sends queries through the VPC network for this target.
	ForwardingPath ManagedZoneForwardingConfigNameServerTargetForwardingPathPtrInput `pulumi:"forwardingPath"`
	// IPv4 address of a target name server.
	Ipv4Address pulumi.StringPtrInput `pulumi:"ipv4Address"`
	// IPv6 address of a target name server. Does not accept both fields (ipv4 & ipv6) being populated.
	Ipv6Address pulumi.StringPtrInput `pulumi:"ipv6Address"`
	Kind        pulumi.StringPtrInput `pulumi:"kind"`
}

func (ManagedZoneForwardingConfigNameServerTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneForwardingConfigNameServerTarget)(nil)).Elem()
}

func (i ManagedZoneForwardingConfigNameServerTargetArgs) ToManagedZoneForwardingConfigNameServerTargetOutput() ManagedZoneForwardingConfigNameServerTargetOutput {
	return i.ToManagedZoneForwardingConfigNameServerTargetOutputWithContext(context.Background())
}

func (i ManagedZoneForwardingConfigNameServerTargetArgs) ToManagedZoneForwardingConfigNameServerTargetOutputWithContext(ctx context.Context) ManagedZoneForwardingConfigNameServerTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneForwardingConfigNameServerTargetOutput)
}

// ManagedZoneForwardingConfigNameServerTargetArrayInput is an input type that accepts ManagedZoneForwardingConfigNameServerTargetArray and ManagedZoneForwardingConfigNameServerTargetArrayOutput values.
// You can construct a concrete instance of `ManagedZoneForwardingConfigNameServerTargetArrayInput` via:
//
//          ManagedZoneForwardingConfigNameServerTargetArray{ ManagedZoneForwardingConfigNameServerTargetArgs{...} }
type ManagedZoneForwardingConfigNameServerTargetArrayInput interface {
	pulumi.Input

	ToManagedZoneForwardingConfigNameServerTargetArrayOutput() ManagedZoneForwardingConfigNameServerTargetArrayOutput
	ToManagedZoneForwardingConfigNameServerTargetArrayOutputWithContext(context.Context) ManagedZoneForwardingConfigNameServerTargetArrayOutput
}

type ManagedZoneForwardingConfigNameServerTargetArray []ManagedZoneForwardingConfigNameServerTargetInput

func (ManagedZoneForwardingConfigNameServerTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedZoneForwardingConfigNameServerTarget)(nil)).Elem()
}

func (i ManagedZoneForwardingConfigNameServerTargetArray) ToManagedZoneForwardingConfigNameServerTargetArrayOutput() ManagedZoneForwardingConfigNameServerTargetArrayOutput {
	return i.ToManagedZoneForwardingConfigNameServerTargetArrayOutputWithContext(context.Background())
}

func (i ManagedZoneForwardingConfigNameServerTargetArray) ToManagedZoneForwardingConfigNameServerTargetArrayOutputWithContext(ctx context.Context) ManagedZoneForwardingConfigNameServerTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneForwardingConfigNameServerTargetArrayOutput)
}

type ManagedZoneForwardingConfigNameServerTargetOutput struct{ *pulumi.OutputState }

func (ManagedZoneForwardingConfigNameServerTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneForwardingConfigNameServerTarget)(nil)).Elem()
}

func (o ManagedZoneForwardingConfigNameServerTargetOutput) ToManagedZoneForwardingConfigNameServerTargetOutput() ManagedZoneForwardingConfigNameServerTargetOutput {
	return o
}

func (o ManagedZoneForwardingConfigNameServerTargetOutput) ToManagedZoneForwardingConfigNameServerTargetOutputWithContext(ctx context.Context) ManagedZoneForwardingConfigNameServerTargetOutput {
	return o
}

// Forwarding path for this NameServerTarget. If unset or set to DEFAULT, Cloud DNS makes forwarding decisions based on IP address ranges; that is, RFC1918 addresses go to the VPC network, non-RFC1918 addresses go to the internet. When set to PRIVATE, Cloud DNS always sends queries through the VPC network for this target.
func (o ManagedZoneForwardingConfigNameServerTargetOutput) ForwardingPath() ManagedZoneForwardingConfigNameServerTargetForwardingPathPtrOutput {
	return o.ApplyT(func(v ManagedZoneForwardingConfigNameServerTarget) *ManagedZoneForwardingConfigNameServerTargetForwardingPath {
		return v.ForwardingPath
	}).(ManagedZoneForwardingConfigNameServerTargetForwardingPathPtrOutput)
}

// IPv4 address of a target name server.
func (o ManagedZoneForwardingConfigNameServerTargetOutput) Ipv4Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZoneForwardingConfigNameServerTarget) *string { return v.Ipv4Address }).(pulumi.StringPtrOutput)
}

// IPv6 address of a target name server. Does not accept both fields (ipv4 & ipv6) being populated.
func (o ManagedZoneForwardingConfigNameServerTargetOutput) Ipv6Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZoneForwardingConfigNameServerTarget) *string { return v.Ipv6Address }).(pulumi.StringPtrOutput)
}

func (o ManagedZoneForwardingConfigNameServerTargetOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZoneForwardingConfigNameServerTarget) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

type ManagedZoneForwardingConfigNameServerTargetArrayOutput struct{ *pulumi.OutputState }

func (ManagedZoneForwardingConfigNameServerTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedZoneForwardingConfigNameServerTarget)(nil)).Elem()
}

func (o ManagedZoneForwardingConfigNameServerTargetArrayOutput) ToManagedZoneForwardingConfigNameServerTargetArrayOutput() ManagedZoneForwardingConfigNameServerTargetArrayOutput {
	return o
}

func (o ManagedZoneForwardingConfigNameServerTargetArrayOutput) ToManagedZoneForwardingConfigNameServerTargetArrayOutputWithContext(ctx context.Context) ManagedZoneForwardingConfigNameServerTargetArrayOutput {
	return o
}

func (o ManagedZoneForwardingConfigNameServerTargetArrayOutput) Index(i pulumi.IntInput) ManagedZoneForwardingConfigNameServerTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedZoneForwardingConfigNameServerTarget {
		return vs[0].([]ManagedZoneForwardingConfigNameServerTarget)[vs[1].(int)]
	}).(ManagedZoneForwardingConfigNameServerTargetOutput)
}

type ManagedZoneForwardingConfigNameServerTargetResponse struct {
	// Forwarding path for this NameServerTarget. If unset or set to DEFAULT, Cloud DNS makes forwarding decisions based on IP address ranges; that is, RFC1918 addresses go to the VPC network, non-RFC1918 addresses go to the internet. When set to PRIVATE, Cloud DNS always sends queries through the VPC network for this target.
	ForwardingPath string `pulumi:"forwardingPath"`
	// IPv4 address of a target name server.
	Ipv4Address string `pulumi:"ipv4Address"`
	// IPv6 address of a target name server. Does not accept both fields (ipv4 & ipv6) being populated.
	Ipv6Address string `pulumi:"ipv6Address"`
	Kind        string `pulumi:"kind"`
}

// ManagedZoneForwardingConfigNameServerTargetResponseInput is an input type that accepts ManagedZoneForwardingConfigNameServerTargetResponseArgs and ManagedZoneForwardingConfigNameServerTargetResponseOutput values.
// You can construct a concrete instance of `ManagedZoneForwardingConfigNameServerTargetResponseInput` via:
//
//          ManagedZoneForwardingConfigNameServerTargetResponseArgs{...}
type ManagedZoneForwardingConfigNameServerTargetResponseInput interface {
	pulumi.Input

	ToManagedZoneForwardingConfigNameServerTargetResponseOutput() ManagedZoneForwardingConfigNameServerTargetResponseOutput
	ToManagedZoneForwardingConfigNameServerTargetResponseOutputWithContext(context.Context) ManagedZoneForwardingConfigNameServerTargetResponseOutput
}

type ManagedZoneForwardingConfigNameServerTargetResponseArgs struct {
	// Forwarding path for this NameServerTarget. If unset or set to DEFAULT, Cloud DNS makes forwarding decisions based on IP address ranges; that is, RFC1918 addresses go to the VPC network, non-RFC1918 addresses go to the internet. When set to PRIVATE, Cloud DNS always sends queries through the VPC network for this target.
	ForwardingPath pulumi.StringInput `pulumi:"forwardingPath"`
	// IPv4 address of a target name server.
	Ipv4Address pulumi.StringInput `pulumi:"ipv4Address"`
	// IPv6 address of a target name server. Does not accept both fields (ipv4 & ipv6) being populated.
	Ipv6Address pulumi.StringInput `pulumi:"ipv6Address"`
	Kind        pulumi.StringInput `pulumi:"kind"`
}

func (ManagedZoneForwardingConfigNameServerTargetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneForwardingConfigNameServerTargetResponse)(nil)).Elem()
}

func (i ManagedZoneForwardingConfigNameServerTargetResponseArgs) ToManagedZoneForwardingConfigNameServerTargetResponseOutput() ManagedZoneForwardingConfigNameServerTargetResponseOutput {
	return i.ToManagedZoneForwardingConfigNameServerTargetResponseOutputWithContext(context.Background())
}

func (i ManagedZoneForwardingConfigNameServerTargetResponseArgs) ToManagedZoneForwardingConfigNameServerTargetResponseOutputWithContext(ctx context.Context) ManagedZoneForwardingConfigNameServerTargetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneForwardingConfigNameServerTargetResponseOutput)
}

// ManagedZoneForwardingConfigNameServerTargetResponseArrayInput is an input type that accepts ManagedZoneForwardingConfigNameServerTargetResponseArray and ManagedZoneForwardingConfigNameServerTargetResponseArrayOutput values.
// You can construct a concrete instance of `ManagedZoneForwardingConfigNameServerTargetResponseArrayInput` via:
//
//          ManagedZoneForwardingConfigNameServerTargetResponseArray{ ManagedZoneForwardingConfigNameServerTargetResponseArgs{...} }
type ManagedZoneForwardingConfigNameServerTargetResponseArrayInput interface {
	pulumi.Input

	ToManagedZoneForwardingConfigNameServerTargetResponseArrayOutput() ManagedZoneForwardingConfigNameServerTargetResponseArrayOutput
	ToManagedZoneForwardingConfigNameServerTargetResponseArrayOutputWithContext(context.Context) ManagedZoneForwardingConfigNameServerTargetResponseArrayOutput
}

type ManagedZoneForwardingConfigNameServerTargetResponseArray []ManagedZoneForwardingConfigNameServerTargetResponseInput

func (ManagedZoneForwardingConfigNameServerTargetResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedZoneForwardingConfigNameServerTargetResponse)(nil)).Elem()
}

func (i ManagedZoneForwardingConfigNameServerTargetResponseArray) ToManagedZoneForwardingConfigNameServerTargetResponseArrayOutput() ManagedZoneForwardingConfigNameServerTargetResponseArrayOutput {
	return i.ToManagedZoneForwardingConfigNameServerTargetResponseArrayOutputWithContext(context.Background())
}

func (i ManagedZoneForwardingConfigNameServerTargetResponseArray) ToManagedZoneForwardingConfigNameServerTargetResponseArrayOutputWithContext(ctx context.Context) ManagedZoneForwardingConfigNameServerTargetResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneForwardingConfigNameServerTargetResponseArrayOutput)
}

type ManagedZoneForwardingConfigNameServerTargetResponseOutput struct{ *pulumi.OutputState }

func (ManagedZoneForwardingConfigNameServerTargetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneForwardingConfigNameServerTargetResponse)(nil)).Elem()
}

func (o ManagedZoneForwardingConfigNameServerTargetResponseOutput) ToManagedZoneForwardingConfigNameServerTargetResponseOutput() ManagedZoneForwardingConfigNameServerTargetResponseOutput {
	return o
}

func (o ManagedZoneForwardingConfigNameServerTargetResponseOutput) ToManagedZoneForwardingConfigNameServerTargetResponseOutputWithContext(ctx context.Context) ManagedZoneForwardingConfigNameServerTargetResponseOutput {
	return o
}

// Forwarding path for this NameServerTarget. If unset or set to DEFAULT, Cloud DNS makes forwarding decisions based on IP address ranges; that is, RFC1918 addresses go to the VPC network, non-RFC1918 addresses go to the internet. When set to PRIVATE, Cloud DNS always sends queries through the VPC network for this target.
func (o ManagedZoneForwardingConfigNameServerTargetResponseOutput) ForwardingPath() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedZoneForwardingConfigNameServerTargetResponse) string { return v.ForwardingPath }).(pulumi.StringOutput)
}

// IPv4 address of a target name server.
func (o ManagedZoneForwardingConfigNameServerTargetResponseOutput) Ipv4Address() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedZoneForwardingConfigNameServerTargetResponse) string { return v.Ipv4Address }).(pulumi.StringOutput)
}

// IPv6 address of a target name server. Does not accept both fields (ipv4 & ipv6) being populated.
func (o ManagedZoneForwardingConfigNameServerTargetResponseOutput) Ipv6Address() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedZoneForwardingConfigNameServerTargetResponse) string { return v.Ipv6Address }).(pulumi.StringOutput)
}

func (o ManagedZoneForwardingConfigNameServerTargetResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedZoneForwardingConfigNameServerTargetResponse) string { return v.Kind }).(pulumi.StringOutput)
}

type ManagedZoneForwardingConfigNameServerTargetResponseArrayOutput struct{ *pulumi.OutputState }

func (ManagedZoneForwardingConfigNameServerTargetResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedZoneForwardingConfigNameServerTargetResponse)(nil)).Elem()
}

func (o ManagedZoneForwardingConfigNameServerTargetResponseArrayOutput) ToManagedZoneForwardingConfigNameServerTargetResponseArrayOutput() ManagedZoneForwardingConfigNameServerTargetResponseArrayOutput {
	return o
}

func (o ManagedZoneForwardingConfigNameServerTargetResponseArrayOutput) ToManagedZoneForwardingConfigNameServerTargetResponseArrayOutputWithContext(ctx context.Context) ManagedZoneForwardingConfigNameServerTargetResponseArrayOutput {
	return o
}

func (o ManagedZoneForwardingConfigNameServerTargetResponseArrayOutput) Index(i pulumi.IntInput) ManagedZoneForwardingConfigNameServerTargetResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedZoneForwardingConfigNameServerTargetResponse {
		return vs[0].([]ManagedZoneForwardingConfigNameServerTargetResponse)[vs[1].(int)]
	}).(ManagedZoneForwardingConfigNameServerTargetResponseOutput)
}

type ManagedZoneForwardingConfigResponse struct {
	Kind string `pulumi:"kind"`
	// List of target name servers to forward to. Cloud DNS selects the best available name server if more than one target is given.
	TargetNameServers []ManagedZoneForwardingConfigNameServerTargetResponse `pulumi:"targetNameServers"`
}

// ManagedZoneForwardingConfigResponseInput is an input type that accepts ManagedZoneForwardingConfigResponseArgs and ManagedZoneForwardingConfigResponseOutput values.
// You can construct a concrete instance of `ManagedZoneForwardingConfigResponseInput` via:
//
//          ManagedZoneForwardingConfigResponseArgs{...}
type ManagedZoneForwardingConfigResponseInput interface {
	pulumi.Input

	ToManagedZoneForwardingConfigResponseOutput() ManagedZoneForwardingConfigResponseOutput
	ToManagedZoneForwardingConfigResponseOutputWithContext(context.Context) ManagedZoneForwardingConfigResponseOutput
}

type ManagedZoneForwardingConfigResponseArgs struct {
	Kind pulumi.StringInput `pulumi:"kind"`
	// List of target name servers to forward to. Cloud DNS selects the best available name server if more than one target is given.
	TargetNameServers ManagedZoneForwardingConfigNameServerTargetResponseArrayInput `pulumi:"targetNameServers"`
}

func (ManagedZoneForwardingConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneForwardingConfigResponse)(nil)).Elem()
}

func (i ManagedZoneForwardingConfigResponseArgs) ToManagedZoneForwardingConfigResponseOutput() ManagedZoneForwardingConfigResponseOutput {
	return i.ToManagedZoneForwardingConfigResponseOutputWithContext(context.Background())
}

func (i ManagedZoneForwardingConfigResponseArgs) ToManagedZoneForwardingConfigResponseOutputWithContext(ctx context.Context) ManagedZoneForwardingConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneForwardingConfigResponseOutput)
}

func (i ManagedZoneForwardingConfigResponseArgs) ToManagedZoneForwardingConfigResponsePtrOutput() ManagedZoneForwardingConfigResponsePtrOutput {
	return i.ToManagedZoneForwardingConfigResponsePtrOutputWithContext(context.Background())
}

func (i ManagedZoneForwardingConfigResponseArgs) ToManagedZoneForwardingConfigResponsePtrOutputWithContext(ctx context.Context) ManagedZoneForwardingConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneForwardingConfigResponseOutput).ToManagedZoneForwardingConfigResponsePtrOutputWithContext(ctx)
}

// ManagedZoneForwardingConfigResponsePtrInput is an input type that accepts ManagedZoneForwardingConfigResponseArgs, ManagedZoneForwardingConfigResponsePtr and ManagedZoneForwardingConfigResponsePtrOutput values.
// You can construct a concrete instance of `ManagedZoneForwardingConfigResponsePtrInput` via:
//
//          ManagedZoneForwardingConfigResponseArgs{...}
//
//  or:
//
//          nil
type ManagedZoneForwardingConfigResponsePtrInput interface {
	pulumi.Input

	ToManagedZoneForwardingConfigResponsePtrOutput() ManagedZoneForwardingConfigResponsePtrOutput
	ToManagedZoneForwardingConfigResponsePtrOutputWithContext(context.Context) ManagedZoneForwardingConfigResponsePtrOutput
}

type managedZoneForwardingConfigResponsePtrType ManagedZoneForwardingConfigResponseArgs

func ManagedZoneForwardingConfigResponsePtr(v *ManagedZoneForwardingConfigResponseArgs) ManagedZoneForwardingConfigResponsePtrInput {
	return (*managedZoneForwardingConfigResponsePtrType)(v)
}

func (*managedZoneForwardingConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZoneForwardingConfigResponse)(nil)).Elem()
}

func (i *managedZoneForwardingConfigResponsePtrType) ToManagedZoneForwardingConfigResponsePtrOutput() ManagedZoneForwardingConfigResponsePtrOutput {
	return i.ToManagedZoneForwardingConfigResponsePtrOutputWithContext(context.Background())
}

func (i *managedZoneForwardingConfigResponsePtrType) ToManagedZoneForwardingConfigResponsePtrOutputWithContext(ctx context.Context) ManagedZoneForwardingConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneForwardingConfigResponsePtrOutput)
}

type ManagedZoneForwardingConfigResponseOutput struct{ *pulumi.OutputState }

func (ManagedZoneForwardingConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneForwardingConfigResponse)(nil)).Elem()
}

func (o ManagedZoneForwardingConfigResponseOutput) ToManagedZoneForwardingConfigResponseOutput() ManagedZoneForwardingConfigResponseOutput {
	return o
}

func (o ManagedZoneForwardingConfigResponseOutput) ToManagedZoneForwardingConfigResponseOutputWithContext(ctx context.Context) ManagedZoneForwardingConfigResponseOutput {
	return o
}

func (o ManagedZoneForwardingConfigResponseOutput) ToManagedZoneForwardingConfigResponsePtrOutput() ManagedZoneForwardingConfigResponsePtrOutput {
	return o.ToManagedZoneForwardingConfigResponsePtrOutputWithContext(context.Background())
}

func (o ManagedZoneForwardingConfigResponseOutput) ToManagedZoneForwardingConfigResponsePtrOutputWithContext(ctx context.Context) ManagedZoneForwardingConfigResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedZoneForwardingConfigResponse) *ManagedZoneForwardingConfigResponse {
		return &v
	}).(ManagedZoneForwardingConfigResponsePtrOutput)
}

func (o ManagedZoneForwardingConfigResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedZoneForwardingConfigResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// List of target name servers to forward to. Cloud DNS selects the best available name server if more than one target is given.
func (o ManagedZoneForwardingConfigResponseOutput) TargetNameServers() ManagedZoneForwardingConfigNameServerTargetResponseArrayOutput {
	return o.ApplyT(func(v ManagedZoneForwardingConfigResponse) []ManagedZoneForwardingConfigNameServerTargetResponse {
		return v.TargetNameServers
	}).(ManagedZoneForwardingConfigNameServerTargetResponseArrayOutput)
}

type ManagedZoneForwardingConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedZoneForwardingConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZoneForwardingConfigResponse)(nil)).Elem()
}

func (o ManagedZoneForwardingConfigResponsePtrOutput) ToManagedZoneForwardingConfigResponsePtrOutput() ManagedZoneForwardingConfigResponsePtrOutput {
	return o
}

func (o ManagedZoneForwardingConfigResponsePtrOutput) ToManagedZoneForwardingConfigResponsePtrOutputWithContext(ctx context.Context) ManagedZoneForwardingConfigResponsePtrOutput {
	return o
}

func (o ManagedZoneForwardingConfigResponsePtrOutput) Elem() ManagedZoneForwardingConfigResponseOutput {
	return o.ApplyT(func(v *ManagedZoneForwardingConfigResponse) ManagedZoneForwardingConfigResponse {
		if v != nil {
			return *v
		}
		var ret ManagedZoneForwardingConfigResponse
		return ret
	}).(ManagedZoneForwardingConfigResponseOutput)
}

func (o ManagedZoneForwardingConfigResponsePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedZoneForwardingConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Kind
	}).(pulumi.StringPtrOutput)
}

// List of target name servers to forward to. Cloud DNS selects the best available name server if more than one target is given.
func (o ManagedZoneForwardingConfigResponsePtrOutput) TargetNameServers() ManagedZoneForwardingConfigNameServerTargetResponseArrayOutput {
	return o.ApplyT(func(v *ManagedZoneForwardingConfigResponse) []ManagedZoneForwardingConfigNameServerTargetResponse {
		if v == nil {
			return nil
		}
		return v.TargetNameServers
	}).(ManagedZoneForwardingConfigNameServerTargetResponseArrayOutput)
}

type ManagedZonePeeringConfig struct {
	Kind *string `pulumi:"kind"`
	// The network with which to peer.
	TargetNetwork *ManagedZonePeeringConfigTargetNetwork `pulumi:"targetNetwork"`
}

// ManagedZonePeeringConfigInput is an input type that accepts ManagedZonePeeringConfigArgs and ManagedZonePeeringConfigOutput values.
// You can construct a concrete instance of `ManagedZonePeeringConfigInput` via:
//
//          ManagedZonePeeringConfigArgs{...}
type ManagedZonePeeringConfigInput interface {
	pulumi.Input

	ToManagedZonePeeringConfigOutput() ManagedZonePeeringConfigOutput
	ToManagedZonePeeringConfigOutputWithContext(context.Context) ManagedZonePeeringConfigOutput
}

type ManagedZonePeeringConfigArgs struct {
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// The network with which to peer.
	TargetNetwork ManagedZonePeeringConfigTargetNetworkPtrInput `pulumi:"targetNetwork"`
}

func (ManagedZonePeeringConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZonePeeringConfig)(nil)).Elem()
}

func (i ManagedZonePeeringConfigArgs) ToManagedZonePeeringConfigOutput() ManagedZonePeeringConfigOutput {
	return i.ToManagedZonePeeringConfigOutputWithContext(context.Background())
}

func (i ManagedZonePeeringConfigArgs) ToManagedZonePeeringConfigOutputWithContext(ctx context.Context) ManagedZonePeeringConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZonePeeringConfigOutput)
}

func (i ManagedZonePeeringConfigArgs) ToManagedZonePeeringConfigPtrOutput() ManagedZonePeeringConfigPtrOutput {
	return i.ToManagedZonePeeringConfigPtrOutputWithContext(context.Background())
}

func (i ManagedZonePeeringConfigArgs) ToManagedZonePeeringConfigPtrOutputWithContext(ctx context.Context) ManagedZonePeeringConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZonePeeringConfigOutput).ToManagedZonePeeringConfigPtrOutputWithContext(ctx)
}

// ManagedZonePeeringConfigPtrInput is an input type that accepts ManagedZonePeeringConfigArgs, ManagedZonePeeringConfigPtr and ManagedZonePeeringConfigPtrOutput values.
// You can construct a concrete instance of `ManagedZonePeeringConfigPtrInput` via:
//
//          ManagedZonePeeringConfigArgs{...}
//
//  or:
//
//          nil
type ManagedZonePeeringConfigPtrInput interface {
	pulumi.Input

	ToManagedZonePeeringConfigPtrOutput() ManagedZonePeeringConfigPtrOutput
	ToManagedZonePeeringConfigPtrOutputWithContext(context.Context) ManagedZonePeeringConfigPtrOutput
}

type managedZonePeeringConfigPtrType ManagedZonePeeringConfigArgs

func ManagedZonePeeringConfigPtr(v *ManagedZonePeeringConfigArgs) ManagedZonePeeringConfigPtrInput {
	return (*managedZonePeeringConfigPtrType)(v)
}

func (*managedZonePeeringConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZonePeeringConfig)(nil)).Elem()
}

func (i *managedZonePeeringConfigPtrType) ToManagedZonePeeringConfigPtrOutput() ManagedZonePeeringConfigPtrOutput {
	return i.ToManagedZonePeeringConfigPtrOutputWithContext(context.Background())
}

func (i *managedZonePeeringConfigPtrType) ToManagedZonePeeringConfigPtrOutputWithContext(ctx context.Context) ManagedZonePeeringConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZonePeeringConfigPtrOutput)
}

type ManagedZonePeeringConfigOutput struct{ *pulumi.OutputState }

func (ManagedZonePeeringConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZonePeeringConfig)(nil)).Elem()
}

func (o ManagedZonePeeringConfigOutput) ToManagedZonePeeringConfigOutput() ManagedZonePeeringConfigOutput {
	return o
}

func (o ManagedZonePeeringConfigOutput) ToManagedZonePeeringConfigOutputWithContext(ctx context.Context) ManagedZonePeeringConfigOutput {
	return o
}

func (o ManagedZonePeeringConfigOutput) ToManagedZonePeeringConfigPtrOutput() ManagedZonePeeringConfigPtrOutput {
	return o.ToManagedZonePeeringConfigPtrOutputWithContext(context.Background())
}

func (o ManagedZonePeeringConfigOutput) ToManagedZonePeeringConfigPtrOutputWithContext(ctx context.Context) ManagedZonePeeringConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedZonePeeringConfig) *ManagedZonePeeringConfig {
		return &v
	}).(ManagedZonePeeringConfigPtrOutput)
}

func (o ManagedZonePeeringConfigOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZonePeeringConfig) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// The network with which to peer.
func (o ManagedZonePeeringConfigOutput) TargetNetwork() ManagedZonePeeringConfigTargetNetworkPtrOutput {
	return o.ApplyT(func(v ManagedZonePeeringConfig) *ManagedZonePeeringConfigTargetNetwork { return v.TargetNetwork }).(ManagedZonePeeringConfigTargetNetworkPtrOutput)
}

type ManagedZonePeeringConfigPtrOutput struct{ *pulumi.OutputState }

func (ManagedZonePeeringConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZonePeeringConfig)(nil)).Elem()
}

func (o ManagedZonePeeringConfigPtrOutput) ToManagedZonePeeringConfigPtrOutput() ManagedZonePeeringConfigPtrOutput {
	return o
}

func (o ManagedZonePeeringConfigPtrOutput) ToManagedZonePeeringConfigPtrOutputWithContext(ctx context.Context) ManagedZonePeeringConfigPtrOutput {
	return o
}

func (o ManagedZonePeeringConfigPtrOutput) Elem() ManagedZonePeeringConfigOutput {
	return o.ApplyT(func(v *ManagedZonePeeringConfig) ManagedZonePeeringConfig {
		if v != nil {
			return *v
		}
		var ret ManagedZonePeeringConfig
		return ret
	}).(ManagedZonePeeringConfigOutput)
}

func (o ManagedZonePeeringConfigPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedZonePeeringConfig) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// The network with which to peer.
func (o ManagedZonePeeringConfigPtrOutput) TargetNetwork() ManagedZonePeeringConfigTargetNetworkPtrOutput {
	return o.ApplyT(func(v *ManagedZonePeeringConfig) *ManagedZonePeeringConfigTargetNetwork {
		if v == nil {
			return nil
		}
		return v.TargetNetwork
	}).(ManagedZonePeeringConfigTargetNetworkPtrOutput)
}

type ManagedZonePeeringConfigResponse struct {
	Kind string `pulumi:"kind"`
	// The network with which to peer.
	TargetNetwork ManagedZonePeeringConfigTargetNetworkResponse `pulumi:"targetNetwork"`
}

// ManagedZonePeeringConfigResponseInput is an input type that accepts ManagedZonePeeringConfigResponseArgs and ManagedZonePeeringConfigResponseOutput values.
// You can construct a concrete instance of `ManagedZonePeeringConfigResponseInput` via:
//
//          ManagedZonePeeringConfigResponseArgs{...}
type ManagedZonePeeringConfigResponseInput interface {
	pulumi.Input

	ToManagedZonePeeringConfigResponseOutput() ManagedZonePeeringConfigResponseOutput
	ToManagedZonePeeringConfigResponseOutputWithContext(context.Context) ManagedZonePeeringConfigResponseOutput
}

type ManagedZonePeeringConfigResponseArgs struct {
	Kind pulumi.StringInput `pulumi:"kind"`
	// The network with which to peer.
	TargetNetwork ManagedZonePeeringConfigTargetNetworkResponseInput `pulumi:"targetNetwork"`
}

func (ManagedZonePeeringConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZonePeeringConfigResponse)(nil)).Elem()
}

func (i ManagedZonePeeringConfigResponseArgs) ToManagedZonePeeringConfigResponseOutput() ManagedZonePeeringConfigResponseOutput {
	return i.ToManagedZonePeeringConfigResponseOutputWithContext(context.Background())
}

func (i ManagedZonePeeringConfigResponseArgs) ToManagedZonePeeringConfigResponseOutputWithContext(ctx context.Context) ManagedZonePeeringConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZonePeeringConfigResponseOutput)
}

func (i ManagedZonePeeringConfigResponseArgs) ToManagedZonePeeringConfigResponsePtrOutput() ManagedZonePeeringConfigResponsePtrOutput {
	return i.ToManagedZonePeeringConfigResponsePtrOutputWithContext(context.Background())
}

func (i ManagedZonePeeringConfigResponseArgs) ToManagedZonePeeringConfigResponsePtrOutputWithContext(ctx context.Context) ManagedZonePeeringConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZonePeeringConfigResponseOutput).ToManagedZonePeeringConfigResponsePtrOutputWithContext(ctx)
}

// ManagedZonePeeringConfigResponsePtrInput is an input type that accepts ManagedZonePeeringConfigResponseArgs, ManagedZonePeeringConfigResponsePtr and ManagedZonePeeringConfigResponsePtrOutput values.
// You can construct a concrete instance of `ManagedZonePeeringConfigResponsePtrInput` via:
//
//          ManagedZonePeeringConfigResponseArgs{...}
//
//  or:
//
//          nil
type ManagedZonePeeringConfigResponsePtrInput interface {
	pulumi.Input

	ToManagedZonePeeringConfigResponsePtrOutput() ManagedZonePeeringConfigResponsePtrOutput
	ToManagedZonePeeringConfigResponsePtrOutputWithContext(context.Context) ManagedZonePeeringConfigResponsePtrOutput
}

type managedZonePeeringConfigResponsePtrType ManagedZonePeeringConfigResponseArgs

func ManagedZonePeeringConfigResponsePtr(v *ManagedZonePeeringConfigResponseArgs) ManagedZonePeeringConfigResponsePtrInput {
	return (*managedZonePeeringConfigResponsePtrType)(v)
}

func (*managedZonePeeringConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZonePeeringConfigResponse)(nil)).Elem()
}

func (i *managedZonePeeringConfigResponsePtrType) ToManagedZonePeeringConfigResponsePtrOutput() ManagedZonePeeringConfigResponsePtrOutput {
	return i.ToManagedZonePeeringConfigResponsePtrOutputWithContext(context.Background())
}

func (i *managedZonePeeringConfigResponsePtrType) ToManagedZonePeeringConfigResponsePtrOutputWithContext(ctx context.Context) ManagedZonePeeringConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZonePeeringConfigResponsePtrOutput)
}

type ManagedZonePeeringConfigResponseOutput struct{ *pulumi.OutputState }

func (ManagedZonePeeringConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZonePeeringConfigResponse)(nil)).Elem()
}

func (o ManagedZonePeeringConfigResponseOutput) ToManagedZonePeeringConfigResponseOutput() ManagedZonePeeringConfigResponseOutput {
	return o
}

func (o ManagedZonePeeringConfigResponseOutput) ToManagedZonePeeringConfigResponseOutputWithContext(ctx context.Context) ManagedZonePeeringConfigResponseOutput {
	return o
}

func (o ManagedZonePeeringConfigResponseOutput) ToManagedZonePeeringConfigResponsePtrOutput() ManagedZonePeeringConfigResponsePtrOutput {
	return o.ToManagedZonePeeringConfigResponsePtrOutputWithContext(context.Background())
}

func (o ManagedZonePeeringConfigResponseOutput) ToManagedZonePeeringConfigResponsePtrOutputWithContext(ctx context.Context) ManagedZonePeeringConfigResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedZonePeeringConfigResponse) *ManagedZonePeeringConfigResponse {
		return &v
	}).(ManagedZonePeeringConfigResponsePtrOutput)
}

func (o ManagedZonePeeringConfigResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedZonePeeringConfigResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// The network with which to peer.
func (o ManagedZonePeeringConfigResponseOutput) TargetNetwork() ManagedZonePeeringConfigTargetNetworkResponseOutput {
	return o.ApplyT(func(v ManagedZonePeeringConfigResponse) ManagedZonePeeringConfigTargetNetworkResponse {
		return v.TargetNetwork
	}).(ManagedZonePeeringConfigTargetNetworkResponseOutput)
}

type ManagedZonePeeringConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedZonePeeringConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZonePeeringConfigResponse)(nil)).Elem()
}

func (o ManagedZonePeeringConfigResponsePtrOutput) ToManagedZonePeeringConfigResponsePtrOutput() ManagedZonePeeringConfigResponsePtrOutput {
	return o
}

func (o ManagedZonePeeringConfigResponsePtrOutput) ToManagedZonePeeringConfigResponsePtrOutputWithContext(ctx context.Context) ManagedZonePeeringConfigResponsePtrOutput {
	return o
}

func (o ManagedZonePeeringConfigResponsePtrOutput) Elem() ManagedZonePeeringConfigResponseOutput {
	return o.ApplyT(func(v *ManagedZonePeeringConfigResponse) ManagedZonePeeringConfigResponse {
		if v != nil {
			return *v
		}
		var ret ManagedZonePeeringConfigResponse
		return ret
	}).(ManagedZonePeeringConfigResponseOutput)
}

func (o ManagedZonePeeringConfigResponsePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedZonePeeringConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Kind
	}).(pulumi.StringPtrOutput)
}

// The network with which to peer.
func (o ManagedZonePeeringConfigResponsePtrOutput) TargetNetwork() ManagedZonePeeringConfigTargetNetworkResponsePtrOutput {
	return o.ApplyT(func(v *ManagedZonePeeringConfigResponse) *ManagedZonePeeringConfigTargetNetworkResponse {
		if v == nil {
			return nil
		}
		return &v.TargetNetwork
	}).(ManagedZonePeeringConfigTargetNetworkResponsePtrOutput)
}

type ManagedZonePeeringConfigTargetNetwork struct {
	// The time at which the zone was deactivated, in RFC 3339 date-time format. An empty string indicates that the peering connection is active. The producer network can deactivate a zone. The zone is automatically deactivated if the producer network that the zone targeted is deleted. Output only.
	DeactivateTime *string `pulumi:"deactivateTime"`
	Kind           *string `pulumi:"kind"`
	// The fully qualified URL of the VPC network to forward queries to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
	NetworkUrl *string `pulumi:"networkUrl"`
}

// ManagedZonePeeringConfigTargetNetworkInput is an input type that accepts ManagedZonePeeringConfigTargetNetworkArgs and ManagedZonePeeringConfigTargetNetworkOutput values.
// You can construct a concrete instance of `ManagedZonePeeringConfigTargetNetworkInput` via:
//
//          ManagedZonePeeringConfigTargetNetworkArgs{...}
type ManagedZonePeeringConfigTargetNetworkInput interface {
	pulumi.Input

	ToManagedZonePeeringConfigTargetNetworkOutput() ManagedZonePeeringConfigTargetNetworkOutput
	ToManagedZonePeeringConfigTargetNetworkOutputWithContext(context.Context) ManagedZonePeeringConfigTargetNetworkOutput
}

type ManagedZonePeeringConfigTargetNetworkArgs struct {
	// The time at which the zone was deactivated, in RFC 3339 date-time format. An empty string indicates that the peering connection is active. The producer network can deactivate a zone. The zone is automatically deactivated if the producer network that the zone targeted is deleted. Output only.
	DeactivateTime pulumi.StringPtrInput `pulumi:"deactivateTime"`
	Kind           pulumi.StringPtrInput `pulumi:"kind"`
	// The fully qualified URL of the VPC network to forward queries to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
	NetworkUrl pulumi.StringPtrInput `pulumi:"networkUrl"`
}

func (ManagedZonePeeringConfigTargetNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZonePeeringConfigTargetNetwork)(nil)).Elem()
}

func (i ManagedZonePeeringConfigTargetNetworkArgs) ToManagedZonePeeringConfigTargetNetworkOutput() ManagedZonePeeringConfigTargetNetworkOutput {
	return i.ToManagedZonePeeringConfigTargetNetworkOutputWithContext(context.Background())
}

func (i ManagedZonePeeringConfigTargetNetworkArgs) ToManagedZonePeeringConfigTargetNetworkOutputWithContext(ctx context.Context) ManagedZonePeeringConfigTargetNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZonePeeringConfigTargetNetworkOutput)
}

func (i ManagedZonePeeringConfigTargetNetworkArgs) ToManagedZonePeeringConfigTargetNetworkPtrOutput() ManagedZonePeeringConfigTargetNetworkPtrOutput {
	return i.ToManagedZonePeeringConfigTargetNetworkPtrOutputWithContext(context.Background())
}

func (i ManagedZonePeeringConfigTargetNetworkArgs) ToManagedZonePeeringConfigTargetNetworkPtrOutputWithContext(ctx context.Context) ManagedZonePeeringConfigTargetNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZonePeeringConfigTargetNetworkOutput).ToManagedZonePeeringConfigTargetNetworkPtrOutputWithContext(ctx)
}

// ManagedZonePeeringConfigTargetNetworkPtrInput is an input type that accepts ManagedZonePeeringConfigTargetNetworkArgs, ManagedZonePeeringConfigTargetNetworkPtr and ManagedZonePeeringConfigTargetNetworkPtrOutput values.
// You can construct a concrete instance of `ManagedZonePeeringConfigTargetNetworkPtrInput` via:
//
//          ManagedZonePeeringConfigTargetNetworkArgs{...}
//
//  or:
//
//          nil
type ManagedZonePeeringConfigTargetNetworkPtrInput interface {
	pulumi.Input

	ToManagedZonePeeringConfigTargetNetworkPtrOutput() ManagedZonePeeringConfigTargetNetworkPtrOutput
	ToManagedZonePeeringConfigTargetNetworkPtrOutputWithContext(context.Context) ManagedZonePeeringConfigTargetNetworkPtrOutput
}

type managedZonePeeringConfigTargetNetworkPtrType ManagedZonePeeringConfigTargetNetworkArgs

func ManagedZonePeeringConfigTargetNetworkPtr(v *ManagedZonePeeringConfigTargetNetworkArgs) ManagedZonePeeringConfigTargetNetworkPtrInput {
	return (*managedZonePeeringConfigTargetNetworkPtrType)(v)
}

func (*managedZonePeeringConfigTargetNetworkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZonePeeringConfigTargetNetwork)(nil)).Elem()
}

func (i *managedZonePeeringConfigTargetNetworkPtrType) ToManagedZonePeeringConfigTargetNetworkPtrOutput() ManagedZonePeeringConfigTargetNetworkPtrOutput {
	return i.ToManagedZonePeeringConfigTargetNetworkPtrOutputWithContext(context.Background())
}

func (i *managedZonePeeringConfigTargetNetworkPtrType) ToManagedZonePeeringConfigTargetNetworkPtrOutputWithContext(ctx context.Context) ManagedZonePeeringConfigTargetNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZonePeeringConfigTargetNetworkPtrOutput)
}

type ManagedZonePeeringConfigTargetNetworkOutput struct{ *pulumi.OutputState }

func (ManagedZonePeeringConfigTargetNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZonePeeringConfigTargetNetwork)(nil)).Elem()
}

func (o ManagedZonePeeringConfigTargetNetworkOutput) ToManagedZonePeeringConfigTargetNetworkOutput() ManagedZonePeeringConfigTargetNetworkOutput {
	return o
}

func (o ManagedZonePeeringConfigTargetNetworkOutput) ToManagedZonePeeringConfigTargetNetworkOutputWithContext(ctx context.Context) ManagedZonePeeringConfigTargetNetworkOutput {
	return o
}

func (o ManagedZonePeeringConfigTargetNetworkOutput) ToManagedZonePeeringConfigTargetNetworkPtrOutput() ManagedZonePeeringConfigTargetNetworkPtrOutput {
	return o.ToManagedZonePeeringConfigTargetNetworkPtrOutputWithContext(context.Background())
}

func (o ManagedZonePeeringConfigTargetNetworkOutput) ToManagedZonePeeringConfigTargetNetworkPtrOutputWithContext(ctx context.Context) ManagedZonePeeringConfigTargetNetworkPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedZonePeeringConfigTargetNetwork) *ManagedZonePeeringConfigTargetNetwork {
		return &v
	}).(ManagedZonePeeringConfigTargetNetworkPtrOutput)
}

// The time at which the zone was deactivated, in RFC 3339 date-time format. An empty string indicates that the peering connection is active. The producer network can deactivate a zone. The zone is automatically deactivated if the producer network that the zone targeted is deleted. Output only.
func (o ManagedZonePeeringConfigTargetNetworkOutput) DeactivateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZonePeeringConfigTargetNetwork) *string { return v.DeactivateTime }).(pulumi.StringPtrOutput)
}

func (o ManagedZonePeeringConfigTargetNetworkOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZonePeeringConfigTargetNetwork) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// The fully qualified URL of the VPC network to forward queries to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
func (o ManagedZonePeeringConfigTargetNetworkOutput) NetworkUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZonePeeringConfigTargetNetwork) *string { return v.NetworkUrl }).(pulumi.StringPtrOutput)
}

type ManagedZonePeeringConfigTargetNetworkPtrOutput struct{ *pulumi.OutputState }

func (ManagedZonePeeringConfigTargetNetworkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZonePeeringConfigTargetNetwork)(nil)).Elem()
}

func (o ManagedZonePeeringConfigTargetNetworkPtrOutput) ToManagedZonePeeringConfigTargetNetworkPtrOutput() ManagedZonePeeringConfigTargetNetworkPtrOutput {
	return o
}

func (o ManagedZonePeeringConfigTargetNetworkPtrOutput) ToManagedZonePeeringConfigTargetNetworkPtrOutputWithContext(ctx context.Context) ManagedZonePeeringConfigTargetNetworkPtrOutput {
	return o
}

func (o ManagedZonePeeringConfigTargetNetworkPtrOutput) Elem() ManagedZonePeeringConfigTargetNetworkOutput {
	return o.ApplyT(func(v *ManagedZonePeeringConfigTargetNetwork) ManagedZonePeeringConfigTargetNetwork {
		if v != nil {
			return *v
		}
		var ret ManagedZonePeeringConfigTargetNetwork
		return ret
	}).(ManagedZonePeeringConfigTargetNetworkOutput)
}

// The time at which the zone was deactivated, in RFC 3339 date-time format. An empty string indicates that the peering connection is active. The producer network can deactivate a zone. The zone is automatically deactivated if the producer network that the zone targeted is deleted. Output only.
func (o ManagedZonePeeringConfigTargetNetworkPtrOutput) DeactivateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedZonePeeringConfigTargetNetwork) *string {
		if v == nil {
			return nil
		}
		return v.DeactivateTime
	}).(pulumi.StringPtrOutput)
}

func (o ManagedZonePeeringConfigTargetNetworkPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedZonePeeringConfigTargetNetwork) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// The fully qualified URL of the VPC network to forward queries to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
func (o ManagedZonePeeringConfigTargetNetworkPtrOutput) NetworkUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedZonePeeringConfigTargetNetwork) *string {
		if v == nil {
			return nil
		}
		return v.NetworkUrl
	}).(pulumi.StringPtrOutput)
}

type ManagedZonePeeringConfigTargetNetworkResponse struct {
	// The time at which the zone was deactivated, in RFC 3339 date-time format. An empty string indicates that the peering connection is active. The producer network can deactivate a zone. The zone is automatically deactivated if the producer network that the zone targeted is deleted. Output only.
	DeactivateTime string `pulumi:"deactivateTime"`
	Kind           string `pulumi:"kind"`
	// The fully qualified URL of the VPC network to forward queries to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
	NetworkUrl string `pulumi:"networkUrl"`
}

// ManagedZonePeeringConfigTargetNetworkResponseInput is an input type that accepts ManagedZonePeeringConfigTargetNetworkResponseArgs and ManagedZonePeeringConfigTargetNetworkResponseOutput values.
// You can construct a concrete instance of `ManagedZonePeeringConfigTargetNetworkResponseInput` via:
//
//          ManagedZonePeeringConfigTargetNetworkResponseArgs{...}
type ManagedZonePeeringConfigTargetNetworkResponseInput interface {
	pulumi.Input

	ToManagedZonePeeringConfigTargetNetworkResponseOutput() ManagedZonePeeringConfigTargetNetworkResponseOutput
	ToManagedZonePeeringConfigTargetNetworkResponseOutputWithContext(context.Context) ManagedZonePeeringConfigTargetNetworkResponseOutput
}

type ManagedZonePeeringConfigTargetNetworkResponseArgs struct {
	// The time at which the zone was deactivated, in RFC 3339 date-time format. An empty string indicates that the peering connection is active. The producer network can deactivate a zone. The zone is automatically deactivated if the producer network that the zone targeted is deleted. Output only.
	DeactivateTime pulumi.StringInput `pulumi:"deactivateTime"`
	Kind           pulumi.StringInput `pulumi:"kind"`
	// The fully qualified URL of the VPC network to forward queries to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
	NetworkUrl pulumi.StringInput `pulumi:"networkUrl"`
}

func (ManagedZonePeeringConfigTargetNetworkResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZonePeeringConfigTargetNetworkResponse)(nil)).Elem()
}

func (i ManagedZonePeeringConfigTargetNetworkResponseArgs) ToManagedZonePeeringConfigTargetNetworkResponseOutput() ManagedZonePeeringConfigTargetNetworkResponseOutput {
	return i.ToManagedZonePeeringConfigTargetNetworkResponseOutputWithContext(context.Background())
}

func (i ManagedZonePeeringConfigTargetNetworkResponseArgs) ToManagedZonePeeringConfigTargetNetworkResponseOutputWithContext(ctx context.Context) ManagedZonePeeringConfigTargetNetworkResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZonePeeringConfigTargetNetworkResponseOutput)
}

func (i ManagedZonePeeringConfigTargetNetworkResponseArgs) ToManagedZonePeeringConfigTargetNetworkResponsePtrOutput() ManagedZonePeeringConfigTargetNetworkResponsePtrOutput {
	return i.ToManagedZonePeeringConfigTargetNetworkResponsePtrOutputWithContext(context.Background())
}

func (i ManagedZonePeeringConfigTargetNetworkResponseArgs) ToManagedZonePeeringConfigTargetNetworkResponsePtrOutputWithContext(ctx context.Context) ManagedZonePeeringConfigTargetNetworkResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZonePeeringConfigTargetNetworkResponseOutput).ToManagedZonePeeringConfigTargetNetworkResponsePtrOutputWithContext(ctx)
}

// ManagedZonePeeringConfigTargetNetworkResponsePtrInput is an input type that accepts ManagedZonePeeringConfigTargetNetworkResponseArgs, ManagedZonePeeringConfigTargetNetworkResponsePtr and ManagedZonePeeringConfigTargetNetworkResponsePtrOutput values.
// You can construct a concrete instance of `ManagedZonePeeringConfigTargetNetworkResponsePtrInput` via:
//
//          ManagedZonePeeringConfigTargetNetworkResponseArgs{...}
//
//  or:
//
//          nil
type ManagedZonePeeringConfigTargetNetworkResponsePtrInput interface {
	pulumi.Input

	ToManagedZonePeeringConfigTargetNetworkResponsePtrOutput() ManagedZonePeeringConfigTargetNetworkResponsePtrOutput
	ToManagedZonePeeringConfigTargetNetworkResponsePtrOutputWithContext(context.Context) ManagedZonePeeringConfigTargetNetworkResponsePtrOutput
}

type managedZonePeeringConfigTargetNetworkResponsePtrType ManagedZonePeeringConfigTargetNetworkResponseArgs

func ManagedZonePeeringConfigTargetNetworkResponsePtr(v *ManagedZonePeeringConfigTargetNetworkResponseArgs) ManagedZonePeeringConfigTargetNetworkResponsePtrInput {
	return (*managedZonePeeringConfigTargetNetworkResponsePtrType)(v)
}

func (*managedZonePeeringConfigTargetNetworkResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZonePeeringConfigTargetNetworkResponse)(nil)).Elem()
}

func (i *managedZonePeeringConfigTargetNetworkResponsePtrType) ToManagedZonePeeringConfigTargetNetworkResponsePtrOutput() ManagedZonePeeringConfigTargetNetworkResponsePtrOutput {
	return i.ToManagedZonePeeringConfigTargetNetworkResponsePtrOutputWithContext(context.Background())
}

func (i *managedZonePeeringConfigTargetNetworkResponsePtrType) ToManagedZonePeeringConfigTargetNetworkResponsePtrOutputWithContext(ctx context.Context) ManagedZonePeeringConfigTargetNetworkResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZonePeeringConfigTargetNetworkResponsePtrOutput)
}

type ManagedZonePeeringConfigTargetNetworkResponseOutput struct{ *pulumi.OutputState }

func (ManagedZonePeeringConfigTargetNetworkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZonePeeringConfigTargetNetworkResponse)(nil)).Elem()
}

func (o ManagedZonePeeringConfigTargetNetworkResponseOutput) ToManagedZonePeeringConfigTargetNetworkResponseOutput() ManagedZonePeeringConfigTargetNetworkResponseOutput {
	return o
}

func (o ManagedZonePeeringConfigTargetNetworkResponseOutput) ToManagedZonePeeringConfigTargetNetworkResponseOutputWithContext(ctx context.Context) ManagedZonePeeringConfigTargetNetworkResponseOutput {
	return o
}

func (o ManagedZonePeeringConfigTargetNetworkResponseOutput) ToManagedZonePeeringConfigTargetNetworkResponsePtrOutput() ManagedZonePeeringConfigTargetNetworkResponsePtrOutput {
	return o.ToManagedZonePeeringConfigTargetNetworkResponsePtrOutputWithContext(context.Background())
}

func (o ManagedZonePeeringConfigTargetNetworkResponseOutput) ToManagedZonePeeringConfigTargetNetworkResponsePtrOutputWithContext(ctx context.Context) ManagedZonePeeringConfigTargetNetworkResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedZonePeeringConfigTargetNetworkResponse) *ManagedZonePeeringConfigTargetNetworkResponse {
		return &v
	}).(ManagedZonePeeringConfigTargetNetworkResponsePtrOutput)
}

// The time at which the zone was deactivated, in RFC 3339 date-time format. An empty string indicates that the peering connection is active. The producer network can deactivate a zone. The zone is automatically deactivated if the producer network that the zone targeted is deleted. Output only.
func (o ManagedZonePeeringConfigTargetNetworkResponseOutput) DeactivateTime() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedZonePeeringConfigTargetNetworkResponse) string { return v.DeactivateTime }).(pulumi.StringOutput)
}

func (o ManagedZonePeeringConfigTargetNetworkResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedZonePeeringConfigTargetNetworkResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// The fully qualified URL of the VPC network to forward queries to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
func (o ManagedZonePeeringConfigTargetNetworkResponseOutput) NetworkUrl() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedZonePeeringConfigTargetNetworkResponse) string { return v.NetworkUrl }).(pulumi.StringOutput)
}

type ManagedZonePeeringConfigTargetNetworkResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedZonePeeringConfigTargetNetworkResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZonePeeringConfigTargetNetworkResponse)(nil)).Elem()
}

func (o ManagedZonePeeringConfigTargetNetworkResponsePtrOutput) ToManagedZonePeeringConfigTargetNetworkResponsePtrOutput() ManagedZonePeeringConfigTargetNetworkResponsePtrOutput {
	return o
}

func (o ManagedZonePeeringConfigTargetNetworkResponsePtrOutput) ToManagedZonePeeringConfigTargetNetworkResponsePtrOutputWithContext(ctx context.Context) ManagedZonePeeringConfigTargetNetworkResponsePtrOutput {
	return o
}

func (o ManagedZonePeeringConfigTargetNetworkResponsePtrOutput) Elem() ManagedZonePeeringConfigTargetNetworkResponseOutput {
	return o.ApplyT(func(v *ManagedZonePeeringConfigTargetNetworkResponse) ManagedZonePeeringConfigTargetNetworkResponse {
		if v != nil {
			return *v
		}
		var ret ManagedZonePeeringConfigTargetNetworkResponse
		return ret
	}).(ManagedZonePeeringConfigTargetNetworkResponseOutput)
}

// The time at which the zone was deactivated, in RFC 3339 date-time format. An empty string indicates that the peering connection is active. The producer network can deactivate a zone. The zone is automatically deactivated if the producer network that the zone targeted is deleted. Output only.
func (o ManagedZonePeeringConfigTargetNetworkResponsePtrOutput) DeactivateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedZonePeeringConfigTargetNetworkResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DeactivateTime
	}).(pulumi.StringPtrOutput)
}

func (o ManagedZonePeeringConfigTargetNetworkResponsePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedZonePeeringConfigTargetNetworkResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Kind
	}).(pulumi.StringPtrOutput)
}

// The fully qualified URL of the VPC network to forward queries to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
func (o ManagedZonePeeringConfigTargetNetworkResponsePtrOutput) NetworkUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedZonePeeringConfigTargetNetworkResponse) *string {
		if v == nil {
			return nil
		}
		return &v.NetworkUrl
	}).(pulumi.StringPtrOutput)
}

type ManagedZonePrivateVisibilityConfig struct {
	// The list of Google Kubernetes Engine clusters that can see this zone.
	GkeClusters []ManagedZonePrivateVisibilityConfigGKECluster `pulumi:"gkeClusters"`
	Kind        *string                                        `pulumi:"kind"`
	// The list of VPC networks that can see this zone.
	Networks []ManagedZonePrivateVisibilityConfigNetwork `pulumi:"networks"`
}

// ManagedZonePrivateVisibilityConfigInput is an input type that accepts ManagedZonePrivateVisibilityConfigArgs and ManagedZonePrivateVisibilityConfigOutput values.
// You can construct a concrete instance of `ManagedZonePrivateVisibilityConfigInput` via:
//
//          ManagedZonePrivateVisibilityConfigArgs{...}
type ManagedZonePrivateVisibilityConfigInput interface {
	pulumi.Input

	ToManagedZonePrivateVisibilityConfigOutput() ManagedZonePrivateVisibilityConfigOutput
	ToManagedZonePrivateVisibilityConfigOutputWithContext(context.Context) ManagedZonePrivateVisibilityConfigOutput
}

type ManagedZonePrivateVisibilityConfigArgs struct {
	// The list of Google Kubernetes Engine clusters that can see this zone.
	GkeClusters ManagedZonePrivateVisibilityConfigGKEClusterArrayInput `pulumi:"gkeClusters"`
	Kind        pulumi.StringPtrInput                                  `pulumi:"kind"`
	// The list of VPC networks that can see this zone.
	Networks ManagedZonePrivateVisibilityConfigNetworkArrayInput `pulumi:"networks"`
}

func (ManagedZonePrivateVisibilityConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZonePrivateVisibilityConfig)(nil)).Elem()
}

func (i ManagedZonePrivateVisibilityConfigArgs) ToManagedZonePrivateVisibilityConfigOutput() ManagedZonePrivateVisibilityConfigOutput {
	return i.ToManagedZonePrivateVisibilityConfigOutputWithContext(context.Background())
}

func (i ManagedZonePrivateVisibilityConfigArgs) ToManagedZonePrivateVisibilityConfigOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZonePrivateVisibilityConfigOutput)
}

func (i ManagedZonePrivateVisibilityConfigArgs) ToManagedZonePrivateVisibilityConfigPtrOutput() ManagedZonePrivateVisibilityConfigPtrOutput {
	return i.ToManagedZonePrivateVisibilityConfigPtrOutputWithContext(context.Background())
}

func (i ManagedZonePrivateVisibilityConfigArgs) ToManagedZonePrivateVisibilityConfigPtrOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZonePrivateVisibilityConfigOutput).ToManagedZonePrivateVisibilityConfigPtrOutputWithContext(ctx)
}

// ManagedZonePrivateVisibilityConfigPtrInput is an input type that accepts ManagedZonePrivateVisibilityConfigArgs, ManagedZonePrivateVisibilityConfigPtr and ManagedZonePrivateVisibilityConfigPtrOutput values.
// You can construct a concrete instance of `ManagedZonePrivateVisibilityConfigPtrInput` via:
//
//          ManagedZonePrivateVisibilityConfigArgs{...}
//
//  or:
//
//          nil
type ManagedZonePrivateVisibilityConfigPtrInput interface {
	pulumi.Input

	ToManagedZonePrivateVisibilityConfigPtrOutput() ManagedZonePrivateVisibilityConfigPtrOutput
	ToManagedZonePrivateVisibilityConfigPtrOutputWithContext(context.Context) ManagedZonePrivateVisibilityConfigPtrOutput
}

type managedZonePrivateVisibilityConfigPtrType ManagedZonePrivateVisibilityConfigArgs

func ManagedZonePrivateVisibilityConfigPtr(v *ManagedZonePrivateVisibilityConfigArgs) ManagedZonePrivateVisibilityConfigPtrInput {
	return (*managedZonePrivateVisibilityConfigPtrType)(v)
}

func (*managedZonePrivateVisibilityConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZonePrivateVisibilityConfig)(nil)).Elem()
}

func (i *managedZonePrivateVisibilityConfigPtrType) ToManagedZonePrivateVisibilityConfigPtrOutput() ManagedZonePrivateVisibilityConfigPtrOutput {
	return i.ToManagedZonePrivateVisibilityConfigPtrOutputWithContext(context.Background())
}

func (i *managedZonePrivateVisibilityConfigPtrType) ToManagedZonePrivateVisibilityConfigPtrOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZonePrivateVisibilityConfigPtrOutput)
}

type ManagedZonePrivateVisibilityConfigOutput struct{ *pulumi.OutputState }

func (ManagedZonePrivateVisibilityConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZonePrivateVisibilityConfig)(nil)).Elem()
}

func (o ManagedZonePrivateVisibilityConfigOutput) ToManagedZonePrivateVisibilityConfigOutput() ManagedZonePrivateVisibilityConfigOutput {
	return o
}

func (o ManagedZonePrivateVisibilityConfigOutput) ToManagedZonePrivateVisibilityConfigOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigOutput {
	return o
}

func (o ManagedZonePrivateVisibilityConfigOutput) ToManagedZonePrivateVisibilityConfigPtrOutput() ManagedZonePrivateVisibilityConfigPtrOutput {
	return o.ToManagedZonePrivateVisibilityConfigPtrOutputWithContext(context.Background())
}

func (o ManagedZonePrivateVisibilityConfigOutput) ToManagedZonePrivateVisibilityConfigPtrOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedZonePrivateVisibilityConfig) *ManagedZonePrivateVisibilityConfig {
		return &v
	}).(ManagedZonePrivateVisibilityConfigPtrOutput)
}

// The list of Google Kubernetes Engine clusters that can see this zone.
func (o ManagedZonePrivateVisibilityConfigOutput) GkeClusters() ManagedZonePrivateVisibilityConfigGKEClusterArrayOutput {
	return o.ApplyT(func(v ManagedZonePrivateVisibilityConfig) []ManagedZonePrivateVisibilityConfigGKECluster {
		return v.GkeClusters
	}).(ManagedZonePrivateVisibilityConfigGKEClusterArrayOutput)
}

func (o ManagedZonePrivateVisibilityConfigOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZonePrivateVisibilityConfig) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// The list of VPC networks that can see this zone.
func (o ManagedZonePrivateVisibilityConfigOutput) Networks() ManagedZonePrivateVisibilityConfigNetworkArrayOutput {
	return o.ApplyT(func(v ManagedZonePrivateVisibilityConfig) []ManagedZonePrivateVisibilityConfigNetwork {
		return v.Networks
	}).(ManagedZonePrivateVisibilityConfigNetworkArrayOutput)
}

type ManagedZonePrivateVisibilityConfigPtrOutput struct{ *pulumi.OutputState }

func (ManagedZonePrivateVisibilityConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZonePrivateVisibilityConfig)(nil)).Elem()
}

func (o ManagedZonePrivateVisibilityConfigPtrOutput) ToManagedZonePrivateVisibilityConfigPtrOutput() ManagedZonePrivateVisibilityConfigPtrOutput {
	return o
}

func (o ManagedZonePrivateVisibilityConfigPtrOutput) ToManagedZonePrivateVisibilityConfigPtrOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigPtrOutput {
	return o
}

func (o ManagedZonePrivateVisibilityConfigPtrOutput) Elem() ManagedZonePrivateVisibilityConfigOutput {
	return o.ApplyT(func(v *ManagedZonePrivateVisibilityConfig) ManagedZonePrivateVisibilityConfig {
		if v != nil {
			return *v
		}
		var ret ManagedZonePrivateVisibilityConfig
		return ret
	}).(ManagedZonePrivateVisibilityConfigOutput)
}

// The list of Google Kubernetes Engine clusters that can see this zone.
func (o ManagedZonePrivateVisibilityConfigPtrOutput) GkeClusters() ManagedZonePrivateVisibilityConfigGKEClusterArrayOutput {
	return o.ApplyT(func(v *ManagedZonePrivateVisibilityConfig) []ManagedZonePrivateVisibilityConfigGKECluster {
		if v == nil {
			return nil
		}
		return v.GkeClusters
	}).(ManagedZonePrivateVisibilityConfigGKEClusterArrayOutput)
}

func (o ManagedZonePrivateVisibilityConfigPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedZonePrivateVisibilityConfig) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// The list of VPC networks that can see this zone.
func (o ManagedZonePrivateVisibilityConfigPtrOutput) Networks() ManagedZonePrivateVisibilityConfigNetworkArrayOutput {
	return o.ApplyT(func(v *ManagedZonePrivateVisibilityConfig) []ManagedZonePrivateVisibilityConfigNetwork {
		if v == nil {
			return nil
		}
		return v.Networks
	}).(ManagedZonePrivateVisibilityConfigNetworkArrayOutput)
}

type ManagedZonePrivateVisibilityConfigGKECluster struct {
	// The resource name of the cluster to bind this ManagedZone to. This should be specified in the format like: projects/*/locations/*/clusters/*. This is referenced from GKE projects.locations.clusters.get API: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/get
	GkeClusterName *string `pulumi:"gkeClusterName"`
	Kind           *string `pulumi:"kind"`
}

// ManagedZonePrivateVisibilityConfigGKEClusterInput is an input type that accepts ManagedZonePrivateVisibilityConfigGKEClusterArgs and ManagedZonePrivateVisibilityConfigGKEClusterOutput values.
// You can construct a concrete instance of `ManagedZonePrivateVisibilityConfigGKEClusterInput` via:
//
//          ManagedZonePrivateVisibilityConfigGKEClusterArgs{...}
type ManagedZonePrivateVisibilityConfigGKEClusterInput interface {
	pulumi.Input

	ToManagedZonePrivateVisibilityConfigGKEClusterOutput() ManagedZonePrivateVisibilityConfigGKEClusterOutput
	ToManagedZonePrivateVisibilityConfigGKEClusterOutputWithContext(context.Context) ManagedZonePrivateVisibilityConfigGKEClusterOutput
}

type ManagedZonePrivateVisibilityConfigGKEClusterArgs struct {
	// The resource name of the cluster to bind this ManagedZone to. This should be specified in the format like: projects/*/locations/*/clusters/*. This is referenced from GKE projects.locations.clusters.get API: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/get
	GkeClusterName pulumi.StringPtrInput `pulumi:"gkeClusterName"`
	Kind           pulumi.StringPtrInput `pulumi:"kind"`
}

func (ManagedZonePrivateVisibilityConfigGKEClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZonePrivateVisibilityConfigGKECluster)(nil)).Elem()
}

func (i ManagedZonePrivateVisibilityConfigGKEClusterArgs) ToManagedZonePrivateVisibilityConfigGKEClusterOutput() ManagedZonePrivateVisibilityConfigGKEClusterOutput {
	return i.ToManagedZonePrivateVisibilityConfigGKEClusterOutputWithContext(context.Background())
}

func (i ManagedZonePrivateVisibilityConfigGKEClusterArgs) ToManagedZonePrivateVisibilityConfigGKEClusterOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigGKEClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZonePrivateVisibilityConfigGKEClusterOutput)
}

// ManagedZonePrivateVisibilityConfigGKEClusterArrayInput is an input type that accepts ManagedZonePrivateVisibilityConfigGKEClusterArray and ManagedZonePrivateVisibilityConfigGKEClusterArrayOutput values.
// You can construct a concrete instance of `ManagedZonePrivateVisibilityConfigGKEClusterArrayInput` via:
//
//          ManagedZonePrivateVisibilityConfigGKEClusterArray{ ManagedZonePrivateVisibilityConfigGKEClusterArgs{...} }
type ManagedZonePrivateVisibilityConfigGKEClusterArrayInput interface {
	pulumi.Input

	ToManagedZonePrivateVisibilityConfigGKEClusterArrayOutput() ManagedZonePrivateVisibilityConfigGKEClusterArrayOutput
	ToManagedZonePrivateVisibilityConfigGKEClusterArrayOutputWithContext(context.Context) ManagedZonePrivateVisibilityConfigGKEClusterArrayOutput
}

type ManagedZonePrivateVisibilityConfigGKEClusterArray []ManagedZonePrivateVisibilityConfigGKEClusterInput

func (ManagedZonePrivateVisibilityConfigGKEClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedZonePrivateVisibilityConfigGKECluster)(nil)).Elem()
}

func (i ManagedZonePrivateVisibilityConfigGKEClusterArray) ToManagedZonePrivateVisibilityConfigGKEClusterArrayOutput() ManagedZonePrivateVisibilityConfigGKEClusterArrayOutput {
	return i.ToManagedZonePrivateVisibilityConfigGKEClusterArrayOutputWithContext(context.Background())
}

func (i ManagedZonePrivateVisibilityConfigGKEClusterArray) ToManagedZonePrivateVisibilityConfigGKEClusterArrayOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigGKEClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZonePrivateVisibilityConfigGKEClusterArrayOutput)
}

type ManagedZonePrivateVisibilityConfigGKEClusterOutput struct{ *pulumi.OutputState }

func (ManagedZonePrivateVisibilityConfigGKEClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZonePrivateVisibilityConfigGKECluster)(nil)).Elem()
}

func (o ManagedZonePrivateVisibilityConfigGKEClusterOutput) ToManagedZonePrivateVisibilityConfigGKEClusterOutput() ManagedZonePrivateVisibilityConfigGKEClusterOutput {
	return o
}

func (o ManagedZonePrivateVisibilityConfigGKEClusterOutput) ToManagedZonePrivateVisibilityConfigGKEClusterOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigGKEClusterOutput {
	return o
}

// The resource name of the cluster to bind this ManagedZone to. This should be specified in the format like: projects/*/locations/*/clusters/*. This is referenced from GKE projects.locations.clusters.get API: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/get
func (o ManagedZonePrivateVisibilityConfigGKEClusterOutput) GkeClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZonePrivateVisibilityConfigGKECluster) *string { return v.GkeClusterName }).(pulumi.StringPtrOutput)
}

func (o ManagedZonePrivateVisibilityConfigGKEClusterOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZonePrivateVisibilityConfigGKECluster) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

type ManagedZonePrivateVisibilityConfigGKEClusterArrayOutput struct{ *pulumi.OutputState }

func (ManagedZonePrivateVisibilityConfigGKEClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedZonePrivateVisibilityConfigGKECluster)(nil)).Elem()
}

func (o ManagedZonePrivateVisibilityConfigGKEClusterArrayOutput) ToManagedZonePrivateVisibilityConfigGKEClusterArrayOutput() ManagedZonePrivateVisibilityConfigGKEClusterArrayOutput {
	return o
}

func (o ManagedZonePrivateVisibilityConfigGKEClusterArrayOutput) ToManagedZonePrivateVisibilityConfigGKEClusterArrayOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigGKEClusterArrayOutput {
	return o
}

func (o ManagedZonePrivateVisibilityConfigGKEClusterArrayOutput) Index(i pulumi.IntInput) ManagedZonePrivateVisibilityConfigGKEClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedZonePrivateVisibilityConfigGKECluster {
		return vs[0].([]ManagedZonePrivateVisibilityConfigGKECluster)[vs[1].(int)]
	}).(ManagedZonePrivateVisibilityConfigGKEClusterOutput)
}

type ManagedZonePrivateVisibilityConfigGKEClusterResponse struct {
	// The resource name of the cluster to bind this ManagedZone to. This should be specified in the format like: projects/*/locations/*/clusters/*. This is referenced from GKE projects.locations.clusters.get API: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/get
	GkeClusterName string `pulumi:"gkeClusterName"`
	Kind           string `pulumi:"kind"`
}

// ManagedZonePrivateVisibilityConfigGKEClusterResponseInput is an input type that accepts ManagedZonePrivateVisibilityConfigGKEClusterResponseArgs and ManagedZonePrivateVisibilityConfigGKEClusterResponseOutput values.
// You can construct a concrete instance of `ManagedZonePrivateVisibilityConfigGKEClusterResponseInput` via:
//
//          ManagedZonePrivateVisibilityConfigGKEClusterResponseArgs{...}
type ManagedZonePrivateVisibilityConfigGKEClusterResponseInput interface {
	pulumi.Input

	ToManagedZonePrivateVisibilityConfigGKEClusterResponseOutput() ManagedZonePrivateVisibilityConfigGKEClusterResponseOutput
	ToManagedZonePrivateVisibilityConfigGKEClusterResponseOutputWithContext(context.Context) ManagedZonePrivateVisibilityConfigGKEClusterResponseOutput
}

type ManagedZonePrivateVisibilityConfigGKEClusterResponseArgs struct {
	// The resource name of the cluster to bind this ManagedZone to. This should be specified in the format like: projects/*/locations/*/clusters/*. This is referenced from GKE projects.locations.clusters.get API: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/get
	GkeClusterName pulumi.StringInput `pulumi:"gkeClusterName"`
	Kind           pulumi.StringInput `pulumi:"kind"`
}

func (ManagedZonePrivateVisibilityConfigGKEClusterResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZonePrivateVisibilityConfigGKEClusterResponse)(nil)).Elem()
}

func (i ManagedZonePrivateVisibilityConfigGKEClusterResponseArgs) ToManagedZonePrivateVisibilityConfigGKEClusterResponseOutput() ManagedZonePrivateVisibilityConfigGKEClusterResponseOutput {
	return i.ToManagedZonePrivateVisibilityConfigGKEClusterResponseOutputWithContext(context.Background())
}

func (i ManagedZonePrivateVisibilityConfigGKEClusterResponseArgs) ToManagedZonePrivateVisibilityConfigGKEClusterResponseOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigGKEClusterResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZonePrivateVisibilityConfigGKEClusterResponseOutput)
}

// ManagedZonePrivateVisibilityConfigGKEClusterResponseArrayInput is an input type that accepts ManagedZonePrivateVisibilityConfigGKEClusterResponseArray and ManagedZonePrivateVisibilityConfigGKEClusterResponseArrayOutput values.
// You can construct a concrete instance of `ManagedZonePrivateVisibilityConfigGKEClusterResponseArrayInput` via:
//
//          ManagedZonePrivateVisibilityConfigGKEClusterResponseArray{ ManagedZonePrivateVisibilityConfigGKEClusterResponseArgs{...} }
type ManagedZonePrivateVisibilityConfigGKEClusterResponseArrayInput interface {
	pulumi.Input

	ToManagedZonePrivateVisibilityConfigGKEClusterResponseArrayOutput() ManagedZonePrivateVisibilityConfigGKEClusterResponseArrayOutput
	ToManagedZonePrivateVisibilityConfigGKEClusterResponseArrayOutputWithContext(context.Context) ManagedZonePrivateVisibilityConfigGKEClusterResponseArrayOutput
}

type ManagedZonePrivateVisibilityConfigGKEClusterResponseArray []ManagedZonePrivateVisibilityConfigGKEClusterResponseInput

func (ManagedZonePrivateVisibilityConfigGKEClusterResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedZonePrivateVisibilityConfigGKEClusterResponse)(nil)).Elem()
}

func (i ManagedZonePrivateVisibilityConfigGKEClusterResponseArray) ToManagedZonePrivateVisibilityConfigGKEClusterResponseArrayOutput() ManagedZonePrivateVisibilityConfigGKEClusterResponseArrayOutput {
	return i.ToManagedZonePrivateVisibilityConfigGKEClusterResponseArrayOutputWithContext(context.Background())
}

func (i ManagedZonePrivateVisibilityConfigGKEClusterResponseArray) ToManagedZonePrivateVisibilityConfigGKEClusterResponseArrayOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigGKEClusterResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZonePrivateVisibilityConfigGKEClusterResponseArrayOutput)
}

type ManagedZonePrivateVisibilityConfigGKEClusterResponseOutput struct{ *pulumi.OutputState }

func (ManagedZonePrivateVisibilityConfigGKEClusterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZonePrivateVisibilityConfigGKEClusterResponse)(nil)).Elem()
}

func (o ManagedZonePrivateVisibilityConfigGKEClusterResponseOutput) ToManagedZonePrivateVisibilityConfigGKEClusterResponseOutput() ManagedZonePrivateVisibilityConfigGKEClusterResponseOutput {
	return o
}

func (o ManagedZonePrivateVisibilityConfigGKEClusterResponseOutput) ToManagedZonePrivateVisibilityConfigGKEClusterResponseOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigGKEClusterResponseOutput {
	return o
}

// The resource name of the cluster to bind this ManagedZone to. This should be specified in the format like: projects/*/locations/*/clusters/*. This is referenced from GKE projects.locations.clusters.get API: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/get
func (o ManagedZonePrivateVisibilityConfigGKEClusterResponseOutput) GkeClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedZonePrivateVisibilityConfigGKEClusterResponse) string { return v.GkeClusterName }).(pulumi.StringOutput)
}

func (o ManagedZonePrivateVisibilityConfigGKEClusterResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedZonePrivateVisibilityConfigGKEClusterResponse) string { return v.Kind }).(pulumi.StringOutput)
}

type ManagedZonePrivateVisibilityConfigGKEClusterResponseArrayOutput struct{ *pulumi.OutputState }

func (ManagedZonePrivateVisibilityConfigGKEClusterResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedZonePrivateVisibilityConfigGKEClusterResponse)(nil)).Elem()
}

func (o ManagedZonePrivateVisibilityConfigGKEClusterResponseArrayOutput) ToManagedZonePrivateVisibilityConfigGKEClusterResponseArrayOutput() ManagedZonePrivateVisibilityConfigGKEClusterResponseArrayOutput {
	return o
}

func (o ManagedZonePrivateVisibilityConfigGKEClusterResponseArrayOutput) ToManagedZonePrivateVisibilityConfigGKEClusterResponseArrayOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigGKEClusterResponseArrayOutput {
	return o
}

func (o ManagedZonePrivateVisibilityConfigGKEClusterResponseArrayOutput) Index(i pulumi.IntInput) ManagedZonePrivateVisibilityConfigGKEClusterResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedZonePrivateVisibilityConfigGKEClusterResponse {
		return vs[0].([]ManagedZonePrivateVisibilityConfigGKEClusterResponse)[vs[1].(int)]
	}).(ManagedZonePrivateVisibilityConfigGKEClusterResponseOutput)
}

type ManagedZonePrivateVisibilityConfigNetwork struct {
	Kind *string `pulumi:"kind"`
	// The fully qualified URL of the VPC network to bind to. Format this URL like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
	NetworkUrl *string `pulumi:"networkUrl"`
}

// ManagedZonePrivateVisibilityConfigNetworkInput is an input type that accepts ManagedZonePrivateVisibilityConfigNetworkArgs and ManagedZonePrivateVisibilityConfigNetworkOutput values.
// You can construct a concrete instance of `ManagedZonePrivateVisibilityConfigNetworkInput` via:
//
//          ManagedZonePrivateVisibilityConfigNetworkArgs{...}
type ManagedZonePrivateVisibilityConfigNetworkInput interface {
	pulumi.Input

	ToManagedZonePrivateVisibilityConfigNetworkOutput() ManagedZonePrivateVisibilityConfigNetworkOutput
	ToManagedZonePrivateVisibilityConfigNetworkOutputWithContext(context.Context) ManagedZonePrivateVisibilityConfigNetworkOutput
}

type ManagedZonePrivateVisibilityConfigNetworkArgs struct {
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// The fully qualified URL of the VPC network to bind to. Format this URL like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
	NetworkUrl pulumi.StringPtrInput `pulumi:"networkUrl"`
}

func (ManagedZonePrivateVisibilityConfigNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZonePrivateVisibilityConfigNetwork)(nil)).Elem()
}

func (i ManagedZonePrivateVisibilityConfigNetworkArgs) ToManagedZonePrivateVisibilityConfigNetworkOutput() ManagedZonePrivateVisibilityConfigNetworkOutput {
	return i.ToManagedZonePrivateVisibilityConfigNetworkOutputWithContext(context.Background())
}

func (i ManagedZonePrivateVisibilityConfigNetworkArgs) ToManagedZonePrivateVisibilityConfigNetworkOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZonePrivateVisibilityConfigNetworkOutput)
}

// ManagedZonePrivateVisibilityConfigNetworkArrayInput is an input type that accepts ManagedZonePrivateVisibilityConfigNetworkArray and ManagedZonePrivateVisibilityConfigNetworkArrayOutput values.
// You can construct a concrete instance of `ManagedZonePrivateVisibilityConfigNetworkArrayInput` via:
//
//          ManagedZonePrivateVisibilityConfigNetworkArray{ ManagedZonePrivateVisibilityConfigNetworkArgs{...} }
type ManagedZonePrivateVisibilityConfigNetworkArrayInput interface {
	pulumi.Input

	ToManagedZonePrivateVisibilityConfigNetworkArrayOutput() ManagedZonePrivateVisibilityConfigNetworkArrayOutput
	ToManagedZonePrivateVisibilityConfigNetworkArrayOutputWithContext(context.Context) ManagedZonePrivateVisibilityConfigNetworkArrayOutput
}

type ManagedZonePrivateVisibilityConfigNetworkArray []ManagedZonePrivateVisibilityConfigNetworkInput

func (ManagedZonePrivateVisibilityConfigNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedZonePrivateVisibilityConfigNetwork)(nil)).Elem()
}

func (i ManagedZonePrivateVisibilityConfigNetworkArray) ToManagedZonePrivateVisibilityConfigNetworkArrayOutput() ManagedZonePrivateVisibilityConfigNetworkArrayOutput {
	return i.ToManagedZonePrivateVisibilityConfigNetworkArrayOutputWithContext(context.Background())
}

func (i ManagedZonePrivateVisibilityConfigNetworkArray) ToManagedZonePrivateVisibilityConfigNetworkArrayOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZonePrivateVisibilityConfigNetworkArrayOutput)
}

type ManagedZonePrivateVisibilityConfigNetworkOutput struct{ *pulumi.OutputState }

func (ManagedZonePrivateVisibilityConfigNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZonePrivateVisibilityConfigNetwork)(nil)).Elem()
}

func (o ManagedZonePrivateVisibilityConfigNetworkOutput) ToManagedZonePrivateVisibilityConfigNetworkOutput() ManagedZonePrivateVisibilityConfigNetworkOutput {
	return o
}

func (o ManagedZonePrivateVisibilityConfigNetworkOutput) ToManagedZonePrivateVisibilityConfigNetworkOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigNetworkOutput {
	return o
}

func (o ManagedZonePrivateVisibilityConfigNetworkOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZonePrivateVisibilityConfigNetwork) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// The fully qualified URL of the VPC network to bind to. Format this URL like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
func (o ManagedZonePrivateVisibilityConfigNetworkOutput) NetworkUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZonePrivateVisibilityConfigNetwork) *string { return v.NetworkUrl }).(pulumi.StringPtrOutput)
}

type ManagedZonePrivateVisibilityConfigNetworkArrayOutput struct{ *pulumi.OutputState }

func (ManagedZonePrivateVisibilityConfigNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedZonePrivateVisibilityConfigNetwork)(nil)).Elem()
}

func (o ManagedZonePrivateVisibilityConfigNetworkArrayOutput) ToManagedZonePrivateVisibilityConfigNetworkArrayOutput() ManagedZonePrivateVisibilityConfigNetworkArrayOutput {
	return o
}

func (o ManagedZonePrivateVisibilityConfigNetworkArrayOutput) ToManagedZonePrivateVisibilityConfigNetworkArrayOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigNetworkArrayOutput {
	return o
}

func (o ManagedZonePrivateVisibilityConfigNetworkArrayOutput) Index(i pulumi.IntInput) ManagedZonePrivateVisibilityConfigNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedZonePrivateVisibilityConfigNetwork {
		return vs[0].([]ManagedZonePrivateVisibilityConfigNetwork)[vs[1].(int)]
	}).(ManagedZonePrivateVisibilityConfigNetworkOutput)
}

type ManagedZonePrivateVisibilityConfigNetworkResponse struct {
	Kind string `pulumi:"kind"`
	// The fully qualified URL of the VPC network to bind to. Format this URL like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
	NetworkUrl string `pulumi:"networkUrl"`
}

// ManagedZonePrivateVisibilityConfigNetworkResponseInput is an input type that accepts ManagedZonePrivateVisibilityConfigNetworkResponseArgs and ManagedZonePrivateVisibilityConfigNetworkResponseOutput values.
// You can construct a concrete instance of `ManagedZonePrivateVisibilityConfigNetworkResponseInput` via:
//
//          ManagedZonePrivateVisibilityConfigNetworkResponseArgs{...}
type ManagedZonePrivateVisibilityConfigNetworkResponseInput interface {
	pulumi.Input

	ToManagedZonePrivateVisibilityConfigNetworkResponseOutput() ManagedZonePrivateVisibilityConfigNetworkResponseOutput
	ToManagedZonePrivateVisibilityConfigNetworkResponseOutputWithContext(context.Context) ManagedZonePrivateVisibilityConfigNetworkResponseOutput
}

type ManagedZonePrivateVisibilityConfigNetworkResponseArgs struct {
	Kind pulumi.StringInput `pulumi:"kind"`
	// The fully qualified URL of the VPC network to bind to. Format this URL like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
	NetworkUrl pulumi.StringInput `pulumi:"networkUrl"`
}

func (ManagedZonePrivateVisibilityConfigNetworkResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZonePrivateVisibilityConfigNetworkResponse)(nil)).Elem()
}

func (i ManagedZonePrivateVisibilityConfigNetworkResponseArgs) ToManagedZonePrivateVisibilityConfigNetworkResponseOutput() ManagedZonePrivateVisibilityConfigNetworkResponseOutput {
	return i.ToManagedZonePrivateVisibilityConfigNetworkResponseOutputWithContext(context.Background())
}

func (i ManagedZonePrivateVisibilityConfigNetworkResponseArgs) ToManagedZonePrivateVisibilityConfigNetworkResponseOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigNetworkResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZonePrivateVisibilityConfigNetworkResponseOutput)
}

// ManagedZonePrivateVisibilityConfigNetworkResponseArrayInput is an input type that accepts ManagedZonePrivateVisibilityConfigNetworkResponseArray and ManagedZonePrivateVisibilityConfigNetworkResponseArrayOutput values.
// You can construct a concrete instance of `ManagedZonePrivateVisibilityConfigNetworkResponseArrayInput` via:
//
//          ManagedZonePrivateVisibilityConfigNetworkResponseArray{ ManagedZonePrivateVisibilityConfigNetworkResponseArgs{...} }
type ManagedZonePrivateVisibilityConfigNetworkResponseArrayInput interface {
	pulumi.Input

	ToManagedZonePrivateVisibilityConfigNetworkResponseArrayOutput() ManagedZonePrivateVisibilityConfigNetworkResponseArrayOutput
	ToManagedZonePrivateVisibilityConfigNetworkResponseArrayOutputWithContext(context.Context) ManagedZonePrivateVisibilityConfigNetworkResponseArrayOutput
}

type ManagedZonePrivateVisibilityConfigNetworkResponseArray []ManagedZonePrivateVisibilityConfigNetworkResponseInput

func (ManagedZonePrivateVisibilityConfigNetworkResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedZonePrivateVisibilityConfigNetworkResponse)(nil)).Elem()
}

func (i ManagedZonePrivateVisibilityConfigNetworkResponseArray) ToManagedZonePrivateVisibilityConfigNetworkResponseArrayOutput() ManagedZonePrivateVisibilityConfigNetworkResponseArrayOutput {
	return i.ToManagedZonePrivateVisibilityConfigNetworkResponseArrayOutputWithContext(context.Background())
}

func (i ManagedZonePrivateVisibilityConfigNetworkResponseArray) ToManagedZonePrivateVisibilityConfigNetworkResponseArrayOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigNetworkResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZonePrivateVisibilityConfigNetworkResponseArrayOutput)
}

type ManagedZonePrivateVisibilityConfigNetworkResponseOutput struct{ *pulumi.OutputState }

func (ManagedZonePrivateVisibilityConfigNetworkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZonePrivateVisibilityConfigNetworkResponse)(nil)).Elem()
}

func (o ManagedZonePrivateVisibilityConfigNetworkResponseOutput) ToManagedZonePrivateVisibilityConfigNetworkResponseOutput() ManagedZonePrivateVisibilityConfigNetworkResponseOutput {
	return o
}

func (o ManagedZonePrivateVisibilityConfigNetworkResponseOutput) ToManagedZonePrivateVisibilityConfigNetworkResponseOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigNetworkResponseOutput {
	return o
}

func (o ManagedZonePrivateVisibilityConfigNetworkResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedZonePrivateVisibilityConfigNetworkResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// The fully qualified URL of the VPC network to bind to. Format this URL like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
func (o ManagedZonePrivateVisibilityConfigNetworkResponseOutput) NetworkUrl() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedZonePrivateVisibilityConfigNetworkResponse) string { return v.NetworkUrl }).(pulumi.StringOutput)
}

type ManagedZonePrivateVisibilityConfigNetworkResponseArrayOutput struct{ *pulumi.OutputState }

func (ManagedZonePrivateVisibilityConfigNetworkResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedZonePrivateVisibilityConfigNetworkResponse)(nil)).Elem()
}

func (o ManagedZonePrivateVisibilityConfigNetworkResponseArrayOutput) ToManagedZonePrivateVisibilityConfigNetworkResponseArrayOutput() ManagedZonePrivateVisibilityConfigNetworkResponseArrayOutput {
	return o
}

func (o ManagedZonePrivateVisibilityConfigNetworkResponseArrayOutput) ToManagedZonePrivateVisibilityConfigNetworkResponseArrayOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigNetworkResponseArrayOutput {
	return o
}

func (o ManagedZonePrivateVisibilityConfigNetworkResponseArrayOutput) Index(i pulumi.IntInput) ManagedZonePrivateVisibilityConfigNetworkResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedZonePrivateVisibilityConfigNetworkResponse {
		return vs[0].([]ManagedZonePrivateVisibilityConfigNetworkResponse)[vs[1].(int)]
	}).(ManagedZonePrivateVisibilityConfigNetworkResponseOutput)
}

type ManagedZonePrivateVisibilityConfigResponse struct {
	// The list of Google Kubernetes Engine clusters that can see this zone.
	GkeClusters []ManagedZonePrivateVisibilityConfigGKEClusterResponse `pulumi:"gkeClusters"`
	Kind        string                                                 `pulumi:"kind"`
	// The list of VPC networks that can see this zone.
	Networks []ManagedZonePrivateVisibilityConfigNetworkResponse `pulumi:"networks"`
}

// ManagedZonePrivateVisibilityConfigResponseInput is an input type that accepts ManagedZonePrivateVisibilityConfigResponseArgs and ManagedZonePrivateVisibilityConfigResponseOutput values.
// You can construct a concrete instance of `ManagedZonePrivateVisibilityConfigResponseInput` via:
//
//          ManagedZonePrivateVisibilityConfigResponseArgs{...}
type ManagedZonePrivateVisibilityConfigResponseInput interface {
	pulumi.Input

	ToManagedZonePrivateVisibilityConfigResponseOutput() ManagedZonePrivateVisibilityConfigResponseOutput
	ToManagedZonePrivateVisibilityConfigResponseOutputWithContext(context.Context) ManagedZonePrivateVisibilityConfigResponseOutput
}

type ManagedZonePrivateVisibilityConfigResponseArgs struct {
	// The list of Google Kubernetes Engine clusters that can see this zone.
	GkeClusters ManagedZonePrivateVisibilityConfigGKEClusterResponseArrayInput `pulumi:"gkeClusters"`
	Kind        pulumi.StringInput                                             `pulumi:"kind"`
	// The list of VPC networks that can see this zone.
	Networks ManagedZonePrivateVisibilityConfigNetworkResponseArrayInput `pulumi:"networks"`
}

func (ManagedZonePrivateVisibilityConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZonePrivateVisibilityConfigResponse)(nil)).Elem()
}

func (i ManagedZonePrivateVisibilityConfigResponseArgs) ToManagedZonePrivateVisibilityConfigResponseOutput() ManagedZonePrivateVisibilityConfigResponseOutput {
	return i.ToManagedZonePrivateVisibilityConfigResponseOutputWithContext(context.Background())
}

func (i ManagedZonePrivateVisibilityConfigResponseArgs) ToManagedZonePrivateVisibilityConfigResponseOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZonePrivateVisibilityConfigResponseOutput)
}

func (i ManagedZonePrivateVisibilityConfigResponseArgs) ToManagedZonePrivateVisibilityConfigResponsePtrOutput() ManagedZonePrivateVisibilityConfigResponsePtrOutput {
	return i.ToManagedZonePrivateVisibilityConfigResponsePtrOutputWithContext(context.Background())
}

func (i ManagedZonePrivateVisibilityConfigResponseArgs) ToManagedZonePrivateVisibilityConfigResponsePtrOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZonePrivateVisibilityConfigResponseOutput).ToManagedZonePrivateVisibilityConfigResponsePtrOutputWithContext(ctx)
}

// ManagedZonePrivateVisibilityConfigResponsePtrInput is an input type that accepts ManagedZonePrivateVisibilityConfigResponseArgs, ManagedZonePrivateVisibilityConfigResponsePtr and ManagedZonePrivateVisibilityConfigResponsePtrOutput values.
// You can construct a concrete instance of `ManagedZonePrivateVisibilityConfigResponsePtrInput` via:
//
//          ManagedZonePrivateVisibilityConfigResponseArgs{...}
//
//  or:
//
//          nil
type ManagedZonePrivateVisibilityConfigResponsePtrInput interface {
	pulumi.Input

	ToManagedZonePrivateVisibilityConfigResponsePtrOutput() ManagedZonePrivateVisibilityConfigResponsePtrOutput
	ToManagedZonePrivateVisibilityConfigResponsePtrOutputWithContext(context.Context) ManagedZonePrivateVisibilityConfigResponsePtrOutput
}

type managedZonePrivateVisibilityConfigResponsePtrType ManagedZonePrivateVisibilityConfigResponseArgs

func ManagedZonePrivateVisibilityConfigResponsePtr(v *ManagedZonePrivateVisibilityConfigResponseArgs) ManagedZonePrivateVisibilityConfigResponsePtrInput {
	return (*managedZonePrivateVisibilityConfigResponsePtrType)(v)
}

func (*managedZonePrivateVisibilityConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZonePrivateVisibilityConfigResponse)(nil)).Elem()
}

func (i *managedZonePrivateVisibilityConfigResponsePtrType) ToManagedZonePrivateVisibilityConfigResponsePtrOutput() ManagedZonePrivateVisibilityConfigResponsePtrOutput {
	return i.ToManagedZonePrivateVisibilityConfigResponsePtrOutputWithContext(context.Background())
}

func (i *managedZonePrivateVisibilityConfigResponsePtrType) ToManagedZonePrivateVisibilityConfigResponsePtrOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZonePrivateVisibilityConfigResponsePtrOutput)
}

type ManagedZonePrivateVisibilityConfigResponseOutput struct{ *pulumi.OutputState }

func (ManagedZonePrivateVisibilityConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZonePrivateVisibilityConfigResponse)(nil)).Elem()
}

func (o ManagedZonePrivateVisibilityConfigResponseOutput) ToManagedZonePrivateVisibilityConfigResponseOutput() ManagedZonePrivateVisibilityConfigResponseOutput {
	return o
}

func (o ManagedZonePrivateVisibilityConfigResponseOutput) ToManagedZonePrivateVisibilityConfigResponseOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigResponseOutput {
	return o
}

func (o ManagedZonePrivateVisibilityConfigResponseOutput) ToManagedZonePrivateVisibilityConfigResponsePtrOutput() ManagedZonePrivateVisibilityConfigResponsePtrOutput {
	return o.ToManagedZonePrivateVisibilityConfigResponsePtrOutputWithContext(context.Background())
}

func (o ManagedZonePrivateVisibilityConfigResponseOutput) ToManagedZonePrivateVisibilityConfigResponsePtrOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedZonePrivateVisibilityConfigResponse) *ManagedZonePrivateVisibilityConfigResponse {
		return &v
	}).(ManagedZonePrivateVisibilityConfigResponsePtrOutput)
}

// The list of Google Kubernetes Engine clusters that can see this zone.
func (o ManagedZonePrivateVisibilityConfigResponseOutput) GkeClusters() ManagedZonePrivateVisibilityConfigGKEClusterResponseArrayOutput {
	return o.ApplyT(func(v ManagedZonePrivateVisibilityConfigResponse) []ManagedZonePrivateVisibilityConfigGKEClusterResponse {
		return v.GkeClusters
	}).(ManagedZonePrivateVisibilityConfigGKEClusterResponseArrayOutput)
}

func (o ManagedZonePrivateVisibilityConfigResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedZonePrivateVisibilityConfigResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// The list of VPC networks that can see this zone.
func (o ManagedZonePrivateVisibilityConfigResponseOutput) Networks() ManagedZonePrivateVisibilityConfigNetworkResponseArrayOutput {
	return o.ApplyT(func(v ManagedZonePrivateVisibilityConfigResponse) []ManagedZonePrivateVisibilityConfigNetworkResponse {
		return v.Networks
	}).(ManagedZonePrivateVisibilityConfigNetworkResponseArrayOutput)
}

type ManagedZonePrivateVisibilityConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedZonePrivateVisibilityConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZonePrivateVisibilityConfigResponse)(nil)).Elem()
}

func (o ManagedZonePrivateVisibilityConfigResponsePtrOutput) ToManagedZonePrivateVisibilityConfigResponsePtrOutput() ManagedZonePrivateVisibilityConfigResponsePtrOutput {
	return o
}

func (o ManagedZonePrivateVisibilityConfigResponsePtrOutput) ToManagedZonePrivateVisibilityConfigResponsePtrOutputWithContext(ctx context.Context) ManagedZonePrivateVisibilityConfigResponsePtrOutput {
	return o
}

func (o ManagedZonePrivateVisibilityConfigResponsePtrOutput) Elem() ManagedZonePrivateVisibilityConfigResponseOutput {
	return o.ApplyT(func(v *ManagedZonePrivateVisibilityConfigResponse) ManagedZonePrivateVisibilityConfigResponse {
		if v != nil {
			return *v
		}
		var ret ManagedZonePrivateVisibilityConfigResponse
		return ret
	}).(ManagedZonePrivateVisibilityConfigResponseOutput)
}

// The list of Google Kubernetes Engine clusters that can see this zone.
func (o ManagedZonePrivateVisibilityConfigResponsePtrOutput) GkeClusters() ManagedZonePrivateVisibilityConfigGKEClusterResponseArrayOutput {
	return o.ApplyT(func(v *ManagedZonePrivateVisibilityConfigResponse) []ManagedZonePrivateVisibilityConfigGKEClusterResponse {
		if v == nil {
			return nil
		}
		return v.GkeClusters
	}).(ManagedZonePrivateVisibilityConfigGKEClusterResponseArrayOutput)
}

func (o ManagedZonePrivateVisibilityConfigResponsePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedZonePrivateVisibilityConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Kind
	}).(pulumi.StringPtrOutput)
}

// The list of VPC networks that can see this zone.
func (o ManagedZonePrivateVisibilityConfigResponsePtrOutput) Networks() ManagedZonePrivateVisibilityConfigNetworkResponseArrayOutput {
	return o.ApplyT(func(v *ManagedZonePrivateVisibilityConfigResponse) []ManagedZonePrivateVisibilityConfigNetworkResponse {
		if v == nil {
			return nil
		}
		return v.Networks
	}).(ManagedZonePrivateVisibilityConfigNetworkResponseArrayOutput)
}

type ManagedZoneReverseLookupConfig struct {
	Kind *string `pulumi:"kind"`
}

// ManagedZoneReverseLookupConfigInput is an input type that accepts ManagedZoneReverseLookupConfigArgs and ManagedZoneReverseLookupConfigOutput values.
// You can construct a concrete instance of `ManagedZoneReverseLookupConfigInput` via:
//
//          ManagedZoneReverseLookupConfigArgs{...}
type ManagedZoneReverseLookupConfigInput interface {
	pulumi.Input

	ToManagedZoneReverseLookupConfigOutput() ManagedZoneReverseLookupConfigOutput
	ToManagedZoneReverseLookupConfigOutputWithContext(context.Context) ManagedZoneReverseLookupConfigOutput
}

type ManagedZoneReverseLookupConfigArgs struct {
	Kind pulumi.StringPtrInput `pulumi:"kind"`
}

func (ManagedZoneReverseLookupConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneReverseLookupConfig)(nil)).Elem()
}

func (i ManagedZoneReverseLookupConfigArgs) ToManagedZoneReverseLookupConfigOutput() ManagedZoneReverseLookupConfigOutput {
	return i.ToManagedZoneReverseLookupConfigOutputWithContext(context.Background())
}

func (i ManagedZoneReverseLookupConfigArgs) ToManagedZoneReverseLookupConfigOutputWithContext(ctx context.Context) ManagedZoneReverseLookupConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneReverseLookupConfigOutput)
}

func (i ManagedZoneReverseLookupConfigArgs) ToManagedZoneReverseLookupConfigPtrOutput() ManagedZoneReverseLookupConfigPtrOutput {
	return i.ToManagedZoneReverseLookupConfigPtrOutputWithContext(context.Background())
}

func (i ManagedZoneReverseLookupConfigArgs) ToManagedZoneReverseLookupConfigPtrOutputWithContext(ctx context.Context) ManagedZoneReverseLookupConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneReverseLookupConfigOutput).ToManagedZoneReverseLookupConfigPtrOutputWithContext(ctx)
}

// ManagedZoneReverseLookupConfigPtrInput is an input type that accepts ManagedZoneReverseLookupConfigArgs, ManagedZoneReverseLookupConfigPtr and ManagedZoneReverseLookupConfigPtrOutput values.
// You can construct a concrete instance of `ManagedZoneReverseLookupConfigPtrInput` via:
//
//          ManagedZoneReverseLookupConfigArgs{...}
//
//  or:
//
//          nil
type ManagedZoneReverseLookupConfigPtrInput interface {
	pulumi.Input

	ToManagedZoneReverseLookupConfigPtrOutput() ManagedZoneReverseLookupConfigPtrOutput
	ToManagedZoneReverseLookupConfigPtrOutputWithContext(context.Context) ManagedZoneReverseLookupConfigPtrOutput
}

type managedZoneReverseLookupConfigPtrType ManagedZoneReverseLookupConfigArgs

func ManagedZoneReverseLookupConfigPtr(v *ManagedZoneReverseLookupConfigArgs) ManagedZoneReverseLookupConfigPtrInput {
	return (*managedZoneReverseLookupConfigPtrType)(v)
}

func (*managedZoneReverseLookupConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZoneReverseLookupConfig)(nil)).Elem()
}

func (i *managedZoneReverseLookupConfigPtrType) ToManagedZoneReverseLookupConfigPtrOutput() ManagedZoneReverseLookupConfigPtrOutput {
	return i.ToManagedZoneReverseLookupConfigPtrOutputWithContext(context.Background())
}

func (i *managedZoneReverseLookupConfigPtrType) ToManagedZoneReverseLookupConfigPtrOutputWithContext(ctx context.Context) ManagedZoneReverseLookupConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneReverseLookupConfigPtrOutput)
}

type ManagedZoneReverseLookupConfigOutput struct{ *pulumi.OutputState }

func (ManagedZoneReverseLookupConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneReverseLookupConfig)(nil)).Elem()
}

func (o ManagedZoneReverseLookupConfigOutput) ToManagedZoneReverseLookupConfigOutput() ManagedZoneReverseLookupConfigOutput {
	return o
}

func (o ManagedZoneReverseLookupConfigOutput) ToManagedZoneReverseLookupConfigOutputWithContext(ctx context.Context) ManagedZoneReverseLookupConfigOutput {
	return o
}

func (o ManagedZoneReverseLookupConfigOutput) ToManagedZoneReverseLookupConfigPtrOutput() ManagedZoneReverseLookupConfigPtrOutput {
	return o.ToManagedZoneReverseLookupConfigPtrOutputWithContext(context.Background())
}

func (o ManagedZoneReverseLookupConfigOutput) ToManagedZoneReverseLookupConfigPtrOutputWithContext(ctx context.Context) ManagedZoneReverseLookupConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedZoneReverseLookupConfig) *ManagedZoneReverseLookupConfig {
		return &v
	}).(ManagedZoneReverseLookupConfigPtrOutput)
}

func (o ManagedZoneReverseLookupConfigOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZoneReverseLookupConfig) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

type ManagedZoneReverseLookupConfigPtrOutput struct{ *pulumi.OutputState }

func (ManagedZoneReverseLookupConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZoneReverseLookupConfig)(nil)).Elem()
}

func (o ManagedZoneReverseLookupConfigPtrOutput) ToManagedZoneReverseLookupConfigPtrOutput() ManagedZoneReverseLookupConfigPtrOutput {
	return o
}

func (o ManagedZoneReverseLookupConfigPtrOutput) ToManagedZoneReverseLookupConfigPtrOutputWithContext(ctx context.Context) ManagedZoneReverseLookupConfigPtrOutput {
	return o
}

func (o ManagedZoneReverseLookupConfigPtrOutput) Elem() ManagedZoneReverseLookupConfigOutput {
	return o.ApplyT(func(v *ManagedZoneReverseLookupConfig) ManagedZoneReverseLookupConfig {
		if v != nil {
			return *v
		}
		var ret ManagedZoneReverseLookupConfig
		return ret
	}).(ManagedZoneReverseLookupConfigOutput)
}

func (o ManagedZoneReverseLookupConfigPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedZoneReverseLookupConfig) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

type ManagedZoneReverseLookupConfigResponse struct {
	Kind string `pulumi:"kind"`
}

// ManagedZoneReverseLookupConfigResponseInput is an input type that accepts ManagedZoneReverseLookupConfigResponseArgs and ManagedZoneReverseLookupConfigResponseOutput values.
// You can construct a concrete instance of `ManagedZoneReverseLookupConfigResponseInput` via:
//
//          ManagedZoneReverseLookupConfigResponseArgs{...}
type ManagedZoneReverseLookupConfigResponseInput interface {
	pulumi.Input

	ToManagedZoneReverseLookupConfigResponseOutput() ManagedZoneReverseLookupConfigResponseOutput
	ToManagedZoneReverseLookupConfigResponseOutputWithContext(context.Context) ManagedZoneReverseLookupConfigResponseOutput
}

type ManagedZoneReverseLookupConfigResponseArgs struct {
	Kind pulumi.StringInput `pulumi:"kind"`
}

func (ManagedZoneReverseLookupConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneReverseLookupConfigResponse)(nil)).Elem()
}

func (i ManagedZoneReverseLookupConfigResponseArgs) ToManagedZoneReverseLookupConfigResponseOutput() ManagedZoneReverseLookupConfigResponseOutput {
	return i.ToManagedZoneReverseLookupConfigResponseOutputWithContext(context.Background())
}

func (i ManagedZoneReverseLookupConfigResponseArgs) ToManagedZoneReverseLookupConfigResponseOutputWithContext(ctx context.Context) ManagedZoneReverseLookupConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneReverseLookupConfigResponseOutput)
}

func (i ManagedZoneReverseLookupConfigResponseArgs) ToManagedZoneReverseLookupConfigResponsePtrOutput() ManagedZoneReverseLookupConfigResponsePtrOutput {
	return i.ToManagedZoneReverseLookupConfigResponsePtrOutputWithContext(context.Background())
}

func (i ManagedZoneReverseLookupConfigResponseArgs) ToManagedZoneReverseLookupConfigResponsePtrOutputWithContext(ctx context.Context) ManagedZoneReverseLookupConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneReverseLookupConfigResponseOutput).ToManagedZoneReverseLookupConfigResponsePtrOutputWithContext(ctx)
}

// ManagedZoneReverseLookupConfigResponsePtrInput is an input type that accepts ManagedZoneReverseLookupConfigResponseArgs, ManagedZoneReverseLookupConfigResponsePtr and ManagedZoneReverseLookupConfigResponsePtrOutput values.
// You can construct a concrete instance of `ManagedZoneReverseLookupConfigResponsePtrInput` via:
//
//          ManagedZoneReverseLookupConfigResponseArgs{...}
//
//  or:
//
//          nil
type ManagedZoneReverseLookupConfigResponsePtrInput interface {
	pulumi.Input

	ToManagedZoneReverseLookupConfigResponsePtrOutput() ManagedZoneReverseLookupConfigResponsePtrOutput
	ToManagedZoneReverseLookupConfigResponsePtrOutputWithContext(context.Context) ManagedZoneReverseLookupConfigResponsePtrOutput
}

type managedZoneReverseLookupConfigResponsePtrType ManagedZoneReverseLookupConfigResponseArgs

func ManagedZoneReverseLookupConfigResponsePtr(v *ManagedZoneReverseLookupConfigResponseArgs) ManagedZoneReverseLookupConfigResponsePtrInput {
	return (*managedZoneReverseLookupConfigResponsePtrType)(v)
}

func (*managedZoneReverseLookupConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZoneReverseLookupConfigResponse)(nil)).Elem()
}

func (i *managedZoneReverseLookupConfigResponsePtrType) ToManagedZoneReverseLookupConfigResponsePtrOutput() ManagedZoneReverseLookupConfigResponsePtrOutput {
	return i.ToManagedZoneReverseLookupConfigResponsePtrOutputWithContext(context.Background())
}

func (i *managedZoneReverseLookupConfigResponsePtrType) ToManagedZoneReverseLookupConfigResponsePtrOutputWithContext(ctx context.Context) ManagedZoneReverseLookupConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneReverseLookupConfigResponsePtrOutput)
}

type ManagedZoneReverseLookupConfigResponseOutput struct{ *pulumi.OutputState }

func (ManagedZoneReverseLookupConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneReverseLookupConfigResponse)(nil)).Elem()
}

func (o ManagedZoneReverseLookupConfigResponseOutput) ToManagedZoneReverseLookupConfigResponseOutput() ManagedZoneReverseLookupConfigResponseOutput {
	return o
}

func (o ManagedZoneReverseLookupConfigResponseOutput) ToManagedZoneReverseLookupConfigResponseOutputWithContext(ctx context.Context) ManagedZoneReverseLookupConfigResponseOutput {
	return o
}

func (o ManagedZoneReverseLookupConfigResponseOutput) ToManagedZoneReverseLookupConfigResponsePtrOutput() ManagedZoneReverseLookupConfigResponsePtrOutput {
	return o.ToManagedZoneReverseLookupConfigResponsePtrOutputWithContext(context.Background())
}

func (o ManagedZoneReverseLookupConfigResponseOutput) ToManagedZoneReverseLookupConfigResponsePtrOutputWithContext(ctx context.Context) ManagedZoneReverseLookupConfigResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedZoneReverseLookupConfigResponse) *ManagedZoneReverseLookupConfigResponse {
		return &v
	}).(ManagedZoneReverseLookupConfigResponsePtrOutput)
}

func (o ManagedZoneReverseLookupConfigResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedZoneReverseLookupConfigResponse) string { return v.Kind }).(pulumi.StringOutput)
}

type ManagedZoneReverseLookupConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedZoneReverseLookupConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZoneReverseLookupConfigResponse)(nil)).Elem()
}

func (o ManagedZoneReverseLookupConfigResponsePtrOutput) ToManagedZoneReverseLookupConfigResponsePtrOutput() ManagedZoneReverseLookupConfigResponsePtrOutput {
	return o
}

func (o ManagedZoneReverseLookupConfigResponsePtrOutput) ToManagedZoneReverseLookupConfigResponsePtrOutputWithContext(ctx context.Context) ManagedZoneReverseLookupConfigResponsePtrOutput {
	return o
}

func (o ManagedZoneReverseLookupConfigResponsePtrOutput) Elem() ManagedZoneReverseLookupConfigResponseOutput {
	return o.ApplyT(func(v *ManagedZoneReverseLookupConfigResponse) ManagedZoneReverseLookupConfigResponse {
		if v != nil {
			return *v
		}
		var ret ManagedZoneReverseLookupConfigResponse
		return ret
	}).(ManagedZoneReverseLookupConfigResponseOutput)
}

func (o ManagedZoneReverseLookupConfigResponsePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedZoneReverseLookupConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Kind
	}).(pulumi.StringPtrOutput)
}

// Contains information about Service Directory-backed zones.
type ManagedZoneServiceDirectoryConfig struct {
	Kind *string `pulumi:"kind"`
	// Contains information about the namespace associated with the zone.
	Namespace *ManagedZoneServiceDirectoryConfigNamespace `pulumi:"namespace"`
}

// ManagedZoneServiceDirectoryConfigInput is an input type that accepts ManagedZoneServiceDirectoryConfigArgs and ManagedZoneServiceDirectoryConfigOutput values.
// You can construct a concrete instance of `ManagedZoneServiceDirectoryConfigInput` via:
//
//          ManagedZoneServiceDirectoryConfigArgs{...}
type ManagedZoneServiceDirectoryConfigInput interface {
	pulumi.Input

	ToManagedZoneServiceDirectoryConfigOutput() ManagedZoneServiceDirectoryConfigOutput
	ToManagedZoneServiceDirectoryConfigOutputWithContext(context.Context) ManagedZoneServiceDirectoryConfigOutput
}

// Contains information about Service Directory-backed zones.
type ManagedZoneServiceDirectoryConfigArgs struct {
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Contains information about the namespace associated with the zone.
	Namespace ManagedZoneServiceDirectoryConfigNamespacePtrInput `pulumi:"namespace"`
}

func (ManagedZoneServiceDirectoryConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneServiceDirectoryConfig)(nil)).Elem()
}

func (i ManagedZoneServiceDirectoryConfigArgs) ToManagedZoneServiceDirectoryConfigOutput() ManagedZoneServiceDirectoryConfigOutput {
	return i.ToManagedZoneServiceDirectoryConfigOutputWithContext(context.Background())
}

func (i ManagedZoneServiceDirectoryConfigArgs) ToManagedZoneServiceDirectoryConfigOutputWithContext(ctx context.Context) ManagedZoneServiceDirectoryConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneServiceDirectoryConfigOutput)
}

func (i ManagedZoneServiceDirectoryConfigArgs) ToManagedZoneServiceDirectoryConfigPtrOutput() ManagedZoneServiceDirectoryConfigPtrOutput {
	return i.ToManagedZoneServiceDirectoryConfigPtrOutputWithContext(context.Background())
}

func (i ManagedZoneServiceDirectoryConfigArgs) ToManagedZoneServiceDirectoryConfigPtrOutputWithContext(ctx context.Context) ManagedZoneServiceDirectoryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneServiceDirectoryConfigOutput).ToManagedZoneServiceDirectoryConfigPtrOutputWithContext(ctx)
}

// ManagedZoneServiceDirectoryConfigPtrInput is an input type that accepts ManagedZoneServiceDirectoryConfigArgs, ManagedZoneServiceDirectoryConfigPtr and ManagedZoneServiceDirectoryConfigPtrOutput values.
// You can construct a concrete instance of `ManagedZoneServiceDirectoryConfigPtrInput` via:
//
//          ManagedZoneServiceDirectoryConfigArgs{...}
//
//  or:
//
//          nil
type ManagedZoneServiceDirectoryConfigPtrInput interface {
	pulumi.Input

	ToManagedZoneServiceDirectoryConfigPtrOutput() ManagedZoneServiceDirectoryConfigPtrOutput
	ToManagedZoneServiceDirectoryConfigPtrOutputWithContext(context.Context) ManagedZoneServiceDirectoryConfigPtrOutput
}

type managedZoneServiceDirectoryConfigPtrType ManagedZoneServiceDirectoryConfigArgs

func ManagedZoneServiceDirectoryConfigPtr(v *ManagedZoneServiceDirectoryConfigArgs) ManagedZoneServiceDirectoryConfigPtrInput {
	return (*managedZoneServiceDirectoryConfigPtrType)(v)
}

func (*managedZoneServiceDirectoryConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZoneServiceDirectoryConfig)(nil)).Elem()
}

func (i *managedZoneServiceDirectoryConfigPtrType) ToManagedZoneServiceDirectoryConfigPtrOutput() ManagedZoneServiceDirectoryConfigPtrOutput {
	return i.ToManagedZoneServiceDirectoryConfigPtrOutputWithContext(context.Background())
}

func (i *managedZoneServiceDirectoryConfigPtrType) ToManagedZoneServiceDirectoryConfigPtrOutputWithContext(ctx context.Context) ManagedZoneServiceDirectoryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneServiceDirectoryConfigPtrOutput)
}

// Contains information about Service Directory-backed zones.
type ManagedZoneServiceDirectoryConfigOutput struct{ *pulumi.OutputState }

func (ManagedZoneServiceDirectoryConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneServiceDirectoryConfig)(nil)).Elem()
}

func (o ManagedZoneServiceDirectoryConfigOutput) ToManagedZoneServiceDirectoryConfigOutput() ManagedZoneServiceDirectoryConfigOutput {
	return o
}

func (o ManagedZoneServiceDirectoryConfigOutput) ToManagedZoneServiceDirectoryConfigOutputWithContext(ctx context.Context) ManagedZoneServiceDirectoryConfigOutput {
	return o
}

func (o ManagedZoneServiceDirectoryConfigOutput) ToManagedZoneServiceDirectoryConfigPtrOutput() ManagedZoneServiceDirectoryConfigPtrOutput {
	return o.ToManagedZoneServiceDirectoryConfigPtrOutputWithContext(context.Background())
}

func (o ManagedZoneServiceDirectoryConfigOutput) ToManagedZoneServiceDirectoryConfigPtrOutputWithContext(ctx context.Context) ManagedZoneServiceDirectoryConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedZoneServiceDirectoryConfig) *ManagedZoneServiceDirectoryConfig {
		return &v
	}).(ManagedZoneServiceDirectoryConfigPtrOutput)
}

func (o ManagedZoneServiceDirectoryConfigOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZoneServiceDirectoryConfig) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Contains information about the namespace associated with the zone.
func (o ManagedZoneServiceDirectoryConfigOutput) Namespace() ManagedZoneServiceDirectoryConfigNamespacePtrOutput {
	return o.ApplyT(func(v ManagedZoneServiceDirectoryConfig) *ManagedZoneServiceDirectoryConfigNamespace {
		return v.Namespace
	}).(ManagedZoneServiceDirectoryConfigNamespacePtrOutput)
}

type ManagedZoneServiceDirectoryConfigPtrOutput struct{ *pulumi.OutputState }

func (ManagedZoneServiceDirectoryConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZoneServiceDirectoryConfig)(nil)).Elem()
}

func (o ManagedZoneServiceDirectoryConfigPtrOutput) ToManagedZoneServiceDirectoryConfigPtrOutput() ManagedZoneServiceDirectoryConfigPtrOutput {
	return o
}

func (o ManagedZoneServiceDirectoryConfigPtrOutput) ToManagedZoneServiceDirectoryConfigPtrOutputWithContext(ctx context.Context) ManagedZoneServiceDirectoryConfigPtrOutput {
	return o
}

func (o ManagedZoneServiceDirectoryConfigPtrOutput) Elem() ManagedZoneServiceDirectoryConfigOutput {
	return o.ApplyT(func(v *ManagedZoneServiceDirectoryConfig) ManagedZoneServiceDirectoryConfig {
		if v != nil {
			return *v
		}
		var ret ManagedZoneServiceDirectoryConfig
		return ret
	}).(ManagedZoneServiceDirectoryConfigOutput)
}

func (o ManagedZoneServiceDirectoryConfigPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedZoneServiceDirectoryConfig) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Contains information about the namespace associated with the zone.
func (o ManagedZoneServiceDirectoryConfigPtrOutput) Namespace() ManagedZoneServiceDirectoryConfigNamespacePtrOutput {
	return o.ApplyT(func(v *ManagedZoneServiceDirectoryConfig) *ManagedZoneServiceDirectoryConfigNamespace {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(ManagedZoneServiceDirectoryConfigNamespacePtrOutput)
}

type ManagedZoneServiceDirectoryConfigNamespace struct {
	// The time that the namespace backing this zone was deleted; an empty string if it still exists. This is in RFC3339 text format. Output only.
	DeletionTime *string `pulumi:"deletionTime"`
	Kind         *string `pulumi:"kind"`
	// The fully qualified URL of the namespace associated with the zone. Format must be https://servicedirectory.googleapis.com/v1/projects/{project}/locations/{location}/namespaces/{namespace}
	NamespaceUrl *string `pulumi:"namespaceUrl"`
}

// ManagedZoneServiceDirectoryConfigNamespaceInput is an input type that accepts ManagedZoneServiceDirectoryConfigNamespaceArgs and ManagedZoneServiceDirectoryConfigNamespaceOutput values.
// You can construct a concrete instance of `ManagedZoneServiceDirectoryConfigNamespaceInput` via:
//
//          ManagedZoneServiceDirectoryConfigNamespaceArgs{...}
type ManagedZoneServiceDirectoryConfigNamespaceInput interface {
	pulumi.Input

	ToManagedZoneServiceDirectoryConfigNamespaceOutput() ManagedZoneServiceDirectoryConfigNamespaceOutput
	ToManagedZoneServiceDirectoryConfigNamespaceOutputWithContext(context.Context) ManagedZoneServiceDirectoryConfigNamespaceOutput
}

type ManagedZoneServiceDirectoryConfigNamespaceArgs struct {
	// The time that the namespace backing this zone was deleted; an empty string if it still exists. This is in RFC3339 text format. Output only.
	DeletionTime pulumi.StringPtrInput `pulumi:"deletionTime"`
	Kind         pulumi.StringPtrInput `pulumi:"kind"`
	// The fully qualified URL of the namespace associated with the zone. Format must be https://servicedirectory.googleapis.com/v1/projects/{project}/locations/{location}/namespaces/{namespace}
	NamespaceUrl pulumi.StringPtrInput `pulumi:"namespaceUrl"`
}

func (ManagedZoneServiceDirectoryConfigNamespaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneServiceDirectoryConfigNamespace)(nil)).Elem()
}

func (i ManagedZoneServiceDirectoryConfigNamespaceArgs) ToManagedZoneServiceDirectoryConfigNamespaceOutput() ManagedZoneServiceDirectoryConfigNamespaceOutput {
	return i.ToManagedZoneServiceDirectoryConfigNamespaceOutputWithContext(context.Background())
}

func (i ManagedZoneServiceDirectoryConfigNamespaceArgs) ToManagedZoneServiceDirectoryConfigNamespaceOutputWithContext(ctx context.Context) ManagedZoneServiceDirectoryConfigNamespaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneServiceDirectoryConfigNamespaceOutput)
}

func (i ManagedZoneServiceDirectoryConfigNamespaceArgs) ToManagedZoneServiceDirectoryConfigNamespacePtrOutput() ManagedZoneServiceDirectoryConfigNamespacePtrOutput {
	return i.ToManagedZoneServiceDirectoryConfigNamespacePtrOutputWithContext(context.Background())
}

func (i ManagedZoneServiceDirectoryConfigNamespaceArgs) ToManagedZoneServiceDirectoryConfigNamespacePtrOutputWithContext(ctx context.Context) ManagedZoneServiceDirectoryConfigNamespacePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneServiceDirectoryConfigNamespaceOutput).ToManagedZoneServiceDirectoryConfigNamespacePtrOutputWithContext(ctx)
}

// ManagedZoneServiceDirectoryConfigNamespacePtrInput is an input type that accepts ManagedZoneServiceDirectoryConfigNamespaceArgs, ManagedZoneServiceDirectoryConfigNamespacePtr and ManagedZoneServiceDirectoryConfigNamespacePtrOutput values.
// You can construct a concrete instance of `ManagedZoneServiceDirectoryConfigNamespacePtrInput` via:
//
//          ManagedZoneServiceDirectoryConfigNamespaceArgs{...}
//
//  or:
//
//          nil
type ManagedZoneServiceDirectoryConfigNamespacePtrInput interface {
	pulumi.Input

	ToManagedZoneServiceDirectoryConfigNamespacePtrOutput() ManagedZoneServiceDirectoryConfigNamespacePtrOutput
	ToManagedZoneServiceDirectoryConfigNamespacePtrOutputWithContext(context.Context) ManagedZoneServiceDirectoryConfigNamespacePtrOutput
}

type managedZoneServiceDirectoryConfigNamespacePtrType ManagedZoneServiceDirectoryConfigNamespaceArgs

func ManagedZoneServiceDirectoryConfigNamespacePtr(v *ManagedZoneServiceDirectoryConfigNamespaceArgs) ManagedZoneServiceDirectoryConfigNamespacePtrInput {
	return (*managedZoneServiceDirectoryConfigNamespacePtrType)(v)
}

func (*managedZoneServiceDirectoryConfigNamespacePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZoneServiceDirectoryConfigNamespace)(nil)).Elem()
}

func (i *managedZoneServiceDirectoryConfigNamespacePtrType) ToManagedZoneServiceDirectoryConfigNamespacePtrOutput() ManagedZoneServiceDirectoryConfigNamespacePtrOutput {
	return i.ToManagedZoneServiceDirectoryConfigNamespacePtrOutputWithContext(context.Background())
}

func (i *managedZoneServiceDirectoryConfigNamespacePtrType) ToManagedZoneServiceDirectoryConfigNamespacePtrOutputWithContext(ctx context.Context) ManagedZoneServiceDirectoryConfigNamespacePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneServiceDirectoryConfigNamespacePtrOutput)
}

type ManagedZoneServiceDirectoryConfigNamespaceOutput struct{ *pulumi.OutputState }

func (ManagedZoneServiceDirectoryConfigNamespaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneServiceDirectoryConfigNamespace)(nil)).Elem()
}

func (o ManagedZoneServiceDirectoryConfigNamespaceOutput) ToManagedZoneServiceDirectoryConfigNamespaceOutput() ManagedZoneServiceDirectoryConfigNamespaceOutput {
	return o
}

func (o ManagedZoneServiceDirectoryConfigNamespaceOutput) ToManagedZoneServiceDirectoryConfigNamespaceOutputWithContext(ctx context.Context) ManagedZoneServiceDirectoryConfigNamespaceOutput {
	return o
}

func (o ManagedZoneServiceDirectoryConfigNamespaceOutput) ToManagedZoneServiceDirectoryConfigNamespacePtrOutput() ManagedZoneServiceDirectoryConfigNamespacePtrOutput {
	return o.ToManagedZoneServiceDirectoryConfigNamespacePtrOutputWithContext(context.Background())
}

func (o ManagedZoneServiceDirectoryConfigNamespaceOutput) ToManagedZoneServiceDirectoryConfigNamespacePtrOutputWithContext(ctx context.Context) ManagedZoneServiceDirectoryConfigNamespacePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedZoneServiceDirectoryConfigNamespace) *ManagedZoneServiceDirectoryConfigNamespace {
		return &v
	}).(ManagedZoneServiceDirectoryConfigNamespacePtrOutput)
}

// The time that the namespace backing this zone was deleted; an empty string if it still exists. This is in RFC3339 text format. Output only.
func (o ManagedZoneServiceDirectoryConfigNamespaceOutput) DeletionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZoneServiceDirectoryConfigNamespace) *string { return v.DeletionTime }).(pulumi.StringPtrOutput)
}

func (o ManagedZoneServiceDirectoryConfigNamespaceOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZoneServiceDirectoryConfigNamespace) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// The fully qualified URL of the namespace associated with the zone. Format must be https://servicedirectory.googleapis.com/v1/projects/{project}/locations/{location}/namespaces/{namespace}
func (o ManagedZoneServiceDirectoryConfigNamespaceOutput) NamespaceUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedZoneServiceDirectoryConfigNamespace) *string { return v.NamespaceUrl }).(pulumi.StringPtrOutput)
}

type ManagedZoneServiceDirectoryConfigNamespacePtrOutput struct{ *pulumi.OutputState }

func (ManagedZoneServiceDirectoryConfigNamespacePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZoneServiceDirectoryConfigNamespace)(nil)).Elem()
}

func (o ManagedZoneServiceDirectoryConfigNamespacePtrOutput) ToManagedZoneServiceDirectoryConfigNamespacePtrOutput() ManagedZoneServiceDirectoryConfigNamespacePtrOutput {
	return o
}

func (o ManagedZoneServiceDirectoryConfigNamespacePtrOutput) ToManagedZoneServiceDirectoryConfigNamespacePtrOutputWithContext(ctx context.Context) ManagedZoneServiceDirectoryConfigNamespacePtrOutput {
	return o
}

func (o ManagedZoneServiceDirectoryConfigNamespacePtrOutput) Elem() ManagedZoneServiceDirectoryConfigNamespaceOutput {
	return o.ApplyT(func(v *ManagedZoneServiceDirectoryConfigNamespace) ManagedZoneServiceDirectoryConfigNamespace {
		if v != nil {
			return *v
		}
		var ret ManagedZoneServiceDirectoryConfigNamespace
		return ret
	}).(ManagedZoneServiceDirectoryConfigNamespaceOutput)
}

// The time that the namespace backing this zone was deleted; an empty string if it still exists. This is in RFC3339 text format. Output only.
func (o ManagedZoneServiceDirectoryConfigNamespacePtrOutput) DeletionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedZoneServiceDirectoryConfigNamespace) *string {
		if v == nil {
			return nil
		}
		return v.DeletionTime
	}).(pulumi.StringPtrOutput)
}

func (o ManagedZoneServiceDirectoryConfigNamespacePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedZoneServiceDirectoryConfigNamespace) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// The fully qualified URL of the namespace associated with the zone. Format must be https://servicedirectory.googleapis.com/v1/projects/{project}/locations/{location}/namespaces/{namespace}
func (o ManagedZoneServiceDirectoryConfigNamespacePtrOutput) NamespaceUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedZoneServiceDirectoryConfigNamespace) *string {
		if v == nil {
			return nil
		}
		return v.NamespaceUrl
	}).(pulumi.StringPtrOutput)
}

type ManagedZoneServiceDirectoryConfigNamespaceResponse struct {
	// The time that the namespace backing this zone was deleted; an empty string if it still exists. This is in RFC3339 text format. Output only.
	DeletionTime string `pulumi:"deletionTime"`
	Kind         string `pulumi:"kind"`
	// The fully qualified URL of the namespace associated with the zone. Format must be https://servicedirectory.googleapis.com/v1/projects/{project}/locations/{location}/namespaces/{namespace}
	NamespaceUrl string `pulumi:"namespaceUrl"`
}

// ManagedZoneServiceDirectoryConfigNamespaceResponseInput is an input type that accepts ManagedZoneServiceDirectoryConfigNamespaceResponseArgs and ManagedZoneServiceDirectoryConfigNamespaceResponseOutput values.
// You can construct a concrete instance of `ManagedZoneServiceDirectoryConfigNamespaceResponseInput` via:
//
//          ManagedZoneServiceDirectoryConfigNamespaceResponseArgs{...}
type ManagedZoneServiceDirectoryConfigNamespaceResponseInput interface {
	pulumi.Input

	ToManagedZoneServiceDirectoryConfigNamespaceResponseOutput() ManagedZoneServiceDirectoryConfigNamespaceResponseOutput
	ToManagedZoneServiceDirectoryConfigNamespaceResponseOutputWithContext(context.Context) ManagedZoneServiceDirectoryConfigNamespaceResponseOutput
}

type ManagedZoneServiceDirectoryConfigNamespaceResponseArgs struct {
	// The time that the namespace backing this zone was deleted; an empty string if it still exists. This is in RFC3339 text format. Output only.
	DeletionTime pulumi.StringInput `pulumi:"deletionTime"`
	Kind         pulumi.StringInput `pulumi:"kind"`
	// The fully qualified URL of the namespace associated with the zone. Format must be https://servicedirectory.googleapis.com/v1/projects/{project}/locations/{location}/namespaces/{namespace}
	NamespaceUrl pulumi.StringInput `pulumi:"namespaceUrl"`
}

func (ManagedZoneServiceDirectoryConfigNamespaceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneServiceDirectoryConfigNamespaceResponse)(nil)).Elem()
}

func (i ManagedZoneServiceDirectoryConfigNamespaceResponseArgs) ToManagedZoneServiceDirectoryConfigNamespaceResponseOutput() ManagedZoneServiceDirectoryConfigNamespaceResponseOutput {
	return i.ToManagedZoneServiceDirectoryConfigNamespaceResponseOutputWithContext(context.Background())
}

func (i ManagedZoneServiceDirectoryConfigNamespaceResponseArgs) ToManagedZoneServiceDirectoryConfigNamespaceResponseOutputWithContext(ctx context.Context) ManagedZoneServiceDirectoryConfigNamespaceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneServiceDirectoryConfigNamespaceResponseOutput)
}

func (i ManagedZoneServiceDirectoryConfigNamespaceResponseArgs) ToManagedZoneServiceDirectoryConfigNamespaceResponsePtrOutput() ManagedZoneServiceDirectoryConfigNamespaceResponsePtrOutput {
	return i.ToManagedZoneServiceDirectoryConfigNamespaceResponsePtrOutputWithContext(context.Background())
}

func (i ManagedZoneServiceDirectoryConfigNamespaceResponseArgs) ToManagedZoneServiceDirectoryConfigNamespaceResponsePtrOutputWithContext(ctx context.Context) ManagedZoneServiceDirectoryConfigNamespaceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneServiceDirectoryConfigNamespaceResponseOutput).ToManagedZoneServiceDirectoryConfigNamespaceResponsePtrOutputWithContext(ctx)
}

// ManagedZoneServiceDirectoryConfigNamespaceResponsePtrInput is an input type that accepts ManagedZoneServiceDirectoryConfigNamespaceResponseArgs, ManagedZoneServiceDirectoryConfigNamespaceResponsePtr and ManagedZoneServiceDirectoryConfigNamespaceResponsePtrOutput values.
// You can construct a concrete instance of `ManagedZoneServiceDirectoryConfigNamespaceResponsePtrInput` via:
//
//          ManagedZoneServiceDirectoryConfigNamespaceResponseArgs{...}
//
//  or:
//
//          nil
type ManagedZoneServiceDirectoryConfigNamespaceResponsePtrInput interface {
	pulumi.Input

	ToManagedZoneServiceDirectoryConfigNamespaceResponsePtrOutput() ManagedZoneServiceDirectoryConfigNamespaceResponsePtrOutput
	ToManagedZoneServiceDirectoryConfigNamespaceResponsePtrOutputWithContext(context.Context) ManagedZoneServiceDirectoryConfigNamespaceResponsePtrOutput
}

type managedZoneServiceDirectoryConfigNamespaceResponsePtrType ManagedZoneServiceDirectoryConfigNamespaceResponseArgs

func ManagedZoneServiceDirectoryConfigNamespaceResponsePtr(v *ManagedZoneServiceDirectoryConfigNamespaceResponseArgs) ManagedZoneServiceDirectoryConfigNamespaceResponsePtrInput {
	return (*managedZoneServiceDirectoryConfigNamespaceResponsePtrType)(v)
}

func (*managedZoneServiceDirectoryConfigNamespaceResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZoneServiceDirectoryConfigNamespaceResponse)(nil)).Elem()
}

func (i *managedZoneServiceDirectoryConfigNamespaceResponsePtrType) ToManagedZoneServiceDirectoryConfigNamespaceResponsePtrOutput() ManagedZoneServiceDirectoryConfigNamespaceResponsePtrOutput {
	return i.ToManagedZoneServiceDirectoryConfigNamespaceResponsePtrOutputWithContext(context.Background())
}

func (i *managedZoneServiceDirectoryConfigNamespaceResponsePtrType) ToManagedZoneServiceDirectoryConfigNamespaceResponsePtrOutputWithContext(ctx context.Context) ManagedZoneServiceDirectoryConfigNamespaceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneServiceDirectoryConfigNamespaceResponsePtrOutput)
}

type ManagedZoneServiceDirectoryConfigNamespaceResponseOutput struct{ *pulumi.OutputState }

func (ManagedZoneServiceDirectoryConfigNamespaceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneServiceDirectoryConfigNamespaceResponse)(nil)).Elem()
}

func (o ManagedZoneServiceDirectoryConfigNamespaceResponseOutput) ToManagedZoneServiceDirectoryConfigNamespaceResponseOutput() ManagedZoneServiceDirectoryConfigNamespaceResponseOutput {
	return o
}

func (o ManagedZoneServiceDirectoryConfigNamespaceResponseOutput) ToManagedZoneServiceDirectoryConfigNamespaceResponseOutputWithContext(ctx context.Context) ManagedZoneServiceDirectoryConfigNamespaceResponseOutput {
	return o
}

func (o ManagedZoneServiceDirectoryConfigNamespaceResponseOutput) ToManagedZoneServiceDirectoryConfigNamespaceResponsePtrOutput() ManagedZoneServiceDirectoryConfigNamespaceResponsePtrOutput {
	return o.ToManagedZoneServiceDirectoryConfigNamespaceResponsePtrOutputWithContext(context.Background())
}

func (o ManagedZoneServiceDirectoryConfigNamespaceResponseOutput) ToManagedZoneServiceDirectoryConfigNamespaceResponsePtrOutputWithContext(ctx context.Context) ManagedZoneServiceDirectoryConfigNamespaceResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedZoneServiceDirectoryConfigNamespaceResponse) *ManagedZoneServiceDirectoryConfigNamespaceResponse {
		return &v
	}).(ManagedZoneServiceDirectoryConfigNamespaceResponsePtrOutput)
}

// The time that the namespace backing this zone was deleted; an empty string if it still exists. This is in RFC3339 text format. Output only.
func (o ManagedZoneServiceDirectoryConfigNamespaceResponseOutput) DeletionTime() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedZoneServiceDirectoryConfigNamespaceResponse) string { return v.DeletionTime }).(pulumi.StringOutput)
}

func (o ManagedZoneServiceDirectoryConfigNamespaceResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedZoneServiceDirectoryConfigNamespaceResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// The fully qualified URL of the namespace associated with the zone. Format must be https://servicedirectory.googleapis.com/v1/projects/{project}/locations/{location}/namespaces/{namespace}
func (o ManagedZoneServiceDirectoryConfigNamespaceResponseOutput) NamespaceUrl() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedZoneServiceDirectoryConfigNamespaceResponse) string { return v.NamespaceUrl }).(pulumi.StringOutput)
}

type ManagedZoneServiceDirectoryConfigNamespaceResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedZoneServiceDirectoryConfigNamespaceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZoneServiceDirectoryConfigNamespaceResponse)(nil)).Elem()
}

func (o ManagedZoneServiceDirectoryConfigNamespaceResponsePtrOutput) ToManagedZoneServiceDirectoryConfigNamespaceResponsePtrOutput() ManagedZoneServiceDirectoryConfigNamespaceResponsePtrOutput {
	return o
}

func (o ManagedZoneServiceDirectoryConfigNamespaceResponsePtrOutput) ToManagedZoneServiceDirectoryConfigNamespaceResponsePtrOutputWithContext(ctx context.Context) ManagedZoneServiceDirectoryConfigNamespaceResponsePtrOutput {
	return o
}

func (o ManagedZoneServiceDirectoryConfigNamespaceResponsePtrOutput) Elem() ManagedZoneServiceDirectoryConfigNamespaceResponseOutput {
	return o.ApplyT(func(v *ManagedZoneServiceDirectoryConfigNamespaceResponse) ManagedZoneServiceDirectoryConfigNamespaceResponse {
		if v != nil {
			return *v
		}
		var ret ManagedZoneServiceDirectoryConfigNamespaceResponse
		return ret
	}).(ManagedZoneServiceDirectoryConfigNamespaceResponseOutput)
}

// The time that the namespace backing this zone was deleted; an empty string if it still exists. This is in RFC3339 text format. Output only.
func (o ManagedZoneServiceDirectoryConfigNamespaceResponsePtrOutput) DeletionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedZoneServiceDirectoryConfigNamespaceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DeletionTime
	}).(pulumi.StringPtrOutput)
}

func (o ManagedZoneServiceDirectoryConfigNamespaceResponsePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedZoneServiceDirectoryConfigNamespaceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Kind
	}).(pulumi.StringPtrOutput)
}

// The fully qualified URL of the namespace associated with the zone. Format must be https://servicedirectory.googleapis.com/v1/projects/{project}/locations/{location}/namespaces/{namespace}
func (o ManagedZoneServiceDirectoryConfigNamespaceResponsePtrOutput) NamespaceUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedZoneServiceDirectoryConfigNamespaceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.NamespaceUrl
	}).(pulumi.StringPtrOutput)
}

// Contains information about Service Directory-backed zones.
type ManagedZoneServiceDirectoryConfigResponse struct {
	Kind string `pulumi:"kind"`
	// Contains information about the namespace associated with the zone.
	Namespace ManagedZoneServiceDirectoryConfigNamespaceResponse `pulumi:"namespace"`
}

// ManagedZoneServiceDirectoryConfigResponseInput is an input type that accepts ManagedZoneServiceDirectoryConfigResponseArgs and ManagedZoneServiceDirectoryConfigResponseOutput values.
// You can construct a concrete instance of `ManagedZoneServiceDirectoryConfigResponseInput` via:
//
//          ManagedZoneServiceDirectoryConfigResponseArgs{...}
type ManagedZoneServiceDirectoryConfigResponseInput interface {
	pulumi.Input

	ToManagedZoneServiceDirectoryConfigResponseOutput() ManagedZoneServiceDirectoryConfigResponseOutput
	ToManagedZoneServiceDirectoryConfigResponseOutputWithContext(context.Context) ManagedZoneServiceDirectoryConfigResponseOutput
}

// Contains information about Service Directory-backed zones.
type ManagedZoneServiceDirectoryConfigResponseArgs struct {
	Kind pulumi.StringInput `pulumi:"kind"`
	// Contains information about the namespace associated with the zone.
	Namespace ManagedZoneServiceDirectoryConfigNamespaceResponseInput `pulumi:"namespace"`
}

func (ManagedZoneServiceDirectoryConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneServiceDirectoryConfigResponse)(nil)).Elem()
}

func (i ManagedZoneServiceDirectoryConfigResponseArgs) ToManagedZoneServiceDirectoryConfigResponseOutput() ManagedZoneServiceDirectoryConfigResponseOutput {
	return i.ToManagedZoneServiceDirectoryConfigResponseOutputWithContext(context.Background())
}

func (i ManagedZoneServiceDirectoryConfigResponseArgs) ToManagedZoneServiceDirectoryConfigResponseOutputWithContext(ctx context.Context) ManagedZoneServiceDirectoryConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneServiceDirectoryConfigResponseOutput)
}

func (i ManagedZoneServiceDirectoryConfigResponseArgs) ToManagedZoneServiceDirectoryConfigResponsePtrOutput() ManagedZoneServiceDirectoryConfigResponsePtrOutput {
	return i.ToManagedZoneServiceDirectoryConfigResponsePtrOutputWithContext(context.Background())
}

func (i ManagedZoneServiceDirectoryConfigResponseArgs) ToManagedZoneServiceDirectoryConfigResponsePtrOutputWithContext(ctx context.Context) ManagedZoneServiceDirectoryConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneServiceDirectoryConfigResponseOutput).ToManagedZoneServiceDirectoryConfigResponsePtrOutputWithContext(ctx)
}

// ManagedZoneServiceDirectoryConfigResponsePtrInput is an input type that accepts ManagedZoneServiceDirectoryConfigResponseArgs, ManagedZoneServiceDirectoryConfigResponsePtr and ManagedZoneServiceDirectoryConfigResponsePtrOutput values.
// You can construct a concrete instance of `ManagedZoneServiceDirectoryConfigResponsePtrInput` via:
//
//          ManagedZoneServiceDirectoryConfigResponseArgs{...}
//
//  or:
//
//          nil
type ManagedZoneServiceDirectoryConfigResponsePtrInput interface {
	pulumi.Input

	ToManagedZoneServiceDirectoryConfigResponsePtrOutput() ManagedZoneServiceDirectoryConfigResponsePtrOutput
	ToManagedZoneServiceDirectoryConfigResponsePtrOutputWithContext(context.Context) ManagedZoneServiceDirectoryConfigResponsePtrOutput
}

type managedZoneServiceDirectoryConfigResponsePtrType ManagedZoneServiceDirectoryConfigResponseArgs

func ManagedZoneServiceDirectoryConfigResponsePtr(v *ManagedZoneServiceDirectoryConfigResponseArgs) ManagedZoneServiceDirectoryConfigResponsePtrInput {
	return (*managedZoneServiceDirectoryConfigResponsePtrType)(v)
}

func (*managedZoneServiceDirectoryConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZoneServiceDirectoryConfigResponse)(nil)).Elem()
}

func (i *managedZoneServiceDirectoryConfigResponsePtrType) ToManagedZoneServiceDirectoryConfigResponsePtrOutput() ManagedZoneServiceDirectoryConfigResponsePtrOutput {
	return i.ToManagedZoneServiceDirectoryConfigResponsePtrOutputWithContext(context.Background())
}

func (i *managedZoneServiceDirectoryConfigResponsePtrType) ToManagedZoneServiceDirectoryConfigResponsePtrOutputWithContext(ctx context.Context) ManagedZoneServiceDirectoryConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneServiceDirectoryConfigResponsePtrOutput)
}

// Contains information about Service Directory-backed zones.
type ManagedZoneServiceDirectoryConfigResponseOutput struct{ *pulumi.OutputState }

func (ManagedZoneServiceDirectoryConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedZoneServiceDirectoryConfigResponse)(nil)).Elem()
}

func (o ManagedZoneServiceDirectoryConfigResponseOutput) ToManagedZoneServiceDirectoryConfigResponseOutput() ManagedZoneServiceDirectoryConfigResponseOutput {
	return o
}

func (o ManagedZoneServiceDirectoryConfigResponseOutput) ToManagedZoneServiceDirectoryConfigResponseOutputWithContext(ctx context.Context) ManagedZoneServiceDirectoryConfigResponseOutput {
	return o
}

func (o ManagedZoneServiceDirectoryConfigResponseOutput) ToManagedZoneServiceDirectoryConfigResponsePtrOutput() ManagedZoneServiceDirectoryConfigResponsePtrOutput {
	return o.ToManagedZoneServiceDirectoryConfigResponsePtrOutputWithContext(context.Background())
}

func (o ManagedZoneServiceDirectoryConfigResponseOutput) ToManagedZoneServiceDirectoryConfigResponsePtrOutputWithContext(ctx context.Context) ManagedZoneServiceDirectoryConfigResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedZoneServiceDirectoryConfigResponse) *ManagedZoneServiceDirectoryConfigResponse {
		return &v
	}).(ManagedZoneServiceDirectoryConfigResponsePtrOutput)
}

func (o ManagedZoneServiceDirectoryConfigResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedZoneServiceDirectoryConfigResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// Contains information about the namespace associated with the zone.
func (o ManagedZoneServiceDirectoryConfigResponseOutput) Namespace() ManagedZoneServiceDirectoryConfigNamespaceResponseOutput {
	return o.ApplyT(func(v ManagedZoneServiceDirectoryConfigResponse) ManagedZoneServiceDirectoryConfigNamespaceResponse {
		return v.Namespace
	}).(ManagedZoneServiceDirectoryConfigNamespaceResponseOutput)
}

type ManagedZoneServiceDirectoryConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedZoneServiceDirectoryConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZoneServiceDirectoryConfigResponse)(nil)).Elem()
}

func (o ManagedZoneServiceDirectoryConfigResponsePtrOutput) ToManagedZoneServiceDirectoryConfigResponsePtrOutput() ManagedZoneServiceDirectoryConfigResponsePtrOutput {
	return o
}

func (o ManagedZoneServiceDirectoryConfigResponsePtrOutput) ToManagedZoneServiceDirectoryConfigResponsePtrOutputWithContext(ctx context.Context) ManagedZoneServiceDirectoryConfigResponsePtrOutput {
	return o
}

func (o ManagedZoneServiceDirectoryConfigResponsePtrOutput) Elem() ManagedZoneServiceDirectoryConfigResponseOutput {
	return o.ApplyT(func(v *ManagedZoneServiceDirectoryConfigResponse) ManagedZoneServiceDirectoryConfigResponse {
		if v != nil {
			return *v
		}
		var ret ManagedZoneServiceDirectoryConfigResponse
		return ret
	}).(ManagedZoneServiceDirectoryConfigResponseOutput)
}

func (o ManagedZoneServiceDirectoryConfigResponsePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedZoneServiceDirectoryConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Kind
	}).(pulumi.StringPtrOutput)
}

// Contains information about the namespace associated with the zone.
func (o ManagedZoneServiceDirectoryConfigResponsePtrOutput) Namespace() ManagedZoneServiceDirectoryConfigNamespaceResponsePtrOutput {
	return o.ApplyT(func(v *ManagedZoneServiceDirectoryConfigResponse) *ManagedZoneServiceDirectoryConfigNamespaceResponse {
		if v == nil {
			return nil
		}
		return &v.Namespace
	}).(ManagedZoneServiceDirectoryConfigNamespaceResponsePtrOutput)
}

type PolicyAlternativeNameServerConfig struct {
	Kind *string `pulumi:"kind"`
	// Sets an alternative name server for the associated networks. When specified, all DNS queries are forwarded to a name server that you choose. Names such as .internal are not available when an alternative name server is specified.
	TargetNameServers []PolicyAlternativeNameServerConfigTargetNameServer `pulumi:"targetNameServers"`
}

// PolicyAlternativeNameServerConfigInput is an input type that accepts PolicyAlternativeNameServerConfigArgs and PolicyAlternativeNameServerConfigOutput values.
// You can construct a concrete instance of `PolicyAlternativeNameServerConfigInput` via:
//
//          PolicyAlternativeNameServerConfigArgs{...}
type PolicyAlternativeNameServerConfigInput interface {
	pulumi.Input

	ToPolicyAlternativeNameServerConfigOutput() PolicyAlternativeNameServerConfigOutput
	ToPolicyAlternativeNameServerConfigOutputWithContext(context.Context) PolicyAlternativeNameServerConfigOutput
}

type PolicyAlternativeNameServerConfigArgs struct {
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Sets an alternative name server for the associated networks. When specified, all DNS queries are forwarded to a name server that you choose. Names such as .internal are not available when an alternative name server is specified.
	TargetNameServers PolicyAlternativeNameServerConfigTargetNameServerArrayInput `pulumi:"targetNameServers"`
}

func (PolicyAlternativeNameServerConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyAlternativeNameServerConfig)(nil)).Elem()
}

func (i PolicyAlternativeNameServerConfigArgs) ToPolicyAlternativeNameServerConfigOutput() PolicyAlternativeNameServerConfigOutput {
	return i.ToPolicyAlternativeNameServerConfigOutputWithContext(context.Background())
}

func (i PolicyAlternativeNameServerConfigArgs) ToPolicyAlternativeNameServerConfigOutputWithContext(ctx context.Context) PolicyAlternativeNameServerConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyAlternativeNameServerConfigOutput)
}

func (i PolicyAlternativeNameServerConfigArgs) ToPolicyAlternativeNameServerConfigPtrOutput() PolicyAlternativeNameServerConfigPtrOutput {
	return i.ToPolicyAlternativeNameServerConfigPtrOutputWithContext(context.Background())
}

func (i PolicyAlternativeNameServerConfigArgs) ToPolicyAlternativeNameServerConfigPtrOutputWithContext(ctx context.Context) PolicyAlternativeNameServerConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyAlternativeNameServerConfigOutput).ToPolicyAlternativeNameServerConfigPtrOutputWithContext(ctx)
}

// PolicyAlternativeNameServerConfigPtrInput is an input type that accepts PolicyAlternativeNameServerConfigArgs, PolicyAlternativeNameServerConfigPtr and PolicyAlternativeNameServerConfigPtrOutput values.
// You can construct a concrete instance of `PolicyAlternativeNameServerConfigPtrInput` via:
//
//          PolicyAlternativeNameServerConfigArgs{...}
//
//  or:
//
//          nil
type PolicyAlternativeNameServerConfigPtrInput interface {
	pulumi.Input

	ToPolicyAlternativeNameServerConfigPtrOutput() PolicyAlternativeNameServerConfigPtrOutput
	ToPolicyAlternativeNameServerConfigPtrOutputWithContext(context.Context) PolicyAlternativeNameServerConfigPtrOutput
}

type policyAlternativeNameServerConfigPtrType PolicyAlternativeNameServerConfigArgs

func PolicyAlternativeNameServerConfigPtr(v *PolicyAlternativeNameServerConfigArgs) PolicyAlternativeNameServerConfigPtrInput {
	return (*policyAlternativeNameServerConfigPtrType)(v)
}

func (*policyAlternativeNameServerConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyAlternativeNameServerConfig)(nil)).Elem()
}

func (i *policyAlternativeNameServerConfigPtrType) ToPolicyAlternativeNameServerConfigPtrOutput() PolicyAlternativeNameServerConfigPtrOutput {
	return i.ToPolicyAlternativeNameServerConfigPtrOutputWithContext(context.Background())
}

func (i *policyAlternativeNameServerConfigPtrType) ToPolicyAlternativeNameServerConfigPtrOutputWithContext(ctx context.Context) PolicyAlternativeNameServerConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyAlternativeNameServerConfigPtrOutput)
}

type PolicyAlternativeNameServerConfigOutput struct{ *pulumi.OutputState }

func (PolicyAlternativeNameServerConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyAlternativeNameServerConfig)(nil)).Elem()
}

func (o PolicyAlternativeNameServerConfigOutput) ToPolicyAlternativeNameServerConfigOutput() PolicyAlternativeNameServerConfigOutput {
	return o
}

func (o PolicyAlternativeNameServerConfigOutput) ToPolicyAlternativeNameServerConfigOutputWithContext(ctx context.Context) PolicyAlternativeNameServerConfigOutput {
	return o
}

func (o PolicyAlternativeNameServerConfigOutput) ToPolicyAlternativeNameServerConfigPtrOutput() PolicyAlternativeNameServerConfigPtrOutput {
	return o.ToPolicyAlternativeNameServerConfigPtrOutputWithContext(context.Background())
}

func (o PolicyAlternativeNameServerConfigOutput) ToPolicyAlternativeNameServerConfigPtrOutputWithContext(ctx context.Context) PolicyAlternativeNameServerConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PolicyAlternativeNameServerConfig) *PolicyAlternativeNameServerConfig {
		return &v
	}).(PolicyAlternativeNameServerConfigPtrOutput)
}

func (o PolicyAlternativeNameServerConfigOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyAlternativeNameServerConfig) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Sets an alternative name server for the associated networks. When specified, all DNS queries are forwarded to a name server that you choose. Names such as .internal are not available when an alternative name server is specified.
func (o PolicyAlternativeNameServerConfigOutput) TargetNameServers() PolicyAlternativeNameServerConfigTargetNameServerArrayOutput {
	return o.ApplyT(func(v PolicyAlternativeNameServerConfig) []PolicyAlternativeNameServerConfigTargetNameServer {
		return v.TargetNameServers
	}).(PolicyAlternativeNameServerConfigTargetNameServerArrayOutput)
}

type PolicyAlternativeNameServerConfigPtrOutput struct{ *pulumi.OutputState }

func (PolicyAlternativeNameServerConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyAlternativeNameServerConfig)(nil)).Elem()
}

func (o PolicyAlternativeNameServerConfigPtrOutput) ToPolicyAlternativeNameServerConfigPtrOutput() PolicyAlternativeNameServerConfigPtrOutput {
	return o
}

func (o PolicyAlternativeNameServerConfigPtrOutput) ToPolicyAlternativeNameServerConfigPtrOutputWithContext(ctx context.Context) PolicyAlternativeNameServerConfigPtrOutput {
	return o
}

func (o PolicyAlternativeNameServerConfigPtrOutput) Elem() PolicyAlternativeNameServerConfigOutput {
	return o.ApplyT(func(v *PolicyAlternativeNameServerConfig) PolicyAlternativeNameServerConfig {
		if v != nil {
			return *v
		}
		var ret PolicyAlternativeNameServerConfig
		return ret
	}).(PolicyAlternativeNameServerConfigOutput)
}

func (o PolicyAlternativeNameServerConfigPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyAlternativeNameServerConfig) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Sets an alternative name server for the associated networks. When specified, all DNS queries are forwarded to a name server that you choose. Names such as .internal are not available when an alternative name server is specified.
func (o PolicyAlternativeNameServerConfigPtrOutput) TargetNameServers() PolicyAlternativeNameServerConfigTargetNameServerArrayOutput {
	return o.ApplyT(func(v *PolicyAlternativeNameServerConfig) []PolicyAlternativeNameServerConfigTargetNameServer {
		if v == nil {
			return nil
		}
		return v.TargetNameServers
	}).(PolicyAlternativeNameServerConfigTargetNameServerArrayOutput)
}

type PolicyAlternativeNameServerConfigResponse struct {
	Kind string `pulumi:"kind"`
	// Sets an alternative name server for the associated networks. When specified, all DNS queries are forwarded to a name server that you choose. Names such as .internal are not available when an alternative name server is specified.
	TargetNameServers []PolicyAlternativeNameServerConfigTargetNameServerResponse `pulumi:"targetNameServers"`
}

// PolicyAlternativeNameServerConfigResponseInput is an input type that accepts PolicyAlternativeNameServerConfigResponseArgs and PolicyAlternativeNameServerConfigResponseOutput values.
// You can construct a concrete instance of `PolicyAlternativeNameServerConfigResponseInput` via:
//
//          PolicyAlternativeNameServerConfigResponseArgs{...}
type PolicyAlternativeNameServerConfigResponseInput interface {
	pulumi.Input

	ToPolicyAlternativeNameServerConfigResponseOutput() PolicyAlternativeNameServerConfigResponseOutput
	ToPolicyAlternativeNameServerConfigResponseOutputWithContext(context.Context) PolicyAlternativeNameServerConfigResponseOutput
}

type PolicyAlternativeNameServerConfigResponseArgs struct {
	Kind pulumi.StringInput `pulumi:"kind"`
	// Sets an alternative name server for the associated networks. When specified, all DNS queries are forwarded to a name server that you choose. Names such as .internal are not available when an alternative name server is specified.
	TargetNameServers PolicyAlternativeNameServerConfigTargetNameServerResponseArrayInput `pulumi:"targetNameServers"`
}

func (PolicyAlternativeNameServerConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyAlternativeNameServerConfigResponse)(nil)).Elem()
}

func (i PolicyAlternativeNameServerConfigResponseArgs) ToPolicyAlternativeNameServerConfigResponseOutput() PolicyAlternativeNameServerConfigResponseOutput {
	return i.ToPolicyAlternativeNameServerConfigResponseOutputWithContext(context.Background())
}

func (i PolicyAlternativeNameServerConfigResponseArgs) ToPolicyAlternativeNameServerConfigResponseOutputWithContext(ctx context.Context) PolicyAlternativeNameServerConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyAlternativeNameServerConfigResponseOutput)
}

func (i PolicyAlternativeNameServerConfigResponseArgs) ToPolicyAlternativeNameServerConfigResponsePtrOutput() PolicyAlternativeNameServerConfigResponsePtrOutput {
	return i.ToPolicyAlternativeNameServerConfigResponsePtrOutputWithContext(context.Background())
}

func (i PolicyAlternativeNameServerConfigResponseArgs) ToPolicyAlternativeNameServerConfigResponsePtrOutputWithContext(ctx context.Context) PolicyAlternativeNameServerConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyAlternativeNameServerConfigResponseOutput).ToPolicyAlternativeNameServerConfigResponsePtrOutputWithContext(ctx)
}

// PolicyAlternativeNameServerConfigResponsePtrInput is an input type that accepts PolicyAlternativeNameServerConfigResponseArgs, PolicyAlternativeNameServerConfigResponsePtr and PolicyAlternativeNameServerConfigResponsePtrOutput values.
// You can construct a concrete instance of `PolicyAlternativeNameServerConfigResponsePtrInput` via:
//
//          PolicyAlternativeNameServerConfigResponseArgs{...}
//
//  or:
//
//          nil
type PolicyAlternativeNameServerConfigResponsePtrInput interface {
	pulumi.Input

	ToPolicyAlternativeNameServerConfigResponsePtrOutput() PolicyAlternativeNameServerConfigResponsePtrOutput
	ToPolicyAlternativeNameServerConfigResponsePtrOutputWithContext(context.Context) PolicyAlternativeNameServerConfigResponsePtrOutput
}

type policyAlternativeNameServerConfigResponsePtrType PolicyAlternativeNameServerConfigResponseArgs

func PolicyAlternativeNameServerConfigResponsePtr(v *PolicyAlternativeNameServerConfigResponseArgs) PolicyAlternativeNameServerConfigResponsePtrInput {
	return (*policyAlternativeNameServerConfigResponsePtrType)(v)
}

func (*policyAlternativeNameServerConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyAlternativeNameServerConfigResponse)(nil)).Elem()
}

func (i *policyAlternativeNameServerConfigResponsePtrType) ToPolicyAlternativeNameServerConfigResponsePtrOutput() PolicyAlternativeNameServerConfigResponsePtrOutput {
	return i.ToPolicyAlternativeNameServerConfigResponsePtrOutputWithContext(context.Background())
}

func (i *policyAlternativeNameServerConfigResponsePtrType) ToPolicyAlternativeNameServerConfigResponsePtrOutputWithContext(ctx context.Context) PolicyAlternativeNameServerConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyAlternativeNameServerConfigResponsePtrOutput)
}

type PolicyAlternativeNameServerConfigResponseOutput struct{ *pulumi.OutputState }

func (PolicyAlternativeNameServerConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyAlternativeNameServerConfigResponse)(nil)).Elem()
}

func (o PolicyAlternativeNameServerConfigResponseOutput) ToPolicyAlternativeNameServerConfigResponseOutput() PolicyAlternativeNameServerConfigResponseOutput {
	return o
}

func (o PolicyAlternativeNameServerConfigResponseOutput) ToPolicyAlternativeNameServerConfigResponseOutputWithContext(ctx context.Context) PolicyAlternativeNameServerConfigResponseOutput {
	return o
}

func (o PolicyAlternativeNameServerConfigResponseOutput) ToPolicyAlternativeNameServerConfigResponsePtrOutput() PolicyAlternativeNameServerConfigResponsePtrOutput {
	return o.ToPolicyAlternativeNameServerConfigResponsePtrOutputWithContext(context.Background())
}

func (o PolicyAlternativeNameServerConfigResponseOutput) ToPolicyAlternativeNameServerConfigResponsePtrOutputWithContext(ctx context.Context) PolicyAlternativeNameServerConfigResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PolicyAlternativeNameServerConfigResponse) *PolicyAlternativeNameServerConfigResponse {
		return &v
	}).(PolicyAlternativeNameServerConfigResponsePtrOutput)
}

func (o PolicyAlternativeNameServerConfigResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyAlternativeNameServerConfigResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// Sets an alternative name server for the associated networks. When specified, all DNS queries are forwarded to a name server that you choose. Names such as .internal are not available when an alternative name server is specified.
func (o PolicyAlternativeNameServerConfigResponseOutput) TargetNameServers() PolicyAlternativeNameServerConfigTargetNameServerResponseArrayOutput {
	return o.ApplyT(func(v PolicyAlternativeNameServerConfigResponse) []PolicyAlternativeNameServerConfigTargetNameServerResponse {
		return v.TargetNameServers
	}).(PolicyAlternativeNameServerConfigTargetNameServerResponseArrayOutput)
}

type PolicyAlternativeNameServerConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (PolicyAlternativeNameServerConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyAlternativeNameServerConfigResponse)(nil)).Elem()
}

func (o PolicyAlternativeNameServerConfigResponsePtrOutput) ToPolicyAlternativeNameServerConfigResponsePtrOutput() PolicyAlternativeNameServerConfigResponsePtrOutput {
	return o
}

func (o PolicyAlternativeNameServerConfigResponsePtrOutput) ToPolicyAlternativeNameServerConfigResponsePtrOutputWithContext(ctx context.Context) PolicyAlternativeNameServerConfigResponsePtrOutput {
	return o
}

func (o PolicyAlternativeNameServerConfigResponsePtrOutput) Elem() PolicyAlternativeNameServerConfigResponseOutput {
	return o.ApplyT(func(v *PolicyAlternativeNameServerConfigResponse) PolicyAlternativeNameServerConfigResponse {
		if v != nil {
			return *v
		}
		var ret PolicyAlternativeNameServerConfigResponse
		return ret
	}).(PolicyAlternativeNameServerConfigResponseOutput)
}

func (o PolicyAlternativeNameServerConfigResponsePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyAlternativeNameServerConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Kind
	}).(pulumi.StringPtrOutput)
}

// Sets an alternative name server for the associated networks. When specified, all DNS queries are forwarded to a name server that you choose. Names such as .internal are not available when an alternative name server is specified.
func (o PolicyAlternativeNameServerConfigResponsePtrOutput) TargetNameServers() PolicyAlternativeNameServerConfigTargetNameServerResponseArrayOutput {
	return o.ApplyT(func(v *PolicyAlternativeNameServerConfigResponse) []PolicyAlternativeNameServerConfigTargetNameServerResponse {
		if v == nil {
			return nil
		}
		return v.TargetNameServers
	}).(PolicyAlternativeNameServerConfigTargetNameServerResponseArrayOutput)
}

type PolicyAlternativeNameServerConfigTargetNameServer struct {
	// Forwarding path for this TargetNameServer. If unset or set to DEFAULT, Cloud DNS makes forwarding decisions based on address ranges; that is, RFC1918 addresses go to the VPC network, non-RFC1918 addresses go to the internet. When set to PRIVATE, Cloud DNS always sends queries through the VPC network for this target.
	ForwardingPath *PolicyAlternativeNameServerConfigTargetNameServerForwardingPath `pulumi:"forwardingPath"`
	// IPv4 address to forward to.
	Ipv4Address *string `pulumi:"ipv4Address"`
	// IPv6 address to forward to. Does not accept both fields (ipv4 & ipv6) being populated.
	Ipv6Address *string `pulumi:"ipv6Address"`
	Kind        *string `pulumi:"kind"`
}

// PolicyAlternativeNameServerConfigTargetNameServerInput is an input type that accepts PolicyAlternativeNameServerConfigTargetNameServerArgs and PolicyAlternativeNameServerConfigTargetNameServerOutput values.
// You can construct a concrete instance of `PolicyAlternativeNameServerConfigTargetNameServerInput` via:
//
//          PolicyAlternativeNameServerConfigTargetNameServerArgs{...}
type PolicyAlternativeNameServerConfigTargetNameServerInput interface {
	pulumi.Input

	ToPolicyAlternativeNameServerConfigTargetNameServerOutput() PolicyAlternativeNameServerConfigTargetNameServerOutput
	ToPolicyAlternativeNameServerConfigTargetNameServerOutputWithContext(context.Context) PolicyAlternativeNameServerConfigTargetNameServerOutput
}

type PolicyAlternativeNameServerConfigTargetNameServerArgs struct {
	// Forwarding path for this TargetNameServer. If unset or set to DEFAULT, Cloud DNS makes forwarding decisions based on address ranges; that is, RFC1918 addresses go to the VPC network, non-RFC1918 addresses go to the internet. When set to PRIVATE, Cloud DNS always sends queries through the VPC network for this target.
	ForwardingPath PolicyAlternativeNameServerConfigTargetNameServerForwardingPathPtrInput `pulumi:"forwardingPath"`
	// IPv4 address to forward to.
	Ipv4Address pulumi.StringPtrInput `pulumi:"ipv4Address"`
	// IPv6 address to forward to. Does not accept both fields (ipv4 & ipv6) being populated.
	Ipv6Address pulumi.StringPtrInput `pulumi:"ipv6Address"`
	Kind        pulumi.StringPtrInput `pulumi:"kind"`
}

func (PolicyAlternativeNameServerConfigTargetNameServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyAlternativeNameServerConfigTargetNameServer)(nil)).Elem()
}

func (i PolicyAlternativeNameServerConfigTargetNameServerArgs) ToPolicyAlternativeNameServerConfigTargetNameServerOutput() PolicyAlternativeNameServerConfigTargetNameServerOutput {
	return i.ToPolicyAlternativeNameServerConfigTargetNameServerOutputWithContext(context.Background())
}

func (i PolicyAlternativeNameServerConfigTargetNameServerArgs) ToPolicyAlternativeNameServerConfigTargetNameServerOutputWithContext(ctx context.Context) PolicyAlternativeNameServerConfigTargetNameServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyAlternativeNameServerConfigTargetNameServerOutput)
}

// PolicyAlternativeNameServerConfigTargetNameServerArrayInput is an input type that accepts PolicyAlternativeNameServerConfigTargetNameServerArray and PolicyAlternativeNameServerConfigTargetNameServerArrayOutput values.
// You can construct a concrete instance of `PolicyAlternativeNameServerConfigTargetNameServerArrayInput` via:
//
//          PolicyAlternativeNameServerConfigTargetNameServerArray{ PolicyAlternativeNameServerConfigTargetNameServerArgs{...} }
type PolicyAlternativeNameServerConfigTargetNameServerArrayInput interface {
	pulumi.Input

	ToPolicyAlternativeNameServerConfigTargetNameServerArrayOutput() PolicyAlternativeNameServerConfigTargetNameServerArrayOutput
	ToPolicyAlternativeNameServerConfigTargetNameServerArrayOutputWithContext(context.Context) PolicyAlternativeNameServerConfigTargetNameServerArrayOutput
}

type PolicyAlternativeNameServerConfigTargetNameServerArray []PolicyAlternativeNameServerConfigTargetNameServerInput

func (PolicyAlternativeNameServerConfigTargetNameServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyAlternativeNameServerConfigTargetNameServer)(nil)).Elem()
}

func (i PolicyAlternativeNameServerConfigTargetNameServerArray) ToPolicyAlternativeNameServerConfigTargetNameServerArrayOutput() PolicyAlternativeNameServerConfigTargetNameServerArrayOutput {
	return i.ToPolicyAlternativeNameServerConfigTargetNameServerArrayOutputWithContext(context.Background())
}

func (i PolicyAlternativeNameServerConfigTargetNameServerArray) ToPolicyAlternativeNameServerConfigTargetNameServerArrayOutputWithContext(ctx context.Context) PolicyAlternativeNameServerConfigTargetNameServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyAlternativeNameServerConfigTargetNameServerArrayOutput)
}

type PolicyAlternativeNameServerConfigTargetNameServerOutput struct{ *pulumi.OutputState }

func (PolicyAlternativeNameServerConfigTargetNameServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyAlternativeNameServerConfigTargetNameServer)(nil)).Elem()
}

func (o PolicyAlternativeNameServerConfigTargetNameServerOutput) ToPolicyAlternativeNameServerConfigTargetNameServerOutput() PolicyAlternativeNameServerConfigTargetNameServerOutput {
	return o
}

func (o PolicyAlternativeNameServerConfigTargetNameServerOutput) ToPolicyAlternativeNameServerConfigTargetNameServerOutputWithContext(ctx context.Context) PolicyAlternativeNameServerConfigTargetNameServerOutput {
	return o
}

// Forwarding path for this TargetNameServer. If unset or set to DEFAULT, Cloud DNS makes forwarding decisions based on address ranges; that is, RFC1918 addresses go to the VPC network, non-RFC1918 addresses go to the internet. When set to PRIVATE, Cloud DNS always sends queries through the VPC network for this target.
func (o PolicyAlternativeNameServerConfigTargetNameServerOutput) ForwardingPath() PolicyAlternativeNameServerConfigTargetNameServerForwardingPathPtrOutput {
	return o.ApplyT(func(v PolicyAlternativeNameServerConfigTargetNameServer) *PolicyAlternativeNameServerConfigTargetNameServerForwardingPath {
		return v.ForwardingPath
	}).(PolicyAlternativeNameServerConfigTargetNameServerForwardingPathPtrOutput)
}

// IPv4 address to forward to.
func (o PolicyAlternativeNameServerConfigTargetNameServerOutput) Ipv4Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyAlternativeNameServerConfigTargetNameServer) *string { return v.Ipv4Address }).(pulumi.StringPtrOutput)
}

// IPv6 address to forward to. Does not accept both fields (ipv4 & ipv6) being populated.
func (o PolicyAlternativeNameServerConfigTargetNameServerOutput) Ipv6Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyAlternativeNameServerConfigTargetNameServer) *string { return v.Ipv6Address }).(pulumi.StringPtrOutput)
}

func (o PolicyAlternativeNameServerConfigTargetNameServerOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyAlternativeNameServerConfigTargetNameServer) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

type PolicyAlternativeNameServerConfigTargetNameServerArrayOutput struct{ *pulumi.OutputState }

func (PolicyAlternativeNameServerConfigTargetNameServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyAlternativeNameServerConfigTargetNameServer)(nil)).Elem()
}

func (o PolicyAlternativeNameServerConfigTargetNameServerArrayOutput) ToPolicyAlternativeNameServerConfigTargetNameServerArrayOutput() PolicyAlternativeNameServerConfigTargetNameServerArrayOutput {
	return o
}

func (o PolicyAlternativeNameServerConfigTargetNameServerArrayOutput) ToPolicyAlternativeNameServerConfigTargetNameServerArrayOutputWithContext(ctx context.Context) PolicyAlternativeNameServerConfigTargetNameServerArrayOutput {
	return o
}

func (o PolicyAlternativeNameServerConfigTargetNameServerArrayOutput) Index(i pulumi.IntInput) PolicyAlternativeNameServerConfigTargetNameServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyAlternativeNameServerConfigTargetNameServer {
		return vs[0].([]PolicyAlternativeNameServerConfigTargetNameServer)[vs[1].(int)]
	}).(PolicyAlternativeNameServerConfigTargetNameServerOutput)
}

type PolicyAlternativeNameServerConfigTargetNameServerResponse struct {
	// Forwarding path for this TargetNameServer. If unset or set to DEFAULT, Cloud DNS makes forwarding decisions based on address ranges; that is, RFC1918 addresses go to the VPC network, non-RFC1918 addresses go to the internet. When set to PRIVATE, Cloud DNS always sends queries through the VPC network for this target.
	ForwardingPath string `pulumi:"forwardingPath"`
	// IPv4 address to forward to.
	Ipv4Address string `pulumi:"ipv4Address"`
	// IPv6 address to forward to. Does not accept both fields (ipv4 & ipv6) being populated.
	Ipv6Address string `pulumi:"ipv6Address"`
	Kind        string `pulumi:"kind"`
}

// PolicyAlternativeNameServerConfigTargetNameServerResponseInput is an input type that accepts PolicyAlternativeNameServerConfigTargetNameServerResponseArgs and PolicyAlternativeNameServerConfigTargetNameServerResponseOutput values.
// You can construct a concrete instance of `PolicyAlternativeNameServerConfigTargetNameServerResponseInput` via:
//
//          PolicyAlternativeNameServerConfigTargetNameServerResponseArgs{...}
type PolicyAlternativeNameServerConfigTargetNameServerResponseInput interface {
	pulumi.Input

	ToPolicyAlternativeNameServerConfigTargetNameServerResponseOutput() PolicyAlternativeNameServerConfigTargetNameServerResponseOutput
	ToPolicyAlternativeNameServerConfigTargetNameServerResponseOutputWithContext(context.Context) PolicyAlternativeNameServerConfigTargetNameServerResponseOutput
}

type PolicyAlternativeNameServerConfigTargetNameServerResponseArgs struct {
	// Forwarding path for this TargetNameServer. If unset or set to DEFAULT, Cloud DNS makes forwarding decisions based on address ranges; that is, RFC1918 addresses go to the VPC network, non-RFC1918 addresses go to the internet. When set to PRIVATE, Cloud DNS always sends queries through the VPC network for this target.
	ForwardingPath pulumi.StringInput `pulumi:"forwardingPath"`
	// IPv4 address to forward to.
	Ipv4Address pulumi.StringInput `pulumi:"ipv4Address"`
	// IPv6 address to forward to. Does not accept both fields (ipv4 & ipv6) being populated.
	Ipv6Address pulumi.StringInput `pulumi:"ipv6Address"`
	Kind        pulumi.StringInput `pulumi:"kind"`
}

func (PolicyAlternativeNameServerConfigTargetNameServerResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyAlternativeNameServerConfigTargetNameServerResponse)(nil)).Elem()
}

func (i PolicyAlternativeNameServerConfigTargetNameServerResponseArgs) ToPolicyAlternativeNameServerConfigTargetNameServerResponseOutput() PolicyAlternativeNameServerConfigTargetNameServerResponseOutput {
	return i.ToPolicyAlternativeNameServerConfigTargetNameServerResponseOutputWithContext(context.Background())
}

func (i PolicyAlternativeNameServerConfigTargetNameServerResponseArgs) ToPolicyAlternativeNameServerConfigTargetNameServerResponseOutputWithContext(ctx context.Context) PolicyAlternativeNameServerConfigTargetNameServerResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyAlternativeNameServerConfigTargetNameServerResponseOutput)
}

// PolicyAlternativeNameServerConfigTargetNameServerResponseArrayInput is an input type that accepts PolicyAlternativeNameServerConfigTargetNameServerResponseArray and PolicyAlternativeNameServerConfigTargetNameServerResponseArrayOutput values.
// You can construct a concrete instance of `PolicyAlternativeNameServerConfigTargetNameServerResponseArrayInput` via:
//
//          PolicyAlternativeNameServerConfigTargetNameServerResponseArray{ PolicyAlternativeNameServerConfigTargetNameServerResponseArgs{...} }
type PolicyAlternativeNameServerConfigTargetNameServerResponseArrayInput interface {
	pulumi.Input

	ToPolicyAlternativeNameServerConfigTargetNameServerResponseArrayOutput() PolicyAlternativeNameServerConfigTargetNameServerResponseArrayOutput
	ToPolicyAlternativeNameServerConfigTargetNameServerResponseArrayOutputWithContext(context.Context) PolicyAlternativeNameServerConfigTargetNameServerResponseArrayOutput
}

type PolicyAlternativeNameServerConfigTargetNameServerResponseArray []PolicyAlternativeNameServerConfigTargetNameServerResponseInput

func (PolicyAlternativeNameServerConfigTargetNameServerResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyAlternativeNameServerConfigTargetNameServerResponse)(nil)).Elem()
}

func (i PolicyAlternativeNameServerConfigTargetNameServerResponseArray) ToPolicyAlternativeNameServerConfigTargetNameServerResponseArrayOutput() PolicyAlternativeNameServerConfigTargetNameServerResponseArrayOutput {
	return i.ToPolicyAlternativeNameServerConfigTargetNameServerResponseArrayOutputWithContext(context.Background())
}

func (i PolicyAlternativeNameServerConfigTargetNameServerResponseArray) ToPolicyAlternativeNameServerConfigTargetNameServerResponseArrayOutputWithContext(ctx context.Context) PolicyAlternativeNameServerConfigTargetNameServerResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyAlternativeNameServerConfigTargetNameServerResponseArrayOutput)
}

type PolicyAlternativeNameServerConfigTargetNameServerResponseOutput struct{ *pulumi.OutputState }

func (PolicyAlternativeNameServerConfigTargetNameServerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyAlternativeNameServerConfigTargetNameServerResponse)(nil)).Elem()
}

func (o PolicyAlternativeNameServerConfigTargetNameServerResponseOutput) ToPolicyAlternativeNameServerConfigTargetNameServerResponseOutput() PolicyAlternativeNameServerConfigTargetNameServerResponseOutput {
	return o
}

func (o PolicyAlternativeNameServerConfigTargetNameServerResponseOutput) ToPolicyAlternativeNameServerConfigTargetNameServerResponseOutputWithContext(ctx context.Context) PolicyAlternativeNameServerConfigTargetNameServerResponseOutput {
	return o
}

// Forwarding path for this TargetNameServer. If unset or set to DEFAULT, Cloud DNS makes forwarding decisions based on address ranges; that is, RFC1918 addresses go to the VPC network, non-RFC1918 addresses go to the internet. When set to PRIVATE, Cloud DNS always sends queries through the VPC network for this target.
func (o PolicyAlternativeNameServerConfigTargetNameServerResponseOutput) ForwardingPath() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyAlternativeNameServerConfigTargetNameServerResponse) string { return v.ForwardingPath }).(pulumi.StringOutput)
}

// IPv4 address to forward to.
func (o PolicyAlternativeNameServerConfigTargetNameServerResponseOutput) Ipv4Address() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyAlternativeNameServerConfigTargetNameServerResponse) string { return v.Ipv4Address }).(pulumi.StringOutput)
}

// IPv6 address to forward to. Does not accept both fields (ipv4 & ipv6) being populated.
func (o PolicyAlternativeNameServerConfigTargetNameServerResponseOutput) Ipv6Address() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyAlternativeNameServerConfigTargetNameServerResponse) string { return v.Ipv6Address }).(pulumi.StringOutput)
}

func (o PolicyAlternativeNameServerConfigTargetNameServerResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyAlternativeNameServerConfigTargetNameServerResponse) string { return v.Kind }).(pulumi.StringOutput)
}

type PolicyAlternativeNameServerConfigTargetNameServerResponseArrayOutput struct{ *pulumi.OutputState }

func (PolicyAlternativeNameServerConfigTargetNameServerResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyAlternativeNameServerConfigTargetNameServerResponse)(nil)).Elem()
}

func (o PolicyAlternativeNameServerConfigTargetNameServerResponseArrayOutput) ToPolicyAlternativeNameServerConfigTargetNameServerResponseArrayOutput() PolicyAlternativeNameServerConfigTargetNameServerResponseArrayOutput {
	return o
}

func (o PolicyAlternativeNameServerConfigTargetNameServerResponseArrayOutput) ToPolicyAlternativeNameServerConfigTargetNameServerResponseArrayOutputWithContext(ctx context.Context) PolicyAlternativeNameServerConfigTargetNameServerResponseArrayOutput {
	return o
}

func (o PolicyAlternativeNameServerConfigTargetNameServerResponseArrayOutput) Index(i pulumi.IntInput) PolicyAlternativeNameServerConfigTargetNameServerResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyAlternativeNameServerConfigTargetNameServerResponse {
		return vs[0].([]PolicyAlternativeNameServerConfigTargetNameServerResponse)[vs[1].(int)]
	}).(PolicyAlternativeNameServerConfigTargetNameServerResponseOutput)
}

type PolicyNetwork struct {
	Kind *string `pulumi:"kind"`
	// The fully qualified URL of the VPC network to bind to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
	NetworkUrl *string `pulumi:"networkUrl"`
}

// PolicyNetworkInput is an input type that accepts PolicyNetworkArgs and PolicyNetworkOutput values.
// You can construct a concrete instance of `PolicyNetworkInput` via:
//
//          PolicyNetworkArgs{...}
type PolicyNetworkInput interface {
	pulumi.Input

	ToPolicyNetworkOutput() PolicyNetworkOutput
	ToPolicyNetworkOutputWithContext(context.Context) PolicyNetworkOutput
}

type PolicyNetworkArgs struct {
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// The fully qualified URL of the VPC network to bind to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
	NetworkUrl pulumi.StringPtrInput `pulumi:"networkUrl"`
}

func (PolicyNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyNetwork)(nil)).Elem()
}

func (i PolicyNetworkArgs) ToPolicyNetworkOutput() PolicyNetworkOutput {
	return i.ToPolicyNetworkOutputWithContext(context.Background())
}

func (i PolicyNetworkArgs) ToPolicyNetworkOutputWithContext(ctx context.Context) PolicyNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyNetworkOutput)
}

// PolicyNetworkArrayInput is an input type that accepts PolicyNetworkArray and PolicyNetworkArrayOutput values.
// You can construct a concrete instance of `PolicyNetworkArrayInput` via:
//
//          PolicyNetworkArray{ PolicyNetworkArgs{...} }
type PolicyNetworkArrayInput interface {
	pulumi.Input

	ToPolicyNetworkArrayOutput() PolicyNetworkArrayOutput
	ToPolicyNetworkArrayOutputWithContext(context.Context) PolicyNetworkArrayOutput
}

type PolicyNetworkArray []PolicyNetworkInput

func (PolicyNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyNetwork)(nil)).Elem()
}

func (i PolicyNetworkArray) ToPolicyNetworkArrayOutput() PolicyNetworkArrayOutput {
	return i.ToPolicyNetworkArrayOutputWithContext(context.Background())
}

func (i PolicyNetworkArray) ToPolicyNetworkArrayOutputWithContext(ctx context.Context) PolicyNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyNetworkArrayOutput)
}

type PolicyNetworkOutput struct{ *pulumi.OutputState }

func (PolicyNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyNetwork)(nil)).Elem()
}

func (o PolicyNetworkOutput) ToPolicyNetworkOutput() PolicyNetworkOutput {
	return o
}

func (o PolicyNetworkOutput) ToPolicyNetworkOutputWithContext(ctx context.Context) PolicyNetworkOutput {
	return o
}

func (o PolicyNetworkOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyNetwork) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// The fully qualified URL of the VPC network to bind to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
func (o PolicyNetworkOutput) NetworkUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyNetwork) *string { return v.NetworkUrl }).(pulumi.StringPtrOutput)
}

type PolicyNetworkArrayOutput struct{ *pulumi.OutputState }

func (PolicyNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyNetwork)(nil)).Elem()
}

func (o PolicyNetworkArrayOutput) ToPolicyNetworkArrayOutput() PolicyNetworkArrayOutput {
	return o
}

func (o PolicyNetworkArrayOutput) ToPolicyNetworkArrayOutputWithContext(ctx context.Context) PolicyNetworkArrayOutput {
	return o
}

func (o PolicyNetworkArrayOutput) Index(i pulumi.IntInput) PolicyNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyNetwork {
		return vs[0].([]PolicyNetwork)[vs[1].(int)]
	}).(PolicyNetworkOutput)
}

type PolicyNetworkResponse struct {
	Kind string `pulumi:"kind"`
	// The fully qualified URL of the VPC network to bind to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
	NetworkUrl string `pulumi:"networkUrl"`
}

// PolicyNetworkResponseInput is an input type that accepts PolicyNetworkResponseArgs and PolicyNetworkResponseOutput values.
// You can construct a concrete instance of `PolicyNetworkResponseInput` via:
//
//          PolicyNetworkResponseArgs{...}
type PolicyNetworkResponseInput interface {
	pulumi.Input

	ToPolicyNetworkResponseOutput() PolicyNetworkResponseOutput
	ToPolicyNetworkResponseOutputWithContext(context.Context) PolicyNetworkResponseOutput
}

type PolicyNetworkResponseArgs struct {
	Kind pulumi.StringInput `pulumi:"kind"`
	// The fully qualified URL of the VPC network to bind to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
	NetworkUrl pulumi.StringInput `pulumi:"networkUrl"`
}

func (PolicyNetworkResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyNetworkResponse)(nil)).Elem()
}

func (i PolicyNetworkResponseArgs) ToPolicyNetworkResponseOutput() PolicyNetworkResponseOutput {
	return i.ToPolicyNetworkResponseOutputWithContext(context.Background())
}

func (i PolicyNetworkResponseArgs) ToPolicyNetworkResponseOutputWithContext(ctx context.Context) PolicyNetworkResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyNetworkResponseOutput)
}

// PolicyNetworkResponseArrayInput is an input type that accepts PolicyNetworkResponseArray and PolicyNetworkResponseArrayOutput values.
// You can construct a concrete instance of `PolicyNetworkResponseArrayInput` via:
//
//          PolicyNetworkResponseArray{ PolicyNetworkResponseArgs{...} }
type PolicyNetworkResponseArrayInput interface {
	pulumi.Input

	ToPolicyNetworkResponseArrayOutput() PolicyNetworkResponseArrayOutput
	ToPolicyNetworkResponseArrayOutputWithContext(context.Context) PolicyNetworkResponseArrayOutput
}

type PolicyNetworkResponseArray []PolicyNetworkResponseInput

func (PolicyNetworkResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyNetworkResponse)(nil)).Elem()
}

func (i PolicyNetworkResponseArray) ToPolicyNetworkResponseArrayOutput() PolicyNetworkResponseArrayOutput {
	return i.ToPolicyNetworkResponseArrayOutputWithContext(context.Background())
}

func (i PolicyNetworkResponseArray) ToPolicyNetworkResponseArrayOutputWithContext(ctx context.Context) PolicyNetworkResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyNetworkResponseArrayOutput)
}

type PolicyNetworkResponseOutput struct{ *pulumi.OutputState }

func (PolicyNetworkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyNetworkResponse)(nil)).Elem()
}

func (o PolicyNetworkResponseOutput) ToPolicyNetworkResponseOutput() PolicyNetworkResponseOutput {
	return o
}

func (o PolicyNetworkResponseOutput) ToPolicyNetworkResponseOutputWithContext(ctx context.Context) PolicyNetworkResponseOutput {
	return o
}

func (o PolicyNetworkResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyNetworkResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// The fully qualified URL of the VPC network to bind to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
func (o PolicyNetworkResponseOutput) NetworkUrl() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyNetworkResponse) string { return v.NetworkUrl }).(pulumi.StringOutput)
}

type PolicyNetworkResponseArrayOutput struct{ *pulumi.OutputState }

func (PolicyNetworkResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyNetworkResponse)(nil)).Elem()
}

func (o PolicyNetworkResponseArrayOutput) ToPolicyNetworkResponseArrayOutput() PolicyNetworkResponseArrayOutput {
	return o
}

func (o PolicyNetworkResponseArrayOutput) ToPolicyNetworkResponseArrayOutputWithContext(ctx context.Context) PolicyNetworkResponseArrayOutput {
	return o
}

func (o PolicyNetworkResponseArrayOutput) Index(i pulumi.IntInput) PolicyNetworkResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyNetworkResponse {
		return vs[0].([]PolicyNetworkResponse)[vs[1].(int)]
	}).(PolicyNetworkResponseOutput)
}

// A RRSetRoutingPolicy represents ResourceRecordSet data that is returned dynamically with the response varying based on configured properties such as geolocation or by weighted random selection.
type RRSetRoutingPolicy struct {
	Geo       *RRSetRoutingPolicyGeoPolicy `pulumi:"geo"`
	GeoPolicy *RRSetRoutingPolicyGeoPolicy `pulumi:"geoPolicy"`
	Kind      *string                      `pulumi:"kind"`
	Wrr       *RRSetRoutingPolicyWrrPolicy `pulumi:"wrr"`
	WrrPolicy *RRSetRoutingPolicyWrrPolicy `pulumi:"wrrPolicy"`
}

// RRSetRoutingPolicyInput is an input type that accepts RRSetRoutingPolicyArgs and RRSetRoutingPolicyOutput values.
// You can construct a concrete instance of `RRSetRoutingPolicyInput` via:
//
//          RRSetRoutingPolicyArgs{...}
type RRSetRoutingPolicyInput interface {
	pulumi.Input

	ToRRSetRoutingPolicyOutput() RRSetRoutingPolicyOutput
	ToRRSetRoutingPolicyOutputWithContext(context.Context) RRSetRoutingPolicyOutput
}

// A RRSetRoutingPolicy represents ResourceRecordSet data that is returned dynamically with the response varying based on configured properties such as geolocation or by weighted random selection.
type RRSetRoutingPolicyArgs struct {
	Geo       RRSetRoutingPolicyGeoPolicyPtrInput `pulumi:"geo"`
	GeoPolicy RRSetRoutingPolicyGeoPolicyPtrInput `pulumi:"geoPolicy"`
	Kind      pulumi.StringPtrInput               `pulumi:"kind"`
	Wrr       RRSetRoutingPolicyWrrPolicyPtrInput `pulumi:"wrr"`
	WrrPolicy RRSetRoutingPolicyWrrPolicyPtrInput `pulumi:"wrrPolicy"`
}

func (RRSetRoutingPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RRSetRoutingPolicy)(nil)).Elem()
}

func (i RRSetRoutingPolicyArgs) ToRRSetRoutingPolicyOutput() RRSetRoutingPolicyOutput {
	return i.ToRRSetRoutingPolicyOutputWithContext(context.Background())
}

func (i RRSetRoutingPolicyArgs) ToRRSetRoutingPolicyOutputWithContext(ctx context.Context) RRSetRoutingPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RRSetRoutingPolicyOutput)
}

func (i RRSetRoutingPolicyArgs) ToRRSetRoutingPolicyPtrOutput() RRSetRoutingPolicyPtrOutput {
	return i.ToRRSetRoutingPolicyPtrOutputWithContext(context.Background())
}

func (i RRSetRoutingPolicyArgs) ToRRSetRoutingPolicyPtrOutputWithContext(ctx context.Context) RRSetRoutingPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RRSetRoutingPolicyOutput).ToRRSetRoutingPolicyPtrOutputWithContext(ctx)
}

// RRSetRoutingPolicyPtrInput is an input type that accepts RRSetRoutingPolicyArgs, RRSetRoutingPolicyPtr and RRSetRoutingPolicyPtrOutput values.
// You can construct a concrete instance of `RRSetRoutingPolicyPtrInput` via:
//
//          RRSetRoutingPolicyArgs{...}
//
//  or:
//
//          nil
type RRSetRoutingPolicyPtrInput interface {
	pulumi.Input

	ToRRSetRoutingPolicyPtrOutput() RRSetRoutingPolicyPtrOutput
	ToRRSetRoutingPolicyPtrOutputWithContext(context.Context) RRSetRoutingPolicyPtrOutput
}

type rrsetRoutingPolicyPtrType RRSetRoutingPolicyArgs

func RRSetRoutingPolicyPtr(v *RRSetRoutingPolicyArgs) RRSetRoutingPolicyPtrInput {
	return (*rrsetRoutingPolicyPtrType)(v)
}

func (*rrsetRoutingPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RRSetRoutingPolicy)(nil)).Elem()
}

func (i *rrsetRoutingPolicyPtrType) ToRRSetRoutingPolicyPtrOutput() RRSetRoutingPolicyPtrOutput {
	return i.ToRRSetRoutingPolicyPtrOutputWithContext(context.Background())
}

func (i *rrsetRoutingPolicyPtrType) ToRRSetRoutingPolicyPtrOutputWithContext(ctx context.Context) RRSetRoutingPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RRSetRoutingPolicyPtrOutput)
}

// A RRSetRoutingPolicy represents ResourceRecordSet data that is returned dynamically with the response varying based on configured properties such as geolocation or by weighted random selection.
type RRSetRoutingPolicyOutput struct{ *pulumi.OutputState }

func (RRSetRoutingPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RRSetRoutingPolicy)(nil)).Elem()
}

func (o RRSetRoutingPolicyOutput) ToRRSetRoutingPolicyOutput() RRSetRoutingPolicyOutput {
	return o
}

func (o RRSetRoutingPolicyOutput) ToRRSetRoutingPolicyOutputWithContext(ctx context.Context) RRSetRoutingPolicyOutput {
	return o
}

func (o RRSetRoutingPolicyOutput) ToRRSetRoutingPolicyPtrOutput() RRSetRoutingPolicyPtrOutput {
	return o.ToRRSetRoutingPolicyPtrOutputWithContext(context.Background())
}

func (o RRSetRoutingPolicyOutput) ToRRSetRoutingPolicyPtrOutputWithContext(ctx context.Context) RRSetRoutingPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RRSetRoutingPolicy) *RRSetRoutingPolicy {
		return &v
	}).(RRSetRoutingPolicyPtrOutput)
}

func (o RRSetRoutingPolicyOutput) Geo() RRSetRoutingPolicyGeoPolicyPtrOutput {
	return o.ApplyT(func(v RRSetRoutingPolicy) *RRSetRoutingPolicyGeoPolicy { return v.Geo }).(RRSetRoutingPolicyGeoPolicyPtrOutput)
}

func (o RRSetRoutingPolicyOutput) GeoPolicy() RRSetRoutingPolicyGeoPolicyPtrOutput {
	return o.ApplyT(func(v RRSetRoutingPolicy) *RRSetRoutingPolicyGeoPolicy { return v.GeoPolicy }).(RRSetRoutingPolicyGeoPolicyPtrOutput)
}

func (o RRSetRoutingPolicyOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RRSetRoutingPolicy) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o RRSetRoutingPolicyOutput) Wrr() RRSetRoutingPolicyWrrPolicyPtrOutput {
	return o.ApplyT(func(v RRSetRoutingPolicy) *RRSetRoutingPolicyWrrPolicy { return v.Wrr }).(RRSetRoutingPolicyWrrPolicyPtrOutput)
}

func (o RRSetRoutingPolicyOutput) WrrPolicy() RRSetRoutingPolicyWrrPolicyPtrOutput {
	return o.ApplyT(func(v RRSetRoutingPolicy) *RRSetRoutingPolicyWrrPolicy { return v.WrrPolicy }).(RRSetRoutingPolicyWrrPolicyPtrOutput)
}

type RRSetRoutingPolicyPtrOutput struct{ *pulumi.OutputState }

func (RRSetRoutingPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RRSetRoutingPolicy)(nil)).Elem()
}

func (o RRSetRoutingPolicyPtrOutput) ToRRSetRoutingPolicyPtrOutput() RRSetRoutingPolicyPtrOutput {
	return o
}

func (o RRSetRoutingPolicyPtrOutput) ToRRSetRoutingPolicyPtrOutputWithContext(ctx context.Context) RRSetRoutingPolicyPtrOutput {
	return o
}

func (o RRSetRoutingPolicyPtrOutput) Elem() RRSetRoutingPolicyOutput {
	return o.ApplyT(func(v *RRSetRoutingPolicy) RRSetRoutingPolicy {
		if v != nil {
			return *v
		}
		var ret RRSetRoutingPolicy
		return ret
	}).(RRSetRoutingPolicyOutput)
}

func (o RRSetRoutingPolicyPtrOutput) Geo() RRSetRoutingPolicyGeoPolicyPtrOutput {
	return o.ApplyT(func(v *RRSetRoutingPolicy) *RRSetRoutingPolicyGeoPolicy {
		if v == nil {
			return nil
		}
		return v.Geo
	}).(RRSetRoutingPolicyGeoPolicyPtrOutput)
}

func (o RRSetRoutingPolicyPtrOutput) GeoPolicy() RRSetRoutingPolicyGeoPolicyPtrOutput {
	return o.ApplyT(func(v *RRSetRoutingPolicy) *RRSetRoutingPolicyGeoPolicy {
		if v == nil {
			return nil
		}
		return v.GeoPolicy
	}).(RRSetRoutingPolicyGeoPolicyPtrOutput)
}

func (o RRSetRoutingPolicyPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RRSetRoutingPolicy) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

func (o RRSetRoutingPolicyPtrOutput) Wrr() RRSetRoutingPolicyWrrPolicyPtrOutput {
	return o.ApplyT(func(v *RRSetRoutingPolicy) *RRSetRoutingPolicyWrrPolicy {
		if v == nil {
			return nil
		}
		return v.Wrr
	}).(RRSetRoutingPolicyWrrPolicyPtrOutput)
}

func (o RRSetRoutingPolicyPtrOutput) WrrPolicy() RRSetRoutingPolicyWrrPolicyPtrOutput {
	return o.ApplyT(func(v *RRSetRoutingPolicy) *RRSetRoutingPolicyWrrPolicy {
		if v == nil {
			return nil
		}
		return v.WrrPolicy
	}).(RRSetRoutingPolicyWrrPolicyPtrOutput)
}

type RRSetRoutingPolicyGeoPolicy struct {
	// The primary geo routing configuration. If there are multiple items with the same location, an error is returned instead.
	Items []RRSetRoutingPolicyGeoPolicyGeoPolicyItem `pulumi:"items"`
	Kind  *string                                    `pulumi:"kind"`
}

// RRSetRoutingPolicyGeoPolicyInput is an input type that accepts RRSetRoutingPolicyGeoPolicyArgs and RRSetRoutingPolicyGeoPolicyOutput values.
// You can construct a concrete instance of `RRSetRoutingPolicyGeoPolicyInput` via:
//
//          RRSetRoutingPolicyGeoPolicyArgs{...}
type RRSetRoutingPolicyGeoPolicyInput interface {
	pulumi.Input

	ToRRSetRoutingPolicyGeoPolicyOutput() RRSetRoutingPolicyGeoPolicyOutput
	ToRRSetRoutingPolicyGeoPolicyOutputWithContext(context.Context) RRSetRoutingPolicyGeoPolicyOutput
}

type RRSetRoutingPolicyGeoPolicyArgs struct {
	// The primary geo routing configuration. If there are multiple items with the same location, an error is returned instead.
	Items RRSetRoutingPolicyGeoPolicyGeoPolicyItemArrayInput `pulumi:"items"`
	Kind  pulumi.StringPtrInput                              `pulumi:"kind"`
}

func (RRSetRoutingPolicyGeoPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RRSetRoutingPolicyGeoPolicy)(nil)).Elem()
}

func (i RRSetRoutingPolicyGeoPolicyArgs) ToRRSetRoutingPolicyGeoPolicyOutput() RRSetRoutingPolicyGeoPolicyOutput {
	return i.ToRRSetRoutingPolicyGeoPolicyOutputWithContext(context.Background())
}

func (i RRSetRoutingPolicyGeoPolicyArgs) ToRRSetRoutingPolicyGeoPolicyOutputWithContext(ctx context.Context) RRSetRoutingPolicyGeoPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RRSetRoutingPolicyGeoPolicyOutput)
}

func (i RRSetRoutingPolicyGeoPolicyArgs) ToRRSetRoutingPolicyGeoPolicyPtrOutput() RRSetRoutingPolicyGeoPolicyPtrOutput {
	return i.ToRRSetRoutingPolicyGeoPolicyPtrOutputWithContext(context.Background())
}

func (i RRSetRoutingPolicyGeoPolicyArgs) ToRRSetRoutingPolicyGeoPolicyPtrOutputWithContext(ctx context.Context) RRSetRoutingPolicyGeoPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RRSetRoutingPolicyGeoPolicyOutput).ToRRSetRoutingPolicyGeoPolicyPtrOutputWithContext(ctx)
}

// RRSetRoutingPolicyGeoPolicyPtrInput is an input type that accepts RRSetRoutingPolicyGeoPolicyArgs, RRSetRoutingPolicyGeoPolicyPtr and RRSetRoutingPolicyGeoPolicyPtrOutput values.
// You can construct a concrete instance of `RRSetRoutingPolicyGeoPolicyPtrInput` via:
//
//          RRSetRoutingPolicyGeoPolicyArgs{...}
//
//  or:
//
//          nil
type RRSetRoutingPolicyGeoPolicyPtrInput interface {
	pulumi.Input

	ToRRSetRoutingPolicyGeoPolicyPtrOutput() RRSetRoutingPolicyGeoPolicyPtrOutput
	ToRRSetRoutingPolicyGeoPolicyPtrOutputWithContext(context.Context) RRSetRoutingPolicyGeoPolicyPtrOutput
}

type rrsetRoutingPolicyGeoPolicyPtrType RRSetRoutingPolicyGeoPolicyArgs

func RRSetRoutingPolicyGeoPolicyPtr(v *RRSetRoutingPolicyGeoPolicyArgs) RRSetRoutingPolicyGeoPolicyPtrInput {
	return (*rrsetRoutingPolicyGeoPolicyPtrType)(v)
}

func (*rrsetRoutingPolicyGeoPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RRSetRoutingPolicyGeoPolicy)(nil)).Elem()
}

func (i *rrsetRoutingPolicyGeoPolicyPtrType) ToRRSetRoutingPolicyGeoPolicyPtrOutput() RRSetRoutingPolicyGeoPolicyPtrOutput {
	return i.ToRRSetRoutingPolicyGeoPolicyPtrOutputWithContext(context.Background())
}

func (i *rrsetRoutingPolicyGeoPolicyPtrType) ToRRSetRoutingPolicyGeoPolicyPtrOutputWithContext(ctx context.Context) RRSetRoutingPolicyGeoPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RRSetRoutingPolicyGeoPolicyPtrOutput)
}

type RRSetRoutingPolicyGeoPolicyOutput struct{ *pulumi.OutputState }

func (RRSetRoutingPolicyGeoPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RRSetRoutingPolicyGeoPolicy)(nil)).Elem()
}

func (o RRSetRoutingPolicyGeoPolicyOutput) ToRRSetRoutingPolicyGeoPolicyOutput() RRSetRoutingPolicyGeoPolicyOutput {
	return o
}

func (o RRSetRoutingPolicyGeoPolicyOutput) ToRRSetRoutingPolicyGeoPolicyOutputWithContext(ctx context.Context) RRSetRoutingPolicyGeoPolicyOutput {
	return o
}

func (o RRSetRoutingPolicyGeoPolicyOutput) ToRRSetRoutingPolicyGeoPolicyPtrOutput() RRSetRoutingPolicyGeoPolicyPtrOutput {
	return o.ToRRSetRoutingPolicyGeoPolicyPtrOutputWithContext(context.Background())
}

func (o RRSetRoutingPolicyGeoPolicyOutput) ToRRSetRoutingPolicyGeoPolicyPtrOutputWithContext(ctx context.Context) RRSetRoutingPolicyGeoPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RRSetRoutingPolicyGeoPolicy) *RRSetRoutingPolicyGeoPolicy {
		return &v
	}).(RRSetRoutingPolicyGeoPolicyPtrOutput)
}

// The primary geo routing configuration. If there are multiple items with the same location, an error is returned instead.
func (o RRSetRoutingPolicyGeoPolicyOutput) Items() RRSetRoutingPolicyGeoPolicyGeoPolicyItemArrayOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyGeoPolicy) []RRSetRoutingPolicyGeoPolicyGeoPolicyItem { return v.Items }).(RRSetRoutingPolicyGeoPolicyGeoPolicyItemArrayOutput)
}

func (o RRSetRoutingPolicyGeoPolicyOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyGeoPolicy) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

type RRSetRoutingPolicyGeoPolicyPtrOutput struct{ *pulumi.OutputState }

func (RRSetRoutingPolicyGeoPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RRSetRoutingPolicyGeoPolicy)(nil)).Elem()
}

func (o RRSetRoutingPolicyGeoPolicyPtrOutput) ToRRSetRoutingPolicyGeoPolicyPtrOutput() RRSetRoutingPolicyGeoPolicyPtrOutput {
	return o
}

func (o RRSetRoutingPolicyGeoPolicyPtrOutput) ToRRSetRoutingPolicyGeoPolicyPtrOutputWithContext(ctx context.Context) RRSetRoutingPolicyGeoPolicyPtrOutput {
	return o
}

func (o RRSetRoutingPolicyGeoPolicyPtrOutput) Elem() RRSetRoutingPolicyGeoPolicyOutput {
	return o.ApplyT(func(v *RRSetRoutingPolicyGeoPolicy) RRSetRoutingPolicyGeoPolicy {
		if v != nil {
			return *v
		}
		var ret RRSetRoutingPolicyGeoPolicy
		return ret
	}).(RRSetRoutingPolicyGeoPolicyOutput)
}

// The primary geo routing configuration. If there are multiple items with the same location, an error is returned instead.
func (o RRSetRoutingPolicyGeoPolicyPtrOutput) Items() RRSetRoutingPolicyGeoPolicyGeoPolicyItemArrayOutput {
	return o.ApplyT(func(v *RRSetRoutingPolicyGeoPolicy) []RRSetRoutingPolicyGeoPolicyGeoPolicyItem {
		if v == nil {
			return nil
		}
		return v.Items
	}).(RRSetRoutingPolicyGeoPolicyGeoPolicyItemArrayOutput)
}

func (o RRSetRoutingPolicyGeoPolicyPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RRSetRoutingPolicyGeoPolicy) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

type RRSetRoutingPolicyGeoPolicyGeoPolicyItem struct {
	Kind *string `pulumi:"kind"`
	// The geo-location granularity is a GCP region. This location string should correspond to a GCP region. e.g. "us-east1", "southamerica-east1", "asia-east1", etc.
	Location *string  `pulumi:"location"`
	Rrdatas  []string `pulumi:"rrdatas"`
	// DNSSEC generated signatures for the above geo_rrdata.
	SignatureRrdatas []string `pulumi:"signatureRrdatas"`
}

// RRSetRoutingPolicyGeoPolicyGeoPolicyItemInput is an input type that accepts RRSetRoutingPolicyGeoPolicyGeoPolicyItemArgs and RRSetRoutingPolicyGeoPolicyGeoPolicyItemOutput values.
// You can construct a concrete instance of `RRSetRoutingPolicyGeoPolicyGeoPolicyItemInput` via:
//
//          RRSetRoutingPolicyGeoPolicyGeoPolicyItemArgs{...}
type RRSetRoutingPolicyGeoPolicyGeoPolicyItemInput interface {
	pulumi.Input

	ToRRSetRoutingPolicyGeoPolicyGeoPolicyItemOutput() RRSetRoutingPolicyGeoPolicyGeoPolicyItemOutput
	ToRRSetRoutingPolicyGeoPolicyGeoPolicyItemOutputWithContext(context.Context) RRSetRoutingPolicyGeoPolicyGeoPolicyItemOutput
}

type RRSetRoutingPolicyGeoPolicyGeoPolicyItemArgs struct {
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// The geo-location granularity is a GCP region. This location string should correspond to a GCP region. e.g. "us-east1", "southamerica-east1", "asia-east1", etc.
	Location pulumi.StringPtrInput   `pulumi:"location"`
	Rrdatas  pulumi.StringArrayInput `pulumi:"rrdatas"`
	// DNSSEC generated signatures for the above geo_rrdata.
	SignatureRrdatas pulumi.StringArrayInput `pulumi:"signatureRrdatas"`
}

func (RRSetRoutingPolicyGeoPolicyGeoPolicyItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RRSetRoutingPolicyGeoPolicyGeoPolicyItem)(nil)).Elem()
}

func (i RRSetRoutingPolicyGeoPolicyGeoPolicyItemArgs) ToRRSetRoutingPolicyGeoPolicyGeoPolicyItemOutput() RRSetRoutingPolicyGeoPolicyGeoPolicyItemOutput {
	return i.ToRRSetRoutingPolicyGeoPolicyGeoPolicyItemOutputWithContext(context.Background())
}

func (i RRSetRoutingPolicyGeoPolicyGeoPolicyItemArgs) ToRRSetRoutingPolicyGeoPolicyGeoPolicyItemOutputWithContext(ctx context.Context) RRSetRoutingPolicyGeoPolicyGeoPolicyItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RRSetRoutingPolicyGeoPolicyGeoPolicyItemOutput)
}

// RRSetRoutingPolicyGeoPolicyGeoPolicyItemArrayInput is an input type that accepts RRSetRoutingPolicyGeoPolicyGeoPolicyItemArray and RRSetRoutingPolicyGeoPolicyGeoPolicyItemArrayOutput values.
// You can construct a concrete instance of `RRSetRoutingPolicyGeoPolicyGeoPolicyItemArrayInput` via:
//
//          RRSetRoutingPolicyGeoPolicyGeoPolicyItemArray{ RRSetRoutingPolicyGeoPolicyGeoPolicyItemArgs{...} }
type RRSetRoutingPolicyGeoPolicyGeoPolicyItemArrayInput interface {
	pulumi.Input

	ToRRSetRoutingPolicyGeoPolicyGeoPolicyItemArrayOutput() RRSetRoutingPolicyGeoPolicyGeoPolicyItemArrayOutput
	ToRRSetRoutingPolicyGeoPolicyGeoPolicyItemArrayOutputWithContext(context.Context) RRSetRoutingPolicyGeoPolicyGeoPolicyItemArrayOutput
}

type RRSetRoutingPolicyGeoPolicyGeoPolicyItemArray []RRSetRoutingPolicyGeoPolicyGeoPolicyItemInput

func (RRSetRoutingPolicyGeoPolicyGeoPolicyItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RRSetRoutingPolicyGeoPolicyGeoPolicyItem)(nil)).Elem()
}

func (i RRSetRoutingPolicyGeoPolicyGeoPolicyItemArray) ToRRSetRoutingPolicyGeoPolicyGeoPolicyItemArrayOutput() RRSetRoutingPolicyGeoPolicyGeoPolicyItemArrayOutput {
	return i.ToRRSetRoutingPolicyGeoPolicyGeoPolicyItemArrayOutputWithContext(context.Background())
}

func (i RRSetRoutingPolicyGeoPolicyGeoPolicyItemArray) ToRRSetRoutingPolicyGeoPolicyGeoPolicyItemArrayOutputWithContext(ctx context.Context) RRSetRoutingPolicyGeoPolicyGeoPolicyItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RRSetRoutingPolicyGeoPolicyGeoPolicyItemArrayOutput)
}

type RRSetRoutingPolicyGeoPolicyGeoPolicyItemOutput struct{ *pulumi.OutputState }

func (RRSetRoutingPolicyGeoPolicyGeoPolicyItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RRSetRoutingPolicyGeoPolicyGeoPolicyItem)(nil)).Elem()
}

func (o RRSetRoutingPolicyGeoPolicyGeoPolicyItemOutput) ToRRSetRoutingPolicyGeoPolicyGeoPolicyItemOutput() RRSetRoutingPolicyGeoPolicyGeoPolicyItemOutput {
	return o
}

func (o RRSetRoutingPolicyGeoPolicyGeoPolicyItemOutput) ToRRSetRoutingPolicyGeoPolicyGeoPolicyItemOutputWithContext(ctx context.Context) RRSetRoutingPolicyGeoPolicyGeoPolicyItemOutput {
	return o
}

func (o RRSetRoutingPolicyGeoPolicyGeoPolicyItemOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyGeoPolicyGeoPolicyItem) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// The geo-location granularity is a GCP region. This location string should correspond to a GCP region. e.g. "us-east1", "southamerica-east1", "asia-east1", etc.
func (o RRSetRoutingPolicyGeoPolicyGeoPolicyItemOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyGeoPolicyGeoPolicyItem) *string { return v.Location }).(pulumi.StringPtrOutput)
}

func (o RRSetRoutingPolicyGeoPolicyGeoPolicyItemOutput) Rrdatas() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyGeoPolicyGeoPolicyItem) []string { return v.Rrdatas }).(pulumi.StringArrayOutput)
}

// DNSSEC generated signatures for the above geo_rrdata.
func (o RRSetRoutingPolicyGeoPolicyGeoPolicyItemOutput) SignatureRrdatas() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyGeoPolicyGeoPolicyItem) []string { return v.SignatureRrdatas }).(pulumi.StringArrayOutput)
}

type RRSetRoutingPolicyGeoPolicyGeoPolicyItemArrayOutput struct{ *pulumi.OutputState }

func (RRSetRoutingPolicyGeoPolicyGeoPolicyItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RRSetRoutingPolicyGeoPolicyGeoPolicyItem)(nil)).Elem()
}

func (o RRSetRoutingPolicyGeoPolicyGeoPolicyItemArrayOutput) ToRRSetRoutingPolicyGeoPolicyGeoPolicyItemArrayOutput() RRSetRoutingPolicyGeoPolicyGeoPolicyItemArrayOutput {
	return o
}

func (o RRSetRoutingPolicyGeoPolicyGeoPolicyItemArrayOutput) ToRRSetRoutingPolicyGeoPolicyGeoPolicyItemArrayOutputWithContext(ctx context.Context) RRSetRoutingPolicyGeoPolicyGeoPolicyItemArrayOutput {
	return o
}

func (o RRSetRoutingPolicyGeoPolicyGeoPolicyItemArrayOutput) Index(i pulumi.IntInput) RRSetRoutingPolicyGeoPolicyGeoPolicyItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RRSetRoutingPolicyGeoPolicyGeoPolicyItem {
		return vs[0].([]RRSetRoutingPolicyGeoPolicyGeoPolicyItem)[vs[1].(int)]
	}).(RRSetRoutingPolicyGeoPolicyGeoPolicyItemOutput)
}

type RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponse struct {
	Kind string `pulumi:"kind"`
	// The geo-location granularity is a GCP region. This location string should correspond to a GCP region. e.g. "us-east1", "southamerica-east1", "asia-east1", etc.
	Location string   `pulumi:"location"`
	Rrdatas  []string `pulumi:"rrdatas"`
	// DNSSEC generated signatures for the above geo_rrdata.
	SignatureRrdatas []string `pulumi:"signatureRrdatas"`
}

// RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseInput is an input type that accepts RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseArgs and RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseOutput values.
// You can construct a concrete instance of `RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseInput` via:
//
//          RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseArgs{...}
type RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseInput interface {
	pulumi.Input

	ToRRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseOutput() RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseOutput
	ToRRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseOutputWithContext(context.Context) RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseOutput
}

type RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseArgs struct {
	Kind pulumi.StringInput `pulumi:"kind"`
	// The geo-location granularity is a GCP region. This location string should correspond to a GCP region. e.g. "us-east1", "southamerica-east1", "asia-east1", etc.
	Location pulumi.StringInput      `pulumi:"location"`
	Rrdatas  pulumi.StringArrayInput `pulumi:"rrdatas"`
	// DNSSEC generated signatures for the above geo_rrdata.
	SignatureRrdatas pulumi.StringArrayInput `pulumi:"signatureRrdatas"`
}

func (RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponse)(nil)).Elem()
}

func (i RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseArgs) ToRRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseOutput() RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseOutput {
	return i.ToRRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseOutputWithContext(context.Background())
}

func (i RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseArgs) ToRRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseOutputWithContext(ctx context.Context) RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseOutput)
}

// RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseArrayInput is an input type that accepts RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseArray and RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseArrayOutput values.
// You can construct a concrete instance of `RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseArrayInput` via:
//
//          RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseArray{ RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseArgs{...} }
type RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseArrayInput interface {
	pulumi.Input

	ToRRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseArrayOutput() RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseArrayOutput
	ToRRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseArrayOutputWithContext(context.Context) RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseArrayOutput
}

type RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseArray []RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseInput

func (RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponse)(nil)).Elem()
}

func (i RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseArray) ToRRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseArrayOutput() RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseArrayOutput {
	return i.ToRRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseArrayOutputWithContext(context.Background())
}

func (i RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseArray) ToRRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseArrayOutputWithContext(ctx context.Context) RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseArrayOutput)
}

type RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseOutput struct{ *pulumi.OutputState }

func (RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponse)(nil)).Elem()
}

func (o RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseOutput) ToRRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseOutput() RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseOutput {
	return o
}

func (o RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseOutput) ToRRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseOutputWithContext(ctx context.Context) RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseOutput {
	return o
}

func (o RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// The geo-location granularity is a GCP region. This location string should correspond to a GCP region. e.g. "us-east1", "southamerica-east1", "asia-east1", etc.
func (o RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponse) string { return v.Location }).(pulumi.StringOutput)
}

func (o RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseOutput) Rrdatas() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponse) []string { return v.Rrdatas }).(pulumi.StringArrayOutput)
}

// DNSSEC generated signatures for the above geo_rrdata.
func (o RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseOutput) SignatureRrdatas() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponse) []string { return v.SignatureRrdatas }).(pulumi.StringArrayOutput)
}

type RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseArrayOutput struct{ *pulumi.OutputState }

func (RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponse)(nil)).Elem()
}

func (o RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseArrayOutput) ToRRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseArrayOutput() RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseArrayOutput {
	return o
}

func (o RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseArrayOutput) ToRRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseArrayOutputWithContext(ctx context.Context) RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseArrayOutput {
	return o
}

func (o RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseArrayOutput) Index(i pulumi.IntInput) RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponse {
		return vs[0].([]RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponse)[vs[1].(int)]
	}).(RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseOutput)
}

type RRSetRoutingPolicyGeoPolicyResponse struct {
	// The primary geo routing configuration. If there are multiple items with the same location, an error is returned instead.
	Items []RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponse `pulumi:"items"`
	Kind  string                                             `pulumi:"kind"`
}

// RRSetRoutingPolicyGeoPolicyResponseInput is an input type that accepts RRSetRoutingPolicyGeoPolicyResponseArgs and RRSetRoutingPolicyGeoPolicyResponseOutput values.
// You can construct a concrete instance of `RRSetRoutingPolicyGeoPolicyResponseInput` via:
//
//          RRSetRoutingPolicyGeoPolicyResponseArgs{...}
type RRSetRoutingPolicyGeoPolicyResponseInput interface {
	pulumi.Input

	ToRRSetRoutingPolicyGeoPolicyResponseOutput() RRSetRoutingPolicyGeoPolicyResponseOutput
	ToRRSetRoutingPolicyGeoPolicyResponseOutputWithContext(context.Context) RRSetRoutingPolicyGeoPolicyResponseOutput
}

type RRSetRoutingPolicyGeoPolicyResponseArgs struct {
	// The primary geo routing configuration. If there are multiple items with the same location, an error is returned instead.
	Items RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseArrayInput `pulumi:"items"`
	Kind  pulumi.StringInput                                         `pulumi:"kind"`
}

func (RRSetRoutingPolicyGeoPolicyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RRSetRoutingPolicyGeoPolicyResponse)(nil)).Elem()
}

func (i RRSetRoutingPolicyGeoPolicyResponseArgs) ToRRSetRoutingPolicyGeoPolicyResponseOutput() RRSetRoutingPolicyGeoPolicyResponseOutput {
	return i.ToRRSetRoutingPolicyGeoPolicyResponseOutputWithContext(context.Background())
}

func (i RRSetRoutingPolicyGeoPolicyResponseArgs) ToRRSetRoutingPolicyGeoPolicyResponseOutputWithContext(ctx context.Context) RRSetRoutingPolicyGeoPolicyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RRSetRoutingPolicyGeoPolicyResponseOutput)
}

func (i RRSetRoutingPolicyGeoPolicyResponseArgs) ToRRSetRoutingPolicyGeoPolicyResponsePtrOutput() RRSetRoutingPolicyGeoPolicyResponsePtrOutput {
	return i.ToRRSetRoutingPolicyGeoPolicyResponsePtrOutputWithContext(context.Background())
}

func (i RRSetRoutingPolicyGeoPolicyResponseArgs) ToRRSetRoutingPolicyGeoPolicyResponsePtrOutputWithContext(ctx context.Context) RRSetRoutingPolicyGeoPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RRSetRoutingPolicyGeoPolicyResponseOutput).ToRRSetRoutingPolicyGeoPolicyResponsePtrOutputWithContext(ctx)
}

// RRSetRoutingPolicyGeoPolicyResponsePtrInput is an input type that accepts RRSetRoutingPolicyGeoPolicyResponseArgs, RRSetRoutingPolicyGeoPolicyResponsePtr and RRSetRoutingPolicyGeoPolicyResponsePtrOutput values.
// You can construct a concrete instance of `RRSetRoutingPolicyGeoPolicyResponsePtrInput` via:
//
//          RRSetRoutingPolicyGeoPolicyResponseArgs{...}
//
//  or:
//
//          nil
type RRSetRoutingPolicyGeoPolicyResponsePtrInput interface {
	pulumi.Input

	ToRRSetRoutingPolicyGeoPolicyResponsePtrOutput() RRSetRoutingPolicyGeoPolicyResponsePtrOutput
	ToRRSetRoutingPolicyGeoPolicyResponsePtrOutputWithContext(context.Context) RRSetRoutingPolicyGeoPolicyResponsePtrOutput
}

type rrsetRoutingPolicyGeoPolicyResponsePtrType RRSetRoutingPolicyGeoPolicyResponseArgs

func RRSetRoutingPolicyGeoPolicyResponsePtr(v *RRSetRoutingPolicyGeoPolicyResponseArgs) RRSetRoutingPolicyGeoPolicyResponsePtrInput {
	return (*rrsetRoutingPolicyGeoPolicyResponsePtrType)(v)
}

func (*rrsetRoutingPolicyGeoPolicyResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RRSetRoutingPolicyGeoPolicyResponse)(nil)).Elem()
}

func (i *rrsetRoutingPolicyGeoPolicyResponsePtrType) ToRRSetRoutingPolicyGeoPolicyResponsePtrOutput() RRSetRoutingPolicyGeoPolicyResponsePtrOutput {
	return i.ToRRSetRoutingPolicyGeoPolicyResponsePtrOutputWithContext(context.Background())
}

func (i *rrsetRoutingPolicyGeoPolicyResponsePtrType) ToRRSetRoutingPolicyGeoPolicyResponsePtrOutputWithContext(ctx context.Context) RRSetRoutingPolicyGeoPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RRSetRoutingPolicyGeoPolicyResponsePtrOutput)
}

type RRSetRoutingPolicyGeoPolicyResponseOutput struct{ *pulumi.OutputState }

func (RRSetRoutingPolicyGeoPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RRSetRoutingPolicyGeoPolicyResponse)(nil)).Elem()
}

func (o RRSetRoutingPolicyGeoPolicyResponseOutput) ToRRSetRoutingPolicyGeoPolicyResponseOutput() RRSetRoutingPolicyGeoPolicyResponseOutput {
	return o
}

func (o RRSetRoutingPolicyGeoPolicyResponseOutput) ToRRSetRoutingPolicyGeoPolicyResponseOutputWithContext(ctx context.Context) RRSetRoutingPolicyGeoPolicyResponseOutput {
	return o
}

func (o RRSetRoutingPolicyGeoPolicyResponseOutput) ToRRSetRoutingPolicyGeoPolicyResponsePtrOutput() RRSetRoutingPolicyGeoPolicyResponsePtrOutput {
	return o.ToRRSetRoutingPolicyGeoPolicyResponsePtrOutputWithContext(context.Background())
}

func (o RRSetRoutingPolicyGeoPolicyResponseOutput) ToRRSetRoutingPolicyGeoPolicyResponsePtrOutputWithContext(ctx context.Context) RRSetRoutingPolicyGeoPolicyResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RRSetRoutingPolicyGeoPolicyResponse) *RRSetRoutingPolicyGeoPolicyResponse {
		return &v
	}).(RRSetRoutingPolicyGeoPolicyResponsePtrOutput)
}

// The primary geo routing configuration. If there are multiple items with the same location, an error is returned instead.
func (o RRSetRoutingPolicyGeoPolicyResponseOutput) Items() RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseArrayOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyGeoPolicyResponse) []RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponse {
		return v.Items
	}).(RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseArrayOutput)
}

func (o RRSetRoutingPolicyGeoPolicyResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyGeoPolicyResponse) string { return v.Kind }).(pulumi.StringOutput)
}

type RRSetRoutingPolicyGeoPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (RRSetRoutingPolicyGeoPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RRSetRoutingPolicyGeoPolicyResponse)(nil)).Elem()
}

func (o RRSetRoutingPolicyGeoPolicyResponsePtrOutput) ToRRSetRoutingPolicyGeoPolicyResponsePtrOutput() RRSetRoutingPolicyGeoPolicyResponsePtrOutput {
	return o
}

func (o RRSetRoutingPolicyGeoPolicyResponsePtrOutput) ToRRSetRoutingPolicyGeoPolicyResponsePtrOutputWithContext(ctx context.Context) RRSetRoutingPolicyGeoPolicyResponsePtrOutput {
	return o
}

func (o RRSetRoutingPolicyGeoPolicyResponsePtrOutput) Elem() RRSetRoutingPolicyGeoPolicyResponseOutput {
	return o.ApplyT(func(v *RRSetRoutingPolicyGeoPolicyResponse) RRSetRoutingPolicyGeoPolicyResponse {
		if v != nil {
			return *v
		}
		var ret RRSetRoutingPolicyGeoPolicyResponse
		return ret
	}).(RRSetRoutingPolicyGeoPolicyResponseOutput)
}

// The primary geo routing configuration. If there are multiple items with the same location, an error is returned instead.
func (o RRSetRoutingPolicyGeoPolicyResponsePtrOutput) Items() RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseArrayOutput {
	return o.ApplyT(func(v *RRSetRoutingPolicyGeoPolicyResponse) []RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponse {
		if v == nil {
			return nil
		}
		return v.Items
	}).(RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseArrayOutput)
}

func (o RRSetRoutingPolicyGeoPolicyResponsePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RRSetRoutingPolicyGeoPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Kind
	}).(pulumi.StringPtrOutput)
}

// A RRSetRoutingPolicy represents ResourceRecordSet data that is returned dynamically with the response varying based on configured properties such as geolocation or by weighted random selection.
type RRSetRoutingPolicyResponse struct {
	Geo       RRSetRoutingPolicyGeoPolicyResponse `pulumi:"geo"`
	GeoPolicy RRSetRoutingPolicyGeoPolicyResponse `pulumi:"geoPolicy"`
	Kind      string                              `pulumi:"kind"`
	Wrr       RRSetRoutingPolicyWrrPolicyResponse `pulumi:"wrr"`
	WrrPolicy RRSetRoutingPolicyWrrPolicyResponse `pulumi:"wrrPolicy"`
}

// RRSetRoutingPolicyResponseInput is an input type that accepts RRSetRoutingPolicyResponseArgs and RRSetRoutingPolicyResponseOutput values.
// You can construct a concrete instance of `RRSetRoutingPolicyResponseInput` via:
//
//          RRSetRoutingPolicyResponseArgs{...}
type RRSetRoutingPolicyResponseInput interface {
	pulumi.Input

	ToRRSetRoutingPolicyResponseOutput() RRSetRoutingPolicyResponseOutput
	ToRRSetRoutingPolicyResponseOutputWithContext(context.Context) RRSetRoutingPolicyResponseOutput
}

// A RRSetRoutingPolicy represents ResourceRecordSet data that is returned dynamically with the response varying based on configured properties such as geolocation or by weighted random selection.
type RRSetRoutingPolicyResponseArgs struct {
	Geo       RRSetRoutingPolicyGeoPolicyResponseInput `pulumi:"geo"`
	GeoPolicy RRSetRoutingPolicyGeoPolicyResponseInput `pulumi:"geoPolicy"`
	Kind      pulumi.StringInput                       `pulumi:"kind"`
	Wrr       RRSetRoutingPolicyWrrPolicyResponseInput `pulumi:"wrr"`
	WrrPolicy RRSetRoutingPolicyWrrPolicyResponseInput `pulumi:"wrrPolicy"`
}

func (RRSetRoutingPolicyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RRSetRoutingPolicyResponse)(nil)).Elem()
}

func (i RRSetRoutingPolicyResponseArgs) ToRRSetRoutingPolicyResponseOutput() RRSetRoutingPolicyResponseOutput {
	return i.ToRRSetRoutingPolicyResponseOutputWithContext(context.Background())
}

func (i RRSetRoutingPolicyResponseArgs) ToRRSetRoutingPolicyResponseOutputWithContext(ctx context.Context) RRSetRoutingPolicyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RRSetRoutingPolicyResponseOutput)
}

func (i RRSetRoutingPolicyResponseArgs) ToRRSetRoutingPolicyResponsePtrOutput() RRSetRoutingPolicyResponsePtrOutput {
	return i.ToRRSetRoutingPolicyResponsePtrOutputWithContext(context.Background())
}

func (i RRSetRoutingPolicyResponseArgs) ToRRSetRoutingPolicyResponsePtrOutputWithContext(ctx context.Context) RRSetRoutingPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RRSetRoutingPolicyResponseOutput).ToRRSetRoutingPolicyResponsePtrOutputWithContext(ctx)
}

// RRSetRoutingPolicyResponsePtrInput is an input type that accepts RRSetRoutingPolicyResponseArgs, RRSetRoutingPolicyResponsePtr and RRSetRoutingPolicyResponsePtrOutput values.
// You can construct a concrete instance of `RRSetRoutingPolicyResponsePtrInput` via:
//
//          RRSetRoutingPolicyResponseArgs{...}
//
//  or:
//
//          nil
type RRSetRoutingPolicyResponsePtrInput interface {
	pulumi.Input

	ToRRSetRoutingPolicyResponsePtrOutput() RRSetRoutingPolicyResponsePtrOutput
	ToRRSetRoutingPolicyResponsePtrOutputWithContext(context.Context) RRSetRoutingPolicyResponsePtrOutput
}

type rrsetRoutingPolicyResponsePtrType RRSetRoutingPolicyResponseArgs

func RRSetRoutingPolicyResponsePtr(v *RRSetRoutingPolicyResponseArgs) RRSetRoutingPolicyResponsePtrInput {
	return (*rrsetRoutingPolicyResponsePtrType)(v)
}

func (*rrsetRoutingPolicyResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RRSetRoutingPolicyResponse)(nil)).Elem()
}

func (i *rrsetRoutingPolicyResponsePtrType) ToRRSetRoutingPolicyResponsePtrOutput() RRSetRoutingPolicyResponsePtrOutput {
	return i.ToRRSetRoutingPolicyResponsePtrOutputWithContext(context.Background())
}

func (i *rrsetRoutingPolicyResponsePtrType) ToRRSetRoutingPolicyResponsePtrOutputWithContext(ctx context.Context) RRSetRoutingPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RRSetRoutingPolicyResponsePtrOutput)
}

// A RRSetRoutingPolicy represents ResourceRecordSet data that is returned dynamically with the response varying based on configured properties such as geolocation or by weighted random selection.
type RRSetRoutingPolicyResponseOutput struct{ *pulumi.OutputState }

func (RRSetRoutingPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RRSetRoutingPolicyResponse)(nil)).Elem()
}

func (o RRSetRoutingPolicyResponseOutput) ToRRSetRoutingPolicyResponseOutput() RRSetRoutingPolicyResponseOutput {
	return o
}

func (o RRSetRoutingPolicyResponseOutput) ToRRSetRoutingPolicyResponseOutputWithContext(ctx context.Context) RRSetRoutingPolicyResponseOutput {
	return o
}

func (o RRSetRoutingPolicyResponseOutput) ToRRSetRoutingPolicyResponsePtrOutput() RRSetRoutingPolicyResponsePtrOutput {
	return o.ToRRSetRoutingPolicyResponsePtrOutputWithContext(context.Background())
}

func (o RRSetRoutingPolicyResponseOutput) ToRRSetRoutingPolicyResponsePtrOutputWithContext(ctx context.Context) RRSetRoutingPolicyResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RRSetRoutingPolicyResponse) *RRSetRoutingPolicyResponse {
		return &v
	}).(RRSetRoutingPolicyResponsePtrOutput)
}

func (o RRSetRoutingPolicyResponseOutput) Geo() RRSetRoutingPolicyGeoPolicyResponseOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyResponse) RRSetRoutingPolicyGeoPolicyResponse { return v.Geo }).(RRSetRoutingPolicyGeoPolicyResponseOutput)
}

func (o RRSetRoutingPolicyResponseOutput) GeoPolicy() RRSetRoutingPolicyGeoPolicyResponseOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyResponse) RRSetRoutingPolicyGeoPolicyResponse { return v.GeoPolicy }).(RRSetRoutingPolicyGeoPolicyResponseOutput)
}

func (o RRSetRoutingPolicyResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyResponse) string { return v.Kind }).(pulumi.StringOutput)
}

func (o RRSetRoutingPolicyResponseOutput) Wrr() RRSetRoutingPolicyWrrPolicyResponseOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyResponse) RRSetRoutingPolicyWrrPolicyResponse { return v.Wrr }).(RRSetRoutingPolicyWrrPolicyResponseOutput)
}

func (o RRSetRoutingPolicyResponseOutput) WrrPolicy() RRSetRoutingPolicyWrrPolicyResponseOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyResponse) RRSetRoutingPolicyWrrPolicyResponse { return v.WrrPolicy }).(RRSetRoutingPolicyWrrPolicyResponseOutput)
}

type RRSetRoutingPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (RRSetRoutingPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RRSetRoutingPolicyResponse)(nil)).Elem()
}

func (o RRSetRoutingPolicyResponsePtrOutput) ToRRSetRoutingPolicyResponsePtrOutput() RRSetRoutingPolicyResponsePtrOutput {
	return o
}

func (o RRSetRoutingPolicyResponsePtrOutput) ToRRSetRoutingPolicyResponsePtrOutputWithContext(ctx context.Context) RRSetRoutingPolicyResponsePtrOutput {
	return o
}

func (o RRSetRoutingPolicyResponsePtrOutput) Elem() RRSetRoutingPolicyResponseOutput {
	return o.ApplyT(func(v *RRSetRoutingPolicyResponse) RRSetRoutingPolicyResponse {
		if v != nil {
			return *v
		}
		var ret RRSetRoutingPolicyResponse
		return ret
	}).(RRSetRoutingPolicyResponseOutput)
}

func (o RRSetRoutingPolicyResponsePtrOutput) Geo() RRSetRoutingPolicyGeoPolicyResponsePtrOutput {
	return o.ApplyT(func(v *RRSetRoutingPolicyResponse) *RRSetRoutingPolicyGeoPolicyResponse {
		if v == nil {
			return nil
		}
		return &v.Geo
	}).(RRSetRoutingPolicyGeoPolicyResponsePtrOutput)
}

func (o RRSetRoutingPolicyResponsePtrOutput) GeoPolicy() RRSetRoutingPolicyGeoPolicyResponsePtrOutput {
	return o.ApplyT(func(v *RRSetRoutingPolicyResponse) *RRSetRoutingPolicyGeoPolicyResponse {
		if v == nil {
			return nil
		}
		return &v.GeoPolicy
	}).(RRSetRoutingPolicyGeoPolicyResponsePtrOutput)
}

func (o RRSetRoutingPolicyResponsePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RRSetRoutingPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Kind
	}).(pulumi.StringPtrOutput)
}

func (o RRSetRoutingPolicyResponsePtrOutput) Wrr() RRSetRoutingPolicyWrrPolicyResponsePtrOutput {
	return o.ApplyT(func(v *RRSetRoutingPolicyResponse) *RRSetRoutingPolicyWrrPolicyResponse {
		if v == nil {
			return nil
		}
		return &v.Wrr
	}).(RRSetRoutingPolicyWrrPolicyResponsePtrOutput)
}

func (o RRSetRoutingPolicyResponsePtrOutput) WrrPolicy() RRSetRoutingPolicyWrrPolicyResponsePtrOutput {
	return o.ApplyT(func(v *RRSetRoutingPolicyResponse) *RRSetRoutingPolicyWrrPolicyResponse {
		if v == nil {
			return nil
		}
		return &v.WrrPolicy
	}).(RRSetRoutingPolicyWrrPolicyResponsePtrOutput)
}

type RRSetRoutingPolicyWrrPolicy struct {
	Items []RRSetRoutingPolicyWrrPolicyWrrPolicyItem `pulumi:"items"`
	Kind  *string                                    `pulumi:"kind"`
}

// RRSetRoutingPolicyWrrPolicyInput is an input type that accepts RRSetRoutingPolicyWrrPolicyArgs and RRSetRoutingPolicyWrrPolicyOutput values.
// You can construct a concrete instance of `RRSetRoutingPolicyWrrPolicyInput` via:
//
//          RRSetRoutingPolicyWrrPolicyArgs{...}
type RRSetRoutingPolicyWrrPolicyInput interface {
	pulumi.Input

	ToRRSetRoutingPolicyWrrPolicyOutput() RRSetRoutingPolicyWrrPolicyOutput
	ToRRSetRoutingPolicyWrrPolicyOutputWithContext(context.Context) RRSetRoutingPolicyWrrPolicyOutput
}

type RRSetRoutingPolicyWrrPolicyArgs struct {
	Items RRSetRoutingPolicyWrrPolicyWrrPolicyItemArrayInput `pulumi:"items"`
	Kind  pulumi.StringPtrInput                              `pulumi:"kind"`
}

func (RRSetRoutingPolicyWrrPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RRSetRoutingPolicyWrrPolicy)(nil)).Elem()
}

func (i RRSetRoutingPolicyWrrPolicyArgs) ToRRSetRoutingPolicyWrrPolicyOutput() RRSetRoutingPolicyWrrPolicyOutput {
	return i.ToRRSetRoutingPolicyWrrPolicyOutputWithContext(context.Background())
}

func (i RRSetRoutingPolicyWrrPolicyArgs) ToRRSetRoutingPolicyWrrPolicyOutputWithContext(ctx context.Context) RRSetRoutingPolicyWrrPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RRSetRoutingPolicyWrrPolicyOutput)
}

func (i RRSetRoutingPolicyWrrPolicyArgs) ToRRSetRoutingPolicyWrrPolicyPtrOutput() RRSetRoutingPolicyWrrPolicyPtrOutput {
	return i.ToRRSetRoutingPolicyWrrPolicyPtrOutputWithContext(context.Background())
}

func (i RRSetRoutingPolicyWrrPolicyArgs) ToRRSetRoutingPolicyWrrPolicyPtrOutputWithContext(ctx context.Context) RRSetRoutingPolicyWrrPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RRSetRoutingPolicyWrrPolicyOutput).ToRRSetRoutingPolicyWrrPolicyPtrOutputWithContext(ctx)
}

// RRSetRoutingPolicyWrrPolicyPtrInput is an input type that accepts RRSetRoutingPolicyWrrPolicyArgs, RRSetRoutingPolicyWrrPolicyPtr and RRSetRoutingPolicyWrrPolicyPtrOutput values.
// You can construct a concrete instance of `RRSetRoutingPolicyWrrPolicyPtrInput` via:
//
//          RRSetRoutingPolicyWrrPolicyArgs{...}
//
//  or:
//
//          nil
type RRSetRoutingPolicyWrrPolicyPtrInput interface {
	pulumi.Input

	ToRRSetRoutingPolicyWrrPolicyPtrOutput() RRSetRoutingPolicyWrrPolicyPtrOutput
	ToRRSetRoutingPolicyWrrPolicyPtrOutputWithContext(context.Context) RRSetRoutingPolicyWrrPolicyPtrOutput
}

type rrsetRoutingPolicyWrrPolicyPtrType RRSetRoutingPolicyWrrPolicyArgs

func RRSetRoutingPolicyWrrPolicyPtr(v *RRSetRoutingPolicyWrrPolicyArgs) RRSetRoutingPolicyWrrPolicyPtrInput {
	return (*rrsetRoutingPolicyWrrPolicyPtrType)(v)
}

func (*rrsetRoutingPolicyWrrPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RRSetRoutingPolicyWrrPolicy)(nil)).Elem()
}

func (i *rrsetRoutingPolicyWrrPolicyPtrType) ToRRSetRoutingPolicyWrrPolicyPtrOutput() RRSetRoutingPolicyWrrPolicyPtrOutput {
	return i.ToRRSetRoutingPolicyWrrPolicyPtrOutputWithContext(context.Background())
}

func (i *rrsetRoutingPolicyWrrPolicyPtrType) ToRRSetRoutingPolicyWrrPolicyPtrOutputWithContext(ctx context.Context) RRSetRoutingPolicyWrrPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RRSetRoutingPolicyWrrPolicyPtrOutput)
}

type RRSetRoutingPolicyWrrPolicyOutput struct{ *pulumi.OutputState }

func (RRSetRoutingPolicyWrrPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RRSetRoutingPolicyWrrPolicy)(nil)).Elem()
}

func (o RRSetRoutingPolicyWrrPolicyOutput) ToRRSetRoutingPolicyWrrPolicyOutput() RRSetRoutingPolicyWrrPolicyOutput {
	return o
}

func (o RRSetRoutingPolicyWrrPolicyOutput) ToRRSetRoutingPolicyWrrPolicyOutputWithContext(ctx context.Context) RRSetRoutingPolicyWrrPolicyOutput {
	return o
}

func (o RRSetRoutingPolicyWrrPolicyOutput) ToRRSetRoutingPolicyWrrPolicyPtrOutput() RRSetRoutingPolicyWrrPolicyPtrOutput {
	return o.ToRRSetRoutingPolicyWrrPolicyPtrOutputWithContext(context.Background())
}

func (o RRSetRoutingPolicyWrrPolicyOutput) ToRRSetRoutingPolicyWrrPolicyPtrOutputWithContext(ctx context.Context) RRSetRoutingPolicyWrrPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RRSetRoutingPolicyWrrPolicy) *RRSetRoutingPolicyWrrPolicy {
		return &v
	}).(RRSetRoutingPolicyWrrPolicyPtrOutput)
}

func (o RRSetRoutingPolicyWrrPolicyOutput) Items() RRSetRoutingPolicyWrrPolicyWrrPolicyItemArrayOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyWrrPolicy) []RRSetRoutingPolicyWrrPolicyWrrPolicyItem { return v.Items }).(RRSetRoutingPolicyWrrPolicyWrrPolicyItemArrayOutput)
}

func (o RRSetRoutingPolicyWrrPolicyOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyWrrPolicy) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

type RRSetRoutingPolicyWrrPolicyPtrOutput struct{ *pulumi.OutputState }

func (RRSetRoutingPolicyWrrPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RRSetRoutingPolicyWrrPolicy)(nil)).Elem()
}

func (o RRSetRoutingPolicyWrrPolicyPtrOutput) ToRRSetRoutingPolicyWrrPolicyPtrOutput() RRSetRoutingPolicyWrrPolicyPtrOutput {
	return o
}

func (o RRSetRoutingPolicyWrrPolicyPtrOutput) ToRRSetRoutingPolicyWrrPolicyPtrOutputWithContext(ctx context.Context) RRSetRoutingPolicyWrrPolicyPtrOutput {
	return o
}

func (o RRSetRoutingPolicyWrrPolicyPtrOutput) Elem() RRSetRoutingPolicyWrrPolicyOutput {
	return o.ApplyT(func(v *RRSetRoutingPolicyWrrPolicy) RRSetRoutingPolicyWrrPolicy {
		if v != nil {
			return *v
		}
		var ret RRSetRoutingPolicyWrrPolicy
		return ret
	}).(RRSetRoutingPolicyWrrPolicyOutput)
}

func (o RRSetRoutingPolicyWrrPolicyPtrOutput) Items() RRSetRoutingPolicyWrrPolicyWrrPolicyItemArrayOutput {
	return o.ApplyT(func(v *RRSetRoutingPolicyWrrPolicy) []RRSetRoutingPolicyWrrPolicyWrrPolicyItem {
		if v == nil {
			return nil
		}
		return v.Items
	}).(RRSetRoutingPolicyWrrPolicyWrrPolicyItemArrayOutput)
}

func (o RRSetRoutingPolicyWrrPolicyPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RRSetRoutingPolicyWrrPolicy) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

type RRSetRoutingPolicyWrrPolicyResponse struct {
	Items []RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponse `pulumi:"items"`
	Kind  string                                             `pulumi:"kind"`
}

// RRSetRoutingPolicyWrrPolicyResponseInput is an input type that accepts RRSetRoutingPolicyWrrPolicyResponseArgs and RRSetRoutingPolicyWrrPolicyResponseOutput values.
// You can construct a concrete instance of `RRSetRoutingPolicyWrrPolicyResponseInput` via:
//
//          RRSetRoutingPolicyWrrPolicyResponseArgs{...}
type RRSetRoutingPolicyWrrPolicyResponseInput interface {
	pulumi.Input

	ToRRSetRoutingPolicyWrrPolicyResponseOutput() RRSetRoutingPolicyWrrPolicyResponseOutput
	ToRRSetRoutingPolicyWrrPolicyResponseOutputWithContext(context.Context) RRSetRoutingPolicyWrrPolicyResponseOutput
}

type RRSetRoutingPolicyWrrPolicyResponseArgs struct {
	Items RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseArrayInput `pulumi:"items"`
	Kind  pulumi.StringInput                                         `pulumi:"kind"`
}

func (RRSetRoutingPolicyWrrPolicyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RRSetRoutingPolicyWrrPolicyResponse)(nil)).Elem()
}

func (i RRSetRoutingPolicyWrrPolicyResponseArgs) ToRRSetRoutingPolicyWrrPolicyResponseOutput() RRSetRoutingPolicyWrrPolicyResponseOutput {
	return i.ToRRSetRoutingPolicyWrrPolicyResponseOutputWithContext(context.Background())
}

func (i RRSetRoutingPolicyWrrPolicyResponseArgs) ToRRSetRoutingPolicyWrrPolicyResponseOutputWithContext(ctx context.Context) RRSetRoutingPolicyWrrPolicyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RRSetRoutingPolicyWrrPolicyResponseOutput)
}

func (i RRSetRoutingPolicyWrrPolicyResponseArgs) ToRRSetRoutingPolicyWrrPolicyResponsePtrOutput() RRSetRoutingPolicyWrrPolicyResponsePtrOutput {
	return i.ToRRSetRoutingPolicyWrrPolicyResponsePtrOutputWithContext(context.Background())
}

func (i RRSetRoutingPolicyWrrPolicyResponseArgs) ToRRSetRoutingPolicyWrrPolicyResponsePtrOutputWithContext(ctx context.Context) RRSetRoutingPolicyWrrPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RRSetRoutingPolicyWrrPolicyResponseOutput).ToRRSetRoutingPolicyWrrPolicyResponsePtrOutputWithContext(ctx)
}

// RRSetRoutingPolicyWrrPolicyResponsePtrInput is an input type that accepts RRSetRoutingPolicyWrrPolicyResponseArgs, RRSetRoutingPolicyWrrPolicyResponsePtr and RRSetRoutingPolicyWrrPolicyResponsePtrOutput values.
// You can construct a concrete instance of `RRSetRoutingPolicyWrrPolicyResponsePtrInput` via:
//
//          RRSetRoutingPolicyWrrPolicyResponseArgs{...}
//
//  or:
//
//          nil
type RRSetRoutingPolicyWrrPolicyResponsePtrInput interface {
	pulumi.Input

	ToRRSetRoutingPolicyWrrPolicyResponsePtrOutput() RRSetRoutingPolicyWrrPolicyResponsePtrOutput
	ToRRSetRoutingPolicyWrrPolicyResponsePtrOutputWithContext(context.Context) RRSetRoutingPolicyWrrPolicyResponsePtrOutput
}

type rrsetRoutingPolicyWrrPolicyResponsePtrType RRSetRoutingPolicyWrrPolicyResponseArgs

func RRSetRoutingPolicyWrrPolicyResponsePtr(v *RRSetRoutingPolicyWrrPolicyResponseArgs) RRSetRoutingPolicyWrrPolicyResponsePtrInput {
	return (*rrsetRoutingPolicyWrrPolicyResponsePtrType)(v)
}

func (*rrsetRoutingPolicyWrrPolicyResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RRSetRoutingPolicyWrrPolicyResponse)(nil)).Elem()
}

func (i *rrsetRoutingPolicyWrrPolicyResponsePtrType) ToRRSetRoutingPolicyWrrPolicyResponsePtrOutput() RRSetRoutingPolicyWrrPolicyResponsePtrOutput {
	return i.ToRRSetRoutingPolicyWrrPolicyResponsePtrOutputWithContext(context.Background())
}

func (i *rrsetRoutingPolicyWrrPolicyResponsePtrType) ToRRSetRoutingPolicyWrrPolicyResponsePtrOutputWithContext(ctx context.Context) RRSetRoutingPolicyWrrPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RRSetRoutingPolicyWrrPolicyResponsePtrOutput)
}

type RRSetRoutingPolicyWrrPolicyResponseOutput struct{ *pulumi.OutputState }

func (RRSetRoutingPolicyWrrPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RRSetRoutingPolicyWrrPolicyResponse)(nil)).Elem()
}

func (o RRSetRoutingPolicyWrrPolicyResponseOutput) ToRRSetRoutingPolicyWrrPolicyResponseOutput() RRSetRoutingPolicyWrrPolicyResponseOutput {
	return o
}

func (o RRSetRoutingPolicyWrrPolicyResponseOutput) ToRRSetRoutingPolicyWrrPolicyResponseOutputWithContext(ctx context.Context) RRSetRoutingPolicyWrrPolicyResponseOutput {
	return o
}

func (o RRSetRoutingPolicyWrrPolicyResponseOutput) ToRRSetRoutingPolicyWrrPolicyResponsePtrOutput() RRSetRoutingPolicyWrrPolicyResponsePtrOutput {
	return o.ToRRSetRoutingPolicyWrrPolicyResponsePtrOutputWithContext(context.Background())
}

func (o RRSetRoutingPolicyWrrPolicyResponseOutput) ToRRSetRoutingPolicyWrrPolicyResponsePtrOutputWithContext(ctx context.Context) RRSetRoutingPolicyWrrPolicyResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RRSetRoutingPolicyWrrPolicyResponse) *RRSetRoutingPolicyWrrPolicyResponse {
		return &v
	}).(RRSetRoutingPolicyWrrPolicyResponsePtrOutput)
}

func (o RRSetRoutingPolicyWrrPolicyResponseOutput) Items() RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseArrayOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyWrrPolicyResponse) []RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponse {
		return v.Items
	}).(RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseArrayOutput)
}

func (o RRSetRoutingPolicyWrrPolicyResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyWrrPolicyResponse) string { return v.Kind }).(pulumi.StringOutput)
}

type RRSetRoutingPolicyWrrPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (RRSetRoutingPolicyWrrPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RRSetRoutingPolicyWrrPolicyResponse)(nil)).Elem()
}

func (o RRSetRoutingPolicyWrrPolicyResponsePtrOutput) ToRRSetRoutingPolicyWrrPolicyResponsePtrOutput() RRSetRoutingPolicyWrrPolicyResponsePtrOutput {
	return o
}

func (o RRSetRoutingPolicyWrrPolicyResponsePtrOutput) ToRRSetRoutingPolicyWrrPolicyResponsePtrOutputWithContext(ctx context.Context) RRSetRoutingPolicyWrrPolicyResponsePtrOutput {
	return o
}

func (o RRSetRoutingPolicyWrrPolicyResponsePtrOutput) Elem() RRSetRoutingPolicyWrrPolicyResponseOutput {
	return o.ApplyT(func(v *RRSetRoutingPolicyWrrPolicyResponse) RRSetRoutingPolicyWrrPolicyResponse {
		if v != nil {
			return *v
		}
		var ret RRSetRoutingPolicyWrrPolicyResponse
		return ret
	}).(RRSetRoutingPolicyWrrPolicyResponseOutput)
}

func (o RRSetRoutingPolicyWrrPolicyResponsePtrOutput) Items() RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseArrayOutput {
	return o.ApplyT(func(v *RRSetRoutingPolicyWrrPolicyResponse) []RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponse {
		if v == nil {
			return nil
		}
		return v.Items
	}).(RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseArrayOutput)
}

func (o RRSetRoutingPolicyWrrPolicyResponsePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RRSetRoutingPolicyWrrPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Kind
	}).(pulumi.StringPtrOutput)
}

type RRSetRoutingPolicyWrrPolicyWrrPolicyItem struct {
	Kind    *string  `pulumi:"kind"`
	Rrdatas []string `pulumi:"rrdatas"`
	// DNSSEC generated signatures for the above wrr_rrdata.
	SignatureRrdatas []string `pulumi:"signatureRrdatas"`
	// The weight corresponding to this subset of rrdata. When multiple WeightedRoundRobinPolicyItems are configured, the probability of returning an rrset is proportional to its weight relative to the sum of weights configured for all items. This weight should be non-negative.
	Weight *float64 `pulumi:"weight"`
}

// RRSetRoutingPolicyWrrPolicyWrrPolicyItemInput is an input type that accepts RRSetRoutingPolicyWrrPolicyWrrPolicyItemArgs and RRSetRoutingPolicyWrrPolicyWrrPolicyItemOutput values.
// You can construct a concrete instance of `RRSetRoutingPolicyWrrPolicyWrrPolicyItemInput` via:
//
//          RRSetRoutingPolicyWrrPolicyWrrPolicyItemArgs{...}
type RRSetRoutingPolicyWrrPolicyWrrPolicyItemInput interface {
	pulumi.Input

	ToRRSetRoutingPolicyWrrPolicyWrrPolicyItemOutput() RRSetRoutingPolicyWrrPolicyWrrPolicyItemOutput
	ToRRSetRoutingPolicyWrrPolicyWrrPolicyItemOutputWithContext(context.Context) RRSetRoutingPolicyWrrPolicyWrrPolicyItemOutput
}

type RRSetRoutingPolicyWrrPolicyWrrPolicyItemArgs struct {
	Kind    pulumi.StringPtrInput   `pulumi:"kind"`
	Rrdatas pulumi.StringArrayInput `pulumi:"rrdatas"`
	// DNSSEC generated signatures for the above wrr_rrdata.
	SignatureRrdatas pulumi.StringArrayInput `pulumi:"signatureRrdatas"`
	// The weight corresponding to this subset of rrdata. When multiple WeightedRoundRobinPolicyItems are configured, the probability of returning an rrset is proportional to its weight relative to the sum of weights configured for all items. This weight should be non-negative.
	Weight pulumi.Float64PtrInput `pulumi:"weight"`
}

func (RRSetRoutingPolicyWrrPolicyWrrPolicyItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RRSetRoutingPolicyWrrPolicyWrrPolicyItem)(nil)).Elem()
}

func (i RRSetRoutingPolicyWrrPolicyWrrPolicyItemArgs) ToRRSetRoutingPolicyWrrPolicyWrrPolicyItemOutput() RRSetRoutingPolicyWrrPolicyWrrPolicyItemOutput {
	return i.ToRRSetRoutingPolicyWrrPolicyWrrPolicyItemOutputWithContext(context.Background())
}

func (i RRSetRoutingPolicyWrrPolicyWrrPolicyItemArgs) ToRRSetRoutingPolicyWrrPolicyWrrPolicyItemOutputWithContext(ctx context.Context) RRSetRoutingPolicyWrrPolicyWrrPolicyItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RRSetRoutingPolicyWrrPolicyWrrPolicyItemOutput)
}

// RRSetRoutingPolicyWrrPolicyWrrPolicyItemArrayInput is an input type that accepts RRSetRoutingPolicyWrrPolicyWrrPolicyItemArray and RRSetRoutingPolicyWrrPolicyWrrPolicyItemArrayOutput values.
// You can construct a concrete instance of `RRSetRoutingPolicyWrrPolicyWrrPolicyItemArrayInput` via:
//
//          RRSetRoutingPolicyWrrPolicyWrrPolicyItemArray{ RRSetRoutingPolicyWrrPolicyWrrPolicyItemArgs{...} }
type RRSetRoutingPolicyWrrPolicyWrrPolicyItemArrayInput interface {
	pulumi.Input

	ToRRSetRoutingPolicyWrrPolicyWrrPolicyItemArrayOutput() RRSetRoutingPolicyWrrPolicyWrrPolicyItemArrayOutput
	ToRRSetRoutingPolicyWrrPolicyWrrPolicyItemArrayOutputWithContext(context.Context) RRSetRoutingPolicyWrrPolicyWrrPolicyItemArrayOutput
}

type RRSetRoutingPolicyWrrPolicyWrrPolicyItemArray []RRSetRoutingPolicyWrrPolicyWrrPolicyItemInput

func (RRSetRoutingPolicyWrrPolicyWrrPolicyItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RRSetRoutingPolicyWrrPolicyWrrPolicyItem)(nil)).Elem()
}

func (i RRSetRoutingPolicyWrrPolicyWrrPolicyItemArray) ToRRSetRoutingPolicyWrrPolicyWrrPolicyItemArrayOutput() RRSetRoutingPolicyWrrPolicyWrrPolicyItemArrayOutput {
	return i.ToRRSetRoutingPolicyWrrPolicyWrrPolicyItemArrayOutputWithContext(context.Background())
}

func (i RRSetRoutingPolicyWrrPolicyWrrPolicyItemArray) ToRRSetRoutingPolicyWrrPolicyWrrPolicyItemArrayOutputWithContext(ctx context.Context) RRSetRoutingPolicyWrrPolicyWrrPolicyItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RRSetRoutingPolicyWrrPolicyWrrPolicyItemArrayOutput)
}

type RRSetRoutingPolicyWrrPolicyWrrPolicyItemOutput struct{ *pulumi.OutputState }

func (RRSetRoutingPolicyWrrPolicyWrrPolicyItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RRSetRoutingPolicyWrrPolicyWrrPolicyItem)(nil)).Elem()
}

func (o RRSetRoutingPolicyWrrPolicyWrrPolicyItemOutput) ToRRSetRoutingPolicyWrrPolicyWrrPolicyItemOutput() RRSetRoutingPolicyWrrPolicyWrrPolicyItemOutput {
	return o
}

func (o RRSetRoutingPolicyWrrPolicyWrrPolicyItemOutput) ToRRSetRoutingPolicyWrrPolicyWrrPolicyItemOutputWithContext(ctx context.Context) RRSetRoutingPolicyWrrPolicyWrrPolicyItemOutput {
	return o
}

func (o RRSetRoutingPolicyWrrPolicyWrrPolicyItemOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyWrrPolicyWrrPolicyItem) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o RRSetRoutingPolicyWrrPolicyWrrPolicyItemOutput) Rrdatas() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyWrrPolicyWrrPolicyItem) []string { return v.Rrdatas }).(pulumi.StringArrayOutput)
}

// DNSSEC generated signatures for the above wrr_rrdata.
func (o RRSetRoutingPolicyWrrPolicyWrrPolicyItemOutput) SignatureRrdatas() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyWrrPolicyWrrPolicyItem) []string { return v.SignatureRrdatas }).(pulumi.StringArrayOutput)
}

// The weight corresponding to this subset of rrdata. When multiple WeightedRoundRobinPolicyItems are configured, the probability of returning an rrset is proportional to its weight relative to the sum of weights configured for all items. This weight should be non-negative.
func (o RRSetRoutingPolicyWrrPolicyWrrPolicyItemOutput) Weight() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyWrrPolicyWrrPolicyItem) *float64 { return v.Weight }).(pulumi.Float64PtrOutput)
}

type RRSetRoutingPolicyWrrPolicyWrrPolicyItemArrayOutput struct{ *pulumi.OutputState }

func (RRSetRoutingPolicyWrrPolicyWrrPolicyItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RRSetRoutingPolicyWrrPolicyWrrPolicyItem)(nil)).Elem()
}

func (o RRSetRoutingPolicyWrrPolicyWrrPolicyItemArrayOutput) ToRRSetRoutingPolicyWrrPolicyWrrPolicyItemArrayOutput() RRSetRoutingPolicyWrrPolicyWrrPolicyItemArrayOutput {
	return o
}

func (o RRSetRoutingPolicyWrrPolicyWrrPolicyItemArrayOutput) ToRRSetRoutingPolicyWrrPolicyWrrPolicyItemArrayOutputWithContext(ctx context.Context) RRSetRoutingPolicyWrrPolicyWrrPolicyItemArrayOutput {
	return o
}

func (o RRSetRoutingPolicyWrrPolicyWrrPolicyItemArrayOutput) Index(i pulumi.IntInput) RRSetRoutingPolicyWrrPolicyWrrPolicyItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RRSetRoutingPolicyWrrPolicyWrrPolicyItem {
		return vs[0].([]RRSetRoutingPolicyWrrPolicyWrrPolicyItem)[vs[1].(int)]
	}).(RRSetRoutingPolicyWrrPolicyWrrPolicyItemOutput)
}

type RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponse struct {
	Kind    string   `pulumi:"kind"`
	Rrdatas []string `pulumi:"rrdatas"`
	// DNSSEC generated signatures for the above wrr_rrdata.
	SignatureRrdatas []string `pulumi:"signatureRrdatas"`
	// The weight corresponding to this subset of rrdata. When multiple WeightedRoundRobinPolicyItems are configured, the probability of returning an rrset is proportional to its weight relative to the sum of weights configured for all items. This weight should be non-negative.
	Weight float64 `pulumi:"weight"`
}

// RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseInput is an input type that accepts RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseArgs and RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseOutput values.
// You can construct a concrete instance of `RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseInput` via:
//
//          RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseArgs{...}
type RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseInput interface {
	pulumi.Input

	ToRRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseOutput() RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseOutput
	ToRRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseOutputWithContext(context.Context) RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseOutput
}

type RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseArgs struct {
	Kind    pulumi.StringInput      `pulumi:"kind"`
	Rrdatas pulumi.StringArrayInput `pulumi:"rrdatas"`
	// DNSSEC generated signatures for the above wrr_rrdata.
	SignatureRrdatas pulumi.StringArrayInput `pulumi:"signatureRrdatas"`
	// The weight corresponding to this subset of rrdata. When multiple WeightedRoundRobinPolicyItems are configured, the probability of returning an rrset is proportional to its weight relative to the sum of weights configured for all items. This weight should be non-negative.
	Weight pulumi.Float64Input `pulumi:"weight"`
}

func (RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponse)(nil)).Elem()
}

func (i RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseArgs) ToRRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseOutput() RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseOutput {
	return i.ToRRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseOutputWithContext(context.Background())
}

func (i RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseArgs) ToRRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseOutputWithContext(ctx context.Context) RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseOutput)
}

// RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseArrayInput is an input type that accepts RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseArray and RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseArrayOutput values.
// You can construct a concrete instance of `RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseArrayInput` via:
//
//          RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseArray{ RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseArgs{...} }
type RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseArrayInput interface {
	pulumi.Input

	ToRRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseArrayOutput() RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseArrayOutput
	ToRRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseArrayOutputWithContext(context.Context) RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseArrayOutput
}

type RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseArray []RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseInput

func (RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponse)(nil)).Elem()
}

func (i RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseArray) ToRRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseArrayOutput() RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseArrayOutput {
	return i.ToRRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseArrayOutputWithContext(context.Background())
}

func (i RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseArray) ToRRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseArrayOutputWithContext(ctx context.Context) RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseArrayOutput)
}

type RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseOutput struct{ *pulumi.OutputState }

func (RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponse)(nil)).Elem()
}

func (o RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseOutput) ToRRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseOutput() RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseOutput {
	return o
}

func (o RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseOutput) ToRRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseOutputWithContext(ctx context.Context) RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseOutput {
	return o
}

func (o RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponse) string { return v.Kind }).(pulumi.StringOutput)
}

func (o RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseOutput) Rrdatas() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponse) []string { return v.Rrdatas }).(pulumi.StringArrayOutput)
}

// DNSSEC generated signatures for the above wrr_rrdata.
func (o RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseOutput) SignatureRrdatas() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponse) []string { return v.SignatureRrdatas }).(pulumi.StringArrayOutput)
}

// The weight corresponding to this subset of rrdata. When multiple WeightedRoundRobinPolicyItems are configured, the probability of returning an rrset is proportional to its weight relative to the sum of weights configured for all items. This weight should be non-negative.
func (o RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseOutput) Weight() pulumi.Float64Output {
	return o.ApplyT(func(v RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponse) float64 { return v.Weight }).(pulumi.Float64Output)
}

type RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseArrayOutput struct{ *pulumi.OutputState }

func (RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponse)(nil)).Elem()
}

func (o RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseArrayOutput) ToRRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseArrayOutput() RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseArrayOutput {
	return o
}

func (o RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseArrayOutput) ToRRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseArrayOutputWithContext(ctx context.Context) RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseArrayOutput {
	return o
}

func (o RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseArrayOutput) Index(i pulumi.IntInput) RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponse {
		return vs[0].([]RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponse)[vs[1].(int)]
	}).(RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseOutput)
}

// A unit of data that is returned by the DNS servers.
type ResourceRecordSetType struct {
	Kind *string `pulumi:"kind"`
	// For example, www.example.com.
	Name *string `pulumi:"name"`
	// Configures dynamic query responses based on geo location of querying user or a weighted round robin based routing policy. A ResourceRecordSet should only have either rrdata (static) or routing_policy (dynamic). An error is returned otherwise.
	RoutingPolicy *RRSetRoutingPolicy `pulumi:"routingPolicy"`
	// As defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1) -- see examples.
	Rrdatas []string `pulumi:"rrdatas"`
	// As defined in RFC 4034 (section 3.2).
	SignatureRrdatas []string `pulumi:"signatureRrdatas"`
	// Number of seconds that this ResourceRecordSet can be cached by resolvers.
	Ttl *int `pulumi:"ttl"`
	// The identifier of a supported record type. See the list of Supported DNS record types.
	Type *string `pulumi:"type"`
}

// ResourceRecordSetTypeInput is an input type that accepts ResourceRecordSetTypeArgs and ResourceRecordSetTypeOutput values.
// You can construct a concrete instance of `ResourceRecordSetTypeInput` via:
//
//          ResourceRecordSetTypeArgs{...}
type ResourceRecordSetTypeInput interface {
	pulumi.Input

	ToResourceRecordSetTypeOutput() ResourceRecordSetTypeOutput
	ToResourceRecordSetTypeOutputWithContext(context.Context) ResourceRecordSetTypeOutput
}

// A unit of data that is returned by the DNS servers.
type ResourceRecordSetTypeArgs struct {
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// For example, www.example.com.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Configures dynamic query responses based on geo location of querying user or a weighted round robin based routing policy. A ResourceRecordSet should only have either rrdata (static) or routing_policy (dynamic). An error is returned otherwise.
	RoutingPolicy RRSetRoutingPolicyPtrInput `pulumi:"routingPolicy"`
	// As defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1) -- see examples.
	Rrdatas pulumi.StringArrayInput `pulumi:"rrdatas"`
	// As defined in RFC 4034 (section 3.2).
	SignatureRrdatas pulumi.StringArrayInput `pulumi:"signatureRrdatas"`
	// Number of seconds that this ResourceRecordSet can be cached by resolvers.
	Ttl pulumi.IntPtrInput `pulumi:"ttl"`
	// The identifier of a supported record type. See the list of Supported DNS record types.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ResourceRecordSetTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRecordSetType)(nil)).Elem()
}

func (i ResourceRecordSetTypeArgs) ToResourceRecordSetTypeOutput() ResourceRecordSetTypeOutput {
	return i.ToResourceRecordSetTypeOutputWithContext(context.Background())
}

func (i ResourceRecordSetTypeArgs) ToResourceRecordSetTypeOutputWithContext(ctx context.Context) ResourceRecordSetTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRecordSetTypeOutput)
}

// ResourceRecordSetTypeArrayInput is an input type that accepts ResourceRecordSetTypeArray and ResourceRecordSetTypeArrayOutput values.
// You can construct a concrete instance of `ResourceRecordSetTypeArrayInput` via:
//
//          ResourceRecordSetTypeArray{ ResourceRecordSetTypeArgs{...} }
type ResourceRecordSetTypeArrayInput interface {
	pulumi.Input

	ToResourceRecordSetTypeArrayOutput() ResourceRecordSetTypeArrayOutput
	ToResourceRecordSetTypeArrayOutputWithContext(context.Context) ResourceRecordSetTypeArrayOutput
}

type ResourceRecordSetTypeArray []ResourceRecordSetTypeInput

func (ResourceRecordSetTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceRecordSetType)(nil)).Elem()
}

func (i ResourceRecordSetTypeArray) ToResourceRecordSetTypeArrayOutput() ResourceRecordSetTypeArrayOutput {
	return i.ToResourceRecordSetTypeArrayOutputWithContext(context.Background())
}

func (i ResourceRecordSetTypeArray) ToResourceRecordSetTypeArrayOutputWithContext(ctx context.Context) ResourceRecordSetTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRecordSetTypeArrayOutput)
}

// A unit of data that is returned by the DNS servers.
type ResourceRecordSetTypeOutput struct{ *pulumi.OutputState }

func (ResourceRecordSetTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRecordSetType)(nil)).Elem()
}

func (o ResourceRecordSetTypeOutput) ToResourceRecordSetTypeOutput() ResourceRecordSetTypeOutput {
	return o
}

func (o ResourceRecordSetTypeOutput) ToResourceRecordSetTypeOutputWithContext(ctx context.Context) ResourceRecordSetTypeOutput {
	return o
}

func (o ResourceRecordSetTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceRecordSetType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// For example, www.example.com.
func (o ResourceRecordSetTypeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceRecordSetType) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Configures dynamic query responses based on geo location of querying user or a weighted round robin based routing policy. A ResourceRecordSet should only have either rrdata (static) or routing_policy (dynamic). An error is returned otherwise.
func (o ResourceRecordSetTypeOutput) RoutingPolicy() RRSetRoutingPolicyPtrOutput {
	return o.ApplyT(func(v ResourceRecordSetType) *RRSetRoutingPolicy { return v.RoutingPolicy }).(RRSetRoutingPolicyPtrOutput)
}

// As defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1) -- see examples.
func (o ResourceRecordSetTypeOutput) Rrdatas() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResourceRecordSetType) []string { return v.Rrdatas }).(pulumi.StringArrayOutput)
}

// As defined in RFC 4034 (section 3.2).
func (o ResourceRecordSetTypeOutput) SignatureRrdatas() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResourceRecordSetType) []string { return v.SignatureRrdatas }).(pulumi.StringArrayOutput)
}

// Number of seconds that this ResourceRecordSet can be cached by resolvers.
func (o ResourceRecordSetTypeOutput) Ttl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceRecordSetType) *int { return v.Ttl }).(pulumi.IntPtrOutput)
}

// The identifier of a supported record type. See the list of Supported DNS record types.
func (o ResourceRecordSetTypeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceRecordSetType) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ResourceRecordSetTypeArrayOutput struct{ *pulumi.OutputState }

func (ResourceRecordSetTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceRecordSetType)(nil)).Elem()
}

func (o ResourceRecordSetTypeArrayOutput) ToResourceRecordSetTypeArrayOutput() ResourceRecordSetTypeArrayOutput {
	return o
}

func (o ResourceRecordSetTypeArrayOutput) ToResourceRecordSetTypeArrayOutputWithContext(ctx context.Context) ResourceRecordSetTypeArrayOutput {
	return o
}

func (o ResourceRecordSetTypeArrayOutput) Index(i pulumi.IntInput) ResourceRecordSetTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceRecordSetType {
		return vs[0].([]ResourceRecordSetType)[vs[1].(int)]
	}).(ResourceRecordSetTypeOutput)
}

// A unit of data that is returned by the DNS servers.
type ResourceRecordSetResponse struct {
	Kind string `pulumi:"kind"`
	// For example, www.example.com.
	Name string `pulumi:"name"`
	// Configures dynamic query responses based on geo location of querying user or a weighted round robin based routing policy. A ResourceRecordSet should only have either rrdata (static) or routing_policy (dynamic). An error is returned otherwise.
	RoutingPolicy RRSetRoutingPolicyResponse `pulumi:"routingPolicy"`
	// As defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1) -- see examples.
	Rrdatas []string `pulumi:"rrdatas"`
	// As defined in RFC 4034 (section 3.2).
	SignatureRrdatas []string `pulumi:"signatureRrdatas"`
	// Number of seconds that this ResourceRecordSet can be cached by resolvers.
	Ttl int `pulumi:"ttl"`
	// The identifier of a supported record type. See the list of Supported DNS record types.
	Type string `pulumi:"type"`
}

// ResourceRecordSetResponseInput is an input type that accepts ResourceRecordSetResponseArgs and ResourceRecordSetResponseOutput values.
// You can construct a concrete instance of `ResourceRecordSetResponseInput` via:
//
//          ResourceRecordSetResponseArgs{...}
type ResourceRecordSetResponseInput interface {
	pulumi.Input

	ToResourceRecordSetResponseOutput() ResourceRecordSetResponseOutput
	ToResourceRecordSetResponseOutputWithContext(context.Context) ResourceRecordSetResponseOutput
}

// A unit of data that is returned by the DNS servers.
type ResourceRecordSetResponseArgs struct {
	Kind pulumi.StringInput `pulumi:"kind"`
	// For example, www.example.com.
	Name pulumi.StringInput `pulumi:"name"`
	// Configures dynamic query responses based on geo location of querying user or a weighted round robin based routing policy. A ResourceRecordSet should only have either rrdata (static) or routing_policy (dynamic). An error is returned otherwise.
	RoutingPolicy RRSetRoutingPolicyResponseInput `pulumi:"routingPolicy"`
	// As defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1) -- see examples.
	Rrdatas pulumi.StringArrayInput `pulumi:"rrdatas"`
	// As defined in RFC 4034 (section 3.2).
	SignatureRrdatas pulumi.StringArrayInput `pulumi:"signatureRrdatas"`
	// Number of seconds that this ResourceRecordSet can be cached by resolvers.
	Ttl pulumi.IntInput `pulumi:"ttl"`
	// The identifier of a supported record type. See the list of Supported DNS record types.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ResourceRecordSetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRecordSetResponse)(nil)).Elem()
}

func (i ResourceRecordSetResponseArgs) ToResourceRecordSetResponseOutput() ResourceRecordSetResponseOutput {
	return i.ToResourceRecordSetResponseOutputWithContext(context.Background())
}

func (i ResourceRecordSetResponseArgs) ToResourceRecordSetResponseOutputWithContext(ctx context.Context) ResourceRecordSetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRecordSetResponseOutput)
}

// ResourceRecordSetResponseArrayInput is an input type that accepts ResourceRecordSetResponseArray and ResourceRecordSetResponseArrayOutput values.
// You can construct a concrete instance of `ResourceRecordSetResponseArrayInput` via:
//
//          ResourceRecordSetResponseArray{ ResourceRecordSetResponseArgs{...} }
type ResourceRecordSetResponseArrayInput interface {
	pulumi.Input

	ToResourceRecordSetResponseArrayOutput() ResourceRecordSetResponseArrayOutput
	ToResourceRecordSetResponseArrayOutputWithContext(context.Context) ResourceRecordSetResponseArrayOutput
}

type ResourceRecordSetResponseArray []ResourceRecordSetResponseInput

func (ResourceRecordSetResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceRecordSetResponse)(nil)).Elem()
}

func (i ResourceRecordSetResponseArray) ToResourceRecordSetResponseArrayOutput() ResourceRecordSetResponseArrayOutput {
	return i.ToResourceRecordSetResponseArrayOutputWithContext(context.Background())
}

func (i ResourceRecordSetResponseArray) ToResourceRecordSetResponseArrayOutputWithContext(ctx context.Context) ResourceRecordSetResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRecordSetResponseArrayOutput)
}

// A unit of data that is returned by the DNS servers.
type ResourceRecordSetResponseOutput struct{ *pulumi.OutputState }

func (ResourceRecordSetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRecordSetResponse)(nil)).Elem()
}

func (o ResourceRecordSetResponseOutput) ToResourceRecordSetResponseOutput() ResourceRecordSetResponseOutput {
	return o
}

func (o ResourceRecordSetResponseOutput) ToResourceRecordSetResponseOutputWithContext(ctx context.Context) ResourceRecordSetResponseOutput {
	return o
}

func (o ResourceRecordSetResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceRecordSetResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// For example, www.example.com.
func (o ResourceRecordSetResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceRecordSetResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Configures dynamic query responses based on geo location of querying user or a weighted round robin based routing policy. A ResourceRecordSet should only have either rrdata (static) or routing_policy (dynamic). An error is returned otherwise.
func (o ResourceRecordSetResponseOutput) RoutingPolicy() RRSetRoutingPolicyResponseOutput {
	return o.ApplyT(func(v ResourceRecordSetResponse) RRSetRoutingPolicyResponse { return v.RoutingPolicy }).(RRSetRoutingPolicyResponseOutput)
}

// As defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1) -- see examples.
func (o ResourceRecordSetResponseOutput) Rrdatas() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResourceRecordSetResponse) []string { return v.Rrdatas }).(pulumi.StringArrayOutput)
}

// As defined in RFC 4034 (section 3.2).
func (o ResourceRecordSetResponseOutput) SignatureRrdatas() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResourceRecordSetResponse) []string { return v.SignatureRrdatas }).(pulumi.StringArrayOutput)
}

// Number of seconds that this ResourceRecordSet can be cached by resolvers.
func (o ResourceRecordSetResponseOutput) Ttl() pulumi.IntOutput {
	return o.ApplyT(func(v ResourceRecordSetResponse) int { return v.Ttl }).(pulumi.IntOutput)
}

// The identifier of a supported record type. See the list of Supported DNS record types.
func (o ResourceRecordSetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceRecordSetResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ResourceRecordSetResponseArrayOutput struct{ *pulumi.OutputState }

func (ResourceRecordSetResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceRecordSetResponse)(nil)).Elem()
}

func (o ResourceRecordSetResponseArrayOutput) ToResourceRecordSetResponseArrayOutput() ResourceRecordSetResponseArrayOutput {
	return o
}

func (o ResourceRecordSetResponseArrayOutput) ToResourceRecordSetResponseArrayOutputWithContext(ctx context.Context) ResourceRecordSetResponseArrayOutput {
	return o
}

func (o ResourceRecordSetResponseArrayOutput) Index(i pulumi.IntInput) ResourceRecordSetResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceRecordSetResponse {
		return vs[0].([]ResourceRecordSetResponse)[vs[1].(int)]
	}).(ResourceRecordSetResponseOutput)
}

type ResponsePolicyGKECluster struct {
	// The resource name of the cluster to bind this response policy to. This should be specified in the format like: projects/*/locations/*/clusters/*. This is referenced from GKE projects.locations.clusters.get API: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/get
	GkeClusterName *string `pulumi:"gkeClusterName"`
	Kind           *string `pulumi:"kind"`
}

// ResponsePolicyGKEClusterInput is an input type that accepts ResponsePolicyGKEClusterArgs and ResponsePolicyGKEClusterOutput values.
// You can construct a concrete instance of `ResponsePolicyGKEClusterInput` via:
//
//          ResponsePolicyGKEClusterArgs{...}
type ResponsePolicyGKEClusterInput interface {
	pulumi.Input

	ToResponsePolicyGKEClusterOutput() ResponsePolicyGKEClusterOutput
	ToResponsePolicyGKEClusterOutputWithContext(context.Context) ResponsePolicyGKEClusterOutput
}

type ResponsePolicyGKEClusterArgs struct {
	// The resource name of the cluster to bind this response policy to. This should be specified in the format like: projects/*/locations/*/clusters/*. This is referenced from GKE projects.locations.clusters.get API: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/get
	GkeClusterName pulumi.StringPtrInput `pulumi:"gkeClusterName"`
	Kind           pulumi.StringPtrInput `pulumi:"kind"`
}

func (ResponsePolicyGKEClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsePolicyGKECluster)(nil)).Elem()
}

func (i ResponsePolicyGKEClusterArgs) ToResponsePolicyGKEClusterOutput() ResponsePolicyGKEClusterOutput {
	return i.ToResponsePolicyGKEClusterOutputWithContext(context.Background())
}

func (i ResponsePolicyGKEClusterArgs) ToResponsePolicyGKEClusterOutputWithContext(ctx context.Context) ResponsePolicyGKEClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResponsePolicyGKEClusterOutput)
}

// ResponsePolicyGKEClusterArrayInput is an input type that accepts ResponsePolicyGKEClusterArray and ResponsePolicyGKEClusterArrayOutput values.
// You can construct a concrete instance of `ResponsePolicyGKEClusterArrayInput` via:
//
//          ResponsePolicyGKEClusterArray{ ResponsePolicyGKEClusterArgs{...} }
type ResponsePolicyGKEClusterArrayInput interface {
	pulumi.Input

	ToResponsePolicyGKEClusterArrayOutput() ResponsePolicyGKEClusterArrayOutput
	ToResponsePolicyGKEClusterArrayOutputWithContext(context.Context) ResponsePolicyGKEClusterArrayOutput
}

type ResponsePolicyGKEClusterArray []ResponsePolicyGKEClusterInput

func (ResponsePolicyGKEClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResponsePolicyGKECluster)(nil)).Elem()
}

func (i ResponsePolicyGKEClusterArray) ToResponsePolicyGKEClusterArrayOutput() ResponsePolicyGKEClusterArrayOutput {
	return i.ToResponsePolicyGKEClusterArrayOutputWithContext(context.Background())
}

func (i ResponsePolicyGKEClusterArray) ToResponsePolicyGKEClusterArrayOutputWithContext(ctx context.Context) ResponsePolicyGKEClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResponsePolicyGKEClusterArrayOutput)
}

type ResponsePolicyGKEClusterOutput struct{ *pulumi.OutputState }

func (ResponsePolicyGKEClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsePolicyGKECluster)(nil)).Elem()
}

func (o ResponsePolicyGKEClusterOutput) ToResponsePolicyGKEClusterOutput() ResponsePolicyGKEClusterOutput {
	return o
}

func (o ResponsePolicyGKEClusterOutput) ToResponsePolicyGKEClusterOutputWithContext(ctx context.Context) ResponsePolicyGKEClusterOutput {
	return o
}

// The resource name of the cluster to bind this response policy to. This should be specified in the format like: projects/*/locations/*/clusters/*. This is referenced from GKE projects.locations.clusters.get API: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/get
func (o ResponsePolicyGKEClusterOutput) GkeClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResponsePolicyGKECluster) *string { return v.GkeClusterName }).(pulumi.StringPtrOutput)
}

func (o ResponsePolicyGKEClusterOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResponsePolicyGKECluster) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

type ResponsePolicyGKEClusterArrayOutput struct{ *pulumi.OutputState }

func (ResponsePolicyGKEClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResponsePolicyGKECluster)(nil)).Elem()
}

func (o ResponsePolicyGKEClusterArrayOutput) ToResponsePolicyGKEClusterArrayOutput() ResponsePolicyGKEClusterArrayOutput {
	return o
}

func (o ResponsePolicyGKEClusterArrayOutput) ToResponsePolicyGKEClusterArrayOutputWithContext(ctx context.Context) ResponsePolicyGKEClusterArrayOutput {
	return o
}

func (o ResponsePolicyGKEClusterArrayOutput) Index(i pulumi.IntInput) ResponsePolicyGKEClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResponsePolicyGKECluster {
		return vs[0].([]ResponsePolicyGKECluster)[vs[1].(int)]
	}).(ResponsePolicyGKEClusterOutput)
}

type ResponsePolicyGKEClusterResponse struct {
	// The resource name of the cluster to bind this response policy to. This should be specified in the format like: projects/*/locations/*/clusters/*. This is referenced from GKE projects.locations.clusters.get API: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/get
	GkeClusterName string `pulumi:"gkeClusterName"`
	Kind           string `pulumi:"kind"`
}

// ResponsePolicyGKEClusterResponseInput is an input type that accepts ResponsePolicyGKEClusterResponseArgs and ResponsePolicyGKEClusterResponseOutput values.
// You can construct a concrete instance of `ResponsePolicyGKEClusterResponseInput` via:
//
//          ResponsePolicyGKEClusterResponseArgs{...}
type ResponsePolicyGKEClusterResponseInput interface {
	pulumi.Input

	ToResponsePolicyGKEClusterResponseOutput() ResponsePolicyGKEClusterResponseOutput
	ToResponsePolicyGKEClusterResponseOutputWithContext(context.Context) ResponsePolicyGKEClusterResponseOutput
}

type ResponsePolicyGKEClusterResponseArgs struct {
	// The resource name of the cluster to bind this response policy to. This should be specified in the format like: projects/*/locations/*/clusters/*. This is referenced from GKE projects.locations.clusters.get API: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/get
	GkeClusterName pulumi.StringInput `pulumi:"gkeClusterName"`
	Kind           pulumi.StringInput `pulumi:"kind"`
}

func (ResponsePolicyGKEClusterResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsePolicyGKEClusterResponse)(nil)).Elem()
}

func (i ResponsePolicyGKEClusterResponseArgs) ToResponsePolicyGKEClusterResponseOutput() ResponsePolicyGKEClusterResponseOutput {
	return i.ToResponsePolicyGKEClusterResponseOutputWithContext(context.Background())
}

func (i ResponsePolicyGKEClusterResponseArgs) ToResponsePolicyGKEClusterResponseOutputWithContext(ctx context.Context) ResponsePolicyGKEClusterResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResponsePolicyGKEClusterResponseOutput)
}

// ResponsePolicyGKEClusterResponseArrayInput is an input type that accepts ResponsePolicyGKEClusterResponseArray and ResponsePolicyGKEClusterResponseArrayOutput values.
// You can construct a concrete instance of `ResponsePolicyGKEClusterResponseArrayInput` via:
//
//          ResponsePolicyGKEClusterResponseArray{ ResponsePolicyGKEClusterResponseArgs{...} }
type ResponsePolicyGKEClusterResponseArrayInput interface {
	pulumi.Input

	ToResponsePolicyGKEClusterResponseArrayOutput() ResponsePolicyGKEClusterResponseArrayOutput
	ToResponsePolicyGKEClusterResponseArrayOutputWithContext(context.Context) ResponsePolicyGKEClusterResponseArrayOutput
}

type ResponsePolicyGKEClusterResponseArray []ResponsePolicyGKEClusterResponseInput

func (ResponsePolicyGKEClusterResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResponsePolicyGKEClusterResponse)(nil)).Elem()
}

func (i ResponsePolicyGKEClusterResponseArray) ToResponsePolicyGKEClusterResponseArrayOutput() ResponsePolicyGKEClusterResponseArrayOutput {
	return i.ToResponsePolicyGKEClusterResponseArrayOutputWithContext(context.Background())
}

func (i ResponsePolicyGKEClusterResponseArray) ToResponsePolicyGKEClusterResponseArrayOutputWithContext(ctx context.Context) ResponsePolicyGKEClusterResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResponsePolicyGKEClusterResponseArrayOutput)
}

type ResponsePolicyGKEClusterResponseOutput struct{ *pulumi.OutputState }

func (ResponsePolicyGKEClusterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsePolicyGKEClusterResponse)(nil)).Elem()
}

func (o ResponsePolicyGKEClusterResponseOutput) ToResponsePolicyGKEClusterResponseOutput() ResponsePolicyGKEClusterResponseOutput {
	return o
}

func (o ResponsePolicyGKEClusterResponseOutput) ToResponsePolicyGKEClusterResponseOutputWithContext(ctx context.Context) ResponsePolicyGKEClusterResponseOutput {
	return o
}

// The resource name of the cluster to bind this response policy to. This should be specified in the format like: projects/*/locations/*/clusters/*. This is referenced from GKE projects.locations.clusters.get API: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/get
func (o ResponsePolicyGKEClusterResponseOutput) GkeClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v ResponsePolicyGKEClusterResponse) string { return v.GkeClusterName }).(pulumi.StringOutput)
}

func (o ResponsePolicyGKEClusterResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v ResponsePolicyGKEClusterResponse) string { return v.Kind }).(pulumi.StringOutput)
}

type ResponsePolicyGKEClusterResponseArrayOutput struct{ *pulumi.OutputState }

func (ResponsePolicyGKEClusterResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResponsePolicyGKEClusterResponse)(nil)).Elem()
}

func (o ResponsePolicyGKEClusterResponseArrayOutput) ToResponsePolicyGKEClusterResponseArrayOutput() ResponsePolicyGKEClusterResponseArrayOutput {
	return o
}

func (o ResponsePolicyGKEClusterResponseArrayOutput) ToResponsePolicyGKEClusterResponseArrayOutputWithContext(ctx context.Context) ResponsePolicyGKEClusterResponseArrayOutput {
	return o
}

func (o ResponsePolicyGKEClusterResponseArrayOutput) Index(i pulumi.IntInput) ResponsePolicyGKEClusterResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResponsePolicyGKEClusterResponse {
		return vs[0].([]ResponsePolicyGKEClusterResponse)[vs[1].(int)]
	}).(ResponsePolicyGKEClusterResponseOutput)
}

type ResponsePolicyNetwork struct {
	Kind *string `pulumi:"kind"`
	// The fully qualified URL of the VPC network to bind to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
	NetworkUrl *string `pulumi:"networkUrl"`
}

// ResponsePolicyNetworkInput is an input type that accepts ResponsePolicyNetworkArgs and ResponsePolicyNetworkOutput values.
// You can construct a concrete instance of `ResponsePolicyNetworkInput` via:
//
//          ResponsePolicyNetworkArgs{...}
type ResponsePolicyNetworkInput interface {
	pulumi.Input

	ToResponsePolicyNetworkOutput() ResponsePolicyNetworkOutput
	ToResponsePolicyNetworkOutputWithContext(context.Context) ResponsePolicyNetworkOutput
}

type ResponsePolicyNetworkArgs struct {
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// The fully qualified URL of the VPC network to bind to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
	NetworkUrl pulumi.StringPtrInput `pulumi:"networkUrl"`
}

func (ResponsePolicyNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsePolicyNetwork)(nil)).Elem()
}

func (i ResponsePolicyNetworkArgs) ToResponsePolicyNetworkOutput() ResponsePolicyNetworkOutput {
	return i.ToResponsePolicyNetworkOutputWithContext(context.Background())
}

func (i ResponsePolicyNetworkArgs) ToResponsePolicyNetworkOutputWithContext(ctx context.Context) ResponsePolicyNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResponsePolicyNetworkOutput)
}

// ResponsePolicyNetworkArrayInput is an input type that accepts ResponsePolicyNetworkArray and ResponsePolicyNetworkArrayOutput values.
// You can construct a concrete instance of `ResponsePolicyNetworkArrayInput` via:
//
//          ResponsePolicyNetworkArray{ ResponsePolicyNetworkArgs{...} }
type ResponsePolicyNetworkArrayInput interface {
	pulumi.Input

	ToResponsePolicyNetworkArrayOutput() ResponsePolicyNetworkArrayOutput
	ToResponsePolicyNetworkArrayOutputWithContext(context.Context) ResponsePolicyNetworkArrayOutput
}

type ResponsePolicyNetworkArray []ResponsePolicyNetworkInput

func (ResponsePolicyNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResponsePolicyNetwork)(nil)).Elem()
}

func (i ResponsePolicyNetworkArray) ToResponsePolicyNetworkArrayOutput() ResponsePolicyNetworkArrayOutput {
	return i.ToResponsePolicyNetworkArrayOutputWithContext(context.Background())
}

func (i ResponsePolicyNetworkArray) ToResponsePolicyNetworkArrayOutputWithContext(ctx context.Context) ResponsePolicyNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResponsePolicyNetworkArrayOutput)
}

type ResponsePolicyNetworkOutput struct{ *pulumi.OutputState }

func (ResponsePolicyNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsePolicyNetwork)(nil)).Elem()
}

func (o ResponsePolicyNetworkOutput) ToResponsePolicyNetworkOutput() ResponsePolicyNetworkOutput {
	return o
}

func (o ResponsePolicyNetworkOutput) ToResponsePolicyNetworkOutputWithContext(ctx context.Context) ResponsePolicyNetworkOutput {
	return o
}

func (o ResponsePolicyNetworkOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResponsePolicyNetwork) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// The fully qualified URL of the VPC network to bind to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
func (o ResponsePolicyNetworkOutput) NetworkUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResponsePolicyNetwork) *string { return v.NetworkUrl }).(pulumi.StringPtrOutput)
}

type ResponsePolicyNetworkArrayOutput struct{ *pulumi.OutputState }

func (ResponsePolicyNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResponsePolicyNetwork)(nil)).Elem()
}

func (o ResponsePolicyNetworkArrayOutput) ToResponsePolicyNetworkArrayOutput() ResponsePolicyNetworkArrayOutput {
	return o
}

func (o ResponsePolicyNetworkArrayOutput) ToResponsePolicyNetworkArrayOutputWithContext(ctx context.Context) ResponsePolicyNetworkArrayOutput {
	return o
}

func (o ResponsePolicyNetworkArrayOutput) Index(i pulumi.IntInput) ResponsePolicyNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResponsePolicyNetwork {
		return vs[0].([]ResponsePolicyNetwork)[vs[1].(int)]
	}).(ResponsePolicyNetworkOutput)
}

type ResponsePolicyNetworkResponse struct {
	Kind string `pulumi:"kind"`
	// The fully qualified URL of the VPC network to bind to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
	NetworkUrl string `pulumi:"networkUrl"`
}

// ResponsePolicyNetworkResponseInput is an input type that accepts ResponsePolicyNetworkResponseArgs and ResponsePolicyNetworkResponseOutput values.
// You can construct a concrete instance of `ResponsePolicyNetworkResponseInput` via:
//
//          ResponsePolicyNetworkResponseArgs{...}
type ResponsePolicyNetworkResponseInput interface {
	pulumi.Input

	ToResponsePolicyNetworkResponseOutput() ResponsePolicyNetworkResponseOutput
	ToResponsePolicyNetworkResponseOutputWithContext(context.Context) ResponsePolicyNetworkResponseOutput
}

type ResponsePolicyNetworkResponseArgs struct {
	Kind pulumi.StringInput `pulumi:"kind"`
	// The fully qualified URL of the VPC network to bind to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
	NetworkUrl pulumi.StringInput `pulumi:"networkUrl"`
}

func (ResponsePolicyNetworkResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsePolicyNetworkResponse)(nil)).Elem()
}

func (i ResponsePolicyNetworkResponseArgs) ToResponsePolicyNetworkResponseOutput() ResponsePolicyNetworkResponseOutput {
	return i.ToResponsePolicyNetworkResponseOutputWithContext(context.Background())
}

func (i ResponsePolicyNetworkResponseArgs) ToResponsePolicyNetworkResponseOutputWithContext(ctx context.Context) ResponsePolicyNetworkResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResponsePolicyNetworkResponseOutput)
}

// ResponsePolicyNetworkResponseArrayInput is an input type that accepts ResponsePolicyNetworkResponseArray and ResponsePolicyNetworkResponseArrayOutput values.
// You can construct a concrete instance of `ResponsePolicyNetworkResponseArrayInput` via:
//
//          ResponsePolicyNetworkResponseArray{ ResponsePolicyNetworkResponseArgs{...} }
type ResponsePolicyNetworkResponseArrayInput interface {
	pulumi.Input

	ToResponsePolicyNetworkResponseArrayOutput() ResponsePolicyNetworkResponseArrayOutput
	ToResponsePolicyNetworkResponseArrayOutputWithContext(context.Context) ResponsePolicyNetworkResponseArrayOutput
}

type ResponsePolicyNetworkResponseArray []ResponsePolicyNetworkResponseInput

func (ResponsePolicyNetworkResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResponsePolicyNetworkResponse)(nil)).Elem()
}

func (i ResponsePolicyNetworkResponseArray) ToResponsePolicyNetworkResponseArrayOutput() ResponsePolicyNetworkResponseArrayOutput {
	return i.ToResponsePolicyNetworkResponseArrayOutputWithContext(context.Background())
}

func (i ResponsePolicyNetworkResponseArray) ToResponsePolicyNetworkResponseArrayOutputWithContext(ctx context.Context) ResponsePolicyNetworkResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResponsePolicyNetworkResponseArrayOutput)
}

type ResponsePolicyNetworkResponseOutput struct{ *pulumi.OutputState }

func (ResponsePolicyNetworkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsePolicyNetworkResponse)(nil)).Elem()
}

func (o ResponsePolicyNetworkResponseOutput) ToResponsePolicyNetworkResponseOutput() ResponsePolicyNetworkResponseOutput {
	return o
}

func (o ResponsePolicyNetworkResponseOutput) ToResponsePolicyNetworkResponseOutputWithContext(ctx context.Context) ResponsePolicyNetworkResponseOutput {
	return o
}

func (o ResponsePolicyNetworkResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v ResponsePolicyNetworkResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// The fully qualified URL of the VPC network to bind to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
func (o ResponsePolicyNetworkResponseOutput) NetworkUrl() pulumi.StringOutput {
	return o.ApplyT(func(v ResponsePolicyNetworkResponse) string { return v.NetworkUrl }).(pulumi.StringOutput)
}

type ResponsePolicyNetworkResponseArrayOutput struct{ *pulumi.OutputState }

func (ResponsePolicyNetworkResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResponsePolicyNetworkResponse)(nil)).Elem()
}

func (o ResponsePolicyNetworkResponseArrayOutput) ToResponsePolicyNetworkResponseArrayOutput() ResponsePolicyNetworkResponseArrayOutput {
	return o
}

func (o ResponsePolicyNetworkResponseArrayOutput) ToResponsePolicyNetworkResponseArrayOutputWithContext(ctx context.Context) ResponsePolicyNetworkResponseArrayOutput {
	return o
}

func (o ResponsePolicyNetworkResponseArrayOutput) Index(i pulumi.IntInput) ResponsePolicyNetworkResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResponsePolicyNetworkResponse {
		return vs[0].([]ResponsePolicyNetworkResponse)[vs[1].(int)]
	}).(ResponsePolicyNetworkResponseOutput)
}

type ResponsePolicyRuleLocalData struct {
	// All resource record sets for this selector, one per resource record type. The name must match the dns_name.
	LocalDatas []ResourceRecordSetType `pulumi:"localDatas"`
}

// ResponsePolicyRuleLocalDataInput is an input type that accepts ResponsePolicyRuleLocalDataArgs and ResponsePolicyRuleLocalDataOutput values.
// You can construct a concrete instance of `ResponsePolicyRuleLocalDataInput` via:
//
//          ResponsePolicyRuleLocalDataArgs{...}
type ResponsePolicyRuleLocalDataInput interface {
	pulumi.Input

	ToResponsePolicyRuleLocalDataOutput() ResponsePolicyRuleLocalDataOutput
	ToResponsePolicyRuleLocalDataOutputWithContext(context.Context) ResponsePolicyRuleLocalDataOutput
}

type ResponsePolicyRuleLocalDataArgs struct {
	// All resource record sets for this selector, one per resource record type. The name must match the dns_name.
	LocalDatas ResourceRecordSetTypeArrayInput `pulumi:"localDatas"`
}

func (ResponsePolicyRuleLocalDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsePolicyRuleLocalData)(nil)).Elem()
}

func (i ResponsePolicyRuleLocalDataArgs) ToResponsePolicyRuleLocalDataOutput() ResponsePolicyRuleLocalDataOutput {
	return i.ToResponsePolicyRuleLocalDataOutputWithContext(context.Background())
}

func (i ResponsePolicyRuleLocalDataArgs) ToResponsePolicyRuleLocalDataOutputWithContext(ctx context.Context) ResponsePolicyRuleLocalDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResponsePolicyRuleLocalDataOutput)
}

func (i ResponsePolicyRuleLocalDataArgs) ToResponsePolicyRuleLocalDataPtrOutput() ResponsePolicyRuleLocalDataPtrOutput {
	return i.ToResponsePolicyRuleLocalDataPtrOutputWithContext(context.Background())
}

func (i ResponsePolicyRuleLocalDataArgs) ToResponsePolicyRuleLocalDataPtrOutputWithContext(ctx context.Context) ResponsePolicyRuleLocalDataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResponsePolicyRuleLocalDataOutput).ToResponsePolicyRuleLocalDataPtrOutputWithContext(ctx)
}

// ResponsePolicyRuleLocalDataPtrInput is an input type that accepts ResponsePolicyRuleLocalDataArgs, ResponsePolicyRuleLocalDataPtr and ResponsePolicyRuleLocalDataPtrOutput values.
// You can construct a concrete instance of `ResponsePolicyRuleLocalDataPtrInput` via:
//
//          ResponsePolicyRuleLocalDataArgs{...}
//
//  or:
//
//          nil
type ResponsePolicyRuleLocalDataPtrInput interface {
	pulumi.Input

	ToResponsePolicyRuleLocalDataPtrOutput() ResponsePolicyRuleLocalDataPtrOutput
	ToResponsePolicyRuleLocalDataPtrOutputWithContext(context.Context) ResponsePolicyRuleLocalDataPtrOutput
}

type responsePolicyRuleLocalDataPtrType ResponsePolicyRuleLocalDataArgs

func ResponsePolicyRuleLocalDataPtr(v *ResponsePolicyRuleLocalDataArgs) ResponsePolicyRuleLocalDataPtrInput {
	return (*responsePolicyRuleLocalDataPtrType)(v)
}

func (*responsePolicyRuleLocalDataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResponsePolicyRuleLocalData)(nil)).Elem()
}

func (i *responsePolicyRuleLocalDataPtrType) ToResponsePolicyRuleLocalDataPtrOutput() ResponsePolicyRuleLocalDataPtrOutput {
	return i.ToResponsePolicyRuleLocalDataPtrOutputWithContext(context.Background())
}

func (i *responsePolicyRuleLocalDataPtrType) ToResponsePolicyRuleLocalDataPtrOutputWithContext(ctx context.Context) ResponsePolicyRuleLocalDataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResponsePolicyRuleLocalDataPtrOutput)
}

type ResponsePolicyRuleLocalDataOutput struct{ *pulumi.OutputState }

func (ResponsePolicyRuleLocalDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsePolicyRuleLocalData)(nil)).Elem()
}

func (o ResponsePolicyRuleLocalDataOutput) ToResponsePolicyRuleLocalDataOutput() ResponsePolicyRuleLocalDataOutput {
	return o
}

func (o ResponsePolicyRuleLocalDataOutput) ToResponsePolicyRuleLocalDataOutputWithContext(ctx context.Context) ResponsePolicyRuleLocalDataOutput {
	return o
}

func (o ResponsePolicyRuleLocalDataOutput) ToResponsePolicyRuleLocalDataPtrOutput() ResponsePolicyRuleLocalDataPtrOutput {
	return o.ToResponsePolicyRuleLocalDataPtrOutputWithContext(context.Background())
}

func (o ResponsePolicyRuleLocalDataOutput) ToResponsePolicyRuleLocalDataPtrOutputWithContext(ctx context.Context) ResponsePolicyRuleLocalDataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResponsePolicyRuleLocalData) *ResponsePolicyRuleLocalData {
		return &v
	}).(ResponsePolicyRuleLocalDataPtrOutput)
}

// All resource record sets for this selector, one per resource record type. The name must match the dns_name.
func (o ResponsePolicyRuleLocalDataOutput) LocalDatas() ResourceRecordSetTypeArrayOutput {
	return o.ApplyT(func(v ResponsePolicyRuleLocalData) []ResourceRecordSetType { return v.LocalDatas }).(ResourceRecordSetTypeArrayOutput)
}

type ResponsePolicyRuleLocalDataPtrOutput struct{ *pulumi.OutputState }

func (ResponsePolicyRuleLocalDataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResponsePolicyRuleLocalData)(nil)).Elem()
}

func (o ResponsePolicyRuleLocalDataPtrOutput) ToResponsePolicyRuleLocalDataPtrOutput() ResponsePolicyRuleLocalDataPtrOutput {
	return o
}

func (o ResponsePolicyRuleLocalDataPtrOutput) ToResponsePolicyRuleLocalDataPtrOutputWithContext(ctx context.Context) ResponsePolicyRuleLocalDataPtrOutput {
	return o
}

func (o ResponsePolicyRuleLocalDataPtrOutput) Elem() ResponsePolicyRuleLocalDataOutput {
	return o.ApplyT(func(v *ResponsePolicyRuleLocalData) ResponsePolicyRuleLocalData {
		if v != nil {
			return *v
		}
		var ret ResponsePolicyRuleLocalData
		return ret
	}).(ResponsePolicyRuleLocalDataOutput)
}

// All resource record sets for this selector, one per resource record type. The name must match the dns_name.
func (o ResponsePolicyRuleLocalDataPtrOutput) LocalDatas() ResourceRecordSetTypeArrayOutput {
	return o.ApplyT(func(v *ResponsePolicyRuleLocalData) []ResourceRecordSetType {
		if v == nil {
			return nil
		}
		return v.LocalDatas
	}).(ResourceRecordSetTypeArrayOutput)
}

type ResponsePolicyRuleLocalDataResponse struct {
	// All resource record sets for this selector, one per resource record type. The name must match the dns_name.
	LocalDatas []ResourceRecordSetResponse `pulumi:"localDatas"`
}

// ResponsePolicyRuleLocalDataResponseInput is an input type that accepts ResponsePolicyRuleLocalDataResponseArgs and ResponsePolicyRuleLocalDataResponseOutput values.
// You can construct a concrete instance of `ResponsePolicyRuleLocalDataResponseInput` via:
//
//          ResponsePolicyRuleLocalDataResponseArgs{...}
type ResponsePolicyRuleLocalDataResponseInput interface {
	pulumi.Input

	ToResponsePolicyRuleLocalDataResponseOutput() ResponsePolicyRuleLocalDataResponseOutput
	ToResponsePolicyRuleLocalDataResponseOutputWithContext(context.Context) ResponsePolicyRuleLocalDataResponseOutput
}

type ResponsePolicyRuleLocalDataResponseArgs struct {
	// All resource record sets for this selector, one per resource record type. The name must match the dns_name.
	LocalDatas ResourceRecordSetResponseArrayInput `pulumi:"localDatas"`
}

func (ResponsePolicyRuleLocalDataResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsePolicyRuleLocalDataResponse)(nil)).Elem()
}

func (i ResponsePolicyRuleLocalDataResponseArgs) ToResponsePolicyRuleLocalDataResponseOutput() ResponsePolicyRuleLocalDataResponseOutput {
	return i.ToResponsePolicyRuleLocalDataResponseOutputWithContext(context.Background())
}

func (i ResponsePolicyRuleLocalDataResponseArgs) ToResponsePolicyRuleLocalDataResponseOutputWithContext(ctx context.Context) ResponsePolicyRuleLocalDataResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResponsePolicyRuleLocalDataResponseOutput)
}

func (i ResponsePolicyRuleLocalDataResponseArgs) ToResponsePolicyRuleLocalDataResponsePtrOutput() ResponsePolicyRuleLocalDataResponsePtrOutput {
	return i.ToResponsePolicyRuleLocalDataResponsePtrOutputWithContext(context.Background())
}

func (i ResponsePolicyRuleLocalDataResponseArgs) ToResponsePolicyRuleLocalDataResponsePtrOutputWithContext(ctx context.Context) ResponsePolicyRuleLocalDataResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResponsePolicyRuleLocalDataResponseOutput).ToResponsePolicyRuleLocalDataResponsePtrOutputWithContext(ctx)
}

// ResponsePolicyRuleLocalDataResponsePtrInput is an input type that accepts ResponsePolicyRuleLocalDataResponseArgs, ResponsePolicyRuleLocalDataResponsePtr and ResponsePolicyRuleLocalDataResponsePtrOutput values.
// You can construct a concrete instance of `ResponsePolicyRuleLocalDataResponsePtrInput` via:
//
//          ResponsePolicyRuleLocalDataResponseArgs{...}
//
//  or:
//
//          nil
type ResponsePolicyRuleLocalDataResponsePtrInput interface {
	pulumi.Input

	ToResponsePolicyRuleLocalDataResponsePtrOutput() ResponsePolicyRuleLocalDataResponsePtrOutput
	ToResponsePolicyRuleLocalDataResponsePtrOutputWithContext(context.Context) ResponsePolicyRuleLocalDataResponsePtrOutput
}

type responsePolicyRuleLocalDataResponsePtrType ResponsePolicyRuleLocalDataResponseArgs

func ResponsePolicyRuleLocalDataResponsePtr(v *ResponsePolicyRuleLocalDataResponseArgs) ResponsePolicyRuleLocalDataResponsePtrInput {
	return (*responsePolicyRuleLocalDataResponsePtrType)(v)
}

func (*responsePolicyRuleLocalDataResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResponsePolicyRuleLocalDataResponse)(nil)).Elem()
}

func (i *responsePolicyRuleLocalDataResponsePtrType) ToResponsePolicyRuleLocalDataResponsePtrOutput() ResponsePolicyRuleLocalDataResponsePtrOutput {
	return i.ToResponsePolicyRuleLocalDataResponsePtrOutputWithContext(context.Background())
}

func (i *responsePolicyRuleLocalDataResponsePtrType) ToResponsePolicyRuleLocalDataResponsePtrOutputWithContext(ctx context.Context) ResponsePolicyRuleLocalDataResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResponsePolicyRuleLocalDataResponsePtrOutput)
}

type ResponsePolicyRuleLocalDataResponseOutput struct{ *pulumi.OutputState }

func (ResponsePolicyRuleLocalDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsePolicyRuleLocalDataResponse)(nil)).Elem()
}

func (o ResponsePolicyRuleLocalDataResponseOutput) ToResponsePolicyRuleLocalDataResponseOutput() ResponsePolicyRuleLocalDataResponseOutput {
	return o
}

func (o ResponsePolicyRuleLocalDataResponseOutput) ToResponsePolicyRuleLocalDataResponseOutputWithContext(ctx context.Context) ResponsePolicyRuleLocalDataResponseOutput {
	return o
}

func (o ResponsePolicyRuleLocalDataResponseOutput) ToResponsePolicyRuleLocalDataResponsePtrOutput() ResponsePolicyRuleLocalDataResponsePtrOutput {
	return o.ToResponsePolicyRuleLocalDataResponsePtrOutputWithContext(context.Background())
}

func (o ResponsePolicyRuleLocalDataResponseOutput) ToResponsePolicyRuleLocalDataResponsePtrOutputWithContext(ctx context.Context) ResponsePolicyRuleLocalDataResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResponsePolicyRuleLocalDataResponse) *ResponsePolicyRuleLocalDataResponse {
		return &v
	}).(ResponsePolicyRuleLocalDataResponsePtrOutput)
}

// All resource record sets for this selector, one per resource record type. The name must match the dns_name.
func (o ResponsePolicyRuleLocalDataResponseOutput) LocalDatas() ResourceRecordSetResponseArrayOutput {
	return o.ApplyT(func(v ResponsePolicyRuleLocalDataResponse) []ResourceRecordSetResponse { return v.LocalDatas }).(ResourceRecordSetResponseArrayOutput)
}

type ResponsePolicyRuleLocalDataResponsePtrOutput struct{ *pulumi.OutputState }

func (ResponsePolicyRuleLocalDataResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResponsePolicyRuleLocalDataResponse)(nil)).Elem()
}

func (o ResponsePolicyRuleLocalDataResponsePtrOutput) ToResponsePolicyRuleLocalDataResponsePtrOutput() ResponsePolicyRuleLocalDataResponsePtrOutput {
	return o
}

func (o ResponsePolicyRuleLocalDataResponsePtrOutput) ToResponsePolicyRuleLocalDataResponsePtrOutputWithContext(ctx context.Context) ResponsePolicyRuleLocalDataResponsePtrOutput {
	return o
}

func (o ResponsePolicyRuleLocalDataResponsePtrOutput) Elem() ResponsePolicyRuleLocalDataResponseOutput {
	return o.ApplyT(func(v *ResponsePolicyRuleLocalDataResponse) ResponsePolicyRuleLocalDataResponse {
		if v != nil {
			return *v
		}
		var ret ResponsePolicyRuleLocalDataResponse
		return ret
	}).(ResponsePolicyRuleLocalDataResponseOutput)
}

// All resource record sets for this selector, one per resource record type. The name must match the dns_name.
func (o ResponsePolicyRuleLocalDataResponsePtrOutput) LocalDatas() ResourceRecordSetResponseArrayOutput {
	return o.ApplyT(func(v *ResponsePolicyRuleLocalDataResponse) []ResourceRecordSetResponse {
		if v == nil {
			return nil
		}
		return v.LocalDatas
	}).(ResourceRecordSetResponseArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DnsKeySpecInput)(nil)).Elem(), DnsKeySpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsKeySpecArrayInput)(nil)).Elem(), DnsKeySpecArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsKeySpecResponseInput)(nil)).Elem(), DnsKeySpecResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsKeySpecResponseArrayInput)(nil)).Elem(), DnsKeySpecResponseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZoneCloudLoggingConfigInput)(nil)).Elem(), ManagedZoneCloudLoggingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZoneCloudLoggingConfigPtrInput)(nil)).Elem(), ManagedZoneCloudLoggingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZoneCloudLoggingConfigResponseInput)(nil)).Elem(), ManagedZoneCloudLoggingConfigResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZoneCloudLoggingConfigResponsePtrInput)(nil)).Elem(), ManagedZoneCloudLoggingConfigResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZoneDnsSecConfigInput)(nil)).Elem(), ManagedZoneDnsSecConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZoneDnsSecConfigPtrInput)(nil)).Elem(), ManagedZoneDnsSecConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZoneDnsSecConfigResponseInput)(nil)).Elem(), ManagedZoneDnsSecConfigResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZoneDnsSecConfigResponsePtrInput)(nil)).Elem(), ManagedZoneDnsSecConfigResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZoneForwardingConfigInput)(nil)).Elem(), ManagedZoneForwardingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZoneForwardingConfigPtrInput)(nil)).Elem(), ManagedZoneForwardingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZoneForwardingConfigNameServerTargetInput)(nil)).Elem(), ManagedZoneForwardingConfigNameServerTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZoneForwardingConfigNameServerTargetArrayInput)(nil)).Elem(), ManagedZoneForwardingConfigNameServerTargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZoneForwardingConfigNameServerTargetResponseInput)(nil)).Elem(), ManagedZoneForwardingConfigNameServerTargetResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZoneForwardingConfigNameServerTargetResponseArrayInput)(nil)).Elem(), ManagedZoneForwardingConfigNameServerTargetResponseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZoneForwardingConfigResponseInput)(nil)).Elem(), ManagedZoneForwardingConfigResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZoneForwardingConfigResponsePtrInput)(nil)).Elem(), ManagedZoneForwardingConfigResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZonePeeringConfigInput)(nil)).Elem(), ManagedZonePeeringConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZonePeeringConfigPtrInput)(nil)).Elem(), ManagedZonePeeringConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZonePeeringConfigResponseInput)(nil)).Elem(), ManagedZonePeeringConfigResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZonePeeringConfigResponsePtrInput)(nil)).Elem(), ManagedZonePeeringConfigResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZonePeeringConfigTargetNetworkInput)(nil)).Elem(), ManagedZonePeeringConfigTargetNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZonePeeringConfigTargetNetworkPtrInput)(nil)).Elem(), ManagedZonePeeringConfigTargetNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZonePeeringConfigTargetNetworkResponseInput)(nil)).Elem(), ManagedZonePeeringConfigTargetNetworkResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZonePeeringConfigTargetNetworkResponsePtrInput)(nil)).Elem(), ManagedZonePeeringConfigTargetNetworkResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZonePrivateVisibilityConfigInput)(nil)).Elem(), ManagedZonePrivateVisibilityConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZonePrivateVisibilityConfigPtrInput)(nil)).Elem(), ManagedZonePrivateVisibilityConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZonePrivateVisibilityConfigGKEClusterInput)(nil)).Elem(), ManagedZonePrivateVisibilityConfigGKEClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZonePrivateVisibilityConfigGKEClusterArrayInput)(nil)).Elem(), ManagedZonePrivateVisibilityConfigGKEClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZonePrivateVisibilityConfigGKEClusterResponseInput)(nil)).Elem(), ManagedZonePrivateVisibilityConfigGKEClusterResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZonePrivateVisibilityConfigGKEClusterResponseArrayInput)(nil)).Elem(), ManagedZonePrivateVisibilityConfigGKEClusterResponseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZonePrivateVisibilityConfigNetworkInput)(nil)).Elem(), ManagedZonePrivateVisibilityConfigNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZonePrivateVisibilityConfigNetworkArrayInput)(nil)).Elem(), ManagedZonePrivateVisibilityConfigNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZonePrivateVisibilityConfigNetworkResponseInput)(nil)).Elem(), ManagedZonePrivateVisibilityConfigNetworkResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZonePrivateVisibilityConfigNetworkResponseArrayInput)(nil)).Elem(), ManagedZonePrivateVisibilityConfigNetworkResponseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZonePrivateVisibilityConfigResponseInput)(nil)).Elem(), ManagedZonePrivateVisibilityConfigResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZonePrivateVisibilityConfigResponsePtrInput)(nil)).Elem(), ManagedZonePrivateVisibilityConfigResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZoneReverseLookupConfigInput)(nil)).Elem(), ManagedZoneReverseLookupConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZoneReverseLookupConfigPtrInput)(nil)).Elem(), ManagedZoneReverseLookupConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZoneReverseLookupConfigResponseInput)(nil)).Elem(), ManagedZoneReverseLookupConfigResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZoneReverseLookupConfigResponsePtrInput)(nil)).Elem(), ManagedZoneReverseLookupConfigResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZoneServiceDirectoryConfigInput)(nil)).Elem(), ManagedZoneServiceDirectoryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZoneServiceDirectoryConfigPtrInput)(nil)).Elem(), ManagedZoneServiceDirectoryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZoneServiceDirectoryConfigNamespaceInput)(nil)).Elem(), ManagedZoneServiceDirectoryConfigNamespaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZoneServiceDirectoryConfigNamespacePtrInput)(nil)).Elem(), ManagedZoneServiceDirectoryConfigNamespaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZoneServiceDirectoryConfigNamespaceResponseInput)(nil)).Elem(), ManagedZoneServiceDirectoryConfigNamespaceResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZoneServiceDirectoryConfigNamespaceResponsePtrInput)(nil)).Elem(), ManagedZoneServiceDirectoryConfigNamespaceResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZoneServiceDirectoryConfigResponseInput)(nil)).Elem(), ManagedZoneServiceDirectoryConfigResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZoneServiceDirectoryConfigResponsePtrInput)(nil)).Elem(), ManagedZoneServiceDirectoryConfigResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyAlternativeNameServerConfigInput)(nil)).Elem(), PolicyAlternativeNameServerConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyAlternativeNameServerConfigPtrInput)(nil)).Elem(), PolicyAlternativeNameServerConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyAlternativeNameServerConfigResponseInput)(nil)).Elem(), PolicyAlternativeNameServerConfigResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyAlternativeNameServerConfigResponsePtrInput)(nil)).Elem(), PolicyAlternativeNameServerConfigResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyAlternativeNameServerConfigTargetNameServerInput)(nil)).Elem(), PolicyAlternativeNameServerConfigTargetNameServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyAlternativeNameServerConfigTargetNameServerArrayInput)(nil)).Elem(), PolicyAlternativeNameServerConfigTargetNameServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyAlternativeNameServerConfigTargetNameServerResponseInput)(nil)).Elem(), PolicyAlternativeNameServerConfigTargetNameServerResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyAlternativeNameServerConfigTargetNameServerResponseArrayInput)(nil)).Elem(), PolicyAlternativeNameServerConfigTargetNameServerResponseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyNetworkInput)(nil)).Elem(), PolicyNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyNetworkArrayInput)(nil)).Elem(), PolicyNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyNetworkResponseInput)(nil)).Elem(), PolicyNetworkResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyNetworkResponseArrayInput)(nil)).Elem(), PolicyNetworkResponseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RRSetRoutingPolicyInput)(nil)).Elem(), RRSetRoutingPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RRSetRoutingPolicyPtrInput)(nil)).Elem(), RRSetRoutingPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RRSetRoutingPolicyGeoPolicyInput)(nil)).Elem(), RRSetRoutingPolicyGeoPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RRSetRoutingPolicyGeoPolicyPtrInput)(nil)).Elem(), RRSetRoutingPolicyGeoPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RRSetRoutingPolicyGeoPolicyGeoPolicyItemInput)(nil)).Elem(), RRSetRoutingPolicyGeoPolicyGeoPolicyItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RRSetRoutingPolicyGeoPolicyGeoPolicyItemArrayInput)(nil)).Elem(), RRSetRoutingPolicyGeoPolicyGeoPolicyItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseInput)(nil)).Elem(), RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseArrayInput)(nil)).Elem(), RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RRSetRoutingPolicyGeoPolicyResponseInput)(nil)).Elem(), RRSetRoutingPolicyGeoPolicyResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RRSetRoutingPolicyGeoPolicyResponsePtrInput)(nil)).Elem(), RRSetRoutingPolicyGeoPolicyResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RRSetRoutingPolicyResponseInput)(nil)).Elem(), RRSetRoutingPolicyResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RRSetRoutingPolicyResponsePtrInput)(nil)).Elem(), RRSetRoutingPolicyResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RRSetRoutingPolicyWrrPolicyInput)(nil)).Elem(), RRSetRoutingPolicyWrrPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RRSetRoutingPolicyWrrPolicyPtrInput)(nil)).Elem(), RRSetRoutingPolicyWrrPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RRSetRoutingPolicyWrrPolicyResponseInput)(nil)).Elem(), RRSetRoutingPolicyWrrPolicyResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RRSetRoutingPolicyWrrPolicyResponsePtrInput)(nil)).Elem(), RRSetRoutingPolicyWrrPolicyResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RRSetRoutingPolicyWrrPolicyWrrPolicyItemInput)(nil)).Elem(), RRSetRoutingPolicyWrrPolicyWrrPolicyItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RRSetRoutingPolicyWrrPolicyWrrPolicyItemArrayInput)(nil)).Elem(), RRSetRoutingPolicyWrrPolicyWrrPolicyItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseInput)(nil)).Elem(), RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseArrayInput)(nil)).Elem(), RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceRecordSetTypeInput)(nil)).Elem(), ResourceRecordSetTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceRecordSetTypeArrayInput)(nil)).Elem(), ResourceRecordSetTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceRecordSetResponseInput)(nil)).Elem(), ResourceRecordSetResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceRecordSetResponseArrayInput)(nil)).Elem(), ResourceRecordSetResponseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResponsePolicyGKEClusterInput)(nil)).Elem(), ResponsePolicyGKEClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResponsePolicyGKEClusterArrayInput)(nil)).Elem(), ResponsePolicyGKEClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResponsePolicyGKEClusterResponseInput)(nil)).Elem(), ResponsePolicyGKEClusterResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResponsePolicyGKEClusterResponseArrayInput)(nil)).Elem(), ResponsePolicyGKEClusterResponseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResponsePolicyNetworkInput)(nil)).Elem(), ResponsePolicyNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResponsePolicyNetworkArrayInput)(nil)).Elem(), ResponsePolicyNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResponsePolicyNetworkResponseInput)(nil)).Elem(), ResponsePolicyNetworkResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResponsePolicyNetworkResponseArrayInput)(nil)).Elem(), ResponsePolicyNetworkResponseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResponsePolicyRuleLocalDataInput)(nil)).Elem(), ResponsePolicyRuleLocalDataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResponsePolicyRuleLocalDataPtrInput)(nil)).Elem(), ResponsePolicyRuleLocalDataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResponsePolicyRuleLocalDataResponseInput)(nil)).Elem(), ResponsePolicyRuleLocalDataResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResponsePolicyRuleLocalDataResponsePtrInput)(nil)).Elem(), ResponsePolicyRuleLocalDataResponseArgs{})
	pulumi.RegisterOutputType(DnsKeySpecOutput{})
	pulumi.RegisterOutputType(DnsKeySpecArrayOutput{})
	pulumi.RegisterOutputType(DnsKeySpecResponseOutput{})
	pulumi.RegisterOutputType(DnsKeySpecResponseArrayOutput{})
	pulumi.RegisterOutputType(ManagedZoneCloudLoggingConfigOutput{})
	pulumi.RegisterOutputType(ManagedZoneCloudLoggingConfigPtrOutput{})
	pulumi.RegisterOutputType(ManagedZoneCloudLoggingConfigResponseOutput{})
	pulumi.RegisterOutputType(ManagedZoneCloudLoggingConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedZoneDnsSecConfigOutput{})
	pulumi.RegisterOutputType(ManagedZoneDnsSecConfigPtrOutput{})
	pulumi.RegisterOutputType(ManagedZoneDnsSecConfigResponseOutput{})
	pulumi.RegisterOutputType(ManagedZoneDnsSecConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedZoneForwardingConfigOutput{})
	pulumi.RegisterOutputType(ManagedZoneForwardingConfigPtrOutput{})
	pulumi.RegisterOutputType(ManagedZoneForwardingConfigNameServerTargetOutput{})
	pulumi.RegisterOutputType(ManagedZoneForwardingConfigNameServerTargetArrayOutput{})
	pulumi.RegisterOutputType(ManagedZoneForwardingConfigNameServerTargetResponseOutput{})
	pulumi.RegisterOutputType(ManagedZoneForwardingConfigNameServerTargetResponseArrayOutput{})
	pulumi.RegisterOutputType(ManagedZoneForwardingConfigResponseOutput{})
	pulumi.RegisterOutputType(ManagedZoneForwardingConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedZonePeeringConfigOutput{})
	pulumi.RegisterOutputType(ManagedZonePeeringConfigPtrOutput{})
	pulumi.RegisterOutputType(ManagedZonePeeringConfigResponseOutput{})
	pulumi.RegisterOutputType(ManagedZonePeeringConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedZonePeeringConfigTargetNetworkOutput{})
	pulumi.RegisterOutputType(ManagedZonePeeringConfigTargetNetworkPtrOutput{})
	pulumi.RegisterOutputType(ManagedZonePeeringConfigTargetNetworkResponseOutput{})
	pulumi.RegisterOutputType(ManagedZonePeeringConfigTargetNetworkResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedZonePrivateVisibilityConfigOutput{})
	pulumi.RegisterOutputType(ManagedZonePrivateVisibilityConfigPtrOutput{})
	pulumi.RegisterOutputType(ManagedZonePrivateVisibilityConfigGKEClusterOutput{})
	pulumi.RegisterOutputType(ManagedZonePrivateVisibilityConfigGKEClusterArrayOutput{})
	pulumi.RegisterOutputType(ManagedZonePrivateVisibilityConfigGKEClusterResponseOutput{})
	pulumi.RegisterOutputType(ManagedZonePrivateVisibilityConfigGKEClusterResponseArrayOutput{})
	pulumi.RegisterOutputType(ManagedZonePrivateVisibilityConfigNetworkOutput{})
	pulumi.RegisterOutputType(ManagedZonePrivateVisibilityConfigNetworkArrayOutput{})
	pulumi.RegisterOutputType(ManagedZonePrivateVisibilityConfigNetworkResponseOutput{})
	pulumi.RegisterOutputType(ManagedZonePrivateVisibilityConfigNetworkResponseArrayOutput{})
	pulumi.RegisterOutputType(ManagedZonePrivateVisibilityConfigResponseOutput{})
	pulumi.RegisterOutputType(ManagedZonePrivateVisibilityConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedZoneReverseLookupConfigOutput{})
	pulumi.RegisterOutputType(ManagedZoneReverseLookupConfigPtrOutput{})
	pulumi.RegisterOutputType(ManagedZoneReverseLookupConfigResponseOutput{})
	pulumi.RegisterOutputType(ManagedZoneReverseLookupConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedZoneServiceDirectoryConfigOutput{})
	pulumi.RegisterOutputType(ManagedZoneServiceDirectoryConfigPtrOutput{})
	pulumi.RegisterOutputType(ManagedZoneServiceDirectoryConfigNamespaceOutput{})
	pulumi.RegisterOutputType(ManagedZoneServiceDirectoryConfigNamespacePtrOutput{})
	pulumi.RegisterOutputType(ManagedZoneServiceDirectoryConfigNamespaceResponseOutput{})
	pulumi.RegisterOutputType(ManagedZoneServiceDirectoryConfigNamespaceResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedZoneServiceDirectoryConfigResponseOutput{})
	pulumi.RegisterOutputType(ManagedZoneServiceDirectoryConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(PolicyAlternativeNameServerConfigOutput{})
	pulumi.RegisterOutputType(PolicyAlternativeNameServerConfigPtrOutput{})
	pulumi.RegisterOutputType(PolicyAlternativeNameServerConfigResponseOutput{})
	pulumi.RegisterOutputType(PolicyAlternativeNameServerConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(PolicyAlternativeNameServerConfigTargetNameServerOutput{})
	pulumi.RegisterOutputType(PolicyAlternativeNameServerConfigTargetNameServerArrayOutput{})
	pulumi.RegisterOutputType(PolicyAlternativeNameServerConfigTargetNameServerResponseOutput{})
	pulumi.RegisterOutputType(PolicyAlternativeNameServerConfigTargetNameServerResponseArrayOutput{})
	pulumi.RegisterOutputType(PolicyNetworkOutput{})
	pulumi.RegisterOutputType(PolicyNetworkArrayOutput{})
	pulumi.RegisterOutputType(PolicyNetworkResponseOutput{})
	pulumi.RegisterOutputType(PolicyNetworkResponseArrayOutput{})
	pulumi.RegisterOutputType(RRSetRoutingPolicyOutput{})
	pulumi.RegisterOutputType(RRSetRoutingPolicyPtrOutput{})
	pulumi.RegisterOutputType(RRSetRoutingPolicyGeoPolicyOutput{})
	pulumi.RegisterOutputType(RRSetRoutingPolicyGeoPolicyPtrOutput{})
	pulumi.RegisterOutputType(RRSetRoutingPolicyGeoPolicyGeoPolicyItemOutput{})
	pulumi.RegisterOutputType(RRSetRoutingPolicyGeoPolicyGeoPolicyItemArrayOutput{})
	pulumi.RegisterOutputType(RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseOutput{})
	pulumi.RegisterOutputType(RRSetRoutingPolicyGeoPolicyGeoPolicyItemResponseArrayOutput{})
	pulumi.RegisterOutputType(RRSetRoutingPolicyGeoPolicyResponseOutput{})
	pulumi.RegisterOutputType(RRSetRoutingPolicyGeoPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(RRSetRoutingPolicyResponseOutput{})
	pulumi.RegisterOutputType(RRSetRoutingPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(RRSetRoutingPolicyWrrPolicyOutput{})
	pulumi.RegisterOutputType(RRSetRoutingPolicyWrrPolicyPtrOutput{})
	pulumi.RegisterOutputType(RRSetRoutingPolicyWrrPolicyResponseOutput{})
	pulumi.RegisterOutputType(RRSetRoutingPolicyWrrPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(RRSetRoutingPolicyWrrPolicyWrrPolicyItemOutput{})
	pulumi.RegisterOutputType(RRSetRoutingPolicyWrrPolicyWrrPolicyItemArrayOutput{})
	pulumi.RegisterOutputType(RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseOutput{})
	pulumi.RegisterOutputType(RRSetRoutingPolicyWrrPolicyWrrPolicyItemResponseArrayOutput{})
	pulumi.RegisterOutputType(ResourceRecordSetTypeOutput{})
	pulumi.RegisterOutputType(ResourceRecordSetTypeArrayOutput{})
	pulumi.RegisterOutputType(ResourceRecordSetResponseOutput{})
	pulumi.RegisterOutputType(ResourceRecordSetResponseArrayOutput{})
	pulumi.RegisterOutputType(ResponsePolicyGKEClusterOutput{})
	pulumi.RegisterOutputType(ResponsePolicyGKEClusterArrayOutput{})
	pulumi.RegisterOutputType(ResponsePolicyGKEClusterResponseOutput{})
	pulumi.RegisterOutputType(ResponsePolicyGKEClusterResponseArrayOutput{})
	pulumi.RegisterOutputType(ResponsePolicyNetworkOutput{})
	pulumi.RegisterOutputType(ResponsePolicyNetworkArrayOutput{})
	pulumi.RegisterOutputType(ResponsePolicyNetworkResponseOutput{})
	pulumi.RegisterOutputType(ResponsePolicyNetworkResponseArrayOutput{})
	pulumi.RegisterOutputType(ResponsePolicyRuleLocalDataOutput{})
	pulumi.RegisterOutputType(ResponsePolicyRuleLocalDataPtrOutput{})
	pulumi.RegisterOutputType(ResponsePolicyRuleLocalDataResponseOutput{})
	pulumi.RegisterOutputType(ResponsePolicyRuleLocalDataResponsePtrOutput{})
}
