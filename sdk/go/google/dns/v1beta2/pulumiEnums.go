// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Status of the operation (output only). A status of "done" means that the request to update the authoritative servers has been sent, but the servers might not be updated yet.
type ChangeStatus pulumi.String

const (
	ChangeStatusPending = ChangeStatus("pending")
	ChangeStatusDone    = ChangeStatus("done")
)

func (ChangeStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ChangeStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ChangeStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ChangeStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ChangeStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// String mnemonic specifying the DNSSEC algorithm of this key.
type DnsKeySpecAlgorithm pulumi.String

const (
	DnsKeySpecAlgorithmRsasha1         = DnsKeySpecAlgorithm("rsasha1")
	DnsKeySpecAlgorithmRsasha256       = DnsKeySpecAlgorithm("rsasha256")
	DnsKeySpecAlgorithmRsasha512       = DnsKeySpecAlgorithm("rsasha512")
	DnsKeySpecAlgorithmEcdsap256sha256 = DnsKeySpecAlgorithm("ecdsap256sha256")
	DnsKeySpecAlgorithmEcdsap384sha384 = DnsKeySpecAlgorithm("ecdsap384sha384")
)

func (DnsKeySpecAlgorithm) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e DnsKeySpecAlgorithm) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DnsKeySpecAlgorithm) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DnsKeySpecAlgorithm) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DnsKeySpecAlgorithm) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Specifies whether this is a key signing key (KSK) or a zone signing key (ZSK). Key signing keys have the Secure Entry Point flag set and, when active, are only used to sign resource record sets of type DNSKEY. Zone signing keys do not have the Secure Entry Point flag set and are used to sign all other types of resource record sets.
type DnsKeySpecKeyType pulumi.String

const (
	DnsKeySpecKeyTypeKeySigning  = DnsKeySpecKeyType("keySigning")
	DnsKeySpecKeyTypeZoneSigning = DnsKeySpecKeyType("zoneSigning")
)

func (DnsKeySpecKeyType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e DnsKeySpecKeyType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DnsKeySpecKeyType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DnsKeySpecKeyType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DnsKeySpecKeyType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Specifies the mechanism for authenticated denial-of-existence responses. Can only be changed while the state is OFF.
type ManagedZoneDnsSecConfigNonExistence pulumi.String

const (
	ManagedZoneDnsSecConfigNonExistenceNsec  = ManagedZoneDnsSecConfigNonExistence("nsec")
	ManagedZoneDnsSecConfigNonExistenceNsec3 = ManagedZoneDnsSecConfigNonExistence("nsec3")
)

func (ManagedZoneDnsSecConfigNonExistence) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ManagedZoneDnsSecConfigNonExistence) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ManagedZoneDnsSecConfigNonExistence) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ManagedZoneDnsSecConfigNonExistence) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ManagedZoneDnsSecConfigNonExistence) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Specifies whether DNSSEC is enabled, and what mode it is in.
type ManagedZoneDnsSecConfigState pulumi.String

const (
	// DNSSEC is disabled; the zone is not signed.
	ManagedZoneDnsSecConfigStateOff = ManagedZoneDnsSecConfigState("off")
	// DNSSEC is enabled; the zone is signed and fully managed.
	ManagedZoneDnsSecConfigStateOn = ManagedZoneDnsSecConfigState("on")
	// DNSSEC is enabled, but in a "transfer" mode.
	ManagedZoneDnsSecConfigStateTransfer = ManagedZoneDnsSecConfigState("transfer")
)

func (ManagedZoneDnsSecConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ManagedZoneDnsSecConfigState) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ManagedZoneDnsSecConfigState) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ManagedZoneDnsSecConfigState) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ManagedZoneDnsSecConfigState) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Forwarding path for this NameServerTarget. If unset or set to DEFAULT, Cloud DNS makes forwarding decisions based on IP address ranges; that is, RFC1918 addresses go to the VPC network, non-RFC1918 addresses go to the internet. When set to PRIVATE, Cloud DNS always sends queries through the VPC network for this target.
type ManagedZoneForwardingConfigNameServerTargetForwardingPath pulumi.String

const (
	// Cloud DNS makes forwarding decisions based on address ranges; that is, RFC1918 addresses forward to the target through the VPC and non-RFC1918 addresses forward to the target through the internet
	ManagedZoneForwardingConfigNameServerTargetForwardingPathDefault = ManagedZoneForwardingConfigNameServerTargetForwardingPath("default")
	// Cloud DNS always forwards to this target through the VPC.
	ManagedZoneForwardingConfigNameServerTargetForwardingPathPrivate = ManagedZoneForwardingConfigNameServerTargetForwardingPath("private")
)

func (ManagedZoneForwardingConfigNameServerTargetForwardingPath) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ManagedZoneForwardingConfigNameServerTargetForwardingPath) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ManagedZoneForwardingConfigNameServerTargetForwardingPath) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ManagedZoneForwardingConfigNameServerTargetForwardingPath) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ManagedZoneForwardingConfigNameServerTargetForwardingPath) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The zone's visibility: public zones are exposed to the Internet, while private zones are visible only to Virtual Private Cloud resources.
type ManagedZoneVisibility pulumi.String

const (
	ManagedZoneVisibilityPublic  = ManagedZoneVisibility("public")
	ManagedZoneVisibilityPrivate = ManagedZoneVisibility("private")
)

func (ManagedZoneVisibility) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ManagedZoneVisibility) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ManagedZoneVisibility) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ManagedZoneVisibility) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ManagedZoneVisibility) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Forwarding path for this TargetNameServer. If unset or set to DEFAULT, Cloud DNS makes forwarding decisions based on address ranges; that is, RFC1918 addresses go to the VPC network, non-RFC1918 addresses go to the internet. When set to PRIVATE, Cloud DNS always sends queries through the VPC network for this target.
type PolicyAlternativeNameServerConfigTargetNameServerForwardingPath pulumi.String

const (
	// Cloud DNS makes forwarding decision based on IP address ranges; that is, RFC1918 addresses forward to the target through the VPC and non-RFC1918 addresses forward to the target through the internet
	PolicyAlternativeNameServerConfigTargetNameServerForwardingPathDefault = PolicyAlternativeNameServerConfigTargetNameServerForwardingPath("default")
	// Cloud DNS always forwards to this target through the VPC.
	PolicyAlternativeNameServerConfigTargetNameServerForwardingPathPrivate = PolicyAlternativeNameServerConfigTargetNameServerForwardingPath("private")
)

func (PolicyAlternativeNameServerConfigTargetNameServerForwardingPath) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e PolicyAlternativeNameServerConfigTargetNameServerForwardingPath) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PolicyAlternativeNameServerConfigTargetNameServerForwardingPath) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PolicyAlternativeNameServerConfigTargetNameServerForwardingPath) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PolicyAlternativeNameServerConfigTargetNameServerForwardingPath) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Answer this query with a behavior rather than DNS data.
type ResponsePolicyRuleBehavior pulumi.String

const (
	ResponsePolicyRuleBehaviorBehaviorUnspecified = ResponsePolicyRuleBehavior("behaviorUnspecified")
	// Skip a less-specific ResponsePolicyRule and continue normal query logic. This can be used in conjunction with a wildcard to exempt a subset of the wildcard ResponsePolicyRule from the ResponsePolicy behavior and e.g., query the public internet instead. For instance, if these rules exist: *.example.com -> 1.2.3.4 foo.example.com -> PASSTHRU Then a query for 'foo.example.com' skips the wildcard.
	ResponsePolicyRuleBehaviorBypassResponsePolicy = ResponsePolicyRuleBehavior("bypassResponsePolicy")
)

func (ResponsePolicyRuleBehavior) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ResponsePolicyRuleBehavior) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ResponsePolicyRuleBehavior) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ResponsePolicyRuleBehavior) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ResponsePolicyRuleBehavior) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}
