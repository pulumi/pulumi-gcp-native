// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a Service in an Application.
type Service struct {
	pulumi.CustomResourceState

	ApplicationId pulumi.StringOutput `pulumi:"applicationId"`
	// Optional. Consumer provided attributes.
	Attributes AttributesResponseOutput `pulumi:"attributes"`
	// Create time.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Optional. User-defined description of a Service. Can have a maximum length of 2048 characters.
	Description pulumi.StringOutput `pulumi:"description"`
	// Immutable. The resource name of the original discovered service.
	DiscoveredService pulumi.StringOutput `pulumi:"discoveredService"`
	// Optional. User-defined name for the Service. Can have a maximum length of 63 characters.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	Location    pulumi.StringOutput `pulumi:"location"`
	// Identifier. The resource name of a Service. Format: "projects/{host-project-id}/locations/{location}/applications/{application-id}/services/{service-id}"
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrOutput `pulumi:"requestId"`
	// Required. The Service identifier. Must contain only lowercase letters, numbers or hyphens, with the first character a letter, the last a letter or a number, and a 63 character maximum.
	ServiceId pulumi.StringOutput `pulumi:"serviceId"`
	// Properties of an underlying compute resource that can comprise a Service. These are immutable.
	ServiceProperties ServicePropertiesResponseOutput `pulumi:"serviceProperties"`
	// Reference to an underlying networking resource that can comprise a Service. These are immutable.
	ServiceReference ServiceReferenceResponseOutput `pulumi:"serviceReference"`
	// Service state.
	State pulumi.StringOutput `pulumi:"state"`
	// A universally unique identifier (UUID) for the `Service` in the UUID4 format.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// Update time.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewService registers a new resource with the given unique name, arguments, and options.
func NewService(ctx *pulumi.Context,
	name string, args *ServiceArgs, opts ...pulumi.ResourceOption) (*Service, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationId == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationId'")
	}
	if args.DiscoveredService == nil {
		return nil, errors.New("invalid value for required argument 'DiscoveredService'")
	}
	if args.ServiceId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"applicationId",
		"location",
		"project",
		"serviceId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Service
	err := ctx.RegisterResource("google-native:apphub/v1:Service", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetService gets an existing Service resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceState, opts ...pulumi.ResourceOption) (*Service, error) {
	var resource Service
	err := ctx.ReadResource("google-native:apphub/v1:Service", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Service resources.
type serviceState struct {
}

type ServiceState struct {
}

func (ServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceState)(nil)).Elem()
}

type serviceArgs struct {
	ApplicationId string `pulumi:"applicationId"`
	// Optional. Consumer provided attributes.
	Attributes *Attributes `pulumi:"attributes"`
	// Optional. User-defined description of a Service. Can have a maximum length of 2048 characters.
	Description *string `pulumi:"description"`
	// Immutable. The resource name of the original discovered service.
	DiscoveredService string `pulumi:"discoveredService"`
	// Optional. User-defined name for the Service. Can have a maximum length of 63 characters.
	DisplayName *string `pulumi:"displayName"`
	Location    *string `pulumi:"location"`
	// Identifier. The resource name of a Service. Format: "projects/{host-project-id}/locations/{location}/applications/{application-id}/services/{service-id}"
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId *string `pulumi:"requestId"`
	// Required. The Service identifier. Must contain only lowercase letters, numbers or hyphens, with the first character a letter, the last a letter or a number, and a 63 character maximum.
	ServiceId string `pulumi:"serviceId"`
}

// The set of arguments for constructing a Service resource.
type ServiceArgs struct {
	ApplicationId pulumi.StringInput
	// Optional. Consumer provided attributes.
	Attributes AttributesPtrInput
	// Optional. User-defined description of a Service. Can have a maximum length of 2048 characters.
	Description pulumi.StringPtrInput
	// Immutable. The resource name of the original discovered service.
	DiscoveredService pulumi.StringInput
	// Optional. User-defined name for the Service. Can have a maximum length of 63 characters.
	DisplayName pulumi.StringPtrInput
	Location    pulumi.StringPtrInput
	// Identifier. The resource name of a Service. Format: "projects/{host-project-id}/locations/{location}/applications/{application-id}/services/{service-id}"
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrInput
	// Required. The Service identifier. Must contain only lowercase letters, numbers or hyphens, with the first character a letter, the last a letter or a number, and a 63 character maximum.
	ServiceId pulumi.StringInput
}

func (ServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceArgs)(nil)).Elem()
}

type ServiceInput interface {
	pulumi.Input

	ToServiceOutput() ServiceOutput
	ToServiceOutputWithContext(ctx context.Context) ServiceOutput
}

func (*Service) ElementType() reflect.Type {
	return reflect.TypeOf((**Service)(nil)).Elem()
}

func (i *Service) ToServiceOutput() ServiceOutput {
	return i.ToServiceOutputWithContext(context.Background())
}

func (i *Service) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceOutput)
}

type ServiceOutput struct{ *pulumi.OutputState }

func (ServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Service)(nil)).Elem()
}

func (o ServiceOutput) ToServiceOutput() ServiceOutput {
	return o
}

func (o ServiceOutput) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return o
}

func (o ServiceOutput) ApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.ApplicationId }).(pulumi.StringOutput)
}

// Optional. Consumer provided attributes.
func (o ServiceOutput) Attributes() AttributesResponseOutput {
	return o.ApplyT(func(v *Service) AttributesResponseOutput { return v.Attributes }).(AttributesResponseOutput)
}

// Create time.
func (o ServiceOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Optional. User-defined description of a Service. Can have a maximum length of 2048 characters.
func (o ServiceOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Immutable. The resource name of the original discovered service.
func (o ServiceOutput) DiscoveredService() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.DiscoveredService }).(pulumi.StringOutput)
}

// Optional. User-defined name for the Service. Can have a maximum length of 63 characters.
func (o ServiceOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

func (o ServiceOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Identifier. The resource name of a Service. Format: "projects/{host-project-id}/locations/{location}/applications/{application-id}/services/{service-id}"
func (o ServiceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ServiceOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
func (o ServiceOutput) RequestId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.StringPtrOutput { return v.RequestId }).(pulumi.StringPtrOutput)
}

// Required. The Service identifier. Must contain only lowercase letters, numbers or hyphens, with the first character a letter, the last a letter or a number, and a 63 character maximum.
func (o ServiceOutput) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.ServiceId }).(pulumi.StringOutput)
}

// Properties of an underlying compute resource that can comprise a Service. These are immutable.
func (o ServiceOutput) ServiceProperties() ServicePropertiesResponseOutput {
	return o.ApplyT(func(v *Service) ServicePropertiesResponseOutput { return v.ServiceProperties }).(ServicePropertiesResponseOutput)
}

// Reference to an underlying networking resource that can comprise a Service. These are immutable.
func (o ServiceOutput) ServiceReference() ServiceReferenceResponseOutput {
	return o.ApplyT(func(v *Service) ServiceReferenceResponseOutput { return v.ServiceReference }).(ServiceReferenceResponseOutput)
}

// Service state.
func (o ServiceOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// A universally unique identifier (UUID) for the `Service` in the UUID4 format.
func (o ServiceOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// Update time.
func (o ServiceOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceInput)(nil)).Elem(), &Service{})
	pulumi.RegisterOutputType(ServiceOutput{})
}
