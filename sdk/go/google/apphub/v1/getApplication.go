// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets an Application in a host project and location.
func LookupApplication(ctx *pulumi.Context, args *LookupApplicationArgs, opts ...pulumi.InvokeOption) (*LookupApplicationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupApplicationResult
	err := ctx.Invoke("google-native:apphub/v1:getApplication", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupApplicationArgs struct {
	ApplicationId string  `pulumi:"applicationId"`
	Location      string  `pulumi:"location"`
	Project       *string `pulumi:"project"`
}

type LookupApplicationResult struct {
	// Optional. Consumer provided attributes.
	Attributes AttributesResponse `pulumi:"attributes"`
	// Create time.
	CreateTime string `pulumi:"createTime"`
	// Optional. User-defined description of an Application. Can have a maximum length of 2048 characters.
	Description string `pulumi:"description"`
	// Optional. User-defined name for the Application. Can have a maximum length of 63 characters.
	DisplayName string `pulumi:"displayName"`
	// Identifier. The resource name of an Application. Format: "projects/{host-project-id}/locations/{location}/applications/{application-id}"
	Name string `pulumi:"name"`
	// Immutable. Defines what data can be included into this Application. Limits which Services and Workloads can be registered.
	Scope ScopeResponse `pulumi:"scope"`
	// Application state.
	State string `pulumi:"state"`
	// A universally unique identifier (in UUID4 format) for the `Application`.
	Uid string `pulumi:"uid"`
	// Update time.
	UpdateTime string `pulumi:"updateTime"`
}

func LookupApplicationOutput(ctx *pulumi.Context, args LookupApplicationOutputArgs, opts ...pulumi.InvokeOption) LookupApplicationResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupApplicationResult, error) {
			args := v.(LookupApplicationArgs)
			r, err := LookupApplication(ctx, &args, opts...)
			var s LookupApplicationResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupApplicationResultOutput)
}

type LookupApplicationOutputArgs struct {
	ApplicationId pulumi.StringInput    `pulumi:"applicationId"`
	Location      pulumi.StringInput    `pulumi:"location"`
	Project       pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupApplicationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupApplicationArgs)(nil)).Elem()
}

type LookupApplicationResultOutput struct{ *pulumi.OutputState }

func (LookupApplicationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupApplicationResult)(nil)).Elem()
}

func (o LookupApplicationResultOutput) ToLookupApplicationResultOutput() LookupApplicationResultOutput {
	return o
}

func (o LookupApplicationResultOutput) ToLookupApplicationResultOutputWithContext(ctx context.Context) LookupApplicationResultOutput {
	return o
}

// Optional. Consumer provided attributes.
func (o LookupApplicationResultOutput) Attributes() AttributesResponseOutput {
	return o.ApplyT(func(v LookupApplicationResult) AttributesResponse { return v.Attributes }).(AttributesResponseOutput)
}

// Create time.
func (o LookupApplicationResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupApplicationResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Optional. User-defined description of an Application. Can have a maximum length of 2048 characters.
func (o LookupApplicationResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupApplicationResult) string { return v.Description }).(pulumi.StringOutput)
}

// Optional. User-defined name for the Application. Can have a maximum length of 63 characters.
func (o LookupApplicationResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupApplicationResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Identifier. The resource name of an Application. Format: "projects/{host-project-id}/locations/{location}/applications/{application-id}"
func (o LookupApplicationResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupApplicationResult) string { return v.Name }).(pulumi.StringOutput)
}

// Immutable. Defines what data can be included into this Application. Limits which Services and Workloads can be registered.
func (o LookupApplicationResultOutput) Scope() ScopeResponseOutput {
	return o.ApplyT(func(v LookupApplicationResult) ScopeResponse { return v.Scope }).(ScopeResponseOutput)
}

// Application state.
func (o LookupApplicationResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupApplicationResult) string { return v.State }).(pulumi.StringOutput)
}

// A universally unique identifier (in UUID4 format) for the `Application`.
func (o LookupApplicationResultOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupApplicationResult) string { return v.Uid }).(pulumi.StringOutput)
}

// Update time.
func (o LookupApplicationResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupApplicationResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupApplicationResultOutput{})
}
