// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates an Application in a host project and location.
type Application struct {
	pulumi.CustomResourceState

	// Required. The Application identifier. Must contain only lowercase letters, numbers or hyphens, with the first character a letter, the last a letter or a number, and a 63 character maximum.
	ApplicationId pulumi.StringOutput `pulumi:"applicationId"`
	// Optional. Consumer provided attributes.
	Attributes AttributesResponseOutput `pulumi:"attributes"`
	// Create time.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Optional. User-defined description of an Application. Can have a maximum length of 2048 characters.
	Description pulumi.StringOutput `pulumi:"description"`
	// Optional. User-defined name for the Application. Can have a maximum length of 63 characters.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	Location    pulumi.StringOutput `pulumi:"location"`
	// Identifier. The resource name of an Application. Format: "projects/{host-project-id}/locations/{location}/applications/{application-id}"
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrOutput `pulumi:"requestId"`
	// Immutable. Defines what data can be included into this Application. Limits which Services and Workloads can be registered.
	Scope ScopeResponseOutput `pulumi:"scope"`
	// Application state.
	State pulumi.StringOutput `pulumi:"state"`
	// A universally unique identifier (in UUID4 format) for the `Application`.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// Update time.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewApplication registers a new resource with the given unique name, arguments, and options.
func NewApplication(ctx *pulumi.Context,
	name string, args *ApplicationArgs, opts ...pulumi.ResourceOption) (*Application, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationId == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationId'")
	}
	if args.Scope == nil {
		return nil, errors.New("invalid value for required argument 'Scope'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"applicationId",
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Application
	err := ctx.RegisterResource("google-native:apphub/v1:Application", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplication gets an existing Application resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationState, opts ...pulumi.ResourceOption) (*Application, error) {
	var resource Application
	err := ctx.ReadResource("google-native:apphub/v1:Application", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Application resources.
type applicationState struct {
}

type ApplicationState struct {
}

func (ApplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationState)(nil)).Elem()
}

type applicationArgs struct {
	// Required. The Application identifier. Must contain only lowercase letters, numbers or hyphens, with the first character a letter, the last a letter or a number, and a 63 character maximum.
	ApplicationId string `pulumi:"applicationId"`
	// Optional. Consumer provided attributes.
	Attributes *Attributes `pulumi:"attributes"`
	// Optional. User-defined description of an Application. Can have a maximum length of 2048 characters.
	Description *string `pulumi:"description"`
	// Optional. User-defined name for the Application. Can have a maximum length of 63 characters.
	DisplayName *string `pulumi:"displayName"`
	Location    *string `pulumi:"location"`
	// Identifier. The resource name of an Application. Format: "projects/{host-project-id}/locations/{location}/applications/{application-id}"
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId *string `pulumi:"requestId"`
	// Immutable. Defines what data can be included into this Application. Limits which Services and Workloads can be registered.
	Scope Scope `pulumi:"scope"`
}

// The set of arguments for constructing a Application resource.
type ApplicationArgs struct {
	// Required. The Application identifier. Must contain only lowercase letters, numbers or hyphens, with the first character a letter, the last a letter or a number, and a 63 character maximum.
	ApplicationId pulumi.StringInput
	// Optional. Consumer provided attributes.
	Attributes AttributesPtrInput
	// Optional. User-defined description of an Application. Can have a maximum length of 2048 characters.
	Description pulumi.StringPtrInput
	// Optional. User-defined name for the Application. Can have a maximum length of 63 characters.
	DisplayName pulumi.StringPtrInput
	Location    pulumi.StringPtrInput
	// Identifier. The resource name of an Application. Format: "projects/{host-project-id}/locations/{location}/applications/{application-id}"
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrInput
	// Immutable. Defines what data can be included into this Application. Limits which Services and Workloads can be registered.
	Scope ScopeInput
}

func (ApplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationArgs)(nil)).Elem()
}

type ApplicationInput interface {
	pulumi.Input

	ToApplicationOutput() ApplicationOutput
	ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput
}

func (*Application) ElementType() reflect.Type {
	return reflect.TypeOf((**Application)(nil)).Elem()
}

func (i *Application) ToApplicationOutput() ApplicationOutput {
	return i.ToApplicationOutputWithContext(context.Background())
}

func (i *Application) ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOutput)
}

type ApplicationOutput struct{ *pulumi.OutputState }

func (ApplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Application)(nil)).Elem()
}

func (o ApplicationOutput) ToApplicationOutput() ApplicationOutput {
	return o
}

func (o ApplicationOutput) ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput {
	return o
}

// Required. The Application identifier. Must contain only lowercase letters, numbers or hyphens, with the first character a letter, the last a letter or a number, and a 63 character maximum.
func (o ApplicationOutput) ApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.ApplicationId }).(pulumi.StringOutput)
}

// Optional. Consumer provided attributes.
func (o ApplicationOutput) Attributes() AttributesResponseOutput {
	return o.ApplyT(func(v *Application) AttributesResponseOutput { return v.Attributes }).(AttributesResponseOutput)
}

// Create time.
func (o ApplicationOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Optional. User-defined description of an Application. Can have a maximum length of 2048 characters.
func (o ApplicationOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Optional. User-defined name for the Application. Can have a maximum length of 63 characters.
func (o ApplicationOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

func (o ApplicationOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Identifier. The resource name of an Application. Format: "projects/{host-project-id}/locations/{location}/applications/{application-id}"
func (o ApplicationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ApplicationOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
func (o ApplicationOutput) RequestId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.RequestId }).(pulumi.StringPtrOutput)
}

// Immutable. Defines what data can be included into this Application. Limits which Services and Workloads can be registered.
func (o ApplicationOutput) Scope() ScopeResponseOutput {
	return o.ApplyT(func(v *Application) ScopeResponseOutput { return v.Scope }).(ScopeResponseOutput)
}

// Application state.
func (o ApplicationOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// A universally unique identifier (in UUID4 format) for the `Application`.
func (o ApplicationOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// Update time.
func (o ApplicationOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationInput)(nil)).Elem(), &Application{})
	pulumi.RegisterOutputType(ApplicationOutput{})
}
