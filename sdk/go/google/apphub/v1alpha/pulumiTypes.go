// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// Consumer provided attributes.
type Attributes struct {
	// Optional. Business team that ensures user needs are met and value is delivered
	BusinessOwners []ContactInfo `pulumi:"businessOwners"`
	// Optional. User-defined criticality information.
	Criticality *Criticality `pulumi:"criticality"`
	// Optional. Developer team that owns development and coding.
	DeveloperOwners []ContactInfo `pulumi:"developerOwners"`
	// Optional. User-defined environment information.
	Environment *Environment `pulumi:"environment"`
	// Optional. Operator team that ensures runtime and operations.
	OperatorOwners []ContactInfo `pulumi:"operatorOwners"`
}

// AttributesInput is an input type that accepts AttributesArgs and AttributesOutput values.
// You can construct a concrete instance of `AttributesInput` via:
//
//	AttributesArgs{...}
type AttributesInput interface {
	pulumi.Input

	ToAttributesOutput() AttributesOutput
	ToAttributesOutputWithContext(context.Context) AttributesOutput
}

// Consumer provided attributes.
type AttributesArgs struct {
	// Optional. Business team that ensures user needs are met and value is delivered
	BusinessOwners ContactInfoArrayInput `pulumi:"businessOwners"`
	// Optional. User-defined criticality information.
	Criticality CriticalityPtrInput `pulumi:"criticality"`
	// Optional. Developer team that owns development and coding.
	DeveloperOwners ContactInfoArrayInput `pulumi:"developerOwners"`
	// Optional. User-defined environment information.
	Environment EnvironmentPtrInput `pulumi:"environment"`
	// Optional. Operator team that ensures runtime and operations.
	OperatorOwners ContactInfoArrayInput `pulumi:"operatorOwners"`
}

func (AttributesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Attributes)(nil)).Elem()
}

func (i AttributesArgs) ToAttributesOutput() AttributesOutput {
	return i.ToAttributesOutputWithContext(context.Background())
}

func (i AttributesArgs) ToAttributesOutputWithContext(ctx context.Context) AttributesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttributesOutput)
}

func (i AttributesArgs) ToAttributesPtrOutput() AttributesPtrOutput {
	return i.ToAttributesPtrOutputWithContext(context.Background())
}

func (i AttributesArgs) ToAttributesPtrOutputWithContext(ctx context.Context) AttributesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttributesOutput).ToAttributesPtrOutputWithContext(ctx)
}

// AttributesPtrInput is an input type that accepts AttributesArgs, AttributesPtr and AttributesPtrOutput values.
// You can construct a concrete instance of `AttributesPtrInput` via:
//
//	        AttributesArgs{...}
//
//	or:
//
//	        nil
type AttributesPtrInput interface {
	pulumi.Input

	ToAttributesPtrOutput() AttributesPtrOutput
	ToAttributesPtrOutputWithContext(context.Context) AttributesPtrOutput
}

type attributesPtrType AttributesArgs

func AttributesPtr(v *AttributesArgs) AttributesPtrInput {
	return (*attributesPtrType)(v)
}

func (*attributesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Attributes)(nil)).Elem()
}

func (i *attributesPtrType) ToAttributesPtrOutput() AttributesPtrOutput {
	return i.ToAttributesPtrOutputWithContext(context.Background())
}

func (i *attributesPtrType) ToAttributesPtrOutputWithContext(ctx context.Context) AttributesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttributesPtrOutput)
}

// Consumer provided attributes.
type AttributesOutput struct{ *pulumi.OutputState }

func (AttributesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Attributes)(nil)).Elem()
}

func (o AttributesOutput) ToAttributesOutput() AttributesOutput {
	return o
}

func (o AttributesOutput) ToAttributesOutputWithContext(ctx context.Context) AttributesOutput {
	return o
}

func (o AttributesOutput) ToAttributesPtrOutput() AttributesPtrOutput {
	return o.ToAttributesPtrOutputWithContext(context.Background())
}

func (o AttributesOutput) ToAttributesPtrOutputWithContext(ctx context.Context) AttributesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Attributes) *Attributes {
		return &v
	}).(AttributesPtrOutput)
}

// Optional. Business team that ensures user needs are met and value is delivered
func (o AttributesOutput) BusinessOwners() ContactInfoArrayOutput {
	return o.ApplyT(func(v Attributes) []ContactInfo { return v.BusinessOwners }).(ContactInfoArrayOutput)
}

// Optional. User-defined criticality information.
func (o AttributesOutput) Criticality() CriticalityPtrOutput {
	return o.ApplyT(func(v Attributes) *Criticality { return v.Criticality }).(CriticalityPtrOutput)
}

// Optional. Developer team that owns development and coding.
func (o AttributesOutput) DeveloperOwners() ContactInfoArrayOutput {
	return o.ApplyT(func(v Attributes) []ContactInfo { return v.DeveloperOwners }).(ContactInfoArrayOutput)
}

// Optional. User-defined environment information.
func (o AttributesOutput) Environment() EnvironmentPtrOutput {
	return o.ApplyT(func(v Attributes) *Environment { return v.Environment }).(EnvironmentPtrOutput)
}

// Optional. Operator team that ensures runtime and operations.
func (o AttributesOutput) OperatorOwners() ContactInfoArrayOutput {
	return o.ApplyT(func(v Attributes) []ContactInfo { return v.OperatorOwners }).(ContactInfoArrayOutput)
}

type AttributesPtrOutput struct{ *pulumi.OutputState }

func (AttributesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Attributes)(nil)).Elem()
}

func (o AttributesPtrOutput) ToAttributesPtrOutput() AttributesPtrOutput {
	return o
}

func (o AttributesPtrOutput) ToAttributesPtrOutputWithContext(ctx context.Context) AttributesPtrOutput {
	return o
}

func (o AttributesPtrOutput) Elem() AttributesOutput {
	return o.ApplyT(func(v *Attributes) Attributes {
		if v != nil {
			return *v
		}
		var ret Attributes
		return ret
	}).(AttributesOutput)
}

// Optional. Business team that ensures user needs are met and value is delivered
func (o AttributesPtrOutput) BusinessOwners() ContactInfoArrayOutput {
	return o.ApplyT(func(v *Attributes) []ContactInfo {
		if v == nil {
			return nil
		}
		return v.BusinessOwners
	}).(ContactInfoArrayOutput)
}

// Optional. User-defined criticality information.
func (o AttributesPtrOutput) Criticality() CriticalityPtrOutput {
	return o.ApplyT(func(v *Attributes) *Criticality {
		if v == nil {
			return nil
		}
		return v.Criticality
	}).(CriticalityPtrOutput)
}

// Optional. Developer team that owns development and coding.
func (o AttributesPtrOutput) DeveloperOwners() ContactInfoArrayOutput {
	return o.ApplyT(func(v *Attributes) []ContactInfo {
		if v == nil {
			return nil
		}
		return v.DeveloperOwners
	}).(ContactInfoArrayOutput)
}

// Optional. User-defined environment information.
func (o AttributesPtrOutput) Environment() EnvironmentPtrOutput {
	return o.ApplyT(func(v *Attributes) *Environment {
		if v == nil {
			return nil
		}
		return v.Environment
	}).(EnvironmentPtrOutput)
}

// Optional. Operator team that ensures runtime and operations.
func (o AttributesPtrOutput) OperatorOwners() ContactInfoArrayOutput {
	return o.ApplyT(func(v *Attributes) []ContactInfo {
		if v == nil {
			return nil
		}
		return v.OperatorOwners
	}).(ContactInfoArrayOutput)
}

// Consumer provided attributes.
type AttributesResponse struct {
	// Optional. Business team that ensures user needs are met and value is delivered
	BusinessOwners []ContactInfoResponse `pulumi:"businessOwners"`
	// Optional. User-defined criticality information.
	Criticality CriticalityResponse `pulumi:"criticality"`
	// Optional. Developer team that owns development and coding.
	DeveloperOwners []ContactInfoResponse `pulumi:"developerOwners"`
	// Optional. User-defined environment information.
	Environment EnvironmentResponse `pulumi:"environment"`
	// Optional. Operator team that ensures runtime and operations.
	OperatorOwners []ContactInfoResponse `pulumi:"operatorOwners"`
}

// Consumer provided attributes.
type AttributesResponseOutput struct{ *pulumi.OutputState }

func (AttributesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AttributesResponse)(nil)).Elem()
}

func (o AttributesResponseOutput) ToAttributesResponseOutput() AttributesResponseOutput {
	return o
}

func (o AttributesResponseOutput) ToAttributesResponseOutputWithContext(ctx context.Context) AttributesResponseOutput {
	return o
}

// Optional. Business team that ensures user needs are met and value is delivered
func (o AttributesResponseOutput) BusinessOwners() ContactInfoResponseArrayOutput {
	return o.ApplyT(func(v AttributesResponse) []ContactInfoResponse { return v.BusinessOwners }).(ContactInfoResponseArrayOutput)
}

// Optional. User-defined criticality information.
func (o AttributesResponseOutput) Criticality() CriticalityResponseOutput {
	return o.ApplyT(func(v AttributesResponse) CriticalityResponse { return v.Criticality }).(CriticalityResponseOutput)
}

// Optional. Developer team that owns development and coding.
func (o AttributesResponseOutput) DeveloperOwners() ContactInfoResponseArrayOutput {
	return o.ApplyT(func(v AttributesResponse) []ContactInfoResponse { return v.DeveloperOwners }).(ContactInfoResponseArrayOutput)
}

// Optional. User-defined environment information.
func (o AttributesResponseOutput) Environment() EnvironmentResponseOutput {
	return o.ApplyT(func(v AttributesResponse) EnvironmentResponse { return v.Environment }).(EnvironmentResponseOutput)
}

// Optional. Operator team that ensures runtime and operations.
func (o AttributesResponseOutput) OperatorOwners() ContactInfoResponseArrayOutput {
	return o.ApplyT(func(v AttributesResponse) []ContactInfoResponse { return v.OperatorOwners }).(ContactInfoResponseArrayOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfig struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfig `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service *string `pulumi:"service"`
}

// AuditConfigInput is an input type that accepts AuditConfigArgs and AuditConfigOutput values.
// You can construct a concrete instance of `AuditConfigInput` via:
//
//	AuditConfigArgs{...}
type AuditConfigInput interface {
	pulumi.Input

	ToAuditConfigOutput() AuditConfigOutput
	ToAuditConfigOutputWithContext(context.Context) AuditConfigOutput
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigArgs struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs AuditLogConfigArrayInput `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (AuditConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (i AuditConfigArgs) ToAuditConfigOutput() AuditConfigOutput {
	return i.ToAuditConfigOutputWithContext(context.Background())
}

func (i AuditConfigArgs) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigOutput)
}

// AuditConfigArrayInput is an input type that accepts AuditConfigArray and AuditConfigArrayOutput values.
// You can construct a concrete instance of `AuditConfigArrayInput` via:
//
//	AuditConfigArray{ AuditConfigArgs{...} }
type AuditConfigArrayInput interface {
	pulumi.Input

	ToAuditConfigArrayOutput() AuditConfigArrayOutput
	ToAuditConfigArrayOutputWithContext(context.Context) AuditConfigArrayOutput
}

type AuditConfigArray []AuditConfigInput

func (AuditConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (i AuditConfigArray) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return i.ToAuditConfigArrayOutputWithContext(context.Background())
}

func (i AuditConfigArray) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigArrayOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigOutput struct{ *pulumi.OutputState }

func (AuditConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (o AuditConfigOutput) ToAuditConfigOutput() AuditConfigOutput {
	return o
}

func (o AuditConfigOutput) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigOutput) AuditLogConfigs() AuditLogConfigArrayOutput {
	return o.ApplyT(func(v AuditConfig) []AuditLogConfig { return v.AuditLogConfigs }).(AuditLogConfigArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuditConfig) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type AuditConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) Index(i pulumi.IntInput) AuditConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfig {
		return vs[0].([]AuditConfig)[vs[1].(int)]
	}).(AuditConfigOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigResponse struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfigResponse `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service string `pulumi:"service"`
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutput() AuditConfigResponseOutput {
	return o
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutputWithContext(ctx context.Context) AuditConfigResponseOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigResponseOutput) AuditLogConfigs() AuditLogConfigResponseArrayOutput {
	return o.ApplyT(func(v AuditConfigResponse) []AuditLogConfigResponse { return v.AuditLogConfigs }).(AuditLogConfigResponseArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v AuditConfigResponse) string { return v.Service }).(pulumi.StringOutput)
}

type AuditConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutput() AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutputWithContext(ctx context.Context) AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfigResponse {
		return vs[0].([]AuditConfigResponse)[vs[1].(int)]
	}).(AuditConfigResponseOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfig struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType *AuditLogConfigLogType `pulumi:"logType"`
}

// AuditLogConfigInput is an input type that accepts AuditLogConfigArgs and AuditLogConfigOutput values.
// You can construct a concrete instance of `AuditLogConfigInput` via:
//
//	AuditLogConfigArgs{...}
type AuditLogConfigInput interface {
	pulumi.Input

	ToAuditLogConfigOutput() AuditLogConfigOutput
	ToAuditLogConfigOutputWithContext(context.Context) AuditLogConfigOutput
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigArgs struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers pulumi.StringArrayInput `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType AuditLogConfigLogTypePtrInput `pulumi:"logType"`
}

func (AuditLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return i.ToAuditLogConfigOutputWithContext(context.Background())
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigOutput)
}

// AuditLogConfigArrayInput is an input type that accepts AuditLogConfigArray and AuditLogConfigArrayOutput values.
// You can construct a concrete instance of `AuditLogConfigArrayInput` via:
//
//	AuditLogConfigArray{ AuditLogConfigArgs{...} }
type AuditLogConfigArrayInput interface {
	pulumi.Input

	ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput
	ToAuditLogConfigArrayOutputWithContext(context.Context) AuditLogConfigArrayOutput
}

type AuditLogConfigArray []AuditLogConfigInput

func (AuditLogConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return i.ToAuditLogConfigArrayOutputWithContext(context.Background())
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigArrayOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigOutput struct{ *pulumi.OutputState }

func (AuditLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return o
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfig) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigOutput) LogType() AuditLogConfigLogTypePtrOutput {
	return o.ApplyT(func(v AuditLogConfig) *AuditLogConfigLogType { return v.LogType }).(AuditLogConfigLogTypePtrOutput)
}

type AuditLogConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) Index(i pulumi.IntInput) AuditLogConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfig {
		return vs[0].([]AuditLogConfig)[vs[1].(int)]
	}).(AuditLogConfigOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponse struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType string `pulumi:"logType"`
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutput() AuditLogConfigResponseOutput {
	return o
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutputWithContext(ctx context.Context) AuditLogConfigResponseOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigResponseOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigResponseOutput) LogType() pulumi.StringOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) string { return v.LogType }).(pulumi.StringOutput)
}

type AuditLogConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutput() AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutputWithContext(ctx context.Context) AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditLogConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfigResponse {
		return vs[0].([]AuditLogConfigResponse)[vs[1].(int)]
	}).(AuditLogConfigResponseOutput)
}

// Associates `members`, or principals, with a `role`.
type Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workforce identity pool. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/group/{group_id}`: All workforce identities in a group. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All workforce identities with a specific attribute value. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/*`: All identities in a workforce identity pool. * `principal://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workload identity pool. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/group/{group_id}`: A workload identity pool group. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All identities in a workload identity pool with a certain attribute. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/*`: All identities in a workload identity pool. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `deleted:principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: Deleted single identity in a workforce identity pool. For example, `deleted:principal://iam.googleapis.com/locations/global/workforcePools/my-pool-id/subject/my-subject-attribute-value`.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`. For an overview of the IAM roles and permissions, see the [IAM documentation](https://cloud.google.com/iam/docs/roles-overview). For a list of the available pre-defined roles, see [here](https://cloud.google.com/iam/docs/understanding-roles).
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//	BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates `members`, or principals, with a `role`.
type BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workforce identity pool. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/group/{group_id}`: All workforce identities in a group. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All workforce identities with a specific attribute value. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/*`: All identities in a workforce identity pool. * `principal://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workload identity pool. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/group/{group_id}`: A workload identity pool group. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All identities in a workload identity pool with a certain attribute. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/*`: All identities in a workload identity pool. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `deleted:principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: Deleted single identity in a workforce identity pool. For example, `deleted:principal://iam.googleapis.com/locations/global/workforcePools/my-pool-id/subject/my-subject-attribute-value`.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`. For an overview of the IAM roles and permissions, see the [IAM documentation](https://cloud.google.com/iam/docs/roles-overview). For a list of the available pre-defined roles, see [here](https://cloud.google.com/iam/docs/understanding-roles).
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//	BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workforce identity pool. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/group/{group_id}`: All workforce identities in a group. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All workforce identities with a specific attribute value. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/*`: All identities in a workforce identity pool. * `principal://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workload identity pool. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/group/{group_id}`: A workload identity pool group. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All identities in a workload identity pool with a certain attribute. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/*`: All identities in a workload identity pool. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `deleted:principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: Deleted single identity in a workforce identity pool. For example, `deleted:principal://iam.googleapis.com/locations/global/workforcePools/my-pool-id/subject/my-subject-attribute-value`.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`. For an overview of the IAM roles and permissions, see the [IAM documentation](https://cloud.google.com/iam/docs/roles-overview). For a list of the available pre-defined roles, see [here](https://cloud.google.com/iam/docs/understanding-roles).
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingResponse struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprResponse `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workforce identity pool. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/group/{group_id}`: All workforce identities in a group. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All workforce identities with a specific attribute value. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/*`: All identities in a workforce identity pool. * `principal://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workload identity pool. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/group/{group_id}`: A workload identity pool group. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All identities in a workload identity pool with a certain attribute. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/*`: All identities in a workload identity pool. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `deleted:principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: Deleted single identity in a workforce identity pool. For example, `deleted:principal://iam.googleapis.com/locations/global/workforcePools/my-pool-id/subject/my-subject-attribute-value`.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`. For an overview of the IAM roles and permissions, see the [IAM documentation](https://cloud.google.com/iam/docs/roles-overview). For a list of the available pre-defined roles, see [here](https://cloud.google.com/iam/docs/understanding-roles).
	Role string `pulumi:"role"`
}

// Associates `members`, or principals, with a `role`.
type BindingResponseOutput struct{ *pulumi.OutputState }

func (BindingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingResponse)(nil)).Elem()
}

func (o BindingResponseOutput) ToBindingResponseOutput() BindingResponseOutput {
	return o
}

func (o BindingResponseOutput) ToBindingResponseOutputWithContext(ctx context.Context) BindingResponseOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingResponseOutput) Condition() ExprResponseOutput {
	return o.ApplyT(func(v BindingResponse) ExprResponse { return v.Condition }).(ExprResponseOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workforce identity pool. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/group/{group_id}`: All workforce identities in a group. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All workforce identities with a specific attribute value. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/*`: All identities in a workforce identity pool. * `principal://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workload identity pool. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/group/{group_id}`: A workload identity pool group. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All identities in a workload identity pool with a certain attribute. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/*`: All identities in a workload identity pool. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `deleted:principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: Deleted single identity in a workforce identity pool. For example, `deleted:principal://iam.googleapis.com/locations/global/workforcePools/my-pool-id/subject/my-subject-attribute-value`.
func (o BindingResponseOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BindingResponse) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`. For an overview of the IAM roles and permissions, see the [IAM documentation](https://cloud.google.com/iam/docs/roles-overview). For a list of the available pre-defined roles, see [here](https://cloud.google.com/iam/docs/understanding-roles).
func (o BindingResponseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v BindingResponse) string { return v.Role }).(pulumi.StringOutput)
}

type BindingResponseArrayOutput struct{ *pulumi.OutputState }

func (BindingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingResponse)(nil)).Elem()
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutput() BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutputWithContext(ctx context.Context) BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) Index(i pulumi.IntInput) BindingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BindingResponse {
		return vs[0].([]BindingResponse)[vs[1].(int)]
	}).(BindingResponseOutput)
}

// Separate message to accommodate custom formats across IRC and Slack.
type Channel struct {
	// URI of the channel.
	Uri string `pulumi:"uri"`
}

// ChannelInput is an input type that accepts ChannelArgs and ChannelOutput values.
// You can construct a concrete instance of `ChannelInput` via:
//
//	ChannelArgs{...}
type ChannelInput interface {
	pulumi.Input

	ToChannelOutput() ChannelOutput
	ToChannelOutputWithContext(context.Context) ChannelOutput
}

// Separate message to accommodate custom formats across IRC and Slack.
type ChannelArgs struct {
	// URI of the channel.
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (ChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Channel)(nil)).Elem()
}

func (i ChannelArgs) ToChannelOutput() ChannelOutput {
	return i.ToChannelOutputWithContext(context.Background())
}

func (i ChannelArgs) ToChannelOutputWithContext(ctx context.Context) ChannelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelOutput)
}

func (i ChannelArgs) ToChannelPtrOutput() ChannelPtrOutput {
	return i.ToChannelPtrOutputWithContext(context.Background())
}

func (i ChannelArgs) ToChannelPtrOutputWithContext(ctx context.Context) ChannelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelOutput).ToChannelPtrOutputWithContext(ctx)
}

// ChannelPtrInput is an input type that accepts ChannelArgs, ChannelPtr and ChannelPtrOutput values.
// You can construct a concrete instance of `ChannelPtrInput` via:
//
//	        ChannelArgs{...}
//
//	or:
//
//	        nil
type ChannelPtrInput interface {
	pulumi.Input

	ToChannelPtrOutput() ChannelPtrOutput
	ToChannelPtrOutputWithContext(context.Context) ChannelPtrOutput
}

type channelPtrType ChannelArgs

func ChannelPtr(v *ChannelArgs) ChannelPtrInput {
	return (*channelPtrType)(v)
}

func (*channelPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Channel)(nil)).Elem()
}

func (i *channelPtrType) ToChannelPtrOutput() ChannelPtrOutput {
	return i.ToChannelPtrOutputWithContext(context.Background())
}

func (i *channelPtrType) ToChannelPtrOutputWithContext(ctx context.Context) ChannelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelPtrOutput)
}

// Separate message to accommodate custom formats across IRC and Slack.
type ChannelOutput struct{ *pulumi.OutputState }

func (ChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Channel)(nil)).Elem()
}

func (o ChannelOutput) ToChannelOutput() ChannelOutput {
	return o
}

func (o ChannelOutput) ToChannelOutputWithContext(ctx context.Context) ChannelOutput {
	return o
}

func (o ChannelOutput) ToChannelPtrOutput() ChannelPtrOutput {
	return o.ToChannelPtrOutputWithContext(context.Background())
}

func (o ChannelOutput) ToChannelPtrOutputWithContext(ctx context.Context) ChannelPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Channel) *Channel {
		return &v
	}).(ChannelPtrOutput)
}

// URI of the channel.
func (o ChannelOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v Channel) string { return v.Uri }).(pulumi.StringOutput)
}

type ChannelPtrOutput struct{ *pulumi.OutputState }

func (ChannelPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Channel)(nil)).Elem()
}

func (o ChannelPtrOutput) ToChannelPtrOutput() ChannelPtrOutput {
	return o
}

func (o ChannelPtrOutput) ToChannelPtrOutputWithContext(ctx context.Context) ChannelPtrOutput {
	return o
}

func (o ChannelPtrOutput) Elem() ChannelOutput {
	return o.ApplyT(func(v *Channel) Channel {
		if v != nil {
			return *v
		}
		var ret Channel
		return ret
	}).(ChannelOutput)
}

// URI of the channel.
func (o ChannelPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Channel) *string {
		if v == nil {
			return nil
		}
		return &v.Uri
	}).(pulumi.StringPtrOutput)
}

// Separate message to accommodate custom formats across IRC and Slack.
type ChannelResponse struct {
	// URI of the channel.
	Uri string `pulumi:"uri"`
}

// Separate message to accommodate custom formats across IRC and Slack.
type ChannelResponseOutput struct{ *pulumi.OutputState }

func (ChannelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelResponse)(nil)).Elem()
}

func (o ChannelResponseOutput) ToChannelResponseOutput() ChannelResponseOutput {
	return o
}

func (o ChannelResponseOutput) ToChannelResponseOutputWithContext(ctx context.Context) ChannelResponseOutput {
	return o
}

// URI of the channel.
func (o ChannelResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v ChannelResponse) string { return v.Uri }).(pulumi.StringOutput)
}

// Contact information of stakeholders.
type ContactInfo struct {
	// Optional. Communication channel of the contacts.
	Channel *Channel `pulumi:"channel"`
	// Optional. Contact's name. Can have a maximum length of 63 characters.
	DisplayName *string `pulumi:"displayName"`
	// Email address of the contacts.
	Email string `pulumi:"email"`
}

// ContactInfoInput is an input type that accepts ContactInfoArgs and ContactInfoOutput values.
// You can construct a concrete instance of `ContactInfoInput` via:
//
//	ContactInfoArgs{...}
type ContactInfoInput interface {
	pulumi.Input

	ToContactInfoOutput() ContactInfoOutput
	ToContactInfoOutputWithContext(context.Context) ContactInfoOutput
}

// Contact information of stakeholders.
type ContactInfoArgs struct {
	// Optional. Communication channel of the contacts.
	Channel ChannelPtrInput `pulumi:"channel"`
	// Optional. Contact's name. Can have a maximum length of 63 characters.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// Email address of the contacts.
	Email pulumi.StringInput `pulumi:"email"`
}

func (ContactInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactInfo)(nil)).Elem()
}

func (i ContactInfoArgs) ToContactInfoOutput() ContactInfoOutput {
	return i.ToContactInfoOutputWithContext(context.Background())
}

func (i ContactInfoArgs) ToContactInfoOutputWithContext(ctx context.Context) ContactInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactInfoOutput)
}

// ContactInfoArrayInput is an input type that accepts ContactInfoArray and ContactInfoArrayOutput values.
// You can construct a concrete instance of `ContactInfoArrayInput` via:
//
//	ContactInfoArray{ ContactInfoArgs{...} }
type ContactInfoArrayInput interface {
	pulumi.Input

	ToContactInfoArrayOutput() ContactInfoArrayOutput
	ToContactInfoArrayOutputWithContext(context.Context) ContactInfoArrayOutput
}

type ContactInfoArray []ContactInfoInput

func (ContactInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactInfo)(nil)).Elem()
}

func (i ContactInfoArray) ToContactInfoArrayOutput() ContactInfoArrayOutput {
	return i.ToContactInfoArrayOutputWithContext(context.Background())
}

func (i ContactInfoArray) ToContactInfoArrayOutputWithContext(ctx context.Context) ContactInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactInfoArrayOutput)
}

// Contact information of stakeholders.
type ContactInfoOutput struct{ *pulumi.OutputState }

func (ContactInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactInfo)(nil)).Elem()
}

func (o ContactInfoOutput) ToContactInfoOutput() ContactInfoOutput {
	return o
}

func (o ContactInfoOutput) ToContactInfoOutputWithContext(ctx context.Context) ContactInfoOutput {
	return o
}

// Optional. Communication channel of the contacts.
func (o ContactInfoOutput) Channel() ChannelPtrOutput {
	return o.ApplyT(func(v ContactInfo) *Channel { return v.Channel }).(ChannelPtrOutput)
}

// Optional. Contact's name. Can have a maximum length of 63 characters.
func (o ContactInfoOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactInfo) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Email address of the contacts.
func (o ContactInfoOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v ContactInfo) string { return v.Email }).(pulumi.StringOutput)
}

type ContactInfoArrayOutput struct{ *pulumi.OutputState }

func (ContactInfoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactInfo)(nil)).Elem()
}

func (o ContactInfoArrayOutput) ToContactInfoArrayOutput() ContactInfoArrayOutput {
	return o
}

func (o ContactInfoArrayOutput) ToContactInfoArrayOutputWithContext(ctx context.Context) ContactInfoArrayOutput {
	return o
}

func (o ContactInfoArrayOutput) Index(i pulumi.IntInput) ContactInfoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactInfo {
		return vs[0].([]ContactInfo)[vs[1].(int)]
	}).(ContactInfoOutput)
}

// Contact information of stakeholders.
type ContactInfoResponse struct {
	// Optional. Communication channel of the contacts.
	Channel ChannelResponse `pulumi:"channel"`
	// Optional. Contact's name. Can have a maximum length of 63 characters.
	DisplayName string `pulumi:"displayName"`
	// Email address of the contacts.
	Email string `pulumi:"email"`
}

// Contact information of stakeholders.
type ContactInfoResponseOutput struct{ *pulumi.OutputState }

func (ContactInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactInfoResponse)(nil)).Elem()
}

func (o ContactInfoResponseOutput) ToContactInfoResponseOutput() ContactInfoResponseOutput {
	return o
}

func (o ContactInfoResponseOutput) ToContactInfoResponseOutputWithContext(ctx context.Context) ContactInfoResponseOutput {
	return o
}

// Optional. Communication channel of the contacts.
func (o ContactInfoResponseOutput) Channel() ChannelResponseOutput {
	return o.ApplyT(func(v ContactInfoResponse) ChannelResponse { return v.Channel }).(ChannelResponseOutput)
}

// Optional. Contact's name. Can have a maximum length of 63 characters.
func (o ContactInfoResponseOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v ContactInfoResponse) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Email address of the contacts.
func (o ContactInfoResponseOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v ContactInfoResponse) string { return v.Email }).(pulumi.StringOutput)
}

type ContactInfoResponseArrayOutput struct{ *pulumi.OutputState }

func (ContactInfoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactInfoResponse)(nil)).Elem()
}

func (o ContactInfoResponseArrayOutput) ToContactInfoResponseArrayOutput() ContactInfoResponseArrayOutput {
	return o
}

func (o ContactInfoResponseArrayOutput) ToContactInfoResponseArrayOutputWithContext(ctx context.Context) ContactInfoResponseArrayOutput {
	return o
}

func (o ContactInfoResponseArrayOutput) Index(i pulumi.IntInput) ContactInfoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactInfoResponse {
		return vs[0].([]ContactInfoResponse)[vs[1].(int)]
	}).(ContactInfoResponseOutput)
}

// Criticality of the Application, Service, or Workload
type Criticality struct {
	// Optional. Criticality level. Can contain only lowercase letters, numeric characters, underscores, and dashes. Can have a maximum length of 63 characters. Deprecated: Please refer to type instead.
	//
	// Deprecated: Optional. Criticality level. Can contain only lowercase letters, numeric characters, underscores, and dashes. Can have a maximum length of 63 characters. Deprecated: Please refer to type instead.
	Level *string `pulumi:"level"`
	// Optional. Indicates mission-critical Application, Service, or Workload. Deprecated: Please refer to type instead.
	//
	// Deprecated: Optional. Indicates mission-critical Application, Service, or Workload. Deprecated: Please refer to type instead.
	MissionCritical *bool `pulumi:"missionCritical"`
	// Criticality Type.
	Type CriticalityType `pulumi:"type"`
}

// CriticalityInput is an input type that accepts CriticalityArgs and CriticalityOutput values.
// You can construct a concrete instance of `CriticalityInput` via:
//
//	CriticalityArgs{...}
type CriticalityInput interface {
	pulumi.Input

	ToCriticalityOutput() CriticalityOutput
	ToCriticalityOutputWithContext(context.Context) CriticalityOutput
}

// Criticality of the Application, Service, or Workload
type CriticalityArgs struct {
	// Optional. Criticality level. Can contain only lowercase letters, numeric characters, underscores, and dashes. Can have a maximum length of 63 characters. Deprecated: Please refer to type instead.
	//
	// Deprecated: Optional. Criticality level. Can contain only lowercase letters, numeric characters, underscores, and dashes. Can have a maximum length of 63 characters. Deprecated: Please refer to type instead.
	Level pulumi.StringPtrInput `pulumi:"level"`
	// Optional. Indicates mission-critical Application, Service, or Workload. Deprecated: Please refer to type instead.
	//
	// Deprecated: Optional. Indicates mission-critical Application, Service, or Workload. Deprecated: Please refer to type instead.
	MissionCritical pulumi.BoolPtrInput `pulumi:"missionCritical"`
	// Criticality Type.
	Type CriticalityTypeInput `pulumi:"type"`
}

func (CriticalityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Criticality)(nil)).Elem()
}

func (i CriticalityArgs) ToCriticalityOutput() CriticalityOutput {
	return i.ToCriticalityOutputWithContext(context.Background())
}

func (i CriticalityArgs) ToCriticalityOutputWithContext(ctx context.Context) CriticalityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CriticalityOutput)
}

func (i CriticalityArgs) ToCriticalityPtrOutput() CriticalityPtrOutput {
	return i.ToCriticalityPtrOutputWithContext(context.Background())
}

func (i CriticalityArgs) ToCriticalityPtrOutputWithContext(ctx context.Context) CriticalityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CriticalityOutput).ToCriticalityPtrOutputWithContext(ctx)
}

// CriticalityPtrInput is an input type that accepts CriticalityArgs, CriticalityPtr and CriticalityPtrOutput values.
// You can construct a concrete instance of `CriticalityPtrInput` via:
//
//	        CriticalityArgs{...}
//
//	or:
//
//	        nil
type CriticalityPtrInput interface {
	pulumi.Input

	ToCriticalityPtrOutput() CriticalityPtrOutput
	ToCriticalityPtrOutputWithContext(context.Context) CriticalityPtrOutput
}

type criticalityPtrType CriticalityArgs

func CriticalityPtr(v *CriticalityArgs) CriticalityPtrInput {
	return (*criticalityPtrType)(v)
}

func (*criticalityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Criticality)(nil)).Elem()
}

func (i *criticalityPtrType) ToCriticalityPtrOutput() CriticalityPtrOutput {
	return i.ToCriticalityPtrOutputWithContext(context.Background())
}

func (i *criticalityPtrType) ToCriticalityPtrOutputWithContext(ctx context.Context) CriticalityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CriticalityPtrOutput)
}

// Criticality of the Application, Service, or Workload
type CriticalityOutput struct{ *pulumi.OutputState }

func (CriticalityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Criticality)(nil)).Elem()
}

func (o CriticalityOutput) ToCriticalityOutput() CriticalityOutput {
	return o
}

func (o CriticalityOutput) ToCriticalityOutputWithContext(ctx context.Context) CriticalityOutput {
	return o
}

func (o CriticalityOutput) ToCriticalityPtrOutput() CriticalityPtrOutput {
	return o.ToCriticalityPtrOutputWithContext(context.Background())
}

func (o CriticalityOutput) ToCriticalityPtrOutputWithContext(ctx context.Context) CriticalityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Criticality) *Criticality {
		return &v
	}).(CriticalityPtrOutput)
}

// Optional. Criticality level. Can contain only lowercase letters, numeric characters, underscores, and dashes. Can have a maximum length of 63 characters. Deprecated: Please refer to type instead.
//
// Deprecated: Optional. Criticality level. Can contain only lowercase letters, numeric characters, underscores, and dashes. Can have a maximum length of 63 characters. Deprecated: Please refer to type instead.
func (o CriticalityOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Criticality) *string { return v.Level }).(pulumi.StringPtrOutput)
}

// Optional. Indicates mission-critical Application, Service, or Workload. Deprecated: Please refer to type instead.
//
// Deprecated: Optional. Indicates mission-critical Application, Service, or Workload. Deprecated: Please refer to type instead.
func (o CriticalityOutput) MissionCritical() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Criticality) *bool { return v.MissionCritical }).(pulumi.BoolPtrOutput)
}

// Criticality Type.
func (o CriticalityOutput) Type() CriticalityTypeOutput {
	return o.ApplyT(func(v Criticality) CriticalityType { return v.Type }).(CriticalityTypeOutput)
}

type CriticalityPtrOutput struct{ *pulumi.OutputState }

func (CriticalityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Criticality)(nil)).Elem()
}

func (o CriticalityPtrOutput) ToCriticalityPtrOutput() CriticalityPtrOutput {
	return o
}

func (o CriticalityPtrOutput) ToCriticalityPtrOutputWithContext(ctx context.Context) CriticalityPtrOutput {
	return o
}

func (o CriticalityPtrOutput) Elem() CriticalityOutput {
	return o.ApplyT(func(v *Criticality) Criticality {
		if v != nil {
			return *v
		}
		var ret Criticality
		return ret
	}).(CriticalityOutput)
}

// Optional. Criticality level. Can contain only lowercase letters, numeric characters, underscores, and dashes. Can have a maximum length of 63 characters. Deprecated: Please refer to type instead.
//
// Deprecated: Optional. Criticality level. Can contain only lowercase letters, numeric characters, underscores, and dashes. Can have a maximum length of 63 characters. Deprecated: Please refer to type instead.
func (o CriticalityPtrOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Criticality) *string {
		if v == nil {
			return nil
		}
		return v.Level
	}).(pulumi.StringPtrOutput)
}

// Optional. Indicates mission-critical Application, Service, or Workload. Deprecated: Please refer to type instead.
//
// Deprecated: Optional. Indicates mission-critical Application, Service, or Workload. Deprecated: Please refer to type instead.
func (o CriticalityPtrOutput) MissionCritical() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Criticality) *bool {
		if v == nil {
			return nil
		}
		return v.MissionCritical
	}).(pulumi.BoolPtrOutput)
}

// Criticality Type.
func (o CriticalityPtrOutput) Type() CriticalityTypePtrOutput {
	return o.ApplyT(func(v *Criticality) *CriticalityType {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(CriticalityTypePtrOutput)
}

// Criticality of the Application, Service, or Workload
type CriticalityResponse struct {
	// Optional. Criticality level. Can contain only lowercase letters, numeric characters, underscores, and dashes. Can have a maximum length of 63 characters. Deprecated: Please refer to type instead.
	//
	// Deprecated: Optional. Criticality level. Can contain only lowercase letters, numeric characters, underscores, and dashes. Can have a maximum length of 63 characters. Deprecated: Please refer to type instead.
	Level string `pulumi:"level"`
	// Optional. Indicates mission-critical Application, Service, or Workload. Deprecated: Please refer to type instead.
	//
	// Deprecated: Optional. Indicates mission-critical Application, Service, or Workload. Deprecated: Please refer to type instead.
	MissionCritical bool `pulumi:"missionCritical"`
	// Criticality Type.
	Type string `pulumi:"type"`
}

// Criticality of the Application, Service, or Workload
type CriticalityResponseOutput struct{ *pulumi.OutputState }

func (CriticalityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CriticalityResponse)(nil)).Elem()
}

func (o CriticalityResponseOutput) ToCriticalityResponseOutput() CriticalityResponseOutput {
	return o
}

func (o CriticalityResponseOutput) ToCriticalityResponseOutputWithContext(ctx context.Context) CriticalityResponseOutput {
	return o
}

// Optional. Criticality level. Can contain only lowercase letters, numeric characters, underscores, and dashes. Can have a maximum length of 63 characters. Deprecated: Please refer to type instead.
//
// Deprecated: Optional. Criticality level. Can contain only lowercase letters, numeric characters, underscores, and dashes. Can have a maximum length of 63 characters. Deprecated: Please refer to type instead.
func (o CriticalityResponseOutput) Level() pulumi.StringOutput {
	return o.ApplyT(func(v CriticalityResponse) string { return v.Level }).(pulumi.StringOutput)
}

// Optional. Indicates mission-critical Application, Service, or Workload. Deprecated: Please refer to type instead.
//
// Deprecated: Optional. Indicates mission-critical Application, Service, or Workload. Deprecated: Please refer to type instead.
func (o CriticalityResponseOutput) MissionCritical() pulumi.BoolOutput {
	return o.ApplyT(func(v CriticalityResponse) bool { return v.MissionCritical }).(pulumi.BoolOutput)
}

// Criticality Type.
func (o CriticalityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CriticalityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Environment of the Application, Service, or Workload
type Environment struct {
	// Optional. Environment name. Can contain only lowercase letters, numeric characters, underscores, and dashes. Can have a maximum length of 63 characters. Deprecated: Please refer to type instead.
	//
	// Deprecated: Optional. Environment name. Can contain only lowercase letters, numeric characters, underscores, and dashes. Can have a maximum length of 63 characters. Deprecated: Please refer to type instead.
	Environment *string `pulumi:"environment"`
	// Environment Type.
	Type EnvironmentType `pulumi:"type"`
}

// EnvironmentInput is an input type that accepts EnvironmentArgs and EnvironmentOutput values.
// You can construct a concrete instance of `EnvironmentInput` via:
//
//	EnvironmentArgs{...}
type EnvironmentInput interface {
	pulumi.Input

	ToEnvironmentOutput() EnvironmentOutput
	ToEnvironmentOutputWithContext(context.Context) EnvironmentOutput
}

// Environment of the Application, Service, or Workload
type EnvironmentArgs struct {
	// Optional. Environment name. Can contain only lowercase letters, numeric characters, underscores, and dashes. Can have a maximum length of 63 characters. Deprecated: Please refer to type instead.
	//
	// Deprecated: Optional. Environment name. Can contain only lowercase letters, numeric characters, underscores, and dashes. Can have a maximum length of 63 characters. Deprecated: Please refer to type instead.
	Environment pulumi.StringPtrInput `pulumi:"environment"`
	// Environment Type.
	Type EnvironmentTypeInput `pulumi:"type"`
}

func (EnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Environment)(nil)).Elem()
}

func (i EnvironmentArgs) ToEnvironmentOutput() EnvironmentOutput {
	return i.ToEnvironmentOutputWithContext(context.Background())
}

func (i EnvironmentArgs) ToEnvironmentOutputWithContext(ctx context.Context) EnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentOutput)
}

func (i EnvironmentArgs) ToEnvironmentPtrOutput() EnvironmentPtrOutput {
	return i.ToEnvironmentPtrOutputWithContext(context.Background())
}

func (i EnvironmentArgs) ToEnvironmentPtrOutputWithContext(ctx context.Context) EnvironmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentOutput).ToEnvironmentPtrOutputWithContext(ctx)
}

// EnvironmentPtrInput is an input type that accepts EnvironmentArgs, EnvironmentPtr and EnvironmentPtrOutput values.
// You can construct a concrete instance of `EnvironmentPtrInput` via:
//
//	        EnvironmentArgs{...}
//
//	or:
//
//	        nil
type EnvironmentPtrInput interface {
	pulumi.Input

	ToEnvironmentPtrOutput() EnvironmentPtrOutput
	ToEnvironmentPtrOutputWithContext(context.Context) EnvironmentPtrOutput
}

type environmentPtrType EnvironmentArgs

func EnvironmentPtr(v *EnvironmentArgs) EnvironmentPtrInput {
	return (*environmentPtrType)(v)
}

func (*environmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Environment)(nil)).Elem()
}

func (i *environmentPtrType) ToEnvironmentPtrOutput() EnvironmentPtrOutput {
	return i.ToEnvironmentPtrOutputWithContext(context.Background())
}

func (i *environmentPtrType) ToEnvironmentPtrOutputWithContext(ctx context.Context) EnvironmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentPtrOutput)
}

// Environment of the Application, Service, or Workload
type EnvironmentOutput struct{ *pulumi.OutputState }

func (EnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Environment)(nil)).Elem()
}

func (o EnvironmentOutput) ToEnvironmentOutput() EnvironmentOutput {
	return o
}

func (o EnvironmentOutput) ToEnvironmentOutputWithContext(ctx context.Context) EnvironmentOutput {
	return o
}

func (o EnvironmentOutput) ToEnvironmentPtrOutput() EnvironmentPtrOutput {
	return o.ToEnvironmentPtrOutputWithContext(context.Background())
}

func (o EnvironmentOutput) ToEnvironmentPtrOutputWithContext(ctx context.Context) EnvironmentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Environment) *Environment {
		return &v
	}).(EnvironmentPtrOutput)
}

// Optional. Environment name. Can contain only lowercase letters, numeric characters, underscores, and dashes. Can have a maximum length of 63 characters. Deprecated: Please refer to type instead.
//
// Deprecated: Optional. Environment name. Can contain only lowercase letters, numeric characters, underscores, and dashes. Can have a maximum length of 63 characters. Deprecated: Please refer to type instead.
func (o EnvironmentOutput) Environment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Environment) *string { return v.Environment }).(pulumi.StringPtrOutput)
}

// Environment Type.
func (o EnvironmentOutput) Type() EnvironmentTypeOutput {
	return o.ApplyT(func(v Environment) EnvironmentType { return v.Type }).(EnvironmentTypeOutput)
}

type EnvironmentPtrOutput struct{ *pulumi.OutputState }

func (EnvironmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Environment)(nil)).Elem()
}

func (o EnvironmentPtrOutput) ToEnvironmentPtrOutput() EnvironmentPtrOutput {
	return o
}

func (o EnvironmentPtrOutput) ToEnvironmentPtrOutputWithContext(ctx context.Context) EnvironmentPtrOutput {
	return o
}

func (o EnvironmentPtrOutput) Elem() EnvironmentOutput {
	return o.ApplyT(func(v *Environment) Environment {
		if v != nil {
			return *v
		}
		var ret Environment
		return ret
	}).(EnvironmentOutput)
}

// Optional. Environment name. Can contain only lowercase letters, numeric characters, underscores, and dashes. Can have a maximum length of 63 characters. Deprecated: Please refer to type instead.
//
// Deprecated: Optional. Environment name. Can contain only lowercase letters, numeric characters, underscores, and dashes. Can have a maximum length of 63 characters. Deprecated: Please refer to type instead.
func (o EnvironmentPtrOutput) Environment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Environment) *string {
		if v == nil {
			return nil
		}
		return v.Environment
	}).(pulumi.StringPtrOutput)
}

// Environment Type.
func (o EnvironmentPtrOutput) Type() EnvironmentTypePtrOutput {
	return o.ApplyT(func(v *Environment) *EnvironmentType {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(EnvironmentTypePtrOutput)
}

// Environment of the Application, Service, or Workload
type EnvironmentResponse struct {
	// Optional. Environment name. Can contain only lowercase letters, numeric characters, underscores, and dashes. Can have a maximum length of 63 characters. Deprecated: Please refer to type instead.
	//
	// Deprecated: Optional. Environment name. Can contain only lowercase letters, numeric characters, underscores, and dashes. Can have a maximum length of 63 characters. Deprecated: Please refer to type instead.
	Environment string `pulumi:"environment"`
	// Environment Type.
	Type string `pulumi:"type"`
}

// Environment of the Application, Service, or Workload
type EnvironmentResponseOutput struct{ *pulumi.OutputState }

func (EnvironmentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentResponse)(nil)).Elem()
}

func (o EnvironmentResponseOutput) ToEnvironmentResponseOutput() EnvironmentResponseOutput {
	return o
}

func (o EnvironmentResponseOutput) ToEnvironmentResponseOutputWithContext(ctx context.Context) EnvironmentResponseOutput {
	return o
}

// Optional. Environment name. Can contain only lowercase letters, numeric characters, underscores, and dashes. Can have a maximum length of 63 characters. Deprecated: Please refer to type instead.
//
// Deprecated: Optional. Environment name. Can contain only lowercase letters, numeric characters, underscores, and dashes. Can have a maximum length of 63 characters. Deprecated: Please refer to type instead.
func (o EnvironmentResponseOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentResponse) string { return v.Environment }).(pulumi.StringOutput)
}

// Environment Type.
func (o EnvironmentResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//	ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//	        ExprArgs{...}
//
//	or:
//
//	        nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr {
		if v != nil {
			return *v
		}
		var ret Expr
		return ret
	}).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponse struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title string `pulumi:"title"`
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseOutput struct{ *pulumi.OutputState }

func (ExprResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (o ExprResponseOutput) ToExprResponseOutput() ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return o
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Title }).(pulumi.StringOutput)
}

// Scope of an application.
type Scope struct {
	// Scope Type.
	Type ScopeType `pulumi:"type"`
}

// ScopeInput is an input type that accepts ScopeArgs and ScopeOutput values.
// You can construct a concrete instance of `ScopeInput` via:
//
//	ScopeArgs{...}
type ScopeInput interface {
	pulumi.Input

	ToScopeOutput() ScopeOutput
	ToScopeOutputWithContext(context.Context) ScopeOutput
}

// Scope of an application.
type ScopeArgs struct {
	// Scope Type.
	Type ScopeTypeInput `pulumi:"type"`
}

func (ScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Scope)(nil)).Elem()
}

func (i ScopeArgs) ToScopeOutput() ScopeOutput {
	return i.ToScopeOutputWithContext(context.Background())
}

func (i ScopeArgs) ToScopeOutputWithContext(ctx context.Context) ScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeOutput)
}

// Scope of an application.
type ScopeOutput struct{ *pulumi.OutputState }

func (ScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Scope)(nil)).Elem()
}

func (o ScopeOutput) ToScopeOutput() ScopeOutput {
	return o
}

func (o ScopeOutput) ToScopeOutputWithContext(ctx context.Context) ScopeOutput {
	return o
}

// Scope Type.
func (o ScopeOutput) Type() ScopeTypeOutput {
	return o.ApplyT(func(v Scope) ScopeType { return v.Type }).(ScopeTypeOutput)
}

// Scope of an application.
type ScopeResponse struct {
	// Scope Type.
	Type string `pulumi:"type"`
}

// Scope of an application.
type ScopeResponseOutput struct{ *pulumi.OutputState }

func (ScopeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScopeResponse)(nil)).Elem()
}

func (o ScopeResponseOutput) ToScopeResponseOutput() ScopeResponseOutput {
	return o
}

func (o ScopeResponseOutput) ToScopeResponseOutputWithContext(ctx context.Context) ScopeResponseOutput {
	return o
}

// Scope Type.
func (o ScopeResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ScopeResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Properties of an underlying cloud resource that can comprise a Service.
type ServicePropertiesResponse struct {
	// The service project identifier that the underlying cloud resource resides in.
	GcpProject string `pulumi:"gcpProject"`
	// The location that the underlying resource resides in, for example, us-west1.
	Location string `pulumi:"location"`
	// The location that the underlying resource resides in if it is zonal, for example, us-west1-a).
	Zone string `pulumi:"zone"`
}

// Properties of an underlying cloud resource that can comprise a Service.
type ServicePropertiesResponseOutput struct{ *pulumi.OutputState }

func (ServicePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePropertiesResponse)(nil)).Elem()
}

func (o ServicePropertiesResponseOutput) ToServicePropertiesResponseOutput() ServicePropertiesResponseOutput {
	return o
}

func (o ServicePropertiesResponseOutput) ToServicePropertiesResponseOutputWithContext(ctx context.Context) ServicePropertiesResponseOutput {
	return o
}

// The service project identifier that the underlying cloud resource resides in.
func (o ServicePropertiesResponseOutput) GcpProject() pulumi.StringOutput {
	return o.ApplyT(func(v ServicePropertiesResponse) string { return v.GcpProject }).(pulumi.StringOutput)
}

// The location that the underlying resource resides in, for example, us-west1.
func (o ServicePropertiesResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ServicePropertiesResponse) string { return v.Location }).(pulumi.StringOutput)
}

// The location that the underlying resource resides in if it is zonal, for example, us-west1-a).
func (o ServicePropertiesResponseOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v ServicePropertiesResponse) string { return v.Zone }).(pulumi.StringOutput)
}

// Reference to an underlying networking resource that can comprise a Service.
type ServiceReferenceResponse struct {
	// Additional path under the resource URI (demultiplexing one resource URI into multiple entries). Smallest unit a policy can be attached to. Examples: URL Map path entry.
	Path string `pulumi:"path"`
	// The underlying resource URI (For example, URI of Forwarding Rule, URL Map, and Backend Service).
	Uri string `pulumi:"uri"`
}

// Reference to an underlying networking resource that can comprise a Service.
type ServiceReferenceResponseOutput struct{ *pulumi.OutputState }

func (ServiceReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceReferenceResponse)(nil)).Elem()
}

func (o ServiceReferenceResponseOutput) ToServiceReferenceResponseOutput() ServiceReferenceResponseOutput {
	return o
}

func (o ServiceReferenceResponseOutput) ToServiceReferenceResponseOutputWithContext(ctx context.Context) ServiceReferenceResponseOutput {
	return o
}

// Additional path under the resource URI (demultiplexing one resource URI into multiple entries). Smallest unit a policy can be attached to. Examples: URL Map path entry.
func (o ServiceReferenceResponseOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceReferenceResponse) string { return v.Path }).(pulumi.StringOutput)
}

// The underlying resource URI (For example, URI of Forwarding Rule, URL Map, and Backend Service).
func (o ServiceReferenceResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceReferenceResponse) string { return v.Uri }).(pulumi.StringOutput)
}

// Properties of an underlying compute resource represented by the Workload.
type WorkloadPropertiesResponse struct {
	// The service project identifier that the underlying cloud resource resides in. Empty for non cloud resources.
	GcpProject string `pulumi:"gcpProject"`
	// The location that the underlying compute resource resides in (e.g us-west1).
	Location string `pulumi:"location"`
	// The location that the underlying compute resource resides in if it is zonal (e.g us-west1-a).
	Zone string `pulumi:"zone"`
}

// Properties of an underlying compute resource represented by the Workload.
type WorkloadPropertiesResponseOutput struct{ *pulumi.OutputState }

func (WorkloadPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkloadPropertiesResponse)(nil)).Elem()
}

func (o WorkloadPropertiesResponseOutput) ToWorkloadPropertiesResponseOutput() WorkloadPropertiesResponseOutput {
	return o
}

func (o WorkloadPropertiesResponseOutput) ToWorkloadPropertiesResponseOutputWithContext(ctx context.Context) WorkloadPropertiesResponseOutput {
	return o
}

// The service project identifier that the underlying cloud resource resides in. Empty for non cloud resources.
func (o WorkloadPropertiesResponseOutput) GcpProject() pulumi.StringOutput {
	return o.ApplyT(func(v WorkloadPropertiesResponse) string { return v.GcpProject }).(pulumi.StringOutput)
}

// The location that the underlying compute resource resides in (e.g us-west1).
func (o WorkloadPropertiesResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v WorkloadPropertiesResponse) string { return v.Location }).(pulumi.StringOutput)
}

// The location that the underlying compute resource resides in if it is zonal (e.g us-west1-a).
func (o WorkloadPropertiesResponseOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v WorkloadPropertiesResponse) string { return v.Zone }).(pulumi.StringOutput)
}

// Reference of an underlying compute resource represented by the Workload.
type WorkloadReferenceResponse struct {
	// The underlying compute resource uri.
	Uri string `pulumi:"uri"`
}

// Reference of an underlying compute resource represented by the Workload.
type WorkloadReferenceResponseOutput struct{ *pulumi.OutputState }

func (WorkloadReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkloadReferenceResponse)(nil)).Elem()
}

func (o WorkloadReferenceResponseOutput) ToWorkloadReferenceResponseOutput() WorkloadReferenceResponseOutput {
	return o
}

func (o WorkloadReferenceResponseOutput) ToWorkloadReferenceResponseOutputWithContext(ctx context.Context) WorkloadReferenceResponseOutput {
	return o
}

// The underlying compute resource uri.
func (o WorkloadReferenceResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v WorkloadReferenceResponse) string { return v.Uri }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AttributesInput)(nil)).Elem(), AttributesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AttributesPtrInput)(nil)).Elem(), AttributesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigInput)(nil)).Elem(), AuditConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigArrayInput)(nil)).Elem(), AuditConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigInput)(nil)).Elem(), AuditLogConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigArrayInput)(nil)).Elem(), AuditLogConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingInput)(nil)).Elem(), BindingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingArrayInput)(nil)).Elem(), BindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChannelInput)(nil)).Elem(), ChannelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChannelPtrInput)(nil)).Elem(), ChannelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactInfoInput)(nil)).Elem(), ContactInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactInfoArrayInput)(nil)).Elem(), ContactInfoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CriticalityInput)(nil)).Elem(), CriticalityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CriticalityPtrInput)(nil)).Elem(), CriticalityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentInput)(nil)).Elem(), EnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentPtrInput)(nil)).Elem(), EnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprPtrInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScopeInput)(nil)).Elem(), ScopeArgs{})
	pulumi.RegisterOutputType(AttributesOutput{})
	pulumi.RegisterOutputType(AttributesPtrOutput{})
	pulumi.RegisterOutputType(AttributesResponseOutput{})
	pulumi.RegisterOutputType(AuditConfigOutput{})
	pulumi.RegisterOutputType(AuditConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigOutput{})
	pulumi.RegisterOutputType(AuditLogConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(BindingResponseOutput{})
	pulumi.RegisterOutputType(BindingResponseArrayOutput{})
	pulumi.RegisterOutputType(ChannelOutput{})
	pulumi.RegisterOutputType(ChannelPtrOutput{})
	pulumi.RegisterOutputType(ChannelResponseOutput{})
	pulumi.RegisterOutputType(ContactInfoOutput{})
	pulumi.RegisterOutputType(ContactInfoArrayOutput{})
	pulumi.RegisterOutputType(ContactInfoResponseOutput{})
	pulumi.RegisterOutputType(ContactInfoResponseArrayOutput{})
	pulumi.RegisterOutputType(CriticalityOutput{})
	pulumi.RegisterOutputType(CriticalityPtrOutput{})
	pulumi.RegisterOutputType(CriticalityResponseOutput{})
	pulumi.RegisterOutputType(EnvironmentOutput{})
	pulumi.RegisterOutputType(EnvironmentPtrOutput{})
	pulumi.RegisterOutputType(EnvironmentResponseOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(ExprResponseOutput{})
	pulumi.RegisterOutputType(ScopeOutput{})
	pulumi.RegisterOutputType(ScopeResponseOutput{})
	pulumi.RegisterOutputType(ServicePropertiesResponseOutput{})
	pulumi.RegisterOutputType(ServiceReferenceResponseOutput{})
	pulumi.RegisterOutputType(WorkloadPropertiesResponseOutput{})
	pulumi.RegisterOutputType(WorkloadReferenceResponseOutput{})
}
