// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a Workload in an Application.
type Workload struct {
	pulumi.CustomResourceState

	ApplicationId pulumi.StringOutput `pulumi:"applicationId"`
	// Optional. Consumer provided attributes.
	Attributes AttributesResponseOutput `pulumi:"attributes"`
	// Create time.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Optional. User-defined description of a Workload. Can have a maximum length of 2048 characters.
	Description pulumi.StringOutput `pulumi:"description"`
	// Immutable. The resource name of the original discovered workload.
	DiscoveredWorkload pulumi.StringOutput `pulumi:"discoveredWorkload"`
	// Optional. User-defined name for the Workload. Can have a maximum length of 63 characters.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	Location    pulumi.StringOutput `pulumi:"location"`
	// Identifier. The resource name of the Workload. Format: "projects/{host-project-id}/locations/{location}/applications/{application-id}/workloads/{workload-id}"
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrOutput `pulumi:"requestId"`
	// Workload state.
	State pulumi.StringOutput `pulumi:"state"`
	// A universally unique identifier (UUID) for the `Workload` in the UUID4 format.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// Update time.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// Required. The Workload identifier. Must contain only lowercase letters, numbers or hyphens, with the first character a letter, the last a letter or a number, and a 63 character maximum.
	WorkloadId pulumi.StringOutput `pulumi:"workloadId"`
	// Properties of an underlying compute resource represented by the Workload. These are immutable.
	WorkloadProperties WorkloadPropertiesResponseOutput `pulumi:"workloadProperties"`
	// Reference of an underlying compute resource represented by the Workload. These are immutable.
	WorkloadReference WorkloadReferenceResponseOutput `pulumi:"workloadReference"`
}

// NewWorkload registers a new resource with the given unique name, arguments, and options.
func NewWorkload(ctx *pulumi.Context,
	name string, args *WorkloadArgs, opts ...pulumi.ResourceOption) (*Workload, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationId == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationId'")
	}
	if args.DiscoveredWorkload == nil {
		return nil, errors.New("invalid value for required argument 'DiscoveredWorkload'")
	}
	if args.WorkloadId == nil {
		return nil, errors.New("invalid value for required argument 'WorkloadId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"applicationId",
		"location",
		"project",
		"workloadId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Workload
	err := ctx.RegisterResource("google-native:apphub/v1alpha:Workload", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkload gets an existing Workload resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkload(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkloadState, opts ...pulumi.ResourceOption) (*Workload, error) {
	var resource Workload
	err := ctx.ReadResource("google-native:apphub/v1alpha:Workload", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Workload resources.
type workloadState struct {
}

type WorkloadState struct {
}

func (WorkloadState) ElementType() reflect.Type {
	return reflect.TypeOf((*workloadState)(nil)).Elem()
}

type workloadArgs struct {
	ApplicationId string `pulumi:"applicationId"`
	// Optional. Consumer provided attributes.
	Attributes *Attributes `pulumi:"attributes"`
	// Optional. User-defined description of a Workload. Can have a maximum length of 2048 characters.
	Description *string `pulumi:"description"`
	// Immutable. The resource name of the original discovered workload.
	DiscoveredWorkload string `pulumi:"discoveredWorkload"`
	// Optional. User-defined name for the Workload. Can have a maximum length of 63 characters.
	DisplayName *string `pulumi:"displayName"`
	Location    *string `pulumi:"location"`
	// Identifier. The resource name of the Workload. Format: "projects/{host-project-id}/locations/{location}/applications/{application-id}/workloads/{workload-id}"
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId *string `pulumi:"requestId"`
	// Required. The Workload identifier. Must contain only lowercase letters, numbers or hyphens, with the first character a letter, the last a letter or a number, and a 63 character maximum.
	WorkloadId string `pulumi:"workloadId"`
}

// The set of arguments for constructing a Workload resource.
type WorkloadArgs struct {
	ApplicationId pulumi.StringInput
	// Optional. Consumer provided attributes.
	Attributes AttributesPtrInput
	// Optional. User-defined description of a Workload. Can have a maximum length of 2048 characters.
	Description pulumi.StringPtrInput
	// Immutable. The resource name of the original discovered workload.
	DiscoveredWorkload pulumi.StringInput
	// Optional. User-defined name for the Workload. Can have a maximum length of 63 characters.
	DisplayName pulumi.StringPtrInput
	Location    pulumi.StringPtrInput
	// Identifier. The resource name of the Workload. Format: "projects/{host-project-id}/locations/{location}/applications/{application-id}/workloads/{workload-id}"
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrInput
	// Required. The Workload identifier. Must contain only lowercase letters, numbers or hyphens, with the first character a letter, the last a letter or a number, and a 63 character maximum.
	WorkloadId pulumi.StringInput
}

func (WorkloadArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workloadArgs)(nil)).Elem()
}

type WorkloadInput interface {
	pulumi.Input

	ToWorkloadOutput() WorkloadOutput
	ToWorkloadOutputWithContext(ctx context.Context) WorkloadOutput
}

func (*Workload) ElementType() reflect.Type {
	return reflect.TypeOf((**Workload)(nil)).Elem()
}

func (i *Workload) ToWorkloadOutput() WorkloadOutput {
	return i.ToWorkloadOutputWithContext(context.Background())
}

func (i *Workload) ToWorkloadOutputWithContext(ctx context.Context) WorkloadOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadOutput)
}

type WorkloadOutput struct{ *pulumi.OutputState }

func (WorkloadOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Workload)(nil)).Elem()
}

func (o WorkloadOutput) ToWorkloadOutput() WorkloadOutput {
	return o
}

func (o WorkloadOutput) ToWorkloadOutputWithContext(ctx context.Context) WorkloadOutput {
	return o
}

func (o WorkloadOutput) ApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Workload) pulumi.StringOutput { return v.ApplicationId }).(pulumi.StringOutput)
}

// Optional. Consumer provided attributes.
func (o WorkloadOutput) Attributes() AttributesResponseOutput {
	return o.ApplyT(func(v *Workload) AttributesResponseOutput { return v.Attributes }).(AttributesResponseOutput)
}

// Create time.
func (o WorkloadOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Workload) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Optional. User-defined description of a Workload. Can have a maximum length of 2048 characters.
func (o WorkloadOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Workload) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Immutable. The resource name of the original discovered workload.
func (o WorkloadOutput) DiscoveredWorkload() pulumi.StringOutput {
	return o.ApplyT(func(v *Workload) pulumi.StringOutput { return v.DiscoveredWorkload }).(pulumi.StringOutput)
}

// Optional. User-defined name for the Workload. Can have a maximum length of 63 characters.
func (o WorkloadOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Workload) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

func (o WorkloadOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Workload) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Identifier. The resource name of the Workload. Format: "projects/{host-project-id}/locations/{location}/applications/{application-id}/workloads/{workload-id}"
func (o WorkloadOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Workload) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o WorkloadOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Workload) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
func (o WorkloadOutput) RequestId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workload) pulumi.StringPtrOutput { return v.RequestId }).(pulumi.StringPtrOutput)
}

// Workload state.
func (o WorkloadOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Workload) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// A universally unique identifier (UUID) for the `Workload` in the UUID4 format.
func (o WorkloadOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *Workload) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// Update time.
func (o WorkloadOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Workload) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// Required. The Workload identifier. Must contain only lowercase letters, numbers or hyphens, with the first character a letter, the last a letter or a number, and a 63 character maximum.
func (o WorkloadOutput) WorkloadId() pulumi.StringOutput {
	return o.ApplyT(func(v *Workload) pulumi.StringOutput { return v.WorkloadId }).(pulumi.StringOutput)
}

// Properties of an underlying compute resource represented by the Workload. These are immutable.
func (o WorkloadOutput) WorkloadProperties() WorkloadPropertiesResponseOutput {
	return o.ApplyT(func(v *Workload) WorkloadPropertiesResponseOutput { return v.WorkloadProperties }).(WorkloadPropertiesResponseOutput)
}

// Reference of an underlying compute resource represented by the Workload. These are immutable.
func (o WorkloadOutput) WorkloadReference() WorkloadReferenceResponseOutput {
	return o.ApplyT(func(v *Workload) WorkloadReferenceResponseOutput { return v.WorkloadReference }).(WorkloadReferenceResponseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkloadInput)(nil)).Elem(), &Workload{})
	pulumi.RegisterOutputType(WorkloadOutput{})
}
