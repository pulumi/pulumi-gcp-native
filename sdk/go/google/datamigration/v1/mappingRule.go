// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new mapping rule for a given conversion workspace.
type MappingRule struct {
	pulumi.CustomResourceState

	// Optional. Rule to specify how the data contained in a column should be transformed (such as trimmed, rounded, etc) provided that the data meets certain criteria.
	ConditionalColumnSetValue ConditionalColumnSetValueResponseOutput `pulumi:"conditionalColumnSetValue"`
	ConversionWorkspaceId     pulumi.StringOutput                     `pulumi:"conversionWorkspaceId"`
	// Optional. Rule to specify how multiple tables should be converted with an additional rowid column.
	ConvertRowidColumn ConvertRowIdToColumnResponseOutput `pulumi:"convertRowidColumn"`
	// Optional. A human readable name
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Optional. Rule to specify how multiple entities should be relocated into a different schema.
	EntityMove EntityMoveResponseOutput `pulumi:"entityMove"`
	// The rule filter
	Filter MappingRuleFilterResponseOutput `pulumi:"filter"`
	// Optional. Rule to specify the list of columns to include or exclude from a table.
	FilterTableColumns FilterTableColumnsResponseOutput `pulumi:"filterTableColumns"`
	Location           pulumi.StringOutput              `pulumi:"location"`
	// Required. The ID of the rule to create.
	MappingRuleId pulumi.StringOutput `pulumi:"mappingRuleId"`
	// Optional. Rule to specify how multiple columns should be converted to a different data type.
	MultiColumnDataTypeChange MultiColumnDatatypeChangeResponseOutput `pulumi:"multiColumnDataTypeChange"`
	// Optional. Rule to specify how multiple entities should be renamed.
	MultiEntityRename MultiEntityRenameResponseOutput `pulumi:"multiEntityRename"`
	// Full name of the mapping rule resource, in the form of: projects/{project}/locations/{location}/conversionWorkspaces/{set}/mappingRule/{rule}.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// A unique ID used to identify the request. If the server receives two requests with the same ID, then the second request is ignored. It is recommended to always set this value to a UUID. The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.
	RequestId pulumi.StringPtrOutput `pulumi:"requestId"`
	// The timestamp that the revision was created.
	RevisionCreateTime pulumi.StringOutput `pulumi:"revisionCreateTime"`
	// The revision ID of the mapping rule. A new revision is committed whenever the mapping rule is changed in any way. The format is an 8-character hexadecimal string.
	RevisionId pulumi.StringOutput `pulumi:"revisionId"`
	// The order in which the rule is applied. Lower order rules are applied before higher value rules so they may end up being overridden.
	RuleOrder pulumi.StringOutput `pulumi:"ruleOrder"`
	// The rule scope
	RuleScope pulumi.StringOutput `pulumi:"ruleScope"`
	// Optional. Rule to specify the primary key for a table
	SetTablePrimaryKey SetTablePrimaryKeyResponseOutput `pulumi:"setTablePrimaryKey"`
	// Optional. Rule to specify how a single column is converted.
	SingleColumnChange SingleColumnChangeResponseOutput `pulumi:"singleColumnChange"`
	// Optional. Rule to specify how a single entity should be renamed.
	SingleEntityRename SingleEntityRenameResponseOutput `pulumi:"singleEntityRename"`
	// Optional. Rule to specify how a single package is converted.
	SinglePackageChange SinglePackageChangeResponseOutput `pulumi:"singlePackageChange"`
	// Optional. Rule to change the sql code for an entity, for example, function, procedure.
	SourceSqlChange SourceSqlChangeResponseOutput `pulumi:"sourceSqlChange"`
	// Optional. The mapping rule state
	State pulumi.StringOutput `pulumi:"state"`
}

// NewMappingRule registers a new resource with the given unique name, arguments, and options.
func NewMappingRule(ctx *pulumi.Context,
	name string, args *MappingRuleArgs, opts ...pulumi.ResourceOption) (*MappingRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConversionWorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'ConversionWorkspaceId'")
	}
	if args.Filter == nil {
		return nil, errors.New("invalid value for required argument 'Filter'")
	}
	if args.MappingRuleId == nil {
		return nil, errors.New("invalid value for required argument 'MappingRuleId'")
	}
	if args.RuleOrder == nil {
		return nil, errors.New("invalid value for required argument 'RuleOrder'")
	}
	if args.RuleScope == nil {
		return nil, errors.New("invalid value for required argument 'RuleScope'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"conversionWorkspaceId",
		"location",
		"mappingRuleId",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MappingRule
	err := ctx.RegisterResource("google-native:datamigration/v1:MappingRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMappingRule gets an existing MappingRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMappingRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MappingRuleState, opts ...pulumi.ResourceOption) (*MappingRule, error) {
	var resource MappingRule
	err := ctx.ReadResource("google-native:datamigration/v1:MappingRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MappingRule resources.
type mappingRuleState struct {
}

type MappingRuleState struct {
}

func (MappingRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*mappingRuleState)(nil)).Elem()
}

type mappingRuleArgs struct {
	// Optional. Rule to specify how the data contained in a column should be transformed (such as trimmed, rounded, etc) provided that the data meets certain criteria.
	ConditionalColumnSetValue *ConditionalColumnSetValue `pulumi:"conditionalColumnSetValue"`
	ConversionWorkspaceId     string                     `pulumi:"conversionWorkspaceId"`
	// Optional. Rule to specify how multiple tables should be converted with an additional rowid column.
	ConvertRowidColumn *ConvertRowIdToColumn `pulumi:"convertRowidColumn"`
	// Optional. A human readable name
	DisplayName *string `pulumi:"displayName"`
	// Optional. Rule to specify how multiple entities should be relocated into a different schema.
	EntityMove *EntityMove `pulumi:"entityMove"`
	// The rule filter
	Filter MappingRuleFilter `pulumi:"filter"`
	// Optional. Rule to specify the list of columns to include or exclude from a table.
	FilterTableColumns *FilterTableColumns `pulumi:"filterTableColumns"`
	Location           *string             `pulumi:"location"`
	// Required. The ID of the rule to create.
	MappingRuleId string `pulumi:"mappingRuleId"`
	// Optional. Rule to specify how multiple columns should be converted to a different data type.
	MultiColumnDataTypeChange *MultiColumnDatatypeChange `pulumi:"multiColumnDataTypeChange"`
	// Optional. Rule to specify how multiple entities should be renamed.
	MultiEntityRename *MultiEntityRename `pulumi:"multiEntityRename"`
	// Full name of the mapping rule resource, in the form of: projects/{project}/locations/{location}/conversionWorkspaces/{set}/mappingRule/{rule}.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// A unique ID used to identify the request. If the server receives two requests with the same ID, then the second request is ignored. It is recommended to always set this value to a UUID. The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.
	RequestId *string `pulumi:"requestId"`
	// The order in which the rule is applied. Lower order rules are applied before higher value rules so they may end up being overridden.
	RuleOrder string `pulumi:"ruleOrder"`
	// The rule scope
	RuleScope MappingRuleRuleScope `pulumi:"ruleScope"`
	// Optional. Rule to specify the primary key for a table
	SetTablePrimaryKey *SetTablePrimaryKey `pulumi:"setTablePrimaryKey"`
	// Optional. Rule to specify how a single column is converted.
	SingleColumnChange *SingleColumnChange `pulumi:"singleColumnChange"`
	// Optional. Rule to specify how a single entity should be renamed.
	SingleEntityRename *SingleEntityRename `pulumi:"singleEntityRename"`
	// Optional. Rule to specify how a single package is converted.
	SinglePackageChange *SinglePackageChange `pulumi:"singlePackageChange"`
	// Optional. Rule to change the sql code for an entity, for example, function, procedure.
	SourceSqlChange *SourceSqlChange `pulumi:"sourceSqlChange"`
	// Optional. The mapping rule state
	State *MappingRuleStateEnum `pulumi:"state"`
}

// The set of arguments for constructing a MappingRule resource.
type MappingRuleArgs struct {
	// Optional. Rule to specify how the data contained in a column should be transformed (such as trimmed, rounded, etc) provided that the data meets certain criteria.
	ConditionalColumnSetValue ConditionalColumnSetValuePtrInput
	ConversionWorkspaceId     pulumi.StringInput
	// Optional. Rule to specify how multiple tables should be converted with an additional rowid column.
	ConvertRowidColumn ConvertRowIdToColumnPtrInput
	// Optional. A human readable name
	DisplayName pulumi.StringPtrInput
	// Optional. Rule to specify how multiple entities should be relocated into a different schema.
	EntityMove EntityMovePtrInput
	// The rule filter
	Filter MappingRuleFilterInput
	// Optional. Rule to specify the list of columns to include or exclude from a table.
	FilterTableColumns FilterTableColumnsPtrInput
	Location           pulumi.StringPtrInput
	// Required. The ID of the rule to create.
	MappingRuleId pulumi.StringInput
	// Optional. Rule to specify how multiple columns should be converted to a different data type.
	MultiColumnDataTypeChange MultiColumnDatatypeChangePtrInput
	// Optional. Rule to specify how multiple entities should be renamed.
	MultiEntityRename MultiEntityRenamePtrInput
	// Full name of the mapping rule resource, in the form of: projects/{project}/locations/{location}/conversionWorkspaces/{set}/mappingRule/{rule}.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// A unique ID used to identify the request. If the server receives two requests with the same ID, then the second request is ignored. It is recommended to always set this value to a UUID. The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.
	RequestId pulumi.StringPtrInput
	// The order in which the rule is applied. Lower order rules are applied before higher value rules so they may end up being overridden.
	RuleOrder pulumi.StringInput
	// The rule scope
	RuleScope MappingRuleRuleScopeInput
	// Optional. Rule to specify the primary key for a table
	SetTablePrimaryKey SetTablePrimaryKeyPtrInput
	// Optional. Rule to specify how a single column is converted.
	SingleColumnChange SingleColumnChangePtrInput
	// Optional. Rule to specify how a single entity should be renamed.
	SingleEntityRename SingleEntityRenamePtrInput
	// Optional. Rule to specify how a single package is converted.
	SinglePackageChange SinglePackageChangePtrInput
	// Optional. Rule to change the sql code for an entity, for example, function, procedure.
	SourceSqlChange SourceSqlChangePtrInput
	// Optional. The mapping rule state
	State MappingRuleStateEnumPtrInput
}

func (MappingRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mappingRuleArgs)(nil)).Elem()
}

type MappingRuleInput interface {
	pulumi.Input

	ToMappingRuleOutput() MappingRuleOutput
	ToMappingRuleOutputWithContext(ctx context.Context) MappingRuleOutput
}

func (*MappingRule) ElementType() reflect.Type {
	return reflect.TypeOf((**MappingRule)(nil)).Elem()
}

func (i *MappingRule) ToMappingRuleOutput() MappingRuleOutput {
	return i.ToMappingRuleOutputWithContext(context.Background())
}

func (i *MappingRule) ToMappingRuleOutputWithContext(ctx context.Context) MappingRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingRuleOutput)
}

type MappingRuleOutput struct{ *pulumi.OutputState }

func (MappingRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MappingRule)(nil)).Elem()
}

func (o MappingRuleOutput) ToMappingRuleOutput() MappingRuleOutput {
	return o
}

func (o MappingRuleOutput) ToMappingRuleOutputWithContext(ctx context.Context) MappingRuleOutput {
	return o
}

// Optional. Rule to specify how the data contained in a column should be transformed (such as trimmed, rounded, etc) provided that the data meets certain criteria.
func (o MappingRuleOutput) ConditionalColumnSetValue() ConditionalColumnSetValueResponseOutput {
	return o.ApplyT(func(v *MappingRule) ConditionalColumnSetValueResponseOutput { return v.ConditionalColumnSetValue }).(ConditionalColumnSetValueResponseOutput)
}

func (o MappingRuleOutput) ConversionWorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *MappingRule) pulumi.StringOutput { return v.ConversionWorkspaceId }).(pulumi.StringOutput)
}

// Optional. Rule to specify how multiple tables should be converted with an additional rowid column.
func (o MappingRuleOutput) ConvertRowidColumn() ConvertRowIdToColumnResponseOutput {
	return o.ApplyT(func(v *MappingRule) ConvertRowIdToColumnResponseOutput { return v.ConvertRowidColumn }).(ConvertRowIdToColumnResponseOutput)
}

// Optional. A human readable name
func (o MappingRuleOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *MappingRule) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Optional. Rule to specify how multiple entities should be relocated into a different schema.
func (o MappingRuleOutput) EntityMove() EntityMoveResponseOutput {
	return o.ApplyT(func(v *MappingRule) EntityMoveResponseOutput { return v.EntityMove }).(EntityMoveResponseOutput)
}

// The rule filter
func (o MappingRuleOutput) Filter() MappingRuleFilterResponseOutput {
	return o.ApplyT(func(v *MappingRule) MappingRuleFilterResponseOutput { return v.Filter }).(MappingRuleFilterResponseOutput)
}

// Optional. Rule to specify the list of columns to include or exclude from a table.
func (o MappingRuleOutput) FilterTableColumns() FilterTableColumnsResponseOutput {
	return o.ApplyT(func(v *MappingRule) FilterTableColumnsResponseOutput { return v.FilterTableColumns }).(FilterTableColumnsResponseOutput)
}

func (o MappingRuleOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *MappingRule) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Required. The ID of the rule to create.
func (o MappingRuleOutput) MappingRuleId() pulumi.StringOutput {
	return o.ApplyT(func(v *MappingRule) pulumi.StringOutput { return v.MappingRuleId }).(pulumi.StringOutput)
}

// Optional. Rule to specify how multiple columns should be converted to a different data type.
func (o MappingRuleOutput) MultiColumnDataTypeChange() MultiColumnDatatypeChangeResponseOutput {
	return o.ApplyT(func(v *MappingRule) MultiColumnDatatypeChangeResponseOutput { return v.MultiColumnDataTypeChange }).(MultiColumnDatatypeChangeResponseOutput)
}

// Optional. Rule to specify how multiple entities should be renamed.
func (o MappingRuleOutput) MultiEntityRename() MultiEntityRenameResponseOutput {
	return o.ApplyT(func(v *MappingRule) MultiEntityRenameResponseOutput { return v.MultiEntityRename }).(MultiEntityRenameResponseOutput)
}

// Full name of the mapping rule resource, in the form of: projects/{project}/locations/{location}/conversionWorkspaces/{set}/mappingRule/{rule}.
func (o MappingRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MappingRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o MappingRuleOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *MappingRule) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// A unique ID used to identify the request. If the server receives two requests with the same ID, then the second request is ignored. It is recommended to always set this value to a UUID. The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.
func (o MappingRuleOutput) RequestId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MappingRule) pulumi.StringPtrOutput { return v.RequestId }).(pulumi.StringPtrOutput)
}

// The timestamp that the revision was created.
func (o MappingRuleOutput) RevisionCreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *MappingRule) pulumi.StringOutput { return v.RevisionCreateTime }).(pulumi.StringOutput)
}

// The revision ID of the mapping rule. A new revision is committed whenever the mapping rule is changed in any way. The format is an 8-character hexadecimal string.
func (o MappingRuleOutput) RevisionId() pulumi.StringOutput {
	return o.ApplyT(func(v *MappingRule) pulumi.StringOutput { return v.RevisionId }).(pulumi.StringOutput)
}

// The order in which the rule is applied. Lower order rules are applied before higher value rules so they may end up being overridden.
func (o MappingRuleOutput) RuleOrder() pulumi.StringOutput {
	return o.ApplyT(func(v *MappingRule) pulumi.StringOutput { return v.RuleOrder }).(pulumi.StringOutput)
}

// The rule scope
func (o MappingRuleOutput) RuleScope() pulumi.StringOutput {
	return o.ApplyT(func(v *MappingRule) pulumi.StringOutput { return v.RuleScope }).(pulumi.StringOutput)
}

// Optional. Rule to specify the primary key for a table
func (o MappingRuleOutput) SetTablePrimaryKey() SetTablePrimaryKeyResponseOutput {
	return o.ApplyT(func(v *MappingRule) SetTablePrimaryKeyResponseOutput { return v.SetTablePrimaryKey }).(SetTablePrimaryKeyResponseOutput)
}

// Optional. Rule to specify how a single column is converted.
func (o MappingRuleOutput) SingleColumnChange() SingleColumnChangeResponseOutput {
	return o.ApplyT(func(v *MappingRule) SingleColumnChangeResponseOutput { return v.SingleColumnChange }).(SingleColumnChangeResponseOutput)
}

// Optional. Rule to specify how a single entity should be renamed.
func (o MappingRuleOutput) SingleEntityRename() SingleEntityRenameResponseOutput {
	return o.ApplyT(func(v *MappingRule) SingleEntityRenameResponseOutput { return v.SingleEntityRename }).(SingleEntityRenameResponseOutput)
}

// Optional. Rule to specify how a single package is converted.
func (o MappingRuleOutput) SinglePackageChange() SinglePackageChangeResponseOutput {
	return o.ApplyT(func(v *MappingRule) SinglePackageChangeResponseOutput { return v.SinglePackageChange }).(SinglePackageChangeResponseOutput)
}

// Optional. Rule to change the sql code for an entity, for example, function, procedure.
func (o MappingRuleOutput) SourceSqlChange() SourceSqlChangeResponseOutput {
	return o.ApplyT(func(v *MappingRule) SourceSqlChangeResponseOutput { return v.SourceSqlChange }).(SourceSqlChangeResponseOutput)
}

// Optional. The mapping rule state
func (o MappingRuleOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *MappingRule) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MappingRuleInput)(nil)).Elem(), &MappingRule{})
	pulumi.RegisterOutputType(MappingRuleOutput{})
}
