// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// Specifies required connection parameters, and the parameters required to create an AlloyDB destination cluster.
type AlloyDbConnectionProfile struct {
	// The AlloyDB cluster ID that this connection profile is associated with.
	ClusterId string `pulumi:"clusterId"`
	// Immutable. Metadata used to create the destination AlloyDB cluster.
	Settings *AlloyDbSettings `pulumi:"settings"`
}

// AlloyDbConnectionProfileInput is an input type that accepts AlloyDbConnectionProfileArgs and AlloyDbConnectionProfileOutput values.
// You can construct a concrete instance of `AlloyDbConnectionProfileInput` via:
//
//	AlloyDbConnectionProfileArgs{...}
type AlloyDbConnectionProfileInput interface {
	pulumi.Input

	ToAlloyDbConnectionProfileOutput() AlloyDbConnectionProfileOutput
	ToAlloyDbConnectionProfileOutputWithContext(context.Context) AlloyDbConnectionProfileOutput
}

// Specifies required connection parameters, and the parameters required to create an AlloyDB destination cluster.
type AlloyDbConnectionProfileArgs struct {
	// The AlloyDB cluster ID that this connection profile is associated with.
	ClusterId pulumi.StringInput `pulumi:"clusterId"`
	// Immutable. Metadata used to create the destination AlloyDB cluster.
	Settings AlloyDbSettingsPtrInput `pulumi:"settings"`
}

func (AlloyDbConnectionProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlloyDbConnectionProfile)(nil)).Elem()
}

func (i AlloyDbConnectionProfileArgs) ToAlloyDbConnectionProfileOutput() AlloyDbConnectionProfileOutput {
	return i.ToAlloyDbConnectionProfileOutputWithContext(context.Background())
}

func (i AlloyDbConnectionProfileArgs) ToAlloyDbConnectionProfileOutputWithContext(ctx context.Context) AlloyDbConnectionProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlloyDbConnectionProfileOutput)
}

func (i AlloyDbConnectionProfileArgs) ToAlloyDbConnectionProfilePtrOutput() AlloyDbConnectionProfilePtrOutput {
	return i.ToAlloyDbConnectionProfilePtrOutputWithContext(context.Background())
}

func (i AlloyDbConnectionProfileArgs) ToAlloyDbConnectionProfilePtrOutputWithContext(ctx context.Context) AlloyDbConnectionProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlloyDbConnectionProfileOutput).ToAlloyDbConnectionProfilePtrOutputWithContext(ctx)
}

// AlloyDbConnectionProfilePtrInput is an input type that accepts AlloyDbConnectionProfileArgs, AlloyDbConnectionProfilePtr and AlloyDbConnectionProfilePtrOutput values.
// You can construct a concrete instance of `AlloyDbConnectionProfilePtrInput` via:
//
//	        AlloyDbConnectionProfileArgs{...}
//
//	or:
//
//	        nil
type AlloyDbConnectionProfilePtrInput interface {
	pulumi.Input

	ToAlloyDbConnectionProfilePtrOutput() AlloyDbConnectionProfilePtrOutput
	ToAlloyDbConnectionProfilePtrOutputWithContext(context.Context) AlloyDbConnectionProfilePtrOutput
}

type alloyDbConnectionProfilePtrType AlloyDbConnectionProfileArgs

func AlloyDbConnectionProfilePtr(v *AlloyDbConnectionProfileArgs) AlloyDbConnectionProfilePtrInput {
	return (*alloyDbConnectionProfilePtrType)(v)
}

func (*alloyDbConnectionProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlloyDbConnectionProfile)(nil)).Elem()
}

func (i *alloyDbConnectionProfilePtrType) ToAlloyDbConnectionProfilePtrOutput() AlloyDbConnectionProfilePtrOutput {
	return i.ToAlloyDbConnectionProfilePtrOutputWithContext(context.Background())
}

func (i *alloyDbConnectionProfilePtrType) ToAlloyDbConnectionProfilePtrOutputWithContext(ctx context.Context) AlloyDbConnectionProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlloyDbConnectionProfilePtrOutput)
}

// Specifies required connection parameters, and the parameters required to create an AlloyDB destination cluster.
type AlloyDbConnectionProfileOutput struct{ *pulumi.OutputState }

func (AlloyDbConnectionProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlloyDbConnectionProfile)(nil)).Elem()
}

func (o AlloyDbConnectionProfileOutput) ToAlloyDbConnectionProfileOutput() AlloyDbConnectionProfileOutput {
	return o
}

func (o AlloyDbConnectionProfileOutput) ToAlloyDbConnectionProfileOutputWithContext(ctx context.Context) AlloyDbConnectionProfileOutput {
	return o
}

func (o AlloyDbConnectionProfileOutput) ToAlloyDbConnectionProfilePtrOutput() AlloyDbConnectionProfilePtrOutput {
	return o.ToAlloyDbConnectionProfilePtrOutputWithContext(context.Background())
}

func (o AlloyDbConnectionProfileOutput) ToAlloyDbConnectionProfilePtrOutputWithContext(ctx context.Context) AlloyDbConnectionProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlloyDbConnectionProfile) *AlloyDbConnectionProfile {
		return &v
	}).(AlloyDbConnectionProfilePtrOutput)
}

// The AlloyDB cluster ID that this connection profile is associated with.
func (o AlloyDbConnectionProfileOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v AlloyDbConnectionProfile) string { return v.ClusterId }).(pulumi.StringOutput)
}

// Immutable. Metadata used to create the destination AlloyDB cluster.
func (o AlloyDbConnectionProfileOutput) Settings() AlloyDbSettingsPtrOutput {
	return o.ApplyT(func(v AlloyDbConnectionProfile) *AlloyDbSettings { return v.Settings }).(AlloyDbSettingsPtrOutput)
}

type AlloyDbConnectionProfilePtrOutput struct{ *pulumi.OutputState }

func (AlloyDbConnectionProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlloyDbConnectionProfile)(nil)).Elem()
}

func (o AlloyDbConnectionProfilePtrOutput) ToAlloyDbConnectionProfilePtrOutput() AlloyDbConnectionProfilePtrOutput {
	return o
}

func (o AlloyDbConnectionProfilePtrOutput) ToAlloyDbConnectionProfilePtrOutputWithContext(ctx context.Context) AlloyDbConnectionProfilePtrOutput {
	return o
}

func (o AlloyDbConnectionProfilePtrOutput) Elem() AlloyDbConnectionProfileOutput {
	return o.ApplyT(func(v *AlloyDbConnectionProfile) AlloyDbConnectionProfile {
		if v != nil {
			return *v
		}
		var ret AlloyDbConnectionProfile
		return ret
	}).(AlloyDbConnectionProfileOutput)
}

// The AlloyDB cluster ID that this connection profile is associated with.
func (o AlloyDbConnectionProfilePtrOutput) ClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlloyDbConnectionProfile) *string {
		if v == nil {
			return nil
		}
		return &v.ClusterId
	}).(pulumi.StringPtrOutput)
}

// Immutable. Metadata used to create the destination AlloyDB cluster.
func (o AlloyDbConnectionProfilePtrOutput) Settings() AlloyDbSettingsPtrOutput {
	return o.ApplyT(func(v *AlloyDbConnectionProfile) *AlloyDbSettings {
		if v == nil {
			return nil
		}
		return v.Settings
	}).(AlloyDbSettingsPtrOutput)
}

// Specifies required connection parameters, and the parameters required to create an AlloyDB destination cluster.
type AlloyDbConnectionProfileResponse struct {
	// The AlloyDB cluster ID that this connection profile is associated with.
	ClusterId string `pulumi:"clusterId"`
	// Immutable. Metadata used to create the destination AlloyDB cluster.
	Settings AlloyDbSettingsResponse `pulumi:"settings"`
}

// Specifies required connection parameters, and the parameters required to create an AlloyDB destination cluster.
type AlloyDbConnectionProfileResponseOutput struct{ *pulumi.OutputState }

func (AlloyDbConnectionProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlloyDbConnectionProfileResponse)(nil)).Elem()
}

func (o AlloyDbConnectionProfileResponseOutput) ToAlloyDbConnectionProfileResponseOutput() AlloyDbConnectionProfileResponseOutput {
	return o
}

func (o AlloyDbConnectionProfileResponseOutput) ToAlloyDbConnectionProfileResponseOutputWithContext(ctx context.Context) AlloyDbConnectionProfileResponseOutput {
	return o
}

// The AlloyDB cluster ID that this connection profile is associated with.
func (o AlloyDbConnectionProfileResponseOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v AlloyDbConnectionProfileResponse) string { return v.ClusterId }).(pulumi.StringOutput)
}

// Immutable. Metadata used to create the destination AlloyDB cluster.
func (o AlloyDbConnectionProfileResponseOutput) Settings() AlloyDbSettingsResponseOutput {
	return o.ApplyT(func(v AlloyDbConnectionProfileResponse) AlloyDbSettingsResponse { return v.Settings }).(AlloyDbSettingsResponseOutput)
}

// Settings for creating an AlloyDB cluster.
type AlloyDbSettings struct {
	// Optional. The database engine major version. This is an optional field. If a database version is not supplied at cluster creation time, then a default database version will be used.
	DatabaseVersion *AlloyDbSettingsDatabaseVersion `pulumi:"databaseVersion"`
	// Optional. The encryption config can be specified to encrypt the data disks and other persistent data resources of a cluster with a customer-managed encryption key (CMEK). When this field is not specified, the cluster will then use default encryption scheme to protect the user data.
	EncryptionConfig *EncryptionConfig `pulumi:"encryptionConfig"`
	// Input only. Initial user to setup during cluster creation. Required.
	InitialUser UserPassword `pulumi:"initialUser"`
	// Labels for the AlloyDB cluster created by DMS. An object containing a list of 'key', 'value' pairs.
	Labels                  map[string]string        `pulumi:"labels"`
	PrimaryInstanceSettings *PrimaryInstanceSettings `pulumi:"primaryInstanceSettings"`
	// The resource link for the VPC network in which cluster resources are created and from which they are accessible via Private IP. The network must belong to the same project as the cluster. It is specified in the form: "projects/{project_number}/global/networks/{network_id}". This is required to create a cluster.
	VpcNetwork string `pulumi:"vpcNetwork"`
}

// AlloyDbSettingsInput is an input type that accepts AlloyDbSettingsArgs and AlloyDbSettingsOutput values.
// You can construct a concrete instance of `AlloyDbSettingsInput` via:
//
//	AlloyDbSettingsArgs{...}
type AlloyDbSettingsInput interface {
	pulumi.Input

	ToAlloyDbSettingsOutput() AlloyDbSettingsOutput
	ToAlloyDbSettingsOutputWithContext(context.Context) AlloyDbSettingsOutput
}

// Settings for creating an AlloyDB cluster.
type AlloyDbSettingsArgs struct {
	// Optional. The database engine major version. This is an optional field. If a database version is not supplied at cluster creation time, then a default database version will be used.
	DatabaseVersion AlloyDbSettingsDatabaseVersionPtrInput `pulumi:"databaseVersion"`
	// Optional. The encryption config can be specified to encrypt the data disks and other persistent data resources of a cluster with a customer-managed encryption key (CMEK). When this field is not specified, the cluster will then use default encryption scheme to protect the user data.
	EncryptionConfig EncryptionConfigPtrInput `pulumi:"encryptionConfig"`
	// Input only. Initial user to setup during cluster creation. Required.
	InitialUser UserPasswordInput `pulumi:"initialUser"`
	// Labels for the AlloyDB cluster created by DMS. An object containing a list of 'key', 'value' pairs.
	Labels                  pulumi.StringMapInput           `pulumi:"labels"`
	PrimaryInstanceSettings PrimaryInstanceSettingsPtrInput `pulumi:"primaryInstanceSettings"`
	// The resource link for the VPC network in which cluster resources are created and from which they are accessible via Private IP. The network must belong to the same project as the cluster. It is specified in the form: "projects/{project_number}/global/networks/{network_id}". This is required to create a cluster.
	VpcNetwork pulumi.StringInput `pulumi:"vpcNetwork"`
}

func (AlloyDbSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlloyDbSettings)(nil)).Elem()
}

func (i AlloyDbSettingsArgs) ToAlloyDbSettingsOutput() AlloyDbSettingsOutput {
	return i.ToAlloyDbSettingsOutputWithContext(context.Background())
}

func (i AlloyDbSettingsArgs) ToAlloyDbSettingsOutputWithContext(ctx context.Context) AlloyDbSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlloyDbSettingsOutput)
}

func (i AlloyDbSettingsArgs) ToAlloyDbSettingsPtrOutput() AlloyDbSettingsPtrOutput {
	return i.ToAlloyDbSettingsPtrOutputWithContext(context.Background())
}

func (i AlloyDbSettingsArgs) ToAlloyDbSettingsPtrOutputWithContext(ctx context.Context) AlloyDbSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlloyDbSettingsOutput).ToAlloyDbSettingsPtrOutputWithContext(ctx)
}

// AlloyDbSettingsPtrInput is an input type that accepts AlloyDbSettingsArgs, AlloyDbSettingsPtr and AlloyDbSettingsPtrOutput values.
// You can construct a concrete instance of `AlloyDbSettingsPtrInput` via:
//
//	        AlloyDbSettingsArgs{...}
//
//	or:
//
//	        nil
type AlloyDbSettingsPtrInput interface {
	pulumi.Input

	ToAlloyDbSettingsPtrOutput() AlloyDbSettingsPtrOutput
	ToAlloyDbSettingsPtrOutputWithContext(context.Context) AlloyDbSettingsPtrOutput
}

type alloyDbSettingsPtrType AlloyDbSettingsArgs

func AlloyDbSettingsPtr(v *AlloyDbSettingsArgs) AlloyDbSettingsPtrInput {
	return (*alloyDbSettingsPtrType)(v)
}

func (*alloyDbSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlloyDbSettings)(nil)).Elem()
}

func (i *alloyDbSettingsPtrType) ToAlloyDbSettingsPtrOutput() AlloyDbSettingsPtrOutput {
	return i.ToAlloyDbSettingsPtrOutputWithContext(context.Background())
}

func (i *alloyDbSettingsPtrType) ToAlloyDbSettingsPtrOutputWithContext(ctx context.Context) AlloyDbSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlloyDbSettingsPtrOutput)
}

// Settings for creating an AlloyDB cluster.
type AlloyDbSettingsOutput struct{ *pulumi.OutputState }

func (AlloyDbSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlloyDbSettings)(nil)).Elem()
}

func (o AlloyDbSettingsOutput) ToAlloyDbSettingsOutput() AlloyDbSettingsOutput {
	return o
}

func (o AlloyDbSettingsOutput) ToAlloyDbSettingsOutputWithContext(ctx context.Context) AlloyDbSettingsOutput {
	return o
}

func (o AlloyDbSettingsOutput) ToAlloyDbSettingsPtrOutput() AlloyDbSettingsPtrOutput {
	return o.ToAlloyDbSettingsPtrOutputWithContext(context.Background())
}

func (o AlloyDbSettingsOutput) ToAlloyDbSettingsPtrOutputWithContext(ctx context.Context) AlloyDbSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlloyDbSettings) *AlloyDbSettings {
		return &v
	}).(AlloyDbSettingsPtrOutput)
}

// Optional. The database engine major version. This is an optional field. If a database version is not supplied at cluster creation time, then a default database version will be used.
func (o AlloyDbSettingsOutput) DatabaseVersion() AlloyDbSettingsDatabaseVersionPtrOutput {
	return o.ApplyT(func(v AlloyDbSettings) *AlloyDbSettingsDatabaseVersion { return v.DatabaseVersion }).(AlloyDbSettingsDatabaseVersionPtrOutput)
}

// Optional. The encryption config can be specified to encrypt the data disks and other persistent data resources of a cluster with a customer-managed encryption key (CMEK). When this field is not specified, the cluster will then use default encryption scheme to protect the user data.
func (o AlloyDbSettingsOutput) EncryptionConfig() EncryptionConfigPtrOutput {
	return o.ApplyT(func(v AlloyDbSettings) *EncryptionConfig { return v.EncryptionConfig }).(EncryptionConfigPtrOutput)
}

// Input only. Initial user to setup during cluster creation. Required.
func (o AlloyDbSettingsOutput) InitialUser() UserPasswordOutput {
	return o.ApplyT(func(v AlloyDbSettings) UserPassword { return v.InitialUser }).(UserPasswordOutput)
}

// Labels for the AlloyDB cluster created by DMS. An object containing a list of 'key', 'value' pairs.
func (o AlloyDbSettingsOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v AlloyDbSettings) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

func (o AlloyDbSettingsOutput) PrimaryInstanceSettings() PrimaryInstanceSettingsPtrOutput {
	return o.ApplyT(func(v AlloyDbSettings) *PrimaryInstanceSettings { return v.PrimaryInstanceSettings }).(PrimaryInstanceSettingsPtrOutput)
}

// The resource link for the VPC network in which cluster resources are created and from which they are accessible via Private IP. The network must belong to the same project as the cluster. It is specified in the form: "projects/{project_number}/global/networks/{network_id}". This is required to create a cluster.
func (o AlloyDbSettingsOutput) VpcNetwork() pulumi.StringOutput {
	return o.ApplyT(func(v AlloyDbSettings) string { return v.VpcNetwork }).(pulumi.StringOutput)
}

type AlloyDbSettingsPtrOutput struct{ *pulumi.OutputState }

func (AlloyDbSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlloyDbSettings)(nil)).Elem()
}

func (o AlloyDbSettingsPtrOutput) ToAlloyDbSettingsPtrOutput() AlloyDbSettingsPtrOutput {
	return o
}

func (o AlloyDbSettingsPtrOutput) ToAlloyDbSettingsPtrOutputWithContext(ctx context.Context) AlloyDbSettingsPtrOutput {
	return o
}

func (o AlloyDbSettingsPtrOutput) Elem() AlloyDbSettingsOutput {
	return o.ApplyT(func(v *AlloyDbSettings) AlloyDbSettings {
		if v != nil {
			return *v
		}
		var ret AlloyDbSettings
		return ret
	}).(AlloyDbSettingsOutput)
}

// Optional. The database engine major version. This is an optional field. If a database version is not supplied at cluster creation time, then a default database version will be used.
func (o AlloyDbSettingsPtrOutput) DatabaseVersion() AlloyDbSettingsDatabaseVersionPtrOutput {
	return o.ApplyT(func(v *AlloyDbSettings) *AlloyDbSettingsDatabaseVersion {
		if v == nil {
			return nil
		}
		return v.DatabaseVersion
	}).(AlloyDbSettingsDatabaseVersionPtrOutput)
}

// Optional. The encryption config can be specified to encrypt the data disks and other persistent data resources of a cluster with a customer-managed encryption key (CMEK). When this field is not specified, the cluster will then use default encryption scheme to protect the user data.
func (o AlloyDbSettingsPtrOutput) EncryptionConfig() EncryptionConfigPtrOutput {
	return o.ApplyT(func(v *AlloyDbSettings) *EncryptionConfig {
		if v == nil {
			return nil
		}
		return v.EncryptionConfig
	}).(EncryptionConfigPtrOutput)
}

// Input only. Initial user to setup during cluster creation. Required.
func (o AlloyDbSettingsPtrOutput) InitialUser() UserPasswordPtrOutput {
	return o.ApplyT(func(v *AlloyDbSettings) *UserPassword {
		if v == nil {
			return nil
		}
		return &v.InitialUser
	}).(UserPasswordPtrOutput)
}

// Labels for the AlloyDB cluster created by DMS. An object containing a list of 'key', 'value' pairs.
func (o AlloyDbSettingsPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AlloyDbSettings) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

func (o AlloyDbSettingsPtrOutput) PrimaryInstanceSettings() PrimaryInstanceSettingsPtrOutput {
	return o.ApplyT(func(v *AlloyDbSettings) *PrimaryInstanceSettings {
		if v == nil {
			return nil
		}
		return v.PrimaryInstanceSettings
	}).(PrimaryInstanceSettingsPtrOutput)
}

// The resource link for the VPC network in which cluster resources are created and from which they are accessible via Private IP. The network must belong to the same project as the cluster. It is specified in the form: "projects/{project_number}/global/networks/{network_id}". This is required to create a cluster.
func (o AlloyDbSettingsPtrOutput) VpcNetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlloyDbSettings) *string {
		if v == nil {
			return nil
		}
		return &v.VpcNetwork
	}).(pulumi.StringPtrOutput)
}

// Settings for creating an AlloyDB cluster.
type AlloyDbSettingsResponse struct {
	// Optional. The database engine major version. This is an optional field. If a database version is not supplied at cluster creation time, then a default database version will be used.
	DatabaseVersion string `pulumi:"databaseVersion"`
	// Optional. The encryption config can be specified to encrypt the data disks and other persistent data resources of a cluster with a customer-managed encryption key (CMEK). When this field is not specified, the cluster will then use default encryption scheme to protect the user data.
	EncryptionConfig EncryptionConfigResponse `pulumi:"encryptionConfig"`
	// Input only. Initial user to setup during cluster creation. Required.
	InitialUser UserPasswordResponse `pulumi:"initialUser"`
	// Labels for the AlloyDB cluster created by DMS. An object containing a list of 'key', 'value' pairs.
	Labels                  map[string]string               `pulumi:"labels"`
	PrimaryInstanceSettings PrimaryInstanceSettingsResponse `pulumi:"primaryInstanceSettings"`
	// The resource link for the VPC network in which cluster resources are created and from which they are accessible via Private IP. The network must belong to the same project as the cluster. It is specified in the form: "projects/{project_number}/global/networks/{network_id}". This is required to create a cluster.
	VpcNetwork string `pulumi:"vpcNetwork"`
}

// Settings for creating an AlloyDB cluster.
type AlloyDbSettingsResponseOutput struct{ *pulumi.OutputState }

func (AlloyDbSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlloyDbSettingsResponse)(nil)).Elem()
}

func (o AlloyDbSettingsResponseOutput) ToAlloyDbSettingsResponseOutput() AlloyDbSettingsResponseOutput {
	return o
}

func (o AlloyDbSettingsResponseOutput) ToAlloyDbSettingsResponseOutputWithContext(ctx context.Context) AlloyDbSettingsResponseOutput {
	return o
}

// Optional. The database engine major version. This is an optional field. If a database version is not supplied at cluster creation time, then a default database version will be used.
func (o AlloyDbSettingsResponseOutput) DatabaseVersion() pulumi.StringOutput {
	return o.ApplyT(func(v AlloyDbSettingsResponse) string { return v.DatabaseVersion }).(pulumi.StringOutput)
}

// Optional. The encryption config can be specified to encrypt the data disks and other persistent data resources of a cluster with a customer-managed encryption key (CMEK). When this field is not specified, the cluster will then use default encryption scheme to protect the user data.
func (o AlloyDbSettingsResponseOutput) EncryptionConfig() EncryptionConfigResponseOutput {
	return o.ApplyT(func(v AlloyDbSettingsResponse) EncryptionConfigResponse { return v.EncryptionConfig }).(EncryptionConfigResponseOutput)
}

// Input only. Initial user to setup during cluster creation. Required.
func (o AlloyDbSettingsResponseOutput) InitialUser() UserPasswordResponseOutput {
	return o.ApplyT(func(v AlloyDbSettingsResponse) UserPasswordResponse { return v.InitialUser }).(UserPasswordResponseOutput)
}

// Labels for the AlloyDB cluster created by DMS. An object containing a list of 'key', 'value' pairs.
func (o AlloyDbSettingsResponseOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v AlloyDbSettingsResponse) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

func (o AlloyDbSettingsResponseOutput) PrimaryInstanceSettings() PrimaryInstanceSettingsResponseOutput {
	return o.ApplyT(func(v AlloyDbSettingsResponse) PrimaryInstanceSettingsResponse { return v.PrimaryInstanceSettings }).(PrimaryInstanceSettingsResponseOutput)
}

// The resource link for the VPC network in which cluster resources are created and from which they are accessible via Private IP. The network must belong to the same project as the cluster. It is specified in the form: "projects/{project_number}/global/networks/{network_id}". This is required to create a cluster.
func (o AlloyDbSettingsResponseOutput) VpcNetwork() pulumi.StringOutput {
	return o.ApplyT(func(v AlloyDbSettingsResponse) string { return v.VpcNetwork }).(pulumi.StringOutput)
}

// Apply a hash function on the value.
type ApplyHash struct {
	// Optional. Generate UUID from the data's byte array
	UuidFromBytes *Empty `pulumi:"uuidFromBytes"`
}

// ApplyHashInput is an input type that accepts ApplyHashArgs and ApplyHashOutput values.
// You can construct a concrete instance of `ApplyHashInput` via:
//
//	ApplyHashArgs{...}
type ApplyHashInput interface {
	pulumi.Input

	ToApplyHashOutput() ApplyHashOutput
	ToApplyHashOutputWithContext(context.Context) ApplyHashOutput
}

// Apply a hash function on the value.
type ApplyHashArgs struct {
	// Optional. Generate UUID from the data's byte array
	UuidFromBytes EmptyPtrInput `pulumi:"uuidFromBytes"`
}

func (ApplyHashArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplyHash)(nil)).Elem()
}

func (i ApplyHashArgs) ToApplyHashOutput() ApplyHashOutput {
	return i.ToApplyHashOutputWithContext(context.Background())
}

func (i ApplyHashArgs) ToApplyHashOutputWithContext(ctx context.Context) ApplyHashOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplyHashOutput)
}

func (i ApplyHashArgs) ToApplyHashPtrOutput() ApplyHashPtrOutput {
	return i.ToApplyHashPtrOutputWithContext(context.Background())
}

func (i ApplyHashArgs) ToApplyHashPtrOutputWithContext(ctx context.Context) ApplyHashPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplyHashOutput).ToApplyHashPtrOutputWithContext(ctx)
}

// ApplyHashPtrInput is an input type that accepts ApplyHashArgs, ApplyHashPtr and ApplyHashPtrOutput values.
// You can construct a concrete instance of `ApplyHashPtrInput` via:
//
//	        ApplyHashArgs{...}
//
//	or:
//
//	        nil
type ApplyHashPtrInput interface {
	pulumi.Input

	ToApplyHashPtrOutput() ApplyHashPtrOutput
	ToApplyHashPtrOutputWithContext(context.Context) ApplyHashPtrOutput
}

type applyHashPtrType ApplyHashArgs

func ApplyHashPtr(v *ApplyHashArgs) ApplyHashPtrInput {
	return (*applyHashPtrType)(v)
}

func (*applyHashPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplyHash)(nil)).Elem()
}

func (i *applyHashPtrType) ToApplyHashPtrOutput() ApplyHashPtrOutput {
	return i.ToApplyHashPtrOutputWithContext(context.Background())
}

func (i *applyHashPtrType) ToApplyHashPtrOutputWithContext(ctx context.Context) ApplyHashPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplyHashPtrOutput)
}

// Apply a hash function on the value.
type ApplyHashOutput struct{ *pulumi.OutputState }

func (ApplyHashOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplyHash)(nil)).Elem()
}

func (o ApplyHashOutput) ToApplyHashOutput() ApplyHashOutput {
	return o
}

func (o ApplyHashOutput) ToApplyHashOutputWithContext(ctx context.Context) ApplyHashOutput {
	return o
}

func (o ApplyHashOutput) ToApplyHashPtrOutput() ApplyHashPtrOutput {
	return o.ToApplyHashPtrOutputWithContext(context.Background())
}

func (o ApplyHashOutput) ToApplyHashPtrOutputWithContext(ctx context.Context) ApplyHashPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplyHash) *ApplyHash {
		return &v
	}).(ApplyHashPtrOutput)
}

// Optional. Generate UUID from the data's byte array
func (o ApplyHashOutput) UuidFromBytes() EmptyPtrOutput {
	return o.ApplyT(func(v ApplyHash) *Empty { return v.UuidFromBytes }).(EmptyPtrOutput)
}

type ApplyHashPtrOutput struct{ *pulumi.OutputState }

func (ApplyHashPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplyHash)(nil)).Elem()
}

func (o ApplyHashPtrOutput) ToApplyHashPtrOutput() ApplyHashPtrOutput {
	return o
}

func (o ApplyHashPtrOutput) ToApplyHashPtrOutputWithContext(ctx context.Context) ApplyHashPtrOutput {
	return o
}

func (o ApplyHashPtrOutput) Elem() ApplyHashOutput {
	return o.ApplyT(func(v *ApplyHash) ApplyHash {
		if v != nil {
			return *v
		}
		var ret ApplyHash
		return ret
	}).(ApplyHashOutput)
}

// Optional. Generate UUID from the data's byte array
func (o ApplyHashPtrOutput) UuidFromBytes() EmptyPtrOutput {
	return o.ApplyT(func(v *ApplyHash) *Empty {
		if v == nil {
			return nil
		}
		return v.UuidFromBytes
	}).(EmptyPtrOutput)
}

// Apply a hash function on the value.
type ApplyHashResponse struct {
	// Optional. Generate UUID from the data's byte array
	UuidFromBytes EmptyResponse `pulumi:"uuidFromBytes"`
}

// Apply a hash function on the value.
type ApplyHashResponseOutput struct{ *pulumi.OutputState }

func (ApplyHashResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplyHashResponse)(nil)).Elem()
}

func (o ApplyHashResponseOutput) ToApplyHashResponseOutput() ApplyHashResponseOutput {
	return o
}

func (o ApplyHashResponseOutput) ToApplyHashResponseOutputWithContext(ctx context.Context) ApplyHashResponseOutput {
	return o
}

// Optional. Generate UUID from the data's byte array
func (o ApplyHashResponseOutput) UuidFromBytes() EmptyResponseOutput {
	return o.ApplyT(func(v ApplyHashResponse) EmptyResponse { return v.UuidFromBytes }).(EmptyResponseOutput)
}

// Set to a specific value (value is converted to fit the target data type)
type AssignSpecificValue struct {
	// Specific value to be assigned
	Value string `pulumi:"value"`
}

// AssignSpecificValueInput is an input type that accepts AssignSpecificValueArgs and AssignSpecificValueOutput values.
// You can construct a concrete instance of `AssignSpecificValueInput` via:
//
//	AssignSpecificValueArgs{...}
type AssignSpecificValueInput interface {
	pulumi.Input

	ToAssignSpecificValueOutput() AssignSpecificValueOutput
	ToAssignSpecificValueOutputWithContext(context.Context) AssignSpecificValueOutput
}

// Set to a specific value (value is converted to fit the target data type)
type AssignSpecificValueArgs struct {
	// Specific value to be assigned
	Value pulumi.StringInput `pulumi:"value"`
}

func (AssignSpecificValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AssignSpecificValue)(nil)).Elem()
}

func (i AssignSpecificValueArgs) ToAssignSpecificValueOutput() AssignSpecificValueOutput {
	return i.ToAssignSpecificValueOutputWithContext(context.Background())
}

func (i AssignSpecificValueArgs) ToAssignSpecificValueOutputWithContext(ctx context.Context) AssignSpecificValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssignSpecificValueOutput)
}

func (i AssignSpecificValueArgs) ToAssignSpecificValuePtrOutput() AssignSpecificValuePtrOutput {
	return i.ToAssignSpecificValuePtrOutputWithContext(context.Background())
}

func (i AssignSpecificValueArgs) ToAssignSpecificValuePtrOutputWithContext(ctx context.Context) AssignSpecificValuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssignSpecificValueOutput).ToAssignSpecificValuePtrOutputWithContext(ctx)
}

// AssignSpecificValuePtrInput is an input type that accepts AssignSpecificValueArgs, AssignSpecificValuePtr and AssignSpecificValuePtrOutput values.
// You can construct a concrete instance of `AssignSpecificValuePtrInput` via:
//
//	        AssignSpecificValueArgs{...}
//
//	or:
//
//	        nil
type AssignSpecificValuePtrInput interface {
	pulumi.Input

	ToAssignSpecificValuePtrOutput() AssignSpecificValuePtrOutput
	ToAssignSpecificValuePtrOutputWithContext(context.Context) AssignSpecificValuePtrOutput
}

type assignSpecificValuePtrType AssignSpecificValueArgs

func AssignSpecificValuePtr(v *AssignSpecificValueArgs) AssignSpecificValuePtrInput {
	return (*assignSpecificValuePtrType)(v)
}

func (*assignSpecificValuePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AssignSpecificValue)(nil)).Elem()
}

func (i *assignSpecificValuePtrType) ToAssignSpecificValuePtrOutput() AssignSpecificValuePtrOutput {
	return i.ToAssignSpecificValuePtrOutputWithContext(context.Background())
}

func (i *assignSpecificValuePtrType) ToAssignSpecificValuePtrOutputWithContext(ctx context.Context) AssignSpecificValuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssignSpecificValuePtrOutput)
}

// Set to a specific value (value is converted to fit the target data type)
type AssignSpecificValueOutput struct{ *pulumi.OutputState }

func (AssignSpecificValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssignSpecificValue)(nil)).Elem()
}

func (o AssignSpecificValueOutput) ToAssignSpecificValueOutput() AssignSpecificValueOutput {
	return o
}

func (o AssignSpecificValueOutput) ToAssignSpecificValueOutputWithContext(ctx context.Context) AssignSpecificValueOutput {
	return o
}

func (o AssignSpecificValueOutput) ToAssignSpecificValuePtrOutput() AssignSpecificValuePtrOutput {
	return o.ToAssignSpecificValuePtrOutputWithContext(context.Background())
}

func (o AssignSpecificValueOutput) ToAssignSpecificValuePtrOutputWithContext(ctx context.Context) AssignSpecificValuePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AssignSpecificValue) *AssignSpecificValue {
		return &v
	}).(AssignSpecificValuePtrOutput)
}

// Specific value to be assigned
func (o AssignSpecificValueOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v AssignSpecificValue) string { return v.Value }).(pulumi.StringOutput)
}

type AssignSpecificValuePtrOutput struct{ *pulumi.OutputState }

func (AssignSpecificValuePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AssignSpecificValue)(nil)).Elem()
}

func (o AssignSpecificValuePtrOutput) ToAssignSpecificValuePtrOutput() AssignSpecificValuePtrOutput {
	return o
}

func (o AssignSpecificValuePtrOutput) ToAssignSpecificValuePtrOutputWithContext(ctx context.Context) AssignSpecificValuePtrOutput {
	return o
}

func (o AssignSpecificValuePtrOutput) Elem() AssignSpecificValueOutput {
	return o.ApplyT(func(v *AssignSpecificValue) AssignSpecificValue {
		if v != nil {
			return *v
		}
		var ret AssignSpecificValue
		return ret
	}).(AssignSpecificValueOutput)
}

// Specific value to be assigned
func (o AssignSpecificValuePtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssignSpecificValue) *string {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.StringPtrOutput)
}

// Set to a specific value (value is converted to fit the target data type)
type AssignSpecificValueResponse struct {
	// Specific value to be assigned
	Value string `pulumi:"value"`
}

// Set to a specific value (value is converted to fit the target data type)
type AssignSpecificValueResponseOutput struct{ *pulumi.OutputState }

func (AssignSpecificValueResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssignSpecificValueResponse)(nil)).Elem()
}

func (o AssignSpecificValueResponseOutput) ToAssignSpecificValueResponseOutput() AssignSpecificValueResponseOutput {
	return o
}

func (o AssignSpecificValueResponseOutput) ToAssignSpecificValueResponseOutputWithContext(ctx context.Context) AssignSpecificValueResponseOutput {
	return o
}

// Specific value to be assigned
func (o AssignSpecificValueResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v AssignSpecificValueResponse) string { return v.Value }).(pulumi.StringOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfig struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfig `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service *string `pulumi:"service"`
}

// AuditConfigInput is an input type that accepts AuditConfigArgs and AuditConfigOutput values.
// You can construct a concrete instance of `AuditConfigInput` via:
//
//	AuditConfigArgs{...}
type AuditConfigInput interface {
	pulumi.Input

	ToAuditConfigOutput() AuditConfigOutput
	ToAuditConfigOutputWithContext(context.Context) AuditConfigOutput
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigArgs struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs AuditLogConfigArrayInput `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (AuditConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (i AuditConfigArgs) ToAuditConfigOutput() AuditConfigOutput {
	return i.ToAuditConfigOutputWithContext(context.Background())
}

func (i AuditConfigArgs) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigOutput)
}

// AuditConfigArrayInput is an input type that accepts AuditConfigArray and AuditConfigArrayOutput values.
// You can construct a concrete instance of `AuditConfigArrayInput` via:
//
//	AuditConfigArray{ AuditConfigArgs{...} }
type AuditConfigArrayInput interface {
	pulumi.Input

	ToAuditConfigArrayOutput() AuditConfigArrayOutput
	ToAuditConfigArrayOutputWithContext(context.Context) AuditConfigArrayOutput
}

type AuditConfigArray []AuditConfigInput

func (AuditConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (i AuditConfigArray) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return i.ToAuditConfigArrayOutputWithContext(context.Background())
}

func (i AuditConfigArray) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigArrayOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigOutput struct{ *pulumi.OutputState }

func (AuditConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (o AuditConfigOutput) ToAuditConfigOutput() AuditConfigOutput {
	return o
}

func (o AuditConfigOutput) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigOutput) AuditLogConfigs() AuditLogConfigArrayOutput {
	return o.ApplyT(func(v AuditConfig) []AuditLogConfig { return v.AuditLogConfigs }).(AuditLogConfigArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuditConfig) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type AuditConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) Index(i pulumi.IntInput) AuditConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfig {
		return vs[0].([]AuditConfig)[vs[1].(int)]
	}).(AuditConfigOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigResponse struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfigResponse `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service string `pulumi:"service"`
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutput() AuditConfigResponseOutput {
	return o
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutputWithContext(ctx context.Context) AuditConfigResponseOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigResponseOutput) AuditLogConfigs() AuditLogConfigResponseArrayOutput {
	return o.ApplyT(func(v AuditConfigResponse) []AuditLogConfigResponse { return v.AuditLogConfigs }).(AuditLogConfigResponseArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v AuditConfigResponse) string { return v.Service }).(pulumi.StringOutput)
}

type AuditConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutput() AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutputWithContext(ctx context.Context) AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfigResponse {
		return vs[0].([]AuditConfigResponse)[vs[1].(int)]
	}).(AuditConfigResponseOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfig struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType *AuditLogConfigLogType `pulumi:"logType"`
}

// AuditLogConfigInput is an input type that accepts AuditLogConfigArgs and AuditLogConfigOutput values.
// You can construct a concrete instance of `AuditLogConfigInput` via:
//
//	AuditLogConfigArgs{...}
type AuditLogConfigInput interface {
	pulumi.Input

	ToAuditLogConfigOutput() AuditLogConfigOutput
	ToAuditLogConfigOutputWithContext(context.Context) AuditLogConfigOutput
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigArgs struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers pulumi.StringArrayInput `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType AuditLogConfigLogTypePtrInput `pulumi:"logType"`
}

func (AuditLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return i.ToAuditLogConfigOutputWithContext(context.Background())
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigOutput)
}

// AuditLogConfigArrayInput is an input type that accepts AuditLogConfigArray and AuditLogConfigArrayOutput values.
// You can construct a concrete instance of `AuditLogConfigArrayInput` via:
//
//	AuditLogConfigArray{ AuditLogConfigArgs{...} }
type AuditLogConfigArrayInput interface {
	pulumi.Input

	ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput
	ToAuditLogConfigArrayOutputWithContext(context.Context) AuditLogConfigArrayOutput
}

type AuditLogConfigArray []AuditLogConfigInput

func (AuditLogConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return i.ToAuditLogConfigArrayOutputWithContext(context.Background())
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigArrayOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigOutput struct{ *pulumi.OutputState }

func (AuditLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return o
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfig) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigOutput) LogType() AuditLogConfigLogTypePtrOutput {
	return o.ApplyT(func(v AuditLogConfig) *AuditLogConfigLogType { return v.LogType }).(AuditLogConfigLogTypePtrOutput)
}

type AuditLogConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) Index(i pulumi.IntInput) AuditLogConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfig {
		return vs[0].([]AuditLogConfig)[vs[1].(int)]
	}).(AuditLogConfigOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponse struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType string `pulumi:"logType"`
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutput() AuditLogConfigResponseOutput {
	return o
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutputWithContext(ctx context.Context) AuditLogConfigResponseOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigResponseOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigResponseOutput) LogType() pulumi.StringOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) string { return v.LogType }).(pulumi.StringOutput)
}

type AuditLogConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutput() AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutputWithContext(ctx context.Context) AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditLogConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfigResponse {
		return vs[0].([]AuditLogConfigResponse)[vs[1].(int)]
	}).(AuditLogConfigResponseOutput)
}

// Associates `members`, or principals, with a `role`.
type Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//	BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates `members`, or principals, with a `role`.
type BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//	BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingResponse struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprResponse `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role string `pulumi:"role"`
}

// Associates `members`, or principals, with a `role`.
type BindingResponseOutput struct{ *pulumi.OutputState }

func (BindingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingResponse)(nil)).Elem()
}

func (o BindingResponseOutput) ToBindingResponseOutput() BindingResponseOutput {
	return o
}

func (o BindingResponseOutput) ToBindingResponseOutputWithContext(ctx context.Context) BindingResponseOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingResponseOutput) Condition() ExprResponseOutput {
	return o.ApplyT(func(v BindingResponse) ExprResponse { return v.Condition }).(ExprResponseOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
func (o BindingResponseOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BindingResponse) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingResponseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v BindingResponse) string { return v.Role }).(pulumi.StringOutput)
}

type BindingResponseArrayOutput struct{ *pulumi.OutputState }

func (BindingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingResponse)(nil)).Elem()
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutput() BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutputWithContext(ctx context.Context) BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) Index(i pulumi.IntInput) BindingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BindingResponse {
		return vs[0].([]BindingResponse)[vs[1].(int)]
	}).(BindingResponseOutput)
}

// Specifies required connection parameters, and, optionally, the parameters required to create a Cloud SQL destination database instance.
type CloudSqlConnectionProfile struct {
	// Immutable. Metadata used to create the destination Cloud SQL database.
	Settings *CloudSqlSettings `pulumi:"settings"`
}

// CloudSqlConnectionProfileInput is an input type that accepts CloudSqlConnectionProfileArgs and CloudSqlConnectionProfileOutput values.
// You can construct a concrete instance of `CloudSqlConnectionProfileInput` via:
//
//	CloudSqlConnectionProfileArgs{...}
type CloudSqlConnectionProfileInput interface {
	pulumi.Input

	ToCloudSqlConnectionProfileOutput() CloudSqlConnectionProfileOutput
	ToCloudSqlConnectionProfileOutputWithContext(context.Context) CloudSqlConnectionProfileOutput
}

// Specifies required connection parameters, and, optionally, the parameters required to create a Cloud SQL destination database instance.
type CloudSqlConnectionProfileArgs struct {
	// Immutable. Metadata used to create the destination Cloud SQL database.
	Settings CloudSqlSettingsPtrInput `pulumi:"settings"`
}

func (CloudSqlConnectionProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudSqlConnectionProfile)(nil)).Elem()
}

func (i CloudSqlConnectionProfileArgs) ToCloudSqlConnectionProfileOutput() CloudSqlConnectionProfileOutput {
	return i.ToCloudSqlConnectionProfileOutputWithContext(context.Background())
}

func (i CloudSqlConnectionProfileArgs) ToCloudSqlConnectionProfileOutputWithContext(ctx context.Context) CloudSqlConnectionProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudSqlConnectionProfileOutput)
}

func (i CloudSqlConnectionProfileArgs) ToCloudSqlConnectionProfilePtrOutput() CloudSqlConnectionProfilePtrOutput {
	return i.ToCloudSqlConnectionProfilePtrOutputWithContext(context.Background())
}

func (i CloudSqlConnectionProfileArgs) ToCloudSqlConnectionProfilePtrOutputWithContext(ctx context.Context) CloudSqlConnectionProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudSqlConnectionProfileOutput).ToCloudSqlConnectionProfilePtrOutputWithContext(ctx)
}

// CloudSqlConnectionProfilePtrInput is an input type that accepts CloudSqlConnectionProfileArgs, CloudSqlConnectionProfilePtr and CloudSqlConnectionProfilePtrOutput values.
// You can construct a concrete instance of `CloudSqlConnectionProfilePtrInput` via:
//
//	        CloudSqlConnectionProfileArgs{...}
//
//	or:
//
//	        nil
type CloudSqlConnectionProfilePtrInput interface {
	pulumi.Input

	ToCloudSqlConnectionProfilePtrOutput() CloudSqlConnectionProfilePtrOutput
	ToCloudSqlConnectionProfilePtrOutputWithContext(context.Context) CloudSqlConnectionProfilePtrOutput
}

type cloudSqlConnectionProfilePtrType CloudSqlConnectionProfileArgs

func CloudSqlConnectionProfilePtr(v *CloudSqlConnectionProfileArgs) CloudSqlConnectionProfilePtrInput {
	return (*cloudSqlConnectionProfilePtrType)(v)
}

func (*cloudSqlConnectionProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudSqlConnectionProfile)(nil)).Elem()
}

func (i *cloudSqlConnectionProfilePtrType) ToCloudSqlConnectionProfilePtrOutput() CloudSqlConnectionProfilePtrOutput {
	return i.ToCloudSqlConnectionProfilePtrOutputWithContext(context.Background())
}

func (i *cloudSqlConnectionProfilePtrType) ToCloudSqlConnectionProfilePtrOutputWithContext(ctx context.Context) CloudSqlConnectionProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudSqlConnectionProfilePtrOutput)
}

// Specifies required connection parameters, and, optionally, the parameters required to create a Cloud SQL destination database instance.
type CloudSqlConnectionProfileOutput struct{ *pulumi.OutputState }

func (CloudSqlConnectionProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudSqlConnectionProfile)(nil)).Elem()
}

func (o CloudSqlConnectionProfileOutput) ToCloudSqlConnectionProfileOutput() CloudSqlConnectionProfileOutput {
	return o
}

func (o CloudSqlConnectionProfileOutput) ToCloudSqlConnectionProfileOutputWithContext(ctx context.Context) CloudSqlConnectionProfileOutput {
	return o
}

func (o CloudSqlConnectionProfileOutput) ToCloudSqlConnectionProfilePtrOutput() CloudSqlConnectionProfilePtrOutput {
	return o.ToCloudSqlConnectionProfilePtrOutputWithContext(context.Background())
}

func (o CloudSqlConnectionProfileOutput) ToCloudSqlConnectionProfilePtrOutputWithContext(ctx context.Context) CloudSqlConnectionProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CloudSqlConnectionProfile) *CloudSqlConnectionProfile {
		return &v
	}).(CloudSqlConnectionProfilePtrOutput)
}

// Immutable. Metadata used to create the destination Cloud SQL database.
func (o CloudSqlConnectionProfileOutput) Settings() CloudSqlSettingsPtrOutput {
	return o.ApplyT(func(v CloudSqlConnectionProfile) *CloudSqlSettings { return v.Settings }).(CloudSqlSettingsPtrOutput)
}

type CloudSqlConnectionProfilePtrOutput struct{ *pulumi.OutputState }

func (CloudSqlConnectionProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudSqlConnectionProfile)(nil)).Elem()
}

func (o CloudSqlConnectionProfilePtrOutput) ToCloudSqlConnectionProfilePtrOutput() CloudSqlConnectionProfilePtrOutput {
	return o
}

func (o CloudSqlConnectionProfilePtrOutput) ToCloudSqlConnectionProfilePtrOutputWithContext(ctx context.Context) CloudSqlConnectionProfilePtrOutput {
	return o
}

func (o CloudSqlConnectionProfilePtrOutput) Elem() CloudSqlConnectionProfileOutput {
	return o.ApplyT(func(v *CloudSqlConnectionProfile) CloudSqlConnectionProfile {
		if v != nil {
			return *v
		}
		var ret CloudSqlConnectionProfile
		return ret
	}).(CloudSqlConnectionProfileOutput)
}

// Immutable. Metadata used to create the destination Cloud SQL database.
func (o CloudSqlConnectionProfilePtrOutput) Settings() CloudSqlSettingsPtrOutput {
	return o.ApplyT(func(v *CloudSqlConnectionProfile) *CloudSqlSettings {
		if v == nil {
			return nil
		}
		return v.Settings
	}).(CloudSqlSettingsPtrOutput)
}

// Specifies required connection parameters, and, optionally, the parameters required to create a Cloud SQL destination database instance.
type CloudSqlConnectionProfileResponse struct {
	// The Cloud SQL database instance's additional (outgoing) public IP. Used when the Cloud SQL database availability type is REGIONAL (i.e. multiple zones / highly available).
	AdditionalPublicIp string `pulumi:"additionalPublicIp"`
	// The Cloud SQL instance ID that this connection profile is associated with.
	CloudSqlId string `pulumi:"cloudSqlId"`
	// The Cloud SQL database instance's private IP.
	PrivateIp string `pulumi:"privateIp"`
	// The Cloud SQL database instance's public IP.
	PublicIp string `pulumi:"publicIp"`
	// Immutable. Metadata used to create the destination Cloud SQL database.
	Settings CloudSqlSettingsResponse `pulumi:"settings"`
}

// Specifies required connection parameters, and, optionally, the parameters required to create a Cloud SQL destination database instance.
type CloudSqlConnectionProfileResponseOutput struct{ *pulumi.OutputState }

func (CloudSqlConnectionProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudSqlConnectionProfileResponse)(nil)).Elem()
}

func (o CloudSqlConnectionProfileResponseOutput) ToCloudSqlConnectionProfileResponseOutput() CloudSqlConnectionProfileResponseOutput {
	return o
}

func (o CloudSqlConnectionProfileResponseOutput) ToCloudSqlConnectionProfileResponseOutputWithContext(ctx context.Context) CloudSqlConnectionProfileResponseOutput {
	return o
}

// The Cloud SQL database instance's additional (outgoing) public IP. Used when the Cloud SQL database availability type is REGIONAL (i.e. multiple zones / highly available).
func (o CloudSqlConnectionProfileResponseOutput) AdditionalPublicIp() pulumi.StringOutput {
	return o.ApplyT(func(v CloudSqlConnectionProfileResponse) string { return v.AdditionalPublicIp }).(pulumi.StringOutput)
}

// The Cloud SQL instance ID that this connection profile is associated with.
func (o CloudSqlConnectionProfileResponseOutput) CloudSqlId() pulumi.StringOutput {
	return o.ApplyT(func(v CloudSqlConnectionProfileResponse) string { return v.CloudSqlId }).(pulumi.StringOutput)
}

// The Cloud SQL database instance's private IP.
func (o CloudSqlConnectionProfileResponseOutput) PrivateIp() pulumi.StringOutput {
	return o.ApplyT(func(v CloudSqlConnectionProfileResponse) string { return v.PrivateIp }).(pulumi.StringOutput)
}

// The Cloud SQL database instance's public IP.
func (o CloudSqlConnectionProfileResponseOutput) PublicIp() pulumi.StringOutput {
	return o.ApplyT(func(v CloudSqlConnectionProfileResponse) string { return v.PublicIp }).(pulumi.StringOutput)
}

// Immutable. Metadata used to create the destination Cloud SQL database.
func (o CloudSqlConnectionProfileResponseOutput) Settings() CloudSqlSettingsResponseOutput {
	return o.ApplyT(func(v CloudSqlConnectionProfileResponse) CloudSqlSettingsResponse { return v.Settings }).(CloudSqlSettingsResponseOutput)
}

// Settings for creating a Cloud SQL database instance.
type CloudSqlSettings struct {
	// The activation policy specifies when the instance is activated; it is applicable only when the instance state is 'RUNNABLE'. Valid values: 'ALWAYS': The instance is on, and remains so even in the absence of connection requests. `NEVER`: The instance is off; it is not activated, even if a connection request arrives.
	ActivationPolicy *CloudSqlSettingsActivationPolicy `pulumi:"activationPolicy"`
	// [default: ON] If you enable this setting, Cloud SQL checks your available storage every 30 seconds. If the available storage falls below a threshold size, Cloud SQL automatically adds additional storage capacity. If the available storage repeatedly falls below the threshold size, Cloud SQL continues to add storage until it reaches the maximum of 30 TB.
	AutoStorageIncrease *bool `pulumi:"autoStorageIncrease"`
	// Optional. Availability type. Potential values: * `ZONAL`: The instance serves data from only one zone. Outages in that zone affect data availability. * `REGIONAL`: The instance can serve data from more than one zone in a region (it is highly available).
	AvailabilityType *CloudSqlSettingsAvailabilityType `pulumi:"availabilityType"`
	// The KMS key name used for the csql instance.
	CmekKeyName *string `pulumi:"cmekKeyName"`
	// The Cloud SQL default instance level collation.
	Collation *string `pulumi:"collation"`
	// Optional. Data cache is an optional feature available for Cloud SQL for MySQL Enterprise Plus edition only. For more information on data cache, see [Data cache overview](https://cloud.google.com/sql/help/mysql-data-cache) in Cloud SQL documentation.
	DataCacheConfig *DataCacheConfig `pulumi:"dataCacheConfig"`
	// The storage capacity available to the database, in GB. The minimum (and default) size is 10GB.
	DataDiskSizeGb *string `pulumi:"dataDiskSizeGb"`
	// The type of storage: `PD_SSD` (default) or `PD_HDD`.
	DataDiskType *CloudSqlSettingsDataDiskType `pulumi:"dataDiskType"`
	// The database flags passed to the Cloud SQL instance at startup. An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	DatabaseFlags map[string]string `pulumi:"databaseFlags"`
	// The database engine type and version.
	DatabaseVersion *CloudSqlSettingsDatabaseVersion `pulumi:"databaseVersion"`
	// Optional. The edition of the given Cloud SQL instance.
	Edition *CloudSqlSettingsEdition `pulumi:"edition"`
	// The settings for IP Management. This allows to enable or disable the instance IP and manage which external networks can connect to the instance. The IPv4 address cannot be disabled.
	IpConfig *SqlIpConfig `pulumi:"ipConfig"`
	// Input only. Initial root password.
	RootPassword *string `pulumi:"rootPassword"`
	// Optional. The Google Cloud Platform zone where the failover Cloud SQL database instance is located. Used when the Cloud SQL database availability type is REGIONAL (i.e. multiple zones / highly available).
	SecondaryZone *string `pulumi:"secondaryZone"`
	// The Database Migration Service source connection profile ID, in the format: `projects/my_project_name/locations/us-central1/connectionProfiles/connection_profile_ID`
	SourceId *string `pulumi:"sourceId"`
	// The maximum size to which storage capacity can be automatically increased. The default value is 0, which specifies that there is no limit.
	StorageAutoResizeLimit *string `pulumi:"storageAutoResizeLimit"`
	// The tier (or machine type) for this instance, for example: `db-n1-standard-1` (MySQL instances) or `db-custom-1-3840` (PostgreSQL instances). For more information, see [Cloud SQL Instance Settings](https://cloud.google.com/sql/docs/mysql/instance-settings).
	Tier *string `pulumi:"tier"`
	// The resource labels for a Cloud SQL instance to use to annotate any related underlying resources such as Compute Engine VMs. An object containing a list of "key": "value" pairs. Example: `{ "name": "wrench", "mass": "18kg", "count": "3" }`.
	UserLabels map[string]string `pulumi:"userLabels"`
	// The Google Cloud Platform zone where your Cloud SQL database instance is located.
	Zone *string `pulumi:"zone"`
}

// CloudSqlSettingsInput is an input type that accepts CloudSqlSettingsArgs and CloudSqlSettingsOutput values.
// You can construct a concrete instance of `CloudSqlSettingsInput` via:
//
//	CloudSqlSettingsArgs{...}
type CloudSqlSettingsInput interface {
	pulumi.Input

	ToCloudSqlSettingsOutput() CloudSqlSettingsOutput
	ToCloudSqlSettingsOutputWithContext(context.Context) CloudSqlSettingsOutput
}

// Settings for creating a Cloud SQL database instance.
type CloudSqlSettingsArgs struct {
	// The activation policy specifies when the instance is activated; it is applicable only when the instance state is 'RUNNABLE'. Valid values: 'ALWAYS': The instance is on, and remains so even in the absence of connection requests. `NEVER`: The instance is off; it is not activated, even if a connection request arrives.
	ActivationPolicy CloudSqlSettingsActivationPolicyPtrInput `pulumi:"activationPolicy"`
	// [default: ON] If you enable this setting, Cloud SQL checks your available storage every 30 seconds. If the available storage falls below a threshold size, Cloud SQL automatically adds additional storage capacity. If the available storage repeatedly falls below the threshold size, Cloud SQL continues to add storage until it reaches the maximum of 30 TB.
	AutoStorageIncrease pulumi.BoolPtrInput `pulumi:"autoStorageIncrease"`
	// Optional. Availability type. Potential values: * `ZONAL`: The instance serves data from only one zone. Outages in that zone affect data availability. * `REGIONAL`: The instance can serve data from more than one zone in a region (it is highly available).
	AvailabilityType CloudSqlSettingsAvailabilityTypePtrInput `pulumi:"availabilityType"`
	// The KMS key name used for the csql instance.
	CmekKeyName pulumi.StringPtrInput `pulumi:"cmekKeyName"`
	// The Cloud SQL default instance level collation.
	Collation pulumi.StringPtrInput `pulumi:"collation"`
	// Optional. Data cache is an optional feature available for Cloud SQL for MySQL Enterprise Plus edition only. For more information on data cache, see [Data cache overview](https://cloud.google.com/sql/help/mysql-data-cache) in Cloud SQL documentation.
	DataCacheConfig DataCacheConfigPtrInput `pulumi:"dataCacheConfig"`
	// The storage capacity available to the database, in GB. The minimum (and default) size is 10GB.
	DataDiskSizeGb pulumi.StringPtrInput `pulumi:"dataDiskSizeGb"`
	// The type of storage: `PD_SSD` (default) or `PD_HDD`.
	DataDiskType CloudSqlSettingsDataDiskTypePtrInput `pulumi:"dataDiskType"`
	// The database flags passed to the Cloud SQL instance at startup. An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	DatabaseFlags pulumi.StringMapInput `pulumi:"databaseFlags"`
	// The database engine type and version.
	DatabaseVersion CloudSqlSettingsDatabaseVersionPtrInput `pulumi:"databaseVersion"`
	// Optional. The edition of the given Cloud SQL instance.
	Edition CloudSqlSettingsEditionPtrInput `pulumi:"edition"`
	// The settings for IP Management. This allows to enable or disable the instance IP and manage which external networks can connect to the instance. The IPv4 address cannot be disabled.
	IpConfig SqlIpConfigPtrInput `pulumi:"ipConfig"`
	// Input only. Initial root password.
	RootPassword pulumi.StringPtrInput `pulumi:"rootPassword"`
	// Optional. The Google Cloud Platform zone where the failover Cloud SQL database instance is located. Used when the Cloud SQL database availability type is REGIONAL (i.e. multiple zones / highly available).
	SecondaryZone pulumi.StringPtrInput `pulumi:"secondaryZone"`
	// The Database Migration Service source connection profile ID, in the format: `projects/my_project_name/locations/us-central1/connectionProfiles/connection_profile_ID`
	SourceId pulumi.StringPtrInput `pulumi:"sourceId"`
	// The maximum size to which storage capacity can be automatically increased. The default value is 0, which specifies that there is no limit.
	StorageAutoResizeLimit pulumi.StringPtrInput `pulumi:"storageAutoResizeLimit"`
	// The tier (or machine type) for this instance, for example: `db-n1-standard-1` (MySQL instances) or `db-custom-1-3840` (PostgreSQL instances). For more information, see [Cloud SQL Instance Settings](https://cloud.google.com/sql/docs/mysql/instance-settings).
	Tier pulumi.StringPtrInput `pulumi:"tier"`
	// The resource labels for a Cloud SQL instance to use to annotate any related underlying resources such as Compute Engine VMs. An object containing a list of "key": "value" pairs. Example: `{ "name": "wrench", "mass": "18kg", "count": "3" }`.
	UserLabels pulumi.StringMapInput `pulumi:"userLabels"`
	// The Google Cloud Platform zone where your Cloud SQL database instance is located.
	Zone pulumi.StringPtrInput `pulumi:"zone"`
}

func (CloudSqlSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudSqlSettings)(nil)).Elem()
}

func (i CloudSqlSettingsArgs) ToCloudSqlSettingsOutput() CloudSqlSettingsOutput {
	return i.ToCloudSqlSettingsOutputWithContext(context.Background())
}

func (i CloudSqlSettingsArgs) ToCloudSqlSettingsOutputWithContext(ctx context.Context) CloudSqlSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudSqlSettingsOutput)
}

func (i CloudSqlSettingsArgs) ToCloudSqlSettingsPtrOutput() CloudSqlSettingsPtrOutput {
	return i.ToCloudSqlSettingsPtrOutputWithContext(context.Background())
}

func (i CloudSqlSettingsArgs) ToCloudSqlSettingsPtrOutputWithContext(ctx context.Context) CloudSqlSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudSqlSettingsOutput).ToCloudSqlSettingsPtrOutputWithContext(ctx)
}

// CloudSqlSettingsPtrInput is an input type that accepts CloudSqlSettingsArgs, CloudSqlSettingsPtr and CloudSqlSettingsPtrOutput values.
// You can construct a concrete instance of `CloudSqlSettingsPtrInput` via:
//
//	        CloudSqlSettingsArgs{...}
//
//	or:
//
//	        nil
type CloudSqlSettingsPtrInput interface {
	pulumi.Input

	ToCloudSqlSettingsPtrOutput() CloudSqlSettingsPtrOutput
	ToCloudSqlSettingsPtrOutputWithContext(context.Context) CloudSqlSettingsPtrOutput
}

type cloudSqlSettingsPtrType CloudSqlSettingsArgs

func CloudSqlSettingsPtr(v *CloudSqlSettingsArgs) CloudSqlSettingsPtrInput {
	return (*cloudSqlSettingsPtrType)(v)
}

func (*cloudSqlSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudSqlSettings)(nil)).Elem()
}

func (i *cloudSqlSettingsPtrType) ToCloudSqlSettingsPtrOutput() CloudSqlSettingsPtrOutput {
	return i.ToCloudSqlSettingsPtrOutputWithContext(context.Background())
}

func (i *cloudSqlSettingsPtrType) ToCloudSqlSettingsPtrOutputWithContext(ctx context.Context) CloudSqlSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudSqlSettingsPtrOutput)
}

// Settings for creating a Cloud SQL database instance.
type CloudSqlSettingsOutput struct{ *pulumi.OutputState }

func (CloudSqlSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudSqlSettings)(nil)).Elem()
}

func (o CloudSqlSettingsOutput) ToCloudSqlSettingsOutput() CloudSqlSettingsOutput {
	return o
}

func (o CloudSqlSettingsOutput) ToCloudSqlSettingsOutputWithContext(ctx context.Context) CloudSqlSettingsOutput {
	return o
}

func (o CloudSqlSettingsOutput) ToCloudSqlSettingsPtrOutput() CloudSqlSettingsPtrOutput {
	return o.ToCloudSqlSettingsPtrOutputWithContext(context.Background())
}

func (o CloudSqlSettingsOutput) ToCloudSqlSettingsPtrOutputWithContext(ctx context.Context) CloudSqlSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CloudSqlSettings) *CloudSqlSettings {
		return &v
	}).(CloudSqlSettingsPtrOutput)
}

// The activation policy specifies when the instance is activated; it is applicable only when the instance state is 'RUNNABLE'. Valid values: 'ALWAYS': The instance is on, and remains so even in the absence of connection requests. `NEVER`: The instance is off; it is not activated, even if a connection request arrives.
func (o CloudSqlSettingsOutput) ActivationPolicy() CloudSqlSettingsActivationPolicyPtrOutput {
	return o.ApplyT(func(v CloudSqlSettings) *CloudSqlSettingsActivationPolicy { return v.ActivationPolicy }).(CloudSqlSettingsActivationPolicyPtrOutput)
}

// [default: ON] If you enable this setting, Cloud SQL checks your available storage every 30 seconds. If the available storage falls below a threshold size, Cloud SQL automatically adds additional storage capacity. If the available storage repeatedly falls below the threshold size, Cloud SQL continues to add storage until it reaches the maximum of 30 TB.
func (o CloudSqlSettingsOutput) AutoStorageIncrease() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CloudSqlSettings) *bool { return v.AutoStorageIncrease }).(pulumi.BoolPtrOutput)
}

// Optional. Availability type. Potential values: * `ZONAL`: The instance serves data from only one zone. Outages in that zone affect data availability. * `REGIONAL`: The instance can serve data from more than one zone in a region (it is highly available).
func (o CloudSqlSettingsOutput) AvailabilityType() CloudSqlSettingsAvailabilityTypePtrOutput {
	return o.ApplyT(func(v CloudSqlSettings) *CloudSqlSettingsAvailabilityType { return v.AvailabilityType }).(CloudSqlSettingsAvailabilityTypePtrOutput)
}

// The KMS key name used for the csql instance.
func (o CloudSqlSettingsOutput) CmekKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CloudSqlSettings) *string { return v.CmekKeyName }).(pulumi.StringPtrOutput)
}

// The Cloud SQL default instance level collation.
func (o CloudSqlSettingsOutput) Collation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CloudSqlSettings) *string { return v.Collation }).(pulumi.StringPtrOutput)
}

// Optional. Data cache is an optional feature available for Cloud SQL for MySQL Enterprise Plus edition only. For more information on data cache, see [Data cache overview](https://cloud.google.com/sql/help/mysql-data-cache) in Cloud SQL documentation.
func (o CloudSqlSettingsOutput) DataCacheConfig() DataCacheConfigPtrOutput {
	return o.ApplyT(func(v CloudSqlSettings) *DataCacheConfig { return v.DataCacheConfig }).(DataCacheConfigPtrOutput)
}

// The storage capacity available to the database, in GB. The minimum (and default) size is 10GB.
func (o CloudSqlSettingsOutput) DataDiskSizeGb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CloudSqlSettings) *string { return v.DataDiskSizeGb }).(pulumi.StringPtrOutput)
}

// The type of storage: `PD_SSD` (default) or `PD_HDD`.
func (o CloudSqlSettingsOutput) DataDiskType() CloudSqlSettingsDataDiskTypePtrOutput {
	return o.ApplyT(func(v CloudSqlSettings) *CloudSqlSettingsDataDiskType { return v.DataDiskType }).(CloudSqlSettingsDataDiskTypePtrOutput)
}

// The database flags passed to the Cloud SQL instance at startup. An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
func (o CloudSqlSettingsOutput) DatabaseFlags() pulumi.StringMapOutput {
	return o.ApplyT(func(v CloudSqlSettings) map[string]string { return v.DatabaseFlags }).(pulumi.StringMapOutput)
}

// The database engine type and version.
func (o CloudSqlSettingsOutput) DatabaseVersion() CloudSqlSettingsDatabaseVersionPtrOutput {
	return o.ApplyT(func(v CloudSqlSettings) *CloudSqlSettingsDatabaseVersion { return v.DatabaseVersion }).(CloudSqlSettingsDatabaseVersionPtrOutput)
}

// Optional. The edition of the given Cloud SQL instance.
func (o CloudSqlSettingsOutput) Edition() CloudSqlSettingsEditionPtrOutput {
	return o.ApplyT(func(v CloudSqlSettings) *CloudSqlSettingsEdition { return v.Edition }).(CloudSqlSettingsEditionPtrOutput)
}

// The settings for IP Management. This allows to enable or disable the instance IP and manage which external networks can connect to the instance. The IPv4 address cannot be disabled.
func (o CloudSqlSettingsOutput) IpConfig() SqlIpConfigPtrOutput {
	return o.ApplyT(func(v CloudSqlSettings) *SqlIpConfig { return v.IpConfig }).(SqlIpConfigPtrOutput)
}

// Input only. Initial root password.
func (o CloudSqlSettingsOutput) RootPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CloudSqlSettings) *string { return v.RootPassword }).(pulumi.StringPtrOutput)
}

// Optional. The Google Cloud Platform zone where the failover Cloud SQL database instance is located. Used when the Cloud SQL database availability type is REGIONAL (i.e. multiple zones / highly available).
func (o CloudSqlSettingsOutput) SecondaryZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CloudSqlSettings) *string { return v.SecondaryZone }).(pulumi.StringPtrOutput)
}

// The Database Migration Service source connection profile ID, in the format: `projects/my_project_name/locations/us-central1/connectionProfiles/connection_profile_ID`
func (o CloudSqlSettingsOutput) SourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CloudSqlSettings) *string { return v.SourceId }).(pulumi.StringPtrOutput)
}

// The maximum size to which storage capacity can be automatically increased. The default value is 0, which specifies that there is no limit.
func (o CloudSqlSettingsOutput) StorageAutoResizeLimit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CloudSqlSettings) *string { return v.StorageAutoResizeLimit }).(pulumi.StringPtrOutput)
}

// The tier (or machine type) for this instance, for example: `db-n1-standard-1` (MySQL instances) or `db-custom-1-3840` (PostgreSQL instances). For more information, see [Cloud SQL Instance Settings](https://cloud.google.com/sql/docs/mysql/instance-settings).
func (o CloudSqlSettingsOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CloudSqlSettings) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

// The resource labels for a Cloud SQL instance to use to annotate any related underlying resources such as Compute Engine VMs. An object containing a list of "key": "value" pairs. Example: `{ "name": "wrench", "mass": "18kg", "count": "3" }`.
func (o CloudSqlSettingsOutput) UserLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v CloudSqlSettings) map[string]string { return v.UserLabels }).(pulumi.StringMapOutput)
}

// The Google Cloud Platform zone where your Cloud SQL database instance is located.
func (o CloudSqlSettingsOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CloudSqlSettings) *string { return v.Zone }).(pulumi.StringPtrOutput)
}

type CloudSqlSettingsPtrOutput struct{ *pulumi.OutputState }

func (CloudSqlSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudSqlSettings)(nil)).Elem()
}

func (o CloudSqlSettingsPtrOutput) ToCloudSqlSettingsPtrOutput() CloudSqlSettingsPtrOutput {
	return o
}

func (o CloudSqlSettingsPtrOutput) ToCloudSqlSettingsPtrOutputWithContext(ctx context.Context) CloudSqlSettingsPtrOutput {
	return o
}

func (o CloudSqlSettingsPtrOutput) Elem() CloudSqlSettingsOutput {
	return o.ApplyT(func(v *CloudSqlSettings) CloudSqlSettings {
		if v != nil {
			return *v
		}
		var ret CloudSqlSettings
		return ret
	}).(CloudSqlSettingsOutput)
}

// The activation policy specifies when the instance is activated; it is applicable only when the instance state is 'RUNNABLE'. Valid values: 'ALWAYS': The instance is on, and remains so even in the absence of connection requests. `NEVER`: The instance is off; it is not activated, even if a connection request arrives.
func (o CloudSqlSettingsPtrOutput) ActivationPolicy() CloudSqlSettingsActivationPolicyPtrOutput {
	return o.ApplyT(func(v *CloudSqlSettings) *CloudSqlSettingsActivationPolicy {
		if v == nil {
			return nil
		}
		return v.ActivationPolicy
	}).(CloudSqlSettingsActivationPolicyPtrOutput)
}

// [default: ON] If you enable this setting, Cloud SQL checks your available storage every 30 seconds. If the available storage falls below a threshold size, Cloud SQL automatically adds additional storage capacity. If the available storage repeatedly falls below the threshold size, Cloud SQL continues to add storage until it reaches the maximum of 30 TB.
func (o CloudSqlSettingsPtrOutput) AutoStorageIncrease() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CloudSqlSettings) *bool {
		if v == nil {
			return nil
		}
		return v.AutoStorageIncrease
	}).(pulumi.BoolPtrOutput)
}

// Optional. Availability type. Potential values: * `ZONAL`: The instance serves data from only one zone. Outages in that zone affect data availability. * `REGIONAL`: The instance can serve data from more than one zone in a region (it is highly available).
func (o CloudSqlSettingsPtrOutput) AvailabilityType() CloudSqlSettingsAvailabilityTypePtrOutput {
	return o.ApplyT(func(v *CloudSqlSettings) *CloudSqlSettingsAvailabilityType {
		if v == nil {
			return nil
		}
		return v.AvailabilityType
	}).(CloudSqlSettingsAvailabilityTypePtrOutput)
}

// The KMS key name used for the csql instance.
func (o CloudSqlSettingsPtrOutput) CmekKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudSqlSettings) *string {
		if v == nil {
			return nil
		}
		return v.CmekKeyName
	}).(pulumi.StringPtrOutput)
}

// The Cloud SQL default instance level collation.
func (o CloudSqlSettingsPtrOutput) Collation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudSqlSettings) *string {
		if v == nil {
			return nil
		}
		return v.Collation
	}).(pulumi.StringPtrOutput)
}

// Optional. Data cache is an optional feature available for Cloud SQL for MySQL Enterprise Plus edition only. For more information on data cache, see [Data cache overview](https://cloud.google.com/sql/help/mysql-data-cache) in Cloud SQL documentation.
func (o CloudSqlSettingsPtrOutput) DataCacheConfig() DataCacheConfigPtrOutput {
	return o.ApplyT(func(v *CloudSqlSettings) *DataCacheConfig {
		if v == nil {
			return nil
		}
		return v.DataCacheConfig
	}).(DataCacheConfigPtrOutput)
}

// The storage capacity available to the database, in GB. The minimum (and default) size is 10GB.
func (o CloudSqlSettingsPtrOutput) DataDiskSizeGb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudSqlSettings) *string {
		if v == nil {
			return nil
		}
		return v.DataDiskSizeGb
	}).(pulumi.StringPtrOutput)
}

// The type of storage: `PD_SSD` (default) or `PD_HDD`.
func (o CloudSqlSettingsPtrOutput) DataDiskType() CloudSqlSettingsDataDiskTypePtrOutput {
	return o.ApplyT(func(v *CloudSqlSettings) *CloudSqlSettingsDataDiskType {
		if v == nil {
			return nil
		}
		return v.DataDiskType
	}).(CloudSqlSettingsDataDiskTypePtrOutput)
}

// The database flags passed to the Cloud SQL instance at startup. An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
func (o CloudSqlSettingsPtrOutput) DatabaseFlags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CloudSqlSettings) map[string]string {
		if v == nil {
			return nil
		}
		return v.DatabaseFlags
	}).(pulumi.StringMapOutput)
}

// The database engine type and version.
func (o CloudSqlSettingsPtrOutput) DatabaseVersion() CloudSqlSettingsDatabaseVersionPtrOutput {
	return o.ApplyT(func(v *CloudSqlSettings) *CloudSqlSettingsDatabaseVersion {
		if v == nil {
			return nil
		}
		return v.DatabaseVersion
	}).(CloudSqlSettingsDatabaseVersionPtrOutput)
}

// Optional. The edition of the given Cloud SQL instance.
func (o CloudSqlSettingsPtrOutput) Edition() CloudSqlSettingsEditionPtrOutput {
	return o.ApplyT(func(v *CloudSqlSettings) *CloudSqlSettingsEdition {
		if v == nil {
			return nil
		}
		return v.Edition
	}).(CloudSqlSettingsEditionPtrOutput)
}

// The settings for IP Management. This allows to enable or disable the instance IP and manage which external networks can connect to the instance. The IPv4 address cannot be disabled.
func (o CloudSqlSettingsPtrOutput) IpConfig() SqlIpConfigPtrOutput {
	return o.ApplyT(func(v *CloudSqlSettings) *SqlIpConfig {
		if v == nil {
			return nil
		}
		return v.IpConfig
	}).(SqlIpConfigPtrOutput)
}

// Input only. Initial root password.
func (o CloudSqlSettingsPtrOutput) RootPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudSqlSettings) *string {
		if v == nil {
			return nil
		}
		return v.RootPassword
	}).(pulumi.StringPtrOutput)
}

// Optional. The Google Cloud Platform zone where the failover Cloud SQL database instance is located. Used when the Cloud SQL database availability type is REGIONAL (i.e. multiple zones / highly available).
func (o CloudSqlSettingsPtrOutput) SecondaryZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudSqlSettings) *string {
		if v == nil {
			return nil
		}
		return v.SecondaryZone
	}).(pulumi.StringPtrOutput)
}

// The Database Migration Service source connection profile ID, in the format: `projects/my_project_name/locations/us-central1/connectionProfiles/connection_profile_ID`
func (o CloudSqlSettingsPtrOutput) SourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudSqlSettings) *string {
		if v == nil {
			return nil
		}
		return v.SourceId
	}).(pulumi.StringPtrOutput)
}

// The maximum size to which storage capacity can be automatically increased. The default value is 0, which specifies that there is no limit.
func (o CloudSqlSettingsPtrOutput) StorageAutoResizeLimit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudSqlSettings) *string {
		if v == nil {
			return nil
		}
		return v.StorageAutoResizeLimit
	}).(pulumi.StringPtrOutput)
}

// The tier (or machine type) for this instance, for example: `db-n1-standard-1` (MySQL instances) or `db-custom-1-3840` (PostgreSQL instances). For more information, see [Cloud SQL Instance Settings](https://cloud.google.com/sql/docs/mysql/instance-settings).
func (o CloudSqlSettingsPtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudSqlSettings) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// The resource labels for a Cloud SQL instance to use to annotate any related underlying resources such as Compute Engine VMs. An object containing a list of "key": "value" pairs. Example: `{ "name": "wrench", "mass": "18kg", "count": "3" }`.
func (o CloudSqlSettingsPtrOutput) UserLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CloudSqlSettings) map[string]string {
		if v == nil {
			return nil
		}
		return v.UserLabels
	}).(pulumi.StringMapOutput)
}

// The Google Cloud Platform zone where your Cloud SQL database instance is located.
func (o CloudSqlSettingsPtrOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudSqlSettings) *string {
		if v == nil {
			return nil
		}
		return v.Zone
	}).(pulumi.StringPtrOutput)
}

// Settings for creating a Cloud SQL database instance.
type CloudSqlSettingsResponse struct {
	// The activation policy specifies when the instance is activated; it is applicable only when the instance state is 'RUNNABLE'. Valid values: 'ALWAYS': The instance is on, and remains so even in the absence of connection requests. `NEVER`: The instance is off; it is not activated, even if a connection request arrives.
	ActivationPolicy string `pulumi:"activationPolicy"`
	// [default: ON] If you enable this setting, Cloud SQL checks your available storage every 30 seconds. If the available storage falls below a threshold size, Cloud SQL automatically adds additional storage capacity. If the available storage repeatedly falls below the threshold size, Cloud SQL continues to add storage until it reaches the maximum of 30 TB.
	AutoStorageIncrease bool `pulumi:"autoStorageIncrease"`
	// Optional. Availability type. Potential values: * `ZONAL`: The instance serves data from only one zone. Outages in that zone affect data availability. * `REGIONAL`: The instance can serve data from more than one zone in a region (it is highly available).
	AvailabilityType string `pulumi:"availabilityType"`
	// The KMS key name used for the csql instance.
	CmekKeyName string `pulumi:"cmekKeyName"`
	// The Cloud SQL default instance level collation.
	Collation string `pulumi:"collation"`
	// Optional. Data cache is an optional feature available for Cloud SQL for MySQL Enterprise Plus edition only. For more information on data cache, see [Data cache overview](https://cloud.google.com/sql/help/mysql-data-cache) in Cloud SQL documentation.
	DataCacheConfig DataCacheConfigResponse `pulumi:"dataCacheConfig"`
	// The storage capacity available to the database, in GB. The minimum (and default) size is 10GB.
	DataDiskSizeGb string `pulumi:"dataDiskSizeGb"`
	// The type of storage: `PD_SSD` (default) or `PD_HDD`.
	DataDiskType string `pulumi:"dataDiskType"`
	// The database flags passed to the Cloud SQL instance at startup. An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	DatabaseFlags map[string]string `pulumi:"databaseFlags"`
	// The database engine type and version.
	DatabaseVersion string `pulumi:"databaseVersion"`
	// Optional. The edition of the given Cloud SQL instance.
	Edition string `pulumi:"edition"`
	// The settings for IP Management. This allows to enable or disable the instance IP and manage which external networks can connect to the instance. The IPv4 address cannot be disabled.
	IpConfig SqlIpConfigResponse `pulumi:"ipConfig"`
	// Input only. Initial root password.
	RootPassword string `pulumi:"rootPassword"`
	// Indicates If this connection profile root password is stored.
	RootPasswordSet bool `pulumi:"rootPasswordSet"`
	// Optional. The Google Cloud Platform zone where the failover Cloud SQL database instance is located. Used when the Cloud SQL database availability type is REGIONAL (i.e. multiple zones / highly available).
	SecondaryZone string `pulumi:"secondaryZone"`
	// The Database Migration Service source connection profile ID, in the format: `projects/my_project_name/locations/us-central1/connectionProfiles/connection_profile_ID`
	SourceId string `pulumi:"sourceId"`
	// The maximum size to which storage capacity can be automatically increased. The default value is 0, which specifies that there is no limit.
	StorageAutoResizeLimit string `pulumi:"storageAutoResizeLimit"`
	// The tier (or machine type) for this instance, for example: `db-n1-standard-1` (MySQL instances) or `db-custom-1-3840` (PostgreSQL instances). For more information, see [Cloud SQL Instance Settings](https://cloud.google.com/sql/docs/mysql/instance-settings).
	Tier string `pulumi:"tier"`
	// The resource labels for a Cloud SQL instance to use to annotate any related underlying resources such as Compute Engine VMs. An object containing a list of "key": "value" pairs. Example: `{ "name": "wrench", "mass": "18kg", "count": "3" }`.
	UserLabels map[string]string `pulumi:"userLabels"`
	// The Google Cloud Platform zone where your Cloud SQL database instance is located.
	Zone string `pulumi:"zone"`
}

// Settings for creating a Cloud SQL database instance.
type CloudSqlSettingsResponseOutput struct{ *pulumi.OutputState }

func (CloudSqlSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudSqlSettingsResponse)(nil)).Elem()
}

func (o CloudSqlSettingsResponseOutput) ToCloudSqlSettingsResponseOutput() CloudSqlSettingsResponseOutput {
	return o
}

func (o CloudSqlSettingsResponseOutput) ToCloudSqlSettingsResponseOutputWithContext(ctx context.Context) CloudSqlSettingsResponseOutput {
	return o
}

// The activation policy specifies when the instance is activated; it is applicable only when the instance state is 'RUNNABLE'. Valid values: 'ALWAYS': The instance is on, and remains so even in the absence of connection requests. `NEVER`: The instance is off; it is not activated, even if a connection request arrives.
func (o CloudSqlSettingsResponseOutput) ActivationPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v CloudSqlSettingsResponse) string { return v.ActivationPolicy }).(pulumi.StringOutput)
}

// [default: ON] If you enable this setting, Cloud SQL checks your available storage every 30 seconds. If the available storage falls below a threshold size, Cloud SQL automatically adds additional storage capacity. If the available storage repeatedly falls below the threshold size, Cloud SQL continues to add storage until it reaches the maximum of 30 TB.
func (o CloudSqlSettingsResponseOutput) AutoStorageIncrease() pulumi.BoolOutput {
	return o.ApplyT(func(v CloudSqlSettingsResponse) bool { return v.AutoStorageIncrease }).(pulumi.BoolOutput)
}

// Optional. Availability type. Potential values: * `ZONAL`: The instance serves data from only one zone. Outages in that zone affect data availability. * `REGIONAL`: The instance can serve data from more than one zone in a region (it is highly available).
func (o CloudSqlSettingsResponseOutput) AvailabilityType() pulumi.StringOutput {
	return o.ApplyT(func(v CloudSqlSettingsResponse) string { return v.AvailabilityType }).(pulumi.StringOutput)
}

// The KMS key name used for the csql instance.
func (o CloudSqlSettingsResponseOutput) CmekKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v CloudSqlSettingsResponse) string { return v.CmekKeyName }).(pulumi.StringOutput)
}

// The Cloud SQL default instance level collation.
func (o CloudSqlSettingsResponseOutput) Collation() pulumi.StringOutput {
	return o.ApplyT(func(v CloudSqlSettingsResponse) string { return v.Collation }).(pulumi.StringOutput)
}

// Optional. Data cache is an optional feature available for Cloud SQL for MySQL Enterprise Plus edition only. For more information on data cache, see [Data cache overview](https://cloud.google.com/sql/help/mysql-data-cache) in Cloud SQL documentation.
func (o CloudSqlSettingsResponseOutput) DataCacheConfig() DataCacheConfigResponseOutput {
	return o.ApplyT(func(v CloudSqlSettingsResponse) DataCacheConfigResponse { return v.DataCacheConfig }).(DataCacheConfigResponseOutput)
}

// The storage capacity available to the database, in GB. The minimum (and default) size is 10GB.
func (o CloudSqlSettingsResponseOutput) DataDiskSizeGb() pulumi.StringOutput {
	return o.ApplyT(func(v CloudSqlSettingsResponse) string { return v.DataDiskSizeGb }).(pulumi.StringOutput)
}

// The type of storage: `PD_SSD` (default) or `PD_HDD`.
func (o CloudSqlSettingsResponseOutput) DataDiskType() pulumi.StringOutput {
	return o.ApplyT(func(v CloudSqlSettingsResponse) string { return v.DataDiskType }).(pulumi.StringOutput)
}

// The database flags passed to the Cloud SQL instance at startup. An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
func (o CloudSqlSettingsResponseOutput) DatabaseFlags() pulumi.StringMapOutput {
	return o.ApplyT(func(v CloudSqlSettingsResponse) map[string]string { return v.DatabaseFlags }).(pulumi.StringMapOutput)
}

// The database engine type and version.
func (o CloudSqlSettingsResponseOutput) DatabaseVersion() pulumi.StringOutput {
	return o.ApplyT(func(v CloudSqlSettingsResponse) string { return v.DatabaseVersion }).(pulumi.StringOutput)
}

// Optional. The edition of the given Cloud SQL instance.
func (o CloudSqlSettingsResponseOutput) Edition() pulumi.StringOutput {
	return o.ApplyT(func(v CloudSqlSettingsResponse) string { return v.Edition }).(pulumi.StringOutput)
}

// The settings for IP Management. This allows to enable or disable the instance IP and manage which external networks can connect to the instance. The IPv4 address cannot be disabled.
func (o CloudSqlSettingsResponseOutput) IpConfig() SqlIpConfigResponseOutput {
	return o.ApplyT(func(v CloudSqlSettingsResponse) SqlIpConfigResponse { return v.IpConfig }).(SqlIpConfigResponseOutput)
}

// Input only. Initial root password.
func (o CloudSqlSettingsResponseOutput) RootPassword() pulumi.StringOutput {
	return o.ApplyT(func(v CloudSqlSettingsResponse) string { return v.RootPassword }).(pulumi.StringOutput)
}

// Indicates If this connection profile root password is stored.
func (o CloudSqlSettingsResponseOutput) RootPasswordSet() pulumi.BoolOutput {
	return o.ApplyT(func(v CloudSqlSettingsResponse) bool { return v.RootPasswordSet }).(pulumi.BoolOutput)
}

// Optional. The Google Cloud Platform zone where the failover Cloud SQL database instance is located. Used when the Cloud SQL database availability type is REGIONAL (i.e. multiple zones / highly available).
func (o CloudSqlSettingsResponseOutput) SecondaryZone() pulumi.StringOutput {
	return o.ApplyT(func(v CloudSqlSettingsResponse) string { return v.SecondaryZone }).(pulumi.StringOutput)
}

// The Database Migration Service source connection profile ID, in the format: `projects/my_project_name/locations/us-central1/connectionProfiles/connection_profile_ID`
func (o CloudSqlSettingsResponseOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v CloudSqlSettingsResponse) string { return v.SourceId }).(pulumi.StringOutput)
}

// The maximum size to which storage capacity can be automatically increased. The default value is 0, which specifies that there is no limit.
func (o CloudSqlSettingsResponseOutput) StorageAutoResizeLimit() pulumi.StringOutput {
	return o.ApplyT(func(v CloudSqlSettingsResponse) string { return v.StorageAutoResizeLimit }).(pulumi.StringOutput)
}

// The tier (or machine type) for this instance, for example: `db-n1-standard-1` (MySQL instances) or `db-custom-1-3840` (PostgreSQL instances). For more information, see [Cloud SQL Instance Settings](https://cloud.google.com/sql/docs/mysql/instance-settings).
func (o CloudSqlSettingsResponseOutput) Tier() pulumi.StringOutput {
	return o.ApplyT(func(v CloudSqlSettingsResponse) string { return v.Tier }).(pulumi.StringOutput)
}

// The resource labels for a Cloud SQL instance to use to annotate any related underlying resources such as Compute Engine VMs. An object containing a list of "key": "value" pairs. Example: `{ "name": "wrench", "mass": "18kg", "count": "3" }`.
func (o CloudSqlSettingsResponseOutput) UserLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v CloudSqlSettingsResponse) map[string]string { return v.UserLabels }).(pulumi.StringMapOutput)
}

// The Google Cloud Platform zone where your Cloud SQL database instance is located.
func (o CloudSqlSettingsResponseOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v CloudSqlSettingsResponse) string { return v.Zone }).(pulumi.StringOutput)
}

// Options to configure rule type ConditionalColumnSetValue. The rule is used to transform the data which is being replicated/migrated. The rule filter field can refer to one or more entities. The rule scope can be one of: Column.
type ConditionalColumnSetValue struct {
	// Optional. Custom engine specific features.
	CustomFeatures map[string]interface{} `pulumi:"customFeatures"`
	// Optional. Optional filter on source column precision and scale. Used for fixed point numbers such as NUMERIC/NUMBER data types.
	SourceNumericFilter *SourceNumericFilter `pulumi:"sourceNumericFilter"`
	// Optional. Optional filter on source column length. Used for text based data types like varchar.
	SourceTextFilter *SourceTextFilter `pulumi:"sourceTextFilter"`
	// Description of data transformation during migration.
	ValueTransformation ValueTransformation `pulumi:"valueTransformation"`
}

// ConditionalColumnSetValueInput is an input type that accepts ConditionalColumnSetValueArgs and ConditionalColumnSetValueOutput values.
// You can construct a concrete instance of `ConditionalColumnSetValueInput` via:
//
//	ConditionalColumnSetValueArgs{...}
type ConditionalColumnSetValueInput interface {
	pulumi.Input

	ToConditionalColumnSetValueOutput() ConditionalColumnSetValueOutput
	ToConditionalColumnSetValueOutputWithContext(context.Context) ConditionalColumnSetValueOutput
}

// Options to configure rule type ConditionalColumnSetValue. The rule is used to transform the data which is being replicated/migrated. The rule filter field can refer to one or more entities. The rule scope can be one of: Column.
type ConditionalColumnSetValueArgs struct {
	// Optional. Custom engine specific features.
	CustomFeatures pulumi.MapInput `pulumi:"customFeatures"`
	// Optional. Optional filter on source column precision and scale. Used for fixed point numbers such as NUMERIC/NUMBER data types.
	SourceNumericFilter SourceNumericFilterPtrInput `pulumi:"sourceNumericFilter"`
	// Optional. Optional filter on source column length. Used for text based data types like varchar.
	SourceTextFilter SourceTextFilterPtrInput `pulumi:"sourceTextFilter"`
	// Description of data transformation during migration.
	ValueTransformation ValueTransformationInput `pulumi:"valueTransformation"`
}

func (ConditionalColumnSetValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConditionalColumnSetValue)(nil)).Elem()
}

func (i ConditionalColumnSetValueArgs) ToConditionalColumnSetValueOutput() ConditionalColumnSetValueOutput {
	return i.ToConditionalColumnSetValueOutputWithContext(context.Background())
}

func (i ConditionalColumnSetValueArgs) ToConditionalColumnSetValueOutputWithContext(ctx context.Context) ConditionalColumnSetValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionalColumnSetValueOutput)
}

func (i ConditionalColumnSetValueArgs) ToConditionalColumnSetValuePtrOutput() ConditionalColumnSetValuePtrOutput {
	return i.ToConditionalColumnSetValuePtrOutputWithContext(context.Background())
}

func (i ConditionalColumnSetValueArgs) ToConditionalColumnSetValuePtrOutputWithContext(ctx context.Context) ConditionalColumnSetValuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionalColumnSetValueOutput).ToConditionalColumnSetValuePtrOutputWithContext(ctx)
}

// ConditionalColumnSetValuePtrInput is an input type that accepts ConditionalColumnSetValueArgs, ConditionalColumnSetValuePtr and ConditionalColumnSetValuePtrOutput values.
// You can construct a concrete instance of `ConditionalColumnSetValuePtrInput` via:
//
//	        ConditionalColumnSetValueArgs{...}
//
//	or:
//
//	        nil
type ConditionalColumnSetValuePtrInput interface {
	pulumi.Input

	ToConditionalColumnSetValuePtrOutput() ConditionalColumnSetValuePtrOutput
	ToConditionalColumnSetValuePtrOutputWithContext(context.Context) ConditionalColumnSetValuePtrOutput
}

type conditionalColumnSetValuePtrType ConditionalColumnSetValueArgs

func ConditionalColumnSetValuePtr(v *ConditionalColumnSetValueArgs) ConditionalColumnSetValuePtrInput {
	return (*conditionalColumnSetValuePtrType)(v)
}

func (*conditionalColumnSetValuePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConditionalColumnSetValue)(nil)).Elem()
}

func (i *conditionalColumnSetValuePtrType) ToConditionalColumnSetValuePtrOutput() ConditionalColumnSetValuePtrOutput {
	return i.ToConditionalColumnSetValuePtrOutputWithContext(context.Background())
}

func (i *conditionalColumnSetValuePtrType) ToConditionalColumnSetValuePtrOutputWithContext(ctx context.Context) ConditionalColumnSetValuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionalColumnSetValuePtrOutput)
}

// Options to configure rule type ConditionalColumnSetValue. The rule is used to transform the data which is being replicated/migrated. The rule filter field can refer to one or more entities. The rule scope can be one of: Column.
type ConditionalColumnSetValueOutput struct{ *pulumi.OutputState }

func (ConditionalColumnSetValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConditionalColumnSetValue)(nil)).Elem()
}

func (o ConditionalColumnSetValueOutput) ToConditionalColumnSetValueOutput() ConditionalColumnSetValueOutput {
	return o
}

func (o ConditionalColumnSetValueOutput) ToConditionalColumnSetValueOutputWithContext(ctx context.Context) ConditionalColumnSetValueOutput {
	return o
}

func (o ConditionalColumnSetValueOutput) ToConditionalColumnSetValuePtrOutput() ConditionalColumnSetValuePtrOutput {
	return o.ToConditionalColumnSetValuePtrOutputWithContext(context.Background())
}

func (o ConditionalColumnSetValueOutput) ToConditionalColumnSetValuePtrOutputWithContext(ctx context.Context) ConditionalColumnSetValuePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConditionalColumnSetValue) *ConditionalColumnSetValue {
		return &v
	}).(ConditionalColumnSetValuePtrOutput)
}

// Optional. Custom engine specific features.
func (o ConditionalColumnSetValueOutput) CustomFeatures() pulumi.MapOutput {
	return o.ApplyT(func(v ConditionalColumnSetValue) map[string]interface{} { return v.CustomFeatures }).(pulumi.MapOutput)
}

// Optional. Optional filter on source column precision and scale. Used for fixed point numbers such as NUMERIC/NUMBER data types.
func (o ConditionalColumnSetValueOutput) SourceNumericFilter() SourceNumericFilterPtrOutput {
	return o.ApplyT(func(v ConditionalColumnSetValue) *SourceNumericFilter { return v.SourceNumericFilter }).(SourceNumericFilterPtrOutput)
}

// Optional. Optional filter on source column length. Used for text based data types like varchar.
func (o ConditionalColumnSetValueOutput) SourceTextFilter() SourceTextFilterPtrOutput {
	return o.ApplyT(func(v ConditionalColumnSetValue) *SourceTextFilter { return v.SourceTextFilter }).(SourceTextFilterPtrOutput)
}

// Description of data transformation during migration.
func (o ConditionalColumnSetValueOutput) ValueTransformation() ValueTransformationOutput {
	return o.ApplyT(func(v ConditionalColumnSetValue) ValueTransformation { return v.ValueTransformation }).(ValueTransformationOutput)
}

type ConditionalColumnSetValuePtrOutput struct{ *pulumi.OutputState }

func (ConditionalColumnSetValuePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConditionalColumnSetValue)(nil)).Elem()
}

func (o ConditionalColumnSetValuePtrOutput) ToConditionalColumnSetValuePtrOutput() ConditionalColumnSetValuePtrOutput {
	return o
}

func (o ConditionalColumnSetValuePtrOutput) ToConditionalColumnSetValuePtrOutputWithContext(ctx context.Context) ConditionalColumnSetValuePtrOutput {
	return o
}

func (o ConditionalColumnSetValuePtrOutput) Elem() ConditionalColumnSetValueOutput {
	return o.ApplyT(func(v *ConditionalColumnSetValue) ConditionalColumnSetValue {
		if v != nil {
			return *v
		}
		var ret ConditionalColumnSetValue
		return ret
	}).(ConditionalColumnSetValueOutput)
}

// Optional. Custom engine specific features.
func (o ConditionalColumnSetValuePtrOutput) CustomFeatures() pulumi.MapOutput {
	return o.ApplyT(func(v *ConditionalColumnSetValue) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.CustomFeatures
	}).(pulumi.MapOutput)
}

// Optional. Optional filter on source column precision and scale. Used for fixed point numbers such as NUMERIC/NUMBER data types.
func (o ConditionalColumnSetValuePtrOutput) SourceNumericFilter() SourceNumericFilterPtrOutput {
	return o.ApplyT(func(v *ConditionalColumnSetValue) *SourceNumericFilter {
		if v == nil {
			return nil
		}
		return v.SourceNumericFilter
	}).(SourceNumericFilterPtrOutput)
}

// Optional. Optional filter on source column length. Used for text based data types like varchar.
func (o ConditionalColumnSetValuePtrOutput) SourceTextFilter() SourceTextFilterPtrOutput {
	return o.ApplyT(func(v *ConditionalColumnSetValue) *SourceTextFilter {
		if v == nil {
			return nil
		}
		return v.SourceTextFilter
	}).(SourceTextFilterPtrOutput)
}

// Description of data transformation during migration.
func (o ConditionalColumnSetValuePtrOutput) ValueTransformation() ValueTransformationPtrOutput {
	return o.ApplyT(func(v *ConditionalColumnSetValue) *ValueTransformation {
		if v == nil {
			return nil
		}
		return &v.ValueTransformation
	}).(ValueTransformationPtrOutput)
}

// Options to configure rule type ConditionalColumnSetValue. The rule is used to transform the data which is being replicated/migrated. The rule filter field can refer to one or more entities. The rule scope can be one of: Column.
type ConditionalColumnSetValueResponse struct {
	// Optional. Custom engine specific features.
	CustomFeatures map[string]interface{} `pulumi:"customFeatures"`
	// Optional. Optional filter on source column precision and scale. Used for fixed point numbers such as NUMERIC/NUMBER data types.
	SourceNumericFilter SourceNumericFilterResponse `pulumi:"sourceNumericFilter"`
	// Optional. Optional filter on source column length. Used for text based data types like varchar.
	SourceTextFilter SourceTextFilterResponse `pulumi:"sourceTextFilter"`
	// Description of data transformation during migration.
	ValueTransformation ValueTransformationResponse `pulumi:"valueTransformation"`
}

// Options to configure rule type ConditionalColumnSetValue. The rule is used to transform the data which is being replicated/migrated. The rule filter field can refer to one or more entities. The rule scope can be one of: Column.
type ConditionalColumnSetValueResponseOutput struct{ *pulumi.OutputState }

func (ConditionalColumnSetValueResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConditionalColumnSetValueResponse)(nil)).Elem()
}

func (o ConditionalColumnSetValueResponseOutput) ToConditionalColumnSetValueResponseOutput() ConditionalColumnSetValueResponseOutput {
	return o
}

func (o ConditionalColumnSetValueResponseOutput) ToConditionalColumnSetValueResponseOutputWithContext(ctx context.Context) ConditionalColumnSetValueResponseOutput {
	return o
}

// Optional. Custom engine specific features.
func (o ConditionalColumnSetValueResponseOutput) CustomFeatures() pulumi.MapOutput {
	return o.ApplyT(func(v ConditionalColumnSetValueResponse) map[string]interface{} { return v.CustomFeatures }).(pulumi.MapOutput)
}

// Optional. Optional filter on source column precision and scale. Used for fixed point numbers such as NUMERIC/NUMBER data types.
func (o ConditionalColumnSetValueResponseOutput) SourceNumericFilter() SourceNumericFilterResponseOutput {
	return o.ApplyT(func(v ConditionalColumnSetValueResponse) SourceNumericFilterResponse { return v.SourceNumericFilter }).(SourceNumericFilterResponseOutput)
}

// Optional. Optional filter on source column length. Used for text based data types like varchar.
func (o ConditionalColumnSetValueResponseOutput) SourceTextFilter() SourceTextFilterResponseOutput {
	return o.ApplyT(func(v ConditionalColumnSetValueResponse) SourceTextFilterResponse { return v.SourceTextFilter }).(SourceTextFilterResponseOutput)
}

// Description of data transformation during migration.
func (o ConditionalColumnSetValueResponseOutput) ValueTransformation() ValueTransformationResponseOutput {
	return o.ApplyT(func(v ConditionalColumnSetValueResponse) ValueTransformationResponse { return v.ValueTransformation }).(ValueTransformationResponseOutput)
}

// A conversion workspace's version.
type ConversionWorkspaceInfo struct {
	// The commit ID of the conversion workspace.
	CommitId *string `pulumi:"commitId"`
	// The resource name (URI) of the conversion workspace.
	Name *string `pulumi:"name"`
}

// ConversionWorkspaceInfoInput is an input type that accepts ConversionWorkspaceInfoArgs and ConversionWorkspaceInfoOutput values.
// You can construct a concrete instance of `ConversionWorkspaceInfoInput` via:
//
//	ConversionWorkspaceInfoArgs{...}
type ConversionWorkspaceInfoInput interface {
	pulumi.Input

	ToConversionWorkspaceInfoOutput() ConversionWorkspaceInfoOutput
	ToConversionWorkspaceInfoOutputWithContext(context.Context) ConversionWorkspaceInfoOutput
}

// A conversion workspace's version.
type ConversionWorkspaceInfoArgs struct {
	// The commit ID of the conversion workspace.
	CommitId pulumi.StringPtrInput `pulumi:"commitId"`
	// The resource name (URI) of the conversion workspace.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ConversionWorkspaceInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConversionWorkspaceInfo)(nil)).Elem()
}

func (i ConversionWorkspaceInfoArgs) ToConversionWorkspaceInfoOutput() ConversionWorkspaceInfoOutput {
	return i.ToConversionWorkspaceInfoOutputWithContext(context.Background())
}

func (i ConversionWorkspaceInfoArgs) ToConversionWorkspaceInfoOutputWithContext(ctx context.Context) ConversionWorkspaceInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConversionWorkspaceInfoOutput)
}

func (i ConversionWorkspaceInfoArgs) ToConversionWorkspaceInfoPtrOutput() ConversionWorkspaceInfoPtrOutput {
	return i.ToConversionWorkspaceInfoPtrOutputWithContext(context.Background())
}

func (i ConversionWorkspaceInfoArgs) ToConversionWorkspaceInfoPtrOutputWithContext(ctx context.Context) ConversionWorkspaceInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConversionWorkspaceInfoOutput).ToConversionWorkspaceInfoPtrOutputWithContext(ctx)
}

// ConversionWorkspaceInfoPtrInput is an input type that accepts ConversionWorkspaceInfoArgs, ConversionWorkspaceInfoPtr and ConversionWorkspaceInfoPtrOutput values.
// You can construct a concrete instance of `ConversionWorkspaceInfoPtrInput` via:
//
//	        ConversionWorkspaceInfoArgs{...}
//
//	or:
//
//	        nil
type ConversionWorkspaceInfoPtrInput interface {
	pulumi.Input

	ToConversionWorkspaceInfoPtrOutput() ConversionWorkspaceInfoPtrOutput
	ToConversionWorkspaceInfoPtrOutputWithContext(context.Context) ConversionWorkspaceInfoPtrOutput
}

type conversionWorkspaceInfoPtrType ConversionWorkspaceInfoArgs

func ConversionWorkspaceInfoPtr(v *ConversionWorkspaceInfoArgs) ConversionWorkspaceInfoPtrInput {
	return (*conversionWorkspaceInfoPtrType)(v)
}

func (*conversionWorkspaceInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConversionWorkspaceInfo)(nil)).Elem()
}

func (i *conversionWorkspaceInfoPtrType) ToConversionWorkspaceInfoPtrOutput() ConversionWorkspaceInfoPtrOutput {
	return i.ToConversionWorkspaceInfoPtrOutputWithContext(context.Background())
}

func (i *conversionWorkspaceInfoPtrType) ToConversionWorkspaceInfoPtrOutputWithContext(ctx context.Context) ConversionWorkspaceInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConversionWorkspaceInfoPtrOutput)
}

// A conversion workspace's version.
type ConversionWorkspaceInfoOutput struct{ *pulumi.OutputState }

func (ConversionWorkspaceInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConversionWorkspaceInfo)(nil)).Elem()
}

func (o ConversionWorkspaceInfoOutput) ToConversionWorkspaceInfoOutput() ConversionWorkspaceInfoOutput {
	return o
}

func (o ConversionWorkspaceInfoOutput) ToConversionWorkspaceInfoOutputWithContext(ctx context.Context) ConversionWorkspaceInfoOutput {
	return o
}

func (o ConversionWorkspaceInfoOutput) ToConversionWorkspaceInfoPtrOutput() ConversionWorkspaceInfoPtrOutput {
	return o.ToConversionWorkspaceInfoPtrOutputWithContext(context.Background())
}

func (o ConversionWorkspaceInfoOutput) ToConversionWorkspaceInfoPtrOutputWithContext(ctx context.Context) ConversionWorkspaceInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConversionWorkspaceInfo) *ConversionWorkspaceInfo {
		return &v
	}).(ConversionWorkspaceInfoPtrOutput)
}

// The commit ID of the conversion workspace.
func (o ConversionWorkspaceInfoOutput) CommitId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConversionWorkspaceInfo) *string { return v.CommitId }).(pulumi.StringPtrOutput)
}

// The resource name (URI) of the conversion workspace.
func (o ConversionWorkspaceInfoOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConversionWorkspaceInfo) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ConversionWorkspaceInfoPtrOutput struct{ *pulumi.OutputState }

func (ConversionWorkspaceInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConversionWorkspaceInfo)(nil)).Elem()
}

func (o ConversionWorkspaceInfoPtrOutput) ToConversionWorkspaceInfoPtrOutput() ConversionWorkspaceInfoPtrOutput {
	return o
}

func (o ConversionWorkspaceInfoPtrOutput) ToConversionWorkspaceInfoPtrOutputWithContext(ctx context.Context) ConversionWorkspaceInfoPtrOutput {
	return o
}

func (o ConversionWorkspaceInfoPtrOutput) Elem() ConversionWorkspaceInfoOutput {
	return o.ApplyT(func(v *ConversionWorkspaceInfo) ConversionWorkspaceInfo {
		if v != nil {
			return *v
		}
		var ret ConversionWorkspaceInfo
		return ret
	}).(ConversionWorkspaceInfoOutput)
}

// The commit ID of the conversion workspace.
func (o ConversionWorkspaceInfoPtrOutput) CommitId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConversionWorkspaceInfo) *string {
		if v == nil {
			return nil
		}
		return v.CommitId
	}).(pulumi.StringPtrOutput)
}

// The resource name (URI) of the conversion workspace.
func (o ConversionWorkspaceInfoPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConversionWorkspaceInfo) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// A conversion workspace's version.
type ConversionWorkspaceInfoResponse struct {
	// The commit ID of the conversion workspace.
	CommitId string `pulumi:"commitId"`
	// The resource name (URI) of the conversion workspace.
	Name string `pulumi:"name"`
}

// A conversion workspace's version.
type ConversionWorkspaceInfoResponseOutput struct{ *pulumi.OutputState }

func (ConversionWorkspaceInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConversionWorkspaceInfoResponse)(nil)).Elem()
}

func (o ConversionWorkspaceInfoResponseOutput) ToConversionWorkspaceInfoResponseOutput() ConversionWorkspaceInfoResponseOutput {
	return o
}

func (o ConversionWorkspaceInfoResponseOutput) ToConversionWorkspaceInfoResponseOutputWithContext(ctx context.Context) ConversionWorkspaceInfoResponseOutput {
	return o
}

// The commit ID of the conversion workspace.
func (o ConversionWorkspaceInfoResponseOutput) CommitId() pulumi.StringOutput {
	return o.ApplyT(func(v ConversionWorkspaceInfoResponse) string { return v.CommitId }).(pulumi.StringOutput)
}

// The resource name (URI) of the conversion workspace.
func (o ConversionWorkspaceInfoResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ConversionWorkspaceInfoResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Options to configure rule type ConvertROWIDToColumn. The rule is used to add column rowid to destination tables based on an Oracle rowid function/property. The rule filter field can refer to one or more entities. The rule scope can be one of: Table. This rule requires additional filter to be specified beyond the basic rule filter field, which is whether or not to work on tables which already have a primary key defined.
type ConvertRowIdToColumn struct {
	// Only work on tables without primary key defined
	OnlyIfNoPrimaryKey bool `pulumi:"onlyIfNoPrimaryKey"`
}

// ConvertRowIdToColumnInput is an input type that accepts ConvertRowIdToColumnArgs and ConvertRowIdToColumnOutput values.
// You can construct a concrete instance of `ConvertRowIdToColumnInput` via:
//
//	ConvertRowIdToColumnArgs{...}
type ConvertRowIdToColumnInput interface {
	pulumi.Input

	ToConvertRowIdToColumnOutput() ConvertRowIdToColumnOutput
	ToConvertRowIdToColumnOutputWithContext(context.Context) ConvertRowIdToColumnOutput
}

// Options to configure rule type ConvertROWIDToColumn. The rule is used to add column rowid to destination tables based on an Oracle rowid function/property. The rule filter field can refer to one or more entities. The rule scope can be one of: Table. This rule requires additional filter to be specified beyond the basic rule filter field, which is whether or not to work on tables which already have a primary key defined.
type ConvertRowIdToColumnArgs struct {
	// Only work on tables without primary key defined
	OnlyIfNoPrimaryKey pulumi.BoolInput `pulumi:"onlyIfNoPrimaryKey"`
}

func (ConvertRowIdToColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConvertRowIdToColumn)(nil)).Elem()
}

func (i ConvertRowIdToColumnArgs) ToConvertRowIdToColumnOutput() ConvertRowIdToColumnOutput {
	return i.ToConvertRowIdToColumnOutputWithContext(context.Background())
}

func (i ConvertRowIdToColumnArgs) ToConvertRowIdToColumnOutputWithContext(ctx context.Context) ConvertRowIdToColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConvertRowIdToColumnOutput)
}

func (i ConvertRowIdToColumnArgs) ToConvertRowIdToColumnPtrOutput() ConvertRowIdToColumnPtrOutput {
	return i.ToConvertRowIdToColumnPtrOutputWithContext(context.Background())
}

func (i ConvertRowIdToColumnArgs) ToConvertRowIdToColumnPtrOutputWithContext(ctx context.Context) ConvertRowIdToColumnPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConvertRowIdToColumnOutput).ToConvertRowIdToColumnPtrOutputWithContext(ctx)
}

// ConvertRowIdToColumnPtrInput is an input type that accepts ConvertRowIdToColumnArgs, ConvertRowIdToColumnPtr and ConvertRowIdToColumnPtrOutput values.
// You can construct a concrete instance of `ConvertRowIdToColumnPtrInput` via:
//
//	        ConvertRowIdToColumnArgs{...}
//
//	or:
//
//	        nil
type ConvertRowIdToColumnPtrInput interface {
	pulumi.Input

	ToConvertRowIdToColumnPtrOutput() ConvertRowIdToColumnPtrOutput
	ToConvertRowIdToColumnPtrOutputWithContext(context.Context) ConvertRowIdToColumnPtrOutput
}

type convertRowIdToColumnPtrType ConvertRowIdToColumnArgs

func ConvertRowIdToColumnPtr(v *ConvertRowIdToColumnArgs) ConvertRowIdToColumnPtrInput {
	return (*convertRowIdToColumnPtrType)(v)
}

func (*convertRowIdToColumnPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConvertRowIdToColumn)(nil)).Elem()
}

func (i *convertRowIdToColumnPtrType) ToConvertRowIdToColumnPtrOutput() ConvertRowIdToColumnPtrOutput {
	return i.ToConvertRowIdToColumnPtrOutputWithContext(context.Background())
}

func (i *convertRowIdToColumnPtrType) ToConvertRowIdToColumnPtrOutputWithContext(ctx context.Context) ConvertRowIdToColumnPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConvertRowIdToColumnPtrOutput)
}

// Options to configure rule type ConvertROWIDToColumn. The rule is used to add column rowid to destination tables based on an Oracle rowid function/property. The rule filter field can refer to one or more entities. The rule scope can be one of: Table. This rule requires additional filter to be specified beyond the basic rule filter field, which is whether or not to work on tables which already have a primary key defined.
type ConvertRowIdToColumnOutput struct{ *pulumi.OutputState }

func (ConvertRowIdToColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConvertRowIdToColumn)(nil)).Elem()
}

func (o ConvertRowIdToColumnOutput) ToConvertRowIdToColumnOutput() ConvertRowIdToColumnOutput {
	return o
}

func (o ConvertRowIdToColumnOutput) ToConvertRowIdToColumnOutputWithContext(ctx context.Context) ConvertRowIdToColumnOutput {
	return o
}

func (o ConvertRowIdToColumnOutput) ToConvertRowIdToColumnPtrOutput() ConvertRowIdToColumnPtrOutput {
	return o.ToConvertRowIdToColumnPtrOutputWithContext(context.Background())
}

func (o ConvertRowIdToColumnOutput) ToConvertRowIdToColumnPtrOutputWithContext(ctx context.Context) ConvertRowIdToColumnPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConvertRowIdToColumn) *ConvertRowIdToColumn {
		return &v
	}).(ConvertRowIdToColumnPtrOutput)
}

// Only work on tables without primary key defined
func (o ConvertRowIdToColumnOutput) OnlyIfNoPrimaryKey() pulumi.BoolOutput {
	return o.ApplyT(func(v ConvertRowIdToColumn) bool { return v.OnlyIfNoPrimaryKey }).(pulumi.BoolOutput)
}

type ConvertRowIdToColumnPtrOutput struct{ *pulumi.OutputState }

func (ConvertRowIdToColumnPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConvertRowIdToColumn)(nil)).Elem()
}

func (o ConvertRowIdToColumnPtrOutput) ToConvertRowIdToColumnPtrOutput() ConvertRowIdToColumnPtrOutput {
	return o
}

func (o ConvertRowIdToColumnPtrOutput) ToConvertRowIdToColumnPtrOutputWithContext(ctx context.Context) ConvertRowIdToColumnPtrOutput {
	return o
}

func (o ConvertRowIdToColumnPtrOutput) Elem() ConvertRowIdToColumnOutput {
	return o.ApplyT(func(v *ConvertRowIdToColumn) ConvertRowIdToColumn {
		if v != nil {
			return *v
		}
		var ret ConvertRowIdToColumn
		return ret
	}).(ConvertRowIdToColumnOutput)
}

// Only work on tables without primary key defined
func (o ConvertRowIdToColumnPtrOutput) OnlyIfNoPrimaryKey() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConvertRowIdToColumn) *bool {
		if v == nil {
			return nil
		}
		return &v.OnlyIfNoPrimaryKey
	}).(pulumi.BoolPtrOutput)
}

// Options to configure rule type ConvertROWIDToColumn. The rule is used to add column rowid to destination tables based on an Oracle rowid function/property. The rule filter field can refer to one or more entities. The rule scope can be one of: Table. This rule requires additional filter to be specified beyond the basic rule filter field, which is whether or not to work on tables which already have a primary key defined.
type ConvertRowIdToColumnResponse struct {
	// Only work on tables without primary key defined
	OnlyIfNoPrimaryKey bool `pulumi:"onlyIfNoPrimaryKey"`
}

// Options to configure rule type ConvertROWIDToColumn. The rule is used to add column rowid to destination tables based on an Oracle rowid function/property. The rule filter field can refer to one or more entities. The rule scope can be one of: Table. This rule requires additional filter to be specified beyond the basic rule filter field, which is whether or not to work on tables which already have a primary key defined.
type ConvertRowIdToColumnResponseOutput struct{ *pulumi.OutputState }

func (ConvertRowIdToColumnResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConvertRowIdToColumnResponse)(nil)).Elem()
}

func (o ConvertRowIdToColumnResponseOutput) ToConvertRowIdToColumnResponseOutput() ConvertRowIdToColumnResponseOutput {
	return o
}

func (o ConvertRowIdToColumnResponseOutput) ToConvertRowIdToColumnResponseOutputWithContext(ctx context.Context) ConvertRowIdToColumnResponseOutput {
	return o
}

// Only work on tables without primary key defined
func (o ConvertRowIdToColumnResponseOutput) OnlyIfNoPrimaryKey() pulumi.BoolOutput {
	return o.ApplyT(func(v ConvertRowIdToColumnResponse) bool { return v.OnlyIfNoPrimaryKey }).(pulumi.BoolOutput)
}

// Data cache is an optional feature available for Cloud SQL for MySQL Enterprise Plus edition only. For more information on data cache, see [Data cache overview](https://cloud.google.com/sql/help/mysql-data-cache) in Cloud SQL documentation.
type DataCacheConfig struct {
	// Optional. Whether data cache is enabled for the instance.
	DataCacheEnabled *bool `pulumi:"dataCacheEnabled"`
}

// DataCacheConfigInput is an input type that accepts DataCacheConfigArgs and DataCacheConfigOutput values.
// You can construct a concrete instance of `DataCacheConfigInput` via:
//
//	DataCacheConfigArgs{...}
type DataCacheConfigInput interface {
	pulumi.Input

	ToDataCacheConfigOutput() DataCacheConfigOutput
	ToDataCacheConfigOutputWithContext(context.Context) DataCacheConfigOutput
}

// Data cache is an optional feature available for Cloud SQL for MySQL Enterprise Plus edition only. For more information on data cache, see [Data cache overview](https://cloud.google.com/sql/help/mysql-data-cache) in Cloud SQL documentation.
type DataCacheConfigArgs struct {
	// Optional. Whether data cache is enabled for the instance.
	DataCacheEnabled pulumi.BoolPtrInput `pulumi:"dataCacheEnabled"`
}

func (DataCacheConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCacheConfig)(nil)).Elem()
}

func (i DataCacheConfigArgs) ToDataCacheConfigOutput() DataCacheConfigOutput {
	return i.ToDataCacheConfigOutputWithContext(context.Background())
}

func (i DataCacheConfigArgs) ToDataCacheConfigOutputWithContext(ctx context.Context) DataCacheConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCacheConfigOutput)
}

func (i DataCacheConfigArgs) ToDataCacheConfigPtrOutput() DataCacheConfigPtrOutput {
	return i.ToDataCacheConfigPtrOutputWithContext(context.Background())
}

func (i DataCacheConfigArgs) ToDataCacheConfigPtrOutputWithContext(ctx context.Context) DataCacheConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCacheConfigOutput).ToDataCacheConfigPtrOutputWithContext(ctx)
}

// DataCacheConfigPtrInput is an input type that accepts DataCacheConfigArgs, DataCacheConfigPtr and DataCacheConfigPtrOutput values.
// You can construct a concrete instance of `DataCacheConfigPtrInput` via:
//
//	        DataCacheConfigArgs{...}
//
//	or:
//
//	        nil
type DataCacheConfigPtrInput interface {
	pulumi.Input

	ToDataCacheConfigPtrOutput() DataCacheConfigPtrOutput
	ToDataCacheConfigPtrOutputWithContext(context.Context) DataCacheConfigPtrOutput
}

type dataCacheConfigPtrType DataCacheConfigArgs

func DataCacheConfigPtr(v *DataCacheConfigArgs) DataCacheConfigPtrInput {
	return (*dataCacheConfigPtrType)(v)
}

func (*dataCacheConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCacheConfig)(nil)).Elem()
}

func (i *dataCacheConfigPtrType) ToDataCacheConfigPtrOutput() DataCacheConfigPtrOutput {
	return i.ToDataCacheConfigPtrOutputWithContext(context.Background())
}

func (i *dataCacheConfigPtrType) ToDataCacheConfigPtrOutputWithContext(ctx context.Context) DataCacheConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCacheConfigPtrOutput)
}

// Data cache is an optional feature available for Cloud SQL for MySQL Enterprise Plus edition only. For more information on data cache, see [Data cache overview](https://cloud.google.com/sql/help/mysql-data-cache) in Cloud SQL documentation.
type DataCacheConfigOutput struct{ *pulumi.OutputState }

func (DataCacheConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCacheConfig)(nil)).Elem()
}

func (o DataCacheConfigOutput) ToDataCacheConfigOutput() DataCacheConfigOutput {
	return o
}

func (o DataCacheConfigOutput) ToDataCacheConfigOutputWithContext(ctx context.Context) DataCacheConfigOutput {
	return o
}

func (o DataCacheConfigOutput) ToDataCacheConfigPtrOutput() DataCacheConfigPtrOutput {
	return o.ToDataCacheConfigPtrOutputWithContext(context.Background())
}

func (o DataCacheConfigOutput) ToDataCacheConfigPtrOutputWithContext(ctx context.Context) DataCacheConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataCacheConfig) *DataCacheConfig {
		return &v
	}).(DataCacheConfigPtrOutput)
}

// Optional. Whether data cache is enabled for the instance.
func (o DataCacheConfigOutput) DataCacheEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DataCacheConfig) *bool { return v.DataCacheEnabled }).(pulumi.BoolPtrOutput)
}

type DataCacheConfigPtrOutput struct{ *pulumi.OutputState }

func (DataCacheConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCacheConfig)(nil)).Elem()
}

func (o DataCacheConfigPtrOutput) ToDataCacheConfigPtrOutput() DataCacheConfigPtrOutput {
	return o
}

func (o DataCacheConfigPtrOutput) ToDataCacheConfigPtrOutputWithContext(ctx context.Context) DataCacheConfigPtrOutput {
	return o
}

func (o DataCacheConfigPtrOutput) Elem() DataCacheConfigOutput {
	return o.ApplyT(func(v *DataCacheConfig) DataCacheConfig {
		if v != nil {
			return *v
		}
		var ret DataCacheConfig
		return ret
	}).(DataCacheConfigOutput)
}

// Optional. Whether data cache is enabled for the instance.
func (o DataCacheConfigPtrOutput) DataCacheEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DataCacheConfig) *bool {
		if v == nil {
			return nil
		}
		return v.DataCacheEnabled
	}).(pulumi.BoolPtrOutput)
}

// Data cache is an optional feature available for Cloud SQL for MySQL Enterprise Plus edition only. For more information on data cache, see [Data cache overview](https://cloud.google.com/sql/help/mysql-data-cache) in Cloud SQL documentation.
type DataCacheConfigResponse struct {
	// Optional. Whether data cache is enabled for the instance.
	DataCacheEnabled bool `pulumi:"dataCacheEnabled"`
}

// Data cache is an optional feature available for Cloud SQL for MySQL Enterprise Plus edition only. For more information on data cache, see [Data cache overview](https://cloud.google.com/sql/help/mysql-data-cache) in Cloud SQL documentation.
type DataCacheConfigResponseOutput struct{ *pulumi.OutputState }

func (DataCacheConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCacheConfigResponse)(nil)).Elem()
}

func (o DataCacheConfigResponseOutput) ToDataCacheConfigResponseOutput() DataCacheConfigResponseOutput {
	return o
}

func (o DataCacheConfigResponseOutput) ToDataCacheConfigResponseOutputWithContext(ctx context.Context) DataCacheConfigResponseOutput {
	return o
}

// Optional. Whether data cache is enabled for the instance.
func (o DataCacheConfigResponseOutput) DataCacheEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v DataCacheConfigResponse) bool { return v.DataCacheEnabled }).(pulumi.BoolOutput)
}

// The type and version of a source or destination database.
type DatabaseEngineInfo struct {
	// Engine type.
	Engine DatabaseEngineInfoEngine `pulumi:"engine"`
	// Engine version, for example "12.c.1".
	Version string `pulumi:"version"`
}

// DatabaseEngineInfoInput is an input type that accepts DatabaseEngineInfoArgs and DatabaseEngineInfoOutput values.
// You can construct a concrete instance of `DatabaseEngineInfoInput` via:
//
//	DatabaseEngineInfoArgs{...}
type DatabaseEngineInfoInput interface {
	pulumi.Input

	ToDatabaseEngineInfoOutput() DatabaseEngineInfoOutput
	ToDatabaseEngineInfoOutputWithContext(context.Context) DatabaseEngineInfoOutput
}

// The type and version of a source or destination database.
type DatabaseEngineInfoArgs struct {
	// Engine type.
	Engine DatabaseEngineInfoEngineInput `pulumi:"engine"`
	// Engine version, for example "12.c.1".
	Version pulumi.StringInput `pulumi:"version"`
}

func (DatabaseEngineInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseEngineInfo)(nil)).Elem()
}

func (i DatabaseEngineInfoArgs) ToDatabaseEngineInfoOutput() DatabaseEngineInfoOutput {
	return i.ToDatabaseEngineInfoOutputWithContext(context.Background())
}

func (i DatabaseEngineInfoArgs) ToDatabaseEngineInfoOutputWithContext(ctx context.Context) DatabaseEngineInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseEngineInfoOutput)
}

// The type and version of a source or destination database.
type DatabaseEngineInfoOutput struct{ *pulumi.OutputState }

func (DatabaseEngineInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseEngineInfo)(nil)).Elem()
}

func (o DatabaseEngineInfoOutput) ToDatabaseEngineInfoOutput() DatabaseEngineInfoOutput {
	return o
}

func (o DatabaseEngineInfoOutput) ToDatabaseEngineInfoOutputWithContext(ctx context.Context) DatabaseEngineInfoOutput {
	return o
}

// Engine type.
func (o DatabaseEngineInfoOutput) Engine() DatabaseEngineInfoEngineOutput {
	return o.ApplyT(func(v DatabaseEngineInfo) DatabaseEngineInfoEngine { return v.Engine }).(DatabaseEngineInfoEngineOutput)
}

// Engine version, for example "12.c.1".
func (o DatabaseEngineInfoOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseEngineInfo) string { return v.Version }).(pulumi.StringOutput)
}

// The type and version of a source or destination database.
type DatabaseEngineInfoResponse struct {
	// Engine type.
	Engine string `pulumi:"engine"`
	// Engine version, for example "12.c.1".
	Version string `pulumi:"version"`
}

// The type and version of a source or destination database.
type DatabaseEngineInfoResponseOutput struct{ *pulumi.OutputState }

func (DatabaseEngineInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseEngineInfoResponse)(nil)).Elem()
}

func (o DatabaseEngineInfoResponseOutput) ToDatabaseEngineInfoResponseOutput() DatabaseEngineInfoResponseOutput {
	return o
}

func (o DatabaseEngineInfoResponseOutput) ToDatabaseEngineInfoResponseOutputWithContext(ctx context.Context) DatabaseEngineInfoResponseOutput {
	return o
}

// Engine type.
func (o DatabaseEngineInfoResponseOutput) Engine() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseEngineInfoResponse) string { return v.Engine }).(pulumi.StringOutput)
}

// Engine version, for example "12.c.1".
func (o DatabaseEngineInfoResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseEngineInfoResponse) string { return v.Version }).(pulumi.StringOutput)
}

// A message defining the database engine and provider.
type DatabaseType struct {
	// The database engine.
	Engine *DatabaseTypeEngine `pulumi:"engine"`
	// The database provider.
	Provider *DatabaseTypeProvider `pulumi:"provider"`
}

// DatabaseTypeInput is an input type that accepts DatabaseTypeArgs and DatabaseTypeOutput values.
// You can construct a concrete instance of `DatabaseTypeInput` via:
//
//	DatabaseTypeArgs{...}
type DatabaseTypeInput interface {
	pulumi.Input

	ToDatabaseTypeOutput() DatabaseTypeOutput
	ToDatabaseTypeOutputWithContext(context.Context) DatabaseTypeOutput
}

// A message defining the database engine and provider.
type DatabaseTypeArgs struct {
	// The database engine.
	Engine DatabaseTypeEnginePtrInput `pulumi:"engine"`
	// The database provider.
	Provider DatabaseTypeProviderPtrInput `pulumi:"provider"`
}

func (DatabaseTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseType)(nil)).Elem()
}

func (i DatabaseTypeArgs) ToDatabaseTypeOutput() DatabaseTypeOutput {
	return i.ToDatabaseTypeOutputWithContext(context.Background())
}

func (i DatabaseTypeArgs) ToDatabaseTypeOutputWithContext(ctx context.Context) DatabaseTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseTypeOutput)
}

func (i DatabaseTypeArgs) ToDatabaseTypePtrOutput() DatabaseTypePtrOutput {
	return i.ToDatabaseTypePtrOutputWithContext(context.Background())
}

func (i DatabaseTypeArgs) ToDatabaseTypePtrOutputWithContext(ctx context.Context) DatabaseTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseTypeOutput).ToDatabaseTypePtrOutputWithContext(ctx)
}

// DatabaseTypePtrInput is an input type that accepts DatabaseTypeArgs, DatabaseTypePtr and DatabaseTypePtrOutput values.
// You can construct a concrete instance of `DatabaseTypePtrInput` via:
//
//	        DatabaseTypeArgs{...}
//
//	or:
//
//	        nil
type DatabaseTypePtrInput interface {
	pulumi.Input

	ToDatabaseTypePtrOutput() DatabaseTypePtrOutput
	ToDatabaseTypePtrOutputWithContext(context.Context) DatabaseTypePtrOutput
}

type databaseTypePtrType DatabaseTypeArgs

func DatabaseTypePtr(v *DatabaseTypeArgs) DatabaseTypePtrInput {
	return (*databaseTypePtrType)(v)
}

func (*databaseTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseType)(nil)).Elem()
}

func (i *databaseTypePtrType) ToDatabaseTypePtrOutput() DatabaseTypePtrOutput {
	return i.ToDatabaseTypePtrOutputWithContext(context.Background())
}

func (i *databaseTypePtrType) ToDatabaseTypePtrOutputWithContext(ctx context.Context) DatabaseTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseTypePtrOutput)
}

// A message defining the database engine and provider.
type DatabaseTypeOutput struct{ *pulumi.OutputState }

func (DatabaseTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseType)(nil)).Elem()
}

func (o DatabaseTypeOutput) ToDatabaseTypeOutput() DatabaseTypeOutput {
	return o
}

func (o DatabaseTypeOutput) ToDatabaseTypeOutputWithContext(ctx context.Context) DatabaseTypeOutput {
	return o
}

func (o DatabaseTypeOutput) ToDatabaseTypePtrOutput() DatabaseTypePtrOutput {
	return o.ToDatabaseTypePtrOutputWithContext(context.Background())
}

func (o DatabaseTypeOutput) ToDatabaseTypePtrOutputWithContext(ctx context.Context) DatabaseTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseType) *DatabaseType {
		return &v
	}).(DatabaseTypePtrOutput)
}

// The database engine.
func (o DatabaseTypeOutput) Engine() DatabaseTypeEnginePtrOutput {
	return o.ApplyT(func(v DatabaseType) *DatabaseTypeEngine { return v.Engine }).(DatabaseTypeEnginePtrOutput)
}

// The database provider.
func (o DatabaseTypeOutput) Provider() DatabaseTypeProviderPtrOutput {
	return o.ApplyT(func(v DatabaseType) *DatabaseTypeProvider { return v.Provider }).(DatabaseTypeProviderPtrOutput)
}

type DatabaseTypePtrOutput struct{ *pulumi.OutputState }

func (DatabaseTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseType)(nil)).Elem()
}

func (o DatabaseTypePtrOutput) ToDatabaseTypePtrOutput() DatabaseTypePtrOutput {
	return o
}

func (o DatabaseTypePtrOutput) ToDatabaseTypePtrOutputWithContext(ctx context.Context) DatabaseTypePtrOutput {
	return o
}

func (o DatabaseTypePtrOutput) Elem() DatabaseTypeOutput {
	return o.ApplyT(func(v *DatabaseType) DatabaseType {
		if v != nil {
			return *v
		}
		var ret DatabaseType
		return ret
	}).(DatabaseTypeOutput)
}

// The database engine.
func (o DatabaseTypePtrOutput) Engine() DatabaseTypeEnginePtrOutput {
	return o.ApplyT(func(v *DatabaseType) *DatabaseTypeEngine {
		if v == nil {
			return nil
		}
		return v.Engine
	}).(DatabaseTypeEnginePtrOutput)
}

// The database provider.
func (o DatabaseTypePtrOutput) Provider() DatabaseTypeProviderPtrOutput {
	return o.ApplyT(func(v *DatabaseType) *DatabaseTypeProvider {
		if v == nil {
			return nil
		}
		return v.Provider
	}).(DatabaseTypeProviderPtrOutput)
}

// A message defining the database engine and provider.
type DatabaseTypeResponse struct {
	// The database engine.
	Engine string `pulumi:"engine"`
	// The database provider.
	Provider string `pulumi:"provider"`
}

// A message defining the database engine and provider.
type DatabaseTypeResponseOutput struct{ *pulumi.OutputState }

func (DatabaseTypeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseTypeResponse)(nil)).Elem()
}

func (o DatabaseTypeResponseOutput) ToDatabaseTypeResponseOutput() DatabaseTypeResponseOutput {
	return o
}

func (o DatabaseTypeResponseOutput) ToDatabaseTypeResponseOutputWithContext(ctx context.Context) DatabaseTypeResponseOutput {
	return o
}

// The database engine.
func (o DatabaseTypeResponseOutput) Engine() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseTypeResponse) string { return v.Engine }).(pulumi.StringOutput)
}

// The database provider.
func (o DatabaseTypeResponseOutput) Provider() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseTypeResponse) string { return v.Provider }).(pulumi.StringOutput)
}

// Filter based on relation between source value and compare value of type double in ConditionalColumnSetValue
type DoubleComparisonFilter struct {
	// Double compare value to be used
	Value float64 `pulumi:"value"`
	// Relation between source value and compare value
	ValueComparison DoubleComparisonFilterValueComparison `pulumi:"valueComparison"`
}

// DoubleComparisonFilterInput is an input type that accepts DoubleComparisonFilterArgs and DoubleComparisonFilterOutput values.
// You can construct a concrete instance of `DoubleComparisonFilterInput` via:
//
//	DoubleComparisonFilterArgs{...}
type DoubleComparisonFilterInput interface {
	pulumi.Input

	ToDoubleComparisonFilterOutput() DoubleComparisonFilterOutput
	ToDoubleComparisonFilterOutputWithContext(context.Context) DoubleComparisonFilterOutput
}

// Filter based on relation between source value and compare value of type double in ConditionalColumnSetValue
type DoubleComparisonFilterArgs struct {
	// Double compare value to be used
	Value pulumi.Float64Input `pulumi:"value"`
	// Relation between source value and compare value
	ValueComparison DoubleComparisonFilterValueComparisonInput `pulumi:"valueComparison"`
}

func (DoubleComparisonFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DoubleComparisonFilter)(nil)).Elem()
}

func (i DoubleComparisonFilterArgs) ToDoubleComparisonFilterOutput() DoubleComparisonFilterOutput {
	return i.ToDoubleComparisonFilterOutputWithContext(context.Background())
}

func (i DoubleComparisonFilterArgs) ToDoubleComparisonFilterOutputWithContext(ctx context.Context) DoubleComparisonFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DoubleComparisonFilterOutput)
}

func (i DoubleComparisonFilterArgs) ToDoubleComparisonFilterPtrOutput() DoubleComparisonFilterPtrOutput {
	return i.ToDoubleComparisonFilterPtrOutputWithContext(context.Background())
}

func (i DoubleComparisonFilterArgs) ToDoubleComparisonFilterPtrOutputWithContext(ctx context.Context) DoubleComparisonFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DoubleComparisonFilterOutput).ToDoubleComparisonFilterPtrOutputWithContext(ctx)
}

// DoubleComparisonFilterPtrInput is an input type that accepts DoubleComparisonFilterArgs, DoubleComparisonFilterPtr and DoubleComparisonFilterPtrOutput values.
// You can construct a concrete instance of `DoubleComparisonFilterPtrInput` via:
//
//	        DoubleComparisonFilterArgs{...}
//
//	or:
//
//	        nil
type DoubleComparisonFilterPtrInput interface {
	pulumi.Input

	ToDoubleComparisonFilterPtrOutput() DoubleComparisonFilterPtrOutput
	ToDoubleComparisonFilterPtrOutputWithContext(context.Context) DoubleComparisonFilterPtrOutput
}

type doubleComparisonFilterPtrType DoubleComparisonFilterArgs

func DoubleComparisonFilterPtr(v *DoubleComparisonFilterArgs) DoubleComparisonFilterPtrInput {
	return (*doubleComparisonFilterPtrType)(v)
}

func (*doubleComparisonFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DoubleComparisonFilter)(nil)).Elem()
}

func (i *doubleComparisonFilterPtrType) ToDoubleComparisonFilterPtrOutput() DoubleComparisonFilterPtrOutput {
	return i.ToDoubleComparisonFilterPtrOutputWithContext(context.Background())
}

func (i *doubleComparisonFilterPtrType) ToDoubleComparisonFilterPtrOutputWithContext(ctx context.Context) DoubleComparisonFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DoubleComparisonFilterPtrOutput)
}

// Filter based on relation between source value and compare value of type double in ConditionalColumnSetValue
type DoubleComparisonFilterOutput struct{ *pulumi.OutputState }

func (DoubleComparisonFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DoubleComparisonFilter)(nil)).Elem()
}

func (o DoubleComparisonFilterOutput) ToDoubleComparisonFilterOutput() DoubleComparisonFilterOutput {
	return o
}

func (o DoubleComparisonFilterOutput) ToDoubleComparisonFilterOutputWithContext(ctx context.Context) DoubleComparisonFilterOutput {
	return o
}

func (o DoubleComparisonFilterOutput) ToDoubleComparisonFilterPtrOutput() DoubleComparisonFilterPtrOutput {
	return o.ToDoubleComparisonFilterPtrOutputWithContext(context.Background())
}

func (o DoubleComparisonFilterOutput) ToDoubleComparisonFilterPtrOutputWithContext(ctx context.Context) DoubleComparisonFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DoubleComparisonFilter) *DoubleComparisonFilter {
		return &v
	}).(DoubleComparisonFilterPtrOutput)
}

// Double compare value to be used
func (o DoubleComparisonFilterOutput) Value() pulumi.Float64Output {
	return o.ApplyT(func(v DoubleComparisonFilter) float64 { return v.Value }).(pulumi.Float64Output)
}

// Relation between source value and compare value
func (o DoubleComparisonFilterOutput) ValueComparison() DoubleComparisonFilterValueComparisonOutput {
	return o.ApplyT(func(v DoubleComparisonFilter) DoubleComparisonFilterValueComparison { return v.ValueComparison }).(DoubleComparisonFilterValueComparisonOutput)
}

type DoubleComparisonFilterPtrOutput struct{ *pulumi.OutputState }

func (DoubleComparisonFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DoubleComparisonFilter)(nil)).Elem()
}

func (o DoubleComparisonFilterPtrOutput) ToDoubleComparisonFilterPtrOutput() DoubleComparisonFilterPtrOutput {
	return o
}

func (o DoubleComparisonFilterPtrOutput) ToDoubleComparisonFilterPtrOutputWithContext(ctx context.Context) DoubleComparisonFilterPtrOutput {
	return o
}

func (o DoubleComparisonFilterPtrOutput) Elem() DoubleComparisonFilterOutput {
	return o.ApplyT(func(v *DoubleComparisonFilter) DoubleComparisonFilter {
		if v != nil {
			return *v
		}
		var ret DoubleComparisonFilter
		return ret
	}).(DoubleComparisonFilterOutput)
}

// Double compare value to be used
func (o DoubleComparisonFilterPtrOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DoubleComparisonFilter) *float64 {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.Float64PtrOutput)
}

// Relation between source value and compare value
func (o DoubleComparisonFilterPtrOutput) ValueComparison() DoubleComparisonFilterValueComparisonPtrOutput {
	return o.ApplyT(func(v *DoubleComparisonFilter) *DoubleComparisonFilterValueComparison {
		if v == nil {
			return nil
		}
		return &v.ValueComparison
	}).(DoubleComparisonFilterValueComparisonPtrOutput)
}

// Filter based on relation between source value and compare value of type double in ConditionalColumnSetValue
type DoubleComparisonFilterResponse struct {
	// Double compare value to be used
	Value float64 `pulumi:"value"`
	// Relation between source value and compare value
	ValueComparison string `pulumi:"valueComparison"`
}

// Filter based on relation between source value and compare value of type double in ConditionalColumnSetValue
type DoubleComparisonFilterResponseOutput struct{ *pulumi.OutputState }

func (DoubleComparisonFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DoubleComparisonFilterResponse)(nil)).Elem()
}

func (o DoubleComparisonFilterResponseOutput) ToDoubleComparisonFilterResponseOutput() DoubleComparisonFilterResponseOutput {
	return o
}

func (o DoubleComparisonFilterResponseOutput) ToDoubleComparisonFilterResponseOutputWithContext(ctx context.Context) DoubleComparisonFilterResponseOutput {
	return o
}

// Double compare value to be used
func (o DoubleComparisonFilterResponseOutput) Value() pulumi.Float64Output {
	return o.ApplyT(func(v DoubleComparisonFilterResponse) float64 { return v.Value }).(pulumi.Float64Output)
}

// Relation between source value and compare value
func (o DoubleComparisonFilterResponseOutput) ValueComparison() pulumi.StringOutput {
	return o.ApplyT(func(v DoubleComparisonFilterResponse) string { return v.ValueComparison }).(pulumi.StringOutput)
}

// Dump flag definition.
type DumpFlag struct {
	// The name of the flag
	Name *string `pulumi:"name"`
	// The value of the flag.
	Value *string `pulumi:"value"`
}

// DumpFlagInput is an input type that accepts DumpFlagArgs and DumpFlagOutput values.
// You can construct a concrete instance of `DumpFlagInput` via:
//
//	DumpFlagArgs{...}
type DumpFlagInput interface {
	pulumi.Input

	ToDumpFlagOutput() DumpFlagOutput
	ToDumpFlagOutputWithContext(context.Context) DumpFlagOutput
}

// Dump flag definition.
type DumpFlagArgs struct {
	// The name of the flag
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The value of the flag.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (DumpFlagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DumpFlag)(nil)).Elem()
}

func (i DumpFlagArgs) ToDumpFlagOutput() DumpFlagOutput {
	return i.ToDumpFlagOutputWithContext(context.Background())
}

func (i DumpFlagArgs) ToDumpFlagOutputWithContext(ctx context.Context) DumpFlagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DumpFlagOutput)
}

// DumpFlagArrayInput is an input type that accepts DumpFlagArray and DumpFlagArrayOutput values.
// You can construct a concrete instance of `DumpFlagArrayInput` via:
//
//	DumpFlagArray{ DumpFlagArgs{...} }
type DumpFlagArrayInput interface {
	pulumi.Input

	ToDumpFlagArrayOutput() DumpFlagArrayOutput
	ToDumpFlagArrayOutputWithContext(context.Context) DumpFlagArrayOutput
}

type DumpFlagArray []DumpFlagInput

func (DumpFlagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DumpFlag)(nil)).Elem()
}

func (i DumpFlagArray) ToDumpFlagArrayOutput() DumpFlagArrayOutput {
	return i.ToDumpFlagArrayOutputWithContext(context.Background())
}

func (i DumpFlagArray) ToDumpFlagArrayOutputWithContext(ctx context.Context) DumpFlagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DumpFlagArrayOutput)
}

// Dump flag definition.
type DumpFlagOutput struct{ *pulumi.OutputState }

func (DumpFlagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DumpFlag)(nil)).Elem()
}

func (o DumpFlagOutput) ToDumpFlagOutput() DumpFlagOutput {
	return o
}

func (o DumpFlagOutput) ToDumpFlagOutputWithContext(ctx context.Context) DumpFlagOutput {
	return o
}

// The name of the flag
func (o DumpFlagOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DumpFlag) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The value of the flag.
func (o DumpFlagOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DumpFlag) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type DumpFlagArrayOutput struct{ *pulumi.OutputState }

func (DumpFlagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DumpFlag)(nil)).Elem()
}

func (o DumpFlagArrayOutput) ToDumpFlagArrayOutput() DumpFlagArrayOutput {
	return o
}

func (o DumpFlagArrayOutput) ToDumpFlagArrayOutputWithContext(ctx context.Context) DumpFlagArrayOutput {
	return o
}

func (o DumpFlagArrayOutput) Index(i pulumi.IntInput) DumpFlagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DumpFlag {
		return vs[0].([]DumpFlag)[vs[1].(int)]
	}).(DumpFlagOutput)
}

// Dump flag definition.
type DumpFlagResponse struct {
	// The name of the flag
	Name string `pulumi:"name"`
	// The value of the flag.
	Value string `pulumi:"value"`
}

// Dump flag definition.
type DumpFlagResponseOutput struct{ *pulumi.OutputState }

func (DumpFlagResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DumpFlagResponse)(nil)).Elem()
}

func (o DumpFlagResponseOutput) ToDumpFlagResponseOutput() DumpFlagResponseOutput {
	return o
}

func (o DumpFlagResponseOutput) ToDumpFlagResponseOutputWithContext(ctx context.Context) DumpFlagResponseOutput {
	return o
}

// The name of the flag
func (o DumpFlagResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DumpFlagResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The value of the flag.
func (o DumpFlagResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v DumpFlagResponse) string { return v.Value }).(pulumi.StringOutput)
}

type DumpFlagResponseArrayOutput struct{ *pulumi.OutputState }

func (DumpFlagResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DumpFlagResponse)(nil)).Elem()
}

func (o DumpFlagResponseArrayOutput) ToDumpFlagResponseArrayOutput() DumpFlagResponseArrayOutput {
	return o
}

func (o DumpFlagResponseArrayOutput) ToDumpFlagResponseArrayOutputWithContext(ctx context.Context) DumpFlagResponseArrayOutput {
	return o
}

func (o DumpFlagResponseArrayOutput) Index(i pulumi.IntInput) DumpFlagResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DumpFlagResponse {
		return vs[0].([]DumpFlagResponse)[vs[1].(int)]
	}).(DumpFlagResponseOutput)
}

// Dump flags definition.
type DumpFlags struct {
	// The flags for the initial dump.
	DumpFlags []DumpFlag `pulumi:"dumpFlags"`
}

// DumpFlagsInput is an input type that accepts DumpFlagsArgs and DumpFlagsOutput values.
// You can construct a concrete instance of `DumpFlagsInput` via:
//
//	DumpFlagsArgs{...}
type DumpFlagsInput interface {
	pulumi.Input

	ToDumpFlagsOutput() DumpFlagsOutput
	ToDumpFlagsOutputWithContext(context.Context) DumpFlagsOutput
}

// Dump flags definition.
type DumpFlagsArgs struct {
	// The flags for the initial dump.
	DumpFlags DumpFlagArrayInput `pulumi:"dumpFlags"`
}

func (DumpFlagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DumpFlags)(nil)).Elem()
}

func (i DumpFlagsArgs) ToDumpFlagsOutput() DumpFlagsOutput {
	return i.ToDumpFlagsOutputWithContext(context.Background())
}

func (i DumpFlagsArgs) ToDumpFlagsOutputWithContext(ctx context.Context) DumpFlagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DumpFlagsOutput)
}

func (i DumpFlagsArgs) ToDumpFlagsPtrOutput() DumpFlagsPtrOutput {
	return i.ToDumpFlagsPtrOutputWithContext(context.Background())
}

func (i DumpFlagsArgs) ToDumpFlagsPtrOutputWithContext(ctx context.Context) DumpFlagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DumpFlagsOutput).ToDumpFlagsPtrOutputWithContext(ctx)
}

// DumpFlagsPtrInput is an input type that accepts DumpFlagsArgs, DumpFlagsPtr and DumpFlagsPtrOutput values.
// You can construct a concrete instance of `DumpFlagsPtrInput` via:
//
//	        DumpFlagsArgs{...}
//
//	or:
//
//	        nil
type DumpFlagsPtrInput interface {
	pulumi.Input

	ToDumpFlagsPtrOutput() DumpFlagsPtrOutput
	ToDumpFlagsPtrOutputWithContext(context.Context) DumpFlagsPtrOutput
}

type dumpFlagsPtrType DumpFlagsArgs

func DumpFlagsPtr(v *DumpFlagsArgs) DumpFlagsPtrInput {
	return (*dumpFlagsPtrType)(v)
}

func (*dumpFlagsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DumpFlags)(nil)).Elem()
}

func (i *dumpFlagsPtrType) ToDumpFlagsPtrOutput() DumpFlagsPtrOutput {
	return i.ToDumpFlagsPtrOutputWithContext(context.Background())
}

func (i *dumpFlagsPtrType) ToDumpFlagsPtrOutputWithContext(ctx context.Context) DumpFlagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DumpFlagsPtrOutput)
}

// Dump flags definition.
type DumpFlagsOutput struct{ *pulumi.OutputState }

func (DumpFlagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DumpFlags)(nil)).Elem()
}

func (o DumpFlagsOutput) ToDumpFlagsOutput() DumpFlagsOutput {
	return o
}

func (o DumpFlagsOutput) ToDumpFlagsOutputWithContext(ctx context.Context) DumpFlagsOutput {
	return o
}

func (o DumpFlagsOutput) ToDumpFlagsPtrOutput() DumpFlagsPtrOutput {
	return o.ToDumpFlagsPtrOutputWithContext(context.Background())
}

func (o DumpFlagsOutput) ToDumpFlagsPtrOutputWithContext(ctx context.Context) DumpFlagsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DumpFlags) *DumpFlags {
		return &v
	}).(DumpFlagsPtrOutput)
}

// The flags for the initial dump.
func (o DumpFlagsOutput) DumpFlags() DumpFlagArrayOutput {
	return o.ApplyT(func(v DumpFlags) []DumpFlag { return v.DumpFlags }).(DumpFlagArrayOutput)
}

type DumpFlagsPtrOutput struct{ *pulumi.OutputState }

func (DumpFlagsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DumpFlags)(nil)).Elem()
}

func (o DumpFlagsPtrOutput) ToDumpFlagsPtrOutput() DumpFlagsPtrOutput {
	return o
}

func (o DumpFlagsPtrOutput) ToDumpFlagsPtrOutputWithContext(ctx context.Context) DumpFlagsPtrOutput {
	return o
}

func (o DumpFlagsPtrOutput) Elem() DumpFlagsOutput {
	return o.ApplyT(func(v *DumpFlags) DumpFlags {
		if v != nil {
			return *v
		}
		var ret DumpFlags
		return ret
	}).(DumpFlagsOutput)
}

// The flags for the initial dump.
func (o DumpFlagsPtrOutput) DumpFlags() DumpFlagArrayOutput {
	return o.ApplyT(func(v *DumpFlags) []DumpFlag {
		if v == nil {
			return nil
		}
		return v.DumpFlags
	}).(DumpFlagArrayOutput)
}

// Dump flags definition.
type DumpFlagsResponse struct {
	// The flags for the initial dump.
	DumpFlags []DumpFlagResponse `pulumi:"dumpFlags"`
}

// Dump flags definition.
type DumpFlagsResponseOutput struct{ *pulumi.OutputState }

func (DumpFlagsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DumpFlagsResponse)(nil)).Elem()
}

func (o DumpFlagsResponseOutput) ToDumpFlagsResponseOutput() DumpFlagsResponseOutput {
	return o
}

func (o DumpFlagsResponseOutput) ToDumpFlagsResponseOutputWithContext(ctx context.Context) DumpFlagsResponseOutput {
	return o
}

// The flags for the initial dump.
func (o DumpFlagsResponseOutput) DumpFlags() DumpFlagResponseArrayOutput {
	return o.ApplyT(func(v DumpFlagsResponse) []DumpFlagResponse { return v.DumpFlags }).(DumpFlagResponseArrayOutput)
}

// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
type Empty struct {
}

// EmptyInput is an input type that accepts EmptyArgs and EmptyOutput values.
// You can construct a concrete instance of `EmptyInput` via:
//
//	EmptyArgs{...}
type EmptyInput interface {
	pulumi.Input

	ToEmptyOutput() EmptyOutput
	ToEmptyOutputWithContext(context.Context) EmptyOutput
}

// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
type EmptyArgs struct {
}

func (EmptyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Empty)(nil)).Elem()
}

func (i EmptyArgs) ToEmptyOutput() EmptyOutput {
	return i.ToEmptyOutputWithContext(context.Background())
}

func (i EmptyArgs) ToEmptyOutputWithContext(ctx context.Context) EmptyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmptyOutput)
}

func (i EmptyArgs) ToEmptyPtrOutput() EmptyPtrOutput {
	return i.ToEmptyPtrOutputWithContext(context.Background())
}

func (i EmptyArgs) ToEmptyPtrOutputWithContext(ctx context.Context) EmptyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmptyOutput).ToEmptyPtrOutputWithContext(ctx)
}

// EmptyPtrInput is an input type that accepts EmptyArgs, EmptyPtr and EmptyPtrOutput values.
// You can construct a concrete instance of `EmptyPtrInput` via:
//
//	        EmptyArgs{...}
//
//	or:
//
//	        nil
type EmptyPtrInput interface {
	pulumi.Input

	ToEmptyPtrOutput() EmptyPtrOutput
	ToEmptyPtrOutputWithContext(context.Context) EmptyPtrOutput
}

type emptyPtrType EmptyArgs

func EmptyPtr(v *EmptyArgs) EmptyPtrInput {
	return (*emptyPtrType)(v)
}

func (*emptyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Empty)(nil)).Elem()
}

func (i *emptyPtrType) ToEmptyPtrOutput() EmptyPtrOutput {
	return i.ToEmptyPtrOutputWithContext(context.Background())
}

func (i *emptyPtrType) ToEmptyPtrOutputWithContext(ctx context.Context) EmptyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmptyPtrOutput)
}

// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
type EmptyOutput struct{ *pulumi.OutputState }

func (EmptyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Empty)(nil)).Elem()
}

func (o EmptyOutput) ToEmptyOutput() EmptyOutput {
	return o
}

func (o EmptyOutput) ToEmptyOutputWithContext(ctx context.Context) EmptyOutput {
	return o
}

func (o EmptyOutput) ToEmptyPtrOutput() EmptyPtrOutput {
	return o.ToEmptyPtrOutputWithContext(context.Background())
}

func (o EmptyOutput) ToEmptyPtrOutputWithContext(ctx context.Context) EmptyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Empty) *Empty {
		return &v
	}).(EmptyPtrOutput)
}

type EmptyPtrOutput struct{ *pulumi.OutputState }

func (EmptyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Empty)(nil)).Elem()
}

func (o EmptyPtrOutput) ToEmptyPtrOutput() EmptyPtrOutput {
	return o
}

func (o EmptyPtrOutput) ToEmptyPtrOutputWithContext(ctx context.Context) EmptyPtrOutput {
	return o
}

func (o EmptyPtrOutput) Elem() EmptyOutput {
	return o.ApplyT(func(v *Empty) Empty {
		if v != nil {
			return *v
		}
		var ret Empty
		return ret
	}).(EmptyOutput)
}

// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
type EmptyResponse struct {
}

// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
type EmptyResponseOutput struct{ *pulumi.OutputState }

func (EmptyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EmptyResponse)(nil)).Elem()
}

func (o EmptyResponseOutput) ToEmptyResponseOutput() EmptyResponseOutput {
	return o
}

func (o EmptyResponseOutput) ToEmptyResponseOutputWithContext(ctx context.Context) EmptyResponseOutput {
	return o
}

// EncryptionConfig describes the encryption config of a cluster that is encrypted with a CMEK (customer-managed encryption key).
type EncryptionConfig struct {
	// The fully-qualified resource name of the KMS key. Each Cloud KMS key is regionalized and has the following format: projects/[PROJECT]/locations/[REGION]/keyRings/[RING]/cryptoKeys/[KEY_NAME]
	KmsKeyName *string `pulumi:"kmsKeyName"`
}

// EncryptionConfigInput is an input type that accepts EncryptionConfigArgs and EncryptionConfigOutput values.
// You can construct a concrete instance of `EncryptionConfigInput` via:
//
//	EncryptionConfigArgs{...}
type EncryptionConfigInput interface {
	pulumi.Input

	ToEncryptionConfigOutput() EncryptionConfigOutput
	ToEncryptionConfigOutputWithContext(context.Context) EncryptionConfigOutput
}

// EncryptionConfig describes the encryption config of a cluster that is encrypted with a CMEK (customer-managed encryption key).
type EncryptionConfigArgs struct {
	// The fully-qualified resource name of the KMS key. Each Cloud KMS key is regionalized and has the following format: projects/[PROJECT]/locations/[REGION]/keyRings/[RING]/cryptoKeys/[KEY_NAME]
	KmsKeyName pulumi.StringPtrInput `pulumi:"kmsKeyName"`
}

func (EncryptionConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionConfig)(nil)).Elem()
}

func (i EncryptionConfigArgs) ToEncryptionConfigOutput() EncryptionConfigOutput {
	return i.ToEncryptionConfigOutputWithContext(context.Background())
}

func (i EncryptionConfigArgs) ToEncryptionConfigOutputWithContext(ctx context.Context) EncryptionConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionConfigOutput)
}

func (i EncryptionConfigArgs) ToEncryptionConfigPtrOutput() EncryptionConfigPtrOutput {
	return i.ToEncryptionConfigPtrOutputWithContext(context.Background())
}

func (i EncryptionConfigArgs) ToEncryptionConfigPtrOutputWithContext(ctx context.Context) EncryptionConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionConfigOutput).ToEncryptionConfigPtrOutputWithContext(ctx)
}

// EncryptionConfigPtrInput is an input type that accepts EncryptionConfigArgs, EncryptionConfigPtr and EncryptionConfigPtrOutput values.
// You can construct a concrete instance of `EncryptionConfigPtrInput` via:
//
//	        EncryptionConfigArgs{...}
//
//	or:
//
//	        nil
type EncryptionConfigPtrInput interface {
	pulumi.Input

	ToEncryptionConfigPtrOutput() EncryptionConfigPtrOutput
	ToEncryptionConfigPtrOutputWithContext(context.Context) EncryptionConfigPtrOutput
}

type encryptionConfigPtrType EncryptionConfigArgs

func EncryptionConfigPtr(v *EncryptionConfigArgs) EncryptionConfigPtrInput {
	return (*encryptionConfigPtrType)(v)
}

func (*encryptionConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionConfig)(nil)).Elem()
}

func (i *encryptionConfigPtrType) ToEncryptionConfigPtrOutput() EncryptionConfigPtrOutput {
	return i.ToEncryptionConfigPtrOutputWithContext(context.Background())
}

func (i *encryptionConfigPtrType) ToEncryptionConfigPtrOutputWithContext(ctx context.Context) EncryptionConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionConfigPtrOutput)
}

// EncryptionConfig describes the encryption config of a cluster that is encrypted with a CMEK (customer-managed encryption key).
type EncryptionConfigOutput struct{ *pulumi.OutputState }

func (EncryptionConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionConfig)(nil)).Elem()
}

func (o EncryptionConfigOutput) ToEncryptionConfigOutput() EncryptionConfigOutput {
	return o
}

func (o EncryptionConfigOutput) ToEncryptionConfigOutputWithContext(ctx context.Context) EncryptionConfigOutput {
	return o
}

func (o EncryptionConfigOutput) ToEncryptionConfigPtrOutput() EncryptionConfigPtrOutput {
	return o.ToEncryptionConfigPtrOutputWithContext(context.Background())
}

func (o EncryptionConfigOutput) ToEncryptionConfigPtrOutputWithContext(ctx context.Context) EncryptionConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EncryptionConfig) *EncryptionConfig {
		return &v
	}).(EncryptionConfigPtrOutput)
}

// The fully-qualified resource name of the KMS key. Each Cloud KMS key is regionalized and has the following format: projects/[PROJECT]/locations/[REGION]/keyRings/[RING]/cryptoKeys/[KEY_NAME]
func (o EncryptionConfigOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptionConfig) *string { return v.KmsKeyName }).(pulumi.StringPtrOutput)
}

type EncryptionConfigPtrOutput struct{ *pulumi.OutputState }

func (EncryptionConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionConfig)(nil)).Elem()
}

func (o EncryptionConfigPtrOutput) ToEncryptionConfigPtrOutput() EncryptionConfigPtrOutput {
	return o
}

func (o EncryptionConfigPtrOutput) ToEncryptionConfigPtrOutputWithContext(ctx context.Context) EncryptionConfigPtrOutput {
	return o
}

func (o EncryptionConfigPtrOutput) Elem() EncryptionConfigOutput {
	return o.ApplyT(func(v *EncryptionConfig) EncryptionConfig {
		if v != nil {
			return *v
		}
		var ret EncryptionConfig
		return ret
	}).(EncryptionConfigOutput)
}

// The fully-qualified resource name of the KMS key. Each Cloud KMS key is regionalized and has the following format: projects/[PROJECT]/locations/[REGION]/keyRings/[RING]/cryptoKeys/[KEY_NAME]
func (o EncryptionConfigPtrOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionConfig) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyName
	}).(pulumi.StringPtrOutput)
}

// EncryptionConfig describes the encryption config of a cluster that is encrypted with a CMEK (customer-managed encryption key).
type EncryptionConfigResponse struct {
	// The fully-qualified resource name of the KMS key. Each Cloud KMS key is regionalized and has the following format: projects/[PROJECT]/locations/[REGION]/keyRings/[RING]/cryptoKeys/[KEY_NAME]
	KmsKeyName string `pulumi:"kmsKeyName"`
}

// EncryptionConfig describes the encryption config of a cluster that is encrypted with a CMEK (customer-managed encryption key).
type EncryptionConfigResponseOutput struct{ *pulumi.OutputState }

func (EncryptionConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionConfigResponse)(nil)).Elem()
}

func (o EncryptionConfigResponseOutput) ToEncryptionConfigResponseOutput() EncryptionConfigResponseOutput {
	return o
}

func (o EncryptionConfigResponseOutput) ToEncryptionConfigResponseOutputWithContext(ctx context.Context) EncryptionConfigResponseOutput {
	return o
}

// The fully-qualified resource name of the KMS key. Each Cloud KMS key is regionalized and has the following format: projects/[PROJECT]/locations/[REGION]/keyRings/[RING]/cryptoKeys/[KEY_NAME]
func (o EncryptionConfigResponseOutput) KmsKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionConfigResponse) string { return v.KmsKeyName }).(pulumi.StringOutput)
}

// Options to configure rule type EntityMove. The rule is used to move an entity to a new schema. The rule filter field can refer to one or more entities. The rule scope can be one of: Table, Column, Constraint, Index, View, Function, Stored Procedure, Materialized View, Sequence, UDT
type EntityMove struct {
	// The new schema
	NewSchema string `pulumi:"newSchema"`
}

// EntityMoveInput is an input type that accepts EntityMoveArgs and EntityMoveOutput values.
// You can construct a concrete instance of `EntityMoveInput` via:
//
//	EntityMoveArgs{...}
type EntityMoveInput interface {
	pulumi.Input

	ToEntityMoveOutput() EntityMoveOutput
	ToEntityMoveOutputWithContext(context.Context) EntityMoveOutput
}

// Options to configure rule type EntityMove. The rule is used to move an entity to a new schema. The rule filter field can refer to one or more entities. The rule scope can be one of: Table, Column, Constraint, Index, View, Function, Stored Procedure, Materialized View, Sequence, UDT
type EntityMoveArgs struct {
	// The new schema
	NewSchema pulumi.StringInput `pulumi:"newSchema"`
}

func (EntityMoveArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityMove)(nil)).Elem()
}

func (i EntityMoveArgs) ToEntityMoveOutput() EntityMoveOutput {
	return i.ToEntityMoveOutputWithContext(context.Background())
}

func (i EntityMoveArgs) ToEntityMoveOutputWithContext(ctx context.Context) EntityMoveOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityMoveOutput)
}

func (i EntityMoveArgs) ToEntityMovePtrOutput() EntityMovePtrOutput {
	return i.ToEntityMovePtrOutputWithContext(context.Background())
}

func (i EntityMoveArgs) ToEntityMovePtrOutputWithContext(ctx context.Context) EntityMovePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityMoveOutput).ToEntityMovePtrOutputWithContext(ctx)
}

// EntityMovePtrInput is an input type that accepts EntityMoveArgs, EntityMovePtr and EntityMovePtrOutput values.
// You can construct a concrete instance of `EntityMovePtrInput` via:
//
//	        EntityMoveArgs{...}
//
//	or:
//
//	        nil
type EntityMovePtrInput interface {
	pulumi.Input

	ToEntityMovePtrOutput() EntityMovePtrOutput
	ToEntityMovePtrOutputWithContext(context.Context) EntityMovePtrOutput
}

type entityMovePtrType EntityMoveArgs

func EntityMovePtr(v *EntityMoveArgs) EntityMovePtrInput {
	return (*entityMovePtrType)(v)
}

func (*entityMovePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EntityMove)(nil)).Elem()
}

func (i *entityMovePtrType) ToEntityMovePtrOutput() EntityMovePtrOutput {
	return i.ToEntityMovePtrOutputWithContext(context.Background())
}

func (i *entityMovePtrType) ToEntityMovePtrOutputWithContext(ctx context.Context) EntityMovePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityMovePtrOutput)
}

// Options to configure rule type EntityMove. The rule is used to move an entity to a new schema. The rule filter field can refer to one or more entities. The rule scope can be one of: Table, Column, Constraint, Index, View, Function, Stored Procedure, Materialized View, Sequence, UDT
type EntityMoveOutput struct{ *pulumi.OutputState }

func (EntityMoveOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityMove)(nil)).Elem()
}

func (o EntityMoveOutput) ToEntityMoveOutput() EntityMoveOutput {
	return o
}

func (o EntityMoveOutput) ToEntityMoveOutputWithContext(ctx context.Context) EntityMoveOutput {
	return o
}

func (o EntityMoveOutput) ToEntityMovePtrOutput() EntityMovePtrOutput {
	return o.ToEntityMovePtrOutputWithContext(context.Background())
}

func (o EntityMoveOutput) ToEntityMovePtrOutputWithContext(ctx context.Context) EntityMovePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EntityMove) *EntityMove {
		return &v
	}).(EntityMovePtrOutput)
}

// The new schema
func (o EntityMoveOutput) NewSchema() pulumi.StringOutput {
	return o.ApplyT(func(v EntityMove) string { return v.NewSchema }).(pulumi.StringOutput)
}

type EntityMovePtrOutput struct{ *pulumi.OutputState }

func (EntityMovePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EntityMove)(nil)).Elem()
}

func (o EntityMovePtrOutput) ToEntityMovePtrOutput() EntityMovePtrOutput {
	return o
}

func (o EntityMovePtrOutput) ToEntityMovePtrOutputWithContext(ctx context.Context) EntityMovePtrOutput {
	return o
}

func (o EntityMovePtrOutput) Elem() EntityMoveOutput {
	return o.ApplyT(func(v *EntityMove) EntityMove {
		if v != nil {
			return *v
		}
		var ret EntityMove
		return ret
	}).(EntityMoveOutput)
}

// The new schema
func (o EntityMovePtrOutput) NewSchema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EntityMove) *string {
		if v == nil {
			return nil
		}
		return &v.NewSchema
	}).(pulumi.StringPtrOutput)
}

// Options to configure rule type EntityMove. The rule is used to move an entity to a new schema. The rule filter field can refer to one or more entities. The rule scope can be one of: Table, Column, Constraint, Index, View, Function, Stored Procedure, Materialized View, Sequence, UDT
type EntityMoveResponse struct {
	// The new schema
	NewSchema string `pulumi:"newSchema"`
}

// Options to configure rule type EntityMove. The rule is used to move an entity to a new schema. The rule filter field can refer to one or more entities. The rule scope can be one of: Table, Column, Constraint, Index, View, Function, Stored Procedure, Materialized View, Sequence, UDT
type EntityMoveResponseOutput struct{ *pulumi.OutputState }

func (EntityMoveResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityMoveResponse)(nil)).Elem()
}

func (o EntityMoveResponseOutput) ToEntityMoveResponseOutput() EntityMoveResponseOutput {
	return o
}

func (o EntityMoveResponseOutput) ToEntityMoveResponseOutputWithContext(ctx context.Context) EntityMoveResponseOutput {
	return o
}

// The new schema
func (o EntityMoveResponseOutput) NewSchema() pulumi.StringOutput {
	return o.ApplyT(func(v EntityMoveResponse) string { return v.NewSchema }).(pulumi.StringOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//	ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//	        ExprArgs{...}
//
//	or:
//
//	        nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr {
		if v != nil {
			return *v
		}
		var ret Expr
		return ret
	}).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponse struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title string `pulumi:"title"`
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseOutput struct{ *pulumi.OutputState }

func (ExprResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (o ExprResponseOutput) ToExprResponseOutput() ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return o
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Title }).(pulumi.StringOutput)
}

// Options to configure rule type FilterTableColumns. The rule is used to filter the list of columns to include or exclude from a table. The rule filter field can refer to one entity. The rule scope can be: Table Only one of the two lists can be specified for the rule.
type FilterTableColumns struct {
	// Optional. List of columns to be excluded for a particular table.
	ExcludeColumns []string `pulumi:"excludeColumns"`
	// Optional. List of columns to be included for a particular table.
	IncludeColumns []string `pulumi:"includeColumns"`
}

// FilterTableColumnsInput is an input type that accepts FilterTableColumnsArgs and FilterTableColumnsOutput values.
// You can construct a concrete instance of `FilterTableColumnsInput` via:
//
//	FilterTableColumnsArgs{...}
type FilterTableColumnsInput interface {
	pulumi.Input

	ToFilterTableColumnsOutput() FilterTableColumnsOutput
	ToFilterTableColumnsOutputWithContext(context.Context) FilterTableColumnsOutput
}

// Options to configure rule type FilterTableColumns. The rule is used to filter the list of columns to include or exclude from a table. The rule filter field can refer to one entity. The rule scope can be: Table Only one of the two lists can be specified for the rule.
type FilterTableColumnsArgs struct {
	// Optional. List of columns to be excluded for a particular table.
	ExcludeColumns pulumi.StringArrayInput `pulumi:"excludeColumns"`
	// Optional. List of columns to be included for a particular table.
	IncludeColumns pulumi.StringArrayInput `pulumi:"includeColumns"`
}

func (FilterTableColumnsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FilterTableColumns)(nil)).Elem()
}

func (i FilterTableColumnsArgs) ToFilterTableColumnsOutput() FilterTableColumnsOutput {
	return i.ToFilterTableColumnsOutputWithContext(context.Background())
}

func (i FilterTableColumnsArgs) ToFilterTableColumnsOutputWithContext(ctx context.Context) FilterTableColumnsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FilterTableColumnsOutput)
}

func (i FilterTableColumnsArgs) ToFilterTableColumnsPtrOutput() FilterTableColumnsPtrOutput {
	return i.ToFilterTableColumnsPtrOutputWithContext(context.Background())
}

func (i FilterTableColumnsArgs) ToFilterTableColumnsPtrOutputWithContext(ctx context.Context) FilterTableColumnsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FilterTableColumnsOutput).ToFilterTableColumnsPtrOutputWithContext(ctx)
}

// FilterTableColumnsPtrInput is an input type that accepts FilterTableColumnsArgs, FilterTableColumnsPtr and FilterTableColumnsPtrOutput values.
// You can construct a concrete instance of `FilterTableColumnsPtrInput` via:
//
//	        FilterTableColumnsArgs{...}
//
//	or:
//
//	        nil
type FilterTableColumnsPtrInput interface {
	pulumi.Input

	ToFilterTableColumnsPtrOutput() FilterTableColumnsPtrOutput
	ToFilterTableColumnsPtrOutputWithContext(context.Context) FilterTableColumnsPtrOutput
}

type filterTableColumnsPtrType FilterTableColumnsArgs

func FilterTableColumnsPtr(v *FilterTableColumnsArgs) FilterTableColumnsPtrInput {
	return (*filterTableColumnsPtrType)(v)
}

func (*filterTableColumnsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FilterTableColumns)(nil)).Elem()
}

func (i *filterTableColumnsPtrType) ToFilterTableColumnsPtrOutput() FilterTableColumnsPtrOutput {
	return i.ToFilterTableColumnsPtrOutputWithContext(context.Background())
}

func (i *filterTableColumnsPtrType) ToFilterTableColumnsPtrOutputWithContext(ctx context.Context) FilterTableColumnsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FilterTableColumnsPtrOutput)
}

// Options to configure rule type FilterTableColumns. The rule is used to filter the list of columns to include or exclude from a table. The rule filter field can refer to one entity. The rule scope can be: Table Only one of the two lists can be specified for the rule.
type FilterTableColumnsOutput struct{ *pulumi.OutputState }

func (FilterTableColumnsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FilterTableColumns)(nil)).Elem()
}

func (o FilterTableColumnsOutput) ToFilterTableColumnsOutput() FilterTableColumnsOutput {
	return o
}

func (o FilterTableColumnsOutput) ToFilterTableColumnsOutputWithContext(ctx context.Context) FilterTableColumnsOutput {
	return o
}

func (o FilterTableColumnsOutput) ToFilterTableColumnsPtrOutput() FilterTableColumnsPtrOutput {
	return o.ToFilterTableColumnsPtrOutputWithContext(context.Background())
}

func (o FilterTableColumnsOutput) ToFilterTableColumnsPtrOutputWithContext(ctx context.Context) FilterTableColumnsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FilterTableColumns) *FilterTableColumns {
		return &v
	}).(FilterTableColumnsPtrOutput)
}

// Optional. List of columns to be excluded for a particular table.
func (o FilterTableColumnsOutput) ExcludeColumns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FilterTableColumns) []string { return v.ExcludeColumns }).(pulumi.StringArrayOutput)
}

// Optional. List of columns to be included for a particular table.
func (o FilterTableColumnsOutput) IncludeColumns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FilterTableColumns) []string { return v.IncludeColumns }).(pulumi.StringArrayOutput)
}

type FilterTableColumnsPtrOutput struct{ *pulumi.OutputState }

func (FilterTableColumnsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FilterTableColumns)(nil)).Elem()
}

func (o FilterTableColumnsPtrOutput) ToFilterTableColumnsPtrOutput() FilterTableColumnsPtrOutput {
	return o
}

func (o FilterTableColumnsPtrOutput) ToFilterTableColumnsPtrOutputWithContext(ctx context.Context) FilterTableColumnsPtrOutput {
	return o
}

func (o FilterTableColumnsPtrOutput) Elem() FilterTableColumnsOutput {
	return o.ApplyT(func(v *FilterTableColumns) FilterTableColumns {
		if v != nil {
			return *v
		}
		var ret FilterTableColumns
		return ret
	}).(FilterTableColumnsOutput)
}

// Optional. List of columns to be excluded for a particular table.
func (o FilterTableColumnsPtrOutput) ExcludeColumns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FilterTableColumns) []string {
		if v == nil {
			return nil
		}
		return v.ExcludeColumns
	}).(pulumi.StringArrayOutput)
}

// Optional. List of columns to be included for a particular table.
func (o FilterTableColumnsPtrOutput) IncludeColumns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FilterTableColumns) []string {
		if v == nil {
			return nil
		}
		return v.IncludeColumns
	}).(pulumi.StringArrayOutput)
}

// Options to configure rule type FilterTableColumns. The rule is used to filter the list of columns to include or exclude from a table. The rule filter field can refer to one entity. The rule scope can be: Table Only one of the two lists can be specified for the rule.
type FilterTableColumnsResponse struct {
	// Optional. List of columns to be excluded for a particular table.
	ExcludeColumns []string `pulumi:"excludeColumns"`
	// Optional. List of columns to be included for a particular table.
	IncludeColumns []string `pulumi:"includeColumns"`
}

// Options to configure rule type FilterTableColumns. The rule is used to filter the list of columns to include or exclude from a table. The rule filter field can refer to one entity. The rule scope can be: Table Only one of the two lists can be specified for the rule.
type FilterTableColumnsResponseOutput struct{ *pulumi.OutputState }

func (FilterTableColumnsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FilterTableColumnsResponse)(nil)).Elem()
}

func (o FilterTableColumnsResponseOutput) ToFilterTableColumnsResponseOutput() FilterTableColumnsResponseOutput {
	return o
}

func (o FilterTableColumnsResponseOutput) ToFilterTableColumnsResponseOutputWithContext(ctx context.Context) FilterTableColumnsResponseOutput {
	return o
}

// Optional. List of columns to be excluded for a particular table.
func (o FilterTableColumnsResponseOutput) ExcludeColumns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FilterTableColumnsResponse) []string { return v.ExcludeColumns }).(pulumi.StringArrayOutput)
}

// Optional. List of columns to be included for a particular table.
func (o FilterTableColumnsResponseOutput) IncludeColumns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FilterTableColumnsResponse) []string { return v.IncludeColumns }).(pulumi.StringArrayOutput)
}

// Forward SSH Tunnel connectivity.
type ForwardSshTunnelConnectivity struct {
	// Hostname for the SSH tunnel.
	Hostname string `pulumi:"hostname"`
	// Input only. SSH password.
	Password *string `pulumi:"password"`
	// Port for the SSH tunnel, default value is 22.
	Port *int `pulumi:"port"`
	// Input only. SSH private key.
	PrivateKey *string `pulumi:"privateKey"`
	// Username for the SSH tunnel.
	Username string `pulumi:"username"`
}

// ForwardSshTunnelConnectivityInput is an input type that accepts ForwardSshTunnelConnectivityArgs and ForwardSshTunnelConnectivityOutput values.
// You can construct a concrete instance of `ForwardSshTunnelConnectivityInput` via:
//
//	ForwardSshTunnelConnectivityArgs{...}
type ForwardSshTunnelConnectivityInput interface {
	pulumi.Input

	ToForwardSshTunnelConnectivityOutput() ForwardSshTunnelConnectivityOutput
	ToForwardSshTunnelConnectivityOutputWithContext(context.Context) ForwardSshTunnelConnectivityOutput
}

// Forward SSH Tunnel connectivity.
type ForwardSshTunnelConnectivityArgs struct {
	// Hostname for the SSH tunnel.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Input only. SSH password.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Port for the SSH tunnel, default value is 22.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Input only. SSH private key.
	PrivateKey pulumi.StringPtrInput `pulumi:"privateKey"`
	// Username for the SSH tunnel.
	Username pulumi.StringInput `pulumi:"username"`
}

func (ForwardSshTunnelConnectivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ForwardSshTunnelConnectivity)(nil)).Elem()
}

func (i ForwardSshTunnelConnectivityArgs) ToForwardSshTunnelConnectivityOutput() ForwardSshTunnelConnectivityOutput {
	return i.ToForwardSshTunnelConnectivityOutputWithContext(context.Background())
}

func (i ForwardSshTunnelConnectivityArgs) ToForwardSshTunnelConnectivityOutputWithContext(ctx context.Context) ForwardSshTunnelConnectivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForwardSshTunnelConnectivityOutput)
}

func (i ForwardSshTunnelConnectivityArgs) ToForwardSshTunnelConnectivityPtrOutput() ForwardSshTunnelConnectivityPtrOutput {
	return i.ToForwardSshTunnelConnectivityPtrOutputWithContext(context.Background())
}

func (i ForwardSshTunnelConnectivityArgs) ToForwardSshTunnelConnectivityPtrOutputWithContext(ctx context.Context) ForwardSshTunnelConnectivityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForwardSshTunnelConnectivityOutput).ToForwardSshTunnelConnectivityPtrOutputWithContext(ctx)
}

// ForwardSshTunnelConnectivityPtrInput is an input type that accepts ForwardSshTunnelConnectivityArgs, ForwardSshTunnelConnectivityPtr and ForwardSshTunnelConnectivityPtrOutput values.
// You can construct a concrete instance of `ForwardSshTunnelConnectivityPtrInput` via:
//
//	        ForwardSshTunnelConnectivityArgs{...}
//
//	or:
//
//	        nil
type ForwardSshTunnelConnectivityPtrInput interface {
	pulumi.Input

	ToForwardSshTunnelConnectivityPtrOutput() ForwardSshTunnelConnectivityPtrOutput
	ToForwardSshTunnelConnectivityPtrOutputWithContext(context.Context) ForwardSshTunnelConnectivityPtrOutput
}

type forwardSshTunnelConnectivityPtrType ForwardSshTunnelConnectivityArgs

func ForwardSshTunnelConnectivityPtr(v *ForwardSshTunnelConnectivityArgs) ForwardSshTunnelConnectivityPtrInput {
	return (*forwardSshTunnelConnectivityPtrType)(v)
}

func (*forwardSshTunnelConnectivityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ForwardSshTunnelConnectivity)(nil)).Elem()
}

func (i *forwardSshTunnelConnectivityPtrType) ToForwardSshTunnelConnectivityPtrOutput() ForwardSshTunnelConnectivityPtrOutput {
	return i.ToForwardSshTunnelConnectivityPtrOutputWithContext(context.Background())
}

func (i *forwardSshTunnelConnectivityPtrType) ToForwardSshTunnelConnectivityPtrOutputWithContext(ctx context.Context) ForwardSshTunnelConnectivityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForwardSshTunnelConnectivityPtrOutput)
}

// Forward SSH Tunnel connectivity.
type ForwardSshTunnelConnectivityOutput struct{ *pulumi.OutputState }

func (ForwardSshTunnelConnectivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ForwardSshTunnelConnectivity)(nil)).Elem()
}

func (o ForwardSshTunnelConnectivityOutput) ToForwardSshTunnelConnectivityOutput() ForwardSshTunnelConnectivityOutput {
	return o
}

func (o ForwardSshTunnelConnectivityOutput) ToForwardSshTunnelConnectivityOutputWithContext(ctx context.Context) ForwardSshTunnelConnectivityOutput {
	return o
}

func (o ForwardSshTunnelConnectivityOutput) ToForwardSshTunnelConnectivityPtrOutput() ForwardSshTunnelConnectivityPtrOutput {
	return o.ToForwardSshTunnelConnectivityPtrOutputWithContext(context.Background())
}

func (o ForwardSshTunnelConnectivityOutput) ToForwardSshTunnelConnectivityPtrOutputWithContext(ctx context.Context) ForwardSshTunnelConnectivityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ForwardSshTunnelConnectivity) *ForwardSshTunnelConnectivity {
		return &v
	}).(ForwardSshTunnelConnectivityPtrOutput)
}

// Hostname for the SSH tunnel.
func (o ForwardSshTunnelConnectivityOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ForwardSshTunnelConnectivity) string { return v.Hostname }).(pulumi.StringOutput)
}

// Input only. SSH password.
func (o ForwardSshTunnelConnectivityOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForwardSshTunnelConnectivity) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Port for the SSH tunnel, default value is 22.
func (o ForwardSshTunnelConnectivityOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ForwardSshTunnelConnectivity) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Input only. SSH private key.
func (o ForwardSshTunnelConnectivityOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForwardSshTunnelConnectivity) *string { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

// Username for the SSH tunnel.
func (o ForwardSshTunnelConnectivityOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v ForwardSshTunnelConnectivity) string { return v.Username }).(pulumi.StringOutput)
}

type ForwardSshTunnelConnectivityPtrOutput struct{ *pulumi.OutputState }

func (ForwardSshTunnelConnectivityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ForwardSshTunnelConnectivity)(nil)).Elem()
}

func (o ForwardSshTunnelConnectivityPtrOutput) ToForwardSshTunnelConnectivityPtrOutput() ForwardSshTunnelConnectivityPtrOutput {
	return o
}

func (o ForwardSshTunnelConnectivityPtrOutput) ToForwardSshTunnelConnectivityPtrOutputWithContext(ctx context.Context) ForwardSshTunnelConnectivityPtrOutput {
	return o
}

func (o ForwardSshTunnelConnectivityPtrOutput) Elem() ForwardSshTunnelConnectivityOutput {
	return o.ApplyT(func(v *ForwardSshTunnelConnectivity) ForwardSshTunnelConnectivity {
		if v != nil {
			return *v
		}
		var ret ForwardSshTunnelConnectivity
		return ret
	}).(ForwardSshTunnelConnectivityOutput)
}

// Hostname for the SSH tunnel.
func (o ForwardSshTunnelConnectivityPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForwardSshTunnelConnectivity) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Input only. SSH password.
func (o ForwardSshTunnelConnectivityPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForwardSshTunnelConnectivity) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// Port for the SSH tunnel, default value is 22.
func (o ForwardSshTunnelConnectivityPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ForwardSshTunnelConnectivity) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// Input only. SSH private key.
func (o ForwardSshTunnelConnectivityPtrOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForwardSshTunnelConnectivity) *string {
		if v == nil {
			return nil
		}
		return v.PrivateKey
	}).(pulumi.StringPtrOutput)
}

// Username for the SSH tunnel.
func (o ForwardSshTunnelConnectivityPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForwardSshTunnelConnectivity) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

// Forward SSH Tunnel connectivity.
type ForwardSshTunnelConnectivityResponse struct {
	// Hostname for the SSH tunnel.
	Hostname string `pulumi:"hostname"`
	// Input only. SSH password.
	Password string `pulumi:"password"`
	// Port for the SSH tunnel, default value is 22.
	Port int `pulumi:"port"`
	// Input only. SSH private key.
	PrivateKey string `pulumi:"privateKey"`
	// Username for the SSH tunnel.
	Username string `pulumi:"username"`
}

// Forward SSH Tunnel connectivity.
type ForwardSshTunnelConnectivityResponseOutput struct{ *pulumi.OutputState }

func (ForwardSshTunnelConnectivityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ForwardSshTunnelConnectivityResponse)(nil)).Elem()
}

func (o ForwardSshTunnelConnectivityResponseOutput) ToForwardSshTunnelConnectivityResponseOutput() ForwardSshTunnelConnectivityResponseOutput {
	return o
}

func (o ForwardSshTunnelConnectivityResponseOutput) ToForwardSshTunnelConnectivityResponseOutputWithContext(ctx context.Context) ForwardSshTunnelConnectivityResponseOutput {
	return o
}

// Hostname for the SSH tunnel.
func (o ForwardSshTunnelConnectivityResponseOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ForwardSshTunnelConnectivityResponse) string { return v.Hostname }).(pulumi.StringOutput)
}

// Input only. SSH password.
func (o ForwardSshTunnelConnectivityResponseOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v ForwardSshTunnelConnectivityResponse) string { return v.Password }).(pulumi.StringOutput)
}

// Port for the SSH tunnel, default value is 22.
func (o ForwardSshTunnelConnectivityResponseOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v ForwardSshTunnelConnectivityResponse) int { return v.Port }).(pulumi.IntOutput)
}

// Input only. SSH private key.
func (o ForwardSshTunnelConnectivityResponseOutput) PrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v ForwardSshTunnelConnectivityResponse) string { return v.PrivateKey }).(pulumi.StringOutput)
}

// Username for the SSH tunnel.
func (o ForwardSshTunnelConnectivityResponseOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v ForwardSshTunnelConnectivityResponse) string { return v.Username }).(pulumi.StringOutput)
}

// Filter based on relation between source value and compare value of type integer in ConditionalColumnSetValue
type IntComparisonFilter struct {
	// Integer compare value to be used
	Value string `pulumi:"value"`
	// Relation between source value and compare value
	ValueComparison IntComparisonFilterValueComparison `pulumi:"valueComparison"`
}

// IntComparisonFilterInput is an input type that accepts IntComparisonFilterArgs and IntComparisonFilterOutput values.
// You can construct a concrete instance of `IntComparisonFilterInput` via:
//
//	IntComparisonFilterArgs{...}
type IntComparisonFilterInput interface {
	pulumi.Input

	ToIntComparisonFilterOutput() IntComparisonFilterOutput
	ToIntComparisonFilterOutputWithContext(context.Context) IntComparisonFilterOutput
}

// Filter based on relation between source value and compare value of type integer in ConditionalColumnSetValue
type IntComparisonFilterArgs struct {
	// Integer compare value to be used
	Value pulumi.StringInput `pulumi:"value"`
	// Relation between source value and compare value
	ValueComparison IntComparisonFilterValueComparisonInput `pulumi:"valueComparison"`
}

func (IntComparisonFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntComparisonFilter)(nil)).Elem()
}

func (i IntComparisonFilterArgs) ToIntComparisonFilterOutput() IntComparisonFilterOutput {
	return i.ToIntComparisonFilterOutputWithContext(context.Background())
}

func (i IntComparisonFilterArgs) ToIntComparisonFilterOutputWithContext(ctx context.Context) IntComparisonFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntComparisonFilterOutput)
}

func (i IntComparisonFilterArgs) ToIntComparisonFilterPtrOutput() IntComparisonFilterPtrOutput {
	return i.ToIntComparisonFilterPtrOutputWithContext(context.Background())
}

func (i IntComparisonFilterArgs) ToIntComparisonFilterPtrOutputWithContext(ctx context.Context) IntComparisonFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntComparisonFilterOutput).ToIntComparisonFilterPtrOutputWithContext(ctx)
}

// IntComparisonFilterPtrInput is an input type that accepts IntComparisonFilterArgs, IntComparisonFilterPtr and IntComparisonFilterPtrOutput values.
// You can construct a concrete instance of `IntComparisonFilterPtrInput` via:
//
//	        IntComparisonFilterArgs{...}
//
//	or:
//
//	        nil
type IntComparisonFilterPtrInput interface {
	pulumi.Input

	ToIntComparisonFilterPtrOutput() IntComparisonFilterPtrOutput
	ToIntComparisonFilterPtrOutputWithContext(context.Context) IntComparisonFilterPtrOutput
}

type intComparisonFilterPtrType IntComparisonFilterArgs

func IntComparisonFilterPtr(v *IntComparisonFilterArgs) IntComparisonFilterPtrInput {
	return (*intComparisonFilterPtrType)(v)
}

func (*intComparisonFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntComparisonFilter)(nil)).Elem()
}

func (i *intComparisonFilterPtrType) ToIntComparisonFilterPtrOutput() IntComparisonFilterPtrOutput {
	return i.ToIntComparisonFilterPtrOutputWithContext(context.Background())
}

func (i *intComparisonFilterPtrType) ToIntComparisonFilterPtrOutputWithContext(ctx context.Context) IntComparisonFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntComparisonFilterPtrOutput)
}

// Filter based on relation between source value and compare value of type integer in ConditionalColumnSetValue
type IntComparisonFilterOutput struct{ *pulumi.OutputState }

func (IntComparisonFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntComparisonFilter)(nil)).Elem()
}

func (o IntComparisonFilterOutput) ToIntComparisonFilterOutput() IntComparisonFilterOutput {
	return o
}

func (o IntComparisonFilterOutput) ToIntComparisonFilterOutputWithContext(ctx context.Context) IntComparisonFilterOutput {
	return o
}

func (o IntComparisonFilterOutput) ToIntComparisonFilterPtrOutput() IntComparisonFilterPtrOutput {
	return o.ToIntComparisonFilterPtrOutputWithContext(context.Background())
}

func (o IntComparisonFilterOutput) ToIntComparisonFilterPtrOutputWithContext(ctx context.Context) IntComparisonFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IntComparisonFilter) *IntComparisonFilter {
		return &v
	}).(IntComparisonFilterPtrOutput)
}

// Integer compare value to be used
func (o IntComparisonFilterOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v IntComparisonFilter) string { return v.Value }).(pulumi.StringOutput)
}

// Relation between source value and compare value
func (o IntComparisonFilterOutput) ValueComparison() IntComparisonFilterValueComparisonOutput {
	return o.ApplyT(func(v IntComparisonFilter) IntComparisonFilterValueComparison { return v.ValueComparison }).(IntComparisonFilterValueComparisonOutput)
}

type IntComparisonFilterPtrOutput struct{ *pulumi.OutputState }

func (IntComparisonFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntComparisonFilter)(nil)).Elem()
}

func (o IntComparisonFilterPtrOutput) ToIntComparisonFilterPtrOutput() IntComparisonFilterPtrOutput {
	return o
}

func (o IntComparisonFilterPtrOutput) ToIntComparisonFilterPtrOutputWithContext(ctx context.Context) IntComparisonFilterPtrOutput {
	return o
}

func (o IntComparisonFilterPtrOutput) Elem() IntComparisonFilterOutput {
	return o.ApplyT(func(v *IntComparisonFilter) IntComparisonFilter {
		if v != nil {
			return *v
		}
		var ret IntComparisonFilter
		return ret
	}).(IntComparisonFilterOutput)
}

// Integer compare value to be used
func (o IntComparisonFilterPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntComparisonFilter) *string {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.StringPtrOutput)
}

// Relation between source value and compare value
func (o IntComparisonFilterPtrOutput) ValueComparison() IntComparisonFilterValueComparisonPtrOutput {
	return o.ApplyT(func(v *IntComparisonFilter) *IntComparisonFilterValueComparison {
		if v == nil {
			return nil
		}
		return &v.ValueComparison
	}).(IntComparisonFilterValueComparisonPtrOutput)
}

// Filter based on relation between source value and compare value of type integer in ConditionalColumnSetValue
type IntComparisonFilterResponse struct {
	// Integer compare value to be used
	Value string `pulumi:"value"`
	// Relation between source value and compare value
	ValueComparison string `pulumi:"valueComparison"`
}

// Filter based on relation between source value and compare value of type integer in ConditionalColumnSetValue
type IntComparisonFilterResponseOutput struct{ *pulumi.OutputState }

func (IntComparisonFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntComparisonFilterResponse)(nil)).Elem()
}

func (o IntComparisonFilterResponseOutput) ToIntComparisonFilterResponseOutput() IntComparisonFilterResponseOutput {
	return o
}

func (o IntComparisonFilterResponseOutput) ToIntComparisonFilterResponseOutputWithContext(ctx context.Context) IntComparisonFilterResponseOutput {
	return o
}

// Integer compare value to be used
func (o IntComparisonFilterResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v IntComparisonFilterResponse) string { return v.Value }).(pulumi.StringOutput)
}

// Relation between source value and compare value
func (o IntComparisonFilterResponseOutput) ValueComparison() pulumi.StringOutput {
	return o.ApplyT(func(v IntComparisonFilterResponse) string { return v.ValueComparison }).(pulumi.StringOutput)
}

// MachineConfig describes the configuration of a machine.
type MachineConfig struct {
	// The number of CPU's in the VM instance.
	CpuCount *int `pulumi:"cpuCount"`
}

// MachineConfigInput is an input type that accepts MachineConfigArgs and MachineConfigOutput values.
// You can construct a concrete instance of `MachineConfigInput` via:
//
//	MachineConfigArgs{...}
type MachineConfigInput interface {
	pulumi.Input

	ToMachineConfigOutput() MachineConfigOutput
	ToMachineConfigOutputWithContext(context.Context) MachineConfigOutput
}

// MachineConfig describes the configuration of a machine.
type MachineConfigArgs struct {
	// The number of CPU's in the VM instance.
	CpuCount pulumi.IntPtrInput `pulumi:"cpuCount"`
}

func (MachineConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineConfig)(nil)).Elem()
}

func (i MachineConfigArgs) ToMachineConfigOutput() MachineConfigOutput {
	return i.ToMachineConfigOutputWithContext(context.Background())
}

func (i MachineConfigArgs) ToMachineConfigOutputWithContext(ctx context.Context) MachineConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineConfigOutput)
}

func (i MachineConfigArgs) ToMachineConfigPtrOutput() MachineConfigPtrOutput {
	return i.ToMachineConfigPtrOutputWithContext(context.Background())
}

func (i MachineConfigArgs) ToMachineConfigPtrOutputWithContext(ctx context.Context) MachineConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineConfigOutput).ToMachineConfigPtrOutputWithContext(ctx)
}

// MachineConfigPtrInput is an input type that accepts MachineConfigArgs, MachineConfigPtr and MachineConfigPtrOutput values.
// You can construct a concrete instance of `MachineConfigPtrInput` via:
//
//	        MachineConfigArgs{...}
//
//	or:
//
//	        nil
type MachineConfigPtrInput interface {
	pulumi.Input

	ToMachineConfigPtrOutput() MachineConfigPtrOutput
	ToMachineConfigPtrOutputWithContext(context.Context) MachineConfigPtrOutput
}

type machineConfigPtrType MachineConfigArgs

func MachineConfigPtr(v *MachineConfigArgs) MachineConfigPtrInput {
	return (*machineConfigPtrType)(v)
}

func (*machineConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineConfig)(nil)).Elem()
}

func (i *machineConfigPtrType) ToMachineConfigPtrOutput() MachineConfigPtrOutput {
	return i.ToMachineConfigPtrOutputWithContext(context.Background())
}

func (i *machineConfigPtrType) ToMachineConfigPtrOutputWithContext(ctx context.Context) MachineConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineConfigPtrOutput)
}

// MachineConfig describes the configuration of a machine.
type MachineConfigOutput struct{ *pulumi.OutputState }

func (MachineConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineConfig)(nil)).Elem()
}

func (o MachineConfigOutput) ToMachineConfigOutput() MachineConfigOutput {
	return o
}

func (o MachineConfigOutput) ToMachineConfigOutputWithContext(ctx context.Context) MachineConfigOutput {
	return o
}

func (o MachineConfigOutput) ToMachineConfigPtrOutput() MachineConfigPtrOutput {
	return o.ToMachineConfigPtrOutputWithContext(context.Background())
}

func (o MachineConfigOutput) ToMachineConfigPtrOutputWithContext(ctx context.Context) MachineConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MachineConfig) *MachineConfig {
		return &v
	}).(MachineConfigPtrOutput)
}

// The number of CPU's in the VM instance.
func (o MachineConfigOutput) CpuCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MachineConfig) *int { return v.CpuCount }).(pulumi.IntPtrOutput)
}

type MachineConfigPtrOutput struct{ *pulumi.OutputState }

func (MachineConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineConfig)(nil)).Elem()
}

func (o MachineConfigPtrOutput) ToMachineConfigPtrOutput() MachineConfigPtrOutput {
	return o
}

func (o MachineConfigPtrOutput) ToMachineConfigPtrOutputWithContext(ctx context.Context) MachineConfigPtrOutput {
	return o
}

func (o MachineConfigPtrOutput) Elem() MachineConfigOutput {
	return o.ApplyT(func(v *MachineConfig) MachineConfig {
		if v != nil {
			return *v
		}
		var ret MachineConfig
		return ret
	}).(MachineConfigOutput)
}

// The number of CPU's in the VM instance.
func (o MachineConfigPtrOutput) CpuCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MachineConfig) *int {
		if v == nil {
			return nil
		}
		return v.CpuCount
	}).(pulumi.IntPtrOutput)
}

// MachineConfig describes the configuration of a machine.
type MachineConfigResponse struct {
	// The number of CPU's in the VM instance.
	CpuCount int `pulumi:"cpuCount"`
}

// MachineConfig describes the configuration of a machine.
type MachineConfigResponseOutput struct{ *pulumi.OutputState }

func (MachineConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineConfigResponse)(nil)).Elem()
}

func (o MachineConfigResponseOutput) ToMachineConfigResponseOutput() MachineConfigResponseOutput {
	return o
}

func (o MachineConfigResponseOutput) ToMachineConfigResponseOutputWithContext(ctx context.Context) MachineConfigResponseOutput {
	return o
}

// The number of CPU's in the VM instance.
func (o MachineConfigResponseOutput) CpuCount() pulumi.IntOutput {
	return o.ApplyT(func(v MachineConfigResponse) int { return v.CpuCount }).(pulumi.IntOutput)
}

// A filter defining the entities that a mapping rule should be applied to. When more than one field is specified, the rule is applied only to entities which match all the fields.
type MappingRuleFilter struct {
	// Optional. The rule should be applied to specific entities defined by their fully qualified names.
	Entities []string `pulumi:"entities"`
	// Optional. The rule should be applied to entities whose non-qualified name contains the given string.
	EntityNameContains *string `pulumi:"entityNameContains"`
	// Optional. The rule should be applied to entities whose non-qualified name starts with the given prefix.
	EntityNamePrefix *string `pulumi:"entityNamePrefix"`
	// Optional. The rule should be applied to entities whose non-qualified name ends with the given suffix.
	EntityNameSuffix *string `pulumi:"entityNameSuffix"`
	// Optional. The rule should be applied to entities whose parent entity (fully qualified name) matches the given value. For example, if the rule applies to a table entity, the expected value should be a schema (schema). If the rule applies to a column or index entity, the expected value can be either a schema (schema) or a table (schema.table)
	ParentEntity *string `pulumi:"parentEntity"`
}

// MappingRuleFilterInput is an input type that accepts MappingRuleFilterArgs and MappingRuleFilterOutput values.
// You can construct a concrete instance of `MappingRuleFilterInput` via:
//
//	MappingRuleFilterArgs{...}
type MappingRuleFilterInput interface {
	pulumi.Input

	ToMappingRuleFilterOutput() MappingRuleFilterOutput
	ToMappingRuleFilterOutputWithContext(context.Context) MappingRuleFilterOutput
}

// A filter defining the entities that a mapping rule should be applied to. When more than one field is specified, the rule is applied only to entities which match all the fields.
type MappingRuleFilterArgs struct {
	// Optional. The rule should be applied to specific entities defined by their fully qualified names.
	Entities pulumi.StringArrayInput `pulumi:"entities"`
	// Optional. The rule should be applied to entities whose non-qualified name contains the given string.
	EntityNameContains pulumi.StringPtrInput `pulumi:"entityNameContains"`
	// Optional. The rule should be applied to entities whose non-qualified name starts with the given prefix.
	EntityNamePrefix pulumi.StringPtrInput `pulumi:"entityNamePrefix"`
	// Optional. The rule should be applied to entities whose non-qualified name ends with the given suffix.
	EntityNameSuffix pulumi.StringPtrInput `pulumi:"entityNameSuffix"`
	// Optional. The rule should be applied to entities whose parent entity (fully qualified name) matches the given value. For example, if the rule applies to a table entity, the expected value should be a schema (schema). If the rule applies to a column or index entity, the expected value can be either a schema (schema) or a table (schema.table)
	ParentEntity pulumi.StringPtrInput `pulumi:"parentEntity"`
}

func (MappingRuleFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingRuleFilter)(nil)).Elem()
}

func (i MappingRuleFilterArgs) ToMappingRuleFilterOutput() MappingRuleFilterOutput {
	return i.ToMappingRuleFilterOutputWithContext(context.Background())
}

func (i MappingRuleFilterArgs) ToMappingRuleFilterOutputWithContext(ctx context.Context) MappingRuleFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingRuleFilterOutput)
}

// A filter defining the entities that a mapping rule should be applied to. When more than one field is specified, the rule is applied only to entities which match all the fields.
type MappingRuleFilterOutput struct{ *pulumi.OutputState }

func (MappingRuleFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingRuleFilter)(nil)).Elem()
}

func (o MappingRuleFilterOutput) ToMappingRuleFilterOutput() MappingRuleFilterOutput {
	return o
}

func (o MappingRuleFilterOutput) ToMappingRuleFilterOutputWithContext(ctx context.Context) MappingRuleFilterOutput {
	return o
}

// Optional. The rule should be applied to specific entities defined by their fully qualified names.
func (o MappingRuleFilterOutput) Entities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MappingRuleFilter) []string { return v.Entities }).(pulumi.StringArrayOutput)
}

// Optional. The rule should be applied to entities whose non-qualified name contains the given string.
func (o MappingRuleFilterOutput) EntityNameContains() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MappingRuleFilter) *string { return v.EntityNameContains }).(pulumi.StringPtrOutput)
}

// Optional. The rule should be applied to entities whose non-qualified name starts with the given prefix.
func (o MappingRuleFilterOutput) EntityNamePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MappingRuleFilter) *string { return v.EntityNamePrefix }).(pulumi.StringPtrOutput)
}

// Optional. The rule should be applied to entities whose non-qualified name ends with the given suffix.
func (o MappingRuleFilterOutput) EntityNameSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MappingRuleFilter) *string { return v.EntityNameSuffix }).(pulumi.StringPtrOutput)
}

// Optional. The rule should be applied to entities whose parent entity (fully qualified name) matches the given value. For example, if the rule applies to a table entity, the expected value should be a schema (schema). If the rule applies to a column or index entity, the expected value can be either a schema (schema) or a table (schema.table)
func (o MappingRuleFilterOutput) ParentEntity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MappingRuleFilter) *string { return v.ParentEntity }).(pulumi.StringPtrOutput)
}

// A filter defining the entities that a mapping rule should be applied to. When more than one field is specified, the rule is applied only to entities which match all the fields.
type MappingRuleFilterResponse struct {
	// Optional. The rule should be applied to specific entities defined by their fully qualified names.
	Entities []string `pulumi:"entities"`
	// Optional. The rule should be applied to entities whose non-qualified name contains the given string.
	EntityNameContains string `pulumi:"entityNameContains"`
	// Optional. The rule should be applied to entities whose non-qualified name starts with the given prefix.
	EntityNamePrefix string `pulumi:"entityNamePrefix"`
	// Optional. The rule should be applied to entities whose non-qualified name ends with the given suffix.
	EntityNameSuffix string `pulumi:"entityNameSuffix"`
	// Optional. The rule should be applied to entities whose parent entity (fully qualified name) matches the given value. For example, if the rule applies to a table entity, the expected value should be a schema (schema). If the rule applies to a column or index entity, the expected value can be either a schema (schema) or a table (schema.table)
	ParentEntity string `pulumi:"parentEntity"`
}

// A filter defining the entities that a mapping rule should be applied to. When more than one field is specified, the rule is applied only to entities which match all the fields.
type MappingRuleFilterResponseOutput struct{ *pulumi.OutputState }

func (MappingRuleFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingRuleFilterResponse)(nil)).Elem()
}

func (o MappingRuleFilterResponseOutput) ToMappingRuleFilterResponseOutput() MappingRuleFilterResponseOutput {
	return o
}

func (o MappingRuleFilterResponseOutput) ToMappingRuleFilterResponseOutputWithContext(ctx context.Context) MappingRuleFilterResponseOutput {
	return o
}

// Optional. The rule should be applied to specific entities defined by their fully qualified names.
func (o MappingRuleFilterResponseOutput) Entities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MappingRuleFilterResponse) []string { return v.Entities }).(pulumi.StringArrayOutput)
}

// Optional. The rule should be applied to entities whose non-qualified name contains the given string.
func (o MappingRuleFilterResponseOutput) EntityNameContains() pulumi.StringOutput {
	return o.ApplyT(func(v MappingRuleFilterResponse) string { return v.EntityNameContains }).(pulumi.StringOutput)
}

// Optional. The rule should be applied to entities whose non-qualified name starts with the given prefix.
func (o MappingRuleFilterResponseOutput) EntityNamePrefix() pulumi.StringOutput {
	return o.ApplyT(func(v MappingRuleFilterResponse) string { return v.EntityNamePrefix }).(pulumi.StringOutput)
}

// Optional. The rule should be applied to entities whose non-qualified name ends with the given suffix.
func (o MappingRuleFilterResponseOutput) EntityNameSuffix() pulumi.StringOutput {
	return o.ApplyT(func(v MappingRuleFilterResponse) string { return v.EntityNameSuffix }).(pulumi.StringOutput)
}

// Optional. The rule should be applied to entities whose parent entity (fully qualified name) matches the given value. For example, if the rule applies to a table entity, the expected value should be a schema (schema). If the rule applies to a column or index entity, the expected value can be either a schema (schema) or a table (schema.table)
func (o MappingRuleFilterResponseOutput) ParentEntity() pulumi.StringOutput {
	return o.ApplyT(func(v MappingRuleFilterResponse) string { return v.ParentEntity }).(pulumi.StringOutput)
}

// Options to configure rule type MultiColumnDatatypeChange. The rule is used to change the data type and associated properties of multiple columns at once. The rule filter field can refer to one or more entities. The rule scope can be one of:Column. This rule requires additional filters to be specified beyond the basic rule filter field, which is the source data type, but the rule supports additional filtering capabilities such as the minimum and maximum field length. All additional filters which are specified are required to be met in order for the rule to be applied (logical AND between the fields).
type MultiColumnDatatypeChange struct {
	// Optional. Custom engine specific features.
	CustomFeatures map[string]interface{} `pulumi:"customFeatures"`
	// New data type.
	NewDataType string `pulumi:"newDataType"`
	// Optional. Column fractional seconds precision - used only for timestamp based datatypes - if not specified and relevant uses the source column fractional seconds precision.
	OverrideFractionalSecondsPrecision *int `pulumi:"overrideFractionalSecondsPrecision"`
	// Optional. Column length - e.g. varchar (50) - if not specified and relevant uses the source column length.
	OverrideLength *string `pulumi:"overrideLength"`
	// Optional. Column precision - when relevant - if not specified and relevant uses the source column precision.
	OverridePrecision *int `pulumi:"overridePrecision"`
	// Optional. Column scale - when relevant - if not specified and relevant uses the source column scale.
	OverrideScale *int `pulumi:"overrideScale"`
	// Filter on source data type.
	SourceDataTypeFilter string `pulumi:"sourceDataTypeFilter"`
	// Optional. Filter for fixed point number data types such as NUMERIC/NUMBER.
	SourceNumericFilter *SourceNumericFilter `pulumi:"sourceNumericFilter"`
	// Optional. Filter for text-based data types like varchar.
	SourceTextFilter *SourceTextFilter `pulumi:"sourceTextFilter"`
}

// MultiColumnDatatypeChangeInput is an input type that accepts MultiColumnDatatypeChangeArgs and MultiColumnDatatypeChangeOutput values.
// You can construct a concrete instance of `MultiColumnDatatypeChangeInput` via:
//
//	MultiColumnDatatypeChangeArgs{...}
type MultiColumnDatatypeChangeInput interface {
	pulumi.Input

	ToMultiColumnDatatypeChangeOutput() MultiColumnDatatypeChangeOutput
	ToMultiColumnDatatypeChangeOutputWithContext(context.Context) MultiColumnDatatypeChangeOutput
}

// Options to configure rule type MultiColumnDatatypeChange. The rule is used to change the data type and associated properties of multiple columns at once. The rule filter field can refer to one or more entities. The rule scope can be one of:Column. This rule requires additional filters to be specified beyond the basic rule filter field, which is the source data type, but the rule supports additional filtering capabilities such as the minimum and maximum field length. All additional filters which are specified are required to be met in order for the rule to be applied (logical AND between the fields).
type MultiColumnDatatypeChangeArgs struct {
	// Optional. Custom engine specific features.
	CustomFeatures pulumi.MapInput `pulumi:"customFeatures"`
	// New data type.
	NewDataType pulumi.StringInput `pulumi:"newDataType"`
	// Optional. Column fractional seconds precision - used only for timestamp based datatypes - if not specified and relevant uses the source column fractional seconds precision.
	OverrideFractionalSecondsPrecision pulumi.IntPtrInput `pulumi:"overrideFractionalSecondsPrecision"`
	// Optional. Column length - e.g. varchar (50) - if not specified and relevant uses the source column length.
	OverrideLength pulumi.StringPtrInput `pulumi:"overrideLength"`
	// Optional. Column precision - when relevant - if not specified and relevant uses the source column precision.
	OverridePrecision pulumi.IntPtrInput `pulumi:"overridePrecision"`
	// Optional. Column scale - when relevant - if not specified and relevant uses the source column scale.
	OverrideScale pulumi.IntPtrInput `pulumi:"overrideScale"`
	// Filter on source data type.
	SourceDataTypeFilter pulumi.StringInput `pulumi:"sourceDataTypeFilter"`
	// Optional. Filter for fixed point number data types such as NUMERIC/NUMBER.
	SourceNumericFilter SourceNumericFilterPtrInput `pulumi:"sourceNumericFilter"`
	// Optional. Filter for text-based data types like varchar.
	SourceTextFilter SourceTextFilterPtrInput `pulumi:"sourceTextFilter"`
}

func (MultiColumnDatatypeChangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiColumnDatatypeChange)(nil)).Elem()
}

func (i MultiColumnDatatypeChangeArgs) ToMultiColumnDatatypeChangeOutput() MultiColumnDatatypeChangeOutput {
	return i.ToMultiColumnDatatypeChangeOutputWithContext(context.Background())
}

func (i MultiColumnDatatypeChangeArgs) ToMultiColumnDatatypeChangeOutputWithContext(ctx context.Context) MultiColumnDatatypeChangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiColumnDatatypeChangeOutput)
}

func (i MultiColumnDatatypeChangeArgs) ToMultiColumnDatatypeChangePtrOutput() MultiColumnDatatypeChangePtrOutput {
	return i.ToMultiColumnDatatypeChangePtrOutputWithContext(context.Background())
}

func (i MultiColumnDatatypeChangeArgs) ToMultiColumnDatatypeChangePtrOutputWithContext(ctx context.Context) MultiColumnDatatypeChangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiColumnDatatypeChangeOutput).ToMultiColumnDatatypeChangePtrOutputWithContext(ctx)
}

// MultiColumnDatatypeChangePtrInput is an input type that accepts MultiColumnDatatypeChangeArgs, MultiColumnDatatypeChangePtr and MultiColumnDatatypeChangePtrOutput values.
// You can construct a concrete instance of `MultiColumnDatatypeChangePtrInput` via:
//
//	        MultiColumnDatatypeChangeArgs{...}
//
//	or:
//
//	        nil
type MultiColumnDatatypeChangePtrInput interface {
	pulumi.Input

	ToMultiColumnDatatypeChangePtrOutput() MultiColumnDatatypeChangePtrOutput
	ToMultiColumnDatatypeChangePtrOutputWithContext(context.Context) MultiColumnDatatypeChangePtrOutput
}

type multiColumnDatatypeChangePtrType MultiColumnDatatypeChangeArgs

func MultiColumnDatatypeChangePtr(v *MultiColumnDatatypeChangeArgs) MultiColumnDatatypeChangePtrInput {
	return (*multiColumnDatatypeChangePtrType)(v)
}

func (*multiColumnDatatypeChangePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MultiColumnDatatypeChange)(nil)).Elem()
}

func (i *multiColumnDatatypeChangePtrType) ToMultiColumnDatatypeChangePtrOutput() MultiColumnDatatypeChangePtrOutput {
	return i.ToMultiColumnDatatypeChangePtrOutputWithContext(context.Background())
}

func (i *multiColumnDatatypeChangePtrType) ToMultiColumnDatatypeChangePtrOutputWithContext(ctx context.Context) MultiColumnDatatypeChangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiColumnDatatypeChangePtrOutput)
}

// Options to configure rule type MultiColumnDatatypeChange. The rule is used to change the data type and associated properties of multiple columns at once. The rule filter field can refer to one or more entities. The rule scope can be one of:Column. This rule requires additional filters to be specified beyond the basic rule filter field, which is the source data type, but the rule supports additional filtering capabilities such as the minimum and maximum field length. All additional filters which are specified are required to be met in order for the rule to be applied (logical AND between the fields).
type MultiColumnDatatypeChangeOutput struct{ *pulumi.OutputState }

func (MultiColumnDatatypeChangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiColumnDatatypeChange)(nil)).Elem()
}

func (o MultiColumnDatatypeChangeOutput) ToMultiColumnDatatypeChangeOutput() MultiColumnDatatypeChangeOutput {
	return o
}

func (o MultiColumnDatatypeChangeOutput) ToMultiColumnDatatypeChangeOutputWithContext(ctx context.Context) MultiColumnDatatypeChangeOutput {
	return o
}

func (o MultiColumnDatatypeChangeOutput) ToMultiColumnDatatypeChangePtrOutput() MultiColumnDatatypeChangePtrOutput {
	return o.ToMultiColumnDatatypeChangePtrOutputWithContext(context.Background())
}

func (o MultiColumnDatatypeChangeOutput) ToMultiColumnDatatypeChangePtrOutputWithContext(ctx context.Context) MultiColumnDatatypeChangePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MultiColumnDatatypeChange) *MultiColumnDatatypeChange {
		return &v
	}).(MultiColumnDatatypeChangePtrOutput)
}

// Optional. Custom engine specific features.
func (o MultiColumnDatatypeChangeOutput) CustomFeatures() pulumi.MapOutput {
	return o.ApplyT(func(v MultiColumnDatatypeChange) map[string]interface{} { return v.CustomFeatures }).(pulumi.MapOutput)
}

// New data type.
func (o MultiColumnDatatypeChangeOutput) NewDataType() pulumi.StringOutput {
	return o.ApplyT(func(v MultiColumnDatatypeChange) string { return v.NewDataType }).(pulumi.StringOutput)
}

// Optional. Column fractional seconds precision - used only for timestamp based datatypes - if not specified and relevant uses the source column fractional seconds precision.
func (o MultiColumnDatatypeChangeOutput) OverrideFractionalSecondsPrecision() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MultiColumnDatatypeChange) *int { return v.OverrideFractionalSecondsPrecision }).(pulumi.IntPtrOutput)
}

// Optional. Column length - e.g. varchar (50) - if not specified and relevant uses the source column length.
func (o MultiColumnDatatypeChangeOutput) OverrideLength() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MultiColumnDatatypeChange) *string { return v.OverrideLength }).(pulumi.StringPtrOutput)
}

// Optional. Column precision - when relevant - if not specified and relevant uses the source column precision.
func (o MultiColumnDatatypeChangeOutput) OverridePrecision() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MultiColumnDatatypeChange) *int { return v.OverridePrecision }).(pulumi.IntPtrOutput)
}

// Optional. Column scale - when relevant - if not specified and relevant uses the source column scale.
func (o MultiColumnDatatypeChangeOutput) OverrideScale() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MultiColumnDatatypeChange) *int { return v.OverrideScale }).(pulumi.IntPtrOutput)
}

// Filter on source data type.
func (o MultiColumnDatatypeChangeOutput) SourceDataTypeFilter() pulumi.StringOutput {
	return o.ApplyT(func(v MultiColumnDatatypeChange) string { return v.SourceDataTypeFilter }).(pulumi.StringOutput)
}

// Optional. Filter for fixed point number data types such as NUMERIC/NUMBER.
func (o MultiColumnDatatypeChangeOutput) SourceNumericFilter() SourceNumericFilterPtrOutput {
	return o.ApplyT(func(v MultiColumnDatatypeChange) *SourceNumericFilter { return v.SourceNumericFilter }).(SourceNumericFilterPtrOutput)
}

// Optional. Filter for text-based data types like varchar.
func (o MultiColumnDatatypeChangeOutput) SourceTextFilter() SourceTextFilterPtrOutput {
	return o.ApplyT(func(v MultiColumnDatatypeChange) *SourceTextFilter { return v.SourceTextFilter }).(SourceTextFilterPtrOutput)
}

type MultiColumnDatatypeChangePtrOutput struct{ *pulumi.OutputState }

func (MultiColumnDatatypeChangePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MultiColumnDatatypeChange)(nil)).Elem()
}

func (o MultiColumnDatatypeChangePtrOutput) ToMultiColumnDatatypeChangePtrOutput() MultiColumnDatatypeChangePtrOutput {
	return o
}

func (o MultiColumnDatatypeChangePtrOutput) ToMultiColumnDatatypeChangePtrOutputWithContext(ctx context.Context) MultiColumnDatatypeChangePtrOutput {
	return o
}

func (o MultiColumnDatatypeChangePtrOutput) Elem() MultiColumnDatatypeChangeOutput {
	return o.ApplyT(func(v *MultiColumnDatatypeChange) MultiColumnDatatypeChange {
		if v != nil {
			return *v
		}
		var ret MultiColumnDatatypeChange
		return ret
	}).(MultiColumnDatatypeChangeOutput)
}

// Optional. Custom engine specific features.
func (o MultiColumnDatatypeChangePtrOutput) CustomFeatures() pulumi.MapOutput {
	return o.ApplyT(func(v *MultiColumnDatatypeChange) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.CustomFeatures
	}).(pulumi.MapOutput)
}

// New data type.
func (o MultiColumnDatatypeChangePtrOutput) NewDataType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MultiColumnDatatypeChange) *string {
		if v == nil {
			return nil
		}
		return &v.NewDataType
	}).(pulumi.StringPtrOutput)
}

// Optional. Column fractional seconds precision - used only for timestamp based datatypes - if not specified and relevant uses the source column fractional seconds precision.
func (o MultiColumnDatatypeChangePtrOutput) OverrideFractionalSecondsPrecision() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MultiColumnDatatypeChange) *int {
		if v == nil {
			return nil
		}
		return v.OverrideFractionalSecondsPrecision
	}).(pulumi.IntPtrOutput)
}

// Optional. Column length - e.g. varchar (50) - if not specified and relevant uses the source column length.
func (o MultiColumnDatatypeChangePtrOutput) OverrideLength() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MultiColumnDatatypeChange) *string {
		if v == nil {
			return nil
		}
		return v.OverrideLength
	}).(pulumi.StringPtrOutput)
}

// Optional. Column precision - when relevant - if not specified and relevant uses the source column precision.
func (o MultiColumnDatatypeChangePtrOutput) OverridePrecision() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MultiColumnDatatypeChange) *int {
		if v == nil {
			return nil
		}
		return v.OverridePrecision
	}).(pulumi.IntPtrOutput)
}

// Optional. Column scale - when relevant - if not specified and relevant uses the source column scale.
func (o MultiColumnDatatypeChangePtrOutput) OverrideScale() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MultiColumnDatatypeChange) *int {
		if v == nil {
			return nil
		}
		return v.OverrideScale
	}).(pulumi.IntPtrOutput)
}

// Filter on source data type.
func (o MultiColumnDatatypeChangePtrOutput) SourceDataTypeFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MultiColumnDatatypeChange) *string {
		if v == nil {
			return nil
		}
		return &v.SourceDataTypeFilter
	}).(pulumi.StringPtrOutput)
}

// Optional. Filter for fixed point number data types such as NUMERIC/NUMBER.
func (o MultiColumnDatatypeChangePtrOutput) SourceNumericFilter() SourceNumericFilterPtrOutput {
	return o.ApplyT(func(v *MultiColumnDatatypeChange) *SourceNumericFilter {
		if v == nil {
			return nil
		}
		return v.SourceNumericFilter
	}).(SourceNumericFilterPtrOutput)
}

// Optional. Filter for text-based data types like varchar.
func (o MultiColumnDatatypeChangePtrOutput) SourceTextFilter() SourceTextFilterPtrOutput {
	return o.ApplyT(func(v *MultiColumnDatatypeChange) *SourceTextFilter {
		if v == nil {
			return nil
		}
		return v.SourceTextFilter
	}).(SourceTextFilterPtrOutput)
}

// Options to configure rule type MultiColumnDatatypeChange. The rule is used to change the data type and associated properties of multiple columns at once. The rule filter field can refer to one or more entities. The rule scope can be one of:Column. This rule requires additional filters to be specified beyond the basic rule filter field, which is the source data type, but the rule supports additional filtering capabilities such as the minimum and maximum field length. All additional filters which are specified are required to be met in order for the rule to be applied (logical AND between the fields).
type MultiColumnDatatypeChangeResponse struct {
	// Optional. Custom engine specific features.
	CustomFeatures map[string]interface{} `pulumi:"customFeatures"`
	// New data type.
	NewDataType string `pulumi:"newDataType"`
	// Optional. Column fractional seconds precision - used only for timestamp based datatypes - if not specified and relevant uses the source column fractional seconds precision.
	OverrideFractionalSecondsPrecision int `pulumi:"overrideFractionalSecondsPrecision"`
	// Optional. Column length - e.g. varchar (50) - if not specified and relevant uses the source column length.
	OverrideLength string `pulumi:"overrideLength"`
	// Optional. Column precision - when relevant - if not specified and relevant uses the source column precision.
	OverridePrecision int `pulumi:"overridePrecision"`
	// Optional. Column scale - when relevant - if not specified and relevant uses the source column scale.
	OverrideScale int `pulumi:"overrideScale"`
	// Filter on source data type.
	SourceDataTypeFilter string `pulumi:"sourceDataTypeFilter"`
	// Optional. Filter for fixed point number data types such as NUMERIC/NUMBER.
	SourceNumericFilter SourceNumericFilterResponse `pulumi:"sourceNumericFilter"`
	// Optional. Filter for text-based data types like varchar.
	SourceTextFilter SourceTextFilterResponse `pulumi:"sourceTextFilter"`
}

// Options to configure rule type MultiColumnDatatypeChange. The rule is used to change the data type and associated properties of multiple columns at once. The rule filter field can refer to one or more entities. The rule scope can be one of:Column. This rule requires additional filters to be specified beyond the basic rule filter field, which is the source data type, but the rule supports additional filtering capabilities such as the minimum and maximum field length. All additional filters which are specified are required to be met in order for the rule to be applied (logical AND between the fields).
type MultiColumnDatatypeChangeResponseOutput struct{ *pulumi.OutputState }

func (MultiColumnDatatypeChangeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiColumnDatatypeChangeResponse)(nil)).Elem()
}

func (o MultiColumnDatatypeChangeResponseOutput) ToMultiColumnDatatypeChangeResponseOutput() MultiColumnDatatypeChangeResponseOutput {
	return o
}

func (o MultiColumnDatatypeChangeResponseOutput) ToMultiColumnDatatypeChangeResponseOutputWithContext(ctx context.Context) MultiColumnDatatypeChangeResponseOutput {
	return o
}

// Optional. Custom engine specific features.
func (o MultiColumnDatatypeChangeResponseOutput) CustomFeatures() pulumi.MapOutput {
	return o.ApplyT(func(v MultiColumnDatatypeChangeResponse) map[string]interface{} { return v.CustomFeatures }).(pulumi.MapOutput)
}

// New data type.
func (o MultiColumnDatatypeChangeResponseOutput) NewDataType() pulumi.StringOutput {
	return o.ApplyT(func(v MultiColumnDatatypeChangeResponse) string { return v.NewDataType }).(pulumi.StringOutput)
}

// Optional. Column fractional seconds precision - used only for timestamp based datatypes - if not specified and relevant uses the source column fractional seconds precision.
func (o MultiColumnDatatypeChangeResponseOutput) OverrideFractionalSecondsPrecision() pulumi.IntOutput {
	return o.ApplyT(func(v MultiColumnDatatypeChangeResponse) int { return v.OverrideFractionalSecondsPrecision }).(pulumi.IntOutput)
}

// Optional. Column length - e.g. varchar (50) - if not specified and relevant uses the source column length.
func (o MultiColumnDatatypeChangeResponseOutput) OverrideLength() pulumi.StringOutput {
	return o.ApplyT(func(v MultiColumnDatatypeChangeResponse) string { return v.OverrideLength }).(pulumi.StringOutput)
}

// Optional. Column precision - when relevant - if not specified and relevant uses the source column precision.
func (o MultiColumnDatatypeChangeResponseOutput) OverridePrecision() pulumi.IntOutput {
	return o.ApplyT(func(v MultiColumnDatatypeChangeResponse) int { return v.OverridePrecision }).(pulumi.IntOutput)
}

// Optional. Column scale - when relevant - if not specified and relevant uses the source column scale.
func (o MultiColumnDatatypeChangeResponseOutput) OverrideScale() pulumi.IntOutput {
	return o.ApplyT(func(v MultiColumnDatatypeChangeResponse) int { return v.OverrideScale }).(pulumi.IntOutput)
}

// Filter on source data type.
func (o MultiColumnDatatypeChangeResponseOutput) SourceDataTypeFilter() pulumi.StringOutput {
	return o.ApplyT(func(v MultiColumnDatatypeChangeResponse) string { return v.SourceDataTypeFilter }).(pulumi.StringOutput)
}

// Optional. Filter for fixed point number data types such as NUMERIC/NUMBER.
func (o MultiColumnDatatypeChangeResponseOutput) SourceNumericFilter() SourceNumericFilterResponseOutput {
	return o.ApplyT(func(v MultiColumnDatatypeChangeResponse) SourceNumericFilterResponse { return v.SourceNumericFilter }).(SourceNumericFilterResponseOutput)
}

// Optional. Filter for text-based data types like varchar.
func (o MultiColumnDatatypeChangeResponseOutput) SourceTextFilter() SourceTextFilterResponseOutput {
	return o.ApplyT(func(v MultiColumnDatatypeChangeResponse) SourceTextFilterResponse { return v.SourceTextFilter }).(SourceTextFilterResponseOutput)
}

// Options to configure rule type MultiEntityRename. The rule is used to rename multiple entities. The rule filter field can refer to one or more entities. The rule scope can be one of: Database, Schema, Table, Column, Constraint, Index, View, Function, Stored Procedure, Materialized View, Sequence, UDT
type MultiEntityRename struct {
	// Optional. The pattern used to generate the new entity's name. This pattern must include the characters '{name}', which will be replaced with the name of the original entity. For example, the pattern 't_{name}' for an entity name jobs would be converted to 't_jobs'. If unspecified, the default value for this field is '{name}'
	NewNamePattern *string `pulumi:"newNamePattern"`
	// Optional. Additional transformation that can be done on the source entity name before it is being used by the new_name_pattern, for example lower case. If no transformation is desired, use NO_TRANSFORMATION
	SourceNameTransformation *MultiEntityRenameSourceNameTransformation `pulumi:"sourceNameTransformation"`
}

// MultiEntityRenameInput is an input type that accepts MultiEntityRenameArgs and MultiEntityRenameOutput values.
// You can construct a concrete instance of `MultiEntityRenameInput` via:
//
//	MultiEntityRenameArgs{...}
type MultiEntityRenameInput interface {
	pulumi.Input

	ToMultiEntityRenameOutput() MultiEntityRenameOutput
	ToMultiEntityRenameOutputWithContext(context.Context) MultiEntityRenameOutput
}

// Options to configure rule type MultiEntityRename. The rule is used to rename multiple entities. The rule filter field can refer to one or more entities. The rule scope can be one of: Database, Schema, Table, Column, Constraint, Index, View, Function, Stored Procedure, Materialized View, Sequence, UDT
type MultiEntityRenameArgs struct {
	// Optional. The pattern used to generate the new entity's name. This pattern must include the characters '{name}', which will be replaced with the name of the original entity. For example, the pattern 't_{name}' for an entity name jobs would be converted to 't_jobs'. If unspecified, the default value for this field is '{name}'
	NewNamePattern pulumi.StringPtrInput `pulumi:"newNamePattern"`
	// Optional. Additional transformation that can be done on the source entity name before it is being used by the new_name_pattern, for example lower case. If no transformation is desired, use NO_TRANSFORMATION
	SourceNameTransformation MultiEntityRenameSourceNameTransformationPtrInput `pulumi:"sourceNameTransformation"`
}

func (MultiEntityRenameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiEntityRename)(nil)).Elem()
}

func (i MultiEntityRenameArgs) ToMultiEntityRenameOutput() MultiEntityRenameOutput {
	return i.ToMultiEntityRenameOutputWithContext(context.Background())
}

func (i MultiEntityRenameArgs) ToMultiEntityRenameOutputWithContext(ctx context.Context) MultiEntityRenameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiEntityRenameOutput)
}

func (i MultiEntityRenameArgs) ToMultiEntityRenamePtrOutput() MultiEntityRenamePtrOutput {
	return i.ToMultiEntityRenamePtrOutputWithContext(context.Background())
}

func (i MultiEntityRenameArgs) ToMultiEntityRenamePtrOutputWithContext(ctx context.Context) MultiEntityRenamePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiEntityRenameOutput).ToMultiEntityRenamePtrOutputWithContext(ctx)
}

// MultiEntityRenamePtrInput is an input type that accepts MultiEntityRenameArgs, MultiEntityRenamePtr and MultiEntityRenamePtrOutput values.
// You can construct a concrete instance of `MultiEntityRenamePtrInput` via:
//
//	        MultiEntityRenameArgs{...}
//
//	or:
//
//	        nil
type MultiEntityRenamePtrInput interface {
	pulumi.Input

	ToMultiEntityRenamePtrOutput() MultiEntityRenamePtrOutput
	ToMultiEntityRenamePtrOutputWithContext(context.Context) MultiEntityRenamePtrOutput
}

type multiEntityRenamePtrType MultiEntityRenameArgs

func MultiEntityRenamePtr(v *MultiEntityRenameArgs) MultiEntityRenamePtrInput {
	return (*multiEntityRenamePtrType)(v)
}

func (*multiEntityRenamePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MultiEntityRename)(nil)).Elem()
}

func (i *multiEntityRenamePtrType) ToMultiEntityRenamePtrOutput() MultiEntityRenamePtrOutput {
	return i.ToMultiEntityRenamePtrOutputWithContext(context.Background())
}

func (i *multiEntityRenamePtrType) ToMultiEntityRenamePtrOutputWithContext(ctx context.Context) MultiEntityRenamePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiEntityRenamePtrOutput)
}

// Options to configure rule type MultiEntityRename. The rule is used to rename multiple entities. The rule filter field can refer to one or more entities. The rule scope can be one of: Database, Schema, Table, Column, Constraint, Index, View, Function, Stored Procedure, Materialized View, Sequence, UDT
type MultiEntityRenameOutput struct{ *pulumi.OutputState }

func (MultiEntityRenameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiEntityRename)(nil)).Elem()
}

func (o MultiEntityRenameOutput) ToMultiEntityRenameOutput() MultiEntityRenameOutput {
	return o
}

func (o MultiEntityRenameOutput) ToMultiEntityRenameOutputWithContext(ctx context.Context) MultiEntityRenameOutput {
	return o
}

func (o MultiEntityRenameOutput) ToMultiEntityRenamePtrOutput() MultiEntityRenamePtrOutput {
	return o.ToMultiEntityRenamePtrOutputWithContext(context.Background())
}

func (o MultiEntityRenameOutput) ToMultiEntityRenamePtrOutputWithContext(ctx context.Context) MultiEntityRenamePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MultiEntityRename) *MultiEntityRename {
		return &v
	}).(MultiEntityRenamePtrOutput)
}

// Optional. The pattern used to generate the new entity's name. This pattern must include the characters '{name}', which will be replaced with the name of the original entity. For example, the pattern 't_{name}' for an entity name jobs would be converted to 't_jobs'. If unspecified, the default value for this field is '{name}'
func (o MultiEntityRenameOutput) NewNamePattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MultiEntityRename) *string { return v.NewNamePattern }).(pulumi.StringPtrOutput)
}

// Optional. Additional transformation that can be done on the source entity name before it is being used by the new_name_pattern, for example lower case. If no transformation is desired, use NO_TRANSFORMATION
func (o MultiEntityRenameOutput) SourceNameTransformation() MultiEntityRenameSourceNameTransformationPtrOutput {
	return o.ApplyT(func(v MultiEntityRename) *MultiEntityRenameSourceNameTransformation {
		return v.SourceNameTransformation
	}).(MultiEntityRenameSourceNameTransformationPtrOutput)
}

type MultiEntityRenamePtrOutput struct{ *pulumi.OutputState }

func (MultiEntityRenamePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MultiEntityRename)(nil)).Elem()
}

func (o MultiEntityRenamePtrOutput) ToMultiEntityRenamePtrOutput() MultiEntityRenamePtrOutput {
	return o
}

func (o MultiEntityRenamePtrOutput) ToMultiEntityRenamePtrOutputWithContext(ctx context.Context) MultiEntityRenamePtrOutput {
	return o
}

func (o MultiEntityRenamePtrOutput) Elem() MultiEntityRenameOutput {
	return o.ApplyT(func(v *MultiEntityRename) MultiEntityRename {
		if v != nil {
			return *v
		}
		var ret MultiEntityRename
		return ret
	}).(MultiEntityRenameOutput)
}

// Optional. The pattern used to generate the new entity's name. This pattern must include the characters '{name}', which will be replaced with the name of the original entity. For example, the pattern 't_{name}' for an entity name jobs would be converted to 't_jobs'. If unspecified, the default value for this field is '{name}'
func (o MultiEntityRenamePtrOutput) NewNamePattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MultiEntityRename) *string {
		if v == nil {
			return nil
		}
		return v.NewNamePattern
	}).(pulumi.StringPtrOutput)
}

// Optional. Additional transformation that can be done on the source entity name before it is being used by the new_name_pattern, for example lower case. If no transformation is desired, use NO_TRANSFORMATION
func (o MultiEntityRenamePtrOutput) SourceNameTransformation() MultiEntityRenameSourceNameTransformationPtrOutput {
	return o.ApplyT(func(v *MultiEntityRename) *MultiEntityRenameSourceNameTransformation {
		if v == nil {
			return nil
		}
		return v.SourceNameTransformation
	}).(MultiEntityRenameSourceNameTransformationPtrOutput)
}

// Options to configure rule type MultiEntityRename. The rule is used to rename multiple entities. The rule filter field can refer to one or more entities. The rule scope can be one of: Database, Schema, Table, Column, Constraint, Index, View, Function, Stored Procedure, Materialized View, Sequence, UDT
type MultiEntityRenameResponse struct {
	// Optional. The pattern used to generate the new entity's name. This pattern must include the characters '{name}', which will be replaced with the name of the original entity. For example, the pattern 't_{name}' for an entity name jobs would be converted to 't_jobs'. If unspecified, the default value for this field is '{name}'
	NewNamePattern string `pulumi:"newNamePattern"`
	// Optional. Additional transformation that can be done on the source entity name before it is being used by the new_name_pattern, for example lower case. If no transformation is desired, use NO_TRANSFORMATION
	SourceNameTransformation string `pulumi:"sourceNameTransformation"`
}

// Options to configure rule type MultiEntityRename. The rule is used to rename multiple entities. The rule filter field can refer to one or more entities. The rule scope can be one of: Database, Schema, Table, Column, Constraint, Index, View, Function, Stored Procedure, Materialized View, Sequence, UDT
type MultiEntityRenameResponseOutput struct{ *pulumi.OutputState }

func (MultiEntityRenameResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiEntityRenameResponse)(nil)).Elem()
}

func (o MultiEntityRenameResponseOutput) ToMultiEntityRenameResponseOutput() MultiEntityRenameResponseOutput {
	return o
}

func (o MultiEntityRenameResponseOutput) ToMultiEntityRenameResponseOutputWithContext(ctx context.Context) MultiEntityRenameResponseOutput {
	return o
}

// Optional. The pattern used to generate the new entity's name. This pattern must include the characters '{name}', which will be replaced with the name of the original entity. For example, the pattern 't_{name}' for an entity name jobs would be converted to 't_jobs'. If unspecified, the default value for this field is '{name}'
func (o MultiEntityRenameResponseOutput) NewNamePattern() pulumi.StringOutput {
	return o.ApplyT(func(v MultiEntityRenameResponse) string { return v.NewNamePattern }).(pulumi.StringOutput)
}

// Optional. Additional transformation that can be done on the source entity name before it is being used by the new_name_pattern, for example lower case. If no transformation is desired, use NO_TRANSFORMATION
func (o MultiEntityRenameResponseOutput) SourceNameTransformation() pulumi.StringOutput {
	return o.ApplyT(func(v MultiEntityRenameResponse) string { return v.SourceNameTransformation }).(pulumi.StringOutput)
}

// Specifies connection parameters required specifically for MySQL databases.
type MySqlConnectionProfile struct {
	// If the source is a Cloud SQL database, use this field to provide the Cloud SQL instance ID of the source.
	CloudSqlId *string `pulumi:"cloudSqlId"`
	// The IP or hostname of the source MySQL database.
	Host string `pulumi:"host"`
	// Input only. The password for the user that Database Migration Service will be using to connect to the database. This field is not returned on request, and the value is encrypted when stored in Database Migration Service.
	Password string `pulumi:"password"`
	// The network port of the source MySQL database.
	Port int `pulumi:"port"`
	// SSL configuration for the destination to connect to the source database.
	Ssl *SslConfig `pulumi:"ssl"`
	// The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.
	Username string `pulumi:"username"`
}

// MySqlConnectionProfileInput is an input type that accepts MySqlConnectionProfileArgs and MySqlConnectionProfileOutput values.
// You can construct a concrete instance of `MySqlConnectionProfileInput` via:
//
//	MySqlConnectionProfileArgs{...}
type MySqlConnectionProfileInput interface {
	pulumi.Input

	ToMySqlConnectionProfileOutput() MySqlConnectionProfileOutput
	ToMySqlConnectionProfileOutputWithContext(context.Context) MySqlConnectionProfileOutput
}

// Specifies connection parameters required specifically for MySQL databases.
type MySqlConnectionProfileArgs struct {
	// If the source is a Cloud SQL database, use this field to provide the Cloud SQL instance ID of the source.
	CloudSqlId pulumi.StringPtrInput `pulumi:"cloudSqlId"`
	// The IP or hostname of the source MySQL database.
	Host pulumi.StringInput `pulumi:"host"`
	// Input only. The password for the user that Database Migration Service will be using to connect to the database. This field is not returned on request, and the value is encrypted when stored in Database Migration Service.
	Password pulumi.StringInput `pulumi:"password"`
	// The network port of the source MySQL database.
	Port pulumi.IntInput `pulumi:"port"`
	// SSL configuration for the destination to connect to the source database.
	Ssl SslConfigPtrInput `pulumi:"ssl"`
	// The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.
	Username pulumi.StringInput `pulumi:"username"`
}

func (MySqlConnectionProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MySqlConnectionProfile)(nil)).Elem()
}

func (i MySqlConnectionProfileArgs) ToMySqlConnectionProfileOutput() MySqlConnectionProfileOutput {
	return i.ToMySqlConnectionProfileOutputWithContext(context.Background())
}

func (i MySqlConnectionProfileArgs) ToMySqlConnectionProfileOutputWithContext(ctx context.Context) MySqlConnectionProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MySqlConnectionProfileOutput)
}

func (i MySqlConnectionProfileArgs) ToMySqlConnectionProfilePtrOutput() MySqlConnectionProfilePtrOutput {
	return i.ToMySqlConnectionProfilePtrOutputWithContext(context.Background())
}

func (i MySqlConnectionProfileArgs) ToMySqlConnectionProfilePtrOutputWithContext(ctx context.Context) MySqlConnectionProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MySqlConnectionProfileOutput).ToMySqlConnectionProfilePtrOutputWithContext(ctx)
}

// MySqlConnectionProfilePtrInput is an input type that accepts MySqlConnectionProfileArgs, MySqlConnectionProfilePtr and MySqlConnectionProfilePtrOutput values.
// You can construct a concrete instance of `MySqlConnectionProfilePtrInput` via:
//
//	        MySqlConnectionProfileArgs{...}
//
//	or:
//
//	        nil
type MySqlConnectionProfilePtrInput interface {
	pulumi.Input

	ToMySqlConnectionProfilePtrOutput() MySqlConnectionProfilePtrOutput
	ToMySqlConnectionProfilePtrOutputWithContext(context.Context) MySqlConnectionProfilePtrOutput
}

type mySqlConnectionProfilePtrType MySqlConnectionProfileArgs

func MySqlConnectionProfilePtr(v *MySqlConnectionProfileArgs) MySqlConnectionProfilePtrInput {
	return (*mySqlConnectionProfilePtrType)(v)
}

func (*mySqlConnectionProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MySqlConnectionProfile)(nil)).Elem()
}

func (i *mySqlConnectionProfilePtrType) ToMySqlConnectionProfilePtrOutput() MySqlConnectionProfilePtrOutput {
	return i.ToMySqlConnectionProfilePtrOutputWithContext(context.Background())
}

func (i *mySqlConnectionProfilePtrType) ToMySqlConnectionProfilePtrOutputWithContext(ctx context.Context) MySqlConnectionProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MySqlConnectionProfilePtrOutput)
}

// Specifies connection parameters required specifically for MySQL databases.
type MySqlConnectionProfileOutput struct{ *pulumi.OutputState }

func (MySqlConnectionProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MySqlConnectionProfile)(nil)).Elem()
}

func (o MySqlConnectionProfileOutput) ToMySqlConnectionProfileOutput() MySqlConnectionProfileOutput {
	return o
}

func (o MySqlConnectionProfileOutput) ToMySqlConnectionProfileOutputWithContext(ctx context.Context) MySqlConnectionProfileOutput {
	return o
}

func (o MySqlConnectionProfileOutput) ToMySqlConnectionProfilePtrOutput() MySqlConnectionProfilePtrOutput {
	return o.ToMySqlConnectionProfilePtrOutputWithContext(context.Background())
}

func (o MySqlConnectionProfileOutput) ToMySqlConnectionProfilePtrOutputWithContext(ctx context.Context) MySqlConnectionProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MySqlConnectionProfile) *MySqlConnectionProfile {
		return &v
	}).(MySqlConnectionProfilePtrOutput)
}

// If the source is a Cloud SQL database, use this field to provide the Cloud SQL instance ID of the source.
func (o MySqlConnectionProfileOutput) CloudSqlId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySqlConnectionProfile) *string { return v.CloudSqlId }).(pulumi.StringPtrOutput)
}

// The IP or hostname of the source MySQL database.
func (o MySqlConnectionProfileOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v MySqlConnectionProfile) string { return v.Host }).(pulumi.StringOutput)
}

// Input only. The password for the user that Database Migration Service will be using to connect to the database. This field is not returned on request, and the value is encrypted when stored in Database Migration Service.
func (o MySqlConnectionProfileOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v MySqlConnectionProfile) string { return v.Password }).(pulumi.StringOutput)
}

// The network port of the source MySQL database.
func (o MySqlConnectionProfileOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v MySqlConnectionProfile) int { return v.Port }).(pulumi.IntOutput)
}

// SSL configuration for the destination to connect to the source database.
func (o MySqlConnectionProfileOutput) Ssl() SslConfigPtrOutput {
	return o.ApplyT(func(v MySqlConnectionProfile) *SslConfig { return v.Ssl }).(SslConfigPtrOutput)
}

// The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.
func (o MySqlConnectionProfileOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v MySqlConnectionProfile) string { return v.Username }).(pulumi.StringOutput)
}

type MySqlConnectionProfilePtrOutput struct{ *pulumi.OutputState }

func (MySqlConnectionProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MySqlConnectionProfile)(nil)).Elem()
}

func (o MySqlConnectionProfilePtrOutput) ToMySqlConnectionProfilePtrOutput() MySqlConnectionProfilePtrOutput {
	return o
}

func (o MySqlConnectionProfilePtrOutput) ToMySqlConnectionProfilePtrOutputWithContext(ctx context.Context) MySqlConnectionProfilePtrOutput {
	return o
}

func (o MySqlConnectionProfilePtrOutput) Elem() MySqlConnectionProfileOutput {
	return o.ApplyT(func(v *MySqlConnectionProfile) MySqlConnectionProfile {
		if v != nil {
			return *v
		}
		var ret MySqlConnectionProfile
		return ret
	}).(MySqlConnectionProfileOutput)
}

// If the source is a Cloud SQL database, use this field to provide the Cloud SQL instance ID of the source.
func (o MySqlConnectionProfilePtrOutput) CloudSqlId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySqlConnectionProfile) *string {
		if v == nil {
			return nil
		}
		return v.CloudSqlId
	}).(pulumi.StringPtrOutput)
}

// The IP or hostname of the source MySQL database.
func (o MySqlConnectionProfilePtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySqlConnectionProfile) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// Input only. The password for the user that Database Migration Service will be using to connect to the database. This field is not returned on request, and the value is encrypted when stored in Database Migration Service.
func (o MySqlConnectionProfilePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySqlConnectionProfile) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// The network port of the source MySQL database.
func (o MySqlConnectionProfilePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MySqlConnectionProfile) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// SSL configuration for the destination to connect to the source database.
func (o MySqlConnectionProfilePtrOutput) Ssl() SslConfigPtrOutput {
	return o.ApplyT(func(v *MySqlConnectionProfile) *SslConfig {
		if v == nil {
			return nil
		}
		return v.Ssl
	}).(SslConfigPtrOutput)
}

// The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.
func (o MySqlConnectionProfilePtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySqlConnectionProfile) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

// Specifies connection parameters required specifically for MySQL databases.
type MySqlConnectionProfileResponse struct {
	// If the source is a Cloud SQL database, use this field to provide the Cloud SQL instance ID of the source.
	CloudSqlId string `pulumi:"cloudSqlId"`
	// The IP or hostname of the source MySQL database.
	Host string `pulumi:"host"`
	// Input only. The password for the user that Database Migration Service will be using to connect to the database. This field is not returned on request, and the value is encrypted when stored in Database Migration Service.
	Password string `pulumi:"password"`
	// Indicates If this connection profile password is stored.
	PasswordSet bool `pulumi:"passwordSet"`
	// The network port of the source MySQL database.
	Port int `pulumi:"port"`
	// SSL configuration for the destination to connect to the source database.
	Ssl SslConfigResponse `pulumi:"ssl"`
	// The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.
	Username string `pulumi:"username"`
}

// Specifies connection parameters required specifically for MySQL databases.
type MySqlConnectionProfileResponseOutput struct{ *pulumi.OutputState }

func (MySqlConnectionProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MySqlConnectionProfileResponse)(nil)).Elem()
}

func (o MySqlConnectionProfileResponseOutput) ToMySqlConnectionProfileResponseOutput() MySqlConnectionProfileResponseOutput {
	return o
}

func (o MySqlConnectionProfileResponseOutput) ToMySqlConnectionProfileResponseOutputWithContext(ctx context.Context) MySqlConnectionProfileResponseOutput {
	return o
}

// If the source is a Cloud SQL database, use this field to provide the Cloud SQL instance ID of the source.
func (o MySqlConnectionProfileResponseOutput) CloudSqlId() pulumi.StringOutput {
	return o.ApplyT(func(v MySqlConnectionProfileResponse) string { return v.CloudSqlId }).(pulumi.StringOutput)
}

// The IP or hostname of the source MySQL database.
func (o MySqlConnectionProfileResponseOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v MySqlConnectionProfileResponse) string { return v.Host }).(pulumi.StringOutput)
}

// Input only. The password for the user that Database Migration Service will be using to connect to the database. This field is not returned on request, and the value is encrypted when stored in Database Migration Service.
func (o MySqlConnectionProfileResponseOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v MySqlConnectionProfileResponse) string { return v.Password }).(pulumi.StringOutput)
}

// Indicates If this connection profile password is stored.
func (o MySqlConnectionProfileResponseOutput) PasswordSet() pulumi.BoolOutput {
	return o.ApplyT(func(v MySqlConnectionProfileResponse) bool { return v.PasswordSet }).(pulumi.BoolOutput)
}

// The network port of the source MySQL database.
func (o MySqlConnectionProfileResponseOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v MySqlConnectionProfileResponse) int { return v.Port }).(pulumi.IntOutput)
}

// SSL configuration for the destination to connect to the source database.
func (o MySqlConnectionProfileResponseOutput) Ssl() SslConfigResponseOutput {
	return o.ApplyT(func(v MySqlConnectionProfileResponse) SslConfigResponse { return v.Ssl }).(SslConfigResponseOutput)
}

// The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.
func (o MySqlConnectionProfileResponseOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v MySqlConnectionProfileResponse) string { return v.Username }).(pulumi.StringOutput)
}

// Specifies connection parameters required specifically for Oracle databases.
type OracleConnectionProfile struct {
	// Database service for the Oracle connection.
	DatabaseService string `pulumi:"databaseService"`
	// Forward SSH tunnel connectivity.
	ForwardSshConnectivity *ForwardSshTunnelConnectivity `pulumi:"forwardSshConnectivity"`
	// The IP or hostname of the source Oracle database.
	Host string `pulumi:"host"`
	// Input only. The password for the user that Database Migration Service will be using to connect to the database. This field is not returned on request, and the value is encrypted when stored in Database Migration Service.
	Password string `pulumi:"password"`
	// The network port of the source Oracle database.
	Port int `pulumi:"port"`
	// Private connectivity.
	PrivateConnectivity *PrivateConnectivity `pulumi:"privateConnectivity"`
	// SSL configuration for the connection to the source Oracle database. * Only `SERVER_ONLY` configuration is supported for Oracle SSL. * SSL is supported for Oracle versions 12 and above.
	Ssl *SslConfig `pulumi:"ssl"`
	// Static Service IP connectivity.
	StaticServiceIpConnectivity *StaticServiceIpConnectivity `pulumi:"staticServiceIpConnectivity"`
	// The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.
	Username string `pulumi:"username"`
}

// OracleConnectionProfileInput is an input type that accepts OracleConnectionProfileArgs and OracleConnectionProfileOutput values.
// You can construct a concrete instance of `OracleConnectionProfileInput` via:
//
//	OracleConnectionProfileArgs{...}
type OracleConnectionProfileInput interface {
	pulumi.Input

	ToOracleConnectionProfileOutput() OracleConnectionProfileOutput
	ToOracleConnectionProfileOutputWithContext(context.Context) OracleConnectionProfileOutput
}

// Specifies connection parameters required specifically for Oracle databases.
type OracleConnectionProfileArgs struct {
	// Database service for the Oracle connection.
	DatabaseService pulumi.StringInput `pulumi:"databaseService"`
	// Forward SSH tunnel connectivity.
	ForwardSshConnectivity ForwardSshTunnelConnectivityPtrInput `pulumi:"forwardSshConnectivity"`
	// The IP or hostname of the source Oracle database.
	Host pulumi.StringInput `pulumi:"host"`
	// Input only. The password for the user that Database Migration Service will be using to connect to the database. This field is not returned on request, and the value is encrypted when stored in Database Migration Service.
	Password pulumi.StringInput `pulumi:"password"`
	// The network port of the source Oracle database.
	Port pulumi.IntInput `pulumi:"port"`
	// Private connectivity.
	PrivateConnectivity PrivateConnectivityPtrInput `pulumi:"privateConnectivity"`
	// SSL configuration for the connection to the source Oracle database. * Only `SERVER_ONLY` configuration is supported for Oracle SSL. * SSL is supported for Oracle versions 12 and above.
	Ssl SslConfigPtrInput `pulumi:"ssl"`
	// Static Service IP connectivity.
	StaticServiceIpConnectivity StaticServiceIpConnectivityPtrInput `pulumi:"staticServiceIpConnectivity"`
	// The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.
	Username pulumi.StringInput `pulumi:"username"`
}

func (OracleConnectionProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleConnectionProfile)(nil)).Elem()
}

func (i OracleConnectionProfileArgs) ToOracleConnectionProfileOutput() OracleConnectionProfileOutput {
	return i.ToOracleConnectionProfileOutputWithContext(context.Background())
}

func (i OracleConnectionProfileArgs) ToOracleConnectionProfileOutputWithContext(ctx context.Context) OracleConnectionProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleConnectionProfileOutput)
}

func (i OracleConnectionProfileArgs) ToOracleConnectionProfilePtrOutput() OracleConnectionProfilePtrOutput {
	return i.ToOracleConnectionProfilePtrOutputWithContext(context.Background())
}

func (i OracleConnectionProfileArgs) ToOracleConnectionProfilePtrOutputWithContext(ctx context.Context) OracleConnectionProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleConnectionProfileOutput).ToOracleConnectionProfilePtrOutputWithContext(ctx)
}

// OracleConnectionProfilePtrInput is an input type that accepts OracleConnectionProfileArgs, OracleConnectionProfilePtr and OracleConnectionProfilePtrOutput values.
// You can construct a concrete instance of `OracleConnectionProfilePtrInput` via:
//
//	        OracleConnectionProfileArgs{...}
//
//	or:
//
//	        nil
type OracleConnectionProfilePtrInput interface {
	pulumi.Input

	ToOracleConnectionProfilePtrOutput() OracleConnectionProfilePtrOutput
	ToOracleConnectionProfilePtrOutputWithContext(context.Context) OracleConnectionProfilePtrOutput
}

type oracleConnectionProfilePtrType OracleConnectionProfileArgs

func OracleConnectionProfilePtr(v *OracleConnectionProfileArgs) OracleConnectionProfilePtrInput {
	return (*oracleConnectionProfilePtrType)(v)
}

func (*oracleConnectionProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OracleConnectionProfile)(nil)).Elem()
}

func (i *oracleConnectionProfilePtrType) ToOracleConnectionProfilePtrOutput() OracleConnectionProfilePtrOutput {
	return i.ToOracleConnectionProfilePtrOutputWithContext(context.Background())
}

func (i *oracleConnectionProfilePtrType) ToOracleConnectionProfilePtrOutputWithContext(ctx context.Context) OracleConnectionProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleConnectionProfilePtrOutput)
}

// Specifies connection parameters required specifically for Oracle databases.
type OracleConnectionProfileOutput struct{ *pulumi.OutputState }

func (OracleConnectionProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleConnectionProfile)(nil)).Elem()
}

func (o OracleConnectionProfileOutput) ToOracleConnectionProfileOutput() OracleConnectionProfileOutput {
	return o
}

func (o OracleConnectionProfileOutput) ToOracleConnectionProfileOutputWithContext(ctx context.Context) OracleConnectionProfileOutput {
	return o
}

func (o OracleConnectionProfileOutput) ToOracleConnectionProfilePtrOutput() OracleConnectionProfilePtrOutput {
	return o.ToOracleConnectionProfilePtrOutputWithContext(context.Background())
}

func (o OracleConnectionProfileOutput) ToOracleConnectionProfilePtrOutputWithContext(ctx context.Context) OracleConnectionProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OracleConnectionProfile) *OracleConnectionProfile {
		return &v
	}).(OracleConnectionProfilePtrOutput)
}

// Database service for the Oracle connection.
func (o OracleConnectionProfileOutput) DatabaseService() pulumi.StringOutput {
	return o.ApplyT(func(v OracleConnectionProfile) string { return v.DatabaseService }).(pulumi.StringOutput)
}

// Forward SSH tunnel connectivity.
func (o OracleConnectionProfileOutput) ForwardSshConnectivity() ForwardSshTunnelConnectivityPtrOutput {
	return o.ApplyT(func(v OracleConnectionProfile) *ForwardSshTunnelConnectivity { return v.ForwardSshConnectivity }).(ForwardSshTunnelConnectivityPtrOutput)
}

// The IP or hostname of the source Oracle database.
func (o OracleConnectionProfileOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v OracleConnectionProfile) string { return v.Host }).(pulumi.StringOutput)
}

// Input only. The password for the user that Database Migration Service will be using to connect to the database. This field is not returned on request, and the value is encrypted when stored in Database Migration Service.
func (o OracleConnectionProfileOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v OracleConnectionProfile) string { return v.Password }).(pulumi.StringOutput)
}

// The network port of the source Oracle database.
func (o OracleConnectionProfileOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v OracleConnectionProfile) int { return v.Port }).(pulumi.IntOutput)
}

// Private connectivity.
func (o OracleConnectionProfileOutput) PrivateConnectivity() PrivateConnectivityPtrOutput {
	return o.ApplyT(func(v OracleConnectionProfile) *PrivateConnectivity { return v.PrivateConnectivity }).(PrivateConnectivityPtrOutput)
}

// SSL configuration for the connection to the source Oracle database. * Only `SERVER_ONLY` configuration is supported for Oracle SSL. * SSL is supported for Oracle versions 12 and above.
func (o OracleConnectionProfileOutput) Ssl() SslConfigPtrOutput {
	return o.ApplyT(func(v OracleConnectionProfile) *SslConfig { return v.Ssl }).(SslConfigPtrOutput)
}

// Static Service IP connectivity.
func (o OracleConnectionProfileOutput) StaticServiceIpConnectivity() StaticServiceIpConnectivityPtrOutput {
	return o.ApplyT(func(v OracleConnectionProfile) *StaticServiceIpConnectivity { return v.StaticServiceIpConnectivity }).(StaticServiceIpConnectivityPtrOutput)
}

// The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.
func (o OracleConnectionProfileOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v OracleConnectionProfile) string { return v.Username }).(pulumi.StringOutput)
}

type OracleConnectionProfilePtrOutput struct{ *pulumi.OutputState }

func (OracleConnectionProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OracleConnectionProfile)(nil)).Elem()
}

func (o OracleConnectionProfilePtrOutput) ToOracleConnectionProfilePtrOutput() OracleConnectionProfilePtrOutput {
	return o
}

func (o OracleConnectionProfilePtrOutput) ToOracleConnectionProfilePtrOutputWithContext(ctx context.Context) OracleConnectionProfilePtrOutput {
	return o
}

func (o OracleConnectionProfilePtrOutput) Elem() OracleConnectionProfileOutput {
	return o.ApplyT(func(v *OracleConnectionProfile) OracleConnectionProfile {
		if v != nil {
			return *v
		}
		var ret OracleConnectionProfile
		return ret
	}).(OracleConnectionProfileOutput)
}

// Database service for the Oracle connection.
func (o OracleConnectionProfilePtrOutput) DatabaseService() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OracleConnectionProfile) *string {
		if v == nil {
			return nil
		}
		return &v.DatabaseService
	}).(pulumi.StringPtrOutput)
}

// Forward SSH tunnel connectivity.
func (o OracleConnectionProfilePtrOutput) ForwardSshConnectivity() ForwardSshTunnelConnectivityPtrOutput {
	return o.ApplyT(func(v *OracleConnectionProfile) *ForwardSshTunnelConnectivity {
		if v == nil {
			return nil
		}
		return v.ForwardSshConnectivity
	}).(ForwardSshTunnelConnectivityPtrOutput)
}

// The IP or hostname of the source Oracle database.
func (o OracleConnectionProfilePtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OracleConnectionProfile) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// Input only. The password for the user that Database Migration Service will be using to connect to the database. This field is not returned on request, and the value is encrypted when stored in Database Migration Service.
func (o OracleConnectionProfilePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OracleConnectionProfile) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// The network port of the source Oracle database.
func (o OracleConnectionProfilePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OracleConnectionProfile) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// Private connectivity.
func (o OracleConnectionProfilePtrOutput) PrivateConnectivity() PrivateConnectivityPtrOutput {
	return o.ApplyT(func(v *OracleConnectionProfile) *PrivateConnectivity {
		if v == nil {
			return nil
		}
		return v.PrivateConnectivity
	}).(PrivateConnectivityPtrOutput)
}

// SSL configuration for the connection to the source Oracle database. * Only `SERVER_ONLY` configuration is supported for Oracle SSL. * SSL is supported for Oracle versions 12 and above.
func (o OracleConnectionProfilePtrOutput) Ssl() SslConfigPtrOutput {
	return o.ApplyT(func(v *OracleConnectionProfile) *SslConfig {
		if v == nil {
			return nil
		}
		return v.Ssl
	}).(SslConfigPtrOutput)
}

// Static Service IP connectivity.
func (o OracleConnectionProfilePtrOutput) StaticServiceIpConnectivity() StaticServiceIpConnectivityPtrOutput {
	return o.ApplyT(func(v *OracleConnectionProfile) *StaticServiceIpConnectivity {
		if v == nil {
			return nil
		}
		return v.StaticServiceIpConnectivity
	}).(StaticServiceIpConnectivityPtrOutput)
}

// The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.
func (o OracleConnectionProfilePtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OracleConnectionProfile) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

// Specifies connection parameters required specifically for Oracle databases.
type OracleConnectionProfileResponse struct {
	// Database service for the Oracle connection.
	DatabaseService string `pulumi:"databaseService"`
	// Forward SSH tunnel connectivity.
	ForwardSshConnectivity ForwardSshTunnelConnectivityResponse `pulumi:"forwardSshConnectivity"`
	// The IP or hostname of the source Oracle database.
	Host string `pulumi:"host"`
	// Input only. The password for the user that Database Migration Service will be using to connect to the database. This field is not returned on request, and the value is encrypted when stored in Database Migration Service.
	Password string `pulumi:"password"`
	// Indicates whether a new password is included in the request.
	PasswordSet bool `pulumi:"passwordSet"`
	// The network port of the source Oracle database.
	Port int `pulumi:"port"`
	// Private connectivity.
	PrivateConnectivity PrivateConnectivityResponse `pulumi:"privateConnectivity"`
	// SSL configuration for the connection to the source Oracle database. * Only `SERVER_ONLY` configuration is supported for Oracle SSL. * SSL is supported for Oracle versions 12 and above.
	Ssl SslConfigResponse `pulumi:"ssl"`
	// Static Service IP connectivity.
	StaticServiceIpConnectivity StaticServiceIpConnectivityResponse `pulumi:"staticServiceIpConnectivity"`
	// The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.
	Username string `pulumi:"username"`
}

// Specifies connection parameters required specifically for Oracle databases.
type OracleConnectionProfileResponseOutput struct{ *pulumi.OutputState }

func (OracleConnectionProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleConnectionProfileResponse)(nil)).Elem()
}

func (o OracleConnectionProfileResponseOutput) ToOracleConnectionProfileResponseOutput() OracleConnectionProfileResponseOutput {
	return o
}

func (o OracleConnectionProfileResponseOutput) ToOracleConnectionProfileResponseOutputWithContext(ctx context.Context) OracleConnectionProfileResponseOutput {
	return o
}

// Database service for the Oracle connection.
func (o OracleConnectionProfileResponseOutput) DatabaseService() pulumi.StringOutput {
	return o.ApplyT(func(v OracleConnectionProfileResponse) string { return v.DatabaseService }).(pulumi.StringOutput)
}

// Forward SSH tunnel connectivity.
func (o OracleConnectionProfileResponseOutput) ForwardSshConnectivity() ForwardSshTunnelConnectivityResponseOutput {
	return o.ApplyT(func(v OracleConnectionProfileResponse) ForwardSshTunnelConnectivityResponse {
		return v.ForwardSshConnectivity
	}).(ForwardSshTunnelConnectivityResponseOutput)
}

// The IP or hostname of the source Oracle database.
func (o OracleConnectionProfileResponseOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v OracleConnectionProfileResponse) string { return v.Host }).(pulumi.StringOutput)
}

// Input only. The password for the user that Database Migration Service will be using to connect to the database. This field is not returned on request, and the value is encrypted when stored in Database Migration Service.
func (o OracleConnectionProfileResponseOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v OracleConnectionProfileResponse) string { return v.Password }).(pulumi.StringOutput)
}

// Indicates whether a new password is included in the request.
func (o OracleConnectionProfileResponseOutput) PasswordSet() pulumi.BoolOutput {
	return o.ApplyT(func(v OracleConnectionProfileResponse) bool { return v.PasswordSet }).(pulumi.BoolOutput)
}

// The network port of the source Oracle database.
func (o OracleConnectionProfileResponseOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v OracleConnectionProfileResponse) int { return v.Port }).(pulumi.IntOutput)
}

// Private connectivity.
func (o OracleConnectionProfileResponseOutput) PrivateConnectivity() PrivateConnectivityResponseOutput {
	return o.ApplyT(func(v OracleConnectionProfileResponse) PrivateConnectivityResponse { return v.PrivateConnectivity }).(PrivateConnectivityResponseOutput)
}

// SSL configuration for the connection to the source Oracle database. * Only `SERVER_ONLY` configuration is supported for Oracle SSL. * SSL is supported for Oracle versions 12 and above.
func (o OracleConnectionProfileResponseOutput) Ssl() SslConfigResponseOutput {
	return o.ApplyT(func(v OracleConnectionProfileResponse) SslConfigResponse { return v.Ssl }).(SslConfigResponseOutput)
}

// Static Service IP connectivity.
func (o OracleConnectionProfileResponseOutput) StaticServiceIpConnectivity() StaticServiceIpConnectivityResponseOutput {
	return o.ApplyT(func(v OracleConnectionProfileResponse) StaticServiceIpConnectivityResponse {
		return v.StaticServiceIpConnectivity
	}).(StaticServiceIpConnectivityResponseOutput)
}

// The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.
func (o OracleConnectionProfileResponseOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v OracleConnectionProfileResponse) string { return v.Username }).(pulumi.StringOutput)
}

// Performance configuration definition.
type PerformanceConfig struct {
	// Initial dump parallelism level.
	DumpParallelLevel *PerformanceConfigDumpParallelLevel `pulumi:"dumpParallelLevel"`
}

// PerformanceConfigInput is an input type that accepts PerformanceConfigArgs and PerformanceConfigOutput values.
// You can construct a concrete instance of `PerformanceConfigInput` via:
//
//	PerformanceConfigArgs{...}
type PerformanceConfigInput interface {
	pulumi.Input

	ToPerformanceConfigOutput() PerformanceConfigOutput
	ToPerformanceConfigOutputWithContext(context.Context) PerformanceConfigOutput
}

// Performance configuration definition.
type PerformanceConfigArgs struct {
	// Initial dump parallelism level.
	DumpParallelLevel PerformanceConfigDumpParallelLevelPtrInput `pulumi:"dumpParallelLevel"`
}

func (PerformanceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PerformanceConfig)(nil)).Elem()
}

func (i PerformanceConfigArgs) ToPerformanceConfigOutput() PerformanceConfigOutput {
	return i.ToPerformanceConfigOutputWithContext(context.Background())
}

func (i PerformanceConfigArgs) ToPerformanceConfigOutputWithContext(ctx context.Context) PerformanceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerformanceConfigOutput)
}

func (i PerformanceConfigArgs) ToPerformanceConfigPtrOutput() PerformanceConfigPtrOutput {
	return i.ToPerformanceConfigPtrOutputWithContext(context.Background())
}

func (i PerformanceConfigArgs) ToPerformanceConfigPtrOutputWithContext(ctx context.Context) PerformanceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerformanceConfigOutput).ToPerformanceConfigPtrOutputWithContext(ctx)
}

// PerformanceConfigPtrInput is an input type that accepts PerformanceConfigArgs, PerformanceConfigPtr and PerformanceConfigPtrOutput values.
// You can construct a concrete instance of `PerformanceConfigPtrInput` via:
//
//	        PerformanceConfigArgs{...}
//
//	or:
//
//	        nil
type PerformanceConfigPtrInput interface {
	pulumi.Input

	ToPerformanceConfigPtrOutput() PerformanceConfigPtrOutput
	ToPerformanceConfigPtrOutputWithContext(context.Context) PerformanceConfigPtrOutput
}

type performanceConfigPtrType PerformanceConfigArgs

func PerformanceConfigPtr(v *PerformanceConfigArgs) PerformanceConfigPtrInput {
	return (*performanceConfigPtrType)(v)
}

func (*performanceConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PerformanceConfig)(nil)).Elem()
}

func (i *performanceConfigPtrType) ToPerformanceConfigPtrOutput() PerformanceConfigPtrOutput {
	return i.ToPerformanceConfigPtrOutputWithContext(context.Background())
}

func (i *performanceConfigPtrType) ToPerformanceConfigPtrOutputWithContext(ctx context.Context) PerformanceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerformanceConfigPtrOutput)
}

// Performance configuration definition.
type PerformanceConfigOutput struct{ *pulumi.OutputState }

func (PerformanceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PerformanceConfig)(nil)).Elem()
}

func (o PerformanceConfigOutput) ToPerformanceConfigOutput() PerformanceConfigOutput {
	return o
}

func (o PerformanceConfigOutput) ToPerformanceConfigOutputWithContext(ctx context.Context) PerformanceConfigOutput {
	return o
}

func (o PerformanceConfigOutput) ToPerformanceConfigPtrOutput() PerformanceConfigPtrOutput {
	return o.ToPerformanceConfigPtrOutputWithContext(context.Background())
}

func (o PerformanceConfigOutput) ToPerformanceConfigPtrOutputWithContext(ctx context.Context) PerformanceConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PerformanceConfig) *PerformanceConfig {
		return &v
	}).(PerformanceConfigPtrOutput)
}

// Initial dump parallelism level.
func (o PerformanceConfigOutput) DumpParallelLevel() PerformanceConfigDumpParallelLevelPtrOutput {
	return o.ApplyT(func(v PerformanceConfig) *PerformanceConfigDumpParallelLevel { return v.DumpParallelLevel }).(PerformanceConfigDumpParallelLevelPtrOutput)
}

type PerformanceConfigPtrOutput struct{ *pulumi.OutputState }

func (PerformanceConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PerformanceConfig)(nil)).Elem()
}

func (o PerformanceConfigPtrOutput) ToPerformanceConfigPtrOutput() PerformanceConfigPtrOutput {
	return o
}

func (o PerformanceConfigPtrOutput) ToPerformanceConfigPtrOutputWithContext(ctx context.Context) PerformanceConfigPtrOutput {
	return o
}

func (o PerformanceConfigPtrOutput) Elem() PerformanceConfigOutput {
	return o.ApplyT(func(v *PerformanceConfig) PerformanceConfig {
		if v != nil {
			return *v
		}
		var ret PerformanceConfig
		return ret
	}).(PerformanceConfigOutput)
}

// Initial dump parallelism level.
func (o PerformanceConfigPtrOutput) DumpParallelLevel() PerformanceConfigDumpParallelLevelPtrOutput {
	return o.ApplyT(func(v *PerformanceConfig) *PerformanceConfigDumpParallelLevel {
		if v == nil {
			return nil
		}
		return v.DumpParallelLevel
	}).(PerformanceConfigDumpParallelLevelPtrOutput)
}

// Performance configuration definition.
type PerformanceConfigResponse struct {
	// Initial dump parallelism level.
	DumpParallelLevel string `pulumi:"dumpParallelLevel"`
}

// Performance configuration definition.
type PerformanceConfigResponseOutput struct{ *pulumi.OutputState }

func (PerformanceConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PerformanceConfigResponse)(nil)).Elem()
}

func (o PerformanceConfigResponseOutput) ToPerformanceConfigResponseOutput() PerformanceConfigResponseOutput {
	return o
}

func (o PerformanceConfigResponseOutput) ToPerformanceConfigResponseOutputWithContext(ctx context.Context) PerformanceConfigResponseOutput {
	return o
}

// Initial dump parallelism level.
func (o PerformanceConfigResponseOutput) DumpParallelLevel() pulumi.StringOutput {
	return o.ApplyT(func(v PerformanceConfigResponse) string { return v.DumpParallelLevel }).(pulumi.StringOutput)
}

// Specifies connection parameters required specifically for PostgreSQL databases.
type PostgreSqlConnectionProfile struct {
	// Optional. If the destination is an AlloyDB database, use this field to provide the AlloyDB cluster ID.
	AlloydbClusterId *string `pulumi:"alloydbClusterId"`
	// If the source is a Cloud SQL database, use this field to provide the Cloud SQL instance ID of the source.
	CloudSqlId *string `pulumi:"cloudSqlId"`
	// The IP or hostname of the source PostgreSQL database.
	Host string `pulumi:"host"`
	// Input only. The password for the user that Database Migration Service will be using to connect to the database. This field is not returned on request, and the value is encrypted when stored in Database Migration Service.
	Password string `pulumi:"password"`
	// The network port of the source PostgreSQL database.
	Port int `pulumi:"port"`
	// Private service connect connectivity.
	PrivateServiceConnectConnectivity *PrivateServiceConnectConnectivity `pulumi:"privateServiceConnectConnectivity"`
	// SSL configuration for the destination to connect to the source database.
	Ssl *SslConfig `pulumi:"ssl"`
	// Static ip connectivity data (default, no additional details needed).
	StaticIpConnectivity *StaticIpConnectivity `pulumi:"staticIpConnectivity"`
	// The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.
	Username string `pulumi:"username"`
}

// PostgreSqlConnectionProfileInput is an input type that accepts PostgreSqlConnectionProfileArgs and PostgreSqlConnectionProfileOutput values.
// You can construct a concrete instance of `PostgreSqlConnectionProfileInput` via:
//
//	PostgreSqlConnectionProfileArgs{...}
type PostgreSqlConnectionProfileInput interface {
	pulumi.Input

	ToPostgreSqlConnectionProfileOutput() PostgreSqlConnectionProfileOutput
	ToPostgreSqlConnectionProfileOutputWithContext(context.Context) PostgreSqlConnectionProfileOutput
}

// Specifies connection parameters required specifically for PostgreSQL databases.
type PostgreSqlConnectionProfileArgs struct {
	// Optional. If the destination is an AlloyDB database, use this field to provide the AlloyDB cluster ID.
	AlloydbClusterId pulumi.StringPtrInput `pulumi:"alloydbClusterId"`
	// If the source is a Cloud SQL database, use this field to provide the Cloud SQL instance ID of the source.
	CloudSqlId pulumi.StringPtrInput `pulumi:"cloudSqlId"`
	// The IP or hostname of the source PostgreSQL database.
	Host pulumi.StringInput `pulumi:"host"`
	// Input only. The password for the user that Database Migration Service will be using to connect to the database. This field is not returned on request, and the value is encrypted when stored in Database Migration Service.
	Password pulumi.StringInput `pulumi:"password"`
	// The network port of the source PostgreSQL database.
	Port pulumi.IntInput `pulumi:"port"`
	// Private service connect connectivity.
	PrivateServiceConnectConnectivity PrivateServiceConnectConnectivityPtrInput `pulumi:"privateServiceConnectConnectivity"`
	// SSL configuration for the destination to connect to the source database.
	Ssl SslConfigPtrInput `pulumi:"ssl"`
	// Static ip connectivity data (default, no additional details needed).
	StaticIpConnectivity StaticIpConnectivityPtrInput `pulumi:"staticIpConnectivity"`
	// The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.
	Username pulumi.StringInput `pulumi:"username"`
}

func (PostgreSqlConnectionProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgreSqlConnectionProfile)(nil)).Elem()
}

func (i PostgreSqlConnectionProfileArgs) ToPostgreSqlConnectionProfileOutput() PostgreSqlConnectionProfileOutput {
	return i.ToPostgreSqlConnectionProfileOutputWithContext(context.Background())
}

func (i PostgreSqlConnectionProfileArgs) ToPostgreSqlConnectionProfileOutputWithContext(ctx context.Context) PostgreSqlConnectionProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgreSqlConnectionProfileOutput)
}

func (i PostgreSqlConnectionProfileArgs) ToPostgreSqlConnectionProfilePtrOutput() PostgreSqlConnectionProfilePtrOutput {
	return i.ToPostgreSqlConnectionProfilePtrOutputWithContext(context.Background())
}

func (i PostgreSqlConnectionProfileArgs) ToPostgreSqlConnectionProfilePtrOutputWithContext(ctx context.Context) PostgreSqlConnectionProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgreSqlConnectionProfileOutput).ToPostgreSqlConnectionProfilePtrOutputWithContext(ctx)
}

// PostgreSqlConnectionProfilePtrInput is an input type that accepts PostgreSqlConnectionProfileArgs, PostgreSqlConnectionProfilePtr and PostgreSqlConnectionProfilePtrOutput values.
// You can construct a concrete instance of `PostgreSqlConnectionProfilePtrInput` via:
//
//	        PostgreSqlConnectionProfileArgs{...}
//
//	or:
//
//	        nil
type PostgreSqlConnectionProfilePtrInput interface {
	pulumi.Input

	ToPostgreSqlConnectionProfilePtrOutput() PostgreSqlConnectionProfilePtrOutput
	ToPostgreSqlConnectionProfilePtrOutputWithContext(context.Context) PostgreSqlConnectionProfilePtrOutput
}

type postgreSqlConnectionProfilePtrType PostgreSqlConnectionProfileArgs

func PostgreSqlConnectionProfilePtr(v *PostgreSqlConnectionProfileArgs) PostgreSqlConnectionProfilePtrInput {
	return (*postgreSqlConnectionProfilePtrType)(v)
}

func (*postgreSqlConnectionProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgreSqlConnectionProfile)(nil)).Elem()
}

func (i *postgreSqlConnectionProfilePtrType) ToPostgreSqlConnectionProfilePtrOutput() PostgreSqlConnectionProfilePtrOutput {
	return i.ToPostgreSqlConnectionProfilePtrOutputWithContext(context.Background())
}

func (i *postgreSqlConnectionProfilePtrType) ToPostgreSqlConnectionProfilePtrOutputWithContext(ctx context.Context) PostgreSqlConnectionProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgreSqlConnectionProfilePtrOutput)
}

// Specifies connection parameters required specifically for PostgreSQL databases.
type PostgreSqlConnectionProfileOutput struct{ *pulumi.OutputState }

func (PostgreSqlConnectionProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgreSqlConnectionProfile)(nil)).Elem()
}

func (o PostgreSqlConnectionProfileOutput) ToPostgreSqlConnectionProfileOutput() PostgreSqlConnectionProfileOutput {
	return o
}

func (o PostgreSqlConnectionProfileOutput) ToPostgreSqlConnectionProfileOutputWithContext(ctx context.Context) PostgreSqlConnectionProfileOutput {
	return o
}

func (o PostgreSqlConnectionProfileOutput) ToPostgreSqlConnectionProfilePtrOutput() PostgreSqlConnectionProfilePtrOutput {
	return o.ToPostgreSqlConnectionProfilePtrOutputWithContext(context.Background())
}

func (o PostgreSqlConnectionProfileOutput) ToPostgreSqlConnectionProfilePtrOutputWithContext(ctx context.Context) PostgreSqlConnectionProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgreSqlConnectionProfile) *PostgreSqlConnectionProfile {
		return &v
	}).(PostgreSqlConnectionProfilePtrOutput)
}

// Optional. If the destination is an AlloyDB database, use this field to provide the AlloyDB cluster ID.
func (o PostgreSqlConnectionProfileOutput) AlloydbClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgreSqlConnectionProfile) *string { return v.AlloydbClusterId }).(pulumi.StringPtrOutput)
}

// If the source is a Cloud SQL database, use this field to provide the Cloud SQL instance ID of the source.
func (o PostgreSqlConnectionProfileOutput) CloudSqlId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgreSqlConnectionProfile) *string { return v.CloudSqlId }).(pulumi.StringPtrOutput)
}

// The IP or hostname of the source PostgreSQL database.
func (o PostgreSqlConnectionProfileOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v PostgreSqlConnectionProfile) string { return v.Host }).(pulumi.StringOutput)
}

// Input only. The password for the user that Database Migration Service will be using to connect to the database. This field is not returned on request, and the value is encrypted when stored in Database Migration Service.
func (o PostgreSqlConnectionProfileOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v PostgreSqlConnectionProfile) string { return v.Password }).(pulumi.StringOutput)
}

// The network port of the source PostgreSQL database.
func (o PostgreSqlConnectionProfileOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v PostgreSqlConnectionProfile) int { return v.Port }).(pulumi.IntOutput)
}

// Private service connect connectivity.
func (o PostgreSqlConnectionProfileOutput) PrivateServiceConnectConnectivity() PrivateServiceConnectConnectivityPtrOutput {
	return o.ApplyT(func(v PostgreSqlConnectionProfile) *PrivateServiceConnectConnectivity {
		return v.PrivateServiceConnectConnectivity
	}).(PrivateServiceConnectConnectivityPtrOutput)
}

// SSL configuration for the destination to connect to the source database.
func (o PostgreSqlConnectionProfileOutput) Ssl() SslConfigPtrOutput {
	return o.ApplyT(func(v PostgreSqlConnectionProfile) *SslConfig { return v.Ssl }).(SslConfigPtrOutput)
}

// Static ip connectivity data (default, no additional details needed).
func (o PostgreSqlConnectionProfileOutput) StaticIpConnectivity() StaticIpConnectivityPtrOutput {
	return o.ApplyT(func(v PostgreSqlConnectionProfile) *StaticIpConnectivity { return v.StaticIpConnectivity }).(StaticIpConnectivityPtrOutput)
}

// The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.
func (o PostgreSqlConnectionProfileOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v PostgreSqlConnectionProfile) string { return v.Username }).(pulumi.StringOutput)
}

type PostgreSqlConnectionProfilePtrOutput struct{ *pulumi.OutputState }

func (PostgreSqlConnectionProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgreSqlConnectionProfile)(nil)).Elem()
}

func (o PostgreSqlConnectionProfilePtrOutput) ToPostgreSqlConnectionProfilePtrOutput() PostgreSqlConnectionProfilePtrOutput {
	return o
}

func (o PostgreSqlConnectionProfilePtrOutput) ToPostgreSqlConnectionProfilePtrOutputWithContext(ctx context.Context) PostgreSqlConnectionProfilePtrOutput {
	return o
}

func (o PostgreSqlConnectionProfilePtrOutput) Elem() PostgreSqlConnectionProfileOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionProfile) PostgreSqlConnectionProfile {
		if v != nil {
			return *v
		}
		var ret PostgreSqlConnectionProfile
		return ret
	}).(PostgreSqlConnectionProfileOutput)
}

// Optional. If the destination is an AlloyDB database, use this field to provide the AlloyDB cluster ID.
func (o PostgreSqlConnectionProfilePtrOutput) AlloydbClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionProfile) *string {
		if v == nil {
			return nil
		}
		return v.AlloydbClusterId
	}).(pulumi.StringPtrOutput)
}

// If the source is a Cloud SQL database, use this field to provide the Cloud SQL instance ID of the source.
func (o PostgreSqlConnectionProfilePtrOutput) CloudSqlId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionProfile) *string {
		if v == nil {
			return nil
		}
		return v.CloudSqlId
	}).(pulumi.StringPtrOutput)
}

// The IP or hostname of the source PostgreSQL database.
func (o PostgreSqlConnectionProfilePtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionProfile) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// Input only. The password for the user that Database Migration Service will be using to connect to the database. This field is not returned on request, and the value is encrypted when stored in Database Migration Service.
func (o PostgreSqlConnectionProfilePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionProfile) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// The network port of the source PostgreSQL database.
func (o PostgreSqlConnectionProfilePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionProfile) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// Private service connect connectivity.
func (o PostgreSqlConnectionProfilePtrOutput) PrivateServiceConnectConnectivity() PrivateServiceConnectConnectivityPtrOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionProfile) *PrivateServiceConnectConnectivity {
		if v == nil {
			return nil
		}
		return v.PrivateServiceConnectConnectivity
	}).(PrivateServiceConnectConnectivityPtrOutput)
}

// SSL configuration for the destination to connect to the source database.
func (o PostgreSqlConnectionProfilePtrOutput) Ssl() SslConfigPtrOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionProfile) *SslConfig {
		if v == nil {
			return nil
		}
		return v.Ssl
	}).(SslConfigPtrOutput)
}

// Static ip connectivity data (default, no additional details needed).
func (o PostgreSqlConnectionProfilePtrOutput) StaticIpConnectivity() StaticIpConnectivityPtrOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionProfile) *StaticIpConnectivity {
		if v == nil {
			return nil
		}
		return v.StaticIpConnectivity
	}).(StaticIpConnectivityPtrOutput)
}

// The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.
func (o PostgreSqlConnectionProfilePtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionProfile) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

// Specifies connection parameters required specifically for PostgreSQL databases.
type PostgreSqlConnectionProfileResponse struct {
	// Optional. If the destination is an AlloyDB database, use this field to provide the AlloyDB cluster ID.
	AlloydbClusterId string `pulumi:"alloydbClusterId"`
	// If the source is a Cloud SQL database, use this field to provide the Cloud SQL instance ID of the source.
	CloudSqlId string `pulumi:"cloudSqlId"`
	// The IP or hostname of the source PostgreSQL database.
	Host string `pulumi:"host"`
	// If the source is a Cloud SQL database, this field indicates the network architecture it's associated with.
	NetworkArchitecture string `pulumi:"networkArchitecture"`
	// Input only. The password for the user that Database Migration Service will be using to connect to the database. This field is not returned on request, and the value is encrypted when stored in Database Migration Service.
	Password string `pulumi:"password"`
	// Indicates If this connection profile password is stored.
	PasswordSet bool `pulumi:"passwordSet"`
	// The network port of the source PostgreSQL database.
	Port int `pulumi:"port"`
	// Private service connect connectivity.
	PrivateServiceConnectConnectivity PrivateServiceConnectConnectivityResponse `pulumi:"privateServiceConnectConnectivity"`
	// SSL configuration for the destination to connect to the source database.
	Ssl SslConfigResponse `pulumi:"ssl"`
	// Static ip connectivity data (default, no additional details needed).
	StaticIpConnectivity StaticIpConnectivityResponse `pulumi:"staticIpConnectivity"`
	// The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.
	Username string `pulumi:"username"`
}

// Specifies connection parameters required specifically for PostgreSQL databases.
type PostgreSqlConnectionProfileResponseOutput struct{ *pulumi.OutputState }

func (PostgreSqlConnectionProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgreSqlConnectionProfileResponse)(nil)).Elem()
}

func (o PostgreSqlConnectionProfileResponseOutput) ToPostgreSqlConnectionProfileResponseOutput() PostgreSqlConnectionProfileResponseOutput {
	return o
}

func (o PostgreSqlConnectionProfileResponseOutput) ToPostgreSqlConnectionProfileResponseOutputWithContext(ctx context.Context) PostgreSqlConnectionProfileResponseOutput {
	return o
}

// Optional. If the destination is an AlloyDB database, use this field to provide the AlloyDB cluster ID.
func (o PostgreSqlConnectionProfileResponseOutput) AlloydbClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v PostgreSqlConnectionProfileResponse) string { return v.AlloydbClusterId }).(pulumi.StringOutput)
}

// If the source is a Cloud SQL database, use this field to provide the Cloud SQL instance ID of the source.
func (o PostgreSqlConnectionProfileResponseOutput) CloudSqlId() pulumi.StringOutput {
	return o.ApplyT(func(v PostgreSqlConnectionProfileResponse) string { return v.CloudSqlId }).(pulumi.StringOutput)
}

// The IP or hostname of the source PostgreSQL database.
func (o PostgreSqlConnectionProfileResponseOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v PostgreSqlConnectionProfileResponse) string { return v.Host }).(pulumi.StringOutput)
}

// If the source is a Cloud SQL database, this field indicates the network architecture it's associated with.
func (o PostgreSqlConnectionProfileResponseOutput) NetworkArchitecture() pulumi.StringOutput {
	return o.ApplyT(func(v PostgreSqlConnectionProfileResponse) string { return v.NetworkArchitecture }).(pulumi.StringOutput)
}

// Input only. The password for the user that Database Migration Service will be using to connect to the database. This field is not returned on request, and the value is encrypted when stored in Database Migration Service.
func (o PostgreSqlConnectionProfileResponseOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v PostgreSqlConnectionProfileResponse) string { return v.Password }).(pulumi.StringOutput)
}

// Indicates If this connection profile password is stored.
func (o PostgreSqlConnectionProfileResponseOutput) PasswordSet() pulumi.BoolOutput {
	return o.ApplyT(func(v PostgreSqlConnectionProfileResponse) bool { return v.PasswordSet }).(pulumi.BoolOutput)
}

// The network port of the source PostgreSQL database.
func (o PostgreSqlConnectionProfileResponseOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v PostgreSqlConnectionProfileResponse) int { return v.Port }).(pulumi.IntOutput)
}

// Private service connect connectivity.
func (o PostgreSqlConnectionProfileResponseOutput) PrivateServiceConnectConnectivity() PrivateServiceConnectConnectivityResponseOutput {
	return o.ApplyT(func(v PostgreSqlConnectionProfileResponse) PrivateServiceConnectConnectivityResponse {
		return v.PrivateServiceConnectConnectivity
	}).(PrivateServiceConnectConnectivityResponseOutput)
}

// SSL configuration for the destination to connect to the source database.
func (o PostgreSqlConnectionProfileResponseOutput) Ssl() SslConfigResponseOutput {
	return o.ApplyT(func(v PostgreSqlConnectionProfileResponse) SslConfigResponse { return v.Ssl }).(SslConfigResponseOutput)
}

// Static ip connectivity data (default, no additional details needed).
func (o PostgreSqlConnectionProfileResponseOutput) StaticIpConnectivity() StaticIpConnectivityResponseOutput {
	return o.ApplyT(func(v PostgreSqlConnectionProfileResponse) StaticIpConnectivityResponse {
		return v.StaticIpConnectivity
	}).(StaticIpConnectivityResponseOutput)
}

// The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.
func (o PostgreSqlConnectionProfileResponseOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v PostgreSqlConnectionProfileResponse) string { return v.Username }).(pulumi.StringOutput)
}

// Settings for the cluster's primary instance
type PrimaryInstanceSettings struct {
	// Database flags to pass to AlloyDB when DMS is creating the AlloyDB cluster and instances. See the AlloyDB documentation for how these can be used.
	DatabaseFlags map[string]string `pulumi:"databaseFlags"`
	// The ID of the AlloyDB primary instance. The ID must satisfy the regex expression "[a-z0-9-]+".
	Id string `pulumi:"id"`
	// Labels for the AlloyDB primary instance created by DMS. An object containing a list of 'key', 'value' pairs.
	Labels map[string]string `pulumi:"labels"`
	// Configuration for the machines that host the underlying database engine.
	MachineConfig *MachineConfig `pulumi:"machineConfig"`
}

// PrimaryInstanceSettingsInput is an input type that accepts PrimaryInstanceSettingsArgs and PrimaryInstanceSettingsOutput values.
// You can construct a concrete instance of `PrimaryInstanceSettingsInput` via:
//
//	PrimaryInstanceSettingsArgs{...}
type PrimaryInstanceSettingsInput interface {
	pulumi.Input

	ToPrimaryInstanceSettingsOutput() PrimaryInstanceSettingsOutput
	ToPrimaryInstanceSettingsOutputWithContext(context.Context) PrimaryInstanceSettingsOutput
}

// Settings for the cluster's primary instance
type PrimaryInstanceSettingsArgs struct {
	// Database flags to pass to AlloyDB when DMS is creating the AlloyDB cluster and instances. See the AlloyDB documentation for how these can be used.
	DatabaseFlags pulumi.StringMapInput `pulumi:"databaseFlags"`
	// The ID of the AlloyDB primary instance. The ID must satisfy the regex expression "[a-z0-9-]+".
	Id pulumi.StringInput `pulumi:"id"`
	// Labels for the AlloyDB primary instance created by DMS. An object containing a list of 'key', 'value' pairs.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// Configuration for the machines that host the underlying database engine.
	MachineConfig MachineConfigPtrInput `pulumi:"machineConfig"`
}

func (PrimaryInstanceSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrimaryInstanceSettings)(nil)).Elem()
}

func (i PrimaryInstanceSettingsArgs) ToPrimaryInstanceSettingsOutput() PrimaryInstanceSettingsOutput {
	return i.ToPrimaryInstanceSettingsOutputWithContext(context.Background())
}

func (i PrimaryInstanceSettingsArgs) ToPrimaryInstanceSettingsOutputWithContext(ctx context.Context) PrimaryInstanceSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrimaryInstanceSettingsOutput)
}

func (i PrimaryInstanceSettingsArgs) ToPrimaryInstanceSettingsPtrOutput() PrimaryInstanceSettingsPtrOutput {
	return i.ToPrimaryInstanceSettingsPtrOutputWithContext(context.Background())
}

func (i PrimaryInstanceSettingsArgs) ToPrimaryInstanceSettingsPtrOutputWithContext(ctx context.Context) PrimaryInstanceSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrimaryInstanceSettingsOutput).ToPrimaryInstanceSettingsPtrOutputWithContext(ctx)
}

// PrimaryInstanceSettingsPtrInput is an input type that accepts PrimaryInstanceSettingsArgs, PrimaryInstanceSettingsPtr and PrimaryInstanceSettingsPtrOutput values.
// You can construct a concrete instance of `PrimaryInstanceSettingsPtrInput` via:
//
//	        PrimaryInstanceSettingsArgs{...}
//
//	or:
//
//	        nil
type PrimaryInstanceSettingsPtrInput interface {
	pulumi.Input

	ToPrimaryInstanceSettingsPtrOutput() PrimaryInstanceSettingsPtrOutput
	ToPrimaryInstanceSettingsPtrOutputWithContext(context.Context) PrimaryInstanceSettingsPtrOutput
}

type primaryInstanceSettingsPtrType PrimaryInstanceSettingsArgs

func PrimaryInstanceSettingsPtr(v *PrimaryInstanceSettingsArgs) PrimaryInstanceSettingsPtrInput {
	return (*primaryInstanceSettingsPtrType)(v)
}

func (*primaryInstanceSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrimaryInstanceSettings)(nil)).Elem()
}

func (i *primaryInstanceSettingsPtrType) ToPrimaryInstanceSettingsPtrOutput() PrimaryInstanceSettingsPtrOutput {
	return i.ToPrimaryInstanceSettingsPtrOutputWithContext(context.Background())
}

func (i *primaryInstanceSettingsPtrType) ToPrimaryInstanceSettingsPtrOutputWithContext(ctx context.Context) PrimaryInstanceSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrimaryInstanceSettingsPtrOutput)
}

// Settings for the cluster's primary instance
type PrimaryInstanceSettingsOutput struct{ *pulumi.OutputState }

func (PrimaryInstanceSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrimaryInstanceSettings)(nil)).Elem()
}

func (o PrimaryInstanceSettingsOutput) ToPrimaryInstanceSettingsOutput() PrimaryInstanceSettingsOutput {
	return o
}

func (o PrimaryInstanceSettingsOutput) ToPrimaryInstanceSettingsOutputWithContext(ctx context.Context) PrimaryInstanceSettingsOutput {
	return o
}

func (o PrimaryInstanceSettingsOutput) ToPrimaryInstanceSettingsPtrOutput() PrimaryInstanceSettingsPtrOutput {
	return o.ToPrimaryInstanceSettingsPtrOutputWithContext(context.Background())
}

func (o PrimaryInstanceSettingsOutput) ToPrimaryInstanceSettingsPtrOutputWithContext(ctx context.Context) PrimaryInstanceSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrimaryInstanceSettings) *PrimaryInstanceSettings {
		return &v
	}).(PrimaryInstanceSettingsPtrOutput)
}

// Database flags to pass to AlloyDB when DMS is creating the AlloyDB cluster and instances. See the AlloyDB documentation for how these can be used.
func (o PrimaryInstanceSettingsOutput) DatabaseFlags() pulumi.StringMapOutput {
	return o.ApplyT(func(v PrimaryInstanceSettings) map[string]string { return v.DatabaseFlags }).(pulumi.StringMapOutput)
}

// The ID of the AlloyDB primary instance. The ID must satisfy the regex expression "[a-z0-9-]+".
func (o PrimaryInstanceSettingsOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PrimaryInstanceSettings) string { return v.Id }).(pulumi.StringOutput)
}

// Labels for the AlloyDB primary instance created by DMS. An object containing a list of 'key', 'value' pairs.
func (o PrimaryInstanceSettingsOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v PrimaryInstanceSettings) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Configuration for the machines that host the underlying database engine.
func (o PrimaryInstanceSettingsOutput) MachineConfig() MachineConfigPtrOutput {
	return o.ApplyT(func(v PrimaryInstanceSettings) *MachineConfig { return v.MachineConfig }).(MachineConfigPtrOutput)
}

type PrimaryInstanceSettingsPtrOutput struct{ *pulumi.OutputState }

func (PrimaryInstanceSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrimaryInstanceSettings)(nil)).Elem()
}

func (o PrimaryInstanceSettingsPtrOutput) ToPrimaryInstanceSettingsPtrOutput() PrimaryInstanceSettingsPtrOutput {
	return o
}

func (o PrimaryInstanceSettingsPtrOutput) ToPrimaryInstanceSettingsPtrOutputWithContext(ctx context.Context) PrimaryInstanceSettingsPtrOutput {
	return o
}

func (o PrimaryInstanceSettingsPtrOutput) Elem() PrimaryInstanceSettingsOutput {
	return o.ApplyT(func(v *PrimaryInstanceSettings) PrimaryInstanceSettings {
		if v != nil {
			return *v
		}
		var ret PrimaryInstanceSettings
		return ret
	}).(PrimaryInstanceSettingsOutput)
}

// Database flags to pass to AlloyDB when DMS is creating the AlloyDB cluster and instances. See the AlloyDB documentation for how these can be used.
func (o PrimaryInstanceSettingsPtrOutput) DatabaseFlags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PrimaryInstanceSettings) map[string]string {
		if v == nil {
			return nil
		}
		return v.DatabaseFlags
	}).(pulumi.StringMapOutput)
}

// The ID of the AlloyDB primary instance. The ID must satisfy the regex expression "[a-z0-9-]+".
func (o PrimaryInstanceSettingsPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrimaryInstanceSettings) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// Labels for the AlloyDB primary instance created by DMS. An object containing a list of 'key', 'value' pairs.
func (o PrimaryInstanceSettingsPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PrimaryInstanceSettings) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// Configuration for the machines that host the underlying database engine.
func (o PrimaryInstanceSettingsPtrOutput) MachineConfig() MachineConfigPtrOutput {
	return o.ApplyT(func(v *PrimaryInstanceSettings) *MachineConfig {
		if v == nil {
			return nil
		}
		return v.MachineConfig
	}).(MachineConfigPtrOutput)
}

// Settings for the cluster's primary instance
type PrimaryInstanceSettingsResponse struct {
	// Database flags to pass to AlloyDB when DMS is creating the AlloyDB cluster and instances. See the AlloyDB documentation for how these can be used.
	DatabaseFlags map[string]string `pulumi:"databaseFlags"`
	// Labels for the AlloyDB primary instance created by DMS. An object containing a list of 'key', 'value' pairs.
	Labels map[string]string `pulumi:"labels"`
	// Configuration for the machines that host the underlying database engine.
	MachineConfig MachineConfigResponse `pulumi:"machineConfig"`
	// The private IP address for the Instance. This is the connection endpoint for an end-user application.
	PrivateIp string `pulumi:"privateIp"`
}

// Settings for the cluster's primary instance
type PrimaryInstanceSettingsResponseOutput struct{ *pulumi.OutputState }

func (PrimaryInstanceSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrimaryInstanceSettingsResponse)(nil)).Elem()
}

func (o PrimaryInstanceSettingsResponseOutput) ToPrimaryInstanceSettingsResponseOutput() PrimaryInstanceSettingsResponseOutput {
	return o
}

func (o PrimaryInstanceSettingsResponseOutput) ToPrimaryInstanceSettingsResponseOutputWithContext(ctx context.Context) PrimaryInstanceSettingsResponseOutput {
	return o
}

// Database flags to pass to AlloyDB when DMS is creating the AlloyDB cluster and instances. See the AlloyDB documentation for how these can be used.
func (o PrimaryInstanceSettingsResponseOutput) DatabaseFlags() pulumi.StringMapOutput {
	return o.ApplyT(func(v PrimaryInstanceSettingsResponse) map[string]string { return v.DatabaseFlags }).(pulumi.StringMapOutput)
}

// Labels for the AlloyDB primary instance created by DMS. An object containing a list of 'key', 'value' pairs.
func (o PrimaryInstanceSettingsResponseOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v PrimaryInstanceSettingsResponse) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Configuration for the machines that host the underlying database engine.
func (o PrimaryInstanceSettingsResponseOutput) MachineConfig() MachineConfigResponseOutput {
	return o.ApplyT(func(v PrimaryInstanceSettingsResponse) MachineConfigResponse { return v.MachineConfig }).(MachineConfigResponseOutput)
}

// The private IP address for the Instance. This is the connection endpoint for an end-user application.
func (o PrimaryInstanceSettingsResponseOutput) PrivateIp() pulumi.StringOutput {
	return o.ApplyT(func(v PrimaryInstanceSettingsResponse) string { return v.PrivateIp }).(pulumi.StringOutput)
}

// Private Connectivity.
type PrivateConnectivity struct {
	// The resource name (URI) of the private connection.
	PrivateConnection string `pulumi:"privateConnection"`
}

// PrivateConnectivityInput is an input type that accepts PrivateConnectivityArgs and PrivateConnectivityOutput values.
// You can construct a concrete instance of `PrivateConnectivityInput` via:
//
//	PrivateConnectivityArgs{...}
type PrivateConnectivityInput interface {
	pulumi.Input

	ToPrivateConnectivityOutput() PrivateConnectivityOutput
	ToPrivateConnectivityOutputWithContext(context.Context) PrivateConnectivityOutput
}

// Private Connectivity.
type PrivateConnectivityArgs struct {
	// The resource name (URI) of the private connection.
	PrivateConnection pulumi.StringInput `pulumi:"privateConnection"`
}

func (PrivateConnectivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateConnectivity)(nil)).Elem()
}

func (i PrivateConnectivityArgs) ToPrivateConnectivityOutput() PrivateConnectivityOutput {
	return i.ToPrivateConnectivityOutputWithContext(context.Background())
}

func (i PrivateConnectivityArgs) ToPrivateConnectivityOutputWithContext(ctx context.Context) PrivateConnectivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateConnectivityOutput)
}

func (i PrivateConnectivityArgs) ToPrivateConnectivityPtrOutput() PrivateConnectivityPtrOutput {
	return i.ToPrivateConnectivityPtrOutputWithContext(context.Background())
}

func (i PrivateConnectivityArgs) ToPrivateConnectivityPtrOutputWithContext(ctx context.Context) PrivateConnectivityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateConnectivityOutput).ToPrivateConnectivityPtrOutputWithContext(ctx)
}

// PrivateConnectivityPtrInput is an input type that accepts PrivateConnectivityArgs, PrivateConnectivityPtr and PrivateConnectivityPtrOutput values.
// You can construct a concrete instance of `PrivateConnectivityPtrInput` via:
//
//	        PrivateConnectivityArgs{...}
//
//	or:
//
//	        nil
type PrivateConnectivityPtrInput interface {
	pulumi.Input

	ToPrivateConnectivityPtrOutput() PrivateConnectivityPtrOutput
	ToPrivateConnectivityPtrOutputWithContext(context.Context) PrivateConnectivityPtrOutput
}

type privateConnectivityPtrType PrivateConnectivityArgs

func PrivateConnectivityPtr(v *PrivateConnectivityArgs) PrivateConnectivityPtrInput {
	return (*privateConnectivityPtrType)(v)
}

func (*privateConnectivityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateConnectivity)(nil)).Elem()
}

func (i *privateConnectivityPtrType) ToPrivateConnectivityPtrOutput() PrivateConnectivityPtrOutput {
	return i.ToPrivateConnectivityPtrOutputWithContext(context.Background())
}

func (i *privateConnectivityPtrType) ToPrivateConnectivityPtrOutputWithContext(ctx context.Context) PrivateConnectivityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateConnectivityPtrOutput)
}

// Private Connectivity.
type PrivateConnectivityOutput struct{ *pulumi.OutputState }

func (PrivateConnectivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateConnectivity)(nil)).Elem()
}

func (o PrivateConnectivityOutput) ToPrivateConnectivityOutput() PrivateConnectivityOutput {
	return o
}

func (o PrivateConnectivityOutput) ToPrivateConnectivityOutputWithContext(ctx context.Context) PrivateConnectivityOutput {
	return o
}

func (o PrivateConnectivityOutput) ToPrivateConnectivityPtrOutput() PrivateConnectivityPtrOutput {
	return o.ToPrivateConnectivityPtrOutputWithContext(context.Background())
}

func (o PrivateConnectivityOutput) ToPrivateConnectivityPtrOutputWithContext(ctx context.Context) PrivateConnectivityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrivateConnectivity) *PrivateConnectivity {
		return &v
	}).(PrivateConnectivityPtrOutput)
}

// The resource name (URI) of the private connection.
func (o PrivateConnectivityOutput) PrivateConnection() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateConnectivity) string { return v.PrivateConnection }).(pulumi.StringOutput)
}

type PrivateConnectivityPtrOutput struct{ *pulumi.OutputState }

func (PrivateConnectivityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateConnectivity)(nil)).Elem()
}

func (o PrivateConnectivityPtrOutput) ToPrivateConnectivityPtrOutput() PrivateConnectivityPtrOutput {
	return o
}

func (o PrivateConnectivityPtrOutput) ToPrivateConnectivityPtrOutputWithContext(ctx context.Context) PrivateConnectivityPtrOutput {
	return o
}

func (o PrivateConnectivityPtrOutput) Elem() PrivateConnectivityOutput {
	return o.ApplyT(func(v *PrivateConnectivity) PrivateConnectivity {
		if v != nil {
			return *v
		}
		var ret PrivateConnectivity
		return ret
	}).(PrivateConnectivityOutput)
}

// The resource name (URI) of the private connection.
func (o PrivateConnectivityPtrOutput) PrivateConnection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateConnectivity) *string {
		if v == nil {
			return nil
		}
		return &v.PrivateConnection
	}).(pulumi.StringPtrOutput)
}

// Private Connectivity.
type PrivateConnectivityResponse struct {
	// The resource name (URI) of the private connection.
	PrivateConnection string `pulumi:"privateConnection"`
}

// Private Connectivity.
type PrivateConnectivityResponseOutput struct{ *pulumi.OutputState }

func (PrivateConnectivityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateConnectivityResponse)(nil)).Elem()
}

func (o PrivateConnectivityResponseOutput) ToPrivateConnectivityResponseOutput() PrivateConnectivityResponseOutput {
	return o
}

func (o PrivateConnectivityResponseOutput) ToPrivateConnectivityResponseOutputWithContext(ctx context.Context) PrivateConnectivityResponseOutput {
	return o
}

// The resource name (URI) of the private connection.
func (o PrivateConnectivityResponseOutput) PrivateConnection() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateConnectivityResponse) string { return v.PrivateConnection }).(pulumi.StringOutput)
}

// [Private Service Connect connectivity](https://cloud.google.com/vpc/docs/private-service-connect#service-attachments)
type PrivateServiceConnectConnectivity struct {
	// A service attachment that exposes a database, and has the following format: projects/{project}/regions/{region}/serviceAttachments/{service_attachment_name}
	ServiceAttachment string `pulumi:"serviceAttachment"`
}

// PrivateServiceConnectConnectivityInput is an input type that accepts PrivateServiceConnectConnectivityArgs and PrivateServiceConnectConnectivityOutput values.
// You can construct a concrete instance of `PrivateServiceConnectConnectivityInput` via:
//
//	PrivateServiceConnectConnectivityArgs{...}
type PrivateServiceConnectConnectivityInput interface {
	pulumi.Input

	ToPrivateServiceConnectConnectivityOutput() PrivateServiceConnectConnectivityOutput
	ToPrivateServiceConnectConnectivityOutputWithContext(context.Context) PrivateServiceConnectConnectivityOutput
}

// [Private Service Connect connectivity](https://cloud.google.com/vpc/docs/private-service-connect#service-attachments)
type PrivateServiceConnectConnectivityArgs struct {
	// A service attachment that exposes a database, and has the following format: projects/{project}/regions/{region}/serviceAttachments/{service_attachment_name}
	ServiceAttachment pulumi.StringInput `pulumi:"serviceAttachment"`
}

func (PrivateServiceConnectConnectivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateServiceConnectConnectivity)(nil)).Elem()
}

func (i PrivateServiceConnectConnectivityArgs) ToPrivateServiceConnectConnectivityOutput() PrivateServiceConnectConnectivityOutput {
	return i.ToPrivateServiceConnectConnectivityOutputWithContext(context.Background())
}

func (i PrivateServiceConnectConnectivityArgs) ToPrivateServiceConnectConnectivityOutputWithContext(ctx context.Context) PrivateServiceConnectConnectivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateServiceConnectConnectivityOutput)
}

func (i PrivateServiceConnectConnectivityArgs) ToPrivateServiceConnectConnectivityPtrOutput() PrivateServiceConnectConnectivityPtrOutput {
	return i.ToPrivateServiceConnectConnectivityPtrOutputWithContext(context.Background())
}

func (i PrivateServiceConnectConnectivityArgs) ToPrivateServiceConnectConnectivityPtrOutputWithContext(ctx context.Context) PrivateServiceConnectConnectivityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateServiceConnectConnectivityOutput).ToPrivateServiceConnectConnectivityPtrOutputWithContext(ctx)
}

// PrivateServiceConnectConnectivityPtrInput is an input type that accepts PrivateServiceConnectConnectivityArgs, PrivateServiceConnectConnectivityPtr and PrivateServiceConnectConnectivityPtrOutput values.
// You can construct a concrete instance of `PrivateServiceConnectConnectivityPtrInput` via:
//
//	        PrivateServiceConnectConnectivityArgs{...}
//
//	or:
//
//	        nil
type PrivateServiceConnectConnectivityPtrInput interface {
	pulumi.Input

	ToPrivateServiceConnectConnectivityPtrOutput() PrivateServiceConnectConnectivityPtrOutput
	ToPrivateServiceConnectConnectivityPtrOutputWithContext(context.Context) PrivateServiceConnectConnectivityPtrOutput
}

type privateServiceConnectConnectivityPtrType PrivateServiceConnectConnectivityArgs

func PrivateServiceConnectConnectivityPtr(v *PrivateServiceConnectConnectivityArgs) PrivateServiceConnectConnectivityPtrInput {
	return (*privateServiceConnectConnectivityPtrType)(v)
}

func (*privateServiceConnectConnectivityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateServiceConnectConnectivity)(nil)).Elem()
}

func (i *privateServiceConnectConnectivityPtrType) ToPrivateServiceConnectConnectivityPtrOutput() PrivateServiceConnectConnectivityPtrOutput {
	return i.ToPrivateServiceConnectConnectivityPtrOutputWithContext(context.Background())
}

func (i *privateServiceConnectConnectivityPtrType) ToPrivateServiceConnectConnectivityPtrOutputWithContext(ctx context.Context) PrivateServiceConnectConnectivityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateServiceConnectConnectivityPtrOutput)
}

// [Private Service Connect connectivity](https://cloud.google.com/vpc/docs/private-service-connect#service-attachments)
type PrivateServiceConnectConnectivityOutput struct{ *pulumi.OutputState }

func (PrivateServiceConnectConnectivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateServiceConnectConnectivity)(nil)).Elem()
}

func (o PrivateServiceConnectConnectivityOutput) ToPrivateServiceConnectConnectivityOutput() PrivateServiceConnectConnectivityOutput {
	return o
}

func (o PrivateServiceConnectConnectivityOutput) ToPrivateServiceConnectConnectivityOutputWithContext(ctx context.Context) PrivateServiceConnectConnectivityOutput {
	return o
}

func (o PrivateServiceConnectConnectivityOutput) ToPrivateServiceConnectConnectivityPtrOutput() PrivateServiceConnectConnectivityPtrOutput {
	return o.ToPrivateServiceConnectConnectivityPtrOutputWithContext(context.Background())
}

func (o PrivateServiceConnectConnectivityOutput) ToPrivateServiceConnectConnectivityPtrOutputWithContext(ctx context.Context) PrivateServiceConnectConnectivityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrivateServiceConnectConnectivity) *PrivateServiceConnectConnectivity {
		return &v
	}).(PrivateServiceConnectConnectivityPtrOutput)
}

// A service attachment that exposes a database, and has the following format: projects/{project}/regions/{region}/serviceAttachments/{service_attachment_name}
func (o PrivateServiceConnectConnectivityOutput) ServiceAttachment() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateServiceConnectConnectivity) string { return v.ServiceAttachment }).(pulumi.StringOutput)
}

type PrivateServiceConnectConnectivityPtrOutput struct{ *pulumi.OutputState }

func (PrivateServiceConnectConnectivityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateServiceConnectConnectivity)(nil)).Elem()
}

func (o PrivateServiceConnectConnectivityPtrOutput) ToPrivateServiceConnectConnectivityPtrOutput() PrivateServiceConnectConnectivityPtrOutput {
	return o
}

func (o PrivateServiceConnectConnectivityPtrOutput) ToPrivateServiceConnectConnectivityPtrOutputWithContext(ctx context.Context) PrivateServiceConnectConnectivityPtrOutput {
	return o
}

func (o PrivateServiceConnectConnectivityPtrOutput) Elem() PrivateServiceConnectConnectivityOutput {
	return o.ApplyT(func(v *PrivateServiceConnectConnectivity) PrivateServiceConnectConnectivity {
		if v != nil {
			return *v
		}
		var ret PrivateServiceConnectConnectivity
		return ret
	}).(PrivateServiceConnectConnectivityOutput)
}

// A service attachment that exposes a database, and has the following format: projects/{project}/regions/{region}/serviceAttachments/{service_attachment_name}
func (o PrivateServiceConnectConnectivityPtrOutput) ServiceAttachment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateServiceConnectConnectivity) *string {
		if v == nil {
			return nil
		}
		return &v.ServiceAttachment
	}).(pulumi.StringPtrOutput)
}

// [Private Service Connect connectivity](https://cloud.google.com/vpc/docs/private-service-connect#service-attachments)
type PrivateServiceConnectConnectivityResponse struct {
	// A service attachment that exposes a database, and has the following format: projects/{project}/regions/{region}/serviceAttachments/{service_attachment_name}
	ServiceAttachment string `pulumi:"serviceAttachment"`
}

// [Private Service Connect connectivity](https://cloud.google.com/vpc/docs/private-service-connect#service-attachments)
type PrivateServiceConnectConnectivityResponseOutput struct{ *pulumi.OutputState }

func (PrivateServiceConnectConnectivityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateServiceConnectConnectivityResponse)(nil)).Elem()
}

func (o PrivateServiceConnectConnectivityResponseOutput) ToPrivateServiceConnectConnectivityResponseOutput() PrivateServiceConnectConnectivityResponseOutput {
	return o
}

func (o PrivateServiceConnectConnectivityResponseOutput) ToPrivateServiceConnectConnectivityResponseOutputWithContext(ctx context.Context) PrivateServiceConnectConnectivityResponseOutput {
	return o
}

// A service attachment that exposes a database, and has the following format: projects/{project}/regions/{region}/serviceAttachments/{service_attachment_name}
func (o PrivateServiceConnectConnectivityResponseOutput) ServiceAttachment() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateServiceConnectConnectivityResponse) string { return v.ServiceAttachment }).(pulumi.StringOutput)
}

// The details needed to configure a reverse SSH tunnel between the source and destination databases. These details will be used when calling the generateSshScript method (see https://cloud.google.com/database-migration/docs/reference/rest/v1/projects.locations.migrationJobs/generateSshScript) to produce the script that will help set up the reverse SSH tunnel, and to set up the VPC peering between the Cloud SQL private network and the VPC.
type ReverseSshConnectivity struct {
	// The name of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.
	Vm *string `pulumi:"vm"`
	// The IP of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.
	VmIp string `pulumi:"vmIp"`
	// The forwarding port of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.
	VmPort int `pulumi:"vmPort"`
	// The name of the VPC to peer with the Cloud SQL private network.
	Vpc *string `pulumi:"vpc"`
}

// ReverseSshConnectivityInput is an input type that accepts ReverseSshConnectivityArgs and ReverseSshConnectivityOutput values.
// You can construct a concrete instance of `ReverseSshConnectivityInput` via:
//
//	ReverseSshConnectivityArgs{...}
type ReverseSshConnectivityInput interface {
	pulumi.Input

	ToReverseSshConnectivityOutput() ReverseSshConnectivityOutput
	ToReverseSshConnectivityOutputWithContext(context.Context) ReverseSshConnectivityOutput
}

// The details needed to configure a reverse SSH tunnel between the source and destination databases. These details will be used when calling the generateSshScript method (see https://cloud.google.com/database-migration/docs/reference/rest/v1/projects.locations.migrationJobs/generateSshScript) to produce the script that will help set up the reverse SSH tunnel, and to set up the VPC peering between the Cloud SQL private network and the VPC.
type ReverseSshConnectivityArgs struct {
	// The name of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.
	Vm pulumi.StringPtrInput `pulumi:"vm"`
	// The IP of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.
	VmIp pulumi.StringInput `pulumi:"vmIp"`
	// The forwarding port of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.
	VmPort pulumi.IntInput `pulumi:"vmPort"`
	// The name of the VPC to peer with the Cloud SQL private network.
	Vpc pulumi.StringPtrInput `pulumi:"vpc"`
}

func (ReverseSshConnectivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReverseSshConnectivity)(nil)).Elem()
}

func (i ReverseSshConnectivityArgs) ToReverseSshConnectivityOutput() ReverseSshConnectivityOutput {
	return i.ToReverseSshConnectivityOutputWithContext(context.Background())
}

func (i ReverseSshConnectivityArgs) ToReverseSshConnectivityOutputWithContext(ctx context.Context) ReverseSshConnectivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReverseSshConnectivityOutput)
}

func (i ReverseSshConnectivityArgs) ToReverseSshConnectivityPtrOutput() ReverseSshConnectivityPtrOutput {
	return i.ToReverseSshConnectivityPtrOutputWithContext(context.Background())
}

func (i ReverseSshConnectivityArgs) ToReverseSshConnectivityPtrOutputWithContext(ctx context.Context) ReverseSshConnectivityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReverseSshConnectivityOutput).ToReverseSshConnectivityPtrOutputWithContext(ctx)
}

// ReverseSshConnectivityPtrInput is an input type that accepts ReverseSshConnectivityArgs, ReverseSshConnectivityPtr and ReverseSshConnectivityPtrOutput values.
// You can construct a concrete instance of `ReverseSshConnectivityPtrInput` via:
//
//	        ReverseSshConnectivityArgs{...}
//
//	or:
//
//	        nil
type ReverseSshConnectivityPtrInput interface {
	pulumi.Input

	ToReverseSshConnectivityPtrOutput() ReverseSshConnectivityPtrOutput
	ToReverseSshConnectivityPtrOutputWithContext(context.Context) ReverseSshConnectivityPtrOutput
}

type reverseSshConnectivityPtrType ReverseSshConnectivityArgs

func ReverseSshConnectivityPtr(v *ReverseSshConnectivityArgs) ReverseSshConnectivityPtrInput {
	return (*reverseSshConnectivityPtrType)(v)
}

func (*reverseSshConnectivityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReverseSshConnectivity)(nil)).Elem()
}

func (i *reverseSshConnectivityPtrType) ToReverseSshConnectivityPtrOutput() ReverseSshConnectivityPtrOutput {
	return i.ToReverseSshConnectivityPtrOutputWithContext(context.Background())
}

func (i *reverseSshConnectivityPtrType) ToReverseSshConnectivityPtrOutputWithContext(ctx context.Context) ReverseSshConnectivityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReverseSshConnectivityPtrOutput)
}

// The details needed to configure a reverse SSH tunnel between the source and destination databases. These details will be used when calling the generateSshScript method (see https://cloud.google.com/database-migration/docs/reference/rest/v1/projects.locations.migrationJobs/generateSshScript) to produce the script that will help set up the reverse SSH tunnel, and to set up the VPC peering between the Cloud SQL private network and the VPC.
type ReverseSshConnectivityOutput struct{ *pulumi.OutputState }

func (ReverseSshConnectivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReverseSshConnectivity)(nil)).Elem()
}

func (o ReverseSshConnectivityOutput) ToReverseSshConnectivityOutput() ReverseSshConnectivityOutput {
	return o
}

func (o ReverseSshConnectivityOutput) ToReverseSshConnectivityOutputWithContext(ctx context.Context) ReverseSshConnectivityOutput {
	return o
}

func (o ReverseSshConnectivityOutput) ToReverseSshConnectivityPtrOutput() ReverseSshConnectivityPtrOutput {
	return o.ToReverseSshConnectivityPtrOutputWithContext(context.Background())
}

func (o ReverseSshConnectivityOutput) ToReverseSshConnectivityPtrOutputWithContext(ctx context.Context) ReverseSshConnectivityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReverseSshConnectivity) *ReverseSshConnectivity {
		return &v
	}).(ReverseSshConnectivityPtrOutput)
}

// The name of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.
func (o ReverseSshConnectivityOutput) Vm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReverseSshConnectivity) *string { return v.Vm }).(pulumi.StringPtrOutput)
}

// The IP of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.
func (o ReverseSshConnectivityOutput) VmIp() pulumi.StringOutput {
	return o.ApplyT(func(v ReverseSshConnectivity) string { return v.VmIp }).(pulumi.StringOutput)
}

// The forwarding port of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.
func (o ReverseSshConnectivityOutput) VmPort() pulumi.IntOutput {
	return o.ApplyT(func(v ReverseSshConnectivity) int { return v.VmPort }).(pulumi.IntOutput)
}

// The name of the VPC to peer with the Cloud SQL private network.
func (o ReverseSshConnectivityOutput) Vpc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReverseSshConnectivity) *string { return v.Vpc }).(pulumi.StringPtrOutput)
}

type ReverseSshConnectivityPtrOutput struct{ *pulumi.OutputState }

func (ReverseSshConnectivityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReverseSshConnectivity)(nil)).Elem()
}

func (o ReverseSshConnectivityPtrOutput) ToReverseSshConnectivityPtrOutput() ReverseSshConnectivityPtrOutput {
	return o
}

func (o ReverseSshConnectivityPtrOutput) ToReverseSshConnectivityPtrOutputWithContext(ctx context.Context) ReverseSshConnectivityPtrOutput {
	return o
}

func (o ReverseSshConnectivityPtrOutput) Elem() ReverseSshConnectivityOutput {
	return o.ApplyT(func(v *ReverseSshConnectivity) ReverseSshConnectivity {
		if v != nil {
			return *v
		}
		var ret ReverseSshConnectivity
		return ret
	}).(ReverseSshConnectivityOutput)
}

// The name of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.
func (o ReverseSshConnectivityPtrOutput) Vm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReverseSshConnectivity) *string {
		if v == nil {
			return nil
		}
		return v.Vm
	}).(pulumi.StringPtrOutput)
}

// The IP of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.
func (o ReverseSshConnectivityPtrOutput) VmIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReverseSshConnectivity) *string {
		if v == nil {
			return nil
		}
		return &v.VmIp
	}).(pulumi.StringPtrOutput)
}

// The forwarding port of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.
func (o ReverseSshConnectivityPtrOutput) VmPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ReverseSshConnectivity) *int {
		if v == nil {
			return nil
		}
		return &v.VmPort
	}).(pulumi.IntPtrOutput)
}

// The name of the VPC to peer with the Cloud SQL private network.
func (o ReverseSshConnectivityPtrOutput) Vpc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReverseSshConnectivity) *string {
		if v == nil {
			return nil
		}
		return v.Vpc
	}).(pulumi.StringPtrOutput)
}

// The details needed to configure a reverse SSH tunnel between the source and destination databases. These details will be used when calling the generateSshScript method (see https://cloud.google.com/database-migration/docs/reference/rest/v1/projects.locations.migrationJobs/generateSshScript) to produce the script that will help set up the reverse SSH tunnel, and to set up the VPC peering between the Cloud SQL private network and the VPC.
type ReverseSshConnectivityResponse struct {
	// The name of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.
	Vm string `pulumi:"vm"`
	// The IP of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.
	VmIp string `pulumi:"vmIp"`
	// The forwarding port of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.
	VmPort int `pulumi:"vmPort"`
	// The name of the VPC to peer with the Cloud SQL private network.
	Vpc string `pulumi:"vpc"`
}

// The details needed to configure a reverse SSH tunnel between the source and destination databases. These details will be used when calling the generateSshScript method (see https://cloud.google.com/database-migration/docs/reference/rest/v1/projects.locations.migrationJobs/generateSshScript) to produce the script that will help set up the reverse SSH tunnel, and to set up the VPC peering between the Cloud SQL private network and the VPC.
type ReverseSshConnectivityResponseOutput struct{ *pulumi.OutputState }

func (ReverseSshConnectivityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReverseSshConnectivityResponse)(nil)).Elem()
}

func (o ReverseSshConnectivityResponseOutput) ToReverseSshConnectivityResponseOutput() ReverseSshConnectivityResponseOutput {
	return o
}

func (o ReverseSshConnectivityResponseOutput) ToReverseSshConnectivityResponseOutputWithContext(ctx context.Context) ReverseSshConnectivityResponseOutput {
	return o
}

// The name of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.
func (o ReverseSshConnectivityResponseOutput) Vm() pulumi.StringOutput {
	return o.ApplyT(func(v ReverseSshConnectivityResponse) string { return v.Vm }).(pulumi.StringOutput)
}

// The IP of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.
func (o ReverseSshConnectivityResponseOutput) VmIp() pulumi.StringOutput {
	return o.ApplyT(func(v ReverseSshConnectivityResponse) string { return v.VmIp }).(pulumi.StringOutput)
}

// The forwarding port of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.
func (o ReverseSshConnectivityResponseOutput) VmPort() pulumi.IntOutput {
	return o.ApplyT(func(v ReverseSshConnectivityResponse) int { return v.VmPort }).(pulumi.IntOutput)
}

// The name of the VPC to peer with the Cloud SQL private network.
func (o ReverseSshConnectivityResponseOutput) Vpc() pulumi.StringOutput {
	return o.ApplyT(func(v ReverseSshConnectivityResponse) string { return v.Vpc }).(pulumi.StringOutput)
}

// This allows the data to change scale, for example if the source is 2 digits after the decimal point, specify round to scale value = 2. If for example the value needs to be converted to an integer, use round to scale value = 0.
type RoundToScale struct {
	// Scale value to be used
	Scale int `pulumi:"scale"`
}

// RoundToScaleInput is an input type that accepts RoundToScaleArgs and RoundToScaleOutput values.
// You can construct a concrete instance of `RoundToScaleInput` via:
//
//	RoundToScaleArgs{...}
type RoundToScaleInput interface {
	pulumi.Input

	ToRoundToScaleOutput() RoundToScaleOutput
	ToRoundToScaleOutputWithContext(context.Context) RoundToScaleOutput
}

// This allows the data to change scale, for example if the source is 2 digits after the decimal point, specify round to scale value = 2. If for example the value needs to be converted to an integer, use round to scale value = 0.
type RoundToScaleArgs struct {
	// Scale value to be used
	Scale pulumi.IntInput `pulumi:"scale"`
}

func (RoundToScaleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoundToScale)(nil)).Elem()
}

func (i RoundToScaleArgs) ToRoundToScaleOutput() RoundToScaleOutput {
	return i.ToRoundToScaleOutputWithContext(context.Background())
}

func (i RoundToScaleArgs) ToRoundToScaleOutputWithContext(ctx context.Context) RoundToScaleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoundToScaleOutput)
}

func (i RoundToScaleArgs) ToRoundToScalePtrOutput() RoundToScalePtrOutput {
	return i.ToRoundToScalePtrOutputWithContext(context.Background())
}

func (i RoundToScaleArgs) ToRoundToScalePtrOutputWithContext(ctx context.Context) RoundToScalePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoundToScaleOutput).ToRoundToScalePtrOutputWithContext(ctx)
}

// RoundToScalePtrInput is an input type that accepts RoundToScaleArgs, RoundToScalePtr and RoundToScalePtrOutput values.
// You can construct a concrete instance of `RoundToScalePtrInput` via:
//
//	        RoundToScaleArgs{...}
//
//	or:
//
//	        nil
type RoundToScalePtrInput interface {
	pulumi.Input

	ToRoundToScalePtrOutput() RoundToScalePtrOutput
	ToRoundToScalePtrOutputWithContext(context.Context) RoundToScalePtrOutput
}

type roundToScalePtrType RoundToScaleArgs

func RoundToScalePtr(v *RoundToScaleArgs) RoundToScalePtrInput {
	return (*roundToScalePtrType)(v)
}

func (*roundToScalePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RoundToScale)(nil)).Elem()
}

func (i *roundToScalePtrType) ToRoundToScalePtrOutput() RoundToScalePtrOutput {
	return i.ToRoundToScalePtrOutputWithContext(context.Background())
}

func (i *roundToScalePtrType) ToRoundToScalePtrOutputWithContext(ctx context.Context) RoundToScalePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoundToScalePtrOutput)
}

// This allows the data to change scale, for example if the source is 2 digits after the decimal point, specify round to scale value = 2. If for example the value needs to be converted to an integer, use round to scale value = 0.
type RoundToScaleOutput struct{ *pulumi.OutputState }

func (RoundToScaleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoundToScale)(nil)).Elem()
}

func (o RoundToScaleOutput) ToRoundToScaleOutput() RoundToScaleOutput {
	return o
}

func (o RoundToScaleOutput) ToRoundToScaleOutputWithContext(ctx context.Context) RoundToScaleOutput {
	return o
}

func (o RoundToScaleOutput) ToRoundToScalePtrOutput() RoundToScalePtrOutput {
	return o.ToRoundToScalePtrOutputWithContext(context.Background())
}

func (o RoundToScaleOutput) ToRoundToScalePtrOutputWithContext(ctx context.Context) RoundToScalePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RoundToScale) *RoundToScale {
		return &v
	}).(RoundToScalePtrOutput)
}

// Scale value to be used
func (o RoundToScaleOutput) Scale() pulumi.IntOutput {
	return o.ApplyT(func(v RoundToScale) int { return v.Scale }).(pulumi.IntOutput)
}

type RoundToScalePtrOutput struct{ *pulumi.OutputState }

func (RoundToScalePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoundToScale)(nil)).Elem()
}

func (o RoundToScalePtrOutput) ToRoundToScalePtrOutput() RoundToScalePtrOutput {
	return o
}

func (o RoundToScalePtrOutput) ToRoundToScalePtrOutputWithContext(ctx context.Context) RoundToScalePtrOutput {
	return o
}

func (o RoundToScalePtrOutput) Elem() RoundToScaleOutput {
	return o.ApplyT(func(v *RoundToScale) RoundToScale {
		if v != nil {
			return *v
		}
		var ret RoundToScale
		return ret
	}).(RoundToScaleOutput)
}

// Scale value to be used
func (o RoundToScalePtrOutput) Scale() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RoundToScale) *int {
		if v == nil {
			return nil
		}
		return &v.Scale
	}).(pulumi.IntPtrOutput)
}

// This allows the data to change scale, for example if the source is 2 digits after the decimal point, specify round to scale value = 2. If for example the value needs to be converted to an integer, use round to scale value = 0.
type RoundToScaleResponse struct {
	// Scale value to be used
	Scale int `pulumi:"scale"`
}

// This allows the data to change scale, for example if the source is 2 digits after the decimal point, specify round to scale value = 2. If for example the value needs to be converted to an integer, use round to scale value = 0.
type RoundToScaleResponseOutput struct{ *pulumi.OutputState }

func (RoundToScaleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoundToScaleResponse)(nil)).Elem()
}

func (o RoundToScaleResponseOutput) ToRoundToScaleResponseOutput() RoundToScaleResponseOutput {
	return o
}

func (o RoundToScaleResponseOutput) ToRoundToScaleResponseOutputWithContext(ctx context.Context) RoundToScaleResponseOutput {
	return o
}

// Scale value to be used
func (o RoundToScaleResponseOutput) Scale() pulumi.IntOutput {
	return o.ApplyT(func(v RoundToScaleResponse) int { return v.Scale }).(pulumi.IntOutput)
}

// Options to configure rule type SetTablePrimaryKey. The rule is used to specify the columns and name to configure/alter the primary key of a table. The rule filter field can refer to one entity. The rule scope can be one of: Table.
type SetTablePrimaryKey struct {
	// Optional. Name for the primary key
	PrimaryKey *string `pulumi:"primaryKey"`
	// List of column names for the primary key
	PrimaryKeyColumns []string `pulumi:"primaryKeyColumns"`
}

// SetTablePrimaryKeyInput is an input type that accepts SetTablePrimaryKeyArgs and SetTablePrimaryKeyOutput values.
// You can construct a concrete instance of `SetTablePrimaryKeyInput` via:
//
//	SetTablePrimaryKeyArgs{...}
type SetTablePrimaryKeyInput interface {
	pulumi.Input

	ToSetTablePrimaryKeyOutput() SetTablePrimaryKeyOutput
	ToSetTablePrimaryKeyOutputWithContext(context.Context) SetTablePrimaryKeyOutput
}

// Options to configure rule type SetTablePrimaryKey. The rule is used to specify the columns and name to configure/alter the primary key of a table. The rule filter field can refer to one entity. The rule scope can be one of: Table.
type SetTablePrimaryKeyArgs struct {
	// Optional. Name for the primary key
	PrimaryKey pulumi.StringPtrInput `pulumi:"primaryKey"`
	// List of column names for the primary key
	PrimaryKeyColumns pulumi.StringArrayInput `pulumi:"primaryKeyColumns"`
}

func (SetTablePrimaryKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SetTablePrimaryKey)(nil)).Elem()
}

func (i SetTablePrimaryKeyArgs) ToSetTablePrimaryKeyOutput() SetTablePrimaryKeyOutput {
	return i.ToSetTablePrimaryKeyOutputWithContext(context.Background())
}

func (i SetTablePrimaryKeyArgs) ToSetTablePrimaryKeyOutputWithContext(ctx context.Context) SetTablePrimaryKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SetTablePrimaryKeyOutput)
}

func (i SetTablePrimaryKeyArgs) ToSetTablePrimaryKeyPtrOutput() SetTablePrimaryKeyPtrOutput {
	return i.ToSetTablePrimaryKeyPtrOutputWithContext(context.Background())
}

func (i SetTablePrimaryKeyArgs) ToSetTablePrimaryKeyPtrOutputWithContext(ctx context.Context) SetTablePrimaryKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SetTablePrimaryKeyOutput).ToSetTablePrimaryKeyPtrOutputWithContext(ctx)
}

// SetTablePrimaryKeyPtrInput is an input type that accepts SetTablePrimaryKeyArgs, SetTablePrimaryKeyPtr and SetTablePrimaryKeyPtrOutput values.
// You can construct a concrete instance of `SetTablePrimaryKeyPtrInput` via:
//
//	        SetTablePrimaryKeyArgs{...}
//
//	or:
//
//	        nil
type SetTablePrimaryKeyPtrInput interface {
	pulumi.Input

	ToSetTablePrimaryKeyPtrOutput() SetTablePrimaryKeyPtrOutput
	ToSetTablePrimaryKeyPtrOutputWithContext(context.Context) SetTablePrimaryKeyPtrOutput
}

type setTablePrimaryKeyPtrType SetTablePrimaryKeyArgs

func SetTablePrimaryKeyPtr(v *SetTablePrimaryKeyArgs) SetTablePrimaryKeyPtrInput {
	return (*setTablePrimaryKeyPtrType)(v)
}

func (*setTablePrimaryKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SetTablePrimaryKey)(nil)).Elem()
}

func (i *setTablePrimaryKeyPtrType) ToSetTablePrimaryKeyPtrOutput() SetTablePrimaryKeyPtrOutput {
	return i.ToSetTablePrimaryKeyPtrOutputWithContext(context.Background())
}

func (i *setTablePrimaryKeyPtrType) ToSetTablePrimaryKeyPtrOutputWithContext(ctx context.Context) SetTablePrimaryKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SetTablePrimaryKeyPtrOutput)
}

// Options to configure rule type SetTablePrimaryKey. The rule is used to specify the columns and name to configure/alter the primary key of a table. The rule filter field can refer to one entity. The rule scope can be one of: Table.
type SetTablePrimaryKeyOutput struct{ *pulumi.OutputState }

func (SetTablePrimaryKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SetTablePrimaryKey)(nil)).Elem()
}

func (o SetTablePrimaryKeyOutput) ToSetTablePrimaryKeyOutput() SetTablePrimaryKeyOutput {
	return o
}

func (o SetTablePrimaryKeyOutput) ToSetTablePrimaryKeyOutputWithContext(ctx context.Context) SetTablePrimaryKeyOutput {
	return o
}

func (o SetTablePrimaryKeyOutput) ToSetTablePrimaryKeyPtrOutput() SetTablePrimaryKeyPtrOutput {
	return o.ToSetTablePrimaryKeyPtrOutputWithContext(context.Background())
}

func (o SetTablePrimaryKeyOutput) ToSetTablePrimaryKeyPtrOutputWithContext(ctx context.Context) SetTablePrimaryKeyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SetTablePrimaryKey) *SetTablePrimaryKey {
		return &v
	}).(SetTablePrimaryKeyPtrOutput)
}

// Optional. Name for the primary key
func (o SetTablePrimaryKeyOutput) PrimaryKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SetTablePrimaryKey) *string { return v.PrimaryKey }).(pulumi.StringPtrOutput)
}

// List of column names for the primary key
func (o SetTablePrimaryKeyOutput) PrimaryKeyColumns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SetTablePrimaryKey) []string { return v.PrimaryKeyColumns }).(pulumi.StringArrayOutput)
}

type SetTablePrimaryKeyPtrOutput struct{ *pulumi.OutputState }

func (SetTablePrimaryKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SetTablePrimaryKey)(nil)).Elem()
}

func (o SetTablePrimaryKeyPtrOutput) ToSetTablePrimaryKeyPtrOutput() SetTablePrimaryKeyPtrOutput {
	return o
}

func (o SetTablePrimaryKeyPtrOutput) ToSetTablePrimaryKeyPtrOutputWithContext(ctx context.Context) SetTablePrimaryKeyPtrOutput {
	return o
}

func (o SetTablePrimaryKeyPtrOutput) Elem() SetTablePrimaryKeyOutput {
	return o.ApplyT(func(v *SetTablePrimaryKey) SetTablePrimaryKey {
		if v != nil {
			return *v
		}
		var ret SetTablePrimaryKey
		return ret
	}).(SetTablePrimaryKeyOutput)
}

// Optional. Name for the primary key
func (o SetTablePrimaryKeyPtrOutput) PrimaryKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SetTablePrimaryKey) *string {
		if v == nil {
			return nil
		}
		return v.PrimaryKey
	}).(pulumi.StringPtrOutput)
}

// List of column names for the primary key
func (o SetTablePrimaryKeyPtrOutput) PrimaryKeyColumns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SetTablePrimaryKey) []string {
		if v == nil {
			return nil
		}
		return v.PrimaryKeyColumns
	}).(pulumi.StringArrayOutput)
}

// Options to configure rule type SetTablePrimaryKey. The rule is used to specify the columns and name to configure/alter the primary key of a table. The rule filter field can refer to one entity. The rule scope can be one of: Table.
type SetTablePrimaryKeyResponse struct {
	// Optional. Name for the primary key
	PrimaryKey string `pulumi:"primaryKey"`
	// List of column names for the primary key
	PrimaryKeyColumns []string `pulumi:"primaryKeyColumns"`
}

// Options to configure rule type SetTablePrimaryKey. The rule is used to specify the columns and name to configure/alter the primary key of a table. The rule filter field can refer to one entity. The rule scope can be one of: Table.
type SetTablePrimaryKeyResponseOutput struct{ *pulumi.OutputState }

func (SetTablePrimaryKeyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SetTablePrimaryKeyResponse)(nil)).Elem()
}

func (o SetTablePrimaryKeyResponseOutput) ToSetTablePrimaryKeyResponseOutput() SetTablePrimaryKeyResponseOutput {
	return o
}

func (o SetTablePrimaryKeyResponseOutput) ToSetTablePrimaryKeyResponseOutputWithContext(ctx context.Context) SetTablePrimaryKeyResponseOutput {
	return o
}

// Optional. Name for the primary key
func (o SetTablePrimaryKeyResponseOutput) PrimaryKey() pulumi.StringOutput {
	return o.ApplyT(func(v SetTablePrimaryKeyResponse) string { return v.PrimaryKey }).(pulumi.StringOutput)
}

// List of column names for the primary key
func (o SetTablePrimaryKeyResponseOutput) PrimaryKeyColumns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SetTablePrimaryKeyResponse) []string { return v.PrimaryKeyColumns }).(pulumi.StringArrayOutput)
}

// Options to configure rule type SingleColumnChange. The rule is used to change the properties of a column. The rule filter field can refer to one entity. The rule scope can be one of: Column. When using this rule, if a field is not specified than the destination column's configuration will be the same as the one in the source column..
type SingleColumnChange struct {
	// Optional. Is the column of array type.
	Array *bool `pulumi:"array"`
	// Optional. The length of the array, only relevant if the column type is an array.
	ArrayLength *int `pulumi:"arrayLength"`
	// Optional. Is the column auto-generated/identity.
	AutoGenerated *bool `pulumi:"autoGenerated"`
	// Optional. Charset override - instead of table level charset.
	Charset *string `pulumi:"charset"`
	// Optional. Collation override - instead of table level collation.
	Collation *string `pulumi:"collation"`
	// Optional. Comment associated with the column.
	Comment *string `pulumi:"comment"`
	// Optional. Custom engine specific features.
	CustomFeatures map[string]interface{} `pulumi:"customFeatures"`
	// Optional. Column data type name.
	DataType *string `pulumi:"dataType"`
	// Optional. Column fractional seconds precision - e.g. 2 as in timestamp (2) - when relevant.
	FractionalSecondsPrecision *int `pulumi:"fractionalSecondsPrecision"`
	// Optional. Column length - e.g. 50 as in varchar (50) - when relevant.
	Length *string `pulumi:"length"`
	// Optional. Is the column nullable.
	Nullable *bool `pulumi:"nullable"`
	// Optional. Column precision - e.g. 8 as in double (8,2) - when relevant.
	Precision *int `pulumi:"precision"`
	// Optional. Column scale - e.g. 2 as in double (8,2) - when relevant.
	Scale *int `pulumi:"scale"`
	// Optional. Specifies the list of values allowed in the column.
	SetValues []string `pulumi:"setValues"`
	// Optional. Is the column a UDT (User-defined Type).
	Udt *bool `pulumi:"udt"`
}

// SingleColumnChangeInput is an input type that accepts SingleColumnChangeArgs and SingleColumnChangeOutput values.
// You can construct a concrete instance of `SingleColumnChangeInput` via:
//
//	SingleColumnChangeArgs{...}
type SingleColumnChangeInput interface {
	pulumi.Input

	ToSingleColumnChangeOutput() SingleColumnChangeOutput
	ToSingleColumnChangeOutputWithContext(context.Context) SingleColumnChangeOutput
}

// Options to configure rule type SingleColumnChange. The rule is used to change the properties of a column. The rule filter field can refer to one entity. The rule scope can be one of: Column. When using this rule, if a field is not specified than the destination column's configuration will be the same as the one in the source column..
type SingleColumnChangeArgs struct {
	// Optional. Is the column of array type.
	Array pulumi.BoolPtrInput `pulumi:"array"`
	// Optional. The length of the array, only relevant if the column type is an array.
	ArrayLength pulumi.IntPtrInput `pulumi:"arrayLength"`
	// Optional. Is the column auto-generated/identity.
	AutoGenerated pulumi.BoolPtrInput `pulumi:"autoGenerated"`
	// Optional. Charset override - instead of table level charset.
	Charset pulumi.StringPtrInput `pulumi:"charset"`
	// Optional. Collation override - instead of table level collation.
	Collation pulumi.StringPtrInput `pulumi:"collation"`
	// Optional. Comment associated with the column.
	Comment pulumi.StringPtrInput `pulumi:"comment"`
	// Optional. Custom engine specific features.
	CustomFeatures pulumi.MapInput `pulumi:"customFeatures"`
	// Optional. Column data type name.
	DataType pulumi.StringPtrInput `pulumi:"dataType"`
	// Optional. Column fractional seconds precision - e.g. 2 as in timestamp (2) - when relevant.
	FractionalSecondsPrecision pulumi.IntPtrInput `pulumi:"fractionalSecondsPrecision"`
	// Optional. Column length - e.g. 50 as in varchar (50) - when relevant.
	Length pulumi.StringPtrInput `pulumi:"length"`
	// Optional. Is the column nullable.
	Nullable pulumi.BoolPtrInput `pulumi:"nullable"`
	// Optional. Column precision - e.g. 8 as in double (8,2) - when relevant.
	Precision pulumi.IntPtrInput `pulumi:"precision"`
	// Optional. Column scale - e.g. 2 as in double (8,2) - when relevant.
	Scale pulumi.IntPtrInput `pulumi:"scale"`
	// Optional. Specifies the list of values allowed in the column.
	SetValues pulumi.StringArrayInput `pulumi:"setValues"`
	// Optional. Is the column a UDT (User-defined Type).
	Udt pulumi.BoolPtrInput `pulumi:"udt"`
}

func (SingleColumnChangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SingleColumnChange)(nil)).Elem()
}

func (i SingleColumnChangeArgs) ToSingleColumnChangeOutput() SingleColumnChangeOutput {
	return i.ToSingleColumnChangeOutputWithContext(context.Background())
}

func (i SingleColumnChangeArgs) ToSingleColumnChangeOutputWithContext(ctx context.Context) SingleColumnChangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SingleColumnChangeOutput)
}

func (i SingleColumnChangeArgs) ToSingleColumnChangePtrOutput() SingleColumnChangePtrOutput {
	return i.ToSingleColumnChangePtrOutputWithContext(context.Background())
}

func (i SingleColumnChangeArgs) ToSingleColumnChangePtrOutputWithContext(ctx context.Context) SingleColumnChangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SingleColumnChangeOutput).ToSingleColumnChangePtrOutputWithContext(ctx)
}

// SingleColumnChangePtrInput is an input type that accepts SingleColumnChangeArgs, SingleColumnChangePtr and SingleColumnChangePtrOutput values.
// You can construct a concrete instance of `SingleColumnChangePtrInput` via:
//
//	        SingleColumnChangeArgs{...}
//
//	or:
//
//	        nil
type SingleColumnChangePtrInput interface {
	pulumi.Input

	ToSingleColumnChangePtrOutput() SingleColumnChangePtrOutput
	ToSingleColumnChangePtrOutputWithContext(context.Context) SingleColumnChangePtrOutput
}

type singleColumnChangePtrType SingleColumnChangeArgs

func SingleColumnChangePtr(v *SingleColumnChangeArgs) SingleColumnChangePtrInput {
	return (*singleColumnChangePtrType)(v)
}

func (*singleColumnChangePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SingleColumnChange)(nil)).Elem()
}

func (i *singleColumnChangePtrType) ToSingleColumnChangePtrOutput() SingleColumnChangePtrOutput {
	return i.ToSingleColumnChangePtrOutputWithContext(context.Background())
}

func (i *singleColumnChangePtrType) ToSingleColumnChangePtrOutputWithContext(ctx context.Context) SingleColumnChangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SingleColumnChangePtrOutput)
}

// Options to configure rule type SingleColumnChange. The rule is used to change the properties of a column. The rule filter field can refer to one entity. The rule scope can be one of: Column. When using this rule, if a field is not specified than the destination column's configuration will be the same as the one in the source column..
type SingleColumnChangeOutput struct{ *pulumi.OutputState }

func (SingleColumnChangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SingleColumnChange)(nil)).Elem()
}

func (o SingleColumnChangeOutput) ToSingleColumnChangeOutput() SingleColumnChangeOutput {
	return o
}

func (o SingleColumnChangeOutput) ToSingleColumnChangeOutputWithContext(ctx context.Context) SingleColumnChangeOutput {
	return o
}

func (o SingleColumnChangeOutput) ToSingleColumnChangePtrOutput() SingleColumnChangePtrOutput {
	return o.ToSingleColumnChangePtrOutputWithContext(context.Background())
}

func (o SingleColumnChangeOutput) ToSingleColumnChangePtrOutputWithContext(ctx context.Context) SingleColumnChangePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SingleColumnChange) *SingleColumnChange {
		return &v
	}).(SingleColumnChangePtrOutput)
}

// Optional. Is the column of array type.
func (o SingleColumnChangeOutput) Array() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SingleColumnChange) *bool { return v.Array }).(pulumi.BoolPtrOutput)
}

// Optional. The length of the array, only relevant if the column type is an array.
func (o SingleColumnChangeOutput) ArrayLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SingleColumnChange) *int { return v.ArrayLength }).(pulumi.IntPtrOutput)
}

// Optional. Is the column auto-generated/identity.
func (o SingleColumnChangeOutput) AutoGenerated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SingleColumnChange) *bool { return v.AutoGenerated }).(pulumi.BoolPtrOutput)
}

// Optional. Charset override - instead of table level charset.
func (o SingleColumnChangeOutput) Charset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SingleColumnChange) *string { return v.Charset }).(pulumi.StringPtrOutput)
}

// Optional. Collation override - instead of table level collation.
func (o SingleColumnChangeOutput) Collation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SingleColumnChange) *string { return v.Collation }).(pulumi.StringPtrOutput)
}

// Optional. Comment associated with the column.
func (o SingleColumnChangeOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SingleColumnChange) *string { return v.Comment }).(pulumi.StringPtrOutput)
}

// Optional. Custom engine specific features.
func (o SingleColumnChangeOutput) CustomFeatures() pulumi.MapOutput {
	return o.ApplyT(func(v SingleColumnChange) map[string]interface{} { return v.CustomFeatures }).(pulumi.MapOutput)
}

// Optional. Column data type name.
func (o SingleColumnChangeOutput) DataType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SingleColumnChange) *string { return v.DataType }).(pulumi.StringPtrOutput)
}

// Optional. Column fractional seconds precision - e.g. 2 as in timestamp (2) - when relevant.
func (o SingleColumnChangeOutput) FractionalSecondsPrecision() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SingleColumnChange) *int { return v.FractionalSecondsPrecision }).(pulumi.IntPtrOutput)
}

// Optional. Column length - e.g. 50 as in varchar (50) - when relevant.
func (o SingleColumnChangeOutput) Length() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SingleColumnChange) *string { return v.Length }).(pulumi.StringPtrOutput)
}

// Optional. Is the column nullable.
func (o SingleColumnChangeOutput) Nullable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SingleColumnChange) *bool { return v.Nullable }).(pulumi.BoolPtrOutput)
}

// Optional. Column precision - e.g. 8 as in double (8,2) - when relevant.
func (o SingleColumnChangeOutput) Precision() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SingleColumnChange) *int { return v.Precision }).(pulumi.IntPtrOutput)
}

// Optional. Column scale - e.g. 2 as in double (8,2) - when relevant.
func (o SingleColumnChangeOutput) Scale() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SingleColumnChange) *int { return v.Scale }).(pulumi.IntPtrOutput)
}

// Optional. Specifies the list of values allowed in the column.
func (o SingleColumnChangeOutput) SetValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SingleColumnChange) []string { return v.SetValues }).(pulumi.StringArrayOutput)
}

// Optional. Is the column a UDT (User-defined Type).
func (o SingleColumnChangeOutput) Udt() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SingleColumnChange) *bool { return v.Udt }).(pulumi.BoolPtrOutput)
}

type SingleColumnChangePtrOutput struct{ *pulumi.OutputState }

func (SingleColumnChangePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SingleColumnChange)(nil)).Elem()
}

func (o SingleColumnChangePtrOutput) ToSingleColumnChangePtrOutput() SingleColumnChangePtrOutput {
	return o
}

func (o SingleColumnChangePtrOutput) ToSingleColumnChangePtrOutputWithContext(ctx context.Context) SingleColumnChangePtrOutput {
	return o
}

func (o SingleColumnChangePtrOutput) Elem() SingleColumnChangeOutput {
	return o.ApplyT(func(v *SingleColumnChange) SingleColumnChange {
		if v != nil {
			return *v
		}
		var ret SingleColumnChange
		return ret
	}).(SingleColumnChangeOutput)
}

// Optional. Is the column of array type.
func (o SingleColumnChangePtrOutput) Array() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SingleColumnChange) *bool {
		if v == nil {
			return nil
		}
		return v.Array
	}).(pulumi.BoolPtrOutput)
}

// Optional. The length of the array, only relevant if the column type is an array.
func (o SingleColumnChangePtrOutput) ArrayLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SingleColumnChange) *int {
		if v == nil {
			return nil
		}
		return v.ArrayLength
	}).(pulumi.IntPtrOutput)
}

// Optional. Is the column auto-generated/identity.
func (o SingleColumnChangePtrOutput) AutoGenerated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SingleColumnChange) *bool {
		if v == nil {
			return nil
		}
		return v.AutoGenerated
	}).(pulumi.BoolPtrOutput)
}

// Optional. Charset override - instead of table level charset.
func (o SingleColumnChangePtrOutput) Charset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SingleColumnChange) *string {
		if v == nil {
			return nil
		}
		return v.Charset
	}).(pulumi.StringPtrOutput)
}

// Optional. Collation override - instead of table level collation.
func (o SingleColumnChangePtrOutput) Collation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SingleColumnChange) *string {
		if v == nil {
			return nil
		}
		return v.Collation
	}).(pulumi.StringPtrOutput)
}

// Optional. Comment associated with the column.
func (o SingleColumnChangePtrOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SingleColumnChange) *string {
		if v == nil {
			return nil
		}
		return v.Comment
	}).(pulumi.StringPtrOutput)
}

// Optional. Custom engine specific features.
func (o SingleColumnChangePtrOutput) CustomFeatures() pulumi.MapOutput {
	return o.ApplyT(func(v *SingleColumnChange) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.CustomFeatures
	}).(pulumi.MapOutput)
}

// Optional. Column data type name.
func (o SingleColumnChangePtrOutput) DataType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SingleColumnChange) *string {
		if v == nil {
			return nil
		}
		return v.DataType
	}).(pulumi.StringPtrOutput)
}

// Optional. Column fractional seconds precision - e.g. 2 as in timestamp (2) - when relevant.
func (o SingleColumnChangePtrOutput) FractionalSecondsPrecision() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SingleColumnChange) *int {
		if v == nil {
			return nil
		}
		return v.FractionalSecondsPrecision
	}).(pulumi.IntPtrOutput)
}

// Optional. Column length - e.g. 50 as in varchar (50) - when relevant.
func (o SingleColumnChangePtrOutput) Length() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SingleColumnChange) *string {
		if v == nil {
			return nil
		}
		return v.Length
	}).(pulumi.StringPtrOutput)
}

// Optional. Is the column nullable.
func (o SingleColumnChangePtrOutput) Nullable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SingleColumnChange) *bool {
		if v == nil {
			return nil
		}
		return v.Nullable
	}).(pulumi.BoolPtrOutput)
}

// Optional. Column precision - e.g. 8 as in double (8,2) - when relevant.
func (o SingleColumnChangePtrOutput) Precision() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SingleColumnChange) *int {
		if v == nil {
			return nil
		}
		return v.Precision
	}).(pulumi.IntPtrOutput)
}

// Optional. Column scale - e.g. 2 as in double (8,2) - when relevant.
func (o SingleColumnChangePtrOutput) Scale() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SingleColumnChange) *int {
		if v == nil {
			return nil
		}
		return v.Scale
	}).(pulumi.IntPtrOutput)
}

// Optional. Specifies the list of values allowed in the column.
func (o SingleColumnChangePtrOutput) SetValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SingleColumnChange) []string {
		if v == nil {
			return nil
		}
		return v.SetValues
	}).(pulumi.StringArrayOutput)
}

// Optional. Is the column a UDT (User-defined Type).
func (o SingleColumnChangePtrOutput) Udt() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SingleColumnChange) *bool {
		if v == nil {
			return nil
		}
		return v.Udt
	}).(pulumi.BoolPtrOutput)
}

// Options to configure rule type SingleColumnChange. The rule is used to change the properties of a column. The rule filter field can refer to one entity. The rule scope can be one of: Column. When using this rule, if a field is not specified than the destination column's configuration will be the same as the one in the source column..
type SingleColumnChangeResponse struct {
	// Optional. Is the column of array type.
	Array bool `pulumi:"array"`
	// Optional. The length of the array, only relevant if the column type is an array.
	ArrayLength int `pulumi:"arrayLength"`
	// Optional. Is the column auto-generated/identity.
	AutoGenerated bool `pulumi:"autoGenerated"`
	// Optional. Charset override - instead of table level charset.
	Charset string `pulumi:"charset"`
	// Optional. Collation override - instead of table level collation.
	Collation string `pulumi:"collation"`
	// Optional. Comment associated with the column.
	Comment string `pulumi:"comment"`
	// Optional. Custom engine specific features.
	CustomFeatures map[string]interface{} `pulumi:"customFeatures"`
	// Optional. Column data type name.
	DataType string `pulumi:"dataType"`
	// Optional. Column fractional seconds precision - e.g. 2 as in timestamp (2) - when relevant.
	FractionalSecondsPrecision int `pulumi:"fractionalSecondsPrecision"`
	// Optional. Column length - e.g. 50 as in varchar (50) - when relevant.
	Length string `pulumi:"length"`
	// Optional. Is the column nullable.
	Nullable bool `pulumi:"nullable"`
	// Optional. Column precision - e.g. 8 as in double (8,2) - when relevant.
	Precision int `pulumi:"precision"`
	// Optional. Column scale - e.g. 2 as in double (8,2) - when relevant.
	Scale int `pulumi:"scale"`
	// Optional. Specifies the list of values allowed in the column.
	SetValues []string `pulumi:"setValues"`
	// Optional. Is the column a UDT (User-defined Type).
	Udt bool `pulumi:"udt"`
}

// Options to configure rule type SingleColumnChange. The rule is used to change the properties of a column. The rule filter field can refer to one entity. The rule scope can be one of: Column. When using this rule, if a field is not specified than the destination column's configuration will be the same as the one in the source column..
type SingleColumnChangeResponseOutput struct{ *pulumi.OutputState }

func (SingleColumnChangeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SingleColumnChangeResponse)(nil)).Elem()
}

func (o SingleColumnChangeResponseOutput) ToSingleColumnChangeResponseOutput() SingleColumnChangeResponseOutput {
	return o
}

func (o SingleColumnChangeResponseOutput) ToSingleColumnChangeResponseOutputWithContext(ctx context.Context) SingleColumnChangeResponseOutput {
	return o
}

// Optional. Is the column of array type.
func (o SingleColumnChangeResponseOutput) Array() pulumi.BoolOutput {
	return o.ApplyT(func(v SingleColumnChangeResponse) bool { return v.Array }).(pulumi.BoolOutput)
}

// Optional. The length of the array, only relevant if the column type is an array.
func (o SingleColumnChangeResponseOutput) ArrayLength() pulumi.IntOutput {
	return o.ApplyT(func(v SingleColumnChangeResponse) int { return v.ArrayLength }).(pulumi.IntOutput)
}

// Optional. Is the column auto-generated/identity.
func (o SingleColumnChangeResponseOutput) AutoGenerated() pulumi.BoolOutput {
	return o.ApplyT(func(v SingleColumnChangeResponse) bool { return v.AutoGenerated }).(pulumi.BoolOutput)
}

// Optional. Charset override - instead of table level charset.
func (o SingleColumnChangeResponseOutput) Charset() pulumi.StringOutput {
	return o.ApplyT(func(v SingleColumnChangeResponse) string { return v.Charset }).(pulumi.StringOutput)
}

// Optional. Collation override - instead of table level collation.
func (o SingleColumnChangeResponseOutput) Collation() pulumi.StringOutput {
	return o.ApplyT(func(v SingleColumnChangeResponse) string { return v.Collation }).(pulumi.StringOutput)
}

// Optional. Comment associated with the column.
func (o SingleColumnChangeResponseOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v SingleColumnChangeResponse) string { return v.Comment }).(pulumi.StringOutput)
}

// Optional. Custom engine specific features.
func (o SingleColumnChangeResponseOutput) CustomFeatures() pulumi.MapOutput {
	return o.ApplyT(func(v SingleColumnChangeResponse) map[string]interface{} { return v.CustomFeatures }).(pulumi.MapOutput)
}

// Optional. Column data type name.
func (o SingleColumnChangeResponseOutput) DataType() pulumi.StringOutput {
	return o.ApplyT(func(v SingleColumnChangeResponse) string { return v.DataType }).(pulumi.StringOutput)
}

// Optional. Column fractional seconds precision - e.g. 2 as in timestamp (2) - when relevant.
func (o SingleColumnChangeResponseOutput) FractionalSecondsPrecision() pulumi.IntOutput {
	return o.ApplyT(func(v SingleColumnChangeResponse) int { return v.FractionalSecondsPrecision }).(pulumi.IntOutput)
}

// Optional. Column length - e.g. 50 as in varchar (50) - when relevant.
func (o SingleColumnChangeResponseOutput) Length() pulumi.StringOutput {
	return o.ApplyT(func(v SingleColumnChangeResponse) string { return v.Length }).(pulumi.StringOutput)
}

// Optional. Is the column nullable.
func (o SingleColumnChangeResponseOutput) Nullable() pulumi.BoolOutput {
	return o.ApplyT(func(v SingleColumnChangeResponse) bool { return v.Nullable }).(pulumi.BoolOutput)
}

// Optional. Column precision - e.g. 8 as in double (8,2) - when relevant.
func (o SingleColumnChangeResponseOutput) Precision() pulumi.IntOutput {
	return o.ApplyT(func(v SingleColumnChangeResponse) int { return v.Precision }).(pulumi.IntOutput)
}

// Optional. Column scale - e.g. 2 as in double (8,2) - when relevant.
func (o SingleColumnChangeResponseOutput) Scale() pulumi.IntOutput {
	return o.ApplyT(func(v SingleColumnChangeResponse) int { return v.Scale }).(pulumi.IntOutput)
}

// Optional. Specifies the list of values allowed in the column.
func (o SingleColumnChangeResponseOutput) SetValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SingleColumnChangeResponse) []string { return v.SetValues }).(pulumi.StringArrayOutput)
}

// Optional. Is the column a UDT (User-defined Type).
func (o SingleColumnChangeResponseOutput) Udt() pulumi.BoolOutput {
	return o.ApplyT(func(v SingleColumnChangeResponse) bool { return v.Udt }).(pulumi.BoolOutput)
}

// Options to configure rule type SingleEntityRename. The rule is used to rename an entity. The rule filter field can refer to only one entity. The rule scope can be one of: Database, Schema, Table, Column, Constraint, Index, View, Function, Stored Procedure, Materialized View, Sequence, UDT, Synonym
type SingleEntityRename struct {
	// The new name of the destination entity
	NewName string `pulumi:"newName"`
}

// SingleEntityRenameInput is an input type that accepts SingleEntityRenameArgs and SingleEntityRenameOutput values.
// You can construct a concrete instance of `SingleEntityRenameInput` via:
//
//	SingleEntityRenameArgs{...}
type SingleEntityRenameInput interface {
	pulumi.Input

	ToSingleEntityRenameOutput() SingleEntityRenameOutput
	ToSingleEntityRenameOutputWithContext(context.Context) SingleEntityRenameOutput
}

// Options to configure rule type SingleEntityRename. The rule is used to rename an entity. The rule filter field can refer to only one entity. The rule scope can be one of: Database, Schema, Table, Column, Constraint, Index, View, Function, Stored Procedure, Materialized View, Sequence, UDT, Synonym
type SingleEntityRenameArgs struct {
	// The new name of the destination entity
	NewName pulumi.StringInput `pulumi:"newName"`
}

func (SingleEntityRenameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SingleEntityRename)(nil)).Elem()
}

func (i SingleEntityRenameArgs) ToSingleEntityRenameOutput() SingleEntityRenameOutput {
	return i.ToSingleEntityRenameOutputWithContext(context.Background())
}

func (i SingleEntityRenameArgs) ToSingleEntityRenameOutputWithContext(ctx context.Context) SingleEntityRenameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SingleEntityRenameOutput)
}

func (i SingleEntityRenameArgs) ToSingleEntityRenamePtrOutput() SingleEntityRenamePtrOutput {
	return i.ToSingleEntityRenamePtrOutputWithContext(context.Background())
}

func (i SingleEntityRenameArgs) ToSingleEntityRenamePtrOutputWithContext(ctx context.Context) SingleEntityRenamePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SingleEntityRenameOutput).ToSingleEntityRenamePtrOutputWithContext(ctx)
}

// SingleEntityRenamePtrInput is an input type that accepts SingleEntityRenameArgs, SingleEntityRenamePtr and SingleEntityRenamePtrOutput values.
// You can construct a concrete instance of `SingleEntityRenamePtrInput` via:
//
//	        SingleEntityRenameArgs{...}
//
//	or:
//
//	        nil
type SingleEntityRenamePtrInput interface {
	pulumi.Input

	ToSingleEntityRenamePtrOutput() SingleEntityRenamePtrOutput
	ToSingleEntityRenamePtrOutputWithContext(context.Context) SingleEntityRenamePtrOutput
}

type singleEntityRenamePtrType SingleEntityRenameArgs

func SingleEntityRenamePtr(v *SingleEntityRenameArgs) SingleEntityRenamePtrInput {
	return (*singleEntityRenamePtrType)(v)
}

func (*singleEntityRenamePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SingleEntityRename)(nil)).Elem()
}

func (i *singleEntityRenamePtrType) ToSingleEntityRenamePtrOutput() SingleEntityRenamePtrOutput {
	return i.ToSingleEntityRenamePtrOutputWithContext(context.Background())
}

func (i *singleEntityRenamePtrType) ToSingleEntityRenamePtrOutputWithContext(ctx context.Context) SingleEntityRenamePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SingleEntityRenamePtrOutput)
}

// Options to configure rule type SingleEntityRename. The rule is used to rename an entity. The rule filter field can refer to only one entity. The rule scope can be one of: Database, Schema, Table, Column, Constraint, Index, View, Function, Stored Procedure, Materialized View, Sequence, UDT, Synonym
type SingleEntityRenameOutput struct{ *pulumi.OutputState }

func (SingleEntityRenameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SingleEntityRename)(nil)).Elem()
}

func (o SingleEntityRenameOutput) ToSingleEntityRenameOutput() SingleEntityRenameOutput {
	return o
}

func (o SingleEntityRenameOutput) ToSingleEntityRenameOutputWithContext(ctx context.Context) SingleEntityRenameOutput {
	return o
}

func (o SingleEntityRenameOutput) ToSingleEntityRenamePtrOutput() SingleEntityRenamePtrOutput {
	return o.ToSingleEntityRenamePtrOutputWithContext(context.Background())
}

func (o SingleEntityRenameOutput) ToSingleEntityRenamePtrOutputWithContext(ctx context.Context) SingleEntityRenamePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SingleEntityRename) *SingleEntityRename {
		return &v
	}).(SingleEntityRenamePtrOutput)
}

// The new name of the destination entity
func (o SingleEntityRenameOutput) NewName() pulumi.StringOutput {
	return o.ApplyT(func(v SingleEntityRename) string { return v.NewName }).(pulumi.StringOutput)
}

type SingleEntityRenamePtrOutput struct{ *pulumi.OutputState }

func (SingleEntityRenamePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SingleEntityRename)(nil)).Elem()
}

func (o SingleEntityRenamePtrOutput) ToSingleEntityRenamePtrOutput() SingleEntityRenamePtrOutput {
	return o
}

func (o SingleEntityRenamePtrOutput) ToSingleEntityRenamePtrOutputWithContext(ctx context.Context) SingleEntityRenamePtrOutput {
	return o
}

func (o SingleEntityRenamePtrOutput) Elem() SingleEntityRenameOutput {
	return o.ApplyT(func(v *SingleEntityRename) SingleEntityRename {
		if v != nil {
			return *v
		}
		var ret SingleEntityRename
		return ret
	}).(SingleEntityRenameOutput)
}

// The new name of the destination entity
func (o SingleEntityRenamePtrOutput) NewName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SingleEntityRename) *string {
		if v == nil {
			return nil
		}
		return &v.NewName
	}).(pulumi.StringPtrOutput)
}

// Options to configure rule type SingleEntityRename. The rule is used to rename an entity. The rule filter field can refer to only one entity. The rule scope can be one of: Database, Schema, Table, Column, Constraint, Index, View, Function, Stored Procedure, Materialized View, Sequence, UDT, Synonym
type SingleEntityRenameResponse struct {
	// The new name of the destination entity
	NewName string `pulumi:"newName"`
}

// Options to configure rule type SingleEntityRename. The rule is used to rename an entity. The rule filter field can refer to only one entity. The rule scope can be one of: Database, Schema, Table, Column, Constraint, Index, View, Function, Stored Procedure, Materialized View, Sequence, UDT, Synonym
type SingleEntityRenameResponseOutput struct{ *pulumi.OutputState }

func (SingleEntityRenameResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SingleEntityRenameResponse)(nil)).Elem()
}

func (o SingleEntityRenameResponseOutput) ToSingleEntityRenameResponseOutput() SingleEntityRenameResponseOutput {
	return o
}

func (o SingleEntityRenameResponseOutput) ToSingleEntityRenameResponseOutputWithContext(ctx context.Context) SingleEntityRenameResponseOutput {
	return o
}

// The new name of the destination entity
func (o SingleEntityRenameResponseOutput) NewName() pulumi.StringOutput {
	return o.ApplyT(func(v SingleEntityRenameResponse) string { return v.NewName }).(pulumi.StringOutput)
}

// Options to configure rule type SinglePackageChange. The rule is used to alter the sql code for a package entities. The rule filter field can refer to one entity. The rule scope can be: Package
type SinglePackageChange struct {
	// Optional. Sql code for package body
	PackageBody *string `pulumi:"packageBody"`
	// Optional. Sql code for package description
	PackageDescription *string `pulumi:"packageDescription"`
}

// SinglePackageChangeInput is an input type that accepts SinglePackageChangeArgs and SinglePackageChangeOutput values.
// You can construct a concrete instance of `SinglePackageChangeInput` via:
//
//	SinglePackageChangeArgs{...}
type SinglePackageChangeInput interface {
	pulumi.Input

	ToSinglePackageChangeOutput() SinglePackageChangeOutput
	ToSinglePackageChangeOutputWithContext(context.Context) SinglePackageChangeOutput
}

// Options to configure rule type SinglePackageChange. The rule is used to alter the sql code for a package entities. The rule filter field can refer to one entity. The rule scope can be: Package
type SinglePackageChangeArgs struct {
	// Optional. Sql code for package body
	PackageBody pulumi.StringPtrInput `pulumi:"packageBody"`
	// Optional. Sql code for package description
	PackageDescription pulumi.StringPtrInput `pulumi:"packageDescription"`
}

func (SinglePackageChangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SinglePackageChange)(nil)).Elem()
}

func (i SinglePackageChangeArgs) ToSinglePackageChangeOutput() SinglePackageChangeOutput {
	return i.ToSinglePackageChangeOutputWithContext(context.Background())
}

func (i SinglePackageChangeArgs) ToSinglePackageChangeOutputWithContext(ctx context.Context) SinglePackageChangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SinglePackageChangeOutput)
}

func (i SinglePackageChangeArgs) ToSinglePackageChangePtrOutput() SinglePackageChangePtrOutput {
	return i.ToSinglePackageChangePtrOutputWithContext(context.Background())
}

func (i SinglePackageChangeArgs) ToSinglePackageChangePtrOutputWithContext(ctx context.Context) SinglePackageChangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SinglePackageChangeOutput).ToSinglePackageChangePtrOutputWithContext(ctx)
}

// SinglePackageChangePtrInput is an input type that accepts SinglePackageChangeArgs, SinglePackageChangePtr and SinglePackageChangePtrOutput values.
// You can construct a concrete instance of `SinglePackageChangePtrInput` via:
//
//	        SinglePackageChangeArgs{...}
//
//	or:
//
//	        nil
type SinglePackageChangePtrInput interface {
	pulumi.Input

	ToSinglePackageChangePtrOutput() SinglePackageChangePtrOutput
	ToSinglePackageChangePtrOutputWithContext(context.Context) SinglePackageChangePtrOutput
}

type singlePackageChangePtrType SinglePackageChangeArgs

func SinglePackageChangePtr(v *SinglePackageChangeArgs) SinglePackageChangePtrInput {
	return (*singlePackageChangePtrType)(v)
}

func (*singlePackageChangePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SinglePackageChange)(nil)).Elem()
}

func (i *singlePackageChangePtrType) ToSinglePackageChangePtrOutput() SinglePackageChangePtrOutput {
	return i.ToSinglePackageChangePtrOutputWithContext(context.Background())
}

func (i *singlePackageChangePtrType) ToSinglePackageChangePtrOutputWithContext(ctx context.Context) SinglePackageChangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SinglePackageChangePtrOutput)
}

// Options to configure rule type SinglePackageChange. The rule is used to alter the sql code for a package entities. The rule filter field can refer to one entity. The rule scope can be: Package
type SinglePackageChangeOutput struct{ *pulumi.OutputState }

func (SinglePackageChangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SinglePackageChange)(nil)).Elem()
}

func (o SinglePackageChangeOutput) ToSinglePackageChangeOutput() SinglePackageChangeOutput {
	return o
}

func (o SinglePackageChangeOutput) ToSinglePackageChangeOutputWithContext(ctx context.Context) SinglePackageChangeOutput {
	return o
}

func (o SinglePackageChangeOutput) ToSinglePackageChangePtrOutput() SinglePackageChangePtrOutput {
	return o.ToSinglePackageChangePtrOutputWithContext(context.Background())
}

func (o SinglePackageChangeOutput) ToSinglePackageChangePtrOutputWithContext(ctx context.Context) SinglePackageChangePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SinglePackageChange) *SinglePackageChange {
		return &v
	}).(SinglePackageChangePtrOutput)
}

// Optional. Sql code for package body
func (o SinglePackageChangeOutput) PackageBody() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SinglePackageChange) *string { return v.PackageBody }).(pulumi.StringPtrOutput)
}

// Optional. Sql code for package description
func (o SinglePackageChangeOutput) PackageDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SinglePackageChange) *string { return v.PackageDescription }).(pulumi.StringPtrOutput)
}

type SinglePackageChangePtrOutput struct{ *pulumi.OutputState }

func (SinglePackageChangePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SinglePackageChange)(nil)).Elem()
}

func (o SinglePackageChangePtrOutput) ToSinglePackageChangePtrOutput() SinglePackageChangePtrOutput {
	return o
}

func (o SinglePackageChangePtrOutput) ToSinglePackageChangePtrOutputWithContext(ctx context.Context) SinglePackageChangePtrOutput {
	return o
}

func (o SinglePackageChangePtrOutput) Elem() SinglePackageChangeOutput {
	return o.ApplyT(func(v *SinglePackageChange) SinglePackageChange {
		if v != nil {
			return *v
		}
		var ret SinglePackageChange
		return ret
	}).(SinglePackageChangeOutput)
}

// Optional. Sql code for package body
func (o SinglePackageChangePtrOutput) PackageBody() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SinglePackageChange) *string {
		if v == nil {
			return nil
		}
		return v.PackageBody
	}).(pulumi.StringPtrOutput)
}

// Optional. Sql code for package description
func (o SinglePackageChangePtrOutput) PackageDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SinglePackageChange) *string {
		if v == nil {
			return nil
		}
		return v.PackageDescription
	}).(pulumi.StringPtrOutput)
}

// Options to configure rule type SinglePackageChange. The rule is used to alter the sql code for a package entities. The rule filter field can refer to one entity. The rule scope can be: Package
type SinglePackageChangeResponse struct {
	// Optional. Sql code for package body
	PackageBody string `pulumi:"packageBody"`
	// Optional. Sql code for package description
	PackageDescription string `pulumi:"packageDescription"`
}

// Options to configure rule type SinglePackageChange. The rule is used to alter the sql code for a package entities. The rule filter field can refer to one entity. The rule scope can be: Package
type SinglePackageChangeResponseOutput struct{ *pulumi.OutputState }

func (SinglePackageChangeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SinglePackageChangeResponse)(nil)).Elem()
}

func (o SinglePackageChangeResponseOutput) ToSinglePackageChangeResponseOutput() SinglePackageChangeResponseOutput {
	return o
}

func (o SinglePackageChangeResponseOutput) ToSinglePackageChangeResponseOutputWithContext(ctx context.Context) SinglePackageChangeResponseOutput {
	return o
}

// Optional. Sql code for package body
func (o SinglePackageChangeResponseOutput) PackageBody() pulumi.StringOutput {
	return o.ApplyT(func(v SinglePackageChangeResponse) string { return v.PackageBody }).(pulumi.StringOutput)
}

// Optional. Sql code for package description
func (o SinglePackageChangeResponseOutput) PackageDescription() pulumi.StringOutput {
	return o.ApplyT(func(v SinglePackageChangeResponse) string { return v.PackageDescription }).(pulumi.StringOutput)
}

// Filter for fixed point number data types such as NUMERIC/NUMBER
type SourceNumericFilter struct {
	// Enum to set the option defining the datatypes numeric filter has to be applied to
	NumericFilterOption SourceNumericFilterNumericFilterOption `pulumi:"numericFilterOption"`
	// Optional. The filter will match columns with precision smaller than or equal to this number.
	SourceMaxPrecisionFilter *int `pulumi:"sourceMaxPrecisionFilter"`
	// Optional. The filter will match columns with scale smaller than or equal to this number.
	SourceMaxScaleFilter *int `pulumi:"sourceMaxScaleFilter"`
	// Optional. The filter will match columns with precision greater than or equal to this number.
	SourceMinPrecisionFilter *int `pulumi:"sourceMinPrecisionFilter"`
	// Optional. The filter will match columns with scale greater than or equal to this number.
	SourceMinScaleFilter *int `pulumi:"sourceMinScaleFilter"`
}

// SourceNumericFilterInput is an input type that accepts SourceNumericFilterArgs and SourceNumericFilterOutput values.
// You can construct a concrete instance of `SourceNumericFilterInput` via:
//
//	SourceNumericFilterArgs{...}
type SourceNumericFilterInput interface {
	pulumi.Input

	ToSourceNumericFilterOutput() SourceNumericFilterOutput
	ToSourceNumericFilterOutputWithContext(context.Context) SourceNumericFilterOutput
}

// Filter for fixed point number data types such as NUMERIC/NUMBER
type SourceNumericFilterArgs struct {
	// Enum to set the option defining the datatypes numeric filter has to be applied to
	NumericFilterOption SourceNumericFilterNumericFilterOptionInput `pulumi:"numericFilterOption"`
	// Optional. The filter will match columns with precision smaller than or equal to this number.
	SourceMaxPrecisionFilter pulumi.IntPtrInput `pulumi:"sourceMaxPrecisionFilter"`
	// Optional. The filter will match columns with scale smaller than or equal to this number.
	SourceMaxScaleFilter pulumi.IntPtrInput `pulumi:"sourceMaxScaleFilter"`
	// Optional. The filter will match columns with precision greater than or equal to this number.
	SourceMinPrecisionFilter pulumi.IntPtrInput `pulumi:"sourceMinPrecisionFilter"`
	// Optional. The filter will match columns with scale greater than or equal to this number.
	SourceMinScaleFilter pulumi.IntPtrInput `pulumi:"sourceMinScaleFilter"`
}

func (SourceNumericFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceNumericFilter)(nil)).Elem()
}

func (i SourceNumericFilterArgs) ToSourceNumericFilterOutput() SourceNumericFilterOutput {
	return i.ToSourceNumericFilterOutputWithContext(context.Background())
}

func (i SourceNumericFilterArgs) ToSourceNumericFilterOutputWithContext(ctx context.Context) SourceNumericFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceNumericFilterOutput)
}

func (i SourceNumericFilterArgs) ToSourceNumericFilterPtrOutput() SourceNumericFilterPtrOutput {
	return i.ToSourceNumericFilterPtrOutputWithContext(context.Background())
}

func (i SourceNumericFilterArgs) ToSourceNumericFilterPtrOutputWithContext(ctx context.Context) SourceNumericFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceNumericFilterOutput).ToSourceNumericFilterPtrOutputWithContext(ctx)
}

// SourceNumericFilterPtrInput is an input type that accepts SourceNumericFilterArgs, SourceNumericFilterPtr and SourceNumericFilterPtrOutput values.
// You can construct a concrete instance of `SourceNumericFilterPtrInput` via:
//
//	        SourceNumericFilterArgs{...}
//
//	or:
//
//	        nil
type SourceNumericFilterPtrInput interface {
	pulumi.Input

	ToSourceNumericFilterPtrOutput() SourceNumericFilterPtrOutput
	ToSourceNumericFilterPtrOutputWithContext(context.Context) SourceNumericFilterPtrOutput
}

type sourceNumericFilterPtrType SourceNumericFilterArgs

func SourceNumericFilterPtr(v *SourceNumericFilterArgs) SourceNumericFilterPtrInput {
	return (*sourceNumericFilterPtrType)(v)
}

func (*sourceNumericFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceNumericFilter)(nil)).Elem()
}

func (i *sourceNumericFilterPtrType) ToSourceNumericFilterPtrOutput() SourceNumericFilterPtrOutput {
	return i.ToSourceNumericFilterPtrOutputWithContext(context.Background())
}

func (i *sourceNumericFilterPtrType) ToSourceNumericFilterPtrOutputWithContext(ctx context.Context) SourceNumericFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceNumericFilterPtrOutput)
}

// Filter for fixed point number data types such as NUMERIC/NUMBER
type SourceNumericFilterOutput struct{ *pulumi.OutputState }

func (SourceNumericFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceNumericFilter)(nil)).Elem()
}

func (o SourceNumericFilterOutput) ToSourceNumericFilterOutput() SourceNumericFilterOutput {
	return o
}

func (o SourceNumericFilterOutput) ToSourceNumericFilterOutputWithContext(ctx context.Context) SourceNumericFilterOutput {
	return o
}

func (o SourceNumericFilterOutput) ToSourceNumericFilterPtrOutput() SourceNumericFilterPtrOutput {
	return o.ToSourceNumericFilterPtrOutputWithContext(context.Background())
}

func (o SourceNumericFilterOutput) ToSourceNumericFilterPtrOutputWithContext(ctx context.Context) SourceNumericFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SourceNumericFilter) *SourceNumericFilter {
		return &v
	}).(SourceNumericFilterPtrOutput)
}

// Enum to set the option defining the datatypes numeric filter has to be applied to
func (o SourceNumericFilterOutput) NumericFilterOption() SourceNumericFilterNumericFilterOptionOutput {
	return o.ApplyT(func(v SourceNumericFilter) SourceNumericFilterNumericFilterOption { return v.NumericFilterOption }).(SourceNumericFilterNumericFilterOptionOutput)
}

// Optional. The filter will match columns with precision smaller than or equal to this number.
func (o SourceNumericFilterOutput) SourceMaxPrecisionFilter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SourceNumericFilter) *int { return v.SourceMaxPrecisionFilter }).(pulumi.IntPtrOutput)
}

// Optional. The filter will match columns with scale smaller than or equal to this number.
func (o SourceNumericFilterOutput) SourceMaxScaleFilter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SourceNumericFilter) *int { return v.SourceMaxScaleFilter }).(pulumi.IntPtrOutput)
}

// Optional. The filter will match columns with precision greater than or equal to this number.
func (o SourceNumericFilterOutput) SourceMinPrecisionFilter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SourceNumericFilter) *int { return v.SourceMinPrecisionFilter }).(pulumi.IntPtrOutput)
}

// Optional. The filter will match columns with scale greater than or equal to this number.
func (o SourceNumericFilterOutput) SourceMinScaleFilter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SourceNumericFilter) *int { return v.SourceMinScaleFilter }).(pulumi.IntPtrOutput)
}

type SourceNumericFilterPtrOutput struct{ *pulumi.OutputState }

func (SourceNumericFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceNumericFilter)(nil)).Elem()
}

func (o SourceNumericFilterPtrOutput) ToSourceNumericFilterPtrOutput() SourceNumericFilterPtrOutput {
	return o
}

func (o SourceNumericFilterPtrOutput) ToSourceNumericFilterPtrOutputWithContext(ctx context.Context) SourceNumericFilterPtrOutput {
	return o
}

func (o SourceNumericFilterPtrOutput) Elem() SourceNumericFilterOutput {
	return o.ApplyT(func(v *SourceNumericFilter) SourceNumericFilter {
		if v != nil {
			return *v
		}
		var ret SourceNumericFilter
		return ret
	}).(SourceNumericFilterOutput)
}

// Enum to set the option defining the datatypes numeric filter has to be applied to
func (o SourceNumericFilterPtrOutput) NumericFilterOption() SourceNumericFilterNumericFilterOptionPtrOutput {
	return o.ApplyT(func(v *SourceNumericFilter) *SourceNumericFilterNumericFilterOption {
		if v == nil {
			return nil
		}
		return &v.NumericFilterOption
	}).(SourceNumericFilterNumericFilterOptionPtrOutput)
}

// Optional. The filter will match columns with precision smaller than or equal to this number.
func (o SourceNumericFilterPtrOutput) SourceMaxPrecisionFilter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SourceNumericFilter) *int {
		if v == nil {
			return nil
		}
		return v.SourceMaxPrecisionFilter
	}).(pulumi.IntPtrOutput)
}

// Optional. The filter will match columns with scale smaller than or equal to this number.
func (o SourceNumericFilterPtrOutput) SourceMaxScaleFilter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SourceNumericFilter) *int {
		if v == nil {
			return nil
		}
		return v.SourceMaxScaleFilter
	}).(pulumi.IntPtrOutput)
}

// Optional. The filter will match columns with precision greater than or equal to this number.
func (o SourceNumericFilterPtrOutput) SourceMinPrecisionFilter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SourceNumericFilter) *int {
		if v == nil {
			return nil
		}
		return v.SourceMinPrecisionFilter
	}).(pulumi.IntPtrOutput)
}

// Optional. The filter will match columns with scale greater than or equal to this number.
func (o SourceNumericFilterPtrOutput) SourceMinScaleFilter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SourceNumericFilter) *int {
		if v == nil {
			return nil
		}
		return v.SourceMinScaleFilter
	}).(pulumi.IntPtrOutput)
}

// Filter for fixed point number data types such as NUMERIC/NUMBER
type SourceNumericFilterResponse struct {
	// Enum to set the option defining the datatypes numeric filter has to be applied to
	NumericFilterOption string `pulumi:"numericFilterOption"`
	// Optional. The filter will match columns with precision smaller than or equal to this number.
	SourceMaxPrecisionFilter int `pulumi:"sourceMaxPrecisionFilter"`
	// Optional. The filter will match columns with scale smaller than or equal to this number.
	SourceMaxScaleFilter int `pulumi:"sourceMaxScaleFilter"`
	// Optional. The filter will match columns with precision greater than or equal to this number.
	SourceMinPrecisionFilter int `pulumi:"sourceMinPrecisionFilter"`
	// Optional. The filter will match columns with scale greater than or equal to this number.
	SourceMinScaleFilter int `pulumi:"sourceMinScaleFilter"`
}

// Filter for fixed point number data types such as NUMERIC/NUMBER
type SourceNumericFilterResponseOutput struct{ *pulumi.OutputState }

func (SourceNumericFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceNumericFilterResponse)(nil)).Elem()
}

func (o SourceNumericFilterResponseOutput) ToSourceNumericFilterResponseOutput() SourceNumericFilterResponseOutput {
	return o
}

func (o SourceNumericFilterResponseOutput) ToSourceNumericFilterResponseOutputWithContext(ctx context.Context) SourceNumericFilterResponseOutput {
	return o
}

// Enum to set the option defining the datatypes numeric filter has to be applied to
func (o SourceNumericFilterResponseOutput) NumericFilterOption() pulumi.StringOutput {
	return o.ApplyT(func(v SourceNumericFilterResponse) string { return v.NumericFilterOption }).(pulumi.StringOutput)
}

// Optional. The filter will match columns with precision smaller than or equal to this number.
func (o SourceNumericFilterResponseOutput) SourceMaxPrecisionFilter() pulumi.IntOutput {
	return o.ApplyT(func(v SourceNumericFilterResponse) int { return v.SourceMaxPrecisionFilter }).(pulumi.IntOutput)
}

// Optional. The filter will match columns with scale smaller than or equal to this number.
func (o SourceNumericFilterResponseOutput) SourceMaxScaleFilter() pulumi.IntOutput {
	return o.ApplyT(func(v SourceNumericFilterResponse) int { return v.SourceMaxScaleFilter }).(pulumi.IntOutput)
}

// Optional. The filter will match columns with precision greater than or equal to this number.
func (o SourceNumericFilterResponseOutput) SourceMinPrecisionFilter() pulumi.IntOutput {
	return o.ApplyT(func(v SourceNumericFilterResponse) int { return v.SourceMinPrecisionFilter }).(pulumi.IntOutput)
}

// Optional. The filter will match columns with scale greater than or equal to this number.
func (o SourceNumericFilterResponseOutput) SourceMinScaleFilter() pulumi.IntOutput {
	return o.ApplyT(func(v SourceNumericFilterResponse) int { return v.SourceMinScaleFilter }).(pulumi.IntOutput)
}

// Options to configure rule type SourceSqlChange. The rule is used to alter the sql code for database entities. The rule filter field can refer to one entity. The rule scope can be: StoredProcedure, Function, Trigger, View
type SourceSqlChange struct {
	// Sql code for source (stored procedure, function, trigger or view)
	SqlCode string `pulumi:"sqlCode"`
}

// SourceSqlChangeInput is an input type that accepts SourceSqlChangeArgs and SourceSqlChangeOutput values.
// You can construct a concrete instance of `SourceSqlChangeInput` via:
//
//	SourceSqlChangeArgs{...}
type SourceSqlChangeInput interface {
	pulumi.Input

	ToSourceSqlChangeOutput() SourceSqlChangeOutput
	ToSourceSqlChangeOutputWithContext(context.Context) SourceSqlChangeOutput
}

// Options to configure rule type SourceSqlChange. The rule is used to alter the sql code for database entities. The rule filter field can refer to one entity. The rule scope can be: StoredProcedure, Function, Trigger, View
type SourceSqlChangeArgs struct {
	// Sql code for source (stored procedure, function, trigger or view)
	SqlCode pulumi.StringInput `pulumi:"sqlCode"`
}

func (SourceSqlChangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceSqlChange)(nil)).Elem()
}

func (i SourceSqlChangeArgs) ToSourceSqlChangeOutput() SourceSqlChangeOutput {
	return i.ToSourceSqlChangeOutputWithContext(context.Background())
}

func (i SourceSqlChangeArgs) ToSourceSqlChangeOutputWithContext(ctx context.Context) SourceSqlChangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceSqlChangeOutput)
}

func (i SourceSqlChangeArgs) ToSourceSqlChangePtrOutput() SourceSqlChangePtrOutput {
	return i.ToSourceSqlChangePtrOutputWithContext(context.Background())
}

func (i SourceSqlChangeArgs) ToSourceSqlChangePtrOutputWithContext(ctx context.Context) SourceSqlChangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceSqlChangeOutput).ToSourceSqlChangePtrOutputWithContext(ctx)
}

// SourceSqlChangePtrInput is an input type that accepts SourceSqlChangeArgs, SourceSqlChangePtr and SourceSqlChangePtrOutput values.
// You can construct a concrete instance of `SourceSqlChangePtrInput` via:
//
//	        SourceSqlChangeArgs{...}
//
//	or:
//
//	        nil
type SourceSqlChangePtrInput interface {
	pulumi.Input

	ToSourceSqlChangePtrOutput() SourceSqlChangePtrOutput
	ToSourceSqlChangePtrOutputWithContext(context.Context) SourceSqlChangePtrOutput
}

type sourceSqlChangePtrType SourceSqlChangeArgs

func SourceSqlChangePtr(v *SourceSqlChangeArgs) SourceSqlChangePtrInput {
	return (*sourceSqlChangePtrType)(v)
}

func (*sourceSqlChangePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceSqlChange)(nil)).Elem()
}

func (i *sourceSqlChangePtrType) ToSourceSqlChangePtrOutput() SourceSqlChangePtrOutput {
	return i.ToSourceSqlChangePtrOutputWithContext(context.Background())
}

func (i *sourceSqlChangePtrType) ToSourceSqlChangePtrOutputWithContext(ctx context.Context) SourceSqlChangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceSqlChangePtrOutput)
}

// Options to configure rule type SourceSqlChange. The rule is used to alter the sql code for database entities. The rule filter field can refer to one entity. The rule scope can be: StoredProcedure, Function, Trigger, View
type SourceSqlChangeOutput struct{ *pulumi.OutputState }

func (SourceSqlChangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceSqlChange)(nil)).Elem()
}

func (o SourceSqlChangeOutput) ToSourceSqlChangeOutput() SourceSqlChangeOutput {
	return o
}

func (o SourceSqlChangeOutput) ToSourceSqlChangeOutputWithContext(ctx context.Context) SourceSqlChangeOutput {
	return o
}

func (o SourceSqlChangeOutput) ToSourceSqlChangePtrOutput() SourceSqlChangePtrOutput {
	return o.ToSourceSqlChangePtrOutputWithContext(context.Background())
}

func (o SourceSqlChangeOutput) ToSourceSqlChangePtrOutputWithContext(ctx context.Context) SourceSqlChangePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SourceSqlChange) *SourceSqlChange {
		return &v
	}).(SourceSqlChangePtrOutput)
}

// Sql code for source (stored procedure, function, trigger or view)
func (o SourceSqlChangeOutput) SqlCode() pulumi.StringOutput {
	return o.ApplyT(func(v SourceSqlChange) string { return v.SqlCode }).(pulumi.StringOutput)
}

type SourceSqlChangePtrOutput struct{ *pulumi.OutputState }

func (SourceSqlChangePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceSqlChange)(nil)).Elem()
}

func (o SourceSqlChangePtrOutput) ToSourceSqlChangePtrOutput() SourceSqlChangePtrOutput {
	return o
}

func (o SourceSqlChangePtrOutput) ToSourceSqlChangePtrOutputWithContext(ctx context.Context) SourceSqlChangePtrOutput {
	return o
}

func (o SourceSqlChangePtrOutput) Elem() SourceSqlChangeOutput {
	return o.ApplyT(func(v *SourceSqlChange) SourceSqlChange {
		if v != nil {
			return *v
		}
		var ret SourceSqlChange
		return ret
	}).(SourceSqlChangeOutput)
}

// Sql code for source (stored procedure, function, trigger or view)
func (o SourceSqlChangePtrOutput) SqlCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceSqlChange) *string {
		if v == nil {
			return nil
		}
		return &v.SqlCode
	}).(pulumi.StringPtrOutput)
}

// Options to configure rule type SourceSqlChange. The rule is used to alter the sql code for database entities. The rule filter field can refer to one entity. The rule scope can be: StoredProcedure, Function, Trigger, View
type SourceSqlChangeResponse struct {
	// Sql code for source (stored procedure, function, trigger or view)
	SqlCode string `pulumi:"sqlCode"`
}

// Options to configure rule type SourceSqlChange. The rule is used to alter the sql code for database entities. The rule filter field can refer to one entity. The rule scope can be: StoredProcedure, Function, Trigger, View
type SourceSqlChangeResponseOutput struct{ *pulumi.OutputState }

func (SourceSqlChangeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceSqlChangeResponse)(nil)).Elem()
}

func (o SourceSqlChangeResponseOutput) ToSourceSqlChangeResponseOutput() SourceSqlChangeResponseOutput {
	return o
}

func (o SourceSqlChangeResponseOutput) ToSourceSqlChangeResponseOutputWithContext(ctx context.Context) SourceSqlChangeResponseOutput {
	return o
}

// Sql code for source (stored procedure, function, trigger or view)
func (o SourceSqlChangeResponseOutput) SqlCode() pulumi.StringOutput {
	return o.ApplyT(func(v SourceSqlChangeResponse) string { return v.SqlCode }).(pulumi.StringOutput)
}

// Filter for text-based data types like varchar.
type SourceTextFilter struct {
	// Optional. The filter will match columns with length smaller than or equal to this number.
	SourceMaxLengthFilter *string `pulumi:"sourceMaxLengthFilter"`
	// Optional. The filter will match columns with length greater than or equal to this number.
	SourceMinLengthFilter *string `pulumi:"sourceMinLengthFilter"`
}

// SourceTextFilterInput is an input type that accepts SourceTextFilterArgs and SourceTextFilterOutput values.
// You can construct a concrete instance of `SourceTextFilterInput` via:
//
//	SourceTextFilterArgs{...}
type SourceTextFilterInput interface {
	pulumi.Input

	ToSourceTextFilterOutput() SourceTextFilterOutput
	ToSourceTextFilterOutputWithContext(context.Context) SourceTextFilterOutput
}

// Filter for text-based data types like varchar.
type SourceTextFilterArgs struct {
	// Optional. The filter will match columns with length smaller than or equal to this number.
	SourceMaxLengthFilter pulumi.StringPtrInput `pulumi:"sourceMaxLengthFilter"`
	// Optional. The filter will match columns with length greater than or equal to this number.
	SourceMinLengthFilter pulumi.StringPtrInput `pulumi:"sourceMinLengthFilter"`
}

func (SourceTextFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceTextFilter)(nil)).Elem()
}

func (i SourceTextFilterArgs) ToSourceTextFilterOutput() SourceTextFilterOutput {
	return i.ToSourceTextFilterOutputWithContext(context.Background())
}

func (i SourceTextFilterArgs) ToSourceTextFilterOutputWithContext(ctx context.Context) SourceTextFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceTextFilterOutput)
}

func (i SourceTextFilterArgs) ToSourceTextFilterPtrOutput() SourceTextFilterPtrOutput {
	return i.ToSourceTextFilterPtrOutputWithContext(context.Background())
}

func (i SourceTextFilterArgs) ToSourceTextFilterPtrOutputWithContext(ctx context.Context) SourceTextFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceTextFilterOutput).ToSourceTextFilterPtrOutputWithContext(ctx)
}

// SourceTextFilterPtrInput is an input type that accepts SourceTextFilterArgs, SourceTextFilterPtr and SourceTextFilterPtrOutput values.
// You can construct a concrete instance of `SourceTextFilterPtrInput` via:
//
//	        SourceTextFilterArgs{...}
//
//	or:
//
//	        nil
type SourceTextFilterPtrInput interface {
	pulumi.Input

	ToSourceTextFilterPtrOutput() SourceTextFilterPtrOutput
	ToSourceTextFilterPtrOutputWithContext(context.Context) SourceTextFilterPtrOutput
}

type sourceTextFilterPtrType SourceTextFilterArgs

func SourceTextFilterPtr(v *SourceTextFilterArgs) SourceTextFilterPtrInput {
	return (*sourceTextFilterPtrType)(v)
}

func (*sourceTextFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceTextFilter)(nil)).Elem()
}

func (i *sourceTextFilterPtrType) ToSourceTextFilterPtrOutput() SourceTextFilterPtrOutput {
	return i.ToSourceTextFilterPtrOutputWithContext(context.Background())
}

func (i *sourceTextFilterPtrType) ToSourceTextFilterPtrOutputWithContext(ctx context.Context) SourceTextFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceTextFilterPtrOutput)
}

// Filter for text-based data types like varchar.
type SourceTextFilterOutput struct{ *pulumi.OutputState }

func (SourceTextFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceTextFilter)(nil)).Elem()
}

func (o SourceTextFilterOutput) ToSourceTextFilterOutput() SourceTextFilterOutput {
	return o
}

func (o SourceTextFilterOutput) ToSourceTextFilterOutputWithContext(ctx context.Context) SourceTextFilterOutput {
	return o
}

func (o SourceTextFilterOutput) ToSourceTextFilterPtrOutput() SourceTextFilterPtrOutput {
	return o.ToSourceTextFilterPtrOutputWithContext(context.Background())
}

func (o SourceTextFilterOutput) ToSourceTextFilterPtrOutputWithContext(ctx context.Context) SourceTextFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SourceTextFilter) *SourceTextFilter {
		return &v
	}).(SourceTextFilterPtrOutput)
}

// Optional. The filter will match columns with length smaller than or equal to this number.
func (o SourceTextFilterOutput) SourceMaxLengthFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceTextFilter) *string { return v.SourceMaxLengthFilter }).(pulumi.StringPtrOutput)
}

// Optional. The filter will match columns with length greater than or equal to this number.
func (o SourceTextFilterOutput) SourceMinLengthFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceTextFilter) *string { return v.SourceMinLengthFilter }).(pulumi.StringPtrOutput)
}

type SourceTextFilterPtrOutput struct{ *pulumi.OutputState }

func (SourceTextFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceTextFilter)(nil)).Elem()
}

func (o SourceTextFilterPtrOutput) ToSourceTextFilterPtrOutput() SourceTextFilterPtrOutput {
	return o
}

func (o SourceTextFilterPtrOutput) ToSourceTextFilterPtrOutputWithContext(ctx context.Context) SourceTextFilterPtrOutput {
	return o
}

func (o SourceTextFilterPtrOutput) Elem() SourceTextFilterOutput {
	return o.ApplyT(func(v *SourceTextFilter) SourceTextFilter {
		if v != nil {
			return *v
		}
		var ret SourceTextFilter
		return ret
	}).(SourceTextFilterOutput)
}

// Optional. The filter will match columns with length smaller than or equal to this number.
func (o SourceTextFilterPtrOutput) SourceMaxLengthFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceTextFilter) *string {
		if v == nil {
			return nil
		}
		return v.SourceMaxLengthFilter
	}).(pulumi.StringPtrOutput)
}

// Optional. The filter will match columns with length greater than or equal to this number.
func (o SourceTextFilterPtrOutput) SourceMinLengthFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceTextFilter) *string {
		if v == nil {
			return nil
		}
		return v.SourceMinLengthFilter
	}).(pulumi.StringPtrOutput)
}

// Filter for text-based data types like varchar.
type SourceTextFilterResponse struct {
	// Optional. The filter will match columns with length smaller than or equal to this number.
	SourceMaxLengthFilter string `pulumi:"sourceMaxLengthFilter"`
	// Optional. The filter will match columns with length greater than or equal to this number.
	SourceMinLengthFilter string `pulumi:"sourceMinLengthFilter"`
}

// Filter for text-based data types like varchar.
type SourceTextFilterResponseOutput struct{ *pulumi.OutputState }

func (SourceTextFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceTextFilterResponse)(nil)).Elem()
}

func (o SourceTextFilterResponseOutput) ToSourceTextFilterResponseOutput() SourceTextFilterResponseOutput {
	return o
}

func (o SourceTextFilterResponseOutput) ToSourceTextFilterResponseOutputWithContext(ctx context.Context) SourceTextFilterResponseOutput {
	return o
}

// Optional. The filter will match columns with length smaller than or equal to this number.
func (o SourceTextFilterResponseOutput) SourceMaxLengthFilter() pulumi.StringOutput {
	return o.ApplyT(func(v SourceTextFilterResponse) string { return v.SourceMaxLengthFilter }).(pulumi.StringOutput)
}

// Optional. The filter will match columns with length greater than or equal to this number.
func (o SourceTextFilterResponseOutput) SourceMinLengthFilter() pulumi.StringOutput {
	return o.ApplyT(func(v SourceTextFilterResponse) string { return v.SourceMinLengthFilter }).(pulumi.StringOutput)
}

// An entry for an Access Control list.
type SqlAclEntry struct {
	// The time when this access control entry expires in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example: `2012-11-15T16:19:00.094Z`.
	ExpireTime *string `pulumi:"expireTime"`
	// A label to identify this entry.
	Label *string `pulumi:"label"`
	// Input only. The time-to-leave of this access control entry.
	Ttl *string `pulumi:"ttl"`
	// The allowlisted value for the access control list.
	Value *string `pulumi:"value"`
}

// SqlAclEntryInput is an input type that accepts SqlAclEntryArgs and SqlAclEntryOutput values.
// You can construct a concrete instance of `SqlAclEntryInput` via:
//
//	SqlAclEntryArgs{...}
type SqlAclEntryInput interface {
	pulumi.Input

	ToSqlAclEntryOutput() SqlAclEntryOutput
	ToSqlAclEntryOutputWithContext(context.Context) SqlAclEntryOutput
}

// An entry for an Access Control list.
type SqlAclEntryArgs struct {
	// The time when this access control entry expires in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example: `2012-11-15T16:19:00.094Z`.
	ExpireTime pulumi.StringPtrInput `pulumi:"expireTime"`
	// A label to identify this entry.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// Input only. The time-to-leave of this access control entry.
	Ttl pulumi.StringPtrInput `pulumi:"ttl"`
	// The allowlisted value for the access control list.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (SqlAclEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlAclEntry)(nil)).Elem()
}

func (i SqlAclEntryArgs) ToSqlAclEntryOutput() SqlAclEntryOutput {
	return i.ToSqlAclEntryOutputWithContext(context.Background())
}

func (i SqlAclEntryArgs) ToSqlAclEntryOutputWithContext(ctx context.Context) SqlAclEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlAclEntryOutput)
}

// SqlAclEntryArrayInput is an input type that accepts SqlAclEntryArray and SqlAclEntryArrayOutput values.
// You can construct a concrete instance of `SqlAclEntryArrayInput` via:
//
//	SqlAclEntryArray{ SqlAclEntryArgs{...} }
type SqlAclEntryArrayInput interface {
	pulumi.Input

	ToSqlAclEntryArrayOutput() SqlAclEntryArrayOutput
	ToSqlAclEntryArrayOutputWithContext(context.Context) SqlAclEntryArrayOutput
}

type SqlAclEntryArray []SqlAclEntryInput

func (SqlAclEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SqlAclEntry)(nil)).Elem()
}

func (i SqlAclEntryArray) ToSqlAclEntryArrayOutput() SqlAclEntryArrayOutput {
	return i.ToSqlAclEntryArrayOutputWithContext(context.Background())
}

func (i SqlAclEntryArray) ToSqlAclEntryArrayOutputWithContext(ctx context.Context) SqlAclEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlAclEntryArrayOutput)
}

// An entry for an Access Control list.
type SqlAclEntryOutput struct{ *pulumi.OutputState }

func (SqlAclEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlAclEntry)(nil)).Elem()
}

func (o SqlAclEntryOutput) ToSqlAclEntryOutput() SqlAclEntryOutput {
	return o
}

func (o SqlAclEntryOutput) ToSqlAclEntryOutputWithContext(ctx context.Context) SqlAclEntryOutput {
	return o
}

// The time when this access control entry expires in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example: `2012-11-15T16:19:00.094Z`.
func (o SqlAclEntryOutput) ExpireTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlAclEntry) *string { return v.ExpireTime }).(pulumi.StringPtrOutput)
}

// A label to identify this entry.
func (o SqlAclEntryOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlAclEntry) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// Input only. The time-to-leave of this access control entry.
func (o SqlAclEntryOutput) Ttl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlAclEntry) *string { return v.Ttl }).(pulumi.StringPtrOutput)
}

// The allowlisted value for the access control list.
func (o SqlAclEntryOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlAclEntry) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type SqlAclEntryArrayOutput struct{ *pulumi.OutputState }

func (SqlAclEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SqlAclEntry)(nil)).Elem()
}

func (o SqlAclEntryArrayOutput) ToSqlAclEntryArrayOutput() SqlAclEntryArrayOutput {
	return o
}

func (o SqlAclEntryArrayOutput) ToSqlAclEntryArrayOutputWithContext(ctx context.Context) SqlAclEntryArrayOutput {
	return o
}

func (o SqlAclEntryArrayOutput) Index(i pulumi.IntInput) SqlAclEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SqlAclEntry {
		return vs[0].([]SqlAclEntry)[vs[1].(int)]
	}).(SqlAclEntryOutput)
}

// An entry for an Access Control list.
type SqlAclEntryResponse struct {
	// The time when this access control entry expires in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example: `2012-11-15T16:19:00.094Z`.
	ExpireTime string `pulumi:"expireTime"`
	// A label to identify this entry.
	Label string `pulumi:"label"`
	// Input only. The time-to-leave of this access control entry.
	Ttl string `pulumi:"ttl"`
	// The allowlisted value for the access control list.
	Value string `pulumi:"value"`
}

// An entry for an Access Control list.
type SqlAclEntryResponseOutput struct{ *pulumi.OutputState }

func (SqlAclEntryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlAclEntryResponse)(nil)).Elem()
}

func (o SqlAclEntryResponseOutput) ToSqlAclEntryResponseOutput() SqlAclEntryResponseOutput {
	return o
}

func (o SqlAclEntryResponseOutput) ToSqlAclEntryResponseOutputWithContext(ctx context.Context) SqlAclEntryResponseOutput {
	return o
}

// The time when this access control entry expires in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example: `2012-11-15T16:19:00.094Z`.
func (o SqlAclEntryResponseOutput) ExpireTime() pulumi.StringOutput {
	return o.ApplyT(func(v SqlAclEntryResponse) string { return v.ExpireTime }).(pulumi.StringOutput)
}

// A label to identify this entry.
func (o SqlAclEntryResponseOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v SqlAclEntryResponse) string { return v.Label }).(pulumi.StringOutput)
}

// Input only. The time-to-leave of this access control entry.
func (o SqlAclEntryResponseOutput) Ttl() pulumi.StringOutput {
	return o.ApplyT(func(v SqlAclEntryResponse) string { return v.Ttl }).(pulumi.StringOutput)
}

// The allowlisted value for the access control list.
func (o SqlAclEntryResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v SqlAclEntryResponse) string { return v.Value }).(pulumi.StringOutput)
}

type SqlAclEntryResponseArrayOutput struct{ *pulumi.OutputState }

func (SqlAclEntryResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SqlAclEntryResponse)(nil)).Elem()
}

func (o SqlAclEntryResponseArrayOutput) ToSqlAclEntryResponseArrayOutput() SqlAclEntryResponseArrayOutput {
	return o
}

func (o SqlAclEntryResponseArrayOutput) ToSqlAclEntryResponseArrayOutputWithContext(ctx context.Context) SqlAclEntryResponseArrayOutput {
	return o
}

func (o SqlAclEntryResponseArrayOutput) Index(i pulumi.IntInput) SqlAclEntryResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SqlAclEntryResponse {
		return vs[0].([]SqlAclEntryResponse)[vs[1].(int)]
	}).(SqlAclEntryResponseOutput)
}

// IP Management configuration.
type SqlIpConfig struct {
	// Optional. The name of the allocated IP address range for the private IP Cloud SQL instance. This name refers to an already allocated IP range address. If set, the instance IP address will be created in the allocated range. Note that this IP address range can't be modified after the instance is created. If you change the VPC when configuring connectivity settings for the migration job, this field is not relevant.
	AllocatedIpRange *string `pulumi:"allocatedIpRange"`
	// The list of external networks that are allowed to connect to the instance using the IP. See https://en.wikipedia.org/wiki/CIDR_notation#CIDR_notation, also known as 'slash' notation (e.g. `192.168.100.0/24`).
	AuthorizedNetworks []SqlAclEntry `pulumi:"authorizedNetworks"`
	// Whether the instance should be assigned an IPv4 address or not.
	EnableIpv4 *bool `pulumi:"enableIpv4"`
	// The resource link for the VPC network from which the Cloud SQL instance is accessible for private IP. For example, `projects/myProject/global/networks/default`. This setting can be updated, but it cannot be removed after it is set.
	PrivateNetwork *string `pulumi:"privateNetwork"`
	// Whether SSL connections over IP should be enforced or not.
	RequireSsl *bool `pulumi:"requireSsl"`
}

// SqlIpConfigInput is an input type that accepts SqlIpConfigArgs and SqlIpConfigOutput values.
// You can construct a concrete instance of `SqlIpConfigInput` via:
//
//	SqlIpConfigArgs{...}
type SqlIpConfigInput interface {
	pulumi.Input

	ToSqlIpConfigOutput() SqlIpConfigOutput
	ToSqlIpConfigOutputWithContext(context.Context) SqlIpConfigOutput
}

// IP Management configuration.
type SqlIpConfigArgs struct {
	// Optional. The name of the allocated IP address range for the private IP Cloud SQL instance. This name refers to an already allocated IP range address. If set, the instance IP address will be created in the allocated range. Note that this IP address range can't be modified after the instance is created. If you change the VPC when configuring connectivity settings for the migration job, this field is not relevant.
	AllocatedIpRange pulumi.StringPtrInput `pulumi:"allocatedIpRange"`
	// The list of external networks that are allowed to connect to the instance using the IP. See https://en.wikipedia.org/wiki/CIDR_notation#CIDR_notation, also known as 'slash' notation (e.g. `192.168.100.0/24`).
	AuthorizedNetworks SqlAclEntryArrayInput `pulumi:"authorizedNetworks"`
	// Whether the instance should be assigned an IPv4 address or not.
	EnableIpv4 pulumi.BoolPtrInput `pulumi:"enableIpv4"`
	// The resource link for the VPC network from which the Cloud SQL instance is accessible for private IP. For example, `projects/myProject/global/networks/default`. This setting can be updated, but it cannot be removed after it is set.
	PrivateNetwork pulumi.StringPtrInput `pulumi:"privateNetwork"`
	// Whether SSL connections over IP should be enforced or not.
	RequireSsl pulumi.BoolPtrInput `pulumi:"requireSsl"`
}

func (SqlIpConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlIpConfig)(nil)).Elem()
}

func (i SqlIpConfigArgs) ToSqlIpConfigOutput() SqlIpConfigOutput {
	return i.ToSqlIpConfigOutputWithContext(context.Background())
}

func (i SqlIpConfigArgs) ToSqlIpConfigOutputWithContext(ctx context.Context) SqlIpConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlIpConfigOutput)
}

func (i SqlIpConfigArgs) ToSqlIpConfigPtrOutput() SqlIpConfigPtrOutput {
	return i.ToSqlIpConfigPtrOutputWithContext(context.Background())
}

func (i SqlIpConfigArgs) ToSqlIpConfigPtrOutputWithContext(ctx context.Context) SqlIpConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlIpConfigOutput).ToSqlIpConfigPtrOutputWithContext(ctx)
}

// SqlIpConfigPtrInput is an input type that accepts SqlIpConfigArgs, SqlIpConfigPtr and SqlIpConfigPtrOutput values.
// You can construct a concrete instance of `SqlIpConfigPtrInput` via:
//
//	        SqlIpConfigArgs{...}
//
//	or:
//
//	        nil
type SqlIpConfigPtrInput interface {
	pulumi.Input

	ToSqlIpConfigPtrOutput() SqlIpConfigPtrOutput
	ToSqlIpConfigPtrOutputWithContext(context.Context) SqlIpConfigPtrOutput
}

type sqlIpConfigPtrType SqlIpConfigArgs

func SqlIpConfigPtr(v *SqlIpConfigArgs) SqlIpConfigPtrInput {
	return (*sqlIpConfigPtrType)(v)
}

func (*sqlIpConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlIpConfig)(nil)).Elem()
}

func (i *sqlIpConfigPtrType) ToSqlIpConfigPtrOutput() SqlIpConfigPtrOutput {
	return i.ToSqlIpConfigPtrOutputWithContext(context.Background())
}

func (i *sqlIpConfigPtrType) ToSqlIpConfigPtrOutputWithContext(ctx context.Context) SqlIpConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlIpConfigPtrOutput)
}

// IP Management configuration.
type SqlIpConfigOutput struct{ *pulumi.OutputState }

func (SqlIpConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlIpConfig)(nil)).Elem()
}

func (o SqlIpConfigOutput) ToSqlIpConfigOutput() SqlIpConfigOutput {
	return o
}

func (o SqlIpConfigOutput) ToSqlIpConfigOutputWithContext(ctx context.Context) SqlIpConfigOutput {
	return o
}

func (o SqlIpConfigOutput) ToSqlIpConfigPtrOutput() SqlIpConfigPtrOutput {
	return o.ToSqlIpConfigPtrOutputWithContext(context.Background())
}

func (o SqlIpConfigOutput) ToSqlIpConfigPtrOutputWithContext(ctx context.Context) SqlIpConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SqlIpConfig) *SqlIpConfig {
		return &v
	}).(SqlIpConfigPtrOutput)
}

// Optional. The name of the allocated IP address range for the private IP Cloud SQL instance. This name refers to an already allocated IP range address. If set, the instance IP address will be created in the allocated range. Note that this IP address range can't be modified after the instance is created. If you change the VPC when configuring connectivity settings for the migration job, this field is not relevant.
func (o SqlIpConfigOutput) AllocatedIpRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlIpConfig) *string { return v.AllocatedIpRange }).(pulumi.StringPtrOutput)
}

// The list of external networks that are allowed to connect to the instance using the IP. See https://en.wikipedia.org/wiki/CIDR_notation#CIDR_notation, also known as 'slash' notation (e.g. `192.168.100.0/24`).
func (o SqlIpConfigOutput) AuthorizedNetworks() SqlAclEntryArrayOutput {
	return o.ApplyT(func(v SqlIpConfig) []SqlAclEntry { return v.AuthorizedNetworks }).(SqlAclEntryArrayOutput)
}

// Whether the instance should be assigned an IPv4 address or not.
func (o SqlIpConfigOutput) EnableIpv4() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SqlIpConfig) *bool { return v.EnableIpv4 }).(pulumi.BoolPtrOutput)
}

// The resource link for the VPC network from which the Cloud SQL instance is accessible for private IP. For example, `projects/myProject/global/networks/default`. This setting can be updated, but it cannot be removed after it is set.
func (o SqlIpConfigOutput) PrivateNetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlIpConfig) *string { return v.PrivateNetwork }).(pulumi.StringPtrOutput)
}

// Whether SSL connections over IP should be enforced or not.
func (o SqlIpConfigOutput) RequireSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SqlIpConfig) *bool { return v.RequireSsl }).(pulumi.BoolPtrOutput)
}

type SqlIpConfigPtrOutput struct{ *pulumi.OutputState }

func (SqlIpConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlIpConfig)(nil)).Elem()
}

func (o SqlIpConfigPtrOutput) ToSqlIpConfigPtrOutput() SqlIpConfigPtrOutput {
	return o
}

func (o SqlIpConfigPtrOutput) ToSqlIpConfigPtrOutputWithContext(ctx context.Context) SqlIpConfigPtrOutput {
	return o
}

func (o SqlIpConfigPtrOutput) Elem() SqlIpConfigOutput {
	return o.ApplyT(func(v *SqlIpConfig) SqlIpConfig {
		if v != nil {
			return *v
		}
		var ret SqlIpConfig
		return ret
	}).(SqlIpConfigOutput)
}

// Optional. The name of the allocated IP address range for the private IP Cloud SQL instance. This name refers to an already allocated IP range address. If set, the instance IP address will be created in the allocated range. Note that this IP address range can't be modified after the instance is created. If you change the VPC when configuring connectivity settings for the migration job, this field is not relevant.
func (o SqlIpConfigPtrOutput) AllocatedIpRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlIpConfig) *string {
		if v == nil {
			return nil
		}
		return v.AllocatedIpRange
	}).(pulumi.StringPtrOutput)
}

// The list of external networks that are allowed to connect to the instance using the IP. See https://en.wikipedia.org/wiki/CIDR_notation#CIDR_notation, also known as 'slash' notation (e.g. `192.168.100.0/24`).
func (o SqlIpConfigPtrOutput) AuthorizedNetworks() SqlAclEntryArrayOutput {
	return o.ApplyT(func(v *SqlIpConfig) []SqlAclEntry {
		if v == nil {
			return nil
		}
		return v.AuthorizedNetworks
	}).(SqlAclEntryArrayOutput)
}

// Whether the instance should be assigned an IPv4 address or not.
func (o SqlIpConfigPtrOutput) EnableIpv4() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SqlIpConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableIpv4
	}).(pulumi.BoolPtrOutput)
}

// The resource link for the VPC network from which the Cloud SQL instance is accessible for private IP. For example, `projects/myProject/global/networks/default`. This setting can be updated, but it cannot be removed after it is set.
func (o SqlIpConfigPtrOutput) PrivateNetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlIpConfig) *string {
		if v == nil {
			return nil
		}
		return v.PrivateNetwork
	}).(pulumi.StringPtrOutput)
}

// Whether SSL connections over IP should be enforced or not.
func (o SqlIpConfigPtrOutput) RequireSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SqlIpConfig) *bool {
		if v == nil {
			return nil
		}
		return v.RequireSsl
	}).(pulumi.BoolPtrOutput)
}

// IP Management configuration.
type SqlIpConfigResponse struct {
	// Optional. The name of the allocated IP address range for the private IP Cloud SQL instance. This name refers to an already allocated IP range address. If set, the instance IP address will be created in the allocated range. Note that this IP address range can't be modified after the instance is created. If you change the VPC when configuring connectivity settings for the migration job, this field is not relevant.
	AllocatedIpRange string `pulumi:"allocatedIpRange"`
	// The list of external networks that are allowed to connect to the instance using the IP. See https://en.wikipedia.org/wiki/CIDR_notation#CIDR_notation, also known as 'slash' notation (e.g. `192.168.100.0/24`).
	AuthorizedNetworks []SqlAclEntryResponse `pulumi:"authorizedNetworks"`
	// Whether the instance should be assigned an IPv4 address or not.
	EnableIpv4 bool `pulumi:"enableIpv4"`
	// The resource link for the VPC network from which the Cloud SQL instance is accessible for private IP. For example, `projects/myProject/global/networks/default`. This setting can be updated, but it cannot be removed after it is set.
	PrivateNetwork string `pulumi:"privateNetwork"`
	// Whether SSL connections over IP should be enforced or not.
	RequireSsl bool `pulumi:"requireSsl"`
}

// IP Management configuration.
type SqlIpConfigResponseOutput struct{ *pulumi.OutputState }

func (SqlIpConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlIpConfigResponse)(nil)).Elem()
}

func (o SqlIpConfigResponseOutput) ToSqlIpConfigResponseOutput() SqlIpConfigResponseOutput {
	return o
}

func (o SqlIpConfigResponseOutput) ToSqlIpConfigResponseOutputWithContext(ctx context.Context) SqlIpConfigResponseOutput {
	return o
}

// Optional. The name of the allocated IP address range for the private IP Cloud SQL instance. This name refers to an already allocated IP range address. If set, the instance IP address will be created in the allocated range. Note that this IP address range can't be modified after the instance is created. If you change the VPC when configuring connectivity settings for the migration job, this field is not relevant.
func (o SqlIpConfigResponseOutput) AllocatedIpRange() pulumi.StringOutput {
	return o.ApplyT(func(v SqlIpConfigResponse) string { return v.AllocatedIpRange }).(pulumi.StringOutput)
}

// The list of external networks that are allowed to connect to the instance using the IP. See https://en.wikipedia.org/wiki/CIDR_notation#CIDR_notation, also known as 'slash' notation (e.g. `192.168.100.0/24`).
func (o SqlIpConfigResponseOutput) AuthorizedNetworks() SqlAclEntryResponseArrayOutput {
	return o.ApplyT(func(v SqlIpConfigResponse) []SqlAclEntryResponse { return v.AuthorizedNetworks }).(SqlAclEntryResponseArrayOutput)
}

// Whether the instance should be assigned an IPv4 address or not.
func (o SqlIpConfigResponseOutput) EnableIpv4() pulumi.BoolOutput {
	return o.ApplyT(func(v SqlIpConfigResponse) bool { return v.EnableIpv4 }).(pulumi.BoolOutput)
}

// The resource link for the VPC network from which the Cloud SQL instance is accessible for private IP. For example, `projects/myProject/global/networks/default`. This setting can be updated, but it cannot be removed after it is set.
func (o SqlIpConfigResponseOutput) PrivateNetwork() pulumi.StringOutput {
	return o.ApplyT(func(v SqlIpConfigResponse) string { return v.PrivateNetwork }).(pulumi.StringOutput)
}

// Whether SSL connections over IP should be enforced or not.
func (o SqlIpConfigResponseOutput) RequireSsl() pulumi.BoolOutput {
	return o.ApplyT(func(v SqlIpConfigResponse) bool { return v.RequireSsl }).(pulumi.BoolOutput)
}

// SSL configuration information.
type SslConfig struct {
	// Input only. The x509 PEM-encoded certificate of the CA that signed the source database server's certificate. The replica will use this certificate to verify it's connecting to the right host.
	CaCertificate string `pulumi:"caCertificate"`
	// Input only. The x509 PEM-encoded certificate that will be used by the replica to authenticate against the source database server.If this field is used then the 'client_key' field is mandatory.
	ClientCertificate *string `pulumi:"clientCertificate"`
	// Input only. The unencrypted PKCS#1 or PKCS#8 PEM-encoded private key associated with the Client Certificate. If this field is used then the 'client_certificate' field is mandatory.
	ClientKey *string `pulumi:"clientKey"`
}

// SslConfigInput is an input type that accepts SslConfigArgs and SslConfigOutput values.
// You can construct a concrete instance of `SslConfigInput` via:
//
//	SslConfigArgs{...}
type SslConfigInput interface {
	pulumi.Input

	ToSslConfigOutput() SslConfigOutput
	ToSslConfigOutputWithContext(context.Context) SslConfigOutput
}

// SSL configuration information.
type SslConfigArgs struct {
	// Input only. The x509 PEM-encoded certificate of the CA that signed the source database server's certificate. The replica will use this certificate to verify it's connecting to the right host.
	CaCertificate pulumi.StringInput `pulumi:"caCertificate"`
	// Input only. The x509 PEM-encoded certificate that will be used by the replica to authenticate against the source database server.If this field is used then the 'client_key' field is mandatory.
	ClientCertificate pulumi.StringPtrInput `pulumi:"clientCertificate"`
	// Input only. The unencrypted PKCS#1 or PKCS#8 PEM-encoded private key associated with the Client Certificate. If this field is used then the 'client_certificate' field is mandatory.
	ClientKey pulumi.StringPtrInput `pulumi:"clientKey"`
}

func (SslConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SslConfig)(nil)).Elem()
}

func (i SslConfigArgs) ToSslConfigOutput() SslConfigOutput {
	return i.ToSslConfigOutputWithContext(context.Background())
}

func (i SslConfigArgs) ToSslConfigOutputWithContext(ctx context.Context) SslConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslConfigOutput)
}

func (i SslConfigArgs) ToSslConfigPtrOutput() SslConfigPtrOutput {
	return i.ToSslConfigPtrOutputWithContext(context.Background())
}

func (i SslConfigArgs) ToSslConfigPtrOutputWithContext(ctx context.Context) SslConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslConfigOutput).ToSslConfigPtrOutputWithContext(ctx)
}

// SslConfigPtrInput is an input type that accepts SslConfigArgs, SslConfigPtr and SslConfigPtrOutput values.
// You can construct a concrete instance of `SslConfigPtrInput` via:
//
//	        SslConfigArgs{...}
//
//	or:
//
//	        nil
type SslConfigPtrInput interface {
	pulumi.Input

	ToSslConfigPtrOutput() SslConfigPtrOutput
	ToSslConfigPtrOutputWithContext(context.Context) SslConfigPtrOutput
}

type sslConfigPtrType SslConfigArgs

func SslConfigPtr(v *SslConfigArgs) SslConfigPtrInput {
	return (*sslConfigPtrType)(v)
}

func (*sslConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SslConfig)(nil)).Elem()
}

func (i *sslConfigPtrType) ToSslConfigPtrOutput() SslConfigPtrOutput {
	return i.ToSslConfigPtrOutputWithContext(context.Background())
}

func (i *sslConfigPtrType) ToSslConfigPtrOutputWithContext(ctx context.Context) SslConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslConfigPtrOutput)
}

// SSL configuration information.
type SslConfigOutput struct{ *pulumi.OutputState }

func (SslConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SslConfig)(nil)).Elem()
}

func (o SslConfigOutput) ToSslConfigOutput() SslConfigOutput {
	return o
}

func (o SslConfigOutput) ToSslConfigOutputWithContext(ctx context.Context) SslConfigOutput {
	return o
}

func (o SslConfigOutput) ToSslConfigPtrOutput() SslConfigPtrOutput {
	return o.ToSslConfigPtrOutputWithContext(context.Background())
}

func (o SslConfigOutput) ToSslConfigPtrOutputWithContext(ctx context.Context) SslConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SslConfig) *SslConfig {
		return &v
	}).(SslConfigPtrOutput)
}

// Input only. The x509 PEM-encoded certificate of the CA that signed the source database server's certificate. The replica will use this certificate to verify it's connecting to the right host.
func (o SslConfigOutput) CaCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v SslConfig) string { return v.CaCertificate }).(pulumi.StringOutput)
}

// Input only. The x509 PEM-encoded certificate that will be used by the replica to authenticate against the source database server.If this field is used then the 'client_key' field is mandatory.
func (o SslConfigOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SslConfig) *string { return v.ClientCertificate }).(pulumi.StringPtrOutput)
}

// Input only. The unencrypted PKCS#1 or PKCS#8 PEM-encoded private key associated with the Client Certificate. If this field is used then the 'client_certificate' field is mandatory.
func (o SslConfigOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SslConfig) *string { return v.ClientKey }).(pulumi.StringPtrOutput)
}

type SslConfigPtrOutput struct{ *pulumi.OutputState }

func (SslConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SslConfig)(nil)).Elem()
}

func (o SslConfigPtrOutput) ToSslConfigPtrOutput() SslConfigPtrOutput {
	return o
}

func (o SslConfigPtrOutput) ToSslConfigPtrOutputWithContext(ctx context.Context) SslConfigPtrOutput {
	return o
}

func (o SslConfigPtrOutput) Elem() SslConfigOutput {
	return o.ApplyT(func(v *SslConfig) SslConfig {
		if v != nil {
			return *v
		}
		var ret SslConfig
		return ret
	}).(SslConfigOutput)
}

// Input only. The x509 PEM-encoded certificate of the CA that signed the source database server's certificate. The replica will use this certificate to verify it's connecting to the right host.
func (o SslConfigPtrOutput) CaCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SslConfig) *string {
		if v == nil {
			return nil
		}
		return &v.CaCertificate
	}).(pulumi.StringPtrOutput)
}

// Input only. The x509 PEM-encoded certificate that will be used by the replica to authenticate against the source database server.If this field is used then the 'client_key' field is mandatory.
func (o SslConfigPtrOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SslConfig) *string {
		if v == nil {
			return nil
		}
		return v.ClientCertificate
	}).(pulumi.StringPtrOutput)
}

// Input only. The unencrypted PKCS#1 or PKCS#8 PEM-encoded private key associated with the Client Certificate. If this field is used then the 'client_certificate' field is mandatory.
func (o SslConfigPtrOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SslConfig) *string {
		if v == nil {
			return nil
		}
		return v.ClientKey
	}).(pulumi.StringPtrOutput)
}

// SSL configuration information.
type SslConfigResponse struct {
	// Input only. The x509 PEM-encoded certificate of the CA that signed the source database server's certificate. The replica will use this certificate to verify it's connecting to the right host.
	CaCertificate string `pulumi:"caCertificate"`
	// Input only. The x509 PEM-encoded certificate that will be used by the replica to authenticate against the source database server.If this field is used then the 'client_key' field is mandatory.
	ClientCertificate string `pulumi:"clientCertificate"`
	// Input only. The unencrypted PKCS#1 or PKCS#8 PEM-encoded private key associated with the Client Certificate. If this field is used then the 'client_certificate' field is mandatory.
	ClientKey string `pulumi:"clientKey"`
	// The ssl config type according to 'client_key', 'client_certificate' and 'ca_certificate'.
	Type string `pulumi:"type"`
}

// SSL configuration information.
type SslConfigResponseOutput struct{ *pulumi.OutputState }

func (SslConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SslConfigResponse)(nil)).Elem()
}

func (o SslConfigResponseOutput) ToSslConfigResponseOutput() SslConfigResponseOutput {
	return o
}

func (o SslConfigResponseOutput) ToSslConfigResponseOutputWithContext(ctx context.Context) SslConfigResponseOutput {
	return o
}

// Input only. The x509 PEM-encoded certificate of the CA that signed the source database server's certificate. The replica will use this certificate to verify it's connecting to the right host.
func (o SslConfigResponseOutput) CaCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v SslConfigResponse) string { return v.CaCertificate }).(pulumi.StringOutput)
}

// Input only. The x509 PEM-encoded certificate that will be used by the replica to authenticate against the source database server.If this field is used then the 'client_key' field is mandatory.
func (o SslConfigResponseOutput) ClientCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v SslConfigResponse) string { return v.ClientCertificate }).(pulumi.StringOutput)
}

// Input only. The unencrypted PKCS#1 or PKCS#8 PEM-encoded private key associated with the Client Certificate. If this field is used then the 'client_certificate' field is mandatory.
func (o SslConfigResponseOutput) ClientKey() pulumi.StringOutput {
	return o.ApplyT(func(v SslConfigResponse) string { return v.ClientKey }).(pulumi.StringOutput)
}

// The ssl config type according to 'client_key', 'client_certificate' and 'ca_certificate'.
func (o SslConfigResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SslConfigResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The source database will allow incoming connections from the public IP of the destination database. You can retrieve the public IP of the Cloud SQL instance from the Cloud SQL console or using Cloud SQL APIs. No additional configuration is required.
type StaticIpConnectivity struct {
}

// StaticIpConnectivityInput is an input type that accepts StaticIpConnectivityArgs and StaticIpConnectivityOutput values.
// You can construct a concrete instance of `StaticIpConnectivityInput` via:
//
//	StaticIpConnectivityArgs{...}
type StaticIpConnectivityInput interface {
	pulumi.Input

	ToStaticIpConnectivityOutput() StaticIpConnectivityOutput
	ToStaticIpConnectivityOutputWithContext(context.Context) StaticIpConnectivityOutput
}

// The source database will allow incoming connections from the public IP of the destination database. You can retrieve the public IP of the Cloud SQL instance from the Cloud SQL console or using Cloud SQL APIs. No additional configuration is required.
type StaticIpConnectivityArgs struct {
}

func (StaticIpConnectivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticIpConnectivity)(nil)).Elem()
}

func (i StaticIpConnectivityArgs) ToStaticIpConnectivityOutput() StaticIpConnectivityOutput {
	return i.ToStaticIpConnectivityOutputWithContext(context.Background())
}

func (i StaticIpConnectivityArgs) ToStaticIpConnectivityOutputWithContext(ctx context.Context) StaticIpConnectivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticIpConnectivityOutput)
}

func (i StaticIpConnectivityArgs) ToStaticIpConnectivityPtrOutput() StaticIpConnectivityPtrOutput {
	return i.ToStaticIpConnectivityPtrOutputWithContext(context.Background())
}

func (i StaticIpConnectivityArgs) ToStaticIpConnectivityPtrOutputWithContext(ctx context.Context) StaticIpConnectivityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticIpConnectivityOutput).ToStaticIpConnectivityPtrOutputWithContext(ctx)
}

// StaticIpConnectivityPtrInput is an input type that accepts StaticIpConnectivityArgs, StaticIpConnectivityPtr and StaticIpConnectivityPtrOutput values.
// You can construct a concrete instance of `StaticIpConnectivityPtrInput` via:
//
//	        StaticIpConnectivityArgs{...}
//
//	or:
//
//	        nil
type StaticIpConnectivityPtrInput interface {
	pulumi.Input

	ToStaticIpConnectivityPtrOutput() StaticIpConnectivityPtrOutput
	ToStaticIpConnectivityPtrOutputWithContext(context.Context) StaticIpConnectivityPtrOutput
}

type staticIpConnectivityPtrType StaticIpConnectivityArgs

func StaticIpConnectivityPtr(v *StaticIpConnectivityArgs) StaticIpConnectivityPtrInput {
	return (*staticIpConnectivityPtrType)(v)
}

func (*staticIpConnectivityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StaticIpConnectivity)(nil)).Elem()
}

func (i *staticIpConnectivityPtrType) ToStaticIpConnectivityPtrOutput() StaticIpConnectivityPtrOutput {
	return i.ToStaticIpConnectivityPtrOutputWithContext(context.Background())
}

func (i *staticIpConnectivityPtrType) ToStaticIpConnectivityPtrOutputWithContext(ctx context.Context) StaticIpConnectivityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticIpConnectivityPtrOutput)
}

// The source database will allow incoming connections from the public IP of the destination database. You can retrieve the public IP of the Cloud SQL instance from the Cloud SQL console or using Cloud SQL APIs. No additional configuration is required.
type StaticIpConnectivityOutput struct{ *pulumi.OutputState }

func (StaticIpConnectivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticIpConnectivity)(nil)).Elem()
}

func (o StaticIpConnectivityOutput) ToStaticIpConnectivityOutput() StaticIpConnectivityOutput {
	return o
}

func (o StaticIpConnectivityOutput) ToStaticIpConnectivityOutputWithContext(ctx context.Context) StaticIpConnectivityOutput {
	return o
}

func (o StaticIpConnectivityOutput) ToStaticIpConnectivityPtrOutput() StaticIpConnectivityPtrOutput {
	return o.ToStaticIpConnectivityPtrOutputWithContext(context.Background())
}

func (o StaticIpConnectivityOutput) ToStaticIpConnectivityPtrOutputWithContext(ctx context.Context) StaticIpConnectivityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StaticIpConnectivity) *StaticIpConnectivity {
		return &v
	}).(StaticIpConnectivityPtrOutput)
}

type StaticIpConnectivityPtrOutput struct{ *pulumi.OutputState }

func (StaticIpConnectivityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StaticIpConnectivity)(nil)).Elem()
}

func (o StaticIpConnectivityPtrOutput) ToStaticIpConnectivityPtrOutput() StaticIpConnectivityPtrOutput {
	return o
}

func (o StaticIpConnectivityPtrOutput) ToStaticIpConnectivityPtrOutputWithContext(ctx context.Context) StaticIpConnectivityPtrOutput {
	return o
}

func (o StaticIpConnectivityPtrOutput) Elem() StaticIpConnectivityOutput {
	return o.ApplyT(func(v *StaticIpConnectivity) StaticIpConnectivity {
		if v != nil {
			return *v
		}
		var ret StaticIpConnectivity
		return ret
	}).(StaticIpConnectivityOutput)
}

// The source database will allow incoming connections from the public IP of the destination database. You can retrieve the public IP of the Cloud SQL instance from the Cloud SQL console or using Cloud SQL APIs. No additional configuration is required.
type StaticIpConnectivityResponse struct {
}

// The source database will allow incoming connections from the public IP of the destination database. You can retrieve the public IP of the Cloud SQL instance from the Cloud SQL console or using Cloud SQL APIs. No additional configuration is required.
type StaticIpConnectivityResponseOutput struct{ *pulumi.OutputState }

func (StaticIpConnectivityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticIpConnectivityResponse)(nil)).Elem()
}

func (o StaticIpConnectivityResponseOutput) ToStaticIpConnectivityResponseOutput() StaticIpConnectivityResponseOutput {
	return o
}

func (o StaticIpConnectivityResponseOutput) ToStaticIpConnectivityResponseOutputWithContext(ctx context.Context) StaticIpConnectivityResponseOutput {
	return o
}

// Static IP address connectivity configured on service project.
type StaticServiceIpConnectivity struct {
}

// StaticServiceIpConnectivityInput is an input type that accepts StaticServiceIpConnectivityArgs and StaticServiceIpConnectivityOutput values.
// You can construct a concrete instance of `StaticServiceIpConnectivityInput` via:
//
//	StaticServiceIpConnectivityArgs{...}
type StaticServiceIpConnectivityInput interface {
	pulumi.Input

	ToStaticServiceIpConnectivityOutput() StaticServiceIpConnectivityOutput
	ToStaticServiceIpConnectivityOutputWithContext(context.Context) StaticServiceIpConnectivityOutput
}

// Static IP address connectivity configured on service project.
type StaticServiceIpConnectivityArgs struct {
}

func (StaticServiceIpConnectivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticServiceIpConnectivity)(nil)).Elem()
}

func (i StaticServiceIpConnectivityArgs) ToStaticServiceIpConnectivityOutput() StaticServiceIpConnectivityOutput {
	return i.ToStaticServiceIpConnectivityOutputWithContext(context.Background())
}

func (i StaticServiceIpConnectivityArgs) ToStaticServiceIpConnectivityOutputWithContext(ctx context.Context) StaticServiceIpConnectivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticServiceIpConnectivityOutput)
}

func (i StaticServiceIpConnectivityArgs) ToStaticServiceIpConnectivityPtrOutput() StaticServiceIpConnectivityPtrOutput {
	return i.ToStaticServiceIpConnectivityPtrOutputWithContext(context.Background())
}

func (i StaticServiceIpConnectivityArgs) ToStaticServiceIpConnectivityPtrOutputWithContext(ctx context.Context) StaticServiceIpConnectivityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticServiceIpConnectivityOutput).ToStaticServiceIpConnectivityPtrOutputWithContext(ctx)
}

// StaticServiceIpConnectivityPtrInput is an input type that accepts StaticServiceIpConnectivityArgs, StaticServiceIpConnectivityPtr and StaticServiceIpConnectivityPtrOutput values.
// You can construct a concrete instance of `StaticServiceIpConnectivityPtrInput` via:
//
//	        StaticServiceIpConnectivityArgs{...}
//
//	or:
//
//	        nil
type StaticServiceIpConnectivityPtrInput interface {
	pulumi.Input

	ToStaticServiceIpConnectivityPtrOutput() StaticServiceIpConnectivityPtrOutput
	ToStaticServiceIpConnectivityPtrOutputWithContext(context.Context) StaticServiceIpConnectivityPtrOutput
}

type staticServiceIpConnectivityPtrType StaticServiceIpConnectivityArgs

func StaticServiceIpConnectivityPtr(v *StaticServiceIpConnectivityArgs) StaticServiceIpConnectivityPtrInput {
	return (*staticServiceIpConnectivityPtrType)(v)
}

func (*staticServiceIpConnectivityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StaticServiceIpConnectivity)(nil)).Elem()
}

func (i *staticServiceIpConnectivityPtrType) ToStaticServiceIpConnectivityPtrOutput() StaticServiceIpConnectivityPtrOutput {
	return i.ToStaticServiceIpConnectivityPtrOutputWithContext(context.Background())
}

func (i *staticServiceIpConnectivityPtrType) ToStaticServiceIpConnectivityPtrOutputWithContext(ctx context.Context) StaticServiceIpConnectivityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticServiceIpConnectivityPtrOutput)
}

// Static IP address connectivity configured on service project.
type StaticServiceIpConnectivityOutput struct{ *pulumi.OutputState }

func (StaticServiceIpConnectivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticServiceIpConnectivity)(nil)).Elem()
}

func (o StaticServiceIpConnectivityOutput) ToStaticServiceIpConnectivityOutput() StaticServiceIpConnectivityOutput {
	return o
}

func (o StaticServiceIpConnectivityOutput) ToStaticServiceIpConnectivityOutputWithContext(ctx context.Context) StaticServiceIpConnectivityOutput {
	return o
}

func (o StaticServiceIpConnectivityOutput) ToStaticServiceIpConnectivityPtrOutput() StaticServiceIpConnectivityPtrOutput {
	return o.ToStaticServiceIpConnectivityPtrOutputWithContext(context.Background())
}

func (o StaticServiceIpConnectivityOutput) ToStaticServiceIpConnectivityPtrOutputWithContext(ctx context.Context) StaticServiceIpConnectivityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StaticServiceIpConnectivity) *StaticServiceIpConnectivity {
		return &v
	}).(StaticServiceIpConnectivityPtrOutput)
}

type StaticServiceIpConnectivityPtrOutput struct{ *pulumi.OutputState }

func (StaticServiceIpConnectivityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StaticServiceIpConnectivity)(nil)).Elem()
}

func (o StaticServiceIpConnectivityPtrOutput) ToStaticServiceIpConnectivityPtrOutput() StaticServiceIpConnectivityPtrOutput {
	return o
}

func (o StaticServiceIpConnectivityPtrOutput) ToStaticServiceIpConnectivityPtrOutputWithContext(ctx context.Context) StaticServiceIpConnectivityPtrOutput {
	return o
}

func (o StaticServiceIpConnectivityPtrOutput) Elem() StaticServiceIpConnectivityOutput {
	return o.ApplyT(func(v *StaticServiceIpConnectivity) StaticServiceIpConnectivity {
		if v != nil {
			return *v
		}
		var ret StaticServiceIpConnectivity
		return ret
	}).(StaticServiceIpConnectivityOutput)
}

// Static IP address connectivity configured on service project.
type StaticServiceIpConnectivityResponse struct {
}

// Static IP address connectivity configured on service project.
type StaticServiceIpConnectivityResponseOutput struct{ *pulumi.OutputState }

func (StaticServiceIpConnectivityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticServiceIpConnectivityResponse)(nil)).Elem()
}

func (o StaticServiceIpConnectivityResponseOutput) ToStaticServiceIpConnectivityResponseOutput() StaticServiceIpConnectivityResponseOutput {
	return o
}

func (o StaticServiceIpConnectivityResponseOutput) ToStaticServiceIpConnectivityResponseOutputWithContext(ctx context.Context) StaticServiceIpConnectivityResponseOutput {
	return o
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type StatusResponse struct {
	// The status code, which should be an enum value of google.rpc.Code.
	Code int `pulumi:"code"`
	// A list of messages that carry the error details. There is a common set of message types for APIs to use.
	Details []map[string]interface{} `pulumi:"details"`
	// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
	Message string `pulumi:"message"`
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type StatusResponseOutput struct{ *pulumi.OutputState }

func (StatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusResponse)(nil)).Elem()
}

func (o StatusResponseOutput) ToStatusResponseOutput() StatusResponseOutput {
	return o
}

func (o StatusResponseOutput) ToStatusResponseOutputWithContext(ctx context.Context) StatusResponseOutput {
	return o
}

// The status code, which should be an enum value of google.rpc.Code.
func (o StatusResponseOutput) Code() pulumi.IntOutput {
	return o.ApplyT(func(v StatusResponse) int { return v.Code }).(pulumi.IntOutput)
}

// A list of messages that carry the error details. There is a common set of message types for APIs to use.
func (o StatusResponseOutput) Details() pulumi.MapArrayOutput {
	return o.ApplyT(func(v StatusResponse) []map[string]interface{} { return v.Details }).(pulumi.MapArrayOutput)
}

// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
func (o StatusResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v StatusResponse) string { return v.Message }).(pulumi.StringOutput)
}

// The username/password for a database user. Used for specifying initial users at cluster creation time.
type UserPassword struct {
	// The initial password for the user.
	Password *string `pulumi:"password"`
	// The database username.
	User *string `pulumi:"user"`
}

// UserPasswordInput is an input type that accepts UserPasswordArgs and UserPasswordOutput values.
// You can construct a concrete instance of `UserPasswordInput` via:
//
//	UserPasswordArgs{...}
type UserPasswordInput interface {
	pulumi.Input

	ToUserPasswordOutput() UserPasswordOutput
	ToUserPasswordOutputWithContext(context.Context) UserPasswordOutput
}

// The username/password for a database user. Used for specifying initial users at cluster creation time.
type UserPasswordArgs struct {
	// The initial password for the user.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The database username.
	User pulumi.StringPtrInput `pulumi:"user"`
}

func (UserPasswordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPassword)(nil)).Elem()
}

func (i UserPasswordArgs) ToUserPasswordOutput() UserPasswordOutput {
	return i.ToUserPasswordOutputWithContext(context.Background())
}

func (i UserPasswordArgs) ToUserPasswordOutputWithContext(ctx context.Context) UserPasswordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPasswordOutput)
}

func (i UserPasswordArgs) ToUserPasswordPtrOutput() UserPasswordPtrOutput {
	return i.ToUserPasswordPtrOutputWithContext(context.Background())
}

func (i UserPasswordArgs) ToUserPasswordPtrOutputWithContext(ctx context.Context) UserPasswordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPasswordOutput).ToUserPasswordPtrOutputWithContext(ctx)
}

// UserPasswordPtrInput is an input type that accepts UserPasswordArgs, UserPasswordPtr and UserPasswordPtrOutput values.
// You can construct a concrete instance of `UserPasswordPtrInput` via:
//
//	        UserPasswordArgs{...}
//
//	or:
//
//	        nil
type UserPasswordPtrInput interface {
	pulumi.Input

	ToUserPasswordPtrOutput() UserPasswordPtrOutput
	ToUserPasswordPtrOutputWithContext(context.Context) UserPasswordPtrOutput
}

type userPasswordPtrType UserPasswordArgs

func UserPasswordPtr(v *UserPasswordArgs) UserPasswordPtrInput {
	return (*userPasswordPtrType)(v)
}

func (*userPasswordPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserPassword)(nil)).Elem()
}

func (i *userPasswordPtrType) ToUserPasswordPtrOutput() UserPasswordPtrOutput {
	return i.ToUserPasswordPtrOutputWithContext(context.Background())
}

func (i *userPasswordPtrType) ToUserPasswordPtrOutputWithContext(ctx context.Context) UserPasswordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPasswordPtrOutput)
}

// The username/password for a database user. Used for specifying initial users at cluster creation time.
type UserPasswordOutput struct{ *pulumi.OutputState }

func (UserPasswordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPassword)(nil)).Elem()
}

func (o UserPasswordOutput) ToUserPasswordOutput() UserPasswordOutput {
	return o
}

func (o UserPasswordOutput) ToUserPasswordOutputWithContext(ctx context.Context) UserPasswordOutput {
	return o
}

func (o UserPasswordOutput) ToUserPasswordPtrOutput() UserPasswordPtrOutput {
	return o.ToUserPasswordPtrOutputWithContext(context.Background())
}

func (o UserPasswordOutput) ToUserPasswordPtrOutputWithContext(ctx context.Context) UserPasswordPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UserPassword) *UserPassword {
		return &v
	}).(UserPasswordPtrOutput)
}

// The initial password for the user.
func (o UserPasswordOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserPassword) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The database username.
func (o UserPasswordOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserPassword) *string { return v.User }).(pulumi.StringPtrOutput)
}

type UserPasswordPtrOutput struct{ *pulumi.OutputState }

func (UserPasswordPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserPassword)(nil)).Elem()
}

func (o UserPasswordPtrOutput) ToUserPasswordPtrOutput() UserPasswordPtrOutput {
	return o
}

func (o UserPasswordPtrOutput) ToUserPasswordPtrOutputWithContext(ctx context.Context) UserPasswordPtrOutput {
	return o
}

func (o UserPasswordPtrOutput) Elem() UserPasswordOutput {
	return o.ApplyT(func(v *UserPassword) UserPassword {
		if v != nil {
			return *v
		}
		var ret UserPassword
		return ret
	}).(UserPasswordOutput)
}

// The initial password for the user.
func (o UserPasswordPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserPassword) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The database username.
func (o UserPasswordPtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserPassword) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

// The username/password for a database user. Used for specifying initial users at cluster creation time.
type UserPasswordResponse struct {
	// The initial password for the user.
	Password string `pulumi:"password"`
	// Indicates if the initial_user.password field has been set.
	PasswordSet bool `pulumi:"passwordSet"`
	// The database username.
	User string `pulumi:"user"`
}

// The username/password for a database user. Used for specifying initial users at cluster creation time.
type UserPasswordResponseOutput struct{ *pulumi.OutputState }

func (UserPasswordResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPasswordResponse)(nil)).Elem()
}

func (o UserPasswordResponseOutput) ToUserPasswordResponseOutput() UserPasswordResponseOutput {
	return o
}

func (o UserPasswordResponseOutput) ToUserPasswordResponseOutputWithContext(ctx context.Context) UserPasswordResponseOutput {
	return o
}

// The initial password for the user.
func (o UserPasswordResponseOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v UserPasswordResponse) string { return v.Password }).(pulumi.StringOutput)
}

// Indicates if the initial_user.password field has been set.
func (o UserPasswordResponseOutput) PasswordSet() pulumi.BoolOutput {
	return o.ApplyT(func(v UserPasswordResponse) bool { return v.PasswordSet }).(pulumi.BoolOutput)
}

// The database username.
func (o UserPasswordResponseOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v UserPasswordResponse) string { return v.User }).(pulumi.StringOutput)
}

// A list of values to filter by in ConditionalColumnSetValue
type ValueListFilter struct {
	// Whether to ignore case when filtering by values. Defaults to false
	IgnoreCase bool `pulumi:"ignoreCase"`
	// Indicates whether the filter matches rows with values that are present in the list or those with values not present in it.
	ValuePresentList ValueListFilterValuePresentList `pulumi:"valuePresentList"`
	// The list to be used to filter by
	Values []string `pulumi:"values"`
}

// ValueListFilterInput is an input type that accepts ValueListFilterArgs and ValueListFilterOutput values.
// You can construct a concrete instance of `ValueListFilterInput` via:
//
//	ValueListFilterArgs{...}
type ValueListFilterInput interface {
	pulumi.Input

	ToValueListFilterOutput() ValueListFilterOutput
	ToValueListFilterOutputWithContext(context.Context) ValueListFilterOutput
}

// A list of values to filter by in ConditionalColumnSetValue
type ValueListFilterArgs struct {
	// Whether to ignore case when filtering by values. Defaults to false
	IgnoreCase pulumi.BoolInput `pulumi:"ignoreCase"`
	// Indicates whether the filter matches rows with values that are present in the list or those with values not present in it.
	ValuePresentList ValueListFilterValuePresentListInput `pulumi:"valuePresentList"`
	// The list to be used to filter by
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ValueListFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValueListFilter)(nil)).Elem()
}

func (i ValueListFilterArgs) ToValueListFilterOutput() ValueListFilterOutput {
	return i.ToValueListFilterOutputWithContext(context.Background())
}

func (i ValueListFilterArgs) ToValueListFilterOutputWithContext(ctx context.Context) ValueListFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValueListFilterOutput)
}

func (i ValueListFilterArgs) ToValueListFilterPtrOutput() ValueListFilterPtrOutput {
	return i.ToValueListFilterPtrOutputWithContext(context.Background())
}

func (i ValueListFilterArgs) ToValueListFilterPtrOutputWithContext(ctx context.Context) ValueListFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValueListFilterOutput).ToValueListFilterPtrOutputWithContext(ctx)
}

// ValueListFilterPtrInput is an input type that accepts ValueListFilterArgs, ValueListFilterPtr and ValueListFilterPtrOutput values.
// You can construct a concrete instance of `ValueListFilterPtrInput` via:
//
//	        ValueListFilterArgs{...}
//
//	or:
//
//	        nil
type ValueListFilterPtrInput interface {
	pulumi.Input

	ToValueListFilterPtrOutput() ValueListFilterPtrOutput
	ToValueListFilterPtrOutputWithContext(context.Context) ValueListFilterPtrOutput
}

type valueListFilterPtrType ValueListFilterArgs

func ValueListFilterPtr(v *ValueListFilterArgs) ValueListFilterPtrInput {
	return (*valueListFilterPtrType)(v)
}

func (*valueListFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ValueListFilter)(nil)).Elem()
}

func (i *valueListFilterPtrType) ToValueListFilterPtrOutput() ValueListFilterPtrOutput {
	return i.ToValueListFilterPtrOutputWithContext(context.Background())
}

func (i *valueListFilterPtrType) ToValueListFilterPtrOutputWithContext(ctx context.Context) ValueListFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValueListFilterPtrOutput)
}

// A list of values to filter by in ConditionalColumnSetValue
type ValueListFilterOutput struct{ *pulumi.OutputState }

func (ValueListFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValueListFilter)(nil)).Elem()
}

func (o ValueListFilterOutput) ToValueListFilterOutput() ValueListFilterOutput {
	return o
}

func (o ValueListFilterOutput) ToValueListFilterOutputWithContext(ctx context.Context) ValueListFilterOutput {
	return o
}

func (o ValueListFilterOutput) ToValueListFilterPtrOutput() ValueListFilterPtrOutput {
	return o.ToValueListFilterPtrOutputWithContext(context.Background())
}

func (o ValueListFilterOutput) ToValueListFilterPtrOutputWithContext(ctx context.Context) ValueListFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ValueListFilter) *ValueListFilter {
		return &v
	}).(ValueListFilterPtrOutput)
}

// Whether to ignore case when filtering by values. Defaults to false
func (o ValueListFilterOutput) IgnoreCase() pulumi.BoolOutput {
	return o.ApplyT(func(v ValueListFilter) bool { return v.IgnoreCase }).(pulumi.BoolOutput)
}

// Indicates whether the filter matches rows with values that are present in the list or those with values not present in it.
func (o ValueListFilterOutput) ValuePresentList() ValueListFilterValuePresentListOutput {
	return o.ApplyT(func(v ValueListFilter) ValueListFilterValuePresentList { return v.ValuePresentList }).(ValueListFilterValuePresentListOutput)
}

// The list to be used to filter by
func (o ValueListFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ValueListFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ValueListFilterPtrOutput struct{ *pulumi.OutputState }

func (ValueListFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ValueListFilter)(nil)).Elem()
}

func (o ValueListFilterPtrOutput) ToValueListFilterPtrOutput() ValueListFilterPtrOutput {
	return o
}

func (o ValueListFilterPtrOutput) ToValueListFilterPtrOutputWithContext(ctx context.Context) ValueListFilterPtrOutput {
	return o
}

func (o ValueListFilterPtrOutput) Elem() ValueListFilterOutput {
	return o.ApplyT(func(v *ValueListFilter) ValueListFilter {
		if v != nil {
			return *v
		}
		var ret ValueListFilter
		return ret
	}).(ValueListFilterOutput)
}

// Whether to ignore case when filtering by values. Defaults to false
func (o ValueListFilterPtrOutput) IgnoreCase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ValueListFilter) *bool {
		if v == nil {
			return nil
		}
		return &v.IgnoreCase
	}).(pulumi.BoolPtrOutput)
}

// Indicates whether the filter matches rows with values that are present in the list or those with values not present in it.
func (o ValueListFilterPtrOutput) ValuePresentList() ValueListFilterValuePresentListPtrOutput {
	return o.ApplyT(func(v *ValueListFilter) *ValueListFilterValuePresentList {
		if v == nil {
			return nil
		}
		return &v.ValuePresentList
	}).(ValueListFilterValuePresentListPtrOutput)
}

// The list to be used to filter by
func (o ValueListFilterPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ValueListFilter) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

// A list of values to filter by in ConditionalColumnSetValue
type ValueListFilterResponse struct {
	// Whether to ignore case when filtering by values. Defaults to false
	IgnoreCase bool `pulumi:"ignoreCase"`
	// Indicates whether the filter matches rows with values that are present in the list or those with values not present in it.
	ValuePresentList string `pulumi:"valuePresentList"`
	// The list to be used to filter by
	Values []string `pulumi:"values"`
}

// A list of values to filter by in ConditionalColumnSetValue
type ValueListFilterResponseOutput struct{ *pulumi.OutputState }

func (ValueListFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValueListFilterResponse)(nil)).Elem()
}

func (o ValueListFilterResponseOutput) ToValueListFilterResponseOutput() ValueListFilterResponseOutput {
	return o
}

func (o ValueListFilterResponseOutput) ToValueListFilterResponseOutputWithContext(ctx context.Context) ValueListFilterResponseOutput {
	return o
}

// Whether to ignore case when filtering by values. Defaults to false
func (o ValueListFilterResponseOutput) IgnoreCase() pulumi.BoolOutput {
	return o.ApplyT(func(v ValueListFilterResponse) bool { return v.IgnoreCase }).(pulumi.BoolOutput)
}

// Indicates whether the filter matches rows with values that are present in the list or those with values not present in it.
func (o ValueListFilterResponseOutput) ValuePresentList() pulumi.StringOutput {
	return o.ApplyT(func(v ValueListFilterResponse) string { return v.ValuePresentList }).(pulumi.StringOutput)
}

// The list to be used to filter by
func (o ValueListFilterResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ValueListFilterResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

// Description of data transformation during migration as part of the ConditionalColumnSetValue.
type ValueTransformation struct {
	// Optional. Applies a hash function on the data
	ApplyHash *ApplyHash `pulumi:"applyHash"`
	// Optional. Set to max_value - if integer or numeric, will use int.maxvalue, etc
	AssignMaxValue *Empty `pulumi:"assignMaxValue"`
	// Optional. Set to min_value - if integer or numeric, will use int.minvalue, etc
	AssignMinValue *Empty `pulumi:"assignMinValue"`
	// Optional. Set to null
	AssignNull *Empty `pulumi:"assignNull"`
	// Optional. Set to a specific value (value is converted to fit the target data type)
	AssignSpecificValue *AssignSpecificValue `pulumi:"assignSpecificValue"`
	// Optional. Filter on relation between source value and compare value of type double.
	DoubleComparison *DoubleComparisonFilter `pulumi:"doubleComparison"`
	// Optional. Filter on relation between source value and compare value of type integer.
	IntComparison *IntComparisonFilter `pulumi:"intComparison"`
	// Optional. Value is null
	IsNull *Empty `pulumi:"isNull"`
	// Optional. Allows the data to change scale
	RoundScale *RoundToScale `pulumi:"roundScale"`
	// Optional. Value is found in the specified list.
	ValueList *ValueListFilter `pulumi:"valueList"`
}

// ValueTransformationInput is an input type that accepts ValueTransformationArgs and ValueTransformationOutput values.
// You can construct a concrete instance of `ValueTransformationInput` via:
//
//	ValueTransformationArgs{...}
type ValueTransformationInput interface {
	pulumi.Input

	ToValueTransformationOutput() ValueTransformationOutput
	ToValueTransformationOutputWithContext(context.Context) ValueTransformationOutput
}

// Description of data transformation during migration as part of the ConditionalColumnSetValue.
type ValueTransformationArgs struct {
	// Optional. Applies a hash function on the data
	ApplyHash ApplyHashPtrInput `pulumi:"applyHash"`
	// Optional. Set to max_value - if integer or numeric, will use int.maxvalue, etc
	AssignMaxValue EmptyPtrInput `pulumi:"assignMaxValue"`
	// Optional. Set to min_value - if integer or numeric, will use int.minvalue, etc
	AssignMinValue EmptyPtrInput `pulumi:"assignMinValue"`
	// Optional. Set to null
	AssignNull EmptyPtrInput `pulumi:"assignNull"`
	// Optional. Set to a specific value (value is converted to fit the target data type)
	AssignSpecificValue AssignSpecificValuePtrInput `pulumi:"assignSpecificValue"`
	// Optional. Filter on relation between source value and compare value of type double.
	DoubleComparison DoubleComparisonFilterPtrInput `pulumi:"doubleComparison"`
	// Optional. Filter on relation between source value and compare value of type integer.
	IntComparison IntComparisonFilterPtrInput `pulumi:"intComparison"`
	// Optional. Value is null
	IsNull EmptyPtrInput `pulumi:"isNull"`
	// Optional. Allows the data to change scale
	RoundScale RoundToScalePtrInput `pulumi:"roundScale"`
	// Optional. Value is found in the specified list.
	ValueList ValueListFilterPtrInput `pulumi:"valueList"`
}

func (ValueTransformationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValueTransformation)(nil)).Elem()
}

func (i ValueTransformationArgs) ToValueTransformationOutput() ValueTransformationOutput {
	return i.ToValueTransformationOutputWithContext(context.Background())
}

func (i ValueTransformationArgs) ToValueTransformationOutputWithContext(ctx context.Context) ValueTransformationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValueTransformationOutput)
}

func (i ValueTransformationArgs) ToValueTransformationPtrOutput() ValueTransformationPtrOutput {
	return i.ToValueTransformationPtrOutputWithContext(context.Background())
}

func (i ValueTransformationArgs) ToValueTransformationPtrOutputWithContext(ctx context.Context) ValueTransformationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValueTransformationOutput).ToValueTransformationPtrOutputWithContext(ctx)
}

// ValueTransformationPtrInput is an input type that accepts ValueTransformationArgs, ValueTransformationPtr and ValueTransformationPtrOutput values.
// You can construct a concrete instance of `ValueTransformationPtrInput` via:
//
//	        ValueTransformationArgs{...}
//
//	or:
//
//	        nil
type ValueTransformationPtrInput interface {
	pulumi.Input

	ToValueTransformationPtrOutput() ValueTransformationPtrOutput
	ToValueTransformationPtrOutputWithContext(context.Context) ValueTransformationPtrOutput
}

type valueTransformationPtrType ValueTransformationArgs

func ValueTransformationPtr(v *ValueTransformationArgs) ValueTransformationPtrInput {
	return (*valueTransformationPtrType)(v)
}

func (*valueTransformationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ValueTransformation)(nil)).Elem()
}

func (i *valueTransformationPtrType) ToValueTransformationPtrOutput() ValueTransformationPtrOutput {
	return i.ToValueTransformationPtrOutputWithContext(context.Background())
}

func (i *valueTransformationPtrType) ToValueTransformationPtrOutputWithContext(ctx context.Context) ValueTransformationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValueTransformationPtrOutput)
}

// Description of data transformation during migration as part of the ConditionalColumnSetValue.
type ValueTransformationOutput struct{ *pulumi.OutputState }

func (ValueTransformationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValueTransformation)(nil)).Elem()
}

func (o ValueTransformationOutput) ToValueTransformationOutput() ValueTransformationOutput {
	return o
}

func (o ValueTransformationOutput) ToValueTransformationOutputWithContext(ctx context.Context) ValueTransformationOutput {
	return o
}

func (o ValueTransformationOutput) ToValueTransformationPtrOutput() ValueTransformationPtrOutput {
	return o.ToValueTransformationPtrOutputWithContext(context.Background())
}

func (o ValueTransformationOutput) ToValueTransformationPtrOutputWithContext(ctx context.Context) ValueTransformationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ValueTransformation) *ValueTransformation {
		return &v
	}).(ValueTransformationPtrOutput)
}

// Optional. Applies a hash function on the data
func (o ValueTransformationOutput) ApplyHash() ApplyHashPtrOutput {
	return o.ApplyT(func(v ValueTransformation) *ApplyHash { return v.ApplyHash }).(ApplyHashPtrOutput)
}

// Optional. Set to max_value - if integer or numeric, will use int.maxvalue, etc
func (o ValueTransformationOutput) AssignMaxValue() EmptyPtrOutput {
	return o.ApplyT(func(v ValueTransformation) *Empty { return v.AssignMaxValue }).(EmptyPtrOutput)
}

// Optional. Set to min_value - if integer or numeric, will use int.minvalue, etc
func (o ValueTransformationOutput) AssignMinValue() EmptyPtrOutput {
	return o.ApplyT(func(v ValueTransformation) *Empty { return v.AssignMinValue }).(EmptyPtrOutput)
}

// Optional. Set to null
func (o ValueTransformationOutput) AssignNull() EmptyPtrOutput {
	return o.ApplyT(func(v ValueTransformation) *Empty { return v.AssignNull }).(EmptyPtrOutput)
}

// Optional. Set to a specific value (value is converted to fit the target data type)
func (o ValueTransformationOutput) AssignSpecificValue() AssignSpecificValuePtrOutput {
	return o.ApplyT(func(v ValueTransformation) *AssignSpecificValue { return v.AssignSpecificValue }).(AssignSpecificValuePtrOutput)
}

// Optional. Filter on relation between source value and compare value of type double.
func (o ValueTransformationOutput) DoubleComparison() DoubleComparisonFilterPtrOutput {
	return o.ApplyT(func(v ValueTransformation) *DoubleComparisonFilter { return v.DoubleComparison }).(DoubleComparisonFilterPtrOutput)
}

// Optional. Filter on relation between source value and compare value of type integer.
func (o ValueTransformationOutput) IntComparison() IntComparisonFilterPtrOutput {
	return o.ApplyT(func(v ValueTransformation) *IntComparisonFilter { return v.IntComparison }).(IntComparisonFilterPtrOutput)
}

// Optional. Value is null
func (o ValueTransformationOutput) IsNull() EmptyPtrOutput {
	return o.ApplyT(func(v ValueTransformation) *Empty { return v.IsNull }).(EmptyPtrOutput)
}

// Optional. Allows the data to change scale
func (o ValueTransformationOutput) RoundScale() RoundToScalePtrOutput {
	return o.ApplyT(func(v ValueTransformation) *RoundToScale { return v.RoundScale }).(RoundToScalePtrOutput)
}

// Optional. Value is found in the specified list.
func (o ValueTransformationOutput) ValueList() ValueListFilterPtrOutput {
	return o.ApplyT(func(v ValueTransformation) *ValueListFilter { return v.ValueList }).(ValueListFilterPtrOutput)
}

type ValueTransformationPtrOutput struct{ *pulumi.OutputState }

func (ValueTransformationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ValueTransformation)(nil)).Elem()
}

func (o ValueTransformationPtrOutput) ToValueTransformationPtrOutput() ValueTransformationPtrOutput {
	return o
}

func (o ValueTransformationPtrOutput) ToValueTransformationPtrOutputWithContext(ctx context.Context) ValueTransformationPtrOutput {
	return o
}

func (o ValueTransformationPtrOutput) Elem() ValueTransformationOutput {
	return o.ApplyT(func(v *ValueTransformation) ValueTransformation {
		if v != nil {
			return *v
		}
		var ret ValueTransformation
		return ret
	}).(ValueTransformationOutput)
}

// Optional. Applies a hash function on the data
func (o ValueTransformationPtrOutput) ApplyHash() ApplyHashPtrOutput {
	return o.ApplyT(func(v *ValueTransformation) *ApplyHash {
		if v == nil {
			return nil
		}
		return v.ApplyHash
	}).(ApplyHashPtrOutput)
}

// Optional. Set to max_value - if integer or numeric, will use int.maxvalue, etc
func (o ValueTransformationPtrOutput) AssignMaxValue() EmptyPtrOutput {
	return o.ApplyT(func(v *ValueTransformation) *Empty {
		if v == nil {
			return nil
		}
		return v.AssignMaxValue
	}).(EmptyPtrOutput)
}

// Optional. Set to min_value - if integer or numeric, will use int.minvalue, etc
func (o ValueTransformationPtrOutput) AssignMinValue() EmptyPtrOutput {
	return o.ApplyT(func(v *ValueTransformation) *Empty {
		if v == nil {
			return nil
		}
		return v.AssignMinValue
	}).(EmptyPtrOutput)
}

// Optional. Set to null
func (o ValueTransformationPtrOutput) AssignNull() EmptyPtrOutput {
	return o.ApplyT(func(v *ValueTransformation) *Empty {
		if v == nil {
			return nil
		}
		return v.AssignNull
	}).(EmptyPtrOutput)
}

// Optional. Set to a specific value (value is converted to fit the target data type)
func (o ValueTransformationPtrOutput) AssignSpecificValue() AssignSpecificValuePtrOutput {
	return o.ApplyT(func(v *ValueTransformation) *AssignSpecificValue {
		if v == nil {
			return nil
		}
		return v.AssignSpecificValue
	}).(AssignSpecificValuePtrOutput)
}

// Optional. Filter on relation between source value and compare value of type double.
func (o ValueTransformationPtrOutput) DoubleComparison() DoubleComparisonFilterPtrOutput {
	return o.ApplyT(func(v *ValueTransformation) *DoubleComparisonFilter {
		if v == nil {
			return nil
		}
		return v.DoubleComparison
	}).(DoubleComparisonFilterPtrOutput)
}

// Optional. Filter on relation between source value and compare value of type integer.
func (o ValueTransformationPtrOutput) IntComparison() IntComparisonFilterPtrOutput {
	return o.ApplyT(func(v *ValueTransformation) *IntComparisonFilter {
		if v == nil {
			return nil
		}
		return v.IntComparison
	}).(IntComparisonFilterPtrOutput)
}

// Optional. Value is null
func (o ValueTransformationPtrOutput) IsNull() EmptyPtrOutput {
	return o.ApplyT(func(v *ValueTransformation) *Empty {
		if v == nil {
			return nil
		}
		return v.IsNull
	}).(EmptyPtrOutput)
}

// Optional. Allows the data to change scale
func (o ValueTransformationPtrOutput) RoundScale() RoundToScalePtrOutput {
	return o.ApplyT(func(v *ValueTransformation) *RoundToScale {
		if v == nil {
			return nil
		}
		return v.RoundScale
	}).(RoundToScalePtrOutput)
}

// Optional. Value is found in the specified list.
func (o ValueTransformationPtrOutput) ValueList() ValueListFilterPtrOutput {
	return o.ApplyT(func(v *ValueTransformation) *ValueListFilter {
		if v == nil {
			return nil
		}
		return v.ValueList
	}).(ValueListFilterPtrOutput)
}

// Description of data transformation during migration as part of the ConditionalColumnSetValue.
type ValueTransformationResponse struct {
	// Optional. Applies a hash function on the data
	ApplyHash ApplyHashResponse `pulumi:"applyHash"`
	// Optional. Set to max_value - if integer or numeric, will use int.maxvalue, etc
	AssignMaxValue EmptyResponse `pulumi:"assignMaxValue"`
	// Optional. Set to min_value - if integer or numeric, will use int.minvalue, etc
	AssignMinValue EmptyResponse `pulumi:"assignMinValue"`
	// Optional. Set to null
	AssignNull EmptyResponse `pulumi:"assignNull"`
	// Optional. Set to a specific value (value is converted to fit the target data type)
	AssignSpecificValue AssignSpecificValueResponse `pulumi:"assignSpecificValue"`
	// Optional. Filter on relation between source value and compare value of type double.
	DoubleComparison DoubleComparisonFilterResponse `pulumi:"doubleComparison"`
	// Optional. Filter on relation between source value and compare value of type integer.
	IntComparison IntComparisonFilterResponse `pulumi:"intComparison"`
	// Optional. Value is null
	IsNull EmptyResponse `pulumi:"isNull"`
	// Optional. Allows the data to change scale
	RoundScale RoundToScaleResponse `pulumi:"roundScale"`
	// Optional. Value is found in the specified list.
	ValueList ValueListFilterResponse `pulumi:"valueList"`
}

// Description of data transformation during migration as part of the ConditionalColumnSetValue.
type ValueTransformationResponseOutput struct{ *pulumi.OutputState }

func (ValueTransformationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValueTransformationResponse)(nil)).Elem()
}

func (o ValueTransformationResponseOutput) ToValueTransformationResponseOutput() ValueTransformationResponseOutput {
	return o
}

func (o ValueTransformationResponseOutput) ToValueTransformationResponseOutputWithContext(ctx context.Context) ValueTransformationResponseOutput {
	return o
}

// Optional. Applies a hash function on the data
func (o ValueTransformationResponseOutput) ApplyHash() ApplyHashResponseOutput {
	return o.ApplyT(func(v ValueTransformationResponse) ApplyHashResponse { return v.ApplyHash }).(ApplyHashResponseOutput)
}

// Optional. Set to max_value - if integer or numeric, will use int.maxvalue, etc
func (o ValueTransformationResponseOutput) AssignMaxValue() EmptyResponseOutput {
	return o.ApplyT(func(v ValueTransformationResponse) EmptyResponse { return v.AssignMaxValue }).(EmptyResponseOutput)
}

// Optional. Set to min_value - if integer or numeric, will use int.minvalue, etc
func (o ValueTransformationResponseOutput) AssignMinValue() EmptyResponseOutput {
	return o.ApplyT(func(v ValueTransformationResponse) EmptyResponse { return v.AssignMinValue }).(EmptyResponseOutput)
}

// Optional. Set to null
func (o ValueTransformationResponseOutput) AssignNull() EmptyResponseOutput {
	return o.ApplyT(func(v ValueTransformationResponse) EmptyResponse { return v.AssignNull }).(EmptyResponseOutput)
}

// Optional. Set to a specific value (value is converted to fit the target data type)
func (o ValueTransformationResponseOutput) AssignSpecificValue() AssignSpecificValueResponseOutput {
	return o.ApplyT(func(v ValueTransformationResponse) AssignSpecificValueResponse { return v.AssignSpecificValue }).(AssignSpecificValueResponseOutput)
}

// Optional. Filter on relation between source value and compare value of type double.
func (o ValueTransformationResponseOutput) DoubleComparison() DoubleComparisonFilterResponseOutput {
	return o.ApplyT(func(v ValueTransformationResponse) DoubleComparisonFilterResponse { return v.DoubleComparison }).(DoubleComparisonFilterResponseOutput)
}

// Optional. Filter on relation between source value and compare value of type integer.
func (o ValueTransformationResponseOutput) IntComparison() IntComparisonFilterResponseOutput {
	return o.ApplyT(func(v ValueTransformationResponse) IntComparisonFilterResponse { return v.IntComparison }).(IntComparisonFilterResponseOutput)
}

// Optional. Value is null
func (o ValueTransformationResponseOutput) IsNull() EmptyResponseOutput {
	return o.ApplyT(func(v ValueTransformationResponse) EmptyResponse { return v.IsNull }).(EmptyResponseOutput)
}

// Optional. Allows the data to change scale
func (o ValueTransformationResponseOutput) RoundScale() RoundToScaleResponseOutput {
	return o.ApplyT(func(v ValueTransformationResponse) RoundToScaleResponse { return v.RoundScale }).(RoundToScaleResponseOutput)
}

// Optional. Value is found in the specified list.
func (o ValueTransformationResponseOutput) ValueList() ValueListFilterResponseOutput {
	return o.ApplyT(func(v ValueTransformationResponse) ValueListFilterResponse { return v.ValueList }).(ValueListFilterResponseOutput)
}

// The VPC peering configuration is used to create VPC peering with the consumer's VPC.
type VpcPeeringConfig struct {
	// A free subnet for peering. (CIDR of /29)
	Subnet string `pulumi:"subnet"`
	// Fully qualified name of the VPC that Database Migration Service will peer to.
	VpcName string `pulumi:"vpcName"`
}

// VpcPeeringConfigInput is an input type that accepts VpcPeeringConfigArgs and VpcPeeringConfigOutput values.
// You can construct a concrete instance of `VpcPeeringConfigInput` via:
//
//	VpcPeeringConfigArgs{...}
type VpcPeeringConfigInput interface {
	pulumi.Input

	ToVpcPeeringConfigOutput() VpcPeeringConfigOutput
	ToVpcPeeringConfigOutputWithContext(context.Context) VpcPeeringConfigOutput
}

// The VPC peering configuration is used to create VPC peering with the consumer's VPC.
type VpcPeeringConfigArgs struct {
	// A free subnet for peering. (CIDR of /29)
	Subnet pulumi.StringInput `pulumi:"subnet"`
	// Fully qualified name of the VPC that Database Migration Service will peer to.
	VpcName pulumi.StringInput `pulumi:"vpcName"`
}

func (VpcPeeringConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcPeeringConfig)(nil)).Elem()
}

func (i VpcPeeringConfigArgs) ToVpcPeeringConfigOutput() VpcPeeringConfigOutput {
	return i.ToVpcPeeringConfigOutputWithContext(context.Background())
}

func (i VpcPeeringConfigArgs) ToVpcPeeringConfigOutputWithContext(ctx context.Context) VpcPeeringConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcPeeringConfigOutput)
}

func (i VpcPeeringConfigArgs) ToVpcPeeringConfigPtrOutput() VpcPeeringConfigPtrOutput {
	return i.ToVpcPeeringConfigPtrOutputWithContext(context.Background())
}

func (i VpcPeeringConfigArgs) ToVpcPeeringConfigPtrOutputWithContext(ctx context.Context) VpcPeeringConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcPeeringConfigOutput).ToVpcPeeringConfigPtrOutputWithContext(ctx)
}

// VpcPeeringConfigPtrInput is an input type that accepts VpcPeeringConfigArgs, VpcPeeringConfigPtr and VpcPeeringConfigPtrOutput values.
// You can construct a concrete instance of `VpcPeeringConfigPtrInput` via:
//
//	        VpcPeeringConfigArgs{...}
//
//	or:
//
//	        nil
type VpcPeeringConfigPtrInput interface {
	pulumi.Input

	ToVpcPeeringConfigPtrOutput() VpcPeeringConfigPtrOutput
	ToVpcPeeringConfigPtrOutputWithContext(context.Context) VpcPeeringConfigPtrOutput
}

type vpcPeeringConfigPtrType VpcPeeringConfigArgs

func VpcPeeringConfigPtr(v *VpcPeeringConfigArgs) VpcPeeringConfigPtrInput {
	return (*vpcPeeringConfigPtrType)(v)
}

func (*vpcPeeringConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcPeeringConfig)(nil)).Elem()
}

func (i *vpcPeeringConfigPtrType) ToVpcPeeringConfigPtrOutput() VpcPeeringConfigPtrOutput {
	return i.ToVpcPeeringConfigPtrOutputWithContext(context.Background())
}

func (i *vpcPeeringConfigPtrType) ToVpcPeeringConfigPtrOutputWithContext(ctx context.Context) VpcPeeringConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcPeeringConfigPtrOutput)
}

// The VPC peering configuration is used to create VPC peering with the consumer's VPC.
type VpcPeeringConfigOutput struct{ *pulumi.OutputState }

func (VpcPeeringConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcPeeringConfig)(nil)).Elem()
}

func (o VpcPeeringConfigOutput) ToVpcPeeringConfigOutput() VpcPeeringConfigOutput {
	return o
}

func (o VpcPeeringConfigOutput) ToVpcPeeringConfigOutputWithContext(ctx context.Context) VpcPeeringConfigOutput {
	return o
}

func (o VpcPeeringConfigOutput) ToVpcPeeringConfigPtrOutput() VpcPeeringConfigPtrOutput {
	return o.ToVpcPeeringConfigPtrOutputWithContext(context.Background())
}

func (o VpcPeeringConfigOutput) ToVpcPeeringConfigPtrOutputWithContext(ctx context.Context) VpcPeeringConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VpcPeeringConfig) *VpcPeeringConfig {
		return &v
	}).(VpcPeeringConfigPtrOutput)
}

// A free subnet for peering. (CIDR of /29)
func (o VpcPeeringConfigOutput) Subnet() pulumi.StringOutput {
	return o.ApplyT(func(v VpcPeeringConfig) string { return v.Subnet }).(pulumi.StringOutput)
}

// Fully qualified name of the VPC that Database Migration Service will peer to.
func (o VpcPeeringConfigOutput) VpcName() pulumi.StringOutput {
	return o.ApplyT(func(v VpcPeeringConfig) string { return v.VpcName }).(pulumi.StringOutput)
}

type VpcPeeringConfigPtrOutput struct{ *pulumi.OutputState }

func (VpcPeeringConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcPeeringConfig)(nil)).Elem()
}

func (o VpcPeeringConfigPtrOutput) ToVpcPeeringConfigPtrOutput() VpcPeeringConfigPtrOutput {
	return o
}

func (o VpcPeeringConfigPtrOutput) ToVpcPeeringConfigPtrOutputWithContext(ctx context.Context) VpcPeeringConfigPtrOutput {
	return o
}

func (o VpcPeeringConfigPtrOutput) Elem() VpcPeeringConfigOutput {
	return o.ApplyT(func(v *VpcPeeringConfig) VpcPeeringConfig {
		if v != nil {
			return *v
		}
		var ret VpcPeeringConfig
		return ret
	}).(VpcPeeringConfigOutput)
}

// A free subnet for peering. (CIDR of /29)
func (o VpcPeeringConfigPtrOutput) Subnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpcPeeringConfig) *string {
		if v == nil {
			return nil
		}
		return &v.Subnet
	}).(pulumi.StringPtrOutput)
}

// Fully qualified name of the VPC that Database Migration Service will peer to.
func (o VpcPeeringConfigPtrOutput) VpcName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpcPeeringConfig) *string {
		if v == nil {
			return nil
		}
		return &v.VpcName
	}).(pulumi.StringPtrOutput)
}

// The VPC peering configuration is used to create VPC peering with the consumer's VPC.
type VpcPeeringConfigResponse struct {
	// A free subnet for peering. (CIDR of /29)
	Subnet string `pulumi:"subnet"`
	// Fully qualified name of the VPC that Database Migration Service will peer to.
	VpcName string `pulumi:"vpcName"`
}

// The VPC peering configuration is used to create VPC peering with the consumer's VPC.
type VpcPeeringConfigResponseOutput struct{ *pulumi.OutputState }

func (VpcPeeringConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcPeeringConfigResponse)(nil)).Elem()
}

func (o VpcPeeringConfigResponseOutput) ToVpcPeeringConfigResponseOutput() VpcPeeringConfigResponseOutput {
	return o
}

func (o VpcPeeringConfigResponseOutput) ToVpcPeeringConfigResponseOutputWithContext(ctx context.Context) VpcPeeringConfigResponseOutput {
	return o
}

// A free subnet for peering. (CIDR of /29)
func (o VpcPeeringConfigResponseOutput) Subnet() pulumi.StringOutput {
	return o.ApplyT(func(v VpcPeeringConfigResponse) string { return v.Subnet }).(pulumi.StringOutput)
}

// Fully qualified name of the VPC that Database Migration Service will peer to.
func (o VpcPeeringConfigResponseOutput) VpcName() pulumi.StringOutput {
	return o.ApplyT(func(v VpcPeeringConfigResponse) string { return v.VpcName }).(pulumi.StringOutput)
}

// The details of the VPC where the source database is located in Google Cloud. We will use this information to set up the VPC peering connection between Cloud SQL and this VPC.
type VpcPeeringConnectivity struct {
	// The name of the VPC network to peer with the Cloud SQL private network.
	Vpc *string `pulumi:"vpc"`
}

// VpcPeeringConnectivityInput is an input type that accepts VpcPeeringConnectivityArgs and VpcPeeringConnectivityOutput values.
// You can construct a concrete instance of `VpcPeeringConnectivityInput` via:
//
//	VpcPeeringConnectivityArgs{...}
type VpcPeeringConnectivityInput interface {
	pulumi.Input

	ToVpcPeeringConnectivityOutput() VpcPeeringConnectivityOutput
	ToVpcPeeringConnectivityOutputWithContext(context.Context) VpcPeeringConnectivityOutput
}

// The details of the VPC where the source database is located in Google Cloud. We will use this information to set up the VPC peering connection between Cloud SQL and this VPC.
type VpcPeeringConnectivityArgs struct {
	// The name of the VPC network to peer with the Cloud SQL private network.
	Vpc pulumi.StringPtrInput `pulumi:"vpc"`
}

func (VpcPeeringConnectivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcPeeringConnectivity)(nil)).Elem()
}

func (i VpcPeeringConnectivityArgs) ToVpcPeeringConnectivityOutput() VpcPeeringConnectivityOutput {
	return i.ToVpcPeeringConnectivityOutputWithContext(context.Background())
}

func (i VpcPeeringConnectivityArgs) ToVpcPeeringConnectivityOutputWithContext(ctx context.Context) VpcPeeringConnectivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcPeeringConnectivityOutput)
}

func (i VpcPeeringConnectivityArgs) ToVpcPeeringConnectivityPtrOutput() VpcPeeringConnectivityPtrOutput {
	return i.ToVpcPeeringConnectivityPtrOutputWithContext(context.Background())
}

func (i VpcPeeringConnectivityArgs) ToVpcPeeringConnectivityPtrOutputWithContext(ctx context.Context) VpcPeeringConnectivityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcPeeringConnectivityOutput).ToVpcPeeringConnectivityPtrOutputWithContext(ctx)
}

// VpcPeeringConnectivityPtrInput is an input type that accepts VpcPeeringConnectivityArgs, VpcPeeringConnectivityPtr and VpcPeeringConnectivityPtrOutput values.
// You can construct a concrete instance of `VpcPeeringConnectivityPtrInput` via:
//
//	        VpcPeeringConnectivityArgs{...}
//
//	or:
//
//	        nil
type VpcPeeringConnectivityPtrInput interface {
	pulumi.Input

	ToVpcPeeringConnectivityPtrOutput() VpcPeeringConnectivityPtrOutput
	ToVpcPeeringConnectivityPtrOutputWithContext(context.Context) VpcPeeringConnectivityPtrOutput
}

type vpcPeeringConnectivityPtrType VpcPeeringConnectivityArgs

func VpcPeeringConnectivityPtr(v *VpcPeeringConnectivityArgs) VpcPeeringConnectivityPtrInput {
	return (*vpcPeeringConnectivityPtrType)(v)
}

func (*vpcPeeringConnectivityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcPeeringConnectivity)(nil)).Elem()
}

func (i *vpcPeeringConnectivityPtrType) ToVpcPeeringConnectivityPtrOutput() VpcPeeringConnectivityPtrOutput {
	return i.ToVpcPeeringConnectivityPtrOutputWithContext(context.Background())
}

func (i *vpcPeeringConnectivityPtrType) ToVpcPeeringConnectivityPtrOutputWithContext(ctx context.Context) VpcPeeringConnectivityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcPeeringConnectivityPtrOutput)
}

// The details of the VPC where the source database is located in Google Cloud. We will use this information to set up the VPC peering connection between Cloud SQL and this VPC.
type VpcPeeringConnectivityOutput struct{ *pulumi.OutputState }

func (VpcPeeringConnectivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcPeeringConnectivity)(nil)).Elem()
}

func (o VpcPeeringConnectivityOutput) ToVpcPeeringConnectivityOutput() VpcPeeringConnectivityOutput {
	return o
}

func (o VpcPeeringConnectivityOutput) ToVpcPeeringConnectivityOutputWithContext(ctx context.Context) VpcPeeringConnectivityOutput {
	return o
}

func (o VpcPeeringConnectivityOutput) ToVpcPeeringConnectivityPtrOutput() VpcPeeringConnectivityPtrOutput {
	return o.ToVpcPeeringConnectivityPtrOutputWithContext(context.Background())
}

func (o VpcPeeringConnectivityOutput) ToVpcPeeringConnectivityPtrOutputWithContext(ctx context.Context) VpcPeeringConnectivityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VpcPeeringConnectivity) *VpcPeeringConnectivity {
		return &v
	}).(VpcPeeringConnectivityPtrOutput)
}

// The name of the VPC network to peer with the Cloud SQL private network.
func (o VpcPeeringConnectivityOutput) Vpc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpcPeeringConnectivity) *string { return v.Vpc }).(pulumi.StringPtrOutput)
}

type VpcPeeringConnectivityPtrOutput struct{ *pulumi.OutputState }

func (VpcPeeringConnectivityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcPeeringConnectivity)(nil)).Elem()
}

func (o VpcPeeringConnectivityPtrOutput) ToVpcPeeringConnectivityPtrOutput() VpcPeeringConnectivityPtrOutput {
	return o
}

func (o VpcPeeringConnectivityPtrOutput) ToVpcPeeringConnectivityPtrOutputWithContext(ctx context.Context) VpcPeeringConnectivityPtrOutput {
	return o
}

func (o VpcPeeringConnectivityPtrOutput) Elem() VpcPeeringConnectivityOutput {
	return o.ApplyT(func(v *VpcPeeringConnectivity) VpcPeeringConnectivity {
		if v != nil {
			return *v
		}
		var ret VpcPeeringConnectivity
		return ret
	}).(VpcPeeringConnectivityOutput)
}

// The name of the VPC network to peer with the Cloud SQL private network.
func (o VpcPeeringConnectivityPtrOutput) Vpc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpcPeeringConnectivity) *string {
		if v == nil {
			return nil
		}
		return v.Vpc
	}).(pulumi.StringPtrOutput)
}

// The details of the VPC where the source database is located in Google Cloud. We will use this information to set up the VPC peering connection between Cloud SQL and this VPC.
type VpcPeeringConnectivityResponse struct {
	// The name of the VPC network to peer with the Cloud SQL private network.
	Vpc string `pulumi:"vpc"`
}

// The details of the VPC where the source database is located in Google Cloud. We will use this information to set up the VPC peering connection between Cloud SQL and this VPC.
type VpcPeeringConnectivityResponseOutput struct{ *pulumi.OutputState }

func (VpcPeeringConnectivityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcPeeringConnectivityResponse)(nil)).Elem()
}

func (o VpcPeeringConnectivityResponseOutput) ToVpcPeeringConnectivityResponseOutput() VpcPeeringConnectivityResponseOutput {
	return o
}

func (o VpcPeeringConnectivityResponseOutput) ToVpcPeeringConnectivityResponseOutputWithContext(ctx context.Context) VpcPeeringConnectivityResponseOutput {
	return o
}

// The name of the VPC network to peer with the Cloud SQL private network.
func (o VpcPeeringConnectivityResponseOutput) Vpc() pulumi.StringOutput {
	return o.ApplyT(func(v VpcPeeringConnectivityResponse) string { return v.Vpc }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AlloyDbConnectionProfileInput)(nil)).Elem(), AlloyDbConnectionProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlloyDbConnectionProfilePtrInput)(nil)).Elem(), AlloyDbConnectionProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlloyDbSettingsInput)(nil)).Elem(), AlloyDbSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlloyDbSettingsPtrInput)(nil)).Elem(), AlloyDbSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplyHashInput)(nil)).Elem(), ApplyHashArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplyHashPtrInput)(nil)).Elem(), ApplyHashArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssignSpecificValueInput)(nil)).Elem(), AssignSpecificValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssignSpecificValuePtrInput)(nil)).Elem(), AssignSpecificValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigInput)(nil)).Elem(), AuditConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigArrayInput)(nil)).Elem(), AuditConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigInput)(nil)).Elem(), AuditLogConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigArrayInput)(nil)).Elem(), AuditLogConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingInput)(nil)).Elem(), BindingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingArrayInput)(nil)).Elem(), BindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudSqlConnectionProfileInput)(nil)).Elem(), CloudSqlConnectionProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudSqlConnectionProfilePtrInput)(nil)).Elem(), CloudSqlConnectionProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudSqlSettingsInput)(nil)).Elem(), CloudSqlSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudSqlSettingsPtrInput)(nil)).Elem(), CloudSqlSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConditionalColumnSetValueInput)(nil)).Elem(), ConditionalColumnSetValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConditionalColumnSetValuePtrInput)(nil)).Elem(), ConditionalColumnSetValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConversionWorkspaceInfoInput)(nil)).Elem(), ConversionWorkspaceInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConversionWorkspaceInfoPtrInput)(nil)).Elem(), ConversionWorkspaceInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConvertRowIdToColumnInput)(nil)).Elem(), ConvertRowIdToColumnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConvertRowIdToColumnPtrInput)(nil)).Elem(), ConvertRowIdToColumnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCacheConfigInput)(nil)).Elem(), DataCacheConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCacheConfigPtrInput)(nil)).Elem(), DataCacheConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseEngineInfoInput)(nil)).Elem(), DatabaseEngineInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseTypeInput)(nil)).Elem(), DatabaseTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseTypePtrInput)(nil)).Elem(), DatabaseTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DoubleComparisonFilterInput)(nil)).Elem(), DoubleComparisonFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DoubleComparisonFilterPtrInput)(nil)).Elem(), DoubleComparisonFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DumpFlagInput)(nil)).Elem(), DumpFlagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DumpFlagArrayInput)(nil)).Elem(), DumpFlagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DumpFlagsInput)(nil)).Elem(), DumpFlagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DumpFlagsPtrInput)(nil)).Elem(), DumpFlagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EmptyInput)(nil)).Elem(), EmptyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EmptyPtrInput)(nil)).Elem(), EmptyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EncryptionConfigInput)(nil)).Elem(), EncryptionConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EncryptionConfigPtrInput)(nil)).Elem(), EncryptionConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntityMoveInput)(nil)).Elem(), EntityMoveArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntityMovePtrInput)(nil)).Elem(), EntityMoveArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprPtrInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FilterTableColumnsInput)(nil)).Elem(), FilterTableColumnsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FilterTableColumnsPtrInput)(nil)).Elem(), FilterTableColumnsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ForwardSshTunnelConnectivityInput)(nil)).Elem(), ForwardSshTunnelConnectivityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ForwardSshTunnelConnectivityPtrInput)(nil)).Elem(), ForwardSshTunnelConnectivityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntComparisonFilterInput)(nil)).Elem(), IntComparisonFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntComparisonFilterPtrInput)(nil)).Elem(), IntComparisonFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineConfigInput)(nil)).Elem(), MachineConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineConfigPtrInput)(nil)).Elem(), MachineConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MappingRuleFilterInput)(nil)).Elem(), MappingRuleFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MultiColumnDatatypeChangeInput)(nil)).Elem(), MultiColumnDatatypeChangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MultiColumnDatatypeChangePtrInput)(nil)).Elem(), MultiColumnDatatypeChangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MultiEntityRenameInput)(nil)).Elem(), MultiEntityRenameArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MultiEntityRenamePtrInput)(nil)).Elem(), MultiEntityRenameArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MySqlConnectionProfileInput)(nil)).Elem(), MySqlConnectionProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MySqlConnectionProfilePtrInput)(nil)).Elem(), MySqlConnectionProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OracleConnectionProfileInput)(nil)).Elem(), OracleConnectionProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OracleConnectionProfilePtrInput)(nil)).Elem(), OracleConnectionProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PerformanceConfigInput)(nil)).Elem(), PerformanceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PerformanceConfigPtrInput)(nil)).Elem(), PerformanceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgreSqlConnectionProfileInput)(nil)).Elem(), PostgreSqlConnectionProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgreSqlConnectionProfilePtrInput)(nil)).Elem(), PostgreSqlConnectionProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrimaryInstanceSettingsInput)(nil)).Elem(), PrimaryInstanceSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrimaryInstanceSettingsPtrInput)(nil)).Elem(), PrimaryInstanceSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateConnectivityInput)(nil)).Elem(), PrivateConnectivityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateConnectivityPtrInput)(nil)).Elem(), PrivateConnectivityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateServiceConnectConnectivityInput)(nil)).Elem(), PrivateServiceConnectConnectivityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateServiceConnectConnectivityPtrInput)(nil)).Elem(), PrivateServiceConnectConnectivityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReverseSshConnectivityInput)(nil)).Elem(), ReverseSshConnectivityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReverseSshConnectivityPtrInput)(nil)).Elem(), ReverseSshConnectivityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoundToScaleInput)(nil)).Elem(), RoundToScaleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoundToScalePtrInput)(nil)).Elem(), RoundToScaleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SetTablePrimaryKeyInput)(nil)).Elem(), SetTablePrimaryKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SetTablePrimaryKeyPtrInput)(nil)).Elem(), SetTablePrimaryKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SingleColumnChangeInput)(nil)).Elem(), SingleColumnChangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SingleColumnChangePtrInput)(nil)).Elem(), SingleColumnChangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SingleEntityRenameInput)(nil)).Elem(), SingleEntityRenameArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SingleEntityRenamePtrInput)(nil)).Elem(), SingleEntityRenameArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SinglePackageChangeInput)(nil)).Elem(), SinglePackageChangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SinglePackageChangePtrInput)(nil)).Elem(), SinglePackageChangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceNumericFilterInput)(nil)).Elem(), SourceNumericFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceNumericFilterPtrInput)(nil)).Elem(), SourceNumericFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceSqlChangeInput)(nil)).Elem(), SourceSqlChangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceSqlChangePtrInput)(nil)).Elem(), SourceSqlChangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceTextFilterInput)(nil)).Elem(), SourceTextFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceTextFilterPtrInput)(nil)).Elem(), SourceTextFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlAclEntryInput)(nil)).Elem(), SqlAclEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlAclEntryArrayInput)(nil)).Elem(), SqlAclEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlIpConfigInput)(nil)).Elem(), SqlIpConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlIpConfigPtrInput)(nil)).Elem(), SqlIpConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SslConfigInput)(nil)).Elem(), SslConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SslConfigPtrInput)(nil)).Elem(), SslConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StaticIpConnectivityInput)(nil)).Elem(), StaticIpConnectivityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StaticIpConnectivityPtrInput)(nil)).Elem(), StaticIpConnectivityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StaticServiceIpConnectivityInput)(nil)).Elem(), StaticServiceIpConnectivityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StaticServiceIpConnectivityPtrInput)(nil)).Elem(), StaticServiceIpConnectivityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserPasswordInput)(nil)).Elem(), UserPasswordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserPasswordPtrInput)(nil)).Elem(), UserPasswordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ValueListFilterInput)(nil)).Elem(), ValueListFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ValueListFilterPtrInput)(nil)).Elem(), ValueListFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ValueTransformationInput)(nil)).Elem(), ValueTransformationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ValueTransformationPtrInput)(nil)).Elem(), ValueTransformationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcPeeringConfigInput)(nil)).Elem(), VpcPeeringConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcPeeringConfigPtrInput)(nil)).Elem(), VpcPeeringConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcPeeringConnectivityInput)(nil)).Elem(), VpcPeeringConnectivityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcPeeringConnectivityPtrInput)(nil)).Elem(), VpcPeeringConnectivityArgs{})
	pulumi.RegisterOutputType(AlloyDbConnectionProfileOutput{})
	pulumi.RegisterOutputType(AlloyDbConnectionProfilePtrOutput{})
	pulumi.RegisterOutputType(AlloyDbConnectionProfileResponseOutput{})
	pulumi.RegisterOutputType(AlloyDbSettingsOutput{})
	pulumi.RegisterOutputType(AlloyDbSettingsPtrOutput{})
	pulumi.RegisterOutputType(AlloyDbSettingsResponseOutput{})
	pulumi.RegisterOutputType(ApplyHashOutput{})
	pulumi.RegisterOutputType(ApplyHashPtrOutput{})
	pulumi.RegisterOutputType(ApplyHashResponseOutput{})
	pulumi.RegisterOutputType(AssignSpecificValueOutput{})
	pulumi.RegisterOutputType(AssignSpecificValuePtrOutput{})
	pulumi.RegisterOutputType(AssignSpecificValueResponseOutput{})
	pulumi.RegisterOutputType(AuditConfigOutput{})
	pulumi.RegisterOutputType(AuditConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigOutput{})
	pulumi.RegisterOutputType(AuditLogConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(BindingResponseOutput{})
	pulumi.RegisterOutputType(BindingResponseArrayOutput{})
	pulumi.RegisterOutputType(CloudSqlConnectionProfileOutput{})
	pulumi.RegisterOutputType(CloudSqlConnectionProfilePtrOutput{})
	pulumi.RegisterOutputType(CloudSqlConnectionProfileResponseOutput{})
	pulumi.RegisterOutputType(CloudSqlSettingsOutput{})
	pulumi.RegisterOutputType(CloudSqlSettingsPtrOutput{})
	pulumi.RegisterOutputType(CloudSqlSettingsResponseOutput{})
	pulumi.RegisterOutputType(ConditionalColumnSetValueOutput{})
	pulumi.RegisterOutputType(ConditionalColumnSetValuePtrOutput{})
	pulumi.RegisterOutputType(ConditionalColumnSetValueResponseOutput{})
	pulumi.RegisterOutputType(ConversionWorkspaceInfoOutput{})
	pulumi.RegisterOutputType(ConversionWorkspaceInfoPtrOutput{})
	pulumi.RegisterOutputType(ConversionWorkspaceInfoResponseOutput{})
	pulumi.RegisterOutputType(ConvertRowIdToColumnOutput{})
	pulumi.RegisterOutputType(ConvertRowIdToColumnPtrOutput{})
	pulumi.RegisterOutputType(ConvertRowIdToColumnResponseOutput{})
	pulumi.RegisterOutputType(DataCacheConfigOutput{})
	pulumi.RegisterOutputType(DataCacheConfigPtrOutput{})
	pulumi.RegisterOutputType(DataCacheConfigResponseOutput{})
	pulumi.RegisterOutputType(DatabaseEngineInfoOutput{})
	pulumi.RegisterOutputType(DatabaseEngineInfoResponseOutput{})
	pulumi.RegisterOutputType(DatabaseTypeOutput{})
	pulumi.RegisterOutputType(DatabaseTypePtrOutput{})
	pulumi.RegisterOutputType(DatabaseTypeResponseOutput{})
	pulumi.RegisterOutputType(DoubleComparisonFilterOutput{})
	pulumi.RegisterOutputType(DoubleComparisonFilterPtrOutput{})
	pulumi.RegisterOutputType(DoubleComparisonFilterResponseOutput{})
	pulumi.RegisterOutputType(DumpFlagOutput{})
	pulumi.RegisterOutputType(DumpFlagArrayOutput{})
	pulumi.RegisterOutputType(DumpFlagResponseOutput{})
	pulumi.RegisterOutputType(DumpFlagResponseArrayOutput{})
	pulumi.RegisterOutputType(DumpFlagsOutput{})
	pulumi.RegisterOutputType(DumpFlagsPtrOutput{})
	pulumi.RegisterOutputType(DumpFlagsResponseOutput{})
	pulumi.RegisterOutputType(EmptyOutput{})
	pulumi.RegisterOutputType(EmptyPtrOutput{})
	pulumi.RegisterOutputType(EmptyResponseOutput{})
	pulumi.RegisterOutputType(EncryptionConfigOutput{})
	pulumi.RegisterOutputType(EncryptionConfigPtrOutput{})
	pulumi.RegisterOutputType(EncryptionConfigResponseOutput{})
	pulumi.RegisterOutputType(EntityMoveOutput{})
	pulumi.RegisterOutputType(EntityMovePtrOutput{})
	pulumi.RegisterOutputType(EntityMoveResponseOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(ExprResponseOutput{})
	pulumi.RegisterOutputType(FilterTableColumnsOutput{})
	pulumi.RegisterOutputType(FilterTableColumnsPtrOutput{})
	pulumi.RegisterOutputType(FilterTableColumnsResponseOutput{})
	pulumi.RegisterOutputType(ForwardSshTunnelConnectivityOutput{})
	pulumi.RegisterOutputType(ForwardSshTunnelConnectivityPtrOutput{})
	pulumi.RegisterOutputType(ForwardSshTunnelConnectivityResponseOutput{})
	pulumi.RegisterOutputType(IntComparisonFilterOutput{})
	pulumi.RegisterOutputType(IntComparisonFilterPtrOutput{})
	pulumi.RegisterOutputType(IntComparisonFilterResponseOutput{})
	pulumi.RegisterOutputType(MachineConfigOutput{})
	pulumi.RegisterOutputType(MachineConfigPtrOutput{})
	pulumi.RegisterOutputType(MachineConfigResponseOutput{})
	pulumi.RegisterOutputType(MappingRuleFilterOutput{})
	pulumi.RegisterOutputType(MappingRuleFilterResponseOutput{})
	pulumi.RegisterOutputType(MultiColumnDatatypeChangeOutput{})
	pulumi.RegisterOutputType(MultiColumnDatatypeChangePtrOutput{})
	pulumi.RegisterOutputType(MultiColumnDatatypeChangeResponseOutput{})
	pulumi.RegisterOutputType(MultiEntityRenameOutput{})
	pulumi.RegisterOutputType(MultiEntityRenamePtrOutput{})
	pulumi.RegisterOutputType(MultiEntityRenameResponseOutput{})
	pulumi.RegisterOutputType(MySqlConnectionProfileOutput{})
	pulumi.RegisterOutputType(MySqlConnectionProfilePtrOutput{})
	pulumi.RegisterOutputType(MySqlConnectionProfileResponseOutput{})
	pulumi.RegisterOutputType(OracleConnectionProfileOutput{})
	pulumi.RegisterOutputType(OracleConnectionProfilePtrOutput{})
	pulumi.RegisterOutputType(OracleConnectionProfileResponseOutput{})
	pulumi.RegisterOutputType(PerformanceConfigOutput{})
	pulumi.RegisterOutputType(PerformanceConfigPtrOutput{})
	pulumi.RegisterOutputType(PerformanceConfigResponseOutput{})
	pulumi.RegisterOutputType(PostgreSqlConnectionProfileOutput{})
	pulumi.RegisterOutputType(PostgreSqlConnectionProfilePtrOutput{})
	pulumi.RegisterOutputType(PostgreSqlConnectionProfileResponseOutput{})
	pulumi.RegisterOutputType(PrimaryInstanceSettingsOutput{})
	pulumi.RegisterOutputType(PrimaryInstanceSettingsPtrOutput{})
	pulumi.RegisterOutputType(PrimaryInstanceSettingsResponseOutput{})
	pulumi.RegisterOutputType(PrivateConnectivityOutput{})
	pulumi.RegisterOutputType(PrivateConnectivityPtrOutput{})
	pulumi.RegisterOutputType(PrivateConnectivityResponseOutput{})
	pulumi.RegisterOutputType(PrivateServiceConnectConnectivityOutput{})
	pulumi.RegisterOutputType(PrivateServiceConnectConnectivityPtrOutput{})
	pulumi.RegisterOutputType(PrivateServiceConnectConnectivityResponseOutput{})
	pulumi.RegisterOutputType(ReverseSshConnectivityOutput{})
	pulumi.RegisterOutputType(ReverseSshConnectivityPtrOutput{})
	pulumi.RegisterOutputType(ReverseSshConnectivityResponseOutput{})
	pulumi.RegisterOutputType(RoundToScaleOutput{})
	pulumi.RegisterOutputType(RoundToScalePtrOutput{})
	pulumi.RegisterOutputType(RoundToScaleResponseOutput{})
	pulumi.RegisterOutputType(SetTablePrimaryKeyOutput{})
	pulumi.RegisterOutputType(SetTablePrimaryKeyPtrOutput{})
	pulumi.RegisterOutputType(SetTablePrimaryKeyResponseOutput{})
	pulumi.RegisterOutputType(SingleColumnChangeOutput{})
	pulumi.RegisterOutputType(SingleColumnChangePtrOutput{})
	pulumi.RegisterOutputType(SingleColumnChangeResponseOutput{})
	pulumi.RegisterOutputType(SingleEntityRenameOutput{})
	pulumi.RegisterOutputType(SingleEntityRenamePtrOutput{})
	pulumi.RegisterOutputType(SingleEntityRenameResponseOutput{})
	pulumi.RegisterOutputType(SinglePackageChangeOutput{})
	pulumi.RegisterOutputType(SinglePackageChangePtrOutput{})
	pulumi.RegisterOutputType(SinglePackageChangeResponseOutput{})
	pulumi.RegisterOutputType(SourceNumericFilterOutput{})
	pulumi.RegisterOutputType(SourceNumericFilterPtrOutput{})
	pulumi.RegisterOutputType(SourceNumericFilterResponseOutput{})
	pulumi.RegisterOutputType(SourceSqlChangeOutput{})
	pulumi.RegisterOutputType(SourceSqlChangePtrOutput{})
	pulumi.RegisterOutputType(SourceSqlChangeResponseOutput{})
	pulumi.RegisterOutputType(SourceTextFilterOutput{})
	pulumi.RegisterOutputType(SourceTextFilterPtrOutput{})
	pulumi.RegisterOutputType(SourceTextFilterResponseOutput{})
	pulumi.RegisterOutputType(SqlAclEntryOutput{})
	pulumi.RegisterOutputType(SqlAclEntryArrayOutput{})
	pulumi.RegisterOutputType(SqlAclEntryResponseOutput{})
	pulumi.RegisterOutputType(SqlAclEntryResponseArrayOutput{})
	pulumi.RegisterOutputType(SqlIpConfigOutput{})
	pulumi.RegisterOutputType(SqlIpConfigPtrOutput{})
	pulumi.RegisterOutputType(SqlIpConfigResponseOutput{})
	pulumi.RegisterOutputType(SslConfigOutput{})
	pulumi.RegisterOutputType(SslConfigPtrOutput{})
	pulumi.RegisterOutputType(SslConfigResponseOutput{})
	pulumi.RegisterOutputType(StaticIpConnectivityOutput{})
	pulumi.RegisterOutputType(StaticIpConnectivityPtrOutput{})
	pulumi.RegisterOutputType(StaticIpConnectivityResponseOutput{})
	pulumi.RegisterOutputType(StaticServiceIpConnectivityOutput{})
	pulumi.RegisterOutputType(StaticServiceIpConnectivityPtrOutput{})
	pulumi.RegisterOutputType(StaticServiceIpConnectivityResponseOutput{})
	pulumi.RegisterOutputType(StatusResponseOutput{})
	pulumi.RegisterOutputType(UserPasswordOutput{})
	pulumi.RegisterOutputType(UserPasswordPtrOutput{})
	pulumi.RegisterOutputType(UserPasswordResponseOutput{})
	pulumi.RegisterOutputType(ValueListFilterOutput{})
	pulumi.RegisterOutputType(ValueListFilterPtrOutput{})
	pulumi.RegisterOutputType(ValueListFilterResponseOutput{})
	pulumi.RegisterOutputType(ValueTransformationOutput{})
	pulumi.RegisterOutputType(ValueTransformationPtrOutput{})
	pulumi.RegisterOutputType(ValueTransformationResponseOutput{})
	pulumi.RegisterOutputType(VpcPeeringConfigOutput{})
	pulumi.RegisterOutputType(VpcPeeringConfigPtrOutput{})
	pulumi.RegisterOutputType(VpcPeeringConfigResponseOutput{})
	pulumi.RegisterOutputType(VpcPeeringConnectivityOutput{})
	pulumi.RegisterOutputType(VpcPeeringConnectivityPtrOutput{})
	pulumi.RegisterOutputType(VpcPeeringConnectivityResponseOutput{})
}
