// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new conversion workspace in a given project and location.
type ConversionWorkspace struct {
	pulumi.CustomResourceState

	// Required. The ID of the conversion workspace to create.
	ConversionWorkspaceId pulumi.StringOutput `pulumi:"conversionWorkspaceId"`
	// The timestamp when the workspace resource was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The destination engine details.
	Destination DatabaseEngineInfoResponseOutput `pulumi:"destination"`
	// The display name for the workspace
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// A generic list of settings for the workspace. The settings are database pair dependant and can indicate default behavior for the mapping rules engine or turn on or off specific features. Such examples can be: convert_foreign_key_to_interleave=true, skip_triggers=false, ignore_non_table_synonyms=true
	GlobalSettings pulumi.StringMapOutput `pulumi:"globalSettings"`
	// Whether the workspace has uncommitted changes (changes which were made after the workspace was committed)
	HasUncommittedChanges pulumi.BoolOutput `pulumi:"hasUncommittedChanges"`
	// The latest commit id
	LatestCommitId pulumi.StringOutput `pulumi:"latestCommitId"`
	// The timestamp when the workspace was committed.
	LatestCommitTime pulumi.StringOutput `pulumi:"latestCommitTime"`
	Location         pulumi.StringOutput `pulumi:"location"`
	// Full name of the workspace resource, in the form of: projects/{project}/locations/{location}/conversionWorkspaces/{conversion_workspace}.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// A unique id used to identify the request. If the server receives two requests with the same id, then the second request will be ignored. It is recommended to always set this value to a UUID. The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.
	RequestId pulumi.StringPtrOutput `pulumi:"requestId"`
	// The source engine details.
	Source DatabaseEngineInfoResponseOutput `pulumi:"source"`
	// The timestamp when the workspace resource was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewConversionWorkspace registers a new resource with the given unique name, arguments, and options.
func NewConversionWorkspace(ctx *pulumi.Context,
	name string, args *ConversionWorkspaceArgs, opts ...pulumi.ResourceOption) (*ConversionWorkspace, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConversionWorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'ConversionWorkspaceId'")
	}
	if args.Destination == nil {
		return nil, errors.New("invalid value for required argument 'Destination'")
	}
	if args.Source == nil {
		return nil, errors.New("invalid value for required argument 'Source'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"conversionWorkspaceId",
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	var resource ConversionWorkspace
	err := ctx.RegisterResource("google-native:datamigration/v1:ConversionWorkspace", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConversionWorkspace gets an existing ConversionWorkspace resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConversionWorkspace(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConversionWorkspaceState, opts ...pulumi.ResourceOption) (*ConversionWorkspace, error) {
	var resource ConversionWorkspace
	err := ctx.ReadResource("google-native:datamigration/v1:ConversionWorkspace", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConversionWorkspace resources.
type conversionWorkspaceState struct {
}

type ConversionWorkspaceState struct {
}

func (ConversionWorkspaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*conversionWorkspaceState)(nil)).Elem()
}

type conversionWorkspaceArgs struct {
	// Required. The ID of the conversion workspace to create.
	ConversionWorkspaceId string `pulumi:"conversionWorkspaceId"`
	// The destination engine details.
	Destination DatabaseEngineInfo `pulumi:"destination"`
	// The display name for the workspace
	DisplayName *string `pulumi:"displayName"`
	// A generic list of settings for the workspace. The settings are database pair dependant and can indicate default behavior for the mapping rules engine or turn on or off specific features. Such examples can be: convert_foreign_key_to_interleave=true, skip_triggers=false, ignore_non_table_synonyms=true
	GlobalSettings map[string]string `pulumi:"globalSettings"`
	Location       *string           `pulumi:"location"`
	// Full name of the workspace resource, in the form of: projects/{project}/locations/{location}/conversionWorkspaces/{conversion_workspace}.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// A unique id used to identify the request. If the server receives two requests with the same id, then the second request will be ignored. It is recommended to always set this value to a UUID. The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.
	RequestId *string `pulumi:"requestId"`
	// The source engine details.
	Source DatabaseEngineInfo `pulumi:"source"`
}

// The set of arguments for constructing a ConversionWorkspace resource.
type ConversionWorkspaceArgs struct {
	// Required. The ID of the conversion workspace to create.
	ConversionWorkspaceId pulumi.StringInput
	// The destination engine details.
	Destination DatabaseEngineInfoInput
	// The display name for the workspace
	DisplayName pulumi.StringPtrInput
	// A generic list of settings for the workspace. The settings are database pair dependant and can indicate default behavior for the mapping rules engine or turn on or off specific features. Such examples can be: convert_foreign_key_to_interleave=true, skip_triggers=false, ignore_non_table_synonyms=true
	GlobalSettings pulumi.StringMapInput
	Location       pulumi.StringPtrInput
	// Full name of the workspace resource, in the form of: projects/{project}/locations/{location}/conversionWorkspaces/{conversion_workspace}.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// A unique id used to identify the request. If the server receives two requests with the same id, then the second request will be ignored. It is recommended to always set this value to a UUID. The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.
	RequestId pulumi.StringPtrInput
	// The source engine details.
	Source DatabaseEngineInfoInput
}

func (ConversionWorkspaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*conversionWorkspaceArgs)(nil)).Elem()
}

type ConversionWorkspaceInput interface {
	pulumi.Input

	ToConversionWorkspaceOutput() ConversionWorkspaceOutput
	ToConversionWorkspaceOutputWithContext(ctx context.Context) ConversionWorkspaceOutput
}

func (*ConversionWorkspace) ElementType() reflect.Type {
	return reflect.TypeOf((**ConversionWorkspace)(nil)).Elem()
}

func (i *ConversionWorkspace) ToConversionWorkspaceOutput() ConversionWorkspaceOutput {
	return i.ToConversionWorkspaceOutputWithContext(context.Background())
}

func (i *ConversionWorkspace) ToConversionWorkspaceOutputWithContext(ctx context.Context) ConversionWorkspaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConversionWorkspaceOutput)
}

type ConversionWorkspaceOutput struct{ *pulumi.OutputState }

func (ConversionWorkspaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConversionWorkspace)(nil)).Elem()
}

func (o ConversionWorkspaceOutput) ToConversionWorkspaceOutput() ConversionWorkspaceOutput {
	return o
}

func (o ConversionWorkspaceOutput) ToConversionWorkspaceOutputWithContext(ctx context.Context) ConversionWorkspaceOutput {
	return o
}

// Required. The ID of the conversion workspace to create.
func (o ConversionWorkspaceOutput) ConversionWorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ConversionWorkspace) pulumi.StringOutput { return v.ConversionWorkspaceId }).(pulumi.StringOutput)
}

// The timestamp when the workspace resource was created.
func (o ConversionWorkspaceOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ConversionWorkspace) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The destination engine details.
func (o ConversionWorkspaceOutput) Destination() DatabaseEngineInfoResponseOutput {
	return o.ApplyT(func(v *ConversionWorkspace) DatabaseEngineInfoResponseOutput { return v.Destination }).(DatabaseEngineInfoResponseOutput)
}

// The display name for the workspace
func (o ConversionWorkspaceOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *ConversionWorkspace) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// A generic list of settings for the workspace. The settings are database pair dependant and can indicate default behavior for the mapping rules engine or turn on or off specific features. Such examples can be: convert_foreign_key_to_interleave=true, skip_triggers=false, ignore_non_table_synonyms=true
func (o ConversionWorkspaceOutput) GlobalSettings() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ConversionWorkspace) pulumi.StringMapOutput { return v.GlobalSettings }).(pulumi.StringMapOutput)
}

// Whether the workspace has uncommitted changes (changes which were made after the workspace was committed)
func (o ConversionWorkspaceOutput) HasUncommittedChanges() pulumi.BoolOutput {
	return o.ApplyT(func(v *ConversionWorkspace) pulumi.BoolOutput { return v.HasUncommittedChanges }).(pulumi.BoolOutput)
}

// The latest commit id
func (o ConversionWorkspaceOutput) LatestCommitId() pulumi.StringOutput {
	return o.ApplyT(func(v *ConversionWorkspace) pulumi.StringOutput { return v.LatestCommitId }).(pulumi.StringOutput)
}

// The timestamp when the workspace was committed.
func (o ConversionWorkspaceOutput) LatestCommitTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ConversionWorkspace) pulumi.StringOutput { return v.LatestCommitTime }).(pulumi.StringOutput)
}

func (o ConversionWorkspaceOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ConversionWorkspace) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Full name of the workspace resource, in the form of: projects/{project}/locations/{location}/conversionWorkspaces/{conversion_workspace}.
func (o ConversionWorkspaceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ConversionWorkspace) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ConversionWorkspaceOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ConversionWorkspace) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// A unique id used to identify the request. If the server receives two requests with the same id, then the second request will be ignored. It is recommended to always set this value to a UUID. The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.
func (o ConversionWorkspaceOutput) RequestId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConversionWorkspace) pulumi.StringPtrOutput { return v.RequestId }).(pulumi.StringPtrOutput)
}

// The source engine details.
func (o ConversionWorkspaceOutput) Source() DatabaseEngineInfoResponseOutput {
	return o.ApplyT(func(v *ConversionWorkspace) DatabaseEngineInfoResponseOutput { return v.Source }).(DatabaseEngineInfoResponseOutput)
}

// The timestamp when the workspace resource was last updated.
func (o ConversionWorkspaceOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ConversionWorkspace) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConversionWorkspaceInput)(nil)).Elem(), &ConversionWorkspace{})
	pulumi.RegisterOutputType(ConversionWorkspaceOutput{})
}
