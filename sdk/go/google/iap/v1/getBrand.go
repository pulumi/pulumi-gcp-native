// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieves the OAuth brand of the project.
func LookupBrand(ctx *pulumi.Context, args *LookupBrandArgs, opts ...pulumi.InvokeOption) (*LookupBrandResult, error) {
	var rv LookupBrandResult
	err := ctx.Invoke("google-native:iap/v1:getBrand", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupBrandArgs struct {
	BrandId string  `pulumi:"brandId"`
	Project *string `pulumi:"project"`
}

type LookupBrandResult struct {
	// Application name displayed on OAuth consent screen.
	ApplicationTitle string `pulumi:"applicationTitle"`
	// Identifier of the brand. NOTE: GCP project number achieves the same brand identification purpose as only one brand per project can be created.
	Name string `pulumi:"name"`
	// Whether the brand is only intended for usage inside the G Suite organization only.
	OrgInternalOnly bool `pulumi:"orgInternalOnly"`
	// Support email displayed on the OAuth consent screen.
	SupportEmail string `pulumi:"supportEmail"`
}

func LookupBrandOutput(ctx *pulumi.Context, args LookupBrandOutputArgs, opts ...pulumi.InvokeOption) LookupBrandResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupBrandResult, error) {
			args := v.(LookupBrandArgs)
			r, err := LookupBrand(ctx, &args, opts...)
			return *r, err
		}).(LookupBrandResultOutput)
}

type LookupBrandOutputArgs struct {
	BrandId pulumi.StringInput    `pulumi:"brandId"`
	Project pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupBrandOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBrandArgs)(nil)).Elem()
}

type LookupBrandResultOutput struct{ *pulumi.OutputState }

func (LookupBrandResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBrandResult)(nil)).Elem()
}

func (o LookupBrandResultOutput) ToLookupBrandResultOutput() LookupBrandResultOutput {
	return o
}

func (o LookupBrandResultOutput) ToLookupBrandResultOutputWithContext(ctx context.Context) LookupBrandResultOutput {
	return o
}

// Application name displayed on OAuth consent screen.
func (o LookupBrandResultOutput) ApplicationTitle() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBrandResult) string { return v.ApplicationTitle }).(pulumi.StringOutput)
}

// Identifier of the brand. NOTE: GCP project number achieves the same brand identification purpose as only one brand per project can be created.
func (o LookupBrandResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBrandResult) string { return v.Name }).(pulumi.StringOutput)
}

// Whether the brand is only intended for usage inside the G Suite organization only.
func (o LookupBrandResultOutput) OrgInternalOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupBrandResult) bool { return v.OrgInternalOnly }).(pulumi.BoolOutput)
}

// Support email displayed on the OAuth consent screen.
func (o LookupBrandResultOutput) SupportEmail() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBrandResult) string { return v.SupportEmail }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupBrandResultOutput{})
}
