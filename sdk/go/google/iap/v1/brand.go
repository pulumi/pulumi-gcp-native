// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Constructs a new OAuth brand for the project if one does not exist. The created brand is "internal only", meaning that OAuth clients created under it only accept requests from users who belong to the same Google Workspace organization as the project. The brand is created in an un-reviewed status. NOTE: The "internal only" status can be manually changed in the Google Cloud Console. Requires that a brand does not already exist for the project, and that the specified support email is owned by the caller.
// Auto-naming is currently not supported for this resource.
// Note - this resource's API doesn't support deletion. When deleted, the resource will persist
// on Google Cloud even though it will be deleted from Pulumi state.
type Brand struct {
	pulumi.CustomResourceState

	// Application name displayed on OAuth consent screen.
	ApplicationTitle pulumi.StringOutput `pulumi:"applicationTitle"`
	// Identifier of the brand. NOTE: GCP project number achieves the same brand identification purpose as only one brand per project can be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Whether the brand is only intended for usage inside the G Suite organization only.
	OrgInternalOnly pulumi.BoolOutput `pulumi:"orgInternalOnly"`
	// Support email displayed on the OAuth consent screen.
	SupportEmail pulumi.StringOutput `pulumi:"supportEmail"`
}

// NewBrand registers a new resource with the given unique name, arguments, and options.
func NewBrand(ctx *pulumi.Context,
	name string, args *BrandArgs, opts ...pulumi.ResourceOption) (*Brand, error) {
	if args == nil {
		args = &BrandArgs{}
	}

	var resource Brand
	err := ctx.RegisterResource("google-native:iap/v1:Brand", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBrand gets an existing Brand resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBrand(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BrandState, opts ...pulumi.ResourceOption) (*Brand, error) {
	var resource Brand
	err := ctx.ReadResource("google-native:iap/v1:Brand", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Brand resources.
type brandState struct {
}

type BrandState struct {
}

func (BrandState) ElementType() reflect.Type {
	return reflect.TypeOf((*brandState)(nil)).Elem()
}

type brandArgs struct {
	// Application name displayed on OAuth consent screen.
	ApplicationTitle *string `pulumi:"applicationTitle"`
	Project          *string `pulumi:"project"`
	// Support email displayed on the OAuth consent screen.
	SupportEmail *string `pulumi:"supportEmail"`
}

// The set of arguments for constructing a Brand resource.
type BrandArgs struct {
	// Application name displayed on OAuth consent screen.
	ApplicationTitle pulumi.StringPtrInput
	Project          pulumi.StringPtrInput
	// Support email displayed on the OAuth consent screen.
	SupportEmail pulumi.StringPtrInput
}

func (BrandArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*brandArgs)(nil)).Elem()
}

type BrandInput interface {
	pulumi.Input

	ToBrandOutput() BrandOutput
	ToBrandOutputWithContext(ctx context.Context) BrandOutput
}

func (*Brand) ElementType() reflect.Type {
	return reflect.TypeOf((**Brand)(nil)).Elem()
}

func (i *Brand) ToBrandOutput() BrandOutput {
	return i.ToBrandOutputWithContext(context.Background())
}

func (i *Brand) ToBrandOutputWithContext(ctx context.Context) BrandOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrandOutput)
}

type BrandOutput struct{ *pulumi.OutputState }

func (BrandOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Brand)(nil)).Elem()
}

func (o BrandOutput) ToBrandOutput() BrandOutput {
	return o
}

func (o BrandOutput) ToBrandOutputWithContext(ctx context.Context) BrandOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BrandInput)(nil)).Elem(), &Brand{})
	pulumi.RegisterOutputType(BrandOutput{})
}
