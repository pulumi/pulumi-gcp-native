// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfig struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfig `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service *string `pulumi:"service"`
}

// AuditConfigInput is an input type that accepts AuditConfigArgs and AuditConfigOutput values.
// You can construct a concrete instance of `AuditConfigInput` via:
//
//          AuditConfigArgs{...}
type AuditConfigInput interface {
	pulumi.Input

	ToAuditConfigOutput() AuditConfigOutput
	ToAuditConfigOutputWithContext(context.Context) AuditConfigOutput
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigArgs struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs AuditLogConfigArrayInput `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (AuditConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (i AuditConfigArgs) ToAuditConfigOutput() AuditConfigOutput {
	return i.ToAuditConfigOutputWithContext(context.Background())
}

func (i AuditConfigArgs) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigOutput)
}

// AuditConfigArrayInput is an input type that accepts AuditConfigArray and AuditConfigArrayOutput values.
// You can construct a concrete instance of `AuditConfigArrayInput` via:
//
//          AuditConfigArray{ AuditConfigArgs{...} }
type AuditConfigArrayInput interface {
	pulumi.Input

	ToAuditConfigArrayOutput() AuditConfigArrayOutput
	ToAuditConfigArrayOutputWithContext(context.Context) AuditConfigArrayOutput
}

type AuditConfigArray []AuditConfigInput

func (AuditConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (i AuditConfigArray) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return i.ToAuditConfigArrayOutputWithContext(context.Background())
}

func (i AuditConfigArray) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigArrayOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigOutput struct{ *pulumi.OutputState }

func (AuditConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (o AuditConfigOutput) ToAuditConfigOutput() AuditConfigOutput {
	return o
}

func (o AuditConfigOutput) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigOutput) AuditLogConfigs() AuditLogConfigArrayOutput {
	return o.ApplyT(func(v AuditConfig) []AuditLogConfig { return v.AuditLogConfigs }).(AuditLogConfigArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuditConfig) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type AuditConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) Index(i pulumi.IntInput) AuditConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfig {
		return vs[0].([]AuditConfig)[vs[1].(int)]
	}).(AuditConfigOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigResponse struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfigResponse `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service string `pulumi:"service"`
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutput() AuditConfigResponseOutput {
	return o
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutputWithContext(ctx context.Context) AuditConfigResponseOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigResponseOutput) AuditLogConfigs() AuditLogConfigResponseArrayOutput {
	return o.ApplyT(func(v AuditConfigResponse) []AuditLogConfigResponse { return v.AuditLogConfigs }).(AuditLogConfigResponseArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v AuditConfigResponse) string { return v.Service }).(pulumi.StringOutput)
}

type AuditConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutput() AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutputWithContext(ctx context.Context) AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfigResponse {
		return vs[0].([]AuditConfigResponse)[vs[1].(int)]
	}).(AuditConfigResponseOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfig struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType *AuditLogConfigLogType `pulumi:"logType"`
}

// AuditLogConfigInput is an input type that accepts AuditLogConfigArgs and AuditLogConfigOutput values.
// You can construct a concrete instance of `AuditLogConfigInput` via:
//
//          AuditLogConfigArgs{...}
type AuditLogConfigInput interface {
	pulumi.Input

	ToAuditLogConfigOutput() AuditLogConfigOutput
	ToAuditLogConfigOutputWithContext(context.Context) AuditLogConfigOutput
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigArgs struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers pulumi.StringArrayInput `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType AuditLogConfigLogTypePtrInput `pulumi:"logType"`
}

func (AuditLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return i.ToAuditLogConfigOutputWithContext(context.Background())
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigOutput)
}

// AuditLogConfigArrayInput is an input type that accepts AuditLogConfigArray and AuditLogConfigArrayOutput values.
// You can construct a concrete instance of `AuditLogConfigArrayInput` via:
//
//          AuditLogConfigArray{ AuditLogConfigArgs{...} }
type AuditLogConfigArrayInput interface {
	pulumi.Input

	ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput
	ToAuditLogConfigArrayOutputWithContext(context.Context) AuditLogConfigArrayOutput
}

type AuditLogConfigArray []AuditLogConfigInput

func (AuditLogConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return i.ToAuditLogConfigArrayOutputWithContext(context.Background())
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigArrayOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigOutput struct{ *pulumi.OutputState }

func (AuditLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return o
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfig) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigOutput) LogType() AuditLogConfigLogTypePtrOutput {
	return o.ApplyT(func(v AuditLogConfig) *AuditLogConfigLogType { return v.LogType }).(AuditLogConfigLogTypePtrOutput)
}

type AuditLogConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) Index(i pulumi.IntInput) AuditLogConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfig {
		return vs[0].([]AuditLogConfig)[vs[1].(int)]
	}).(AuditLogConfigOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponse struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType string `pulumi:"logType"`
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutput() AuditLogConfigResponseOutput {
	return o
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutputWithContext(ctx context.Context) AuditLogConfigResponseOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigResponseOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigResponseOutput) LogType() pulumi.StringOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) string { return v.LogType }).(pulumi.StringOutput)
}

type AuditLogConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutput() AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutputWithContext(ctx context.Context) AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditLogConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfigResponse {
		return vs[0].([]AuditLogConfigResponse)[vs[1].(int)]
	}).(AuditLogConfigResponseOutput)
}

// Associates `members`, or principals, with a `role`.
type Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//          BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates `members`, or principals, with a `role`.
type BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//          BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingResponse struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprResponse `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role string `pulumi:"role"`
}

// Associates `members`, or principals, with a `role`.
type BindingResponseOutput struct{ *pulumi.OutputState }

func (BindingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingResponse)(nil)).Elem()
}

func (o BindingResponseOutput) ToBindingResponseOutput() BindingResponseOutput {
	return o
}

func (o BindingResponseOutput) ToBindingResponseOutputWithContext(ctx context.Context) BindingResponseOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingResponseOutput) Condition() ExprResponseOutput {
	return o.ApplyT(func(v BindingResponse) ExprResponse { return v.Condition }).(ExprResponseOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
func (o BindingResponseOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BindingResponse) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingResponseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v BindingResponse) string { return v.Role }).(pulumi.StringOutput)
}

type BindingResponseArrayOutput struct{ *pulumi.OutputState }

func (BindingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingResponse)(nil)).Elem()
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutput() BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutputWithContext(ctx context.Context) BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) Index(i pulumi.IntInput) BindingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BindingResponse {
		return vs[0].([]BindingResponse)[vs[1].(int)]
	}).(BindingResponseOutput)
}

// Details required for a contact associated with a `Registration`.
type Contact struct {
	// Email address of the contact.
	Email string `pulumi:"email"`
	// Fax number of the contact in international format. For example, `"+1-800-555-0123"`.
	FaxNumber *string `pulumi:"faxNumber"`
	// Phone number of the contact in international format. For example, `"+1-800-555-0123"`.
	PhoneNumber string `pulumi:"phoneNumber"`
	// Postal address of the contact.
	PostalAddress PostalAddress `pulumi:"postalAddress"`
}

// ContactInput is an input type that accepts ContactArgs and ContactOutput values.
// You can construct a concrete instance of `ContactInput` via:
//
//          ContactArgs{...}
type ContactInput interface {
	pulumi.Input

	ToContactOutput() ContactOutput
	ToContactOutputWithContext(context.Context) ContactOutput
}

// Details required for a contact associated with a `Registration`.
type ContactArgs struct {
	// Email address of the contact.
	Email pulumi.StringInput `pulumi:"email"`
	// Fax number of the contact in international format. For example, `"+1-800-555-0123"`.
	FaxNumber pulumi.StringPtrInput `pulumi:"faxNumber"`
	// Phone number of the contact in international format. For example, `"+1-800-555-0123"`.
	PhoneNumber pulumi.StringInput `pulumi:"phoneNumber"`
	// Postal address of the contact.
	PostalAddress PostalAddressInput `pulumi:"postalAddress"`
}

func (ContactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Contact)(nil)).Elem()
}

func (i ContactArgs) ToContactOutput() ContactOutput {
	return i.ToContactOutputWithContext(context.Background())
}

func (i ContactArgs) ToContactOutputWithContext(ctx context.Context) ContactOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactOutput)
}

// Details required for a contact associated with a `Registration`.
type ContactOutput struct{ *pulumi.OutputState }

func (ContactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Contact)(nil)).Elem()
}

func (o ContactOutput) ToContactOutput() ContactOutput {
	return o
}

func (o ContactOutput) ToContactOutputWithContext(ctx context.Context) ContactOutput {
	return o
}

// Email address of the contact.
func (o ContactOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v Contact) string { return v.Email }).(pulumi.StringOutput)
}

// Fax number of the contact in international format. For example, `"+1-800-555-0123"`.
func (o ContactOutput) FaxNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Contact) *string { return v.FaxNumber }).(pulumi.StringPtrOutput)
}

// Phone number of the contact in international format. For example, `"+1-800-555-0123"`.
func (o ContactOutput) PhoneNumber() pulumi.StringOutput {
	return o.ApplyT(func(v Contact) string { return v.PhoneNumber }).(pulumi.StringOutput)
}

// Postal address of the contact.
func (o ContactOutput) PostalAddress() PostalAddressOutput {
	return o.ApplyT(func(v Contact) PostalAddress { return v.PostalAddress }).(PostalAddressOutput)
}

// Details required for a contact associated with a `Registration`.
type ContactResponse struct {
	// Email address of the contact.
	Email string `pulumi:"email"`
	// Fax number of the contact in international format. For example, `"+1-800-555-0123"`.
	FaxNumber string `pulumi:"faxNumber"`
	// Phone number of the contact in international format. For example, `"+1-800-555-0123"`.
	PhoneNumber string `pulumi:"phoneNumber"`
	// Postal address of the contact.
	PostalAddress PostalAddressResponse `pulumi:"postalAddress"`
}

// Details required for a contact associated with a `Registration`.
type ContactResponseOutput struct{ *pulumi.OutputState }

func (ContactResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactResponse)(nil)).Elem()
}

func (o ContactResponseOutput) ToContactResponseOutput() ContactResponseOutput {
	return o
}

func (o ContactResponseOutput) ToContactResponseOutputWithContext(ctx context.Context) ContactResponseOutput {
	return o
}

// Email address of the contact.
func (o ContactResponseOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v ContactResponse) string { return v.Email }).(pulumi.StringOutput)
}

// Fax number of the contact in international format. For example, `"+1-800-555-0123"`.
func (o ContactResponseOutput) FaxNumber() pulumi.StringOutput {
	return o.ApplyT(func(v ContactResponse) string { return v.FaxNumber }).(pulumi.StringOutput)
}

// Phone number of the contact in international format. For example, `"+1-800-555-0123"`.
func (o ContactResponseOutput) PhoneNumber() pulumi.StringOutput {
	return o.ApplyT(func(v ContactResponse) string { return v.PhoneNumber }).(pulumi.StringOutput)
}

// Postal address of the contact.
func (o ContactResponseOutput) PostalAddress() PostalAddressResponseOutput {
	return o.ApplyT(func(v ContactResponse) PostalAddressResponse { return v.PostalAddress }).(PostalAddressResponseOutput)
}

// Defines the contact information associated with a `Registration`. [ICANN](https://icann.org/) requires all domain names to have associated contact information. The `registrant_contact` is considered the domain's legal owner, and often the other contacts are identical.
type ContactSettings struct {
	// The administrative contact for the `Registration`.
	AdminContact Contact `pulumi:"adminContact"`
	// Privacy setting for the contacts associated with the `Registration`.
	Privacy ContactSettingsPrivacy `pulumi:"privacy"`
	// The registrant contact for the `Registration`. *Caution: Anyone with access to this email address, phone number, and/or postal address can take control of the domain.* *Warning: For new `Registration`s, the registrant receives an email confirmation that they must complete within 15 days to avoid domain suspension.*
	RegistrantContact Contact `pulumi:"registrantContact"`
	// The technical contact for the `Registration`.
	TechnicalContact Contact `pulumi:"technicalContact"`
}

// ContactSettingsInput is an input type that accepts ContactSettingsArgs and ContactSettingsOutput values.
// You can construct a concrete instance of `ContactSettingsInput` via:
//
//          ContactSettingsArgs{...}
type ContactSettingsInput interface {
	pulumi.Input

	ToContactSettingsOutput() ContactSettingsOutput
	ToContactSettingsOutputWithContext(context.Context) ContactSettingsOutput
}

// Defines the contact information associated with a `Registration`. [ICANN](https://icann.org/) requires all domain names to have associated contact information. The `registrant_contact` is considered the domain's legal owner, and often the other contacts are identical.
type ContactSettingsArgs struct {
	// The administrative contact for the `Registration`.
	AdminContact ContactInput `pulumi:"adminContact"`
	// Privacy setting for the contacts associated with the `Registration`.
	Privacy ContactSettingsPrivacyInput `pulumi:"privacy"`
	// The registrant contact for the `Registration`. *Caution: Anyone with access to this email address, phone number, and/or postal address can take control of the domain.* *Warning: For new `Registration`s, the registrant receives an email confirmation that they must complete within 15 days to avoid domain suspension.*
	RegistrantContact ContactInput `pulumi:"registrantContact"`
	// The technical contact for the `Registration`.
	TechnicalContact ContactInput `pulumi:"technicalContact"`
}

func (ContactSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactSettings)(nil)).Elem()
}

func (i ContactSettingsArgs) ToContactSettingsOutput() ContactSettingsOutput {
	return i.ToContactSettingsOutputWithContext(context.Background())
}

func (i ContactSettingsArgs) ToContactSettingsOutputWithContext(ctx context.Context) ContactSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactSettingsOutput)
}

// Defines the contact information associated with a `Registration`. [ICANN](https://icann.org/) requires all domain names to have associated contact information. The `registrant_contact` is considered the domain's legal owner, and often the other contacts are identical.
type ContactSettingsOutput struct{ *pulumi.OutputState }

func (ContactSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactSettings)(nil)).Elem()
}

func (o ContactSettingsOutput) ToContactSettingsOutput() ContactSettingsOutput {
	return o
}

func (o ContactSettingsOutput) ToContactSettingsOutputWithContext(ctx context.Context) ContactSettingsOutput {
	return o
}

// The administrative contact for the `Registration`.
func (o ContactSettingsOutput) AdminContact() ContactOutput {
	return o.ApplyT(func(v ContactSettings) Contact { return v.AdminContact }).(ContactOutput)
}

// Privacy setting for the contacts associated with the `Registration`.
func (o ContactSettingsOutput) Privacy() ContactSettingsPrivacyOutput {
	return o.ApplyT(func(v ContactSettings) ContactSettingsPrivacy { return v.Privacy }).(ContactSettingsPrivacyOutput)
}

// The registrant contact for the `Registration`. *Caution: Anyone with access to this email address, phone number, and/or postal address can take control of the domain.* *Warning: For new `Registration`s, the registrant receives an email confirmation that they must complete within 15 days to avoid domain suspension.*
func (o ContactSettingsOutput) RegistrantContact() ContactOutput {
	return o.ApplyT(func(v ContactSettings) Contact { return v.RegistrantContact }).(ContactOutput)
}

// The technical contact for the `Registration`.
func (o ContactSettingsOutput) TechnicalContact() ContactOutput {
	return o.ApplyT(func(v ContactSettings) Contact { return v.TechnicalContact }).(ContactOutput)
}

// Defines the contact information associated with a `Registration`. [ICANN](https://icann.org/) requires all domain names to have associated contact information. The `registrant_contact` is considered the domain's legal owner, and often the other contacts are identical.
type ContactSettingsResponse struct {
	// The administrative contact for the `Registration`.
	AdminContact ContactResponse `pulumi:"adminContact"`
	// Privacy setting for the contacts associated with the `Registration`.
	Privacy string `pulumi:"privacy"`
	// The registrant contact for the `Registration`. *Caution: Anyone with access to this email address, phone number, and/or postal address can take control of the domain.* *Warning: For new `Registration`s, the registrant receives an email confirmation that they must complete within 15 days to avoid domain suspension.*
	RegistrantContact ContactResponse `pulumi:"registrantContact"`
	// The technical contact for the `Registration`.
	TechnicalContact ContactResponse `pulumi:"technicalContact"`
}

// Defines the contact information associated with a `Registration`. [ICANN](https://icann.org/) requires all domain names to have associated contact information. The `registrant_contact` is considered the domain's legal owner, and often the other contacts are identical.
type ContactSettingsResponseOutput struct{ *pulumi.OutputState }

func (ContactSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactSettingsResponse)(nil)).Elem()
}

func (o ContactSettingsResponseOutput) ToContactSettingsResponseOutput() ContactSettingsResponseOutput {
	return o
}

func (o ContactSettingsResponseOutput) ToContactSettingsResponseOutputWithContext(ctx context.Context) ContactSettingsResponseOutput {
	return o
}

// The administrative contact for the `Registration`.
func (o ContactSettingsResponseOutput) AdminContact() ContactResponseOutput {
	return o.ApplyT(func(v ContactSettingsResponse) ContactResponse { return v.AdminContact }).(ContactResponseOutput)
}

// Privacy setting for the contacts associated with the `Registration`.
func (o ContactSettingsResponseOutput) Privacy() pulumi.StringOutput {
	return o.ApplyT(func(v ContactSettingsResponse) string { return v.Privacy }).(pulumi.StringOutput)
}

// The registrant contact for the `Registration`. *Caution: Anyone with access to this email address, phone number, and/or postal address can take control of the domain.* *Warning: For new `Registration`s, the registrant receives an email confirmation that they must complete within 15 days to avoid domain suspension.*
func (o ContactSettingsResponseOutput) RegistrantContact() ContactResponseOutput {
	return o.ApplyT(func(v ContactSettingsResponse) ContactResponse { return v.RegistrantContact }).(ContactResponseOutput)
}

// The technical contact for the `Registration`.
func (o ContactSettingsResponseOutput) TechnicalContact() ContactResponseOutput {
	return o.ApplyT(func(v ContactSettingsResponse) ContactResponse { return v.TechnicalContact }).(ContactResponseOutput)
}

// Configuration for an arbitrary DNS provider.
type CustomDns struct {
	// The list of DS records for this domain, which are used to enable DNSSEC. The domain's DNS provider can provide the values to set here. If this field is empty, DNSSEC is disabled.
	DsRecords []DsRecord `pulumi:"dsRecords"`
	// A list of name servers that store the DNS zone for this domain. Each name server is a domain name, with Unicode domain names expressed in Punycode format.
	NameServers []string `pulumi:"nameServers"`
}

// CustomDnsInput is an input type that accepts CustomDnsArgs and CustomDnsOutput values.
// You can construct a concrete instance of `CustomDnsInput` via:
//
//          CustomDnsArgs{...}
type CustomDnsInput interface {
	pulumi.Input

	ToCustomDnsOutput() CustomDnsOutput
	ToCustomDnsOutputWithContext(context.Context) CustomDnsOutput
}

// Configuration for an arbitrary DNS provider.
type CustomDnsArgs struct {
	// The list of DS records for this domain, which are used to enable DNSSEC. The domain's DNS provider can provide the values to set here. If this field is empty, DNSSEC is disabled.
	DsRecords DsRecordArrayInput `pulumi:"dsRecords"`
	// A list of name servers that store the DNS zone for this domain. Each name server is a domain name, with Unicode domain names expressed in Punycode format.
	NameServers pulumi.StringArrayInput `pulumi:"nameServers"`
}

func (CustomDnsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomDns)(nil)).Elem()
}

func (i CustomDnsArgs) ToCustomDnsOutput() CustomDnsOutput {
	return i.ToCustomDnsOutputWithContext(context.Background())
}

func (i CustomDnsArgs) ToCustomDnsOutputWithContext(ctx context.Context) CustomDnsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomDnsOutput)
}

func (i CustomDnsArgs) ToCustomDnsPtrOutput() CustomDnsPtrOutput {
	return i.ToCustomDnsPtrOutputWithContext(context.Background())
}

func (i CustomDnsArgs) ToCustomDnsPtrOutputWithContext(ctx context.Context) CustomDnsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomDnsOutput).ToCustomDnsPtrOutputWithContext(ctx)
}

// CustomDnsPtrInput is an input type that accepts CustomDnsArgs, CustomDnsPtr and CustomDnsPtrOutput values.
// You can construct a concrete instance of `CustomDnsPtrInput` via:
//
//          CustomDnsArgs{...}
//
//  or:
//
//          nil
type CustomDnsPtrInput interface {
	pulumi.Input

	ToCustomDnsPtrOutput() CustomDnsPtrOutput
	ToCustomDnsPtrOutputWithContext(context.Context) CustomDnsPtrOutput
}

type customDnsPtrType CustomDnsArgs

func CustomDnsPtr(v *CustomDnsArgs) CustomDnsPtrInput {
	return (*customDnsPtrType)(v)
}

func (*customDnsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomDns)(nil)).Elem()
}

func (i *customDnsPtrType) ToCustomDnsPtrOutput() CustomDnsPtrOutput {
	return i.ToCustomDnsPtrOutputWithContext(context.Background())
}

func (i *customDnsPtrType) ToCustomDnsPtrOutputWithContext(ctx context.Context) CustomDnsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomDnsPtrOutput)
}

// Configuration for an arbitrary DNS provider.
type CustomDnsOutput struct{ *pulumi.OutputState }

func (CustomDnsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomDns)(nil)).Elem()
}

func (o CustomDnsOutput) ToCustomDnsOutput() CustomDnsOutput {
	return o
}

func (o CustomDnsOutput) ToCustomDnsOutputWithContext(ctx context.Context) CustomDnsOutput {
	return o
}

func (o CustomDnsOutput) ToCustomDnsPtrOutput() CustomDnsPtrOutput {
	return o.ToCustomDnsPtrOutputWithContext(context.Background())
}

func (o CustomDnsOutput) ToCustomDnsPtrOutputWithContext(ctx context.Context) CustomDnsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CustomDns) *CustomDns {
		return &v
	}).(CustomDnsPtrOutput)
}

// The list of DS records for this domain, which are used to enable DNSSEC. The domain's DNS provider can provide the values to set here. If this field is empty, DNSSEC is disabled.
func (o CustomDnsOutput) DsRecords() DsRecordArrayOutput {
	return o.ApplyT(func(v CustomDns) []DsRecord { return v.DsRecords }).(DsRecordArrayOutput)
}

// A list of name servers that store the DNS zone for this domain. Each name server is a domain name, with Unicode domain names expressed in Punycode format.
func (o CustomDnsOutput) NameServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CustomDns) []string { return v.NameServers }).(pulumi.StringArrayOutput)
}

type CustomDnsPtrOutput struct{ *pulumi.OutputState }

func (CustomDnsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomDns)(nil)).Elem()
}

func (o CustomDnsPtrOutput) ToCustomDnsPtrOutput() CustomDnsPtrOutput {
	return o
}

func (o CustomDnsPtrOutput) ToCustomDnsPtrOutputWithContext(ctx context.Context) CustomDnsPtrOutput {
	return o
}

func (o CustomDnsPtrOutput) Elem() CustomDnsOutput {
	return o.ApplyT(func(v *CustomDns) CustomDns {
		if v != nil {
			return *v
		}
		var ret CustomDns
		return ret
	}).(CustomDnsOutput)
}

// The list of DS records for this domain, which are used to enable DNSSEC. The domain's DNS provider can provide the values to set here. If this field is empty, DNSSEC is disabled.
func (o CustomDnsPtrOutput) DsRecords() DsRecordArrayOutput {
	return o.ApplyT(func(v *CustomDns) []DsRecord {
		if v == nil {
			return nil
		}
		return v.DsRecords
	}).(DsRecordArrayOutput)
}

// A list of name servers that store the DNS zone for this domain. Each name server is a domain name, with Unicode domain names expressed in Punycode format.
func (o CustomDnsPtrOutput) NameServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CustomDns) []string {
		if v == nil {
			return nil
		}
		return v.NameServers
	}).(pulumi.StringArrayOutput)
}

// Configuration for an arbitrary DNS provider.
type CustomDnsResponse struct {
	// The list of DS records for this domain, which are used to enable DNSSEC. The domain's DNS provider can provide the values to set here. If this field is empty, DNSSEC is disabled.
	DsRecords []DsRecordResponse `pulumi:"dsRecords"`
	// A list of name servers that store the DNS zone for this domain. Each name server is a domain name, with Unicode domain names expressed in Punycode format.
	NameServers []string `pulumi:"nameServers"`
}

// Configuration for an arbitrary DNS provider.
type CustomDnsResponseOutput struct{ *pulumi.OutputState }

func (CustomDnsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomDnsResponse)(nil)).Elem()
}

func (o CustomDnsResponseOutput) ToCustomDnsResponseOutput() CustomDnsResponseOutput {
	return o
}

func (o CustomDnsResponseOutput) ToCustomDnsResponseOutputWithContext(ctx context.Context) CustomDnsResponseOutput {
	return o
}

// The list of DS records for this domain, which are used to enable DNSSEC. The domain's DNS provider can provide the values to set here. If this field is empty, DNSSEC is disabled.
func (o CustomDnsResponseOutput) DsRecords() DsRecordResponseArrayOutput {
	return o.ApplyT(func(v CustomDnsResponse) []DsRecordResponse { return v.DsRecords }).(DsRecordResponseArrayOutput)
}

// A list of name servers that store the DNS zone for this domain. Each name server is a domain name, with Unicode domain names expressed in Punycode format.
func (o CustomDnsResponseOutput) NameServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CustomDnsResponse) []string { return v.NameServers }).(pulumi.StringArrayOutput)
}

// Defines the DNS configuration of a `Registration`, including name servers, DNSSEC, and glue records.
type DnsSettings struct {
	// An arbitrary DNS provider identified by its name servers.
	CustomDns *CustomDns `pulumi:"customDns"`
	// The list of glue records for this `Registration`. Commonly empty.
	GlueRecords []GlueRecord `pulumi:"glueRecords"`
	// The free DNS zone provided by [Google Domains](https://domains.google/).
	GoogleDomainsDns *GoogleDomainsDns `pulumi:"googleDomainsDns"`
}

// DnsSettingsInput is an input type that accepts DnsSettingsArgs and DnsSettingsOutput values.
// You can construct a concrete instance of `DnsSettingsInput` via:
//
//          DnsSettingsArgs{...}
type DnsSettingsInput interface {
	pulumi.Input

	ToDnsSettingsOutput() DnsSettingsOutput
	ToDnsSettingsOutputWithContext(context.Context) DnsSettingsOutput
}

// Defines the DNS configuration of a `Registration`, including name servers, DNSSEC, and glue records.
type DnsSettingsArgs struct {
	// An arbitrary DNS provider identified by its name servers.
	CustomDns CustomDnsPtrInput `pulumi:"customDns"`
	// The list of glue records for this `Registration`. Commonly empty.
	GlueRecords GlueRecordArrayInput `pulumi:"glueRecords"`
	// The free DNS zone provided by [Google Domains](https://domains.google/).
	GoogleDomainsDns GoogleDomainsDnsPtrInput `pulumi:"googleDomainsDns"`
}

func (DnsSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsSettings)(nil)).Elem()
}

func (i DnsSettingsArgs) ToDnsSettingsOutput() DnsSettingsOutput {
	return i.ToDnsSettingsOutputWithContext(context.Background())
}

func (i DnsSettingsArgs) ToDnsSettingsOutputWithContext(ctx context.Context) DnsSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsSettingsOutput)
}

func (i DnsSettingsArgs) ToDnsSettingsPtrOutput() DnsSettingsPtrOutput {
	return i.ToDnsSettingsPtrOutputWithContext(context.Background())
}

func (i DnsSettingsArgs) ToDnsSettingsPtrOutputWithContext(ctx context.Context) DnsSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsSettingsOutput).ToDnsSettingsPtrOutputWithContext(ctx)
}

// DnsSettingsPtrInput is an input type that accepts DnsSettingsArgs, DnsSettingsPtr and DnsSettingsPtrOutput values.
// You can construct a concrete instance of `DnsSettingsPtrInput` via:
//
//          DnsSettingsArgs{...}
//
//  or:
//
//          nil
type DnsSettingsPtrInput interface {
	pulumi.Input

	ToDnsSettingsPtrOutput() DnsSettingsPtrOutput
	ToDnsSettingsPtrOutputWithContext(context.Context) DnsSettingsPtrOutput
}

type dnsSettingsPtrType DnsSettingsArgs

func DnsSettingsPtr(v *DnsSettingsArgs) DnsSettingsPtrInput {
	return (*dnsSettingsPtrType)(v)
}

func (*dnsSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsSettings)(nil)).Elem()
}

func (i *dnsSettingsPtrType) ToDnsSettingsPtrOutput() DnsSettingsPtrOutput {
	return i.ToDnsSettingsPtrOutputWithContext(context.Background())
}

func (i *dnsSettingsPtrType) ToDnsSettingsPtrOutputWithContext(ctx context.Context) DnsSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsSettingsPtrOutput)
}

// Defines the DNS configuration of a `Registration`, including name servers, DNSSEC, and glue records.
type DnsSettingsOutput struct{ *pulumi.OutputState }

func (DnsSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsSettings)(nil)).Elem()
}

func (o DnsSettingsOutput) ToDnsSettingsOutput() DnsSettingsOutput {
	return o
}

func (o DnsSettingsOutput) ToDnsSettingsOutputWithContext(ctx context.Context) DnsSettingsOutput {
	return o
}

func (o DnsSettingsOutput) ToDnsSettingsPtrOutput() DnsSettingsPtrOutput {
	return o.ToDnsSettingsPtrOutputWithContext(context.Background())
}

func (o DnsSettingsOutput) ToDnsSettingsPtrOutputWithContext(ctx context.Context) DnsSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DnsSettings) *DnsSettings {
		return &v
	}).(DnsSettingsPtrOutput)
}

// An arbitrary DNS provider identified by its name servers.
func (o DnsSettingsOutput) CustomDns() CustomDnsPtrOutput {
	return o.ApplyT(func(v DnsSettings) *CustomDns { return v.CustomDns }).(CustomDnsPtrOutput)
}

// The list of glue records for this `Registration`. Commonly empty.
func (o DnsSettingsOutput) GlueRecords() GlueRecordArrayOutput {
	return o.ApplyT(func(v DnsSettings) []GlueRecord { return v.GlueRecords }).(GlueRecordArrayOutput)
}

// The free DNS zone provided by [Google Domains](https://domains.google/).
func (o DnsSettingsOutput) GoogleDomainsDns() GoogleDomainsDnsPtrOutput {
	return o.ApplyT(func(v DnsSettings) *GoogleDomainsDns { return v.GoogleDomainsDns }).(GoogleDomainsDnsPtrOutput)
}

type DnsSettingsPtrOutput struct{ *pulumi.OutputState }

func (DnsSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsSettings)(nil)).Elem()
}

func (o DnsSettingsPtrOutput) ToDnsSettingsPtrOutput() DnsSettingsPtrOutput {
	return o
}

func (o DnsSettingsPtrOutput) ToDnsSettingsPtrOutputWithContext(ctx context.Context) DnsSettingsPtrOutput {
	return o
}

func (o DnsSettingsPtrOutput) Elem() DnsSettingsOutput {
	return o.ApplyT(func(v *DnsSettings) DnsSettings {
		if v != nil {
			return *v
		}
		var ret DnsSettings
		return ret
	}).(DnsSettingsOutput)
}

// An arbitrary DNS provider identified by its name servers.
func (o DnsSettingsPtrOutput) CustomDns() CustomDnsPtrOutput {
	return o.ApplyT(func(v *DnsSettings) *CustomDns {
		if v == nil {
			return nil
		}
		return v.CustomDns
	}).(CustomDnsPtrOutput)
}

// The list of glue records for this `Registration`. Commonly empty.
func (o DnsSettingsPtrOutput) GlueRecords() GlueRecordArrayOutput {
	return o.ApplyT(func(v *DnsSettings) []GlueRecord {
		if v == nil {
			return nil
		}
		return v.GlueRecords
	}).(GlueRecordArrayOutput)
}

// The free DNS zone provided by [Google Domains](https://domains.google/).
func (o DnsSettingsPtrOutput) GoogleDomainsDns() GoogleDomainsDnsPtrOutput {
	return o.ApplyT(func(v *DnsSettings) *GoogleDomainsDns {
		if v == nil {
			return nil
		}
		return v.GoogleDomainsDns
	}).(GoogleDomainsDnsPtrOutput)
}

// Defines the DNS configuration of a `Registration`, including name servers, DNSSEC, and glue records.
type DnsSettingsResponse struct {
	// An arbitrary DNS provider identified by its name servers.
	CustomDns CustomDnsResponse `pulumi:"customDns"`
	// The list of glue records for this `Registration`. Commonly empty.
	GlueRecords []GlueRecordResponse `pulumi:"glueRecords"`
	// The free DNS zone provided by [Google Domains](https://domains.google/).
	GoogleDomainsDns GoogleDomainsDnsResponse `pulumi:"googleDomainsDns"`
}

// Defines the DNS configuration of a `Registration`, including name servers, DNSSEC, and glue records.
type DnsSettingsResponseOutput struct{ *pulumi.OutputState }

func (DnsSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsSettingsResponse)(nil)).Elem()
}

func (o DnsSettingsResponseOutput) ToDnsSettingsResponseOutput() DnsSettingsResponseOutput {
	return o
}

func (o DnsSettingsResponseOutput) ToDnsSettingsResponseOutputWithContext(ctx context.Context) DnsSettingsResponseOutput {
	return o
}

// An arbitrary DNS provider identified by its name servers.
func (o DnsSettingsResponseOutput) CustomDns() CustomDnsResponseOutput {
	return o.ApplyT(func(v DnsSettingsResponse) CustomDnsResponse { return v.CustomDns }).(CustomDnsResponseOutput)
}

// The list of glue records for this `Registration`. Commonly empty.
func (o DnsSettingsResponseOutput) GlueRecords() GlueRecordResponseArrayOutput {
	return o.ApplyT(func(v DnsSettingsResponse) []GlueRecordResponse { return v.GlueRecords }).(GlueRecordResponseArrayOutput)
}

// The free DNS zone provided by [Google Domains](https://domains.google/).
func (o DnsSettingsResponseOutput) GoogleDomainsDns() GoogleDomainsDnsResponseOutput {
	return o.ApplyT(func(v DnsSettingsResponse) GoogleDomainsDnsResponse { return v.GoogleDomainsDns }).(GoogleDomainsDnsResponseOutput)
}

// Defines a Delegation Signer (DS) record, which is needed to enable DNSSEC for a domain. It contains a digest (hash) of a DNSKEY record that must be present in the domain's DNS zone.
type DsRecord struct {
	// The algorithm used to generate the referenced DNSKEY.
	Algorithm *DsRecordAlgorithm `pulumi:"algorithm"`
	// The digest generated from the referenced DNSKEY.
	Digest *string `pulumi:"digest"`
	// The hash function used to generate the digest of the referenced DNSKEY.
	DigestType *DsRecordDigestType `pulumi:"digestType"`
	// The key tag of the record. Must be set in range 0 -- 65535.
	KeyTag *int `pulumi:"keyTag"`
}

// DsRecordInput is an input type that accepts DsRecordArgs and DsRecordOutput values.
// You can construct a concrete instance of `DsRecordInput` via:
//
//          DsRecordArgs{...}
type DsRecordInput interface {
	pulumi.Input

	ToDsRecordOutput() DsRecordOutput
	ToDsRecordOutputWithContext(context.Context) DsRecordOutput
}

// Defines a Delegation Signer (DS) record, which is needed to enable DNSSEC for a domain. It contains a digest (hash) of a DNSKEY record that must be present in the domain's DNS zone.
type DsRecordArgs struct {
	// The algorithm used to generate the referenced DNSKEY.
	Algorithm DsRecordAlgorithmPtrInput `pulumi:"algorithm"`
	// The digest generated from the referenced DNSKEY.
	Digest pulumi.StringPtrInput `pulumi:"digest"`
	// The hash function used to generate the digest of the referenced DNSKEY.
	DigestType DsRecordDigestTypePtrInput `pulumi:"digestType"`
	// The key tag of the record. Must be set in range 0 -- 65535.
	KeyTag pulumi.IntPtrInput `pulumi:"keyTag"`
}

func (DsRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DsRecord)(nil)).Elem()
}

func (i DsRecordArgs) ToDsRecordOutput() DsRecordOutput {
	return i.ToDsRecordOutputWithContext(context.Background())
}

func (i DsRecordArgs) ToDsRecordOutputWithContext(ctx context.Context) DsRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DsRecordOutput)
}

// DsRecordArrayInput is an input type that accepts DsRecordArray and DsRecordArrayOutput values.
// You can construct a concrete instance of `DsRecordArrayInput` via:
//
//          DsRecordArray{ DsRecordArgs{...} }
type DsRecordArrayInput interface {
	pulumi.Input

	ToDsRecordArrayOutput() DsRecordArrayOutput
	ToDsRecordArrayOutputWithContext(context.Context) DsRecordArrayOutput
}

type DsRecordArray []DsRecordInput

func (DsRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DsRecord)(nil)).Elem()
}

func (i DsRecordArray) ToDsRecordArrayOutput() DsRecordArrayOutput {
	return i.ToDsRecordArrayOutputWithContext(context.Background())
}

func (i DsRecordArray) ToDsRecordArrayOutputWithContext(ctx context.Context) DsRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DsRecordArrayOutput)
}

// Defines a Delegation Signer (DS) record, which is needed to enable DNSSEC for a domain. It contains a digest (hash) of a DNSKEY record that must be present in the domain's DNS zone.
type DsRecordOutput struct{ *pulumi.OutputState }

func (DsRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DsRecord)(nil)).Elem()
}

func (o DsRecordOutput) ToDsRecordOutput() DsRecordOutput {
	return o
}

func (o DsRecordOutput) ToDsRecordOutputWithContext(ctx context.Context) DsRecordOutput {
	return o
}

// The algorithm used to generate the referenced DNSKEY.
func (o DsRecordOutput) Algorithm() DsRecordAlgorithmPtrOutput {
	return o.ApplyT(func(v DsRecord) *DsRecordAlgorithm { return v.Algorithm }).(DsRecordAlgorithmPtrOutput)
}

// The digest generated from the referenced DNSKEY.
func (o DsRecordOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DsRecord) *string { return v.Digest }).(pulumi.StringPtrOutput)
}

// The hash function used to generate the digest of the referenced DNSKEY.
func (o DsRecordOutput) DigestType() DsRecordDigestTypePtrOutput {
	return o.ApplyT(func(v DsRecord) *DsRecordDigestType { return v.DigestType }).(DsRecordDigestTypePtrOutput)
}

// The key tag of the record. Must be set in range 0 -- 65535.
func (o DsRecordOutput) KeyTag() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DsRecord) *int { return v.KeyTag }).(pulumi.IntPtrOutput)
}

type DsRecordArrayOutput struct{ *pulumi.OutputState }

func (DsRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DsRecord)(nil)).Elem()
}

func (o DsRecordArrayOutput) ToDsRecordArrayOutput() DsRecordArrayOutput {
	return o
}

func (o DsRecordArrayOutput) ToDsRecordArrayOutputWithContext(ctx context.Context) DsRecordArrayOutput {
	return o
}

func (o DsRecordArrayOutput) Index(i pulumi.IntInput) DsRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DsRecord {
		return vs[0].([]DsRecord)[vs[1].(int)]
	}).(DsRecordOutput)
}

// Defines a Delegation Signer (DS) record, which is needed to enable DNSSEC for a domain. It contains a digest (hash) of a DNSKEY record that must be present in the domain's DNS zone.
type DsRecordResponse struct {
	// The algorithm used to generate the referenced DNSKEY.
	Algorithm string `pulumi:"algorithm"`
	// The digest generated from the referenced DNSKEY.
	Digest string `pulumi:"digest"`
	// The hash function used to generate the digest of the referenced DNSKEY.
	DigestType string `pulumi:"digestType"`
	// The key tag of the record. Must be set in range 0 -- 65535.
	KeyTag int `pulumi:"keyTag"`
}

// Defines a Delegation Signer (DS) record, which is needed to enable DNSSEC for a domain. It contains a digest (hash) of a DNSKEY record that must be present in the domain's DNS zone.
type DsRecordResponseOutput struct{ *pulumi.OutputState }

func (DsRecordResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DsRecordResponse)(nil)).Elem()
}

func (o DsRecordResponseOutput) ToDsRecordResponseOutput() DsRecordResponseOutput {
	return o
}

func (o DsRecordResponseOutput) ToDsRecordResponseOutputWithContext(ctx context.Context) DsRecordResponseOutput {
	return o
}

// The algorithm used to generate the referenced DNSKEY.
func (o DsRecordResponseOutput) Algorithm() pulumi.StringOutput {
	return o.ApplyT(func(v DsRecordResponse) string { return v.Algorithm }).(pulumi.StringOutput)
}

// The digest generated from the referenced DNSKEY.
func (o DsRecordResponseOutput) Digest() pulumi.StringOutput {
	return o.ApplyT(func(v DsRecordResponse) string { return v.Digest }).(pulumi.StringOutput)
}

// The hash function used to generate the digest of the referenced DNSKEY.
func (o DsRecordResponseOutput) DigestType() pulumi.StringOutput {
	return o.ApplyT(func(v DsRecordResponse) string { return v.DigestType }).(pulumi.StringOutput)
}

// The key tag of the record. Must be set in range 0 -- 65535.
func (o DsRecordResponseOutput) KeyTag() pulumi.IntOutput {
	return o.ApplyT(func(v DsRecordResponse) int { return v.KeyTag }).(pulumi.IntOutput)
}

type DsRecordResponseArrayOutput struct{ *pulumi.OutputState }

func (DsRecordResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DsRecordResponse)(nil)).Elem()
}

func (o DsRecordResponseArrayOutput) ToDsRecordResponseArrayOutput() DsRecordResponseArrayOutput {
	return o
}

func (o DsRecordResponseArrayOutput) ToDsRecordResponseArrayOutputWithContext(ctx context.Context) DsRecordResponseArrayOutput {
	return o
}

func (o DsRecordResponseArrayOutput) Index(i pulumi.IntInput) DsRecordResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DsRecordResponse {
		return vs[0].([]DsRecordResponse)[vs[1].(int)]
	}).(DsRecordResponseOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//          ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//          ExprArgs{...}
//
//  or:
//
//          nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr {
		if v != nil {
			return *v
		}
		var ret Expr
		return ret
	}).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponse struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title string `pulumi:"title"`
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseOutput struct{ *pulumi.OutputState }

func (ExprResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (o ExprResponseOutput) ToExprResponseOutput() ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return o
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Title }).(pulumi.StringOutput)
}

// Defines a host on your domain that is a DNS name server for your domain and/or other domains. Glue records are a way of making the IP address of a name server known, even when it serves DNS queries for its parent domain. For example, when `ns.example.com` is a name server for `example.com`, the host `ns.example.com` must have a glue record to break the circular DNS reference.
type GlueRecord struct {
	// Domain name of the host in Punycode format.
	HostName string `pulumi:"hostName"`
	// List of IPv4 addresses corresponding to this host in the standard decimal format (e.g. `198.51.100.1`). At least one of `ipv4_address` and `ipv6_address` must be set.
	Ipv4Addresses []string `pulumi:"ipv4Addresses"`
	// List of IPv6 addresses corresponding to this host in the standard hexadecimal format (e.g. `2001:db8::`). At least one of `ipv4_address` and `ipv6_address` must be set.
	Ipv6Addresses []string `pulumi:"ipv6Addresses"`
}

// GlueRecordInput is an input type that accepts GlueRecordArgs and GlueRecordOutput values.
// You can construct a concrete instance of `GlueRecordInput` via:
//
//          GlueRecordArgs{...}
type GlueRecordInput interface {
	pulumi.Input

	ToGlueRecordOutput() GlueRecordOutput
	ToGlueRecordOutputWithContext(context.Context) GlueRecordOutput
}

// Defines a host on your domain that is a DNS name server for your domain and/or other domains. Glue records are a way of making the IP address of a name server known, even when it serves DNS queries for its parent domain. For example, when `ns.example.com` is a name server for `example.com`, the host `ns.example.com` must have a glue record to break the circular DNS reference.
type GlueRecordArgs struct {
	// Domain name of the host in Punycode format.
	HostName pulumi.StringInput `pulumi:"hostName"`
	// List of IPv4 addresses corresponding to this host in the standard decimal format (e.g. `198.51.100.1`). At least one of `ipv4_address` and `ipv6_address` must be set.
	Ipv4Addresses pulumi.StringArrayInput `pulumi:"ipv4Addresses"`
	// List of IPv6 addresses corresponding to this host in the standard hexadecimal format (e.g. `2001:db8::`). At least one of `ipv4_address` and `ipv6_address` must be set.
	Ipv6Addresses pulumi.StringArrayInput `pulumi:"ipv6Addresses"`
}

func (GlueRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlueRecord)(nil)).Elem()
}

func (i GlueRecordArgs) ToGlueRecordOutput() GlueRecordOutput {
	return i.ToGlueRecordOutputWithContext(context.Background())
}

func (i GlueRecordArgs) ToGlueRecordOutputWithContext(ctx context.Context) GlueRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlueRecordOutput)
}

// GlueRecordArrayInput is an input type that accepts GlueRecordArray and GlueRecordArrayOutput values.
// You can construct a concrete instance of `GlueRecordArrayInput` via:
//
//          GlueRecordArray{ GlueRecordArgs{...} }
type GlueRecordArrayInput interface {
	pulumi.Input

	ToGlueRecordArrayOutput() GlueRecordArrayOutput
	ToGlueRecordArrayOutputWithContext(context.Context) GlueRecordArrayOutput
}

type GlueRecordArray []GlueRecordInput

func (GlueRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GlueRecord)(nil)).Elem()
}

func (i GlueRecordArray) ToGlueRecordArrayOutput() GlueRecordArrayOutput {
	return i.ToGlueRecordArrayOutputWithContext(context.Background())
}

func (i GlueRecordArray) ToGlueRecordArrayOutputWithContext(ctx context.Context) GlueRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlueRecordArrayOutput)
}

// Defines a host on your domain that is a DNS name server for your domain and/or other domains. Glue records are a way of making the IP address of a name server known, even when it serves DNS queries for its parent domain. For example, when `ns.example.com` is a name server for `example.com`, the host `ns.example.com` must have a glue record to break the circular DNS reference.
type GlueRecordOutput struct{ *pulumi.OutputState }

func (GlueRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlueRecord)(nil)).Elem()
}

func (o GlueRecordOutput) ToGlueRecordOutput() GlueRecordOutput {
	return o
}

func (o GlueRecordOutput) ToGlueRecordOutputWithContext(ctx context.Context) GlueRecordOutput {
	return o
}

// Domain name of the host in Punycode format.
func (o GlueRecordOutput) HostName() pulumi.StringOutput {
	return o.ApplyT(func(v GlueRecord) string { return v.HostName }).(pulumi.StringOutput)
}

// List of IPv4 addresses corresponding to this host in the standard decimal format (e.g. `198.51.100.1`). At least one of `ipv4_address` and `ipv6_address` must be set.
func (o GlueRecordOutput) Ipv4Addresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GlueRecord) []string { return v.Ipv4Addresses }).(pulumi.StringArrayOutput)
}

// List of IPv6 addresses corresponding to this host in the standard hexadecimal format (e.g. `2001:db8::`). At least one of `ipv4_address` and `ipv6_address` must be set.
func (o GlueRecordOutput) Ipv6Addresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GlueRecord) []string { return v.Ipv6Addresses }).(pulumi.StringArrayOutput)
}

type GlueRecordArrayOutput struct{ *pulumi.OutputState }

func (GlueRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GlueRecord)(nil)).Elem()
}

func (o GlueRecordArrayOutput) ToGlueRecordArrayOutput() GlueRecordArrayOutput {
	return o
}

func (o GlueRecordArrayOutput) ToGlueRecordArrayOutputWithContext(ctx context.Context) GlueRecordArrayOutput {
	return o
}

func (o GlueRecordArrayOutput) Index(i pulumi.IntInput) GlueRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GlueRecord {
		return vs[0].([]GlueRecord)[vs[1].(int)]
	}).(GlueRecordOutput)
}

// Defines a host on your domain that is a DNS name server for your domain and/or other domains. Glue records are a way of making the IP address of a name server known, even when it serves DNS queries for its parent domain. For example, when `ns.example.com` is a name server for `example.com`, the host `ns.example.com` must have a glue record to break the circular DNS reference.
type GlueRecordResponse struct {
	// Domain name of the host in Punycode format.
	HostName string `pulumi:"hostName"`
	// List of IPv4 addresses corresponding to this host in the standard decimal format (e.g. `198.51.100.1`). At least one of `ipv4_address` and `ipv6_address` must be set.
	Ipv4Addresses []string `pulumi:"ipv4Addresses"`
	// List of IPv6 addresses corresponding to this host in the standard hexadecimal format (e.g. `2001:db8::`). At least one of `ipv4_address` and `ipv6_address` must be set.
	Ipv6Addresses []string `pulumi:"ipv6Addresses"`
}

// Defines a host on your domain that is a DNS name server for your domain and/or other domains. Glue records are a way of making the IP address of a name server known, even when it serves DNS queries for its parent domain. For example, when `ns.example.com` is a name server for `example.com`, the host `ns.example.com` must have a glue record to break the circular DNS reference.
type GlueRecordResponseOutput struct{ *pulumi.OutputState }

func (GlueRecordResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlueRecordResponse)(nil)).Elem()
}

func (o GlueRecordResponseOutput) ToGlueRecordResponseOutput() GlueRecordResponseOutput {
	return o
}

func (o GlueRecordResponseOutput) ToGlueRecordResponseOutputWithContext(ctx context.Context) GlueRecordResponseOutput {
	return o
}

// Domain name of the host in Punycode format.
func (o GlueRecordResponseOutput) HostName() pulumi.StringOutput {
	return o.ApplyT(func(v GlueRecordResponse) string { return v.HostName }).(pulumi.StringOutput)
}

// List of IPv4 addresses corresponding to this host in the standard decimal format (e.g. `198.51.100.1`). At least one of `ipv4_address` and `ipv6_address` must be set.
func (o GlueRecordResponseOutput) Ipv4Addresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GlueRecordResponse) []string { return v.Ipv4Addresses }).(pulumi.StringArrayOutput)
}

// List of IPv6 addresses corresponding to this host in the standard hexadecimal format (e.g. `2001:db8::`). At least one of `ipv4_address` and `ipv6_address` must be set.
func (o GlueRecordResponseOutput) Ipv6Addresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GlueRecordResponse) []string { return v.Ipv6Addresses }).(pulumi.StringArrayOutput)
}

type GlueRecordResponseArrayOutput struct{ *pulumi.OutputState }

func (GlueRecordResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GlueRecordResponse)(nil)).Elem()
}

func (o GlueRecordResponseArrayOutput) ToGlueRecordResponseArrayOutput() GlueRecordResponseArrayOutput {
	return o
}

func (o GlueRecordResponseArrayOutput) ToGlueRecordResponseArrayOutputWithContext(ctx context.Context) GlueRecordResponseArrayOutput {
	return o
}

func (o GlueRecordResponseArrayOutput) Index(i pulumi.IntInput) GlueRecordResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GlueRecordResponse {
		return vs[0].([]GlueRecordResponse)[vs[1].(int)]
	}).(GlueRecordResponseOutput)
}

// Configuration for using the free DNS zone provided by Google Domains as a `Registration`'s `dns_provider`. You cannot configure the DNS zone itself using the API. To configure the DNS zone, go to [Google Domains](https://domains.google/).
type GoogleDomainsDns struct {
	// The state of DS records for this domain. Used to enable or disable automatic DNSSEC.
	DsState GoogleDomainsDnsDsState `pulumi:"dsState"`
}

// GoogleDomainsDnsInput is an input type that accepts GoogleDomainsDnsArgs and GoogleDomainsDnsOutput values.
// You can construct a concrete instance of `GoogleDomainsDnsInput` via:
//
//          GoogleDomainsDnsArgs{...}
type GoogleDomainsDnsInput interface {
	pulumi.Input

	ToGoogleDomainsDnsOutput() GoogleDomainsDnsOutput
	ToGoogleDomainsDnsOutputWithContext(context.Context) GoogleDomainsDnsOutput
}

// Configuration for using the free DNS zone provided by Google Domains as a `Registration`'s `dns_provider`. You cannot configure the DNS zone itself using the API. To configure the DNS zone, go to [Google Domains](https://domains.google/).
type GoogleDomainsDnsArgs struct {
	// The state of DS records for this domain. Used to enable or disable automatic DNSSEC.
	DsState GoogleDomainsDnsDsStateInput `pulumi:"dsState"`
}

func (GoogleDomainsDnsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDomainsDns)(nil)).Elem()
}

func (i GoogleDomainsDnsArgs) ToGoogleDomainsDnsOutput() GoogleDomainsDnsOutput {
	return i.ToGoogleDomainsDnsOutputWithContext(context.Background())
}

func (i GoogleDomainsDnsArgs) ToGoogleDomainsDnsOutputWithContext(ctx context.Context) GoogleDomainsDnsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDomainsDnsOutput)
}

func (i GoogleDomainsDnsArgs) ToGoogleDomainsDnsPtrOutput() GoogleDomainsDnsPtrOutput {
	return i.ToGoogleDomainsDnsPtrOutputWithContext(context.Background())
}

func (i GoogleDomainsDnsArgs) ToGoogleDomainsDnsPtrOutputWithContext(ctx context.Context) GoogleDomainsDnsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDomainsDnsOutput).ToGoogleDomainsDnsPtrOutputWithContext(ctx)
}

// GoogleDomainsDnsPtrInput is an input type that accepts GoogleDomainsDnsArgs, GoogleDomainsDnsPtr and GoogleDomainsDnsPtrOutput values.
// You can construct a concrete instance of `GoogleDomainsDnsPtrInput` via:
//
//          GoogleDomainsDnsArgs{...}
//
//  or:
//
//          nil
type GoogleDomainsDnsPtrInput interface {
	pulumi.Input

	ToGoogleDomainsDnsPtrOutput() GoogleDomainsDnsPtrOutput
	ToGoogleDomainsDnsPtrOutputWithContext(context.Context) GoogleDomainsDnsPtrOutput
}

type googleDomainsDnsPtrType GoogleDomainsDnsArgs

func GoogleDomainsDnsPtr(v *GoogleDomainsDnsArgs) GoogleDomainsDnsPtrInput {
	return (*googleDomainsDnsPtrType)(v)
}

func (*googleDomainsDnsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleDomainsDns)(nil)).Elem()
}

func (i *googleDomainsDnsPtrType) ToGoogleDomainsDnsPtrOutput() GoogleDomainsDnsPtrOutput {
	return i.ToGoogleDomainsDnsPtrOutputWithContext(context.Background())
}

func (i *googleDomainsDnsPtrType) ToGoogleDomainsDnsPtrOutputWithContext(ctx context.Context) GoogleDomainsDnsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDomainsDnsPtrOutput)
}

// Configuration for using the free DNS zone provided by Google Domains as a `Registration`'s `dns_provider`. You cannot configure the DNS zone itself using the API. To configure the DNS zone, go to [Google Domains](https://domains.google/).
type GoogleDomainsDnsOutput struct{ *pulumi.OutputState }

func (GoogleDomainsDnsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDomainsDns)(nil)).Elem()
}

func (o GoogleDomainsDnsOutput) ToGoogleDomainsDnsOutput() GoogleDomainsDnsOutput {
	return o
}

func (o GoogleDomainsDnsOutput) ToGoogleDomainsDnsOutputWithContext(ctx context.Context) GoogleDomainsDnsOutput {
	return o
}

func (o GoogleDomainsDnsOutput) ToGoogleDomainsDnsPtrOutput() GoogleDomainsDnsPtrOutput {
	return o.ToGoogleDomainsDnsPtrOutputWithContext(context.Background())
}

func (o GoogleDomainsDnsOutput) ToGoogleDomainsDnsPtrOutputWithContext(ctx context.Context) GoogleDomainsDnsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleDomainsDns) *GoogleDomainsDns {
		return &v
	}).(GoogleDomainsDnsPtrOutput)
}

// The state of DS records for this domain. Used to enable or disable automatic DNSSEC.
func (o GoogleDomainsDnsOutput) DsState() GoogleDomainsDnsDsStateOutput {
	return o.ApplyT(func(v GoogleDomainsDns) GoogleDomainsDnsDsState { return v.DsState }).(GoogleDomainsDnsDsStateOutput)
}

type GoogleDomainsDnsPtrOutput struct{ *pulumi.OutputState }

func (GoogleDomainsDnsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleDomainsDns)(nil)).Elem()
}

func (o GoogleDomainsDnsPtrOutput) ToGoogleDomainsDnsPtrOutput() GoogleDomainsDnsPtrOutput {
	return o
}

func (o GoogleDomainsDnsPtrOutput) ToGoogleDomainsDnsPtrOutputWithContext(ctx context.Context) GoogleDomainsDnsPtrOutput {
	return o
}

func (o GoogleDomainsDnsPtrOutput) Elem() GoogleDomainsDnsOutput {
	return o.ApplyT(func(v *GoogleDomainsDns) GoogleDomainsDns {
		if v != nil {
			return *v
		}
		var ret GoogleDomainsDns
		return ret
	}).(GoogleDomainsDnsOutput)
}

// The state of DS records for this domain. Used to enable or disable automatic DNSSEC.
func (o GoogleDomainsDnsPtrOutput) DsState() GoogleDomainsDnsDsStatePtrOutput {
	return o.ApplyT(func(v *GoogleDomainsDns) *GoogleDomainsDnsDsState {
		if v == nil {
			return nil
		}
		return &v.DsState
	}).(GoogleDomainsDnsDsStatePtrOutput)
}

// Configuration for using the free DNS zone provided by Google Domains as a `Registration`'s `dns_provider`. You cannot configure the DNS zone itself using the API. To configure the DNS zone, go to [Google Domains](https://domains.google/).
type GoogleDomainsDnsResponse struct {
	// The list of DS records published for this domain. The list is automatically populated when `ds_state` is `DS_RECORDS_PUBLISHED`, otherwise it remains empty.
	DsRecords []DsRecordResponse `pulumi:"dsRecords"`
	// The state of DS records for this domain. Used to enable or disable automatic DNSSEC.
	DsState string `pulumi:"dsState"`
	// A list of name servers that store the DNS zone for this domain. Each name server is a domain name, with Unicode domain names expressed in Punycode format. This field is automatically populated with the name servers assigned to the Google Domains DNS zone.
	NameServers []string `pulumi:"nameServers"`
}

// Configuration for using the free DNS zone provided by Google Domains as a `Registration`'s `dns_provider`. You cannot configure the DNS zone itself using the API. To configure the DNS zone, go to [Google Domains](https://domains.google/).
type GoogleDomainsDnsResponseOutput struct{ *pulumi.OutputState }

func (GoogleDomainsDnsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDomainsDnsResponse)(nil)).Elem()
}

func (o GoogleDomainsDnsResponseOutput) ToGoogleDomainsDnsResponseOutput() GoogleDomainsDnsResponseOutput {
	return o
}

func (o GoogleDomainsDnsResponseOutput) ToGoogleDomainsDnsResponseOutputWithContext(ctx context.Context) GoogleDomainsDnsResponseOutput {
	return o
}

// The list of DS records published for this domain. The list is automatically populated when `ds_state` is `DS_RECORDS_PUBLISHED`, otherwise it remains empty.
func (o GoogleDomainsDnsResponseOutput) DsRecords() DsRecordResponseArrayOutput {
	return o.ApplyT(func(v GoogleDomainsDnsResponse) []DsRecordResponse { return v.DsRecords }).(DsRecordResponseArrayOutput)
}

// The state of DS records for this domain. Used to enable or disable automatic DNSSEC.
func (o GoogleDomainsDnsResponseOutput) DsState() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleDomainsDnsResponse) string { return v.DsState }).(pulumi.StringOutput)
}

// A list of name servers that store the DNS zone for this domain. Each name server is a domain name, with Unicode domain names expressed in Punycode format. This field is automatically populated with the name servers assigned to the Google Domains DNS zone.
func (o GoogleDomainsDnsResponseOutput) NameServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GoogleDomainsDnsResponse) []string { return v.NameServers }).(pulumi.StringArrayOutput)
}

// Defines renewal, billing, and transfer settings for a `Registration`.
type ManagementSettings struct {
	// Controls whether the domain can be transferred to another registrar.
	TransferLockState *ManagementSettingsTransferLockState `pulumi:"transferLockState"`
}

// ManagementSettingsInput is an input type that accepts ManagementSettingsArgs and ManagementSettingsOutput values.
// You can construct a concrete instance of `ManagementSettingsInput` via:
//
//          ManagementSettingsArgs{...}
type ManagementSettingsInput interface {
	pulumi.Input

	ToManagementSettingsOutput() ManagementSettingsOutput
	ToManagementSettingsOutputWithContext(context.Context) ManagementSettingsOutput
}

// Defines renewal, billing, and transfer settings for a `Registration`.
type ManagementSettingsArgs struct {
	// Controls whether the domain can be transferred to another registrar.
	TransferLockState ManagementSettingsTransferLockStatePtrInput `pulumi:"transferLockState"`
}

func (ManagementSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagementSettings)(nil)).Elem()
}

func (i ManagementSettingsArgs) ToManagementSettingsOutput() ManagementSettingsOutput {
	return i.ToManagementSettingsOutputWithContext(context.Background())
}

func (i ManagementSettingsArgs) ToManagementSettingsOutputWithContext(ctx context.Context) ManagementSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementSettingsOutput)
}

func (i ManagementSettingsArgs) ToManagementSettingsPtrOutput() ManagementSettingsPtrOutput {
	return i.ToManagementSettingsPtrOutputWithContext(context.Background())
}

func (i ManagementSettingsArgs) ToManagementSettingsPtrOutputWithContext(ctx context.Context) ManagementSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementSettingsOutput).ToManagementSettingsPtrOutputWithContext(ctx)
}

// ManagementSettingsPtrInput is an input type that accepts ManagementSettingsArgs, ManagementSettingsPtr and ManagementSettingsPtrOutput values.
// You can construct a concrete instance of `ManagementSettingsPtrInput` via:
//
//          ManagementSettingsArgs{...}
//
//  or:
//
//          nil
type ManagementSettingsPtrInput interface {
	pulumi.Input

	ToManagementSettingsPtrOutput() ManagementSettingsPtrOutput
	ToManagementSettingsPtrOutputWithContext(context.Context) ManagementSettingsPtrOutput
}

type managementSettingsPtrType ManagementSettingsArgs

func ManagementSettingsPtr(v *ManagementSettingsArgs) ManagementSettingsPtrInput {
	return (*managementSettingsPtrType)(v)
}

func (*managementSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagementSettings)(nil)).Elem()
}

func (i *managementSettingsPtrType) ToManagementSettingsPtrOutput() ManagementSettingsPtrOutput {
	return i.ToManagementSettingsPtrOutputWithContext(context.Background())
}

func (i *managementSettingsPtrType) ToManagementSettingsPtrOutputWithContext(ctx context.Context) ManagementSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementSettingsPtrOutput)
}

// Defines renewal, billing, and transfer settings for a `Registration`.
type ManagementSettingsOutput struct{ *pulumi.OutputState }

func (ManagementSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagementSettings)(nil)).Elem()
}

func (o ManagementSettingsOutput) ToManagementSettingsOutput() ManagementSettingsOutput {
	return o
}

func (o ManagementSettingsOutput) ToManagementSettingsOutputWithContext(ctx context.Context) ManagementSettingsOutput {
	return o
}

func (o ManagementSettingsOutput) ToManagementSettingsPtrOutput() ManagementSettingsPtrOutput {
	return o.ToManagementSettingsPtrOutputWithContext(context.Background())
}

func (o ManagementSettingsOutput) ToManagementSettingsPtrOutputWithContext(ctx context.Context) ManagementSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagementSettings) *ManagementSettings {
		return &v
	}).(ManagementSettingsPtrOutput)
}

// Controls whether the domain can be transferred to another registrar.
func (o ManagementSettingsOutput) TransferLockState() ManagementSettingsTransferLockStatePtrOutput {
	return o.ApplyT(func(v ManagementSettings) *ManagementSettingsTransferLockState { return v.TransferLockState }).(ManagementSettingsTransferLockStatePtrOutput)
}

type ManagementSettingsPtrOutput struct{ *pulumi.OutputState }

func (ManagementSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagementSettings)(nil)).Elem()
}

func (o ManagementSettingsPtrOutput) ToManagementSettingsPtrOutput() ManagementSettingsPtrOutput {
	return o
}

func (o ManagementSettingsPtrOutput) ToManagementSettingsPtrOutputWithContext(ctx context.Context) ManagementSettingsPtrOutput {
	return o
}

func (o ManagementSettingsPtrOutput) Elem() ManagementSettingsOutput {
	return o.ApplyT(func(v *ManagementSettings) ManagementSettings {
		if v != nil {
			return *v
		}
		var ret ManagementSettings
		return ret
	}).(ManagementSettingsOutput)
}

// Controls whether the domain can be transferred to another registrar.
func (o ManagementSettingsPtrOutput) TransferLockState() ManagementSettingsTransferLockStatePtrOutput {
	return o.ApplyT(func(v *ManagementSettings) *ManagementSettingsTransferLockState {
		if v == nil {
			return nil
		}
		return v.TransferLockState
	}).(ManagementSettingsTransferLockStatePtrOutput)
}

// Defines renewal, billing, and transfer settings for a `Registration`.
type ManagementSettingsResponse struct {
	// The renewal method for this `Registration`.
	RenewalMethod string `pulumi:"renewalMethod"`
	// Controls whether the domain can be transferred to another registrar.
	TransferLockState string `pulumi:"transferLockState"`
}

// Defines renewal, billing, and transfer settings for a `Registration`.
type ManagementSettingsResponseOutput struct{ *pulumi.OutputState }

func (ManagementSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagementSettingsResponse)(nil)).Elem()
}

func (o ManagementSettingsResponseOutput) ToManagementSettingsResponseOutput() ManagementSettingsResponseOutput {
	return o
}

func (o ManagementSettingsResponseOutput) ToManagementSettingsResponseOutputWithContext(ctx context.Context) ManagementSettingsResponseOutput {
	return o
}

// The renewal method for this `Registration`.
func (o ManagementSettingsResponseOutput) RenewalMethod() pulumi.StringOutput {
	return o.ApplyT(func(v ManagementSettingsResponse) string { return v.RenewalMethod }).(pulumi.StringOutput)
}

// Controls whether the domain can be transferred to another registrar.
func (o ManagementSettingsResponseOutput) TransferLockState() pulumi.StringOutput {
	return o.ApplyT(func(v ManagementSettingsResponse) string { return v.TransferLockState }).(pulumi.StringOutput)
}

// Represents an amount of money with its currency type.
type Money struct {
	// The three-letter currency code defined in ISO 4217.
	CurrencyCode *string `pulumi:"currencyCode"`
	// Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.
	Nanos *int `pulumi:"nanos"`
	// The whole units of the amount. For example if `currencyCode` is `"USD"`, then 1 unit is one US dollar.
	Units *string `pulumi:"units"`
}

// MoneyInput is an input type that accepts MoneyArgs and MoneyOutput values.
// You can construct a concrete instance of `MoneyInput` via:
//
//          MoneyArgs{...}
type MoneyInput interface {
	pulumi.Input

	ToMoneyOutput() MoneyOutput
	ToMoneyOutputWithContext(context.Context) MoneyOutput
}

// Represents an amount of money with its currency type.
type MoneyArgs struct {
	// The three-letter currency code defined in ISO 4217.
	CurrencyCode pulumi.StringPtrInput `pulumi:"currencyCode"`
	// Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.
	Nanos pulumi.IntPtrInput `pulumi:"nanos"`
	// The whole units of the amount. For example if `currencyCode` is `"USD"`, then 1 unit is one US dollar.
	Units pulumi.StringPtrInput `pulumi:"units"`
}

func (MoneyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Money)(nil)).Elem()
}

func (i MoneyArgs) ToMoneyOutput() MoneyOutput {
	return i.ToMoneyOutputWithContext(context.Background())
}

func (i MoneyArgs) ToMoneyOutputWithContext(ctx context.Context) MoneyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MoneyOutput)
}

// Represents an amount of money with its currency type.
type MoneyOutput struct{ *pulumi.OutputState }

func (MoneyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Money)(nil)).Elem()
}

func (o MoneyOutput) ToMoneyOutput() MoneyOutput {
	return o
}

func (o MoneyOutput) ToMoneyOutputWithContext(ctx context.Context) MoneyOutput {
	return o
}

// The three-letter currency code defined in ISO 4217.
func (o MoneyOutput) CurrencyCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Money) *string { return v.CurrencyCode }).(pulumi.StringPtrOutput)
}

// Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.
func (o MoneyOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Money) *int { return v.Nanos }).(pulumi.IntPtrOutput)
}

// The whole units of the amount. For example if `currencyCode` is `"USD"`, then 1 unit is one US dollar.
func (o MoneyOutput) Units() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Money) *string { return v.Units }).(pulumi.StringPtrOutput)
}

// Represents a postal address, e.g. for postal delivery or payments addresses. Given a postal address, a postal service can deliver items to a premise, P.O. Box or similar. It is not intended to model geographical locations (roads, towns, mountains). In typical usage an address would be created via user input or from importing existing data, depending on the type of process. Advice on address input / editing: - Use an internationalization-ready address widget such as https://github.com/google/libaddressinput) - Users should not be presented with UI elements for input or editing of fields outside countries where that field is used. For more guidance on how to use this schema, please see: https://support.google.com/business/answer/6397478
type PostalAddress struct {
	// Unstructured address lines describing the lower levels of an address. Because values in address_lines do not have type information and may sometimes contain multiple values in a single field (e.g. "Austin, TX"), it is important that the line order is clear. The order of address lines should be "envelope order" for the country/region of the address. In places where this can vary (e.g. Japan), address_language is used to make it explicit (e.g. "ja" for large-to-small ordering and "ja-Latn" or "en" for small-to-large). This way, the most specific line of an address can be selected based on the language. The minimum permitted structural representation of an address consists of a region_code with all remaining information placed in the address_lines. It would be possible to format such an address very approximately without geocoding, but no semantic reasoning could be made about any of the address components until it was at least partially resolved. Creating an address only containing a region_code and address_lines, and then geocoding is the recommended way to handle completely unstructured addresses (as opposed to guessing which parts of the address should be localities or administrative areas).
	AddressLines []string `pulumi:"addressLines"`
	// Optional. Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state, a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community (e.g. "Barcelona" and not "Catalonia"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland this should be left unpopulated.
	AdministrativeArea *string `pulumi:"administrativeArea"`
	// Optional. BCP-47 language code of the contents of this address (if known). This is often the UI language of the input form or is expected to match one of the languages used in the address' country/region, or their transliterated equivalents. This can affect formatting in certain countries, but is not critical to the correctness of the data and will never affect any validation or other non-formatting related operations. If this value is not known, it should be omitted (rather than specifying a possibly incorrect default). Examples: "zh-Hant", "ja", "ja-Latn", "en".
	LanguageCode *string `pulumi:"languageCode"`
	// Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use address_lines.
	Locality *string `pulumi:"locality"`
	// Optional. The name of the organization at the address.
	Organization *string `pulumi:"organization"`
	// Optional. Postal code of the address. Not all countries use or require postal codes to be present, but where they are used, they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.).
	PostalCode *string `pulumi:"postalCode"`
	// Optional. The recipient at the address. This field may, under certain circumstances, contain multiline information. For example, it might contain "care of" information.
	Recipients []string `pulumi:"recipients"`
	// CLDR region code of the country/region of the address. This is never inferred and it is up to the user to ensure the value is correct. See https://cldr.unicode.org/ and https://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: "CH" for Switzerland.
	RegionCode string `pulumi:"regionCode"`
	// The schema revision of the `PostalAddress`. This must be set to 0, which is the latest revision. All new revisions **must** be backward compatible with old revisions.
	Revision *int `pulumi:"revision"`
	// Optional. Additional, country-specific, sorting code. This is not used in most regions. Where it is used, the value is either a string like "CEDEX", optionally followed by a number (e.g. "CEDEX 7"), or just a number alone, representing the "sector code" (Jamaica), "delivery area indicator" (Malawi) or "post office indicator" (e.g. Côte d'Ivoire).
	SortingCode *string `pulumi:"sortingCode"`
	// Optional. Sublocality of the address. For example, this can be neighborhoods, boroughs, districts.
	Sublocality *string `pulumi:"sublocality"`
}

// PostalAddressInput is an input type that accepts PostalAddressArgs and PostalAddressOutput values.
// You can construct a concrete instance of `PostalAddressInput` via:
//
//          PostalAddressArgs{...}
type PostalAddressInput interface {
	pulumi.Input

	ToPostalAddressOutput() PostalAddressOutput
	ToPostalAddressOutputWithContext(context.Context) PostalAddressOutput
}

// Represents a postal address, e.g. for postal delivery or payments addresses. Given a postal address, a postal service can deliver items to a premise, P.O. Box or similar. It is not intended to model geographical locations (roads, towns, mountains). In typical usage an address would be created via user input or from importing existing data, depending on the type of process. Advice on address input / editing: - Use an internationalization-ready address widget such as https://github.com/google/libaddressinput) - Users should not be presented with UI elements for input or editing of fields outside countries where that field is used. For more guidance on how to use this schema, please see: https://support.google.com/business/answer/6397478
type PostalAddressArgs struct {
	// Unstructured address lines describing the lower levels of an address. Because values in address_lines do not have type information and may sometimes contain multiple values in a single field (e.g. "Austin, TX"), it is important that the line order is clear. The order of address lines should be "envelope order" for the country/region of the address. In places where this can vary (e.g. Japan), address_language is used to make it explicit (e.g. "ja" for large-to-small ordering and "ja-Latn" or "en" for small-to-large). This way, the most specific line of an address can be selected based on the language. The minimum permitted structural representation of an address consists of a region_code with all remaining information placed in the address_lines. It would be possible to format such an address very approximately without geocoding, but no semantic reasoning could be made about any of the address components until it was at least partially resolved. Creating an address only containing a region_code and address_lines, and then geocoding is the recommended way to handle completely unstructured addresses (as opposed to guessing which parts of the address should be localities or administrative areas).
	AddressLines pulumi.StringArrayInput `pulumi:"addressLines"`
	// Optional. Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state, a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community (e.g. "Barcelona" and not "Catalonia"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland this should be left unpopulated.
	AdministrativeArea pulumi.StringPtrInput `pulumi:"administrativeArea"`
	// Optional. BCP-47 language code of the contents of this address (if known). This is often the UI language of the input form or is expected to match one of the languages used in the address' country/region, or their transliterated equivalents. This can affect formatting in certain countries, but is not critical to the correctness of the data and will never affect any validation or other non-formatting related operations. If this value is not known, it should be omitted (rather than specifying a possibly incorrect default). Examples: "zh-Hant", "ja", "ja-Latn", "en".
	LanguageCode pulumi.StringPtrInput `pulumi:"languageCode"`
	// Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use address_lines.
	Locality pulumi.StringPtrInput `pulumi:"locality"`
	// Optional. The name of the organization at the address.
	Organization pulumi.StringPtrInput `pulumi:"organization"`
	// Optional. Postal code of the address. Not all countries use or require postal codes to be present, but where they are used, they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.).
	PostalCode pulumi.StringPtrInput `pulumi:"postalCode"`
	// Optional. The recipient at the address. This field may, under certain circumstances, contain multiline information. For example, it might contain "care of" information.
	Recipients pulumi.StringArrayInput `pulumi:"recipients"`
	// CLDR region code of the country/region of the address. This is never inferred and it is up to the user to ensure the value is correct. See https://cldr.unicode.org/ and https://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: "CH" for Switzerland.
	RegionCode pulumi.StringInput `pulumi:"regionCode"`
	// The schema revision of the `PostalAddress`. This must be set to 0, which is the latest revision. All new revisions **must** be backward compatible with old revisions.
	Revision pulumi.IntPtrInput `pulumi:"revision"`
	// Optional. Additional, country-specific, sorting code. This is not used in most regions. Where it is used, the value is either a string like "CEDEX", optionally followed by a number (e.g. "CEDEX 7"), or just a number alone, representing the "sector code" (Jamaica), "delivery area indicator" (Malawi) or "post office indicator" (e.g. Côte d'Ivoire).
	SortingCode pulumi.StringPtrInput `pulumi:"sortingCode"`
	// Optional. Sublocality of the address. For example, this can be neighborhoods, boroughs, districts.
	Sublocality pulumi.StringPtrInput `pulumi:"sublocality"`
}

func (PostalAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostalAddress)(nil)).Elem()
}

func (i PostalAddressArgs) ToPostalAddressOutput() PostalAddressOutput {
	return i.ToPostalAddressOutputWithContext(context.Background())
}

func (i PostalAddressArgs) ToPostalAddressOutputWithContext(ctx context.Context) PostalAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostalAddressOutput)
}

// Represents a postal address, e.g. for postal delivery or payments addresses. Given a postal address, a postal service can deliver items to a premise, P.O. Box or similar. It is not intended to model geographical locations (roads, towns, mountains). In typical usage an address would be created via user input or from importing existing data, depending on the type of process. Advice on address input / editing: - Use an internationalization-ready address widget such as https://github.com/google/libaddressinput) - Users should not be presented with UI elements for input or editing of fields outside countries where that field is used. For more guidance on how to use this schema, please see: https://support.google.com/business/answer/6397478
type PostalAddressOutput struct{ *pulumi.OutputState }

func (PostalAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostalAddress)(nil)).Elem()
}

func (o PostalAddressOutput) ToPostalAddressOutput() PostalAddressOutput {
	return o
}

func (o PostalAddressOutput) ToPostalAddressOutputWithContext(ctx context.Context) PostalAddressOutput {
	return o
}

// Unstructured address lines describing the lower levels of an address. Because values in address_lines do not have type information and may sometimes contain multiple values in a single field (e.g. "Austin, TX"), it is important that the line order is clear. The order of address lines should be "envelope order" for the country/region of the address. In places where this can vary (e.g. Japan), address_language is used to make it explicit (e.g. "ja" for large-to-small ordering and "ja-Latn" or "en" for small-to-large). This way, the most specific line of an address can be selected based on the language. The minimum permitted structural representation of an address consists of a region_code with all remaining information placed in the address_lines. It would be possible to format such an address very approximately without geocoding, but no semantic reasoning could be made about any of the address components until it was at least partially resolved. Creating an address only containing a region_code and address_lines, and then geocoding is the recommended way to handle completely unstructured addresses (as opposed to guessing which parts of the address should be localities or administrative areas).
func (o PostalAddressOutput) AddressLines() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PostalAddress) []string { return v.AddressLines }).(pulumi.StringArrayOutput)
}

// Optional. Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state, a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community (e.g. "Barcelona" and not "Catalonia"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland this should be left unpopulated.
func (o PostalAddressOutput) AdministrativeArea() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostalAddress) *string { return v.AdministrativeArea }).(pulumi.StringPtrOutput)
}

// Optional. BCP-47 language code of the contents of this address (if known). This is often the UI language of the input form or is expected to match one of the languages used in the address' country/region, or their transliterated equivalents. This can affect formatting in certain countries, but is not critical to the correctness of the data and will never affect any validation or other non-formatting related operations. If this value is not known, it should be omitted (rather than specifying a possibly incorrect default). Examples: "zh-Hant", "ja", "ja-Latn", "en".
func (o PostalAddressOutput) LanguageCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostalAddress) *string { return v.LanguageCode }).(pulumi.StringPtrOutput)
}

// Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use address_lines.
func (o PostalAddressOutput) Locality() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostalAddress) *string { return v.Locality }).(pulumi.StringPtrOutput)
}

// Optional. The name of the organization at the address.
func (o PostalAddressOutput) Organization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostalAddress) *string { return v.Organization }).(pulumi.StringPtrOutput)
}

// Optional. Postal code of the address. Not all countries use or require postal codes to be present, but where they are used, they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.).
func (o PostalAddressOutput) PostalCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostalAddress) *string { return v.PostalCode }).(pulumi.StringPtrOutput)
}

// Optional. The recipient at the address. This field may, under certain circumstances, contain multiline information. For example, it might contain "care of" information.
func (o PostalAddressOutput) Recipients() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PostalAddress) []string { return v.Recipients }).(pulumi.StringArrayOutput)
}

// CLDR region code of the country/region of the address. This is never inferred and it is up to the user to ensure the value is correct. See https://cldr.unicode.org/ and https://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: "CH" for Switzerland.
func (o PostalAddressOutput) RegionCode() pulumi.StringOutput {
	return o.ApplyT(func(v PostalAddress) string { return v.RegionCode }).(pulumi.StringOutput)
}

// The schema revision of the `PostalAddress`. This must be set to 0, which is the latest revision. All new revisions **must** be backward compatible with old revisions.
func (o PostalAddressOutput) Revision() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostalAddress) *int { return v.Revision }).(pulumi.IntPtrOutput)
}

// Optional. Additional, country-specific, sorting code. This is not used in most regions. Where it is used, the value is either a string like "CEDEX", optionally followed by a number (e.g. "CEDEX 7"), or just a number alone, representing the "sector code" (Jamaica), "delivery area indicator" (Malawi) or "post office indicator" (e.g. Côte d'Ivoire).
func (o PostalAddressOutput) SortingCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostalAddress) *string { return v.SortingCode }).(pulumi.StringPtrOutput)
}

// Optional. Sublocality of the address. For example, this can be neighborhoods, boroughs, districts.
func (o PostalAddressOutput) Sublocality() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostalAddress) *string { return v.Sublocality }).(pulumi.StringPtrOutput)
}

// Represents a postal address, e.g. for postal delivery or payments addresses. Given a postal address, a postal service can deliver items to a premise, P.O. Box or similar. It is not intended to model geographical locations (roads, towns, mountains). In typical usage an address would be created via user input or from importing existing data, depending on the type of process. Advice on address input / editing: - Use an internationalization-ready address widget such as https://github.com/google/libaddressinput) - Users should not be presented with UI elements for input or editing of fields outside countries where that field is used. For more guidance on how to use this schema, please see: https://support.google.com/business/answer/6397478
type PostalAddressResponse struct {
	// Unstructured address lines describing the lower levels of an address. Because values in address_lines do not have type information and may sometimes contain multiple values in a single field (e.g. "Austin, TX"), it is important that the line order is clear. The order of address lines should be "envelope order" for the country/region of the address. In places where this can vary (e.g. Japan), address_language is used to make it explicit (e.g. "ja" for large-to-small ordering and "ja-Latn" or "en" for small-to-large). This way, the most specific line of an address can be selected based on the language. The minimum permitted structural representation of an address consists of a region_code with all remaining information placed in the address_lines. It would be possible to format such an address very approximately without geocoding, but no semantic reasoning could be made about any of the address components until it was at least partially resolved. Creating an address only containing a region_code and address_lines, and then geocoding is the recommended way to handle completely unstructured addresses (as opposed to guessing which parts of the address should be localities or administrative areas).
	AddressLines []string `pulumi:"addressLines"`
	// Optional. Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state, a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community (e.g. "Barcelona" and not "Catalonia"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland this should be left unpopulated.
	AdministrativeArea string `pulumi:"administrativeArea"`
	// Optional. BCP-47 language code of the contents of this address (if known). This is often the UI language of the input form or is expected to match one of the languages used in the address' country/region, or their transliterated equivalents. This can affect formatting in certain countries, but is not critical to the correctness of the data and will never affect any validation or other non-formatting related operations. If this value is not known, it should be omitted (rather than specifying a possibly incorrect default). Examples: "zh-Hant", "ja", "ja-Latn", "en".
	LanguageCode string `pulumi:"languageCode"`
	// Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use address_lines.
	Locality string `pulumi:"locality"`
	// Optional. The name of the organization at the address.
	Organization string `pulumi:"organization"`
	// Optional. Postal code of the address. Not all countries use or require postal codes to be present, but where they are used, they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.).
	PostalCode string `pulumi:"postalCode"`
	// Optional. The recipient at the address. This field may, under certain circumstances, contain multiline information. For example, it might contain "care of" information.
	Recipients []string `pulumi:"recipients"`
	// CLDR region code of the country/region of the address. This is never inferred and it is up to the user to ensure the value is correct. See https://cldr.unicode.org/ and https://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: "CH" for Switzerland.
	RegionCode string `pulumi:"regionCode"`
	// The schema revision of the `PostalAddress`. This must be set to 0, which is the latest revision. All new revisions **must** be backward compatible with old revisions.
	Revision int `pulumi:"revision"`
	// Optional. Additional, country-specific, sorting code. This is not used in most regions. Where it is used, the value is either a string like "CEDEX", optionally followed by a number (e.g. "CEDEX 7"), or just a number alone, representing the "sector code" (Jamaica), "delivery area indicator" (Malawi) or "post office indicator" (e.g. Côte d'Ivoire).
	SortingCode string `pulumi:"sortingCode"`
	// Optional. Sublocality of the address. For example, this can be neighborhoods, boroughs, districts.
	Sublocality string `pulumi:"sublocality"`
}

// Represents a postal address, e.g. for postal delivery or payments addresses. Given a postal address, a postal service can deliver items to a premise, P.O. Box or similar. It is not intended to model geographical locations (roads, towns, mountains). In typical usage an address would be created via user input or from importing existing data, depending on the type of process. Advice on address input / editing: - Use an internationalization-ready address widget such as https://github.com/google/libaddressinput) - Users should not be presented with UI elements for input or editing of fields outside countries where that field is used. For more guidance on how to use this schema, please see: https://support.google.com/business/answer/6397478
type PostalAddressResponseOutput struct{ *pulumi.OutputState }

func (PostalAddressResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostalAddressResponse)(nil)).Elem()
}

func (o PostalAddressResponseOutput) ToPostalAddressResponseOutput() PostalAddressResponseOutput {
	return o
}

func (o PostalAddressResponseOutput) ToPostalAddressResponseOutputWithContext(ctx context.Context) PostalAddressResponseOutput {
	return o
}

// Unstructured address lines describing the lower levels of an address. Because values in address_lines do not have type information and may sometimes contain multiple values in a single field (e.g. "Austin, TX"), it is important that the line order is clear. The order of address lines should be "envelope order" for the country/region of the address. In places where this can vary (e.g. Japan), address_language is used to make it explicit (e.g. "ja" for large-to-small ordering and "ja-Latn" or "en" for small-to-large). This way, the most specific line of an address can be selected based on the language. The minimum permitted structural representation of an address consists of a region_code with all remaining information placed in the address_lines. It would be possible to format such an address very approximately without geocoding, but no semantic reasoning could be made about any of the address components until it was at least partially resolved. Creating an address only containing a region_code and address_lines, and then geocoding is the recommended way to handle completely unstructured addresses (as opposed to guessing which parts of the address should be localities or administrative areas).
func (o PostalAddressResponseOutput) AddressLines() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PostalAddressResponse) []string { return v.AddressLines }).(pulumi.StringArrayOutput)
}

// Optional. Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state, a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community (e.g. "Barcelona" and not "Catalonia"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland this should be left unpopulated.
func (o PostalAddressResponseOutput) AdministrativeArea() pulumi.StringOutput {
	return o.ApplyT(func(v PostalAddressResponse) string { return v.AdministrativeArea }).(pulumi.StringOutput)
}

// Optional. BCP-47 language code of the contents of this address (if known). This is often the UI language of the input form or is expected to match one of the languages used in the address' country/region, or their transliterated equivalents. This can affect formatting in certain countries, but is not critical to the correctness of the data and will never affect any validation or other non-formatting related operations. If this value is not known, it should be omitted (rather than specifying a possibly incorrect default). Examples: "zh-Hant", "ja", "ja-Latn", "en".
func (o PostalAddressResponseOutput) LanguageCode() pulumi.StringOutput {
	return o.ApplyT(func(v PostalAddressResponse) string { return v.LanguageCode }).(pulumi.StringOutput)
}

// Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use address_lines.
func (o PostalAddressResponseOutput) Locality() pulumi.StringOutput {
	return o.ApplyT(func(v PostalAddressResponse) string { return v.Locality }).(pulumi.StringOutput)
}

// Optional. The name of the organization at the address.
func (o PostalAddressResponseOutput) Organization() pulumi.StringOutput {
	return o.ApplyT(func(v PostalAddressResponse) string { return v.Organization }).(pulumi.StringOutput)
}

// Optional. Postal code of the address. Not all countries use or require postal codes to be present, but where they are used, they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.).
func (o PostalAddressResponseOutput) PostalCode() pulumi.StringOutput {
	return o.ApplyT(func(v PostalAddressResponse) string { return v.PostalCode }).(pulumi.StringOutput)
}

// Optional. The recipient at the address. This field may, under certain circumstances, contain multiline information. For example, it might contain "care of" information.
func (o PostalAddressResponseOutput) Recipients() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PostalAddressResponse) []string { return v.Recipients }).(pulumi.StringArrayOutput)
}

// CLDR region code of the country/region of the address. This is never inferred and it is up to the user to ensure the value is correct. See https://cldr.unicode.org/ and https://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: "CH" for Switzerland.
func (o PostalAddressResponseOutput) RegionCode() pulumi.StringOutput {
	return o.ApplyT(func(v PostalAddressResponse) string { return v.RegionCode }).(pulumi.StringOutput)
}

// The schema revision of the `PostalAddress`. This must be set to 0, which is the latest revision. All new revisions **must** be backward compatible with old revisions.
func (o PostalAddressResponseOutput) Revision() pulumi.IntOutput {
	return o.ApplyT(func(v PostalAddressResponse) int { return v.Revision }).(pulumi.IntOutput)
}

// Optional. Additional, country-specific, sorting code. This is not used in most regions. Where it is used, the value is either a string like "CEDEX", optionally followed by a number (e.g. "CEDEX 7"), or just a number alone, representing the "sector code" (Jamaica), "delivery area indicator" (Malawi) or "post office indicator" (e.g. Côte d'Ivoire).
func (o PostalAddressResponseOutput) SortingCode() pulumi.StringOutput {
	return o.ApplyT(func(v PostalAddressResponse) string { return v.SortingCode }).(pulumi.StringOutput)
}

// Optional. Sublocality of the address. For example, this can be neighborhoods, boroughs, districts.
func (o PostalAddressResponseOutput) Sublocality() pulumi.StringOutput {
	return o.ApplyT(func(v PostalAddressResponse) string { return v.Sublocality }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigInput)(nil)).Elem(), AuditConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigArrayInput)(nil)).Elem(), AuditConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigInput)(nil)).Elem(), AuditLogConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigArrayInput)(nil)).Elem(), AuditLogConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingInput)(nil)).Elem(), BindingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingArrayInput)(nil)).Elem(), BindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactInput)(nil)).Elem(), ContactArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactSettingsInput)(nil)).Elem(), ContactSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomDnsInput)(nil)).Elem(), CustomDnsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomDnsPtrInput)(nil)).Elem(), CustomDnsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsSettingsInput)(nil)).Elem(), DnsSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsSettingsPtrInput)(nil)).Elem(), DnsSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DsRecordInput)(nil)).Elem(), DsRecordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DsRecordArrayInput)(nil)).Elem(), DsRecordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprPtrInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlueRecordInput)(nil)).Elem(), GlueRecordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlueRecordArrayInput)(nil)).Elem(), GlueRecordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleDomainsDnsInput)(nil)).Elem(), GoogleDomainsDnsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleDomainsDnsPtrInput)(nil)).Elem(), GoogleDomainsDnsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagementSettingsInput)(nil)).Elem(), ManagementSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagementSettingsPtrInput)(nil)).Elem(), ManagementSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MoneyInput)(nil)).Elem(), MoneyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostalAddressInput)(nil)).Elem(), PostalAddressArgs{})
	pulumi.RegisterOutputType(AuditConfigOutput{})
	pulumi.RegisterOutputType(AuditConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigOutput{})
	pulumi.RegisterOutputType(AuditLogConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(BindingResponseOutput{})
	pulumi.RegisterOutputType(BindingResponseArrayOutput{})
	pulumi.RegisterOutputType(ContactOutput{})
	pulumi.RegisterOutputType(ContactResponseOutput{})
	pulumi.RegisterOutputType(ContactSettingsOutput{})
	pulumi.RegisterOutputType(ContactSettingsResponseOutput{})
	pulumi.RegisterOutputType(CustomDnsOutput{})
	pulumi.RegisterOutputType(CustomDnsPtrOutput{})
	pulumi.RegisterOutputType(CustomDnsResponseOutput{})
	pulumi.RegisterOutputType(DnsSettingsOutput{})
	pulumi.RegisterOutputType(DnsSettingsPtrOutput{})
	pulumi.RegisterOutputType(DnsSettingsResponseOutput{})
	pulumi.RegisterOutputType(DsRecordOutput{})
	pulumi.RegisterOutputType(DsRecordArrayOutput{})
	pulumi.RegisterOutputType(DsRecordResponseOutput{})
	pulumi.RegisterOutputType(DsRecordResponseArrayOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(ExprResponseOutput{})
	pulumi.RegisterOutputType(GlueRecordOutput{})
	pulumi.RegisterOutputType(GlueRecordArrayOutput{})
	pulumi.RegisterOutputType(GlueRecordResponseOutput{})
	pulumi.RegisterOutputType(GlueRecordResponseArrayOutput{})
	pulumi.RegisterOutputType(GoogleDomainsDnsOutput{})
	pulumi.RegisterOutputType(GoogleDomainsDnsPtrOutput{})
	pulumi.RegisterOutputType(GoogleDomainsDnsResponseOutput{})
	pulumi.RegisterOutputType(ManagementSettingsOutput{})
	pulumi.RegisterOutputType(ManagementSettingsPtrOutput{})
	pulumi.RegisterOutputType(ManagementSettingsResponseOutput{})
	pulumi.RegisterOutputType(MoneyOutput{})
	pulumi.RegisterOutputType(PostalAddressOutput{})
	pulumi.RegisterOutputType(PostalAddressResponseOutput{})
}
