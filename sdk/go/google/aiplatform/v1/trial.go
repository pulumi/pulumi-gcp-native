// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Adds a user provided Trial to a Study.
// Auto-naming is currently not supported for this resource.
type Trial struct {
	pulumi.CustomResourceState

	// The identifier of the client that originally requested this Trial. Each client is identified by a unique client_id. When a client asks for a suggestion, Vertex AI Vizier will assign it a Trial. The client should evaluate the Trial, complete it, and report back to Vertex AI Vizier. If suggestion is asked again by same client_id before the Trial is completed, the same Trial will be returned. Multiple clients with different client_ids can ask for suggestions simultaneously, each of them will get their own Trial.
	ClientId pulumi.StringOutput `pulumi:"clientId"`
	// The CustomJob name linked to the Trial. It's set for a HyperparameterTuningJob's Trial.
	CustomJob pulumi.StringOutput `pulumi:"customJob"`
	// Time when the Trial's status changed to `SUCCEEDED` or `INFEASIBLE`.
	EndTime pulumi.StringOutput `pulumi:"endTime"`
	// The final measurement containing the objective value.
	FinalMeasurement GoogleCloudAiplatformV1MeasurementResponseOutput `pulumi:"finalMeasurement"`
	// A human readable string describing why the Trial is infeasible. This is set only if Trial state is `INFEASIBLE`.
	InfeasibleReason pulumi.StringOutput `pulumi:"infeasibleReason"`
	Location         pulumi.StringOutput `pulumi:"location"`
	// A list of measurements that are strictly lexicographically ordered by their induced tuples (steps, elapsed_duration). These are used for early stopping computations.
	Measurements GoogleCloudAiplatformV1MeasurementResponseArrayOutput `pulumi:"measurements"`
	// Resource name of the Trial assigned by the service.
	Name pulumi.StringOutput `pulumi:"name"`
	// The parameters of the Trial.
	Parameters GoogleCloudAiplatformV1TrialParameterResponseArrayOutput `pulumi:"parameters"`
	Project    pulumi.StringOutput                                      `pulumi:"project"`
	// Time when the Trial was started.
	StartTime pulumi.StringOutput `pulumi:"startTime"`
	// The detailed state of the Trial.
	State   pulumi.StringOutput `pulumi:"state"`
	StudyId pulumi.StringOutput `pulumi:"studyId"`
	// URIs for accessing [interactive shells](https://cloud.google.com/vertex-ai/docs/training/monitor-debug-interactive-shell) (one URI for each training node). Only available if this trial is part of a HyperparameterTuningJob and the job's trial_job_spec.enable_web_access field is `true`. The keys are names of each node used for the trial; for example, `workerpool0-0` for the primary node, `workerpool1-0` for the first node in the second worker pool, and `workerpool1-1` for the second node in the second worker pool. The values are the URIs for each node's interactive shell.
	WebAccessUris pulumi.StringMapOutput `pulumi:"webAccessUris"`
}

// NewTrial registers a new resource with the given unique name, arguments, and options.
func NewTrial(ctx *pulumi.Context,
	name string, args *TrialArgs, opts ...pulumi.ResourceOption) (*Trial, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.StudyId == nil {
		return nil, errors.New("invalid value for required argument 'StudyId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"location",
		"project",
		"studyId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Trial
	err := ctx.RegisterResource("google-native:aiplatform/v1:Trial", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTrial gets an existing Trial resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTrial(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TrialState, opts ...pulumi.ResourceOption) (*Trial, error) {
	var resource Trial
	err := ctx.ReadResource("google-native:aiplatform/v1:Trial", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Trial resources.
type trialState struct {
}

type TrialState struct {
}

func (TrialState) ElementType() reflect.Type {
	return reflect.TypeOf((*trialState)(nil)).Elem()
}

type trialArgs struct {
	Location *string `pulumi:"location"`
	Project  *string `pulumi:"project"`
	StudyId  string  `pulumi:"studyId"`
}

// The set of arguments for constructing a Trial resource.
type TrialArgs struct {
	Location pulumi.StringPtrInput
	Project  pulumi.StringPtrInput
	StudyId  pulumi.StringInput
}

func (TrialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*trialArgs)(nil)).Elem()
}

type TrialInput interface {
	pulumi.Input

	ToTrialOutput() TrialOutput
	ToTrialOutputWithContext(ctx context.Context) TrialOutput
}

func (*Trial) ElementType() reflect.Type {
	return reflect.TypeOf((**Trial)(nil)).Elem()
}

func (i *Trial) ToTrialOutput() TrialOutput {
	return i.ToTrialOutputWithContext(context.Background())
}

func (i *Trial) ToTrialOutputWithContext(ctx context.Context) TrialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrialOutput)
}

func (i *Trial) ToOutput(ctx context.Context) pulumix.Output[*Trial] {
	return pulumix.Output[*Trial]{
		OutputState: i.ToTrialOutputWithContext(ctx).OutputState,
	}
}

type TrialOutput struct{ *pulumi.OutputState }

func (TrialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Trial)(nil)).Elem()
}

func (o TrialOutput) ToTrialOutput() TrialOutput {
	return o
}

func (o TrialOutput) ToTrialOutputWithContext(ctx context.Context) TrialOutput {
	return o
}

func (o TrialOutput) ToOutput(ctx context.Context) pulumix.Output[*Trial] {
	return pulumix.Output[*Trial]{
		OutputState: o.OutputState,
	}
}

// The identifier of the client that originally requested this Trial. Each client is identified by a unique client_id. When a client asks for a suggestion, Vertex AI Vizier will assign it a Trial. The client should evaluate the Trial, complete it, and report back to Vertex AI Vizier. If suggestion is asked again by same client_id before the Trial is completed, the same Trial will be returned. Multiple clients with different client_ids can ask for suggestions simultaneously, each of them will get their own Trial.
func (o TrialOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v *Trial) pulumi.StringOutput { return v.ClientId }).(pulumi.StringOutput)
}

// The CustomJob name linked to the Trial. It's set for a HyperparameterTuningJob's Trial.
func (o TrialOutput) CustomJob() pulumi.StringOutput {
	return o.ApplyT(func(v *Trial) pulumi.StringOutput { return v.CustomJob }).(pulumi.StringOutput)
}

// Time when the Trial's status changed to `SUCCEEDED` or `INFEASIBLE`.
func (o TrialOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Trial) pulumi.StringOutput { return v.EndTime }).(pulumi.StringOutput)
}

// The final measurement containing the objective value.
func (o TrialOutput) FinalMeasurement() GoogleCloudAiplatformV1MeasurementResponseOutput {
	return o.ApplyT(func(v *Trial) GoogleCloudAiplatformV1MeasurementResponseOutput { return v.FinalMeasurement }).(GoogleCloudAiplatformV1MeasurementResponseOutput)
}

// A human readable string describing why the Trial is infeasible. This is set only if Trial state is `INFEASIBLE`.
func (o TrialOutput) InfeasibleReason() pulumi.StringOutput {
	return o.ApplyT(func(v *Trial) pulumi.StringOutput { return v.InfeasibleReason }).(pulumi.StringOutput)
}

func (o TrialOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Trial) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// A list of measurements that are strictly lexicographically ordered by their induced tuples (steps, elapsed_duration). These are used for early stopping computations.
func (o TrialOutput) Measurements() GoogleCloudAiplatformV1MeasurementResponseArrayOutput {
	return o.ApplyT(func(v *Trial) GoogleCloudAiplatformV1MeasurementResponseArrayOutput { return v.Measurements }).(GoogleCloudAiplatformV1MeasurementResponseArrayOutput)
}

// Resource name of the Trial assigned by the service.
func (o TrialOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Trial) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The parameters of the Trial.
func (o TrialOutput) Parameters() GoogleCloudAiplatformV1TrialParameterResponseArrayOutput {
	return o.ApplyT(func(v *Trial) GoogleCloudAiplatformV1TrialParameterResponseArrayOutput { return v.Parameters }).(GoogleCloudAiplatformV1TrialParameterResponseArrayOutput)
}

func (o TrialOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Trial) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Time when the Trial was started.
func (o TrialOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Trial) pulumi.StringOutput { return v.StartTime }).(pulumi.StringOutput)
}

// The detailed state of the Trial.
func (o TrialOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Trial) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

func (o TrialOutput) StudyId() pulumi.StringOutput {
	return o.ApplyT(func(v *Trial) pulumi.StringOutput { return v.StudyId }).(pulumi.StringOutput)
}

// URIs for accessing [interactive shells](https://cloud.google.com/vertex-ai/docs/training/monitor-debug-interactive-shell) (one URI for each training node). Only available if this trial is part of a HyperparameterTuningJob and the job's trial_job_spec.enable_web_access field is `true`. The keys are names of each node used for the trial; for example, `workerpool0-0` for the primary node, `workerpool1-0` for the first node in the second worker pool, and `workerpool1-1` for the second node in the second worker pool. The values are the URIs for each node's interactive shell.
func (o TrialOutput) WebAccessUris() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Trial) pulumi.StringMapOutput { return v.WebAccessUris }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TrialInput)(nil)).Elem(), &Trial{})
	pulumi.RegisterOutputType(TrialOutput{})
}
