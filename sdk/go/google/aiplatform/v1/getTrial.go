// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets a Trial.
func LookupTrial(ctx *pulumi.Context, args *LookupTrialArgs, opts ...pulumi.InvokeOption) (*LookupTrialResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTrialResult
	err := ctx.Invoke("google-native:aiplatform/v1:getTrial", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupTrialArgs struct {
	Location string  `pulumi:"location"`
	Project  *string `pulumi:"project"`
	StudyId  string  `pulumi:"studyId"`
	TrialId  string  `pulumi:"trialId"`
}

type LookupTrialResult struct {
	// The identifier of the client that originally requested this Trial. Each client is identified by a unique client_id. When a client asks for a suggestion, Vertex AI Vizier will assign it a Trial. The client should evaluate the Trial, complete it, and report back to Vertex AI Vizier. If suggestion is asked again by same client_id before the Trial is completed, the same Trial will be returned. Multiple clients with different client_ids can ask for suggestions simultaneously, each of them will get their own Trial.
	ClientId string `pulumi:"clientId"`
	// The CustomJob name linked to the Trial. It's set for a HyperparameterTuningJob's Trial.
	CustomJob string `pulumi:"customJob"`
	// Time when the Trial's status changed to `SUCCEEDED` or `INFEASIBLE`.
	EndTime string `pulumi:"endTime"`
	// The final measurement containing the objective value.
	FinalMeasurement GoogleCloudAiplatformV1MeasurementResponse `pulumi:"finalMeasurement"`
	// A human readable string describing why the Trial is infeasible. This is set only if Trial state is `INFEASIBLE`.
	InfeasibleReason string `pulumi:"infeasibleReason"`
	// A list of measurements that are strictly lexicographically ordered by their induced tuples (steps, elapsed_duration). These are used for early stopping computations.
	Measurements []GoogleCloudAiplatformV1MeasurementResponse `pulumi:"measurements"`
	// Resource name of the Trial assigned by the service.
	Name string `pulumi:"name"`
	// The parameters of the Trial.
	Parameters []GoogleCloudAiplatformV1TrialParameterResponse `pulumi:"parameters"`
	// Time when the Trial was started.
	StartTime string `pulumi:"startTime"`
	// The detailed state of the Trial.
	State string `pulumi:"state"`
	// URIs for accessing [interactive shells](https://cloud.google.com/vertex-ai/docs/training/monitor-debug-interactive-shell) (one URI for each training node). Only available if this trial is part of a HyperparameterTuningJob and the job's trial_job_spec.enable_web_access field is `true`. The keys are names of each node used for the trial; for example, `workerpool0-0` for the primary node, `workerpool1-0` for the first node in the second worker pool, and `workerpool1-1` for the second node in the second worker pool. The values are the URIs for each node's interactive shell.
	WebAccessUris map[string]string `pulumi:"webAccessUris"`
}

func LookupTrialOutput(ctx *pulumi.Context, args LookupTrialOutputArgs, opts ...pulumi.InvokeOption) LookupTrialResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupTrialResult, error) {
			args := v.(LookupTrialArgs)
			r, err := LookupTrial(ctx, &args, opts...)
			var s LookupTrialResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupTrialResultOutput)
}

type LookupTrialOutputArgs struct {
	Location pulumi.StringInput    `pulumi:"location"`
	Project  pulumi.StringPtrInput `pulumi:"project"`
	StudyId  pulumi.StringInput    `pulumi:"studyId"`
	TrialId  pulumi.StringInput    `pulumi:"trialId"`
}

func (LookupTrialOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTrialArgs)(nil)).Elem()
}

type LookupTrialResultOutput struct{ *pulumi.OutputState }

func (LookupTrialResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTrialResult)(nil)).Elem()
}

func (o LookupTrialResultOutput) ToLookupTrialResultOutput() LookupTrialResultOutput {
	return o
}

func (o LookupTrialResultOutput) ToLookupTrialResultOutputWithContext(ctx context.Context) LookupTrialResultOutput {
	return o
}

// The identifier of the client that originally requested this Trial. Each client is identified by a unique client_id. When a client asks for a suggestion, Vertex AI Vizier will assign it a Trial. The client should evaluate the Trial, complete it, and report back to Vertex AI Vizier. If suggestion is asked again by same client_id before the Trial is completed, the same Trial will be returned. Multiple clients with different client_ids can ask for suggestions simultaneously, each of them will get their own Trial.
func (o LookupTrialResultOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTrialResult) string { return v.ClientId }).(pulumi.StringOutput)
}

// The CustomJob name linked to the Trial. It's set for a HyperparameterTuningJob's Trial.
func (o LookupTrialResultOutput) CustomJob() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTrialResult) string { return v.CustomJob }).(pulumi.StringOutput)
}

// Time when the Trial's status changed to `SUCCEEDED` or `INFEASIBLE`.
func (o LookupTrialResultOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTrialResult) string { return v.EndTime }).(pulumi.StringOutput)
}

// The final measurement containing the objective value.
func (o LookupTrialResultOutput) FinalMeasurement() GoogleCloudAiplatformV1MeasurementResponseOutput {
	return o.ApplyT(func(v LookupTrialResult) GoogleCloudAiplatformV1MeasurementResponse { return v.FinalMeasurement }).(GoogleCloudAiplatformV1MeasurementResponseOutput)
}

// A human readable string describing why the Trial is infeasible. This is set only if Trial state is `INFEASIBLE`.
func (o LookupTrialResultOutput) InfeasibleReason() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTrialResult) string { return v.InfeasibleReason }).(pulumi.StringOutput)
}

// A list of measurements that are strictly lexicographically ordered by their induced tuples (steps, elapsed_duration). These are used for early stopping computations.
func (o LookupTrialResultOutput) Measurements() GoogleCloudAiplatformV1MeasurementResponseArrayOutput {
	return o.ApplyT(func(v LookupTrialResult) []GoogleCloudAiplatformV1MeasurementResponse { return v.Measurements }).(GoogleCloudAiplatformV1MeasurementResponseArrayOutput)
}

// Resource name of the Trial assigned by the service.
func (o LookupTrialResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTrialResult) string { return v.Name }).(pulumi.StringOutput)
}

// The parameters of the Trial.
func (o LookupTrialResultOutput) Parameters() GoogleCloudAiplatformV1TrialParameterResponseArrayOutput {
	return o.ApplyT(func(v LookupTrialResult) []GoogleCloudAiplatformV1TrialParameterResponse { return v.Parameters }).(GoogleCloudAiplatformV1TrialParameterResponseArrayOutput)
}

// Time when the Trial was started.
func (o LookupTrialResultOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTrialResult) string { return v.StartTime }).(pulumi.StringOutput)
}

// The detailed state of the Trial.
func (o LookupTrialResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTrialResult) string { return v.State }).(pulumi.StringOutput)
}

// URIs for accessing [interactive shells](https://cloud.google.com/vertex-ai/docs/training/monitor-debug-interactive-shell) (one URI for each training node). Only available if this trial is part of a HyperparameterTuningJob and the job's trial_job_spec.enable_web_access field is `true`. The keys are names of each node used for the trial; for example, `workerpool0-0` for the primary node, `workerpool1-0` for the first node in the second worker pool, and `workerpool1-1` for the second node in the second worker pool. The values are the URIs for each node's interactive shell.
func (o LookupTrialResultOutput) WebAccessUris() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupTrialResult) map[string]string { return v.WebAccessUris }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTrialResultOutput{})
}
