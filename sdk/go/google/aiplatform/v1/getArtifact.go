// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieves a specific Artifact.
func LookupArtifact(ctx *pulumi.Context, args *LookupArtifactArgs, opts ...pulumi.InvokeOption) (*LookupArtifactResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupArtifactResult
	err := ctx.Invoke("google-native:aiplatform/v1:getArtifact", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupArtifactArgs struct {
	ArtifactId      string  `pulumi:"artifactId"`
	Location        string  `pulumi:"location"`
	MetadataStoreId string  `pulumi:"metadataStoreId"`
	Project         *string `pulumi:"project"`
}

type LookupArtifactResult struct {
	// Timestamp when this Artifact was created.
	CreateTime string `pulumi:"createTime"`
	// Description of the Artifact
	Description string `pulumi:"description"`
	// User provided display name of the Artifact. May be up to 128 Unicode characters.
	DisplayName string `pulumi:"displayName"`
	// An eTag used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
	Etag string `pulumi:"etag"`
	// The labels with user-defined metadata to organize your Artifacts. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one Artifact (System labels are excluded).
	Labels map[string]string `pulumi:"labels"`
	// Properties of the Artifact. Top level metadata keys' heading and trailing spaces will be trimmed. The size of this field should not exceed 200KB.
	Metadata map[string]interface{} `pulumi:"metadata"`
	// The resource name of the Artifact.
	Name string `pulumi:"name"`
	// The title of the schema describing the metadata. Schema title and version is expected to be registered in earlier Create Schema calls. And both are used together as unique identifiers to identify schemas within the local metadata store.
	SchemaTitle string `pulumi:"schemaTitle"`
	// The version of the schema in schema_name to use. Schema title and version is expected to be registered in earlier Create Schema calls. And both are used together as unique identifiers to identify schemas within the local metadata store.
	SchemaVersion string `pulumi:"schemaVersion"`
	// The state of this Artifact. This is a property of the Artifact, and does not imply or capture any ongoing process. This property is managed by clients (such as Vertex AI Pipelines), and the system does not prescribe or check the validity of state transitions.
	State string `pulumi:"state"`
	// Timestamp when this Artifact was last updated.
	UpdateTime string `pulumi:"updateTime"`
	// The uniform resource identifier of the artifact file. May be empty if there is no actual artifact file.
	Uri string `pulumi:"uri"`
}

func LookupArtifactOutput(ctx *pulumi.Context, args LookupArtifactOutputArgs, opts ...pulumi.InvokeOption) LookupArtifactResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupArtifactResult, error) {
			args := v.(LookupArtifactArgs)
			r, err := LookupArtifact(ctx, &args, opts...)
			var s LookupArtifactResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupArtifactResultOutput)
}

type LookupArtifactOutputArgs struct {
	ArtifactId      pulumi.StringInput    `pulumi:"artifactId"`
	Location        pulumi.StringInput    `pulumi:"location"`
	MetadataStoreId pulumi.StringInput    `pulumi:"metadataStoreId"`
	Project         pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupArtifactOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupArtifactArgs)(nil)).Elem()
}

type LookupArtifactResultOutput struct{ *pulumi.OutputState }

func (LookupArtifactResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupArtifactResult)(nil)).Elem()
}

func (o LookupArtifactResultOutput) ToLookupArtifactResultOutput() LookupArtifactResultOutput {
	return o
}

func (o LookupArtifactResultOutput) ToLookupArtifactResultOutputWithContext(ctx context.Context) LookupArtifactResultOutput {
	return o
}

// Timestamp when this Artifact was created.
func (o LookupArtifactResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupArtifactResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Description of the Artifact
func (o LookupArtifactResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupArtifactResult) string { return v.Description }).(pulumi.StringOutput)
}

// User provided display name of the Artifact. May be up to 128 Unicode characters.
func (o LookupArtifactResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupArtifactResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// An eTag used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
func (o LookupArtifactResultOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v LookupArtifactResult) string { return v.Etag }).(pulumi.StringOutput)
}

// The labels with user-defined metadata to organize your Artifacts. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one Artifact (System labels are excluded).
func (o LookupArtifactResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupArtifactResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Properties of the Artifact. Top level metadata keys' heading and trailing spaces will be trimmed. The size of this field should not exceed 200KB.
func (o LookupArtifactResultOutput) Metadata() pulumi.MapOutput {
	return o.ApplyT(func(v LookupArtifactResult) map[string]interface{} { return v.Metadata }).(pulumi.MapOutput)
}

// The resource name of the Artifact.
func (o LookupArtifactResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupArtifactResult) string { return v.Name }).(pulumi.StringOutput)
}

// The title of the schema describing the metadata. Schema title and version is expected to be registered in earlier Create Schema calls. And both are used together as unique identifiers to identify schemas within the local metadata store.
func (o LookupArtifactResultOutput) SchemaTitle() pulumi.StringOutput {
	return o.ApplyT(func(v LookupArtifactResult) string { return v.SchemaTitle }).(pulumi.StringOutput)
}

// The version of the schema in schema_name to use. Schema title and version is expected to be registered in earlier Create Schema calls. And both are used together as unique identifiers to identify schemas within the local metadata store.
func (o LookupArtifactResultOutput) SchemaVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupArtifactResult) string { return v.SchemaVersion }).(pulumi.StringOutput)
}

// The state of this Artifact. This is a property of the Artifact, and does not imply or capture any ongoing process. This property is managed by clients (such as Vertex AI Pipelines), and the system does not prescribe or check the validity of state transitions.
func (o LookupArtifactResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupArtifactResult) string { return v.State }).(pulumi.StringOutput)
}

// Timestamp when this Artifact was last updated.
func (o LookupArtifactResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupArtifactResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// The uniform resource identifier of the artifact file. May be empty if there is no actual artifact file.
func (o LookupArtifactResultOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v LookupArtifactResult) string { return v.Uri }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupArtifactResultOutput{})
}
