// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a SpecialistPool.
type SpecialistPool struct {
	pulumi.CustomResourceState

	// The user-defined name of the SpecialistPool. The name can be up to 128 characters long and can consist of any UTF-8 characters. This field should be unique on project-level.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	Location    pulumi.StringOutput `pulumi:"location"`
	// The resource name of the SpecialistPool.
	Name pulumi.StringOutput `pulumi:"name"`
	// The resource name of the pending data labeling jobs.
	PendingDataLabelingJobs pulumi.StringArrayOutput `pulumi:"pendingDataLabelingJobs"`
	Project                 pulumi.StringOutput      `pulumi:"project"`
	// The email addresses of the managers in the SpecialistPool.
	SpecialistManagerEmails pulumi.StringArrayOutput `pulumi:"specialistManagerEmails"`
	// The number of managers in this SpecialistPool.
	SpecialistManagersCount pulumi.IntOutput `pulumi:"specialistManagersCount"`
	// The email addresses of workers in the SpecialistPool.
	SpecialistWorkerEmails pulumi.StringArrayOutput `pulumi:"specialistWorkerEmails"`
}

// NewSpecialistPool registers a new resource with the given unique name, arguments, and options.
func NewSpecialistPool(ctx *pulumi.Context,
	name string, args *SpecialistPoolArgs, opts ...pulumi.ResourceOption) (*SpecialistPool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SpecialistPool
	err := ctx.RegisterResource("google-native:aiplatform/v1:SpecialistPool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSpecialistPool gets an existing SpecialistPool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSpecialistPool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SpecialistPoolState, opts ...pulumi.ResourceOption) (*SpecialistPool, error) {
	var resource SpecialistPool
	err := ctx.ReadResource("google-native:aiplatform/v1:SpecialistPool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SpecialistPool resources.
type specialistPoolState struct {
}

type SpecialistPoolState struct {
}

func (SpecialistPoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*specialistPoolState)(nil)).Elem()
}

type specialistPoolArgs struct {
	// The user-defined name of the SpecialistPool. The name can be up to 128 characters long and can consist of any UTF-8 characters. This field should be unique on project-level.
	DisplayName string  `pulumi:"displayName"`
	Location    *string `pulumi:"location"`
	// The resource name of the SpecialistPool.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// The email addresses of the managers in the SpecialistPool.
	SpecialistManagerEmails []string `pulumi:"specialistManagerEmails"`
	// The email addresses of workers in the SpecialistPool.
	SpecialistWorkerEmails []string `pulumi:"specialistWorkerEmails"`
}

// The set of arguments for constructing a SpecialistPool resource.
type SpecialistPoolArgs struct {
	// The user-defined name of the SpecialistPool. The name can be up to 128 characters long and can consist of any UTF-8 characters. This field should be unique on project-level.
	DisplayName pulumi.StringInput
	Location    pulumi.StringPtrInput
	// The resource name of the SpecialistPool.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// The email addresses of the managers in the SpecialistPool.
	SpecialistManagerEmails pulumi.StringArrayInput
	// The email addresses of workers in the SpecialistPool.
	SpecialistWorkerEmails pulumi.StringArrayInput
}

func (SpecialistPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*specialistPoolArgs)(nil)).Elem()
}

type SpecialistPoolInput interface {
	pulumi.Input

	ToSpecialistPoolOutput() SpecialistPoolOutput
	ToSpecialistPoolOutputWithContext(ctx context.Context) SpecialistPoolOutput
}

func (*SpecialistPool) ElementType() reflect.Type {
	return reflect.TypeOf((**SpecialistPool)(nil)).Elem()
}

func (i *SpecialistPool) ToSpecialistPoolOutput() SpecialistPoolOutput {
	return i.ToSpecialistPoolOutputWithContext(context.Background())
}

func (i *SpecialistPool) ToSpecialistPoolOutputWithContext(ctx context.Context) SpecialistPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpecialistPoolOutput)
}

type SpecialistPoolOutput struct{ *pulumi.OutputState }

func (SpecialistPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpecialistPool)(nil)).Elem()
}

func (o SpecialistPoolOutput) ToSpecialistPoolOutput() SpecialistPoolOutput {
	return o
}

func (o SpecialistPoolOutput) ToSpecialistPoolOutputWithContext(ctx context.Context) SpecialistPoolOutput {
	return o
}

// The user-defined name of the SpecialistPool. The name can be up to 128 characters long and can consist of any UTF-8 characters. This field should be unique on project-level.
func (o SpecialistPoolOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *SpecialistPool) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

func (o SpecialistPoolOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *SpecialistPool) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource name of the SpecialistPool.
func (o SpecialistPoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SpecialistPool) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The resource name of the pending data labeling jobs.
func (o SpecialistPoolOutput) PendingDataLabelingJobs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SpecialistPool) pulumi.StringArrayOutput { return v.PendingDataLabelingJobs }).(pulumi.StringArrayOutput)
}

func (o SpecialistPoolOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *SpecialistPool) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The email addresses of the managers in the SpecialistPool.
func (o SpecialistPoolOutput) SpecialistManagerEmails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SpecialistPool) pulumi.StringArrayOutput { return v.SpecialistManagerEmails }).(pulumi.StringArrayOutput)
}

// The number of managers in this SpecialistPool.
func (o SpecialistPoolOutput) SpecialistManagersCount() pulumi.IntOutput {
	return o.ApplyT(func(v *SpecialistPool) pulumi.IntOutput { return v.SpecialistManagersCount }).(pulumi.IntOutput)
}

// The email addresses of workers in the SpecialistPool.
func (o SpecialistPoolOutput) SpecialistWorkerEmails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SpecialistPool) pulumi.StringArrayOutput { return v.SpecialistWorkerEmails }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SpecialistPoolInput)(nil)).Elem(), &SpecialistPool{})
	pulumi.RegisterOutputType(SpecialistPoolOutput{})
}
