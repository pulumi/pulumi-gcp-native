// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Retrieves a specific MetadataSchema.
func LookupMetadataSchema(ctx *pulumi.Context, args *LookupMetadataSchemaArgs, opts ...pulumi.InvokeOption) (*LookupMetadataSchemaResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupMetadataSchemaResult
	err := ctx.Invoke("google-native:aiplatform/v1:getMetadataSchema", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupMetadataSchemaArgs struct {
	Location         string  `pulumi:"location"`
	MetadataSchemaId string  `pulumi:"metadataSchemaId"`
	MetadataStoreId  string  `pulumi:"metadataStoreId"`
	Project          *string `pulumi:"project"`
}

type LookupMetadataSchemaResult struct {
	// Timestamp when this MetadataSchema was created.
	CreateTime string `pulumi:"createTime"`
	// Description of the Metadata Schema
	Description string `pulumi:"description"`
	// The resource name of the MetadataSchema.
	Name string `pulumi:"name"`
	// The raw YAML string representation of the MetadataSchema. The combination of [MetadataSchema.version] and the schema name given by `title` in [MetadataSchema.schema] must be unique within a MetadataStore. The schema is defined as an OpenAPI 3.0.2 [MetadataSchema Object](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#schemaObject)
	Schema string `pulumi:"schema"`
	// The type of the MetadataSchema. This is a property that identifies which metadata types will use the MetadataSchema.
	SchemaType string `pulumi:"schemaType"`
	// The version of the MetadataSchema. The version's format must match the following regular expression: `^[0-9]+.+.+$`, which would allow to order/compare different versions. Example: 1.0.0, 1.0.1, etc.
	SchemaVersion string `pulumi:"schemaVersion"`
}

func LookupMetadataSchemaOutput(ctx *pulumi.Context, args LookupMetadataSchemaOutputArgs, opts ...pulumi.InvokeOption) LookupMetadataSchemaResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupMetadataSchemaResult, error) {
			args := v.(LookupMetadataSchemaArgs)
			r, err := LookupMetadataSchema(ctx, &args, opts...)
			var s LookupMetadataSchemaResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupMetadataSchemaResultOutput)
}

type LookupMetadataSchemaOutputArgs struct {
	Location         pulumi.StringInput    `pulumi:"location"`
	MetadataSchemaId pulumi.StringInput    `pulumi:"metadataSchemaId"`
	MetadataStoreId  pulumi.StringInput    `pulumi:"metadataStoreId"`
	Project          pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupMetadataSchemaOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMetadataSchemaArgs)(nil)).Elem()
}

type LookupMetadataSchemaResultOutput struct{ *pulumi.OutputState }

func (LookupMetadataSchemaResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMetadataSchemaResult)(nil)).Elem()
}

func (o LookupMetadataSchemaResultOutput) ToLookupMetadataSchemaResultOutput() LookupMetadataSchemaResultOutput {
	return o
}

func (o LookupMetadataSchemaResultOutput) ToLookupMetadataSchemaResultOutputWithContext(ctx context.Context) LookupMetadataSchemaResultOutput {
	return o
}

func (o LookupMetadataSchemaResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupMetadataSchemaResult] {
	return pulumix.Output[LookupMetadataSchemaResult]{
		OutputState: o.OutputState,
	}
}

// Timestamp when this MetadataSchema was created.
func (o LookupMetadataSchemaResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetadataSchemaResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Description of the Metadata Schema
func (o LookupMetadataSchemaResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetadataSchemaResult) string { return v.Description }).(pulumi.StringOutput)
}

// The resource name of the MetadataSchema.
func (o LookupMetadataSchemaResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetadataSchemaResult) string { return v.Name }).(pulumi.StringOutput)
}

// The raw YAML string representation of the MetadataSchema. The combination of [MetadataSchema.version] and the schema name given by `title` in [MetadataSchema.schema] must be unique within a MetadataStore. The schema is defined as an OpenAPI 3.0.2 [MetadataSchema Object](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#schemaObject)
func (o LookupMetadataSchemaResultOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetadataSchemaResult) string { return v.Schema }).(pulumi.StringOutput)
}

// The type of the MetadataSchema. This is a property that identifies which metadata types will use the MetadataSchema.
func (o LookupMetadataSchemaResultOutput) SchemaType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetadataSchemaResult) string { return v.SchemaType }).(pulumi.StringOutput)
}

// The version of the MetadataSchema. The version's format must match the following regular expression: `^[0-9]+.+.+$`, which would allow to order/compare different versions. Example: 1.0.0, 1.0.1, etc.
func (o LookupMetadataSchemaResultOutput) SchemaVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetadataSchemaResult) string { return v.SchemaVersion }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupMetadataSchemaResultOutput{})
}
