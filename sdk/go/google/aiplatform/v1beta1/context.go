// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a Context associated with a MetadataStore.
type Context struct {
	pulumi.CustomResourceState

	// The {context} portion of the resource name with the format: `projects/{project}/locations/{location}/metadataStores/{metadatastore}/contexts/{context}`. If not provided, the Context's ID will be a UUID generated by the service. Must be 4-128 characters in length. Valid characters are `/a-z-/`. Must be unique across all Contexts in the parent MetadataStore. (Otherwise the request will fail with ALREADY_EXISTS, or PERMISSION_DENIED if the caller can't view the preexisting Context.)
	ContextId pulumi.StringPtrOutput `pulumi:"contextId"`
	// Timestamp when this Context was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Description of the Context
	Description pulumi.StringOutput `pulumi:"description"`
	// User provided display name of the Context. May be up to 128 Unicode characters.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// An eTag used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The labels with user-defined metadata to organize your Contexts. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one Context (System labels are excluded).
	Labels   pulumi.StringMapOutput `pulumi:"labels"`
	Location pulumi.StringOutput    `pulumi:"location"`
	// Properties of the Context. Top level metadata keys' heading and trailing spaces will be trimmed. The size of this field should not exceed 200KB.
	Metadata        pulumi.MapOutput    `pulumi:"metadata"`
	MetadataStoreId pulumi.StringOutput `pulumi:"metadataStoreId"`
	// Immutable. The resource name of the Context.
	Name pulumi.StringOutput `pulumi:"name"`
	// A list of resource names of Contexts that are parents of this Context. A Context may have at most 10 parent_contexts.
	ParentContexts pulumi.StringArrayOutput `pulumi:"parentContexts"`
	Project        pulumi.StringOutput      `pulumi:"project"`
	// The title of the schema describing the metadata. Schema title and version is expected to be registered in earlier Create Schema calls. And both are used together as unique identifiers to identify schemas within the local metadata store.
	SchemaTitle pulumi.StringOutput `pulumi:"schemaTitle"`
	// The version of the schema in schema_name to use. Schema title and version is expected to be registered in earlier Create Schema calls. And both are used together as unique identifiers to identify schemas within the local metadata store.
	SchemaVersion pulumi.StringOutput `pulumi:"schemaVersion"`
	// Timestamp when this Context was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewContext registers a new resource with the given unique name, arguments, and options.
func NewContext(ctx *pulumi.Context,
	name string, args *ContextArgs, opts ...pulumi.ResourceOption) (*Context, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MetadataStoreId == nil {
		return nil, errors.New("invalid value for required argument 'MetadataStoreId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"location",
		"metadataStoreId",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Context
	err := ctx.RegisterResource("google-native:aiplatform/v1beta1:Context", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContext gets an existing Context resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContext(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContextState, opts ...pulumi.ResourceOption) (*Context, error) {
	var resource Context
	err := ctx.ReadResource("google-native:aiplatform/v1beta1:Context", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Context resources.
type contextState struct {
}

type ContextState struct {
}

func (ContextState) ElementType() reflect.Type {
	return reflect.TypeOf((*contextState)(nil)).Elem()
}

type contextArgs struct {
	// The {context} portion of the resource name with the format: `projects/{project}/locations/{location}/metadataStores/{metadatastore}/contexts/{context}`. If not provided, the Context's ID will be a UUID generated by the service. Must be 4-128 characters in length. Valid characters are `/a-z-/`. Must be unique across all Contexts in the parent MetadataStore. (Otherwise the request will fail with ALREADY_EXISTS, or PERMISSION_DENIED if the caller can't view the preexisting Context.)
	ContextId *string `pulumi:"contextId"`
	// Description of the Context
	Description *string `pulumi:"description"`
	// User provided display name of the Context. May be up to 128 Unicode characters.
	DisplayName *string `pulumi:"displayName"`
	// An eTag used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
	Etag *string `pulumi:"etag"`
	// The labels with user-defined metadata to organize your Contexts. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one Context (System labels are excluded).
	Labels   map[string]string `pulumi:"labels"`
	Location *string           `pulumi:"location"`
	// Properties of the Context. Top level metadata keys' heading and trailing spaces will be trimmed. The size of this field should not exceed 200KB.
	Metadata        map[string]interface{} `pulumi:"metadata"`
	MetadataStoreId string                 `pulumi:"metadataStoreId"`
	// Immutable. The resource name of the Context.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// The title of the schema describing the metadata. Schema title and version is expected to be registered in earlier Create Schema calls. And both are used together as unique identifiers to identify schemas within the local metadata store.
	SchemaTitle *string `pulumi:"schemaTitle"`
	// The version of the schema in schema_name to use. Schema title and version is expected to be registered in earlier Create Schema calls. And both are used together as unique identifiers to identify schemas within the local metadata store.
	SchemaVersion *string `pulumi:"schemaVersion"`
}

// The set of arguments for constructing a Context resource.
type ContextArgs struct {
	// The {context} portion of the resource name with the format: `projects/{project}/locations/{location}/metadataStores/{metadatastore}/contexts/{context}`. If not provided, the Context's ID will be a UUID generated by the service. Must be 4-128 characters in length. Valid characters are `/a-z-/`. Must be unique across all Contexts in the parent MetadataStore. (Otherwise the request will fail with ALREADY_EXISTS, or PERMISSION_DENIED if the caller can't view the preexisting Context.)
	ContextId pulumi.StringPtrInput
	// Description of the Context
	Description pulumi.StringPtrInput
	// User provided display name of the Context. May be up to 128 Unicode characters.
	DisplayName pulumi.StringPtrInput
	// An eTag used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
	Etag pulumi.StringPtrInput
	// The labels with user-defined metadata to organize your Contexts. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one Context (System labels are excluded).
	Labels   pulumi.StringMapInput
	Location pulumi.StringPtrInput
	// Properties of the Context. Top level metadata keys' heading and trailing spaces will be trimmed. The size of this field should not exceed 200KB.
	Metadata        pulumi.MapInput
	MetadataStoreId pulumi.StringInput
	// Immutable. The resource name of the Context.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// The title of the schema describing the metadata. Schema title and version is expected to be registered in earlier Create Schema calls. And both are used together as unique identifiers to identify schemas within the local metadata store.
	SchemaTitle pulumi.StringPtrInput
	// The version of the schema in schema_name to use. Schema title and version is expected to be registered in earlier Create Schema calls. And both are used together as unique identifiers to identify schemas within the local metadata store.
	SchemaVersion pulumi.StringPtrInput
}

func (ContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*contextArgs)(nil)).Elem()
}

type ContextInput interface {
	pulumi.Input

	ToContextOutput() ContextOutput
	ToContextOutputWithContext(ctx context.Context) ContextOutput
}

func (*Context) ElementType() reflect.Type {
	return reflect.TypeOf((**Context)(nil)).Elem()
}

func (i *Context) ToContextOutput() ContextOutput {
	return i.ToContextOutputWithContext(context.Background())
}

func (i *Context) ToContextOutputWithContext(ctx context.Context) ContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContextOutput)
}

type ContextOutput struct{ *pulumi.OutputState }

func (ContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Context)(nil)).Elem()
}

func (o ContextOutput) ToContextOutput() ContextOutput {
	return o
}

func (o ContextOutput) ToContextOutputWithContext(ctx context.Context) ContextOutput {
	return o
}

// The {context} portion of the resource name with the format: `projects/{project}/locations/{location}/metadataStores/{metadatastore}/contexts/{context}`. If not provided, the Context's ID will be a UUID generated by the service. Must be 4-128 characters in length. Valid characters are `/a-z-/`. Must be unique across all Contexts in the parent MetadataStore. (Otherwise the request will fail with ALREADY_EXISTS, or PERMISSION_DENIED if the caller can't view the preexisting Context.)
func (o ContextOutput) ContextId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Context) pulumi.StringPtrOutput { return v.ContextId }).(pulumi.StringPtrOutput)
}

// Timestamp when this Context was created.
func (o ContextOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Context) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Description of the Context
func (o ContextOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Context) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// User provided display name of the Context. May be up to 128 Unicode characters.
func (o ContextOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Context) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// An eTag used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
func (o ContextOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *Context) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The labels with user-defined metadata to organize your Contexts. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one Context (System labels are excluded).
func (o ContextOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Context) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

func (o ContextOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Context) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Properties of the Context. Top level metadata keys' heading and trailing spaces will be trimmed. The size of this field should not exceed 200KB.
func (o ContextOutput) Metadata() pulumi.MapOutput {
	return o.ApplyT(func(v *Context) pulumi.MapOutput { return v.Metadata }).(pulumi.MapOutput)
}

func (o ContextOutput) MetadataStoreId() pulumi.StringOutput {
	return o.ApplyT(func(v *Context) pulumi.StringOutput { return v.MetadataStoreId }).(pulumi.StringOutput)
}

// Immutable. The resource name of the Context.
func (o ContextOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Context) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A list of resource names of Contexts that are parents of this Context. A Context may have at most 10 parent_contexts.
func (o ContextOutput) ParentContexts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Context) pulumi.StringArrayOutput { return v.ParentContexts }).(pulumi.StringArrayOutput)
}

func (o ContextOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Context) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The title of the schema describing the metadata. Schema title and version is expected to be registered in earlier Create Schema calls. And both are used together as unique identifiers to identify schemas within the local metadata store.
func (o ContextOutput) SchemaTitle() pulumi.StringOutput {
	return o.ApplyT(func(v *Context) pulumi.StringOutput { return v.SchemaTitle }).(pulumi.StringOutput)
}

// The version of the schema in schema_name to use. Schema title and version is expected to be registered in earlier Create Schema calls. And both are used together as unique identifiers to identify schemas within the local metadata store.
func (o ContextOutput) SchemaVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Context) pulumi.StringOutput { return v.SchemaVersion }).(pulumi.StringOutput)
}

// Timestamp when this Context was last updated.
func (o ContextOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Context) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ContextInput)(nil)).Elem(), &Context{})
	pulumi.RegisterOutputType(ContextOutput{})
}
