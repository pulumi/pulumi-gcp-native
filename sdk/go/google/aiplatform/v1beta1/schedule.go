// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates a Schedule.
type Schedule struct {
	pulumi.CustomResourceState

	// Optional. Whether new scheduled runs can be queued when max_concurrent_runs limit is reached. If set to true, new runs will be queued instead of skipped. Default to false.
	AllowQueueing pulumi.BoolOutput `pulumi:"allowQueueing"`
	// Whether to backfill missed runs when the schedule is resumed from PAUSED state. If set to true, all missed runs will be scheduled. New runs will be scheduled after the backfill is complete. Default to false.
	CatchUp pulumi.BoolOutput `pulumi:"catchUp"`
	// Request for PipelineService.CreatePipelineJob. CreatePipelineJobRequest.parent field is required (format: projects/{project}/locations/{location}).
	CreatePipelineJobRequest GoogleCloudAiplatformV1beta1CreatePipelineJobRequestResponseOutput `pulumi:"createPipelineJobRequest"`
	// Timestamp when this Schedule was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Cron schedule (https://en.wikipedia.org/wiki/Cron) to launch scheduled runs. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: "CRON_TZ=${IANA_TIME_ZONE}" or "TZ=${IANA_TIME_ZONE}". The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, "CRON_TZ=America/New_York 1 * * * *", or "TZ=America/New_York 1 * * * *".
	Cron pulumi.StringOutput `pulumi:"cron"`
	// User provided name of the Schedule. The name can be up to 128 characters long and can consist of any UTF-8 characters.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Optional. Timestamp after which no new runs can be scheduled. If specified, The schedule will be completed when either end_time is reached or when scheduled_run_count >= max_run_count. If not specified, new runs will keep getting scheduled until this Schedule is paused or deleted. Already scheduled runs will be allowed to complete. Unset if not specified.
	EndTime pulumi.StringOutput `pulumi:"endTime"`
	// Timestamp when this Schedule was last paused. Unset if never paused.
	LastPauseTime pulumi.StringOutput `pulumi:"lastPauseTime"`
	// Timestamp when this Schedule was last resumed. Unset if never resumed from pause.
	LastResumeTime pulumi.StringOutput `pulumi:"lastResumeTime"`
	// Response of the last scheduled run. This is the response for starting the scheduled requests and not the execution of the operations/jobs created by the requests (if applicable). Unset if no run has been scheduled yet.
	LastScheduledRunResponse GoogleCloudAiplatformV1beta1ScheduleRunResponseResponseOutput `pulumi:"lastScheduledRunResponse"`
	Location                 pulumi.StringOutput                                           `pulumi:"location"`
	// Maximum number of runs that can be started concurrently for this Schedule. This is the limit for starting the scheduled requests and not the execution of the operations/jobs created by the requests (if applicable).
	MaxConcurrentRunCount pulumi.StringOutput `pulumi:"maxConcurrentRunCount"`
	// Optional. Maximum run count of the schedule. If specified, The schedule will be completed when either started_run_count >= max_run_count or when end_time is reached. If not specified, new runs will keep getting scheduled until this Schedule is paused or deleted. Already scheduled runs will be allowed to complete. Unset if not specified.
	MaxRunCount pulumi.StringOutput `pulumi:"maxRunCount"`
	// Immutable. The resource name of the Schedule.
	Name pulumi.StringOutput `pulumi:"name"`
	// Timestamp when this Schedule should schedule the next run. Having a next_run_time in the past means the runs are being started behind schedule.
	NextRunTime pulumi.StringOutput `pulumi:"nextRunTime"`
	Project     pulumi.StringOutput `pulumi:"project"`
	// Optional. Timestamp after which the first run can be scheduled. Default to Schedule create time if not specified.
	StartTime pulumi.StringOutput `pulumi:"startTime"`
	// The number of runs started by this schedule.
	StartedRunCount pulumi.StringOutput `pulumi:"startedRunCount"`
	// The state of this Schedule.
	State pulumi.StringOutput `pulumi:"state"`
	// Timestamp when this Schedule was updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewSchedule registers a new resource with the given unique name, arguments, and options.
func NewSchedule(ctx *pulumi.Context,
	name string, args *ScheduleArgs, opts ...pulumi.ResourceOption) (*Schedule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.MaxConcurrentRunCount == nil {
		return nil, errors.New("invalid value for required argument 'MaxConcurrentRunCount'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Schedule
	err := ctx.RegisterResource("google-native:aiplatform/v1beta1:Schedule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSchedule gets an existing Schedule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSchedule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScheduleState, opts ...pulumi.ResourceOption) (*Schedule, error) {
	var resource Schedule
	err := ctx.ReadResource("google-native:aiplatform/v1beta1:Schedule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Schedule resources.
type scheduleState struct {
}

type ScheduleState struct {
}

func (ScheduleState) ElementType() reflect.Type {
	return reflect.TypeOf((*scheduleState)(nil)).Elem()
}

type scheduleArgs struct {
	// Optional. Whether new scheduled runs can be queued when max_concurrent_runs limit is reached. If set to true, new runs will be queued instead of skipped. Default to false.
	AllowQueueing *bool `pulumi:"allowQueueing"`
	// Request for PipelineService.CreatePipelineJob. CreatePipelineJobRequest.parent field is required (format: projects/{project}/locations/{location}).
	CreatePipelineJobRequest *GoogleCloudAiplatformV1beta1CreatePipelineJobRequest `pulumi:"createPipelineJobRequest"`
	// Cron schedule (https://en.wikipedia.org/wiki/Cron) to launch scheduled runs. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: "CRON_TZ=${IANA_TIME_ZONE}" or "TZ=${IANA_TIME_ZONE}". The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, "CRON_TZ=America/New_York 1 * * * *", or "TZ=America/New_York 1 * * * *".
	Cron *string `pulumi:"cron"`
	// User provided name of the Schedule. The name can be up to 128 characters long and can consist of any UTF-8 characters.
	DisplayName string `pulumi:"displayName"`
	// Optional. Timestamp after which no new runs can be scheduled. If specified, The schedule will be completed when either end_time is reached or when scheduled_run_count >= max_run_count. If not specified, new runs will keep getting scheduled until this Schedule is paused or deleted. Already scheduled runs will be allowed to complete. Unset if not specified.
	EndTime  *string `pulumi:"endTime"`
	Location *string `pulumi:"location"`
	// Maximum number of runs that can be started concurrently for this Schedule. This is the limit for starting the scheduled requests and not the execution of the operations/jobs created by the requests (if applicable).
	MaxConcurrentRunCount string `pulumi:"maxConcurrentRunCount"`
	// Optional. Maximum run count of the schedule. If specified, The schedule will be completed when either started_run_count >= max_run_count or when end_time is reached. If not specified, new runs will keep getting scheduled until this Schedule is paused or deleted. Already scheduled runs will be allowed to complete. Unset if not specified.
	MaxRunCount *string `pulumi:"maxRunCount"`
	// Immutable. The resource name of the Schedule.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// Optional. Timestamp after which the first run can be scheduled. Default to Schedule create time if not specified.
	StartTime *string `pulumi:"startTime"`
}

// The set of arguments for constructing a Schedule resource.
type ScheduleArgs struct {
	// Optional. Whether new scheduled runs can be queued when max_concurrent_runs limit is reached. If set to true, new runs will be queued instead of skipped. Default to false.
	AllowQueueing pulumi.BoolPtrInput
	// Request for PipelineService.CreatePipelineJob. CreatePipelineJobRequest.parent field is required (format: projects/{project}/locations/{location}).
	CreatePipelineJobRequest GoogleCloudAiplatformV1beta1CreatePipelineJobRequestPtrInput
	// Cron schedule (https://en.wikipedia.org/wiki/Cron) to launch scheduled runs. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: "CRON_TZ=${IANA_TIME_ZONE}" or "TZ=${IANA_TIME_ZONE}". The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, "CRON_TZ=America/New_York 1 * * * *", or "TZ=America/New_York 1 * * * *".
	Cron pulumi.StringPtrInput
	// User provided name of the Schedule. The name can be up to 128 characters long and can consist of any UTF-8 characters.
	DisplayName pulumi.StringInput
	// Optional. Timestamp after which no new runs can be scheduled. If specified, The schedule will be completed when either end_time is reached or when scheduled_run_count >= max_run_count. If not specified, new runs will keep getting scheduled until this Schedule is paused or deleted. Already scheduled runs will be allowed to complete. Unset if not specified.
	EndTime  pulumi.StringPtrInput
	Location pulumi.StringPtrInput
	// Maximum number of runs that can be started concurrently for this Schedule. This is the limit for starting the scheduled requests and not the execution of the operations/jobs created by the requests (if applicable).
	MaxConcurrentRunCount pulumi.StringInput
	// Optional. Maximum run count of the schedule. If specified, The schedule will be completed when either started_run_count >= max_run_count or when end_time is reached. If not specified, new runs will keep getting scheduled until this Schedule is paused or deleted. Already scheduled runs will be allowed to complete. Unset if not specified.
	MaxRunCount pulumi.StringPtrInput
	// Immutable. The resource name of the Schedule.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// Optional. Timestamp after which the first run can be scheduled. Default to Schedule create time if not specified.
	StartTime pulumi.StringPtrInput
}

func (ScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scheduleArgs)(nil)).Elem()
}

type ScheduleInput interface {
	pulumi.Input

	ToScheduleOutput() ScheduleOutput
	ToScheduleOutputWithContext(ctx context.Context) ScheduleOutput
}

func (*Schedule) ElementType() reflect.Type {
	return reflect.TypeOf((**Schedule)(nil)).Elem()
}

func (i *Schedule) ToScheduleOutput() ScheduleOutput {
	return i.ToScheduleOutputWithContext(context.Background())
}

func (i *Schedule) ToScheduleOutputWithContext(ctx context.Context) ScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleOutput)
}

func (i *Schedule) ToOutput(ctx context.Context) pulumix.Output[*Schedule] {
	return pulumix.Output[*Schedule]{
		OutputState: i.ToScheduleOutputWithContext(ctx).OutputState,
	}
}

type ScheduleOutput struct{ *pulumi.OutputState }

func (ScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Schedule)(nil)).Elem()
}

func (o ScheduleOutput) ToScheduleOutput() ScheduleOutput {
	return o
}

func (o ScheduleOutput) ToScheduleOutputWithContext(ctx context.Context) ScheduleOutput {
	return o
}

func (o ScheduleOutput) ToOutput(ctx context.Context) pulumix.Output[*Schedule] {
	return pulumix.Output[*Schedule]{
		OutputState: o.OutputState,
	}
}

// Optional. Whether new scheduled runs can be queued when max_concurrent_runs limit is reached. If set to true, new runs will be queued instead of skipped. Default to false.
func (o ScheduleOutput) AllowQueueing() pulumi.BoolOutput {
	return o.ApplyT(func(v *Schedule) pulumi.BoolOutput { return v.AllowQueueing }).(pulumi.BoolOutput)
}

// Whether to backfill missed runs when the schedule is resumed from PAUSED state. If set to true, all missed runs will be scheduled. New runs will be scheduled after the backfill is complete. Default to false.
func (o ScheduleOutput) CatchUp() pulumi.BoolOutput {
	return o.ApplyT(func(v *Schedule) pulumi.BoolOutput { return v.CatchUp }).(pulumi.BoolOutput)
}

// Request for PipelineService.CreatePipelineJob. CreatePipelineJobRequest.parent field is required (format: projects/{project}/locations/{location}).
func (o ScheduleOutput) CreatePipelineJobRequest() GoogleCloudAiplatformV1beta1CreatePipelineJobRequestResponseOutput {
	return o.ApplyT(func(v *Schedule) GoogleCloudAiplatformV1beta1CreatePipelineJobRequestResponseOutput {
		return v.CreatePipelineJobRequest
	}).(GoogleCloudAiplatformV1beta1CreatePipelineJobRequestResponseOutput)
}

// Timestamp when this Schedule was created.
func (o ScheduleOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Cron schedule (https://en.wikipedia.org/wiki/Cron) to launch scheduled runs. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: "CRON_TZ=${IANA_TIME_ZONE}" or "TZ=${IANA_TIME_ZONE}". The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, "CRON_TZ=America/New_York 1 * * * *", or "TZ=America/New_York 1 * * * *".
func (o ScheduleOutput) Cron() pulumi.StringOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringOutput { return v.Cron }).(pulumi.StringOutput)
}

// User provided name of the Schedule. The name can be up to 128 characters long and can consist of any UTF-8 characters.
func (o ScheduleOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Optional. Timestamp after which no new runs can be scheduled. If specified, The schedule will be completed when either end_time is reached or when scheduled_run_count >= max_run_count. If not specified, new runs will keep getting scheduled until this Schedule is paused or deleted. Already scheduled runs will be allowed to complete. Unset if not specified.
func (o ScheduleOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringOutput { return v.EndTime }).(pulumi.StringOutput)
}

// Timestamp when this Schedule was last paused. Unset if never paused.
func (o ScheduleOutput) LastPauseTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringOutput { return v.LastPauseTime }).(pulumi.StringOutput)
}

// Timestamp when this Schedule was last resumed. Unset if never resumed from pause.
func (o ScheduleOutput) LastResumeTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringOutput { return v.LastResumeTime }).(pulumi.StringOutput)
}

// Response of the last scheduled run. This is the response for starting the scheduled requests and not the execution of the operations/jobs created by the requests (if applicable). Unset if no run has been scheduled yet.
func (o ScheduleOutput) LastScheduledRunResponse() GoogleCloudAiplatformV1beta1ScheduleRunResponseResponseOutput {
	return o.ApplyT(func(v *Schedule) GoogleCloudAiplatformV1beta1ScheduleRunResponseResponseOutput {
		return v.LastScheduledRunResponse
	}).(GoogleCloudAiplatformV1beta1ScheduleRunResponseResponseOutput)
}

func (o ScheduleOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Maximum number of runs that can be started concurrently for this Schedule. This is the limit for starting the scheduled requests and not the execution of the operations/jobs created by the requests (if applicable).
func (o ScheduleOutput) MaxConcurrentRunCount() pulumi.StringOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringOutput { return v.MaxConcurrentRunCount }).(pulumi.StringOutput)
}

// Optional. Maximum run count of the schedule. If specified, The schedule will be completed when either started_run_count >= max_run_count or when end_time is reached. If not specified, new runs will keep getting scheduled until this Schedule is paused or deleted. Already scheduled runs will be allowed to complete. Unset if not specified.
func (o ScheduleOutput) MaxRunCount() pulumi.StringOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringOutput { return v.MaxRunCount }).(pulumi.StringOutput)
}

// Immutable. The resource name of the Schedule.
func (o ScheduleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Timestamp when this Schedule should schedule the next run. Having a next_run_time in the past means the runs are being started behind schedule.
func (o ScheduleOutput) NextRunTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringOutput { return v.NextRunTime }).(pulumi.StringOutput)
}

func (o ScheduleOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Optional. Timestamp after which the first run can be scheduled. Default to Schedule create time if not specified.
func (o ScheduleOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringOutput { return v.StartTime }).(pulumi.StringOutput)
}

// The number of runs started by this schedule.
func (o ScheduleOutput) StartedRunCount() pulumi.StringOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringOutput { return v.StartedRunCount }).(pulumi.StringOutput)
}

// The state of this Schedule.
func (o ScheduleOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Timestamp when this Schedule was updated.
func (o ScheduleOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleInput)(nil)).Elem(), &Schedule{})
	pulumi.RegisterOutputType(ScheduleOutput{})
}
