// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a RagCorpus.
// Auto-naming is currently not supported for this resource.
type RagCorpora struct {
	pulumi.CustomResourceState

	// Timestamp when this RagCorpus was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Optional. The description of the RagCorpus.
	Description pulumi.StringOutput `pulumi:"description"`
	// The display name of the RagCorpus. The name can be up to 128 characters long and can consist of any UTF-8 characters.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	Location    pulumi.StringOutput `pulumi:"location"`
	// The resource name of the RagCorpus.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// Timestamp when this RagCorpus was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewRagCorpora registers a new resource with the given unique name, arguments, and options.
func NewRagCorpora(ctx *pulumi.Context,
	name string, args *RagCorporaArgs, opts ...pulumi.ResourceOption) (*RagCorpora, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RagCorpora
	err := ctx.RegisterResource("google-native:aiplatform/v1beta1:RagCorpora", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRagCorpora gets an existing RagCorpora resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRagCorpora(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RagCorporaState, opts ...pulumi.ResourceOption) (*RagCorpora, error) {
	var resource RagCorpora
	err := ctx.ReadResource("google-native:aiplatform/v1beta1:RagCorpora", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RagCorpora resources.
type ragCorporaState struct {
}

type RagCorporaState struct {
}

func (RagCorporaState) ElementType() reflect.Type {
	return reflect.TypeOf((*ragCorporaState)(nil)).Elem()
}

type ragCorporaArgs struct {
	// Optional. The description of the RagCorpus.
	Description *string `pulumi:"description"`
	// The display name of the RagCorpus. The name can be up to 128 characters long and can consist of any UTF-8 characters.
	DisplayName string  `pulumi:"displayName"`
	Location    *string `pulumi:"location"`
	Project     *string `pulumi:"project"`
}

// The set of arguments for constructing a RagCorpora resource.
type RagCorporaArgs struct {
	// Optional. The description of the RagCorpus.
	Description pulumi.StringPtrInput
	// The display name of the RagCorpus. The name can be up to 128 characters long and can consist of any UTF-8 characters.
	DisplayName pulumi.StringInput
	Location    pulumi.StringPtrInput
	Project     pulumi.StringPtrInput
}

func (RagCorporaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ragCorporaArgs)(nil)).Elem()
}

type RagCorporaInput interface {
	pulumi.Input

	ToRagCorporaOutput() RagCorporaOutput
	ToRagCorporaOutputWithContext(ctx context.Context) RagCorporaOutput
}

func (*RagCorpora) ElementType() reflect.Type {
	return reflect.TypeOf((**RagCorpora)(nil)).Elem()
}

func (i *RagCorpora) ToRagCorporaOutput() RagCorporaOutput {
	return i.ToRagCorporaOutputWithContext(context.Background())
}

func (i *RagCorpora) ToRagCorporaOutputWithContext(ctx context.Context) RagCorporaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RagCorporaOutput)
}

type RagCorporaOutput struct{ *pulumi.OutputState }

func (RagCorporaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RagCorpora)(nil)).Elem()
}

func (o RagCorporaOutput) ToRagCorporaOutput() RagCorporaOutput {
	return o
}

func (o RagCorporaOutput) ToRagCorporaOutputWithContext(ctx context.Context) RagCorporaOutput {
	return o
}

// Timestamp when this RagCorpus was created.
func (o RagCorporaOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *RagCorpora) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Optional. The description of the RagCorpus.
func (o RagCorporaOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *RagCorpora) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The display name of the RagCorpus. The name can be up to 128 characters long and can consist of any UTF-8 characters.
func (o RagCorporaOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *RagCorpora) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

func (o RagCorporaOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *RagCorpora) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource name of the RagCorpus.
func (o RagCorporaOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RagCorpora) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o RagCorporaOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *RagCorpora) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Timestamp when this RagCorpus was last updated.
func (o RagCorporaOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *RagCorpora) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RagCorporaInput)(nil)).Elem(), &RagCorpora{})
	pulumi.RegisterOutputType(RagCorporaOutput{})
}
