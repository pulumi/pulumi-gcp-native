// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates a HyperparameterTuningJob
// Auto-naming is currently not supported for this resource.
type HyperparameterTuningJob struct {
	pulumi.CustomResourceState

	// Time when the HyperparameterTuningJob was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The display name of the HyperparameterTuningJob. The name can be up to 128 characters long and can consist of any UTF-8 characters.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Customer-managed encryption key options for a HyperparameterTuningJob. If this is set, then all resources created by the HyperparameterTuningJob will be encrypted with the provided encryption key.
	EncryptionSpec GoogleCloudAiplatformV1beta1EncryptionSpecResponseOutput `pulumi:"encryptionSpec"`
	// Time when the HyperparameterTuningJob entered any of the following states: `JOB_STATE_SUCCEEDED`, `JOB_STATE_FAILED`, `JOB_STATE_CANCELLED`.
	EndTime pulumi.StringOutput `pulumi:"endTime"`
	// Only populated when job's state is JOB_STATE_FAILED or JOB_STATE_CANCELLED.
	Error GoogleRpcStatusResponseOutput `pulumi:"error"`
	// The labels with user-defined metadata to organize HyperparameterTuningJobs. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.
	Labels   pulumi.StringMapOutput `pulumi:"labels"`
	Location pulumi.StringOutput    `pulumi:"location"`
	// The number of failed Trials that need to be seen before failing the HyperparameterTuningJob. If set to 0, Vertex AI decides how many Trials must fail before the whole job fails.
	MaxFailedTrialCount pulumi.IntOutput `pulumi:"maxFailedTrialCount"`
	// The desired total number of Trials.
	MaxTrialCount pulumi.IntOutput `pulumi:"maxTrialCount"`
	// Resource name of the HyperparameterTuningJob.
	Name pulumi.StringOutput `pulumi:"name"`
	// The desired number of Trials to run in parallel.
	ParallelTrialCount pulumi.IntOutput    `pulumi:"parallelTrialCount"`
	Project            pulumi.StringOutput `pulumi:"project"`
	// Time when the HyperparameterTuningJob for the first time entered the `JOB_STATE_RUNNING` state.
	StartTime pulumi.StringOutput `pulumi:"startTime"`
	// The detailed state of the job.
	State pulumi.StringOutput `pulumi:"state"`
	// Study configuration of the HyperparameterTuningJob.
	StudySpec GoogleCloudAiplatformV1beta1StudySpecResponseOutput `pulumi:"studySpec"`
	// The spec of a trial job. The same spec applies to the CustomJobs created in all the trials.
	TrialJobSpec GoogleCloudAiplatformV1beta1CustomJobSpecResponseOutput `pulumi:"trialJobSpec"`
	// Trials of the HyperparameterTuningJob.
	Trials GoogleCloudAiplatformV1beta1TrialResponseArrayOutput `pulumi:"trials"`
	// Time when the HyperparameterTuningJob was most recently updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewHyperparameterTuningJob registers a new resource with the given unique name, arguments, and options.
func NewHyperparameterTuningJob(ctx *pulumi.Context,
	name string, args *HyperparameterTuningJobArgs, opts ...pulumi.ResourceOption) (*HyperparameterTuningJob, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.MaxTrialCount == nil {
		return nil, errors.New("invalid value for required argument 'MaxTrialCount'")
	}
	if args.ParallelTrialCount == nil {
		return nil, errors.New("invalid value for required argument 'ParallelTrialCount'")
	}
	if args.StudySpec == nil {
		return nil, errors.New("invalid value for required argument 'StudySpec'")
	}
	if args.TrialJobSpec == nil {
		return nil, errors.New("invalid value for required argument 'TrialJobSpec'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HyperparameterTuningJob
	err := ctx.RegisterResource("google-native:aiplatform/v1beta1:HyperparameterTuningJob", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHyperparameterTuningJob gets an existing HyperparameterTuningJob resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHyperparameterTuningJob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HyperparameterTuningJobState, opts ...pulumi.ResourceOption) (*HyperparameterTuningJob, error) {
	var resource HyperparameterTuningJob
	err := ctx.ReadResource("google-native:aiplatform/v1beta1:HyperparameterTuningJob", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HyperparameterTuningJob resources.
type hyperparameterTuningJobState struct {
}

type HyperparameterTuningJobState struct {
}

func (HyperparameterTuningJobState) ElementType() reflect.Type {
	return reflect.TypeOf((*hyperparameterTuningJobState)(nil)).Elem()
}

type hyperparameterTuningJobArgs struct {
	// The display name of the HyperparameterTuningJob. The name can be up to 128 characters long and can consist of any UTF-8 characters.
	DisplayName string `pulumi:"displayName"`
	// Customer-managed encryption key options for a HyperparameterTuningJob. If this is set, then all resources created by the HyperparameterTuningJob will be encrypted with the provided encryption key.
	EncryptionSpec *GoogleCloudAiplatformV1beta1EncryptionSpec `pulumi:"encryptionSpec"`
	// The labels with user-defined metadata to organize HyperparameterTuningJobs. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.
	Labels   map[string]string `pulumi:"labels"`
	Location *string           `pulumi:"location"`
	// The number of failed Trials that need to be seen before failing the HyperparameterTuningJob. If set to 0, Vertex AI decides how many Trials must fail before the whole job fails.
	MaxFailedTrialCount *int `pulumi:"maxFailedTrialCount"`
	// The desired total number of Trials.
	MaxTrialCount int `pulumi:"maxTrialCount"`
	// The desired number of Trials to run in parallel.
	ParallelTrialCount int     `pulumi:"parallelTrialCount"`
	Project            *string `pulumi:"project"`
	// Study configuration of the HyperparameterTuningJob.
	StudySpec GoogleCloudAiplatformV1beta1StudySpec `pulumi:"studySpec"`
	// The spec of a trial job. The same spec applies to the CustomJobs created in all the trials.
	TrialJobSpec GoogleCloudAiplatformV1beta1CustomJobSpec `pulumi:"trialJobSpec"`
}

// The set of arguments for constructing a HyperparameterTuningJob resource.
type HyperparameterTuningJobArgs struct {
	// The display name of the HyperparameterTuningJob. The name can be up to 128 characters long and can consist of any UTF-8 characters.
	DisplayName pulumi.StringInput
	// Customer-managed encryption key options for a HyperparameterTuningJob. If this is set, then all resources created by the HyperparameterTuningJob will be encrypted with the provided encryption key.
	EncryptionSpec GoogleCloudAiplatformV1beta1EncryptionSpecPtrInput
	// The labels with user-defined metadata to organize HyperparameterTuningJobs. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.
	Labels   pulumi.StringMapInput
	Location pulumi.StringPtrInput
	// The number of failed Trials that need to be seen before failing the HyperparameterTuningJob. If set to 0, Vertex AI decides how many Trials must fail before the whole job fails.
	MaxFailedTrialCount pulumi.IntPtrInput
	// The desired total number of Trials.
	MaxTrialCount pulumi.IntInput
	// The desired number of Trials to run in parallel.
	ParallelTrialCount pulumi.IntInput
	Project            pulumi.StringPtrInput
	// Study configuration of the HyperparameterTuningJob.
	StudySpec GoogleCloudAiplatformV1beta1StudySpecInput
	// The spec of a trial job. The same spec applies to the CustomJobs created in all the trials.
	TrialJobSpec GoogleCloudAiplatformV1beta1CustomJobSpecInput
}

func (HyperparameterTuningJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hyperparameterTuningJobArgs)(nil)).Elem()
}

type HyperparameterTuningJobInput interface {
	pulumi.Input

	ToHyperparameterTuningJobOutput() HyperparameterTuningJobOutput
	ToHyperparameterTuningJobOutputWithContext(ctx context.Context) HyperparameterTuningJobOutput
}

func (*HyperparameterTuningJob) ElementType() reflect.Type {
	return reflect.TypeOf((**HyperparameterTuningJob)(nil)).Elem()
}

func (i *HyperparameterTuningJob) ToHyperparameterTuningJobOutput() HyperparameterTuningJobOutput {
	return i.ToHyperparameterTuningJobOutputWithContext(context.Background())
}

func (i *HyperparameterTuningJob) ToHyperparameterTuningJobOutputWithContext(ctx context.Context) HyperparameterTuningJobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HyperparameterTuningJobOutput)
}

func (i *HyperparameterTuningJob) ToOutput(ctx context.Context) pulumix.Output[*HyperparameterTuningJob] {
	return pulumix.Output[*HyperparameterTuningJob]{
		OutputState: i.ToHyperparameterTuningJobOutputWithContext(ctx).OutputState,
	}
}

type HyperparameterTuningJobOutput struct{ *pulumi.OutputState }

func (HyperparameterTuningJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HyperparameterTuningJob)(nil)).Elem()
}

func (o HyperparameterTuningJobOutput) ToHyperparameterTuningJobOutput() HyperparameterTuningJobOutput {
	return o
}

func (o HyperparameterTuningJobOutput) ToHyperparameterTuningJobOutputWithContext(ctx context.Context) HyperparameterTuningJobOutput {
	return o
}

func (o HyperparameterTuningJobOutput) ToOutput(ctx context.Context) pulumix.Output[*HyperparameterTuningJob] {
	return pulumix.Output[*HyperparameterTuningJob]{
		OutputState: o.OutputState,
	}
}

// Time when the HyperparameterTuningJob was created.
func (o HyperparameterTuningJobOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *HyperparameterTuningJob) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The display name of the HyperparameterTuningJob. The name can be up to 128 characters long and can consist of any UTF-8 characters.
func (o HyperparameterTuningJobOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *HyperparameterTuningJob) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Customer-managed encryption key options for a HyperparameterTuningJob. If this is set, then all resources created by the HyperparameterTuningJob will be encrypted with the provided encryption key.
func (o HyperparameterTuningJobOutput) EncryptionSpec() GoogleCloudAiplatformV1beta1EncryptionSpecResponseOutput {
	return o.ApplyT(func(v *HyperparameterTuningJob) GoogleCloudAiplatformV1beta1EncryptionSpecResponseOutput {
		return v.EncryptionSpec
	}).(GoogleCloudAiplatformV1beta1EncryptionSpecResponseOutput)
}

// Time when the HyperparameterTuningJob entered any of the following states: `JOB_STATE_SUCCEEDED`, `JOB_STATE_FAILED`, `JOB_STATE_CANCELLED`.
func (o HyperparameterTuningJobOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v *HyperparameterTuningJob) pulumi.StringOutput { return v.EndTime }).(pulumi.StringOutput)
}

// Only populated when job's state is JOB_STATE_FAILED or JOB_STATE_CANCELLED.
func (o HyperparameterTuningJobOutput) Error() GoogleRpcStatusResponseOutput {
	return o.ApplyT(func(v *HyperparameterTuningJob) GoogleRpcStatusResponseOutput { return v.Error }).(GoogleRpcStatusResponseOutput)
}

// The labels with user-defined metadata to organize HyperparameterTuningJobs. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.
func (o HyperparameterTuningJobOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *HyperparameterTuningJob) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

func (o HyperparameterTuningJobOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *HyperparameterTuningJob) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The number of failed Trials that need to be seen before failing the HyperparameterTuningJob. If set to 0, Vertex AI decides how many Trials must fail before the whole job fails.
func (o HyperparameterTuningJobOutput) MaxFailedTrialCount() pulumi.IntOutput {
	return o.ApplyT(func(v *HyperparameterTuningJob) pulumi.IntOutput { return v.MaxFailedTrialCount }).(pulumi.IntOutput)
}

// The desired total number of Trials.
func (o HyperparameterTuningJobOutput) MaxTrialCount() pulumi.IntOutput {
	return o.ApplyT(func(v *HyperparameterTuningJob) pulumi.IntOutput { return v.MaxTrialCount }).(pulumi.IntOutput)
}

// Resource name of the HyperparameterTuningJob.
func (o HyperparameterTuningJobOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *HyperparameterTuningJob) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The desired number of Trials to run in parallel.
func (o HyperparameterTuningJobOutput) ParallelTrialCount() pulumi.IntOutput {
	return o.ApplyT(func(v *HyperparameterTuningJob) pulumi.IntOutput { return v.ParallelTrialCount }).(pulumi.IntOutput)
}

func (o HyperparameterTuningJobOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *HyperparameterTuningJob) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Time when the HyperparameterTuningJob for the first time entered the `JOB_STATE_RUNNING` state.
func (o HyperparameterTuningJobOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v *HyperparameterTuningJob) pulumi.StringOutput { return v.StartTime }).(pulumi.StringOutput)
}

// The detailed state of the job.
func (o HyperparameterTuningJobOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *HyperparameterTuningJob) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Study configuration of the HyperparameterTuningJob.
func (o HyperparameterTuningJobOutput) StudySpec() GoogleCloudAiplatformV1beta1StudySpecResponseOutput {
	return o.ApplyT(func(v *HyperparameterTuningJob) GoogleCloudAiplatformV1beta1StudySpecResponseOutput {
		return v.StudySpec
	}).(GoogleCloudAiplatformV1beta1StudySpecResponseOutput)
}

// The spec of a trial job. The same spec applies to the CustomJobs created in all the trials.
func (o HyperparameterTuningJobOutput) TrialJobSpec() GoogleCloudAiplatformV1beta1CustomJobSpecResponseOutput {
	return o.ApplyT(func(v *HyperparameterTuningJob) GoogleCloudAiplatformV1beta1CustomJobSpecResponseOutput {
		return v.TrialJobSpec
	}).(GoogleCloudAiplatformV1beta1CustomJobSpecResponseOutput)
}

// Trials of the HyperparameterTuningJob.
func (o HyperparameterTuningJobOutput) Trials() GoogleCloudAiplatformV1beta1TrialResponseArrayOutput {
	return o.ApplyT(func(v *HyperparameterTuningJob) GoogleCloudAiplatformV1beta1TrialResponseArrayOutput { return v.Trials }).(GoogleCloudAiplatformV1beta1TrialResponseArrayOutput)
}

// Time when the HyperparameterTuningJob was most recently updated.
func (o HyperparameterTuningJobOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *HyperparameterTuningJob) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HyperparameterTuningJobInput)(nil)).Elem(), &HyperparameterTuningJob{})
	pulumi.RegisterOutputType(HyperparameterTuningJobOutput{})
}
