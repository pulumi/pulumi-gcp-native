// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a PipelineJob. A PipelineJob will run immediately when created.
// Auto-naming is currently not supported for this resource.
type PipelineJob struct {
	pulumi.CustomResourceState

	// Pipeline creation time.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The display name of the Pipeline. The name can be up to 128 characters long and can consist of any UTF-8 characters.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Customer-managed encryption key spec for a pipelineJob. If set, this PipelineJob and all of its sub-resources will be secured by this key.
	EncryptionSpec GoogleCloudAiplatformV1beta1EncryptionSpecResponseOutput `pulumi:"encryptionSpec"`
	// Pipeline end time.
	EndTime pulumi.StringOutput `pulumi:"endTime"`
	// The error that occurred during pipeline execution. Only populated when the pipeline's state is FAILED or CANCELLED.
	Error GoogleRpcStatusResponseOutput `pulumi:"error"`
	// The details of pipeline run. Not available in the list view.
	JobDetail GoogleCloudAiplatformV1beta1PipelineJobDetailResponseOutput `pulumi:"jobDetail"`
	// The labels with user-defined metadata to organize PipelineJob. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels. Note there is some reserved label key for Vertex AI Pipelines. - `vertex-ai-pipelines-run-billing-id`, user set value will get overrided.
	Labels   pulumi.StringMapOutput `pulumi:"labels"`
	Location pulumi.StringOutput    `pulumi:"location"`
	// The resource name of the PipelineJob.
	Name pulumi.StringOutput `pulumi:"name"`
	// The full name of the Compute Engine [network](/compute/docs/networks-and-firewalls#networks) to which the Pipeline Job's workload should be peered. For example, `projects/12345/global/networks/myVPC`. [Format](/compute/docs/reference/rest/v1/networks/insert) is of the form `projects/{project}/global/networks/{network}`. Where {project} is a project number, as in `12345`, and {network} is a network name. Private services access must already be configured for the network. Pipeline job will apply the network configuration to the Google Cloud resources being launched, if applied, such as Vertex AI Training or Dataflow job. If left unspecified, the workload is not peered with any network.
	Network pulumi.StringOutput `pulumi:"network"`
	// The ID to use for the PipelineJob, which will become the final component of the PipelineJob name. If not provided, an ID will be automatically generated. This value should be less than 128 characters, and valid characters are `/a-z-/`.
	PipelineJobId pulumi.StringPtrOutput `pulumi:"pipelineJobId"`
	// The spec of the pipeline.
	PipelineSpec pulumi.MapOutput    `pulumi:"pipelineSpec"`
	Project      pulumi.StringOutput `pulumi:"project"`
	// A list of names for the reserved ip ranges under the VPC network that can be used for this Pipeline Job's workload. If set, we will deploy the Pipeline Job's workload within the provided ip ranges. Otherwise, the job will be deployed to any ip ranges under the provided VPC network. Example: ['vertex-ai-ip-range'].
	ReservedIpRanges pulumi.StringArrayOutput `pulumi:"reservedIpRanges"`
	// Runtime config of the pipeline.
	RuntimeConfig GoogleCloudAiplatformV1beta1PipelineJobRuntimeConfigResponseOutput `pulumi:"runtimeConfig"`
	// The schedule resource name. Only returned if the Pipeline is created by Schedule API.
	ScheduleName pulumi.StringOutput `pulumi:"scheduleName"`
	// The service account that the pipeline workload runs as. If not specified, the Compute Engine default service account in the project will be used. See https://cloud.google.com/compute/docs/access/service-accounts#default_service_account Users starting the pipeline must have the `iam.serviceAccounts.actAs` permission on this service account.
	ServiceAccount pulumi.StringOutput `pulumi:"serviceAccount"`
	// Pipeline start time.
	StartTime pulumi.StringOutput `pulumi:"startTime"`
	// The detailed state of the job.
	State pulumi.StringOutput `pulumi:"state"`
	// Pipeline template metadata. Will fill up fields if PipelineJob.template_uri is from supported template registry.
	TemplateMetadata GoogleCloudAiplatformV1beta1PipelineTemplateMetadataResponseOutput `pulumi:"templateMetadata"`
	// A template uri from where the PipelineJob.pipeline_spec, if empty, will be downloaded. Currently, only uri from Vertex Template Registry & Gallery is supported. Reference to https://cloud.google.com/vertex-ai/docs/pipelines/create-pipeline-template.
	TemplateUri pulumi.StringOutput `pulumi:"templateUri"`
	// Timestamp when this PipelineJob was most recently updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewPipelineJob registers a new resource with the given unique name, arguments, and options.
func NewPipelineJob(ctx *pulumi.Context,
	name string, args *PipelineJobArgs, opts ...pulumi.ResourceOption) (*PipelineJob, error) {
	if args == nil {
		args = &PipelineJobArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PipelineJob
	err := ctx.RegisterResource("google-native:aiplatform/v1beta1:PipelineJob", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPipelineJob gets an existing PipelineJob resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPipelineJob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PipelineJobState, opts ...pulumi.ResourceOption) (*PipelineJob, error) {
	var resource PipelineJob
	err := ctx.ReadResource("google-native:aiplatform/v1beta1:PipelineJob", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PipelineJob resources.
type pipelineJobState struct {
}

type PipelineJobState struct {
}

func (PipelineJobState) ElementType() reflect.Type {
	return reflect.TypeOf((*pipelineJobState)(nil)).Elem()
}

type pipelineJobArgs struct {
	// The display name of the Pipeline. The name can be up to 128 characters long and can consist of any UTF-8 characters.
	DisplayName *string `pulumi:"displayName"`
	// Customer-managed encryption key spec for a pipelineJob. If set, this PipelineJob and all of its sub-resources will be secured by this key.
	EncryptionSpec *GoogleCloudAiplatformV1beta1EncryptionSpec `pulumi:"encryptionSpec"`
	// The labels with user-defined metadata to organize PipelineJob. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels. Note there is some reserved label key for Vertex AI Pipelines. - `vertex-ai-pipelines-run-billing-id`, user set value will get overrided.
	Labels   map[string]string `pulumi:"labels"`
	Location *string           `pulumi:"location"`
	// The full name of the Compute Engine [network](/compute/docs/networks-and-firewalls#networks) to which the Pipeline Job's workload should be peered. For example, `projects/12345/global/networks/myVPC`. [Format](/compute/docs/reference/rest/v1/networks/insert) is of the form `projects/{project}/global/networks/{network}`. Where {project} is a project number, as in `12345`, and {network} is a network name. Private services access must already be configured for the network. Pipeline job will apply the network configuration to the Google Cloud resources being launched, if applied, such as Vertex AI Training or Dataflow job. If left unspecified, the workload is not peered with any network.
	Network *string `pulumi:"network"`
	// The ID to use for the PipelineJob, which will become the final component of the PipelineJob name. If not provided, an ID will be automatically generated. This value should be less than 128 characters, and valid characters are `/a-z-/`.
	PipelineJobId *string `pulumi:"pipelineJobId"`
	// The spec of the pipeline.
	PipelineSpec map[string]interface{} `pulumi:"pipelineSpec"`
	Project      *string                `pulumi:"project"`
	// A list of names for the reserved ip ranges under the VPC network that can be used for this Pipeline Job's workload. If set, we will deploy the Pipeline Job's workload within the provided ip ranges. Otherwise, the job will be deployed to any ip ranges under the provided VPC network. Example: ['vertex-ai-ip-range'].
	ReservedIpRanges []string `pulumi:"reservedIpRanges"`
	// Runtime config of the pipeline.
	RuntimeConfig *GoogleCloudAiplatformV1beta1PipelineJobRuntimeConfig `pulumi:"runtimeConfig"`
	// The service account that the pipeline workload runs as. If not specified, the Compute Engine default service account in the project will be used. See https://cloud.google.com/compute/docs/access/service-accounts#default_service_account Users starting the pipeline must have the `iam.serviceAccounts.actAs` permission on this service account.
	ServiceAccount *string `pulumi:"serviceAccount"`
	// A template uri from where the PipelineJob.pipeline_spec, if empty, will be downloaded. Currently, only uri from Vertex Template Registry & Gallery is supported. Reference to https://cloud.google.com/vertex-ai/docs/pipelines/create-pipeline-template.
	TemplateUri *string `pulumi:"templateUri"`
}

// The set of arguments for constructing a PipelineJob resource.
type PipelineJobArgs struct {
	// The display name of the Pipeline. The name can be up to 128 characters long and can consist of any UTF-8 characters.
	DisplayName pulumi.StringPtrInput
	// Customer-managed encryption key spec for a pipelineJob. If set, this PipelineJob and all of its sub-resources will be secured by this key.
	EncryptionSpec GoogleCloudAiplatformV1beta1EncryptionSpecPtrInput
	// The labels with user-defined metadata to organize PipelineJob. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels. Note there is some reserved label key for Vertex AI Pipelines. - `vertex-ai-pipelines-run-billing-id`, user set value will get overrided.
	Labels   pulumi.StringMapInput
	Location pulumi.StringPtrInput
	// The full name of the Compute Engine [network](/compute/docs/networks-and-firewalls#networks) to which the Pipeline Job's workload should be peered. For example, `projects/12345/global/networks/myVPC`. [Format](/compute/docs/reference/rest/v1/networks/insert) is of the form `projects/{project}/global/networks/{network}`. Where {project} is a project number, as in `12345`, and {network} is a network name. Private services access must already be configured for the network. Pipeline job will apply the network configuration to the Google Cloud resources being launched, if applied, such as Vertex AI Training or Dataflow job. If left unspecified, the workload is not peered with any network.
	Network pulumi.StringPtrInput
	// The ID to use for the PipelineJob, which will become the final component of the PipelineJob name. If not provided, an ID will be automatically generated. This value should be less than 128 characters, and valid characters are `/a-z-/`.
	PipelineJobId pulumi.StringPtrInput
	// The spec of the pipeline.
	PipelineSpec pulumi.MapInput
	Project      pulumi.StringPtrInput
	// A list of names for the reserved ip ranges under the VPC network that can be used for this Pipeline Job's workload. If set, we will deploy the Pipeline Job's workload within the provided ip ranges. Otherwise, the job will be deployed to any ip ranges under the provided VPC network. Example: ['vertex-ai-ip-range'].
	ReservedIpRanges pulumi.StringArrayInput
	// Runtime config of the pipeline.
	RuntimeConfig GoogleCloudAiplatformV1beta1PipelineJobRuntimeConfigPtrInput
	// The service account that the pipeline workload runs as. If not specified, the Compute Engine default service account in the project will be used. See https://cloud.google.com/compute/docs/access/service-accounts#default_service_account Users starting the pipeline must have the `iam.serviceAccounts.actAs` permission on this service account.
	ServiceAccount pulumi.StringPtrInput
	// A template uri from where the PipelineJob.pipeline_spec, if empty, will be downloaded. Currently, only uri from Vertex Template Registry & Gallery is supported. Reference to https://cloud.google.com/vertex-ai/docs/pipelines/create-pipeline-template.
	TemplateUri pulumi.StringPtrInput
}

func (PipelineJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pipelineJobArgs)(nil)).Elem()
}

type PipelineJobInput interface {
	pulumi.Input

	ToPipelineJobOutput() PipelineJobOutput
	ToPipelineJobOutputWithContext(ctx context.Context) PipelineJobOutput
}

func (*PipelineJob) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineJob)(nil)).Elem()
}

func (i *PipelineJob) ToPipelineJobOutput() PipelineJobOutput {
	return i.ToPipelineJobOutputWithContext(context.Background())
}

func (i *PipelineJob) ToPipelineJobOutputWithContext(ctx context.Context) PipelineJobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineJobOutput)
}

type PipelineJobOutput struct{ *pulumi.OutputState }

func (PipelineJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineJob)(nil)).Elem()
}

func (o PipelineJobOutput) ToPipelineJobOutput() PipelineJobOutput {
	return o
}

func (o PipelineJobOutput) ToPipelineJobOutputWithContext(ctx context.Context) PipelineJobOutput {
	return o
}

// Pipeline creation time.
func (o PipelineJobOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *PipelineJob) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The display name of the Pipeline. The name can be up to 128 characters long and can consist of any UTF-8 characters.
func (o PipelineJobOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *PipelineJob) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Customer-managed encryption key spec for a pipelineJob. If set, this PipelineJob and all of its sub-resources will be secured by this key.
func (o PipelineJobOutput) EncryptionSpec() GoogleCloudAiplatformV1beta1EncryptionSpecResponseOutput {
	return o.ApplyT(func(v *PipelineJob) GoogleCloudAiplatformV1beta1EncryptionSpecResponseOutput { return v.EncryptionSpec }).(GoogleCloudAiplatformV1beta1EncryptionSpecResponseOutput)
}

// Pipeline end time.
func (o PipelineJobOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v *PipelineJob) pulumi.StringOutput { return v.EndTime }).(pulumi.StringOutput)
}

// The error that occurred during pipeline execution. Only populated when the pipeline's state is FAILED or CANCELLED.
func (o PipelineJobOutput) Error() GoogleRpcStatusResponseOutput {
	return o.ApplyT(func(v *PipelineJob) GoogleRpcStatusResponseOutput { return v.Error }).(GoogleRpcStatusResponseOutput)
}

// The details of pipeline run. Not available in the list view.
func (o PipelineJobOutput) JobDetail() GoogleCloudAiplatformV1beta1PipelineJobDetailResponseOutput {
	return o.ApplyT(func(v *PipelineJob) GoogleCloudAiplatformV1beta1PipelineJobDetailResponseOutput { return v.JobDetail }).(GoogleCloudAiplatformV1beta1PipelineJobDetailResponseOutput)
}

// The labels with user-defined metadata to organize PipelineJob. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels. Note there is some reserved label key for Vertex AI Pipelines. - `vertex-ai-pipelines-run-billing-id`, user set value will get overrided.
func (o PipelineJobOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PipelineJob) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

func (o PipelineJobOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *PipelineJob) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource name of the PipelineJob.
func (o PipelineJobOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PipelineJob) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The full name of the Compute Engine [network](/compute/docs/networks-and-firewalls#networks) to which the Pipeline Job's workload should be peered. For example, `projects/12345/global/networks/myVPC`. [Format](/compute/docs/reference/rest/v1/networks/insert) is of the form `projects/{project}/global/networks/{network}`. Where {project} is a project number, as in `12345`, and {network} is a network name. Private services access must already be configured for the network. Pipeline job will apply the network configuration to the Google Cloud resources being launched, if applied, such as Vertex AI Training or Dataflow job. If left unspecified, the workload is not peered with any network.
func (o PipelineJobOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v *PipelineJob) pulumi.StringOutput { return v.Network }).(pulumi.StringOutput)
}

// The ID to use for the PipelineJob, which will become the final component of the PipelineJob name. If not provided, an ID will be automatically generated. This value should be less than 128 characters, and valid characters are `/a-z-/`.
func (o PipelineJobOutput) PipelineJobId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineJob) pulumi.StringPtrOutput { return v.PipelineJobId }).(pulumi.StringPtrOutput)
}

// The spec of the pipeline.
func (o PipelineJobOutput) PipelineSpec() pulumi.MapOutput {
	return o.ApplyT(func(v *PipelineJob) pulumi.MapOutput { return v.PipelineSpec }).(pulumi.MapOutput)
}

func (o PipelineJobOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *PipelineJob) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// A list of names for the reserved ip ranges under the VPC network that can be used for this Pipeline Job's workload. If set, we will deploy the Pipeline Job's workload within the provided ip ranges. Otherwise, the job will be deployed to any ip ranges under the provided VPC network. Example: ['vertex-ai-ip-range'].
func (o PipelineJobOutput) ReservedIpRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PipelineJob) pulumi.StringArrayOutput { return v.ReservedIpRanges }).(pulumi.StringArrayOutput)
}

// Runtime config of the pipeline.
func (o PipelineJobOutput) RuntimeConfig() GoogleCloudAiplatformV1beta1PipelineJobRuntimeConfigResponseOutput {
	return o.ApplyT(func(v *PipelineJob) GoogleCloudAiplatformV1beta1PipelineJobRuntimeConfigResponseOutput {
		return v.RuntimeConfig
	}).(GoogleCloudAiplatformV1beta1PipelineJobRuntimeConfigResponseOutput)
}

// The schedule resource name. Only returned if the Pipeline is created by Schedule API.
func (o PipelineJobOutput) ScheduleName() pulumi.StringOutput {
	return o.ApplyT(func(v *PipelineJob) pulumi.StringOutput { return v.ScheduleName }).(pulumi.StringOutput)
}

// The service account that the pipeline workload runs as. If not specified, the Compute Engine default service account in the project will be used. See https://cloud.google.com/compute/docs/access/service-accounts#default_service_account Users starting the pipeline must have the `iam.serviceAccounts.actAs` permission on this service account.
func (o PipelineJobOutput) ServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v *PipelineJob) pulumi.StringOutput { return v.ServiceAccount }).(pulumi.StringOutput)
}

// Pipeline start time.
func (o PipelineJobOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v *PipelineJob) pulumi.StringOutput { return v.StartTime }).(pulumi.StringOutput)
}

// The detailed state of the job.
func (o PipelineJobOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *PipelineJob) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Pipeline template metadata. Will fill up fields if PipelineJob.template_uri is from supported template registry.
func (o PipelineJobOutput) TemplateMetadata() GoogleCloudAiplatformV1beta1PipelineTemplateMetadataResponseOutput {
	return o.ApplyT(func(v *PipelineJob) GoogleCloudAiplatformV1beta1PipelineTemplateMetadataResponseOutput {
		return v.TemplateMetadata
	}).(GoogleCloudAiplatformV1beta1PipelineTemplateMetadataResponseOutput)
}

// A template uri from where the PipelineJob.pipeline_spec, if empty, will be downloaded. Currently, only uri from Vertex Template Registry & Gallery is supported. Reference to https://cloud.google.com/vertex-ai/docs/pipelines/create-pipeline-template.
func (o PipelineJobOutput) TemplateUri() pulumi.StringOutput {
	return o.ApplyT(func(v *PipelineJob) pulumi.StringOutput { return v.TemplateUri }).(pulumi.StringOutput)
}

// Timestamp when this PipelineJob was most recently updated.
func (o PipelineJobOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *PipelineJob) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineJobInput)(nil)).Elem(), &PipelineJob{})
	pulumi.RegisterOutputType(PipelineJobOutput{})
}
