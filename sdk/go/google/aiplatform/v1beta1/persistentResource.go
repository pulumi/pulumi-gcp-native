// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a PersistentResource.
type PersistentResource struct {
	pulumi.CustomResourceState

	// Time when the PersistentResource was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Optional. The display name of the PersistentResource. The name can be up to 128 characters long and can consist of any UTF-8 characters.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Optional. Customer-managed encryption key spec for a PersistentResource. If set, this PersistentResource and all sub-resources of this PersistentResource will be secured by this key.
	EncryptionSpec GoogleCloudAiplatformV1beta1EncryptionSpecResponseOutput `pulumi:"encryptionSpec"`
	// Only populated when persistent resource's state is `STOPPING` or `ERROR`.
	Error GoogleRpcStatusResponseOutput `pulumi:"error"`
	// Optional. The labels with user-defined metadata to organize PersistentResource. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.
	Labels   pulumi.StringMapOutput `pulumi:"labels"`
	Location pulumi.StringOutput    `pulumi:"location"`
	// Immutable. Resource name of a PersistentResource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Optional. The full name of the Compute Engine [network](/compute/docs/networks-and-firewalls#networks) to peered with Vertex AI to host the persistent resources. For example, `projects/12345/global/networks/myVPC`. [Format](/compute/docs/reference/rest/v1/networks/insert) is of the form `projects/{project}/global/networks/{network}`. Where {project} is a project number, as in `12345`, and {network} is a network name. To specify this field, you must have already [configured VPC Network Peering for Vertex AI](https://cloud.google.com/vertex-ai/docs/general/vpc-peering). If this field is left unspecified, the resources aren't peered with any network.
	Network pulumi.StringOutput `pulumi:"network"`
	// Required. The ID to use for the PersistentResource, which become the final component of the PersistentResource's resource name. The maximum length is 63 characters, and valid characters are `/^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$/`.
	PersistentResourceId pulumi.StringOutput `pulumi:"persistentResourceId"`
	Project              pulumi.StringOutput `pulumi:"project"`
	// Optional. A list of names for the reserved IP ranges under the VPC network that can be used for this persistent resource. If set, we will deploy the persistent resource within the provided IP ranges. Otherwise, the persistent resource is deployed to any IP ranges under the provided VPC network. Example: ['vertex-ai-ip-range'].
	ReservedIpRanges pulumi.StringArrayOutput `pulumi:"reservedIpRanges"`
	// The spec of the pools of different resources.
	ResourcePools GoogleCloudAiplatformV1beta1ResourcePoolResponseArrayOutput `pulumi:"resourcePools"`
	// Runtime information of the Persistent Resource.
	ResourceRuntime GoogleCloudAiplatformV1beta1ResourceRuntimeResponseOutput `pulumi:"resourceRuntime"`
	// Optional. Persistent Resource runtime spec. For example, used for Ray cluster configuration.
	ResourceRuntimeSpec GoogleCloudAiplatformV1beta1ResourceRuntimeSpecResponseOutput `pulumi:"resourceRuntimeSpec"`
	// Time when the PersistentResource for the first time entered the `RUNNING` state.
	StartTime pulumi.StringOutput `pulumi:"startTime"`
	// The detailed state of a Study.
	State pulumi.StringOutput `pulumi:"state"`
	// Time when the PersistentResource was most recently updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewPersistentResource registers a new resource with the given unique name, arguments, and options.
func NewPersistentResource(ctx *pulumi.Context,
	name string, args *PersistentResourceArgs, opts ...pulumi.ResourceOption) (*PersistentResource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PersistentResourceId == nil {
		return nil, errors.New("invalid value for required argument 'PersistentResourceId'")
	}
	if args.ResourcePools == nil {
		return nil, errors.New("invalid value for required argument 'ResourcePools'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"location",
		"persistentResourceId",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PersistentResource
	err := ctx.RegisterResource("google-native:aiplatform/v1beta1:PersistentResource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPersistentResource gets an existing PersistentResource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPersistentResource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PersistentResourceState, opts ...pulumi.ResourceOption) (*PersistentResource, error) {
	var resource PersistentResource
	err := ctx.ReadResource("google-native:aiplatform/v1beta1:PersistentResource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PersistentResource resources.
type persistentResourceState struct {
}

type PersistentResourceState struct {
}

func (PersistentResourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*persistentResourceState)(nil)).Elem()
}

type persistentResourceArgs struct {
	// Optional. The display name of the PersistentResource. The name can be up to 128 characters long and can consist of any UTF-8 characters.
	DisplayName *string `pulumi:"displayName"`
	// Optional. Customer-managed encryption key spec for a PersistentResource. If set, this PersistentResource and all sub-resources of this PersistentResource will be secured by this key.
	EncryptionSpec *GoogleCloudAiplatformV1beta1EncryptionSpec `pulumi:"encryptionSpec"`
	// Optional. The labels with user-defined metadata to organize PersistentResource. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.
	Labels   map[string]string `pulumi:"labels"`
	Location *string           `pulumi:"location"`
	// Immutable. Resource name of a PersistentResource.
	Name *string `pulumi:"name"`
	// Optional. The full name of the Compute Engine [network](/compute/docs/networks-and-firewalls#networks) to peered with Vertex AI to host the persistent resources. For example, `projects/12345/global/networks/myVPC`. [Format](/compute/docs/reference/rest/v1/networks/insert) is of the form `projects/{project}/global/networks/{network}`. Where {project} is a project number, as in `12345`, and {network} is a network name. To specify this field, you must have already [configured VPC Network Peering for Vertex AI](https://cloud.google.com/vertex-ai/docs/general/vpc-peering). If this field is left unspecified, the resources aren't peered with any network.
	Network *string `pulumi:"network"`
	// Required. The ID to use for the PersistentResource, which become the final component of the PersistentResource's resource name. The maximum length is 63 characters, and valid characters are `/^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$/`.
	PersistentResourceId string  `pulumi:"persistentResourceId"`
	Project              *string `pulumi:"project"`
	// Optional. A list of names for the reserved IP ranges under the VPC network that can be used for this persistent resource. If set, we will deploy the persistent resource within the provided IP ranges. Otherwise, the persistent resource is deployed to any IP ranges under the provided VPC network. Example: ['vertex-ai-ip-range'].
	ReservedIpRanges []string `pulumi:"reservedIpRanges"`
	// The spec of the pools of different resources.
	ResourcePools []GoogleCloudAiplatformV1beta1ResourcePool `pulumi:"resourcePools"`
	// Optional. Persistent Resource runtime spec. For example, used for Ray cluster configuration.
	ResourceRuntimeSpec *GoogleCloudAiplatformV1beta1ResourceRuntimeSpec `pulumi:"resourceRuntimeSpec"`
}

// The set of arguments for constructing a PersistentResource resource.
type PersistentResourceArgs struct {
	// Optional. The display name of the PersistentResource. The name can be up to 128 characters long and can consist of any UTF-8 characters.
	DisplayName pulumi.StringPtrInput
	// Optional. Customer-managed encryption key spec for a PersistentResource. If set, this PersistentResource and all sub-resources of this PersistentResource will be secured by this key.
	EncryptionSpec GoogleCloudAiplatformV1beta1EncryptionSpecPtrInput
	// Optional. The labels with user-defined metadata to organize PersistentResource. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.
	Labels   pulumi.StringMapInput
	Location pulumi.StringPtrInput
	// Immutable. Resource name of a PersistentResource.
	Name pulumi.StringPtrInput
	// Optional. The full name of the Compute Engine [network](/compute/docs/networks-and-firewalls#networks) to peered with Vertex AI to host the persistent resources. For example, `projects/12345/global/networks/myVPC`. [Format](/compute/docs/reference/rest/v1/networks/insert) is of the form `projects/{project}/global/networks/{network}`. Where {project} is a project number, as in `12345`, and {network} is a network name. To specify this field, you must have already [configured VPC Network Peering for Vertex AI](https://cloud.google.com/vertex-ai/docs/general/vpc-peering). If this field is left unspecified, the resources aren't peered with any network.
	Network pulumi.StringPtrInput
	// Required. The ID to use for the PersistentResource, which become the final component of the PersistentResource's resource name. The maximum length is 63 characters, and valid characters are `/^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$/`.
	PersistentResourceId pulumi.StringInput
	Project              pulumi.StringPtrInput
	// Optional. A list of names for the reserved IP ranges under the VPC network that can be used for this persistent resource. If set, we will deploy the persistent resource within the provided IP ranges. Otherwise, the persistent resource is deployed to any IP ranges under the provided VPC network. Example: ['vertex-ai-ip-range'].
	ReservedIpRanges pulumi.StringArrayInput
	// The spec of the pools of different resources.
	ResourcePools GoogleCloudAiplatformV1beta1ResourcePoolArrayInput
	// Optional. Persistent Resource runtime spec. For example, used for Ray cluster configuration.
	ResourceRuntimeSpec GoogleCloudAiplatformV1beta1ResourceRuntimeSpecPtrInput
}

func (PersistentResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*persistentResourceArgs)(nil)).Elem()
}

type PersistentResourceInput interface {
	pulumi.Input

	ToPersistentResourceOutput() PersistentResourceOutput
	ToPersistentResourceOutputWithContext(ctx context.Context) PersistentResourceOutput
}

func (*PersistentResource) ElementType() reflect.Type {
	return reflect.TypeOf((**PersistentResource)(nil)).Elem()
}

func (i *PersistentResource) ToPersistentResourceOutput() PersistentResourceOutput {
	return i.ToPersistentResourceOutputWithContext(context.Background())
}

func (i *PersistentResource) ToPersistentResourceOutputWithContext(ctx context.Context) PersistentResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistentResourceOutput)
}

type PersistentResourceOutput struct{ *pulumi.OutputState }

func (PersistentResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PersistentResource)(nil)).Elem()
}

func (o PersistentResourceOutput) ToPersistentResourceOutput() PersistentResourceOutput {
	return o
}

func (o PersistentResourceOutput) ToPersistentResourceOutputWithContext(ctx context.Context) PersistentResourceOutput {
	return o
}

// Time when the PersistentResource was created.
func (o PersistentResourceOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *PersistentResource) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Optional. The display name of the PersistentResource. The name can be up to 128 characters long and can consist of any UTF-8 characters.
func (o PersistentResourceOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *PersistentResource) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Optional. Customer-managed encryption key spec for a PersistentResource. If set, this PersistentResource and all sub-resources of this PersistentResource will be secured by this key.
func (o PersistentResourceOutput) EncryptionSpec() GoogleCloudAiplatformV1beta1EncryptionSpecResponseOutput {
	return o.ApplyT(func(v *PersistentResource) GoogleCloudAiplatformV1beta1EncryptionSpecResponseOutput {
		return v.EncryptionSpec
	}).(GoogleCloudAiplatformV1beta1EncryptionSpecResponseOutput)
}

// Only populated when persistent resource's state is `STOPPING` or `ERROR`.
func (o PersistentResourceOutput) Error() GoogleRpcStatusResponseOutput {
	return o.ApplyT(func(v *PersistentResource) GoogleRpcStatusResponseOutput { return v.Error }).(GoogleRpcStatusResponseOutput)
}

// Optional. The labels with user-defined metadata to organize PersistentResource. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.
func (o PersistentResourceOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PersistentResource) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

func (o PersistentResourceOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *PersistentResource) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Immutable. Resource name of a PersistentResource.
func (o PersistentResourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PersistentResource) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional. The full name of the Compute Engine [network](/compute/docs/networks-and-firewalls#networks) to peered with Vertex AI to host the persistent resources. For example, `projects/12345/global/networks/myVPC`. [Format](/compute/docs/reference/rest/v1/networks/insert) is of the form `projects/{project}/global/networks/{network}`. Where {project} is a project number, as in `12345`, and {network} is a network name. To specify this field, you must have already [configured VPC Network Peering for Vertex AI](https://cloud.google.com/vertex-ai/docs/general/vpc-peering). If this field is left unspecified, the resources aren't peered with any network.
func (o PersistentResourceOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v *PersistentResource) pulumi.StringOutput { return v.Network }).(pulumi.StringOutput)
}

// Required. The ID to use for the PersistentResource, which become the final component of the PersistentResource's resource name. The maximum length is 63 characters, and valid characters are `/^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$/`.
func (o PersistentResourceOutput) PersistentResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *PersistentResource) pulumi.StringOutput { return v.PersistentResourceId }).(pulumi.StringOutput)
}

func (o PersistentResourceOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *PersistentResource) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Optional. A list of names for the reserved IP ranges under the VPC network that can be used for this persistent resource. If set, we will deploy the persistent resource within the provided IP ranges. Otherwise, the persistent resource is deployed to any IP ranges under the provided VPC network. Example: ['vertex-ai-ip-range'].
func (o PersistentResourceOutput) ReservedIpRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PersistentResource) pulumi.StringArrayOutput { return v.ReservedIpRanges }).(pulumi.StringArrayOutput)
}

// The spec of the pools of different resources.
func (o PersistentResourceOutput) ResourcePools() GoogleCloudAiplatformV1beta1ResourcePoolResponseArrayOutput {
	return o.ApplyT(func(v *PersistentResource) GoogleCloudAiplatformV1beta1ResourcePoolResponseArrayOutput {
		return v.ResourcePools
	}).(GoogleCloudAiplatformV1beta1ResourcePoolResponseArrayOutput)
}

// Runtime information of the Persistent Resource.
func (o PersistentResourceOutput) ResourceRuntime() GoogleCloudAiplatformV1beta1ResourceRuntimeResponseOutput {
	return o.ApplyT(func(v *PersistentResource) GoogleCloudAiplatformV1beta1ResourceRuntimeResponseOutput {
		return v.ResourceRuntime
	}).(GoogleCloudAiplatformV1beta1ResourceRuntimeResponseOutput)
}

// Optional. Persistent Resource runtime spec. For example, used for Ray cluster configuration.
func (o PersistentResourceOutput) ResourceRuntimeSpec() GoogleCloudAiplatformV1beta1ResourceRuntimeSpecResponseOutput {
	return o.ApplyT(func(v *PersistentResource) GoogleCloudAiplatformV1beta1ResourceRuntimeSpecResponseOutput {
		return v.ResourceRuntimeSpec
	}).(GoogleCloudAiplatformV1beta1ResourceRuntimeSpecResponseOutput)
}

// Time when the PersistentResource for the first time entered the `RUNNING` state.
func (o PersistentResourceOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v *PersistentResource) pulumi.StringOutput { return v.StartTime }).(pulumi.StringOutput)
}

// The detailed state of a Study.
func (o PersistentResourceOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *PersistentResource) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Time when the PersistentResource was most recently updated.
func (o PersistentResourceOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *PersistentResource) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PersistentResourceInput)(nil)).Elem(), &PersistentResource{})
	pulumi.RegisterOutputType(PersistentResourceOutput{})
}
