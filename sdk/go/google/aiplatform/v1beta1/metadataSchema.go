// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a MetadataSchema.
// Auto-naming is currently not supported for this resource.
// Note - this resource's API doesn't support deletion. When deleted, the resource will persist
// on Google Cloud even though it will be deleted from Pulumi state.
type MetadataSchema struct {
	pulumi.CustomResourceState

	// Timestamp when this MetadataSchema was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Description of the Metadata Schema
	Description pulumi.StringOutput `pulumi:"description"`
	Location    pulumi.StringOutput `pulumi:"location"`
	// The {metadata_schema} portion of the resource name with the format: `projects/{project}/locations/{location}/metadataStores/{metadatastore}/metadataSchemas/{metadataschema}` If not provided, the MetadataStore's ID will be a UUID generated by the service. Must be 4-128 characters in length. Valid characters are `/a-z-/`. Must be unique across all MetadataSchemas in the parent Location. (Otherwise the request will fail with ALREADY_EXISTS, or PERMISSION_DENIED if the caller can't view the preexisting MetadataSchema.)
	MetadataSchemaId pulumi.StringPtrOutput `pulumi:"metadataSchemaId"`
	MetadataStoreId  pulumi.StringOutput    `pulumi:"metadataStoreId"`
	// The resource name of the MetadataSchema.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// The raw YAML string representation of the MetadataSchema. The combination of [MetadataSchema.version] and the schema name given by `title` in [MetadataSchema.schema] must be unique within a MetadataStore. The schema is defined as an OpenAPI 3.0.2 [MetadataSchema Object](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#schemaObject)
	Schema pulumi.StringOutput `pulumi:"schema"`
	// The type of the MetadataSchema. This is a property that identifies which metadata types will use the MetadataSchema.
	SchemaType pulumi.StringOutput `pulumi:"schemaType"`
	// The version of the MetadataSchema. The version's format must match the following regular expression: `^[0-9]+.+.+$`, which would allow to order/compare different versions. Example: 1.0.0, 1.0.1, etc.
	SchemaVersion pulumi.StringOutput `pulumi:"schemaVersion"`
}

// NewMetadataSchema registers a new resource with the given unique name, arguments, and options.
func NewMetadataSchema(ctx *pulumi.Context,
	name string, args *MetadataSchemaArgs, opts ...pulumi.ResourceOption) (*MetadataSchema, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MetadataStoreId == nil {
		return nil, errors.New("invalid value for required argument 'MetadataStoreId'")
	}
	if args.Schema == nil {
		return nil, errors.New("invalid value for required argument 'Schema'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"location",
		"metadataStoreId",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MetadataSchema
	err := ctx.RegisterResource("google-native:aiplatform/v1beta1:MetadataSchema", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMetadataSchema gets an existing MetadataSchema resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMetadataSchema(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MetadataSchemaState, opts ...pulumi.ResourceOption) (*MetadataSchema, error) {
	var resource MetadataSchema
	err := ctx.ReadResource("google-native:aiplatform/v1beta1:MetadataSchema", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MetadataSchema resources.
type metadataSchemaState struct {
}

type MetadataSchemaState struct {
}

func (MetadataSchemaState) ElementType() reflect.Type {
	return reflect.TypeOf((*metadataSchemaState)(nil)).Elem()
}

type metadataSchemaArgs struct {
	// Description of the Metadata Schema
	Description *string `pulumi:"description"`
	Location    *string `pulumi:"location"`
	// The {metadata_schema} portion of the resource name with the format: `projects/{project}/locations/{location}/metadataStores/{metadatastore}/metadataSchemas/{metadataschema}` If not provided, the MetadataStore's ID will be a UUID generated by the service. Must be 4-128 characters in length. Valid characters are `/a-z-/`. Must be unique across all MetadataSchemas in the parent Location. (Otherwise the request will fail with ALREADY_EXISTS, or PERMISSION_DENIED if the caller can't view the preexisting MetadataSchema.)
	MetadataSchemaId *string `pulumi:"metadataSchemaId"`
	MetadataStoreId  string  `pulumi:"metadataStoreId"`
	Project          *string `pulumi:"project"`
	// The raw YAML string representation of the MetadataSchema. The combination of [MetadataSchema.version] and the schema name given by `title` in [MetadataSchema.schema] must be unique within a MetadataStore. The schema is defined as an OpenAPI 3.0.2 [MetadataSchema Object](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#schemaObject)
	Schema string `pulumi:"schema"`
	// The type of the MetadataSchema. This is a property that identifies which metadata types will use the MetadataSchema.
	SchemaType *MetadataSchemaSchemaType `pulumi:"schemaType"`
	// The version of the MetadataSchema. The version's format must match the following regular expression: `^[0-9]+.+.+$`, which would allow to order/compare different versions. Example: 1.0.0, 1.0.1, etc.
	SchemaVersion *string `pulumi:"schemaVersion"`
}

// The set of arguments for constructing a MetadataSchema resource.
type MetadataSchemaArgs struct {
	// Description of the Metadata Schema
	Description pulumi.StringPtrInput
	Location    pulumi.StringPtrInput
	// The {metadata_schema} portion of the resource name with the format: `projects/{project}/locations/{location}/metadataStores/{metadatastore}/metadataSchemas/{metadataschema}` If not provided, the MetadataStore's ID will be a UUID generated by the service. Must be 4-128 characters in length. Valid characters are `/a-z-/`. Must be unique across all MetadataSchemas in the parent Location. (Otherwise the request will fail with ALREADY_EXISTS, or PERMISSION_DENIED if the caller can't view the preexisting MetadataSchema.)
	MetadataSchemaId pulumi.StringPtrInput
	MetadataStoreId  pulumi.StringInput
	Project          pulumi.StringPtrInput
	// The raw YAML string representation of the MetadataSchema. The combination of [MetadataSchema.version] and the schema name given by `title` in [MetadataSchema.schema] must be unique within a MetadataStore. The schema is defined as an OpenAPI 3.0.2 [MetadataSchema Object](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#schemaObject)
	Schema pulumi.StringInput
	// The type of the MetadataSchema. This is a property that identifies which metadata types will use the MetadataSchema.
	SchemaType MetadataSchemaSchemaTypePtrInput
	// The version of the MetadataSchema. The version's format must match the following regular expression: `^[0-9]+.+.+$`, which would allow to order/compare different versions. Example: 1.0.0, 1.0.1, etc.
	SchemaVersion pulumi.StringPtrInput
}

func (MetadataSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*metadataSchemaArgs)(nil)).Elem()
}

type MetadataSchemaInput interface {
	pulumi.Input

	ToMetadataSchemaOutput() MetadataSchemaOutput
	ToMetadataSchemaOutputWithContext(ctx context.Context) MetadataSchemaOutput
}

func (*MetadataSchema) ElementType() reflect.Type {
	return reflect.TypeOf((**MetadataSchema)(nil)).Elem()
}

func (i *MetadataSchema) ToMetadataSchemaOutput() MetadataSchemaOutput {
	return i.ToMetadataSchemaOutputWithContext(context.Background())
}

func (i *MetadataSchema) ToMetadataSchemaOutputWithContext(ctx context.Context) MetadataSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataSchemaOutput)
}

type MetadataSchemaOutput struct{ *pulumi.OutputState }

func (MetadataSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetadataSchema)(nil)).Elem()
}

func (o MetadataSchemaOutput) ToMetadataSchemaOutput() MetadataSchemaOutput {
	return o
}

func (o MetadataSchemaOutput) ToMetadataSchemaOutputWithContext(ctx context.Context) MetadataSchemaOutput {
	return o
}

// Timestamp when this MetadataSchema was created.
func (o MetadataSchemaOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *MetadataSchema) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Description of the Metadata Schema
func (o MetadataSchemaOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *MetadataSchema) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o MetadataSchemaOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *MetadataSchema) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The {metadata_schema} portion of the resource name with the format: `projects/{project}/locations/{location}/metadataStores/{metadatastore}/metadataSchemas/{metadataschema}` If not provided, the MetadataStore's ID will be a UUID generated by the service. Must be 4-128 characters in length. Valid characters are `/a-z-/`. Must be unique across all MetadataSchemas in the parent Location. (Otherwise the request will fail with ALREADY_EXISTS, or PERMISSION_DENIED if the caller can't view the preexisting MetadataSchema.)
func (o MetadataSchemaOutput) MetadataSchemaId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetadataSchema) pulumi.StringPtrOutput { return v.MetadataSchemaId }).(pulumi.StringPtrOutput)
}

func (o MetadataSchemaOutput) MetadataStoreId() pulumi.StringOutput {
	return o.ApplyT(func(v *MetadataSchema) pulumi.StringOutput { return v.MetadataStoreId }).(pulumi.StringOutput)
}

// The resource name of the MetadataSchema.
func (o MetadataSchemaOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MetadataSchema) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o MetadataSchemaOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *MetadataSchema) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The raw YAML string representation of the MetadataSchema. The combination of [MetadataSchema.version] and the schema name given by `title` in [MetadataSchema.schema] must be unique within a MetadataStore. The schema is defined as an OpenAPI 3.0.2 [MetadataSchema Object](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#schemaObject)
func (o MetadataSchemaOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v *MetadataSchema) pulumi.StringOutput { return v.Schema }).(pulumi.StringOutput)
}

// The type of the MetadataSchema. This is a property that identifies which metadata types will use the MetadataSchema.
func (o MetadataSchemaOutput) SchemaType() pulumi.StringOutput {
	return o.ApplyT(func(v *MetadataSchema) pulumi.StringOutput { return v.SchemaType }).(pulumi.StringOutput)
}

// The version of the MetadataSchema. The version's format must match the following regular expression: `^[0-9]+.+.+$`, which would allow to order/compare different versions. Example: 1.0.0, 1.0.1, etc.
func (o MetadataSchemaOutput) SchemaVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *MetadataSchema) pulumi.StringOutput { return v.SchemaVersion }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MetadataSchemaInput)(nil)).Elem(), &MetadataSchema{})
	pulumi.RegisterOutputType(MetadataSchemaOutput{})
}
