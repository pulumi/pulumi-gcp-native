// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a TrainingPipeline. A created TrainingPipeline right away will be attempted to be run.
// Auto-naming is currently not supported for this resource.
type TrainingPipeline struct {
	pulumi.CustomResourceState

	// Time when the TrainingPipeline was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The user-defined name of this TrainingPipeline.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Customer-managed encryption key spec for a TrainingPipeline. If set, this TrainingPipeline will be secured by this key. Note: Model trained by this TrainingPipeline is also secured by this key if model_to_upload is not set separately.
	EncryptionSpec GoogleCloudAiplatformV1beta1EncryptionSpecResponseOutput `pulumi:"encryptionSpec"`
	// Time when the TrainingPipeline entered any of the following states: `PIPELINE_STATE_SUCCEEDED`, `PIPELINE_STATE_FAILED`, `PIPELINE_STATE_CANCELLED`.
	EndTime pulumi.StringOutput `pulumi:"endTime"`
	// Only populated when the pipeline's state is `PIPELINE_STATE_FAILED` or `PIPELINE_STATE_CANCELLED`.
	Error GoogleRpcStatusResponseOutput `pulumi:"error"`
	// Specifies Vertex AI owned input data that may be used for training the Model. The TrainingPipeline's training_task_definition should make clear whether this config is used and if there are any special requirements on how it should be filled. If nothing about this config is mentioned in the training_task_definition, then it should be assumed that the TrainingPipeline does not depend on this configuration.
	InputDataConfig GoogleCloudAiplatformV1beta1InputDataConfigResponseOutput `pulumi:"inputDataConfig"`
	// The labels with user-defined metadata to organize TrainingPipelines. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.
	Labels   pulumi.StringMapOutput `pulumi:"labels"`
	Location pulumi.StringOutput    `pulumi:"location"`
	// Optional. The ID to use for the uploaded Model, which will become the final component of the model resource name. This value may be up to 63 characters, and valid characters are `[a-z0-9_-]`. The first character cannot be a number or hyphen.
	ModelId pulumi.StringOutput `pulumi:"modelId"`
	// Describes the Model that may be uploaded (via ModelService.UploadModel) by this TrainingPipeline. The TrainingPipeline's training_task_definition should make clear whether this Model description should be populated, and if there are any special requirements regarding how it should be filled. If nothing is mentioned in the training_task_definition, then it should be assumed that this field should not be filled and the training task either uploads the Model without a need of this information, or that training task does not support uploading a Model as part of the pipeline. When the Pipeline's state becomes `PIPELINE_STATE_SUCCEEDED` and the trained Model had been uploaded into Vertex AI, then the model_to_upload's resource name is populated. The Model is always uploaded into the Project and Location in which this pipeline is.
	ModelToUpload GoogleCloudAiplatformV1beta1ModelResponseOutput `pulumi:"modelToUpload"`
	// Resource name of the TrainingPipeline.
	Name pulumi.StringOutput `pulumi:"name"`
	// Optional. When specify this field, the `model_to_upload` will not be uploaded as a new model, instead, it will become a new version of this `parent_model`.
	ParentModel pulumi.StringOutput `pulumi:"parentModel"`
	Project     pulumi.StringOutput `pulumi:"project"`
	// Time when the TrainingPipeline for the first time entered the `PIPELINE_STATE_RUNNING` state.
	StartTime pulumi.StringOutput `pulumi:"startTime"`
	// The detailed state of the pipeline.
	State pulumi.StringOutput `pulumi:"state"`
	// A Google Cloud Storage path to the YAML file that defines the training task which is responsible for producing the model artifact, and may also include additional auxiliary work. The definition files that can be used here are found in gs://google-cloud-aiplatform/schema/trainingjob/definition/. Note: The URI given on output will be immutable and probably different, including the URI scheme, than the one given on input. The output URI will point to a location where the user only has a read access.
	TrainingTaskDefinition pulumi.StringOutput `pulumi:"trainingTaskDefinition"`
	// The training task's parameter(s), as specified in the training_task_definition's `inputs`.
	TrainingTaskInputs pulumi.AnyOutput `pulumi:"trainingTaskInputs"`
	// The metadata information as specified in the training_task_definition's `metadata`. This metadata is an auxiliary runtime and final information about the training task. While the pipeline is running this information is populated only at a best effort basis. Only present if the pipeline's training_task_definition contains `metadata` object.
	TrainingTaskMetadata pulumi.AnyOutput `pulumi:"trainingTaskMetadata"`
	// Time when the TrainingPipeline was most recently updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewTrainingPipeline registers a new resource with the given unique name, arguments, and options.
func NewTrainingPipeline(ctx *pulumi.Context,
	name string, args *TrainingPipelineArgs, opts ...pulumi.ResourceOption) (*TrainingPipeline, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.TrainingTaskDefinition == nil {
		return nil, errors.New("invalid value for required argument 'TrainingTaskDefinition'")
	}
	if args.TrainingTaskInputs == nil {
		return nil, errors.New("invalid value for required argument 'TrainingTaskInputs'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TrainingPipeline
	err := ctx.RegisterResource("google-native:aiplatform/v1beta1:TrainingPipeline", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTrainingPipeline gets an existing TrainingPipeline resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTrainingPipeline(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TrainingPipelineState, opts ...pulumi.ResourceOption) (*TrainingPipeline, error) {
	var resource TrainingPipeline
	err := ctx.ReadResource("google-native:aiplatform/v1beta1:TrainingPipeline", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TrainingPipeline resources.
type trainingPipelineState struct {
}

type TrainingPipelineState struct {
}

func (TrainingPipelineState) ElementType() reflect.Type {
	return reflect.TypeOf((*trainingPipelineState)(nil)).Elem()
}

type trainingPipelineArgs struct {
	// The user-defined name of this TrainingPipeline.
	DisplayName string `pulumi:"displayName"`
	// Customer-managed encryption key spec for a TrainingPipeline. If set, this TrainingPipeline will be secured by this key. Note: Model trained by this TrainingPipeline is also secured by this key if model_to_upload is not set separately.
	EncryptionSpec *GoogleCloudAiplatformV1beta1EncryptionSpec `pulumi:"encryptionSpec"`
	// Specifies Vertex AI owned input data that may be used for training the Model. The TrainingPipeline's training_task_definition should make clear whether this config is used and if there are any special requirements on how it should be filled. If nothing about this config is mentioned in the training_task_definition, then it should be assumed that the TrainingPipeline does not depend on this configuration.
	InputDataConfig *GoogleCloudAiplatformV1beta1InputDataConfig `pulumi:"inputDataConfig"`
	// The labels with user-defined metadata to organize TrainingPipelines. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.
	Labels   map[string]string `pulumi:"labels"`
	Location *string           `pulumi:"location"`
	// Optional. The ID to use for the uploaded Model, which will become the final component of the model resource name. This value may be up to 63 characters, and valid characters are `[a-z0-9_-]`. The first character cannot be a number or hyphen.
	ModelId *string `pulumi:"modelId"`
	// Describes the Model that may be uploaded (via ModelService.UploadModel) by this TrainingPipeline. The TrainingPipeline's training_task_definition should make clear whether this Model description should be populated, and if there are any special requirements regarding how it should be filled. If nothing is mentioned in the training_task_definition, then it should be assumed that this field should not be filled and the training task either uploads the Model without a need of this information, or that training task does not support uploading a Model as part of the pipeline. When the Pipeline's state becomes `PIPELINE_STATE_SUCCEEDED` and the trained Model had been uploaded into Vertex AI, then the model_to_upload's resource name is populated. The Model is always uploaded into the Project and Location in which this pipeline is.
	ModelToUpload *GoogleCloudAiplatformV1beta1Model `pulumi:"modelToUpload"`
	// Optional. When specify this field, the `model_to_upload` will not be uploaded as a new model, instead, it will become a new version of this `parent_model`.
	ParentModel *string `pulumi:"parentModel"`
	Project     *string `pulumi:"project"`
	// A Google Cloud Storage path to the YAML file that defines the training task which is responsible for producing the model artifact, and may also include additional auxiliary work. The definition files that can be used here are found in gs://google-cloud-aiplatform/schema/trainingjob/definition/. Note: The URI given on output will be immutable and probably different, including the URI scheme, than the one given on input. The output URI will point to a location where the user only has a read access.
	TrainingTaskDefinition string `pulumi:"trainingTaskDefinition"`
	// The training task's parameter(s), as specified in the training_task_definition's `inputs`.
	TrainingTaskInputs interface{} `pulumi:"trainingTaskInputs"`
}

// The set of arguments for constructing a TrainingPipeline resource.
type TrainingPipelineArgs struct {
	// The user-defined name of this TrainingPipeline.
	DisplayName pulumi.StringInput
	// Customer-managed encryption key spec for a TrainingPipeline. If set, this TrainingPipeline will be secured by this key. Note: Model trained by this TrainingPipeline is also secured by this key if model_to_upload is not set separately.
	EncryptionSpec GoogleCloudAiplatformV1beta1EncryptionSpecPtrInput
	// Specifies Vertex AI owned input data that may be used for training the Model. The TrainingPipeline's training_task_definition should make clear whether this config is used and if there are any special requirements on how it should be filled. If nothing about this config is mentioned in the training_task_definition, then it should be assumed that the TrainingPipeline does not depend on this configuration.
	InputDataConfig GoogleCloudAiplatformV1beta1InputDataConfigPtrInput
	// The labels with user-defined metadata to organize TrainingPipelines. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.
	Labels   pulumi.StringMapInput
	Location pulumi.StringPtrInput
	// Optional. The ID to use for the uploaded Model, which will become the final component of the model resource name. This value may be up to 63 characters, and valid characters are `[a-z0-9_-]`. The first character cannot be a number or hyphen.
	ModelId pulumi.StringPtrInput
	// Describes the Model that may be uploaded (via ModelService.UploadModel) by this TrainingPipeline. The TrainingPipeline's training_task_definition should make clear whether this Model description should be populated, and if there are any special requirements regarding how it should be filled. If nothing is mentioned in the training_task_definition, then it should be assumed that this field should not be filled and the training task either uploads the Model without a need of this information, or that training task does not support uploading a Model as part of the pipeline. When the Pipeline's state becomes `PIPELINE_STATE_SUCCEEDED` and the trained Model had been uploaded into Vertex AI, then the model_to_upload's resource name is populated. The Model is always uploaded into the Project and Location in which this pipeline is.
	ModelToUpload GoogleCloudAiplatformV1beta1ModelPtrInput
	// Optional. When specify this field, the `model_to_upload` will not be uploaded as a new model, instead, it will become a new version of this `parent_model`.
	ParentModel pulumi.StringPtrInput
	Project     pulumi.StringPtrInput
	// A Google Cloud Storage path to the YAML file that defines the training task which is responsible for producing the model artifact, and may also include additional auxiliary work. The definition files that can be used here are found in gs://google-cloud-aiplatform/schema/trainingjob/definition/. Note: The URI given on output will be immutable and probably different, including the URI scheme, than the one given on input. The output URI will point to a location where the user only has a read access.
	TrainingTaskDefinition pulumi.StringInput
	// The training task's parameter(s), as specified in the training_task_definition's `inputs`.
	TrainingTaskInputs pulumi.Input
}

func (TrainingPipelineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*trainingPipelineArgs)(nil)).Elem()
}

type TrainingPipelineInput interface {
	pulumi.Input

	ToTrainingPipelineOutput() TrainingPipelineOutput
	ToTrainingPipelineOutputWithContext(ctx context.Context) TrainingPipelineOutput
}

func (*TrainingPipeline) ElementType() reflect.Type {
	return reflect.TypeOf((**TrainingPipeline)(nil)).Elem()
}

func (i *TrainingPipeline) ToTrainingPipelineOutput() TrainingPipelineOutput {
	return i.ToTrainingPipelineOutputWithContext(context.Background())
}

func (i *TrainingPipeline) ToTrainingPipelineOutputWithContext(ctx context.Context) TrainingPipelineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrainingPipelineOutput)
}

type TrainingPipelineOutput struct{ *pulumi.OutputState }

func (TrainingPipelineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrainingPipeline)(nil)).Elem()
}

func (o TrainingPipelineOutput) ToTrainingPipelineOutput() TrainingPipelineOutput {
	return o
}

func (o TrainingPipelineOutput) ToTrainingPipelineOutputWithContext(ctx context.Context) TrainingPipelineOutput {
	return o
}

// Time when the TrainingPipeline was created.
func (o TrainingPipelineOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *TrainingPipeline) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The user-defined name of this TrainingPipeline.
func (o TrainingPipelineOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *TrainingPipeline) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Customer-managed encryption key spec for a TrainingPipeline. If set, this TrainingPipeline will be secured by this key. Note: Model trained by this TrainingPipeline is also secured by this key if model_to_upload is not set separately.
func (o TrainingPipelineOutput) EncryptionSpec() GoogleCloudAiplatformV1beta1EncryptionSpecResponseOutput {
	return o.ApplyT(func(v *TrainingPipeline) GoogleCloudAiplatformV1beta1EncryptionSpecResponseOutput {
		return v.EncryptionSpec
	}).(GoogleCloudAiplatformV1beta1EncryptionSpecResponseOutput)
}

// Time when the TrainingPipeline entered any of the following states: `PIPELINE_STATE_SUCCEEDED`, `PIPELINE_STATE_FAILED`, `PIPELINE_STATE_CANCELLED`.
func (o TrainingPipelineOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v *TrainingPipeline) pulumi.StringOutput { return v.EndTime }).(pulumi.StringOutput)
}

// Only populated when the pipeline's state is `PIPELINE_STATE_FAILED` or `PIPELINE_STATE_CANCELLED`.
func (o TrainingPipelineOutput) Error() GoogleRpcStatusResponseOutput {
	return o.ApplyT(func(v *TrainingPipeline) GoogleRpcStatusResponseOutput { return v.Error }).(GoogleRpcStatusResponseOutput)
}

// Specifies Vertex AI owned input data that may be used for training the Model. The TrainingPipeline's training_task_definition should make clear whether this config is used and if there are any special requirements on how it should be filled. If nothing about this config is mentioned in the training_task_definition, then it should be assumed that the TrainingPipeline does not depend on this configuration.
func (o TrainingPipelineOutput) InputDataConfig() GoogleCloudAiplatformV1beta1InputDataConfigResponseOutput {
	return o.ApplyT(func(v *TrainingPipeline) GoogleCloudAiplatformV1beta1InputDataConfigResponseOutput {
		return v.InputDataConfig
	}).(GoogleCloudAiplatformV1beta1InputDataConfigResponseOutput)
}

// The labels with user-defined metadata to organize TrainingPipelines. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.
func (o TrainingPipelineOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TrainingPipeline) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

func (o TrainingPipelineOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *TrainingPipeline) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Optional. The ID to use for the uploaded Model, which will become the final component of the model resource name. This value may be up to 63 characters, and valid characters are `[a-z0-9_-]`. The first character cannot be a number or hyphen.
func (o TrainingPipelineOutput) ModelId() pulumi.StringOutput {
	return o.ApplyT(func(v *TrainingPipeline) pulumi.StringOutput { return v.ModelId }).(pulumi.StringOutput)
}

// Describes the Model that may be uploaded (via ModelService.UploadModel) by this TrainingPipeline. The TrainingPipeline's training_task_definition should make clear whether this Model description should be populated, and if there are any special requirements regarding how it should be filled. If nothing is mentioned in the training_task_definition, then it should be assumed that this field should not be filled and the training task either uploads the Model without a need of this information, or that training task does not support uploading a Model as part of the pipeline. When the Pipeline's state becomes `PIPELINE_STATE_SUCCEEDED` and the trained Model had been uploaded into Vertex AI, then the model_to_upload's resource name is populated. The Model is always uploaded into the Project and Location in which this pipeline is.
func (o TrainingPipelineOutput) ModelToUpload() GoogleCloudAiplatformV1beta1ModelResponseOutput {
	return o.ApplyT(func(v *TrainingPipeline) GoogleCloudAiplatformV1beta1ModelResponseOutput { return v.ModelToUpload }).(GoogleCloudAiplatformV1beta1ModelResponseOutput)
}

// Resource name of the TrainingPipeline.
func (o TrainingPipelineOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *TrainingPipeline) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional. When specify this field, the `model_to_upload` will not be uploaded as a new model, instead, it will become a new version of this `parent_model`.
func (o TrainingPipelineOutput) ParentModel() pulumi.StringOutput {
	return o.ApplyT(func(v *TrainingPipeline) pulumi.StringOutput { return v.ParentModel }).(pulumi.StringOutput)
}

func (o TrainingPipelineOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *TrainingPipeline) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Time when the TrainingPipeline for the first time entered the `PIPELINE_STATE_RUNNING` state.
func (o TrainingPipelineOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v *TrainingPipeline) pulumi.StringOutput { return v.StartTime }).(pulumi.StringOutput)
}

// The detailed state of the pipeline.
func (o TrainingPipelineOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *TrainingPipeline) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// A Google Cloud Storage path to the YAML file that defines the training task which is responsible for producing the model artifact, and may also include additional auxiliary work. The definition files that can be used here are found in gs://google-cloud-aiplatform/schema/trainingjob/definition/. Note: The URI given on output will be immutable and probably different, including the URI scheme, than the one given on input. The output URI will point to a location where the user only has a read access.
func (o TrainingPipelineOutput) TrainingTaskDefinition() pulumi.StringOutput {
	return o.ApplyT(func(v *TrainingPipeline) pulumi.StringOutput { return v.TrainingTaskDefinition }).(pulumi.StringOutput)
}

// The training task's parameter(s), as specified in the training_task_definition's `inputs`.
func (o TrainingPipelineOutput) TrainingTaskInputs() pulumi.AnyOutput {
	return o.ApplyT(func(v *TrainingPipeline) pulumi.AnyOutput { return v.TrainingTaskInputs }).(pulumi.AnyOutput)
}

// The metadata information as specified in the training_task_definition's `metadata`. This metadata is an auxiliary runtime and final information about the training task. While the pipeline is running this information is populated only at a best effort basis. Only present if the pipeline's training_task_definition contains `metadata` object.
func (o TrainingPipelineOutput) TrainingTaskMetadata() pulumi.AnyOutput {
	return o.ApplyT(func(v *TrainingPipeline) pulumi.AnyOutput { return v.TrainingTaskMetadata }).(pulumi.AnyOutput)
}

// Time when the TrainingPipeline was most recently updated.
func (o TrainingPipelineOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *TrainingPipeline) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TrainingPipelineInput)(nil)).Elem(), &TrainingPipeline{})
	pulumi.RegisterOutputType(TrainingPipelineOutput{})
}
