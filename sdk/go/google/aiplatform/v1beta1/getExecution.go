// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieves a specific Execution.
func LookupExecution(ctx *pulumi.Context, args *LookupExecutionArgs, opts ...pulumi.InvokeOption) (*LookupExecutionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupExecutionResult
	err := ctx.Invoke("google-native:aiplatform/v1beta1:getExecution", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupExecutionArgs struct {
	ExecutionId     string  `pulumi:"executionId"`
	Location        string  `pulumi:"location"`
	MetadataStoreId string  `pulumi:"metadataStoreId"`
	Project         *string `pulumi:"project"`
}

type LookupExecutionResult struct {
	// Timestamp when this Execution was created.
	CreateTime string `pulumi:"createTime"`
	// Description of the Execution
	Description string `pulumi:"description"`
	// User provided display name of the Execution. May be up to 128 Unicode characters.
	DisplayName string `pulumi:"displayName"`
	// An eTag used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
	Etag string `pulumi:"etag"`
	// The labels with user-defined metadata to organize your Executions. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one Execution (System labels are excluded).
	Labels map[string]string `pulumi:"labels"`
	// Properties of the Execution. Top level metadata keys' heading and trailing spaces will be trimmed. The size of this field should not exceed 200KB.
	Metadata map[string]interface{} `pulumi:"metadata"`
	// The resource name of the Execution.
	Name string `pulumi:"name"`
	// The title of the schema describing the metadata. Schema title and version is expected to be registered in earlier Create Schema calls. And both are used together as unique identifiers to identify schemas within the local metadata store.
	SchemaTitle string `pulumi:"schemaTitle"`
	// The version of the schema in `schema_title` to use. Schema title and version is expected to be registered in earlier Create Schema calls. And both are used together as unique identifiers to identify schemas within the local metadata store.
	SchemaVersion string `pulumi:"schemaVersion"`
	// The state of this Execution. This is a property of the Execution, and does not imply or capture any ongoing process. This property is managed by clients (such as Vertex AI Pipelines) and the system does not prescribe or check the validity of state transitions.
	State string `pulumi:"state"`
	// Timestamp when this Execution was last updated.
	UpdateTime string `pulumi:"updateTime"`
}

func LookupExecutionOutput(ctx *pulumi.Context, args LookupExecutionOutputArgs, opts ...pulumi.InvokeOption) LookupExecutionResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupExecutionResult, error) {
			args := v.(LookupExecutionArgs)
			r, err := LookupExecution(ctx, &args, opts...)
			var s LookupExecutionResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupExecutionResultOutput)
}

type LookupExecutionOutputArgs struct {
	ExecutionId     pulumi.StringInput    `pulumi:"executionId"`
	Location        pulumi.StringInput    `pulumi:"location"`
	MetadataStoreId pulumi.StringInput    `pulumi:"metadataStoreId"`
	Project         pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupExecutionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupExecutionArgs)(nil)).Elem()
}

type LookupExecutionResultOutput struct{ *pulumi.OutputState }

func (LookupExecutionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupExecutionResult)(nil)).Elem()
}

func (o LookupExecutionResultOutput) ToLookupExecutionResultOutput() LookupExecutionResultOutput {
	return o
}

func (o LookupExecutionResultOutput) ToLookupExecutionResultOutputWithContext(ctx context.Context) LookupExecutionResultOutput {
	return o
}

// Timestamp when this Execution was created.
func (o LookupExecutionResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExecutionResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Description of the Execution
func (o LookupExecutionResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExecutionResult) string { return v.Description }).(pulumi.StringOutput)
}

// User provided display name of the Execution. May be up to 128 Unicode characters.
func (o LookupExecutionResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExecutionResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// An eTag used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
func (o LookupExecutionResultOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExecutionResult) string { return v.Etag }).(pulumi.StringOutput)
}

// The labels with user-defined metadata to organize your Executions. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one Execution (System labels are excluded).
func (o LookupExecutionResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupExecutionResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Properties of the Execution. Top level metadata keys' heading and trailing spaces will be trimmed. The size of this field should not exceed 200KB.
func (o LookupExecutionResultOutput) Metadata() pulumi.MapOutput {
	return o.ApplyT(func(v LookupExecutionResult) map[string]interface{} { return v.Metadata }).(pulumi.MapOutput)
}

// The resource name of the Execution.
func (o LookupExecutionResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExecutionResult) string { return v.Name }).(pulumi.StringOutput)
}

// The title of the schema describing the metadata. Schema title and version is expected to be registered in earlier Create Schema calls. And both are used together as unique identifiers to identify schemas within the local metadata store.
func (o LookupExecutionResultOutput) SchemaTitle() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExecutionResult) string { return v.SchemaTitle }).(pulumi.StringOutput)
}

// The version of the schema in `schema_title` to use. Schema title and version is expected to be registered in earlier Create Schema calls. And both are used together as unique identifiers to identify schemas within the local metadata store.
func (o LookupExecutionResultOutput) SchemaVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExecutionResult) string { return v.SchemaVersion }).(pulumi.StringOutput)
}

// The state of this Execution. This is a property of the Execution, and does not imply or capture any ongoing process. This property is managed by clients (such as Vertex AI Pipelines) and the system does not prescribe or check the validity of state transitions.
func (o LookupExecutionResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExecutionResult) string { return v.State }).(pulumi.StringOutput)
}

// Timestamp when this Execution was last updated.
func (o LookupExecutionResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExecutionResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupExecutionResultOutput{})
}
