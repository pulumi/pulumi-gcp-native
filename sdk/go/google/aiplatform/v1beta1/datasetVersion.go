// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Create a version from a Dataset.
// Auto-naming is currently not supported for this resource.
type DatasetVersion struct {
	pulumi.CustomResourceState

	// Name of the associated BigQuery dataset.
	BigQueryDatasetName pulumi.StringOutput `pulumi:"bigQueryDatasetName"`
	// Timestamp when this DatasetVersion was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	DatasetId  pulumi.StringOutput `pulumi:"datasetId"`
	// Used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
	Etag     pulumi.StringOutput `pulumi:"etag"`
	Location pulumi.StringOutput `pulumi:"location"`
	// The resource name of the DatasetVersion.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// Timestamp when this DatasetVersion was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewDatasetVersion registers a new resource with the given unique name, arguments, and options.
func NewDatasetVersion(ctx *pulumi.Context,
	name string, args *DatasetVersionArgs, opts ...pulumi.ResourceOption) (*DatasetVersion, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatasetId == nil {
		return nil, errors.New("invalid value for required argument 'DatasetId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"datasetId",
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DatasetVersion
	err := ctx.RegisterResource("google-native:aiplatform/v1beta1:DatasetVersion", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatasetVersion gets an existing DatasetVersion resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatasetVersion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatasetVersionState, opts ...pulumi.ResourceOption) (*DatasetVersion, error) {
	var resource DatasetVersion
	err := ctx.ReadResource("google-native:aiplatform/v1beta1:DatasetVersion", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatasetVersion resources.
type datasetVersionState struct {
}

type DatasetVersionState struct {
}

func (DatasetVersionState) ElementType() reflect.Type {
	return reflect.TypeOf((*datasetVersionState)(nil)).Elem()
}

type datasetVersionArgs struct {
	DatasetId string `pulumi:"datasetId"`
	// Used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
	Etag     *string `pulumi:"etag"`
	Location *string `pulumi:"location"`
	Project  *string `pulumi:"project"`
}

// The set of arguments for constructing a DatasetVersion resource.
type DatasetVersionArgs struct {
	DatasetId pulumi.StringInput
	// Used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
	Etag     pulumi.StringPtrInput
	Location pulumi.StringPtrInput
	Project  pulumi.StringPtrInput
}

func (DatasetVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*datasetVersionArgs)(nil)).Elem()
}

type DatasetVersionInput interface {
	pulumi.Input

	ToDatasetVersionOutput() DatasetVersionOutput
	ToDatasetVersionOutputWithContext(ctx context.Context) DatasetVersionOutput
}

func (*DatasetVersion) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetVersion)(nil)).Elem()
}

func (i *DatasetVersion) ToDatasetVersionOutput() DatasetVersionOutput {
	return i.ToDatasetVersionOutputWithContext(context.Background())
}

func (i *DatasetVersion) ToDatasetVersionOutputWithContext(ctx context.Context) DatasetVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetVersionOutput)
}

type DatasetVersionOutput struct{ *pulumi.OutputState }

func (DatasetVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetVersion)(nil)).Elem()
}

func (o DatasetVersionOutput) ToDatasetVersionOutput() DatasetVersionOutput {
	return o
}

func (o DatasetVersionOutput) ToDatasetVersionOutputWithContext(ctx context.Context) DatasetVersionOutput {
	return o
}

// Name of the associated BigQuery dataset.
func (o DatasetVersionOutput) BigQueryDatasetName() pulumi.StringOutput {
	return o.ApplyT(func(v *DatasetVersion) pulumi.StringOutput { return v.BigQueryDatasetName }).(pulumi.StringOutput)
}

// Timestamp when this DatasetVersion was created.
func (o DatasetVersionOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DatasetVersion) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

func (o DatasetVersionOutput) DatasetId() pulumi.StringOutput {
	return o.ApplyT(func(v *DatasetVersion) pulumi.StringOutput { return v.DatasetId }).(pulumi.StringOutput)
}

// Used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
func (o DatasetVersionOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *DatasetVersion) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o DatasetVersionOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *DatasetVersion) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource name of the DatasetVersion.
func (o DatasetVersionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DatasetVersion) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DatasetVersionOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *DatasetVersion) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Timestamp when this DatasetVersion was last updated.
func (o DatasetVersionOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DatasetVersion) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetVersionInput)(nil)).Elem(), &DatasetVersion{})
	pulumi.RegisterOutputType(DatasetVersionOutput{})
}
