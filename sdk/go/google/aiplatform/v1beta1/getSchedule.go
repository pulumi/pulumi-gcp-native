// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets a Schedule.
func LookupSchedule(ctx *pulumi.Context, args *LookupScheduleArgs, opts ...pulumi.InvokeOption) (*LookupScheduleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupScheduleResult
	err := ctx.Invoke("google-native:aiplatform/v1beta1:getSchedule", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupScheduleArgs struct {
	Location   string  `pulumi:"location"`
	Project    *string `pulumi:"project"`
	ScheduleId string  `pulumi:"scheduleId"`
}

type LookupScheduleResult struct {
	// Optional. Whether new scheduled runs can be queued when max_concurrent_runs limit is reached. If set to true, new runs will be queued instead of skipped. Default to false.
	AllowQueueing bool `pulumi:"allowQueueing"`
	// Whether to backfill missed runs when the schedule is resumed from PAUSED state. If set to true, all missed runs will be scheduled. New runs will be scheduled after the backfill is complete. Default to false.
	CatchUp bool `pulumi:"catchUp"`
	// Request for PipelineService.CreatePipelineJob. CreatePipelineJobRequest.parent field is required (format: projects/{project}/locations/{location}).
	CreatePipelineJobRequest GoogleCloudAiplatformV1beta1CreatePipelineJobRequestResponse `pulumi:"createPipelineJobRequest"`
	// Timestamp when this Schedule was created.
	CreateTime string `pulumi:"createTime"`
	// Cron schedule (https://en.wikipedia.org/wiki/Cron) to launch scheduled runs. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: "CRON_TZ=${IANA_TIME_ZONE}" or "TZ=${IANA_TIME_ZONE}". The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, "CRON_TZ=America/New_York 1 * * * *", or "TZ=America/New_York 1 * * * *".
	Cron string `pulumi:"cron"`
	// User provided name of the Schedule. The name can be up to 128 characters long and can consist of any UTF-8 characters.
	DisplayName string `pulumi:"displayName"`
	// Optional. Timestamp after which no new runs can be scheduled. If specified, The schedule will be completed when either end_time is reached or when scheduled_run_count >= max_run_count. If not specified, new runs will keep getting scheduled until this Schedule is paused or deleted. Already scheduled runs will be allowed to complete. Unset if not specified.
	EndTime string `pulumi:"endTime"`
	// Timestamp when this Schedule was last paused. Unset if never paused.
	LastPauseTime string `pulumi:"lastPauseTime"`
	// Timestamp when this Schedule was last resumed. Unset if never resumed from pause.
	LastResumeTime string `pulumi:"lastResumeTime"`
	// Response of the last scheduled run. This is the response for starting the scheduled requests and not the execution of the operations/jobs created by the requests (if applicable). Unset if no run has been scheduled yet.
	LastScheduledRunResponse GoogleCloudAiplatformV1beta1ScheduleRunResponseResponse `pulumi:"lastScheduledRunResponse"`
	// Maximum number of runs that can be started concurrently for this Schedule. This is the limit for starting the scheduled requests and not the execution of the operations/jobs created by the requests (if applicable).
	MaxConcurrentRunCount string `pulumi:"maxConcurrentRunCount"`
	// Optional. Maximum run count of the schedule. If specified, The schedule will be completed when either started_run_count >= max_run_count or when end_time is reached. If not specified, new runs will keep getting scheduled until this Schedule is paused or deleted. Already scheduled runs will be allowed to complete. Unset if not specified.
	MaxRunCount string `pulumi:"maxRunCount"`
	// Immutable. The resource name of the Schedule.
	Name string `pulumi:"name"`
	// Timestamp when this Schedule should schedule the next run. Having a next_run_time in the past means the runs are being started behind schedule.
	NextRunTime string `pulumi:"nextRunTime"`
	// Optional. Timestamp after which the first run can be scheduled. Default to Schedule create time if not specified.
	StartTime string `pulumi:"startTime"`
	// The number of runs started by this schedule.
	StartedRunCount string `pulumi:"startedRunCount"`
	// The state of this Schedule.
	State string `pulumi:"state"`
	// Timestamp when this Schedule was updated.
	UpdateTime string `pulumi:"updateTime"`
}

func LookupScheduleOutput(ctx *pulumi.Context, args LookupScheduleOutputArgs, opts ...pulumi.InvokeOption) LookupScheduleResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupScheduleResult, error) {
			args := v.(LookupScheduleArgs)
			r, err := LookupSchedule(ctx, &args, opts...)
			var s LookupScheduleResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupScheduleResultOutput)
}

type LookupScheduleOutputArgs struct {
	Location   pulumi.StringInput    `pulumi:"location"`
	Project    pulumi.StringPtrInput `pulumi:"project"`
	ScheduleId pulumi.StringInput    `pulumi:"scheduleId"`
}

func (LookupScheduleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupScheduleArgs)(nil)).Elem()
}

type LookupScheduleResultOutput struct{ *pulumi.OutputState }

func (LookupScheduleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupScheduleResult)(nil)).Elem()
}

func (o LookupScheduleResultOutput) ToLookupScheduleResultOutput() LookupScheduleResultOutput {
	return o
}

func (o LookupScheduleResultOutput) ToLookupScheduleResultOutputWithContext(ctx context.Context) LookupScheduleResultOutput {
	return o
}

// Optional. Whether new scheduled runs can be queued when max_concurrent_runs limit is reached. If set to true, new runs will be queued instead of skipped. Default to false.
func (o LookupScheduleResultOutput) AllowQueueing() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupScheduleResult) bool { return v.AllowQueueing }).(pulumi.BoolOutput)
}

// Whether to backfill missed runs when the schedule is resumed from PAUSED state. If set to true, all missed runs will be scheduled. New runs will be scheduled after the backfill is complete. Default to false.
func (o LookupScheduleResultOutput) CatchUp() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupScheduleResult) bool { return v.CatchUp }).(pulumi.BoolOutput)
}

// Request for PipelineService.CreatePipelineJob. CreatePipelineJobRequest.parent field is required (format: projects/{project}/locations/{location}).
func (o LookupScheduleResultOutput) CreatePipelineJobRequest() GoogleCloudAiplatformV1beta1CreatePipelineJobRequestResponseOutput {
	return o.ApplyT(func(v LookupScheduleResult) GoogleCloudAiplatformV1beta1CreatePipelineJobRequestResponse {
		return v.CreatePipelineJobRequest
	}).(GoogleCloudAiplatformV1beta1CreatePipelineJobRequestResponseOutput)
}

// Timestamp when this Schedule was created.
func (o LookupScheduleResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScheduleResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Cron schedule (https://en.wikipedia.org/wiki/Cron) to launch scheduled runs. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: "CRON_TZ=${IANA_TIME_ZONE}" or "TZ=${IANA_TIME_ZONE}". The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, "CRON_TZ=America/New_York 1 * * * *", or "TZ=America/New_York 1 * * * *".
func (o LookupScheduleResultOutput) Cron() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScheduleResult) string { return v.Cron }).(pulumi.StringOutput)
}

// User provided name of the Schedule. The name can be up to 128 characters long and can consist of any UTF-8 characters.
func (o LookupScheduleResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScheduleResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Optional. Timestamp after which no new runs can be scheduled. If specified, The schedule will be completed when either end_time is reached or when scheduled_run_count >= max_run_count. If not specified, new runs will keep getting scheduled until this Schedule is paused or deleted. Already scheduled runs will be allowed to complete. Unset if not specified.
func (o LookupScheduleResultOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScheduleResult) string { return v.EndTime }).(pulumi.StringOutput)
}

// Timestamp when this Schedule was last paused. Unset if never paused.
func (o LookupScheduleResultOutput) LastPauseTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScheduleResult) string { return v.LastPauseTime }).(pulumi.StringOutput)
}

// Timestamp when this Schedule was last resumed. Unset if never resumed from pause.
func (o LookupScheduleResultOutput) LastResumeTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScheduleResult) string { return v.LastResumeTime }).(pulumi.StringOutput)
}

// Response of the last scheduled run. This is the response for starting the scheduled requests and not the execution of the operations/jobs created by the requests (if applicable). Unset if no run has been scheduled yet.
func (o LookupScheduleResultOutput) LastScheduledRunResponse() GoogleCloudAiplatformV1beta1ScheduleRunResponseResponseOutput {
	return o.ApplyT(func(v LookupScheduleResult) GoogleCloudAiplatformV1beta1ScheduleRunResponseResponse {
		return v.LastScheduledRunResponse
	}).(GoogleCloudAiplatformV1beta1ScheduleRunResponseResponseOutput)
}

// Maximum number of runs that can be started concurrently for this Schedule. This is the limit for starting the scheduled requests and not the execution of the operations/jobs created by the requests (if applicable).
func (o LookupScheduleResultOutput) MaxConcurrentRunCount() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScheduleResult) string { return v.MaxConcurrentRunCount }).(pulumi.StringOutput)
}

// Optional. Maximum run count of the schedule. If specified, The schedule will be completed when either started_run_count >= max_run_count or when end_time is reached. If not specified, new runs will keep getting scheduled until this Schedule is paused or deleted. Already scheduled runs will be allowed to complete. Unset if not specified.
func (o LookupScheduleResultOutput) MaxRunCount() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScheduleResult) string { return v.MaxRunCount }).(pulumi.StringOutput)
}

// Immutable. The resource name of the Schedule.
func (o LookupScheduleResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScheduleResult) string { return v.Name }).(pulumi.StringOutput)
}

// Timestamp when this Schedule should schedule the next run. Having a next_run_time in the past means the runs are being started behind schedule.
func (o LookupScheduleResultOutput) NextRunTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScheduleResult) string { return v.NextRunTime }).(pulumi.StringOutput)
}

// Optional. Timestamp after which the first run can be scheduled. Default to Schedule create time if not specified.
func (o LookupScheduleResultOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScheduleResult) string { return v.StartTime }).(pulumi.StringOutput)
}

// The number of runs started by this schedule.
func (o LookupScheduleResultOutput) StartedRunCount() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScheduleResult) string { return v.StartedRunCount }).(pulumi.StringOutput)
}

// The state of this Schedule.
func (o LookupScheduleResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScheduleResult) string { return v.State }).(pulumi.StringOutput)
}

// Timestamp when this Schedule was updated.
func (o LookupScheduleResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScheduleResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupScheduleResultOutput{})
}
