// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates an Artifact associated with a MetadataStore.
// Auto-naming is currently not supported for this resource.
type Artifact struct {
	pulumi.CustomResourceState

	// The {artifact} portion of the resource name with the format: `projects/{project}/locations/{location}/metadataStores/{metadatastore}/artifacts/{artifact}` If not provided, the Artifact's ID will be a UUID generated by the service. Must be 4-128 characters in length. Valid characters are `/a-z-/`. Must be unique across all Artifacts in the parent MetadataStore. (Otherwise the request will fail with ALREADY_EXISTS, or PERMISSION_DENIED if the caller can't view the preexisting Artifact.)
	ArtifactId pulumi.StringPtrOutput `pulumi:"artifactId"`
	// Timestamp when this Artifact was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Description of the Artifact
	Description pulumi.StringOutput `pulumi:"description"`
	// User provided display name of the Artifact. May be up to 128 Unicode characters.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// An eTag used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The labels with user-defined metadata to organize your Artifacts. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one Artifact (System labels are excluded).
	Labels   pulumi.StringMapOutput `pulumi:"labels"`
	Location pulumi.StringOutput    `pulumi:"location"`
	// Properties of the Artifact. Top level metadata keys' heading and trailing spaces will be trimmed. The size of this field should not exceed 200KB.
	Metadata        pulumi.MapOutput    `pulumi:"metadata"`
	MetadataStoreId pulumi.StringOutput `pulumi:"metadataStoreId"`
	// The resource name of the Artifact.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// The title of the schema describing the metadata. Schema title and version is expected to be registered in earlier Create Schema calls. And both are used together as unique identifiers to identify schemas within the local metadata store.
	SchemaTitle pulumi.StringOutput `pulumi:"schemaTitle"`
	// The version of the schema in schema_name to use. Schema title and version is expected to be registered in earlier Create Schema calls. And both are used together as unique identifiers to identify schemas within the local metadata store.
	SchemaVersion pulumi.StringOutput `pulumi:"schemaVersion"`
	// The state of this Artifact. This is a property of the Artifact, and does not imply or capture any ongoing process. This property is managed by clients (such as Vertex AI Pipelines), and the system does not prescribe or check the validity of state transitions.
	State pulumi.StringOutput `pulumi:"state"`
	// Timestamp when this Artifact was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// The uniform resource identifier of the artifact file. May be empty if there is no actual artifact file.
	Uri pulumi.StringOutput `pulumi:"uri"`
}

// NewArtifact registers a new resource with the given unique name, arguments, and options.
func NewArtifact(ctx *pulumi.Context,
	name string, args *ArtifactArgs, opts ...pulumi.ResourceOption) (*Artifact, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MetadataStoreId == nil {
		return nil, errors.New("invalid value for required argument 'MetadataStoreId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"location",
		"metadataStoreId",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Artifact
	err := ctx.RegisterResource("google-native:aiplatform/v1beta1:Artifact", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetArtifact gets an existing Artifact resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetArtifact(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ArtifactState, opts ...pulumi.ResourceOption) (*Artifact, error) {
	var resource Artifact
	err := ctx.ReadResource("google-native:aiplatform/v1beta1:Artifact", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Artifact resources.
type artifactState struct {
}

type ArtifactState struct {
}

func (ArtifactState) ElementType() reflect.Type {
	return reflect.TypeOf((*artifactState)(nil)).Elem()
}

type artifactArgs struct {
	// The {artifact} portion of the resource name with the format: `projects/{project}/locations/{location}/metadataStores/{metadatastore}/artifacts/{artifact}` If not provided, the Artifact's ID will be a UUID generated by the service. Must be 4-128 characters in length. Valid characters are `/a-z-/`. Must be unique across all Artifacts in the parent MetadataStore. (Otherwise the request will fail with ALREADY_EXISTS, or PERMISSION_DENIED if the caller can't view the preexisting Artifact.)
	ArtifactId *string `pulumi:"artifactId"`
	// Description of the Artifact
	Description *string `pulumi:"description"`
	// User provided display name of the Artifact. May be up to 128 Unicode characters.
	DisplayName *string `pulumi:"displayName"`
	// An eTag used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
	Etag *string `pulumi:"etag"`
	// The labels with user-defined metadata to organize your Artifacts. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one Artifact (System labels are excluded).
	Labels   map[string]string `pulumi:"labels"`
	Location *string           `pulumi:"location"`
	// Properties of the Artifact. Top level metadata keys' heading and trailing spaces will be trimmed. The size of this field should not exceed 200KB.
	Metadata        map[string]interface{} `pulumi:"metadata"`
	MetadataStoreId string                 `pulumi:"metadataStoreId"`
	Project         *string                `pulumi:"project"`
	// The title of the schema describing the metadata. Schema title and version is expected to be registered in earlier Create Schema calls. And both are used together as unique identifiers to identify schemas within the local metadata store.
	SchemaTitle *string `pulumi:"schemaTitle"`
	// The version of the schema in schema_name to use. Schema title and version is expected to be registered in earlier Create Schema calls. And both are used together as unique identifiers to identify schemas within the local metadata store.
	SchemaVersion *string `pulumi:"schemaVersion"`
	// The state of this Artifact. This is a property of the Artifact, and does not imply or capture any ongoing process. This property is managed by clients (such as Vertex AI Pipelines), and the system does not prescribe or check the validity of state transitions.
	State *ArtifactStateEnum `pulumi:"state"`
	// The uniform resource identifier of the artifact file. May be empty if there is no actual artifact file.
	Uri *string `pulumi:"uri"`
}

// The set of arguments for constructing a Artifact resource.
type ArtifactArgs struct {
	// The {artifact} portion of the resource name with the format: `projects/{project}/locations/{location}/metadataStores/{metadatastore}/artifacts/{artifact}` If not provided, the Artifact's ID will be a UUID generated by the service. Must be 4-128 characters in length. Valid characters are `/a-z-/`. Must be unique across all Artifacts in the parent MetadataStore. (Otherwise the request will fail with ALREADY_EXISTS, or PERMISSION_DENIED if the caller can't view the preexisting Artifact.)
	ArtifactId pulumi.StringPtrInput
	// Description of the Artifact
	Description pulumi.StringPtrInput
	// User provided display name of the Artifact. May be up to 128 Unicode characters.
	DisplayName pulumi.StringPtrInput
	// An eTag used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
	Etag pulumi.StringPtrInput
	// The labels with user-defined metadata to organize your Artifacts. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one Artifact (System labels are excluded).
	Labels   pulumi.StringMapInput
	Location pulumi.StringPtrInput
	// Properties of the Artifact. Top level metadata keys' heading and trailing spaces will be trimmed. The size of this field should not exceed 200KB.
	Metadata        pulumi.MapInput
	MetadataStoreId pulumi.StringInput
	Project         pulumi.StringPtrInput
	// The title of the schema describing the metadata. Schema title and version is expected to be registered in earlier Create Schema calls. And both are used together as unique identifiers to identify schemas within the local metadata store.
	SchemaTitle pulumi.StringPtrInput
	// The version of the schema in schema_name to use. Schema title and version is expected to be registered in earlier Create Schema calls. And both are used together as unique identifiers to identify schemas within the local metadata store.
	SchemaVersion pulumi.StringPtrInput
	// The state of this Artifact. This is a property of the Artifact, and does not imply or capture any ongoing process. This property is managed by clients (such as Vertex AI Pipelines), and the system does not prescribe or check the validity of state transitions.
	State ArtifactStateEnumPtrInput
	// The uniform resource identifier of the artifact file. May be empty if there is no actual artifact file.
	Uri pulumi.StringPtrInput
}

func (ArtifactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*artifactArgs)(nil)).Elem()
}

type ArtifactInput interface {
	pulumi.Input

	ToArtifactOutput() ArtifactOutput
	ToArtifactOutputWithContext(ctx context.Context) ArtifactOutput
}

func (*Artifact) ElementType() reflect.Type {
	return reflect.TypeOf((**Artifact)(nil)).Elem()
}

func (i *Artifact) ToArtifactOutput() ArtifactOutput {
	return i.ToArtifactOutputWithContext(context.Background())
}

func (i *Artifact) ToArtifactOutputWithContext(ctx context.Context) ArtifactOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactOutput)
}

type ArtifactOutput struct{ *pulumi.OutputState }

func (ArtifactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Artifact)(nil)).Elem()
}

func (o ArtifactOutput) ToArtifactOutput() ArtifactOutput {
	return o
}

func (o ArtifactOutput) ToArtifactOutputWithContext(ctx context.Context) ArtifactOutput {
	return o
}

// The {artifact} portion of the resource name with the format: `projects/{project}/locations/{location}/metadataStores/{metadatastore}/artifacts/{artifact}` If not provided, the Artifact's ID will be a UUID generated by the service. Must be 4-128 characters in length. Valid characters are `/a-z-/`. Must be unique across all Artifacts in the parent MetadataStore. (Otherwise the request will fail with ALREADY_EXISTS, or PERMISSION_DENIED if the caller can't view the preexisting Artifact.)
func (o ArtifactOutput) ArtifactId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Artifact) pulumi.StringPtrOutput { return v.ArtifactId }).(pulumi.StringPtrOutput)
}

// Timestamp when this Artifact was created.
func (o ArtifactOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Artifact) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Description of the Artifact
func (o ArtifactOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Artifact) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// User provided display name of the Artifact. May be up to 128 Unicode characters.
func (o ArtifactOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Artifact) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// An eTag used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
func (o ArtifactOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *Artifact) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The labels with user-defined metadata to organize your Artifacts. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one Artifact (System labels are excluded).
func (o ArtifactOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Artifact) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

func (o ArtifactOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Artifact) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Properties of the Artifact. Top level metadata keys' heading and trailing spaces will be trimmed. The size of this field should not exceed 200KB.
func (o ArtifactOutput) Metadata() pulumi.MapOutput {
	return o.ApplyT(func(v *Artifact) pulumi.MapOutput { return v.Metadata }).(pulumi.MapOutput)
}

func (o ArtifactOutput) MetadataStoreId() pulumi.StringOutput {
	return o.ApplyT(func(v *Artifact) pulumi.StringOutput { return v.MetadataStoreId }).(pulumi.StringOutput)
}

// The resource name of the Artifact.
func (o ArtifactOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Artifact) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ArtifactOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Artifact) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The title of the schema describing the metadata. Schema title and version is expected to be registered in earlier Create Schema calls. And both are used together as unique identifiers to identify schemas within the local metadata store.
func (o ArtifactOutput) SchemaTitle() pulumi.StringOutput {
	return o.ApplyT(func(v *Artifact) pulumi.StringOutput { return v.SchemaTitle }).(pulumi.StringOutput)
}

// The version of the schema in schema_name to use. Schema title and version is expected to be registered in earlier Create Schema calls. And both are used together as unique identifiers to identify schemas within the local metadata store.
func (o ArtifactOutput) SchemaVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Artifact) pulumi.StringOutput { return v.SchemaVersion }).(pulumi.StringOutput)
}

// The state of this Artifact. This is a property of the Artifact, and does not imply or capture any ongoing process. This property is managed by clients (such as Vertex AI Pipelines), and the system does not prescribe or check the validity of state transitions.
func (o ArtifactOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Artifact) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Timestamp when this Artifact was last updated.
func (o ArtifactOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Artifact) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// The uniform resource identifier of the artifact file. May be empty if there is no actual artifact file.
func (o ArtifactOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v *Artifact) pulumi.StringOutput { return v.Uri }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ArtifactInput)(nil)).Elem(), &Artifact{})
	pulumi.RegisterOutputType(ArtifactOutput{})
}
