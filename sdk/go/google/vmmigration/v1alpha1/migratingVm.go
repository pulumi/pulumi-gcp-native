// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new MigratingVm in a given Source.
// Auto-naming is currently not supported for this resource.
type MigratingVm struct {
	pulumi.CustomResourceState

	// Details of the VM from an AWS source.
	AwsSourceVmDetails AwsSourceVmDetailsResponseOutput `pulumi:"awsSourceVmDetails"`
	// Details of the target VM in Compute Engine.
	ComputeEngineTargetDefaults ComputeEngineTargetDefaultsResponseOutput `pulumi:"computeEngineTargetDefaults"`
	// Details of the VM in Compute Engine. Deprecated: Use compute_engine_target_defaults instead.
	//
	// Deprecated: Details of the VM in Compute Engine. Deprecated: Use compute_engine_target_defaults instead.
	ComputeEngineVmDefaults TargetVMDetailsResponseOutput `pulumi:"computeEngineVmDefaults"`
	// The time the migrating VM was created (this refers to this resource and not to the time it was installed in the source).
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The percentage progress of the current running replication cycle.
	CurrentSyncInfo ReplicationCycleResponseOutput `pulumi:"currentSyncInfo"`
	// The description attached to the migrating VM by the user.
	Description pulumi.StringOutput `pulumi:"description"`
	// The display name attached to the MigratingVm by the user.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Provides details on the state of the Migrating VM in case of an error in replication.
	Error StatusResponseOutput `pulumi:"error"`
	// The group this migrating vm is included in, if any. The group is represented by the full path of the appropriate Group resource.
	Group pulumi.StringOutput `pulumi:"group"`
	// The labels of the migrating VM.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The most updated snapshot created time in the source that finished replication.
	LastSync ReplicationSyncResponseOutput `pulumi:"lastSync"`
	// The identifier of the MigratingVm.
	Name pulumi.StringOutput `pulumi:"name"`
	// The replication schedule policy.
	Policy SchedulePolicyResponseOutput `pulumi:"policy"`
	// The recent clone jobs performed on the migrating VM. This field holds the vm's last completed clone job and the vm's running clone job, if one exists. Note: To have this field populated you need to explicitly request it via the "view" parameter of the Get/List request.
	RecentCloneJobs CloneJobResponseArrayOutput `pulumi:"recentCloneJobs"`
	// The recent cutover jobs performed on the migrating VM. This field holds the vm's last completed cutover job and the vm's running cutover job, if one exists. Note: To have this field populated you need to explicitly request it via the "view" parameter of the Get/List request.
	RecentCutoverJobs CutoverJobResponseArrayOutput `pulumi:"recentCutoverJobs"`
	// The unique ID of the VM in the source. The VM's name in vSphere can be changed, so this is not the VM's name but rather its moRef id. This id is of the form vm-.
	SourceVmId pulumi.StringOutput `pulumi:"sourceVmId"`
	// State of the MigratingVm.
	State pulumi.StringOutput `pulumi:"state"`
	// The last time the migrating VM state was updated.
	StateTime pulumi.StringOutput `pulumi:"stateTime"`
	// The default configuration of the target VM that will be created in GCP as a result of the migration. Deprecated: Use compute_engine_target_defaults instead.
	//
	// Deprecated: The default configuration of the target VM that will be created in GCP as a result of the migration. Deprecated: Use compute_engine_target_defaults instead.
	TargetDefaults TargetVMDetailsResponseOutput `pulumi:"targetDefaults"`
	// The last time the migrating VM resource was updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewMigratingVm registers a new resource with the given unique name, arguments, and options.
func NewMigratingVm(ctx *pulumi.Context,
	name string, args *MigratingVmArgs, opts ...pulumi.ResourceOption) (*MigratingVm, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MigratingVmId == nil {
		return nil, errors.New("invalid value for required argument 'MigratingVmId'")
	}
	if args.SourceId == nil {
		return nil, errors.New("invalid value for required argument 'SourceId'")
	}
	var resource MigratingVm
	err := ctx.RegisterResource("google-native:vmmigration/v1alpha1:MigratingVm", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMigratingVm gets an existing MigratingVm resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMigratingVm(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MigratingVmState, opts ...pulumi.ResourceOption) (*MigratingVm, error) {
	var resource MigratingVm
	err := ctx.ReadResource("google-native:vmmigration/v1alpha1:MigratingVm", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MigratingVm resources.
type migratingVmState struct {
}

type MigratingVmState struct {
}

func (MigratingVmState) ElementType() reflect.Type {
	return reflect.TypeOf((*migratingVmState)(nil)).Elem()
}

type migratingVmArgs struct {
	// Details of the target VM in Compute Engine.
	ComputeEngineTargetDefaults *ComputeEngineTargetDefaults `pulumi:"computeEngineTargetDefaults"`
	// Details of the VM in Compute Engine. Deprecated: Use compute_engine_target_defaults instead.
	//
	// Deprecated: Details of the VM in Compute Engine. Deprecated: Use compute_engine_target_defaults instead.
	ComputeEngineVmDefaults *TargetVMDetails `pulumi:"computeEngineVmDefaults"`
	// The description attached to the migrating VM by the user.
	Description *string `pulumi:"description"`
	// The display name attached to the MigratingVm by the user.
	DisplayName *string `pulumi:"displayName"`
	// The labels of the migrating VM.
	Labels   map[string]string `pulumi:"labels"`
	Location *string           `pulumi:"location"`
	// Required. The migratingVm identifier.
	MigratingVmId string `pulumi:"migratingVmId"`
	// The replication schedule policy.
	Policy  *SchedulePolicy `pulumi:"policy"`
	Project *string         `pulumi:"project"`
	// A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and t he request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId *string `pulumi:"requestId"`
	SourceId  string  `pulumi:"sourceId"`
	// The unique ID of the VM in the source. The VM's name in vSphere can be changed, so this is not the VM's name but rather its moRef id. This id is of the form vm-.
	SourceVmId *string `pulumi:"sourceVmId"`
	// The default configuration of the target VM that will be created in GCP as a result of the migration. Deprecated: Use compute_engine_target_defaults instead.
	//
	// Deprecated: The default configuration of the target VM that will be created in GCP as a result of the migration. Deprecated: Use compute_engine_target_defaults instead.
	TargetDefaults *TargetVMDetails `pulumi:"targetDefaults"`
}

// The set of arguments for constructing a MigratingVm resource.
type MigratingVmArgs struct {
	// Details of the target VM in Compute Engine.
	ComputeEngineTargetDefaults ComputeEngineTargetDefaultsPtrInput
	// Details of the VM in Compute Engine. Deprecated: Use compute_engine_target_defaults instead.
	//
	// Deprecated: Details of the VM in Compute Engine. Deprecated: Use compute_engine_target_defaults instead.
	ComputeEngineVmDefaults TargetVMDetailsPtrInput
	// The description attached to the migrating VM by the user.
	Description pulumi.StringPtrInput
	// The display name attached to the MigratingVm by the user.
	DisplayName pulumi.StringPtrInput
	// The labels of the migrating VM.
	Labels   pulumi.StringMapInput
	Location pulumi.StringPtrInput
	// Required. The migratingVm identifier.
	MigratingVmId pulumi.StringInput
	// The replication schedule policy.
	Policy  SchedulePolicyPtrInput
	Project pulumi.StringPtrInput
	// A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and t he request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrInput
	SourceId  pulumi.StringInput
	// The unique ID of the VM in the source. The VM's name in vSphere can be changed, so this is not the VM's name but rather its moRef id. This id is of the form vm-.
	SourceVmId pulumi.StringPtrInput
	// The default configuration of the target VM that will be created in GCP as a result of the migration. Deprecated: Use compute_engine_target_defaults instead.
	//
	// Deprecated: The default configuration of the target VM that will be created in GCP as a result of the migration. Deprecated: Use compute_engine_target_defaults instead.
	TargetDefaults TargetVMDetailsPtrInput
}

func (MigratingVmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*migratingVmArgs)(nil)).Elem()
}

type MigratingVmInput interface {
	pulumi.Input

	ToMigratingVmOutput() MigratingVmOutput
	ToMigratingVmOutputWithContext(ctx context.Context) MigratingVmOutput
}

func (*MigratingVm) ElementType() reflect.Type {
	return reflect.TypeOf((**MigratingVm)(nil)).Elem()
}

func (i *MigratingVm) ToMigratingVmOutput() MigratingVmOutput {
	return i.ToMigratingVmOutputWithContext(context.Background())
}

func (i *MigratingVm) ToMigratingVmOutputWithContext(ctx context.Context) MigratingVmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigratingVmOutput)
}

type MigratingVmOutput struct{ *pulumi.OutputState }

func (MigratingVmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigratingVm)(nil)).Elem()
}

func (o MigratingVmOutput) ToMigratingVmOutput() MigratingVmOutput {
	return o
}

func (o MigratingVmOutput) ToMigratingVmOutputWithContext(ctx context.Context) MigratingVmOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MigratingVmInput)(nil)).Elem(), &MigratingVm{})
	pulumi.RegisterOutputType(MigratingVmOutput{})
}
