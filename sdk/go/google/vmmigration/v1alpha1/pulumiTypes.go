// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Describes an appliance version.
type ApplianceVersionResponse struct {
	// Determine whether it's critical to upgrade the appliance to this version.
	Critical bool `pulumi:"critical"`
	// Link to a page that contains the version release notes.
	ReleaseNotesUri string `pulumi:"releaseNotesUri"`
	// A link for downloading the version.
	Uri string `pulumi:"uri"`
	// The appliance version.
	Version string `pulumi:"version"`
}

// Describes an appliance version.
type ApplianceVersionResponseOutput struct{ *pulumi.OutputState }

func (ApplianceVersionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplianceVersionResponse)(nil)).Elem()
}

func (o ApplianceVersionResponseOutput) ToApplianceVersionResponseOutput() ApplianceVersionResponseOutput {
	return o
}

func (o ApplianceVersionResponseOutput) ToApplianceVersionResponseOutputWithContext(ctx context.Context) ApplianceVersionResponseOutput {
	return o
}

// Determine whether it's critical to upgrade the appliance to this version.
func (o ApplianceVersionResponseOutput) Critical() pulumi.BoolOutput {
	return o.ApplyT(func(v ApplianceVersionResponse) bool { return v.Critical }).(pulumi.BoolOutput)
}

// Link to a page that contains the version release notes.
func (o ApplianceVersionResponseOutput) ReleaseNotesUri() pulumi.StringOutput {
	return o.ApplyT(func(v ApplianceVersionResponse) string { return v.ReleaseNotesUri }).(pulumi.StringOutput)
}

// A link for downloading the version.
func (o ApplianceVersionResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v ApplianceVersionResponse) string { return v.Uri }).(pulumi.StringOutput)
}

// The appliance version.
func (o ApplianceVersionResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v ApplianceVersionResponse) string { return v.Version }).(pulumi.StringOutput)
}

// AppliedLicense holds the license data returned by adaptation module report.
type AppliedLicenseResponse struct {
	// The OS license returned from the adaptation module's report.
	OsLicense string `pulumi:"osLicense"`
	// The license type that was used in OS adaptation.
	Type string `pulumi:"type"`
}

// AppliedLicense holds the license data returned by adaptation module report.
type AppliedLicenseResponseOutput struct{ *pulumi.OutputState }

func (AppliedLicenseResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppliedLicenseResponse)(nil)).Elem()
}

func (o AppliedLicenseResponseOutput) ToAppliedLicenseResponseOutput() AppliedLicenseResponseOutput {
	return o
}

func (o AppliedLicenseResponseOutput) ToAppliedLicenseResponseOutputWithContext(ctx context.Context) AppliedLicenseResponseOutput {
	return o
}

// The OS license returned from the adaptation module's report.
func (o AppliedLicenseResponseOutput) OsLicense() pulumi.StringOutput {
	return o.ApplyT(func(v AppliedLicenseResponse) string { return v.OsLicense }).(pulumi.StringOutput)
}

// The license type that was used in OS adaptation.
func (o AppliedLicenseResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AppliedLicenseResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Holds informatiom about the available versions for upgrade.
type AvailableUpdatesResponse struct {
	// The latest version for in place update. The current appliance can be updated to this version using the API or m4c CLI.
	InPlaceUpdate ApplianceVersionResponse `pulumi:"inPlaceUpdate"`
	// The newest deployable version of the appliance. The current appliance can't be updated into this version, and the owner must manually deploy this OVA to a new appliance.
	NewDeployableAppliance ApplianceVersionResponse `pulumi:"newDeployableAppliance"`
}

// Holds informatiom about the available versions for upgrade.
type AvailableUpdatesResponseOutput struct{ *pulumi.OutputState }

func (AvailableUpdatesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AvailableUpdatesResponse)(nil)).Elem()
}

func (o AvailableUpdatesResponseOutput) ToAvailableUpdatesResponseOutput() AvailableUpdatesResponseOutput {
	return o
}

func (o AvailableUpdatesResponseOutput) ToAvailableUpdatesResponseOutputWithContext(ctx context.Context) AvailableUpdatesResponseOutput {
	return o
}

// The latest version for in place update. The current appliance can be updated to this version using the API or m4c CLI.
func (o AvailableUpdatesResponseOutput) InPlaceUpdate() ApplianceVersionResponseOutput {
	return o.ApplyT(func(v AvailableUpdatesResponse) ApplianceVersionResponse { return v.InPlaceUpdate }).(ApplianceVersionResponseOutput)
}

// The newest deployable version of the appliance. The current appliance can't be updated into this version, and the owner must manually deploy this OVA to a new appliance.
func (o AvailableUpdatesResponseOutput) NewDeployableAppliance() ApplianceVersionResponseOutput {
	return o.ApplyT(func(v AvailableUpdatesResponse) ApplianceVersionResponse { return v.NewDeployableAppliance }).(ApplianceVersionResponseOutput)
}

// CloneJob describes the process of creating a clone of a MigratingVM to the requested target based on the latest successful uploaded snapshots. While the migration cycles of a MigratingVm take place, it is possible to verify the uploaded VM can be started in the cloud, by creating a clone. The clone can be created without any downtime, and it is created using the latest snapshots which are already in the cloud. The cloneJob is only responsible for its work, not its products, which means once it is finished, it will never touch the instance it created. It will only delete it in case of the CloneJob being cancelled or upon failure to clone.
type CloneJobResponse struct {
	// Details of the target VM in Compute Engine.
	ComputeEngineTargetDetails ComputeEngineTargetDetailsResponse `pulumi:"computeEngineTargetDetails"`
	// Details of the VM in Compute Engine. Deprecated: Use compute_engine_target_details instead.
	//
	// Deprecated: Output only. Details of the VM in Compute Engine. Deprecated: Use compute_engine_target_details instead.
	ComputeEngineVmDetails TargetVMDetailsResponse `pulumi:"computeEngineVmDetails"`
	// The time the clone job was created (as an API call, not when it was actually created in the target).
	CreateTime string `pulumi:"createTime"`
	// Provides details for the errors that led to the Clone Job's state.
	Error StatusResponse `pulumi:"error"`
	// The name of the clone.
	Name string `pulumi:"name"`
	// State of the clone job.
	State string `pulumi:"state"`
	// The time the state was last updated.
	StateTime string `pulumi:"stateTime"`
	// Details of the VM to create as the target of this clone job. Deprecated: Use compute_engine_target_details instead.
	//
	// Deprecated: Output only. Details of the VM to create as the target of this clone job. Deprecated: Use compute_engine_target_details instead.
	TargetDetails TargetVMDetailsResponse `pulumi:"targetDetails"`
}

// CloneJob describes the process of creating a clone of a MigratingVM to the requested target based on the latest successful uploaded snapshots. While the migration cycles of a MigratingVm take place, it is possible to verify the uploaded VM can be started in the cloud, by creating a clone. The clone can be created without any downtime, and it is created using the latest snapshots which are already in the cloud. The cloneJob is only responsible for its work, not its products, which means once it is finished, it will never touch the instance it created. It will only delete it in case of the CloneJob being cancelled or upon failure to clone.
type CloneJobResponseOutput struct{ *pulumi.OutputState }

func (CloneJobResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloneJobResponse)(nil)).Elem()
}

func (o CloneJobResponseOutput) ToCloneJobResponseOutput() CloneJobResponseOutput {
	return o
}

func (o CloneJobResponseOutput) ToCloneJobResponseOutputWithContext(ctx context.Context) CloneJobResponseOutput {
	return o
}

// Details of the target VM in Compute Engine.
func (o CloneJobResponseOutput) ComputeEngineTargetDetails() ComputeEngineTargetDetailsResponseOutput {
	return o.ApplyT(func(v CloneJobResponse) ComputeEngineTargetDetailsResponse { return v.ComputeEngineTargetDetails }).(ComputeEngineTargetDetailsResponseOutput)
}

// Details of the VM in Compute Engine. Deprecated: Use compute_engine_target_details instead.
//
// Deprecated: Output only. Details of the VM in Compute Engine. Deprecated: Use compute_engine_target_details instead.
func (o CloneJobResponseOutput) ComputeEngineVmDetails() TargetVMDetailsResponseOutput {
	return o.ApplyT(func(v CloneJobResponse) TargetVMDetailsResponse { return v.ComputeEngineVmDetails }).(TargetVMDetailsResponseOutput)
}

// The time the clone job was created (as an API call, not when it was actually created in the target).
func (o CloneJobResponseOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v CloneJobResponse) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Provides details for the errors that led to the Clone Job's state.
func (o CloneJobResponseOutput) Error() StatusResponseOutput {
	return o.ApplyT(func(v CloneJobResponse) StatusResponse { return v.Error }).(StatusResponseOutput)
}

// The name of the clone.
func (o CloneJobResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CloneJobResponse) string { return v.Name }).(pulumi.StringOutput)
}

// State of the clone job.
func (o CloneJobResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v CloneJobResponse) string { return v.State }).(pulumi.StringOutput)
}

// The time the state was last updated.
func (o CloneJobResponseOutput) StateTime() pulumi.StringOutput {
	return o.ApplyT(func(v CloneJobResponse) string { return v.StateTime }).(pulumi.StringOutput)
}

// Details of the VM to create as the target of this clone job. Deprecated: Use compute_engine_target_details instead.
//
// Deprecated: Output only. Details of the VM to create as the target of this clone job. Deprecated: Use compute_engine_target_details instead.
func (o CloneJobResponseOutput) TargetDetails() TargetVMDetailsResponseOutput {
	return o.ApplyT(func(v CloneJobResponse) TargetVMDetailsResponse { return v.TargetDetails }).(TargetVMDetailsResponseOutput)
}

type CloneJobResponseArrayOutput struct{ *pulumi.OutputState }

func (CloneJobResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CloneJobResponse)(nil)).Elem()
}

func (o CloneJobResponseArrayOutput) ToCloneJobResponseArrayOutput() CloneJobResponseArrayOutput {
	return o
}

func (o CloneJobResponseArrayOutput) ToCloneJobResponseArrayOutputWithContext(ctx context.Context) CloneJobResponseArrayOutput {
	return o
}

func (o CloneJobResponseArrayOutput) Index(i pulumi.IntInput) CloneJobResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CloneJobResponse {
		return vs[0].([]CloneJobResponse)[vs[1].(int)]
	}).(CloneJobResponseOutput)
}

// ComputeEngineTargetDefaults is a collection of details for creating a VM in a target Compute Engine project.
type ComputeEngineTargetDefaults struct {
	// Additional licenses to assign to the VM.
	AdditionalLicenses []string `pulumi:"additionalLicenses"`
	// Compute instance scheduling information (if empty default is used).
	ComputeScheduling *ComputeScheduling `pulumi:"computeScheduling"`
	// The disk type to use in the VM.
	DiskType *ComputeEngineTargetDefaultsDiskType `pulumi:"diskType"`
	// A map of labels to associate with the VM.
	Labels map[string]string `pulumi:"labels"`
	// The license type to use in OS adaptation.
	LicenseType *ComputeEngineTargetDefaultsLicenseType `pulumi:"licenseType"`
	// The machine type to create the VM with.
	MachineType *string `pulumi:"machineType"`
	// The machine type series to create the VM with.
	MachineTypeSeries *string `pulumi:"machineTypeSeries"`
	// The metadata key/value pairs to assign to the VM.
	Metadata map[string]string `pulumi:"metadata"`
	// List of NICs connected to this VM.
	NetworkInterfaces []NetworkInterface `pulumi:"networkInterfaces"`
	// A map of network tags to associate with the VM.
	NetworkTags []string `pulumi:"networkTags"`
	// Defines whether the instance has Secure Boot enabled. This can be set to true only if the vm boot option is EFI.
	SecureBoot *bool `pulumi:"secureBoot"`
	// The service account to associate the VM with.
	ServiceAccount *string `pulumi:"serviceAccount"`
	// The full path of the resource of type TargetProject which represents the Compute Engine project in which to create this VM.
	TargetProject *string `pulumi:"targetProject"`
	// The name of the VM to create.
	VmName *string `pulumi:"vmName"`
	// The zone in which to create the VM.
	Zone *string `pulumi:"zone"`
}

// ComputeEngineTargetDefaultsInput is an input type that accepts ComputeEngineTargetDefaultsArgs and ComputeEngineTargetDefaultsOutput values.
// You can construct a concrete instance of `ComputeEngineTargetDefaultsInput` via:
//
//          ComputeEngineTargetDefaultsArgs{...}
type ComputeEngineTargetDefaultsInput interface {
	pulumi.Input

	ToComputeEngineTargetDefaultsOutput() ComputeEngineTargetDefaultsOutput
	ToComputeEngineTargetDefaultsOutputWithContext(context.Context) ComputeEngineTargetDefaultsOutput
}

// ComputeEngineTargetDefaults is a collection of details for creating a VM in a target Compute Engine project.
type ComputeEngineTargetDefaultsArgs struct {
	// Additional licenses to assign to the VM.
	AdditionalLicenses pulumi.StringArrayInput `pulumi:"additionalLicenses"`
	// Compute instance scheduling information (if empty default is used).
	ComputeScheduling ComputeSchedulingPtrInput `pulumi:"computeScheduling"`
	// The disk type to use in the VM.
	DiskType ComputeEngineTargetDefaultsDiskTypePtrInput `pulumi:"diskType"`
	// A map of labels to associate with the VM.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// The license type to use in OS adaptation.
	LicenseType ComputeEngineTargetDefaultsLicenseTypePtrInput `pulumi:"licenseType"`
	// The machine type to create the VM with.
	MachineType pulumi.StringPtrInput `pulumi:"machineType"`
	// The machine type series to create the VM with.
	MachineTypeSeries pulumi.StringPtrInput `pulumi:"machineTypeSeries"`
	// The metadata key/value pairs to assign to the VM.
	Metadata pulumi.StringMapInput `pulumi:"metadata"`
	// List of NICs connected to this VM.
	NetworkInterfaces NetworkInterfaceArrayInput `pulumi:"networkInterfaces"`
	// A map of network tags to associate with the VM.
	NetworkTags pulumi.StringArrayInput `pulumi:"networkTags"`
	// Defines whether the instance has Secure Boot enabled. This can be set to true only if the vm boot option is EFI.
	SecureBoot pulumi.BoolPtrInput `pulumi:"secureBoot"`
	// The service account to associate the VM with.
	ServiceAccount pulumi.StringPtrInput `pulumi:"serviceAccount"`
	// The full path of the resource of type TargetProject which represents the Compute Engine project in which to create this VM.
	TargetProject pulumi.StringPtrInput `pulumi:"targetProject"`
	// The name of the VM to create.
	VmName pulumi.StringPtrInput `pulumi:"vmName"`
	// The zone in which to create the VM.
	Zone pulumi.StringPtrInput `pulumi:"zone"`
}

func (ComputeEngineTargetDefaultsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeEngineTargetDefaults)(nil)).Elem()
}

func (i ComputeEngineTargetDefaultsArgs) ToComputeEngineTargetDefaultsOutput() ComputeEngineTargetDefaultsOutput {
	return i.ToComputeEngineTargetDefaultsOutputWithContext(context.Background())
}

func (i ComputeEngineTargetDefaultsArgs) ToComputeEngineTargetDefaultsOutputWithContext(ctx context.Context) ComputeEngineTargetDefaultsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeEngineTargetDefaultsOutput)
}

func (i ComputeEngineTargetDefaultsArgs) ToComputeEngineTargetDefaultsPtrOutput() ComputeEngineTargetDefaultsPtrOutput {
	return i.ToComputeEngineTargetDefaultsPtrOutputWithContext(context.Background())
}

func (i ComputeEngineTargetDefaultsArgs) ToComputeEngineTargetDefaultsPtrOutputWithContext(ctx context.Context) ComputeEngineTargetDefaultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeEngineTargetDefaultsOutput).ToComputeEngineTargetDefaultsPtrOutputWithContext(ctx)
}

// ComputeEngineTargetDefaultsPtrInput is an input type that accepts ComputeEngineTargetDefaultsArgs, ComputeEngineTargetDefaultsPtr and ComputeEngineTargetDefaultsPtrOutput values.
// You can construct a concrete instance of `ComputeEngineTargetDefaultsPtrInput` via:
//
//          ComputeEngineTargetDefaultsArgs{...}
//
//  or:
//
//          nil
type ComputeEngineTargetDefaultsPtrInput interface {
	pulumi.Input

	ToComputeEngineTargetDefaultsPtrOutput() ComputeEngineTargetDefaultsPtrOutput
	ToComputeEngineTargetDefaultsPtrOutputWithContext(context.Context) ComputeEngineTargetDefaultsPtrOutput
}

type computeEngineTargetDefaultsPtrType ComputeEngineTargetDefaultsArgs

func ComputeEngineTargetDefaultsPtr(v *ComputeEngineTargetDefaultsArgs) ComputeEngineTargetDefaultsPtrInput {
	return (*computeEngineTargetDefaultsPtrType)(v)
}

func (*computeEngineTargetDefaultsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeEngineTargetDefaults)(nil)).Elem()
}

func (i *computeEngineTargetDefaultsPtrType) ToComputeEngineTargetDefaultsPtrOutput() ComputeEngineTargetDefaultsPtrOutput {
	return i.ToComputeEngineTargetDefaultsPtrOutputWithContext(context.Background())
}

func (i *computeEngineTargetDefaultsPtrType) ToComputeEngineTargetDefaultsPtrOutputWithContext(ctx context.Context) ComputeEngineTargetDefaultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeEngineTargetDefaultsPtrOutput)
}

// ComputeEngineTargetDefaults is a collection of details for creating a VM in a target Compute Engine project.
type ComputeEngineTargetDefaultsOutput struct{ *pulumi.OutputState }

func (ComputeEngineTargetDefaultsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeEngineTargetDefaults)(nil)).Elem()
}

func (o ComputeEngineTargetDefaultsOutput) ToComputeEngineTargetDefaultsOutput() ComputeEngineTargetDefaultsOutput {
	return o
}

func (o ComputeEngineTargetDefaultsOutput) ToComputeEngineTargetDefaultsOutputWithContext(ctx context.Context) ComputeEngineTargetDefaultsOutput {
	return o
}

func (o ComputeEngineTargetDefaultsOutput) ToComputeEngineTargetDefaultsPtrOutput() ComputeEngineTargetDefaultsPtrOutput {
	return o.ToComputeEngineTargetDefaultsPtrOutputWithContext(context.Background())
}

func (o ComputeEngineTargetDefaultsOutput) ToComputeEngineTargetDefaultsPtrOutputWithContext(ctx context.Context) ComputeEngineTargetDefaultsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComputeEngineTargetDefaults) *ComputeEngineTargetDefaults {
		return &v
	}).(ComputeEngineTargetDefaultsPtrOutput)
}

// Additional licenses to assign to the VM.
func (o ComputeEngineTargetDefaultsOutput) AdditionalLicenses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaults) []string { return v.AdditionalLicenses }).(pulumi.StringArrayOutput)
}

// Compute instance scheduling information (if empty default is used).
func (o ComputeEngineTargetDefaultsOutput) ComputeScheduling() ComputeSchedulingPtrOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaults) *ComputeScheduling { return v.ComputeScheduling }).(ComputeSchedulingPtrOutput)
}

// The disk type to use in the VM.
func (o ComputeEngineTargetDefaultsOutput) DiskType() ComputeEngineTargetDefaultsDiskTypePtrOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaults) *ComputeEngineTargetDefaultsDiskType { return v.DiskType }).(ComputeEngineTargetDefaultsDiskTypePtrOutput)
}

// A map of labels to associate with the VM.
func (o ComputeEngineTargetDefaultsOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaults) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The license type to use in OS adaptation.
func (o ComputeEngineTargetDefaultsOutput) LicenseType() ComputeEngineTargetDefaultsLicenseTypePtrOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaults) *ComputeEngineTargetDefaultsLicenseType { return v.LicenseType }).(ComputeEngineTargetDefaultsLicenseTypePtrOutput)
}

// The machine type to create the VM with.
func (o ComputeEngineTargetDefaultsOutput) MachineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaults) *string { return v.MachineType }).(pulumi.StringPtrOutput)
}

// The machine type series to create the VM with.
func (o ComputeEngineTargetDefaultsOutput) MachineTypeSeries() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaults) *string { return v.MachineTypeSeries }).(pulumi.StringPtrOutput)
}

// The metadata key/value pairs to assign to the VM.
func (o ComputeEngineTargetDefaultsOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaults) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// List of NICs connected to this VM.
func (o ComputeEngineTargetDefaultsOutput) NetworkInterfaces() NetworkInterfaceArrayOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaults) []NetworkInterface { return v.NetworkInterfaces }).(NetworkInterfaceArrayOutput)
}

// A map of network tags to associate with the VM.
func (o ComputeEngineTargetDefaultsOutput) NetworkTags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaults) []string { return v.NetworkTags }).(pulumi.StringArrayOutput)
}

// Defines whether the instance has Secure Boot enabled. This can be set to true only if the vm boot option is EFI.
func (o ComputeEngineTargetDefaultsOutput) SecureBoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaults) *bool { return v.SecureBoot }).(pulumi.BoolPtrOutput)
}

// The service account to associate the VM with.
func (o ComputeEngineTargetDefaultsOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaults) *string { return v.ServiceAccount }).(pulumi.StringPtrOutput)
}

// The full path of the resource of type TargetProject which represents the Compute Engine project in which to create this VM.
func (o ComputeEngineTargetDefaultsOutput) TargetProject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaults) *string { return v.TargetProject }).(pulumi.StringPtrOutput)
}

// The name of the VM to create.
func (o ComputeEngineTargetDefaultsOutput) VmName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaults) *string { return v.VmName }).(pulumi.StringPtrOutput)
}

// The zone in which to create the VM.
func (o ComputeEngineTargetDefaultsOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaults) *string { return v.Zone }).(pulumi.StringPtrOutput)
}

type ComputeEngineTargetDefaultsPtrOutput struct{ *pulumi.OutputState }

func (ComputeEngineTargetDefaultsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeEngineTargetDefaults)(nil)).Elem()
}

func (o ComputeEngineTargetDefaultsPtrOutput) ToComputeEngineTargetDefaultsPtrOutput() ComputeEngineTargetDefaultsPtrOutput {
	return o
}

func (o ComputeEngineTargetDefaultsPtrOutput) ToComputeEngineTargetDefaultsPtrOutputWithContext(ctx context.Context) ComputeEngineTargetDefaultsPtrOutput {
	return o
}

func (o ComputeEngineTargetDefaultsPtrOutput) Elem() ComputeEngineTargetDefaultsOutput {
	return o.ApplyT(func(v *ComputeEngineTargetDefaults) ComputeEngineTargetDefaults {
		if v != nil {
			return *v
		}
		var ret ComputeEngineTargetDefaults
		return ret
	}).(ComputeEngineTargetDefaultsOutput)
}

// Additional licenses to assign to the VM.
func (o ComputeEngineTargetDefaultsPtrOutput) AdditionalLicenses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ComputeEngineTargetDefaults) []string {
		if v == nil {
			return nil
		}
		return v.AdditionalLicenses
	}).(pulumi.StringArrayOutput)
}

// Compute instance scheduling information (if empty default is used).
func (o ComputeEngineTargetDefaultsPtrOutput) ComputeScheduling() ComputeSchedulingPtrOutput {
	return o.ApplyT(func(v *ComputeEngineTargetDefaults) *ComputeScheduling {
		if v == nil {
			return nil
		}
		return v.ComputeScheduling
	}).(ComputeSchedulingPtrOutput)
}

// The disk type to use in the VM.
func (o ComputeEngineTargetDefaultsPtrOutput) DiskType() ComputeEngineTargetDefaultsDiskTypePtrOutput {
	return o.ApplyT(func(v *ComputeEngineTargetDefaults) *ComputeEngineTargetDefaultsDiskType {
		if v == nil {
			return nil
		}
		return v.DiskType
	}).(ComputeEngineTargetDefaultsDiskTypePtrOutput)
}

// A map of labels to associate with the VM.
func (o ComputeEngineTargetDefaultsPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ComputeEngineTargetDefaults) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// The license type to use in OS adaptation.
func (o ComputeEngineTargetDefaultsPtrOutput) LicenseType() ComputeEngineTargetDefaultsLicenseTypePtrOutput {
	return o.ApplyT(func(v *ComputeEngineTargetDefaults) *ComputeEngineTargetDefaultsLicenseType {
		if v == nil {
			return nil
		}
		return v.LicenseType
	}).(ComputeEngineTargetDefaultsLicenseTypePtrOutput)
}

// The machine type to create the VM with.
func (o ComputeEngineTargetDefaultsPtrOutput) MachineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeEngineTargetDefaults) *string {
		if v == nil {
			return nil
		}
		return v.MachineType
	}).(pulumi.StringPtrOutput)
}

// The machine type series to create the VM with.
func (o ComputeEngineTargetDefaultsPtrOutput) MachineTypeSeries() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeEngineTargetDefaults) *string {
		if v == nil {
			return nil
		}
		return v.MachineTypeSeries
	}).(pulumi.StringPtrOutput)
}

// The metadata key/value pairs to assign to the VM.
func (o ComputeEngineTargetDefaultsPtrOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ComputeEngineTargetDefaults) map[string]string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringMapOutput)
}

// List of NICs connected to this VM.
func (o ComputeEngineTargetDefaultsPtrOutput) NetworkInterfaces() NetworkInterfaceArrayOutput {
	return o.ApplyT(func(v *ComputeEngineTargetDefaults) []NetworkInterface {
		if v == nil {
			return nil
		}
		return v.NetworkInterfaces
	}).(NetworkInterfaceArrayOutput)
}

// A map of network tags to associate with the VM.
func (o ComputeEngineTargetDefaultsPtrOutput) NetworkTags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ComputeEngineTargetDefaults) []string {
		if v == nil {
			return nil
		}
		return v.NetworkTags
	}).(pulumi.StringArrayOutput)
}

// Defines whether the instance has Secure Boot enabled. This can be set to true only if the vm boot option is EFI.
func (o ComputeEngineTargetDefaultsPtrOutput) SecureBoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ComputeEngineTargetDefaults) *bool {
		if v == nil {
			return nil
		}
		return v.SecureBoot
	}).(pulumi.BoolPtrOutput)
}

// The service account to associate the VM with.
func (o ComputeEngineTargetDefaultsPtrOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeEngineTargetDefaults) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccount
	}).(pulumi.StringPtrOutput)
}

// The full path of the resource of type TargetProject which represents the Compute Engine project in which to create this VM.
func (o ComputeEngineTargetDefaultsPtrOutput) TargetProject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeEngineTargetDefaults) *string {
		if v == nil {
			return nil
		}
		return v.TargetProject
	}).(pulumi.StringPtrOutput)
}

// The name of the VM to create.
func (o ComputeEngineTargetDefaultsPtrOutput) VmName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeEngineTargetDefaults) *string {
		if v == nil {
			return nil
		}
		return v.VmName
	}).(pulumi.StringPtrOutput)
}

// The zone in which to create the VM.
func (o ComputeEngineTargetDefaultsPtrOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeEngineTargetDefaults) *string {
		if v == nil {
			return nil
		}
		return v.Zone
	}).(pulumi.StringPtrOutput)
}

// ComputeEngineTargetDefaults is a collection of details for creating a VM in a target Compute Engine project.
type ComputeEngineTargetDefaultsResponse struct {
	// Additional licenses to assign to the VM.
	AdditionalLicenses []string `pulumi:"additionalLicenses"`
	// The OS license returned from the adaptation module report.
	AppliedLicense AppliedLicenseResponse `pulumi:"appliedLicense"`
	// The VM Boot Option, as set in the source vm.
	BootOption string `pulumi:"bootOption"`
	// Compute instance scheduling information (if empty default is used).
	ComputeScheduling ComputeSchedulingResponse `pulumi:"computeScheduling"`
	// The disk type to use in the VM.
	DiskType string `pulumi:"diskType"`
	// A map of labels to associate with the VM.
	Labels map[string]string `pulumi:"labels"`
	// The license type to use in OS adaptation.
	LicenseType string `pulumi:"licenseType"`
	// The machine type to create the VM with.
	MachineType string `pulumi:"machineType"`
	// The machine type series to create the VM with.
	MachineTypeSeries string `pulumi:"machineTypeSeries"`
	// The metadata key/value pairs to assign to the VM.
	Metadata map[string]string `pulumi:"metadata"`
	// List of NICs connected to this VM.
	NetworkInterfaces []NetworkInterfaceResponse `pulumi:"networkInterfaces"`
	// A map of network tags to associate with the VM.
	NetworkTags []string `pulumi:"networkTags"`
	// Defines whether the instance has Secure Boot enabled. This can be set to true only if the vm boot option is EFI.
	SecureBoot bool `pulumi:"secureBoot"`
	// The service account to associate the VM with.
	ServiceAccount string `pulumi:"serviceAccount"`
	// The full path of the resource of type TargetProject which represents the Compute Engine project in which to create this VM.
	TargetProject string `pulumi:"targetProject"`
	// The name of the VM to create.
	VmName string `pulumi:"vmName"`
	// The zone in which to create the VM.
	Zone string `pulumi:"zone"`
}

// ComputeEngineTargetDefaults is a collection of details for creating a VM in a target Compute Engine project.
type ComputeEngineTargetDefaultsResponseOutput struct{ *pulumi.OutputState }

func (ComputeEngineTargetDefaultsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeEngineTargetDefaultsResponse)(nil)).Elem()
}

func (o ComputeEngineTargetDefaultsResponseOutput) ToComputeEngineTargetDefaultsResponseOutput() ComputeEngineTargetDefaultsResponseOutput {
	return o
}

func (o ComputeEngineTargetDefaultsResponseOutput) ToComputeEngineTargetDefaultsResponseOutputWithContext(ctx context.Context) ComputeEngineTargetDefaultsResponseOutput {
	return o
}

// Additional licenses to assign to the VM.
func (o ComputeEngineTargetDefaultsResponseOutput) AdditionalLicenses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaultsResponse) []string { return v.AdditionalLicenses }).(pulumi.StringArrayOutput)
}

// The OS license returned from the adaptation module report.
func (o ComputeEngineTargetDefaultsResponseOutput) AppliedLicense() AppliedLicenseResponseOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaultsResponse) AppliedLicenseResponse { return v.AppliedLicense }).(AppliedLicenseResponseOutput)
}

// The VM Boot Option, as set in the source vm.
func (o ComputeEngineTargetDefaultsResponseOutput) BootOption() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaultsResponse) string { return v.BootOption }).(pulumi.StringOutput)
}

// Compute instance scheduling information (if empty default is used).
func (o ComputeEngineTargetDefaultsResponseOutput) ComputeScheduling() ComputeSchedulingResponseOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaultsResponse) ComputeSchedulingResponse { return v.ComputeScheduling }).(ComputeSchedulingResponseOutput)
}

// The disk type to use in the VM.
func (o ComputeEngineTargetDefaultsResponseOutput) DiskType() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaultsResponse) string { return v.DiskType }).(pulumi.StringOutput)
}

// A map of labels to associate with the VM.
func (o ComputeEngineTargetDefaultsResponseOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaultsResponse) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The license type to use in OS adaptation.
func (o ComputeEngineTargetDefaultsResponseOutput) LicenseType() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaultsResponse) string { return v.LicenseType }).(pulumi.StringOutput)
}

// The machine type to create the VM with.
func (o ComputeEngineTargetDefaultsResponseOutput) MachineType() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaultsResponse) string { return v.MachineType }).(pulumi.StringOutput)
}

// The machine type series to create the VM with.
func (o ComputeEngineTargetDefaultsResponseOutput) MachineTypeSeries() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaultsResponse) string { return v.MachineTypeSeries }).(pulumi.StringOutput)
}

// The metadata key/value pairs to assign to the VM.
func (o ComputeEngineTargetDefaultsResponseOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaultsResponse) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// List of NICs connected to this VM.
func (o ComputeEngineTargetDefaultsResponseOutput) NetworkInterfaces() NetworkInterfaceResponseArrayOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaultsResponse) []NetworkInterfaceResponse { return v.NetworkInterfaces }).(NetworkInterfaceResponseArrayOutput)
}

// A map of network tags to associate with the VM.
func (o ComputeEngineTargetDefaultsResponseOutput) NetworkTags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaultsResponse) []string { return v.NetworkTags }).(pulumi.StringArrayOutput)
}

// Defines whether the instance has Secure Boot enabled. This can be set to true only if the vm boot option is EFI.
func (o ComputeEngineTargetDefaultsResponseOutput) SecureBoot() pulumi.BoolOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaultsResponse) bool { return v.SecureBoot }).(pulumi.BoolOutput)
}

// The service account to associate the VM with.
func (o ComputeEngineTargetDefaultsResponseOutput) ServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaultsResponse) string { return v.ServiceAccount }).(pulumi.StringOutput)
}

// The full path of the resource of type TargetProject which represents the Compute Engine project in which to create this VM.
func (o ComputeEngineTargetDefaultsResponseOutput) TargetProject() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaultsResponse) string { return v.TargetProject }).(pulumi.StringOutput)
}

// The name of the VM to create.
func (o ComputeEngineTargetDefaultsResponseOutput) VmName() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaultsResponse) string { return v.VmName }).(pulumi.StringOutput)
}

// The zone in which to create the VM.
func (o ComputeEngineTargetDefaultsResponseOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaultsResponse) string { return v.Zone }).(pulumi.StringOutput)
}

// ComputeEngineTargetDetails is a collection of details for creating a VM in a target Compute Engine project.
type ComputeEngineTargetDetailsResponse struct {
	// Additional licenses to assign to the VM.
	AdditionalLicenses []string `pulumi:"additionalLicenses"`
	// The OS license returned from the adaptation module report.
	AppliedLicense AppliedLicenseResponse `pulumi:"appliedLicense"`
	// The VM Boot Option, as set in the source vm.
	BootOption string `pulumi:"bootOption"`
	// Compute instance scheduling information (if empty default is used).
	ComputeScheduling ComputeSchedulingResponse `pulumi:"computeScheduling"`
	// The disk type to use in the VM.
	DiskType string `pulumi:"diskType"`
	// A map of labels to associate with the VM.
	Labels map[string]string `pulumi:"labels"`
	// The license type to use in OS adaptation.
	LicenseType string `pulumi:"licenseType"`
	// The machine type to create the VM with.
	MachineType string `pulumi:"machineType"`
	// The machine type series to create the VM with.
	MachineTypeSeries string `pulumi:"machineTypeSeries"`
	// The metadata key/value pairs to assign to the VM.
	Metadata map[string]string `pulumi:"metadata"`
	// List of NICs connected to this VM.
	NetworkInterfaces []NetworkInterfaceResponse `pulumi:"networkInterfaces"`
	// A map of network tags to associate with the VM.
	NetworkTags []string `pulumi:"networkTags"`
	// The GCP target project ID or project name.
	Project string `pulumi:"project"`
	// Defines whether the instance has Secure Boot enabled. This can be set to true only if the vm boot option is EFI.
	SecureBoot bool `pulumi:"secureBoot"`
	// The service account to associate the VM with.
	ServiceAccount string `pulumi:"serviceAccount"`
	// The name of the VM to create.
	VmName string `pulumi:"vmName"`
	// The zone in which to create the VM.
	Zone string `pulumi:"zone"`
}

// ComputeEngineTargetDetails is a collection of details for creating a VM in a target Compute Engine project.
type ComputeEngineTargetDetailsResponseOutput struct{ *pulumi.OutputState }

func (ComputeEngineTargetDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeEngineTargetDetailsResponse)(nil)).Elem()
}

func (o ComputeEngineTargetDetailsResponseOutput) ToComputeEngineTargetDetailsResponseOutput() ComputeEngineTargetDetailsResponseOutput {
	return o
}

func (o ComputeEngineTargetDetailsResponseOutput) ToComputeEngineTargetDetailsResponseOutputWithContext(ctx context.Context) ComputeEngineTargetDetailsResponseOutput {
	return o
}

// Additional licenses to assign to the VM.
func (o ComputeEngineTargetDetailsResponseOutput) AdditionalLicenses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ComputeEngineTargetDetailsResponse) []string { return v.AdditionalLicenses }).(pulumi.StringArrayOutput)
}

// The OS license returned from the adaptation module report.
func (o ComputeEngineTargetDetailsResponseOutput) AppliedLicense() AppliedLicenseResponseOutput {
	return o.ApplyT(func(v ComputeEngineTargetDetailsResponse) AppliedLicenseResponse { return v.AppliedLicense }).(AppliedLicenseResponseOutput)
}

// The VM Boot Option, as set in the source vm.
func (o ComputeEngineTargetDetailsResponseOutput) BootOption() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeEngineTargetDetailsResponse) string { return v.BootOption }).(pulumi.StringOutput)
}

// Compute instance scheduling information (if empty default is used).
func (o ComputeEngineTargetDetailsResponseOutput) ComputeScheduling() ComputeSchedulingResponseOutput {
	return o.ApplyT(func(v ComputeEngineTargetDetailsResponse) ComputeSchedulingResponse { return v.ComputeScheduling }).(ComputeSchedulingResponseOutput)
}

// The disk type to use in the VM.
func (o ComputeEngineTargetDetailsResponseOutput) DiskType() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeEngineTargetDetailsResponse) string { return v.DiskType }).(pulumi.StringOutput)
}

// A map of labels to associate with the VM.
func (o ComputeEngineTargetDetailsResponseOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ComputeEngineTargetDetailsResponse) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The license type to use in OS adaptation.
func (o ComputeEngineTargetDetailsResponseOutput) LicenseType() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeEngineTargetDetailsResponse) string { return v.LicenseType }).(pulumi.StringOutput)
}

// The machine type to create the VM with.
func (o ComputeEngineTargetDetailsResponseOutput) MachineType() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeEngineTargetDetailsResponse) string { return v.MachineType }).(pulumi.StringOutput)
}

// The machine type series to create the VM with.
func (o ComputeEngineTargetDetailsResponseOutput) MachineTypeSeries() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeEngineTargetDetailsResponse) string { return v.MachineTypeSeries }).(pulumi.StringOutput)
}

// The metadata key/value pairs to assign to the VM.
func (o ComputeEngineTargetDetailsResponseOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v ComputeEngineTargetDetailsResponse) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// List of NICs connected to this VM.
func (o ComputeEngineTargetDetailsResponseOutput) NetworkInterfaces() NetworkInterfaceResponseArrayOutput {
	return o.ApplyT(func(v ComputeEngineTargetDetailsResponse) []NetworkInterfaceResponse { return v.NetworkInterfaces }).(NetworkInterfaceResponseArrayOutput)
}

// A map of network tags to associate with the VM.
func (o ComputeEngineTargetDetailsResponseOutput) NetworkTags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ComputeEngineTargetDetailsResponse) []string { return v.NetworkTags }).(pulumi.StringArrayOutput)
}

// The GCP target project ID or project name.
func (o ComputeEngineTargetDetailsResponseOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeEngineTargetDetailsResponse) string { return v.Project }).(pulumi.StringOutput)
}

// Defines whether the instance has Secure Boot enabled. This can be set to true only if the vm boot option is EFI.
func (o ComputeEngineTargetDetailsResponseOutput) SecureBoot() pulumi.BoolOutput {
	return o.ApplyT(func(v ComputeEngineTargetDetailsResponse) bool { return v.SecureBoot }).(pulumi.BoolOutput)
}

// The service account to associate the VM with.
func (o ComputeEngineTargetDetailsResponseOutput) ServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeEngineTargetDetailsResponse) string { return v.ServiceAccount }).(pulumi.StringOutput)
}

// The name of the VM to create.
func (o ComputeEngineTargetDetailsResponseOutput) VmName() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeEngineTargetDetailsResponse) string { return v.VmName }).(pulumi.StringOutput)
}

// The zone in which to create the VM.
func (o ComputeEngineTargetDetailsResponseOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeEngineTargetDetailsResponse) string { return v.Zone }).(pulumi.StringOutput)
}

// Scheduling information for VM on maintenance/restart behaviour and node allocation in sole tenant nodes.
type ComputeScheduling struct {
	AutomaticRestart *bool `pulumi:"automaticRestart"`
	// The minimum number of virtual CPUs this instance will consume when running on a sole-tenant node. Ignored if no node_affinites are configured.
	MinNodeCpus *int `pulumi:"minNodeCpus"`
	// A set of node affinity and anti-affinity configurations for sole tenant nodes.
	NodeAffinities []SchedulingNodeAffinity `pulumi:"nodeAffinities"`
	// How the instance should behave when the host machine undergoes maintenance that may temporarily impact instance performance.
	OnHostMaintenance *ComputeSchedulingOnHostMaintenance `pulumi:"onHostMaintenance"`
	// Whether the Instance should be automatically restarted whenever it is terminated by Compute Engine (not terminated by user). This configuration is identical to `automaticRestart` field in Compute Engine create instance under scheduling. It was changed to an enum (instead of a boolean) to match the default value in Compute Engine which is automatic restart.
	RestartType *ComputeSchedulingRestartType `pulumi:"restartType"`
}

// ComputeSchedulingInput is an input type that accepts ComputeSchedulingArgs and ComputeSchedulingOutput values.
// You can construct a concrete instance of `ComputeSchedulingInput` via:
//
//          ComputeSchedulingArgs{...}
type ComputeSchedulingInput interface {
	pulumi.Input

	ToComputeSchedulingOutput() ComputeSchedulingOutput
	ToComputeSchedulingOutputWithContext(context.Context) ComputeSchedulingOutput
}

// Scheduling information for VM on maintenance/restart behaviour and node allocation in sole tenant nodes.
type ComputeSchedulingArgs struct {
	AutomaticRestart pulumi.BoolPtrInput `pulumi:"automaticRestart"`
	// The minimum number of virtual CPUs this instance will consume when running on a sole-tenant node. Ignored if no node_affinites are configured.
	MinNodeCpus pulumi.IntPtrInput `pulumi:"minNodeCpus"`
	// A set of node affinity and anti-affinity configurations for sole tenant nodes.
	NodeAffinities SchedulingNodeAffinityArrayInput `pulumi:"nodeAffinities"`
	// How the instance should behave when the host machine undergoes maintenance that may temporarily impact instance performance.
	OnHostMaintenance ComputeSchedulingOnHostMaintenancePtrInput `pulumi:"onHostMaintenance"`
	// Whether the Instance should be automatically restarted whenever it is terminated by Compute Engine (not terminated by user). This configuration is identical to `automaticRestart` field in Compute Engine create instance under scheduling. It was changed to an enum (instead of a boolean) to match the default value in Compute Engine which is automatic restart.
	RestartType ComputeSchedulingRestartTypePtrInput `pulumi:"restartType"`
}

func (ComputeSchedulingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeScheduling)(nil)).Elem()
}

func (i ComputeSchedulingArgs) ToComputeSchedulingOutput() ComputeSchedulingOutput {
	return i.ToComputeSchedulingOutputWithContext(context.Background())
}

func (i ComputeSchedulingArgs) ToComputeSchedulingOutputWithContext(ctx context.Context) ComputeSchedulingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeSchedulingOutput)
}

func (i ComputeSchedulingArgs) ToComputeSchedulingPtrOutput() ComputeSchedulingPtrOutput {
	return i.ToComputeSchedulingPtrOutputWithContext(context.Background())
}

func (i ComputeSchedulingArgs) ToComputeSchedulingPtrOutputWithContext(ctx context.Context) ComputeSchedulingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeSchedulingOutput).ToComputeSchedulingPtrOutputWithContext(ctx)
}

// ComputeSchedulingPtrInput is an input type that accepts ComputeSchedulingArgs, ComputeSchedulingPtr and ComputeSchedulingPtrOutput values.
// You can construct a concrete instance of `ComputeSchedulingPtrInput` via:
//
//          ComputeSchedulingArgs{...}
//
//  or:
//
//          nil
type ComputeSchedulingPtrInput interface {
	pulumi.Input

	ToComputeSchedulingPtrOutput() ComputeSchedulingPtrOutput
	ToComputeSchedulingPtrOutputWithContext(context.Context) ComputeSchedulingPtrOutput
}

type computeSchedulingPtrType ComputeSchedulingArgs

func ComputeSchedulingPtr(v *ComputeSchedulingArgs) ComputeSchedulingPtrInput {
	return (*computeSchedulingPtrType)(v)
}

func (*computeSchedulingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeScheduling)(nil)).Elem()
}

func (i *computeSchedulingPtrType) ToComputeSchedulingPtrOutput() ComputeSchedulingPtrOutput {
	return i.ToComputeSchedulingPtrOutputWithContext(context.Background())
}

func (i *computeSchedulingPtrType) ToComputeSchedulingPtrOutputWithContext(ctx context.Context) ComputeSchedulingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeSchedulingPtrOutput)
}

// Scheduling information for VM on maintenance/restart behaviour and node allocation in sole tenant nodes.
type ComputeSchedulingOutput struct{ *pulumi.OutputState }

func (ComputeSchedulingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeScheduling)(nil)).Elem()
}

func (o ComputeSchedulingOutput) ToComputeSchedulingOutput() ComputeSchedulingOutput {
	return o
}

func (o ComputeSchedulingOutput) ToComputeSchedulingOutputWithContext(ctx context.Context) ComputeSchedulingOutput {
	return o
}

func (o ComputeSchedulingOutput) ToComputeSchedulingPtrOutput() ComputeSchedulingPtrOutput {
	return o.ToComputeSchedulingPtrOutputWithContext(context.Background())
}

func (o ComputeSchedulingOutput) ToComputeSchedulingPtrOutputWithContext(ctx context.Context) ComputeSchedulingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComputeScheduling) *ComputeScheduling {
		return &v
	}).(ComputeSchedulingPtrOutput)
}

func (o ComputeSchedulingOutput) AutomaticRestart() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComputeScheduling) *bool { return v.AutomaticRestart }).(pulumi.BoolPtrOutput)
}

// The minimum number of virtual CPUs this instance will consume when running on a sole-tenant node. Ignored if no node_affinites are configured.
func (o ComputeSchedulingOutput) MinNodeCpus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ComputeScheduling) *int { return v.MinNodeCpus }).(pulumi.IntPtrOutput)
}

// A set of node affinity and anti-affinity configurations for sole tenant nodes.
func (o ComputeSchedulingOutput) NodeAffinities() SchedulingNodeAffinityArrayOutput {
	return o.ApplyT(func(v ComputeScheduling) []SchedulingNodeAffinity { return v.NodeAffinities }).(SchedulingNodeAffinityArrayOutput)
}

// How the instance should behave when the host machine undergoes maintenance that may temporarily impact instance performance.
func (o ComputeSchedulingOutput) OnHostMaintenance() ComputeSchedulingOnHostMaintenancePtrOutput {
	return o.ApplyT(func(v ComputeScheduling) *ComputeSchedulingOnHostMaintenance { return v.OnHostMaintenance }).(ComputeSchedulingOnHostMaintenancePtrOutput)
}

// Whether the Instance should be automatically restarted whenever it is terminated by Compute Engine (not terminated by user). This configuration is identical to `automaticRestart` field in Compute Engine create instance under scheduling. It was changed to an enum (instead of a boolean) to match the default value in Compute Engine which is automatic restart.
func (o ComputeSchedulingOutput) RestartType() ComputeSchedulingRestartTypePtrOutput {
	return o.ApplyT(func(v ComputeScheduling) *ComputeSchedulingRestartType { return v.RestartType }).(ComputeSchedulingRestartTypePtrOutput)
}

type ComputeSchedulingPtrOutput struct{ *pulumi.OutputState }

func (ComputeSchedulingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeScheduling)(nil)).Elem()
}

func (o ComputeSchedulingPtrOutput) ToComputeSchedulingPtrOutput() ComputeSchedulingPtrOutput {
	return o
}

func (o ComputeSchedulingPtrOutput) ToComputeSchedulingPtrOutputWithContext(ctx context.Context) ComputeSchedulingPtrOutput {
	return o
}

func (o ComputeSchedulingPtrOutput) Elem() ComputeSchedulingOutput {
	return o.ApplyT(func(v *ComputeScheduling) ComputeScheduling {
		if v != nil {
			return *v
		}
		var ret ComputeScheduling
		return ret
	}).(ComputeSchedulingOutput)
}

func (o ComputeSchedulingPtrOutput) AutomaticRestart() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ComputeScheduling) *bool {
		if v == nil {
			return nil
		}
		return v.AutomaticRestart
	}).(pulumi.BoolPtrOutput)
}

// The minimum number of virtual CPUs this instance will consume when running on a sole-tenant node. Ignored if no node_affinites are configured.
func (o ComputeSchedulingPtrOutput) MinNodeCpus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ComputeScheduling) *int {
		if v == nil {
			return nil
		}
		return v.MinNodeCpus
	}).(pulumi.IntPtrOutput)
}

// A set of node affinity and anti-affinity configurations for sole tenant nodes.
func (o ComputeSchedulingPtrOutput) NodeAffinities() SchedulingNodeAffinityArrayOutput {
	return o.ApplyT(func(v *ComputeScheduling) []SchedulingNodeAffinity {
		if v == nil {
			return nil
		}
		return v.NodeAffinities
	}).(SchedulingNodeAffinityArrayOutput)
}

// How the instance should behave when the host machine undergoes maintenance that may temporarily impact instance performance.
func (o ComputeSchedulingPtrOutput) OnHostMaintenance() ComputeSchedulingOnHostMaintenancePtrOutput {
	return o.ApplyT(func(v *ComputeScheduling) *ComputeSchedulingOnHostMaintenance {
		if v == nil {
			return nil
		}
		return v.OnHostMaintenance
	}).(ComputeSchedulingOnHostMaintenancePtrOutput)
}

// Whether the Instance should be automatically restarted whenever it is terminated by Compute Engine (not terminated by user). This configuration is identical to `automaticRestart` field in Compute Engine create instance under scheduling. It was changed to an enum (instead of a boolean) to match the default value in Compute Engine which is automatic restart.
func (o ComputeSchedulingPtrOutput) RestartType() ComputeSchedulingRestartTypePtrOutput {
	return o.ApplyT(func(v *ComputeScheduling) *ComputeSchedulingRestartType {
		if v == nil {
			return nil
		}
		return v.RestartType
	}).(ComputeSchedulingRestartTypePtrOutput)
}

// Scheduling information for VM on maintenance/restart behaviour and node allocation in sole tenant nodes.
type ComputeSchedulingResponse struct {
	AutomaticRestart bool `pulumi:"automaticRestart"`
	// The minimum number of virtual CPUs this instance will consume when running on a sole-tenant node. Ignored if no node_affinites are configured.
	MinNodeCpus int `pulumi:"minNodeCpus"`
	// A set of node affinity and anti-affinity configurations for sole tenant nodes.
	NodeAffinities []SchedulingNodeAffinityResponse `pulumi:"nodeAffinities"`
	// How the instance should behave when the host machine undergoes maintenance that may temporarily impact instance performance.
	OnHostMaintenance string `pulumi:"onHostMaintenance"`
	// Whether the Instance should be automatically restarted whenever it is terminated by Compute Engine (not terminated by user). This configuration is identical to `automaticRestart` field in Compute Engine create instance under scheduling. It was changed to an enum (instead of a boolean) to match the default value in Compute Engine which is automatic restart.
	RestartType string `pulumi:"restartType"`
}

// Scheduling information for VM on maintenance/restart behaviour and node allocation in sole tenant nodes.
type ComputeSchedulingResponseOutput struct{ *pulumi.OutputState }

func (ComputeSchedulingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeSchedulingResponse)(nil)).Elem()
}

func (o ComputeSchedulingResponseOutput) ToComputeSchedulingResponseOutput() ComputeSchedulingResponseOutput {
	return o
}

func (o ComputeSchedulingResponseOutput) ToComputeSchedulingResponseOutputWithContext(ctx context.Context) ComputeSchedulingResponseOutput {
	return o
}

func (o ComputeSchedulingResponseOutput) AutomaticRestart() pulumi.BoolOutput {
	return o.ApplyT(func(v ComputeSchedulingResponse) bool { return v.AutomaticRestart }).(pulumi.BoolOutput)
}

// The minimum number of virtual CPUs this instance will consume when running on a sole-tenant node. Ignored if no node_affinites are configured.
func (o ComputeSchedulingResponseOutput) MinNodeCpus() pulumi.IntOutput {
	return o.ApplyT(func(v ComputeSchedulingResponse) int { return v.MinNodeCpus }).(pulumi.IntOutput)
}

// A set of node affinity and anti-affinity configurations for sole tenant nodes.
func (o ComputeSchedulingResponseOutput) NodeAffinities() SchedulingNodeAffinityResponseArrayOutput {
	return o.ApplyT(func(v ComputeSchedulingResponse) []SchedulingNodeAffinityResponse { return v.NodeAffinities }).(SchedulingNodeAffinityResponseArrayOutput)
}

// How the instance should behave when the host machine undergoes maintenance that may temporarily impact instance performance.
func (o ComputeSchedulingResponseOutput) OnHostMaintenance() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeSchedulingResponse) string { return v.OnHostMaintenance }).(pulumi.StringOutput)
}

// Whether the Instance should be automatically restarted whenever it is terminated by Compute Engine (not terminated by user). This configuration is identical to `automaticRestart` field in Compute Engine create instance under scheduling. It was changed to an enum (instead of a boolean) to match the default value in Compute Engine which is automatic restart.
func (o ComputeSchedulingResponseOutput) RestartType() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeSchedulingResponse) string { return v.RestartType }).(pulumi.StringOutput)
}

// CutoverJob message describes a cutover of a migrating VM. The CutoverJob is the operation of shutting down the VM, creating a snapshot and clonning the VM using the replicated snapshot.
type CutoverJobResponse struct {
	// Details of the target VM in Compute Engine.
	ComputeEngineTargetDetails ComputeEngineTargetDetailsResponse `pulumi:"computeEngineTargetDetails"`
	// Details of the VM in Compute Engine. Deprecated: Use compute_engine_target_details instead.
	//
	// Deprecated: Output only. Details of the VM in Compute Engine. Deprecated: Use compute_engine_target_details instead.
	ComputeEngineVmDetails TargetVMDetailsResponse `pulumi:"computeEngineVmDetails"`
	// The time the cutover job was created (as an API call, not when it was actually created in the target).
	CreateTime string `pulumi:"createTime"`
	// Provides details for the errors that led to the Cutover Job's state.
	Error StatusResponse `pulumi:"error"`
	// The name of the cutover job.
	Name string `pulumi:"name"`
	// The current progress in percentage of the cutover job.
	Progress int `pulumi:"progress"`
	// The current progress in percentage of the cutover job.
	ProgressPercent int `pulumi:"progressPercent"`
	// State of the cutover job.
	State string `pulumi:"state"`
	// A message providing possible extra details about the current state.
	StateMessage string `pulumi:"stateMessage"`
	// The time the state was last updated.
	StateTime string `pulumi:"stateTime"`
	// Details of the VM to create as the target of this cutover job. Deprecated: Use compute_engine_target_details instead.
	//
	// Deprecated: Output only. Details of the VM to create as the target of this cutover job. Deprecated: Use compute_engine_target_details instead.
	TargetDetails TargetVMDetailsResponse `pulumi:"targetDetails"`
}

// CutoverJob message describes a cutover of a migrating VM. The CutoverJob is the operation of shutting down the VM, creating a snapshot and clonning the VM using the replicated snapshot.
type CutoverJobResponseOutput struct{ *pulumi.OutputState }

func (CutoverJobResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CutoverJobResponse)(nil)).Elem()
}

func (o CutoverJobResponseOutput) ToCutoverJobResponseOutput() CutoverJobResponseOutput {
	return o
}

func (o CutoverJobResponseOutput) ToCutoverJobResponseOutputWithContext(ctx context.Context) CutoverJobResponseOutput {
	return o
}

// Details of the target VM in Compute Engine.
func (o CutoverJobResponseOutput) ComputeEngineTargetDetails() ComputeEngineTargetDetailsResponseOutput {
	return o.ApplyT(func(v CutoverJobResponse) ComputeEngineTargetDetailsResponse { return v.ComputeEngineTargetDetails }).(ComputeEngineTargetDetailsResponseOutput)
}

// Details of the VM in Compute Engine. Deprecated: Use compute_engine_target_details instead.
//
// Deprecated: Output only. Details of the VM in Compute Engine. Deprecated: Use compute_engine_target_details instead.
func (o CutoverJobResponseOutput) ComputeEngineVmDetails() TargetVMDetailsResponseOutput {
	return o.ApplyT(func(v CutoverJobResponse) TargetVMDetailsResponse { return v.ComputeEngineVmDetails }).(TargetVMDetailsResponseOutput)
}

// The time the cutover job was created (as an API call, not when it was actually created in the target).
func (o CutoverJobResponseOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v CutoverJobResponse) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Provides details for the errors that led to the Cutover Job's state.
func (o CutoverJobResponseOutput) Error() StatusResponseOutput {
	return o.ApplyT(func(v CutoverJobResponse) StatusResponse { return v.Error }).(StatusResponseOutput)
}

// The name of the cutover job.
func (o CutoverJobResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CutoverJobResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The current progress in percentage of the cutover job.
func (o CutoverJobResponseOutput) Progress() pulumi.IntOutput {
	return o.ApplyT(func(v CutoverJobResponse) int { return v.Progress }).(pulumi.IntOutput)
}

// The current progress in percentage of the cutover job.
func (o CutoverJobResponseOutput) ProgressPercent() pulumi.IntOutput {
	return o.ApplyT(func(v CutoverJobResponse) int { return v.ProgressPercent }).(pulumi.IntOutput)
}

// State of the cutover job.
func (o CutoverJobResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v CutoverJobResponse) string { return v.State }).(pulumi.StringOutput)
}

// A message providing possible extra details about the current state.
func (o CutoverJobResponseOutput) StateMessage() pulumi.StringOutput {
	return o.ApplyT(func(v CutoverJobResponse) string { return v.StateMessage }).(pulumi.StringOutput)
}

// The time the state was last updated.
func (o CutoverJobResponseOutput) StateTime() pulumi.StringOutput {
	return o.ApplyT(func(v CutoverJobResponse) string { return v.StateTime }).(pulumi.StringOutput)
}

// Details of the VM to create as the target of this cutover job. Deprecated: Use compute_engine_target_details instead.
//
// Deprecated: Output only. Details of the VM to create as the target of this cutover job. Deprecated: Use compute_engine_target_details instead.
func (o CutoverJobResponseOutput) TargetDetails() TargetVMDetailsResponseOutput {
	return o.ApplyT(func(v CutoverJobResponse) TargetVMDetailsResponse { return v.TargetDetails }).(TargetVMDetailsResponseOutput)
}

type CutoverJobResponseArrayOutput struct{ *pulumi.OutputState }

func (CutoverJobResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CutoverJobResponse)(nil)).Elem()
}

func (o CutoverJobResponseArrayOutput) ToCutoverJobResponseArrayOutput() CutoverJobResponseArrayOutput {
	return o
}

func (o CutoverJobResponseArrayOutput) ToCutoverJobResponseArrayOutputWithContext(ctx context.Context) CutoverJobResponseArrayOutput {
	return o
}

func (o CutoverJobResponseArrayOutput) Index(i pulumi.IntInput) CutoverJobResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CutoverJobResponse {
		return vs[0].([]CutoverJobResponse)[vs[1].(int)]
	}).(CutoverJobResponseOutput)
}

// NetworkInterface represents a NIC of a VM.
type NetworkInterface struct {
	// The external IP to define in the NIC.
	ExternalIp *string `pulumi:"externalIp"`
	// The internal IP to define in the NIC. The formats accepted are: `ephemeral` \ ipv4 address \ a named address resource full path.
	InternalIp *string `pulumi:"internalIp"`
	// The network to connect the NIC to.
	Network *string `pulumi:"network"`
	// The subnetwork to connect the NIC to.
	Subnetwork *string `pulumi:"subnetwork"`
}

// NetworkInterfaceInput is an input type that accepts NetworkInterfaceArgs and NetworkInterfaceOutput values.
// You can construct a concrete instance of `NetworkInterfaceInput` via:
//
//          NetworkInterfaceArgs{...}
type NetworkInterfaceInput interface {
	pulumi.Input

	ToNetworkInterfaceOutput() NetworkInterfaceOutput
	ToNetworkInterfaceOutputWithContext(context.Context) NetworkInterfaceOutput
}

// NetworkInterface represents a NIC of a VM.
type NetworkInterfaceArgs struct {
	// The external IP to define in the NIC.
	ExternalIp pulumi.StringPtrInput `pulumi:"externalIp"`
	// The internal IP to define in the NIC. The formats accepted are: `ephemeral` \ ipv4 address \ a named address resource full path.
	InternalIp pulumi.StringPtrInput `pulumi:"internalIp"`
	// The network to connect the NIC to.
	Network pulumi.StringPtrInput `pulumi:"network"`
	// The subnetwork to connect the NIC to.
	Subnetwork pulumi.StringPtrInput `pulumi:"subnetwork"`
}

func (NetworkInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkInterface)(nil)).Elem()
}

func (i NetworkInterfaceArgs) ToNetworkInterfaceOutput() NetworkInterfaceOutput {
	return i.ToNetworkInterfaceOutputWithContext(context.Background())
}

func (i NetworkInterfaceArgs) ToNetworkInterfaceOutputWithContext(ctx context.Context) NetworkInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInterfaceOutput)
}

// NetworkInterfaceArrayInput is an input type that accepts NetworkInterfaceArray and NetworkInterfaceArrayOutput values.
// You can construct a concrete instance of `NetworkInterfaceArrayInput` via:
//
//          NetworkInterfaceArray{ NetworkInterfaceArgs{...} }
type NetworkInterfaceArrayInput interface {
	pulumi.Input

	ToNetworkInterfaceArrayOutput() NetworkInterfaceArrayOutput
	ToNetworkInterfaceArrayOutputWithContext(context.Context) NetworkInterfaceArrayOutput
}

type NetworkInterfaceArray []NetworkInterfaceInput

func (NetworkInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkInterface)(nil)).Elem()
}

func (i NetworkInterfaceArray) ToNetworkInterfaceArrayOutput() NetworkInterfaceArrayOutput {
	return i.ToNetworkInterfaceArrayOutputWithContext(context.Background())
}

func (i NetworkInterfaceArray) ToNetworkInterfaceArrayOutputWithContext(ctx context.Context) NetworkInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInterfaceArrayOutput)
}

// NetworkInterface represents a NIC of a VM.
type NetworkInterfaceOutput struct{ *pulumi.OutputState }

func (NetworkInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkInterface)(nil)).Elem()
}

func (o NetworkInterfaceOutput) ToNetworkInterfaceOutput() NetworkInterfaceOutput {
	return o
}

func (o NetworkInterfaceOutput) ToNetworkInterfaceOutputWithContext(ctx context.Context) NetworkInterfaceOutput {
	return o
}

// The external IP to define in the NIC.
func (o NetworkInterfaceOutput) ExternalIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkInterface) *string { return v.ExternalIp }).(pulumi.StringPtrOutput)
}

// The internal IP to define in the NIC. The formats accepted are: `ephemeral` \ ipv4 address \ a named address resource full path.
func (o NetworkInterfaceOutput) InternalIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkInterface) *string { return v.InternalIp }).(pulumi.StringPtrOutput)
}

// The network to connect the NIC to.
func (o NetworkInterfaceOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkInterface) *string { return v.Network }).(pulumi.StringPtrOutput)
}

// The subnetwork to connect the NIC to.
func (o NetworkInterfaceOutput) Subnetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkInterface) *string { return v.Subnetwork }).(pulumi.StringPtrOutput)
}

type NetworkInterfaceArrayOutput struct{ *pulumi.OutputState }

func (NetworkInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkInterface)(nil)).Elem()
}

func (o NetworkInterfaceArrayOutput) ToNetworkInterfaceArrayOutput() NetworkInterfaceArrayOutput {
	return o
}

func (o NetworkInterfaceArrayOutput) ToNetworkInterfaceArrayOutputWithContext(ctx context.Context) NetworkInterfaceArrayOutput {
	return o
}

func (o NetworkInterfaceArrayOutput) Index(i pulumi.IntInput) NetworkInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkInterface {
		return vs[0].([]NetworkInterface)[vs[1].(int)]
	}).(NetworkInterfaceOutput)
}

// NetworkInterface represents a NIC of a VM.
type NetworkInterfaceResponse struct {
	// The external IP to define in the NIC.
	ExternalIp string `pulumi:"externalIp"`
	// The internal IP to define in the NIC. The formats accepted are: `ephemeral` \ ipv4 address \ a named address resource full path.
	InternalIp string `pulumi:"internalIp"`
	// The network to connect the NIC to.
	Network string `pulumi:"network"`
	// The subnetwork to connect the NIC to.
	Subnetwork string `pulumi:"subnetwork"`
}

// NetworkInterface represents a NIC of a VM.
type NetworkInterfaceResponseOutput struct{ *pulumi.OutputState }

func (NetworkInterfaceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkInterfaceResponse)(nil)).Elem()
}

func (o NetworkInterfaceResponseOutput) ToNetworkInterfaceResponseOutput() NetworkInterfaceResponseOutput {
	return o
}

func (o NetworkInterfaceResponseOutput) ToNetworkInterfaceResponseOutputWithContext(ctx context.Context) NetworkInterfaceResponseOutput {
	return o
}

// The external IP to define in the NIC.
func (o NetworkInterfaceResponseOutput) ExternalIp() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkInterfaceResponse) string { return v.ExternalIp }).(pulumi.StringOutput)
}

// The internal IP to define in the NIC. The formats accepted are: `ephemeral` \ ipv4 address \ a named address resource full path.
func (o NetworkInterfaceResponseOutput) InternalIp() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkInterfaceResponse) string { return v.InternalIp }).(pulumi.StringOutput)
}

// The network to connect the NIC to.
func (o NetworkInterfaceResponseOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkInterfaceResponse) string { return v.Network }).(pulumi.StringOutput)
}

// The subnetwork to connect the NIC to.
func (o NetworkInterfaceResponseOutput) Subnetwork() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkInterfaceResponse) string { return v.Subnetwork }).(pulumi.StringOutput)
}

type NetworkInterfaceResponseArrayOutput struct{ *pulumi.OutputState }

func (NetworkInterfaceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkInterfaceResponse)(nil)).Elem()
}

func (o NetworkInterfaceResponseArrayOutput) ToNetworkInterfaceResponseArrayOutput() NetworkInterfaceResponseArrayOutput {
	return o
}

func (o NetworkInterfaceResponseArrayOutput) ToNetworkInterfaceResponseArrayOutputWithContext(ctx context.Context) NetworkInterfaceResponseArrayOutput {
	return o
}

func (o NetworkInterfaceResponseArrayOutput) Index(i pulumi.IntInput) NetworkInterfaceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkInterfaceResponse {
		return vs[0].([]NetworkInterfaceResponse)[vs[1].(int)]
	}).(NetworkInterfaceResponseOutput)
}

// ReplicationCycle contains information about the current replication cycle status.
type ReplicationCycleResponse struct {
	// The current progress in percentage of this cycle.
	Progress int `pulumi:"progress"`
	// The current progress in percentage of this cycle.
	ProgressPercent int `pulumi:"progressPercent"`
	// The time the replication cycle has started.
	StartTime string `pulumi:"startTime"`
	// The accumulated duration the replication cycle was paused.
	TotalPauseDuration string `pulumi:"totalPauseDuration"`
}

// ReplicationCycle contains information about the current replication cycle status.
type ReplicationCycleResponseOutput struct{ *pulumi.OutputState }

func (ReplicationCycleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationCycleResponse)(nil)).Elem()
}

func (o ReplicationCycleResponseOutput) ToReplicationCycleResponseOutput() ReplicationCycleResponseOutput {
	return o
}

func (o ReplicationCycleResponseOutput) ToReplicationCycleResponseOutputWithContext(ctx context.Context) ReplicationCycleResponseOutput {
	return o
}

// The current progress in percentage of this cycle.
func (o ReplicationCycleResponseOutput) Progress() pulumi.IntOutput {
	return o.ApplyT(func(v ReplicationCycleResponse) int { return v.Progress }).(pulumi.IntOutput)
}

// The current progress in percentage of this cycle.
func (o ReplicationCycleResponseOutput) ProgressPercent() pulumi.IntOutput {
	return o.ApplyT(func(v ReplicationCycleResponse) int { return v.ProgressPercent }).(pulumi.IntOutput)
}

// The time the replication cycle has started.
func (o ReplicationCycleResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v ReplicationCycleResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

// The accumulated duration the replication cycle was paused.
func (o ReplicationCycleResponseOutput) TotalPauseDuration() pulumi.StringOutput {
	return o.ApplyT(func(v ReplicationCycleResponse) string { return v.TotalPauseDuration }).(pulumi.StringOutput)
}

// ReplicationSync contain information about the last replica sync to the cloud.
type ReplicationSyncResponse struct {
	// The most updated snapshot created time in the source that finished replication.
	LastSyncTime string `pulumi:"lastSyncTime"`
}

// ReplicationSync contain information about the last replica sync to the cloud.
type ReplicationSyncResponseOutput struct{ *pulumi.OutputState }

func (ReplicationSyncResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationSyncResponse)(nil)).Elem()
}

func (o ReplicationSyncResponseOutput) ToReplicationSyncResponseOutput() ReplicationSyncResponseOutput {
	return o
}

func (o ReplicationSyncResponseOutput) ToReplicationSyncResponseOutputWithContext(ctx context.Context) ReplicationSyncResponseOutput {
	return o
}

// The most updated snapshot created time in the source that finished replication.
func (o ReplicationSyncResponseOutput) LastSyncTime() pulumi.StringOutput {
	return o.ApplyT(func(v ReplicationSyncResponse) string { return v.LastSyncTime }).(pulumi.StringOutput)
}

// A policy for scheduling replications.
type SchedulePolicy struct {
	// The idle duration between replication stages.
	IdleDuration *string `pulumi:"idleDuration"`
	// A flag to indicate whether to skip OS adaptation during the replication sync. OS adaptation is a process where the VM's operating system undergoes changes and adaptations to fully function on Compute Engine.
	SkipOsAdaptation *bool `pulumi:"skipOsAdaptation"`
}

// SchedulePolicyInput is an input type that accepts SchedulePolicyArgs and SchedulePolicyOutput values.
// You can construct a concrete instance of `SchedulePolicyInput` via:
//
//          SchedulePolicyArgs{...}
type SchedulePolicyInput interface {
	pulumi.Input

	ToSchedulePolicyOutput() SchedulePolicyOutput
	ToSchedulePolicyOutputWithContext(context.Context) SchedulePolicyOutput
}

// A policy for scheduling replications.
type SchedulePolicyArgs struct {
	// The idle duration between replication stages.
	IdleDuration pulumi.StringPtrInput `pulumi:"idleDuration"`
	// A flag to indicate whether to skip OS adaptation during the replication sync. OS adaptation is a process where the VM's operating system undergoes changes and adaptations to fully function on Compute Engine.
	SkipOsAdaptation pulumi.BoolPtrInput `pulumi:"skipOsAdaptation"`
}

func (SchedulePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchedulePolicy)(nil)).Elem()
}

func (i SchedulePolicyArgs) ToSchedulePolicyOutput() SchedulePolicyOutput {
	return i.ToSchedulePolicyOutputWithContext(context.Background())
}

func (i SchedulePolicyArgs) ToSchedulePolicyOutputWithContext(ctx context.Context) SchedulePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulePolicyOutput)
}

func (i SchedulePolicyArgs) ToSchedulePolicyPtrOutput() SchedulePolicyPtrOutput {
	return i.ToSchedulePolicyPtrOutputWithContext(context.Background())
}

func (i SchedulePolicyArgs) ToSchedulePolicyPtrOutputWithContext(ctx context.Context) SchedulePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulePolicyOutput).ToSchedulePolicyPtrOutputWithContext(ctx)
}

// SchedulePolicyPtrInput is an input type that accepts SchedulePolicyArgs, SchedulePolicyPtr and SchedulePolicyPtrOutput values.
// You can construct a concrete instance of `SchedulePolicyPtrInput` via:
//
//          SchedulePolicyArgs{...}
//
//  or:
//
//          nil
type SchedulePolicyPtrInput interface {
	pulumi.Input

	ToSchedulePolicyPtrOutput() SchedulePolicyPtrOutput
	ToSchedulePolicyPtrOutputWithContext(context.Context) SchedulePolicyPtrOutput
}

type schedulePolicyPtrType SchedulePolicyArgs

func SchedulePolicyPtr(v *SchedulePolicyArgs) SchedulePolicyPtrInput {
	return (*schedulePolicyPtrType)(v)
}

func (*schedulePolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SchedulePolicy)(nil)).Elem()
}

func (i *schedulePolicyPtrType) ToSchedulePolicyPtrOutput() SchedulePolicyPtrOutput {
	return i.ToSchedulePolicyPtrOutputWithContext(context.Background())
}

func (i *schedulePolicyPtrType) ToSchedulePolicyPtrOutputWithContext(ctx context.Context) SchedulePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulePolicyPtrOutput)
}

// A policy for scheduling replications.
type SchedulePolicyOutput struct{ *pulumi.OutputState }

func (SchedulePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchedulePolicy)(nil)).Elem()
}

func (o SchedulePolicyOutput) ToSchedulePolicyOutput() SchedulePolicyOutput {
	return o
}

func (o SchedulePolicyOutput) ToSchedulePolicyOutputWithContext(ctx context.Context) SchedulePolicyOutput {
	return o
}

func (o SchedulePolicyOutput) ToSchedulePolicyPtrOutput() SchedulePolicyPtrOutput {
	return o.ToSchedulePolicyPtrOutputWithContext(context.Background())
}

func (o SchedulePolicyOutput) ToSchedulePolicyPtrOutputWithContext(ctx context.Context) SchedulePolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SchedulePolicy) *SchedulePolicy {
		return &v
	}).(SchedulePolicyPtrOutput)
}

// The idle duration between replication stages.
func (o SchedulePolicyOutput) IdleDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchedulePolicy) *string { return v.IdleDuration }).(pulumi.StringPtrOutput)
}

// A flag to indicate whether to skip OS adaptation during the replication sync. OS adaptation is a process where the VM's operating system undergoes changes and adaptations to fully function on Compute Engine.
func (o SchedulePolicyOutput) SkipOsAdaptation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SchedulePolicy) *bool { return v.SkipOsAdaptation }).(pulumi.BoolPtrOutput)
}

type SchedulePolicyPtrOutput struct{ *pulumi.OutputState }

func (SchedulePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchedulePolicy)(nil)).Elem()
}

func (o SchedulePolicyPtrOutput) ToSchedulePolicyPtrOutput() SchedulePolicyPtrOutput {
	return o
}

func (o SchedulePolicyPtrOutput) ToSchedulePolicyPtrOutputWithContext(ctx context.Context) SchedulePolicyPtrOutput {
	return o
}

func (o SchedulePolicyPtrOutput) Elem() SchedulePolicyOutput {
	return o.ApplyT(func(v *SchedulePolicy) SchedulePolicy {
		if v != nil {
			return *v
		}
		var ret SchedulePolicy
		return ret
	}).(SchedulePolicyOutput)
}

// The idle duration between replication stages.
func (o SchedulePolicyPtrOutput) IdleDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SchedulePolicy) *string {
		if v == nil {
			return nil
		}
		return v.IdleDuration
	}).(pulumi.StringPtrOutput)
}

// A flag to indicate whether to skip OS adaptation during the replication sync. OS adaptation is a process where the VM's operating system undergoes changes and adaptations to fully function on Compute Engine.
func (o SchedulePolicyPtrOutput) SkipOsAdaptation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SchedulePolicy) *bool {
		if v == nil {
			return nil
		}
		return v.SkipOsAdaptation
	}).(pulumi.BoolPtrOutput)
}

// A policy for scheduling replications.
type SchedulePolicyResponse struct {
	// The idle duration between replication stages.
	IdleDuration string `pulumi:"idleDuration"`
	// A flag to indicate whether to skip OS adaptation during the replication sync. OS adaptation is a process where the VM's operating system undergoes changes and adaptations to fully function on Compute Engine.
	SkipOsAdaptation bool `pulumi:"skipOsAdaptation"`
}

// A policy for scheduling replications.
type SchedulePolicyResponseOutput struct{ *pulumi.OutputState }

func (SchedulePolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchedulePolicyResponse)(nil)).Elem()
}

func (o SchedulePolicyResponseOutput) ToSchedulePolicyResponseOutput() SchedulePolicyResponseOutput {
	return o
}

func (o SchedulePolicyResponseOutput) ToSchedulePolicyResponseOutputWithContext(ctx context.Context) SchedulePolicyResponseOutput {
	return o
}

// The idle duration between replication stages.
func (o SchedulePolicyResponseOutput) IdleDuration() pulumi.StringOutput {
	return o.ApplyT(func(v SchedulePolicyResponse) string { return v.IdleDuration }).(pulumi.StringOutput)
}

// A flag to indicate whether to skip OS adaptation during the replication sync. OS adaptation is a process where the VM's operating system undergoes changes and adaptations to fully function on Compute Engine.
func (o SchedulePolicyResponseOutput) SkipOsAdaptation() pulumi.BoolOutput {
	return o.ApplyT(func(v SchedulePolicyResponse) bool { return v.SkipOsAdaptation }).(pulumi.BoolOutput)
}

// Node Affinity: the configuration of desired nodes onto which this Instance could be scheduled. Based on https://cloud.google.com/compute/docs/reference/rest/v1/instances/setScheduling
type SchedulingNodeAffinity struct {
	// The label key of Node resource to reference.
	Key *string `pulumi:"key"`
	// The operator to use for the node resources specified in the `values` parameter.
	Operator *SchedulingNodeAffinityOperator `pulumi:"operator"`
	// Corresponds to the label values of Node resource.
	Values []string `pulumi:"values"`
}

// SchedulingNodeAffinityInput is an input type that accepts SchedulingNodeAffinityArgs and SchedulingNodeAffinityOutput values.
// You can construct a concrete instance of `SchedulingNodeAffinityInput` via:
//
//          SchedulingNodeAffinityArgs{...}
type SchedulingNodeAffinityInput interface {
	pulumi.Input

	ToSchedulingNodeAffinityOutput() SchedulingNodeAffinityOutput
	ToSchedulingNodeAffinityOutputWithContext(context.Context) SchedulingNodeAffinityOutput
}

// Node Affinity: the configuration of desired nodes onto which this Instance could be scheduled. Based on https://cloud.google.com/compute/docs/reference/rest/v1/instances/setScheduling
type SchedulingNodeAffinityArgs struct {
	// The label key of Node resource to reference.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The operator to use for the node resources specified in the `values` parameter.
	Operator SchedulingNodeAffinityOperatorPtrInput `pulumi:"operator"`
	// Corresponds to the label values of Node resource.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (SchedulingNodeAffinityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchedulingNodeAffinity)(nil)).Elem()
}

func (i SchedulingNodeAffinityArgs) ToSchedulingNodeAffinityOutput() SchedulingNodeAffinityOutput {
	return i.ToSchedulingNodeAffinityOutputWithContext(context.Background())
}

func (i SchedulingNodeAffinityArgs) ToSchedulingNodeAffinityOutputWithContext(ctx context.Context) SchedulingNodeAffinityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulingNodeAffinityOutput)
}

// SchedulingNodeAffinityArrayInput is an input type that accepts SchedulingNodeAffinityArray and SchedulingNodeAffinityArrayOutput values.
// You can construct a concrete instance of `SchedulingNodeAffinityArrayInput` via:
//
//          SchedulingNodeAffinityArray{ SchedulingNodeAffinityArgs{...} }
type SchedulingNodeAffinityArrayInput interface {
	pulumi.Input

	ToSchedulingNodeAffinityArrayOutput() SchedulingNodeAffinityArrayOutput
	ToSchedulingNodeAffinityArrayOutputWithContext(context.Context) SchedulingNodeAffinityArrayOutput
}

type SchedulingNodeAffinityArray []SchedulingNodeAffinityInput

func (SchedulingNodeAffinityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SchedulingNodeAffinity)(nil)).Elem()
}

func (i SchedulingNodeAffinityArray) ToSchedulingNodeAffinityArrayOutput() SchedulingNodeAffinityArrayOutput {
	return i.ToSchedulingNodeAffinityArrayOutputWithContext(context.Background())
}

func (i SchedulingNodeAffinityArray) ToSchedulingNodeAffinityArrayOutputWithContext(ctx context.Context) SchedulingNodeAffinityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulingNodeAffinityArrayOutput)
}

// Node Affinity: the configuration of desired nodes onto which this Instance could be scheduled. Based on https://cloud.google.com/compute/docs/reference/rest/v1/instances/setScheduling
type SchedulingNodeAffinityOutput struct{ *pulumi.OutputState }

func (SchedulingNodeAffinityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchedulingNodeAffinity)(nil)).Elem()
}

func (o SchedulingNodeAffinityOutput) ToSchedulingNodeAffinityOutput() SchedulingNodeAffinityOutput {
	return o
}

func (o SchedulingNodeAffinityOutput) ToSchedulingNodeAffinityOutputWithContext(ctx context.Context) SchedulingNodeAffinityOutput {
	return o
}

// The label key of Node resource to reference.
func (o SchedulingNodeAffinityOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchedulingNodeAffinity) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator to use for the node resources specified in the `values` parameter.
func (o SchedulingNodeAffinityOutput) Operator() SchedulingNodeAffinityOperatorPtrOutput {
	return o.ApplyT(func(v SchedulingNodeAffinity) *SchedulingNodeAffinityOperator { return v.Operator }).(SchedulingNodeAffinityOperatorPtrOutput)
}

// Corresponds to the label values of Node resource.
func (o SchedulingNodeAffinityOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SchedulingNodeAffinity) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type SchedulingNodeAffinityArrayOutput struct{ *pulumi.OutputState }

func (SchedulingNodeAffinityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SchedulingNodeAffinity)(nil)).Elem()
}

func (o SchedulingNodeAffinityArrayOutput) ToSchedulingNodeAffinityArrayOutput() SchedulingNodeAffinityArrayOutput {
	return o
}

func (o SchedulingNodeAffinityArrayOutput) ToSchedulingNodeAffinityArrayOutputWithContext(ctx context.Context) SchedulingNodeAffinityArrayOutput {
	return o
}

func (o SchedulingNodeAffinityArrayOutput) Index(i pulumi.IntInput) SchedulingNodeAffinityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SchedulingNodeAffinity {
		return vs[0].([]SchedulingNodeAffinity)[vs[1].(int)]
	}).(SchedulingNodeAffinityOutput)
}

// Node Affinity: the configuration of desired nodes onto which this Instance could be scheduled. Based on https://cloud.google.com/compute/docs/reference/rest/v1/instances/setScheduling
type SchedulingNodeAffinityResponse struct {
	// The label key of Node resource to reference.
	Key string `pulumi:"key"`
	// The operator to use for the node resources specified in the `values` parameter.
	Operator string `pulumi:"operator"`
	// Corresponds to the label values of Node resource.
	Values []string `pulumi:"values"`
}

// Node Affinity: the configuration of desired nodes onto which this Instance could be scheduled. Based on https://cloud.google.com/compute/docs/reference/rest/v1/instances/setScheduling
type SchedulingNodeAffinityResponseOutput struct{ *pulumi.OutputState }

func (SchedulingNodeAffinityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchedulingNodeAffinityResponse)(nil)).Elem()
}

func (o SchedulingNodeAffinityResponseOutput) ToSchedulingNodeAffinityResponseOutput() SchedulingNodeAffinityResponseOutput {
	return o
}

func (o SchedulingNodeAffinityResponseOutput) ToSchedulingNodeAffinityResponseOutputWithContext(ctx context.Context) SchedulingNodeAffinityResponseOutput {
	return o
}

// The label key of Node resource to reference.
func (o SchedulingNodeAffinityResponseOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v SchedulingNodeAffinityResponse) string { return v.Key }).(pulumi.StringOutput)
}

// The operator to use for the node resources specified in the `values` parameter.
func (o SchedulingNodeAffinityResponseOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v SchedulingNodeAffinityResponse) string { return v.Operator }).(pulumi.StringOutput)
}

// Corresponds to the label values of Node resource.
func (o SchedulingNodeAffinityResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SchedulingNodeAffinityResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type SchedulingNodeAffinityResponseArrayOutput struct{ *pulumi.OutputState }

func (SchedulingNodeAffinityResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SchedulingNodeAffinityResponse)(nil)).Elem()
}

func (o SchedulingNodeAffinityResponseArrayOutput) ToSchedulingNodeAffinityResponseArrayOutput() SchedulingNodeAffinityResponseArrayOutput {
	return o
}

func (o SchedulingNodeAffinityResponseArrayOutput) ToSchedulingNodeAffinityResponseArrayOutputWithContext(ctx context.Context) SchedulingNodeAffinityResponseArrayOutput {
	return o
}

func (o SchedulingNodeAffinityResponseArrayOutput) Index(i pulumi.IntInput) SchedulingNodeAffinityResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SchedulingNodeAffinityResponse {
		return vs[0].([]SchedulingNodeAffinityResponse)[vs[1].(int)]
	}).(SchedulingNodeAffinityResponseOutput)
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type StatusResponse struct {
	// The status code, which should be an enum value of google.rpc.Code.
	Code int `pulumi:"code"`
	// A list of messages that carry the error details. There is a common set of message types for APIs to use.
	Details []map[string]string `pulumi:"details"`
	// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
	Message string `pulumi:"message"`
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type StatusResponseOutput struct{ *pulumi.OutputState }

func (StatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusResponse)(nil)).Elem()
}

func (o StatusResponseOutput) ToStatusResponseOutput() StatusResponseOutput {
	return o
}

func (o StatusResponseOutput) ToStatusResponseOutputWithContext(ctx context.Context) StatusResponseOutput {
	return o
}

// The status code, which should be an enum value of google.rpc.Code.
func (o StatusResponseOutput) Code() pulumi.IntOutput {
	return o.ApplyT(func(v StatusResponse) int { return v.Code }).(pulumi.IntOutput)
}

// A list of messages that carry the error details. There is a common set of message types for APIs to use.
func (o StatusResponseOutput) Details() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v StatusResponse) []map[string]string { return v.Details }).(pulumi.StringMapArrayOutput)
}

// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
func (o StatusResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v StatusResponse) string { return v.Message }).(pulumi.StringOutput)
}

// TargetVMDetails is a collection of details for creating a VM in a target Compute Engine project.
type TargetVMDetails struct {
	// Compute instance scheduling information (if empty default is used).
	ComputeScheduling *ComputeScheduling `pulumi:"computeScheduling"`
	// The disk type to use in the VM.
	DiskType *TargetVMDetailsDiskType `pulumi:"diskType"`
	// The external IP to define in the VM.
	ExternalIp *string `pulumi:"externalIp"`
	// The internal IP to define in the VM. The formats accepted are: `ephemeral` \ ipv4 address \ a named address resource full path.
	InternalIp *string `pulumi:"internalIp"`
	// A map of labels to associate with the VM.
	Labels map[string]string `pulumi:"labels"`
	// The license type to use in OS adaptation.
	LicenseType *TargetVMDetailsLicenseType `pulumi:"licenseType"`
	// The machine type to create the VM with.
	MachineType *string `pulumi:"machineType"`
	// The machine type series to create the VM with.
	MachineTypeSeries *string `pulumi:"machineTypeSeries"`
	// The metadata key/value pairs to assign to the VM.
	Metadata map[string]string `pulumi:"metadata"`
	// The name of the VM to create.
	Name *string `pulumi:"name"`
	// The network to connect the VM to.
	Network *string `pulumi:"network"`
	// List of NICs connected to this VM.
	NetworkInterfaces []NetworkInterface `pulumi:"networkInterfaces"`
	// A map of network tags to associate with the VM.
	NetworkTags []string `pulumi:"networkTags"`
	// Defines whether the instance has Secure Boot enabled. This can be set to true only if the vm boot option is EFI.
	SecureBoot *bool `pulumi:"secureBoot"`
	// The service account to associate the VM with.
	ServiceAccount *string `pulumi:"serviceAccount"`
	// The subnetwork to connect the VM to.
	Subnetwork *string `pulumi:"subnetwork"`
	// The full path of the resource of type TargetProject which represents the Compute Engine project in which to create this VM.
	TargetProject *string `pulumi:"targetProject"`
	// The zone in which to create the VM.
	Zone *string `pulumi:"zone"`
}

// TargetVMDetailsInput is an input type that accepts TargetVMDetailsArgs and TargetVMDetailsOutput values.
// You can construct a concrete instance of `TargetVMDetailsInput` via:
//
//          TargetVMDetailsArgs{...}
type TargetVMDetailsInput interface {
	pulumi.Input

	ToTargetVMDetailsOutput() TargetVMDetailsOutput
	ToTargetVMDetailsOutputWithContext(context.Context) TargetVMDetailsOutput
}

// TargetVMDetails is a collection of details for creating a VM in a target Compute Engine project.
type TargetVMDetailsArgs struct {
	// Compute instance scheduling information (if empty default is used).
	ComputeScheduling ComputeSchedulingPtrInput `pulumi:"computeScheduling"`
	// The disk type to use in the VM.
	DiskType TargetVMDetailsDiskTypePtrInput `pulumi:"diskType"`
	// The external IP to define in the VM.
	ExternalIp pulumi.StringPtrInput `pulumi:"externalIp"`
	// The internal IP to define in the VM. The formats accepted are: `ephemeral` \ ipv4 address \ a named address resource full path.
	InternalIp pulumi.StringPtrInput `pulumi:"internalIp"`
	// A map of labels to associate with the VM.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// The license type to use in OS adaptation.
	LicenseType TargetVMDetailsLicenseTypePtrInput `pulumi:"licenseType"`
	// The machine type to create the VM with.
	MachineType pulumi.StringPtrInput `pulumi:"machineType"`
	// The machine type series to create the VM with.
	MachineTypeSeries pulumi.StringPtrInput `pulumi:"machineTypeSeries"`
	// The metadata key/value pairs to assign to the VM.
	Metadata pulumi.StringMapInput `pulumi:"metadata"`
	// The name of the VM to create.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The network to connect the VM to.
	Network pulumi.StringPtrInput `pulumi:"network"`
	// List of NICs connected to this VM.
	NetworkInterfaces NetworkInterfaceArrayInput `pulumi:"networkInterfaces"`
	// A map of network tags to associate with the VM.
	NetworkTags pulumi.StringArrayInput `pulumi:"networkTags"`
	// Defines whether the instance has Secure Boot enabled. This can be set to true only if the vm boot option is EFI.
	SecureBoot pulumi.BoolPtrInput `pulumi:"secureBoot"`
	// The service account to associate the VM with.
	ServiceAccount pulumi.StringPtrInput `pulumi:"serviceAccount"`
	// The subnetwork to connect the VM to.
	Subnetwork pulumi.StringPtrInput `pulumi:"subnetwork"`
	// The full path of the resource of type TargetProject which represents the Compute Engine project in which to create this VM.
	TargetProject pulumi.StringPtrInput `pulumi:"targetProject"`
	// The zone in which to create the VM.
	Zone pulumi.StringPtrInput `pulumi:"zone"`
}

func (TargetVMDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetVMDetails)(nil)).Elem()
}

func (i TargetVMDetailsArgs) ToTargetVMDetailsOutput() TargetVMDetailsOutput {
	return i.ToTargetVMDetailsOutputWithContext(context.Background())
}

func (i TargetVMDetailsArgs) ToTargetVMDetailsOutputWithContext(ctx context.Context) TargetVMDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetVMDetailsOutput)
}

func (i TargetVMDetailsArgs) ToTargetVMDetailsPtrOutput() TargetVMDetailsPtrOutput {
	return i.ToTargetVMDetailsPtrOutputWithContext(context.Background())
}

func (i TargetVMDetailsArgs) ToTargetVMDetailsPtrOutputWithContext(ctx context.Context) TargetVMDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetVMDetailsOutput).ToTargetVMDetailsPtrOutputWithContext(ctx)
}

// TargetVMDetailsPtrInput is an input type that accepts TargetVMDetailsArgs, TargetVMDetailsPtr and TargetVMDetailsPtrOutput values.
// You can construct a concrete instance of `TargetVMDetailsPtrInput` via:
//
//          TargetVMDetailsArgs{...}
//
//  or:
//
//          nil
type TargetVMDetailsPtrInput interface {
	pulumi.Input

	ToTargetVMDetailsPtrOutput() TargetVMDetailsPtrOutput
	ToTargetVMDetailsPtrOutputWithContext(context.Context) TargetVMDetailsPtrOutput
}

type targetVMDetailsPtrType TargetVMDetailsArgs

func TargetVMDetailsPtr(v *TargetVMDetailsArgs) TargetVMDetailsPtrInput {
	return (*targetVMDetailsPtrType)(v)
}

func (*targetVMDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TargetVMDetails)(nil)).Elem()
}

func (i *targetVMDetailsPtrType) ToTargetVMDetailsPtrOutput() TargetVMDetailsPtrOutput {
	return i.ToTargetVMDetailsPtrOutputWithContext(context.Background())
}

func (i *targetVMDetailsPtrType) ToTargetVMDetailsPtrOutputWithContext(ctx context.Context) TargetVMDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetVMDetailsPtrOutput)
}

// TargetVMDetails is a collection of details for creating a VM in a target Compute Engine project.
type TargetVMDetailsOutput struct{ *pulumi.OutputState }

func (TargetVMDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetVMDetails)(nil)).Elem()
}

func (o TargetVMDetailsOutput) ToTargetVMDetailsOutput() TargetVMDetailsOutput {
	return o
}

func (o TargetVMDetailsOutput) ToTargetVMDetailsOutputWithContext(ctx context.Context) TargetVMDetailsOutput {
	return o
}

func (o TargetVMDetailsOutput) ToTargetVMDetailsPtrOutput() TargetVMDetailsPtrOutput {
	return o.ToTargetVMDetailsPtrOutputWithContext(context.Background())
}

func (o TargetVMDetailsOutput) ToTargetVMDetailsPtrOutputWithContext(ctx context.Context) TargetVMDetailsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TargetVMDetails) *TargetVMDetails {
		return &v
	}).(TargetVMDetailsPtrOutput)
}

// Compute instance scheduling information (if empty default is used).
func (o TargetVMDetailsOutput) ComputeScheduling() ComputeSchedulingPtrOutput {
	return o.ApplyT(func(v TargetVMDetails) *ComputeScheduling { return v.ComputeScheduling }).(ComputeSchedulingPtrOutput)
}

// The disk type to use in the VM.
func (o TargetVMDetailsOutput) DiskType() TargetVMDetailsDiskTypePtrOutput {
	return o.ApplyT(func(v TargetVMDetails) *TargetVMDetailsDiskType { return v.DiskType }).(TargetVMDetailsDiskTypePtrOutput)
}

// The external IP to define in the VM.
func (o TargetVMDetailsOutput) ExternalIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TargetVMDetails) *string { return v.ExternalIp }).(pulumi.StringPtrOutput)
}

// The internal IP to define in the VM. The formats accepted are: `ephemeral` \ ipv4 address \ a named address resource full path.
func (o TargetVMDetailsOutput) InternalIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TargetVMDetails) *string { return v.InternalIp }).(pulumi.StringPtrOutput)
}

// A map of labels to associate with the VM.
func (o TargetVMDetailsOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v TargetVMDetails) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The license type to use in OS adaptation.
func (o TargetVMDetailsOutput) LicenseType() TargetVMDetailsLicenseTypePtrOutput {
	return o.ApplyT(func(v TargetVMDetails) *TargetVMDetailsLicenseType { return v.LicenseType }).(TargetVMDetailsLicenseTypePtrOutput)
}

// The machine type to create the VM with.
func (o TargetVMDetailsOutput) MachineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TargetVMDetails) *string { return v.MachineType }).(pulumi.StringPtrOutput)
}

// The machine type series to create the VM with.
func (o TargetVMDetailsOutput) MachineTypeSeries() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TargetVMDetails) *string { return v.MachineTypeSeries }).(pulumi.StringPtrOutput)
}

// The metadata key/value pairs to assign to the VM.
func (o TargetVMDetailsOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v TargetVMDetails) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// The name of the VM to create.
func (o TargetVMDetailsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TargetVMDetails) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The network to connect the VM to.
func (o TargetVMDetailsOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TargetVMDetails) *string { return v.Network }).(pulumi.StringPtrOutput)
}

// List of NICs connected to this VM.
func (o TargetVMDetailsOutput) NetworkInterfaces() NetworkInterfaceArrayOutput {
	return o.ApplyT(func(v TargetVMDetails) []NetworkInterface { return v.NetworkInterfaces }).(NetworkInterfaceArrayOutput)
}

// A map of network tags to associate with the VM.
func (o TargetVMDetailsOutput) NetworkTags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TargetVMDetails) []string { return v.NetworkTags }).(pulumi.StringArrayOutput)
}

// Defines whether the instance has Secure Boot enabled. This can be set to true only if the vm boot option is EFI.
func (o TargetVMDetailsOutput) SecureBoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TargetVMDetails) *bool { return v.SecureBoot }).(pulumi.BoolPtrOutput)
}

// The service account to associate the VM with.
func (o TargetVMDetailsOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TargetVMDetails) *string { return v.ServiceAccount }).(pulumi.StringPtrOutput)
}

// The subnetwork to connect the VM to.
func (o TargetVMDetailsOutput) Subnetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TargetVMDetails) *string { return v.Subnetwork }).(pulumi.StringPtrOutput)
}

// The full path of the resource of type TargetProject which represents the Compute Engine project in which to create this VM.
func (o TargetVMDetailsOutput) TargetProject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TargetVMDetails) *string { return v.TargetProject }).(pulumi.StringPtrOutput)
}

// The zone in which to create the VM.
func (o TargetVMDetailsOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TargetVMDetails) *string { return v.Zone }).(pulumi.StringPtrOutput)
}

type TargetVMDetailsPtrOutput struct{ *pulumi.OutputState }

func (TargetVMDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TargetVMDetails)(nil)).Elem()
}

func (o TargetVMDetailsPtrOutput) ToTargetVMDetailsPtrOutput() TargetVMDetailsPtrOutput {
	return o
}

func (o TargetVMDetailsPtrOutput) ToTargetVMDetailsPtrOutputWithContext(ctx context.Context) TargetVMDetailsPtrOutput {
	return o
}

func (o TargetVMDetailsPtrOutput) Elem() TargetVMDetailsOutput {
	return o.ApplyT(func(v *TargetVMDetails) TargetVMDetails {
		if v != nil {
			return *v
		}
		var ret TargetVMDetails
		return ret
	}).(TargetVMDetailsOutput)
}

// Compute instance scheduling information (if empty default is used).
func (o TargetVMDetailsPtrOutput) ComputeScheduling() ComputeSchedulingPtrOutput {
	return o.ApplyT(func(v *TargetVMDetails) *ComputeScheduling {
		if v == nil {
			return nil
		}
		return v.ComputeScheduling
	}).(ComputeSchedulingPtrOutput)
}

// The disk type to use in the VM.
func (o TargetVMDetailsPtrOutput) DiskType() TargetVMDetailsDiskTypePtrOutput {
	return o.ApplyT(func(v *TargetVMDetails) *TargetVMDetailsDiskType {
		if v == nil {
			return nil
		}
		return v.DiskType
	}).(TargetVMDetailsDiskTypePtrOutput)
}

// The external IP to define in the VM.
func (o TargetVMDetailsPtrOutput) ExternalIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TargetVMDetails) *string {
		if v == nil {
			return nil
		}
		return v.ExternalIp
	}).(pulumi.StringPtrOutput)
}

// The internal IP to define in the VM. The formats accepted are: `ephemeral` \ ipv4 address \ a named address resource full path.
func (o TargetVMDetailsPtrOutput) InternalIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TargetVMDetails) *string {
		if v == nil {
			return nil
		}
		return v.InternalIp
	}).(pulumi.StringPtrOutput)
}

// A map of labels to associate with the VM.
func (o TargetVMDetailsPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TargetVMDetails) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// The license type to use in OS adaptation.
func (o TargetVMDetailsPtrOutput) LicenseType() TargetVMDetailsLicenseTypePtrOutput {
	return o.ApplyT(func(v *TargetVMDetails) *TargetVMDetailsLicenseType {
		if v == nil {
			return nil
		}
		return v.LicenseType
	}).(TargetVMDetailsLicenseTypePtrOutput)
}

// The machine type to create the VM with.
func (o TargetVMDetailsPtrOutput) MachineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TargetVMDetails) *string {
		if v == nil {
			return nil
		}
		return v.MachineType
	}).(pulumi.StringPtrOutput)
}

// The machine type series to create the VM with.
func (o TargetVMDetailsPtrOutput) MachineTypeSeries() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TargetVMDetails) *string {
		if v == nil {
			return nil
		}
		return v.MachineTypeSeries
	}).(pulumi.StringPtrOutput)
}

// The metadata key/value pairs to assign to the VM.
func (o TargetVMDetailsPtrOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TargetVMDetails) map[string]string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringMapOutput)
}

// The name of the VM to create.
func (o TargetVMDetailsPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TargetVMDetails) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The network to connect the VM to.
func (o TargetVMDetailsPtrOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TargetVMDetails) *string {
		if v == nil {
			return nil
		}
		return v.Network
	}).(pulumi.StringPtrOutput)
}

// List of NICs connected to this VM.
func (o TargetVMDetailsPtrOutput) NetworkInterfaces() NetworkInterfaceArrayOutput {
	return o.ApplyT(func(v *TargetVMDetails) []NetworkInterface {
		if v == nil {
			return nil
		}
		return v.NetworkInterfaces
	}).(NetworkInterfaceArrayOutput)
}

// A map of network tags to associate with the VM.
func (o TargetVMDetailsPtrOutput) NetworkTags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TargetVMDetails) []string {
		if v == nil {
			return nil
		}
		return v.NetworkTags
	}).(pulumi.StringArrayOutput)
}

// Defines whether the instance has Secure Boot enabled. This can be set to true only if the vm boot option is EFI.
func (o TargetVMDetailsPtrOutput) SecureBoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TargetVMDetails) *bool {
		if v == nil {
			return nil
		}
		return v.SecureBoot
	}).(pulumi.BoolPtrOutput)
}

// The service account to associate the VM with.
func (o TargetVMDetailsPtrOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TargetVMDetails) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccount
	}).(pulumi.StringPtrOutput)
}

// The subnetwork to connect the VM to.
func (o TargetVMDetailsPtrOutput) Subnetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TargetVMDetails) *string {
		if v == nil {
			return nil
		}
		return v.Subnetwork
	}).(pulumi.StringPtrOutput)
}

// The full path of the resource of type TargetProject which represents the Compute Engine project in which to create this VM.
func (o TargetVMDetailsPtrOutput) TargetProject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TargetVMDetails) *string {
		if v == nil {
			return nil
		}
		return v.TargetProject
	}).(pulumi.StringPtrOutput)
}

// The zone in which to create the VM.
func (o TargetVMDetailsPtrOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TargetVMDetails) *string {
		if v == nil {
			return nil
		}
		return v.Zone
	}).(pulumi.StringPtrOutput)
}

// TargetVMDetails is a collection of details for creating a VM in a target Compute Engine project.
type TargetVMDetailsResponse struct {
	// The OS license returned from the adaptation module report.
	AppliedLicense AppliedLicenseResponse `pulumi:"appliedLicense"`
	// The VM Boot Option, as set in the source vm.
	BootOption string `pulumi:"bootOption"`
	// Compute instance scheduling information (if empty default is used).
	ComputeScheduling ComputeSchedulingResponse `pulumi:"computeScheduling"`
	// The disk type to use in the VM.
	DiskType string `pulumi:"diskType"`
	// The external IP to define in the VM.
	ExternalIp string `pulumi:"externalIp"`
	// The internal IP to define in the VM. The formats accepted are: `ephemeral` \ ipv4 address \ a named address resource full path.
	InternalIp string `pulumi:"internalIp"`
	// A map of labels to associate with the VM.
	Labels map[string]string `pulumi:"labels"`
	// The license type to use in OS adaptation.
	LicenseType string `pulumi:"licenseType"`
	// The machine type to create the VM with.
	MachineType string `pulumi:"machineType"`
	// The machine type series to create the VM with.
	MachineTypeSeries string `pulumi:"machineTypeSeries"`
	// The metadata key/value pairs to assign to the VM.
	Metadata map[string]string `pulumi:"metadata"`
	// The name of the VM to create.
	Name string `pulumi:"name"`
	// The network to connect the VM to.
	Network string `pulumi:"network"`
	// List of NICs connected to this VM.
	NetworkInterfaces []NetworkInterfaceResponse `pulumi:"networkInterfaces"`
	// A map of network tags to associate with the VM.
	NetworkTags []string `pulumi:"networkTags"`
	// The project in which to create the VM.
	Project string `pulumi:"project"`
	// Defines whether the instance has Secure Boot enabled. This can be set to true only if the vm boot option is EFI.
	SecureBoot bool `pulumi:"secureBoot"`
	// The service account to associate the VM with.
	ServiceAccount string `pulumi:"serviceAccount"`
	// The subnetwork to connect the VM to.
	Subnetwork string `pulumi:"subnetwork"`
	// The full path of the resource of type TargetProject which represents the Compute Engine project in which to create this VM.
	TargetProject string `pulumi:"targetProject"`
	// The zone in which to create the VM.
	Zone string `pulumi:"zone"`
}

// TargetVMDetails is a collection of details for creating a VM in a target Compute Engine project.
type TargetVMDetailsResponseOutput struct{ *pulumi.OutputState }

func (TargetVMDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetVMDetailsResponse)(nil)).Elem()
}

func (o TargetVMDetailsResponseOutput) ToTargetVMDetailsResponseOutput() TargetVMDetailsResponseOutput {
	return o
}

func (o TargetVMDetailsResponseOutput) ToTargetVMDetailsResponseOutputWithContext(ctx context.Context) TargetVMDetailsResponseOutput {
	return o
}

// The OS license returned from the adaptation module report.
func (o TargetVMDetailsResponseOutput) AppliedLicense() AppliedLicenseResponseOutput {
	return o.ApplyT(func(v TargetVMDetailsResponse) AppliedLicenseResponse { return v.AppliedLicense }).(AppliedLicenseResponseOutput)
}

// The VM Boot Option, as set in the source vm.
func (o TargetVMDetailsResponseOutput) BootOption() pulumi.StringOutput {
	return o.ApplyT(func(v TargetVMDetailsResponse) string { return v.BootOption }).(pulumi.StringOutput)
}

// Compute instance scheduling information (if empty default is used).
func (o TargetVMDetailsResponseOutput) ComputeScheduling() ComputeSchedulingResponseOutput {
	return o.ApplyT(func(v TargetVMDetailsResponse) ComputeSchedulingResponse { return v.ComputeScheduling }).(ComputeSchedulingResponseOutput)
}

// The disk type to use in the VM.
func (o TargetVMDetailsResponseOutput) DiskType() pulumi.StringOutput {
	return o.ApplyT(func(v TargetVMDetailsResponse) string { return v.DiskType }).(pulumi.StringOutput)
}

// The external IP to define in the VM.
func (o TargetVMDetailsResponseOutput) ExternalIp() pulumi.StringOutput {
	return o.ApplyT(func(v TargetVMDetailsResponse) string { return v.ExternalIp }).(pulumi.StringOutput)
}

// The internal IP to define in the VM. The formats accepted are: `ephemeral` \ ipv4 address \ a named address resource full path.
func (o TargetVMDetailsResponseOutput) InternalIp() pulumi.StringOutput {
	return o.ApplyT(func(v TargetVMDetailsResponse) string { return v.InternalIp }).(pulumi.StringOutput)
}

// A map of labels to associate with the VM.
func (o TargetVMDetailsResponseOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v TargetVMDetailsResponse) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The license type to use in OS adaptation.
func (o TargetVMDetailsResponseOutput) LicenseType() pulumi.StringOutput {
	return o.ApplyT(func(v TargetVMDetailsResponse) string { return v.LicenseType }).(pulumi.StringOutput)
}

// The machine type to create the VM with.
func (o TargetVMDetailsResponseOutput) MachineType() pulumi.StringOutput {
	return o.ApplyT(func(v TargetVMDetailsResponse) string { return v.MachineType }).(pulumi.StringOutput)
}

// The machine type series to create the VM with.
func (o TargetVMDetailsResponseOutput) MachineTypeSeries() pulumi.StringOutput {
	return o.ApplyT(func(v TargetVMDetailsResponse) string { return v.MachineTypeSeries }).(pulumi.StringOutput)
}

// The metadata key/value pairs to assign to the VM.
func (o TargetVMDetailsResponseOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v TargetVMDetailsResponse) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// The name of the VM to create.
func (o TargetVMDetailsResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TargetVMDetailsResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The network to connect the VM to.
func (o TargetVMDetailsResponseOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v TargetVMDetailsResponse) string { return v.Network }).(pulumi.StringOutput)
}

// List of NICs connected to this VM.
func (o TargetVMDetailsResponseOutput) NetworkInterfaces() NetworkInterfaceResponseArrayOutput {
	return o.ApplyT(func(v TargetVMDetailsResponse) []NetworkInterfaceResponse { return v.NetworkInterfaces }).(NetworkInterfaceResponseArrayOutput)
}

// A map of network tags to associate with the VM.
func (o TargetVMDetailsResponseOutput) NetworkTags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TargetVMDetailsResponse) []string { return v.NetworkTags }).(pulumi.StringArrayOutput)
}

// The project in which to create the VM.
func (o TargetVMDetailsResponseOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v TargetVMDetailsResponse) string { return v.Project }).(pulumi.StringOutput)
}

// Defines whether the instance has Secure Boot enabled. This can be set to true only if the vm boot option is EFI.
func (o TargetVMDetailsResponseOutput) SecureBoot() pulumi.BoolOutput {
	return o.ApplyT(func(v TargetVMDetailsResponse) bool { return v.SecureBoot }).(pulumi.BoolOutput)
}

// The service account to associate the VM with.
func (o TargetVMDetailsResponseOutput) ServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v TargetVMDetailsResponse) string { return v.ServiceAccount }).(pulumi.StringOutput)
}

// The subnetwork to connect the VM to.
func (o TargetVMDetailsResponseOutput) Subnetwork() pulumi.StringOutput {
	return o.ApplyT(func(v TargetVMDetailsResponse) string { return v.Subnetwork }).(pulumi.StringOutput)
}

// The full path of the resource of type TargetProject which represents the Compute Engine project in which to create this VM.
func (o TargetVMDetailsResponseOutput) TargetProject() pulumi.StringOutput {
	return o.ApplyT(func(v TargetVMDetailsResponse) string { return v.TargetProject }).(pulumi.StringOutput)
}

// The zone in which to create the VM.
func (o TargetVMDetailsResponseOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v TargetVMDetailsResponse) string { return v.Zone }).(pulumi.StringOutput)
}

// UpgradeStatus contains information about upgradeAppliance operation.
type UpgradeStatusResponse struct {
	// Provides details on the state of the upgrade operation in case of an error.
	Error StatusResponse `pulumi:"error"`
	// The version from which we upgraded.
	PreviousVersion string `pulumi:"previousVersion"`
	// The time the operation was started.
	StartTime string `pulumi:"startTime"`
	// The state of the upgradeAppliance operation.
	State string `pulumi:"state"`
	// The version to upgrade to.
	Version string `pulumi:"version"`
}

// UpgradeStatus contains information about upgradeAppliance operation.
type UpgradeStatusResponseOutput struct{ *pulumi.OutputState }

func (UpgradeStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpgradeStatusResponse)(nil)).Elem()
}

func (o UpgradeStatusResponseOutput) ToUpgradeStatusResponseOutput() UpgradeStatusResponseOutput {
	return o
}

func (o UpgradeStatusResponseOutput) ToUpgradeStatusResponseOutputWithContext(ctx context.Context) UpgradeStatusResponseOutput {
	return o
}

// Provides details on the state of the upgrade operation in case of an error.
func (o UpgradeStatusResponseOutput) Error() StatusResponseOutput {
	return o.ApplyT(func(v UpgradeStatusResponse) StatusResponse { return v.Error }).(StatusResponseOutput)
}

// The version from which we upgraded.
func (o UpgradeStatusResponseOutput) PreviousVersion() pulumi.StringOutput {
	return o.ApplyT(func(v UpgradeStatusResponse) string { return v.PreviousVersion }).(pulumi.StringOutput)
}

// The time the operation was started.
func (o UpgradeStatusResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v UpgradeStatusResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

// The state of the upgradeAppliance operation.
func (o UpgradeStatusResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v UpgradeStatusResponse) string { return v.State }).(pulumi.StringOutput)
}

// The version to upgrade to.
func (o UpgradeStatusResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v UpgradeStatusResponse) string { return v.Version }).(pulumi.StringOutput)
}

// Utilization information of a single VM.
type VmUtilizationInfo struct {
	// Utilization metrics for this VM.
	Utilization *VmUtilizationMetrics `pulumi:"utilization"`
	// The VM's ID in the source.
	VmId *string `pulumi:"vmId"`
	// The description of the VM in a Source of type Vmware.
	VmwareVmDetails *VmwareVmDetails `pulumi:"vmwareVmDetails"`
}

// VmUtilizationInfoInput is an input type that accepts VmUtilizationInfoArgs and VmUtilizationInfoOutput values.
// You can construct a concrete instance of `VmUtilizationInfoInput` via:
//
//          VmUtilizationInfoArgs{...}
type VmUtilizationInfoInput interface {
	pulumi.Input

	ToVmUtilizationInfoOutput() VmUtilizationInfoOutput
	ToVmUtilizationInfoOutputWithContext(context.Context) VmUtilizationInfoOutput
}

// Utilization information of a single VM.
type VmUtilizationInfoArgs struct {
	// Utilization metrics for this VM.
	Utilization VmUtilizationMetricsPtrInput `pulumi:"utilization"`
	// The VM's ID in the source.
	VmId pulumi.StringPtrInput `pulumi:"vmId"`
	// The description of the VM in a Source of type Vmware.
	VmwareVmDetails VmwareVmDetailsPtrInput `pulumi:"vmwareVmDetails"`
}

func (VmUtilizationInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VmUtilizationInfo)(nil)).Elem()
}

func (i VmUtilizationInfoArgs) ToVmUtilizationInfoOutput() VmUtilizationInfoOutput {
	return i.ToVmUtilizationInfoOutputWithContext(context.Background())
}

func (i VmUtilizationInfoArgs) ToVmUtilizationInfoOutputWithContext(ctx context.Context) VmUtilizationInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmUtilizationInfoOutput)
}

// VmUtilizationInfoArrayInput is an input type that accepts VmUtilizationInfoArray and VmUtilizationInfoArrayOutput values.
// You can construct a concrete instance of `VmUtilizationInfoArrayInput` via:
//
//          VmUtilizationInfoArray{ VmUtilizationInfoArgs{...} }
type VmUtilizationInfoArrayInput interface {
	pulumi.Input

	ToVmUtilizationInfoArrayOutput() VmUtilizationInfoArrayOutput
	ToVmUtilizationInfoArrayOutputWithContext(context.Context) VmUtilizationInfoArrayOutput
}

type VmUtilizationInfoArray []VmUtilizationInfoInput

func (VmUtilizationInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VmUtilizationInfo)(nil)).Elem()
}

func (i VmUtilizationInfoArray) ToVmUtilizationInfoArrayOutput() VmUtilizationInfoArrayOutput {
	return i.ToVmUtilizationInfoArrayOutputWithContext(context.Background())
}

func (i VmUtilizationInfoArray) ToVmUtilizationInfoArrayOutputWithContext(ctx context.Context) VmUtilizationInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmUtilizationInfoArrayOutput)
}

// Utilization information of a single VM.
type VmUtilizationInfoOutput struct{ *pulumi.OutputState }

func (VmUtilizationInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmUtilizationInfo)(nil)).Elem()
}

func (o VmUtilizationInfoOutput) ToVmUtilizationInfoOutput() VmUtilizationInfoOutput {
	return o
}

func (o VmUtilizationInfoOutput) ToVmUtilizationInfoOutputWithContext(ctx context.Context) VmUtilizationInfoOutput {
	return o
}

// Utilization metrics for this VM.
func (o VmUtilizationInfoOutput) Utilization() VmUtilizationMetricsPtrOutput {
	return o.ApplyT(func(v VmUtilizationInfo) *VmUtilizationMetrics { return v.Utilization }).(VmUtilizationMetricsPtrOutput)
}

// The VM's ID in the source.
func (o VmUtilizationInfoOutput) VmId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmUtilizationInfo) *string { return v.VmId }).(pulumi.StringPtrOutput)
}

// The description of the VM in a Source of type Vmware.
func (o VmUtilizationInfoOutput) VmwareVmDetails() VmwareVmDetailsPtrOutput {
	return o.ApplyT(func(v VmUtilizationInfo) *VmwareVmDetails { return v.VmwareVmDetails }).(VmwareVmDetailsPtrOutput)
}

type VmUtilizationInfoArrayOutput struct{ *pulumi.OutputState }

func (VmUtilizationInfoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VmUtilizationInfo)(nil)).Elem()
}

func (o VmUtilizationInfoArrayOutput) ToVmUtilizationInfoArrayOutput() VmUtilizationInfoArrayOutput {
	return o
}

func (o VmUtilizationInfoArrayOutput) ToVmUtilizationInfoArrayOutputWithContext(ctx context.Context) VmUtilizationInfoArrayOutput {
	return o
}

func (o VmUtilizationInfoArrayOutput) Index(i pulumi.IntInput) VmUtilizationInfoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VmUtilizationInfo {
		return vs[0].([]VmUtilizationInfo)[vs[1].(int)]
	}).(VmUtilizationInfoOutput)
}

// Utilization information of a single VM.
type VmUtilizationInfoResponse struct {
	// Utilization metrics for this VM.
	Utilization VmUtilizationMetricsResponse `pulumi:"utilization"`
	// The VM's ID in the source.
	VmId string `pulumi:"vmId"`
	// The description of the VM in a Source of type Vmware.
	VmwareVmDetails VmwareVmDetailsResponse `pulumi:"vmwareVmDetails"`
}

// Utilization information of a single VM.
type VmUtilizationInfoResponseOutput struct{ *pulumi.OutputState }

func (VmUtilizationInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmUtilizationInfoResponse)(nil)).Elem()
}

func (o VmUtilizationInfoResponseOutput) ToVmUtilizationInfoResponseOutput() VmUtilizationInfoResponseOutput {
	return o
}

func (o VmUtilizationInfoResponseOutput) ToVmUtilizationInfoResponseOutputWithContext(ctx context.Context) VmUtilizationInfoResponseOutput {
	return o
}

// Utilization metrics for this VM.
func (o VmUtilizationInfoResponseOutput) Utilization() VmUtilizationMetricsResponseOutput {
	return o.ApplyT(func(v VmUtilizationInfoResponse) VmUtilizationMetricsResponse { return v.Utilization }).(VmUtilizationMetricsResponseOutput)
}

// The VM's ID in the source.
func (o VmUtilizationInfoResponseOutput) VmId() pulumi.StringOutput {
	return o.ApplyT(func(v VmUtilizationInfoResponse) string { return v.VmId }).(pulumi.StringOutput)
}

// The description of the VM in a Source of type Vmware.
func (o VmUtilizationInfoResponseOutput) VmwareVmDetails() VmwareVmDetailsResponseOutput {
	return o.ApplyT(func(v VmUtilizationInfoResponse) VmwareVmDetailsResponse { return v.VmwareVmDetails }).(VmwareVmDetailsResponseOutput)
}

type VmUtilizationInfoResponseArrayOutput struct{ *pulumi.OutputState }

func (VmUtilizationInfoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VmUtilizationInfoResponse)(nil)).Elem()
}

func (o VmUtilizationInfoResponseArrayOutput) ToVmUtilizationInfoResponseArrayOutput() VmUtilizationInfoResponseArrayOutput {
	return o
}

func (o VmUtilizationInfoResponseArrayOutput) ToVmUtilizationInfoResponseArrayOutputWithContext(ctx context.Context) VmUtilizationInfoResponseArrayOutput {
	return o
}

func (o VmUtilizationInfoResponseArrayOutput) Index(i pulumi.IntInput) VmUtilizationInfoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VmUtilizationInfoResponse {
		return vs[0].([]VmUtilizationInfoResponse)[vs[1].(int)]
	}).(VmUtilizationInfoResponseOutput)
}

// Utilization metrics values for a single VM.
type VmUtilizationMetrics struct {
	// Average CPU usage, percent.
	CpuAverage *int `pulumi:"cpuAverage"`
	// Average CPU usage, percent.
	CpuAveragePercent *int `pulumi:"cpuAveragePercent"`
	// Max CPU usage, percent.
	CpuMax *int `pulumi:"cpuMax"`
	// Max CPU usage, percent.
	CpuMaxPercent *int `pulumi:"cpuMaxPercent"`
	// Average disk IO rate, in kilobytes per second.
	DiskIoRateAverage *string `pulumi:"diskIoRateAverage"`
	// Average disk IO rate, in kilobytes per second.
	DiskIoRateAverageKbps *string `pulumi:"diskIoRateAverageKbps"`
	// Max disk IO rate, in kilobytes per second.
	DiskIoRateMax *string `pulumi:"diskIoRateMax"`
	// Max disk IO rate, in kilobytes per second.
	DiskIoRateMaxKbps *string `pulumi:"diskIoRateMaxKbps"`
	// Average memory usage, percent.
	MemoryAverage *int `pulumi:"memoryAverage"`
	// Average memory usage, percent.
	MemoryAveragePercent *int `pulumi:"memoryAveragePercent"`
	// Max memory usage, percent.
	MemoryMax *int `pulumi:"memoryMax"`
	// Max memory usage, percent.
	MemoryMaxPercent *int `pulumi:"memoryMaxPercent"`
	// Average network throughput (combined transmit-rates and receive-rates), in kilobytes per second.
	NetworkThroughputAverage *string `pulumi:"networkThroughputAverage"`
	// Average network throughput (combined transmit-rates and receive-rates), in kilobytes per second.
	NetworkThroughputAverageKbps *string `pulumi:"networkThroughputAverageKbps"`
	// Max network throughput (combined transmit-rates and receive-rates), in kilobytes per second.
	NetworkThroughputMax *string `pulumi:"networkThroughputMax"`
	// Max network throughput (combined transmit-rates and receive-rates), in kilobytes per second.
	NetworkThroughputMaxKbps *string `pulumi:"networkThroughputMaxKbps"`
}

// VmUtilizationMetricsInput is an input type that accepts VmUtilizationMetricsArgs and VmUtilizationMetricsOutput values.
// You can construct a concrete instance of `VmUtilizationMetricsInput` via:
//
//          VmUtilizationMetricsArgs{...}
type VmUtilizationMetricsInput interface {
	pulumi.Input

	ToVmUtilizationMetricsOutput() VmUtilizationMetricsOutput
	ToVmUtilizationMetricsOutputWithContext(context.Context) VmUtilizationMetricsOutput
}

// Utilization metrics values for a single VM.
type VmUtilizationMetricsArgs struct {
	// Average CPU usage, percent.
	CpuAverage pulumi.IntPtrInput `pulumi:"cpuAverage"`
	// Average CPU usage, percent.
	CpuAveragePercent pulumi.IntPtrInput `pulumi:"cpuAveragePercent"`
	// Max CPU usage, percent.
	CpuMax pulumi.IntPtrInput `pulumi:"cpuMax"`
	// Max CPU usage, percent.
	CpuMaxPercent pulumi.IntPtrInput `pulumi:"cpuMaxPercent"`
	// Average disk IO rate, in kilobytes per second.
	DiskIoRateAverage pulumi.StringPtrInput `pulumi:"diskIoRateAverage"`
	// Average disk IO rate, in kilobytes per second.
	DiskIoRateAverageKbps pulumi.StringPtrInput `pulumi:"diskIoRateAverageKbps"`
	// Max disk IO rate, in kilobytes per second.
	DiskIoRateMax pulumi.StringPtrInput `pulumi:"diskIoRateMax"`
	// Max disk IO rate, in kilobytes per second.
	DiskIoRateMaxKbps pulumi.StringPtrInput `pulumi:"diskIoRateMaxKbps"`
	// Average memory usage, percent.
	MemoryAverage pulumi.IntPtrInput `pulumi:"memoryAverage"`
	// Average memory usage, percent.
	MemoryAveragePercent pulumi.IntPtrInput `pulumi:"memoryAveragePercent"`
	// Max memory usage, percent.
	MemoryMax pulumi.IntPtrInput `pulumi:"memoryMax"`
	// Max memory usage, percent.
	MemoryMaxPercent pulumi.IntPtrInput `pulumi:"memoryMaxPercent"`
	// Average network throughput (combined transmit-rates and receive-rates), in kilobytes per second.
	NetworkThroughputAverage pulumi.StringPtrInput `pulumi:"networkThroughputAverage"`
	// Average network throughput (combined transmit-rates and receive-rates), in kilobytes per second.
	NetworkThroughputAverageKbps pulumi.StringPtrInput `pulumi:"networkThroughputAverageKbps"`
	// Max network throughput (combined transmit-rates and receive-rates), in kilobytes per second.
	NetworkThroughputMax pulumi.StringPtrInput `pulumi:"networkThroughputMax"`
	// Max network throughput (combined transmit-rates and receive-rates), in kilobytes per second.
	NetworkThroughputMaxKbps pulumi.StringPtrInput `pulumi:"networkThroughputMaxKbps"`
}

func (VmUtilizationMetricsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VmUtilizationMetrics)(nil)).Elem()
}

func (i VmUtilizationMetricsArgs) ToVmUtilizationMetricsOutput() VmUtilizationMetricsOutput {
	return i.ToVmUtilizationMetricsOutputWithContext(context.Background())
}

func (i VmUtilizationMetricsArgs) ToVmUtilizationMetricsOutputWithContext(ctx context.Context) VmUtilizationMetricsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmUtilizationMetricsOutput)
}

func (i VmUtilizationMetricsArgs) ToVmUtilizationMetricsPtrOutput() VmUtilizationMetricsPtrOutput {
	return i.ToVmUtilizationMetricsPtrOutputWithContext(context.Background())
}

func (i VmUtilizationMetricsArgs) ToVmUtilizationMetricsPtrOutputWithContext(ctx context.Context) VmUtilizationMetricsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmUtilizationMetricsOutput).ToVmUtilizationMetricsPtrOutputWithContext(ctx)
}

// VmUtilizationMetricsPtrInput is an input type that accepts VmUtilizationMetricsArgs, VmUtilizationMetricsPtr and VmUtilizationMetricsPtrOutput values.
// You can construct a concrete instance of `VmUtilizationMetricsPtrInput` via:
//
//          VmUtilizationMetricsArgs{...}
//
//  or:
//
//          nil
type VmUtilizationMetricsPtrInput interface {
	pulumi.Input

	ToVmUtilizationMetricsPtrOutput() VmUtilizationMetricsPtrOutput
	ToVmUtilizationMetricsPtrOutputWithContext(context.Context) VmUtilizationMetricsPtrOutput
}

type vmUtilizationMetricsPtrType VmUtilizationMetricsArgs

func VmUtilizationMetricsPtr(v *VmUtilizationMetricsArgs) VmUtilizationMetricsPtrInput {
	return (*vmUtilizationMetricsPtrType)(v)
}

func (*vmUtilizationMetricsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VmUtilizationMetrics)(nil)).Elem()
}

func (i *vmUtilizationMetricsPtrType) ToVmUtilizationMetricsPtrOutput() VmUtilizationMetricsPtrOutput {
	return i.ToVmUtilizationMetricsPtrOutputWithContext(context.Background())
}

func (i *vmUtilizationMetricsPtrType) ToVmUtilizationMetricsPtrOutputWithContext(ctx context.Context) VmUtilizationMetricsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmUtilizationMetricsPtrOutput)
}

// Utilization metrics values for a single VM.
type VmUtilizationMetricsOutput struct{ *pulumi.OutputState }

func (VmUtilizationMetricsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmUtilizationMetrics)(nil)).Elem()
}

func (o VmUtilizationMetricsOutput) ToVmUtilizationMetricsOutput() VmUtilizationMetricsOutput {
	return o
}

func (o VmUtilizationMetricsOutput) ToVmUtilizationMetricsOutputWithContext(ctx context.Context) VmUtilizationMetricsOutput {
	return o
}

func (o VmUtilizationMetricsOutput) ToVmUtilizationMetricsPtrOutput() VmUtilizationMetricsPtrOutput {
	return o.ToVmUtilizationMetricsPtrOutputWithContext(context.Background())
}

func (o VmUtilizationMetricsOutput) ToVmUtilizationMetricsPtrOutputWithContext(ctx context.Context) VmUtilizationMetricsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VmUtilizationMetrics) *VmUtilizationMetrics {
		return &v
	}).(VmUtilizationMetricsPtrOutput)
}

// Average CPU usage, percent.
func (o VmUtilizationMetricsOutput) CpuAverage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VmUtilizationMetrics) *int { return v.CpuAverage }).(pulumi.IntPtrOutput)
}

// Average CPU usage, percent.
func (o VmUtilizationMetricsOutput) CpuAveragePercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VmUtilizationMetrics) *int { return v.CpuAveragePercent }).(pulumi.IntPtrOutput)
}

// Max CPU usage, percent.
func (o VmUtilizationMetricsOutput) CpuMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VmUtilizationMetrics) *int { return v.CpuMax }).(pulumi.IntPtrOutput)
}

// Max CPU usage, percent.
func (o VmUtilizationMetricsOutput) CpuMaxPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VmUtilizationMetrics) *int { return v.CpuMaxPercent }).(pulumi.IntPtrOutput)
}

// Average disk IO rate, in kilobytes per second.
func (o VmUtilizationMetricsOutput) DiskIoRateAverage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmUtilizationMetrics) *string { return v.DiskIoRateAverage }).(pulumi.StringPtrOutput)
}

// Average disk IO rate, in kilobytes per second.
func (o VmUtilizationMetricsOutput) DiskIoRateAverageKbps() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmUtilizationMetrics) *string { return v.DiskIoRateAverageKbps }).(pulumi.StringPtrOutput)
}

// Max disk IO rate, in kilobytes per second.
func (o VmUtilizationMetricsOutput) DiskIoRateMax() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmUtilizationMetrics) *string { return v.DiskIoRateMax }).(pulumi.StringPtrOutput)
}

// Max disk IO rate, in kilobytes per second.
func (o VmUtilizationMetricsOutput) DiskIoRateMaxKbps() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmUtilizationMetrics) *string { return v.DiskIoRateMaxKbps }).(pulumi.StringPtrOutput)
}

// Average memory usage, percent.
func (o VmUtilizationMetricsOutput) MemoryAverage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VmUtilizationMetrics) *int { return v.MemoryAverage }).(pulumi.IntPtrOutput)
}

// Average memory usage, percent.
func (o VmUtilizationMetricsOutput) MemoryAveragePercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VmUtilizationMetrics) *int { return v.MemoryAveragePercent }).(pulumi.IntPtrOutput)
}

// Max memory usage, percent.
func (o VmUtilizationMetricsOutput) MemoryMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VmUtilizationMetrics) *int { return v.MemoryMax }).(pulumi.IntPtrOutput)
}

// Max memory usage, percent.
func (o VmUtilizationMetricsOutput) MemoryMaxPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VmUtilizationMetrics) *int { return v.MemoryMaxPercent }).(pulumi.IntPtrOutput)
}

// Average network throughput (combined transmit-rates and receive-rates), in kilobytes per second.
func (o VmUtilizationMetricsOutput) NetworkThroughputAverage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmUtilizationMetrics) *string { return v.NetworkThroughputAverage }).(pulumi.StringPtrOutput)
}

// Average network throughput (combined transmit-rates and receive-rates), in kilobytes per second.
func (o VmUtilizationMetricsOutput) NetworkThroughputAverageKbps() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmUtilizationMetrics) *string { return v.NetworkThroughputAverageKbps }).(pulumi.StringPtrOutput)
}

// Max network throughput (combined transmit-rates and receive-rates), in kilobytes per second.
func (o VmUtilizationMetricsOutput) NetworkThroughputMax() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmUtilizationMetrics) *string { return v.NetworkThroughputMax }).(pulumi.StringPtrOutput)
}

// Max network throughput (combined transmit-rates and receive-rates), in kilobytes per second.
func (o VmUtilizationMetricsOutput) NetworkThroughputMaxKbps() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmUtilizationMetrics) *string { return v.NetworkThroughputMaxKbps }).(pulumi.StringPtrOutput)
}

type VmUtilizationMetricsPtrOutput struct{ *pulumi.OutputState }

func (VmUtilizationMetricsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VmUtilizationMetrics)(nil)).Elem()
}

func (o VmUtilizationMetricsPtrOutput) ToVmUtilizationMetricsPtrOutput() VmUtilizationMetricsPtrOutput {
	return o
}

func (o VmUtilizationMetricsPtrOutput) ToVmUtilizationMetricsPtrOutputWithContext(ctx context.Context) VmUtilizationMetricsPtrOutput {
	return o
}

func (o VmUtilizationMetricsPtrOutput) Elem() VmUtilizationMetricsOutput {
	return o.ApplyT(func(v *VmUtilizationMetrics) VmUtilizationMetrics {
		if v != nil {
			return *v
		}
		var ret VmUtilizationMetrics
		return ret
	}).(VmUtilizationMetricsOutput)
}

// Average CPU usage, percent.
func (o VmUtilizationMetricsPtrOutput) CpuAverage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VmUtilizationMetrics) *int {
		if v == nil {
			return nil
		}
		return v.CpuAverage
	}).(pulumi.IntPtrOutput)
}

// Average CPU usage, percent.
func (o VmUtilizationMetricsPtrOutput) CpuAveragePercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VmUtilizationMetrics) *int {
		if v == nil {
			return nil
		}
		return v.CpuAveragePercent
	}).(pulumi.IntPtrOutput)
}

// Max CPU usage, percent.
func (o VmUtilizationMetricsPtrOutput) CpuMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VmUtilizationMetrics) *int {
		if v == nil {
			return nil
		}
		return v.CpuMax
	}).(pulumi.IntPtrOutput)
}

// Max CPU usage, percent.
func (o VmUtilizationMetricsPtrOutput) CpuMaxPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VmUtilizationMetrics) *int {
		if v == nil {
			return nil
		}
		return v.CpuMaxPercent
	}).(pulumi.IntPtrOutput)
}

// Average disk IO rate, in kilobytes per second.
func (o VmUtilizationMetricsPtrOutput) DiskIoRateAverage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmUtilizationMetrics) *string {
		if v == nil {
			return nil
		}
		return v.DiskIoRateAverage
	}).(pulumi.StringPtrOutput)
}

// Average disk IO rate, in kilobytes per second.
func (o VmUtilizationMetricsPtrOutput) DiskIoRateAverageKbps() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmUtilizationMetrics) *string {
		if v == nil {
			return nil
		}
		return v.DiskIoRateAverageKbps
	}).(pulumi.StringPtrOutput)
}

// Max disk IO rate, in kilobytes per second.
func (o VmUtilizationMetricsPtrOutput) DiskIoRateMax() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmUtilizationMetrics) *string {
		if v == nil {
			return nil
		}
		return v.DiskIoRateMax
	}).(pulumi.StringPtrOutput)
}

// Max disk IO rate, in kilobytes per second.
func (o VmUtilizationMetricsPtrOutput) DiskIoRateMaxKbps() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmUtilizationMetrics) *string {
		if v == nil {
			return nil
		}
		return v.DiskIoRateMaxKbps
	}).(pulumi.StringPtrOutput)
}

// Average memory usage, percent.
func (o VmUtilizationMetricsPtrOutput) MemoryAverage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VmUtilizationMetrics) *int {
		if v == nil {
			return nil
		}
		return v.MemoryAverage
	}).(pulumi.IntPtrOutput)
}

// Average memory usage, percent.
func (o VmUtilizationMetricsPtrOutput) MemoryAveragePercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VmUtilizationMetrics) *int {
		if v == nil {
			return nil
		}
		return v.MemoryAveragePercent
	}).(pulumi.IntPtrOutput)
}

// Max memory usage, percent.
func (o VmUtilizationMetricsPtrOutput) MemoryMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VmUtilizationMetrics) *int {
		if v == nil {
			return nil
		}
		return v.MemoryMax
	}).(pulumi.IntPtrOutput)
}

// Max memory usage, percent.
func (o VmUtilizationMetricsPtrOutput) MemoryMaxPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VmUtilizationMetrics) *int {
		if v == nil {
			return nil
		}
		return v.MemoryMaxPercent
	}).(pulumi.IntPtrOutput)
}

// Average network throughput (combined transmit-rates and receive-rates), in kilobytes per second.
func (o VmUtilizationMetricsPtrOutput) NetworkThroughputAverage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmUtilizationMetrics) *string {
		if v == nil {
			return nil
		}
		return v.NetworkThroughputAverage
	}).(pulumi.StringPtrOutput)
}

// Average network throughput (combined transmit-rates and receive-rates), in kilobytes per second.
func (o VmUtilizationMetricsPtrOutput) NetworkThroughputAverageKbps() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmUtilizationMetrics) *string {
		if v == nil {
			return nil
		}
		return v.NetworkThroughputAverageKbps
	}).(pulumi.StringPtrOutput)
}

// Max network throughput (combined transmit-rates and receive-rates), in kilobytes per second.
func (o VmUtilizationMetricsPtrOutput) NetworkThroughputMax() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmUtilizationMetrics) *string {
		if v == nil {
			return nil
		}
		return v.NetworkThroughputMax
	}).(pulumi.StringPtrOutput)
}

// Max network throughput (combined transmit-rates and receive-rates), in kilobytes per second.
func (o VmUtilizationMetricsPtrOutput) NetworkThroughputMaxKbps() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmUtilizationMetrics) *string {
		if v == nil {
			return nil
		}
		return v.NetworkThroughputMaxKbps
	}).(pulumi.StringPtrOutput)
}

// Utilization metrics values for a single VM.
type VmUtilizationMetricsResponse struct {
	// Average CPU usage, percent.
	CpuAverage int `pulumi:"cpuAverage"`
	// Average CPU usage, percent.
	CpuAveragePercent int `pulumi:"cpuAveragePercent"`
	// Max CPU usage, percent.
	CpuMax int `pulumi:"cpuMax"`
	// Max CPU usage, percent.
	CpuMaxPercent int `pulumi:"cpuMaxPercent"`
	// Average disk IO rate, in kilobytes per second.
	DiskIoRateAverage string `pulumi:"diskIoRateAverage"`
	// Average disk IO rate, in kilobytes per second.
	DiskIoRateAverageKbps string `pulumi:"diskIoRateAverageKbps"`
	// Max disk IO rate, in kilobytes per second.
	DiskIoRateMax string `pulumi:"diskIoRateMax"`
	// Max disk IO rate, in kilobytes per second.
	DiskIoRateMaxKbps string `pulumi:"diskIoRateMaxKbps"`
	// Average memory usage, percent.
	MemoryAverage int `pulumi:"memoryAverage"`
	// Average memory usage, percent.
	MemoryAveragePercent int `pulumi:"memoryAveragePercent"`
	// Max memory usage, percent.
	MemoryMax int `pulumi:"memoryMax"`
	// Max memory usage, percent.
	MemoryMaxPercent int `pulumi:"memoryMaxPercent"`
	// Average network throughput (combined transmit-rates and receive-rates), in kilobytes per second.
	NetworkThroughputAverage string `pulumi:"networkThroughputAverage"`
	// Average network throughput (combined transmit-rates and receive-rates), in kilobytes per second.
	NetworkThroughputAverageKbps string `pulumi:"networkThroughputAverageKbps"`
	// Max network throughput (combined transmit-rates and receive-rates), in kilobytes per second.
	NetworkThroughputMax string `pulumi:"networkThroughputMax"`
	// Max network throughput (combined transmit-rates and receive-rates), in kilobytes per second.
	NetworkThroughputMaxKbps string `pulumi:"networkThroughputMaxKbps"`
}

// Utilization metrics values for a single VM.
type VmUtilizationMetricsResponseOutput struct{ *pulumi.OutputState }

func (VmUtilizationMetricsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmUtilizationMetricsResponse)(nil)).Elem()
}

func (o VmUtilizationMetricsResponseOutput) ToVmUtilizationMetricsResponseOutput() VmUtilizationMetricsResponseOutput {
	return o
}

func (o VmUtilizationMetricsResponseOutput) ToVmUtilizationMetricsResponseOutputWithContext(ctx context.Context) VmUtilizationMetricsResponseOutput {
	return o
}

// Average CPU usage, percent.
func (o VmUtilizationMetricsResponseOutput) CpuAverage() pulumi.IntOutput {
	return o.ApplyT(func(v VmUtilizationMetricsResponse) int { return v.CpuAverage }).(pulumi.IntOutput)
}

// Average CPU usage, percent.
func (o VmUtilizationMetricsResponseOutput) CpuAveragePercent() pulumi.IntOutput {
	return o.ApplyT(func(v VmUtilizationMetricsResponse) int { return v.CpuAveragePercent }).(pulumi.IntOutput)
}

// Max CPU usage, percent.
func (o VmUtilizationMetricsResponseOutput) CpuMax() pulumi.IntOutput {
	return o.ApplyT(func(v VmUtilizationMetricsResponse) int { return v.CpuMax }).(pulumi.IntOutput)
}

// Max CPU usage, percent.
func (o VmUtilizationMetricsResponseOutput) CpuMaxPercent() pulumi.IntOutput {
	return o.ApplyT(func(v VmUtilizationMetricsResponse) int { return v.CpuMaxPercent }).(pulumi.IntOutput)
}

// Average disk IO rate, in kilobytes per second.
func (o VmUtilizationMetricsResponseOutput) DiskIoRateAverage() pulumi.StringOutput {
	return o.ApplyT(func(v VmUtilizationMetricsResponse) string { return v.DiskIoRateAverage }).(pulumi.StringOutput)
}

// Average disk IO rate, in kilobytes per second.
func (o VmUtilizationMetricsResponseOutput) DiskIoRateAverageKbps() pulumi.StringOutput {
	return o.ApplyT(func(v VmUtilizationMetricsResponse) string { return v.DiskIoRateAverageKbps }).(pulumi.StringOutput)
}

// Max disk IO rate, in kilobytes per second.
func (o VmUtilizationMetricsResponseOutput) DiskIoRateMax() pulumi.StringOutput {
	return o.ApplyT(func(v VmUtilizationMetricsResponse) string { return v.DiskIoRateMax }).(pulumi.StringOutput)
}

// Max disk IO rate, in kilobytes per second.
func (o VmUtilizationMetricsResponseOutput) DiskIoRateMaxKbps() pulumi.StringOutput {
	return o.ApplyT(func(v VmUtilizationMetricsResponse) string { return v.DiskIoRateMaxKbps }).(pulumi.StringOutput)
}

// Average memory usage, percent.
func (o VmUtilizationMetricsResponseOutput) MemoryAverage() pulumi.IntOutput {
	return o.ApplyT(func(v VmUtilizationMetricsResponse) int { return v.MemoryAverage }).(pulumi.IntOutput)
}

// Average memory usage, percent.
func (o VmUtilizationMetricsResponseOutput) MemoryAveragePercent() pulumi.IntOutput {
	return o.ApplyT(func(v VmUtilizationMetricsResponse) int { return v.MemoryAveragePercent }).(pulumi.IntOutput)
}

// Max memory usage, percent.
func (o VmUtilizationMetricsResponseOutput) MemoryMax() pulumi.IntOutput {
	return o.ApplyT(func(v VmUtilizationMetricsResponse) int { return v.MemoryMax }).(pulumi.IntOutput)
}

// Max memory usage, percent.
func (o VmUtilizationMetricsResponseOutput) MemoryMaxPercent() pulumi.IntOutput {
	return o.ApplyT(func(v VmUtilizationMetricsResponse) int { return v.MemoryMaxPercent }).(pulumi.IntOutput)
}

// Average network throughput (combined transmit-rates and receive-rates), in kilobytes per second.
func (o VmUtilizationMetricsResponseOutput) NetworkThroughputAverage() pulumi.StringOutput {
	return o.ApplyT(func(v VmUtilizationMetricsResponse) string { return v.NetworkThroughputAverage }).(pulumi.StringOutput)
}

// Average network throughput (combined transmit-rates and receive-rates), in kilobytes per second.
func (o VmUtilizationMetricsResponseOutput) NetworkThroughputAverageKbps() pulumi.StringOutput {
	return o.ApplyT(func(v VmUtilizationMetricsResponse) string { return v.NetworkThroughputAverageKbps }).(pulumi.StringOutput)
}

// Max network throughput (combined transmit-rates and receive-rates), in kilobytes per second.
func (o VmUtilizationMetricsResponseOutput) NetworkThroughputMax() pulumi.StringOutput {
	return o.ApplyT(func(v VmUtilizationMetricsResponse) string { return v.NetworkThroughputMax }).(pulumi.StringOutput)
}

// Max network throughput (combined transmit-rates and receive-rates), in kilobytes per second.
func (o VmUtilizationMetricsResponseOutput) NetworkThroughputMaxKbps() pulumi.StringOutput {
	return o.ApplyT(func(v VmUtilizationMetricsResponse) string { return v.NetworkThroughputMaxKbps }).(pulumi.StringOutput)
}

// VmwareSourceDetails message describes a specific source details for the vmware source type.
type VmwareSourceDetails struct {
	// Input only. The credentials password. This is write only and can not be read in a GET operation.
	Password *string `pulumi:"password"`
	// The thumbprint representing the certificate for the vcenter.
	Thumbprint *string `pulumi:"thumbprint"`
	// The credentials username.
	Username *string `pulumi:"username"`
	// The ip address of the vcenter this Source represents.
	VcenterIp *string `pulumi:"vcenterIp"`
}

// VmwareSourceDetailsInput is an input type that accepts VmwareSourceDetailsArgs and VmwareSourceDetailsOutput values.
// You can construct a concrete instance of `VmwareSourceDetailsInput` via:
//
//          VmwareSourceDetailsArgs{...}
type VmwareSourceDetailsInput interface {
	pulumi.Input

	ToVmwareSourceDetailsOutput() VmwareSourceDetailsOutput
	ToVmwareSourceDetailsOutputWithContext(context.Context) VmwareSourceDetailsOutput
}

// VmwareSourceDetails message describes a specific source details for the vmware source type.
type VmwareSourceDetailsArgs struct {
	// Input only. The credentials password. This is write only and can not be read in a GET operation.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The thumbprint representing the certificate for the vcenter.
	Thumbprint pulumi.StringPtrInput `pulumi:"thumbprint"`
	// The credentials username.
	Username pulumi.StringPtrInput `pulumi:"username"`
	// The ip address of the vcenter this Source represents.
	VcenterIp pulumi.StringPtrInput `pulumi:"vcenterIp"`
}

func (VmwareSourceDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareSourceDetails)(nil)).Elem()
}

func (i VmwareSourceDetailsArgs) ToVmwareSourceDetailsOutput() VmwareSourceDetailsOutput {
	return i.ToVmwareSourceDetailsOutputWithContext(context.Background())
}

func (i VmwareSourceDetailsArgs) ToVmwareSourceDetailsOutputWithContext(ctx context.Context) VmwareSourceDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareSourceDetailsOutput)
}

func (i VmwareSourceDetailsArgs) ToVmwareSourceDetailsPtrOutput() VmwareSourceDetailsPtrOutput {
	return i.ToVmwareSourceDetailsPtrOutputWithContext(context.Background())
}

func (i VmwareSourceDetailsArgs) ToVmwareSourceDetailsPtrOutputWithContext(ctx context.Context) VmwareSourceDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareSourceDetailsOutput).ToVmwareSourceDetailsPtrOutputWithContext(ctx)
}

// VmwareSourceDetailsPtrInput is an input type that accepts VmwareSourceDetailsArgs, VmwareSourceDetailsPtr and VmwareSourceDetailsPtrOutput values.
// You can construct a concrete instance of `VmwareSourceDetailsPtrInput` via:
//
//          VmwareSourceDetailsArgs{...}
//
//  or:
//
//          nil
type VmwareSourceDetailsPtrInput interface {
	pulumi.Input

	ToVmwareSourceDetailsPtrOutput() VmwareSourceDetailsPtrOutput
	ToVmwareSourceDetailsPtrOutputWithContext(context.Context) VmwareSourceDetailsPtrOutput
}

type vmwareSourceDetailsPtrType VmwareSourceDetailsArgs

func VmwareSourceDetailsPtr(v *VmwareSourceDetailsArgs) VmwareSourceDetailsPtrInput {
	return (*vmwareSourceDetailsPtrType)(v)
}

func (*vmwareSourceDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VmwareSourceDetails)(nil)).Elem()
}

func (i *vmwareSourceDetailsPtrType) ToVmwareSourceDetailsPtrOutput() VmwareSourceDetailsPtrOutput {
	return i.ToVmwareSourceDetailsPtrOutputWithContext(context.Background())
}

func (i *vmwareSourceDetailsPtrType) ToVmwareSourceDetailsPtrOutputWithContext(ctx context.Context) VmwareSourceDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareSourceDetailsPtrOutput)
}

// VmwareSourceDetails message describes a specific source details for the vmware source type.
type VmwareSourceDetailsOutput struct{ *pulumi.OutputState }

func (VmwareSourceDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareSourceDetails)(nil)).Elem()
}

func (o VmwareSourceDetailsOutput) ToVmwareSourceDetailsOutput() VmwareSourceDetailsOutput {
	return o
}

func (o VmwareSourceDetailsOutput) ToVmwareSourceDetailsOutputWithContext(ctx context.Context) VmwareSourceDetailsOutput {
	return o
}

func (o VmwareSourceDetailsOutput) ToVmwareSourceDetailsPtrOutput() VmwareSourceDetailsPtrOutput {
	return o.ToVmwareSourceDetailsPtrOutputWithContext(context.Background())
}

func (o VmwareSourceDetailsOutput) ToVmwareSourceDetailsPtrOutputWithContext(ctx context.Context) VmwareSourceDetailsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VmwareSourceDetails) *VmwareSourceDetails {
		return &v
	}).(VmwareSourceDetailsPtrOutput)
}

// Input only. The credentials password. This is write only and can not be read in a GET operation.
func (o VmwareSourceDetailsOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmwareSourceDetails) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The thumbprint representing the certificate for the vcenter.
func (o VmwareSourceDetailsOutput) Thumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmwareSourceDetails) *string { return v.Thumbprint }).(pulumi.StringPtrOutput)
}

// The credentials username.
func (o VmwareSourceDetailsOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmwareSourceDetails) *string { return v.Username }).(pulumi.StringPtrOutput)
}

// The ip address of the vcenter this Source represents.
func (o VmwareSourceDetailsOutput) VcenterIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmwareSourceDetails) *string { return v.VcenterIp }).(pulumi.StringPtrOutput)
}

type VmwareSourceDetailsPtrOutput struct{ *pulumi.OutputState }

func (VmwareSourceDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VmwareSourceDetails)(nil)).Elem()
}

func (o VmwareSourceDetailsPtrOutput) ToVmwareSourceDetailsPtrOutput() VmwareSourceDetailsPtrOutput {
	return o
}

func (o VmwareSourceDetailsPtrOutput) ToVmwareSourceDetailsPtrOutputWithContext(ctx context.Context) VmwareSourceDetailsPtrOutput {
	return o
}

func (o VmwareSourceDetailsPtrOutput) Elem() VmwareSourceDetailsOutput {
	return o.ApplyT(func(v *VmwareSourceDetails) VmwareSourceDetails {
		if v != nil {
			return *v
		}
		var ret VmwareSourceDetails
		return ret
	}).(VmwareSourceDetailsOutput)
}

// Input only. The credentials password. This is write only and can not be read in a GET operation.
func (o VmwareSourceDetailsPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmwareSourceDetails) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The thumbprint representing the certificate for the vcenter.
func (o VmwareSourceDetailsPtrOutput) Thumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmwareSourceDetails) *string {
		if v == nil {
			return nil
		}
		return v.Thumbprint
	}).(pulumi.StringPtrOutput)
}

// The credentials username.
func (o VmwareSourceDetailsPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmwareSourceDetails) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

// The ip address of the vcenter this Source represents.
func (o VmwareSourceDetailsPtrOutput) VcenterIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmwareSourceDetails) *string {
		if v == nil {
			return nil
		}
		return v.VcenterIp
	}).(pulumi.StringPtrOutput)
}

// VmwareSourceDetails message describes a specific source details for the vmware source type.
type VmwareSourceDetailsResponse struct {
	// Input only. The credentials password. This is write only and can not be read in a GET operation.
	Password string `pulumi:"password"`
	// The thumbprint representing the certificate for the vcenter.
	Thumbprint string `pulumi:"thumbprint"`
	// The credentials username.
	Username string `pulumi:"username"`
	// The ip address of the vcenter this Source represents.
	VcenterIp string `pulumi:"vcenterIp"`
}

// VmwareSourceDetails message describes a specific source details for the vmware source type.
type VmwareSourceDetailsResponseOutput struct{ *pulumi.OutputState }

func (VmwareSourceDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareSourceDetailsResponse)(nil)).Elem()
}

func (o VmwareSourceDetailsResponseOutput) ToVmwareSourceDetailsResponseOutput() VmwareSourceDetailsResponseOutput {
	return o
}

func (o VmwareSourceDetailsResponseOutput) ToVmwareSourceDetailsResponseOutputWithContext(ctx context.Context) VmwareSourceDetailsResponseOutput {
	return o
}

// Input only. The credentials password. This is write only and can not be read in a GET operation.
func (o VmwareSourceDetailsResponseOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareSourceDetailsResponse) string { return v.Password }).(pulumi.StringOutput)
}

// The thumbprint representing the certificate for the vcenter.
func (o VmwareSourceDetailsResponseOutput) Thumbprint() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareSourceDetailsResponse) string { return v.Thumbprint }).(pulumi.StringOutput)
}

// The credentials username.
func (o VmwareSourceDetailsResponseOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareSourceDetailsResponse) string { return v.Username }).(pulumi.StringOutput)
}

// The ip address of the vcenter this Source represents.
func (o VmwareSourceDetailsResponseOutput) VcenterIp() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareSourceDetailsResponse) string { return v.VcenterIp }).(pulumi.StringOutput)
}

// VmwareVmDetails describes a VM in vCenter.
type VmwareVmDetails struct {
	// The total size of the storage allocated to the VM in MB.
	CommittedStorage *string `pulumi:"committedStorage"`
	// The total size of the storage allocated to the VM in MB.
	CommittedStorageMb *string `pulumi:"committedStorageMb"`
	// The number of cpus in the VM.
	CpuCount *int `pulumi:"cpuCount"`
	// The descriptive name of the vCenter's datacenter this VM is contained in.
	DatacenterDescription *string `pulumi:"datacenterDescription"`
	// The id of the vCenter's datacenter this VM is contained in.
	DatacenterId *string `pulumi:"datacenterId"`
	// The number of disks the VM has.
	DiskCount *int `pulumi:"diskCount"`
	// The display name of the VM. Note that this is not necessarily unique.
	DisplayName *string `pulumi:"displayName"`
	// The VM's OS. See for example https://vdc-repo.vmware.com/vmwb-repository/dcr-public/da47f910-60ac-438b-8b9b-6122f4d14524/16b7274a-bf8b-4b4c-a05e-746f2aa93c8c/doc/vim.vm.GuestOsDescriptor.GuestOsIdentifier.html for types of strings this might hold.
	GuestDescription *string `pulumi:"guestDescription"`
	// The size of the memory of the VM in MB.
	MemoryMb *int `pulumi:"memoryMb"`
	// The power state of the VM at the moment list was taken.
	PowerState *VmwareVmDetailsPowerState `pulumi:"powerState"`
	// The unique identifier of the VM in vCenter.
	Uuid *string `pulumi:"uuid"`
	// The VM's id in the source (note that this is not the MigratingVm's id). This is the moref id of the VM.
	VmId *string `pulumi:"vmId"`
}

// VmwareVmDetailsInput is an input type that accepts VmwareVmDetailsArgs and VmwareVmDetailsOutput values.
// You can construct a concrete instance of `VmwareVmDetailsInput` via:
//
//          VmwareVmDetailsArgs{...}
type VmwareVmDetailsInput interface {
	pulumi.Input

	ToVmwareVmDetailsOutput() VmwareVmDetailsOutput
	ToVmwareVmDetailsOutputWithContext(context.Context) VmwareVmDetailsOutput
}

// VmwareVmDetails describes a VM in vCenter.
type VmwareVmDetailsArgs struct {
	// The total size of the storage allocated to the VM in MB.
	CommittedStorage pulumi.StringPtrInput `pulumi:"committedStorage"`
	// The total size of the storage allocated to the VM in MB.
	CommittedStorageMb pulumi.StringPtrInput `pulumi:"committedStorageMb"`
	// The number of cpus in the VM.
	CpuCount pulumi.IntPtrInput `pulumi:"cpuCount"`
	// The descriptive name of the vCenter's datacenter this VM is contained in.
	DatacenterDescription pulumi.StringPtrInput `pulumi:"datacenterDescription"`
	// The id of the vCenter's datacenter this VM is contained in.
	DatacenterId pulumi.StringPtrInput `pulumi:"datacenterId"`
	// The number of disks the VM has.
	DiskCount pulumi.IntPtrInput `pulumi:"diskCount"`
	// The display name of the VM. Note that this is not necessarily unique.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The VM's OS. See for example https://vdc-repo.vmware.com/vmwb-repository/dcr-public/da47f910-60ac-438b-8b9b-6122f4d14524/16b7274a-bf8b-4b4c-a05e-746f2aa93c8c/doc/vim.vm.GuestOsDescriptor.GuestOsIdentifier.html for types of strings this might hold.
	GuestDescription pulumi.StringPtrInput `pulumi:"guestDescription"`
	// The size of the memory of the VM in MB.
	MemoryMb pulumi.IntPtrInput `pulumi:"memoryMb"`
	// The power state of the VM at the moment list was taken.
	PowerState VmwareVmDetailsPowerStatePtrInput `pulumi:"powerState"`
	// The unique identifier of the VM in vCenter.
	Uuid pulumi.StringPtrInput `pulumi:"uuid"`
	// The VM's id in the source (note that this is not the MigratingVm's id). This is the moref id of the VM.
	VmId pulumi.StringPtrInput `pulumi:"vmId"`
}

func (VmwareVmDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareVmDetails)(nil)).Elem()
}

func (i VmwareVmDetailsArgs) ToVmwareVmDetailsOutput() VmwareVmDetailsOutput {
	return i.ToVmwareVmDetailsOutputWithContext(context.Background())
}

func (i VmwareVmDetailsArgs) ToVmwareVmDetailsOutputWithContext(ctx context.Context) VmwareVmDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareVmDetailsOutput)
}

func (i VmwareVmDetailsArgs) ToVmwareVmDetailsPtrOutput() VmwareVmDetailsPtrOutput {
	return i.ToVmwareVmDetailsPtrOutputWithContext(context.Background())
}

func (i VmwareVmDetailsArgs) ToVmwareVmDetailsPtrOutputWithContext(ctx context.Context) VmwareVmDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareVmDetailsOutput).ToVmwareVmDetailsPtrOutputWithContext(ctx)
}

// VmwareVmDetailsPtrInput is an input type that accepts VmwareVmDetailsArgs, VmwareVmDetailsPtr and VmwareVmDetailsPtrOutput values.
// You can construct a concrete instance of `VmwareVmDetailsPtrInput` via:
//
//          VmwareVmDetailsArgs{...}
//
//  or:
//
//          nil
type VmwareVmDetailsPtrInput interface {
	pulumi.Input

	ToVmwareVmDetailsPtrOutput() VmwareVmDetailsPtrOutput
	ToVmwareVmDetailsPtrOutputWithContext(context.Context) VmwareVmDetailsPtrOutput
}

type vmwareVmDetailsPtrType VmwareVmDetailsArgs

func VmwareVmDetailsPtr(v *VmwareVmDetailsArgs) VmwareVmDetailsPtrInput {
	return (*vmwareVmDetailsPtrType)(v)
}

func (*vmwareVmDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VmwareVmDetails)(nil)).Elem()
}

func (i *vmwareVmDetailsPtrType) ToVmwareVmDetailsPtrOutput() VmwareVmDetailsPtrOutput {
	return i.ToVmwareVmDetailsPtrOutputWithContext(context.Background())
}

func (i *vmwareVmDetailsPtrType) ToVmwareVmDetailsPtrOutputWithContext(ctx context.Context) VmwareVmDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareVmDetailsPtrOutput)
}

// VmwareVmDetails describes a VM in vCenter.
type VmwareVmDetailsOutput struct{ *pulumi.OutputState }

func (VmwareVmDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareVmDetails)(nil)).Elem()
}

func (o VmwareVmDetailsOutput) ToVmwareVmDetailsOutput() VmwareVmDetailsOutput {
	return o
}

func (o VmwareVmDetailsOutput) ToVmwareVmDetailsOutputWithContext(ctx context.Context) VmwareVmDetailsOutput {
	return o
}

func (o VmwareVmDetailsOutput) ToVmwareVmDetailsPtrOutput() VmwareVmDetailsPtrOutput {
	return o.ToVmwareVmDetailsPtrOutputWithContext(context.Background())
}

func (o VmwareVmDetailsOutput) ToVmwareVmDetailsPtrOutputWithContext(ctx context.Context) VmwareVmDetailsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VmwareVmDetails) *VmwareVmDetails {
		return &v
	}).(VmwareVmDetailsPtrOutput)
}

// The total size of the storage allocated to the VM in MB.
func (o VmwareVmDetailsOutput) CommittedStorage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmwareVmDetails) *string { return v.CommittedStorage }).(pulumi.StringPtrOutput)
}

// The total size of the storage allocated to the VM in MB.
func (o VmwareVmDetailsOutput) CommittedStorageMb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmwareVmDetails) *string { return v.CommittedStorageMb }).(pulumi.StringPtrOutput)
}

// The number of cpus in the VM.
func (o VmwareVmDetailsOutput) CpuCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VmwareVmDetails) *int { return v.CpuCount }).(pulumi.IntPtrOutput)
}

// The descriptive name of the vCenter's datacenter this VM is contained in.
func (o VmwareVmDetailsOutput) DatacenterDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmwareVmDetails) *string { return v.DatacenterDescription }).(pulumi.StringPtrOutput)
}

// The id of the vCenter's datacenter this VM is contained in.
func (o VmwareVmDetailsOutput) DatacenterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmwareVmDetails) *string { return v.DatacenterId }).(pulumi.StringPtrOutput)
}

// The number of disks the VM has.
func (o VmwareVmDetailsOutput) DiskCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VmwareVmDetails) *int { return v.DiskCount }).(pulumi.IntPtrOutput)
}

// The display name of the VM. Note that this is not necessarily unique.
func (o VmwareVmDetailsOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmwareVmDetails) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The VM's OS. See for example https://vdc-repo.vmware.com/vmwb-repository/dcr-public/da47f910-60ac-438b-8b9b-6122f4d14524/16b7274a-bf8b-4b4c-a05e-746f2aa93c8c/doc/vim.vm.GuestOsDescriptor.GuestOsIdentifier.html for types of strings this might hold.
func (o VmwareVmDetailsOutput) GuestDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmwareVmDetails) *string { return v.GuestDescription }).(pulumi.StringPtrOutput)
}

// The size of the memory of the VM in MB.
func (o VmwareVmDetailsOutput) MemoryMb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VmwareVmDetails) *int { return v.MemoryMb }).(pulumi.IntPtrOutput)
}

// The power state of the VM at the moment list was taken.
func (o VmwareVmDetailsOutput) PowerState() VmwareVmDetailsPowerStatePtrOutput {
	return o.ApplyT(func(v VmwareVmDetails) *VmwareVmDetailsPowerState { return v.PowerState }).(VmwareVmDetailsPowerStatePtrOutput)
}

// The unique identifier of the VM in vCenter.
func (o VmwareVmDetailsOutput) Uuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmwareVmDetails) *string { return v.Uuid }).(pulumi.StringPtrOutput)
}

// The VM's id in the source (note that this is not the MigratingVm's id). This is the moref id of the VM.
func (o VmwareVmDetailsOutput) VmId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmwareVmDetails) *string { return v.VmId }).(pulumi.StringPtrOutput)
}

type VmwareVmDetailsPtrOutput struct{ *pulumi.OutputState }

func (VmwareVmDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VmwareVmDetails)(nil)).Elem()
}

func (o VmwareVmDetailsPtrOutput) ToVmwareVmDetailsPtrOutput() VmwareVmDetailsPtrOutput {
	return o
}

func (o VmwareVmDetailsPtrOutput) ToVmwareVmDetailsPtrOutputWithContext(ctx context.Context) VmwareVmDetailsPtrOutput {
	return o
}

func (o VmwareVmDetailsPtrOutput) Elem() VmwareVmDetailsOutput {
	return o.ApplyT(func(v *VmwareVmDetails) VmwareVmDetails {
		if v != nil {
			return *v
		}
		var ret VmwareVmDetails
		return ret
	}).(VmwareVmDetailsOutput)
}

// The total size of the storage allocated to the VM in MB.
func (o VmwareVmDetailsPtrOutput) CommittedStorage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmwareVmDetails) *string {
		if v == nil {
			return nil
		}
		return v.CommittedStorage
	}).(pulumi.StringPtrOutput)
}

// The total size of the storage allocated to the VM in MB.
func (o VmwareVmDetailsPtrOutput) CommittedStorageMb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmwareVmDetails) *string {
		if v == nil {
			return nil
		}
		return v.CommittedStorageMb
	}).(pulumi.StringPtrOutput)
}

// The number of cpus in the VM.
func (o VmwareVmDetailsPtrOutput) CpuCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VmwareVmDetails) *int {
		if v == nil {
			return nil
		}
		return v.CpuCount
	}).(pulumi.IntPtrOutput)
}

// The descriptive name of the vCenter's datacenter this VM is contained in.
func (o VmwareVmDetailsPtrOutput) DatacenterDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmwareVmDetails) *string {
		if v == nil {
			return nil
		}
		return v.DatacenterDescription
	}).(pulumi.StringPtrOutput)
}

// The id of the vCenter's datacenter this VM is contained in.
func (o VmwareVmDetailsPtrOutput) DatacenterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmwareVmDetails) *string {
		if v == nil {
			return nil
		}
		return v.DatacenterId
	}).(pulumi.StringPtrOutput)
}

// The number of disks the VM has.
func (o VmwareVmDetailsPtrOutput) DiskCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VmwareVmDetails) *int {
		if v == nil {
			return nil
		}
		return v.DiskCount
	}).(pulumi.IntPtrOutput)
}

// The display name of the VM. Note that this is not necessarily unique.
func (o VmwareVmDetailsPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmwareVmDetails) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// The VM's OS. See for example https://vdc-repo.vmware.com/vmwb-repository/dcr-public/da47f910-60ac-438b-8b9b-6122f4d14524/16b7274a-bf8b-4b4c-a05e-746f2aa93c8c/doc/vim.vm.GuestOsDescriptor.GuestOsIdentifier.html for types of strings this might hold.
func (o VmwareVmDetailsPtrOutput) GuestDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmwareVmDetails) *string {
		if v == nil {
			return nil
		}
		return v.GuestDescription
	}).(pulumi.StringPtrOutput)
}

// The size of the memory of the VM in MB.
func (o VmwareVmDetailsPtrOutput) MemoryMb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VmwareVmDetails) *int {
		if v == nil {
			return nil
		}
		return v.MemoryMb
	}).(pulumi.IntPtrOutput)
}

// The power state of the VM at the moment list was taken.
func (o VmwareVmDetailsPtrOutput) PowerState() VmwareVmDetailsPowerStatePtrOutput {
	return o.ApplyT(func(v *VmwareVmDetails) *VmwareVmDetailsPowerState {
		if v == nil {
			return nil
		}
		return v.PowerState
	}).(VmwareVmDetailsPowerStatePtrOutput)
}

// The unique identifier of the VM in vCenter.
func (o VmwareVmDetailsPtrOutput) Uuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmwareVmDetails) *string {
		if v == nil {
			return nil
		}
		return v.Uuid
	}).(pulumi.StringPtrOutput)
}

// The VM's id in the source (note that this is not the MigratingVm's id). This is the moref id of the VM.
func (o VmwareVmDetailsPtrOutput) VmId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmwareVmDetails) *string {
		if v == nil {
			return nil
		}
		return v.VmId
	}).(pulumi.StringPtrOutput)
}

// VmwareVmDetails describes a VM in vCenter.
type VmwareVmDetailsResponse struct {
	// The VM Boot Option.
	BootOption string `pulumi:"bootOption"`
	// The total size of the storage allocated to the VM in MB.
	CommittedStorage string `pulumi:"committedStorage"`
	// The total size of the storage allocated to the VM in MB.
	CommittedStorageMb string `pulumi:"committedStorageMb"`
	// The number of cpus in the VM.
	CpuCount int `pulumi:"cpuCount"`
	// The descriptive name of the vCenter's datacenter this VM is contained in.
	DatacenterDescription string `pulumi:"datacenterDescription"`
	// The id of the vCenter's datacenter this VM is contained in.
	DatacenterId string `pulumi:"datacenterId"`
	// The number of disks the VM has.
	DiskCount int `pulumi:"diskCount"`
	// The display name of the VM. Note that this is not necessarily unique.
	DisplayName string `pulumi:"displayName"`
	// The VM's OS. See for example https://vdc-repo.vmware.com/vmwb-repository/dcr-public/da47f910-60ac-438b-8b9b-6122f4d14524/16b7274a-bf8b-4b4c-a05e-746f2aa93c8c/doc/vim.vm.GuestOsDescriptor.GuestOsIdentifier.html for types of strings this might hold.
	GuestDescription string `pulumi:"guestDescription"`
	// The size of the memory of the VM in MB.
	MemoryMb int `pulumi:"memoryMb"`
	// The power state of the VM at the moment list was taken.
	PowerState string `pulumi:"powerState"`
	// The unique identifier of the VM in vCenter.
	Uuid string `pulumi:"uuid"`
	// The VM's id in the source (note that this is not the MigratingVm's id). This is the moref id of the VM.
	VmId string `pulumi:"vmId"`
}

// VmwareVmDetails describes a VM in vCenter.
type VmwareVmDetailsResponseOutput struct{ *pulumi.OutputState }

func (VmwareVmDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareVmDetailsResponse)(nil)).Elem()
}

func (o VmwareVmDetailsResponseOutput) ToVmwareVmDetailsResponseOutput() VmwareVmDetailsResponseOutput {
	return o
}

func (o VmwareVmDetailsResponseOutput) ToVmwareVmDetailsResponseOutputWithContext(ctx context.Context) VmwareVmDetailsResponseOutput {
	return o
}

// The VM Boot Option.
func (o VmwareVmDetailsResponseOutput) BootOption() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareVmDetailsResponse) string { return v.BootOption }).(pulumi.StringOutput)
}

// The total size of the storage allocated to the VM in MB.
func (o VmwareVmDetailsResponseOutput) CommittedStorage() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareVmDetailsResponse) string { return v.CommittedStorage }).(pulumi.StringOutput)
}

// The total size of the storage allocated to the VM in MB.
func (o VmwareVmDetailsResponseOutput) CommittedStorageMb() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareVmDetailsResponse) string { return v.CommittedStorageMb }).(pulumi.StringOutput)
}

// The number of cpus in the VM.
func (o VmwareVmDetailsResponseOutput) CpuCount() pulumi.IntOutput {
	return o.ApplyT(func(v VmwareVmDetailsResponse) int { return v.CpuCount }).(pulumi.IntOutput)
}

// The descriptive name of the vCenter's datacenter this VM is contained in.
func (o VmwareVmDetailsResponseOutput) DatacenterDescription() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareVmDetailsResponse) string { return v.DatacenterDescription }).(pulumi.StringOutput)
}

// The id of the vCenter's datacenter this VM is contained in.
func (o VmwareVmDetailsResponseOutput) DatacenterId() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareVmDetailsResponse) string { return v.DatacenterId }).(pulumi.StringOutput)
}

// The number of disks the VM has.
func (o VmwareVmDetailsResponseOutput) DiskCount() pulumi.IntOutput {
	return o.ApplyT(func(v VmwareVmDetailsResponse) int { return v.DiskCount }).(pulumi.IntOutput)
}

// The display name of the VM. Note that this is not necessarily unique.
func (o VmwareVmDetailsResponseOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareVmDetailsResponse) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The VM's OS. See for example https://vdc-repo.vmware.com/vmwb-repository/dcr-public/da47f910-60ac-438b-8b9b-6122f4d14524/16b7274a-bf8b-4b4c-a05e-746f2aa93c8c/doc/vim.vm.GuestOsDescriptor.GuestOsIdentifier.html for types of strings this might hold.
func (o VmwareVmDetailsResponseOutput) GuestDescription() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareVmDetailsResponse) string { return v.GuestDescription }).(pulumi.StringOutput)
}

// The size of the memory of the VM in MB.
func (o VmwareVmDetailsResponseOutput) MemoryMb() pulumi.IntOutput {
	return o.ApplyT(func(v VmwareVmDetailsResponse) int { return v.MemoryMb }).(pulumi.IntOutput)
}

// The power state of the VM at the moment list was taken.
func (o VmwareVmDetailsResponseOutput) PowerState() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareVmDetailsResponse) string { return v.PowerState }).(pulumi.StringOutput)
}

// The unique identifier of the VM in vCenter.
func (o VmwareVmDetailsResponseOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareVmDetailsResponse) string { return v.Uuid }).(pulumi.StringOutput)
}

// The VM's id in the source (note that this is not the MigratingVm's id). This is the moref id of the VM.
func (o VmwareVmDetailsResponseOutput) VmId() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareVmDetailsResponse) string { return v.VmId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeEngineTargetDefaultsInput)(nil)).Elem(), ComputeEngineTargetDefaultsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeEngineTargetDefaultsPtrInput)(nil)).Elem(), ComputeEngineTargetDefaultsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeSchedulingInput)(nil)).Elem(), ComputeSchedulingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeSchedulingPtrInput)(nil)).Elem(), ComputeSchedulingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkInterfaceInput)(nil)).Elem(), NetworkInterfaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkInterfaceArrayInput)(nil)).Elem(), NetworkInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchedulePolicyInput)(nil)).Elem(), SchedulePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchedulePolicyPtrInput)(nil)).Elem(), SchedulePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchedulingNodeAffinityInput)(nil)).Elem(), SchedulingNodeAffinityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchedulingNodeAffinityArrayInput)(nil)).Elem(), SchedulingNodeAffinityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TargetVMDetailsInput)(nil)).Elem(), TargetVMDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TargetVMDetailsPtrInput)(nil)).Elem(), TargetVMDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmUtilizationInfoInput)(nil)).Elem(), VmUtilizationInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmUtilizationInfoArrayInput)(nil)).Elem(), VmUtilizationInfoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmUtilizationMetricsInput)(nil)).Elem(), VmUtilizationMetricsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmUtilizationMetricsPtrInput)(nil)).Elem(), VmUtilizationMetricsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareSourceDetailsInput)(nil)).Elem(), VmwareSourceDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareSourceDetailsPtrInput)(nil)).Elem(), VmwareSourceDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareVmDetailsInput)(nil)).Elem(), VmwareVmDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareVmDetailsPtrInput)(nil)).Elem(), VmwareVmDetailsArgs{})
	pulumi.RegisterOutputType(ApplianceVersionResponseOutput{})
	pulumi.RegisterOutputType(AppliedLicenseResponseOutput{})
	pulumi.RegisterOutputType(AvailableUpdatesResponseOutput{})
	pulumi.RegisterOutputType(CloneJobResponseOutput{})
	pulumi.RegisterOutputType(CloneJobResponseArrayOutput{})
	pulumi.RegisterOutputType(ComputeEngineTargetDefaultsOutput{})
	pulumi.RegisterOutputType(ComputeEngineTargetDefaultsPtrOutput{})
	pulumi.RegisterOutputType(ComputeEngineTargetDefaultsResponseOutput{})
	pulumi.RegisterOutputType(ComputeEngineTargetDetailsResponseOutput{})
	pulumi.RegisterOutputType(ComputeSchedulingOutput{})
	pulumi.RegisterOutputType(ComputeSchedulingPtrOutput{})
	pulumi.RegisterOutputType(ComputeSchedulingResponseOutput{})
	pulumi.RegisterOutputType(CutoverJobResponseOutput{})
	pulumi.RegisterOutputType(CutoverJobResponseArrayOutput{})
	pulumi.RegisterOutputType(NetworkInterfaceOutput{})
	pulumi.RegisterOutputType(NetworkInterfaceArrayOutput{})
	pulumi.RegisterOutputType(NetworkInterfaceResponseOutput{})
	pulumi.RegisterOutputType(NetworkInterfaceResponseArrayOutput{})
	pulumi.RegisterOutputType(ReplicationCycleResponseOutput{})
	pulumi.RegisterOutputType(ReplicationSyncResponseOutput{})
	pulumi.RegisterOutputType(SchedulePolicyOutput{})
	pulumi.RegisterOutputType(SchedulePolicyPtrOutput{})
	pulumi.RegisterOutputType(SchedulePolicyResponseOutput{})
	pulumi.RegisterOutputType(SchedulingNodeAffinityOutput{})
	pulumi.RegisterOutputType(SchedulingNodeAffinityArrayOutput{})
	pulumi.RegisterOutputType(SchedulingNodeAffinityResponseOutput{})
	pulumi.RegisterOutputType(SchedulingNodeAffinityResponseArrayOutput{})
	pulumi.RegisterOutputType(StatusResponseOutput{})
	pulumi.RegisterOutputType(TargetVMDetailsOutput{})
	pulumi.RegisterOutputType(TargetVMDetailsPtrOutput{})
	pulumi.RegisterOutputType(TargetVMDetailsResponseOutput{})
	pulumi.RegisterOutputType(UpgradeStatusResponseOutput{})
	pulumi.RegisterOutputType(VmUtilizationInfoOutput{})
	pulumi.RegisterOutputType(VmUtilizationInfoArrayOutput{})
	pulumi.RegisterOutputType(VmUtilizationInfoResponseOutput{})
	pulumi.RegisterOutputType(VmUtilizationInfoResponseArrayOutput{})
	pulumi.RegisterOutputType(VmUtilizationMetricsOutput{})
	pulumi.RegisterOutputType(VmUtilizationMetricsPtrOutput{})
	pulumi.RegisterOutputType(VmUtilizationMetricsResponseOutput{})
	pulumi.RegisterOutputType(VmwareSourceDetailsOutput{})
	pulumi.RegisterOutputType(VmwareSourceDetailsPtrOutput{})
	pulumi.RegisterOutputType(VmwareSourceDetailsResponseOutput{})
	pulumi.RegisterOutputType(VmwareVmDetailsOutput{})
	pulumi.RegisterOutputType(VmwareVmDetailsPtrOutput{})
	pulumi.RegisterOutputType(VmwareVmDetailsResponseOutput{})
}
