// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets a single Utilization Report.
func LookupUtilizationReport(ctx *pulumi.Context, args *LookupUtilizationReportArgs, opts ...pulumi.InvokeOption) (*LookupUtilizationReportResult, error) {
	var rv LookupUtilizationReportResult
	err := ctx.Invoke("google-native:vmmigration/v1alpha1:getUtilizationReport", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupUtilizationReportArgs struct {
	Location            string  `pulumi:"location"`
	Project             *string `pulumi:"project"`
	SourceId            string  `pulumi:"sourceId"`
	UtilizationReportId string  `pulumi:"utilizationReportId"`
	View                *string `pulumi:"view"`
}

type LookupUtilizationReportResult struct {
	// The time the report was created (this refers to the time of the request, not the time the report creation completed).
	CreateTime string `pulumi:"createTime"`
	// The report display name, as assigned by the user.
	DisplayName string `pulumi:"displayName"`
	// Provides details on the state of the report in case of an error.
	Error StatusResponse `pulumi:"error"`
	// The point in time when the time frame ends. Notice that the time frame is counted backwards. For instance if the "frame_end_time" value is 2021/01/20 and the time frame is WEEK then the report covers the week between 2021/01/20 and 2021/01/14.
	FrameEndTime string `pulumi:"frameEndTime"`
	// The report unique name.
	Name string `pulumi:"name"`
	// Current state of the report.
	State string `pulumi:"state"`
	// The time the state was last set.
	StateTime string `pulumi:"stateTime"`
	// Time frame of the report.
	TimeFrame string `pulumi:"timeFrame"`
	// Total number of VMs included in the report.
	VmCount int `pulumi:"vmCount"`
	// List of utilization information per VM. When sent as part of the request, the "vm_id" field is used in order to specify which VMs to include in the report. In that case all other fields are ignored.
	Vms []VmUtilizationInfoResponse `pulumi:"vms"`
	// Total number of VMs included in the report.
	VmsCount int `pulumi:"vmsCount"`
}

func LookupUtilizationReportOutput(ctx *pulumi.Context, args LookupUtilizationReportOutputArgs, opts ...pulumi.InvokeOption) LookupUtilizationReportResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupUtilizationReportResult, error) {
			args := v.(LookupUtilizationReportArgs)
			r, err := LookupUtilizationReport(ctx, &args, opts...)
			var s LookupUtilizationReportResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupUtilizationReportResultOutput)
}

type LookupUtilizationReportOutputArgs struct {
	Location            pulumi.StringInput    `pulumi:"location"`
	Project             pulumi.StringPtrInput `pulumi:"project"`
	SourceId            pulumi.StringInput    `pulumi:"sourceId"`
	UtilizationReportId pulumi.StringInput    `pulumi:"utilizationReportId"`
	View                pulumi.StringPtrInput `pulumi:"view"`
}

func (LookupUtilizationReportOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUtilizationReportArgs)(nil)).Elem()
}

type LookupUtilizationReportResultOutput struct{ *pulumi.OutputState }

func (LookupUtilizationReportResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUtilizationReportResult)(nil)).Elem()
}

func (o LookupUtilizationReportResultOutput) ToLookupUtilizationReportResultOutput() LookupUtilizationReportResultOutput {
	return o
}

func (o LookupUtilizationReportResultOutput) ToLookupUtilizationReportResultOutputWithContext(ctx context.Context) LookupUtilizationReportResultOutput {
	return o
}

// The time the report was created (this refers to the time of the request, not the time the report creation completed).
func (o LookupUtilizationReportResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUtilizationReportResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The report display name, as assigned by the user.
func (o LookupUtilizationReportResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUtilizationReportResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Provides details on the state of the report in case of an error.
func (o LookupUtilizationReportResultOutput) Error() StatusResponseOutput {
	return o.ApplyT(func(v LookupUtilizationReportResult) StatusResponse { return v.Error }).(StatusResponseOutput)
}

// The point in time when the time frame ends. Notice that the time frame is counted backwards. For instance if the "frame_end_time" value is 2021/01/20 and the time frame is WEEK then the report covers the week between 2021/01/20 and 2021/01/14.
func (o LookupUtilizationReportResultOutput) FrameEndTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUtilizationReportResult) string { return v.FrameEndTime }).(pulumi.StringOutput)
}

// The report unique name.
func (o LookupUtilizationReportResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUtilizationReportResult) string { return v.Name }).(pulumi.StringOutput)
}

// Current state of the report.
func (o LookupUtilizationReportResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUtilizationReportResult) string { return v.State }).(pulumi.StringOutput)
}

// The time the state was last set.
func (o LookupUtilizationReportResultOutput) StateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUtilizationReportResult) string { return v.StateTime }).(pulumi.StringOutput)
}

// Time frame of the report.
func (o LookupUtilizationReportResultOutput) TimeFrame() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUtilizationReportResult) string { return v.TimeFrame }).(pulumi.StringOutput)
}

// Total number of VMs included in the report.
func (o LookupUtilizationReportResultOutput) VmCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupUtilizationReportResult) int { return v.VmCount }).(pulumi.IntOutput)
}

// List of utilization information per VM. When sent as part of the request, the "vm_id" field is used in order to specify which VMs to include in the report. In that case all other fields are ignored.
func (o LookupUtilizationReportResultOutput) Vms() VmUtilizationInfoResponseArrayOutput {
	return o.ApplyT(func(v LookupUtilizationReportResult) []VmUtilizationInfoResponse { return v.Vms }).(VmUtilizationInfoResponseArrayOutput)
}

// Total number of VMs included in the report.
func (o LookupUtilizationReportResultOutput) VmsCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupUtilizationReportResult) int { return v.VmsCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupUtilizationReportResultOutput{})
}
