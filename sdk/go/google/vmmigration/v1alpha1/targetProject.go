// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new TargetProject in a given project. NOTE: TargetProject is a global resource; hence the only supported value for location is `global`.
// Auto-naming is currently not supported for this resource.
type TargetProject struct {
	pulumi.CustomResourceState

	// The time this target project resource was created (not related to when the Compute Engine project it points to was created).
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The target project's description.
	Description pulumi.StringOutput `pulumi:"description"`
	// The name of the target project.
	Name pulumi.StringOutput `pulumi:"name"`
	// The target project ID (number) or project name.
	Project pulumi.StringOutput `pulumi:"project"`
	// The last time the target project resource was updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewTargetProject registers a new resource with the given unique name, arguments, and options.
func NewTargetProject(ctx *pulumi.Context,
	name string, args *TargetProjectArgs, opts ...pulumi.ResourceOption) (*TargetProject, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TargetProjectId == nil {
		return nil, errors.New("invalid value for required argument 'TargetProjectId'")
	}
	var resource TargetProject
	err := ctx.RegisterResource("google-native:vmmigration/v1alpha1:TargetProject", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTargetProject gets an existing TargetProject resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTargetProject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TargetProjectState, opts ...pulumi.ResourceOption) (*TargetProject, error) {
	var resource TargetProject
	err := ctx.ReadResource("google-native:vmmigration/v1alpha1:TargetProject", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TargetProject resources.
type targetProjectState struct {
}

type TargetProjectState struct {
}

func (TargetProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*targetProjectState)(nil)).Elem()
}

type targetProjectArgs struct {
	// The target project's description.
	Description *string `pulumi:"description"`
	Location    *string `pulumi:"location"`
	// The target project ID (number) or project name.
	Project *string `pulumi:"project"`
	// A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and t he request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId *string `pulumi:"requestId"`
	// Required. The target_project identifier.
	TargetProjectId string `pulumi:"targetProjectId"`
}

// The set of arguments for constructing a TargetProject resource.
type TargetProjectArgs struct {
	// The target project's description.
	Description pulumi.StringPtrInput
	Location    pulumi.StringPtrInput
	// The target project ID (number) or project name.
	Project pulumi.StringPtrInput
	// A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and t he request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrInput
	// Required. The target_project identifier.
	TargetProjectId pulumi.StringInput
}

func (TargetProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*targetProjectArgs)(nil)).Elem()
}

type TargetProjectInput interface {
	pulumi.Input

	ToTargetProjectOutput() TargetProjectOutput
	ToTargetProjectOutputWithContext(ctx context.Context) TargetProjectOutput
}

func (*TargetProject) ElementType() reflect.Type {
	return reflect.TypeOf((**TargetProject)(nil)).Elem()
}

func (i *TargetProject) ToTargetProjectOutput() TargetProjectOutput {
	return i.ToTargetProjectOutputWithContext(context.Background())
}

func (i *TargetProject) ToTargetProjectOutputWithContext(ctx context.Context) TargetProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetProjectOutput)
}

type TargetProjectOutput struct{ *pulumi.OutputState }

func (TargetProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TargetProject)(nil)).Elem()
}

func (o TargetProjectOutput) ToTargetProjectOutput() TargetProjectOutput {
	return o
}

func (o TargetProjectOutput) ToTargetProjectOutputWithContext(ctx context.Context) TargetProjectOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TargetProjectInput)(nil)).Elem(), &TargetProject{})
	pulumi.RegisterOutputType(TargetProjectOutput{})
}
