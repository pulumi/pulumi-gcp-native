// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Initiates a Clone of a specific migrating VM.
// Auto-naming is currently not supported for this resource.
// Note - this resource's API doesn't support deletion. When deleted, the resource will persist
// on Google Cloud even though it will be deleted from Pulumi state.
type CloneJob struct {
	pulumi.CustomResourceState

	// Required. The clone job identifier.
	CloneJobId pulumi.StringOutput `pulumi:"cloneJobId"`
	// Details of the target VM in Compute Engine.
	ComputeEngineTargetDetails ComputeEngineTargetDetailsResponseOutput `pulumi:"computeEngineTargetDetails"`
	// Details of the VM in Compute Engine. Deprecated: Use compute_engine_target_details instead.
	//
	// Deprecated: Output only. Details of the VM in Compute Engine. Deprecated: Use compute_engine_target_details instead.
	ComputeEngineVmDetails TargetVMDetailsResponseOutput `pulumi:"computeEngineVmDetails"`
	// The time the clone job was created (as an API call, not when it was actually created in the target).
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The time the clone job was ended.
	EndTime pulumi.StringOutput `pulumi:"endTime"`
	// Provides details for the errors that led to the Clone Job's state.
	Error         StatusResponseOutput `pulumi:"error"`
	Location      pulumi.StringOutput  `pulumi:"location"`
	MigratingVmId pulumi.StringOutput  `pulumi:"migratingVmId"`
	// The name of the clone.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrOutput `pulumi:"requestId"`
	SourceId  pulumi.StringOutput    `pulumi:"sourceId"`
	// State of the clone job.
	State pulumi.StringOutput `pulumi:"state"`
	// The time the state was last updated.
	StateTime pulumi.StringOutput `pulumi:"stateTime"`
	// The clone steps list representing its progress.
	Steps CloneStepResponseArrayOutput `pulumi:"steps"`
	// Details of the VM to create as the target of this clone job. Deprecated: Use compute_engine_target_details instead.
	//
	// Deprecated: Output only. Details of the VM to create as the target of this clone job. Deprecated: Use compute_engine_target_details instead.
	TargetDetails TargetVMDetailsResponseOutput `pulumi:"targetDetails"`
}

// NewCloneJob registers a new resource with the given unique name, arguments, and options.
func NewCloneJob(ctx *pulumi.Context,
	name string, args *CloneJobArgs, opts ...pulumi.ResourceOption) (*CloneJob, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CloneJobId == nil {
		return nil, errors.New("invalid value for required argument 'CloneJobId'")
	}
	if args.MigratingVmId == nil {
		return nil, errors.New("invalid value for required argument 'MigratingVmId'")
	}
	if args.SourceId == nil {
		return nil, errors.New("invalid value for required argument 'SourceId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"cloneJobId",
		"location",
		"migratingVmId",
		"project",
		"sourceId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CloneJob
	err := ctx.RegisterResource("google-native:vmmigration/v1alpha1:CloneJob", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCloneJob gets an existing CloneJob resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCloneJob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CloneJobState, opts ...pulumi.ResourceOption) (*CloneJob, error) {
	var resource CloneJob
	err := ctx.ReadResource("google-native:vmmigration/v1alpha1:CloneJob", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CloneJob resources.
type cloneJobState struct {
}

type CloneJobState struct {
}

func (CloneJobState) ElementType() reflect.Type {
	return reflect.TypeOf((*cloneJobState)(nil)).Elem()
}

type cloneJobArgs struct {
	// Required. The clone job identifier.
	CloneJobId    string  `pulumi:"cloneJobId"`
	Location      *string `pulumi:"location"`
	MigratingVmId string  `pulumi:"migratingVmId"`
	Project       *string `pulumi:"project"`
	// A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId *string `pulumi:"requestId"`
	SourceId  string  `pulumi:"sourceId"`
}

// The set of arguments for constructing a CloneJob resource.
type CloneJobArgs struct {
	// Required. The clone job identifier.
	CloneJobId    pulumi.StringInput
	Location      pulumi.StringPtrInput
	MigratingVmId pulumi.StringInput
	Project       pulumi.StringPtrInput
	// A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrInput
	SourceId  pulumi.StringInput
}

func (CloneJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cloneJobArgs)(nil)).Elem()
}

type CloneJobInput interface {
	pulumi.Input

	ToCloneJobOutput() CloneJobOutput
	ToCloneJobOutputWithContext(ctx context.Context) CloneJobOutput
}

func (*CloneJob) ElementType() reflect.Type {
	return reflect.TypeOf((**CloneJob)(nil)).Elem()
}

func (i *CloneJob) ToCloneJobOutput() CloneJobOutput {
	return i.ToCloneJobOutputWithContext(context.Background())
}

func (i *CloneJob) ToCloneJobOutputWithContext(ctx context.Context) CloneJobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloneJobOutput)
}

type CloneJobOutput struct{ *pulumi.OutputState }

func (CloneJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloneJob)(nil)).Elem()
}

func (o CloneJobOutput) ToCloneJobOutput() CloneJobOutput {
	return o
}

func (o CloneJobOutput) ToCloneJobOutputWithContext(ctx context.Context) CloneJobOutput {
	return o
}

// Required. The clone job identifier.
func (o CloneJobOutput) CloneJobId() pulumi.StringOutput {
	return o.ApplyT(func(v *CloneJob) pulumi.StringOutput { return v.CloneJobId }).(pulumi.StringOutput)
}

// Details of the target VM in Compute Engine.
func (o CloneJobOutput) ComputeEngineTargetDetails() ComputeEngineTargetDetailsResponseOutput {
	return o.ApplyT(func(v *CloneJob) ComputeEngineTargetDetailsResponseOutput { return v.ComputeEngineTargetDetails }).(ComputeEngineTargetDetailsResponseOutput)
}

// Details of the VM in Compute Engine. Deprecated: Use compute_engine_target_details instead.
//
// Deprecated: Output only. Details of the VM in Compute Engine. Deprecated: Use compute_engine_target_details instead.
func (o CloneJobOutput) ComputeEngineVmDetails() TargetVMDetailsResponseOutput {
	return o.ApplyT(func(v *CloneJob) TargetVMDetailsResponseOutput { return v.ComputeEngineVmDetails }).(TargetVMDetailsResponseOutput)
}

// The time the clone job was created (as an API call, not when it was actually created in the target).
func (o CloneJobOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *CloneJob) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The time the clone job was ended.
func (o CloneJobOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v *CloneJob) pulumi.StringOutput { return v.EndTime }).(pulumi.StringOutput)
}

// Provides details for the errors that led to the Clone Job's state.
func (o CloneJobOutput) Error() StatusResponseOutput {
	return o.ApplyT(func(v *CloneJob) StatusResponseOutput { return v.Error }).(StatusResponseOutput)
}

func (o CloneJobOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *CloneJob) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o CloneJobOutput) MigratingVmId() pulumi.StringOutput {
	return o.ApplyT(func(v *CloneJob) pulumi.StringOutput { return v.MigratingVmId }).(pulumi.StringOutput)
}

// The name of the clone.
func (o CloneJobOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CloneJob) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o CloneJobOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *CloneJob) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
func (o CloneJobOutput) RequestId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloneJob) pulumi.StringPtrOutput { return v.RequestId }).(pulumi.StringPtrOutput)
}

func (o CloneJobOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *CloneJob) pulumi.StringOutput { return v.SourceId }).(pulumi.StringOutput)
}

// State of the clone job.
func (o CloneJobOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *CloneJob) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The time the state was last updated.
func (o CloneJobOutput) StateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *CloneJob) pulumi.StringOutput { return v.StateTime }).(pulumi.StringOutput)
}

// The clone steps list representing its progress.
func (o CloneJobOutput) Steps() CloneStepResponseArrayOutput {
	return o.ApplyT(func(v *CloneJob) CloneStepResponseArrayOutput { return v.Steps }).(CloneStepResponseArrayOutput)
}

// Details of the VM to create as the target of this clone job. Deprecated: Use compute_engine_target_details instead.
//
// Deprecated: Output only. Details of the VM to create as the target of this clone job. Deprecated: Use compute_engine_target_details instead.
func (o CloneJobOutput) TargetDetails() TargetVMDetailsResponseOutput {
	return o.ApplyT(func(v *CloneJob) TargetVMDetailsResponseOutput { return v.TargetDetails }).(TargetVMDetailsResponseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CloneJobInput)(nil)).Elem(), &CloneJob{})
	pulumi.RegisterOutputType(CloneJobOutput{})
}
