// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets details of a single Group.
func LookupGroup(ctx *pulumi.Context, args *LookupGroupArgs, opts ...pulumi.InvokeOption) (*LookupGroupResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupGroupResult
	err := ctx.Invoke("google-native:vmmigration/v1:getGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupGroupArgs struct {
	GroupId  string  `pulumi:"groupId"`
	Location string  `pulumi:"location"`
	Project  *string `pulumi:"project"`
}

type LookupGroupResult struct {
	// The create time timestamp.
	CreateTime string `pulumi:"createTime"`
	// User-provided description of the group.
	Description string `pulumi:"description"`
	// Display name is a user defined name for this group which can be updated.
	DisplayName string `pulumi:"displayName"`
	// Immutable. The target type of this group.
	MigrationTargetType string `pulumi:"migrationTargetType"`
	// The Group name.
	Name string `pulumi:"name"`
	// The update time timestamp.
	UpdateTime string `pulumi:"updateTime"`
}

func LookupGroupOutput(ctx *pulumi.Context, args LookupGroupOutputArgs, opts ...pulumi.InvokeOption) LookupGroupResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupGroupResult, error) {
			args := v.(LookupGroupArgs)
			r, err := LookupGroup(ctx, &args, opts...)
			var s LookupGroupResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupGroupResultOutput)
}

type LookupGroupOutputArgs struct {
	GroupId  pulumi.StringInput    `pulumi:"groupId"`
	Location pulumi.StringInput    `pulumi:"location"`
	Project  pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupGroupOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGroupArgs)(nil)).Elem()
}

type LookupGroupResultOutput struct{ *pulumi.OutputState }

func (LookupGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGroupResult)(nil)).Elem()
}

func (o LookupGroupResultOutput) ToLookupGroupResultOutput() LookupGroupResultOutput {
	return o
}

func (o LookupGroupResultOutput) ToLookupGroupResultOutputWithContext(ctx context.Context) LookupGroupResultOutput {
	return o
}

// The create time timestamp.
func (o LookupGroupResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGroupResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// User-provided description of the group.
func (o LookupGroupResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGroupResult) string { return v.Description }).(pulumi.StringOutput)
}

// Display name is a user defined name for this group which can be updated.
func (o LookupGroupResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGroupResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Immutable. The target type of this group.
func (o LookupGroupResultOutput) MigrationTargetType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGroupResult) string { return v.MigrationTargetType }).(pulumi.StringOutput)
}

// The Group name.
func (o LookupGroupResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGroupResult) string { return v.Name }).(pulumi.StringOutput)
}

// The update time timestamp.
func (o LookupGroupResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGroupResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupGroupResultOutput{})
}
