// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// Message describing AWS Credentials using access key id and secret.
type AccessKeyCredentials struct {
	// AWS access key ID.
	AccessKeyId *string `pulumi:"accessKeyId"`
	// Input only. AWS secret access key.
	SecretAccessKey *string `pulumi:"secretAccessKey"`
	// Input only. AWS session token. Used only when AWS security token service (STS) is responsible for creating the temporary credentials.
	SessionToken *string `pulumi:"sessionToken"`
}

// AccessKeyCredentialsInput is an input type that accepts AccessKeyCredentialsArgs and AccessKeyCredentialsOutput values.
// You can construct a concrete instance of `AccessKeyCredentialsInput` via:
//
//	AccessKeyCredentialsArgs{...}
type AccessKeyCredentialsInput interface {
	pulumi.Input

	ToAccessKeyCredentialsOutput() AccessKeyCredentialsOutput
	ToAccessKeyCredentialsOutputWithContext(context.Context) AccessKeyCredentialsOutput
}

// Message describing AWS Credentials using access key id and secret.
type AccessKeyCredentialsArgs struct {
	// AWS access key ID.
	AccessKeyId pulumi.StringPtrInput `pulumi:"accessKeyId"`
	// Input only. AWS secret access key.
	SecretAccessKey pulumi.StringPtrInput `pulumi:"secretAccessKey"`
	// Input only. AWS session token. Used only when AWS security token service (STS) is responsible for creating the temporary credentials.
	SessionToken pulumi.StringPtrInput `pulumi:"sessionToken"`
}

func (AccessKeyCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessKeyCredentials)(nil)).Elem()
}

func (i AccessKeyCredentialsArgs) ToAccessKeyCredentialsOutput() AccessKeyCredentialsOutput {
	return i.ToAccessKeyCredentialsOutputWithContext(context.Background())
}

func (i AccessKeyCredentialsArgs) ToAccessKeyCredentialsOutputWithContext(ctx context.Context) AccessKeyCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessKeyCredentialsOutput)
}

func (i AccessKeyCredentialsArgs) ToAccessKeyCredentialsPtrOutput() AccessKeyCredentialsPtrOutput {
	return i.ToAccessKeyCredentialsPtrOutputWithContext(context.Background())
}

func (i AccessKeyCredentialsArgs) ToAccessKeyCredentialsPtrOutputWithContext(ctx context.Context) AccessKeyCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessKeyCredentialsOutput).ToAccessKeyCredentialsPtrOutputWithContext(ctx)
}

// AccessKeyCredentialsPtrInput is an input type that accepts AccessKeyCredentialsArgs, AccessKeyCredentialsPtr and AccessKeyCredentialsPtrOutput values.
// You can construct a concrete instance of `AccessKeyCredentialsPtrInput` via:
//
//	        AccessKeyCredentialsArgs{...}
//
//	or:
//
//	        nil
type AccessKeyCredentialsPtrInput interface {
	pulumi.Input

	ToAccessKeyCredentialsPtrOutput() AccessKeyCredentialsPtrOutput
	ToAccessKeyCredentialsPtrOutputWithContext(context.Context) AccessKeyCredentialsPtrOutput
}

type accessKeyCredentialsPtrType AccessKeyCredentialsArgs

func AccessKeyCredentialsPtr(v *AccessKeyCredentialsArgs) AccessKeyCredentialsPtrInput {
	return (*accessKeyCredentialsPtrType)(v)
}

func (*accessKeyCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessKeyCredentials)(nil)).Elem()
}

func (i *accessKeyCredentialsPtrType) ToAccessKeyCredentialsPtrOutput() AccessKeyCredentialsPtrOutput {
	return i.ToAccessKeyCredentialsPtrOutputWithContext(context.Background())
}

func (i *accessKeyCredentialsPtrType) ToAccessKeyCredentialsPtrOutputWithContext(ctx context.Context) AccessKeyCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessKeyCredentialsPtrOutput)
}

// Message describing AWS Credentials using access key id and secret.
type AccessKeyCredentialsOutput struct{ *pulumi.OutputState }

func (AccessKeyCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessKeyCredentials)(nil)).Elem()
}

func (o AccessKeyCredentialsOutput) ToAccessKeyCredentialsOutput() AccessKeyCredentialsOutput {
	return o
}

func (o AccessKeyCredentialsOutput) ToAccessKeyCredentialsOutputWithContext(ctx context.Context) AccessKeyCredentialsOutput {
	return o
}

func (o AccessKeyCredentialsOutput) ToAccessKeyCredentialsPtrOutput() AccessKeyCredentialsPtrOutput {
	return o.ToAccessKeyCredentialsPtrOutputWithContext(context.Background())
}

func (o AccessKeyCredentialsOutput) ToAccessKeyCredentialsPtrOutputWithContext(ctx context.Context) AccessKeyCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AccessKeyCredentials) *AccessKeyCredentials {
		return &v
	}).(AccessKeyCredentialsPtrOutput)
}

// AWS access key ID.
func (o AccessKeyCredentialsOutput) AccessKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessKeyCredentials) *string { return v.AccessKeyId }).(pulumi.StringPtrOutput)
}

// Input only. AWS secret access key.
func (o AccessKeyCredentialsOutput) SecretAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessKeyCredentials) *string { return v.SecretAccessKey }).(pulumi.StringPtrOutput)
}

// Input only. AWS session token. Used only when AWS security token service (STS) is responsible for creating the temporary credentials.
func (o AccessKeyCredentialsOutput) SessionToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessKeyCredentials) *string { return v.SessionToken }).(pulumi.StringPtrOutput)
}

type AccessKeyCredentialsPtrOutput struct{ *pulumi.OutputState }

func (AccessKeyCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessKeyCredentials)(nil)).Elem()
}

func (o AccessKeyCredentialsPtrOutput) ToAccessKeyCredentialsPtrOutput() AccessKeyCredentialsPtrOutput {
	return o
}

func (o AccessKeyCredentialsPtrOutput) ToAccessKeyCredentialsPtrOutputWithContext(ctx context.Context) AccessKeyCredentialsPtrOutput {
	return o
}

func (o AccessKeyCredentialsPtrOutput) Elem() AccessKeyCredentialsOutput {
	return o.ApplyT(func(v *AccessKeyCredentials) AccessKeyCredentials {
		if v != nil {
			return *v
		}
		var ret AccessKeyCredentials
		return ret
	}).(AccessKeyCredentialsOutput)
}

// AWS access key ID.
func (o AccessKeyCredentialsPtrOutput) AccessKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessKeyCredentials) *string {
		if v == nil {
			return nil
		}
		return v.AccessKeyId
	}).(pulumi.StringPtrOutput)
}

// Input only. AWS secret access key.
func (o AccessKeyCredentialsPtrOutput) SecretAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessKeyCredentials) *string {
		if v == nil {
			return nil
		}
		return v.SecretAccessKey
	}).(pulumi.StringPtrOutput)
}

// Input only. AWS session token. Used only when AWS security token service (STS) is responsible for creating the temporary credentials.
func (o AccessKeyCredentialsPtrOutput) SessionToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessKeyCredentials) *string {
		if v == nil {
			return nil
		}
		return v.SessionToken
	}).(pulumi.StringPtrOutput)
}

// Message describing AWS Credentials using access key id and secret.
type AccessKeyCredentialsResponse struct {
	// AWS access key ID.
	AccessKeyId string `pulumi:"accessKeyId"`
	// Input only. AWS secret access key.
	SecretAccessKey string `pulumi:"secretAccessKey"`
	// Input only. AWS session token. Used only when AWS security token service (STS) is responsible for creating the temporary credentials.
	SessionToken string `pulumi:"sessionToken"`
}

// Message describing AWS Credentials using access key id and secret.
type AccessKeyCredentialsResponseOutput struct{ *pulumi.OutputState }

func (AccessKeyCredentialsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessKeyCredentialsResponse)(nil)).Elem()
}

func (o AccessKeyCredentialsResponseOutput) ToAccessKeyCredentialsResponseOutput() AccessKeyCredentialsResponseOutput {
	return o
}

func (o AccessKeyCredentialsResponseOutput) ToAccessKeyCredentialsResponseOutputWithContext(ctx context.Context) AccessKeyCredentialsResponseOutput {
	return o
}

// AWS access key ID.
func (o AccessKeyCredentialsResponseOutput) AccessKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v AccessKeyCredentialsResponse) string { return v.AccessKeyId }).(pulumi.StringOutput)
}

// Input only. AWS secret access key.
func (o AccessKeyCredentialsResponseOutput) SecretAccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v AccessKeyCredentialsResponse) string { return v.SecretAccessKey }).(pulumi.StringOutput)
}

// Input only. AWS session token. Used only when AWS security token service (STS) is responsible for creating the temporary credentials.
func (o AccessKeyCredentialsResponseOutput) SessionToken() pulumi.StringOutput {
	return o.ApplyT(func(v AccessKeyCredentialsResponse) string { return v.SessionToken }).(pulumi.StringOutput)
}

// AdaptingOSStep contains specific step details.
type AdaptingOSStepResponse struct {
}

// AdaptingOSStep contains specific step details.
type AdaptingOSStepResponseOutput struct{ *pulumi.OutputState }

func (AdaptingOSStepResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AdaptingOSStepResponse)(nil)).Elem()
}

func (o AdaptingOSStepResponseOutput) ToAdaptingOSStepResponseOutput() AdaptingOSStepResponseOutput {
	return o
}

func (o AdaptingOSStepResponseOutput) ToAdaptingOSStepResponseOutputWithContext(ctx context.Context) AdaptingOSStepResponseOutput {
	return o
}

// Describes an appliance version.
type ApplianceVersionResponse struct {
	// Determine whether it's critical to upgrade the appliance to this version.
	Critical bool `pulumi:"critical"`
	// Link to a page that contains the version release notes.
	ReleaseNotesUri string `pulumi:"releaseNotesUri"`
	// A link for downloading the version.
	Uri string `pulumi:"uri"`
	// The appliance version.
	Version string `pulumi:"version"`
}

// Describes an appliance version.
type ApplianceVersionResponseOutput struct{ *pulumi.OutputState }

func (ApplianceVersionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplianceVersionResponse)(nil)).Elem()
}

func (o ApplianceVersionResponseOutput) ToApplianceVersionResponseOutput() ApplianceVersionResponseOutput {
	return o
}

func (o ApplianceVersionResponseOutput) ToApplianceVersionResponseOutputWithContext(ctx context.Context) ApplianceVersionResponseOutput {
	return o
}

// Determine whether it's critical to upgrade the appliance to this version.
func (o ApplianceVersionResponseOutput) Critical() pulumi.BoolOutput {
	return o.ApplyT(func(v ApplianceVersionResponse) bool { return v.Critical }).(pulumi.BoolOutput)
}

// Link to a page that contains the version release notes.
func (o ApplianceVersionResponseOutput) ReleaseNotesUri() pulumi.StringOutput {
	return o.ApplyT(func(v ApplianceVersionResponse) string { return v.ReleaseNotesUri }).(pulumi.StringOutput)
}

// A link for downloading the version.
func (o ApplianceVersionResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v ApplianceVersionResponse) string { return v.Uri }).(pulumi.StringOutput)
}

// The appliance version.
func (o ApplianceVersionResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v ApplianceVersionResponse) string { return v.Version }).(pulumi.StringOutput)
}

// AppliedLicense holds the license data returned by adaptation module report.
type AppliedLicenseResponse struct {
	// The OS license returned from the adaptation module's report.
	OsLicense string `pulumi:"osLicense"`
	// The license type that was used in OS adaptation.
	Type string `pulumi:"type"`
}

// AppliedLicense holds the license data returned by adaptation module report.
type AppliedLicenseResponseOutput struct{ *pulumi.OutputState }

func (AppliedLicenseResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppliedLicenseResponse)(nil)).Elem()
}

func (o AppliedLicenseResponseOutput) ToAppliedLicenseResponseOutput() AppliedLicenseResponseOutput {
	return o
}

func (o AppliedLicenseResponseOutput) ToAppliedLicenseResponseOutputWithContext(ctx context.Context) AppliedLicenseResponseOutput {
	return o
}

// The OS license returned from the adaptation module's report.
func (o AppliedLicenseResponseOutput) OsLicense() pulumi.StringOutput {
	return o.ApplyT(func(v AppliedLicenseResponse) string { return v.OsLicense }).(pulumi.StringOutput)
}

// The license type that was used in OS adaptation.
func (o AppliedLicenseResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AppliedLicenseResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Holds informatiom about the available versions for upgrade.
type AvailableUpdatesResponse struct {
	// The latest version for in place update. The current appliance can be updated to this version using the API or m4c CLI.
	InPlaceUpdate ApplianceVersionResponse `pulumi:"inPlaceUpdate"`
	// The newest deployable version of the appliance. The current appliance can't be updated into this version, and the owner must manually deploy this OVA to a new appliance.
	NewDeployableAppliance ApplianceVersionResponse `pulumi:"newDeployableAppliance"`
}

// Holds informatiom about the available versions for upgrade.
type AvailableUpdatesResponseOutput struct{ *pulumi.OutputState }

func (AvailableUpdatesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AvailableUpdatesResponse)(nil)).Elem()
}

func (o AvailableUpdatesResponseOutput) ToAvailableUpdatesResponseOutput() AvailableUpdatesResponseOutput {
	return o
}

func (o AvailableUpdatesResponseOutput) ToAvailableUpdatesResponseOutputWithContext(ctx context.Context) AvailableUpdatesResponseOutput {
	return o
}

// The latest version for in place update. The current appliance can be updated to this version using the API or m4c CLI.
func (o AvailableUpdatesResponseOutput) InPlaceUpdate() ApplianceVersionResponseOutput {
	return o.ApplyT(func(v AvailableUpdatesResponse) ApplianceVersionResponse { return v.InPlaceUpdate }).(ApplianceVersionResponseOutput)
}

// The newest deployable version of the appliance. The current appliance can't be updated into this version, and the owner must manually deploy this OVA to a new appliance.
func (o AvailableUpdatesResponseOutput) NewDeployableAppliance() ApplianceVersionResponseOutput {
	return o.ApplyT(func(v AvailableUpdatesResponse) ApplianceVersionResponse { return v.NewDeployableAppliance }).(ApplianceVersionResponseOutput)
}

// The details of an AWS instance disk.
type AwsDiskDetailsResponse struct {
	// The ordinal number of the disk.
	DiskNumber int `pulumi:"diskNumber"`
	// Size in GB.
	SizeGb string `pulumi:"sizeGb"`
	// AWS volume ID.
	VolumeId string `pulumi:"volumeId"`
}

// The details of an AWS instance disk.
type AwsDiskDetailsResponseOutput struct{ *pulumi.OutputState }

func (AwsDiskDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AwsDiskDetailsResponse)(nil)).Elem()
}

func (o AwsDiskDetailsResponseOutput) ToAwsDiskDetailsResponseOutput() AwsDiskDetailsResponseOutput {
	return o
}

func (o AwsDiskDetailsResponseOutput) ToAwsDiskDetailsResponseOutputWithContext(ctx context.Context) AwsDiskDetailsResponseOutput {
	return o
}

// The ordinal number of the disk.
func (o AwsDiskDetailsResponseOutput) DiskNumber() pulumi.IntOutput {
	return o.ApplyT(func(v AwsDiskDetailsResponse) int { return v.DiskNumber }).(pulumi.IntOutput)
}

// Size in GB.
func (o AwsDiskDetailsResponseOutput) SizeGb() pulumi.StringOutput {
	return o.ApplyT(func(v AwsDiskDetailsResponse) string { return v.SizeGb }).(pulumi.StringOutput)
}

// AWS volume ID.
func (o AwsDiskDetailsResponseOutput) VolumeId() pulumi.StringOutput {
	return o.ApplyT(func(v AwsDiskDetailsResponse) string { return v.VolumeId }).(pulumi.StringOutput)
}

type AwsDiskDetailsResponseArrayOutput struct{ *pulumi.OutputState }

func (AwsDiskDetailsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AwsDiskDetailsResponse)(nil)).Elem()
}

func (o AwsDiskDetailsResponseArrayOutput) ToAwsDiskDetailsResponseArrayOutput() AwsDiskDetailsResponseArrayOutput {
	return o
}

func (o AwsDiskDetailsResponseArrayOutput) ToAwsDiskDetailsResponseArrayOutputWithContext(ctx context.Context) AwsDiskDetailsResponseArrayOutput {
	return o
}

func (o AwsDiskDetailsResponseArrayOutput) Index(i pulumi.IntInput) AwsDiskDetailsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AwsDiskDetailsResponse {
		return vs[0].([]AwsDiskDetailsResponse)[vs[1].(int)]
	}).(AwsDiskDetailsResponseOutput)
}

// AwsSourceDetails message describes a specific source details for the AWS source type.
type AwsSourceDetails struct {
	// AWS Credentials using access key id and secret.
	AccessKeyCreds *AccessKeyCredentials `pulumi:"accessKeyCreds"`
	// Immutable. The AWS region that the source VMs will be migrated from.
	AwsRegion *string `pulumi:"awsRegion"`
	// AWS security group names to limit the scope of the source inventory.
	InventorySecurityGroupNames []string `pulumi:"inventorySecurityGroupNames"`
	// AWS resource tags to limit the scope of the source inventory.
	InventoryTagList []Tag `pulumi:"inventoryTagList"`
	// User specified tags to add to every M2VM generated resource in AWS. These tags will be set in addition to the default tags that are set as part of the migration process. The tags must not begin with the reserved prefix `m2vm`.
	MigrationResourcesUserTags map[string]string `pulumi:"migrationResourcesUserTags"`
}

// AwsSourceDetailsInput is an input type that accepts AwsSourceDetailsArgs and AwsSourceDetailsOutput values.
// You can construct a concrete instance of `AwsSourceDetailsInput` via:
//
//	AwsSourceDetailsArgs{...}
type AwsSourceDetailsInput interface {
	pulumi.Input

	ToAwsSourceDetailsOutput() AwsSourceDetailsOutput
	ToAwsSourceDetailsOutputWithContext(context.Context) AwsSourceDetailsOutput
}

// AwsSourceDetails message describes a specific source details for the AWS source type.
type AwsSourceDetailsArgs struct {
	// AWS Credentials using access key id and secret.
	AccessKeyCreds AccessKeyCredentialsPtrInput `pulumi:"accessKeyCreds"`
	// Immutable. The AWS region that the source VMs will be migrated from.
	AwsRegion pulumi.StringPtrInput `pulumi:"awsRegion"`
	// AWS security group names to limit the scope of the source inventory.
	InventorySecurityGroupNames pulumi.StringArrayInput `pulumi:"inventorySecurityGroupNames"`
	// AWS resource tags to limit the scope of the source inventory.
	InventoryTagList TagArrayInput `pulumi:"inventoryTagList"`
	// User specified tags to add to every M2VM generated resource in AWS. These tags will be set in addition to the default tags that are set as part of the migration process. The tags must not begin with the reserved prefix `m2vm`.
	MigrationResourcesUserTags pulumi.StringMapInput `pulumi:"migrationResourcesUserTags"`
}

func (AwsSourceDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AwsSourceDetails)(nil)).Elem()
}

func (i AwsSourceDetailsArgs) ToAwsSourceDetailsOutput() AwsSourceDetailsOutput {
	return i.ToAwsSourceDetailsOutputWithContext(context.Background())
}

func (i AwsSourceDetailsArgs) ToAwsSourceDetailsOutputWithContext(ctx context.Context) AwsSourceDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsSourceDetailsOutput)
}

func (i AwsSourceDetailsArgs) ToAwsSourceDetailsPtrOutput() AwsSourceDetailsPtrOutput {
	return i.ToAwsSourceDetailsPtrOutputWithContext(context.Background())
}

func (i AwsSourceDetailsArgs) ToAwsSourceDetailsPtrOutputWithContext(ctx context.Context) AwsSourceDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsSourceDetailsOutput).ToAwsSourceDetailsPtrOutputWithContext(ctx)
}

// AwsSourceDetailsPtrInput is an input type that accepts AwsSourceDetailsArgs, AwsSourceDetailsPtr and AwsSourceDetailsPtrOutput values.
// You can construct a concrete instance of `AwsSourceDetailsPtrInput` via:
//
//	        AwsSourceDetailsArgs{...}
//
//	or:
//
//	        nil
type AwsSourceDetailsPtrInput interface {
	pulumi.Input

	ToAwsSourceDetailsPtrOutput() AwsSourceDetailsPtrOutput
	ToAwsSourceDetailsPtrOutputWithContext(context.Context) AwsSourceDetailsPtrOutput
}

type awsSourceDetailsPtrType AwsSourceDetailsArgs

func AwsSourceDetailsPtr(v *AwsSourceDetailsArgs) AwsSourceDetailsPtrInput {
	return (*awsSourceDetailsPtrType)(v)
}

func (*awsSourceDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsSourceDetails)(nil)).Elem()
}

func (i *awsSourceDetailsPtrType) ToAwsSourceDetailsPtrOutput() AwsSourceDetailsPtrOutput {
	return i.ToAwsSourceDetailsPtrOutputWithContext(context.Background())
}

func (i *awsSourceDetailsPtrType) ToAwsSourceDetailsPtrOutputWithContext(ctx context.Context) AwsSourceDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsSourceDetailsPtrOutput)
}

// AwsSourceDetails message describes a specific source details for the AWS source type.
type AwsSourceDetailsOutput struct{ *pulumi.OutputState }

func (AwsSourceDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AwsSourceDetails)(nil)).Elem()
}

func (o AwsSourceDetailsOutput) ToAwsSourceDetailsOutput() AwsSourceDetailsOutput {
	return o
}

func (o AwsSourceDetailsOutput) ToAwsSourceDetailsOutputWithContext(ctx context.Context) AwsSourceDetailsOutput {
	return o
}

func (o AwsSourceDetailsOutput) ToAwsSourceDetailsPtrOutput() AwsSourceDetailsPtrOutput {
	return o.ToAwsSourceDetailsPtrOutputWithContext(context.Background())
}

func (o AwsSourceDetailsOutput) ToAwsSourceDetailsPtrOutputWithContext(ctx context.Context) AwsSourceDetailsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AwsSourceDetails) *AwsSourceDetails {
		return &v
	}).(AwsSourceDetailsPtrOutput)
}

// AWS Credentials using access key id and secret.
func (o AwsSourceDetailsOutput) AccessKeyCreds() AccessKeyCredentialsPtrOutput {
	return o.ApplyT(func(v AwsSourceDetails) *AccessKeyCredentials { return v.AccessKeyCreds }).(AccessKeyCredentialsPtrOutput)
}

// Immutable. The AWS region that the source VMs will be migrated from.
func (o AwsSourceDetailsOutput) AwsRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AwsSourceDetails) *string { return v.AwsRegion }).(pulumi.StringPtrOutput)
}

// AWS security group names to limit the scope of the source inventory.
func (o AwsSourceDetailsOutput) InventorySecurityGroupNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AwsSourceDetails) []string { return v.InventorySecurityGroupNames }).(pulumi.StringArrayOutput)
}

// AWS resource tags to limit the scope of the source inventory.
func (o AwsSourceDetailsOutput) InventoryTagList() TagArrayOutput {
	return o.ApplyT(func(v AwsSourceDetails) []Tag { return v.InventoryTagList }).(TagArrayOutput)
}

// User specified tags to add to every M2VM generated resource in AWS. These tags will be set in addition to the default tags that are set as part of the migration process. The tags must not begin with the reserved prefix `m2vm`.
func (o AwsSourceDetailsOutput) MigrationResourcesUserTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v AwsSourceDetails) map[string]string { return v.MigrationResourcesUserTags }).(pulumi.StringMapOutput)
}

type AwsSourceDetailsPtrOutput struct{ *pulumi.OutputState }

func (AwsSourceDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsSourceDetails)(nil)).Elem()
}

func (o AwsSourceDetailsPtrOutput) ToAwsSourceDetailsPtrOutput() AwsSourceDetailsPtrOutput {
	return o
}

func (o AwsSourceDetailsPtrOutput) ToAwsSourceDetailsPtrOutputWithContext(ctx context.Context) AwsSourceDetailsPtrOutput {
	return o
}

func (o AwsSourceDetailsPtrOutput) Elem() AwsSourceDetailsOutput {
	return o.ApplyT(func(v *AwsSourceDetails) AwsSourceDetails {
		if v != nil {
			return *v
		}
		var ret AwsSourceDetails
		return ret
	}).(AwsSourceDetailsOutput)
}

// AWS Credentials using access key id and secret.
func (o AwsSourceDetailsPtrOutput) AccessKeyCreds() AccessKeyCredentialsPtrOutput {
	return o.ApplyT(func(v *AwsSourceDetails) *AccessKeyCredentials {
		if v == nil {
			return nil
		}
		return v.AccessKeyCreds
	}).(AccessKeyCredentialsPtrOutput)
}

// Immutable. The AWS region that the source VMs will be migrated from.
func (o AwsSourceDetailsPtrOutput) AwsRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AwsSourceDetails) *string {
		if v == nil {
			return nil
		}
		return v.AwsRegion
	}).(pulumi.StringPtrOutput)
}

// AWS security group names to limit the scope of the source inventory.
func (o AwsSourceDetailsPtrOutput) InventorySecurityGroupNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AwsSourceDetails) []string {
		if v == nil {
			return nil
		}
		return v.InventorySecurityGroupNames
	}).(pulumi.StringArrayOutput)
}

// AWS resource tags to limit the scope of the source inventory.
func (o AwsSourceDetailsPtrOutput) InventoryTagList() TagArrayOutput {
	return o.ApplyT(func(v *AwsSourceDetails) []Tag {
		if v == nil {
			return nil
		}
		return v.InventoryTagList
	}).(TagArrayOutput)
}

// User specified tags to add to every M2VM generated resource in AWS. These tags will be set in addition to the default tags that are set as part of the migration process. The tags must not begin with the reserved prefix `m2vm`.
func (o AwsSourceDetailsPtrOutput) MigrationResourcesUserTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AwsSourceDetails) map[string]string {
		if v == nil {
			return nil
		}
		return v.MigrationResourcesUserTags
	}).(pulumi.StringMapOutput)
}

// AwsSourceDetails message describes a specific source details for the AWS source type.
type AwsSourceDetailsResponse struct {
	// AWS Credentials using access key id and secret.
	AccessKeyCreds AccessKeyCredentialsResponse `pulumi:"accessKeyCreds"`
	// Immutable. The AWS region that the source VMs will be migrated from.
	AwsRegion string `pulumi:"awsRegion"`
	// Provides details on the state of the Source in case of an error.
	Error StatusResponse `pulumi:"error"`
	// AWS security group names to limit the scope of the source inventory.
	InventorySecurityGroupNames []string `pulumi:"inventorySecurityGroupNames"`
	// AWS resource tags to limit the scope of the source inventory.
	InventoryTagList []TagResponse `pulumi:"inventoryTagList"`
	// User specified tags to add to every M2VM generated resource in AWS. These tags will be set in addition to the default tags that are set as part of the migration process. The tags must not begin with the reserved prefix `m2vm`.
	MigrationResourcesUserTags map[string]string `pulumi:"migrationResourcesUserTags"`
	// The source's public IP. All communication initiated by this source will originate from this IP.
	PublicIp string `pulumi:"publicIp"`
	// State of the source as determined by the health check.
	State string `pulumi:"state"`
}

// AwsSourceDetails message describes a specific source details for the AWS source type.
type AwsSourceDetailsResponseOutput struct{ *pulumi.OutputState }

func (AwsSourceDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AwsSourceDetailsResponse)(nil)).Elem()
}

func (o AwsSourceDetailsResponseOutput) ToAwsSourceDetailsResponseOutput() AwsSourceDetailsResponseOutput {
	return o
}

func (o AwsSourceDetailsResponseOutput) ToAwsSourceDetailsResponseOutputWithContext(ctx context.Context) AwsSourceDetailsResponseOutput {
	return o
}

// AWS Credentials using access key id and secret.
func (o AwsSourceDetailsResponseOutput) AccessKeyCreds() AccessKeyCredentialsResponseOutput {
	return o.ApplyT(func(v AwsSourceDetailsResponse) AccessKeyCredentialsResponse { return v.AccessKeyCreds }).(AccessKeyCredentialsResponseOutput)
}

// Immutable. The AWS region that the source VMs will be migrated from.
func (o AwsSourceDetailsResponseOutput) AwsRegion() pulumi.StringOutput {
	return o.ApplyT(func(v AwsSourceDetailsResponse) string { return v.AwsRegion }).(pulumi.StringOutput)
}

// Provides details on the state of the Source in case of an error.
func (o AwsSourceDetailsResponseOutput) Error() StatusResponseOutput {
	return o.ApplyT(func(v AwsSourceDetailsResponse) StatusResponse { return v.Error }).(StatusResponseOutput)
}

// AWS security group names to limit the scope of the source inventory.
func (o AwsSourceDetailsResponseOutput) InventorySecurityGroupNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AwsSourceDetailsResponse) []string { return v.InventorySecurityGroupNames }).(pulumi.StringArrayOutput)
}

// AWS resource tags to limit the scope of the source inventory.
func (o AwsSourceDetailsResponseOutput) InventoryTagList() TagResponseArrayOutput {
	return o.ApplyT(func(v AwsSourceDetailsResponse) []TagResponse { return v.InventoryTagList }).(TagResponseArrayOutput)
}

// User specified tags to add to every M2VM generated resource in AWS. These tags will be set in addition to the default tags that are set as part of the migration process. The tags must not begin with the reserved prefix `m2vm`.
func (o AwsSourceDetailsResponseOutput) MigrationResourcesUserTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v AwsSourceDetailsResponse) map[string]string { return v.MigrationResourcesUserTags }).(pulumi.StringMapOutput)
}

// The source's public IP. All communication initiated by this source will originate from this IP.
func (o AwsSourceDetailsResponseOutput) PublicIp() pulumi.StringOutput {
	return o.ApplyT(func(v AwsSourceDetailsResponse) string { return v.PublicIp }).(pulumi.StringOutput)
}

// State of the source as determined by the health check.
func (o AwsSourceDetailsResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v AwsSourceDetailsResponse) string { return v.State }).(pulumi.StringOutput)
}

// Represent the source AWS VM details.
type AwsSourceVmDetailsResponse struct {
	// The total size of the disks being migrated in bytes.
	CommittedStorageBytes string `pulumi:"committedStorageBytes"`
	// The disks attached to the source VM.
	Disks []AwsDiskDetailsResponse `pulumi:"disks"`
	// The firmware type of the source VM.
	Firmware string `pulumi:"firmware"`
	// Information about VM capabilities needed for some Compute Engine features.
	VmCapabilitiesInfo VmCapabilitiesResponse `pulumi:"vmCapabilitiesInfo"`
}

// Represent the source AWS VM details.
type AwsSourceVmDetailsResponseOutput struct{ *pulumi.OutputState }

func (AwsSourceVmDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AwsSourceVmDetailsResponse)(nil)).Elem()
}

func (o AwsSourceVmDetailsResponseOutput) ToAwsSourceVmDetailsResponseOutput() AwsSourceVmDetailsResponseOutput {
	return o
}

func (o AwsSourceVmDetailsResponseOutput) ToAwsSourceVmDetailsResponseOutputWithContext(ctx context.Context) AwsSourceVmDetailsResponseOutput {
	return o
}

// The total size of the disks being migrated in bytes.
func (o AwsSourceVmDetailsResponseOutput) CommittedStorageBytes() pulumi.StringOutput {
	return o.ApplyT(func(v AwsSourceVmDetailsResponse) string { return v.CommittedStorageBytes }).(pulumi.StringOutput)
}

// The disks attached to the source VM.
func (o AwsSourceVmDetailsResponseOutput) Disks() AwsDiskDetailsResponseArrayOutput {
	return o.ApplyT(func(v AwsSourceVmDetailsResponse) []AwsDiskDetailsResponse { return v.Disks }).(AwsDiskDetailsResponseArrayOutput)
}

// The firmware type of the source VM.
func (o AwsSourceVmDetailsResponseOutput) Firmware() pulumi.StringOutput {
	return o.ApplyT(func(v AwsSourceVmDetailsResponse) string { return v.Firmware }).(pulumi.StringOutput)
}

// Information about VM capabilities needed for some Compute Engine features.
func (o AwsSourceVmDetailsResponseOutput) VmCapabilitiesInfo() VmCapabilitiesResponseOutput {
	return o.ApplyT(func(v AwsSourceVmDetailsResponse) VmCapabilitiesResponse { return v.VmCapabilitiesInfo }).(VmCapabilitiesResponseOutput)
}

// The details of an Azure VM disk.
type AzureDiskDetailsResponse struct {
	// Azure disk ID.
	DiskId string `pulumi:"diskId"`
	// The ordinal number of the disk.
	DiskNumber int `pulumi:"diskNumber"`
	// Size in GB.
	SizeGb string `pulumi:"sizeGb"`
}

// The details of an Azure VM disk.
type AzureDiskDetailsResponseOutput struct{ *pulumi.OutputState }

func (AzureDiskDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDiskDetailsResponse)(nil)).Elem()
}

func (o AzureDiskDetailsResponseOutput) ToAzureDiskDetailsResponseOutput() AzureDiskDetailsResponseOutput {
	return o
}

func (o AzureDiskDetailsResponseOutput) ToAzureDiskDetailsResponseOutputWithContext(ctx context.Context) AzureDiskDetailsResponseOutput {
	return o
}

// Azure disk ID.
func (o AzureDiskDetailsResponseOutput) DiskId() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDiskDetailsResponse) string { return v.DiskId }).(pulumi.StringOutput)
}

// The ordinal number of the disk.
func (o AzureDiskDetailsResponseOutput) DiskNumber() pulumi.IntOutput {
	return o.ApplyT(func(v AzureDiskDetailsResponse) int { return v.DiskNumber }).(pulumi.IntOutput)
}

// Size in GB.
func (o AzureDiskDetailsResponseOutput) SizeGb() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDiskDetailsResponse) string { return v.SizeGb }).(pulumi.StringOutput)
}

type AzureDiskDetailsResponseArrayOutput struct{ *pulumi.OutputState }

func (AzureDiskDetailsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzureDiskDetailsResponse)(nil)).Elem()
}

func (o AzureDiskDetailsResponseArrayOutput) ToAzureDiskDetailsResponseArrayOutput() AzureDiskDetailsResponseArrayOutput {
	return o
}

func (o AzureDiskDetailsResponseArrayOutput) ToAzureDiskDetailsResponseArrayOutputWithContext(ctx context.Context) AzureDiskDetailsResponseArrayOutput {
	return o
}

func (o AzureDiskDetailsResponseArrayOutput) Index(i pulumi.IntInput) AzureDiskDetailsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AzureDiskDetailsResponse {
		return vs[0].([]AzureDiskDetailsResponse)[vs[1].(int)]
	}).(AzureDiskDetailsResponseOutput)
}

// AzureSourceDetails message describes a specific source details for the Azure source type.
type AzureSourceDetails struct {
	// Immutable. The Azure location (region) that the source VMs will be migrated from.
	AzureLocation *string `pulumi:"azureLocation"`
	// Azure Credentials using tenant ID, client ID and secret.
	ClientSecretCreds *ClientSecretCredentials `pulumi:"clientSecretCreds"`
	// User specified tags to add to every M2VM generated resource in Azure. These tags will be set in addition to the default tags that are set as part of the migration process. The tags must not begin with the reserved prefix `m4ce` or `m2vm`.
	MigrationResourcesUserTags map[string]string `pulumi:"migrationResourcesUserTags"`
	// Immutable. Azure subscription ID.
	SubscriptionId *string `pulumi:"subscriptionId"`
}

// AzureSourceDetailsInput is an input type that accepts AzureSourceDetailsArgs and AzureSourceDetailsOutput values.
// You can construct a concrete instance of `AzureSourceDetailsInput` via:
//
//	AzureSourceDetailsArgs{...}
type AzureSourceDetailsInput interface {
	pulumi.Input

	ToAzureSourceDetailsOutput() AzureSourceDetailsOutput
	ToAzureSourceDetailsOutputWithContext(context.Context) AzureSourceDetailsOutput
}

// AzureSourceDetails message describes a specific source details for the Azure source type.
type AzureSourceDetailsArgs struct {
	// Immutable. The Azure location (region) that the source VMs will be migrated from.
	AzureLocation pulumi.StringPtrInput `pulumi:"azureLocation"`
	// Azure Credentials using tenant ID, client ID and secret.
	ClientSecretCreds ClientSecretCredentialsPtrInput `pulumi:"clientSecretCreds"`
	// User specified tags to add to every M2VM generated resource in Azure. These tags will be set in addition to the default tags that are set as part of the migration process. The tags must not begin with the reserved prefix `m4ce` or `m2vm`.
	MigrationResourcesUserTags pulumi.StringMapInput `pulumi:"migrationResourcesUserTags"`
	// Immutable. Azure subscription ID.
	SubscriptionId pulumi.StringPtrInput `pulumi:"subscriptionId"`
}

func (AzureSourceDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSourceDetails)(nil)).Elem()
}

func (i AzureSourceDetailsArgs) ToAzureSourceDetailsOutput() AzureSourceDetailsOutput {
	return i.ToAzureSourceDetailsOutputWithContext(context.Background())
}

func (i AzureSourceDetailsArgs) ToAzureSourceDetailsOutputWithContext(ctx context.Context) AzureSourceDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureSourceDetailsOutput)
}

func (i AzureSourceDetailsArgs) ToAzureSourceDetailsPtrOutput() AzureSourceDetailsPtrOutput {
	return i.ToAzureSourceDetailsPtrOutputWithContext(context.Background())
}

func (i AzureSourceDetailsArgs) ToAzureSourceDetailsPtrOutputWithContext(ctx context.Context) AzureSourceDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureSourceDetailsOutput).ToAzureSourceDetailsPtrOutputWithContext(ctx)
}

// AzureSourceDetailsPtrInput is an input type that accepts AzureSourceDetailsArgs, AzureSourceDetailsPtr and AzureSourceDetailsPtrOutput values.
// You can construct a concrete instance of `AzureSourceDetailsPtrInput` via:
//
//	        AzureSourceDetailsArgs{...}
//
//	or:
//
//	        nil
type AzureSourceDetailsPtrInput interface {
	pulumi.Input

	ToAzureSourceDetailsPtrOutput() AzureSourceDetailsPtrOutput
	ToAzureSourceDetailsPtrOutputWithContext(context.Context) AzureSourceDetailsPtrOutput
}

type azureSourceDetailsPtrType AzureSourceDetailsArgs

func AzureSourceDetailsPtr(v *AzureSourceDetailsArgs) AzureSourceDetailsPtrInput {
	return (*azureSourceDetailsPtrType)(v)
}

func (*azureSourceDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureSourceDetails)(nil)).Elem()
}

func (i *azureSourceDetailsPtrType) ToAzureSourceDetailsPtrOutput() AzureSourceDetailsPtrOutput {
	return i.ToAzureSourceDetailsPtrOutputWithContext(context.Background())
}

func (i *azureSourceDetailsPtrType) ToAzureSourceDetailsPtrOutputWithContext(ctx context.Context) AzureSourceDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureSourceDetailsPtrOutput)
}

// AzureSourceDetails message describes a specific source details for the Azure source type.
type AzureSourceDetailsOutput struct{ *pulumi.OutputState }

func (AzureSourceDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSourceDetails)(nil)).Elem()
}

func (o AzureSourceDetailsOutput) ToAzureSourceDetailsOutput() AzureSourceDetailsOutput {
	return o
}

func (o AzureSourceDetailsOutput) ToAzureSourceDetailsOutputWithContext(ctx context.Context) AzureSourceDetailsOutput {
	return o
}

func (o AzureSourceDetailsOutput) ToAzureSourceDetailsPtrOutput() AzureSourceDetailsPtrOutput {
	return o.ToAzureSourceDetailsPtrOutputWithContext(context.Background())
}

func (o AzureSourceDetailsOutput) ToAzureSourceDetailsPtrOutputWithContext(ctx context.Context) AzureSourceDetailsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AzureSourceDetails) *AzureSourceDetails {
		return &v
	}).(AzureSourceDetailsPtrOutput)
}

// Immutable. The Azure location (region) that the source VMs will be migrated from.
func (o AzureSourceDetailsOutput) AzureLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSourceDetails) *string { return v.AzureLocation }).(pulumi.StringPtrOutput)
}

// Azure Credentials using tenant ID, client ID and secret.
func (o AzureSourceDetailsOutput) ClientSecretCreds() ClientSecretCredentialsPtrOutput {
	return o.ApplyT(func(v AzureSourceDetails) *ClientSecretCredentials { return v.ClientSecretCreds }).(ClientSecretCredentialsPtrOutput)
}

// User specified tags to add to every M2VM generated resource in Azure. These tags will be set in addition to the default tags that are set as part of the migration process. The tags must not begin with the reserved prefix `m4ce` or `m2vm`.
func (o AzureSourceDetailsOutput) MigrationResourcesUserTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v AzureSourceDetails) map[string]string { return v.MigrationResourcesUserTags }).(pulumi.StringMapOutput)
}

// Immutable. Azure subscription ID.
func (o AzureSourceDetailsOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSourceDetails) *string { return v.SubscriptionId }).(pulumi.StringPtrOutput)
}

type AzureSourceDetailsPtrOutput struct{ *pulumi.OutputState }

func (AzureSourceDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureSourceDetails)(nil)).Elem()
}

func (o AzureSourceDetailsPtrOutput) ToAzureSourceDetailsPtrOutput() AzureSourceDetailsPtrOutput {
	return o
}

func (o AzureSourceDetailsPtrOutput) ToAzureSourceDetailsPtrOutputWithContext(ctx context.Context) AzureSourceDetailsPtrOutput {
	return o
}

func (o AzureSourceDetailsPtrOutput) Elem() AzureSourceDetailsOutput {
	return o.ApplyT(func(v *AzureSourceDetails) AzureSourceDetails {
		if v != nil {
			return *v
		}
		var ret AzureSourceDetails
		return ret
	}).(AzureSourceDetailsOutput)
}

// Immutable. The Azure location (region) that the source VMs will be migrated from.
func (o AzureSourceDetailsPtrOutput) AzureLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSourceDetails) *string {
		if v == nil {
			return nil
		}
		return v.AzureLocation
	}).(pulumi.StringPtrOutput)
}

// Azure Credentials using tenant ID, client ID and secret.
func (o AzureSourceDetailsPtrOutput) ClientSecretCreds() ClientSecretCredentialsPtrOutput {
	return o.ApplyT(func(v *AzureSourceDetails) *ClientSecretCredentials {
		if v == nil {
			return nil
		}
		return v.ClientSecretCreds
	}).(ClientSecretCredentialsPtrOutput)
}

// User specified tags to add to every M2VM generated resource in Azure. These tags will be set in addition to the default tags that are set as part of the migration process. The tags must not begin with the reserved prefix `m4ce` or `m2vm`.
func (o AzureSourceDetailsPtrOutput) MigrationResourcesUserTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AzureSourceDetails) map[string]string {
		if v == nil {
			return nil
		}
		return v.MigrationResourcesUserTags
	}).(pulumi.StringMapOutput)
}

// Immutable. Azure subscription ID.
func (o AzureSourceDetailsPtrOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSourceDetails) *string {
		if v == nil {
			return nil
		}
		return v.SubscriptionId
	}).(pulumi.StringPtrOutput)
}

// AzureSourceDetails message describes a specific source details for the Azure source type.
type AzureSourceDetailsResponse struct {
	// Immutable. The Azure location (region) that the source VMs will be migrated from.
	AzureLocation string `pulumi:"azureLocation"`
	// Azure Credentials using tenant ID, client ID and secret.
	ClientSecretCreds ClientSecretCredentialsResponse `pulumi:"clientSecretCreds"`
	// Provides details on the state of the Source in case of an error.
	Error StatusResponse `pulumi:"error"`
	// User specified tags to add to every M2VM generated resource in Azure. These tags will be set in addition to the default tags that are set as part of the migration process. The tags must not begin with the reserved prefix `m4ce` or `m2vm`.
	MigrationResourcesUserTags map[string]string `pulumi:"migrationResourcesUserTags"`
	// The ID of the Azure resource group that contains all resources related to the migration process of this source.
	ResourceGroupId string `pulumi:"resourceGroupId"`
	// State of the source as determined by the health check.
	State string `pulumi:"state"`
	// Immutable. Azure subscription ID.
	SubscriptionId string `pulumi:"subscriptionId"`
}

// AzureSourceDetails message describes a specific source details for the Azure source type.
type AzureSourceDetailsResponseOutput struct{ *pulumi.OutputState }

func (AzureSourceDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSourceDetailsResponse)(nil)).Elem()
}

func (o AzureSourceDetailsResponseOutput) ToAzureSourceDetailsResponseOutput() AzureSourceDetailsResponseOutput {
	return o
}

func (o AzureSourceDetailsResponseOutput) ToAzureSourceDetailsResponseOutputWithContext(ctx context.Context) AzureSourceDetailsResponseOutput {
	return o
}

// Immutable. The Azure location (region) that the source VMs will be migrated from.
func (o AzureSourceDetailsResponseOutput) AzureLocation() pulumi.StringOutput {
	return o.ApplyT(func(v AzureSourceDetailsResponse) string { return v.AzureLocation }).(pulumi.StringOutput)
}

// Azure Credentials using tenant ID, client ID and secret.
func (o AzureSourceDetailsResponseOutput) ClientSecretCreds() ClientSecretCredentialsResponseOutput {
	return o.ApplyT(func(v AzureSourceDetailsResponse) ClientSecretCredentialsResponse { return v.ClientSecretCreds }).(ClientSecretCredentialsResponseOutput)
}

// Provides details on the state of the Source in case of an error.
func (o AzureSourceDetailsResponseOutput) Error() StatusResponseOutput {
	return o.ApplyT(func(v AzureSourceDetailsResponse) StatusResponse { return v.Error }).(StatusResponseOutput)
}

// User specified tags to add to every M2VM generated resource in Azure. These tags will be set in addition to the default tags that are set as part of the migration process. The tags must not begin with the reserved prefix `m4ce` or `m2vm`.
func (o AzureSourceDetailsResponseOutput) MigrationResourcesUserTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v AzureSourceDetailsResponse) map[string]string { return v.MigrationResourcesUserTags }).(pulumi.StringMapOutput)
}

// The ID of the Azure resource group that contains all resources related to the migration process of this source.
func (o AzureSourceDetailsResponseOutput) ResourceGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v AzureSourceDetailsResponse) string { return v.ResourceGroupId }).(pulumi.StringOutput)
}

// State of the source as determined by the health check.
func (o AzureSourceDetailsResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v AzureSourceDetailsResponse) string { return v.State }).(pulumi.StringOutput)
}

// Immutable. Azure subscription ID.
func (o AzureSourceDetailsResponseOutput) SubscriptionId() pulumi.StringOutput {
	return o.ApplyT(func(v AzureSourceDetailsResponse) string { return v.SubscriptionId }).(pulumi.StringOutput)
}

// Represent the source Azure VM details.
type AzureSourceVmDetailsResponse struct {
	// The total size of the disks being migrated in bytes.
	CommittedStorageBytes string `pulumi:"committedStorageBytes"`
	// The disks attached to the source VM.
	Disks []AzureDiskDetailsResponse `pulumi:"disks"`
	// The firmware type of the source VM.
	Firmware string `pulumi:"firmware"`
	// Information about VM capabilities needed for some Compute Engine features.
	VmCapabilitiesInfo VmCapabilitiesResponse `pulumi:"vmCapabilitiesInfo"`
}

// Represent the source Azure VM details.
type AzureSourceVmDetailsResponseOutput struct{ *pulumi.OutputState }

func (AzureSourceVmDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSourceVmDetailsResponse)(nil)).Elem()
}

func (o AzureSourceVmDetailsResponseOutput) ToAzureSourceVmDetailsResponseOutput() AzureSourceVmDetailsResponseOutput {
	return o
}

func (o AzureSourceVmDetailsResponseOutput) ToAzureSourceVmDetailsResponseOutputWithContext(ctx context.Context) AzureSourceVmDetailsResponseOutput {
	return o
}

// The total size of the disks being migrated in bytes.
func (o AzureSourceVmDetailsResponseOutput) CommittedStorageBytes() pulumi.StringOutput {
	return o.ApplyT(func(v AzureSourceVmDetailsResponse) string { return v.CommittedStorageBytes }).(pulumi.StringOutput)
}

// The disks attached to the source VM.
func (o AzureSourceVmDetailsResponseOutput) Disks() AzureDiskDetailsResponseArrayOutput {
	return o.ApplyT(func(v AzureSourceVmDetailsResponse) []AzureDiskDetailsResponse { return v.Disks }).(AzureDiskDetailsResponseArrayOutput)
}

// The firmware type of the source VM.
func (o AzureSourceVmDetailsResponseOutput) Firmware() pulumi.StringOutput {
	return o.ApplyT(func(v AzureSourceVmDetailsResponse) string { return v.Firmware }).(pulumi.StringOutput)
}

// Information about VM capabilities needed for some Compute Engine features.
func (o AzureSourceVmDetailsResponseOutput) VmCapabilitiesInfo() VmCapabilitiesResponseOutput {
	return o.ApplyT(func(v AzureSourceVmDetailsResponse) VmCapabilitiesResponse { return v.VmCapabilitiesInfo }).(VmCapabilitiesResponseOutput)
}

// BootDiskDefaults hold information about the boot disk of a VM.
type BootDiskDefaults struct {
	// Optional. Specifies a unique device name of your choice that is reflected into the /dev/disk/by-id/google-* tree of a Linux operating system running within the instance. If not specified, the server chooses a default device name to apply to this disk, in the form persistent-disk-x, where x is a number assigned by Google Compute Engine. This field is only applicable for persistent disks.
	DeviceName *string `pulumi:"deviceName"`
	// Optional. The name of the disk.
	DiskName *string `pulumi:"diskName"`
	// Optional. The type of disk provisioning to use for the VM.
	DiskType *BootDiskDefaultsDiskType `pulumi:"diskType"`
	// Optional. The encryption to apply to the boot disk.
	Encryption *Encryption `pulumi:"encryption"`
	// The image to use when creating the disk.
	Image *DiskImageDefaults `pulumi:"image"`
}

// BootDiskDefaultsInput is an input type that accepts BootDiskDefaultsArgs and BootDiskDefaultsOutput values.
// You can construct a concrete instance of `BootDiskDefaultsInput` via:
//
//	BootDiskDefaultsArgs{...}
type BootDiskDefaultsInput interface {
	pulumi.Input

	ToBootDiskDefaultsOutput() BootDiskDefaultsOutput
	ToBootDiskDefaultsOutputWithContext(context.Context) BootDiskDefaultsOutput
}

// BootDiskDefaults hold information about the boot disk of a VM.
type BootDiskDefaultsArgs struct {
	// Optional. Specifies a unique device name of your choice that is reflected into the /dev/disk/by-id/google-* tree of a Linux operating system running within the instance. If not specified, the server chooses a default device name to apply to this disk, in the form persistent-disk-x, where x is a number assigned by Google Compute Engine. This field is only applicable for persistent disks.
	DeviceName pulumi.StringPtrInput `pulumi:"deviceName"`
	// Optional. The name of the disk.
	DiskName pulumi.StringPtrInput `pulumi:"diskName"`
	// Optional. The type of disk provisioning to use for the VM.
	DiskType BootDiskDefaultsDiskTypePtrInput `pulumi:"diskType"`
	// Optional. The encryption to apply to the boot disk.
	Encryption EncryptionPtrInput `pulumi:"encryption"`
	// The image to use when creating the disk.
	Image DiskImageDefaultsPtrInput `pulumi:"image"`
}

func (BootDiskDefaultsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BootDiskDefaults)(nil)).Elem()
}

func (i BootDiskDefaultsArgs) ToBootDiskDefaultsOutput() BootDiskDefaultsOutput {
	return i.ToBootDiskDefaultsOutputWithContext(context.Background())
}

func (i BootDiskDefaultsArgs) ToBootDiskDefaultsOutputWithContext(ctx context.Context) BootDiskDefaultsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BootDiskDefaultsOutput)
}

func (i BootDiskDefaultsArgs) ToBootDiskDefaultsPtrOutput() BootDiskDefaultsPtrOutput {
	return i.ToBootDiskDefaultsPtrOutputWithContext(context.Background())
}

func (i BootDiskDefaultsArgs) ToBootDiskDefaultsPtrOutputWithContext(ctx context.Context) BootDiskDefaultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BootDiskDefaultsOutput).ToBootDiskDefaultsPtrOutputWithContext(ctx)
}

// BootDiskDefaultsPtrInput is an input type that accepts BootDiskDefaultsArgs, BootDiskDefaultsPtr and BootDiskDefaultsPtrOutput values.
// You can construct a concrete instance of `BootDiskDefaultsPtrInput` via:
//
//	        BootDiskDefaultsArgs{...}
//
//	or:
//
//	        nil
type BootDiskDefaultsPtrInput interface {
	pulumi.Input

	ToBootDiskDefaultsPtrOutput() BootDiskDefaultsPtrOutput
	ToBootDiskDefaultsPtrOutputWithContext(context.Context) BootDiskDefaultsPtrOutput
}

type bootDiskDefaultsPtrType BootDiskDefaultsArgs

func BootDiskDefaultsPtr(v *BootDiskDefaultsArgs) BootDiskDefaultsPtrInput {
	return (*bootDiskDefaultsPtrType)(v)
}

func (*bootDiskDefaultsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BootDiskDefaults)(nil)).Elem()
}

func (i *bootDiskDefaultsPtrType) ToBootDiskDefaultsPtrOutput() BootDiskDefaultsPtrOutput {
	return i.ToBootDiskDefaultsPtrOutputWithContext(context.Background())
}

func (i *bootDiskDefaultsPtrType) ToBootDiskDefaultsPtrOutputWithContext(ctx context.Context) BootDiskDefaultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BootDiskDefaultsPtrOutput)
}

// BootDiskDefaults hold information about the boot disk of a VM.
type BootDiskDefaultsOutput struct{ *pulumi.OutputState }

func (BootDiskDefaultsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BootDiskDefaults)(nil)).Elem()
}

func (o BootDiskDefaultsOutput) ToBootDiskDefaultsOutput() BootDiskDefaultsOutput {
	return o
}

func (o BootDiskDefaultsOutput) ToBootDiskDefaultsOutputWithContext(ctx context.Context) BootDiskDefaultsOutput {
	return o
}

func (o BootDiskDefaultsOutput) ToBootDiskDefaultsPtrOutput() BootDiskDefaultsPtrOutput {
	return o.ToBootDiskDefaultsPtrOutputWithContext(context.Background())
}

func (o BootDiskDefaultsOutput) ToBootDiskDefaultsPtrOutputWithContext(ctx context.Context) BootDiskDefaultsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BootDiskDefaults) *BootDiskDefaults {
		return &v
	}).(BootDiskDefaultsPtrOutput)
}

// Optional. Specifies a unique device name of your choice that is reflected into the /dev/disk/by-id/google-* tree of a Linux operating system running within the instance. If not specified, the server chooses a default device name to apply to this disk, in the form persistent-disk-x, where x is a number assigned by Google Compute Engine. This field is only applicable for persistent disks.
func (o BootDiskDefaultsOutput) DeviceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BootDiskDefaults) *string { return v.DeviceName }).(pulumi.StringPtrOutput)
}

// Optional. The name of the disk.
func (o BootDiskDefaultsOutput) DiskName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BootDiskDefaults) *string { return v.DiskName }).(pulumi.StringPtrOutput)
}

// Optional. The type of disk provisioning to use for the VM.
func (o BootDiskDefaultsOutput) DiskType() BootDiskDefaultsDiskTypePtrOutput {
	return o.ApplyT(func(v BootDiskDefaults) *BootDiskDefaultsDiskType { return v.DiskType }).(BootDiskDefaultsDiskTypePtrOutput)
}

// Optional. The encryption to apply to the boot disk.
func (o BootDiskDefaultsOutput) Encryption() EncryptionPtrOutput {
	return o.ApplyT(func(v BootDiskDefaults) *Encryption { return v.Encryption }).(EncryptionPtrOutput)
}

// The image to use when creating the disk.
func (o BootDiskDefaultsOutput) Image() DiskImageDefaultsPtrOutput {
	return o.ApplyT(func(v BootDiskDefaults) *DiskImageDefaults { return v.Image }).(DiskImageDefaultsPtrOutput)
}

type BootDiskDefaultsPtrOutput struct{ *pulumi.OutputState }

func (BootDiskDefaultsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BootDiskDefaults)(nil)).Elem()
}

func (o BootDiskDefaultsPtrOutput) ToBootDiskDefaultsPtrOutput() BootDiskDefaultsPtrOutput {
	return o
}

func (o BootDiskDefaultsPtrOutput) ToBootDiskDefaultsPtrOutputWithContext(ctx context.Context) BootDiskDefaultsPtrOutput {
	return o
}

func (o BootDiskDefaultsPtrOutput) Elem() BootDiskDefaultsOutput {
	return o.ApplyT(func(v *BootDiskDefaults) BootDiskDefaults {
		if v != nil {
			return *v
		}
		var ret BootDiskDefaults
		return ret
	}).(BootDiskDefaultsOutput)
}

// Optional. Specifies a unique device name of your choice that is reflected into the /dev/disk/by-id/google-* tree of a Linux operating system running within the instance. If not specified, the server chooses a default device name to apply to this disk, in the form persistent-disk-x, where x is a number assigned by Google Compute Engine. This field is only applicable for persistent disks.
func (o BootDiskDefaultsPtrOutput) DeviceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BootDiskDefaults) *string {
		if v == nil {
			return nil
		}
		return v.DeviceName
	}).(pulumi.StringPtrOutput)
}

// Optional. The name of the disk.
func (o BootDiskDefaultsPtrOutput) DiskName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BootDiskDefaults) *string {
		if v == nil {
			return nil
		}
		return v.DiskName
	}).(pulumi.StringPtrOutput)
}

// Optional. The type of disk provisioning to use for the VM.
func (o BootDiskDefaultsPtrOutput) DiskType() BootDiskDefaultsDiskTypePtrOutput {
	return o.ApplyT(func(v *BootDiskDefaults) *BootDiskDefaultsDiskType {
		if v == nil {
			return nil
		}
		return v.DiskType
	}).(BootDiskDefaultsDiskTypePtrOutput)
}

// Optional. The encryption to apply to the boot disk.
func (o BootDiskDefaultsPtrOutput) Encryption() EncryptionPtrOutput {
	return o.ApplyT(func(v *BootDiskDefaults) *Encryption {
		if v == nil {
			return nil
		}
		return v.Encryption
	}).(EncryptionPtrOutput)
}

// The image to use when creating the disk.
func (o BootDiskDefaultsPtrOutput) Image() DiskImageDefaultsPtrOutput {
	return o.ApplyT(func(v *BootDiskDefaults) *DiskImageDefaults {
		if v == nil {
			return nil
		}
		return v.Image
	}).(DiskImageDefaultsPtrOutput)
}

// BootDiskDefaults hold information about the boot disk of a VM.
type BootDiskDefaultsResponse struct {
	// Optional. Specifies a unique device name of your choice that is reflected into the /dev/disk/by-id/google-* tree of a Linux operating system running within the instance. If not specified, the server chooses a default device name to apply to this disk, in the form persistent-disk-x, where x is a number assigned by Google Compute Engine. This field is only applicable for persistent disks.
	DeviceName string `pulumi:"deviceName"`
	// Optional. The name of the disk.
	DiskName string `pulumi:"diskName"`
	// Optional. The type of disk provisioning to use for the VM.
	DiskType string `pulumi:"diskType"`
	// Optional. The encryption to apply to the boot disk.
	Encryption EncryptionResponse `pulumi:"encryption"`
	// The image to use when creating the disk.
	Image DiskImageDefaultsResponse `pulumi:"image"`
}

// BootDiskDefaults hold information about the boot disk of a VM.
type BootDiskDefaultsResponseOutput struct{ *pulumi.OutputState }

func (BootDiskDefaultsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BootDiskDefaultsResponse)(nil)).Elem()
}

func (o BootDiskDefaultsResponseOutput) ToBootDiskDefaultsResponseOutput() BootDiskDefaultsResponseOutput {
	return o
}

func (o BootDiskDefaultsResponseOutput) ToBootDiskDefaultsResponseOutputWithContext(ctx context.Context) BootDiskDefaultsResponseOutput {
	return o
}

// Optional. Specifies a unique device name of your choice that is reflected into the /dev/disk/by-id/google-* tree of a Linux operating system running within the instance. If not specified, the server chooses a default device name to apply to this disk, in the form persistent-disk-x, where x is a number assigned by Google Compute Engine. This field is only applicable for persistent disks.
func (o BootDiskDefaultsResponseOutput) DeviceName() pulumi.StringOutput {
	return o.ApplyT(func(v BootDiskDefaultsResponse) string { return v.DeviceName }).(pulumi.StringOutput)
}

// Optional. The name of the disk.
func (o BootDiskDefaultsResponseOutput) DiskName() pulumi.StringOutput {
	return o.ApplyT(func(v BootDiskDefaultsResponse) string { return v.DiskName }).(pulumi.StringOutput)
}

// Optional. The type of disk provisioning to use for the VM.
func (o BootDiskDefaultsResponseOutput) DiskType() pulumi.StringOutput {
	return o.ApplyT(func(v BootDiskDefaultsResponse) string { return v.DiskType }).(pulumi.StringOutput)
}

// Optional. The encryption to apply to the boot disk.
func (o BootDiskDefaultsResponseOutput) Encryption() EncryptionResponseOutput {
	return o.ApplyT(func(v BootDiskDefaultsResponse) EncryptionResponse { return v.Encryption }).(EncryptionResponseOutput)
}

// The image to use when creating the disk.
func (o BootDiskDefaultsResponseOutput) Image() DiskImageDefaultsResponseOutput {
	return o.ApplyT(func(v BootDiskDefaultsResponse) DiskImageDefaultsResponse { return v.Image }).(DiskImageDefaultsResponseOutput)
}

// Message describing Azure Credentials using tenant ID, client ID and secret.
type ClientSecretCredentials struct {
	// Azure client ID.
	ClientId *string `pulumi:"clientId"`
	// Input only. Azure client secret.
	ClientSecret *string `pulumi:"clientSecret"`
	// Azure tenant ID.
	TenantId *string `pulumi:"tenantId"`
}

// ClientSecretCredentialsInput is an input type that accepts ClientSecretCredentialsArgs and ClientSecretCredentialsOutput values.
// You can construct a concrete instance of `ClientSecretCredentialsInput` via:
//
//	ClientSecretCredentialsArgs{...}
type ClientSecretCredentialsInput interface {
	pulumi.Input

	ToClientSecretCredentialsOutput() ClientSecretCredentialsOutput
	ToClientSecretCredentialsOutputWithContext(context.Context) ClientSecretCredentialsOutput
}

// Message describing Azure Credentials using tenant ID, client ID and secret.
type ClientSecretCredentialsArgs struct {
	// Azure client ID.
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
	// Input only. Azure client secret.
	ClientSecret pulumi.StringPtrInput `pulumi:"clientSecret"`
	// Azure tenant ID.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
}

func (ClientSecretCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientSecretCredentials)(nil)).Elem()
}

func (i ClientSecretCredentialsArgs) ToClientSecretCredentialsOutput() ClientSecretCredentialsOutput {
	return i.ToClientSecretCredentialsOutputWithContext(context.Background())
}

func (i ClientSecretCredentialsArgs) ToClientSecretCredentialsOutputWithContext(ctx context.Context) ClientSecretCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientSecretCredentialsOutput)
}

func (i ClientSecretCredentialsArgs) ToClientSecretCredentialsPtrOutput() ClientSecretCredentialsPtrOutput {
	return i.ToClientSecretCredentialsPtrOutputWithContext(context.Background())
}

func (i ClientSecretCredentialsArgs) ToClientSecretCredentialsPtrOutputWithContext(ctx context.Context) ClientSecretCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientSecretCredentialsOutput).ToClientSecretCredentialsPtrOutputWithContext(ctx)
}

// ClientSecretCredentialsPtrInput is an input type that accepts ClientSecretCredentialsArgs, ClientSecretCredentialsPtr and ClientSecretCredentialsPtrOutput values.
// You can construct a concrete instance of `ClientSecretCredentialsPtrInput` via:
//
//	        ClientSecretCredentialsArgs{...}
//
//	or:
//
//	        nil
type ClientSecretCredentialsPtrInput interface {
	pulumi.Input

	ToClientSecretCredentialsPtrOutput() ClientSecretCredentialsPtrOutput
	ToClientSecretCredentialsPtrOutputWithContext(context.Context) ClientSecretCredentialsPtrOutput
}

type clientSecretCredentialsPtrType ClientSecretCredentialsArgs

func ClientSecretCredentialsPtr(v *ClientSecretCredentialsArgs) ClientSecretCredentialsPtrInput {
	return (*clientSecretCredentialsPtrType)(v)
}

func (*clientSecretCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientSecretCredentials)(nil)).Elem()
}

func (i *clientSecretCredentialsPtrType) ToClientSecretCredentialsPtrOutput() ClientSecretCredentialsPtrOutput {
	return i.ToClientSecretCredentialsPtrOutputWithContext(context.Background())
}

func (i *clientSecretCredentialsPtrType) ToClientSecretCredentialsPtrOutputWithContext(ctx context.Context) ClientSecretCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientSecretCredentialsPtrOutput)
}

// Message describing Azure Credentials using tenant ID, client ID and secret.
type ClientSecretCredentialsOutput struct{ *pulumi.OutputState }

func (ClientSecretCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientSecretCredentials)(nil)).Elem()
}

func (o ClientSecretCredentialsOutput) ToClientSecretCredentialsOutput() ClientSecretCredentialsOutput {
	return o
}

func (o ClientSecretCredentialsOutput) ToClientSecretCredentialsOutputWithContext(ctx context.Context) ClientSecretCredentialsOutput {
	return o
}

func (o ClientSecretCredentialsOutput) ToClientSecretCredentialsPtrOutput() ClientSecretCredentialsPtrOutput {
	return o.ToClientSecretCredentialsPtrOutputWithContext(context.Background())
}

func (o ClientSecretCredentialsOutput) ToClientSecretCredentialsPtrOutputWithContext(ctx context.Context) ClientSecretCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClientSecretCredentials) *ClientSecretCredentials {
		return &v
	}).(ClientSecretCredentialsPtrOutput)
}

// Azure client ID.
func (o ClientSecretCredentialsOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClientSecretCredentials) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// Input only. Azure client secret.
func (o ClientSecretCredentialsOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClientSecretCredentials) *string { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

// Azure tenant ID.
func (o ClientSecretCredentialsOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClientSecretCredentials) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

type ClientSecretCredentialsPtrOutput struct{ *pulumi.OutputState }

func (ClientSecretCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientSecretCredentials)(nil)).Elem()
}

func (o ClientSecretCredentialsPtrOutput) ToClientSecretCredentialsPtrOutput() ClientSecretCredentialsPtrOutput {
	return o
}

func (o ClientSecretCredentialsPtrOutput) ToClientSecretCredentialsPtrOutputWithContext(ctx context.Context) ClientSecretCredentialsPtrOutput {
	return o
}

func (o ClientSecretCredentialsPtrOutput) Elem() ClientSecretCredentialsOutput {
	return o.ApplyT(func(v *ClientSecretCredentials) ClientSecretCredentials {
		if v != nil {
			return *v
		}
		var ret ClientSecretCredentials
		return ret
	}).(ClientSecretCredentialsOutput)
}

// Azure client ID.
func (o ClientSecretCredentialsPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientSecretCredentials) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// Input only. Azure client secret.
func (o ClientSecretCredentialsPtrOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientSecretCredentials) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecret
	}).(pulumi.StringPtrOutput)
}

// Azure tenant ID.
func (o ClientSecretCredentialsPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientSecretCredentials) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Message describing Azure Credentials using tenant ID, client ID and secret.
type ClientSecretCredentialsResponse struct {
	// Azure client ID.
	ClientId string `pulumi:"clientId"`
	// Input only. Azure client secret.
	ClientSecret string `pulumi:"clientSecret"`
	// Azure tenant ID.
	TenantId string `pulumi:"tenantId"`
}

// Message describing Azure Credentials using tenant ID, client ID and secret.
type ClientSecretCredentialsResponseOutput struct{ *pulumi.OutputState }

func (ClientSecretCredentialsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientSecretCredentialsResponse)(nil)).Elem()
}

func (o ClientSecretCredentialsResponseOutput) ToClientSecretCredentialsResponseOutput() ClientSecretCredentialsResponseOutput {
	return o
}

func (o ClientSecretCredentialsResponseOutput) ToClientSecretCredentialsResponseOutputWithContext(ctx context.Context) ClientSecretCredentialsResponseOutput {
	return o
}

// Azure client ID.
func (o ClientSecretCredentialsResponseOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v ClientSecretCredentialsResponse) string { return v.ClientId }).(pulumi.StringOutput)
}

// Input only. Azure client secret.
func (o ClientSecretCredentialsResponseOutput) ClientSecret() pulumi.StringOutput {
	return o.ApplyT(func(v ClientSecretCredentialsResponse) string { return v.ClientSecret }).(pulumi.StringOutput)
}

// Azure tenant ID.
func (o ClientSecretCredentialsResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v ClientSecretCredentialsResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// CloneJob describes the process of creating a clone of a MigratingVM to the requested target based on the latest successful uploaded snapshots. While the migration cycles of a MigratingVm take place, it is possible to verify the uploaded VM can be started in the cloud, by creating a clone. The clone can be created without any downtime, and it is created using the latest snapshots which are already in the cloud. The cloneJob is only responsible for its work, not its products, which means once it is finished, it will never touch the instance it created. It will only delete it in case of the CloneJob being cancelled or upon failure to clone.
type CloneJobResponse struct {
	// Details of the target Persistent Disks in Compute Engine.
	ComputeEngineDisksTargetDetails ComputeEngineDisksTargetDetailsResponse `pulumi:"computeEngineDisksTargetDetails"`
	// Details of the target VM in Compute Engine.
	ComputeEngineTargetDetails ComputeEngineTargetDetailsResponse `pulumi:"computeEngineTargetDetails"`
	// The time the clone job was created (as an API call, not when it was actually created in the target).
	CreateTime string `pulumi:"createTime"`
	// The time the clone job was ended.
	EndTime string `pulumi:"endTime"`
	// Provides details for the errors that led to the Clone Job's state.
	Error StatusResponse `pulumi:"error"`
	// The name of the clone.
	Name string `pulumi:"name"`
	// State of the clone job.
	State string `pulumi:"state"`
	// The time the state was last updated.
	StateTime string `pulumi:"stateTime"`
	// The clone steps list representing its progress.
	Steps []CloneStepResponse `pulumi:"steps"`
}

// CloneJob describes the process of creating a clone of a MigratingVM to the requested target based on the latest successful uploaded snapshots. While the migration cycles of a MigratingVm take place, it is possible to verify the uploaded VM can be started in the cloud, by creating a clone. The clone can be created without any downtime, and it is created using the latest snapshots which are already in the cloud. The cloneJob is only responsible for its work, not its products, which means once it is finished, it will never touch the instance it created. It will only delete it in case of the CloneJob being cancelled or upon failure to clone.
type CloneJobResponseOutput struct{ *pulumi.OutputState }

func (CloneJobResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloneJobResponse)(nil)).Elem()
}

func (o CloneJobResponseOutput) ToCloneJobResponseOutput() CloneJobResponseOutput {
	return o
}

func (o CloneJobResponseOutput) ToCloneJobResponseOutputWithContext(ctx context.Context) CloneJobResponseOutput {
	return o
}

// Details of the target Persistent Disks in Compute Engine.
func (o CloneJobResponseOutput) ComputeEngineDisksTargetDetails() ComputeEngineDisksTargetDetailsResponseOutput {
	return o.ApplyT(func(v CloneJobResponse) ComputeEngineDisksTargetDetailsResponse {
		return v.ComputeEngineDisksTargetDetails
	}).(ComputeEngineDisksTargetDetailsResponseOutput)
}

// Details of the target VM in Compute Engine.
func (o CloneJobResponseOutput) ComputeEngineTargetDetails() ComputeEngineTargetDetailsResponseOutput {
	return o.ApplyT(func(v CloneJobResponse) ComputeEngineTargetDetailsResponse { return v.ComputeEngineTargetDetails }).(ComputeEngineTargetDetailsResponseOutput)
}

// The time the clone job was created (as an API call, not when it was actually created in the target).
func (o CloneJobResponseOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v CloneJobResponse) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The time the clone job was ended.
func (o CloneJobResponseOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v CloneJobResponse) string { return v.EndTime }).(pulumi.StringOutput)
}

// Provides details for the errors that led to the Clone Job's state.
func (o CloneJobResponseOutput) Error() StatusResponseOutput {
	return o.ApplyT(func(v CloneJobResponse) StatusResponse { return v.Error }).(StatusResponseOutput)
}

// The name of the clone.
func (o CloneJobResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CloneJobResponse) string { return v.Name }).(pulumi.StringOutput)
}

// State of the clone job.
func (o CloneJobResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v CloneJobResponse) string { return v.State }).(pulumi.StringOutput)
}

// The time the state was last updated.
func (o CloneJobResponseOutput) StateTime() pulumi.StringOutput {
	return o.ApplyT(func(v CloneJobResponse) string { return v.StateTime }).(pulumi.StringOutput)
}

// The clone steps list representing its progress.
func (o CloneJobResponseOutput) Steps() CloneStepResponseArrayOutput {
	return o.ApplyT(func(v CloneJobResponse) []CloneStepResponse { return v.Steps }).(CloneStepResponseArrayOutput)
}

type CloneJobResponseArrayOutput struct{ *pulumi.OutputState }

func (CloneJobResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CloneJobResponse)(nil)).Elem()
}

func (o CloneJobResponseArrayOutput) ToCloneJobResponseArrayOutput() CloneJobResponseArrayOutput {
	return o
}

func (o CloneJobResponseArrayOutput) ToCloneJobResponseArrayOutputWithContext(ctx context.Context) CloneJobResponseArrayOutput {
	return o
}

func (o CloneJobResponseArrayOutput) Index(i pulumi.IntInput) CloneJobResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CloneJobResponse {
		return vs[0].([]CloneJobResponse)[vs[1].(int)]
	}).(CloneJobResponseOutput)
}

// CloneStep holds information about the clone step progress.
type CloneStepResponse struct {
	// Adapting OS step.
	AdaptingOs AdaptingOSStepResponse `pulumi:"adaptingOs"`
	// The time the step has ended.
	EndTime string `pulumi:"endTime"`
	// Instantiating migrated VM step.
	InstantiatingMigratedVm InstantiatingMigratedVMStepResponse `pulumi:"instantiatingMigratedVm"`
	// Preparing VM disks step.
	PreparingVmDisks PreparingVMDisksStepResponse `pulumi:"preparingVmDisks"`
	// The time the step has started.
	StartTime string `pulumi:"startTime"`
}

// CloneStep holds information about the clone step progress.
type CloneStepResponseOutput struct{ *pulumi.OutputState }

func (CloneStepResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloneStepResponse)(nil)).Elem()
}

func (o CloneStepResponseOutput) ToCloneStepResponseOutput() CloneStepResponseOutput {
	return o
}

func (o CloneStepResponseOutput) ToCloneStepResponseOutputWithContext(ctx context.Context) CloneStepResponseOutput {
	return o
}

// Adapting OS step.
func (o CloneStepResponseOutput) AdaptingOs() AdaptingOSStepResponseOutput {
	return o.ApplyT(func(v CloneStepResponse) AdaptingOSStepResponse { return v.AdaptingOs }).(AdaptingOSStepResponseOutput)
}

// The time the step has ended.
func (o CloneStepResponseOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v CloneStepResponse) string { return v.EndTime }).(pulumi.StringOutput)
}

// Instantiating migrated VM step.
func (o CloneStepResponseOutput) InstantiatingMigratedVm() InstantiatingMigratedVMStepResponseOutput {
	return o.ApplyT(func(v CloneStepResponse) InstantiatingMigratedVMStepResponse { return v.InstantiatingMigratedVm }).(InstantiatingMigratedVMStepResponseOutput)
}

// Preparing VM disks step.
func (o CloneStepResponseOutput) PreparingVmDisks() PreparingVMDisksStepResponseOutput {
	return o.ApplyT(func(v CloneStepResponse) PreparingVMDisksStepResponse { return v.PreparingVmDisks }).(PreparingVMDisksStepResponseOutput)
}

// The time the step has started.
func (o CloneStepResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v CloneStepResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

type CloneStepResponseArrayOutput struct{ *pulumi.OutputState }

func (CloneStepResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CloneStepResponse)(nil)).Elem()
}

func (o CloneStepResponseArrayOutput) ToCloneStepResponseArrayOutput() CloneStepResponseArrayOutput {
	return o
}

func (o CloneStepResponseArrayOutput) ToCloneStepResponseArrayOutputWithContext(ctx context.Context) CloneStepResponseArrayOutput {
	return o
}

func (o CloneStepResponseArrayOutput) Index(i pulumi.IntInput) CloneStepResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CloneStepResponse {
		return vs[0].([]CloneStepResponse)[vs[1].(int)]
	}).(CloneStepResponseOutput)
}

// ComputeEngineDisksTargetDefaults is a collection of details for creating Persistent Disks in a target Compute Engine project.
type ComputeEngineDisksTargetDefaults struct {
	// The details of each Persistent Disk to create.
	Disks []PersistentDiskDefaults `pulumi:"disks"`
	// Details of the disk only migration target.
	DisksTargetDefaults *DisksMigrationDisksTargetDefaults `pulumi:"disksTargetDefaults"`
	// The full path of the resource of type TargetProject which represents the Compute Engine project in which to create the Persistent Disks.
	TargetProject *string `pulumi:"targetProject"`
	// Details of the VM migration target.
	VmTargetDefaults *DisksMigrationVmTargetDefaults `pulumi:"vmTargetDefaults"`
	// The zone in which to create the Persistent Disks.
	Zone *string `pulumi:"zone"`
}

// ComputeEngineDisksTargetDefaultsInput is an input type that accepts ComputeEngineDisksTargetDefaultsArgs and ComputeEngineDisksTargetDefaultsOutput values.
// You can construct a concrete instance of `ComputeEngineDisksTargetDefaultsInput` via:
//
//	ComputeEngineDisksTargetDefaultsArgs{...}
type ComputeEngineDisksTargetDefaultsInput interface {
	pulumi.Input

	ToComputeEngineDisksTargetDefaultsOutput() ComputeEngineDisksTargetDefaultsOutput
	ToComputeEngineDisksTargetDefaultsOutputWithContext(context.Context) ComputeEngineDisksTargetDefaultsOutput
}

// ComputeEngineDisksTargetDefaults is a collection of details for creating Persistent Disks in a target Compute Engine project.
type ComputeEngineDisksTargetDefaultsArgs struct {
	// The details of each Persistent Disk to create.
	Disks PersistentDiskDefaultsArrayInput `pulumi:"disks"`
	// Details of the disk only migration target.
	DisksTargetDefaults DisksMigrationDisksTargetDefaultsPtrInput `pulumi:"disksTargetDefaults"`
	// The full path of the resource of type TargetProject which represents the Compute Engine project in which to create the Persistent Disks.
	TargetProject pulumi.StringPtrInput `pulumi:"targetProject"`
	// Details of the VM migration target.
	VmTargetDefaults DisksMigrationVmTargetDefaultsPtrInput `pulumi:"vmTargetDefaults"`
	// The zone in which to create the Persistent Disks.
	Zone pulumi.StringPtrInput `pulumi:"zone"`
}

func (ComputeEngineDisksTargetDefaultsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeEngineDisksTargetDefaults)(nil)).Elem()
}

func (i ComputeEngineDisksTargetDefaultsArgs) ToComputeEngineDisksTargetDefaultsOutput() ComputeEngineDisksTargetDefaultsOutput {
	return i.ToComputeEngineDisksTargetDefaultsOutputWithContext(context.Background())
}

func (i ComputeEngineDisksTargetDefaultsArgs) ToComputeEngineDisksTargetDefaultsOutputWithContext(ctx context.Context) ComputeEngineDisksTargetDefaultsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeEngineDisksTargetDefaultsOutput)
}

func (i ComputeEngineDisksTargetDefaultsArgs) ToComputeEngineDisksTargetDefaultsPtrOutput() ComputeEngineDisksTargetDefaultsPtrOutput {
	return i.ToComputeEngineDisksTargetDefaultsPtrOutputWithContext(context.Background())
}

func (i ComputeEngineDisksTargetDefaultsArgs) ToComputeEngineDisksTargetDefaultsPtrOutputWithContext(ctx context.Context) ComputeEngineDisksTargetDefaultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeEngineDisksTargetDefaultsOutput).ToComputeEngineDisksTargetDefaultsPtrOutputWithContext(ctx)
}

// ComputeEngineDisksTargetDefaultsPtrInput is an input type that accepts ComputeEngineDisksTargetDefaultsArgs, ComputeEngineDisksTargetDefaultsPtr and ComputeEngineDisksTargetDefaultsPtrOutput values.
// You can construct a concrete instance of `ComputeEngineDisksTargetDefaultsPtrInput` via:
//
//	        ComputeEngineDisksTargetDefaultsArgs{...}
//
//	or:
//
//	        nil
type ComputeEngineDisksTargetDefaultsPtrInput interface {
	pulumi.Input

	ToComputeEngineDisksTargetDefaultsPtrOutput() ComputeEngineDisksTargetDefaultsPtrOutput
	ToComputeEngineDisksTargetDefaultsPtrOutputWithContext(context.Context) ComputeEngineDisksTargetDefaultsPtrOutput
}

type computeEngineDisksTargetDefaultsPtrType ComputeEngineDisksTargetDefaultsArgs

func ComputeEngineDisksTargetDefaultsPtr(v *ComputeEngineDisksTargetDefaultsArgs) ComputeEngineDisksTargetDefaultsPtrInput {
	return (*computeEngineDisksTargetDefaultsPtrType)(v)
}

func (*computeEngineDisksTargetDefaultsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeEngineDisksTargetDefaults)(nil)).Elem()
}

func (i *computeEngineDisksTargetDefaultsPtrType) ToComputeEngineDisksTargetDefaultsPtrOutput() ComputeEngineDisksTargetDefaultsPtrOutput {
	return i.ToComputeEngineDisksTargetDefaultsPtrOutputWithContext(context.Background())
}

func (i *computeEngineDisksTargetDefaultsPtrType) ToComputeEngineDisksTargetDefaultsPtrOutputWithContext(ctx context.Context) ComputeEngineDisksTargetDefaultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeEngineDisksTargetDefaultsPtrOutput)
}

// ComputeEngineDisksTargetDefaults is a collection of details for creating Persistent Disks in a target Compute Engine project.
type ComputeEngineDisksTargetDefaultsOutput struct{ *pulumi.OutputState }

func (ComputeEngineDisksTargetDefaultsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeEngineDisksTargetDefaults)(nil)).Elem()
}

func (o ComputeEngineDisksTargetDefaultsOutput) ToComputeEngineDisksTargetDefaultsOutput() ComputeEngineDisksTargetDefaultsOutput {
	return o
}

func (o ComputeEngineDisksTargetDefaultsOutput) ToComputeEngineDisksTargetDefaultsOutputWithContext(ctx context.Context) ComputeEngineDisksTargetDefaultsOutput {
	return o
}

func (o ComputeEngineDisksTargetDefaultsOutput) ToComputeEngineDisksTargetDefaultsPtrOutput() ComputeEngineDisksTargetDefaultsPtrOutput {
	return o.ToComputeEngineDisksTargetDefaultsPtrOutputWithContext(context.Background())
}

func (o ComputeEngineDisksTargetDefaultsOutput) ToComputeEngineDisksTargetDefaultsPtrOutputWithContext(ctx context.Context) ComputeEngineDisksTargetDefaultsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComputeEngineDisksTargetDefaults) *ComputeEngineDisksTargetDefaults {
		return &v
	}).(ComputeEngineDisksTargetDefaultsPtrOutput)
}

// The details of each Persistent Disk to create.
func (o ComputeEngineDisksTargetDefaultsOutput) Disks() PersistentDiskDefaultsArrayOutput {
	return o.ApplyT(func(v ComputeEngineDisksTargetDefaults) []PersistentDiskDefaults { return v.Disks }).(PersistentDiskDefaultsArrayOutput)
}

// Details of the disk only migration target.
func (o ComputeEngineDisksTargetDefaultsOutput) DisksTargetDefaults() DisksMigrationDisksTargetDefaultsPtrOutput {
	return o.ApplyT(func(v ComputeEngineDisksTargetDefaults) *DisksMigrationDisksTargetDefaults {
		return v.DisksTargetDefaults
	}).(DisksMigrationDisksTargetDefaultsPtrOutput)
}

// The full path of the resource of type TargetProject which represents the Compute Engine project in which to create the Persistent Disks.
func (o ComputeEngineDisksTargetDefaultsOutput) TargetProject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeEngineDisksTargetDefaults) *string { return v.TargetProject }).(pulumi.StringPtrOutput)
}

// Details of the VM migration target.
func (o ComputeEngineDisksTargetDefaultsOutput) VmTargetDefaults() DisksMigrationVmTargetDefaultsPtrOutput {
	return o.ApplyT(func(v ComputeEngineDisksTargetDefaults) *DisksMigrationVmTargetDefaults { return v.VmTargetDefaults }).(DisksMigrationVmTargetDefaultsPtrOutput)
}

// The zone in which to create the Persistent Disks.
func (o ComputeEngineDisksTargetDefaultsOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeEngineDisksTargetDefaults) *string { return v.Zone }).(pulumi.StringPtrOutput)
}

type ComputeEngineDisksTargetDefaultsPtrOutput struct{ *pulumi.OutputState }

func (ComputeEngineDisksTargetDefaultsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeEngineDisksTargetDefaults)(nil)).Elem()
}

func (o ComputeEngineDisksTargetDefaultsPtrOutput) ToComputeEngineDisksTargetDefaultsPtrOutput() ComputeEngineDisksTargetDefaultsPtrOutput {
	return o
}

func (o ComputeEngineDisksTargetDefaultsPtrOutput) ToComputeEngineDisksTargetDefaultsPtrOutputWithContext(ctx context.Context) ComputeEngineDisksTargetDefaultsPtrOutput {
	return o
}

func (o ComputeEngineDisksTargetDefaultsPtrOutput) Elem() ComputeEngineDisksTargetDefaultsOutput {
	return o.ApplyT(func(v *ComputeEngineDisksTargetDefaults) ComputeEngineDisksTargetDefaults {
		if v != nil {
			return *v
		}
		var ret ComputeEngineDisksTargetDefaults
		return ret
	}).(ComputeEngineDisksTargetDefaultsOutput)
}

// The details of each Persistent Disk to create.
func (o ComputeEngineDisksTargetDefaultsPtrOutput) Disks() PersistentDiskDefaultsArrayOutput {
	return o.ApplyT(func(v *ComputeEngineDisksTargetDefaults) []PersistentDiskDefaults {
		if v == nil {
			return nil
		}
		return v.Disks
	}).(PersistentDiskDefaultsArrayOutput)
}

// Details of the disk only migration target.
func (o ComputeEngineDisksTargetDefaultsPtrOutput) DisksTargetDefaults() DisksMigrationDisksTargetDefaultsPtrOutput {
	return o.ApplyT(func(v *ComputeEngineDisksTargetDefaults) *DisksMigrationDisksTargetDefaults {
		if v == nil {
			return nil
		}
		return v.DisksTargetDefaults
	}).(DisksMigrationDisksTargetDefaultsPtrOutput)
}

// The full path of the resource of type TargetProject which represents the Compute Engine project in which to create the Persistent Disks.
func (o ComputeEngineDisksTargetDefaultsPtrOutput) TargetProject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeEngineDisksTargetDefaults) *string {
		if v == nil {
			return nil
		}
		return v.TargetProject
	}).(pulumi.StringPtrOutput)
}

// Details of the VM migration target.
func (o ComputeEngineDisksTargetDefaultsPtrOutput) VmTargetDefaults() DisksMigrationVmTargetDefaultsPtrOutput {
	return o.ApplyT(func(v *ComputeEngineDisksTargetDefaults) *DisksMigrationVmTargetDefaults {
		if v == nil {
			return nil
		}
		return v.VmTargetDefaults
	}).(DisksMigrationVmTargetDefaultsPtrOutput)
}

// The zone in which to create the Persistent Disks.
func (o ComputeEngineDisksTargetDefaultsPtrOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeEngineDisksTargetDefaults) *string {
		if v == nil {
			return nil
		}
		return v.Zone
	}).(pulumi.StringPtrOutput)
}

// ComputeEngineDisksTargetDefaults is a collection of details for creating Persistent Disks in a target Compute Engine project.
type ComputeEngineDisksTargetDefaultsResponse struct {
	// The details of each Persistent Disk to create.
	Disks []PersistentDiskDefaultsResponse `pulumi:"disks"`
	// Details of the disk only migration target.
	DisksTargetDefaults DisksMigrationDisksTargetDefaultsResponse `pulumi:"disksTargetDefaults"`
	// The full path of the resource of type TargetProject which represents the Compute Engine project in which to create the Persistent Disks.
	TargetProject string `pulumi:"targetProject"`
	// Details of the VM migration target.
	VmTargetDefaults DisksMigrationVmTargetDefaultsResponse `pulumi:"vmTargetDefaults"`
	// The zone in which to create the Persistent Disks.
	Zone string `pulumi:"zone"`
}

// ComputeEngineDisksTargetDefaults is a collection of details for creating Persistent Disks in a target Compute Engine project.
type ComputeEngineDisksTargetDefaultsResponseOutput struct{ *pulumi.OutputState }

func (ComputeEngineDisksTargetDefaultsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeEngineDisksTargetDefaultsResponse)(nil)).Elem()
}

func (o ComputeEngineDisksTargetDefaultsResponseOutput) ToComputeEngineDisksTargetDefaultsResponseOutput() ComputeEngineDisksTargetDefaultsResponseOutput {
	return o
}

func (o ComputeEngineDisksTargetDefaultsResponseOutput) ToComputeEngineDisksTargetDefaultsResponseOutputWithContext(ctx context.Context) ComputeEngineDisksTargetDefaultsResponseOutput {
	return o
}

// The details of each Persistent Disk to create.
func (o ComputeEngineDisksTargetDefaultsResponseOutput) Disks() PersistentDiskDefaultsResponseArrayOutput {
	return o.ApplyT(func(v ComputeEngineDisksTargetDefaultsResponse) []PersistentDiskDefaultsResponse { return v.Disks }).(PersistentDiskDefaultsResponseArrayOutput)
}

// Details of the disk only migration target.
func (o ComputeEngineDisksTargetDefaultsResponseOutput) DisksTargetDefaults() DisksMigrationDisksTargetDefaultsResponseOutput {
	return o.ApplyT(func(v ComputeEngineDisksTargetDefaultsResponse) DisksMigrationDisksTargetDefaultsResponse {
		return v.DisksTargetDefaults
	}).(DisksMigrationDisksTargetDefaultsResponseOutput)
}

// The full path of the resource of type TargetProject which represents the Compute Engine project in which to create the Persistent Disks.
func (o ComputeEngineDisksTargetDefaultsResponseOutput) TargetProject() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeEngineDisksTargetDefaultsResponse) string { return v.TargetProject }).(pulumi.StringOutput)
}

// Details of the VM migration target.
func (o ComputeEngineDisksTargetDefaultsResponseOutput) VmTargetDefaults() DisksMigrationVmTargetDefaultsResponseOutput {
	return o.ApplyT(func(v ComputeEngineDisksTargetDefaultsResponse) DisksMigrationVmTargetDefaultsResponse {
		return v.VmTargetDefaults
	}).(DisksMigrationVmTargetDefaultsResponseOutput)
}

// The zone in which to create the Persistent Disks.
func (o ComputeEngineDisksTargetDefaultsResponseOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeEngineDisksTargetDefaultsResponse) string { return v.Zone }).(pulumi.StringOutput)
}

// ComputeEngineDisksTargetDetails is a collection of created Persistent Disks details.
type ComputeEngineDisksTargetDetailsResponse struct {
	// The details of each created Persistent Disk.
	Disks []PersistentDiskResponse `pulumi:"disks"`
	// Details of the disks-only migration target.
	DisksTargetDetails DisksMigrationDisksTargetDetailsResponse `pulumi:"disksTargetDetails"`
	// Details for the VM the migrated data disks are attached to.
	VmTargetDetails DisksMigrationVmTargetDetailsResponse `pulumi:"vmTargetDetails"`
}

// ComputeEngineDisksTargetDetails is a collection of created Persistent Disks details.
type ComputeEngineDisksTargetDetailsResponseOutput struct{ *pulumi.OutputState }

func (ComputeEngineDisksTargetDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeEngineDisksTargetDetailsResponse)(nil)).Elem()
}

func (o ComputeEngineDisksTargetDetailsResponseOutput) ToComputeEngineDisksTargetDetailsResponseOutput() ComputeEngineDisksTargetDetailsResponseOutput {
	return o
}

func (o ComputeEngineDisksTargetDetailsResponseOutput) ToComputeEngineDisksTargetDetailsResponseOutputWithContext(ctx context.Context) ComputeEngineDisksTargetDetailsResponseOutput {
	return o
}

// The details of each created Persistent Disk.
func (o ComputeEngineDisksTargetDetailsResponseOutput) Disks() PersistentDiskResponseArrayOutput {
	return o.ApplyT(func(v ComputeEngineDisksTargetDetailsResponse) []PersistentDiskResponse { return v.Disks }).(PersistentDiskResponseArrayOutput)
}

// Details of the disks-only migration target.
func (o ComputeEngineDisksTargetDetailsResponseOutput) DisksTargetDetails() DisksMigrationDisksTargetDetailsResponseOutput {
	return o.ApplyT(func(v ComputeEngineDisksTargetDetailsResponse) DisksMigrationDisksTargetDetailsResponse {
		return v.DisksTargetDetails
	}).(DisksMigrationDisksTargetDetailsResponseOutput)
}

// Details for the VM the migrated data disks are attached to.
func (o ComputeEngineDisksTargetDetailsResponseOutput) VmTargetDetails() DisksMigrationVmTargetDetailsResponseOutput {
	return o.ApplyT(func(v ComputeEngineDisksTargetDetailsResponse) DisksMigrationVmTargetDetailsResponse {
		return v.VmTargetDetails
	}).(DisksMigrationVmTargetDetailsResponseOutput)
}

// ComputeEngineTargetDefaults is a collection of details for creating a VM in a target Compute Engine project.
type ComputeEngineTargetDefaults struct {
	// Additional licenses to assign to the VM.
	AdditionalLicenses []string `pulumi:"additionalLicenses"`
	// Compute instance scheduling information (if empty default is used).
	ComputeScheduling *ComputeScheduling `pulumi:"computeScheduling"`
	// The disk type to use in the VM.
	DiskType *ComputeEngineTargetDefaultsDiskType `pulumi:"diskType"`
	// Optional. Immutable. The encryption to apply to the VM disks.
	Encryption *Encryption `pulumi:"encryption"`
	// The hostname to assign to the VM.
	Hostname *string `pulumi:"hostname"`
	// A map of labels to associate with the VM.
	Labels map[string]string `pulumi:"labels"`
	// The license type to use in OS adaptation.
	LicenseType *ComputeEngineTargetDefaultsLicenseType `pulumi:"licenseType"`
	// The machine type to create the VM with.
	MachineType *string `pulumi:"machineType"`
	// The machine type series to create the VM with.
	MachineTypeSeries *string `pulumi:"machineTypeSeries"`
	// The metadata key/value pairs to assign to the VM.
	Metadata map[string]string `pulumi:"metadata"`
	// List of NICs connected to this VM.
	NetworkInterfaces []NetworkInterface `pulumi:"networkInterfaces"`
	// A list of network tags to associate with the VM.
	NetworkTags []string `pulumi:"networkTags"`
	// Defines whether the instance has Secure Boot enabled. This can be set to true only if the VM boot option is EFI.
	SecureBoot *bool `pulumi:"secureBoot"`
	// The service account to associate the VM with.
	ServiceAccount *string `pulumi:"serviceAccount"`
	// The full path of the resource of type TargetProject which represents the Compute Engine project in which to create this VM.
	TargetProject *string `pulumi:"targetProject"`
	// The name of the VM to create.
	VmName *string `pulumi:"vmName"`
	// The zone in which to create the VM.
	Zone *string `pulumi:"zone"`
}

// ComputeEngineTargetDefaultsInput is an input type that accepts ComputeEngineTargetDefaultsArgs and ComputeEngineTargetDefaultsOutput values.
// You can construct a concrete instance of `ComputeEngineTargetDefaultsInput` via:
//
//	ComputeEngineTargetDefaultsArgs{...}
type ComputeEngineTargetDefaultsInput interface {
	pulumi.Input

	ToComputeEngineTargetDefaultsOutput() ComputeEngineTargetDefaultsOutput
	ToComputeEngineTargetDefaultsOutputWithContext(context.Context) ComputeEngineTargetDefaultsOutput
}

// ComputeEngineTargetDefaults is a collection of details for creating a VM in a target Compute Engine project.
type ComputeEngineTargetDefaultsArgs struct {
	// Additional licenses to assign to the VM.
	AdditionalLicenses pulumi.StringArrayInput `pulumi:"additionalLicenses"`
	// Compute instance scheduling information (if empty default is used).
	ComputeScheduling ComputeSchedulingPtrInput `pulumi:"computeScheduling"`
	// The disk type to use in the VM.
	DiskType ComputeEngineTargetDefaultsDiskTypePtrInput `pulumi:"diskType"`
	// Optional. Immutable. The encryption to apply to the VM disks.
	Encryption EncryptionPtrInput `pulumi:"encryption"`
	// The hostname to assign to the VM.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// A map of labels to associate with the VM.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// The license type to use in OS adaptation.
	LicenseType ComputeEngineTargetDefaultsLicenseTypePtrInput `pulumi:"licenseType"`
	// The machine type to create the VM with.
	MachineType pulumi.StringPtrInput `pulumi:"machineType"`
	// The machine type series to create the VM with.
	MachineTypeSeries pulumi.StringPtrInput `pulumi:"machineTypeSeries"`
	// The metadata key/value pairs to assign to the VM.
	Metadata pulumi.StringMapInput `pulumi:"metadata"`
	// List of NICs connected to this VM.
	NetworkInterfaces NetworkInterfaceArrayInput `pulumi:"networkInterfaces"`
	// A list of network tags to associate with the VM.
	NetworkTags pulumi.StringArrayInput `pulumi:"networkTags"`
	// Defines whether the instance has Secure Boot enabled. This can be set to true only if the VM boot option is EFI.
	SecureBoot pulumi.BoolPtrInput `pulumi:"secureBoot"`
	// The service account to associate the VM with.
	ServiceAccount pulumi.StringPtrInput `pulumi:"serviceAccount"`
	// The full path of the resource of type TargetProject which represents the Compute Engine project in which to create this VM.
	TargetProject pulumi.StringPtrInput `pulumi:"targetProject"`
	// The name of the VM to create.
	VmName pulumi.StringPtrInput `pulumi:"vmName"`
	// The zone in which to create the VM.
	Zone pulumi.StringPtrInput `pulumi:"zone"`
}

func (ComputeEngineTargetDefaultsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeEngineTargetDefaults)(nil)).Elem()
}

func (i ComputeEngineTargetDefaultsArgs) ToComputeEngineTargetDefaultsOutput() ComputeEngineTargetDefaultsOutput {
	return i.ToComputeEngineTargetDefaultsOutputWithContext(context.Background())
}

func (i ComputeEngineTargetDefaultsArgs) ToComputeEngineTargetDefaultsOutputWithContext(ctx context.Context) ComputeEngineTargetDefaultsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeEngineTargetDefaultsOutput)
}

func (i ComputeEngineTargetDefaultsArgs) ToComputeEngineTargetDefaultsPtrOutput() ComputeEngineTargetDefaultsPtrOutput {
	return i.ToComputeEngineTargetDefaultsPtrOutputWithContext(context.Background())
}

func (i ComputeEngineTargetDefaultsArgs) ToComputeEngineTargetDefaultsPtrOutputWithContext(ctx context.Context) ComputeEngineTargetDefaultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeEngineTargetDefaultsOutput).ToComputeEngineTargetDefaultsPtrOutputWithContext(ctx)
}

// ComputeEngineTargetDefaultsPtrInput is an input type that accepts ComputeEngineTargetDefaultsArgs, ComputeEngineTargetDefaultsPtr and ComputeEngineTargetDefaultsPtrOutput values.
// You can construct a concrete instance of `ComputeEngineTargetDefaultsPtrInput` via:
//
//	        ComputeEngineTargetDefaultsArgs{...}
//
//	or:
//
//	        nil
type ComputeEngineTargetDefaultsPtrInput interface {
	pulumi.Input

	ToComputeEngineTargetDefaultsPtrOutput() ComputeEngineTargetDefaultsPtrOutput
	ToComputeEngineTargetDefaultsPtrOutputWithContext(context.Context) ComputeEngineTargetDefaultsPtrOutput
}

type computeEngineTargetDefaultsPtrType ComputeEngineTargetDefaultsArgs

func ComputeEngineTargetDefaultsPtr(v *ComputeEngineTargetDefaultsArgs) ComputeEngineTargetDefaultsPtrInput {
	return (*computeEngineTargetDefaultsPtrType)(v)
}

func (*computeEngineTargetDefaultsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeEngineTargetDefaults)(nil)).Elem()
}

func (i *computeEngineTargetDefaultsPtrType) ToComputeEngineTargetDefaultsPtrOutput() ComputeEngineTargetDefaultsPtrOutput {
	return i.ToComputeEngineTargetDefaultsPtrOutputWithContext(context.Background())
}

func (i *computeEngineTargetDefaultsPtrType) ToComputeEngineTargetDefaultsPtrOutputWithContext(ctx context.Context) ComputeEngineTargetDefaultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeEngineTargetDefaultsPtrOutput)
}

// ComputeEngineTargetDefaults is a collection of details for creating a VM in a target Compute Engine project.
type ComputeEngineTargetDefaultsOutput struct{ *pulumi.OutputState }

func (ComputeEngineTargetDefaultsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeEngineTargetDefaults)(nil)).Elem()
}

func (o ComputeEngineTargetDefaultsOutput) ToComputeEngineTargetDefaultsOutput() ComputeEngineTargetDefaultsOutput {
	return o
}

func (o ComputeEngineTargetDefaultsOutput) ToComputeEngineTargetDefaultsOutputWithContext(ctx context.Context) ComputeEngineTargetDefaultsOutput {
	return o
}

func (o ComputeEngineTargetDefaultsOutput) ToComputeEngineTargetDefaultsPtrOutput() ComputeEngineTargetDefaultsPtrOutput {
	return o.ToComputeEngineTargetDefaultsPtrOutputWithContext(context.Background())
}

func (o ComputeEngineTargetDefaultsOutput) ToComputeEngineTargetDefaultsPtrOutputWithContext(ctx context.Context) ComputeEngineTargetDefaultsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComputeEngineTargetDefaults) *ComputeEngineTargetDefaults {
		return &v
	}).(ComputeEngineTargetDefaultsPtrOutput)
}

// Additional licenses to assign to the VM.
func (o ComputeEngineTargetDefaultsOutput) AdditionalLicenses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaults) []string { return v.AdditionalLicenses }).(pulumi.StringArrayOutput)
}

// Compute instance scheduling information (if empty default is used).
func (o ComputeEngineTargetDefaultsOutput) ComputeScheduling() ComputeSchedulingPtrOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaults) *ComputeScheduling { return v.ComputeScheduling }).(ComputeSchedulingPtrOutput)
}

// The disk type to use in the VM.
func (o ComputeEngineTargetDefaultsOutput) DiskType() ComputeEngineTargetDefaultsDiskTypePtrOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaults) *ComputeEngineTargetDefaultsDiskType { return v.DiskType }).(ComputeEngineTargetDefaultsDiskTypePtrOutput)
}

// Optional. Immutable. The encryption to apply to the VM disks.
func (o ComputeEngineTargetDefaultsOutput) Encryption() EncryptionPtrOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaults) *Encryption { return v.Encryption }).(EncryptionPtrOutput)
}

// The hostname to assign to the VM.
func (o ComputeEngineTargetDefaultsOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaults) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// A map of labels to associate with the VM.
func (o ComputeEngineTargetDefaultsOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaults) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The license type to use in OS adaptation.
func (o ComputeEngineTargetDefaultsOutput) LicenseType() ComputeEngineTargetDefaultsLicenseTypePtrOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaults) *ComputeEngineTargetDefaultsLicenseType { return v.LicenseType }).(ComputeEngineTargetDefaultsLicenseTypePtrOutput)
}

// The machine type to create the VM with.
func (o ComputeEngineTargetDefaultsOutput) MachineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaults) *string { return v.MachineType }).(pulumi.StringPtrOutput)
}

// The machine type series to create the VM with.
func (o ComputeEngineTargetDefaultsOutput) MachineTypeSeries() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaults) *string { return v.MachineTypeSeries }).(pulumi.StringPtrOutput)
}

// The metadata key/value pairs to assign to the VM.
func (o ComputeEngineTargetDefaultsOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaults) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// List of NICs connected to this VM.
func (o ComputeEngineTargetDefaultsOutput) NetworkInterfaces() NetworkInterfaceArrayOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaults) []NetworkInterface { return v.NetworkInterfaces }).(NetworkInterfaceArrayOutput)
}

// A list of network tags to associate with the VM.
func (o ComputeEngineTargetDefaultsOutput) NetworkTags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaults) []string { return v.NetworkTags }).(pulumi.StringArrayOutput)
}

// Defines whether the instance has Secure Boot enabled. This can be set to true only if the VM boot option is EFI.
func (o ComputeEngineTargetDefaultsOutput) SecureBoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaults) *bool { return v.SecureBoot }).(pulumi.BoolPtrOutput)
}

// The service account to associate the VM with.
func (o ComputeEngineTargetDefaultsOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaults) *string { return v.ServiceAccount }).(pulumi.StringPtrOutput)
}

// The full path of the resource of type TargetProject which represents the Compute Engine project in which to create this VM.
func (o ComputeEngineTargetDefaultsOutput) TargetProject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaults) *string { return v.TargetProject }).(pulumi.StringPtrOutput)
}

// The name of the VM to create.
func (o ComputeEngineTargetDefaultsOutput) VmName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaults) *string { return v.VmName }).(pulumi.StringPtrOutput)
}

// The zone in which to create the VM.
func (o ComputeEngineTargetDefaultsOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaults) *string { return v.Zone }).(pulumi.StringPtrOutput)
}

type ComputeEngineTargetDefaultsPtrOutput struct{ *pulumi.OutputState }

func (ComputeEngineTargetDefaultsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeEngineTargetDefaults)(nil)).Elem()
}

func (o ComputeEngineTargetDefaultsPtrOutput) ToComputeEngineTargetDefaultsPtrOutput() ComputeEngineTargetDefaultsPtrOutput {
	return o
}

func (o ComputeEngineTargetDefaultsPtrOutput) ToComputeEngineTargetDefaultsPtrOutputWithContext(ctx context.Context) ComputeEngineTargetDefaultsPtrOutput {
	return o
}

func (o ComputeEngineTargetDefaultsPtrOutput) Elem() ComputeEngineTargetDefaultsOutput {
	return o.ApplyT(func(v *ComputeEngineTargetDefaults) ComputeEngineTargetDefaults {
		if v != nil {
			return *v
		}
		var ret ComputeEngineTargetDefaults
		return ret
	}).(ComputeEngineTargetDefaultsOutput)
}

// Additional licenses to assign to the VM.
func (o ComputeEngineTargetDefaultsPtrOutput) AdditionalLicenses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ComputeEngineTargetDefaults) []string {
		if v == nil {
			return nil
		}
		return v.AdditionalLicenses
	}).(pulumi.StringArrayOutput)
}

// Compute instance scheduling information (if empty default is used).
func (o ComputeEngineTargetDefaultsPtrOutput) ComputeScheduling() ComputeSchedulingPtrOutput {
	return o.ApplyT(func(v *ComputeEngineTargetDefaults) *ComputeScheduling {
		if v == nil {
			return nil
		}
		return v.ComputeScheduling
	}).(ComputeSchedulingPtrOutput)
}

// The disk type to use in the VM.
func (o ComputeEngineTargetDefaultsPtrOutput) DiskType() ComputeEngineTargetDefaultsDiskTypePtrOutput {
	return o.ApplyT(func(v *ComputeEngineTargetDefaults) *ComputeEngineTargetDefaultsDiskType {
		if v == nil {
			return nil
		}
		return v.DiskType
	}).(ComputeEngineTargetDefaultsDiskTypePtrOutput)
}

// Optional. Immutable. The encryption to apply to the VM disks.
func (o ComputeEngineTargetDefaultsPtrOutput) Encryption() EncryptionPtrOutput {
	return o.ApplyT(func(v *ComputeEngineTargetDefaults) *Encryption {
		if v == nil {
			return nil
		}
		return v.Encryption
	}).(EncryptionPtrOutput)
}

// The hostname to assign to the VM.
func (o ComputeEngineTargetDefaultsPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeEngineTargetDefaults) *string {
		if v == nil {
			return nil
		}
		return v.Hostname
	}).(pulumi.StringPtrOutput)
}

// A map of labels to associate with the VM.
func (o ComputeEngineTargetDefaultsPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ComputeEngineTargetDefaults) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// The license type to use in OS adaptation.
func (o ComputeEngineTargetDefaultsPtrOutput) LicenseType() ComputeEngineTargetDefaultsLicenseTypePtrOutput {
	return o.ApplyT(func(v *ComputeEngineTargetDefaults) *ComputeEngineTargetDefaultsLicenseType {
		if v == nil {
			return nil
		}
		return v.LicenseType
	}).(ComputeEngineTargetDefaultsLicenseTypePtrOutput)
}

// The machine type to create the VM with.
func (o ComputeEngineTargetDefaultsPtrOutput) MachineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeEngineTargetDefaults) *string {
		if v == nil {
			return nil
		}
		return v.MachineType
	}).(pulumi.StringPtrOutput)
}

// The machine type series to create the VM with.
func (o ComputeEngineTargetDefaultsPtrOutput) MachineTypeSeries() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeEngineTargetDefaults) *string {
		if v == nil {
			return nil
		}
		return v.MachineTypeSeries
	}).(pulumi.StringPtrOutput)
}

// The metadata key/value pairs to assign to the VM.
func (o ComputeEngineTargetDefaultsPtrOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ComputeEngineTargetDefaults) map[string]string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringMapOutput)
}

// List of NICs connected to this VM.
func (o ComputeEngineTargetDefaultsPtrOutput) NetworkInterfaces() NetworkInterfaceArrayOutput {
	return o.ApplyT(func(v *ComputeEngineTargetDefaults) []NetworkInterface {
		if v == nil {
			return nil
		}
		return v.NetworkInterfaces
	}).(NetworkInterfaceArrayOutput)
}

// A list of network tags to associate with the VM.
func (o ComputeEngineTargetDefaultsPtrOutput) NetworkTags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ComputeEngineTargetDefaults) []string {
		if v == nil {
			return nil
		}
		return v.NetworkTags
	}).(pulumi.StringArrayOutput)
}

// Defines whether the instance has Secure Boot enabled. This can be set to true only if the VM boot option is EFI.
func (o ComputeEngineTargetDefaultsPtrOutput) SecureBoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ComputeEngineTargetDefaults) *bool {
		if v == nil {
			return nil
		}
		return v.SecureBoot
	}).(pulumi.BoolPtrOutput)
}

// The service account to associate the VM with.
func (o ComputeEngineTargetDefaultsPtrOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeEngineTargetDefaults) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccount
	}).(pulumi.StringPtrOutput)
}

// The full path of the resource of type TargetProject which represents the Compute Engine project in which to create this VM.
func (o ComputeEngineTargetDefaultsPtrOutput) TargetProject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeEngineTargetDefaults) *string {
		if v == nil {
			return nil
		}
		return v.TargetProject
	}).(pulumi.StringPtrOutput)
}

// The name of the VM to create.
func (o ComputeEngineTargetDefaultsPtrOutput) VmName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeEngineTargetDefaults) *string {
		if v == nil {
			return nil
		}
		return v.VmName
	}).(pulumi.StringPtrOutput)
}

// The zone in which to create the VM.
func (o ComputeEngineTargetDefaultsPtrOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeEngineTargetDefaults) *string {
		if v == nil {
			return nil
		}
		return v.Zone
	}).(pulumi.StringPtrOutput)
}

// ComputeEngineTargetDefaults is a collection of details for creating a VM in a target Compute Engine project.
type ComputeEngineTargetDefaultsResponse struct {
	// Additional licenses to assign to the VM.
	AdditionalLicenses []string `pulumi:"additionalLicenses"`
	// The OS license returned from the adaptation module report.
	AppliedLicense AppliedLicenseResponse `pulumi:"appliedLicense"`
	// The VM Boot Option, as set in the source VM.
	BootOption string `pulumi:"bootOption"`
	// Compute instance scheduling information (if empty default is used).
	ComputeScheduling ComputeSchedulingResponse `pulumi:"computeScheduling"`
	// The disk type to use in the VM.
	DiskType string `pulumi:"diskType"`
	// Optional. Immutable. The encryption to apply to the VM disks.
	Encryption EncryptionResponse `pulumi:"encryption"`
	// The hostname to assign to the VM.
	Hostname string `pulumi:"hostname"`
	// A map of labels to associate with the VM.
	Labels map[string]string `pulumi:"labels"`
	// The license type to use in OS adaptation.
	LicenseType string `pulumi:"licenseType"`
	// The machine type to create the VM with.
	MachineType string `pulumi:"machineType"`
	// The machine type series to create the VM with.
	MachineTypeSeries string `pulumi:"machineTypeSeries"`
	// The metadata key/value pairs to assign to the VM.
	Metadata map[string]string `pulumi:"metadata"`
	// List of NICs connected to this VM.
	NetworkInterfaces []NetworkInterfaceResponse `pulumi:"networkInterfaces"`
	// A list of network tags to associate with the VM.
	NetworkTags []string `pulumi:"networkTags"`
	// Defines whether the instance has Secure Boot enabled. This can be set to true only if the VM boot option is EFI.
	SecureBoot bool `pulumi:"secureBoot"`
	// The service account to associate the VM with.
	ServiceAccount string `pulumi:"serviceAccount"`
	// The full path of the resource of type TargetProject which represents the Compute Engine project in which to create this VM.
	TargetProject string `pulumi:"targetProject"`
	// The name of the VM to create.
	VmName string `pulumi:"vmName"`
	// The zone in which to create the VM.
	Zone string `pulumi:"zone"`
}

// ComputeEngineTargetDefaults is a collection of details for creating a VM in a target Compute Engine project.
type ComputeEngineTargetDefaultsResponseOutput struct{ *pulumi.OutputState }

func (ComputeEngineTargetDefaultsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeEngineTargetDefaultsResponse)(nil)).Elem()
}

func (o ComputeEngineTargetDefaultsResponseOutput) ToComputeEngineTargetDefaultsResponseOutput() ComputeEngineTargetDefaultsResponseOutput {
	return o
}

func (o ComputeEngineTargetDefaultsResponseOutput) ToComputeEngineTargetDefaultsResponseOutputWithContext(ctx context.Context) ComputeEngineTargetDefaultsResponseOutput {
	return o
}

// Additional licenses to assign to the VM.
func (o ComputeEngineTargetDefaultsResponseOutput) AdditionalLicenses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaultsResponse) []string { return v.AdditionalLicenses }).(pulumi.StringArrayOutput)
}

// The OS license returned from the adaptation module report.
func (o ComputeEngineTargetDefaultsResponseOutput) AppliedLicense() AppliedLicenseResponseOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaultsResponse) AppliedLicenseResponse { return v.AppliedLicense }).(AppliedLicenseResponseOutput)
}

// The VM Boot Option, as set in the source VM.
func (o ComputeEngineTargetDefaultsResponseOutput) BootOption() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaultsResponse) string { return v.BootOption }).(pulumi.StringOutput)
}

// Compute instance scheduling information (if empty default is used).
func (o ComputeEngineTargetDefaultsResponseOutput) ComputeScheduling() ComputeSchedulingResponseOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaultsResponse) ComputeSchedulingResponse { return v.ComputeScheduling }).(ComputeSchedulingResponseOutput)
}

// The disk type to use in the VM.
func (o ComputeEngineTargetDefaultsResponseOutput) DiskType() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaultsResponse) string { return v.DiskType }).(pulumi.StringOutput)
}

// Optional. Immutable. The encryption to apply to the VM disks.
func (o ComputeEngineTargetDefaultsResponseOutput) Encryption() EncryptionResponseOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaultsResponse) EncryptionResponse { return v.Encryption }).(EncryptionResponseOutput)
}

// The hostname to assign to the VM.
func (o ComputeEngineTargetDefaultsResponseOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaultsResponse) string { return v.Hostname }).(pulumi.StringOutput)
}

// A map of labels to associate with the VM.
func (o ComputeEngineTargetDefaultsResponseOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaultsResponse) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The license type to use in OS adaptation.
func (o ComputeEngineTargetDefaultsResponseOutput) LicenseType() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaultsResponse) string { return v.LicenseType }).(pulumi.StringOutput)
}

// The machine type to create the VM with.
func (o ComputeEngineTargetDefaultsResponseOutput) MachineType() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaultsResponse) string { return v.MachineType }).(pulumi.StringOutput)
}

// The machine type series to create the VM with.
func (o ComputeEngineTargetDefaultsResponseOutput) MachineTypeSeries() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaultsResponse) string { return v.MachineTypeSeries }).(pulumi.StringOutput)
}

// The metadata key/value pairs to assign to the VM.
func (o ComputeEngineTargetDefaultsResponseOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaultsResponse) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// List of NICs connected to this VM.
func (o ComputeEngineTargetDefaultsResponseOutput) NetworkInterfaces() NetworkInterfaceResponseArrayOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaultsResponse) []NetworkInterfaceResponse { return v.NetworkInterfaces }).(NetworkInterfaceResponseArrayOutput)
}

// A list of network tags to associate with the VM.
func (o ComputeEngineTargetDefaultsResponseOutput) NetworkTags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaultsResponse) []string { return v.NetworkTags }).(pulumi.StringArrayOutput)
}

// Defines whether the instance has Secure Boot enabled. This can be set to true only if the VM boot option is EFI.
func (o ComputeEngineTargetDefaultsResponseOutput) SecureBoot() pulumi.BoolOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaultsResponse) bool { return v.SecureBoot }).(pulumi.BoolOutput)
}

// The service account to associate the VM with.
func (o ComputeEngineTargetDefaultsResponseOutput) ServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaultsResponse) string { return v.ServiceAccount }).(pulumi.StringOutput)
}

// The full path of the resource of type TargetProject which represents the Compute Engine project in which to create this VM.
func (o ComputeEngineTargetDefaultsResponseOutput) TargetProject() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaultsResponse) string { return v.TargetProject }).(pulumi.StringOutput)
}

// The name of the VM to create.
func (o ComputeEngineTargetDefaultsResponseOutput) VmName() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaultsResponse) string { return v.VmName }).(pulumi.StringOutput)
}

// The zone in which to create the VM.
func (o ComputeEngineTargetDefaultsResponseOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeEngineTargetDefaultsResponse) string { return v.Zone }).(pulumi.StringOutput)
}

// ComputeEngineTargetDetails is a collection of details for creating a VM in a target Compute Engine project.
type ComputeEngineTargetDetailsResponse struct {
	// Additional licenses to assign to the VM.
	AdditionalLicenses []string `pulumi:"additionalLicenses"`
	// The OS license returned from the adaptation module report.
	AppliedLicense AppliedLicenseResponse `pulumi:"appliedLicense"`
	// The VM Boot Option, as set in the source VM.
	BootOption string `pulumi:"bootOption"`
	// Compute instance scheduling information (if empty default is used).
	ComputeScheduling ComputeSchedulingResponse `pulumi:"computeScheduling"`
	// The disk type to use in the VM.
	DiskType string `pulumi:"diskType"`
	// Optional. The encryption to apply to the VM disks.
	Encryption EncryptionResponse `pulumi:"encryption"`
	// The hostname to assign to the VM.
	Hostname string `pulumi:"hostname"`
	// A map of labels to associate with the VM.
	Labels map[string]string `pulumi:"labels"`
	// The license type to use in OS adaptation.
	LicenseType string `pulumi:"licenseType"`
	// The machine type to create the VM with.
	MachineType string `pulumi:"machineType"`
	// The machine type series to create the VM with.
	MachineTypeSeries string `pulumi:"machineTypeSeries"`
	// The metadata key/value pairs to assign to the VM.
	Metadata map[string]string `pulumi:"metadata"`
	// List of NICs connected to this VM.
	NetworkInterfaces []NetworkInterfaceResponse `pulumi:"networkInterfaces"`
	// A list of network tags to associate with the VM.
	NetworkTags []string `pulumi:"networkTags"`
	// The Google Cloud target project ID or project name.
	Project string `pulumi:"project"`
	// Defines whether the instance has Secure Boot enabled. This can be set to true only if the VM boot option is EFI.
	SecureBoot bool `pulumi:"secureBoot"`
	// The service account to associate the VM with.
	ServiceAccount string `pulumi:"serviceAccount"`
	// The name of the VM to create.
	VmName string `pulumi:"vmName"`
	// The zone in which to create the VM.
	Zone string `pulumi:"zone"`
}

// ComputeEngineTargetDetails is a collection of details for creating a VM in a target Compute Engine project.
type ComputeEngineTargetDetailsResponseOutput struct{ *pulumi.OutputState }

func (ComputeEngineTargetDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeEngineTargetDetailsResponse)(nil)).Elem()
}

func (o ComputeEngineTargetDetailsResponseOutput) ToComputeEngineTargetDetailsResponseOutput() ComputeEngineTargetDetailsResponseOutput {
	return o
}

func (o ComputeEngineTargetDetailsResponseOutput) ToComputeEngineTargetDetailsResponseOutputWithContext(ctx context.Context) ComputeEngineTargetDetailsResponseOutput {
	return o
}

// Additional licenses to assign to the VM.
func (o ComputeEngineTargetDetailsResponseOutput) AdditionalLicenses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ComputeEngineTargetDetailsResponse) []string { return v.AdditionalLicenses }).(pulumi.StringArrayOutput)
}

// The OS license returned from the adaptation module report.
func (o ComputeEngineTargetDetailsResponseOutput) AppliedLicense() AppliedLicenseResponseOutput {
	return o.ApplyT(func(v ComputeEngineTargetDetailsResponse) AppliedLicenseResponse { return v.AppliedLicense }).(AppliedLicenseResponseOutput)
}

// The VM Boot Option, as set in the source VM.
func (o ComputeEngineTargetDetailsResponseOutput) BootOption() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeEngineTargetDetailsResponse) string { return v.BootOption }).(pulumi.StringOutput)
}

// Compute instance scheduling information (if empty default is used).
func (o ComputeEngineTargetDetailsResponseOutput) ComputeScheduling() ComputeSchedulingResponseOutput {
	return o.ApplyT(func(v ComputeEngineTargetDetailsResponse) ComputeSchedulingResponse { return v.ComputeScheduling }).(ComputeSchedulingResponseOutput)
}

// The disk type to use in the VM.
func (o ComputeEngineTargetDetailsResponseOutput) DiskType() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeEngineTargetDetailsResponse) string { return v.DiskType }).(pulumi.StringOutput)
}

// Optional. The encryption to apply to the VM disks.
func (o ComputeEngineTargetDetailsResponseOutput) Encryption() EncryptionResponseOutput {
	return o.ApplyT(func(v ComputeEngineTargetDetailsResponse) EncryptionResponse { return v.Encryption }).(EncryptionResponseOutput)
}

// The hostname to assign to the VM.
func (o ComputeEngineTargetDetailsResponseOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeEngineTargetDetailsResponse) string { return v.Hostname }).(pulumi.StringOutput)
}

// A map of labels to associate with the VM.
func (o ComputeEngineTargetDetailsResponseOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ComputeEngineTargetDetailsResponse) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The license type to use in OS adaptation.
func (o ComputeEngineTargetDetailsResponseOutput) LicenseType() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeEngineTargetDetailsResponse) string { return v.LicenseType }).(pulumi.StringOutput)
}

// The machine type to create the VM with.
func (o ComputeEngineTargetDetailsResponseOutput) MachineType() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeEngineTargetDetailsResponse) string { return v.MachineType }).(pulumi.StringOutput)
}

// The machine type series to create the VM with.
func (o ComputeEngineTargetDetailsResponseOutput) MachineTypeSeries() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeEngineTargetDetailsResponse) string { return v.MachineTypeSeries }).(pulumi.StringOutput)
}

// The metadata key/value pairs to assign to the VM.
func (o ComputeEngineTargetDetailsResponseOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v ComputeEngineTargetDetailsResponse) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// List of NICs connected to this VM.
func (o ComputeEngineTargetDetailsResponseOutput) NetworkInterfaces() NetworkInterfaceResponseArrayOutput {
	return o.ApplyT(func(v ComputeEngineTargetDetailsResponse) []NetworkInterfaceResponse { return v.NetworkInterfaces }).(NetworkInterfaceResponseArrayOutput)
}

// A list of network tags to associate with the VM.
func (o ComputeEngineTargetDetailsResponseOutput) NetworkTags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ComputeEngineTargetDetailsResponse) []string { return v.NetworkTags }).(pulumi.StringArrayOutput)
}

// The Google Cloud target project ID or project name.
func (o ComputeEngineTargetDetailsResponseOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeEngineTargetDetailsResponse) string { return v.Project }).(pulumi.StringOutput)
}

// Defines whether the instance has Secure Boot enabled. This can be set to true only if the VM boot option is EFI.
func (o ComputeEngineTargetDetailsResponseOutput) SecureBoot() pulumi.BoolOutput {
	return o.ApplyT(func(v ComputeEngineTargetDetailsResponse) bool { return v.SecureBoot }).(pulumi.BoolOutput)
}

// The service account to associate the VM with.
func (o ComputeEngineTargetDetailsResponseOutput) ServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeEngineTargetDetailsResponse) string { return v.ServiceAccount }).(pulumi.StringOutput)
}

// The name of the VM to create.
func (o ComputeEngineTargetDetailsResponseOutput) VmName() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeEngineTargetDetailsResponse) string { return v.VmName }).(pulumi.StringOutput)
}

// The zone in which to create the VM.
func (o ComputeEngineTargetDetailsResponseOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeEngineTargetDetailsResponse) string { return v.Zone }).(pulumi.StringOutput)
}

// Scheduling information for VM on maintenance/restart behaviour and node allocation in sole tenant nodes.
type ComputeScheduling struct {
	// The minimum number of virtual CPUs this instance will consume when running on a sole-tenant node. Ignored if no node_affinites are configured.
	MinNodeCpus *int `pulumi:"minNodeCpus"`
	// A set of node affinity and anti-affinity configurations for sole tenant nodes.
	NodeAffinities []SchedulingNodeAffinity `pulumi:"nodeAffinities"`
	// How the instance should behave when the host machine undergoes maintenance that may temporarily impact instance performance.
	OnHostMaintenance *ComputeSchedulingOnHostMaintenance `pulumi:"onHostMaintenance"`
	// Whether the Instance should be automatically restarted whenever it is terminated by Compute Engine (not terminated by user). This configuration is identical to `automaticRestart` field in Compute Engine create instance under scheduling. It was changed to an enum (instead of a boolean) to match the default value in Compute Engine which is automatic restart.
	RestartType *ComputeSchedulingRestartType `pulumi:"restartType"`
}

// ComputeSchedulingInput is an input type that accepts ComputeSchedulingArgs and ComputeSchedulingOutput values.
// You can construct a concrete instance of `ComputeSchedulingInput` via:
//
//	ComputeSchedulingArgs{...}
type ComputeSchedulingInput interface {
	pulumi.Input

	ToComputeSchedulingOutput() ComputeSchedulingOutput
	ToComputeSchedulingOutputWithContext(context.Context) ComputeSchedulingOutput
}

// Scheduling information for VM on maintenance/restart behaviour and node allocation in sole tenant nodes.
type ComputeSchedulingArgs struct {
	// The minimum number of virtual CPUs this instance will consume when running on a sole-tenant node. Ignored if no node_affinites are configured.
	MinNodeCpus pulumi.IntPtrInput `pulumi:"minNodeCpus"`
	// A set of node affinity and anti-affinity configurations for sole tenant nodes.
	NodeAffinities SchedulingNodeAffinityArrayInput `pulumi:"nodeAffinities"`
	// How the instance should behave when the host machine undergoes maintenance that may temporarily impact instance performance.
	OnHostMaintenance ComputeSchedulingOnHostMaintenancePtrInput `pulumi:"onHostMaintenance"`
	// Whether the Instance should be automatically restarted whenever it is terminated by Compute Engine (not terminated by user). This configuration is identical to `automaticRestart` field in Compute Engine create instance under scheduling. It was changed to an enum (instead of a boolean) to match the default value in Compute Engine which is automatic restart.
	RestartType ComputeSchedulingRestartTypePtrInput `pulumi:"restartType"`
}

func (ComputeSchedulingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeScheduling)(nil)).Elem()
}

func (i ComputeSchedulingArgs) ToComputeSchedulingOutput() ComputeSchedulingOutput {
	return i.ToComputeSchedulingOutputWithContext(context.Background())
}

func (i ComputeSchedulingArgs) ToComputeSchedulingOutputWithContext(ctx context.Context) ComputeSchedulingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeSchedulingOutput)
}

func (i ComputeSchedulingArgs) ToComputeSchedulingPtrOutput() ComputeSchedulingPtrOutput {
	return i.ToComputeSchedulingPtrOutputWithContext(context.Background())
}

func (i ComputeSchedulingArgs) ToComputeSchedulingPtrOutputWithContext(ctx context.Context) ComputeSchedulingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeSchedulingOutput).ToComputeSchedulingPtrOutputWithContext(ctx)
}

// ComputeSchedulingPtrInput is an input type that accepts ComputeSchedulingArgs, ComputeSchedulingPtr and ComputeSchedulingPtrOutput values.
// You can construct a concrete instance of `ComputeSchedulingPtrInput` via:
//
//	        ComputeSchedulingArgs{...}
//
//	or:
//
//	        nil
type ComputeSchedulingPtrInput interface {
	pulumi.Input

	ToComputeSchedulingPtrOutput() ComputeSchedulingPtrOutput
	ToComputeSchedulingPtrOutputWithContext(context.Context) ComputeSchedulingPtrOutput
}

type computeSchedulingPtrType ComputeSchedulingArgs

func ComputeSchedulingPtr(v *ComputeSchedulingArgs) ComputeSchedulingPtrInput {
	return (*computeSchedulingPtrType)(v)
}

func (*computeSchedulingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeScheduling)(nil)).Elem()
}

func (i *computeSchedulingPtrType) ToComputeSchedulingPtrOutput() ComputeSchedulingPtrOutput {
	return i.ToComputeSchedulingPtrOutputWithContext(context.Background())
}

func (i *computeSchedulingPtrType) ToComputeSchedulingPtrOutputWithContext(ctx context.Context) ComputeSchedulingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeSchedulingPtrOutput)
}

// Scheduling information for VM on maintenance/restart behaviour and node allocation in sole tenant nodes.
type ComputeSchedulingOutput struct{ *pulumi.OutputState }

func (ComputeSchedulingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeScheduling)(nil)).Elem()
}

func (o ComputeSchedulingOutput) ToComputeSchedulingOutput() ComputeSchedulingOutput {
	return o
}

func (o ComputeSchedulingOutput) ToComputeSchedulingOutputWithContext(ctx context.Context) ComputeSchedulingOutput {
	return o
}

func (o ComputeSchedulingOutput) ToComputeSchedulingPtrOutput() ComputeSchedulingPtrOutput {
	return o.ToComputeSchedulingPtrOutputWithContext(context.Background())
}

func (o ComputeSchedulingOutput) ToComputeSchedulingPtrOutputWithContext(ctx context.Context) ComputeSchedulingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComputeScheduling) *ComputeScheduling {
		return &v
	}).(ComputeSchedulingPtrOutput)
}

// The minimum number of virtual CPUs this instance will consume when running on a sole-tenant node. Ignored if no node_affinites are configured.
func (o ComputeSchedulingOutput) MinNodeCpus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ComputeScheduling) *int { return v.MinNodeCpus }).(pulumi.IntPtrOutput)
}

// A set of node affinity and anti-affinity configurations for sole tenant nodes.
func (o ComputeSchedulingOutput) NodeAffinities() SchedulingNodeAffinityArrayOutput {
	return o.ApplyT(func(v ComputeScheduling) []SchedulingNodeAffinity { return v.NodeAffinities }).(SchedulingNodeAffinityArrayOutput)
}

// How the instance should behave when the host machine undergoes maintenance that may temporarily impact instance performance.
func (o ComputeSchedulingOutput) OnHostMaintenance() ComputeSchedulingOnHostMaintenancePtrOutput {
	return o.ApplyT(func(v ComputeScheduling) *ComputeSchedulingOnHostMaintenance { return v.OnHostMaintenance }).(ComputeSchedulingOnHostMaintenancePtrOutput)
}

// Whether the Instance should be automatically restarted whenever it is terminated by Compute Engine (not terminated by user). This configuration is identical to `automaticRestart` field in Compute Engine create instance under scheduling. It was changed to an enum (instead of a boolean) to match the default value in Compute Engine which is automatic restart.
func (o ComputeSchedulingOutput) RestartType() ComputeSchedulingRestartTypePtrOutput {
	return o.ApplyT(func(v ComputeScheduling) *ComputeSchedulingRestartType { return v.RestartType }).(ComputeSchedulingRestartTypePtrOutput)
}

type ComputeSchedulingPtrOutput struct{ *pulumi.OutputState }

func (ComputeSchedulingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeScheduling)(nil)).Elem()
}

func (o ComputeSchedulingPtrOutput) ToComputeSchedulingPtrOutput() ComputeSchedulingPtrOutput {
	return o
}

func (o ComputeSchedulingPtrOutput) ToComputeSchedulingPtrOutputWithContext(ctx context.Context) ComputeSchedulingPtrOutput {
	return o
}

func (o ComputeSchedulingPtrOutput) Elem() ComputeSchedulingOutput {
	return o.ApplyT(func(v *ComputeScheduling) ComputeScheduling {
		if v != nil {
			return *v
		}
		var ret ComputeScheduling
		return ret
	}).(ComputeSchedulingOutput)
}

// The minimum number of virtual CPUs this instance will consume when running on a sole-tenant node. Ignored if no node_affinites are configured.
func (o ComputeSchedulingPtrOutput) MinNodeCpus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ComputeScheduling) *int {
		if v == nil {
			return nil
		}
		return v.MinNodeCpus
	}).(pulumi.IntPtrOutput)
}

// A set of node affinity and anti-affinity configurations for sole tenant nodes.
func (o ComputeSchedulingPtrOutput) NodeAffinities() SchedulingNodeAffinityArrayOutput {
	return o.ApplyT(func(v *ComputeScheduling) []SchedulingNodeAffinity {
		if v == nil {
			return nil
		}
		return v.NodeAffinities
	}).(SchedulingNodeAffinityArrayOutput)
}

// How the instance should behave when the host machine undergoes maintenance that may temporarily impact instance performance.
func (o ComputeSchedulingPtrOutput) OnHostMaintenance() ComputeSchedulingOnHostMaintenancePtrOutput {
	return o.ApplyT(func(v *ComputeScheduling) *ComputeSchedulingOnHostMaintenance {
		if v == nil {
			return nil
		}
		return v.OnHostMaintenance
	}).(ComputeSchedulingOnHostMaintenancePtrOutput)
}

// Whether the Instance should be automatically restarted whenever it is terminated by Compute Engine (not terminated by user). This configuration is identical to `automaticRestart` field in Compute Engine create instance under scheduling. It was changed to an enum (instead of a boolean) to match the default value in Compute Engine which is automatic restart.
func (o ComputeSchedulingPtrOutput) RestartType() ComputeSchedulingRestartTypePtrOutput {
	return o.ApplyT(func(v *ComputeScheduling) *ComputeSchedulingRestartType {
		if v == nil {
			return nil
		}
		return v.RestartType
	}).(ComputeSchedulingRestartTypePtrOutput)
}

// Scheduling information for VM on maintenance/restart behaviour and node allocation in sole tenant nodes.
type ComputeSchedulingResponse struct {
	// The minimum number of virtual CPUs this instance will consume when running on a sole-tenant node. Ignored if no node_affinites are configured.
	MinNodeCpus int `pulumi:"minNodeCpus"`
	// A set of node affinity and anti-affinity configurations for sole tenant nodes.
	NodeAffinities []SchedulingNodeAffinityResponse `pulumi:"nodeAffinities"`
	// How the instance should behave when the host machine undergoes maintenance that may temporarily impact instance performance.
	OnHostMaintenance string `pulumi:"onHostMaintenance"`
	// Whether the Instance should be automatically restarted whenever it is terminated by Compute Engine (not terminated by user). This configuration is identical to `automaticRestart` field in Compute Engine create instance under scheduling. It was changed to an enum (instead of a boolean) to match the default value in Compute Engine which is automatic restart.
	RestartType string `pulumi:"restartType"`
}

// Scheduling information for VM on maintenance/restart behaviour and node allocation in sole tenant nodes.
type ComputeSchedulingResponseOutput struct{ *pulumi.OutputState }

func (ComputeSchedulingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeSchedulingResponse)(nil)).Elem()
}

func (o ComputeSchedulingResponseOutput) ToComputeSchedulingResponseOutput() ComputeSchedulingResponseOutput {
	return o
}

func (o ComputeSchedulingResponseOutput) ToComputeSchedulingResponseOutputWithContext(ctx context.Context) ComputeSchedulingResponseOutput {
	return o
}

// The minimum number of virtual CPUs this instance will consume when running on a sole-tenant node. Ignored if no node_affinites are configured.
func (o ComputeSchedulingResponseOutput) MinNodeCpus() pulumi.IntOutput {
	return o.ApplyT(func(v ComputeSchedulingResponse) int { return v.MinNodeCpus }).(pulumi.IntOutput)
}

// A set of node affinity and anti-affinity configurations for sole tenant nodes.
func (o ComputeSchedulingResponseOutput) NodeAffinities() SchedulingNodeAffinityResponseArrayOutput {
	return o.ApplyT(func(v ComputeSchedulingResponse) []SchedulingNodeAffinityResponse { return v.NodeAffinities }).(SchedulingNodeAffinityResponseArrayOutput)
}

// How the instance should behave when the host machine undergoes maintenance that may temporarily impact instance performance.
func (o ComputeSchedulingResponseOutput) OnHostMaintenance() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeSchedulingResponse) string { return v.OnHostMaintenance }).(pulumi.StringOutput)
}

// Whether the Instance should be automatically restarted whenever it is terminated by Compute Engine (not terminated by user). This configuration is identical to `automaticRestart` field in Compute Engine create instance under scheduling. It was changed to an enum (instead of a boolean) to match the default value in Compute Engine which is automatic restart.
func (o ComputeSchedulingResponseOutput) RestartType() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeSchedulingResponse) string { return v.RestartType }).(pulumi.StringOutput)
}

// CutoverForecast holds information about future CutoverJobs of a MigratingVm.
type CutoverForecastResponse struct {
	// Estimation of the CutoverJob duration.
	EstimatedCutoverJobDuration string `pulumi:"estimatedCutoverJobDuration"`
}

// CutoverForecast holds information about future CutoverJobs of a MigratingVm.
type CutoverForecastResponseOutput struct{ *pulumi.OutputState }

func (CutoverForecastResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CutoverForecastResponse)(nil)).Elem()
}

func (o CutoverForecastResponseOutput) ToCutoverForecastResponseOutput() CutoverForecastResponseOutput {
	return o
}

func (o CutoverForecastResponseOutput) ToCutoverForecastResponseOutputWithContext(ctx context.Context) CutoverForecastResponseOutput {
	return o
}

// Estimation of the CutoverJob duration.
func (o CutoverForecastResponseOutput) EstimatedCutoverJobDuration() pulumi.StringOutput {
	return o.ApplyT(func(v CutoverForecastResponse) string { return v.EstimatedCutoverJobDuration }).(pulumi.StringOutput)
}

// CutoverJob message describes a cutover of a migrating VM. The CutoverJob is the operation of shutting down the VM, creating a snapshot and clonning the VM using the replicated snapshot.
type CutoverJobResponse struct {
	// Details of the target Persistent Disks in Compute Engine.
	ComputeEngineDisksTargetDetails ComputeEngineDisksTargetDetailsResponse `pulumi:"computeEngineDisksTargetDetails"`
	// Details of the target VM in Compute Engine.
	ComputeEngineTargetDetails ComputeEngineTargetDetailsResponse `pulumi:"computeEngineTargetDetails"`
	// The time the cutover job was created (as an API call, not when it was actually created in the target).
	CreateTime string `pulumi:"createTime"`
	// The time the cutover job had finished.
	EndTime string `pulumi:"endTime"`
	// Provides details for the errors that led to the Cutover Job's state.
	Error StatusResponse `pulumi:"error"`
	// The name of the cutover job.
	Name string `pulumi:"name"`
	// The current progress in percentage of the cutover job.
	ProgressPercent int `pulumi:"progressPercent"`
	// State of the cutover job.
	State string `pulumi:"state"`
	// A message providing possible extra details about the current state.
	StateMessage string `pulumi:"stateMessage"`
	// The time the state was last updated.
	StateTime string `pulumi:"stateTime"`
	// The cutover steps list representing its progress.
	Steps []CutoverStepResponse `pulumi:"steps"`
}

// CutoverJob message describes a cutover of a migrating VM. The CutoverJob is the operation of shutting down the VM, creating a snapshot and clonning the VM using the replicated snapshot.
type CutoverJobResponseOutput struct{ *pulumi.OutputState }

func (CutoverJobResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CutoverJobResponse)(nil)).Elem()
}

func (o CutoverJobResponseOutput) ToCutoverJobResponseOutput() CutoverJobResponseOutput {
	return o
}

func (o CutoverJobResponseOutput) ToCutoverJobResponseOutputWithContext(ctx context.Context) CutoverJobResponseOutput {
	return o
}

// Details of the target Persistent Disks in Compute Engine.
func (o CutoverJobResponseOutput) ComputeEngineDisksTargetDetails() ComputeEngineDisksTargetDetailsResponseOutput {
	return o.ApplyT(func(v CutoverJobResponse) ComputeEngineDisksTargetDetailsResponse {
		return v.ComputeEngineDisksTargetDetails
	}).(ComputeEngineDisksTargetDetailsResponseOutput)
}

// Details of the target VM in Compute Engine.
func (o CutoverJobResponseOutput) ComputeEngineTargetDetails() ComputeEngineTargetDetailsResponseOutput {
	return o.ApplyT(func(v CutoverJobResponse) ComputeEngineTargetDetailsResponse { return v.ComputeEngineTargetDetails }).(ComputeEngineTargetDetailsResponseOutput)
}

// The time the cutover job was created (as an API call, not when it was actually created in the target).
func (o CutoverJobResponseOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v CutoverJobResponse) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The time the cutover job had finished.
func (o CutoverJobResponseOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v CutoverJobResponse) string { return v.EndTime }).(pulumi.StringOutput)
}

// Provides details for the errors that led to the Cutover Job's state.
func (o CutoverJobResponseOutput) Error() StatusResponseOutput {
	return o.ApplyT(func(v CutoverJobResponse) StatusResponse { return v.Error }).(StatusResponseOutput)
}

// The name of the cutover job.
func (o CutoverJobResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CutoverJobResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The current progress in percentage of the cutover job.
func (o CutoverJobResponseOutput) ProgressPercent() pulumi.IntOutput {
	return o.ApplyT(func(v CutoverJobResponse) int { return v.ProgressPercent }).(pulumi.IntOutput)
}

// State of the cutover job.
func (o CutoverJobResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v CutoverJobResponse) string { return v.State }).(pulumi.StringOutput)
}

// A message providing possible extra details about the current state.
func (o CutoverJobResponseOutput) StateMessage() pulumi.StringOutput {
	return o.ApplyT(func(v CutoverJobResponse) string { return v.StateMessage }).(pulumi.StringOutput)
}

// The time the state was last updated.
func (o CutoverJobResponseOutput) StateTime() pulumi.StringOutput {
	return o.ApplyT(func(v CutoverJobResponse) string { return v.StateTime }).(pulumi.StringOutput)
}

// The cutover steps list representing its progress.
func (o CutoverJobResponseOutput) Steps() CutoverStepResponseArrayOutput {
	return o.ApplyT(func(v CutoverJobResponse) []CutoverStepResponse { return v.Steps }).(CutoverStepResponseArrayOutput)
}

type CutoverJobResponseArrayOutput struct{ *pulumi.OutputState }

func (CutoverJobResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CutoverJobResponse)(nil)).Elem()
}

func (o CutoverJobResponseArrayOutput) ToCutoverJobResponseArrayOutput() CutoverJobResponseArrayOutput {
	return o
}

func (o CutoverJobResponseArrayOutput) ToCutoverJobResponseArrayOutputWithContext(ctx context.Context) CutoverJobResponseArrayOutput {
	return o
}

func (o CutoverJobResponseArrayOutput) Index(i pulumi.IntInput) CutoverJobResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CutoverJobResponse {
		return vs[0].([]CutoverJobResponse)[vs[1].(int)]
	}).(CutoverJobResponseOutput)
}

// CutoverStep holds information about the cutover step progress.
type CutoverStepResponse struct {
	// The time the step has ended.
	EndTime string `pulumi:"endTime"`
	// Final sync step.
	FinalSync ReplicationCycleResponse `pulumi:"finalSync"`
	// Instantiating migrated VM step.
	InstantiatingMigratedVm InstantiatingMigratedVMStepResponse `pulumi:"instantiatingMigratedVm"`
	// Preparing VM disks step.
	PreparingVmDisks PreparingVMDisksStepResponse `pulumi:"preparingVmDisks"`
	// A replication cycle prior cutover step.
	PreviousReplicationCycle ReplicationCycleResponse `pulumi:"previousReplicationCycle"`
	// Shutting down VM step.
	ShuttingDownSourceVm ShuttingDownSourceVMStepResponse `pulumi:"shuttingDownSourceVm"`
	// The time the step has started.
	StartTime string `pulumi:"startTime"`
}

// CutoverStep holds information about the cutover step progress.
type CutoverStepResponseOutput struct{ *pulumi.OutputState }

func (CutoverStepResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CutoverStepResponse)(nil)).Elem()
}

func (o CutoverStepResponseOutput) ToCutoverStepResponseOutput() CutoverStepResponseOutput {
	return o
}

func (o CutoverStepResponseOutput) ToCutoverStepResponseOutputWithContext(ctx context.Context) CutoverStepResponseOutput {
	return o
}

// The time the step has ended.
func (o CutoverStepResponseOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v CutoverStepResponse) string { return v.EndTime }).(pulumi.StringOutput)
}

// Final sync step.
func (o CutoverStepResponseOutput) FinalSync() ReplicationCycleResponseOutput {
	return o.ApplyT(func(v CutoverStepResponse) ReplicationCycleResponse { return v.FinalSync }).(ReplicationCycleResponseOutput)
}

// Instantiating migrated VM step.
func (o CutoverStepResponseOutput) InstantiatingMigratedVm() InstantiatingMigratedVMStepResponseOutput {
	return o.ApplyT(func(v CutoverStepResponse) InstantiatingMigratedVMStepResponse { return v.InstantiatingMigratedVm }).(InstantiatingMigratedVMStepResponseOutput)
}

// Preparing VM disks step.
func (o CutoverStepResponseOutput) PreparingVmDisks() PreparingVMDisksStepResponseOutput {
	return o.ApplyT(func(v CutoverStepResponse) PreparingVMDisksStepResponse { return v.PreparingVmDisks }).(PreparingVMDisksStepResponseOutput)
}

// A replication cycle prior cutover step.
func (o CutoverStepResponseOutput) PreviousReplicationCycle() ReplicationCycleResponseOutput {
	return o.ApplyT(func(v CutoverStepResponse) ReplicationCycleResponse { return v.PreviousReplicationCycle }).(ReplicationCycleResponseOutput)
}

// Shutting down VM step.
func (o CutoverStepResponseOutput) ShuttingDownSourceVm() ShuttingDownSourceVMStepResponseOutput {
	return o.ApplyT(func(v CutoverStepResponse) ShuttingDownSourceVMStepResponse { return v.ShuttingDownSourceVm }).(ShuttingDownSourceVMStepResponseOutput)
}

// The time the step has started.
func (o CutoverStepResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v CutoverStepResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

type CutoverStepResponseArrayOutput struct{ *pulumi.OutputState }

func (CutoverStepResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CutoverStepResponse)(nil)).Elem()
}

func (o CutoverStepResponseArrayOutput) ToCutoverStepResponseArrayOutput() CutoverStepResponseArrayOutput {
	return o
}

func (o CutoverStepResponseArrayOutput) ToCutoverStepResponseArrayOutputWithContext(ctx context.Context) CutoverStepResponseArrayOutput {
	return o
}

func (o CutoverStepResponseArrayOutput) Index(i pulumi.IntInput) CutoverStepResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CutoverStepResponse {
		return vs[0].([]CutoverStepResponse)[vs[1].(int)]
	}).(CutoverStepResponseOutput)
}

// CycleStep holds information about a step progress.
type CycleStepResponse struct {
	// The time the cycle step has ended.
	EndTime string `pulumi:"endTime"`
	// Initializing replication step.
	InitializingReplication InitializingReplicationStepResponse `pulumi:"initializingReplication"`
	// Post processing step.
	PostProcessing PostProcessingStepResponse `pulumi:"postProcessing"`
	// Replicating step.
	Replicating ReplicatingStepResponse `pulumi:"replicating"`
	// The time the cycle step has started.
	StartTime string `pulumi:"startTime"`
}

// CycleStep holds information about a step progress.
type CycleStepResponseOutput struct{ *pulumi.OutputState }

func (CycleStepResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CycleStepResponse)(nil)).Elem()
}

func (o CycleStepResponseOutput) ToCycleStepResponseOutput() CycleStepResponseOutput {
	return o
}

func (o CycleStepResponseOutput) ToCycleStepResponseOutputWithContext(ctx context.Context) CycleStepResponseOutput {
	return o
}

// The time the cycle step has ended.
func (o CycleStepResponseOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v CycleStepResponse) string { return v.EndTime }).(pulumi.StringOutput)
}

// Initializing replication step.
func (o CycleStepResponseOutput) InitializingReplication() InitializingReplicationStepResponseOutput {
	return o.ApplyT(func(v CycleStepResponse) InitializingReplicationStepResponse { return v.InitializingReplication }).(InitializingReplicationStepResponseOutput)
}

// Post processing step.
func (o CycleStepResponseOutput) PostProcessing() PostProcessingStepResponseOutput {
	return o.ApplyT(func(v CycleStepResponse) PostProcessingStepResponse { return v.PostProcessing }).(PostProcessingStepResponseOutput)
}

// Replicating step.
func (o CycleStepResponseOutput) Replicating() ReplicatingStepResponseOutput {
	return o.ApplyT(func(v CycleStepResponse) ReplicatingStepResponse { return v.Replicating }).(ReplicatingStepResponseOutput)
}

// The time the cycle step has started.
func (o CycleStepResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v CycleStepResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

type CycleStepResponseArrayOutput struct{ *pulumi.OutputState }

func (CycleStepResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CycleStepResponse)(nil)).Elem()
}

func (o CycleStepResponseArrayOutput) ToCycleStepResponseArrayOutput() CycleStepResponseArrayOutput {
	return o
}

func (o CycleStepResponseArrayOutput) ToCycleStepResponseArrayOutputWithContext(ctx context.Context) CycleStepResponseArrayOutput {
	return o
}

func (o CycleStepResponseArrayOutput) Index(i pulumi.IntInput) CycleStepResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CycleStepResponse {
		return vs[0].([]CycleStepResponse)[vs[1].(int)]
	}).(CycleStepResponseOutput)
}

// Contains details about the image source used to create the disk.
type DiskImageDefaults struct {
	// The Image resource used when creating the disk.
	SourceImage string `pulumi:"sourceImage"`
}

// DiskImageDefaultsInput is an input type that accepts DiskImageDefaultsArgs and DiskImageDefaultsOutput values.
// You can construct a concrete instance of `DiskImageDefaultsInput` via:
//
//	DiskImageDefaultsArgs{...}
type DiskImageDefaultsInput interface {
	pulumi.Input

	ToDiskImageDefaultsOutput() DiskImageDefaultsOutput
	ToDiskImageDefaultsOutputWithContext(context.Context) DiskImageDefaultsOutput
}

// Contains details about the image source used to create the disk.
type DiskImageDefaultsArgs struct {
	// The Image resource used when creating the disk.
	SourceImage pulumi.StringInput `pulumi:"sourceImage"`
}

func (DiskImageDefaultsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskImageDefaults)(nil)).Elem()
}

func (i DiskImageDefaultsArgs) ToDiskImageDefaultsOutput() DiskImageDefaultsOutput {
	return i.ToDiskImageDefaultsOutputWithContext(context.Background())
}

func (i DiskImageDefaultsArgs) ToDiskImageDefaultsOutputWithContext(ctx context.Context) DiskImageDefaultsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskImageDefaultsOutput)
}

func (i DiskImageDefaultsArgs) ToDiskImageDefaultsPtrOutput() DiskImageDefaultsPtrOutput {
	return i.ToDiskImageDefaultsPtrOutputWithContext(context.Background())
}

func (i DiskImageDefaultsArgs) ToDiskImageDefaultsPtrOutputWithContext(ctx context.Context) DiskImageDefaultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskImageDefaultsOutput).ToDiskImageDefaultsPtrOutputWithContext(ctx)
}

// DiskImageDefaultsPtrInput is an input type that accepts DiskImageDefaultsArgs, DiskImageDefaultsPtr and DiskImageDefaultsPtrOutput values.
// You can construct a concrete instance of `DiskImageDefaultsPtrInput` via:
//
//	        DiskImageDefaultsArgs{...}
//
//	or:
//
//	        nil
type DiskImageDefaultsPtrInput interface {
	pulumi.Input

	ToDiskImageDefaultsPtrOutput() DiskImageDefaultsPtrOutput
	ToDiskImageDefaultsPtrOutputWithContext(context.Context) DiskImageDefaultsPtrOutput
}

type diskImageDefaultsPtrType DiskImageDefaultsArgs

func DiskImageDefaultsPtr(v *DiskImageDefaultsArgs) DiskImageDefaultsPtrInput {
	return (*diskImageDefaultsPtrType)(v)
}

func (*diskImageDefaultsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskImageDefaults)(nil)).Elem()
}

func (i *diskImageDefaultsPtrType) ToDiskImageDefaultsPtrOutput() DiskImageDefaultsPtrOutput {
	return i.ToDiskImageDefaultsPtrOutputWithContext(context.Background())
}

func (i *diskImageDefaultsPtrType) ToDiskImageDefaultsPtrOutputWithContext(ctx context.Context) DiskImageDefaultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskImageDefaultsPtrOutput)
}

// Contains details about the image source used to create the disk.
type DiskImageDefaultsOutput struct{ *pulumi.OutputState }

func (DiskImageDefaultsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskImageDefaults)(nil)).Elem()
}

func (o DiskImageDefaultsOutput) ToDiskImageDefaultsOutput() DiskImageDefaultsOutput {
	return o
}

func (o DiskImageDefaultsOutput) ToDiskImageDefaultsOutputWithContext(ctx context.Context) DiskImageDefaultsOutput {
	return o
}

func (o DiskImageDefaultsOutput) ToDiskImageDefaultsPtrOutput() DiskImageDefaultsPtrOutput {
	return o.ToDiskImageDefaultsPtrOutputWithContext(context.Background())
}

func (o DiskImageDefaultsOutput) ToDiskImageDefaultsPtrOutputWithContext(ctx context.Context) DiskImageDefaultsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DiskImageDefaults) *DiskImageDefaults {
		return &v
	}).(DiskImageDefaultsPtrOutput)
}

// The Image resource used when creating the disk.
func (o DiskImageDefaultsOutput) SourceImage() pulumi.StringOutput {
	return o.ApplyT(func(v DiskImageDefaults) string { return v.SourceImage }).(pulumi.StringOutput)
}

type DiskImageDefaultsPtrOutput struct{ *pulumi.OutputState }

func (DiskImageDefaultsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskImageDefaults)(nil)).Elem()
}

func (o DiskImageDefaultsPtrOutput) ToDiskImageDefaultsPtrOutput() DiskImageDefaultsPtrOutput {
	return o
}

func (o DiskImageDefaultsPtrOutput) ToDiskImageDefaultsPtrOutputWithContext(ctx context.Context) DiskImageDefaultsPtrOutput {
	return o
}

func (o DiskImageDefaultsPtrOutput) Elem() DiskImageDefaultsOutput {
	return o.ApplyT(func(v *DiskImageDefaults) DiskImageDefaults {
		if v != nil {
			return *v
		}
		var ret DiskImageDefaults
		return ret
	}).(DiskImageDefaultsOutput)
}

// The Image resource used when creating the disk.
func (o DiskImageDefaultsPtrOutput) SourceImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskImageDefaults) *string {
		if v == nil {
			return nil
		}
		return &v.SourceImage
	}).(pulumi.StringPtrOutput)
}

// Contains details about the image source used to create the disk.
type DiskImageDefaultsResponse struct {
	// The Image resource used when creating the disk.
	SourceImage string `pulumi:"sourceImage"`
}

// Contains details about the image source used to create the disk.
type DiskImageDefaultsResponseOutput struct{ *pulumi.OutputState }

func (DiskImageDefaultsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskImageDefaultsResponse)(nil)).Elem()
}

func (o DiskImageDefaultsResponseOutput) ToDiskImageDefaultsResponseOutput() DiskImageDefaultsResponseOutput {
	return o
}

func (o DiskImageDefaultsResponseOutput) ToDiskImageDefaultsResponseOutputWithContext(ctx context.Context) DiskImageDefaultsResponseOutput {
	return o
}

// The Image resource used when creating the disk.
func (o DiskImageDefaultsResponseOutput) SourceImage() pulumi.StringOutput {
	return o.ApplyT(func(v DiskImageDefaultsResponse) string { return v.SourceImage }).(pulumi.StringOutput)
}

// Details for a disk only migration.
type DisksMigrationDisksTargetDefaults struct {
}

// DisksMigrationDisksTargetDefaultsInput is an input type that accepts DisksMigrationDisksTargetDefaultsArgs and DisksMigrationDisksTargetDefaultsOutput values.
// You can construct a concrete instance of `DisksMigrationDisksTargetDefaultsInput` via:
//
//	DisksMigrationDisksTargetDefaultsArgs{...}
type DisksMigrationDisksTargetDefaultsInput interface {
	pulumi.Input

	ToDisksMigrationDisksTargetDefaultsOutput() DisksMigrationDisksTargetDefaultsOutput
	ToDisksMigrationDisksTargetDefaultsOutputWithContext(context.Context) DisksMigrationDisksTargetDefaultsOutput
}

// Details for a disk only migration.
type DisksMigrationDisksTargetDefaultsArgs struct {
}

func (DisksMigrationDisksTargetDefaultsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DisksMigrationDisksTargetDefaults)(nil)).Elem()
}

func (i DisksMigrationDisksTargetDefaultsArgs) ToDisksMigrationDisksTargetDefaultsOutput() DisksMigrationDisksTargetDefaultsOutput {
	return i.ToDisksMigrationDisksTargetDefaultsOutputWithContext(context.Background())
}

func (i DisksMigrationDisksTargetDefaultsArgs) ToDisksMigrationDisksTargetDefaultsOutputWithContext(ctx context.Context) DisksMigrationDisksTargetDefaultsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DisksMigrationDisksTargetDefaultsOutput)
}

func (i DisksMigrationDisksTargetDefaultsArgs) ToDisksMigrationDisksTargetDefaultsPtrOutput() DisksMigrationDisksTargetDefaultsPtrOutput {
	return i.ToDisksMigrationDisksTargetDefaultsPtrOutputWithContext(context.Background())
}

func (i DisksMigrationDisksTargetDefaultsArgs) ToDisksMigrationDisksTargetDefaultsPtrOutputWithContext(ctx context.Context) DisksMigrationDisksTargetDefaultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DisksMigrationDisksTargetDefaultsOutput).ToDisksMigrationDisksTargetDefaultsPtrOutputWithContext(ctx)
}

// DisksMigrationDisksTargetDefaultsPtrInput is an input type that accepts DisksMigrationDisksTargetDefaultsArgs, DisksMigrationDisksTargetDefaultsPtr and DisksMigrationDisksTargetDefaultsPtrOutput values.
// You can construct a concrete instance of `DisksMigrationDisksTargetDefaultsPtrInput` via:
//
//	        DisksMigrationDisksTargetDefaultsArgs{...}
//
//	or:
//
//	        nil
type DisksMigrationDisksTargetDefaultsPtrInput interface {
	pulumi.Input

	ToDisksMigrationDisksTargetDefaultsPtrOutput() DisksMigrationDisksTargetDefaultsPtrOutput
	ToDisksMigrationDisksTargetDefaultsPtrOutputWithContext(context.Context) DisksMigrationDisksTargetDefaultsPtrOutput
}

type disksMigrationDisksTargetDefaultsPtrType DisksMigrationDisksTargetDefaultsArgs

func DisksMigrationDisksTargetDefaultsPtr(v *DisksMigrationDisksTargetDefaultsArgs) DisksMigrationDisksTargetDefaultsPtrInput {
	return (*disksMigrationDisksTargetDefaultsPtrType)(v)
}

func (*disksMigrationDisksTargetDefaultsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DisksMigrationDisksTargetDefaults)(nil)).Elem()
}

func (i *disksMigrationDisksTargetDefaultsPtrType) ToDisksMigrationDisksTargetDefaultsPtrOutput() DisksMigrationDisksTargetDefaultsPtrOutput {
	return i.ToDisksMigrationDisksTargetDefaultsPtrOutputWithContext(context.Background())
}

func (i *disksMigrationDisksTargetDefaultsPtrType) ToDisksMigrationDisksTargetDefaultsPtrOutputWithContext(ctx context.Context) DisksMigrationDisksTargetDefaultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DisksMigrationDisksTargetDefaultsPtrOutput)
}

// Details for a disk only migration.
type DisksMigrationDisksTargetDefaultsOutput struct{ *pulumi.OutputState }

func (DisksMigrationDisksTargetDefaultsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DisksMigrationDisksTargetDefaults)(nil)).Elem()
}

func (o DisksMigrationDisksTargetDefaultsOutput) ToDisksMigrationDisksTargetDefaultsOutput() DisksMigrationDisksTargetDefaultsOutput {
	return o
}

func (o DisksMigrationDisksTargetDefaultsOutput) ToDisksMigrationDisksTargetDefaultsOutputWithContext(ctx context.Context) DisksMigrationDisksTargetDefaultsOutput {
	return o
}

func (o DisksMigrationDisksTargetDefaultsOutput) ToDisksMigrationDisksTargetDefaultsPtrOutput() DisksMigrationDisksTargetDefaultsPtrOutput {
	return o.ToDisksMigrationDisksTargetDefaultsPtrOutputWithContext(context.Background())
}

func (o DisksMigrationDisksTargetDefaultsOutput) ToDisksMigrationDisksTargetDefaultsPtrOutputWithContext(ctx context.Context) DisksMigrationDisksTargetDefaultsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DisksMigrationDisksTargetDefaults) *DisksMigrationDisksTargetDefaults {
		return &v
	}).(DisksMigrationDisksTargetDefaultsPtrOutput)
}

type DisksMigrationDisksTargetDefaultsPtrOutput struct{ *pulumi.OutputState }

func (DisksMigrationDisksTargetDefaultsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DisksMigrationDisksTargetDefaults)(nil)).Elem()
}

func (o DisksMigrationDisksTargetDefaultsPtrOutput) ToDisksMigrationDisksTargetDefaultsPtrOutput() DisksMigrationDisksTargetDefaultsPtrOutput {
	return o
}

func (o DisksMigrationDisksTargetDefaultsPtrOutput) ToDisksMigrationDisksTargetDefaultsPtrOutputWithContext(ctx context.Context) DisksMigrationDisksTargetDefaultsPtrOutput {
	return o
}

func (o DisksMigrationDisksTargetDefaultsPtrOutput) Elem() DisksMigrationDisksTargetDefaultsOutput {
	return o.ApplyT(func(v *DisksMigrationDisksTargetDefaults) DisksMigrationDisksTargetDefaults {
		if v != nil {
			return *v
		}
		var ret DisksMigrationDisksTargetDefaults
		return ret
	}).(DisksMigrationDisksTargetDefaultsOutput)
}

// Details for a disk only migration.
type DisksMigrationDisksTargetDefaultsResponse struct {
}

// Details for a disk only migration.
type DisksMigrationDisksTargetDefaultsResponseOutput struct{ *pulumi.OutputState }

func (DisksMigrationDisksTargetDefaultsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DisksMigrationDisksTargetDefaultsResponse)(nil)).Elem()
}

func (o DisksMigrationDisksTargetDefaultsResponseOutput) ToDisksMigrationDisksTargetDefaultsResponseOutput() DisksMigrationDisksTargetDefaultsResponseOutput {
	return o
}

func (o DisksMigrationDisksTargetDefaultsResponseOutput) ToDisksMigrationDisksTargetDefaultsResponseOutputWithContext(ctx context.Context) DisksMigrationDisksTargetDefaultsResponseOutput {
	return o
}

// Details for a disks-only migration.
type DisksMigrationDisksTargetDetailsResponse struct {
}

// Details for a disks-only migration.
type DisksMigrationDisksTargetDetailsResponseOutput struct{ *pulumi.OutputState }

func (DisksMigrationDisksTargetDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DisksMigrationDisksTargetDetailsResponse)(nil)).Elem()
}

func (o DisksMigrationDisksTargetDetailsResponseOutput) ToDisksMigrationDisksTargetDetailsResponseOutput() DisksMigrationDisksTargetDetailsResponseOutput {
	return o
}

func (o DisksMigrationDisksTargetDetailsResponseOutput) ToDisksMigrationDisksTargetDetailsResponseOutputWithContext(ctx context.Context) DisksMigrationDisksTargetDetailsResponseOutput {
	return o
}

// Details for creation of a VM that migrated data disks will be attached to.
type DisksMigrationVmTargetDefaults struct {
	// Optional. Additional licenses to assign to the VM.
	AdditionalLicenses []string `pulumi:"additionalLicenses"`
	// Optional. Details of the boot disk of the VM.
	BootDiskDefaults *BootDiskDefaults `pulumi:"bootDiskDefaults"`
	// Optional. Compute instance scheduling information (if empty default is used).
	ComputeScheduling *ComputeScheduling `pulumi:"computeScheduling"`
	// Optional. The encryption to apply to the VM.
	Encryption *Encryption `pulumi:"encryption"`
	// Optional. The hostname to assign to the VM.
	Hostname *string `pulumi:"hostname"`
	// Optional. A map of labels to associate with the VM.
	Labels map[string]string `pulumi:"labels"`
	// The machine type to create the VM with.
	MachineType string `pulumi:"machineType"`
	// Optional. The machine type series to create the VM with. For presentation only.
	MachineTypeSeries *string `pulumi:"machineTypeSeries"`
	// Optional. The metadata key/value pairs to assign to the VM.
	Metadata map[string]string `pulumi:"metadata"`
	// Optional. NICs to attach to the VM.
	NetworkInterfaces []NetworkInterface `pulumi:"networkInterfaces"`
	// Optional. A list of network tags to associate with the VM.
	NetworkTags []string `pulumi:"networkTags"`
	// Optional. Defines whether the instance has Secure Boot enabled. This can be set to true only if the VM boot option is EFI.
	SecureBoot *bool `pulumi:"secureBoot"`
	// Optional. The service account to associate the VM with.
	ServiceAccount *string `pulumi:"serviceAccount"`
	// The name of the VM to create.
	VmName string `pulumi:"vmName"`
}

// DisksMigrationVmTargetDefaultsInput is an input type that accepts DisksMigrationVmTargetDefaultsArgs and DisksMigrationVmTargetDefaultsOutput values.
// You can construct a concrete instance of `DisksMigrationVmTargetDefaultsInput` via:
//
//	DisksMigrationVmTargetDefaultsArgs{...}
type DisksMigrationVmTargetDefaultsInput interface {
	pulumi.Input

	ToDisksMigrationVmTargetDefaultsOutput() DisksMigrationVmTargetDefaultsOutput
	ToDisksMigrationVmTargetDefaultsOutputWithContext(context.Context) DisksMigrationVmTargetDefaultsOutput
}

// Details for creation of a VM that migrated data disks will be attached to.
type DisksMigrationVmTargetDefaultsArgs struct {
	// Optional. Additional licenses to assign to the VM.
	AdditionalLicenses pulumi.StringArrayInput `pulumi:"additionalLicenses"`
	// Optional. Details of the boot disk of the VM.
	BootDiskDefaults BootDiskDefaultsPtrInput `pulumi:"bootDiskDefaults"`
	// Optional. Compute instance scheduling information (if empty default is used).
	ComputeScheduling ComputeSchedulingPtrInput `pulumi:"computeScheduling"`
	// Optional. The encryption to apply to the VM.
	Encryption EncryptionPtrInput `pulumi:"encryption"`
	// Optional. The hostname to assign to the VM.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Optional. A map of labels to associate with the VM.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// The machine type to create the VM with.
	MachineType pulumi.StringInput `pulumi:"machineType"`
	// Optional. The machine type series to create the VM with. For presentation only.
	MachineTypeSeries pulumi.StringPtrInput `pulumi:"machineTypeSeries"`
	// Optional. The metadata key/value pairs to assign to the VM.
	Metadata pulumi.StringMapInput `pulumi:"metadata"`
	// Optional. NICs to attach to the VM.
	NetworkInterfaces NetworkInterfaceArrayInput `pulumi:"networkInterfaces"`
	// Optional. A list of network tags to associate with the VM.
	NetworkTags pulumi.StringArrayInput `pulumi:"networkTags"`
	// Optional. Defines whether the instance has Secure Boot enabled. This can be set to true only if the VM boot option is EFI.
	SecureBoot pulumi.BoolPtrInput `pulumi:"secureBoot"`
	// Optional. The service account to associate the VM with.
	ServiceAccount pulumi.StringPtrInput `pulumi:"serviceAccount"`
	// The name of the VM to create.
	VmName pulumi.StringInput `pulumi:"vmName"`
}

func (DisksMigrationVmTargetDefaultsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DisksMigrationVmTargetDefaults)(nil)).Elem()
}

func (i DisksMigrationVmTargetDefaultsArgs) ToDisksMigrationVmTargetDefaultsOutput() DisksMigrationVmTargetDefaultsOutput {
	return i.ToDisksMigrationVmTargetDefaultsOutputWithContext(context.Background())
}

func (i DisksMigrationVmTargetDefaultsArgs) ToDisksMigrationVmTargetDefaultsOutputWithContext(ctx context.Context) DisksMigrationVmTargetDefaultsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DisksMigrationVmTargetDefaultsOutput)
}

func (i DisksMigrationVmTargetDefaultsArgs) ToDisksMigrationVmTargetDefaultsPtrOutput() DisksMigrationVmTargetDefaultsPtrOutput {
	return i.ToDisksMigrationVmTargetDefaultsPtrOutputWithContext(context.Background())
}

func (i DisksMigrationVmTargetDefaultsArgs) ToDisksMigrationVmTargetDefaultsPtrOutputWithContext(ctx context.Context) DisksMigrationVmTargetDefaultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DisksMigrationVmTargetDefaultsOutput).ToDisksMigrationVmTargetDefaultsPtrOutputWithContext(ctx)
}

// DisksMigrationVmTargetDefaultsPtrInput is an input type that accepts DisksMigrationVmTargetDefaultsArgs, DisksMigrationVmTargetDefaultsPtr and DisksMigrationVmTargetDefaultsPtrOutput values.
// You can construct a concrete instance of `DisksMigrationVmTargetDefaultsPtrInput` via:
//
//	        DisksMigrationVmTargetDefaultsArgs{...}
//
//	or:
//
//	        nil
type DisksMigrationVmTargetDefaultsPtrInput interface {
	pulumi.Input

	ToDisksMigrationVmTargetDefaultsPtrOutput() DisksMigrationVmTargetDefaultsPtrOutput
	ToDisksMigrationVmTargetDefaultsPtrOutputWithContext(context.Context) DisksMigrationVmTargetDefaultsPtrOutput
}

type disksMigrationVmTargetDefaultsPtrType DisksMigrationVmTargetDefaultsArgs

func DisksMigrationVmTargetDefaultsPtr(v *DisksMigrationVmTargetDefaultsArgs) DisksMigrationVmTargetDefaultsPtrInput {
	return (*disksMigrationVmTargetDefaultsPtrType)(v)
}

func (*disksMigrationVmTargetDefaultsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DisksMigrationVmTargetDefaults)(nil)).Elem()
}

func (i *disksMigrationVmTargetDefaultsPtrType) ToDisksMigrationVmTargetDefaultsPtrOutput() DisksMigrationVmTargetDefaultsPtrOutput {
	return i.ToDisksMigrationVmTargetDefaultsPtrOutputWithContext(context.Background())
}

func (i *disksMigrationVmTargetDefaultsPtrType) ToDisksMigrationVmTargetDefaultsPtrOutputWithContext(ctx context.Context) DisksMigrationVmTargetDefaultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DisksMigrationVmTargetDefaultsPtrOutput)
}

// Details for creation of a VM that migrated data disks will be attached to.
type DisksMigrationVmTargetDefaultsOutput struct{ *pulumi.OutputState }

func (DisksMigrationVmTargetDefaultsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DisksMigrationVmTargetDefaults)(nil)).Elem()
}

func (o DisksMigrationVmTargetDefaultsOutput) ToDisksMigrationVmTargetDefaultsOutput() DisksMigrationVmTargetDefaultsOutput {
	return o
}

func (o DisksMigrationVmTargetDefaultsOutput) ToDisksMigrationVmTargetDefaultsOutputWithContext(ctx context.Context) DisksMigrationVmTargetDefaultsOutput {
	return o
}

func (o DisksMigrationVmTargetDefaultsOutput) ToDisksMigrationVmTargetDefaultsPtrOutput() DisksMigrationVmTargetDefaultsPtrOutput {
	return o.ToDisksMigrationVmTargetDefaultsPtrOutputWithContext(context.Background())
}

func (o DisksMigrationVmTargetDefaultsOutput) ToDisksMigrationVmTargetDefaultsPtrOutputWithContext(ctx context.Context) DisksMigrationVmTargetDefaultsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DisksMigrationVmTargetDefaults) *DisksMigrationVmTargetDefaults {
		return &v
	}).(DisksMigrationVmTargetDefaultsPtrOutput)
}

// Optional. Additional licenses to assign to the VM.
func (o DisksMigrationVmTargetDefaultsOutput) AdditionalLicenses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DisksMigrationVmTargetDefaults) []string { return v.AdditionalLicenses }).(pulumi.StringArrayOutput)
}

// Optional. Details of the boot disk of the VM.
func (o DisksMigrationVmTargetDefaultsOutput) BootDiskDefaults() BootDiskDefaultsPtrOutput {
	return o.ApplyT(func(v DisksMigrationVmTargetDefaults) *BootDiskDefaults { return v.BootDiskDefaults }).(BootDiskDefaultsPtrOutput)
}

// Optional. Compute instance scheduling information (if empty default is used).
func (o DisksMigrationVmTargetDefaultsOutput) ComputeScheduling() ComputeSchedulingPtrOutput {
	return o.ApplyT(func(v DisksMigrationVmTargetDefaults) *ComputeScheduling { return v.ComputeScheduling }).(ComputeSchedulingPtrOutput)
}

// Optional. The encryption to apply to the VM.
func (o DisksMigrationVmTargetDefaultsOutput) Encryption() EncryptionPtrOutput {
	return o.ApplyT(func(v DisksMigrationVmTargetDefaults) *Encryption { return v.Encryption }).(EncryptionPtrOutput)
}

// Optional. The hostname to assign to the VM.
func (o DisksMigrationVmTargetDefaultsOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DisksMigrationVmTargetDefaults) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Optional. A map of labels to associate with the VM.
func (o DisksMigrationVmTargetDefaultsOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v DisksMigrationVmTargetDefaults) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The machine type to create the VM with.
func (o DisksMigrationVmTargetDefaultsOutput) MachineType() pulumi.StringOutput {
	return o.ApplyT(func(v DisksMigrationVmTargetDefaults) string { return v.MachineType }).(pulumi.StringOutput)
}

// Optional. The machine type series to create the VM with. For presentation only.
func (o DisksMigrationVmTargetDefaultsOutput) MachineTypeSeries() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DisksMigrationVmTargetDefaults) *string { return v.MachineTypeSeries }).(pulumi.StringPtrOutput)
}

// Optional. The metadata key/value pairs to assign to the VM.
func (o DisksMigrationVmTargetDefaultsOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v DisksMigrationVmTargetDefaults) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// Optional. NICs to attach to the VM.
func (o DisksMigrationVmTargetDefaultsOutput) NetworkInterfaces() NetworkInterfaceArrayOutput {
	return o.ApplyT(func(v DisksMigrationVmTargetDefaults) []NetworkInterface { return v.NetworkInterfaces }).(NetworkInterfaceArrayOutput)
}

// Optional. A list of network tags to associate with the VM.
func (o DisksMigrationVmTargetDefaultsOutput) NetworkTags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DisksMigrationVmTargetDefaults) []string { return v.NetworkTags }).(pulumi.StringArrayOutput)
}

// Optional. Defines whether the instance has Secure Boot enabled. This can be set to true only if the VM boot option is EFI.
func (o DisksMigrationVmTargetDefaultsOutput) SecureBoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DisksMigrationVmTargetDefaults) *bool { return v.SecureBoot }).(pulumi.BoolPtrOutput)
}

// Optional. The service account to associate the VM with.
func (o DisksMigrationVmTargetDefaultsOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DisksMigrationVmTargetDefaults) *string { return v.ServiceAccount }).(pulumi.StringPtrOutput)
}

// The name of the VM to create.
func (o DisksMigrationVmTargetDefaultsOutput) VmName() pulumi.StringOutput {
	return o.ApplyT(func(v DisksMigrationVmTargetDefaults) string { return v.VmName }).(pulumi.StringOutput)
}

type DisksMigrationVmTargetDefaultsPtrOutput struct{ *pulumi.OutputState }

func (DisksMigrationVmTargetDefaultsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DisksMigrationVmTargetDefaults)(nil)).Elem()
}

func (o DisksMigrationVmTargetDefaultsPtrOutput) ToDisksMigrationVmTargetDefaultsPtrOutput() DisksMigrationVmTargetDefaultsPtrOutput {
	return o
}

func (o DisksMigrationVmTargetDefaultsPtrOutput) ToDisksMigrationVmTargetDefaultsPtrOutputWithContext(ctx context.Context) DisksMigrationVmTargetDefaultsPtrOutput {
	return o
}

func (o DisksMigrationVmTargetDefaultsPtrOutput) Elem() DisksMigrationVmTargetDefaultsOutput {
	return o.ApplyT(func(v *DisksMigrationVmTargetDefaults) DisksMigrationVmTargetDefaults {
		if v != nil {
			return *v
		}
		var ret DisksMigrationVmTargetDefaults
		return ret
	}).(DisksMigrationVmTargetDefaultsOutput)
}

// Optional. Additional licenses to assign to the VM.
func (o DisksMigrationVmTargetDefaultsPtrOutput) AdditionalLicenses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DisksMigrationVmTargetDefaults) []string {
		if v == nil {
			return nil
		}
		return v.AdditionalLicenses
	}).(pulumi.StringArrayOutput)
}

// Optional. Details of the boot disk of the VM.
func (o DisksMigrationVmTargetDefaultsPtrOutput) BootDiskDefaults() BootDiskDefaultsPtrOutput {
	return o.ApplyT(func(v *DisksMigrationVmTargetDefaults) *BootDiskDefaults {
		if v == nil {
			return nil
		}
		return v.BootDiskDefaults
	}).(BootDiskDefaultsPtrOutput)
}

// Optional. Compute instance scheduling information (if empty default is used).
func (o DisksMigrationVmTargetDefaultsPtrOutput) ComputeScheduling() ComputeSchedulingPtrOutput {
	return o.ApplyT(func(v *DisksMigrationVmTargetDefaults) *ComputeScheduling {
		if v == nil {
			return nil
		}
		return v.ComputeScheduling
	}).(ComputeSchedulingPtrOutput)
}

// Optional. The encryption to apply to the VM.
func (o DisksMigrationVmTargetDefaultsPtrOutput) Encryption() EncryptionPtrOutput {
	return o.ApplyT(func(v *DisksMigrationVmTargetDefaults) *Encryption {
		if v == nil {
			return nil
		}
		return v.Encryption
	}).(EncryptionPtrOutput)
}

// Optional. The hostname to assign to the VM.
func (o DisksMigrationVmTargetDefaultsPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DisksMigrationVmTargetDefaults) *string {
		if v == nil {
			return nil
		}
		return v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Optional. A map of labels to associate with the VM.
func (o DisksMigrationVmTargetDefaultsPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DisksMigrationVmTargetDefaults) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// The machine type to create the VM with.
func (o DisksMigrationVmTargetDefaultsPtrOutput) MachineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DisksMigrationVmTargetDefaults) *string {
		if v == nil {
			return nil
		}
		return &v.MachineType
	}).(pulumi.StringPtrOutput)
}

// Optional. The machine type series to create the VM with. For presentation only.
func (o DisksMigrationVmTargetDefaultsPtrOutput) MachineTypeSeries() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DisksMigrationVmTargetDefaults) *string {
		if v == nil {
			return nil
		}
		return v.MachineTypeSeries
	}).(pulumi.StringPtrOutput)
}

// Optional. The metadata key/value pairs to assign to the VM.
func (o DisksMigrationVmTargetDefaultsPtrOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DisksMigrationVmTargetDefaults) map[string]string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringMapOutput)
}

// Optional. NICs to attach to the VM.
func (o DisksMigrationVmTargetDefaultsPtrOutput) NetworkInterfaces() NetworkInterfaceArrayOutput {
	return o.ApplyT(func(v *DisksMigrationVmTargetDefaults) []NetworkInterface {
		if v == nil {
			return nil
		}
		return v.NetworkInterfaces
	}).(NetworkInterfaceArrayOutput)
}

// Optional. A list of network tags to associate with the VM.
func (o DisksMigrationVmTargetDefaultsPtrOutput) NetworkTags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DisksMigrationVmTargetDefaults) []string {
		if v == nil {
			return nil
		}
		return v.NetworkTags
	}).(pulumi.StringArrayOutput)
}

// Optional. Defines whether the instance has Secure Boot enabled. This can be set to true only if the VM boot option is EFI.
func (o DisksMigrationVmTargetDefaultsPtrOutput) SecureBoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DisksMigrationVmTargetDefaults) *bool {
		if v == nil {
			return nil
		}
		return v.SecureBoot
	}).(pulumi.BoolPtrOutput)
}

// Optional. The service account to associate the VM with.
func (o DisksMigrationVmTargetDefaultsPtrOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DisksMigrationVmTargetDefaults) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccount
	}).(pulumi.StringPtrOutput)
}

// The name of the VM to create.
func (o DisksMigrationVmTargetDefaultsPtrOutput) VmName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DisksMigrationVmTargetDefaults) *string {
		if v == nil {
			return nil
		}
		return &v.VmName
	}).(pulumi.StringPtrOutput)
}

// Details for creation of a VM that migrated data disks will be attached to.
type DisksMigrationVmTargetDefaultsResponse struct {
	// Optional. Additional licenses to assign to the VM.
	AdditionalLicenses []string `pulumi:"additionalLicenses"`
	// Optional. Details of the boot disk of the VM.
	BootDiskDefaults BootDiskDefaultsResponse `pulumi:"bootDiskDefaults"`
	// Optional. Compute instance scheduling information (if empty default is used).
	ComputeScheduling ComputeSchedulingResponse `pulumi:"computeScheduling"`
	// Optional. The encryption to apply to the VM.
	Encryption EncryptionResponse `pulumi:"encryption"`
	// Optional. The hostname to assign to the VM.
	Hostname string `pulumi:"hostname"`
	// Optional. A map of labels to associate with the VM.
	Labels map[string]string `pulumi:"labels"`
	// The machine type to create the VM with.
	MachineType string `pulumi:"machineType"`
	// Optional. The machine type series to create the VM with. For presentation only.
	MachineTypeSeries string `pulumi:"machineTypeSeries"`
	// Optional. The metadata key/value pairs to assign to the VM.
	Metadata map[string]string `pulumi:"metadata"`
	// Optional. NICs to attach to the VM.
	NetworkInterfaces []NetworkInterfaceResponse `pulumi:"networkInterfaces"`
	// Optional. A list of network tags to associate with the VM.
	NetworkTags []string `pulumi:"networkTags"`
	// Optional. Defines whether the instance has Secure Boot enabled. This can be set to true only if the VM boot option is EFI.
	SecureBoot bool `pulumi:"secureBoot"`
	// Optional. The service account to associate the VM with.
	ServiceAccount string `pulumi:"serviceAccount"`
	// The name of the VM to create.
	VmName string `pulumi:"vmName"`
}

// Details for creation of a VM that migrated data disks will be attached to.
type DisksMigrationVmTargetDefaultsResponseOutput struct{ *pulumi.OutputState }

func (DisksMigrationVmTargetDefaultsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DisksMigrationVmTargetDefaultsResponse)(nil)).Elem()
}

func (o DisksMigrationVmTargetDefaultsResponseOutput) ToDisksMigrationVmTargetDefaultsResponseOutput() DisksMigrationVmTargetDefaultsResponseOutput {
	return o
}

func (o DisksMigrationVmTargetDefaultsResponseOutput) ToDisksMigrationVmTargetDefaultsResponseOutputWithContext(ctx context.Context) DisksMigrationVmTargetDefaultsResponseOutput {
	return o
}

// Optional. Additional licenses to assign to the VM.
func (o DisksMigrationVmTargetDefaultsResponseOutput) AdditionalLicenses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DisksMigrationVmTargetDefaultsResponse) []string { return v.AdditionalLicenses }).(pulumi.StringArrayOutput)
}

// Optional. Details of the boot disk of the VM.
func (o DisksMigrationVmTargetDefaultsResponseOutput) BootDiskDefaults() BootDiskDefaultsResponseOutput {
	return o.ApplyT(func(v DisksMigrationVmTargetDefaultsResponse) BootDiskDefaultsResponse { return v.BootDiskDefaults }).(BootDiskDefaultsResponseOutput)
}

// Optional. Compute instance scheduling information (if empty default is used).
func (o DisksMigrationVmTargetDefaultsResponseOutput) ComputeScheduling() ComputeSchedulingResponseOutput {
	return o.ApplyT(func(v DisksMigrationVmTargetDefaultsResponse) ComputeSchedulingResponse { return v.ComputeScheduling }).(ComputeSchedulingResponseOutput)
}

// Optional. The encryption to apply to the VM.
func (o DisksMigrationVmTargetDefaultsResponseOutput) Encryption() EncryptionResponseOutput {
	return o.ApplyT(func(v DisksMigrationVmTargetDefaultsResponse) EncryptionResponse { return v.Encryption }).(EncryptionResponseOutput)
}

// Optional. The hostname to assign to the VM.
func (o DisksMigrationVmTargetDefaultsResponseOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v DisksMigrationVmTargetDefaultsResponse) string { return v.Hostname }).(pulumi.StringOutput)
}

// Optional. A map of labels to associate with the VM.
func (o DisksMigrationVmTargetDefaultsResponseOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v DisksMigrationVmTargetDefaultsResponse) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The machine type to create the VM with.
func (o DisksMigrationVmTargetDefaultsResponseOutput) MachineType() pulumi.StringOutput {
	return o.ApplyT(func(v DisksMigrationVmTargetDefaultsResponse) string { return v.MachineType }).(pulumi.StringOutput)
}

// Optional. The machine type series to create the VM with. For presentation only.
func (o DisksMigrationVmTargetDefaultsResponseOutput) MachineTypeSeries() pulumi.StringOutput {
	return o.ApplyT(func(v DisksMigrationVmTargetDefaultsResponse) string { return v.MachineTypeSeries }).(pulumi.StringOutput)
}

// Optional. The metadata key/value pairs to assign to the VM.
func (o DisksMigrationVmTargetDefaultsResponseOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v DisksMigrationVmTargetDefaultsResponse) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// Optional. NICs to attach to the VM.
func (o DisksMigrationVmTargetDefaultsResponseOutput) NetworkInterfaces() NetworkInterfaceResponseArrayOutput {
	return o.ApplyT(func(v DisksMigrationVmTargetDefaultsResponse) []NetworkInterfaceResponse { return v.NetworkInterfaces }).(NetworkInterfaceResponseArrayOutput)
}

// Optional. A list of network tags to associate with the VM.
func (o DisksMigrationVmTargetDefaultsResponseOutput) NetworkTags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DisksMigrationVmTargetDefaultsResponse) []string { return v.NetworkTags }).(pulumi.StringArrayOutput)
}

// Optional. Defines whether the instance has Secure Boot enabled. This can be set to true only if the VM boot option is EFI.
func (o DisksMigrationVmTargetDefaultsResponseOutput) SecureBoot() pulumi.BoolOutput {
	return o.ApplyT(func(v DisksMigrationVmTargetDefaultsResponse) bool { return v.SecureBoot }).(pulumi.BoolOutput)
}

// Optional. The service account to associate the VM with.
func (o DisksMigrationVmTargetDefaultsResponseOutput) ServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v DisksMigrationVmTargetDefaultsResponse) string { return v.ServiceAccount }).(pulumi.StringOutput)
}

// The name of the VM to create.
func (o DisksMigrationVmTargetDefaultsResponseOutput) VmName() pulumi.StringOutput {
	return o.ApplyT(func(v DisksMigrationVmTargetDefaultsResponse) string { return v.VmName }).(pulumi.StringOutput)
}

// Details for the VM created VM as part of disks migration.
type DisksMigrationVmTargetDetailsResponse struct {
	// The URI of the Compute Engine VM.
	VmUri string `pulumi:"vmUri"`
}

// Details for the VM created VM as part of disks migration.
type DisksMigrationVmTargetDetailsResponseOutput struct{ *pulumi.OutputState }

func (DisksMigrationVmTargetDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DisksMigrationVmTargetDetailsResponse)(nil)).Elem()
}

func (o DisksMigrationVmTargetDetailsResponseOutput) ToDisksMigrationVmTargetDetailsResponseOutput() DisksMigrationVmTargetDetailsResponseOutput {
	return o
}

func (o DisksMigrationVmTargetDetailsResponseOutput) ToDisksMigrationVmTargetDetailsResponseOutputWithContext(ctx context.Context) DisksMigrationVmTargetDetailsResponseOutput {
	return o
}

// The URI of the Compute Engine VM.
func (o DisksMigrationVmTargetDetailsResponseOutput) VmUri() pulumi.StringOutput {
	return o.ApplyT(func(v DisksMigrationVmTargetDetailsResponse) string { return v.VmUri }).(pulumi.StringOutput)
}

// Encryption message describes the details of the applied encryption.
type Encryption struct {
	// The name of the encryption key that is stored in Google Cloud KMS.
	KmsKey string `pulumi:"kmsKey"`
}

// EncryptionInput is an input type that accepts EncryptionArgs and EncryptionOutput values.
// You can construct a concrete instance of `EncryptionInput` via:
//
//	EncryptionArgs{...}
type EncryptionInput interface {
	pulumi.Input

	ToEncryptionOutput() EncryptionOutput
	ToEncryptionOutputWithContext(context.Context) EncryptionOutput
}

// Encryption message describes the details of the applied encryption.
type EncryptionArgs struct {
	// The name of the encryption key that is stored in Google Cloud KMS.
	KmsKey pulumi.StringInput `pulumi:"kmsKey"`
}

func (EncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Encryption)(nil)).Elem()
}

func (i EncryptionArgs) ToEncryptionOutput() EncryptionOutput {
	return i.ToEncryptionOutputWithContext(context.Background())
}

func (i EncryptionArgs) ToEncryptionOutputWithContext(ctx context.Context) EncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionOutput)
}

func (i EncryptionArgs) ToEncryptionPtrOutput() EncryptionPtrOutput {
	return i.ToEncryptionPtrOutputWithContext(context.Background())
}

func (i EncryptionArgs) ToEncryptionPtrOutputWithContext(ctx context.Context) EncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionOutput).ToEncryptionPtrOutputWithContext(ctx)
}

// EncryptionPtrInput is an input type that accepts EncryptionArgs, EncryptionPtr and EncryptionPtrOutput values.
// You can construct a concrete instance of `EncryptionPtrInput` via:
//
//	        EncryptionArgs{...}
//
//	or:
//
//	        nil
type EncryptionPtrInput interface {
	pulumi.Input

	ToEncryptionPtrOutput() EncryptionPtrOutput
	ToEncryptionPtrOutputWithContext(context.Context) EncryptionPtrOutput
}

type encryptionPtrType EncryptionArgs

func EncryptionPtr(v *EncryptionArgs) EncryptionPtrInput {
	return (*encryptionPtrType)(v)
}

func (*encryptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Encryption)(nil)).Elem()
}

func (i *encryptionPtrType) ToEncryptionPtrOutput() EncryptionPtrOutput {
	return i.ToEncryptionPtrOutputWithContext(context.Background())
}

func (i *encryptionPtrType) ToEncryptionPtrOutputWithContext(ctx context.Context) EncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionPtrOutput)
}

// Encryption message describes the details of the applied encryption.
type EncryptionOutput struct{ *pulumi.OutputState }

func (EncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Encryption)(nil)).Elem()
}

func (o EncryptionOutput) ToEncryptionOutput() EncryptionOutput {
	return o
}

func (o EncryptionOutput) ToEncryptionOutputWithContext(ctx context.Context) EncryptionOutput {
	return o
}

func (o EncryptionOutput) ToEncryptionPtrOutput() EncryptionPtrOutput {
	return o.ToEncryptionPtrOutputWithContext(context.Background())
}

func (o EncryptionOutput) ToEncryptionPtrOutputWithContext(ctx context.Context) EncryptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Encryption) *Encryption {
		return &v
	}).(EncryptionPtrOutput)
}

// The name of the encryption key that is stored in Google Cloud KMS.
func (o EncryptionOutput) KmsKey() pulumi.StringOutput {
	return o.ApplyT(func(v Encryption) string { return v.KmsKey }).(pulumi.StringOutput)
}

type EncryptionPtrOutput struct{ *pulumi.OutputState }

func (EncryptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Encryption)(nil)).Elem()
}

func (o EncryptionPtrOutput) ToEncryptionPtrOutput() EncryptionPtrOutput {
	return o
}

func (o EncryptionPtrOutput) ToEncryptionPtrOutputWithContext(ctx context.Context) EncryptionPtrOutput {
	return o
}

func (o EncryptionPtrOutput) Elem() EncryptionOutput {
	return o.ApplyT(func(v *Encryption) Encryption {
		if v != nil {
			return *v
		}
		var ret Encryption
		return ret
	}).(EncryptionOutput)
}

// The name of the encryption key that is stored in Google Cloud KMS.
func (o EncryptionPtrOutput) KmsKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Encryption) *string {
		if v == nil {
			return nil
		}
		return &v.KmsKey
	}).(pulumi.StringPtrOutput)
}

// Encryption message describes the details of the applied encryption.
type EncryptionResponse struct {
	// The name of the encryption key that is stored in Google Cloud KMS.
	KmsKey string `pulumi:"kmsKey"`
}

// Encryption message describes the details of the applied encryption.
type EncryptionResponseOutput struct{ *pulumi.OutputState }

func (EncryptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionResponse)(nil)).Elem()
}

func (o EncryptionResponseOutput) ToEncryptionResponseOutput() EncryptionResponseOutput {
	return o
}

func (o EncryptionResponseOutput) ToEncryptionResponseOutputWithContext(ctx context.Context) EncryptionResponseOutput {
	return o
}

// The name of the encryption key that is stored in Google Cloud KMS.
func (o EncryptionResponseOutput) KmsKey() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionResponse) string { return v.KmsKey }).(pulumi.StringOutput)
}

// InitializingReplicationStep contains specific step details.
type InitializingReplicationStepResponse struct {
}

// InitializingReplicationStep contains specific step details.
type InitializingReplicationStepResponseOutput struct{ *pulumi.OutputState }

func (InitializingReplicationStepResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InitializingReplicationStepResponse)(nil)).Elem()
}

func (o InitializingReplicationStepResponseOutput) ToInitializingReplicationStepResponseOutput() InitializingReplicationStepResponseOutput {
	return o
}

func (o InitializingReplicationStepResponseOutput) ToInitializingReplicationStepResponseOutputWithContext(ctx context.Context) InitializingReplicationStepResponseOutput {
	return o
}

// InstantiatingMigratedVMStep contains specific step details.
type InstantiatingMigratedVMStepResponse struct {
}

// InstantiatingMigratedVMStep contains specific step details.
type InstantiatingMigratedVMStepResponseOutput struct{ *pulumi.OutputState }

func (InstantiatingMigratedVMStepResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstantiatingMigratedVMStepResponse)(nil)).Elem()
}

func (o InstantiatingMigratedVMStepResponseOutput) ToInstantiatingMigratedVMStepResponseOutput() InstantiatingMigratedVMStepResponseOutput {
	return o
}

func (o InstantiatingMigratedVMStepResponseOutput) ToInstantiatingMigratedVMStepResponseOutputWithContext(ctx context.Context) InstantiatingMigratedVMStepResponseOutput {
	return o
}

// Describes a URL link.
type LinkResponse struct {
	// Describes what the link offers.
	Description string `pulumi:"description"`
	// The URL of the link.
	Url string `pulumi:"url"`
}

// Describes a URL link.
type LinkResponseOutput struct{ *pulumi.OutputState }

func (LinkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkResponse)(nil)).Elem()
}

func (o LinkResponseOutput) ToLinkResponseOutput() LinkResponseOutput {
	return o
}

func (o LinkResponseOutput) ToLinkResponseOutputWithContext(ctx context.Context) LinkResponseOutput {
	return o
}

// Describes what the link offers.
func (o LinkResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LinkResponse) string { return v.Description }).(pulumi.StringOutput)
}

// The URL of the link.
func (o LinkResponseOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v LinkResponse) string { return v.Url }).(pulumi.StringOutput)
}

type LinkResponseArrayOutput struct{ *pulumi.OutputState }

func (LinkResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LinkResponse)(nil)).Elem()
}

func (o LinkResponseArrayOutput) ToLinkResponseArrayOutput() LinkResponseArrayOutput {
	return o
}

func (o LinkResponseArrayOutput) ToLinkResponseArrayOutputWithContext(ctx context.Context) LinkResponseArrayOutput {
	return o
}

func (o LinkResponseArrayOutput) Index(i pulumi.IntInput) LinkResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LinkResponse {
		return vs[0].([]LinkResponse)[vs[1].(int)]
	}).(LinkResponseOutput)
}

// Provides a localized error message that is safe to return to the user which can be attached to an RPC error.
type LocalizedMessageResponse struct {
	// The locale used following the specification defined at https://www.rfc-editor.org/rfc/bcp/bcp47.txt. Examples are: "en-US", "fr-CH", "es-MX"
	Locale string `pulumi:"locale"`
	// The localized error message in the above locale.
	Message string `pulumi:"message"`
}

// Provides a localized error message that is safe to return to the user which can be attached to an RPC error.
type LocalizedMessageResponseOutput struct{ *pulumi.OutputState }

func (LocalizedMessageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocalizedMessageResponse)(nil)).Elem()
}

func (o LocalizedMessageResponseOutput) ToLocalizedMessageResponseOutput() LocalizedMessageResponseOutput {
	return o
}

func (o LocalizedMessageResponseOutput) ToLocalizedMessageResponseOutputWithContext(ctx context.Context) LocalizedMessageResponseOutput {
	return o
}

// The locale used following the specification defined at https://www.rfc-editor.org/rfc/bcp/bcp47.txt. Examples are: "en-US", "fr-CH", "es-MX"
func (o LocalizedMessageResponseOutput) Locale() pulumi.StringOutput {
	return o.ApplyT(func(v LocalizedMessageResponse) string { return v.Locale }).(pulumi.StringOutput)
}

// The localized error message in the above locale.
func (o LocalizedMessageResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v LocalizedMessageResponse) string { return v.Message }).(pulumi.StringOutput)
}

// Represents migration resource warning information that can be used with google.rpc.Status message. MigrationWarning is used to present the user with warning information in migration operations.
type MigrationWarningResponse struct {
	// Suggested action for solving the warning.
	ActionItem LocalizedMessageResponse `pulumi:"actionItem"`
	// The warning code.
	Code string `pulumi:"code"`
	// URL(s) pointing to additional information on handling the current warning.
	HelpLinks []LinkResponse `pulumi:"helpLinks"`
	// The localized warning message.
	WarningMessage LocalizedMessageResponse `pulumi:"warningMessage"`
	// The time the warning occurred.
	WarningTime string `pulumi:"warningTime"`
}

// Represents migration resource warning information that can be used with google.rpc.Status message. MigrationWarning is used to present the user with warning information in migration operations.
type MigrationWarningResponseOutput struct{ *pulumi.OutputState }

func (MigrationWarningResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrationWarningResponse)(nil)).Elem()
}

func (o MigrationWarningResponseOutput) ToMigrationWarningResponseOutput() MigrationWarningResponseOutput {
	return o
}

func (o MigrationWarningResponseOutput) ToMigrationWarningResponseOutputWithContext(ctx context.Context) MigrationWarningResponseOutput {
	return o
}

// Suggested action for solving the warning.
func (o MigrationWarningResponseOutput) ActionItem() LocalizedMessageResponseOutput {
	return o.ApplyT(func(v MigrationWarningResponse) LocalizedMessageResponse { return v.ActionItem }).(LocalizedMessageResponseOutput)
}

// The warning code.
func (o MigrationWarningResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v MigrationWarningResponse) string { return v.Code }).(pulumi.StringOutput)
}

// URL(s) pointing to additional information on handling the current warning.
func (o MigrationWarningResponseOutput) HelpLinks() LinkResponseArrayOutput {
	return o.ApplyT(func(v MigrationWarningResponse) []LinkResponse { return v.HelpLinks }).(LinkResponseArrayOutput)
}

// The localized warning message.
func (o MigrationWarningResponseOutput) WarningMessage() LocalizedMessageResponseOutput {
	return o.ApplyT(func(v MigrationWarningResponse) LocalizedMessageResponse { return v.WarningMessage }).(LocalizedMessageResponseOutput)
}

// The time the warning occurred.
func (o MigrationWarningResponseOutput) WarningTime() pulumi.StringOutput {
	return o.ApplyT(func(v MigrationWarningResponse) string { return v.WarningTime }).(pulumi.StringOutput)
}

type MigrationWarningResponseArrayOutput struct{ *pulumi.OutputState }

func (MigrationWarningResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrationWarningResponse)(nil)).Elem()
}

func (o MigrationWarningResponseArrayOutput) ToMigrationWarningResponseArrayOutput() MigrationWarningResponseArrayOutput {
	return o
}

func (o MigrationWarningResponseArrayOutput) ToMigrationWarningResponseArrayOutputWithContext(ctx context.Context) MigrationWarningResponseArrayOutput {
	return o
}

func (o MigrationWarningResponseArrayOutput) Index(i pulumi.IntInput) MigrationWarningResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MigrationWarningResponse {
		return vs[0].([]MigrationWarningResponse)[vs[1].(int)]
	}).(MigrationWarningResponseOutput)
}

// NetworkInterface represents a NIC of a VM.
type NetworkInterface struct {
	// The external IP to define in the NIC.
	ExternalIp *string `pulumi:"externalIp"`
	// The internal IP to define in the NIC. The formats accepted are: `ephemeral` \ ipv4 address \ a named address resource full path.
	InternalIp *string `pulumi:"internalIp"`
	// The network to connect the NIC to.
	Network *string `pulumi:"network"`
	// The subnetwork to connect the NIC to.
	Subnetwork *string `pulumi:"subnetwork"`
}

// NetworkInterfaceInput is an input type that accepts NetworkInterfaceArgs and NetworkInterfaceOutput values.
// You can construct a concrete instance of `NetworkInterfaceInput` via:
//
//	NetworkInterfaceArgs{...}
type NetworkInterfaceInput interface {
	pulumi.Input

	ToNetworkInterfaceOutput() NetworkInterfaceOutput
	ToNetworkInterfaceOutputWithContext(context.Context) NetworkInterfaceOutput
}

// NetworkInterface represents a NIC of a VM.
type NetworkInterfaceArgs struct {
	// The external IP to define in the NIC.
	ExternalIp pulumi.StringPtrInput `pulumi:"externalIp"`
	// The internal IP to define in the NIC. The formats accepted are: `ephemeral` \ ipv4 address \ a named address resource full path.
	InternalIp pulumi.StringPtrInput `pulumi:"internalIp"`
	// The network to connect the NIC to.
	Network pulumi.StringPtrInput `pulumi:"network"`
	// The subnetwork to connect the NIC to.
	Subnetwork pulumi.StringPtrInput `pulumi:"subnetwork"`
}

func (NetworkInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkInterface)(nil)).Elem()
}

func (i NetworkInterfaceArgs) ToNetworkInterfaceOutput() NetworkInterfaceOutput {
	return i.ToNetworkInterfaceOutputWithContext(context.Background())
}

func (i NetworkInterfaceArgs) ToNetworkInterfaceOutputWithContext(ctx context.Context) NetworkInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInterfaceOutput)
}

// NetworkInterfaceArrayInput is an input type that accepts NetworkInterfaceArray and NetworkInterfaceArrayOutput values.
// You can construct a concrete instance of `NetworkInterfaceArrayInput` via:
//
//	NetworkInterfaceArray{ NetworkInterfaceArgs{...} }
type NetworkInterfaceArrayInput interface {
	pulumi.Input

	ToNetworkInterfaceArrayOutput() NetworkInterfaceArrayOutput
	ToNetworkInterfaceArrayOutputWithContext(context.Context) NetworkInterfaceArrayOutput
}

type NetworkInterfaceArray []NetworkInterfaceInput

func (NetworkInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkInterface)(nil)).Elem()
}

func (i NetworkInterfaceArray) ToNetworkInterfaceArrayOutput() NetworkInterfaceArrayOutput {
	return i.ToNetworkInterfaceArrayOutputWithContext(context.Background())
}

func (i NetworkInterfaceArray) ToNetworkInterfaceArrayOutputWithContext(ctx context.Context) NetworkInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInterfaceArrayOutput)
}

// NetworkInterface represents a NIC of a VM.
type NetworkInterfaceOutput struct{ *pulumi.OutputState }

func (NetworkInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkInterface)(nil)).Elem()
}

func (o NetworkInterfaceOutput) ToNetworkInterfaceOutput() NetworkInterfaceOutput {
	return o
}

func (o NetworkInterfaceOutput) ToNetworkInterfaceOutputWithContext(ctx context.Context) NetworkInterfaceOutput {
	return o
}

// The external IP to define in the NIC.
func (o NetworkInterfaceOutput) ExternalIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkInterface) *string { return v.ExternalIp }).(pulumi.StringPtrOutput)
}

// The internal IP to define in the NIC. The formats accepted are: `ephemeral` \ ipv4 address \ a named address resource full path.
func (o NetworkInterfaceOutput) InternalIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkInterface) *string { return v.InternalIp }).(pulumi.StringPtrOutput)
}

// The network to connect the NIC to.
func (o NetworkInterfaceOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkInterface) *string { return v.Network }).(pulumi.StringPtrOutput)
}

// The subnetwork to connect the NIC to.
func (o NetworkInterfaceOutput) Subnetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkInterface) *string { return v.Subnetwork }).(pulumi.StringPtrOutput)
}

type NetworkInterfaceArrayOutput struct{ *pulumi.OutputState }

func (NetworkInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkInterface)(nil)).Elem()
}

func (o NetworkInterfaceArrayOutput) ToNetworkInterfaceArrayOutput() NetworkInterfaceArrayOutput {
	return o
}

func (o NetworkInterfaceArrayOutput) ToNetworkInterfaceArrayOutputWithContext(ctx context.Context) NetworkInterfaceArrayOutput {
	return o
}

func (o NetworkInterfaceArrayOutput) Index(i pulumi.IntInput) NetworkInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkInterface {
		return vs[0].([]NetworkInterface)[vs[1].(int)]
	}).(NetworkInterfaceOutput)
}

// NetworkInterface represents a NIC of a VM.
type NetworkInterfaceResponse struct {
	// The external IP to define in the NIC.
	ExternalIp string `pulumi:"externalIp"`
	// The internal IP to define in the NIC. The formats accepted are: `ephemeral` \ ipv4 address \ a named address resource full path.
	InternalIp string `pulumi:"internalIp"`
	// The network to connect the NIC to.
	Network string `pulumi:"network"`
	// The subnetwork to connect the NIC to.
	Subnetwork string `pulumi:"subnetwork"`
}

// NetworkInterface represents a NIC of a VM.
type NetworkInterfaceResponseOutput struct{ *pulumi.OutputState }

func (NetworkInterfaceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkInterfaceResponse)(nil)).Elem()
}

func (o NetworkInterfaceResponseOutput) ToNetworkInterfaceResponseOutput() NetworkInterfaceResponseOutput {
	return o
}

func (o NetworkInterfaceResponseOutput) ToNetworkInterfaceResponseOutputWithContext(ctx context.Context) NetworkInterfaceResponseOutput {
	return o
}

// The external IP to define in the NIC.
func (o NetworkInterfaceResponseOutput) ExternalIp() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkInterfaceResponse) string { return v.ExternalIp }).(pulumi.StringOutput)
}

// The internal IP to define in the NIC. The formats accepted are: `ephemeral` \ ipv4 address \ a named address resource full path.
func (o NetworkInterfaceResponseOutput) InternalIp() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkInterfaceResponse) string { return v.InternalIp }).(pulumi.StringOutput)
}

// The network to connect the NIC to.
func (o NetworkInterfaceResponseOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkInterfaceResponse) string { return v.Network }).(pulumi.StringOutput)
}

// The subnetwork to connect the NIC to.
func (o NetworkInterfaceResponseOutput) Subnetwork() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkInterfaceResponse) string { return v.Subnetwork }).(pulumi.StringOutput)
}

type NetworkInterfaceResponseArrayOutput struct{ *pulumi.OutputState }

func (NetworkInterfaceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkInterfaceResponse)(nil)).Elem()
}

func (o NetworkInterfaceResponseArrayOutput) ToNetworkInterfaceResponseArrayOutput() NetworkInterfaceResponseArrayOutput {
	return o
}

func (o NetworkInterfaceResponseArrayOutput) ToNetworkInterfaceResponseArrayOutputWithContext(ctx context.Context) NetworkInterfaceResponseArrayOutput {
	return o
}

func (o NetworkInterfaceResponseArrayOutput) Index(i pulumi.IntInput) NetworkInterfaceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkInterfaceResponse {
		return vs[0].([]NetworkInterfaceResponse)[vs[1].(int)]
	}).(NetworkInterfaceResponseOutput)
}

// Details for creation of a Persistent Disk.
type PersistentDiskDefaults struct {
	// A map of labels to associate with the Persistent Disk.
	AdditionalLabels map[string]string `pulumi:"additionalLabels"`
	// Optional. The name of the Persistent Disk to create.
	DiskName *string `pulumi:"diskName"`
	// The disk type to use.
	DiskType *PersistentDiskDefaultsDiskType `pulumi:"diskType"`
	// Optional. The encryption to apply to the disk.
	Encryption *Encryption `pulumi:"encryption"`
	// The ordinal number of the source VM disk.
	SourceDiskNumber int `pulumi:"sourceDiskNumber"`
	// Optional. Details for attachment of the disk to a VM. Used when the disk is set to be attacked to a target VM.
	VmAttachmentDetails *VmAttachmentDetails `pulumi:"vmAttachmentDetails"`
}

// PersistentDiskDefaultsInput is an input type that accepts PersistentDiskDefaultsArgs and PersistentDiskDefaultsOutput values.
// You can construct a concrete instance of `PersistentDiskDefaultsInput` via:
//
//	PersistentDiskDefaultsArgs{...}
type PersistentDiskDefaultsInput interface {
	pulumi.Input

	ToPersistentDiskDefaultsOutput() PersistentDiskDefaultsOutput
	ToPersistentDiskDefaultsOutputWithContext(context.Context) PersistentDiskDefaultsOutput
}

// Details for creation of a Persistent Disk.
type PersistentDiskDefaultsArgs struct {
	// A map of labels to associate with the Persistent Disk.
	AdditionalLabels pulumi.StringMapInput `pulumi:"additionalLabels"`
	// Optional. The name of the Persistent Disk to create.
	DiskName pulumi.StringPtrInput `pulumi:"diskName"`
	// The disk type to use.
	DiskType PersistentDiskDefaultsDiskTypePtrInput `pulumi:"diskType"`
	// Optional. The encryption to apply to the disk.
	Encryption EncryptionPtrInput `pulumi:"encryption"`
	// The ordinal number of the source VM disk.
	SourceDiskNumber pulumi.IntInput `pulumi:"sourceDiskNumber"`
	// Optional. Details for attachment of the disk to a VM. Used when the disk is set to be attacked to a target VM.
	VmAttachmentDetails VmAttachmentDetailsPtrInput `pulumi:"vmAttachmentDetails"`
}

func (PersistentDiskDefaultsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PersistentDiskDefaults)(nil)).Elem()
}

func (i PersistentDiskDefaultsArgs) ToPersistentDiskDefaultsOutput() PersistentDiskDefaultsOutput {
	return i.ToPersistentDiskDefaultsOutputWithContext(context.Background())
}

func (i PersistentDiskDefaultsArgs) ToPersistentDiskDefaultsOutputWithContext(ctx context.Context) PersistentDiskDefaultsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistentDiskDefaultsOutput)
}

// PersistentDiskDefaultsArrayInput is an input type that accepts PersistentDiskDefaultsArray and PersistentDiskDefaultsArrayOutput values.
// You can construct a concrete instance of `PersistentDiskDefaultsArrayInput` via:
//
//	PersistentDiskDefaultsArray{ PersistentDiskDefaultsArgs{...} }
type PersistentDiskDefaultsArrayInput interface {
	pulumi.Input

	ToPersistentDiskDefaultsArrayOutput() PersistentDiskDefaultsArrayOutput
	ToPersistentDiskDefaultsArrayOutputWithContext(context.Context) PersistentDiskDefaultsArrayOutput
}

type PersistentDiskDefaultsArray []PersistentDiskDefaultsInput

func (PersistentDiskDefaultsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PersistentDiskDefaults)(nil)).Elem()
}

func (i PersistentDiskDefaultsArray) ToPersistentDiskDefaultsArrayOutput() PersistentDiskDefaultsArrayOutput {
	return i.ToPersistentDiskDefaultsArrayOutputWithContext(context.Background())
}

func (i PersistentDiskDefaultsArray) ToPersistentDiskDefaultsArrayOutputWithContext(ctx context.Context) PersistentDiskDefaultsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistentDiskDefaultsArrayOutput)
}

// Details for creation of a Persistent Disk.
type PersistentDiskDefaultsOutput struct{ *pulumi.OutputState }

func (PersistentDiskDefaultsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PersistentDiskDefaults)(nil)).Elem()
}

func (o PersistentDiskDefaultsOutput) ToPersistentDiskDefaultsOutput() PersistentDiskDefaultsOutput {
	return o
}

func (o PersistentDiskDefaultsOutput) ToPersistentDiskDefaultsOutputWithContext(ctx context.Context) PersistentDiskDefaultsOutput {
	return o
}

// A map of labels to associate with the Persistent Disk.
func (o PersistentDiskDefaultsOutput) AdditionalLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v PersistentDiskDefaults) map[string]string { return v.AdditionalLabels }).(pulumi.StringMapOutput)
}

// Optional. The name of the Persistent Disk to create.
func (o PersistentDiskDefaultsOutput) DiskName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PersistentDiskDefaults) *string { return v.DiskName }).(pulumi.StringPtrOutput)
}

// The disk type to use.
func (o PersistentDiskDefaultsOutput) DiskType() PersistentDiskDefaultsDiskTypePtrOutput {
	return o.ApplyT(func(v PersistentDiskDefaults) *PersistentDiskDefaultsDiskType { return v.DiskType }).(PersistentDiskDefaultsDiskTypePtrOutput)
}

// Optional. The encryption to apply to the disk.
func (o PersistentDiskDefaultsOutput) Encryption() EncryptionPtrOutput {
	return o.ApplyT(func(v PersistentDiskDefaults) *Encryption { return v.Encryption }).(EncryptionPtrOutput)
}

// The ordinal number of the source VM disk.
func (o PersistentDiskDefaultsOutput) SourceDiskNumber() pulumi.IntOutput {
	return o.ApplyT(func(v PersistentDiskDefaults) int { return v.SourceDiskNumber }).(pulumi.IntOutput)
}

// Optional. Details for attachment of the disk to a VM. Used when the disk is set to be attacked to a target VM.
func (o PersistentDiskDefaultsOutput) VmAttachmentDetails() VmAttachmentDetailsPtrOutput {
	return o.ApplyT(func(v PersistentDiskDefaults) *VmAttachmentDetails { return v.VmAttachmentDetails }).(VmAttachmentDetailsPtrOutput)
}

type PersistentDiskDefaultsArrayOutput struct{ *pulumi.OutputState }

func (PersistentDiskDefaultsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PersistentDiskDefaults)(nil)).Elem()
}

func (o PersistentDiskDefaultsArrayOutput) ToPersistentDiskDefaultsArrayOutput() PersistentDiskDefaultsArrayOutput {
	return o
}

func (o PersistentDiskDefaultsArrayOutput) ToPersistentDiskDefaultsArrayOutputWithContext(ctx context.Context) PersistentDiskDefaultsArrayOutput {
	return o
}

func (o PersistentDiskDefaultsArrayOutput) Index(i pulumi.IntInput) PersistentDiskDefaultsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PersistentDiskDefaults {
		return vs[0].([]PersistentDiskDefaults)[vs[1].(int)]
	}).(PersistentDiskDefaultsOutput)
}

// Details for creation of a Persistent Disk.
type PersistentDiskDefaultsResponse struct {
	// A map of labels to associate with the Persistent Disk.
	AdditionalLabels map[string]string `pulumi:"additionalLabels"`
	// Optional. The name of the Persistent Disk to create.
	DiskName string `pulumi:"diskName"`
	// The disk type to use.
	DiskType string `pulumi:"diskType"`
	// Optional. The encryption to apply to the disk.
	Encryption EncryptionResponse `pulumi:"encryption"`
	// The ordinal number of the source VM disk.
	SourceDiskNumber int `pulumi:"sourceDiskNumber"`
	// Optional. Details for attachment of the disk to a VM. Used when the disk is set to be attacked to a target VM.
	VmAttachmentDetails VmAttachmentDetailsResponse `pulumi:"vmAttachmentDetails"`
}

// Details for creation of a Persistent Disk.
type PersistentDiskDefaultsResponseOutput struct{ *pulumi.OutputState }

func (PersistentDiskDefaultsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PersistentDiskDefaultsResponse)(nil)).Elem()
}

func (o PersistentDiskDefaultsResponseOutput) ToPersistentDiskDefaultsResponseOutput() PersistentDiskDefaultsResponseOutput {
	return o
}

func (o PersistentDiskDefaultsResponseOutput) ToPersistentDiskDefaultsResponseOutputWithContext(ctx context.Context) PersistentDiskDefaultsResponseOutput {
	return o
}

// A map of labels to associate with the Persistent Disk.
func (o PersistentDiskDefaultsResponseOutput) AdditionalLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v PersistentDiskDefaultsResponse) map[string]string { return v.AdditionalLabels }).(pulumi.StringMapOutput)
}

// Optional. The name of the Persistent Disk to create.
func (o PersistentDiskDefaultsResponseOutput) DiskName() pulumi.StringOutput {
	return o.ApplyT(func(v PersistentDiskDefaultsResponse) string { return v.DiskName }).(pulumi.StringOutput)
}

// The disk type to use.
func (o PersistentDiskDefaultsResponseOutput) DiskType() pulumi.StringOutput {
	return o.ApplyT(func(v PersistentDiskDefaultsResponse) string { return v.DiskType }).(pulumi.StringOutput)
}

// Optional. The encryption to apply to the disk.
func (o PersistentDiskDefaultsResponseOutput) Encryption() EncryptionResponseOutput {
	return o.ApplyT(func(v PersistentDiskDefaultsResponse) EncryptionResponse { return v.Encryption }).(EncryptionResponseOutput)
}

// The ordinal number of the source VM disk.
func (o PersistentDiskDefaultsResponseOutput) SourceDiskNumber() pulumi.IntOutput {
	return o.ApplyT(func(v PersistentDiskDefaultsResponse) int { return v.SourceDiskNumber }).(pulumi.IntOutput)
}

// Optional. Details for attachment of the disk to a VM. Used when the disk is set to be attacked to a target VM.
func (o PersistentDiskDefaultsResponseOutput) VmAttachmentDetails() VmAttachmentDetailsResponseOutput {
	return o.ApplyT(func(v PersistentDiskDefaultsResponse) VmAttachmentDetailsResponse { return v.VmAttachmentDetails }).(VmAttachmentDetailsResponseOutput)
}

type PersistentDiskDefaultsResponseArrayOutput struct{ *pulumi.OutputState }

func (PersistentDiskDefaultsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PersistentDiskDefaultsResponse)(nil)).Elem()
}

func (o PersistentDiskDefaultsResponseArrayOutput) ToPersistentDiskDefaultsResponseArrayOutput() PersistentDiskDefaultsResponseArrayOutput {
	return o
}

func (o PersistentDiskDefaultsResponseArrayOutput) ToPersistentDiskDefaultsResponseArrayOutputWithContext(ctx context.Context) PersistentDiskDefaultsResponseArrayOutput {
	return o
}

func (o PersistentDiskDefaultsResponseArrayOutput) Index(i pulumi.IntInput) PersistentDiskDefaultsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PersistentDiskDefaultsResponse {
		return vs[0].([]PersistentDiskDefaultsResponse)[vs[1].(int)]
	}).(PersistentDiskDefaultsResponseOutput)
}

// Details of a created Persistent Disk.
type PersistentDiskResponse struct {
	// The URI of the Persistent Disk.
	DiskUri string `pulumi:"diskUri"`
	// The ordinal number of the source VM disk.
	SourceDiskNumber int `pulumi:"sourceDiskNumber"`
}

// Details of a created Persistent Disk.
type PersistentDiskResponseOutput struct{ *pulumi.OutputState }

func (PersistentDiskResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PersistentDiskResponse)(nil)).Elem()
}

func (o PersistentDiskResponseOutput) ToPersistentDiskResponseOutput() PersistentDiskResponseOutput {
	return o
}

func (o PersistentDiskResponseOutput) ToPersistentDiskResponseOutputWithContext(ctx context.Context) PersistentDiskResponseOutput {
	return o
}

// The URI of the Persistent Disk.
func (o PersistentDiskResponseOutput) DiskUri() pulumi.StringOutput {
	return o.ApplyT(func(v PersistentDiskResponse) string { return v.DiskUri }).(pulumi.StringOutput)
}

// The ordinal number of the source VM disk.
func (o PersistentDiskResponseOutput) SourceDiskNumber() pulumi.IntOutput {
	return o.ApplyT(func(v PersistentDiskResponse) int { return v.SourceDiskNumber }).(pulumi.IntOutput)
}

type PersistentDiskResponseArrayOutput struct{ *pulumi.OutputState }

func (PersistentDiskResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PersistentDiskResponse)(nil)).Elem()
}

func (o PersistentDiskResponseArrayOutput) ToPersistentDiskResponseArrayOutput() PersistentDiskResponseArrayOutput {
	return o
}

func (o PersistentDiskResponseArrayOutput) ToPersistentDiskResponseArrayOutputWithContext(ctx context.Context) PersistentDiskResponseArrayOutput {
	return o
}

func (o PersistentDiskResponseArrayOutput) Index(i pulumi.IntInput) PersistentDiskResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PersistentDiskResponse {
		return vs[0].([]PersistentDiskResponse)[vs[1].(int)]
	}).(PersistentDiskResponseOutput)
}

// PostProcessingStep contains specific step details.
type PostProcessingStepResponse struct {
}

// PostProcessingStep contains specific step details.
type PostProcessingStepResponseOutput struct{ *pulumi.OutputState }

func (PostProcessingStepResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostProcessingStepResponse)(nil)).Elem()
}

func (o PostProcessingStepResponseOutput) ToPostProcessingStepResponseOutput() PostProcessingStepResponseOutput {
	return o
}

func (o PostProcessingStepResponseOutput) ToPostProcessingStepResponseOutputWithContext(ctx context.Context) PostProcessingStepResponseOutput {
	return o
}

// PreparingVMDisksStep contains specific step details.
type PreparingVMDisksStepResponse struct {
}

// PreparingVMDisksStep contains specific step details.
type PreparingVMDisksStepResponseOutput struct{ *pulumi.OutputState }

func (PreparingVMDisksStepResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PreparingVMDisksStepResponse)(nil)).Elem()
}

func (o PreparingVMDisksStepResponseOutput) ToPreparingVMDisksStepResponseOutput() PreparingVMDisksStepResponseOutput {
	return o
}

func (o PreparingVMDisksStepResponseOutput) ToPreparingVMDisksStepResponseOutputWithContext(ctx context.Context) PreparingVMDisksStepResponseOutput {
	return o
}

// ReplicatingStep contains specific step details.
type ReplicatingStepResponse struct {
	// The source disks replication rate for the last 30 minutes in bytes per second.
	LastThirtyMinutesAverageBytesPerSecond string `pulumi:"lastThirtyMinutesAverageBytesPerSecond"`
	// The source disks replication rate for the last 2 minutes in bytes per second.
	LastTwoMinutesAverageBytesPerSecond string `pulumi:"lastTwoMinutesAverageBytesPerSecond"`
	// Replicated bytes in the step.
	ReplicatedBytes string `pulumi:"replicatedBytes"`
	// Total bytes to be handled in the step.
	TotalBytes string `pulumi:"totalBytes"`
}

// ReplicatingStep contains specific step details.
type ReplicatingStepResponseOutput struct{ *pulumi.OutputState }

func (ReplicatingStepResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicatingStepResponse)(nil)).Elem()
}

func (o ReplicatingStepResponseOutput) ToReplicatingStepResponseOutput() ReplicatingStepResponseOutput {
	return o
}

func (o ReplicatingStepResponseOutput) ToReplicatingStepResponseOutputWithContext(ctx context.Context) ReplicatingStepResponseOutput {
	return o
}

// The source disks replication rate for the last 30 minutes in bytes per second.
func (o ReplicatingStepResponseOutput) LastThirtyMinutesAverageBytesPerSecond() pulumi.StringOutput {
	return o.ApplyT(func(v ReplicatingStepResponse) string { return v.LastThirtyMinutesAverageBytesPerSecond }).(pulumi.StringOutput)
}

// The source disks replication rate for the last 2 minutes in bytes per second.
func (o ReplicatingStepResponseOutput) LastTwoMinutesAverageBytesPerSecond() pulumi.StringOutput {
	return o.ApplyT(func(v ReplicatingStepResponse) string { return v.LastTwoMinutesAverageBytesPerSecond }).(pulumi.StringOutput)
}

// Replicated bytes in the step.
func (o ReplicatingStepResponseOutput) ReplicatedBytes() pulumi.StringOutput {
	return o.ApplyT(func(v ReplicatingStepResponse) string { return v.ReplicatedBytes }).(pulumi.StringOutput)
}

// Total bytes to be handled in the step.
func (o ReplicatingStepResponseOutput) TotalBytes() pulumi.StringOutput {
	return o.ApplyT(func(v ReplicatingStepResponse) string { return v.TotalBytes }).(pulumi.StringOutput)
}

// ReplicationCycle contains information about the current replication cycle status.
type ReplicationCycleResponse struct {
	// The cycle's ordinal number.
	CycleNumber int `pulumi:"cycleNumber"`
	// The time the replication cycle has ended.
	EndTime string `pulumi:"endTime"`
	// Provides details on the state of the cycle in case of an error.
	Error StatusResponse `pulumi:"error"`
	// The identifier of the ReplicationCycle.
	Name string `pulumi:"name"`
	// The current progress in percentage of this cycle. Was replaced by 'steps' field, which breaks down the cycle progression more accurately.
	ProgressPercent int `pulumi:"progressPercent"`
	// The time the replication cycle has started.
	StartTime string `pulumi:"startTime"`
	// State of the ReplicationCycle.
	State string `pulumi:"state"`
	// The cycle's steps list representing its progress.
	Steps []CycleStepResponse `pulumi:"steps"`
	// The accumulated duration the replication cycle was paused.
	TotalPauseDuration string `pulumi:"totalPauseDuration"`
	// Warnings that occurred during the cycle.
	Warnings []MigrationWarningResponse `pulumi:"warnings"`
}

// ReplicationCycle contains information about the current replication cycle status.
type ReplicationCycleResponseOutput struct{ *pulumi.OutputState }

func (ReplicationCycleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationCycleResponse)(nil)).Elem()
}

func (o ReplicationCycleResponseOutput) ToReplicationCycleResponseOutput() ReplicationCycleResponseOutput {
	return o
}

func (o ReplicationCycleResponseOutput) ToReplicationCycleResponseOutputWithContext(ctx context.Context) ReplicationCycleResponseOutput {
	return o
}

// The cycle's ordinal number.
func (o ReplicationCycleResponseOutput) CycleNumber() pulumi.IntOutput {
	return o.ApplyT(func(v ReplicationCycleResponse) int { return v.CycleNumber }).(pulumi.IntOutput)
}

// The time the replication cycle has ended.
func (o ReplicationCycleResponseOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v ReplicationCycleResponse) string { return v.EndTime }).(pulumi.StringOutput)
}

// Provides details on the state of the cycle in case of an error.
func (o ReplicationCycleResponseOutput) Error() StatusResponseOutput {
	return o.ApplyT(func(v ReplicationCycleResponse) StatusResponse { return v.Error }).(StatusResponseOutput)
}

// The identifier of the ReplicationCycle.
func (o ReplicationCycleResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ReplicationCycleResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The current progress in percentage of this cycle. Was replaced by 'steps' field, which breaks down the cycle progression more accurately.
func (o ReplicationCycleResponseOutput) ProgressPercent() pulumi.IntOutput {
	return o.ApplyT(func(v ReplicationCycleResponse) int { return v.ProgressPercent }).(pulumi.IntOutput)
}

// The time the replication cycle has started.
func (o ReplicationCycleResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v ReplicationCycleResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

// State of the ReplicationCycle.
func (o ReplicationCycleResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ReplicationCycleResponse) string { return v.State }).(pulumi.StringOutput)
}

// The cycle's steps list representing its progress.
func (o ReplicationCycleResponseOutput) Steps() CycleStepResponseArrayOutput {
	return o.ApplyT(func(v ReplicationCycleResponse) []CycleStepResponse { return v.Steps }).(CycleStepResponseArrayOutput)
}

// The accumulated duration the replication cycle was paused.
func (o ReplicationCycleResponseOutput) TotalPauseDuration() pulumi.StringOutput {
	return o.ApplyT(func(v ReplicationCycleResponse) string { return v.TotalPauseDuration }).(pulumi.StringOutput)
}

// Warnings that occurred during the cycle.
func (o ReplicationCycleResponseOutput) Warnings() MigrationWarningResponseArrayOutput {
	return o.ApplyT(func(v ReplicationCycleResponse) []MigrationWarningResponse { return v.Warnings }).(MigrationWarningResponseArrayOutput)
}

// ReplicationSync contain information about the last replica sync to the cloud.
type ReplicationSyncResponse struct {
	// The most updated snapshot created time in the source that finished replication.
	LastSyncTime string `pulumi:"lastSyncTime"`
}

// ReplicationSync contain information about the last replica sync to the cloud.
type ReplicationSyncResponseOutput struct{ *pulumi.OutputState }

func (ReplicationSyncResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationSyncResponse)(nil)).Elem()
}

func (o ReplicationSyncResponseOutput) ToReplicationSyncResponseOutput() ReplicationSyncResponseOutput {
	return o
}

func (o ReplicationSyncResponseOutput) ToReplicationSyncResponseOutputWithContext(ctx context.Context) ReplicationSyncResponseOutput {
	return o
}

// The most updated snapshot created time in the source that finished replication.
func (o ReplicationSyncResponseOutput) LastSyncTime() pulumi.StringOutput {
	return o.ApplyT(func(v ReplicationSyncResponse) string { return v.LastSyncTime }).(pulumi.StringOutput)
}

// A policy for scheduling replications.
type SchedulePolicy struct {
	// The idle duration between replication stages.
	IdleDuration *string `pulumi:"idleDuration"`
	// A flag to indicate whether to skip OS adaptation during the replication sync. OS adaptation is a process where the VM's operating system undergoes changes and adaptations to fully function on Compute Engine.
	SkipOsAdaptation *bool `pulumi:"skipOsAdaptation"`
}

// SchedulePolicyInput is an input type that accepts SchedulePolicyArgs and SchedulePolicyOutput values.
// You can construct a concrete instance of `SchedulePolicyInput` via:
//
//	SchedulePolicyArgs{...}
type SchedulePolicyInput interface {
	pulumi.Input

	ToSchedulePolicyOutput() SchedulePolicyOutput
	ToSchedulePolicyOutputWithContext(context.Context) SchedulePolicyOutput
}

// A policy for scheduling replications.
type SchedulePolicyArgs struct {
	// The idle duration between replication stages.
	IdleDuration pulumi.StringPtrInput `pulumi:"idleDuration"`
	// A flag to indicate whether to skip OS adaptation during the replication sync. OS adaptation is a process where the VM's operating system undergoes changes and adaptations to fully function on Compute Engine.
	SkipOsAdaptation pulumi.BoolPtrInput `pulumi:"skipOsAdaptation"`
}

func (SchedulePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchedulePolicy)(nil)).Elem()
}

func (i SchedulePolicyArgs) ToSchedulePolicyOutput() SchedulePolicyOutput {
	return i.ToSchedulePolicyOutputWithContext(context.Background())
}

func (i SchedulePolicyArgs) ToSchedulePolicyOutputWithContext(ctx context.Context) SchedulePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulePolicyOutput)
}

func (i SchedulePolicyArgs) ToSchedulePolicyPtrOutput() SchedulePolicyPtrOutput {
	return i.ToSchedulePolicyPtrOutputWithContext(context.Background())
}

func (i SchedulePolicyArgs) ToSchedulePolicyPtrOutputWithContext(ctx context.Context) SchedulePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulePolicyOutput).ToSchedulePolicyPtrOutputWithContext(ctx)
}

// SchedulePolicyPtrInput is an input type that accepts SchedulePolicyArgs, SchedulePolicyPtr and SchedulePolicyPtrOutput values.
// You can construct a concrete instance of `SchedulePolicyPtrInput` via:
//
//	        SchedulePolicyArgs{...}
//
//	or:
//
//	        nil
type SchedulePolicyPtrInput interface {
	pulumi.Input

	ToSchedulePolicyPtrOutput() SchedulePolicyPtrOutput
	ToSchedulePolicyPtrOutputWithContext(context.Context) SchedulePolicyPtrOutput
}

type schedulePolicyPtrType SchedulePolicyArgs

func SchedulePolicyPtr(v *SchedulePolicyArgs) SchedulePolicyPtrInput {
	return (*schedulePolicyPtrType)(v)
}

func (*schedulePolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SchedulePolicy)(nil)).Elem()
}

func (i *schedulePolicyPtrType) ToSchedulePolicyPtrOutput() SchedulePolicyPtrOutput {
	return i.ToSchedulePolicyPtrOutputWithContext(context.Background())
}

func (i *schedulePolicyPtrType) ToSchedulePolicyPtrOutputWithContext(ctx context.Context) SchedulePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulePolicyPtrOutput)
}

// A policy for scheduling replications.
type SchedulePolicyOutput struct{ *pulumi.OutputState }

func (SchedulePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchedulePolicy)(nil)).Elem()
}

func (o SchedulePolicyOutput) ToSchedulePolicyOutput() SchedulePolicyOutput {
	return o
}

func (o SchedulePolicyOutput) ToSchedulePolicyOutputWithContext(ctx context.Context) SchedulePolicyOutput {
	return o
}

func (o SchedulePolicyOutput) ToSchedulePolicyPtrOutput() SchedulePolicyPtrOutput {
	return o.ToSchedulePolicyPtrOutputWithContext(context.Background())
}

func (o SchedulePolicyOutput) ToSchedulePolicyPtrOutputWithContext(ctx context.Context) SchedulePolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SchedulePolicy) *SchedulePolicy {
		return &v
	}).(SchedulePolicyPtrOutput)
}

// The idle duration between replication stages.
func (o SchedulePolicyOutput) IdleDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchedulePolicy) *string { return v.IdleDuration }).(pulumi.StringPtrOutput)
}

// A flag to indicate whether to skip OS adaptation during the replication sync. OS adaptation is a process where the VM's operating system undergoes changes and adaptations to fully function on Compute Engine.
func (o SchedulePolicyOutput) SkipOsAdaptation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SchedulePolicy) *bool { return v.SkipOsAdaptation }).(pulumi.BoolPtrOutput)
}

type SchedulePolicyPtrOutput struct{ *pulumi.OutputState }

func (SchedulePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchedulePolicy)(nil)).Elem()
}

func (o SchedulePolicyPtrOutput) ToSchedulePolicyPtrOutput() SchedulePolicyPtrOutput {
	return o
}

func (o SchedulePolicyPtrOutput) ToSchedulePolicyPtrOutputWithContext(ctx context.Context) SchedulePolicyPtrOutput {
	return o
}

func (o SchedulePolicyPtrOutput) Elem() SchedulePolicyOutput {
	return o.ApplyT(func(v *SchedulePolicy) SchedulePolicy {
		if v != nil {
			return *v
		}
		var ret SchedulePolicy
		return ret
	}).(SchedulePolicyOutput)
}

// The idle duration between replication stages.
func (o SchedulePolicyPtrOutput) IdleDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SchedulePolicy) *string {
		if v == nil {
			return nil
		}
		return v.IdleDuration
	}).(pulumi.StringPtrOutput)
}

// A flag to indicate whether to skip OS adaptation during the replication sync. OS adaptation is a process where the VM's operating system undergoes changes and adaptations to fully function on Compute Engine.
func (o SchedulePolicyPtrOutput) SkipOsAdaptation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SchedulePolicy) *bool {
		if v == nil {
			return nil
		}
		return v.SkipOsAdaptation
	}).(pulumi.BoolPtrOutput)
}

// A policy for scheduling replications.
type SchedulePolicyResponse struct {
	// The idle duration between replication stages.
	IdleDuration string `pulumi:"idleDuration"`
	// A flag to indicate whether to skip OS adaptation during the replication sync. OS adaptation is a process where the VM's operating system undergoes changes and adaptations to fully function on Compute Engine.
	SkipOsAdaptation bool `pulumi:"skipOsAdaptation"`
}

// A policy for scheduling replications.
type SchedulePolicyResponseOutput struct{ *pulumi.OutputState }

func (SchedulePolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchedulePolicyResponse)(nil)).Elem()
}

func (o SchedulePolicyResponseOutput) ToSchedulePolicyResponseOutput() SchedulePolicyResponseOutput {
	return o
}

func (o SchedulePolicyResponseOutput) ToSchedulePolicyResponseOutputWithContext(ctx context.Context) SchedulePolicyResponseOutput {
	return o
}

// The idle duration between replication stages.
func (o SchedulePolicyResponseOutput) IdleDuration() pulumi.StringOutput {
	return o.ApplyT(func(v SchedulePolicyResponse) string { return v.IdleDuration }).(pulumi.StringOutput)
}

// A flag to indicate whether to skip OS adaptation during the replication sync. OS adaptation is a process where the VM's operating system undergoes changes and adaptations to fully function on Compute Engine.
func (o SchedulePolicyResponseOutput) SkipOsAdaptation() pulumi.BoolOutput {
	return o.ApplyT(func(v SchedulePolicyResponse) bool { return v.SkipOsAdaptation }).(pulumi.BoolOutput)
}

// Node Affinity: the configuration of desired nodes onto which this Instance could be scheduled. Based on https://cloud.google.com/compute/docs/reference/rest/v1/instances/setScheduling
type SchedulingNodeAffinity struct {
	// The label key of Node resource to reference.
	Key *string `pulumi:"key"`
	// The operator to use for the node resources specified in the `values` parameter.
	Operator *SchedulingNodeAffinityOperator `pulumi:"operator"`
	// Corresponds to the label values of Node resource.
	Values []string `pulumi:"values"`
}

// SchedulingNodeAffinityInput is an input type that accepts SchedulingNodeAffinityArgs and SchedulingNodeAffinityOutput values.
// You can construct a concrete instance of `SchedulingNodeAffinityInput` via:
//
//	SchedulingNodeAffinityArgs{...}
type SchedulingNodeAffinityInput interface {
	pulumi.Input

	ToSchedulingNodeAffinityOutput() SchedulingNodeAffinityOutput
	ToSchedulingNodeAffinityOutputWithContext(context.Context) SchedulingNodeAffinityOutput
}

// Node Affinity: the configuration of desired nodes onto which this Instance could be scheduled. Based on https://cloud.google.com/compute/docs/reference/rest/v1/instances/setScheduling
type SchedulingNodeAffinityArgs struct {
	// The label key of Node resource to reference.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The operator to use for the node resources specified in the `values` parameter.
	Operator SchedulingNodeAffinityOperatorPtrInput `pulumi:"operator"`
	// Corresponds to the label values of Node resource.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (SchedulingNodeAffinityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchedulingNodeAffinity)(nil)).Elem()
}

func (i SchedulingNodeAffinityArgs) ToSchedulingNodeAffinityOutput() SchedulingNodeAffinityOutput {
	return i.ToSchedulingNodeAffinityOutputWithContext(context.Background())
}

func (i SchedulingNodeAffinityArgs) ToSchedulingNodeAffinityOutputWithContext(ctx context.Context) SchedulingNodeAffinityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulingNodeAffinityOutput)
}

// SchedulingNodeAffinityArrayInput is an input type that accepts SchedulingNodeAffinityArray and SchedulingNodeAffinityArrayOutput values.
// You can construct a concrete instance of `SchedulingNodeAffinityArrayInput` via:
//
//	SchedulingNodeAffinityArray{ SchedulingNodeAffinityArgs{...} }
type SchedulingNodeAffinityArrayInput interface {
	pulumi.Input

	ToSchedulingNodeAffinityArrayOutput() SchedulingNodeAffinityArrayOutput
	ToSchedulingNodeAffinityArrayOutputWithContext(context.Context) SchedulingNodeAffinityArrayOutput
}

type SchedulingNodeAffinityArray []SchedulingNodeAffinityInput

func (SchedulingNodeAffinityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SchedulingNodeAffinity)(nil)).Elem()
}

func (i SchedulingNodeAffinityArray) ToSchedulingNodeAffinityArrayOutput() SchedulingNodeAffinityArrayOutput {
	return i.ToSchedulingNodeAffinityArrayOutputWithContext(context.Background())
}

func (i SchedulingNodeAffinityArray) ToSchedulingNodeAffinityArrayOutputWithContext(ctx context.Context) SchedulingNodeAffinityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulingNodeAffinityArrayOutput)
}

// Node Affinity: the configuration of desired nodes onto which this Instance could be scheduled. Based on https://cloud.google.com/compute/docs/reference/rest/v1/instances/setScheduling
type SchedulingNodeAffinityOutput struct{ *pulumi.OutputState }

func (SchedulingNodeAffinityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchedulingNodeAffinity)(nil)).Elem()
}

func (o SchedulingNodeAffinityOutput) ToSchedulingNodeAffinityOutput() SchedulingNodeAffinityOutput {
	return o
}

func (o SchedulingNodeAffinityOutput) ToSchedulingNodeAffinityOutputWithContext(ctx context.Context) SchedulingNodeAffinityOutput {
	return o
}

// The label key of Node resource to reference.
func (o SchedulingNodeAffinityOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchedulingNodeAffinity) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator to use for the node resources specified in the `values` parameter.
func (o SchedulingNodeAffinityOutput) Operator() SchedulingNodeAffinityOperatorPtrOutput {
	return o.ApplyT(func(v SchedulingNodeAffinity) *SchedulingNodeAffinityOperator { return v.Operator }).(SchedulingNodeAffinityOperatorPtrOutput)
}

// Corresponds to the label values of Node resource.
func (o SchedulingNodeAffinityOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SchedulingNodeAffinity) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type SchedulingNodeAffinityArrayOutput struct{ *pulumi.OutputState }

func (SchedulingNodeAffinityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SchedulingNodeAffinity)(nil)).Elem()
}

func (o SchedulingNodeAffinityArrayOutput) ToSchedulingNodeAffinityArrayOutput() SchedulingNodeAffinityArrayOutput {
	return o
}

func (o SchedulingNodeAffinityArrayOutput) ToSchedulingNodeAffinityArrayOutputWithContext(ctx context.Context) SchedulingNodeAffinityArrayOutput {
	return o
}

func (o SchedulingNodeAffinityArrayOutput) Index(i pulumi.IntInput) SchedulingNodeAffinityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SchedulingNodeAffinity {
		return vs[0].([]SchedulingNodeAffinity)[vs[1].(int)]
	}).(SchedulingNodeAffinityOutput)
}

// Node Affinity: the configuration of desired nodes onto which this Instance could be scheduled. Based on https://cloud.google.com/compute/docs/reference/rest/v1/instances/setScheduling
type SchedulingNodeAffinityResponse struct {
	// The label key of Node resource to reference.
	Key string `pulumi:"key"`
	// The operator to use for the node resources specified in the `values` parameter.
	Operator string `pulumi:"operator"`
	// Corresponds to the label values of Node resource.
	Values []string `pulumi:"values"`
}

// Node Affinity: the configuration of desired nodes onto which this Instance could be scheduled. Based on https://cloud.google.com/compute/docs/reference/rest/v1/instances/setScheduling
type SchedulingNodeAffinityResponseOutput struct{ *pulumi.OutputState }

func (SchedulingNodeAffinityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchedulingNodeAffinityResponse)(nil)).Elem()
}

func (o SchedulingNodeAffinityResponseOutput) ToSchedulingNodeAffinityResponseOutput() SchedulingNodeAffinityResponseOutput {
	return o
}

func (o SchedulingNodeAffinityResponseOutput) ToSchedulingNodeAffinityResponseOutputWithContext(ctx context.Context) SchedulingNodeAffinityResponseOutput {
	return o
}

// The label key of Node resource to reference.
func (o SchedulingNodeAffinityResponseOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v SchedulingNodeAffinityResponse) string { return v.Key }).(pulumi.StringOutput)
}

// The operator to use for the node resources specified in the `values` parameter.
func (o SchedulingNodeAffinityResponseOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v SchedulingNodeAffinityResponse) string { return v.Operator }).(pulumi.StringOutput)
}

// Corresponds to the label values of Node resource.
func (o SchedulingNodeAffinityResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SchedulingNodeAffinityResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type SchedulingNodeAffinityResponseArrayOutput struct{ *pulumi.OutputState }

func (SchedulingNodeAffinityResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SchedulingNodeAffinityResponse)(nil)).Elem()
}

func (o SchedulingNodeAffinityResponseArrayOutput) ToSchedulingNodeAffinityResponseArrayOutput() SchedulingNodeAffinityResponseArrayOutput {
	return o
}

func (o SchedulingNodeAffinityResponseArrayOutput) ToSchedulingNodeAffinityResponseArrayOutputWithContext(ctx context.Context) SchedulingNodeAffinityResponseArrayOutput {
	return o
}

func (o SchedulingNodeAffinityResponseArrayOutput) Index(i pulumi.IntInput) SchedulingNodeAffinityResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SchedulingNodeAffinityResponse {
		return vs[0].([]SchedulingNodeAffinityResponse)[vs[1].(int)]
	}).(SchedulingNodeAffinityResponseOutput)
}

// ShuttingDownSourceVMStep contains specific step details.
type ShuttingDownSourceVMStepResponse struct {
}

// ShuttingDownSourceVMStep contains specific step details.
type ShuttingDownSourceVMStepResponseOutput struct{ *pulumi.OutputState }

func (ShuttingDownSourceVMStepResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ShuttingDownSourceVMStepResponse)(nil)).Elem()
}

func (o ShuttingDownSourceVMStepResponseOutput) ToShuttingDownSourceVMStepResponseOutput() ShuttingDownSourceVMStepResponseOutput {
	return o
}

func (o ShuttingDownSourceVMStepResponseOutput) ToShuttingDownSourceVMStepResponseOutputWithContext(ctx context.Context) ShuttingDownSourceVMStepResponseOutput {
	return o
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type StatusResponse struct {
	// The status code, which should be an enum value of google.rpc.Code.
	Code int `pulumi:"code"`
	// A list of messages that carry the error details. There is a common set of message types for APIs to use.
	Details []map[string]interface{} `pulumi:"details"`
	// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
	Message string `pulumi:"message"`
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type StatusResponseOutput struct{ *pulumi.OutputState }

func (StatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusResponse)(nil)).Elem()
}

func (o StatusResponseOutput) ToStatusResponseOutput() StatusResponseOutput {
	return o
}

func (o StatusResponseOutput) ToStatusResponseOutputWithContext(ctx context.Context) StatusResponseOutput {
	return o
}

// The status code, which should be an enum value of google.rpc.Code.
func (o StatusResponseOutput) Code() pulumi.IntOutput {
	return o.ApplyT(func(v StatusResponse) int { return v.Code }).(pulumi.IntOutput)
}

// A list of messages that carry the error details. There is a common set of message types for APIs to use.
func (o StatusResponseOutput) Details() pulumi.MapArrayOutput {
	return o.ApplyT(func(v StatusResponse) []map[string]interface{} { return v.Details }).(pulumi.MapArrayOutput)
}

// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
func (o StatusResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v StatusResponse) string { return v.Message }).(pulumi.StringOutput)
}

// Tag is an AWS tag representation.
type Tag struct {
	// Key of tag.
	Key *string `pulumi:"key"`
	// Value of tag.
	Value *string `pulumi:"value"`
}

// TagInput is an input type that accepts TagArgs and TagOutput values.
// You can construct a concrete instance of `TagInput` via:
//
//	TagArgs{...}
type TagInput interface {
	pulumi.Input

	ToTagOutput() TagOutput
	ToTagOutputWithContext(context.Context) TagOutput
}

// Tag is an AWS tag representation.
type TagArgs struct {
	// Key of tag.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Value of tag.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (TagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Tag)(nil)).Elem()
}

func (i TagArgs) ToTagOutput() TagOutput {
	return i.ToTagOutputWithContext(context.Background())
}

func (i TagArgs) ToTagOutputWithContext(ctx context.Context) TagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagOutput)
}

// TagArrayInput is an input type that accepts TagArray and TagArrayOutput values.
// You can construct a concrete instance of `TagArrayInput` via:
//
//	TagArray{ TagArgs{...} }
type TagArrayInput interface {
	pulumi.Input

	ToTagArrayOutput() TagArrayOutput
	ToTagArrayOutputWithContext(context.Context) TagArrayOutput
}

type TagArray []TagInput

func (TagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Tag)(nil)).Elem()
}

func (i TagArray) ToTagArrayOutput() TagArrayOutput {
	return i.ToTagArrayOutputWithContext(context.Background())
}

func (i TagArray) ToTagArrayOutputWithContext(ctx context.Context) TagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagArrayOutput)
}

// Tag is an AWS tag representation.
type TagOutput struct{ *pulumi.OutputState }

func (TagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Tag)(nil)).Elem()
}

func (o TagOutput) ToTagOutput() TagOutput {
	return o
}

func (o TagOutput) ToTagOutputWithContext(ctx context.Context) TagOutput {
	return o
}

// Key of tag.
func (o TagOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Tag) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Value of tag.
func (o TagOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Tag) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type TagArrayOutput struct{ *pulumi.OutputState }

func (TagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Tag)(nil)).Elem()
}

func (o TagArrayOutput) ToTagArrayOutput() TagArrayOutput {
	return o
}

func (o TagArrayOutput) ToTagArrayOutputWithContext(ctx context.Context) TagArrayOutput {
	return o
}

func (o TagArrayOutput) Index(i pulumi.IntInput) TagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Tag {
		return vs[0].([]Tag)[vs[1].(int)]
	}).(TagOutput)
}

// Tag is an AWS tag representation.
type TagResponse struct {
	// Key of tag.
	Key string `pulumi:"key"`
	// Value of tag.
	Value string `pulumi:"value"`
}

// Tag is an AWS tag representation.
type TagResponseOutput struct{ *pulumi.OutputState }

func (TagResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TagResponse)(nil)).Elem()
}

func (o TagResponseOutput) ToTagResponseOutput() TagResponseOutput {
	return o
}

func (o TagResponseOutput) ToTagResponseOutputWithContext(ctx context.Context) TagResponseOutput {
	return o
}

// Key of tag.
func (o TagResponseOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v TagResponse) string { return v.Key }).(pulumi.StringOutput)
}

// Value of tag.
func (o TagResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v TagResponse) string { return v.Value }).(pulumi.StringOutput)
}

type TagResponseArrayOutput struct{ *pulumi.OutputState }

func (TagResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TagResponse)(nil)).Elem()
}

func (o TagResponseArrayOutput) ToTagResponseArrayOutput() TagResponseArrayOutput {
	return o
}

func (o TagResponseArrayOutput) ToTagResponseArrayOutputWithContext(ctx context.Context) TagResponseArrayOutput {
	return o
}

func (o TagResponseArrayOutput) Index(i pulumi.IntInput) TagResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TagResponse {
		return vs[0].([]TagResponse)[vs[1].(int)]
	}).(TagResponseOutput)
}

// UpgradeStatus contains information about upgradeAppliance operation.
type UpgradeStatusResponse struct {
	// Provides details on the state of the upgrade operation in case of an error.
	Error StatusResponse `pulumi:"error"`
	// The version from which we upgraded.
	PreviousVersion string `pulumi:"previousVersion"`
	// The time the operation was started.
	StartTime string `pulumi:"startTime"`
	// The state of the upgradeAppliance operation.
	State string `pulumi:"state"`
	// The version to upgrade to.
	Version string `pulumi:"version"`
}

// UpgradeStatus contains information about upgradeAppliance operation.
type UpgradeStatusResponseOutput struct{ *pulumi.OutputState }

func (UpgradeStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpgradeStatusResponse)(nil)).Elem()
}

func (o UpgradeStatusResponseOutput) ToUpgradeStatusResponseOutput() UpgradeStatusResponseOutput {
	return o
}

func (o UpgradeStatusResponseOutput) ToUpgradeStatusResponseOutputWithContext(ctx context.Context) UpgradeStatusResponseOutput {
	return o
}

// Provides details on the state of the upgrade operation in case of an error.
func (o UpgradeStatusResponseOutput) Error() StatusResponseOutput {
	return o.ApplyT(func(v UpgradeStatusResponse) StatusResponse { return v.Error }).(StatusResponseOutput)
}

// The version from which we upgraded.
func (o UpgradeStatusResponseOutput) PreviousVersion() pulumi.StringOutput {
	return o.ApplyT(func(v UpgradeStatusResponse) string { return v.PreviousVersion }).(pulumi.StringOutput)
}

// The time the operation was started.
func (o UpgradeStatusResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v UpgradeStatusResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

// The state of the upgradeAppliance operation.
func (o UpgradeStatusResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v UpgradeStatusResponse) string { return v.State }).(pulumi.StringOutput)
}

// The version to upgrade to.
func (o UpgradeStatusResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v UpgradeStatusResponse) string { return v.Version }).(pulumi.StringOutput)
}

// Details for attachment of the disk to a VM.
type VmAttachmentDetails struct {
	// Optional. Specifies a unique device name of your choice that is reflected into the /dev/disk/by-id/google-* tree of a Linux operating system running within the instance. If not specified, the server chooses a default device name to apply to this disk, in the form persistent-disk-x, where x is a number assigned by Google Compute Engine. This field is only applicable for persistent disks.
	DeviceName *string `pulumi:"deviceName"`
}

// VmAttachmentDetailsInput is an input type that accepts VmAttachmentDetailsArgs and VmAttachmentDetailsOutput values.
// You can construct a concrete instance of `VmAttachmentDetailsInput` via:
//
//	VmAttachmentDetailsArgs{...}
type VmAttachmentDetailsInput interface {
	pulumi.Input

	ToVmAttachmentDetailsOutput() VmAttachmentDetailsOutput
	ToVmAttachmentDetailsOutputWithContext(context.Context) VmAttachmentDetailsOutput
}

// Details for attachment of the disk to a VM.
type VmAttachmentDetailsArgs struct {
	// Optional. Specifies a unique device name of your choice that is reflected into the /dev/disk/by-id/google-* tree of a Linux operating system running within the instance. If not specified, the server chooses a default device name to apply to this disk, in the form persistent-disk-x, where x is a number assigned by Google Compute Engine. This field is only applicable for persistent disks.
	DeviceName pulumi.StringPtrInput `pulumi:"deviceName"`
}

func (VmAttachmentDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VmAttachmentDetails)(nil)).Elem()
}

func (i VmAttachmentDetailsArgs) ToVmAttachmentDetailsOutput() VmAttachmentDetailsOutput {
	return i.ToVmAttachmentDetailsOutputWithContext(context.Background())
}

func (i VmAttachmentDetailsArgs) ToVmAttachmentDetailsOutputWithContext(ctx context.Context) VmAttachmentDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmAttachmentDetailsOutput)
}

func (i VmAttachmentDetailsArgs) ToVmAttachmentDetailsPtrOutput() VmAttachmentDetailsPtrOutput {
	return i.ToVmAttachmentDetailsPtrOutputWithContext(context.Background())
}

func (i VmAttachmentDetailsArgs) ToVmAttachmentDetailsPtrOutputWithContext(ctx context.Context) VmAttachmentDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmAttachmentDetailsOutput).ToVmAttachmentDetailsPtrOutputWithContext(ctx)
}

// VmAttachmentDetailsPtrInput is an input type that accepts VmAttachmentDetailsArgs, VmAttachmentDetailsPtr and VmAttachmentDetailsPtrOutput values.
// You can construct a concrete instance of `VmAttachmentDetailsPtrInput` via:
//
//	        VmAttachmentDetailsArgs{...}
//
//	or:
//
//	        nil
type VmAttachmentDetailsPtrInput interface {
	pulumi.Input

	ToVmAttachmentDetailsPtrOutput() VmAttachmentDetailsPtrOutput
	ToVmAttachmentDetailsPtrOutputWithContext(context.Context) VmAttachmentDetailsPtrOutput
}

type vmAttachmentDetailsPtrType VmAttachmentDetailsArgs

func VmAttachmentDetailsPtr(v *VmAttachmentDetailsArgs) VmAttachmentDetailsPtrInput {
	return (*vmAttachmentDetailsPtrType)(v)
}

func (*vmAttachmentDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VmAttachmentDetails)(nil)).Elem()
}

func (i *vmAttachmentDetailsPtrType) ToVmAttachmentDetailsPtrOutput() VmAttachmentDetailsPtrOutput {
	return i.ToVmAttachmentDetailsPtrOutputWithContext(context.Background())
}

func (i *vmAttachmentDetailsPtrType) ToVmAttachmentDetailsPtrOutputWithContext(ctx context.Context) VmAttachmentDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmAttachmentDetailsPtrOutput)
}

// Details for attachment of the disk to a VM.
type VmAttachmentDetailsOutput struct{ *pulumi.OutputState }

func (VmAttachmentDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmAttachmentDetails)(nil)).Elem()
}

func (o VmAttachmentDetailsOutput) ToVmAttachmentDetailsOutput() VmAttachmentDetailsOutput {
	return o
}

func (o VmAttachmentDetailsOutput) ToVmAttachmentDetailsOutputWithContext(ctx context.Context) VmAttachmentDetailsOutput {
	return o
}

func (o VmAttachmentDetailsOutput) ToVmAttachmentDetailsPtrOutput() VmAttachmentDetailsPtrOutput {
	return o.ToVmAttachmentDetailsPtrOutputWithContext(context.Background())
}

func (o VmAttachmentDetailsOutput) ToVmAttachmentDetailsPtrOutputWithContext(ctx context.Context) VmAttachmentDetailsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VmAttachmentDetails) *VmAttachmentDetails {
		return &v
	}).(VmAttachmentDetailsPtrOutput)
}

// Optional. Specifies a unique device name of your choice that is reflected into the /dev/disk/by-id/google-* tree of a Linux operating system running within the instance. If not specified, the server chooses a default device name to apply to this disk, in the form persistent-disk-x, where x is a number assigned by Google Compute Engine. This field is only applicable for persistent disks.
func (o VmAttachmentDetailsOutput) DeviceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmAttachmentDetails) *string { return v.DeviceName }).(pulumi.StringPtrOutput)
}

type VmAttachmentDetailsPtrOutput struct{ *pulumi.OutputState }

func (VmAttachmentDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VmAttachmentDetails)(nil)).Elem()
}

func (o VmAttachmentDetailsPtrOutput) ToVmAttachmentDetailsPtrOutput() VmAttachmentDetailsPtrOutput {
	return o
}

func (o VmAttachmentDetailsPtrOutput) ToVmAttachmentDetailsPtrOutputWithContext(ctx context.Context) VmAttachmentDetailsPtrOutput {
	return o
}

func (o VmAttachmentDetailsPtrOutput) Elem() VmAttachmentDetailsOutput {
	return o.ApplyT(func(v *VmAttachmentDetails) VmAttachmentDetails {
		if v != nil {
			return *v
		}
		var ret VmAttachmentDetails
		return ret
	}).(VmAttachmentDetailsOutput)
}

// Optional. Specifies a unique device name of your choice that is reflected into the /dev/disk/by-id/google-* tree of a Linux operating system running within the instance. If not specified, the server chooses a default device name to apply to this disk, in the form persistent-disk-x, where x is a number assigned by Google Compute Engine. This field is only applicable for persistent disks.
func (o VmAttachmentDetailsPtrOutput) DeviceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmAttachmentDetails) *string {
		if v == nil {
			return nil
		}
		return v.DeviceName
	}).(pulumi.StringPtrOutput)
}

// Details for attachment of the disk to a VM.
type VmAttachmentDetailsResponse struct {
	// Optional. Specifies a unique device name of your choice that is reflected into the /dev/disk/by-id/google-* tree of a Linux operating system running within the instance. If not specified, the server chooses a default device name to apply to this disk, in the form persistent-disk-x, where x is a number assigned by Google Compute Engine. This field is only applicable for persistent disks.
	DeviceName string `pulumi:"deviceName"`
}

// Details for attachment of the disk to a VM.
type VmAttachmentDetailsResponseOutput struct{ *pulumi.OutputState }

func (VmAttachmentDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmAttachmentDetailsResponse)(nil)).Elem()
}

func (o VmAttachmentDetailsResponseOutput) ToVmAttachmentDetailsResponseOutput() VmAttachmentDetailsResponseOutput {
	return o
}

func (o VmAttachmentDetailsResponseOutput) ToVmAttachmentDetailsResponseOutputWithContext(ctx context.Context) VmAttachmentDetailsResponseOutput {
	return o
}

// Optional. Specifies a unique device name of your choice that is reflected into the /dev/disk/by-id/google-* tree of a Linux operating system running within the instance. If not specified, the server chooses a default device name to apply to this disk, in the form persistent-disk-x, where x is a number assigned by Google Compute Engine. This field is only applicable for persistent disks.
func (o VmAttachmentDetailsResponseOutput) DeviceName() pulumi.StringOutput {
	return o.ApplyT(func(v VmAttachmentDetailsResponse) string { return v.DeviceName }).(pulumi.StringOutput)
}

// Migrating VM source information about the VM capabilities needed for some Compute Engine features.
type VmCapabilitiesResponse struct {
	// The last time OS capabilities list was updated.
	LastOsCapabilitiesUpdateTime string `pulumi:"lastOsCapabilitiesUpdateTime"`
	// Unordered list. List of certain VM OS capabilities needed for some Compute Engine features.
	OsCapabilities []string `pulumi:"osCapabilities"`
}

// Migrating VM source information about the VM capabilities needed for some Compute Engine features.
type VmCapabilitiesResponseOutput struct{ *pulumi.OutputState }

func (VmCapabilitiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmCapabilitiesResponse)(nil)).Elem()
}

func (o VmCapabilitiesResponseOutput) ToVmCapabilitiesResponseOutput() VmCapabilitiesResponseOutput {
	return o
}

func (o VmCapabilitiesResponseOutput) ToVmCapabilitiesResponseOutputWithContext(ctx context.Context) VmCapabilitiesResponseOutput {
	return o
}

// The last time OS capabilities list was updated.
func (o VmCapabilitiesResponseOutput) LastOsCapabilitiesUpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v VmCapabilitiesResponse) string { return v.LastOsCapabilitiesUpdateTime }).(pulumi.StringOutput)
}

// Unordered list. List of certain VM OS capabilities needed for some Compute Engine features.
func (o VmCapabilitiesResponseOutput) OsCapabilities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VmCapabilitiesResponse) []string { return v.OsCapabilities }).(pulumi.StringArrayOutput)
}

// Utilization information of a single VM.
type VmUtilizationInfo struct {
	// Utilization metrics for this VM.
	Utilization *VmUtilizationMetrics `pulumi:"utilization"`
	// The VM's ID in the source.
	VmId *string `pulumi:"vmId"`
	// The description of the VM in a Source of type Vmware.
	VmwareVmDetails *VmwareVmDetails `pulumi:"vmwareVmDetails"`
}

// VmUtilizationInfoInput is an input type that accepts VmUtilizationInfoArgs and VmUtilizationInfoOutput values.
// You can construct a concrete instance of `VmUtilizationInfoInput` via:
//
//	VmUtilizationInfoArgs{...}
type VmUtilizationInfoInput interface {
	pulumi.Input

	ToVmUtilizationInfoOutput() VmUtilizationInfoOutput
	ToVmUtilizationInfoOutputWithContext(context.Context) VmUtilizationInfoOutput
}

// Utilization information of a single VM.
type VmUtilizationInfoArgs struct {
	// Utilization metrics for this VM.
	Utilization VmUtilizationMetricsPtrInput `pulumi:"utilization"`
	// The VM's ID in the source.
	VmId pulumi.StringPtrInput `pulumi:"vmId"`
	// The description of the VM in a Source of type Vmware.
	VmwareVmDetails VmwareVmDetailsPtrInput `pulumi:"vmwareVmDetails"`
}

func (VmUtilizationInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VmUtilizationInfo)(nil)).Elem()
}

func (i VmUtilizationInfoArgs) ToVmUtilizationInfoOutput() VmUtilizationInfoOutput {
	return i.ToVmUtilizationInfoOutputWithContext(context.Background())
}

func (i VmUtilizationInfoArgs) ToVmUtilizationInfoOutputWithContext(ctx context.Context) VmUtilizationInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmUtilizationInfoOutput)
}

// VmUtilizationInfoArrayInput is an input type that accepts VmUtilizationInfoArray and VmUtilizationInfoArrayOutput values.
// You can construct a concrete instance of `VmUtilizationInfoArrayInput` via:
//
//	VmUtilizationInfoArray{ VmUtilizationInfoArgs{...} }
type VmUtilizationInfoArrayInput interface {
	pulumi.Input

	ToVmUtilizationInfoArrayOutput() VmUtilizationInfoArrayOutput
	ToVmUtilizationInfoArrayOutputWithContext(context.Context) VmUtilizationInfoArrayOutput
}

type VmUtilizationInfoArray []VmUtilizationInfoInput

func (VmUtilizationInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VmUtilizationInfo)(nil)).Elem()
}

func (i VmUtilizationInfoArray) ToVmUtilizationInfoArrayOutput() VmUtilizationInfoArrayOutput {
	return i.ToVmUtilizationInfoArrayOutputWithContext(context.Background())
}

func (i VmUtilizationInfoArray) ToVmUtilizationInfoArrayOutputWithContext(ctx context.Context) VmUtilizationInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmUtilizationInfoArrayOutput)
}

// Utilization information of a single VM.
type VmUtilizationInfoOutput struct{ *pulumi.OutputState }

func (VmUtilizationInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmUtilizationInfo)(nil)).Elem()
}

func (o VmUtilizationInfoOutput) ToVmUtilizationInfoOutput() VmUtilizationInfoOutput {
	return o
}

func (o VmUtilizationInfoOutput) ToVmUtilizationInfoOutputWithContext(ctx context.Context) VmUtilizationInfoOutput {
	return o
}

// Utilization metrics for this VM.
func (o VmUtilizationInfoOutput) Utilization() VmUtilizationMetricsPtrOutput {
	return o.ApplyT(func(v VmUtilizationInfo) *VmUtilizationMetrics { return v.Utilization }).(VmUtilizationMetricsPtrOutput)
}

// The VM's ID in the source.
func (o VmUtilizationInfoOutput) VmId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmUtilizationInfo) *string { return v.VmId }).(pulumi.StringPtrOutput)
}

// The description of the VM in a Source of type Vmware.
func (o VmUtilizationInfoOutput) VmwareVmDetails() VmwareVmDetailsPtrOutput {
	return o.ApplyT(func(v VmUtilizationInfo) *VmwareVmDetails { return v.VmwareVmDetails }).(VmwareVmDetailsPtrOutput)
}

type VmUtilizationInfoArrayOutput struct{ *pulumi.OutputState }

func (VmUtilizationInfoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VmUtilizationInfo)(nil)).Elem()
}

func (o VmUtilizationInfoArrayOutput) ToVmUtilizationInfoArrayOutput() VmUtilizationInfoArrayOutput {
	return o
}

func (o VmUtilizationInfoArrayOutput) ToVmUtilizationInfoArrayOutputWithContext(ctx context.Context) VmUtilizationInfoArrayOutput {
	return o
}

func (o VmUtilizationInfoArrayOutput) Index(i pulumi.IntInput) VmUtilizationInfoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VmUtilizationInfo {
		return vs[0].([]VmUtilizationInfo)[vs[1].(int)]
	}).(VmUtilizationInfoOutput)
}

// Utilization information of a single VM.
type VmUtilizationInfoResponse struct {
	// Utilization metrics for this VM.
	Utilization VmUtilizationMetricsResponse `pulumi:"utilization"`
	// The VM's ID in the source.
	VmId string `pulumi:"vmId"`
	// The description of the VM in a Source of type Vmware.
	VmwareVmDetails VmwareVmDetailsResponse `pulumi:"vmwareVmDetails"`
}

// Utilization information of a single VM.
type VmUtilizationInfoResponseOutput struct{ *pulumi.OutputState }

func (VmUtilizationInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmUtilizationInfoResponse)(nil)).Elem()
}

func (o VmUtilizationInfoResponseOutput) ToVmUtilizationInfoResponseOutput() VmUtilizationInfoResponseOutput {
	return o
}

func (o VmUtilizationInfoResponseOutput) ToVmUtilizationInfoResponseOutputWithContext(ctx context.Context) VmUtilizationInfoResponseOutput {
	return o
}

// Utilization metrics for this VM.
func (o VmUtilizationInfoResponseOutput) Utilization() VmUtilizationMetricsResponseOutput {
	return o.ApplyT(func(v VmUtilizationInfoResponse) VmUtilizationMetricsResponse { return v.Utilization }).(VmUtilizationMetricsResponseOutput)
}

// The VM's ID in the source.
func (o VmUtilizationInfoResponseOutput) VmId() pulumi.StringOutput {
	return o.ApplyT(func(v VmUtilizationInfoResponse) string { return v.VmId }).(pulumi.StringOutput)
}

// The description of the VM in a Source of type Vmware.
func (o VmUtilizationInfoResponseOutput) VmwareVmDetails() VmwareVmDetailsResponseOutput {
	return o.ApplyT(func(v VmUtilizationInfoResponse) VmwareVmDetailsResponse { return v.VmwareVmDetails }).(VmwareVmDetailsResponseOutput)
}

type VmUtilizationInfoResponseArrayOutput struct{ *pulumi.OutputState }

func (VmUtilizationInfoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VmUtilizationInfoResponse)(nil)).Elem()
}

func (o VmUtilizationInfoResponseArrayOutput) ToVmUtilizationInfoResponseArrayOutput() VmUtilizationInfoResponseArrayOutput {
	return o
}

func (o VmUtilizationInfoResponseArrayOutput) ToVmUtilizationInfoResponseArrayOutputWithContext(ctx context.Context) VmUtilizationInfoResponseArrayOutput {
	return o
}

func (o VmUtilizationInfoResponseArrayOutput) Index(i pulumi.IntInput) VmUtilizationInfoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VmUtilizationInfoResponse {
		return vs[0].([]VmUtilizationInfoResponse)[vs[1].(int)]
	}).(VmUtilizationInfoResponseOutput)
}

// Utilization metrics values for a single VM.
type VmUtilizationMetrics struct {
	// Average CPU usage, percent.
	CpuAveragePercent *int `pulumi:"cpuAveragePercent"`
	// Max CPU usage, percent.
	CpuMaxPercent *int `pulumi:"cpuMaxPercent"`
	// Average disk IO rate, in kilobytes per second.
	DiskIoRateAverageKbps *string `pulumi:"diskIoRateAverageKbps"`
	// Max disk IO rate, in kilobytes per second.
	DiskIoRateMaxKbps *string `pulumi:"diskIoRateMaxKbps"`
	// Average memory usage, percent.
	MemoryAveragePercent *int `pulumi:"memoryAveragePercent"`
	// Max memory usage, percent.
	MemoryMaxPercent *int `pulumi:"memoryMaxPercent"`
	// Average network throughput (combined transmit-rates and receive-rates), in kilobytes per second.
	NetworkThroughputAverageKbps *string `pulumi:"networkThroughputAverageKbps"`
	// Max network throughput (combined transmit-rates and receive-rates), in kilobytes per second.
	NetworkThroughputMaxKbps *string `pulumi:"networkThroughputMaxKbps"`
}

// VmUtilizationMetricsInput is an input type that accepts VmUtilizationMetricsArgs and VmUtilizationMetricsOutput values.
// You can construct a concrete instance of `VmUtilizationMetricsInput` via:
//
//	VmUtilizationMetricsArgs{...}
type VmUtilizationMetricsInput interface {
	pulumi.Input

	ToVmUtilizationMetricsOutput() VmUtilizationMetricsOutput
	ToVmUtilizationMetricsOutputWithContext(context.Context) VmUtilizationMetricsOutput
}

// Utilization metrics values for a single VM.
type VmUtilizationMetricsArgs struct {
	// Average CPU usage, percent.
	CpuAveragePercent pulumi.IntPtrInput `pulumi:"cpuAveragePercent"`
	// Max CPU usage, percent.
	CpuMaxPercent pulumi.IntPtrInput `pulumi:"cpuMaxPercent"`
	// Average disk IO rate, in kilobytes per second.
	DiskIoRateAverageKbps pulumi.StringPtrInput `pulumi:"diskIoRateAverageKbps"`
	// Max disk IO rate, in kilobytes per second.
	DiskIoRateMaxKbps pulumi.StringPtrInput `pulumi:"diskIoRateMaxKbps"`
	// Average memory usage, percent.
	MemoryAveragePercent pulumi.IntPtrInput `pulumi:"memoryAveragePercent"`
	// Max memory usage, percent.
	MemoryMaxPercent pulumi.IntPtrInput `pulumi:"memoryMaxPercent"`
	// Average network throughput (combined transmit-rates and receive-rates), in kilobytes per second.
	NetworkThroughputAverageKbps pulumi.StringPtrInput `pulumi:"networkThroughputAverageKbps"`
	// Max network throughput (combined transmit-rates and receive-rates), in kilobytes per second.
	NetworkThroughputMaxKbps pulumi.StringPtrInput `pulumi:"networkThroughputMaxKbps"`
}

func (VmUtilizationMetricsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VmUtilizationMetrics)(nil)).Elem()
}

func (i VmUtilizationMetricsArgs) ToVmUtilizationMetricsOutput() VmUtilizationMetricsOutput {
	return i.ToVmUtilizationMetricsOutputWithContext(context.Background())
}

func (i VmUtilizationMetricsArgs) ToVmUtilizationMetricsOutputWithContext(ctx context.Context) VmUtilizationMetricsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmUtilizationMetricsOutput)
}

func (i VmUtilizationMetricsArgs) ToVmUtilizationMetricsPtrOutput() VmUtilizationMetricsPtrOutput {
	return i.ToVmUtilizationMetricsPtrOutputWithContext(context.Background())
}

func (i VmUtilizationMetricsArgs) ToVmUtilizationMetricsPtrOutputWithContext(ctx context.Context) VmUtilizationMetricsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmUtilizationMetricsOutput).ToVmUtilizationMetricsPtrOutputWithContext(ctx)
}

// VmUtilizationMetricsPtrInput is an input type that accepts VmUtilizationMetricsArgs, VmUtilizationMetricsPtr and VmUtilizationMetricsPtrOutput values.
// You can construct a concrete instance of `VmUtilizationMetricsPtrInput` via:
//
//	        VmUtilizationMetricsArgs{...}
//
//	or:
//
//	        nil
type VmUtilizationMetricsPtrInput interface {
	pulumi.Input

	ToVmUtilizationMetricsPtrOutput() VmUtilizationMetricsPtrOutput
	ToVmUtilizationMetricsPtrOutputWithContext(context.Context) VmUtilizationMetricsPtrOutput
}

type vmUtilizationMetricsPtrType VmUtilizationMetricsArgs

func VmUtilizationMetricsPtr(v *VmUtilizationMetricsArgs) VmUtilizationMetricsPtrInput {
	return (*vmUtilizationMetricsPtrType)(v)
}

func (*vmUtilizationMetricsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VmUtilizationMetrics)(nil)).Elem()
}

func (i *vmUtilizationMetricsPtrType) ToVmUtilizationMetricsPtrOutput() VmUtilizationMetricsPtrOutput {
	return i.ToVmUtilizationMetricsPtrOutputWithContext(context.Background())
}

func (i *vmUtilizationMetricsPtrType) ToVmUtilizationMetricsPtrOutputWithContext(ctx context.Context) VmUtilizationMetricsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmUtilizationMetricsPtrOutput)
}

// Utilization metrics values for a single VM.
type VmUtilizationMetricsOutput struct{ *pulumi.OutputState }

func (VmUtilizationMetricsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmUtilizationMetrics)(nil)).Elem()
}

func (o VmUtilizationMetricsOutput) ToVmUtilizationMetricsOutput() VmUtilizationMetricsOutput {
	return o
}

func (o VmUtilizationMetricsOutput) ToVmUtilizationMetricsOutputWithContext(ctx context.Context) VmUtilizationMetricsOutput {
	return o
}

func (o VmUtilizationMetricsOutput) ToVmUtilizationMetricsPtrOutput() VmUtilizationMetricsPtrOutput {
	return o.ToVmUtilizationMetricsPtrOutputWithContext(context.Background())
}

func (o VmUtilizationMetricsOutput) ToVmUtilizationMetricsPtrOutputWithContext(ctx context.Context) VmUtilizationMetricsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VmUtilizationMetrics) *VmUtilizationMetrics {
		return &v
	}).(VmUtilizationMetricsPtrOutput)
}

// Average CPU usage, percent.
func (o VmUtilizationMetricsOutput) CpuAveragePercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VmUtilizationMetrics) *int { return v.CpuAveragePercent }).(pulumi.IntPtrOutput)
}

// Max CPU usage, percent.
func (o VmUtilizationMetricsOutput) CpuMaxPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VmUtilizationMetrics) *int { return v.CpuMaxPercent }).(pulumi.IntPtrOutput)
}

// Average disk IO rate, in kilobytes per second.
func (o VmUtilizationMetricsOutput) DiskIoRateAverageKbps() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmUtilizationMetrics) *string { return v.DiskIoRateAverageKbps }).(pulumi.StringPtrOutput)
}

// Max disk IO rate, in kilobytes per second.
func (o VmUtilizationMetricsOutput) DiskIoRateMaxKbps() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmUtilizationMetrics) *string { return v.DiskIoRateMaxKbps }).(pulumi.StringPtrOutput)
}

// Average memory usage, percent.
func (o VmUtilizationMetricsOutput) MemoryAveragePercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VmUtilizationMetrics) *int { return v.MemoryAveragePercent }).(pulumi.IntPtrOutput)
}

// Max memory usage, percent.
func (o VmUtilizationMetricsOutput) MemoryMaxPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VmUtilizationMetrics) *int { return v.MemoryMaxPercent }).(pulumi.IntPtrOutput)
}

// Average network throughput (combined transmit-rates and receive-rates), in kilobytes per second.
func (o VmUtilizationMetricsOutput) NetworkThroughputAverageKbps() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmUtilizationMetrics) *string { return v.NetworkThroughputAverageKbps }).(pulumi.StringPtrOutput)
}

// Max network throughput (combined transmit-rates and receive-rates), in kilobytes per second.
func (o VmUtilizationMetricsOutput) NetworkThroughputMaxKbps() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmUtilizationMetrics) *string { return v.NetworkThroughputMaxKbps }).(pulumi.StringPtrOutput)
}

type VmUtilizationMetricsPtrOutput struct{ *pulumi.OutputState }

func (VmUtilizationMetricsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VmUtilizationMetrics)(nil)).Elem()
}

func (o VmUtilizationMetricsPtrOutput) ToVmUtilizationMetricsPtrOutput() VmUtilizationMetricsPtrOutput {
	return o
}

func (o VmUtilizationMetricsPtrOutput) ToVmUtilizationMetricsPtrOutputWithContext(ctx context.Context) VmUtilizationMetricsPtrOutput {
	return o
}

func (o VmUtilizationMetricsPtrOutput) Elem() VmUtilizationMetricsOutput {
	return o.ApplyT(func(v *VmUtilizationMetrics) VmUtilizationMetrics {
		if v != nil {
			return *v
		}
		var ret VmUtilizationMetrics
		return ret
	}).(VmUtilizationMetricsOutput)
}

// Average CPU usage, percent.
func (o VmUtilizationMetricsPtrOutput) CpuAveragePercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VmUtilizationMetrics) *int {
		if v == nil {
			return nil
		}
		return v.CpuAveragePercent
	}).(pulumi.IntPtrOutput)
}

// Max CPU usage, percent.
func (o VmUtilizationMetricsPtrOutput) CpuMaxPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VmUtilizationMetrics) *int {
		if v == nil {
			return nil
		}
		return v.CpuMaxPercent
	}).(pulumi.IntPtrOutput)
}

// Average disk IO rate, in kilobytes per second.
func (o VmUtilizationMetricsPtrOutput) DiskIoRateAverageKbps() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmUtilizationMetrics) *string {
		if v == nil {
			return nil
		}
		return v.DiskIoRateAverageKbps
	}).(pulumi.StringPtrOutput)
}

// Max disk IO rate, in kilobytes per second.
func (o VmUtilizationMetricsPtrOutput) DiskIoRateMaxKbps() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmUtilizationMetrics) *string {
		if v == nil {
			return nil
		}
		return v.DiskIoRateMaxKbps
	}).(pulumi.StringPtrOutput)
}

// Average memory usage, percent.
func (o VmUtilizationMetricsPtrOutput) MemoryAveragePercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VmUtilizationMetrics) *int {
		if v == nil {
			return nil
		}
		return v.MemoryAveragePercent
	}).(pulumi.IntPtrOutput)
}

// Max memory usage, percent.
func (o VmUtilizationMetricsPtrOutput) MemoryMaxPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VmUtilizationMetrics) *int {
		if v == nil {
			return nil
		}
		return v.MemoryMaxPercent
	}).(pulumi.IntPtrOutput)
}

// Average network throughput (combined transmit-rates and receive-rates), in kilobytes per second.
func (o VmUtilizationMetricsPtrOutput) NetworkThroughputAverageKbps() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmUtilizationMetrics) *string {
		if v == nil {
			return nil
		}
		return v.NetworkThroughputAverageKbps
	}).(pulumi.StringPtrOutput)
}

// Max network throughput (combined transmit-rates and receive-rates), in kilobytes per second.
func (o VmUtilizationMetricsPtrOutput) NetworkThroughputMaxKbps() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmUtilizationMetrics) *string {
		if v == nil {
			return nil
		}
		return v.NetworkThroughputMaxKbps
	}).(pulumi.StringPtrOutput)
}

// Utilization metrics values for a single VM.
type VmUtilizationMetricsResponse struct {
	// Average CPU usage, percent.
	CpuAveragePercent int `pulumi:"cpuAveragePercent"`
	// Max CPU usage, percent.
	CpuMaxPercent int `pulumi:"cpuMaxPercent"`
	// Average disk IO rate, in kilobytes per second.
	DiskIoRateAverageKbps string `pulumi:"diskIoRateAverageKbps"`
	// Max disk IO rate, in kilobytes per second.
	DiskIoRateMaxKbps string `pulumi:"diskIoRateMaxKbps"`
	// Average memory usage, percent.
	MemoryAveragePercent int `pulumi:"memoryAveragePercent"`
	// Max memory usage, percent.
	MemoryMaxPercent int `pulumi:"memoryMaxPercent"`
	// Average network throughput (combined transmit-rates and receive-rates), in kilobytes per second.
	NetworkThroughputAverageKbps string `pulumi:"networkThroughputAverageKbps"`
	// Max network throughput (combined transmit-rates and receive-rates), in kilobytes per second.
	NetworkThroughputMaxKbps string `pulumi:"networkThroughputMaxKbps"`
}

// Utilization metrics values for a single VM.
type VmUtilizationMetricsResponseOutput struct{ *pulumi.OutputState }

func (VmUtilizationMetricsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmUtilizationMetricsResponse)(nil)).Elem()
}

func (o VmUtilizationMetricsResponseOutput) ToVmUtilizationMetricsResponseOutput() VmUtilizationMetricsResponseOutput {
	return o
}

func (o VmUtilizationMetricsResponseOutput) ToVmUtilizationMetricsResponseOutputWithContext(ctx context.Context) VmUtilizationMetricsResponseOutput {
	return o
}

// Average CPU usage, percent.
func (o VmUtilizationMetricsResponseOutput) CpuAveragePercent() pulumi.IntOutput {
	return o.ApplyT(func(v VmUtilizationMetricsResponse) int { return v.CpuAveragePercent }).(pulumi.IntOutput)
}

// Max CPU usage, percent.
func (o VmUtilizationMetricsResponseOutput) CpuMaxPercent() pulumi.IntOutput {
	return o.ApplyT(func(v VmUtilizationMetricsResponse) int { return v.CpuMaxPercent }).(pulumi.IntOutput)
}

// Average disk IO rate, in kilobytes per second.
func (o VmUtilizationMetricsResponseOutput) DiskIoRateAverageKbps() pulumi.StringOutput {
	return o.ApplyT(func(v VmUtilizationMetricsResponse) string { return v.DiskIoRateAverageKbps }).(pulumi.StringOutput)
}

// Max disk IO rate, in kilobytes per second.
func (o VmUtilizationMetricsResponseOutput) DiskIoRateMaxKbps() pulumi.StringOutput {
	return o.ApplyT(func(v VmUtilizationMetricsResponse) string { return v.DiskIoRateMaxKbps }).(pulumi.StringOutput)
}

// Average memory usage, percent.
func (o VmUtilizationMetricsResponseOutput) MemoryAveragePercent() pulumi.IntOutput {
	return o.ApplyT(func(v VmUtilizationMetricsResponse) int { return v.MemoryAveragePercent }).(pulumi.IntOutput)
}

// Max memory usage, percent.
func (o VmUtilizationMetricsResponseOutput) MemoryMaxPercent() pulumi.IntOutput {
	return o.ApplyT(func(v VmUtilizationMetricsResponse) int { return v.MemoryMaxPercent }).(pulumi.IntOutput)
}

// Average network throughput (combined transmit-rates and receive-rates), in kilobytes per second.
func (o VmUtilizationMetricsResponseOutput) NetworkThroughputAverageKbps() pulumi.StringOutput {
	return o.ApplyT(func(v VmUtilizationMetricsResponse) string { return v.NetworkThroughputAverageKbps }).(pulumi.StringOutput)
}

// Max network throughput (combined transmit-rates and receive-rates), in kilobytes per second.
func (o VmUtilizationMetricsResponseOutput) NetworkThroughputMaxKbps() pulumi.StringOutput {
	return o.ApplyT(func(v VmUtilizationMetricsResponse) string { return v.NetworkThroughputMaxKbps }).(pulumi.StringOutput)
}

// The details of a Vmware VM disk.
type VmwareDiskDetailsResponse struct {
	// The ordinal number of the disk.
	DiskNumber int `pulumi:"diskNumber"`
	// The disk label.
	Label string `pulumi:"label"`
	// Size in GB.
	SizeGb string `pulumi:"sizeGb"`
}

// The details of a Vmware VM disk.
type VmwareDiskDetailsResponseOutput struct{ *pulumi.OutputState }

func (VmwareDiskDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareDiskDetailsResponse)(nil)).Elem()
}

func (o VmwareDiskDetailsResponseOutput) ToVmwareDiskDetailsResponseOutput() VmwareDiskDetailsResponseOutput {
	return o
}

func (o VmwareDiskDetailsResponseOutput) ToVmwareDiskDetailsResponseOutputWithContext(ctx context.Context) VmwareDiskDetailsResponseOutput {
	return o
}

// The ordinal number of the disk.
func (o VmwareDiskDetailsResponseOutput) DiskNumber() pulumi.IntOutput {
	return o.ApplyT(func(v VmwareDiskDetailsResponse) int { return v.DiskNumber }).(pulumi.IntOutput)
}

// The disk label.
func (o VmwareDiskDetailsResponseOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareDiskDetailsResponse) string { return v.Label }).(pulumi.StringOutput)
}

// Size in GB.
func (o VmwareDiskDetailsResponseOutput) SizeGb() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareDiskDetailsResponse) string { return v.SizeGb }).(pulumi.StringOutput)
}

type VmwareDiskDetailsResponseArrayOutput struct{ *pulumi.OutputState }

func (VmwareDiskDetailsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VmwareDiskDetailsResponse)(nil)).Elem()
}

func (o VmwareDiskDetailsResponseArrayOutput) ToVmwareDiskDetailsResponseArrayOutput() VmwareDiskDetailsResponseArrayOutput {
	return o
}

func (o VmwareDiskDetailsResponseArrayOutput) ToVmwareDiskDetailsResponseArrayOutputWithContext(ctx context.Context) VmwareDiskDetailsResponseArrayOutput {
	return o
}

func (o VmwareDiskDetailsResponseArrayOutput) Index(i pulumi.IntInput) VmwareDiskDetailsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VmwareDiskDetailsResponse {
		return vs[0].([]VmwareDiskDetailsResponse)[vs[1].(int)]
	}).(VmwareDiskDetailsResponseOutput)
}

// VmwareSourceDetails message describes a specific source details for the vmware source type.
type VmwareSourceDetails struct {
	// Input only. The credentials password. This is write only and can not be read in a GET operation.
	Password *string `pulumi:"password"`
	// The hostname of the vcenter.
	ResolvedVcenterHost *string `pulumi:"resolvedVcenterHost"`
	// The thumbprint representing the certificate for the vcenter.
	Thumbprint *string `pulumi:"thumbprint"`
	// The credentials username.
	Username *string `pulumi:"username"`
	// The ip address of the vcenter this Source represents.
	VcenterIp *string `pulumi:"vcenterIp"`
}

// VmwareSourceDetailsInput is an input type that accepts VmwareSourceDetailsArgs and VmwareSourceDetailsOutput values.
// You can construct a concrete instance of `VmwareSourceDetailsInput` via:
//
//	VmwareSourceDetailsArgs{...}
type VmwareSourceDetailsInput interface {
	pulumi.Input

	ToVmwareSourceDetailsOutput() VmwareSourceDetailsOutput
	ToVmwareSourceDetailsOutputWithContext(context.Context) VmwareSourceDetailsOutput
}

// VmwareSourceDetails message describes a specific source details for the vmware source type.
type VmwareSourceDetailsArgs struct {
	// Input only. The credentials password. This is write only and can not be read in a GET operation.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The hostname of the vcenter.
	ResolvedVcenterHost pulumi.StringPtrInput `pulumi:"resolvedVcenterHost"`
	// The thumbprint representing the certificate for the vcenter.
	Thumbprint pulumi.StringPtrInput `pulumi:"thumbprint"`
	// The credentials username.
	Username pulumi.StringPtrInput `pulumi:"username"`
	// The ip address of the vcenter this Source represents.
	VcenterIp pulumi.StringPtrInput `pulumi:"vcenterIp"`
}

func (VmwareSourceDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareSourceDetails)(nil)).Elem()
}

func (i VmwareSourceDetailsArgs) ToVmwareSourceDetailsOutput() VmwareSourceDetailsOutput {
	return i.ToVmwareSourceDetailsOutputWithContext(context.Background())
}

func (i VmwareSourceDetailsArgs) ToVmwareSourceDetailsOutputWithContext(ctx context.Context) VmwareSourceDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareSourceDetailsOutput)
}

func (i VmwareSourceDetailsArgs) ToVmwareSourceDetailsPtrOutput() VmwareSourceDetailsPtrOutput {
	return i.ToVmwareSourceDetailsPtrOutputWithContext(context.Background())
}

func (i VmwareSourceDetailsArgs) ToVmwareSourceDetailsPtrOutputWithContext(ctx context.Context) VmwareSourceDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareSourceDetailsOutput).ToVmwareSourceDetailsPtrOutputWithContext(ctx)
}

// VmwareSourceDetailsPtrInput is an input type that accepts VmwareSourceDetailsArgs, VmwareSourceDetailsPtr and VmwareSourceDetailsPtrOutput values.
// You can construct a concrete instance of `VmwareSourceDetailsPtrInput` via:
//
//	        VmwareSourceDetailsArgs{...}
//
//	or:
//
//	        nil
type VmwareSourceDetailsPtrInput interface {
	pulumi.Input

	ToVmwareSourceDetailsPtrOutput() VmwareSourceDetailsPtrOutput
	ToVmwareSourceDetailsPtrOutputWithContext(context.Context) VmwareSourceDetailsPtrOutput
}

type vmwareSourceDetailsPtrType VmwareSourceDetailsArgs

func VmwareSourceDetailsPtr(v *VmwareSourceDetailsArgs) VmwareSourceDetailsPtrInput {
	return (*vmwareSourceDetailsPtrType)(v)
}

func (*vmwareSourceDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VmwareSourceDetails)(nil)).Elem()
}

func (i *vmwareSourceDetailsPtrType) ToVmwareSourceDetailsPtrOutput() VmwareSourceDetailsPtrOutput {
	return i.ToVmwareSourceDetailsPtrOutputWithContext(context.Background())
}

func (i *vmwareSourceDetailsPtrType) ToVmwareSourceDetailsPtrOutputWithContext(ctx context.Context) VmwareSourceDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareSourceDetailsPtrOutput)
}

// VmwareSourceDetails message describes a specific source details for the vmware source type.
type VmwareSourceDetailsOutput struct{ *pulumi.OutputState }

func (VmwareSourceDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareSourceDetails)(nil)).Elem()
}

func (o VmwareSourceDetailsOutput) ToVmwareSourceDetailsOutput() VmwareSourceDetailsOutput {
	return o
}

func (o VmwareSourceDetailsOutput) ToVmwareSourceDetailsOutputWithContext(ctx context.Context) VmwareSourceDetailsOutput {
	return o
}

func (o VmwareSourceDetailsOutput) ToVmwareSourceDetailsPtrOutput() VmwareSourceDetailsPtrOutput {
	return o.ToVmwareSourceDetailsPtrOutputWithContext(context.Background())
}

func (o VmwareSourceDetailsOutput) ToVmwareSourceDetailsPtrOutputWithContext(ctx context.Context) VmwareSourceDetailsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VmwareSourceDetails) *VmwareSourceDetails {
		return &v
	}).(VmwareSourceDetailsPtrOutput)
}

// Input only. The credentials password. This is write only and can not be read in a GET operation.
func (o VmwareSourceDetailsOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmwareSourceDetails) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The hostname of the vcenter.
func (o VmwareSourceDetailsOutput) ResolvedVcenterHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmwareSourceDetails) *string { return v.ResolvedVcenterHost }).(pulumi.StringPtrOutput)
}

// The thumbprint representing the certificate for the vcenter.
func (o VmwareSourceDetailsOutput) Thumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmwareSourceDetails) *string { return v.Thumbprint }).(pulumi.StringPtrOutput)
}

// The credentials username.
func (o VmwareSourceDetailsOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmwareSourceDetails) *string { return v.Username }).(pulumi.StringPtrOutput)
}

// The ip address of the vcenter this Source represents.
func (o VmwareSourceDetailsOutput) VcenterIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmwareSourceDetails) *string { return v.VcenterIp }).(pulumi.StringPtrOutput)
}

type VmwareSourceDetailsPtrOutput struct{ *pulumi.OutputState }

func (VmwareSourceDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VmwareSourceDetails)(nil)).Elem()
}

func (o VmwareSourceDetailsPtrOutput) ToVmwareSourceDetailsPtrOutput() VmwareSourceDetailsPtrOutput {
	return o
}

func (o VmwareSourceDetailsPtrOutput) ToVmwareSourceDetailsPtrOutputWithContext(ctx context.Context) VmwareSourceDetailsPtrOutput {
	return o
}

func (o VmwareSourceDetailsPtrOutput) Elem() VmwareSourceDetailsOutput {
	return o.ApplyT(func(v *VmwareSourceDetails) VmwareSourceDetails {
		if v != nil {
			return *v
		}
		var ret VmwareSourceDetails
		return ret
	}).(VmwareSourceDetailsOutput)
}

// Input only. The credentials password. This is write only and can not be read in a GET operation.
func (o VmwareSourceDetailsPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmwareSourceDetails) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The hostname of the vcenter.
func (o VmwareSourceDetailsPtrOutput) ResolvedVcenterHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmwareSourceDetails) *string {
		if v == nil {
			return nil
		}
		return v.ResolvedVcenterHost
	}).(pulumi.StringPtrOutput)
}

// The thumbprint representing the certificate for the vcenter.
func (o VmwareSourceDetailsPtrOutput) Thumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmwareSourceDetails) *string {
		if v == nil {
			return nil
		}
		return v.Thumbprint
	}).(pulumi.StringPtrOutput)
}

// The credentials username.
func (o VmwareSourceDetailsPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmwareSourceDetails) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

// The ip address of the vcenter this Source represents.
func (o VmwareSourceDetailsPtrOutput) VcenterIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmwareSourceDetails) *string {
		if v == nil {
			return nil
		}
		return v.VcenterIp
	}).(pulumi.StringPtrOutput)
}

// VmwareSourceDetails message describes a specific source details for the vmware source type.
type VmwareSourceDetailsResponse struct {
	// Input only. The credentials password. This is write only and can not be read in a GET operation.
	Password string `pulumi:"password"`
	// The hostname of the vcenter.
	ResolvedVcenterHost string `pulumi:"resolvedVcenterHost"`
	// The thumbprint representing the certificate for the vcenter.
	Thumbprint string `pulumi:"thumbprint"`
	// The credentials username.
	Username string `pulumi:"username"`
	// The ip address of the vcenter this Source represents.
	VcenterIp string `pulumi:"vcenterIp"`
}

// VmwareSourceDetails message describes a specific source details for the vmware source type.
type VmwareSourceDetailsResponseOutput struct{ *pulumi.OutputState }

func (VmwareSourceDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareSourceDetailsResponse)(nil)).Elem()
}

func (o VmwareSourceDetailsResponseOutput) ToVmwareSourceDetailsResponseOutput() VmwareSourceDetailsResponseOutput {
	return o
}

func (o VmwareSourceDetailsResponseOutput) ToVmwareSourceDetailsResponseOutputWithContext(ctx context.Context) VmwareSourceDetailsResponseOutput {
	return o
}

// Input only. The credentials password. This is write only and can not be read in a GET operation.
func (o VmwareSourceDetailsResponseOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareSourceDetailsResponse) string { return v.Password }).(pulumi.StringOutput)
}

// The hostname of the vcenter.
func (o VmwareSourceDetailsResponseOutput) ResolvedVcenterHost() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareSourceDetailsResponse) string { return v.ResolvedVcenterHost }).(pulumi.StringOutput)
}

// The thumbprint representing the certificate for the vcenter.
func (o VmwareSourceDetailsResponseOutput) Thumbprint() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareSourceDetailsResponse) string { return v.Thumbprint }).(pulumi.StringOutput)
}

// The credentials username.
func (o VmwareSourceDetailsResponseOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareSourceDetailsResponse) string { return v.Username }).(pulumi.StringOutput)
}

// The ip address of the vcenter this Source represents.
func (o VmwareSourceDetailsResponseOutput) VcenterIp() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareSourceDetailsResponse) string { return v.VcenterIp }).(pulumi.StringOutput)
}

// Represent the source Vmware VM details.
type VmwareSourceVmDetailsResponse struct {
	// The total size of the disks being migrated in bytes.
	CommittedStorageBytes string `pulumi:"committedStorageBytes"`
	// The disks attached to the source VM.
	Disks []VmwareDiskDetailsResponse `pulumi:"disks"`
	// The firmware type of the source VM.
	Firmware string `pulumi:"firmware"`
	// Information about VM capabilities needed for some Compute Engine features.
	VmCapabilitiesInfo VmCapabilitiesResponse `pulumi:"vmCapabilitiesInfo"`
}

// Represent the source Vmware VM details.
type VmwareSourceVmDetailsResponseOutput struct{ *pulumi.OutputState }

func (VmwareSourceVmDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareSourceVmDetailsResponse)(nil)).Elem()
}

func (o VmwareSourceVmDetailsResponseOutput) ToVmwareSourceVmDetailsResponseOutput() VmwareSourceVmDetailsResponseOutput {
	return o
}

func (o VmwareSourceVmDetailsResponseOutput) ToVmwareSourceVmDetailsResponseOutputWithContext(ctx context.Context) VmwareSourceVmDetailsResponseOutput {
	return o
}

// The total size of the disks being migrated in bytes.
func (o VmwareSourceVmDetailsResponseOutput) CommittedStorageBytes() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareSourceVmDetailsResponse) string { return v.CommittedStorageBytes }).(pulumi.StringOutput)
}

// The disks attached to the source VM.
func (o VmwareSourceVmDetailsResponseOutput) Disks() VmwareDiskDetailsResponseArrayOutput {
	return o.ApplyT(func(v VmwareSourceVmDetailsResponse) []VmwareDiskDetailsResponse { return v.Disks }).(VmwareDiskDetailsResponseArrayOutput)
}

// The firmware type of the source VM.
func (o VmwareSourceVmDetailsResponseOutput) Firmware() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareSourceVmDetailsResponse) string { return v.Firmware }).(pulumi.StringOutput)
}

// Information about VM capabilities needed for some Compute Engine features.
func (o VmwareSourceVmDetailsResponseOutput) VmCapabilitiesInfo() VmCapabilitiesResponseOutput {
	return o.ApplyT(func(v VmwareSourceVmDetailsResponse) VmCapabilitiesResponse { return v.VmCapabilitiesInfo }).(VmCapabilitiesResponseOutput)
}

// VmwareVmDetails describes a VM in vCenter.
type VmwareVmDetails struct {
	// The total size of the storage allocated to the VM in MB.
	CommittedStorageMb *string `pulumi:"committedStorageMb"`
	// The number of cpus in the VM.
	CpuCount *int `pulumi:"cpuCount"`
	// The descriptive name of the vCenter's datacenter this VM is contained in.
	DatacenterDescription *string `pulumi:"datacenterDescription"`
	// The id of the vCenter's datacenter this VM is contained in.
	DatacenterId *string `pulumi:"datacenterId"`
	// The number of disks the VM has.
	DiskCount *int `pulumi:"diskCount"`
	// The display name of the VM. Note that this is not necessarily unique.
	DisplayName *string `pulumi:"displayName"`
	// The VM's OS. See for example https://vdc-repo.vmware.com/vmwb-repository/dcr-public/da47f910-60ac-438b-8b9b-6122f4d14524/16b7274a-bf8b-4b4c-a05e-746f2aa93c8c/doc/vim.vm.GuestOsDescriptor.GuestOsIdentifier.html for types of strings this might hold.
	GuestDescription *string `pulumi:"guestDescription"`
	// The size of the memory of the VM in MB.
	MemoryMb *int `pulumi:"memoryMb"`
	// The power state of the VM at the moment list was taken.
	PowerState *VmwareVmDetailsPowerState `pulumi:"powerState"`
	// The unique identifier of the VM in vCenter.
	Uuid *string `pulumi:"uuid"`
	// The VM's id in the source (note that this is not the MigratingVm's id). This is the moref id of the VM.
	VmId *string `pulumi:"vmId"`
}

// VmwareVmDetailsInput is an input type that accepts VmwareVmDetailsArgs and VmwareVmDetailsOutput values.
// You can construct a concrete instance of `VmwareVmDetailsInput` via:
//
//	VmwareVmDetailsArgs{...}
type VmwareVmDetailsInput interface {
	pulumi.Input

	ToVmwareVmDetailsOutput() VmwareVmDetailsOutput
	ToVmwareVmDetailsOutputWithContext(context.Context) VmwareVmDetailsOutput
}

// VmwareVmDetails describes a VM in vCenter.
type VmwareVmDetailsArgs struct {
	// The total size of the storage allocated to the VM in MB.
	CommittedStorageMb pulumi.StringPtrInput `pulumi:"committedStorageMb"`
	// The number of cpus in the VM.
	CpuCount pulumi.IntPtrInput `pulumi:"cpuCount"`
	// The descriptive name of the vCenter's datacenter this VM is contained in.
	DatacenterDescription pulumi.StringPtrInput `pulumi:"datacenterDescription"`
	// The id of the vCenter's datacenter this VM is contained in.
	DatacenterId pulumi.StringPtrInput `pulumi:"datacenterId"`
	// The number of disks the VM has.
	DiskCount pulumi.IntPtrInput `pulumi:"diskCount"`
	// The display name of the VM. Note that this is not necessarily unique.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The VM's OS. See for example https://vdc-repo.vmware.com/vmwb-repository/dcr-public/da47f910-60ac-438b-8b9b-6122f4d14524/16b7274a-bf8b-4b4c-a05e-746f2aa93c8c/doc/vim.vm.GuestOsDescriptor.GuestOsIdentifier.html for types of strings this might hold.
	GuestDescription pulumi.StringPtrInput `pulumi:"guestDescription"`
	// The size of the memory of the VM in MB.
	MemoryMb pulumi.IntPtrInput `pulumi:"memoryMb"`
	// The power state of the VM at the moment list was taken.
	PowerState VmwareVmDetailsPowerStatePtrInput `pulumi:"powerState"`
	// The unique identifier of the VM in vCenter.
	Uuid pulumi.StringPtrInput `pulumi:"uuid"`
	// The VM's id in the source (note that this is not the MigratingVm's id). This is the moref id of the VM.
	VmId pulumi.StringPtrInput `pulumi:"vmId"`
}

func (VmwareVmDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareVmDetails)(nil)).Elem()
}

func (i VmwareVmDetailsArgs) ToVmwareVmDetailsOutput() VmwareVmDetailsOutput {
	return i.ToVmwareVmDetailsOutputWithContext(context.Background())
}

func (i VmwareVmDetailsArgs) ToVmwareVmDetailsOutputWithContext(ctx context.Context) VmwareVmDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareVmDetailsOutput)
}

func (i VmwareVmDetailsArgs) ToVmwareVmDetailsPtrOutput() VmwareVmDetailsPtrOutput {
	return i.ToVmwareVmDetailsPtrOutputWithContext(context.Background())
}

func (i VmwareVmDetailsArgs) ToVmwareVmDetailsPtrOutputWithContext(ctx context.Context) VmwareVmDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareVmDetailsOutput).ToVmwareVmDetailsPtrOutputWithContext(ctx)
}

// VmwareVmDetailsPtrInput is an input type that accepts VmwareVmDetailsArgs, VmwareVmDetailsPtr and VmwareVmDetailsPtrOutput values.
// You can construct a concrete instance of `VmwareVmDetailsPtrInput` via:
//
//	        VmwareVmDetailsArgs{...}
//
//	or:
//
//	        nil
type VmwareVmDetailsPtrInput interface {
	pulumi.Input

	ToVmwareVmDetailsPtrOutput() VmwareVmDetailsPtrOutput
	ToVmwareVmDetailsPtrOutputWithContext(context.Context) VmwareVmDetailsPtrOutput
}

type vmwareVmDetailsPtrType VmwareVmDetailsArgs

func VmwareVmDetailsPtr(v *VmwareVmDetailsArgs) VmwareVmDetailsPtrInput {
	return (*vmwareVmDetailsPtrType)(v)
}

func (*vmwareVmDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VmwareVmDetails)(nil)).Elem()
}

func (i *vmwareVmDetailsPtrType) ToVmwareVmDetailsPtrOutput() VmwareVmDetailsPtrOutput {
	return i.ToVmwareVmDetailsPtrOutputWithContext(context.Background())
}

func (i *vmwareVmDetailsPtrType) ToVmwareVmDetailsPtrOutputWithContext(ctx context.Context) VmwareVmDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareVmDetailsPtrOutput)
}

// VmwareVmDetails describes a VM in vCenter.
type VmwareVmDetailsOutput struct{ *pulumi.OutputState }

func (VmwareVmDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareVmDetails)(nil)).Elem()
}

func (o VmwareVmDetailsOutput) ToVmwareVmDetailsOutput() VmwareVmDetailsOutput {
	return o
}

func (o VmwareVmDetailsOutput) ToVmwareVmDetailsOutputWithContext(ctx context.Context) VmwareVmDetailsOutput {
	return o
}

func (o VmwareVmDetailsOutput) ToVmwareVmDetailsPtrOutput() VmwareVmDetailsPtrOutput {
	return o.ToVmwareVmDetailsPtrOutputWithContext(context.Background())
}

func (o VmwareVmDetailsOutput) ToVmwareVmDetailsPtrOutputWithContext(ctx context.Context) VmwareVmDetailsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VmwareVmDetails) *VmwareVmDetails {
		return &v
	}).(VmwareVmDetailsPtrOutput)
}

// The total size of the storage allocated to the VM in MB.
func (o VmwareVmDetailsOutput) CommittedStorageMb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmwareVmDetails) *string { return v.CommittedStorageMb }).(pulumi.StringPtrOutput)
}

// The number of cpus in the VM.
func (o VmwareVmDetailsOutput) CpuCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VmwareVmDetails) *int { return v.CpuCount }).(pulumi.IntPtrOutput)
}

// The descriptive name of the vCenter's datacenter this VM is contained in.
func (o VmwareVmDetailsOutput) DatacenterDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmwareVmDetails) *string { return v.DatacenterDescription }).(pulumi.StringPtrOutput)
}

// The id of the vCenter's datacenter this VM is contained in.
func (o VmwareVmDetailsOutput) DatacenterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmwareVmDetails) *string { return v.DatacenterId }).(pulumi.StringPtrOutput)
}

// The number of disks the VM has.
func (o VmwareVmDetailsOutput) DiskCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VmwareVmDetails) *int { return v.DiskCount }).(pulumi.IntPtrOutput)
}

// The display name of the VM. Note that this is not necessarily unique.
func (o VmwareVmDetailsOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmwareVmDetails) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The VM's OS. See for example https://vdc-repo.vmware.com/vmwb-repository/dcr-public/da47f910-60ac-438b-8b9b-6122f4d14524/16b7274a-bf8b-4b4c-a05e-746f2aa93c8c/doc/vim.vm.GuestOsDescriptor.GuestOsIdentifier.html for types of strings this might hold.
func (o VmwareVmDetailsOutput) GuestDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmwareVmDetails) *string { return v.GuestDescription }).(pulumi.StringPtrOutput)
}

// The size of the memory of the VM in MB.
func (o VmwareVmDetailsOutput) MemoryMb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VmwareVmDetails) *int { return v.MemoryMb }).(pulumi.IntPtrOutput)
}

// The power state of the VM at the moment list was taken.
func (o VmwareVmDetailsOutput) PowerState() VmwareVmDetailsPowerStatePtrOutput {
	return o.ApplyT(func(v VmwareVmDetails) *VmwareVmDetailsPowerState { return v.PowerState }).(VmwareVmDetailsPowerStatePtrOutput)
}

// The unique identifier of the VM in vCenter.
func (o VmwareVmDetailsOutput) Uuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmwareVmDetails) *string { return v.Uuid }).(pulumi.StringPtrOutput)
}

// The VM's id in the source (note that this is not the MigratingVm's id). This is the moref id of the VM.
func (o VmwareVmDetailsOutput) VmId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmwareVmDetails) *string { return v.VmId }).(pulumi.StringPtrOutput)
}

type VmwareVmDetailsPtrOutput struct{ *pulumi.OutputState }

func (VmwareVmDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VmwareVmDetails)(nil)).Elem()
}

func (o VmwareVmDetailsPtrOutput) ToVmwareVmDetailsPtrOutput() VmwareVmDetailsPtrOutput {
	return o
}

func (o VmwareVmDetailsPtrOutput) ToVmwareVmDetailsPtrOutputWithContext(ctx context.Context) VmwareVmDetailsPtrOutput {
	return o
}

func (o VmwareVmDetailsPtrOutput) Elem() VmwareVmDetailsOutput {
	return o.ApplyT(func(v *VmwareVmDetails) VmwareVmDetails {
		if v != nil {
			return *v
		}
		var ret VmwareVmDetails
		return ret
	}).(VmwareVmDetailsOutput)
}

// The total size of the storage allocated to the VM in MB.
func (o VmwareVmDetailsPtrOutput) CommittedStorageMb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmwareVmDetails) *string {
		if v == nil {
			return nil
		}
		return v.CommittedStorageMb
	}).(pulumi.StringPtrOutput)
}

// The number of cpus in the VM.
func (o VmwareVmDetailsPtrOutput) CpuCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VmwareVmDetails) *int {
		if v == nil {
			return nil
		}
		return v.CpuCount
	}).(pulumi.IntPtrOutput)
}

// The descriptive name of the vCenter's datacenter this VM is contained in.
func (o VmwareVmDetailsPtrOutput) DatacenterDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmwareVmDetails) *string {
		if v == nil {
			return nil
		}
		return v.DatacenterDescription
	}).(pulumi.StringPtrOutput)
}

// The id of the vCenter's datacenter this VM is contained in.
func (o VmwareVmDetailsPtrOutput) DatacenterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmwareVmDetails) *string {
		if v == nil {
			return nil
		}
		return v.DatacenterId
	}).(pulumi.StringPtrOutput)
}

// The number of disks the VM has.
func (o VmwareVmDetailsPtrOutput) DiskCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VmwareVmDetails) *int {
		if v == nil {
			return nil
		}
		return v.DiskCount
	}).(pulumi.IntPtrOutput)
}

// The display name of the VM. Note that this is not necessarily unique.
func (o VmwareVmDetailsPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmwareVmDetails) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// The VM's OS. See for example https://vdc-repo.vmware.com/vmwb-repository/dcr-public/da47f910-60ac-438b-8b9b-6122f4d14524/16b7274a-bf8b-4b4c-a05e-746f2aa93c8c/doc/vim.vm.GuestOsDescriptor.GuestOsIdentifier.html for types of strings this might hold.
func (o VmwareVmDetailsPtrOutput) GuestDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmwareVmDetails) *string {
		if v == nil {
			return nil
		}
		return v.GuestDescription
	}).(pulumi.StringPtrOutput)
}

// The size of the memory of the VM in MB.
func (o VmwareVmDetailsPtrOutput) MemoryMb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VmwareVmDetails) *int {
		if v == nil {
			return nil
		}
		return v.MemoryMb
	}).(pulumi.IntPtrOutput)
}

// The power state of the VM at the moment list was taken.
func (o VmwareVmDetailsPtrOutput) PowerState() VmwareVmDetailsPowerStatePtrOutput {
	return o.ApplyT(func(v *VmwareVmDetails) *VmwareVmDetailsPowerState {
		if v == nil {
			return nil
		}
		return v.PowerState
	}).(VmwareVmDetailsPowerStatePtrOutput)
}

// The unique identifier of the VM in vCenter.
func (o VmwareVmDetailsPtrOutput) Uuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmwareVmDetails) *string {
		if v == nil {
			return nil
		}
		return v.Uuid
	}).(pulumi.StringPtrOutput)
}

// The VM's id in the source (note that this is not the MigratingVm's id). This is the moref id of the VM.
func (o VmwareVmDetailsPtrOutput) VmId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmwareVmDetails) *string {
		if v == nil {
			return nil
		}
		return v.VmId
	}).(pulumi.StringPtrOutput)
}

// VmwareVmDetails describes a VM in vCenter.
type VmwareVmDetailsResponse struct {
	// The VM Boot Option.
	BootOption string `pulumi:"bootOption"`
	// The total size of the storage allocated to the VM in MB.
	CommittedStorageMb string `pulumi:"committedStorageMb"`
	// The number of cpus in the VM.
	CpuCount int `pulumi:"cpuCount"`
	// The descriptive name of the vCenter's datacenter this VM is contained in.
	DatacenterDescription string `pulumi:"datacenterDescription"`
	// The id of the vCenter's datacenter this VM is contained in.
	DatacenterId string `pulumi:"datacenterId"`
	// The number of disks the VM has.
	DiskCount int `pulumi:"diskCount"`
	// The display name of the VM. Note that this is not necessarily unique.
	DisplayName string `pulumi:"displayName"`
	// The VM's OS. See for example https://vdc-repo.vmware.com/vmwb-repository/dcr-public/da47f910-60ac-438b-8b9b-6122f4d14524/16b7274a-bf8b-4b4c-a05e-746f2aa93c8c/doc/vim.vm.GuestOsDescriptor.GuestOsIdentifier.html for types of strings this might hold.
	GuestDescription string `pulumi:"guestDescription"`
	// The size of the memory of the VM in MB.
	MemoryMb int `pulumi:"memoryMb"`
	// The power state of the VM at the moment list was taken.
	PowerState string `pulumi:"powerState"`
	// The unique identifier of the VM in vCenter.
	Uuid string `pulumi:"uuid"`
	// The VM's id in the source (note that this is not the MigratingVm's id). This is the moref id of the VM.
	VmId string `pulumi:"vmId"`
}

// VmwareVmDetails describes a VM in vCenter.
type VmwareVmDetailsResponseOutput struct{ *pulumi.OutputState }

func (VmwareVmDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareVmDetailsResponse)(nil)).Elem()
}

func (o VmwareVmDetailsResponseOutput) ToVmwareVmDetailsResponseOutput() VmwareVmDetailsResponseOutput {
	return o
}

func (o VmwareVmDetailsResponseOutput) ToVmwareVmDetailsResponseOutputWithContext(ctx context.Context) VmwareVmDetailsResponseOutput {
	return o
}

// The VM Boot Option.
func (o VmwareVmDetailsResponseOutput) BootOption() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareVmDetailsResponse) string { return v.BootOption }).(pulumi.StringOutput)
}

// The total size of the storage allocated to the VM in MB.
func (o VmwareVmDetailsResponseOutput) CommittedStorageMb() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareVmDetailsResponse) string { return v.CommittedStorageMb }).(pulumi.StringOutput)
}

// The number of cpus in the VM.
func (o VmwareVmDetailsResponseOutput) CpuCount() pulumi.IntOutput {
	return o.ApplyT(func(v VmwareVmDetailsResponse) int { return v.CpuCount }).(pulumi.IntOutput)
}

// The descriptive name of the vCenter's datacenter this VM is contained in.
func (o VmwareVmDetailsResponseOutput) DatacenterDescription() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareVmDetailsResponse) string { return v.DatacenterDescription }).(pulumi.StringOutput)
}

// The id of the vCenter's datacenter this VM is contained in.
func (o VmwareVmDetailsResponseOutput) DatacenterId() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareVmDetailsResponse) string { return v.DatacenterId }).(pulumi.StringOutput)
}

// The number of disks the VM has.
func (o VmwareVmDetailsResponseOutput) DiskCount() pulumi.IntOutput {
	return o.ApplyT(func(v VmwareVmDetailsResponse) int { return v.DiskCount }).(pulumi.IntOutput)
}

// The display name of the VM. Note that this is not necessarily unique.
func (o VmwareVmDetailsResponseOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareVmDetailsResponse) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The VM's OS. See for example https://vdc-repo.vmware.com/vmwb-repository/dcr-public/da47f910-60ac-438b-8b9b-6122f4d14524/16b7274a-bf8b-4b4c-a05e-746f2aa93c8c/doc/vim.vm.GuestOsDescriptor.GuestOsIdentifier.html for types of strings this might hold.
func (o VmwareVmDetailsResponseOutput) GuestDescription() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareVmDetailsResponse) string { return v.GuestDescription }).(pulumi.StringOutput)
}

// The size of the memory of the VM in MB.
func (o VmwareVmDetailsResponseOutput) MemoryMb() pulumi.IntOutput {
	return o.ApplyT(func(v VmwareVmDetailsResponse) int { return v.MemoryMb }).(pulumi.IntOutput)
}

// The power state of the VM at the moment list was taken.
func (o VmwareVmDetailsResponseOutput) PowerState() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareVmDetailsResponse) string { return v.PowerState }).(pulumi.StringOutput)
}

// The unique identifier of the VM in vCenter.
func (o VmwareVmDetailsResponseOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareVmDetailsResponse) string { return v.Uuid }).(pulumi.StringOutput)
}

// The VM's id in the source (note that this is not the MigratingVm's id). This is the moref id of the VM.
func (o VmwareVmDetailsResponseOutput) VmId() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareVmDetailsResponse) string { return v.VmId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccessKeyCredentialsInput)(nil)).Elem(), AccessKeyCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessKeyCredentialsPtrInput)(nil)).Elem(), AccessKeyCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsSourceDetailsInput)(nil)).Elem(), AwsSourceDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsSourceDetailsPtrInput)(nil)).Elem(), AwsSourceDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureSourceDetailsInput)(nil)).Elem(), AzureSourceDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureSourceDetailsPtrInput)(nil)).Elem(), AzureSourceDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BootDiskDefaultsInput)(nil)).Elem(), BootDiskDefaultsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BootDiskDefaultsPtrInput)(nil)).Elem(), BootDiskDefaultsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClientSecretCredentialsInput)(nil)).Elem(), ClientSecretCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClientSecretCredentialsPtrInput)(nil)).Elem(), ClientSecretCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeEngineDisksTargetDefaultsInput)(nil)).Elem(), ComputeEngineDisksTargetDefaultsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeEngineDisksTargetDefaultsPtrInput)(nil)).Elem(), ComputeEngineDisksTargetDefaultsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeEngineTargetDefaultsInput)(nil)).Elem(), ComputeEngineTargetDefaultsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeEngineTargetDefaultsPtrInput)(nil)).Elem(), ComputeEngineTargetDefaultsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeSchedulingInput)(nil)).Elem(), ComputeSchedulingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeSchedulingPtrInput)(nil)).Elem(), ComputeSchedulingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DiskImageDefaultsInput)(nil)).Elem(), DiskImageDefaultsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DiskImageDefaultsPtrInput)(nil)).Elem(), DiskImageDefaultsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DisksMigrationDisksTargetDefaultsInput)(nil)).Elem(), DisksMigrationDisksTargetDefaultsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DisksMigrationDisksTargetDefaultsPtrInput)(nil)).Elem(), DisksMigrationDisksTargetDefaultsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DisksMigrationVmTargetDefaultsInput)(nil)).Elem(), DisksMigrationVmTargetDefaultsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DisksMigrationVmTargetDefaultsPtrInput)(nil)).Elem(), DisksMigrationVmTargetDefaultsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EncryptionInput)(nil)).Elem(), EncryptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EncryptionPtrInput)(nil)).Elem(), EncryptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkInterfaceInput)(nil)).Elem(), NetworkInterfaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkInterfaceArrayInput)(nil)).Elem(), NetworkInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PersistentDiskDefaultsInput)(nil)).Elem(), PersistentDiskDefaultsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PersistentDiskDefaultsArrayInput)(nil)).Elem(), PersistentDiskDefaultsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchedulePolicyInput)(nil)).Elem(), SchedulePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchedulePolicyPtrInput)(nil)).Elem(), SchedulePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchedulingNodeAffinityInput)(nil)).Elem(), SchedulingNodeAffinityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchedulingNodeAffinityArrayInput)(nil)).Elem(), SchedulingNodeAffinityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TagInput)(nil)).Elem(), TagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TagArrayInput)(nil)).Elem(), TagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmAttachmentDetailsInput)(nil)).Elem(), VmAttachmentDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmAttachmentDetailsPtrInput)(nil)).Elem(), VmAttachmentDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmUtilizationInfoInput)(nil)).Elem(), VmUtilizationInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmUtilizationInfoArrayInput)(nil)).Elem(), VmUtilizationInfoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmUtilizationMetricsInput)(nil)).Elem(), VmUtilizationMetricsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmUtilizationMetricsPtrInput)(nil)).Elem(), VmUtilizationMetricsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareSourceDetailsInput)(nil)).Elem(), VmwareSourceDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareSourceDetailsPtrInput)(nil)).Elem(), VmwareSourceDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareVmDetailsInput)(nil)).Elem(), VmwareVmDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareVmDetailsPtrInput)(nil)).Elem(), VmwareVmDetailsArgs{})
	pulumi.RegisterOutputType(AccessKeyCredentialsOutput{})
	pulumi.RegisterOutputType(AccessKeyCredentialsPtrOutput{})
	pulumi.RegisterOutputType(AccessKeyCredentialsResponseOutput{})
	pulumi.RegisterOutputType(AdaptingOSStepResponseOutput{})
	pulumi.RegisterOutputType(ApplianceVersionResponseOutput{})
	pulumi.RegisterOutputType(AppliedLicenseResponseOutput{})
	pulumi.RegisterOutputType(AvailableUpdatesResponseOutput{})
	pulumi.RegisterOutputType(AwsDiskDetailsResponseOutput{})
	pulumi.RegisterOutputType(AwsDiskDetailsResponseArrayOutput{})
	pulumi.RegisterOutputType(AwsSourceDetailsOutput{})
	pulumi.RegisterOutputType(AwsSourceDetailsPtrOutput{})
	pulumi.RegisterOutputType(AwsSourceDetailsResponseOutput{})
	pulumi.RegisterOutputType(AwsSourceVmDetailsResponseOutput{})
	pulumi.RegisterOutputType(AzureDiskDetailsResponseOutput{})
	pulumi.RegisterOutputType(AzureDiskDetailsResponseArrayOutput{})
	pulumi.RegisterOutputType(AzureSourceDetailsOutput{})
	pulumi.RegisterOutputType(AzureSourceDetailsPtrOutput{})
	pulumi.RegisterOutputType(AzureSourceDetailsResponseOutput{})
	pulumi.RegisterOutputType(AzureSourceVmDetailsResponseOutput{})
	pulumi.RegisterOutputType(BootDiskDefaultsOutput{})
	pulumi.RegisterOutputType(BootDiskDefaultsPtrOutput{})
	pulumi.RegisterOutputType(BootDiskDefaultsResponseOutput{})
	pulumi.RegisterOutputType(ClientSecretCredentialsOutput{})
	pulumi.RegisterOutputType(ClientSecretCredentialsPtrOutput{})
	pulumi.RegisterOutputType(ClientSecretCredentialsResponseOutput{})
	pulumi.RegisterOutputType(CloneJobResponseOutput{})
	pulumi.RegisterOutputType(CloneJobResponseArrayOutput{})
	pulumi.RegisterOutputType(CloneStepResponseOutput{})
	pulumi.RegisterOutputType(CloneStepResponseArrayOutput{})
	pulumi.RegisterOutputType(ComputeEngineDisksTargetDefaultsOutput{})
	pulumi.RegisterOutputType(ComputeEngineDisksTargetDefaultsPtrOutput{})
	pulumi.RegisterOutputType(ComputeEngineDisksTargetDefaultsResponseOutput{})
	pulumi.RegisterOutputType(ComputeEngineDisksTargetDetailsResponseOutput{})
	pulumi.RegisterOutputType(ComputeEngineTargetDefaultsOutput{})
	pulumi.RegisterOutputType(ComputeEngineTargetDefaultsPtrOutput{})
	pulumi.RegisterOutputType(ComputeEngineTargetDefaultsResponseOutput{})
	pulumi.RegisterOutputType(ComputeEngineTargetDetailsResponseOutput{})
	pulumi.RegisterOutputType(ComputeSchedulingOutput{})
	pulumi.RegisterOutputType(ComputeSchedulingPtrOutput{})
	pulumi.RegisterOutputType(ComputeSchedulingResponseOutput{})
	pulumi.RegisterOutputType(CutoverForecastResponseOutput{})
	pulumi.RegisterOutputType(CutoverJobResponseOutput{})
	pulumi.RegisterOutputType(CutoverJobResponseArrayOutput{})
	pulumi.RegisterOutputType(CutoverStepResponseOutput{})
	pulumi.RegisterOutputType(CutoverStepResponseArrayOutput{})
	pulumi.RegisterOutputType(CycleStepResponseOutput{})
	pulumi.RegisterOutputType(CycleStepResponseArrayOutput{})
	pulumi.RegisterOutputType(DiskImageDefaultsOutput{})
	pulumi.RegisterOutputType(DiskImageDefaultsPtrOutput{})
	pulumi.RegisterOutputType(DiskImageDefaultsResponseOutput{})
	pulumi.RegisterOutputType(DisksMigrationDisksTargetDefaultsOutput{})
	pulumi.RegisterOutputType(DisksMigrationDisksTargetDefaultsPtrOutput{})
	pulumi.RegisterOutputType(DisksMigrationDisksTargetDefaultsResponseOutput{})
	pulumi.RegisterOutputType(DisksMigrationDisksTargetDetailsResponseOutput{})
	pulumi.RegisterOutputType(DisksMigrationVmTargetDefaultsOutput{})
	pulumi.RegisterOutputType(DisksMigrationVmTargetDefaultsPtrOutput{})
	pulumi.RegisterOutputType(DisksMigrationVmTargetDefaultsResponseOutput{})
	pulumi.RegisterOutputType(DisksMigrationVmTargetDetailsResponseOutput{})
	pulumi.RegisterOutputType(EncryptionOutput{})
	pulumi.RegisterOutputType(EncryptionPtrOutput{})
	pulumi.RegisterOutputType(EncryptionResponseOutput{})
	pulumi.RegisterOutputType(InitializingReplicationStepResponseOutput{})
	pulumi.RegisterOutputType(InstantiatingMigratedVMStepResponseOutput{})
	pulumi.RegisterOutputType(LinkResponseOutput{})
	pulumi.RegisterOutputType(LinkResponseArrayOutput{})
	pulumi.RegisterOutputType(LocalizedMessageResponseOutput{})
	pulumi.RegisterOutputType(MigrationWarningResponseOutput{})
	pulumi.RegisterOutputType(MigrationWarningResponseArrayOutput{})
	pulumi.RegisterOutputType(NetworkInterfaceOutput{})
	pulumi.RegisterOutputType(NetworkInterfaceArrayOutput{})
	pulumi.RegisterOutputType(NetworkInterfaceResponseOutput{})
	pulumi.RegisterOutputType(NetworkInterfaceResponseArrayOutput{})
	pulumi.RegisterOutputType(PersistentDiskDefaultsOutput{})
	pulumi.RegisterOutputType(PersistentDiskDefaultsArrayOutput{})
	pulumi.RegisterOutputType(PersistentDiskDefaultsResponseOutput{})
	pulumi.RegisterOutputType(PersistentDiskDefaultsResponseArrayOutput{})
	pulumi.RegisterOutputType(PersistentDiskResponseOutput{})
	pulumi.RegisterOutputType(PersistentDiskResponseArrayOutput{})
	pulumi.RegisterOutputType(PostProcessingStepResponseOutput{})
	pulumi.RegisterOutputType(PreparingVMDisksStepResponseOutput{})
	pulumi.RegisterOutputType(ReplicatingStepResponseOutput{})
	pulumi.RegisterOutputType(ReplicationCycleResponseOutput{})
	pulumi.RegisterOutputType(ReplicationSyncResponseOutput{})
	pulumi.RegisterOutputType(SchedulePolicyOutput{})
	pulumi.RegisterOutputType(SchedulePolicyPtrOutput{})
	pulumi.RegisterOutputType(SchedulePolicyResponseOutput{})
	pulumi.RegisterOutputType(SchedulingNodeAffinityOutput{})
	pulumi.RegisterOutputType(SchedulingNodeAffinityArrayOutput{})
	pulumi.RegisterOutputType(SchedulingNodeAffinityResponseOutput{})
	pulumi.RegisterOutputType(SchedulingNodeAffinityResponseArrayOutput{})
	pulumi.RegisterOutputType(ShuttingDownSourceVMStepResponseOutput{})
	pulumi.RegisterOutputType(StatusResponseOutput{})
	pulumi.RegisterOutputType(TagOutput{})
	pulumi.RegisterOutputType(TagArrayOutput{})
	pulumi.RegisterOutputType(TagResponseOutput{})
	pulumi.RegisterOutputType(TagResponseArrayOutput{})
	pulumi.RegisterOutputType(UpgradeStatusResponseOutput{})
	pulumi.RegisterOutputType(VmAttachmentDetailsOutput{})
	pulumi.RegisterOutputType(VmAttachmentDetailsPtrOutput{})
	pulumi.RegisterOutputType(VmAttachmentDetailsResponseOutput{})
	pulumi.RegisterOutputType(VmCapabilitiesResponseOutput{})
	pulumi.RegisterOutputType(VmUtilizationInfoOutput{})
	pulumi.RegisterOutputType(VmUtilizationInfoArrayOutput{})
	pulumi.RegisterOutputType(VmUtilizationInfoResponseOutput{})
	pulumi.RegisterOutputType(VmUtilizationInfoResponseArrayOutput{})
	pulumi.RegisterOutputType(VmUtilizationMetricsOutput{})
	pulumi.RegisterOutputType(VmUtilizationMetricsPtrOutput{})
	pulumi.RegisterOutputType(VmUtilizationMetricsResponseOutput{})
	pulumi.RegisterOutputType(VmwareDiskDetailsResponseOutput{})
	pulumi.RegisterOutputType(VmwareDiskDetailsResponseArrayOutput{})
	pulumi.RegisterOutputType(VmwareSourceDetailsOutput{})
	pulumi.RegisterOutputType(VmwareSourceDetailsPtrOutput{})
	pulumi.RegisterOutputType(VmwareSourceDetailsResponseOutput{})
	pulumi.RegisterOutputType(VmwareSourceVmDetailsResponseOutput{})
	pulumi.RegisterOutputType(VmwareVmDetailsOutput{})
	pulumi.RegisterOutputType(VmwareVmDetailsPtrOutput{})
	pulumi.RegisterOutputType(VmwareVmDetailsResponseOutput{})
}
