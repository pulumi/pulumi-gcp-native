// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new ImageImport in a given project.
// Auto-naming is currently not supported for this resource.
type ImageImport struct {
	pulumi.CustomResourceState

	// Immutable. The path to the Cloud Storage file from which the image should be imported.
	CloudStorageUri pulumi.StringOutput `pulumi:"cloudStorageUri"`
	// The time the image import was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Immutable. Target details for importing a disk image, will be used by ImageImportJob.
	DiskImageTargetDefaults DiskImageTargetDetailsResponseOutput `pulumi:"diskImageTargetDefaults"`
	// Immutable. The encryption details used by the image import process during the image adaptation for Compute Engine.
	Encryption EncryptionResponseOutput `pulumi:"encryption"`
	// Required. The image import identifier. This value maximum length is 63 characters, and valid characters are /a-z-/. It must start with an english letter and must not end with a hyphen.
	ImageImportId pulumi.StringOutput `pulumi:"imageImportId"`
	Location      pulumi.StringOutput `pulumi:"location"`
	// The resource path of the ImageImport.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// The result of the most recent runs for this ImageImport. All jobs for this ImageImport can be listed via ListImageImportJobs.
	RecentImageImportJobs ImageImportJobResponseArrayOutput `pulumi:"recentImageImportJobs"`
	// Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrOutput `pulumi:"requestId"`
}

// NewImageImport registers a new resource with the given unique name, arguments, and options.
func NewImageImport(ctx *pulumi.Context,
	name string, args *ImageImportArgs, opts ...pulumi.ResourceOption) (*ImageImport, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ImageImportId == nil {
		return nil, errors.New("invalid value for required argument 'ImageImportId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"imageImportId",
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ImageImport
	err := ctx.RegisterResource("google-native:vmmigration/v1:ImageImport", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetImageImport gets an existing ImageImport resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImageImport(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ImageImportState, opts ...pulumi.ResourceOption) (*ImageImport, error) {
	var resource ImageImport
	err := ctx.ReadResource("google-native:vmmigration/v1:ImageImport", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ImageImport resources.
type imageImportState struct {
}

type ImageImportState struct {
}

func (ImageImportState) ElementType() reflect.Type {
	return reflect.TypeOf((*imageImportState)(nil)).Elem()
}

type imageImportArgs struct {
	// Immutable. The path to the Cloud Storage file from which the image should be imported.
	CloudStorageUri *string `pulumi:"cloudStorageUri"`
	// Immutable. Target details for importing a disk image, will be used by ImageImportJob.
	DiskImageTargetDefaults *DiskImageTargetDetails `pulumi:"diskImageTargetDefaults"`
	// Immutable. The encryption details used by the image import process during the image adaptation for Compute Engine.
	Encryption *Encryption `pulumi:"encryption"`
	// Required. The image import identifier. This value maximum length is 63 characters, and valid characters are /a-z-/. It must start with an english letter and must not end with a hyphen.
	ImageImportId string  `pulumi:"imageImportId"`
	Location      *string `pulumi:"location"`
	Project       *string `pulumi:"project"`
	// Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId *string `pulumi:"requestId"`
}

// The set of arguments for constructing a ImageImport resource.
type ImageImportArgs struct {
	// Immutable. The path to the Cloud Storage file from which the image should be imported.
	CloudStorageUri pulumi.StringPtrInput
	// Immutable. Target details for importing a disk image, will be used by ImageImportJob.
	DiskImageTargetDefaults DiskImageTargetDetailsPtrInput
	// Immutable. The encryption details used by the image import process during the image adaptation for Compute Engine.
	Encryption EncryptionPtrInput
	// Required. The image import identifier. This value maximum length is 63 characters, and valid characters are /a-z-/. It must start with an english letter and must not end with a hyphen.
	ImageImportId pulumi.StringInput
	Location      pulumi.StringPtrInput
	Project       pulumi.StringPtrInput
	// Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrInput
}

func (ImageImportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*imageImportArgs)(nil)).Elem()
}

type ImageImportInput interface {
	pulumi.Input

	ToImageImportOutput() ImageImportOutput
	ToImageImportOutputWithContext(ctx context.Context) ImageImportOutput
}

func (*ImageImport) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageImport)(nil)).Elem()
}

func (i *ImageImport) ToImageImportOutput() ImageImportOutput {
	return i.ToImageImportOutputWithContext(context.Background())
}

func (i *ImageImport) ToImageImportOutputWithContext(ctx context.Context) ImageImportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageImportOutput)
}

type ImageImportOutput struct{ *pulumi.OutputState }

func (ImageImportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageImport)(nil)).Elem()
}

func (o ImageImportOutput) ToImageImportOutput() ImageImportOutput {
	return o
}

func (o ImageImportOutput) ToImageImportOutputWithContext(ctx context.Context) ImageImportOutput {
	return o
}

// Immutable. The path to the Cloud Storage file from which the image should be imported.
func (o ImageImportOutput) CloudStorageUri() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageImport) pulumi.StringOutput { return v.CloudStorageUri }).(pulumi.StringOutput)
}

// The time the image import was created.
func (o ImageImportOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageImport) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Immutable. Target details for importing a disk image, will be used by ImageImportJob.
func (o ImageImportOutput) DiskImageTargetDefaults() DiskImageTargetDetailsResponseOutput {
	return o.ApplyT(func(v *ImageImport) DiskImageTargetDetailsResponseOutput { return v.DiskImageTargetDefaults }).(DiskImageTargetDetailsResponseOutput)
}

// Immutable. The encryption details used by the image import process during the image adaptation for Compute Engine.
func (o ImageImportOutput) Encryption() EncryptionResponseOutput {
	return o.ApplyT(func(v *ImageImport) EncryptionResponseOutput { return v.Encryption }).(EncryptionResponseOutput)
}

// Required. The image import identifier. This value maximum length is 63 characters, and valid characters are /a-z-/. It must start with an english letter and must not end with a hyphen.
func (o ImageImportOutput) ImageImportId() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageImport) pulumi.StringOutput { return v.ImageImportId }).(pulumi.StringOutput)
}

func (o ImageImportOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageImport) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource path of the ImageImport.
func (o ImageImportOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageImport) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ImageImportOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageImport) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The result of the most recent runs for this ImageImport. All jobs for this ImageImport can be listed via ListImageImportJobs.
func (o ImageImportOutput) RecentImageImportJobs() ImageImportJobResponseArrayOutput {
	return o.ApplyT(func(v *ImageImport) ImageImportJobResponseArrayOutput { return v.RecentImageImportJobs }).(ImageImportJobResponseArrayOutput)
}

// Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
func (o ImageImportOutput) RequestId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageImport) pulumi.StringPtrOutput { return v.RequestId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ImageImportInput)(nil)).Elem(), &ImageImport{})
	pulumi.RegisterOutputType(ImageImportOutput{})
}
