// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The disk type to use in the VM.
type ComputeEngineTargetDefaultsDiskType string

const (
	// An unspecified disk type. Will be used as STANDARD.
	ComputeEngineTargetDefaultsDiskTypeComputeEngineDiskTypeUnspecified = ComputeEngineTargetDefaultsDiskType("COMPUTE_ENGINE_DISK_TYPE_UNSPECIFIED")
	// A Standard disk type.
	ComputeEngineTargetDefaultsDiskTypeComputeEngineDiskTypeStandard = ComputeEngineTargetDefaultsDiskType("COMPUTE_ENGINE_DISK_TYPE_STANDARD")
	// SSD hard disk type.
	ComputeEngineTargetDefaultsDiskTypeComputeEngineDiskTypeSsd = ComputeEngineTargetDefaultsDiskType("COMPUTE_ENGINE_DISK_TYPE_SSD")
	// An alternative to SSD persistent disks that balance performance and cost.
	ComputeEngineTargetDefaultsDiskTypeComputeEngineDiskTypeBalanced = ComputeEngineTargetDefaultsDiskType("COMPUTE_ENGINE_DISK_TYPE_BALANCED")
)

func (ComputeEngineTargetDefaultsDiskType) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeEngineTargetDefaultsDiskType)(nil)).Elem()
}

func (e ComputeEngineTargetDefaultsDiskType) ToComputeEngineTargetDefaultsDiskTypeOutput() ComputeEngineTargetDefaultsDiskTypeOutput {
	return pulumi.ToOutput(e).(ComputeEngineTargetDefaultsDiskTypeOutput)
}

func (e ComputeEngineTargetDefaultsDiskType) ToComputeEngineTargetDefaultsDiskTypeOutputWithContext(ctx context.Context) ComputeEngineTargetDefaultsDiskTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ComputeEngineTargetDefaultsDiskTypeOutput)
}

func (e ComputeEngineTargetDefaultsDiskType) ToComputeEngineTargetDefaultsDiskTypePtrOutput() ComputeEngineTargetDefaultsDiskTypePtrOutput {
	return e.ToComputeEngineTargetDefaultsDiskTypePtrOutputWithContext(context.Background())
}

func (e ComputeEngineTargetDefaultsDiskType) ToComputeEngineTargetDefaultsDiskTypePtrOutputWithContext(ctx context.Context) ComputeEngineTargetDefaultsDiskTypePtrOutput {
	return ComputeEngineTargetDefaultsDiskType(e).ToComputeEngineTargetDefaultsDiskTypeOutputWithContext(ctx).ToComputeEngineTargetDefaultsDiskTypePtrOutputWithContext(ctx)
}

func (e ComputeEngineTargetDefaultsDiskType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ComputeEngineTargetDefaultsDiskType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ComputeEngineTargetDefaultsDiskType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ComputeEngineTargetDefaultsDiskType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ComputeEngineTargetDefaultsDiskTypeOutput struct{ *pulumi.OutputState }

func (ComputeEngineTargetDefaultsDiskTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeEngineTargetDefaultsDiskType)(nil)).Elem()
}

func (o ComputeEngineTargetDefaultsDiskTypeOutput) ToComputeEngineTargetDefaultsDiskTypeOutput() ComputeEngineTargetDefaultsDiskTypeOutput {
	return o
}

func (o ComputeEngineTargetDefaultsDiskTypeOutput) ToComputeEngineTargetDefaultsDiskTypeOutputWithContext(ctx context.Context) ComputeEngineTargetDefaultsDiskTypeOutput {
	return o
}

func (o ComputeEngineTargetDefaultsDiskTypeOutput) ToComputeEngineTargetDefaultsDiskTypePtrOutput() ComputeEngineTargetDefaultsDiskTypePtrOutput {
	return o.ToComputeEngineTargetDefaultsDiskTypePtrOutputWithContext(context.Background())
}

func (o ComputeEngineTargetDefaultsDiskTypeOutput) ToComputeEngineTargetDefaultsDiskTypePtrOutputWithContext(ctx context.Context) ComputeEngineTargetDefaultsDiskTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComputeEngineTargetDefaultsDiskType) *ComputeEngineTargetDefaultsDiskType {
		return &v
	}).(ComputeEngineTargetDefaultsDiskTypePtrOutput)
}

func (o ComputeEngineTargetDefaultsDiskTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ComputeEngineTargetDefaultsDiskTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ComputeEngineTargetDefaultsDiskType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ComputeEngineTargetDefaultsDiskTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ComputeEngineTargetDefaultsDiskTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ComputeEngineTargetDefaultsDiskType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ComputeEngineTargetDefaultsDiskTypePtrOutput struct{ *pulumi.OutputState }

func (ComputeEngineTargetDefaultsDiskTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeEngineTargetDefaultsDiskType)(nil)).Elem()
}

func (o ComputeEngineTargetDefaultsDiskTypePtrOutput) ToComputeEngineTargetDefaultsDiskTypePtrOutput() ComputeEngineTargetDefaultsDiskTypePtrOutput {
	return o
}

func (o ComputeEngineTargetDefaultsDiskTypePtrOutput) ToComputeEngineTargetDefaultsDiskTypePtrOutputWithContext(ctx context.Context) ComputeEngineTargetDefaultsDiskTypePtrOutput {
	return o
}

func (o ComputeEngineTargetDefaultsDiskTypePtrOutput) Elem() ComputeEngineTargetDefaultsDiskTypeOutput {
	return o.ApplyT(func(v *ComputeEngineTargetDefaultsDiskType) ComputeEngineTargetDefaultsDiskType {
		if v != nil {
			return *v
		}
		var ret ComputeEngineTargetDefaultsDiskType
		return ret
	}).(ComputeEngineTargetDefaultsDiskTypeOutput)
}

func (o ComputeEngineTargetDefaultsDiskTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ComputeEngineTargetDefaultsDiskTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ComputeEngineTargetDefaultsDiskType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ComputeEngineTargetDefaultsDiskTypeInput is an input type that accepts ComputeEngineTargetDefaultsDiskTypeArgs and ComputeEngineTargetDefaultsDiskTypeOutput values.
// You can construct a concrete instance of `ComputeEngineTargetDefaultsDiskTypeInput` via:
//
//          ComputeEngineTargetDefaultsDiskTypeArgs{...}
type ComputeEngineTargetDefaultsDiskTypeInput interface {
	pulumi.Input

	ToComputeEngineTargetDefaultsDiskTypeOutput() ComputeEngineTargetDefaultsDiskTypeOutput
	ToComputeEngineTargetDefaultsDiskTypeOutputWithContext(context.Context) ComputeEngineTargetDefaultsDiskTypeOutput
}

var computeEngineTargetDefaultsDiskTypePtrType = reflect.TypeOf((**ComputeEngineTargetDefaultsDiskType)(nil)).Elem()

type ComputeEngineTargetDefaultsDiskTypePtrInput interface {
	pulumi.Input

	ToComputeEngineTargetDefaultsDiskTypePtrOutput() ComputeEngineTargetDefaultsDiskTypePtrOutput
	ToComputeEngineTargetDefaultsDiskTypePtrOutputWithContext(context.Context) ComputeEngineTargetDefaultsDiskTypePtrOutput
}

type computeEngineTargetDefaultsDiskTypePtr string

func ComputeEngineTargetDefaultsDiskTypePtr(v string) ComputeEngineTargetDefaultsDiskTypePtrInput {
	return (*computeEngineTargetDefaultsDiskTypePtr)(&v)
}

func (*computeEngineTargetDefaultsDiskTypePtr) ElementType() reflect.Type {
	return computeEngineTargetDefaultsDiskTypePtrType
}

func (in *computeEngineTargetDefaultsDiskTypePtr) ToComputeEngineTargetDefaultsDiskTypePtrOutput() ComputeEngineTargetDefaultsDiskTypePtrOutput {
	return pulumi.ToOutput(in).(ComputeEngineTargetDefaultsDiskTypePtrOutput)
}

func (in *computeEngineTargetDefaultsDiskTypePtr) ToComputeEngineTargetDefaultsDiskTypePtrOutputWithContext(ctx context.Context) ComputeEngineTargetDefaultsDiskTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ComputeEngineTargetDefaultsDiskTypePtrOutput)
}

// The license type to use in OS adaptation.
type ComputeEngineTargetDefaultsLicenseType string

const (
	// The license type is the default for the OS.
	ComputeEngineTargetDefaultsLicenseTypeComputeEngineLicenseTypeDefault = ComputeEngineTargetDefaultsLicenseType("COMPUTE_ENGINE_LICENSE_TYPE_DEFAULT")
	// The license type is Pay As You Go license type.
	ComputeEngineTargetDefaultsLicenseTypeComputeEngineLicenseTypePayg = ComputeEngineTargetDefaultsLicenseType("COMPUTE_ENGINE_LICENSE_TYPE_PAYG")
	// The license type is Bring Your Own License type.
	ComputeEngineTargetDefaultsLicenseTypeComputeEngineLicenseTypeByol = ComputeEngineTargetDefaultsLicenseType("COMPUTE_ENGINE_LICENSE_TYPE_BYOL")
)

func (ComputeEngineTargetDefaultsLicenseType) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeEngineTargetDefaultsLicenseType)(nil)).Elem()
}

func (e ComputeEngineTargetDefaultsLicenseType) ToComputeEngineTargetDefaultsLicenseTypeOutput() ComputeEngineTargetDefaultsLicenseTypeOutput {
	return pulumi.ToOutput(e).(ComputeEngineTargetDefaultsLicenseTypeOutput)
}

func (e ComputeEngineTargetDefaultsLicenseType) ToComputeEngineTargetDefaultsLicenseTypeOutputWithContext(ctx context.Context) ComputeEngineTargetDefaultsLicenseTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ComputeEngineTargetDefaultsLicenseTypeOutput)
}

func (e ComputeEngineTargetDefaultsLicenseType) ToComputeEngineTargetDefaultsLicenseTypePtrOutput() ComputeEngineTargetDefaultsLicenseTypePtrOutput {
	return e.ToComputeEngineTargetDefaultsLicenseTypePtrOutputWithContext(context.Background())
}

func (e ComputeEngineTargetDefaultsLicenseType) ToComputeEngineTargetDefaultsLicenseTypePtrOutputWithContext(ctx context.Context) ComputeEngineTargetDefaultsLicenseTypePtrOutput {
	return ComputeEngineTargetDefaultsLicenseType(e).ToComputeEngineTargetDefaultsLicenseTypeOutputWithContext(ctx).ToComputeEngineTargetDefaultsLicenseTypePtrOutputWithContext(ctx)
}

func (e ComputeEngineTargetDefaultsLicenseType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ComputeEngineTargetDefaultsLicenseType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ComputeEngineTargetDefaultsLicenseType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ComputeEngineTargetDefaultsLicenseType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ComputeEngineTargetDefaultsLicenseTypeOutput struct{ *pulumi.OutputState }

func (ComputeEngineTargetDefaultsLicenseTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeEngineTargetDefaultsLicenseType)(nil)).Elem()
}

func (o ComputeEngineTargetDefaultsLicenseTypeOutput) ToComputeEngineTargetDefaultsLicenseTypeOutput() ComputeEngineTargetDefaultsLicenseTypeOutput {
	return o
}

func (o ComputeEngineTargetDefaultsLicenseTypeOutput) ToComputeEngineTargetDefaultsLicenseTypeOutputWithContext(ctx context.Context) ComputeEngineTargetDefaultsLicenseTypeOutput {
	return o
}

func (o ComputeEngineTargetDefaultsLicenseTypeOutput) ToComputeEngineTargetDefaultsLicenseTypePtrOutput() ComputeEngineTargetDefaultsLicenseTypePtrOutput {
	return o.ToComputeEngineTargetDefaultsLicenseTypePtrOutputWithContext(context.Background())
}

func (o ComputeEngineTargetDefaultsLicenseTypeOutput) ToComputeEngineTargetDefaultsLicenseTypePtrOutputWithContext(ctx context.Context) ComputeEngineTargetDefaultsLicenseTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComputeEngineTargetDefaultsLicenseType) *ComputeEngineTargetDefaultsLicenseType {
		return &v
	}).(ComputeEngineTargetDefaultsLicenseTypePtrOutput)
}

func (o ComputeEngineTargetDefaultsLicenseTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ComputeEngineTargetDefaultsLicenseTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ComputeEngineTargetDefaultsLicenseType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ComputeEngineTargetDefaultsLicenseTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ComputeEngineTargetDefaultsLicenseTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ComputeEngineTargetDefaultsLicenseType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ComputeEngineTargetDefaultsLicenseTypePtrOutput struct{ *pulumi.OutputState }

func (ComputeEngineTargetDefaultsLicenseTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeEngineTargetDefaultsLicenseType)(nil)).Elem()
}

func (o ComputeEngineTargetDefaultsLicenseTypePtrOutput) ToComputeEngineTargetDefaultsLicenseTypePtrOutput() ComputeEngineTargetDefaultsLicenseTypePtrOutput {
	return o
}

func (o ComputeEngineTargetDefaultsLicenseTypePtrOutput) ToComputeEngineTargetDefaultsLicenseTypePtrOutputWithContext(ctx context.Context) ComputeEngineTargetDefaultsLicenseTypePtrOutput {
	return o
}

func (o ComputeEngineTargetDefaultsLicenseTypePtrOutput) Elem() ComputeEngineTargetDefaultsLicenseTypeOutput {
	return o.ApplyT(func(v *ComputeEngineTargetDefaultsLicenseType) ComputeEngineTargetDefaultsLicenseType {
		if v != nil {
			return *v
		}
		var ret ComputeEngineTargetDefaultsLicenseType
		return ret
	}).(ComputeEngineTargetDefaultsLicenseTypeOutput)
}

func (o ComputeEngineTargetDefaultsLicenseTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ComputeEngineTargetDefaultsLicenseTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ComputeEngineTargetDefaultsLicenseType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ComputeEngineTargetDefaultsLicenseTypeInput is an input type that accepts ComputeEngineTargetDefaultsLicenseTypeArgs and ComputeEngineTargetDefaultsLicenseTypeOutput values.
// You can construct a concrete instance of `ComputeEngineTargetDefaultsLicenseTypeInput` via:
//
//          ComputeEngineTargetDefaultsLicenseTypeArgs{...}
type ComputeEngineTargetDefaultsLicenseTypeInput interface {
	pulumi.Input

	ToComputeEngineTargetDefaultsLicenseTypeOutput() ComputeEngineTargetDefaultsLicenseTypeOutput
	ToComputeEngineTargetDefaultsLicenseTypeOutputWithContext(context.Context) ComputeEngineTargetDefaultsLicenseTypeOutput
}

var computeEngineTargetDefaultsLicenseTypePtrType = reflect.TypeOf((**ComputeEngineTargetDefaultsLicenseType)(nil)).Elem()

type ComputeEngineTargetDefaultsLicenseTypePtrInput interface {
	pulumi.Input

	ToComputeEngineTargetDefaultsLicenseTypePtrOutput() ComputeEngineTargetDefaultsLicenseTypePtrOutput
	ToComputeEngineTargetDefaultsLicenseTypePtrOutputWithContext(context.Context) ComputeEngineTargetDefaultsLicenseTypePtrOutput
}

type computeEngineTargetDefaultsLicenseTypePtr string

func ComputeEngineTargetDefaultsLicenseTypePtr(v string) ComputeEngineTargetDefaultsLicenseTypePtrInput {
	return (*computeEngineTargetDefaultsLicenseTypePtr)(&v)
}

func (*computeEngineTargetDefaultsLicenseTypePtr) ElementType() reflect.Type {
	return computeEngineTargetDefaultsLicenseTypePtrType
}

func (in *computeEngineTargetDefaultsLicenseTypePtr) ToComputeEngineTargetDefaultsLicenseTypePtrOutput() ComputeEngineTargetDefaultsLicenseTypePtrOutput {
	return pulumi.ToOutput(in).(ComputeEngineTargetDefaultsLicenseTypePtrOutput)
}

func (in *computeEngineTargetDefaultsLicenseTypePtr) ToComputeEngineTargetDefaultsLicenseTypePtrOutputWithContext(ctx context.Context) ComputeEngineTargetDefaultsLicenseTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ComputeEngineTargetDefaultsLicenseTypePtrOutput)
}

// How the instance should behave when the host machine undergoes maintenance that may temporarily impact instance performance.
type ComputeSchedulingOnHostMaintenance string

const (
	// An unknown, unexpected behavior.
	ComputeSchedulingOnHostMaintenanceOnHostMaintenanceUnspecified = ComputeSchedulingOnHostMaintenance("ON_HOST_MAINTENANCE_UNSPECIFIED")
	// Terminate the instance when the host machine undergoes maintenance.
	ComputeSchedulingOnHostMaintenanceTerminate = ComputeSchedulingOnHostMaintenance("TERMINATE")
	// Migrate the instance when the host machine undergoes maintenance.
	ComputeSchedulingOnHostMaintenanceMigrate = ComputeSchedulingOnHostMaintenance("MIGRATE")
)

func (ComputeSchedulingOnHostMaintenance) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeSchedulingOnHostMaintenance)(nil)).Elem()
}

func (e ComputeSchedulingOnHostMaintenance) ToComputeSchedulingOnHostMaintenanceOutput() ComputeSchedulingOnHostMaintenanceOutput {
	return pulumi.ToOutput(e).(ComputeSchedulingOnHostMaintenanceOutput)
}

func (e ComputeSchedulingOnHostMaintenance) ToComputeSchedulingOnHostMaintenanceOutputWithContext(ctx context.Context) ComputeSchedulingOnHostMaintenanceOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ComputeSchedulingOnHostMaintenanceOutput)
}

func (e ComputeSchedulingOnHostMaintenance) ToComputeSchedulingOnHostMaintenancePtrOutput() ComputeSchedulingOnHostMaintenancePtrOutput {
	return e.ToComputeSchedulingOnHostMaintenancePtrOutputWithContext(context.Background())
}

func (e ComputeSchedulingOnHostMaintenance) ToComputeSchedulingOnHostMaintenancePtrOutputWithContext(ctx context.Context) ComputeSchedulingOnHostMaintenancePtrOutput {
	return ComputeSchedulingOnHostMaintenance(e).ToComputeSchedulingOnHostMaintenanceOutputWithContext(ctx).ToComputeSchedulingOnHostMaintenancePtrOutputWithContext(ctx)
}

func (e ComputeSchedulingOnHostMaintenance) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ComputeSchedulingOnHostMaintenance) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ComputeSchedulingOnHostMaintenance) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ComputeSchedulingOnHostMaintenance) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ComputeSchedulingOnHostMaintenanceOutput struct{ *pulumi.OutputState }

func (ComputeSchedulingOnHostMaintenanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeSchedulingOnHostMaintenance)(nil)).Elem()
}

func (o ComputeSchedulingOnHostMaintenanceOutput) ToComputeSchedulingOnHostMaintenanceOutput() ComputeSchedulingOnHostMaintenanceOutput {
	return o
}

func (o ComputeSchedulingOnHostMaintenanceOutput) ToComputeSchedulingOnHostMaintenanceOutputWithContext(ctx context.Context) ComputeSchedulingOnHostMaintenanceOutput {
	return o
}

func (o ComputeSchedulingOnHostMaintenanceOutput) ToComputeSchedulingOnHostMaintenancePtrOutput() ComputeSchedulingOnHostMaintenancePtrOutput {
	return o.ToComputeSchedulingOnHostMaintenancePtrOutputWithContext(context.Background())
}

func (o ComputeSchedulingOnHostMaintenanceOutput) ToComputeSchedulingOnHostMaintenancePtrOutputWithContext(ctx context.Context) ComputeSchedulingOnHostMaintenancePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComputeSchedulingOnHostMaintenance) *ComputeSchedulingOnHostMaintenance {
		return &v
	}).(ComputeSchedulingOnHostMaintenancePtrOutput)
}

func (o ComputeSchedulingOnHostMaintenanceOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ComputeSchedulingOnHostMaintenanceOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ComputeSchedulingOnHostMaintenance) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ComputeSchedulingOnHostMaintenanceOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ComputeSchedulingOnHostMaintenanceOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ComputeSchedulingOnHostMaintenance) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ComputeSchedulingOnHostMaintenancePtrOutput struct{ *pulumi.OutputState }

func (ComputeSchedulingOnHostMaintenancePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeSchedulingOnHostMaintenance)(nil)).Elem()
}

func (o ComputeSchedulingOnHostMaintenancePtrOutput) ToComputeSchedulingOnHostMaintenancePtrOutput() ComputeSchedulingOnHostMaintenancePtrOutput {
	return o
}

func (o ComputeSchedulingOnHostMaintenancePtrOutput) ToComputeSchedulingOnHostMaintenancePtrOutputWithContext(ctx context.Context) ComputeSchedulingOnHostMaintenancePtrOutput {
	return o
}

func (o ComputeSchedulingOnHostMaintenancePtrOutput) Elem() ComputeSchedulingOnHostMaintenanceOutput {
	return o.ApplyT(func(v *ComputeSchedulingOnHostMaintenance) ComputeSchedulingOnHostMaintenance {
		if v != nil {
			return *v
		}
		var ret ComputeSchedulingOnHostMaintenance
		return ret
	}).(ComputeSchedulingOnHostMaintenanceOutput)
}

func (o ComputeSchedulingOnHostMaintenancePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ComputeSchedulingOnHostMaintenancePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ComputeSchedulingOnHostMaintenance) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ComputeSchedulingOnHostMaintenanceInput is an input type that accepts ComputeSchedulingOnHostMaintenanceArgs and ComputeSchedulingOnHostMaintenanceOutput values.
// You can construct a concrete instance of `ComputeSchedulingOnHostMaintenanceInput` via:
//
//          ComputeSchedulingOnHostMaintenanceArgs{...}
type ComputeSchedulingOnHostMaintenanceInput interface {
	pulumi.Input

	ToComputeSchedulingOnHostMaintenanceOutput() ComputeSchedulingOnHostMaintenanceOutput
	ToComputeSchedulingOnHostMaintenanceOutputWithContext(context.Context) ComputeSchedulingOnHostMaintenanceOutput
}

var computeSchedulingOnHostMaintenancePtrType = reflect.TypeOf((**ComputeSchedulingOnHostMaintenance)(nil)).Elem()

type ComputeSchedulingOnHostMaintenancePtrInput interface {
	pulumi.Input

	ToComputeSchedulingOnHostMaintenancePtrOutput() ComputeSchedulingOnHostMaintenancePtrOutput
	ToComputeSchedulingOnHostMaintenancePtrOutputWithContext(context.Context) ComputeSchedulingOnHostMaintenancePtrOutput
}

type computeSchedulingOnHostMaintenancePtr string

func ComputeSchedulingOnHostMaintenancePtr(v string) ComputeSchedulingOnHostMaintenancePtrInput {
	return (*computeSchedulingOnHostMaintenancePtr)(&v)
}

func (*computeSchedulingOnHostMaintenancePtr) ElementType() reflect.Type {
	return computeSchedulingOnHostMaintenancePtrType
}

func (in *computeSchedulingOnHostMaintenancePtr) ToComputeSchedulingOnHostMaintenancePtrOutput() ComputeSchedulingOnHostMaintenancePtrOutput {
	return pulumi.ToOutput(in).(ComputeSchedulingOnHostMaintenancePtrOutput)
}

func (in *computeSchedulingOnHostMaintenancePtr) ToComputeSchedulingOnHostMaintenancePtrOutputWithContext(ctx context.Context) ComputeSchedulingOnHostMaintenancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ComputeSchedulingOnHostMaintenancePtrOutput)
}

// Whether the Instance should be automatically restarted whenever it is terminated by Compute Engine (not terminated by user). This configuration is identical to `automaticRestart` field in Compute Engine create instance under scheduling. It was changed to an enum (instead of a boolean) to match the default value in Compute Engine which is automatic restart.
type ComputeSchedulingRestartType string

const (
	// Unspecified behavior. This will use the default.
	ComputeSchedulingRestartTypeRestartTypeUnspecified = ComputeSchedulingRestartType("RESTART_TYPE_UNSPECIFIED")
	// The Instance should be automatically restarted whenever it is terminated by Compute Engine.
	ComputeSchedulingRestartTypeAutomaticRestart = ComputeSchedulingRestartType("AUTOMATIC_RESTART")
	// The Instance isn't automatically restarted whenever it is terminated by Compute Engine.
	ComputeSchedulingRestartTypeNoAutomaticRestart = ComputeSchedulingRestartType("NO_AUTOMATIC_RESTART")
)

func (ComputeSchedulingRestartType) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeSchedulingRestartType)(nil)).Elem()
}

func (e ComputeSchedulingRestartType) ToComputeSchedulingRestartTypeOutput() ComputeSchedulingRestartTypeOutput {
	return pulumi.ToOutput(e).(ComputeSchedulingRestartTypeOutput)
}

func (e ComputeSchedulingRestartType) ToComputeSchedulingRestartTypeOutputWithContext(ctx context.Context) ComputeSchedulingRestartTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ComputeSchedulingRestartTypeOutput)
}

func (e ComputeSchedulingRestartType) ToComputeSchedulingRestartTypePtrOutput() ComputeSchedulingRestartTypePtrOutput {
	return e.ToComputeSchedulingRestartTypePtrOutputWithContext(context.Background())
}

func (e ComputeSchedulingRestartType) ToComputeSchedulingRestartTypePtrOutputWithContext(ctx context.Context) ComputeSchedulingRestartTypePtrOutput {
	return ComputeSchedulingRestartType(e).ToComputeSchedulingRestartTypeOutputWithContext(ctx).ToComputeSchedulingRestartTypePtrOutputWithContext(ctx)
}

func (e ComputeSchedulingRestartType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ComputeSchedulingRestartType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ComputeSchedulingRestartType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ComputeSchedulingRestartType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ComputeSchedulingRestartTypeOutput struct{ *pulumi.OutputState }

func (ComputeSchedulingRestartTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeSchedulingRestartType)(nil)).Elem()
}

func (o ComputeSchedulingRestartTypeOutput) ToComputeSchedulingRestartTypeOutput() ComputeSchedulingRestartTypeOutput {
	return o
}

func (o ComputeSchedulingRestartTypeOutput) ToComputeSchedulingRestartTypeOutputWithContext(ctx context.Context) ComputeSchedulingRestartTypeOutput {
	return o
}

func (o ComputeSchedulingRestartTypeOutput) ToComputeSchedulingRestartTypePtrOutput() ComputeSchedulingRestartTypePtrOutput {
	return o.ToComputeSchedulingRestartTypePtrOutputWithContext(context.Background())
}

func (o ComputeSchedulingRestartTypeOutput) ToComputeSchedulingRestartTypePtrOutputWithContext(ctx context.Context) ComputeSchedulingRestartTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComputeSchedulingRestartType) *ComputeSchedulingRestartType {
		return &v
	}).(ComputeSchedulingRestartTypePtrOutput)
}

func (o ComputeSchedulingRestartTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ComputeSchedulingRestartTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ComputeSchedulingRestartType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ComputeSchedulingRestartTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ComputeSchedulingRestartTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ComputeSchedulingRestartType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ComputeSchedulingRestartTypePtrOutput struct{ *pulumi.OutputState }

func (ComputeSchedulingRestartTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeSchedulingRestartType)(nil)).Elem()
}

func (o ComputeSchedulingRestartTypePtrOutput) ToComputeSchedulingRestartTypePtrOutput() ComputeSchedulingRestartTypePtrOutput {
	return o
}

func (o ComputeSchedulingRestartTypePtrOutput) ToComputeSchedulingRestartTypePtrOutputWithContext(ctx context.Context) ComputeSchedulingRestartTypePtrOutput {
	return o
}

func (o ComputeSchedulingRestartTypePtrOutput) Elem() ComputeSchedulingRestartTypeOutput {
	return o.ApplyT(func(v *ComputeSchedulingRestartType) ComputeSchedulingRestartType {
		if v != nil {
			return *v
		}
		var ret ComputeSchedulingRestartType
		return ret
	}).(ComputeSchedulingRestartTypeOutput)
}

func (o ComputeSchedulingRestartTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ComputeSchedulingRestartTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ComputeSchedulingRestartType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ComputeSchedulingRestartTypeInput is an input type that accepts ComputeSchedulingRestartTypeArgs and ComputeSchedulingRestartTypeOutput values.
// You can construct a concrete instance of `ComputeSchedulingRestartTypeInput` via:
//
//          ComputeSchedulingRestartTypeArgs{...}
type ComputeSchedulingRestartTypeInput interface {
	pulumi.Input

	ToComputeSchedulingRestartTypeOutput() ComputeSchedulingRestartTypeOutput
	ToComputeSchedulingRestartTypeOutputWithContext(context.Context) ComputeSchedulingRestartTypeOutput
}

var computeSchedulingRestartTypePtrType = reflect.TypeOf((**ComputeSchedulingRestartType)(nil)).Elem()

type ComputeSchedulingRestartTypePtrInput interface {
	pulumi.Input

	ToComputeSchedulingRestartTypePtrOutput() ComputeSchedulingRestartTypePtrOutput
	ToComputeSchedulingRestartTypePtrOutputWithContext(context.Context) ComputeSchedulingRestartTypePtrOutput
}

type computeSchedulingRestartTypePtr string

func ComputeSchedulingRestartTypePtr(v string) ComputeSchedulingRestartTypePtrInput {
	return (*computeSchedulingRestartTypePtr)(&v)
}

func (*computeSchedulingRestartTypePtr) ElementType() reflect.Type {
	return computeSchedulingRestartTypePtrType
}

func (in *computeSchedulingRestartTypePtr) ToComputeSchedulingRestartTypePtrOutput() ComputeSchedulingRestartTypePtrOutput {
	return pulumi.ToOutput(in).(ComputeSchedulingRestartTypePtrOutput)
}

func (in *computeSchedulingRestartTypePtr) ToComputeSchedulingRestartTypePtrOutputWithContext(ctx context.Context) ComputeSchedulingRestartTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ComputeSchedulingRestartTypePtrOutput)
}

// The operator to use for the node resources specified in the `values` parameter.
type SchedulingNodeAffinityOperator string

const (
	// An unknown, unexpected behavior.
	SchedulingNodeAffinityOperatorOperatorUnspecified = SchedulingNodeAffinityOperator("OPERATOR_UNSPECIFIED")
	// The node resource group should be in these resources affinity.
	SchedulingNodeAffinityOperatorIn = SchedulingNodeAffinityOperator("IN")
	// The node resource group should not be in these resources affinity.
	SchedulingNodeAffinityOperatorNotIn = SchedulingNodeAffinityOperator("NOT_IN")
)

func (SchedulingNodeAffinityOperator) ElementType() reflect.Type {
	return reflect.TypeOf((*SchedulingNodeAffinityOperator)(nil)).Elem()
}

func (e SchedulingNodeAffinityOperator) ToSchedulingNodeAffinityOperatorOutput() SchedulingNodeAffinityOperatorOutput {
	return pulumi.ToOutput(e).(SchedulingNodeAffinityOperatorOutput)
}

func (e SchedulingNodeAffinityOperator) ToSchedulingNodeAffinityOperatorOutputWithContext(ctx context.Context) SchedulingNodeAffinityOperatorOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SchedulingNodeAffinityOperatorOutput)
}

func (e SchedulingNodeAffinityOperator) ToSchedulingNodeAffinityOperatorPtrOutput() SchedulingNodeAffinityOperatorPtrOutput {
	return e.ToSchedulingNodeAffinityOperatorPtrOutputWithContext(context.Background())
}

func (e SchedulingNodeAffinityOperator) ToSchedulingNodeAffinityOperatorPtrOutputWithContext(ctx context.Context) SchedulingNodeAffinityOperatorPtrOutput {
	return SchedulingNodeAffinityOperator(e).ToSchedulingNodeAffinityOperatorOutputWithContext(ctx).ToSchedulingNodeAffinityOperatorPtrOutputWithContext(ctx)
}

func (e SchedulingNodeAffinityOperator) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SchedulingNodeAffinityOperator) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SchedulingNodeAffinityOperator) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SchedulingNodeAffinityOperator) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SchedulingNodeAffinityOperatorOutput struct{ *pulumi.OutputState }

func (SchedulingNodeAffinityOperatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchedulingNodeAffinityOperator)(nil)).Elem()
}

func (o SchedulingNodeAffinityOperatorOutput) ToSchedulingNodeAffinityOperatorOutput() SchedulingNodeAffinityOperatorOutput {
	return o
}

func (o SchedulingNodeAffinityOperatorOutput) ToSchedulingNodeAffinityOperatorOutputWithContext(ctx context.Context) SchedulingNodeAffinityOperatorOutput {
	return o
}

func (o SchedulingNodeAffinityOperatorOutput) ToSchedulingNodeAffinityOperatorPtrOutput() SchedulingNodeAffinityOperatorPtrOutput {
	return o.ToSchedulingNodeAffinityOperatorPtrOutputWithContext(context.Background())
}

func (o SchedulingNodeAffinityOperatorOutput) ToSchedulingNodeAffinityOperatorPtrOutputWithContext(ctx context.Context) SchedulingNodeAffinityOperatorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SchedulingNodeAffinityOperator) *SchedulingNodeAffinityOperator {
		return &v
	}).(SchedulingNodeAffinityOperatorPtrOutput)
}

func (o SchedulingNodeAffinityOperatorOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SchedulingNodeAffinityOperatorOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SchedulingNodeAffinityOperator) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SchedulingNodeAffinityOperatorOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SchedulingNodeAffinityOperatorOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SchedulingNodeAffinityOperator) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SchedulingNodeAffinityOperatorPtrOutput struct{ *pulumi.OutputState }

func (SchedulingNodeAffinityOperatorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchedulingNodeAffinityOperator)(nil)).Elem()
}

func (o SchedulingNodeAffinityOperatorPtrOutput) ToSchedulingNodeAffinityOperatorPtrOutput() SchedulingNodeAffinityOperatorPtrOutput {
	return o
}

func (o SchedulingNodeAffinityOperatorPtrOutput) ToSchedulingNodeAffinityOperatorPtrOutputWithContext(ctx context.Context) SchedulingNodeAffinityOperatorPtrOutput {
	return o
}

func (o SchedulingNodeAffinityOperatorPtrOutput) Elem() SchedulingNodeAffinityOperatorOutput {
	return o.ApplyT(func(v *SchedulingNodeAffinityOperator) SchedulingNodeAffinityOperator {
		if v != nil {
			return *v
		}
		var ret SchedulingNodeAffinityOperator
		return ret
	}).(SchedulingNodeAffinityOperatorOutput)
}

func (o SchedulingNodeAffinityOperatorPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SchedulingNodeAffinityOperatorPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SchedulingNodeAffinityOperator) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SchedulingNodeAffinityOperatorInput is an input type that accepts SchedulingNodeAffinityOperatorArgs and SchedulingNodeAffinityOperatorOutput values.
// You can construct a concrete instance of `SchedulingNodeAffinityOperatorInput` via:
//
//          SchedulingNodeAffinityOperatorArgs{...}
type SchedulingNodeAffinityOperatorInput interface {
	pulumi.Input

	ToSchedulingNodeAffinityOperatorOutput() SchedulingNodeAffinityOperatorOutput
	ToSchedulingNodeAffinityOperatorOutputWithContext(context.Context) SchedulingNodeAffinityOperatorOutput
}

var schedulingNodeAffinityOperatorPtrType = reflect.TypeOf((**SchedulingNodeAffinityOperator)(nil)).Elem()

type SchedulingNodeAffinityOperatorPtrInput interface {
	pulumi.Input

	ToSchedulingNodeAffinityOperatorPtrOutput() SchedulingNodeAffinityOperatorPtrOutput
	ToSchedulingNodeAffinityOperatorPtrOutputWithContext(context.Context) SchedulingNodeAffinityOperatorPtrOutput
}

type schedulingNodeAffinityOperatorPtr string

func SchedulingNodeAffinityOperatorPtr(v string) SchedulingNodeAffinityOperatorPtrInput {
	return (*schedulingNodeAffinityOperatorPtr)(&v)
}

func (*schedulingNodeAffinityOperatorPtr) ElementType() reflect.Type {
	return schedulingNodeAffinityOperatorPtrType
}

func (in *schedulingNodeAffinityOperatorPtr) ToSchedulingNodeAffinityOperatorPtrOutput() SchedulingNodeAffinityOperatorPtrOutput {
	return pulumi.ToOutput(in).(SchedulingNodeAffinityOperatorPtrOutput)
}

func (in *schedulingNodeAffinityOperatorPtr) ToSchedulingNodeAffinityOperatorPtrOutputWithContext(ctx context.Context) SchedulingNodeAffinityOperatorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SchedulingNodeAffinityOperatorPtrOutput)
}

// Time frame of the report.
type UtilizationReportTimeFrame string

const (
	// The time frame was not specified and will default to WEEK.
	UtilizationReportTimeFrameTimeFrameUnspecified = UtilizationReportTimeFrame("TIME_FRAME_UNSPECIFIED")
	// One week.
	UtilizationReportTimeFrameWeek = UtilizationReportTimeFrame("WEEK")
	// One month.
	UtilizationReportTimeFrameMonth = UtilizationReportTimeFrame("MONTH")
	// One year.
	UtilizationReportTimeFrameYear = UtilizationReportTimeFrame("YEAR")
)

func (UtilizationReportTimeFrame) ElementType() reflect.Type {
	return reflect.TypeOf((*UtilizationReportTimeFrame)(nil)).Elem()
}

func (e UtilizationReportTimeFrame) ToUtilizationReportTimeFrameOutput() UtilizationReportTimeFrameOutput {
	return pulumi.ToOutput(e).(UtilizationReportTimeFrameOutput)
}

func (e UtilizationReportTimeFrame) ToUtilizationReportTimeFrameOutputWithContext(ctx context.Context) UtilizationReportTimeFrameOutput {
	return pulumi.ToOutputWithContext(ctx, e).(UtilizationReportTimeFrameOutput)
}

func (e UtilizationReportTimeFrame) ToUtilizationReportTimeFramePtrOutput() UtilizationReportTimeFramePtrOutput {
	return e.ToUtilizationReportTimeFramePtrOutputWithContext(context.Background())
}

func (e UtilizationReportTimeFrame) ToUtilizationReportTimeFramePtrOutputWithContext(ctx context.Context) UtilizationReportTimeFramePtrOutput {
	return UtilizationReportTimeFrame(e).ToUtilizationReportTimeFrameOutputWithContext(ctx).ToUtilizationReportTimeFramePtrOutputWithContext(ctx)
}

func (e UtilizationReportTimeFrame) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e UtilizationReportTimeFrame) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e UtilizationReportTimeFrame) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e UtilizationReportTimeFrame) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type UtilizationReportTimeFrameOutput struct{ *pulumi.OutputState }

func (UtilizationReportTimeFrameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UtilizationReportTimeFrame)(nil)).Elem()
}

func (o UtilizationReportTimeFrameOutput) ToUtilizationReportTimeFrameOutput() UtilizationReportTimeFrameOutput {
	return o
}

func (o UtilizationReportTimeFrameOutput) ToUtilizationReportTimeFrameOutputWithContext(ctx context.Context) UtilizationReportTimeFrameOutput {
	return o
}

func (o UtilizationReportTimeFrameOutput) ToUtilizationReportTimeFramePtrOutput() UtilizationReportTimeFramePtrOutput {
	return o.ToUtilizationReportTimeFramePtrOutputWithContext(context.Background())
}

func (o UtilizationReportTimeFrameOutput) ToUtilizationReportTimeFramePtrOutputWithContext(ctx context.Context) UtilizationReportTimeFramePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UtilizationReportTimeFrame) *UtilizationReportTimeFrame {
		return &v
	}).(UtilizationReportTimeFramePtrOutput)
}

func (o UtilizationReportTimeFrameOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o UtilizationReportTimeFrameOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e UtilizationReportTimeFrame) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o UtilizationReportTimeFrameOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o UtilizationReportTimeFrameOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e UtilizationReportTimeFrame) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type UtilizationReportTimeFramePtrOutput struct{ *pulumi.OutputState }

func (UtilizationReportTimeFramePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UtilizationReportTimeFrame)(nil)).Elem()
}

func (o UtilizationReportTimeFramePtrOutput) ToUtilizationReportTimeFramePtrOutput() UtilizationReportTimeFramePtrOutput {
	return o
}

func (o UtilizationReportTimeFramePtrOutput) ToUtilizationReportTimeFramePtrOutputWithContext(ctx context.Context) UtilizationReportTimeFramePtrOutput {
	return o
}

func (o UtilizationReportTimeFramePtrOutput) Elem() UtilizationReportTimeFrameOutput {
	return o.ApplyT(func(v *UtilizationReportTimeFrame) UtilizationReportTimeFrame {
		if v != nil {
			return *v
		}
		var ret UtilizationReportTimeFrame
		return ret
	}).(UtilizationReportTimeFrameOutput)
}

func (o UtilizationReportTimeFramePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o UtilizationReportTimeFramePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *UtilizationReportTimeFrame) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// UtilizationReportTimeFrameInput is an input type that accepts UtilizationReportTimeFrameArgs and UtilizationReportTimeFrameOutput values.
// You can construct a concrete instance of `UtilizationReportTimeFrameInput` via:
//
//          UtilizationReportTimeFrameArgs{...}
type UtilizationReportTimeFrameInput interface {
	pulumi.Input

	ToUtilizationReportTimeFrameOutput() UtilizationReportTimeFrameOutput
	ToUtilizationReportTimeFrameOutputWithContext(context.Context) UtilizationReportTimeFrameOutput
}

var utilizationReportTimeFramePtrType = reflect.TypeOf((**UtilizationReportTimeFrame)(nil)).Elem()

type UtilizationReportTimeFramePtrInput interface {
	pulumi.Input

	ToUtilizationReportTimeFramePtrOutput() UtilizationReportTimeFramePtrOutput
	ToUtilizationReportTimeFramePtrOutputWithContext(context.Context) UtilizationReportTimeFramePtrOutput
}

type utilizationReportTimeFramePtr string

func UtilizationReportTimeFramePtr(v string) UtilizationReportTimeFramePtrInput {
	return (*utilizationReportTimeFramePtr)(&v)
}

func (*utilizationReportTimeFramePtr) ElementType() reflect.Type {
	return utilizationReportTimeFramePtrType
}

func (in *utilizationReportTimeFramePtr) ToUtilizationReportTimeFramePtrOutput() UtilizationReportTimeFramePtrOutput {
	return pulumi.ToOutput(in).(UtilizationReportTimeFramePtrOutput)
}

func (in *utilizationReportTimeFramePtr) ToUtilizationReportTimeFramePtrOutputWithContext(ctx context.Context) UtilizationReportTimeFramePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(UtilizationReportTimeFramePtrOutput)
}

// The power state of the VM at the moment list was taken.
type VmwareVmDetailsPowerState string

const (
	// Power state is not specified.
	VmwareVmDetailsPowerStatePowerStateUnspecified = VmwareVmDetailsPowerState("POWER_STATE_UNSPECIFIED")
	// The VM is turned ON.
	VmwareVmDetailsPowerStateOn = VmwareVmDetailsPowerState("ON")
	// The VM is turned OFF.
	VmwareVmDetailsPowerStateOff = VmwareVmDetailsPowerState("OFF")
	// The VM is suspended. This is similar to hibernation or sleep mode.
	VmwareVmDetailsPowerStateSuspended = VmwareVmDetailsPowerState("SUSPENDED")
)

func (VmwareVmDetailsPowerState) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareVmDetailsPowerState)(nil)).Elem()
}

func (e VmwareVmDetailsPowerState) ToVmwareVmDetailsPowerStateOutput() VmwareVmDetailsPowerStateOutput {
	return pulumi.ToOutput(e).(VmwareVmDetailsPowerStateOutput)
}

func (e VmwareVmDetailsPowerState) ToVmwareVmDetailsPowerStateOutputWithContext(ctx context.Context) VmwareVmDetailsPowerStateOutput {
	return pulumi.ToOutputWithContext(ctx, e).(VmwareVmDetailsPowerStateOutput)
}

func (e VmwareVmDetailsPowerState) ToVmwareVmDetailsPowerStatePtrOutput() VmwareVmDetailsPowerStatePtrOutput {
	return e.ToVmwareVmDetailsPowerStatePtrOutputWithContext(context.Background())
}

func (e VmwareVmDetailsPowerState) ToVmwareVmDetailsPowerStatePtrOutputWithContext(ctx context.Context) VmwareVmDetailsPowerStatePtrOutput {
	return VmwareVmDetailsPowerState(e).ToVmwareVmDetailsPowerStateOutputWithContext(ctx).ToVmwareVmDetailsPowerStatePtrOutputWithContext(ctx)
}

func (e VmwareVmDetailsPowerState) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e VmwareVmDetailsPowerState) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e VmwareVmDetailsPowerState) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e VmwareVmDetailsPowerState) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type VmwareVmDetailsPowerStateOutput struct{ *pulumi.OutputState }

func (VmwareVmDetailsPowerStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareVmDetailsPowerState)(nil)).Elem()
}

func (o VmwareVmDetailsPowerStateOutput) ToVmwareVmDetailsPowerStateOutput() VmwareVmDetailsPowerStateOutput {
	return o
}

func (o VmwareVmDetailsPowerStateOutput) ToVmwareVmDetailsPowerStateOutputWithContext(ctx context.Context) VmwareVmDetailsPowerStateOutput {
	return o
}

func (o VmwareVmDetailsPowerStateOutput) ToVmwareVmDetailsPowerStatePtrOutput() VmwareVmDetailsPowerStatePtrOutput {
	return o.ToVmwareVmDetailsPowerStatePtrOutputWithContext(context.Background())
}

func (o VmwareVmDetailsPowerStateOutput) ToVmwareVmDetailsPowerStatePtrOutputWithContext(ctx context.Context) VmwareVmDetailsPowerStatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VmwareVmDetailsPowerState) *VmwareVmDetailsPowerState {
		return &v
	}).(VmwareVmDetailsPowerStatePtrOutput)
}

func (o VmwareVmDetailsPowerStateOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o VmwareVmDetailsPowerStateOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e VmwareVmDetailsPowerState) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o VmwareVmDetailsPowerStateOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o VmwareVmDetailsPowerStateOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e VmwareVmDetailsPowerState) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type VmwareVmDetailsPowerStatePtrOutput struct{ *pulumi.OutputState }

func (VmwareVmDetailsPowerStatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VmwareVmDetailsPowerState)(nil)).Elem()
}

func (o VmwareVmDetailsPowerStatePtrOutput) ToVmwareVmDetailsPowerStatePtrOutput() VmwareVmDetailsPowerStatePtrOutput {
	return o
}

func (o VmwareVmDetailsPowerStatePtrOutput) ToVmwareVmDetailsPowerStatePtrOutputWithContext(ctx context.Context) VmwareVmDetailsPowerStatePtrOutput {
	return o
}

func (o VmwareVmDetailsPowerStatePtrOutput) Elem() VmwareVmDetailsPowerStateOutput {
	return o.ApplyT(func(v *VmwareVmDetailsPowerState) VmwareVmDetailsPowerState {
		if v != nil {
			return *v
		}
		var ret VmwareVmDetailsPowerState
		return ret
	}).(VmwareVmDetailsPowerStateOutput)
}

func (o VmwareVmDetailsPowerStatePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o VmwareVmDetailsPowerStatePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *VmwareVmDetailsPowerState) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// VmwareVmDetailsPowerStateInput is an input type that accepts VmwareVmDetailsPowerStateArgs and VmwareVmDetailsPowerStateOutput values.
// You can construct a concrete instance of `VmwareVmDetailsPowerStateInput` via:
//
//          VmwareVmDetailsPowerStateArgs{...}
type VmwareVmDetailsPowerStateInput interface {
	pulumi.Input

	ToVmwareVmDetailsPowerStateOutput() VmwareVmDetailsPowerStateOutput
	ToVmwareVmDetailsPowerStateOutputWithContext(context.Context) VmwareVmDetailsPowerStateOutput
}

var vmwareVmDetailsPowerStatePtrType = reflect.TypeOf((**VmwareVmDetailsPowerState)(nil)).Elem()

type VmwareVmDetailsPowerStatePtrInput interface {
	pulumi.Input

	ToVmwareVmDetailsPowerStatePtrOutput() VmwareVmDetailsPowerStatePtrOutput
	ToVmwareVmDetailsPowerStatePtrOutputWithContext(context.Context) VmwareVmDetailsPowerStatePtrOutput
}

type vmwareVmDetailsPowerStatePtr string

func VmwareVmDetailsPowerStatePtr(v string) VmwareVmDetailsPowerStatePtrInput {
	return (*vmwareVmDetailsPowerStatePtr)(&v)
}

func (*vmwareVmDetailsPowerStatePtr) ElementType() reflect.Type {
	return vmwareVmDetailsPowerStatePtrType
}

func (in *vmwareVmDetailsPowerStatePtr) ToVmwareVmDetailsPowerStatePtrOutput() VmwareVmDetailsPowerStatePtrOutput {
	return pulumi.ToOutput(in).(VmwareVmDetailsPowerStatePtrOutput)
}

func (in *vmwareVmDetailsPowerStatePtr) ToVmwareVmDetailsPowerStatePtrOutputWithContext(ctx context.Context) VmwareVmDetailsPowerStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(VmwareVmDetailsPowerStatePtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeEngineTargetDefaultsDiskTypeInput)(nil)).Elem(), ComputeEngineTargetDefaultsDiskType("COMPUTE_ENGINE_DISK_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeEngineTargetDefaultsDiskTypePtrInput)(nil)).Elem(), ComputeEngineTargetDefaultsDiskType("COMPUTE_ENGINE_DISK_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeEngineTargetDefaultsLicenseTypeInput)(nil)).Elem(), ComputeEngineTargetDefaultsLicenseType("COMPUTE_ENGINE_LICENSE_TYPE_DEFAULT"))
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeEngineTargetDefaultsLicenseTypePtrInput)(nil)).Elem(), ComputeEngineTargetDefaultsLicenseType("COMPUTE_ENGINE_LICENSE_TYPE_DEFAULT"))
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeSchedulingOnHostMaintenanceInput)(nil)).Elem(), ComputeSchedulingOnHostMaintenance("ON_HOST_MAINTENANCE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeSchedulingOnHostMaintenancePtrInput)(nil)).Elem(), ComputeSchedulingOnHostMaintenance("ON_HOST_MAINTENANCE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeSchedulingRestartTypeInput)(nil)).Elem(), ComputeSchedulingRestartType("RESTART_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeSchedulingRestartTypePtrInput)(nil)).Elem(), ComputeSchedulingRestartType("RESTART_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*SchedulingNodeAffinityOperatorInput)(nil)).Elem(), SchedulingNodeAffinityOperator("OPERATOR_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*SchedulingNodeAffinityOperatorPtrInput)(nil)).Elem(), SchedulingNodeAffinityOperator("OPERATOR_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*UtilizationReportTimeFrameInput)(nil)).Elem(), UtilizationReportTimeFrame("TIME_FRAME_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*UtilizationReportTimeFramePtrInput)(nil)).Elem(), UtilizationReportTimeFrame("TIME_FRAME_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareVmDetailsPowerStateInput)(nil)).Elem(), VmwareVmDetailsPowerState("POWER_STATE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareVmDetailsPowerStatePtrInput)(nil)).Elem(), VmwareVmDetailsPowerState("POWER_STATE_UNSPECIFIED"))
	pulumi.RegisterOutputType(ComputeEngineTargetDefaultsDiskTypeOutput{})
	pulumi.RegisterOutputType(ComputeEngineTargetDefaultsDiskTypePtrOutput{})
	pulumi.RegisterOutputType(ComputeEngineTargetDefaultsLicenseTypeOutput{})
	pulumi.RegisterOutputType(ComputeEngineTargetDefaultsLicenseTypePtrOutput{})
	pulumi.RegisterOutputType(ComputeSchedulingOnHostMaintenanceOutput{})
	pulumi.RegisterOutputType(ComputeSchedulingOnHostMaintenancePtrOutput{})
	pulumi.RegisterOutputType(ComputeSchedulingRestartTypeOutput{})
	pulumi.RegisterOutputType(ComputeSchedulingRestartTypePtrOutput{})
	pulumi.RegisterOutputType(SchedulingNodeAffinityOperatorOutput{})
	pulumi.RegisterOutputType(SchedulingNodeAffinityOperatorPtrOutput{})
	pulumi.RegisterOutputType(UtilizationReportTimeFrameOutput{})
	pulumi.RegisterOutputType(UtilizationReportTimeFramePtrOutput{})
	pulumi.RegisterOutputType(VmwareVmDetailsPowerStateOutput{})
	pulumi.RegisterOutputType(VmwareVmDetailsPowerStatePtrOutput{})
}
