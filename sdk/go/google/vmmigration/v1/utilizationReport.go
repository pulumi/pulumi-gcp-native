// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new UtilizationReport.
// Auto-naming is currently not supported for this resource.
type UtilizationReport struct {
	pulumi.CustomResourceState

	// The time the report was created (this refers to the time of the request, not the time the report creation completed).
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The report display name, as assigned by the user.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Provides details on the state of the report in case of an error.
	Error StatusResponseOutput `pulumi:"error"`
	// The point in time when the time frame ends. Notice that the time frame is counted backwards. For instance if the "frame_end_time" value is 2021/01/20 and the time frame is WEEK then the report covers the week between 2021/01/20 and 2021/01/14.
	FrameEndTime pulumi.StringOutput `pulumi:"frameEndTime"`
	// The report unique name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Current state of the report.
	State pulumi.StringOutput `pulumi:"state"`
	// The time the state was last set.
	StateTime pulumi.StringOutput `pulumi:"stateTime"`
	// Time frame of the report.
	TimeFrame pulumi.StringOutput `pulumi:"timeFrame"`
	// Total number of VMs included in the report.
	VmCount pulumi.IntOutput `pulumi:"vmCount"`
	// List of utilization information per VM. When sent as part of the request, the "vm_id" field is used in order to specify which VMs to include in the report. In that case all other fields are ignored.
	Vms VmUtilizationInfoResponseArrayOutput `pulumi:"vms"`
}

// NewUtilizationReport registers a new resource with the given unique name, arguments, and options.
func NewUtilizationReport(ctx *pulumi.Context,
	name string, args *UtilizationReportArgs, opts ...pulumi.ResourceOption) (*UtilizationReport, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SourceId == nil {
		return nil, errors.New("invalid value for required argument 'SourceId'")
	}
	if args.UtilizationReportId == nil {
		return nil, errors.New("invalid value for required argument 'UtilizationReportId'")
	}
	var resource UtilizationReport
	err := ctx.RegisterResource("google-native:vmmigration/v1:UtilizationReport", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUtilizationReport gets an existing UtilizationReport resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUtilizationReport(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UtilizationReportState, opts ...pulumi.ResourceOption) (*UtilizationReport, error) {
	var resource UtilizationReport
	err := ctx.ReadResource("google-native:vmmigration/v1:UtilizationReport", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UtilizationReport resources.
type utilizationReportState struct {
}

type UtilizationReportState struct {
}

func (UtilizationReportState) ElementType() reflect.Type {
	return reflect.TypeOf((*utilizationReportState)(nil)).Elem()
}

type utilizationReportArgs struct {
	// The report display name, as assigned by the user.
	DisplayName *string `pulumi:"displayName"`
	Location    *string `pulumi:"location"`
	Project     *string `pulumi:"project"`
	RequestId   *string `pulumi:"requestId"`
	SourceId    string  `pulumi:"sourceId"`
	// Time frame of the report.
	TimeFrame           *UtilizationReportTimeFrame `pulumi:"timeFrame"`
	UtilizationReportId string                      `pulumi:"utilizationReportId"`
	// List of utilization information per VM. When sent as part of the request, the "vm_id" field is used in order to specify which VMs to include in the report. In that case all other fields are ignored.
	Vms []VmUtilizationInfo `pulumi:"vms"`
}

// The set of arguments for constructing a UtilizationReport resource.
type UtilizationReportArgs struct {
	// The report display name, as assigned by the user.
	DisplayName pulumi.StringPtrInput
	Location    pulumi.StringPtrInput
	Project     pulumi.StringPtrInput
	RequestId   pulumi.StringPtrInput
	SourceId    pulumi.StringInput
	// Time frame of the report.
	TimeFrame           UtilizationReportTimeFramePtrInput
	UtilizationReportId pulumi.StringInput
	// List of utilization information per VM. When sent as part of the request, the "vm_id" field is used in order to specify which VMs to include in the report. In that case all other fields are ignored.
	Vms VmUtilizationInfoArrayInput
}

func (UtilizationReportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*utilizationReportArgs)(nil)).Elem()
}

type UtilizationReportInput interface {
	pulumi.Input

	ToUtilizationReportOutput() UtilizationReportOutput
	ToUtilizationReportOutputWithContext(ctx context.Context) UtilizationReportOutput
}

func (*UtilizationReport) ElementType() reflect.Type {
	return reflect.TypeOf((**UtilizationReport)(nil)).Elem()
}

func (i *UtilizationReport) ToUtilizationReportOutput() UtilizationReportOutput {
	return i.ToUtilizationReportOutputWithContext(context.Background())
}

func (i *UtilizationReport) ToUtilizationReportOutputWithContext(ctx context.Context) UtilizationReportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UtilizationReportOutput)
}

type UtilizationReportOutput struct{ *pulumi.OutputState }

func (UtilizationReportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UtilizationReport)(nil)).Elem()
}

func (o UtilizationReportOutput) ToUtilizationReportOutput() UtilizationReportOutput {
	return o
}

func (o UtilizationReportOutput) ToUtilizationReportOutputWithContext(ctx context.Context) UtilizationReportOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UtilizationReportInput)(nil)).Elem(), &UtilizationReport{})
	pulumi.RegisterOutputType(UtilizationReportOutput{})
}
