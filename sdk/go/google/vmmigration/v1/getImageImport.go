// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets details of a single ImageImport.
func LookupImageImport(ctx *pulumi.Context, args *LookupImageImportArgs, opts ...pulumi.InvokeOption) (*LookupImageImportResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupImageImportResult
	err := ctx.Invoke("google-native:vmmigration/v1:getImageImport", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupImageImportArgs struct {
	ImageImportId string  `pulumi:"imageImportId"`
	Location      string  `pulumi:"location"`
	Project       *string `pulumi:"project"`
}

type LookupImageImportResult struct {
	// Immutable. The path to the Cloud Storage file from which the image should be imported.
	CloudStorageUri string `pulumi:"cloudStorageUri"`
	// The time the image import was created.
	CreateTime string `pulumi:"createTime"`
	// Immutable. Target details for importing a disk image, will be used by ImageImportJob.
	DiskImageTargetDefaults DiskImageTargetDetailsResponse `pulumi:"diskImageTargetDefaults"`
	// Immutable. The encryption details used by the image import process during the image adaptation for Compute Engine.
	Encryption EncryptionResponse `pulumi:"encryption"`
	// The resource path of the ImageImport.
	Name string `pulumi:"name"`
	// The result of the most recent runs for this ImageImport. All jobs for this ImageImport can be listed via ListImageImportJobs.
	RecentImageImportJobs []ImageImportJobResponse `pulumi:"recentImageImportJobs"`
}

func LookupImageImportOutput(ctx *pulumi.Context, args LookupImageImportOutputArgs, opts ...pulumi.InvokeOption) LookupImageImportResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupImageImportResult, error) {
			args := v.(LookupImageImportArgs)
			r, err := LookupImageImport(ctx, &args, opts...)
			var s LookupImageImportResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupImageImportResultOutput)
}

type LookupImageImportOutputArgs struct {
	ImageImportId pulumi.StringInput    `pulumi:"imageImportId"`
	Location      pulumi.StringInput    `pulumi:"location"`
	Project       pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupImageImportOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupImageImportArgs)(nil)).Elem()
}

type LookupImageImportResultOutput struct{ *pulumi.OutputState }

func (LookupImageImportResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupImageImportResult)(nil)).Elem()
}

func (o LookupImageImportResultOutput) ToLookupImageImportResultOutput() LookupImageImportResultOutput {
	return o
}

func (o LookupImageImportResultOutput) ToLookupImageImportResultOutputWithContext(ctx context.Context) LookupImageImportResultOutput {
	return o
}

// Immutable. The path to the Cloud Storage file from which the image should be imported.
func (o LookupImageImportResultOutput) CloudStorageUri() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageImportResult) string { return v.CloudStorageUri }).(pulumi.StringOutput)
}

// The time the image import was created.
func (o LookupImageImportResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageImportResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Immutable. Target details for importing a disk image, will be used by ImageImportJob.
func (o LookupImageImportResultOutput) DiskImageTargetDefaults() DiskImageTargetDetailsResponseOutput {
	return o.ApplyT(func(v LookupImageImportResult) DiskImageTargetDetailsResponse { return v.DiskImageTargetDefaults }).(DiskImageTargetDetailsResponseOutput)
}

// Immutable. The encryption details used by the image import process during the image adaptation for Compute Engine.
func (o LookupImageImportResultOutput) Encryption() EncryptionResponseOutput {
	return o.ApplyT(func(v LookupImageImportResult) EncryptionResponse { return v.Encryption }).(EncryptionResponseOutput)
}

// The resource path of the ImageImport.
func (o LookupImageImportResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageImportResult) string { return v.Name }).(pulumi.StringOutput)
}

// The result of the most recent runs for this ImageImport. All jobs for this ImageImport can be listed via ListImageImportJobs.
func (o LookupImageImportResultOutput) RecentImageImportJobs() ImageImportJobResponseArrayOutput {
	return o.ApplyT(func(v LookupImageImportResult) []ImageImportJobResponse { return v.RecentImageImportJobs }).(ImageImportJobResponseArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupImageImportResultOutput{})
}
