// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new DatacenterConnector in a given Source.
// Auto-naming is currently not supported for this resource.
type DatacenterConnector struct {
	pulumi.CustomResourceState

	// Appliance OVA version. This is the OVA which is manually installed by the user and contains the infrastructure for the automatically updatable components on the appliance.
	ApplianceInfrastructureVersion pulumi.StringOutput `pulumi:"applianceInfrastructureVersion"`
	// Appliance last installed update bundle version. This is the version of the automatically updatable components on the appliance.
	ApplianceSoftwareVersion pulumi.StringOutput `pulumi:"applianceSoftwareVersion"`
	// The available versions for updating this appliance.
	AvailableVersions AvailableUpdatesResponseOutput `pulumi:"availableVersions"`
	// The communication channel between the datacenter connector and GCP.
	Bucket pulumi.StringOutput `pulumi:"bucket"`
	// The time the connector was created (as an API call, not when it was actually installed).
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Required. The datacenterConnector identifier.
	DatacenterConnectorId pulumi.StringOutput `pulumi:"datacenterConnectorId"`
	// Provides details on the state of the Datacenter Connector in case of an error.
	Error    StatusResponseOutput `pulumi:"error"`
	Location pulumi.StringOutput  `pulumi:"location"`
	// The connector's name.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// Immutable. A unique key for this connector. This key is internal to the OVA connector and is supplied with its creation during the registration process and can not be modified.
	RegistrationId pulumi.StringOutput `pulumi:"registrationId"`
	// A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and t he request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrOutput `pulumi:"requestId"`
	// The service account to use in the connector when communicating with the cloud.
	ServiceAccount pulumi.StringOutput `pulumi:"serviceAccount"`
	SourceId       pulumi.StringOutput `pulumi:"sourceId"`
	// State of the DatacenterConnector, as determined by the health checks.
	State pulumi.StringOutput `pulumi:"state"`
	// The time the state was last set.
	StateTime pulumi.StringOutput `pulumi:"stateTime"`
	// The last time the connector was updated with an API call.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// The status of the current / last upgradeAppliance operation.
	UpgradeStatus UpgradeStatusResponseOutput `pulumi:"upgradeStatus"`
	// The version running in the DatacenterConnector. This is supplied by the OVA connector during the registration process and can not be modified.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewDatacenterConnector registers a new resource with the given unique name, arguments, and options.
func NewDatacenterConnector(ctx *pulumi.Context,
	name string, args *DatacenterConnectorArgs, opts ...pulumi.ResourceOption) (*DatacenterConnector, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatacenterConnectorId == nil {
		return nil, errors.New("invalid value for required argument 'DatacenterConnectorId'")
	}
	if args.SourceId == nil {
		return nil, errors.New("invalid value for required argument 'SourceId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"datacenterConnectorId",
		"location",
		"project",
		"sourceId",
	})
	opts = append(opts, replaceOnChanges)
	var resource DatacenterConnector
	err := ctx.RegisterResource("google-native:vmmigration/v1:DatacenterConnector", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatacenterConnector gets an existing DatacenterConnector resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatacenterConnector(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatacenterConnectorState, opts ...pulumi.ResourceOption) (*DatacenterConnector, error) {
	var resource DatacenterConnector
	err := ctx.ReadResource("google-native:vmmigration/v1:DatacenterConnector", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatacenterConnector resources.
type datacenterConnectorState struct {
}

type DatacenterConnectorState struct {
}

func (DatacenterConnectorState) ElementType() reflect.Type {
	return reflect.TypeOf((*datacenterConnectorState)(nil)).Elem()
}

type datacenterConnectorArgs struct {
	// Required. The datacenterConnector identifier.
	DatacenterConnectorId string  `pulumi:"datacenterConnectorId"`
	Location              *string `pulumi:"location"`
	Project               *string `pulumi:"project"`
	// Immutable. A unique key for this connector. This key is internal to the OVA connector and is supplied with its creation during the registration process and can not be modified.
	RegistrationId *string `pulumi:"registrationId"`
	// A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and t he request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId *string `pulumi:"requestId"`
	// The service account to use in the connector when communicating with the cloud.
	ServiceAccount *string `pulumi:"serviceAccount"`
	SourceId       string  `pulumi:"sourceId"`
	// The version running in the DatacenterConnector. This is supplied by the OVA connector during the registration process and can not be modified.
	Version *string `pulumi:"version"`
}

// The set of arguments for constructing a DatacenterConnector resource.
type DatacenterConnectorArgs struct {
	// Required. The datacenterConnector identifier.
	DatacenterConnectorId pulumi.StringInput
	Location              pulumi.StringPtrInput
	Project               pulumi.StringPtrInput
	// Immutable. A unique key for this connector. This key is internal to the OVA connector and is supplied with its creation during the registration process and can not be modified.
	RegistrationId pulumi.StringPtrInput
	// A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and t he request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrInput
	// The service account to use in the connector when communicating with the cloud.
	ServiceAccount pulumi.StringPtrInput
	SourceId       pulumi.StringInput
	// The version running in the DatacenterConnector. This is supplied by the OVA connector during the registration process and can not be modified.
	Version pulumi.StringPtrInput
}

func (DatacenterConnectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*datacenterConnectorArgs)(nil)).Elem()
}

type DatacenterConnectorInput interface {
	pulumi.Input

	ToDatacenterConnectorOutput() DatacenterConnectorOutput
	ToDatacenterConnectorOutputWithContext(ctx context.Context) DatacenterConnectorOutput
}

func (*DatacenterConnector) ElementType() reflect.Type {
	return reflect.TypeOf((**DatacenterConnector)(nil)).Elem()
}

func (i *DatacenterConnector) ToDatacenterConnectorOutput() DatacenterConnectorOutput {
	return i.ToDatacenterConnectorOutputWithContext(context.Background())
}

func (i *DatacenterConnector) ToDatacenterConnectorOutputWithContext(ctx context.Context) DatacenterConnectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatacenterConnectorOutput)
}

type DatacenterConnectorOutput struct{ *pulumi.OutputState }

func (DatacenterConnectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatacenterConnector)(nil)).Elem()
}

func (o DatacenterConnectorOutput) ToDatacenterConnectorOutput() DatacenterConnectorOutput {
	return o
}

func (o DatacenterConnectorOutput) ToDatacenterConnectorOutputWithContext(ctx context.Context) DatacenterConnectorOutput {
	return o
}

// Appliance OVA version. This is the OVA which is manually installed by the user and contains the infrastructure for the automatically updatable components on the appliance.
func (o DatacenterConnectorOutput) ApplianceInfrastructureVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *DatacenterConnector) pulumi.StringOutput { return v.ApplianceInfrastructureVersion }).(pulumi.StringOutput)
}

// Appliance last installed update bundle version. This is the version of the automatically updatable components on the appliance.
func (o DatacenterConnectorOutput) ApplianceSoftwareVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *DatacenterConnector) pulumi.StringOutput { return v.ApplianceSoftwareVersion }).(pulumi.StringOutput)
}

// The available versions for updating this appliance.
func (o DatacenterConnectorOutput) AvailableVersions() AvailableUpdatesResponseOutput {
	return o.ApplyT(func(v *DatacenterConnector) AvailableUpdatesResponseOutput { return v.AvailableVersions }).(AvailableUpdatesResponseOutput)
}

// The communication channel between the datacenter connector and GCP.
func (o DatacenterConnectorOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v *DatacenterConnector) pulumi.StringOutput { return v.Bucket }).(pulumi.StringOutput)
}

// The time the connector was created (as an API call, not when it was actually installed).
func (o DatacenterConnectorOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DatacenterConnector) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Required. The datacenterConnector identifier.
func (o DatacenterConnectorOutput) DatacenterConnectorId() pulumi.StringOutput {
	return o.ApplyT(func(v *DatacenterConnector) pulumi.StringOutput { return v.DatacenterConnectorId }).(pulumi.StringOutput)
}

// Provides details on the state of the Datacenter Connector in case of an error.
func (o DatacenterConnectorOutput) Error() StatusResponseOutput {
	return o.ApplyT(func(v *DatacenterConnector) StatusResponseOutput { return v.Error }).(StatusResponseOutput)
}

func (o DatacenterConnectorOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *DatacenterConnector) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The connector's name.
func (o DatacenterConnectorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DatacenterConnector) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DatacenterConnectorOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *DatacenterConnector) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Immutable. A unique key for this connector. This key is internal to the OVA connector and is supplied with its creation during the registration process and can not be modified.
func (o DatacenterConnectorOutput) RegistrationId() pulumi.StringOutput {
	return o.ApplyT(func(v *DatacenterConnector) pulumi.StringOutput { return v.RegistrationId }).(pulumi.StringOutput)
}

// A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and t he request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
func (o DatacenterConnectorOutput) RequestId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatacenterConnector) pulumi.StringPtrOutput { return v.RequestId }).(pulumi.StringPtrOutput)
}

// The service account to use in the connector when communicating with the cloud.
func (o DatacenterConnectorOutput) ServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v *DatacenterConnector) pulumi.StringOutput { return v.ServiceAccount }).(pulumi.StringOutput)
}

func (o DatacenterConnectorOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DatacenterConnector) pulumi.StringOutput { return v.SourceId }).(pulumi.StringOutput)
}

// State of the DatacenterConnector, as determined by the health checks.
func (o DatacenterConnectorOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *DatacenterConnector) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The time the state was last set.
func (o DatacenterConnectorOutput) StateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DatacenterConnector) pulumi.StringOutput { return v.StateTime }).(pulumi.StringOutput)
}

// The last time the connector was updated with an API call.
func (o DatacenterConnectorOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DatacenterConnector) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// The status of the current / last upgradeAppliance operation.
func (o DatacenterConnectorOutput) UpgradeStatus() UpgradeStatusResponseOutput {
	return o.ApplyT(func(v *DatacenterConnector) UpgradeStatusResponseOutput { return v.UpgradeStatus }).(UpgradeStatusResponseOutput)
}

// The version running in the DatacenterConnector. This is supplied by the OVA connector during the registration process and can not be modified.
func (o DatacenterConnectorOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *DatacenterConnector) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatacenterConnectorInput)(nil)).Elem(), &DatacenterConnector{})
	pulumi.RegisterOutputType(DatacenterConnectorOutput{})
}
