// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Initiates a Clone of a specific migrating VM.
// Auto-naming is currently not supported for this resource.
// Note - this resource's API doesn't support deletion. When deleted, the resource will persist
// on Google Cloud even though it will be deleted from Pulumi state.
type CloneJob struct {
	pulumi.CustomResourceState

	// Details of the target VM in Compute Engine.
	ComputeEngineTargetDetails ComputeEngineTargetDetailsResponseOutput `pulumi:"computeEngineTargetDetails"`
	// The time the clone job was created (as an API call, not when it was actually created in the target).
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Provides details for the errors that led to the Clone Job's state.
	Error StatusResponseOutput `pulumi:"error"`
	// The name of the clone.
	Name pulumi.StringOutput `pulumi:"name"`
	// State of the clone job.
	State pulumi.StringOutput `pulumi:"state"`
	// The time the state was last updated.
	StateTime pulumi.StringOutput `pulumi:"stateTime"`
}

// NewCloneJob registers a new resource with the given unique name, arguments, and options.
func NewCloneJob(ctx *pulumi.Context,
	name string, args *CloneJobArgs, opts ...pulumi.ResourceOption) (*CloneJob, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CloneJobId == nil {
		return nil, errors.New("invalid value for required argument 'CloneJobId'")
	}
	if args.MigratingVmId == nil {
		return nil, errors.New("invalid value for required argument 'MigratingVmId'")
	}
	if args.SourceId == nil {
		return nil, errors.New("invalid value for required argument 'SourceId'")
	}
	var resource CloneJob
	err := ctx.RegisterResource("google-native:vmmigration/v1:CloneJob", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCloneJob gets an existing CloneJob resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCloneJob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CloneJobState, opts ...pulumi.ResourceOption) (*CloneJob, error) {
	var resource CloneJob
	err := ctx.ReadResource("google-native:vmmigration/v1:CloneJob", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CloneJob resources.
type cloneJobState struct {
}

type CloneJobState struct {
}

func (CloneJobState) ElementType() reflect.Type {
	return reflect.TypeOf((*cloneJobState)(nil)).Elem()
}

type cloneJobArgs struct {
	CloneJobId    string  `pulumi:"cloneJobId"`
	Location      *string `pulumi:"location"`
	MigratingVmId string  `pulumi:"migratingVmId"`
	Project       *string `pulumi:"project"`
	RequestId     *string `pulumi:"requestId"`
	SourceId      string  `pulumi:"sourceId"`
}

// The set of arguments for constructing a CloneJob resource.
type CloneJobArgs struct {
	CloneJobId    pulumi.StringInput
	Location      pulumi.StringPtrInput
	MigratingVmId pulumi.StringInput
	Project       pulumi.StringPtrInput
	RequestId     pulumi.StringPtrInput
	SourceId      pulumi.StringInput
}

func (CloneJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cloneJobArgs)(nil)).Elem()
}

type CloneJobInput interface {
	pulumi.Input

	ToCloneJobOutput() CloneJobOutput
	ToCloneJobOutputWithContext(ctx context.Context) CloneJobOutput
}

func (*CloneJob) ElementType() reflect.Type {
	return reflect.TypeOf((**CloneJob)(nil)).Elem()
}

func (i *CloneJob) ToCloneJobOutput() CloneJobOutput {
	return i.ToCloneJobOutputWithContext(context.Background())
}

func (i *CloneJob) ToCloneJobOutputWithContext(ctx context.Context) CloneJobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloneJobOutput)
}

type CloneJobOutput struct{ *pulumi.OutputState }

func (CloneJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloneJob)(nil)).Elem()
}

func (o CloneJobOutput) ToCloneJobOutput() CloneJobOutput {
	return o
}

func (o CloneJobOutput) ToCloneJobOutputWithContext(ctx context.Context) CloneJobOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CloneJobInput)(nil)).Elem(), &CloneJob{})
	pulumi.RegisterOutputType(CloneJobOutput{})
}
