// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new ContactCenter in a given project and location.
type ContactCenter struct {
	pulumi.CustomResourceState

	// Optional. Info about the first admin user, such as given name and family name.
	AdminUser AdminUserResponseOutput `pulumi:"adminUser"`
	// Optional. Whether to enable users to be created in the CCAIP-instance concurrently to having users in Cloud identity
	CcaipManagedUsers pulumi.BoolOutput `pulumi:"ccaipManagedUsers"`
	// Required. Id of the requesting object If auto-generating Id server-side, remove this field and contact_center_id from the method_signature of Create RPC
	ContactCenterId pulumi.StringOutput `pulumi:"contactCenterId"`
	// [Output only] Create time stamp
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Immutable. At least 2 and max 16 char long, must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt).
	CustomerDomainPrefix pulumi.StringOutput `pulumi:"customerDomainPrefix"`
	// A user friendly name for the ContactCenter.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The configuration of this instance, it is currently immutable once created.
	InstanceConfig InstanceConfigResponseOutput `pulumi:"instanceConfig"`
	// Labels as key value pairs
	Labels   pulumi.StringMapOutput `pulumi:"labels"`
	Location pulumi.StringOutput    `pulumi:"location"`
	// name of resource
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrOutput `pulumi:"requestId"`
	// Optional. Params that sets up Google as IdP.
	SamlParams SAMLParamsResponseOutput `pulumi:"samlParams"`
	// The state of this contact center.
	State pulumi.StringOutput `pulumi:"state"`
	// [Output only] Update time stamp
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// URIs to access the deployed ContactCenters.
	Uris URIsResponseOutput `pulumi:"uris"`
	// Optional. Email address of the first admin user.
	UserEmail pulumi.StringOutput `pulumi:"userEmail"`
}

// NewContactCenter registers a new resource with the given unique name, arguments, and options.
func NewContactCenter(ctx *pulumi.Context,
	name string, args *ContactCenterArgs, opts ...pulumi.ResourceOption) (*ContactCenter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ContactCenterId == nil {
		return nil, errors.New("invalid value for required argument 'ContactCenterId'")
	}
	if args.CustomerDomainPrefix == nil {
		return nil, errors.New("invalid value for required argument 'CustomerDomainPrefix'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"contactCenterId",
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ContactCenter
	err := ctx.RegisterResource("google-native:contactcenteraiplatform/v1alpha1:ContactCenter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContactCenter gets an existing ContactCenter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContactCenter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContactCenterState, opts ...pulumi.ResourceOption) (*ContactCenter, error) {
	var resource ContactCenter
	err := ctx.ReadResource("google-native:contactcenteraiplatform/v1alpha1:ContactCenter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ContactCenter resources.
type contactCenterState struct {
}

type ContactCenterState struct {
}

func (ContactCenterState) ElementType() reflect.Type {
	return reflect.TypeOf((*contactCenterState)(nil)).Elem()
}

type contactCenterArgs struct {
	// Optional. Info about the first admin user, such as given name and family name.
	AdminUser *AdminUser `pulumi:"adminUser"`
	// Optional. Whether to enable users to be created in the CCAIP-instance concurrently to having users in Cloud identity
	CcaipManagedUsers *bool `pulumi:"ccaipManagedUsers"`
	// Required. Id of the requesting object If auto-generating Id server-side, remove this field and contact_center_id from the method_signature of Create RPC
	ContactCenterId string `pulumi:"contactCenterId"`
	// Immutable. At least 2 and max 16 char long, must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt).
	CustomerDomainPrefix string `pulumi:"customerDomainPrefix"`
	// A user friendly name for the ContactCenter.
	DisplayName string `pulumi:"displayName"`
	// The configuration of this instance, it is currently immutable once created.
	InstanceConfig *InstanceConfig `pulumi:"instanceConfig"`
	// Labels as key value pairs
	Labels   map[string]string `pulumi:"labels"`
	Location *string           `pulumi:"location"`
	// name of resource
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId *string `pulumi:"requestId"`
	// Optional. Params that sets up Google as IdP.
	SamlParams *SAMLParams `pulumi:"samlParams"`
	// Optional. Email address of the first admin user.
	UserEmail *string `pulumi:"userEmail"`
}

// The set of arguments for constructing a ContactCenter resource.
type ContactCenterArgs struct {
	// Optional. Info about the first admin user, such as given name and family name.
	AdminUser AdminUserPtrInput
	// Optional. Whether to enable users to be created in the CCAIP-instance concurrently to having users in Cloud identity
	CcaipManagedUsers pulumi.BoolPtrInput
	// Required. Id of the requesting object If auto-generating Id server-side, remove this field and contact_center_id from the method_signature of Create RPC
	ContactCenterId pulumi.StringInput
	// Immutable. At least 2 and max 16 char long, must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt).
	CustomerDomainPrefix pulumi.StringInput
	// A user friendly name for the ContactCenter.
	DisplayName pulumi.StringInput
	// The configuration of this instance, it is currently immutable once created.
	InstanceConfig InstanceConfigPtrInput
	// Labels as key value pairs
	Labels   pulumi.StringMapInput
	Location pulumi.StringPtrInput
	// name of resource
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrInput
	// Optional. Params that sets up Google as IdP.
	SamlParams SAMLParamsPtrInput
	// Optional. Email address of the first admin user.
	UserEmail pulumi.StringPtrInput
}

func (ContactCenterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*contactCenterArgs)(nil)).Elem()
}

type ContactCenterInput interface {
	pulumi.Input

	ToContactCenterOutput() ContactCenterOutput
	ToContactCenterOutputWithContext(ctx context.Context) ContactCenterOutput
}

func (*ContactCenter) ElementType() reflect.Type {
	return reflect.TypeOf((**ContactCenter)(nil)).Elem()
}

func (i *ContactCenter) ToContactCenterOutput() ContactCenterOutput {
	return i.ToContactCenterOutputWithContext(context.Background())
}

func (i *ContactCenter) ToContactCenterOutputWithContext(ctx context.Context) ContactCenterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactCenterOutput)
}

type ContactCenterOutput struct{ *pulumi.OutputState }

func (ContactCenterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContactCenter)(nil)).Elem()
}

func (o ContactCenterOutput) ToContactCenterOutput() ContactCenterOutput {
	return o
}

func (o ContactCenterOutput) ToContactCenterOutputWithContext(ctx context.Context) ContactCenterOutput {
	return o
}

// Optional. Info about the first admin user, such as given name and family name.
func (o ContactCenterOutput) AdminUser() AdminUserResponseOutput {
	return o.ApplyT(func(v *ContactCenter) AdminUserResponseOutput { return v.AdminUser }).(AdminUserResponseOutput)
}

// Optional. Whether to enable users to be created in the CCAIP-instance concurrently to having users in Cloud identity
func (o ContactCenterOutput) CcaipManagedUsers() pulumi.BoolOutput {
	return o.ApplyT(func(v *ContactCenter) pulumi.BoolOutput { return v.CcaipManagedUsers }).(pulumi.BoolOutput)
}

// Required. Id of the requesting object If auto-generating Id server-side, remove this field and contact_center_id from the method_signature of Create RPC
func (o ContactCenterOutput) ContactCenterId() pulumi.StringOutput {
	return o.ApplyT(func(v *ContactCenter) pulumi.StringOutput { return v.ContactCenterId }).(pulumi.StringOutput)
}

// [Output only] Create time stamp
func (o ContactCenterOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ContactCenter) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Immutable. At least 2 and max 16 char long, must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt).
func (o ContactCenterOutput) CustomerDomainPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v *ContactCenter) pulumi.StringOutput { return v.CustomerDomainPrefix }).(pulumi.StringOutput)
}

// A user friendly name for the ContactCenter.
func (o ContactCenterOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *ContactCenter) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// The configuration of this instance, it is currently immutable once created.
func (o ContactCenterOutput) InstanceConfig() InstanceConfigResponseOutput {
	return o.ApplyT(func(v *ContactCenter) InstanceConfigResponseOutput { return v.InstanceConfig }).(InstanceConfigResponseOutput)
}

// Labels as key value pairs
func (o ContactCenterOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ContactCenter) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

func (o ContactCenterOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ContactCenter) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// name of resource
func (o ContactCenterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ContactCenter) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ContactCenterOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ContactCenter) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
func (o ContactCenterOutput) RequestId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContactCenter) pulumi.StringPtrOutput { return v.RequestId }).(pulumi.StringPtrOutput)
}

// Optional. Params that sets up Google as IdP.
func (o ContactCenterOutput) SamlParams() SAMLParamsResponseOutput {
	return o.ApplyT(func(v *ContactCenter) SAMLParamsResponseOutput { return v.SamlParams }).(SAMLParamsResponseOutput)
}

// The state of this contact center.
func (o ContactCenterOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *ContactCenter) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// [Output only] Update time stamp
func (o ContactCenterOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ContactCenter) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// URIs to access the deployed ContactCenters.
func (o ContactCenterOutput) Uris() URIsResponseOutput {
	return o.ApplyT(func(v *ContactCenter) URIsResponseOutput { return v.Uris }).(URIsResponseOutput)
}

// Optional. Email address of the first admin user.
func (o ContactCenterOutput) UserEmail() pulumi.StringOutput {
	return o.ApplyT(func(v *ContactCenter) pulumi.StringOutput { return v.UserEmail }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ContactCenterInput)(nil)).Elem(), &ContactCenter{})
	pulumi.RegisterOutputType(ContactCenterOutput{})
}
