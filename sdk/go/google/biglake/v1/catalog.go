// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates a new catalog.
// Auto-naming is currently not supported for this resource.
type Catalog struct {
	pulumi.CustomResourceState

	// Required. The ID to use for the catalog, which will become the final component of the catalog's resource name.
	CatalogId pulumi.StringOutput `pulumi:"catalogId"`
	// The creation time of the catalog.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The deletion time of the catalog. Only set after the catalog is deleted.
	DeleteTime pulumi.StringOutput `pulumi:"deleteTime"`
	// The time when this catalog is considered expired. Only set after the catalog is deleted.
	ExpireTime pulumi.StringOutput `pulumi:"expireTime"`
	Location   pulumi.StringOutput `pulumi:"location"`
	// The resource name. Format: projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// The last modification time of the catalog.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewCatalog registers a new resource with the given unique name, arguments, and options.
func NewCatalog(ctx *pulumi.Context,
	name string, args *CatalogArgs, opts ...pulumi.ResourceOption) (*Catalog, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CatalogId == nil {
		return nil, errors.New("invalid value for required argument 'CatalogId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"catalogId",
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Catalog
	err := ctx.RegisterResource("google-native:biglake/v1:Catalog", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCatalog gets an existing Catalog resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCatalog(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CatalogState, opts ...pulumi.ResourceOption) (*Catalog, error) {
	var resource Catalog
	err := ctx.ReadResource("google-native:biglake/v1:Catalog", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Catalog resources.
type catalogState struct {
}

type CatalogState struct {
}

func (CatalogState) ElementType() reflect.Type {
	return reflect.TypeOf((*catalogState)(nil)).Elem()
}

type catalogArgs struct {
	// Required. The ID to use for the catalog, which will become the final component of the catalog's resource name.
	CatalogId string  `pulumi:"catalogId"`
	Location  *string `pulumi:"location"`
	Project   *string `pulumi:"project"`
}

// The set of arguments for constructing a Catalog resource.
type CatalogArgs struct {
	// Required. The ID to use for the catalog, which will become the final component of the catalog's resource name.
	CatalogId pulumi.StringInput
	Location  pulumi.StringPtrInput
	Project   pulumi.StringPtrInput
}

func (CatalogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*catalogArgs)(nil)).Elem()
}

type CatalogInput interface {
	pulumi.Input

	ToCatalogOutput() CatalogOutput
	ToCatalogOutputWithContext(ctx context.Context) CatalogOutput
}

func (*Catalog) ElementType() reflect.Type {
	return reflect.TypeOf((**Catalog)(nil)).Elem()
}

func (i *Catalog) ToCatalogOutput() CatalogOutput {
	return i.ToCatalogOutputWithContext(context.Background())
}

func (i *Catalog) ToCatalogOutputWithContext(ctx context.Context) CatalogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogOutput)
}

func (i *Catalog) ToOutput(ctx context.Context) pulumix.Output[*Catalog] {
	return pulumix.Output[*Catalog]{
		OutputState: i.ToCatalogOutputWithContext(ctx).OutputState,
	}
}

type CatalogOutput struct{ *pulumi.OutputState }

func (CatalogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Catalog)(nil)).Elem()
}

func (o CatalogOutput) ToCatalogOutput() CatalogOutput {
	return o
}

func (o CatalogOutput) ToCatalogOutputWithContext(ctx context.Context) CatalogOutput {
	return o
}

func (o CatalogOutput) ToOutput(ctx context.Context) pulumix.Output[*Catalog] {
	return pulumix.Output[*Catalog]{
		OutputState: o.OutputState,
	}
}

// Required. The ID to use for the catalog, which will become the final component of the catalog's resource name.
func (o CatalogOutput) CatalogId() pulumi.StringOutput {
	return o.ApplyT(func(v *Catalog) pulumi.StringOutput { return v.CatalogId }).(pulumi.StringOutput)
}

// The creation time of the catalog.
func (o CatalogOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Catalog) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The deletion time of the catalog. Only set after the catalog is deleted.
func (o CatalogOutput) DeleteTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Catalog) pulumi.StringOutput { return v.DeleteTime }).(pulumi.StringOutput)
}

// The time when this catalog is considered expired. Only set after the catalog is deleted.
func (o CatalogOutput) ExpireTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Catalog) pulumi.StringOutput { return v.ExpireTime }).(pulumi.StringOutput)
}

func (o CatalogOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Catalog) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource name. Format: projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}
func (o CatalogOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Catalog) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o CatalogOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Catalog) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The last modification time of the catalog.
func (o CatalogOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Catalog) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CatalogInput)(nil)).Elem(), &Catalog{})
	pulumi.RegisterOutputType(CatalogOutput{})
}
