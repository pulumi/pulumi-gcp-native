// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates a new database.
// Auto-naming is currently not supported for this resource.
type Database struct {
	pulumi.CustomResourceState

	CatalogId pulumi.StringOutput `pulumi:"catalogId"`
	// The creation time of the database.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Required. The ID to use for the database, which will become the final component of the database's resource name.
	DatabaseId pulumi.StringOutput `pulumi:"databaseId"`
	// The deletion time of the database. Only set after the database is deleted.
	DeleteTime pulumi.StringOutput `pulumi:"deleteTime"`
	// The time when this database is considered expired. Only set after the database is deleted.
	ExpireTime pulumi.StringOutput `pulumi:"expireTime"`
	// Options of a Hive database.
	HiveOptions HiveDatabaseOptionsResponseOutput `pulumi:"hiveOptions"`
	Location    pulumi.StringOutput               `pulumi:"location"`
	// The resource name. Format: projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// The database type.
	Type pulumi.StringOutput `pulumi:"type"`
	// The last modification time of the database.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewDatabase registers a new resource with the given unique name, arguments, and options.
func NewDatabase(ctx *pulumi.Context,
	name string, args *DatabaseArgs, opts ...pulumi.ResourceOption) (*Database, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CatalogId == nil {
		return nil, errors.New("invalid value for required argument 'CatalogId'")
	}
	if args.DatabaseId == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"catalogId",
		"databaseId",
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Database
	err := ctx.RegisterResource("google-native:biglake/v1:Database", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabase gets an existing Database resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseState, opts ...pulumi.ResourceOption) (*Database, error) {
	var resource Database
	err := ctx.ReadResource("google-native:biglake/v1:Database", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Database resources.
type databaseState struct {
}

type DatabaseState struct {
}

func (DatabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseState)(nil)).Elem()
}

type databaseArgs struct {
	CatalogId string `pulumi:"catalogId"`
	// Required. The ID to use for the database, which will become the final component of the database's resource name.
	DatabaseId string `pulumi:"databaseId"`
	// Options of a Hive database.
	HiveOptions *HiveDatabaseOptions `pulumi:"hiveOptions"`
	Location    *string              `pulumi:"location"`
	Project     *string              `pulumi:"project"`
	// The database type.
	Type *DatabaseType `pulumi:"type"`
}

// The set of arguments for constructing a Database resource.
type DatabaseArgs struct {
	CatalogId pulumi.StringInput
	// Required. The ID to use for the database, which will become the final component of the database's resource name.
	DatabaseId pulumi.StringInput
	// Options of a Hive database.
	HiveOptions HiveDatabaseOptionsPtrInput
	Location    pulumi.StringPtrInput
	Project     pulumi.StringPtrInput
	// The database type.
	Type DatabaseTypePtrInput
}

func (DatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseArgs)(nil)).Elem()
}

type DatabaseInput interface {
	pulumi.Input

	ToDatabaseOutput() DatabaseOutput
	ToDatabaseOutputWithContext(ctx context.Context) DatabaseOutput
}

func (*Database) ElementType() reflect.Type {
	return reflect.TypeOf((**Database)(nil)).Elem()
}

func (i *Database) ToDatabaseOutput() DatabaseOutput {
	return i.ToDatabaseOutputWithContext(context.Background())
}

func (i *Database) ToDatabaseOutputWithContext(ctx context.Context) DatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseOutput)
}

func (i *Database) ToOutput(ctx context.Context) pulumix.Output[*Database] {
	return pulumix.Output[*Database]{
		OutputState: i.ToDatabaseOutputWithContext(ctx).OutputState,
	}
}

type DatabaseOutput struct{ *pulumi.OutputState }

func (DatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Database)(nil)).Elem()
}

func (o DatabaseOutput) ToDatabaseOutput() DatabaseOutput {
	return o
}

func (o DatabaseOutput) ToDatabaseOutputWithContext(ctx context.Context) DatabaseOutput {
	return o
}

func (o DatabaseOutput) ToOutput(ctx context.Context) pulumix.Output[*Database] {
	return pulumix.Output[*Database]{
		OutputState: o.OutputState,
	}
}

func (o DatabaseOutput) CatalogId() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.CatalogId }).(pulumi.StringOutput)
}

// The creation time of the database.
func (o DatabaseOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Required. The ID to use for the database, which will become the final component of the database's resource name.
func (o DatabaseOutput) DatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.DatabaseId }).(pulumi.StringOutput)
}

// The deletion time of the database. Only set after the database is deleted.
func (o DatabaseOutput) DeleteTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.DeleteTime }).(pulumi.StringOutput)
}

// The time when this database is considered expired. Only set after the database is deleted.
func (o DatabaseOutput) ExpireTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.ExpireTime }).(pulumi.StringOutput)
}

// Options of a Hive database.
func (o DatabaseOutput) HiveOptions() HiveDatabaseOptionsResponseOutput {
	return o.ApplyT(func(v *Database) HiveDatabaseOptionsResponseOutput { return v.HiveOptions }).(HiveDatabaseOptionsResponseOutput)
}

func (o DatabaseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource name. Format: projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}
func (o DatabaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DatabaseOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The database type.
func (o DatabaseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The last modification time of the database.
func (o DatabaseOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseInput)(nil)).Elem(), &Database{})
	pulumi.RegisterOutputType(DatabaseOutput{})
}
