// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The database type.
type DatabaseType string

const (
	// The type is not specified.
	DatabaseTypeTypeUnspecified = DatabaseType("TYPE_UNSPECIFIED")
	// Represents a database storing tables compatible with Hive Metastore tables.
	DatabaseTypeHive = DatabaseType("HIVE")
)

func (DatabaseType) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseType)(nil)).Elem()
}

func (e DatabaseType) ToDatabaseTypeOutput() DatabaseTypeOutput {
	return pulumi.ToOutput(e).(DatabaseTypeOutput)
}

func (e DatabaseType) ToDatabaseTypeOutputWithContext(ctx context.Context) DatabaseTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DatabaseTypeOutput)
}

func (e DatabaseType) ToDatabaseTypePtrOutput() DatabaseTypePtrOutput {
	return e.ToDatabaseTypePtrOutputWithContext(context.Background())
}

func (e DatabaseType) ToDatabaseTypePtrOutputWithContext(ctx context.Context) DatabaseTypePtrOutput {
	return DatabaseType(e).ToDatabaseTypeOutputWithContext(ctx).ToDatabaseTypePtrOutputWithContext(ctx)
}

func (e DatabaseType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DatabaseType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DatabaseType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DatabaseType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DatabaseTypeOutput struct{ *pulumi.OutputState }

func (DatabaseTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseType)(nil)).Elem()
}

func (o DatabaseTypeOutput) ToDatabaseTypeOutput() DatabaseTypeOutput {
	return o
}

func (o DatabaseTypeOutput) ToDatabaseTypeOutputWithContext(ctx context.Context) DatabaseTypeOutput {
	return o
}

func (o DatabaseTypeOutput) ToDatabaseTypePtrOutput() DatabaseTypePtrOutput {
	return o.ToDatabaseTypePtrOutputWithContext(context.Background())
}

func (o DatabaseTypeOutput) ToDatabaseTypePtrOutputWithContext(ctx context.Context) DatabaseTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseType) *DatabaseType {
		return &v
	}).(DatabaseTypePtrOutput)
}

func (o DatabaseTypeOutput) ToOutput(ctx context.Context) pulumix.Output[DatabaseType] {
	return pulumix.Output[DatabaseType]{
		OutputState: o.OutputState,
	}
}

func (o DatabaseTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DatabaseTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DatabaseType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DatabaseTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DatabaseTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DatabaseType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DatabaseTypePtrOutput struct{ *pulumi.OutputState }

func (DatabaseTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseType)(nil)).Elem()
}

func (o DatabaseTypePtrOutput) ToDatabaseTypePtrOutput() DatabaseTypePtrOutput {
	return o
}

func (o DatabaseTypePtrOutput) ToDatabaseTypePtrOutputWithContext(ctx context.Context) DatabaseTypePtrOutput {
	return o
}

func (o DatabaseTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DatabaseType] {
	return pulumix.Output[*DatabaseType]{
		OutputState: o.OutputState,
	}
}

func (o DatabaseTypePtrOutput) Elem() DatabaseTypeOutput {
	return o.ApplyT(func(v *DatabaseType) DatabaseType {
		if v != nil {
			return *v
		}
		var ret DatabaseType
		return ret
	}).(DatabaseTypeOutput)
}

func (o DatabaseTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DatabaseTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DatabaseType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DatabaseTypeInput is an input type that accepts DatabaseTypeArgs and DatabaseTypeOutput values.
// You can construct a concrete instance of `DatabaseTypeInput` via:
//
//	DatabaseTypeArgs{...}
type DatabaseTypeInput interface {
	pulumi.Input

	ToDatabaseTypeOutput() DatabaseTypeOutput
	ToDatabaseTypeOutputWithContext(context.Context) DatabaseTypeOutput
}

var databaseTypePtrType = reflect.TypeOf((**DatabaseType)(nil)).Elem()

type DatabaseTypePtrInput interface {
	pulumi.Input

	ToDatabaseTypePtrOutput() DatabaseTypePtrOutput
	ToDatabaseTypePtrOutputWithContext(context.Context) DatabaseTypePtrOutput
}

type databaseTypePtr string

func DatabaseTypePtr(v string) DatabaseTypePtrInput {
	return (*databaseTypePtr)(&v)
}

func (*databaseTypePtr) ElementType() reflect.Type {
	return databaseTypePtrType
}

func (in *databaseTypePtr) ToDatabaseTypePtrOutput() DatabaseTypePtrOutput {
	return pulumi.ToOutput(in).(DatabaseTypePtrOutput)
}

func (in *databaseTypePtr) ToDatabaseTypePtrOutputWithContext(ctx context.Context) DatabaseTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DatabaseTypePtrOutput)
}

func (in *databaseTypePtr) ToOutput(ctx context.Context) pulumix.Output[*DatabaseType] {
	return pulumix.Output[*DatabaseType]{
		OutputState: in.ToDatabaseTypePtrOutputWithContext(ctx).OutputState,
	}
}

// The table type.
type TableType string

const (
	// The type is not specified.
	TableTypeTypeUnspecified = TableType("TYPE_UNSPECIFIED")
	// Represents a table compatible with Hive Metastore tables.
	TableTypeHive = TableType("HIVE")
)

func (TableType) ElementType() reflect.Type {
	return reflect.TypeOf((*TableType)(nil)).Elem()
}

func (e TableType) ToTableTypeOutput() TableTypeOutput {
	return pulumi.ToOutput(e).(TableTypeOutput)
}

func (e TableType) ToTableTypeOutputWithContext(ctx context.Context) TableTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(TableTypeOutput)
}

func (e TableType) ToTableTypePtrOutput() TableTypePtrOutput {
	return e.ToTableTypePtrOutputWithContext(context.Background())
}

func (e TableType) ToTableTypePtrOutputWithContext(ctx context.Context) TableTypePtrOutput {
	return TableType(e).ToTableTypeOutputWithContext(ctx).ToTableTypePtrOutputWithContext(ctx)
}

func (e TableType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e TableType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e TableType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e TableType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type TableTypeOutput struct{ *pulumi.OutputState }

func (TableTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableType)(nil)).Elem()
}

func (o TableTypeOutput) ToTableTypeOutput() TableTypeOutput {
	return o
}

func (o TableTypeOutput) ToTableTypeOutputWithContext(ctx context.Context) TableTypeOutput {
	return o
}

func (o TableTypeOutput) ToTableTypePtrOutput() TableTypePtrOutput {
	return o.ToTableTypePtrOutputWithContext(context.Background())
}

func (o TableTypeOutput) ToTableTypePtrOutputWithContext(ctx context.Context) TableTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableType) *TableType {
		return &v
	}).(TableTypePtrOutput)
}

func (o TableTypeOutput) ToOutput(ctx context.Context) pulumix.Output[TableType] {
	return pulumix.Output[TableType]{
		OutputState: o.OutputState,
	}
}

func (o TableTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o TableTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TableType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o TableTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TableTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TableType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type TableTypePtrOutput struct{ *pulumi.OutputState }

func (TableTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableType)(nil)).Elem()
}

func (o TableTypePtrOutput) ToTableTypePtrOutput() TableTypePtrOutput {
	return o
}

func (o TableTypePtrOutput) ToTableTypePtrOutputWithContext(ctx context.Context) TableTypePtrOutput {
	return o
}

func (o TableTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TableType] {
	return pulumix.Output[*TableType]{
		OutputState: o.OutputState,
	}
}

func (o TableTypePtrOutput) Elem() TableTypeOutput {
	return o.ApplyT(func(v *TableType) TableType {
		if v != nil {
			return *v
		}
		var ret TableType
		return ret
	}).(TableTypeOutput)
}

func (o TableTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TableTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *TableType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// TableTypeInput is an input type that accepts TableTypeArgs and TableTypeOutput values.
// You can construct a concrete instance of `TableTypeInput` via:
//
//	TableTypeArgs{...}
type TableTypeInput interface {
	pulumi.Input

	ToTableTypeOutput() TableTypeOutput
	ToTableTypeOutputWithContext(context.Context) TableTypeOutput
}

var tableTypePtrType = reflect.TypeOf((**TableType)(nil)).Elem()

type TableTypePtrInput interface {
	pulumi.Input

	ToTableTypePtrOutput() TableTypePtrOutput
	ToTableTypePtrOutputWithContext(context.Context) TableTypePtrOutput
}

type tableTypePtr string

func TableTypePtr(v string) TableTypePtrInput {
	return (*tableTypePtr)(&v)
}

func (*tableTypePtr) ElementType() reflect.Type {
	return tableTypePtrType
}

func (in *tableTypePtr) ToTableTypePtrOutput() TableTypePtrOutput {
	return pulumi.ToOutput(in).(TableTypePtrOutput)
}

func (in *tableTypePtr) ToTableTypePtrOutputWithContext(ctx context.Context) TableTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(TableTypePtrOutput)
}

func (in *tableTypePtr) ToOutput(ctx context.Context) pulumix.Output[*TableType] {
	return pulumix.Output[*TableType]{
		OutputState: in.ToTableTypePtrOutputWithContext(ctx).OutputState,
	}
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseTypeInput)(nil)).Elem(), DatabaseType("TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseTypePtrInput)(nil)).Elem(), DatabaseType("TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*TableTypeInput)(nil)).Elem(), TableType("TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*TableTypePtrInput)(nil)).Elem(), TableType("TYPE_UNSPECIFIED"))
	pulumi.RegisterOutputType(DatabaseTypeOutput{})
	pulumi.RegisterOutputType(DatabaseTypePtrOutput{})
	pulumi.RegisterOutputType(TableTypeOutput{})
	pulumi.RegisterOutputType(TableTypePtrOutput{})
}
