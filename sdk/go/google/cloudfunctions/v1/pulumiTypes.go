// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfig struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfig `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service *string `pulumi:"service"`
}

// AuditConfigInput is an input type that accepts AuditConfigArgs and AuditConfigOutput values.
// You can construct a concrete instance of `AuditConfigInput` via:
//
//	AuditConfigArgs{...}
type AuditConfigInput interface {
	pulumi.Input

	ToAuditConfigOutput() AuditConfigOutput
	ToAuditConfigOutputWithContext(context.Context) AuditConfigOutput
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigArgs struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs AuditLogConfigArrayInput `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (AuditConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (i AuditConfigArgs) ToAuditConfigOutput() AuditConfigOutput {
	return i.ToAuditConfigOutputWithContext(context.Background())
}

func (i AuditConfigArgs) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigOutput)
}

func (i AuditConfigArgs) ToOutput(ctx context.Context) pulumix.Output[AuditConfig] {
	return pulumix.Output[AuditConfig]{
		OutputState: i.ToAuditConfigOutputWithContext(ctx).OutputState,
	}
}

// AuditConfigArrayInput is an input type that accepts AuditConfigArray and AuditConfigArrayOutput values.
// You can construct a concrete instance of `AuditConfigArrayInput` via:
//
//	AuditConfigArray{ AuditConfigArgs{...} }
type AuditConfigArrayInput interface {
	pulumi.Input

	ToAuditConfigArrayOutput() AuditConfigArrayOutput
	ToAuditConfigArrayOutputWithContext(context.Context) AuditConfigArrayOutput
}

type AuditConfigArray []AuditConfigInput

func (AuditConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (i AuditConfigArray) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return i.ToAuditConfigArrayOutputWithContext(context.Background())
}

func (i AuditConfigArray) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigArrayOutput)
}

func (i AuditConfigArray) ToOutput(ctx context.Context) pulumix.Output[[]AuditConfig] {
	return pulumix.Output[[]AuditConfig]{
		OutputState: i.ToAuditConfigArrayOutputWithContext(ctx).OutputState,
	}
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigOutput struct{ *pulumi.OutputState }

func (AuditConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (o AuditConfigOutput) ToAuditConfigOutput() AuditConfigOutput {
	return o
}

func (o AuditConfigOutput) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return o
}

func (o AuditConfigOutput) ToOutput(ctx context.Context) pulumix.Output[AuditConfig] {
	return pulumix.Output[AuditConfig]{
		OutputState: o.OutputState,
	}
}

// The configuration for logging of each type of permission.
func (o AuditConfigOutput) AuditLogConfigs() AuditLogConfigArrayOutput {
	return o.ApplyT(func(v AuditConfig) []AuditLogConfig { return v.AuditLogConfigs }).(AuditLogConfigArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuditConfig) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type AuditConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AuditConfig] {
	return pulumix.Output[[]AuditConfig]{
		OutputState: o.OutputState,
	}
}

func (o AuditConfigArrayOutput) Index(i pulumi.IntInput) AuditConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfig {
		return vs[0].([]AuditConfig)[vs[1].(int)]
	}).(AuditConfigOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigResponse struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfigResponse `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service string `pulumi:"service"`
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutput() AuditConfigResponseOutput {
	return o
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutputWithContext(ctx context.Context) AuditConfigResponseOutput {
	return o
}

func (o AuditConfigResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AuditConfigResponse] {
	return pulumix.Output[AuditConfigResponse]{
		OutputState: o.OutputState,
	}
}

// The configuration for logging of each type of permission.
func (o AuditConfigResponseOutput) AuditLogConfigs() AuditLogConfigResponseArrayOutput {
	return o.ApplyT(func(v AuditConfigResponse) []AuditLogConfigResponse { return v.AuditLogConfigs }).(AuditLogConfigResponseArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v AuditConfigResponse) string { return v.Service }).(pulumi.StringOutput)
}

type AuditConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutput() AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutputWithContext(ctx context.Context) AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AuditConfigResponse] {
	return pulumix.Output[[]AuditConfigResponse]{
		OutputState: o.OutputState,
	}
}

func (o AuditConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfigResponse {
		return vs[0].([]AuditConfigResponse)[vs[1].(int)]
	}).(AuditConfigResponseOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfig struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType *AuditLogConfigLogType `pulumi:"logType"`
}

// AuditLogConfigInput is an input type that accepts AuditLogConfigArgs and AuditLogConfigOutput values.
// You can construct a concrete instance of `AuditLogConfigInput` via:
//
//	AuditLogConfigArgs{...}
type AuditLogConfigInput interface {
	pulumi.Input

	ToAuditLogConfigOutput() AuditLogConfigOutput
	ToAuditLogConfigOutputWithContext(context.Context) AuditLogConfigOutput
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigArgs struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers pulumi.StringArrayInput `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType AuditLogConfigLogTypePtrInput `pulumi:"logType"`
}

func (AuditLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return i.ToAuditLogConfigOutputWithContext(context.Background())
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigOutput)
}

func (i AuditLogConfigArgs) ToOutput(ctx context.Context) pulumix.Output[AuditLogConfig] {
	return pulumix.Output[AuditLogConfig]{
		OutputState: i.ToAuditLogConfigOutputWithContext(ctx).OutputState,
	}
}

// AuditLogConfigArrayInput is an input type that accepts AuditLogConfigArray and AuditLogConfigArrayOutput values.
// You can construct a concrete instance of `AuditLogConfigArrayInput` via:
//
//	AuditLogConfigArray{ AuditLogConfigArgs{...} }
type AuditLogConfigArrayInput interface {
	pulumi.Input

	ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput
	ToAuditLogConfigArrayOutputWithContext(context.Context) AuditLogConfigArrayOutput
}

type AuditLogConfigArray []AuditLogConfigInput

func (AuditLogConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return i.ToAuditLogConfigArrayOutputWithContext(context.Background())
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigArrayOutput)
}

func (i AuditLogConfigArray) ToOutput(ctx context.Context) pulumix.Output[[]AuditLogConfig] {
	return pulumix.Output[[]AuditLogConfig]{
		OutputState: i.ToAuditLogConfigArrayOutputWithContext(ctx).OutputState,
	}
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigOutput struct{ *pulumi.OutputState }

func (AuditLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return o
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return o
}

func (o AuditLogConfigOutput) ToOutput(ctx context.Context) pulumix.Output[AuditLogConfig] {
	return pulumix.Output[AuditLogConfig]{
		OutputState: o.OutputState,
	}
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfig) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigOutput) LogType() AuditLogConfigLogTypePtrOutput {
	return o.ApplyT(func(v AuditLogConfig) *AuditLogConfigLogType { return v.LogType }).(AuditLogConfigLogTypePtrOutput)
}

type AuditLogConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AuditLogConfig] {
	return pulumix.Output[[]AuditLogConfig]{
		OutputState: o.OutputState,
	}
}

func (o AuditLogConfigArrayOutput) Index(i pulumi.IntInput) AuditLogConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfig {
		return vs[0].([]AuditLogConfig)[vs[1].(int)]
	}).(AuditLogConfigOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponse struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType string `pulumi:"logType"`
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutput() AuditLogConfigResponseOutput {
	return o
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutputWithContext(ctx context.Context) AuditLogConfigResponseOutput {
	return o
}

func (o AuditLogConfigResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AuditLogConfigResponse] {
	return pulumix.Output[AuditLogConfigResponse]{
		OutputState: o.OutputState,
	}
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigResponseOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigResponseOutput) LogType() pulumi.StringOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) string { return v.LogType }).(pulumi.StringOutput)
}

type AuditLogConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutput() AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutputWithContext(ctx context.Context) AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AuditLogConfigResponse] {
	return pulumix.Output[[]AuditLogConfigResponse]{
		OutputState: o.OutputState,
	}
}

func (o AuditLogConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditLogConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfigResponse {
		return vs[0].([]AuditLogConfigResponse)[vs[1].(int)]
	}).(AuditLogConfigResponseOutput)
}

// Associates `members`, or principals, with a `role`.
type Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//	BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates `members`, or principals, with a `role`.
type BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

func (i BindingArgs) ToOutput(ctx context.Context) pulumix.Output[Binding] {
	return pulumix.Output[Binding]{
		OutputState: i.ToBindingOutputWithContext(ctx).OutputState,
	}
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//	BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

func (i BindingArray) ToOutput(ctx context.Context) pulumix.Output[[]Binding] {
	return pulumix.Output[[]Binding]{
		OutputState: i.ToBindingArrayOutputWithContext(ctx).OutputState,
	}
}

// Associates `members`, or principals, with a `role`.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

func (o BindingOutput) ToOutput(ctx context.Context) pulumix.Output[Binding] {
	return pulumix.Output[Binding]{
		OutputState: o.OutputState,
	}
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]Binding] {
	return pulumix.Output[[]Binding]{
		OutputState: o.OutputState,
	}
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingResponse struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprResponse `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role string `pulumi:"role"`
}

// Associates `members`, or principals, with a `role`.
type BindingResponseOutput struct{ *pulumi.OutputState }

func (BindingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingResponse)(nil)).Elem()
}

func (o BindingResponseOutput) ToBindingResponseOutput() BindingResponseOutput {
	return o
}

func (o BindingResponseOutput) ToBindingResponseOutputWithContext(ctx context.Context) BindingResponseOutput {
	return o
}

func (o BindingResponseOutput) ToOutput(ctx context.Context) pulumix.Output[BindingResponse] {
	return pulumix.Output[BindingResponse]{
		OutputState: o.OutputState,
	}
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingResponseOutput) Condition() ExprResponseOutput {
	return o.ApplyT(func(v BindingResponse) ExprResponse { return v.Condition }).(ExprResponseOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
func (o BindingResponseOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BindingResponse) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingResponseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v BindingResponse) string { return v.Role }).(pulumi.StringOutput)
}

type BindingResponseArrayOutput struct{ *pulumi.OutputState }

func (BindingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingResponse)(nil)).Elem()
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutput() BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutputWithContext(ctx context.Context) BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]BindingResponse] {
	return pulumix.Output[[]BindingResponse]{
		OutputState: o.OutputState,
	}
}

func (o BindingResponseArrayOutput) Index(i pulumi.IntInput) BindingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BindingResponse {
		return vs[0].([]BindingResponse)[vs[1].(int)]
	}).(BindingResponseOutput)
}

// Describes EventTrigger, used to request events be sent from another service.
type EventTrigger struct {
	// The type of event to observe. For example: `providers/cloud.storage/eventTypes/object.change` and `providers/cloud.pubsub/eventTypes/topic.publish`. Event types match pattern `providers/*/eventTypes/*.*`. The pattern contains: 1. namespace: For example, `cloud.storage` and `google.firebase.analytics`. 2. resource type: The type of resource on which event occurs. For example, the Google Cloud Storage API includes the type `object`. 3. action: The action that generates the event. For example, action for a Google Cloud Storage Object is 'change'. These parts are lower case.
	EventType string `pulumi:"eventType"`
	// Specifies policy for failed executions.
	FailurePolicy *FailurePolicy `pulumi:"failurePolicy"`
	// The resource(s) from which to observe events, for example, `projects/_/buckets/myBucket`. Not all syntactically correct values are accepted by all services. For example: 1. The authorization model must support it. Google Cloud Functions only allows EventTriggers to be deployed that observe resources in the same project as the `CloudFunction`. 2. The resource type must match the pattern expected for an `event_type`. For example, an `EventTrigger` that has an `event_type` of "google.pubsub.topic.publish" should have a resource that matches Google Cloud Pub/Sub topics. Additionally, some services may support short names when creating an `EventTrigger`. These will always be returned in the normalized "long" format. See each *service's* documentation for supported formats.
	Resource string `pulumi:"resource"`
	// The hostname of the service that should be observed. If no string is provided, the default service implementing the API will be used. For example, `storage.googleapis.com` is the default for all event types in the `google.storage` namespace.
	Service *string `pulumi:"service"`
}

// EventTriggerInput is an input type that accepts EventTriggerArgs and EventTriggerOutput values.
// You can construct a concrete instance of `EventTriggerInput` via:
//
//	EventTriggerArgs{...}
type EventTriggerInput interface {
	pulumi.Input

	ToEventTriggerOutput() EventTriggerOutput
	ToEventTriggerOutputWithContext(context.Context) EventTriggerOutput
}

// Describes EventTrigger, used to request events be sent from another service.
type EventTriggerArgs struct {
	// The type of event to observe. For example: `providers/cloud.storage/eventTypes/object.change` and `providers/cloud.pubsub/eventTypes/topic.publish`. Event types match pattern `providers/*/eventTypes/*.*`. The pattern contains: 1. namespace: For example, `cloud.storage` and `google.firebase.analytics`. 2. resource type: The type of resource on which event occurs. For example, the Google Cloud Storage API includes the type `object`. 3. action: The action that generates the event. For example, action for a Google Cloud Storage Object is 'change'. These parts are lower case.
	EventType pulumi.StringInput `pulumi:"eventType"`
	// Specifies policy for failed executions.
	FailurePolicy FailurePolicyPtrInput `pulumi:"failurePolicy"`
	// The resource(s) from which to observe events, for example, `projects/_/buckets/myBucket`. Not all syntactically correct values are accepted by all services. For example: 1. The authorization model must support it. Google Cloud Functions only allows EventTriggers to be deployed that observe resources in the same project as the `CloudFunction`. 2. The resource type must match the pattern expected for an `event_type`. For example, an `EventTrigger` that has an `event_type` of "google.pubsub.topic.publish" should have a resource that matches Google Cloud Pub/Sub topics. Additionally, some services may support short names when creating an `EventTrigger`. These will always be returned in the normalized "long" format. See each *service's* documentation for supported formats.
	Resource pulumi.StringInput `pulumi:"resource"`
	// The hostname of the service that should be observed. If no string is provided, the default service implementing the API will be used. For example, `storage.googleapis.com` is the default for all event types in the `google.storage` namespace.
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (EventTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTrigger)(nil)).Elem()
}

func (i EventTriggerArgs) ToEventTriggerOutput() EventTriggerOutput {
	return i.ToEventTriggerOutputWithContext(context.Background())
}

func (i EventTriggerArgs) ToEventTriggerOutputWithContext(ctx context.Context) EventTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTriggerOutput)
}

func (i EventTriggerArgs) ToOutput(ctx context.Context) pulumix.Output[EventTrigger] {
	return pulumix.Output[EventTrigger]{
		OutputState: i.ToEventTriggerOutputWithContext(ctx).OutputState,
	}
}

func (i EventTriggerArgs) ToEventTriggerPtrOutput() EventTriggerPtrOutput {
	return i.ToEventTriggerPtrOutputWithContext(context.Background())
}

func (i EventTriggerArgs) ToEventTriggerPtrOutputWithContext(ctx context.Context) EventTriggerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTriggerOutput).ToEventTriggerPtrOutputWithContext(ctx)
}

// EventTriggerPtrInput is an input type that accepts EventTriggerArgs, EventTriggerPtr and EventTriggerPtrOutput values.
// You can construct a concrete instance of `EventTriggerPtrInput` via:
//
//	        EventTriggerArgs{...}
//
//	or:
//
//	        nil
type EventTriggerPtrInput interface {
	pulumi.Input

	ToEventTriggerPtrOutput() EventTriggerPtrOutput
	ToEventTriggerPtrOutputWithContext(context.Context) EventTriggerPtrOutput
}

type eventTriggerPtrType EventTriggerArgs

func EventTriggerPtr(v *EventTriggerArgs) EventTriggerPtrInput {
	return (*eventTriggerPtrType)(v)
}

func (*eventTriggerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTrigger)(nil)).Elem()
}

func (i *eventTriggerPtrType) ToEventTriggerPtrOutput() EventTriggerPtrOutput {
	return i.ToEventTriggerPtrOutputWithContext(context.Background())
}

func (i *eventTriggerPtrType) ToEventTriggerPtrOutputWithContext(ctx context.Context) EventTriggerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTriggerPtrOutput)
}

func (i *eventTriggerPtrType) ToOutput(ctx context.Context) pulumix.Output[*EventTrigger] {
	return pulumix.Output[*EventTrigger]{
		OutputState: i.ToEventTriggerPtrOutputWithContext(ctx).OutputState,
	}
}

// Describes EventTrigger, used to request events be sent from another service.
type EventTriggerOutput struct{ *pulumi.OutputState }

func (EventTriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTrigger)(nil)).Elem()
}

func (o EventTriggerOutput) ToEventTriggerOutput() EventTriggerOutput {
	return o
}

func (o EventTriggerOutput) ToEventTriggerOutputWithContext(ctx context.Context) EventTriggerOutput {
	return o
}

func (o EventTriggerOutput) ToEventTriggerPtrOutput() EventTriggerPtrOutput {
	return o.ToEventTriggerPtrOutputWithContext(context.Background())
}

func (o EventTriggerOutput) ToEventTriggerPtrOutputWithContext(ctx context.Context) EventTriggerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventTrigger) *EventTrigger {
		return &v
	}).(EventTriggerPtrOutput)
}

func (o EventTriggerOutput) ToOutput(ctx context.Context) pulumix.Output[EventTrigger] {
	return pulumix.Output[EventTrigger]{
		OutputState: o.OutputState,
	}
}

// The type of event to observe. For example: `providers/cloud.storage/eventTypes/object.change` and `providers/cloud.pubsub/eventTypes/topic.publish`. Event types match pattern `providers/*/eventTypes/*.*`. The pattern contains: 1. namespace: For example, `cloud.storage` and `google.firebase.analytics`. 2. resource type: The type of resource on which event occurs. For example, the Google Cloud Storage API includes the type `object`. 3. action: The action that generates the event. For example, action for a Google Cloud Storage Object is 'change'. These parts are lower case.
func (o EventTriggerOutput) EventType() pulumi.StringOutput {
	return o.ApplyT(func(v EventTrigger) string { return v.EventType }).(pulumi.StringOutput)
}

// Specifies policy for failed executions.
func (o EventTriggerOutput) FailurePolicy() FailurePolicyPtrOutput {
	return o.ApplyT(func(v EventTrigger) *FailurePolicy { return v.FailurePolicy }).(FailurePolicyPtrOutput)
}

// The resource(s) from which to observe events, for example, `projects/_/buckets/myBucket`. Not all syntactically correct values are accepted by all services. For example: 1. The authorization model must support it. Google Cloud Functions only allows EventTriggers to be deployed that observe resources in the same project as the `CloudFunction`. 2. The resource type must match the pattern expected for an `event_type`. For example, an `EventTrigger` that has an `event_type` of "google.pubsub.topic.publish" should have a resource that matches Google Cloud Pub/Sub topics. Additionally, some services may support short names when creating an `EventTrigger`. These will always be returned in the normalized "long" format. See each *service's* documentation for supported formats.
func (o EventTriggerOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v EventTrigger) string { return v.Resource }).(pulumi.StringOutput)
}

// The hostname of the service that should be observed. If no string is provided, the default service implementing the API will be used. For example, `storage.googleapis.com` is the default for all event types in the `google.storage` namespace.
func (o EventTriggerOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventTrigger) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type EventTriggerPtrOutput struct{ *pulumi.OutputState }

func (EventTriggerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTrigger)(nil)).Elem()
}

func (o EventTriggerPtrOutput) ToEventTriggerPtrOutput() EventTriggerPtrOutput {
	return o
}

func (o EventTriggerPtrOutput) ToEventTriggerPtrOutputWithContext(ctx context.Context) EventTriggerPtrOutput {
	return o
}

func (o EventTriggerPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*EventTrigger] {
	return pulumix.Output[*EventTrigger]{
		OutputState: o.OutputState,
	}
}

func (o EventTriggerPtrOutput) Elem() EventTriggerOutput {
	return o.ApplyT(func(v *EventTrigger) EventTrigger {
		if v != nil {
			return *v
		}
		var ret EventTrigger
		return ret
	}).(EventTriggerOutput)
}

// The type of event to observe. For example: `providers/cloud.storage/eventTypes/object.change` and `providers/cloud.pubsub/eventTypes/topic.publish`. Event types match pattern `providers/*/eventTypes/*.*`. The pattern contains: 1. namespace: For example, `cloud.storage` and `google.firebase.analytics`. 2. resource type: The type of resource on which event occurs. For example, the Google Cloud Storage API includes the type `object`. 3. action: The action that generates the event. For example, action for a Google Cloud Storage Object is 'change'. These parts are lower case.
func (o EventTriggerPtrOutput) EventType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventTrigger) *string {
		if v == nil {
			return nil
		}
		return &v.EventType
	}).(pulumi.StringPtrOutput)
}

// Specifies policy for failed executions.
func (o EventTriggerPtrOutput) FailurePolicy() FailurePolicyPtrOutput {
	return o.ApplyT(func(v *EventTrigger) *FailurePolicy {
		if v == nil {
			return nil
		}
		return v.FailurePolicy
	}).(FailurePolicyPtrOutput)
}

// The resource(s) from which to observe events, for example, `projects/_/buckets/myBucket`. Not all syntactically correct values are accepted by all services. For example: 1. The authorization model must support it. Google Cloud Functions only allows EventTriggers to be deployed that observe resources in the same project as the `CloudFunction`. 2. The resource type must match the pattern expected for an `event_type`. For example, an `EventTrigger` that has an `event_type` of "google.pubsub.topic.publish" should have a resource that matches Google Cloud Pub/Sub topics. Additionally, some services may support short names when creating an `EventTrigger`. These will always be returned in the normalized "long" format. See each *service's* documentation for supported formats.
func (o EventTriggerPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventTrigger) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

// The hostname of the service that should be observed. If no string is provided, the default service implementing the API will be used. For example, `storage.googleapis.com` is the default for all event types in the `google.storage` namespace.
func (o EventTriggerPtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventTrigger) *string {
		if v == nil {
			return nil
		}
		return v.Service
	}).(pulumi.StringPtrOutput)
}

// Describes EventTrigger, used to request events be sent from another service.
type EventTriggerResponse struct {
	// The type of event to observe. For example: `providers/cloud.storage/eventTypes/object.change` and `providers/cloud.pubsub/eventTypes/topic.publish`. Event types match pattern `providers/*/eventTypes/*.*`. The pattern contains: 1. namespace: For example, `cloud.storage` and `google.firebase.analytics`. 2. resource type: The type of resource on which event occurs. For example, the Google Cloud Storage API includes the type `object`. 3. action: The action that generates the event. For example, action for a Google Cloud Storage Object is 'change'. These parts are lower case.
	EventType string `pulumi:"eventType"`
	// Specifies policy for failed executions.
	FailurePolicy FailurePolicyResponse `pulumi:"failurePolicy"`
	// The resource(s) from which to observe events, for example, `projects/_/buckets/myBucket`. Not all syntactically correct values are accepted by all services. For example: 1. The authorization model must support it. Google Cloud Functions only allows EventTriggers to be deployed that observe resources in the same project as the `CloudFunction`. 2. The resource type must match the pattern expected for an `event_type`. For example, an `EventTrigger` that has an `event_type` of "google.pubsub.topic.publish" should have a resource that matches Google Cloud Pub/Sub topics. Additionally, some services may support short names when creating an `EventTrigger`. These will always be returned in the normalized "long" format. See each *service's* documentation for supported formats.
	Resource string `pulumi:"resource"`
	// The hostname of the service that should be observed. If no string is provided, the default service implementing the API will be used. For example, `storage.googleapis.com` is the default for all event types in the `google.storage` namespace.
	Service string `pulumi:"service"`
}

// Describes EventTrigger, used to request events be sent from another service.
type EventTriggerResponseOutput struct{ *pulumi.OutputState }

func (EventTriggerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTriggerResponse)(nil)).Elem()
}

func (o EventTriggerResponseOutput) ToEventTriggerResponseOutput() EventTriggerResponseOutput {
	return o
}

func (o EventTriggerResponseOutput) ToEventTriggerResponseOutputWithContext(ctx context.Context) EventTriggerResponseOutput {
	return o
}

func (o EventTriggerResponseOutput) ToOutput(ctx context.Context) pulumix.Output[EventTriggerResponse] {
	return pulumix.Output[EventTriggerResponse]{
		OutputState: o.OutputState,
	}
}

// The type of event to observe. For example: `providers/cloud.storage/eventTypes/object.change` and `providers/cloud.pubsub/eventTypes/topic.publish`. Event types match pattern `providers/*/eventTypes/*.*`. The pattern contains: 1. namespace: For example, `cloud.storage` and `google.firebase.analytics`. 2. resource type: The type of resource on which event occurs. For example, the Google Cloud Storage API includes the type `object`. 3. action: The action that generates the event. For example, action for a Google Cloud Storage Object is 'change'. These parts are lower case.
func (o EventTriggerResponseOutput) EventType() pulumi.StringOutput {
	return o.ApplyT(func(v EventTriggerResponse) string { return v.EventType }).(pulumi.StringOutput)
}

// Specifies policy for failed executions.
func (o EventTriggerResponseOutput) FailurePolicy() FailurePolicyResponseOutput {
	return o.ApplyT(func(v EventTriggerResponse) FailurePolicyResponse { return v.FailurePolicy }).(FailurePolicyResponseOutput)
}

// The resource(s) from which to observe events, for example, `projects/_/buckets/myBucket`. Not all syntactically correct values are accepted by all services. For example: 1. The authorization model must support it. Google Cloud Functions only allows EventTriggers to be deployed that observe resources in the same project as the `CloudFunction`. 2. The resource type must match the pattern expected for an `event_type`. For example, an `EventTrigger` that has an `event_type` of "google.pubsub.topic.publish" should have a resource that matches Google Cloud Pub/Sub topics. Additionally, some services may support short names when creating an `EventTrigger`. These will always be returned in the normalized "long" format. See each *service's* documentation for supported formats.
func (o EventTriggerResponseOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v EventTriggerResponse) string { return v.Resource }).(pulumi.StringOutput)
}

// The hostname of the service that should be observed. If no string is provided, the default service implementing the API will be used. For example, `storage.googleapis.com` is the default for all event types in the `google.storage` namespace.
func (o EventTriggerResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v EventTriggerResponse) string { return v.Service }).(pulumi.StringOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//	ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToOutput(ctx context.Context) pulumix.Output[Expr] {
	return pulumix.Output[Expr]{
		OutputState: i.ToExprOutputWithContext(ctx).OutputState,
	}
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//	        ExprArgs{...}
//
//	or:
//
//	        nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

func (i *exprPtrType) ToOutput(ctx context.Context) pulumix.Output[*Expr] {
	return pulumix.Output[*Expr]{
		OutputState: i.ToExprPtrOutputWithContext(ctx).OutputState,
	}
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

func (o ExprOutput) ToOutput(ctx context.Context) pulumix.Output[Expr] {
	return pulumix.Output[Expr]{
		OutputState: o.OutputState,
	}
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*Expr] {
	return pulumix.Output[*Expr]{
		OutputState: o.OutputState,
	}
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr {
		if v != nil {
			return *v
		}
		var ret Expr
		return ret
	}).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponse struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title string `pulumi:"title"`
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseOutput struct{ *pulumi.OutputState }

func (ExprResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (o ExprResponseOutput) ToExprResponseOutput() ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ExprResponse] {
	return pulumix.Output[ExprResponse]{
		OutputState: o.OutputState,
	}
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Title }).(pulumi.StringOutput)
}

// Describes the policy in case of function's execution failure. If empty, then defaults to ignoring failures (i.e. not retrying them).
type FailurePolicy struct {
	// If specified, then the function will be retried in case of a failure.
	Retry *Retry `pulumi:"retry"`
}

// FailurePolicyInput is an input type that accepts FailurePolicyArgs and FailurePolicyOutput values.
// You can construct a concrete instance of `FailurePolicyInput` via:
//
//	FailurePolicyArgs{...}
type FailurePolicyInput interface {
	pulumi.Input

	ToFailurePolicyOutput() FailurePolicyOutput
	ToFailurePolicyOutputWithContext(context.Context) FailurePolicyOutput
}

// Describes the policy in case of function's execution failure. If empty, then defaults to ignoring failures (i.e. not retrying them).
type FailurePolicyArgs struct {
	// If specified, then the function will be retried in case of a failure.
	Retry RetryPtrInput `pulumi:"retry"`
}

func (FailurePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FailurePolicy)(nil)).Elem()
}

func (i FailurePolicyArgs) ToFailurePolicyOutput() FailurePolicyOutput {
	return i.ToFailurePolicyOutputWithContext(context.Background())
}

func (i FailurePolicyArgs) ToFailurePolicyOutputWithContext(ctx context.Context) FailurePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailurePolicyOutput)
}

func (i FailurePolicyArgs) ToOutput(ctx context.Context) pulumix.Output[FailurePolicy] {
	return pulumix.Output[FailurePolicy]{
		OutputState: i.ToFailurePolicyOutputWithContext(ctx).OutputState,
	}
}

func (i FailurePolicyArgs) ToFailurePolicyPtrOutput() FailurePolicyPtrOutput {
	return i.ToFailurePolicyPtrOutputWithContext(context.Background())
}

func (i FailurePolicyArgs) ToFailurePolicyPtrOutputWithContext(ctx context.Context) FailurePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailurePolicyOutput).ToFailurePolicyPtrOutputWithContext(ctx)
}

// FailurePolicyPtrInput is an input type that accepts FailurePolicyArgs, FailurePolicyPtr and FailurePolicyPtrOutput values.
// You can construct a concrete instance of `FailurePolicyPtrInput` via:
//
//	        FailurePolicyArgs{...}
//
//	or:
//
//	        nil
type FailurePolicyPtrInput interface {
	pulumi.Input

	ToFailurePolicyPtrOutput() FailurePolicyPtrOutput
	ToFailurePolicyPtrOutputWithContext(context.Context) FailurePolicyPtrOutput
}

type failurePolicyPtrType FailurePolicyArgs

func FailurePolicyPtr(v *FailurePolicyArgs) FailurePolicyPtrInput {
	return (*failurePolicyPtrType)(v)
}

func (*failurePolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FailurePolicy)(nil)).Elem()
}

func (i *failurePolicyPtrType) ToFailurePolicyPtrOutput() FailurePolicyPtrOutput {
	return i.ToFailurePolicyPtrOutputWithContext(context.Background())
}

func (i *failurePolicyPtrType) ToFailurePolicyPtrOutputWithContext(ctx context.Context) FailurePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailurePolicyPtrOutput)
}

func (i *failurePolicyPtrType) ToOutput(ctx context.Context) pulumix.Output[*FailurePolicy] {
	return pulumix.Output[*FailurePolicy]{
		OutputState: i.ToFailurePolicyPtrOutputWithContext(ctx).OutputState,
	}
}

// Describes the policy in case of function's execution failure. If empty, then defaults to ignoring failures (i.e. not retrying them).
type FailurePolicyOutput struct{ *pulumi.OutputState }

func (FailurePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FailurePolicy)(nil)).Elem()
}

func (o FailurePolicyOutput) ToFailurePolicyOutput() FailurePolicyOutput {
	return o
}

func (o FailurePolicyOutput) ToFailurePolicyOutputWithContext(ctx context.Context) FailurePolicyOutput {
	return o
}

func (o FailurePolicyOutput) ToFailurePolicyPtrOutput() FailurePolicyPtrOutput {
	return o.ToFailurePolicyPtrOutputWithContext(context.Background())
}

func (o FailurePolicyOutput) ToFailurePolicyPtrOutputWithContext(ctx context.Context) FailurePolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FailurePolicy) *FailurePolicy {
		return &v
	}).(FailurePolicyPtrOutput)
}

func (o FailurePolicyOutput) ToOutput(ctx context.Context) pulumix.Output[FailurePolicy] {
	return pulumix.Output[FailurePolicy]{
		OutputState: o.OutputState,
	}
}

// If specified, then the function will be retried in case of a failure.
func (o FailurePolicyOutput) Retry() RetryPtrOutput {
	return o.ApplyT(func(v FailurePolicy) *Retry { return v.Retry }).(RetryPtrOutput)
}

type FailurePolicyPtrOutput struct{ *pulumi.OutputState }

func (FailurePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FailurePolicy)(nil)).Elem()
}

func (o FailurePolicyPtrOutput) ToFailurePolicyPtrOutput() FailurePolicyPtrOutput {
	return o
}

func (o FailurePolicyPtrOutput) ToFailurePolicyPtrOutputWithContext(ctx context.Context) FailurePolicyPtrOutput {
	return o
}

func (o FailurePolicyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*FailurePolicy] {
	return pulumix.Output[*FailurePolicy]{
		OutputState: o.OutputState,
	}
}

func (o FailurePolicyPtrOutput) Elem() FailurePolicyOutput {
	return o.ApplyT(func(v *FailurePolicy) FailurePolicy {
		if v != nil {
			return *v
		}
		var ret FailurePolicy
		return ret
	}).(FailurePolicyOutput)
}

// If specified, then the function will be retried in case of a failure.
func (o FailurePolicyPtrOutput) Retry() RetryPtrOutput {
	return o.ApplyT(func(v *FailurePolicy) *Retry {
		if v == nil {
			return nil
		}
		return v.Retry
	}).(RetryPtrOutput)
}

// Describes the policy in case of function's execution failure. If empty, then defaults to ignoring failures (i.e. not retrying them).
type FailurePolicyResponse struct {
	// If specified, then the function will be retried in case of a failure.
	Retry RetryResponse `pulumi:"retry"`
}

// Describes the policy in case of function's execution failure. If empty, then defaults to ignoring failures (i.e. not retrying them).
type FailurePolicyResponseOutput struct{ *pulumi.OutputState }

func (FailurePolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FailurePolicyResponse)(nil)).Elem()
}

func (o FailurePolicyResponseOutput) ToFailurePolicyResponseOutput() FailurePolicyResponseOutput {
	return o
}

func (o FailurePolicyResponseOutput) ToFailurePolicyResponseOutputWithContext(ctx context.Context) FailurePolicyResponseOutput {
	return o
}

func (o FailurePolicyResponseOutput) ToOutput(ctx context.Context) pulumix.Output[FailurePolicyResponse] {
	return pulumix.Output[FailurePolicyResponse]{
		OutputState: o.OutputState,
	}
}

// If specified, then the function will be retried in case of a failure.
func (o FailurePolicyResponseOutput) Retry() RetryResponseOutput {
	return o.ApplyT(func(v FailurePolicyResponse) RetryResponse { return v.Retry }).(RetryResponseOutput)
}

// Describes HttpsTrigger, could be used to connect web hooks to function.
type HttpsTrigger struct {
	// The security level for the function.
	SecurityLevel *HttpsTriggerSecurityLevel `pulumi:"securityLevel"`
}

// HttpsTriggerInput is an input type that accepts HttpsTriggerArgs and HttpsTriggerOutput values.
// You can construct a concrete instance of `HttpsTriggerInput` via:
//
//	HttpsTriggerArgs{...}
type HttpsTriggerInput interface {
	pulumi.Input

	ToHttpsTriggerOutput() HttpsTriggerOutput
	ToHttpsTriggerOutputWithContext(context.Context) HttpsTriggerOutput
}

// Describes HttpsTrigger, could be used to connect web hooks to function.
type HttpsTriggerArgs struct {
	// The security level for the function.
	SecurityLevel HttpsTriggerSecurityLevelPtrInput `pulumi:"securityLevel"`
}

func (HttpsTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpsTrigger)(nil)).Elem()
}

func (i HttpsTriggerArgs) ToHttpsTriggerOutput() HttpsTriggerOutput {
	return i.ToHttpsTriggerOutputWithContext(context.Background())
}

func (i HttpsTriggerArgs) ToHttpsTriggerOutputWithContext(ctx context.Context) HttpsTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpsTriggerOutput)
}

func (i HttpsTriggerArgs) ToOutput(ctx context.Context) pulumix.Output[HttpsTrigger] {
	return pulumix.Output[HttpsTrigger]{
		OutputState: i.ToHttpsTriggerOutputWithContext(ctx).OutputState,
	}
}

func (i HttpsTriggerArgs) ToHttpsTriggerPtrOutput() HttpsTriggerPtrOutput {
	return i.ToHttpsTriggerPtrOutputWithContext(context.Background())
}

func (i HttpsTriggerArgs) ToHttpsTriggerPtrOutputWithContext(ctx context.Context) HttpsTriggerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpsTriggerOutput).ToHttpsTriggerPtrOutputWithContext(ctx)
}

// HttpsTriggerPtrInput is an input type that accepts HttpsTriggerArgs, HttpsTriggerPtr and HttpsTriggerPtrOutput values.
// You can construct a concrete instance of `HttpsTriggerPtrInput` via:
//
//	        HttpsTriggerArgs{...}
//
//	or:
//
//	        nil
type HttpsTriggerPtrInput interface {
	pulumi.Input

	ToHttpsTriggerPtrOutput() HttpsTriggerPtrOutput
	ToHttpsTriggerPtrOutputWithContext(context.Context) HttpsTriggerPtrOutput
}

type httpsTriggerPtrType HttpsTriggerArgs

func HttpsTriggerPtr(v *HttpsTriggerArgs) HttpsTriggerPtrInput {
	return (*httpsTriggerPtrType)(v)
}

func (*httpsTriggerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpsTrigger)(nil)).Elem()
}

func (i *httpsTriggerPtrType) ToHttpsTriggerPtrOutput() HttpsTriggerPtrOutput {
	return i.ToHttpsTriggerPtrOutputWithContext(context.Background())
}

func (i *httpsTriggerPtrType) ToHttpsTriggerPtrOutputWithContext(ctx context.Context) HttpsTriggerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpsTriggerPtrOutput)
}

func (i *httpsTriggerPtrType) ToOutput(ctx context.Context) pulumix.Output[*HttpsTrigger] {
	return pulumix.Output[*HttpsTrigger]{
		OutputState: i.ToHttpsTriggerPtrOutputWithContext(ctx).OutputState,
	}
}

// Describes HttpsTrigger, could be used to connect web hooks to function.
type HttpsTriggerOutput struct{ *pulumi.OutputState }

func (HttpsTriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpsTrigger)(nil)).Elem()
}

func (o HttpsTriggerOutput) ToHttpsTriggerOutput() HttpsTriggerOutput {
	return o
}

func (o HttpsTriggerOutput) ToHttpsTriggerOutputWithContext(ctx context.Context) HttpsTriggerOutput {
	return o
}

func (o HttpsTriggerOutput) ToHttpsTriggerPtrOutput() HttpsTriggerPtrOutput {
	return o.ToHttpsTriggerPtrOutputWithContext(context.Background())
}

func (o HttpsTriggerOutput) ToHttpsTriggerPtrOutputWithContext(ctx context.Context) HttpsTriggerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HttpsTrigger) *HttpsTrigger {
		return &v
	}).(HttpsTriggerPtrOutput)
}

func (o HttpsTriggerOutput) ToOutput(ctx context.Context) pulumix.Output[HttpsTrigger] {
	return pulumix.Output[HttpsTrigger]{
		OutputState: o.OutputState,
	}
}

// The security level for the function.
func (o HttpsTriggerOutput) SecurityLevel() HttpsTriggerSecurityLevelPtrOutput {
	return o.ApplyT(func(v HttpsTrigger) *HttpsTriggerSecurityLevel { return v.SecurityLevel }).(HttpsTriggerSecurityLevelPtrOutput)
}

type HttpsTriggerPtrOutput struct{ *pulumi.OutputState }

func (HttpsTriggerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpsTrigger)(nil)).Elem()
}

func (o HttpsTriggerPtrOutput) ToHttpsTriggerPtrOutput() HttpsTriggerPtrOutput {
	return o
}

func (o HttpsTriggerPtrOutput) ToHttpsTriggerPtrOutputWithContext(ctx context.Context) HttpsTriggerPtrOutput {
	return o
}

func (o HttpsTriggerPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*HttpsTrigger] {
	return pulumix.Output[*HttpsTrigger]{
		OutputState: o.OutputState,
	}
}

func (o HttpsTriggerPtrOutput) Elem() HttpsTriggerOutput {
	return o.ApplyT(func(v *HttpsTrigger) HttpsTrigger {
		if v != nil {
			return *v
		}
		var ret HttpsTrigger
		return ret
	}).(HttpsTriggerOutput)
}

// The security level for the function.
func (o HttpsTriggerPtrOutput) SecurityLevel() HttpsTriggerSecurityLevelPtrOutput {
	return o.ApplyT(func(v *HttpsTrigger) *HttpsTriggerSecurityLevel {
		if v == nil {
			return nil
		}
		return v.SecurityLevel
	}).(HttpsTriggerSecurityLevelPtrOutput)
}

// Describes HttpsTrigger, could be used to connect web hooks to function.
type HttpsTriggerResponse struct {
	// The security level for the function.
	SecurityLevel string `pulumi:"securityLevel"`
	// The deployed url for the function.
	Url string `pulumi:"url"`
}

// Describes HttpsTrigger, could be used to connect web hooks to function.
type HttpsTriggerResponseOutput struct{ *pulumi.OutputState }

func (HttpsTriggerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpsTriggerResponse)(nil)).Elem()
}

func (o HttpsTriggerResponseOutput) ToHttpsTriggerResponseOutput() HttpsTriggerResponseOutput {
	return o
}

func (o HttpsTriggerResponseOutput) ToHttpsTriggerResponseOutputWithContext(ctx context.Context) HttpsTriggerResponseOutput {
	return o
}

func (o HttpsTriggerResponseOutput) ToOutput(ctx context.Context) pulumix.Output[HttpsTriggerResponse] {
	return pulumix.Output[HttpsTriggerResponse]{
		OutputState: o.OutputState,
	}
}

// The security level for the function.
func (o HttpsTriggerResponseOutput) SecurityLevel() pulumi.StringOutput {
	return o.ApplyT(func(v HttpsTriggerResponse) string { return v.SecurityLevel }).(pulumi.StringOutput)
}

// The deployed url for the function.
func (o HttpsTriggerResponseOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v HttpsTriggerResponse) string { return v.Url }).(pulumi.StringOutput)
}

// Describes the retry policy in case of function's execution failure. A function execution will be retried on any failure. A failed execution will be retried up to 7 days with an exponential backoff (capped at 10 seconds). Retried execution is charged as any other execution.
type Retry struct {
}

// RetryInput is an input type that accepts RetryArgs and RetryOutput values.
// You can construct a concrete instance of `RetryInput` via:
//
//	RetryArgs{...}
type RetryInput interface {
	pulumi.Input

	ToRetryOutput() RetryOutput
	ToRetryOutputWithContext(context.Context) RetryOutput
}

// Describes the retry policy in case of function's execution failure. A function execution will be retried on any failure. A failed execution will be retried up to 7 days with an exponential backoff (capped at 10 seconds). Retried execution is charged as any other execution.
type RetryArgs struct {
}

func (RetryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Retry)(nil)).Elem()
}

func (i RetryArgs) ToRetryOutput() RetryOutput {
	return i.ToRetryOutputWithContext(context.Background())
}

func (i RetryArgs) ToRetryOutputWithContext(ctx context.Context) RetryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryOutput)
}

func (i RetryArgs) ToOutput(ctx context.Context) pulumix.Output[Retry] {
	return pulumix.Output[Retry]{
		OutputState: i.ToRetryOutputWithContext(ctx).OutputState,
	}
}

func (i RetryArgs) ToRetryPtrOutput() RetryPtrOutput {
	return i.ToRetryPtrOutputWithContext(context.Background())
}

func (i RetryArgs) ToRetryPtrOutputWithContext(ctx context.Context) RetryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryOutput).ToRetryPtrOutputWithContext(ctx)
}

// RetryPtrInput is an input type that accepts RetryArgs, RetryPtr and RetryPtrOutput values.
// You can construct a concrete instance of `RetryPtrInput` via:
//
//	        RetryArgs{...}
//
//	or:
//
//	        nil
type RetryPtrInput interface {
	pulumi.Input

	ToRetryPtrOutput() RetryPtrOutput
	ToRetryPtrOutputWithContext(context.Context) RetryPtrOutput
}

type retryPtrType RetryArgs

func RetryPtr(v *RetryArgs) RetryPtrInput {
	return (*retryPtrType)(v)
}

func (*retryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Retry)(nil)).Elem()
}

func (i *retryPtrType) ToRetryPtrOutput() RetryPtrOutput {
	return i.ToRetryPtrOutputWithContext(context.Background())
}

func (i *retryPtrType) ToRetryPtrOutputWithContext(ctx context.Context) RetryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryPtrOutput)
}

func (i *retryPtrType) ToOutput(ctx context.Context) pulumix.Output[*Retry] {
	return pulumix.Output[*Retry]{
		OutputState: i.ToRetryPtrOutputWithContext(ctx).OutputState,
	}
}

// Describes the retry policy in case of function's execution failure. A function execution will be retried on any failure. A failed execution will be retried up to 7 days with an exponential backoff (capped at 10 seconds). Retried execution is charged as any other execution.
type RetryOutput struct{ *pulumi.OutputState }

func (RetryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Retry)(nil)).Elem()
}

func (o RetryOutput) ToRetryOutput() RetryOutput {
	return o
}

func (o RetryOutput) ToRetryOutputWithContext(ctx context.Context) RetryOutput {
	return o
}

func (o RetryOutput) ToRetryPtrOutput() RetryPtrOutput {
	return o.ToRetryPtrOutputWithContext(context.Background())
}

func (o RetryOutput) ToRetryPtrOutputWithContext(ctx context.Context) RetryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Retry) *Retry {
		return &v
	}).(RetryPtrOutput)
}

func (o RetryOutput) ToOutput(ctx context.Context) pulumix.Output[Retry] {
	return pulumix.Output[Retry]{
		OutputState: o.OutputState,
	}
}

type RetryPtrOutput struct{ *pulumi.OutputState }

func (RetryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Retry)(nil)).Elem()
}

func (o RetryPtrOutput) ToRetryPtrOutput() RetryPtrOutput {
	return o
}

func (o RetryPtrOutput) ToRetryPtrOutputWithContext(ctx context.Context) RetryPtrOutput {
	return o
}

func (o RetryPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*Retry] {
	return pulumix.Output[*Retry]{
		OutputState: o.OutputState,
	}
}

func (o RetryPtrOutput) Elem() RetryOutput {
	return o.ApplyT(func(v *Retry) Retry {
		if v != nil {
			return *v
		}
		var ret Retry
		return ret
	}).(RetryOutput)
}

// Describes the retry policy in case of function's execution failure. A function execution will be retried on any failure. A failed execution will be retried up to 7 days with an exponential backoff (capped at 10 seconds). Retried execution is charged as any other execution.
type RetryResponse struct {
}

// Describes the retry policy in case of function's execution failure. A function execution will be retried on any failure. A failed execution will be retried up to 7 days with an exponential backoff (capped at 10 seconds). Retried execution is charged as any other execution.
type RetryResponseOutput struct{ *pulumi.OutputState }

func (RetryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RetryResponse)(nil)).Elem()
}

func (o RetryResponseOutput) ToRetryResponseOutput() RetryResponseOutput {
	return o
}

func (o RetryResponseOutput) ToRetryResponseOutputWithContext(ctx context.Context) RetryResponseOutput {
	return o
}

func (o RetryResponseOutput) ToOutput(ctx context.Context) pulumix.Output[RetryResponse] {
	return pulumix.Output[RetryResponse]{
		OutputState: o.OutputState,
	}
}

// Configuration for a secret environment variable. It has the information necessary to fetch the secret value from secret manager and expose it as an environment variable.
type SecretEnvVar struct {
	// Name of the environment variable.
	Key *string `pulumi:"key"`
	// Project identifier (preferrably project number but can also be the project ID) of the project that contains the secret. If not set, it will be populated with the function's project assuming that the secret exists in the same project as of the function.
	Project *string `pulumi:"project"`
	// Name of the secret in secret manager (not the full resource name).
	Secret *string `pulumi:"secret"`
	// Version of the secret (version number or the string 'latest'). It is recommended to use a numeric version for secret environment variables as any updates to the secret value is not reflected until new instances start.
	Version *string `pulumi:"version"`
}

// SecretEnvVarInput is an input type that accepts SecretEnvVarArgs and SecretEnvVarOutput values.
// You can construct a concrete instance of `SecretEnvVarInput` via:
//
//	SecretEnvVarArgs{...}
type SecretEnvVarInput interface {
	pulumi.Input

	ToSecretEnvVarOutput() SecretEnvVarOutput
	ToSecretEnvVarOutputWithContext(context.Context) SecretEnvVarOutput
}

// Configuration for a secret environment variable. It has the information necessary to fetch the secret value from secret manager and expose it as an environment variable.
type SecretEnvVarArgs struct {
	// Name of the environment variable.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Project identifier (preferrably project number but can also be the project ID) of the project that contains the secret. If not set, it will be populated with the function's project assuming that the secret exists in the same project as of the function.
	Project pulumi.StringPtrInput `pulumi:"project"`
	// Name of the secret in secret manager (not the full resource name).
	Secret pulumi.StringPtrInput `pulumi:"secret"`
	// Version of the secret (version number or the string 'latest'). It is recommended to use a numeric version for secret environment variables as any updates to the secret value is not reflected until new instances start.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (SecretEnvVarArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretEnvVar)(nil)).Elem()
}

func (i SecretEnvVarArgs) ToSecretEnvVarOutput() SecretEnvVarOutput {
	return i.ToSecretEnvVarOutputWithContext(context.Background())
}

func (i SecretEnvVarArgs) ToSecretEnvVarOutputWithContext(ctx context.Context) SecretEnvVarOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretEnvVarOutput)
}

func (i SecretEnvVarArgs) ToOutput(ctx context.Context) pulumix.Output[SecretEnvVar] {
	return pulumix.Output[SecretEnvVar]{
		OutputState: i.ToSecretEnvVarOutputWithContext(ctx).OutputState,
	}
}

// SecretEnvVarArrayInput is an input type that accepts SecretEnvVarArray and SecretEnvVarArrayOutput values.
// You can construct a concrete instance of `SecretEnvVarArrayInput` via:
//
//	SecretEnvVarArray{ SecretEnvVarArgs{...} }
type SecretEnvVarArrayInput interface {
	pulumi.Input

	ToSecretEnvVarArrayOutput() SecretEnvVarArrayOutput
	ToSecretEnvVarArrayOutputWithContext(context.Context) SecretEnvVarArrayOutput
}

type SecretEnvVarArray []SecretEnvVarInput

func (SecretEnvVarArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretEnvVar)(nil)).Elem()
}

func (i SecretEnvVarArray) ToSecretEnvVarArrayOutput() SecretEnvVarArrayOutput {
	return i.ToSecretEnvVarArrayOutputWithContext(context.Background())
}

func (i SecretEnvVarArray) ToSecretEnvVarArrayOutputWithContext(ctx context.Context) SecretEnvVarArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretEnvVarArrayOutput)
}

func (i SecretEnvVarArray) ToOutput(ctx context.Context) pulumix.Output[[]SecretEnvVar] {
	return pulumix.Output[[]SecretEnvVar]{
		OutputState: i.ToSecretEnvVarArrayOutputWithContext(ctx).OutputState,
	}
}

// Configuration for a secret environment variable. It has the information necessary to fetch the secret value from secret manager and expose it as an environment variable.
type SecretEnvVarOutput struct{ *pulumi.OutputState }

func (SecretEnvVarOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretEnvVar)(nil)).Elem()
}

func (o SecretEnvVarOutput) ToSecretEnvVarOutput() SecretEnvVarOutput {
	return o
}

func (o SecretEnvVarOutput) ToSecretEnvVarOutputWithContext(ctx context.Context) SecretEnvVarOutput {
	return o
}

func (o SecretEnvVarOutput) ToOutput(ctx context.Context) pulumix.Output[SecretEnvVar] {
	return pulumix.Output[SecretEnvVar]{
		OutputState: o.OutputState,
	}
}

// Name of the environment variable.
func (o SecretEnvVarOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretEnvVar) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Project identifier (preferrably project number but can also be the project ID) of the project that contains the secret. If not set, it will be populated with the function's project assuming that the secret exists in the same project as of the function.
func (o SecretEnvVarOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretEnvVar) *string { return v.Project }).(pulumi.StringPtrOutput)
}

// Name of the secret in secret manager (not the full resource name).
func (o SecretEnvVarOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretEnvVar) *string { return v.Secret }).(pulumi.StringPtrOutput)
}

// Version of the secret (version number or the string 'latest'). It is recommended to use a numeric version for secret environment variables as any updates to the secret value is not reflected until new instances start.
func (o SecretEnvVarOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretEnvVar) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type SecretEnvVarArrayOutput struct{ *pulumi.OutputState }

func (SecretEnvVarArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretEnvVar)(nil)).Elem()
}

func (o SecretEnvVarArrayOutput) ToSecretEnvVarArrayOutput() SecretEnvVarArrayOutput {
	return o
}

func (o SecretEnvVarArrayOutput) ToSecretEnvVarArrayOutputWithContext(ctx context.Context) SecretEnvVarArrayOutput {
	return o
}

func (o SecretEnvVarArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]SecretEnvVar] {
	return pulumix.Output[[]SecretEnvVar]{
		OutputState: o.OutputState,
	}
}

func (o SecretEnvVarArrayOutput) Index(i pulumi.IntInput) SecretEnvVarOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecretEnvVar {
		return vs[0].([]SecretEnvVar)[vs[1].(int)]
	}).(SecretEnvVarOutput)
}

// Configuration for a secret environment variable. It has the information necessary to fetch the secret value from secret manager and expose it as an environment variable.
type SecretEnvVarResponse struct {
	// Name of the environment variable.
	Key string `pulumi:"key"`
	// Project identifier (preferrably project number but can also be the project ID) of the project that contains the secret. If not set, it will be populated with the function's project assuming that the secret exists in the same project as of the function.
	Project string `pulumi:"project"`
	// Name of the secret in secret manager (not the full resource name).
	Secret string `pulumi:"secret"`
	// Version of the secret (version number or the string 'latest'). It is recommended to use a numeric version for secret environment variables as any updates to the secret value is not reflected until new instances start.
	Version string `pulumi:"version"`
}

// Configuration for a secret environment variable. It has the information necessary to fetch the secret value from secret manager and expose it as an environment variable.
type SecretEnvVarResponseOutput struct{ *pulumi.OutputState }

func (SecretEnvVarResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretEnvVarResponse)(nil)).Elem()
}

func (o SecretEnvVarResponseOutput) ToSecretEnvVarResponseOutput() SecretEnvVarResponseOutput {
	return o
}

func (o SecretEnvVarResponseOutput) ToSecretEnvVarResponseOutputWithContext(ctx context.Context) SecretEnvVarResponseOutput {
	return o
}

func (o SecretEnvVarResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SecretEnvVarResponse] {
	return pulumix.Output[SecretEnvVarResponse]{
		OutputState: o.OutputState,
	}
}

// Name of the environment variable.
func (o SecretEnvVarResponseOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v SecretEnvVarResponse) string { return v.Key }).(pulumi.StringOutput)
}

// Project identifier (preferrably project number but can also be the project ID) of the project that contains the secret. If not set, it will be populated with the function's project assuming that the secret exists in the same project as of the function.
func (o SecretEnvVarResponseOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v SecretEnvVarResponse) string { return v.Project }).(pulumi.StringOutput)
}

// Name of the secret in secret manager (not the full resource name).
func (o SecretEnvVarResponseOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v SecretEnvVarResponse) string { return v.Secret }).(pulumi.StringOutput)
}

// Version of the secret (version number or the string 'latest'). It is recommended to use a numeric version for secret environment variables as any updates to the secret value is not reflected until new instances start.
func (o SecretEnvVarResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v SecretEnvVarResponse) string { return v.Version }).(pulumi.StringOutput)
}

type SecretEnvVarResponseArrayOutput struct{ *pulumi.OutputState }

func (SecretEnvVarResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretEnvVarResponse)(nil)).Elem()
}

func (o SecretEnvVarResponseArrayOutput) ToSecretEnvVarResponseArrayOutput() SecretEnvVarResponseArrayOutput {
	return o
}

func (o SecretEnvVarResponseArrayOutput) ToSecretEnvVarResponseArrayOutputWithContext(ctx context.Context) SecretEnvVarResponseArrayOutput {
	return o
}

func (o SecretEnvVarResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]SecretEnvVarResponse] {
	return pulumix.Output[[]SecretEnvVarResponse]{
		OutputState: o.OutputState,
	}
}

func (o SecretEnvVarResponseArrayOutput) Index(i pulumi.IntInput) SecretEnvVarResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecretEnvVarResponse {
		return vs[0].([]SecretEnvVarResponse)[vs[1].(int)]
	}).(SecretEnvVarResponseOutput)
}

// Configuration for a single version.
type SecretVersion struct {
	// Relative path of the file under the mount path where the secret value for this version will be fetched and made available. For example, setting the mount_path as '/etc/secrets' and path as `/secret_foo` would mount the secret value file at `/etc/secrets/secret_foo`.
	Path *string `pulumi:"path"`
	// Version of the secret (version number or the string 'latest'). It is preferable to use `latest` version with secret volumes as secret value changes are reflected immediately.
	Version *string `pulumi:"version"`
}

// SecretVersionInput is an input type that accepts SecretVersionArgs and SecretVersionOutput values.
// You can construct a concrete instance of `SecretVersionInput` via:
//
//	SecretVersionArgs{...}
type SecretVersionInput interface {
	pulumi.Input

	ToSecretVersionOutput() SecretVersionOutput
	ToSecretVersionOutputWithContext(context.Context) SecretVersionOutput
}

// Configuration for a single version.
type SecretVersionArgs struct {
	// Relative path of the file under the mount path where the secret value for this version will be fetched and made available. For example, setting the mount_path as '/etc/secrets' and path as `/secret_foo` would mount the secret value file at `/etc/secrets/secret_foo`.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Version of the secret (version number or the string 'latest'). It is preferable to use `latest` version with secret volumes as secret value changes are reflected immediately.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (SecretVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretVersion)(nil)).Elem()
}

func (i SecretVersionArgs) ToSecretVersionOutput() SecretVersionOutput {
	return i.ToSecretVersionOutputWithContext(context.Background())
}

func (i SecretVersionArgs) ToSecretVersionOutputWithContext(ctx context.Context) SecretVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretVersionOutput)
}

func (i SecretVersionArgs) ToOutput(ctx context.Context) pulumix.Output[SecretVersion] {
	return pulumix.Output[SecretVersion]{
		OutputState: i.ToSecretVersionOutputWithContext(ctx).OutputState,
	}
}

// SecretVersionArrayInput is an input type that accepts SecretVersionArray and SecretVersionArrayOutput values.
// You can construct a concrete instance of `SecretVersionArrayInput` via:
//
//	SecretVersionArray{ SecretVersionArgs{...} }
type SecretVersionArrayInput interface {
	pulumi.Input

	ToSecretVersionArrayOutput() SecretVersionArrayOutput
	ToSecretVersionArrayOutputWithContext(context.Context) SecretVersionArrayOutput
}

type SecretVersionArray []SecretVersionInput

func (SecretVersionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretVersion)(nil)).Elem()
}

func (i SecretVersionArray) ToSecretVersionArrayOutput() SecretVersionArrayOutput {
	return i.ToSecretVersionArrayOutputWithContext(context.Background())
}

func (i SecretVersionArray) ToSecretVersionArrayOutputWithContext(ctx context.Context) SecretVersionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretVersionArrayOutput)
}

func (i SecretVersionArray) ToOutput(ctx context.Context) pulumix.Output[[]SecretVersion] {
	return pulumix.Output[[]SecretVersion]{
		OutputState: i.ToSecretVersionArrayOutputWithContext(ctx).OutputState,
	}
}

// Configuration for a single version.
type SecretVersionOutput struct{ *pulumi.OutputState }

func (SecretVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretVersion)(nil)).Elem()
}

func (o SecretVersionOutput) ToSecretVersionOutput() SecretVersionOutput {
	return o
}

func (o SecretVersionOutput) ToSecretVersionOutputWithContext(ctx context.Context) SecretVersionOutput {
	return o
}

func (o SecretVersionOutput) ToOutput(ctx context.Context) pulumix.Output[SecretVersion] {
	return pulumix.Output[SecretVersion]{
		OutputState: o.OutputState,
	}
}

// Relative path of the file under the mount path where the secret value for this version will be fetched and made available. For example, setting the mount_path as '/etc/secrets' and path as `/secret_foo` would mount the secret value file at `/etc/secrets/secret_foo`.
func (o SecretVersionOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretVersion) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Version of the secret (version number or the string 'latest'). It is preferable to use `latest` version with secret volumes as secret value changes are reflected immediately.
func (o SecretVersionOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretVersion) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type SecretVersionArrayOutput struct{ *pulumi.OutputState }

func (SecretVersionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretVersion)(nil)).Elem()
}

func (o SecretVersionArrayOutput) ToSecretVersionArrayOutput() SecretVersionArrayOutput {
	return o
}

func (o SecretVersionArrayOutput) ToSecretVersionArrayOutputWithContext(ctx context.Context) SecretVersionArrayOutput {
	return o
}

func (o SecretVersionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]SecretVersion] {
	return pulumix.Output[[]SecretVersion]{
		OutputState: o.OutputState,
	}
}

func (o SecretVersionArrayOutput) Index(i pulumi.IntInput) SecretVersionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecretVersion {
		return vs[0].([]SecretVersion)[vs[1].(int)]
	}).(SecretVersionOutput)
}

// Configuration for a single version.
type SecretVersionResponse struct {
	// Relative path of the file under the mount path where the secret value for this version will be fetched and made available. For example, setting the mount_path as '/etc/secrets' and path as `/secret_foo` would mount the secret value file at `/etc/secrets/secret_foo`.
	Path string `pulumi:"path"`
	// Version of the secret (version number or the string 'latest'). It is preferable to use `latest` version with secret volumes as secret value changes are reflected immediately.
	Version string `pulumi:"version"`
}

// Configuration for a single version.
type SecretVersionResponseOutput struct{ *pulumi.OutputState }

func (SecretVersionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretVersionResponse)(nil)).Elem()
}

func (o SecretVersionResponseOutput) ToSecretVersionResponseOutput() SecretVersionResponseOutput {
	return o
}

func (o SecretVersionResponseOutput) ToSecretVersionResponseOutputWithContext(ctx context.Context) SecretVersionResponseOutput {
	return o
}

func (o SecretVersionResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SecretVersionResponse] {
	return pulumix.Output[SecretVersionResponse]{
		OutputState: o.OutputState,
	}
}

// Relative path of the file under the mount path where the secret value for this version will be fetched and made available. For example, setting the mount_path as '/etc/secrets' and path as `/secret_foo` would mount the secret value file at `/etc/secrets/secret_foo`.
func (o SecretVersionResponseOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v SecretVersionResponse) string { return v.Path }).(pulumi.StringOutput)
}

// Version of the secret (version number or the string 'latest'). It is preferable to use `latest` version with secret volumes as secret value changes are reflected immediately.
func (o SecretVersionResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v SecretVersionResponse) string { return v.Version }).(pulumi.StringOutput)
}

type SecretVersionResponseArrayOutput struct{ *pulumi.OutputState }

func (SecretVersionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretVersionResponse)(nil)).Elem()
}

func (o SecretVersionResponseArrayOutput) ToSecretVersionResponseArrayOutput() SecretVersionResponseArrayOutput {
	return o
}

func (o SecretVersionResponseArrayOutput) ToSecretVersionResponseArrayOutputWithContext(ctx context.Context) SecretVersionResponseArrayOutput {
	return o
}

func (o SecretVersionResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]SecretVersionResponse] {
	return pulumix.Output[[]SecretVersionResponse]{
		OutputState: o.OutputState,
	}
}

func (o SecretVersionResponseArrayOutput) Index(i pulumi.IntInput) SecretVersionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecretVersionResponse {
		return vs[0].([]SecretVersionResponse)[vs[1].(int)]
	}).(SecretVersionResponseOutput)
}

// Configuration for a secret volume. It has the information necessary to fetch the secret value from secret manager and make it available as files mounted at the requested paths within the application container. Secret value is not a part of the configuration. Every filesystem read operation performs a lookup in secret manager to retrieve the secret value.
type SecretVolume struct {
	// The path within the container to mount the secret volume. For example, setting the mount_path as `/etc/secrets` would mount the secret value files under the `/etc/secrets` directory. This directory will also be completely shadowed and unavailable to mount any other secrets. Recommended mount paths: /etc/secrets Restricted mount paths: /cloudsql, /dev/log, /pod, /proc, /var/log
	MountPath *string `pulumi:"mountPath"`
	// Project identifier (preferrably project number but can also be the project ID) of the project that contains the secret. If not set, it will be populated with the function's project assuming that the secret exists in the same project as of the function.
	Project *string `pulumi:"project"`
	// Name of the secret in secret manager (not the full resource name).
	Secret *string `pulumi:"secret"`
	// List of secret versions to mount for this secret. If empty, the `latest` version of the secret will be made available in a file named after the secret under the mount point.
	Versions []SecretVersion `pulumi:"versions"`
}

// SecretVolumeInput is an input type that accepts SecretVolumeArgs and SecretVolumeOutput values.
// You can construct a concrete instance of `SecretVolumeInput` via:
//
//	SecretVolumeArgs{...}
type SecretVolumeInput interface {
	pulumi.Input

	ToSecretVolumeOutput() SecretVolumeOutput
	ToSecretVolumeOutputWithContext(context.Context) SecretVolumeOutput
}

// Configuration for a secret volume. It has the information necessary to fetch the secret value from secret manager and make it available as files mounted at the requested paths within the application container. Secret value is not a part of the configuration. Every filesystem read operation performs a lookup in secret manager to retrieve the secret value.
type SecretVolumeArgs struct {
	// The path within the container to mount the secret volume. For example, setting the mount_path as `/etc/secrets` would mount the secret value files under the `/etc/secrets` directory. This directory will also be completely shadowed and unavailable to mount any other secrets. Recommended mount paths: /etc/secrets Restricted mount paths: /cloudsql, /dev/log, /pod, /proc, /var/log
	MountPath pulumi.StringPtrInput `pulumi:"mountPath"`
	// Project identifier (preferrably project number but can also be the project ID) of the project that contains the secret. If not set, it will be populated with the function's project assuming that the secret exists in the same project as of the function.
	Project pulumi.StringPtrInput `pulumi:"project"`
	// Name of the secret in secret manager (not the full resource name).
	Secret pulumi.StringPtrInput `pulumi:"secret"`
	// List of secret versions to mount for this secret. If empty, the `latest` version of the secret will be made available in a file named after the secret under the mount point.
	Versions SecretVersionArrayInput `pulumi:"versions"`
}

func (SecretVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretVolume)(nil)).Elem()
}

func (i SecretVolumeArgs) ToSecretVolumeOutput() SecretVolumeOutput {
	return i.ToSecretVolumeOutputWithContext(context.Background())
}

func (i SecretVolumeArgs) ToSecretVolumeOutputWithContext(ctx context.Context) SecretVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretVolumeOutput)
}

func (i SecretVolumeArgs) ToOutput(ctx context.Context) pulumix.Output[SecretVolume] {
	return pulumix.Output[SecretVolume]{
		OutputState: i.ToSecretVolumeOutputWithContext(ctx).OutputState,
	}
}

// SecretVolumeArrayInput is an input type that accepts SecretVolumeArray and SecretVolumeArrayOutput values.
// You can construct a concrete instance of `SecretVolumeArrayInput` via:
//
//	SecretVolumeArray{ SecretVolumeArgs{...} }
type SecretVolumeArrayInput interface {
	pulumi.Input

	ToSecretVolumeArrayOutput() SecretVolumeArrayOutput
	ToSecretVolumeArrayOutputWithContext(context.Context) SecretVolumeArrayOutput
}

type SecretVolumeArray []SecretVolumeInput

func (SecretVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretVolume)(nil)).Elem()
}

func (i SecretVolumeArray) ToSecretVolumeArrayOutput() SecretVolumeArrayOutput {
	return i.ToSecretVolumeArrayOutputWithContext(context.Background())
}

func (i SecretVolumeArray) ToSecretVolumeArrayOutputWithContext(ctx context.Context) SecretVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretVolumeArrayOutput)
}

func (i SecretVolumeArray) ToOutput(ctx context.Context) pulumix.Output[[]SecretVolume] {
	return pulumix.Output[[]SecretVolume]{
		OutputState: i.ToSecretVolumeArrayOutputWithContext(ctx).OutputState,
	}
}

// Configuration for a secret volume. It has the information necessary to fetch the secret value from secret manager and make it available as files mounted at the requested paths within the application container. Secret value is not a part of the configuration. Every filesystem read operation performs a lookup in secret manager to retrieve the secret value.
type SecretVolumeOutput struct{ *pulumi.OutputState }

func (SecretVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretVolume)(nil)).Elem()
}

func (o SecretVolumeOutput) ToSecretVolumeOutput() SecretVolumeOutput {
	return o
}

func (o SecretVolumeOutput) ToSecretVolumeOutputWithContext(ctx context.Context) SecretVolumeOutput {
	return o
}

func (o SecretVolumeOutput) ToOutput(ctx context.Context) pulumix.Output[SecretVolume] {
	return pulumix.Output[SecretVolume]{
		OutputState: o.OutputState,
	}
}

// The path within the container to mount the secret volume. For example, setting the mount_path as `/etc/secrets` would mount the secret value files under the `/etc/secrets` directory. This directory will also be completely shadowed and unavailable to mount any other secrets. Recommended mount paths: /etc/secrets Restricted mount paths: /cloudsql, /dev/log, /pod, /proc, /var/log
func (o SecretVolumeOutput) MountPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretVolume) *string { return v.MountPath }).(pulumi.StringPtrOutput)
}

// Project identifier (preferrably project number but can also be the project ID) of the project that contains the secret. If not set, it will be populated with the function's project assuming that the secret exists in the same project as of the function.
func (o SecretVolumeOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretVolume) *string { return v.Project }).(pulumi.StringPtrOutput)
}

// Name of the secret in secret manager (not the full resource name).
func (o SecretVolumeOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretVolume) *string { return v.Secret }).(pulumi.StringPtrOutput)
}

// List of secret versions to mount for this secret. If empty, the `latest` version of the secret will be made available in a file named after the secret under the mount point.
func (o SecretVolumeOutput) Versions() SecretVersionArrayOutput {
	return o.ApplyT(func(v SecretVolume) []SecretVersion { return v.Versions }).(SecretVersionArrayOutput)
}

type SecretVolumeArrayOutput struct{ *pulumi.OutputState }

func (SecretVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretVolume)(nil)).Elem()
}

func (o SecretVolumeArrayOutput) ToSecretVolumeArrayOutput() SecretVolumeArrayOutput {
	return o
}

func (o SecretVolumeArrayOutput) ToSecretVolumeArrayOutputWithContext(ctx context.Context) SecretVolumeArrayOutput {
	return o
}

func (o SecretVolumeArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]SecretVolume] {
	return pulumix.Output[[]SecretVolume]{
		OutputState: o.OutputState,
	}
}

func (o SecretVolumeArrayOutput) Index(i pulumi.IntInput) SecretVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecretVolume {
		return vs[0].([]SecretVolume)[vs[1].(int)]
	}).(SecretVolumeOutput)
}

// Configuration for a secret volume. It has the information necessary to fetch the secret value from secret manager and make it available as files mounted at the requested paths within the application container. Secret value is not a part of the configuration. Every filesystem read operation performs a lookup in secret manager to retrieve the secret value.
type SecretVolumeResponse struct {
	// The path within the container to mount the secret volume. For example, setting the mount_path as `/etc/secrets` would mount the secret value files under the `/etc/secrets` directory. This directory will also be completely shadowed and unavailable to mount any other secrets. Recommended mount paths: /etc/secrets Restricted mount paths: /cloudsql, /dev/log, /pod, /proc, /var/log
	MountPath string `pulumi:"mountPath"`
	// Project identifier (preferrably project number but can also be the project ID) of the project that contains the secret. If not set, it will be populated with the function's project assuming that the secret exists in the same project as of the function.
	Project string `pulumi:"project"`
	// Name of the secret in secret manager (not the full resource name).
	Secret string `pulumi:"secret"`
	// List of secret versions to mount for this secret. If empty, the `latest` version of the secret will be made available in a file named after the secret under the mount point.
	Versions []SecretVersionResponse `pulumi:"versions"`
}

// Configuration for a secret volume. It has the information necessary to fetch the secret value from secret manager and make it available as files mounted at the requested paths within the application container. Secret value is not a part of the configuration. Every filesystem read operation performs a lookup in secret manager to retrieve the secret value.
type SecretVolumeResponseOutput struct{ *pulumi.OutputState }

func (SecretVolumeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretVolumeResponse)(nil)).Elem()
}

func (o SecretVolumeResponseOutput) ToSecretVolumeResponseOutput() SecretVolumeResponseOutput {
	return o
}

func (o SecretVolumeResponseOutput) ToSecretVolumeResponseOutputWithContext(ctx context.Context) SecretVolumeResponseOutput {
	return o
}

func (o SecretVolumeResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SecretVolumeResponse] {
	return pulumix.Output[SecretVolumeResponse]{
		OutputState: o.OutputState,
	}
}

// The path within the container to mount the secret volume. For example, setting the mount_path as `/etc/secrets` would mount the secret value files under the `/etc/secrets` directory. This directory will also be completely shadowed and unavailable to mount any other secrets. Recommended mount paths: /etc/secrets Restricted mount paths: /cloudsql, /dev/log, /pod, /proc, /var/log
func (o SecretVolumeResponseOutput) MountPath() pulumi.StringOutput {
	return o.ApplyT(func(v SecretVolumeResponse) string { return v.MountPath }).(pulumi.StringOutput)
}

// Project identifier (preferrably project number but can also be the project ID) of the project that contains the secret. If not set, it will be populated with the function's project assuming that the secret exists in the same project as of the function.
func (o SecretVolumeResponseOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v SecretVolumeResponse) string { return v.Project }).(pulumi.StringOutput)
}

// Name of the secret in secret manager (not the full resource name).
func (o SecretVolumeResponseOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v SecretVolumeResponse) string { return v.Secret }).(pulumi.StringOutput)
}

// List of secret versions to mount for this secret. If empty, the `latest` version of the secret will be made available in a file named after the secret under the mount point.
func (o SecretVolumeResponseOutput) Versions() SecretVersionResponseArrayOutput {
	return o.ApplyT(func(v SecretVolumeResponse) []SecretVersionResponse { return v.Versions }).(SecretVersionResponseArrayOutput)
}

type SecretVolumeResponseArrayOutput struct{ *pulumi.OutputState }

func (SecretVolumeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretVolumeResponse)(nil)).Elem()
}

func (o SecretVolumeResponseArrayOutput) ToSecretVolumeResponseArrayOutput() SecretVolumeResponseArrayOutput {
	return o
}

func (o SecretVolumeResponseArrayOutput) ToSecretVolumeResponseArrayOutputWithContext(ctx context.Context) SecretVolumeResponseArrayOutput {
	return o
}

func (o SecretVolumeResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]SecretVolumeResponse] {
	return pulumix.Output[[]SecretVolumeResponse]{
		OutputState: o.OutputState,
	}
}

func (o SecretVolumeResponseArrayOutput) Index(i pulumi.IntInput) SecretVolumeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecretVolumeResponse {
		return vs[0].([]SecretVolumeResponse)[vs[1].(int)]
	}).(SecretVolumeResponseOutput)
}

// Describes SourceRepository, used to represent parameters related to source repository where a function is hosted.
type SourceRepository struct {
	// The URL pointing to the hosted repository where the function is defined. There are supported Cloud Source Repository URLs in the following formats: To refer to a specific commit: `https://source.developers.google.com/projects/*/repos/*/revisions/*/paths/*` To refer to a moveable alias (branch): `https://source.developers.google.com/projects/*/repos/*/moveable-aliases/*/paths/*` In particular, to refer to HEAD use `master` moveable alias. To refer to a specific fixed alias (tag): `https://source.developers.google.com/projects/*/repos/*/fixed-aliases/*/paths/*` You may omit `paths/*` if you want to use the main directory.
	Url *string `pulumi:"url"`
}

// SourceRepositoryInput is an input type that accepts SourceRepositoryArgs and SourceRepositoryOutput values.
// You can construct a concrete instance of `SourceRepositoryInput` via:
//
//	SourceRepositoryArgs{...}
type SourceRepositoryInput interface {
	pulumi.Input

	ToSourceRepositoryOutput() SourceRepositoryOutput
	ToSourceRepositoryOutputWithContext(context.Context) SourceRepositoryOutput
}

// Describes SourceRepository, used to represent parameters related to source repository where a function is hosted.
type SourceRepositoryArgs struct {
	// The URL pointing to the hosted repository where the function is defined. There are supported Cloud Source Repository URLs in the following formats: To refer to a specific commit: `https://source.developers.google.com/projects/*/repos/*/revisions/*/paths/*` To refer to a moveable alias (branch): `https://source.developers.google.com/projects/*/repos/*/moveable-aliases/*/paths/*` In particular, to refer to HEAD use `master` moveable alias. To refer to a specific fixed alias (tag): `https://source.developers.google.com/projects/*/repos/*/fixed-aliases/*/paths/*` You may omit `paths/*` if you want to use the main directory.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (SourceRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceRepository)(nil)).Elem()
}

func (i SourceRepositoryArgs) ToSourceRepositoryOutput() SourceRepositoryOutput {
	return i.ToSourceRepositoryOutputWithContext(context.Background())
}

func (i SourceRepositoryArgs) ToSourceRepositoryOutputWithContext(ctx context.Context) SourceRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceRepositoryOutput)
}

func (i SourceRepositoryArgs) ToOutput(ctx context.Context) pulumix.Output[SourceRepository] {
	return pulumix.Output[SourceRepository]{
		OutputState: i.ToSourceRepositoryOutputWithContext(ctx).OutputState,
	}
}

func (i SourceRepositoryArgs) ToSourceRepositoryPtrOutput() SourceRepositoryPtrOutput {
	return i.ToSourceRepositoryPtrOutputWithContext(context.Background())
}

func (i SourceRepositoryArgs) ToSourceRepositoryPtrOutputWithContext(ctx context.Context) SourceRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceRepositoryOutput).ToSourceRepositoryPtrOutputWithContext(ctx)
}

// SourceRepositoryPtrInput is an input type that accepts SourceRepositoryArgs, SourceRepositoryPtr and SourceRepositoryPtrOutput values.
// You can construct a concrete instance of `SourceRepositoryPtrInput` via:
//
//	        SourceRepositoryArgs{...}
//
//	or:
//
//	        nil
type SourceRepositoryPtrInput interface {
	pulumi.Input

	ToSourceRepositoryPtrOutput() SourceRepositoryPtrOutput
	ToSourceRepositoryPtrOutputWithContext(context.Context) SourceRepositoryPtrOutput
}

type sourceRepositoryPtrType SourceRepositoryArgs

func SourceRepositoryPtr(v *SourceRepositoryArgs) SourceRepositoryPtrInput {
	return (*sourceRepositoryPtrType)(v)
}

func (*sourceRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceRepository)(nil)).Elem()
}

func (i *sourceRepositoryPtrType) ToSourceRepositoryPtrOutput() SourceRepositoryPtrOutput {
	return i.ToSourceRepositoryPtrOutputWithContext(context.Background())
}

func (i *sourceRepositoryPtrType) ToSourceRepositoryPtrOutputWithContext(ctx context.Context) SourceRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceRepositoryPtrOutput)
}

func (i *sourceRepositoryPtrType) ToOutput(ctx context.Context) pulumix.Output[*SourceRepository] {
	return pulumix.Output[*SourceRepository]{
		OutputState: i.ToSourceRepositoryPtrOutputWithContext(ctx).OutputState,
	}
}

// Describes SourceRepository, used to represent parameters related to source repository where a function is hosted.
type SourceRepositoryOutput struct{ *pulumi.OutputState }

func (SourceRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceRepository)(nil)).Elem()
}

func (o SourceRepositoryOutput) ToSourceRepositoryOutput() SourceRepositoryOutput {
	return o
}

func (o SourceRepositoryOutput) ToSourceRepositoryOutputWithContext(ctx context.Context) SourceRepositoryOutput {
	return o
}

func (o SourceRepositoryOutput) ToSourceRepositoryPtrOutput() SourceRepositoryPtrOutput {
	return o.ToSourceRepositoryPtrOutputWithContext(context.Background())
}

func (o SourceRepositoryOutput) ToSourceRepositoryPtrOutputWithContext(ctx context.Context) SourceRepositoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SourceRepository) *SourceRepository {
		return &v
	}).(SourceRepositoryPtrOutput)
}

func (o SourceRepositoryOutput) ToOutput(ctx context.Context) pulumix.Output[SourceRepository] {
	return pulumix.Output[SourceRepository]{
		OutputState: o.OutputState,
	}
}

// The URL pointing to the hosted repository where the function is defined. There are supported Cloud Source Repository URLs in the following formats: To refer to a specific commit: `https://source.developers.google.com/projects/*/repos/*/revisions/*/paths/*` To refer to a moveable alias (branch): `https://source.developers.google.com/projects/*/repos/*/moveable-aliases/*/paths/*` In particular, to refer to HEAD use `master` moveable alias. To refer to a specific fixed alias (tag): `https://source.developers.google.com/projects/*/repos/*/fixed-aliases/*/paths/*` You may omit `paths/*` if you want to use the main directory.
func (o SourceRepositoryOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceRepository) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type SourceRepositoryPtrOutput struct{ *pulumi.OutputState }

func (SourceRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceRepository)(nil)).Elem()
}

func (o SourceRepositoryPtrOutput) ToSourceRepositoryPtrOutput() SourceRepositoryPtrOutput {
	return o
}

func (o SourceRepositoryPtrOutput) ToSourceRepositoryPtrOutputWithContext(ctx context.Context) SourceRepositoryPtrOutput {
	return o
}

func (o SourceRepositoryPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SourceRepository] {
	return pulumix.Output[*SourceRepository]{
		OutputState: o.OutputState,
	}
}

func (o SourceRepositoryPtrOutput) Elem() SourceRepositoryOutput {
	return o.ApplyT(func(v *SourceRepository) SourceRepository {
		if v != nil {
			return *v
		}
		var ret SourceRepository
		return ret
	}).(SourceRepositoryOutput)
}

// The URL pointing to the hosted repository where the function is defined. There are supported Cloud Source Repository URLs in the following formats: To refer to a specific commit: `https://source.developers.google.com/projects/*/repos/*/revisions/*/paths/*` To refer to a moveable alias (branch): `https://source.developers.google.com/projects/*/repos/*/moveable-aliases/*/paths/*` In particular, to refer to HEAD use `master` moveable alias. To refer to a specific fixed alias (tag): `https://source.developers.google.com/projects/*/repos/*/fixed-aliases/*/paths/*` You may omit `paths/*` if you want to use the main directory.
func (o SourceRepositoryPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceRepository) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// Describes SourceRepository, used to represent parameters related to source repository where a function is hosted.
type SourceRepositoryResponse struct {
	// The URL pointing to the hosted repository where the function were defined at the time of deployment. It always points to a specific commit in the format described above.
	DeployedUrl string `pulumi:"deployedUrl"`
	// The URL pointing to the hosted repository where the function is defined. There are supported Cloud Source Repository URLs in the following formats: To refer to a specific commit: `https://source.developers.google.com/projects/*/repos/*/revisions/*/paths/*` To refer to a moveable alias (branch): `https://source.developers.google.com/projects/*/repos/*/moveable-aliases/*/paths/*` In particular, to refer to HEAD use `master` moveable alias. To refer to a specific fixed alias (tag): `https://source.developers.google.com/projects/*/repos/*/fixed-aliases/*/paths/*` You may omit `paths/*` if you want to use the main directory.
	Url string `pulumi:"url"`
}

// Describes SourceRepository, used to represent parameters related to source repository where a function is hosted.
type SourceRepositoryResponseOutput struct{ *pulumi.OutputState }

func (SourceRepositoryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceRepositoryResponse)(nil)).Elem()
}

func (o SourceRepositoryResponseOutput) ToSourceRepositoryResponseOutput() SourceRepositoryResponseOutput {
	return o
}

func (o SourceRepositoryResponseOutput) ToSourceRepositoryResponseOutputWithContext(ctx context.Context) SourceRepositoryResponseOutput {
	return o
}

func (o SourceRepositoryResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SourceRepositoryResponse] {
	return pulumix.Output[SourceRepositoryResponse]{
		OutputState: o.OutputState,
	}
}

// The URL pointing to the hosted repository where the function were defined at the time of deployment. It always points to a specific commit in the format described above.
func (o SourceRepositoryResponseOutput) DeployedUrl() pulumi.StringOutput {
	return o.ApplyT(func(v SourceRepositoryResponse) string { return v.DeployedUrl }).(pulumi.StringOutput)
}

// The URL pointing to the hosted repository where the function is defined. There are supported Cloud Source Repository URLs in the following formats: To refer to a specific commit: `https://source.developers.google.com/projects/*/repos/*/revisions/*/paths/*` To refer to a moveable alias (branch): `https://source.developers.google.com/projects/*/repos/*/moveable-aliases/*/paths/*` In particular, to refer to HEAD use `master` moveable alias. To refer to a specific fixed alias (tag): `https://source.developers.google.com/projects/*/repos/*/fixed-aliases/*/paths/*` You may omit `paths/*` if you want to use the main directory.
func (o SourceRepositoryResponseOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v SourceRepositoryResponse) string { return v.Url }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigInput)(nil)).Elem(), AuditConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigArrayInput)(nil)).Elem(), AuditConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigInput)(nil)).Elem(), AuditLogConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigArrayInput)(nil)).Elem(), AuditLogConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingInput)(nil)).Elem(), BindingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingArrayInput)(nil)).Elem(), BindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventTriggerInput)(nil)).Elem(), EventTriggerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventTriggerPtrInput)(nil)).Elem(), EventTriggerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprPtrInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FailurePolicyInput)(nil)).Elem(), FailurePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FailurePolicyPtrInput)(nil)).Elem(), FailurePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpsTriggerInput)(nil)).Elem(), HttpsTriggerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpsTriggerPtrInput)(nil)).Elem(), HttpsTriggerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RetryInput)(nil)).Elem(), RetryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RetryPtrInput)(nil)).Elem(), RetryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretEnvVarInput)(nil)).Elem(), SecretEnvVarArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretEnvVarArrayInput)(nil)).Elem(), SecretEnvVarArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretVersionInput)(nil)).Elem(), SecretVersionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretVersionArrayInput)(nil)).Elem(), SecretVersionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretVolumeInput)(nil)).Elem(), SecretVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretVolumeArrayInput)(nil)).Elem(), SecretVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceRepositoryInput)(nil)).Elem(), SourceRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceRepositoryPtrInput)(nil)).Elem(), SourceRepositoryArgs{})
	pulumi.RegisterOutputType(AuditConfigOutput{})
	pulumi.RegisterOutputType(AuditConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigOutput{})
	pulumi.RegisterOutputType(AuditLogConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(BindingResponseOutput{})
	pulumi.RegisterOutputType(BindingResponseArrayOutput{})
	pulumi.RegisterOutputType(EventTriggerOutput{})
	pulumi.RegisterOutputType(EventTriggerPtrOutput{})
	pulumi.RegisterOutputType(EventTriggerResponseOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(ExprResponseOutput{})
	pulumi.RegisterOutputType(FailurePolicyOutput{})
	pulumi.RegisterOutputType(FailurePolicyPtrOutput{})
	pulumi.RegisterOutputType(FailurePolicyResponseOutput{})
	pulumi.RegisterOutputType(HttpsTriggerOutput{})
	pulumi.RegisterOutputType(HttpsTriggerPtrOutput{})
	pulumi.RegisterOutputType(HttpsTriggerResponseOutput{})
	pulumi.RegisterOutputType(RetryOutput{})
	pulumi.RegisterOutputType(RetryPtrOutput{})
	pulumi.RegisterOutputType(RetryResponseOutput{})
	pulumi.RegisterOutputType(SecretEnvVarOutput{})
	pulumi.RegisterOutputType(SecretEnvVarArrayOutput{})
	pulumi.RegisterOutputType(SecretEnvVarResponseOutput{})
	pulumi.RegisterOutputType(SecretEnvVarResponseArrayOutput{})
	pulumi.RegisterOutputType(SecretVersionOutput{})
	pulumi.RegisterOutputType(SecretVersionArrayOutput{})
	pulumi.RegisterOutputType(SecretVersionResponseOutput{})
	pulumi.RegisterOutputType(SecretVersionResponseArrayOutput{})
	pulumi.RegisterOutputType(SecretVolumeOutput{})
	pulumi.RegisterOutputType(SecretVolumeArrayOutput{})
	pulumi.RegisterOutputType(SecretVolumeResponseOutput{})
	pulumi.RegisterOutputType(SecretVolumeResponseArrayOutput{})
	pulumi.RegisterOutputType(SourceRepositoryOutput{})
	pulumi.RegisterOutputType(SourceRepositoryPtrOutput{})
	pulumi.RegisterOutputType(SourceRepositoryResponseOutput{})
}
