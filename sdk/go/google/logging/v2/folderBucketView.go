// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a view over logs in a bucket. A bucket may contain a maximum of 50 views.
type FolderBucketView struct {
	pulumi.CustomResourceState

	// The creation timestamp of the view.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Describes this view.
	Description pulumi.StringOutput `pulumi:"description"`
	// Filter that restricts which log entries in a bucket are visible in this view. Filters are restricted to be a logical AND of ==/!= of any of the following: originating project/folder/organization/billing account. resource type log id Example: SOURCE("projects/myproject") AND resource.type = "gce_instance" AND LOG_ID("stdout")
	Filter pulumi.StringOutput `pulumi:"filter"`
	// The resource name of the view. For example "projects/my-project-id/locations/my-location/buckets/my-bucket-id/views/my-view
	Name pulumi.StringOutput `pulumi:"name"`
	// The last update timestamp of the view.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewFolderBucketView registers a new resource with the given unique name, arguments, and options.
func NewFolderBucketView(ctx *pulumi.Context,
	name string, args *FolderBucketViewArgs, opts ...pulumi.ResourceOption) (*FolderBucketView, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BucketId == nil {
		return nil, errors.New("invalid value for required argument 'BucketId'")
	}
	if args.FolderId == nil {
		return nil, errors.New("invalid value for required argument 'FolderId'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.ViewId == nil {
		return nil, errors.New("invalid value for required argument 'ViewId'")
	}
	var resource FolderBucketView
	err := ctx.RegisterResource("google-native:logging/v2:FolderBucketView", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFolderBucketView gets an existing FolderBucketView resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFolderBucketView(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FolderBucketViewState, opts ...pulumi.ResourceOption) (*FolderBucketView, error) {
	var resource FolderBucketView
	err := ctx.ReadResource("google-native:logging/v2:FolderBucketView", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FolderBucketView resources.
type folderBucketViewState struct {
	// The creation timestamp of the view.
	CreateTime *string `pulumi:"createTime"`
	// Describes this view.
	Description *string `pulumi:"description"`
	// Filter that restricts which log entries in a bucket are visible in this view. Filters are restricted to be a logical AND of ==/!= of any of the following: originating project/folder/organization/billing account. resource type log id Example: SOURCE("projects/myproject") AND resource.type = "gce_instance" AND LOG_ID("stdout")
	Filter *string `pulumi:"filter"`
	// The resource name of the view. For example "projects/my-project-id/locations/my-location/buckets/my-bucket-id/views/my-view
	Name *string `pulumi:"name"`
	// The last update timestamp of the view.
	UpdateTime *string `pulumi:"updateTime"`
}

type FolderBucketViewState struct {
	// The creation timestamp of the view.
	CreateTime pulumi.StringPtrInput
	// Describes this view.
	Description pulumi.StringPtrInput
	// Filter that restricts which log entries in a bucket are visible in this view. Filters are restricted to be a logical AND of ==/!= of any of the following: originating project/folder/organization/billing account. resource type log id Example: SOURCE("projects/myproject") AND resource.type = "gce_instance" AND LOG_ID("stdout")
	Filter pulumi.StringPtrInput
	// The resource name of the view. For example "projects/my-project-id/locations/my-location/buckets/my-bucket-id/views/my-view
	Name pulumi.StringPtrInput
	// The last update timestamp of the view.
	UpdateTime pulumi.StringPtrInput
}

func (FolderBucketViewState) ElementType() reflect.Type {
	return reflect.TypeOf((*folderBucketViewState)(nil)).Elem()
}

type folderBucketViewArgs struct {
	BucketId string `pulumi:"bucketId"`
	// Describes this view.
	Description *string `pulumi:"description"`
	// Filter that restricts which log entries in a bucket are visible in this view. Filters are restricted to be a logical AND of ==/!= of any of the following: originating project/folder/organization/billing account. resource type log id Example: SOURCE("projects/myproject") AND resource.type = "gce_instance" AND LOG_ID("stdout")
	Filter   *string `pulumi:"filter"`
	FolderId string  `pulumi:"folderId"`
	Location string  `pulumi:"location"`
	// The resource name of the view. For example "projects/my-project-id/locations/my-location/buckets/my-bucket-id/views/my-view
	Name   *string `pulumi:"name"`
	ViewId string  `pulumi:"viewId"`
}

// The set of arguments for constructing a FolderBucketView resource.
type FolderBucketViewArgs struct {
	BucketId pulumi.StringInput
	// Describes this view.
	Description pulumi.StringPtrInput
	// Filter that restricts which log entries in a bucket are visible in this view. Filters are restricted to be a logical AND of ==/!= of any of the following: originating project/folder/organization/billing account. resource type log id Example: SOURCE("projects/myproject") AND resource.type = "gce_instance" AND LOG_ID("stdout")
	Filter   pulumi.StringPtrInput
	FolderId pulumi.StringInput
	Location pulumi.StringInput
	// The resource name of the view. For example "projects/my-project-id/locations/my-location/buckets/my-bucket-id/views/my-view
	Name   pulumi.StringPtrInput
	ViewId pulumi.StringInput
}

func (FolderBucketViewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*folderBucketViewArgs)(nil)).Elem()
}

type FolderBucketViewInput interface {
	pulumi.Input

	ToFolderBucketViewOutput() FolderBucketViewOutput
	ToFolderBucketViewOutputWithContext(ctx context.Context) FolderBucketViewOutput
}

func (*FolderBucketView) ElementType() reflect.Type {
	return reflect.TypeOf((*FolderBucketView)(nil))
}

func (i *FolderBucketView) ToFolderBucketViewOutput() FolderBucketViewOutput {
	return i.ToFolderBucketViewOutputWithContext(context.Background())
}

func (i *FolderBucketView) ToFolderBucketViewOutputWithContext(ctx context.Context) FolderBucketViewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FolderBucketViewOutput)
}

type FolderBucketViewOutput struct {
	*pulumi.OutputState
}

func (FolderBucketViewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FolderBucketView)(nil))
}

func (o FolderBucketViewOutput) ToFolderBucketViewOutput() FolderBucketViewOutput {
	return o
}

func (o FolderBucketViewOutput) ToFolderBucketViewOutputWithContext(ctx context.Context) FolderBucketViewOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(FolderBucketViewOutput{})
}
