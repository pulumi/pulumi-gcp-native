// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a view over logs in a bucket. A bucket may contain a maximum of 50 views.
type OrganizationBucketView struct {
	pulumi.CustomResourceState

	// The creation timestamp of the view.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Describes this view.
	Description pulumi.StringOutput `pulumi:"description"`
	// Filter that restricts which log entries in a bucket are visible in this view. Filters are restricted to be a logical AND of ==/!= of any of the following: originating project/folder/organization/billing account. resource type log id Example: SOURCE("projects/myproject") AND resource.type = "gce_instance" AND LOG_ID("stdout")
	Filter pulumi.StringOutput `pulumi:"filter"`
	// The resource name of the view. For example "projects/my-project-id/locations/my-location/buckets/my-bucket-id/views/my-view
	Name pulumi.StringOutput `pulumi:"name"`
	// The last update timestamp of the view.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewOrganizationBucketView registers a new resource with the given unique name, arguments, and options.
func NewOrganizationBucketView(ctx *pulumi.Context,
	name string, args *OrganizationBucketViewArgs, opts ...pulumi.ResourceOption) (*OrganizationBucketView, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BucketsId == nil {
		return nil, errors.New("invalid value for required argument 'BucketsId'")
	}
	if args.LocationsId == nil {
		return nil, errors.New("invalid value for required argument 'LocationsId'")
	}
	if args.OrganizationsId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationsId'")
	}
	if args.ViewId == nil {
		return nil, errors.New("invalid value for required argument 'ViewId'")
	}
	if args.ViewsId == nil {
		return nil, errors.New("invalid value for required argument 'ViewsId'")
	}
	var resource OrganizationBucketView
	err := ctx.RegisterResource("google-native:logging/v2:OrganizationBucketView", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrganizationBucketView gets an existing OrganizationBucketView resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrganizationBucketView(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrganizationBucketViewState, opts ...pulumi.ResourceOption) (*OrganizationBucketView, error) {
	var resource OrganizationBucketView
	err := ctx.ReadResource("google-native:logging/v2:OrganizationBucketView", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OrganizationBucketView resources.
type organizationBucketViewState struct {
	// The creation timestamp of the view.
	CreateTime *string `pulumi:"createTime"`
	// Describes this view.
	Description *string `pulumi:"description"`
	// Filter that restricts which log entries in a bucket are visible in this view. Filters are restricted to be a logical AND of ==/!= of any of the following: originating project/folder/organization/billing account. resource type log id Example: SOURCE("projects/myproject") AND resource.type = "gce_instance" AND LOG_ID("stdout")
	Filter *string `pulumi:"filter"`
	// The resource name of the view. For example "projects/my-project-id/locations/my-location/buckets/my-bucket-id/views/my-view
	Name *string `pulumi:"name"`
	// The last update timestamp of the view.
	UpdateTime *string `pulumi:"updateTime"`
}

type OrganizationBucketViewState struct {
	// The creation timestamp of the view.
	CreateTime pulumi.StringPtrInput
	// Describes this view.
	Description pulumi.StringPtrInput
	// Filter that restricts which log entries in a bucket are visible in this view. Filters are restricted to be a logical AND of ==/!= of any of the following: originating project/folder/organization/billing account. resource type log id Example: SOURCE("projects/myproject") AND resource.type = "gce_instance" AND LOG_ID("stdout")
	Filter pulumi.StringPtrInput
	// The resource name of the view. For example "projects/my-project-id/locations/my-location/buckets/my-bucket-id/views/my-view
	Name pulumi.StringPtrInput
	// The last update timestamp of the view.
	UpdateTime pulumi.StringPtrInput
}

func (OrganizationBucketViewState) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationBucketViewState)(nil)).Elem()
}

type organizationBucketViewArgs struct {
	BucketsId string `pulumi:"bucketsId"`
	// Describes this view.
	Description *string `pulumi:"description"`
	// Filter that restricts which log entries in a bucket are visible in this view. Filters are restricted to be a logical AND of ==/!= of any of the following: originating project/folder/organization/billing account. resource type log id Example: SOURCE("projects/myproject") AND resource.type = "gce_instance" AND LOG_ID("stdout")
	Filter      *string `pulumi:"filter"`
	LocationsId string  `pulumi:"locationsId"`
	// The resource name of the view. For example "projects/my-project-id/locations/my-location/buckets/my-bucket-id/views/my-view
	Name            *string `pulumi:"name"`
	OrganizationsId string  `pulumi:"organizationsId"`
	ViewId          string  `pulumi:"viewId"`
	ViewsId         string  `pulumi:"viewsId"`
}

// The set of arguments for constructing a OrganizationBucketView resource.
type OrganizationBucketViewArgs struct {
	BucketsId pulumi.StringInput
	// Describes this view.
	Description pulumi.StringPtrInput
	// Filter that restricts which log entries in a bucket are visible in this view. Filters are restricted to be a logical AND of ==/!= of any of the following: originating project/folder/organization/billing account. resource type log id Example: SOURCE("projects/myproject") AND resource.type = "gce_instance" AND LOG_ID("stdout")
	Filter      pulumi.StringPtrInput
	LocationsId pulumi.StringInput
	// The resource name of the view. For example "projects/my-project-id/locations/my-location/buckets/my-bucket-id/views/my-view
	Name            pulumi.StringPtrInput
	OrganizationsId pulumi.StringInput
	ViewId          pulumi.StringInput
	ViewsId         pulumi.StringInput
}

func (OrganizationBucketViewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationBucketViewArgs)(nil)).Elem()
}

type OrganizationBucketViewInput interface {
	pulumi.Input

	ToOrganizationBucketViewOutput() OrganizationBucketViewOutput
	ToOrganizationBucketViewOutputWithContext(ctx context.Context) OrganizationBucketViewOutput
}

func (*OrganizationBucketView) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationBucketView)(nil))
}

func (i *OrganizationBucketView) ToOrganizationBucketViewOutput() OrganizationBucketViewOutput {
	return i.ToOrganizationBucketViewOutputWithContext(context.Background())
}

func (i *OrganizationBucketView) ToOrganizationBucketViewOutputWithContext(ctx context.Context) OrganizationBucketViewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationBucketViewOutput)
}

type OrganizationBucketViewOutput struct {
	*pulumi.OutputState
}

func (OrganizationBucketViewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationBucketView)(nil))
}

func (o OrganizationBucketViewOutput) ToOrganizationBucketViewOutput() OrganizationBucketViewOutput {
	return o
}

func (o OrganizationBucketViewOutput) ToOrganizationBucketViewOutputWithContext(ctx context.Context) OrganizationBucketViewOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(OrganizationBucketViewOutput{})
}
