// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Options that change functionality of a sink exporting data to BigQuery.
type BigQueryOptions struct {
	// Optional. Whether to use BigQuery's partition tables (https://cloud.google.com/bigquery/docs/partitioned-tables). By default, Cloud Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned tables the date suffix is no longer present and special query syntax (https://cloud.google.com/bigquery/docs/querying-partitioned-tables) has to be used instead. In both cases, tables are sharded based on UTC timezone.
	UsePartitionedTables *bool `pulumi:"usePartitionedTables"`
}

// BigQueryOptionsInput is an input type that accepts BigQueryOptionsArgs and BigQueryOptionsOutput values.
// You can construct a concrete instance of `BigQueryOptionsInput` via:
//
//          BigQueryOptionsArgs{...}
type BigQueryOptionsInput interface {
	pulumi.Input

	ToBigQueryOptionsOutput() BigQueryOptionsOutput
	ToBigQueryOptionsOutputWithContext(context.Context) BigQueryOptionsOutput
}

// Options that change functionality of a sink exporting data to BigQuery.
type BigQueryOptionsArgs struct {
	// Optional. Whether to use BigQuery's partition tables (https://cloud.google.com/bigquery/docs/partitioned-tables). By default, Cloud Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned tables the date suffix is no longer present and special query syntax (https://cloud.google.com/bigquery/docs/querying-partitioned-tables) has to be used instead. In both cases, tables are sharded based on UTC timezone.
	UsePartitionedTables pulumi.BoolPtrInput `pulumi:"usePartitionedTables"`
}

func (BigQueryOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BigQueryOptions)(nil)).Elem()
}

func (i BigQueryOptionsArgs) ToBigQueryOptionsOutput() BigQueryOptionsOutput {
	return i.ToBigQueryOptionsOutputWithContext(context.Background())
}

func (i BigQueryOptionsArgs) ToBigQueryOptionsOutputWithContext(ctx context.Context) BigQueryOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigQueryOptionsOutput)
}

func (i BigQueryOptionsArgs) ToBigQueryOptionsPtrOutput() BigQueryOptionsPtrOutput {
	return i.ToBigQueryOptionsPtrOutputWithContext(context.Background())
}

func (i BigQueryOptionsArgs) ToBigQueryOptionsPtrOutputWithContext(ctx context.Context) BigQueryOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigQueryOptionsOutput).ToBigQueryOptionsPtrOutputWithContext(ctx)
}

// BigQueryOptionsPtrInput is an input type that accepts BigQueryOptionsArgs, BigQueryOptionsPtr and BigQueryOptionsPtrOutput values.
// You can construct a concrete instance of `BigQueryOptionsPtrInput` via:
//
//          BigQueryOptionsArgs{...}
//
//  or:
//
//          nil
type BigQueryOptionsPtrInput interface {
	pulumi.Input

	ToBigQueryOptionsPtrOutput() BigQueryOptionsPtrOutput
	ToBigQueryOptionsPtrOutputWithContext(context.Context) BigQueryOptionsPtrOutput
}

type bigQueryOptionsPtrType BigQueryOptionsArgs

func BigQueryOptionsPtr(v *BigQueryOptionsArgs) BigQueryOptionsPtrInput {
	return (*bigQueryOptionsPtrType)(v)
}

func (*bigQueryOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BigQueryOptions)(nil)).Elem()
}

func (i *bigQueryOptionsPtrType) ToBigQueryOptionsPtrOutput() BigQueryOptionsPtrOutput {
	return i.ToBigQueryOptionsPtrOutputWithContext(context.Background())
}

func (i *bigQueryOptionsPtrType) ToBigQueryOptionsPtrOutputWithContext(ctx context.Context) BigQueryOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigQueryOptionsPtrOutput)
}

// Options that change functionality of a sink exporting data to BigQuery.
type BigQueryOptionsOutput struct{ *pulumi.OutputState }

func (BigQueryOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BigQueryOptions)(nil)).Elem()
}

func (o BigQueryOptionsOutput) ToBigQueryOptionsOutput() BigQueryOptionsOutput {
	return o
}

func (o BigQueryOptionsOutput) ToBigQueryOptionsOutputWithContext(ctx context.Context) BigQueryOptionsOutput {
	return o
}

func (o BigQueryOptionsOutput) ToBigQueryOptionsPtrOutput() BigQueryOptionsPtrOutput {
	return o.ToBigQueryOptionsPtrOutputWithContext(context.Background())
}

func (o BigQueryOptionsOutput) ToBigQueryOptionsPtrOutputWithContext(ctx context.Context) BigQueryOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BigQueryOptions) *BigQueryOptions {
		return &v
	}).(BigQueryOptionsPtrOutput)
}

// Optional. Whether to use BigQuery's partition tables (https://cloud.google.com/bigquery/docs/partitioned-tables). By default, Cloud Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned tables the date suffix is no longer present and special query syntax (https://cloud.google.com/bigquery/docs/querying-partitioned-tables) has to be used instead. In both cases, tables are sharded based on UTC timezone.
func (o BigQueryOptionsOutput) UsePartitionedTables() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BigQueryOptions) *bool { return v.UsePartitionedTables }).(pulumi.BoolPtrOutput)
}

type BigQueryOptionsPtrOutput struct{ *pulumi.OutputState }

func (BigQueryOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BigQueryOptions)(nil)).Elem()
}

func (o BigQueryOptionsPtrOutput) ToBigQueryOptionsPtrOutput() BigQueryOptionsPtrOutput {
	return o
}

func (o BigQueryOptionsPtrOutput) ToBigQueryOptionsPtrOutputWithContext(ctx context.Context) BigQueryOptionsPtrOutput {
	return o
}

func (o BigQueryOptionsPtrOutput) Elem() BigQueryOptionsOutput {
	return o.ApplyT(func(v *BigQueryOptions) BigQueryOptions {
		if v != nil {
			return *v
		}
		var ret BigQueryOptions
		return ret
	}).(BigQueryOptionsOutput)
}

// Optional. Whether to use BigQuery's partition tables (https://cloud.google.com/bigquery/docs/partitioned-tables). By default, Cloud Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned tables the date suffix is no longer present and special query syntax (https://cloud.google.com/bigquery/docs/querying-partitioned-tables) has to be used instead. In both cases, tables are sharded based on UTC timezone.
func (o BigQueryOptionsPtrOutput) UsePartitionedTables() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BigQueryOptions) *bool {
		if v == nil {
			return nil
		}
		return v.UsePartitionedTables
	}).(pulumi.BoolPtrOutput)
}

// Options that change functionality of a sink exporting data to BigQuery.
type BigQueryOptionsResponse struct {
	// Optional. Whether to use BigQuery's partition tables (https://cloud.google.com/bigquery/docs/partitioned-tables). By default, Cloud Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned tables the date suffix is no longer present and special query syntax (https://cloud.google.com/bigquery/docs/querying-partitioned-tables) has to be used instead. In both cases, tables are sharded based on UTC timezone.
	UsePartitionedTables bool `pulumi:"usePartitionedTables"`
	// True if new timestamp column based partitioning is in use, false if legacy ingestion-time partitioning is in use.All new sinks will have this field set true and will use timestamp column based partitioning. If use_partitioned_tables is false, this value has no meaning and will be false. Legacy sinks using partitioned tables will have this field set to false.
	UsesTimestampColumnPartitioning bool `pulumi:"usesTimestampColumnPartitioning"`
}

// Options that change functionality of a sink exporting data to BigQuery.
type BigQueryOptionsResponseOutput struct{ *pulumi.OutputState }

func (BigQueryOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BigQueryOptionsResponse)(nil)).Elem()
}

func (o BigQueryOptionsResponseOutput) ToBigQueryOptionsResponseOutput() BigQueryOptionsResponseOutput {
	return o
}

func (o BigQueryOptionsResponseOutput) ToBigQueryOptionsResponseOutputWithContext(ctx context.Context) BigQueryOptionsResponseOutput {
	return o
}

// Optional. Whether to use BigQuery's partition tables (https://cloud.google.com/bigquery/docs/partitioned-tables). By default, Cloud Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned tables the date suffix is no longer present and special query syntax (https://cloud.google.com/bigquery/docs/querying-partitioned-tables) has to be used instead. In both cases, tables are sharded based on UTC timezone.
func (o BigQueryOptionsResponseOutput) UsePartitionedTables() pulumi.BoolOutput {
	return o.ApplyT(func(v BigQueryOptionsResponse) bool { return v.UsePartitionedTables }).(pulumi.BoolOutput)
}

// True if new timestamp column based partitioning is in use, false if legacy ingestion-time partitioning is in use.All new sinks will have this field set true and will use timestamp column based partitioning. If use_partitioned_tables is false, this value has no meaning and will be false. Legacy sinks using partitioned tables will have this field set to false.
func (o BigQueryOptionsResponseOutput) UsesTimestampColumnPartitioning() pulumi.BoolOutput {
	return o.ApplyT(func(v BigQueryOptionsResponse) bool { return v.UsesTimestampColumnPartitioning }).(pulumi.BoolOutput)
}

// Specifies a set of log entries that are filtered out by a sink. If your Google Cloud resource receives a large volume of log entries, you can use exclusions to reduce your chargeable logs. Note that exclusions on organization-level and folder-level sinks don't apply to child resources. Note also that you cannot modify the _Required sink or exclude logs from it.
type LogExclusion struct {
	// Optional. A description of this exclusion.
	Description *string `pulumi:"description"`
	// Optional. If set to True, then this exclusion is disabled and it does not exclude any log entries. You can update an exclusion to change the value of this field.
	Disabled *bool `pulumi:"disabled"`
	// An advanced logs filter (https://cloud.google.com/logging/docs/view/advanced-queries) that matches the log entries to be excluded. By using the sample function (https://cloud.google.com/logging/docs/view/advanced-queries#sample), you can exclude less than 100% of the matching log entries.For example, the following query matches 99% of low-severity log entries from Google Cloud Storage buckets:resource.type=gcs_bucket severity<ERROR sample(insertId, 0.99)
	Filter string `pulumi:"filter"`
	// A client-assigned identifier, such as "load-balancer-exclusion". Identifiers are limited to 100 characters and can include only letters, digits, underscores, hyphens, and periods. First character has to be alphanumeric.
	Name string `pulumi:"name"`
}

// LogExclusionInput is an input type that accepts LogExclusionArgs and LogExclusionOutput values.
// You can construct a concrete instance of `LogExclusionInput` via:
//
//          LogExclusionArgs{...}
type LogExclusionInput interface {
	pulumi.Input

	ToLogExclusionOutput() LogExclusionOutput
	ToLogExclusionOutputWithContext(context.Context) LogExclusionOutput
}

// Specifies a set of log entries that are filtered out by a sink. If your Google Cloud resource receives a large volume of log entries, you can use exclusions to reduce your chargeable logs. Note that exclusions on organization-level and folder-level sinks don't apply to child resources. Note also that you cannot modify the _Required sink or exclude logs from it.
type LogExclusionArgs struct {
	// Optional. A description of this exclusion.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Optional. If set to True, then this exclusion is disabled and it does not exclude any log entries. You can update an exclusion to change the value of this field.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// An advanced logs filter (https://cloud.google.com/logging/docs/view/advanced-queries) that matches the log entries to be excluded. By using the sample function (https://cloud.google.com/logging/docs/view/advanced-queries#sample), you can exclude less than 100% of the matching log entries.For example, the following query matches 99% of low-severity log entries from Google Cloud Storage buckets:resource.type=gcs_bucket severity<ERROR sample(insertId, 0.99)
	Filter pulumi.StringInput `pulumi:"filter"`
	// A client-assigned identifier, such as "load-balancer-exclusion". Identifiers are limited to 100 characters and can include only letters, digits, underscores, hyphens, and periods. First character has to be alphanumeric.
	Name pulumi.StringInput `pulumi:"name"`
}

func (LogExclusionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogExclusion)(nil)).Elem()
}

func (i LogExclusionArgs) ToLogExclusionOutput() LogExclusionOutput {
	return i.ToLogExclusionOutputWithContext(context.Background())
}

func (i LogExclusionArgs) ToLogExclusionOutputWithContext(ctx context.Context) LogExclusionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogExclusionOutput)
}

// LogExclusionArrayInput is an input type that accepts LogExclusionArray and LogExclusionArrayOutput values.
// You can construct a concrete instance of `LogExclusionArrayInput` via:
//
//          LogExclusionArray{ LogExclusionArgs{...} }
type LogExclusionArrayInput interface {
	pulumi.Input

	ToLogExclusionArrayOutput() LogExclusionArrayOutput
	ToLogExclusionArrayOutputWithContext(context.Context) LogExclusionArrayOutput
}

type LogExclusionArray []LogExclusionInput

func (LogExclusionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogExclusion)(nil)).Elem()
}

func (i LogExclusionArray) ToLogExclusionArrayOutput() LogExclusionArrayOutput {
	return i.ToLogExclusionArrayOutputWithContext(context.Background())
}

func (i LogExclusionArray) ToLogExclusionArrayOutputWithContext(ctx context.Context) LogExclusionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogExclusionArrayOutput)
}

// Specifies a set of log entries that are filtered out by a sink. If your Google Cloud resource receives a large volume of log entries, you can use exclusions to reduce your chargeable logs. Note that exclusions on organization-level and folder-level sinks don't apply to child resources. Note also that you cannot modify the _Required sink or exclude logs from it.
type LogExclusionOutput struct{ *pulumi.OutputState }

func (LogExclusionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogExclusion)(nil)).Elem()
}

func (o LogExclusionOutput) ToLogExclusionOutput() LogExclusionOutput {
	return o
}

func (o LogExclusionOutput) ToLogExclusionOutputWithContext(ctx context.Context) LogExclusionOutput {
	return o
}

// Optional. A description of this exclusion.
func (o LogExclusionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogExclusion) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Optional. If set to True, then this exclusion is disabled and it does not exclude any log entries. You can update an exclusion to change the value of this field.
func (o LogExclusionOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LogExclusion) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// An advanced logs filter (https://cloud.google.com/logging/docs/view/advanced-queries) that matches the log entries to be excluded. By using the sample function (https://cloud.google.com/logging/docs/view/advanced-queries#sample), you can exclude less than 100% of the matching log entries.For example, the following query matches 99% of low-severity log entries from Google Cloud Storage buckets:resource.type=gcs_bucket severity<ERROR sample(insertId, 0.99)
func (o LogExclusionOutput) Filter() pulumi.StringOutput {
	return o.ApplyT(func(v LogExclusion) string { return v.Filter }).(pulumi.StringOutput)
}

// A client-assigned identifier, such as "load-balancer-exclusion". Identifiers are limited to 100 characters and can include only letters, digits, underscores, hyphens, and periods. First character has to be alphanumeric.
func (o LogExclusionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LogExclusion) string { return v.Name }).(pulumi.StringOutput)
}

type LogExclusionArrayOutput struct{ *pulumi.OutputState }

func (LogExclusionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogExclusion)(nil)).Elem()
}

func (o LogExclusionArrayOutput) ToLogExclusionArrayOutput() LogExclusionArrayOutput {
	return o
}

func (o LogExclusionArrayOutput) ToLogExclusionArrayOutputWithContext(ctx context.Context) LogExclusionArrayOutput {
	return o
}

func (o LogExclusionArrayOutput) Index(i pulumi.IntInput) LogExclusionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LogExclusion {
		return vs[0].([]LogExclusion)[vs[1].(int)]
	}).(LogExclusionOutput)
}

// Specifies a set of log entries that are filtered out by a sink. If your Google Cloud resource receives a large volume of log entries, you can use exclusions to reduce your chargeable logs. Note that exclusions on organization-level and folder-level sinks don't apply to child resources. Note also that you cannot modify the _Required sink or exclude logs from it.
type LogExclusionResponse struct {
	// The creation timestamp of the exclusion.This field may not be present for older exclusions.
	CreateTime string `pulumi:"createTime"`
	// Optional. A description of this exclusion.
	Description string `pulumi:"description"`
	// Optional. If set to True, then this exclusion is disabled and it does not exclude any log entries. You can update an exclusion to change the value of this field.
	Disabled bool `pulumi:"disabled"`
	// An advanced logs filter (https://cloud.google.com/logging/docs/view/advanced-queries) that matches the log entries to be excluded. By using the sample function (https://cloud.google.com/logging/docs/view/advanced-queries#sample), you can exclude less than 100% of the matching log entries.For example, the following query matches 99% of low-severity log entries from Google Cloud Storage buckets:resource.type=gcs_bucket severity<ERROR sample(insertId, 0.99)
	Filter string `pulumi:"filter"`
	// A client-assigned identifier, such as "load-balancer-exclusion". Identifiers are limited to 100 characters and can include only letters, digits, underscores, hyphens, and periods. First character has to be alphanumeric.
	Name string `pulumi:"name"`
	// The last update timestamp of the exclusion.This field may not be present for older exclusions.
	UpdateTime string `pulumi:"updateTime"`
}

// Specifies a set of log entries that are filtered out by a sink. If your Google Cloud resource receives a large volume of log entries, you can use exclusions to reduce your chargeable logs. Note that exclusions on organization-level and folder-level sinks don't apply to child resources. Note also that you cannot modify the _Required sink or exclude logs from it.
type LogExclusionResponseOutput struct{ *pulumi.OutputState }

func (LogExclusionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogExclusionResponse)(nil)).Elem()
}

func (o LogExclusionResponseOutput) ToLogExclusionResponseOutput() LogExclusionResponseOutput {
	return o
}

func (o LogExclusionResponseOutput) ToLogExclusionResponseOutputWithContext(ctx context.Context) LogExclusionResponseOutput {
	return o
}

// The creation timestamp of the exclusion.This field may not be present for older exclusions.
func (o LogExclusionResponseOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LogExclusionResponse) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Optional. A description of this exclusion.
func (o LogExclusionResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LogExclusionResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Optional. If set to True, then this exclusion is disabled and it does not exclude any log entries. You can update an exclusion to change the value of this field.
func (o LogExclusionResponseOutput) Disabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LogExclusionResponse) bool { return v.Disabled }).(pulumi.BoolOutput)
}

// An advanced logs filter (https://cloud.google.com/logging/docs/view/advanced-queries) that matches the log entries to be excluded. By using the sample function (https://cloud.google.com/logging/docs/view/advanced-queries#sample), you can exclude less than 100% of the matching log entries.For example, the following query matches 99% of low-severity log entries from Google Cloud Storage buckets:resource.type=gcs_bucket severity<ERROR sample(insertId, 0.99)
func (o LogExclusionResponseOutput) Filter() pulumi.StringOutput {
	return o.ApplyT(func(v LogExclusionResponse) string { return v.Filter }).(pulumi.StringOutput)
}

// A client-assigned identifier, such as "load-balancer-exclusion". Identifiers are limited to 100 characters and can include only letters, digits, underscores, hyphens, and periods. First character has to be alphanumeric.
func (o LogExclusionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LogExclusionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The last update timestamp of the exclusion.This field may not be present for older exclusions.
func (o LogExclusionResponseOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LogExclusionResponse) string { return v.UpdateTime }).(pulumi.StringOutput)
}

type LogExclusionResponseArrayOutput struct{ *pulumi.OutputState }

func (LogExclusionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogExclusionResponse)(nil)).Elem()
}

func (o LogExclusionResponseArrayOutput) ToLogExclusionResponseArrayOutput() LogExclusionResponseArrayOutput {
	return o
}

func (o LogExclusionResponseArrayOutput) ToLogExclusionResponseArrayOutputWithContext(ctx context.Context) LogExclusionResponseArrayOutput {
	return o
}

func (o LogExclusionResponseArrayOutput) Index(i pulumi.IntInput) LogExclusionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LogExclusionResponse {
		return vs[0].([]LogExclusionResponse)[vs[1].(int)]
	}).(LogExclusionResponseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BigQueryOptionsInput)(nil)).Elem(), BigQueryOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BigQueryOptionsPtrInput)(nil)).Elem(), BigQueryOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogExclusionInput)(nil)).Elem(), LogExclusionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogExclusionArrayInput)(nil)).Elem(), LogExclusionArray{})
	pulumi.RegisterOutputType(BigQueryOptionsOutput{})
	pulumi.RegisterOutputType(BigQueryOptionsPtrOutput{})
	pulumi.RegisterOutputType(BigQueryOptionsResponseOutput{})
	pulumi.RegisterOutputType(LogExclusionOutput{})
	pulumi.RegisterOutputType(LogExclusionArrayOutput{})
	pulumi.RegisterOutputType(LogExclusionResponseOutput{})
	pulumi.RegisterOutputType(LogExclusionResponseArrayOutput{})
}
