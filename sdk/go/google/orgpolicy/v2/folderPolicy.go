// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a policy. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the constraint does not exist. Returns a `google.rpc.Status` with `google.rpc.Code.ALREADY_EXISTS` if the policy already exists on the given Google Cloud resource.
// Auto-naming is currently not supported for this resource.
type FolderPolicy struct {
	pulumi.CustomResourceState

	// Deprecated.
	//
	// Deprecated: Deprecated.
	Alternate GoogleCloudOrgpolicyV2AlternatePolicySpecResponseOutput `pulumi:"alternate"`
	// Dry-run policy. Audit-only policy, can be used to monitor how the policy would have impacted the existing and future resources if it's enforced.
	DryRunSpec GoogleCloudOrgpolicyV2PolicySpecResponseOutput `pulumi:"dryRunSpec"`
	FolderId   pulumi.StringOutput                            `pulumi:"folderId"`
	// Immutable. The resource name of the policy. Must be one of the following forms, where `constraint_name` is the name of the constraint which this policy configures: * `projects/{project_number}/policies/{constraint_name}` * `folders/{folder_id}/policies/{constraint_name}` * `organizations/{organization_id}/policies/{constraint_name}` For example, `projects/123/policies/compute.disableSerialPortAccess`. Note: `projects/{project_id}/policies/{constraint_name}` is also an acceptable name for API requests, but responses will return the name using the equivalent project number.
	Name pulumi.StringOutput `pulumi:"name"`
	// Basic information about the Organization Policy.
	Spec GoogleCloudOrgpolicyV2PolicySpecResponseOutput `pulumi:"spec"`
}

// NewFolderPolicy registers a new resource with the given unique name, arguments, and options.
func NewFolderPolicy(ctx *pulumi.Context,
	name string, args *FolderPolicyArgs, opts ...pulumi.ResourceOption) (*FolderPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FolderId == nil {
		return nil, errors.New("invalid value for required argument 'FolderId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"folderId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FolderPolicy
	err := ctx.RegisterResource("google-native:orgpolicy/v2:FolderPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFolderPolicy gets an existing FolderPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFolderPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FolderPolicyState, opts ...pulumi.ResourceOption) (*FolderPolicy, error) {
	var resource FolderPolicy
	err := ctx.ReadResource("google-native:orgpolicy/v2:FolderPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FolderPolicy resources.
type folderPolicyState struct {
}

type FolderPolicyState struct {
}

func (FolderPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*folderPolicyState)(nil)).Elem()
}

type folderPolicyArgs struct {
	// Deprecated.
	//
	// Deprecated: Deprecated.
	Alternate *GoogleCloudOrgpolicyV2AlternatePolicySpec `pulumi:"alternate"`
	// Dry-run policy. Audit-only policy, can be used to monitor how the policy would have impacted the existing and future resources if it's enforced.
	DryRunSpec *GoogleCloudOrgpolicyV2PolicySpec `pulumi:"dryRunSpec"`
	FolderId   string                            `pulumi:"folderId"`
	// Immutable. The resource name of the policy. Must be one of the following forms, where `constraint_name` is the name of the constraint which this policy configures: * `projects/{project_number}/policies/{constraint_name}` * `folders/{folder_id}/policies/{constraint_name}` * `organizations/{organization_id}/policies/{constraint_name}` For example, `projects/123/policies/compute.disableSerialPortAccess`. Note: `projects/{project_id}/policies/{constraint_name}` is also an acceptable name for API requests, but responses will return the name using the equivalent project number.
	Name *string `pulumi:"name"`
	// Basic information about the Organization Policy.
	Spec *GoogleCloudOrgpolicyV2PolicySpec `pulumi:"spec"`
}

// The set of arguments for constructing a FolderPolicy resource.
type FolderPolicyArgs struct {
	// Deprecated.
	//
	// Deprecated: Deprecated.
	Alternate GoogleCloudOrgpolicyV2AlternatePolicySpecPtrInput
	// Dry-run policy. Audit-only policy, can be used to monitor how the policy would have impacted the existing and future resources if it's enforced.
	DryRunSpec GoogleCloudOrgpolicyV2PolicySpecPtrInput
	FolderId   pulumi.StringInput
	// Immutable. The resource name of the policy. Must be one of the following forms, where `constraint_name` is the name of the constraint which this policy configures: * `projects/{project_number}/policies/{constraint_name}` * `folders/{folder_id}/policies/{constraint_name}` * `organizations/{organization_id}/policies/{constraint_name}` For example, `projects/123/policies/compute.disableSerialPortAccess`. Note: `projects/{project_id}/policies/{constraint_name}` is also an acceptable name for API requests, but responses will return the name using the equivalent project number.
	Name pulumi.StringPtrInput
	// Basic information about the Organization Policy.
	Spec GoogleCloudOrgpolicyV2PolicySpecPtrInput
}

func (FolderPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*folderPolicyArgs)(nil)).Elem()
}

type FolderPolicyInput interface {
	pulumi.Input

	ToFolderPolicyOutput() FolderPolicyOutput
	ToFolderPolicyOutputWithContext(ctx context.Context) FolderPolicyOutput
}

func (*FolderPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**FolderPolicy)(nil)).Elem()
}

func (i *FolderPolicy) ToFolderPolicyOutput() FolderPolicyOutput {
	return i.ToFolderPolicyOutputWithContext(context.Background())
}

func (i *FolderPolicy) ToFolderPolicyOutputWithContext(ctx context.Context) FolderPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FolderPolicyOutput)
}

type FolderPolicyOutput struct{ *pulumi.OutputState }

func (FolderPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FolderPolicy)(nil)).Elem()
}

func (o FolderPolicyOutput) ToFolderPolicyOutput() FolderPolicyOutput {
	return o
}

func (o FolderPolicyOutput) ToFolderPolicyOutputWithContext(ctx context.Context) FolderPolicyOutput {
	return o
}

// Deprecated.
//
// Deprecated: Deprecated.
func (o FolderPolicyOutput) Alternate() GoogleCloudOrgpolicyV2AlternatePolicySpecResponseOutput {
	return o.ApplyT(func(v *FolderPolicy) GoogleCloudOrgpolicyV2AlternatePolicySpecResponseOutput { return v.Alternate }).(GoogleCloudOrgpolicyV2AlternatePolicySpecResponseOutput)
}

// Dry-run policy. Audit-only policy, can be used to monitor how the policy would have impacted the existing and future resources if it's enforced.
func (o FolderPolicyOutput) DryRunSpec() GoogleCloudOrgpolicyV2PolicySpecResponseOutput {
	return o.ApplyT(func(v *FolderPolicy) GoogleCloudOrgpolicyV2PolicySpecResponseOutput { return v.DryRunSpec }).(GoogleCloudOrgpolicyV2PolicySpecResponseOutput)
}

func (o FolderPolicyOutput) FolderId() pulumi.StringOutput {
	return o.ApplyT(func(v *FolderPolicy) pulumi.StringOutput { return v.FolderId }).(pulumi.StringOutput)
}

// Immutable. The resource name of the policy. Must be one of the following forms, where `constraint_name` is the name of the constraint which this policy configures: * `projects/{project_number}/policies/{constraint_name}` * `folders/{folder_id}/policies/{constraint_name}` * `organizations/{organization_id}/policies/{constraint_name}` For example, `projects/123/policies/compute.disableSerialPortAccess`. Note: `projects/{project_id}/policies/{constraint_name}` is also an acceptable name for API requests, but responses will return the name using the equivalent project number.
func (o FolderPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FolderPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Basic information about the Organization Policy.
func (o FolderPolicyOutput) Spec() GoogleCloudOrgpolicyV2PolicySpecResponseOutput {
	return o.ApplyT(func(v *FolderPolicy) GoogleCloudOrgpolicyV2PolicySpecResponseOutput { return v.Spec }).(GoogleCloudOrgpolicyV2PolicySpecResponseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FolderPolicyInput)(nil)).Elem(), &FolderPolicy{})
	pulumi.RegisterOutputType(FolderPolicyOutput{})
}
