// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Similar to PolicySpec but with an extra 'launch' field for launch reference. The PolicySpec here is specific for dry-run/darklaunch.
type GoogleCloudOrgpolicyV2AlternatePolicySpec struct {
	// Reference to the launch that will be used while audit logging and to control the launch. Should be set only in the alternate policy.
	Launch *string `pulumi:"launch"`
	// Specify `Constraint` for configurations of Cloud Platform resources.
	Spec *GoogleCloudOrgpolicyV2PolicySpec `pulumi:"spec"`
}

// GoogleCloudOrgpolicyV2AlternatePolicySpecInput is an input type that accepts GoogleCloudOrgpolicyV2AlternatePolicySpecArgs and GoogleCloudOrgpolicyV2AlternatePolicySpecOutput values.
// You can construct a concrete instance of `GoogleCloudOrgpolicyV2AlternatePolicySpecInput` via:
//
//          GoogleCloudOrgpolicyV2AlternatePolicySpecArgs{...}
type GoogleCloudOrgpolicyV2AlternatePolicySpecInput interface {
	pulumi.Input

	ToGoogleCloudOrgpolicyV2AlternatePolicySpecOutput() GoogleCloudOrgpolicyV2AlternatePolicySpecOutput
	ToGoogleCloudOrgpolicyV2AlternatePolicySpecOutputWithContext(context.Context) GoogleCloudOrgpolicyV2AlternatePolicySpecOutput
}

// Similar to PolicySpec but with an extra 'launch' field for launch reference. The PolicySpec here is specific for dry-run/darklaunch.
type GoogleCloudOrgpolicyV2AlternatePolicySpecArgs struct {
	// Reference to the launch that will be used while audit logging and to control the launch. Should be set only in the alternate policy.
	Launch pulumi.StringPtrInput `pulumi:"launch"`
	// Specify `Constraint` for configurations of Cloud Platform resources.
	Spec GoogleCloudOrgpolicyV2PolicySpecPtrInput `pulumi:"spec"`
}

func (GoogleCloudOrgpolicyV2AlternatePolicySpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudOrgpolicyV2AlternatePolicySpec)(nil)).Elem()
}

func (i GoogleCloudOrgpolicyV2AlternatePolicySpecArgs) ToGoogleCloudOrgpolicyV2AlternatePolicySpecOutput() GoogleCloudOrgpolicyV2AlternatePolicySpecOutput {
	return i.ToGoogleCloudOrgpolicyV2AlternatePolicySpecOutputWithContext(context.Background())
}

func (i GoogleCloudOrgpolicyV2AlternatePolicySpecArgs) ToGoogleCloudOrgpolicyV2AlternatePolicySpecOutputWithContext(ctx context.Context) GoogleCloudOrgpolicyV2AlternatePolicySpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudOrgpolicyV2AlternatePolicySpecOutput)
}

func (i GoogleCloudOrgpolicyV2AlternatePolicySpecArgs) ToGoogleCloudOrgpolicyV2AlternatePolicySpecPtrOutput() GoogleCloudOrgpolicyV2AlternatePolicySpecPtrOutput {
	return i.ToGoogleCloudOrgpolicyV2AlternatePolicySpecPtrOutputWithContext(context.Background())
}

func (i GoogleCloudOrgpolicyV2AlternatePolicySpecArgs) ToGoogleCloudOrgpolicyV2AlternatePolicySpecPtrOutputWithContext(ctx context.Context) GoogleCloudOrgpolicyV2AlternatePolicySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudOrgpolicyV2AlternatePolicySpecOutput).ToGoogleCloudOrgpolicyV2AlternatePolicySpecPtrOutputWithContext(ctx)
}

// GoogleCloudOrgpolicyV2AlternatePolicySpecPtrInput is an input type that accepts GoogleCloudOrgpolicyV2AlternatePolicySpecArgs, GoogleCloudOrgpolicyV2AlternatePolicySpecPtr and GoogleCloudOrgpolicyV2AlternatePolicySpecPtrOutput values.
// You can construct a concrete instance of `GoogleCloudOrgpolicyV2AlternatePolicySpecPtrInput` via:
//
//          GoogleCloudOrgpolicyV2AlternatePolicySpecArgs{...}
//
//  or:
//
//          nil
type GoogleCloudOrgpolicyV2AlternatePolicySpecPtrInput interface {
	pulumi.Input

	ToGoogleCloudOrgpolicyV2AlternatePolicySpecPtrOutput() GoogleCloudOrgpolicyV2AlternatePolicySpecPtrOutput
	ToGoogleCloudOrgpolicyV2AlternatePolicySpecPtrOutputWithContext(context.Context) GoogleCloudOrgpolicyV2AlternatePolicySpecPtrOutput
}

type googleCloudOrgpolicyV2AlternatePolicySpecPtrType GoogleCloudOrgpolicyV2AlternatePolicySpecArgs

func GoogleCloudOrgpolicyV2AlternatePolicySpecPtr(v *GoogleCloudOrgpolicyV2AlternatePolicySpecArgs) GoogleCloudOrgpolicyV2AlternatePolicySpecPtrInput {
	return (*googleCloudOrgpolicyV2AlternatePolicySpecPtrType)(v)
}

func (*googleCloudOrgpolicyV2AlternatePolicySpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudOrgpolicyV2AlternatePolicySpec)(nil)).Elem()
}

func (i *googleCloudOrgpolicyV2AlternatePolicySpecPtrType) ToGoogleCloudOrgpolicyV2AlternatePolicySpecPtrOutput() GoogleCloudOrgpolicyV2AlternatePolicySpecPtrOutput {
	return i.ToGoogleCloudOrgpolicyV2AlternatePolicySpecPtrOutputWithContext(context.Background())
}

func (i *googleCloudOrgpolicyV2AlternatePolicySpecPtrType) ToGoogleCloudOrgpolicyV2AlternatePolicySpecPtrOutputWithContext(ctx context.Context) GoogleCloudOrgpolicyV2AlternatePolicySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudOrgpolicyV2AlternatePolicySpecPtrOutput)
}

// Similar to PolicySpec but with an extra 'launch' field for launch reference. The PolicySpec here is specific for dry-run/darklaunch.
type GoogleCloudOrgpolicyV2AlternatePolicySpecOutput struct{ *pulumi.OutputState }

func (GoogleCloudOrgpolicyV2AlternatePolicySpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudOrgpolicyV2AlternatePolicySpec)(nil)).Elem()
}

func (o GoogleCloudOrgpolicyV2AlternatePolicySpecOutput) ToGoogleCloudOrgpolicyV2AlternatePolicySpecOutput() GoogleCloudOrgpolicyV2AlternatePolicySpecOutput {
	return o
}

func (o GoogleCloudOrgpolicyV2AlternatePolicySpecOutput) ToGoogleCloudOrgpolicyV2AlternatePolicySpecOutputWithContext(ctx context.Context) GoogleCloudOrgpolicyV2AlternatePolicySpecOutput {
	return o
}

func (o GoogleCloudOrgpolicyV2AlternatePolicySpecOutput) ToGoogleCloudOrgpolicyV2AlternatePolicySpecPtrOutput() GoogleCloudOrgpolicyV2AlternatePolicySpecPtrOutput {
	return o.ToGoogleCloudOrgpolicyV2AlternatePolicySpecPtrOutputWithContext(context.Background())
}

func (o GoogleCloudOrgpolicyV2AlternatePolicySpecOutput) ToGoogleCloudOrgpolicyV2AlternatePolicySpecPtrOutputWithContext(ctx context.Context) GoogleCloudOrgpolicyV2AlternatePolicySpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleCloudOrgpolicyV2AlternatePolicySpec) *GoogleCloudOrgpolicyV2AlternatePolicySpec {
		return &v
	}).(GoogleCloudOrgpolicyV2AlternatePolicySpecPtrOutput)
}

// Reference to the launch that will be used while audit logging and to control the launch. Should be set only in the alternate policy.
func (o GoogleCloudOrgpolicyV2AlternatePolicySpecOutput) Launch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudOrgpolicyV2AlternatePolicySpec) *string { return v.Launch }).(pulumi.StringPtrOutput)
}

// Specify `Constraint` for configurations of Cloud Platform resources.
func (o GoogleCloudOrgpolicyV2AlternatePolicySpecOutput) Spec() GoogleCloudOrgpolicyV2PolicySpecPtrOutput {
	return o.ApplyT(func(v GoogleCloudOrgpolicyV2AlternatePolicySpec) *GoogleCloudOrgpolicyV2PolicySpec { return v.Spec }).(GoogleCloudOrgpolicyV2PolicySpecPtrOutput)
}

type GoogleCloudOrgpolicyV2AlternatePolicySpecPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudOrgpolicyV2AlternatePolicySpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudOrgpolicyV2AlternatePolicySpec)(nil)).Elem()
}

func (o GoogleCloudOrgpolicyV2AlternatePolicySpecPtrOutput) ToGoogleCloudOrgpolicyV2AlternatePolicySpecPtrOutput() GoogleCloudOrgpolicyV2AlternatePolicySpecPtrOutput {
	return o
}

func (o GoogleCloudOrgpolicyV2AlternatePolicySpecPtrOutput) ToGoogleCloudOrgpolicyV2AlternatePolicySpecPtrOutputWithContext(ctx context.Context) GoogleCloudOrgpolicyV2AlternatePolicySpecPtrOutput {
	return o
}

func (o GoogleCloudOrgpolicyV2AlternatePolicySpecPtrOutput) Elem() GoogleCloudOrgpolicyV2AlternatePolicySpecOutput {
	return o.ApplyT(func(v *GoogleCloudOrgpolicyV2AlternatePolicySpec) GoogleCloudOrgpolicyV2AlternatePolicySpec {
		if v != nil {
			return *v
		}
		var ret GoogleCloudOrgpolicyV2AlternatePolicySpec
		return ret
	}).(GoogleCloudOrgpolicyV2AlternatePolicySpecOutput)
}

// Reference to the launch that will be used while audit logging and to control the launch. Should be set only in the alternate policy.
func (o GoogleCloudOrgpolicyV2AlternatePolicySpecPtrOutput) Launch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleCloudOrgpolicyV2AlternatePolicySpec) *string {
		if v == nil {
			return nil
		}
		return v.Launch
	}).(pulumi.StringPtrOutput)
}

// Specify `Constraint` for configurations of Cloud Platform resources.
func (o GoogleCloudOrgpolicyV2AlternatePolicySpecPtrOutput) Spec() GoogleCloudOrgpolicyV2PolicySpecPtrOutput {
	return o.ApplyT(func(v *GoogleCloudOrgpolicyV2AlternatePolicySpec) *GoogleCloudOrgpolicyV2PolicySpec {
		if v == nil {
			return nil
		}
		return v.Spec
	}).(GoogleCloudOrgpolicyV2PolicySpecPtrOutput)
}

// Similar to PolicySpec but with an extra 'launch' field for launch reference. The PolicySpec here is specific for dry-run/darklaunch.
type GoogleCloudOrgpolicyV2AlternatePolicySpecResponse struct {
	// Reference to the launch that will be used while audit logging and to control the launch. Should be set only in the alternate policy.
	Launch string `pulumi:"launch"`
	// Specify `Constraint` for configurations of Cloud Platform resources.
	Spec GoogleCloudOrgpolicyV2PolicySpecResponse `pulumi:"spec"`
}

// Similar to PolicySpec but with an extra 'launch' field for launch reference. The PolicySpec here is specific for dry-run/darklaunch.
type GoogleCloudOrgpolicyV2AlternatePolicySpecResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudOrgpolicyV2AlternatePolicySpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudOrgpolicyV2AlternatePolicySpecResponse)(nil)).Elem()
}

func (o GoogleCloudOrgpolicyV2AlternatePolicySpecResponseOutput) ToGoogleCloudOrgpolicyV2AlternatePolicySpecResponseOutput() GoogleCloudOrgpolicyV2AlternatePolicySpecResponseOutput {
	return o
}

func (o GoogleCloudOrgpolicyV2AlternatePolicySpecResponseOutput) ToGoogleCloudOrgpolicyV2AlternatePolicySpecResponseOutputWithContext(ctx context.Context) GoogleCloudOrgpolicyV2AlternatePolicySpecResponseOutput {
	return o
}

// Reference to the launch that will be used while audit logging and to control the launch. Should be set only in the alternate policy.
func (o GoogleCloudOrgpolicyV2AlternatePolicySpecResponseOutput) Launch() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudOrgpolicyV2AlternatePolicySpecResponse) string { return v.Launch }).(pulumi.StringOutput)
}

// Specify `Constraint` for configurations of Cloud Platform resources.
func (o GoogleCloudOrgpolicyV2AlternatePolicySpecResponseOutput) Spec() GoogleCloudOrgpolicyV2PolicySpecResponseOutput {
	return o.ApplyT(func(v GoogleCloudOrgpolicyV2AlternatePolicySpecResponse) GoogleCloudOrgpolicyV2PolicySpecResponse {
		return v.Spec
	}).(GoogleCloudOrgpolicyV2PolicySpecResponseOutput)
}

// Defines a Cloud Organization `PolicySpec` which is used to specify `Constraints` for configurations of Cloud Platform resources.
type GoogleCloudOrgpolicyV2PolicySpec struct {
	// An opaque tag indicating the current version of the `Policy`, used for concurrency control. This field is ignored if used in a `CreatePolicy` request. When the `Policy` is returned from either a `GetPolicy` or a `ListPolicies` request, this `etag` indicates the version of the current `Policy` to use when executing a read-modify-write loop. When the `Policy` is returned from a `GetEffectivePolicy` request, the `etag` will be unset.
	Etag *string `pulumi:"etag"`
	// Determines the inheritance behavior for this `Policy`. If `inherit_from_parent` is true, PolicyRules set higher up in the hierarchy (up to the closest root) are inherited and present in the effective policy. If it is false, then no rules are inherited, and this Policy becomes the new root for evaluation. This field can be set only for Policies which configure list constraints.
	InheritFromParent *bool `pulumi:"inheritFromParent"`
	// Ignores policies set above this resource and restores the `constraint_default` enforcement behavior of the specific `Constraint` at this resource. This field can be set in policies for either list or boolean constraints. If set, `rules` must be empty and `inherit_from_parent` must be set to false.
	Reset *bool `pulumi:"reset"`
	// Up to 10 PolicyRules are allowed. In Policies for boolean constraints, the following requirements apply: - There must be one and only one PolicyRule where condition is unset. - BooleanPolicyRules with conditions must set `enforced` to the opposite of the PolicyRule without a condition. - During policy evaluation, PolicyRules with conditions that are true for a target resource take precedence.
	Rules []GoogleCloudOrgpolicyV2PolicySpecPolicyRule `pulumi:"rules"`
}

// GoogleCloudOrgpolicyV2PolicySpecInput is an input type that accepts GoogleCloudOrgpolicyV2PolicySpecArgs and GoogleCloudOrgpolicyV2PolicySpecOutput values.
// You can construct a concrete instance of `GoogleCloudOrgpolicyV2PolicySpecInput` via:
//
//          GoogleCloudOrgpolicyV2PolicySpecArgs{...}
type GoogleCloudOrgpolicyV2PolicySpecInput interface {
	pulumi.Input

	ToGoogleCloudOrgpolicyV2PolicySpecOutput() GoogleCloudOrgpolicyV2PolicySpecOutput
	ToGoogleCloudOrgpolicyV2PolicySpecOutputWithContext(context.Context) GoogleCloudOrgpolicyV2PolicySpecOutput
}

// Defines a Cloud Organization `PolicySpec` which is used to specify `Constraints` for configurations of Cloud Platform resources.
type GoogleCloudOrgpolicyV2PolicySpecArgs struct {
	// An opaque tag indicating the current version of the `Policy`, used for concurrency control. This field is ignored if used in a `CreatePolicy` request. When the `Policy` is returned from either a `GetPolicy` or a `ListPolicies` request, this `etag` indicates the version of the current `Policy` to use when executing a read-modify-write loop. When the `Policy` is returned from a `GetEffectivePolicy` request, the `etag` will be unset.
	Etag pulumi.StringPtrInput `pulumi:"etag"`
	// Determines the inheritance behavior for this `Policy`. If `inherit_from_parent` is true, PolicyRules set higher up in the hierarchy (up to the closest root) are inherited and present in the effective policy. If it is false, then no rules are inherited, and this Policy becomes the new root for evaluation. This field can be set only for Policies which configure list constraints.
	InheritFromParent pulumi.BoolPtrInput `pulumi:"inheritFromParent"`
	// Ignores policies set above this resource and restores the `constraint_default` enforcement behavior of the specific `Constraint` at this resource. This field can be set in policies for either list or boolean constraints. If set, `rules` must be empty and `inherit_from_parent` must be set to false.
	Reset pulumi.BoolPtrInput `pulumi:"reset"`
	// Up to 10 PolicyRules are allowed. In Policies for boolean constraints, the following requirements apply: - There must be one and only one PolicyRule where condition is unset. - BooleanPolicyRules with conditions must set `enforced` to the opposite of the PolicyRule without a condition. - During policy evaluation, PolicyRules with conditions that are true for a target resource take precedence.
	Rules GoogleCloudOrgpolicyV2PolicySpecPolicyRuleArrayInput `pulumi:"rules"`
}

func (GoogleCloudOrgpolicyV2PolicySpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudOrgpolicyV2PolicySpec)(nil)).Elem()
}

func (i GoogleCloudOrgpolicyV2PolicySpecArgs) ToGoogleCloudOrgpolicyV2PolicySpecOutput() GoogleCloudOrgpolicyV2PolicySpecOutput {
	return i.ToGoogleCloudOrgpolicyV2PolicySpecOutputWithContext(context.Background())
}

func (i GoogleCloudOrgpolicyV2PolicySpecArgs) ToGoogleCloudOrgpolicyV2PolicySpecOutputWithContext(ctx context.Context) GoogleCloudOrgpolicyV2PolicySpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudOrgpolicyV2PolicySpecOutput)
}

func (i GoogleCloudOrgpolicyV2PolicySpecArgs) ToGoogleCloudOrgpolicyV2PolicySpecPtrOutput() GoogleCloudOrgpolicyV2PolicySpecPtrOutput {
	return i.ToGoogleCloudOrgpolicyV2PolicySpecPtrOutputWithContext(context.Background())
}

func (i GoogleCloudOrgpolicyV2PolicySpecArgs) ToGoogleCloudOrgpolicyV2PolicySpecPtrOutputWithContext(ctx context.Context) GoogleCloudOrgpolicyV2PolicySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudOrgpolicyV2PolicySpecOutput).ToGoogleCloudOrgpolicyV2PolicySpecPtrOutputWithContext(ctx)
}

// GoogleCloudOrgpolicyV2PolicySpecPtrInput is an input type that accepts GoogleCloudOrgpolicyV2PolicySpecArgs, GoogleCloudOrgpolicyV2PolicySpecPtr and GoogleCloudOrgpolicyV2PolicySpecPtrOutput values.
// You can construct a concrete instance of `GoogleCloudOrgpolicyV2PolicySpecPtrInput` via:
//
//          GoogleCloudOrgpolicyV2PolicySpecArgs{...}
//
//  or:
//
//          nil
type GoogleCloudOrgpolicyV2PolicySpecPtrInput interface {
	pulumi.Input

	ToGoogleCloudOrgpolicyV2PolicySpecPtrOutput() GoogleCloudOrgpolicyV2PolicySpecPtrOutput
	ToGoogleCloudOrgpolicyV2PolicySpecPtrOutputWithContext(context.Context) GoogleCloudOrgpolicyV2PolicySpecPtrOutput
}

type googleCloudOrgpolicyV2PolicySpecPtrType GoogleCloudOrgpolicyV2PolicySpecArgs

func GoogleCloudOrgpolicyV2PolicySpecPtr(v *GoogleCloudOrgpolicyV2PolicySpecArgs) GoogleCloudOrgpolicyV2PolicySpecPtrInput {
	return (*googleCloudOrgpolicyV2PolicySpecPtrType)(v)
}

func (*googleCloudOrgpolicyV2PolicySpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudOrgpolicyV2PolicySpec)(nil)).Elem()
}

func (i *googleCloudOrgpolicyV2PolicySpecPtrType) ToGoogleCloudOrgpolicyV2PolicySpecPtrOutput() GoogleCloudOrgpolicyV2PolicySpecPtrOutput {
	return i.ToGoogleCloudOrgpolicyV2PolicySpecPtrOutputWithContext(context.Background())
}

func (i *googleCloudOrgpolicyV2PolicySpecPtrType) ToGoogleCloudOrgpolicyV2PolicySpecPtrOutputWithContext(ctx context.Context) GoogleCloudOrgpolicyV2PolicySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudOrgpolicyV2PolicySpecPtrOutput)
}

// Defines a Cloud Organization `PolicySpec` which is used to specify `Constraints` for configurations of Cloud Platform resources.
type GoogleCloudOrgpolicyV2PolicySpecOutput struct{ *pulumi.OutputState }

func (GoogleCloudOrgpolicyV2PolicySpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudOrgpolicyV2PolicySpec)(nil)).Elem()
}

func (o GoogleCloudOrgpolicyV2PolicySpecOutput) ToGoogleCloudOrgpolicyV2PolicySpecOutput() GoogleCloudOrgpolicyV2PolicySpecOutput {
	return o
}

func (o GoogleCloudOrgpolicyV2PolicySpecOutput) ToGoogleCloudOrgpolicyV2PolicySpecOutputWithContext(ctx context.Context) GoogleCloudOrgpolicyV2PolicySpecOutput {
	return o
}

func (o GoogleCloudOrgpolicyV2PolicySpecOutput) ToGoogleCloudOrgpolicyV2PolicySpecPtrOutput() GoogleCloudOrgpolicyV2PolicySpecPtrOutput {
	return o.ToGoogleCloudOrgpolicyV2PolicySpecPtrOutputWithContext(context.Background())
}

func (o GoogleCloudOrgpolicyV2PolicySpecOutput) ToGoogleCloudOrgpolicyV2PolicySpecPtrOutputWithContext(ctx context.Context) GoogleCloudOrgpolicyV2PolicySpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleCloudOrgpolicyV2PolicySpec) *GoogleCloudOrgpolicyV2PolicySpec {
		return &v
	}).(GoogleCloudOrgpolicyV2PolicySpecPtrOutput)
}

// An opaque tag indicating the current version of the `Policy`, used for concurrency control. This field is ignored if used in a `CreatePolicy` request. When the `Policy` is returned from either a `GetPolicy` or a `ListPolicies` request, this `etag` indicates the version of the current `Policy` to use when executing a read-modify-write loop. When the `Policy` is returned from a `GetEffectivePolicy` request, the `etag` will be unset.
func (o GoogleCloudOrgpolicyV2PolicySpecOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudOrgpolicyV2PolicySpec) *string { return v.Etag }).(pulumi.StringPtrOutput)
}

// Determines the inheritance behavior for this `Policy`. If `inherit_from_parent` is true, PolicyRules set higher up in the hierarchy (up to the closest root) are inherited and present in the effective policy. If it is false, then no rules are inherited, and this Policy becomes the new root for evaluation. This field can be set only for Policies which configure list constraints.
func (o GoogleCloudOrgpolicyV2PolicySpecOutput) InheritFromParent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GoogleCloudOrgpolicyV2PolicySpec) *bool { return v.InheritFromParent }).(pulumi.BoolPtrOutput)
}

// Ignores policies set above this resource and restores the `constraint_default` enforcement behavior of the specific `Constraint` at this resource. This field can be set in policies for either list or boolean constraints. If set, `rules` must be empty and `inherit_from_parent` must be set to false.
func (o GoogleCloudOrgpolicyV2PolicySpecOutput) Reset() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GoogleCloudOrgpolicyV2PolicySpec) *bool { return v.Reset }).(pulumi.BoolPtrOutput)
}

// Up to 10 PolicyRules are allowed. In Policies for boolean constraints, the following requirements apply: - There must be one and only one PolicyRule where condition is unset. - BooleanPolicyRules with conditions must set `enforced` to the opposite of the PolicyRule without a condition. - During policy evaluation, PolicyRules with conditions that are true for a target resource take precedence.
func (o GoogleCloudOrgpolicyV2PolicySpecOutput) Rules() GoogleCloudOrgpolicyV2PolicySpecPolicyRuleArrayOutput {
	return o.ApplyT(func(v GoogleCloudOrgpolicyV2PolicySpec) []GoogleCloudOrgpolicyV2PolicySpecPolicyRule { return v.Rules }).(GoogleCloudOrgpolicyV2PolicySpecPolicyRuleArrayOutput)
}

type GoogleCloudOrgpolicyV2PolicySpecPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudOrgpolicyV2PolicySpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudOrgpolicyV2PolicySpec)(nil)).Elem()
}

func (o GoogleCloudOrgpolicyV2PolicySpecPtrOutput) ToGoogleCloudOrgpolicyV2PolicySpecPtrOutput() GoogleCloudOrgpolicyV2PolicySpecPtrOutput {
	return o
}

func (o GoogleCloudOrgpolicyV2PolicySpecPtrOutput) ToGoogleCloudOrgpolicyV2PolicySpecPtrOutputWithContext(ctx context.Context) GoogleCloudOrgpolicyV2PolicySpecPtrOutput {
	return o
}

func (o GoogleCloudOrgpolicyV2PolicySpecPtrOutput) Elem() GoogleCloudOrgpolicyV2PolicySpecOutput {
	return o.ApplyT(func(v *GoogleCloudOrgpolicyV2PolicySpec) GoogleCloudOrgpolicyV2PolicySpec {
		if v != nil {
			return *v
		}
		var ret GoogleCloudOrgpolicyV2PolicySpec
		return ret
	}).(GoogleCloudOrgpolicyV2PolicySpecOutput)
}

// An opaque tag indicating the current version of the `Policy`, used for concurrency control. This field is ignored if used in a `CreatePolicy` request. When the `Policy` is returned from either a `GetPolicy` or a `ListPolicies` request, this `etag` indicates the version of the current `Policy` to use when executing a read-modify-write loop. When the `Policy` is returned from a `GetEffectivePolicy` request, the `etag` will be unset.
func (o GoogleCloudOrgpolicyV2PolicySpecPtrOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleCloudOrgpolicyV2PolicySpec) *string {
		if v == nil {
			return nil
		}
		return v.Etag
	}).(pulumi.StringPtrOutput)
}

// Determines the inheritance behavior for this `Policy`. If `inherit_from_parent` is true, PolicyRules set higher up in the hierarchy (up to the closest root) are inherited and present in the effective policy. If it is false, then no rules are inherited, and this Policy becomes the new root for evaluation. This field can be set only for Policies which configure list constraints.
func (o GoogleCloudOrgpolicyV2PolicySpecPtrOutput) InheritFromParent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GoogleCloudOrgpolicyV2PolicySpec) *bool {
		if v == nil {
			return nil
		}
		return v.InheritFromParent
	}).(pulumi.BoolPtrOutput)
}

// Ignores policies set above this resource and restores the `constraint_default` enforcement behavior of the specific `Constraint` at this resource. This field can be set in policies for either list or boolean constraints. If set, `rules` must be empty and `inherit_from_parent` must be set to false.
func (o GoogleCloudOrgpolicyV2PolicySpecPtrOutput) Reset() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GoogleCloudOrgpolicyV2PolicySpec) *bool {
		if v == nil {
			return nil
		}
		return v.Reset
	}).(pulumi.BoolPtrOutput)
}

// Up to 10 PolicyRules are allowed. In Policies for boolean constraints, the following requirements apply: - There must be one and only one PolicyRule where condition is unset. - BooleanPolicyRules with conditions must set `enforced` to the opposite of the PolicyRule without a condition. - During policy evaluation, PolicyRules with conditions that are true for a target resource take precedence.
func (o GoogleCloudOrgpolicyV2PolicySpecPtrOutput) Rules() GoogleCloudOrgpolicyV2PolicySpecPolicyRuleArrayOutput {
	return o.ApplyT(func(v *GoogleCloudOrgpolicyV2PolicySpec) []GoogleCloudOrgpolicyV2PolicySpecPolicyRule {
		if v == nil {
			return nil
		}
		return v.Rules
	}).(GoogleCloudOrgpolicyV2PolicySpecPolicyRuleArrayOutput)
}

// A rule used to express this policy.
type GoogleCloudOrgpolicyV2PolicySpecPolicyRule struct {
	// Setting this to true means that all values are allowed. This field can be set only in Policies for list constraints.
	AllowAll *bool `pulumi:"allowAll"`
	// A condition which determines whether this rule is used in the evaluation of the policy. When set, the `expression` field in the `Expr' must include from 1 to 10 subexpressions, joined by the "||" or "&&" operators. Each subexpression must be of the form "resource.matchTag('/tag_key_short_name, 'tag_value_short_name')". or "resource.matchTagId('tagKeys/key_id', 'tagValues/value_id')". where key_name and value_name are the resource names for Label Keys and Values. These names are available from the Tag Manager Service. An example expression is: "resource.matchTag('123456789/environment, 'prod')". or "resource.matchTagId('tagKeys/123', 'tagValues/456')".
	Condition *GoogleTypeExpr `pulumi:"condition"`
	// Setting this to true means that all values are denied. This field can be set only in Policies for list constraints.
	DenyAll *bool `pulumi:"denyAll"`
	// If `true`, then the `Policy` is enforced. If `false`, then any configuration is acceptable. This field can be set only in Policies for boolean constraints.
	Enforce *bool `pulumi:"enforce"`
	// List of values to be used for this PolicyRule. This field can be set only in Policies for list constraints.
	Values *GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues `pulumi:"values"`
}

// GoogleCloudOrgpolicyV2PolicySpecPolicyRuleInput is an input type that accepts GoogleCloudOrgpolicyV2PolicySpecPolicyRuleArgs and GoogleCloudOrgpolicyV2PolicySpecPolicyRuleOutput values.
// You can construct a concrete instance of `GoogleCloudOrgpolicyV2PolicySpecPolicyRuleInput` via:
//
//          GoogleCloudOrgpolicyV2PolicySpecPolicyRuleArgs{...}
type GoogleCloudOrgpolicyV2PolicySpecPolicyRuleInput interface {
	pulumi.Input

	ToGoogleCloudOrgpolicyV2PolicySpecPolicyRuleOutput() GoogleCloudOrgpolicyV2PolicySpecPolicyRuleOutput
	ToGoogleCloudOrgpolicyV2PolicySpecPolicyRuleOutputWithContext(context.Context) GoogleCloudOrgpolicyV2PolicySpecPolicyRuleOutput
}

// A rule used to express this policy.
type GoogleCloudOrgpolicyV2PolicySpecPolicyRuleArgs struct {
	// Setting this to true means that all values are allowed. This field can be set only in Policies for list constraints.
	AllowAll pulumi.BoolPtrInput `pulumi:"allowAll"`
	// A condition which determines whether this rule is used in the evaluation of the policy. When set, the `expression` field in the `Expr' must include from 1 to 10 subexpressions, joined by the "||" or "&&" operators. Each subexpression must be of the form "resource.matchTag('/tag_key_short_name, 'tag_value_short_name')". or "resource.matchTagId('tagKeys/key_id', 'tagValues/value_id')". where key_name and value_name are the resource names for Label Keys and Values. These names are available from the Tag Manager Service. An example expression is: "resource.matchTag('123456789/environment, 'prod')". or "resource.matchTagId('tagKeys/123', 'tagValues/456')".
	Condition GoogleTypeExprPtrInput `pulumi:"condition"`
	// Setting this to true means that all values are denied. This field can be set only in Policies for list constraints.
	DenyAll pulumi.BoolPtrInput `pulumi:"denyAll"`
	// If `true`, then the `Policy` is enforced. If `false`, then any configuration is acceptable. This field can be set only in Policies for boolean constraints.
	Enforce pulumi.BoolPtrInput `pulumi:"enforce"`
	// List of values to be used for this PolicyRule. This field can be set only in Policies for list constraints.
	Values GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesPtrInput `pulumi:"values"`
}

func (GoogleCloudOrgpolicyV2PolicySpecPolicyRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudOrgpolicyV2PolicySpecPolicyRule)(nil)).Elem()
}

func (i GoogleCloudOrgpolicyV2PolicySpecPolicyRuleArgs) ToGoogleCloudOrgpolicyV2PolicySpecPolicyRuleOutput() GoogleCloudOrgpolicyV2PolicySpecPolicyRuleOutput {
	return i.ToGoogleCloudOrgpolicyV2PolicySpecPolicyRuleOutputWithContext(context.Background())
}

func (i GoogleCloudOrgpolicyV2PolicySpecPolicyRuleArgs) ToGoogleCloudOrgpolicyV2PolicySpecPolicyRuleOutputWithContext(ctx context.Context) GoogleCloudOrgpolicyV2PolicySpecPolicyRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudOrgpolicyV2PolicySpecPolicyRuleOutput)
}

// GoogleCloudOrgpolicyV2PolicySpecPolicyRuleArrayInput is an input type that accepts GoogleCloudOrgpolicyV2PolicySpecPolicyRuleArray and GoogleCloudOrgpolicyV2PolicySpecPolicyRuleArrayOutput values.
// You can construct a concrete instance of `GoogleCloudOrgpolicyV2PolicySpecPolicyRuleArrayInput` via:
//
//          GoogleCloudOrgpolicyV2PolicySpecPolicyRuleArray{ GoogleCloudOrgpolicyV2PolicySpecPolicyRuleArgs{...} }
type GoogleCloudOrgpolicyV2PolicySpecPolicyRuleArrayInput interface {
	pulumi.Input

	ToGoogleCloudOrgpolicyV2PolicySpecPolicyRuleArrayOutput() GoogleCloudOrgpolicyV2PolicySpecPolicyRuleArrayOutput
	ToGoogleCloudOrgpolicyV2PolicySpecPolicyRuleArrayOutputWithContext(context.Context) GoogleCloudOrgpolicyV2PolicySpecPolicyRuleArrayOutput
}

type GoogleCloudOrgpolicyV2PolicySpecPolicyRuleArray []GoogleCloudOrgpolicyV2PolicySpecPolicyRuleInput

func (GoogleCloudOrgpolicyV2PolicySpecPolicyRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudOrgpolicyV2PolicySpecPolicyRule)(nil)).Elem()
}

func (i GoogleCloudOrgpolicyV2PolicySpecPolicyRuleArray) ToGoogleCloudOrgpolicyV2PolicySpecPolicyRuleArrayOutput() GoogleCloudOrgpolicyV2PolicySpecPolicyRuleArrayOutput {
	return i.ToGoogleCloudOrgpolicyV2PolicySpecPolicyRuleArrayOutputWithContext(context.Background())
}

func (i GoogleCloudOrgpolicyV2PolicySpecPolicyRuleArray) ToGoogleCloudOrgpolicyV2PolicySpecPolicyRuleArrayOutputWithContext(ctx context.Context) GoogleCloudOrgpolicyV2PolicySpecPolicyRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudOrgpolicyV2PolicySpecPolicyRuleArrayOutput)
}

// A rule used to express this policy.
type GoogleCloudOrgpolicyV2PolicySpecPolicyRuleOutput struct{ *pulumi.OutputState }

func (GoogleCloudOrgpolicyV2PolicySpecPolicyRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudOrgpolicyV2PolicySpecPolicyRule)(nil)).Elem()
}

func (o GoogleCloudOrgpolicyV2PolicySpecPolicyRuleOutput) ToGoogleCloudOrgpolicyV2PolicySpecPolicyRuleOutput() GoogleCloudOrgpolicyV2PolicySpecPolicyRuleOutput {
	return o
}

func (o GoogleCloudOrgpolicyV2PolicySpecPolicyRuleOutput) ToGoogleCloudOrgpolicyV2PolicySpecPolicyRuleOutputWithContext(ctx context.Context) GoogleCloudOrgpolicyV2PolicySpecPolicyRuleOutput {
	return o
}

// Setting this to true means that all values are allowed. This field can be set only in Policies for list constraints.
func (o GoogleCloudOrgpolicyV2PolicySpecPolicyRuleOutput) AllowAll() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GoogleCloudOrgpolicyV2PolicySpecPolicyRule) *bool { return v.AllowAll }).(pulumi.BoolPtrOutput)
}

// A condition which determines whether this rule is used in the evaluation of the policy. When set, the `expression` field in the `Expr' must include from 1 to 10 subexpressions, joined by the "||" or "&&" operators. Each subexpression must be of the form "resource.matchTag('/tag_key_short_name, 'tag_value_short_name')". or "resource.matchTagId('tagKeys/key_id', 'tagValues/value_id')". where key_name and value_name are the resource names for Label Keys and Values. These names are available from the Tag Manager Service. An example expression is: "resource.matchTag('123456789/environment, 'prod')". or "resource.matchTagId('tagKeys/123', 'tagValues/456')".
func (o GoogleCloudOrgpolicyV2PolicySpecPolicyRuleOutput) Condition() GoogleTypeExprPtrOutput {
	return o.ApplyT(func(v GoogleCloudOrgpolicyV2PolicySpecPolicyRule) *GoogleTypeExpr { return v.Condition }).(GoogleTypeExprPtrOutput)
}

// Setting this to true means that all values are denied. This field can be set only in Policies for list constraints.
func (o GoogleCloudOrgpolicyV2PolicySpecPolicyRuleOutput) DenyAll() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GoogleCloudOrgpolicyV2PolicySpecPolicyRule) *bool { return v.DenyAll }).(pulumi.BoolPtrOutput)
}

// If `true`, then the `Policy` is enforced. If `false`, then any configuration is acceptable. This field can be set only in Policies for boolean constraints.
func (o GoogleCloudOrgpolicyV2PolicySpecPolicyRuleOutput) Enforce() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GoogleCloudOrgpolicyV2PolicySpecPolicyRule) *bool { return v.Enforce }).(pulumi.BoolPtrOutput)
}

// List of values to be used for this PolicyRule. This field can be set only in Policies for list constraints.
func (o GoogleCloudOrgpolicyV2PolicySpecPolicyRuleOutput) Values() GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesPtrOutput {
	return o.ApplyT(func(v GoogleCloudOrgpolicyV2PolicySpecPolicyRule) *GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues {
		return v.Values
	}).(GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesPtrOutput)
}

type GoogleCloudOrgpolicyV2PolicySpecPolicyRuleArrayOutput struct{ *pulumi.OutputState }

func (GoogleCloudOrgpolicyV2PolicySpecPolicyRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudOrgpolicyV2PolicySpecPolicyRule)(nil)).Elem()
}

func (o GoogleCloudOrgpolicyV2PolicySpecPolicyRuleArrayOutput) ToGoogleCloudOrgpolicyV2PolicySpecPolicyRuleArrayOutput() GoogleCloudOrgpolicyV2PolicySpecPolicyRuleArrayOutput {
	return o
}

func (o GoogleCloudOrgpolicyV2PolicySpecPolicyRuleArrayOutput) ToGoogleCloudOrgpolicyV2PolicySpecPolicyRuleArrayOutputWithContext(ctx context.Context) GoogleCloudOrgpolicyV2PolicySpecPolicyRuleArrayOutput {
	return o
}

func (o GoogleCloudOrgpolicyV2PolicySpecPolicyRuleArrayOutput) Index(i pulumi.IntInput) GoogleCloudOrgpolicyV2PolicySpecPolicyRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleCloudOrgpolicyV2PolicySpecPolicyRule {
		return vs[0].([]GoogleCloudOrgpolicyV2PolicySpecPolicyRule)[vs[1].(int)]
	}).(GoogleCloudOrgpolicyV2PolicySpecPolicyRuleOutput)
}

// A rule used to express this policy.
type GoogleCloudOrgpolicyV2PolicySpecPolicyRuleResponse struct {
	// Setting this to true means that all values are allowed. This field can be set only in Policies for list constraints.
	AllowAll bool `pulumi:"allowAll"`
	// A condition which determines whether this rule is used in the evaluation of the policy. When set, the `expression` field in the `Expr' must include from 1 to 10 subexpressions, joined by the "||" or "&&" operators. Each subexpression must be of the form "resource.matchTag('/tag_key_short_name, 'tag_value_short_name')". or "resource.matchTagId('tagKeys/key_id', 'tagValues/value_id')". where key_name and value_name are the resource names for Label Keys and Values. These names are available from the Tag Manager Service. An example expression is: "resource.matchTag('123456789/environment, 'prod')". or "resource.matchTagId('tagKeys/123', 'tagValues/456')".
	Condition GoogleTypeExprResponse `pulumi:"condition"`
	// Setting this to true means that all values are denied. This field can be set only in Policies for list constraints.
	DenyAll bool `pulumi:"denyAll"`
	// If `true`, then the `Policy` is enforced. If `false`, then any configuration is acceptable. This field can be set only in Policies for boolean constraints.
	Enforce bool `pulumi:"enforce"`
	// List of values to be used for this PolicyRule. This field can be set only in Policies for list constraints.
	Values GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesResponse `pulumi:"values"`
}

// A rule used to express this policy.
type GoogleCloudOrgpolicyV2PolicySpecPolicyRuleResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudOrgpolicyV2PolicySpecPolicyRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudOrgpolicyV2PolicySpecPolicyRuleResponse)(nil)).Elem()
}

func (o GoogleCloudOrgpolicyV2PolicySpecPolicyRuleResponseOutput) ToGoogleCloudOrgpolicyV2PolicySpecPolicyRuleResponseOutput() GoogleCloudOrgpolicyV2PolicySpecPolicyRuleResponseOutput {
	return o
}

func (o GoogleCloudOrgpolicyV2PolicySpecPolicyRuleResponseOutput) ToGoogleCloudOrgpolicyV2PolicySpecPolicyRuleResponseOutputWithContext(ctx context.Context) GoogleCloudOrgpolicyV2PolicySpecPolicyRuleResponseOutput {
	return o
}

// Setting this to true means that all values are allowed. This field can be set only in Policies for list constraints.
func (o GoogleCloudOrgpolicyV2PolicySpecPolicyRuleResponseOutput) AllowAll() pulumi.BoolOutput {
	return o.ApplyT(func(v GoogleCloudOrgpolicyV2PolicySpecPolicyRuleResponse) bool { return v.AllowAll }).(pulumi.BoolOutput)
}

// A condition which determines whether this rule is used in the evaluation of the policy. When set, the `expression` field in the `Expr' must include from 1 to 10 subexpressions, joined by the "||" or "&&" operators. Each subexpression must be of the form "resource.matchTag('/tag_key_short_name, 'tag_value_short_name')". or "resource.matchTagId('tagKeys/key_id', 'tagValues/value_id')". where key_name and value_name are the resource names for Label Keys and Values. These names are available from the Tag Manager Service. An example expression is: "resource.matchTag('123456789/environment, 'prod')". or "resource.matchTagId('tagKeys/123', 'tagValues/456')".
func (o GoogleCloudOrgpolicyV2PolicySpecPolicyRuleResponseOutput) Condition() GoogleTypeExprResponseOutput {
	return o.ApplyT(func(v GoogleCloudOrgpolicyV2PolicySpecPolicyRuleResponse) GoogleTypeExprResponse { return v.Condition }).(GoogleTypeExprResponseOutput)
}

// Setting this to true means that all values are denied. This field can be set only in Policies for list constraints.
func (o GoogleCloudOrgpolicyV2PolicySpecPolicyRuleResponseOutput) DenyAll() pulumi.BoolOutput {
	return o.ApplyT(func(v GoogleCloudOrgpolicyV2PolicySpecPolicyRuleResponse) bool { return v.DenyAll }).(pulumi.BoolOutput)
}

// If `true`, then the `Policy` is enforced. If `false`, then any configuration is acceptable. This field can be set only in Policies for boolean constraints.
func (o GoogleCloudOrgpolicyV2PolicySpecPolicyRuleResponseOutput) Enforce() pulumi.BoolOutput {
	return o.ApplyT(func(v GoogleCloudOrgpolicyV2PolicySpecPolicyRuleResponse) bool { return v.Enforce }).(pulumi.BoolOutput)
}

// List of values to be used for this PolicyRule. This field can be set only in Policies for list constraints.
func (o GoogleCloudOrgpolicyV2PolicySpecPolicyRuleResponseOutput) Values() GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesResponseOutput {
	return o.ApplyT(func(v GoogleCloudOrgpolicyV2PolicySpecPolicyRuleResponse) GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesResponse {
		return v.Values
	}).(GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesResponseOutput)
}

type GoogleCloudOrgpolicyV2PolicySpecPolicyRuleResponseArrayOutput struct{ *pulumi.OutputState }

func (GoogleCloudOrgpolicyV2PolicySpecPolicyRuleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudOrgpolicyV2PolicySpecPolicyRuleResponse)(nil)).Elem()
}

func (o GoogleCloudOrgpolicyV2PolicySpecPolicyRuleResponseArrayOutput) ToGoogleCloudOrgpolicyV2PolicySpecPolicyRuleResponseArrayOutput() GoogleCloudOrgpolicyV2PolicySpecPolicyRuleResponseArrayOutput {
	return o
}

func (o GoogleCloudOrgpolicyV2PolicySpecPolicyRuleResponseArrayOutput) ToGoogleCloudOrgpolicyV2PolicySpecPolicyRuleResponseArrayOutputWithContext(ctx context.Context) GoogleCloudOrgpolicyV2PolicySpecPolicyRuleResponseArrayOutput {
	return o
}

func (o GoogleCloudOrgpolicyV2PolicySpecPolicyRuleResponseArrayOutput) Index(i pulumi.IntInput) GoogleCloudOrgpolicyV2PolicySpecPolicyRuleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleCloudOrgpolicyV2PolicySpecPolicyRuleResponse {
		return vs[0].([]GoogleCloudOrgpolicyV2PolicySpecPolicyRuleResponse)[vs[1].(int)]
	}).(GoogleCloudOrgpolicyV2PolicySpecPolicyRuleResponseOutput)
}

// A message that holds specific allowed and denied values. This message can define specific values and subtrees of Cloud Resource Manager resource hierarchy (`Organizations`, `Folders`, `Projects`) that are allowed or denied. This is achieved by using the `under:` and optional `is:` prefixes. The `under:` prefix is used to denote resource subtree values. The `is:` prefix is used to denote specific values, and is required only if the value contains a ":". Values prefixed with "is:" are treated the same as values with no prefix. Ancestry subtrees must be in one of the following formats: - "projects/", e.g. "projects/tokyo-rain-123" - "folders/", e.g. "folders/1234" - "organizations/", e.g. "organizations/1234" The `supports_under` field of the associated `Constraint` defines whether ancestry prefixes can be used.
type GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues struct {
	// List of values allowed at this resource.
	AllowedValues []string `pulumi:"allowedValues"`
	// List of values denied at this resource.
	DeniedValues []string `pulumi:"deniedValues"`
}

// GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesInput is an input type that accepts GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesArgs and GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesOutput values.
// You can construct a concrete instance of `GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesInput` via:
//
//          GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesArgs{...}
type GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesInput interface {
	pulumi.Input

	ToGoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesOutput() GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesOutput
	ToGoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesOutputWithContext(context.Context) GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesOutput
}

// A message that holds specific allowed and denied values. This message can define specific values and subtrees of Cloud Resource Manager resource hierarchy (`Organizations`, `Folders`, `Projects`) that are allowed or denied. This is achieved by using the `under:` and optional `is:` prefixes. The `under:` prefix is used to denote resource subtree values. The `is:` prefix is used to denote specific values, and is required only if the value contains a ":". Values prefixed with "is:" are treated the same as values with no prefix. Ancestry subtrees must be in one of the following formats: - "projects/", e.g. "projects/tokyo-rain-123" - "folders/", e.g. "folders/1234" - "organizations/", e.g. "organizations/1234" The `supports_under` field of the associated `Constraint` defines whether ancestry prefixes can be used.
type GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesArgs struct {
	// List of values allowed at this resource.
	AllowedValues pulumi.StringArrayInput `pulumi:"allowedValues"`
	// List of values denied at this resource.
	DeniedValues pulumi.StringArrayInput `pulumi:"deniedValues"`
}

func (GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues)(nil)).Elem()
}

func (i GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesArgs) ToGoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesOutput() GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesOutput {
	return i.ToGoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesOutputWithContext(context.Background())
}

func (i GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesArgs) ToGoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesOutputWithContext(ctx context.Context) GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesOutput)
}

func (i GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesArgs) ToGoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesPtrOutput() GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesPtrOutput {
	return i.ToGoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesPtrOutputWithContext(context.Background())
}

func (i GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesArgs) ToGoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesPtrOutputWithContext(ctx context.Context) GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesOutput).ToGoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesPtrOutputWithContext(ctx)
}

// GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesPtrInput is an input type that accepts GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesArgs, GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesPtr and GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesPtrOutput values.
// You can construct a concrete instance of `GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesPtrInput` via:
//
//          GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesArgs{...}
//
//  or:
//
//          nil
type GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesPtrInput interface {
	pulumi.Input

	ToGoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesPtrOutput() GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesPtrOutput
	ToGoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesPtrOutputWithContext(context.Context) GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesPtrOutput
}

type googleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesPtrType GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesArgs

func GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesPtr(v *GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesArgs) GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesPtrInput {
	return (*googleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesPtrType)(v)
}

func (*googleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues)(nil)).Elem()
}

func (i *googleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesPtrType) ToGoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesPtrOutput() GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesPtrOutput {
	return i.ToGoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesPtrOutputWithContext(context.Background())
}

func (i *googleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesPtrType) ToGoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesPtrOutputWithContext(ctx context.Context) GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesPtrOutput)
}

// A message that holds specific allowed and denied values. This message can define specific values and subtrees of Cloud Resource Manager resource hierarchy (`Organizations`, `Folders`, `Projects`) that are allowed or denied. This is achieved by using the `under:` and optional `is:` prefixes. The `under:` prefix is used to denote resource subtree values. The `is:` prefix is used to denote specific values, and is required only if the value contains a ":". Values prefixed with "is:" are treated the same as values with no prefix. Ancestry subtrees must be in one of the following formats: - "projects/", e.g. "projects/tokyo-rain-123" - "folders/", e.g. "folders/1234" - "organizations/", e.g. "organizations/1234" The `supports_under` field of the associated `Constraint` defines whether ancestry prefixes can be used.
type GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesOutput struct{ *pulumi.OutputState }

func (GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues)(nil)).Elem()
}

func (o GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesOutput) ToGoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesOutput() GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesOutput {
	return o
}

func (o GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesOutput) ToGoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesOutputWithContext(ctx context.Context) GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesOutput {
	return o
}

func (o GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesOutput) ToGoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesPtrOutput() GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesPtrOutput {
	return o.ToGoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesPtrOutputWithContext(context.Background())
}

func (o GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesOutput) ToGoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesPtrOutputWithContext(ctx context.Context) GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues) *GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues {
		return &v
	}).(GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesPtrOutput)
}

// List of values allowed at this resource.
func (o GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesOutput) AllowedValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues) []string { return v.AllowedValues }).(pulumi.StringArrayOutput)
}

// List of values denied at this resource.
func (o GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesOutput) DeniedValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues) []string { return v.DeniedValues }).(pulumi.StringArrayOutput)
}

type GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues)(nil)).Elem()
}

func (o GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesPtrOutput) ToGoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesPtrOutput() GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesPtrOutput {
	return o
}

func (o GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesPtrOutput) ToGoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesPtrOutputWithContext(ctx context.Context) GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesPtrOutput {
	return o
}

func (o GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesPtrOutput) Elem() GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesOutput {
	return o.ApplyT(func(v *GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues) GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues {
		if v != nil {
			return *v
		}
		var ret GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues
		return ret
	}).(GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesOutput)
}

// List of values allowed at this resource.
func (o GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesPtrOutput) AllowedValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues) []string {
		if v == nil {
			return nil
		}
		return v.AllowedValues
	}).(pulumi.StringArrayOutput)
}

// List of values denied at this resource.
func (o GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesPtrOutput) DeniedValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues) []string {
		if v == nil {
			return nil
		}
		return v.DeniedValues
	}).(pulumi.StringArrayOutput)
}

// A message that holds specific allowed and denied values. This message can define specific values and subtrees of Cloud Resource Manager resource hierarchy (`Organizations`, `Folders`, `Projects`) that are allowed or denied. This is achieved by using the `under:` and optional `is:` prefixes. The `under:` prefix is used to denote resource subtree values. The `is:` prefix is used to denote specific values, and is required only if the value contains a ":". Values prefixed with "is:" are treated the same as values with no prefix. Ancestry subtrees must be in one of the following formats: - "projects/", e.g. "projects/tokyo-rain-123" - "folders/", e.g. "folders/1234" - "organizations/", e.g. "organizations/1234" The `supports_under` field of the associated `Constraint` defines whether ancestry prefixes can be used.
type GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesResponse struct {
	// List of values allowed at this resource.
	AllowedValues []string `pulumi:"allowedValues"`
	// List of values denied at this resource.
	DeniedValues []string `pulumi:"deniedValues"`
}

// A message that holds specific allowed and denied values. This message can define specific values and subtrees of Cloud Resource Manager resource hierarchy (`Organizations`, `Folders`, `Projects`) that are allowed or denied. This is achieved by using the `under:` and optional `is:` prefixes. The `under:` prefix is used to denote resource subtree values. The `is:` prefix is used to denote specific values, and is required only if the value contains a ":". Values prefixed with "is:" are treated the same as values with no prefix. Ancestry subtrees must be in one of the following formats: - "projects/", e.g. "projects/tokyo-rain-123" - "folders/", e.g. "folders/1234" - "organizations/", e.g. "organizations/1234" The `supports_under` field of the associated `Constraint` defines whether ancestry prefixes can be used.
type GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesResponse)(nil)).Elem()
}

func (o GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesResponseOutput) ToGoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesResponseOutput() GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesResponseOutput {
	return o
}

func (o GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesResponseOutput) ToGoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesResponseOutputWithContext(ctx context.Context) GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesResponseOutput {
	return o
}

// List of values allowed at this resource.
func (o GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesResponseOutput) AllowedValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesResponse) []string {
		return v.AllowedValues
	}).(pulumi.StringArrayOutput)
}

// List of values denied at this resource.
func (o GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesResponseOutput) DeniedValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesResponse) []string { return v.DeniedValues }).(pulumi.StringArrayOutput)
}

// Defines a Cloud Organization `PolicySpec` which is used to specify `Constraints` for configurations of Cloud Platform resources.
type GoogleCloudOrgpolicyV2PolicySpecResponse struct {
	// An opaque tag indicating the current version of the `Policy`, used for concurrency control. This field is ignored if used in a `CreatePolicy` request. When the `Policy` is returned from either a `GetPolicy` or a `ListPolicies` request, this `etag` indicates the version of the current `Policy` to use when executing a read-modify-write loop. When the `Policy` is returned from a `GetEffectivePolicy` request, the `etag` will be unset.
	Etag string `pulumi:"etag"`
	// Determines the inheritance behavior for this `Policy`. If `inherit_from_parent` is true, PolicyRules set higher up in the hierarchy (up to the closest root) are inherited and present in the effective policy. If it is false, then no rules are inherited, and this Policy becomes the new root for evaluation. This field can be set only for Policies which configure list constraints.
	InheritFromParent bool `pulumi:"inheritFromParent"`
	// Ignores policies set above this resource and restores the `constraint_default` enforcement behavior of the specific `Constraint` at this resource. This field can be set in policies for either list or boolean constraints. If set, `rules` must be empty and `inherit_from_parent` must be set to false.
	Reset bool `pulumi:"reset"`
	// Up to 10 PolicyRules are allowed. In Policies for boolean constraints, the following requirements apply: - There must be one and only one PolicyRule where condition is unset. - BooleanPolicyRules with conditions must set `enforced` to the opposite of the PolicyRule without a condition. - During policy evaluation, PolicyRules with conditions that are true for a target resource take precedence.
	Rules []GoogleCloudOrgpolicyV2PolicySpecPolicyRuleResponse `pulumi:"rules"`
	// The time stamp this was previously updated. This represents the last time a call to `CreatePolicy` or `UpdatePolicy` was made for that `Policy`.
	UpdateTime string `pulumi:"updateTime"`
}

// Defines a Cloud Organization `PolicySpec` which is used to specify `Constraints` for configurations of Cloud Platform resources.
type GoogleCloudOrgpolicyV2PolicySpecResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudOrgpolicyV2PolicySpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudOrgpolicyV2PolicySpecResponse)(nil)).Elem()
}

func (o GoogleCloudOrgpolicyV2PolicySpecResponseOutput) ToGoogleCloudOrgpolicyV2PolicySpecResponseOutput() GoogleCloudOrgpolicyV2PolicySpecResponseOutput {
	return o
}

func (o GoogleCloudOrgpolicyV2PolicySpecResponseOutput) ToGoogleCloudOrgpolicyV2PolicySpecResponseOutputWithContext(ctx context.Context) GoogleCloudOrgpolicyV2PolicySpecResponseOutput {
	return o
}

// An opaque tag indicating the current version of the `Policy`, used for concurrency control. This field is ignored if used in a `CreatePolicy` request. When the `Policy` is returned from either a `GetPolicy` or a `ListPolicies` request, this `etag` indicates the version of the current `Policy` to use when executing a read-modify-write loop. When the `Policy` is returned from a `GetEffectivePolicy` request, the `etag` will be unset.
func (o GoogleCloudOrgpolicyV2PolicySpecResponseOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudOrgpolicyV2PolicySpecResponse) string { return v.Etag }).(pulumi.StringOutput)
}

// Determines the inheritance behavior for this `Policy`. If `inherit_from_parent` is true, PolicyRules set higher up in the hierarchy (up to the closest root) are inherited and present in the effective policy. If it is false, then no rules are inherited, and this Policy becomes the new root for evaluation. This field can be set only for Policies which configure list constraints.
func (o GoogleCloudOrgpolicyV2PolicySpecResponseOutput) InheritFromParent() pulumi.BoolOutput {
	return o.ApplyT(func(v GoogleCloudOrgpolicyV2PolicySpecResponse) bool { return v.InheritFromParent }).(pulumi.BoolOutput)
}

// Ignores policies set above this resource and restores the `constraint_default` enforcement behavior of the specific `Constraint` at this resource. This field can be set in policies for either list or boolean constraints. If set, `rules` must be empty and `inherit_from_parent` must be set to false.
func (o GoogleCloudOrgpolicyV2PolicySpecResponseOutput) Reset() pulumi.BoolOutput {
	return o.ApplyT(func(v GoogleCloudOrgpolicyV2PolicySpecResponse) bool { return v.Reset }).(pulumi.BoolOutput)
}

// Up to 10 PolicyRules are allowed. In Policies for boolean constraints, the following requirements apply: - There must be one and only one PolicyRule where condition is unset. - BooleanPolicyRules with conditions must set `enforced` to the opposite of the PolicyRule without a condition. - During policy evaluation, PolicyRules with conditions that are true for a target resource take precedence.
func (o GoogleCloudOrgpolicyV2PolicySpecResponseOutput) Rules() GoogleCloudOrgpolicyV2PolicySpecPolicyRuleResponseArrayOutput {
	return o.ApplyT(func(v GoogleCloudOrgpolicyV2PolicySpecResponse) []GoogleCloudOrgpolicyV2PolicySpecPolicyRuleResponse {
		return v.Rules
	}).(GoogleCloudOrgpolicyV2PolicySpecPolicyRuleResponseArrayOutput)
}

// The time stamp this was previously updated. This represents the last time a call to `CreatePolicy` or `UpdatePolicy` was made for that `Policy`.
func (o GoogleCloudOrgpolicyV2PolicySpecResponseOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudOrgpolicyV2PolicySpecResponse) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type GoogleTypeExpr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// GoogleTypeExprInput is an input type that accepts GoogleTypeExprArgs and GoogleTypeExprOutput values.
// You can construct a concrete instance of `GoogleTypeExprInput` via:
//
//          GoogleTypeExprArgs{...}
type GoogleTypeExprInput interface {
	pulumi.Input

	ToGoogleTypeExprOutput() GoogleTypeExprOutput
	ToGoogleTypeExprOutputWithContext(context.Context) GoogleTypeExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type GoogleTypeExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (GoogleTypeExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleTypeExpr)(nil)).Elem()
}

func (i GoogleTypeExprArgs) ToGoogleTypeExprOutput() GoogleTypeExprOutput {
	return i.ToGoogleTypeExprOutputWithContext(context.Background())
}

func (i GoogleTypeExprArgs) ToGoogleTypeExprOutputWithContext(ctx context.Context) GoogleTypeExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleTypeExprOutput)
}

func (i GoogleTypeExprArgs) ToGoogleTypeExprPtrOutput() GoogleTypeExprPtrOutput {
	return i.ToGoogleTypeExprPtrOutputWithContext(context.Background())
}

func (i GoogleTypeExprArgs) ToGoogleTypeExprPtrOutputWithContext(ctx context.Context) GoogleTypeExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleTypeExprOutput).ToGoogleTypeExprPtrOutputWithContext(ctx)
}

// GoogleTypeExprPtrInput is an input type that accepts GoogleTypeExprArgs, GoogleTypeExprPtr and GoogleTypeExprPtrOutput values.
// You can construct a concrete instance of `GoogleTypeExprPtrInput` via:
//
//          GoogleTypeExprArgs{...}
//
//  or:
//
//          nil
type GoogleTypeExprPtrInput interface {
	pulumi.Input

	ToGoogleTypeExprPtrOutput() GoogleTypeExprPtrOutput
	ToGoogleTypeExprPtrOutputWithContext(context.Context) GoogleTypeExprPtrOutput
}

type googleTypeExprPtrType GoogleTypeExprArgs

func GoogleTypeExprPtr(v *GoogleTypeExprArgs) GoogleTypeExprPtrInput {
	return (*googleTypeExprPtrType)(v)
}

func (*googleTypeExprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleTypeExpr)(nil)).Elem()
}

func (i *googleTypeExprPtrType) ToGoogleTypeExprPtrOutput() GoogleTypeExprPtrOutput {
	return i.ToGoogleTypeExprPtrOutputWithContext(context.Background())
}

func (i *googleTypeExprPtrType) ToGoogleTypeExprPtrOutputWithContext(ctx context.Context) GoogleTypeExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleTypeExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type GoogleTypeExprOutput struct{ *pulumi.OutputState }

func (GoogleTypeExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleTypeExpr)(nil)).Elem()
}

func (o GoogleTypeExprOutput) ToGoogleTypeExprOutput() GoogleTypeExprOutput {
	return o
}

func (o GoogleTypeExprOutput) ToGoogleTypeExprOutputWithContext(ctx context.Context) GoogleTypeExprOutput {
	return o
}

func (o GoogleTypeExprOutput) ToGoogleTypeExprPtrOutput() GoogleTypeExprPtrOutput {
	return o.ToGoogleTypeExprPtrOutputWithContext(context.Background())
}

func (o GoogleTypeExprOutput) ToGoogleTypeExprPtrOutputWithContext(ctx context.Context) GoogleTypeExprPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleTypeExpr) *GoogleTypeExpr {
		return &v
	}).(GoogleTypeExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o GoogleTypeExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleTypeExpr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o GoogleTypeExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleTypeExpr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o GoogleTypeExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleTypeExpr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o GoogleTypeExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleTypeExpr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type GoogleTypeExprPtrOutput struct{ *pulumi.OutputState }

func (GoogleTypeExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleTypeExpr)(nil)).Elem()
}

func (o GoogleTypeExprPtrOutput) ToGoogleTypeExprPtrOutput() GoogleTypeExprPtrOutput {
	return o
}

func (o GoogleTypeExprPtrOutput) ToGoogleTypeExprPtrOutputWithContext(ctx context.Context) GoogleTypeExprPtrOutput {
	return o
}

func (o GoogleTypeExprPtrOutput) Elem() GoogleTypeExprOutput {
	return o.ApplyT(func(v *GoogleTypeExpr) GoogleTypeExpr {
		if v != nil {
			return *v
		}
		var ret GoogleTypeExpr
		return ret
	}).(GoogleTypeExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o GoogleTypeExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleTypeExpr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o GoogleTypeExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleTypeExpr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o GoogleTypeExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleTypeExpr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o GoogleTypeExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleTypeExpr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type GoogleTypeExprResponse struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title string `pulumi:"title"`
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type GoogleTypeExprResponseOutput struct{ *pulumi.OutputState }

func (GoogleTypeExprResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleTypeExprResponse)(nil)).Elem()
}

func (o GoogleTypeExprResponseOutput) ToGoogleTypeExprResponseOutput() GoogleTypeExprResponseOutput {
	return o
}

func (o GoogleTypeExprResponseOutput) ToGoogleTypeExprResponseOutputWithContext(ctx context.Context) GoogleTypeExprResponseOutput {
	return o
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o GoogleTypeExprResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleTypeExprResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o GoogleTypeExprResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleTypeExprResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o GoogleTypeExprResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleTypeExprResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o GoogleTypeExprResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleTypeExprResponse) string { return v.Title }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudOrgpolicyV2AlternatePolicySpecInput)(nil)).Elem(), GoogleCloudOrgpolicyV2AlternatePolicySpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudOrgpolicyV2AlternatePolicySpecPtrInput)(nil)).Elem(), GoogleCloudOrgpolicyV2AlternatePolicySpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudOrgpolicyV2PolicySpecInput)(nil)).Elem(), GoogleCloudOrgpolicyV2PolicySpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudOrgpolicyV2PolicySpecPtrInput)(nil)).Elem(), GoogleCloudOrgpolicyV2PolicySpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudOrgpolicyV2PolicySpecPolicyRuleInput)(nil)).Elem(), GoogleCloudOrgpolicyV2PolicySpecPolicyRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudOrgpolicyV2PolicySpecPolicyRuleArrayInput)(nil)).Elem(), GoogleCloudOrgpolicyV2PolicySpecPolicyRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesInput)(nil)).Elem(), GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesPtrInput)(nil)).Elem(), GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleTypeExprInput)(nil)).Elem(), GoogleTypeExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleTypeExprPtrInput)(nil)).Elem(), GoogleTypeExprArgs{})
	pulumi.RegisterOutputType(GoogleCloudOrgpolicyV2AlternatePolicySpecOutput{})
	pulumi.RegisterOutputType(GoogleCloudOrgpolicyV2AlternatePolicySpecPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudOrgpolicyV2AlternatePolicySpecResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudOrgpolicyV2PolicySpecOutput{})
	pulumi.RegisterOutputType(GoogleCloudOrgpolicyV2PolicySpecPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudOrgpolicyV2PolicySpecPolicyRuleOutput{})
	pulumi.RegisterOutputType(GoogleCloudOrgpolicyV2PolicySpecPolicyRuleArrayOutput{})
	pulumi.RegisterOutputType(GoogleCloudOrgpolicyV2PolicySpecPolicyRuleResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudOrgpolicyV2PolicySpecPolicyRuleResponseArrayOutput{})
	pulumi.RegisterOutputType(GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesOutput{})
	pulumi.RegisterOutputType(GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValuesResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudOrgpolicyV2PolicySpecResponseOutput{})
	pulumi.RegisterOutputType(GoogleTypeExprOutput{})
	pulumi.RegisterOutputType(GoogleTypeExprPtrOutput{})
	pulumi.RegisterOutputType(GoogleTypeExprResponseOutput{})
}
