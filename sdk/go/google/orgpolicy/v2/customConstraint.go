// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a CustomConstraint. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the organization does not exist. Returns a `google.rpc.Status` with `google.rpc.Code.ALREADY_EXISTS` if the constraint already exists on the given organization.
type CustomConstraint struct {
	pulumi.CustomResourceState

	// Allow or deny type.
	ActionType pulumi.StringOutput `pulumi:"actionType"`
	// Org policy condition/expression. For example: `resource.instanceName.matches("[production|test]_.*_(\d)+")'` or, `resource.management.auto_upgrade == true`
	Condition pulumi.StringOutput `pulumi:"condition"`
	// Detailed information about this custom policy constraint.
	Description pulumi.StringOutput `pulumi:"description"`
	// One line display name for the UI.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// All the operations being applied for this constraint.
	MethodTypes pulumi.StringArrayOutput `pulumi:"methodTypes"`
	// Immutable. Name of the constraint. This is unique within the organization. Format of the name should be * `organizations/{organization_id}/customConstraints/{custom_constraint_id}` Example : "organizations/123/customConstraints/custom.createOnlyE2TypeVms"
	Name           pulumi.StringOutput `pulumi:"name"`
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// Immutable. The Resource Instance type on which this policy applies to. Format will be of the form : "/" Example: * `compute.googleapis.com/Instance`.
	ResourceTypes pulumi.StringArrayOutput `pulumi:"resourceTypes"`
	// The last time this custom constraint was updated. This represents the last time that the `CreateCustomConstraint` or `UpdateCustomConstraint` RPC was called
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewCustomConstraint registers a new resource with the given unique name, arguments, and options.
func NewCustomConstraint(ctx *pulumi.Context,
	name string, args *CustomConstraintArgs, opts ...pulumi.ResourceOption) (*CustomConstraint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OrganizationId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"organizationId",
	})
	opts = append(opts, replaceOnChanges)
	var resource CustomConstraint
	err := ctx.RegisterResource("google-native:orgpolicy/v2:CustomConstraint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCustomConstraint gets an existing CustomConstraint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCustomConstraint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CustomConstraintState, opts ...pulumi.ResourceOption) (*CustomConstraint, error) {
	var resource CustomConstraint
	err := ctx.ReadResource("google-native:orgpolicy/v2:CustomConstraint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CustomConstraint resources.
type customConstraintState struct {
}

type CustomConstraintState struct {
}

func (CustomConstraintState) ElementType() reflect.Type {
	return reflect.TypeOf((*customConstraintState)(nil)).Elem()
}

type customConstraintArgs struct {
	// Allow or deny type.
	ActionType *CustomConstraintActionType `pulumi:"actionType"`
	// Org policy condition/expression. For example: `resource.instanceName.matches("[production|test]_.*_(\d)+")'` or, `resource.management.auto_upgrade == true`
	Condition *string `pulumi:"condition"`
	// Detailed information about this custom policy constraint.
	Description *string `pulumi:"description"`
	// One line display name for the UI.
	DisplayName *string `pulumi:"displayName"`
	// All the operations being applied for this constraint.
	MethodTypes []CustomConstraintMethodTypesItem `pulumi:"methodTypes"`
	// Immutable. Name of the constraint. This is unique within the organization. Format of the name should be * `organizations/{organization_id}/customConstraints/{custom_constraint_id}` Example : "organizations/123/customConstraints/custom.createOnlyE2TypeVms"
	Name           *string `pulumi:"name"`
	OrganizationId string  `pulumi:"organizationId"`
	// Immutable. The Resource Instance type on which this policy applies to. Format will be of the form : "/" Example: * `compute.googleapis.com/Instance`.
	ResourceTypes []string `pulumi:"resourceTypes"`
}

// The set of arguments for constructing a CustomConstraint resource.
type CustomConstraintArgs struct {
	// Allow or deny type.
	ActionType CustomConstraintActionTypePtrInput
	// Org policy condition/expression. For example: `resource.instanceName.matches("[production|test]_.*_(\d)+")'` or, `resource.management.auto_upgrade == true`
	Condition pulumi.StringPtrInput
	// Detailed information about this custom policy constraint.
	Description pulumi.StringPtrInput
	// One line display name for the UI.
	DisplayName pulumi.StringPtrInput
	// All the operations being applied for this constraint.
	MethodTypes CustomConstraintMethodTypesItemArrayInput
	// Immutable. Name of the constraint. This is unique within the organization. Format of the name should be * `organizations/{organization_id}/customConstraints/{custom_constraint_id}` Example : "organizations/123/customConstraints/custom.createOnlyE2TypeVms"
	Name           pulumi.StringPtrInput
	OrganizationId pulumi.StringInput
	// Immutable. The Resource Instance type on which this policy applies to. Format will be of the form : "/" Example: * `compute.googleapis.com/Instance`.
	ResourceTypes pulumi.StringArrayInput
}

func (CustomConstraintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*customConstraintArgs)(nil)).Elem()
}

type CustomConstraintInput interface {
	pulumi.Input

	ToCustomConstraintOutput() CustomConstraintOutput
	ToCustomConstraintOutputWithContext(ctx context.Context) CustomConstraintOutput
}

func (*CustomConstraint) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomConstraint)(nil)).Elem()
}

func (i *CustomConstraint) ToCustomConstraintOutput() CustomConstraintOutput {
	return i.ToCustomConstraintOutputWithContext(context.Background())
}

func (i *CustomConstraint) ToCustomConstraintOutputWithContext(ctx context.Context) CustomConstraintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomConstraintOutput)
}

type CustomConstraintOutput struct{ *pulumi.OutputState }

func (CustomConstraintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomConstraint)(nil)).Elem()
}

func (o CustomConstraintOutput) ToCustomConstraintOutput() CustomConstraintOutput {
	return o
}

func (o CustomConstraintOutput) ToCustomConstraintOutputWithContext(ctx context.Context) CustomConstraintOutput {
	return o
}

// Allow or deny type.
func (o CustomConstraintOutput) ActionType() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomConstraint) pulumi.StringOutput { return v.ActionType }).(pulumi.StringOutput)
}

// Org policy condition/expression. For example: `resource.instanceName.matches("[production|test]_.*_(\d)+")'` or, `resource.management.auto_upgrade == true`
func (o CustomConstraintOutput) Condition() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomConstraint) pulumi.StringOutput { return v.Condition }).(pulumi.StringOutput)
}

// Detailed information about this custom policy constraint.
func (o CustomConstraintOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomConstraint) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// One line display name for the UI.
func (o CustomConstraintOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomConstraint) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// All the operations being applied for this constraint.
func (o CustomConstraintOutput) MethodTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CustomConstraint) pulumi.StringArrayOutput { return v.MethodTypes }).(pulumi.StringArrayOutput)
}

// Immutable. Name of the constraint. This is unique within the organization. Format of the name should be * `organizations/{organization_id}/customConstraints/{custom_constraint_id}` Example : "organizations/123/customConstraints/custom.createOnlyE2TypeVms"
func (o CustomConstraintOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomConstraint) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o CustomConstraintOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomConstraint) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// Immutable. The Resource Instance type on which this policy applies to. Format will be of the form : "/" Example: * `compute.googleapis.com/Instance`.
func (o CustomConstraintOutput) ResourceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CustomConstraint) pulumi.StringArrayOutput { return v.ResourceTypes }).(pulumi.StringArrayOutput)
}

// The last time this custom constraint was updated. This represents the last time that the `CreateCustomConstraint` or `UpdateCustomConstraint` RPC was called
func (o CustomConstraintOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomConstraint) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CustomConstraintInput)(nil)).Elem(), &CustomConstraint{})
	pulumi.RegisterOutputType(CustomConstraintOutput{})
}
