// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a Policy. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the constraint does not exist. Returns a `google.rpc.Status` with `google.rpc.Code.ALREADY_EXISTS` if the policy already exists on the given Cloud resource.
// Auto-naming is currently not supported for this resource.
type OrganizationPolicy struct {
	pulumi.CustomResourceState

	// Deprecated.
	//
	// Deprecated: Deprecated.
	Alternate GoogleCloudOrgpolicyV2AlternatePolicySpecResponseOutput `pulumi:"alternate"`
	// dry-run policy. Audit-only policy, can be used to monitor how the policy would have impacted the existing and future resources if it's enforced.
	DryRunSpec GoogleCloudOrgpolicyV2PolicySpecResponseOutput `pulumi:"dryRunSpec"`
	// Immutable. The resource name of the Policy. Must be one of the following forms, where constraint_name is the name of the constraint which this Policy configures: * `projects/{project_number}/policies/{constraint_name}` * `folders/{folder_id}/policies/{constraint_name}` * `organizations/{organization_id}/policies/{constraint_name}` For example, "projects/123/policies/compute.disableSerialPortAccess". Note: `projects/{project_id}/policies/{constraint_name}` is also an acceptable name for API requests, but responses will return the name using the equivalent project number.
	Name           pulumi.StringOutput `pulumi:"name"`
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// Basic information about the Organization Policy.
	Spec GoogleCloudOrgpolicyV2PolicySpecResponseOutput `pulumi:"spec"`
}

// NewOrganizationPolicy registers a new resource with the given unique name, arguments, and options.
func NewOrganizationPolicy(ctx *pulumi.Context,
	name string, args *OrganizationPolicyArgs, opts ...pulumi.ResourceOption) (*OrganizationPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OrganizationId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"organizationId",
	})
	opts = append(opts, replaceOnChanges)
	var resource OrganizationPolicy
	err := ctx.RegisterResource("google-native:orgpolicy/v2:OrganizationPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrganizationPolicy gets an existing OrganizationPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrganizationPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrganizationPolicyState, opts ...pulumi.ResourceOption) (*OrganizationPolicy, error) {
	var resource OrganizationPolicy
	err := ctx.ReadResource("google-native:orgpolicy/v2:OrganizationPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OrganizationPolicy resources.
type organizationPolicyState struct {
}

type OrganizationPolicyState struct {
}

func (OrganizationPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationPolicyState)(nil)).Elem()
}

type organizationPolicyArgs struct {
	// Deprecated.
	//
	// Deprecated: Deprecated.
	Alternate *GoogleCloudOrgpolicyV2AlternatePolicySpec `pulumi:"alternate"`
	// dry-run policy. Audit-only policy, can be used to monitor how the policy would have impacted the existing and future resources if it's enforced.
	DryRunSpec *GoogleCloudOrgpolicyV2PolicySpec `pulumi:"dryRunSpec"`
	// Immutable. The resource name of the Policy. Must be one of the following forms, where constraint_name is the name of the constraint which this Policy configures: * `projects/{project_number}/policies/{constraint_name}` * `folders/{folder_id}/policies/{constraint_name}` * `organizations/{organization_id}/policies/{constraint_name}` For example, "projects/123/policies/compute.disableSerialPortAccess". Note: `projects/{project_id}/policies/{constraint_name}` is also an acceptable name for API requests, but responses will return the name using the equivalent project number.
	Name           *string `pulumi:"name"`
	OrganizationId string  `pulumi:"organizationId"`
	// Basic information about the Organization Policy.
	Spec *GoogleCloudOrgpolicyV2PolicySpec `pulumi:"spec"`
}

// The set of arguments for constructing a OrganizationPolicy resource.
type OrganizationPolicyArgs struct {
	// Deprecated.
	//
	// Deprecated: Deprecated.
	Alternate GoogleCloudOrgpolicyV2AlternatePolicySpecPtrInput
	// dry-run policy. Audit-only policy, can be used to monitor how the policy would have impacted the existing and future resources if it's enforced.
	DryRunSpec GoogleCloudOrgpolicyV2PolicySpecPtrInput
	// Immutable. The resource name of the Policy. Must be one of the following forms, where constraint_name is the name of the constraint which this Policy configures: * `projects/{project_number}/policies/{constraint_name}` * `folders/{folder_id}/policies/{constraint_name}` * `organizations/{organization_id}/policies/{constraint_name}` For example, "projects/123/policies/compute.disableSerialPortAccess". Note: `projects/{project_id}/policies/{constraint_name}` is also an acceptable name for API requests, but responses will return the name using the equivalent project number.
	Name           pulumi.StringPtrInput
	OrganizationId pulumi.StringInput
	// Basic information about the Organization Policy.
	Spec GoogleCloudOrgpolicyV2PolicySpecPtrInput
}

func (OrganizationPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationPolicyArgs)(nil)).Elem()
}

type OrganizationPolicyInput interface {
	pulumi.Input

	ToOrganizationPolicyOutput() OrganizationPolicyOutput
	ToOrganizationPolicyOutputWithContext(ctx context.Context) OrganizationPolicyOutput
}

func (*OrganizationPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationPolicy)(nil)).Elem()
}

func (i *OrganizationPolicy) ToOrganizationPolicyOutput() OrganizationPolicyOutput {
	return i.ToOrganizationPolicyOutputWithContext(context.Background())
}

func (i *OrganizationPolicy) ToOrganizationPolicyOutputWithContext(ctx context.Context) OrganizationPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationPolicyOutput)
}

type OrganizationPolicyOutput struct{ *pulumi.OutputState }

func (OrganizationPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationPolicy)(nil)).Elem()
}

func (o OrganizationPolicyOutput) ToOrganizationPolicyOutput() OrganizationPolicyOutput {
	return o
}

func (o OrganizationPolicyOutput) ToOrganizationPolicyOutputWithContext(ctx context.Context) OrganizationPolicyOutput {
	return o
}

// Deprecated.
//
// Deprecated: Deprecated.
func (o OrganizationPolicyOutput) Alternate() GoogleCloudOrgpolicyV2AlternatePolicySpecResponseOutput {
	return o.ApplyT(func(v *OrganizationPolicy) GoogleCloudOrgpolicyV2AlternatePolicySpecResponseOutput {
		return v.Alternate
	}).(GoogleCloudOrgpolicyV2AlternatePolicySpecResponseOutput)
}

// dry-run policy. Audit-only policy, can be used to monitor how the policy would have impacted the existing and future resources if it's enforced.
func (o OrganizationPolicyOutput) DryRunSpec() GoogleCloudOrgpolicyV2PolicySpecResponseOutput {
	return o.ApplyT(func(v *OrganizationPolicy) GoogleCloudOrgpolicyV2PolicySpecResponseOutput { return v.DryRunSpec }).(GoogleCloudOrgpolicyV2PolicySpecResponseOutput)
}

// Immutable. The resource name of the Policy. Must be one of the following forms, where constraint_name is the name of the constraint which this Policy configures: * `projects/{project_number}/policies/{constraint_name}` * `folders/{folder_id}/policies/{constraint_name}` * `organizations/{organization_id}/policies/{constraint_name}` For example, "projects/123/policies/compute.disableSerialPortAccess". Note: `projects/{project_id}/policies/{constraint_name}` is also an acceptable name for API requests, but responses will return the name using the equivalent project number.
func (o OrganizationPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *OrganizationPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o OrganizationPolicyOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *OrganizationPolicy) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// Basic information about the Organization Policy.
func (o OrganizationPolicyOutput) Spec() GoogleCloudOrgpolicyV2PolicySpecResponseOutput {
	return o.ApplyT(func(v *OrganizationPolicy) GoogleCloudOrgpolicyV2PolicySpecResponseOutput { return v.Spec }).(GoogleCloudOrgpolicyV2PolicySpecResponseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationPolicyInput)(nil)).Elem(), &OrganizationPolicy{})
	pulumi.RegisterOutputType(OrganizationPolicyOutput{})
}
