// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Error describes why the execution was abnormally terminated.
type ErrorResponse struct {
	// Human-readable stack trace string.
	Context string `pulumi:"context"`
	// Error message and data returned represented as a JSON string.
	Payload string `pulumi:"payload"`
	// Stack trace with detailed information of where error was generated.
	StackTrace StackTraceResponse `pulumi:"stackTrace"`
}

// Error describes why the execution was abnormally terminated.
type ErrorResponseOutput struct{ *pulumi.OutputState }

func (ErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ErrorResponse)(nil)).Elem()
}

func (o ErrorResponseOutput) ToErrorResponseOutput() ErrorResponseOutput {
	return o
}

func (o ErrorResponseOutput) ToErrorResponseOutputWithContext(ctx context.Context) ErrorResponseOutput {
	return o
}

// Human-readable stack trace string.
func (o ErrorResponseOutput) Context() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorResponse) string { return v.Context }).(pulumi.StringOutput)
}

// Error message and data returned represented as a JSON string.
func (o ErrorResponseOutput) Payload() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorResponse) string { return v.Payload }).(pulumi.StringOutput)
}

// Stack trace with detailed information of where error was generated.
func (o ErrorResponseOutput) StackTrace() StackTraceResponseOutput {
	return o.ApplyT(func(v ErrorResponse) StackTraceResponse { return v.StackTrace }).(StackTraceResponseOutput)
}

// Position contains source position information about the stack trace element such as line number, column number and length of the code block in bytes.
type PositionResponse struct {
	// The source code column position (of the line) the current instruction was generated from.
	Column string `pulumi:"column"`
	// The number of bytes of source code making up this stack trace element.
	Length string `pulumi:"length"`
	// The source code line number the current instruction was generated from.
	Line string `pulumi:"line"`
}

// Position contains source position information about the stack trace element such as line number, column number and length of the code block in bytes.
type PositionResponseOutput struct{ *pulumi.OutputState }

func (PositionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PositionResponse)(nil)).Elem()
}

func (o PositionResponseOutput) ToPositionResponseOutput() PositionResponseOutput {
	return o
}

func (o PositionResponseOutput) ToPositionResponseOutputWithContext(ctx context.Context) PositionResponseOutput {
	return o
}

// The source code column position (of the line) the current instruction was generated from.
func (o PositionResponseOutput) Column() pulumi.StringOutput {
	return o.ApplyT(func(v PositionResponse) string { return v.Column }).(pulumi.StringOutput)
}

// The number of bytes of source code making up this stack trace element.
func (o PositionResponseOutput) Length() pulumi.StringOutput {
	return o.ApplyT(func(v PositionResponse) string { return v.Length }).(pulumi.StringOutput)
}

// The source code line number the current instruction was generated from.
func (o PositionResponseOutput) Line() pulumi.StringOutput {
	return o.ApplyT(func(v PositionResponse) string { return v.Line }).(pulumi.StringOutput)
}

// A single stack element (frame) where an error occurred.
type StackTraceElementResponse struct {
	// The source position information of the stack trace element.
	Position PositionResponse `pulumi:"position"`
	// The routine where the error occurred.
	Routine string `pulumi:"routine"`
	// The step the error occurred at.
	Step string `pulumi:"step"`
}

// A single stack element (frame) where an error occurred.
type StackTraceElementResponseOutput struct{ *pulumi.OutputState }

func (StackTraceElementResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackTraceElementResponse)(nil)).Elem()
}

func (o StackTraceElementResponseOutput) ToStackTraceElementResponseOutput() StackTraceElementResponseOutput {
	return o
}

func (o StackTraceElementResponseOutput) ToStackTraceElementResponseOutputWithContext(ctx context.Context) StackTraceElementResponseOutput {
	return o
}

// The source position information of the stack trace element.
func (o StackTraceElementResponseOutput) Position() PositionResponseOutput {
	return o.ApplyT(func(v StackTraceElementResponse) PositionResponse { return v.Position }).(PositionResponseOutput)
}

// The routine where the error occurred.
func (o StackTraceElementResponseOutput) Routine() pulumi.StringOutput {
	return o.ApplyT(func(v StackTraceElementResponse) string { return v.Routine }).(pulumi.StringOutput)
}

// The step the error occurred at.
func (o StackTraceElementResponseOutput) Step() pulumi.StringOutput {
	return o.ApplyT(func(v StackTraceElementResponse) string { return v.Step }).(pulumi.StringOutput)
}

type StackTraceElementResponseArrayOutput struct{ *pulumi.OutputState }

func (StackTraceElementResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StackTraceElementResponse)(nil)).Elem()
}

func (o StackTraceElementResponseArrayOutput) ToStackTraceElementResponseArrayOutput() StackTraceElementResponseArrayOutput {
	return o
}

func (o StackTraceElementResponseArrayOutput) ToStackTraceElementResponseArrayOutputWithContext(ctx context.Context) StackTraceElementResponseArrayOutput {
	return o
}

func (o StackTraceElementResponseArrayOutput) Index(i pulumi.IntInput) StackTraceElementResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StackTraceElementResponse {
		return vs[0].([]StackTraceElementResponse)[vs[1].(int)]
	}).(StackTraceElementResponseOutput)
}

// A collection of stack elements (frames) where an error occurred.
type StackTraceResponse struct {
	// An array of stack elements.
	Elements []StackTraceElementResponse `pulumi:"elements"`
}

// A collection of stack elements (frames) where an error occurred.
type StackTraceResponseOutput struct{ *pulumi.OutputState }

func (StackTraceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackTraceResponse)(nil)).Elem()
}

func (o StackTraceResponseOutput) ToStackTraceResponseOutput() StackTraceResponseOutput {
	return o
}

func (o StackTraceResponseOutput) ToStackTraceResponseOutputWithContext(ctx context.Context) StackTraceResponseOutput {
	return o
}

// An array of stack elements.
func (o StackTraceResponseOutput) Elements() StackTraceElementResponseArrayOutput {
	return o.ApplyT(func(v StackTraceResponse) []StackTraceElementResponse { return v.Elements }).(StackTraceElementResponseArrayOutput)
}

// > **Preview:** This field is covered by the > [Pre-GA Offerings Terms](https://cloud.google.com/terms/service-terms) of > the Google Cloud Terms of Service. Pre-GA features might have limited > support, and changes to pre-GA features might not be compatible with > other pre-GA versions. For more information, see the > [launch stage descriptions](https://cloud.google.com/products#product-launch-stages). > This field is usable only if your project has access. See the > [access request page](https://docs.google.com/forms/d/e/1FAIpQLSdgwrSV8Y4xZv_tvI6X2JEGX1-ty9yizv3_EAOVHWVKXvDLEA/viewform). Represents the current status of this execution.
type StatusResponse struct {
	// A list of currently executing or last executed step names for the workflow execution currently running. If the workflow has succeeded or failed, this is the last attempted or executed step. Presently, if the current step is inside a subworkflow, the list only includes that step. In the future, the list will contain items for each step in the call stack, starting with the outermost step in the `main` subworkflow, and ending with the most deeply nested step.
	CurrentSteps []StepResponse `pulumi:"currentSteps"`
}

// > **Preview:** This field is covered by the > [Pre-GA Offerings Terms](https://cloud.google.com/terms/service-terms) of > the Google Cloud Terms of Service. Pre-GA features might have limited > support, and changes to pre-GA features might not be compatible with > other pre-GA versions. For more information, see the > [launch stage descriptions](https://cloud.google.com/products#product-launch-stages). > This field is usable only if your project has access. See the > [access request page](https://docs.google.com/forms/d/e/1FAIpQLSdgwrSV8Y4xZv_tvI6X2JEGX1-ty9yizv3_EAOVHWVKXvDLEA/viewform). Represents the current status of this execution.
type StatusResponseOutput struct{ *pulumi.OutputState }

func (StatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusResponse)(nil)).Elem()
}

func (o StatusResponseOutput) ToStatusResponseOutput() StatusResponseOutput {
	return o
}

func (o StatusResponseOutput) ToStatusResponseOutputWithContext(ctx context.Context) StatusResponseOutput {
	return o
}

// A list of currently executing or last executed step names for the workflow execution currently running. If the workflow has succeeded or failed, this is the last attempted or executed step. Presently, if the current step is inside a subworkflow, the list only includes that step. In the future, the list will contain items for each step in the call stack, starting with the outermost step in the `main` subworkflow, and ending with the most deeply nested step.
func (o StatusResponseOutput) CurrentSteps() StepResponseArrayOutput {
	return o.ApplyT(func(v StatusResponse) []StepResponse { return v.CurrentSteps }).(StepResponseArrayOutput)
}

// Represents a step of the workflow this execution is running.
type StepResponse struct {
	// Name of a routine within the workflow.
	Routine string `pulumi:"routine"`
	// Name of a step within the routine.
	Step string `pulumi:"step"`
}

// Represents a step of the workflow this execution is running.
type StepResponseOutput struct{ *pulumi.OutputState }

func (StepResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StepResponse)(nil)).Elem()
}

func (o StepResponseOutput) ToStepResponseOutput() StepResponseOutput {
	return o
}

func (o StepResponseOutput) ToStepResponseOutputWithContext(ctx context.Context) StepResponseOutput {
	return o
}

// Name of a routine within the workflow.
func (o StepResponseOutput) Routine() pulumi.StringOutput {
	return o.ApplyT(func(v StepResponse) string { return v.Routine }).(pulumi.StringOutput)
}

// Name of a step within the routine.
func (o StepResponseOutput) Step() pulumi.StringOutput {
	return o.ApplyT(func(v StepResponse) string { return v.Step }).(pulumi.StringOutput)
}

type StepResponseArrayOutput struct{ *pulumi.OutputState }

func (StepResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StepResponse)(nil)).Elem()
}

func (o StepResponseArrayOutput) ToStepResponseArrayOutput() StepResponseArrayOutput {
	return o
}

func (o StepResponseArrayOutput) ToStepResponseArrayOutputWithContext(ctx context.Context) StepResponseArrayOutput {
	return o
}

func (o StepResponseArrayOutput) Index(i pulumi.IntInput) StepResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StepResponse {
		return vs[0].([]StepResponse)[vs[1].(int)]
	}).(StepResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(ErrorResponseOutput{})
	pulumi.RegisterOutputType(PositionResponseOutput{})
	pulumi.RegisterOutputType(StackTraceElementResponseOutput{})
	pulumi.RegisterOutputType(StackTraceElementResponseArrayOutput{})
	pulumi.RegisterOutputType(StackTraceResponseOutput{})
	pulumi.RegisterOutputType(StatusResponseOutput{})
	pulumi.RegisterOutputType(StepResponseOutput{})
	pulumi.RegisterOutputType(StepResponseArrayOutput{})
}
