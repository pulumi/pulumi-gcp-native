// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// AcceleratorConfig represents a Hardware Accelerator request.
type AcceleratorConfig struct {
	// The number of the accelerator cards exposed to an instance.
	AcceleratorCount *string `pulumi:"acceleratorCount"`
	// The accelerator type resource name. List of supported accelerators [here](https://cloud.google.com/compute/docs/gpus)
	AcceleratorType *string `pulumi:"acceleratorType"`
}

// AcceleratorConfigInput is an input type that accepts AcceleratorConfigArgs and AcceleratorConfigOutput values.
// You can construct a concrete instance of `AcceleratorConfigInput` via:
//
//          AcceleratorConfigArgs{...}
type AcceleratorConfigInput interface {
	pulumi.Input

	ToAcceleratorConfigOutput() AcceleratorConfigOutput
	ToAcceleratorConfigOutputWithContext(context.Context) AcceleratorConfigOutput
}

// AcceleratorConfig represents a Hardware Accelerator request.
type AcceleratorConfigArgs struct {
	// The number of the accelerator cards exposed to an instance.
	AcceleratorCount pulumi.StringPtrInput `pulumi:"acceleratorCount"`
	// The accelerator type resource name. List of supported accelerators [here](https://cloud.google.com/compute/docs/gpus)
	AcceleratorType pulumi.StringPtrInput `pulumi:"acceleratorType"`
}

func (AcceleratorConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AcceleratorConfig)(nil)).Elem()
}

func (i AcceleratorConfigArgs) ToAcceleratorConfigOutput() AcceleratorConfigOutput {
	return i.ToAcceleratorConfigOutputWithContext(context.Background())
}

func (i AcceleratorConfigArgs) ToAcceleratorConfigOutputWithContext(ctx context.Context) AcceleratorConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcceleratorConfigOutput)
}

// AcceleratorConfigArrayInput is an input type that accepts AcceleratorConfigArray and AcceleratorConfigArrayOutput values.
// You can construct a concrete instance of `AcceleratorConfigArrayInput` via:
//
//          AcceleratorConfigArray{ AcceleratorConfigArgs{...} }
type AcceleratorConfigArrayInput interface {
	pulumi.Input

	ToAcceleratorConfigArrayOutput() AcceleratorConfigArrayOutput
	ToAcceleratorConfigArrayOutputWithContext(context.Context) AcceleratorConfigArrayOutput
}

type AcceleratorConfigArray []AcceleratorConfigInput

func (AcceleratorConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AcceleratorConfig)(nil)).Elem()
}

func (i AcceleratorConfigArray) ToAcceleratorConfigArrayOutput() AcceleratorConfigArrayOutput {
	return i.ToAcceleratorConfigArrayOutputWithContext(context.Background())
}

func (i AcceleratorConfigArray) ToAcceleratorConfigArrayOutputWithContext(ctx context.Context) AcceleratorConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcceleratorConfigArrayOutput)
}

// AcceleratorConfig represents a Hardware Accelerator request.
type AcceleratorConfigOutput struct{ *pulumi.OutputState }

func (AcceleratorConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AcceleratorConfig)(nil)).Elem()
}

func (o AcceleratorConfigOutput) ToAcceleratorConfigOutput() AcceleratorConfigOutput {
	return o
}

func (o AcceleratorConfigOutput) ToAcceleratorConfigOutputWithContext(ctx context.Context) AcceleratorConfigOutput {
	return o
}

// The number of the accelerator cards exposed to an instance.
func (o AcceleratorConfigOutput) AcceleratorCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AcceleratorConfig) *string { return v.AcceleratorCount }).(pulumi.StringPtrOutput)
}

// The accelerator type resource name. List of supported accelerators [here](https://cloud.google.com/compute/docs/gpus)
func (o AcceleratorConfigOutput) AcceleratorType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AcceleratorConfig) *string { return v.AcceleratorType }).(pulumi.StringPtrOutput)
}

type AcceleratorConfigArrayOutput struct{ *pulumi.OutputState }

func (AcceleratorConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AcceleratorConfig)(nil)).Elem()
}

func (o AcceleratorConfigArrayOutput) ToAcceleratorConfigArrayOutput() AcceleratorConfigArrayOutput {
	return o
}

func (o AcceleratorConfigArrayOutput) ToAcceleratorConfigArrayOutputWithContext(ctx context.Context) AcceleratorConfigArrayOutput {
	return o
}

func (o AcceleratorConfigArrayOutput) Index(i pulumi.IntInput) AcceleratorConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AcceleratorConfig {
		return vs[0].([]AcceleratorConfig)[vs[1].(int)]
	}).(AcceleratorConfigOutput)
}

// AcceleratorConfig represents a Hardware Accelerator request.
type AcceleratorConfigResponse struct {
	// The number of the accelerator cards exposed to an instance.
	AcceleratorCount string `pulumi:"acceleratorCount"`
	// The accelerator type resource name. List of supported accelerators [here](https://cloud.google.com/compute/docs/gpus)
	AcceleratorType string `pulumi:"acceleratorType"`
}

// AcceleratorConfigResponseInput is an input type that accepts AcceleratorConfigResponseArgs and AcceleratorConfigResponseOutput values.
// You can construct a concrete instance of `AcceleratorConfigResponseInput` via:
//
//          AcceleratorConfigResponseArgs{...}
type AcceleratorConfigResponseInput interface {
	pulumi.Input

	ToAcceleratorConfigResponseOutput() AcceleratorConfigResponseOutput
	ToAcceleratorConfigResponseOutputWithContext(context.Context) AcceleratorConfigResponseOutput
}

// AcceleratorConfig represents a Hardware Accelerator request.
type AcceleratorConfigResponseArgs struct {
	// The number of the accelerator cards exposed to an instance.
	AcceleratorCount pulumi.StringInput `pulumi:"acceleratorCount"`
	// The accelerator type resource name. List of supported accelerators [here](https://cloud.google.com/compute/docs/gpus)
	AcceleratorType pulumi.StringInput `pulumi:"acceleratorType"`
}

func (AcceleratorConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AcceleratorConfigResponse)(nil)).Elem()
}

func (i AcceleratorConfigResponseArgs) ToAcceleratorConfigResponseOutput() AcceleratorConfigResponseOutput {
	return i.ToAcceleratorConfigResponseOutputWithContext(context.Background())
}

func (i AcceleratorConfigResponseArgs) ToAcceleratorConfigResponseOutputWithContext(ctx context.Context) AcceleratorConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcceleratorConfigResponseOutput)
}

// AcceleratorConfigResponseArrayInput is an input type that accepts AcceleratorConfigResponseArray and AcceleratorConfigResponseArrayOutput values.
// You can construct a concrete instance of `AcceleratorConfigResponseArrayInput` via:
//
//          AcceleratorConfigResponseArray{ AcceleratorConfigResponseArgs{...} }
type AcceleratorConfigResponseArrayInput interface {
	pulumi.Input

	ToAcceleratorConfigResponseArrayOutput() AcceleratorConfigResponseArrayOutput
	ToAcceleratorConfigResponseArrayOutputWithContext(context.Context) AcceleratorConfigResponseArrayOutput
}

type AcceleratorConfigResponseArray []AcceleratorConfigResponseInput

func (AcceleratorConfigResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AcceleratorConfigResponse)(nil)).Elem()
}

func (i AcceleratorConfigResponseArray) ToAcceleratorConfigResponseArrayOutput() AcceleratorConfigResponseArrayOutput {
	return i.ToAcceleratorConfigResponseArrayOutputWithContext(context.Background())
}

func (i AcceleratorConfigResponseArray) ToAcceleratorConfigResponseArrayOutputWithContext(ctx context.Context) AcceleratorConfigResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcceleratorConfigResponseArrayOutput)
}

// AcceleratorConfig represents a Hardware Accelerator request.
type AcceleratorConfigResponseOutput struct{ *pulumi.OutputState }

func (AcceleratorConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AcceleratorConfigResponse)(nil)).Elem()
}

func (o AcceleratorConfigResponseOutput) ToAcceleratorConfigResponseOutput() AcceleratorConfigResponseOutput {
	return o
}

func (o AcceleratorConfigResponseOutput) ToAcceleratorConfigResponseOutputWithContext(ctx context.Context) AcceleratorConfigResponseOutput {
	return o
}

// The number of the accelerator cards exposed to an instance.
func (o AcceleratorConfigResponseOutput) AcceleratorCount() pulumi.StringOutput {
	return o.ApplyT(func(v AcceleratorConfigResponse) string { return v.AcceleratorCount }).(pulumi.StringOutput)
}

// The accelerator type resource name. List of supported accelerators [here](https://cloud.google.com/compute/docs/gpus)
func (o AcceleratorConfigResponseOutput) AcceleratorType() pulumi.StringOutput {
	return o.ApplyT(func(v AcceleratorConfigResponse) string { return v.AcceleratorType }).(pulumi.StringOutput)
}

type AcceleratorConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AcceleratorConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AcceleratorConfigResponse)(nil)).Elem()
}

func (o AcceleratorConfigResponseArrayOutput) ToAcceleratorConfigResponseArrayOutput() AcceleratorConfigResponseArrayOutput {
	return o
}

func (o AcceleratorConfigResponseArrayOutput) ToAcceleratorConfigResponseArrayOutputWithContext(ctx context.Context) AcceleratorConfigResponseArrayOutput {
	return o
}

func (o AcceleratorConfigResponseArrayOutput) Index(i pulumi.IntInput) AcceleratorConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AcceleratorConfigResponse {
		return vs[0].([]AcceleratorConfigResponse)[vs[1].(int)]
	}).(AcceleratorConfigResponseOutput)
}

// Configuration for the addons that can be automatically spun up in the cluster, enabling additional functionality.
type AddonsConfig struct {
	// Configuration for the Cloud Run addon, which allows the user to use a managed Knative service.
	CloudRunConfig *CloudRunConfig `pulumi:"cloudRunConfig"`
	// Configuration for the ConfigConnector add-on, a Kubernetes extension to manage hosted GCP services through the Kubernetes API
	ConfigConnectorConfig *ConfigConnectorConfig `pulumi:"configConnectorConfig"`
	// Configuration for NodeLocalDNS, a dns cache running on cluster nodes
	DnsCacheConfig *DnsCacheConfig `pulumi:"dnsCacheConfig"`
	// Configuration for the Compute Engine Persistent Disk CSI driver.
	GcePersistentDiskCsiDriverConfig *GcePersistentDiskCsiDriverConfig `pulumi:"gcePersistentDiskCsiDriverConfig"`
	// Configuration for the horizontal pod autoscaling feature, which increases or decreases the number of replica pods a replication controller has based on the resource usage of the existing pods.
	HorizontalPodAutoscaling *HorizontalPodAutoscaling `pulumi:"horizontalPodAutoscaling"`
	// Configuration for the HTTP (L7) load balancing controller addon, which makes it easy to set up HTTP load balancers for services in a cluster.
	HttpLoadBalancing *HttpLoadBalancing `pulumi:"httpLoadBalancing"`
	// Configuration for the Kubernetes Dashboard. This addon is deprecated, and will be disabled in 1.15. It is recommended to use the Cloud Console to manage and monitor your Kubernetes clusters, workloads and applications. For more information, see: https://cloud.google.com/kubernetes-engine/docs/concepts/dashboards
	KubernetesDashboard *KubernetesDashboard `pulumi:"kubernetesDashboard"`
	// Configuration for NetworkPolicy. This only tracks whether the addon is enabled or not on the Master, it does not track whether network policy is enabled for the nodes.
	NetworkPolicyConfig *NetworkPolicyConfig `pulumi:"networkPolicyConfig"`
}

// AddonsConfigInput is an input type that accepts AddonsConfigArgs and AddonsConfigOutput values.
// You can construct a concrete instance of `AddonsConfigInput` via:
//
//          AddonsConfigArgs{...}
type AddonsConfigInput interface {
	pulumi.Input

	ToAddonsConfigOutput() AddonsConfigOutput
	ToAddonsConfigOutputWithContext(context.Context) AddonsConfigOutput
}

// Configuration for the addons that can be automatically spun up in the cluster, enabling additional functionality.
type AddonsConfigArgs struct {
	// Configuration for the Cloud Run addon, which allows the user to use a managed Knative service.
	CloudRunConfig CloudRunConfigPtrInput `pulumi:"cloudRunConfig"`
	// Configuration for the ConfigConnector add-on, a Kubernetes extension to manage hosted GCP services through the Kubernetes API
	ConfigConnectorConfig ConfigConnectorConfigPtrInput `pulumi:"configConnectorConfig"`
	// Configuration for NodeLocalDNS, a dns cache running on cluster nodes
	DnsCacheConfig DnsCacheConfigPtrInput `pulumi:"dnsCacheConfig"`
	// Configuration for the Compute Engine Persistent Disk CSI driver.
	GcePersistentDiskCsiDriverConfig GcePersistentDiskCsiDriverConfigPtrInput `pulumi:"gcePersistentDiskCsiDriverConfig"`
	// Configuration for the horizontal pod autoscaling feature, which increases or decreases the number of replica pods a replication controller has based on the resource usage of the existing pods.
	HorizontalPodAutoscaling HorizontalPodAutoscalingPtrInput `pulumi:"horizontalPodAutoscaling"`
	// Configuration for the HTTP (L7) load balancing controller addon, which makes it easy to set up HTTP load balancers for services in a cluster.
	HttpLoadBalancing HttpLoadBalancingPtrInput `pulumi:"httpLoadBalancing"`
	// Configuration for the Kubernetes Dashboard. This addon is deprecated, and will be disabled in 1.15. It is recommended to use the Cloud Console to manage and monitor your Kubernetes clusters, workloads and applications. For more information, see: https://cloud.google.com/kubernetes-engine/docs/concepts/dashboards
	KubernetesDashboard KubernetesDashboardPtrInput `pulumi:"kubernetesDashboard"`
	// Configuration for NetworkPolicy. This only tracks whether the addon is enabled or not on the Master, it does not track whether network policy is enabled for the nodes.
	NetworkPolicyConfig NetworkPolicyConfigPtrInput `pulumi:"networkPolicyConfig"`
}

func (AddonsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AddonsConfig)(nil)).Elem()
}

func (i AddonsConfigArgs) ToAddonsConfigOutput() AddonsConfigOutput {
	return i.ToAddonsConfigOutputWithContext(context.Background())
}

func (i AddonsConfigArgs) ToAddonsConfigOutputWithContext(ctx context.Context) AddonsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddonsConfigOutput)
}

func (i AddonsConfigArgs) ToAddonsConfigPtrOutput() AddonsConfigPtrOutput {
	return i.ToAddonsConfigPtrOutputWithContext(context.Background())
}

func (i AddonsConfigArgs) ToAddonsConfigPtrOutputWithContext(ctx context.Context) AddonsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddonsConfigOutput).ToAddonsConfigPtrOutputWithContext(ctx)
}

// AddonsConfigPtrInput is an input type that accepts AddonsConfigArgs, AddonsConfigPtr and AddonsConfigPtrOutput values.
// You can construct a concrete instance of `AddonsConfigPtrInput` via:
//
//          AddonsConfigArgs{...}
//
//  or:
//
//          nil
type AddonsConfigPtrInput interface {
	pulumi.Input

	ToAddonsConfigPtrOutput() AddonsConfigPtrOutput
	ToAddonsConfigPtrOutputWithContext(context.Context) AddonsConfigPtrOutput
}

type addonsConfigPtrType AddonsConfigArgs

func AddonsConfigPtr(v *AddonsConfigArgs) AddonsConfigPtrInput {
	return (*addonsConfigPtrType)(v)
}

func (*addonsConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AddonsConfig)(nil)).Elem()
}

func (i *addonsConfigPtrType) ToAddonsConfigPtrOutput() AddonsConfigPtrOutput {
	return i.ToAddonsConfigPtrOutputWithContext(context.Background())
}

func (i *addonsConfigPtrType) ToAddonsConfigPtrOutputWithContext(ctx context.Context) AddonsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddonsConfigPtrOutput)
}

// Configuration for the addons that can be automatically spun up in the cluster, enabling additional functionality.
type AddonsConfigOutput struct{ *pulumi.OutputState }

func (AddonsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AddonsConfig)(nil)).Elem()
}

func (o AddonsConfigOutput) ToAddonsConfigOutput() AddonsConfigOutput {
	return o
}

func (o AddonsConfigOutput) ToAddonsConfigOutputWithContext(ctx context.Context) AddonsConfigOutput {
	return o
}

func (o AddonsConfigOutput) ToAddonsConfigPtrOutput() AddonsConfigPtrOutput {
	return o.ToAddonsConfigPtrOutputWithContext(context.Background())
}

func (o AddonsConfigOutput) ToAddonsConfigPtrOutputWithContext(ctx context.Context) AddonsConfigPtrOutput {
	return o.ApplyT(func(v AddonsConfig) *AddonsConfig {
		return &v
	}).(AddonsConfigPtrOutput)
}

// Configuration for the Cloud Run addon, which allows the user to use a managed Knative service.
func (o AddonsConfigOutput) CloudRunConfig() CloudRunConfigPtrOutput {
	return o.ApplyT(func(v AddonsConfig) *CloudRunConfig { return v.CloudRunConfig }).(CloudRunConfigPtrOutput)
}

// Configuration for the ConfigConnector add-on, a Kubernetes extension to manage hosted GCP services through the Kubernetes API
func (o AddonsConfigOutput) ConfigConnectorConfig() ConfigConnectorConfigPtrOutput {
	return o.ApplyT(func(v AddonsConfig) *ConfigConnectorConfig { return v.ConfigConnectorConfig }).(ConfigConnectorConfigPtrOutput)
}

// Configuration for NodeLocalDNS, a dns cache running on cluster nodes
func (o AddonsConfigOutput) DnsCacheConfig() DnsCacheConfigPtrOutput {
	return o.ApplyT(func(v AddonsConfig) *DnsCacheConfig { return v.DnsCacheConfig }).(DnsCacheConfigPtrOutput)
}

// Configuration for the Compute Engine Persistent Disk CSI driver.
func (o AddonsConfigOutput) GcePersistentDiskCsiDriverConfig() GcePersistentDiskCsiDriverConfigPtrOutput {
	return o.ApplyT(func(v AddonsConfig) *GcePersistentDiskCsiDriverConfig { return v.GcePersistentDiskCsiDriverConfig }).(GcePersistentDiskCsiDriverConfigPtrOutput)
}

// Configuration for the horizontal pod autoscaling feature, which increases or decreases the number of replica pods a replication controller has based on the resource usage of the existing pods.
func (o AddonsConfigOutput) HorizontalPodAutoscaling() HorizontalPodAutoscalingPtrOutput {
	return o.ApplyT(func(v AddonsConfig) *HorizontalPodAutoscaling { return v.HorizontalPodAutoscaling }).(HorizontalPodAutoscalingPtrOutput)
}

// Configuration for the HTTP (L7) load balancing controller addon, which makes it easy to set up HTTP load balancers for services in a cluster.
func (o AddonsConfigOutput) HttpLoadBalancing() HttpLoadBalancingPtrOutput {
	return o.ApplyT(func(v AddonsConfig) *HttpLoadBalancing { return v.HttpLoadBalancing }).(HttpLoadBalancingPtrOutput)
}

// Configuration for the Kubernetes Dashboard. This addon is deprecated, and will be disabled in 1.15. It is recommended to use the Cloud Console to manage and monitor your Kubernetes clusters, workloads and applications. For more information, see: https://cloud.google.com/kubernetes-engine/docs/concepts/dashboards
func (o AddonsConfigOutput) KubernetesDashboard() KubernetesDashboardPtrOutput {
	return o.ApplyT(func(v AddonsConfig) *KubernetesDashboard { return v.KubernetesDashboard }).(KubernetesDashboardPtrOutput)
}

// Configuration for NetworkPolicy. This only tracks whether the addon is enabled or not on the Master, it does not track whether network policy is enabled for the nodes.
func (o AddonsConfigOutput) NetworkPolicyConfig() NetworkPolicyConfigPtrOutput {
	return o.ApplyT(func(v AddonsConfig) *NetworkPolicyConfig { return v.NetworkPolicyConfig }).(NetworkPolicyConfigPtrOutput)
}

type AddonsConfigPtrOutput struct{ *pulumi.OutputState }

func (AddonsConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AddonsConfig)(nil)).Elem()
}

func (o AddonsConfigPtrOutput) ToAddonsConfigPtrOutput() AddonsConfigPtrOutput {
	return o
}

func (o AddonsConfigPtrOutput) ToAddonsConfigPtrOutputWithContext(ctx context.Context) AddonsConfigPtrOutput {
	return o
}

func (o AddonsConfigPtrOutput) Elem() AddonsConfigOutput {
	return o.ApplyT(func(v *AddonsConfig) AddonsConfig { return *v }).(AddonsConfigOutput)
}

// Configuration for the Cloud Run addon, which allows the user to use a managed Knative service.
func (o AddonsConfigPtrOutput) CloudRunConfig() CloudRunConfigPtrOutput {
	return o.ApplyT(func(v *AddonsConfig) *CloudRunConfig {
		if v == nil {
			return nil
		}
		return v.CloudRunConfig
	}).(CloudRunConfigPtrOutput)
}

// Configuration for the ConfigConnector add-on, a Kubernetes extension to manage hosted GCP services through the Kubernetes API
func (o AddonsConfigPtrOutput) ConfigConnectorConfig() ConfigConnectorConfigPtrOutput {
	return o.ApplyT(func(v *AddonsConfig) *ConfigConnectorConfig {
		if v == nil {
			return nil
		}
		return v.ConfigConnectorConfig
	}).(ConfigConnectorConfigPtrOutput)
}

// Configuration for NodeLocalDNS, a dns cache running on cluster nodes
func (o AddonsConfigPtrOutput) DnsCacheConfig() DnsCacheConfigPtrOutput {
	return o.ApplyT(func(v *AddonsConfig) *DnsCacheConfig {
		if v == nil {
			return nil
		}
		return v.DnsCacheConfig
	}).(DnsCacheConfigPtrOutput)
}

// Configuration for the Compute Engine Persistent Disk CSI driver.
func (o AddonsConfigPtrOutput) GcePersistentDiskCsiDriverConfig() GcePersistentDiskCsiDriverConfigPtrOutput {
	return o.ApplyT(func(v *AddonsConfig) *GcePersistentDiskCsiDriverConfig {
		if v == nil {
			return nil
		}
		return v.GcePersistentDiskCsiDriverConfig
	}).(GcePersistentDiskCsiDriverConfigPtrOutput)
}

// Configuration for the horizontal pod autoscaling feature, which increases or decreases the number of replica pods a replication controller has based on the resource usage of the existing pods.
func (o AddonsConfigPtrOutput) HorizontalPodAutoscaling() HorizontalPodAutoscalingPtrOutput {
	return o.ApplyT(func(v *AddonsConfig) *HorizontalPodAutoscaling {
		if v == nil {
			return nil
		}
		return v.HorizontalPodAutoscaling
	}).(HorizontalPodAutoscalingPtrOutput)
}

// Configuration for the HTTP (L7) load balancing controller addon, which makes it easy to set up HTTP load balancers for services in a cluster.
func (o AddonsConfigPtrOutput) HttpLoadBalancing() HttpLoadBalancingPtrOutput {
	return o.ApplyT(func(v *AddonsConfig) *HttpLoadBalancing {
		if v == nil {
			return nil
		}
		return v.HttpLoadBalancing
	}).(HttpLoadBalancingPtrOutput)
}

// Configuration for the Kubernetes Dashboard. This addon is deprecated, and will be disabled in 1.15. It is recommended to use the Cloud Console to manage and monitor your Kubernetes clusters, workloads and applications. For more information, see: https://cloud.google.com/kubernetes-engine/docs/concepts/dashboards
func (o AddonsConfigPtrOutput) KubernetesDashboard() KubernetesDashboardPtrOutput {
	return o.ApplyT(func(v *AddonsConfig) *KubernetesDashboard {
		if v == nil {
			return nil
		}
		return v.KubernetesDashboard
	}).(KubernetesDashboardPtrOutput)
}

// Configuration for NetworkPolicy. This only tracks whether the addon is enabled or not on the Master, it does not track whether network policy is enabled for the nodes.
func (o AddonsConfigPtrOutput) NetworkPolicyConfig() NetworkPolicyConfigPtrOutput {
	return o.ApplyT(func(v *AddonsConfig) *NetworkPolicyConfig {
		if v == nil {
			return nil
		}
		return v.NetworkPolicyConfig
	}).(NetworkPolicyConfigPtrOutput)
}

// Configuration for the addons that can be automatically spun up in the cluster, enabling additional functionality.
type AddonsConfigResponse struct {
	// Configuration for the Cloud Run addon, which allows the user to use a managed Knative service.
	CloudRunConfig CloudRunConfigResponse `pulumi:"cloudRunConfig"`
	// Configuration for the ConfigConnector add-on, a Kubernetes extension to manage hosted GCP services through the Kubernetes API
	ConfigConnectorConfig ConfigConnectorConfigResponse `pulumi:"configConnectorConfig"`
	// Configuration for NodeLocalDNS, a dns cache running on cluster nodes
	DnsCacheConfig DnsCacheConfigResponse `pulumi:"dnsCacheConfig"`
	// Configuration for the Compute Engine Persistent Disk CSI driver.
	GcePersistentDiskCsiDriverConfig GcePersistentDiskCsiDriverConfigResponse `pulumi:"gcePersistentDiskCsiDriverConfig"`
	// Configuration for the horizontal pod autoscaling feature, which increases or decreases the number of replica pods a replication controller has based on the resource usage of the existing pods.
	HorizontalPodAutoscaling HorizontalPodAutoscalingResponse `pulumi:"horizontalPodAutoscaling"`
	// Configuration for the HTTP (L7) load balancing controller addon, which makes it easy to set up HTTP load balancers for services in a cluster.
	HttpLoadBalancing HttpLoadBalancingResponse `pulumi:"httpLoadBalancing"`
	// Configuration for the Kubernetes Dashboard. This addon is deprecated, and will be disabled in 1.15. It is recommended to use the Cloud Console to manage and monitor your Kubernetes clusters, workloads and applications. For more information, see: https://cloud.google.com/kubernetes-engine/docs/concepts/dashboards
	KubernetesDashboard KubernetesDashboardResponse `pulumi:"kubernetesDashboard"`
	// Configuration for NetworkPolicy. This only tracks whether the addon is enabled or not on the Master, it does not track whether network policy is enabled for the nodes.
	NetworkPolicyConfig NetworkPolicyConfigResponse `pulumi:"networkPolicyConfig"`
}

// AddonsConfigResponseInput is an input type that accepts AddonsConfigResponseArgs and AddonsConfigResponseOutput values.
// You can construct a concrete instance of `AddonsConfigResponseInput` via:
//
//          AddonsConfigResponseArgs{...}
type AddonsConfigResponseInput interface {
	pulumi.Input

	ToAddonsConfigResponseOutput() AddonsConfigResponseOutput
	ToAddonsConfigResponseOutputWithContext(context.Context) AddonsConfigResponseOutput
}

// Configuration for the addons that can be automatically spun up in the cluster, enabling additional functionality.
type AddonsConfigResponseArgs struct {
	// Configuration for the Cloud Run addon, which allows the user to use a managed Knative service.
	CloudRunConfig CloudRunConfigResponseInput `pulumi:"cloudRunConfig"`
	// Configuration for the ConfigConnector add-on, a Kubernetes extension to manage hosted GCP services through the Kubernetes API
	ConfigConnectorConfig ConfigConnectorConfigResponseInput `pulumi:"configConnectorConfig"`
	// Configuration for NodeLocalDNS, a dns cache running on cluster nodes
	DnsCacheConfig DnsCacheConfigResponseInput `pulumi:"dnsCacheConfig"`
	// Configuration for the Compute Engine Persistent Disk CSI driver.
	GcePersistentDiskCsiDriverConfig GcePersistentDiskCsiDriverConfigResponseInput `pulumi:"gcePersistentDiskCsiDriverConfig"`
	// Configuration for the horizontal pod autoscaling feature, which increases or decreases the number of replica pods a replication controller has based on the resource usage of the existing pods.
	HorizontalPodAutoscaling HorizontalPodAutoscalingResponseInput `pulumi:"horizontalPodAutoscaling"`
	// Configuration for the HTTP (L7) load balancing controller addon, which makes it easy to set up HTTP load balancers for services in a cluster.
	HttpLoadBalancing HttpLoadBalancingResponseInput `pulumi:"httpLoadBalancing"`
	// Configuration for the Kubernetes Dashboard. This addon is deprecated, and will be disabled in 1.15. It is recommended to use the Cloud Console to manage and monitor your Kubernetes clusters, workloads and applications. For more information, see: https://cloud.google.com/kubernetes-engine/docs/concepts/dashboards
	KubernetesDashboard KubernetesDashboardResponseInput `pulumi:"kubernetesDashboard"`
	// Configuration for NetworkPolicy. This only tracks whether the addon is enabled or not on the Master, it does not track whether network policy is enabled for the nodes.
	NetworkPolicyConfig NetworkPolicyConfigResponseInput `pulumi:"networkPolicyConfig"`
}

func (AddonsConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AddonsConfigResponse)(nil)).Elem()
}

func (i AddonsConfigResponseArgs) ToAddonsConfigResponseOutput() AddonsConfigResponseOutput {
	return i.ToAddonsConfigResponseOutputWithContext(context.Background())
}

func (i AddonsConfigResponseArgs) ToAddonsConfigResponseOutputWithContext(ctx context.Context) AddonsConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddonsConfigResponseOutput)
}

func (i AddonsConfigResponseArgs) ToAddonsConfigResponsePtrOutput() AddonsConfigResponsePtrOutput {
	return i.ToAddonsConfigResponsePtrOutputWithContext(context.Background())
}

func (i AddonsConfigResponseArgs) ToAddonsConfigResponsePtrOutputWithContext(ctx context.Context) AddonsConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddonsConfigResponseOutput).ToAddonsConfigResponsePtrOutputWithContext(ctx)
}

// AddonsConfigResponsePtrInput is an input type that accepts AddonsConfigResponseArgs, AddonsConfigResponsePtr and AddonsConfigResponsePtrOutput values.
// You can construct a concrete instance of `AddonsConfigResponsePtrInput` via:
//
//          AddonsConfigResponseArgs{...}
//
//  or:
//
//          nil
type AddonsConfigResponsePtrInput interface {
	pulumi.Input

	ToAddonsConfigResponsePtrOutput() AddonsConfigResponsePtrOutput
	ToAddonsConfigResponsePtrOutputWithContext(context.Context) AddonsConfigResponsePtrOutput
}

type addonsConfigResponsePtrType AddonsConfigResponseArgs

func AddonsConfigResponsePtr(v *AddonsConfigResponseArgs) AddonsConfigResponsePtrInput {
	return (*addonsConfigResponsePtrType)(v)
}

func (*addonsConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AddonsConfigResponse)(nil)).Elem()
}

func (i *addonsConfigResponsePtrType) ToAddonsConfigResponsePtrOutput() AddonsConfigResponsePtrOutput {
	return i.ToAddonsConfigResponsePtrOutputWithContext(context.Background())
}

func (i *addonsConfigResponsePtrType) ToAddonsConfigResponsePtrOutputWithContext(ctx context.Context) AddonsConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddonsConfigResponsePtrOutput)
}

// Configuration for the addons that can be automatically spun up in the cluster, enabling additional functionality.
type AddonsConfigResponseOutput struct{ *pulumi.OutputState }

func (AddonsConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AddonsConfigResponse)(nil)).Elem()
}

func (o AddonsConfigResponseOutput) ToAddonsConfigResponseOutput() AddonsConfigResponseOutput {
	return o
}

func (o AddonsConfigResponseOutput) ToAddonsConfigResponseOutputWithContext(ctx context.Context) AddonsConfigResponseOutput {
	return o
}

func (o AddonsConfigResponseOutput) ToAddonsConfigResponsePtrOutput() AddonsConfigResponsePtrOutput {
	return o.ToAddonsConfigResponsePtrOutputWithContext(context.Background())
}

func (o AddonsConfigResponseOutput) ToAddonsConfigResponsePtrOutputWithContext(ctx context.Context) AddonsConfigResponsePtrOutput {
	return o.ApplyT(func(v AddonsConfigResponse) *AddonsConfigResponse {
		return &v
	}).(AddonsConfigResponsePtrOutput)
}

// Configuration for the Cloud Run addon, which allows the user to use a managed Knative service.
func (o AddonsConfigResponseOutput) CloudRunConfig() CloudRunConfigResponseOutput {
	return o.ApplyT(func(v AddonsConfigResponse) CloudRunConfigResponse { return v.CloudRunConfig }).(CloudRunConfigResponseOutput)
}

// Configuration for the ConfigConnector add-on, a Kubernetes extension to manage hosted GCP services through the Kubernetes API
func (o AddonsConfigResponseOutput) ConfigConnectorConfig() ConfigConnectorConfigResponseOutput {
	return o.ApplyT(func(v AddonsConfigResponse) ConfigConnectorConfigResponse { return v.ConfigConnectorConfig }).(ConfigConnectorConfigResponseOutput)
}

// Configuration for NodeLocalDNS, a dns cache running on cluster nodes
func (o AddonsConfigResponseOutput) DnsCacheConfig() DnsCacheConfigResponseOutput {
	return o.ApplyT(func(v AddonsConfigResponse) DnsCacheConfigResponse { return v.DnsCacheConfig }).(DnsCacheConfigResponseOutput)
}

// Configuration for the Compute Engine Persistent Disk CSI driver.
func (o AddonsConfigResponseOutput) GcePersistentDiskCsiDriverConfig() GcePersistentDiskCsiDriverConfigResponseOutput {
	return o.ApplyT(func(v AddonsConfigResponse) GcePersistentDiskCsiDriverConfigResponse {
		return v.GcePersistentDiskCsiDriverConfig
	}).(GcePersistentDiskCsiDriverConfigResponseOutput)
}

// Configuration for the horizontal pod autoscaling feature, which increases or decreases the number of replica pods a replication controller has based on the resource usage of the existing pods.
func (o AddonsConfigResponseOutput) HorizontalPodAutoscaling() HorizontalPodAutoscalingResponseOutput {
	return o.ApplyT(func(v AddonsConfigResponse) HorizontalPodAutoscalingResponse { return v.HorizontalPodAutoscaling }).(HorizontalPodAutoscalingResponseOutput)
}

// Configuration for the HTTP (L7) load balancing controller addon, which makes it easy to set up HTTP load balancers for services in a cluster.
func (o AddonsConfigResponseOutput) HttpLoadBalancing() HttpLoadBalancingResponseOutput {
	return o.ApplyT(func(v AddonsConfigResponse) HttpLoadBalancingResponse { return v.HttpLoadBalancing }).(HttpLoadBalancingResponseOutput)
}

// Configuration for the Kubernetes Dashboard. This addon is deprecated, and will be disabled in 1.15. It is recommended to use the Cloud Console to manage and monitor your Kubernetes clusters, workloads and applications. For more information, see: https://cloud.google.com/kubernetes-engine/docs/concepts/dashboards
func (o AddonsConfigResponseOutput) KubernetesDashboard() KubernetesDashboardResponseOutput {
	return o.ApplyT(func(v AddonsConfigResponse) KubernetesDashboardResponse { return v.KubernetesDashboard }).(KubernetesDashboardResponseOutput)
}

// Configuration for NetworkPolicy. This only tracks whether the addon is enabled or not on the Master, it does not track whether network policy is enabled for the nodes.
func (o AddonsConfigResponseOutput) NetworkPolicyConfig() NetworkPolicyConfigResponseOutput {
	return o.ApplyT(func(v AddonsConfigResponse) NetworkPolicyConfigResponse { return v.NetworkPolicyConfig }).(NetworkPolicyConfigResponseOutput)
}

type AddonsConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (AddonsConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AddonsConfigResponse)(nil)).Elem()
}

func (o AddonsConfigResponsePtrOutput) ToAddonsConfigResponsePtrOutput() AddonsConfigResponsePtrOutput {
	return o
}

func (o AddonsConfigResponsePtrOutput) ToAddonsConfigResponsePtrOutputWithContext(ctx context.Context) AddonsConfigResponsePtrOutput {
	return o
}

func (o AddonsConfigResponsePtrOutput) Elem() AddonsConfigResponseOutput {
	return o.ApplyT(func(v *AddonsConfigResponse) AddonsConfigResponse { return *v }).(AddonsConfigResponseOutput)
}

// Configuration for the Cloud Run addon, which allows the user to use a managed Knative service.
func (o AddonsConfigResponsePtrOutput) CloudRunConfig() CloudRunConfigResponsePtrOutput {
	return o.ApplyT(func(v *AddonsConfigResponse) *CloudRunConfigResponse {
		if v == nil {
			return nil
		}
		return &v.CloudRunConfig
	}).(CloudRunConfigResponsePtrOutput)
}

// Configuration for the ConfigConnector add-on, a Kubernetes extension to manage hosted GCP services through the Kubernetes API
func (o AddonsConfigResponsePtrOutput) ConfigConnectorConfig() ConfigConnectorConfigResponsePtrOutput {
	return o.ApplyT(func(v *AddonsConfigResponse) *ConfigConnectorConfigResponse {
		if v == nil {
			return nil
		}
		return &v.ConfigConnectorConfig
	}).(ConfigConnectorConfigResponsePtrOutput)
}

// Configuration for NodeLocalDNS, a dns cache running on cluster nodes
func (o AddonsConfigResponsePtrOutput) DnsCacheConfig() DnsCacheConfigResponsePtrOutput {
	return o.ApplyT(func(v *AddonsConfigResponse) *DnsCacheConfigResponse {
		if v == nil {
			return nil
		}
		return &v.DnsCacheConfig
	}).(DnsCacheConfigResponsePtrOutput)
}

// Configuration for the Compute Engine Persistent Disk CSI driver.
func (o AddonsConfigResponsePtrOutput) GcePersistentDiskCsiDriverConfig() GcePersistentDiskCsiDriverConfigResponsePtrOutput {
	return o.ApplyT(func(v *AddonsConfigResponse) *GcePersistentDiskCsiDriverConfigResponse {
		if v == nil {
			return nil
		}
		return &v.GcePersistentDiskCsiDriverConfig
	}).(GcePersistentDiskCsiDriverConfigResponsePtrOutput)
}

// Configuration for the horizontal pod autoscaling feature, which increases or decreases the number of replica pods a replication controller has based on the resource usage of the existing pods.
func (o AddonsConfigResponsePtrOutput) HorizontalPodAutoscaling() HorizontalPodAutoscalingResponsePtrOutput {
	return o.ApplyT(func(v *AddonsConfigResponse) *HorizontalPodAutoscalingResponse {
		if v == nil {
			return nil
		}
		return &v.HorizontalPodAutoscaling
	}).(HorizontalPodAutoscalingResponsePtrOutput)
}

// Configuration for the HTTP (L7) load balancing controller addon, which makes it easy to set up HTTP load balancers for services in a cluster.
func (o AddonsConfigResponsePtrOutput) HttpLoadBalancing() HttpLoadBalancingResponsePtrOutput {
	return o.ApplyT(func(v *AddonsConfigResponse) *HttpLoadBalancingResponse {
		if v == nil {
			return nil
		}
		return &v.HttpLoadBalancing
	}).(HttpLoadBalancingResponsePtrOutput)
}

// Configuration for the Kubernetes Dashboard. This addon is deprecated, and will be disabled in 1.15. It is recommended to use the Cloud Console to manage and monitor your Kubernetes clusters, workloads and applications. For more information, see: https://cloud.google.com/kubernetes-engine/docs/concepts/dashboards
func (o AddonsConfigResponsePtrOutput) KubernetesDashboard() KubernetesDashboardResponsePtrOutput {
	return o.ApplyT(func(v *AddonsConfigResponse) *KubernetesDashboardResponse {
		if v == nil {
			return nil
		}
		return &v.KubernetesDashboard
	}).(KubernetesDashboardResponsePtrOutput)
}

// Configuration for NetworkPolicy. This only tracks whether the addon is enabled or not on the Master, it does not track whether network policy is enabled for the nodes.
func (o AddonsConfigResponsePtrOutput) NetworkPolicyConfig() NetworkPolicyConfigResponsePtrOutput {
	return o.ApplyT(func(v *AddonsConfigResponse) *NetworkPolicyConfigResponse {
		if v == nil {
			return nil
		}
		return &v.NetworkPolicyConfig
	}).(NetworkPolicyConfigResponsePtrOutput)
}

// Configuration for returning group information from authenticators.
type AuthenticatorGroupsConfig struct {
	// Whether this cluster should return group membership lookups during authentication using a group of security groups.
	Enabled *bool `pulumi:"enabled"`
	// The name of the security group-of-groups to be used. Only relevant if enabled = true.
	SecurityGroup *string `pulumi:"securityGroup"`
}

// AuthenticatorGroupsConfigInput is an input type that accepts AuthenticatorGroupsConfigArgs and AuthenticatorGroupsConfigOutput values.
// You can construct a concrete instance of `AuthenticatorGroupsConfigInput` via:
//
//          AuthenticatorGroupsConfigArgs{...}
type AuthenticatorGroupsConfigInput interface {
	pulumi.Input

	ToAuthenticatorGroupsConfigOutput() AuthenticatorGroupsConfigOutput
	ToAuthenticatorGroupsConfigOutputWithContext(context.Context) AuthenticatorGroupsConfigOutput
}

// Configuration for returning group information from authenticators.
type AuthenticatorGroupsConfigArgs struct {
	// Whether this cluster should return group membership lookups during authentication using a group of security groups.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The name of the security group-of-groups to be used. Only relevant if enabled = true.
	SecurityGroup pulumi.StringPtrInput `pulumi:"securityGroup"`
}

func (AuthenticatorGroupsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthenticatorGroupsConfig)(nil)).Elem()
}

func (i AuthenticatorGroupsConfigArgs) ToAuthenticatorGroupsConfigOutput() AuthenticatorGroupsConfigOutput {
	return i.ToAuthenticatorGroupsConfigOutputWithContext(context.Background())
}

func (i AuthenticatorGroupsConfigArgs) ToAuthenticatorGroupsConfigOutputWithContext(ctx context.Context) AuthenticatorGroupsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthenticatorGroupsConfigOutput)
}

func (i AuthenticatorGroupsConfigArgs) ToAuthenticatorGroupsConfigPtrOutput() AuthenticatorGroupsConfigPtrOutput {
	return i.ToAuthenticatorGroupsConfigPtrOutputWithContext(context.Background())
}

func (i AuthenticatorGroupsConfigArgs) ToAuthenticatorGroupsConfigPtrOutputWithContext(ctx context.Context) AuthenticatorGroupsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthenticatorGroupsConfigOutput).ToAuthenticatorGroupsConfigPtrOutputWithContext(ctx)
}

// AuthenticatorGroupsConfigPtrInput is an input type that accepts AuthenticatorGroupsConfigArgs, AuthenticatorGroupsConfigPtr and AuthenticatorGroupsConfigPtrOutput values.
// You can construct a concrete instance of `AuthenticatorGroupsConfigPtrInput` via:
//
//          AuthenticatorGroupsConfigArgs{...}
//
//  or:
//
//          nil
type AuthenticatorGroupsConfigPtrInput interface {
	pulumi.Input

	ToAuthenticatorGroupsConfigPtrOutput() AuthenticatorGroupsConfigPtrOutput
	ToAuthenticatorGroupsConfigPtrOutputWithContext(context.Context) AuthenticatorGroupsConfigPtrOutput
}

type authenticatorGroupsConfigPtrType AuthenticatorGroupsConfigArgs

func AuthenticatorGroupsConfigPtr(v *AuthenticatorGroupsConfigArgs) AuthenticatorGroupsConfigPtrInput {
	return (*authenticatorGroupsConfigPtrType)(v)
}

func (*authenticatorGroupsConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthenticatorGroupsConfig)(nil)).Elem()
}

func (i *authenticatorGroupsConfigPtrType) ToAuthenticatorGroupsConfigPtrOutput() AuthenticatorGroupsConfigPtrOutput {
	return i.ToAuthenticatorGroupsConfigPtrOutputWithContext(context.Background())
}

func (i *authenticatorGroupsConfigPtrType) ToAuthenticatorGroupsConfigPtrOutputWithContext(ctx context.Context) AuthenticatorGroupsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthenticatorGroupsConfigPtrOutput)
}

// Configuration for returning group information from authenticators.
type AuthenticatorGroupsConfigOutput struct{ *pulumi.OutputState }

func (AuthenticatorGroupsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthenticatorGroupsConfig)(nil)).Elem()
}

func (o AuthenticatorGroupsConfigOutput) ToAuthenticatorGroupsConfigOutput() AuthenticatorGroupsConfigOutput {
	return o
}

func (o AuthenticatorGroupsConfigOutput) ToAuthenticatorGroupsConfigOutputWithContext(ctx context.Context) AuthenticatorGroupsConfigOutput {
	return o
}

func (o AuthenticatorGroupsConfigOutput) ToAuthenticatorGroupsConfigPtrOutput() AuthenticatorGroupsConfigPtrOutput {
	return o.ToAuthenticatorGroupsConfigPtrOutputWithContext(context.Background())
}

func (o AuthenticatorGroupsConfigOutput) ToAuthenticatorGroupsConfigPtrOutputWithContext(ctx context.Context) AuthenticatorGroupsConfigPtrOutput {
	return o.ApplyT(func(v AuthenticatorGroupsConfig) *AuthenticatorGroupsConfig {
		return &v
	}).(AuthenticatorGroupsConfigPtrOutput)
}

// Whether this cluster should return group membership lookups during authentication using a group of security groups.
func (o AuthenticatorGroupsConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AuthenticatorGroupsConfig) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The name of the security group-of-groups to be used. Only relevant if enabled = true.
func (o AuthenticatorGroupsConfigOutput) SecurityGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthenticatorGroupsConfig) *string { return v.SecurityGroup }).(pulumi.StringPtrOutput)
}

type AuthenticatorGroupsConfigPtrOutput struct{ *pulumi.OutputState }

func (AuthenticatorGroupsConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthenticatorGroupsConfig)(nil)).Elem()
}

func (o AuthenticatorGroupsConfigPtrOutput) ToAuthenticatorGroupsConfigPtrOutput() AuthenticatorGroupsConfigPtrOutput {
	return o
}

func (o AuthenticatorGroupsConfigPtrOutput) ToAuthenticatorGroupsConfigPtrOutputWithContext(ctx context.Context) AuthenticatorGroupsConfigPtrOutput {
	return o
}

func (o AuthenticatorGroupsConfigPtrOutput) Elem() AuthenticatorGroupsConfigOutput {
	return o.ApplyT(func(v *AuthenticatorGroupsConfig) AuthenticatorGroupsConfig { return *v }).(AuthenticatorGroupsConfigOutput)
}

// Whether this cluster should return group membership lookups during authentication using a group of security groups.
func (o AuthenticatorGroupsConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AuthenticatorGroupsConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The name of the security group-of-groups to be used. Only relevant if enabled = true.
func (o AuthenticatorGroupsConfigPtrOutput) SecurityGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthenticatorGroupsConfig) *string {
		if v == nil {
			return nil
		}
		return v.SecurityGroup
	}).(pulumi.StringPtrOutput)
}

// Configuration for returning group information from authenticators.
type AuthenticatorGroupsConfigResponse struct {
	// Whether this cluster should return group membership lookups during authentication using a group of security groups.
	Enabled bool `pulumi:"enabled"`
	// The name of the security group-of-groups to be used. Only relevant if enabled = true.
	SecurityGroup string `pulumi:"securityGroup"`
}

// AuthenticatorGroupsConfigResponseInput is an input type that accepts AuthenticatorGroupsConfigResponseArgs and AuthenticatorGroupsConfigResponseOutput values.
// You can construct a concrete instance of `AuthenticatorGroupsConfigResponseInput` via:
//
//          AuthenticatorGroupsConfigResponseArgs{...}
type AuthenticatorGroupsConfigResponseInput interface {
	pulumi.Input

	ToAuthenticatorGroupsConfigResponseOutput() AuthenticatorGroupsConfigResponseOutput
	ToAuthenticatorGroupsConfigResponseOutputWithContext(context.Context) AuthenticatorGroupsConfigResponseOutput
}

// Configuration for returning group information from authenticators.
type AuthenticatorGroupsConfigResponseArgs struct {
	// Whether this cluster should return group membership lookups during authentication using a group of security groups.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// The name of the security group-of-groups to be used. Only relevant if enabled = true.
	SecurityGroup pulumi.StringInput `pulumi:"securityGroup"`
}

func (AuthenticatorGroupsConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthenticatorGroupsConfigResponse)(nil)).Elem()
}

func (i AuthenticatorGroupsConfigResponseArgs) ToAuthenticatorGroupsConfigResponseOutput() AuthenticatorGroupsConfigResponseOutput {
	return i.ToAuthenticatorGroupsConfigResponseOutputWithContext(context.Background())
}

func (i AuthenticatorGroupsConfigResponseArgs) ToAuthenticatorGroupsConfigResponseOutputWithContext(ctx context.Context) AuthenticatorGroupsConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthenticatorGroupsConfigResponseOutput)
}

func (i AuthenticatorGroupsConfigResponseArgs) ToAuthenticatorGroupsConfigResponsePtrOutput() AuthenticatorGroupsConfigResponsePtrOutput {
	return i.ToAuthenticatorGroupsConfigResponsePtrOutputWithContext(context.Background())
}

func (i AuthenticatorGroupsConfigResponseArgs) ToAuthenticatorGroupsConfigResponsePtrOutputWithContext(ctx context.Context) AuthenticatorGroupsConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthenticatorGroupsConfigResponseOutput).ToAuthenticatorGroupsConfigResponsePtrOutputWithContext(ctx)
}

// AuthenticatorGroupsConfigResponsePtrInput is an input type that accepts AuthenticatorGroupsConfigResponseArgs, AuthenticatorGroupsConfigResponsePtr and AuthenticatorGroupsConfigResponsePtrOutput values.
// You can construct a concrete instance of `AuthenticatorGroupsConfigResponsePtrInput` via:
//
//          AuthenticatorGroupsConfigResponseArgs{...}
//
//  or:
//
//          nil
type AuthenticatorGroupsConfigResponsePtrInput interface {
	pulumi.Input

	ToAuthenticatorGroupsConfigResponsePtrOutput() AuthenticatorGroupsConfigResponsePtrOutput
	ToAuthenticatorGroupsConfigResponsePtrOutputWithContext(context.Context) AuthenticatorGroupsConfigResponsePtrOutput
}

type authenticatorGroupsConfigResponsePtrType AuthenticatorGroupsConfigResponseArgs

func AuthenticatorGroupsConfigResponsePtr(v *AuthenticatorGroupsConfigResponseArgs) AuthenticatorGroupsConfigResponsePtrInput {
	return (*authenticatorGroupsConfigResponsePtrType)(v)
}

func (*authenticatorGroupsConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthenticatorGroupsConfigResponse)(nil)).Elem()
}

func (i *authenticatorGroupsConfigResponsePtrType) ToAuthenticatorGroupsConfigResponsePtrOutput() AuthenticatorGroupsConfigResponsePtrOutput {
	return i.ToAuthenticatorGroupsConfigResponsePtrOutputWithContext(context.Background())
}

func (i *authenticatorGroupsConfigResponsePtrType) ToAuthenticatorGroupsConfigResponsePtrOutputWithContext(ctx context.Context) AuthenticatorGroupsConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthenticatorGroupsConfigResponsePtrOutput)
}

// Configuration for returning group information from authenticators.
type AuthenticatorGroupsConfigResponseOutput struct{ *pulumi.OutputState }

func (AuthenticatorGroupsConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthenticatorGroupsConfigResponse)(nil)).Elem()
}

func (o AuthenticatorGroupsConfigResponseOutput) ToAuthenticatorGroupsConfigResponseOutput() AuthenticatorGroupsConfigResponseOutput {
	return o
}

func (o AuthenticatorGroupsConfigResponseOutput) ToAuthenticatorGroupsConfigResponseOutputWithContext(ctx context.Context) AuthenticatorGroupsConfigResponseOutput {
	return o
}

func (o AuthenticatorGroupsConfigResponseOutput) ToAuthenticatorGroupsConfigResponsePtrOutput() AuthenticatorGroupsConfigResponsePtrOutput {
	return o.ToAuthenticatorGroupsConfigResponsePtrOutputWithContext(context.Background())
}

func (o AuthenticatorGroupsConfigResponseOutput) ToAuthenticatorGroupsConfigResponsePtrOutputWithContext(ctx context.Context) AuthenticatorGroupsConfigResponsePtrOutput {
	return o.ApplyT(func(v AuthenticatorGroupsConfigResponse) *AuthenticatorGroupsConfigResponse {
		return &v
	}).(AuthenticatorGroupsConfigResponsePtrOutput)
}

// Whether this cluster should return group membership lookups during authentication using a group of security groups.
func (o AuthenticatorGroupsConfigResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v AuthenticatorGroupsConfigResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The name of the security group-of-groups to be used. Only relevant if enabled = true.
func (o AuthenticatorGroupsConfigResponseOutput) SecurityGroup() pulumi.StringOutput {
	return o.ApplyT(func(v AuthenticatorGroupsConfigResponse) string { return v.SecurityGroup }).(pulumi.StringOutput)
}

type AuthenticatorGroupsConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (AuthenticatorGroupsConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthenticatorGroupsConfigResponse)(nil)).Elem()
}

func (o AuthenticatorGroupsConfigResponsePtrOutput) ToAuthenticatorGroupsConfigResponsePtrOutput() AuthenticatorGroupsConfigResponsePtrOutput {
	return o
}

func (o AuthenticatorGroupsConfigResponsePtrOutput) ToAuthenticatorGroupsConfigResponsePtrOutputWithContext(ctx context.Context) AuthenticatorGroupsConfigResponsePtrOutput {
	return o
}

func (o AuthenticatorGroupsConfigResponsePtrOutput) Elem() AuthenticatorGroupsConfigResponseOutput {
	return o.ApplyT(func(v *AuthenticatorGroupsConfigResponse) AuthenticatorGroupsConfigResponse { return *v }).(AuthenticatorGroupsConfigResponseOutput)
}

// Whether this cluster should return group membership lookups during authentication using a group of security groups.
func (o AuthenticatorGroupsConfigResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AuthenticatorGroupsConfigResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The name of the security group-of-groups to be used. Only relevant if enabled = true.
func (o AuthenticatorGroupsConfigResponsePtrOutput) SecurityGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthenticatorGroupsConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SecurityGroup
	}).(pulumi.StringPtrOutput)
}

// AutoUpgradeOptions defines the set of options for the user to control how the Auto Upgrades will proceed.
type AutoUpgradeOptions struct {
	// [Output only] This field is set when upgrades are about to commence with the approximate start time for the upgrades, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
	AutoUpgradeStartTime *string `pulumi:"autoUpgradeStartTime"`
	// [Output only] This field is set when upgrades are about to commence with the description of the upgrade.
	Description *string `pulumi:"description"`
}

// AutoUpgradeOptionsInput is an input type that accepts AutoUpgradeOptionsArgs and AutoUpgradeOptionsOutput values.
// You can construct a concrete instance of `AutoUpgradeOptionsInput` via:
//
//          AutoUpgradeOptionsArgs{...}
type AutoUpgradeOptionsInput interface {
	pulumi.Input

	ToAutoUpgradeOptionsOutput() AutoUpgradeOptionsOutput
	ToAutoUpgradeOptionsOutputWithContext(context.Context) AutoUpgradeOptionsOutput
}

// AutoUpgradeOptions defines the set of options for the user to control how the Auto Upgrades will proceed.
type AutoUpgradeOptionsArgs struct {
	// [Output only] This field is set when upgrades are about to commence with the approximate start time for the upgrades, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
	AutoUpgradeStartTime pulumi.StringPtrInput `pulumi:"autoUpgradeStartTime"`
	// [Output only] This field is set when upgrades are about to commence with the description of the upgrade.
	Description pulumi.StringPtrInput `pulumi:"description"`
}

func (AutoUpgradeOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoUpgradeOptions)(nil)).Elem()
}

func (i AutoUpgradeOptionsArgs) ToAutoUpgradeOptionsOutput() AutoUpgradeOptionsOutput {
	return i.ToAutoUpgradeOptionsOutputWithContext(context.Background())
}

func (i AutoUpgradeOptionsArgs) ToAutoUpgradeOptionsOutputWithContext(ctx context.Context) AutoUpgradeOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoUpgradeOptionsOutput)
}

func (i AutoUpgradeOptionsArgs) ToAutoUpgradeOptionsPtrOutput() AutoUpgradeOptionsPtrOutput {
	return i.ToAutoUpgradeOptionsPtrOutputWithContext(context.Background())
}

func (i AutoUpgradeOptionsArgs) ToAutoUpgradeOptionsPtrOutputWithContext(ctx context.Context) AutoUpgradeOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoUpgradeOptionsOutput).ToAutoUpgradeOptionsPtrOutputWithContext(ctx)
}

// AutoUpgradeOptionsPtrInput is an input type that accepts AutoUpgradeOptionsArgs, AutoUpgradeOptionsPtr and AutoUpgradeOptionsPtrOutput values.
// You can construct a concrete instance of `AutoUpgradeOptionsPtrInput` via:
//
//          AutoUpgradeOptionsArgs{...}
//
//  or:
//
//          nil
type AutoUpgradeOptionsPtrInput interface {
	pulumi.Input

	ToAutoUpgradeOptionsPtrOutput() AutoUpgradeOptionsPtrOutput
	ToAutoUpgradeOptionsPtrOutputWithContext(context.Context) AutoUpgradeOptionsPtrOutput
}

type autoUpgradeOptionsPtrType AutoUpgradeOptionsArgs

func AutoUpgradeOptionsPtr(v *AutoUpgradeOptionsArgs) AutoUpgradeOptionsPtrInput {
	return (*autoUpgradeOptionsPtrType)(v)
}

func (*autoUpgradeOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoUpgradeOptions)(nil)).Elem()
}

func (i *autoUpgradeOptionsPtrType) ToAutoUpgradeOptionsPtrOutput() AutoUpgradeOptionsPtrOutput {
	return i.ToAutoUpgradeOptionsPtrOutputWithContext(context.Background())
}

func (i *autoUpgradeOptionsPtrType) ToAutoUpgradeOptionsPtrOutputWithContext(ctx context.Context) AutoUpgradeOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoUpgradeOptionsPtrOutput)
}

// AutoUpgradeOptions defines the set of options for the user to control how the Auto Upgrades will proceed.
type AutoUpgradeOptionsOutput struct{ *pulumi.OutputState }

func (AutoUpgradeOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoUpgradeOptions)(nil)).Elem()
}

func (o AutoUpgradeOptionsOutput) ToAutoUpgradeOptionsOutput() AutoUpgradeOptionsOutput {
	return o
}

func (o AutoUpgradeOptionsOutput) ToAutoUpgradeOptionsOutputWithContext(ctx context.Context) AutoUpgradeOptionsOutput {
	return o
}

func (o AutoUpgradeOptionsOutput) ToAutoUpgradeOptionsPtrOutput() AutoUpgradeOptionsPtrOutput {
	return o.ToAutoUpgradeOptionsPtrOutputWithContext(context.Background())
}

func (o AutoUpgradeOptionsOutput) ToAutoUpgradeOptionsPtrOutputWithContext(ctx context.Context) AutoUpgradeOptionsPtrOutput {
	return o.ApplyT(func(v AutoUpgradeOptions) *AutoUpgradeOptions {
		return &v
	}).(AutoUpgradeOptionsPtrOutput)
}

// [Output only] This field is set when upgrades are about to commence with the approximate start time for the upgrades, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
func (o AutoUpgradeOptionsOutput) AutoUpgradeStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoUpgradeOptions) *string { return v.AutoUpgradeStartTime }).(pulumi.StringPtrOutput)
}

// [Output only] This field is set when upgrades are about to commence with the description of the upgrade.
func (o AutoUpgradeOptionsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoUpgradeOptions) *string { return v.Description }).(pulumi.StringPtrOutput)
}

type AutoUpgradeOptionsPtrOutput struct{ *pulumi.OutputState }

func (AutoUpgradeOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoUpgradeOptions)(nil)).Elem()
}

func (o AutoUpgradeOptionsPtrOutput) ToAutoUpgradeOptionsPtrOutput() AutoUpgradeOptionsPtrOutput {
	return o
}

func (o AutoUpgradeOptionsPtrOutput) ToAutoUpgradeOptionsPtrOutputWithContext(ctx context.Context) AutoUpgradeOptionsPtrOutput {
	return o
}

func (o AutoUpgradeOptionsPtrOutput) Elem() AutoUpgradeOptionsOutput {
	return o.ApplyT(func(v *AutoUpgradeOptions) AutoUpgradeOptions { return *v }).(AutoUpgradeOptionsOutput)
}

// [Output only] This field is set when upgrades are about to commence with the approximate start time for the upgrades, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
func (o AutoUpgradeOptionsPtrOutput) AutoUpgradeStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoUpgradeOptions) *string {
		if v == nil {
			return nil
		}
		return v.AutoUpgradeStartTime
	}).(pulumi.StringPtrOutput)
}

// [Output only] This field is set when upgrades are about to commence with the description of the upgrade.
func (o AutoUpgradeOptionsPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoUpgradeOptions) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// AutoUpgradeOptions defines the set of options for the user to control how the Auto Upgrades will proceed.
type AutoUpgradeOptionsResponse struct {
	// [Output only] This field is set when upgrades are about to commence with the approximate start time for the upgrades, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
	AutoUpgradeStartTime string `pulumi:"autoUpgradeStartTime"`
	// [Output only] This field is set when upgrades are about to commence with the description of the upgrade.
	Description string `pulumi:"description"`
}

// AutoUpgradeOptionsResponseInput is an input type that accepts AutoUpgradeOptionsResponseArgs and AutoUpgradeOptionsResponseOutput values.
// You can construct a concrete instance of `AutoUpgradeOptionsResponseInput` via:
//
//          AutoUpgradeOptionsResponseArgs{...}
type AutoUpgradeOptionsResponseInput interface {
	pulumi.Input

	ToAutoUpgradeOptionsResponseOutput() AutoUpgradeOptionsResponseOutput
	ToAutoUpgradeOptionsResponseOutputWithContext(context.Context) AutoUpgradeOptionsResponseOutput
}

// AutoUpgradeOptions defines the set of options for the user to control how the Auto Upgrades will proceed.
type AutoUpgradeOptionsResponseArgs struct {
	// [Output only] This field is set when upgrades are about to commence with the approximate start time for the upgrades, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
	AutoUpgradeStartTime pulumi.StringInput `pulumi:"autoUpgradeStartTime"`
	// [Output only] This field is set when upgrades are about to commence with the description of the upgrade.
	Description pulumi.StringInput `pulumi:"description"`
}

func (AutoUpgradeOptionsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoUpgradeOptionsResponse)(nil)).Elem()
}

func (i AutoUpgradeOptionsResponseArgs) ToAutoUpgradeOptionsResponseOutput() AutoUpgradeOptionsResponseOutput {
	return i.ToAutoUpgradeOptionsResponseOutputWithContext(context.Background())
}

func (i AutoUpgradeOptionsResponseArgs) ToAutoUpgradeOptionsResponseOutputWithContext(ctx context.Context) AutoUpgradeOptionsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoUpgradeOptionsResponseOutput)
}

func (i AutoUpgradeOptionsResponseArgs) ToAutoUpgradeOptionsResponsePtrOutput() AutoUpgradeOptionsResponsePtrOutput {
	return i.ToAutoUpgradeOptionsResponsePtrOutputWithContext(context.Background())
}

func (i AutoUpgradeOptionsResponseArgs) ToAutoUpgradeOptionsResponsePtrOutputWithContext(ctx context.Context) AutoUpgradeOptionsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoUpgradeOptionsResponseOutput).ToAutoUpgradeOptionsResponsePtrOutputWithContext(ctx)
}

// AutoUpgradeOptionsResponsePtrInput is an input type that accepts AutoUpgradeOptionsResponseArgs, AutoUpgradeOptionsResponsePtr and AutoUpgradeOptionsResponsePtrOutput values.
// You can construct a concrete instance of `AutoUpgradeOptionsResponsePtrInput` via:
//
//          AutoUpgradeOptionsResponseArgs{...}
//
//  or:
//
//          nil
type AutoUpgradeOptionsResponsePtrInput interface {
	pulumi.Input

	ToAutoUpgradeOptionsResponsePtrOutput() AutoUpgradeOptionsResponsePtrOutput
	ToAutoUpgradeOptionsResponsePtrOutputWithContext(context.Context) AutoUpgradeOptionsResponsePtrOutput
}

type autoUpgradeOptionsResponsePtrType AutoUpgradeOptionsResponseArgs

func AutoUpgradeOptionsResponsePtr(v *AutoUpgradeOptionsResponseArgs) AutoUpgradeOptionsResponsePtrInput {
	return (*autoUpgradeOptionsResponsePtrType)(v)
}

func (*autoUpgradeOptionsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoUpgradeOptionsResponse)(nil)).Elem()
}

func (i *autoUpgradeOptionsResponsePtrType) ToAutoUpgradeOptionsResponsePtrOutput() AutoUpgradeOptionsResponsePtrOutput {
	return i.ToAutoUpgradeOptionsResponsePtrOutputWithContext(context.Background())
}

func (i *autoUpgradeOptionsResponsePtrType) ToAutoUpgradeOptionsResponsePtrOutputWithContext(ctx context.Context) AutoUpgradeOptionsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoUpgradeOptionsResponsePtrOutput)
}

// AutoUpgradeOptions defines the set of options for the user to control how the Auto Upgrades will proceed.
type AutoUpgradeOptionsResponseOutput struct{ *pulumi.OutputState }

func (AutoUpgradeOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoUpgradeOptionsResponse)(nil)).Elem()
}

func (o AutoUpgradeOptionsResponseOutput) ToAutoUpgradeOptionsResponseOutput() AutoUpgradeOptionsResponseOutput {
	return o
}

func (o AutoUpgradeOptionsResponseOutput) ToAutoUpgradeOptionsResponseOutputWithContext(ctx context.Context) AutoUpgradeOptionsResponseOutput {
	return o
}

func (o AutoUpgradeOptionsResponseOutput) ToAutoUpgradeOptionsResponsePtrOutput() AutoUpgradeOptionsResponsePtrOutput {
	return o.ToAutoUpgradeOptionsResponsePtrOutputWithContext(context.Background())
}

func (o AutoUpgradeOptionsResponseOutput) ToAutoUpgradeOptionsResponsePtrOutputWithContext(ctx context.Context) AutoUpgradeOptionsResponsePtrOutput {
	return o.ApplyT(func(v AutoUpgradeOptionsResponse) *AutoUpgradeOptionsResponse {
		return &v
	}).(AutoUpgradeOptionsResponsePtrOutput)
}

// [Output only] This field is set when upgrades are about to commence with the approximate start time for the upgrades, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
func (o AutoUpgradeOptionsResponseOutput) AutoUpgradeStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v AutoUpgradeOptionsResponse) string { return v.AutoUpgradeStartTime }).(pulumi.StringOutput)
}

// [Output only] This field is set when upgrades are about to commence with the description of the upgrade.
func (o AutoUpgradeOptionsResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v AutoUpgradeOptionsResponse) string { return v.Description }).(pulumi.StringOutput)
}

type AutoUpgradeOptionsResponsePtrOutput struct{ *pulumi.OutputState }

func (AutoUpgradeOptionsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoUpgradeOptionsResponse)(nil)).Elem()
}

func (o AutoUpgradeOptionsResponsePtrOutput) ToAutoUpgradeOptionsResponsePtrOutput() AutoUpgradeOptionsResponsePtrOutput {
	return o
}

func (o AutoUpgradeOptionsResponsePtrOutput) ToAutoUpgradeOptionsResponsePtrOutputWithContext(ctx context.Context) AutoUpgradeOptionsResponsePtrOutput {
	return o
}

func (o AutoUpgradeOptionsResponsePtrOutput) Elem() AutoUpgradeOptionsResponseOutput {
	return o.ApplyT(func(v *AutoUpgradeOptionsResponse) AutoUpgradeOptionsResponse { return *v }).(AutoUpgradeOptionsResponseOutput)
}

// [Output only] This field is set when upgrades are about to commence with the approximate start time for the upgrades, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
func (o AutoUpgradeOptionsResponsePtrOutput) AutoUpgradeStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoUpgradeOptionsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AutoUpgradeStartTime
	}).(pulumi.StringPtrOutput)
}

// [Output only] This field is set when upgrades are about to commence with the description of the upgrade.
func (o AutoUpgradeOptionsResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoUpgradeOptionsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Description
	}).(pulumi.StringPtrOutput)
}

// Autopilot is the configuration for Autopilot settings on the cluster.
type Autopilot struct {
	// Enable Autopilot
	Enabled *bool `pulumi:"enabled"`
}

// AutopilotInput is an input type that accepts AutopilotArgs and AutopilotOutput values.
// You can construct a concrete instance of `AutopilotInput` via:
//
//          AutopilotArgs{...}
type AutopilotInput interface {
	pulumi.Input

	ToAutopilotOutput() AutopilotOutput
	ToAutopilotOutputWithContext(context.Context) AutopilotOutput
}

// Autopilot is the configuration for Autopilot settings on the cluster.
type AutopilotArgs struct {
	// Enable Autopilot
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (AutopilotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Autopilot)(nil)).Elem()
}

func (i AutopilotArgs) ToAutopilotOutput() AutopilotOutput {
	return i.ToAutopilotOutputWithContext(context.Background())
}

func (i AutopilotArgs) ToAutopilotOutputWithContext(ctx context.Context) AutopilotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutopilotOutput)
}

func (i AutopilotArgs) ToAutopilotPtrOutput() AutopilotPtrOutput {
	return i.ToAutopilotPtrOutputWithContext(context.Background())
}

func (i AutopilotArgs) ToAutopilotPtrOutputWithContext(ctx context.Context) AutopilotPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutopilotOutput).ToAutopilotPtrOutputWithContext(ctx)
}

// AutopilotPtrInput is an input type that accepts AutopilotArgs, AutopilotPtr and AutopilotPtrOutput values.
// You can construct a concrete instance of `AutopilotPtrInput` via:
//
//          AutopilotArgs{...}
//
//  or:
//
//          nil
type AutopilotPtrInput interface {
	pulumi.Input

	ToAutopilotPtrOutput() AutopilotPtrOutput
	ToAutopilotPtrOutputWithContext(context.Context) AutopilotPtrOutput
}

type autopilotPtrType AutopilotArgs

func AutopilotPtr(v *AutopilotArgs) AutopilotPtrInput {
	return (*autopilotPtrType)(v)
}

func (*autopilotPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Autopilot)(nil)).Elem()
}

func (i *autopilotPtrType) ToAutopilotPtrOutput() AutopilotPtrOutput {
	return i.ToAutopilotPtrOutputWithContext(context.Background())
}

func (i *autopilotPtrType) ToAutopilotPtrOutputWithContext(ctx context.Context) AutopilotPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutopilotPtrOutput)
}

// Autopilot is the configuration for Autopilot settings on the cluster.
type AutopilotOutput struct{ *pulumi.OutputState }

func (AutopilotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Autopilot)(nil)).Elem()
}

func (o AutopilotOutput) ToAutopilotOutput() AutopilotOutput {
	return o
}

func (o AutopilotOutput) ToAutopilotOutputWithContext(ctx context.Context) AutopilotOutput {
	return o
}

func (o AutopilotOutput) ToAutopilotPtrOutput() AutopilotPtrOutput {
	return o.ToAutopilotPtrOutputWithContext(context.Background())
}

func (o AutopilotOutput) ToAutopilotPtrOutputWithContext(ctx context.Context) AutopilotPtrOutput {
	return o.ApplyT(func(v Autopilot) *Autopilot {
		return &v
	}).(AutopilotPtrOutput)
}

// Enable Autopilot
func (o AutopilotOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Autopilot) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type AutopilotPtrOutput struct{ *pulumi.OutputState }

func (AutopilotPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Autopilot)(nil)).Elem()
}

func (o AutopilotPtrOutput) ToAutopilotPtrOutput() AutopilotPtrOutput {
	return o
}

func (o AutopilotPtrOutput) ToAutopilotPtrOutputWithContext(ctx context.Context) AutopilotPtrOutput {
	return o
}

func (o AutopilotPtrOutput) Elem() AutopilotOutput {
	return o.ApplyT(func(v *Autopilot) Autopilot { return *v }).(AutopilotOutput)
}

// Enable Autopilot
func (o AutopilotPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Autopilot) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Autopilot is the configuration for Autopilot settings on the cluster.
type AutopilotResponse struct {
	// Enable Autopilot
	Enabled bool `pulumi:"enabled"`
}

// AutopilotResponseInput is an input type that accepts AutopilotResponseArgs and AutopilotResponseOutput values.
// You can construct a concrete instance of `AutopilotResponseInput` via:
//
//          AutopilotResponseArgs{...}
type AutopilotResponseInput interface {
	pulumi.Input

	ToAutopilotResponseOutput() AutopilotResponseOutput
	ToAutopilotResponseOutputWithContext(context.Context) AutopilotResponseOutput
}

// Autopilot is the configuration for Autopilot settings on the cluster.
type AutopilotResponseArgs struct {
	// Enable Autopilot
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

func (AutopilotResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutopilotResponse)(nil)).Elem()
}

func (i AutopilotResponseArgs) ToAutopilotResponseOutput() AutopilotResponseOutput {
	return i.ToAutopilotResponseOutputWithContext(context.Background())
}

func (i AutopilotResponseArgs) ToAutopilotResponseOutputWithContext(ctx context.Context) AutopilotResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutopilotResponseOutput)
}

func (i AutopilotResponseArgs) ToAutopilotResponsePtrOutput() AutopilotResponsePtrOutput {
	return i.ToAutopilotResponsePtrOutputWithContext(context.Background())
}

func (i AutopilotResponseArgs) ToAutopilotResponsePtrOutputWithContext(ctx context.Context) AutopilotResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutopilotResponseOutput).ToAutopilotResponsePtrOutputWithContext(ctx)
}

// AutopilotResponsePtrInput is an input type that accepts AutopilotResponseArgs, AutopilotResponsePtr and AutopilotResponsePtrOutput values.
// You can construct a concrete instance of `AutopilotResponsePtrInput` via:
//
//          AutopilotResponseArgs{...}
//
//  or:
//
//          nil
type AutopilotResponsePtrInput interface {
	pulumi.Input

	ToAutopilotResponsePtrOutput() AutopilotResponsePtrOutput
	ToAutopilotResponsePtrOutputWithContext(context.Context) AutopilotResponsePtrOutput
}

type autopilotResponsePtrType AutopilotResponseArgs

func AutopilotResponsePtr(v *AutopilotResponseArgs) AutopilotResponsePtrInput {
	return (*autopilotResponsePtrType)(v)
}

func (*autopilotResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutopilotResponse)(nil)).Elem()
}

func (i *autopilotResponsePtrType) ToAutopilotResponsePtrOutput() AutopilotResponsePtrOutput {
	return i.ToAutopilotResponsePtrOutputWithContext(context.Background())
}

func (i *autopilotResponsePtrType) ToAutopilotResponsePtrOutputWithContext(ctx context.Context) AutopilotResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutopilotResponsePtrOutput)
}

// Autopilot is the configuration for Autopilot settings on the cluster.
type AutopilotResponseOutput struct{ *pulumi.OutputState }

func (AutopilotResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutopilotResponse)(nil)).Elem()
}

func (o AutopilotResponseOutput) ToAutopilotResponseOutput() AutopilotResponseOutput {
	return o
}

func (o AutopilotResponseOutput) ToAutopilotResponseOutputWithContext(ctx context.Context) AutopilotResponseOutput {
	return o
}

func (o AutopilotResponseOutput) ToAutopilotResponsePtrOutput() AutopilotResponsePtrOutput {
	return o.ToAutopilotResponsePtrOutputWithContext(context.Background())
}

func (o AutopilotResponseOutput) ToAutopilotResponsePtrOutputWithContext(ctx context.Context) AutopilotResponsePtrOutput {
	return o.ApplyT(func(v AutopilotResponse) *AutopilotResponse {
		return &v
	}).(AutopilotResponsePtrOutput)
}

// Enable Autopilot
func (o AutopilotResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v AutopilotResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type AutopilotResponsePtrOutput struct{ *pulumi.OutputState }

func (AutopilotResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutopilotResponse)(nil)).Elem()
}

func (o AutopilotResponsePtrOutput) ToAutopilotResponsePtrOutput() AutopilotResponsePtrOutput {
	return o
}

func (o AutopilotResponsePtrOutput) ToAutopilotResponsePtrOutputWithContext(ctx context.Context) AutopilotResponsePtrOutput {
	return o
}

func (o AutopilotResponsePtrOutput) Elem() AutopilotResponseOutput {
	return o.ApplyT(func(v *AutopilotResponse) AutopilotResponse { return *v }).(AutopilotResponseOutput)
}

// Enable Autopilot
func (o AutopilotResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AutopilotResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// AutoprovisioningNodePoolDefaults contains defaults for a node pool created by NAP.
type AutoprovisioningNodePoolDefaults struct {
	// The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption
	BootDiskKmsKey *string `pulumi:"bootDiskKmsKey"`
	// Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the default disk size is 100GB.
	DiskSizeGb *int `pulumi:"diskSizeGb"`
	// Type of the disk attached to each node (e.g. 'pd-standard', 'pd-ssd' or 'pd-balanced') If unspecified, the default disk type is 'pd-standard'
	DiskType *string `pulumi:"diskType"`
	// Specifies the node management options for NAP created node-pools.
	Management *NodeManagement `pulumi:"management"`
	// Minimum CPU platform to be used for NAP created node pools. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: Intel Haswell or minCpuPlatform: Intel Sandy Bridge. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform) To unset the min cpu platform field pass "automatic" as field value.
	MinCpuPlatform *string `pulumi:"minCpuPlatform"`
	// Scopes that are used by NAP when creating node pools.
	OauthScopes []string `pulumi:"oauthScopes"`
	// The Google Cloud Platform Service Account to be used by the node VMs.
	ServiceAccount *string `pulumi:"serviceAccount"`
	// Shielded Instance options.
	ShieldedInstanceConfig *ShieldedInstanceConfig `pulumi:"shieldedInstanceConfig"`
	// Specifies the upgrade settings for NAP created node pools
	UpgradeSettings *UpgradeSettings `pulumi:"upgradeSettings"`
}

// AutoprovisioningNodePoolDefaultsInput is an input type that accepts AutoprovisioningNodePoolDefaultsArgs and AutoprovisioningNodePoolDefaultsOutput values.
// You can construct a concrete instance of `AutoprovisioningNodePoolDefaultsInput` via:
//
//          AutoprovisioningNodePoolDefaultsArgs{...}
type AutoprovisioningNodePoolDefaultsInput interface {
	pulumi.Input

	ToAutoprovisioningNodePoolDefaultsOutput() AutoprovisioningNodePoolDefaultsOutput
	ToAutoprovisioningNodePoolDefaultsOutputWithContext(context.Context) AutoprovisioningNodePoolDefaultsOutput
}

// AutoprovisioningNodePoolDefaults contains defaults for a node pool created by NAP.
type AutoprovisioningNodePoolDefaultsArgs struct {
	// The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption
	BootDiskKmsKey pulumi.StringPtrInput `pulumi:"bootDiskKmsKey"`
	// Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the default disk size is 100GB.
	DiskSizeGb pulumi.IntPtrInput `pulumi:"diskSizeGb"`
	// Type of the disk attached to each node (e.g. 'pd-standard', 'pd-ssd' or 'pd-balanced') If unspecified, the default disk type is 'pd-standard'
	DiskType pulumi.StringPtrInput `pulumi:"diskType"`
	// Specifies the node management options for NAP created node-pools.
	Management NodeManagementPtrInput `pulumi:"management"`
	// Minimum CPU platform to be used for NAP created node pools. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: Intel Haswell or minCpuPlatform: Intel Sandy Bridge. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform) To unset the min cpu platform field pass "automatic" as field value.
	MinCpuPlatform pulumi.StringPtrInput `pulumi:"minCpuPlatform"`
	// Scopes that are used by NAP when creating node pools.
	OauthScopes pulumi.StringArrayInput `pulumi:"oauthScopes"`
	// The Google Cloud Platform Service Account to be used by the node VMs.
	ServiceAccount pulumi.StringPtrInput `pulumi:"serviceAccount"`
	// Shielded Instance options.
	ShieldedInstanceConfig ShieldedInstanceConfigPtrInput `pulumi:"shieldedInstanceConfig"`
	// Specifies the upgrade settings for NAP created node pools
	UpgradeSettings UpgradeSettingsPtrInput `pulumi:"upgradeSettings"`
}

func (AutoprovisioningNodePoolDefaultsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoprovisioningNodePoolDefaults)(nil)).Elem()
}

func (i AutoprovisioningNodePoolDefaultsArgs) ToAutoprovisioningNodePoolDefaultsOutput() AutoprovisioningNodePoolDefaultsOutput {
	return i.ToAutoprovisioningNodePoolDefaultsOutputWithContext(context.Background())
}

func (i AutoprovisioningNodePoolDefaultsArgs) ToAutoprovisioningNodePoolDefaultsOutputWithContext(ctx context.Context) AutoprovisioningNodePoolDefaultsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoprovisioningNodePoolDefaultsOutput)
}

func (i AutoprovisioningNodePoolDefaultsArgs) ToAutoprovisioningNodePoolDefaultsPtrOutput() AutoprovisioningNodePoolDefaultsPtrOutput {
	return i.ToAutoprovisioningNodePoolDefaultsPtrOutputWithContext(context.Background())
}

func (i AutoprovisioningNodePoolDefaultsArgs) ToAutoprovisioningNodePoolDefaultsPtrOutputWithContext(ctx context.Context) AutoprovisioningNodePoolDefaultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoprovisioningNodePoolDefaultsOutput).ToAutoprovisioningNodePoolDefaultsPtrOutputWithContext(ctx)
}

// AutoprovisioningNodePoolDefaultsPtrInput is an input type that accepts AutoprovisioningNodePoolDefaultsArgs, AutoprovisioningNodePoolDefaultsPtr and AutoprovisioningNodePoolDefaultsPtrOutput values.
// You can construct a concrete instance of `AutoprovisioningNodePoolDefaultsPtrInput` via:
//
//          AutoprovisioningNodePoolDefaultsArgs{...}
//
//  or:
//
//          nil
type AutoprovisioningNodePoolDefaultsPtrInput interface {
	pulumi.Input

	ToAutoprovisioningNodePoolDefaultsPtrOutput() AutoprovisioningNodePoolDefaultsPtrOutput
	ToAutoprovisioningNodePoolDefaultsPtrOutputWithContext(context.Context) AutoprovisioningNodePoolDefaultsPtrOutput
}

type autoprovisioningNodePoolDefaultsPtrType AutoprovisioningNodePoolDefaultsArgs

func AutoprovisioningNodePoolDefaultsPtr(v *AutoprovisioningNodePoolDefaultsArgs) AutoprovisioningNodePoolDefaultsPtrInput {
	return (*autoprovisioningNodePoolDefaultsPtrType)(v)
}

func (*autoprovisioningNodePoolDefaultsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoprovisioningNodePoolDefaults)(nil)).Elem()
}

func (i *autoprovisioningNodePoolDefaultsPtrType) ToAutoprovisioningNodePoolDefaultsPtrOutput() AutoprovisioningNodePoolDefaultsPtrOutput {
	return i.ToAutoprovisioningNodePoolDefaultsPtrOutputWithContext(context.Background())
}

func (i *autoprovisioningNodePoolDefaultsPtrType) ToAutoprovisioningNodePoolDefaultsPtrOutputWithContext(ctx context.Context) AutoprovisioningNodePoolDefaultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoprovisioningNodePoolDefaultsPtrOutput)
}

// AutoprovisioningNodePoolDefaults contains defaults for a node pool created by NAP.
type AutoprovisioningNodePoolDefaultsOutput struct{ *pulumi.OutputState }

func (AutoprovisioningNodePoolDefaultsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoprovisioningNodePoolDefaults)(nil)).Elem()
}

func (o AutoprovisioningNodePoolDefaultsOutput) ToAutoprovisioningNodePoolDefaultsOutput() AutoprovisioningNodePoolDefaultsOutput {
	return o
}

func (o AutoprovisioningNodePoolDefaultsOutput) ToAutoprovisioningNodePoolDefaultsOutputWithContext(ctx context.Context) AutoprovisioningNodePoolDefaultsOutput {
	return o
}

func (o AutoprovisioningNodePoolDefaultsOutput) ToAutoprovisioningNodePoolDefaultsPtrOutput() AutoprovisioningNodePoolDefaultsPtrOutput {
	return o.ToAutoprovisioningNodePoolDefaultsPtrOutputWithContext(context.Background())
}

func (o AutoprovisioningNodePoolDefaultsOutput) ToAutoprovisioningNodePoolDefaultsPtrOutputWithContext(ctx context.Context) AutoprovisioningNodePoolDefaultsPtrOutput {
	return o.ApplyT(func(v AutoprovisioningNodePoolDefaults) *AutoprovisioningNodePoolDefaults {
		return &v
	}).(AutoprovisioningNodePoolDefaultsPtrOutput)
}

// The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption
func (o AutoprovisioningNodePoolDefaultsOutput) BootDiskKmsKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoprovisioningNodePoolDefaults) *string { return v.BootDiskKmsKey }).(pulumi.StringPtrOutput)
}

// Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the default disk size is 100GB.
func (o AutoprovisioningNodePoolDefaultsOutput) DiskSizeGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AutoprovisioningNodePoolDefaults) *int { return v.DiskSizeGb }).(pulumi.IntPtrOutput)
}

// Type of the disk attached to each node (e.g. 'pd-standard', 'pd-ssd' or 'pd-balanced') If unspecified, the default disk type is 'pd-standard'
func (o AutoprovisioningNodePoolDefaultsOutput) DiskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoprovisioningNodePoolDefaults) *string { return v.DiskType }).(pulumi.StringPtrOutput)
}

// Specifies the node management options for NAP created node-pools.
func (o AutoprovisioningNodePoolDefaultsOutput) Management() NodeManagementPtrOutput {
	return o.ApplyT(func(v AutoprovisioningNodePoolDefaults) *NodeManagement { return v.Management }).(NodeManagementPtrOutput)
}

// Minimum CPU platform to be used for NAP created node pools. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: Intel Haswell or minCpuPlatform: Intel Sandy Bridge. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform) To unset the min cpu platform field pass "automatic" as field value.
func (o AutoprovisioningNodePoolDefaultsOutput) MinCpuPlatform() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoprovisioningNodePoolDefaults) *string { return v.MinCpuPlatform }).(pulumi.StringPtrOutput)
}

// Scopes that are used by NAP when creating node pools.
func (o AutoprovisioningNodePoolDefaultsOutput) OauthScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AutoprovisioningNodePoolDefaults) []string { return v.OauthScopes }).(pulumi.StringArrayOutput)
}

// The Google Cloud Platform Service Account to be used by the node VMs.
func (o AutoprovisioningNodePoolDefaultsOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoprovisioningNodePoolDefaults) *string { return v.ServiceAccount }).(pulumi.StringPtrOutput)
}

// Shielded Instance options.
func (o AutoprovisioningNodePoolDefaultsOutput) ShieldedInstanceConfig() ShieldedInstanceConfigPtrOutput {
	return o.ApplyT(func(v AutoprovisioningNodePoolDefaults) *ShieldedInstanceConfig { return v.ShieldedInstanceConfig }).(ShieldedInstanceConfigPtrOutput)
}

// Specifies the upgrade settings for NAP created node pools
func (o AutoprovisioningNodePoolDefaultsOutput) UpgradeSettings() UpgradeSettingsPtrOutput {
	return o.ApplyT(func(v AutoprovisioningNodePoolDefaults) *UpgradeSettings { return v.UpgradeSettings }).(UpgradeSettingsPtrOutput)
}

type AutoprovisioningNodePoolDefaultsPtrOutput struct{ *pulumi.OutputState }

func (AutoprovisioningNodePoolDefaultsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoprovisioningNodePoolDefaults)(nil)).Elem()
}

func (o AutoprovisioningNodePoolDefaultsPtrOutput) ToAutoprovisioningNodePoolDefaultsPtrOutput() AutoprovisioningNodePoolDefaultsPtrOutput {
	return o
}

func (o AutoprovisioningNodePoolDefaultsPtrOutput) ToAutoprovisioningNodePoolDefaultsPtrOutputWithContext(ctx context.Context) AutoprovisioningNodePoolDefaultsPtrOutput {
	return o
}

func (o AutoprovisioningNodePoolDefaultsPtrOutput) Elem() AutoprovisioningNodePoolDefaultsOutput {
	return o.ApplyT(func(v *AutoprovisioningNodePoolDefaults) AutoprovisioningNodePoolDefaults { return *v }).(AutoprovisioningNodePoolDefaultsOutput)
}

// The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption
func (o AutoprovisioningNodePoolDefaultsPtrOutput) BootDiskKmsKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoprovisioningNodePoolDefaults) *string {
		if v == nil {
			return nil
		}
		return v.BootDiskKmsKey
	}).(pulumi.StringPtrOutput)
}

// Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the default disk size is 100GB.
func (o AutoprovisioningNodePoolDefaultsPtrOutput) DiskSizeGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoprovisioningNodePoolDefaults) *int {
		if v == nil {
			return nil
		}
		return v.DiskSizeGb
	}).(pulumi.IntPtrOutput)
}

// Type of the disk attached to each node (e.g. 'pd-standard', 'pd-ssd' or 'pd-balanced') If unspecified, the default disk type is 'pd-standard'
func (o AutoprovisioningNodePoolDefaultsPtrOutput) DiskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoprovisioningNodePoolDefaults) *string {
		if v == nil {
			return nil
		}
		return v.DiskType
	}).(pulumi.StringPtrOutput)
}

// Specifies the node management options for NAP created node-pools.
func (o AutoprovisioningNodePoolDefaultsPtrOutput) Management() NodeManagementPtrOutput {
	return o.ApplyT(func(v *AutoprovisioningNodePoolDefaults) *NodeManagement {
		if v == nil {
			return nil
		}
		return v.Management
	}).(NodeManagementPtrOutput)
}

// Minimum CPU platform to be used for NAP created node pools. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: Intel Haswell or minCpuPlatform: Intel Sandy Bridge. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform) To unset the min cpu platform field pass "automatic" as field value.
func (o AutoprovisioningNodePoolDefaultsPtrOutput) MinCpuPlatform() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoprovisioningNodePoolDefaults) *string {
		if v == nil {
			return nil
		}
		return v.MinCpuPlatform
	}).(pulumi.StringPtrOutput)
}

// Scopes that are used by NAP when creating node pools.
func (o AutoprovisioningNodePoolDefaultsPtrOutput) OauthScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AutoprovisioningNodePoolDefaults) []string {
		if v == nil {
			return nil
		}
		return v.OauthScopes
	}).(pulumi.StringArrayOutput)
}

// The Google Cloud Platform Service Account to be used by the node VMs.
func (o AutoprovisioningNodePoolDefaultsPtrOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoprovisioningNodePoolDefaults) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccount
	}).(pulumi.StringPtrOutput)
}

// Shielded Instance options.
func (o AutoprovisioningNodePoolDefaultsPtrOutput) ShieldedInstanceConfig() ShieldedInstanceConfigPtrOutput {
	return o.ApplyT(func(v *AutoprovisioningNodePoolDefaults) *ShieldedInstanceConfig {
		if v == nil {
			return nil
		}
		return v.ShieldedInstanceConfig
	}).(ShieldedInstanceConfigPtrOutput)
}

// Specifies the upgrade settings for NAP created node pools
func (o AutoprovisioningNodePoolDefaultsPtrOutput) UpgradeSettings() UpgradeSettingsPtrOutput {
	return o.ApplyT(func(v *AutoprovisioningNodePoolDefaults) *UpgradeSettings {
		if v == nil {
			return nil
		}
		return v.UpgradeSettings
	}).(UpgradeSettingsPtrOutput)
}

// AutoprovisioningNodePoolDefaults contains defaults for a node pool created by NAP.
type AutoprovisioningNodePoolDefaultsResponse struct {
	// The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption
	BootDiskKmsKey string `pulumi:"bootDiskKmsKey"`
	// Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the default disk size is 100GB.
	DiskSizeGb int `pulumi:"diskSizeGb"`
	// Type of the disk attached to each node (e.g. 'pd-standard', 'pd-ssd' or 'pd-balanced') If unspecified, the default disk type is 'pd-standard'
	DiskType string `pulumi:"diskType"`
	// Specifies the node management options for NAP created node-pools.
	Management NodeManagementResponse `pulumi:"management"`
	// Minimum CPU platform to be used for NAP created node pools. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: Intel Haswell or minCpuPlatform: Intel Sandy Bridge. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform) To unset the min cpu platform field pass "automatic" as field value.
	MinCpuPlatform string `pulumi:"minCpuPlatform"`
	// Scopes that are used by NAP when creating node pools.
	OauthScopes []string `pulumi:"oauthScopes"`
	// The Google Cloud Platform Service Account to be used by the node VMs.
	ServiceAccount string `pulumi:"serviceAccount"`
	// Shielded Instance options.
	ShieldedInstanceConfig ShieldedInstanceConfigResponse `pulumi:"shieldedInstanceConfig"`
	// Specifies the upgrade settings for NAP created node pools
	UpgradeSettings UpgradeSettingsResponse `pulumi:"upgradeSettings"`
}

// AutoprovisioningNodePoolDefaultsResponseInput is an input type that accepts AutoprovisioningNodePoolDefaultsResponseArgs and AutoprovisioningNodePoolDefaultsResponseOutput values.
// You can construct a concrete instance of `AutoprovisioningNodePoolDefaultsResponseInput` via:
//
//          AutoprovisioningNodePoolDefaultsResponseArgs{...}
type AutoprovisioningNodePoolDefaultsResponseInput interface {
	pulumi.Input

	ToAutoprovisioningNodePoolDefaultsResponseOutput() AutoprovisioningNodePoolDefaultsResponseOutput
	ToAutoprovisioningNodePoolDefaultsResponseOutputWithContext(context.Context) AutoprovisioningNodePoolDefaultsResponseOutput
}

// AutoprovisioningNodePoolDefaults contains defaults for a node pool created by NAP.
type AutoprovisioningNodePoolDefaultsResponseArgs struct {
	// The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption
	BootDiskKmsKey pulumi.StringInput `pulumi:"bootDiskKmsKey"`
	// Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the default disk size is 100GB.
	DiskSizeGb pulumi.IntInput `pulumi:"diskSizeGb"`
	// Type of the disk attached to each node (e.g. 'pd-standard', 'pd-ssd' or 'pd-balanced') If unspecified, the default disk type is 'pd-standard'
	DiskType pulumi.StringInput `pulumi:"diskType"`
	// Specifies the node management options for NAP created node-pools.
	Management NodeManagementResponseInput `pulumi:"management"`
	// Minimum CPU platform to be used for NAP created node pools. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: Intel Haswell or minCpuPlatform: Intel Sandy Bridge. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform) To unset the min cpu platform field pass "automatic" as field value.
	MinCpuPlatform pulumi.StringInput `pulumi:"minCpuPlatform"`
	// Scopes that are used by NAP when creating node pools.
	OauthScopes pulumi.StringArrayInput `pulumi:"oauthScopes"`
	// The Google Cloud Platform Service Account to be used by the node VMs.
	ServiceAccount pulumi.StringInput `pulumi:"serviceAccount"`
	// Shielded Instance options.
	ShieldedInstanceConfig ShieldedInstanceConfigResponseInput `pulumi:"shieldedInstanceConfig"`
	// Specifies the upgrade settings for NAP created node pools
	UpgradeSettings UpgradeSettingsResponseInput `pulumi:"upgradeSettings"`
}

func (AutoprovisioningNodePoolDefaultsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoprovisioningNodePoolDefaultsResponse)(nil)).Elem()
}

func (i AutoprovisioningNodePoolDefaultsResponseArgs) ToAutoprovisioningNodePoolDefaultsResponseOutput() AutoprovisioningNodePoolDefaultsResponseOutput {
	return i.ToAutoprovisioningNodePoolDefaultsResponseOutputWithContext(context.Background())
}

func (i AutoprovisioningNodePoolDefaultsResponseArgs) ToAutoprovisioningNodePoolDefaultsResponseOutputWithContext(ctx context.Context) AutoprovisioningNodePoolDefaultsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoprovisioningNodePoolDefaultsResponseOutput)
}

func (i AutoprovisioningNodePoolDefaultsResponseArgs) ToAutoprovisioningNodePoolDefaultsResponsePtrOutput() AutoprovisioningNodePoolDefaultsResponsePtrOutput {
	return i.ToAutoprovisioningNodePoolDefaultsResponsePtrOutputWithContext(context.Background())
}

func (i AutoprovisioningNodePoolDefaultsResponseArgs) ToAutoprovisioningNodePoolDefaultsResponsePtrOutputWithContext(ctx context.Context) AutoprovisioningNodePoolDefaultsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoprovisioningNodePoolDefaultsResponseOutput).ToAutoprovisioningNodePoolDefaultsResponsePtrOutputWithContext(ctx)
}

// AutoprovisioningNodePoolDefaultsResponsePtrInput is an input type that accepts AutoprovisioningNodePoolDefaultsResponseArgs, AutoprovisioningNodePoolDefaultsResponsePtr and AutoprovisioningNodePoolDefaultsResponsePtrOutput values.
// You can construct a concrete instance of `AutoprovisioningNodePoolDefaultsResponsePtrInput` via:
//
//          AutoprovisioningNodePoolDefaultsResponseArgs{...}
//
//  or:
//
//          nil
type AutoprovisioningNodePoolDefaultsResponsePtrInput interface {
	pulumi.Input

	ToAutoprovisioningNodePoolDefaultsResponsePtrOutput() AutoprovisioningNodePoolDefaultsResponsePtrOutput
	ToAutoprovisioningNodePoolDefaultsResponsePtrOutputWithContext(context.Context) AutoprovisioningNodePoolDefaultsResponsePtrOutput
}

type autoprovisioningNodePoolDefaultsResponsePtrType AutoprovisioningNodePoolDefaultsResponseArgs

func AutoprovisioningNodePoolDefaultsResponsePtr(v *AutoprovisioningNodePoolDefaultsResponseArgs) AutoprovisioningNodePoolDefaultsResponsePtrInput {
	return (*autoprovisioningNodePoolDefaultsResponsePtrType)(v)
}

func (*autoprovisioningNodePoolDefaultsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoprovisioningNodePoolDefaultsResponse)(nil)).Elem()
}

func (i *autoprovisioningNodePoolDefaultsResponsePtrType) ToAutoprovisioningNodePoolDefaultsResponsePtrOutput() AutoprovisioningNodePoolDefaultsResponsePtrOutput {
	return i.ToAutoprovisioningNodePoolDefaultsResponsePtrOutputWithContext(context.Background())
}

func (i *autoprovisioningNodePoolDefaultsResponsePtrType) ToAutoprovisioningNodePoolDefaultsResponsePtrOutputWithContext(ctx context.Context) AutoprovisioningNodePoolDefaultsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoprovisioningNodePoolDefaultsResponsePtrOutput)
}

// AutoprovisioningNodePoolDefaults contains defaults for a node pool created by NAP.
type AutoprovisioningNodePoolDefaultsResponseOutput struct{ *pulumi.OutputState }

func (AutoprovisioningNodePoolDefaultsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoprovisioningNodePoolDefaultsResponse)(nil)).Elem()
}

func (o AutoprovisioningNodePoolDefaultsResponseOutput) ToAutoprovisioningNodePoolDefaultsResponseOutput() AutoprovisioningNodePoolDefaultsResponseOutput {
	return o
}

func (o AutoprovisioningNodePoolDefaultsResponseOutput) ToAutoprovisioningNodePoolDefaultsResponseOutputWithContext(ctx context.Context) AutoprovisioningNodePoolDefaultsResponseOutput {
	return o
}

func (o AutoprovisioningNodePoolDefaultsResponseOutput) ToAutoprovisioningNodePoolDefaultsResponsePtrOutput() AutoprovisioningNodePoolDefaultsResponsePtrOutput {
	return o.ToAutoprovisioningNodePoolDefaultsResponsePtrOutputWithContext(context.Background())
}

func (o AutoprovisioningNodePoolDefaultsResponseOutput) ToAutoprovisioningNodePoolDefaultsResponsePtrOutputWithContext(ctx context.Context) AutoprovisioningNodePoolDefaultsResponsePtrOutput {
	return o.ApplyT(func(v AutoprovisioningNodePoolDefaultsResponse) *AutoprovisioningNodePoolDefaultsResponse {
		return &v
	}).(AutoprovisioningNodePoolDefaultsResponsePtrOutput)
}

// The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption
func (o AutoprovisioningNodePoolDefaultsResponseOutput) BootDiskKmsKey() pulumi.StringOutput {
	return o.ApplyT(func(v AutoprovisioningNodePoolDefaultsResponse) string { return v.BootDiskKmsKey }).(pulumi.StringOutput)
}

// Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the default disk size is 100GB.
func (o AutoprovisioningNodePoolDefaultsResponseOutput) DiskSizeGb() pulumi.IntOutput {
	return o.ApplyT(func(v AutoprovisioningNodePoolDefaultsResponse) int { return v.DiskSizeGb }).(pulumi.IntOutput)
}

// Type of the disk attached to each node (e.g. 'pd-standard', 'pd-ssd' or 'pd-balanced') If unspecified, the default disk type is 'pd-standard'
func (o AutoprovisioningNodePoolDefaultsResponseOutput) DiskType() pulumi.StringOutput {
	return o.ApplyT(func(v AutoprovisioningNodePoolDefaultsResponse) string { return v.DiskType }).(pulumi.StringOutput)
}

// Specifies the node management options for NAP created node-pools.
func (o AutoprovisioningNodePoolDefaultsResponseOutput) Management() NodeManagementResponseOutput {
	return o.ApplyT(func(v AutoprovisioningNodePoolDefaultsResponse) NodeManagementResponse { return v.Management }).(NodeManagementResponseOutput)
}

// Minimum CPU platform to be used for NAP created node pools. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: Intel Haswell or minCpuPlatform: Intel Sandy Bridge. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform) To unset the min cpu platform field pass "automatic" as field value.
func (o AutoprovisioningNodePoolDefaultsResponseOutput) MinCpuPlatform() pulumi.StringOutput {
	return o.ApplyT(func(v AutoprovisioningNodePoolDefaultsResponse) string { return v.MinCpuPlatform }).(pulumi.StringOutput)
}

// Scopes that are used by NAP when creating node pools.
func (o AutoprovisioningNodePoolDefaultsResponseOutput) OauthScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AutoprovisioningNodePoolDefaultsResponse) []string { return v.OauthScopes }).(pulumi.StringArrayOutput)
}

// The Google Cloud Platform Service Account to be used by the node VMs.
func (o AutoprovisioningNodePoolDefaultsResponseOutput) ServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v AutoprovisioningNodePoolDefaultsResponse) string { return v.ServiceAccount }).(pulumi.StringOutput)
}

// Shielded Instance options.
func (o AutoprovisioningNodePoolDefaultsResponseOutput) ShieldedInstanceConfig() ShieldedInstanceConfigResponseOutput {
	return o.ApplyT(func(v AutoprovisioningNodePoolDefaultsResponse) ShieldedInstanceConfigResponse {
		return v.ShieldedInstanceConfig
	}).(ShieldedInstanceConfigResponseOutput)
}

// Specifies the upgrade settings for NAP created node pools
func (o AutoprovisioningNodePoolDefaultsResponseOutput) UpgradeSettings() UpgradeSettingsResponseOutput {
	return o.ApplyT(func(v AutoprovisioningNodePoolDefaultsResponse) UpgradeSettingsResponse { return v.UpgradeSettings }).(UpgradeSettingsResponseOutput)
}

type AutoprovisioningNodePoolDefaultsResponsePtrOutput struct{ *pulumi.OutputState }

func (AutoprovisioningNodePoolDefaultsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoprovisioningNodePoolDefaultsResponse)(nil)).Elem()
}

func (o AutoprovisioningNodePoolDefaultsResponsePtrOutput) ToAutoprovisioningNodePoolDefaultsResponsePtrOutput() AutoprovisioningNodePoolDefaultsResponsePtrOutput {
	return o
}

func (o AutoprovisioningNodePoolDefaultsResponsePtrOutput) ToAutoprovisioningNodePoolDefaultsResponsePtrOutputWithContext(ctx context.Context) AutoprovisioningNodePoolDefaultsResponsePtrOutput {
	return o
}

func (o AutoprovisioningNodePoolDefaultsResponsePtrOutput) Elem() AutoprovisioningNodePoolDefaultsResponseOutput {
	return o.ApplyT(func(v *AutoprovisioningNodePoolDefaultsResponse) AutoprovisioningNodePoolDefaultsResponse { return *v }).(AutoprovisioningNodePoolDefaultsResponseOutput)
}

// The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption
func (o AutoprovisioningNodePoolDefaultsResponsePtrOutput) BootDiskKmsKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoprovisioningNodePoolDefaultsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.BootDiskKmsKey
	}).(pulumi.StringPtrOutput)
}

// Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the default disk size is 100GB.
func (o AutoprovisioningNodePoolDefaultsResponsePtrOutput) DiskSizeGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoprovisioningNodePoolDefaultsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.DiskSizeGb
	}).(pulumi.IntPtrOutput)
}

// Type of the disk attached to each node (e.g. 'pd-standard', 'pd-ssd' or 'pd-balanced') If unspecified, the default disk type is 'pd-standard'
func (o AutoprovisioningNodePoolDefaultsResponsePtrOutput) DiskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoprovisioningNodePoolDefaultsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DiskType
	}).(pulumi.StringPtrOutput)
}

// Specifies the node management options for NAP created node-pools.
func (o AutoprovisioningNodePoolDefaultsResponsePtrOutput) Management() NodeManagementResponsePtrOutput {
	return o.ApplyT(func(v *AutoprovisioningNodePoolDefaultsResponse) *NodeManagementResponse {
		if v == nil {
			return nil
		}
		return &v.Management
	}).(NodeManagementResponsePtrOutput)
}

// Minimum CPU platform to be used for NAP created node pools. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: Intel Haswell or minCpuPlatform: Intel Sandy Bridge. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform) To unset the min cpu platform field pass "automatic" as field value.
func (o AutoprovisioningNodePoolDefaultsResponsePtrOutput) MinCpuPlatform() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoprovisioningNodePoolDefaultsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.MinCpuPlatform
	}).(pulumi.StringPtrOutput)
}

// Scopes that are used by NAP when creating node pools.
func (o AutoprovisioningNodePoolDefaultsResponsePtrOutput) OauthScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AutoprovisioningNodePoolDefaultsResponse) []string {
		if v == nil {
			return nil
		}
		return v.OauthScopes
	}).(pulumi.StringArrayOutput)
}

// The Google Cloud Platform Service Account to be used by the node VMs.
func (o AutoprovisioningNodePoolDefaultsResponsePtrOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoprovisioningNodePoolDefaultsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ServiceAccount
	}).(pulumi.StringPtrOutput)
}

// Shielded Instance options.
func (o AutoprovisioningNodePoolDefaultsResponsePtrOutput) ShieldedInstanceConfig() ShieldedInstanceConfigResponsePtrOutput {
	return o.ApplyT(func(v *AutoprovisioningNodePoolDefaultsResponse) *ShieldedInstanceConfigResponse {
		if v == nil {
			return nil
		}
		return &v.ShieldedInstanceConfig
	}).(ShieldedInstanceConfigResponsePtrOutput)
}

// Specifies the upgrade settings for NAP created node pools
func (o AutoprovisioningNodePoolDefaultsResponsePtrOutput) UpgradeSettings() UpgradeSettingsResponsePtrOutput {
	return o.ApplyT(func(v *AutoprovisioningNodePoolDefaultsResponse) *UpgradeSettingsResponse {
		if v == nil {
			return nil
		}
		return &v.UpgradeSettings
	}).(UpgradeSettingsResponsePtrOutput)
}

// Parameters for using BigQuery as the destination of resource usage export.
type BigQueryDestination struct {
	// The ID of a BigQuery Dataset.
	DatasetId *string `pulumi:"datasetId"`
}

// BigQueryDestinationInput is an input type that accepts BigQueryDestinationArgs and BigQueryDestinationOutput values.
// You can construct a concrete instance of `BigQueryDestinationInput` via:
//
//          BigQueryDestinationArgs{...}
type BigQueryDestinationInput interface {
	pulumi.Input

	ToBigQueryDestinationOutput() BigQueryDestinationOutput
	ToBigQueryDestinationOutputWithContext(context.Context) BigQueryDestinationOutput
}

// Parameters for using BigQuery as the destination of resource usage export.
type BigQueryDestinationArgs struct {
	// The ID of a BigQuery Dataset.
	DatasetId pulumi.StringPtrInput `pulumi:"datasetId"`
}

func (BigQueryDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BigQueryDestination)(nil)).Elem()
}

func (i BigQueryDestinationArgs) ToBigQueryDestinationOutput() BigQueryDestinationOutput {
	return i.ToBigQueryDestinationOutputWithContext(context.Background())
}

func (i BigQueryDestinationArgs) ToBigQueryDestinationOutputWithContext(ctx context.Context) BigQueryDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigQueryDestinationOutput)
}

func (i BigQueryDestinationArgs) ToBigQueryDestinationPtrOutput() BigQueryDestinationPtrOutput {
	return i.ToBigQueryDestinationPtrOutputWithContext(context.Background())
}

func (i BigQueryDestinationArgs) ToBigQueryDestinationPtrOutputWithContext(ctx context.Context) BigQueryDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigQueryDestinationOutput).ToBigQueryDestinationPtrOutputWithContext(ctx)
}

// BigQueryDestinationPtrInput is an input type that accepts BigQueryDestinationArgs, BigQueryDestinationPtr and BigQueryDestinationPtrOutput values.
// You can construct a concrete instance of `BigQueryDestinationPtrInput` via:
//
//          BigQueryDestinationArgs{...}
//
//  or:
//
//          nil
type BigQueryDestinationPtrInput interface {
	pulumi.Input

	ToBigQueryDestinationPtrOutput() BigQueryDestinationPtrOutput
	ToBigQueryDestinationPtrOutputWithContext(context.Context) BigQueryDestinationPtrOutput
}

type bigQueryDestinationPtrType BigQueryDestinationArgs

func BigQueryDestinationPtr(v *BigQueryDestinationArgs) BigQueryDestinationPtrInput {
	return (*bigQueryDestinationPtrType)(v)
}

func (*bigQueryDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BigQueryDestination)(nil)).Elem()
}

func (i *bigQueryDestinationPtrType) ToBigQueryDestinationPtrOutput() BigQueryDestinationPtrOutput {
	return i.ToBigQueryDestinationPtrOutputWithContext(context.Background())
}

func (i *bigQueryDestinationPtrType) ToBigQueryDestinationPtrOutputWithContext(ctx context.Context) BigQueryDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigQueryDestinationPtrOutput)
}

// Parameters for using BigQuery as the destination of resource usage export.
type BigQueryDestinationOutput struct{ *pulumi.OutputState }

func (BigQueryDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BigQueryDestination)(nil)).Elem()
}

func (o BigQueryDestinationOutput) ToBigQueryDestinationOutput() BigQueryDestinationOutput {
	return o
}

func (o BigQueryDestinationOutput) ToBigQueryDestinationOutputWithContext(ctx context.Context) BigQueryDestinationOutput {
	return o
}

func (o BigQueryDestinationOutput) ToBigQueryDestinationPtrOutput() BigQueryDestinationPtrOutput {
	return o.ToBigQueryDestinationPtrOutputWithContext(context.Background())
}

func (o BigQueryDestinationOutput) ToBigQueryDestinationPtrOutputWithContext(ctx context.Context) BigQueryDestinationPtrOutput {
	return o.ApplyT(func(v BigQueryDestination) *BigQueryDestination {
		return &v
	}).(BigQueryDestinationPtrOutput)
}

// The ID of a BigQuery Dataset.
func (o BigQueryDestinationOutput) DatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BigQueryDestination) *string { return v.DatasetId }).(pulumi.StringPtrOutput)
}

type BigQueryDestinationPtrOutput struct{ *pulumi.OutputState }

func (BigQueryDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BigQueryDestination)(nil)).Elem()
}

func (o BigQueryDestinationPtrOutput) ToBigQueryDestinationPtrOutput() BigQueryDestinationPtrOutput {
	return o
}

func (o BigQueryDestinationPtrOutput) ToBigQueryDestinationPtrOutputWithContext(ctx context.Context) BigQueryDestinationPtrOutput {
	return o
}

func (o BigQueryDestinationPtrOutput) Elem() BigQueryDestinationOutput {
	return o.ApplyT(func(v *BigQueryDestination) BigQueryDestination { return *v }).(BigQueryDestinationOutput)
}

// The ID of a BigQuery Dataset.
func (o BigQueryDestinationPtrOutput) DatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BigQueryDestination) *string {
		if v == nil {
			return nil
		}
		return v.DatasetId
	}).(pulumi.StringPtrOutput)
}

// Parameters for using BigQuery as the destination of resource usage export.
type BigQueryDestinationResponse struct {
	// The ID of a BigQuery Dataset.
	DatasetId string `pulumi:"datasetId"`
}

// BigQueryDestinationResponseInput is an input type that accepts BigQueryDestinationResponseArgs and BigQueryDestinationResponseOutput values.
// You can construct a concrete instance of `BigQueryDestinationResponseInput` via:
//
//          BigQueryDestinationResponseArgs{...}
type BigQueryDestinationResponseInput interface {
	pulumi.Input

	ToBigQueryDestinationResponseOutput() BigQueryDestinationResponseOutput
	ToBigQueryDestinationResponseOutputWithContext(context.Context) BigQueryDestinationResponseOutput
}

// Parameters for using BigQuery as the destination of resource usage export.
type BigQueryDestinationResponseArgs struct {
	// The ID of a BigQuery Dataset.
	DatasetId pulumi.StringInput `pulumi:"datasetId"`
}

func (BigQueryDestinationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BigQueryDestinationResponse)(nil)).Elem()
}

func (i BigQueryDestinationResponseArgs) ToBigQueryDestinationResponseOutput() BigQueryDestinationResponseOutput {
	return i.ToBigQueryDestinationResponseOutputWithContext(context.Background())
}

func (i BigQueryDestinationResponseArgs) ToBigQueryDestinationResponseOutputWithContext(ctx context.Context) BigQueryDestinationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigQueryDestinationResponseOutput)
}

func (i BigQueryDestinationResponseArgs) ToBigQueryDestinationResponsePtrOutput() BigQueryDestinationResponsePtrOutput {
	return i.ToBigQueryDestinationResponsePtrOutputWithContext(context.Background())
}

func (i BigQueryDestinationResponseArgs) ToBigQueryDestinationResponsePtrOutputWithContext(ctx context.Context) BigQueryDestinationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigQueryDestinationResponseOutput).ToBigQueryDestinationResponsePtrOutputWithContext(ctx)
}

// BigQueryDestinationResponsePtrInput is an input type that accepts BigQueryDestinationResponseArgs, BigQueryDestinationResponsePtr and BigQueryDestinationResponsePtrOutput values.
// You can construct a concrete instance of `BigQueryDestinationResponsePtrInput` via:
//
//          BigQueryDestinationResponseArgs{...}
//
//  or:
//
//          nil
type BigQueryDestinationResponsePtrInput interface {
	pulumi.Input

	ToBigQueryDestinationResponsePtrOutput() BigQueryDestinationResponsePtrOutput
	ToBigQueryDestinationResponsePtrOutputWithContext(context.Context) BigQueryDestinationResponsePtrOutput
}

type bigQueryDestinationResponsePtrType BigQueryDestinationResponseArgs

func BigQueryDestinationResponsePtr(v *BigQueryDestinationResponseArgs) BigQueryDestinationResponsePtrInput {
	return (*bigQueryDestinationResponsePtrType)(v)
}

func (*bigQueryDestinationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BigQueryDestinationResponse)(nil)).Elem()
}

func (i *bigQueryDestinationResponsePtrType) ToBigQueryDestinationResponsePtrOutput() BigQueryDestinationResponsePtrOutput {
	return i.ToBigQueryDestinationResponsePtrOutputWithContext(context.Background())
}

func (i *bigQueryDestinationResponsePtrType) ToBigQueryDestinationResponsePtrOutputWithContext(ctx context.Context) BigQueryDestinationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigQueryDestinationResponsePtrOutput)
}

// Parameters for using BigQuery as the destination of resource usage export.
type BigQueryDestinationResponseOutput struct{ *pulumi.OutputState }

func (BigQueryDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BigQueryDestinationResponse)(nil)).Elem()
}

func (o BigQueryDestinationResponseOutput) ToBigQueryDestinationResponseOutput() BigQueryDestinationResponseOutput {
	return o
}

func (o BigQueryDestinationResponseOutput) ToBigQueryDestinationResponseOutputWithContext(ctx context.Context) BigQueryDestinationResponseOutput {
	return o
}

func (o BigQueryDestinationResponseOutput) ToBigQueryDestinationResponsePtrOutput() BigQueryDestinationResponsePtrOutput {
	return o.ToBigQueryDestinationResponsePtrOutputWithContext(context.Background())
}

func (o BigQueryDestinationResponseOutput) ToBigQueryDestinationResponsePtrOutputWithContext(ctx context.Context) BigQueryDestinationResponsePtrOutput {
	return o.ApplyT(func(v BigQueryDestinationResponse) *BigQueryDestinationResponse {
		return &v
	}).(BigQueryDestinationResponsePtrOutput)
}

// The ID of a BigQuery Dataset.
func (o BigQueryDestinationResponseOutput) DatasetId() pulumi.StringOutput {
	return o.ApplyT(func(v BigQueryDestinationResponse) string { return v.DatasetId }).(pulumi.StringOutput)
}

type BigQueryDestinationResponsePtrOutput struct{ *pulumi.OutputState }

func (BigQueryDestinationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BigQueryDestinationResponse)(nil)).Elem()
}

func (o BigQueryDestinationResponsePtrOutput) ToBigQueryDestinationResponsePtrOutput() BigQueryDestinationResponsePtrOutput {
	return o
}

func (o BigQueryDestinationResponsePtrOutput) ToBigQueryDestinationResponsePtrOutputWithContext(ctx context.Context) BigQueryDestinationResponsePtrOutput {
	return o
}

func (o BigQueryDestinationResponsePtrOutput) Elem() BigQueryDestinationResponseOutput {
	return o.ApplyT(func(v *BigQueryDestinationResponse) BigQueryDestinationResponse { return *v }).(BigQueryDestinationResponseOutput)
}

// The ID of a BigQuery Dataset.
func (o BigQueryDestinationResponsePtrOutput) DatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BigQueryDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DatasetId
	}).(pulumi.StringPtrOutput)
}

// Configuration for Binary Authorization.
type BinaryAuthorization struct {
	// Enable Binary Authorization for this cluster. If enabled, all container images will be validated by Binary Authorization.
	Enabled *bool `pulumi:"enabled"`
}

// BinaryAuthorizationInput is an input type that accepts BinaryAuthorizationArgs and BinaryAuthorizationOutput values.
// You can construct a concrete instance of `BinaryAuthorizationInput` via:
//
//          BinaryAuthorizationArgs{...}
type BinaryAuthorizationInput interface {
	pulumi.Input

	ToBinaryAuthorizationOutput() BinaryAuthorizationOutput
	ToBinaryAuthorizationOutputWithContext(context.Context) BinaryAuthorizationOutput
}

// Configuration for Binary Authorization.
type BinaryAuthorizationArgs struct {
	// Enable Binary Authorization for this cluster. If enabled, all container images will be validated by Binary Authorization.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (BinaryAuthorizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BinaryAuthorization)(nil)).Elem()
}

func (i BinaryAuthorizationArgs) ToBinaryAuthorizationOutput() BinaryAuthorizationOutput {
	return i.ToBinaryAuthorizationOutputWithContext(context.Background())
}

func (i BinaryAuthorizationArgs) ToBinaryAuthorizationOutputWithContext(ctx context.Context) BinaryAuthorizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BinaryAuthorizationOutput)
}

func (i BinaryAuthorizationArgs) ToBinaryAuthorizationPtrOutput() BinaryAuthorizationPtrOutput {
	return i.ToBinaryAuthorizationPtrOutputWithContext(context.Background())
}

func (i BinaryAuthorizationArgs) ToBinaryAuthorizationPtrOutputWithContext(ctx context.Context) BinaryAuthorizationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BinaryAuthorizationOutput).ToBinaryAuthorizationPtrOutputWithContext(ctx)
}

// BinaryAuthorizationPtrInput is an input type that accepts BinaryAuthorizationArgs, BinaryAuthorizationPtr and BinaryAuthorizationPtrOutput values.
// You can construct a concrete instance of `BinaryAuthorizationPtrInput` via:
//
//          BinaryAuthorizationArgs{...}
//
//  or:
//
//          nil
type BinaryAuthorizationPtrInput interface {
	pulumi.Input

	ToBinaryAuthorizationPtrOutput() BinaryAuthorizationPtrOutput
	ToBinaryAuthorizationPtrOutputWithContext(context.Context) BinaryAuthorizationPtrOutput
}

type binaryAuthorizationPtrType BinaryAuthorizationArgs

func BinaryAuthorizationPtr(v *BinaryAuthorizationArgs) BinaryAuthorizationPtrInput {
	return (*binaryAuthorizationPtrType)(v)
}

func (*binaryAuthorizationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BinaryAuthorization)(nil)).Elem()
}

func (i *binaryAuthorizationPtrType) ToBinaryAuthorizationPtrOutput() BinaryAuthorizationPtrOutput {
	return i.ToBinaryAuthorizationPtrOutputWithContext(context.Background())
}

func (i *binaryAuthorizationPtrType) ToBinaryAuthorizationPtrOutputWithContext(ctx context.Context) BinaryAuthorizationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BinaryAuthorizationPtrOutput)
}

// Configuration for Binary Authorization.
type BinaryAuthorizationOutput struct{ *pulumi.OutputState }

func (BinaryAuthorizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BinaryAuthorization)(nil)).Elem()
}

func (o BinaryAuthorizationOutput) ToBinaryAuthorizationOutput() BinaryAuthorizationOutput {
	return o
}

func (o BinaryAuthorizationOutput) ToBinaryAuthorizationOutputWithContext(ctx context.Context) BinaryAuthorizationOutput {
	return o
}

func (o BinaryAuthorizationOutput) ToBinaryAuthorizationPtrOutput() BinaryAuthorizationPtrOutput {
	return o.ToBinaryAuthorizationPtrOutputWithContext(context.Background())
}

func (o BinaryAuthorizationOutput) ToBinaryAuthorizationPtrOutputWithContext(ctx context.Context) BinaryAuthorizationPtrOutput {
	return o.ApplyT(func(v BinaryAuthorization) *BinaryAuthorization {
		return &v
	}).(BinaryAuthorizationPtrOutput)
}

// Enable Binary Authorization for this cluster. If enabled, all container images will be validated by Binary Authorization.
func (o BinaryAuthorizationOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BinaryAuthorization) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type BinaryAuthorizationPtrOutput struct{ *pulumi.OutputState }

func (BinaryAuthorizationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BinaryAuthorization)(nil)).Elem()
}

func (o BinaryAuthorizationPtrOutput) ToBinaryAuthorizationPtrOutput() BinaryAuthorizationPtrOutput {
	return o
}

func (o BinaryAuthorizationPtrOutput) ToBinaryAuthorizationPtrOutputWithContext(ctx context.Context) BinaryAuthorizationPtrOutput {
	return o
}

func (o BinaryAuthorizationPtrOutput) Elem() BinaryAuthorizationOutput {
	return o.ApplyT(func(v *BinaryAuthorization) BinaryAuthorization { return *v }).(BinaryAuthorizationOutput)
}

// Enable Binary Authorization for this cluster. If enabled, all container images will be validated by Binary Authorization.
func (o BinaryAuthorizationPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BinaryAuthorization) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Configuration for Binary Authorization.
type BinaryAuthorizationResponse struct {
	// Enable Binary Authorization for this cluster. If enabled, all container images will be validated by Binary Authorization.
	Enabled bool `pulumi:"enabled"`
}

// BinaryAuthorizationResponseInput is an input type that accepts BinaryAuthorizationResponseArgs and BinaryAuthorizationResponseOutput values.
// You can construct a concrete instance of `BinaryAuthorizationResponseInput` via:
//
//          BinaryAuthorizationResponseArgs{...}
type BinaryAuthorizationResponseInput interface {
	pulumi.Input

	ToBinaryAuthorizationResponseOutput() BinaryAuthorizationResponseOutput
	ToBinaryAuthorizationResponseOutputWithContext(context.Context) BinaryAuthorizationResponseOutput
}

// Configuration for Binary Authorization.
type BinaryAuthorizationResponseArgs struct {
	// Enable Binary Authorization for this cluster. If enabled, all container images will be validated by Binary Authorization.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

func (BinaryAuthorizationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BinaryAuthorizationResponse)(nil)).Elem()
}

func (i BinaryAuthorizationResponseArgs) ToBinaryAuthorizationResponseOutput() BinaryAuthorizationResponseOutput {
	return i.ToBinaryAuthorizationResponseOutputWithContext(context.Background())
}

func (i BinaryAuthorizationResponseArgs) ToBinaryAuthorizationResponseOutputWithContext(ctx context.Context) BinaryAuthorizationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BinaryAuthorizationResponseOutput)
}

func (i BinaryAuthorizationResponseArgs) ToBinaryAuthorizationResponsePtrOutput() BinaryAuthorizationResponsePtrOutput {
	return i.ToBinaryAuthorizationResponsePtrOutputWithContext(context.Background())
}

func (i BinaryAuthorizationResponseArgs) ToBinaryAuthorizationResponsePtrOutputWithContext(ctx context.Context) BinaryAuthorizationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BinaryAuthorizationResponseOutput).ToBinaryAuthorizationResponsePtrOutputWithContext(ctx)
}

// BinaryAuthorizationResponsePtrInput is an input type that accepts BinaryAuthorizationResponseArgs, BinaryAuthorizationResponsePtr and BinaryAuthorizationResponsePtrOutput values.
// You can construct a concrete instance of `BinaryAuthorizationResponsePtrInput` via:
//
//          BinaryAuthorizationResponseArgs{...}
//
//  or:
//
//          nil
type BinaryAuthorizationResponsePtrInput interface {
	pulumi.Input

	ToBinaryAuthorizationResponsePtrOutput() BinaryAuthorizationResponsePtrOutput
	ToBinaryAuthorizationResponsePtrOutputWithContext(context.Context) BinaryAuthorizationResponsePtrOutput
}

type binaryAuthorizationResponsePtrType BinaryAuthorizationResponseArgs

func BinaryAuthorizationResponsePtr(v *BinaryAuthorizationResponseArgs) BinaryAuthorizationResponsePtrInput {
	return (*binaryAuthorizationResponsePtrType)(v)
}

func (*binaryAuthorizationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BinaryAuthorizationResponse)(nil)).Elem()
}

func (i *binaryAuthorizationResponsePtrType) ToBinaryAuthorizationResponsePtrOutput() BinaryAuthorizationResponsePtrOutput {
	return i.ToBinaryAuthorizationResponsePtrOutputWithContext(context.Background())
}

func (i *binaryAuthorizationResponsePtrType) ToBinaryAuthorizationResponsePtrOutputWithContext(ctx context.Context) BinaryAuthorizationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BinaryAuthorizationResponsePtrOutput)
}

// Configuration for Binary Authorization.
type BinaryAuthorizationResponseOutput struct{ *pulumi.OutputState }

func (BinaryAuthorizationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BinaryAuthorizationResponse)(nil)).Elem()
}

func (o BinaryAuthorizationResponseOutput) ToBinaryAuthorizationResponseOutput() BinaryAuthorizationResponseOutput {
	return o
}

func (o BinaryAuthorizationResponseOutput) ToBinaryAuthorizationResponseOutputWithContext(ctx context.Context) BinaryAuthorizationResponseOutput {
	return o
}

func (o BinaryAuthorizationResponseOutput) ToBinaryAuthorizationResponsePtrOutput() BinaryAuthorizationResponsePtrOutput {
	return o.ToBinaryAuthorizationResponsePtrOutputWithContext(context.Background())
}

func (o BinaryAuthorizationResponseOutput) ToBinaryAuthorizationResponsePtrOutputWithContext(ctx context.Context) BinaryAuthorizationResponsePtrOutput {
	return o.ApplyT(func(v BinaryAuthorizationResponse) *BinaryAuthorizationResponse {
		return &v
	}).(BinaryAuthorizationResponsePtrOutput)
}

// Enable Binary Authorization for this cluster. If enabled, all container images will be validated by Binary Authorization.
func (o BinaryAuthorizationResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v BinaryAuthorizationResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type BinaryAuthorizationResponsePtrOutput struct{ *pulumi.OutputState }

func (BinaryAuthorizationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BinaryAuthorizationResponse)(nil)).Elem()
}

func (o BinaryAuthorizationResponsePtrOutput) ToBinaryAuthorizationResponsePtrOutput() BinaryAuthorizationResponsePtrOutput {
	return o
}

func (o BinaryAuthorizationResponsePtrOutput) ToBinaryAuthorizationResponsePtrOutputWithContext(ctx context.Context) BinaryAuthorizationResponsePtrOutput {
	return o
}

func (o BinaryAuthorizationResponsePtrOutput) Elem() BinaryAuthorizationResponseOutput {
	return o.ApplyT(func(v *BinaryAuthorizationResponse) BinaryAuthorizationResponse { return *v }).(BinaryAuthorizationResponseOutput)
}

// Enable Binary Authorization for this cluster. If enabled, all container images will be validated by Binary Authorization.
func (o BinaryAuthorizationResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BinaryAuthorizationResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// CidrBlock contains an optional name and one CIDR block.
type CidrBlock struct {
	// cidr_block must be specified in CIDR notation.
	CidrBlock *string `pulumi:"cidrBlock"`
	// display_name is an optional field for users to identify CIDR blocks.
	DisplayName *string `pulumi:"displayName"`
}

// CidrBlockInput is an input type that accepts CidrBlockArgs and CidrBlockOutput values.
// You can construct a concrete instance of `CidrBlockInput` via:
//
//          CidrBlockArgs{...}
type CidrBlockInput interface {
	pulumi.Input

	ToCidrBlockOutput() CidrBlockOutput
	ToCidrBlockOutputWithContext(context.Context) CidrBlockOutput
}

// CidrBlock contains an optional name and one CIDR block.
type CidrBlockArgs struct {
	// cidr_block must be specified in CIDR notation.
	CidrBlock pulumi.StringPtrInput `pulumi:"cidrBlock"`
	// display_name is an optional field for users to identify CIDR blocks.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
}

func (CidrBlockArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CidrBlock)(nil)).Elem()
}

func (i CidrBlockArgs) ToCidrBlockOutput() CidrBlockOutput {
	return i.ToCidrBlockOutputWithContext(context.Background())
}

func (i CidrBlockArgs) ToCidrBlockOutputWithContext(ctx context.Context) CidrBlockOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CidrBlockOutput)
}

// CidrBlockArrayInput is an input type that accepts CidrBlockArray and CidrBlockArrayOutput values.
// You can construct a concrete instance of `CidrBlockArrayInput` via:
//
//          CidrBlockArray{ CidrBlockArgs{...} }
type CidrBlockArrayInput interface {
	pulumi.Input

	ToCidrBlockArrayOutput() CidrBlockArrayOutput
	ToCidrBlockArrayOutputWithContext(context.Context) CidrBlockArrayOutput
}

type CidrBlockArray []CidrBlockInput

func (CidrBlockArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CidrBlock)(nil)).Elem()
}

func (i CidrBlockArray) ToCidrBlockArrayOutput() CidrBlockArrayOutput {
	return i.ToCidrBlockArrayOutputWithContext(context.Background())
}

func (i CidrBlockArray) ToCidrBlockArrayOutputWithContext(ctx context.Context) CidrBlockArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CidrBlockArrayOutput)
}

// CidrBlock contains an optional name and one CIDR block.
type CidrBlockOutput struct{ *pulumi.OutputState }

func (CidrBlockOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CidrBlock)(nil)).Elem()
}

func (o CidrBlockOutput) ToCidrBlockOutput() CidrBlockOutput {
	return o
}

func (o CidrBlockOutput) ToCidrBlockOutputWithContext(ctx context.Context) CidrBlockOutput {
	return o
}

// cidr_block must be specified in CIDR notation.
func (o CidrBlockOutput) CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CidrBlock) *string { return v.CidrBlock }).(pulumi.StringPtrOutput)
}

// display_name is an optional field for users to identify CIDR blocks.
func (o CidrBlockOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CidrBlock) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

type CidrBlockArrayOutput struct{ *pulumi.OutputState }

func (CidrBlockArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CidrBlock)(nil)).Elem()
}

func (o CidrBlockArrayOutput) ToCidrBlockArrayOutput() CidrBlockArrayOutput {
	return o
}

func (o CidrBlockArrayOutput) ToCidrBlockArrayOutputWithContext(ctx context.Context) CidrBlockArrayOutput {
	return o
}

func (o CidrBlockArrayOutput) Index(i pulumi.IntInput) CidrBlockOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CidrBlock {
		return vs[0].([]CidrBlock)[vs[1].(int)]
	}).(CidrBlockOutput)
}

// CidrBlock contains an optional name and one CIDR block.
type CidrBlockResponse struct {
	// cidr_block must be specified in CIDR notation.
	CidrBlock string `pulumi:"cidrBlock"`
	// display_name is an optional field for users to identify CIDR blocks.
	DisplayName string `pulumi:"displayName"`
}

// CidrBlockResponseInput is an input type that accepts CidrBlockResponseArgs and CidrBlockResponseOutput values.
// You can construct a concrete instance of `CidrBlockResponseInput` via:
//
//          CidrBlockResponseArgs{...}
type CidrBlockResponseInput interface {
	pulumi.Input

	ToCidrBlockResponseOutput() CidrBlockResponseOutput
	ToCidrBlockResponseOutputWithContext(context.Context) CidrBlockResponseOutput
}

// CidrBlock contains an optional name and one CIDR block.
type CidrBlockResponseArgs struct {
	// cidr_block must be specified in CIDR notation.
	CidrBlock pulumi.StringInput `pulumi:"cidrBlock"`
	// display_name is an optional field for users to identify CIDR blocks.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
}

func (CidrBlockResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CidrBlockResponse)(nil)).Elem()
}

func (i CidrBlockResponseArgs) ToCidrBlockResponseOutput() CidrBlockResponseOutput {
	return i.ToCidrBlockResponseOutputWithContext(context.Background())
}

func (i CidrBlockResponseArgs) ToCidrBlockResponseOutputWithContext(ctx context.Context) CidrBlockResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CidrBlockResponseOutput)
}

// CidrBlockResponseArrayInput is an input type that accepts CidrBlockResponseArray and CidrBlockResponseArrayOutput values.
// You can construct a concrete instance of `CidrBlockResponseArrayInput` via:
//
//          CidrBlockResponseArray{ CidrBlockResponseArgs{...} }
type CidrBlockResponseArrayInput interface {
	pulumi.Input

	ToCidrBlockResponseArrayOutput() CidrBlockResponseArrayOutput
	ToCidrBlockResponseArrayOutputWithContext(context.Context) CidrBlockResponseArrayOutput
}

type CidrBlockResponseArray []CidrBlockResponseInput

func (CidrBlockResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CidrBlockResponse)(nil)).Elem()
}

func (i CidrBlockResponseArray) ToCidrBlockResponseArrayOutput() CidrBlockResponseArrayOutput {
	return i.ToCidrBlockResponseArrayOutputWithContext(context.Background())
}

func (i CidrBlockResponseArray) ToCidrBlockResponseArrayOutputWithContext(ctx context.Context) CidrBlockResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CidrBlockResponseArrayOutput)
}

// CidrBlock contains an optional name and one CIDR block.
type CidrBlockResponseOutput struct{ *pulumi.OutputState }

func (CidrBlockResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CidrBlockResponse)(nil)).Elem()
}

func (o CidrBlockResponseOutput) ToCidrBlockResponseOutput() CidrBlockResponseOutput {
	return o
}

func (o CidrBlockResponseOutput) ToCidrBlockResponseOutputWithContext(ctx context.Context) CidrBlockResponseOutput {
	return o
}

// cidr_block must be specified in CIDR notation.
func (o CidrBlockResponseOutput) CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v CidrBlockResponse) string { return v.CidrBlock }).(pulumi.StringOutput)
}

// display_name is an optional field for users to identify CIDR blocks.
func (o CidrBlockResponseOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v CidrBlockResponse) string { return v.DisplayName }).(pulumi.StringOutput)
}

type CidrBlockResponseArrayOutput struct{ *pulumi.OutputState }

func (CidrBlockResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CidrBlockResponse)(nil)).Elem()
}

func (o CidrBlockResponseArrayOutput) ToCidrBlockResponseArrayOutput() CidrBlockResponseArrayOutput {
	return o
}

func (o CidrBlockResponseArrayOutput) ToCidrBlockResponseArrayOutputWithContext(ctx context.Context) CidrBlockResponseArrayOutput {
	return o
}

func (o CidrBlockResponseArrayOutput) Index(i pulumi.IntInput) CidrBlockResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CidrBlockResponse {
		return vs[0].([]CidrBlockResponse)[vs[1].(int)]
	}).(CidrBlockResponseOutput)
}

// Configuration for client certificates on the cluster.
type ClientCertificateConfig struct {
	// Issue a client certificate.
	IssueClientCertificate *bool `pulumi:"issueClientCertificate"`
}

// ClientCertificateConfigInput is an input type that accepts ClientCertificateConfigArgs and ClientCertificateConfigOutput values.
// You can construct a concrete instance of `ClientCertificateConfigInput` via:
//
//          ClientCertificateConfigArgs{...}
type ClientCertificateConfigInput interface {
	pulumi.Input

	ToClientCertificateConfigOutput() ClientCertificateConfigOutput
	ToClientCertificateConfigOutputWithContext(context.Context) ClientCertificateConfigOutput
}

// Configuration for client certificates on the cluster.
type ClientCertificateConfigArgs struct {
	// Issue a client certificate.
	IssueClientCertificate pulumi.BoolPtrInput `pulumi:"issueClientCertificate"`
}

func (ClientCertificateConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientCertificateConfig)(nil)).Elem()
}

func (i ClientCertificateConfigArgs) ToClientCertificateConfigOutput() ClientCertificateConfigOutput {
	return i.ToClientCertificateConfigOutputWithContext(context.Background())
}

func (i ClientCertificateConfigArgs) ToClientCertificateConfigOutputWithContext(ctx context.Context) ClientCertificateConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientCertificateConfigOutput)
}

func (i ClientCertificateConfigArgs) ToClientCertificateConfigPtrOutput() ClientCertificateConfigPtrOutput {
	return i.ToClientCertificateConfigPtrOutputWithContext(context.Background())
}

func (i ClientCertificateConfigArgs) ToClientCertificateConfigPtrOutputWithContext(ctx context.Context) ClientCertificateConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientCertificateConfigOutput).ToClientCertificateConfigPtrOutputWithContext(ctx)
}

// ClientCertificateConfigPtrInput is an input type that accepts ClientCertificateConfigArgs, ClientCertificateConfigPtr and ClientCertificateConfigPtrOutput values.
// You can construct a concrete instance of `ClientCertificateConfigPtrInput` via:
//
//          ClientCertificateConfigArgs{...}
//
//  or:
//
//          nil
type ClientCertificateConfigPtrInput interface {
	pulumi.Input

	ToClientCertificateConfigPtrOutput() ClientCertificateConfigPtrOutput
	ToClientCertificateConfigPtrOutputWithContext(context.Context) ClientCertificateConfigPtrOutput
}

type clientCertificateConfigPtrType ClientCertificateConfigArgs

func ClientCertificateConfigPtr(v *ClientCertificateConfigArgs) ClientCertificateConfigPtrInput {
	return (*clientCertificateConfigPtrType)(v)
}

func (*clientCertificateConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientCertificateConfig)(nil)).Elem()
}

func (i *clientCertificateConfigPtrType) ToClientCertificateConfigPtrOutput() ClientCertificateConfigPtrOutput {
	return i.ToClientCertificateConfigPtrOutputWithContext(context.Background())
}

func (i *clientCertificateConfigPtrType) ToClientCertificateConfigPtrOutputWithContext(ctx context.Context) ClientCertificateConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientCertificateConfigPtrOutput)
}

// Configuration for client certificates on the cluster.
type ClientCertificateConfigOutput struct{ *pulumi.OutputState }

func (ClientCertificateConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientCertificateConfig)(nil)).Elem()
}

func (o ClientCertificateConfigOutput) ToClientCertificateConfigOutput() ClientCertificateConfigOutput {
	return o
}

func (o ClientCertificateConfigOutput) ToClientCertificateConfigOutputWithContext(ctx context.Context) ClientCertificateConfigOutput {
	return o
}

func (o ClientCertificateConfigOutput) ToClientCertificateConfigPtrOutput() ClientCertificateConfigPtrOutput {
	return o.ToClientCertificateConfigPtrOutputWithContext(context.Background())
}

func (o ClientCertificateConfigOutput) ToClientCertificateConfigPtrOutputWithContext(ctx context.Context) ClientCertificateConfigPtrOutput {
	return o.ApplyT(func(v ClientCertificateConfig) *ClientCertificateConfig {
		return &v
	}).(ClientCertificateConfigPtrOutput)
}

// Issue a client certificate.
func (o ClientCertificateConfigOutput) IssueClientCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClientCertificateConfig) *bool { return v.IssueClientCertificate }).(pulumi.BoolPtrOutput)
}

type ClientCertificateConfigPtrOutput struct{ *pulumi.OutputState }

func (ClientCertificateConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientCertificateConfig)(nil)).Elem()
}

func (o ClientCertificateConfigPtrOutput) ToClientCertificateConfigPtrOutput() ClientCertificateConfigPtrOutput {
	return o
}

func (o ClientCertificateConfigPtrOutput) ToClientCertificateConfigPtrOutputWithContext(ctx context.Context) ClientCertificateConfigPtrOutput {
	return o
}

func (o ClientCertificateConfigPtrOutput) Elem() ClientCertificateConfigOutput {
	return o.ApplyT(func(v *ClientCertificateConfig) ClientCertificateConfig { return *v }).(ClientCertificateConfigOutput)
}

// Issue a client certificate.
func (o ClientCertificateConfigPtrOutput) IssueClientCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClientCertificateConfig) *bool {
		if v == nil {
			return nil
		}
		return v.IssueClientCertificate
	}).(pulumi.BoolPtrOutput)
}

// Configuration for client certificates on the cluster.
type ClientCertificateConfigResponse struct {
	// Issue a client certificate.
	IssueClientCertificate bool `pulumi:"issueClientCertificate"`
}

// ClientCertificateConfigResponseInput is an input type that accepts ClientCertificateConfigResponseArgs and ClientCertificateConfigResponseOutput values.
// You can construct a concrete instance of `ClientCertificateConfigResponseInput` via:
//
//          ClientCertificateConfigResponseArgs{...}
type ClientCertificateConfigResponseInput interface {
	pulumi.Input

	ToClientCertificateConfigResponseOutput() ClientCertificateConfigResponseOutput
	ToClientCertificateConfigResponseOutputWithContext(context.Context) ClientCertificateConfigResponseOutput
}

// Configuration for client certificates on the cluster.
type ClientCertificateConfigResponseArgs struct {
	// Issue a client certificate.
	IssueClientCertificate pulumi.BoolInput `pulumi:"issueClientCertificate"`
}

func (ClientCertificateConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientCertificateConfigResponse)(nil)).Elem()
}

func (i ClientCertificateConfigResponseArgs) ToClientCertificateConfigResponseOutput() ClientCertificateConfigResponseOutput {
	return i.ToClientCertificateConfigResponseOutputWithContext(context.Background())
}

func (i ClientCertificateConfigResponseArgs) ToClientCertificateConfigResponseOutputWithContext(ctx context.Context) ClientCertificateConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientCertificateConfigResponseOutput)
}

func (i ClientCertificateConfigResponseArgs) ToClientCertificateConfigResponsePtrOutput() ClientCertificateConfigResponsePtrOutput {
	return i.ToClientCertificateConfigResponsePtrOutputWithContext(context.Background())
}

func (i ClientCertificateConfigResponseArgs) ToClientCertificateConfigResponsePtrOutputWithContext(ctx context.Context) ClientCertificateConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientCertificateConfigResponseOutput).ToClientCertificateConfigResponsePtrOutputWithContext(ctx)
}

// ClientCertificateConfigResponsePtrInput is an input type that accepts ClientCertificateConfigResponseArgs, ClientCertificateConfigResponsePtr and ClientCertificateConfigResponsePtrOutput values.
// You can construct a concrete instance of `ClientCertificateConfigResponsePtrInput` via:
//
//          ClientCertificateConfigResponseArgs{...}
//
//  or:
//
//          nil
type ClientCertificateConfigResponsePtrInput interface {
	pulumi.Input

	ToClientCertificateConfigResponsePtrOutput() ClientCertificateConfigResponsePtrOutput
	ToClientCertificateConfigResponsePtrOutputWithContext(context.Context) ClientCertificateConfigResponsePtrOutput
}

type clientCertificateConfigResponsePtrType ClientCertificateConfigResponseArgs

func ClientCertificateConfigResponsePtr(v *ClientCertificateConfigResponseArgs) ClientCertificateConfigResponsePtrInput {
	return (*clientCertificateConfigResponsePtrType)(v)
}

func (*clientCertificateConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientCertificateConfigResponse)(nil)).Elem()
}

func (i *clientCertificateConfigResponsePtrType) ToClientCertificateConfigResponsePtrOutput() ClientCertificateConfigResponsePtrOutput {
	return i.ToClientCertificateConfigResponsePtrOutputWithContext(context.Background())
}

func (i *clientCertificateConfigResponsePtrType) ToClientCertificateConfigResponsePtrOutputWithContext(ctx context.Context) ClientCertificateConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientCertificateConfigResponsePtrOutput)
}

// Configuration for client certificates on the cluster.
type ClientCertificateConfigResponseOutput struct{ *pulumi.OutputState }

func (ClientCertificateConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientCertificateConfigResponse)(nil)).Elem()
}

func (o ClientCertificateConfigResponseOutput) ToClientCertificateConfigResponseOutput() ClientCertificateConfigResponseOutput {
	return o
}

func (o ClientCertificateConfigResponseOutput) ToClientCertificateConfigResponseOutputWithContext(ctx context.Context) ClientCertificateConfigResponseOutput {
	return o
}

func (o ClientCertificateConfigResponseOutput) ToClientCertificateConfigResponsePtrOutput() ClientCertificateConfigResponsePtrOutput {
	return o.ToClientCertificateConfigResponsePtrOutputWithContext(context.Background())
}

func (o ClientCertificateConfigResponseOutput) ToClientCertificateConfigResponsePtrOutputWithContext(ctx context.Context) ClientCertificateConfigResponsePtrOutput {
	return o.ApplyT(func(v ClientCertificateConfigResponse) *ClientCertificateConfigResponse {
		return &v
	}).(ClientCertificateConfigResponsePtrOutput)
}

// Issue a client certificate.
func (o ClientCertificateConfigResponseOutput) IssueClientCertificate() pulumi.BoolOutput {
	return o.ApplyT(func(v ClientCertificateConfigResponse) bool { return v.IssueClientCertificate }).(pulumi.BoolOutput)
}

type ClientCertificateConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (ClientCertificateConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientCertificateConfigResponse)(nil)).Elem()
}

func (o ClientCertificateConfigResponsePtrOutput) ToClientCertificateConfigResponsePtrOutput() ClientCertificateConfigResponsePtrOutput {
	return o
}

func (o ClientCertificateConfigResponsePtrOutput) ToClientCertificateConfigResponsePtrOutputWithContext(ctx context.Context) ClientCertificateConfigResponsePtrOutput {
	return o
}

func (o ClientCertificateConfigResponsePtrOutput) Elem() ClientCertificateConfigResponseOutput {
	return o.ApplyT(func(v *ClientCertificateConfigResponse) ClientCertificateConfigResponse { return *v }).(ClientCertificateConfigResponseOutput)
}

// Issue a client certificate.
func (o ClientCertificateConfigResponsePtrOutput) IssueClientCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClientCertificateConfigResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.IssueClientCertificate
	}).(pulumi.BoolPtrOutput)
}

// Configuration options for the Cloud Run feature.
type CloudRunConfig struct {
	// Whether Cloud Run addon is enabled for this cluster.
	Disabled *bool `pulumi:"disabled"`
	// Which load balancer type is installed for Cloud Run.
	LoadBalancerType *string `pulumi:"loadBalancerType"`
}

// CloudRunConfigInput is an input type that accepts CloudRunConfigArgs and CloudRunConfigOutput values.
// You can construct a concrete instance of `CloudRunConfigInput` via:
//
//          CloudRunConfigArgs{...}
type CloudRunConfigInput interface {
	pulumi.Input

	ToCloudRunConfigOutput() CloudRunConfigOutput
	ToCloudRunConfigOutputWithContext(context.Context) CloudRunConfigOutput
}

// Configuration options for the Cloud Run feature.
type CloudRunConfigArgs struct {
	// Whether Cloud Run addon is enabled for this cluster.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// Which load balancer type is installed for Cloud Run.
	LoadBalancerType *CloudRunConfigLoadBalancerType `pulumi:"loadBalancerType"`
}

func (CloudRunConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudRunConfig)(nil)).Elem()
}

func (i CloudRunConfigArgs) ToCloudRunConfigOutput() CloudRunConfigOutput {
	return i.ToCloudRunConfigOutputWithContext(context.Background())
}

func (i CloudRunConfigArgs) ToCloudRunConfigOutputWithContext(ctx context.Context) CloudRunConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudRunConfigOutput)
}

func (i CloudRunConfigArgs) ToCloudRunConfigPtrOutput() CloudRunConfigPtrOutput {
	return i.ToCloudRunConfigPtrOutputWithContext(context.Background())
}

func (i CloudRunConfigArgs) ToCloudRunConfigPtrOutputWithContext(ctx context.Context) CloudRunConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudRunConfigOutput).ToCloudRunConfigPtrOutputWithContext(ctx)
}

// CloudRunConfigPtrInput is an input type that accepts CloudRunConfigArgs, CloudRunConfigPtr and CloudRunConfigPtrOutput values.
// You can construct a concrete instance of `CloudRunConfigPtrInput` via:
//
//          CloudRunConfigArgs{...}
//
//  or:
//
//          nil
type CloudRunConfigPtrInput interface {
	pulumi.Input

	ToCloudRunConfigPtrOutput() CloudRunConfigPtrOutput
	ToCloudRunConfigPtrOutputWithContext(context.Context) CloudRunConfigPtrOutput
}

type cloudRunConfigPtrType CloudRunConfigArgs

func CloudRunConfigPtr(v *CloudRunConfigArgs) CloudRunConfigPtrInput {
	return (*cloudRunConfigPtrType)(v)
}

func (*cloudRunConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudRunConfig)(nil)).Elem()
}

func (i *cloudRunConfigPtrType) ToCloudRunConfigPtrOutput() CloudRunConfigPtrOutput {
	return i.ToCloudRunConfigPtrOutputWithContext(context.Background())
}

func (i *cloudRunConfigPtrType) ToCloudRunConfigPtrOutputWithContext(ctx context.Context) CloudRunConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudRunConfigPtrOutput)
}

// Configuration options for the Cloud Run feature.
type CloudRunConfigOutput struct{ *pulumi.OutputState }

func (CloudRunConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudRunConfig)(nil)).Elem()
}

func (o CloudRunConfigOutput) ToCloudRunConfigOutput() CloudRunConfigOutput {
	return o
}

func (o CloudRunConfigOutput) ToCloudRunConfigOutputWithContext(ctx context.Context) CloudRunConfigOutput {
	return o
}

func (o CloudRunConfigOutput) ToCloudRunConfigPtrOutput() CloudRunConfigPtrOutput {
	return o.ToCloudRunConfigPtrOutputWithContext(context.Background())
}

func (o CloudRunConfigOutput) ToCloudRunConfigPtrOutputWithContext(ctx context.Context) CloudRunConfigPtrOutput {
	return o.ApplyT(func(v CloudRunConfig) *CloudRunConfig {
		return &v
	}).(CloudRunConfigPtrOutput)
}

// Whether Cloud Run addon is enabled for this cluster.
func (o CloudRunConfigOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CloudRunConfig) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// Which load balancer type is installed for Cloud Run.
func (o CloudRunConfigOutput) LoadBalancerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CloudRunConfig) *string { return v.LoadBalancerType }).(pulumi.StringPtrOutput)
}

type CloudRunConfigPtrOutput struct{ *pulumi.OutputState }

func (CloudRunConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudRunConfig)(nil)).Elem()
}

func (o CloudRunConfigPtrOutput) ToCloudRunConfigPtrOutput() CloudRunConfigPtrOutput {
	return o
}

func (o CloudRunConfigPtrOutput) ToCloudRunConfigPtrOutputWithContext(ctx context.Context) CloudRunConfigPtrOutput {
	return o
}

func (o CloudRunConfigPtrOutput) Elem() CloudRunConfigOutput {
	return o.ApplyT(func(v *CloudRunConfig) CloudRunConfig { return *v }).(CloudRunConfigOutput)
}

// Whether Cloud Run addon is enabled for this cluster.
func (o CloudRunConfigPtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CloudRunConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// Which load balancer type is installed for Cloud Run.
func (o CloudRunConfigPtrOutput) LoadBalancerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudRunConfig) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerType
	}).(pulumi.StringPtrOutput)
}

// Configuration options for the Cloud Run feature.
type CloudRunConfigResponse struct {
	// Whether Cloud Run addon is enabled for this cluster.
	Disabled bool `pulumi:"disabled"`
	// Which load balancer type is installed for Cloud Run.
	LoadBalancerType string `pulumi:"loadBalancerType"`
}

// CloudRunConfigResponseInput is an input type that accepts CloudRunConfigResponseArgs and CloudRunConfigResponseOutput values.
// You can construct a concrete instance of `CloudRunConfigResponseInput` via:
//
//          CloudRunConfigResponseArgs{...}
type CloudRunConfigResponseInput interface {
	pulumi.Input

	ToCloudRunConfigResponseOutput() CloudRunConfigResponseOutput
	ToCloudRunConfigResponseOutputWithContext(context.Context) CloudRunConfigResponseOutput
}

// Configuration options for the Cloud Run feature.
type CloudRunConfigResponseArgs struct {
	// Whether Cloud Run addon is enabled for this cluster.
	Disabled pulumi.BoolInput `pulumi:"disabled"`
	// Which load balancer type is installed for Cloud Run.
	LoadBalancerType pulumi.StringInput `pulumi:"loadBalancerType"`
}

func (CloudRunConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudRunConfigResponse)(nil)).Elem()
}

func (i CloudRunConfigResponseArgs) ToCloudRunConfigResponseOutput() CloudRunConfigResponseOutput {
	return i.ToCloudRunConfigResponseOutputWithContext(context.Background())
}

func (i CloudRunConfigResponseArgs) ToCloudRunConfigResponseOutputWithContext(ctx context.Context) CloudRunConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudRunConfigResponseOutput)
}

func (i CloudRunConfigResponseArgs) ToCloudRunConfigResponsePtrOutput() CloudRunConfigResponsePtrOutput {
	return i.ToCloudRunConfigResponsePtrOutputWithContext(context.Background())
}

func (i CloudRunConfigResponseArgs) ToCloudRunConfigResponsePtrOutputWithContext(ctx context.Context) CloudRunConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudRunConfigResponseOutput).ToCloudRunConfigResponsePtrOutputWithContext(ctx)
}

// CloudRunConfigResponsePtrInput is an input type that accepts CloudRunConfigResponseArgs, CloudRunConfigResponsePtr and CloudRunConfigResponsePtrOutput values.
// You can construct a concrete instance of `CloudRunConfigResponsePtrInput` via:
//
//          CloudRunConfigResponseArgs{...}
//
//  or:
//
//          nil
type CloudRunConfigResponsePtrInput interface {
	pulumi.Input

	ToCloudRunConfigResponsePtrOutput() CloudRunConfigResponsePtrOutput
	ToCloudRunConfigResponsePtrOutputWithContext(context.Context) CloudRunConfigResponsePtrOutput
}

type cloudRunConfigResponsePtrType CloudRunConfigResponseArgs

func CloudRunConfigResponsePtr(v *CloudRunConfigResponseArgs) CloudRunConfigResponsePtrInput {
	return (*cloudRunConfigResponsePtrType)(v)
}

func (*cloudRunConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudRunConfigResponse)(nil)).Elem()
}

func (i *cloudRunConfigResponsePtrType) ToCloudRunConfigResponsePtrOutput() CloudRunConfigResponsePtrOutput {
	return i.ToCloudRunConfigResponsePtrOutputWithContext(context.Background())
}

func (i *cloudRunConfigResponsePtrType) ToCloudRunConfigResponsePtrOutputWithContext(ctx context.Context) CloudRunConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudRunConfigResponsePtrOutput)
}

// Configuration options for the Cloud Run feature.
type CloudRunConfigResponseOutput struct{ *pulumi.OutputState }

func (CloudRunConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudRunConfigResponse)(nil)).Elem()
}

func (o CloudRunConfigResponseOutput) ToCloudRunConfigResponseOutput() CloudRunConfigResponseOutput {
	return o
}

func (o CloudRunConfigResponseOutput) ToCloudRunConfigResponseOutputWithContext(ctx context.Context) CloudRunConfigResponseOutput {
	return o
}

func (o CloudRunConfigResponseOutput) ToCloudRunConfigResponsePtrOutput() CloudRunConfigResponsePtrOutput {
	return o.ToCloudRunConfigResponsePtrOutputWithContext(context.Background())
}

func (o CloudRunConfigResponseOutput) ToCloudRunConfigResponsePtrOutputWithContext(ctx context.Context) CloudRunConfigResponsePtrOutput {
	return o.ApplyT(func(v CloudRunConfigResponse) *CloudRunConfigResponse {
		return &v
	}).(CloudRunConfigResponsePtrOutput)
}

// Whether Cloud Run addon is enabled for this cluster.
func (o CloudRunConfigResponseOutput) Disabled() pulumi.BoolOutput {
	return o.ApplyT(func(v CloudRunConfigResponse) bool { return v.Disabled }).(pulumi.BoolOutput)
}

// Which load balancer type is installed for Cloud Run.
func (o CloudRunConfigResponseOutput) LoadBalancerType() pulumi.StringOutput {
	return o.ApplyT(func(v CloudRunConfigResponse) string { return v.LoadBalancerType }).(pulumi.StringOutput)
}

type CloudRunConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (CloudRunConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudRunConfigResponse)(nil)).Elem()
}

func (o CloudRunConfigResponsePtrOutput) ToCloudRunConfigResponsePtrOutput() CloudRunConfigResponsePtrOutput {
	return o
}

func (o CloudRunConfigResponsePtrOutput) ToCloudRunConfigResponsePtrOutputWithContext(ctx context.Context) CloudRunConfigResponsePtrOutput {
	return o
}

func (o CloudRunConfigResponsePtrOutput) Elem() CloudRunConfigResponseOutput {
	return o.ApplyT(func(v *CloudRunConfigResponse) CloudRunConfigResponse { return *v }).(CloudRunConfigResponseOutput)
}

// Whether Cloud Run addon is enabled for this cluster.
func (o CloudRunConfigResponsePtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CloudRunConfigResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// Which load balancer type is installed for Cloud Run.
func (o CloudRunConfigResponsePtrOutput) LoadBalancerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudRunConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.LoadBalancerType
	}).(pulumi.StringPtrOutput)
}

// ClusterAutoscaling contains global, per-cluster information required by Cluster Autoscaler to automatically adjust the size of the cluster and create/delete node pools based on the current needs.
type ClusterAutoscaling struct {
	// The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the NodePool's nodes can be created by NAP.
	AutoprovisioningLocations []string `pulumi:"autoprovisioningLocations"`
	// AutoprovisioningNodePoolDefaults contains defaults for a node pool created by NAP.
	AutoprovisioningNodePoolDefaults *AutoprovisioningNodePoolDefaults `pulumi:"autoprovisioningNodePoolDefaults"`
	// Enables automatic node pool creation and deletion.
	EnableNodeAutoprovisioning *bool `pulumi:"enableNodeAutoprovisioning"`
	// Contains global constraints regarding minimum and maximum amount of resources in the cluster.
	ResourceLimits []ResourceLimit `pulumi:"resourceLimits"`
}

// ClusterAutoscalingInput is an input type that accepts ClusterAutoscalingArgs and ClusterAutoscalingOutput values.
// You can construct a concrete instance of `ClusterAutoscalingInput` via:
//
//          ClusterAutoscalingArgs{...}
type ClusterAutoscalingInput interface {
	pulumi.Input

	ToClusterAutoscalingOutput() ClusterAutoscalingOutput
	ToClusterAutoscalingOutputWithContext(context.Context) ClusterAutoscalingOutput
}

// ClusterAutoscaling contains global, per-cluster information required by Cluster Autoscaler to automatically adjust the size of the cluster and create/delete node pools based on the current needs.
type ClusterAutoscalingArgs struct {
	// The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the NodePool's nodes can be created by NAP.
	AutoprovisioningLocations pulumi.StringArrayInput `pulumi:"autoprovisioningLocations"`
	// AutoprovisioningNodePoolDefaults contains defaults for a node pool created by NAP.
	AutoprovisioningNodePoolDefaults AutoprovisioningNodePoolDefaultsPtrInput `pulumi:"autoprovisioningNodePoolDefaults"`
	// Enables automatic node pool creation and deletion.
	EnableNodeAutoprovisioning pulumi.BoolPtrInput `pulumi:"enableNodeAutoprovisioning"`
	// Contains global constraints regarding minimum and maximum amount of resources in the cluster.
	ResourceLimits ResourceLimitArrayInput `pulumi:"resourceLimits"`
}

func (ClusterAutoscalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterAutoscaling)(nil)).Elem()
}

func (i ClusterAutoscalingArgs) ToClusterAutoscalingOutput() ClusterAutoscalingOutput {
	return i.ToClusterAutoscalingOutputWithContext(context.Background())
}

func (i ClusterAutoscalingArgs) ToClusterAutoscalingOutputWithContext(ctx context.Context) ClusterAutoscalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterAutoscalingOutput)
}

func (i ClusterAutoscalingArgs) ToClusterAutoscalingPtrOutput() ClusterAutoscalingPtrOutput {
	return i.ToClusterAutoscalingPtrOutputWithContext(context.Background())
}

func (i ClusterAutoscalingArgs) ToClusterAutoscalingPtrOutputWithContext(ctx context.Context) ClusterAutoscalingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterAutoscalingOutput).ToClusterAutoscalingPtrOutputWithContext(ctx)
}

// ClusterAutoscalingPtrInput is an input type that accepts ClusterAutoscalingArgs, ClusterAutoscalingPtr and ClusterAutoscalingPtrOutput values.
// You can construct a concrete instance of `ClusterAutoscalingPtrInput` via:
//
//          ClusterAutoscalingArgs{...}
//
//  or:
//
//          nil
type ClusterAutoscalingPtrInput interface {
	pulumi.Input

	ToClusterAutoscalingPtrOutput() ClusterAutoscalingPtrOutput
	ToClusterAutoscalingPtrOutputWithContext(context.Context) ClusterAutoscalingPtrOutput
}

type clusterAutoscalingPtrType ClusterAutoscalingArgs

func ClusterAutoscalingPtr(v *ClusterAutoscalingArgs) ClusterAutoscalingPtrInput {
	return (*clusterAutoscalingPtrType)(v)
}

func (*clusterAutoscalingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterAutoscaling)(nil)).Elem()
}

func (i *clusterAutoscalingPtrType) ToClusterAutoscalingPtrOutput() ClusterAutoscalingPtrOutput {
	return i.ToClusterAutoscalingPtrOutputWithContext(context.Background())
}

func (i *clusterAutoscalingPtrType) ToClusterAutoscalingPtrOutputWithContext(ctx context.Context) ClusterAutoscalingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterAutoscalingPtrOutput)
}

// ClusterAutoscaling contains global, per-cluster information required by Cluster Autoscaler to automatically adjust the size of the cluster and create/delete node pools based on the current needs.
type ClusterAutoscalingOutput struct{ *pulumi.OutputState }

func (ClusterAutoscalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterAutoscaling)(nil)).Elem()
}

func (o ClusterAutoscalingOutput) ToClusterAutoscalingOutput() ClusterAutoscalingOutput {
	return o
}

func (o ClusterAutoscalingOutput) ToClusterAutoscalingOutputWithContext(ctx context.Context) ClusterAutoscalingOutput {
	return o
}

func (o ClusterAutoscalingOutput) ToClusterAutoscalingPtrOutput() ClusterAutoscalingPtrOutput {
	return o.ToClusterAutoscalingPtrOutputWithContext(context.Background())
}

func (o ClusterAutoscalingOutput) ToClusterAutoscalingPtrOutputWithContext(ctx context.Context) ClusterAutoscalingPtrOutput {
	return o.ApplyT(func(v ClusterAutoscaling) *ClusterAutoscaling {
		return &v
	}).(ClusterAutoscalingPtrOutput)
}

// The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the NodePool's nodes can be created by NAP.
func (o ClusterAutoscalingOutput) AutoprovisioningLocations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterAutoscaling) []string { return v.AutoprovisioningLocations }).(pulumi.StringArrayOutput)
}

// AutoprovisioningNodePoolDefaults contains defaults for a node pool created by NAP.
func (o ClusterAutoscalingOutput) AutoprovisioningNodePoolDefaults() AutoprovisioningNodePoolDefaultsPtrOutput {
	return o.ApplyT(func(v ClusterAutoscaling) *AutoprovisioningNodePoolDefaults {
		return v.AutoprovisioningNodePoolDefaults
	}).(AutoprovisioningNodePoolDefaultsPtrOutput)
}

// Enables automatic node pool creation and deletion.
func (o ClusterAutoscalingOutput) EnableNodeAutoprovisioning() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterAutoscaling) *bool { return v.EnableNodeAutoprovisioning }).(pulumi.BoolPtrOutput)
}

// Contains global constraints regarding minimum and maximum amount of resources in the cluster.
func (o ClusterAutoscalingOutput) ResourceLimits() ResourceLimitArrayOutput {
	return o.ApplyT(func(v ClusterAutoscaling) []ResourceLimit { return v.ResourceLimits }).(ResourceLimitArrayOutput)
}

type ClusterAutoscalingPtrOutput struct{ *pulumi.OutputState }

func (ClusterAutoscalingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterAutoscaling)(nil)).Elem()
}

func (o ClusterAutoscalingPtrOutput) ToClusterAutoscalingPtrOutput() ClusterAutoscalingPtrOutput {
	return o
}

func (o ClusterAutoscalingPtrOutput) ToClusterAutoscalingPtrOutputWithContext(ctx context.Context) ClusterAutoscalingPtrOutput {
	return o
}

func (o ClusterAutoscalingPtrOutput) Elem() ClusterAutoscalingOutput {
	return o.ApplyT(func(v *ClusterAutoscaling) ClusterAutoscaling { return *v }).(ClusterAutoscalingOutput)
}

// The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the NodePool's nodes can be created by NAP.
func (o ClusterAutoscalingPtrOutput) AutoprovisioningLocations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClusterAutoscaling) []string {
		if v == nil {
			return nil
		}
		return v.AutoprovisioningLocations
	}).(pulumi.StringArrayOutput)
}

// AutoprovisioningNodePoolDefaults contains defaults for a node pool created by NAP.
func (o ClusterAutoscalingPtrOutput) AutoprovisioningNodePoolDefaults() AutoprovisioningNodePoolDefaultsPtrOutput {
	return o.ApplyT(func(v *ClusterAutoscaling) *AutoprovisioningNodePoolDefaults {
		if v == nil {
			return nil
		}
		return v.AutoprovisioningNodePoolDefaults
	}).(AutoprovisioningNodePoolDefaultsPtrOutput)
}

// Enables automatic node pool creation and deletion.
func (o ClusterAutoscalingPtrOutput) EnableNodeAutoprovisioning() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterAutoscaling) *bool {
		if v == nil {
			return nil
		}
		return v.EnableNodeAutoprovisioning
	}).(pulumi.BoolPtrOutput)
}

// Contains global constraints regarding minimum and maximum amount of resources in the cluster.
func (o ClusterAutoscalingPtrOutput) ResourceLimits() ResourceLimitArrayOutput {
	return o.ApplyT(func(v *ClusterAutoscaling) []ResourceLimit {
		if v == nil {
			return nil
		}
		return v.ResourceLimits
	}).(ResourceLimitArrayOutput)
}

// ClusterAutoscaling contains global, per-cluster information required by Cluster Autoscaler to automatically adjust the size of the cluster and create/delete node pools based on the current needs.
type ClusterAutoscalingResponse struct {
	// The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the NodePool's nodes can be created by NAP.
	AutoprovisioningLocations []string `pulumi:"autoprovisioningLocations"`
	// AutoprovisioningNodePoolDefaults contains defaults for a node pool created by NAP.
	AutoprovisioningNodePoolDefaults AutoprovisioningNodePoolDefaultsResponse `pulumi:"autoprovisioningNodePoolDefaults"`
	// Enables automatic node pool creation and deletion.
	EnableNodeAutoprovisioning bool `pulumi:"enableNodeAutoprovisioning"`
	// Contains global constraints regarding minimum and maximum amount of resources in the cluster.
	ResourceLimits []ResourceLimitResponse `pulumi:"resourceLimits"`
}

// ClusterAutoscalingResponseInput is an input type that accepts ClusterAutoscalingResponseArgs and ClusterAutoscalingResponseOutput values.
// You can construct a concrete instance of `ClusterAutoscalingResponseInput` via:
//
//          ClusterAutoscalingResponseArgs{...}
type ClusterAutoscalingResponseInput interface {
	pulumi.Input

	ToClusterAutoscalingResponseOutput() ClusterAutoscalingResponseOutput
	ToClusterAutoscalingResponseOutputWithContext(context.Context) ClusterAutoscalingResponseOutput
}

// ClusterAutoscaling contains global, per-cluster information required by Cluster Autoscaler to automatically adjust the size of the cluster and create/delete node pools based on the current needs.
type ClusterAutoscalingResponseArgs struct {
	// The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the NodePool's nodes can be created by NAP.
	AutoprovisioningLocations pulumi.StringArrayInput `pulumi:"autoprovisioningLocations"`
	// AutoprovisioningNodePoolDefaults contains defaults for a node pool created by NAP.
	AutoprovisioningNodePoolDefaults AutoprovisioningNodePoolDefaultsResponseInput `pulumi:"autoprovisioningNodePoolDefaults"`
	// Enables automatic node pool creation and deletion.
	EnableNodeAutoprovisioning pulumi.BoolInput `pulumi:"enableNodeAutoprovisioning"`
	// Contains global constraints regarding minimum and maximum amount of resources in the cluster.
	ResourceLimits ResourceLimitResponseArrayInput `pulumi:"resourceLimits"`
}

func (ClusterAutoscalingResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterAutoscalingResponse)(nil)).Elem()
}

func (i ClusterAutoscalingResponseArgs) ToClusterAutoscalingResponseOutput() ClusterAutoscalingResponseOutput {
	return i.ToClusterAutoscalingResponseOutputWithContext(context.Background())
}

func (i ClusterAutoscalingResponseArgs) ToClusterAutoscalingResponseOutputWithContext(ctx context.Context) ClusterAutoscalingResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterAutoscalingResponseOutput)
}

func (i ClusterAutoscalingResponseArgs) ToClusterAutoscalingResponsePtrOutput() ClusterAutoscalingResponsePtrOutput {
	return i.ToClusterAutoscalingResponsePtrOutputWithContext(context.Background())
}

func (i ClusterAutoscalingResponseArgs) ToClusterAutoscalingResponsePtrOutputWithContext(ctx context.Context) ClusterAutoscalingResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterAutoscalingResponseOutput).ToClusterAutoscalingResponsePtrOutputWithContext(ctx)
}

// ClusterAutoscalingResponsePtrInput is an input type that accepts ClusterAutoscalingResponseArgs, ClusterAutoscalingResponsePtr and ClusterAutoscalingResponsePtrOutput values.
// You can construct a concrete instance of `ClusterAutoscalingResponsePtrInput` via:
//
//          ClusterAutoscalingResponseArgs{...}
//
//  or:
//
//          nil
type ClusterAutoscalingResponsePtrInput interface {
	pulumi.Input

	ToClusterAutoscalingResponsePtrOutput() ClusterAutoscalingResponsePtrOutput
	ToClusterAutoscalingResponsePtrOutputWithContext(context.Context) ClusterAutoscalingResponsePtrOutput
}

type clusterAutoscalingResponsePtrType ClusterAutoscalingResponseArgs

func ClusterAutoscalingResponsePtr(v *ClusterAutoscalingResponseArgs) ClusterAutoscalingResponsePtrInput {
	return (*clusterAutoscalingResponsePtrType)(v)
}

func (*clusterAutoscalingResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterAutoscalingResponse)(nil)).Elem()
}

func (i *clusterAutoscalingResponsePtrType) ToClusterAutoscalingResponsePtrOutput() ClusterAutoscalingResponsePtrOutput {
	return i.ToClusterAutoscalingResponsePtrOutputWithContext(context.Background())
}

func (i *clusterAutoscalingResponsePtrType) ToClusterAutoscalingResponsePtrOutputWithContext(ctx context.Context) ClusterAutoscalingResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterAutoscalingResponsePtrOutput)
}

// ClusterAutoscaling contains global, per-cluster information required by Cluster Autoscaler to automatically adjust the size of the cluster and create/delete node pools based on the current needs.
type ClusterAutoscalingResponseOutput struct{ *pulumi.OutputState }

func (ClusterAutoscalingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterAutoscalingResponse)(nil)).Elem()
}

func (o ClusterAutoscalingResponseOutput) ToClusterAutoscalingResponseOutput() ClusterAutoscalingResponseOutput {
	return o
}

func (o ClusterAutoscalingResponseOutput) ToClusterAutoscalingResponseOutputWithContext(ctx context.Context) ClusterAutoscalingResponseOutput {
	return o
}

func (o ClusterAutoscalingResponseOutput) ToClusterAutoscalingResponsePtrOutput() ClusterAutoscalingResponsePtrOutput {
	return o.ToClusterAutoscalingResponsePtrOutputWithContext(context.Background())
}

func (o ClusterAutoscalingResponseOutput) ToClusterAutoscalingResponsePtrOutputWithContext(ctx context.Context) ClusterAutoscalingResponsePtrOutput {
	return o.ApplyT(func(v ClusterAutoscalingResponse) *ClusterAutoscalingResponse {
		return &v
	}).(ClusterAutoscalingResponsePtrOutput)
}

// The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the NodePool's nodes can be created by NAP.
func (o ClusterAutoscalingResponseOutput) AutoprovisioningLocations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterAutoscalingResponse) []string { return v.AutoprovisioningLocations }).(pulumi.StringArrayOutput)
}

// AutoprovisioningNodePoolDefaults contains defaults for a node pool created by NAP.
func (o ClusterAutoscalingResponseOutput) AutoprovisioningNodePoolDefaults() AutoprovisioningNodePoolDefaultsResponseOutput {
	return o.ApplyT(func(v ClusterAutoscalingResponse) AutoprovisioningNodePoolDefaultsResponse {
		return v.AutoprovisioningNodePoolDefaults
	}).(AutoprovisioningNodePoolDefaultsResponseOutput)
}

// Enables automatic node pool creation and deletion.
func (o ClusterAutoscalingResponseOutput) EnableNodeAutoprovisioning() pulumi.BoolOutput {
	return o.ApplyT(func(v ClusterAutoscalingResponse) bool { return v.EnableNodeAutoprovisioning }).(pulumi.BoolOutput)
}

// Contains global constraints regarding minimum and maximum amount of resources in the cluster.
func (o ClusterAutoscalingResponseOutput) ResourceLimits() ResourceLimitResponseArrayOutput {
	return o.ApplyT(func(v ClusterAutoscalingResponse) []ResourceLimitResponse { return v.ResourceLimits }).(ResourceLimitResponseArrayOutput)
}

type ClusterAutoscalingResponsePtrOutput struct{ *pulumi.OutputState }

func (ClusterAutoscalingResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterAutoscalingResponse)(nil)).Elem()
}

func (o ClusterAutoscalingResponsePtrOutput) ToClusterAutoscalingResponsePtrOutput() ClusterAutoscalingResponsePtrOutput {
	return o
}

func (o ClusterAutoscalingResponsePtrOutput) ToClusterAutoscalingResponsePtrOutputWithContext(ctx context.Context) ClusterAutoscalingResponsePtrOutput {
	return o
}

func (o ClusterAutoscalingResponsePtrOutput) Elem() ClusterAutoscalingResponseOutput {
	return o.ApplyT(func(v *ClusterAutoscalingResponse) ClusterAutoscalingResponse { return *v }).(ClusterAutoscalingResponseOutput)
}

// The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the NodePool's nodes can be created by NAP.
func (o ClusterAutoscalingResponsePtrOutput) AutoprovisioningLocations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClusterAutoscalingResponse) []string {
		if v == nil {
			return nil
		}
		return v.AutoprovisioningLocations
	}).(pulumi.StringArrayOutput)
}

// AutoprovisioningNodePoolDefaults contains defaults for a node pool created by NAP.
func (o ClusterAutoscalingResponsePtrOutput) AutoprovisioningNodePoolDefaults() AutoprovisioningNodePoolDefaultsResponsePtrOutput {
	return o.ApplyT(func(v *ClusterAutoscalingResponse) *AutoprovisioningNodePoolDefaultsResponse {
		if v == nil {
			return nil
		}
		return &v.AutoprovisioningNodePoolDefaults
	}).(AutoprovisioningNodePoolDefaultsResponsePtrOutput)
}

// Enables automatic node pool creation and deletion.
func (o ClusterAutoscalingResponsePtrOutput) EnableNodeAutoprovisioning() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterAutoscalingResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.EnableNodeAutoprovisioning
	}).(pulumi.BoolPtrOutput)
}

// Contains global constraints regarding minimum and maximum amount of resources in the cluster.
func (o ClusterAutoscalingResponsePtrOutput) ResourceLimits() ResourceLimitResponseArrayOutput {
	return o.ApplyT(func(v *ClusterAutoscalingResponse) []ResourceLimitResponse {
		if v == nil {
			return nil
		}
		return v.ResourceLimits
	}).(ResourceLimitResponseArrayOutput)
}

// ClusterUpdate describes an update to the cluster. Exactly one update can be applied to a cluster with each request, so at most one field can be provided.
type ClusterUpdate struct {
	// Configurations for the various addons available to run in the cluster.
	DesiredAddonsConfig *AddonsConfig `pulumi:"desiredAddonsConfig"`
	// The desired configuration options for the Binary Authorization feature.
	DesiredBinaryAuthorization *BinaryAuthorization `pulumi:"desiredBinaryAuthorization"`
	// Cluster-level autoscaling configuration.
	DesiredClusterAutoscaling *ClusterAutoscaling `pulumi:"desiredClusterAutoscaling"`
	// Configuration of etcd encryption.
	DesiredDatabaseEncryption *DatabaseEncryption `pulumi:"desiredDatabaseEncryption"`
	// The desired status of whether to disable default sNAT for this cluster.
	DesiredDefaultSnatStatus *DefaultSnatStatus `pulumi:"desiredDefaultSnatStatus"`
	// The desired image type for the node pool. NOTE: Set the "desired_node_pool" field as well.
	DesiredImageType *string `pulumi:"desiredImageType"`
	// The desired config of Intra-node visibility.
	DesiredIntraNodeVisibilityConfig *IntraNodeVisibilityConfig `pulumi:"desiredIntraNodeVisibilityConfig"`
	// The desired list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the cluster's nodes should be located. This list must always include the cluster's primary zone. Warning: changing cluster locations will update the locations of all node pools and will result in nodes being added and/or removed.
	DesiredLocations []string `pulumi:"desiredLocations"`
	// The logging service the cluster should use to write logs. Currently available options: * `logging.googleapis.com/kubernetes` - The Cloud Logging service with a Kubernetes-native resource model * `logging.googleapis.com` - The legacy Cloud Logging service (no longer available as of GKE 1.15). * `none` - no logs will be exported from the cluster. If left as an empty string,`logging.googleapis.com/kubernetes` will be used for GKE 1.14+ or `logging.googleapis.com` for earlier versions.
	DesiredLoggingService *string `pulumi:"desiredLoggingService"`
	// The desired configuration options for master authorized networks feature.
	DesiredMasterAuthorizedNetworksConfig *MasterAuthorizedNetworksConfig `pulumi:"desiredMasterAuthorizedNetworksConfig"`
	// The Kubernetes version to change the master to. Users may specify either explicit versions offered by Kubernetes Engine or version aliases, which have the following behavior: - "latest": picks the highest valid Kubernetes version - "1.X": picks the highest valid patch+gke.N patch in the 1.X version - "1.X.Y": picks the highest valid gke.N patch in the 1.X.Y version - "1.X.Y-gke.N": picks an explicit Kubernetes version - "-": picks the default Kubernetes version
	DesiredMasterVersion *string `pulumi:"desiredMasterVersion"`
	// The monitoring service the cluster should use to write metrics. Currently available options: * "monitoring.googleapis.com/kubernetes" - The Cloud Monitoring service with a Kubernetes-native resource model * `monitoring.googleapis.com` - The legacy Cloud Monitoring service (no longer available as of GKE 1.15). * `none` - No metrics will be exported from the cluster. If left as an empty string,`monitoring.googleapis.com/kubernetes` will be used for GKE 1.14+ or `monitoring.googleapis.com` for earlier versions.
	DesiredMonitoringService *string `pulumi:"desiredMonitoringService"`
	// Autoscaler configuration for the node pool specified in desired_node_pool_id. If there is only one pool in the cluster and desired_node_pool_id is not provided then the change applies to that single node pool.
	DesiredNodePoolAutoscaling *NodePoolAutoscaling `pulumi:"desiredNodePoolAutoscaling"`
	// The node pool to be upgraded. This field is mandatory if "desired_node_version", "desired_image_family" or "desired_node_pool_autoscaling" is specified and there is more than one node pool on the cluster.
	DesiredNodePoolId *string `pulumi:"desiredNodePoolId"`
	// The Kubernetes version to change the nodes to (typically an upgrade). Users may specify either explicit versions offered by Kubernetes Engine or version aliases, which have the following behavior: - "latest": picks the highest valid Kubernetes version - "1.X": picks the highest valid patch+gke.N patch in the 1.X version - "1.X.Y": picks the highest valid gke.N patch in the 1.X.Y version - "1.X.Y-gke.N": picks an explicit Kubernetes version - "-": picks the Kubernetes master version
	DesiredNodeVersion *string `pulumi:"desiredNodeVersion"`
	// The desired notification configuration.
	DesiredNotificationConfig *NotificationConfig `pulumi:"desiredNotificationConfig"`
	// The desired private cluster configuration.
	DesiredPrivateClusterConfig *PrivateClusterConfig `pulumi:"desiredPrivateClusterConfig"`
	// The desired state of IPv6 connectivity to Google Services.
	DesiredPrivateIpv6GoogleAccess *string `pulumi:"desiredPrivateIpv6GoogleAccess"`
	// The desired release channel configuration.
	DesiredReleaseChannel *ReleaseChannel `pulumi:"desiredReleaseChannel"`
	// The desired configuration for exporting resource usage.
	DesiredResourceUsageExportConfig *ResourceUsageExportConfig `pulumi:"desiredResourceUsageExportConfig"`
	// Configuration for Shielded Nodes.
	DesiredShieldedNodes *ShieldedNodes `pulumi:"desiredShieldedNodes"`
	// Cluster-level Vertical Pod Autoscaling configuration.
	DesiredVerticalPodAutoscaling *VerticalPodAutoscaling `pulumi:"desiredVerticalPodAutoscaling"`
	// Configuration for Workload Identity.
	DesiredWorkloadIdentityConfig *WorkloadIdentityConfig `pulumi:"desiredWorkloadIdentityConfig"`
}

// ClusterUpdateInput is an input type that accepts ClusterUpdateArgs and ClusterUpdateOutput values.
// You can construct a concrete instance of `ClusterUpdateInput` via:
//
//          ClusterUpdateArgs{...}
type ClusterUpdateInput interface {
	pulumi.Input

	ToClusterUpdateOutput() ClusterUpdateOutput
	ToClusterUpdateOutputWithContext(context.Context) ClusterUpdateOutput
}

// ClusterUpdate describes an update to the cluster. Exactly one update can be applied to a cluster with each request, so at most one field can be provided.
type ClusterUpdateArgs struct {
	// Configurations for the various addons available to run in the cluster.
	DesiredAddonsConfig AddonsConfigPtrInput `pulumi:"desiredAddonsConfig"`
	// The desired configuration options for the Binary Authorization feature.
	DesiredBinaryAuthorization BinaryAuthorizationPtrInput `pulumi:"desiredBinaryAuthorization"`
	// Cluster-level autoscaling configuration.
	DesiredClusterAutoscaling ClusterAutoscalingPtrInput `pulumi:"desiredClusterAutoscaling"`
	// Configuration of etcd encryption.
	DesiredDatabaseEncryption DatabaseEncryptionPtrInput `pulumi:"desiredDatabaseEncryption"`
	// The desired status of whether to disable default sNAT for this cluster.
	DesiredDefaultSnatStatus DefaultSnatStatusPtrInput `pulumi:"desiredDefaultSnatStatus"`
	// The desired image type for the node pool. NOTE: Set the "desired_node_pool" field as well.
	DesiredImageType pulumi.StringPtrInput `pulumi:"desiredImageType"`
	// The desired config of Intra-node visibility.
	DesiredIntraNodeVisibilityConfig IntraNodeVisibilityConfigPtrInput `pulumi:"desiredIntraNodeVisibilityConfig"`
	// The desired list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the cluster's nodes should be located. This list must always include the cluster's primary zone. Warning: changing cluster locations will update the locations of all node pools and will result in nodes being added and/or removed.
	DesiredLocations pulumi.StringArrayInput `pulumi:"desiredLocations"`
	// The logging service the cluster should use to write logs. Currently available options: * `logging.googleapis.com/kubernetes` - The Cloud Logging service with a Kubernetes-native resource model * `logging.googleapis.com` - The legacy Cloud Logging service (no longer available as of GKE 1.15). * `none` - no logs will be exported from the cluster. If left as an empty string,`logging.googleapis.com/kubernetes` will be used for GKE 1.14+ or `logging.googleapis.com` for earlier versions.
	DesiredLoggingService pulumi.StringPtrInput `pulumi:"desiredLoggingService"`
	// The desired configuration options for master authorized networks feature.
	DesiredMasterAuthorizedNetworksConfig MasterAuthorizedNetworksConfigPtrInput `pulumi:"desiredMasterAuthorizedNetworksConfig"`
	// The Kubernetes version to change the master to. Users may specify either explicit versions offered by Kubernetes Engine or version aliases, which have the following behavior: - "latest": picks the highest valid Kubernetes version - "1.X": picks the highest valid patch+gke.N patch in the 1.X version - "1.X.Y": picks the highest valid gke.N patch in the 1.X.Y version - "1.X.Y-gke.N": picks an explicit Kubernetes version - "-": picks the default Kubernetes version
	DesiredMasterVersion pulumi.StringPtrInput `pulumi:"desiredMasterVersion"`
	// The monitoring service the cluster should use to write metrics. Currently available options: * "monitoring.googleapis.com/kubernetes" - The Cloud Monitoring service with a Kubernetes-native resource model * `monitoring.googleapis.com` - The legacy Cloud Monitoring service (no longer available as of GKE 1.15). * `none` - No metrics will be exported from the cluster. If left as an empty string,`monitoring.googleapis.com/kubernetes` will be used for GKE 1.14+ or `monitoring.googleapis.com` for earlier versions.
	DesiredMonitoringService pulumi.StringPtrInput `pulumi:"desiredMonitoringService"`
	// Autoscaler configuration for the node pool specified in desired_node_pool_id. If there is only one pool in the cluster and desired_node_pool_id is not provided then the change applies to that single node pool.
	DesiredNodePoolAutoscaling NodePoolAutoscalingPtrInput `pulumi:"desiredNodePoolAutoscaling"`
	// The node pool to be upgraded. This field is mandatory if "desired_node_version", "desired_image_family" or "desired_node_pool_autoscaling" is specified and there is more than one node pool on the cluster.
	DesiredNodePoolId pulumi.StringPtrInput `pulumi:"desiredNodePoolId"`
	// The Kubernetes version to change the nodes to (typically an upgrade). Users may specify either explicit versions offered by Kubernetes Engine or version aliases, which have the following behavior: - "latest": picks the highest valid Kubernetes version - "1.X": picks the highest valid patch+gke.N patch in the 1.X version - "1.X.Y": picks the highest valid gke.N patch in the 1.X.Y version - "1.X.Y-gke.N": picks an explicit Kubernetes version - "-": picks the Kubernetes master version
	DesiredNodeVersion pulumi.StringPtrInput `pulumi:"desiredNodeVersion"`
	// The desired notification configuration.
	DesiredNotificationConfig NotificationConfigPtrInput `pulumi:"desiredNotificationConfig"`
	// The desired private cluster configuration.
	DesiredPrivateClusterConfig PrivateClusterConfigPtrInput `pulumi:"desiredPrivateClusterConfig"`
	// The desired state of IPv6 connectivity to Google Services.
	DesiredPrivateIpv6GoogleAccess *ClusterUpdateDesiredPrivateIpv6GoogleAccess `pulumi:"desiredPrivateIpv6GoogleAccess"`
	// The desired release channel configuration.
	DesiredReleaseChannel ReleaseChannelPtrInput `pulumi:"desiredReleaseChannel"`
	// The desired configuration for exporting resource usage.
	DesiredResourceUsageExportConfig ResourceUsageExportConfigPtrInput `pulumi:"desiredResourceUsageExportConfig"`
	// Configuration for Shielded Nodes.
	DesiredShieldedNodes ShieldedNodesPtrInput `pulumi:"desiredShieldedNodes"`
	// Cluster-level Vertical Pod Autoscaling configuration.
	DesiredVerticalPodAutoscaling VerticalPodAutoscalingPtrInput `pulumi:"desiredVerticalPodAutoscaling"`
	// Configuration for Workload Identity.
	DesiredWorkloadIdentityConfig WorkloadIdentityConfigPtrInput `pulumi:"desiredWorkloadIdentityConfig"`
}

func (ClusterUpdateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterUpdate)(nil)).Elem()
}

func (i ClusterUpdateArgs) ToClusterUpdateOutput() ClusterUpdateOutput {
	return i.ToClusterUpdateOutputWithContext(context.Background())
}

func (i ClusterUpdateArgs) ToClusterUpdateOutputWithContext(ctx context.Context) ClusterUpdateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterUpdateOutput)
}

// ClusterUpdate describes an update to the cluster. Exactly one update can be applied to a cluster with each request, so at most one field can be provided.
type ClusterUpdateOutput struct{ *pulumi.OutputState }

func (ClusterUpdateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterUpdate)(nil)).Elem()
}

func (o ClusterUpdateOutput) ToClusterUpdateOutput() ClusterUpdateOutput {
	return o
}

func (o ClusterUpdateOutput) ToClusterUpdateOutputWithContext(ctx context.Context) ClusterUpdateOutput {
	return o
}

// Configurations for the various addons available to run in the cluster.
func (o ClusterUpdateOutput) DesiredAddonsConfig() AddonsConfigPtrOutput {
	return o.ApplyT(func(v ClusterUpdate) *AddonsConfig { return v.DesiredAddonsConfig }).(AddonsConfigPtrOutput)
}

// The desired configuration options for the Binary Authorization feature.
func (o ClusterUpdateOutput) DesiredBinaryAuthorization() BinaryAuthorizationPtrOutput {
	return o.ApplyT(func(v ClusterUpdate) *BinaryAuthorization { return v.DesiredBinaryAuthorization }).(BinaryAuthorizationPtrOutput)
}

// Cluster-level autoscaling configuration.
func (o ClusterUpdateOutput) DesiredClusterAutoscaling() ClusterAutoscalingPtrOutput {
	return o.ApplyT(func(v ClusterUpdate) *ClusterAutoscaling { return v.DesiredClusterAutoscaling }).(ClusterAutoscalingPtrOutput)
}

// Configuration of etcd encryption.
func (o ClusterUpdateOutput) DesiredDatabaseEncryption() DatabaseEncryptionPtrOutput {
	return o.ApplyT(func(v ClusterUpdate) *DatabaseEncryption { return v.DesiredDatabaseEncryption }).(DatabaseEncryptionPtrOutput)
}

// The desired status of whether to disable default sNAT for this cluster.
func (o ClusterUpdateOutput) DesiredDefaultSnatStatus() DefaultSnatStatusPtrOutput {
	return o.ApplyT(func(v ClusterUpdate) *DefaultSnatStatus { return v.DesiredDefaultSnatStatus }).(DefaultSnatStatusPtrOutput)
}

// The desired image type for the node pool. NOTE: Set the "desired_node_pool" field as well.
func (o ClusterUpdateOutput) DesiredImageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterUpdate) *string { return v.DesiredImageType }).(pulumi.StringPtrOutput)
}

// The desired config of Intra-node visibility.
func (o ClusterUpdateOutput) DesiredIntraNodeVisibilityConfig() IntraNodeVisibilityConfigPtrOutput {
	return o.ApplyT(func(v ClusterUpdate) *IntraNodeVisibilityConfig { return v.DesiredIntraNodeVisibilityConfig }).(IntraNodeVisibilityConfigPtrOutput)
}

// The desired list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the cluster's nodes should be located. This list must always include the cluster's primary zone. Warning: changing cluster locations will update the locations of all node pools and will result in nodes being added and/or removed.
func (o ClusterUpdateOutput) DesiredLocations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterUpdate) []string { return v.DesiredLocations }).(pulumi.StringArrayOutput)
}

// The logging service the cluster should use to write logs. Currently available options: * `logging.googleapis.com/kubernetes` - The Cloud Logging service with a Kubernetes-native resource model * `logging.googleapis.com` - The legacy Cloud Logging service (no longer available as of GKE 1.15). * `none` - no logs will be exported from the cluster. If left as an empty string,`logging.googleapis.com/kubernetes` will be used for GKE 1.14+ or `logging.googleapis.com` for earlier versions.
func (o ClusterUpdateOutput) DesiredLoggingService() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterUpdate) *string { return v.DesiredLoggingService }).(pulumi.StringPtrOutput)
}

// The desired configuration options for master authorized networks feature.
func (o ClusterUpdateOutput) DesiredMasterAuthorizedNetworksConfig() MasterAuthorizedNetworksConfigPtrOutput {
	return o.ApplyT(func(v ClusterUpdate) *MasterAuthorizedNetworksConfig { return v.DesiredMasterAuthorizedNetworksConfig }).(MasterAuthorizedNetworksConfigPtrOutput)
}

// The Kubernetes version to change the master to. Users may specify either explicit versions offered by Kubernetes Engine or version aliases, which have the following behavior: - "latest": picks the highest valid Kubernetes version - "1.X": picks the highest valid patch+gke.N patch in the 1.X version - "1.X.Y": picks the highest valid gke.N patch in the 1.X.Y version - "1.X.Y-gke.N": picks an explicit Kubernetes version - "-": picks the default Kubernetes version
func (o ClusterUpdateOutput) DesiredMasterVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterUpdate) *string { return v.DesiredMasterVersion }).(pulumi.StringPtrOutput)
}

// The monitoring service the cluster should use to write metrics. Currently available options: * "monitoring.googleapis.com/kubernetes" - The Cloud Monitoring service with a Kubernetes-native resource model * `monitoring.googleapis.com` - The legacy Cloud Monitoring service (no longer available as of GKE 1.15). * `none` - No metrics will be exported from the cluster. If left as an empty string,`monitoring.googleapis.com/kubernetes` will be used for GKE 1.14+ or `monitoring.googleapis.com` for earlier versions.
func (o ClusterUpdateOutput) DesiredMonitoringService() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterUpdate) *string { return v.DesiredMonitoringService }).(pulumi.StringPtrOutput)
}

// Autoscaler configuration for the node pool specified in desired_node_pool_id. If there is only one pool in the cluster and desired_node_pool_id is not provided then the change applies to that single node pool.
func (o ClusterUpdateOutput) DesiredNodePoolAutoscaling() NodePoolAutoscalingPtrOutput {
	return o.ApplyT(func(v ClusterUpdate) *NodePoolAutoscaling { return v.DesiredNodePoolAutoscaling }).(NodePoolAutoscalingPtrOutput)
}

// The node pool to be upgraded. This field is mandatory if "desired_node_version", "desired_image_family" or "desired_node_pool_autoscaling" is specified and there is more than one node pool on the cluster.
func (o ClusterUpdateOutput) DesiredNodePoolId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterUpdate) *string { return v.DesiredNodePoolId }).(pulumi.StringPtrOutput)
}

// The Kubernetes version to change the nodes to (typically an upgrade). Users may specify either explicit versions offered by Kubernetes Engine or version aliases, which have the following behavior: - "latest": picks the highest valid Kubernetes version - "1.X": picks the highest valid patch+gke.N patch in the 1.X version - "1.X.Y": picks the highest valid gke.N patch in the 1.X.Y version - "1.X.Y-gke.N": picks an explicit Kubernetes version - "-": picks the Kubernetes master version
func (o ClusterUpdateOutput) DesiredNodeVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterUpdate) *string { return v.DesiredNodeVersion }).(pulumi.StringPtrOutput)
}

// The desired notification configuration.
func (o ClusterUpdateOutput) DesiredNotificationConfig() NotificationConfigPtrOutput {
	return o.ApplyT(func(v ClusterUpdate) *NotificationConfig { return v.DesiredNotificationConfig }).(NotificationConfigPtrOutput)
}

// The desired private cluster configuration.
func (o ClusterUpdateOutput) DesiredPrivateClusterConfig() PrivateClusterConfigPtrOutput {
	return o.ApplyT(func(v ClusterUpdate) *PrivateClusterConfig { return v.DesiredPrivateClusterConfig }).(PrivateClusterConfigPtrOutput)
}

// The desired state of IPv6 connectivity to Google Services.
func (o ClusterUpdateOutput) DesiredPrivateIpv6GoogleAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterUpdate) *string { return v.DesiredPrivateIpv6GoogleAccess }).(pulumi.StringPtrOutput)
}

// The desired release channel configuration.
func (o ClusterUpdateOutput) DesiredReleaseChannel() ReleaseChannelPtrOutput {
	return o.ApplyT(func(v ClusterUpdate) *ReleaseChannel { return v.DesiredReleaseChannel }).(ReleaseChannelPtrOutput)
}

// The desired configuration for exporting resource usage.
func (o ClusterUpdateOutput) DesiredResourceUsageExportConfig() ResourceUsageExportConfigPtrOutput {
	return o.ApplyT(func(v ClusterUpdate) *ResourceUsageExportConfig { return v.DesiredResourceUsageExportConfig }).(ResourceUsageExportConfigPtrOutput)
}

// Configuration for Shielded Nodes.
func (o ClusterUpdateOutput) DesiredShieldedNodes() ShieldedNodesPtrOutput {
	return o.ApplyT(func(v ClusterUpdate) *ShieldedNodes { return v.DesiredShieldedNodes }).(ShieldedNodesPtrOutput)
}

// Cluster-level Vertical Pod Autoscaling configuration.
func (o ClusterUpdateOutput) DesiredVerticalPodAutoscaling() VerticalPodAutoscalingPtrOutput {
	return o.ApplyT(func(v ClusterUpdate) *VerticalPodAutoscaling { return v.DesiredVerticalPodAutoscaling }).(VerticalPodAutoscalingPtrOutput)
}

// Configuration for Workload Identity.
func (o ClusterUpdateOutput) DesiredWorkloadIdentityConfig() WorkloadIdentityConfigPtrOutput {
	return o.ApplyT(func(v ClusterUpdate) *WorkloadIdentityConfig { return v.DesiredWorkloadIdentityConfig }).(WorkloadIdentityConfigPtrOutput)
}

// ConfidentialNodes is configuration for the confidential nodes feature, which makes nodes run on confidential VMs.
type ConfidentialNodes struct {
	// Whether Confidential Nodes feature is enabled for all nodes in this cluster.
	Enabled *bool `pulumi:"enabled"`
}

// ConfidentialNodesInput is an input type that accepts ConfidentialNodesArgs and ConfidentialNodesOutput values.
// You can construct a concrete instance of `ConfidentialNodesInput` via:
//
//          ConfidentialNodesArgs{...}
type ConfidentialNodesInput interface {
	pulumi.Input

	ToConfidentialNodesOutput() ConfidentialNodesOutput
	ToConfidentialNodesOutputWithContext(context.Context) ConfidentialNodesOutput
}

// ConfidentialNodes is configuration for the confidential nodes feature, which makes nodes run on confidential VMs.
type ConfidentialNodesArgs struct {
	// Whether Confidential Nodes feature is enabled for all nodes in this cluster.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (ConfidentialNodesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfidentialNodes)(nil)).Elem()
}

func (i ConfidentialNodesArgs) ToConfidentialNodesOutput() ConfidentialNodesOutput {
	return i.ToConfidentialNodesOutputWithContext(context.Background())
}

func (i ConfidentialNodesArgs) ToConfidentialNodesOutputWithContext(ctx context.Context) ConfidentialNodesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfidentialNodesOutput)
}

func (i ConfidentialNodesArgs) ToConfidentialNodesPtrOutput() ConfidentialNodesPtrOutput {
	return i.ToConfidentialNodesPtrOutputWithContext(context.Background())
}

func (i ConfidentialNodesArgs) ToConfidentialNodesPtrOutputWithContext(ctx context.Context) ConfidentialNodesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfidentialNodesOutput).ToConfidentialNodesPtrOutputWithContext(ctx)
}

// ConfidentialNodesPtrInput is an input type that accepts ConfidentialNodesArgs, ConfidentialNodesPtr and ConfidentialNodesPtrOutput values.
// You can construct a concrete instance of `ConfidentialNodesPtrInput` via:
//
//          ConfidentialNodesArgs{...}
//
//  or:
//
//          nil
type ConfidentialNodesPtrInput interface {
	pulumi.Input

	ToConfidentialNodesPtrOutput() ConfidentialNodesPtrOutput
	ToConfidentialNodesPtrOutputWithContext(context.Context) ConfidentialNodesPtrOutput
}

type confidentialNodesPtrType ConfidentialNodesArgs

func ConfidentialNodesPtr(v *ConfidentialNodesArgs) ConfidentialNodesPtrInput {
	return (*confidentialNodesPtrType)(v)
}

func (*confidentialNodesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfidentialNodes)(nil)).Elem()
}

func (i *confidentialNodesPtrType) ToConfidentialNodesPtrOutput() ConfidentialNodesPtrOutput {
	return i.ToConfidentialNodesPtrOutputWithContext(context.Background())
}

func (i *confidentialNodesPtrType) ToConfidentialNodesPtrOutputWithContext(ctx context.Context) ConfidentialNodesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfidentialNodesPtrOutput)
}

// ConfidentialNodes is configuration for the confidential nodes feature, which makes nodes run on confidential VMs.
type ConfidentialNodesOutput struct{ *pulumi.OutputState }

func (ConfidentialNodesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfidentialNodes)(nil)).Elem()
}

func (o ConfidentialNodesOutput) ToConfidentialNodesOutput() ConfidentialNodesOutput {
	return o
}

func (o ConfidentialNodesOutput) ToConfidentialNodesOutputWithContext(ctx context.Context) ConfidentialNodesOutput {
	return o
}

func (o ConfidentialNodesOutput) ToConfidentialNodesPtrOutput() ConfidentialNodesPtrOutput {
	return o.ToConfidentialNodesPtrOutputWithContext(context.Background())
}

func (o ConfidentialNodesOutput) ToConfidentialNodesPtrOutputWithContext(ctx context.Context) ConfidentialNodesPtrOutput {
	return o.ApplyT(func(v ConfidentialNodes) *ConfidentialNodes {
		return &v
	}).(ConfidentialNodesPtrOutput)
}

// Whether Confidential Nodes feature is enabled for all nodes in this cluster.
func (o ConfidentialNodesOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConfidentialNodes) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type ConfidentialNodesPtrOutput struct{ *pulumi.OutputState }

func (ConfidentialNodesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfidentialNodes)(nil)).Elem()
}

func (o ConfidentialNodesPtrOutput) ToConfidentialNodesPtrOutput() ConfidentialNodesPtrOutput {
	return o
}

func (o ConfidentialNodesPtrOutput) ToConfidentialNodesPtrOutputWithContext(ctx context.Context) ConfidentialNodesPtrOutput {
	return o
}

func (o ConfidentialNodesPtrOutput) Elem() ConfidentialNodesOutput {
	return o.ApplyT(func(v *ConfidentialNodes) ConfidentialNodes { return *v }).(ConfidentialNodesOutput)
}

// Whether Confidential Nodes feature is enabled for all nodes in this cluster.
func (o ConfidentialNodesPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConfidentialNodes) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// ConfidentialNodes is configuration for the confidential nodes feature, which makes nodes run on confidential VMs.
type ConfidentialNodesResponse struct {
	// Whether Confidential Nodes feature is enabled for all nodes in this cluster.
	Enabled bool `pulumi:"enabled"`
}

// ConfidentialNodesResponseInput is an input type that accepts ConfidentialNodesResponseArgs and ConfidentialNodesResponseOutput values.
// You can construct a concrete instance of `ConfidentialNodesResponseInput` via:
//
//          ConfidentialNodesResponseArgs{...}
type ConfidentialNodesResponseInput interface {
	pulumi.Input

	ToConfidentialNodesResponseOutput() ConfidentialNodesResponseOutput
	ToConfidentialNodesResponseOutputWithContext(context.Context) ConfidentialNodesResponseOutput
}

// ConfidentialNodes is configuration for the confidential nodes feature, which makes nodes run on confidential VMs.
type ConfidentialNodesResponseArgs struct {
	// Whether Confidential Nodes feature is enabled for all nodes in this cluster.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

func (ConfidentialNodesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfidentialNodesResponse)(nil)).Elem()
}

func (i ConfidentialNodesResponseArgs) ToConfidentialNodesResponseOutput() ConfidentialNodesResponseOutput {
	return i.ToConfidentialNodesResponseOutputWithContext(context.Background())
}

func (i ConfidentialNodesResponseArgs) ToConfidentialNodesResponseOutputWithContext(ctx context.Context) ConfidentialNodesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfidentialNodesResponseOutput)
}

func (i ConfidentialNodesResponseArgs) ToConfidentialNodesResponsePtrOutput() ConfidentialNodesResponsePtrOutput {
	return i.ToConfidentialNodesResponsePtrOutputWithContext(context.Background())
}

func (i ConfidentialNodesResponseArgs) ToConfidentialNodesResponsePtrOutputWithContext(ctx context.Context) ConfidentialNodesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfidentialNodesResponseOutput).ToConfidentialNodesResponsePtrOutputWithContext(ctx)
}

// ConfidentialNodesResponsePtrInput is an input type that accepts ConfidentialNodesResponseArgs, ConfidentialNodesResponsePtr and ConfidentialNodesResponsePtrOutput values.
// You can construct a concrete instance of `ConfidentialNodesResponsePtrInput` via:
//
//          ConfidentialNodesResponseArgs{...}
//
//  or:
//
//          nil
type ConfidentialNodesResponsePtrInput interface {
	pulumi.Input

	ToConfidentialNodesResponsePtrOutput() ConfidentialNodesResponsePtrOutput
	ToConfidentialNodesResponsePtrOutputWithContext(context.Context) ConfidentialNodesResponsePtrOutput
}

type confidentialNodesResponsePtrType ConfidentialNodesResponseArgs

func ConfidentialNodesResponsePtr(v *ConfidentialNodesResponseArgs) ConfidentialNodesResponsePtrInput {
	return (*confidentialNodesResponsePtrType)(v)
}

func (*confidentialNodesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfidentialNodesResponse)(nil)).Elem()
}

func (i *confidentialNodesResponsePtrType) ToConfidentialNodesResponsePtrOutput() ConfidentialNodesResponsePtrOutput {
	return i.ToConfidentialNodesResponsePtrOutputWithContext(context.Background())
}

func (i *confidentialNodesResponsePtrType) ToConfidentialNodesResponsePtrOutputWithContext(ctx context.Context) ConfidentialNodesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfidentialNodesResponsePtrOutput)
}

// ConfidentialNodes is configuration for the confidential nodes feature, which makes nodes run on confidential VMs.
type ConfidentialNodesResponseOutput struct{ *pulumi.OutputState }

func (ConfidentialNodesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfidentialNodesResponse)(nil)).Elem()
}

func (o ConfidentialNodesResponseOutput) ToConfidentialNodesResponseOutput() ConfidentialNodesResponseOutput {
	return o
}

func (o ConfidentialNodesResponseOutput) ToConfidentialNodesResponseOutputWithContext(ctx context.Context) ConfidentialNodesResponseOutput {
	return o
}

func (o ConfidentialNodesResponseOutput) ToConfidentialNodesResponsePtrOutput() ConfidentialNodesResponsePtrOutput {
	return o.ToConfidentialNodesResponsePtrOutputWithContext(context.Background())
}

func (o ConfidentialNodesResponseOutput) ToConfidentialNodesResponsePtrOutputWithContext(ctx context.Context) ConfidentialNodesResponsePtrOutput {
	return o.ApplyT(func(v ConfidentialNodesResponse) *ConfidentialNodesResponse {
		return &v
	}).(ConfidentialNodesResponsePtrOutput)
}

// Whether Confidential Nodes feature is enabled for all nodes in this cluster.
func (o ConfidentialNodesResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ConfidentialNodesResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type ConfidentialNodesResponsePtrOutput struct{ *pulumi.OutputState }

func (ConfidentialNodesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfidentialNodesResponse)(nil)).Elem()
}

func (o ConfidentialNodesResponsePtrOutput) ToConfidentialNodesResponsePtrOutput() ConfidentialNodesResponsePtrOutput {
	return o
}

func (o ConfidentialNodesResponsePtrOutput) ToConfidentialNodesResponsePtrOutputWithContext(ctx context.Context) ConfidentialNodesResponsePtrOutput {
	return o
}

func (o ConfidentialNodesResponsePtrOutput) Elem() ConfidentialNodesResponseOutput {
	return o.ApplyT(func(v *ConfidentialNodesResponse) ConfidentialNodesResponse { return *v }).(ConfidentialNodesResponseOutput)
}

// Whether Confidential Nodes feature is enabled for all nodes in this cluster.
func (o ConfidentialNodesResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConfidentialNodesResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Configuration options for the Config Connector add-on.
type ConfigConnectorConfig struct {
	// Whether Cloud Connector is enabled for this cluster.
	Enabled *bool `pulumi:"enabled"`
}

// ConfigConnectorConfigInput is an input type that accepts ConfigConnectorConfigArgs and ConfigConnectorConfigOutput values.
// You can construct a concrete instance of `ConfigConnectorConfigInput` via:
//
//          ConfigConnectorConfigArgs{...}
type ConfigConnectorConfigInput interface {
	pulumi.Input

	ToConfigConnectorConfigOutput() ConfigConnectorConfigOutput
	ToConfigConnectorConfigOutputWithContext(context.Context) ConfigConnectorConfigOutput
}

// Configuration options for the Config Connector add-on.
type ConfigConnectorConfigArgs struct {
	// Whether Cloud Connector is enabled for this cluster.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (ConfigConnectorConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigConnectorConfig)(nil)).Elem()
}

func (i ConfigConnectorConfigArgs) ToConfigConnectorConfigOutput() ConfigConnectorConfigOutput {
	return i.ToConfigConnectorConfigOutputWithContext(context.Background())
}

func (i ConfigConnectorConfigArgs) ToConfigConnectorConfigOutputWithContext(ctx context.Context) ConfigConnectorConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigConnectorConfigOutput)
}

func (i ConfigConnectorConfigArgs) ToConfigConnectorConfigPtrOutput() ConfigConnectorConfigPtrOutput {
	return i.ToConfigConnectorConfigPtrOutputWithContext(context.Background())
}

func (i ConfigConnectorConfigArgs) ToConfigConnectorConfigPtrOutputWithContext(ctx context.Context) ConfigConnectorConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigConnectorConfigOutput).ToConfigConnectorConfigPtrOutputWithContext(ctx)
}

// ConfigConnectorConfigPtrInput is an input type that accepts ConfigConnectorConfigArgs, ConfigConnectorConfigPtr and ConfigConnectorConfigPtrOutput values.
// You can construct a concrete instance of `ConfigConnectorConfigPtrInput` via:
//
//          ConfigConnectorConfigArgs{...}
//
//  or:
//
//          nil
type ConfigConnectorConfigPtrInput interface {
	pulumi.Input

	ToConfigConnectorConfigPtrOutput() ConfigConnectorConfigPtrOutput
	ToConfigConnectorConfigPtrOutputWithContext(context.Context) ConfigConnectorConfigPtrOutput
}

type configConnectorConfigPtrType ConfigConnectorConfigArgs

func ConfigConnectorConfigPtr(v *ConfigConnectorConfigArgs) ConfigConnectorConfigPtrInput {
	return (*configConnectorConfigPtrType)(v)
}

func (*configConnectorConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigConnectorConfig)(nil)).Elem()
}

func (i *configConnectorConfigPtrType) ToConfigConnectorConfigPtrOutput() ConfigConnectorConfigPtrOutput {
	return i.ToConfigConnectorConfigPtrOutputWithContext(context.Background())
}

func (i *configConnectorConfigPtrType) ToConfigConnectorConfigPtrOutputWithContext(ctx context.Context) ConfigConnectorConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigConnectorConfigPtrOutput)
}

// Configuration options for the Config Connector add-on.
type ConfigConnectorConfigOutput struct{ *pulumi.OutputState }

func (ConfigConnectorConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigConnectorConfig)(nil)).Elem()
}

func (o ConfigConnectorConfigOutput) ToConfigConnectorConfigOutput() ConfigConnectorConfigOutput {
	return o
}

func (o ConfigConnectorConfigOutput) ToConfigConnectorConfigOutputWithContext(ctx context.Context) ConfigConnectorConfigOutput {
	return o
}

func (o ConfigConnectorConfigOutput) ToConfigConnectorConfigPtrOutput() ConfigConnectorConfigPtrOutput {
	return o.ToConfigConnectorConfigPtrOutputWithContext(context.Background())
}

func (o ConfigConnectorConfigOutput) ToConfigConnectorConfigPtrOutputWithContext(ctx context.Context) ConfigConnectorConfigPtrOutput {
	return o.ApplyT(func(v ConfigConnectorConfig) *ConfigConnectorConfig {
		return &v
	}).(ConfigConnectorConfigPtrOutput)
}

// Whether Cloud Connector is enabled for this cluster.
func (o ConfigConnectorConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConfigConnectorConfig) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type ConfigConnectorConfigPtrOutput struct{ *pulumi.OutputState }

func (ConfigConnectorConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigConnectorConfig)(nil)).Elem()
}

func (o ConfigConnectorConfigPtrOutput) ToConfigConnectorConfigPtrOutput() ConfigConnectorConfigPtrOutput {
	return o
}

func (o ConfigConnectorConfigPtrOutput) ToConfigConnectorConfigPtrOutputWithContext(ctx context.Context) ConfigConnectorConfigPtrOutput {
	return o
}

func (o ConfigConnectorConfigPtrOutput) Elem() ConfigConnectorConfigOutput {
	return o.ApplyT(func(v *ConfigConnectorConfig) ConfigConnectorConfig { return *v }).(ConfigConnectorConfigOutput)
}

// Whether Cloud Connector is enabled for this cluster.
func (o ConfigConnectorConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConfigConnectorConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Configuration options for the Config Connector add-on.
type ConfigConnectorConfigResponse struct {
	// Whether Cloud Connector is enabled for this cluster.
	Enabled bool `pulumi:"enabled"`
}

// ConfigConnectorConfigResponseInput is an input type that accepts ConfigConnectorConfigResponseArgs and ConfigConnectorConfigResponseOutput values.
// You can construct a concrete instance of `ConfigConnectorConfigResponseInput` via:
//
//          ConfigConnectorConfigResponseArgs{...}
type ConfigConnectorConfigResponseInput interface {
	pulumi.Input

	ToConfigConnectorConfigResponseOutput() ConfigConnectorConfigResponseOutput
	ToConfigConnectorConfigResponseOutputWithContext(context.Context) ConfigConnectorConfigResponseOutput
}

// Configuration options for the Config Connector add-on.
type ConfigConnectorConfigResponseArgs struct {
	// Whether Cloud Connector is enabled for this cluster.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

func (ConfigConnectorConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigConnectorConfigResponse)(nil)).Elem()
}

func (i ConfigConnectorConfigResponseArgs) ToConfigConnectorConfigResponseOutput() ConfigConnectorConfigResponseOutput {
	return i.ToConfigConnectorConfigResponseOutputWithContext(context.Background())
}

func (i ConfigConnectorConfigResponseArgs) ToConfigConnectorConfigResponseOutputWithContext(ctx context.Context) ConfigConnectorConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigConnectorConfigResponseOutput)
}

func (i ConfigConnectorConfigResponseArgs) ToConfigConnectorConfigResponsePtrOutput() ConfigConnectorConfigResponsePtrOutput {
	return i.ToConfigConnectorConfigResponsePtrOutputWithContext(context.Background())
}

func (i ConfigConnectorConfigResponseArgs) ToConfigConnectorConfigResponsePtrOutputWithContext(ctx context.Context) ConfigConnectorConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigConnectorConfigResponseOutput).ToConfigConnectorConfigResponsePtrOutputWithContext(ctx)
}

// ConfigConnectorConfigResponsePtrInput is an input type that accepts ConfigConnectorConfigResponseArgs, ConfigConnectorConfigResponsePtr and ConfigConnectorConfigResponsePtrOutput values.
// You can construct a concrete instance of `ConfigConnectorConfigResponsePtrInput` via:
//
//          ConfigConnectorConfigResponseArgs{...}
//
//  or:
//
//          nil
type ConfigConnectorConfigResponsePtrInput interface {
	pulumi.Input

	ToConfigConnectorConfigResponsePtrOutput() ConfigConnectorConfigResponsePtrOutput
	ToConfigConnectorConfigResponsePtrOutputWithContext(context.Context) ConfigConnectorConfigResponsePtrOutput
}

type configConnectorConfigResponsePtrType ConfigConnectorConfigResponseArgs

func ConfigConnectorConfigResponsePtr(v *ConfigConnectorConfigResponseArgs) ConfigConnectorConfigResponsePtrInput {
	return (*configConnectorConfigResponsePtrType)(v)
}

func (*configConnectorConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigConnectorConfigResponse)(nil)).Elem()
}

func (i *configConnectorConfigResponsePtrType) ToConfigConnectorConfigResponsePtrOutput() ConfigConnectorConfigResponsePtrOutput {
	return i.ToConfigConnectorConfigResponsePtrOutputWithContext(context.Background())
}

func (i *configConnectorConfigResponsePtrType) ToConfigConnectorConfigResponsePtrOutputWithContext(ctx context.Context) ConfigConnectorConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigConnectorConfigResponsePtrOutput)
}

// Configuration options for the Config Connector add-on.
type ConfigConnectorConfigResponseOutput struct{ *pulumi.OutputState }

func (ConfigConnectorConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigConnectorConfigResponse)(nil)).Elem()
}

func (o ConfigConnectorConfigResponseOutput) ToConfigConnectorConfigResponseOutput() ConfigConnectorConfigResponseOutput {
	return o
}

func (o ConfigConnectorConfigResponseOutput) ToConfigConnectorConfigResponseOutputWithContext(ctx context.Context) ConfigConnectorConfigResponseOutput {
	return o
}

func (o ConfigConnectorConfigResponseOutput) ToConfigConnectorConfigResponsePtrOutput() ConfigConnectorConfigResponsePtrOutput {
	return o.ToConfigConnectorConfigResponsePtrOutputWithContext(context.Background())
}

func (o ConfigConnectorConfigResponseOutput) ToConfigConnectorConfigResponsePtrOutputWithContext(ctx context.Context) ConfigConnectorConfigResponsePtrOutput {
	return o.ApplyT(func(v ConfigConnectorConfigResponse) *ConfigConnectorConfigResponse {
		return &v
	}).(ConfigConnectorConfigResponsePtrOutput)
}

// Whether Cloud Connector is enabled for this cluster.
func (o ConfigConnectorConfigResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ConfigConnectorConfigResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type ConfigConnectorConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (ConfigConnectorConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigConnectorConfigResponse)(nil)).Elem()
}

func (o ConfigConnectorConfigResponsePtrOutput) ToConfigConnectorConfigResponsePtrOutput() ConfigConnectorConfigResponsePtrOutput {
	return o
}

func (o ConfigConnectorConfigResponsePtrOutput) ToConfigConnectorConfigResponsePtrOutputWithContext(ctx context.Context) ConfigConnectorConfigResponsePtrOutput {
	return o
}

func (o ConfigConnectorConfigResponsePtrOutput) Elem() ConfigConnectorConfigResponseOutput {
	return o.ApplyT(func(v *ConfigConnectorConfigResponse) ConfigConnectorConfigResponse { return *v }).(ConfigConnectorConfigResponseOutput)
}

// Whether Cloud Connector is enabled for this cluster.
func (o ConfigConnectorConfigResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConfigConnectorConfigResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Parameters for controlling consumption metering.
type ConsumptionMeteringConfig struct {
	// Whether to enable consumption metering for this cluster. If enabled, a second BigQuery table will be created to hold resource consumption records.
	Enabled *bool `pulumi:"enabled"`
}

// ConsumptionMeteringConfigInput is an input type that accepts ConsumptionMeteringConfigArgs and ConsumptionMeteringConfigOutput values.
// You can construct a concrete instance of `ConsumptionMeteringConfigInput` via:
//
//          ConsumptionMeteringConfigArgs{...}
type ConsumptionMeteringConfigInput interface {
	pulumi.Input

	ToConsumptionMeteringConfigOutput() ConsumptionMeteringConfigOutput
	ToConsumptionMeteringConfigOutputWithContext(context.Context) ConsumptionMeteringConfigOutput
}

// Parameters for controlling consumption metering.
type ConsumptionMeteringConfigArgs struct {
	// Whether to enable consumption metering for this cluster. If enabled, a second BigQuery table will be created to hold resource consumption records.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (ConsumptionMeteringConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConsumptionMeteringConfig)(nil)).Elem()
}

func (i ConsumptionMeteringConfigArgs) ToConsumptionMeteringConfigOutput() ConsumptionMeteringConfigOutput {
	return i.ToConsumptionMeteringConfigOutputWithContext(context.Background())
}

func (i ConsumptionMeteringConfigArgs) ToConsumptionMeteringConfigOutputWithContext(ctx context.Context) ConsumptionMeteringConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumptionMeteringConfigOutput)
}

func (i ConsumptionMeteringConfigArgs) ToConsumptionMeteringConfigPtrOutput() ConsumptionMeteringConfigPtrOutput {
	return i.ToConsumptionMeteringConfigPtrOutputWithContext(context.Background())
}

func (i ConsumptionMeteringConfigArgs) ToConsumptionMeteringConfigPtrOutputWithContext(ctx context.Context) ConsumptionMeteringConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumptionMeteringConfigOutput).ToConsumptionMeteringConfigPtrOutputWithContext(ctx)
}

// ConsumptionMeteringConfigPtrInput is an input type that accepts ConsumptionMeteringConfigArgs, ConsumptionMeteringConfigPtr and ConsumptionMeteringConfigPtrOutput values.
// You can construct a concrete instance of `ConsumptionMeteringConfigPtrInput` via:
//
//          ConsumptionMeteringConfigArgs{...}
//
//  or:
//
//          nil
type ConsumptionMeteringConfigPtrInput interface {
	pulumi.Input

	ToConsumptionMeteringConfigPtrOutput() ConsumptionMeteringConfigPtrOutput
	ToConsumptionMeteringConfigPtrOutputWithContext(context.Context) ConsumptionMeteringConfigPtrOutput
}

type consumptionMeteringConfigPtrType ConsumptionMeteringConfigArgs

func ConsumptionMeteringConfigPtr(v *ConsumptionMeteringConfigArgs) ConsumptionMeteringConfigPtrInput {
	return (*consumptionMeteringConfigPtrType)(v)
}

func (*consumptionMeteringConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConsumptionMeteringConfig)(nil)).Elem()
}

func (i *consumptionMeteringConfigPtrType) ToConsumptionMeteringConfigPtrOutput() ConsumptionMeteringConfigPtrOutput {
	return i.ToConsumptionMeteringConfigPtrOutputWithContext(context.Background())
}

func (i *consumptionMeteringConfigPtrType) ToConsumptionMeteringConfigPtrOutputWithContext(ctx context.Context) ConsumptionMeteringConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumptionMeteringConfigPtrOutput)
}

// Parameters for controlling consumption metering.
type ConsumptionMeteringConfigOutput struct{ *pulumi.OutputState }

func (ConsumptionMeteringConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConsumptionMeteringConfig)(nil)).Elem()
}

func (o ConsumptionMeteringConfigOutput) ToConsumptionMeteringConfigOutput() ConsumptionMeteringConfigOutput {
	return o
}

func (o ConsumptionMeteringConfigOutput) ToConsumptionMeteringConfigOutputWithContext(ctx context.Context) ConsumptionMeteringConfigOutput {
	return o
}

func (o ConsumptionMeteringConfigOutput) ToConsumptionMeteringConfigPtrOutput() ConsumptionMeteringConfigPtrOutput {
	return o.ToConsumptionMeteringConfigPtrOutputWithContext(context.Background())
}

func (o ConsumptionMeteringConfigOutput) ToConsumptionMeteringConfigPtrOutputWithContext(ctx context.Context) ConsumptionMeteringConfigPtrOutput {
	return o.ApplyT(func(v ConsumptionMeteringConfig) *ConsumptionMeteringConfig {
		return &v
	}).(ConsumptionMeteringConfigPtrOutput)
}

// Whether to enable consumption metering for this cluster. If enabled, a second BigQuery table will be created to hold resource consumption records.
func (o ConsumptionMeteringConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConsumptionMeteringConfig) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type ConsumptionMeteringConfigPtrOutput struct{ *pulumi.OutputState }

func (ConsumptionMeteringConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConsumptionMeteringConfig)(nil)).Elem()
}

func (o ConsumptionMeteringConfigPtrOutput) ToConsumptionMeteringConfigPtrOutput() ConsumptionMeteringConfigPtrOutput {
	return o
}

func (o ConsumptionMeteringConfigPtrOutput) ToConsumptionMeteringConfigPtrOutputWithContext(ctx context.Context) ConsumptionMeteringConfigPtrOutput {
	return o
}

func (o ConsumptionMeteringConfigPtrOutput) Elem() ConsumptionMeteringConfigOutput {
	return o.ApplyT(func(v *ConsumptionMeteringConfig) ConsumptionMeteringConfig { return *v }).(ConsumptionMeteringConfigOutput)
}

// Whether to enable consumption metering for this cluster. If enabled, a second BigQuery table will be created to hold resource consumption records.
func (o ConsumptionMeteringConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConsumptionMeteringConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Parameters for controlling consumption metering.
type ConsumptionMeteringConfigResponse struct {
	// Whether to enable consumption metering for this cluster. If enabled, a second BigQuery table will be created to hold resource consumption records.
	Enabled bool `pulumi:"enabled"`
}

// ConsumptionMeteringConfigResponseInput is an input type that accepts ConsumptionMeteringConfigResponseArgs and ConsumptionMeteringConfigResponseOutput values.
// You can construct a concrete instance of `ConsumptionMeteringConfigResponseInput` via:
//
//          ConsumptionMeteringConfigResponseArgs{...}
type ConsumptionMeteringConfigResponseInput interface {
	pulumi.Input

	ToConsumptionMeteringConfigResponseOutput() ConsumptionMeteringConfigResponseOutput
	ToConsumptionMeteringConfigResponseOutputWithContext(context.Context) ConsumptionMeteringConfigResponseOutput
}

// Parameters for controlling consumption metering.
type ConsumptionMeteringConfigResponseArgs struct {
	// Whether to enable consumption metering for this cluster. If enabled, a second BigQuery table will be created to hold resource consumption records.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

func (ConsumptionMeteringConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConsumptionMeteringConfigResponse)(nil)).Elem()
}

func (i ConsumptionMeteringConfigResponseArgs) ToConsumptionMeteringConfigResponseOutput() ConsumptionMeteringConfigResponseOutput {
	return i.ToConsumptionMeteringConfigResponseOutputWithContext(context.Background())
}

func (i ConsumptionMeteringConfigResponseArgs) ToConsumptionMeteringConfigResponseOutputWithContext(ctx context.Context) ConsumptionMeteringConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumptionMeteringConfigResponseOutput)
}

func (i ConsumptionMeteringConfigResponseArgs) ToConsumptionMeteringConfigResponsePtrOutput() ConsumptionMeteringConfigResponsePtrOutput {
	return i.ToConsumptionMeteringConfigResponsePtrOutputWithContext(context.Background())
}

func (i ConsumptionMeteringConfigResponseArgs) ToConsumptionMeteringConfigResponsePtrOutputWithContext(ctx context.Context) ConsumptionMeteringConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumptionMeteringConfigResponseOutput).ToConsumptionMeteringConfigResponsePtrOutputWithContext(ctx)
}

// ConsumptionMeteringConfigResponsePtrInput is an input type that accepts ConsumptionMeteringConfigResponseArgs, ConsumptionMeteringConfigResponsePtr and ConsumptionMeteringConfigResponsePtrOutput values.
// You can construct a concrete instance of `ConsumptionMeteringConfigResponsePtrInput` via:
//
//          ConsumptionMeteringConfigResponseArgs{...}
//
//  or:
//
//          nil
type ConsumptionMeteringConfigResponsePtrInput interface {
	pulumi.Input

	ToConsumptionMeteringConfigResponsePtrOutput() ConsumptionMeteringConfigResponsePtrOutput
	ToConsumptionMeteringConfigResponsePtrOutputWithContext(context.Context) ConsumptionMeteringConfigResponsePtrOutput
}

type consumptionMeteringConfigResponsePtrType ConsumptionMeteringConfigResponseArgs

func ConsumptionMeteringConfigResponsePtr(v *ConsumptionMeteringConfigResponseArgs) ConsumptionMeteringConfigResponsePtrInput {
	return (*consumptionMeteringConfigResponsePtrType)(v)
}

func (*consumptionMeteringConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConsumptionMeteringConfigResponse)(nil)).Elem()
}

func (i *consumptionMeteringConfigResponsePtrType) ToConsumptionMeteringConfigResponsePtrOutput() ConsumptionMeteringConfigResponsePtrOutput {
	return i.ToConsumptionMeteringConfigResponsePtrOutputWithContext(context.Background())
}

func (i *consumptionMeteringConfigResponsePtrType) ToConsumptionMeteringConfigResponsePtrOutputWithContext(ctx context.Context) ConsumptionMeteringConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumptionMeteringConfigResponsePtrOutput)
}

// Parameters for controlling consumption metering.
type ConsumptionMeteringConfigResponseOutput struct{ *pulumi.OutputState }

func (ConsumptionMeteringConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConsumptionMeteringConfigResponse)(nil)).Elem()
}

func (o ConsumptionMeteringConfigResponseOutput) ToConsumptionMeteringConfigResponseOutput() ConsumptionMeteringConfigResponseOutput {
	return o
}

func (o ConsumptionMeteringConfigResponseOutput) ToConsumptionMeteringConfigResponseOutputWithContext(ctx context.Context) ConsumptionMeteringConfigResponseOutput {
	return o
}

func (o ConsumptionMeteringConfigResponseOutput) ToConsumptionMeteringConfigResponsePtrOutput() ConsumptionMeteringConfigResponsePtrOutput {
	return o.ToConsumptionMeteringConfigResponsePtrOutputWithContext(context.Background())
}

func (o ConsumptionMeteringConfigResponseOutput) ToConsumptionMeteringConfigResponsePtrOutputWithContext(ctx context.Context) ConsumptionMeteringConfigResponsePtrOutput {
	return o.ApplyT(func(v ConsumptionMeteringConfigResponse) *ConsumptionMeteringConfigResponse {
		return &v
	}).(ConsumptionMeteringConfigResponsePtrOutput)
}

// Whether to enable consumption metering for this cluster. If enabled, a second BigQuery table will be created to hold resource consumption records.
func (o ConsumptionMeteringConfigResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ConsumptionMeteringConfigResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type ConsumptionMeteringConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (ConsumptionMeteringConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConsumptionMeteringConfigResponse)(nil)).Elem()
}

func (o ConsumptionMeteringConfigResponsePtrOutput) ToConsumptionMeteringConfigResponsePtrOutput() ConsumptionMeteringConfigResponsePtrOutput {
	return o
}

func (o ConsumptionMeteringConfigResponsePtrOutput) ToConsumptionMeteringConfigResponsePtrOutputWithContext(ctx context.Context) ConsumptionMeteringConfigResponsePtrOutput {
	return o
}

func (o ConsumptionMeteringConfigResponsePtrOutput) Elem() ConsumptionMeteringConfigResponseOutput {
	return o.ApplyT(func(v *ConsumptionMeteringConfigResponse) ConsumptionMeteringConfigResponse { return *v }).(ConsumptionMeteringConfigResponseOutput)
}

// Whether to enable consumption metering for this cluster. If enabled, a second BigQuery table will be created to hold resource consumption records.
func (o ConsumptionMeteringConfigResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConsumptionMeteringConfigResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Time window specified for daily maintenance operations.
type DailyMaintenanceWindow struct {
	// [Output only] Duration of the time window, automatically chosen to be smallest possible in the given scenario. Duration will be in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format "PTnHnMnS".
	Duration *string `pulumi:"duration"`
	// Time within the maintenance window to start the maintenance operations. Time format should be in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format "HH:MM", where HH : [00-23] and MM : [00-59] GMT.
	StartTime *string `pulumi:"startTime"`
}

// DailyMaintenanceWindowInput is an input type that accepts DailyMaintenanceWindowArgs and DailyMaintenanceWindowOutput values.
// You can construct a concrete instance of `DailyMaintenanceWindowInput` via:
//
//          DailyMaintenanceWindowArgs{...}
type DailyMaintenanceWindowInput interface {
	pulumi.Input

	ToDailyMaintenanceWindowOutput() DailyMaintenanceWindowOutput
	ToDailyMaintenanceWindowOutputWithContext(context.Context) DailyMaintenanceWindowOutput
}

// Time window specified for daily maintenance operations.
type DailyMaintenanceWindowArgs struct {
	// [Output only] Duration of the time window, automatically chosen to be smallest possible in the given scenario. Duration will be in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format "PTnHnMnS".
	Duration pulumi.StringPtrInput `pulumi:"duration"`
	// Time within the maintenance window to start the maintenance operations. Time format should be in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format "HH:MM", where HH : [00-23] and MM : [00-59] GMT.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
}

func (DailyMaintenanceWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DailyMaintenanceWindow)(nil)).Elem()
}

func (i DailyMaintenanceWindowArgs) ToDailyMaintenanceWindowOutput() DailyMaintenanceWindowOutput {
	return i.ToDailyMaintenanceWindowOutputWithContext(context.Background())
}

func (i DailyMaintenanceWindowArgs) ToDailyMaintenanceWindowOutputWithContext(ctx context.Context) DailyMaintenanceWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DailyMaintenanceWindowOutput)
}

func (i DailyMaintenanceWindowArgs) ToDailyMaintenanceWindowPtrOutput() DailyMaintenanceWindowPtrOutput {
	return i.ToDailyMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (i DailyMaintenanceWindowArgs) ToDailyMaintenanceWindowPtrOutputWithContext(ctx context.Context) DailyMaintenanceWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DailyMaintenanceWindowOutput).ToDailyMaintenanceWindowPtrOutputWithContext(ctx)
}

// DailyMaintenanceWindowPtrInput is an input type that accepts DailyMaintenanceWindowArgs, DailyMaintenanceWindowPtr and DailyMaintenanceWindowPtrOutput values.
// You can construct a concrete instance of `DailyMaintenanceWindowPtrInput` via:
//
//          DailyMaintenanceWindowArgs{...}
//
//  or:
//
//          nil
type DailyMaintenanceWindowPtrInput interface {
	pulumi.Input

	ToDailyMaintenanceWindowPtrOutput() DailyMaintenanceWindowPtrOutput
	ToDailyMaintenanceWindowPtrOutputWithContext(context.Context) DailyMaintenanceWindowPtrOutput
}

type dailyMaintenanceWindowPtrType DailyMaintenanceWindowArgs

func DailyMaintenanceWindowPtr(v *DailyMaintenanceWindowArgs) DailyMaintenanceWindowPtrInput {
	return (*dailyMaintenanceWindowPtrType)(v)
}

func (*dailyMaintenanceWindowPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DailyMaintenanceWindow)(nil)).Elem()
}

func (i *dailyMaintenanceWindowPtrType) ToDailyMaintenanceWindowPtrOutput() DailyMaintenanceWindowPtrOutput {
	return i.ToDailyMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (i *dailyMaintenanceWindowPtrType) ToDailyMaintenanceWindowPtrOutputWithContext(ctx context.Context) DailyMaintenanceWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DailyMaintenanceWindowPtrOutput)
}

// Time window specified for daily maintenance operations.
type DailyMaintenanceWindowOutput struct{ *pulumi.OutputState }

func (DailyMaintenanceWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DailyMaintenanceWindow)(nil)).Elem()
}

func (o DailyMaintenanceWindowOutput) ToDailyMaintenanceWindowOutput() DailyMaintenanceWindowOutput {
	return o
}

func (o DailyMaintenanceWindowOutput) ToDailyMaintenanceWindowOutputWithContext(ctx context.Context) DailyMaintenanceWindowOutput {
	return o
}

func (o DailyMaintenanceWindowOutput) ToDailyMaintenanceWindowPtrOutput() DailyMaintenanceWindowPtrOutput {
	return o.ToDailyMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (o DailyMaintenanceWindowOutput) ToDailyMaintenanceWindowPtrOutputWithContext(ctx context.Context) DailyMaintenanceWindowPtrOutput {
	return o.ApplyT(func(v DailyMaintenanceWindow) *DailyMaintenanceWindow {
		return &v
	}).(DailyMaintenanceWindowPtrOutput)
}

// [Output only] Duration of the time window, automatically chosen to be smallest possible in the given scenario. Duration will be in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format "PTnHnMnS".
func (o DailyMaintenanceWindowOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DailyMaintenanceWindow) *string { return v.Duration }).(pulumi.StringPtrOutput)
}

// Time within the maintenance window to start the maintenance operations. Time format should be in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format "HH:MM", where HH : [00-23] and MM : [00-59] GMT.
func (o DailyMaintenanceWindowOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DailyMaintenanceWindow) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

type DailyMaintenanceWindowPtrOutput struct{ *pulumi.OutputState }

func (DailyMaintenanceWindowPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DailyMaintenanceWindow)(nil)).Elem()
}

func (o DailyMaintenanceWindowPtrOutput) ToDailyMaintenanceWindowPtrOutput() DailyMaintenanceWindowPtrOutput {
	return o
}

func (o DailyMaintenanceWindowPtrOutput) ToDailyMaintenanceWindowPtrOutputWithContext(ctx context.Context) DailyMaintenanceWindowPtrOutput {
	return o
}

func (o DailyMaintenanceWindowPtrOutput) Elem() DailyMaintenanceWindowOutput {
	return o.ApplyT(func(v *DailyMaintenanceWindow) DailyMaintenanceWindow { return *v }).(DailyMaintenanceWindowOutput)
}

// [Output only] Duration of the time window, automatically chosen to be smallest possible in the given scenario. Duration will be in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format "PTnHnMnS".
func (o DailyMaintenanceWindowPtrOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DailyMaintenanceWindow) *string {
		if v == nil {
			return nil
		}
		return v.Duration
	}).(pulumi.StringPtrOutput)
}

// Time within the maintenance window to start the maintenance operations. Time format should be in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format "HH:MM", where HH : [00-23] and MM : [00-59] GMT.
func (o DailyMaintenanceWindowPtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DailyMaintenanceWindow) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Time window specified for daily maintenance operations.
type DailyMaintenanceWindowResponse struct {
	// [Output only] Duration of the time window, automatically chosen to be smallest possible in the given scenario. Duration will be in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format "PTnHnMnS".
	Duration string `pulumi:"duration"`
	// Time within the maintenance window to start the maintenance operations. Time format should be in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format "HH:MM", where HH : [00-23] and MM : [00-59] GMT.
	StartTime string `pulumi:"startTime"`
}

// DailyMaintenanceWindowResponseInput is an input type that accepts DailyMaintenanceWindowResponseArgs and DailyMaintenanceWindowResponseOutput values.
// You can construct a concrete instance of `DailyMaintenanceWindowResponseInput` via:
//
//          DailyMaintenanceWindowResponseArgs{...}
type DailyMaintenanceWindowResponseInput interface {
	pulumi.Input

	ToDailyMaintenanceWindowResponseOutput() DailyMaintenanceWindowResponseOutput
	ToDailyMaintenanceWindowResponseOutputWithContext(context.Context) DailyMaintenanceWindowResponseOutput
}

// Time window specified for daily maintenance operations.
type DailyMaintenanceWindowResponseArgs struct {
	// [Output only] Duration of the time window, automatically chosen to be smallest possible in the given scenario. Duration will be in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format "PTnHnMnS".
	Duration pulumi.StringInput `pulumi:"duration"`
	// Time within the maintenance window to start the maintenance operations. Time format should be in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format "HH:MM", where HH : [00-23] and MM : [00-59] GMT.
	StartTime pulumi.StringInput `pulumi:"startTime"`
}

func (DailyMaintenanceWindowResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DailyMaintenanceWindowResponse)(nil)).Elem()
}

func (i DailyMaintenanceWindowResponseArgs) ToDailyMaintenanceWindowResponseOutput() DailyMaintenanceWindowResponseOutput {
	return i.ToDailyMaintenanceWindowResponseOutputWithContext(context.Background())
}

func (i DailyMaintenanceWindowResponseArgs) ToDailyMaintenanceWindowResponseOutputWithContext(ctx context.Context) DailyMaintenanceWindowResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DailyMaintenanceWindowResponseOutput)
}

func (i DailyMaintenanceWindowResponseArgs) ToDailyMaintenanceWindowResponsePtrOutput() DailyMaintenanceWindowResponsePtrOutput {
	return i.ToDailyMaintenanceWindowResponsePtrOutputWithContext(context.Background())
}

func (i DailyMaintenanceWindowResponseArgs) ToDailyMaintenanceWindowResponsePtrOutputWithContext(ctx context.Context) DailyMaintenanceWindowResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DailyMaintenanceWindowResponseOutput).ToDailyMaintenanceWindowResponsePtrOutputWithContext(ctx)
}

// DailyMaintenanceWindowResponsePtrInput is an input type that accepts DailyMaintenanceWindowResponseArgs, DailyMaintenanceWindowResponsePtr and DailyMaintenanceWindowResponsePtrOutput values.
// You can construct a concrete instance of `DailyMaintenanceWindowResponsePtrInput` via:
//
//          DailyMaintenanceWindowResponseArgs{...}
//
//  or:
//
//          nil
type DailyMaintenanceWindowResponsePtrInput interface {
	pulumi.Input

	ToDailyMaintenanceWindowResponsePtrOutput() DailyMaintenanceWindowResponsePtrOutput
	ToDailyMaintenanceWindowResponsePtrOutputWithContext(context.Context) DailyMaintenanceWindowResponsePtrOutput
}

type dailyMaintenanceWindowResponsePtrType DailyMaintenanceWindowResponseArgs

func DailyMaintenanceWindowResponsePtr(v *DailyMaintenanceWindowResponseArgs) DailyMaintenanceWindowResponsePtrInput {
	return (*dailyMaintenanceWindowResponsePtrType)(v)
}

func (*dailyMaintenanceWindowResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DailyMaintenanceWindowResponse)(nil)).Elem()
}

func (i *dailyMaintenanceWindowResponsePtrType) ToDailyMaintenanceWindowResponsePtrOutput() DailyMaintenanceWindowResponsePtrOutput {
	return i.ToDailyMaintenanceWindowResponsePtrOutputWithContext(context.Background())
}

func (i *dailyMaintenanceWindowResponsePtrType) ToDailyMaintenanceWindowResponsePtrOutputWithContext(ctx context.Context) DailyMaintenanceWindowResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DailyMaintenanceWindowResponsePtrOutput)
}

// Time window specified for daily maintenance operations.
type DailyMaintenanceWindowResponseOutput struct{ *pulumi.OutputState }

func (DailyMaintenanceWindowResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DailyMaintenanceWindowResponse)(nil)).Elem()
}

func (o DailyMaintenanceWindowResponseOutput) ToDailyMaintenanceWindowResponseOutput() DailyMaintenanceWindowResponseOutput {
	return o
}

func (o DailyMaintenanceWindowResponseOutput) ToDailyMaintenanceWindowResponseOutputWithContext(ctx context.Context) DailyMaintenanceWindowResponseOutput {
	return o
}

func (o DailyMaintenanceWindowResponseOutput) ToDailyMaintenanceWindowResponsePtrOutput() DailyMaintenanceWindowResponsePtrOutput {
	return o.ToDailyMaintenanceWindowResponsePtrOutputWithContext(context.Background())
}

func (o DailyMaintenanceWindowResponseOutput) ToDailyMaintenanceWindowResponsePtrOutputWithContext(ctx context.Context) DailyMaintenanceWindowResponsePtrOutput {
	return o.ApplyT(func(v DailyMaintenanceWindowResponse) *DailyMaintenanceWindowResponse {
		return &v
	}).(DailyMaintenanceWindowResponsePtrOutput)
}

// [Output only] Duration of the time window, automatically chosen to be smallest possible in the given scenario. Duration will be in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format "PTnHnMnS".
func (o DailyMaintenanceWindowResponseOutput) Duration() pulumi.StringOutput {
	return o.ApplyT(func(v DailyMaintenanceWindowResponse) string { return v.Duration }).(pulumi.StringOutput)
}

// Time within the maintenance window to start the maintenance operations. Time format should be in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format "HH:MM", where HH : [00-23] and MM : [00-59] GMT.
func (o DailyMaintenanceWindowResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v DailyMaintenanceWindowResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

type DailyMaintenanceWindowResponsePtrOutput struct{ *pulumi.OutputState }

func (DailyMaintenanceWindowResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DailyMaintenanceWindowResponse)(nil)).Elem()
}

func (o DailyMaintenanceWindowResponsePtrOutput) ToDailyMaintenanceWindowResponsePtrOutput() DailyMaintenanceWindowResponsePtrOutput {
	return o
}

func (o DailyMaintenanceWindowResponsePtrOutput) ToDailyMaintenanceWindowResponsePtrOutputWithContext(ctx context.Context) DailyMaintenanceWindowResponsePtrOutput {
	return o
}

func (o DailyMaintenanceWindowResponsePtrOutput) Elem() DailyMaintenanceWindowResponseOutput {
	return o.ApplyT(func(v *DailyMaintenanceWindowResponse) DailyMaintenanceWindowResponse { return *v }).(DailyMaintenanceWindowResponseOutput)
}

// [Output only] Duration of the time window, automatically chosen to be smallest possible in the given scenario. Duration will be in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format "PTnHnMnS".
func (o DailyMaintenanceWindowResponsePtrOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DailyMaintenanceWindowResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Duration
	}).(pulumi.StringPtrOutput)
}

// Time within the maintenance window to start the maintenance operations. Time format should be in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format "HH:MM", where HH : [00-23] and MM : [00-59] GMT.
func (o DailyMaintenanceWindowResponsePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DailyMaintenanceWindowResponse) *string {
		if v == nil {
			return nil
		}
		return &v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Configuration of etcd encryption.
type DatabaseEncryption struct {
	// Name of CloudKMS key to use for the encryption of secrets in etcd. Ex. projects/my-project/locations/global/keyRings/my-ring/cryptoKeys/my-key
	KeyName *string `pulumi:"keyName"`
	// Denotes the state of etcd encryption.
	State *string `pulumi:"state"`
}

// DatabaseEncryptionInput is an input type that accepts DatabaseEncryptionArgs and DatabaseEncryptionOutput values.
// You can construct a concrete instance of `DatabaseEncryptionInput` via:
//
//          DatabaseEncryptionArgs{...}
type DatabaseEncryptionInput interface {
	pulumi.Input

	ToDatabaseEncryptionOutput() DatabaseEncryptionOutput
	ToDatabaseEncryptionOutputWithContext(context.Context) DatabaseEncryptionOutput
}

// Configuration of etcd encryption.
type DatabaseEncryptionArgs struct {
	// Name of CloudKMS key to use for the encryption of secrets in etcd. Ex. projects/my-project/locations/global/keyRings/my-ring/cryptoKeys/my-key
	KeyName pulumi.StringPtrInput `pulumi:"keyName"`
	// Denotes the state of etcd encryption.
	State *DatabaseEncryptionState `pulumi:"state"`
}

func (DatabaseEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseEncryption)(nil)).Elem()
}

func (i DatabaseEncryptionArgs) ToDatabaseEncryptionOutput() DatabaseEncryptionOutput {
	return i.ToDatabaseEncryptionOutputWithContext(context.Background())
}

func (i DatabaseEncryptionArgs) ToDatabaseEncryptionOutputWithContext(ctx context.Context) DatabaseEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseEncryptionOutput)
}

func (i DatabaseEncryptionArgs) ToDatabaseEncryptionPtrOutput() DatabaseEncryptionPtrOutput {
	return i.ToDatabaseEncryptionPtrOutputWithContext(context.Background())
}

func (i DatabaseEncryptionArgs) ToDatabaseEncryptionPtrOutputWithContext(ctx context.Context) DatabaseEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseEncryptionOutput).ToDatabaseEncryptionPtrOutputWithContext(ctx)
}

// DatabaseEncryptionPtrInput is an input type that accepts DatabaseEncryptionArgs, DatabaseEncryptionPtr and DatabaseEncryptionPtrOutput values.
// You can construct a concrete instance of `DatabaseEncryptionPtrInput` via:
//
//          DatabaseEncryptionArgs{...}
//
//  or:
//
//          nil
type DatabaseEncryptionPtrInput interface {
	pulumi.Input

	ToDatabaseEncryptionPtrOutput() DatabaseEncryptionPtrOutput
	ToDatabaseEncryptionPtrOutputWithContext(context.Context) DatabaseEncryptionPtrOutput
}

type databaseEncryptionPtrType DatabaseEncryptionArgs

func DatabaseEncryptionPtr(v *DatabaseEncryptionArgs) DatabaseEncryptionPtrInput {
	return (*databaseEncryptionPtrType)(v)
}

func (*databaseEncryptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseEncryption)(nil)).Elem()
}

func (i *databaseEncryptionPtrType) ToDatabaseEncryptionPtrOutput() DatabaseEncryptionPtrOutput {
	return i.ToDatabaseEncryptionPtrOutputWithContext(context.Background())
}

func (i *databaseEncryptionPtrType) ToDatabaseEncryptionPtrOutputWithContext(ctx context.Context) DatabaseEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseEncryptionPtrOutput)
}

// Configuration of etcd encryption.
type DatabaseEncryptionOutput struct{ *pulumi.OutputState }

func (DatabaseEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseEncryption)(nil)).Elem()
}

func (o DatabaseEncryptionOutput) ToDatabaseEncryptionOutput() DatabaseEncryptionOutput {
	return o
}

func (o DatabaseEncryptionOutput) ToDatabaseEncryptionOutputWithContext(ctx context.Context) DatabaseEncryptionOutput {
	return o
}

func (o DatabaseEncryptionOutput) ToDatabaseEncryptionPtrOutput() DatabaseEncryptionPtrOutput {
	return o.ToDatabaseEncryptionPtrOutputWithContext(context.Background())
}

func (o DatabaseEncryptionOutput) ToDatabaseEncryptionPtrOutputWithContext(ctx context.Context) DatabaseEncryptionPtrOutput {
	return o.ApplyT(func(v DatabaseEncryption) *DatabaseEncryption {
		return &v
	}).(DatabaseEncryptionPtrOutput)
}

// Name of CloudKMS key to use for the encryption of secrets in etcd. Ex. projects/my-project/locations/global/keyRings/my-ring/cryptoKeys/my-key
func (o DatabaseEncryptionOutput) KeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseEncryption) *string { return v.KeyName }).(pulumi.StringPtrOutput)
}

// Denotes the state of etcd encryption.
func (o DatabaseEncryptionOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseEncryption) *string { return v.State }).(pulumi.StringPtrOutput)
}

type DatabaseEncryptionPtrOutput struct{ *pulumi.OutputState }

func (DatabaseEncryptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseEncryption)(nil)).Elem()
}

func (o DatabaseEncryptionPtrOutput) ToDatabaseEncryptionPtrOutput() DatabaseEncryptionPtrOutput {
	return o
}

func (o DatabaseEncryptionPtrOutput) ToDatabaseEncryptionPtrOutputWithContext(ctx context.Context) DatabaseEncryptionPtrOutput {
	return o
}

func (o DatabaseEncryptionPtrOutput) Elem() DatabaseEncryptionOutput {
	return o.ApplyT(func(v *DatabaseEncryption) DatabaseEncryption { return *v }).(DatabaseEncryptionOutput)
}

// Name of CloudKMS key to use for the encryption of secrets in etcd. Ex. projects/my-project/locations/global/keyRings/my-ring/cryptoKeys/my-key
func (o DatabaseEncryptionPtrOutput) KeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseEncryption) *string {
		if v == nil {
			return nil
		}
		return v.KeyName
	}).(pulumi.StringPtrOutput)
}

// Denotes the state of etcd encryption.
func (o DatabaseEncryptionPtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseEncryption) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

// Configuration of etcd encryption.
type DatabaseEncryptionResponse struct {
	// Name of CloudKMS key to use for the encryption of secrets in etcd. Ex. projects/my-project/locations/global/keyRings/my-ring/cryptoKeys/my-key
	KeyName string `pulumi:"keyName"`
	// Denotes the state of etcd encryption.
	State string `pulumi:"state"`
}

// DatabaseEncryptionResponseInput is an input type that accepts DatabaseEncryptionResponseArgs and DatabaseEncryptionResponseOutput values.
// You can construct a concrete instance of `DatabaseEncryptionResponseInput` via:
//
//          DatabaseEncryptionResponseArgs{...}
type DatabaseEncryptionResponseInput interface {
	pulumi.Input

	ToDatabaseEncryptionResponseOutput() DatabaseEncryptionResponseOutput
	ToDatabaseEncryptionResponseOutputWithContext(context.Context) DatabaseEncryptionResponseOutput
}

// Configuration of etcd encryption.
type DatabaseEncryptionResponseArgs struct {
	// Name of CloudKMS key to use for the encryption of secrets in etcd. Ex. projects/my-project/locations/global/keyRings/my-ring/cryptoKeys/my-key
	KeyName pulumi.StringInput `pulumi:"keyName"`
	// Denotes the state of etcd encryption.
	State pulumi.StringInput `pulumi:"state"`
}

func (DatabaseEncryptionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseEncryptionResponse)(nil)).Elem()
}

func (i DatabaseEncryptionResponseArgs) ToDatabaseEncryptionResponseOutput() DatabaseEncryptionResponseOutput {
	return i.ToDatabaseEncryptionResponseOutputWithContext(context.Background())
}

func (i DatabaseEncryptionResponseArgs) ToDatabaseEncryptionResponseOutputWithContext(ctx context.Context) DatabaseEncryptionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseEncryptionResponseOutput)
}

func (i DatabaseEncryptionResponseArgs) ToDatabaseEncryptionResponsePtrOutput() DatabaseEncryptionResponsePtrOutput {
	return i.ToDatabaseEncryptionResponsePtrOutputWithContext(context.Background())
}

func (i DatabaseEncryptionResponseArgs) ToDatabaseEncryptionResponsePtrOutputWithContext(ctx context.Context) DatabaseEncryptionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseEncryptionResponseOutput).ToDatabaseEncryptionResponsePtrOutputWithContext(ctx)
}

// DatabaseEncryptionResponsePtrInput is an input type that accepts DatabaseEncryptionResponseArgs, DatabaseEncryptionResponsePtr and DatabaseEncryptionResponsePtrOutput values.
// You can construct a concrete instance of `DatabaseEncryptionResponsePtrInput` via:
//
//          DatabaseEncryptionResponseArgs{...}
//
//  or:
//
//          nil
type DatabaseEncryptionResponsePtrInput interface {
	pulumi.Input

	ToDatabaseEncryptionResponsePtrOutput() DatabaseEncryptionResponsePtrOutput
	ToDatabaseEncryptionResponsePtrOutputWithContext(context.Context) DatabaseEncryptionResponsePtrOutput
}

type databaseEncryptionResponsePtrType DatabaseEncryptionResponseArgs

func DatabaseEncryptionResponsePtr(v *DatabaseEncryptionResponseArgs) DatabaseEncryptionResponsePtrInput {
	return (*databaseEncryptionResponsePtrType)(v)
}

func (*databaseEncryptionResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseEncryptionResponse)(nil)).Elem()
}

func (i *databaseEncryptionResponsePtrType) ToDatabaseEncryptionResponsePtrOutput() DatabaseEncryptionResponsePtrOutput {
	return i.ToDatabaseEncryptionResponsePtrOutputWithContext(context.Background())
}

func (i *databaseEncryptionResponsePtrType) ToDatabaseEncryptionResponsePtrOutputWithContext(ctx context.Context) DatabaseEncryptionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseEncryptionResponsePtrOutput)
}

// Configuration of etcd encryption.
type DatabaseEncryptionResponseOutput struct{ *pulumi.OutputState }

func (DatabaseEncryptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseEncryptionResponse)(nil)).Elem()
}

func (o DatabaseEncryptionResponseOutput) ToDatabaseEncryptionResponseOutput() DatabaseEncryptionResponseOutput {
	return o
}

func (o DatabaseEncryptionResponseOutput) ToDatabaseEncryptionResponseOutputWithContext(ctx context.Context) DatabaseEncryptionResponseOutput {
	return o
}

func (o DatabaseEncryptionResponseOutput) ToDatabaseEncryptionResponsePtrOutput() DatabaseEncryptionResponsePtrOutput {
	return o.ToDatabaseEncryptionResponsePtrOutputWithContext(context.Background())
}

func (o DatabaseEncryptionResponseOutput) ToDatabaseEncryptionResponsePtrOutputWithContext(ctx context.Context) DatabaseEncryptionResponsePtrOutput {
	return o.ApplyT(func(v DatabaseEncryptionResponse) *DatabaseEncryptionResponse {
		return &v
	}).(DatabaseEncryptionResponsePtrOutput)
}

// Name of CloudKMS key to use for the encryption of secrets in etcd. Ex. projects/my-project/locations/global/keyRings/my-ring/cryptoKeys/my-key
func (o DatabaseEncryptionResponseOutput) KeyName() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseEncryptionResponse) string { return v.KeyName }).(pulumi.StringOutput)
}

// Denotes the state of etcd encryption.
func (o DatabaseEncryptionResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseEncryptionResponse) string { return v.State }).(pulumi.StringOutput)
}

type DatabaseEncryptionResponsePtrOutput struct{ *pulumi.OutputState }

func (DatabaseEncryptionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseEncryptionResponse)(nil)).Elem()
}

func (o DatabaseEncryptionResponsePtrOutput) ToDatabaseEncryptionResponsePtrOutput() DatabaseEncryptionResponsePtrOutput {
	return o
}

func (o DatabaseEncryptionResponsePtrOutput) ToDatabaseEncryptionResponsePtrOutputWithContext(ctx context.Context) DatabaseEncryptionResponsePtrOutput {
	return o
}

func (o DatabaseEncryptionResponsePtrOutput) Elem() DatabaseEncryptionResponseOutput {
	return o.ApplyT(func(v *DatabaseEncryptionResponse) DatabaseEncryptionResponse { return *v }).(DatabaseEncryptionResponseOutput)
}

// Name of CloudKMS key to use for the encryption of secrets in etcd. Ex. projects/my-project/locations/global/keyRings/my-ring/cryptoKeys/my-key
func (o DatabaseEncryptionResponsePtrOutput) KeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseEncryptionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.KeyName
	}).(pulumi.StringPtrOutput)
}

// Denotes the state of etcd encryption.
func (o DatabaseEncryptionResponsePtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseEncryptionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.State
	}).(pulumi.StringPtrOutput)
}

// DefaultSnatStatus contains the desired state of whether default sNAT should be disabled on the cluster.
type DefaultSnatStatus struct {
	// Disables cluster default sNAT rules.
	Disabled *bool `pulumi:"disabled"`
}

// DefaultSnatStatusInput is an input type that accepts DefaultSnatStatusArgs and DefaultSnatStatusOutput values.
// You can construct a concrete instance of `DefaultSnatStatusInput` via:
//
//          DefaultSnatStatusArgs{...}
type DefaultSnatStatusInput interface {
	pulumi.Input

	ToDefaultSnatStatusOutput() DefaultSnatStatusOutput
	ToDefaultSnatStatusOutputWithContext(context.Context) DefaultSnatStatusOutput
}

// DefaultSnatStatus contains the desired state of whether default sNAT should be disabled on the cluster.
type DefaultSnatStatusArgs struct {
	// Disables cluster default sNAT rules.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
}

func (DefaultSnatStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DefaultSnatStatus)(nil)).Elem()
}

func (i DefaultSnatStatusArgs) ToDefaultSnatStatusOutput() DefaultSnatStatusOutput {
	return i.ToDefaultSnatStatusOutputWithContext(context.Background())
}

func (i DefaultSnatStatusArgs) ToDefaultSnatStatusOutputWithContext(ctx context.Context) DefaultSnatStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultSnatStatusOutput)
}

func (i DefaultSnatStatusArgs) ToDefaultSnatStatusPtrOutput() DefaultSnatStatusPtrOutput {
	return i.ToDefaultSnatStatusPtrOutputWithContext(context.Background())
}

func (i DefaultSnatStatusArgs) ToDefaultSnatStatusPtrOutputWithContext(ctx context.Context) DefaultSnatStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultSnatStatusOutput).ToDefaultSnatStatusPtrOutputWithContext(ctx)
}

// DefaultSnatStatusPtrInput is an input type that accepts DefaultSnatStatusArgs, DefaultSnatStatusPtr and DefaultSnatStatusPtrOutput values.
// You can construct a concrete instance of `DefaultSnatStatusPtrInput` via:
//
//          DefaultSnatStatusArgs{...}
//
//  or:
//
//          nil
type DefaultSnatStatusPtrInput interface {
	pulumi.Input

	ToDefaultSnatStatusPtrOutput() DefaultSnatStatusPtrOutput
	ToDefaultSnatStatusPtrOutputWithContext(context.Context) DefaultSnatStatusPtrOutput
}

type defaultSnatStatusPtrType DefaultSnatStatusArgs

func DefaultSnatStatusPtr(v *DefaultSnatStatusArgs) DefaultSnatStatusPtrInput {
	return (*defaultSnatStatusPtrType)(v)
}

func (*defaultSnatStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DefaultSnatStatus)(nil)).Elem()
}

func (i *defaultSnatStatusPtrType) ToDefaultSnatStatusPtrOutput() DefaultSnatStatusPtrOutput {
	return i.ToDefaultSnatStatusPtrOutputWithContext(context.Background())
}

func (i *defaultSnatStatusPtrType) ToDefaultSnatStatusPtrOutputWithContext(ctx context.Context) DefaultSnatStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultSnatStatusPtrOutput)
}

// DefaultSnatStatus contains the desired state of whether default sNAT should be disabled on the cluster.
type DefaultSnatStatusOutput struct{ *pulumi.OutputState }

func (DefaultSnatStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DefaultSnatStatus)(nil)).Elem()
}

func (o DefaultSnatStatusOutput) ToDefaultSnatStatusOutput() DefaultSnatStatusOutput {
	return o
}

func (o DefaultSnatStatusOutput) ToDefaultSnatStatusOutputWithContext(ctx context.Context) DefaultSnatStatusOutput {
	return o
}

func (o DefaultSnatStatusOutput) ToDefaultSnatStatusPtrOutput() DefaultSnatStatusPtrOutput {
	return o.ToDefaultSnatStatusPtrOutputWithContext(context.Background())
}

func (o DefaultSnatStatusOutput) ToDefaultSnatStatusPtrOutputWithContext(ctx context.Context) DefaultSnatStatusPtrOutput {
	return o.ApplyT(func(v DefaultSnatStatus) *DefaultSnatStatus {
		return &v
	}).(DefaultSnatStatusPtrOutput)
}

// Disables cluster default sNAT rules.
func (o DefaultSnatStatusOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DefaultSnatStatus) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

type DefaultSnatStatusPtrOutput struct{ *pulumi.OutputState }

func (DefaultSnatStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DefaultSnatStatus)(nil)).Elem()
}

func (o DefaultSnatStatusPtrOutput) ToDefaultSnatStatusPtrOutput() DefaultSnatStatusPtrOutput {
	return o
}

func (o DefaultSnatStatusPtrOutput) ToDefaultSnatStatusPtrOutputWithContext(ctx context.Context) DefaultSnatStatusPtrOutput {
	return o
}

func (o DefaultSnatStatusPtrOutput) Elem() DefaultSnatStatusOutput {
	return o.ApplyT(func(v *DefaultSnatStatus) DefaultSnatStatus { return *v }).(DefaultSnatStatusOutput)
}

// Disables cluster default sNAT rules.
func (o DefaultSnatStatusPtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DefaultSnatStatus) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// DefaultSnatStatus contains the desired state of whether default sNAT should be disabled on the cluster.
type DefaultSnatStatusResponse struct {
	// Disables cluster default sNAT rules.
	Disabled bool `pulumi:"disabled"`
}

// DefaultSnatStatusResponseInput is an input type that accepts DefaultSnatStatusResponseArgs and DefaultSnatStatusResponseOutput values.
// You can construct a concrete instance of `DefaultSnatStatusResponseInput` via:
//
//          DefaultSnatStatusResponseArgs{...}
type DefaultSnatStatusResponseInput interface {
	pulumi.Input

	ToDefaultSnatStatusResponseOutput() DefaultSnatStatusResponseOutput
	ToDefaultSnatStatusResponseOutputWithContext(context.Context) DefaultSnatStatusResponseOutput
}

// DefaultSnatStatus contains the desired state of whether default sNAT should be disabled on the cluster.
type DefaultSnatStatusResponseArgs struct {
	// Disables cluster default sNAT rules.
	Disabled pulumi.BoolInput `pulumi:"disabled"`
}

func (DefaultSnatStatusResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DefaultSnatStatusResponse)(nil)).Elem()
}

func (i DefaultSnatStatusResponseArgs) ToDefaultSnatStatusResponseOutput() DefaultSnatStatusResponseOutput {
	return i.ToDefaultSnatStatusResponseOutputWithContext(context.Background())
}

func (i DefaultSnatStatusResponseArgs) ToDefaultSnatStatusResponseOutputWithContext(ctx context.Context) DefaultSnatStatusResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultSnatStatusResponseOutput)
}

func (i DefaultSnatStatusResponseArgs) ToDefaultSnatStatusResponsePtrOutput() DefaultSnatStatusResponsePtrOutput {
	return i.ToDefaultSnatStatusResponsePtrOutputWithContext(context.Background())
}

func (i DefaultSnatStatusResponseArgs) ToDefaultSnatStatusResponsePtrOutputWithContext(ctx context.Context) DefaultSnatStatusResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultSnatStatusResponseOutput).ToDefaultSnatStatusResponsePtrOutputWithContext(ctx)
}

// DefaultSnatStatusResponsePtrInput is an input type that accepts DefaultSnatStatusResponseArgs, DefaultSnatStatusResponsePtr and DefaultSnatStatusResponsePtrOutput values.
// You can construct a concrete instance of `DefaultSnatStatusResponsePtrInput` via:
//
//          DefaultSnatStatusResponseArgs{...}
//
//  or:
//
//          nil
type DefaultSnatStatusResponsePtrInput interface {
	pulumi.Input

	ToDefaultSnatStatusResponsePtrOutput() DefaultSnatStatusResponsePtrOutput
	ToDefaultSnatStatusResponsePtrOutputWithContext(context.Context) DefaultSnatStatusResponsePtrOutput
}

type defaultSnatStatusResponsePtrType DefaultSnatStatusResponseArgs

func DefaultSnatStatusResponsePtr(v *DefaultSnatStatusResponseArgs) DefaultSnatStatusResponsePtrInput {
	return (*defaultSnatStatusResponsePtrType)(v)
}

func (*defaultSnatStatusResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DefaultSnatStatusResponse)(nil)).Elem()
}

func (i *defaultSnatStatusResponsePtrType) ToDefaultSnatStatusResponsePtrOutput() DefaultSnatStatusResponsePtrOutput {
	return i.ToDefaultSnatStatusResponsePtrOutputWithContext(context.Background())
}

func (i *defaultSnatStatusResponsePtrType) ToDefaultSnatStatusResponsePtrOutputWithContext(ctx context.Context) DefaultSnatStatusResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultSnatStatusResponsePtrOutput)
}

// DefaultSnatStatus contains the desired state of whether default sNAT should be disabled on the cluster.
type DefaultSnatStatusResponseOutput struct{ *pulumi.OutputState }

func (DefaultSnatStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DefaultSnatStatusResponse)(nil)).Elem()
}

func (o DefaultSnatStatusResponseOutput) ToDefaultSnatStatusResponseOutput() DefaultSnatStatusResponseOutput {
	return o
}

func (o DefaultSnatStatusResponseOutput) ToDefaultSnatStatusResponseOutputWithContext(ctx context.Context) DefaultSnatStatusResponseOutput {
	return o
}

func (o DefaultSnatStatusResponseOutput) ToDefaultSnatStatusResponsePtrOutput() DefaultSnatStatusResponsePtrOutput {
	return o.ToDefaultSnatStatusResponsePtrOutputWithContext(context.Background())
}

func (o DefaultSnatStatusResponseOutput) ToDefaultSnatStatusResponsePtrOutputWithContext(ctx context.Context) DefaultSnatStatusResponsePtrOutput {
	return o.ApplyT(func(v DefaultSnatStatusResponse) *DefaultSnatStatusResponse {
		return &v
	}).(DefaultSnatStatusResponsePtrOutput)
}

// Disables cluster default sNAT rules.
func (o DefaultSnatStatusResponseOutput) Disabled() pulumi.BoolOutput {
	return o.ApplyT(func(v DefaultSnatStatusResponse) bool { return v.Disabled }).(pulumi.BoolOutput)
}

type DefaultSnatStatusResponsePtrOutput struct{ *pulumi.OutputState }

func (DefaultSnatStatusResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DefaultSnatStatusResponse)(nil)).Elem()
}

func (o DefaultSnatStatusResponsePtrOutput) ToDefaultSnatStatusResponsePtrOutput() DefaultSnatStatusResponsePtrOutput {
	return o
}

func (o DefaultSnatStatusResponsePtrOutput) ToDefaultSnatStatusResponsePtrOutputWithContext(ctx context.Context) DefaultSnatStatusResponsePtrOutput {
	return o
}

func (o DefaultSnatStatusResponsePtrOutput) Elem() DefaultSnatStatusResponseOutput {
	return o.ApplyT(func(v *DefaultSnatStatusResponse) DefaultSnatStatusResponse { return *v }).(DefaultSnatStatusResponseOutput)
}

// Disables cluster default sNAT rules.
func (o DefaultSnatStatusResponsePtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DefaultSnatStatusResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// Configuration for NodeLocal DNSCache
type DnsCacheConfig struct {
	// Whether NodeLocal DNSCache is enabled for this cluster.
	Enabled *bool `pulumi:"enabled"`
}

// DnsCacheConfigInput is an input type that accepts DnsCacheConfigArgs and DnsCacheConfigOutput values.
// You can construct a concrete instance of `DnsCacheConfigInput` via:
//
//          DnsCacheConfigArgs{...}
type DnsCacheConfigInput interface {
	pulumi.Input

	ToDnsCacheConfigOutput() DnsCacheConfigOutput
	ToDnsCacheConfigOutputWithContext(context.Context) DnsCacheConfigOutput
}

// Configuration for NodeLocal DNSCache
type DnsCacheConfigArgs struct {
	// Whether NodeLocal DNSCache is enabled for this cluster.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (DnsCacheConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsCacheConfig)(nil)).Elem()
}

func (i DnsCacheConfigArgs) ToDnsCacheConfigOutput() DnsCacheConfigOutput {
	return i.ToDnsCacheConfigOutputWithContext(context.Background())
}

func (i DnsCacheConfigArgs) ToDnsCacheConfigOutputWithContext(ctx context.Context) DnsCacheConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsCacheConfigOutput)
}

func (i DnsCacheConfigArgs) ToDnsCacheConfigPtrOutput() DnsCacheConfigPtrOutput {
	return i.ToDnsCacheConfigPtrOutputWithContext(context.Background())
}

func (i DnsCacheConfigArgs) ToDnsCacheConfigPtrOutputWithContext(ctx context.Context) DnsCacheConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsCacheConfigOutput).ToDnsCacheConfigPtrOutputWithContext(ctx)
}

// DnsCacheConfigPtrInput is an input type that accepts DnsCacheConfigArgs, DnsCacheConfigPtr and DnsCacheConfigPtrOutput values.
// You can construct a concrete instance of `DnsCacheConfigPtrInput` via:
//
//          DnsCacheConfigArgs{...}
//
//  or:
//
//          nil
type DnsCacheConfigPtrInput interface {
	pulumi.Input

	ToDnsCacheConfigPtrOutput() DnsCacheConfigPtrOutput
	ToDnsCacheConfigPtrOutputWithContext(context.Context) DnsCacheConfigPtrOutput
}

type dnsCacheConfigPtrType DnsCacheConfigArgs

func DnsCacheConfigPtr(v *DnsCacheConfigArgs) DnsCacheConfigPtrInput {
	return (*dnsCacheConfigPtrType)(v)
}

func (*dnsCacheConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsCacheConfig)(nil)).Elem()
}

func (i *dnsCacheConfigPtrType) ToDnsCacheConfigPtrOutput() DnsCacheConfigPtrOutput {
	return i.ToDnsCacheConfigPtrOutputWithContext(context.Background())
}

func (i *dnsCacheConfigPtrType) ToDnsCacheConfigPtrOutputWithContext(ctx context.Context) DnsCacheConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsCacheConfigPtrOutput)
}

// Configuration for NodeLocal DNSCache
type DnsCacheConfigOutput struct{ *pulumi.OutputState }

func (DnsCacheConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsCacheConfig)(nil)).Elem()
}

func (o DnsCacheConfigOutput) ToDnsCacheConfigOutput() DnsCacheConfigOutput {
	return o
}

func (o DnsCacheConfigOutput) ToDnsCacheConfigOutputWithContext(ctx context.Context) DnsCacheConfigOutput {
	return o
}

func (o DnsCacheConfigOutput) ToDnsCacheConfigPtrOutput() DnsCacheConfigPtrOutput {
	return o.ToDnsCacheConfigPtrOutputWithContext(context.Background())
}

func (o DnsCacheConfigOutput) ToDnsCacheConfigPtrOutputWithContext(ctx context.Context) DnsCacheConfigPtrOutput {
	return o.ApplyT(func(v DnsCacheConfig) *DnsCacheConfig {
		return &v
	}).(DnsCacheConfigPtrOutput)
}

// Whether NodeLocal DNSCache is enabled for this cluster.
func (o DnsCacheConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DnsCacheConfig) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type DnsCacheConfigPtrOutput struct{ *pulumi.OutputState }

func (DnsCacheConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsCacheConfig)(nil)).Elem()
}

func (o DnsCacheConfigPtrOutput) ToDnsCacheConfigPtrOutput() DnsCacheConfigPtrOutput {
	return o
}

func (o DnsCacheConfigPtrOutput) ToDnsCacheConfigPtrOutputWithContext(ctx context.Context) DnsCacheConfigPtrOutput {
	return o
}

func (o DnsCacheConfigPtrOutput) Elem() DnsCacheConfigOutput {
	return o.ApplyT(func(v *DnsCacheConfig) DnsCacheConfig { return *v }).(DnsCacheConfigOutput)
}

// Whether NodeLocal DNSCache is enabled for this cluster.
func (o DnsCacheConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DnsCacheConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Configuration for NodeLocal DNSCache
type DnsCacheConfigResponse struct {
	// Whether NodeLocal DNSCache is enabled for this cluster.
	Enabled bool `pulumi:"enabled"`
}

// DnsCacheConfigResponseInput is an input type that accepts DnsCacheConfigResponseArgs and DnsCacheConfigResponseOutput values.
// You can construct a concrete instance of `DnsCacheConfigResponseInput` via:
//
//          DnsCacheConfigResponseArgs{...}
type DnsCacheConfigResponseInput interface {
	pulumi.Input

	ToDnsCacheConfigResponseOutput() DnsCacheConfigResponseOutput
	ToDnsCacheConfigResponseOutputWithContext(context.Context) DnsCacheConfigResponseOutput
}

// Configuration for NodeLocal DNSCache
type DnsCacheConfigResponseArgs struct {
	// Whether NodeLocal DNSCache is enabled for this cluster.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

func (DnsCacheConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsCacheConfigResponse)(nil)).Elem()
}

func (i DnsCacheConfigResponseArgs) ToDnsCacheConfigResponseOutput() DnsCacheConfigResponseOutput {
	return i.ToDnsCacheConfigResponseOutputWithContext(context.Background())
}

func (i DnsCacheConfigResponseArgs) ToDnsCacheConfigResponseOutputWithContext(ctx context.Context) DnsCacheConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsCacheConfigResponseOutput)
}

func (i DnsCacheConfigResponseArgs) ToDnsCacheConfigResponsePtrOutput() DnsCacheConfigResponsePtrOutput {
	return i.ToDnsCacheConfigResponsePtrOutputWithContext(context.Background())
}

func (i DnsCacheConfigResponseArgs) ToDnsCacheConfigResponsePtrOutputWithContext(ctx context.Context) DnsCacheConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsCacheConfigResponseOutput).ToDnsCacheConfigResponsePtrOutputWithContext(ctx)
}

// DnsCacheConfigResponsePtrInput is an input type that accepts DnsCacheConfigResponseArgs, DnsCacheConfigResponsePtr and DnsCacheConfigResponsePtrOutput values.
// You can construct a concrete instance of `DnsCacheConfigResponsePtrInput` via:
//
//          DnsCacheConfigResponseArgs{...}
//
//  or:
//
//          nil
type DnsCacheConfigResponsePtrInput interface {
	pulumi.Input

	ToDnsCacheConfigResponsePtrOutput() DnsCacheConfigResponsePtrOutput
	ToDnsCacheConfigResponsePtrOutputWithContext(context.Context) DnsCacheConfigResponsePtrOutput
}

type dnsCacheConfigResponsePtrType DnsCacheConfigResponseArgs

func DnsCacheConfigResponsePtr(v *DnsCacheConfigResponseArgs) DnsCacheConfigResponsePtrInput {
	return (*dnsCacheConfigResponsePtrType)(v)
}

func (*dnsCacheConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsCacheConfigResponse)(nil)).Elem()
}

func (i *dnsCacheConfigResponsePtrType) ToDnsCacheConfigResponsePtrOutput() DnsCacheConfigResponsePtrOutput {
	return i.ToDnsCacheConfigResponsePtrOutputWithContext(context.Background())
}

func (i *dnsCacheConfigResponsePtrType) ToDnsCacheConfigResponsePtrOutputWithContext(ctx context.Context) DnsCacheConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsCacheConfigResponsePtrOutput)
}

// Configuration for NodeLocal DNSCache
type DnsCacheConfigResponseOutput struct{ *pulumi.OutputState }

func (DnsCacheConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsCacheConfigResponse)(nil)).Elem()
}

func (o DnsCacheConfigResponseOutput) ToDnsCacheConfigResponseOutput() DnsCacheConfigResponseOutput {
	return o
}

func (o DnsCacheConfigResponseOutput) ToDnsCacheConfigResponseOutputWithContext(ctx context.Context) DnsCacheConfigResponseOutput {
	return o
}

func (o DnsCacheConfigResponseOutput) ToDnsCacheConfigResponsePtrOutput() DnsCacheConfigResponsePtrOutput {
	return o.ToDnsCacheConfigResponsePtrOutputWithContext(context.Background())
}

func (o DnsCacheConfigResponseOutput) ToDnsCacheConfigResponsePtrOutputWithContext(ctx context.Context) DnsCacheConfigResponsePtrOutput {
	return o.ApplyT(func(v DnsCacheConfigResponse) *DnsCacheConfigResponse {
		return &v
	}).(DnsCacheConfigResponsePtrOutput)
}

// Whether NodeLocal DNSCache is enabled for this cluster.
func (o DnsCacheConfigResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v DnsCacheConfigResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type DnsCacheConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (DnsCacheConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsCacheConfigResponse)(nil)).Elem()
}

func (o DnsCacheConfigResponsePtrOutput) ToDnsCacheConfigResponsePtrOutput() DnsCacheConfigResponsePtrOutput {
	return o
}

func (o DnsCacheConfigResponsePtrOutput) ToDnsCacheConfigResponsePtrOutputWithContext(ctx context.Context) DnsCacheConfigResponsePtrOutput {
	return o
}

func (o DnsCacheConfigResponsePtrOutput) Elem() DnsCacheConfigResponseOutput {
	return o.ApplyT(func(v *DnsCacheConfigResponse) DnsCacheConfigResponse { return *v }).(DnsCacheConfigResponseOutput)
}

// Whether NodeLocal DNSCache is enabled for this cluster.
func (o DnsCacheConfigResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DnsCacheConfigResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Configuration for the Compute Engine PD CSI driver.
type GcePersistentDiskCsiDriverConfig struct {
	// Whether the Compute Engine PD CSI driver is enabled for this cluster.
	Enabled *bool `pulumi:"enabled"`
}

// GcePersistentDiskCsiDriverConfigInput is an input type that accepts GcePersistentDiskCsiDriverConfigArgs and GcePersistentDiskCsiDriverConfigOutput values.
// You can construct a concrete instance of `GcePersistentDiskCsiDriverConfigInput` via:
//
//          GcePersistentDiskCsiDriverConfigArgs{...}
type GcePersistentDiskCsiDriverConfigInput interface {
	pulumi.Input

	ToGcePersistentDiskCsiDriverConfigOutput() GcePersistentDiskCsiDriverConfigOutput
	ToGcePersistentDiskCsiDriverConfigOutputWithContext(context.Context) GcePersistentDiskCsiDriverConfigOutput
}

// Configuration for the Compute Engine PD CSI driver.
type GcePersistentDiskCsiDriverConfigArgs struct {
	// Whether the Compute Engine PD CSI driver is enabled for this cluster.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (GcePersistentDiskCsiDriverConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GcePersistentDiskCsiDriverConfig)(nil)).Elem()
}

func (i GcePersistentDiskCsiDriverConfigArgs) ToGcePersistentDiskCsiDriverConfigOutput() GcePersistentDiskCsiDriverConfigOutput {
	return i.ToGcePersistentDiskCsiDriverConfigOutputWithContext(context.Background())
}

func (i GcePersistentDiskCsiDriverConfigArgs) ToGcePersistentDiskCsiDriverConfigOutputWithContext(ctx context.Context) GcePersistentDiskCsiDriverConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcePersistentDiskCsiDriverConfigOutput)
}

func (i GcePersistentDiskCsiDriverConfigArgs) ToGcePersistentDiskCsiDriverConfigPtrOutput() GcePersistentDiskCsiDriverConfigPtrOutput {
	return i.ToGcePersistentDiskCsiDriverConfigPtrOutputWithContext(context.Background())
}

func (i GcePersistentDiskCsiDriverConfigArgs) ToGcePersistentDiskCsiDriverConfigPtrOutputWithContext(ctx context.Context) GcePersistentDiskCsiDriverConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcePersistentDiskCsiDriverConfigOutput).ToGcePersistentDiskCsiDriverConfigPtrOutputWithContext(ctx)
}

// GcePersistentDiskCsiDriverConfigPtrInput is an input type that accepts GcePersistentDiskCsiDriverConfigArgs, GcePersistentDiskCsiDriverConfigPtr and GcePersistentDiskCsiDriverConfigPtrOutput values.
// You can construct a concrete instance of `GcePersistentDiskCsiDriverConfigPtrInput` via:
//
//          GcePersistentDiskCsiDriverConfigArgs{...}
//
//  or:
//
//          nil
type GcePersistentDiskCsiDriverConfigPtrInput interface {
	pulumi.Input

	ToGcePersistentDiskCsiDriverConfigPtrOutput() GcePersistentDiskCsiDriverConfigPtrOutput
	ToGcePersistentDiskCsiDriverConfigPtrOutputWithContext(context.Context) GcePersistentDiskCsiDriverConfigPtrOutput
}

type gcePersistentDiskCsiDriverConfigPtrType GcePersistentDiskCsiDriverConfigArgs

func GcePersistentDiskCsiDriverConfigPtr(v *GcePersistentDiskCsiDriverConfigArgs) GcePersistentDiskCsiDriverConfigPtrInput {
	return (*gcePersistentDiskCsiDriverConfigPtrType)(v)
}

func (*gcePersistentDiskCsiDriverConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GcePersistentDiskCsiDriverConfig)(nil)).Elem()
}

func (i *gcePersistentDiskCsiDriverConfigPtrType) ToGcePersistentDiskCsiDriverConfigPtrOutput() GcePersistentDiskCsiDriverConfigPtrOutput {
	return i.ToGcePersistentDiskCsiDriverConfigPtrOutputWithContext(context.Background())
}

func (i *gcePersistentDiskCsiDriverConfigPtrType) ToGcePersistentDiskCsiDriverConfigPtrOutputWithContext(ctx context.Context) GcePersistentDiskCsiDriverConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcePersistentDiskCsiDriverConfigPtrOutput)
}

// Configuration for the Compute Engine PD CSI driver.
type GcePersistentDiskCsiDriverConfigOutput struct{ *pulumi.OutputState }

func (GcePersistentDiskCsiDriverConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GcePersistentDiskCsiDriverConfig)(nil)).Elem()
}

func (o GcePersistentDiskCsiDriverConfigOutput) ToGcePersistentDiskCsiDriverConfigOutput() GcePersistentDiskCsiDriverConfigOutput {
	return o
}

func (o GcePersistentDiskCsiDriverConfigOutput) ToGcePersistentDiskCsiDriverConfigOutputWithContext(ctx context.Context) GcePersistentDiskCsiDriverConfigOutput {
	return o
}

func (o GcePersistentDiskCsiDriverConfigOutput) ToGcePersistentDiskCsiDriverConfigPtrOutput() GcePersistentDiskCsiDriverConfigPtrOutput {
	return o.ToGcePersistentDiskCsiDriverConfigPtrOutputWithContext(context.Background())
}

func (o GcePersistentDiskCsiDriverConfigOutput) ToGcePersistentDiskCsiDriverConfigPtrOutputWithContext(ctx context.Context) GcePersistentDiskCsiDriverConfigPtrOutput {
	return o.ApplyT(func(v GcePersistentDiskCsiDriverConfig) *GcePersistentDiskCsiDriverConfig {
		return &v
	}).(GcePersistentDiskCsiDriverConfigPtrOutput)
}

// Whether the Compute Engine PD CSI driver is enabled for this cluster.
func (o GcePersistentDiskCsiDriverConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GcePersistentDiskCsiDriverConfig) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type GcePersistentDiskCsiDriverConfigPtrOutput struct{ *pulumi.OutputState }

func (GcePersistentDiskCsiDriverConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GcePersistentDiskCsiDriverConfig)(nil)).Elem()
}

func (o GcePersistentDiskCsiDriverConfigPtrOutput) ToGcePersistentDiskCsiDriverConfigPtrOutput() GcePersistentDiskCsiDriverConfigPtrOutput {
	return o
}

func (o GcePersistentDiskCsiDriverConfigPtrOutput) ToGcePersistentDiskCsiDriverConfigPtrOutputWithContext(ctx context.Context) GcePersistentDiskCsiDriverConfigPtrOutput {
	return o
}

func (o GcePersistentDiskCsiDriverConfigPtrOutput) Elem() GcePersistentDiskCsiDriverConfigOutput {
	return o.ApplyT(func(v *GcePersistentDiskCsiDriverConfig) GcePersistentDiskCsiDriverConfig { return *v }).(GcePersistentDiskCsiDriverConfigOutput)
}

// Whether the Compute Engine PD CSI driver is enabled for this cluster.
func (o GcePersistentDiskCsiDriverConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GcePersistentDiskCsiDriverConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Configuration for the Compute Engine PD CSI driver.
type GcePersistentDiskCsiDriverConfigResponse struct {
	// Whether the Compute Engine PD CSI driver is enabled for this cluster.
	Enabled bool `pulumi:"enabled"`
}

// GcePersistentDiskCsiDriverConfigResponseInput is an input type that accepts GcePersistentDiskCsiDriverConfigResponseArgs and GcePersistentDiskCsiDriverConfigResponseOutput values.
// You can construct a concrete instance of `GcePersistentDiskCsiDriverConfigResponseInput` via:
//
//          GcePersistentDiskCsiDriverConfigResponseArgs{...}
type GcePersistentDiskCsiDriverConfigResponseInput interface {
	pulumi.Input

	ToGcePersistentDiskCsiDriverConfigResponseOutput() GcePersistentDiskCsiDriverConfigResponseOutput
	ToGcePersistentDiskCsiDriverConfigResponseOutputWithContext(context.Context) GcePersistentDiskCsiDriverConfigResponseOutput
}

// Configuration for the Compute Engine PD CSI driver.
type GcePersistentDiskCsiDriverConfigResponseArgs struct {
	// Whether the Compute Engine PD CSI driver is enabled for this cluster.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

func (GcePersistentDiskCsiDriverConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GcePersistentDiskCsiDriverConfigResponse)(nil)).Elem()
}

func (i GcePersistentDiskCsiDriverConfigResponseArgs) ToGcePersistentDiskCsiDriverConfigResponseOutput() GcePersistentDiskCsiDriverConfigResponseOutput {
	return i.ToGcePersistentDiskCsiDriverConfigResponseOutputWithContext(context.Background())
}

func (i GcePersistentDiskCsiDriverConfigResponseArgs) ToGcePersistentDiskCsiDriverConfigResponseOutputWithContext(ctx context.Context) GcePersistentDiskCsiDriverConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcePersistentDiskCsiDriverConfigResponseOutput)
}

func (i GcePersistentDiskCsiDriverConfigResponseArgs) ToGcePersistentDiskCsiDriverConfigResponsePtrOutput() GcePersistentDiskCsiDriverConfigResponsePtrOutput {
	return i.ToGcePersistentDiskCsiDriverConfigResponsePtrOutputWithContext(context.Background())
}

func (i GcePersistentDiskCsiDriverConfigResponseArgs) ToGcePersistentDiskCsiDriverConfigResponsePtrOutputWithContext(ctx context.Context) GcePersistentDiskCsiDriverConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcePersistentDiskCsiDriverConfigResponseOutput).ToGcePersistentDiskCsiDriverConfigResponsePtrOutputWithContext(ctx)
}

// GcePersistentDiskCsiDriverConfigResponsePtrInput is an input type that accepts GcePersistentDiskCsiDriverConfigResponseArgs, GcePersistentDiskCsiDriverConfigResponsePtr and GcePersistentDiskCsiDriverConfigResponsePtrOutput values.
// You can construct a concrete instance of `GcePersistentDiskCsiDriverConfigResponsePtrInput` via:
//
//          GcePersistentDiskCsiDriverConfigResponseArgs{...}
//
//  or:
//
//          nil
type GcePersistentDiskCsiDriverConfigResponsePtrInput interface {
	pulumi.Input

	ToGcePersistentDiskCsiDriverConfigResponsePtrOutput() GcePersistentDiskCsiDriverConfigResponsePtrOutput
	ToGcePersistentDiskCsiDriverConfigResponsePtrOutputWithContext(context.Context) GcePersistentDiskCsiDriverConfigResponsePtrOutput
}

type gcePersistentDiskCsiDriverConfigResponsePtrType GcePersistentDiskCsiDriverConfigResponseArgs

func GcePersistentDiskCsiDriverConfigResponsePtr(v *GcePersistentDiskCsiDriverConfigResponseArgs) GcePersistentDiskCsiDriverConfigResponsePtrInput {
	return (*gcePersistentDiskCsiDriverConfigResponsePtrType)(v)
}

func (*gcePersistentDiskCsiDriverConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GcePersistentDiskCsiDriverConfigResponse)(nil)).Elem()
}

func (i *gcePersistentDiskCsiDriverConfigResponsePtrType) ToGcePersistentDiskCsiDriverConfigResponsePtrOutput() GcePersistentDiskCsiDriverConfigResponsePtrOutput {
	return i.ToGcePersistentDiskCsiDriverConfigResponsePtrOutputWithContext(context.Background())
}

func (i *gcePersistentDiskCsiDriverConfigResponsePtrType) ToGcePersistentDiskCsiDriverConfigResponsePtrOutputWithContext(ctx context.Context) GcePersistentDiskCsiDriverConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcePersistentDiskCsiDriverConfigResponsePtrOutput)
}

// Configuration for the Compute Engine PD CSI driver.
type GcePersistentDiskCsiDriverConfigResponseOutput struct{ *pulumi.OutputState }

func (GcePersistentDiskCsiDriverConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GcePersistentDiskCsiDriverConfigResponse)(nil)).Elem()
}

func (o GcePersistentDiskCsiDriverConfigResponseOutput) ToGcePersistentDiskCsiDriverConfigResponseOutput() GcePersistentDiskCsiDriverConfigResponseOutput {
	return o
}

func (o GcePersistentDiskCsiDriverConfigResponseOutput) ToGcePersistentDiskCsiDriverConfigResponseOutputWithContext(ctx context.Context) GcePersistentDiskCsiDriverConfigResponseOutput {
	return o
}

func (o GcePersistentDiskCsiDriverConfigResponseOutput) ToGcePersistentDiskCsiDriverConfigResponsePtrOutput() GcePersistentDiskCsiDriverConfigResponsePtrOutput {
	return o.ToGcePersistentDiskCsiDriverConfigResponsePtrOutputWithContext(context.Background())
}

func (o GcePersistentDiskCsiDriverConfigResponseOutput) ToGcePersistentDiskCsiDriverConfigResponsePtrOutputWithContext(ctx context.Context) GcePersistentDiskCsiDriverConfigResponsePtrOutput {
	return o.ApplyT(func(v GcePersistentDiskCsiDriverConfigResponse) *GcePersistentDiskCsiDriverConfigResponse {
		return &v
	}).(GcePersistentDiskCsiDriverConfigResponsePtrOutput)
}

// Whether the Compute Engine PD CSI driver is enabled for this cluster.
func (o GcePersistentDiskCsiDriverConfigResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GcePersistentDiskCsiDriverConfigResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type GcePersistentDiskCsiDriverConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (GcePersistentDiskCsiDriverConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GcePersistentDiskCsiDriverConfigResponse)(nil)).Elem()
}

func (o GcePersistentDiskCsiDriverConfigResponsePtrOutput) ToGcePersistentDiskCsiDriverConfigResponsePtrOutput() GcePersistentDiskCsiDriverConfigResponsePtrOutput {
	return o
}

func (o GcePersistentDiskCsiDriverConfigResponsePtrOutput) ToGcePersistentDiskCsiDriverConfigResponsePtrOutputWithContext(ctx context.Context) GcePersistentDiskCsiDriverConfigResponsePtrOutput {
	return o
}

func (o GcePersistentDiskCsiDriverConfigResponsePtrOutput) Elem() GcePersistentDiskCsiDriverConfigResponseOutput {
	return o.ApplyT(func(v *GcePersistentDiskCsiDriverConfigResponse) GcePersistentDiskCsiDriverConfigResponse { return *v }).(GcePersistentDiskCsiDriverConfigResponseOutput)
}

// Whether the Compute Engine PD CSI driver is enabled for this cluster.
func (o GcePersistentDiskCsiDriverConfigResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GcePersistentDiskCsiDriverConfigResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Configuration options for the horizontal pod autoscaling feature, which increases or decreases the number of replica pods a replication controller has based on the resource usage of the existing pods.
type HorizontalPodAutoscaling struct {
	// Whether the Horizontal Pod Autoscaling feature is enabled in the cluster. When enabled, it ensures that metrics are collected into Stackdriver Monitoring.
	Disabled *bool `pulumi:"disabled"`
}

// HorizontalPodAutoscalingInput is an input type that accepts HorizontalPodAutoscalingArgs and HorizontalPodAutoscalingOutput values.
// You can construct a concrete instance of `HorizontalPodAutoscalingInput` via:
//
//          HorizontalPodAutoscalingArgs{...}
type HorizontalPodAutoscalingInput interface {
	pulumi.Input

	ToHorizontalPodAutoscalingOutput() HorizontalPodAutoscalingOutput
	ToHorizontalPodAutoscalingOutputWithContext(context.Context) HorizontalPodAutoscalingOutput
}

// Configuration options for the horizontal pod autoscaling feature, which increases or decreases the number of replica pods a replication controller has based on the resource usage of the existing pods.
type HorizontalPodAutoscalingArgs struct {
	// Whether the Horizontal Pod Autoscaling feature is enabled in the cluster. When enabled, it ensures that metrics are collected into Stackdriver Monitoring.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
}

func (HorizontalPodAutoscalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HorizontalPodAutoscaling)(nil)).Elem()
}

func (i HorizontalPodAutoscalingArgs) ToHorizontalPodAutoscalingOutput() HorizontalPodAutoscalingOutput {
	return i.ToHorizontalPodAutoscalingOutputWithContext(context.Background())
}

func (i HorizontalPodAutoscalingArgs) ToHorizontalPodAutoscalingOutputWithContext(ctx context.Context) HorizontalPodAutoscalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorizontalPodAutoscalingOutput)
}

func (i HorizontalPodAutoscalingArgs) ToHorizontalPodAutoscalingPtrOutput() HorizontalPodAutoscalingPtrOutput {
	return i.ToHorizontalPodAutoscalingPtrOutputWithContext(context.Background())
}

func (i HorizontalPodAutoscalingArgs) ToHorizontalPodAutoscalingPtrOutputWithContext(ctx context.Context) HorizontalPodAutoscalingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorizontalPodAutoscalingOutput).ToHorizontalPodAutoscalingPtrOutputWithContext(ctx)
}

// HorizontalPodAutoscalingPtrInput is an input type that accepts HorizontalPodAutoscalingArgs, HorizontalPodAutoscalingPtr and HorizontalPodAutoscalingPtrOutput values.
// You can construct a concrete instance of `HorizontalPodAutoscalingPtrInput` via:
//
//          HorizontalPodAutoscalingArgs{...}
//
//  or:
//
//          nil
type HorizontalPodAutoscalingPtrInput interface {
	pulumi.Input

	ToHorizontalPodAutoscalingPtrOutput() HorizontalPodAutoscalingPtrOutput
	ToHorizontalPodAutoscalingPtrOutputWithContext(context.Context) HorizontalPodAutoscalingPtrOutput
}

type horizontalPodAutoscalingPtrType HorizontalPodAutoscalingArgs

func HorizontalPodAutoscalingPtr(v *HorizontalPodAutoscalingArgs) HorizontalPodAutoscalingPtrInput {
	return (*horizontalPodAutoscalingPtrType)(v)
}

func (*horizontalPodAutoscalingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HorizontalPodAutoscaling)(nil)).Elem()
}

func (i *horizontalPodAutoscalingPtrType) ToHorizontalPodAutoscalingPtrOutput() HorizontalPodAutoscalingPtrOutput {
	return i.ToHorizontalPodAutoscalingPtrOutputWithContext(context.Background())
}

func (i *horizontalPodAutoscalingPtrType) ToHorizontalPodAutoscalingPtrOutputWithContext(ctx context.Context) HorizontalPodAutoscalingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorizontalPodAutoscalingPtrOutput)
}

// Configuration options for the horizontal pod autoscaling feature, which increases or decreases the number of replica pods a replication controller has based on the resource usage of the existing pods.
type HorizontalPodAutoscalingOutput struct{ *pulumi.OutputState }

func (HorizontalPodAutoscalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HorizontalPodAutoscaling)(nil)).Elem()
}

func (o HorizontalPodAutoscalingOutput) ToHorizontalPodAutoscalingOutput() HorizontalPodAutoscalingOutput {
	return o
}

func (o HorizontalPodAutoscalingOutput) ToHorizontalPodAutoscalingOutputWithContext(ctx context.Context) HorizontalPodAutoscalingOutput {
	return o
}

func (o HorizontalPodAutoscalingOutput) ToHorizontalPodAutoscalingPtrOutput() HorizontalPodAutoscalingPtrOutput {
	return o.ToHorizontalPodAutoscalingPtrOutputWithContext(context.Background())
}

func (o HorizontalPodAutoscalingOutput) ToHorizontalPodAutoscalingPtrOutputWithContext(ctx context.Context) HorizontalPodAutoscalingPtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscaling) *HorizontalPodAutoscaling {
		return &v
	}).(HorizontalPodAutoscalingPtrOutput)
}

// Whether the Horizontal Pod Autoscaling feature is enabled in the cluster. When enabled, it ensures that metrics are collected into Stackdriver Monitoring.
func (o HorizontalPodAutoscalingOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscaling) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

type HorizontalPodAutoscalingPtrOutput struct{ *pulumi.OutputState }

func (HorizontalPodAutoscalingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HorizontalPodAutoscaling)(nil)).Elem()
}

func (o HorizontalPodAutoscalingPtrOutput) ToHorizontalPodAutoscalingPtrOutput() HorizontalPodAutoscalingPtrOutput {
	return o
}

func (o HorizontalPodAutoscalingPtrOutput) ToHorizontalPodAutoscalingPtrOutputWithContext(ctx context.Context) HorizontalPodAutoscalingPtrOutput {
	return o
}

func (o HorizontalPodAutoscalingPtrOutput) Elem() HorizontalPodAutoscalingOutput {
	return o.ApplyT(func(v *HorizontalPodAutoscaling) HorizontalPodAutoscaling { return *v }).(HorizontalPodAutoscalingOutput)
}

// Whether the Horizontal Pod Autoscaling feature is enabled in the cluster. When enabled, it ensures that metrics are collected into Stackdriver Monitoring.
func (o HorizontalPodAutoscalingPtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HorizontalPodAutoscaling) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// Configuration options for the horizontal pod autoscaling feature, which increases or decreases the number of replica pods a replication controller has based on the resource usage of the existing pods.
type HorizontalPodAutoscalingResponse struct {
	// Whether the Horizontal Pod Autoscaling feature is enabled in the cluster. When enabled, it ensures that metrics are collected into Stackdriver Monitoring.
	Disabled bool `pulumi:"disabled"`
}

// HorizontalPodAutoscalingResponseInput is an input type that accepts HorizontalPodAutoscalingResponseArgs and HorizontalPodAutoscalingResponseOutput values.
// You can construct a concrete instance of `HorizontalPodAutoscalingResponseInput` via:
//
//          HorizontalPodAutoscalingResponseArgs{...}
type HorizontalPodAutoscalingResponseInput interface {
	pulumi.Input

	ToHorizontalPodAutoscalingResponseOutput() HorizontalPodAutoscalingResponseOutput
	ToHorizontalPodAutoscalingResponseOutputWithContext(context.Context) HorizontalPodAutoscalingResponseOutput
}

// Configuration options for the horizontal pod autoscaling feature, which increases or decreases the number of replica pods a replication controller has based on the resource usage of the existing pods.
type HorizontalPodAutoscalingResponseArgs struct {
	// Whether the Horizontal Pod Autoscaling feature is enabled in the cluster. When enabled, it ensures that metrics are collected into Stackdriver Monitoring.
	Disabled pulumi.BoolInput `pulumi:"disabled"`
}

func (HorizontalPodAutoscalingResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HorizontalPodAutoscalingResponse)(nil)).Elem()
}

func (i HorizontalPodAutoscalingResponseArgs) ToHorizontalPodAutoscalingResponseOutput() HorizontalPodAutoscalingResponseOutput {
	return i.ToHorizontalPodAutoscalingResponseOutputWithContext(context.Background())
}

func (i HorizontalPodAutoscalingResponseArgs) ToHorizontalPodAutoscalingResponseOutputWithContext(ctx context.Context) HorizontalPodAutoscalingResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorizontalPodAutoscalingResponseOutput)
}

func (i HorizontalPodAutoscalingResponseArgs) ToHorizontalPodAutoscalingResponsePtrOutput() HorizontalPodAutoscalingResponsePtrOutput {
	return i.ToHorizontalPodAutoscalingResponsePtrOutputWithContext(context.Background())
}

func (i HorizontalPodAutoscalingResponseArgs) ToHorizontalPodAutoscalingResponsePtrOutputWithContext(ctx context.Context) HorizontalPodAutoscalingResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorizontalPodAutoscalingResponseOutput).ToHorizontalPodAutoscalingResponsePtrOutputWithContext(ctx)
}

// HorizontalPodAutoscalingResponsePtrInput is an input type that accepts HorizontalPodAutoscalingResponseArgs, HorizontalPodAutoscalingResponsePtr and HorizontalPodAutoscalingResponsePtrOutput values.
// You can construct a concrete instance of `HorizontalPodAutoscalingResponsePtrInput` via:
//
//          HorizontalPodAutoscalingResponseArgs{...}
//
//  or:
//
//          nil
type HorizontalPodAutoscalingResponsePtrInput interface {
	pulumi.Input

	ToHorizontalPodAutoscalingResponsePtrOutput() HorizontalPodAutoscalingResponsePtrOutput
	ToHorizontalPodAutoscalingResponsePtrOutputWithContext(context.Context) HorizontalPodAutoscalingResponsePtrOutput
}

type horizontalPodAutoscalingResponsePtrType HorizontalPodAutoscalingResponseArgs

func HorizontalPodAutoscalingResponsePtr(v *HorizontalPodAutoscalingResponseArgs) HorizontalPodAutoscalingResponsePtrInput {
	return (*horizontalPodAutoscalingResponsePtrType)(v)
}

func (*horizontalPodAutoscalingResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HorizontalPodAutoscalingResponse)(nil)).Elem()
}

func (i *horizontalPodAutoscalingResponsePtrType) ToHorizontalPodAutoscalingResponsePtrOutput() HorizontalPodAutoscalingResponsePtrOutput {
	return i.ToHorizontalPodAutoscalingResponsePtrOutputWithContext(context.Background())
}

func (i *horizontalPodAutoscalingResponsePtrType) ToHorizontalPodAutoscalingResponsePtrOutputWithContext(ctx context.Context) HorizontalPodAutoscalingResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorizontalPodAutoscalingResponsePtrOutput)
}

// Configuration options for the horizontal pod autoscaling feature, which increases or decreases the number of replica pods a replication controller has based on the resource usage of the existing pods.
type HorizontalPodAutoscalingResponseOutput struct{ *pulumi.OutputState }

func (HorizontalPodAutoscalingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HorizontalPodAutoscalingResponse)(nil)).Elem()
}

func (o HorizontalPodAutoscalingResponseOutput) ToHorizontalPodAutoscalingResponseOutput() HorizontalPodAutoscalingResponseOutput {
	return o
}

func (o HorizontalPodAutoscalingResponseOutput) ToHorizontalPodAutoscalingResponseOutputWithContext(ctx context.Context) HorizontalPodAutoscalingResponseOutput {
	return o
}

func (o HorizontalPodAutoscalingResponseOutput) ToHorizontalPodAutoscalingResponsePtrOutput() HorizontalPodAutoscalingResponsePtrOutput {
	return o.ToHorizontalPodAutoscalingResponsePtrOutputWithContext(context.Background())
}

func (o HorizontalPodAutoscalingResponseOutput) ToHorizontalPodAutoscalingResponsePtrOutputWithContext(ctx context.Context) HorizontalPodAutoscalingResponsePtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalingResponse) *HorizontalPodAutoscalingResponse {
		return &v
	}).(HorizontalPodAutoscalingResponsePtrOutput)
}

// Whether the Horizontal Pod Autoscaling feature is enabled in the cluster. When enabled, it ensures that metrics are collected into Stackdriver Monitoring.
func (o HorizontalPodAutoscalingResponseOutput) Disabled() pulumi.BoolOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalingResponse) bool { return v.Disabled }).(pulumi.BoolOutput)
}

type HorizontalPodAutoscalingResponsePtrOutput struct{ *pulumi.OutputState }

func (HorizontalPodAutoscalingResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HorizontalPodAutoscalingResponse)(nil)).Elem()
}

func (o HorizontalPodAutoscalingResponsePtrOutput) ToHorizontalPodAutoscalingResponsePtrOutput() HorizontalPodAutoscalingResponsePtrOutput {
	return o
}

func (o HorizontalPodAutoscalingResponsePtrOutput) ToHorizontalPodAutoscalingResponsePtrOutputWithContext(ctx context.Context) HorizontalPodAutoscalingResponsePtrOutput {
	return o
}

func (o HorizontalPodAutoscalingResponsePtrOutput) Elem() HorizontalPodAutoscalingResponseOutput {
	return o.ApplyT(func(v *HorizontalPodAutoscalingResponse) HorizontalPodAutoscalingResponse { return *v }).(HorizontalPodAutoscalingResponseOutput)
}

// Whether the Horizontal Pod Autoscaling feature is enabled in the cluster. When enabled, it ensures that metrics are collected into Stackdriver Monitoring.
func (o HorizontalPodAutoscalingResponsePtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HorizontalPodAutoscalingResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// Configuration options for the HTTP (L7) load balancing controller addon, which makes it easy to set up HTTP load balancers for services in a cluster.
type HttpLoadBalancing struct {
	// Whether the HTTP Load Balancing controller is enabled in the cluster. When enabled, it runs a small pod in the cluster that manages the load balancers.
	Disabled *bool `pulumi:"disabled"`
}

// HttpLoadBalancingInput is an input type that accepts HttpLoadBalancingArgs and HttpLoadBalancingOutput values.
// You can construct a concrete instance of `HttpLoadBalancingInput` via:
//
//          HttpLoadBalancingArgs{...}
type HttpLoadBalancingInput interface {
	pulumi.Input

	ToHttpLoadBalancingOutput() HttpLoadBalancingOutput
	ToHttpLoadBalancingOutputWithContext(context.Context) HttpLoadBalancingOutput
}

// Configuration options for the HTTP (L7) load balancing controller addon, which makes it easy to set up HTTP load balancers for services in a cluster.
type HttpLoadBalancingArgs struct {
	// Whether the HTTP Load Balancing controller is enabled in the cluster. When enabled, it runs a small pod in the cluster that manages the load balancers.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
}

func (HttpLoadBalancingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpLoadBalancing)(nil)).Elem()
}

func (i HttpLoadBalancingArgs) ToHttpLoadBalancingOutput() HttpLoadBalancingOutput {
	return i.ToHttpLoadBalancingOutputWithContext(context.Background())
}

func (i HttpLoadBalancingArgs) ToHttpLoadBalancingOutputWithContext(ctx context.Context) HttpLoadBalancingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpLoadBalancingOutput)
}

func (i HttpLoadBalancingArgs) ToHttpLoadBalancingPtrOutput() HttpLoadBalancingPtrOutput {
	return i.ToHttpLoadBalancingPtrOutputWithContext(context.Background())
}

func (i HttpLoadBalancingArgs) ToHttpLoadBalancingPtrOutputWithContext(ctx context.Context) HttpLoadBalancingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpLoadBalancingOutput).ToHttpLoadBalancingPtrOutputWithContext(ctx)
}

// HttpLoadBalancingPtrInput is an input type that accepts HttpLoadBalancingArgs, HttpLoadBalancingPtr and HttpLoadBalancingPtrOutput values.
// You can construct a concrete instance of `HttpLoadBalancingPtrInput` via:
//
//          HttpLoadBalancingArgs{...}
//
//  or:
//
//          nil
type HttpLoadBalancingPtrInput interface {
	pulumi.Input

	ToHttpLoadBalancingPtrOutput() HttpLoadBalancingPtrOutput
	ToHttpLoadBalancingPtrOutputWithContext(context.Context) HttpLoadBalancingPtrOutput
}

type httpLoadBalancingPtrType HttpLoadBalancingArgs

func HttpLoadBalancingPtr(v *HttpLoadBalancingArgs) HttpLoadBalancingPtrInput {
	return (*httpLoadBalancingPtrType)(v)
}

func (*httpLoadBalancingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpLoadBalancing)(nil)).Elem()
}

func (i *httpLoadBalancingPtrType) ToHttpLoadBalancingPtrOutput() HttpLoadBalancingPtrOutput {
	return i.ToHttpLoadBalancingPtrOutputWithContext(context.Background())
}

func (i *httpLoadBalancingPtrType) ToHttpLoadBalancingPtrOutputWithContext(ctx context.Context) HttpLoadBalancingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpLoadBalancingPtrOutput)
}

// Configuration options for the HTTP (L7) load balancing controller addon, which makes it easy to set up HTTP load balancers for services in a cluster.
type HttpLoadBalancingOutput struct{ *pulumi.OutputState }

func (HttpLoadBalancingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpLoadBalancing)(nil)).Elem()
}

func (o HttpLoadBalancingOutput) ToHttpLoadBalancingOutput() HttpLoadBalancingOutput {
	return o
}

func (o HttpLoadBalancingOutput) ToHttpLoadBalancingOutputWithContext(ctx context.Context) HttpLoadBalancingOutput {
	return o
}

func (o HttpLoadBalancingOutput) ToHttpLoadBalancingPtrOutput() HttpLoadBalancingPtrOutput {
	return o.ToHttpLoadBalancingPtrOutputWithContext(context.Background())
}

func (o HttpLoadBalancingOutput) ToHttpLoadBalancingPtrOutputWithContext(ctx context.Context) HttpLoadBalancingPtrOutput {
	return o.ApplyT(func(v HttpLoadBalancing) *HttpLoadBalancing {
		return &v
	}).(HttpLoadBalancingPtrOutput)
}

// Whether the HTTP Load Balancing controller is enabled in the cluster. When enabled, it runs a small pod in the cluster that manages the load balancers.
func (o HttpLoadBalancingOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HttpLoadBalancing) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

type HttpLoadBalancingPtrOutput struct{ *pulumi.OutputState }

func (HttpLoadBalancingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpLoadBalancing)(nil)).Elem()
}

func (o HttpLoadBalancingPtrOutput) ToHttpLoadBalancingPtrOutput() HttpLoadBalancingPtrOutput {
	return o
}

func (o HttpLoadBalancingPtrOutput) ToHttpLoadBalancingPtrOutputWithContext(ctx context.Context) HttpLoadBalancingPtrOutput {
	return o
}

func (o HttpLoadBalancingPtrOutput) Elem() HttpLoadBalancingOutput {
	return o.ApplyT(func(v *HttpLoadBalancing) HttpLoadBalancing { return *v }).(HttpLoadBalancingOutput)
}

// Whether the HTTP Load Balancing controller is enabled in the cluster. When enabled, it runs a small pod in the cluster that manages the load balancers.
func (o HttpLoadBalancingPtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HttpLoadBalancing) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// Configuration options for the HTTP (L7) load balancing controller addon, which makes it easy to set up HTTP load balancers for services in a cluster.
type HttpLoadBalancingResponse struct {
	// Whether the HTTP Load Balancing controller is enabled in the cluster. When enabled, it runs a small pod in the cluster that manages the load balancers.
	Disabled bool `pulumi:"disabled"`
}

// HttpLoadBalancingResponseInput is an input type that accepts HttpLoadBalancingResponseArgs and HttpLoadBalancingResponseOutput values.
// You can construct a concrete instance of `HttpLoadBalancingResponseInput` via:
//
//          HttpLoadBalancingResponseArgs{...}
type HttpLoadBalancingResponseInput interface {
	pulumi.Input

	ToHttpLoadBalancingResponseOutput() HttpLoadBalancingResponseOutput
	ToHttpLoadBalancingResponseOutputWithContext(context.Context) HttpLoadBalancingResponseOutput
}

// Configuration options for the HTTP (L7) load balancing controller addon, which makes it easy to set up HTTP load balancers for services in a cluster.
type HttpLoadBalancingResponseArgs struct {
	// Whether the HTTP Load Balancing controller is enabled in the cluster. When enabled, it runs a small pod in the cluster that manages the load balancers.
	Disabled pulumi.BoolInput `pulumi:"disabled"`
}

func (HttpLoadBalancingResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpLoadBalancingResponse)(nil)).Elem()
}

func (i HttpLoadBalancingResponseArgs) ToHttpLoadBalancingResponseOutput() HttpLoadBalancingResponseOutput {
	return i.ToHttpLoadBalancingResponseOutputWithContext(context.Background())
}

func (i HttpLoadBalancingResponseArgs) ToHttpLoadBalancingResponseOutputWithContext(ctx context.Context) HttpLoadBalancingResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpLoadBalancingResponseOutput)
}

func (i HttpLoadBalancingResponseArgs) ToHttpLoadBalancingResponsePtrOutput() HttpLoadBalancingResponsePtrOutput {
	return i.ToHttpLoadBalancingResponsePtrOutputWithContext(context.Background())
}

func (i HttpLoadBalancingResponseArgs) ToHttpLoadBalancingResponsePtrOutputWithContext(ctx context.Context) HttpLoadBalancingResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpLoadBalancingResponseOutput).ToHttpLoadBalancingResponsePtrOutputWithContext(ctx)
}

// HttpLoadBalancingResponsePtrInput is an input type that accepts HttpLoadBalancingResponseArgs, HttpLoadBalancingResponsePtr and HttpLoadBalancingResponsePtrOutput values.
// You can construct a concrete instance of `HttpLoadBalancingResponsePtrInput` via:
//
//          HttpLoadBalancingResponseArgs{...}
//
//  or:
//
//          nil
type HttpLoadBalancingResponsePtrInput interface {
	pulumi.Input

	ToHttpLoadBalancingResponsePtrOutput() HttpLoadBalancingResponsePtrOutput
	ToHttpLoadBalancingResponsePtrOutputWithContext(context.Context) HttpLoadBalancingResponsePtrOutput
}

type httpLoadBalancingResponsePtrType HttpLoadBalancingResponseArgs

func HttpLoadBalancingResponsePtr(v *HttpLoadBalancingResponseArgs) HttpLoadBalancingResponsePtrInput {
	return (*httpLoadBalancingResponsePtrType)(v)
}

func (*httpLoadBalancingResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpLoadBalancingResponse)(nil)).Elem()
}

func (i *httpLoadBalancingResponsePtrType) ToHttpLoadBalancingResponsePtrOutput() HttpLoadBalancingResponsePtrOutput {
	return i.ToHttpLoadBalancingResponsePtrOutputWithContext(context.Background())
}

func (i *httpLoadBalancingResponsePtrType) ToHttpLoadBalancingResponsePtrOutputWithContext(ctx context.Context) HttpLoadBalancingResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpLoadBalancingResponsePtrOutput)
}

// Configuration options for the HTTP (L7) load balancing controller addon, which makes it easy to set up HTTP load balancers for services in a cluster.
type HttpLoadBalancingResponseOutput struct{ *pulumi.OutputState }

func (HttpLoadBalancingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpLoadBalancingResponse)(nil)).Elem()
}

func (o HttpLoadBalancingResponseOutput) ToHttpLoadBalancingResponseOutput() HttpLoadBalancingResponseOutput {
	return o
}

func (o HttpLoadBalancingResponseOutput) ToHttpLoadBalancingResponseOutputWithContext(ctx context.Context) HttpLoadBalancingResponseOutput {
	return o
}

func (o HttpLoadBalancingResponseOutput) ToHttpLoadBalancingResponsePtrOutput() HttpLoadBalancingResponsePtrOutput {
	return o.ToHttpLoadBalancingResponsePtrOutputWithContext(context.Background())
}

func (o HttpLoadBalancingResponseOutput) ToHttpLoadBalancingResponsePtrOutputWithContext(ctx context.Context) HttpLoadBalancingResponsePtrOutput {
	return o.ApplyT(func(v HttpLoadBalancingResponse) *HttpLoadBalancingResponse {
		return &v
	}).(HttpLoadBalancingResponsePtrOutput)
}

// Whether the HTTP Load Balancing controller is enabled in the cluster. When enabled, it runs a small pod in the cluster that manages the load balancers.
func (o HttpLoadBalancingResponseOutput) Disabled() pulumi.BoolOutput {
	return o.ApplyT(func(v HttpLoadBalancingResponse) bool { return v.Disabled }).(pulumi.BoolOutput)
}

type HttpLoadBalancingResponsePtrOutput struct{ *pulumi.OutputState }

func (HttpLoadBalancingResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpLoadBalancingResponse)(nil)).Elem()
}

func (o HttpLoadBalancingResponsePtrOutput) ToHttpLoadBalancingResponsePtrOutput() HttpLoadBalancingResponsePtrOutput {
	return o
}

func (o HttpLoadBalancingResponsePtrOutput) ToHttpLoadBalancingResponsePtrOutputWithContext(ctx context.Context) HttpLoadBalancingResponsePtrOutput {
	return o
}

func (o HttpLoadBalancingResponsePtrOutput) Elem() HttpLoadBalancingResponseOutput {
	return o.ApplyT(func(v *HttpLoadBalancingResponse) HttpLoadBalancingResponse { return *v }).(HttpLoadBalancingResponseOutput)
}

// Whether the HTTP Load Balancing controller is enabled in the cluster. When enabled, it runs a small pod in the cluster that manages the load balancers.
func (o HttpLoadBalancingResponsePtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HttpLoadBalancingResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// Configuration for controlling how IPs are allocated in the cluster.
type IPAllocationPolicy struct {
	// The IP address range for the cluster pod IPs. If this field is set, then `cluster.cluster_ipv4_cidr` must be left blank. This field is only applicable when `use_ip_aliases` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
	ClusterIpv4CidrBlock *string `pulumi:"clusterIpv4CidrBlock"`
	// The name of the secondary range to be used for the cluster CIDR block. The secondary range will be used for pod IP addresses. This must be an existing secondary range associated with the cluster subnetwork. This field is only applicable with use_ip_aliases is true and create_subnetwork is false.
	ClusterSecondaryRangeName *string `pulumi:"clusterSecondaryRangeName"`
	// Whether a new subnetwork will be created automatically for the cluster. This field is only applicable when `use_ip_aliases` is true.
	CreateSubnetwork *bool `pulumi:"createSubnetwork"`
	// The IP address range of the instance IPs in this cluster. This is applicable only if `create_subnetwork` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
	NodeIpv4CidrBlock *string `pulumi:"nodeIpv4CidrBlock"`
	// The IP address range of the services IPs in this cluster. If blank, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
	ServicesIpv4CidrBlock *string `pulumi:"servicesIpv4CidrBlock"`
	// The name of the secondary range to be used as for the services CIDR block. The secondary range will be used for service ClusterIPs. This must be an existing secondary range associated with the cluster subnetwork. This field is only applicable with use_ip_aliases is true and create_subnetwork is false.
	ServicesSecondaryRangeName *string `pulumi:"servicesSecondaryRangeName"`
	// A custom subnetwork name to be used if `create_subnetwork` is true. If this field is empty, then an automatic name will be chosen for the new subnetwork.
	SubnetworkName *string `pulumi:"subnetworkName"`
	// The IP address range of the Cloud TPUs in this cluster. If unspecified, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. If unspecified, the range will use the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
	TpuIpv4CidrBlock *string `pulumi:"tpuIpv4CidrBlock"`
	// Whether alias IPs will be used for pod IPs in the cluster. This is used in conjunction with use_routes. It cannot be true if use_routes is true. If both use_ip_aliases and use_routes are false, then the server picks the default IP allocation mode
	UseIpAliases *bool `pulumi:"useIpAliases"`
	// Whether routes will be used for pod IPs in the cluster. This is used in conjunction with use_ip_aliases. It cannot be true if use_ip_aliases is true. If both use_ip_aliases and use_routes are false, then the server picks the default IP allocation mode
	UseRoutes *bool `pulumi:"useRoutes"`
}

// IPAllocationPolicyInput is an input type that accepts IPAllocationPolicyArgs and IPAllocationPolicyOutput values.
// You can construct a concrete instance of `IPAllocationPolicyInput` via:
//
//          IPAllocationPolicyArgs{...}
type IPAllocationPolicyInput interface {
	pulumi.Input

	ToIPAllocationPolicyOutput() IPAllocationPolicyOutput
	ToIPAllocationPolicyOutputWithContext(context.Context) IPAllocationPolicyOutput
}

// Configuration for controlling how IPs are allocated in the cluster.
type IPAllocationPolicyArgs struct {
	// The IP address range for the cluster pod IPs. If this field is set, then `cluster.cluster_ipv4_cidr` must be left blank. This field is only applicable when `use_ip_aliases` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
	ClusterIpv4CidrBlock pulumi.StringPtrInput `pulumi:"clusterIpv4CidrBlock"`
	// The name of the secondary range to be used for the cluster CIDR block. The secondary range will be used for pod IP addresses. This must be an existing secondary range associated with the cluster subnetwork. This field is only applicable with use_ip_aliases is true and create_subnetwork is false.
	ClusterSecondaryRangeName pulumi.StringPtrInput `pulumi:"clusterSecondaryRangeName"`
	// Whether a new subnetwork will be created automatically for the cluster. This field is only applicable when `use_ip_aliases` is true.
	CreateSubnetwork pulumi.BoolPtrInput `pulumi:"createSubnetwork"`
	// The IP address range of the instance IPs in this cluster. This is applicable only if `create_subnetwork` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
	NodeIpv4CidrBlock pulumi.StringPtrInput `pulumi:"nodeIpv4CidrBlock"`
	// The IP address range of the services IPs in this cluster. If blank, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
	ServicesIpv4CidrBlock pulumi.StringPtrInput `pulumi:"servicesIpv4CidrBlock"`
	// The name of the secondary range to be used as for the services CIDR block. The secondary range will be used for service ClusterIPs. This must be an existing secondary range associated with the cluster subnetwork. This field is only applicable with use_ip_aliases is true and create_subnetwork is false.
	ServicesSecondaryRangeName pulumi.StringPtrInput `pulumi:"servicesSecondaryRangeName"`
	// A custom subnetwork name to be used if `create_subnetwork` is true. If this field is empty, then an automatic name will be chosen for the new subnetwork.
	SubnetworkName pulumi.StringPtrInput `pulumi:"subnetworkName"`
	// The IP address range of the Cloud TPUs in this cluster. If unspecified, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. If unspecified, the range will use the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
	TpuIpv4CidrBlock pulumi.StringPtrInput `pulumi:"tpuIpv4CidrBlock"`
	// Whether alias IPs will be used for pod IPs in the cluster. This is used in conjunction with use_routes. It cannot be true if use_routes is true. If both use_ip_aliases and use_routes are false, then the server picks the default IP allocation mode
	UseIpAliases pulumi.BoolPtrInput `pulumi:"useIpAliases"`
	// Whether routes will be used for pod IPs in the cluster. This is used in conjunction with use_ip_aliases. It cannot be true if use_ip_aliases is true. If both use_ip_aliases and use_routes are false, then the server picks the default IP allocation mode
	UseRoutes pulumi.BoolPtrInput `pulumi:"useRoutes"`
}

func (IPAllocationPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IPAllocationPolicy)(nil)).Elem()
}

func (i IPAllocationPolicyArgs) ToIPAllocationPolicyOutput() IPAllocationPolicyOutput {
	return i.ToIPAllocationPolicyOutputWithContext(context.Background())
}

func (i IPAllocationPolicyArgs) ToIPAllocationPolicyOutputWithContext(ctx context.Context) IPAllocationPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPAllocationPolicyOutput)
}

func (i IPAllocationPolicyArgs) ToIPAllocationPolicyPtrOutput() IPAllocationPolicyPtrOutput {
	return i.ToIPAllocationPolicyPtrOutputWithContext(context.Background())
}

func (i IPAllocationPolicyArgs) ToIPAllocationPolicyPtrOutputWithContext(ctx context.Context) IPAllocationPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPAllocationPolicyOutput).ToIPAllocationPolicyPtrOutputWithContext(ctx)
}

// IPAllocationPolicyPtrInput is an input type that accepts IPAllocationPolicyArgs, IPAllocationPolicyPtr and IPAllocationPolicyPtrOutput values.
// You can construct a concrete instance of `IPAllocationPolicyPtrInput` via:
//
//          IPAllocationPolicyArgs{...}
//
//  or:
//
//          nil
type IPAllocationPolicyPtrInput interface {
	pulumi.Input

	ToIPAllocationPolicyPtrOutput() IPAllocationPolicyPtrOutput
	ToIPAllocationPolicyPtrOutputWithContext(context.Context) IPAllocationPolicyPtrOutput
}

type ipallocationPolicyPtrType IPAllocationPolicyArgs

func IPAllocationPolicyPtr(v *IPAllocationPolicyArgs) IPAllocationPolicyPtrInput {
	return (*ipallocationPolicyPtrType)(v)
}

func (*ipallocationPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IPAllocationPolicy)(nil)).Elem()
}

func (i *ipallocationPolicyPtrType) ToIPAllocationPolicyPtrOutput() IPAllocationPolicyPtrOutput {
	return i.ToIPAllocationPolicyPtrOutputWithContext(context.Background())
}

func (i *ipallocationPolicyPtrType) ToIPAllocationPolicyPtrOutputWithContext(ctx context.Context) IPAllocationPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPAllocationPolicyPtrOutput)
}

// Configuration for controlling how IPs are allocated in the cluster.
type IPAllocationPolicyOutput struct{ *pulumi.OutputState }

func (IPAllocationPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IPAllocationPolicy)(nil)).Elem()
}

func (o IPAllocationPolicyOutput) ToIPAllocationPolicyOutput() IPAllocationPolicyOutput {
	return o
}

func (o IPAllocationPolicyOutput) ToIPAllocationPolicyOutputWithContext(ctx context.Context) IPAllocationPolicyOutput {
	return o
}

func (o IPAllocationPolicyOutput) ToIPAllocationPolicyPtrOutput() IPAllocationPolicyPtrOutput {
	return o.ToIPAllocationPolicyPtrOutputWithContext(context.Background())
}

func (o IPAllocationPolicyOutput) ToIPAllocationPolicyPtrOutputWithContext(ctx context.Context) IPAllocationPolicyPtrOutput {
	return o.ApplyT(func(v IPAllocationPolicy) *IPAllocationPolicy {
		return &v
	}).(IPAllocationPolicyPtrOutput)
}

// The IP address range for the cluster pod IPs. If this field is set, then `cluster.cluster_ipv4_cidr` must be left blank. This field is only applicable when `use_ip_aliases` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
func (o IPAllocationPolicyOutput) ClusterIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPAllocationPolicy) *string { return v.ClusterIpv4CidrBlock }).(pulumi.StringPtrOutput)
}

// The name of the secondary range to be used for the cluster CIDR block. The secondary range will be used for pod IP addresses. This must be an existing secondary range associated with the cluster subnetwork. This field is only applicable with use_ip_aliases is true and create_subnetwork is false.
func (o IPAllocationPolicyOutput) ClusterSecondaryRangeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPAllocationPolicy) *string { return v.ClusterSecondaryRangeName }).(pulumi.StringPtrOutput)
}

// Whether a new subnetwork will be created automatically for the cluster. This field is only applicable when `use_ip_aliases` is true.
func (o IPAllocationPolicyOutput) CreateSubnetwork() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v IPAllocationPolicy) *bool { return v.CreateSubnetwork }).(pulumi.BoolPtrOutput)
}

// The IP address range of the instance IPs in this cluster. This is applicable only if `create_subnetwork` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
func (o IPAllocationPolicyOutput) NodeIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPAllocationPolicy) *string { return v.NodeIpv4CidrBlock }).(pulumi.StringPtrOutput)
}

// The IP address range of the services IPs in this cluster. If blank, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
func (o IPAllocationPolicyOutput) ServicesIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPAllocationPolicy) *string { return v.ServicesIpv4CidrBlock }).(pulumi.StringPtrOutput)
}

// The name of the secondary range to be used as for the services CIDR block. The secondary range will be used for service ClusterIPs. This must be an existing secondary range associated with the cluster subnetwork. This field is only applicable with use_ip_aliases is true and create_subnetwork is false.
func (o IPAllocationPolicyOutput) ServicesSecondaryRangeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPAllocationPolicy) *string { return v.ServicesSecondaryRangeName }).(pulumi.StringPtrOutput)
}

// A custom subnetwork name to be used if `create_subnetwork` is true. If this field is empty, then an automatic name will be chosen for the new subnetwork.
func (o IPAllocationPolicyOutput) SubnetworkName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPAllocationPolicy) *string { return v.SubnetworkName }).(pulumi.StringPtrOutput)
}

// The IP address range of the Cloud TPUs in this cluster. If unspecified, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. If unspecified, the range will use the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
func (o IPAllocationPolicyOutput) TpuIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPAllocationPolicy) *string { return v.TpuIpv4CidrBlock }).(pulumi.StringPtrOutput)
}

// Whether alias IPs will be used for pod IPs in the cluster. This is used in conjunction with use_routes. It cannot be true if use_routes is true. If both use_ip_aliases and use_routes are false, then the server picks the default IP allocation mode
func (o IPAllocationPolicyOutput) UseIpAliases() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v IPAllocationPolicy) *bool { return v.UseIpAliases }).(pulumi.BoolPtrOutput)
}

// Whether routes will be used for pod IPs in the cluster. This is used in conjunction with use_ip_aliases. It cannot be true if use_ip_aliases is true. If both use_ip_aliases and use_routes are false, then the server picks the default IP allocation mode
func (o IPAllocationPolicyOutput) UseRoutes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v IPAllocationPolicy) *bool { return v.UseRoutes }).(pulumi.BoolPtrOutput)
}

type IPAllocationPolicyPtrOutput struct{ *pulumi.OutputState }

func (IPAllocationPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IPAllocationPolicy)(nil)).Elem()
}

func (o IPAllocationPolicyPtrOutput) ToIPAllocationPolicyPtrOutput() IPAllocationPolicyPtrOutput {
	return o
}

func (o IPAllocationPolicyPtrOutput) ToIPAllocationPolicyPtrOutputWithContext(ctx context.Context) IPAllocationPolicyPtrOutput {
	return o
}

func (o IPAllocationPolicyPtrOutput) Elem() IPAllocationPolicyOutput {
	return o.ApplyT(func(v *IPAllocationPolicy) IPAllocationPolicy { return *v }).(IPAllocationPolicyOutput)
}

// The IP address range for the cluster pod IPs. If this field is set, then `cluster.cluster_ipv4_cidr` must be left blank. This field is only applicable when `use_ip_aliases` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
func (o IPAllocationPolicyPtrOutput) ClusterIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IPAllocationPolicy) *string {
		if v == nil {
			return nil
		}
		return v.ClusterIpv4CidrBlock
	}).(pulumi.StringPtrOutput)
}

// The name of the secondary range to be used for the cluster CIDR block. The secondary range will be used for pod IP addresses. This must be an existing secondary range associated with the cluster subnetwork. This field is only applicable with use_ip_aliases is true and create_subnetwork is false.
func (o IPAllocationPolicyPtrOutput) ClusterSecondaryRangeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IPAllocationPolicy) *string {
		if v == nil {
			return nil
		}
		return v.ClusterSecondaryRangeName
	}).(pulumi.StringPtrOutput)
}

// Whether a new subnetwork will be created automatically for the cluster. This field is only applicable when `use_ip_aliases` is true.
func (o IPAllocationPolicyPtrOutput) CreateSubnetwork() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IPAllocationPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.CreateSubnetwork
	}).(pulumi.BoolPtrOutput)
}

// The IP address range of the instance IPs in this cluster. This is applicable only if `create_subnetwork` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
func (o IPAllocationPolicyPtrOutput) NodeIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IPAllocationPolicy) *string {
		if v == nil {
			return nil
		}
		return v.NodeIpv4CidrBlock
	}).(pulumi.StringPtrOutput)
}

// The IP address range of the services IPs in this cluster. If blank, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
func (o IPAllocationPolicyPtrOutput) ServicesIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IPAllocationPolicy) *string {
		if v == nil {
			return nil
		}
		return v.ServicesIpv4CidrBlock
	}).(pulumi.StringPtrOutput)
}

// The name of the secondary range to be used as for the services CIDR block. The secondary range will be used for service ClusterIPs. This must be an existing secondary range associated with the cluster subnetwork. This field is only applicable with use_ip_aliases is true and create_subnetwork is false.
func (o IPAllocationPolicyPtrOutput) ServicesSecondaryRangeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IPAllocationPolicy) *string {
		if v == nil {
			return nil
		}
		return v.ServicesSecondaryRangeName
	}).(pulumi.StringPtrOutput)
}

// A custom subnetwork name to be used if `create_subnetwork` is true. If this field is empty, then an automatic name will be chosen for the new subnetwork.
func (o IPAllocationPolicyPtrOutput) SubnetworkName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IPAllocationPolicy) *string {
		if v == nil {
			return nil
		}
		return v.SubnetworkName
	}).(pulumi.StringPtrOutput)
}

// The IP address range of the Cloud TPUs in this cluster. If unspecified, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. If unspecified, the range will use the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
func (o IPAllocationPolicyPtrOutput) TpuIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IPAllocationPolicy) *string {
		if v == nil {
			return nil
		}
		return v.TpuIpv4CidrBlock
	}).(pulumi.StringPtrOutput)
}

// Whether alias IPs will be used for pod IPs in the cluster. This is used in conjunction with use_routes. It cannot be true if use_routes is true. If both use_ip_aliases and use_routes are false, then the server picks the default IP allocation mode
func (o IPAllocationPolicyPtrOutput) UseIpAliases() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IPAllocationPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.UseIpAliases
	}).(pulumi.BoolPtrOutput)
}

// Whether routes will be used for pod IPs in the cluster. This is used in conjunction with use_ip_aliases. It cannot be true if use_ip_aliases is true. If both use_ip_aliases and use_routes are false, then the server picks the default IP allocation mode
func (o IPAllocationPolicyPtrOutput) UseRoutes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IPAllocationPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.UseRoutes
	}).(pulumi.BoolPtrOutput)
}

// Configuration for controlling how IPs are allocated in the cluster.
type IPAllocationPolicyResponse struct {
	// The IP address range for the cluster pod IPs. If this field is set, then `cluster.cluster_ipv4_cidr` must be left blank. This field is only applicable when `use_ip_aliases` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
	ClusterIpv4CidrBlock string `pulumi:"clusterIpv4CidrBlock"`
	// The name of the secondary range to be used for the cluster CIDR block. The secondary range will be used for pod IP addresses. This must be an existing secondary range associated with the cluster subnetwork. This field is only applicable with use_ip_aliases is true and create_subnetwork is false.
	ClusterSecondaryRangeName string `pulumi:"clusterSecondaryRangeName"`
	// Whether a new subnetwork will be created automatically for the cluster. This field is only applicable when `use_ip_aliases` is true.
	CreateSubnetwork bool `pulumi:"createSubnetwork"`
	// The IP address range of the instance IPs in this cluster. This is applicable only if `create_subnetwork` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
	NodeIpv4CidrBlock string `pulumi:"nodeIpv4CidrBlock"`
	// The IP address range of the services IPs in this cluster. If blank, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
	ServicesIpv4CidrBlock string `pulumi:"servicesIpv4CidrBlock"`
	// The name of the secondary range to be used as for the services CIDR block. The secondary range will be used for service ClusterIPs. This must be an existing secondary range associated with the cluster subnetwork. This field is only applicable with use_ip_aliases is true and create_subnetwork is false.
	ServicesSecondaryRangeName string `pulumi:"servicesSecondaryRangeName"`
	// A custom subnetwork name to be used if `create_subnetwork` is true. If this field is empty, then an automatic name will be chosen for the new subnetwork.
	SubnetworkName string `pulumi:"subnetworkName"`
	// The IP address range of the Cloud TPUs in this cluster. If unspecified, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. If unspecified, the range will use the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
	TpuIpv4CidrBlock string `pulumi:"tpuIpv4CidrBlock"`
	// Whether alias IPs will be used for pod IPs in the cluster. This is used in conjunction with use_routes. It cannot be true if use_routes is true. If both use_ip_aliases and use_routes are false, then the server picks the default IP allocation mode
	UseIpAliases bool `pulumi:"useIpAliases"`
	// Whether routes will be used for pod IPs in the cluster. This is used in conjunction with use_ip_aliases. It cannot be true if use_ip_aliases is true. If both use_ip_aliases and use_routes are false, then the server picks the default IP allocation mode
	UseRoutes bool `pulumi:"useRoutes"`
}

// IPAllocationPolicyResponseInput is an input type that accepts IPAllocationPolicyResponseArgs and IPAllocationPolicyResponseOutput values.
// You can construct a concrete instance of `IPAllocationPolicyResponseInput` via:
//
//          IPAllocationPolicyResponseArgs{...}
type IPAllocationPolicyResponseInput interface {
	pulumi.Input

	ToIPAllocationPolicyResponseOutput() IPAllocationPolicyResponseOutput
	ToIPAllocationPolicyResponseOutputWithContext(context.Context) IPAllocationPolicyResponseOutput
}

// Configuration for controlling how IPs are allocated in the cluster.
type IPAllocationPolicyResponseArgs struct {
	// The IP address range for the cluster pod IPs. If this field is set, then `cluster.cluster_ipv4_cidr` must be left blank. This field is only applicable when `use_ip_aliases` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
	ClusterIpv4CidrBlock pulumi.StringInput `pulumi:"clusterIpv4CidrBlock"`
	// The name of the secondary range to be used for the cluster CIDR block. The secondary range will be used for pod IP addresses. This must be an existing secondary range associated with the cluster subnetwork. This field is only applicable with use_ip_aliases is true and create_subnetwork is false.
	ClusterSecondaryRangeName pulumi.StringInput `pulumi:"clusterSecondaryRangeName"`
	// Whether a new subnetwork will be created automatically for the cluster. This field is only applicable when `use_ip_aliases` is true.
	CreateSubnetwork pulumi.BoolInput `pulumi:"createSubnetwork"`
	// The IP address range of the instance IPs in this cluster. This is applicable only if `create_subnetwork` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
	NodeIpv4CidrBlock pulumi.StringInput `pulumi:"nodeIpv4CidrBlock"`
	// The IP address range of the services IPs in this cluster. If blank, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
	ServicesIpv4CidrBlock pulumi.StringInput `pulumi:"servicesIpv4CidrBlock"`
	// The name of the secondary range to be used as for the services CIDR block. The secondary range will be used for service ClusterIPs. This must be an existing secondary range associated with the cluster subnetwork. This field is only applicable with use_ip_aliases is true and create_subnetwork is false.
	ServicesSecondaryRangeName pulumi.StringInput `pulumi:"servicesSecondaryRangeName"`
	// A custom subnetwork name to be used if `create_subnetwork` is true. If this field is empty, then an automatic name will be chosen for the new subnetwork.
	SubnetworkName pulumi.StringInput `pulumi:"subnetworkName"`
	// The IP address range of the Cloud TPUs in this cluster. If unspecified, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. If unspecified, the range will use the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
	TpuIpv4CidrBlock pulumi.StringInput `pulumi:"tpuIpv4CidrBlock"`
	// Whether alias IPs will be used for pod IPs in the cluster. This is used in conjunction with use_routes. It cannot be true if use_routes is true. If both use_ip_aliases and use_routes are false, then the server picks the default IP allocation mode
	UseIpAliases pulumi.BoolInput `pulumi:"useIpAliases"`
	// Whether routes will be used for pod IPs in the cluster. This is used in conjunction with use_ip_aliases. It cannot be true if use_ip_aliases is true. If both use_ip_aliases and use_routes are false, then the server picks the default IP allocation mode
	UseRoutes pulumi.BoolInput `pulumi:"useRoutes"`
}

func (IPAllocationPolicyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IPAllocationPolicyResponse)(nil)).Elem()
}

func (i IPAllocationPolicyResponseArgs) ToIPAllocationPolicyResponseOutput() IPAllocationPolicyResponseOutput {
	return i.ToIPAllocationPolicyResponseOutputWithContext(context.Background())
}

func (i IPAllocationPolicyResponseArgs) ToIPAllocationPolicyResponseOutputWithContext(ctx context.Context) IPAllocationPolicyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPAllocationPolicyResponseOutput)
}

func (i IPAllocationPolicyResponseArgs) ToIPAllocationPolicyResponsePtrOutput() IPAllocationPolicyResponsePtrOutput {
	return i.ToIPAllocationPolicyResponsePtrOutputWithContext(context.Background())
}

func (i IPAllocationPolicyResponseArgs) ToIPAllocationPolicyResponsePtrOutputWithContext(ctx context.Context) IPAllocationPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPAllocationPolicyResponseOutput).ToIPAllocationPolicyResponsePtrOutputWithContext(ctx)
}

// IPAllocationPolicyResponsePtrInput is an input type that accepts IPAllocationPolicyResponseArgs, IPAllocationPolicyResponsePtr and IPAllocationPolicyResponsePtrOutput values.
// You can construct a concrete instance of `IPAllocationPolicyResponsePtrInput` via:
//
//          IPAllocationPolicyResponseArgs{...}
//
//  or:
//
//          nil
type IPAllocationPolicyResponsePtrInput interface {
	pulumi.Input

	ToIPAllocationPolicyResponsePtrOutput() IPAllocationPolicyResponsePtrOutput
	ToIPAllocationPolicyResponsePtrOutputWithContext(context.Context) IPAllocationPolicyResponsePtrOutput
}

type ipallocationPolicyResponsePtrType IPAllocationPolicyResponseArgs

func IPAllocationPolicyResponsePtr(v *IPAllocationPolicyResponseArgs) IPAllocationPolicyResponsePtrInput {
	return (*ipallocationPolicyResponsePtrType)(v)
}

func (*ipallocationPolicyResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IPAllocationPolicyResponse)(nil)).Elem()
}

func (i *ipallocationPolicyResponsePtrType) ToIPAllocationPolicyResponsePtrOutput() IPAllocationPolicyResponsePtrOutput {
	return i.ToIPAllocationPolicyResponsePtrOutputWithContext(context.Background())
}

func (i *ipallocationPolicyResponsePtrType) ToIPAllocationPolicyResponsePtrOutputWithContext(ctx context.Context) IPAllocationPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPAllocationPolicyResponsePtrOutput)
}

// Configuration for controlling how IPs are allocated in the cluster.
type IPAllocationPolicyResponseOutput struct{ *pulumi.OutputState }

func (IPAllocationPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IPAllocationPolicyResponse)(nil)).Elem()
}

func (o IPAllocationPolicyResponseOutput) ToIPAllocationPolicyResponseOutput() IPAllocationPolicyResponseOutput {
	return o
}

func (o IPAllocationPolicyResponseOutput) ToIPAllocationPolicyResponseOutputWithContext(ctx context.Context) IPAllocationPolicyResponseOutput {
	return o
}

func (o IPAllocationPolicyResponseOutput) ToIPAllocationPolicyResponsePtrOutput() IPAllocationPolicyResponsePtrOutput {
	return o.ToIPAllocationPolicyResponsePtrOutputWithContext(context.Background())
}

func (o IPAllocationPolicyResponseOutput) ToIPAllocationPolicyResponsePtrOutputWithContext(ctx context.Context) IPAllocationPolicyResponsePtrOutput {
	return o.ApplyT(func(v IPAllocationPolicyResponse) *IPAllocationPolicyResponse {
		return &v
	}).(IPAllocationPolicyResponsePtrOutput)
}

// The IP address range for the cluster pod IPs. If this field is set, then `cluster.cluster_ipv4_cidr` must be left blank. This field is only applicable when `use_ip_aliases` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
func (o IPAllocationPolicyResponseOutput) ClusterIpv4CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v IPAllocationPolicyResponse) string { return v.ClusterIpv4CidrBlock }).(pulumi.StringOutput)
}

// The name of the secondary range to be used for the cluster CIDR block. The secondary range will be used for pod IP addresses. This must be an existing secondary range associated with the cluster subnetwork. This field is only applicable with use_ip_aliases is true and create_subnetwork is false.
func (o IPAllocationPolicyResponseOutput) ClusterSecondaryRangeName() pulumi.StringOutput {
	return o.ApplyT(func(v IPAllocationPolicyResponse) string { return v.ClusterSecondaryRangeName }).(pulumi.StringOutput)
}

// Whether a new subnetwork will be created automatically for the cluster. This field is only applicable when `use_ip_aliases` is true.
func (o IPAllocationPolicyResponseOutput) CreateSubnetwork() pulumi.BoolOutput {
	return o.ApplyT(func(v IPAllocationPolicyResponse) bool { return v.CreateSubnetwork }).(pulumi.BoolOutput)
}

// The IP address range of the instance IPs in this cluster. This is applicable only if `create_subnetwork` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
func (o IPAllocationPolicyResponseOutput) NodeIpv4CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v IPAllocationPolicyResponse) string { return v.NodeIpv4CidrBlock }).(pulumi.StringOutput)
}

// The IP address range of the services IPs in this cluster. If blank, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
func (o IPAllocationPolicyResponseOutput) ServicesIpv4CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v IPAllocationPolicyResponse) string { return v.ServicesIpv4CidrBlock }).(pulumi.StringOutput)
}

// The name of the secondary range to be used as for the services CIDR block. The secondary range will be used for service ClusterIPs. This must be an existing secondary range associated with the cluster subnetwork. This field is only applicable with use_ip_aliases is true and create_subnetwork is false.
func (o IPAllocationPolicyResponseOutput) ServicesSecondaryRangeName() pulumi.StringOutput {
	return o.ApplyT(func(v IPAllocationPolicyResponse) string { return v.ServicesSecondaryRangeName }).(pulumi.StringOutput)
}

// A custom subnetwork name to be used if `create_subnetwork` is true. If this field is empty, then an automatic name will be chosen for the new subnetwork.
func (o IPAllocationPolicyResponseOutput) SubnetworkName() pulumi.StringOutput {
	return o.ApplyT(func(v IPAllocationPolicyResponse) string { return v.SubnetworkName }).(pulumi.StringOutput)
}

// The IP address range of the Cloud TPUs in this cluster. If unspecified, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. If unspecified, the range will use the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
func (o IPAllocationPolicyResponseOutput) TpuIpv4CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v IPAllocationPolicyResponse) string { return v.TpuIpv4CidrBlock }).(pulumi.StringOutput)
}

// Whether alias IPs will be used for pod IPs in the cluster. This is used in conjunction with use_routes. It cannot be true if use_routes is true. If both use_ip_aliases and use_routes are false, then the server picks the default IP allocation mode
func (o IPAllocationPolicyResponseOutput) UseIpAliases() pulumi.BoolOutput {
	return o.ApplyT(func(v IPAllocationPolicyResponse) bool { return v.UseIpAliases }).(pulumi.BoolOutput)
}

// Whether routes will be used for pod IPs in the cluster. This is used in conjunction with use_ip_aliases. It cannot be true if use_ip_aliases is true. If both use_ip_aliases and use_routes are false, then the server picks the default IP allocation mode
func (o IPAllocationPolicyResponseOutput) UseRoutes() pulumi.BoolOutput {
	return o.ApplyT(func(v IPAllocationPolicyResponse) bool { return v.UseRoutes }).(pulumi.BoolOutput)
}

type IPAllocationPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (IPAllocationPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IPAllocationPolicyResponse)(nil)).Elem()
}

func (o IPAllocationPolicyResponsePtrOutput) ToIPAllocationPolicyResponsePtrOutput() IPAllocationPolicyResponsePtrOutput {
	return o
}

func (o IPAllocationPolicyResponsePtrOutput) ToIPAllocationPolicyResponsePtrOutputWithContext(ctx context.Context) IPAllocationPolicyResponsePtrOutput {
	return o
}

func (o IPAllocationPolicyResponsePtrOutput) Elem() IPAllocationPolicyResponseOutput {
	return o.ApplyT(func(v *IPAllocationPolicyResponse) IPAllocationPolicyResponse { return *v }).(IPAllocationPolicyResponseOutput)
}

// The IP address range for the cluster pod IPs. If this field is set, then `cluster.cluster_ipv4_cidr` must be left blank. This field is only applicable when `use_ip_aliases` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
func (o IPAllocationPolicyResponsePtrOutput) ClusterIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IPAllocationPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ClusterIpv4CidrBlock
	}).(pulumi.StringPtrOutput)
}

// The name of the secondary range to be used for the cluster CIDR block. The secondary range will be used for pod IP addresses. This must be an existing secondary range associated with the cluster subnetwork. This field is only applicable with use_ip_aliases is true and create_subnetwork is false.
func (o IPAllocationPolicyResponsePtrOutput) ClusterSecondaryRangeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IPAllocationPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ClusterSecondaryRangeName
	}).(pulumi.StringPtrOutput)
}

// Whether a new subnetwork will be created automatically for the cluster. This field is only applicable when `use_ip_aliases` is true.
func (o IPAllocationPolicyResponsePtrOutput) CreateSubnetwork() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IPAllocationPolicyResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.CreateSubnetwork
	}).(pulumi.BoolPtrOutput)
}

// The IP address range of the instance IPs in this cluster. This is applicable only if `create_subnetwork` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
func (o IPAllocationPolicyResponsePtrOutput) NodeIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IPAllocationPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.NodeIpv4CidrBlock
	}).(pulumi.StringPtrOutput)
}

// The IP address range of the services IPs in this cluster. If blank, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
func (o IPAllocationPolicyResponsePtrOutput) ServicesIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IPAllocationPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ServicesIpv4CidrBlock
	}).(pulumi.StringPtrOutput)
}

// The name of the secondary range to be used as for the services CIDR block. The secondary range will be used for service ClusterIPs. This must be an existing secondary range associated with the cluster subnetwork. This field is only applicable with use_ip_aliases is true and create_subnetwork is false.
func (o IPAllocationPolicyResponsePtrOutput) ServicesSecondaryRangeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IPAllocationPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ServicesSecondaryRangeName
	}).(pulumi.StringPtrOutput)
}

// A custom subnetwork name to be used if `create_subnetwork` is true. If this field is empty, then an automatic name will be chosen for the new subnetwork.
func (o IPAllocationPolicyResponsePtrOutput) SubnetworkName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IPAllocationPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SubnetworkName
	}).(pulumi.StringPtrOutput)
}

// The IP address range of the Cloud TPUs in this cluster. If unspecified, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. If unspecified, the range will use the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
func (o IPAllocationPolicyResponsePtrOutput) TpuIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IPAllocationPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TpuIpv4CidrBlock
	}).(pulumi.StringPtrOutput)
}

// Whether alias IPs will be used for pod IPs in the cluster. This is used in conjunction with use_routes. It cannot be true if use_routes is true. If both use_ip_aliases and use_routes are false, then the server picks the default IP allocation mode
func (o IPAllocationPolicyResponsePtrOutput) UseIpAliases() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IPAllocationPolicyResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.UseIpAliases
	}).(pulumi.BoolPtrOutput)
}

// Whether routes will be used for pod IPs in the cluster. This is used in conjunction with use_ip_aliases. It cannot be true if use_ip_aliases is true. If both use_ip_aliases and use_routes are false, then the server picks the default IP allocation mode
func (o IPAllocationPolicyResponsePtrOutput) UseRoutes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IPAllocationPolicyResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.UseRoutes
	}).(pulumi.BoolPtrOutput)
}

// IntraNodeVisibilityConfig contains the desired config of the intra-node visibility on this cluster.
type IntraNodeVisibilityConfig struct {
	// Enables intra node visibility for this cluster.
	Enabled *bool `pulumi:"enabled"`
}

// IntraNodeVisibilityConfigInput is an input type that accepts IntraNodeVisibilityConfigArgs and IntraNodeVisibilityConfigOutput values.
// You can construct a concrete instance of `IntraNodeVisibilityConfigInput` via:
//
//          IntraNodeVisibilityConfigArgs{...}
type IntraNodeVisibilityConfigInput interface {
	pulumi.Input

	ToIntraNodeVisibilityConfigOutput() IntraNodeVisibilityConfigOutput
	ToIntraNodeVisibilityConfigOutputWithContext(context.Context) IntraNodeVisibilityConfigOutput
}

// IntraNodeVisibilityConfig contains the desired config of the intra-node visibility on this cluster.
type IntraNodeVisibilityConfigArgs struct {
	// Enables intra node visibility for this cluster.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (IntraNodeVisibilityConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntraNodeVisibilityConfig)(nil)).Elem()
}

func (i IntraNodeVisibilityConfigArgs) ToIntraNodeVisibilityConfigOutput() IntraNodeVisibilityConfigOutput {
	return i.ToIntraNodeVisibilityConfigOutputWithContext(context.Background())
}

func (i IntraNodeVisibilityConfigArgs) ToIntraNodeVisibilityConfigOutputWithContext(ctx context.Context) IntraNodeVisibilityConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntraNodeVisibilityConfigOutput)
}

func (i IntraNodeVisibilityConfigArgs) ToIntraNodeVisibilityConfigPtrOutput() IntraNodeVisibilityConfigPtrOutput {
	return i.ToIntraNodeVisibilityConfigPtrOutputWithContext(context.Background())
}

func (i IntraNodeVisibilityConfigArgs) ToIntraNodeVisibilityConfigPtrOutputWithContext(ctx context.Context) IntraNodeVisibilityConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntraNodeVisibilityConfigOutput).ToIntraNodeVisibilityConfigPtrOutputWithContext(ctx)
}

// IntraNodeVisibilityConfigPtrInput is an input type that accepts IntraNodeVisibilityConfigArgs, IntraNodeVisibilityConfigPtr and IntraNodeVisibilityConfigPtrOutput values.
// You can construct a concrete instance of `IntraNodeVisibilityConfigPtrInput` via:
//
//          IntraNodeVisibilityConfigArgs{...}
//
//  or:
//
//          nil
type IntraNodeVisibilityConfigPtrInput interface {
	pulumi.Input

	ToIntraNodeVisibilityConfigPtrOutput() IntraNodeVisibilityConfigPtrOutput
	ToIntraNodeVisibilityConfigPtrOutputWithContext(context.Context) IntraNodeVisibilityConfigPtrOutput
}

type intraNodeVisibilityConfigPtrType IntraNodeVisibilityConfigArgs

func IntraNodeVisibilityConfigPtr(v *IntraNodeVisibilityConfigArgs) IntraNodeVisibilityConfigPtrInput {
	return (*intraNodeVisibilityConfigPtrType)(v)
}

func (*intraNodeVisibilityConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntraNodeVisibilityConfig)(nil)).Elem()
}

func (i *intraNodeVisibilityConfigPtrType) ToIntraNodeVisibilityConfigPtrOutput() IntraNodeVisibilityConfigPtrOutput {
	return i.ToIntraNodeVisibilityConfigPtrOutputWithContext(context.Background())
}

func (i *intraNodeVisibilityConfigPtrType) ToIntraNodeVisibilityConfigPtrOutputWithContext(ctx context.Context) IntraNodeVisibilityConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntraNodeVisibilityConfigPtrOutput)
}

// IntraNodeVisibilityConfig contains the desired config of the intra-node visibility on this cluster.
type IntraNodeVisibilityConfigOutput struct{ *pulumi.OutputState }

func (IntraNodeVisibilityConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntraNodeVisibilityConfig)(nil)).Elem()
}

func (o IntraNodeVisibilityConfigOutput) ToIntraNodeVisibilityConfigOutput() IntraNodeVisibilityConfigOutput {
	return o
}

func (o IntraNodeVisibilityConfigOutput) ToIntraNodeVisibilityConfigOutputWithContext(ctx context.Context) IntraNodeVisibilityConfigOutput {
	return o
}

func (o IntraNodeVisibilityConfigOutput) ToIntraNodeVisibilityConfigPtrOutput() IntraNodeVisibilityConfigPtrOutput {
	return o.ToIntraNodeVisibilityConfigPtrOutputWithContext(context.Background())
}

func (o IntraNodeVisibilityConfigOutput) ToIntraNodeVisibilityConfigPtrOutputWithContext(ctx context.Context) IntraNodeVisibilityConfigPtrOutput {
	return o.ApplyT(func(v IntraNodeVisibilityConfig) *IntraNodeVisibilityConfig {
		return &v
	}).(IntraNodeVisibilityConfigPtrOutput)
}

// Enables intra node visibility for this cluster.
func (o IntraNodeVisibilityConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v IntraNodeVisibilityConfig) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type IntraNodeVisibilityConfigPtrOutput struct{ *pulumi.OutputState }

func (IntraNodeVisibilityConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntraNodeVisibilityConfig)(nil)).Elem()
}

func (o IntraNodeVisibilityConfigPtrOutput) ToIntraNodeVisibilityConfigPtrOutput() IntraNodeVisibilityConfigPtrOutput {
	return o
}

func (o IntraNodeVisibilityConfigPtrOutput) ToIntraNodeVisibilityConfigPtrOutputWithContext(ctx context.Context) IntraNodeVisibilityConfigPtrOutput {
	return o
}

func (o IntraNodeVisibilityConfigPtrOutput) Elem() IntraNodeVisibilityConfigOutput {
	return o.ApplyT(func(v *IntraNodeVisibilityConfig) IntraNodeVisibilityConfig { return *v }).(IntraNodeVisibilityConfigOutput)
}

// Enables intra node visibility for this cluster.
func (o IntraNodeVisibilityConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IntraNodeVisibilityConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Configuration for the Kubernetes Dashboard.
type KubernetesDashboard struct {
	// Whether the Kubernetes Dashboard is enabled for this cluster.
	Disabled *bool `pulumi:"disabled"`
}

// KubernetesDashboardInput is an input type that accepts KubernetesDashboardArgs and KubernetesDashboardOutput values.
// You can construct a concrete instance of `KubernetesDashboardInput` via:
//
//          KubernetesDashboardArgs{...}
type KubernetesDashboardInput interface {
	pulumi.Input

	ToKubernetesDashboardOutput() KubernetesDashboardOutput
	ToKubernetesDashboardOutputWithContext(context.Context) KubernetesDashboardOutput
}

// Configuration for the Kubernetes Dashboard.
type KubernetesDashboardArgs struct {
	// Whether the Kubernetes Dashboard is enabled for this cluster.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
}

func (KubernetesDashboardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesDashboard)(nil)).Elem()
}

func (i KubernetesDashboardArgs) ToKubernetesDashboardOutput() KubernetesDashboardOutput {
	return i.ToKubernetesDashboardOutputWithContext(context.Background())
}

func (i KubernetesDashboardArgs) ToKubernetesDashboardOutputWithContext(ctx context.Context) KubernetesDashboardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesDashboardOutput)
}

func (i KubernetesDashboardArgs) ToKubernetesDashboardPtrOutput() KubernetesDashboardPtrOutput {
	return i.ToKubernetesDashboardPtrOutputWithContext(context.Background())
}

func (i KubernetesDashboardArgs) ToKubernetesDashboardPtrOutputWithContext(ctx context.Context) KubernetesDashboardPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesDashboardOutput).ToKubernetesDashboardPtrOutputWithContext(ctx)
}

// KubernetesDashboardPtrInput is an input type that accepts KubernetesDashboardArgs, KubernetesDashboardPtr and KubernetesDashboardPtrOutput values.
// You can construct a concrete instance of `KubernetesDashboardPtrInput` via:
//
//          KubernetesDashboardArgs{...}
//
//  or:
//
//          nil
type KubernetesDashboardPtrInput interface {
	pulumi.Input

	ToKubernetesDashboardPtrOutput() KubernetesDashboardPtrOutput
	ToKubernetesDashboardPtrOutputWithContext(context.Context) KubernetesDashboardPtrOutput
}

type kubernetesDashboardPtrType KubernetesDashboardArgs

func KubernetesDashboardPtr(v *KubernetesDashboardArgs) KubernetesDashboardPtrInput {
	return (*kubernetesDashboardPtrType)(v)
}

func (*kubernetesDashboardPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesDashboard)(nil)).Elem()
}

func (i *kubernetesDashboardPtrType) ToKubernetesDashboardPtrOutput() KubernetesDashboardPtrOutput {
	return i.ToKubernetesDashboardPtrOutputWithContext(context.Background())
}

func (i *kubernetesDashboardPtrType) ToKubernetesDashboardPtrOutputWithContext(ctx context.Context) KubernetesDashboardPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesDashboardPtrOutput)
}

// Configuration for the Kubernetes Dashboard.
type KubernetesDashboardOutput struct{ *pulumi.OutputState }

func (KubernetesDashboardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesDashboard)(nil)).Elem()
}

func (o KubernetesDashboardOutput) ToKubernetesDashboardOutput() KubernetesDashboardOutput {
	return o
}

func (o KubernetesDashboardOutput) ToKubernetesDashboardOutputWithContext(ctx context.Context) KubernetesDashboardOutput {
	return o
}

func (o KubernetesDashboardOutput) ToKubernetesDashboardPtrOutput() KubernetesDashboardPtrOutput {
	return o.ToKubernetesDashboardPtrOutputWithContext(context.Background())
}

func (o KubernetesDashboardOutput) ToKubernetesDashboardPtrOutputWithContext(ctx context.Context) KubernetesDashboardPtrOutput {
	return o.ApplyT(func(v KubernetesDashboard) *KubernetesDashboard {
		return &v
	}).(KubernetesDashboardPtrOutput)
}

// Whether the Kubernetes Dashboard is enabled for this cluster.
func (o KubernetesDashboardOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KubernetesDashboard) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

type KubernetesDashboardPtrOutput struct{ *pulumi.OutputState }

func (KubernetesDashboardPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesDashboard)(nil)).Elem()
}

func (o KubernetesDashboardPtrOutput) ToKubernetesDashboardPtrOutput() KubernetesDashboardPtrOutput {
	return o
}

func (o KubernetesDashboardPtrOutput) ToKubernetesDashboardPtrOutputWithContext(ctx context.Context) KubernetesDashboardPtrOutput {
	return o
}

func (o KubernetesDashboardPtrOutput) Elem() KubernetesDashboardOutput {
	return o.ApplyT(func(v *KubernetesDashboard) KubernetesDashboard { return *v }).(KubernetesDashboardOutput)
}

// Whether the Kubernetes Dashboard is enabled for this cluster.
func (o KubernetesDashboardPtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubernetesDashboard) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// Configuration for the Kubernetes Dashboard.
type KubernetesDashboardResponse struct {
	// Whether the Kubernetes Dashboard is enabled for this cluster.
	Disabled bool `pulumi:"disabled"`
}

// KubernetesDashboardResponseInput is an input type that accepts KubernetesDashboardResponseArgs and KubernetesDashboardResponseOutput values.
// You can construct a concrete instance of `KubernetesDashboardResponseInput` via:
//
//          KubernetesDashboardResponseArgs{...}
type KubernetesDashboardResponseInput interface {
	pulumi.Input

	ToKubernetesDashboardResponseOutput() KubernetesDashboardResponseOutput
	ToKubernetesDashboardResponseOutputWithContext(context.Context) KubernetesDashboardResponseOutput
}

// Configuration for the Kubernetes Dashboard.
type KubernetesDashboardResponseArgs struct {
	// Whether the Kubernetes Dashboard is enabled for this cluster.
	Disabled pulumi.BoolInput `pulumi:"disabled"`
}

func (KubernetesDashboardResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesDashboardResponse)(nil)).Elem()
}

func (i KubernetesDashboardResponseArgs) ToKubernetesDashboardResponseOutput() KubernetesDashboardResponseOutput {
	return i.ToKubernetesDashboardResponseOutputWithContext(context.Background())
}

func (i KubernetesDashboardResponseArgs) ToKubernetesDashboardResponseOutputWithContext(ctx context.Context) KubernetesDashboardResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesDashboardResponseOutput)
}

func (i KubernetesDashboardResponseArgs) ToKubernetesDashboardResponsePtrOutput() KubernetesDashboardResponsePtrOutput {
	return i.ToKubernetesDashboardResponsePtrOutputWithContext(context.Background())
}

func (i KubernetesDashboardResponseArgs) ToKubernetesDashboardResponsePtrOutputWithContext(ctx context.Context) KubernetesDashboardResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesDashboardResponseOutput).ToKubernetesDashboardResponsePtrOutputWithContext(ctx)
}

// KubernetesDashboardResponsePtrInput is an input type that accepts KubernetesDashboardResponseArgs, KubernetesDashboardResponsePtr and KubernetesDashboardResponsePtrOutput values.
// You can construct a concrete instance of `KubernetesDashboardResponsePtrInput` via:
//
//          KubernetesDashboardResponseArgs{...}
//
//  or:
//
//          nil
type KubernetesDashboardResponsePtrInput interface {
	pulumi.Input

	ToKubernetesDashboardResponsePtrOutput() KubernetesDashboardResponsePtrOutput
	ToKubernetesDashboardResponsePtrOutputWithContext(context.Context) KubernetesDashboardResponsePtrOutput
}

type kubernetesDashboardResponsePtrType KubernetesDashboardResponseArgs

func KubernetesDashboardResponsePtr(v *KubernetesDashboardResponseArgs) KubernetesDashboardResponsePtrInput {
	return (*kubernetesDashboardResponsePtrType)(v)
}

func (*kubernetesDashboardResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesDashboardResponse)(nil)).Elem()
}

func (i *kubernetesDashboardResponsePtrType) ToKubernetesDashboardResponsePtrOutput() KubernetesDashboardResponsePtrOutput {
	return i.ToKubernetesDashboardResponsePtrOutputWithContext(context.Background())
}

func (i *kubernetesDashboardResponsePtrType) ToKubernetesDashboardResponsePtrOutputWithContext(ctx context.Context) KubernetesDashboardResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesDashboardResponsePtrOutput)
}

// Configuration for the Kubernetes Dashboard.
type KubernetesDashboardResponseOutput struct{ *pulumi.OutputState }

func (KubernetesDashboardResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesDashboardResponse)(nil)).Elem()
}

func (o KubernetesDashboardResponseOutput) ToKubernetesDashboardResponseOutput() KubernetesDashboardResponseOutput {
	return o
}

func (o KubernetesDashboardResponseOutput) ToKubernetesDashboardResponseOutputWithContext(ctx context.Context) KubernetesDashboardResponseOutput {
	return o
}

func (o KubernetesDashboardResponseOutput) ToKubernetesDashboardResponsePtrOutput() KubernetesDashboardResponsePtrOutput {
	return o.ToKubernetesDashboardResponsePtrOutputWithContext(context.Background())
}

func (o KubernetesDashboardResponseOutput) ToKubernetesDashboardResponsePtrOutputWithContext(ctx context.Context) KubernetesDashboardResponsePtrOutput {
	return o.ApplyT(func(v KubernetesDashboardResponse) *KubernetesDashboardResponse {
		return &v
	}).(KubernetesDashboardResponsePtrOutput)
}

// Whether the Kubernetes Dashboard is enabled for this cluster.
func (o KubernetesDashboardResponseOutput) Disabled() pulumi.BoolOutput {
	return o.ApplyT(func(v KubernetesDashboardResponse) bool { return v.Disabled }).(pulumi.BoolOutput)
}

type KubernetesDashboardResponsePtrOutput struct{ *pulumi.OutputState }

func (KubernetesDashboardResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesDashboardResponse)(nil)).Elem()
}

func (o KubernetesDashboardResponsePtrOutput) ToKubernetesDashboardResponsePtrOutput() KubernetesDashboardResponsePtrOutput {
	return o
}

func (o KubernetesDashboardResponsePtrOutput) ToKubernetesDashboardResponsePtrOutputWithContext(ctx context.Context) KubernetesDashboardResponsePtrOutput {
	return o
}

func (o KubernetesDashboardResponsePtrOutput) Elem() KubernetesDashboardResponseOutput {
	return o.ApplyT(func(v *KubernetesDashboardResponse) KubernetesDashboardResponse { return *v }).(KubernetesDashboardResponseOutput)
}

// Whether the Kubernetes Dashboard is enabled for this cluster.
func (o KubernetesDashboardResponsePtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubernetesDashboardResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// Configuration for the legacy Attribute Based Access Control authorization mode.
type LegacyAbac struct {
	// Whether the ABAC authorizer is enabled for this cluster. When enabled, identities in the system, including service accounts, nodes, and controllers, will have statically granted permissions beyond those provided by the RBAC configuration or IAM.
	Enabled *bool `pulumi:"enabled"`
}

// LegacyAbacInput is an input type that accepts LegacyAbacArgs and LegacyAbacOutput values.
// You can construct a concrete instance of `LegacyAbacInput` via:
//
//          LegacyAbacArgs{...}
type LegacyAbacInput interface {
	pulumi.Input

	ToLegacyAbacOutput() LegacyAbacOutput
	ToLegacyAbacOutputWithContext(context.Context) LegacyAbacOutput
}

// Configuration for the legacy Attribute Based Access Control authorization mode.
type LegacyAbacArgs struct {
	// Whether the ABAC authorizer is enabled for this cluster. When enabled, identities in the system, including service accounts, nodes, and controllers, will have statically granted permissions beyond those provided by the RBAC configuration or IAM.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (LegacyAbacArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LegacyAbac)(nil)).Elem()
}

func (i LegacyAbacArgs) ToLegacyAbacOutput() LegacyAbacOutput {
	return i.ToLegacyAbacOutputWithContext(context.Background())
}

func (i LegacyAbacArgs) ToLegacyAbacOutputWithContext(ctx context.Context) LegacyAbacOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LegacyAbacOutput)
}

func (i LegacyAbacArgs) ToLegacyAbacPtrOutput() LegacyAbacPtrOutput {
	return i.ToLegacyAbacPtrOutputWithContext(context.Background())
}

func (i LegacyAbacArgs) ToLegacyAbacPtrOutputWithContext(ctx context.Context) LegacyAbacPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LegacyAbacOutput).ToLegacyAbacPtrOutputWithContext(ctx)
}

// LegacyAbacPtrInput is an input type that accepts LegacyAbacArgs, LegacyAbacPtr and LegacyAbacPtrOutput values.
// You can construct a concrete instance of `LegacyAbacPtrInput` via:
//
//          LegacyAbacArgs{...}
//
//  or:
//
//          nil
type LegacyAbacPtrInput interface {
	pulumi.Input

	ToLegacyAbacPtrOutput() LegacyAbacPtrOutput
	ToLegacyAbacPtrOutputWithContext(context.Context) LegacyAbacPtrOutput
}

type legacyAbacPtrType LegacyAbacArgs

func LegacyAbacPtr(v *LegacyAbacArgs) LegacyAbacPtrInput {
	return (*legacyAbacPtrType)(v)
}

func (*legacyAbacPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LegacyAbac)(nil)).Elem()
}

func (i *legacyAbacPtrType) ToLegacyAbacPtrOutput() LegacyAbacPtrOutput {
	return i.ToLegacyAbacPtrOutputWithContext(context.Background())
}

func (i *legacyAbacPtrType) ToLegacyAbacPtrOutputWithContext(ctx context.Context) LegacyAbacPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LegacyAbacPtrOutput)
}

// Configuration for the legacy Attribute Based Access Control authorization mode.
type LegacyAbacOutput struct{ *pulumi.OutputState }

func (LegacyAbacOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LegacyAbac)(nil)).Elem()
}

func (o LegacyAbacOutput) ToLegacyAbacOutput() LegacyAbacOutput {
	return o
}

func (o LegacyAbacOutput) ToLegacyAbacOutputWithContext(ctx context.Context) LegacyAbacOutput {
	return o
}

func (o LegacyAbacOutput) ToLegacyAbacPtrOutput() LegacyAbacPtrOutput {
	return o.ToLegacyAbacPtrOutputWithContext(context.Background())
}

func (o LegacyAbacOutput) ToLegacyAbacPtrOutputWithContext(ctx context.Context) LegacyAbacPtrOutput {
	return o.ApplyT(func(v LegacyAbac) *LegacyAbac {
		return &v
	}).(LegacyAbacPtrOutput)
}

// Whether the ABAC authorizer is enabled for this cluster. When enabled, identities in the system, including service accounts, nodes, and controllers, will have statically granted permissions beyond those provided by the RBAC configuration or IAM.
func (o LegacyAbacOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LegacyAbac) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type LegacyAbacPtrOutput struct{ *pulumi.OutputState }

func (LegacyAbacPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LegacyAbac)(nil)).Elem()
}

func (o LegacyAbacPtrOutput) ToLegacyAbacPtrOutput() LegacyAbacPtrOutput {
	return o
}

func (o LegacyAbacPtrOutput) ToLegacyAbacPtrOutputWithContext(ctx context.Context) LegacyAbacPtrOutput {
	return o
}

func (o LegacyAbacPtrOutput) Elem() LegacyAbacOutput {
	return o.ApplyT(func(v *LegacyAbac) LegacyAbac { return *v }).(LegacyAbacOutput)
}

// Whether the ABAC authorizer is enabled for this cluster. When enabled, identities in the system, including service accounts, nodes, and controllers, will have statically granted permissions beyond those provided by the RBAC configuration or IAM.
func (o LegacyAbacPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LegacyAbac) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Configuration for the legacy Attribute Based Access Control authorization mode.
type LegacyAbacResponse struct {
	// Whether the ABAC authorizer is enabled for this cluster. When enabled, identities in the system, including service accounts, nodes, and controllers, will have statically granted permissions beyond those provided by the RBAC configuration or IAM.
	Enabled bool `pulumi:"enabled"`
}

// LegacyAbacResponseInput is an input type that accepts LegacyAbacResponseArgs and LegacyAbacResponseOutput values.
// You can construct a concrete instance of `LegacyAbacResponseInput` via:
//
//          LegacyAbacResponseArgs{...}
type LegacyAbacResponseInput interface {
	pulumi.Input

	ToLegacyAbacResponseOutput() LegacyAbacResponseOutput
	ToLegacyAbacResponseOutputWithContext(context.Context) LegacyAbacResponseOutput
}

// Configuration for the legacy Attribute Based Access Control authorization mode.
type LegacyAbacResponseArgs struct {
	// Whether the ABAC authorizer is enabled for this cluster. When enabled, identities in the system, including service accounts, nodes, and controllers, will have statically granted permissions beyond those provided by the RBAC configuration or IAM.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

func (LegacyAbacResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LegacyAbacResponse)(nil)).Elem()
}

func (i LegacyAbacResponseArgs) ToLegacyAbacResponseOutput() LegacyAbacResponseOutput {
	return i.ToLegacyAbacResponseOutputWithContext(context.Background())
}

func (i LegacyAbacResponseArgs) ToLegacyAbacResponseOutputWithContext(ctx context.Context) LegacyAbacResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LegacyAbacResponseOutput)
}

func (i LegacyAbacResponseArgs) ToLegacyAbacResponsePtrOutput() LegacyAbacResponsePtrOutput {
	return i.ToLegacyAbacResponsePtrOutputWithContext(context.Background())
}

func (i LegacyAbacResponseArgs) ToLegacyAbacResponsePtrOutputWithContext(ctx context.Context) LegacyAbacResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LegacyAbacResponseOutput).ToLegacyAbacResponsePtrOutputWithContext(ctx)
}

// LegacyAbacResponsePtrInput is an input type that accepts LegacyAbacResponseArgs, LegacyAbacResponsePtr and LegacyAbacResponsePtrOutput values.
// You can construct a concrete instance of `LegacyAbacResponsePtrInput` via:
//
//          LegacyAbacResponseArgs{...}
//
//  or:
//
//          nil
type LegacyAbacResponsePtrInput interface {
	pulumi.Input

	ToLegacyAbacResponsePtrOutput() LegacyAbacResponsePtrOutput
	ToLegacyAbacResponsePtrOutputWithContext(context.Context) LegacyAbacResponsePtrOutput
}

type legacyAbacResponsePtrType LegacyAbacResponseArgs

func LegacyAbacResponsePtr(v *LegacyAbacResponseArgs) LegacyAbacResponsePtrInput {
	return (*legacyAbacResponsePtrType)(v)
}

func (*legacyAbacResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LegacyAbacResponse)(nil)).Elem()
}

func (i *legacyAbacResponsePtrType) ToLegacyAbacResponsePtrOutput() LegacyAbacResponsePtrOutput {
	return i.ToLegacyAbacResponsePtrOutputWithContext(context.Background())
}

func (i *legacyAbacResponsePtrType) ToLegacyAbacResponsePtrOutputWithContext(ctx context.Context) LegacyAbacResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LegacyAbacResponsePtrOutput)
}

// Configuration for the legacy Attribute Based Access Control authorization mode.
type LegacyAbacResponseOutput struct{ *pulumi.OutputState }

func (LegacyAbacResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LegacyAbacResponse)(nil)).Elem()
}

func (o LegacyAbacResponseOutput) ToLegacyAbacResponseOutput() LegacyAbacResponseOutput {
	return o
}

func (o LegacyAbacResponseOutput) ToLegacyAbacResponseOutputWithContext(ctx context.Context) LegacyAbacResponseOutput {
	return o
}

func (o LegacyAbacResponseOutput) ToLegacyAbacResponsePtrOutput() LegacyAbacResponsePtrOutput {
	return o.ToLegacyAbacResponsePtrOutputWithContext(context.Background())
}

func (o LegacyAbacResponseOutput) ToLegacyAbacResponsePtrOutputWithContext(ctx context.Context) LegacyAbacResponsePtrOutput {
	return o.ApplyT(func(v LegacyAbacResponse) *LegacyAbacResponse {
		return &v
	}).(LegacyAbacResponsePtrOutput)
}

// Whether the ABAC authorizer is enabled for this cluster. When enabled, identities in the system, including service accounts, nodes, and controllers, will have statically granted permissions beyond those provided by the RBAC configuration or IAM.
func (o LegacyAbacResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LegacyAbacResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type LegacyAbacResponsePtrOutput struct{ *pulumi.OutputState }

func (LegacyAbacResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LegacyAbacResponse)(nil)).Elem()
}

func (o LegacyAbacResponsePtrOutput) ToLegacyAbacResponsePtrOutput() LegacyAbacResponsePtrOutput {
	return o
}

func (o LegacyAbacResponsePtrOutput) ToLegacyAbacResponsePtrOutputWithContext(ctx context.Context) LegacyAbacResponsePtrOutput {
	return o
}

func (o LegacyAbacResponsePtrOutput) Elem() LegacyAbacResponseOutput {
	return o.ApplyT(func(v *LegacyAbacResponse) LegacyAbacResponse { return *v }).(LegacyAbacResponseOutput)
}

// Whether the ABAC authorizer is enabled for this cluster. When enabled, identities in the system, including service accounts, nodes, and controllers, will have statically granted permissions beyond those provided by the RBAC configuration or IAM.
func (o LegacyAbacResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LegacyAbacResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Parameters that can be configured on Linux nodes.
type LinuxNodeConfig struct {
	// The Linux kernel parameters to be applied to the nodes and all pods running on the nodes. The following parameters are supported. net.core.netdev_max_backlog net.core.rmem_max net.core.wmem_default net.core.wmem_max net.core.optmem_max net.core.somaxconn net.ipv4.tcp_rmem net.ipv4.tcp_wmem net.ipv4.tcp_tw_reuse
	Sysctls map[string]string `pulumi:"sysctls"`
}

// LinuxNodeConfigInput is an input type that accepts LinuxNodeConfigArgs and LinuxNodeConfigOutput values.
// You can construct a concrete instance of `LinuxNodeConfigInput` via:
//
//          LinuxNodeConfigArgs{...}
type LinuxNodeConfigInput interface {
	pulumi.Input

	ToLinuxNodeConfigOutput() LinuxNodeConfigOutput
	ToLinuxNodeConfigOutputWithContext(context.Context) LinuxNodeConfigOutput
}

// Parameters that can be configured on Linux nodes.
type LinuxNodeConfigArgs struct {
	// The Linux kernel parameters to be applied to the nodes and all pods running on the nodes. The following parameters are supported. net.core.netdev_max_backlog net.core.rmem_max net.core.wmem_default net.core.wmem_max net.core.optmem_max net.core.somaxconn net.ipv4.tcp_rmem net.ipv4.tcp_wmem net.ipv4.tcp_tw_reuse
	Sysctls pulumi.StringMapInput `pulumi:"sysctls"`
}

func (LinuxNodeConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinuxNodeConfig)(nil)).Elem()
}

func (i LinuxNodeConfigArgs) ToLinuxNodeConfigOutput() LinuxNodeConfigOutput {
	return i.ToLinuxNodeConfigOutputWithContext(context.Background())
}

func (i LinuxNodeConfigArgs) ToLinuxNodeConfigOutputWithContext(ctx context.Context) LinuxNodeConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxNodeConfigOutput)
}

func (i LinuxNodeConfigArgs) ToLinuxNodeConfigPtrOutput() LinuxNodeConfigPtrOutput {
	return i.ToLinuxNodeConfigPtrOutputWithContext(context.Background())
}

func (i LinuxNodeConfigArgs) ToLinuxNodeConfigPtrOutputWithContext(ctx context.Context) LinuxNodeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxNodeConfigOutput).ToLinuxNodeConfigPtrOutputWithContext(ctx)
}

// LinuxNodeConfigPtrInput is an input type that accepts LinuxNodeConfigArgs, LinuxNodeConfigPtr and LinuxNodeConfigPtrOutput values.
// You can construct a concrete instance of `LinuxNodeConfigPtrInput` via:
//
//          LinuxNodeConfigArgs{...}
//
//  or:
//
//          nil
type LinuxNodeConfigPtrInput interface {
	pulumi.Input

	ToLinuxNodeConfigPtrOutput() LinuxNodeConfigPtrOutput
	ToLinuxNodeConfigPtrOutputWithContext(context.Context) LinuxNodeConfigPtrOutput
}

type linuxNodeConfigPtrType LinuxNodeConfigArgs

func LinuxNodeConfigPtr(v *LinuxNodeConfigArgs) LinuxNodeConfigPtrInput {
	return (*linuxNodeConfigPtrType)(v)
}

func (*linuxNodeConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LinuxNodeConfig)(nil)).Elem()
}

func (i *linuxNodeConfigPtrType) ToLinuxNodeConfigPtrOutput() LinuxNodeConfigPtrOutput {
	return i.ToLinuxNodeConfigPtrOutputWithContext(context.Background())
}

func (i *linuxNodeConfigPtrType) ToLinuxNodeConfigPtrOutputWithContext(ctx context.Context) LinuxNodeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxNodeConfigPtrOutput)
}

// Parameters that can be configured on Linux nodes.
type LinuxNodeConfigOutput struct{ *pulumi.OutputState }

func (LinuxNodeConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinuxNodeConfig)(nil)).Elem()
}

func (o LinuxNodeConfigOutput) ToLinuxNodeConfigOutput() LinuxNodeConfigOutput {
	return o
}

func (o LinuxNodeConfigOutput) ToLinuxNodeConfigOutputWithContext(ctx context.Context) LinuxNodeConfigOutput {
	return o
}

func (o LinuxNodeConfigOutput) ToLinuxNodeConfigPtrOutput() LinuxNodeConfigPtrOutput {
	return o.ToLinuxNodeConfigPtrOutputWithContext(context.Background())
}

func (o LinuxNodeConfigOutput) ToLinuxNodeConfigPtrOutputWithContext(ctx context.Context) LinuxNodeConfigPtrOutput {
	return o.ApplyT(func(v LinuxNodeConfig) *LinuxNodeConfig {
		return &v
	}).(LinuxNodeConfigPtrOutput)
}

// The Linux kernel parameters to be applied to the nodes and all pods running on the nodes. The following parameters are supported. net.core.netdev_max_backlog net.core.rmem_max net.core.wmem_default net.core.wmem_max net.core.optmem_max net.core.somaxconn net.ipv4.tcp_rmem net.ipv4.tcp_wmem net.ipv4.tcp_tw_reuse
func (o LinuxNodeConfigOutput) Sysctls() pulumi.StringMapOutput {
	return o.ApplyT(func(v LinuxNodeConfig) map[string]string { return v.Sysctls }).(pulumi.StringMapOutput)
}

type LinuxNodeConfigPtrOutput struct{ *pulumi.OutputState }

func (LinuxNodeConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinuxNodeConfig)(nil)).Elem()
}

func (o LinuxNodeConfigPtrOutput) ToLinuxNodeConfigPtrOutput() LinuxNodeConfigPtrOutput {
	return o
}

func (o LinuxNodeConfigPtrOutput) ToLinuxNodeConfigPtrOutputWithContext(ctx context.Context) LinuxNodeConfigPtrOutput {
	return o
}

func (o LinuxNodeConfigPtrOutput) Elem() LinuxNodeConfigOutput {
	return o.ApplyT(func(v *LinuxNodeConfig) LinuxNodeConfig { return *v }).(LinuxNodeConfigOutput)
}

// The Linux kernel parameters to be applied to the nodes and all pods running on the nodes. The following parameters are supported. net.core.netdev_max_backlog net.core.rmem_max net.core.wmem_default net.core.wmem_max net.core.optmem_max net.core.somaxconn net.ipv4.tcp_rmem net.ipv4.tcp_wmem net.ipv4.tcp_tw_reuse
func (o LinuxNodeConfigPtrOutput) Sysctls() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LinuxNodeConfig) map[string]string {
		if v == nil {
			return nil
		}
		return v.Sysctls
	}).(pulumi.StringMapOutput)
}

// Parameters that can be configured on Linux nodes.
type LinuxNodeConfigResponse struct {
	// The Linux kernel parameters to be applied to the nodes and all pods running on the nodes. The following parameters are supported. net.core.netdev_max_backlog net.core.rmem_max net.core.wmem_default net.core.wmem_max net.core.optmem_max net.core.somaxconn net.ipv4.tcp_rmem net.ipv4.tcp_wmem net.ipv4.tcp_tw_reuse
	Sysctls map[string]string `pulumi:"sysctls"`
}

// LinuxNodeConfigResponseInput is an input type that accepts LinuxNodeConfigResponseArgs and LinuxNodeConfigResponseOutput values.
// You can construct a concrete instance of `LinuxNodeConfigResponseInput` via:
//
//          LinuxNodeConfigResponseArgs{...}
type LinuxNodeConfigResponseInput interface {
	pulumi.Input

	ToLinuxNodeConfigResponseOutput() LinuxNodeConfigResponseOutput
	ToLinuxNodeConfigResponseOutputWithContext(context.Context) LinuxNodeConfigResponseOutput
}

// Parameters that can be configured on Linux nodes.
type LinuxNodeConfigResponseArgs struct {
	// The Linux kernel parameters to be applied to the nodes and all pods running on the nodes. The following parameters are supported. net.core.netdev_max_backlog net.core.rmem_max net.core.wmem_default net.core.wmem_max net.core.optmem_max net.core.somaxconn net.ipv4.tcp_rmem net.ipv4.tcp_wmem net.ipv4.tcp_tw_reuse
	Sysctls pulumi.StringMapInput `pulumi:"sysctls"`
}

func (LinuxNodeConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinuxNodeConfigResponse)(nil)).Elem()
}

func (i LinuxNodeConfigResponseArgs) ToLinuxNodeConfigResponseOutput() LinuxNodeConfigResponseOutput {
	return i.ToLinuxNodeConfigResponseOutputWithContext(context.Background())
}

func (i LinuxNodeConfigResponseArgs) ToLinuxNodeConfigResponseOutputWithContext(ctx context.Context) LinuxNodeConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxNodeConfigResponseOutput)
}

func (i LinuxNodeConfigResponseArgs) ToLinuxNodeConfigResponsePtrOutput() LinuxNodeConfigResponsePtrOutput {
	return i.ToLinuxNodeConfigResponsePtrOutputWithContext(context.Background())
}

func (i LinuxNodeConfigResponseArgs) ToLinuxNodeConfigResponsePtrOutputWithContext(ctx context.Context) LinuxNodeConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxNodeConfigResponseOutput).ToLinuxNodeConfigResponsePtrOutputWithContext(ctx)
}

// LinuxNodeConfigResponsePtrInput is an input type that accepts LinuxNodeConfigResponseArgs, LinuxNodeConfigResponsePtr and LinuxNodeConfigResponsePtrOutput values.
// You can construct a concrete instance of `LinuxNodeConfigResponsePtrInput` via:
//
//          LinuxNodeConfigResponseArgs{...}
//
//  or:
//
//          nil
type LinuxNodeConfigResponsePtrInput interface {
	pulumi.Input

	ToLinuxNodeConfigResponsePtrOutput() LinuxNodeConfigResponsePtrOutput
	ToLinuxNodeConfigResponsePtrOutputWithContext(context.Context) LinuxNodeConfigResponsePtrOutput
}

type linuxNodeConfigResponsePtrType LinuxNodeConfigResponseArgs

func LinuxNodeConfigResponsePtr(v *LinuxNodeConfigResponseArgs) LinuxNodeConfigResponsePtrInput {
	return (*linuxNodeConfigResponsePtrType)(v)
}

func (*linuxNodeConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LinuxNodeConfigResponse)(nil)).Elem()
}

func (i *linuxNodeConfigResponsePtrType) ToLinuxNodeConfigResponsePtrOutput() LinuxNodeConfigResponsePtrOutput {
	return i.ToLinuxNodeConfigResponsePtrOutputWithContext(context.Background())
}

func (i *linuxNodeConfigResponsePtrType) ToLinuxNodeConfigResponsePtrOutputWithContext(ctx context.Context) LinuxNodeConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxNodeConfigResponsePtrOutput)
}

// Parameters that can be configured on Linux nodes.
type LinuxNodeConfigResponseOutput struct{ *pulumi.OutputState }

func (LinuxNodeConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinuxNodeConfigResponse)(nil)).Elem()
}

func (o LinuxNodeConfigResponseOutput) ToLinuxNodeConfigResponseOutput() LinuxNodeConfigResponseOutput {
	return o
}

func (o LinuxNodeConfigResponseOutput) ToLinuxNodeConfigResponseOutputWithContext(ctx context.Context) LinuxNodeConfigResponseOutput {
	return o
}

func (o LinuxNodeConfigResponseOutput) ToLinuxNodeConfigResponsePtrOutput() LinuxNodeConfigResponsePtrOutput {
	return o.ToLinuxNodeConfigResponsePtrOutputWithContext(context.Background())
}

func (o LinuxNodeConfigResponseOutput) ToLinuxNodeConfigResponsePtrOutputWithContext(ctx context.Context) LinuxNodeConfigResponsePtrOutput {
	return o.ApplyT(func(v LinuxNodeConfigResponse) *LinuxNodeConfigResponse {
		return &v
	}).(LinuxNodeConfigResponsePtrOutput)
}

// The Linux kernel parameters to be applied to the nodes and all pods running on the nodes. The following parameters are supported. net.core.netdev_max_backlog net.core.rmem_max net.core.wmem_default net.core.wmem_max net.core.optmem_max net.core.somaxconn net.ipv4.tcp_rmem net.ipv4.tcp_wmem net.ipv4.tcp_tw_reuse
func (o LinuxNodeConfigResponseOutput) Sysctls() pulumi.StringMapOutput {
	return o.ApplyT(func(v LinuxNodeConfigResponse) map[string]string { return v.Sysctls }).(pulumi.StringMapOutput)
}

type LinuxNodeConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (LinuxNodeConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinuxNodeConfigResponse)(nil)).Elem()
}

func (o LinuxNodeConfigResponsePtrOutput) ToLinuxNodeConfigResponsePtrOutput() LinuxNodeConfigResponsePtrOutput {
	return o
}

func (o LinuxNodeConfigResponsePtrOutput) ToLinuxNodeConfigResponsePtrOutputWithContext(ctx context.Context) LinuxNodeConfigResponsePtrOutput {
	return o
}

func (o LinuxNodeConfigResponsePtrOutput) Elem() LinuxNodeConfigResponseOutput {
	return o.ApplyT(func(v *LinuxNodeConfigResponse) LinuxNodeConfigResponse { return *v }).(LinuxNodeConfigResponseOutput)
}

// The Linux kernel parameters to be applied to the nodes and all pods running on the nodes. The following parameters are supported. net.core.netdev_max_backlog net.core.rmem_max net.core.wmem_default net.core.wmem_max net.core.optmem_max net.core.somaxconn net.ipv4.tcp_rmem net.ipv4.tcp_wmem net.ipv4.tcp_tw_reuse
func (o LinuxNodeConfigResponsePtrOutput) Sysctls() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LinuxNodeConfigResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Sysctls
	}).(pulumi.StringMapOutput)
}

// MaintenancePolicy defines the maintenance policy to be used for the cluster.
type MaintenancePolicy struct {
	// A hash identifying the version of this policy, so that updates to fields of the policy won't accidentally undo intermediate changes (and so that users of the API unaware of some fields won't accidentally remove other fields). Make a `get()` request to the cluster to get the current resource version and include it with requests to set the policy.
	ResourceVersion *string `pulumi:"resourceVersion"`
	// Specifies the maintenance window in which maintenance may be performed.
	Window *MaintenanceWindow `pulumi:"window"`
}

// MaintenancePolicyInput is an input type that accepts MaintenancePolicyArgs and MaintenancePolicyOutput values.
// You can construct a concrete instance of `MaintenancePolicyInput` via:
//
//          MaintenancePolicyArgs{...}
type MaintenancePolicyInput interface {
	pulumi.Input

	ToMaintenancePolicyOutput() MaintenancePolicyOutput
	ToMaintenancePolicyOutputWithContext(context.Context) MaintenancePolicyOutput
}

// MaintenancePolicy defines the maintenance policy to be used for the cluster.
type MaintenancePolicyArgs struct {
	// A hash identifying the version of this policy, so that updates to fields of the policy won't accidentally undo intermediate changes (and so that users of the API unaware of some fields won't accidentally remove other fields). Make a `get()` request to the cluster to get the current resource version and include it with requests to set the policy.
	ResourceVersion pulumi.StringPtrInput `pulumi:"resourceVersion"`
	// Specifies the maintenance window in which maintenance may be performed.
	Window MaintenanceWindowPtrInput `pulumi:"window"`
}

func (MaintenancePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenancePolicy)(nil)).Elem()
}

func (i MaintenancePolicyArgs) ToMaintenancePolicyOutput() MaintenancePolicyOutput {
	return i.ToMaintenancePolicyOutputWithContext(context.Background())
}

func (i MaintenancePolicyArgs) ToMaintenancePolicyOutputWithContext(ctx context.Context) MaintenancePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenancePolicyOutput)
}

func (i MaintenancePolicyArgs) ToMaintenancePolicyPtrOutput() MaintenancePolicyPtrOutput {
	return i.ToMaintenancePolicyPtrOutputWithContext(context.Background())
}

func (i MaintenancePolicyArgs) ToMaintenancePolicyPtrOutputWithContext(ctx context.Context) MaintenancePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenancePolicyOutput).ToMaintenancePolicyPtrOutputWithContext(ctx)
}

// MaintenancePolicyPtrInput is an input type that accepts MaintenancePolicyArgs, MaintenancePolicyPtr and MaintenancePolicyPtrOutput values.
// You can construct a concrete instance of `MaintenancePolicyPtrInput` via:
//
//          MaintenancePolicyArgs{...}
//
//  or:
//
//          nil
type MaintenancePolicyPtrInput interface {
	pulumi.Input

	ToMaintenancePolicyPtrOutput() MaintenancePolicyPtrOutput
	ToMaintenancePolicyPtrOutputWithContext(context.Context) MaintenancePolicyPtrOutput
}

type maintenancePolicyPtrType MaintenancePolicyArgs

func MaintenancePolicyPtr(v *MaintenancePolicyArgs) MaintenancePolicyPtrInput {
	return (*maintenancePolicyPtrType)(v)
}

func (*maintenancePolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MaintenancePolicy)(nil)).Elem()
}

func (i *maintenancePolicyPtrType) ToMaintenancePolicyPtrOutput() MaintenancePolicyPtrOutput {
	return i.ToMaintenancePolicyPtrOutputWithContext(context.Background())
}

func (i *maintenancePolicyPtrType) ToMaintenancePolicyPtrOutputWithContext(ctx context.Context) MaintenancePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenancePolicyPtrOutput)
}

// MaintenancePolicy defines the maintenance policy to be used for the cluster.
type MaintenancePolicyOutput struct{ *pulumi.OutputState }

func (MaintenancePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenancePolicy)(nil)).Elem()
}

func (o MaintenancePolicyOutput) ToMaintenancePolicyOutput() MaintenancePolicyOutput {
	return o
}

func (o MaintenancePolicyOutput) ToMaintenancePolicyOutputWithContext(ctx context.Context) MaintenancePolicyOutput {
	return o
}

func (o MaintenancePolicyOutput) ToMaintenancePolicyPtrOutput() MaintenancePolicyPtrOutput {
	return o.ToMaintenancePolicyPtrOutputWithContext(context.Background())
}

func (o MaintenancePolicyOutput) ToMaintenancePolicyPtrOutputWithContext(ctx context.Context) MaintenancePolicyPtrOutput {
	return o.ApplyT(func(v MaintenancePolicy) *MaintenancePolicy {
		return &v
	}).(MaintenancePolicyPtrOutput)
}

// A hash identifying the version of this policy, so that updates to fields of the policy won't accidentally undo intermediate changes (and so that users of the API unaware of some fields won't accidentally remove other fields). Make a `get()` request to the cluster to get the current resource version and include it with requests to set the policy.
func (o MaintenancePolicyOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaintenancePolicy) *string { return v.ResourceVersion }).(pulumi.StringPtrOutput)
}

// Specifies the maintenance window in which maintenance may be performed.
func (o MaintenancePolicyOutput) Window() MaintenanceWindowPtrOutput {
	return o.ApplyT(func(v MaintenancePolicy) *MaintenanceWindow { return v.Window }).(MaintenanceWindowPtrOutput)
}

type MaintenancePolicyPtrOutput struct{ *pulumi.OutputState }

func (MaintenancePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MaintenancePolicy)(nil)).Elem()
}

func (o MaintenancePolicyPtrOutput) ToMaintenancePolicyPtrOutput() MaintenancePolicyPtrOutput {
	return o
}

func (o MaintenancePolicyPtrOutput) ToMaintenancePolicyPtrOutputWithContext(ctx context.Context) MaintenancePolicyPtrOutput {
	return o
}

func (o MaintenancePolicyPtrOutput) Elem() MaintenancePolicyOutput {
	return o.ApplyT(func(v *MaintenancePolicy) MaintenancePolicy { return *v }).(MaintenancePolicyOutput)
}

// A hash identifying the version of this policy, so that updates to fields of the policy won't accidentally undo intermediate changes (and so that users of the API unaware of some fields won't accidentally remove other fields). Make a `get()` request to the cluster to get the current resource version and include it with requests to set the policy.
func (o MaintenancePolicyPtrOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaintenancePolicy) *string {
		if v == nil {
			return nil
		}
		return v.ResourceVersion
	}).(pulumi.StringPtrOutput)
}

// Specifies the maintenance window in which maintenance may be performed.
func (o MaintenancePolicyPtrOutput) Window() MaintenanceWindowPtrOutput {
	return o.ApplyT(func(v *MaintenancePolicy) *MaintenanceWindow {
		if v == nil {
			return nil
		}
		return v.Window
	}).(MaintenanceWindowPtrOutput)
}

// MaintenancePolicy defines the maintenance policy to be used for the cluster.
type MaintenancePolicyResponse struct {
	// A hash identifying the version of this policy, so that updates to fields of the policy won't accidentally undo intermediate changes (and so that users of the API unaware of some fields won't accidentally remove other fields). Make a `get()` request to the cluster to get the current resource version and include it with requests to set the policy.
	ResourceVersion string `pulumi:"resourceVersion"`
	// Specifies the maintenance window in which maintenance may be performed.
	Window MaintenanceWindowResponse `pulumi:"window"`
}

// MaintenancePolicyResponseInput is an input type that accepts MaintenancePolicyResponseArgs and MaintenancePolicyResponseOutput values.
// You can construct a concrete instance of `MaintenancePolicyResponseInput` via:
//
//          MaintenancePolicyResponseArgs{...}
type MaintenancePolicyResponseInput interface {
	pulumi.Input

	ToMaintenancePolicyResponseOutput() MaintenancePolicyResponseOutput
	ToMaintenancePolicyResponseOutputWithContext(context.Context) MaintenancePolicyResponseOutput
}

// MaintenancePolicy defines the maintenance policy to be used for the cluster.
type MaintenancePolicyResponseArgs struct {
	// A hash identifying the version of this policy, so that updates to fields of the policy won't accidentally undo intermediate changes (and so that users of the API unaware of some fields won't accidentally remove other fields). Make a `get()` request to the cluster to get the current resource version and include it with requests to set the policy.
	ResourceVersion pulumi.StringInput `pulumi:"resourceVersion"`
	// Specifies the maintenance window in which maintenance may be performed.
	Window MaintenanceWindowResponseInput `pulumi:"window"`
}

func (MaintenancePolicyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenancePolicyResponse)(nil)).Elem()
}

func (i MaintenancePolicyResponseArgs) ToMaintenancePolicyResponseOutput() MaintenancePolicyResponseOutput {
	return i.ToMaintenancePolicyResponseOutputWithContext(context.Background())
}

func (i MaintenancePolicyResponseArgs) ToMaintenancePolicyResponseOutputWithContext(ctx context.Context) MaintenancePolicyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenancePolicyResponseOutput)
}

func (i MaintenancePolicyResponseArgs) ToMaintenancePolicyResponsePtrOutput() MaintenancePolicyResponsePtrOutput {
	return i.ToMaintenancePolicyResponsePtrOutputWithContext(context.Background())
}

func (i MaintenancePolicyResponseArgs) ToMaintenancePolicyResponsePtrOutputWithContext(ctx context.Context) MaintenancePolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenancePolicyResponseOutput).ToMaintenancePolicyResponsePtrOutputWithContext(ctx)
}

// MaintenancePolicyResponsePtrInput is an input type that accepts MaintenancePolicyResponseArgs, MaintenancePolicyResponsePtr and MaintenancePolicyResponsePtrOutput values.
// You can construct a concrete instance of `MaintenancePolicyResponsePtrInput` via:
//
//          MaintenancePolicyResponseArgs{...}
//
//  or:
//
//          nil
type MaintenancePolicyResponsePtrInput interface {
	pulumi.Input

	ToMaintenancePolicyResponsePtrOutput() MaintenancePolicyResponsePtrOutput
	ToMaintenancePolicyResponsePtrOutputWithContext(context.Context) MaintenancePolicyResponsePtrOutput
}

type maintenancePolicyResponsePtrType MaintenancePolicyResponseArgs

func MaintenancePolicyResponsePtr(v *MaintenancePolicyResponseArgs) MaintenancePolicyResponsePtrInput {
	return (*maintenancePolicyResponsePtrType)(v)
}

func (*maintenancePolicyResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MaintenancePolicyResponse)(nil)).Elem()
}

func (i *maintenancePolicyResponsePtrType) ToMaintenancePolicyResponsePtrOutput() MaintenancePolicyResponsePtrOutput {
	return i.ToMaintenancePolicyResponsePtrOutputWithContext(context.Background())
}

func (i *maintenancePolicyResponsePtrType) ToMaintenancePolicyResponsePtrOutputWithContext(ctx context.Context) MaintenancePolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenancePolicyResponsePtrOutput)
}

// MaintenancePolicy defines the maintenance policy to be used for the cluster.
type MaintenancePolicyResponseOutput struct{ *pulumi.OutputState }

func (MaintenancePolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenancePolicyResponse)(nil)).Elem()
}

func (o MaintenancePolicyResponseOutput) ToMaintenancePolicyResponseOutput() MaintenancePolicyResponseOutput {
	return o
}

func (o MaintenancePolicyResponseOutput) ToMaintenancePolicyResponseOutputWithContext(ctx context.Context) MaintenancePolicyResponseOutput {
	return o
}

func (o MaintenancePolicyResponseOutput) ToMaintenancePolicyResponsePtrOutput() MaintenancePolicyResponsePtrOutput {
	return o.ToMaintenancePolicyResponsePtrOutputWithContext(context.Background())
}

func (o MaintenancePolicyResponseOutput) ToMaintenancePolicyResponsePtrOutputWithContext(ctx context.Context) MaintenancePolicyResponsePtrOutput {
	return o.ApplyT(func(v MaintenancePolicyResponse) *MaintenancePolicyResponse {
		return &v
	}).(MaintenancePolicyResponsePtrOutput)
}

// A hash identifying the version of this policy, so that updates to fields of the policy won't accidentally undo intermediate changes (and so that users of the API unaware of some fields won't accidentally remove other fields). Make a `get()` request to the cluster to get the current resource version and include it with requests to set the policy.
func (o MaintenancePolicyResponseOutput) ResourceVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MaintenancePolicyResponse) string { return v.ResourceVersion }).(pulumi.StringOutput)
}

// Specifies the maintenance window in which maintenance may be performed.
func (o MaintenancePolicyResponseOutput) Window() MaintenanceWindowResponseOutput {
	return o.ApplyT(func(v MaintenancePolicyResponse) MaintenanceWindowResponse { return v.Window }).(MaintenanceWindowResponseOutput)
}

type MaintenancePolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (MaintenancePolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MaintenancePolicyResponse)(nil)).Elem()
}

func (o MaintenancePolicyResponsePtrOutput) ToMaintenancePolicyResponsePtrOutput() MaintenancePolicyResponsePtrOutput {
	return o
}

func (o MaintenancePolicyResponsePtrOutput) ToMaintenancePolicyResponsePtrOutputWithContext(ctx context.Context) MaintenancePolicyResponsePtrOutput {
	return o
}

func (o MaintenancePolicyResponsePtrOutput) Elem() MaintenancePolicyResponseOutput {
	return o.ApplyT(func(v *MaintenancePolicyResponse) MaintenancePolicyResponse { return *v }).(MaintenancePolicyResponseOutput)
}

// A hash identifying the version of this policy, so that updates to fields of the policy won't accidentally undo intermediate changes (and so that users of the API unaware of some fields won't accidentally remove other fields). Make a `get()` request to the cluster to get the current resource version and include it with requests to set the policy.
func (o MaintenancePolicyResponsePtrOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaintenancePolicyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ResourceVersion
	}).(pulumi.StringPtrOutput)
}

// Specifies the maintenance window in which maintenance may be performed.
func (o MaintenancePolicyResponsePtrOutput) Window() MaintenanceWindowResponsePtrOutput {
	return o.ApplyT(func(v *MaintenancePolicyResponse) *MaintenanceWindowResponse {
		if v == nil {
			return nil
		}
		return &v.Window
	}).(MaintenanceWindowResponsePtrOutput)
}

// MaintenanceWindow defines the maintenance window to be used for the cluster.
type MaintenanceWindow struct {
	// DailyMaintenanceWindow specifies a daily maintenance operation window.
	DailyMaintenanceWindow *DailyMaintenanceWindow `pulumi:"dailyMaintenanceWindow"`
	// Exceptions to maintenance window. Non-emergency maintenance should not occur in these windows.
	MaintenanceExclusions map[string]string `pulumi:"maintenanceExclusions"`
	// RecurringWindow specifies some number of recurring time periods for maintenance to occur. The time windows may be overlapping. If no maintenance windows are set, maintenance can occur at any time.
	RecurringWindow *RecurringTimeWindow `pulumi:"recurringWindow"`
}

// MaintenanceWindowInput is an input type that accepts MaintenanceWindowArgs and MaintenanceWindowOutput values.
// You can construct a concrete instance of `MaintenanceWindowInput` via:
//
//          MaintenanceWindowArgs{...}
type MaintenanceWindowInput interface {
	pulumi.Input

	ToMaintenanceWindowOutput() MaintenanceWindowOutput
	ToMaintenanceWindowOutputWithContext(context.Context) MaintenanceWindowOutput
}

// MaintenanceWindow defines the maintenance window to be used for the cluster.
type MaintenanceWindowArgs struct {
	// DailyMaintenanceWindow specifies a daily maintenance operation window.
	DailyMaintenanceWindow DailyMaintenanceWindowPtrInput `pulumi:"dailyMaintenanceWindow"`
	// Exceptions to maintenance window. Non-emergency maintenance should not occur in these windows.
	MaintenanceExclusions pulumi.StringMapInput `pulumi:"maintenanceExclusions"`
	// RecurringWindow specifies some number of recurring time periods for maintenance to occur. The time windows may be overlapping. If no maintenance windows are set, maintenance can occur at any time.
	RecurringWindow RecurringTimeWindowPtrInput `pulumi:"recurringWindow"`
}

func (MaintenanceWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceWindow)(nil)).Elem()
}

func (i MaintenanceWindowArgs) ToMaintenanceWindowOutput() MaintenanceWindowOutput {
	return i.ToMaintenanceWindowOutputWithContext(context.Background())
}

func (i MaintenanceWindowArgs) ToMaintenanceWindowOutputWithContext(ctx context.Context) MaintenanceWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowOutput)
}

func (i MaintenanceWindowArgs) ToMaintenanceWindowPtrOutput() MaintenanceWindowPtrOutput {
	return i.ToMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (i MaintenanceWindowArgs) ToMaintenanceWindowPtrOutputWithContext(ctx context.Context) MaintenanceWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowOutput).ToMaintenanceWindowPtrOutputWithContext(ctx)
}

// MaintenanceWindowPtrInput is an input type that accepts MaintenanceWindowArgs, MaintenanceWindowPtr and MaintenanceWindowPtrOutput values.
// You can construct a concrete instance of `MaintenanceWindowPtrInput` via:
//
//          MaintenanceWindowArgs{...}
//
//  or:
//
//          nil
type MaintenanceWindowPtrInput interface {
	pulumi.Input

	ToMaintenanceWindowPtrOutput() MaintenanceWindowPtrOutput
	ToMaintenanceWindowPtrOutputWithContext(context.Context) MaintenanceWindowPtrOutput
}

type maintenanceWindowPtrType MaintenanceWindowArgs

func MaintenanceWindowPtr(v *MaintenanceWindowArgs) MaintenanceWindowPtrInput {
	return (*maintenanceWindowPtrType)(v)
}

func (*maintenanceWindowPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MaintenanceWindow)(nil)).Elem()
}

func (i *maintenanceWindowPtrType) ToMaintenanceWindowPtrOutput() MaintenanceWindowPtrOutput {
	return i.ToMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (i *maintenanceWindowPtrType) ToMaintenanceWindowPtrOutputWithContext(ctx context.Context) MaintenanceWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowPtrOutput)
}

// MaintenanceWindow defines the maintenance window to be used for the cluster.
type MaintenanceWindowOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceWindow)(nil)).Elem()
}

func (o MaintenanceWindowOutput) ToMaintenanceWindowOutput() MaintenanceWindowOutput {
	return o
}

func (o MaintenanceWindowOutput) ToMaintenanceWindowOutputWithContext(ctx context.Context) MaintenanceWindowOutput {
	return o
}

func (o MaintenanceWindowOutput) ToMaintenanceWindowPtrOutput() MaintenanceWindowPtrOutput {
	return o.ToMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (o MaintenanceWindowOutput) ToMaintenanceWindowPtrOutputWithContext(ctx context.Context) MaintenanceWindowPtrOutput {
	return o.ApplyT(func(v MaintenanceWindow) *MaintenanceWindow {
		return &v
	}).(MaintenanceWindowPtrOutput)
}

// DailyMaintenanceWindow specifies a daily maintenance operation window.
func (o MaintenanceWindowOutput) DailyMaintenanceWindow() DailyMaintenanceWindowPtrOutput {
	return o.ApplyT(func(v MaintenanceWindow) *DailyMaintenanceWindow { return v.DailyMaintenanceWindow }).(DailyMaintenanceWindowPtrOutput)
}

// Exceptions to maintenance window. Non-emergency maintenance should not occur in these windows.
func (o MaintenanceWindowOutput) MaintenanceExclusions() pulumi.StringMapOutput {
	return o.ApplyT(func(v MaintenanceWindow) map[string]string { return v.MaintenanceExclusions }).(pulumi.StringMapOutput)
}

// RecurringWindow specifies some number of recurring time periods for maintenance to occur. The time windows may be overlapping. If no maintenance windows are set, maintenance can occur at any time.
func (o MaintenanceWindowOutput) RecurringWindow() RecurringTimeWindowPtrOutput {
	return o.ApplyT(func(v MaintenanceWindow) *RecurringTimeWindow { return v.RecurringWindow }).(RecurringTimeWindowPtrOutput)
}

type MaintenanceWindowPtrOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MaintenanceWindow)(nil)).Elem()
}

func (o MaintenanceWindowPtrOutput) ToMaintenanceWindowPtrOutput() MaintenanceWindowPtrOutput {
	return o
}

func (o MaintenanceWindowPtrOutput) ToMaintenanceWindowPtrOutputWithContext(ctx context.Context) MaintenanceWindowPtrOutput {
	return o
}

func (o MaintenanceWindowPtrOutput) Elem() MaintenanceWindowOutput {
	return o.ApplyT(func(v *MaintenanceWindow) MaintenanceWindow { return *v }).(MaintenanceWindowOutput)
}

// DailyMaintenanceWindow specifies a daily maintenance operation window.
func (o MaintenanceWindowPtrOutput) DailyMaintenanceWindow() DailyMaintenanceWindowPtrOutput {
	return o.ApplyT(func(v *MaintenanceWindow) *DailyMaintenanceWindow {
		if v == nil {
			return nil
		}
		return v.DailyMaintenanceWindow
	}).(DailyMaintenanceWindowPtrOutput)
}

// Exceptions to maintenance window. Non-emergency maintenance should not occur in these windows.
func (o MaintenanceWindowPtrOutput) MaintenanceExclusions() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MaintenanceWindow) map[string]string {
		if v == nil {
			return nil
		}
		return v.MaintenanceExclusions
	}).(pulumi.StringMapOutput)
}

// RecurringWindow specifies some number of recurring time periods for maintenance to occur. The time windows may be overlapping. If no maintenance windows are set, maintenance can occur at any time.
func (o MaintenanceWindowPtrOutput) RecurringWindow() RecurringTimeWindowPtrOutput {
	return o.ApplyT(func(v *MaintenanceWindow) *RecurringTimeWindow {
		if v == nil {
			return nil
		}
		return v.RecurringWindow
	}).(RecurringTimeWindowPtrOutput)
}

// MaintenanceWindow defines the maintenance window to be used for the cluster.
type MaintenanceWindowResponse struct {
	// DailyMaintenanceWindow specifies a daily maintenance operation window.
	DailyMaintenanceWindow DailyMaintenanceWindowResponse `pulumi:"dailyMaintenanceWindow"`
	// Exceptions to maintenance window. Non-emergency maintenance should not occur in these windows.
	MaintenanceExclusions map[string]string `pulumi:"maintenanceExclusions"`
	// RecurringWindow specifies some number of recurring time periods for maintenance to occur. The time windows may be overlapping. If no maintenance windows are set, maintenance can occur at any time.
	RecurringWindow RecurringTimeWindowResponse `pulumi:"recurringWindow"`
}

// MaintenanceWindowResponseInput is an input type that accepts MaintenanceWindowResponseArgs and MaintenanceWindowResponseOutput values.
// You can construct a concrete instance of `MaintenanceWindowResponseInput` via:
//
//          MaintenanceWindowResponseArgs{...}
type MaintenanceWindowResponseInput interface {
	pulumi.Input

	ToMaintenanceWindowResponseOutput() MaintenanceWindowResponseOutput
	ToMaintenanceWindowResponseOutputWithContext(context.Context) MaintenanceWindowResponseOutput
}

// MaintenanceWindow defines the maintenance window to be used for the cluster.
type MaintenanceWindowResponseArgs struct {
	// DailyMaintenanceWindow specifies a daily maintenance operation window.
	DailyMaintenanceWindow DailyMaintenanceWindowResponseInput `pulumi:"dailyMaintenanceWindow"`
	// Exceptions to maintenance window. Non-emergency maintenance should not occur in these windows.
	MaintenanceExclusions pulumi.StringMapInput `pulumi:"maintenanceExclusions"`
	// RecurringWindow specifies some number of recurring time periods for maintenance to occur. The time windows may be overlapping. If no maintenance windows are set, maintenance can occur at any time.
	RecurringWindow RecurringTimeWindowResponseInput `pulumi:"recurringWindow"`
}

func (MaintenanceWindowResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceWindowResponse)(nil)).Elem()
}

func (i MaintenanceWindowResponseArgs) ToMaintenanceWindowResponseOutput() MaintenanceWindowResponseOutput {
	return i.ToMaintenanceWindowResponseOutputWithContext(context.Background())
}

func (i MaintenanceWindowResponseArgs) ToMaintenanceWindowResponseOutputWithContext(ctx context.Context) MaintenanceWindowResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowResponseOutput)
}

func (i MaintenanceWindowResponseArgs) ToMaintenanceWindowResponsePtrOutput() MaintenanceWindowResponsePtrOutput {
	return i.ToMaintenanceWindowResponsePtrOutputWithContext(context.Background())
}

func (i MaintenanceWindowResponseArgs) ToMaintenanceWindowResponsePtrOutputWithContext(ctx context.Context) MaintenanceWindowResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowResponseOutput).ToMaintenanceWindowResponsePtrOutputWithContext(ctx)
}

// MaintenanceWindowResponsePtrInput is an input type that accepts MaintenanceWindowResponseArgs, MaintenanceWindowResponsePtr and MaintenanceWindowResponsePtrOutput values.
// You can construct a concrete instance of `MaintenanceWindowResponsePtrInput` via:
//
//          MaintenanceWindowResponseArgs{...}
//
//  or:
//
//          nil
type MaintenanceWindowResponsePtrInput interface {
	pulumi.Input

	ToMaintenanceWindowResponsePtrOutput() MaintenanceWindowResponsePtrOutput
	ToMaintenanceWindowResponsePtrOutputWithContext(context.Context) MaintenanceWindowResponsePtrOutput
}

type maintenanceWindowResponsePtrType MaintenanceWindowResponseArgs

func MaintenanceWindowResponsePtr(v *MaintenanceWindowResponseArgs) MaintenanceWindowResponsePtrInput {
	return (*maintenanceWindowResponsePtrType)(v)
}

func (*maintenanceWindowResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MaintenanceWindowResponse)(nil)).Elem()
}

func (i *maintenanceWindowResponsePtrType) ToMaintenanceWindowResponsePtrOutput() MaintenanceWindowResponsePtrOutput {
	return i.ToMaintenanceWindowResponsePtrOutputWithContext(context.Background())
}

func (i *maintenanceWindowResponsePtrType) ToMaintenanceWindowResponsePtrOutputWithContext(ctx context.Context) MaintenanceWindowResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowResponsePtrOutput)
}

// MaintenanceWindow defines the maintenance window to be used for the cluster.
type MaintenanceWindowResponseOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceWindowResponse)(nil)).Elem()
}

func (o MaintenanceWindowResponseOutput) ToMaintenanceWindowResponseOutput() MaintenanceWindowResponseOutput {
	return o
}

func (o MaintenanceWindowResponseOutput) ToMaintenanceWindowResponseOutputWithContext(ctx context.Context) MaintenanceWindowResponseOutput {
	return o
}

func (o MaintenanceWindowResponseOutput) ToMaintenanceWindowResponsePtrOutput() MaintenanceWindowResponsePtrOutput {
	return o.ToMaintenanceWindowResponsePtrOutputWithContext(context.Background())
}

func (o MaintenanceWindowResponseOutput) ToMaintenanceWindowResponsePtrOutputWithContext(ctx context.Context) MaintenanceWindowResponsePtrOutput {
	return o.ApplyT(func(v MaintenanceWindowResponse) *MaintenanceWindowResponse {
		return &v
	}).(MaintenanceWindowResponsePtrOutput)
}

// DailyMaintenanceWindow specifies a daily maintenance operation window.
func (o MaintenanceWindowResponseOutput) DailyMaintenanceWindow() DailyMaintenanceWindowResponseOutput {
	return o.ApplyT(func(v MaintenanceWindowResponse) DailyMaintenanceWindowResponse { return v.DailyMaintenanceWindow }).(DailyMaintenanceWindowResponseOutput)
}

// Exceptions to maintenance window. Non-emergency maintenance should not occur in these windows.
func (o MaintenanceWindowResponseOutput) MaintenanceExclusions() pulumi.StringMapOutput {
	return o.ApplyT(func(v MaintenanceWindowResponse) map[string]string { return v.MaintenanceExclusions }).(pulumi.StringMapOutput)
}

// RecurringWindow specifies some number of recurring time periods for maintenance to occur. The time windows may be overlapping. If no maintenance windows are set, maintenance can occur at any time.
func (o MaintenanceWindowResponseOutput) RecurringWindow() RecurringTimeWindowResponseOutput {
	return o.ApplyT(func(v MaintenanceWindowResponse) RecurringTimeWindowResponse { return v.RecurringWindow }).(RecurringTimeWindowResponseOutput)
}

type MaintenanceWindowResponsePtrOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MaintenanceWindowResponse)(nil)).Elem()
}

func (o MaintenanceWindowResponsePtrOutput) ToMaintenanceWindowResponsePtrOutput() MaintenanceWindowResponsePtrOutput {
	return o
}

func (o MaintenanceWindowResponsePtrOutput) ToMaintenanceWindowResponsePtrOutputWithContext(ctx context.Context) MaintenanceWindowResponsePtrOutput {
	return o
}

func (o MaintenanceWindowResponsePtrOutput) Elem() MaintenanceWindowResponseOutput {
	return o.ApplyT(func(v *MaintenanceWindowResponse) MaintenanceWindowResponse { return *v }).(MaintenanceWindowResponseOutput)
}

// DailyMaintenanceWindow specifies a daily maintenance operation window.
func (o MaintenanceWindowResponsePtrOutput) DailyMaintenanceWindow() DailyMaintenanceWindowResponsePtrOutput {
	return o.ApplyT(func(v *MaintenanceWindowResponse) *DailyMaintenanceWindowResponse {
		if v == nil {
			return nil
		}
		return &v.DailyMaintenanceWindow
	}).(DailyMaintenanceWindowResponsePtrOutput)
}

// Exceptions to maintenance window. Non-emergency maintenance should not occur in these windows.
func (o MaintenanceWindowResponsePtrOutput) MaintenanceExclusions() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MaintenanceWindowResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.MaintenanceExclusions
	}).(pulumi.StringMapOutput)
}

// RecurringWindow specifies some number of recurring time periods for maintenance to occur. The time windows may be overlapping. If no maintenance windows are set, maintenance can occur at any time.
func (o MaintenanceWindowResponsePtrOutput) RecurringWindow() RecurringTimeWindowResponsePtrOutput {
	return o.ApplyT(func(v *MaintenanceWindowResponse) *RecurringTimeWindowResponse {
		if v == nil {
			return nil
		}
		return &v.RecurringWindow
	}).(RecurringTimeWindowResponsePtrOutput)
}

// The authentication information for accessing the master endpoint. Authentication can be done using HTTP basic auth or using client certificates.
type MasterAuth struct {
	// [Output only] Base64-encoded public certificate used by clients to authenticate to the cluster endpoint.
	ClientCertificate *string `pulumi:"clientCertificate"`
	// Configuration for client certificate authentication on the cluster. For clusters before v1.12, if no configuration is specified, a client certificate is issued.
	ClientCertificateConfig *ClientCertificateConfig `pulumi:"clientCertificateConfig"`
	// [Output only] Base64-encoded private key used by clients to authenticate to the cluster endpoint.
	ClientKey *string `pulumi:"clientKey"`
	// [Output only] Base64-encoded public certificate that is the root of trust for the cluster.
	ClusterCaCertificate *string `pulumi:"clusterCaCertificate"`
	// The password to use for HTTP basic authentication to the master endpoint. Because the master endpoint is open to the Internet, you should create a strong password. If a password is provided for cluster creation, username must be non-empty. Warning: basic authentication is deprecated, and will be removed in GKE control plane versions 1.19 and newer. For a list of recommended authentication methods, see: https://cloud.google.com/kubernetes-engine/docs/how-to/api-server-authentication
	Password *string `pulumi:"password"`
	// The username to use for HTTP basic authentication to the master endpoint. For clusters v1.6.0 and later, basic authentication can be disabled by leaving username unspecified (or setting it to the empty string). Warning: basic authentication is deprecated, and will be removed in GKE control plane versions 1.19 and newer. For a list of recommended authentication methods, see: https://cloud.google.com/kubernetes-engine/docs/how-to/api-server-authentication
	Username *string `pulumi:"username"`
}

// MasterAuthInput is an input type that accepts MasterAuthArgs and MasterAuthOutput values.
// You can construct a concrete instance of `MasterAuthInput` via:
//
//          MasterAuthArgs{...}
type MasterAuthInput interface {
	pulumi.Input

	ToMasterAuthOutput() MasterAuthOutput
	ToMasterAuthOutputWithContext(context.Context) MasterAuthOutput
}

// The authentication information for accessing the master endpoint. Authentication can be done using HTTP basic auth or using client certificates.
type MasterAuthArgs struct {
	// [Output only] Base64-encoded public certificate used by clients to authenticate to the cluster endpoint.
	ClientCertificate pulumi.StringPtrInput `pulumi:"clientCertificate"`
	// Configuration for client certificate authentication on the cluster. For clusters before v1.12, if no configuration is specified, a client certificate is issued.
	ClientCertificateConfig ClientCertificateConfigPtrInput `pulumi:"clientCertificateConfig"`
	// [Output only] Base64-encoded private key used by clients to authenticate to the cluster endpoint.
	ClientKey pulumi.StringPtrInput `pulumi:"clientKey"`
	// [Output only] Base64-encoded public certificate that is the root of trust for the cluster.
	ClusterCaCertificate pulumi.StringPtrInput `pulumi:"clusterCaCertificate"`
	// The password to use for HTTP basic authentication to the master endpoint. Because the master endpoint is open to the Internet, you should create a strong password. If a password is provided for cluster creation, username must be non-empty. Warning: basic authentication is deprecated, and will be removed in GKE control plane versions 1.19 and newer. For a list of recommended authentication methods, see: https://cloud.google.com/kubernetes-engine/docs/how-to/api-server-authentication
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The username to use for HTTP basic authentication to the master endpoint. For clusters v1.6.0 and later, basic authentication can be disabled by leaving username unspecified (or setting it to the empty string). Warning: basic authentication is deprecated, and will be removed in GKE control plane versions 1.19 and newer. For a list of recommended authentication methods, see: https://cloud.google.com/kubernetes-engine/docs/how-to/api-server-authentication
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (MasterAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MasterAuth)(nil)).Elem()
}

func (i MasterAuthArgs) ToMasterAuthOutput() MasterAuthOutput {
	return i.ToMasterAuthOutputWithContext(context.Background())
}

func (i MasterAuthArgs) ToMasterAuthOutputWithContext(ctx context.Context) MasterAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MasterAuthOutput)
}

func (i MasterAuthArgs) ToMasterAuthPtrOutput() MasterAuthPtrOutput {
	return i.ToMasterAuthPtrOutputWithContext(context.Background())
}

func (i MasterAuthArgs) ToMasterAuthPtrOutputWithContext(ctx context.Context) MasterAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MasterAuthOutput).ToMasterAuthPtrOutputWithContext(ctx)
}

// MasterAuthPtrInput is an input type that accepts MasterAuthArgs, MasterAuthPtr and MasterAuthPtrOutput values.
// You can construct a concrete instance of `MasterAuthPtrInput` via:
//
//          MasterAuthArgs{...}
//
//  or:
//
//          nil
type MasterAuthPtrInput interface {
	pulumi.Input

	ToMasterAuthPtrOutput() MasterAuthPtrOutput
	ToMasterAuthPtrOutputWithContext(context.Context) MasterAuthPtrOutput
}

type masterAuthPtrType MasterAuthArgs

func MasterAuthPtr(v *MasterAuthArgs) MasterAuthPtrInput {
	return (*masterAuthPtrType)(v)
}

func (*masterAuthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MasterAuth)(nil)).Elem()
}

func (i *masterAuthPtrType) ToMasterAuthPtrOutput() MasterAuthPtrOutput {
	return i.ToMasterAuthPtrOutputWithContext(context.Background())
}

func (i *masterAuthPtrType) ToMasterAuthPtrOutputWithContext(ctx context.Context) MasterAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MasterAuthPtrOutput)
}

// The authentication information for accessing the master endpoint. Authentication can be done using HTTP basic auth or using client certificates.
type MasterAuthOutput struct{ *pulumi.OutputState }

func (MasterAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MasterAuth)(nil)).Elem()
}

func (o MasterAuthOutput) ToMasterAuthOutput() MasterAuthOutput {
	return o
}

func (o MasterAuthOutput) ToMasterAuthOutputWithContext(ctx context.Context) MasterAuthOutput {
	return o
}

func (o MasterAuthOutput) ToMasterAuthPtrOutput() MasterAuthPtrOutput {
	return o.ToMasterAuthPtrOutputWithContext(context.Background())
}

func (o MasterAuthOutput) ToMasterAuthPtrOutputWithContext(ctx context.Context) MasterAuthPtrOutput {
	return o.ApplyT(func(v MasterAuth) *MasterAuth {
		return &v
	}).(MasterAuthPtrOutput)
}

// [Output only] Base64-encoded public certificate used by clients to authenticate to the cluster endpoint.
func (o MasterAuthOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MasterAuth) *string { return v.ClientCertificate }).(pulumi.StringPtrOutput)
}

// Configuration for client certificate authentication on the cluster. For clusters before v1.12, if no configuration is specified, a client certificate is issued.
func (o MasterAuthOutput) ClientCertificateConfig() ClientCertificateConfigPtrOutput {
	return o.ApplyT(func(v MasterAuth) *ClientCertificateConfig { return v.ClientCertificateConfig }).(ClientCertificateConfigPtrOutput)
}

// [Output only] Base64-encoded private key used by clients to authenticate to the cluster endpoint.
func (o MasterAuthOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MasterAuth) *string { return v.ClientKey }).(pulumi.StringPtrOutput)
}

// [Output only] Base64-encoded public certificate that is the root of trust for the cluster.
func (o MasterAuthOutput) ClusterCaCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MasterAuth) *string { return v.ClusterCaCertificate }).(pulumi.StringPtrOutput)
}

// The password to use for HTTP basic authentication to the master endpoint. Because the master endpoint is open to the Internet, you should create a strong password. If a password is provided for cluster creation, username must be non-empty. Warning: basic authentication is deprecated, and will be removed in GKE control plane versions 1.19 and newer. For a list of recommended authentication methods, see: https://cloud.google.com/kubernetes-engine/docs/how-to/api-server-authentication
func (o MasterAuthOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MasterAuth) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The username to use for HTTP basic authentication to the master endpoint. For clusters v1.6.0 and later, basic authentication can be disabled by leaving username unspecified (or setting it to the empty string). Warning: basic authentication is deprecated, and will be removed in GKE control plane versions 1.19 and newer. For a list of recommended authentication methods, see: https://cloud.google.com/kubernetes-engine/docs/how-to/api-server-authentication
func (o MasterAuthOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MasterAuth) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type MasterAuthPtrOutput struct{ *pulumi.OutputState }

func (MasterAuthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MasterAuth)(nil)).Elem()
}

func (o MasterAuthPtrOutput) ToMasterAuthPtrOutput() MasterAuthPtrOutput {
	return o
}

func (o MasterAuthPtrOutput) ToMasterAuthPtrOutputWithContext(ctx context.Context) MasterAuthPtrOutput {
	return o
}

func (o MasterAuthPtrOutput) Elem() MasterAuthOutput {
	return o.ApplyT(func(v *MasterAuth) MasterAuth { return *v }).(MasterAuthOutput)
}

// [Output only] Base64-encoded public certificate used by clients to authenticate to the cluster endpoint.
func (o MasterAuthPtrOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MasterAuth) *string {
		if v == nil {
			return nil
		}
		return v.ClientCertificate
	}).(pulumi.StringPtrOutput)
}

// Configuration for client certificate authentication on the cluster. For clusters before v1.12, if no configuration is specified, a client certificate is issued.
func (o MasterAuthPtrOutput) ClientCertificateConfig() ClientCertificateConfigPtrOutput {
	return o.ApplyT(func(v *MasterAuth) *ClientCertificateConfig {
		if v == nil {
			return nil
		}
		return v.ClientCertificateConfig
	}).(ClientCertificateConfigPtrOutput)
}

// [Output only] Base64-encoded private key used by clients to authenticate to the cluster endpoint.
func (o MasterAuthPtrOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MasterAuth) *string {
		if v == nil {
			return nil
		}
		return v.ClientKey
	}).(pulumi.StringPtrOutput)
}

// [Output only] Base64-encoded public certificate that is the root of trust for the cluster.
func (o MasterAuthPtrOutput) ClusterCaCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MasterAuth) *string {
		if v == nil {
			return nil
		}
		return v.ClusterCaCertificate
	}).(pulumi.StringPtrOutput)
}

// The password to use for HTTP basic authentication to the master endpoint. Because the master endpoint is open to the Internet, you should create a strong password. If a password is provided for cluster creation, username must be non-empty. Warning: basic authentication is deprecated, and will be removed in GKE control plane versions 1.19 and newer. For a list of recommended authentication methods, see: https://cloud.google.com/kubernetes-engine/docs/how-to/api-server-authentication
func (o MasterAuthPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MasterAuth) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The username to use for HTTP basic authentication to the master endpoint. For clusters v1.6.0 and later, basic authentication can be disabled by leaving username unspecified (or setting it to the empty string). Warning: basic authentication is deprecated, and will be removed in GKE control plane versions 1.19 and newer. For a list of recommended authentication methods, see: https://cloud.google.com/kubernetes-engine/docs/how-to/api-server-authentication
func (o MasterAuthPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MasterAuth) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

// The authentication information for accessing the master endpoint. Authentication can be done using HTTP basic auth or using client certificates.
type MasterAuthResponse struct {
	// [Output only] Base64-encoded public certificate used by clients to authenticate to the cluster endpoint.
	ClientCertificate string `pulumi:"clientCertificate"`
	// Configuration for client certificate authentication on the cluster. For clusters before v1.12, if no configuration is specified, a client certificate is issued.
	ClientCertificateConfig ClientCertificateConfigResponse `pulumi:"clientCertificateConfig"`
	// [Output only] Base64-encoded private key used by clients to authenticate to the cluster endpoint.
	ClientKey string `pulumi:"clientKey"`
	// [Output only] Base64-encoded public certificate that is the root of trust for the cluster.
	ClusterCaCertificate string `pulumi:"clusterCaCertificate"`
	// The password to use for HTTP basic authentication to the master endpoint. Because the master endpoint is open to the Internet, you should create a strong password. If a password is provided for cluster creation, username must be non-empty. Warning: basic authentication is deprecated, and will be removed in GKE control plane versions 1.19 and newer. For a list of recommended authentication methods, see: https://cloud.google.com/kubernetes-engine/docs/how-to/api-server-authentication
	Password string `pulumi:"password"`
	// The username to use for HTTP basic authentication to the master endpoint. For clusters v1.6.0 and later, basic authentication can be disabled by leaving username unspecified (or setting it to the empty string). Warning: basic authentication is deprecated, and will be removed in GKE control plane versions 1.19 and newer. For a list of recommended authentication methods, see: https://cloud.google.com/kubernetes-engine/docs/how-to/api-server-authentication
	Username string `pulumi:"username"`
}

// MasterAuthResponseInput is an input type that accepts MasterAuthResponseArgs and MasterAuthResponseOutput values.
// You can construct a concrete instance of `MasterAuthResponseInput` via:
//
//          MasterAuthResponseArgs{...}
type MasterAuthResponseInput interface {
	pulumi.Input

	ToMasterAuthResponseOutput() MasterAuthResponseOutput
	ToMasterAuthResponseOutputWithContext(context.Context) MasterAuthResponseOutput
}

// The authentication information for accessing the master endpoint. Authentication can be done using HTTP basic auth or using client certificates.
type MasterAuthResponseArgs struct {
	// [Output only] Base64-encoded public certificate used by clients to authenticate to the cluster endpoint.
	ClientCertificate pulumi.StringInput `pulumi:"clientCertificate"`
	// Configuration for client certificate authentication on the cluster. For clusters before v1.12, if no configuration is specified, a client certificate is issued.
	ClientCertificateConfig ClientCertificateConfigResponseInput `pulumi:"clientCertificateConfig"`
	// [Output only] Base64-encoded private key used by clients to authenticate to the cluster endpoint.
	ClientKey pulumi.StringInput `pulumi:"clientKey"`
	// [Output only] Base64-encoded public certificate that is the root of trust for the cluster.
	ClusterCaCertificate pulumi.StringInput `pulumi:"clusterCaCertificate"`
	// The password to use for HTTP basic authentication to the master endpoint. Because the master endpoint is open to the Internet, you should create a strong password. If a password is provided for cluster creation, username must be non-empty. Warning: basic authentication is deprecated, and will be removed in GKE control plane versions 1.19 and newer. For a list of recommended authentication methods, see: https://cloud.google.com/kubernetes-engine/docs/how-to/api-server-authentication
	Password pulumi.StringInput `pulumi:"password"`
	// The username to use for HTTP basic authentication to the master endpoint. For clusters v1.6.0 and later, basic authentication can be disabled by leaving username unspecified (or setting it to the empty string). Warning: basic authentication is deprecated, and will be removed in GKE control plane versions 1.19 and newer. For a list of recommended authentication methods, see: https://cloud.google.com/kubernetes-engine/docs/how-to/api-server-authentication
	Username pulumi.StringInput `pulumi:"username"`
}

func (MasterAuthResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MasterAuthResponse)(nil)).Elem()
}

func (i MasterAuthResponseArgs) ToMasterAuthResponseOutput() MasterAuthResponseOutput {
	return i.ToMasterAuthResponseOutputWithContext(context.Background())
}

func (i MasterAuthResponseArgs) ToMasterAuthResponseOutputWithContext(ctx context.Context) MasterAuthResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MasterAuthResponseOutput)
}

func (i MasterAuthResponseArgs) ToMasterAuthResponsePtrOutput() MasterAuthResponsePtrOutput {
	return i.ToMasterAuthResponsePtrOutputWithContext(context.Background())
}

func (i MasterAuthResponseArgs) ToMasterAuthResponsePtrOutputWithContext(ctx context.Context) MasterAuthResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MasterAuthResponseOutput).ToMasterAuthResponsePtrOutputWithContext(ctx)
}

// MasterAuthResponsePtrInput is an input type that accepts MasterAuthResponseArgs, MasterAuthResponsePtr and MasterAuthResponsePtrOutput values.
// You can construct a concrete instance of `MasterAuthResponsePtrInput` via:
//
//          MasterAuthResponseArgs{...}
//
//  or:
//
//          nil
type MasterAuthResponsePtrInput interface {
	pulumi.Input

	ToMasterAuthResponsePtrOutput() MasterAuthResponsePtrOutput
	ToMasterAuthResponsePtrOutputWithContext(context.Context) MasterAuthResponsePtrOutput
}

type masterAuthResponsePtrType MasterAuthResponseArgs

func MasterAuthResponsePtr(v *MasterAuthResponseArgs) MasterAuthResponsePtrInput {
	return (*masterAuthResponsePtrType)(v)
}

func (*masterAuthResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MasterAuthResponse)(nil)).Elem()
}

func (i *masterAuthResponsePtrType) ToMasterAuthResponsePtrOutput() MasterAuthResponsePtrOutput {
	return i.ToMasterAuthResponsePtrOutputWithContext(context.Background())
}

func (i *masterAuthResponsePtrType) ToMasterAuthResponsePtrOutputWithContext(ctx context.Context) MasterAuthResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MasterAuthResponsePtrOutput)
}

// The authentication information for accessing the master endpoint. Authentication can be done using HTTP basic auth or using client certificates.
type MasterAuthResponseOutput struct{ *pulumi.OutputState }

func (MasterAuthResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MasterAuthResponse)(nil)).Elem()
}

func (o MasterAuthResponseOutput) ToMasterAuthResponseOutput() MasterAuthResponseOutput {
	return o
}

func (o MasterAuthResponseOutput) ToMasterAuthResponseOutputWithContext(ctx context.Context) MasterAuthResponseOutput {
	return o
}

func (o MasterAuthResponseOutput) ToMasterAuthResponsePtrOutput() MasterAuthResponsePtrOutput {
	return o.ToMasterAuthResponsePtrOutputWithContext(context.Background())
}

func (o MasterAuthResponseOutput) ToMasterAuthResponsePtrOutputWithContext(ctx context.Context) MasterAuthResponsePtrOutput {
	return o.ApplyT(func(v MasterAuthResponse) *MasterAuthResponse {
		return &v
	}).(MasterAuthResponsePtrOutput)
}

// [Output only] Base64-encoded public certificate used by clients to authenticate to the cluster endpoint.
func (o MasterAuthResponseOutput) ClientCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v MasterAuthResponse) string { return v.ClientCertificate }).(pulumi.StringOutput)
}

// Configuration for client certificate authentication on the cluster. For clusters before v1.12, if no configuration is specified, a client certificate is issued.
func (o MasterAuthResponseOutput) ClientCertificateConfig() ClientCertificateConfigResponseOutput {
	return o.ApplyT(func(v MasterAuthResponse) ClientCertificateConfigResponse { return v.ClientCertificateConfig }).(ClientCertificateConfigResponseOutput)
}

// [Output only] Base64-encoded private key used by clients to authenticate to the cluster endpoint.
func (o MasterAuthResponseOutput) ClientKey() pulumi.StringOutput {
	return o.ApplyT(func(v MasterAuthResponse) string { return v.ClientKey }).(pulumi.StringOutput)
}

// [Output only] Base64-encoded public certificate that is the root of trust for the cluster.
func (o MasterAuthResponseOutput) ClusterCaCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v MasterAuthResponse) string { return v.ClusterCaCertificate }).(pulumi.StringOutput)
}

// The password to use for HTTP basic authentication to the master endpoint. Because the master endpoint is open to the Internet, you should create a strong password. If a password is provided for cluster creation, username must be non-empty. Warning: basic authentication is deprecated, and will be removed in GKE control plane versions 1.19 and newer. For a list of recommended authentication methods, see: https://cloud.google.com/kubernetes-engine/docs/how-to/api-server-authentication
func (o MasterAuthResponseOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v MasterAuthResponse) string { return v.Password }).(pulumi.StringOutput)
}

// The username to use for HTTP basic authentication to the master endpoint. For clusters v1.6.0 and later, basic authentication can be disabled by leaving username unspecified (or setting it to the empty string). Warning: basic authentication is deprecated, and will be removed in GKE control plane versions 1.19 and newer. For a list of recommended authentication methods, see: https://cloud.google.com/kubernetes-engine/docs/how-to/api-server-authentication
func (o MasterAuthResponseOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v MasterAuthResponse) string { return v.Username }).(pulumi.StringOutput)
}

type MasterAuthResponsePtrOutput struct{ *pulumi.OutputState }

func (MasterAuthResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MasterAuthResponse)(nil)).Elem()
}

func (o MasterAuthResponsePtrOutput) ToMasterAuthResponsePtrOutput() MasterAuthResponsePtrOutput {
	return o
}

func (o MasterAuthResponsePtrOutput) ToMasterAuthResponsePtrOutputWithContext(ctx context.Context) MasterAuthResponsePtrOutput {
	return o
}

func (o MasterAuthResponsePtrOutput) Elem() MasterAuthResponseOutput {
	return o.ApplyT(func(v *MasterAuthResponse) MasterAuthResponse { return *v }).(MasterAuthResponseOutput)
}

// [Output only] Base64-encoded public certificate used by clients to authenticate to the cluster endpoint.
func (o MasterAuthResponsePtrOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MasterAuthResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ClientCertificate
	}).(pulumi.StringPtrOutput)
}

// Configuration for client certificate authentication on the cluster. For clusters before v1.12, if no configuration is specified, a client certificate is issued.
func (o MasterAuthResponsePtrOutput) ClientCertificateConfig() ClientCertificateConfigResponsePtrOutput {
	return o.ApplyT(func(v *MasterAuthResponse) *ClientCertificateConfigResponse {
		if v == nil {
			return nil
		}
		return &v.ClientCertificateConfig
	}).(ClientCertificateConfigResponsePtrOutput)
}

// [Output only] Base64-encoded private key used by clients to authenticate to the cluster endpoint.
func (o MasterAuthResponsePtrOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MasterAuthResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ClientKey
	}).(pulumi.StringPtrOutput)
}

// [Output only] Base64-encoded public certificate that is the root of trust for the cluster.
func (o MasterAuthResponsePtrOutput) ClusterCaCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MasterAuthResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ClusterCaCertificate
	}).(pulumi.StringPtrOutput)
}

// The password to use for HTTP basic authentication to the master endpoint. Because the master endpoint is open to the Internet, you should create a strong password. If a password is provided for cluster creation, username must be non-empty. Warning: basic authentication is deprecated, and will be removed in GKE control plane versions 1.19 and newer. For a list of recommended authentication methods, see: https://cloud.google.com/kubernetes-engine/docs/how-to/api-server-authentication
func (o MasterAuthResponsePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MasterAuthResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// The username to use for HTTP basic authentication to the master endpoint. For clusters v1.6.0 and later, basic authentication can be disabled by leaving username unspecified (or setting it to the empty string). Warning: basic authentication is deprecated, and will be removed in GKE control plane versions 1.19 and newer. For a list of recommended authentication methods, see: https://cloud.google.com/kubernetes-engine/docs/how-to/api-server-authentication
func (o MasterAuthResponsePtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MasterAuthResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

// Configuration options for the master authorized networks feature. Enabled master authorized networks will disallow all external traffic to access Kubernetes master through HTTPS except traffic from the given CIDR blocks, Google Compute Engine Public IPs and Google Prod IPs.
type MasterAuthorizedNetworksConfig struct {
	// cidr_blocks define up to 50 external networks that could access Kubernetes master through HTTPS.
	CidrBlocks []CidrBlock `pulumi:"cidrBlocks"`
	// Whether or not master authorized networks is enabled.
	Enabled *bool `pulumi:"enabled"`
}

// MasterAuthorizedNetworksConfigInput is an input type that accepts MasterAuthorizedNetworksConfigArgs and MasterAuthorizedNetworksConfigOutput values.
// You can construct a concrete instance of `MasterAuthorizedNetworksConfigInput` via:
//
//          MasterAuthorizedNetworksConfigArgs{...}
type MasterAuthorizedNetworksConfigInput interface {
	pulumi.Input

	ToMasterAuthorizedNetworksConfigOutput() MasterAuthorizedNetworksConfigOutput
	ToMasterAuthorizedNetworksConfigOutputWithContext(context.Context) MasterAuthorizedNetworksConfigOutput
}

// Configuration options for the master authorized networks feature. Enabled master authorized networks will disallow all external traffic to access Kubernetes master through HTTPS except traffic from the given CIDR blocks, Google Compute Engine Public IPs and Google Prod IPs.
type MasterAuthorizedNetworksConfigArgs struct {
	// cidr_blocks define up to 50 external networks that could access Kubernetes master through HTTPS.
	CidrBlocks CidrBlockArrayInput `pulumi:"cidrBlocks"`
	// Whether or not master authorized networks is enabled.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (MasterAuthorizedNetworksConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MasterAuthorizedNetworksConfig)(nil)).Elem()
}

func (i MasterAuthorizedNetworksConfigArgs) ToMasterAuthorizedNetworksConfigOutput() MasterAuthorizedNetworksConfigOutput {
	return i.ToMasterAuthorizedNetworksConfigOutputWithContext(context.Background())
}

func (i MasterAuthorizedNetworksConfigArgs) ToMasterAuthorizedNetworksConfigOutputWithContext(ctx context.Context) MasterAuthorizedNetworksConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MasterAuthorizedNetworksConfigOutput)
}

func (i MasterAuthorizedNetworksConfigArgs) ToMasterAuthorizedNetworksConfigPtrOutput() MasterAuthorizedNetworksConfigPtrOutput {
	return i.ToMasterAuthorizedNetworksConfigPtrOutputWithContext(context.Background())
}

func (i MasterAuthorizedNetworksConfigArgs) ToMasterAuthorizedNetworksConfigPtrOutputWithContext(ctx context.Context) MasterAuthorizedNetworksConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MasterAuthorizedNetworksConfigOutput).ToMasterAuthorizedNetworksConfigPtrOutputWithContext(ctx)
}

// MasterAuthorizedNetworksConfigPtrInput is an input type that accepts MasterAuthorizedNetworksConfigArgs, MasterAuthorizedNetworksConfigPtr and MasterAuthorizedNetworksConfigPtrOutput values.
// You can construct a concrete instance of `MasterAuthorizedNetworksConfigPtrInput` via:
//
//          MasterAuthorizedNetworksConfigArgs{...}
//
//  or:
//
//          nil
type MasterAuthorizedNetworksConfigPtrInput interface {
	pulumi.Input

	ToMasterAuthorizedNetworksConfigPtrOutput() MasterAuthorizedNetworksConfigPtrOutput
	ToMasterAuthorizedNetworksConfigPtrOutputWithContext(context.Context) MasterAuthorizedNetworksConfigPtrOutput
}

type masterAuthorizedNetworksConfigPtrType MasterAuthorizedNetworksConfigArgs

func MasterAuthorizedNetworksConfigPtr(v *MasterAuthorizedNetworksConfigArgs) MasterAuthorizedNetworksConfigPtrInput {
	return (*masterAuthorizedNetworksConfigPtrType)(v)
}

func (*masterAuthorizedNetworksConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MasterAuthorizedNetworksConfig)(nil)).Elem()
}

func (i *masterAuthorizedNetworksConfigPtrType) ToMasterAuthorizedNetworksConfigPtrOutput() MasterAuthorizedNetworksConfigPtrOutput {
	return i.ToMasterAuthorizedNetworksConfigPtrOutputWithContext(context.Background())
}

func (i *masterAuthorizedNetworksConfigPtrType) ToMasterAuthorizedNetworksConfigPtrOutputWithContext(ctx context.Context) MasterAuthorizedNetworksConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MasterAuthorizedNetworksConfigPtrOutput)
}

// Configuration options for the master authorized networks feature. Enabled master authorized networks will disallow all external traffic to access Kubernetes master through HTTPS except traffic from the given CIDR blocks, Google Compute Engine Public IPs and Google Prod IPs.
type MasterAuthorizedNetworksConfigOutput struct{ *pulumi.OutputState }

func (MasterAuthorizedNetworksConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MasterAuthorizedNetworksConfig)(nil)).Elem()
}

func (o MasterAuthorizedNetworksConfigOutput) ToMasterAuthorizedNetworksConfigOutput() MasterAuthorizedNetworksConfigOutput {
	return o
}

func (o MasterAuthorizedNetworksConfigOutput) ToMasterAuthorizedNetworksConfigOutputWithContext(ctx context.Context) MasterAuthorizedNetworksConfigOutput {
	return o
}

func (o MasterAuthorizedNetworksConfigOutput) ToMasterAuthorizedNetworksConfigPtrOutput() MasterAuthorizedNetworksConfigPtrOutput {
	return o.ToMasterAuthorizedNetworksConfigPtrOutputWithContext(context.Background())
}

func (o MasterAuthorizedNetworksConfigOutput) ToMasterAuthorizedNetworksConfigPtrOutputWithContext(ctx context.Context) MasterAuthorizedNetworksConfigPtrOutput {
	return o.ApplyT(func(v MasterAuthorizedNetworksConfig) *MasterAuthorizedNetworksConfig {
		return &v
	}).(MasterAuthorizedNetworksConfigPtrOutput)
}

// cidr_blocks define up to 50 external networks that could access Kubernetes master through HTTPS.
func (o MasterAuthorizedNetworksConfigOutput) CidrBlocks() CidrBlockArrayOutput {
	return o.ApplyT(func(v MasterAuthorizedNetworksConfig) []CidrBlock { return v.CidrBlocks }).(CidrBlockArrayOutput)
}

// Whether or not master authorized networks is enabled.
func (o MasterAuthorizedNetworksConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MasterAuthorizedNetworksConfig) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type MasterAuthorizedNetworksConfigPtrOutput struct{ *pulumi.OutputState }

func (MasterAuthorizedNetworksConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MasterAuthorizedNetworksConfig)(nil)).Elem()
}

func (o MasterAuthorizedNetworksConfigPtrOutput) ToMasterAuthorizedNetworksConfigPtrOutput() MasterAuthorizedNetworksConfigPtrOutput {
	return o
}

func (o MasterAuthorizedNetworksConfigPtrOutput) ToMasterAuthorizedNetworksConfigPtrOutputWithContext(ctx context.Context) MasterAuthorizedNetworksConfigPtrOutput {
	return o
}

func (o MasterAuthorizedNetworksConfigPtrOutput) Elem() MasterAuthorizedNetworksConfigOutput {
	return o.ApplyT(func(v *MasterAuthorizedNetworksConfig) MasterAuthorizedNetworksConfig { return *v }).(MasterAuthorizedNetworksConfigOutput)
}

// cidr_blocks define up to 50 external networks that could access Kubernetes master through HTTPS.
func (o MasterAuthorizedNetworksConfigPtrOutput) CidrBlocks() CidrBlockArrayOutput {
	return o.ApplyT(func(v *MasterAuthorizedNetworksConfig) []CidrBlock {
		if v == nil {
			return nil
		}
		return v.CidrBlocks
	}).(CidrBlockArrayOutput)
}

// Whether or not master authorized networks is enabled.
func (o MasterAuthorizedNetworksConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MasterAuthorizedNetworksConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Configuration options for the master authorized networks feature. Enabled master authorized networks will disallow all external traffic to access Kubernetes master through HTTPS except traffic from the given CIDR blocks, Google Compute Engine Public IPs and Google Prod IPs.
type MasterAuthorizedNetworksConfigResponse struct {
	// cidr_blocks define up to 50 external networks that could access Kubernetes master through HTTPS.
	CidrBlocks []CidrBlockResponse `pulumi:"cidrBlocks"`
	// Whether or not master authorized networks is enabled.
	Enabled bool `pulumi:"enabled"`
}

// MasterAuthorizedNetworksConfigResponseInput is an input type that accepts MasterAuthorizedNetworksConfigResponseArgs and MasterAuthorizedNetworksConfigResponseOutput values.
// You can construct a concrete instance of `MasterAuthorizedNetworksConfigResponseInput` via:
//
//          MasterAuthorizedNetworksConfigResponseArgs{...}
type MasterAuthorizedNetworksConfigResponseInput interface {
	pulumi.Input

	ToMasterAuthorizedNetworksConfigResponseOutput() MasterAuthorizedNetworksConfigResponseOutput
	ToMasterAuthorizedNetworksConfigResponseOutputWithContext(context.Context) MasterAuthorizedNetworksConfigResponseOutput
}

// Configuration options for the master authorized networks feature. Enabled master authorized networks will disallow all external traffic to access Kubernetes master through HTTPS except traffic from the given CIDR blocks, Google Compute Engine Public IPs and Google Prod IPs.
type MasterAuthorizedNetworksConfigResponseArgs struct {
	// cidr_blocks define up to 50 external networks that could access Kubernetes master through HTTPS.
	CidrBlocks CidrBlockResponseArrayInput `pulumi:"cidrBlocks"`
	// Whether or not master authorized networks is enabled.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

func (MasterAuthorizedNetworksConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MasterAuthorizedNetworksConfigResponse)(nil)).Elem()
}

func (i MasterAuthorizedNetworksConfigResponseArgs) ToMasterAuthorizedNetworksConfigResponseOutput() MasterAuthorizedNetworksConfigResponseOutput {
	return i.ToMasterAuthorizedNetworksConfigResponseOutputWithContext(context.Background())
}

func (i MasterAuthorizedNetworksConfigResponseArgs) ToMasterAuthorizedNetworksConfigResponseOutputWithContext(ctx context.Context) MasterAuthorizedNetworksConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MasterAuthorizedNetworksConfigResponseOutput)
}

func (i MasterAuthorizedNetworksConfigResponseArgs) ToMasterAuthorizedNetworksConfigResponsePtrOutput() MasterAuthorizedNetworksConfigResponsePtrOutput {
	return i.ToMasterAuthorizedNetworksConfigResponsePtrOutputWithContext(context.Background())
}

func (i MasterAuthorizedNetworksConfigResponseArgs) ToMasterAuthorizedNetworksConfigResponsePtrOutputWithContext(ctx context.Context) MasterAuthorizedNetworksConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MasterAuthorizedNetworksConfigResponseOutput).ToMasterAuthorizedNetworksConfigResponsePtrOutputWithContext(ctx)
}

// MasterAuthorizedNetworksConfigResponsePtrInput is an input type that accepts MasterAuthorizedNetworksConfigResponseArgs, MasterAuthorizedNetworksConfigResponsePtr and MasterAuthorizedNetworksConfigResponsePtrOutput values.
// You can construct a concrete instance of `MasterAuthorizedNetworksConfigResponsePtrInput` via:
//
//          MasterAuthorizedNetworksConfigResponseArgs{...}
//
//  or:
//
//          nil
type MasterAuthorizedNetworksConfigResponsePtrInput interface {
	pulumi.Input

	ToMasterAuthorizedNetworksConfigResponsePtrOutput() MasterAuthorizedNetworksConfigResponsePtrOutput
	ToMasterAuthorizedNetworksConfigResponsePtrOutputWithContext(context.Context) MasterAuthorizedNetworksConfigResponsePtrOutput
}

type masterAuthorizedNetworksConfigResponsePtrType MasterAuthorizedNetworksConfigResponseArgs

func MasterAuthorizedNetworksConfigResponsePtr(v *MasterAuthorizedNetworksConfigResponseArgs) MasterAuthorizedNetworksConfigResponsePtrInput {
	return (*masterAuthorizedNetworksConfigResponsePtrType)(v)
}

func (*masterAuthorizedNetworksConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MasterAuthorizedNetworksConfigResponse)(nil)).Elem()
}

func (i *masterAuthorizedNetworksConfigResponsePtrType) ToMasterAuthorizedNetworksConfigResponsePtrOutput() MasterAuthorizedNetworksConfigResponsePtrOutput {
	return i.ToMasterAuthorizedNetworksConfigResponsePtrOutputWithContext(context.Background())
}

func (i *masterAuthorizedNetworksConfigResponsePtrType) ToMasterAuthorizedNetworksConfigResponsePtrOutputWithContext(ctx context.Context) MasterAuthorizedNetworksConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MasterAuthorizedNetworksConfigResponsePtrOutput)
}

// Configuration options for the master authorized networks feature. Enabled master authorized networks will disallow all external traffic to access Kubernetes master through HTTPS except traffic from the given CIDR blocks, Google Compute Engine Public IPs and Google Prod IPs.
type MasterAuthorizedNetworksConfigResponseOutput struct{ *pulumi.OutputState }

func (MasterAuthorizedNetworksConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MasterAuthorizedNetworksConfigResponse)(nil)).Elem()
}

func (o MasterAuthorizedNetworksConfigResponseOutput) ToMasterAuthorizedNetworksConfigResponseOutput() MasterAuthorizedNetworksConfigResponseOutput {
	return o
}

func (o MasterAuthorizedNetworksConfigResponseOutput) ToMasterAuthorizedNetworksConfigResponseOutputWithContext(ctx context.Context) MasterAuthorizedNetworksConfigResponseOutput {
	return o
}

func (o MasterAuthorizedNetworksConfigResponseOutput) ToMasterAuthorizedNetworksConfigResponsePtrOutput() MasterAuthorizedNetworksConfigResponsePtrOutput {
	return o.ToMasterAuthorizedNetworksConfigResponsePtrOutputWithContext(context.Background())
}

func (o MasterAuthorizedNetworksConfigResponseOutput) ToMasterAuthorizedNetworksConfigResponsePtrOutputWithContext(ctx context.Context) MasterAuthorizedNetworksConfigResponsePtrOutput {
	return o.ApplyT(func(v MasterAuthorizedNetworksConfigResponse) *MasterAuthorizedNetworksConfigResponse {
		return &v
	}).(MasterAuthorizedNetworksConfigResponsePtrOutput)
}

// cidr_blocks define up to 50 external networks that could access Kubernetes master through HTTPS.
func (o MasterAuthorizedNetworksConfigResponseOutput) CidrBlocks() CidrBlockResponseArrayOutput {
	return o.ApplyT(func(v MasterAuthorizedNetworksConfigResponse) []CidrBlockResponse { return v.CidrBlocks }).(CidrBlockResponseArrayOutput)
}

// Whether or not master authorized networks is enabled.
func (o MasterAuthorizedNetworksConfigResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v MasterAuthorizedNetworksConfigResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type MasterAuthorizedNetworksConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (MasterAuthorizedNetworksConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MasterAuthorizedNetworksConfigResponse)(nil)).Elem()
}

func (o MasterAuthorizedNetworksConfigResponsePtrOutput) ToMasterAuthorizedNetworksConfigResponsePtrOutput() MasterAuthorizedNetworksConfigResponsePtrOutput {
	return o
}

func (o MasterAuthorizedNetworksConfigResponsePtrOutput) ToMasterAuthorizedNetworksConfigResponsePtrOutputWithContext(ctx context.Context) MasterAuthorizedNetworksConfigResponsePtrOutput {
	return o
}

func (o MasterAuthorizedNetworksConfigResponsePtrOutput) Elem() MasterAuthorizedNetworksConfigResponseOutput {
	return o.ApplyT(func(v *MasterAuthorizedNetworksConfigResponse) MasterAuthorizedNetworksConfigResponse { return *v }).(MasterAuthorizedNetworksConfigResponseOutput)
}

// cidr_blocks define up to 50 external networks that could access Kubernetes master through HTTPS.
func (o MasterAuthorizedNetworksConfigResponsePtrOutput) CidrBlocks() CidrBlockResponseArrayOutput {
	return o.ApplyT(func(v *MasterAuthorizedNetworksConfigResponse) []CidrBlockResponse {
		if v == nil {
			return nil
		}
		return v.CidrBlocks
	}).(CidrBlockResponseArrayOutput)
}

// Whether or not master authorized networks is enabled.
func (o MasterAuthorizedNetworksConfigResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MasterAuthorizedNetworksConfigResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Constraints applied to pods.
type MaxPodsConstraint struct {
	// Constraint enforced on the max num of pods per node.
	MaxPodsPerNode *string `pulumi:"maxPodsPerNode"`
}

// MaxPodsConstraintInput is an input type that accepts MaxPodsConstraintArgs and MaxPodsConstraintOutput values.
// You can construct a concrete instance of `MaxPodsConstraintInput` via:
//
//          MaxPodsConstraintArgs{...}
type MaxPodsConstraintInput interface {
	pulumi.Input

	ToMaxPodsConstraintOutput() MaxPodsConstraintOutput
	ToMaxPodsConstraintOutputWithContext(context.Context) MaxPodsConstraintOutput
}

// Constraints applied to pods.
type MaxPodsConstraintArgs struct {
	// Constraint enforced on the max num of pods per node.
	MaxPodsPerNode pulumi.StringPtrInput `pulumi:"maxPodsPerNode"`
}

func (MaxPodsConstraintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MaxPodsConstraint)(nil)).Elem()
}

func (i MaxPodsConstraintArgs) ToMaxPodsConstraintOutput() MaxPodsConstraintOutput {
	return i.ToMaxPodsConstraintOutputWithContext(context.Background())
}

func (i MaxPodsConstraintArgs) ToMaxPodsConstraintOutputWithContext(ctx context.Context) MaxPodsConstraintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaxPodsConstraintOutput)
}

func (i MaxPodsConstraintArgs) ToMaxPodsConstraintPtrOutput() MaxPodsConstraintPtrOutput {
	return i.ToMaxPodsConstraintPtrOutputWithContext(context.Background())
}

func (i MaxPodsConstraintArgs) ToMaxPodsConstraintPtrOutputWithContext(ctx context.Context) MaxPodsConstraintPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaxPodsConstraintOutput).ToMaxPodsConstraintPtrOutputWithContext(ctx)
}

// MaxPodsConstraintPtrInput is an input type that accepts MaxPodsConstraintArgs, MaxPodsConstraintPtr and MaxPodsConstraintPtrOutput values.
// You can construct a concrete instance of `MaxPodsConstraintPtrInput` via:
//
//          MaxPodsConstraintArgs{...}
//
//  or:
//
//          nil
type MaxPodsConstraintPtrInput interface {
	pulumi.Input

	ToMaxPodsConstraintPtrOutput() MaxPodsConstraintPtrOutput
	ToMaxPodsConstraintPtrOutputWithContext(context.Context) MaxPodsConstraintPtrOutput
}

type maxPodsConstraintPtrType MaxPodsConstraintArgs

func MaxPodsConstraintPtr(v *MaxPodsConstraintArgs) MaxPodsConstraintPtrInput {
	return (*maxPodsConstraintPtrType)(v)
}

func (*maxPodsConstraintPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MaxPodsConstraint)(nil)).Elem()
}

func (i *maxPodsConstraintPtrType) ToMaxPodsConstraintPtrOutput() MaxPodsConstraintPtrOutput {
	return i.ToMaxPodsConstraintPtrOutputWithContext(context.Background())
}

func (i *maxPodsConstraintPtrType) ToMaxPodsConstraintPtrOutputWithContext(ctx context.Context) MaxPodsConstraintPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaxPodsConstraintPtrOutput)
}

// Constraints applied to pods.
type MaxPodsConstraintOutput struct{ *pulumi.OutputState }

func (MaxPodsConstraintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaxPodsConstraint)(nil)).Elem()
}

func (o MaxPodsConstraintOutput) ToMaxPodsConstraintOutput() MaxPodsConstraintOutput {
	return o
}

func (o MaxPodsConstraintOutput) ToMaxPodsConstraintOutputWithContext(ctx context.Context) MaxPodsConstraintOutput {
	return o
}

func (o MaxPodsConstraintOutput) ToMaxPodsConstraintPtrOutput() MaxPodsConstraintPtrOutput {
	return o.ToMaxPodsConstraintPtrOutputWithContext(context.Background())
}

func (o MaxPodsConstraintOutput) ToMaxPodsConstraintPtrOutputWithContext(ctx context.Context) MaxPodsConstraintPtrOutput {
	return o.ApplyT(func(v MaxPodsConstraint) *MaxPodsConstraint {
		return &v
	}).(MaxPodsConstraintPtrOutput)
}

// Constraint enforced on the max num of pods per node.
func (o MaxPodsConstraintOutput) MaxPodsPerNode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaxPodsConstraint) *string { return v.MaxPodsPerNode }).(pulumi.StringPtrOutput)
}

type MaxPodsConstraintPtrOutput struct{ *pulumi.OutputState }

func (MaxPodsConstraintPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MaxPodsConstraint)(nil)).Elem()
}

func (o MaxPodsConstraintPtrOutput) ToMaxPodsConstraintPtrOutput() MaxPodsConstraintPtrOutput {
	return o
}

func (o MaxPodsConstraintPtrOutput) ToMaxPodsConstraintPtrOutputWithContext(ctx context.Context) MaxPodsConstraintPtrOutput {
	return o
}

func (o MaxPodsConstraintPtrOutput) Elem() MaxPodsConstraintOutput {
	return o.ApplyT(func(v *MaxPodsConstraint) MaxPodsConstraint { return *v }).(MaxPodsConstraintOutput)
}

// Constraint enforced on the max num of pods per node.
func (o MaxPodsConstraintPtrOutput) MaxPodsPerNode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaxPodsConstraint) *string {
		if v == nil {
			return nil
		}
		return v.MaxPodsPerNode
	}).(pulumi.StringPtrOutput)
}

// Constraints applied to pods.
type MaxPodsConstraintResponse struct {
	// Constraint enforced on the max num of pods per node.
	MaxPodsPerNode string `pulumi:"maxPodsPerNode"`
}

// MaxPodsConstraintResponseInput is an input type that accepts MaxPodsConstraintResponseArgs and MaxPodsConstraintResponseOutput values.
// You can construct a concrete instance of `MaxPodsConstraintResponseInput` via:
//
//          MaxPodsConstraintResponseArgs{...}
type MaxPodsConstraintResponseInput interface {
	pulumi.Input

	ToMaxPodsConstraintResponseOutput() MaxPodsConstraintResponseOutput
	ToMaxPodsConstraintResponseOutputWithContext(context.Context) MaxPodsConstraintResponseOutput
}

// Constraints applied to pods.
type MaxPodsConstraintResponseArgs struct {
	// Constraint enforced on the max num of pods per node.
	MaxPodsPerNode pulumi.StringInput `pulumi:"maxPodsPerNode"`
}

func (MaxPodsConstraintResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MaxPodsConstraintResponse)(nil)).Elem()
}

func (i MaxPodsConstraintResponseArgs) ToMaxPodsConstraintResponseOutput() MaxPodsConstraintResponseOutput {
	return i.ToMaxPodsConstraintResponseOutputWithContext(context.Background())
}

func (i MaxPodsConstraintResponseArgs) ToMaxPodsConstraintResponseOutputWithContext(ctx context.Context) MaxPodsConstraintResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaxPodsConstraintResponseOutput)
}

func (i MaxPodsConstraintResponseArgs) ToMaxPodsConstraintResponsePtrOutput() MaxPodsConstraintResponsePtrOutput {
	return i.ToMaxPodsConstraintResponsePtrOutputWithContext(context.Background())
}

func (i MaxPodsConstraintResponseArgs) ToMaxPodsConstraintResponsePtrOutputWithContext(ctx context.Context) MaxPodsConstraintResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaxPodsConstraintResponseOutput).ToMaxPodsConstraintResponsePtrOutputWithContext(ctx)
}

// MaxPodsConstraintResponsePtrInput is an input type that accepts MaxPodsConstraintResponseArgs, MaxPodsConstraintResponsePtr and MaxPodsConstraintResponsePtrOutput values.
// You can construct a concrete instance of `MaxPodsConstraintResponsePtrInput` via:
//
//          MaxPodsConstraintResponseArgs{...}
//
//  or:
//
//          nil
type MaxPodsConstraintResponsePtrInput interface {
	pulumi.Input

	ToMaxPodsConstraintResponsePtrOutput() MaxPodsConstraintResponsePtrOutput
	ToMaxPodsConstraintResponsePtrOutputWithContext(context.Context) MaxPodsConstraintResponsePtrOutput
}

type maxPodsConstraintResponsePtrType MaxPodsConstraintResponseArgs

func MaxPodsConstraintResponsePtr(v *MaxPodsConstraintResponseArgs) MaxPodsConstraintResponsePtrInput {
	return (*maxPodsConstraintResponsePtrType)(v)
}

func (*maxPodsConstraintResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MaxPodsConstraintResponse)(nil)).Elem()
}

func (i *maxPodsConstraintResponsePtrType) ToMaxPodsConstraintResponsePtrOutput() MaxPodsConstraintResponsePtrOutput {
	return i.ToMaxPodsConstraintResponsePtrOutputWithContext(context.Background())
}

func (i *maxPodsConstraintResponsePtrType) ToMaxPodsConstraintResponsePtrOutputWithContext(ctx context.Context) MaxPodsConstraintResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaxPodsConstraintResponsePtrOutput)
}

// Constraints applied to pods.
type MaxPodsConstraintResponseOutput struct{ *pulumi.OutputState }

func (MaxPodsConstraintResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaxPodsConstraintResponse)(nil)).Elem()
}

func (o MaxPodsConstraintResponseOutput) ToMaxPodsConstraintResponseOutput() MaxPodsConstraintResponseOutput {
	return o
}

func (o MaxPodsConstraintResponseOutput) ToMaxPodsConstraintResponseOutputWithContext(ctx context.Context) MaxPodsConstraintResponseOutput {
	return o
}

func (o MaxPodsConstraintResponseOutput) ToMaxPodsConstraintResponsePtrOutput() MaxPodsConstraintResponsePtrOutput {
	return o.ToMaxPodsConstraintResponsePtrOutputWithContext(context.Background())
}

func (o MaxPodsConstraintResponseOutput) ToMaxPodsConstraintResponsePtrOutputWithContext(ctx context.Context) MaxPodsConstraintResponsePtrOutput {
	return o.ApplyT(func(v MaxPodsConstraintResponse) *MaxPodsConstraintResponse {
		return &v
	}).(MaxPodsConstraintResponsePtrOutput)
}

// Constraint enforced on the max num of pods per node.
func (o MaxPodsConstraintResponseOutput) MaxPodsPerNode() pulumi.StringOutput {
	return o.ApplyT(func(v MaxPodsConstraintResponse) string { return v.MaxPodsPerNode }).(pulumi.StringOutput)
}

type MaxPodsConstraintResponsePtrOutput struct{ *pulumi.OutputState }

func (MaxPodsConstraintResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MaxPodsConstraintResponse)(nil)).Elem()
}

func (o MaxPodsConstraintResponsePtrOutput) ToMaxPodsConstraintResponsePtrOutput() MaxPodsConstraintResponsePtrOutput {
	return o
}

func (o MaxPodsConstraintResponsePtrOutput) ToMaxPodsConstraintResponsePtrOutputWithContext(ctx context.Context) MaxPodsConstraintResponsePtrOutput {
	return o
}

func (o MaxPodsConstraintResponsePtrOutput) Elem() MaxPodsConstraintResponseOutput {
	return o.ApplyT(func(v *MaxPodsConstraintResponse) MaxPodsConstraintResponse { return *v }).(MaxPodsConstraintResponseOutput)
}

// Constraint enforced on the max num of pods per node.
func (o MaxPodsConstraintResponsePtrOutput) MaxPodsPerNode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaxPodsConstraintResponse) *string {
		if v == nil {
			return nil
		}
		return &v.MaxPodsPerNode
	}).(pulumi.StringPtrOutput)
}

// NetworkConfig reports the relative names of network & subnetwork.
type NetworkConfig struct {
	// Whether the cluster disables default in-node sNAT rules. In-node sNAT rules will be disabled when default_snat_status is disabled. When disabled is set to false, default IP masquerade rules will be applied to the nodes to prevent sNAT on cluster internal traffic.
	DefaultSnatStatus *DefaultSnatStatus `pulumi:"defaultSnatStatus"`
	// Whether Intra-node visibility is enabled for this cluster. This makes same node pod to pod traffic visible for VPC network.
	EnableIntraNodeVisibility *bool `pulumi:"enableIntraNodeVisibility"`
	// The relative name of the Google Compute Engine network(https://cloud.google.com/compute/docs/networks-and-firewalls#networks) to which the cluster is connected. Example: projects/my-project/global/networks/my-network
	Network *string `pulumi:"network"`
	// The desired state of IPv6 connectivity to Google Services. By default, no private IPv6 access to or from Google Services (all access will be via IPv4)
	PrivateIpv6GoogleAccess *string `pulumi:"privateIpv6GoogleAccess"`
	// The relative name of the Google Compute Engine [subnetwork](https://cloud.google.com/compute/docs/vpc) to which the cluster is connected. Example: projects/my-project/regions/us-central1/subnetworks/my-subnet
	Subnetwork *string `pulumi:"subnetwork"`
}

// NetworkConfigInput is an input type that accepts NetworkConfigArgs and NetworkConfigOutput values.
// You can construct a concrete instance of `NetworkConfigInput` via:
//
//          NetworkConfigArgs{...}
type NetworkConfigInput interface {
	pulumi.Input

	ToNetworkConfigOutput() NetworkConfigOutput
	ToNetworkConfigOutputWithContext(context.Context) NetworkConfigOutput
}

// NetworkConfig reports the relative names of network & subnetwork.
type NetworkConfigArgs struct {
	// Whether the cluster disables default in-node sNAT rules. In-node sNAT rules will be disabled when default_snat_status is disabled. When disabled is set to false, default IP masquerade rules will be applied to the nodes to prevent sNAT on cluster internal traffic.
	DefaultSnatStatus DefaultSnatStatusPtrInput `pulumi:"defaultSnatStatus"`
	// Whether Intra-node visibility is enabled for this cluster. This makes same node pod to pod traffic visible for VPC network.
	EnableIntraNodeVisibility pulumi.BoolPtrInput `pulumi:"enableIntraNodeVisibility"`
	// The relative name of the Google Compute Engine network(https://cloud.google.com/compute/docs/networks-and-firewalls#networks) to which the cluster is connected. Example: projects/my-project/global/networks/my-network
	Network pulumi.StringPtrInput `pulumi:"network"`
	// The desired state of IPv6 connectivity to Google Services. By default, no private IPv6 access to or from Google Services (all access will be via IPv4)
	PrivateIpv6GoogleAccess *NetworkConfigPrivateIpv6GoogleAccess `pulumi:"privateIpv6GoogleAccess"`
	// The relative name of the Google Compute Engine [subnetwork](https://cloud.google.com/compute/docs/vpc) to which the cluster is connected. Example: projects/my-project/regions/us-central1/subnetworks/my-subnet
	Subnetwork pulumi.StringPtrInput `pulumi:"subnetwork"`
}

func (NetworkConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkConfig)(nil)).Elem()
}

func (i NetworkConfigArgs) ToNetworkConfigOutput() NetworkConfigOutput {
	return i.ToNetworkConfigOutputWithContext(context.Background())
}

func (i NetworkConfigArgs) ToNetworkConfigOutputWithContext(ctx context.Context) NetworkConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConfigOutput)
}

func (i NetworkConfigArgs) ToNetworkConfigPtrOutput() NetworkConfigPtrOutput {
	return i.ToNetworkConfigPtrOutputWithContext(context.Background())
}

func (i NetworkConfigArgs) ToNetworkConfigPtrOutputWithContext(ctx context.Context) NetworkConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConfigOutput).ToNetworkConfigPtrOutputWithContext(ctx)
}

// NetworkConfigPtrInput is an input type that accepts NetworkConfigArgs, NetworkConfigPtr and NetworkConfigPtrOutput values.
// You can construct a concrete instance of `NetworkConfigPtrInput` via:
//
//          NetworkConfigArgs{...}
//
//  or:
//
//          nil
type NetworkConfigPtrInput interface {
	pulumi.Input

	ToNetworkConfigPtrOutput() NetworkConfigPtrOutput
	ToNetworkConfigPtrOutputWithContext(context.Context) NetworkConfigPtrOutput
}

type networkConfigPtrType NetworkConfigArgs

func NetworkConfigPtr(v *NetworkConfigArgs) NetworkConfigPtrInput {
	return (*networkConfigPtrType)(v)
}

func (*networkConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkConfig)(nil)).Elem()
}

func (i *networkConfigPtrType) ToNetworkConfigPtrOutput() NetworkConfigPtrOutput {
	return i.ToNetworkConfigPtrOutputWithContext(context.Background())
}

func (i *networkConfigPtrType) ToNetworkConfigPtrOutputWithContext(ctx context.Context) NetworkConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConfigPtrOutput)
}

// NetworkConfig reports the relative names of network & subnetwork.
type NetworkConfigOutput struct{ *pulumi.OutputState }

func (NetworkConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkConfig)(nil)).Elem()
}

func (o NetworkConfigOutput) ToNetworkConfigOutput() NetworkConfigOutput {
	return o
}

func (o NetworkConfigOutput) ToNetworkConfigOutputWithContext(ctx context.Context) NetworkConfigOutput {
	return o
}

func (o NetworkConfigOutput) ToNetworkConfigPtrOutput() NetworkConfigPtrOutput {
	return o.ToNetworkConfigPtrOutputWithContext(context.Background())
}

func (o NetworkConfigOutput) ToNetworkConfigPtrOutputWithContext(ctx context.Context) NetworkConfigPtrOutput {
	return o.ApplyT(func(v NetworkConfig) *NetworkConfig {
		return &v
	}).(NetworkConfigPtrOutput)
}

// Whether the cluster disables default in-node sNAT rules. In-node sNAT rules will be disabled when default_snat_status is disabled. When disabled is set to false, default IP masquerade rules will be applied to the nodes to prevent sNAT on cluster internal traffic.
func (o NetworkConfigOutput) DefaultSnatStatus() DefaultSnatStatusPtrOutput {
	return o.ApplyT(func(v NetworkConfig) *DefaultSnatStatus { return v.DefaultSnatStatus }).(DefaultSnatStatusPtrOutput)
}

// Whether Intra-node visibility is enabled for this cluster. This makes same node pod to pod traffic visible for VPC network.
func (o NetworkConfigOutput) EnableIntraNodeVisibility() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworkConfig) *bool { return v.EnableIntraNodeVisibility }).(pulumi.BoolPtrOutput)
}

// The relative name of the Google Compute Engine network(https://cloud.google.com/compute/docs/networks-and-firewalls#networks) to which the cluster is connected. Example: projects/my-project/global/networks/my-network
func (o NetworkConfigOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkConfig) *string { return v.Network }).(pulumi.StringPtrOutput)
}

// The desired state of IPv6 connectivity to Google Services. By default, no private IPv6 access to or from Google Services (all access will be via IPv4)
func (o NetworkConfigOutput) PrivateIpv6GoogleAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkConfig) *string { return v.PrivateIpv6GoogleAccess }).(pulumi.StringPtrOutput)
}

// The relative name of the Google Compute Engine [subnetwork](https://cloud.google.com/compute/docs/vpc) to which the cluster is connected. Example: projects/my-project/regions/us-central1/subnetworks/my-subnet
func (o NetworkConfigOutput) Subnetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkConfig) *string { return v.Subnetwork }).(pulumi.StringPtrOutput)
}

type NetworkConfigPtrOutput struct{ *pulumi.OutputState }

func (NetworkConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkConfig)(nil)).Elem()
}

func (o NetworkConfigPtrOutput) ToNetworkConfigPtrOutput() NetworkConfigPtrOutput {
	return o
}

func (o NetworkConfigPtrOutput) ToNetworkConfigPtrOutputWithContext(ctx context.Context) NetworkConfigPtrOutput {
	return o
}

func (o NetworkConfigPtrOutput) Elem() NetworkConfigOutput {
	return o.ApplyT(func(v *NetworkConfig) NetworkConfig { return *v }).(NetworkConfigOutput)
}

// Whether the cluster disables default in-node sNAT rules. In-node sNAT rules will be disabled when default_snat_status is disabled. When disabled is set to false, default IP masquerade rules will be applied to the nodes to prevent sNAT on cluster internal traffic.
func (o NetworkConfigPtrOutput) DefaultSnatStatus() DefaultSnatStatusPtrOutput {
	return o.ApplyT(func(v *NetworkConfig) *DefaultSnatStatus {
		if v == nil {
			return nil
		}
		return v.DefaultSnatStatus
	}).(DefaultSnatStatusPtrOutput)
}

// Whether Intra-node visibility is enabled for this cluster. This makes same node pod to pod traffic visible for VPC network.
func (o NetworkConfigPtrOutput) EnableIntraNodeVisibility() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworkConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableIntraNodeVisibility
	}).(pulumi.BoolPtrOutput)
}

// The relative name of the Google Compute Engine network(https://cloud.google.com/compute/docs/networks-and-firewalls#networks) to which the cluster is connected. Example: projects/my-project/global/networks/my-network
func (o NetworkConfigPtrOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkConfig) *string {
		if v == nil {
			return nil
		}
		return v.Network
	}).(pulumi.StringPtrOutput)
}

// The desired state of IPv6 connectivity to Google Services. By default, no private IPv6 access to or from Google Services (all access will be via IPv4)
func (o NetworkConfigPtrOutput) PrivateIpv6GoogleAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkConfig) *string {
		if v == nil {
			return nil
		}
		return v.PrivateIpv6GoogleAccess
	}).(pulumi.StringPtrOutput)
}

// The relative name of the Google Compute Engine [subnetwork](https://cloud.google.com/compute/docs/vpc) to which the cluster is connected. Example: projects/my-project/regions/us-central1/subnetworks/my-subnet
func (o NetworkConfigPtrOutput) Subnetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkConfig) *string {
		if v == nil {
			return nil
		}
		return v.Subnetwork
	}).(pulumi.StringPtrOutput)
}

// NetworkConfig reports the relative names of network & subnetwork.
type NetworkConfigResponse struct {
	// Whether the cluster disables default in-node sNAT rules. In-node sNAT rules will be disabled when default_snat_status is disabled. When disabled is set to false, default IP masquerade rules will be applied to the nodes to prevent sNAT on cluster internal traffic.
	DefaultSnatStatus DefaultSnatStatusResponse `pulumi:"defaultSnatStatus"`
	// Whether Intra-node visibility is enabled for this cluster. This makes same node pod to pod traffic visible for VPC network.
	EnableIntraNodeVisibility bool `pulumi:"enableIntraNodeVisibility"`
	// The relative name of the Google Compute Engine network(https://cloud.google.com/compute/docs/networks-and-firewalls#networks) to which the cluster is connected. Example: projects/my-project/global/networks/my-network
	Network string `pulumi:"network"`
	// The desired state of IPv6 connectivity to Google Services. By default, no private IPv6 access to or from Google Services (all access will be via IPv4)
	PrivateIpv6GoogleAccess string `pulumi:"privateIpv6GoogleAccess"`
	// The relative name of the Google Compute Engine [subnetwork](https://cloud.google.com/compute/docs/vpc) to which the cluster is connected. Example: projects/my-project/regions/us-central1/subnetworks/my-subnet
	Subnetwork string `pulumi:"subnetwork"`
}

// NetworkConfigResponseInput is an input type that accepts NetworkConfigResponseArgs and NetworkConfigResponseOutput values.
// You can construct a concrete instance of `NetworkConfigResponseInput` via:
//
//          NetworkConfigResponseArgs{...}
type NetworkConfigResponseInput interface {
	pulumi.Input

	ToNetworkConfigResponseOutput() NetworkConfigResponseOutput
	ToNetworkConfigResponseOutputWithContext(context.Context) NetworkConfigResponseOutput
}

// NetworkConfig reports the relative names of network & subnetwork.
type NetworkConfigResponseArgs struct {
	// Whether the cluster disables default in-node sNAT rules. In-node sNAT rules will be disabled when default_snat_status is disabled. When disabled is set to false, default IP masquerade rules will be applied to the nodes to prevent sNAT on cluster internal traffic.
	DefaultSnatStatus DefaultSnatStatusResponseInput `pulumi:"defaultSnatStatus"`
	// Whether Intra-node visibility is enabled for this cluster. This makes same node pod to pod traffic visible for VPC network.
	EnableIntraNodeVisibility pulumi.BoolInput `pulumi:"enableIntraNodeVisibility"`
	// The relative name of the Google Compute Engine network(https://cloud.google.com/compute/docs/networks-and-firewalls#networks) to which the cluster is connected. Example: projects/my-project/global/networks/my-network
	Network pulumi.StringInput `pulumi:"network"`
	// The desired state of IPv6 connectivity to Google Services. By default, no private IPv6 access to or from Google Services (all access will be via IPv4)
	PrivateIpv6GoogleAccess pulumi.StringInput `pulumi:"privateIpv6GoogleAccess"`
	// The relative name of the Google Compute Engine [subnetwork](https://cloud.google.com/compute/docs/vpc) to which the cluster is connected. Example: projects/my-project/regions/us-central1/subnetworks/my-subnet
	Subnetwork pulumi.StringInput `pulumi:"subnetwork"`
}

func (NetworkConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkConfigResponse)(nil)).Elem()
}

func (i NetworkConfigResponseArgs) ToNetworkConfigResponseOutput() NetworkConfigResponseOutput {
	return i.ToNetworkConfigResponseOutputWithContext(context.Background())
}

func (i NetworkConfigResponseArgs) ToNetworkConfigResponseOutputWithContext(ctx context.Context) NetworkConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConfigResponseOutput)
}

func (i NetworkConfigResponseArgs) ToNetworkConfigResponsePtrOutput() NetworkConfigResponsePtrOutput {
	return i.ToNetworkConfigResponsePtrOutputWithContext(context.Background())
}

func (i NetworkConfigResponseArgs) ToNetworkConfigResponsePtrOutputWithContext(ctx context.Context) NetworkConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConfigResponseOutput).ToNetworkConfigResponsePtrOutputWithContext(ctx)
}

// NetworkConfigResponsePtrInput is an input type that accepts NetworkConfigResponseArgs, NetworkConfigResponsePtr and NetworkConfigResponsePtrOutput values.
// You can construct a concrete instance of `NetworkConfigResponsePtrInput` via:
//
//          NetworkConfigResponseArgs{...}
//
//  or:
//
//          nil
type NetworkConfigResponsePtrInput interface {
	pulumi.Input

	ToNetworkConfigResponsePtrOutput() NetworkConfigResponsePtrOutput
	ToNetworkConfigResponsePtrOutputWithContext(context.Context) NetworkConfigResponsePtrOutput
}

type networkConfigResponsePtrType NetworkConfigResponseArgs

func NetworkConfigResponsePtr(v *NetworkConfigResponseArgs) NetworkConfigResponsePtrInput {
	return (*networkConfigResponsePtrType)(v)
}

func (*networkConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkConfigResponse)(nil)).Elem()
}

func (i *networkConfigResponsePtrType) ToNetworkConfigResponsePtrOutput() NetworkConfigResponsePtrOutput {
	return i.ToNetworkConfigResponsePtrOutputWithContext(context.Background())
}

func (i *networkConfigResponsePtrType) ToNetworkConfigResponsePtrOutputWithContext(ctx context.Context) NetworkConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConfigResponsePtrOutput)
}

// NetworkConfig reports the relative names of network & subnetwork.
type NetworkConfigResponseOutput struct{ *pulumi.OutputState }

func (NetworkConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkConfigResponse)(nil)).Elem()
}

func (o NetworkConfigResponseOutput) ToNetworkConfigResponseOutput() NetworkConfigResponseOutput {
	return o
}

func (o NetworkConfigResponseOutput) ToNetworkConfigResponseOutputWithContext(ctx context.Context) NetworkConfigResponseOutput {
	return o
}

func (o NetworkConfigResponseOutput) ToNetworkConfigResponsePtrOutput() NetworkConfigResponsePtrOutput {
	return o.ToNetworkConfigResponsePtrOutputWithContext(context.Background())
}

func (o NetworkConfigResponseOutput) ToNetworkConfigResponsePtrOutputWithContext(ctx context.Context) NetworkConfigResponsePtrOutput {
	return o.ApplyT(func(v NetworkConfigResponse) *NetworkConfigResponse {
		return &v
	}).(NetworkConfigResponsePtrOutput)
}

// Whether the cluster disables default in-node sNAT rules. In-node sNAT rules will be disabled when default_snat_status is disabled. When disabled is set to false, default IP masquerade rules will be applied to the nodes to prevent sNAT on cluster internal traffic.
func (o NetworkConfigResponseOutput) DefaultSnatStatus() DefaultSnatStatusResponseOutput {
	return o.ApplyT(func(v NetworkConfigResponse) DefaultSnatStatusResponse { return v.DefaultSnatStatus }).(DefaultSnatStatusResponseOutput)
}

// Whether Intra-node visibility is enabled for this cluster. This makes same node pod to pod traffic visible for VPC network.
func (o NetworkConfigResponseOutput) EnableIntraNodeVisibility() pulumi.BoolOutput {
	return o.ApplyT(func(v NetworkConfigResponse) bool { return v.EnableIntraNodeVisibility }).(pulumi.BoolOutput)
}

// The relative name of the Google Compute Engine network(https://cloud.google.com/compute/docs/networks-and-firewalls#networks) to which the cluster is connected. Example: projects/my-project/global/networks/my-network
func (o NetworkConfigResponseOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkConfigResponse) string { return v.Network }).(pulumi.StringOutput)
}

// The desired state of IPv6 connectivity to Google Services. By default, no private IPv6 access to or from Google Services (all access will be via IPv4)
func (o NetworkConfigResponseOutput) PrivateIpv6GoogleAccess() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkConfigResponse) string { return v.PrivateIpv6GoogleAccess }).(pulumi.StringOutput)
}

// The relative name of the Google Compute Engine [subnetwork](https://cloud.google.com/compute/docs/vpc) to which the cluster is connected. Example: projects/my-project/regions/us-central1/subnetworks/my-subnet
func (o NetworkConfigResponseOutput) Subnetwork() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkConfigResponse) string { return v.Subnetwork }).(pulumi.StringOutput)
}

type NetworkConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (NetworkConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkConfigResponse)(nil)).Elem()
}

func (o NetworkConfigResponsePtrOutput) ToNetworkConfigResponsePtrOutput() NetworkConfigResponsePtrOutput {
	return o
}

func (o NetworkConfigResponsePtrOutput) ToNetworkConfigResponsePtrOutputWithContext(ctx context.Context) NetworkConfigResponsePtrOutput {
	return o
}

func (o NetworkConfigResponsePtrOutput) Elem() NetworkConfigResponseOutput {
	return o.ApplyT(func(v *NetworkConfigResponse) NetworkConfigResponse { return *v }).(NetworkConfigResponseOutput)
}

// Whether the cluster disables default in-node sNAT rules. In-node sNAT rules will be disabled when default_snat_status is disabled. When disabled is set to false, default IP masquerade rules will be applied to the nodes to prevent sNAT on cluster internal traffic.
func (o NetworkConfigResponsePtrOutput) DefaultSnatStatus() DefaultSnatStatusResponsePtrOutput {
	return o.ApplyT(func(v *NetworkConfigResponse) *DefaultSnatStatusResponse {
		if v == nil {
			return nil
		}
		return &v.DefaultSnatStatus
	}).(DefaultSnatStatusResponsePtrOutput)
}

// Whether Intra-node visibility is enabled for this cluster. This makes same node pod to pod traffic visible for VPC network.
func (o NetworkConfigResponsePtrOutput) EnableIntraNodeVisibility() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworkConfigResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.EnableIntraNodeVisibility
	}).(pulumi.BoolPtrOutput)
}

// The relative name of the Google Compute Engine network(https://cloud.google.com/compute/docs/networks-and-firewalls#networks) to which the cluster is connected. Example: projects/my-project/global/networks/my-network
func (o NetworkConfigResponsePtrOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Network
	}).(pulumi.StringPtrOutput)
}

// The desired state of IPv6 connectivity to Google Services. By default, no private IPv6 access to or from Google Services (all access will be via IPv4)
func (o NetworkConfigResponsePtrOutput) PrivateIpv6GoogleAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrivateIpv6GoogleAccess
	}).(pulumi.StringPtrOutput)
}

// The relative name of the Google Compute Engine [subnetwork](https://cloud.google.com/compute/docs/vpc) to which the cluster is connected. Example: projects/my-project/regions/us-central1/subnetworks/my-subnet
func (o NetworkConfigResponsePtrOutput) Subnetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Subnetwork
	}).(pulumi.StringPtrOutput)
}

// Configuration options for the NetworkPolicy feature. https://kubernetes.io/docs/concepts/services-networking/networkpolicies/
type NetworkPolicy struct {
	// Whether network policy is enabled on the cluster.
	Enabled *bool `pulumi:"enabled"`
	// The selected network policy provider.
	Provider *string `pulumi:"provider"`
}

// NetworkPolicyInput is an input type that accepts NetworkPolicyArgs and NetworkPolicyOutput values.
// You can construct a concrete instance of `NetworkPolicyInput` via:
//
//          NetworkPolicyArgs{...}
type NetworkPolicyInput interface {
	pulumi.Input

	ToNetworkPolicyOutput() NetworkPolicyOutput
	ToNetworkPolicyOutputWithContext(context.Context) NetworkPolicyOutput
}

// Configuration options for the NetworkPolicy feature. https://kubernetes.io/docs/concepts/services-networking/networkpolicies/
type NetworkPolicyArgs struct {
	// Whether network policy is enabled on the cluster.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The selected network policy provider.
	Provider *NetworkPolicyProvider `pulumi:"provider"`
}

func (NetworkPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicy)(nil)).Elem()
}

func (i NetworkPolicyArgs) ToNetworkPolicyOutput() NetworkPolicyOutput {
	return i.ToNetworkPolicyOutputWithContext(context.Background())
}

func (i NetworkPolicyArgs) ToNetworkPolicyOutputWithContext(ctx context.Context) NetworkPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicyOutput)
}

func (i NetworkPolicyArgs) ToNetworkPolicyPtrOutput() NetworkPolicyPtrOutput {
	return i.ToNetworkPolicyPtrOutputWithContext(context.Background())
}

func (i NetworkPolicyArgs) ToNetworkPolicyPtrOutputWithContext(ctx context.Context) NetworkPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicyOutput).ToNetworkPolicyPtrOutputWithContext(ctx)
}

// NetworkPolicyPtrInput is an input type that accepts NetworkPolicyArgs, NetworkPolicyPtr and NetworkPolicyPtrOutput values.
// You can construct a concrete instance of `NetworkPolicyPtrInput` via:
//
//          NetworkPolicyArgs{...}
//
//  or:
//
//          nil
type NetworkPolicyPtrInput interface {
	pulumi.Input

	ToNetworkPolicyPtrOutput() NetworkPolicyPtrOutput
	ToNetworkPolicyPtrOutputWithContext(context.Context) NetworkPolicyPtrOutput
}

type networkPolicyPtrType NetworkPolicyArgs

func NetworkPolicyPtr(v *NetworkPolicyArgs) NetworkPolicyPtrInput {
	return (*networkPolicyPtrType)(v)
}

func (*networkPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkPolicy)(nil)).Elem()
}

func (i *networkPolicyPtrType) ToNetworkPolicyPtrOutput() NetworkPolicyPtrOutput {
	return i.ToNetworkPolicyPtrOutputWithContext(context.Background())
}

func (i *networkPolicyPtrType) ToNetworkPolicyPtrOutputWithContext(ctx context.Context) NetworkPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicyPtrOutput)
}

// Configuration options for the NetworkPolicy feature. https://kubernetes.io/docs/concepts/services-networking/networkpolicies/
type NetworkPolicyOutput struct{ *pulumi.OutputState }

func (NetworkPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicy)(nil)).Elem()
}

func (o NetworkPolicyOutput) ToNetworkPolicyOutput() NetworkPolicyOutput {
	return o
}

func (o NetworkPolicyOutput) ToNetworkPolicyOutputWithContext(ctx context.Context) NetworkPolicyOutput {
	return o
}

func (o NetworkPolicyOutput) ToNetworkPolicyPtrOutput() NetworkPolicyPtrOutput {
	return o.ToNetworkPolicyPtrOutputWithContext(context.Background())
}

func (o NetworkPolicyOutput) ToNetworkPolicyPtrOutputWithContext(ctx context.Context) NetworkPolicyPtrOutput {
	return o.ApplyT(func(v NetworkPolicy) *NetworkPolicy {
		return &v
	}).(NetworkPolicyPtrOutput)
}

// Whether network policy is enabled on the cluster.
func (o NetworkPolicyOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworkPolicy) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The selected network policy provider.
func (o NetworkPolicyOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkPolicy) *string { return v.Provider }).(pulumi.StringPtrOutput)
}

type NetworkPolicyPtrOutput struct{ *pulumi.OutputState }

func (NetworkPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkPolicy)(nil)).Elem()
}

func (o NetworkPolicyPtrOutput) ToNetworkPolicyPtrOutput() NetworkPolicyPtrOutput {
	return o
}

func (o NetworkPolicyPtrOutput) ToNetworkPolicyPtrOutputWithContext(ctx context.Context) NetworkPolicyPtrOutput {
	return o
}

func (o NetworkPolicyPtrOutput) Elem() NetworkPolicyOutput {
	return o.ApplyT(func(v *NetworkPolicy) NetworkPolicy { return *v }).(NetworkPolicyOutput)
}

// Whether network policy is enabled on the cluster.
func (o NetworkPolicyPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworkPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The selected network policy provider.
func (o NetworkPolicyPtrOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkPolicy) *string {
		if v == nil {
			return nil
		}
		return v.Provider
	}).(pulumi.StringPtrOutput)
}

// Configuration for NetworkPolicy. This only tracks whether the addon is enabled or not on the Master, it does not track whether network policy is enabled for the nodes.
type NetworkPolicyConfig struct {
	// Whether NetworkPolicy is enabled for this cluster.
	Disabled *bool `pulumi:"disabled"`
}

// NetworkPolicyConfigInput is an input type that accepts NetworkPolicyConfigArgs and NetworkPolicyConfigOutput values.
// You can construct a concrete instance of `NetworkPolicyConfigInput` via:
//
//          NetworkPolicyConfigArgs{...}
type NetworkPolicyConfigInput interface {
	pulumi.Input

	ToNetworkPolicyConfigOutput() NetworkPolicyConfigOutput
	ToNetworkPolicyConfigOutputWithContext(context.Context) NetworkPolicyConfigOutput
}

// Configuration for NetworkPolicy. This only tracks whether the addon is enabled or not on the Master, it does not track whether network policy is enabled for the nodes.
type NetworkPolicyConfigArgs struct {
	// Whether NetworkPolicy is enabled for this cluster.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
}

func (NetworkPolicyConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicyConfig)(nil)).Elem()
}

func (i NetworkPolicyConfigArgs) ToNetworkPolicyConfigOutput() NetworkPolicyConfigOutput {
	return i.ToNetworkPolicyConfigOutputWithContext(context.Background())
}

func (i NetworkPolicyConfigArgs) ToNetworkPolicyConfigOutputWithContext(ctx context.Context) NetworkPolicyConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicyConfigOutput)
}

func (i NetworkPolicyConfigArgs) ToNetworkPolicyConfigPtrOutput() NetworkPolicyConfigPtrOutput {
	return i.ToNetworkPolicyConfigPtrOutputWithContext(context.Background())
}

func (i NetworkPolicyConfigArgs) ToNetworkPolicyConfigPtrOutputWithContext(ctx context.Context) NetworkPolicyConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicyConfigOutput).ToNetworkPolicyConfigPtrOutputWithContext(ctx)
}

// NetworkPolicyConfigPtrInput is an input type that accepts NetworkPolicyConfigArgs, NetworkPolicyConfigPtr and NetworkPolicyConfigPtrOutput values.
// You can construct a concrete instance of `NetworkPolicyConfigPtrInput` via:
//
//          NetworkPolicyConfigArgs{...}
//
//  or:
//
//          nil
type NetworkPolicyConfigPtrInput interface {
	pulumi.Input

	ToNetworkPolicyConfigPtrOutput() NetworkPolicyConfigPtrOutput
	ToNetworkPolicyConfigPtrOutputWithContext(context.Context) NetworkPolicyConfigPtrOutput
}

type networkPolicyConfigPtrType NetworkPolicyConfigArgs

func NetworkPolicyConfigPtr(v *NetworkPolicyConfigArgs) NetworkPolicyConfigPtrInput {
	return (*networkPolicyConfigPtrType)(v)
}

func (*networkPolicyConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkPolicyConfig)(nil)).Elem()
}

func (i *networkPolicyConfigPtrType) ToNetworkPolicyConfigPtrOutput() NetworkPolicyConfigPtrOutput {
	return i.ToNetworkPolicyConfigPtrOutputWithContext(context.Background())
}

func (i *networkPolicyConfigPtrType) ToNetworkPolicyConfigPtrOutputWithContext(ctx context.Context) NetworkPolicyConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicyConfigPtrOutput)
}

// Configuration for NetworkPolicy. This only tracks whether the addon is enabled or not on the Master, it does not track whether network policy is enabled for the nodes.
type NetworkPolicyConfigOutput struct{ *pulumi.OutputState }

func (NetworkPolicyConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicyConfig)(nil)).Elem()
}

func (o NetworkPolicyConfigOutput) ToNetworkPolicyConfigOutput() NetworkPolicyConfigOutput {
	return o
}

func (o NetworkPolicyConfigOutput) ToNetworkPolicyConfigOutputWithContext(ctx context.Context) NetworkPolicyConfigOutput {
	return o
}

func (o NetworkPolicyConfigOutput) ToNetworkPolicyConfigPtrOutput() NetworkPolicyConfigPtrOutput {
	return o.ToNetworkPolicyConfigPtrOutputWithContext(context.Background())
}

func (o NetworkPolicyConfigOutput) ToNetworkPolicyConfigPtrOutputWithContext(ctx context.Context) NetworkPolicyConfigPtrOutput {
	return o.ApplyT(func(v NetworkPolicyConfig) *NetworkPolicyConfig {
		return &v
	}).(NetworkPolicyConfigPtrOutput)
}

// Whether NetworkPolicy is enabled for this cluster.
func (o NetworkPolicyConfigOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworkPolicyConfig) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

type NetworkPolicyConfigPtrOutput struct{ *pulumi.OutputState }

func (NetworkPolicyConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkPolicyConfig)(nil)).Elem()
}

func (o NetworkPolicyConfigPtrOutput) ToNetworkPolicyConfigPtrOutput() NetworkPolicyConfigPtrOutput {
	return o
}

func (o NetworkPolicyConfigPtrOutput) ToNetworkPolicyConfigPtrOutputWithContext(ctx context.Context) NetworkPolicyConfigPtrOutput {
	return o
}

func (o NetworkPolicyConfigPtrOutput) Elem() NetworkPolicyConfigOutput {
	return o.ApplyT(func(v *NetworkPolicyConfig) NetworkPolicyConfig { return *v }).(NetworkPolicyConfigOutput)
}

// Whether NetworkPolicy is enabled for this cluster.
func (o NetworkPolicyConfigPtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworkPolicyConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// Configuration for NetworkPolicy. This only tracks whether the addon is enabled or not on the Master, it does not track whether network policy is enabled for the nodes.
type NetworkPolicyConfigResponse struct {
	// Whether NetworkPolicy is enabled for this cluster.
	Disabled bool `pulumi:"disabled"`
}

// NetworkPolicyConfigResponseInput is an input type that accepts NetworkPolicyConfigResponseArgs and NetworkPolicyConfigResponseOutput values.
// You can construct a concrete instance of `NetworkPolicyConfigResponseInput` via:
//
//          NetworkPolicyConfigResponseArgs{...}
type NetworkPolicyConfigResponseInput interface {
	pulumi.Input

	ToNetworkPolicyConfigResponseOutput() NetworkPolicyConfigResponseOutput
	ToNetworkPolicyConfigResponseOutputWithContext(context.Context) NetworkPolicyConfigResponseOutput
}

// Configuration for NetworkPolicy. This only tracks whether the addon is enabled or not on the Master, it does not track whether network policy is enabled for the nodes.
type NetworkPolicyConfigResponseArgs struct {
	// Whether NetworkPolicy is enabled for this cluster.
	Disabled pulumi.BoolInput `pulumi:"disabled"`
}

func (NetworkPolicyConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicyConfigResponse)(nil)).Elem()
}

func (i NetworkPolicyConfigResponseArgs) ToNetworkPolicyConfigResponseOutput() NetworkPolicyConfigResponseOutput {
	return i.ToNetworkPolicyConfigResponseOutputWithContext(context.Background())
}

func (i NetworkPolicyConfigResponseArgs) ToNetworkPolicyConfigResponseOutputWithContext(ctx context.Context) NetworkPolicyConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicyConfigResponseOutput)
}

func (i NetworkPolicyConfigResponseArgs) ToNetworkPolicyConfigResponsePtrOutput() NetworkPolicyConfigResponsePtrOutput {
	return i.ToNetworkPolicyConfigResponsePtrOutputWithContext(context.Background())
}

func (i NetworkPolicyConfigResponseArgs) ToNetworkPolicyConfigResponsePtrOutputWithContext(ctx context.Context) NetworkPolicyConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicyConfigResponseOutput).ToNetworkPolicyConfigResponsePtrOutputWithContext(ctx)
}

// NetworkPolicyConfigResponsePtrInput is an input type that accepts NetworkPolicyConfigResponseArgs, NetworkPolicyConfigResponsePtr and NetworkPolicyConfigResponsePtrOutput values.
// You can construct a concrete instance of `NetworkPolicyConfigResponsePtrInput` via:
//
//          NetworkPolicyConfigResponseArgs{...}
//
//  or:
//
//          nil
type NetworkPolicyConfigResponsePtrInput interface {
	pulumi.Input

	ToNetworkPolicyConfigResponsePtrOutput() NetworkPolicyConfigResponsePtrOutput
	ToNetworkPolicyConfigResponsePtrOutputWithContext(context.Context) NetworkPolicyConfigResponsePtrOutput
}

type networkPolicyConfigResponsePtrType NetworkPolicyConfigResponseArgs

func NetworkPolicyConfigResponsePtr(v *NetworkPolicyConfigResponseArgs) NetworkPolicyConfigResponsePtrInput {
	return (*networkPolicyConfigResponsePtrType)(v)
}

func (*networkPolicyConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkPolicyConfigResponse)(nil)).Elem()
}

func (i *networkPolicyConfigResponsePtrType) ToNetworkPolicyConfigResponsePtrOutput() NetworkPolicyConfigResponsePtrOutput {
	return i.ToNetworkPolicyConfigResponsePtrOutputWithContext(context.Background())
}

func (i *networkPolicyConfigResponsePtrType) ToNetworkPolicyConfigResponsePtrOutputWithContext(ctx context.Context) NetworkPolicyConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicyConfigResponsePtrOutput)
}

// Configuration for NetworkPolicy. This only tracks whether the addon is enabled or not on the Master, it does not track whether network policy is enabled for the nodes.
type NetworkPolicyConfigResponseOutput struct{ *pulumi.OutputState }

func (NetworkPolicyConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicyConfigResponse)(nil)).Elem()
}

func (o NetworkPolicyConfigResponseOutput) ToNetworkPolicyConfigResponseOutput() NetworkPolicyConfigResponseOutput {
	return o
}

func (o NetworkPolicyConfigResponseOutput) ToNetworkPolicyConfigResponseOutputWithContext(ctx context.Context) NetworkPolicyConfigResponseOutput {
	return o
}

func (o NetworkPolicyConfigResponseOutput) ToNetworkPolicyConfigResponsePtrOutput() NetworkPolicyConfigResponsePtrOutput {
	return o.ToNetworkPolicyConfigResponsePtrOutputWithContext(context.Background())
}

func (o NetworkPolicyConfigResponseOutput) ToNetworkPolicyConfigResponsePtrOutputWithContext(ctx context.Context) NetworkPolicyConfigResponsePtrOutput {
	return o.ApplyT(func(v NetworkPolicyConfigResponse) *NetworkPolicyConfigResponse {
		return &v
	}).(NetworkPolicyConfigResponsePtrOutput)
}

// Whether NetworkPolicy is enabled for this cluster.
func (o NetworkPolicyConfigResponseOutput) Disabled() pulumi.BoolOutput {
	return o.ApplyT(func(v NetworkPolicyConfigResponse) bool { return v.Disabled }).(pulumi.BoolOutput)
}

type NetworkPolicyConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (NetworkPolicyConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkPolicyConfigResponse)(nil)).Elem()
}

func (o NetworkPolicyConfigResponsePtrOutput) ToNetworkPolicyConfigResponsePtrOutput() NetworkPolicyConfigResponsePtrOutput {
	return o
}

func (o NetworkPolicyConfigResponsePtrOutput) ToNetworkPolicyConfigResponsePtrOutputWithContext(ctx context.Context) NetworkPolicyConfigResponsePtrOutput {
	return o
}

func (o NetworkPolicyConfigResponsePtrOutput) Elem() NetworkPolicyConfigResponseOutput {
	return o.ApplyT(func(v *NetworkPolicyConfigResponse) NetworkPolicyConfigResponse { return *v }).(NetworkPolicyConfigResponseOutput)
}

// Whether NetworkPolicy is enabled for this cluster.
func (o NetworkPolicyConfigResponsePtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworkPolicyConfigResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// Configuration options for the NetworkPolicy feature. https://kubernetes.io/docs/concepts/services-networking/networkpolicies/
type NetworkPolicyResponse struct {
	// Whether network policy is enabled on the cluster.
	Enabled bool `pulumi:"enabled"`
	// The selected network policy provider.
	Provider string `pulumi:"provider"`
}

// NetworkPolicyResponseInput is an input type that accepts NetworkPolicyResponseArgs and NetworkPolicyResponseOutput values.
// You can construct a concrete instance of `NetworkPolicyResponseInput` via:
//
//          NetworkPolicyResponseArgs{...}
type NetworkPolicyResponseInput interface {
	pulumi.Input

	ToNetworkPolicyResponseOutput() NetworkPolicyResponseOutput
	ToNetworkPolicyResponseOutputWithContext(context.Context) NetworkPolicyResponseOutput
}

// Configuration options for the NetworkPolicy feature. https://kubernetes.io/docs/concepts/services-networking/networkpolicies/
type NetworkPolicyResponseArgs struct {
	// Whether network policy is enabled on the cluster.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// The selected network policy provider.
	Provider pulumi.StringInput `pulumi:"provider"`
}

func (NetworkPolicyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicyResponse)(nil)).Elem()
}

func (i NetworkPolicyResponseArgs) ToNetworkPolicyResponseOutput() NetworkPolicyResponseOutput {
	return i.ToNetworkPolicyResponseOutputWithContext(context.Background())
}

func (i NetworkPolicyResponseArgs) ToNetworkPolicyResponseOutputWithContext(ctx context.Context) NetworkPolicyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicyResponseOutput)
}

func (i NetworkPolicyResponseArgs) ToNetworkPolicyResponsePtrOutput() NetworkPolicyResponsePtrOutput {
	return i.ToNetworkPolicyResponsePtrOutputWithContext(context.Background())
}

func (i NetworkPolicyResponseArgs) ToNetworkPolicyResponsePtrOutputWithContext(ctx context.Context) NetworkPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicyResponseOutput).ToNetworkPolicyResponsePtrOutputWithContext(ctx)
}

// NetworkPolicyResponsePtrInput is an input type that accepts NetworkPolicyResponseArgs, NetworkPolicyResponsePtr and NetworkPolicyResponsePtrOutput values.
// You can construct a concrete instance of `NetworkPolicyResponsePtrInput` via:
//
//          NetworkPolicyResponseArgs{...}
//
//  or:
//
//          nil
type NetworkPolicyResponsePtrInput interface {
	pulumi.Input

	ToNetworkPolicyResponsePtrOutput() NetworkPolicyResponsePtrOutput
	ToNetworkPolicyResponsePtrOutputWithContext(context.Context) NetworkPolicyResponsePtrOutput
}

type networkPolicyResponsePtrType NetworkPolicyResponseArgs

func NetworkPolicyResponsePtr(v *NetworkPolicyResponseArgs) NetworkPolicyResponsePtrInput {
	return (*networkPolicyResponsePtrType)(v)
}

func (*networkPolicyResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkPolicyResponse)(nil)).Elem()
}

func (i *networkPolicyResponsePtrType) ToNetworkPolicyResponsePtrOutput() NetworkPolicyResponsePtrOutput {
	return i.ToNetworkPolicyResponsePtrOutputWithContext(context.Background())
}

func (i *networkPolicyResponsePtrType) ToNetworkPolicyResponsePtrOutputWithContext(ctx context.Context) NetworkPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicyResponsePtrOutput)
}

// Configuration options for the NetworkPolicy feature. https://kubernetes.io/docs/concepts/services-networking/networkpolicies/
type NetworkPolicyResponseOutput struct{ *pulumi.OutputState }

func (NetworkPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicyResponse)(nil)).Elem()
}

func (o NetworkPolicyResponseOutput) ToNetworkPolicyResponseOutput() NetworkPolicyResponseOutput {
	return o
}

func (o NetworkPolicyResponseOutput) ToNetworkPolicyResponseOutputWithContext(ctx context.Context) NetworkPolicyResponseOutput {
	return o
}

func (o NetworkPolicyResponseOutput) ToNetworkPolicyResponsePtrOutput() NetworkPolicyResponsePtrOutput {
	return o.ToNetworkPolicyResponsePtrOutputWithContext(context.Background())
}

func (o NetworkPolicyResponseOutput) ToNetworkPolicyResponsePtrOutputWithContext(ctx context.Context) NetworkPolicyResponsePtrOutput {
	return o.ApplyT(func(v NetworkPolicyResponse) *NetworkPolicyResponse {
		return &v
	}).(NetworkPolicyResponsePtrOutput)
}

// Whether network policy is enabled on the cluster.
func (o NetworkPolicyResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v NetworkPolicyResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The selected network policy provider.
func (o NetworkPolicyResponseOutput) Provider() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkPolicyResponse) string { return v.Provider }).(pulumi.StringOutput)
}

type NetworkPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (NetworkPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkPolicyResponse)(nil)).Elem()
}

func (o NetworkPolicyResponsePtrOutput) ToNetworkPolicyResponsePtrOutput() NetworkPolicyResponsePtrOutput {
	return o
}

func (o NetworkPolicyResponsePtrOutput) ToNetworkPolicyResponsePtrOutputWithContext(ctx context.Context) NetworkPolicyResponsePtrOutput {
	return o
}

func (o NetworkPolicyResponsePtrOutput) Elem() NetworkPolicyResponseOutput {
	return o.ApplyT(func(v *NetworkPolicyResponse) NetworkPolicyResponse { return *v }).(NetworkPolicyResponseOutput)
}

// Whether network policy is enabled on the cluster.
func (o NetworkPolicyResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworkPolicyResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The selected network policy provider.
func (o NetworkPolicyResponsePtrOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Provider
	}).(pulumi.StringPtrOutput)
}

// Parameters that describe the nodes in a cluster.
type NodeConfig struct {
	// A list of hardware accelerators to be attached to each node. See https://cloud.google.com/compute/docs/gpus for more information about support for GPUs.
	Accelerators []AcceleratorConfig `pulumi:"accelerators"`
	//  The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption
	BootDiskKmsKey *string `pulumi:"bootDiskKmsKey"`
	// Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the default disk size is 100GB.
	DiskSizeGb *int `pulumi:"diskSizeGb"`
	// Type of the disk attached to each node (e.g. 'pd-standard', 'pd-ssd' or 'pd-balanced') If unspecified, the default disk type is 'pd-standard'
	DiskType *string `pulumi:"diskType"`
	// The image type to use for this node. Note that for a given image type, the latest version of it will be used.
	ImageType *string `pulumi:"imageType"`
	// Node kubelet configs.
	KubeletConfig *NodeKubeletConfig `pulumi:"kubeletConfig"`
	// The map of Kubernetes labels (key/value pairs) to be applied to each node. These will added in addition to any default label(s) that Kubernetes may apply to the node. In case of conflict in label keys, the applied set may differ depending on the Kubernetes version -- it's best to assume the behavior is undefined and conflicts should be avoided. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
	Labels map[string]string `pulumi:"labels"`
	// Parameters that can be configured on Linux nodes.
	LinuxNodeConfig *LinuxNodeConfig `pulumi:"linuxNodeConfig"`
	// The number of local SSD disks to be attached to the node. The limit for this value is dependent upon the maximum number of disks available on a machine per zone. See: https://cloud.google.com/compute/docs/disks/local-ssd for more information.
	LocalSsdCount *int `pulumi:"localSsdCount"`
	// The name of a Google Compute Engine [machine type](https://cloud.google.com/compute/docs/machine-types) If unspecified, the default machine type is `e2-medium`.
	MachineType *string `pulumi:"machineType"`
	// The metadata key/value pairs assigned to instances in the cluster. Keys must conform to the regexp `[a-zA-Z0-9-_]+` and be less than 128 bytes in length. These are reflected as part of a URL in the metadata server. Additionally, to avoid ambiguity, keys must not conflict with any other metadata keys for the project or be one of the reserved keys: - "cluster-location" - "cluster-name" - "cluster-uid" - "configure-sh" - "containerd-configure-sh" - "enable-os-login" - "gci-ensure-gke-docker" - "gci-metrics-enabled" - "gci-update-strategy" - "instance-template" - "kube-env" - "startup-script" - "user-data" - "disable-address-manager" - "windows-startup-script-ps1" - "common-psm1" - "k8s-node-setup-psm1" - "install-ssh-psm1" - "user-profile-psm1" The following keys are reserved for Windows nodes: - "serial-port-logging-enable" Values are free-form strings, and only have meaning as interpreted by the image running in the instance. The only restriction placed on them is that each value's size must be less than or equal to 32 KB. The total size of all keys and values must be less than 512 KB.
	Metadata map[string]string `pulumi:"metadata"`
	// Minimum CPU platform to be used by this instance. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as `minCpuPlatform: "Intel Haswell"` or `minCpuPlatform: "Intel Sandy Bridge"`. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform)
	MinCpuPlatform *string `pulumi:"minCpuPlatform"`
	// Setting this field will assign instances of this pool to run on the specified node group. This is useful for running workloads on [sole tenant nodes](https://cloud.google.com/compute/docs/nodes/sole-tenant-nodes).
	NodeGroup *string `pulumi:"nodeGroup"`
	// The set of Google API scopes to be made available on all of the node VMs under the "default" service account. The following scopes are recommended, but not required, and by default are not included: * `https://www.googleapis.com/auth/compute` is required for mounting persistent storage on your nodes. * `https://www.googleapis.com/auth/devstorage.read_only` is required for communicating with **gcr.io** (the [Google Container Registry](https://cloud.google.com/container-registry/)). If unspecified, no scopes are added, unless Cloud Logging or Cloud Monitoring are enabled, in which case their required scopes will be added.
	OauthScopes []string `pulumi:"oauthScopes"`
	// Whether the nodes are created as preemptible VM instances. See: https://cloud.google.com/compute/docs/instances/preemptible for more information about preemptible VM instances.
	Preemptible *bool `pulumi:"preemptible"`
	// The optional reservation affinity. Setting this field will apply the specified [Zonal Compute Reservation](https://cloud.google.com/compute/docs/instances/reserving-zonal-resources) to this node pool.
	ReservationAffinity *ReservationAffinity `pulumi:"reservationAffinity"`
	// Sandbox configuration for this node.
	SandboxConfig *SandboxConfig `pulumi:"sandboxConfig"`
	// The Google Cloud Platform Service Account to be used by the node VMs. Specify the email address of the Service Account; otherwise, if no Service Account is specified, the "default" service account is used.
	ServiceAccount *string `pulumi:"serviceAccount"`
	// Shielded Instance options.
	ShieldedInstanceConfig *ShieldedInstanceConfig `pulumi:"shieldedInstanceConfig"`
	// The list of instance tags applied to all nodes. Tags are used to identify valid sources or targets for network firewalls and are specified by the client during cluster or node pool creation. Each tag within the list must comply with RFC1035.
	Tags []string `pulumi:"tags"`
	// List of kubernetes taints to be applied to each node. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
	Taints []NodeTaint `pulumi:"taints"`
	// The workload metadata configuration for this node.
	WorkloadMetadataConfig *WorkloadMetadataConfig `pulumi:"workloadMetadataConfig"`
}

// NodeConfigInput is an input type that accepts NodeConfigArgs and NodeConfigOutput values.
// You can construct a concrete instance of `NodeConfigInput` via:
//
//          NodeConfigArgs{...}
type NodeConfigInput interface {
	pulumi.Input

	ToNodeConfigOutput() NodeConfigOutput
	ToNodeConfigOutputWithContext(context.Context) NodeConfigOutput
}

// Parameters that describe the nodes in a cluster.
type NodeConfigArgs struct {
	// A list of hardware accelerators to be attached to each node. See https://cloud.google.com/compute/docs/gpus for more information about support for GPUs.
	Accelerators AcceleratorConfigArrayInput `pulumi:"accelerators"`
	//  The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption
	BootDiskKmsKey pulumi.StringPtrInput `pulumi:"bootDiskKmsKey"`
	// Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the default disk size is 100GB.
	DiskSizeGb pulumi.IntPtrInput `pulumi:"diskSizeGb"`
	// Type of the disk attached to each node (e.g. 'pd-standard', 'pd-ssd' or 'pd-balanced') If unspecified, the default disk type is 'pd-standard'
	DiskType pulumi.StringPtrInput `pulumi:"diskType"`
	// The image type to use for this node. Note that for a given image type, the latest version of it will be used.
	ImageType pulumi.StringPtrInput `pulumi:"imageType"`
	// Node kubelet configs.
	KubeletConfig NodeKubeletConfigPtrInput `pulumi:"kubeletConfig"`
	// The map of Kubernetes labels (key/value pairs) to be applied to each node. These will added in addition to any default label(s) that Kubernetes may apply to the node. In case of conflict in label keys, the applied set may differ depending on the Kubernetes version -- it's best to assume the behavior is undefined and conflicts should be avoided. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// Parameters that can be configured on Linux nodes.
	LinuxNodeConfig LinuxNodeConfigPtrInput `pulumi:"linuxNodeConfig"`
	// The number of local SSD disks to be attached to the node. The limit for this value is dependent upon the maximum number of disks available on a machine per zone. See: https://cloud.google.com/compute/docs/disks/local-ssd for more information.
	LocalSsdCount pulumi.IntPtrInput `pulumi:"localSsdCount"`
	// The name of a Google Compute Engine [machine type](https://cloud.google.com/compute/docs/machine-types) If unspecified, the default machine type is `e2-medium`.
	MachineType pulumi.StringPtrInput `pulumi:"machineType"`
	// The metadata key/value pairs assigned to instances in the cluster. Keys must conform to the regexp `[a-zA-Z0-9-_]+` and be less than 128 bytes in length. These are reflected as part of a URL in the metadata server. Additionally, to avoid ambiguity, keys must not conflict with any other metadata keys for the project or be one of the reserved keys: - "cluster-location" - "cluster-name" - "cluster-uid" - "configure-sh" - "containerd-configure-sh" - "enable-os-login" - "gci-ensure-gke-docker" - "gci-metrics-enabled" - "gci-update-strategy" - "instance-template" - "kube-env" - "startup-script" - "user-data" - "disable-address-manager" - "windows-startup-script-ps1" - "common-psm1" - "k8s-node-setup-psm1" - "install-ssh-psm1" - "user-profile-psm1" The following keys are reserved for Windows nodes: - "serial-port-logging-enable" Values are free-form strings, and only have meaning as interpreted by the image running in the instance. The only restriction placed on them is that each value's size must be less than or equal to 32 KB. The total size of all keys and values must be less than 512 KB.
	Metadata pulumi.StringMapInput `pulumi:"metadata"`
	// Minimum CPU platform to be used by this instance. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as `minCpuPlatform: "Intel Haswell"` or `minCpuPlatform: "Intel Sandy Bridge"`. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform)
	MinCpuPlatform pulumi.StringPtrInput `pulumi:"minCpuPlatform"`
	// Setting this field will assign instances of this pool to run on the specified node group. This is useful for running workloads on [sole tenant nodes](https://cloud.google.com/compute/docs/nodes/sole-tenant-nodes).
	NodeGroup pulumi.StringPtrInput `pulumi:"nodeGroup"`
	// The set of Google API scopes to be made available on all of the node VMs under the "default" service account. The following scopes are recommended, but not required, and by default are not included: * `https://www.googleapis.com/auth/compute` is required for mounting persistent storage on your nodes. * `https://www.googleapis.com/auth/devstorage.read_only` is required for communicating with **gcr.io** (the [Google Container Registry](https://cloud.google.com/container-registry/)). If unspecified, no scopes are added, unless Cloud Logging or Cloud Monitoring are enabled, in which case their required scopes will be added.
	OauthScopes pulumi.StringArrayInput `pulumi:"oauthScopes"`
	// Whether the nodes are created as preemptible VM instances. See: https://cloud.google.com/compute/docs/instances/preemptible for more information about preemptible VM instances.
	Preemptible pulumi.BoolPtrInput `pulumi:"preemptible"`
	// The optional reservation affinity. Setting this field will apply the specified [Zonal Compute Reservation](https://cloud.google.com/compute/docs/instances/reserving-zonal-resources) to this node pool.
	ReservationAffinity ReservationAffinityPtrInput `pulumi:"reservationAffinity"`
	// Sandbox configuration for this node.
	SandboxConfig SandboxConfigPtrInput `pulumi:"sandboxConfig"`
	// The Google Cloud Platform Service Account to be used by the node VMs. Specify the email address of the Service Account; otherwise, if no Service Account is specified, the "default" service account is used.
	ServiceAccount pulumi.StringPtrInput `pulumi:"serviceAccount"`
	// Shielded Instance options.
	ShieldedInstanceConfig ShieldedInstanceConfigPtrInput `pulumi:"shieldedInstanceConfig"`
	// The list of instance tags applied to all nodes. Tags are used to identify valid sources or targets for network firewalls and are specified by the client during cluster or node pool creation. Each tag within the list must comply with RFC1035.
	Tags pulumi.StringArrayInput `pulumi:"tags"`
	// List of kubernetes taints to be applied to each node. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
	Taints NodeTaintArrayInput `pulumi:"taints"`
	// The workload metadata configuration for this node.
	WorkloadMetadataConfig WorkloadMetadataConfigPtrInput `pulumi:"workloadMetadataConfig"`
}

func (NodeConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeConfig)(nil)).Elem()
}

func (i NodeConfigArgs) ToNodeConfigOutput() NodeConfigOutput {
	return i.ToNodeConfigOutputWithContext(context.Background())
}

func (i NodeConfigArgs) ToNodeConfigOutputWithContext(ctx context.Context) NodeConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeConfigOutput)
}

func (i NodeConfigArgs) ToNodeConfigPtrOutput() NodeConfigPtrOutput {
	return i.ToNodeConfigPtrOutputWithContext(context.Background())
}

func (i NodeConfigArgs) ToNodeConfigPtrOutputWithContext(ctx context.Context) NodeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeConfigOutput).ToNodeConfigPtrOutputWithContext(ctx)
}

// NodeConfigPtrInput is an input type that accepts NodeConfigArgs, NodeConfigPtr and NodeConfigPtrOutput values.
// You can construct a concrete instance of `NodeConfigPtrInput` via:
//
//          NodeConfigArgs{...}
//
//  or:
//
//          nil
type NodeConfigPtrInput interface {
	pulumi.Input

	ToNodeConfigPtrOutput() NodeConfigPtrOutput
	ToNodeConfigPtrOutputWithContext(context.Context) NodeConfigPtrOutput
}

type nodeConfigPtrType NodeConfigArgs

func NodeConfigPtr(v *NodeConfigArgs) NodeConfigPtrInput {
	return (*nodeConfigPtrType)(v)
}

func (*nodeConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeConfig)(nil)).Elem()
}

func (i *nodeConfigPtrType) ToNodeConfigPtrOutput() NodeConfigPtrOutput {
	return i.ToNodeConfigPtrOutputWithContext(context.Background())
}

func (i *nodeConfigPtrType) ToNodeConfigPtrOutputWithContext(ctx context.Context) NodeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeConfigPtrOutput)
}

// Parameters that describe the nodes in a cluster.
type NodeConfigOutput struct{ *pulumi.OutputState }

func (NodeConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeConfig)(nil)).Elem()
}

func (o NodeConfigOutput) ToNodeConfigOutput() NodeConfigOutput {
	return o
}

func (o NodeConfigOutput) ToNodeConfigOutputWithContext(ctx context.Context) NodeConfigOutput {
	return o
}

func (o NodeConfigOutput) ToNodeConfigPtrOutput() NodeConfigPtrOutput {
	return o.ToNodeConfigPtrOutputWithContext(context.Background())
}

func (o NodeConfigOutput) ToNodeConfigPtrOutputWithContext(ctx context.Context) NodeConfigPtrOutput {
	return o.ApplyT(func(v NodeConfig) *NodeConfig {
		return &v
	}).(NodeConfigPtrOutput)
}

// A list of hardware accelerators to be attached to each node. See https://cloud.google.com/compute/docs/gpus for more information about support for GPUs.
func (o NodeConfigOutput) Accelerators() AcceleratorConfigArrayOutput {
	return o.ApplyT(func(v NodeConfig) []AcceleratorConfig { return v.Accelerators }).(AcceleratorConfigArrayOutput)
}

//  The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption
func (o NodeConfigOutput) BootDiskKmsKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeConfig) *string { return v.BootDiskKmsKey }).(pulumi.StringPtrOutput)
}

// Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the default disk size is 100GB.
func (o NodeConfigOutput) DiskSizeGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodeConfig) *int { return v.DiskSizeGb }).(pulumi.IntPtrOutput)
}

// Type of the disk attached to each node (e.g. 'pd-standard', 'pd-ssd' or 'pd-balanced') If unspecified, the default disk type is 'pd-standard'
func (o NodeConfigOutput) DiskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeConfig) *string { return v.DiskType }).(pulumi.StringPtrOutput)
}

// The image type to use for this node. Note that for a given image type, the latest version of it will be used.
func (o NodeConfigOutput) ImageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeConfig) *string { return v.ImageType }).(pulumi.StringPtrOutput)
}

// Node kubelet configs.
func (o NodeConfigOutput) KubeletConfig() NodeKubeletConfigPtrOutput {
	return o.ApplyT(func(v NodeConfig) *NodeKubeletConfig { return v.KubeletConfig }).(NodeKubeletConfigPtrOutput)
}

// The map of Kubernetes labels (key/value pairs) to be applied to each node. These will added in addition to any default label(s) that Kubernetes may apply to the node. In case of conflict in label keys, the applied set may differ depending on the Kubernetes version -- it's best to assume the behavior is undefined and conflicts should be avoided. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
func (o NodeConfigOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v NodeConfig) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Parameters that can be configured on Linux nodes.
func (o NodeConfigOutput) LinuxNodeConfig() LinuxNodeConfigPtrOutput {
	return o.ApplyT(func(v NodeConfig) *LinuxNodeConfig { return v.LinuxNodeConfig }).(LinuxNodeConfigPtrOutput)
}

// The number of local SSD disks to be attached to the node. The limit for this value is dependent upon the maximum number of disks available on a machine per zone. See: https://cloud.google.com/compute/docs/disks/local-ssd for more information.
func (o NodeConfigOutput) LocalSsdCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodeConfig) *int { return v.LocalSsdCount }).(pulumi.IntPtrOutput)
}

// The name of a Google Compute Engine [machine type](https://cloud.google.com/compute/docs/machine-types) If unspecified, the default machine type is `e2-medium`.
func (o NodeConfigOutput) MachineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeConfig) *string { return v.MachineType }).(pulumi.StringPtrOutput)
}

// The metadata key/value pairs assigned to instances in the cluster. Keys must conform to the regexp `[a-zA-Z0-9-_]+` and be less than 128 bytes in length. These are reflected as part of a URL in the metadata server. Additionally, to avoid ambiguity, keys must not conflict with any other metadata keys for the project or be one of the reserved keys: - "cluster-location" - "cluster-name" - "cluster-uid" - "configure-sh" - "containerd-configure-sh" - "enable-os-login" - "gci-ensure-gke-docker" - "gci-metrics-enabled" - "gci-update-strategy" - "instance-template" - "kube-env" - "startup-script" - "user-data" - "disable-address-manager" - "windows-startup-script-ps1" - "common-psm1" - "k8s-node-setup-psm1" - "install-ssh-psm1" - "user-profile-psm1" The following keys are reserved for Windows nodes: - "serial-port-logging-enable" Values are free-form strings, and only have meaning as interpreted by the image running in the instance. The only restriction placed on them is that each value's size must be less than or equal to 32 KB. The total size of all keys and values must be less than 512 KB.
func (o NodeConfigOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v NodeConfig) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// Minimum CPU platform to be used by this instance. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as `minCpuPlatform: "Intel Haswell"` or `minCpuPlatform: "Intel Sandy Bridge"`. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform)
func (o NodeConfigOutput) MinCpuPlatform() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeConfig) *string { return v.MinCpuPlatform }).(pulumi.StringPtrOutput)
}

// Setting this field will assign instances of this pool to run on the specified node group. This is useful for running workloads on [sole tenant nodes](https://cloud.google.com/compute/docs/nodes/sole-tenant-nodes).
func (o NodeConfigOutput) NodeGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeConfig) *string { return v.NodeGroup }).(pulumi.StringPtrOutput)
}

// The set of Google API scopes to be made available on all of the node VMs under the "default" service account. The following scopes are recommended, but not required, and by default are not included: * `https://www.googleapis.com/auth/compute` is required for mounting persistent storage on your nodes. * `https://www.googleapis.com/auth/devstorage.read_only` is required for communicating with **gcr.io** (the [Google Container Registry](https://cloud.google.com/container-registry/)). If unspecified, no scopes are added, unless Cloud Logging or Cloud Monitoring are enabled, in which case their required scopes will be added.
func (o NodeConfigOutput) OauthScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NodeConfig) []string { return v.OauthScopes }).(pulumi.StringArrayOutput)
}

// Whether the nodes are created as preemptible VM instances. See: https://cloud.google.com/compute/docs/instances/preemptible for more information about preemptible VM instances.
func (o NodeConfigOutput) Preemptible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NodeConfig) *bool { return v.Preemptible }).(pulumi.BoolPtrOutput)
}

// The optional reservation affinity. Setting this field will apply the specified [Zonal Compute Reservation](https://cloud.google.com/compute/docs/instances/reserving-zonal-resources) to this node pool.
func (o NodeConfigOutput) ReservationAffinity() ReservationAffinityPtrOutput {
	return o.ApplyT(func(v NodeConfig) *ReservationAffinity { return v.ReservationAffinity }).(ReservationAffinityPtrOutput)
}

// Sandbox configuration for this node.
func (o NodeConfigOutput) SandboxConfig() SandboxConfigPtrOutput {
	return o.ApplyT(func(v NodeConfig) *SandboxConfig { return v.SandboxConfig }).(SandboxConfigPtrOutput)
}

// The Google Cloud Platform Service Account to be used by the node VMs. Specify the email address of the Service Account; otherwise, if no Service Account is specified, the "default" service account is used.
func (o NodeConfigOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeConfig) *string { return v.ServiceAccount }).(pulumi.StringPtrOutput)
}

// Shielded Instance options.
func (o NodeConfigOutput) ShieldedInstanceConfig() ShieldedInstanceConfigPtrOutput {
	return o.ApplyT(func(v NodeConfig) *ShieldedInstanceConfig { return v.ShieldedInstanceConfig }).(ShieldedInstanceConfigPtrOutput)
}

// The list of instance tags applied to all nodes. Tags are used to identify valid sources or targets for network firewalls and are specified by the client during cluster or node pool creation. Each tag within the list must comply with RFC1035.
func (o NodeConfigOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NodeConfig) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// List of kubernetes taints to be applied to each node. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
func (o NodeConfigOutput) Taints() NodeTaintArrayOutput {
	return o.ApplyT(func(v NodeConfig) []NodeTaint { return v.Taints }).(NodeTaintArrayOutput)
}

// The workload metadata configuration for this node.
func (o NodeConfigOutput) WorkloadMetadataConfig() WorkloadMetadataConfigPtrOutput {
	return o.ApplyT(func(v NodeConfig) *WorkloadMetadataConfig { return v.WorkloadMetadataConfig }).(WorkloadMetadataConfigPtrOutput)
}

type NodeConfigPtrOutput struct{ *pulumi.OutputState }

func (NodeConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeConfig)(nil)).Elem()
}

func (o NodeConfigPtrOutput) ToNodeConfigPtrOutput() NodeConfigPtrOutput {
	return o
}

func (o NodeConfigPtrOutput) ToNodeConfigPtrOutputWithContext(ctx context.Context) NodeConfigPtrOutput {
	return o
}

func (o NodeConfigPtrOutput) Elem() NodeConfigOutput {
	return o.ApplyT(func(v *NodeConfig) NodeConfig { return *v }).(NodeConfigOutput)
}

// A list of hardware accelerators to be attached to each node. See https://cloud.google.com/compute/docs/gpus for more information about support for GPUs.
func (o NodeConfigPtrOutput) Accelerators() AcceleratorConfigArrayOutput {
	return o.ApplyT(func(v *NodeConfig) []AcceleratorConfig {
		if v == nil {
			return nil
		}
		return v.Accelerators
	}).(AcceleratorConfigArrayOutput)
}

//  The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption
func (o NodeConfigPtrOutput) BootDiskKmsKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *string {
		if v == nil {
			return nil
		}
		return v.BootDiskKmsKey
	}).(pulumi.StringPtrOutput)
}

// Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the default disk size is 100GB.
func (o NodeConfigPtrOutput) DiskSizeGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *int {
		if v == nil {
			return nil
		}
		return v.DiskSizeGb
	}).(pulumi.IntPtrOutput)
}

// Type of the disk attached to each node (e.g. 'pd-standard', 'pd-ssd' or 'pd-balanced') If unspecified, the default disk type is 'pd-standard'
func (o NodeConfigPtrOutput) DiskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *string {
		if v == nil {
			return nil
		}
		return v.DiskType
	}).(pulumi.StringPtrOutput)
}

// The image type to use for this node. Note that for a given image type, the latest version of it will be used.
func (o NodeConfigPtrOutput) ImageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *string {
		if v == nil {
			return nil
		}
		return v.ImageType
	}).(pulumi.StringPtrOutput)
}

// Node kubelet configs.
func (o NodeConfigPtrOutput) KubeletConfig() NodeKubeletConfigPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *NodeKubeletConfig {
		if v == nil {
			return nil
		}
		return v.KubeletConfig
	}).(NodeKubeletConfigPtrOutput)
}

// The map of Kubernetes labels (key/value pairs) to be applied to each node. These will added in addition to any default label(s) that Kubernetes may apply to the node. In case of conflict in label keys, the applied set may differ depending on the Kubernetes version -- it's best to assume the behavior is undefined and conflicts should be avoided. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
func (o NodeConfigPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NodeConfig) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// Parameters that can be configured on Linux nodes.
func (o NodeConfigPtrOutput) LinuxNodeConfig() LinuxNodeConfigPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *LinuxNodeConfig {
		if v == nil {
			return nil
		}
		return v.LinuxNodeConfig
	}).(LinuxNodeConfigPtrOutput)
}

// The number of local SSD disks to be attached to the node. The limit for this value is dependent upon the maximum number of disks available on a machine per zone. See: https://cloud.google.com/compute/docs/disks/local-ssd for more information.
func (o NodeConfigPtrOutput) LocalSsdCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *int {
		if v == nil {
			return nil
		}
		return v.LocalSsdCount
	}).(pulumi.IntPtrOutput)
}

// The name of a Google Compute Engine [machine type](https://cloud.google.com/compute/docs/machine-types) If unspecified, the default machine type is `e2-medium`.
func (o NodeConfigPtrOutput) MachineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *string {
		if v == nil {
			return nil
		}
		return v.MachineType
	}).(pulumi.StringPtrOutput)
}

// The metadata key/value pairs assigned to instances in the cluster. Keys must conform to the regexp `[a-zA-Z0-9-_]+` and be less than 128 bytes in length. These are reflected as part of a URL in the metadata server. Additionally, to avoid ambiguity, keys must not conflict with any other metadata keys for the project or be one of the reserved keys: - "cluster-location" - "cluster-name" - "cluster-uid" - "configure-sh" - "containerd-configure-sh" - "enable-os-login" - "gci-ensure-gke-docker" - "gci-metrics-enabled" - "gci-update-strategy" - "instance-template" - "kube-env" - "startup-script" - "user-data" - "disable-address-manager" - "windows-startup-script-ps1" - "common-psm1" - "k8s-node-setup-psm1" - "install-ssh-psm1" - "user-profile-psm1" The following keys are reserved for Windows nodes: - "serial-port-logging-enable" Values are free-form strings, and only have meaning as interpreted by the image running in the instance. The only restriction placed on them is that each value's size must be less than or equal to 32 KB. The total size of all keys and values must be less than 512 KB.
func (o NodeConfigPtrOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NodeConfig) map[string]string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringMapOutput)
}

// Minimum CPU platform to be used by this instance. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as `minCpuPlatform: "Intel Haswell"` or `minCpuPlatform: "Intel Sandy Bridge"`. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform)
func (o NodeConfigPtrOutput) MinCpuPlatform() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *string {
		if v == nil {
			return nil
		}
		return v.MinCpuPlatform
	}).(pulumi.StringPtrOutput)
}

// Setting this field will assign instances of this pool to run on the specified node group. This is useful for running workloads on [sole tenant nodes](https://cloud.google.com/compute/docs/nodes/sole-tenant-nodes).
func (o NodeConfigPtrOutput) NodeGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *string {
		if v == nil {
			return nil
		}
		return v.NodeGroup
	}).(pulumi.StringPtrOutput)
}

// The set of Google API scopes to be made available on all of the node VMs under the "default" service account. The following scopes are recommended, but not required, and by default are not included: * `https://www.googleapis.com/auth/compute` is required for mounting persistent storage on your nodes. * `https://www.googleapis.com/auth/devstorage.read_only` is required for communicating with **gcr.io** (the [Google Container Registry](https://cloud.google.com/container-registry/)). If unspecified, no scopes are added, unless Cloud Logging or Cloud Monitoring are enabled, in which case their required scopes will be added.
func (o NodeConfigPtrOutput) OauthScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NodeConfig) []string {
		if v == nil {
			return nil
		}
		return v.OauthScopes
	}).(pulumi.StringArrayOutput)
}

// Whether the nodes are created as preemptible VM instances. See: https://cloud.google.com/compute/docs/instances/preemptible for more information about preemptible VM instances.
func (o NodeConfigPtrOutput) Preemptible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Preemptible
	}).(pulumi.BoolPtrOutput)
}

// The optional reservation affinity. Setting this field will apply the specified [Zonal Compute Reservation](https://cloud.google.com/compute/docs/instances/reserving-zonal-resources) to this node pool.
func (o NodeConfigPtrOutput) ReservationAffinity() ReservationAffinityPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *ReservationAffinity {
		if v == nil {
			return nil
		}
		return v.ReservationAffinity
	}).(ReservationAffinityPtrOutput)
}

// Sandbox configuration for this node.
func (o NodeConfigPtrOutput) SandboxConfig() SandboxConfigPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *SandboxConfig {
		if v == nil {
			return nil
		}
		return v.SandboxConfig
	}).(SandboxConfigPtrOutput)
}

// The Google Cloud Platform Service Account to be used by the node VMs. Specify the email address of the Service Account; otherwise, if no Service Account is specified, the "default" service account is used.
func (o NodeConfigPtrOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccount
	}).(pulumi.StringPtrOutput)
}

// Shielded Instance options.
func (o NodeConfigPtrOutput) ShieldedInstanceConfig() ShieldedInstanceConfigPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *ShieldedInstanceConfig {
		if v == nil {
			return nil
		}
		return v.ShieldedInstanceConfig
	}).(ShieldedInstanceConfigPtrOutput)
}

// The list of instance tags applied to all nodes. Tags are used to identify valid sources or targets for network firewalls and are specified by the client during cluster or node pool creation. Each tag within the list must comply with RFC1035.
func (o NodeConfigPtrOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NodeConfig) []string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringArrayOutput)
}

// List of kubernetes taints to be applied to each node. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
func (o NodeConfigPtrOutput) Taints() NodeTaintArrayOutput {
	return o.ApplyT(func(v *NodeConfig) []NodeTaint {
		if v == nil {
			return nil
		}
		return v.Taints
	}).(NodeTaintArrayOutput)
}

// The workload metadata configuration for this node.
func (o NodeConfigPtrOutput) WorkloadMetadataConfig() WorkloadMetadataConfigPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *WorkloadMetadataConfig {
		if v == nil {
			return nil
		}
		return v.WorkloadMetadataConfig
	}).(WorkloadMetadataConfigPtrOutput)
}

// Parameters that describe the nodes in a cluster.
type NodeConfigResponse struct {
	// A list of hardware accelerators to be attached to each node. See https://cloud.google.com/compute/docs/gpus for more information about support for GPUs.
	Accelerators []AcceleratorConfigResponse `pulumi:"accelerators"`
	//  The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption
	BootDiskKmsKey string `pulumi:"bootDiskKmsKey"`
	// Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the default disk size is 100GB.
	DiskSizeGb int `pulumi:"diskSizeGb"`
	// Type of the disk attached to each node (e.g. 'pd-standard', 'pd-ssd' or 'pd-balanced') If unspecified, the default disk type is 'pd-standard'
	DiskType string `pulumi:"diskType"`
	// The image type to use for this node. Note that for a given image type, the latest version of it will be used.
	ImageType string `pulumi:"imageType"`
	// Node kubelet configs.
	KubeletConfig NodeKubeletConfigResponse `pulumi:"kubeletConfig"`
	// The map of Kubernetes labels (key/value pairs) to be applied to each node. These will added in addition to any default label(s) that Kubernetes may apply to the node. In case of conflict in label keys, the applied set may differ depending on the Kubernetes version -- it's best to assume the behavior is undefined and conflicts should be avoided. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
	Labels map[string]string `pulumi:"labels"`
	// Parameters that can be configured on Linux nodes.
	LinuxNodeConfig LinuxNodeConfigResponse `pulumi:"linuxNodeConfig"`
	// The number of local SSD disks to be attached to the node. The limit for this value is dependent upon the maximum number of disks available on a machine per zone. See: https://cloud.google.com/compute/docs/disks/local-ssd for more information.
	LocalSsdCount int `pulumi:"localSsdCount"`
	// The name of a Google Compute Engine [machine type](https://cloud.google.com/compute/docs/machine-types) If unspecified, the default machine type is `e2-medium`.
	MachineType string `pulumi:"machineType"`
	// The metadata key/value pairs assigned to instances in the cluster. Keys must conform to the regexp `[a-zA-Z0-9-_]+` and be less than 128 bytes in length. These are reflected as part of a URL in the metadata server. Additionally, to avoid ambiguity, keys must not conflict with any other metadata keys for the project or be one of the reserved keys: - "cluster-location" - "cluster-name" - "cluster-uid" - "configure-sh" - "containerd-configure-sh" - "enable-os-login" - "gci-ensure-gke-docker" - "gci-metrics-enabled" - "gci-update-strategy" - "instance-template" - "kube-env" - "startup-script" - "user-data" - "disable-address-manager" - "windows-startup-script-ps1" - "common-psm1" - "k8s-node-setup-psm1" - "install-ssh-psm1" - "user-profile-psm1" The following keys are reserved for Windows nodes: - "serial-port-logging-enable" Values are free-form strings, and only have meaning as interpreted by the image running in the instance. The only restriction placed on them is that each value's size must be less than or equal to 32 KB. The total size of all keys and values must be less than 512 KB.
	Metadata map[string]string `pulumi:"metadata"`
	// Minimum CPU platform to be used by this instance. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as `minCpuPlatform: "Intel Haswell"` or `minCpuPlatform: "Intel Sandy Bridge"`. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform)
	MinCpuPlatform string `pulumi:"minCpuPlatform"`
	// Setting this field will assign instances of this pool to run on the specified node group. This is useful for running workloads on [sole tenant nodes](https://cloud.google.com/compute/docs/nodes/sole-tenant-nodes).
	NodeGroup string `pulumi:"nodeGroup"`
	// The set of Google API scopes to be made available on all of the node VMs under the "default" service account. The following scopes are recommended, but not required, and by default are not included: * `https://www.googleapis.com/auth/compute` is required for mounting persistent storage on your nodes. * `https://www.googleapis.com/auth/devstorage.read_only` is required for communicating with **gcr.io** (the [Google Container Registry](https://cloud.google.com/container-registry/)). If unspecified, no scopes are added, unless Cloud Logging or Cloud Monitoring are enabled, in which case their required scopes will be added.
	OauthScopes []string `pulumi:"oauthScopes"`
	// Whether the nodes are created as preemptible VM instances. See: https://cloud.google.com/compute/docs/instances/preemptible for more information about preemptible VM instances.
	Preemptible bool `pulumi:"preemptible"`
	// The optional reservation affinity. Setting this field will apply the specified [Zonal Compute Reservation](https://cloud.google.com/compute/docs/instances/reserving-zonal-resources) to this node pool.
	ReservationAffinity ReservationAffinityResponse `pulumi:"reservationAffinity"`
	// Sandbox configuration for this node.
	SandboxConfig SandboxConfigResponse `pulumi:"sandboxConfig"`
	// The Google Cloud Platform Service Account to be used by the node VMs. Specify the email address of the Service Account; otherwise, if no Service Account is specified, the "default" service account is used.
	ServiceAccount string `pulumi:"serviceAccount"`
	// Shielded Instance options.
	ShieldedInstanceConfig ShieldedInstanceConfigResponse `pulumi:"shieldedInstanceConfig"`
	// The list of instance tags applied to all nodes. Tags are used to identify valid sources or targets for network firewalls and are specified by the client during cluster or node pool creation. Each tag within the list must comply with RFC1035.
	Tags []string `pulumi:"tags"`
	// List of kubernetes taints to be applied to each node. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
	Taints []NodeTaintResponse `pulumi:"taints"`
	// The workload metadata configuration for this node.
	WorkloadMetadataConfig WorkloadMetadataConfigResponse `pulumi:"workloadMetadataConfig"`
}

// NodeConfigResponseInput is an input type that accepts NodeConfigResponseArgs and NodeConfigResponseOutput values.
// You can construct a concrete instance of `NodeConfigResponseInput` via:
//
//          NodeConfigResponseArgs{...}
type NodeConfigResponseInput interface {
	pulumi.Input

	ToNodeConfigResponseOutput() NodeConfigResponseOutput
	ToNodeConfigResponseOutputWithContext(context.Context) NodeConfigResponseOutput
}

// Parameters that describe the nodes in a cluster.
type NodeConfigResponseArgs struct {
	// A list of hardware accelerators to be attached to each node. See https://cloud.google.com/compute/docs/gpus for more information about support for GPUs.
	Accelerators AcceleratorConfigResponseArrayInput `pulumi:"accelerators"`
	//  The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption
	BootDiskKmsKey pulumi.StringInput `pulumi:"bootDiskKmsKey"`
	// Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the default disk size is 100GB.
	DiskSizeGb pulumi.IntInput `pulumi:"diskSizeGb"`
	// Type of the disk attached to each node (e.g. 'pd-standard', 'pd-ssd' or 'pd-balanced') If unspecified, the default disk type is 'pd-standard'
	DiskType pulumi.StringInput `pulumi:"diskType"`
	// The image type to use for this node. Note that for a given image type, the latest version of it will be used.
	ImageType pulumi.StringInput `pulumi:"imageType"`
	// Node kubelet configs.
	KubeletConfig NodeKubeletConfigResponseInput `pulumi:"kubeletConfig"`
	// The map of Kubernetes labels (key/value pairs) to be applied to each node. These will added in addition to any default label(s) that Kubernetes may apply to the node. In case of conflict in label keys, the applied set may differ depending on the Kubernetes version -- it's best to assume the behavior is undefined and conflicts should be avoided. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// Parameters that can be configured on Linux nodes.
	LinuxNodeConfig LinuxNodeConfigResponseInput `pulumi:"linuxNodeConfig"`
	// The number of local SSD disks to be attached to the node. The limit for this value is dependent upon the maximum number of disks available on a machine per zone. See: https://cloud.google.com/compute/docs/disks/local-ssd for more information.
	LocalSsdCount pulumi.IntInput `pulumi:"localSsdCount"`
	// The name of a Google Compute Engine [machine type](https://cloud.google.com/compute/docs/machine-types) If unspecified, the default machine type is `e2-medium`.
	MachineType pulumi.StringInput `pulumi:"machineType"`
	// The metadata key/value pairs assigned to instances in the cluster. Keys must conform to the regexp `[a-zA-Z0-9-_]+` and be less than 128 bytes in length. These are reflected as part of a URL in the metadata server. Additionally, to avoid ambiguity, keys must not conflict with any other metadata keys for the project or be one of the reserved keys: - "cluster-location" - "cluster-name" - "cluster-uid" - "configure-sh" - "containerd-configure-sh" - "enable-os-login" - "gci-ensure-gke-docker" - "gci-metrics-enabled" - "gci-update-strategy" - "instance-template" - "kube-env" - "startup-script" - "user-data" - "disable-address-manager" - "windows-startup-script-ps1" - "common-psm1" - "k8s-node-setup-psm1" - "install-ssh-psm1" - "user-profile-psm1" The following keys are reserved for Windows nodes: - "serial-port-logging-enable" Values are free-form strings, and only have meaning as interpreted by the image running in the instance. The only restriction placed on them is that each value's size must be less than or equal to 32 KB. The total size of all keys and values must be less than 512 KB.
	Metadata pulumi.StringMapInput `pulumi:"metadata"`
	// Minimum CPU platform to be used by this instance. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as `minCpuPlatform: "Intel Haswell"` or `minCpuPlatform: "Intel Sandy Bridge"`. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform)
	MinCpuPlatform pulumi.StringInput `pulumi:"minCpuPlatform"`
	// Setting this field will assign instances of this pool to run on the specified node group. This is useful for running workloads on [sole tenant nodes](https://cloud.google.com/compute/docs/nodes/sole-tenant-nodes).
	NodeGroup pulumi.StringInput `pulumi:"nodeGroup"`
	// The set of Google API scopes to be made available on all of the node VMs under the "default" service account. The following scopes are recommended, but not required, and by default are not included: * `https://www.googleapis.com/auth/compute` is required for mounting persistent storage on your nodes. * `https://www.googleapis.com/auth/devstorage.read_only` is required for communicating with **gcr.io** (the [Google Container Registry](https://cloud.google.com/container-registry/)). If unspecified, no scopes are added, unless Cloud Logging or Cloud Monitoring are enabled, in which case their required scopes will be added.
	OauthScopes pulumi.StringArrayInput `pulumi:"oauthScopes"`
	// Whether the nodes are created as preemptible VM instances. See: https://cloud.google.com/compute/docs/instances/preemptible for more information about preemptible VM instances.
	Preemptible pulumi.BoolInput `pulumi:"preemptible"`
	// The optional reservation affinity. Setting this field will apply the specified [Zonal Compute Reservation](https://cloud.google.com/compute/docs/instances/reserving-zonal-resources) to this node pool.
	ReservationAffinity ReservationAffinityResponseInput `pulumi:"reservationAffinity"`
	// Sandbox configuration for this node.
	SandboxConfig SandboxConfigResponseInput `pulumi:"sandboxConfig"`
	// The Google Cloud Platform Service Account to be used by the node VMs. Specify the email address of the Service Account; otherwise, if no Service Account is specified, the "default" service account is used.
	ServiceAccount pulumi.StringInput `pulumi:"serviceAccount"`
	// Shielded Instance options.
	ShieldedInstanceConfig ShieldedInstanceConfigResponseInput `pulumi:"shieldedInstanceConfig"`
	// The list of instance tags applied to all nodes. Tags are used to identify valid sources or targets for network firewalls and are specified by the client during cluster or node pool creation. Each tag within the list must comply with RFC1035.
	Tags pulumi.StringArrayInput `pulumi:"tags"`
	// List of kubernetes taints to be applied to each node. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
	Taints NodeTaintResponseArrayInput `pulumi:"taints"`
	// The workload metadata configuration for this node.
	WorkloadMetadataConfig WorkloadMetadataConfigResponseInput `pulumi:"workloadMetadataConfig"`
}

func (NodeConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeConfigResponse)(nil)).Elem()
}

func (i NodeConfigResponseArgs) ToNodeConfigResponseOutput() NodeConfigResponseOutput {
	return i.ToNodeConfigResponseOutputWithContext(context.Background())
}

func (i NodeConfigResponseArgs) ToNodeConfigResponseOutputWithContext(ctx context.Context) NodeConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeConfigResponseOutput)
}

func (i NodeConfigResponseArgs) ToNodeConfigResponsePtrOutput() NodeConfigResponsePtrOutput {
	return i.ToNodeConfigResponsePtrOutputWithContext(context.Background())
}

func (i NodeConfigResponseArgs) ToNodeConfigResponsePtrOutputWithContext(ctx context.Context) NodeConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeConfigResponseOutput).ToNodeConfigResponsePtrOutputWithContext(ctx)
}

// NodeConfigResponsePtrInput is an input type that accepts NodeConfigResponseArgs, NodeConfigResponsePtr and NodeConfigResponsePtrOutput values.
// You can construct a concrete instance of `NodeConfigResponsePtrInput` via:
//
//          NodeConfigResponseArgs{...}
//
//  or:
//
//          nil
type NodeConfigResponsePtrInput interface {
	pulumi.Input

	ToNodeConfigResponsePtrOutput() NodeConfigResponsePtrOutput
	ToNodeConfigResponsePtrOutputWithContext(context.Context) NodeConfigResponsePtrOutput
}

type nodeConfigResponsePtrType NodeConfigResponseArgs

func NodeConfigResponsePtr(v *NodeConfigResponseArgs) NodeConfigResponsePtrInput {
	return (*nodeConfigResponsePtrType)(v)
}

func (*nodeConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeConfigResponse)(nil)).Elem()
}

func (i *nodeConfigResponsePtrType) ToNodeConfigResponsePtrOutput() NodeConfigResponsePtrOutput {
	return i.ToNodeConfigResponsePtrOutputWithContext(context.Background())
}

func (i *nodeConfigResponsePtrType) ToNodeConfigResponsePtrOutputWithContext(ctx context.Context) NodeConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeConfigResponsePtrOutput)
}

// Parameters that describe the nodes in a cluster.
type NodeConfigResponseOutput struct{ *pulumi.OutputState }

func (NodeConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeConfigResponse)(nil)).Elem()
}

func (o NodeConfigResponseOutput) ToNodeConfigResponseOutput() NodeConfigResponseOutput {
	return o
}

func (o NodeConfigResponseOutput) ToNodeConfigResponseOutputWithContext(ctx context.Context) NodeConfigResponseOutput {
	return o
}

func (o NodeConfigResponseOutput) ToNodeConfigResponsePtrOutput() NodeConfigResponsePtrOutput {
	return o.ToNodeConfigResponsePtrOutputWithContext(context.Background())
}

func (o NodeConfigResponseOutput) ToNodeConfigResponsePtrOutputWithContext(ctx context.Context) NodeConfigResponsePtrOutput {
	return o.ApplyT(func(v NodeConfigResponse) *NodeConfigResponse {
		return &v
	}).(NodeConfigResponsePtrOutput)
}

// A list of hardware accelerators to be attached to each node. See https://cloud.google.com/compute/docs/gpus for more information about support for GPUs.
func (o NodeConfigResponseOutput) Accelerators() AcceleratorConfigResponseArrayOutput {
	return o.ApplyT(func(v NodeConfigResponse) []AcceleratorConfigResponse { return v.Accelerators }).(AcceleratorConfigResponseArrayOutput)
}

//  The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption
func (o NodeConfigResponseOutput) BootDiskKmsKey() pulumi.StringOutput {
	return o.ApplyT(func(v NodeConfigResponse) string { return v.BootDiskKmsKey }).(pulumi.StringOutput)
}

// Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the default disk size is 100GB.
func (o NodeConfigResponseOutput) DiskSizeGb() pulumi.IntOutput {
	return o.ApplyT(func(v NodeConfigResponse) int { return v.DiskSizeGb }).(pulumi.IntOutput)
}

// Type of the disk attached to each node (e.g. 'pd-standard', 'pd-ssd' or 'pd-balanced') If unspecified, the default disk type is 'pd-standard'
func (o NodeConfigResponseOutput) DiskType() pulumi.StringOutput {
	return o.ApplyT(func(v NodeConfigResponse) string { return v.DiskType }).(pulumi.StringOutput)
}

// The image type to use for this node. Note that for a given image type, the latest version of it will be used.
func (o NodeConfigResponseOutput) ImageType() pulumi.StringOutput {
	return o.ApplyT(func(v NodeConfigResponse) string { return v.ImageType }).(pulumi.StringOutput)
}

// Node kubelet configs.
func (o NodeConfigResponseOutput) KubeletConfig() NodeKubeletConfigResponseOutput {
	return o.ApplyT(func(v NodeConfigResponse) NodeKubeletConfigResponse { return v.KubeletConfig }).(NodeKubeletConfigResponseOutput)
}

// The map of Kubernetes labels (key/value pairs) to be applied to each node. These will added in addition to any default label(s) that Kubernetes may apply to the node. In case of conflict in label keys, the applied set may differ depending on the Kubernetes version -- it's best to assume the behavior is undefined and conflicts should be avoided. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
func (o NodeConfigResponseOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v NodeConfigResponse) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Parameters that can be configured on Linux nodes.
func (o NodeConfigResponseOutput) LinuxNodeConfig() LinuxNodeConfigResponseOutput {
	return o.ApplyT(func(v NodeConfigResponse) LinuxNodeConfigResponse { return v.LinuxNodeConfig }).(LinuxNodeConfigResponseOutput)
}

// The number of local SSD disks to be attached to the node. The limit for this value is dependent upon the maximum number of disks available on a machine per zone. See: https://cloud.google.com/compute/docs/disks/local-ssd for more information.
func (o NodeConfigResponseOutput) LocalSsdCount() pulumi.IntOutput {
	return o.ApplyT(func(v NodeConfigResponse) int { return v.LocalSsdCount }).(pulumi.IntOutput)
}

// The name of a Google Compute Engine [machine type](https://cloud.google.com/compute/docs/machine-types) If unspecified, the default machine type is `e2-medium`.
func (o NodeConfigResponseOutput) MachineType() pulumi.StringOutput {
	return o.ApplyT(func(v NodeConfigResponse) string { return v.MachineType }).(pulumi.StringOutput)
}

// The metadata key/value pairs assigned to instances in the cluster. Keys must conform to the regexp `[a-zA-Z0-9-_]+` and be less than 128 bytes in length. These are reflected as part of a URL in the metadata server. Additionally, to avoid ambiguity, keys must not conflict with any other metadata keys for the project or be one of the reserved keys: - "cluster-location" - "cluster-name" - "cluster-uid" - "configure-sh" - "containerd-configure-sh" - "enable-os-login" - "gci-ensure-gke-docker" - "gci-metrics-enabled" - "gci-update-strategy" - "instance-template" - "kube-env" - "startup-script" - "user-data" - "disable-address-manager" - "windows-startup-script-ps1" - "common-psm1" - "k8s-node-setup-psm1" - "install-ssh-psm1" - "user-profile-psm1" The following keys are reserved for Windows nodes: - "serial-port-logging-enable" Values are free-form strings, and only have meaning as interpreted by the image running in the instance. The only restriction placed on them is that each value's size must be less than or equal to 32 KB. The total size of all keys and values must be less than 512 KB.
func (o NodeConfigResponseOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v NodeConfigResponse) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// Minimum CPU platform to be used by this instance. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as `minCpuPlatform: "Intel Haswell"` or `minCpuPlatform: "Intel Sandy Bridge"`. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform)
func (o NodeConfigResponseOutput) MinCpuPlatform() pulumi.StringOutput {
	return o.ApplyT(func(v NodeConfigResponse) string { return v.MinCpuPlatform }).(pulumi.StringOutput)
}

// Setting this field will assign instances of this pool to run on the specified node group. This is useful for running workloads on [sole tenant nodes](https://cloud.google.com/compute/docs/nodes/sole-tenant-nodes).
func (o NodeConfigResponseOutput) NodeGroup() pulumi.StringOutput {
	return o.ApplyT(func(v NodeConfigResponse) string { return v.NodeGroup }).(pulumi.StringOutput)
}

// The set of Google API scopes to be made available on all of the node VMs under the "default" service account. The following scopes are recommended, but not required, and by default are not included: * `https://www.googleapis.com/auth/compute` is required for mounting persistent storage on your nodes. * `https://www.googleapis.com/auth/devstorage.read_only` is required for communicating with **gcr.io** (the [Google Container Registry](https://cloud.google.com/container-registry/)). If unspecified, no scopes are added, unless Cloud Logging or Cloud Monitoring are enabled, in which case their required scopes will be added.
func (o NodeConfigResponseOutput) OauthScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NodeConfigResponse) []string { return v.OauthScopes }).(pulumi.StringArrayOutput)
}

// Whether the nodes are created as preemptible VM instances. See: https://cloud.google.com/compute/docs/instances/preemptible for more information about preemptible VM instances.
func (o NodeConfigResponseOutput) Preemptible() pulumi.BoolOutput {
	return o.ApplyT(func(v NodeConfigResponse) bool { return v.Preemptible }).(pulumi.BoolOutput)
}

// The optional reservation affinity. Setting this field will apply the specified [Zonal Compute Reservation](https://cloud.google.com/compute/docs/instances/reserving-zonal-resources) to this node pool.
func (o NodeConfigResponseOutput) ReservationAffinity() ReservationAffinityResponseOutput {
	return o.ApplyT(func(v NodeConfigResponse) ReservationAffinityResponse { return v.ReservationAffinity }).(ReservationAffinityResponseOutput)
}

// Sandbox configuration for this node.
func (o NodeConfigResponseOutput) SandboxConfig() SandboxConfigResponseOutput {
	return o.ApplyT(func(v NodeConfigResponse) SandboxConfigResponse { return v.SandboxConfig }).(SandboxConfigResponseOutput)
}

// The Google Cloud Platform Service Account to be used by the node VMs. Specify the email address of the Service Account; otherwise, if no Service Account is specified, the "default" service account is used.
func (o NodeConfigResponseOutput) ServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v NodeConfigResponse) string { return v.ServiceAccount }).(pulumi.StringOutput)
}

// Shielded Instance options.
func (o NodeConfigResponseOutput) ShieldedInstanceConfig() ShieldedInstanceConfigResponseOutput {
	return o.ApplyT(func(v NodeConfigResponse) ShieldedInstanceConfigResponse { return v.ShieldedInstanceConfig }).(ShieldedInstanceConfigResponseOutput)
}

// The list of instance tags applied to all nodes. Tags are used to identify valid sources or targets for network firewalls and are specified by the client during cluster or node pool creation. Each tag within the list must comply with RFC1035.
func (o NodeConfigResponseOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NodeConfigResponse) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// List of kubernetes taints to be applied to each node. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
func (o NodeConfigResponseOutput) Taints() NodeTaintResponseArrayOutput {
	return o.ApplyT(func(v NodeConfigResponse) []NodeTaintResponse { return v.Taints }).(NodeTaintResponseArrayOutput)
}

// The workload metadata configuration for this node.
func (o NodeConfigResponseOutput) WorkloadMetadataConfig() WorkloadMetadataConfigResponseOutput {
	return o.ApplyT(func(v NodeConfigResponse) WorkloadMetadataConfigResponse { return v.WorkloadMetadataConfig }).(WorkloadMetadataConfigResponseOutput)
}

type NodeConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (NodeConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeConfigResponse)(nil)).Elem()
}

func (o NodeConfigResponsePtrOutput) ToNodeConfigResponsePtrOutput() NodeConfigResponsePtrOutput {
	return o
}

func (o NodeConfigResponsePtrOutput) ToNodeConfigResponsePtrOutputWithContext(ctx context.Context) NodeConfigResponsePtrOutput {
	return o
}

func (o NodeConfigResponsePtrOutput) Elem() NodeConfigResponseOutput {
	return o.ApplyT(func(v *NodeConfigResponse) NodeConfigResponse { return *v }).(NodeConfigResponseOutput)
}

// A list of hardware accelerators to be attached to each node. See https://cloud.google.com/compute/docs/gpus for more information about support for GPUs.
func (o NodeConfigResponsePtrOutput) Accelerators() AcceleratorConfigResponseArrayOutput {
	return o.ApplyT(func(v *NodeConfigResponse) []AcceleratorConfigResponse {
		if v == nil {
			return nil
		}
		return v.Accelerators
	}).(AcceleratorConfigResponseArrayOutput)
}

//  The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption
func (o NodeConfigResponsePtrOutput) BootDiskKmsKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.BootDiskKmsKey
	}).(pulumi.StringPtrOutput)
}

// Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the default disk size is 100GB.
func (o NodeConfigResponsePtrOutput) DiskSizeGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodeConfigResponse) *int {
		if v == nil {
			return nil
		}
		return &v.DiskSizeGb
	}).(pulumi.IntPtrOutput)
}

// Type of the disk attached to each node (e.g. 'pd-standard', 'pd-ssd' or 'pd-balanced') If unspecified, the default disk type is 'pd-standard'
func (o NodeConfigResponsePtrOutput) DiskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DiskType
	}).(pulumi.StringPtrOutput)
}

// The image type to use for this node. Note that for a given image type, the latest version of it will be used.
func (o NodeConfigResponsePtrOutput) ImageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ImageType
	}).(pulumi.StringPtrOutput)
}

// Node kubelet configs.
func (o NodeConfigResponsePtrOutput) KubeletConfig() NodeKubeletConfigResponsePtrOutput {
	return o.ApplyT(func(v *NodeConfigResponse) *NodeKubeletConfigResponse {
		if v == nil {
			return nil
		}
		return &v.KubeletConfig
	}).(NodeKubeletConfigResponsePtrOutput)
}

// The map of Kubernetes labels (key/value pairs) to be applied to each node. These will added in addition to any default label(s) that Kubernetes may apply to the node. In case of conflict in label keys, the applied set may differ depending on the Kubernetes version -- it's best to assume the behavior is undefined and conflicts should be avoided. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
func (o NodeConfigResponsePtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NodeConfigResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// Parameters that can be configured on Linux nodes.
func (o NodeConfigResponsePtrOutput) LinuxNodeConfig() LinuxNodeConfigResponsePtrOutput {
	return o.ApplyT(func(v *NodeConfigResponse) *LinuxNodeConfigResponse {
		if v == nil {
			return nil
		}
		return &v.LinuxNodeConfig
	}).(LinuxNodeConfigResponsePtrOutput)
}

// The number of local SSD disks to be attached to the node. The limit for this value is dependent upon the maximum number of disks available on a machine per zone. See: https://cloud.google.com/compute/docs/disks/local-ssd for more information.
func (o NodeConfigResponsePtrOutput) LocalSsdCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodeConfigResponse) *int {
		if v == nil {
			return nil
		}
		return &v.LocalSsdCount
	}).(pulumi.IntPtrOutput)
}

// The name of a Google Compute Engine [machine type](https://cloud.google.com/compute/docs/machine-types) If unspecified, the default machine type is `e2-medium`.
func (o NodeConfigResponsePtrOutput) MachineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.MachineType
	}).(pulumi.StringPtrOutput)
}

// The metadata key/value pairs assigned to instances in the cluster. Keys must conform to the regexp `[a-zA-Z0-9-_]+` and be less than 128 bytes in length. These are reflected as part of a URL in the metadata server. Additionally, to avoid ambiguity, keys must not conflict with any other metadata keys for the project or be one of the reserved keys: - "cluster-location" - "cluster-name" - "cluster-uid" - "configure-sh" - "containerd-configure-sh" - "enable-os-login" - "gci-ensure-gke-docker" - "gci-metrics-enabled" - "gci-update-strategy" - "instance-template" - "kube-env" - "startup-script" - "user-data" - "disable-address-manager" - "windows-startup-script-ps1" - "common-psm1" - "k8s-node-setup-psm1" - "install-ssh-psm1" - "user-profile-psm1" The following keys are reserved for Windows nodes: - "serial-port-logging-enable" Values are free-form strings, and only have meaning as interpreted by the image running in the instance. The only restriction placed on them is that each value's size must be less than or equal to 32 KB. The total size of all keys and values must be less than 512 KB.
func (o NodeConfigResponsePtrOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NodeConfigResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringMapOutput)
}

// Minimum CPU platform to be used by this instance. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as `minCpuPlatform: "Intel Haswell"` or `minCpuPlatform: "Intel Sandy Bridge"`. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform)
func (o NodeConfigResponsePtrOutput) MinCpuPlatform() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.MinCpuPlatform
	}).(pulumi.StringPtrOutput)
}

// Setting this field will assign instances of this pool to run on the specified node group. This is useful for running workloads on [sole tenant nodes](https://cloud.google.com/compute/docs/nodes/sole-tenant-nodes).
func (o NodeConfigResponsePtrOutput) NodeGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.NodeGroup
	}).(pulumi.StringPtrOutput)
}

// The set of Google API scopes to be made available on all of the node VMs under the "default" service account. The following scopes are recommended, but not required, and by default are not included: * `https://www.googleapis.com/auth/compute` is required for mounting persistent storage on your nodes. * `https://www.googleapis.com/auth/devstorage.read_only` is required for communicating with **gcr.io** (the [Google Container Registry](https://cloud.google.com/container-registry/)). If unspecified, no scopes are added, unless Cloud Logging or Cloud Monitoring are enabled, in which case their required scopes will be added.
func (o NodeConfigResponsePtrOutput) OauthScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NodeConfigResponse) []string {
		if v == nil {
			return nil
		}
		return v.OauthScopes
	}).(pulumi.StringArrayOutput)
}

// Whether the nodes are created as preemptible VM instances. See: https://cloud.google.com/compute/docs/instances/preemptible for more information about preemptible VM instances.
func (o NodeConfigResponsePtrOutput) Preemptible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NodeConfigResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.Preemptible
	}).(pulumi.BoolPtrOutput)
}

// The optional reservation affinity. Setting this field will apply the specified [Zonal Compute Reservation](https://cloud.google.com/compute/docs/instances/reserving-zonal-resources) to this node pool.
func (o NodeConfigResponsePtrOutput) ReservationAffinity() ReservationAffinityResponsePtrOutput {
	return o.ApplyT(func(v *NodeConfigResponse) *ReservationAffinityResponse {
		if v == nil {
			return nil
		}
		return &v.ReservationAffinity
	}).(ReservationAffinityResponsePtrOutput)
}

// Sandbox configuration for this node.
func (o NodeConfigResponsePtrOutput) SandboxConfig() SandboxConfigResponsePtrOutput {
	return o.ApplyT(func(v *NodeConfigResponse) *SandboxConfigResponse {
		if v == nil {
			return nil
		}
		return &v.SandboxConfig
	}).(SandboxConfigResponsePtrOutput)
}

// The Google Cloud Platform Service Account to be used by the node VMs. Specify the email address of the Service Account; otherwise, if no Service Account is specified, the "default" service account is used.
func (o NodeConfigResponsePtrOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ServiceAccount
	}).(pulumi.StringPtrOutput)
}

// Shielded Instance options.
func (o NodeConfigResponsePtrOutput) ShieldedInstanceConfig() ShieldedInstanceConfigResponsePtrOutput {
	return o.ApplyT(func(v *NodeConfigResponse) *ShieldedInstanceConfigResponse {
		if v == nil {
			return nil
		}
		return &v.ShieldedInstanceConfig
	}).(ShieldedInstanceConfigResponsePtrOutput)
}

// The list of instance tags applied to all nodes. Tags are used to identify valid sources or targets for network firewalls and are specified by the client during cluster or node pool creation. Each tag within the list must comply with RFC1035.
func (o NodeConfigResponsePtrOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NodeConfigResponse) []string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringArrayOutput)
}

// List of kubernetes taints to be applied to each node. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
func (o NodeConfigResponsePtrOutput) Taints() NodeTaintResponseArrayOutput {
	return o.ApplyT(func(v *NodeConfigResponse) []NodeTaintResponse {
		if v == nil {
			return nil
		}
		return v.Taints
	}).(NodeTaintResponseArrayOutput)
}

// The workload metadata configuration for this node.
func (o NodeConfigResponsePtrOutput) WorkloadMetadataConfig() WorkloadMetadataConfigResponsePtrOutput {
	return o.ApplyT(func(v *NodeConfigResponse) *WorkloadMetadataConfigResponse {
		if v == nil {
			return nil
		}
		return &v.WorkloadMetadataConfig
	}).(WorkloadMetadataConfigResponsePtrOutput)
}

// Node kubelet configs.
type NodeKubeletConfig struct {
	// Enable CPU CFS quota enforcement for containers that specify CPU limits. This option is enabled by default which makes kubelet use CFS quota (https://www.kernel.org/doc/Documentation/scheduler/sched-bwc.txt) to enforce container CPU limits. Otherwise, CPU limits will not be enforced at all. Disable this option to mitigate CPU throttling problems while still having your pods to be in Guaranteed QoS class by specifying the CPU limits. The default value is 'true' if unspecified.
	CpuCfsQuota *bool `pulumi:"cpuCfsQuota"`
	// Set the CPU CFS quota period value 'cpu.cfs_period_us'. The string must be a sequence of decimal numbers, each with optional fraction and a unit suffix, such as "300ms". Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h". The value must be a positive duration.
	CpuCfsQuotaPeriod *string `pulumi:"cpuCfsQuotaPeriod"`
	// Control the CPU management policy on the node. See https://kubernetes.io/docs/tasks/administer-cluster/cpu-management-policies/ The following values are allowed. - "none": the default, which represents the existing scheduling behavior. - "static": allows pods with certain resource characteristics to be granted increased CPU affinity and exclusivity on the node. The default value is 'none' if unspecified.
	CpuManagerPolicy *string `pulumi:"cpuManagerPolicy"`
}

// NodeKubeletConfigInput is an input type that accepts NodeKubeletConfigArgs and NodeKubeletConfigOutput values.
// You can construct a concrete instance of `NodeKubeletConfigInput` via:
//
//          NodeKubeletConfigArgs{...}
type NodeKubeletConfigInput interface {
	pulumi.Input

	ToNodeKubeletConfigOutput() NodeKubeletConfigOutput
	ToNodeKubeletConfigOutputWithContext(context.Context) NodeKubeletConfigOutput
}

// Node kubelet configs.
type NodeKubeletConfigArgs struct {
	// Enable CPU CFS quota enforcement for containers that specify CPU limits. This option is enabled by default which makes kubelet use CFS quota (https://www.kernel.org/doc/Documentation/scheduler/sched-bwc.txt) to enforce container CPU limits. Otherwise, CPU limits will not be enforced at all. Disable this option to mitigate CPU throttling problems while still having your pods to be in Guaranteed QoS class by specifying the CPU limits. The default value is 'true' if unspecified.
	CpuCfsQuota pulumi.BoolPtrInput `pulumi:"cpuCfsQuota"`
	// Set the CPU CFS quota period value 'cpu.cfs_period_us'. The string must be a sequence of decimal numbers, each with optional fraction and a unit suffix, such as "300ms". Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h". The value must be a positive duration.
	CpuCfsQuotaPeriod pulumi.StringPtrInput `pulumi:"cpuCfsQuotaPeriod"`
	// Control the CPU management policy on the node. See https://kubernetes.io/docs/tasks/administer-cluster/cpu-management-policies/ The following values are allowed. - "none": the default, which represents the existing scheduling behavior. - "static": allows pods with certain resource characteristics to be granted increased CPU affinity and exclusivity on the node. The default value is 'none' if unspecified.
	CpuManagerPolicy pulumi.StringPtrInput `pulumi:"cpuManagerPolicy"`
}

func (NodeKubeletConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeKubeletConfig)(nil)).Elem()
}

func (i NodeKubeletConfigArgs) ToNodeKubeletConfigOutput() NodeKubeletConfigOutput {
	return i.ToNodeKubeletConfigOutputWithContext(context.Background())
}

func (i NodeKubeletConfigArgs) ToNodeKubeletConfigOutputWithContext(ctx context.Context) NodeKubeletConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeKubeletConfigOutput)
}

func (i NodeKubeletConfigArgs) ToNodeKubeletConfigPtrOutput() NodeKubeletConfigPtrOutput {
	return i.ToNodeKubeletConfigPtrOutputWithContext(context.Background())
}

func (i NodeKubeletConfigArgs) ToNodeKubeletConfigPtrOutputWithContext(ctx context.Context) NodeKubeletConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeKubeletConfigOutput).ToNodeKubeletConfigPtrOutputWithContext(ctx)
}

// NodeKubeletConfigPtrInput is an input type that accepts NodeKubeletConfigArgs, NodeKubeletConfigPtr and NodeKubeletConfigPtrOutput values.
// You can construct a concrete instance of `NodeKubeletConfigPtrInput` via:
//
//          NodeKubeletConfigArgs{...}
//
//  or:
//
//          nil
type NodeKubeletConfigPtrInput interface {
	pulumi.Input

	ToNodeKubeletConfigPtrOutput() NodeKubeletConfigPtrOutput
	ToNodeKubeletConfigPtrOutputWithContext(context.Context) NodeKubeletConfigPtrOutput
}

type nodeKubeletConfigPtrType NodeKubeletConfigArgs

func NodeKubeletConfigPtr(v *NodeKubeletConfigArgs) NodeKubeletConfigPtrInput {
	return (*nodeKubeletConfigPtrType)(v)
}

func (*nodeKubeletConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeKubeletConfig)(nil)).Elem()
}

func (i *nodeKubeletConfigPtrType) ToNodeKubeletConfigPtrOutput() NodeKubeletConfigPtrOutput {
	return i.ToNodeKubeletConfigPtrOutputWithContext(context.Background())
}

func (i *nodeKubeletConfigPtrType) ToNodeKubeletConfigPtrOutputWithContext(ctx context.Context) NodeKubeletConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeKubeletConfigPtrOutput)
}

// Node kubelet configs.
type NodeKubeletConfigOutput struct{ *pulumi.OutputState }

func (NodeKubeletConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeKubeletConfig)(nil)).Elem()
}

func (o NodeKubeletConfigOutput) ToNodeKubeletConfigOutput() NodeKubeletConfigOutput {
	return o
}

func (o NodeKubeletConfigOutput) ToNodeKubeletConfigOutputWithContext(ctx context.Context) NodeKubeletConfigOutput {
	return o
}

func (o NodeKubeletConfigOutput) ToNodeKubeletConfigPtrOutput() NodeKubeletConfigPtrOutput {
	return o.ToNodeKubeletConfigPtrOutputWithContext(context.Background())
}

func (o NodeKubeletConfigOutput) ToNodeKubeletConfigPtrOutputWithContext(ctx context.Context) NodeKubeletConfigPtrOutput {
	return o.ApplyT(func(v NodeKubeletConfig) *NodeKubeletConfig {
		return &v
	}).(NodeKubeletConfigPtrOutput)
}

// Enable CPU CFS quota enforcement for containers that specify CPU limits. This option is enabled by default which makes kubelet use CFS quota (https://www.kernel.org/doc/Documentation/scheduler/sched-bwc.txt) to enforce container CPU limits. Otherwise, CPU limits will not be enforced at all. Disable this option to mitigate CPU throttling problems while still having your pods to be in Guaranteed QoS class by specifying the CPU limits. The default value is 'true' if unspecified.
func (o NodeKubeletConfigOutput) CpuCfsQuota() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NodeKubeletConfig) *bool { return v.CpuCfsQuota }).(pulumi.BoolPtrOutput)
}

// Set the CPU CFS quota period value 'cpu.cfs_period_us'. The string must be a sequence of decimal numbers, each with optional fraction and a unit suffix, such as "300ms". Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h". The value must be a positive duration.
func (o NodeKubeletConfigOutput) CpuCfsQuotaPeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeKubeletConfig) *string { return v.CpuCfsQuotaPeriod }).(pulumi.StringPtrOutput)
}

// Control the CPU management policy on the node. See https://kubernetes.io/docs/tasks/administer-cluster/cpu-management-policies/ The following values are allowed. - "none": the default, which represents the existing scheduling behavior. - "static": allows pods with certain resource characteristics to be granted increased CPU affinity and exclusivity on the node. The default value is 'none' if unspecified.
func (o NodeKubeletConfigOutput) CpuManagerPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeKubeletConfig) *string { return v.CpuManagerPolicy }).(pulumi.StringPtrOutput)
}

type NodeKubeletConfigPtrOutput struct{ *pulumi.OutputState }

func (NodeKubeletConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeKubeletConfig)(nil)).Elem()
}

func (o NodeKubeletConfigPtrOutput) ToNodeKubeletConfigPtrOutput() NodeKubeletConfigPtrOutput {
	return o
}

func (o NodeKubeletConfigPtrOutput) ToNodeKubeletConfigPtrOutputWithContext(ctx context.Context) NodeKubeletConfigPtrOutput {
	return o
}

func (o NodeKubeletConfigPtrOutput) Elem() NodeKubeletConfigOutput {
	return o.ApplyT(func(v *NodeKubeletConfig) NodeKubeletConfig { return *v }).(NodeKubeletConfigOutput)
}

// Enable CPU CFS quota enforcement for containers that specify CPU limits. This option is enabled by default which makes kubelet use CFS quota (https://www.kernel.org/doc/Documentation/scheduler/sched-bwc.txt) to enforce container CPU limits. Otherwise, CPU limits will not be enforced at all. Disable this option to mitigate CPU throttling problems while still having your pods to be in Guaranteed QoS class by specifying the CPU limits. The default value is 'true' if unspecified.
func (o NodeKubeletConfigPtrOutput) CpuCfsQuota() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NodeKubeletConfig) *bool {
		if v == nil {
			return nil
		}
		return v.CpuCfsQuota
	}).(pulumi.BoolPtrOutput)
}

// Set the CPU CFS quota period value 'cpu.cfs_period_us'. The string must be a sequence of decimal numbers, each with optional fraction and a unit suffix, such as "300ms". Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h". The value must be a positive duration.
func (o NodeKubeletConfigPtrOutput) CpuCfsQuotaPeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeKubeletConfig) *string {
		if v == nil {
			return nil
		}
		return v.CpuCfsQuotaPeriod
	}).(pulumi.StringPtrOutput)
}

// Control the CPU management policy on the node. See https://kubernetes.io/docs/tasks/administer-cluster/cpu-management-policies/ The following values are allowed. - "none": the default, which represents the existing scheduling behavior. - "static": allows pods with certain resource characteristics to be granted increased CPU affinity and exclusivity on the node. The default value is 'none' if unspecified.
func (o NodeKubeletConfigPtrOutput) CpuManagerPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeKubeletConfig) *string {
		if v == nil {
			return nil
		}
		return v.CpuManagerPolicy
	}).(pulumi.StringPtrOutput)
}

// Node kubelet configs.
type NodeKubeletConfigResponse struct {
	// Enable CPU CFS quota enforcement for containers that specify CPU limits. This option is enabled by default which makes kubelet use CFS quota (https://www.kernel.org/doc/Documentation/scheduler/sched-bwc.txt) to enforce container CPU limits. Otherwise, CPU limits will not be enforced at all. Disable this option to mitigate CPU throttling problems while still having your pods to be in Guaranteed QoS class by specifying the CPU limits. The default value is 'true' if unspecified.
	CpuCfsQuota bool `pulumi:"cpuCfsQuota"`
	// Set the CPU CFS quota period value 'cpu.cfs_period_us'. The string must be a sequence of decimal numbers, each with optional fraction and a unit suffix, such as "300ms". Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h". The value must be a positive duration.
	CpuCfsQuotaPeriod string `pulumi:"cpuCfsQuotaPeriod"`
	// Control the CPU management policy on the node. See https://kubernetes.io/docs/tasks/administer-cluster/cpu-management-policies/ The following values are allowed. - "none": the default, which represents the existing scheduling behavior. - "static": allows pods with certain resource characteristics to be granted increased CPU affinity and exclusivity on the node. The default value is 'none' if unspecified.
	CpuManagerPolicy string `pulumi:"cpuManagerPolicy"`
}

// NodeKubeletConfigResponseInput is an input type that accepts NodeKubeletConfigResponseArgs and NodeKubeletConfigResponseOutput values.
// You can construct a concrete instance of `NodeKubeletConfigResponseInput` via:
//
//          NodeKubeletConfigResponseArgs{...}
type NodeKubeletConfigResponseInput interface {
	pulumi.Input

	ToNodeKubeletConfigResponseOutput() NodeKubeletConfigResponseOutput
	ToNodeKubeletConfigResponseOutputWithContext(context.Context) NodeKubeletConfigResponseOutput
}

// Node kubelet configs.
type NodeKubeletConfigResponseArgs struct {
	// Enable CPU CFS quota enforcement for containers that specify CPU limits. This option is enabled by default which makes kubelet use CFS quota (https://www.kernel.org/doc/Documentation/scheduler/sched-bwc.txt) to enforce container CPU limits. Otherwise, CPU limits will not be enforced at all. Disable this option to mitigate CPU throttling problems while still having your pods to be in Guaranteed QoS class by specifying the CPU limits. The default value is 'true' if unspecified.
	CpuCfsQuota pulumi.BoolInput `pulumi:"cpuCfsQuota"`
	// Set the CPU CFS quota period value 'cpu.cfs_period_us'. The string must be a sequence of decimal numbers, each with optional fraction and a unit suffix, such as "300ms". Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h". The value must be a positive duration.
	CpuCfsQuotaPeriod pulumi.StringInput `pulumi:"cpuCfsQuotaPeriod"`
	// Control the CPU management policy on the node. See https://kubernetes.io/docs/tasks/administer-cluster/cpu-management-policies/ The following values are allowed. - "none": the default, which represents the existing scheduling behavior. - "static": allows pods with certain resource characteristics to be granted increased CPU affinity and exclusivity on the node. The default value is 'none' if unspecified.
	CpuManagerPolicy pulumi.StringInput `pulumi:"cpuManagerPolicy"`
}

func (NodeKubeletConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeKubeletConfigResponse)(nil)).Elem()
}

func (i NodeKubeletConfigResponseArgs) ToNodeKubeletConfigResponseOutput() NodeKubeletConfigResponseOutput {
	return i.ToNodeKubeletConfigResponseOutputWithContext(context.Background())
}

func (i NodeKubeletConfigResponseArgs) ToNodeKubeletConfigResponseOutputWithContext(ctx context.Context) NodeKubeletConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeKubeletConfigResponseOutput)
}

func (i NodeKubeletConfigResponseArgs) ToNodeKubeletConfigResponsePtrOutput() NodeKubeletConfigResponsePtrOutput {
	return i.ToNodeKubeletConfigResponsePtrOutputWithContext(context.Background())
}

func (i NodeKubeletConfigResponseArgs) ToNodeKubeletConfigResponsePtrOutputWithContext(ctx context.Context) NodeKubeletConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeKubeletConfigResponseOutput).ToNodeKubeletConfigResponsePtrOutputWithContext(ctx)
}

// NodeKubeletConfigResponsePtrInput is an input type that accepts NodeKubeletConfigResponseArgs, NodeKubeletConfigResponsePtr and NodeKubeletConfigResponsePtrOutput values.
// You can construct a concrete instance of `NodeKubeletConfigResponsePtrInput` via:
//
//          NodeKubeletConfigResponseArgs{...}
//
//  or:
//
//          nil
type NodeKubeletConfigResponsePtrInput interface {
	pulumi.Input

	ToNodeKubeletConfigResponsePtrOutput() NodeKubeletConfigResponsePtrOutput
	ToNodeKubeletConfigResponsePtrOutputWithContext(context.Context) NodeKubeletConfigResponsePtrOutput
}

type nodeKubeletConfigResponsePtrType NodeKubeletConfigResponseArgs

func NodeKubeletConfigResponsePtr(v *NodeKubeletConfigResponseArgs) NodeKubeletConfigResponsePtrInput {
	return (*nodeKubeletConfigResponsePtrType)(v)
}

func (*nodeKubeletConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeKubeletConfigResponse)(nil)).Elem()
}

func (i *nodeKubeletConfigResponsePtrType) ToNodeKubeletConfigResponsePtrOutput() NodeKubeletConfigResponsePtrOutput {
	return i.ToNodeKubeletConfigResponsePtrOutputWithContext(context.Background())
}

func (i *nodeKubeletConfigResponsePtrType) ToNodeKubeletConfigResponsePtrOutputWithContext(ctx context.Context) NodeKubeletConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeKubeletConfigResponsePtrOutput)
}

// Node kubelet configs.
type NodeKubeletConfigResponseOutput struct{ *pulumi.OutputState }

func (NodeKubeletConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeKubeletConfigResponse)(nil)).Elem()
}

func (o NodeKubeletConfigResponseOutput) ToNodeKubeletConfigResponseOutput() NodeKubeletConfigResponseOutput {
	return o
}

func (o NodeKubeletConfigResponseOutput) ToNodeKubeletConfigResponseOutputWithContext(ctx context.Context) NodeKubeletConfigResponseOutput {
	return o
}

func (o NodeKubeletConfigResponseOutput) ToNodeKubeletConfigResponsePtrOutput() NodeKubeletConfigResponsePtrOutput {
	return o.ToNodeKubeletConfigResponsePtrOutputWithContext(context.Background())
}

func (o NodeKubeletConfigResponseOutput) ToNodeKubeletConfigResponsePtrOutputWithContext(ctx context.Context) NodeKubeletConfigResponsePtrOutput {
	return o.ApplyT(func(v NodeKubeletConfigResponse) *NodeKubeletConfigResponse {
		return &v
	}).(NodeKubeletConfigResponsePtrOutput)
}

// Enable CPU CFS quota enforcement for containers that specify CPU limits. This option is enabled by default which makes kubelet use CFS quota (https://www.kernel.org/doc/Documentation/scheduler/sched-bwc.txt) to enforce container CPU limits. Otherwise, CPU limits will not be enforced at all. Disable this option to mitigate CPU throttling problems while still having your pods to be in Guaranteed QoS class by specifying the CPU limits. The default value is 'true' if unspecified.
func (o NodeKubeletConfigResponseOutput) CpuCfsQuota() pulumi.BoolOutput {
	return o.ApplyT(func(v NodeKubeletConfigResponse) bool { return v.CpuCfsQuota }).(pulumi.BoolOutput)
}

// Set the CPU CFS quota period value 'cpu.cfs_period_us'. The string must be a sequence of decimal numbers, each with optional fraction and a unit suffix, such as "300ms". Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h". The value must be a positive duration.
func (o NodeKubeletConfigResponseOutput) CpuCfsQuotaPeriod() pulumi.StringOutput {
	return o.ApplyT(func(v NodeKubeletConfigResponse) string { return v.CpuCfsQuotaPeriod }).(pulumi.StringOutput)
}

// Control the CPU management policy on the node. See https://kubernetes.io/docs/tasks/administer-cluster/cpu-management-policies/ The following values are allowed. - "none": the default, which represents the existing scheduling behavior. - "static": allows pods with certain resource characteristics to be granted increased CPU affinity and exclusivity on the node. The default value is 'none' if unspecified.
func (o NodeKubeletConfigResponseOutput) CpuManagerPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v NodeKubeletConfigResponse) string { return v.CpuManagerPolicy }).(pulumi.StringOutput)
}

type NodeKubeletConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (NodeKubeletConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeKubeletConfigResponse)(nil)).Elem()
}

func (o NodeKubeletConfigResponsePtrOutput) ToNodeKubeletConfigResponsePtrOutput() NodeKubeletConfigResponsePtrOutput {
	return o
}

func (o NodeKubeletConfigResponsePtrOutput) ToNodeKubeletConfigResponsePtrOutputWithContext(ctx context.Context) NodeKubeletConfigResponsePtrOutput {
	return o
}

func (o NodeKubeletConfigResponsePtrOutput) Elem() NodeKubeletConfigResponseOutput {
	return o.ApplyT(func(v *NodeKubeletConfigResponse) NodeKubeletConfigResponse { return *v }).(NodeKubeletConfigResponseOutput)
}

// Enable CPU CFS quota enforcement for containers that specify CPU limits. This option is enabled by default which makes kubelet use CFS quota (https://www.kernel.org/doc/Documentation/scheduler/sched-bwc.txt) to enforce container CPU limits. Otherwise, CPU limits will not be enforced at all. Disable this option to mitigate CPU throttling problems while still having your pods to be in Guaranteed QoS class by specifying the CPU limits. The default value is 'true' if unspecified.
func (o NodeKubeletConfigResponsePtrOutput) CpuCfsQuota() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NodeKubeletConfigResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.CpuCfsQuota
	}).(pulumi.BoolPtrOutput)
}

// Set the CPU CFS quota period value 'cpu.cfs_period_us'. The string must be a sequence of decimal numbers, each with optional fraction and a unit suffix, such as "300ms". Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h". The value must be a positive duration.
func (o NodeKubeletConfigResponsePtrOutput) CpuCfsQuotaPeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeKubeletConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CpuCfsQuotaPeriod
	}).(pulumi.StringPtrOutput)
}

// Control the CPU management policy on the node. See https://kubernetes.io/docs/tasks/administer-cluster/cpu-management-policies/ The following values are allowed. - "none": the default, which represents the existing scheduling behavior. - "static": allows pods with certain resource characteristics to be granted increased CPU affinity and exclusivity on the node. The default value is 'none' if unspecified.
func (o NodeKubeletConfigResponsePtrOutput) CpuManagerPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeKubeletConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CpuManagerPolicy
	}).(pulumi.StringPtrOutput)
}

// NodeManagement defines the set of node management services turned on for the node pool.
type NodeManagement struct {
	// A flag that specifies whether the node auto-repair is enabled for the node pool. If enabled, the nodes in this node pool will be monitored and, if they fail health checks too many times, an automatic repair action will be triggered.
	AutoRepair *bool `pulumi:"autoRepair"`
	// A flag that specifies whether node auto-upgrade is enabled for the node pool. If enabled, node auto-upgrade helps keep the nodes in your node pool up to date with the latest release version of Kubernetes.
	AutoUpgrade *bool `pulumi:"autoUpgrade"`
	// Specifies the Auto Upgrade knobs for the node pool.
	UpgradeOptions *AutoUpgradeOptions `pulumi:"upgradeOptions"`
}

// NodeManagementInput is an input type that accepts NodeManagementArgs and NodeManagementOutput values.
// You can construct a concrete instance of `NodeManagementInput` via:
//
//          NodeManagementArgs{...}
type NodeManagementInput interface {
	pulumi.Input

	ToNodeManagementOutput() NodeManagementOutput
	ToNodeManagementOutputWithContext(context.Context) NodeManagementOutput
}

// NodeManagement defines the set of node management services turned on for the node pool.
type NodeManagementArgs struct {
	// A flag that specifies whether the node auto-repair is enabled for the node pool. If enabled, the nodes in this node pool will be monitored and, if they fail health checks too many times, an automatic repair action will be triggered.
	AutoRepair pulumi.BoolPtrInput `pulumi:"autoRepair"`
	// A flag that specifies whether node auto-upgrade is enabled for the node pool. If enabled, node auto-upgrade helps keep the nodes in your node pool up to date with the latest release version of Kubernetes.
	AutoUpgrade pulumi.BoolPtrInput `pulumi:"autoUpgrade"`
	// Specifies the Auto Upgrade knobs for the node pool.
	UpgradeOptions AutoUpgradeOptionsPtrInput `pulumi:"upgradeOptions"`
}

func (NodeManagementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeManagement)(nil)).Elem()
}

func (i NodeManagementArgs) ToNodeManagementOutput() NodeManagementOutput {
	return i.ToNodeManagementOutputWithContext(context.Background())
}

func (i NodeManagementArgs) ToNodeManagementOutputWithContext(ctx context.Context) NodeManagementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeManagementOutput)
}

func (i NodeManagementArgs) ToNodeManagementPtrOutput() NodeManagementPtrOutput {
	return i.ToNodeManagementPtrOutputWithContext(context.Background())
}

func (i NodeManagementArgs) ToNodeManagementPtrOutputWithContext(ctx context.Context) NodeManagementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeManagementOutput).ToNodeManagementPtrOutputWithContext(ctx)
}

// NodeManagementPtrInput is an input type that accepts NodeManagementArgs, NodeManagementPtr and NodeManagementPtrOutput values.
// You can construct a concrete instance of `NodeManagementPtrInput` via:
//
//          NodeManagementArgs{...}
//
//  or:
//
//          nil
type NodeManagementPtrInput interface {
	pulumi.Input

	ToNodeManagementPtrOutput() NodeManagementPtrOutput
	ToNodeManagementPtrOutputWithContext(context.Context) NodeManagementPtrOutput
}

type nodeManagementPtrType NodeManagementArgs

func NodeManagementPtr(v *NodeManagementArgs) NodeManagementPtrInput {
	return (*nodeManagementPtrType)(v)
}

func (*nodeManagementPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeManagement)(nil)).Elem()
}

func (i *nodeManagementPtrType) ToNodeManagementPtrOutput() NodeManagementPtrOutput {
	return i.ToNodeManagementPtrOutputWithContext(context.Background())
}

func (i *nodeManagementPtrType) ToNodeManagementPtrOutputWithContext(ctx context.Context) NodeManagementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeManagementPtrOutput)
}

// NodeManagement defines the set of node management services turned on for the node pool.
type NodeManagementOutput struct{ *pulumi.OutputState }

func (NodeManagementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeManagement)(nil)).Elem()
}

func (o NodeManagementOutput) ToNodeManagementOutput() NodeManagementOutput {
	return o
}

func (o NodeManagementOutput) ToNodeManagementOutputWithContext(ctx context.Context) NodeManagementOutput {
	return o
}

func (o NodeManagementOutput) ToNodeManagementPtrOutput() NodeManagementPtrOutput {
	return o.ToNodeManagementPtrOutputWithContext(context.Background())
}

func (o NodeManagementOutput) ToNodeManagementPtrOutputWithContext(ctx context.Context) NodeManagementPtrOutput {
	return o.ApplyT(func(v NodeManagement) *NodeManagement {
		return &v
	}).(NodeManagementPtrOutput)
}

// A flag that specifies whether the node auto-repair is enabled for the node pool. If enabled, the nodes in this node pool will be monitored and, if they fail health checks too many times, an automatic repair action will be triggered.
func (o NodeManagementOutput) AutoRepair() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NodeManagement) *bool { return v.AutoRepair }).(pulumi.BoolPtrOutput)
}

// A flag that specifies whether node auto-upgrade is enabled for the node pool. If enabled, node auto-upgrade helps keep the nodes in your node pool up to date with the latest release version of Kubernetes.
func (o NodeManagementOutput) AutoUpgrade() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NodeManagement) *bool { return v.AutoUpgrade }).(pulumi.BoolPtrOutput)
}

// Specifies the Auto Upgrade knobs for the node pool.
func (o NodeManagementOutput) UpgradeOptions() AutoUpgradeOptionsPtrOutput {
	return o.ApplyT(func(v NodeManagement) *AutoUpgradeOptions { return v.UpgradeOptions }).(AutoUpgradeOptionsPtrOutput)
}

type NodeManagementPtrOutput struct{ *pulumi.OutputState }

func (NodeManagementPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeManagement)(nil)).Elem()
}

func (o NodeManagementPtrOutput) ToNodeManagementPtrOutput() NodeManagementPtrOutput {
	return o
}

func (o NodeManagementPtrOutput) ToNodeManagementPtrOutputWithContext(ctx context.Context) NodeManagementPtrOutput {
	return o
}

func (o NodeManagementPtrOutput) Elem() NodeManagementOutput {
	return o.ApplyT(func(v *NodeManagement) NodeManagement { return *v }).(NodeManagementOutput)
}

// A flag that specifies whether the node auto-repair is enabled for the node pool. If enabled, the nodes in this node pool will be monitored and, if they fail health checks too many times, an automatic repair action will be triggered.
func (o NodeManagementPtrOutput) AutoRepair() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NodeManagement) *bool {
		if v == nil {
			return nil
		}
		return v.AutoRepair
	}).(pulumi.BoolPtrOutput)
}

// A flag that specifies whether node auto-upgrade is enabled for the node pool. If enabled, node auto-upgrade helps keep the nodes in your node pool up to date with the latest release version of Kubernetes.
func (o NodeManagementPtrOutput) AutoUpgrade() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NodeManagement) *bool {
		if v == nil {
			return nil
		}
		return v.AutoUpgrade
	}).(pulumi.BoolPtrOutput)
}

// Specifies the Auto Upgrade knobs for the node pool.
func (o NodeManagementPtrOutput) UpgradeOptions() AutoUpgradeOptionsPtrOutput {
	return o.ApplyT(func(v *NodeManagement) *AutoUpgradeOptions {
		if v == nil {
			return nil
		}
		return v.UpgradeOptions
	}).(AutoUpgradeOptionsPtrOutput)
}

// NodeManagement defines the set of node management services turned on for the node pool.
type NodeManagementResponse struct {
	// A flag that specifies whether the node auto-repair is enabled for the node pool. If enabled, the nodes in this node pool will be monitored and, if they fail health checks too many times, an automatic repair action will be triggered.
	AutoRepair bool `pulumi:"autoRepair"`
	// A flag that specifies whether node auto-upgrade is enabled for the node pool. If enabled, node auto-upgrade helps keep the nodes in your node pool up to date with the latest release version of Kubernetes.
	AutoUpgrade bool `pulumi:"autoUpgrade"`
	// Specifies the Auto Upgrade knobs for the node pool.
	UpgradeOptions AutoUpgradeOptionsResponse `pulumi:"upgradeOptions"`
}

// NodeManagementResponseInput is an input type that accepts NodeManagementResponseArgs and NodeManagementResponseOutput values.
// You can construct a concrete instance of `NodeManagementResponseInput` via:
//
//          NodeManagementResponseArgs{...}
type NodeManagementResponseInput interface {
	pulumi.Input

	ToNodeManagementResponseOutput() NodeManagementResponseOutput
	ToNodeManagementResponseOutputWithContext(context.Context) NodeManagementResponseOutput
}

// NodeManagement defines the set of node management services turned on for the node pool.
type NodeManagementResponseArgs struct {
	// A flag that specifies whether the node auto-repair is enabled for the node pool. If enabled, the nodes in this node pool will be monitored and, if they fail health checks too many times, an automatic repair action will be triggered.
	AutoRepair pulumi.BoolInput `pulumi:"autoRepair"`
	// A flag that specifies whether node auto-upgrade is enabled for the node pool. If enabled, node auto-upgrade helps keep the nodes in your node pool up to date with the latest release version of Kubernetes.
	AutoUpgrade pulumi.BoolInput `pulumi:"autoUpgrade"`
	// Specifies the Auto Upgrade knobs for the node pool.
	UpgradeOptions AutoUpgradeOptionsResponseInput `pulumi:"upgradeOptions"`
}

func (NodeManagementResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeManagementResponse)(nil)).Elem()
}

func (i NodeManagementResponseArgs) ToNodeManagementResponseOutput() NodeManagementResponseOutput {
	return i.ToNodeManagementResponseOutputWithContext(context.Background())
}

func (i NodeManagementResponseArgs) ToNodeManagementResponseOutputWithContext(ctx context.Context) NodeManagementResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeManagementResponseOutput)
}

func (i NodeManagementResponseArgs) ToNodeManagementResponsePtrOutput() NodeManagementResponsePtrOutput {
	return i.ToNodeManagementResponsePtrOutputWithContext(context.Background())
}

func (i NodeManagementResponseArgs) ToNodeManagementResponsePtrOutputWithContext(ctx context.Context) NodeManagementResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeManagementResponseOutput).ToNodeManagementResponsePtrOutputWithContext(ctx)
}

// NodeManagementResponsePtrInput is an input type that accepts NodeManagementResponseArgs, NodeManagementResponsePtr and NodeManagementResponsePtrOutput values.
// You can construct a concrete instance of `NodeManagementResponsePtrInput` via:
//
//          NodeManagementResponseArgs{...}
//
//  or:
//
//          nil
type NodeManagementResponsePtrInput interface {
	pulumi.Input

	ToNodeManagementResponsePtrOutput() NodeManagementResponsePtrOutput
	ToNodeManagementResponsePtrOutputWithContext(context.Context) NodeManagementResponsePtrOutput
}

type nodeManagementResponsePtrType NodeManagementResponseArgs

func NodeManagementResponsePtr(v *NodeManagementResponseArgs) NodeManagementResponsePtrInput {
	return (*nodeManagementResponsePtrType)(v)
}

func (*nodeManagementResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeManagementResponse)(nil)).Elem()
}

func (i *nodeManagementResponsePtrType) ToNodeManagementResponsePtrOutput() NodeManagementResponsePtrOutput {
	return i.ToNodeManagementResponsePtrOutputWithContext(context.Background())
}

func (i *nodeManagementResponsePtrType) ToNodeManagementResponsePtrOutputWithContext(ctx context.Context) NodeManagementResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeManagementResponsePtrOutput)
}

// NodeManagement defines the set of node management services turned on for the node pool.
type NodeManagementResponseOutput struct{ *pulumi.OutputState }

func (NodeManagementResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeManagementResponse)(nil)).Elem()
}

func (o NodeManagementResponseOutput) ToNodeManagementResponseOutput() NodeManagementResponseOutput {
	return o
}

func (o NodeManagementResponseOutput) ToNodeManagementResponseOutputWithContext(ctx context.Context) NodeManagementResponseOutput {
	return o
}

func (o NodeManagementResponseOutput) ToNodeManagementResponsePtrOutput() NodeManagementResponsePtrOutput {
	return o.ToNodeManagementResponsePtrOutputWithContext(context.Background())
}

func (o NodeManagementResponseOutput) ToNodeManagementResponsePtrOutputWithContext(ctx context.Context) NodeManagementResponsePtrOutput {
	return o.ApplyT(func(v NodeManagementResponse) *NodeManagementResponse {
		return &v
	}).(NodeManagementResponsePtrOutput)
}

// A flag that specifies whether the node auto-repair is enabled for the node pool. If enabled, the nodes in this node pool will be monitored and, if they fail health checks too many times, an automatic repair action will be triggered.
func (o NodeManagementResponseOutput) AutoRepair() pulumi.BoolOutput {
	return o.ApplyT(func(v NodeManagementResponse) bool { return v.AutoRepair }).(pulumi.BoolOutput)
}

// A flag that specifies whether node auto-upgrade is enabled for the node pool. If enabled, node auto-upgrade helps keep the nodes in your node pool up to date with the latest release version of Kubernetes.
func (o NodeManagementResponseOutput) AutoUpgrade() pulumi.BoolOutput {
	return o.ApplyT(func(v NodeManagementResponse) bool { return v.AutoUpgrade }).(pulumi.BoolOutput)
}

// Specifies the Auto Upgrade knobs for the node pool.
func (o NodeManagementResponseOutput) UpgradeOptions() AutoUpgradeOptionsResponseOutput {
	return o.ApplyT(func(v NodeManagementResponse) AutoUpgradeOptionsResponse { return v.UpgradeOptions }).(AutoUpgradeOptionsResponseOutput)
}

type NodeManagementResponsePtrOutput struct{ *pulumi.OutputState }

func (NodeManagementResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeManagementResponse)(nil)).Elem()
}

func (o NodeManagementResponsePtrOutput) ToNodeManagementResponsePtrOutput() NodeManagementResponsePtrOutput {
	return o
}

func (o NodeManagementResponsePtrOutput) ToNodeManagementResponsePtrOutputWithContext(ctx context.Context) NodeManagementResponsePtrOutput {
	return o
}

func (o NodeManagementResponsePtrOutput) Elem() NodeManagementResponseOutput {
	return o.ApplyT(func(v *NodeManagementResponse) NodeManagementResponse { return *v }).(NodeManagementResponseOutput)
}

// A flag that specifies whether the node auto-repair is enabled for the node pool. If enabled, the nodes in this node pool will be monitored and, if they fail health checks too many times, an automatic repair action will be triggered.
func (o NodeManagementResponsePtrOutput) AutoRepair() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NodeManagementResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.AutoRepair
	}).(pulumi.BoolPtrOutput)
}

// A flag that specifies whether node auto-upgrade is enabled for the node pool. If enabled, node auto-upgrade helps keep the nodes in your node pool up to date with the latest release version of Kubernetes.
func (o NodeManagementResponsePtrOutput) AutoUpgrade() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NodeManagementResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.AutoUpgrade
	}).(pulumi.BoolPtrOutput)
}

// Specifies the Auto Upgrade knobs for the node pool.
func (o NodeManagementResponsePtrOutput) UpgradeOptions() AutoUpgradeOptionsResponsePtrOutput {
	return o.ApplyT(func(v *NodeManagementResponse) *AutoUpgradeOptionsResponse {
		if v == nil {
			return nil
		}
		return &v.UpgradeOptions
	}).(AutoUpgradeOptionsResponsePtrOutput)
}

// NodePool contains the name and configuration for a cluster's node pool. Node pools are a set of nodes (i.e. VM's), with a common configuration and specification, under the control of the cluster master. They may have a set of Kubernetes labels applied to them, which may be used to reference them during pod scheduling. They may also be resized up or down, to accommodate the workload.
type NodePoolType struct {
	// Autoscaler configuration for this NodePool. Autoscaler is enabled only if a valid configuration is present.
	Autoscaling *NodePoolAutoscaling `pulumi:"autoscaling"`
	// Which conditions caused the current node pool state.
	Conditions []StatusCondition `pulumi:"conditions"`
	// The node configuration of the pool.
	Config *NodeConfig `pulumi:"config"`
	// The initial node count for the pool. You must ensure that your Compute Engine [resource quota](https://cloud.google.com/compute/quotas) is sufficient for this number of instances. You must also have available firewall and routes quota.
	InitialNodeCount *int `pulumi:"initialNodeCount"`
	// [Output only] The resource URLs of the [managed instance groups](https://cloud.google.com/compute/docs/instance-groups/creating-groups-of-managed-instances) associated with this node pool.
	InstanceGroupUrls []string `pulumi:"instanceGroupUrls"`
	// The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the NodePool's nodes should be located. If this value is unspecified during node pool creation, the [Cluster.Locations](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters#Cluster.FIELDS.locations) value will be used, instead. Warning: changing node pool locations will result in nodes being added and/or removed.
	Locations []string `pulumi:"locations"`
	// NodeManagement configuration for this NodePool.
	Management *NodeManagement `pulumi:"management"`
	// The constraint on the maximum number of pods that can be run simultaneously on a node in the node pool.
	MaxPodsConstraint *MaxPodsConstraint `pulumi:"maxPodsConstraint"`
	// The name of the node pool.
	Name *string `pulumi:"name"`
	// [Output only] The pod CIDR block size per node in this node pool.
	PodIpv4CidrSize *int `pulumi:"podIpv4CidrSize"`
	// [Output only] Server-defined URL for the resource.
	SelfLink *string `pulumi:"selfLink"`
	// [Output only] The status of the nodes in this pool instance.
	Status *string `pulumi:"status"`
	// Upgrade settings control disruption and speed of the upgrade.
	UpgradeSettings *UpgradeSettings `pulumi:"upgradeSettings"`
	// The version of the Kubernetes of this node.
	Version *string `pulumi:"version"`
}

// NodePoolTypeInput is an input type that accepts NodePoolTypeArgs and NodePoolTypeOutput values.
// You can construct a concrete instance of `NodePoolTypeInput` via:
//
//          NodePoolTypeArgs{...}
type NodePoolTypeInput interface {
	pulumi.Input

	ToNodePoolTypeOutput() NodePoolTypeOutput
	ToNodePoolTypeOutputWithContext(context.Context) NodePoolTypeOutput
}

// NodePool contains the name and configuration for a cluster's node pool. Node pools are a set of nodes (i.e. VM's), with a common configuration and specification, under the control of the cluster master. They may have a set of Kubernetes labels applied to them, which may be used to reference them during pod scheduling. They may also be resized up or down, to accommodate the workload.
type NodePoolTypeArgs struct {
	// Autoscaler configuration for this NodePool. Autoscaler is enabled only if a valid configuration is present.
	Autoscaling NodePoolAutoscalingPtrInput `pulumi:"autoscaling"`
	// Which conditions caused the current node pool state.
	Conditions StatusConditionArrayInput `pulumi:"conditions"`
	// The node configuration of the pool.
	Config NodeConfigPtrInput `pulumi:"config"`
	// The initial node count for the pool. You must ensure that your Compute Engine [resource quota](https://cloud.google.com/compute/quotas) is sufficient for this number of instances. You must also have available firewall and routes quota.
	InitialNodeCount pulumi.IntPtrInput `pulumi:"initialNodeCount"`
	// [Output only] The resource URLs of the [managed instance groups](https://cloud.google.com/compute/docs/instance-groups/creating-groups-of-managed-instances) associated with this node pool.
	InstanceGroupUrls pulumi.StringArrayInput `pulumi:"instanceGroupUrls"`
	// The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the NodePool's nodes should be located. If this value is unspecified during node pool creation, the [Cluster.Locations](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters#Cluster.FIELDS.locations) value will be used, instead. Warning: changing node pool locations will result in nodes being added and/or removed.
	Locations pulumi.StringArrayInput `pulumi:"locations"`
	// NodeManagement configuration for this NodePool.
	Management NodeManagementPtrInput `pulumi:"management"`
	// The constraint on the maximum number of pods that can be run simultaneously on a node in the node pool.
	MaxPodsConstraint MaxPodsConstraintPtrInput `pulumi:"maxPodsConstraint"`
	// The name of the node pool.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [Output only] The pod CIDR block size per node in this node pool.
	PodIpv4CidrSize pulumi.IntPtrInput `pulumi:"podIpv4CidrSize"`
	// [Output only] Server-defined URL for the resource.
	SelfLink pulumi.StringPtrInput `pulumi:"selfLink"`
	// [Output only] The status of the nodes in this pool instance.
	Status *NodePoolStatus `pulumi:"status"`
	// Upgrade settings control disruption and speed of the upgrade.
	UpgradeSettings UpgradeSettingsPtrInput `pulumi:"upgradeSettings"`
	// The version of the Kubernetes of this node.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (NodePoolTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolType)(nil)).Elem()
}

func (i NodePoolTypeArgs) ToNodePoolTypeOutput() NodePoolTypeOutput {
	return i.ToNodePoolTypeOutputWithContext(context.Background())
}

func (i NodePoolTypeArgs) ToNodePoolTypeOutputWithContext(ctx context.Context) NodePoolTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolTypeOutput)
}

// NodePoolTypeArrayInput is an input type that accepts NodePoolTypeArray and NodePoolTypeArrayOutput values.
// You can construct a concrete instance of `NodePoolTypeArrayInput` via:
//
//          NodePoolTypeArray{ NodePoolTypeArgs{...} }
type NodePoolTypeArrayInput interface {
	pulumi.Input

	ToNodePoolTypeArrayOutput() NodePoolTypeArrayOutput
	ToNodePoolTypeArrayOutputWithContext(context.Context) NodePoolTypeArrayOutput
}

type NodePoolTypeArray []NodePoolTypeInput

func (NodePoolTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodePoolType)(nil)).Elem()
}

func (i NodePoolTypeArray) ToNodePoolTypeArrayOutput() NodePoolTypeArrayOutput {
	return i.ToNodePoolTypeArrayOutputWithContext(context.Background())
}

func (i NodePoolTypeArray) ToNodePoolTypeArrayOutputWithContext(ctx context.Context) NodePoolTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolTypeArrayOutput)
}

// NodePool contains the name and configuration for a cluster's node pool. Node pools are a set of nodes (i.e. VM's), with a common configuration and specification, under the control of the cluster master. They may have a set of Kubernetes labels applied to them, which may be used to reference them during pod scheduling. They may also be resized up or down, to accommodate the workload.
type NodePoolTypeOutput struct{ *pulumi.OutputState }

func (NodePoolTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolType)(nil)).Elem()
}

func (o NodePoolTypeOutput) ToNodePoolTypeOutput() NodePoolTypeOutput {
	return o
}

func (o NodePoolTypeOutput) ToNodePoolTypeOutputWithContext(ctx context.Context) NodePoolTypeOutput {
	return o
}

// Autoscaler configuration for this NodePool. Autoscaler is enabled only if a valid configuration is present.
func (o NodePoolTypeOutput) Autoscaling() NodePoolAutoscalingPtrOutput {
	return o.ApplyT(func(v NodePoolType) *NodePoolAutoscaling { return v.Autoscaling }).(NodePoolAutoscalingPtrOutput)
}

// Which conditions caused the current node pool state.
func (o NodePoolTypeOutput) Conditions() StatusConditionArrayOutput {
	return o.ApplyT(func(v NodePoolType) []StatusCondition { return v.Conditions }).(StatusConditionArrayOutput)
}

// The node configuration of the pool.
func (o NodePoolTypeOutput) Config() NodeConfigPtrOutput {
	return o.ApplyT(func(v NodePoolType) *NodeConfig { return v.Config }).(NodeConfigPtrOutput)
}

// The initial node count for the pool. You must ensure that your Compute Engine [resource quota](https://cloud.google.com/compute/quotas) is sufficient for this number of instances. You must also have available firewall and routes quota.
func (o NodePoolTypeOutput) InitialNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodePoolType) *int { return v.InitialNodeCount }).(pulumi.IntPtrOutput)
}

// [Output only] The resource URLs of the [managed instance groups](https://cloud.google.com/compute/docs/instance-groups/creating-groups-of-managed-instances) associated with this node pool.
func (o NodePoolTypeOutput) InstanceGroupUrls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NodePoolType) []string { return v.InstanceGroupUrls }).(pulumi.StringArrayOutput)
}

// The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the NodePool's nodes should be located. If this value is unspecified during node pool creation, the [Cluster.Locations](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters#Cluster.FIELDS.locations) value will be used, instead. Warning: changing node pool locations will result in nodes being added and/or removed.
func (o NodePoolTypeOutput) Locations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NodePoolType) []string { return v.Locations }).(pulumi.StringArrayOutput)
}

// NodeManagement configuration for this NodePool.
func (o NodePoolTypeOutput) Management() NodeManagementPtrOutput {
	return o.ApplyT(func(v NodePoolType) *NodeManagement { return v.Management }).(NodeManagementPtrOutput)
}

// The constraint on the maximum number of pods that can be run simultaneously on a node in the node pool.
func (o NodePoolTypeOutput) MaxPodsConstraint() MaxPodsConstraintPtrOutput {
	return o.ApplyT(func(v NodePoolType) *MaxPodsConstraint { return v.MaxPodsConstraint }).(MaxPodsConstraintPtrOutput)
}

// The name of the node pool.
func (o NodePoolTypeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodePoolType) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [Output only] The pod CIDR block size per node in this node pool.
func (o NodePoolTypeOutput) PodIpv4CidrSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodePoolType) *int { return v.PodIpv4CidrSize }).(pulumi.IntPtrOutput)
}

// [Output only] Server-defined URL for the resource.
func (o NodePoolTypeOutput) SelfLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodePoolType) *string { return v.SelfLink }).(pulumi.StringPtrOutput)
}

// [Output only] The status of the nodes in this pool instance.
func (o NodePoolTypeOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodePoolType) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Upgrade settings control disruption and speed of the upgrade.
func (o NodePoolTypeOutput) UpgradeSettings() UpgradeSettingsPtrOutput {
	return o.ApplyT(func(v NodePoolType) *UpgradeSettings { return v.UpgradeSettings }).(UpgradeSettingsPtrOutput)
}

// The version of the Kubernetes of this node.
func (o NodePoolTypeOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodePoolType) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type NodePoolTypeArrayOutput struct{ *pulumi.OutputState }

func (NodePoolTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodePoolType)(nil)).Elem()
}

func (o NodePoolTypeArrayOutput) ToNodePoolTypeArrayOutput() NodePoolTypeArrayOutput {
	return o
}

func (o NodePoolTypeArrayOutput) ToNodePoolTypeArrayOutputWithContext(ctx context.Context) NodePoolTypeArrayOutput {
	return o
}

func (o NodePoolTypeArrayOutput) Index(i pulumi.IntInput) NodePoolTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodePoolType {
		return vs[0].([]NodePoolType)[vs[1].(int)]
	}).(NodePoolTypeOutput)
}

// NodePoolAutoscaling contains information required by cluster autoscaler to adjust the size of the node pool to the current cluster usage.
type NodePoolAutoscaling struct {
	// Can this node pool be deleted automatically.
	Autoprovisioned *bool `pulumi:"autoprovisioned"`
	// Is autoscaling enabled for this node pool.
	Enabled *bool `pulumi:"enabled"`
	// Maximum number of nodes in the NodePool. Must be >= min_node_count. There has to enough quota to scale up the cluster.
	MaxNodeCount *int `pulumi:"maxNodeCount"`
	// Minimum number of nodes in the NodePool. Must be >= 1 and <= max_node_count.
	MinNodeCount *int `pulumi:"minNodeCount"`
}

// NodePoolAutoscalingInput is an input type that accepts NodePoolAutoscalingArgs and NodePoolAutoscalingOutput values.
// You can construct a concrete instance of `NodePoolAutoscalingInput` via:
//
//          NodePoolAutoscalingArgs{...}
type NodePoolAutoscalingInput interface {
	pulumi.Input

	ToNodePoolAutoscalingOutput() NodePoolAutoscalingOutput
	ToNodePoolAutoscalingOutputWithContext(context.Context) NodePoolAutoscalingOutput
}

// NodePoolAutoscaling contains information required by cluster autoscaler to adjust the size of the node pool to the current cluster usage.
type NodePoolAutoscalingArgs struct {
	// Can this node pool be deleted automatically.
	Autoprovisioned pulumi.BoolPtrInput `pulumi:"autoprovisioned"`
	// Is autoscaling enabled for this node pool.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Maximum number of nodes in the NodePool. Must be >= min_node_count. There has to enough quota to scale up the cluster.
	MaxNodeCount pulumi.IntPtrInput `pulumi:"maxNodeCount"`
	// Minimum number of nodes in the NodePool. Must be >= 1 and <= max_node_count.
	MinNodeCount pulumi.IntPtrInput `pulumi:"minNodeCount"`
}

func (NodePoolAutoscalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolAutoscaling)(nil)).Elem()
}

func (i NodePoolAutoscalingArgs) ToNodePoolAutoscalingOutput() NodePoolAutoscalingOutput {
	return i.ToNodePoolAutoscalingOutputWithContext(context.Background())
}

func (i NodePoolAutoscalingArgs) ToNodePoolAutoscalingOutputWithContext(ctx context.Context) NodePoolAutoscalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolAutoscalingOutput)
}

func (i NodePoolAutoscalingArgs) ToNodePoolAutoscalingPtrOutput() NodePoolAutoscalingPtrOutput {
	return i.ToNodePoolAutoscalingPtrOutputWithContext(context.Background())
}

func (i NodePoolAutoscalingArgs) ToNodePoolAutoscalingPtrOutputWithContext(ctx context.Context) NodePoolAutoscalingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolAutoscalingOutput).ToNodePoolAutoscalingPtrOutputWithContext(ctx)
}

// NodePoolAutoscalingPtrInput is an input type that accepts NodePoolAutoscalingArgs, NodePoolAutoscalingPtr and NodePoolAutoscalingPtrOutput values.
// You can construct a concrete instance of `NodePoolAutoscalingPtrInput` via:
//
//          NodePoolAutoscalingArgs{...}
//
//  or:
//
//          nil
type NodePoolAutoscalingPtrInput interface {
	pulumi.Input

	ToNodePoolAutoscalingPtrOutput() NodePoolAutoscalingPtrOutput
	ToNodePoolAutoscalingPtrOutputWithContext(context.Context) NodePoolAutoscalingPtrOutput
}

type nodePoolAutoscalingPtrType NodePoolAutoscalingArgs

func NodePoolAutoscalingPtr(v *NodePoolAutoscalingArgs) NodePoolAutoscalingPtrInput {
	return (*nodePoolAutoscalingPtrType)(v)
}

func (*nodePoolAutoscalingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodePoolAutoscaling)(nil)).Elem()
}

func (i *nodePoolAutoscalingPtrType) ToNodePoolAutoscalingPtrOutput() NodePoolAutoscalingPtrOutput {
	return i.ToNodePoolAutoscalingPtrOutputWithContext(context.Background())
}

func (i *nodePoolAutoscalingPtrType) ToNodePoolAutoscalingPtrOutputWithContext(ctx context.Context) NodePoolAutoscalingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolAutoscalingPtrOutput)
}

// NodePoolAutoscaling contains information required by cluster autoscaler to adjust the size of the node pool to the current cluster usage.
type NodePoolAutoscalingOutput struct{ *pulumi.OutputState }

func (NodePoolAutoscalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolAutoscaling)(nil)).Elem()
}

func (o NodePoolAutoscalingOutput) ToNodePoolAutoscalingOutput() NodePoolAutoscalingOutput {
	return o
}

func (o NodePoolAutoscalingOutput) ToNodePoolAutoscalingOutputWithContext(ctx context.Context) NodePoolAutoscalingOutput {
	return o
}

func (o NodePoolAutoscalingOutput) ToNodePoolAutoscalingPtrOutput() NodePoolAutoscalingPtrOutput {
	return o.ToNodePoolAutoscalingPtrOutputWithContext(context.Background())
}

func (o NodePoolAutoscalingOutput) ToNodePoolAutoscalingPtrOutputWithContext(ctx context.Context) NodePoolAutoscalingPtrOutput {
	return o.ApplyT(func(v NodePoolAutoscaling) *NodePoolAutoscaling {
		return &v
	}).(NodePoolAutoscalingPtrOutput)
}

// Can this node pool be deleted automatically.
func (o NodePoolAutoscalingOutput) Autoprovisioned() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NodePoolAutoscaling) *bool { return v.Autoprovisioned }).(pulumi.BoolPtrOutput)
}

// Is autoscaling enabled for this node pool.
func (o NodePoolAutoscalingOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NodePoolAutoscaling) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Maximum number of nodes in the NodePool. Must be >= min_node_count. There has to enough quota to scale up the cluster.
func (o NodePoolAutoscalingOutput) MaxNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodePoolAutoscaling) *int { return v.MaxNodeCount }).(pulumi.IntPtrOutput)
}

// Minimum number of nodes in the NodePool. Must be >= 1 and <= max_node_count.
func (o NodePoolAutoscalingOutput) MinNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodePoolAutoscaling) *int { return v.MinNodeCount }).(pulumi.IntPtrOutput)
}

type NodePoolAutoscalingPtrOutput struct{ *pulumi.OutputState }

func (NodePoolAutoscalingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodePoolAutoscaling)(nil)).Elem()
}

func (o NodePoolAutoscalingPtrOutput) ToNodePoolAutoscalingPtrOutput() NodePoolAutoscalingPtrOutput {
	return o
}

func (o NodePoolAutoscalingPtrOutput) ToNodePoolAutoscalingPtrOutputWithContext(ctx context.Context) NodePoolAutoscalingPtrOutput {
	return o
}

func (o NodePoolAutoscalingPtrOutput) Elem() NodePoolAutoscalingOutput {
	return o.ApplyT(func(v *NodePoolAutoscaling) NodePoolAutoscaling { return *v }).(NodePoolAutoscalingOutput)
}

// Can this node pool be deleted automatically.
func (o NodePoolAutoscalingPtrOutput) Autoprovisioned() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NodePoolAutoscaling) *bool {
		if v == nil {
			return nil
		}
		return v.Autoprovisioned
	}).(pulumi.BoolPtrOutput)
}

// Is autoscaling enabled for this node pool.
func (o NodePoolAutoscalingPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NodePoolAutoscaling) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Maximum number of nodes in the NodePool. Must be >= min_node_count. There has to enough quota to scale up the cluster.
func (o NodePoolAutoscalingPtrOutput) MaxNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodePoolAutoscaling) *int {
		if v == nil {
			return nil
		}
		return v.MaxNodeCount
	}).(pulumi.IntPtrOutput)
}

// Minimum number of nodes in the NodePool. Must be >= 1 and <= max_node_count.
func (o NodePoolAutoscalingPtrOutput) MinNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodePoolAutoscaling) *int {
		if v == nil {
			return nil
		}
		return v.MinNodeCount
	}).(pulumi.IntPtrOutput)
}

// NodePoolAutoscaling contains information required by cluster autoscaler to adjust the size of the node pool to the current cluster usage.
type NodePoolAutoscalingResponse struct {
	// Can this node pool be deleted automatically.
	Autoprovisioned bool `pulumi:"autoprovisioned"`
	// Is autoscaling enabled for this node pool.
	Enabled bool `pulumi:"enabled"`
	// Maximum number of nodes in the NodePool. Must be >= min_node_count. There has to enough quota to scale up the cluster.
	MaxNodeCount int `pulumi:"maxNodeCount"`
	// Minimum number of nodes in the NodePool. Must be >= 1 and <= max_node_count.
	MinNodeCount int `pulumi:"minNodeCount"`
}

// NodePoolAutoscalingResponseInput is an input type that accepts NodePoolAutoscalingResponseArgs and NodePoolAutoscalingResponseOutput values.
// You can construct a concrete instance of `NodePoolAutoscalingResponseInput` via:
//
//          NodePoolAutoscalingResponseArgs{...}
type NodePoolAutoscalingResponseInput interface {
	pulumi.Input

	ToNodePoolAutoscalingResponseOutput() NodePoolAutoscalingResponseOutput
	ToNodePoolAutoscalingResponseOutputWithContext(context.Context) NodePoolAutoscalingResponseOutput
}

// NodePoolAutoscaling contains information required by cluster autoscaler to adjust the size of the node pool to the current cluster usage.
type NodePoolAutoscalingResponseArgs struct {
	// Can this node pool be deleted automatically.
	Autoprovisioned pulumi.BoolInput `pulumi:"autoprovisioned"`
	// Is autoscaling enabled for this node pool.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Maximum number of nodes in the NodePool. Must be >= min_node_count. There has to enough quota to scale up the cluster.
	MaxNodeCount pulumi.IntInput `pulumi:"maxNodeCount"`
	// Minimum number of nodes in the NodePool. Must be >= 1 and <= max_node_count.
	MinNodeCount pulumi.IntInput `pulumi:"minNodeCount"`
}

func (NodePoolAutoscalingResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolAutoscalingResponse)(nil)).Elem()
}

func (i NodePoolAutoscalingResponseArgs) ToNodePoolAutoscalingResponseOutput() NodePoolAutoscalingResponseOutput {
	return i.ToNodePoolAutoscalingResponseOutputWithContext(context.Background())
}

func (i NodePoolAutoscalingResponseArgs) ToNodePoolAutoscalingResponseOutputWithContext(ctx context.Context) NodePoolAutoscalingResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolAutoscalingResponseOutput)
}

func (i NodePoolAutoscalingResponseArgs) ToNodePoolAutoscalingResponsePtrOutput() NodePoolAutoscalingResponsePtrOutput {
	return i.ToNodePoolAutoscalingResponsePtrOutputWithContext(context.Background())
}

func (i NodePoolAutoscalingResponseArgs) ToNodePoolAutoscalingResponsePtrOutputWithContext(ctx context.Context) NodePoolAutoscalingResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolAutoscalingResponseOutput).ToNodePoolAutoscalingResponsePtrOutputWithContext(ctx)
}

// NodePoolAutoscalingResponsePtrInput is an input type that accepts NodePoolAutoscalingResponseArgs, NodePoolAutoscalingResponsePtr and NodePoolAutoscalingResponsePtrOutput values.
// You can construct a concrete instance of `NodePoolAutoscalingResponsePtrInput` via:
//
//          NodePoolAutoscalingResponseArgs{...}
//
//  or:
//
//          nil
type NodePoolAutoscalingResponsePtrInput interface {
	pulumi.Input

	ToNodePoolAutoscalingResponsePtrOutput() NodePoolAutoscalingResponsePtrOutput
	ToNodePoolAutoscalingResponsePtrOutputWithContext(context.Context) NodePoolAutoscalingResponsePtrOutput
}

type nodePoolAutoscalingResponsePtrType NodePoolAutoscalingResponseArgs

func NodePoolAutoscalingResponsePtr(v *NodePoolAutoscalingResponseArgs) NodePoolAutoscalingResponsePtrInput {
	return (*nodePoolAutoscalingResponsePtrType)(v)
}

func (*nodePoolAutoscalingResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodePoolAutoscalingResponse)(nil)).Elem()
}

func (i *nodePoolAutoscalingResponsePtrType) ToNodePoolAutoscalingResponsePtrOutput() NodePoolAutoscalingResponsePtrOutput {
	return i.ToNodePoolAutoscalingResponsePtrOutputWithContext(context.Background())
}

func (i *nodePoolAutoscalingResponsePtrType) ToNodePoolAutoscalingResponsePtrOutputWithContext(ctx context.Context) NodePoolAutoscalingResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolAutoscalingResponsePtrOutput)
}

// NodePoolAutoscaling contains information required by cluster autoscaler to adjust the size of the node pool to the current cluster usage.
type NodePoolAutoscalingResponseOutput struct{ *pulumi.OutputState }

func (NodePoolAutoscalingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolAutoscalingResponse)(nil)).Elem()
}

func (o NodePoolAutoscalingResponseOutput) ToNodePoolAutoscalingResponseOutput() NodePoolAutoscalingResponseOutput {
	return o
}

func (o NodePoolAutoscalingResponseOutput) ToNodePoolAutoscalingResponseOutputWithContext(ctx context.Context) NodePoolAutoscalingResponseOutput {
	return o
}

func (o NodePoolAutoscalingResponseOutput) ToNodePoolAutoscalingResponsePtrOutput() NodePoolAutoscalingResponsePtrOutput {
	return o.ToNodePoolAutoscalingResponsePtrOutputWithContext(context.Background())
}

func (o NodePoolAutoscalingResponseOutput) ToNodePoolAutoscalingResponsePtrOutputWithContext(ctx context.Context) NodePoolAutoscalingResponsePtrOutput {
	return o.ApplyT(func(v NodePoolAutoscalingResponse) *NodePoolAutoscalingResponse {
		return &v
	}).(NodePoolAutoscalingResponsePtrOutput)
}

// Can this node pool be deleted automatically.
func (o NodePoolAutoscalingResponseOutput) Autoprovisioned() pulumi.BoolOutput {
	return o.ApplyT(func(v NodePoolAutoscalingResponse) bool { return v.Autoprovisioned }).(pulumi.BoolOutput)
}

// Is autoscaling enabled for this node pool.
func (o NodePoolAutoscalingResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v NodePoolAutoscalingResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Maximum number of nodes in the NodePool. Must be >= min_node_count. There has to enough quota to scale up the cluster.
func (o NodePoolAutoscalingResponseOutput) MaxNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v NodePoolAutoscalingResponse) int { return v.MaxNodeCount }).(pulumi.IntOutput)
}

// Minimum number of nodes in the NodePool. Must be >= 1 and <= max_node_count.
func (o NodePoolAutoscalingResponseOutput) MinNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v NodePoolAutoscalingResponse) int { return v.MinNodeCount }).(pulumi.IntOutput)
}

type NodePoolAutoscalingResponsePtrOutput struct{ *pulumi.OutputState }

func (NodePoolAutoscalingResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodePoolAutoscalingResponse)(nil)).Elem()
}

func (o NodePoolAutoscalingResponsePtrOutput) ToNodePoolAutoscalingResponsePtrOutput() NodePoolAutoscalingResponsePtrOutput {
	return o
}

func (o NodePoolAutoscalingResponsePtrOutput) ToNodePoolAutoscalingResponsePtrOutputWithContext(ctx context.Context) NodePoolAutoscalingResponsePtrOutput {
	return o
}

func (o NodePoolAutoscalingResponsePtrOutput) Elem() NodePoolAutoscalingResponseOutput {
	return o.ApplyT(func(v *NodePoolAutoscalingResponse) NodePoolAutoscalingResponse { return *v }).(NodePoolAutoscalingResponseOutput)
}

// Can this node pool be deleted automatically.
func (o NodePoolAutoscalingResponsePtrOutput) Autoprovisioned() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NodePoolAutoscalingResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.Autoprovisioned
	}).(pulumi.BoolPtrOutput)
}

// Is autoscaling enabled for this node pool.
func (o NodePoolAutoscalingResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NodePoolAutoscalingResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Maximum number of nodes in the NodePool. Must be >= min_node_count. There has to enough quota to scale up the cluster.
func (o NodePoolAutoscalingResponsePtrOutput) MaxNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodePoolAutoscalingResponse) *int {
		if v == nil {
			return nil
		}
		return &v.MaxNodeCount
	}).(pulumi.IntPtrOutput)
}

// Minimum number of nodes in the NodePool. Must be >= 1 and <= max_node_count.
func (o NodePoolAutoscalingResponsePtrOutput) MinNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodePoolAutoscalingResponse) *int {
		if v == nil {
			return nil
		}
		return &v.MinNodeCount
	}).(pulumi.IntPtrOutput)
}

// NodePool contains the name and configuration for a cluster's node pool. Node pools are a set of nodes (i.e. VM's), with a common configuration and specification, under the control of the cluster master. They may have a set of Kubernetes labels applied to them, which may be used to reference them during pod scheduling. They may also be resized up or down, to accommodate the workload.
type NodePoolResponse struct {
	// Autoscaler configuration for this NodePool. Autoscaler is enabled only if a valid configuration is present.
	Autoscaling NodePoolAutoscalingResponse `pulumi:"autoscaling"`
	// Which conditions caused the current node pool state.
	Conditions []StatusConditionResponse `pulumi:"conditions"`
	// The node configuration of the pool.
	Config NodeConfigResponse `pulumi:"config"`
	// The initial node count for the pool. You must ensure that your Compute Engine [resource quota](https://cloud.google.com/compute/quotas) is sufficient for this number of instances. You must also have available firewall and routes quota.
	InitialNodeCount int `pulumi:"initialNodeCount"`
	// [Output only] The resource URLs of the [managed instance groups](https://cloud.google.com/compute/docs/instance-groups/creating-groups-of-managed-instances) associated with this node pool.
	InstanceGroupUrls []string `pulumi:"instanceGroupUrls"`
	// The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the NodePool's nodes should be located. If this value is unspecified during node pool creation, the [Cluster.Locations](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters#Cluster.FIELDS.locations) value will be used, instead. Warning: changing node pool locations will result in nodes being added and/or removed.
	Locations []string `pulumi:"locations"`
	// NodeManagement configuration for this NodePool.
	Management NodeManagementResponse `pulumi:"management"`
	// The constraint on the maximum number of pods that can be run simultaneously on a node in the node pool.
	MaxPodsConstraint MaxPodsConstraintResponse `pulumi:"maxPodsConstraint"`
	// The name of the node pool.
	Name string `pulumi:"name"`
	// [Output only] The pod CIDR block size per node in this node pool.
	PodIpv4CidrSize int `pulumi:"podIpv4CidrSize"`
	// [Output only] Server-defined URL for the resource.
	SelfLink string `pulumi:"selfLink"`
	// [Output only] The status of the nodes in this pool instance.
	Status string `pulumi:"status"`
	// Upgrade settings control disruption and speed of the upgrade.
	UpgradeSettings UpgradeSettingsResponse `pulumi:"upgradeSettings"`
	// The version of the Kubernetes of this node.
	Version string `pulumi:"version"`
}

// NodePoolResponseInput is an input type that accepts NodePoolResponseArgs and NodePoolResponseOutput values.
// You can construct a concrete instance of `NodePoolResponseInput` via:
//
//          NodePoolResponseArgs{...}
type NodePoolResponseInput interface {
	pulumi.Input

	ToNodePoolResponseOutput() NodePoolResponseOutput
	ToNodePoolResponseOutputWithContext(context.Context) NodePoolResponseOutput
}

// NodePool contains the name and configuration for a cluster's node pool. Node pools are a set of nodes (i.e. VM's), with a common configuration and specification, under the control of the cluster master. They may have a set of Kubernetes labels applied to them, which may be used to reference them during pod scheduling. They may also be resized up or down, to accommodate the workload.
type NodePoolResponseArgs struct {
	// Autoscaler configuration for this NodePool. Autoscaler is enabled only if a valid configuration is present.
	Autoscaling NodePoolAutoscalingResponseInput `pulumi:"autoscaling"`
	// Which conditions caused the current node pool state.
	Conditions StatusConditionResponseArrayInput `pulumi:"conditions"`
	// The node configuration of the pool.
	Config NodeConfigResponseInput `pulumi:"config"`
	// The initial node count for the pool. You must ensure that your Compute Engine [resource quota](https://cloud.google.com/compute/quotas) is sufficient for this number of instances. You must also have available firewall and routes quota.
	InitialNodeCount pulumi.IntInput `pulumi:"initialNodeCount"`
	// [Output only] The resource URLs of the [managed instance groups](https://cloud.google.com/compute/docs/instance-groups/creating-groups-of-managed-instances) associated with this node pool.
	InstanceGroupUrls pulumi.StringArrayInput `pulumi:"instanceGroupUrls"`
	// The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the NodePool's nodes should be located. If this value is unspecified during node pool creation, the [Cluster.Locations](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters#Cluster.FIELDS.locations) value will be used, instead. Warning: changing node pool locations will result in nodes being added and/or removed.
	Locations pulumi.StringArrayInput `pulumi:"locations"`
	// NodeManagement configuration for this NodePool.
	Management NodeManagementResponseInput `pulumi:"management"`
	// The constraint on the maximum number of pods that can be run simultaneously on a node in the node pool.
	MaxPodsConstraint MaxPodsConstraintResponseInput `pulumi:"maxPodsConstraint"`
	// The name of the node pool.
	Name pulumi.StringInput `pulumi:"name"`
	// [Output only] The pod CIDR block size per node in this node pool.
	PodIpv4CidrSize pulumi.IntInput `pulumi:"podIpv4CidrSize"`
	// [Output only] Server-defined URL for the resource.
	SelfLink pulumi.StringInput `pulumi:"selfLink"`
	// [Output only] The status of the nodes in this pool instance.
	Status pulumi.StringInput `pulumi:"status"`
	// Upgrade settings control disruption and speed of the upgrade.
	UpgradeSettings UpgradeSettingsResponseInput `pulumi:"upgradeSettings"`
	// The version of the Kubernetes of this node.
	Version pulumi.StringInput `pulumi:"version"`
}

func (NodePoolResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolResponse)(nil)).Elem()
}

func (i NodePoolResponseArgs) ToNodePoolResponseOutput() NodePoolResponseOutput {
	return i.ToNodePoolResponseOutputWithContext(context.Background())
}

func (i NodePoolResponseArgs) ToNodePoolResponseOutputWithContext(ctx context.Context) NodePoolResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolResponseOutput)
}

// NodePoolResponseArrayInput is an input type that accepts NodePoolResponseArray and NodePoolResponseArrayOutput values.
// You can construct a concrete instance of `NodePoolResponseArrayInput` via:
//
//          NodePoolResponseArray{ NodePoolResponseArgs{...} }
type NodePoolResponseArrayInput interface {
	pulumi.Input

	ToNodePoolResponseArrayOutput() NodePoolResponseArrayOutput
	ToNodePoolResponseArrayOutputWithContext(context.Context) NodePoolResponseArrayOutput
}

type NodePoolResponseArray []NodePoolResponseInput

func (NodePoolResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodePoolResponse)(nil)).Elem()
}

func (i NodePoolResponseArray) ToNodePoolResponseArrayOutput() NodePoolResponseArrayOutput {
	return i.ToNodePoolResponseArrayOutputWithContext(context.Background())
}

func (i NodePoolResponseArray) ToNodePoolResponseArrayOutputWithContext(ctx context.Context) NodePoolResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolResponseArrayOutput)
}

// NodePool contains the name and configuration for a cluster's node pool. Node pools are a set of nodes (i.e. VM's), with a common configuration and specification, under the control of the cluster master. They may have a set of Kubernetes labels applied to them, which may be used to reference them during pod scheduling. They may also be resized up or down, to accommodate the workload.
type NodePoolResponseOutput struct{ *pulumi.OutputState }

func (NodePoolResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolResponse)(nil)).Elem()
}

func (o NodePoolResponseOutput) ToNodePoolResponseOutput() NodePoolResponseOutput {
	return o
}

func (o NodePoolResponseOutput) ToNodePoolResponseOutputWithContext(ctx context.Context) NodePoolResponseOutput {
	return o
}

// Autoscaler configuration for this NodePool. Autoscaler is enabled only if a valid configuration is present.
func (o NodePoolResponseOutput) Autoscaling() NodePoolAutoscalingResponseOutput {
	return o.ApplyT(func(v NodePoolResponse) NodePoolAutoscalingResponse { return v.Autoscaling }).(NodePoolAutoscalingResponseOutput)
}

// Which conditions caused the current node pool state.
func (o NodePoolResponseOutput) Conditions() StatusConditionResponseArrayOutput {
	return o.ApplyT(func(v NodePoolResponse) []StatusConditionResponse { return v.Conditions }).(StatusConditionResponseArrayOutput)
}

// The node configuration of the pool.
func (o NodePoolResponseOutput) Config() NodeConfigResponseOutput {
	return o.ApplyT(func(v NodePoolResponse) NodeConfigResponse { return v.Config }).(NodeConfigResponseOutput)
}

// The initial node count for the pool. You must ensure that your Compute Engine [resource quota](https://cloud.google.com/compute/quotas) is sufficient for this number of instances. You must also have available firewall and routes quota.
func (o NodePoolResponseOutput) InitialNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v NodePoolResponse) int { return v.InitialNodeCount }).(pulumi.IntOutput)
}

// [Output only] The resource URLs of the [managed instance groups](https://cloud.google.com/compute/docs/instance-groups/creating-groups-of-managed-instances) associated with this node pool.
func (o NodePoolResponseOutput) InstanceGroupUrls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NodePoolResponse) []string { return v.InstanceGroupUrls }).(pulumi.StringArrayOutput)
}

// The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the NodePool's nodes should be located. If this value is unspecified during node pool creation, the [Cluster.Locations](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters#Cluster.FIELDS.locations) value will be used, instead. Warning: changing node pool locations will result in nodes being added and/or removed.
func (o NodePoolResponseOutput) Locations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NodePoolResponse) []string { return v.Locations }).(pulumi.StringArrayOutput)
}

// NodeManagement configuration for this NodePool.
func (o NodePoolResponseOutput) Management() NodeManagementResponseOutput {
	return o.ApplyT(func(v NodePoolResponse) NodeManagementResponse { return v.Management }).(NodeManagementResponseOutput)
}

// The constraint on the maximum number of pods that can be run simultaneously on a node in the node pool.
func (o NodePoolResponseOutput) MaxPodsConstraint() MaxPodsConstraintResponseOutput {
	return o.ApplyT(func(v NodePoolResponse) MaxPodsConstraintResponse { return v.MaxPodsConstraint }).(MaxPodsConstraintResponseOutput)
}

// The name of the node pool.
func (o NodePoolResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v NodePoolResponse) string { return v.Name }).(pulumi.StringOutput)
}

// [Output only] The pod CIDR block size per node in this node pool.
func (o NodePoolResponseOutput) PodIpv4CidrSize() pulumi.IntOutput {
	return o.ApplyT(func(v NodePoolResponse) int { return v.PodIpv4CidrSize }).(pulumi.IntOutput)
}

// [Output only] Server-defined URL for the resource.
func (o NodePoolResponseOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v NodePoolResponse) string { return v.SelfLink }).(pulumi.StringOutput)
}

// [Output only] The status of the nodes in this pool instance.
func (o NodePoolResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v NodePoolResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Upgrade settings control disruption and speed of the upgrade.
func (o NodePoolResponseOutput) UpgradeSettings() UpgradeSettingsResponseOutput {
	return o.ApplyT(func(v NodePoolResponse) UpgradeSettingsResponse { return v.UpgradeSettings }).(UpgradeSettingsResponseOutput)
}

// The version of the Kubernetes of this node.
func (o NodePoolResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v NodePoolResponse) string { return v.Version }).(pulumi.StringOutput)
}

type NodePoolResponseArrayOutput struct{ *pulumi.OutputState }

func (NodePoolResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodePoolResponse)(nil)).Elem()
}

func (o NodePoolResponseArrayOutput) ToNodePoolResponseArrayOutput() NodePoolResponseArrayOutput {
	return o
}

func (o NodePoolResponseArrayOutput) ToNodePoolResponseArrayOutputWithContext(ctx context.Context) NodePoolResponseArrayOutput {
	return o
}

func (o NodePoolResponseArrayOutput) Index(i pulumi.IntInput) NodePoolResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodePoolResponse {
		return vs[0].([]NodePoolResponse)[vs[1].(int)]
	}).(NodePoolResponseOutput)
}

// Kubernetes taint is comprised of three fields: key, value, and effect. Effect can only be one of three types: NoSchedule, PreferNoSchedule or NoExecute. See [here](https://kubernetes.io/docs/concepts/configuration/taint-and-toleration) for more information, including usage and the valid values.
type NodeTaint struct {
	// Effect for taint.
	Effect *string `pulumi:"effect"`
	// Key for taint.
	Key *string `pulumi:"key"`
	// Value for taint.
	Value *string `pulumi:"value"`
}

// NodeTaintInput is an input type that accepts NodeTaintArgs and NodeTaintOutput values.
// You can construct a concrete instance of `NodeTaintInput` via:
//
//          NodeTaintArgs{...}
type NodeTaintInput interface {
	pulumi.Input

	ToNodeTaintOutput() NodeTaintOutput
	ToNodeTaintOutputWithContext(context.Context) NodeTaintOutput
}

// Kubernetes taint is comprised of three fields: key, value, and effect. Effect can only be one of three types: NoSchedule, PreferNoSchedule or NoExecute. See [here](https://kubernetes.io/docs/concepts/configuration/taint-and-toleration) for more information, including usage and the valid values.
type NodeTaintArgs struct {
	// Effect for taint.
	Effect *NodeTaintEffect `pulumi:"effect"`
	// Key for taint.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Value for taint.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (NodeTaintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeTaint)(nil)).Elem()
}

func (i NodeTaintArgs) ToNodeTaintOutput() NodeTaintOutput {
	return i.ToNodeTaintOutputWithContext(context.Background())
}

func (i NodeTaintArgs) ToNodeTaintOutputWithContext(ctx context.Context) NodeTaintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeTaintOutput)
}

// NodeTaintArrayInput is an input type that accepts NodeTaintArray and NodeTaintArrayOutput values.
// You can construct a concrete instance of `NodeTaintArrayInput` via:
//
//          NodeTaintArray{ NodeTaintArgs{...} }
type NodeTaintArrayInput interface {
	pulumi.Input

	ToNodeTaintArrayOutput() NodeTaintArrayOutput
	ToNodeTaintArrayOutputWithContext(context.Context) NodeTaintArrayOutput
}

type NodeTaintArray []NodeTaintInput

func (NodeTaintArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeTaint)(nil)).Elem()
}

func (i NodeTaintArray) ToNodeTaintArrayOutput() NodeTaintArrayOutput {
	return i.ToNodeTaintArrayOutputWithContext(context.Background())
}

func (i NodeTaintArray) ToNodeTaintArrayOutputWithContext(ctx context.Context) NodeTaintArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeTaintArrayOutput)
}

// Kubernetes taint is comprised of three fields: key, value, and effect. Effect can only be one of three types: NoSchedule, PreferNoSchedule or NoExecute. See [here](https://kubernetes.io/docs/concepts/configuration/taint-and-toleration) for more information, including usage and the valid values.
type NodeTaintOutput struct{ *pulumi.OutputState }

func (NodeTaintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeTaint)(nil)).Elem()
}

func (o NodeTaintOutput) ToNodeTaintOutput() NodeTaintOutput {
	return o
}

func (o NodeTaintOutput) ToNodeTaintOutputWithContext(ctx context.Context) NodeTaintOutput {
	return o
}

// Effect for taint.
func (o NodeTaintOutput) Effect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeTaint) *string { return v.Effect }).(pulumi.StringPtrOutput)
}

// Key for taint.
func (o NodeTaintOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeTaint) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Value for taint.
func (o NodeTaintOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeTaint) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type NodeTaintArrayOutput struct{ *pulumi.OutputState }

func (NodeTaintArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeTaint)(nil)).Elem()
}

func (o NodeTaintArrayOutput) ToNodeTaintArrayOutput() NodeTaintArrayOutput {
	return o
}

func (o NodeTaintArrayOutput) ToNodeTaintArrayOutputWithContext(ctx context.Context) NodeTaintArrayOutput {
	return o
}

func (o NodeTaintArrayOutput) Index(i pulumi.IntInput) NodeTaintOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeTaint {
		return vs[0].([]NodeTaint)[vs[1].(int)]
	}).(NodeTaintOutput)
}

// Kubernetes taint is comprised of three fields: key, value, and effect. Effect can only be one of three types: NoSchedule, PreferNoSchedule or NoExecute. See [here](https://kubernetes.io/docs/concepts/configuration/taint-and-toleration) for more information, including usage and the valid values.
type NodeTaintResponse struct {
	// Effect for taint.
	Effect string `pulumi:"effect"`
	// Key for taint.
	Key string `pulumi:"key"`
	// Value for taint.
	Value string `pulumi:"value"`
}

// NodeTaintResponseInput is an input type that accepts NodeTaintResponseArgs and NodeTaintResponseOutput values.
// You can construct a concrete instance of `NodeTaintResponseInput` via:
//
//          NodeTaintResponseArgs{...}
type NodeTaintResponseInput interface {
	pulumi.Input

	ToNodeTaintResponseOutput() NodeTaintResponseOutput
	ToNodeTaintResponseOutputWithContext(context.Context) NodeTaintResponseOutput
}

// Kubernetes taint is comprised of three fields: key, value, and effect. Effect can only be one of three types: NoSchedule, PreferNoSchedule or NoExecute. See [here](https://kubernetes.io/docs/concepts/configuration/taint-and-toleration) for more information, including usage and the valid values.
type NodeTaintResponseArgs struct {
	// Effect for taint.
	Effect pulumi.StringInput `pulumi:"effect"`
	// Key for taint.
	Key pulumi.StringInput `pulumi:"key"`
	// Value for taint.
	Value pulumi.StringInput `pulumi:"value"`
}

func (NodeTaintResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeTaintResponse)(nil)).Elem()
}

func (i NodeTaintResponseArgs) ToNodeTaintResponseOutput() NodeTaintResponseOutput {
	return i.ToNodeTaintResponseOutputWithContext(context.Background())
}

func (i NodeTaintResponseArgs) ToNodeTaintResponseOutputWithContext(ctx context.Context) NodeTaintResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeTaintResponseOutput)
}

// NodeTaintResponseArrayInput is an input type that accepts NodeTaintResponseArray and NodeTaintResponseArrayOutput values.
// You can construct a concrete instance of `NodeTaintResponseArrayInput` via:
//
//          NodeTaintResponseArray{ NodeTaintResponseArgs{...} }
type NodeTaintResponseArrayInput interface {
	pulumi.Input

	ToNodeTaintResponseArrayOutput() NodeTaintResponseArrayOutput
	ToNodeTaintResponseArrayOutputWithContext(context.Context) NodeTaintResponseArrayOutput
}

type NodeTaintResponseArray []NodeTaintResponseInput

func (NodeTaintResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeTaintResponse)(nil)).Elem()
}

func (i NodeTaintResponseArray) ToNodeTaintResponseArrayOutput() NodeTaintResponseArrayOutput {
	return i.ToNodeTaintResponseArrayOutputWithContext(context.Background())
}

func (i NodeTaintResponseArray) ToNodeTaintResponseArrayOutputWithContext(ctx context.Context) NodeTaintResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeTaintResponseArrayOutput)
}

// Kubernetes taint is comprised of three fields: key, value, and effect. Effect can only be one of three types: NoSchedule, PreferNoSchedule or NoExecute. See [here](https://kubernetes.io/docs/concepts/configuration/taint-and-toleration) for more information, including usage and the valid values.
type NodeTaintResponseOutput struct{ *pulumi.OutputState }

func (NodeTaintResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeTaintResponse)(nil)).Elem()
}

func (o NodeTaintResponseOutput) ToNodeTaintResponseOutput() NodeTaintResponseOutput {
	return o
}

func (o NodeTaintResponseOutput) ToNodeTaintResponseOutputWithContext(ctx context.Context) NodeTaintResponseOutput {
	return o
}

// Effect for taint.
func (o NodeTaintResponseOutput) Effect() pulumi.StringOutput {
	return o.ApplyT(func(v NodeTaintResponse) string { return v.Effect }).(pulumi.StringOutput)
}

// Key for taint.
func (o NodeTaintResponseOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v NodeTaintResponse) string { return v.Key }).(pulumi.StringOutput)
}

// Value for taint.
func (o NodeTaintResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v NodeTaintResponse) string { return v.Value }).(pulumi.StringOutput)
}

type NodeTaintResponseArrayOutput struct{ *pulumi.OutputState }

func (NodeTaintResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeTaintResponse)(nil)).Elem()
}

func (o NodeTaintResponseArrayOutput) ToNodeTaintResponseArrayOutput() NodeTaintResponseArrayOutput {
	return o
}

func (o NodeTaintResponseArrayOutput) ToNodeTaintResponseArrayOutputWithContext(ctx context.Context) NodeTaintResponseArrayOutput {
	return o
}

func (o NodeTaintResponseArrayOutput) Index(i pulumi.IntInput) NodeTaintResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeTaintResponse {
		return vs[0].([]NodeTaintResponse)[vs[1].(int)]
	}).(NodeTaintResponseOutput)
}

// NotificationConfig is the configuration of notifications.
type NotificationConfig struct {
	// Notification config for Pub/Sub.
	Pubsub *PubSub `pulumi:"pubsub"`
}

// NotificationConfigInput is an input type that accepts NotificationConfigArgs and NotificationConfigOutput values.
// You can construct a concrete instance of `NotificationConfigInput` via:
//
//          NotificationConfigArgs{...}
type NotificationConfigInput interface {
	pulumi.Input

	ToNotificationConfigOutput() NotificationConfigOutput
	ToNotificationConfigOutputWithContext(context.Context) NotificationConfigOutput
}

// NotificationConfig is the configuration of notifications.
type NotificationConfigArgs struct {
	// Notification config for Pub/Sub.
	Pubsub PubSubPtrInput `pulumi:"pubsub"`
}

func (NotificationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationConfig)(nil)).Elem()
}

func (i NotificationConfigArgs) ToNotificationConfigOutput() NotificationConfigOutput {
	return i.ToNotificationConfigOutputWithContext(context.Background())
}

func (i NotificationConfigArgs) ToNotificationConfigOutputWithContext(ctx context.Context) NotificationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationConfigOutput)
}

func (i NotificationConfigArgs) ToNotificationConfigPtrOutput() NotificationConfigPtrOutput {
	return i.ToNotificationConfigPtrOutputWithContext(context.Background())
}

func (i NotificationConfigArgs) ToNotificationConfigPtrOutputWithContext(ctx context.Context) NotificationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationConfigOutput).ToNotificationConfigPtrOutputWithContext(ctx)
}

// NotificationConfigPtrInput is an input type that accepts NotificationConfigArgs, NotificationConfigPtr and NotificationConfigPtrOutput values.
// You can construct a concrete instance of `NotificationConfigPtrInput` via:
//
//          NotificationConfigArgs{...}
//
//  or:
//
//          nil
type NotificationConfigPtrInput interface {
	pulumi.Input

	ToNotificationConfigPtrOutput() NotificationConfigPtrOutput
	ToNotificationConfigPtrOutputWithContext(context.Context) NotificationConfigPtrOutput
}

type notificationConfigPtrType NotificationConfigArgs

func NotificationConfigPtr(v *NotificationConfigArgs) NotificationConfigPtrInput {
	return (*notificationConfigPtrType)(v)
}

func (*notificationConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationConfig)(nil)).Elem()
}

func (i *notificationConfigPtrType) ToNotificationConfigPtrOutput() NotificationConfigPtrOutput {
	return i.ToNotificationConfigPtrOutputWithContext(context.Background())
}

func (i *notificationConfigPtrType) ToNotificationConfigPtrOutputWithContext(ctx context.Context) NotificationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationConfigPtrOutput)
}

// NotificationConfig is the configuration of notifications.
type NotificationConfigOutput struct{ *pulumi.OutputState }

func (NotificationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationConfig)(nil)).Elem()
}

func (o NotificationConfigOutput) ToNotificationConfigOutput() NotificationConfigOutput {
	return o
}

func (o NotificationConfigOutput) ToNotificationConfigOutputWithContext(ctx context.Context) NotificationConfigOutput {
	return o
}

func (o NotificationConfigOutput) ToNotificationConfigPtrOutput() NotificationConfigPtrOutput {
	return o.ToNotificationConfigPtrOutputWithContext(context.Background())
}

func (o NotificationConfigOutput) ToNotificationConfigPtrOutputWithContext(ctx context.Context) NotificationConfigPtrOutput {
	return o.ApplyT(func(v NotificationConfig) *NotificationConfig {
		return &v
	}).(NotificationConfigPtrOutput)
}

// Notification config for Pub/Sub.
func (o NotificationConfigOutput) Pubsub() PubSubPtrOutput {
	return o.ApplyT(func(v NotificationConfig) *PubSub { return v.Pubsub }).(PubSubPtrOutput)
}

type NotificationConfigPtrOutput struct{ *pulumi.OutputState }

func (NotificationConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationConfig)(nil)).Elem()
}

func (o NotificationConfigPtrOutput) ToNotificationConfigPtrOutput() NotificationConfigPtrOutput {
	return o
}

func (o NotificationConfigPtrOutput) ToNotificationConfigPtrOutputWithContext(ctx context.Context) NotificationConfigPtrOutput {
	return o
}

func (o NotificationConfigPtrOutput) Elem() NotificationConfigOutput {
	return o.ApplyT(func(v *NotificationConfig) NotificationConfig { return *v }).(NotificationConfigOutput)
}

// Notification config for Pub/Sub.
func (o NotificationConfigPtrOutput) Pubsub() PubSubPtrOutput {
	return o.ApplyT(func(v *NotificationConfig) *PubSub {
		if v == nil {
			return nil
		}
		return v.Pubsub
	}).(PubSubPtrOutput)
}

// NotificationConfig is the configuration of notifications.
type NotificationConfigResponse struct {
	// Notification config for Pub/Sub.
	Pubsub PubSubResponse `pulumi:"pubsub"`
}

// NotificationConfigResponseInput is an input type that accepts NotificationConfigResponseArgs and NotificationConfigResponseOutput values.
// You can construct a concrete instance of `NotificationConfigResponseInput` via:
//
//          NotificationConfigResponseArgs{...}
type NotificationConfigResponseInput interface {
	pulumi.Input

	ToNotificationConfigResponseOutput() NotificationConfigResponseOutput
	ToNotificationConfigResponseOutputWithContext(context.Context) NotificationConfigResponseOutput
}

// NotificationConfig is the configuration of notifications.
type NotificationConfigResponseArgs struct {
	// Notification config for Pub/Sub.
	Pubsub PubSubResponseInput `pulumi:"pubsub"`
}

func (NotificationConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationConfigResponse)(nil)).Elem()
}

func (i NotificationConfigResponseArgs) ToNotificationConfigResponseOutput() NotificationConfigResponseOutput {
	return i.ToNotificationConfigResponseOutputWithContext(context.Background())
}

func (i NotificationConfigResponseArgs) ToNotificationConfigResponseOutputWithContext(ctx context.Context) NotificationConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationConfigResponseOutput)
}

func (i NotificationConfigResponseArgs) ToNotificationConfigResponsePtrOutput() NotificationConfigResponsePtrOutput {
	return i.ToNotificationConfigResponsePtrOutputWithContext(context.Background())
}

func (i NotificationConfigResponseArgs) ToNotificationConfigResponsePtrOutputWithContext(ctx context.Context) NotificationConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationConfigResponseOutput).ToNotificationConfigResponsePtrOutputWithContext(ctx)
}

// NotificationConfigResponsePtrInput is an input type that accepts NotificationConfigResponseArgs, NotificationConfigResponsePtr and NotificationConfigResponsePtrOutput values.
// You can construct a concrete instance of `NotificationConfigResponsePtrInput` via:
//
//          NotificationConfigResponseArgs{...}
//
//  or:
//
//          nil
type NotificationConfigResponsePtrInput interface {
	pulumi.Input

	ToNotificationConfigResponsePtrOutput() NotificationConfigResponsePtrOutput
	ToNotificationConfigResponsePtrOutputWithContext(context.Context) NotificationConfigResponsePtrOutput
}

type notificationConfigResponsePtrType NotificationConfigResponseArgs

func NotificationConfigResponsePtr(v *NotificationConfigResponseArgs) NotificationConfigResponsePtrInput {
	return (*notificationConfigResponsePtrType)(v)
}

func (*notificationConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationConfigResponse)(nil)).Elem()
}

func (i *notificationConfigResponsePtrType) ToNotificationConfigResponsePtrOutput() NotificationConfigResponsePtrOutput {
	return i.ToNotificationConfigResponsePtrOutputWithContext(context.Background())
}

func (i *notificationConfigResponsePtrType) ToNotificationConfigResponsePtrOutputWithContext(ctx context.Context) NotificationConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationConfigResponsePtrOutput)
}

// NotificationConfig is the configuration of notifications.
type NotificationConfigResponseOutput struct{ *pulumi.OutputState }

func (NotificationConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationConfigResponse)(nil)).Elem()
}

func (o NotificationConfigResponseOutput) ToNotificationConfigResponseOutput() NotificationConfigResponseOutput {
	return o
}

func (o NotificationConfigResponseOutput) ToNotificationConfigResponseOutputWithContext(ctx context.Context) NotificationConfigResponseOutput {
	return o
}

func (o NotificationConfigResponseOutput) ToNotificationConfigResponsePtrOutput() NotificationConfigResponsePtrOutput {
	return o.ToNotificationConfigResponsePtrOutputWithContext(context.Background())
}

func (o NotificationConfigResponseOutput) ToNotificationConfigResponsePtrOutputWithContext(ctx context.Context) NotificationConfigResponsePtrOutput {
	return o.ApplyT(func(v NotificationConfigResponse) *NotificationConfigResponse {
		return &v
	}).(NotificationConfigResponsePtrOutput)
}

// Notification config for Pub/Sub.
func (o NotificationConfigResponseOutput) Pubsub() PubSubResponseOutput {
	return o.ApplyT(func(v NotificationConfigResponse) PubSubResponse { return v.Pubsub }).(PubSubResponseOutput)
}

type NotificationConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (NotificationConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationConfigResponse)(nil)).Elem()
}

func (o NotificationConfigResponsePtrOutput) ToNotificationConfigResponsePtrOutput() NotificationConfigResponsePtrOutput {
	return o
}

func (o NotificationConfigResponsePtrOutput) ToNotificationConfigResponsePtrOutputWithContext(ctx context.Context) NotificationConfigResponsePtrOutput {
	return o
}

func (o NotificationConfigResponsePtrOutput) Elem() NotificationConfigResponseOutput {
	return o.ApplyT(func(v *NotificationConfigResponse) NotificationConfigResponse { return *v }).(NotificationConfigResponseOutput)
}

// Notification config for Pub/Sub.
func (o NotificationConfigResponsePtrOutput) Pubsub() PubSubResponsePtrOutput {
	return o.ApplyT(func(v *NotificationConfigResponse) *PubSubResponse {
		if v == nil {
			return nil
		}
		return &v.Pubsub
	}).(PubSubResponsePtrOutput)
}

// Configuration options for private clusters.
type PrivateClusterConfig struct {
	// Whether the master's internal IP address is used as the cluster endpoint.
	EnablePrivateEndpoint *bool `pulumi:"enablePrivateEndpoint"`
	// Whether nodes have internal IP addresses only. If enabled, all nodes are given only RFC 1918 private addresses and communicate with the master via private networking.
	EnablePrivateNodes *bool `pulumi:"enablePrivateNodes"`
	// Controls master global access settings.
	MasterGlobalAccessConfig *PrivateClusterMasterGlobalAccessConfig `pulumi:"masterGlobalAccessConfig"`
	// The IP range in CIDR notation to use for the hosted master network. This range will be used for assigning internal IP addresses to the master or set of masters, as well as the ILB VIP. This range must not overlap with any other ranges in use within the cluster's network.
	MasterIpv4CidrBlock *string `pulumi:"masterIpv4CidrBlock"`
	// The peering name in the customer VPC used by this cluster.
	PeeringName *string `pulumi:"peeringName"`
	// The internal IP address of this cluster's master endpoint.
	PrivateEndpoint *string `pulumi:"privateEndpoint"`
	// The external IP address of this cluster's master endpoint.
	PublicEndpoint *string `pulumi:"publicEndpoint"`
}

// PrivateClusterConfigInput is an input type that accepts PrivateClusterConfigArgs and PrivateClusterConfigOutput values.
// You can construct a concrete instance of `PrivateClusterConfigInput` via:
//
//          PrivateClusterConfigArgs{...}
type PrivateClusterConfigInput interface {
	pulumi.Input

	ToPrivateClusterConfigOutput() PrivateClusterConfigOutput
	ToPrivateClusterConfigOutputWithContext(context.Context) PrivateClusterConfigOutput
}

// Configuration options for private clusters.
type PrivateClusterConfigArgs struct {
	// Whether the master's internal IP address is used as the cluster endpoint.
	EnablePrivateEndpoint pulumi.BoolPtrInput `pulumi:"enablePrivateEndpoint"`
	// Whether nodes have internal IP addresses only. If enabled, all nodes are given only RFC 1918 private addresses and communicate with the master via private networking.
	EnablePrivateNodes pulumi.BoolPtrInput `pulumi:"enablePrivateNodes"`
	// Controls master global access settings.
	MasterGlobalAccessConfig PrivateClusterMasterGlobalAccessConfigPtrInput `pulumi:"masterGlobalAccessConfig"`
	// The IP range in CIDR notation to use for the hosted master network. This range will be used for assigning internal IP addresses to the master or set of masters, as well as the ILB VIP. This range must not overlap with any other ranges in use within the cluster's network.
	MasterIpv4CidrBlock pulumi.StringPtrInput `pulumi:"masterIpv4CidrBlock"`
	// The peering name in the customer VPC used by this cluster.
	PeeringName pulumi.StringPtrInput `pulumi:"peeringName"`
	// The internal IP address of this cluster's master endpoint.
	PrivateEndpoint pulumi.StringPtrInput `pulumi:"privateEndpoint"`
	// The external IP address of this cluster's master endpoint.
	PublicEndpoint pulumi.StringPtrInput `pulumi:"publicEndpoint"`
}

func (PrivateClusterConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateClusterConfig)(nil)).Elem()
}

func (i PrivateClusterConfigArgs) ToPrivateClusterConfigOutput() PrivateClusterConfigOutput {
	return i.ToPrivateClusterConfigOutputWithContext(context.Background())
}

func (i PrivateClusterConfigArgs) ToPrivateClusterConfigOutputWithContext(ctx context.Context) PrivateClusterConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateClusterConfigOutput)
}

func (i PrivateClusterConfigArgs) ToPrivateClusterConfigPtrOutput() PrivateClusterConfigPtrOutput {
	return i.ToPrivateClusterConfigPtrOutputWithContext(context.Background())
}

func (i PrivateClusterConfigArgs) ToPrivateClusterConfigPtrOutputWithContext(ctx context.Context) PrivateClusterConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateClusterConfigOutput).ToPrivateClusterConfigPtrOutputWithContext(ctx)
}

// PrivateClusterConfigPtrInput is an input type that accepts PrivateClusterConfigArgs, PrivateClusterConfigPtr and PrivateClusterConfigPtrOutput values.
// You can construct a concrete instance of `PrivateClusterConfigPtrInput` via:
//
//          PrivateClusterConfigArgs{...}
//
//  or:
//
//          nil
type PrivateClusterConfigPtrInput interface {
	pulumi.Input

	ToPrivateClusterConfigPtrOutput() PrivateClusterConfigPtrOutput
	ToPrivateClusterConfigPtrOutputWithContext(context.Context) PrivateClusterConfigPtrOutput
}

type privateClusterConfigPtrType PrivateClusterConfigArgs

func PrivateClusterConfigPtr(v *PrivateClusterConfigArgs) PrivateClusterConfigPtrInput {
	return (*privateClusterConfigPtrType)(v)
}

func (*privateClusterConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateClusterConfig)(nil)).Elem()
}

func (i *privateClusterConfigPtrType) ToPrivateClusterConfigPtrOutput() PrivateClusterConfigPtrOutput {
	return i.ToPrivateClusterConfigPtrOutputWithContext(context.Background())
}

func (i *privateClusterConfigPtrType) ToPrivateClusterConfigPtrOutputWithContext(ctx context.Context) PrivateClusterConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateClusterConfigPtrOutput)
}

// Configuration options for private clusters.
type PrivateClusterConfigOutput struct{ *pulumi.OutputState }

func (PrivateClusterConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateClusterConfig)(nil)).Elem()
}

func (o PrivateClusterConfigOutput) ToPrivateClusterConfigOutput() PrivateClusterConfigOutput {
	return o
}

func (o PrivateClusterConfigOutput) ToPrivateClusterConfigOutputWithContext(ctx context.Context) PrivateClusterConfigOutput {
	return o
}

func (o PrivateClusterConfigOutput) ToPrivateClusterConfigPtrOutput() PrivateClusterConfigPtrOutput {
	return o.ToPrivateClusterConfigPtrOutputWithContext(context.Background())
}

func (o PrivateClusterConfigOutput) ToPrivateClusterConfigPtrOutputWithContext(ctx context.Context) PrivateClusterConfigPtrOutput {
	return o.ApplyT(func(v PrivateClusterConfig) *PrivateClusterConfig {
		return &v
	}).(PrivateClusterConfigPtrOutput)
}

// Whether the master's internal IP address is used as the cluster endpoint.
func (o PrivateClusterConfigOutput) EnablePrivateEndpoint() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PrivateClusterConfig) *bool { return v.EnablePrivateEndpoint }).(pulumi.BoolPtrOutput)
}

// Whether nodes have internal IP addresses only. If enabled, all nodes are given only RFC 1918 private addresses and communicate with the master via private networking.
func (o PrivateClusterConfigOutput) EnablePrivateNodes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PrivateClusterConfig) *bool { return v.EnablePrivateNodes }).(pulumi.BoolPtrOutput)
}

// Controls master global access settings.
func (o PrivateClusterConfigOutput) MasterGlobalAccessConfig() PrivateClusterMasterGlobalAccessConfigPtrOutput {
	return o.ApplyT(func(v PrivateClusterConfig) *PrivateClusterMasterGlobalAccessConfig {
		return v.MasterGlobalAccessConfig
	}).(PrivateClusterMasterGlobalAccessConfigPtrOutput)
}

// The IP range in CIDR notation to use for the hosted master network. This range will be used for assigning internal IP addresses to the master or set of masters, as well as the ILB VIP. This range must not overlap with any other ranges in use within the cluster's network.
func (o PrivateClusterConfigOutput) MasterIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateClusterConfig) *string { return v.MasterIpv4CidrBlock }).(pulumi.StringPtrOutput)
}

// The peering name in the customer VPC used by this cluster.
func (o PrivateClusterConfigOutput) PeeringName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateClusterConfig) *string { return v.PeeringName }).(pulumi.StringPtrOutput)
}

// The internal IP address of this cluster's master endpoint.
func (o PrivateClusterConfigOutput) PrivateEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateClusterConfig) *string { return v.PrivateEndpoint }).(pulumi.StringPtrOutput)
}

// The external IP address of this cluster's master endpoint.
func (o PrivateClusterConfigOutput) PublicEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateClusterConfig) *string { return v.PublicEndpoint }).(pulumi.StringPtrOutput)
}

type PrivateClusterConfigPtrOutput struct{ *pulumi.OutputState }

func (PrivateClusterConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateClusterConfig)(nil)).Elem()
}

func (o PrivateClusterConfigPtrOutput) ToPrivateClusterConfigPtrOutput() PrivateClusterConfigPtrOutput {
	return o
}

func (o PrivateClusterConfigPtrOutput) ToPrivateClusterConfigPtrOutputWithContext(ctx context.Context) PrivateClusterConfigPtrOutput {
	return o
}

func (o PrivateClusterConfigPtrOutput) Elem() PrivateClusterConfigOutput {
	return o.ApplyT(func(v *PrivateClusterConfig) PrivateClusterConfig { return *v }).(PrivateClusterConfigOutput)
}

// Whether the master's internal IP address is used as the cluster endpoint.
func (o PrivateClusterConfigPtrOutput) EnablePrivateEndpoint() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PrivateClusterConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnablePrivateEndpoint
	}).(pulumi.BoolPtrOutput)
}

// Whether nodes have internal IP addresses only. If enabled, all nodes are given only RFC 1918 private addresses and communicate with the master via private networking.
func (o PrivateClusterConfigPtrOutput) EnablePrivateNodes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PrivateClusterConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnablePrivateNodes
	}).(pulumi.BoolPtrOutput)
}

// Controls master global access settings.
func (o PrivateClusterConfigPtrOutput) MasterGlobalAccessConfig() PrivateClusterMasterGlobalAccessConfigPtrOutput {
	return o.ApplyT(func(v *PrivateClusterConfig) *PrivateClusterMasterGlobalAccessConfig {
		if v == nil {
			return nil
		}
		return v.MasterGlobalAccessConfig
	}).(PrivateClusterMasterGlobalAccessConfigPtrOutput)
}

// The IP range in CIDR notation to use for the hosted master network. This range will be used for assigning internal IP addresses to the master or set of masters, as well as the ILB VIP. This range must not overlap with any other ranges in use within the cluster's network.
func (o PrivateClusterConfigPtrOutput) MasterIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateClusterConfig) *string {
		if v == nil {
			return nil
		}
		return v.MasterIpv4CidrBlock
	}).(pulumi.StringPtrOutput)
}

// The peering name in the customer VPC used by this cluster.
func (o PrivateClusterConfigPtrOutput) PeeringName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateClusterConfig) *string {
		if v == nil {
			return nil
		}
		return v.PeeringName
	}).(pulumi.StringPtrOutput)
}

// The internal IP address of this cluster's master endpoint.
func (o PrivateClusterConfigPtrOutput) PrivateEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateClusterConfig) *string {
		if v == nil {
			return nil
		}
		return v.PrivateEndpoint
	}).(pulumi.StringPtrOutput)
}

// The external IP address of this cluster's master endpoint.
func (o PrivateClusterConfigPtrOutput) PublicEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateClusterConfig) *string {
		if v == nil {
			return nil
		}
		return v.PublicEndpoint
	}).(pulumi.StringPtrOutput)
}

// Configuration options for private clusters.
type PrivateClusterConfigResponse struct {
	// Whether the master's internal IP address is used as the cluster endpoint.
	EnablePrivateEndpoint bool `pulumi:"enablePrivateEndpoint"`
	// Whether nodes have internal IP addresses only. If enabled, all nodes are given only RFC 1918 private addresses and communicate with the master via private networking.
	EnablePrivateNodes bool `pulumi:"enablePrivateNodes"`
	// Controls master global access settings.
	MasterGlobalAccessConfig PrivateClusterMasterGlobalAccessConfigResponse `pulumi:"masterGlobalAccessConfig"`
	// The IP range in CIDR notation to use for the hosted master network. This range will be used for assigning internal IP addresses to the master or set of masters, as well as the ILB VIP. This range must not overlap with any other ranges in use within the cluster's network.
	MasterIpv4CidrBlock string `pulumi:"masterIpv4CidrBlock"`
	// The peering name in the customer VPC used by this cluster.
	PeeringName string `pulumi:"peeringName"`
	// The internal IP address of this cluster's master endpoint.
	PrivateEndpoint string `pulumi:"privateEndpoint"`
	// The external IP address of this cluster's master endpoint.
	PublicEndpoint string `pulumi:"publicEndpoint"`
}

// PrivateClusterConfigResponseInput is an input type that accepts PrivateClusterConfigResponseArgs and PrivateClusterConfigResponseOutput values.
// You can construct a concrete instance of `PrivateClusterConfigResponseInput` via:
//
//          PrivateClusterConfigResponseArgs{...}
type PrivateClusterConfigResponseInput interface {
	pulumi.Input

	ToPrivateClusterConfigResponseOutput() PrivateClusterConfigResponseOutput
	ToPrivateClusterConfigResponseOutputWithContext(context.Context) PrivateClusterConfigResponseOutput
}

// Configuration options for private clusters.
type PrivateClusterConfigResponseArgs struct {
	// Whether the master's internal IP address is used as the cluster endpoint.
	EnablePrivateEndpoint pulumi.BoolInput `pulumi:"enablePrivateEndpoint"`
	// Whether nodes have internal IP addresses only. If enabled, all nodes are given only RFC 1918 private addresses and communicate with the master via private networking.
	EnablePrivateNodes pulumi.BoolInput `pulumi:"enablePrivateNodes"`
	// Controls master global access settings.
	MasterGlobalAccessConfig PrivateClusterMasterGlobalAccessConfigResponseInput `pulumi:"masterGlobalAccessConfig"`
	// The IP range in CIDR notation to use for the hosted master network. This range will be used for assigning internal IP addresses to the master or set of masters, as well as the ILB VIP. This range must not overlap with any other ranges in use within the cluster's network.
	MasterIpv4CidrBlock pulumi.StringInput `pulumi:"masterIpv4CidrBlock"`
	// The peering name in the customer VPC used by this cluster.
	PeeringName pulumi.StringInput `pulumi:"peeringName"`
	// The internal IP address of this cluster's master endpoint.
	PrivateEndpoint pulumi.StringInput `pulumi:"privateEndpoint"`
	// The external IP address of this cluster's master endpoint.
	PublicEndpoint pulumi.StringInput `pulumi:"publicEndpoint"`
}

func (PrivateClusterConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateClusterConfigResponse)(nil)).Elem()
}

func (i PrivateClusterConfigResponseArgs) ToPrivateClusterConfigResponseOutput() PrivateClusterConfigResponseOutput {
	return i.ToPrivateClusterConfigResponseOutputWithContext(context.Background())
}

func (i PrivateClusterConfigResponseArgs) ToPrivateClusterConfigResponseOutputWithContext(ctx context.Context) PrivateClusterConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateClusterConfigResponseOutput)
}

func (i PrivateClusterConfigResponseArgs) ToPrivateClusterConfigResponsePtrOutput() PrivateClusterConfigResponsePtrOutput {
	return i.ToPrivateClusterConfigResponsePtrOutputWithContext(context.Background())
}

func (i PrivateClusterConfigResponseArgs) ToPrivateClusterConfigResponsePtrOutputWithContext(ctx context.Context) PrivateClusterConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateClusterConfigResponseOutput).ToPrivateClusterConfigResponsePtrOutputWithContext(ctx)
}

// PrivateClusterConfigResponsePtrInput is an input type that accepts PrivateClusterConfigResponseArgs, PrivateClusterConfigResponsePtr and PrivateClusterConfigResponsePtrOutput values.
// You can construct a concrete instance of `PrivateClusterConfigResponsePtrInput` via:
//
//          PrivateClusterConfigResponseArgs{...}
//
//  or:
//
//          nil
type PrivateClusterConfigResponsePtrInput interface {
	pulumi.Input

	ToPrivateClusterConfigResponsePtrOutput() PrivateClusterConfigResponsePtrOutput
	ToPrivateClusterConfigResponsePtrOutputWithContext(context.Context) PrivateClusterConfigResponsePtrOutput
}

type privateClusterConfigResponsePtrType PrivateClusterConfigResponseArgs

func PrivateClusterConfigResponsePtr(v *PrivateClusterConfigResponseArgs) PrivateClusterConfigResponsePtrInput {
	return (*privateClusterConfigResponsePtrType)(v)
}

func (*privateClusterConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateClusterConfigResponse)(nil)).Elem()
}

func (i *privateClusterConfigResponsePtrType) ToPrivateClusterConfigResponsePtrOutput() PrivateClusterConfigResponsePtrOutput {
	return i.ToPrivateClusterConfigResponsePtrOutputWithContext(context.Background())
}

func (i *privateClusterConfigResponsePtrType) ToPrivateClusterConfigResponsePtrOutputWithContext(ctx context.Context) PrivateClusterConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateClusterConfigResponsePtrOutput)
}

// Configuration options for private clusters.
type PrivateClusterConfigResponseOutput struct{ *pulumi.OutputState }

func (PrivateClusterConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateClusterConfigResponse)(nil)).Elem()
}

func (o PrivateClusterConfigResponseOutput) ToPrivateClusterConfigResponseOutput() PrivateClusterConfigResponseOutput {
	return o
}

func (o PrivateClusterConfigResponseOutput) ToPrivateClusterConfigResponseOutputWithContext(ctx context.Context) PrivateClusterConfigResponseOutput {
	return o
}

func (o PrivateClusterConfigResponseOutput) ToPrivateClusterConfigResponsePtrOutput() PrivateClusterConfigResponsePtrOutput {
	return o.ToPrivateClusterConfigResponsePtrOutputWithContext(context.Background())
}

func (o PrivateClusterConfigResponseOutput) ToPrivateClusterConfigResponsePtrOutputWithContext(ctx context.Context) PrivateClusterConfigResponsePtrOutput {
	return o.ApplyT(func(v PrivateClusterConfigResponse) *PrivateClusterConfigResponse {
		return &v
	}).(PrivateClusterConfigResponsePtrOutput)
}

// Whether the master's internal IP address is used as the cluster endpoint.
func (o PrivateClusterConfigResponseOutput) EnablePrivateEndpoint() pulumi.BoolOutput {
	return o.ApplyT(func(v PrivateClusterConfigResponse) bool { return v.EnablePrivateEndpoint }).(pulumi.BoolOutput)
}

// Whether nodes have internal IP addresses only. If enabled, all nodes are given only RFC 1918 private addresses and communicate with the master via private networking.
func (o PrivateClusterConfigResponseOutput) EnablePrivateNodes() pulumi.BoolOutput {
	return o.ApplyT(func(v PrivateClusterConfigResponse) bool { return v.EnablePrivateNodes }).(pulumi.BoolOutput)
}

// Controls master global access settings.
func (o PrivateClusterConfigResponseOutput) MasterGlobalAccessConfig() PrivateClusterMasterGlobalAccessConfigResponseOutput {
	return o.ApplyT(func(v PrivateClusterConfigResponse) PrivateClusterMasterGlobalAccessConfigResponse {
		return v.MasterGlobalAccessConfig
	}).(PrivateClusterMasterGlobalAccessConfigResponseOutput)
}

// The IP range in CIDR notation to use for the hosted master network. This range will be used for assigning internal IP addresses to the master or set of masters, as well as the ILB VIP. This range must not overlap with any other ranges in use within the cluster's network.
func (o PrivateClusterConfigResponseOutput) MasterIpv4CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateClusterConfigResponse) string { return v.MasterIpv4CidrBlock }).(pulumi.StringOutput)
}

// The peering name in the customer VPC used by this cluster.
func (o PrivateClusterConfigResponseOutput) PeeringName() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateClusterConfigResponse) string { return v.PeeringName }).(pulumi.StringOutput)
}

// The internal IP address of this cluster's master endpoint.
func (o PrivateClusterConfigResponseOutput) PrivateEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateClusterConfigResponse) string { return v.PrivateEndpoint }).(pulumi.StringOutput)
}

// The external IP address of this cluster's master endpoint.
func (o PrivateClusterConfigResponseOutput) PublicEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateClusterConfigResponse) string { return v.PublicEndpoint }).(pulumi.StringOutput)
}

type PrivateClusterConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (PrivateClusterConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateClusterConfigResponse)(nil)).Elem()
}

func (o PrivateClusterConfigResponsePtrOutput) ToPrivateClusterConfigResponsePtrOutput() PrivateClusterConfigResponsePtrOutput {
	return o
}

func (o PrivateClusterConfigResponsePtrOutput) ToPrivateClusterConfigResponsePtrOutputWithContext(ctx context.Context) PrivateClusterConfigResponsePtrOutput {
	return o
}

func (o PrivateClusterConfigResponsePtrOutput) Elem() PrivateClusterConfigResponseOutput {
	return o.ApplyT(func(v *PrivateClusterConfigResponse) PrivateClusterConfigResponse { return *v }).(PrivateClusterConfigResponseOutput)
}

// Whether the master's internal IP address is used as the cluster endpoint.
func (o PrivateClusterConfigResponsePtrOutput) EnablePrivateEndpoint() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PrivateClusterConfigResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.EnablePrivateEndpoint
	}).(pulumi.BoolPtrOutput)
}

// Whether nodes have internal IP addresses only. If enabled, all nodes are given only RFC 1918 private addresses and communicate with the master via private networking.
func (o PrivateClusterConfigResponsePtrOutput) EnablePrivateNodes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PrivateClusterConfigResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.EnablePrivateNodes
	}).(pulumi.BoolPtrOutput)
}

// Controls master global access settings.
func (o PrivateClusterConfigResponsePtrOutput) MasterGlobalAccessConfig() PrivateClusterMasterGlobalAccessConfigResponsePtrOutput {
	return o.ApplyT(func(v *PrivateClusterConfigResponse) *PrivateClusterMasterGlobalAccessConfigResponse {
		if v == nil {
			return nil
		}
		return &v.MasterGlobalAccessConfig
	}).(PrivateClusterMasterGlobalAccessConfigResponsePtrOutput)
}

// The IP range in CIDR notation to use for the hosted master network. This range will be used for assigning internal IP addresses to the master or set of masters, as well as the ILB VIP. This range must not overlap with any other ranges in use within the cluster's network.
func (o PrivateClusterConfigResponsePtrOutput) MasterIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateClusterConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.MasterIpv4CidrBlock
	}).(pulumi.StringPtrOutput)
}

// The peering name in the customer VPC used by this cluster.
func (o PrivateClusterConfigResponsePtrOutput) PeeringName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateClusterConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PeeringName
	}).(pulumi.StringPtrOutput)
}

// The internal IP address of this cluster's master endpoint.
func (o PrivateClusterConfigResponsePtrOutput) PrivateEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateClusterConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrivateEndpoint
	}).(pulumi.StringPtrOutput)
}

// The external IP address of this cluster's master endpoint.
func (o PrivateClusterConfigResponsePtrOutput) PublicEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateClusterConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PublicEndpoint
	}).(pulumi.StringPtrOutput)
}

// Configuration for controlling master global access settings.
type PrivateClusterMasterGlobalAccessConfig struct {
	// Whenever master is accessible globally or not.
	Enabled *bool `pulumi:"enabled"`
}

// PrivateClusterMasterGlobalAccessConfigInput is an input type that accepts PrivateClusterMasterGlobalAccessConfigArgs and PrivateClusterMasterGlobalAccessConfigOutput values.
// You can construct a concrete instance of `PrivateClusterMasterGlobalAccessConfigInput` via:
//
//          PrivateClusterMasterGlobalAccessConfigArgs{...}
type PrivateClusterMasterGlobalAccessConfigInput interface {
	pulumi.Input

	ToPrivateClusterMasterGlobalAccessConfigOutput() PrivateClusterMasterGlobalAccessConfigOutput
	ToPrivateClusterMasterGlobalAccessConfigOutputWithContext(context.Context) PrivateClusterMasterGlobalAccessConfigOutput
}

// Configuration for controlling master global access settings.
type PrivateClusterMasterGlobalAccessConfigArgs struct {
	// Whenever master is accessible globally or not.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (PrivateClusterMasterGlobalAccessConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateClusterMasterGlobalAccessConfig)(nil)).Elem()
}

func (i PrivateClusterMasterGlobalAccessConfigArgs) ToPrivateClusterMasterGlobalAccessConfigOutput() PrivateClusterMasterGlobalAccessConfigOutput {
	return i.ToPrivateClusterMasterGlobalAccessConfigOutputWithContext(context.Background())
}

func (i PrivateClusterMasterGlobalAccessConfigArgs) ToPrivateClusterMasterGlobalAccessConfigOutputWithContext(ctx context.Context) PrivateClusterMasterGlobalAccessConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateClusterMasterGlobalAccessConfigOutput)
}

func (i PrivateClusterMasterGlobalAccessConfigArgs) ToPrivateClusterMasterGlobalAccessConfigPtrOutput() PrivateClusterMasterGlobalAccessConfigPtrOutput {
	return i.ToPrivateClusterMasterGlobalAccessConfigPtrOutputWithContext(context.Background())
}

func (i PrivateClusterMasterGlobalAccessConfigArgs) ToPrivateClusterMasterGlobalAccessConfigPtrOutputWithContext(ctx context.Context) PrivateClusterMasterGlobalAccessConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateClusterMasterGlobalAccessConfigOutput).ToPrivateClusterMasterGlobalAccessConfigPtrOutputWithContext(ctx)
}

// PrivateClusterMasterGlobalAccessConfigPtrInput is an input type that accepts PrivateClusterMasterGlobalAccessConfigArgs, PrivateClusterMasterGlobalAccessConfigPtr and PrivateClusterMasterGlobalAccessConfigPtrOutput values.
// You can construct a concrete instance of `PrivateClusterMasterGlobalAccessConfigPtrInput` via:
//
//          PrivateClusterMasterGlobalAccessConfigArgs{...}
//
//  or:
//
//          nil
type PrivateClusterMasterGlobalAccessConfigPtrInput interface {
	pulumi.Input

	ToPrivateClusterMasterGlobalAccessConfigPtrOutput() PrivateClusterMasterGlobalAccessConfigPtrOutput
	ToPrivateClusterMasterGlobalAccessConfigPtrOutputWithContext(context.Context) PrivateClusterMasterGlobalAccessConfigPtrOutput
}

type privateClusterMasterGlobalAccessConfigPtrType PrivateClusterMasterGlobalAccessConfigArgs

func PrivateClusterMasterGlobalAccessConfigPtr(v *PrivateClusterMasterGlobalAccessConfigArgs) PrivateClusterMasterGlobalAccessConfigPtrInput {
	return (*privateClusterMasterGlobalAccessConfigPtrType)(v)
}

func (*privateClusterMasterGlobalAccessConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateClusterMasterGlobalAccessConfig)(nil)).Elem()
}

func (i *privateClusterMasterGlobalAccessConfigPtrType) ToPrivateClusterMasterGlobalAccessConfigPtrOutput() PrivateClusterMasterGlobalAccessConfigPtrOutput {
	return i.ToPrivateClusterMasterGlobalAccessConfigPtrOutputWithContext(context.Background())
}

func (i *privateClusterMasterGlobalAccessConfigPtrType) ToPrivateClusterMasterGlobalAccessConfigPtrOutputWithContext(ctx context.Context) PrivateClusterMasterGlobalAccessConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateClusterMasterGlobalAccessConfigPtrOutput)
}

// Configuration for controlling master global access settings.
type PrivateClusterMasterGlobalAccessConfigOutput struct{ *pulumi.OutputState }

func (PrivateClusterMasterGlobalAccessConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateClusterMasterGlobalAccessConfig)(nil)).Elem()
}

func (o PrivateClusterMasterGlobalAccessConfigOutput) ToPrivateClusterMasterGlobalAccessConfigOutput() PrivateClusterMasterGlobalAccessConfigOutput {
	return o
}

func (o PrivateClusterMasterGlobalAccessConfigOutput) ToPrivateClusterMasterGlobalAccessConfigOutputWithContext(ctx context.Context) PrivateClusterMasterGlobalAccessConfigOutput {
	return o
}

func (o PrivateClusterMasterGlobalAccessConfigOutput) ToPrivateClusterMasterGlobalAccessConfigPtrOutput() PrivateClusterMasterGlobalAccessConfigPtrOutput {
	return o.ToPrivateClusterMasterGlobalAccessConfigPtrOutputWithContext(context.Background())
}

func (o PrivateClusterMasterGlobalAccessConfigOutput) ToPrivateClusterMasterGlobalAccessConfigPtrOutputWithContext(ctx context.Context) PrivateClusterMasterGlobalAccessConfigPtrOutput {
	return o.ApplyT(func(v PrivateClusterMasterGlobalAccessConfig) *PrivateClusterMasterGlobalAccessConfig {
		return &v
	}).(PrivateClusterMasterGlobalAccessConfigPtrOutput)
}

// Whenever master is accessible globally or not.
func (o PrivateClusterMasterGlobalAccessConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PrivateClusterMasterGlobalAccessConfig) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type PrivateClusterMasterGlobalAccessConfigPtrOutput struct{ *pulumi.OutputState }

func (PrivateClusterMasterGlobalAccessConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateClusterMasterGlobalAccessConfig)(nil)).Elem()
}

func (o PrivateClusterMasterGlobalAccessConfigPtrOutput) ToPrivateClusterMasterGlobalAccessConfigPtrOutput() PrivateClusterMasterGlobalAccessConfigPtrOutput {
	return o
}

func (o PrivateClusterMasterGlobalAccessConfigPtrOutput) ToPrivateClusterMasterGlobalAccessConfigPtrOutputWithContext(ctx context.Context) PrivateClusterMasterGlobalAccessConfigPtrOutput {
	return o
}

func (o PrivateClusterMasterGlobalAccessConfigPtrOutput) Elem() PrivateClusterMasterGlobalAccessConfigOutput {
	return o.ApplyT(func(v *PrivateClusterMasterGlobalAccessConfig) PrivateClusterMasterGlobalAccessConfig { return *v }).(PrivateClusterMasterGlobalAccessConfigOutput)
}

// Whenever master is accessible globally or not.
func (o PrivateClusterMasterGlobalAccessConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PrivateClusterMasterGlobalAccessConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Configuration for controlling master global access settings.
type PrivateClusterMasterGlobalAccessConfigResponse struct {
	// Whenever master is accessible globally or not.
	Enabled bool `pulumi:"enabled"`
}

// PrivateClusterMasterGlobalAccessConfigResponseInput is an input type that accepts PrivateClusterMasterGlobalAccessConfigResponseArgs and PrivateClusterMasterGlobalAccessConfigResponseOutput values.
// You can construct a concrete instance of `PrivateClusterMasterGlobalAccessConfigResponseInput` via:
//
//          PrivateClusterMasterGlobalAccessConfigResponseArgs{...}
type PrivateClusterMasterGlobalAccessConfigResponseInput interface {
	pulumi.Input

	ToPrivateClusterMasterGlobalAccessConfigResponseOutput() PrivateClusterMasterGlobalAccessConfigResponseOutput
	ToPrivateClusterMasterGlobalAccessConfigResponseOutputWithContext(context.Context) PrivateClusterMasterGlobalAccessConfigResponseOutput
}

// Configuration for controlling master global access settings.
type PrivateClusterMasterGlobalAccessConfigResponseArgs struct {
	// Whenever master is accessible globally or not.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

func (PrivateClusterMasterGlobalAccessConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateClusterMasterGlobalAccessConfigResponse)(nil)).Elem()
}

func (i PrivateClusterMasterGlobalAccessConfigResponseArgs) ToPrivateClusterMasterGlobalAccessConfigResponseOutput() PrivateClusterMasterGlobalAccessConfigResponseOutput {
	return i.ToPrivateClusterMasterGlobalAccessConfigResponseOutputWithContext(context.Background())
}

func (i PrivateClusterMasterGlobalAccessConfigResponseArgs) ToPrivateClusterMasterGlobalAccessConfigResponseOutputWithContext(ctx context.Context) PrivateClusterMasterGlobalAccessConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateClusterMasterGlobalAccessConfigResponseOutput)
}

func (i PrivateClusterMasterGlobalAccessConfigResponseArgs) ToPrivateClusterMasterGlobalAccessConfigResponsePtrOutput() PrivateClusterMasterGlobalAccessConfigResponsePtrOutput {
	return i.ToPrivateClusterMasterGlobalAccessConfigResponsePtrOutputWithContext(context.Background())
}

func (i PrivateClusterMasterGlobalAccessConfigResponseArgs) ToPrivateClusterMasterGlobalAccessConfigResponsePtrOutputWithContext(ctx context.Context) PrivateClusterMasterGlobalAccessConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateClusterMasterGlobalAccessConfigResponseOutput).ToPrivateClusterMasterGlobalAccessConfigResponsePtrOutputWithContext(ctx)
}

// PrivateClusterMasterGlobalAccessConfigResponsePtrInput is an input type that accepts PrivateClusterMasterGlobalAccessConfigResponseArgs, PrivateClusterMasterGlobalAccessConfigResponsePtr and PrivateClusterMasterGlobalAccessConfigResponsePtrOutput values.
// You can construct a concrete instance of `PrivateClusterMasterGlobalAccessConfigResponsePtrInput` via:
//
//          PrivateClusterMasterGlobalAccessConfigResponseArgs{...}
//
//  or:
//
//          nil
type PrivateClusterMasterGlobalAccessConfigResponsePtrInput interface {
	pulumi.Input

	ToPrivateClusterMasterGlobalAccessConfigResponsePtrOutput() PrivateClusterMasterGlobalAccessConfigResponsePtrOutput
	ToPrivateClusterMasterGlobalAccessConfigResponsePtrOutputWithContext(context.Context) PrivateClusterMasterGlobalAccessConfigResponsePtrOutput
}

type privateClusterMasterGlobalAccessConfigResponsePtrType PrivateClusterMasterGlobalAccessConfigResponseArgs

func PrivateClusterMasterGlobalAccessConfigResponsePtr(v *PrivateClusterMasterGlobalAccessConfigResponseArgs) PrivateClusterMasterGlobalAccessConfigResponsePtrInput {
	return (*privateClusterMasterGlobalAccessConfigResponsePtrType)(v)
}

func (*privateClusterMasterGlobalAccessConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateClusterMasterGlobalAccessConfigResponse)(nil)).Elem()
}

func (i *privateClusterMasterGlobalAccessConfigResponsePtrType) ToPrivateClusterMasterGlobalAccessConfigResponsePtrOutput() PrivateClusterMasterGlobalAccessConfigResponsePtrOutput {
	return i.ToPrivateClusterMasterGlobalAccessConfigResponsePtrOutputWithContext(context.Background())
}

func (i *privateClusterMasterGlobalAccessConfigResponsePtrType) ToPrivateClusterMasterGlobalAccessConfigResponsePtrOutputWithContext(ctx context.Context) PrivateClusterMasterGlobalAccessConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateClusterMasterGlobalAccessConfigResponsePtrOutput)
}

// Configuration for controlling master global access settings.
type PrivateClusterMasterGlobalAccessConfigResponseOutput struct{ *pulumi.OutputState }

func (PrivateClusterMasterGlobalAccessConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateClusterMasterGlobalAccessConfigResponse)(nil)).Elem()
}

func (o PrivateClusterMasterGlobalAccessConfigResponseOutput) ToPrivateClusterMasterGlobalAccessConfigResponseOutput() PrivateClusterMasterGlobalAccessConfigResponseOutput {
	return o
}

func (o PrivateClusterMasterGlobalAccessConfigResponseOutput) ToPrivateClusterMasterGlobalAccessConfigResponseOutputWithContext(ctx context.Context) PrivateClusterMasterGlobalAccessConfigResponseOutput {
	return o
}

func (o PrivateClusterMasterGlobalAccessConfigResponseOutput) ToPrivateClusterMasterGlobalAccessConfigResponsePtrOutput() PrivateClusterMasterGlobalAccessConfigResponsePtrOutput {
	return o.ToPrivateClusterMasterGlobalAccessConfigResponsePtrOutputWithContext(context.Background())
}

func (o PrivateClusterMasterGlobalAccessConfigResponseOutput) ToPrivateClusterMasterGlobalAccessConfigResponsePtrOutputWithContext(ctx context.Context) PrivateClusterMasterGlobalAccessConfigResponsePtrOutput {
	return o.ApplyT(func(v PrivateClusterMasterGlobalAccessConfigResponse) *PrivateClusterMasterGlobalAccessConfigResponse {
		return &v
	}).(PrivateClusterMasterGlobalAccessConfigResponsePtrOutput)
}

// Whenever master is accessible globally or not.
func (o PrivateClusterMasterGlobalAccessConfigResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v PrivateClusterMasterGlobalAccessConfigResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type PrivateClusterMasterGlobalAccessConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (PrivateClusterMasterGlobalAccessConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateClusterMasterGlobalAccessConfigResponse)(nil)).Elem()
}

func (o PrivateClusterMasterGlobalAccessConfigResponsePtrOutput) ToPrivateClusterMasterGlobalAccessConfigResponsePtrOutput() PrivateClusterMasterGlobalAccessConfigResponsePtrOutput {
	return o
}

func (o PrivateClusterMasterGlobalAccessConfigResponsePtrOutput) ToPrivateClusterMasterGlobalAccessConfigResponsePtrOutputWithContext(ctx context.Context) PrivateClusterMasterGlobalAccessConfigResponsePtrOutput {
	return o
}

func (o PrivateClusterMasterGlobalAccessConfigResponsePtrOutput) Elem() PrivateClusterMasterGlobalAccessConfigResponseOutput {
	return o.ApplyT(func(v *PrivateClusterMasterGlobalAccessConfigResponse) PrivateClusterMasterGlobalAccessConfigResponse {
		return *v
	}).(PrivateClusterMasterGlobalAccessConfigResponseOutput)
}

// Whenever master is accessible globally or not.
func (o PrivateClusterMasterGlobalAccessConfigResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PrivateClusterMasterGlobalAccessConfigResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Pub/Sub specific notification config.
type PubSub struct {
	// Enable notifications for Pub/Sub.
	Enabled *bool `pulumi:"enabled"`
	// The desired Pub/Sub topic to which notifications will be sent by GKE. Format is `projects/{project}/topics/{topic}`.
	Topic *string `pulumi:"topic"`
}

// PubSubInput is an input type that accepts PubSubArgs and PubSubOutput values.
// You can construct a concrete instance of `PubSubInput` via:
//
//          PubSubArgs{...}
type PubSubInput interface {
	pulumi.Input

	ToPubSubOutput() PubSubOutput
	ToPubSubOutputWithContext(context.Context) PubSubOutput
}

// Pub/Sub specific notification config.
type PubSubArgs struct {
	// Enable notifications for Pub/Sub.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The desired Pub/Sub topic to which notifications will be sent by GKE. Format is `projects/{project}/topics/{topic}`.
	Topic pulumi.StringPtrInput `pulumi:"topic"`
}

func (PubSubArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PubSub)(nil)).Elem()
}

func (i PubSubArgs) ToPubSubOutput() PubSubOutput {
	return i.ToPubSubOutputWithContext(context.Background())
}

func (i PubSubArgs) ToPubSubOutputWithContext(ctx context.Context) PubSubOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PubSubOutput)
}

func (i PubSubArgs) ToPubSubPtrOutput() PubSubPtrOutput {
	return i.ToPubSubPtrOutputWithContext(context.Background())
}

func (i PubSubArgs) ToPubSubPtrOutputWithContext(ctx context.Context) PubSubPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PubSubOutput).ToPubSubPtrOutputWithContext(ctx)
}

// PubSubPtrInput is an input type that accepts PubSubArgs, PubSubPtr and PubSubPtrOutput values.
// You can construct a concrete instance of `PubSubPtrInput` via:
//
//          PubSubArgs{...}
//
//  or:
//
//          nil
type PubSubPtrInput interface {
	pulumi.Input

	ToPubSubPtrOutput() PubSubPtrOutput
	ToPubSubPtrOutputWithContext(context.Context) PubSubPtrOutput
}

type pubSubPtrType PubSubArgs

func PubSubPtr(v *PubSubArgs) PubSubPtrInput {
	return (*pubSubPtrType)(v)
}

func (*pubSubPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PubSub)(nil)).Elem()
}

func (i *pubSubPtrType) ToPubSubPtrOutput() PubSubPtrOutput {
	return i.ToPubSubPtrOutputWithContext(context.Background())
}

func (i *pubSubPtrType) ToPubSubPtrOutputWithContext(ctx context.Context) PubSubPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PubSubPtrOutput)
}

// Pub/Sub specific notification config.
type PubSubOutput struct{ *pulumi.OutputState }

func (PubSubOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PubSub)(nil)).Elem()
}

func (o PubSubOutput) ToPubSubOutput() PubSubOutput {
	return o
}

func (o PubSubOutput) ToPubSubOutputWithContext(ctx context.Context) PubSubOutput {
	return o
}

func (o PubSubOutput) ToPubSubPtrOutput() PubSubPtrOutput {
	return o.ToPubSubPtrOutputWithContext(context.Background())
}

func (o PubSubOutput) ToPubSubPtrOutputWithContext(ctx context.Context) PubSubPtrOutput {
	return o.ApplyT(func(v PubSub) *PubSub {
		return &v
	}).(PubSubPtrOutput)
}

// Enable notifications for Pub/Sub.
func (o PubSubOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PubSub) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The desired Pub/Sub topic to which notifications will be sent by GKE. Format is `projects/{project}/topics/{topic}`.
func (o PubSubOutput) Topic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PubSub) *string { return v.Topic }).(pulumi.StringPtrOutput)
}

type PubSubPtrOutput struct{ *pulumi.OutputState }

func (PubSubPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PubSub)(nil)).Elem()
}

func (o PubSubPtrOutput) ToPubSubPtrOutput() PubSubPtrOutput {
	return o
}

func (o PubSubPtrOutput) ToPubSubPtrOutputWithContext(ctx context.Context) PubSubPtrOutput {
	return o
}

func (o PubSubPtrOutput) Elem() PubSubOutput {
	return o.ApplyT(func(v *PubSub) PubSub { return *v }).(PubSubOutput)
}

// Enable notifications for Pub/Sub.
func (o PubSubPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PubSub) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The desired Pub/Sub topic to which notifications will be sent by GKE. Format is `projects/{project}/topics/{topic}`.
func (o PubSubPtrOutput) Topic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PubSub) *string {
		if v == nil {
			return nil
		}
		return v.Topic
	}).(pulumi.StringPtrOutput)
}

// Pub/Sub specific notification config.
type PubSubResponse struct {
	// Enable notifications for Pub/Sub.
	Enabled bool `pulumi:"enabled"`
	// The desired Pub/Sub topic to which notifications will be sent by GKE. Format is `projects/{project}/topics/{topic}`.
	Topic string `pulumi:"topic"`
}

// PubSubResponseInput is an input type that accepts PubSubResponseArgs and PubSubResponseOutput values.
// You can construct a concrete instance of `PubSubResponseInput` via:
//
//          PubSubResponseArgs{...}
type PubSubResponseInput interface {
	pulumi.Input

	ToPubSubResponseOutput() PubSubResponseOutput
	ToPubSubResponseOutputWithContext(context.Context) PubSubResponseOutput
}

// Pub/Sub specific notification config.
type PubSubResponseArgs struct {
	// Enable notifications for Pub/Sub.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// The desired Pub/Sub topic to which notifications will be sent by GKE. Format is `projects/{project}/topics/{topic}`.
	Topic pulumi.StringInput `pulumi:"topic"`
}

func (PubSubResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PubSubResponse)(nil)).Elem()
}

func (i PubSubResponseArgs) ToPubSubResponseOutput() PubSubResponseOutput {
	return i.ToPubSubResponseOutputWithContext(context.Background())
}

func (i PubSubResponseArgs) ToPubSubResponseOutputWithContext(ctx context.Context) PubSubResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PubSubResponseOutput)
}

func (i PubSubResponseArgs) ToPubSubResponsePtrOutput() PubSubResponsePtrOutput {
	return i.ToPubSubResponsePtrOutputWithContext(context.Background())
}

func (i PubSubResponseArgs) ToPubSubResponsePtrOutputWithContext(ctx context.Context) PubSubResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PubSubResponseOutput).ToPubSubResponsePtrOutputWithContext(ctx)
}

// PubSubResponsePtrInput is an input type that accepts PubSubResponseArgs, PubSubResponsePtr and PubSubResponsePtrOutput values.
// You can construct a concrete instance of `PubSubResponsePtrInput` via:
//
//          PubSubResponseArgs{...}
//
//  or:
//
//          nil
type PubSubResponsePtrInput interface {
	pulumi.Input

	ToPubSubResponsePtrOutput() PubSubResponsePtrOutput
	ToPubSubResponsePtrOutputWithContext(context.Context) PubSubResponsePtrOutput
}

type pubSubResponsePtrType PubSubResponseArgs

func PubSubResponsePtr(v *PubSubResponseArgs) PubSubResponsePtrInput {
	return (*pubSubResponsePtrType)(v)
}

func (*pubSubResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PubSubResponse)(nil)).Elem()
}

func (i *pubSubResponsePtrType) ToPubSubResponsePtrOutput() PubSubResponsePtrOutput {
	return i.ToPubSubResponsePtrOutputWithContext(context.Background())
}

func (i *pubSubResponsePtrType) ToPubSubResponsePtrOutputWithContext(ctx context.Context) PubSubResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PubSubResponsePtrOutput)
}

// Pub/Sub specific notification config.
type PubSubResponseOutput struct{ *pulumi.OutputState }

func (PubSubResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PubSubResponse)(nil)).Elem()
}

func (o PubSubResponseOutput) ToPubSubResponseOutput() PubSubResponseOutput {
	return o
}

func (o PubSubResponseOutput) ToPubSubResponseOutputWithContext(ctx context.Context) PubSubResponseOutput {
	return o
}

func (o PubSubResponseOutput) ToPubSubResponsePtrOutput() PubSubResponsePtrOutput {
	return o.ToPubSubResponsePtrOutputWithContext(context.Background())
}

func (o PubSubResponseOutput) ToPubSubResponsePtrOutputWithContext(ctx context.Context) PubSubResponsePtrOutput {
	return o.ApplyT(func(v PubSubResponse) *PubSubResponse {
		return &v
	}).(PubSubResponsePtrOutput)
}

// Enable notifications for Pub/Sub.
func (o PubSubResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v PubSubResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The desired Pub/Sub topic to which notifications will be sent by GKE. Format is `projects/{project}/topics/{topic}`.
func (o PubSubResponseOutput) Topic() pulumi.StringOutput {
	return o.ApplyT(func(v PubSubResponse) string { return v.Topic }).(pulumi.StringOutput)
}

type PubSubResponsePtrOutput struct{ *pulumi.OutputState }

func (PubSubResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PubSubResponse)(nil)).Elem()
}

func (o PubSubResponsePtrOutput) ToPubSubResponsePtrOutput() PubSubResponsePtrOutput {
	return o
}

func (o PubSubResponsePtrOutput) ToPubSubResponsePtrOutputWithContext(ctx context.Context) PubSubResponsePtrOutput {
	return o
}

func (o PubSubResponsePtrOutput) Elem() PubSubResponseOutput {
	return o.ApplyT(func(v *PubSubResponse) PubSubResponse { return *v }).(PubSubResponseOutput)
}

// Enable notifications for Pub/Sub.
func (o PubSubResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PubSubResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The desired Pub/Sub topic to which notifications will be sent by GKE. Format is `projects/{project}/topics/{topic}`.
func (o PubSubResponsePtrOutput) Topic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PubSubResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Topic
	}).(pulumi.StringPtrOutput)
}

// Represents an arbitrary window of time that recurs.
type RecurringTimeWindow struct {
	// An RRULE (https://tools.ietf.org/html/rfc5545#section-3.8.5.3) for how this window reccurs. They go on for the span of time between the start and end time. For example, to have something repeat every weekday, you'd use: `FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR` To repeat some window daily (equivalent to the DailyMaintenanceWindow): `FREQ=DAILY` For the first weekend of every month: `FREQ=MONTHLY;BYSETPOS=1;BYDAY=SA,SU` This specifies how frequently the window starts. Eg, if you wanted to have a 9-5 UTC-4 window every weekday, you'd use something like: ```start time = 2019-01-01T09:00:00-0400 end time = 2019-01-01T17:00:00-0400 recurrence = FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR``` Windows can span multiple days. Eg, to make the window encompass every weekend from midnight Saturday till the last minute of Sunday UTC: ```start time = 2019-01-05T00:00:00Z end time = 2019-01-07T23:59:00Z recurrence = FREQ=WEEKLY;BYDAY=SA``` Note the start and end time's specific dates are largely arbitrary except to specify duration of the window and when it first starts. The FREQ values of HOURLY, MINUTELY, and SECONDLY are not supported.
	Recurrence *string `pulumi:"recurrence"`
	// The window of the first recurrence.
	Window *TimeWindow `pulumi:"window"`
}

// RecurringTimeWindowInput is an input type that accepts RecurringTimeWindowArgs and RecurringTimeWindowOutput values.
// You can construct a concrete instance of `RecurringTimeWindowInput` via:
//
//          RecurringTimeWindowArgs{...}
type RecurringTimeWindowInput interface {
	pulumi.Input

	ToRecurringTimeWindowOutput() RecurringTimeWindowOutput
	ToRecurringTimeWindowOutputWithContext(context.Context) RecurringTimeWindowOutput
}

// Represents an arbitrary window of time that recurs.
type RecurringTimeWindowArgs struct {
	// An RRULE (https://tools.ietf.org/html/rfc5545#section-3.8.5.3) for how this window reccurs. They go on for the span of time between the start and end time. For example, to have something repeat every weekday, you'd use: `FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR` To repeat some window daily (equivalent to the DailyMaintenanceWindow): `FREQ=DAILY` For the first weekend of every month: `FREQ=MONTHLY;BYSETPOS=1;BYDAY=SA,SU` This specifies how frequently the window starts. Eg, if you wanted to have a 9-5 UTC-4 window every weekday, you'd use something like: ```start time = 2019-01-01T09:00:00-0400 end time = 2019-01-01T17:00:00-0400 recurrence = FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR``` Windows can span multiple days. Eg, to make the window encompass every weekend from midnight Saturday till the last minute of Sunday UTC: ```start time = 2019-01-05T00:00:00Z end time = 2019-01-07T23:59:00Z recurrence = FREQ=WEEKLY;BYDAY=SA``` Note the start and end time's specific dates are largely arbitrary except to specify duration of the window and when it first starts. The FREQ values of HOURLY, MINUTELY, and SECONDLY are not supported.
	Recurrence pulumi.StringPtrInput `pulumi:"recurrence"`
	// The window of the first recurrence.
	Window TimeWindowPtrInput `pulumi:"window"`
}

func (RecurringTimeWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurringTimeWindow)(nil)).Elem()
}

func (i RecurringTimeWindowArgs) ToRecurringTimeWindowOutput() RecurringTimeWindowOutput {
	return i.ToRecurringTimeWindowOutputWithContext(context.Background())
}

func (i RecurringTimeWindowArgs) ToRecurringTimeWindowOutputWithContext(ctx context.Context) RecurringTimeWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurringTimeWindowOutput)
}

func (i RecurringTimeWindowArgs) ToRecurringTimeWindowPtrOutput() RecurringTimeWindowPtrOutput {
	return i.ToRecurringTimeWindowPtrOutputWithContext(context.Background())
}

func (i RecurringTimeWindowArgs) ToRecurringTimeWindowPtrOutputWithContext(ctx context.Context) RecurringTimeWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurringTimeWindowOutput).ToRecurringTimeWindowPtrOutputWithContext(ctx)
}

// RecurringTimeWindowPtrInput is an input type that accepts RecurringTimeWindowArgs, RecurringTimeWindowPtr and RecurringTimeWindowPtrOutput values.
// You can construct a concrete instance of `RecurringTimeWindowPtrInput` via:
//
//          RecurringTimeWindowArgs{...}
//
//  or:
//
//          nil
type RecurringTimeWindowPtrInput interface {
	pulumi.Input

	ToRecurringTimeWindowPtrOutput() RecurringTimeWindowPtrOutput
	ToRecurringTimeWindowPtrOutputWithContext(context.Context) RecurringTimeWindowPtrOutput
}

type recurringTimeWindowPtrType RecurringTimeWindowArgs

func RecurringTimeWindowPtr(v *RecurringTimeWindowArgs) RecurringTimeWindowPtrInput {
	return (*recurringTimeWindowPtrType)(v)
}

func (*recurringTimeWindowPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RecurringTimeWindow)(nil)).Elem()
}

func (i *recurringTimeWindowPtrType) ToRecurringTimeWindowPtrOutput() RecurringTimeWindowPtrOutput {
	return i.ToRecurringTimeWindowPtrOutputWithContext(context.Background())
}

func (i *recurringTimeWindowPtrType) ToRecurringTimeWindowPtrOutputWithContext(ctx context.Context) RecurringTimeWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurringTimeWindowPtrOutput)
}

// Represents an arbitrary window of time that recurs.
type RecurringTimeWindowOutput struct{ *pulumi.OutputState }

func (RecurringTimeWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurringTimeWindow)(nil)).Elem()
}

func (o RecurringTimeWindowOutput) ToRecurringTimeWindowOutput() RecurringTimeWindowOutput {
	return o
}

func (o RecurringTimeWindowOutput) ToRecurringTimeWindowOutputWithContext(ctx context.Context) RecurringTimeWindowOutput {
	return o
}

func (o RecurringTimeWindowOutput) ToRecurringTimeWindowPtrOutput() RecurringTimeWindowPtrOutput {
	return o.ToRecurringTimeWindowPtrOutputWithContext(context.Background())
}

func (o RecurringTimeWindowOutput) ToRecurringTimeWindowPtrOutputWithContext(ctx context.Context) RecurringTimeWindowPtrOutput {
	return o.ApplyT(func(v RecurringTimeWindow) *RecurringTimeWindow {
		return &v
	}).(RecurringTimeWindowPtrOutput)
}

// An RRULE (https://tools.ietf.org/html/rfc5545#section-3.8.5.3) for how this window reccurs. They go on for the span of time between the start and end time. For example, to have something repeat every weekday, you'd use: `FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR` To repeat some window daily (equivalent to the DailyMaintenanceWindow): `FREQ=DAILY` For the first weekend of every month: `FREQ=MONTHLY;BYSETPOS=1;BYDAY=SA,SU` This specifies how frequently the window starts. Eg, if you wanted to have a 9-5 UTC-4 window every weekday, you'd use something like: ```start time = 2019-01-01T09:00:00-0400 end time = 2019-01-01T17:00:00-0400 recurrence = FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR``` Windows can span multiple days. Eg, to make the window encompass every weekend from midnight Saturday till the last minute of Sunday UTC: ```start time = 2019-01-05T00:00:00Z end time = 2019-01-07T23:59:00Z recurrence = FREQ=WEEKLY;BYDAY=SA``` Note the start and end time's specific dates are largely arbitrary except to specify duration of the window and when it first starts. The FREQ values of HOURLY, MINUTELY, and SECONDLY are not supported.
func (o RecurringTimeWindowOutput) Recurrence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecurringTimeWindow) *string { return v.Recurrence }).(pulumi.StringPtrOutput)
}

// The window of the first recurrence.
func (o RecurringTimeWindowOutput) Window() TimeWindowPtrOutput {
	return o.ApplyT(func(v RecurringTimeWindow) *TimeWindow { return v.Window }).(TimeWindowPtrOutput)
}

type RecurringTimeWindowPtrOutput struct{ *pulumi.OutputState }

func (RecurringTimeWindowPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecurringTimeWindow)(nil)).Elem()
}

func (o RecurringTimeWindowPtrOutput) ToRecurringTimeWindowPtrOutput() RecurringTimeWindowPtrOutput {
	return o
}

func (o RecurringTimeWindowPtrOutput) ToRecurringTimeWindowPtrOutputWithContext(ctx context.Context) RecurringTimeWindowPtrOutput {
	return o
}

func (o RecurringTimeWindowPtrOutput) Elem() RecurringTimeWindowOutput {
	return o.ApplyT(func(v *RecurringTimeWindow) RecurringTimeWindow { return *v }).(RecurringTimeWindowOutput)
}

// An RRULE (https://tools.ietf.org/html/rfc5545#section-3.8.5.3) for how this window reccurs. They go on for the span of time between the start and end time. For example, to have something repeat every weekday, you'd use: `FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR` To repeat some window daily (equivalent to the DailyMaintenanceWindow): `FREQ=DAILY` For the first weekend of every month: `FREQ=MONTHLY;BYSETPOS=1;BYDAY=SA,SU` This specifies how frequently the window starts. Eg, if you wanted to have a 9-5 UTC-4 window every weekday, you'd use something like: ```start time = 2019-01-01T09:00:00-0400 end time = 2019-01-01T17:00:00-0400 recurrence = FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR``` Windows can span multiple days. Eg, to make the window encompass every weekend from midnight Saturday till the last minute of Sunday UTC: ```start time = 2019-01-05T00:00:00Z end time = 2019-01-07T23:59:00Z recurrence = FREQ=WEEKLY;BYDAY=SA``` Note the start and end time's specific dates are largely arbitrary except to specify duration of the window and when it first starts. The FREQ values of HOURLY, MINUTELY, and SECONDLY are not supported.
func (o RecurringTimeWindowPtrOutput) Recurrence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurringTimeWindow) *string {
		if v == nil {
			return nil
		}
		return v.Recurrence
	}).(pulumi.StringPtrOutput)
}

// The window of the first recurrence.
func (o RecurringTimeWindowPtrOutput) Window() TimeWindowPtrOutput {
	return o.ApplyT(func(v *RecurringTimeWindow) *TimeWindow {
		if v == nil {
			return nil
		}
		return v.Window
	}).(TimeWindowPtrOutput)
}

// Represents an arbitrary window of time that recurs.
type RecurringTimeWindowResponse struct {
	// An RRULE (https://tools.ietf.org/html/rfc5545#section-3.8.5.3) for how this window reccurs. They go on for the span of time between the start and end time. For example, to have something repeat every weekday, you'd use: `FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR` To repeat some window daily (equivalent to the DailyMaintenanceWindow): `FREQ=DAILY` For the first weekend of every month: `FREQ=MONTHLY;BYSETPOS=1;BYDAY=SA,SU` This specifies how frequently the window starts. Eg, if you wanted to have a 9-5 UTC-4 window every weekday, you'd use something like: ```start time = 2019-01-01T09:00:00-0400 end time = 2019-01-01T17:00:00-0400 recurrence = FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR``` Windows can span multiple days. Eg, to make the window encompass every weekend from midnight Saturday till the last minute of Sunday UTC: ```start time = 2019-01-05T00:00:00Z end time = 2019-01-07T23:59:00Z recurrence = FREQ=WEEKLY;BYDAY=SA``` Note the start and end time's specific dates are largely arbitrary except to specify duration of the window and when it first starts. The FREQ values of HOURLY, MINUTELY, and SECONDLY are not supported.
	Recurrence string `pulumi:"recurrence"`
	// The window of the first recurrence.
	Window TimeWindowResponse `pulumi:"window"`
}

// RecurringTimeWindowResponseInput is an input type that accepts RecurringTimeWindowResponseArgs and RecurringTimeWindowResponseOutput values.
// You can construct a concrete instance of `RecurringTimeWindowResponseInput` via:
//
//          RecurringTimeWindowResponseArgs{...}
type RecurringTimeWindowResponseInput interface {
	pulumi.Input

	ToRecurringTimeWindowResponseOutput() RecurringTimeWindowResponseOutput
	ToRecurringTimeWindowResponseOutputWithContext(context.Context) RecurringTimeWindowResponseOutput
}

// Represents an arbitrary window of time that recurs.
type RecurringTimeWindowResponseArgs struct {
	// An RRULE (https://tools.ietf.org/html/rfc5545#section-3.8.5.3) for how this window reccurs. They go on for the span of time between the start and end time. For example, to have something repeat every weekday, you'd use: `FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR` To repeat some window daily (equivalent to the DailyMaintenanceWindow): `FREQ=DAILY` For the first weekend of every month: `FREQ=MONTHLY;BYSETPOS=1;BYDAY=SA,SU` This specifies how frequently the window starts. Eg, if you wanted to have a 9-5 UTC-4 window every weekday, you'd use something like: ```start time = 2019-01-01T09:00:00-0400 end time = 2019-01-01T17:00:00-0400 recurrence = FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR``` Windows can span multiple days. Eg, to make the window encompass every weekend from midnight Saturday till the last minute of Sunday UTC: ```start time = 2019-01-05T00:00:00Z end time = 2019-01-07T23:59:00Z recurrence = FREQ=WEEKLY;BYDAY=SA``` Note the start and end time's specific dates are largely arbitrary except to specify duration of the window and when it first starts. The FREQ values of HOURLY, MINUTELY, and SECONDLY are not supported.
	Recurrence pulumi.StringInput `pulumi:"recurrence"`
	// The window of the first recurrence.
	Window TimeWindowResponseInput `pulumi:"window"`
}

func (RecurringTimeWindowResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurringTimeWindowResponse)(nil)).Elem()
}

func (i RecurringTimeWindowResponseArgs) ToRecurringTimeWindowResponseOutput() RecurringTimeWindowResponseOutput {
	return i.ToRecurringTimeWindowResponseOutputWithContext(context.Background())
}

func (i RecurringTimeWindowResponseArgs) ToRecurringTimeWindowResponseOutputWithContext(ctx context.Context) RecurringTimeWindowResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurringTimeWindowResponseOutput)
}

func (i RecurringTimeWindowResponseArgs) ToRecurringTimeWindowResponsePtrOutput() RecurringTimeWindowResponsePtrOutput {
	return i.ToRecurringTimeWindowResponsePtrOutputWithContext(context.Background())
}

func (i RecurringTimeWindowResponseArgs) ToRecurringTimeWindowResponsePtrOutputWithContext(ctx context.Context) RecurringTimeWindowResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurringTimeWindowResponseOutput).ToRecurringTimeWindowResponsePtrOutputWithContext(ctx)
}

// RecurringTimeWindowResponsePtrInput is an input type that accepts RecurringTimeWindowResponseArgs, RecurringTimeWindowResponsePtr and RecurringTimeWindowResponsePtrOutput values.
// You can construct a concrete instance of `RecurringTimeWindowResponsePtrInput` via:
//
//          RecurringTimeWindowResponseArgs{...}
//
//  or:
//
//          nil
type RecurringTimeWindowResponsePtrInput interface {
	pulumi.Input

	ToRecurringTimeWindowResponsePtrOutput() RecurringTimeWindowResponsePtrOutput
	ToRecurringTimeWindowResponsePtrOutputWithContext(context.Context) RecurringTimeWindowResponsePtrOutput
}

type recurringTimeWindowResponsePtrType RecurringTimeWindowResponseArgs

func RecurringTimeWindowResponsePtr(v *RecurringTimeWindowResponseArgs) RecurringTimeWindowResponsePtrInput {
	return (*recurringTimeWindowResponsePtrType)(v)
}

func (*recurringTimeWindowResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RecurringTimeWindowResponse)(nil)).Elem()
}

func (i *recurringTimeWindowResponsePtrType) ToRecurringTimeWindowResponsePtrOutput() RecurringTimeWindowResponsePtrOutput {
	return i.ToRecurringTimeWindowResponsePtrOutputWithContext(context.Background())
}

func (i *recurringTimeWindowResponsePtrType) ToRecurringTimeWindowResponsePtrOutputWithContext(ctx context.Context) RecurringTimeWindowResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurringTimeWindowResponsePtrOutput)
}

// Represents an arbitrary window of time that recurs.
type RecurringTimeWindowResponseOutput struct{ *pulumi.OutputState }

func (RecurringTimeWindowResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurringTimeWindowResponse)(nil)).Elem()
}

func (o RecurringTimeWindowResponseOutput) ToRecurringTimeWindowResponseOutput() RecurringTimeWindowResponseOutput {
	return o
}

func (o RecurringTimeWindowResponseOutput) ToRecurringTimeWindowResponseOutputWithContext(ctx context.Context) RecurringTimeWindowResponseOutput {
	return o
}

func (o RecurringTimeWindowResponseOutput) ToRecurringTimeWindowResponsePtrOutput() RecurringTimeWindowResponsePtrOutput {
	return o.ToRecurringTimeWindowResponsePtrOutputWithContext(context.Background())
}

func (o RecurringTimeWindowResponseOutput) ToRecurringTimeWindowResponsePtrOutputWithContext(ctx context.Context) RecurringTimeWindowResponsePtrOutput {
	return o.ApplyT(func(v RecurringTimeWindowResponse) *RecurringTimeWindowResponse {
		return &v
	}).(RecurringTimeWindowResponsePtrOutput)
}

// An RRULE (https://tools.ietf.org/html/rfc5545#section-3.8.5.3) for how this window reccurs. They go on for the span of time between the start and end time. For example, to have something repeat every weekday, you'd use: `FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR` To repeat some window daily (equivalent to the DailyMaintenanceWindow): `FREQ=DAILY` For the first weekend of every month: `FREQ=MONTHLY;BYSETPOS=1;BYDAY=SA,SU` This specifies how frequently the window starts. Eg, if you wanted to have a 9-5 UTC-4 window every weekday, you'd use something like: ```start time = 2019-01-01T09:00:00-0400 end time = 2019-01-01T17:00:00-0400 recurrence = FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR``` Windows can span multiple days. Eg, to make the window encompass every weekend from midnight Saturday till the last minute of Sunday UTC: ```start time = 2019-01-05T00:00:00Z end time = 2019-01-07T23:59:00Z recurrence = FREQ=WEEKLY;BYDAY=SA``` Note the start and end time's specific dates are largely arbitrary except to specify duration of the window and when it first starts. The FREQ values of HOURLY, MINUTELY, and SECONDLY are not supported.
func (o RecurringTimeWindowResponseOutput) Recurrence() pulumi.StringOutput {
	return o.ApplyT(func(v RecurringTimeWindowResponse) string { return v.Recurrence }).(pulumi.StringOutput)
}

// The window of the first recurrence.
func (o RecurringTimeWindowResponseOutput) Window() TimeWindowResponseOutput {
	return o.ApplyT(func(v RecurringTimeWindowResponse) TimeWindowResponse { return v.Window }).(TimeWindowResponseOutput)
}

type RecurringTimeWindowResponsePtrOutput struct{ *pulumi.OutputState }

func (RecurringTimeWindowResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecurringTimeWindowResponse)(nil)).Elem()
}

func (o RecurringTimeWindowResponsePtrOutput) ToRecurringTimeWindowResponsePtrOutput() RecurringTimeWindowResponsePtrOutput {
	return o
}

func (o RecurringTimeWindowResponsePtrOutput) ToRecurringTimeWindowResponsePtrOutputWithContext(ctx context.Context) RecurringTimeWindowResponsePtrOutput {
	return o
}

func (o RecurringTimeWindowResponsePtrOutput) Elem() RecurringTimeWindowResponseOutput {
	return o.ApplyT(func(v *RecurringTimeWindowResponse) RecurringTimeWindowResponse { return *v }).(RecurringTimeWindowResponseOutput)
}

// An RRULE (https://tools.ietf.org/html/rfc5545#section-3.8.5.3) for how this window reccurs. They go on for the span of time between the start and end time. For example, to have something repeat every weekday, you'd use: `FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR` To repeat some window daily (equivalent to the DailyMaintenanceWindow): `FREQ=DAILY` For the first weekend of every month: `FREQ=MONTHLY;BYSETPOS=1;BYDAY=SA,SU` This specifies how frequently the window starts. Eg, if you wanted to have a 9-5 UTC-4 window every weekday, you'd use something like: ```start time = 2019-01-01T09:00:00-0400 end time = 2019-01-01T17:00:00-0400 recurrence = FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR``` Windows can span multiple days. Eg, to make the window encompass every weekend from midnight Saturday till the last minute of Sunday UTC: ```start time = 2019-01-05T00:00:00Z end time = 2019-01-07T23:59:00Z recurrence = FREQ=WEEKLY;BYDAY=SA``` Note the start and end time's specific dates are largely arbitrary except to specify duration of the window and when it first starts. The FREQ values of HOURLY, MINUTELY, and SECONDLY are not supported.
func (o RecurringTimeWindowResponsePtrOutput) Recurrence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurringTimeWindowResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Recurrence
	}).(pulumi.StringPtrOutput)
}

// The window of the first recurrence.
func (o RecurringTimeWindowResponsePtrOutput) Window() TimeWindowResponsePtrOutput {
	return o.ApplyT(func(v *RecurringTimeWindowResponse) *TimeWindowResponse {
		if v == nil {
			return nil
		}
		return &v.Window
	}).(TimeWindowResponsePtrOutput)
}

// ReleaseChannel indicates which release channel a cluster is subscribed to. Release channels are arranged in order of risk. When a cluster is subscribed to a release channel, Google maintains both the master version and the node version. Node auto-upgrade defaults to true and cannot be disabled.
type ReleaseChannel struct {
	// channel specifies which release channel the cluster is subscribed to.
	Channel *string `pulumi:"channel"`
}

// ReleaseChannelInput is an input type that accepts ReleaseChannelArgs and ReleaseChannelOutput values.
// You can construct a concrete instance of `ReleaseChannelInput` via:
//
//          ReleaseChannelArgs{...}
type ReleaseChannelInput interface {
	pulumi.Input

	ToReleaseChannelOutput() ReleaseChannelOutput
	ToReleaseChannelOutputWithContext(context.Context) ReleaseChannelOutput
}

// ReleaseChannel indicates which release channel a cluster is subscribed to. Release channels are arranged in order of risk. When a cluster is subscribed to a release channel, Google maintains both the master version and the node version. Node auto-upgrade defaults to true and cannot be disabled.
type ReleaseChannelArgs struct {
	// channel specifies which release channel the cluster is subscribed to.
	Channel *ReleaseChannelChannel `pulumi:"channel"`
}

func (ReleaseChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReleaseChannel)(nil)).Elem()
}

func (i ReleaseChannelArgs) ToReleaseChannelOutput() ReleaseChannelOutput {
	return i.ToReleaseChannelOutputWithContext(context.Background())
}

func (i ReleaseChannelArgs) ToReleaseChannelOutputWithContext(ctx context.Context) ReleaseChannelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReleaseChannelOutput)
}

func (i ReleaseChannelArgs) ToReleaseChannelPtrOutput() ReleaseChannelPtrOutput {
	return i.ToReleaseChannelPtrOutputWithContext(context.Background())
}

func (i ReleaseChannelArgs) ToReleaseChannelPtrOutputWithContext(ctx context.Context) ReleaseChannelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReleaseChannelOutput).ToReleaseChannelPtrOutputWithContext(ctx)
}

// ReleaseChannelPtrInput is an input type that accepts ReleaseChannelArgs, ReleaseChannelPtr and ReleaseChannelPtrOutput values.
// You can construct a concrete instance of `ReleaseChannelPtrInput` via:
//
//          ReleaseChannelArgs{...}
//
//  or:
//
//          nil
type ReleaseChannelPtrInput interface {
	pulumi.Input

	ToReleaseChannelPtrOutput() ReleaseChannelPtrOutput
	ToReleaseChannelPtrOutputWithContext(context.Context) ReleaseChannelPtrOutput
}

type releaseChannelPtrType ReleaseChannelArgs

func ReleaseChannelPtr(v *ReleaseChannelArgs) ReleaseChannelPtrInput {
	return (*releaseChannelPtrType)(v)
}

func (*releaseChannelPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReleaseChannel)(nil)).Elem()
}

func (i *releaseChannelPtrType) ToReleaseChannelPtrOutput() ReleaseChannelPtrOutput {
	return i.ToReleaseChannelPtrOutputWithContext(context.Background())
}

func (i *releaseChannelPtrType) ToReleaseChannelPtrOutputWithContext(ctx context.Context) ReleaseChannelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReleaseChannelPtrOutput)
}

// ReleaseChannel indicates which release channel a cluster is subscribed to. Release channels are arranged in order of risk. When a cluster is subscribed to a release channel, Google maintains both the master version and the node version. Node auto-upgrade defaults to true and cannot be disabled.
type ReleaseChannelOutput struct{ *pulumi.OutputState }

func (ReleaseChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReleaseChannel)(nil)).Elem()
}

func (o ReleaseChannelOutput) ToReleaseChannelOutput() ReleaseChannelOutput {
	return o
}

func (o ReleaseChannelOutput) ToReleaseChannelOutputWithContext(ctx context.Context) ReleaseChannelOutput {
	return o
}

func (o ReleaseChannelOutput) ToReleaseChannelPtrOutput() ReleaseChannelPtrOutput {
	return o.ToReleaseChannelPtrOutputWithContext(context.Background())
}

func (o ReleaseChannelOutput) ToReleaseChannelPtrOutputWithContext(ctx context.Context) ReleaseChannelPtrOutput {
	return o.ApplyT(func(v ReleaseChannel) *ReleaseChannel {
		return &v
	}).(ReleaseChannelPtrOutput)
}

// channel specifies which release channel the cluster is subscribed to.
func (o ReleaseChannelOutput) Channel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReleaseChannel) *string { return v.Channel }).(pulumi.StringPtrOutput)
}

type ReleaseChannelPtrOutput struct{ *pulumi.OutputState }

func (ReleaseChannelPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReleaseChannel)(nil)).Elem()
}

func (o ReleaseChannelPtrOutput) ToReleaseChannelPtrOutput() ReleaseChannelPtrOutput {
	return o
}

func (o ReleaseChannelPtrOutput) ToReleaseChannelPtrOutputWithContext(ctx context.Context) ReleaseChannelPtrOutput {
	return o
}

func (o ReleaseChannelPtrOutput) Elem() ReleaseChannelOutput {
	return o.ApplyT(func(v *ReleaseChannel) ReleaseChannel { return *v }).(ReleaseChannelOutput)
}

// channel specifies which release channel the cluster is subscribed to.
func (o ReleaseChannelPtrOutput) Channel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReleaseChannel) *string {
		if v == nil {
			return nil
		}
		return v.Channel
	}).(pulumi.StringPtrOutput)
}

// ReleaseChannel indicates which release channel a cluster is subscribed to. Release channels are arranged in order of risk. When a cluster is subscribed to a release channel, Google maintains both the master version and the node version. Node auto-upgrade defaults to true and cannot be disabled.
type ReleaseChannelResponse struct {
	// channel specifies which release channel the cluster is subscribed to.
	Channel string `pulumi:"channel"`
}

// ReleaseChannelResponseInput is an input type that accepts ReleaseChannelResponseArgs and ReleaseChannelResponseOutput values.
// You can construct a concrete instance of `ReleaseChannelResponseInput` via:
//
//          ReleaseChannelResponseArgs{...}
type ReleaseChannelResponseInput interface {
	pulumi.Input

	ToReleaseChannelResponseOutput() ReleaseChannelResponseOutput
	ToReleaseChannelResponseOutputWithContext(context.Context) ReleaseChannelResponseOutput
}

// ReleaseChannel indicates which release channel a cluster is subscribed to. Release channels are arranged in order of risk. When a cluster is subscribed to a release channel, Google maintains both the master version and the node version. Node auto-upgrade defaults to true and cannot be disabled.
type ReleaseChannelResponseArgs struct {
	// channel specifies which release channel the cluster is subscribed to.
	Channel pulumi.StringInput `pulumi:"channel"`
}

func (ReleaseChannelResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReleaseChannelResponse)(nil)).Elem()
}

func (i ReleaseChannelResponseArgs) ToReleaseChannelResponseOutput() ReleaseChannelResponseOutput {
	return i.ToReleaseChannelResponseOutputWithContext(context.Background())
}

func (i ReleaseChannelResponseArgs) ToReleaseChannelResponseOutputWithContext(ctx context.Context) ReleaseChannelResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReleaseChannelResponseOutput)
}

func (i ReleaseChannelResponseArgs) ToReleaseChannelResponsePtrOutput() ReleaseChannelResponsePtrOutput {
	return i.ToReleaseChannelResponsePtrOutputWithContext(context.Background())
}

func (i ReleaseChannelResponseArgs) ToReleaseChannelResponsePtrOutputWithContext(ctx context.Context) ReleaseChannelResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReleaseChannelResponseOutput).ToReleaseChannelResponsePtrOutputWithContext(ctx)
}

// ReleaseChannelResponsePtrInput is an input type that accepts ReleaseChannelResponseArgs, ReleaseChannelResponsePtr and ReleaseChannelResponsePtrOutput values.
// You can construct a concrete instance of `ReleaseChannelResponsePtrInput` via:
//
//          ReleaseChannelResponseArgs{...}
//
//  or:
//
//          nil
type ReleaseChannelResponsePtrInput interface {
	pulumi.Input

	ToReleaseChannelResponsePtrOutput() ReleaseChannelResponsePtrOutput
	ToReleaseChannelResponsePtrOutputWithContext(context.Context) ReleaseChannelResponsePtrOutput
}

type releaseChannelResponsePtrType ReleaseChannelResponseArgs

func ReleaseChannelResponsePtr(v *ReleaseChannelResponseArgs) ReleaseChannelResponsePtrInput {
	return (*releaseChannelResponsePtrType)(v)
}

func (*releaseChannelResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReleaseChannelResponse)(nil)).Elem()
}

func (i *releaseChannelResponsePtrType) ToReleaseChannelResponsePtrOutput() ReleaseChannelResponsePtrOutput {
	return i.ToReleaseChannelResponsePtrOutputWithContext(context.Background())
}

func (i *releaseChannelResponsePtrType) ToReleaseChannelResponsePtrOutputWithContext(ctx context.Context) ReleaseChannelResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReleaseChannelResponsePtrOutput)
}

// ReleaseChannel indicates which release channel a cluster is subscribed to. Release channels are arranged in order of risk. When a cluster is subscribed to a release channel, Google maintains both the master version and the node version. Node auto-upgrade defaults to true and cannot be disabled.
type ReleaseChannelResponseOutput struct{ *pulumi.OutputState }

func (ReleaseChannelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReleaseChannelResponse)(nil)).Elem()
}

func (o ReleaseChannelResponseOutput) ToReleaseChannelResponseOutput() ReleaseChannelResponseOutput {
	return o
}

func (o ReleaseChannelResponseOutput) ToReleaseChannelResponseOutputWithContext(ctx context.Context) ReleaseChannelResponseOutput {
	return o
}

func (o ReleaseChannelResponseOutput) ToReleaseChannelResponsePtrOutput() ReleaseChannelResponsePtrOutput {
	return o.ToReleaseChannelResponsePtrOutputWithContext(context.Background())
}

func (o ReleaseChannelResponseOutput) ToReleaseChannelResponsePtrOutputWithContext(ctx context.Context) ReleaseChannelResponsePtrOutput {
	return o.ApplyT(func(v ReleaseChannelResponse) *ReleaseChannelResponse {
		return &v
	}).(ReleaseChannelResponsePtrOutput)
}

// channel specifies which release channel the cluster is subscribed to.
func (o ReleaseChannelResponseOutput) Channel() pulumi.StringOutput {
	return o.ApplyT(func(v ReleaseChannelResponse) string { return v.Channel }).(pulumi.StringOutput)
}

type ReleaseChannelResponsePtrOutput struct{ *pulumi.OutputState }

func (ReleaseChannelResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReleaseChannelResponse)(nil)).Elem()
}

func (o ReleaseChannelResponsePtrOutput) ToReleaseChannelResponsePtrOutput() ReleaseChannelResponsePtrOutput {
	return o
}

func (o ReleaseChannelResponsePtrOutput) ToReleaseChannelResponsePtrOutputWithContext(ctx context.Context) ReleaseChannelResponsePtrOutput {
	return o
}

func (o ReleaseChannelResponsePtrOutput) Elem() ReleaseChannelResponseOutput {
	return o.ApplyT(func(v *ReleaseChannelResponse) ReleaseChannelResponse { return *v }).(ReleaseChannelResponseOutput)
}

// channel specifies which release channel the cluster is subscribed to.
func (o ReleaseChannelResponsePtrOutput) Channel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReleaseChannelResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Channel
	}).(pulumi.StringPtrOutput)
}

// [ReservationAffinity](https://cloud.google.com/compute/docs/instances/reserving-zonal-resources) is the configuration of desired reservation which instances could take capacity from.
type ReservationAffinity struct {
	// Corresponds to the type of reservation consumption.
	ConsumeReservationType *string `pulumi:"consumeReservationType"`
	// Corresponds to the label key of a reservation resource. To target a SPECIFIC_RESERVATION by name, specify "googleapis.com/reservation-name" as the key and specify the name of your reservation as its value.
	Key *string `pulumi:"key"`
	// Corresponds to the label value(s) of reservation resource(s).
	Values []string `pulumi:"values"`
}

// ReservationAffinityInput is an input type that accepts ReservationAffinityArgs and ReservationAffinityOutput values.
// You can construct a concrete instance of `ReservationAffinityInput` via:
//
//          ReservationAffinityArgs{...}
type ReservationAffinityInput interface {
	pulumi.Input

	ToReservationAffinityOutput() ReservationAffinityOutput
	ToReservationAffinityOutputWithContext(context.Context) ReservationAffinityOutput
}

// [ReservationAffinity](https://cloud.google.com/compute/docs/instances/reserving-zonal-resources) is the configuration of desired reservation which instances could take capacity from.
type ReservationAffinityArgs struct {
	// Corresponds to the type of reservation consumption.
	ConsumeReservationType *ReservationAffinityConsumeReservationType `pulumi:"consumeReservationType"`
	// Corresponds to the label key of a reservation resource. To target a SPECIFIC_RESERVATION by name, specify "googleapis.com/reservation-name" as the key and specify the name of your reservation as its value.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Corresponds to the label value(s) of reservation resource(s).
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ReservationAffinityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReservationAffinity)(nil)).Elem()
}

func (i ReservationAffinityArgs) ToReservationAffinityOutput() ReservationAffinityOutput {
	return i.ToReservationAffinityOutputWithContext(context.Background())
}

func (i ReservationAffinityArgs) ToReservationAffinityOutputWithContext(ctx context.Context) ReservationAffinityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservationAffinityOutput)
}

func (i ReservationAffinityArgs) ToReservationAffinityPtrOutput() ReservationAffinityPtrOutput {
	return i.ToReservationAffinityPtrOutputWithContext(context.Background())
}

func (i ReservationAffinityArgs) ToReservationAffinityPtrOutputWithContext(ctx context.Context) ReservationAffinityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservationAffinityOutput).ToReservationAffinityPtrOutputWithContext(ctx)
}

// ReservationAffinityPtrInput is an input type that accepts ReservationAffinityArgs, ReservationAffinityPtr and ReservationAffinityPtrOutput values.
// You can construct a concrete instance of `ReservationAffinityPtrInput` via:
//
//          ReservationAffinityArgs{...}
//
//  or:
//
//          nil
type ReservationAffinityPtrInput interface {
	pulumi.Input

	ToReservationAffinityPtrOutput() ReservationAffinityPtrOutput
	ToReservationAffinityPtrOutputWithContext(context.Context) ReservationAffinityPtrOutput
}

type reservationAffinityPtrType ReservationAffinityArgs

func ReservationAffinityPtr(v *ReservationAffinityArgs) ReservationAffinityPtrInput {
	return (*reservationAffinityPtrType)(v)
}

func (*reservationAffinityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReservationAffinity)(nil)).Elem()
}

func (i *reservationAffinityPtrType) ToReservationAffinityPtrOutput() ReservationAffinityPtrOutput {
	return i.ToReservationAffinityPtrOutputWithContext(context.Background())
}

func (i *reservationAffinityPtrType) ToReservationAffinityPtrOutputWithContext(ctx context.Context) ReservationAffinityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservationAffinityPtrOutput)
}

// [ReservationAffinity](https://cloud.google.com/compute/docs/instances/reserving-zonal-resources) is the configuration of desired reservation which instances could take capacity from.
type ReservationAffinityOutput struct{ *pulumi.OutputState }

func (ReservationAffinityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReservationAffinity)(nil)).Elem()
}

func (o ReservationAffinityOutput) ToReservationAffinityOutput() ReservationAffinityOutput {
	return o
}

func (o ReservationAffinityOutput) ToReservationAffinityOutputWithContext(ctx context.Context) ReservationAffinityOutput {
	return o
}

func (o ReservationAffinityOutput) ToReservationAffinityPtrOutput() ReservationAffinityPtrOutput {
	return o.ToReservationAffinityPtrOutputWithContext(context.Background())
}

func (o ReservationAffinityOutput) ToReservationAffinityPtrOutputWithContext(ctx context.Context) ReservationAffinityPtrOutput {
	return o.ApplyT(func(v ReservationAffinity) *ReservationAffinity {
		return &v
	}).(ReservationAffinityPtrOutput)
}

// Corresponds to the type of reservation consumption.
func (o ReservationAffinityOutput) ConsumeReservationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReservationAffinity) *string { return v.ConsumeReservationType }).(pulumi.StringPtrOutput)
}

// Corresponds to the label key of a reservation resource. To target a SPECIFIC_RESERVATION by name, specify "googleapis.com/reservation-name" as the key and specify the name of your reservation as its value.
func (o ReservationAffinityOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReservationAffinity) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Corresponds to the label value(s) of reservation resource(s).
func (o ReservationAffinityOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ReservationAffinity) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ReservationAffinityPtrOutput struct{ *pulumi.OutputState }

func (ReservationAffinityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReservationAffinity)(nil)).Elem()
}

func (o ReservationAffinityPtrOutput) ToReservationAffinityPtrOutput() ReservationAffinityPtrOutput {
	return o
}

func (o ReservationAffinityPtrOutput) ToReservationAffinityPtrOutputWithContext(ctx context.Context) ReservationAffinityPtrOutput {
	return o
}

func (o ReservationAffinityPtrOutput) Elem() ReservationAffinityOutput {
	return o.ApplyT(func(v *ReservationAffinity) ReservationAffinity { return *v }).(ReservationAffinityOutput)
}

// Corresponds to the type of reservation consumption.
func (o ReservationAffinityPtrOutput) ConsumeReservationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReservationAffinity) *string {
		if v == nil {
			return nil
		}
		return v.ConsumeReservationType
	}).(pulumi.StringPtrOutput)
}

// Corresponds to the label key of a reservation resource. To target a SPECIFIC_RESERVATION by name, specify "googleapis.com/reservation-name" as the key and specify the name of your reservation as its value.
func (o ReservationAffinityPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReservationAffinity) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Corresponds to the label value(s) of reservation resource(s).
func (o ReservationAffinityPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ReservationAffinity) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

// [ReservationAffinity](https://cloud.google.com/compute/docs/instances/reserving-zonal-resources) is the configuration of desired reservation which instances could take capacity from.
type ReservationAffinityResponse struct {
	// Corresponds to the type of reservation consumption.
	ConsumeReservationType string `pulumi:"consumeReservationType"`
	// Corresponds to the label key of a reservation resource. To target a SPECIFIC_RESERVATION by name, specify "googleapis.com/reservation-name" as the key and specify the name of your reservation as its value.
	Key string `pulumi:"key"`
	// Corresponds to the label value(s) of reservation resource(s).
	Values []string `pulumi:"values"`
}

// ReservationAffinityResponseInput is an input type that accepts ReservationAffinityResponseArgs and ReservationAffinityResponseOutput values.
// You can construct a concrete instance of `ReservationAffinityResponseInput` via:
//
//          ReservationAffinityResponseArgs{...}
type ReservationAffinityResponseInput interface {
	pulumi.Input

	ToReservationAffinityResponseOutput() ReservationAffinityResponseOutput
	ToReservationAffinityResponseOutputWithContext(context.Context) ReservationAffinityResponseOutput
}

// [ReservationAffinity](https://cloud.google.com/compute/docs/instances/reserving-zonal-resources) is the configuration of desired reservation which instances could take capacity from.
type ReservationAffinityResponseArgs struct {
	// Corresponds to the type of reservation consumption.
	ConsumeReservationType pulumi.StringInput `pulumi:"consumeReservationType"`
	// Corresponds to the label key of a reservation resource. To target a SPECIFIC_RESERVATION by name, specify "googleapis.com/reservation-name" as the key and specify the name of your reservation as its value.
	Key pulumi.StringInput `pulumi:"key"`
	// Corresponds to the label value(s) of reservation resource(s).
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ReservationAffinityResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReservationAffinityResponse)(nil)).Elem()
}

func (i ReservationAffinityResponseArgs) ToReservationAffinityResponseOutput() ReservationAffinityResponseOutput {
	return i.ToReservationAffinityResponseOutputWithContext(context.Background())
}

func (i ReservationAffinityResponseArgs) ToReservationAffinityResponseOutputWithContext(ctx context.Context) ReservationAffinityResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservationAffinityResponseOutput)
}

func (i ReservationAffinityResponseArgs) ToReservationAffinityResponsePtrOutput() ReservationAffinityResponsePtrOutput {
	return i.ToReservationAffinityResponsePtrOutputWithContext(context.Background())
}

func (i ReservationAffinityResponseArgs) ToReservationAffinityResponsePtrOutputWithContext(ctx context.Context) ReservationAffinityResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservationAffinityResponseOutput).ToReservationAffinityResponsePtrOutputWithContext(ctx)
}

// ReservationAffinityResponsePtrInput is an input type that accepts ReservationAffinityResponseArgs, ReservationAffinityResponsePtr and ReservationAffinityResponsePtrOutput values.
// You can construct a concrete instance of `ReservationAffinityResponsePtrInput` via:
//
//          ReservationAffinityResponseArgs{...}
//
//  or:
//
//          nil
type ReservationAffinityResponsePtrInput interface {
	pulumi.Input

	ToReservationAffinityResponsePtrOutput() ReservationAffinityResponsePtrOutput
	ToReservationAffinityResponsePtrOutputWithContext(context.Context) ReservationAffinityResponsePtrOutput
}

type reservationAffinityResponsePtrType ReservationAffinityResponseArgs

func ReservationAffinityResponsePtr(v *ReservationAffinityResponseArgs) ReservationAffinityResponsePtrInput {
	return (*reservationAffinityResponsePtrType)(v)
}

func (*reservationAffinityResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReservationAffinityResponse)(nil)).Elem()
}

func (i *reservationAffinityResponsePtrType) ToReservationAffinityResponsePtrOutput() ReservationAffinityResponsePtrOutput {
	return i.ToReservationAffinityResponsePtrOutputWithContext(context.Background())
}

func (i *reservationAffinityResponsePtrType) ToReservationAffinityResponsePtrOutputWithContext(ctx context.Context) ReservationAffinityResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservationAffinityResponsePtrOutput)
}

// [ReservationAffinity](https://cloud.google.com/compute/docs/instances/reserving-zonal-resources) is the configuration of desired reservation which instances could take capacity from.
type ReservationAffinityResponseOutput struct{ *pulumi.OutputState }

func (ReservationAffinityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReservationAffinityResponse)(nil)).Elem()
}

func (o ReservationAffinityResponseOutput) ToReservationAffinityResponseOutput() ReservationAffinityResponseOutput {
	return o
}

func (o ReservationAffinityResponseOutput) ToReservationAffinityResponseOutputWithContext(ctx context.Context) ReservationAffinityResponseOutput {
	return o
}

func (o ReservationAffinityResponseOutput) ToReservationAffinityResponsePtrOutput() ReservationAffinityResponsePtrOutput {
	return o.ToReservationAffinityResponsePtrOutputWithContext(context.Background())
}

func (o ReservationAffinityResponseOutput) ToReservationAffinityResponsePtrOutputWithContext(ctx context.Context) ReservationAffinityResponsePtrOutput {
	return o.ApplyT(func(v ReservationAffinityResponse) *ReservationAffinityResponse {
		return &v
	}).(ReservationAffinityResponsePtrOutput)
}

// Corresponds to the type of reservation consumption.
func (o ReservationAffinityResponseOutput) ConsumeReservationType() pulumi.StringOutput {
	return o.ApplyT(func(v ReservationAffinityResponse) string { return v.ConsumeReservationType }).(pulumi.StringOutput)
}

// Corresponds to the label key of a reservation resource. To target a SPECIFIC_RESERVATION by name, specify "googleapis.com/reservation-name" as the key and specify the name of your reservation as its value.
func (o ReservationAffinityResponseOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ReservationAffinityResponse) string { return v.Key }).(pulumi.StringOutput)
}

// Corresponds to the label value(s) of reservation resource(s).
func (o ReservationAffinityResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ReservationAffinityResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ReservationAffinityResponsePtrOutput struct{ *pulumi.OutputState }

func (ReservationAffinityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReservationAffinityResponse)(nil)).Elem()
}

func (o ReservationAffinityResponsePtrOutput) ToReservationAffinityResponsePtrOutput() ReservationAffinityResponsePtrOutput {
	return o
}

func (o ReservationAffinityResponsePtrOutput) ToReservationAffinityResponsePtrOutputWithContext(ctx context.Context) ReservationAffinityResponsePtrOutput {
	return o
}

func (o ReservationAffinityResponsePtrOutput) Elem() ReservationAffinityResponseOutput {
	return o.ApplyT(func(v *ReservationAffinityResponse) ReservationAffinityResponse { return *v }).(ReservationAffinityResponseOutput)
}

// Corresponds to the type of reservation consumption.
func (o ReservationAffinityResponsePtrOutput) ConsumeReservationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReservationAffinityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ConsumeReservationType
	}).(pulumi.StringPtrOutput)
}

// Corresponds to the label key of a reservation resource. To target a SPECIFIC_RESERVATION by name, specify "googleapis.com/reservation-name" as the key and specify the name of your reservation as its value.
func (o ReservationAffinityResponsePtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReservationAffinityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Corresponds to the label value(s) of reservation resource(s).
func (o ReservationAffinityResponsePtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ReservationAffinityResponse) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

// Contains information about amount of some resource in the cluster. For memory, value should be in GB.
type ResourceLimit struct {
	// Maximum amount of the resource in the cluster.
	Maximum *string `pulumi:"maximum"`
	// Minimum amount of the resource in the cluster.
	Minimum *string `pulumi:"minimum"`
	// Resource name "cpu", "memory" or gpu-specific string.
	ResourceType *string `pulumi:"resourceType"`
}

// ResourceLimitInput is an input type that accepts ResourceLimitArgs and ResourceLimitOutput values.
// You can construct a concrete instance of `ResourceLimitInput` via:
//
//          ResourceLimitArgs{...}
type ResourceLimitInput interface {
	pulumi.Input

	ToResourceLimitOutput() ResourceLimitOutput
	ToResourceLimitOutputWithContext(context.Context) ResourceLimitOutput
}

// Contains information about amount of some resource in the cluster. For memory, value should be in GB.
type ResourceLimitArgs struct {
	// Maximum amount of the resource in the cluster.
	Maximum pulumi.StringPtrInput `pulumi:"maximum"`
	// Minimum amount of the resource in the cluster.
	Minimum pulumi.StringPtrInput `pulumi:"minimum"`
	// Resource name "cpu", "memory" or gpu-specific string.
	ResourceType pulumi.StringPtrInput `pulumi:"resourceType"`
}

func (ResourceLimitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLimit)(nil)).Elem()
}

func (i ResourceLimitArgs) ToResourceLimitOutput() ResourceLimitOutput {
	return i.ToResourceLimitOutputWithContext(context.Background())
}

func (i ResourceLimitArgs) ToResourceLimitOutputWithContext(ctx context.Context) ResourceLimitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLimitOutput)
}

// ResourceLimitArrayInput is an input type that accepts ResourceLimitArray and ResourceLimitArrayOutput values.
// You can construct a concrete instance of `ResourceLimitArrayInput` via:
//
//          ResourceLimitArray{ ResourceLimitArgs{...} }
type ResourceLimitArrayInput interface {
	pulumi.Input

	ToResourceLimitArrayOutput() ResourceLimitArrayOutput
	ToResourceLimitArrayOutputWithContext(context.Context) ResourceLimitArrayOutput
}

type ResourceLimitArray []ResourceLimitInput

func (ResourceLimitArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceLimit)(nil)).Elem()
}

func (i ResourceLimitArray) ToResourceLimitArrayOutput() ResourceLimitArrayOutput {
	return i.ToResourceLimitArrayOutputWithContext(context.Background())
}

func (i ResourceLimitArray) ToResourceLimitArrayOutputWithContext(ctx context.Context) ResourceLimitArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLimitArrayOutput)
}

// Contains information about amount of some resource in the cluster. For memory, value should be in GB.
type ResourceLimitOutput struct{ *pulumi.OutputState }

func (ResourceLimitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLimit)(nil)).Elem()
}

func (o ResourceLimitOutput) ToResourceLimitOutput() ResourceLimitOutput {
	return o
}

func (o ResourceLimitOutput) ToResourceLimitOutputWithContext(ctx context.Context) ResourceLimitOutput {
	return o
}

// Maximum amount of the resource in the cluster.
func (o ResourceLimitOutput) Maximum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceLimit) *string { return v.Maximum }).(pulumi.StringPtrOutput)
}

// Minimum amount of the resource in the cluster.
func (o ResourceLimitOutput) Minimum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceLimit) *string { return v.Minimum }).(pulumi.StringPtrOutput)
}

// Resource name "cpu", "memory" or gpu-specific string.
func (o ResourceLimitOutput) ResourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceLimit) *string { return v.ResourceType }).(pulumi.StringPtrOutput)
}

type ResourceLimitArrayOutput struct{ *pulumi.OutputState }

func (ResourceLimitArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceLimit)(nil)).Elem()
}

func (o ResourceLimitArrayOutput) ToResourceLimitArrayOutput() ResourceLimitArrayOutput {
	return o
}

func (o ResourceLimitArrayOutput) ToResourceLimitArrayOutputWithContext(ctx context.Context) ResourceLimitArrayOutput {
	return o
}

func (o ResourceLimitArrayOutput) Index(i pulumi.IntInput) ResourceLimitOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceLimit {
		return vs[0].([]ResourceLimit)[vs[1].(int)]
	}).(ResourceLimitOutput)
}

// Contains information about amount of some resource in the cluster. For memory, value should be in GB.
type ResourceLimitResponse struct {
	// Maximum amount of the resource in the cluster.
	Maximum string `pulumi:"maximum"`
	// Minimum amount of the resource in the cluster.
	Minimum string `pulumi:"minimum"`
	// Resource name "cpu", "memory" or gpu-specific string.
	ResourceType string `pulumi:"resourceType"`
}

// ResourceLimitResponseInput is an input type that accepts ResourceLimitResponseArgs and ResourceLimitResponseOutput values.
// You can construct a concrete instance of `ResourceLimitResponseInput` via:
//
//          ResourceLimitResponseArgs{...}
type ResourceLimitResponseInput interface {
	pulumi.Input

	ToResourceLimitResponseOutput() ResourceLimitResponseOutput
	ToResourceLimitResponseOutputWithContext(context.Context) ResourceLimitResponseOutput
}

// Contains information about amount of some resource in the cluster. For memory, value should be in GB.
type ResourceLimitResponseArgs struct {
	// Maximum amount of the resource in the cluster.
	Maximum pulumi.StringInput `pulumi:"maximum"`
	// Minimum amount of the resource in the cluster.
	Minimum pulumi.StringInput `pulumi:"minimum"`
	// Resource name "cpu", "memory" or gpu-specific string.
	ResourceType pulumi.StringInput `pulumi:"resourceType"`
}

func (ResourceLimitResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLimitResponse)(nil)).Elem()
}

func (i ResourceLimitResponseArgs) ToResourceLimitResponseOutput() ResourceLimitResponseOutput {
	return i.ToResourceLimitResponseOutputWithContext(context.Background())
}

func (i ResourceLimitResponseArgs) ToResourceLimitResponseOutputWithContext(ctx context.Context) ResourceLimitResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLimitResponseOutput)
}

// ResourceLimitResponseArrayInput is an input type that accepts ResourceLimitResponseArray and ResourceLimitResponseArrayOutput values.
// You can construct a concrete instance of `ResourceLimitResponseArrayInput` via:
//
//          ResourceLimitResponseArray{ ResourceLimitResponseArgs{...} }
type ResourceLimitResponseArrayInput interface {
	pulumi.Input

	ToResourceLimitResponseArrayOutput() ResourceLimitResponseArrayOutput
	ToResourceLimitResponseArrayOutputWithContext(context.Context) ResourceLimitResponseArrayOutput
}

type ResourceLimitResponseArray []ResourceLimitResponseInput

func (ResourceLimitResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceLimitResponse)(nil)).Elem()
}

func (i ResourceLimitResponseArray) ToResourceLimitResponseArrayOutput() ResourceLimitResponseArrayOutput {
	return i.ToResourceLimitResponseArrayOutputWithContext(context.Background())
}

func (i ResourceLimitResponseArray) ToResourceLimitResponseArrayOutputWithContext(ctx context.Context) ResourceLimitResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLimitResponseArrayOutput)
}

// Contains information about amount of some resource in the cluster. For memory, value should be in GB.
type ResourceLimitResponseOutput struct{ *pulumi.OutputState }

func (ResourceLimitResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLimitResponse)(nil)).Elem()
}

func (o ResourceLimitResponseOutput) ToResourceLimitResponseOutput() ResourceLimitResponseOutput {
	return o
}

func (o ResourceLimitResponseOutput) ToResourceLimitResponseOutputWithContext(ctx context.Context) ResourceLimitResponseOutput {
	return o
}

// Maximum amount of the resource in the cluster.
func (o ResourceLimitResponseOutput) Maximum() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceLimitResponse) string { return v.Maximum }).(pulumi.StringOutput)
}

// Minimum amount of the resource in the cluster.
func (o ResourceLimitResponseOutput) Minimum() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceLimitResponse) string { return v.Minimum }).(pulumi.StringOutput)
}

// Resource name "cpu", "memory" or gpu-specific string.
func (o ResourceLimitResponseOutput) ResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceLimitResponse) string { return v.ResourceType }).(pulumi.StringOutput)
}

type ResourceLimitResponseArrayOutput struct{ *pulumi.OutputState }

func (ResourceLimitResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceLimitResponse)(nil)).Elem()
}

func (o ResourceLimitResponseArrayOutput) ToResourceLimitResponseArrayOutput() ResourceLimitResponseArrayOutput {
	return o
}

func (o ResourceLimitResponseArrayOutput) ToResourceLimitResponseArrayOutputWithContext(ctx context.Context) ResourceLimitResponseArrayOutput {
	return o
}

func (o ResourceLimitResponseArrayOutput) Index(i pulumi.IntInput) ResourceLimitResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceLimitResponse {
		return vs[0].([]ResourceLimitResponse)[vs[1].(int)]
	}).(ResourceLimitResponseOutput)
}

// Configuration for exporting cluster resource usages.
type ResourceUsageExportConfig struct {
	// Configuration to use BigQuery as usage export destination.
	BigqueryDestination *BigQueryDestination `pulumi:"bigqueryDestination"`
	// Configuration to enable resource consumption metering.
	ConsumptionMeteringConfig *ConsumptionMeteringConfig `pulumi:"consumptionMeteringConfig"`
	// Whether to enable network egress metering for this cluster. If enabled, a daemonset will be created in the cluster to meter network egress traffic.
	EnableNetworkEgressMetering *bool `pulumi:"enableNetworkEgressMetering"`
}

// ResourceUsageExportConfigInput is an input type that accepts ResourceUsageExportConfigArgs and ResourceUsageExportConfigOutput values.
// You can construct a concrete instance of `ResourceUsageExportConfigInput` via:
//
//          ResourceUsageExportConfigArgs{...}
type ResourceUsageExportConfigInput interface {
	pulumi.Input

	ToResourceUsageExportConfigOutput() ResourceUsageExportConfigOutput
	ToResourceUsageExportConfigOutputWithContext(context.Context) ResourceUsageExportConfigOutput
}

// Configuration for exporting cluster resource usages.
type ResourceUsageExportConfigArgs struct {
	// Configuration to use BigQuery as usage export destination.
	BigqueryDestination BigQueryDestinationPtrInput `pulumi:"bigqueryDestination"`
	// Configuration to enable resource consumption metering.
	ConsumptionMeteringConfig ConsumptionMeteringConfigPtrInput `pulumi:"consumptionMeteringConfig"`
	// Whether to enable network egress metering for this cluster. If enabled, a daemonset will be created in the cluster to meter network egress traffic.
	EnableNetworkEgressMetering pulumi.BoolPtrInput `pulumi:"enableNetworkEgressMetering"`
}

func (ResourceUsageExportConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceUsageExportConfig)(nil)).Elem()
}

func (i ResourceUsageExportConfigArgs) ToResourceUsageExportConfigOutput() ResourceUsageExportConfigOutput {
	return i.ToResourceUsageExportConfigOutputWithContext(context.Background())
}

func (i ResourceUsageExportConfigArgs) ToResourceUsageExportConfigOutputWithContext(ctx context.Context) ResourceUsageExportConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceUsageExportConfigOutput)
}

func (i ResourceUsageExportConfigArgs) ToResourceUsageExportConfigPtrOutput() ResourceUsageExportConfigPtrOutput {
	return i.ToResourceUsageExportConfigPtrOutputWithContext(context.Background())
}

func (i ResourceUsageExportConfigArgs) ToResourceUsageExportConfigPtrOutputWithContext(ctx context.Context) ResourceUsageExportConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceUsageExportConfigOutput).ToResourceUsageExportConfigPtrOutputWithContext(ctx)
}

// ResourceUsageExportConfigPtrInput is an input type that accepts ResourceUsageExportConfigArgs, ResourceUsageExportConfigPtr and ResourceUsageExportConfigPtrOutput values.
// You can construct a concrete instance of `ResourceUsageExportConfigPtrInput` via:
//
//          ResourceUsageExportConfigArgs{...}
//
//  or:
//
//          nil
type ResourceUsageExportConfigPtrInput interface {
	pulumi.Input

	ToResourceUsageExportConfigPtrOutput() ResourceUsageExportConfigPtrOutput
	ToResourceUsageExportConfigPtrOutputWithContext(context.Context) ResourceUsageExportConfigPtrOutput
}

type resourceUsageExportConfigPtrType ResourceUsageExportConfigArgs

func ResourceUsageExportConfigPtr(v *ResourceUsageExportConfigArgs) ResourceUsageExportConfigPtrInput {
	return (*resourceUsageExportConfigPtrType)(v)
}

func (*resourceUsageExportConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceUsageExportConfig)(nil)).Elem()
}

func (i *resourceUsageExportConfigPtrType) ToResourceUsageExportConfigPtrOutput() ResourceUsageExportConfigPtrOutput {
	return i.ToResourceUsageExportConfigPtrOutputWithContext(context.Background())
}

func (i *resourceUsageExportConfigPtrType) ToResourceUsageExportConfigPtrOutputWithContext(ctx context.Context) ResourceUsageExportConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceUsageExportConfigPtrOutput)
}

// Configuration for exporting cluster resource usages.
type ResourceUsageExportConfigOutput struct{ *pulumi.OutputState }

func (ResourceUsageExportConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceUsageExportConfig)(nil)).Elem()
}

func (o ResourceUsageExportConfigOutput) ToResourceUsageExportConfigOutput() ResourceUsageExportConfigOutput {
	return o
}

func (o ResourceUsageExportConfigOutput) ToResourceUsageExportConfigOutputWithContext(ctx context.Context) ResourceUsageExportConfigOutput {
	return o
}

func (o ResourceUsageExportConfigOutput) ToResourceUsageExportConfigPtrOutput() ResourceUsageExportConfigPtrOutput {
	return o.ToResourceUsageExportConfigPtrOutputWithContext(context.Background())
}

func (o ResourceUsageExportConfigOutput) ToResourceUsageExportConfigPtrOutputWithContext(ctx context.Context) ResourceUsageExportConfigPtrOutput {
	return o.ApplyT(func(v ResourceUsageExportConfig) *ResourceUsageExportConfig {
		return &v
	}).(ResourceUsageExportConfigPtrOutput)
}

// Configuration to use BigQuery as usage export destination.
func (o ResourceUsageExportConfigOutput) BigqueryDestination() BigQueryDestinationPtrOutput {
	return o.ApplyT(func(v ResourceUsageExportConfig) *BigQueryDestination { return v.BigqueryDestination }).(BigQueryDestinationPtrOutput)
}

// Configuration to enable resource consumption metering.
func (o ResourceUsageExportConfigOutput) ConsumptionMeteringConfig() ConsumptionMeteringConfigPtrOutput {
	return o.ApplyT(func(v ResourceUsageExportConfig) *ConsumptionMeteringConfig { return v.ConsumptionMeteringConfig }).(ConsumptionMeteringConfigPtrOutput)
}

// Whether to enable network egress metering for this cluster. If enabled, a daemonset will be created in the cluster to meter network egress traffic.
func (o ResourceUsageExportConfigOutput) EnableNetworkEgressMetering() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceUsageExportConfig) *bool { return v.EnableNetworkEgressMetering }).(pulumi.BoolPtrOutput)
}

type ResourceUsageExportConfigPtrOutput struct{ *pulumi.OutputState }

func (ResourceUsageExportConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceUsageExportConfig)(nil)).Elem()
}

func (o ResourceUsageExportConfigPtrOutput) ToResourceUsageExportConfigPtrOutput() ResourceUsageExportConfigPtrOutput {
	return o
}

func (o ResourceUsageExportConfigPtrOutput) ToResourceUsageExportConfigPtrOutputWithContext(ctx context.Context) ResourceUsageExportConfigPtrOutput {
	return o
}

func (o ResourceUsageExportConfigPtrOutput) Elem() ResourceUsageExportConfigOutput {
	return o.ApplyT(func(v *ResourceUsageExportConfig) ResourceUsageExportConfig { return *v }).(ResourceUsageExportConfigOutput)
}

// Configuration to use BigQuery as usage export destination.
func (o ResourceUsageExportConfigPtrOutput) BigqueryDestination() BigQueryDestinationPtrOutput {
	return o.ApplyT(func(v *ResourceUsageExportConfig) *BigQueryDestination {
		if v == nil {
			return nil
		}
		return v.BigqueryDestination
	}).(BigQueryDestinationPtrOutput)
}

// Configuration to enable resource consumption metering.
func (o ResourceUsageExportConfigPtrOutput) ConsumptionMeteringConfig() ConsumptionMeteringConfigPtrOutput {
	return o.ApplyT(func(v *ResourceUsageExportConfig) *ConsumptionMeteringConfig {
		if v == nil {
			return nil
		}
		return v.ConsumptionMeteringConfig
	}).(ConsumptionMeteringConfigPtrOutput)
}

// Whether to enable network egress metering for this cluster. If enabled, a daemonset will be created in the cluster to meter network egress traffic.
func (o ResourceUsageExportConfigPtrOutput) EnableNetworkEgressMetering() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceUsageExportConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableNetworkEgressMetering
	}).(pulumi.BoolPtrOutput)
}

// Configuration for exporting cluster resource usages.
type ResourceUsageExportConfigResponse struct {
	// Configuration to use BigQuery as usage export destination.
	BigqueryDestination BigQueryDestinationResponse `pulumi:"bigqueryDestination"`
	// Configuration to enable resource consumption metering.
	ConsumptionMeteringConfig ConsumptionMeteringConfigResponse `pulumi:"consumptionMeteringConfig"`
	// Whether to enable network egress metering for this cluster. If enabled, a daemonset will be created in the cluster to meter network egress traffic.
	EnableNetworkEgressMetering bool `pulumi:"enableNetworkEgressMetering"`
}

// ResourceUsageExportConfigResponseInput is an input type that accepts ResourceUsageExportConfigResponseArgs and ResourceUsageExportConfigResponseOutput values.
// You can construct a concrete instance of `ResourceUsageExportConfigResponseInput` via:
//
//          ResourceUsageExportConfigResponseArgs{...}
type ResourceUsageExportConfigResponseInput interface {
	pulumi.Input

	ToResourceUsageExportConfigResponseOutput() ResourceUsageExportConfigResponseOutput
	ToResourceUsageExportConfigResponseOutputWithContext(context.Context) ResourceUsageExportConfigResponseOutput
}

// Configuration for exporting cluster resource usages.
type ResourceUsageExportConfigResponseArgs struct {
	// Configuration to use BigQuery as usage export destination.
	BigqueryDestination BigQueryDestinationResponseInput `pulumi:"bigqueryDestination"`
	// Configuration to enable resource consumption metering.
	ConsumptionMeteringConfig ConsumptionMeteringConfigResponseInput `pulumi:"consumptionMeteringConfig"`
	// Whether to enable network egress metering for this cluster. If enabled, a daemonset will be created in the cluster to meter network egress traffic.
	EnableNetworkEgressMetering pulumi.BoolInput `pulumi:"enableNetworkEgressMetering"`
}

func (ResourceUsageExportConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceUsageExportConfigResponse)(nil)).Elem()
}

func (i ResourceUsageExportConfigResponseArgs) ToResourceUsageExportConfigResponseOutput() ResourceUsageExportConfigResponseOutput {
	return i.ToResourceUsageExportConfigResponseOutputWithContext(context.Background())
}

func (i ResourceUsageExportConfigResponseArgs) ToResourceUsageExportConfigResponseOutputWithContext(ctx context.Context) ResourceUsageExportConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceUsageExportConfigResponseOutput)
}

func (i ResourceUsageExportConfigResponseArgs) ToResourceUsageExportConfigResponsePtrOutput() ResourceUsageExportConfigResponsePtrOutput {
	return i.ToResourceUsageExportConfigResponsePtrOutputWithContext(context.Background())
}

func (i ResourceUsageExportConfigResponseArgs) ToResourceUsageExportConfigResponsePtrOutputWithContext(ctx context.Context) ResourceUsageExportConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceUsageExportConfigResponseOutput).ToResourceUsageExportConfigResponsePtrOutputWithContext(ctx)
}

// ResourceUsageExportConfigResponsePtrInput is an input type that accepts ResourceUsageExportConfigResponseArgs, ResourceUsageExportConfigResponsePtr and ResourceUsageExportConfigResponsePtrOutput values.
// You can construct a concrete instance of `ResourceUsageExportConfigResponsePtrInput` via:
//
//          ResourceUsageExportConfigResponseArgs{...}
//
//  or:
//
//          nil
type ResourceUsageExportConfigResponsePtrInput interface {
	pulumi.Input

	ToResourceUsageExportConfigResponsePtrOutput() ResourceUsageExportConfigResponsePtrOutput
	ToResourceUsageExportConfigResponsePtrOutputWithContext(context.Context) ResourceUsageExportConfigResponsePtrOutput
}

type resourceUsageExportConfigResponsePtrType ResourceUsageExportConfigResponseArgs

func ResourceUsageExportConfigResponsePtr(v *ResourceUsageExportConfigResponseArgs) ResourceUsageExportConfigResponsePtrInput {
	return (*resourceUsageExportConfigResponsePtrType)(v)
}

func (*resourceUsageExportConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceUsageExportConfigResponse)(nil)).Elem()
}

func (i *resourceUsageExportConfigResponsePtrType) ToResourceUsageExportConfigResponsePtrOutput() ResourceUsageExportConfigResponsePtrOutput {
	return i.ToResourceUsageExportConfigResponsePtrOutputWithContext(context.Background())
}

func (i *resourceUsageExportConfigResponsePtrType) ToResourceUsageExportConfigResponsePtrOutputWithContext(ctx context.Context) ResourceUsageExportConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceUsageExportConfigResponsePtrOutput)
}

// Configuration for exporting cluster resource usages.
type ResourceUsageExportConfigResponseOutput struct{ *pulumi.OutputState }

func (ResourceUsageExportConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceUsageExportConfigResponse)(nil)).Elem()
}

func (o ResourceUsageExportConfigResponseOutput) ToResourceUsageExportConfigResponseOutput() ResourceUsageExportConfigResponseOutput {
	return o
}

func (o ResourceUsageExportConfigResponseOutput) ToResourceUsageExportConfigResponseOutputWithContext(ctx context.Context) ResourceUsageExportConfigResponseOutput {
	return o
}

func (o ResourceUsageExportConfigResponseOutput) ToResourceUsageExportConfigResponsePtrOutput() ResourceUsageExportConfigResponsePtrOutput {
	return o.ToResourceUsageExportConfigResponsePtrOutputWithContext(context.Background())
}

func (o ResourceUsageExportConfigResponseOutput) ToResourceUsageExportConfigResponsePtrOutputWithContext(ctx context.Context) ResourceUsageExportConfigResponsePtrOutput {
	return o.ApplyT(func(v ResourceUsageExportConfigResponse) *ResourceUsageExportConfigResponse {
		return &v
	}).(ResourceUsageExportConfigResponsePtrOutput)
}

// Configuration to use BigQuery as usage export destination.
func (o ResourceUsageExportConfigResponseOutput) BigqueryDestination() BigQueryDestinationResponseOutput {
	return o.ApplyT(func(v ResourceUsageExportConfigResponse) BigQueryDestinationResponse { return v.BigqueryDestination }).(BigQueryDestinationResponseOutput)
}

// Configuration to enable resource consumption metering.
func (o ResourceUsageExportConfigResponseOutput) ConsumptionMeteringConfig() ConsumptionMeteringConfigResponseOutput {
	return o.ApplyT(func(v ResourceUsageExportConfigResponse) ConsumptionMeteringConfigResponse {
		return v.ConsumptionMeteringConfig
	}).(ConsumptionMeteringConfigResponseOutput)
}

// Whether to enable network egress metering for this cluster. If enabled, a daemonset will be created in the cluster to meter network egress traffic.
func (o ResourceUsageExportConfigResponseOutput) EnableNetworkEgressMetering() pulumi.BoolOutput {
	return o.ApplyT(func(v ResourceUsageExportConfigResponse) bool { return v.EnableNetworkEgressMetering }).(pulumi.BoolOutput)
}

type ResourceUsageExportConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (ResourceUsageExportConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceUsageExportConfigResponse)(nil)).Elem()
}

func (o ResourceUsageExportConfigResponsePtrOutput) ToResourceUsageExportConfigResponsePtrOutput() ResourceUsageExportConfigResponsePtrOutput {
	return o
}

func (o ResourceUsageExportConfigResponsePtrOutput) ToResourceUsageExportConfigResponsePtrOutputWithContext(ctx context.Context) ResourceUsageExportConfigResponsePtrOutput {
	return o
}

func (o ResourceUsageExportConfigResponsePtrOutput) Elem() ResourceUsageExportConfigResponseOutput {
	return o.ApplyT(func(v *ResourceUsageExportConfigResponse) ResourceUsageExportConfigResponse { return *v }).(ResourceUsageExportConfigResponseOutput)
}

// Configuration to use BigQuery as usage export destination.
func (o ResourceUsageExportConfigResponsePtrOutput) BigqueryDestination() BigQueryDestinationResponsePtrOutput {
	return o.ApplyT(func(v *ResourceUsageExportConfigResponse) *BigQueryDestinationResponse {
		if v == nil {
			return nil
		}
		return &v.BigqueryDestination
	}).(BigQueryDestinationResponsePtrOutput)
}

// Configuration to enable resource consumption metering.
func (o ResourceUsageExportConfigResponsePtrOutput) ConsumptionMeteringConfig() ConsumptionMeteringConfigResponsePtrOutput {
	return o.ApplyT(func(v *ResourceUsageExportConfigResponse) *ConsumptionMeteringConfigResponse {
		if v == nil {
			return nil
		}
		return &v.ConsumptionMeteringConfig
	}).(ConsumptionMeteringConfigResponsePtrOutput)
}

// Whether to enable network egress metering for this cluster. If enabled, a daemonset will be created in the cluster to meter network egress traffic.
func (o ResourceUsageExportConfigResponsePtrOutput) EnableNetworkEgressMetering() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceUsageExportConfigResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.EnableNetworkEgressMetering
	}).(pulumi.BoolPtrOutput)
}

// SandboxConfig contains configurations of the sandbox to use for the node.
type SandboxConfig struct {
	// Type of the sandbox to use for the node.
	Type *string `pulumi:"type"`
}

// SandboxConfigInput is an input type that accepts SandboxConfigArgs and SandboxConfigOutput values.
// You can construct a concrete instance of `SandboxConfigInput` via:
//
//          SandboxConfigArgs{...}
type SandboxConfigInput interface {
	pulumi.Input

	ToSandboxConfigOutput() SandboxConfigOutput
	ToSandboxConfigOutputWithContext(context.Context) SandboxConfigOutput
}

// SandboxConfig contains configurations of the sandbox to use for the node.
type SandboxConfigArgs struct {
	// Type of the sandbox to use for the node.
	Type *SandboxConfigType `pulumi:"type"`
}

func (SandboxConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SandboxConfig)(nil)).Elem()
}

func (i SandboxConfigArgs) ToSandboxConfigOutput() SandboxConfigOutput {
	return i.ToSandboxConfigOutputWithContext(context.Background())
}

func (i SandboxConfigArgs) ToSandboxConfigOutputWithContext(ctx context.Context) SandboxConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SandboxConfigOutput)
}

func (i SandboxConfigArgs) ToSandboxConfigPtrOutput() SandboxConfigPtrOutput {
	return i.ToSandboxConfigPtrOutputWithContext(context.Background())
}

func (i SandboxConfigArgs) ToSandboxConfigPtrOutputWithContext(ctx context.Context) SandboxConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SandboxConfigOutput).ToSandboxConfigPtrOutputWithContext(ctx)
}

// SandboxConfigPtrInput is an input type that accepts SandboxConfigArgs, SandboxConfigPtr and SandboxConfigPtrOutput values.
// You can construct a concrete instance of `SandboxConfigPtrInput` via:
//
//          SandboxConfigArgs{...}
//
//  or:
//
//          nil
type SandboxConfigPtrInput interface {
	pulumi.Input

	ToSandboxConfigPtrOutput() SandboxConfigPtrOutput
	ToSandboxConfigPtrOutputWithContext(context.Context) SandboxConfigPtrOutput
}

type sandboxConfigPtrType SandboxConfigArgs

func SandboxConfigPtr(v *SandboxConfigArgs) SandboxConfigPtrInput {
	return (*sandboxConfigPtrType)(v)
}

func (*sandboxConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SandboxConfig)(nil)).Elem()
}

func (i *sandboxConfigPtrType) ToSandboxConfigPtrOutput() SandboxConfigPtrOutput {
	return i.ToSandboxConfigPtrOutputWithContext(context.Background())
}

func (i *sandboxConfigPtrType) ToSandboxConfigPtrOutputWithContext(ctx context.Context) SandboxConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SandboxConfigPtrOutput)
}

// SandboxConfig contains configurations of the sandbox to use for the node.
type SandboxConfigOutput struct{ *pulumi.OutputState }

func (SandboxConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SandboxConfig)(nil)).Elem()
}

func (o SandboxConfigOutput) ToSandboxConfigOutput() SandboxConfigOutput {
	return o
}

func (o SandboxConfigOutput) ToSandboxConfigOutputWithContext(ctx context.Context) SandboxConfigOutput {
	return o
}

func (o SandboxConfigOutput) ToSandboxConfigPtrOutput() SandboxConfigPtrOutput {
	return o.ToSandboxConfigPtrOutputWithContext(context.Background())
}

func (o SandboxConfigOutput) ToSandboxConfigPtrOutputWithContext(ctx context.Context) SandboxConfigPtrOutput {
	return o.ApplyT(func(v SandboxConfig) *SandboxConfig {
		return &v
	}).(SandboxConfigPtrOutput)
}

// Type of the sandbox to use for the node.
func (o SandboxConfigOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SandboxConfig) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type SandboxConfigPtrOutput struct{ *pulumi.OutputState }

func (SandboxConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SandboxConfig)(nil)).Elem()
}

func (o SandboxConfigPtrOutput) ToSandboxConfigPtrOutput() SandboxConfigPtrOutput {
	return o
}

func (o SandboxConfigPtrOutput) ToSandboxConfigPtrOutputWithContext(ctx context.Context) SandboxConfigPtrOutput {
	return o
}

func (o SandboxConfigPtrOutput) Elem() SandboxConfigOutput {
	return o.ApplyT(func(v *SandboxConfig) SandboxConfig { return *v }).(SandboxConfigOutput)
}

// Type of the sandbox to use for the node.
func (o SandboxConfigPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SandboxConfig) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// SandboxConfig contains configurations of the sandbox to use for the node.
type SandboxConfigResponse struct {
	// Type of the sandbox to use for the node.
	Type string `pulumi:"type"`
}

// SandboxConfigResponseInput is an input type that accepts SandboxConfigResponseArgs and SandboxConfigResponseOutput values.
// You can construct a concrete instance of `SandboxConfigResponseInput` via:
//
//          SandboxConfigResponseArgs{...}
type SandboxConfigResponseInput interface {
	pulumi.Input

	ToSandboxConfigResponseOutput() SandboxConfigResponseOutput
	ToSandboxConfigResponseOutputWithContext(context.Context) SandboxConfigResponseOutput
}

// SandboxConfig contains configurations of the sandbox to use for the node.
type SandboxConfigResponseArgs struct {
	// Type of the sandbox to use for the node.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SandboxConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SandboxConfigResponse)(nil)).Elem()
}

func (i SandboxConfigResponseArgs) ToSandboxConfigResponseOutput() SandboxConfigResponseOutput {
	return i.ToSandboxConfigResponseOutputWithContext(context.Background())
}

func (i SandboxConfigResponseArgs) ToSandboxConfigResponseOutputWithContext(ctx context.Context) SandboxConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SandboxConfigResponseOutput)
}

func (i SandboxConfigResponseArgs) ToSandboxConfigResponsePtrOutput() SandboxConfigResponsePtrOutput {
	return i.ToSandboxConfigResponsePtrOutputWithContext(context.Background())
}

func (i SandboxConfigResponseArgs) ToSandboxConfigResponsePtrOutputWithContext(ctx context.Context) SandboxConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SandboxConfigResponseOutput).ToSandboxConfigResponsePtrOutputWithContext(ctx)
}

// SandboxConfigResponsePtrInput is an input type that accepts SandboxConfigResponseArgs, SandboxConfigResponsePtr and SandboxConfigResponsePtrOutput values.
// You can construct a concrete instance of `SandboxConfigResponsePtrInput` via:
//
//          SandboxConfigResponseArgs{...}
//
//  or:
//
//          nil
type SandboxConfigResponsePtrInput interface {
	pulumi.Input

	ToSandboxConfigResponsePtrOutput() SandboxConfigResponsePtrOutput
	ToSandboxConfigResponsePtrOutputWithContext(context.Context) SandboxConfigResponsePtrOutput
}

type sandboxConfigResponsePtrType SandboxConfigResponseArgs

func SandboxConfigResponsePtr(v *SandboxConfigResponseArgs) SandboxConfigResponsePtrInput {
	return (*sandboxConfigResponsePtrType)(v)
}

func (*sandboxConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SandboxConfigResponse)(nil)).Elem()
}

func (i *sandboxConfigResponsePtrType) ToSandboxConfigResponsePtrOutput() SandboxConfigResponsePtrOutput {
	return i.ToSandboxConfigResponsePtrOutputWithContext(context.Background())
}

func (i *sandboxConfigResponsePtrType) ToSandboxConfigResponsePtrOutputWithContext(ctx context.Context) SandboxConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SandboxConfigResponsePtrOutput)
}

// SandboxConfig contains configurations of the sandbox to use for the node.
type SandboxConfigResponseOutput struct{ *pulumi.OutputState }

func (SandboxConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SandboxConfigResponse)(nil)).Elem()
}

func (o SandboxConfigResponseOutput) ToSandboxConfigResponseOutput() SandboxConfigResponseOutput {
	return o
}

func (o SandboxConfigResponseOutput) ToSandboxConfigResponseOutputWithContext(ctx context.Context) SandboxConfigResponseOutput {
	return o
}

func (o SandboxConfigResponseOutput) ToSandboxConfigResponsePtrOutput() SandboxConfigResponsePtrOutput {
	return o.ToSandboxConfigResponsePtrOutputWithContext(context.Background())
}

func (o SandboxConfigResponseOutput) ToSandboxConfigResponsePtrOutputWithContext(ctx context.Context) SandboxConfigResponsePtrOutput {
	return o.ApplyT(func(v SandboxConfigResponse) *SandboxConfigResponse {
		return &v
	}).(SandboxConfigResponsePtrOutput)
}

// Type of the sandbox to use for the node.
func (o SandboxConfigResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SandboxConfigResponse) string { return v.Type }).(pulumi.StringOutput)
}

type SandboxConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (SandboxConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SandboxConfigResponse)(nil)).Elem()
}

func (o SandboxConfigResponsePtrOutput) ToSandboxConfigResponsePtrOutput() SandboxConfigResponsePtrOutput {
	return o
}

func (o SandboxConfigResponsePtrOutput) ToSandboxConfigResponsePtrOutputWithContext(ctx context.Context) SandboxConfigResponsePtrOutput {
	return o
}

func (o SandboxConfigResponsePtrOutput) Elem() SandboxConfigResponseOutput {
	return o.ApplyT(func(v *SandboxConfigResponse) SandboxConfigResponse { return *v }).(SandboxConfigResponseOutput)
}

// Type of the sandbox to use for the node.
func (o SandboxConfigResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SandboxConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// A set of Shielded Instance options.
type ShieldedInstanceConfig struct {
	// Defines whether the instance has integrity monitoring enabled. Enables monitoring and attestation of the boot integrity of the instance. The attestation is performed against the integrity policy baseline. This baseline is initially derived from the implicitly trusted boot image when the instance is created.
	EnableIntegrityMonitoring *bool `pulumi:"enableIntegrityMonitoring"`
	// Defines whether the instance has Secure Boot enabled. Secure Boot helps ensure that the system only runs authentic software by verifying the digital signature of all boot components, and halting the boot process if signature verification fails.
	EnableSecureBoot *bool `pulumi:"enableSecureBoot"`
}

// ShieldedInstanceConfigInput is an input type that accepts ShieldedInstanceConfigArgs and ShieldedInstanceConfigOutput values.
// You can construct a concrete instance of `ShieldedInstanceConfigInput` via:
//
//          ShieldedInstanceConfigArgs{...}
type ShieldedInstanceConfigInput interface {
	pulumi.Input

	ToShieldedInstanceConfigOutput() ShieldedInstanceConfigOutput
	ToShieldedInstanceConfigOutputWithContext(context.Context) ShieldedInstanceConfigOutput
}

// A set of Shielded Instance options.
type ShieldedInstanceConfigArgs struct {
	// Defines whether the instance has integrity monitoring enabled. Enables monitoring and attestation of the boot integrity of the instance. The attestation is performed against the integrity policy baseline. This baseline is initially derived from the implicitly trusted boot image when the instance is created.
	EnableIntegrityMonitoring pulumi.BoolPtrInput `pulumi:"enableIntegrityMonitoring"`
	// Defines whether the instance has Secure Boot enabled. Secure Boot helps ensure that the system only runs authentic software by verifying the digital signature of all boot components, and halting the boot process if signature verification fails.
	EnableSecureBoot pulumi.BoolPtrInput `pulumi:"enableSecureBoot"`
}

func (ShieldedInstanceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ShieldedInstanceConfig)(nil)).Elem()
}

func (i ShieldedInstanceConfigArgs) ToShieldedInstanceConfigOutput() ShieldedInstanceConfigOutput {
	return i.ToShieldedInstanceConfigOutputWithContext(context.Background())
}

func (i ShieldedInstanceConfigArgs) ToShieldedInstanceConfigOutputWithContext(ctx context.Context) ShieldedInstanceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShieldedInstanceConfigOutput)
}

func (i ShieldedInstanceConfigArgs) ToShieldedInstanceConfigPtrOutput() ShieldedInstanceConfigPtrOutput {
	return i.ToShieldedInstanceConfigPtrOutputWithContext(context.Background())
}

func (i ShieldedInstanceConfigArgs) ToShieldedInstanceConfigPtrOutputWithContext(ctx context.Context) ShieldedInstanceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShieldedInstanceConfigOutput).ToShieldedInstanceConfigPtrOutputWithContext(ctx)
}

// ShieldedInstanceConfigPtrInput is an input type that accepts ShieldedInstanceConfigArgs, ShieldedInstanceConfigPtr and ShieldedInstanceConfigPtrOutput values.
// You can construct a concrete instance of `ShieldedInstanceConfigPtrInput` via:
//
//          ShieldedInstanceConfigArgs{...}
//
//  or:
//
//          nil
type ShieldedInstanceConfigPtrInput interface {
	pulumi.Input

	ToShieldedInstanceConfigPtrOutput() ShieldedInstanceConfigPtrOutput
	ToShieldedInstanceConfigPtrOutputWithContext(context.Context) ShieldedInstanceConfigPtrOutput
}

type shieldedInstanceConfigPtrType ShieldedInstanceConfigArgs

func ShieldedInstanceConfigPtr(v *ShieldedInstanceConfigArgs) ShieldedInstanceConfigPtrInput {
	return (*shieldedInstanceConfigPtrType)(v)
}

func (*shieldedInstanceConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ShieldedInstanceConfig)(nil)).Elem()
}

func (i *shieldedInstanceConfigPtrType) ToShieldedInstanceConfigPtrOutput() ShieldedInstanceConfigPtrOutput {
	return i.ToShieldedInstanceConfigPtrOutputWithContext(context.Background())
}

func (i *shieldedInstanceConfigPtrType) ToShieldedInstanceConfigPtrOutputWithContext(ctx context.Context) ShieldedInstanceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShieldedInstanceConfigPtrOutput)
}

// A set of Shielded Instance options.
type ShieldedInstanceConfigOutput struct{ *pulumi.OutputState }

func (ShieldedInstanceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ShieldedInstanceConfig)(nil)).Elem()
}

func (o ShieldedInstanceConfigOutput) ToShieldedInstanceConfigOutput() ShieldedInstanceConfigOutput {
	return o
}

func (o ShieldedInstanceConfigOutput) ToShieldedInstanceConfigOutputWithContext(ctx context.Context) ShieldedInstanceConfigOutput {
	return o
}

func (o ShieldedInstanceConfigOutput) ToShieldedInstanceConfigPtrOutput() ShieldedInstanceConfigPtrOutput {
	return o.ToShieldedInstanceConfigPtrOutputWithContext(context.Background())
}

func (o ShieldedInstanceConfigOutput) ToShieldedInstanceConfigPtrOutputWithContext(ctx context.Context) ShieldedInstanceConfigPtrOutput {
	return o.ApplyT(func(v ShieldedInstanceConfig) *ShieldedInstanceConfig {
		return &v
	}).(ShieldedInstanceConfigPtrOutput)
}

// Defines whether the instance has integrity monitoring enabled. Enables monitoring and attestation of the boot integrity of the instance. The attestation is performed against the integrity policy baseline. This baseline is initially derived from the implicitly trusted boot image when the instance is created.
func (o ShieldedInstanceConfigOutput) EnableIntegrityMonitoring() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ShieldedInstanceConfig) *bool { return v.EnableIntegrityMonitoring }).(pulumi.BoolPtrOutput)
}

// Defines whether the instance has Secure Boot enabled. Secure Boot helps ensure that the system only runs authentic software by verifying the digital signature of all boot components, and halting the boot process if signature verification fails.
func (o ShieldedInstanceConfigOutput) EnableSecureBoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ShieldedInstanceConfig) *bool { return v.EnableSecureBoot }).(pulumi.BoolPtrOutput)
}

type ShieldedInstanceConfigPtrOutput struct{ *pulumi.OutputState }

func (ShieldedInstanceConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ShieldedInstanceConfig)(nil)).Elem()
}

func (o ShieldedInstanceConfigPtrOutput) ToShieldedInstanceConfigPtrOutput() ShieldedInstanceConfigPtrOutput {
	return o
}

func (o ShieldedInstanceConfigPtrOutput) ToShieldedInstanceConfigPtrOutputWithContext(ctx context.Context) ShieldedInstanceConfigPtrOutput {
	return o
}

func (o ShieldedInstanceConfigPtrOutput) Elem() ShieldedInstanceConfigOutput {
	return o.ApplyT(func(v *ShieldedInstanceConfig) ShieldedInstanceConfig { return *v }).(ShieldedInstanceConfigOutput)
}

// Defines whether the instance has integrity monitoring enabled. Enables monitoring and attestation of the boot integrity of the instance. The attestation is performed against the integrity policy baseline. This baseline is initially derived from the implicitly trusted boot image when the instance is created.
func (o ShieldedInstanceConfigPtrOutput) EnableIntegrityMonitoring() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ShieldedInstanceConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableIntegrityMonitoring
	}).(pulumi.BoolPtrOutput)
}

// Defines whether the instance has Secure Boot enabled. Secure Boot helps ensure that the system only runs authentic software by verifying the digital signature of all boot components, and halting the boot process if signature verification fails.
func (o ShieldedInstanceConfigPtrOutput) EnableSecureBoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ShieldedInstanceConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableSecureBoot
	}).(pulumi.BoolPtrOutput)
}

// A set of Shielded Instance options.
type ShieldedInstanceConfigResponse struct {
	// Defines whether the instance has integrity monitoring enabled. Enables monitoring and attestation of the boot integrity of the instance. The attestation is performed against the integrity policy baseline. This baseline is initially derived from the implicitly trusted boot image when the instance is created.
	EnableIntegrityMonitoring bool `pulumi:"enableIntegrityMonitoring"`
	// Defines whether the instance has Secure Boot enabled. Secure Boot helps ensure that the system only runs authentic software by verifying the digital signature of all boot components, and halting the boot process if signature verification fails.
	EnableSecureBoot bool `pulumi:"enableSecureBoot"`
}

// ShieldedInstanceConfigResponseInput is an input type that accepts ShieldedInstanceConfigResponseArgs and ShieldedInstanceConfigResponseOutput values.
// You can construct a concrete instance of `ShieldedInstanceConfigResponseInput` via:
//
//          ShieldedInstanceConfigResponseArgs{...}
type ShieldedInstanceConfigResponseInput interface {
	pulumi.Input

	ToShieldedInstanceConfigResponseOutput() ShieldedInstanceConfigResponseOutput
	ToShieldedInstanceConfigResponseOutputWithContext(context.Context) ShieldedInstanceConfigResponseOutput
}

// A set of Shielded Instance options.
type ShieldedInstanceConfigResponseArgs struct {
	// Defines whether the instance has integrity monitoring enabled. Enables monitoring and attestation of the boot integrity of the instance. The attestation is performed against the integrity policy baseline. This baseline is initially derived from the implicitly trusted boot image when the instance is created.
	EnableIntegrityMonitoring pulumi.BoolInput `pulumi:"enableIntegrityMonitoring"`
	// Defines whether the instance has Secure Boot enabled. Secure Boot helps ensure that the system only runs authentic software by verifying the digital signature of all boot components, and halting the boot process if signature verification fails.
	EnableSecureBoot pulumi.BoolInput `pulumi:"enableSecureBoot"`
}

func (ShieldedInstanceConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ShieldedInstanceConfigResponse)(nil)).Elem()
}

func (i ShieldedInstanceConfigResponseArgs) ToShieldedInstanceConfigResponseOutput() ShieldedInstanceConfigResponseOutput {
	return i.ToShieldedInstanceConfigResponseOutputWithContext(context.Background())
}

func (i ShieldedInstanceConfigResponseArgs) ToShieldedInstanceConfigResponseOutputWithContext(ctx context.Context) ShieldedInstanceConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShieldedInstanceConfigResponseOutput)
}

func (i ShieldedInstanceConfigResponseArgs) ToShieldedInstanceConfigResponsePtrOutput() ShieldedInstanceConfigResponsePtrOutput {
	return i.ToShieldedInstanceConfigResponsePtrOutputWithContext(context.Background())
}

func (i ShieldedInstanceConfigResponseArgs) ToShieldedInstanceConfigResponsePtrOutputWithContext(ctx context.Context) ShieldedInstanceConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShieldedInstanceConfigResponseOutput).ToShieldedInstanceConfigResponsePtrOutputWithContext(ctx)
}

// ShieldedInstanceConfigResponsePtrInput is an input type that accepts ShieldedInstanceConfigResponseArgs, ShieldedInstanceConfigResponsePtr and ShieldedInstanceConfigResponsePtrOutput values.
// You can construct a concrete instance of `ShieldedInstanceConfigResponsePtrInput` via:
//
//          ShieldedInstanceConfigResponseArgs{...}
//
//  or:
//
//          nil
type ShieldedInstanceConfigResponsePtrInput interface {
	pulumi.Input

	ToShieldedInstanceConfigResponsePtrOutput() ShieldedInstanceConfigResponsePtrOutput
	ToShieldedInstanceConfigResponsePtrOutputWithContext(context.Context) ShieldedInstanceConfigResponsePtrOutput
}

type shieldedInstanceConfigResponsePtrType ShieldedInstanceConfigResponseArgs

func ShieldedInstanceConfigResponsePtr(v *ShieldedInstanceConfigResponseArgs) ShieldedInstanceConfigResponsePtrInput {
	return (*shieldedInstanceConfigResponsePtrType)(v)
}

func (*shieldedInstanceConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ShieldedInstanceConfigResponse)(nil)).Elem()
}

func (i *shieldedInstanceConfigResponsePtrType) ToShieldedInstanceConfigResponsePtrOutput() ShieldedInstanceConfigResponsePtrOutput {
	return i.ToShieldedInstanceConfigResponsePtrOutputWithContext(context.Background())
}

func (i *shieldedInstanceConfigResponsePtrType) ToShieldedInstanceConfigResponsePtrOutputWithContext(ctx context.Context) ShieldedInstanceConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShieldedInstanceConfigResponsePtrOutput)
}

// A set of Shielded Instance options.
type ShieldedInstanceConfigResponseOutput struct{ *pulumi.OutputState }

func (ShieldedInstanceConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ShieldedInstanceConfigResponse)(nil)).Elem()
}

func (o ShieldedInstanceConfigResponseOutput) ToShieldedInstanceConfigResponseOutput() ShieldedInstanceConfigResponseOutput {
	return o
}

func (o ShieldedInstanceConfigResponseOutput) ToShieldedInstanceConfigResponseOutputWithContext(ctx context.Context) ShieldedInstanceConfigResponseOutput {
	return o
}

func (o ShieldedInstanceConfigResponseOutput) ToShieldedInstanceConfigResponsePtrOutput() ShieldedInstanceConfigResponsePtrOutput {
	return o.ToShieldedInstanceConfigResponsePtrOutputWithContext(context.Background())
}

func (o ShieldedInstanceConfigResponseOutput) ToShieldedInstanceConfigResponsePtrOutputWithContext(ctx context.Context) ShieldedInstanceConfigResponsePtrOutput {
	return o.ApplyT(func(v ShieldedInstanceConfigResponse) *ShieldedInstanceConfigResponse {
		return &v
	}).(ShieldedInstanceConfigResponsePtrOutput)
}

// Defines whether the instance has integrity monitoring enabled. Enables monitoring and attestation of the boot integrity of the instance. The attestation is performed against the integrity policy baseline. This baseline is initially derived from the implicitly trusted boot image when the instance is created.
func (o ShieldedInstanceConfigResponseOutput) EnableIntegrityMonitoring() pulumi.BoolOutput {
	return o.ApplyT(func(v ShieldedInstanceConfigResponse) bool { return v.EnableIntegrityMonitoring }).(pulumi.BoolOutput)
}

// Defines whether the instance has Secure Boot enabled. Secure Boot helps ensure that the system only runs authentic software by verifying the digital signature of all boot components, and halting the boot process if signature verification fails.
func (o ShieldedInstanceConfigResponseOutput) EnableSecureBoot() pulumi.BoolOutput {
	return o.ApplyT(func(v ShieldedInstanceConfigResponse) bool { return v.EnableSecureBoot }).(pulumi.BoolOutput)
}

type ShieldedInstanceConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (ShieldedInstanceConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ShieldedInstanceConfigResponse)(nil)).Elem()
}

func (o ShieldedInstanceConfigResponsePtrOutput) ToShieldedInstanceConfigResponsePtrOutput() ShieldedInstanceConfigResponsePtrOutput {
	return o
}

func (o ShieldedInstanceConfigResponsePtrOutput) ToShieldedInstanceConfigResponsePtrOutputWithContext(ctx context.Context) ShieldedInstanceConfigResponsePtrOutput {
	return o
}

func (o ShieldedInstanceConfigResponsePtrOutput) Elem() ShieldedInstanceConfigResponseOutput {
	return o.ApplyT(func(v *ShieldedInstanceConfigResponse) ShieldedInstanceConfigResponse { return *v }).(ShieldedInstanceConfigResponseOutput)
}

// Defines whether the instance has integrity monitoring enabled. Enables monitoring and attestation of the boot integrity of the instance. The attestation is performed against the integrity policy baseline. This baseline is initially derived from the implicitly trusted boot image when the instance is created.
func (o ShieldedInstanceConfigResponsePtrOutput) EnableIntegrityMonitoring() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ShieldedInstanceConfigResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.EnableIntegrityMonitoring
	}).(pulumi.BoolPtrOutput)
}

// Defines whether the instance has Secure Boot enabled. Secure Boot helps ensure that the system only runs authentic software by verifying the digital signature of all boot components, and halting the boot process if signature verification fails.
func (o ShieldedInstanceConfigResponsePtrOutput) EnableSecureBoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ShieldedInstanceConfigResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.EnableSecureBoot
	}).(pulumi.BoolPtrOutput)
}

// Configuration of Shielded Nodes feature.
type ShieldedNodes struct {
	// Whether Shielded Nodes features are enabled on all nodes in this cluster.
	Enabled *bool `pulumi:"enabled"`
}

// ShieldedNodesInput is an input type that accepts ShieldedNodesArgs and ShieldedNodesOutput values.
// You can construct a concrete instance of `ShieldedNodesInput` via:
//
//          ShieldedNodesArgs{...}
type ShieldedNodesInput interface {
	pulumi.Input

	ToShieldedNodesOutput() ShieldedNodesOutput
	ToShieldedNodesOutputWithContext(context.Context) ShieldedNodesOutput
}

// Configuration of Shielded Nodes feature.
type ShieldedNodesArgs struct {
	// Whether Shielded Nodes features are enabled on all nodes in this cluster.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (ShieldedNodesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ShieldedNodes)(nil)).Elem()
}

func (i ShieldedNodesArgs) ToShieldedNodesOutput() ShieldedNodesOutput {
	return i.ToShieldedNodesOutputWithContext(context.Background())
}

func (i ShieldedNodesArgs) ToShieldedNodesOutputWithContext(ctx context.Context) ShieldedNodesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShieldedNodesOutput)
}

func (i ShieldedNodesArgs) ToShieldedNodesPtrOutput() ShieldedNodesPtrOutput {
	return i.ToShieldedNodesPtrOutputWithContext(context.Background())
}

func (i ShieldedNodesArgs) ToShieldedNodesPtrOutputWithContext(ctx context.Context) ShieldedNodesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShieldedNodesOutput).ToShieldedNodesPtrOutputWithContext(ctx)
}

// ShieldedNodesPtrInput is an input type that accepts ShieldedNodesArgs, ShieldedNodesPtr and ShieldedNodesPtrOutput values.
// You can construct a concrete instance of `ShieldedNodesPtrInput` via:
//
//          ShieldedNodesArgs{...}
//
//  or:
//
//          nil
type ShieldedNodesPtrInput interface {
	pulumi.Input

	ToShieldedNodesPtrOutput() ShieldedNodesPtrOutput
	ToShieldedNodesPtrOutputWithContext(context.Context) ShieldedNodesPtrOutput
}

type shieldedNodesPtrType ShieldedNodesArgs

func ShieldedNodesPtr(v *ShieldedNodesArgs) ShieldedNodesPtrInput {
	return (*shieldedNodesPtrType)(v)
}

func (*shieldedNodesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ShieldedNodes)(nil)).Elem()
}

func (i *shieldedNodesPtrType) ToShieldedNodesPtrOutput() ShieldedNodesPtrOutput {
	return i.ToShieldedNodesPtrOutputWithContext(context.Background())
}

func (i *shieldedNodesPtrType) ToShieldedNodesPtrOutputWithContext(ctx context.Context) ShieldedNodesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShieldedNodesPtrOutput)
}

// Configuration of Shielded Nodes feature.
type ShieldedNodesOutput struct{ *pulumi.OutputState }

func (ShieldedNodesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ShieldedNodes)(nil)).Elem()
}

func (o ShieldedNodesOutput) ToShieldedNodesOutput() ShieldedNodesOutput {
	return o
}

func (o ShieldedNodesOutput) ToShieldedNodesOutputWithContext(ctx context.Context) ShieldedNodesOutput {
	return o
}

func (o ShieldedNodesOutput) ToShieldedNodesPtrOutput() ShieldedNodesPtrOutput {
	return o.ToShieldedNodesPtrOutputWithContext(context.Background())
}

func (o ShieldedNodesOutput) ToShieldedNodesPtrOutputWithContext(ctx context.Context) ShieldedNodesPtrOutput {
	return o.ApplyT(func(v ShieldedNodes) *ShieldedNodes {
		return &v
	}).(ShieldedNodesPtrOutput)
}

// Whether Shielded Nodes features are enabled on all nodes in this cluster.
func (o ShieldedNodesOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ShieldedNodes) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type ShieldedNodesPtrOutput struct{ *pulumi.OutputState }

func (ShieldedNodesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ShieldedNodes)(nil)).Elem()
}

func (o ShieldedNodesPtrOutput) ToShieldedNodesPtrOutput() ShieldedNodesPtrOutput {
	return o
}

func (o ShieldedNodesPtrOutput) ToShieldedNodesPtrOutputWithContext(ctx context.Context) ShieldedNodesPtrOutput {
	return o
}

func (o ShieldedNodesPtrOutput) Elem() ShieldedNodesOutput {
	return o.ApplyT(func(v *ShieldedNodes) ShieldedNodes { return *v }).(ShieldedNodesOutput)
}

// Whether Shielded Nodes features are enabled on all nodes in this cluster.
func (o ShieldedNodesPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ShieldedNodes) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Configuration of Shielded Nodes feature.
type ShieldedNodesResponse struct {
	// Whether Shielded Nodes features are enabled on all nodes in this cluster.
	Enabled bool `pulumi:"enabled"`
}

// ShieldedNodesResponseInput is an input type that accepts ShieldedNodesResponseArgs and ShieldedNodesResponseOutput values.
// You can construct a concrete instance of `ShieldedNodesResponseInput` via:
//
//          ShieldedNodesResponseArgs{...}
type ShieldedNodesResponseInput interface {
	pulumi.Input

	ToShieldedNodesResponseOutput() ShieldedNodesResponseOutput
	ToShieldedNodesResponseOutputWithContext(context.Context) ShieldedNodesResponseOutput
}

// Configuration of Shielded Nodes feature.
type ShieldedNodesResponseArgs struct {
	// Whether Shielded Nodes features are enabled on all nodes in this cluster.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

func (ShieldedNodesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ShieldedNodesResponse)(nil)).Elem()
}

func (i ShieldedNodesResponseArgs) ToShieldedNodesResponseOutput() ShieldedNodesResponseOutput {
	return i.ToShieldedNodesResponseOutputWithContext(context.Background())
}

func (i ShieldedNodesResponseArgs) ToShieldedNodesResponseOutputWithContext(ctx context.Context) ShieldedNodesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShieldedNodesResponseOutput)
}

func (i ShieldedNodesResponseArgs) ToShieldedNodesResponsePtrOutput() ShieldedNodesResponsePtrOutput {
	return i.ToShieldedNodesResponsePtrOutputWithContext(context.Background())
}

func (i ShieldedNodesResponseArgs) ToShieldedNodesResponsePtrOutputWithContext(ctx context.Context) ShieldedNodesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShieldedNodesResponseOutput).ToShieldedNodesResponsePtrOutputWithContext(ctx)
}

// ShieldedNodesResponsePtrInput is an input type that accepts ShieldedNodesResponseArgs, ShieldedNodesResponsePtr and ShieldedNodesResponsePtrOutput values.
// You can construct a concrete instance of `ShieldedNodesResponsePtrInput` via:
//
//          ShieldedNodesResponseArgs{...}
//
//  or:
//
//          nil
type ShieldedNodesResponsePtrInput interface {
	pulumi.Input

	ToShieldedNodesResponsePtrOutput() ShieldedNodesResponsePtrOutput
	ToShieldedNodesResponsePtrOutputWithContext(context.Context) ShieldedNodesResponsePtrOutput
}

type shieldedNodesResponsePtrType ShieldedNodesResponseArgs

func ShieldedNodesResponsePtr(v *ShieldedNodesResponseArgs) ShieldedNodesResponsePtrInput {
	return (*shieldedNodesResponsePtrType)(v)
}

func (*shieldedNodesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ShieldedNodesResponse)(nil)).Elem()
}

func (i *shieldedNodesResponsePtrType) ToShieldedNodesResponsePtrOutput() ShieldedNodesResponsePtrOutput {
	return i.ToShieldedNodesResponsePtrOutputWithContext(context.Background())
}

func (i *shieldedNodesResponsePtrType) ToShieldedNodesResponsePtrOutputWithContext(ctx context.Context) ShieldedNodesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShieldedNodesResponsePtrOutput)
}

// Configuration of Shielded Nodes feature.
type ShieldedNodesResponseOutput struct{ *pulumi.OutputState }

func (ShieldedNodesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ShieldedNodesResponse)(nil)).Elem()
}

func (o ShieldedNodesResponseOutput) ToShieldedNodesResponseOutput() ShieldedNodesResponseOutput {
	return o
}

func (o ShieldedNodesResponseOutput) ToShieldedNodesResponseOutputWithContext(ctx context.Context) ShieldedNodesResponseOutput {
	return o
}

func (o ShieldedNodesResponseOutput) ToShieldedNodesResponsePtrOutput() ShieldedNodesResponsePtrOutput {
	return o.ToShieldedNodesResponsePtrOutputWithContext(context.Background())
}

func (o ShieldedNodesResponseOutput) ToShieldedNodesResponsePtrOutputWithContext(ctx context.Context) ShieldedNodesResponsePtrOutput {
	return o.ApplyT(func(v ShieldedNodesResponse) *ShieldedNodesResponse {
		return &v
	}).(ShieldedNodesResponsePtrOutput)
}

// Whether Shielded Nodes features are enabled on all nodes in this cluster.
func (o ShieldedNodesResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ShieldedNodesResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type ShieldedNodesResponsePtrOutput struct{ *pulumi.OutputState }

func (ShieldedNodesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ShieldedNodesResponse)(nil)).Elem()
}

func (o ShieldedNodesResponsePtrOutput) ToShieldedNodesResponsePtrOutput() ShieldedNodesResponsePtrOutput {
	return o
}

func (o ShieldedNodesResponsePtrOutput) ToShieldedNodesResponsePtrOutputWithContext(ctx context.Context) ShieldedNodesResponsePtrOutput {
	return o
}

func (o ShieldedNodesResponsePtrOutput) Elem() ShieldedNodesResponseOutput {
	return o.ApplyT(func(v *ShieldedNodesResponse) ShieldedNodesResponse { return *v }).(ShieldedNodesResponseOutput)
}

// Whether Shielded Nodes features are enabled on all nodes in this cluster.
func (o ShieldedNodesResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ShieldedNodesResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED).
type StatusCondition struct {
	// Canonical code of the condition.
	CanonicalCode *string `pulumi:"canonicalCode"`
	// Human-friendly representation of the condition
	Message *string `pulumi:"message"`
}

// StatusConditionInput is an input type that accepts StatusConditionArgs and StatusConditionOutput values.
// You can construct a concrete instance of `StatusConditionInput` via:
//
//          StatusConditionArgs{...}
type StatusConditionInput interface {
	pulumi.Input

	ToStatusConditionOutput() StatusConditionOutput
	ToStatusConditionOutputWithContext(context.Context) StatusConditionOutput
}

// StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED).
type StatusConditionArgs struct {
	// Canonical code of the condition.
	CanonicalCode *StatusConditionCanonicalCode `pulumi:"canonicalCode"`
	// Human-friendly representation of the condition
	Message pulumi.StringPtrInput `pulumi:"message"`
}

func (StatusConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusCondition)(nil)).Elem()
}

func (i StatusConditionArgs) ToStatusConditionOutput() StatusConditionOutput {
	return i.ToStatusConditionOutputWithContext(context.Background())
}

func (i StatusConditionArgs) ToStatusConditionOutputWithContext(ctx context.Context) StatusConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusConditionOutput)
}

// StatusConditionArrayInput is an input type that accepts StatusConditionArray and StatusConditionArrayOutput values.
// You can construct a concrete instance of `StatusConditionArrayInput` via:
//
//          StatusConditionArray{ StatusConditionArgs{...} }
type StatusConditionArrayInput interface {
	pulumi.Input

	ToStatusConditionArrayOutput() StatusConditionArrayOutput
	ToStatusConditionArrayOutputWithContext(context.Context) StatusConditionArrayOutput
}

type StatusConditionArray []StatusConditionInput

func (StatusConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StatusCondition)(nil)).Elem()
}

func (i StatusConditionArray) ToStatusConditionArrayOutput() StatusConditionArrayOutput {
	return i.ToStatusConditionArrayOutputWithContext(context.Background())
}

func (i StatusConditionArray) ToStatusConditionArrayOutputWithContext(ctx context.Context) StatusConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusConditionArrayOutput)
}

// StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED).
type StatusConditionOutput struct{ *pulumi.OutputState }

func (StatusConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusCondition)(nil)).Elem()
}

func (o StatusConditionOutput) ToStatusConditionOutput() StatusConditionOutput {
	return o
}

func (o StatusConditionOutput) ToStatusConditionOutputWithContext(ctx context.Context) StatusConditionOutput {
	return o
}

// Canonical code of the condition.
func (o StatusConditionOutput) CanonicalCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StatusCondition) *string { return v.CanonicalCode }).(pulumi.StringPtrOutput)
}

// Human-friendly representation of the condition
func (o StatusConditionOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StatusCondition) *string { return v.Message }).(pulumi.StringPtrOutput)
}

type StatusConditionArrayOutput struct{ *pulumi.OutputState }

func (StatusConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StatusCondition)(nil)).Elem()
}

func (o StatusConditionArrayOutput) ToStatusConditionArrayOutput() StatusConditionArrayOutput {
	return o
}

func (o StatusConditionArrayOutput) ToStatusConditionArrayOutputWithContext(ctx context.Context) StatusConditionArrayOutput {
	return o
}

func (o StatusConditionArrayOutput) Index(i pulumi.IntInput) StatusConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StatusCondition {
		return vs[0].([]StatusCondition)[vs[1].(int)]
	}).(StatusConditionOutput)
}

// StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED).
type StatusConditionResponse struct {
	// Canonical code of the condition.
	CanonicalCode string `pulumi:"canonicalCode"`
	// Human-friendly representation of the condition
	Message string `pulumi:"message"`
}

// StatusConditionResponseInput is an input type that accepts StatusConditionResponseArgs and StatusConditionResponseOutput values.
// You can construct a concrete instance of `StatusConditionResponseInput` via:
//
//          StatusConditionResponseArgs{...}
type StatusConditionResponseInput interface {
	pulumi.Input

	ToStatusConditionResponseOutput() StatusConditionResponseOutput
	ToStatusConditionResponseOutputWithContext(context.Context) StatusConditionResponseOutput
}

// StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED).
type StatusConditionResponseArgs struct {
	// Canonical code of the condition.
	CanonicalCode pulumi.StringInput `pulumi:"canonicalCode"`
	// Human-friendly representation of the condition
	Message pulumi.StringInput `pulumi:"message"`
}

func (StatusConditionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusConditionResponse)(nil)).Elem()
}

func (i StatusConditionResponseArgs) ToStatusConditionResponseOutput() StatusConditionResponseOutput {
	return i.ToStatusConditionResponseOutputWithContext(context.Background())
}

func (i StatusConditionResponseArgs) ToStatusConditionResponseOutputWithContext(ctx context.Context) StatusConditionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusConditionResponseOutput)
}

// StatusConditionResponseArrayInput is an input type that accepts StatusConditionResponseArray and StatusConditionResponseArrayOutput values.
// You can construct a concrete instance of `StatusConditionResponseArrayInput` via:
//
//          StatusConditionResponseArray{ StatusConditionResponseArgs{...} }
type StatusConditionResponseArrayInput interface {
	pulumi.Input

	ToStatusConditionResponseArrayOutput() StatusConditionResponseArrayOutput
	ToStatusConditionResponseArrayOutputWithContext(context.Context) StatusConditionResponseArrayOutput
}

type StatusConditionResponseArray []StatusConditionResponseInput

func (StatusConditionResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StatusConditionResponse)(nil)).Elem()
}

func (i StatusConditionResponseArray) ToStatusConditionResponseArrayOutput() StatusConditionResponseArrayOutput {
	return i.ToStatusConditionResponseArrayOutputWithContext(context.Background())
}

func (i StatusConditionResponseArray) ToStatusConditionResponseArrayOutputWithContext(ctx context.Context) StatusConditionResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusConditionResponseArrayOutput)
}

// StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED).
type StatusConditionResponseOutput struct{ *pulumi.OutputState }

func (StatusConditionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusConditionResponse)(nil)).Elem()
}

func (o StatusConditionResponseOutput) ToStatusConditionResponseOutput() StatusConditionResponseOutput {
	return o
}

func (o StatusConditionResponseOutput) ToStatusConditionResponseOutputWithContext(ctx context.Context) StatusConditionResponseOutput {
	return o
}

// Canonical code of the condition.
func (o StatusConditionResponseOutput) CanonicalCode() pulumi.StringOutput {
	return o.ApplyT(func(v StatusConditionResponse) string { return v.CanonicalCode }).(pulumi.StringOutput)
}

// Human-friendly representation of the condition
func (o StatusConditionResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v StatusConditionResponse) string { return v.Message }).(pulumi.StringOutput)
}

type StatusConditionResponseArrayOutput struct{ *pulumi.OutputState }

func (StatusConditionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StatusConditionResponse)(nil)).Elem()
}

func (o StatusConditionResponseArrayOutput) ToStatusConditionResponseArrayOutput() StatusConditionResponseArrayOutput {
	return o
}

func (o StatusConditionResponseArrayOutput) ToStatusConditionResponseArrayOutputWithContext(ctx context.Context) StatusConditionResponseArrayOutput {
	return o
}

func (o StatusConditionResponseArrayOutput) Index(i pulumi.IntInput) StatusConditionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StatusConditionResponse {
		return vs[0].([]StatusConditionResponse)[vs[1].(int)]
	}).(StatusConditionResponseOutput)
}

// Represents an arbitrary window of time.
type TimeWindow struct {
	// The time that the window ends. The end time should take place after the start time.
	EndTime *string `pulumi:"endTime"`
	// The time that the window first starts.
	StartTime *string `pulumi:"startTime"`
}

// TimeWindowInput is an input type that accepts TimeWindowArgs and TimeWindowOutput values.
// You can construct a concrete instance of `TimeWindowInput` via:
//
//          TimeWindowArgs{...}
type TimeWindowInput interface {
	pulumi.Input

	ToTimeWindowOutput() TimeWindowOutput
	ToTimeWindowOutputWithContext(context.Context) TimeWindowOutput
}

// Represents an arbitrary window of time.
type TimeWindowArgs struct {
	// The time that the window ends. The end time should take place after the start time.
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// The time that the window first starts.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
}

func (TimeWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeWindow)(nil)).Elem()
}

func (i TimeWindowArgs) ToTimeWindowOutput() TimeWindowOutput {
	return i.ToTimeWindowOutputWithContext(context.Background())
}

func (i TimeWindowArgs) ToTimeWindowOutputWithContext(ctx context.Context) TimeWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeWindowOutput)
}

func (i TimeWindowArgs) ToTimeWindowPtrOutput() TimeWindowPtrOutput {
	return i.ToTimeWindowPtrOutputWithContext(context.Background())
}

func (i TimeWindowArgs) ToTimeWindowPtrOutputWithContext(ctx context.Context) TimeWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeWindowOutput).ToTimeWindowPtrOutputWithContext(ctx)
}

// TimeWindowPtrInput is an input type that accepts TimeWindowArgs, TimeWindowPtr and TimeWindowPtrOutput values.
// You can construct a concrete instance of `TimeWindowPtrInput` via:
//
//          TimeWindowArgs{...}
//
//  or:
//
//          nil
type TimeWindowPtrInput interface {
	pulumi.Input

	ToTimeWindowPtrOutput() TimeWindowPtrOutput
	ToTimeWindowPtrOutputWithContext(context.Context) TimeWindowPtrOutput
}

type timeWindowPtrType TimeWindowArgs

func TimeWindowPtr(v *TimeWindowArgs) TimeWindowPtrInput {
	return (*timeWindowPtrType)(v)
}

func (*timeWindowPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TimeWindow)(nil)).Elem()
}

func (i *timeWindowPtrType) ToTimeWindowPtrOutput() TimeWindowPtrOutput {
	return i.ToTimeWindowPtrOutputWithContext(context.Background())
}

func (i *timeWindowPtrType) ToTimeWindowPtrOutputWithContext(ctx context.Context) TimeWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeWindowPtrOutput)
}

// Represents an arbitrary window of time.
type TimeWindowOutput struct{ *pulumi.OutputState }

func (TimeWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeWindow)(nil)).Elem()
}

func (o TimeWindowOutput) ToTimeWindowOutput() TimeWindowOutput {
	return o
}

func (o TimeWindowOutput) ToTimeWindowOutputWithContext(ctx context.Context) TimeWindowOutput {
	return o
}

func (o TimeWindowOutput) ToTimeWindowPtrOutput() TimeWindowPtrOutput {
	return o.ToTimeWindowPtrOutputWithContext(context.Background())
}

func (o TimeWindowOutput) ToTimeWindowPtrOutputWithContext(ctx context.Context) TimeWindowPtrOutput {
	return o.ApplyT(func(v TimeWindow) *TimeWindow {
		return &v
	}).(TimeWindowPtrOutput)
}

// The time that the window ends. The end time should take place after the start time.
func (o TimeWindowOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimeWindow) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// The time that the window first starts.
func (o TimeWindowOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimeWindow) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

type TimeWindowPtrOutput struct{ *pulumi.OutputState }

func (TimeWindowPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TimeWindow)(nil)).Elem()
}

func (o TimeWindowPtrOutput) ToTimeWindowPtrOutput() TimeWindowPtrOutput {
	return o
}

func (o TimeWindowPtrOutput) ToTimeWindowPtrOutputWithContext(ctx context.Context) TimeWindowPtrOutput {
	return o
}

func (o TimeWindowPtrOutput) Elem() TimeWindowOutput {
	return o.ApplyT(func(v *TimeWindow) TimeWindow { return *v }).(TimeWindowOutput)
}

// The time that the window ends. The end time should take place after the start time.
func (o TimeWindowPtrOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TimeWindow) *string {
		if v == nil {
			return nil
		}
		return v.EndTime
	}).(pulumi.StringPtrOutput)
}

// The time that the window first starts.
func (o TimeWindowPtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TimeWindow) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Represents an arbitrary window of time.
type TimeWindowResponse struct {
	// The time that the window ends. The end time should take place after the start time.
	EndTime string `pulumi:"endTime"`
	// The time that the window first starts.
	StartTime string `pulumi:"startTime"`
}

// TimeWindowResponseInput is an input type that accepts TimeWindowResponseArgs and TimeWindowResponseOutput values.
// You can construct a concrete instance of `TimeWindowResponseInput` via:
//
//          TimeWindowResponseArgs{...}
type TimeWindowResponseInput interface {
	pulumi.Input

	ToTimeWindowResponseOutput() TimeWindowResponseOutput
	ToTimeWindowResponseOutputWithContext(context.Context) TimeWindowResponseOutput
}

// Represents an arbitrary window of time.
type TimeWindowResponseArgs struct {
	// The time that the window ends. The end time should take place after the start time.
	EndTime pulumi.StringInput `pulumi:"endTime"`
	// The time that the window first starts.
	StartTime pulumi.StringInput `pulumi:"startTime"`
}

func (TimeWindowResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeWindowResponse)(nil)).Elem()
}

func (i TimeWindowResponseArgs) ToTimeWindowResponseOutput() TimeWindowResponseOutput {
	return i.ToTimeWindowResponseOutputWithContext(context.Background())
}

func (i TimeWindowResponseArgs) ToTimeWindowResponseOutputWithContext(ctx context.Context) TimeWindowResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeWindowResponseOutput)
}

func (i TimeWindowResponseArgs) ToTimeWindowResponsePtrOutput() TimeWindowResponsePtrOutput {
	return i.ToTimeWindowResponsePtrOutputWithContext(context.Background())
}

func (i TimeWindowResponseArgs) ToTimeWindowResponsePtrOutputWithContext(ctx context.Context) TimeWindowResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeWindowResponseOutput).ToTimeWindowResponsePtrOutputWithContext(ctx)
}

// TimeWindowResponsePtrInput is an input type that accepts TimeWindowResponseArgs, TimeWindowResponsePtr and TimeWindowResponsePtrOutput values.
// You can construct a concrete instance of `TimeWindowResponsePtrInput` via:
//
//          TimeWindowResponseArgs{...}
//
//  or:
//
//          nil
type TimeWindowResponsePtrInput interface {
	pulumi.Input

	ToTimeWindowResponsePtrOutput() TimeWindowResponsePtrOutput
	ToTimeWindowResponsePtrOutputWithContext(context.Context) TimeWindowResponsePtrOutput
}

type timeWindowResponsePtrType TimeWindowResponseArgs

func TimeWindowResponsePtr(v *TimeWindowResponseArgs) TimeWindowResponsePtrInput {
	return (*timeWindowResponsePtrType)(v)
}

func (*timeWindowResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TimeWindowResponse)(nil)).Elem()
}

func (i *timeWindowResponsePtrType) ToTimeWindowResponsePtrOutput() TimeWindowResponsePtrOutput {
	return i.ToTimeWindowResponsePtrOutputWithContext(context.Background())
}

func (i *timeWindowResponsePtrType) ToTimeWindowResponsePtrOutputWithContext(ctx context.Context) TimeWindowResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeWindowResponsePtrOutput)
}

// Represents an arbitrary window of time.
type TimeWindowResponseOutput struct{ *pulumi.OutputState }

func (TimeWindowResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeWindowResponse)(nil)).Elem()
}

func (o TimeWindowResponseOutput) ToTimeWindowResponseOutput() TimeWindowResponseOutput {
	return o
}

func (o TimeWindowResponseOutput) ToTimeWindowResponseOutputWithContext(ctx context.Context) TimeWindowResponseOutput {
	return o
}

func (o TimeWindowResponseOutput) ToTimeWindowResponsePtrOutput() TimeWindowResponsePtrOutput {
	return o.ToTimeWindowResponsePtrOutputWithContext(context.Background())
}

func (o TimeWindowResponseOutput) ToTimeWindowResponsePtrOutputWithContext(ctx context.Context) TimeWindowResponsePtrOutput {
	return o.ApplyT(func(v TimeWindowResponse) *TimeWindowResponse {
		return &v
	}).(TimeWindowResponsePtrOutput)
}

// The time that the window ends. The end time should take place after the start time.
func (o TimeWindowResponseOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v TimeWindowResponse) string { return v.EndTime }).(pulumi.StringOutput)
}

// The time that the window first starts.
func (o TimeWindowResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v TimeWindowResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

type TimeWindowResponsePtrOutput struct{ *pulumi.OutputState }

func (TimeWindowResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TimeWindowResponse)(nil)).Elem()
}

func (o TimeWindowResponsePtrOutput) ToTimeWindowResponsePtrOutput() TimeWindowResponsePtrOutput {
	return o
}

func (o TimeWindowResponsePtrOutput) ToTimeWindowResponsePtrOutputWithContext(ctx context.Context) TimeWindowResponsePtrOutput {
	return o
}

func (o TimeWindowResponsePtrOutput) Elem() TimeWindowResponseOutput {
	return o.ApplyT(func(v *TimeWindowResponse) TimeWindowResponse { return *v }).(TimeWindowResponseOutput)
}

// The time that the window ends. The end time should take place after the start time.
func (o TimeWindowResponsePtrOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TimeWindowResponse) *string {
		if v == nil {
			return nil
		}
		return &v.EndTime
	}).(pulumi.StringPtrOutput)
}

// The time that the window first starts.
func (o TimeWindowResponsePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TimeWindowResponse) *string {
		if v == nil {
			return nil
		}
		return &v.StartTime
	}).(pulumi.StringPtrOutput)
}

// These upgrade settings control the level of parallelism and the level of disruption caused by an upgrade. maxUnavailable controls the number of nodes that can be simultaneously unavailable. maxSurge controls the number of additional nodes that can be added to the node pool temporarily for the time of the upgrade to increase the number of available nodes. (maxUnavailable + maxSurge) determines the level of parallelism (how many nodes are being upgraded at the same time). Note: upgrades inevitably introduce some disruption since workloads need to be moved from old nodes to new, upgraded ones. Even if maxUnavailable=0, this holds true. (Disruption stays within the limits of PodDisruptionBudget, if it is configured.) Consider a hypothetical node pool with 5 nodes having maxSurge=2, maxUnavailable=1. This means the upgrade process upgrades 3 nodes simultaneously. It creates 2 additional (upgraded) nodes, then it brings down 3 old (not yet upgraded) nodes at the same time. This ensures that there are always at least 4 nodes available.
type UpgradeSettings struct {
	// The maximum number of nodes that can be created beyond the current size of the node pool during the upgrade process.
	MaxSurge *int `pulumi:"maxSurge"`
	// The maximum number of nodes that can be simultaneously unavailable during the upgrade process. A node is considered available if its status is Ready.
	MaxUnavailable *int `pulumi:"maxUnavailable"`
}

// UpgradeSettingsInput is an input type that accepts UpgradeSettingsArgs and UpgradeSettingsOutput values.
// You can construct a concrete instance of `UpgradeSettingsInput` via:
//
//          UpgradeSettingsArgs{...}
type UpgradeSettingsInput interface {
	pulumi.Input

	ToUpgradeSettingsOutput() UpgradeSettingsOutput
	ToUpgradeSettingsOutputWithContext(context.Context) UpgradeSettingsOutput
}

// These upgrade settings control the level of parallelism and the level of disruption caused by an upgrade. maxUnavailable controls the number of nodes that can be simultaneously unavailable. maxSurge controls the number of additional nodes that can be added to the node pool temporarily for the time of the upgrade to increase the number of available nodes. (maxUnavailable + maxSurge) determines the level of parallelism (how many nodes are being upgraded at the same time). Note: upgrades inevitably introduce some disruption since workloads need to be moved from old nodes to new, upgraded ones. Even if maxUnavailable=0, this holds true. (Disruption stays within the limits of PodDisruptionBudget, if it is configured.) Consider a hypothetical node pool with 5 nodes having maxSurge=2, maxUnavailable=1. This means the upgrade process upgrades 3 nodes simultaneously. It creates 2 additional (upgraded) nodes, then it brings down 3 old (not yet upgraded) nodes at the same time. This ensures that there are always at least 4 nodes available.
type UpgradeSettingsArgs struct {
	// The maximum number of nodes that can be created beyond the current size of the node pool during the upgrade process.
	MaxSurge pulumi.IntPtrInput `pulumi:"maxSurge"`
	// The maximum number of nodes that can be simultaneously unavailable during the upgrade process. A node is considered available if its status is Ready.
	MaxUnavailable pulumi.IntPtrInput `pulumi:"maxUnavailable"`
}

func (UpgradeSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UpgradeSettings)(nil)).Elem()
}

func (i UpgradeSettingsArgs) ToUpgradeSettingsOutput() UpgradeSettingsOutput {
	return i.ToUpgradeSettingsOutputWithContext(context.Background())
}

func (i UpgradeSettingsArgs) ToUpgradeSettingsOutputWithContext(ctx context.Context) UpgradeSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradeSettingsOutput)
}

func (i UpgradeSettingsArgs) ToUpgradeSettingsPtrOutput() UpgradeSettingsPtrOutput {
	return i.ToUpgradeSettingsPtrOutputWithContext(context.Background())
}

func (i UpgradeSettingsArgs) ToUpgradeSettingsPtrOutputWithContext(ctx context.Context) UpgradeSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradeSettingsOutput).ToUpgradeSettingsPtrOutputWithContext(ctx)
}

// UpgradeSettingsPtrInput is an input type that accepts UpgradeSettingsArgs, UpgradeSettingsPtr and UpgradeSettingsPtrOutput values.
// You can construct a concrete instance of `UpgradeSettingsPtrInput` via:
//
//          UpgradeSettingsArgs{...}
//
//  or:
//
//          nil
type UpgradeSettingsPtrInput interface {
	pulumi.Input

	ToUpgradeSettingsPtrOutput() UpgradeSettingsPtrOutput
	ToUpgradeSettingsPtrOutputWithContext(context.Context) UpgradeSettingsPtrOutput
}

type upgradeSettingsPtrType UpgradeSettingsArgs

func UpgradeSettingsPtr(v *UpgradeSettingsArgs) UpgradeSettingsPtrInput {
	return (*upgradeSettingsPtrType)(v)
}

func (*upgradeSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UpgradeSettings)(nil)).Elem()
}

func (i *upgradeSettingsPtrType) ToUpgradeSettingsPtrOutput() UpgradeSettingsPtrOutput {
	return i.ToUpgradeSettingsPtrOutputWithContext(context.Background())
}

func (i *upgradeSettingsPtrType) ToUpgradeSettingsPtrOutputWithContext(ctx context.Context) UpgradeSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradeSettingsPtrOutput)
}

// These upgrade settings control the level of parallelism and the level of disruption caused by an upgrade. maxUnavailable controls the number of nodes that can be simultaneously unavailable. maxSurge controls the number of additional nodes that can be added to the node pool temporarily for the time of the upgrade to increase the number of available nodes. (maxUnavailable + maxSurge) determines the level of parallelism (how many nodes are being upgraded at the same time). Note: upgrades inevitably introduce some disruption since workloads need to be moved from old nodes to new, upgraded ones. Even if maxUnavailable=0, this holds true. (Disruption stays within the limits of PodDisruptionBudget, if it is configured.) Consider a hypothetical node pool with 5 nodes having maxSurge=2, maxUnavailable=1. This means the upgrade process upgrades 3 nodes simultaneously. It creates 2 additional (upgraded) nodes, then it brings down 3 old (not yet upgraded) nodes at the same time. This ensures that there are always at least 4 nodes available.
type UpgradeSettingsOutput struct{ *pulumi.OutputState }

func (UpgradeSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpgradeSettings)(nil)).Elem()
}

func (o UpgradeSettingsOutput) ToUpgradeSettingsOutput() UpgradeSettingsOutput {
	return o
}

func (o UpgradeSettingsOutput) ToUpgradeSettingsOutputWithContext(ctx context.Context) UpgradeSettingsOutput {
	return o
}

func (o UpgradeSettingsOutput) ToUpgradeSettingsPtrOutput() UpgradeSettingsPtrOutput {
	return o.ToUpgradeSettingsPtrOutputWithContext(context.Background())
}

func (o UpgradeSettingsOutput) ToUpgradeSettingsPtrOutputWithContext(ctx context.Context) UpgradeSettingsPtrOutput {
	return o.ApplyT(func(v UpgradeSettings) *UpgradeSettings {
		return &v
	}).(UpgradeSettingsPtrOutput)
}

// The maximum number of nodes that can be created beyond the current size of the node pool during the upgrade process.
func (o UpgradeSettingsOutput) MaxSurge() pulumi.IntPtrOutput {
	return o.ApplyT(func(v UpgradeSettings) *int { return v.MaxSurge }).(pulumi.IntPtrOutput)
}

// The maximum number of nodes that can be simultaneously unavailable during the upgrade process. A node is considered available if its status is Ready.
func (o UpgradeSettingsOutput) MaxUnavailable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v UpgradeSettings) *int { return v.MaxUnavailable }).(pulumi.IntPtrOutput)
}

type UpgradeSettingsPtrOutput struct{ *pulumi.OutputState }

func (UpgradeSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UpgradeSettings)(nil)).Elem()
}

func (o UpgradeSettingsPtrOutput) ToUpgradeSettingsPtrOutput() UpgradeSettingsPtrOutput {
	return o
}

func (o UpgradeSettingsPtrOutput) ToUpgradeSettingsPtrOutputWithContext(ctx context.Context) UpgradeSettingsPtrOutput {
	return o
}

func (o UpgradeSettingsPtrOutput) Elem() UpgradeSettingsOutput {
	return o.ApplyT(func(v *UpgradeSettings) UpgradeSettings { return *v }).(UpgradeSettingsOutput)
}

// The maximum number of nodes that can be created beyond the current size of the node pool during the upgrade process.
func (o UpgradeSettingsPtrOutput) MaxSurge() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *UpgradeSettings) *int {
		if v == nil {
			return nil
		}
		return v.MaxSurge
	}).(pulumi.IntPtrOutput)
}

// The maximum number of nodes that can be simultaneously unavailable during the upgrade process. A node is considered available if its status is Ready.
func (o UpgradeSettingsPtrOutput) MaxUnavailable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *UpgradeSettings) *int {
		if v == nil {
			return nil
		}
		return v.MaxUnavailable
	}).(pulumi.IntPtrOutput)
}

// These upgrade settings control the level of parallelism and the level of disruption caused by an upgrade. maxUnavailable controls the number of nodes that can be simultaneously unavailable. maxSurge controls the number of additional nodes that can be added to the node pool temporarily for the time of the upgrade to increase the number of available nodes. (maxUnavailable + maxSurge) determines the level of parallelism (how many nodes are being upgraded at the same time). Note: upgrades inevitably introduce some disruption since workloads need to be moved from old nodes to new, upgraded ones. Even if maxUnavailable=0, this holds true. (Disruption stays within the limits of PodDisruptionBudget, if it is configured.) Consider a hypothetical node pool with 5 nodes having maxSurge=2, maxUnavailable=1. This means the upgrade process upgrades 3 nodes simultaneously. It creates 2 additional (upgraded) nodes, then it brings down 3 old (not yet upgraded) nodes at the same time. This ensures that there are always at least 4 nodes available.
type UpgradeSettingsResponse struct {
	// The maximum number of nodes that can be created beyond the current size of the node pool during the upgrade process.
	MaxSurge int `pulumi:"maxSurge"`
	// The maximum number of nodes that can be simultaneously unavailable during the upgrade process. A node is considered available if its status is Ready.
	MaxUnavailable int `pulumi:"maxUnavailable"`
}

// UpgradeSettingsResponseInput is an input type that accepts UpgradeSettingsResponseArgs and UpgradeSettingsResponseOutput values.
// You can construct a concrete instance of `UpgradeSettingsResponseInput` via:
//
//          UpgradeSettingsResponseArgs{...}
type UpgradeSettingsResponseInput interface {
	pulumi.Input

	ToUpgradeSettingsResponseOutput() UpgradeSettingsResponseOutput
	ToUpgradeSettingsResponseOutputWithContext(context.Context) UpgradeSettingsResponseOutput
}

// These upgrade settings control the level of parallelism and the level of disruption caused by an upgrade. maxUnavailable controls the number of nodes that can be simultaneously unavailable. maxSurge controls the number of additional nodes that can be added to the node pool temporarily for the time of the upgrade to increase the number of available nodes. (maxUnavailable + maxSurge) determines the level of parallelism (how many nodes are being upgraded at the same time). Note: upgrades inevitably introduce some disruption since workloads need to be moved from old nodes to new, upgraded ones. Even if maxUnavailable=0, this holds true. (Disruption stays within the limits of PodDisruptionBudget, if it is configured.) Consider a hypothetical node pool with 5 nodes having maxSurge=2, maxUnavailable=1. This means the upgrade process upgrades 3 nodes simultaneously. It creates 2 additional (upgraded) nodes, then it brings down 3 old (not yet upgraded) nodes at the same time. This ensures that there are always at least 4 nodes available.
type UpgradeSettingsResponseArgs struct {
	// The maximum number of nodes that can be created beyond the current size of the node pool during the upgrade process.
	MaxSurge pulumi.IntInput `pulumi:"maxSurge"`
	// The maximum number of nodes that can be simultaneously unavailable during the upgrade process. A node is considered available if its status is Ready.
	MaxUnavailable pulumi.IntInput `pulumi:"maxUnavailable"`
}

func (UpgradeSettingsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UpgradeSettingsResponse)(nil)).Elem()
}

func (i UpgradeSettingsResponseArgs) ToUpgradeSettingsResponseOutput() UpgradeSettingsResponseOutput {
	return i.ToUpgradeSettingsResponseOutputWithContext(context.Background())
}

func (i UpgradeSettingsResponseArgs) ToUpgradeSettingsResponseOutputWithContext(ctx context.Context) UpgradeSettingsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradeSettingsResponseOutput)
}

func (i UpgradeSettingsResponseArgs) ToUpgradeSettingsResponsePtrOutput() UpgradeSettingsResponsePtrOutput {
	return i.ToUpgradeSettingsResponsePtrOutputWithContext(context.Background())
}

func (i UpgradeSettingsResponseArgs) ToUpgradeSettingsResponsePtrOutputWithContext(ctx context.Context) UpgradeSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradeSettingsResponseOutput).ToUpgradeSettingsResponsePtrOutputWithContext(ctx)
}

// UpgradeSettingsResponsePtrInput is an input type that accepts UpgradeSettingsResponseArgs, UpgradeSettingsResponsePtr and UpgradeSettingsResponsePtrOutput values.
// You can construct a concrete instance of `UpgradeSettingsResponsePtrInput` via:
//
//          UpgradeSettingsResponseArgs{...}
//
//  or:
//
//          nil
type UpgradeSettingsResponsePtrInput interface {
	pulumi.Input

	ToUpgradeSettingsResponsePtrOutput() UpgradeSettingsResponsePtrOutput
	ToUpgradeSettingsResponsePtrOutputWithContext(context.Context) UpgradeSettingsResponsePtrOutput
}

type upgradeSettingsResponsePtrType UpgradeSettingsResponseArgs

func UpgradeSettingsResponsePtr(v *UpgradeSettingsResponseArgs) UpgradeSettingsResponsePtrInput {
	return (*upgradeSettingsResponsePtrType)(v)
}

func (*upgradeSettingsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UpgradeSettingsResponse)(nil)).Elem()
}

func (i *upgradeSettingsResponsePtrType) ToUpgradeSettingsResponsePtrOutput() UpgradeSettingsResponsePtrOutput {
	return i.ToUpgradeSettingsResponsePtrOutputWithContext(context.Background())
}

func (i *upgradeSettingsResponsePtrType) ToUpgradeSettingsResponsePtrOutputWithContext(ctx context.Context) UpgradeSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradeSettingsResponsePtrOutput)
}

// These upgrade settings control the level of parallelism and the level of disruption caused by an upgrade. maxUnavailable controls the number of nodes that can be simultaneously unavailable. maxSurge controls the number of additional nodes that can be added to the node pool temporarily for the time of the upgrade to increase the number of available nodes. (maxUnavailable + maxSurge) determines the level of parallelism (how many nodes are being upgraded at the same time). Note: upgrades inevitably introduce some disruption since workloads need to be moved from old nodes to new, upgraded ones. Even if maxUnavailable=0, this holds true. (Disruption stays within the limits of PodDisruptionBudget, if it is configured.) Consider a hypothetical node pool with 5 nodes having maxSurge=2, maxUnavailable=1. This means the upgrade process upgrades 3 nodes simultaneously. It creates 2 additional (upgraded) nodes, then it brings down 3 old (not yet upgraded) nodes at the same time. This ensures that there are always at least 4 nodes available.
type UpgradeSettingsResponseOutput struct{ *pulumi.OutputState }

func (UpgradeSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpgradeSettingsResponse)(nil)).Elem()
}

func (o UpgradeSettingsResponseOutput) ToUpgradeSettingsResponseOutput() UpgradeSettingsResponseOutput {
	return o
}

func (o UpgradeSettingsResponseOutput) ToUpgradeSettingsResponseOutputWithContext(ctx context.Context) UpgradeSettingsResponseOutput {
	return o
}

func (o UpgradeSettingsResponseOutput) ToUpgradeSettingsResponsePtrOutput() UpgradeSettingsResponsePtrOutput {
	return o.ToUpgradeSettingsResponsePtrOutputWithContext(context.Background())
}

func (o UpgradeSettingsResponseOutput) ToUpgradeSettingsResponsePtrOutputWithContext(ctx context.Context) UpgradeSettingsResponsePtrOutput {
	return o.ApplyT(func(v UpgradeSettingsResponse) *UpgradeSettingsResponse {
		return &v
	}).(UpgradeSettingsResponsePtrOutput)
}

// The maximum number of nodes that can be created beyond the current size of the node pool during the upgrade process.
func (o UpgradeSettingsResponseOutput) MaxSurge() pulumi.IntOutput {
	return o.ApplyT(func(v UpgradeSettingsResponse) int { return v.MaxSurge }).(pulumi.IntOutput)
}

// The maximum number of nodes that can be simultaneously unavailable during the upgrade process. A node is considered available if its status is Ready.
func (o UpgradeSettingsResponseOutput) MaxUnavailable() pulumi.IntOutput {
	return o.ApplyT(func(v UpgradeSettingsResponse) int { return v.MaxUnavailable }).(pulumi.IntOutput)
}

type UpgradeSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (UpgradeSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UpgradeSettingsResponse)(nil)).Elem()
}

func (o UpgradeSettingsResponsePtrOutput) ToUpgradeSettingsResponsePtrOutput() UpgradeSettingsResponsePtrOutput {
	return o
}

func (o UpgradeSettingsResponsePtrOutput) ToUpgradeSettingsResponsePtrOutputWithContext(ctx context.Context) UpgradeSettingsResponsePtrOutput {
	return o
}

func (o UpgradeSettingsResponsePtrOutput) Elem() UpgradeSettingsResponseOutput {
	return o.ApplyT(func(v *UpgradeSettingsResponse) UpgradeSettingsResponse { return *v }).(UpgradeSettingsResponseOutput)
}

// The maximum number of nodes that can be created beyond the current size of the node pool during the upgrade process.
func (o UpgradeSettingsResponsePtrOutput) MaxSurge() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *UpgradeSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.MaxSurge
	}).(pulumi.IntPtrOutput)
}

// The maximum number of nodes that can be simultaneously unavailable during the upgrade process. A node is considered available if its status is Ready.
func (o UpgradeSettingsResponsePtrOutput) MaxUnavailable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *UpgradeSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.MaxUnavailable
	}).(pulumi.IntPtrOutput)
}

// VerticalPodAutoscaling contains global, per-cluster information required by Vertical Pod Autoscaler to automatically adjust the resources of pods controlled by it.
type VerticalPodAutoscaling struct {
	// Enables vertical pod autoscaling.
	Enabled *bool `pulumi:"enabled"`
}

// VerticalPodAutoscalingInput is an input type that accepts VerticalPodAutoscalingArgs and VerticalPodAutoscalingOutput values.
// You can construct a concrete instance of `VerticalPodAutoscalingInput` via:
//
//          VerticalPodAutoscalingArgs{...}
type VerticalPodAutoscalingInput interface {
	pulumi.Input

	ToVerticalPodAutoscalingOutput() VerticalPodAutoscalingOutput
	ToVerticalPodAutoscalingOutputWithContext(context.Context) VerticalPodAutoscalingOutput
}

// VerticalPodAutoscaling contains global, per-cluster information required by Vertical Pod Autoscaler to automatically adjust the resources of pods controlled by it.
type VerticalPodAutoscalingArgs struct {
	// Enables vertical pod autoscaling.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (VerticalPodAutoscalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VerticalPodAutoscaling)(nil)).Elem()
}

func (i VerticalPodAutoscalingArgs) ToVerticalPodAutoscalingOutput() VerticalPodAutoscalingOutput {
	return i.ToVerticalPodAutoscalingOutputWithContext(context.Background())
}

func (i VerticalPodAutoscalingArgs) ToVerticalPodAutoscalingOutputWithContext(ctx context.Context) VerticalPodAutoscalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VerticalPodAutoscalingOutput)
}

func (i VerticalPodAutoscalingArgs) ToVerticalPodAutoscalingPtrOutput() VerticalPodAutoscalingPtrOutput {
	return i.ToVerticalPodAutoscalingPtrOutputWithContext(context.Background())
}

func (i VerticalPodAutoscalingArgs) ToVerticalPodAutoscalingPtrOutputWithContext(ctx context.Context) VerticalPodAutoscalingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VerticalPodAutoscalingOutput).ToVerticalPodAutoscalingPtrOutputWithContext(ctx)
}

// VerticalPodAutoscalingPtrInput is an input type that accepts VerticalPodAutoscalingArgs, VerticalPodAutoscalingPtr and VerticalPodAutoscalingPtrOutput values.
// You can construct a concrete instance of `VerticalPodAutoscalingPtrInput` via:
//
//          VerticalPodAutoscalingArgs{...}
//
//  or:
//
//          nil
type VerticalPodAutoscalingPtrInput interface {
	pulumi.Input

	ToVerticalPodAutoscalingPtrOutput() VerticalPodAutoscalingPtrOutput
	ToVerticalPodAutoscalingPtrOutputWithContext(context.Context) VerticalPodAutoscalingPtrOutput
}

type verticalPodAutoscalingPtrType VerticalPodAutoscalingArgs

func VerticalPodAutoscalingPtr(v *VerticalPodAutoscalingArgs) VerticalPodAutoscalingPtrInput {
	return (*verticalPodAutoscalingPtrType)(v)
}

func (*verticalPodAutoscalingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VerticalPodAutoscaling)(nil)).Elem()
}

func (i *verticalPodAutoscalingPtrType) ToVerticalPodAutoscalingPtrOutput() VerticalPodAutoscalingPtrOutput {
	return i.ToVerticalPodAutoscalingPtrOutputWithContext(context.Background())
}

func (i *verticalPodAutoscalingPtrType) ToVerticalPodAutoscalingPtrOutputWithContext(ctx context.Context) VerticalPodAutoscalingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VerticalPodAutoscalingPtrOutput)
}

// VerticalPodAutoscaling contains global, per-cluster information required by Vertical Pod Autoscaler to automatically adjust the resources of pods controlled by it.
type VerticalPodAutoscalingOutput struct{ *pulumi.OutputState }

func (VerticalPodAutoscalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VerticalPodAutoscaling)(nil)).Elem()
}

func (o VerticalPodAutoscalingOutput) ToVerticalPodAutoscalingOutput() VerticalPodAutoscalingOutput {
	return o
}

func (o VerticalPodAutoscalingOutput) ToVerticalPodAutoscalingOutputWithContext(ctx context.Context) VerticalPodAutoscalingOutput {
	return o
}

func (o VerticalPodAutoscalingOutput) ToVerticalPodAutoscalingPtrOutput() VerticalPodAutoscalingPtrOutput {
	return o.ToVerticalPodAutoscalingPtrOutputWithContext(context.Background())
}

func (o VerticalPodAutoscalingOutput) ToVerticalPodAutoscalingPtrOutputWithContext(ctx context.Context) VerticalPodAutoscalingPtrOutput {
	return o.ApplyT(func(v VerticalPodAutoscaling) *VerticalPodAutoscaling {
		return &v
	}).(VerticalPodAutoscalingPtrOutput)
}

// Enables vertical pod autoscaling.
func (o VerticalPodAutoscalingOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VerticalPodAutoscaling) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type VerticalPodAutoscalingPtrOutput struct{ *pulumi.OutputState }

func (VerticalPodAutoscalingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VerticalPodAutoscaling)(nil)).Elem()
}

func (o VerticalPodAutoscalingPtrOutput) ToVerticalPodAutoscalingPtrOutput() VerticalPodAutoscalingPtrOutput {
	return o
}

func (o VerticalPodAutoscalingPtrOutput) ToVerticalPodAutoscalingPtrOutputWithContext(ctx context.Context) VerticalPodAutoscalingPtrOutput {
	return o
}

func (o VerticalPodAutoscalingPtrOutput) Elem() VerticalPodAutoscalingOutput {
	return o.ApplyT(func(v *VerticalPodAutoscaling) VerticalPodAutoscaling { return *v }).(VerticalPodAutoscalingOutput)
}

// Enables vertical pod autoscaling.
func (o VerticalPodAutoscalingPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VerticalPodAutoscaling) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// VerticalPodAutoscaling contains global, per-cluster information required by Vertical Pod Autoscaler to automatically adjust the resources of pods controlled by it.
type VerticalPodAutoscalingResponse struct {
	// Enables vertical pod autoscaling.
	Enabled bool `pulumi:"enabled"`
}

// VerticalPodAutoscalingResponseInput is an input type that accepts VerticalPodAutoscalingResponseArgs and VerticalPodAutoscalingResponseOutput values.
// You can construct a concrete instance of `VerticalPodAutoscalingResponseInput` via:
//
//          VerticalPodAutoscalingResponseArgs{...}
type VerticalPodAutoscalingResponseInput interface {
	pulumi.Input

	ToVerticalPodAutoscalingResponseOutput() VerticalPodAutoscalingResponseOutput
	ToVerticalPodAutoscalingResponseOutputWithContext(context.Context) VerticalPodAutoscalingResponseOutput
}

// VerticalPodAutoscaling contains global, per-cluster information required by Vertical Pod Autoscaler to automatically adjust the resources of pods controlled by it.
type VerticalPodAutoscalingResponseArgs struct {
	// Enables vertical pod autoscaling.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

func (VerticalPodAutoscalingResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VerticalPodAutoscalingResponse)(nil)).Elem()
}

func (i VerticalPodAutoscalingResponseArgs) ToVerticalPodAutoscalingResponseOutput() VerticalPodAutoscalingResponseOutput {
	return i.ToVerticalPodAutoscalingResponseOutputWithContext(context.Background())
}

func (i VerticalPodAutoscalingResponseArgs) ToVerticalPodAutoscalingResponseOutputWithContext(ctx context.Context) VerticalPodAutoscalingResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VerticalPodAutoscalingResponseOutput)
}

func (i VerticalPodAutoscalingResponseArgs) ToVerticalPodAutoscalingResponsePtrOutput() VerticalPodAutoscalingResponsePtrOutput {
	return i.ToVerticalPodAutoscalingResponsePtrOutputWithContext(context.Background())
}

func (i VerticalPodAutoscalingResponseArgs) ToVerticalPodAutoscalingResponsePtrOutputWithContext(ctx context.Context) VerticalPodAutoscalingResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VerticalPodAutoscalingResponseOutput).ToVerticalPodAutoscalingResponsePtrOutputWithContext(ctx)
}

// VerticalPodAutoscalingResponsePtrInput is an input type that accepts VerticalPodAutoscalingResponseArgs, VerticalPodAutoscalingResponsePtr and VerticalPodAutoscalingResponsePtrOutput values.
// You can construct a concrete instance of `VerticalPodAutoscalingResponsePtrInput` via:
//
//          VerticalPodAutoscalingResponseArgs{...}
//
//  or:
//
//          nil
type VerticalPodAutoscalingResponsePtrInput interface {
	pulumi.Input

	ToVerticalPodAutoscalingResponsePtrOutput() VerticalPodAutoscalingResponsePtrOutput
	ToVerticalPodAutoscalingResponsePtrOutputWithContext(context.Context) VerticalPodAutoscalingResponsePtrOutput
}

type verticalPodAutoscalingResponsePtrType VerticalPodAutoscalingResponseArgs

func VerticalPodAutoscalingResponsePtr(v *VerticalPodAutoscalingResponseArgs) VerticalPodAutoscalingResponsePtrInput {
	return (*verticalPodAutoscalingResponsePtrType)(v)
}

func (*verticalPodAutoscalingResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VerticalPodAutoscalingResponse)(nil)).Elem()
}

func (i *verticalPodAutoscalingResponsePtrType) ToVerticalPodAutoscalingResponsePtrOutput() VerticalPodAutoscalingResponsePtrOutput {
	return i.ToVerticalPodAutoscalingResponsePtrOutputWithContext(context.Background())
}

func (i *verticalPodAutoscalingResponsePtrType) ToVerticalPodAutoscalingResponsePtrOutputWithContext(ctx context.Context) VerticalPodAutoscalingResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VerticalPodAutoscalingResponsePtrOutput)
}

// VerticalPodAutoscaling contains global, per-cluster information required by Vertical Pod Autoscaler to automatically adjust the resources of pods controlled by it.
type VerticalPodAutoscalingResponseOutput struct{ *pulumi.OutputState }

func (VerticalPodAutoscalingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VerticalPodAutoscalingResponse)(nil)).Elem()
}

func (o VerticalPodAutoscalingResponseOutput) ToVerticalPodAutoscalingResponseOutput() VerticalPodAutoscalingResponseOutput {
	return o
}

func (o VerticalPodAutoscalingResponseOutput) ToVerticalPodAutoscalingResponseOutputWithContext(ctx context.Context) VerticalPodAutoscalingResponseOutput {
	return o
}

func (o VerticalPodAutoscalingResponseOutput) ToVerticalPodAutoscalingResponsePtrOutput() VerticalPodAutoscalingResponsePtrOutput {
	return o.ToVerticalPodAutoscalingResponsePtrOutputWithContext(context.Background())
}

func (o VerticalPodAutoscalingResponseOutput) ToVerticalPodAutoscalingResponsePtrOutputWithContext(ctx context.Context) VerticalPodAutoscalingResponsePtrOutput {
	return o.ApplyT(func(v VerticalPodAutoscalingResponse) *VerticalPodAutoscalingResponse {
		return &v
	}).(VerticalPodAutoscalingResponsePtrOutput)
}

// Enables vertical pod autoscaling.
func (o VerticalPodAutoscalingResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v VerticalPodAutoscalingResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type VerticalPodAutoscalingResponsePtrOutput struct{ *pulumi.OutputState }

func (VerticalPodAutoscalingResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VerticalPodAutoscalingResponse)(nil)).Elem()
}

func (o VerticalPodAutoscalingResponsePtrOutput) ToVerticalPodAutoscalingResponsePtrOutput() VerticalPodAutoscalingResponsePtrOutput {
	return o
}

func (o VerticalPodAutoscalingResponsePtrOutput) ToVerticalPodAutoscalingResponsePtrOutputWithContext(ctx context.Context) VerticalPodAutoscalingResponsePtrOutput {
	return o
}

func (o VerticalPodAutoscalingResponsePtrOutput) Elem() VerticalPodAutoscalingResponseOutput {
	return o.ApplyT(func(v *VerticalPodAutoscalingResponse) VerticalPodAutoscalingResponse { return *v }).(VerticalPodAutoscalingResponseOutput)
}

// Enables vertical pod autoscaling.
func (o VerticalPodAutoscalingResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VerticalPodAutoscalingResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Configuration for the use of Kubernetes Service Accounts in GCP IAM policies.
type WorkloadIdentityConfig struct {
	// The workload pool to attach all Kubernetes service accounts to.
	WorkloadPool *string `pulumi:"workloadPool"`
}

// WorkloadIdentityConfigInput is an input type that accepts WorkloadIdentityConfigArgs and WorkloadIdentityConfigOutput values.
// You can construct a concrete instance of `WorkloadIdentityConfigInput` via:
//
//          WorkloadIdentityConfigArgs{...}
type WorkloadIdentityConfigInput interface {
	pulumi.Input

	ToWorkloadIdentityConfigOutput() WorkloadIdentityConfigOutput
	ToWorkloadIdentityConfigOutputWithContext(context.Context) WorkloadIdentityConfigOutput
}

// Configuration for the use of Kubernetes Service Accounts in GCP IAM policies.
type WorkloadIdentityConfigArgs struct {
	// The workload pool to attach all Kubernetes service accounts to.
	WorkloadPool pulumi.StringPtrInput `pulumi:"workloadPool"`
}

func (WorkloadIdentityConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkloadIdentityConfig)(nil)).Elem()
}

func (i WorkloadIdentityConfigArgs) ToWorkloadIdentityConfigOutput() WorkloadIdentityConfigOutput {
	return i.ToWorkloadIdentityConfigOutputWithContext(context.Background())
}

func (i WorkloadIdentityConfigArgs) ToWorkloadIdentityConfigOutputWithContext(ctx context.Context) WorkloadIdentityConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadIdentityConfigOutput)
}

func (i WorkloadIdentityConfigArgs) ToWorkloadIdentityConfigPtrOutput() WorkloadIdentityConfigPtrOutput {
	return i.ToWorkloadIdentityConfigPtrOutputWithContext(context.Background())
}

func (i WorkloadIdentityConfigArgs) ToWorkloadIdentityConfigPtrOutputWithContext(ctx context.Context) WorkloadIdentityConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadIdentityConfigOutput).ToWorkloadIdentityConfigPtrOutputWithContext(ctx)
}

// WorkloadIdentityConfigPtrInput is an input type that accepts WorkloadIdentityConfigArgs, WorkloadIdentityConfigPtr and WorkloadIdentityConfigPtrOutput values.
// You can construct a concrete instance of `WorkloadIdentityConfigPtrInput` via:
//
//          WorkloadIdentityConfigArgs{...}
//
//  or:
//
//          nil
type WorkloadIdentityConfigPtrInput interface {
	pulumi.Input

	ToWorkloadIdentityConfigPtrOutput() WorkloadIdentityConfigPtrOutput
	ToWorkloadIdentityConfigPtrOutputWithContext(context.Context) WorkloadIdentityConfigPtrOutput
}

type workloadIdentityConfigPtrType WorkloadIdentityConfigArgs

func WorkloadIdentityConfigPtr(v *WorkloadIdentityConfigArgs) WorkloadIdentityConfigPtrInput {
	return (*workloadIdentityConfigPtrType)(v)
}

func (*workloadIdentityConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkloadIdentityConfig)(nil)).Elem()
}

func (i *workloadIdentityConfigPtrType) ToWorkloadIdentityConfigPtrOutput() WorkloadIdentityConfigPtrOutput {
	return i.ToWorkloadIdentityConfigPtrOutputWithContext(context.Background())
}

func (i *workloadIdentityConfigPtrType) ToWorkloadIdentityConfigPtrOutputWithContext(ctx context.Context) WorkloadIdentityConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadIdentityConfigPtrOutput)
}

// Configuration for the use of Kubernetes Service Accounts in GCP IAM policies.
type WorkloadIdentityConfigOutput struct{ *pulumi.OutputState }

func (WorkloadIdentityConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkloadIdentityConfig)(nil)).Elem()
}

func (o WorkloadIdentityConfigOutput) ToWorkloadIdentityConfigOutput() WorkloadIdentityConfigOutput {
	return o
}

func (o WorkloadIdentityConfigOutput) ToWorkloadIdentityConfigOutputWithContext(ctx context.Context) WorkloadIdentityConfigOutput {
	return o
}

func (o WorkloadIdentityConfigOutput) ToWorkloadIdentityConfigPtrOutput() WorkloadIdentityConfigPtrOutput {
	return o.ToWorkloadIdentityConfigPtrOutputWithContext(context.Background())
}

func (o WorkloadIdentityConfigOutput) ToWorkloadIdentityConfigPtrOutputWithContext(ctx context.Context) WorkloadIdentityConfigPtrOutput {
	return o.ApplyT(func(v WorkloadIdentityConfig) *WorkloadIdentityConfig {
		return &v
	}).(WorkloadIdentityConfigPtrOutput)
}

// The workload pool to attach all Kubernetes service accounts to.
func (o WorkloadIdentityConfigOutput) WorkloadPool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkloadIdentityConfig) *string { return v.WorkloadPool }).(pulumi.StringPtrOutput)
}

type WorkloadIdentityConfigPtrOutput struct{ *pulumi.OutputState }

func (WorkloadIdentityConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkloadIdentityConfig)(nil)).Elem()
}

func (o WorkloadIdentityConfigPtrOutput) ToWorkloadIdentityConfigPtrOutput() WorkloadIdentityConfigPtrOutput {
	return o
}

func (o WorkloadIdentityConfigPtrOutput) ToWorkloadIdentityConfigPtrOutputWithContext(ctx context.Context) WorkloadIdentityConfigPtrOutput {
	return o
}

func (o WorkloadIdentityConfigPtrOutput) Elem() WorkloadIdentityConfigOutput {
	return o.ApplyT(func(v *WorkloadIdentityConfig) WorkloadIdentityConfig { return *v }).(WorkloadIdentityConfigOutput)
}

// The workload pool to attach all Kubernetes service accounts to.
func (o WorkloadIdentityConfigPtrOutput) WorkloadPool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkloadIdentityConfig) *string {
		if v == nil {
			return nil
		}
		return v.WorkloadPool
	}).(pulumi.StringPtrOutput)
}

// Configuration for the use of Kubernetes Service Accounts in GCP IAM policies.
type WorkloadIdentityConfigResponse struct {
	// The workload pool to attach all Kubernetes service accounts to.
	WorkloadPool string `pulumi:"workloadPool"`
}

// WorkloadIdentityConfigResponseInput is an input type that accepts WorkloadIdentityConfigResponseArgs and WorkloadIdentityConfigResponseOutput values.
// You can construct a concrete instance of `WorkloadIdentityConfigResponseInput` via:
//
//          WorkloadIdentityConfigResponseArgs{...}
type WorkloadIdentityConfigResponseInput interface {
	pulumi.Input

	ToWorkloadIdentityConfigResponseOutput() WorkloadIdentityConfigResponseOutput
	ToWorkloadIdentityConfigResponseOutputWithContext(context.Context) WorkloadIdentityConfigResponseOutput
}

// Configuration for the use of Kubernetes Service Accounts in GCP IAM policies.
type WorkloadIdentityConfigResponseArgs struct {
	// The workload pool to attach all Kubernetes service accounts to.
	WorkloadPool pulumi.StringInput `pulumi:"workloadPool"`
}

func (WorkloadIdentityConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkloadIdentityConfigResponse)(nil)).Elem()
}

func (i WorkloadIdentityConfigResponseArgs) ToWorkloadIdentityConfigResponseOutput() WorkloadIdentityConfigResponseOutput {
	return i.ToWorkloadIdentityConfigResponseOutputWithContext(context.Background())
}

func (i WorkloadIdentityConfigResponseArgs) ToWorkloadIdentityConfigResponseOutputWithContext(ctx context.Context) WorkloadIdentityConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadIdentityConfigResponseOutput)
}

func (i WorkloadIdentityConfigResponseArgs) ToWorkloadIdentityConfigResponsePtrOutput() WorkloadIdentityConfigResponsePtrOutput {
	return i.ToWorkloadIdentityConfigResponsePtrOutputWithContext(context.Background())
}

func (i WorkloadIdentityConfigResponseArgs) ToWorkloadIdentityConfigResponsePtrOutputWithContext(ctx context.Context) WorkloadIdentityConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadIdentityConfigResponseOutput).ToWorkloadIdentityConfigResponsePtrOutputWithContext(ctx)
}

// WorkloadIdentityConfigResponsePtrInput is an input type that accepts WorkloadIdentityConfigResponseArgs, WorkloadIdentityConfigResponsePtr and WorkloadIdentityConfigResponsePtrOutput values.
// You can construct a concrete instance of `WorkloadIdentityConfigResponsePtrInput` via:
//
//          WorkloadIdentityConfigResponseArgs{...}
//
//  or:
//
//          nil
type WorkloadIdentityConfigResponsePtrInput interface {
	pulumi.Input

	ToWorkloadIdentityConfigResponsePtrOutput() WorkloadIdentityConfigResponsePtrOutput
	ToWorkloadIdentityConfigResponsePtrOutputWithContext(context.Context) WorkloadIdentityConfigResponsePtrOutput
}

type workloadIdentityConfigResponsePtrType WorkloadIdentityConfigResponseArgs

func WorkloadIdentityConfigResponsePtr(v *WorkloadIdentityConfigResponseArgs) WorkloadIdentityConfigResponsePtrInput {
	return (*workloadIdentityConfigResponsePtrType)(v)
}

func (*workloadIdentityConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkloadIdentityConfigResponse)(nil)).Elem()
}

func (i *workloadIdentityConfigResponsePtrType) ToWorkloadIdentityConfigResponsePtrOutput() WorkloadIdentityConfigResponsePtrOutput {
	return i.ToWorkloadIdentityConfigResponsePtrOutputWithContext(context.Background())
}

func (i *workloadIdentityConfigResponsePtrType) ToWorkloadIdentityConfigResponsePtrOutputWithContext(ctx context.Context) WorkloadIdentityConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadIdentityConfigResponsePtrOutput)
}

// Configuration for the use of Kubernetes Service Accounts in GCP IAM policies.
type WorkloadIdentityConfigResponseOutput struct{ *pulumi.OutputState }

func (WorkloadIdentityConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkloadIdentityConfigResponse)(nil)).Elem()
}

func (o WorkloadIdentityConfigResponseOutput) ToWorkloadIdentityConfigResponseOutput() WorkloadIdentityConfigResponseOutput {
	return o
}

func (o WorkloadIdentityConfigResponseOutput) ToWorkloadIdentityConfigResponseOutputWithContext(ctx context.Context) WorkloadIdentityConfigResponseOutput {
	return o
}

func (o WorkloadIdentityConfigResponseOutput) ToWorkloadIdentityConfigResponsePtrOutput() WorkloadIdentityConfigResponsePtrOutput {
	return o.ToWorkloadIdentityConfigResponsePtrOutputWithContext(context.Background())
}

func (o WorkloadIdentityConfigResponseOutput) ToWorkloadIdentityConfigResponsePtrOutputWithContext(ctx context.Context) WorkloadIdentityConfigResponsePtrOutput {
	return o.ApplyT(func(v WorkloadIdentityConfigResponse) *WorkloadIdentityConfigResponse {
		return &v
	}).(WorkloadIdentityConfigResponsePtrOutput)
}

// The workload pool to attach all Kubernetes service accounts to.
func (o WorkloadIdentityConfigResponseOutput) WorkloadPool() pulumi.StringOutput {
	return o.ApplyT(func(v WorkloadIdentityConfigResponse) string { return v.WorkloadPool }).(pulumi.StringOutput)
}

type WorkloadIdentityConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (WorkloadIdentityConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkloadIdentityConfigResponse)(nil)).Elem()
}

func (o WorkloadIdentityConfigResponsePtrOutput) ToWorkloadIdentityConfigResponsePtrOutput() WorkloadIdentityConfigResponsePtrOutput {
	return o
}

func (o WorkloadIdentityConfigResponsePtrOutput) ToWorkloadIdentityConfigResponsePtrOutputWithContext(ctx context.Context) WorkloadIdentityConfigResponsePtrOutput {
	return o
}

func (o WorkloadIdentityConfigResponsePtrOutput) Elem() WorkloadIdentityConfigResponseOutput {
	return o.ApplyT(func(v *WorkloadIdentityConfigResponse) WorkloadIdentityConfigResponse { return *v }).(WorkloadIdentityConfigResponseOutput)
}

// The workload pool to attach all Kubernetes service accounts to.
func (o WorkloadIdentityConfigResponsePtrOutput) WorkloadPool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkloadIdentityConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.WorkloadPool
	}).(pulumi.StringPtrOutput)
}

// WorkloadMetadataConfig defines the metadata configuration to expose to workloads on the node pool.
type WorkloadMetadataConfig struct {
	// Mode is the configuration for how to expose metadata to workloads running on the node pool.
	Mode *string `pulumi:"mode"`
}

// WorkloadMetadataConfigInput is an input type that accepts WorkloadMetadataConfigArgs and WorkloadMetadataConfigOutput values.
// You can construct a concrete instance of `WorkloadMetadataConfigInput` via:
//
//          WorkloadMetadataConfigArgs{...}
type WorkloadMetadataConfigInput interface {
	pulumi.Input

	ToWorkloadMetadataConfigOutput() WorkloadMetadataConfigOutput
	ToWorkloadMetadataConfigOutputWithContext(context.Context) WorkloadMetadataConfigOutput
}

// WorkloadMetadataConfig defines the metadata configuration to expose to workloads on the node pool.
type WorkloadMetadataConfigArgs struct {
	// Mode is the configuration for how to expose metadata to workloads running on the node pool.
	Mode *WorkloadMetadataConfigMode `pulumi:"mode"`
}

func (WorkloadMetadataConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkloadMetadataConfig)(nil)).Elem()
}

func (i WorkloadMetadataConfigArgs) ToWorkloadMetadataConfigOutput() WorkloadMetadataConfigOutput {
	return i.ToWorkloadMetadataConfigOutputWithContext(context.Background())
}

func (i WorkloadMetadataConfigArgs) ToWorkloadMetadataConfigOutputWithContext(ctx context.Context) WorkloadMetadataConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadMetadataConfigOutput)
}

func (i WorkloadMetadataConfigArgs) ToWorkloadMetadataConfigPtrOutput() WorkloadMetadataConfigPtrOutput {
	return i.ToWorkloadMetadataConfigPtrOutputWithContext(context.Background())
}

func (i WorkloadMetadataConfigArgs) ToWorkloadMetadataConfigPtrOutputWithContext(ctx context.Context) WorkloadMetadataConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadMetadataConfigOutput).ToWorkloadMetadataConfigPtrOutputWithContext(ctx)
}

// WorkloadMetadataConfigPtrInput is an input type that accepts WorkloadMetadataConfigArgs, WorkloadMetadataConfigPtr and WorkloadMetadataConfigPtrOutput values.
// You can construct a concrete instance of `WorkloadMetadataConfigPtrInput` via:
//
//          WorkloadMetadataConfigArgs{...}
//
//  or:
//
//          nil
type WorkloadMetadataConfigPtrInput interface {
	pulumi.Input

	ToWorkloadMetadataConfigPtrOutput() WorkloadMetadataConfigPtrOutput
	ToWorkloadMetadataConfigPtrOutputWithContext(context.Context) WorkloadMetadataConfigPtrOutput
}

type workloadMetadataConfigPtrType WorkloadMetadataConfigArgs

func WorkloadMetadataConfigPtr(v *WorkloadMetadataConfigArgs) WorkloadMetadataConfigPtrInput {
	return (*workloadMetadataConfigPtrType)(v)
}

func (*workloadMetadataConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkloadMetadataConfig)(nil)).Elem()
}

func (i *workloadMetadataConfigPtrType) ToWorkloadMetadataConfigPtrOutput() WorkloadMetadataConfigPtrOutput {
	return i.ToWorkloadMetadataConfigPtrOutputWithContext(context.Background())
}

func (i *workloadMetadataConfigPtrType) ToWorkloadMetadataConfigPtrOutputWithContext(ctx context.Context) WorkloadMetadataConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadMetadataConfigPtrOutput)
}

// WorkloadMetadataConfig defines the metadata configuration to expose to workloads on the node pool.
type WorkloadMetadataConfigOutput struct{ *pulumi.OutputState }

func (WorkloadMetadataConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkloadMetadataConfig)(nil)).Elem()
}

func (o WorkloadMetadataConfigOutput) ToWorkloadMetadataConfigOutput() WorkloadMetadataConfigOutput {
	return o
}

func (o WorkloadMetadataConfigOutput) ToWorkloadMetadataConfigOutputWithContext(ctx context.Context) WorkloadMetadataConfigOutput {
	return o
}

func (o WorkloadMetadataConfigOutput) ToWorkloadMetadataConfigPtrOutput() WorkloadMetadataConfigPtrOutput {
	return o.ToWorkloadMetadataConfigPtrOutputWithContext(context.Background())
}

func (o WorkloadMetadataConfigOutput) ToWorkloadMetadataConfigPtrOutputWithContext(ctx context.Context) WorkloadMetadataConfigPtrOutput {
	return o.ApplyT(func(v WorkloadMetadataConfig) *WorkloadMetadataConfig {
		return &v
	}).(WorkloadMetadataConfigPtrOutput)
}

// Mode is the configuration for how to expose metadata to workloads running on the node pool.
func (o WorkloadMetadataConfigOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkloadMetadataConfig) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

type WorkloadMetadataConfigPtrOutput struct{ *pulumi.OutputState }

func (WorkloadMetadataConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkloadMetadataConfig)(nil)).Elem()
}

func (o WorkloadMetadataConfigPtrOutput) ToWorkloadMetadataConfigPtrOutput() WorkloadMetadataConfigPtrOutput {
	return o
}

func (o WorkloadMetadataConfigPtrOutput) ToWorkloadMetadataConfigPtrOutputWithContext(ctx context.Context) WorkloadMetadataConfigPtrOutput {
	return o
}

func (o WorkloadMetadataConfigPtrOutput) Elem() WorkloadMetadataConfigOutput {
	return o.ApplyT(func(v *WorkloadMetadataConfig) WorkloadMetadataConfig { return *v }).(WorkloadMetadataConfigOutput)
}

// Mode is the configuration for how to expose metadata to workloads running on the node pool.
func (o WorkloadMetadataConfigPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkloadMetadataConfig) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// WorkloadMetadataConfig defines the metadata configuration to expose to workloads on the node pool.
type WorkloadMetadataConfigResponse struct {
	// Mode is the configuration for how to expose metadata to workloads running on the node pool.
	Mode string `pulumi:"mode"`
}

// WorkloadMetadataConfigResponseInput is an input type that accepts WorkloadMetadataConfigResponseArgs and WorkloadMetadataConfigResponseOutput values.
// You can construct a concrete instance of `WorkloadMetadataConfigResponseInput` via:
//
//          WorkloadMetadataConfigResponseArgs{...}
type WorkloadMetadataConfigResponseInput interface {
	pulumi.Input

	ToWorkloadMetadataConfigResponseOutput() WorkloadMetadataConfigResponseOutput
	ToWorkloadMetadataConfigResponseOutputWithContext(context.Context) WorkloadMetadataConfigResponseOutput
}

// WorkloadMetadataConfig defines the metadata configuration to expose to workloads on the node pool.
type WorkloadMetadataConfigResponseArgs struct {
	// Mode is the configuration for how to expose metadata to workloads running on the node pool.
	Mode pulumi.StringInput `pulumi:"mode"`
}

func (WorkloadMetadataConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkloadMetadataConfigResponse)(nil)).Elem()
}

func (i WorkloadMetadataConfigResponseArgs) ToWorkloadMetadataConfigResponseOutput() WorkloadMetadataConfigResponseOutput {
	return i.ToWorkloadMetadataConfigResponseOutputWithContext(context.Background())
}

func (i WorkloadMetadataConfigResponseArgs) ToWorkloadMetadataConfigResponseOutputWithContext(ctx context.Context) WorkloadMetadataConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadMetadataConfigResponseOutput)
}

func (i WorkloadMetadataConfigResponseArgs) ToWorkloadMetadataConfigResponsePtrOutput() WorkloadMetadataConfigResponsePtrOutput {
	return i.ToWorkloadMetadataConfigResponsePtrOutputWithContext(context.Background())
}

func (i WorkloadMetadataConfigResponseArgs) ToWorkloadMetadataConfigResponsePtrOutputWithContext(ctx context.Context) WorkloadMetadataConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadMetadataConfigResponseOutput).ToWorkloadMetadataConfigResponsePtrOutputWithContext(ctx)
}

// WorkloadMetadataConfigResponsePtrInput is an input type that accepts WorkloadMetadataConfigResponseArgs, WorkloadMetadataConfigResponsePtr and WorkloadMetadataConfigResponsePtrOutput values.
// You can construct a concrete instance of `WorkloadMetadataConfigResponsePtrInput` via:
//
//          WorkloadMetadataConfigResponseArgs{...}
//
//  or:
//
//          nil
type WorkloadMetadataConfigResponsePtrInput interface {
	pulumi.Input

	ToWorkloadMetadataConfigResponsePtrOutput() WorkloadMetadataConfigResponsePtrOutput
	ToWorkloadMetadataConfigResponsePtrOutputWithContext(context.Context) WorkloadMetadataConfigResponsePtrOutput
}

type workloadMetadataConfigResponsePtrType WorkloadMetadataConfigResponseArgs

func WorkloadMetadataConfigResponsePtr(v *WorkloadMetadataConfigResponseArgs) WorkloadMetadataConfigResponsePtrInput {
	return (*workloadMetadataConfigResponsePtrType)(v)
}

func (*workloadMetadataConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkloadMetadataConfigResponse)(nil)).Elem()
}

func (i *workloadMetadataConfigResponsePtrType) ToWorkloadMetadataConfigResponsePtrOutput() WorkloadMetadataConfigResponsePtrOutput {
	return i.ToWorkloadMetadataConfigResponsePtrOutputWithContext(context.Background())
}

func (i *workloadMetadataConfigResponsePtrType) ToWorkloadMetadataConfigResponsePtrOutputWithContext(ctx context.Context) WorkloadMetadataConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadMetadataConfigResponsePtrOutput)
}

// WorkloadMetadataConfig defines the metadata configuration to expose to workloads on the node pool.
type WorkloadMetadataConfigResponseOutput struct{ *pulumi.OutputState }

func (WorkloadMetadataConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkloadMetadataConfigResponse)(nil)).Elem()
}

func (o WorkloadMetadataConfigResponseOutput) ToWorkloadMetadataConfigResponseOutput() WorkloadMetadataConfigResponseOutput {
	return o
}

func (o WorkloadMetadataConfigResponseOutput) ToWorkloadMetadataConfigResponseOutputWithContext(ctx context.Context) WorkloadMetadataConfigResponseOutput {
	return o
}

func (o WorkloadMetadataConfigResponseOutput) ToWorkloadMetadataConfigResponsePtrOutput() WorkloadMetadataConfigResponsePtrOutput {
	return o.ToWorkloadMetadataConfigResponsePtrOutputWithContext(context.Background())
}

func (o WorkloadMetadataConfigResponseOutput) ToWorkloadMetadataConfigResponsePtrOutputWithContext(ctx context.Context) WorkloadMetadataConfigResponsePtrOutput {
	return o.ApplyT(func(v WorkloadMetadataConfigResponse) *WorkloadMetadataConfigResponse {
		return &v
	}).(WorkloadMetadataConfigResponsePtrOutput)
}

// Mode is the configuration for how to expose metadata to workloads running on the node pool.
func (o WorkloadMetadataConfigResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v WorkloadMetadataConfigResponse) string { return v.Mode }).(pulumi.StringOutput)
}

type WorkloadMetadataConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (WorkloadMetadataConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkloadMetadataConfigResponse)(nil)).Elem()
}

func (o WorkloadMetadataConfigResponsePtrOutput) ToWorkloadMetadataConfigResponsePtrOutput() WorkloadMetadataConfigResponsePtrOutput {
	return o
}

func (o WorkloadMetadataConfigResponsePtrOutput) ToWorkloadMetadataConfigResponsePtrOutputWithContext(ctx context.Context) WorkloadMetadataConfigResponsePtrOutput {
	return o
}

func (o WorkloadMetadataConfigResponsePtrOutput) Elem() WorkloadMetadataConfigResponseOutput {
	return o.ApplyT(func(v *WorkloadMetadataConfigResponse) WorkloadMetadataConfigResponse { return *v }).(WorkloadMetadataConfigResponseOutput)
}

// Mode is the configuration for how to expose metadata to workloads running on the node pool.
func (o WorkloadMetadataConfigResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkloadMetadataConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AcceleratorConfigOutput{})
	pulumi.RegisterOutputType(AcceleratorConfigArrayOutput{})
	pulumi.RegisterOutputType(AcceleratorConfigResponseOutput{})
	pulumi.RegisterOutputType(AcceleratorConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(AddonsConfigOutput{})
	pulumi.RegisterOutputType(AddonsConfigPtrOutput{})
	pulumi.RegisterOutputType(AddonsConfigResponseOutput{})
	pulumi.RegisterOutputType(AddonsConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(AuthenticatorGroupsConfigOutput{})
	pulumi.RegisterOutputType(AuthenticatorGroupsConfigPtrOutput{})
	pulumi.RegisterOutputType(AuthenticatorGroupsConfigResponseOutput{})
	pulumi.RegisterOutputType(AuthenticatorGroupsConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(AutoUpgradeOptionsOutput{})
	pulumi.RegisterOutputType(AutoUpgradeOptionsPtrOutput{})
	pulumi.RegisterOutputType(AutoUpgradeOptionsResponseOutput{})
	pulumi.RegisterOutputType(AutoUpgradeOptionsResponsePtrOutput{})
	pulumi.RegisterOutputType(AutopilotOutput{})
	pulumi.RegisterOutputType(AutopilotPtrOutput{})
	pulumi.RegisterOutputType(AutopilotResponseOutput{})
	pulumi.RegisterOutputType(AutopilotResponsePtrOutput{})
	pulumi.RegisterOutputType(AutoprovisioningNodePoolDefaultsOutput{})
	pulumi.RegisterOutputType(AutoprovisioningNodePoolDefaultsPtrOutput{})
	pulumi.RegisterOutputType(AutoprovisioningNodePoolDefaultsResponseOutput{})
	pulumi.RegisterOutputType(AutoprovisioningNodePoolDefaultsResponsePtrOutput{})
	pulumi.RegisterOutputType(BigQueryDestinationOutput{})
	pulumi.RegisterOutputType(BigQueryDestinationPtrOutput{})
	pulumi.RegisterOutputType(BigQueryDestinationResponseOutput{})
	pulumi.RegisterOutputType(BigQueryDestinationResponsePtrOutput{})
	pulumi.RegisterOutputType(BinaryAuthorizationOutput{})
	pulumi.RegisterOutputType(BinaryAuthorizationPtrOutput{})
	pulumi.RegisterOutputType(BinaryAuthorizationResponseOutput{})
	pulumi.RegisterOutputType(BinaryAuthorizationResponsePtrOutput{})
	pulumi.RegisterOutputType(CidrBlockOutput{})
	pulumi.RegisterOutputType(CidrBlockArrayOutput{})
	pulumi.RegisterOutputType(CidrBlockResponseOutput{})
	pulumi.RegisterOutputType(CidrBlockResponseArrayOutput{})
	pulumi.RegisterOutputType(ClientCertificateConfigOutput{})
	pulumi.RegisterOutputType(ClientCertificateConfigPtrOutput{})
	pulumi.RegisterOutputType(ClientCertificateConfigResponseOutput{})
	pulumi.RegisterOutputType(ClientCertificateConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(CloudRunConfigOutput{})
	pulumi.RegisterOutputType(CloudRunConfigPtrOutput{})
	pulumi.RegisterOutputType(CloudRunConfigResponseOutput{})
	pulumi.RegisterOutputType(CloudRunConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(ClusterAutoscalingOutput{})
	pulumi.RegisterOutputType(ClusterAutoscalingPtrOutput{})
	pulumi.RegisterOutputType(ClusterAutoscalingResponseOutput{})
	pulumi.RegisterOutputType(ClusterAutoscalingResponsePtrOutput{})
	pulumi.RegisterOutputType(ClusterUpdateOutput{})
	pulumi.RegisterOutputType(ConfidentialNodesOutput{})
	pulumi.RegisterOutputType(ConfidentialNodesPtrOutput{})
	pulumi.RegisterOutputType(ConfidentialNodesResponseOutput{})
	pulumi.RegisterOutputType(ConfidentialNodesResponsePtrOutput{})
	pulumi.RegisterOutputType(ConfigConnectorConfigOutput{})
	pulumi.RegisterOutputType(ConfigConnectorConfigPtrOutput{})
	pulumi.RegisterOutputType(ConfigConnectorConfigResponseOutput{})
	pulumi.RegisterOutputType(ConfigConnectorConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(ConsumptionMeteringConfigOutput{})
	pulumi.RegisterOutputType(ConsumptionMeteringConfigPtrOutput{})
	pulumi.RegisterOutputType(ConsumptionMeteringConfigResponseOutput{})
	pulumi.RegisterOutputType(ConsumptionMeteringConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(DailyMaintenanceWindowOutput{})
	pulumi.RegisterOutputType(DailyMaintenanceWindowPtrOutput{})
	pulumi.RegisterOutputType(DailyMaintenanceWindowResponseOutput{})
	pulumi.RegisterOutputType(DailyMaintenanceWindowResponsePtrOutput{})
	pulumi.RegisterOutputType(DatabaseEncryptionOutput{})
	pulumi.RegisterOutputType(DatabaseEncryptionPtrOutput{})
	pulumi.RegisterOutputType(DatabaseEncryptionResponseOutput{})
	pulumi.RegisterOutputType(DatabaseEncryptionResponsePtrOutput{})
	pulumi.RegisterOutputType(DefaultSnatStatusOutput{})
	pulumi.RegisterOutputType(DefaultSnatStatusPtrOutput{})
	pulumi.RegisterOutputType(DefaultSnatStatusResponseOutput{})
	pulumi.RegisterOutputType(DefaultSnatStatusResponsePtrOutput{})
	pulumi.RegisterOutputType(DnsCacheConfigOutput{})
	pulumi.RegisterOutputType(DnsCacheConfigPtrOutput{})
	pulumi.RegisterOutputType(DnsCacheConfigResponseOutput{})
	pulumi.RegisterOutputType(DnsCacheConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(GcePersistentDiskCsiDriverConfigOutput{})
	pulumi.RegisterOutputType(GcePersistentDiskCsiDriverConfigPtrOutput{})
	pulumi.RegisterOutputType(GcePersistentDiskCsiDriverConfigResponseOutput{})
	pulumi.RegisterOutputType(GcePersistentDiskCsiDriverConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(HorizontalPodAutoscalingOutput{})
	pulumi.RegisterOutputType(HorizontalPodAutoscalingPtrOutput{})
	pulumi.RegisterOutputType(HorizontalPodAutoscalingResponseOutput{})
	pulumi.RegisterOutputType(HorizontalPodAutoscalingResponsePtrOutput{})
	pulumi.RegisterOutputType(HttpLoadBalancingOutput{})
	pulumi.RegisterOutputType(HttpLoadBalancingPtrOutput{})
	pulumi.RegisterOutputType(HttpLoadBalancingResponseOutput{})
	pulumi.RegisterOutputType(HttpLoadBalancingResponsePtrOutput{})
	pulumi.RegisterOutputType(IPAllocationPolicyOutput{})
	pulumi.RegisterOutputType(IPAllocationPolicyPtrOutput{})
	pulumi.RegisterOutputType(IPAllocationPolicyResponseOutput{})
	pulumi.RegisterOutputType(IPAllocationPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(IntraNodeVisibilityConfigOutput{})
	pulumi.RegisterOutputType(IntraNodeVisibilityConfigPtrOutput{})
	pulumi.RegisterOutputType(KubernetesDashboardOutput{})
	pulumi.RegisterOutputType(KubernetesDashboardPtrOutput{})
	pulumi.RegisterOutputType(KubernetesDashboardResponseOutput{})
	pulumi.RegisterOutputType(KubernetesDashboardResponsePtrOutput{})
	pulumi.RegisterOutputType(LegacyAbacOutput{})
	pulumi.RegisterOutputType(LegacyAbacPtrOutput{})
	pulumi.RegisterOutputType(LegacyAbacResponseOutput{})
	pulumi.RegisterOutputType(LegacyAbacResponsePtrOutput{})
	pulumi.RegisterOutputType(LinuxNodeConfigOutput{})
	pulumi.RegisterOutputType(LinuxNodeConfigPtrOutput{})
	pulumi.RegisterOutputType(LinuxNodeConfigResponseOutput{})
	pulumi.RegisterOutputType(LinuxNodeConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(MaintenancePolicyOutput{})
	pulumi.RegisterOutputType(MaintenancePolicyPtrOutput{})
	pulumi.RegisterOutputType(MaintenancePolicyResponseOutput{})
	pulumi.RegisterOutputType(MaintenancePolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(MaintenanceWindowOutput{})
	pulumi.RegisterOutputType(MaintenanceWindowPtrOutput{})
	pulumi.RegisterOutputType(MaintenanceWindowResponseOutput{})
	pulumi.RegisterOutputType(MaintenanceWindowResponsePtrOutput{})
	pulumi.RegisterOutputType(MasterAuthOutput{})
	pulumi.RegisterOutputType(MasterAuthPtrOutput{})
	pulumi.RegisterOutputType(MasterAuthResponseOutput{})
	pulumi.RegisterOutputType(MasterAuthResponsePtrOutput{})
	pulumi.RegisterOutputType(MasterAuthorizedNetworksConfigOutput{})
	pulumi.RegisterOutputType(MasterAuthorizedNetworksConfigPtrOutput{})
	pulumi.RegisterOutputType(MasterAuthorizedNetworksConfigResponseOutput{})
	pulumi.RegisterOutputType(MasterAuthorizedNetworksConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(MaxPodsConstraintOutput{})
	pulumi.RegisterOutputType(MaxPodsConstraintPtrOutput{})
	pulumi.RegisterOutputType(MaxPodsConstraintResponseOutput{})
	pulumi.RegisterOutputType(MaxPodsConstraintResponsePtrOutput{})
	pulumi.RegisterOutputType(NetworkConfigOutput{})
	pulumi.RegisterOutputType(NetworkConfigPtrOutput{})
	pulumi.RegisterOutputType(NetworkConfigResponseOutput{})
	pulumi.RegisterOutputType(NetworkConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(NetworkPolicyOutput{})
	pulumi.RegisterOutputType(NetworkPolicyPtrOutput{})
	pulumi.RegisterOutputType(NetworkPolicyConfigOutput{})
	pulumi.RegisterOutputType(NetworkPolicyConfigPtrOutput{})
	pulumi.RegisterOutputType(NetworkPolicyConfigResponseOutput{})
	pulumi.RegisterOutputType(NetworkPolicyConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(NetworkPolicyResponseOutput{})
	pulumi.RegisterOutputType(NetworkPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(NodeConfigOutput{})
	pulumi.RegisterOutputType(NodeConfigPtrOutput{})
	pulumi.RegisterOutputType(NodeConfigResponseOutput{})
	pulumi.RegisterOutputType(NodeConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(NodeKubeletConfigOutput{})
	pulumi.RegisterOutputType(NodeKubeletConfigPtrOutput{})
	pulumi.RegisterOutputType(NodeKubeletConfigResponseOutput{})
	pulumi.RegisterOutputType(NodeKubeletConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(NodeManagementOutput{})
	pulumi.RegisterOutputType(NodeManagementPtrOutput{})
	pulumi.RegisterOutputType(NodeManagementResponseOutput{})
	pulumi.RegisterOutputType(NodeManagementResponsePtrOutput{})
	pulumi.RegisterOutputType(NodePoolTypeOutput{})
	pulumi.RegisterOutputType(NodePoolTypeArrayOutput{})
	pulumi.RegisterOutputType(NodePoolAutoscalingOutput{})
	pulumi.RegisterOutputType(NodePoolAutoscalingPtrOutput{})
	pulumi.RegisterOutputType(NodePoolAutoscalingResponseOutput{})
	pulumi.RegisterOutputType(NodePoolAutoscalingResponsePtrOutput{})
	pulumi.RegisterOutputType(NodePoolResponseOutput{})
	pulumi.RegisterOutputType(NodePoolResponseArrayOutput{})
	pulumi.RegisterOutputType(NodeTaintOutput{})
	pulumi.RegisterOutputType(NodeTaintArrayOutput{})
	pulumi.RegisterOutputType(NodeTaintResponseOutput{})
	pulumi.RegisterOutputType(NodeTaintResponseArrayOutput{})
	pulumi.RegisterOutputType(NotificationConfigOutput{})
	pulumi.RegisterOutputType(NotificationConfigPtrOutput{})
	pulumi.RegisterOutputType(NotificationConfigResponseOutput{})
	pulumi.RegisterOutputType(NotificationConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(PrivateClusterConfigOutput{})
	pulumi.RegisterOutputType(PrivateClusterConfigPtrOutput{})
	pulumi.RegisterOutputType(PrivateClusterConfigResponseOutput{})
	pulumi.RegisterOutputType(PrivateClusterConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(PrivateClusterMasterGlobalAccessConfigOutput{})
	pulumi.RegisterOutputType(PrivateClusterMasterGlobalAccessConfigPtrOutput{})
	pulumi.RegisterOutputType(PrivateClusterMasterGlobalAccessConfigResponseOutput{})
	pulumi.RegisterOutputType(PrivateClusterMasterGlobalAccessConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(PubSubOutput{})
	pulumi.RegisterOutputType(PubSubPtrOutput{})
	pulumi.RegisterOutputType(PubSubResponseOutput{})
	pulumi.RegisterOutputType(PubSubResponsePtrOutput{})
	pulumi.RegisterOutputType(RecurringTimeWindowOutput{})
	pulumi.RegisterOutputType(RecurringTimeWindowPtrOutput{})
	pulumi.RegisterOutputType(RecurringTimeWindowResponseOutput{})
	pulumi.RegisterOutputType(RecurringTimeWindowResponsePtrOutput{})
	pulumi.RegisterOutputType(ReleaseChannelOutput{})
	pulumi.RegisterOutputType(ReleaseChannelPtrOutput{})
	pulumi.RegisterOutputType(ReleaseChannelResponseOutput{})
	pulumi.RegisterOutputType(ReleaseChannelResponsePtrOutput{})
	pulumi.RegisterOutputType(ReservationAffinityOutput{})
	pulumi.RegisterOutputType(ReservationAffinityPtrOutput{})
	pulumi.RegisterOutputType(ReservationAffinityResponseOutput{})
	pulumi.RegisterOutputType(ReservationAffinityResponsePtrOutput{})
	pulumi.RegisterOutputType(ResourceLimitOutput{})
	pulumi.RegisterOutputType(ResourceLimitArrayOutput{})
	pulumi.RegisterOutputType(ResourceLimitResponseOutput{})
	pulumi.RegisterOutputType(ResourceLimitResponseArrayOutput{})
	pulumi.RegisterOutputType(ResourceUsageExportConfigOutput{})
	pulumi.RegisterOutputType(ResourceUsageExportConfigPtrOutput{})
	pulumi.RegisterOutputType(ResourceUsageExportConfigResponseOutput{})
	pulumi.RegisterOutputType(ResourceUsageExportConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(SandboxConfigOutput{})
	pulumi.RegisterOutputType(SandboxConfigPtrOutput{})
	pulumi.RegisterOutputType(SandboxConfigResponseOutput{})
	pulumi.RegisterOutputType(SandboxConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(ShieldedInstanceConfigOutput{})
	pulumi.RegisterOutputType(ShieldedInstanceConfigPtrOutput{})
	pulumi.RegisterOutputType(ShieldedInstanceConfigResponseOutput{})
	pulumi.RegisterOutputType(ShieldedInstanceConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(ShieldedNodesOutput{})
	pulumi.RegisterOutputType(ShieldedNodesPtrOutput{})
	pulumi.RegisterOutputType(ShieldedNodesResponseOutput{})
	pulumi.RegisterOutputType(ShieldedNodesResponsePtrOutput{})
	pulumi.RegisterOutputType(StatusConditionOutput{})
	pulumi.RegisterOutputType(StatusConditionArrayOutput{})
	pulumi.RegisterOutputType(StatusConditionResponseOutput{})
	pulumi.RegisterOutputType(StatusConditionResponseArrayOutput{})
	pulumi.RegisterOutputType(TimeWindowOutput{})
	pulumi.RegisterOutputType(TimeWindowPtrOutput{})
	pulumi.RegisterOutputType(TimeWindowResponseOutput{})
	pulumi.RegisterOutputType(TimeWindowResponsePtrOutput{})
	pulumi.RegisterOutputType(UpgradeSettingsOutput{})
	pulumi.RegisterOutputType(UpgradeSettingsPtrOutput{})
	pulumi.RegisterOutputType(UpgradeSettingsResponseOutput{})
	pulumi.RegisterOutputType(UpgradeSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(VerticalPodAutoscalingOutput{})
	pulumi.RegisterOutputType(VerticalPodAutoscalingPtrOutput{})
	pulumi.RegisterOutputType(VerticalPodAutoscalingResponseOutput{})
	pulumi.RegisterOutputType(VerticalPodAutoscalingResponsePtrOutput{})
	pulumi.RegisterOutputType(WorkloadIdentityConfigOutput{})
	pulumi.RegisterOutputType(WorkloadIdentityConfigPtrOutput{})
	pulumi.RegisterOutputType(WorkloadIdentityConfigResponseOutput{})
	pulumi.RegisterOutputType(WorkloadIdentityConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(WorkloadMetadataConfigOutput{})
	pulumi.RegisterOutputType(WorkloadMetadataConfigPtrOutput{})
	pulumi.RegisterOutputType(WorkloadMetadataConfigResponseOutput{})
	pulumi.RegisterOutputType(WorkloadMetadataConfigResponsePtrOutput{})
}
