// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// AcceleratorConfig represents a Hardware Accelerator request.
type AcceleratorConfig struct {
	// The number of the accelerator cards exposed to an instance.
	AcceleratorCount *string `pulumi:"acceleratorCount"`
	// The accelerator type resource name. List of supported accelerators [here](https://cloud.google.com/compute/docs/gpus)
	AcceleratorType *string `pulumi:"acceleratorType"`
}

// AcceleratorConfigInput is an input type that accepts AcceleratorConfigArgs and AcceleratorConfigOutput values.
// You can construct a concrete instance of `AcceleratorConfigInput` via:
//
//          AcceleratorConfigArgs{...}
type AcceleratorConfigInput interface {
	pulumi.Input

	ToAcceleratorConfigOutput() AcceleratorConfigOutput
	ToAcceleratorConfigOutputWithContext(context.Context) AcceleratorConfigOutput
}

// AcceleratorConfig represents a Hardware Accelerator request.
type AcceleratorConfigArgs struct {
	// The number of the accelerator cards exposed to an instance.
	AcceleratorCount pulumi.StringPtrInput `pulumi:"acceleratorCount"`
	// The accelerator type resource name. List of supported accelerators [here](https://cloud.google.com/compute/docs/gpus)
	AcceleratorType pulumi.StringPtrInput `pulumi:"acceleratorType"`
}

func (AcceleratorConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AcceleratorConfig)(nil)).Elem()
}

func (i AcceleratorConfigArgs) ToAcceleratorConfigOutput() AcceleratorConfigOutput {
	return i.ToAcceleratorConfigOutputWithContext(context.Background())
}

func (i AcceleratorConfigArgs) ToAcceleratorConfigOutputWithContext(ctx context.Context) AcceleratorConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcceleratorConfigOutput)
}

// AcceleratorConfigArrayInput is an input type that accepts AcceleratorConfigArray and AcceleratorConfigArrayOutput values.
// You can construct a concrete instance of `AcceleratorConfigArrayInput` via:
//
//          AcceleratorConfigArray{ AcceleratorConfigArgs{...} }
type AcceleratorConfigArrayInput interface {
	pulumi.Input

	ToAcceleratorConfigArrayOutput() AcceleratorConfigArrayOutput
	ToAcceleratorConfigArrayOutputWithContext(context.Context) AcceleratorConfigArrayOutput
}

type AcceleratorConfigArray []AcceleratorConfigInput

func (AcceleratorConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AcceleratorConfig)(nil)).Elem()
}

func (i AcceleratorConfigArray) ToAcceleratorConfigArrayOutput() AcceleratorConfigArrayOutput {
	return i.ToAcceleratorConfigArrayOutputWithContext(context.Background())
}

func (i AcceleratorConfigArray) ToAcceleratorConfigArrayOutputWithContext(ctx context.Context) AcceleratorConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcceleratorConfigArrayOutput)
}

// AcceleratorConfig represents a Hardware Accelerator request.
type AcceleratorConfigOutput struct{ *pulumi.OutputState }

func (AcceleratorConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AcceleratorConfig)(nil)).Elem()
}

func (o AcceleratorConfigOutput) ToAcceleratorConfigOutput() AcceleratorConfigOutput {
	return o
}

func (o AcceleratorConfigOutput) ToAcceleratorConfigOutputWithContext(ctx context.Context) AcceleratorConfigOutput {
	return o
}

// The number of the accelerator cards exposed to an instance.
func (o AcceleratorConfigOutput) AcceleratorCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AcceleratorConfig) *string { return v.AcceleratorCount }).(pulumi.StringPtrOutput)
}

// The accelerator type resource name. List of supported accelerators [here](https://cloud.google.com/compute/docs/gpus)
func (o AcceleratorConfigOutput) AcceleratorType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AcceleratorConfig) *string { return v.AcceleratorType }).(pulumi.StringPtrOutput)
}

type AcceleratorConfigArrayOutput struct{ *pulumi.OutputState }

func (AcceleratorConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AcceleratorConfig)(nil)).Elem()
}

func (o AcceleratorConfigArrayOutput) ToAcceleratorConfigArrayOutput() AcceleratorConfigArrayOutput {
	return o
}

func (o AcceleratorConfigArrayOutput) ToAcceleratorConfigArrayOutputWithContext(ctx context.Context) AcceleratorConfigArrayOutput {
	return o
}

func (o AcceleratorConfigArrayOutput) Index(i pulumi.IntInput) AcceleratorConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AcceleratorConfig {
		return vs[0].([]AcceleratorConfig)[vs[1].(int)]
	}).(AcceleratorConfigOutput)
}

// Configuration for the addons that can be automatically spun up in the cluster, enabling additional functionality.
type AddonsConfig struct {
	// Configuration for the Cloud Run addon, which allows the user to use a managed Knative service.
	CloudRunConfig *CloudRunConfig `pulumi:"cloudRunConfig"`
	// Configuration for the ConfigConnector add-on, a Kubernetes extension to manage hosted GCP services through the Kubernetes API
	ConfigConnectorConfig *ConfigConnectorConfig `pulumi:"configConnectorConfig"`
	// Configuration for NodeLocalDNS, a dns cache running on cluster nodes
	DnsCacheConfig *DnsCacheConfig `pulumi:"dnsCacheConfig"`
	// Configuration for the Compute Engine Persistent Disk CSI driver.
	GcePersistentDiskCsiDriverConfig *GcePersistentDiskCsiDriverConfig `pulumi:"gcePersistentDiskCsiDriverConfig"`
	// Configuration for the horizontal pod autoscaling feature, which increases or decreases the number of replica pods a replication controller has based on the resource usage of the existing pods.
	HorizontalPodAutoscaling *HorizontalPodAutoscaling `pulumi:"horizontalPodAutoscaling"`
	// Configuration for the HTTP (L7) load balancing controller addon, which makes it easy to set up HTTP load balancers for services in a cluster.
	HttpLoadBalancing *HttpLoadBalancing `pulumi:"httpLoadBalancing"`
	// Configuration for the Kubernetes Dashboard. This addon is deprecated, and will be disabled in 1.15. It is recommended to use the Cloud Console to manage and monitor your Kubernetes clusters, workloads and applications. For more information, see: https://cloud.google.com/kubernetes-engine/docs/concepts/dashboards
	KubernetesDashboard *KubernetesDashboard `pulumi:"kubernetesDashboard"`
	// Configuration for NetworkPolicy. This only tracks whether the addon is enabled or not on the Master, it does not track whether network policy is enabled for the nodes.
	NetworkPolicyConfig *NetworkPolicyConfig `pulumi:"networkPolicyConfig"`
}

// AddonsConfigInput is an input type that accepts AddonsConfigArgs and AddonsConfigOutput values.
// You can construct a concrete instance of `AddonsConfigInput` via:
//
//          AddonsConfigArgs{...}
type AddonsConfigInput interface {
	pulumi.Input

	ToAddonsConfigOutput() AddonsConfigOutput
	ToAddonsConfigOutputWithContext(context.Context) AddonsConfigOutput
}

// Configuration for the addons that can be automatically spun up in the cluster, enabling additional functionality.
type AddonsConfigArgs struct {
	// Configuration for the Cloud Run addon, which allows the user to use a managed Knative service.
	CloudRunConfig CloudRunConfigPtrInput `pulumi:"cloudRunConfig"`
	// Configuration for the ConfigConnector add-on, a Kubernetes extension to manage hosted GCP services through the Kubernetes API
	ConfigConnectorConfig ConfigConnectorConfigPtrInput `pulumi:"configConnectorConfig"`
	// Configuration for NodeLocalDNS, a dns cache running on cluster nodes
	DnsCacheConfig DnsCacheConfigPtrInput `pulumi:"dnsCacheConfig"`
	// Configuration for the Compute Engine Persistent Disk CSI driver.
	GcePersistentDiskCsiDriverConfig GcePersistentDiskCsiDriverConfigPtrInput `pulumi:"gcePersistentDiskCsiDriverConfig"`
	// Configuration for the horizontal pod autoscaling feature, which increases or decreases the number of replica pods a replication controller has based on the resource usage of the existing pods.
	HorizontalPodAutoscaling HorizontalPodAutoscalingPtrInput `pulumi:"horizontalPodAutoscaling"`
	// Configuration for the HTTP (L7) load balancing controller addon, which makes it easy to set up HTTP load balancers for services in a cluster.
	HttpLoadBalancing HttpLoadBalancingPtrInput `pulumi:"httpLoadBalancing"`
	// Configuration for the Kubernetes Dashboard. This addon is deprecated, and will be disabled in 1.15. It is recommended to use the Cloud Console to manage and monitor your Kubernetes clusters, workloads and applications. For more information, see: https://cloud.google.com/kubernetes-engine/docs/concepts/dashboards
	KubernetesDashboard KubernetesDashboardPtrInput `pulumi:"kubernetesDashboard"`
	// Configuration for NetworkPolicy. This only tracks whether the addon is enabled or not on the Master, it does not track whether network policy is enabled for the nodes.
	NetworkPolicyConfig NetworkPolicyConfigPtrInput `pulumi:"networkPolicyConfig"`
}

func (AddonsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AddonsConfig)(nil)).Elem()
}

func (i AddonsConfigArgs) ToAddonsConfigOutput() AddonsConfigOutput {
	return i.ToAddonsConfigOutputWithContext(context.Background())
}

func (i AddonsConfigArgs) ToAddonsConfigOutputWithContext(ctx context.Context) AddonsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddonsConfigOutput)
}

func (i AddonsConfigArgs) ToAddonsConfigPtrOutput() AddonsConfigPtrOutput {
	return i.ToAddonsConfigPtrOutputWithContext(context.Background())
}

func (i AddonsConfigArgs) ToAddonsConfigPtrOutputWithContext(ctx context.Context) AddonsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddonsConfigOutput).ToAddonsConfigPtrOutputWithContext(ctx)
}

// AddonsConfigPtrInput is an input type that accepts AddonsConfigArgs, AddonsConfigPtr and AddonsConfigPtrOutput values.
// You can construct a concrete instance of `AddonsConfigPtrInput` via:
//
//          AddonsConfigArgs{...}
//
//  or:
//
//          nil
type AddonsConfigPtrInput interface {
	pulumi.Input

	ToAddonsConfigPtrOutput() AddonsConfigPtrOutput
	ToAddonsConfigPtrOutputWithContext(context.Context) AddonsConfigPtrOutput
}

type addonsConfigPtrType AddonsConfigArgs

func AddonsConfigPtr(v *AddonsConfigArgs) AddonsConfigPtrInput {
	return (*addonsConfigPtrType)(v)
}

func (*addonsConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AddonsConfig)(nil)).Elem()
}

func (i *addonsConfigPtrType) ToAddonsConfigPtrOutput() AddonsConfigPtrOutput {
	return i.ToAddonsConfigPtrOutputWithContext(context.Background())
}

func (i *addonsConfigPtrType) ToAddonsConfigPtrOutputWithContext(ctx context.Context) AddonsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddonsConfigPtrOutput)
}

// Configuration for the addons that can be automatically spun up in the cluster, enabling additional functionality.
type AddonsConfigOutput struct{ *pulumi.OutputState }

func (AddonsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AddonsConfig)(nil)).Elem()
}

func (o AddonsConfigOutput) ToAddonsConfigOutput() AddonsConfigOutput {
	return o
}

func (o AddonsConfigOutput) ToAddonsConfigOutputWithContext(ctx context.Context) AddonsConfigOutput {
	return o
}

func (o AddonsConfigOutput) ToAddonsConfigPtrOutput() AddonsConfigPtrOutput {
	return o.ToAddonsConfigPtrOutputWithContext(context.Background())
}

func (o AddonsConfigOutput) ToAddonsConfigPtrOutputWithContext(ctx context.Context) AddonsConfigPtrOutput {
	return o.ApplyT(func(v AddonsConfig) *AddonsConfig {
		return &v
	}).(AddonsConfigPtrOutput)
}

// Configuration for the Cloud Run addon, which allows the user to use a managed Knative service.
func (o AddonsConfigOutput) CloudRunConfig() CloudRunConfigPtrOutput {
	return o.ApplyT(func(v AddonsConfig) *CloudRunConfig { return v.CloudRunConfig }).(CloudRunConfigPtrOutput)
}

// Configuration for the ConfigConnector add-on, a Kubernetes extension to manage hosted GCP services through the Kubernetes API
func (o AddonsConfigOutput) ConfigConnectorConfig() ConfigConnectorConfigPtrOutput {
	return o.ApplyT(func(v AddonsConfig) *ConfigConnectorConfig { return v.ConfigConnectorConfig }).(ConfigConnectorConfigPtrOutput)
}

// Configuration for NodeLocalDNS, a dns cache running on cluster nodes
func (o AddonsConfigOutput) DnsCacheConfig() DnsCacheConfigPtrOutput {
	return o.ApplyT(func(v AddonsConfig) *DnsCacheConfig { return v.DnsCacheConfig }).(DnsCacheConfigPtrOutput)
}

// Configuration for the Compute Engine Persistent Disk CSI driver.
func (o AddonsConfigOutput) GcePersistentDiskCsiDriverConfig() GcePersistentDiskCsiDriverConfigPtrOutput {
	return o.ApplyT(func(v AddonsConfig) *GcePersistentDiskCsiDriverConfig { return v.GcePersistentDiskCsiDriverConfig }).(GcePersistentDiskCsiDriverConfigPtrOutput)
}

// Configuration for the horizontal pod autoscaling feature, which increases or decreases the number of replica pods a replication controller has based on the resource usage of the existing pods.
func (o AddonsConfigOutput) HorizontalPodAutoscaling() HorizontalPodAutoscalingPtrOutput {
	return o.ApplyT(func(v AddonsConfig) *HorizontalPodAutoscaling { return v.HorizontalPodAutoscaling }).(HorizontalPodAutoscalingPtrOutput)
}

// Configuration for the HTTP (L7) load balancing controller addon, which makes it easy to set up HTTP load balancers for services in a cluster.
func (o AddonsConfigOutput) HttpLoadBalancing() HttpLoadBalancingPtrOutput {
	return o.ApplyT(func(v AddonsConfig) *HttpLoadBalancing { return v.HttpLoadBalancing }).(HttpLoadBalancingPtrOutput)
}

// Configuration for the Kubernetes Dashboard. This addon is deprecated, and will be disabled in 1.15. It is recommended to use the Cloud Console to manage and monitor your Kubernetes clusters, workloads and applications. For more information, see: https://cloud.google.com/kubernetes-engine/docs/concepts/dashboards
func (o AddonsConfigOutput) KubernetesDashboard() KubernetesDashboardPtrOutput {
	return o.ApplyT(func(v AddonsConfig) *KubernetesDashboard { return v.KubernetesDashboard }).(KubernetesDashboardPtrOutput)
}

// Configuration for NetworkPolicy. This only tracks whether the addon is enabled or not on the Master, it does not track whether network policy is enabled for the nodes.
func (o AddonsConfigOutput) NetworkPolicyConfig() NetworkPolicyConfigPtrOutput {
	return o.ApplyT(func(v AddonsConfig) *NetworkPolicyConfig { return v.NetworkPolicyConfig }).(NetworkPolicyConfigPtrOutput)
}

type AddonsConfigPtrOutput struct{ *pulumi.OutputState }

func (AddonsConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AddonsConfig)(nil)).Elem()
}

func (o AddonsConfigPtrOutput) ToAddonsConfigPtrOutput() AddonsConfigPtrOutput {
	return o
}

func (o AddonsConfigPtrOutput) ToAddonsConfigPtrOutputWithContext(ctx context.Context) AddonsConfigPtrOutput {
	return o
}

func (o AddonsConfigPtrOutput) Elem() AddonsConfigOutput {
	return o.ApplyT(func(v *AddonsConfig) AddonsConfig { return *v }).(AddonsConfigOutput)
}

// Configuration for the Cloud Run addon, which allows the user to use a managed Knative service.
func (o AddonsConfigPtrOutput) CloudRunConfig() CloudRunConfigPtrOutput {
	return o.ApplyT(func(v *AddonsConfig) *CloudRunConfig {
		if v == nil {
			return nil
		}
		return v.CloudRunConfig
	}).(CloudRunConfigPtrOutput)
}

// Configuration for the ConfigConnector add-on, a Kubernetes extension to manage hosted GCP services through the Kubernetes API
func (o AddonsConfigPtrOutput) ConfigConnectorConfig() ConfigConnectorConfigPtrOutput {
	return o.ApplyT(func(v *AddonsConfig) *ConfigConnectorConfig {
		if v == nil {
			return nil
		}
		return v.ConfigConnectorConfig
	}).(ConfigConnectorConfigPtrOutput)
}

// Configuration for NodeLocalDNS, a dns cache running on cluster nodes
func (o AddonsConfigPtrOutput) DnsCacheConfig() DnsCacheConfigPtrOutput {
	return o.ApplyT(func(v *AddonsConfig) *DnsCacheConfig {
		if v == nil {
			return nil
		}
		return v.DnsCacheConfig
	}).(DnsCacheConfigPtrOutput)
}

// Configuration for the Compute Engine Persistent Disk CSI driver.
func (o AddonsConfigPtrOutput) GcePersistentDiskCsiDriverConfig() GcePersistentDiskCsiDriverConfigPtrOutput {
	return o.ApplyT(func(v *AddonsConfig) *GcePersistentDiskCsiDriverConfig {
		if v == nil {
			return nil
		}
		return v.GcePersistentDiskCsiDriverConfig
	}).(GcePersistentDiskCsiDriverConfigPtrOutput)
}

// Configuration for the horizontal pod autoscaling feature, which increases or decreases the number of replica pods a replication controller has based on the resource usage of the existing pods.
func (o AddonsConfigPtrOutput) HorizontalPodAutoscaling() HorizontalPodAutoscalingPtrOutput {
	return o.ApplyT(func(v *AddonsConfig) *HorizontalPodAutoscaling {
		if v == nil {
			return nil
		}
		return v.HorizontalPodAutoscaling
	}).(HorizontalPodAutoscalingPtrOutput)
}

// Configuration for the HTTP (L7) load balancing controller addon, which makes it easy to set up HTTP load balancers for services in a cluster.
func (o AddonsConfigPtrOutput) HttpLoadBalancing() HttpLoadBalancingPtrOutput {
	return o.ApplyT(func(v *AddonsConfig) *HttpLoadBalancing {
		if v == nil {
			return nil
		}
		return v.HttpLoadBalancing
	}).(HttpLoadBalancingPtrOutput)
}

// Configuration for the Kubernetes Dashboard. This addon is deprecated, and will be disabled in 1.15. It is recommended to use the Cloud Console to manage and monitor your Kubernetes clusters, workloads and applications. For more information, see: https://cloud.google.com/kubernetes-engine/docs/concepts/dashboards
func (o AddonsConfigPtrOutput) KubernetesDashboard() KubernetesDashboardPtrOutput {
	return o.ApplyT(func(v *AddonsConfig) *KubernetesDashboard {
		if v == nil {
			return nil
		}
		return v.KubernetesDashboard
	}).(KubernetesDashboardPtrOutput)
}

// Configuration for NetworkPolicy. This only tracks whether the addon is enabled or not on the Master, it does not track whether network policy is enabled for the nodes.
func (o AddonsConfigPtrOutput) NetworkPolicyConfig() NetworkPolicyConfigPtrOutput {
	return o.ApplyT(func(v *AddonsConfig) *NetworkPolicyConfig {
		if v == nil {
			return nil
		}
		return v.NetworkPolicyConfig
	}).(NetworkPolicyConfigPtrOutput)
}

// Configuration for returning group information from authenticators.
type AuthenticatorGroupsConfig struct {
	// Whether this cluster should return group membership lookups during authentication using a group of security groups.
	Enabled *bool `pulumi:"enabled"`
	// The name of the security group-of-groups to be used. Only relevant if enabled = true.
	SecurityGroup *string `pulumi:"securityGroup"`
}

// AuthenticatorGroupsConfigInput is an input type that accepts AuthenticatorGroupsConfigArgs and AuthenticatorGroupsConfigOutput values.
// You can construct a concrete instance of `AuthenticatorGroupsConfigInput` via:
//
//          AuthenticatorGroupsConfigArgs{...}
type AuthenticatorGroupsConfigInput interface {
	pulumi.Input

	ToAuthenticatorGroupsConfigOutput() AuthenticatorGroupsConfigOutput
	ToAuthenticatorGroupsConfigOutputWithContext(context.Context) AuthenticatorGroupsConfigOutput
}

// Configuration for returning group information from authenticators.
type AuthenticatorGroupsConfigArgs struct {
	// Whether this cluster should return group membership lookups during authentication using a group of security groups.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The name of the security group-of-groups to be used. Only relevant if enabled = true.
	SecurityGroup pulumi.StringPtrInput `pulumi:"securityGroup"`
}

func (AuthenticatorGroupsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthenticatorGroupsConfig)(nil)).Elem()
}

func (i AuthenticatorGroupsConfigArgs) ToAuthenticatorGroupsConfigOutput() AuthenticatorGroupsConfigOutput {
	return i.ToAuthenticatorGroupsConfigOutputWithContext(context.Background())
}

func (i AuthenticatorGroupsConfigArgs) ToAuthenticatorGroupsConfigOutputWithContext(ctx context.Context) AuthenticatorGroupsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthenticatorGroupsConfigOutput)
}

func (i AuthenticatorGroupsConfigArgs) ToAuthenticatorGroupsConfigPtrOutput() AuthenticatorGroupsConfigPtrOutput {
	return i.ToAuthenticatorGroupsConfigPtrOutputWithContext(context.Background())
}

func (i AuthenticatorGroupsConfigArgs) ToAuthenticatorGroupsConfigPtrOutputWithContext(ctx context.Context) AuthenticatorGroupsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthenticatorGroupsConfigOutput).ToAuthenticatorGroupsConfigPtrOutputWithContext(ctx)
}

// AuthenticatorGroupsConfigPtrInput is an input type that accepts AuthenticatorGroupsConfigArgs, AuthenticatorGroupsConfigPtr and AuthenticatorGroupsConfigPtrOutput values.
// You can construct a concrete instance of `AuthenticatorGroupsConfigPtrInput` via:
//
//          AuthenticatorGroupsConfigArgs{...}
//
//  or:
//
//          nil
type AuthenticatorGroupsConfigPtrInput interface {
	pulumi.Input

	ToAuthenticatorGroupsConfigPtrOutput() AuthenticatorGroupsConfigPtrOutput
	ToAuthenticatorGroupsConfigPtrOutputWithContext(context.Context) AuthenticatorGroupsConfigPtrOutput
}

type authenticatorGroupsConfigPtrType AuthenticatorGroupsConfigArgs

func AuthenticatorGroupsConfigPtr(v *AuthenticatorGroupsConfigArgs) AuthenticatorGroupsConfigPtrInput {
	return (*authenticatorGroupsConfigPtrType)(v)
}

func (*authenticatorGroupsConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthenticatorGroupsConfig)(nil)).Elem()
}

func (i *authenticatorGroupsConfigPtrType) ToAuthenticatorGroupsConfigPtrOutput() AuthenticatorGroupsConfigPtrOutput {
	return i.ToAuthenticatorGroupsConfigPtrOutputWithContext(context.Background())
}

func (i *authenticatorGroupsConfigPtrType) ToAuthenticatorGroupsConfigPtrOutputWithContext(ctx context.Context) AuthenticatorGroupsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthenticatorGroupsConfigPtrOutput)
}

// Configuration for returning group information from authenticators.
type AuthenticatorGroupsConfigOutput struct{ *pulumi.OutputState }

func (AuthenticatorGroupsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthenticatorGroupsConfig)(nil)).Elem()
}

func (o AuthenticatorGroupsConfigOutput) ToAuthenticatorGroupsConfigOutput() AuthenticatorGroupsConfigOutput {
	return o
}

func (o AuthenticatorGroupsConfigOutput) ToAuthenticatorGroupsConfigOutputWithContext(ctx context.Context) AuthenticatorGroupsConfigOutput {
	return o
}

func (o AuthenticatorGroupsConfigOutput) ToAuthenticatorGroupsConfigPtrOutput() AuthenticatorGroupsConfigPtrOutput {
	return o.ToAuthenticatorGroupsConfigPtrOutputWithContext(context.Background())
}

func (o AuthenticatorGroupsConfigOutput) ToAuthenticatorGroupsConfigPtrOutputWithContext(ctx context.Context) AuthenticatorGroupsConfigPtrOutput {
	return o.ApplyT(func(v AuthenticatorGroupsConfig) *AuthenticatorGroupsConfig {
		return &v
	}).(AuthenticatorGroupsConfigPtrOutput)
}

// Whether this cluster should return group membership lookups during authentication using a group of security groups.
func (o AuthenticatorGroupsConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AuthenticatorGroupsConfig) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The name of the security group-of-groups to be used. Only relevant if enabled = true.
func (o AuthenticatorGroupsConfigOutput) SecurityGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthenticatorGroupsConfig) *string { return v.SecurityGroup }).(pulumi.StringPtrOutput)
}

type AuthenticatorGroupsConfigPtrOutput struct{ *pulumi.OutputState }

func (AuthenticatorGroupsConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthenticatorGroupsConfig)(nil)).Elem()
}

func (o AuthenticatorGroupsConfigPtrOutput) ToAuthenticatorGroupsConfigPtrOutput() AuthenticatorGroupsConfigPtrOutput {
	return o
}

func (o AuthenticatorGroupsConfigPtrOutput) ToAuthenticatorGroupsConfigPtrOutputWithContext(ctx context.Context) AuthenticatorGroupsConfigPtrOutput {
	return o
}

func (o AuthenticatorGroupsConfigPtrOutput) Elem() AuthenticatorGroupsConfigOutput {
	return o.ApplyT(func(v *AuthenticatorGroupsConfig) AuthenticatorGroupsConfig { return *v }).(AuthenticatorGroupsConfigOutput)
}

// Whether this cluster should return group membership lookups during authentication using a group of security groups.
func (o AuthenticatorGroupsConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AuthenticatorGroupsConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The name of the security group-of-groups to be used. Only relevant if enabled = true.
func (o AuthenticatorGroupsConfigPtrOutput) SecurityGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthenticatorGroupsConfig) *string {
		if v == nil {
			return nil
		}
		return v.SecurityGroup
	}).(pulumi.StringPtrOutput)
}

// AutoUpgradeOptions defines the set of options for the user to control how the Auto Upgrades will proceed.
type AutoUpgradeOptions struct {
	// [Output only] This field is set when upgrades are about to commence with the approximate start time for the upgrades, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
	AutoUpgradeStartTime *string `pulumi:"autoUpgradeStartTime"`
	// [Output only] This field is set when upgrades are about to commence with the description of the upgrade.
	Description *string `pulumi:"description"`
}

// AutoUpgradeOptionsInput is an input type that accepts AutoUpgradeOptionsArgs and AutoUpgradeOptionsOutput values.
// You can construct a concrete instance of `AutoUpgradeOptionsInput` via:
//
//          AutoUpgradeOptionsArgs{...}
type AutoUpgradeOptionsInput interface {
	pulumi.Input

	ToAutoUpgradeOptionsOutput() AutoUpgradeOptionsOutput
	ToAutoUpgradeOptionsOutputWithContext(context.Context) AutoUpgradeOptionsOutput
}

// AutoUpgradeOptions defines the set of options for the user to control how the Auto Upgrades will proceed.
type AutoUpgradeOptionsArgs struct {
	// [Output only] This field is set when upgrades are about to commence with the approximate start time for the upgrades, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
	AutoUpgradeStartTime pulumi.StringPtrInput `pulumi:"autoUpgradeStartTime"`
	// [Output only] This field is set when upgrades are about to commence with the description of the upgrade.
	Description pulumi.StringPtrInput `pulumi:"description"`
}

func (AutoUpgradeOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoUpgradeOptions)(nil)).Elem()
}

func (i AutoUpgradeOptionsArgs) ToAutoUpgradeOptionsOutput() AutoUpgradeOptionsOutput {
	return i.ToAutoUpgradeOptionsOutputWithContext(context.Background())
}

func (i AutoUpgradeOptionsArgs) ToAutoUpgradeOptionsOutputWithContext(ctx context.Context) AutoUpgradeOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoUpgradeOptionsOutput)
}

func (i AutoUpgradeOptionsArgs) ToAutoUpgradeOptionsPtrOutput() AutoUpgradeOptionsPtrOutput {
	return i.ToAutoUpgradeOptionsPtrOutputWithContext(context.Background())
}

func (i AutoUpgradeOptionsArgs) ToAutoUpgradeOptionsPtrOutputWithContext(ctx context.Context) AutoUpgradeOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoUpgradeOptionsOutput).ToAutoUpgradeOptionsPtrOutputWithContext(ctx)
}

// AutoUpgradeOptionsPtrInput is an input type that accepts AutoUpgradeOptionsArgs, AutoUpgradeOptionsPtr and AutoUpgradeOptionsPtrOutput values.
// You can construct a concrete instance of `AutoUpgradeOptionsPtrInput` via:
//
//          AutoUpgradeOptionsArgs{...}
//
//  or:
//
//          nil
type AutoUpgradeOptionsPtrInput interface {
	pulumi.Input

	ToAutoUpgradeOptionsPtrOutput() AutoUpgradeOptionsPtrOutput
	ToAutoUpgradeOptionsPtrOutputWithContext(context.Context) AutoUpgradeOptionsPtrOutput
}

type autoUpgradeOptionsPtrType AutoUpgradeOptionsArgs

func AutoUpgradeOptionsPtr(v *AutoUpgradeOptionsArgs) AutoUpgradeOptionsPtrInput {
	return (*autoUpgradeOptionsPtrType)(v)
}

func (*autoUpgradeOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoUpgradeOptions)(nil)).Elem()
}

func (i *autoUpgradeOptionsPtrType) ToAutoUpgradeOptionsPtrOutput() AutoUpgradeOptionsPtrOutput {
	return i.ToAutoUpgradeOptionsPtrOutputWithContext(context.Background())
}

func (i *autoUpgradeOptionsPtrType) ToAutoUpgradeOptionsPtrOutputWithContext(ctx context.Context) AutoUpgradeOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoUpgradeOptionsPtrOutput)
}

// AutoUpgradeOptions defines the set of options for the user to control how the Auto Upgrades will proceed.
type AutoUpgradeOptionsOutput struct{ *pulumi.OutputState }

func (AutoUpgradeOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoUpgradeOptions)(nil)).Elem()
}

func (o AutoUpgradeOptionsOutput) ToAutoUpgradeOptionsOutput() AutoUpgradeOptionsOutput {
	return o
}

func (o AutoUpgradeOptionsOutput) ToAutoUpgradeOptionsOutputWithContext(ctx context.Context) AutoUpgradeOptionsOutput {
	return o
}

func (o AutoUpgradeOptionsOutput) ToAutoUpgradeOptionsPtrOutput() AutoUpgradeOptionsPtrOutput {
	return o.ToAutoUpgradeOptionsPtrOutputWithContext(context.Background())
}

func (o AutoUpgradeOptionsOutput) ToAutoUpgradeOptionsPtrOutputWithContext(ctx context.Context) AutoUpgradeOptionsPtrOutput {
	return o.ApplyT(func(v AutoUpgradeOptions) *AutoUpgradeOptions {
		return &v
	}).(AutoUpgradeOptionsPtrOutput)
}

// [Output only] This field is set when upgrades are about to commence with the approximate start time for the upgrades, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
func (o AutoUpgradeOptionsOutput) AutoUpgradeStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoUpgradeOptions) *string { return v.AutoUpgradeStartTime }).(pulumi.StringPtrOutput)
}

// [Output only] This field is set when upgrades are about to commence with the description of the upgrade.
func (o AutoUpgradeOptionsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoUpgradeOptions) *string { return v.Description }).(pulumi.StringPtrOutput)
}

type AutoUpgradeOptionsPtrOutput struct{ *pulumi.OutputState }

func (AutoUpgradeOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoUpgradeOptions)(nil)).Elem()
}

func (o AutoUpgradeOptionsPtrOutput) ToAutoUpgradeOptionsPtrOutput() AutoUpgradeOptionsPtrOutput {
	return o
}

func (o AutoUpgradeOptionsPtrOutput) ToAutoUpgradeOptionsPtrOutputWithContext(ctx context.Context) AutoUpgradeOptionsPtrOutput {
	return o
}

func (o AutoUpgradeOptionsPtrOutput) Elem() AutoUpgradeOptionsOutput {
	return o.ApplyT(func(v *AutoUpgradeOptions) AutoUpgradeOptions { return *v }).(AutoUpgradeOptionsOutput)
}

// [Output only] This field is set when upgrades are about to commence with the approximate start time for the upgrades, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
func (o AutoUpgradeOptionsPtrOutput) AutoUpgradeStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoUpgradeOptions) *string {
		if v == nil {
			return nil
		}
		return v.AutoUpgradeStartTime
	}).(pulumi.StringPtrOutput)
}

// [Output only] This field is set when upgrades are about to commence with the description of the upgrade.
func (o AutoUpgradeOptionsPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoUpgradeOptions) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Autopilot is the configuration for Autopilot settings on the cluster.
type Autopilot struct {
	// Enable Autopilot
	Enabled *bool `pulumi:"enabled"`
}

// AutopilotInput is an input type that accepts AutopilotArgs and AutopilotOutput values.
// You can construct a concrete instance of `AutopilotInput` via:
//
//          AutopilotArgs{...}
type AutopilotInput interface {
	pulumi.Input

	ToAutopilotOutput() AutopilotOutput
	ToAutopilotOutputWithContext(context.Context) AutopilotOutput
}

// Autopilot is the configuration for Autopilot settings on the cluster.
type AutopilotArgs struct {
	// Enable Autopilot
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (AutopilotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Autopilot)(nil)).Elem()
}

func (i AutopilotArgs) ToAutopilotOutput() AutopilotOutput {
	return i.ToAutopilotOutputWithContext(context.Background())
}

func (i AutopilotArgs) ToAutopilotOutputWithContext(ctx context.Context) AutopilotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutopilotOutput)
}

func (i AutopilotArgs) ToAutopilotPtrOutput() AutopilotPtrOutput {
	return i.ToAutopilotPtrOutputWithContext(context.Background())
}

func (i AutopilotArgs) ToAutopilotPtrOutputWithContext(ctx context.Context) AutopilotPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutopilotOutput).ToAutopilotPtrOutputWithContext(ctx)
}

// AutopilotPtrInput is an input type that accepts AutopilotArgs, AutopilotPtr and AutopilotPtrOutput values.
// You can construct a concrete instance of `AutopilotPtrInput` via:
//
//          AutopilotArgs{...}
//
//  or:
//
//          nil
type AutopilotPtrInput interface {
	pulumi.Input

	ToAutopilotPtrOutput() AutopilotPtrOutput
	ToAutopilotPtrOutputWithContext(context.Context) AutopilotPtrOutput
}

type autopilotPtrType AutopilotArgs

func AutopilotPtr(v *AutopilotArgs) AutopilotPtrInput {
	return (*autopilotPtrType)(v)
}

func (*autopilotPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Autopilot)(nil)).Elem()
}

func (i *autopilotPtrType) ToAutopilotPtrOutput() AutopilotPtrOutput {
	return i.ToAutopilotPtrOutputWithContext(context.Background())
}

func (i *autopilotPtrType) ToAutopilotPtrOutputWithContext(ctx context.Context) AutopilotPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutopilotPtrOutput)
}

// Autopilot is the configuration for Autopilot settings on the cluster.
type AutopilotOutput struct{ *pulumi.OutputState }

func (AutopilotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Autopilot)(nil)).Elem()
}

func (o AutopilotOutput) ToAutopilotOutput() AutopilotOutput {
	return o
}

func (o AutopilotOutput) ToAutopilotOutputWithContext(ctx context.Context) AutopilotOutput {
	return o
}

func (o AutopilotOutput) ToAutopilotPtrOutput() AutopilotPtrOutput {
	return o.ToAutopilotPtrOutputWithContext(context.Background())
}

func (o AutopilotOutput) ToAutopilotPtrOutputWithContext(ctx context.Context) AutopilotPtrOutput {
	return o.ApplyT(func(v Autopilot) *Autopilot {
		return &v
	}).(AutopilotPtrOutput)
}

// Enable Autopilot
func (o AutopilotOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Autopilot) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type AutopilotPtrOutput struct{ *pulumi.OutputState }

func (AutopilotPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Autopilot)(nil)).Elem()
}

func (o AutopilotPtrOutput) ToAutopilotPtrOutput() AutopilotPtrOutput {
	return o
}

func (o AutopilotPtrOutput) ToAutopilotPtrOutputWithContext(ctx context.Context) AutopilotPtrOutput {
	return o
}

func (o AutopilotPtrOutput) Elem() AutopilotOutput {
	return o.ApplyT(func(v *Autopilot) Autopilot { return *v }).(AutopilotOutput)
}

// Enable Autopilot
func (o AutopilotPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Autopilot) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// AutoprovisioningNodePoolDefaults contains defaults for a node pool created by NAP.
type AutoprovisioningNodePoolDefaults struct {
	// The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption
	BootDiskKmsKey *string `pulumi:"bootDiskKmsKey"`
	// Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the default disk size is 100GB.
	DiskSizeGb *int `pulumi:"diskSizeGb"`
	// Type of the disk attached to each node (e.g. 'pd-standard', 'pd-ssd' or 'pd-balanced') If unspecified, the default disk type is 'pd-standard'
	DiskType *string `pulumi:"diskType"`
	// Specifies the node management options for NAP created node-pools.
	Management *NodeManagement `pulumi:"management"`
	// Minimum CPU platform to be used for NAP created node pools. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: Intel Haswell or minCpuPlatform: Intel Sandy Bridge. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform) To unset the min cpu platform field pass "automatic" as field value.
	MinCpuPlatform *string `pulumi:"minCpuPlatform"`
	// Scopes that are used by NAP when creating node pools.
	OauthScopes []string `pulumi:"oauthScopes"`
	// The Google Cloud Platform Service Account to be used by the node VMs.
	ServiceAccount *string `pulumi:"serviceAccount"`
	// Shielded Instance options.
	ShieldedInstanceConfig *ShieldedInstanceConfig `pulumi:"shieldedInstanceConfig"`
	// Specifies the upgrade settings for NAP created node pools
	UpgradeSettings *UpgradeSettings `pulumi:"upgradeSettings"`
}

// AutoprovisioningNodePoolDefaultsInput is an input type that accepts AutoprovisioningNodePoolDefaultsArgs and AutoprovisioningNodePoolDefaultsOutput values.
// You can construct a concrete instance of `AutoprovisioningNodePoolDefaultsInput` via:
//
//          AutoprovisioningNodePoolDefaultsArgs{...}
type AutoprovisioningNodePoolDefaultsInput interface {
	pulumi.Input

	ToAutoprovisioningNodePoolDefaultsOutput() AutoprovisioningNodePoolDefaultsOutput
	ToAutoprovisioningNodePoolDefaultsOutputWithContext(context.Context) AutoprovisioningNodePoolDefaultsOutput
}

// AutoprovisioningNodePoolDefaults contains defaults for a node pool created by NAP.
type AutoprovisioningNodePoolDefaultsArgs struct {
	// The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption
	BootDiskKmsKey pulumi.StringPtrInput `pulumi:"bootDiskKmsKey"`
	// Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the default disk size is 100GB.
	DiskSizeGb pulumi.IntPtrInput `pulumi:"diskSizeGb"`
	// Type of the disk attached to each node (e.g. 'pd-standard', 'pd-ssd' or 'pd-balanced') If unspecified, the default disk type is 'pd-standard'
	DiskType pulumi.StringPtrInput `pulumi:"diskType"`
	// Specifies the node management options for NAP created node-pools.
	Management NodeManagementPtrInput `pulumi:"management"`
	// Minimum CPU platform to be used for NAP created node pools. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: Intel Haswell or minCpuPlatform: Intel Sandy Bridge. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform) To unset the min cpu platform field pass "automatic" as field value.
	MinCpuPlatform pulumi.StringPtrInput `pulumi:"minCpuPlatform"`
	// Scopes that are used by NAP when creating node pools.
	OauthScopes pulumi.StringArrayInput `pulumi:"oauthScopes"`
	// The Google Cloud Platform Service Account to be used by the node VMs.
	ServiceAccount pulumi.StringPtrInput `pulumi:"serviceAccount"`
	// Shielded Instance options.
	ShieldedInstanceConfig ShieldedInstanceConfigPtrInput `pulumi:"shieldedInstanceConfig"`
	// Specifies the upgrade settings for NAP created node pools
	UpgradeSettings UpgradeSettingsPtrInput `pulumi:"upgradeSettings"`
}

func (AutoprovisioningNodePoolDefaultsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoprovisioningNodePoolDefaults)(nil)).Elem()
}

func (i AutoprovisioningNodePoolDefaultsArgs) ToAutoprovisioningNodePoolDefaultsOutput() AutoprovisioningNodePoolDefaultsOutput {
	return i.ToAutoprovisioningNodePoolDefaultsOutputWithContext(context.Background())
}

func (i AutoprovisioningNodePoolDefaultsArgs) ToAutoprovisioningNodePoolDefaultsOutputWithContext(ctx context.Context) AutoprovisioningNodePoolDefaultsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoprovisioningNodePoolDefaultsOutput)
}

func (i AutoprovisioningNodePoolDefaultsArgs) ToAutoprovisioningNodePoolDefaultsPtrOutput() AutoprovisioningNodePoolDefaultsPtrOutput {
	return i.ToAutoprovisioningNodePoolDefaultsPtrOutputWithContext(context.Background())
}

func (i AutoprovisioningNodePoolDefaultsArgs) ToAutoprovisioningNodePoolDefaultsPtrOutputWithContext(ctx context.Context) AutoprovisioningNodePoolDefaultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoprovisioningNodePoolDefaultsOutput).ToAutoprovisioningNodePoolDefaultsPtrOutputWithContext(ctx)
}

// AutoprovisioningNodePoolDefaultsPtrInput is an input type that accepts AutoprovisioningNodePoolDefaultsArgs, AutoprovisioningNodePoolDefaultsPtr and AutoprovisioningNodePoolDefaultsPtrOutput values.
// You can construct a concrete instance of `AutoprovisioningNodePoolDefaultsPtrInput` via:
//
//          AutoprovisioningNodePoolDefaultsArgs{...}
//
//  or:
//
//          nil
type AutoprovisioningNodePoolDefaultsPtrInput interface {
	pulumi.Input

	ToAutoprovisioningNodePoolDefaultsPtrOutput() AutoprovisioningNodePoolDefaultsPtrOutput
	ToAutoprovisioningNodePoolDefaultsPtrOutputWithContext(context.Context) AutoprovisioningNodePoolDefaultsPtrOutput
}

type autoprovisioningNodePoolDefaultsPtrType AutoprovisioningNodePoolDefaultsArgs

func AutoprovisioningNodePoolDefaultsPtr(v *AutoprovisioningNodePoolDefaultsArgs) AutoprovisioningNodePoolDefaultsPtrInput {
	return (*autoprovisioningNodePoolDefaultsPtrType)(v)
}

func (*autoprovisioningNodePoolDefaultsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoprovisioningNodePoolDefaults)(nil)).Elem()
}

func (i *autoprovisioningNodePoolDefaultsPtrType) ToAutoprovisioningNodePoolDefaultsPtrOutput() AutoprovisioningNodePoolDefaultsPtrOutput {
	return i.ToAutoprovisioningNodePoolDefaultsPtrOutputWithContext(context.Background())
}

func (i *autoprovisioningNodePoolDefaultsPtrType) ToAutoprovisioningNodePoolDefaultsPtrOutputWithContext(ctx context.Context) AutoprovisioningNodePoolDefaultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoprovisioningNodePoolDefaultsPtrOutput)
}

// AutoprovisioningNodePoolDefaults contains defaults for a node pool created by NAP.
type AutoprovisioningNodePoolDefaultsOutput struct{ *pulumi.OutputState }

func (AutoprovisioningNodePoolDefaultsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoprovisioningNodePoolDefaults)(nil)).Elem()
}

func (o AutoprovisioningNodePoolDefaultsOutput) ToAutoprovisioningNodePoolDefaultsOutput() AutoprovisioningNodePoolDefaultsOutput {
	return o
}

func (o AutoprovisioningNodePoolDefaultsOutput) ToAutoprovisioningNodePoolDefaultsOutputWithContext(ctx context.Context) AutoprovisioningNodePoolDefaultsOutput {
	return o
}

func (o AutoprovisioningNodePoolDefaultsOutput) ToAutoprovisioningNodePoolDefaultsPtrOutput() AutoprovisioningNodePoolDefaultsPtrOutput {
	return o.ToAutoprovisioningNodePoolDefaultsPtrOutputWithContext(context.Background())
}

func (o AutoprovisioningNodePoolDefaultsOutput) ToAutoprovisioningNodePoolDefaultsPtrOutputWithContext(ctx context.Context) AutoprovisioningNodePoolDefaultsPtrOutput {
	return o.ApplyT(func(v AutoprovisioningNodePoolDefaults) *AutoprovisioningNodePoolDefaults {
		return &v
	}).(AutoprovisioningNodePoolDefaultsPtrOutput)
}

// The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption
func (o AutoprovisioningNodePoolDefaultsOutput) BootDiskKmsKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoprovisioningNodePoolDefaults) *string { return v.BootDiskKmsKey }).(pulumi.StringPtrOutput)
}

// Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the default disk size is 100GB.
func (o AutoprovisioningNodePoolDefaultsOutput) DiskSizeGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AutoprovisioningNodePoolDefaults) *int { return v.DiskSizeGb }).(pulumi.IntPtrOutput)
}

// Type of the disk attached to each node (e.g. 'pd-standard', 'pd-ssd' or 'pd-balanced') If unspecified, the default disk type is 'pd-standard'
func (o AutoprovisioningNodePoolDefaultsOutput) DiskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoprovisioningNodePoolDefaults) *string { return v.DiskType }).(pulumi.StringPtrOutput)
}

// Specifies the node management options for NAP created node-pools.
func (o AutoprovisioningNodePoolDefaultsOutput) Management() NodeManagementPtrOutput {
	return o.ApplyT(func(v AutoprovisioningNodePoolDefaults) *NodeManagement { return v.Management }).(NodeManagementPtrOutput)
}

// Minimum CPU platform to be used for NAP created node pools. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: Intel Haswell or minCpuPlatform: Intel Sandy Bridge. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform) To unset the min cpu platform field pass "automatic" as field value.
func (o AutoprovisioningNodePoolDefaultsOutput) MinCpuPlatform() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoprovisioningNodePoolDefaults) *string { return v.MinCpuPlatform }).(pulumi.StringPtrOutput)
}

// Scopes that are used by NAP when creating node pools.
func (o AutoprovisioningNodePoolDefaultsOutput) OauthScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AutoprovisioningNodePoolDefaults) []string { return v.OauthScopes }).(pulumi.StringArrayOutput)
}

// The Google Cloud Platform Service Account to be used by the node VMs.
func (o AutoprovisioningNodePoolDefaultsOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoprovisioningNodePoolDefaults) *string { return v.ServiceAccount }).(pulumi.StringPtrOutput)
}

// Shielded Instance options.
func (o AutoprovisioningNodePoolDefaultsOutput) ShieldedInstanceConfig() ShieldedInstanceConfigPtrOutput {
	return o.ApplyT(func(v AutoprovisioningNodePoolDefaults) *ShieldedInstanceConfig { return v.ShieldedInstanceConfig }).(ShieldedInstanceConfigPtrOutput)
}

// Specifies the upgrade settings for NAP created node pools
func (o AutoprovisioningNodePoolDefaultsOutput) UpgradeSettings() UpgradeSettingsPtrOutput {
	return o.ApplyT(func(v AutoprovisioningNodePoolDefaults) *UpgradeSettings { return v.UpgradeSettings }).(UpgradeSettingsPtrOutput)
}

type AutoprovisioningNodePoolDefaultsPtrOutput struct{ *pulumi.OutputState }

func (AutoprovisioningNodePoolDefaultsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoprovisioningNodePoolDefaults)(nil)).Elem()
}

func (o AutoprovisioningNodePoolDefaultsPtrOutput) ToAutoprovisioningNodePoolDefaultsPtrOutput() AutoprovisioningNodePoolDefaultsPtrOutput {
	return o
}

func (o AutoprovisioningNodePoolDefaultsPtrOutput) ToAutoprovisioningNodePoolDefaultsPtrOutputWithContext(ctx context.Context) AutoprovisioningNodePoolDefaultsPtrOutput {
	return o
}

func (o AutoprovisioningNodePoolDefaultsPtrOutput) Elem() AutoprovisioningNodePoolDefaultsOutput {
	return o.ApplyT(func(v *AutoprovisioningNodePoolDefaults) AutoprovisioningNodePoolDefaults { return *v }).(AutoprovisioningNodePoolDefaultsOutput)
}

// The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption
func (o AutoprovisioningNodePoolDefaultsPtrOutput) BootDiskKmsKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoprovisioningNodePoolDefaults) *string {
		if v == nil {
			return nil
		}
		return v.BootDiskKmsKey
	}).(pulumi.StringPtrOutput)
}

// Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the default disk size is 100GB.
func (o AutoprovisioningNodePoolDefaultsPtrOutput) DiskSizeGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoprovisioningNodePoolDefaults) *int {
		if v == nil {
			return nil
		}
		return v.DiskSizeGb
	}).(pulumi.IntPtrOutput)
}

// Type of the disk attached to each node (e.g. 'pd-standard', 'pd-ssd' or 'pd-balanced') If unspecified, the default disk type is 'pd-standard'
func (o AutoprovisioningNodePoolDefaultsPtrOutput) DiskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoprovisioningNodePoolDefaults) *string {
		if v == nil {
			return nil
		}
		return v.DiskType
	}).(pulumi.StringPtrOutput)
}

// Specifies the node management options for NAP created node-pools.
func (o AutoprovisioningNodePoolDefaultsPtrOutput) Management() NodeManagementPtrOutput {
	return o.ApplyT(func(v *AutoprovisioningNodePoolDefaults) *NodeManagement {
		if v == nil {
			return nil
		}
		return v.Management
	}).(NodeManagementPtrOutput)
}

// Minimum CPU platform to be used for NAP created node pools. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: Intel Haswell or minCpuPlatform: Intel Sandy Bridge. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform) To unset the min cpu platform field pass "automatic" as field value.
func (o AutoprovisioningNodePoolDefaultsPtrOutput) MinCpuPlatform() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoprovisioningNodePoolDefaults) *string {
		if v == nil {
			return nil
		}
		return v.MinCpuPlatform
	}).(pulumi.StringPtrOutput)
}

// Scopes that are used by NAP when creating node pools.
func (o AutoprovisioningNodePoolDefaultsPtrOutput) OauthScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AutoprovisioningNodePoolDefaults) []string {
		if v == nil {
			return nil
		}
		return v.OauthScopes
	}).(pulumi.StringArrayOutput)
}

// The Google Cloud Platform Service Account to be used by the node VMs.
func (o AutoprovisioningNodePoolDefaultsPtrOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoprovisioningNodePoolDefaults) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccount
	}).(pulumi.StringPtrOutput)
}

// Shielded Instance options.
func (o AutoprovisioningNodePoolDefaultsPtrOutput) ShieldedInstanceConfig() ShieldedInstanceConfigPtrOutput {
	return o.ApplyT(func(v *AutoprovisioningNodePoolDefaults) *ShieldedInstanceConfig {
		if v == nil {
			return nil
		}
		return v.ShieldedInstanceConfig
	}).(ShieldedInstanceConfigPtrOutput)
}

// Specifies the upgrade settings for NAP created node pools
func (o AutoprovisioningNodePoolDefaultsPtrOutput) UpgradeSettings() UpgradeSettingsPtrOutput {
	return o.ApplyT(func(v *AutoprovisioningNodePoolDefaults) *UpgradeSettings {
		if v == nil {
			return nil
		}
		return v.UpgradeSettings
	}).(UpgradeSettingsPtrOutput)
}

// Parameters for using BigQuery as the destination of resource usage export.
type BigQueryDestination struct {
	// The ID of a BigQuery Dataset.
	DatasetId *string `pulumi:"datasetId"`
}

// BigQueryDestinationInput is an input type that accepts BigQueryDestinationArgs and BigQueryDestinationOutput values.
// You can construct a concrete instance of `BigQueryDestinationInput` via:
//
//          BigQueryDestinationArgs{...}
type BigQueryDestinationInput interface {
	pulumi.Input

	ToBigQueryDestinationOutput() BigQueryDestinationOutput
	ToBigQueryDestinationOutputWithContext(context.Context) BigQueryDestinationOutput
}

// Parameters for using BigQuery as the destination of resource usage export.
type BigQueryDestinationArgs struct {
	// The ID of a BigQuery Dataset.
	DatasetId pulumi.StringPtrInput `pulumi:"datasetId"`
}

func (BigQueryDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BigQueryDestination)(nil)).Elem()
}

func (i BigQueryDestinationArgs) ToBigQueryDestinationOutput() BigQueryDestinationOutput {
	return i.ToBigQueryDestinationOutputWithContext(context.Background())
}

func (i BigQueryDestinationArgs) ToBigQueryDestinationOutputWithContext(ctx context.Context) BigQueryDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigQueryDestinationOutput)
}

func (i BigQueryDestinationArgs) ToBigQueryDestinationPtrOutput() BigQueryDestinationPtrOutput {
	return i.ToBigQueryDestinationPtrOutputWithContext(context.Background())
}

func (i BigQueryDestinationArgs) ToBigQueryDestinationPtrOutputWithContext(ctx context.Context) BigQueryDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigQueryDestinationOutput).ToBigQueryDestinationPtrOutputWithContext(ctx)
}

// BigQueryDestinationPtrInput is an input type that accepts BigQueryDestinationArgs, BigQueryDestinationPtr and BigQueryDestinationPtrOutput values.
// You can construct a concrete instance of `BigQueryDestinationPtrInput` via:
//
//          BigQueryDestinationArgs{...}
//
//  or:
//
//          nil
type BigQueryDestinationPtrInput interface {
	pulumi.Input

	ToBigQueryDestinationPtrOutput() BigQueryDestinationPtrOutput
	ToBigQueryDestinationPtrOutputWithContext(context.Context) BigQueryDestinationPtrOutput
}

type bigQueryDestinationPtrType BigQueryDestinationArgs

func BigQueryDestinationPtr(v *BigQueryDestinationArgs) BigQueryDestinationPtrInput {
	return (*bigQueryDestinationPtrType)(v)
}

func (*bigQueryDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BigQueryDestination)(nil)).Elem()
}

func (i *bigQueryDestinationPtrType) ToBigQueryDestinationPtrOutput() BigQueryDestinationPtrOutput {
	return i.ToBigQueryDestinationPtrOutputWithContext(context.Background())
}

func (i *bigQueryDestinationPtrType) ToBigQueryDestinationPtrOutputWithContext(ctx context.Context) BigQueryDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigQueryDestinationPtrOutput)
}

// Parameters for using BigQuery as the destination of resource usage export.
type BigQueryDestinationOutput struct{ *pulumi.OutputState }

func (BigQueryDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BigQueryDestination)(nil)).Elem()
}

func (o BigQueryDestinationOutput) ToBigQueryDestinationOutput() BigQueryDestinationOutput {
	return o
}

func (o BigQueryDestinationOutput) ToBigQueryDestinationOutputWithContext(ctx context.Context) BigQueryDestinationOutput {
	return o
}

func (o BigQueryDestinationOutput) ToBigQueryDestinationPtrOutput() BigQueryDestinationPtrOutput {
	return o.ToBigQueryDestinationPtrOutputWithContext(context.Background())
}

func (o BigQueryDestinationOutput) ToBigQueryDestinationPtrOutputWithContext(ctx context.Context) BigQueryDestinationPtrOutput {
	return o.ApplyT(func(v BigQueryDestination) *BigQueryDestination {
		return &v
	}).(BigQueryDestinationPtrOutput)
}

// The ID of a BigQuery Dataset.
func (o BigQueryDestinationOutput) DatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BigQueryDestination) *string { return v.DatasetId }).(pulumi.StringPtrOutput)
}

type BigQueryDestinationPtrOutput struct{ *pulumi.OutputState }

func (BigQueryDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BigQueryDestination)(nil)).Elem()
}

func (o BigQueryDestinationPtrOutput) ToBigQueryDestinationPtrOutput() BigQueryDestinationPtrOutput {
	return o
}

func (o BigQueryDestinationPtrOutput) ToBigQueryDestinationPtrOutputWithContext(ctx context.Context) BigQueryDestinationPtrOutput {
	return o
}

func (o BigQueryDestinationPtrOutput) Elem() BigQueryDestinationOutput {
	return o.ApplyT(func(v *BigQueryDestination) BigQueryDestination { return *v }).(BigQueryDestinationOutput)
}

// The ID of a BigQuery Dataset.
func (o BigQueryDestinationPtrOutput) DatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BigQueryDestination) *string {
		if v == nil {
			return nil
		}
		return v.DatasetId
	}).(pulumi.StringPtrOutput)
}

// Configuration for Binary Authorization.
type BinaryAuthorization struct {
	// Enable Binary Authorization for this cluster. If enabled, all container images will be validated by Binary Authorization.
	Enabled *bool `pulumi:"enabled"`
}

// BinaryAuthorizationInput is an input type that accepts BinaryAuthorizationArgs and BinaryAuthorizationOutput values.
// You can construct a concrete instance of `BinaryAuthorizationInput` via:
//
//          BinaryAuthorizationArgs{...}
type BinaryAuthorizationInput interface {
	pulumi.Input

	ToBinaryAuthorizationOutput() BinaryAuthorizationOutput
	ToBinaryAuthorizationOutputWithContext(context.Context) BinaryAuthorizationOutput
}

// Configuration for Binary Authorization.
type BinaryAuthorizationArgs struct {
	// Enable Binary Authorization for this cluster. If enabled, all container images will be validated by Binary Authorization.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (BinaryAuthorizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BinaryAuthorization)(nil)).Elem()
}

func (i BinaryAuthorizationArgs) ToBinaryAuthorizationOutput() BinaryAuthorizationOutput {
	return i.ToBinaryAuthorizationOutputWithContext(context.Background())
}

func (i BinaryAuthorizationArgs) ToBinaryAuthorizationOutputWithContext(ctx context.Context) BinaryAuthorizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BinaryAuthorizationOutput)
}

func (i BinaryAuthorizationArgs) ToBinaryAuthorizationPtrOutput() BinaryAuthorizationPtrOutput {
	return i.ToBinaryAuthorizationPtrOutputWithContext(context.Background())
}

func (i BinaryAuthorizationArgs) ToBinaryAuthorizationPtrOutputWithContext(ctx context.Context) BinaryAuthorizationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BinaryAuthorizationOutput).ToBinaryAuthorizationPtrOutputWithContext(ctx)
}

// BinaryAuthorizationPtrInput is an input type that accepts BinaryAuthorizationArgs, BinaryAuthorizationPtr and BinaryAuthorizationPtrOutput values.
// You can construct a concrete instance of `BinaryAuthorizationPtrInput` via:
//
//          BinaryAuthorizationArgs{...}
//
//  or:
//
//          nil
type BinaryAuthorizationPtrInput interface {
	pulumi.Input

	ToBinaryAuthorizationPtrOutput() BinaryAuthorizationPtrOutput
	ToBinaryAuthorizationPtrOutputWithContext(context.Context) BinaryAuthorizationPtrOutput
}

type binaryAuthorizationPtrType BinaryAuthorizationArgs

func BinaryAuthorizationPtr(v *BinaryAuthorizationArgs) BinaryAuthorizationPtrInput {
	return (*binaryAuthorizationPtrType)(v)
}

func (*binaryAuthorizationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BinaryAuthorization)(nil)).Elem()
}

func (i *binaryAuthorizationPtrType) ToBinaryAuthorizationPtrOutput() BinaryAuthorizationPtrOutput {
	return i.ToBinaryAuthorizationPtrOutputWithContext(context.Background())
}

func (i *binaryAuthorizationPtrType) ToBinaryAuthorizationPtrOutputWithContext(ctx context.Context) BinaryAuthorizationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BinaryAuthorizationPtrOutput)
}

// Configuration for Binary Authorization.
type BinaryAuthorizationOutput struct{ *pulumi.OutputState }

func (BinaryAuthorizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BinaryAuthorization)(nil)).Elem()
}

func (o BinaryAuthorizationOutput) ToBinaryAuthorizationOutput() BinaryAuthorizationOutput {
	return o
}

func (o BinaryAuthorizationOutput) ToBinaryAuthorizationOutputWithContext(ctx context.Context) BinaryAuthorizationOutput {
	return o
}

func (o BinaryAuthorizationOutput) ToBinaryAuthorizationPtrOutput() BinaryAuthorizationPtrOutput {
	return o.ToBinaryAuthorizationPtrOutputWithContext(context.Background())
}

func (o BinaryAuthorizationOutput) ToBinaryAuthorizationPtrOutputWithContext(ctx context.Context) BinaryAuthorizationPtrOutput {
	return o.ApplyT(func(v BinaryAuthorization) *BinaryAuthorization {
		return &v
	}).(BinaryAuthorizationPtrOutput)
}

// Enable Binary Authorization for this cluster. If enabled, all container images will be validated by Binary Authorization.
func (o BinaryAuthorizationOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BinaryAuthorization) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type BinaryAuthorizationPtrOutput struct{ *pulumi.OutputState }

func (BinaryAuthorizationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BinaryAuthorization)(nil)).Elem()
}

func (o BinaryAuthorizationPtrOutput) ToBinaryAuthorizationPtrOutput() BinaryAuthorizationPtrOutput {
	return o
}

func (o BinaryAuthorizationPtrOutput) ToBinaryAuthorizationPtrOutputWithContext(ctx context.Context) BinaryAuthorizationPtrOutput {
	return o
}

func (o BinaryAuthorizationPtrOutput) Elem() BinaryAuthorizationOutput {
	return o.ApplyT(func(v *BinaryAuthorization) BinaryAuthorization { return *v }).(BinaryAuthorizationOutput)
}

// Enable Binary Authorization for this cluster. If enabled, all container images will be validated by Binary Authorization.
func (o BinaryAuthorizationPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BinaryAuthorization) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// CidrBlock contains an optional name and one CIDR block.
type CidrBlock struct {
	// cidr_block must be specified in CIDR notation.
	CidrBlock *string `pulumi:"cidrBlock"`
	// display_name is an optional field for users to identify CIDR blocks.
	DisplayName *string `pulumi:"displayName"`
}

// CidrBlockInput is an input type that accepts CidrBlockArgs and CidrBlockOutput values.
// You can construct a concrete instance of `CidrBlockInput` via:
//
//          CidrBlockArgs{...}
type CidrBlockInput interface {
	pulumi.Input

	ToCidrBlockOutput() CidrBlockOutput
	ToCidrBlockOutputWithContext(context.Context) CidrBlockOutput
}

// CidrBlock contains an optional name and one CIDR block.
type CidrBlockArgs struct {
	// cidr_block must be specified in CIDR notation.
	CidrBlock pulumi.StringPtrInput `pulumi:"cidrBlock"`
	// display_name is an optional field for users to identify CIDR blocks.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
}

func (CidrBlockArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CidrBlock)(nil)).Elem()
}

func (i CidrBlockArgs) ToCidrBlockOutput() CidrBlockOutput {
	return i.ToCidrBlockOutputWithContext(context.Background())
}

func (i CidrBlockArgs) ToCidrBlockOutputWithContext(ctx context.Context) CidrBlockOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CidrBlockOutput)
}

// CidrBlockArrayInput is an input type that accepts CidrBlockArray and CidrBlockArrayOutput values.
// You can construct a concrete instance of `CidrBlockArrayInput` via:
//
//          CidrBlockArray{ CidrBlockArgs{...} }
type CidrBlockArrayInput interface {
	pulumi.Input

	ToCidrBlockArrayOutput() CidrBlockArrayOutput
	ToCidrBlockArrayOutputWithContext(context.Context) CidrBlockArrayOutput
}

type CidrBlockArray []CidrBlockInput

func (CidrBlockArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CidrBlock)(nil)).Elem()
}

func (i CidrBlockArray) ToCidrBlockArrayOutput() CidrBlockArrayOutput {
	return i.ToCidrBlockArrayOutputWithContext(context.Background())
}

func (i CidrBlockArray) ToCidrBlockArrayOutputWithContext(ctx context.Context) CidrBlockArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CidrBlockArrayOutput)
}

// CidrBlock contains an optional name and one CIDR block.
type CidrBlockOutput struct{ *pulumi.OutputState }

func (CidrBlockOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CidrBlock)(nil)).Elem()
}

func (o CidrBlockOutput) ToCidrBlockOutput() CidrBlockOutput {
	return o
}

func (o CidrBlockOutput) ToCidrBlockOutputWithContext(ctx context.Context) CidrBlockOutput {
	return o
}

// cidr_block must be specified in CIDR notation.
func (o CidrBlockOutput) CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CidrBlock) *string { return v.CidrBlock }).(pulumi.StringPtrOutput)
}

// display_name is an optional field for users to identify CIDR blocks.
func (o CidrBlockOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CidrBlock) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

type CidrBlockArrayOutput struct{ *pulumi.OutputState }

func (CidrBlockArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CidrBlock)(nil)).Elem()
}

func (o CidrBlockArrayOutput) ToCidrBlockArrayOutput() CidrBlockArrayOutput {
	return o
}

func (o CidrBlockArrayOutput) ToCidrBlockArrayOutputWithContext(ctx context.Context) CidrBlockArrayOutput {
	return o
}

func (o CidrBlockArrayOutput) Index(i pulumi.IntInput) CidrBlockOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CidrBlock {
		return vs[0].([]CidrBlock)[vs[1].(int)]
	}).(CidrBlockOutput)
}

// Configuration for client certificates on the cluster.
type ClientCertificateConfig struct {
	// Issue a client certificate.
	IssueClientCertificate *bool `pulumi:"issueClientCertificate"`
}

// ClientCertificateConfigInput is an input type that accepts ClientCertificateConfigArgs and ClientCertificateConfigOutput values.
// You can construct a concrete instance of `ClientCertificateConfigInput` via:
//
//          ClientCertificateConfigArgs{...}
type ClientCertificateConfigInput interface {
	pulumi.Input

	ToClientCertificateConfigOutput() ClientCertificateConfigOutput
	ToClientCertificateConfigOutputWithContext(context.Context) ClientCertificateConfigOutput
}

// Configuration for client certificates on the cluster.
type ClientCertificateConfigArgs struct {
	// Issue a client certificate.
	IssueClientCertificate pulumi.BoolPtrInput `pulumi:"issueClientCertificate"`
}

func (ClientCertificateConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientCertificateConfig)(nil)).Elem()
}

func (i ClientCertificateConfigArgs) ToClientCertificateConfigOutput() ClientCertificateConfigOutput {
	return i.ToClientCertificateConfigOutputWithContext(context.Background())
}

func (i ClientCertificateConfigArgs) ToClientCertificateConfigOutputWithContext(ctx context.Context) ClientCertificateConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientCertificateConfigOutput)
}

func (i ClientCertificateConfigArgs) ToClientCertificateConfigPtrOutput() ClientCertificateConfigPtrOutput {
	return i.ToClientCertificateConfigPtrOutputWithContext(context.Background())
}

func (i ClientCertificateConfigArgs) ToClientCertificateConfigPtrOutputWithContext(ctx context.Context) ClientCertificateConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientCertificateConfigOutput).ToClientCertificateConfigPtrOutputWithContext(ctx)
}

// ClientCertificateConfigPtrInput is an input type that accepts ClientCertificateConfigArgs, ClientCertificateConfigPtr and ClientCertificateConfigPtrOutput values.
// You can construct a concrete instance of `ClientCertificateConfigPtrInput` via:
//
//          ClientCertificateConfigArgs{...}
//
//  or:
//
//          nil
type ClientCertificateConfigPtrInput interface {
	pulumi.Input

	ToClientCertificateConfigPtrOutput() ClientCertificateConfigPtrOutput
	ToClientCertificateConfigPtrOutputWithContext(context.Context) ClientCertificateConfigPtrOutput
}

type clientCertificateConfigPtrType ClientCertificateConfigArgs

func ClientCertificateConfigPtr(v *ClientCertificateConfigArgs) ClientCertificateConfigPtrInput {
	return (*clientCertificateConfigPtrType)(v)
}

func (*clientCertificateConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientCertificateConfig)(nil)).Elem()
}

func (i *clientCertificateConfigPtrType) ToClientCertificateConfigPtrOutput() ClientCertificateConfigPtrOutput {
	return i.ToClientCertificateConfigPtrOutputWithContext(context.Background())
}

func (i *clientCertificateConfigPtrType) ToClientCertificateConfigPtrOutputWithContext(ctx context.Context) ClientCertificateConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientCertificateConfigPtrOutput)
}

// Configuration for client certificates on the cluster.
type ClientCertificateConfigOutput struct{ *pulumi.OutputState }

func (ClientCertificateConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientCertificateConfig)(nil)).Elem()
}

func (o ClientCertificateConfigOutput) ToClientCertificateConfigOutput() ClientCertificateConfigOutput {
	return o
}

func (o ClientCertificateConfigOutput) ToClientCertificateConfigOutputWithContext(ctx context.Context) ClientCertificateConfigOutput {
	return o
}

func (o ClientCertificateConfigOutput) ToClientCertificateConfigPtrOutput() ClientCertificateConfigPtrOutput {
	return o.ToClientCertificateConfigPtrOutputWithContext(context.Background())
}

func (o ClientCertificateConfigOutput) ToClientCertificateConfigPtrOutputWithContext(ctx context.Context) ClientCertificateConfigPtrOutput {
	return o.ApplyT(func(v ClientCertificateConfig) *ClientCertificateConfig {
		return &v
	}).(ClientCertificateConfigPtrOutput)
}

// Issue a client certificate.
func (o ClientCertificateConfigOutput) IssueClientCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClientCertificateConfig) *bool { return v.IssueClientCertificate }).(pulumi.BoolPtrOutput)
}

type ClientCertificateConfigPtrOutput struct{ *pulumi.OutputState }

func (ClientCertificateConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientCertificateConfig)(nil)).Elem()
}

func (o ClientCertificateConfigPtrOutput) ToClientCertificateConfigPtrOutput() ClientCertificateConfigPtrOutput {
	return o
}

func (o ClientCertificateConfigPtrOutput) ToClientCertificateConfigPtrOutputWithContext(ctx context.Context) ClientCertificateConfigPtrOutput {
	return o
}

func (o ClientCertificateConfigPtrOutput) Elem() ClientCertificateConfigOutput {
	return o.ApplyT(func(v *ClientCertificateConfig) ClientCertificateConfig { return *v }).(ClientCertificateConfigOutput)
}

// Issue a client certificate.
func (o ClientCertificateConfigPtrOutput) IssueClientCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClientCertificateConfig) *bool {
		if v == nil {
			return nil
		}
		return v.IssueClientCertificate
	}).(pulumi.BoolPtrOutput)
}

// Configuration options for the Cloud Run feature.
type CloudRunConfig struct {
	// Whether Cloud Run addon is enabled for this cluster.
	Disabled *bool `pulumi:"disabled"`
	// Which load balancer type is installed for Cloud Run.
	LoadBalancerType *string `pulumi:"loadBalancerType"`
}

// CloudRunConfigInput is an input type that accepts CloudRunConfigArgs and CloudRunConfigOutput values.
// You can construct a concrete instance of `CloudRunConfigInput` via:
//
//          CloudRunConfigArgs{...}
type CloudRunConfigInput interface {
	pulumi.Input

	ToCloudRunConfigOutput() CloudRunConfigOutput
	ToCloudRunConfigOutputWithContext(context.Context) CloudRunConfigOutput
}

// Configuration options for the Cloud Run feature.
type CloudRunConfigArgs struct {
	// Whether Cloud Run addon is enabled for this cluster.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// Which load balancer type is installed for Cloud Run.
	LoadBalancerType pulumi.StringPtrInput `pulumi:"loadBalancerType"`
}

func (CloudRunConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudRunConfig)(nil)).Elem()
}

func (i CloudRunConfigArgs) ToCloudRunConfigOutput() CloudRunConfigOutput {
	return i.ToCloudRunConfigOutputWithContext(context.Background())
}

func (i CloudRunConfigArgs) ToCloudRunConfigOutputWithContext(ctx context.Context) CloudRunConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudRunConfigOutput)
}

func (i CloudRunConfigArgs) ToCloudRunConfigPtrOutput() CloudRunConfigPtrOutput {
	return i.ToCloudRunConfigPtrOutputWithContext(context.Background())
}

func (i CloudRunConfigArgs) ToCloudRunConfigPtrOutputWithContext(ctx context.Context) CloudRunConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudRunConfigOutput).ToCloudRunConfigPtrOutputWithContext(ctx)
}

// CloudRunConfigPtrInput is an input type that accepts CloudRunConfigArgs, CloudRunConfigPtr and CloudRunConfigPtrOutput values.
// You can construct a concrete instance of `CloudRunConfigPtrInput` via:
//
//          CloudRunConfigArgs{...}
//
//  or:
//
//          nil
type CloudRunConfigPtrInput interface {
	pulumi.Input

	ToCloudRunConfigPtrOutput() CloudRunConfigPtrOutput
	ToCloudRunConfigPtrOutputWithContext(context.Context) CloudRunConfigPtrOutput
}

type cloudRunConfigPtrType CloudRunConfigArgs

func CloudRunConfigPtr(v *CloudRunConfigArgs) CloudRunConfigPtrInput {
	return (*cloudRunConfigPtrType)(v)
}

func (*cloudRunConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudRunConfig)(nil)).Elem()
}

func (i *cloudRunConfigPtrType) ToCloudRunConfigPtrOutput() CloudRunConfigPtrOutput {
	return i.ToCloudRunConfigPtrOutputWithContext(context.Background())
}

func (i *cloudRunConfigPtrType) ToCloudRunConfigPtrOutputWithContext(ctx context.Context) CloudRunConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudRunConfigPtrOutput)
}

// Configuration options for the Cloud Run feature.
type CloudRunConfigOutput struct{ *pulumi.OutputState }

func (CloudRunConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudRunConfig)(nil)).Elem()
}

func (o CloudRunConfigOutput) ToCloudRunConfigOutput() CloudRunConfigOutput {
	return o
}

func (o CloudRunConfigOutput) ToCloudRunConfigOutputWithContext(ctx context.Context) CloudRunConfigOutput {
	return o
}

func (o CloudRunConfigOutput) ToCloudRunConfigPtrOutput() CloudRunConfigPtrOutput {
	return o.ToCloudRunConfigPtrOutputWithContext(context.Background())
}

func (o CloudRunConfigOutput) ToCloudRunConfigPtrOutputWithContext(ctx context.Context) CloudRunConfigPtrOutput {
	return o.ApplyT(func(v CloudRunConfig) *CloudRunConfig {
		return &v
	}).(CloudRunConfigPtrOutput)
}

// Whether Cloud Run addon is enabled for this cluster.
func (o CloudRunConfigOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CloudRunConfig) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// Which load balancer type is installed for Cloud Run.
func (o CloudRunConfigOutput) LoadBalancerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CloudRunConfig) *string { return v.LoadBalancerType }).(pulumi.StringPtrOutput)
}

type CloudRunConfigPtrOutput struct{ *pulumi.OutputState }

func (CloudRunConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudRunConfig)(nil)).Elem()
}

func (o CloudRunConfigPtrOutput) ToCloudRunConfigPtrOutput() CloudRunConfigPtrOutput {
	return o
}

func (o CloudRunConfigPtrOutput) ToCloudRunConfigPtrOutputWithContext(ctx context.Context) CloudRunConfigPtrOutput {
	return o
}

func (o CloudRunConfigPtrOutput) Elem() CloudRunConfigOutput {
	return o.ApplyT(func(v *CloudRunConfig) CloudRunConfig { return *v }).(CloudRunConfigOutput)
}

// Whether Cloud Run addon is enabled for this cluster.
func (o CloudRunConfigPtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CloudRunConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// Which load balancer type is installed for Cloud Run.
func (o CloudRunConfigPtrOutput) LoadBalancerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudRunConfig) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerType
	}).(pulumi.StringPtrOutput)
}

// A Google Kubernetes Engine cluster.
type ClusterType struct {
	// Configurations for the various addons available to run in the cluster.
	AddonsConfig *AddonsConfig `pulumi:"addonsConfig"`
	// Configuration controlling RBAC group membership information.
	AuthenticatorGroupsConfig *AuthenticatorGroupsConfig `pulumi:"authenticatorGroupsConfig"`
	// Autopilot configuration for the cluster.
	Autopilot *Autopilot `pulumi:"autopilot"`
	// Cluster-level autoscaling configuration.
	Autoscaling *ClusterAutoscaling `pulumi:"autoscaling"`
	// Configuration for Binary Authorization.
	BinaryAuthorization *BinaryAuthorization `pulumi:"binaryAuthorization"`
	// The IP address range of the container pods in this cluster, in [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`). Leave blank to have one automatically chosen or specify a `/14` block in `10.0.0.0/8`.
	ClusterIpv4Cidr *string `pulumi:"clusterIpv4Cidr"`
	// Which conditions caused the current cluster state.
	Conditions []StatusCondition `pulumi:"conditions"`
	// [Output only] The time the cluster was created, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
	CreateTime *string `pulumi:"createTime"`
	// [Output only] The current software version of the master endpoint.
	CurrentMasterVersion *string `pulumi:"currentMasterVersion"`
	// [Output only] The number of nodes currently in the cluster. Deprecated. Call Kubernetes API directly to retrieve node information.
	CurrentNodeCount *int `pulumi:"currentNodeCount"`
	// [Output only] Deprecated, use [NodePools.version](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters.nodePools) instead. The current version of the node software components. If they are currently at multiple versions because they're in the process of being upgraded, this reflects the minimum version of all nodes.
	CurrentNodeVersion *string `pulumi:"currentNodeVersion"`
	// Configuration of etcd encryption.
	DatabaseEncryption *DatabaseEncryption `pulumi:"databaseEncryption"`
	// The default constraint on the maximum number of pods that can be run simultaneously on a node in the node pool of this cluster. Only honored if cluster created with IP Alias support.
	DefaultMaxPodsConstraint *MaxPodsConstraint `pulumi:"defaultMaxPodsConstraint"`
	// An optional description of this cluster.
	Description *string `pulumi:"description"`
	// Kubernetes alpha features are enabled on this cluster. This includes alpha API groups (e.g. v1alpha1) and features that may not be production ready in the kubernetes version of the master and nodes. The cluster has no SLA for uptime and master/node upgrades are disabled. Alpha enabled clusters are automatically deleted thirty days after creation.
	EnableKubernetesAlpha *bool `pulumi:"enableKubernetesAlpha"`
	// Enable the ability to use Cloud TPUs in this cluster.
	EnableTpu *bool `pulumi:"enableTpu"`
	// [Output only] The IP address of this cluster's master endpoint. The endpoint can be accessed from the internet at `https://username:password@endpoint/`. See the `masterAuth` property of this resource for username and password information.
	Endpoint *string `pulumi:"endpoint"`
	// [Output only] The time the cluster will be automatically deleted in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
	ExpireTime *string `pulumi:"expireTime"`
	// The initial Kubernetes version for this cluster. Valid versions are those found in validMasterVersions returned by getServerConfig. The version can be upgraded over time; such upgrades are reflected in currentMasterVersion and currentNodeVersion. Users may specify either explicit versions offered by Kubernetes Engine or version aliases, which have the following behavior: - "latest": picks the highest valid Kubernetes version - "1.X": picks the highest valid patch+gke.N patch in the 1.X version - "1.X.Y": picks the highest valid gke.N patch in the 1.X.Y version - "1.X.Y-gke.N": picks an explicit Kubernetes version - "","-": picks the default Kubernetes version
	InitialClusterVersion *string `pulumi:"initialClusterVersion"`
	// The number of nodes to create in this cluster. You must ensure that your Compute Engine [resource quota](https://cloud.google.com/compute/quotas) is sufficient for this number of instances. You must also have available firewall and routes quota. For requests, this field should only be used in lieu of a "node_pool" object, since this configuration (along with the "node_config") will be used to create a "NodePool" object with an auto-generated name. Do not use this and a node_pool at the same time. This field is deprecated, use node_pool.initial_node_count instead.
	InitialNodeCount *int `pulumi:"initialNodeCount"`
	// Deprecated. Use node_pools.instance_group_urls.
	InstanceGroupUrls []string `pulumi:"instanceGroupUrls"`
	// Configuration for cluster IP allocation.
	IpAllocationPolicy *IPAllocationPolicy `pulumi:"ipAllocationPolicy"`
	// The fingerprint of the set of labels for this cluster.
	LabelFingerprint *string `pulumi:"labelFingerprint"`
	// Configuration for the legacy ABAC authorization mode.
	LegacyAbac *LegacyAbac `pulumi:"legacyAbac"`
	// [Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) or [region](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) in which the cluster resides.
	Location *string `pulumi:"location"`
	// The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the cluster's nodes should be located. This field provides a default value if [NodePool.Locations](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters.nodePools#NodePool.FIELDS.locations) are not specified during node pool creation. Warning: changing cluster locations will update the [NodePool.Locations](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters.nodePools#NodePool.FIELDS.locations) of all node pools and will result in nodes being added and/or removed.
	Locations []string `pulumi:"locations"`
	// The logging service the cluster should use to write logs. Currently available options: * `logging.googleapis.com/kubernetes` - The Cloud Logging service with a Kubernetes-native resource model * `logging.googleapis.com` - The legacy Cloud Logging service (no longer available as of GKE 1.15). * `none` - no logs will be exported from the cluster. If left as an empty string,`logging.googleapis.com/kubernetes` will be used for GKE 1.14+ or `logging.googleapis.com` for earlier versions.
	LoggingService *string `pulumi:"loggingService"`
	// Configure the maintenance policy for this cluster.
	MaintenancePolicy *MaintenancePolicy `pulumi:"maintenancePolicy"`
	// The authentication information for accessing the master endpoint. If unspecified, the defaults are used: For clusters before v1.12, if master_auth is unspecified, `username` will be set to "admin", a random password will be generated, and a client certificate will be issued.
	MasterAuth *MasterAuth `pulumi:"masterAuth"`
	// The configuration options for master authorized networks feature.
	MasterAuthorizedNetworksConfig *MasterAuthorizedNetworksConfig `pulumi:"masterAuthorizedNetworksConfig"`
	// The monitoring service the cluster should use to write metrics. Currently available options: * "monitoring.googleapis.com/kubernetes" - The Cloud Monitoring service with a Kubernetes-native resource model * `monitoring.googleapis.com` - The legacy Cloud Monitoring service (no longer available as of GKE 1.15). * `none` - No metrics will be exported from the cluster. If left as an empty string,`monitoring.googleapis.com/kubernetes` will be used for GKE 1.14+ or `monitoring.googleapis.com` for earlier versions.
	MonitoringService *string `pulumi:"monitoringService"`
	// The name of this cluster. The name must be unique within this project and location (e.g. zone or region), and can be up to 40 characters with the following restrictions: * Lowercase letters, numbers, and hyphens only. * Must start with a letter. * Must end with a number or a letter.
	Name *string `pulumi:"name"`
	// The name of the Google Compute Engine [network](https://cloud.google.com/compute/docs/networks-and-firewalls#networks) to which the cluster is connected. If left unspecified, the `default` network will be used.
	Network *string `pulumi:"network"`
	// Configuration for cluster networking.
	NetworkConfig *NetworkConfig `pulumi:"networkConfig"`
	// Configuration options for the NetworkPolicy feature.
	NetworkPolicy *NetworkPolicy `pulumi:"networkPolicy"`
	// Parameters used in creating the cluster's nodes. For requests, this field should only be used in lieu of a "node_pool" object, since this configuration (along with the "initial_node_count") will be used to create a "NodePool" object with an auto-generated name. Do not use this and a node_pool at the same time. For responses, this field will be populated with the node configuration of the first node pool. (For configuration of each node pool, see `node_pool.config`) If unspecified, the defaults are used. This field is deprecated, use node_pool.config instead.
	NodeConfig *NodeConfig `pulumi:"nodeConfig"`
	// [Output only] The size of the address space on each node for hosting containers. This is provisioned from within the `container_ipv4_cidr` range. This field will only be set when cluster is in route-based network mode.
	NodeIpv4CidrSize *int `pulumi:"nodeIpv4CidrSize"`
	// The node pools associated with this cluster. This field should not be set if "node_config" or "initial_node_count" are specified.
	NodePools []NodePoolType `pulumi:"nodePools"`
	// Notification configuration of the cluster.
	NotificationConfig *NotificationConfig `pulumi:"notificationConfig"`
	// Configuration for private cluster.
	PrivateClusterConfig *PrivateClusterConfig `pulumi:"privateClusterConfig"`
	// Release channel configuration.
	ReleaseChannel *ReleaseChannel `pulumi:"releaseChannel"`
	// The resource labels for the cluster to use to annotate any related Google Compute Engine resources.
	ResourceLabels map[string]string `pulumi:"resourceLabels"`
	// Configuration for exporting resource usages. Resource usage export is disabled when this config is unspecified.
	ResourceUsageExportConfig *ResourceUsageExportConfig `pulumi:"resourceUsageExportConfig"`
	// [Output only] Server-defined URL for the resource.
	SelfLink *string `pulumi:"selfLink"`
	// [Output only] The IP address range of the Kubernetes services in this cluster, in [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `1.2.3.4/29`). Service addresses are typically put in the last `/16` from the container CIDR.
	ServicesIpv4Cidr *string `pulumi:"servicesIpv4Cidr"`
	// Shielded Nodes configuration.
	ShieldedNodes *ShieldedNodes `pulumi:"shieldedNodes"`
	// [Output only] The current status of this cluster.
	Status *string `pulumi:"status"`
	// [Output only] Deprecated. Use conditions instead. Additional information about the current status of this cluster, if available.
	StatusMessage *string `pulumi:"statusMessage"`
	// The name of the Google Compute Engine [subnetwork](https://cloud.google.com/compute/docs/subnetworks) to which the cluster is connected.
	Subnetwork *string `pulumi:"subnetwork"`
	// [Output only] The IP address range of the Cloud TPUs in this cluster, in [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `1.2.3.4/29`).
	TpuIpv4CidrBlock *string `pulumi:"tpuIpv4CidrBlock"`
	// Cluster-level Vertical Pod Autoscaling configuration.
	VerticalPodAutoscaling *VerticalPodAutoscaling `pulumi:"verticalPodAutoscaling"`
	// Configuration for the use of Kubernetes Service Accounts in GCP IAM policies.
	WorkloadIdentityConfig *WorkloadIdentityConfig `pulumi:"workloadIdentityConfig"`
	// [Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field is deprecated, use location instead.
	Zone *string `pulumi:"zone"`
}

// ClusterTypeInput is an input type that accepts ClusterTypeArgs and ClusterTypeOutput values.
// You can construct a concrete instance of `ClusterTypeInput` via:
//
//          ClusterTypeArgs{...}
type ClusterTypeInput interface {
	pulumi.Input

	ToClusterTypeOutput() ClusterTypeOutput
	ToClusterTypeOutputWithContext(context.Context) ClusterTypeOutput
}

// A Google Kubernetes Engine cluster.
type ClusterTypeArgs struct {
	// Configurations for the various addons available to run in the cluster.
	AddonsConfig AddonsConfigPtrInput `pulumi:"addonsConfig"`
	// Configuration controlling RBAC group membership information.
	AuthenticatorGroupsConfig AuthenticatorGroupsConfigPtrInput `pulumi:"authenticatorGroupsConfig"`
	// Autopilot configuration for the cluster.
	Autopilot AutopilotPtrInput `pulumi:"autopilot"`
	// Cluster-level autoscaling configuration.
	Autoscaling ClusterAutoscalingPtrInput `pulumi:"autoscaling"`
	// Configuration for Binary Authorization.
	BinaryAuthorization BinaryAuthorizationPtrInput `pulumi:"binaryAuthorization"`
	// The IP address range of the container pods in this cluster, in [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`). Leave blank to have one automatically chosen or specify a `/14` block in `10.0.0.0/8`.
	ClusterIpv4Cidr pulumi.StringPtrInput `pulumi:"clusterIpv4Cidr"`
	// Which conditions caused the current cluster state.
	Conditions StatusConditionArrayInput `pulumi:"conditions"`
	// [Output only] The time the cluster was created, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
	CreateTime pulumi.StringPtrInput `pulumi:"createTime"`
	// [Output only] The current software version of the master endpoint.
	CurrentMasterVersion pulumi.StringPtrInput `pulumi:"currentMasterVersion"`
	// [Output only] The number of nodes currently in the cluster. Deprecated. Call Kubernetes API directly to retrieve node information.
	CurrentNodeCount pulumi.IntPtrInput `pulumi:"currentNodeCount"`
	// [Output only] Deprecated, use [NodePools.version](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters.nodePools) instead. The current version of the node software components. If they are currently at multiple versions because they're in the process of being upgraded, this reflects the minimum version of all nodes.
	CurrentNodeVersion pulumi.StringPtrInput `pulumi:"currentNodeVersion"`
	// Configuration of etcd encryption.
	DatabaseEncryption DatabaseEncryptionPtrInput `pulumi:"databaseEncryption"`
	// The default constraint on the maximum number of pods that can be run simultaneously on a node in the node pool of this cluster. Only honored if cluster created with IP Alias support.
	DefaultMaxPodsConstraint MaxPodsConstraintPtrInput `pulumi:"defaultMaxPodsConstraint"`
	// An optional description of this cluster.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Kubernetes alpha features are enabled on this cluster. This includes alpha API groups (e.g. v1alpha1) and features that may not be production ready in the kubernetes version of the master and nodes. The cluster has no SLA for uptime and master/node upgrades are disabled. Alpha enabled clusters are automatically deleted thirty days after creation.
	EnableKubernetesAlpha pulumi.BoolPtrInput `pulumi:"enableKubernetesAlpha"`
	// Enable the ability to use Cloud TPUs in this cluster.
	EnableTpu pulumi.BoolPtrInput `pulumi:"enableTpu"`
	// [Output only] The IP address of this cluster's master endpoint. The endpoint can be accessed from the internet at `https://username:password@endpoint/`. See the `masterAuth` property of this resource for username and password information.
	Endpoint pulumi.StringPtrInput `pulumi:"endpoint"`
	// [Output only] The time the cluster will be automatically deleted in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
	ExpireTime pulumi.StringPtrInput `pulumi:"expireTime"`
	// The initial Kubernetes version for this cluster. Valid versions are those found in validMasterVersions returned by getServerConfig. The version can be upgraded over time; such upgrades are reflected in currentMasterVersion and currentNodeVersion. Users may specify either explicit versions offered by Kubernetes Engine or version aliases, which have the following behavior: - "latest": picks the highest valid Kubernetes version - "1.X": picks the highest valid patch+gke.N patch in the 1.X version - "1.X.Y": picks the highest valid gke.N patch in the 1.X.Y version - "1.X.Y-gke.N": picks an explicit Kubernetes version - "","-": picks the default Kubernetes version
	InitialClusterVersion pulumi.StringPtrInput `pulumi:"initialClusterVersion"`
	// The number of nodes to create in this cluster. You must ensure that your Compute Engine [resource quota](https://cloud.google.com/compute/quotas) is sufficient for this number of instances. You must also have available firewall and routes quota. For requests, this field should only be used in lieu of a "node_pool" object, since this configuration (along with the "node_config") will be used to create a "NodePool" object with an auto-generated name. Do not use this and a node_pool at the same time. This field is deprecated, use node_pool.initial_node_count instead.
	InitialNodeCount pulumi.IntPtrInput `pulumi:"initialNodeCount"`
	// Deprecated. Use node_pools.instance_group_urls.
	InstanceGroupUrls pulumi.StringArrayInput `pulumi:"instanceGroupUrls"`
	// Configuration for cluster IP allocation.
	IpAllocationPolicy IPAllocationPolicyPtrInput `pulumi:"ipAllocationPolicy"`
	// The fingerprint of the set of labels for this cluster.
	LabelFingerprint pulumi.StringPtrInput `pulumi:"labelFingerprint"`
	// Configuration for the legacy ABAC authorization mode.
	LegacyAbac LegacyAbacPtrInput `pulumi:"legacyAbac"`
	// [Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) or [region](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) in which the cluster resides.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the cluster's nodes should be located. This field provides a default value if [NodePool.Locations](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters.nodePools#NodePool.FIELDS.locations) are not specified during node pool creation. Warning: changing cluster locations will update the [NodePool.Locations](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters.nodePools#NodePool.FIELDS.locations) of all node pools and will result in nodes being added and/or removed.
	Locations pulumi.StringArrayInput `pulumi:"locations"`
	// The logging service the cluster should use to write logs. Currently available options: * `logging.googleapis.com/kubernetes` - The Cloud Logging service with a Kubernetes-native resource model * `logging.googleapis.com` - The legacy Cloud Logging service (no longer available as of GKE 1.15). * `none` - no logs will be exported from the cluster. If left as an empty string,`logging.googleapis.com/kubernetes` will be used for GKE 1.14+ or `logging.googleapis.com` for earlier versions.
	LoggingService pulumi.StringPtrInput `pulumi:"loggingService"`
	// Configure the maintenance policy for this cluster.
	MaintenancePolicy MaintenancePolicyPtrInput `pulumi:"maintenancePolicy"`
	// The authentication information for accessing the master endpoint. If unspecified, the defaults are used: For clusters before v1.12, if master_auth is unspecified, `username` will be set to "admin", a random password will be generated, and a client certificate will be issued.
	MasterAuth MasterAuthPtrInput `pulumi:"masterAuth"`
	// The configuration options for master authorized networks feature.
	MasterAuthorizedNetworksConfig MasterAuthorizedNetworksConfigPtrInput `pulumi:"masterAuthorizedNetworksConfig"`
	// The monitoring service the cluster should use to write metrics. Currently available options: * "monitoring.googleapis.com/kubernetes" - The Cloud Monitoring service with a Kubernetes-native resource model * `monitoring.googleapis.com` - The legacy Cloud Monitoring service (no longer available as of GKE 1.15). * `none` - No metrics will be exported from the cluster. If left as an empty string,`monitoring.googleapis.com/kubernetes` will be used for GKE 1.14+ or `monitoring.googleapis.com` for earlier versions.
	MonitoringService pulumi.StringPtrInput `pulumi:"monitoringService"`
	// The name of this cluster. The name must be unique within this project and location (e.g. zone or region), and can be up to 40 characters with the following restrictions: * Lowercase letters, numbers, and hyphens only. * Must start with a letter. * Must end with a number or a letter.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The name of the Google Compute Engine [network](https://cloud.google.com/compute/docs/networks-and-firewalls#networks) to which the cluster is connected. If left unspecified, the `default` network will be used.
	Network pulumi.StringPtrInput `pulumi:"network"`
	// Configuration for cluster networking.
	NetworkConfig NetworkConfigPtrInput `pulumi:"networkConfig"`
	// Configuration options for the NetworkPolicy feature.
	NetworkPolicy NetworkPolicyPtrInput `pulumi:"networkPolicy"`
	// Parameters used in creating the cluster's nodes. For requests, this field should only be used in lieu of a "node_pool" object, since this configuration (along with the "initial_node_count") will be used to create a "NodePool" object with an auto-generated name. Do not use this and a node_pool at the same time. For responses, this field will be populated with the node configuration of the first node pool. (For configuration of each node pool, see `node_pool.config`) If unspecified, the defaults are used. This field is deprecated, use node_pool.config instead.
	NodeConfig NodeConfigPtrInput `pulumi:"nodeConfig"`
	// [Output only] The size of the address space on each node for hosting containers. This is provisioned from within the `container_ipv4_cidr` range. This field will only be set when cluster is in route-based network mode.
	NodeIpv4CidrSize pulumi.IntPtrInput `pulumi:"nodeIpv4CidrSize"`
	// The node pools associated with this cluster. This field should not be set if "node_config" or "initial_node_count" are specified.
	NodePools NodePoolTypeArrayInput `pulumi:"nodePools"`
	// Notification configuration of the cluster.
	NotificationConfig NotificationConfigPtrInput `pulumi:"notificationConfig"`
	// Configuration for private cluster.
	PrivateClusterConfig PrivateClusterConfigPtrInput `pulumi:"privateClusterConfig"`
	// Release channel configuration.
	ReleaseChannel ReleaseChannelPtrInput `pulumi:"releaseChannel"`
	// The resource labels for the cluster to use to annotate any related Google Compute Engine resources.
	ResourceLabels pulumi.StringMapInput `pulumi:"resourceLabels"`
	// Configuration for exporting resource usages. Resource usage export is disabled when this config is unspecified.
	ResourceUsageExportConfig ResourceUsageExportConfigPtrInput `pulumi:"resourceUsageExportConfig"`
	// [Output only] Server-defined URL for the resource.
	SelfLink pulumi.StringPtrInput `pulumi:"selfLink"`
	// [Output only] The IP address range of the Kubernetes services in this cluster, in [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `1.2.3.4/29`). Service addresses are typically put in the last `/16` from the container CIDR.
	ServicesIpv4Cidr pulumi.StringPtrInput `pulumi:"servicesIpv4Cidr"`
	// Shielded Nodes configuration.
	ShieldedNodes ShieldedNodesPtrInput `pulumi:"shieldedNodes"`
	// [Output only] The current status of this cluster.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// [Output only] Deprecated. Use conditions instead. Additional information about the current status of this cluster, if available.
	StatusMessage pulumi.StringPtrInput `pulumi:"statusMessage"`
	// The name of the Google Compute Engine [subnetwork](https://cloud.google.com/compute/docs/subnetworks) to which the cluster is connected.
	Subnetwork pulumi.StringPtrInput `pulumi:"subnetwork"`
	// [Output only] The IP address range of the Cloud TPUs in this cluster, in [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `1.2.3.4/29`).
	TpuIpv4CidrBlock pulumi.StringPtrInput `pulumi:"tpuIpv4CidrBlock"`
	// Cluster-level Vertical Pod Autoscaling configuration.
	VerticalPodAutoscaling VerticalPodAutoscalingPtrInput `pulumi:"verticalPodAutoscaling"`
	// Configuration for the use of Kubernetes Service Accounts in GCP IAM policies.
	WorkloadIdentityConfig WorkloadIdentityConfigPtrInput `pulumi:"workloadIdentityConfig"`
	// [Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field is deprecated, use location instead.
	Zone pulumi.StringPtrInput `pulumi:"zone"`
}

func (ClusterTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterType)(nil)).Elem()
}

func (i ClusterTypeArgs) ToClusterTypeOutput() ClusterTypeOutput {
	return i.ToClusterTypeOutputWithContext(context.Background())
}

func (i ClusterTypeArgs) ToClusterTypeOutputWithContext(ctx context.Context) ClusterTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterTypeOutput)
}

func (i ClusterTypeArgs) ToClusterTypePtrOutput() ClusterTypePtrOutput {
	return i.ToClusterTypePtrOutputWithContext(context.Background())
}

func (i ClusterTypeArgs) ToClusterTypePtrOutputWithContext(ctx context.Context) ClusterTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterTypeOutput).ToClusterTypePtrOutputWithContext(ctx)
}

// ClusterTypePtrInput is an input type that accepts ClusterTypeArgs, ClusterTypePtr and ClusterTypePtrOutput values.
// You can construct a concrete instance of `ClusterTypePtrInput` via:
//
//          ClusterTypeArgs{...}
//
//  or:
//
//          nil
type ClusterTypePtrInput interface {
	pulumi.Input

	ToClusterTypePtrOutput() ClusterTypePtrOutput
	ToClusterTypePtrOutputWithContext(context.Context) ClusterTypePtrOutput
}

type clusterTypePtrType ClusterTypeArgs

func ClusterTypePtr(v *ClusterTypeArgs) ClusterTypePtrInput {
	return (*clusterTypePtrType)(v)
}

func (*clusterTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterType)(nil)).Elem()
}

func (i *clusterTypePtrType) ToClusterTypePtrOutput() ClusterTypePtrOutput {
	return i.ToClusterTypePtrOutputWithContext(context.Background())
}

func (i *clusterTypePtrType) ToClusterTypePtrOutputWithContext(ctx context.Context) ClusterTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterTypePtrOutput)
}

// A Google Kubernetes Engine cluster.
type ClusterTypeOutput struct{ *pulumi.OutputState }

func (ClusterTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterType)(nil)).Elem()
}

func (o ClusterTypeOutput) ToClusterTypeOutput() ClusterTypeOutput {
	return o
}

func (o ClusterTypeOutput) ToClusterTypeOutputWithContext(ctx context.Context) ClusterTypeOutput {
	return o
}

func (o ClusterTypeOutput) ToClusterTypePtrOutput() ClusterTypePtrOutput {
	return o.ToClusterTypePtrOutputWithContext(context.Background())
}

func (o ClusterTypeOutput) ToClusterTypePtrOutputWithContext(ctx context.Context) ClusterTypePtrOutput {
	return o.ApplyT(func(v ClusterType) *ClusterType {
		return &v
	}).(ClusterTypePtrOutput)
}

// Configurations for the various addons available to run in the cluster.
func (o ClusterTypeOutput) AddonsConfig() AddonsConfigPtrOutput {
	return o.ApplyT(func(v ClusterType) *AddonsConfig { return v.AddonsConfig }).(AddonsConfigPtrOutput)
}

// Configuration controlling RBAC group membership information.
func (o ClusterTypeOutput) AuthenticatorGroupsConfig() AuthenticatorGroupsConfigPtrOutput {
	return o.ApplyT(func(v ClusterType) *AuthenticatorGroupsConfig { return v.AuthenticatorGroupsConfig }).(AuthenticatorGroupsConfigPtrOutput)
}

// Autopilot configuration for the cluster.
func (o ClusterTypeOutput) Autopilot() AutopilotPtrOutput {
	return o.ApplyT(func(v ClusterType) *Autopilot { return v.Autopilot }).(AutopilotPtrOutput)
}

// Cluster-level autoscaling configuration.
func (o ClusterTypeOutput) Autoscaling() ClusterAutoscalingPtrOutput {
	return o.ApplyT(func(v ClusterType) *ClusterAutoscaling { return v.Autoscaling }).(ClusterAutoscalingPtrOutput)
}

// Configuration for Binary Authorization.
func (o ClusterTypeOutput) BinaryAuthorization() BinaryAuthorizationPtrOutput {
	return o.ApplyT(func(v ClusterType) *BinaryAuthorization { return v.BinaryAuthorization }).(BinaryAuthorizationPtrOutput)
}

// The IP address range of the container pods in this cluster, in [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`). Leave blank to have one automatically chosen or specify a `/14` block in `10.0.0.0/8`.
func (o ClusterTypeOutput) ClusterIpv4Cidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterType) *string { return v.ClusterIpv4Cidr }).(pulumi.StringPtrOutput)
}

// Which conditions caused the current cluster state.
func (o ClusterTypeOutput) Conditions() StatusConditionArrayOutput {
	return o.ApplyT(func(v ClusterType) []StatusCondition { return v.Conditions }).(StatusConditionArrayOutput)
}

// [Output only] The time the cluster was created, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
func (o ClusterTypeOutput) CreateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterType) *string { return v.CreateTime }).(pulumi.StringPtrOutput)
}

// [Output only] The current software version of the master endpoint.
func (o ClusterTypeOutput) CurrentMasterVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterType) *string { return v.CurrentMasterVersion }).(pulumi.StringPtrOutput)
}

// [Output only] The number of nodes currently in the cluster. Deprecated. Call Kubernetes API directly to retrieve node information.
func (o ClusterTypeOutput) CurrentNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterType) *int { return v.CurrentNodeCount }).(pulumi.IntPtrOutput)
}

// [Output only] Deprecated, use [NodePools.version](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters.nodePools) instead. The current version of the node software components. If they are currently at multiple versions because they're in the process of being upgraded, this reflects the minimum version of all nodes.
func (o ClusterTypeOutput) CurrentNodeVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterType) *string { return v.CurrentNodeVersion }).(pulumi.StringPtrOutput)
}

// Configuration of etcd encryption.
func (o ClusterTypeOutput) DatabaseEncryption() DatabaseEncryptionPtrOutput {
	return o.ApplyT(func(v ClusterType) *DatabaseEncryption { return v.DatabaseEncryption }).(DatabaseEncryptionPtrOutput)
}

// The default constraint on the maximum number of pods that can be run simultaneously on a node in the node pool of this cluster. Only honored if cluster created with IP Alias support.
func (o ClusterTypeOutput) DefaultMaxPodsConstraint() MaxPodsConstraintPtrOutput {
	return o.ApplyT(func(v ClusterType) *MaxPodsConstraint { return v.DefaultMaxPodsConstraint }).(MaxPodsConstraintPtrOutput)
}

// An optional description of this cluster.
func (o ClusterTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Kubernetes alpha features are enabled on this cluster. This includes alpha API groups (e.g. v1alpha1) and features that may not be production ready in the kubernetes version of the master and nodes. The cluster has no SLA for uptime and master/node upgrades are disabled. Alpha enabled clusters are automatically deleted thirty days after creation.
func (o ClusterTypeOutput) EnableKubernetesAlpha() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterType) *bool { return v.EnableKubernetesAlpha }).(pulumi.BoolPtrOutput)
}

// Enable the ability to use Cloud TPUs in this cluster.
func (o ClusterTypeOutput) EnableTpu() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterType) *bool { return v.EnableTpu }).(pulumi.BoolPtrOutput)
}

// [Output only] The IP address of this cluster's master endpoint. The endpoint can be accessed from the internet at `https://username:password@endpoint/`. See the `masterAuth` property of this resource for username and password information.
func (o ClusterTypeOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterType) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// [Output only] The time the cluster will be automatically deleted in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
func (o ClusterTypeOutput) ExpireTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterType) *string { return v.ExpireTime }).(pulumi.StringPtrOutput)
}

// The initial Kubernetes version for this cluster. Valid versions are those found in validMasterVersions returned by getServerConfig. The version can be upgraded over time; such upgrades are reflected in currentMasterVersion and currentNodeVersion. Users may specify either explicit versions offered by Kubernetes Engine or version aliases, which have the following behavior: - "latest": picks the highest valid Kubernetes version - "1.X": picks the highest valid patch+gke.N patch in the 1.X version - "1.X.Y": picks the highest valid gke.N patch in the 1.X.Y version - "1.X.Y-gke.N": picks an explicit Kubernetes version - "","-": picks the default Kubernetes version
func (o ClusterTypeOutput) InitialClusterVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterType) *string { return v.InitialClusterVersion }).(pulumi.StringPtrOutput)
}

// The number of nodes to create in this cluster. You must ensure that your Compute Engine [resource quota](https://cloud.google.com/compute/quotas) is sufficient for this number of instances. You must also have available firewall and routes quota. For requests, this field should only be used in lieu of a "node_pool" object, since this configuration (along with the "node_config") will be used to create a "NodePool" object with an auto-generated name. Do not use this and a node_pool at the same time. This field is deprecated, use node_pool.initial_node_count instead.
func (o ClusterTypeOutput) InitialNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterType) *int { return v.InitialNodeCount }).(pulumi.IntPtrOutput)
}

// Deprecated. Use node_pools.instance_group_urls.
func (o ClusterTypeOutput) InstanceGroupUrls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterType) []string { return v.InstanceGroupUrls }).(pulumi.StringArrayOutput)
}

// Configuration for cluster IP allocation.
func (o ClusterTypeOutput) IpAllocationPolicy() IPAllocationPolicyPtrOutput {
	return o.ApplyT(func(v ClusterType) *IPAllocationPolicy { return v.IpAllocationPolicy }).(IPAllocationPolicyPtrOutput)
}

// The fingerprint of the set of labels for this cluster.
func (o ClusterTypeOutput) LabelFingerprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterType) *string { return v.LabelFingerprint }).(pulumi.StringPtrOutput)
}

// Configuration for the legacy ABAC authorization mode.
func (o ClusterTypeOutput) LegacyAbac() LegacyAbacPtrOutput {
	return o.ApplyT(func(v ClusterType) *LegacyAbac { return v.LegacyAbac }).(LegacyAbacPtrOutput)
}

// [Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) or [region](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) in which the cluster resides.
func (o ClusterTypeOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterType) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the cluster's nodes should be located. This field provides a default value if [NodePool.Locations](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters.nodePools#NodePool.FIELDS.locations) are not specified during node pool creation. Warning: changing cluster locations will update the [NodePool.Locations](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters.nodePools#NodePool.FIELDS.locations) of all node pools and will result in nodes being added and/or removed.
func (o ClusterTypeOutput) Locations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterType) []string { return v.Locations }).(pulumi.StringArrayOutput)
}

// The logging service the cluster should use to write logs. Currently available options: * `logging.googleapis.com/kubernetes` - The Cloud Logging service with a Kubernetes-native resource model * `logging.googleapis.com` - The legacy Cloud Logging service (no longer available as of GKE 1.15). * `none` - no logs will be exported from the cluster. If left as an empty string,`logging.googleapis.com/kubernetes` will be used for GKE 1.14+ or `logging.googleapis.com` for earlier versions.
func (o ClusterTypeOutput) LoggingService() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterType) *string { return v.LoggingService }).(pulumi.StringPtrOutput)
}

// Configure the maintenance policy for this cluster.
func (o ClusterTypeOutput) MaintenancePolicy() MaintenancePolicyPtrOutput {
	return o.ApplyT(func(v ClusterType) *MaintenancePolicy { return v.MaintenancePolicy }).(MaintenancePolicyPtrOutput)
}

// The authentication information for accessing the master endpoint. If unspecified, the defaults are used: For clusters before v1.12, if master_auth is unspecified, `username` will be set to "admin", a random password will be generated, and a client certificate will be issued.
func (o ClusterTypeOutput) MasterAuth() MasterAuthPtrOutput {
	return o.ApplyT(func(v ClusterType) *MasterAuth { return v.MasterAuth }).(MasterAuthPtrOutput)
}

// The configuration options for master authorized networks feature.
func (o ClusterTypeOutput) MasterAuthorizedNetworksConfig() MasterAuthorizedNetworksConfigPtrOutput {
	return o.ApplyT(func(v ClusterType) *MasterAuthorizedNetworksConfig { return v.MasterAuthorizedNetworksConfig }).(MasterAuthorizedNetworksConfigPtrOutput)
}

// The monitoring service the cluster should use to write metrics. Currently available options: * "monitoring.googleapis.com/kubernetes" - The Cloud Monitoring service with a Kubernetes-native resource model * `monitoring.googleapis.com` - The legacy Cloud Monitoring service (no longer available as of GKE 1.15). * `none` - No metrics will be exported from the cluster. If left as an empty string,`monitoring.googleapis.com/kubernetes` will be used for GKE 1.14+ or `monitoring.googleapis.com` for earlier versions.
func (o ClusterTypeOutput) MonitoringService() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterType) *string { return v.MonitoringService }).(pulumi.StringPtrOutput)
}

// The name of this cluster. The name must be unique within this project and location (e.g. zone or region), and can be up to 40 characters with the following restrictions: * Lowercase letters, numbers, and hyphens only. * Must start with a letter. * Must end with a number or a letter.
func (o ClusterTypeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterType) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The name of the Google Compute Engine [network](https://cloud.google.com/compute/docs/networks-and-firewalls#networks) to which the cluster is connected. If left unspecified, the `default` network will be used.
func (o ClusterTypeOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterType) *string { return v.Network }).(pulumi.StringPtrOutput)
}

// Configuration for cluster networking.
func (o ClusterTypeOutput) NetworkConfig() NetworkConfigPtrOutput {
	return o.ApplyT(func(v ClusterType) *NetworkConfig { return v.NetworkConfig }).(NetworkConfigPtrOutput)
}

// Configuration options for the NetworkPolicy feature.
func (o ClusterTypeOutput) NetworkPolicy() NetworkPolicyPtrOutput {
	return o.ApplyT(func(v ClusterType) *NetworkPolicy { return v.NetworkPolicy }).(NetworkPolicyPtrOutput)
}

// Parameters used in creating the cluster's nodes. For requests, this field should only be used in lieu of a "node_pool" object, since this configuration (along with the "initial_node_count") will be used to create a "NodePool" object with an auto-generated name. Do not use this and a node_pool at the same time. For responses, this field will be populated with the node configuration of the first node pool. (For configuration of each node pool, see `node_pool.config`) If unspecified, the defaults are used. This field is deprecated, use node_pool.config instead.
func (o ClusterTypeOutput) NodeConfig() NodeConfigPtrOutput {
	return o.ApplyT(func(v ClusterType) *NodeConfig { return v.NodeConfig }).(NodeConfigPtrOutput)
}

// [Output only] The size of the address space on each node for hosting containers. This is provisioned from within the `container_ipv4_cidr` range. This field will only be set when cluster is in route-based network mode.
func (o ClusterTypeOutput) NodeIpv4CidrSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterType) *int { return v.NodeIpv4CidrSize }).(pulumi.IntPtrOutput)
}

// The node pools associated with this cluster. This field should not be set if "node_config" or "initial_node_count" are specified.
func (o ClusterTypeOutput) NodePools() NodePoolTypeArrayOutput {
	return o.ApplyT(func(v ClusterType) []NodePoolType { return v.NodePools }).(NodePoolTypeArrayOutput)
}

// Notification configuration of the cluster.
func (o ClusterTypeOutput) NotificationConfig() NotificationConfigPtrOutput {
	return o.ApplyT(func(v ClusterType) *NotificationConfig { return v.NotificationConfig }).(NotificationConfigPtrOutput)
}

// Configuration for private cluster.
func (o ClusterTypeOutput) PrivateClusterConfig() PrivateClusterConfigPtrOutput {
	return o.ApplyT(func(v ClusterType) *PrivateClusterConfig { return v.PrivateClusterConfig }).(PrivateClusterConfigPtrOutput)
}

// Release channel configuration.
func (o ClusterTypeOutput) ReleaseChannel() ReleaseChannelPtrOutput {
	return o.ApplyT(func(v ClusterType) *ReleaseChannel { return v.ReleaseChannel }).(ReleaseChannelPtrOutput)
}

// The resource labels for the cluster to use to annotate any related Google Compute Engine resources.
func (o ClusterTypeOutput) ResourceLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ClusterType) map[string]string { return v.ResourceLabels }).(pulumi.StringMapOutput)
}

// Configuration for exporting resource usages. Resource usage export is disabled when this config is unspecified.
func (o ClusterTypeOutput) ResourceUsageExportConfig() ResourceUsageExportConfigPtrOutput {
	return o.ApplyT(func(v ClusterType) *ResourceUsageExportConfig { return v.ResourceUsageExportConfig }).(ResourceUsageExportConfigPtrOutput)
}

// [Output only] Server-defined URL for the resource.
func (o ClusterTypeOutput) SelfLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterType) *string { return v.SelfLink }).(pulumi.StringPtrOutput)
}

// [Output only] The IP address range of the Kubernetes services in this cluster, in [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `1.2.3.4/29`). Service addresses are typically put in the last `/16` from the container CIDR.
func (o ClusterTypeOutput) ServicesIpv4Cidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterType) *string { return v.ServicesIpv4Cidr }).(pulumi.StringPtrOutput)
}

// Shielded Nodes configuration.
func (o ClusterTypeOutput) ShieldedNodes() ShieldedNodesPtrOutput {
	return o.ApplyT(func(v ClusterType) *ShieldedNodes { return v.ShieldedNodes }).(ShieldedNodesPtrOutput)
}

// [Output only] The current status of this cluster.
func (o ClusterTypeOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterType) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// [Output only] Deprecated. Use conditions instead. Additional information about the current status of this cluster, if available.
func (o ClusterTypeOutput) StatusMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterType) *string { return v.StatusMessage }).(pulumi.StringPtrOutput)
}

// The name of the Google Compute Engine [subnetwork](https://cloud.google.com/compute/docs/subnetworks) to which the cluster is connected.
func (o ClusterTypeOutput) Subnetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterType) *string { return v.Subnetwork }).(pulumi.StringPtrOutput)
}

// [Output only] The IP address range of the Cloud TPUs in this cluster, in [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `1.2.3.4/29`).
func (o ClusterTypeOutput) TpuIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterType) *string { return v.TpuIpv4CidrBlock }).(pulumi.StringPtrOutput)
}

// Cluster-level Vertical Pod Autoscaling configuration.
func (o ClusterTypeOutput) VerticalPodAutoscaling() VerticalPodAutoscalingPtrOutput {
	return o.ApplyT(func(v ClusterType) *VerticalPodAutoscaling { return v.VerticalPodAutoscaling }).(VerticalPodAutoscalingPtrOutput)
}

// Configuration for the use of Kubernetes Service Accounts in GCP IAM policies.
func (o ClusterTypeOutput) WorkloadIdentityConfig() WorkloadIdentityConfigPtrOutput {
	return o.ApplyT(func(v ClusterType) *WorkloadIdentityConfig { return v.WorkloadIdentityConfig }).(WorkloadIdentityConfigPtrOutput)
}

// [Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field is deprecated, use location instead.
func (o ClusterTypeOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterType) *string { return v.Zone }).(pulumi.StringPtrOutput)
}

type ClusterTypePtrOutput struct{ *pulumi.OutputState }

func (ClusterTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterType)(nil)).Elem()
}

func (o ClusterTypePtrOutput) ToClusterTypePtrOutput() ClusterTypePtrOutput {
	return o
}

func (o ClusterTypePtrOutput) ToClusterTypePtrOutputWithContext(ctx context.Context) ClusterTypePtrOutput {
	return o
}

func (o ClusterTypePtrOutput) Elem() ClusterTypeOutput {
	return o.ApplyT(func(v *ClusterType) ClusterType { return *v }).(ClusterTypeOutput)
}

// Configurations for the various addons available to run in the cluster.
func (o ClusterTypePtrOutput) AddonsConfig() AddonsConfigPtrOutput {
	return o.ApplyT(func(v *ClusterType) *AddonsConfig {
		if v == nil {
			return nil
		}
		return v.AddonsConfig
	}).(AddonsConfigPtrOutput)
}

// Configuration controlling RBAC group membership information.
func (o ClusterTypePtrOutput) AuthenticatorGroupsConfig() AuthenticatorGroupsConfigPtrOutput {
	return o.ApplyT(func(v *ClusterType) *AuthenticatorGroupsConfig {
		if v == nil {
			return nil
		}
		return v.AuthenticatorGroupsConfig
	}).(AuthenticatorGroupsConfigPtrOutput)
}

// Autopilot configuration for the cluster.
func (o ClusterTypePtrOutput) Autopilot() AutopilotPtrOutput {
	return o.ApplyT(func(v *ClusterType) *Autopilot {
		if v == nil {
			return nil
		}
		return v.Autopilot
	}).(AutopilotPtrOutput)
}

// Cluster-level autoscaling configuration.
func (o ClusterTypePtrOutput) Autoscaling() ClusterAutoscalingPtrOutput {
	return o.ApplyT(func(v *ClusterType) *ClusterAutoscaling {
		if v == nil {
			return nil
		}
		return v.Autoscaling
	}).(ClusterAutoscalingPtrOutput)
}

// Configuration for Binary Authorization.
func (o ClusterTypePtrOutput) BinaryAuthorization() BinaryAuthorizationPtrOutput {
	return o.ApplyT(func(v *ClusterType) *BinaryAuthorization {
		if v == nil {
			return nil
		}
		return v.BinaryAuthorization
	}).(BinaryAuthorizationPtrOutput)
}

// The IP address range of the container pods in this cluster, in [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`). Leave blank to have one automatically chosen or specify a `/14` block in `10.0.0.0/8`.
func (o ClusterTypePtrOutput) ClusterIpv4Cidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterType) *string {
		if v == nil {
			return nil
		}
		return v.ClusterIpv4Cidr
	}).(pulumi.StringPtrOutput)
}

// Which conditions caused the current cluster state.
func (o ClusterTypePtrOutput) Conditions() StatusConditionArrayOutput {
	return o.ApplyT(func(v *ClusterType) []StatusCondition {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(StatusConditionArrayOutput)
}

// [Output only] The time the cluster was created, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
func (o ClusterTypePtrOutput) CreateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterType) *string {
		if v == nil {
			return nil
		}
		return v.CreateTime
	}).(pulumi.StringPtrOutput)
}

// [Output only] The current software version of the master endpoint.
func (o ClusterTypePtrOutput) CurrentMasterVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterType) *string {
		if v == nil {
			return nil
		}
		return v.CurrentMasterVersion
	}).(pulumi.StringPtrOutput)
}

// [Output only] The number of nodes currently in the cluster. Deprecated. Call Kubernetes API directly to retrieve node information.
func (o ClusterTypePtrOutput) CurrentNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterType) *int {
		if v == nil {
			return nil
		}
		return v.CurrentNodeCount
	}).(pulumi.IntPtrOutput)
}

// [Output only] Deprecated, use [NodePools.version](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters.nodePools) instead. The current version of the node software components. If they are currently at multiple versions because they're in the process of being upgraded, this reflects the minimum version of all nodes.
func (o ClusterTypePtrOutput) CurrentNodeVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterType) *string {
		if v == nil {
			return nil
		}
		return v.CurrentNodeVersion
	}).(pulumi.StringPtrOutput)
}

// Configuration of etcd encryption.
func (o ClusterTypePtrOutput) DatabaseEncryption() DatabaseEncryptionPtrOutput {
	return o.ApplyT(func(v *ClusterType) *DatabaseEncryption {
		if v == nil {
			return nil
		}
		return v.DatabaseEncryption
	}).(DatabaseEncryptionPtrOutput)
}

// The default constraint on the maximum number of pods that can be run simultaneously on a node in the node pool of this cluster. Only honored if cluster created with IP Alias support.
func (o ClusterTypePtrOutput) DefaultMaxPodsConstraint() MaxPodsConstraintPtrOutput {
	return o.ApplyT(func(v *ClusterType) *MaxPodsConstraint {
		if v == nil {
			return nil
		}
		return v.DefaultMaxPodsConstraint
	}).(MaxPodsConstraintPtrOutput)
}

// An optional description of this cluster.
func (o ClusterTypePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterType) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Kubernetes alpha features are enabled on this cluster. This includes alpha API groups (e.g. v1alpha1) and features that may not be production ready in the kubernetes version of the master and nodes. The cluster has no SLA for uptime and master/node upgrades are disabled. Alpha enabled clusters are automatically deleted thirty days after creation.
func (o ClusterTypePtrOutput) EnableKubernetesAlpha() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterType) *bool {
		if v == nil {
			return nil
		}
		return v.EnableKubernetesAlpha
	}).(pulumi.BoolPtrOutput)
}

// Enable the ability to use Cloud TPUs in this cluster.
func (o ClusterTypePtrOutput) EnableTpu() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterType) *bool {
		if v == nil {
			return nil
		}
		return v.EnableTpu
	}).(pulumi.BoolPtrOutput)
}

// [Output only] The IP address of this cluster's master endpoint. The endpoint can be accessed from the internet at `https://username:password@endpoint/`. See the `masterAuth` property of this resource for username and password information.
func (o ClusterTypePtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterType) *string {
		if v == nil {
			return nil
		}
		return v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// [Output only] The time the cluster will be automatically deleted in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
func (o ClusterTypePtrOutput) ExpireTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterType) *string {
		if v == nil {
			return nil
		}
		return v.ExpireTime
	}).(pulumi.StringPtrOutput)
}

// The initial Kubernetes version for this cluster. Valid versions are those found in validMasterVersions returned by getServerConfig. The version can be upgraded over time; such upgrades are reflected in currentMasterVersion and currentNodeVersion. Users may specify either explicit versions offered by Kubernetes Engine or version aliases, which have the following behavior: - "latest": picks the highest valid Kubernetes version - "1.X": picks the highest valid patch+gke.N patch in the 1.X version - "1.X.Y": picks the highest valid gke.N patch in the 1.X.Y version - "1.X.Y-gke.N": picks an explicit Kubernetes version - "","-": picks the default Kubernetes version
func (o ClusterTypePtrOutput) InitialClusterVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterType) *string {
		if v == nil {
			return nil
		}
		return v.InitialClusterVersion
	}).(pulumi.StringPtrOutput)
}

// The number of nodes to create in this cluster. You must ensure that your Compute Engine [resource quota](https://cloud.google.com/compute/quotas) is sufficient for this number of instances. You must also have available firewall and routes quota. For requests, this field should only be used in lieu of a "node_pool" object, since this configuration (along with the "node_config") will be used to create a "NodePool" object with an auto-generated name. Do not use this and a node_pool at the same time. This field is deprecated, use node_pool.initial_node_count instead.
func (o ClusterTypePtrOutput) InitialNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterType) *int {
		if v == nil {
			return nil
		}
		return v.InitialNodeCount
	}).(pulumi.IntPtrOutput)
}

// Deprecated. Use node_pools.instance_group_urls.
func (o ClusterTypePtrOutput) InstanceGroupUrls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClusterType) []string {
		if v == nil {
			return nil
		}
		return v.InstanceGroupUrls
	}).(pulumi.StringArrayOutput)
}

// Configuration for cluster IP allocation.
func (o ClusterTypePtrOutput) IpAllocationPolicy() IPAllocationPolicyPtrOutput {
	return o.ApplyT(func(v *ClusterType) *IPAllocationPolicy {
		if v == nil {
			return nil
		}
		return v.IpAllocationPolicy
	}).(IPAllocationPolicyPtrOutput)
}

// The fingerprint of the set of labels for this cluster.
func (o ClusterTypePtrOutput) LabelFingerprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterType) *string {
		if v == nil {
			return nil
		}
		return v.LabelFingerprint
	}).(pulumi.StringPtrOutput)
}

// Configuration for the legacy ABAC authorization mode.
func (o ClusterTypePtrOutput) LegacyAbac() LegacyAbacPtrOutput {
	return o.ApplyT(func(v *ClusterType) *LegacyAbac {
		if v == nil {
			return nil
		}
		return v.LegacyAbac
	}).(LegacyAbacPtrOutput)
}

// [Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) or [region](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) in which the cluster resides.
func (o ClusterTypePtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterType) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the cluster's nodes should be located. This field provides a default value if [NodePool.Locations](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters.nodePools#NodePool.FIELDS.locations) are not specified during node pool creation. Warning: changing cluster locations will update the [NodePool.Locations](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters.nodePools#NodePool.FIELDS.locations) of all node pools and will result in nodes being added and/or removed.
func (o ClusterTypePtrOutput) Locations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClusterType) []string {
		if v == nil {
			return nil
		}
		return v.Locations
	}).(pulumi.StringArrayOutput)
}

// The logging service the cluster should use to write logs. Currently available options: * `logging.googleapis.com/kubernetes` - The Cloud Logging service with a Kubernetes-native resource model * `logging.googleapis.com` - The legacy Cloud Logging service (no longer available as of GKE 1.15). * `none` - no logs will be exported from the cluster. If left as an empty string,`logging.googleapis.com/kubernetes` will be used for GKE 1.14+ or `logging.googleapis.com` for earlier versions.
func (o ClusterTypePtrOutput) LoggingService() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterType) *string {
		if v == nil {
			return nil
		}
		return v.LoggingService
	}).(pulumi.StringPtrOutput)
}

// Configure the maintenance policy for this cluster.
func (o ClusterTypePtrOutput) MaintenancePolicy() MaintenancePolicyPtrOutput {
	return o.ApplyT(func(v *ClusterType) *MaintenancePolicy {
		if v == nil {
			return nil
		}
		return v.MaintenancePolicy
	}).(MaintenancePolicyPtrOutput)
}

// The authentication information for accessing the master endpoint. If unspecified, the defaults are used: For clusters before v1.12, if master_auth is unspecified, `username` will be set to "admin", a random password will be generated, and a client certificate will be issued.
func (o ClusterTypePtrOutput) MasterAuth() MasterAuthPtrOutput {
	return o.ApplyT(func(v *ClusterType) *MasterAuth {
		if v == nil {
			return nil
		}
		return v.MasterAuth
	}).(MasterAuthPtrOutput)
}

// The configuration options for master authorized networks feature.
func (o ClusterTypePtrOutput) MasterAuthorizedNetworksConfig() MasterAuthorizedNetworksConfigPtrOutput {
	return o.ApplyT(func(v *ClusterType) *MasterAuthorizedNetworksConfig {
		if v == nil {
			return nil
		}
		return v.MasterAuthorizedNetworksConfig
	}).(MasterAuthorizedNetworksConfigPtrOutput)
}

// The monitoring service the cluster should use to write metrics. Currently available options: * "monitoring.googleapis.com/kubernetes" - The Cloud Monitoring service with a Kubernetes-native resource model * `monitoring.googleapis.com` - The legacy Cloud Monitoring service (no longer available as of GKE 1.15). * `none` - No metrics will be exported from the cluster. If left as an empty string,`monitoring.googleapis.com/kubernetes` will be used for GKE 1.14+ or `monitoring.googleapis.com` for earlier versions.
func (o ClusterTypePtrOutput) MonitoringService() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterType) *string {
		if v == nil {
			return nil
		}
		return v.MonitoringService
	}).(pulumi.StringPtrOutput)
}

// The name of this cluster. The name must be unique within this project and location (e.g. zone or region), and can be up to 40 characters with the following restrictions: * Lowercase letters, numbers, and hyphens only. * Must start with a letter. * Must end with a number or a letter.
func (o ClusterTypePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterType) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The name of the Google Compute Engine [network](https://cloud.google.com/compute/docs/networks-and-firewalls#networks) to which the cluster is connected. If left unspecified, the `default` network will be used.
func (o ClusterTypePtrOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterType) *string {
		if v == nil {
			return nil
		}
		return v.Network
	}).(pulumi.StringPtrOutput)
}

// Configuration for cluster networking.
func (o ClusterTypePtrOutput) NetworkConfig() NetworkConfigPtrOutput {
	return o.ApplyT(func(v *ClusterType) *NetworkConfig {
		if v == nil {
			return nil
		}
		return v.NetworkConfig
	}).(NetworkConfigPtrOutput)
}

// Configuration options for the NetworkPolicy feature.
func (o ClusterTypePtrOutput) NetworkPolicy() NetworkPolicyPtrOutput {
	return o.ApplyT(func(v *ClusterType) *NetworkPolicy {
		if v == nil {
			return nil
		}
		return v.NetworkPolicy
	}).(NetworkPolicyPtrOutput)
}

// Parameters used in creating the cluster's nodes. For requests, this field should only be used in lieu of a "node_pool" object, since this configuration (along with the "initial_node_count") will be used to create a "NodePool" object with an auto-generated name. Do not use this and a node_pool at the same time. For responses, this field will be populated with the node configuration of the first node pool. (For configuration of each node pool, see `node_pool.config`) If unspecified, the defaults are used. This field is deprecated, use node_pool.config instead.
func (o ClusterTypePtrOutput) NodeConfig() NodeConfigPtrOutput {
	return o.ApplyT(func(v *ClusterType) *NodeConfig {
		if v == nil {
			return nil
		}
		return v.NodeConfig
	}).(NodeConfigPtrOutput)
}

// [Output only] The size of the address space on each node for hosting containers. This is provisioned from within the `container_ipv4_cidr` range. This field will only be set when cluster is in route-based network mode.
func (o ClusterTypePtrOutput) NodeIpv4CidrSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterType) *int {
		if v == nil {
			return nil
		}
		return v.NodeIpv4CidrSize
	}).(pulumi.IntPtrOutput)
}

// The node pools associated with this cluster. This field should not be set if "node_config" or "initial_node_count" are specified.
func (o ClusterTypePtrOutput) NodePools() NodePoolTypeArrayOutput {
	return o.ApplyT(func(v *ClusterType) []NodePoolType {
		if v == nil {
			return nil
		}
		return v.NodePools
	}).(NodePoolTypeArrayOutput)
}

// Notification configuration of the cluster.
func (o ClusterTypePtrOutput) NotificationConfig() NotificationConfigPtrOutput {
	return o.ApplyT(func(v *ClusterType) *NotificationConfig {
		if v == nil {
			return nil
		}
		return v.NotificationConfig
	}).(NotificationConfigPtrOutput)
}

// Configuration for private cluster.
func (o ClusterTypePtrOutput) PrivateClusterConfig() PrivateClusterConfigPtrOutput {
	return o.ApplyT(func(v *ClusterType) *PrivateClusterConfig {
		if v == nil {
			return nil
		}
		return v.PrivateClusterConfig
	}).(PrivateClusterConfigPtrOutput)
}

// Release channel configuration.
func (o ClusterTypePtrOutput) ReleaseChannel() ReleaseChannelPtrOutput {
	return o.ApplyT(func(v *ClusterType) *ReleaseChannel {
		if v == nil {
			return nil
		}
		return v.ReleaseChannel
	}).(ReleaseChannelPtrOutput)
}

// The resource labels for the cluster to use to annotate any related Google Compute Engine resources.
func (o ClusterTypePtrOutput) ResourceLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ClusterType) map[string]string {
		if v == nil {
			return nil
		}
		return v.ResourceLabels
	}).(pulumi.StringMapOutput)
}

// Configuration for exporting resource usages. Resource usage export is disabled when this config is unspecified.
func (o ClusterTypePtrOutput) ResourceUsageExportConfig() ResourceUsageExportConfigPtrOutput {
	return o.ApplyT(func(v *ClusterType) *ResourceUsageExportConfig {
		if v == nil {
			return nil
		}
		return v.ResourceUsageExportConfig
	}).(ResourceUsageExportConfigPtrOutput)
}

// [Output only] Server-defined URL for the resource.
func (o ClusterTypePtrOutput) SelfLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterType) *string {
		if v == nil {
			return nil
		}
		return v.SelfLink
	}).(pulumi.StringPtrOutput)
}

// [Output only] The IP address range of the Kubernetes services in this cluster, in [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `1.2.3.4/29`). Service addresses are typically put in the last `/16` from the container CIDR.
func (o ClusterTypePtrOutput) ServicesIpv4Cidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterType) *string {
		if v == nil {
			return nil
		}
		return v.ServicesIpv4Cidr
	}).(pulumi.StringPtrOutput)
}

// Shielded Nodes configuration.
func (o ClusterTypePtrOutput) ShieldedNodes() ShieldedNodesPtrOutput {
	return o.ApplyT(func(v *ClusterType) *ShieldedNodes {
		if v == nil {
			return nil
		}
		return v.ShieldedNodes
	}).(ShieldedNodesPtrOutput)
}

// [Output only] The current status of this cluster.
func (o ClusterTypePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterType) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// [Output only] Deprecated. Use conditions instead. Additional information about the current status of this cluster, if available.
func (o ClusterTypePtrOutput) StatusMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterType) *string {
		if v == nil {
			return nil
		}
		return v.StatusMessage
	}).(pulumi.StringPtrOutput)
}

// The name of the Google Compute Engine [subnetwork](https://cloud.google.com/compute/docs/subnetworks) to which the cluster is connected.
func (o ClusterTypePtrOutput) Subnetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterType) *string {
		if v == nil {
			return nil
		}
		return v.Subnetwork
	}).(pulumi.StringPtrOutput)
}

// [Output only] The IP address range of the Cloud TPUs in this cluster, in [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `1.2.3.4/29`).
func (o ClusterTypePtrOutput) TpuIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterType) *string {
		if v == nil {
			return nil
		}
		return v.TpuIpv4CidrBlock
	}).(pulumi.StringPtrOutput)
}

// Cluster-level Vertical Pod Autoscaling configuration.
func (o ClusterTypePtrOutput) VerticalPodAutoscaling() VerticalPodAutoscalingPtrOutput {
	return o.ApplyT(func(v *ClusterType) *VerticalPodAutoscaling {
		if v == nil {
			return nil
		}
		return v.VerticalPodAutoscaling
	}).(VerticalPodAutoscalingPtrOutput)
}

// Configuration for the use of Kubernetes Service Accounts in GCP IAM policies.
func (o ClusterTypePtrOutput) WorkloadIdentityConfig() WorkloadIdentityConfigPtrOutput {
	return o.ApplyT(func(v *ClusterType) *WorkloadIdentityConfig {
		if v == nil {
			return nil
		}
		return v.WorkloadIdentityConfig
	}).(WorkloadIdentityConfigPtrOutput)
}

// [Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field is deprecated, use location instead.
func (o ClusterTypePtrOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterType) *string {
		if v == nil {
			return nil
		}
		return v.Zone
	}).(pulumi.StringPtrOutput)
}

// ClusterAutoscaling contains global, per-cluster information required by Cluster Autoscaler to automatically adjust the size of the cluster and create/delete node pools based on the current needs.
type ClusterAutoscaling struct {
	// The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the NodePool's nodes can be created by NAP.
	AutoprovisioningLocations []string `pulumi:"autoprovisioningLocations"`
	// AutoprovisioningNodePoolDefaults contains defaults for a node pool created by NAP.
	AutoprovisioningNodePoolDefaults *AutoprovisioningNodePoolDefaults `pulumi:"autoprovisioningNodePoolDefaults"`
	// Enables automatic node pool creation and deletion.
	EnableNodeAutoprovisioning *bool `pulumi:"enableNodeAutoprovisioning"`
	// Contains global constraints regarding minimum and maximum amount of resources in the cluster.
	ResourceLimits []ResourceLimit `pulumi:"resourceLimits"`
}

// ClusterAutoscalingInput is an input type that accepts ClusterAutoscalingArgs and ClusterAutoscalingOutput values.
// You can construct a concrete instance of `ClusterAutoscalingInput` via:
//
//          ClusterAutoscalingArgs{...}
type ClusterAutoscalingInput interface {
	pulumi.Input

	ToClusterAutoscalingOutput() ClusterAutoscalingOutput
	ToClusterAutoscalingOutputWithContext(context.Context) ClusterAutoscalingOutput
}

// ClusterAutoscaling contains global, per-cluster information required by Cluster Autoscaler to automatically adjust the size of the cluster and create/delete node pools based on the current needs.
type ClusterAutoscalingArgs struct {
	// The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the NodePool's nodes can be created by NAP.
	AutoprovisioningLocations pulumi.StringArrayInput `pulumi:"autoprovisioningLocations"`
	// AutoprovisioningNodePoolDefaults contains defaults for a node pool created by NAP.
	AutoprovisioningNodePoolDefaults AutoprovisioningNodePoolDefaultsPtrInput `pulumi:"autoprovisioningNodePoolDefaults"`
	// Enables automatic node pool creation and deletion.
	EnableNodeAutoprovisioning pulumi.BoolPtrInput `pulumi:"enableNodeAutoprovisioning"`
	// Contains global constraints regarding minimum and maximum amount of resources in the cluster.
	ResourceLimits ResourceLimitArrayInput `pulumi:"resourceLimits"`
}

func (ClusterAutoscalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterAutoscaling)(nil)).Elem()
}

func (i ClusterAutoscalingArgs) ToClusterAutoscalingOutput() ClusterAutoscalingOutput {
	return i.ToClusterAutoscalingOutputWithContext(context.Background())
}

func (i ClusterAutoscalingArgs) ToClusterAutoscalingOutputWithContext(ctx context.Context) ClusterAutoscalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterAutoscalingOutput)
}

func (i ClusterAutoscalingArgs) ToClusterAutoscalingPtrOutput() ClusterAutoscalingPtrOutput {
	return i.ToClusterAutoscalingPtrOutputWithContext(context.Background())
}

func (i ClusterAutoscalingArgs) ToClusterAutoscalingPtrOutputWithContext(ctx context.Context) ClusterAutoscalingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterAutoscalingOutput).ToClusterAutoscalingPtrOutputWithContext(ctx)
}

// ClusterAutoscalingPtrInput is an input type that accepts ClusterAutoscalingArgs, ClusterAutoscalingPtr and ClusterAutoscalingPtrOutput values.
// You can construct a concrete instance of `ClusterAutoscalingPtrInput` via:
//
//          ClusterAutoscalingArgs{...}
//
//  or:
//
//          nil
type ClusterAutoscalingPtrInput interface {
	pulumi.Input

	ToClusterAutoscalingPtrOutput() ClusterAutoscalingPtrOutput
	ToClusterAutoscalingPtrOutputWithContext(context.Context) ClusterAutoscalingPtrOutput
}

type clusterAutoscalingPtrType ClusterAutoscalingArgs

func ClusterAutoscalingPtr(v *ClusterAutoscalingArgs) ClusterAutoscalingPtrInput {
	return (*clusterAutoscalingPtrType)(v)
}

func (*clusterAutoscalingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterAutoscaling)(nil)).Elem()
}

func (i *clusterAutoscalingPtrType) ToClusterAutoscalingPtrOutput() ClusterAutoscalingPtrOutput {
	return i.ToClusterAutoscalingPtrOutputWithContext(context.Background())
}

func (i *clusterAutoscalingPtrType) ToClusterAutoscalingPtrOutputWithContext(ctx context.Context) ClusterAutoscalingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterAutoscalingPtrOutput)
}

// ClusterAutoscaling contains global, per-cluster information required by Cluster Autoscaler to automatically adjust the size of the cluster and create/delete node pools based on the current needs.
type ClusterAutoscalingOutput struct{ *pulumi.OutputState }

func (ClusterAutoscalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterAutoscaling)(nil)).Elem()
}

func (o ClusterAutoscalingOutput) ToClusterAutoscalingOutput() ClusterAutoscalingOutput {
	return o
}

func (o ClusterAutoscalingOutput) ToClusterAutoscalingOutputWithContext(ctx context.Context) ClusterAutoscalingOutput {
	return o
}

func (o ClusterAutoscalingOutput) ToClusterAutoscalingPtrOutput() ClusterAutoscalingPtrOutput {
	return o.ToClusterAutoscalingPtrOutputWithContext(context.Background())
}

func (o ClusterAutoscalingOutput) ToClusterAutoscalingPtrOutputWithContext(ctx context.Context) ClusterAutoscalingPtrOutput {
	return o.ApplyT(func(v ClusterAutoscaling) *ClusterAutoscaling {
		return &v
	}).(ClusterAutoscalingPtrOutput)
}

// The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the NodePool's nodes can be created by NAP.
func (o ClusterAutoscalingOutput) AutoprovisioningLocations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterAutoscaling) []string { return v.AutoprovisioningLocations }).(pulumi.StringArrayOutput)
}

// AutoprovisioningNodePoolDefaults contains defaults for a node pool created by NAP.
func (o ClusterAutoscalingOutput) AutoprovisioningNodePoolDefaults() AutoprovisioningNodePoolDefaultsPtrOutput {
	return o.ApplyT(func(v ClusterAutoscaling) *AutoprovisioningNodePoolDefaults {
		return v.AutoprovisioningNodePoolDefaults
	}).(AutoprovisioningNodePoolDefaultsPtrOutput)
}

// Enables automatic node pool creation and deletion.
func (o ClusterAutoscalingOutput) EnableNodeAutoprovisioning() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterAutoscaling) *bool { return v.EnableNodeAutoprovisioning }).(pulumi.BoolPtrOutput)
}

// Contains global constraints regarding minimum and maximum amount of resources in the cluster.
func (o ClusterAutoscalingOutput) ResourceLimits() ResourceLimitArrayOutput {
	return o.ApplyT(func(v ClusterAutoscaling) []ResourceLimit { return v.ResourceLimits }).(ResourceLimitArrayOutput)
}

type ClusterAutoscalingPtrOutput struct{ *pulumi.OutputState }

func (ClusterAutoscalingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterAutoscaling)(nil)).Elem()
}

func (o ClusterAutoscalingPtrOutput) ToClusterAutoscalingPtrOutput() ClusterAutoscalingPtrOutput {
	return o
}

func (o ClusterAutoscalingPtrOutput) ToClusterAutoscalingPtrOutputWithContext(ctx context.Context) ClusterAutoscalingPtrOutput {
	return o
}

func (o ClusterAutoscalingPtrOutput) Elem() ClusterAutoscalingOutput {
	return o.ApplyT(func(v *ClusterAutoscaling) ClusterAutoscaling { return *v }).(ClusterAutoscalingOutput)
}

// The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the NodePool's nodes can be created by NAP.
func (o ClusterAutoscalingPtrOutput) AutoprovisioningLocations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClusterAutoscaling) []string {
		if v == nil {
			return nil
		}
		return v.AutoprovisioningLocations
	}).(pulumi.StringArrayOutput)
}

// AutoprovisioningNodePoolDefaults contains defaults for a node pool created by NAP.
func (o ClusterAutoscalingPtrOutput) AutoprovisioningNodePoolDefaults() AutoprovisioningNodePoolDefaultsPtrOutput {
	return o.ApplyT(func(v *ClusterAutoscaling) *AutoprovisioningNodePoolDefaults {
		if v == nil {
			return nil
		}
		return v.AutoprovisioningNodePoolDefaults
	}).(AutoprovisioningNodePoolDefaultsPtrOutput)
}

// Enables automatic node pool creation and deletion.
func (o ClusterAutoscalingPtrOutput) EnableNodeAutoprovisioning() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterAutoscaling) *bool {
		if v == nil {
			return nil
		}
		return v.EnableNodeAutoprovisioning
	}).(pulumi.BoolPtrOutput)
}

// Contains global constraints regarding minimum and maximum amount of resources in the cluster.
func (o ClusterAutoscalingPtrOutput) ResourceLimits() ResourceLimitArrayOutput {
	return o.ApplyT(func(v *ClusterAutoscaling) []ResourceLimit {
		if v == nil {
			return nil
		}
		return v.ResourceLimits
	}).(ResourceLimitArrayOutput)
}

// Configuration options for the Config Connector add-on.
type ConfigConnectorConfig struct {
	// Whether Cloud Connector is enabled for this cluster.
	Enabled *bool `pulumi:"enabled"`
}

// ConfigConnectorConfigInput is an input type that accepts ConfigConnectorConfigArgs and ConfigConnectorConfigOutput values.
// You can construct a concrete instance of `ConfigConnectorConfigInput` via:
//
//          ConfigConnectorConfigArgs{...}
type ConfigConnectorConfigInput interface {
	pulumi.Input

	ToConfigConnectorConfigOutput() ConfigConnectorConfigOutput
	ToConfigConnectorConfigOutputWithContext(context.Context) ConfigConnectorConfigOutput
}

// Configuration options for the Config Connector add-on.
type ConfigConnectorConfigArgs struct {
	// Whether Cloud Connector is enabled for this cluster.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (ConfigConnectorConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigConnectorConfig)(nil)).Elem()
}

func (i ConfigConnectorConfigArgs) ToConfigConnectorConfigOutput() ConfigConnectorConfigOutput {
	return i.ToConfigConnectorConfigOutputWithContext(context.Background())
}

func (i ConfigConnectorConfigArgs) ToConfigConnectorConfigOutputWithContext(ctx context.Context) ConfigConnectorConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigConnectorConfigOutput)
}

func (i ConfigConnectorConfigArgs) ToConfigConnectorConfigPtrOutput() ConfigConnectorConfigPtrOutput {
	return i.ToConfigConnectorConfigPtrOutputWithContext(context.Background())
}

func (i ConfigConnectorConfigArgs) ToConfigConnectorConfigPtrOutputWithContext(ctx context.Context) ConfigConnectorConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigConnectorConfigOutput).ToConfigConnectorConfigPtrOutputWithContext(ctx)
}

// ConfigConnectorConfigPtrInput is an input type that accepts ConfigConnectorConfigArgs, ConfigConnectorConfigPtr and ConfigConnectorConfigPtrOutput values.
// You can construct a concrete instance of `ConfigConnectorConfigPtrInput` via:
//
//          ConfigConnectorConfigArgs{...}
//
//  or:
//
//          nil
type ConfigConnectorConfigPtrInput interface {
	pulumi.Input

	ToConfigConnectorConfigPtrOutput() ConfigConnectorConfigPtrOutput
	ToConfigConnectorConfigPtrOutputWithContext(context.Context) ConfigConnectorConfigPtrOutput
}

type configConnectorConfigPtrType ConfigConnectorConfigArgs

func ConfigConnectorConfigPtr(v *ConfigConnectorConfigArgs) ConfigConnectorConfigPtrInput {
	return (*configConnectorConfigPtrType)(v)
}

func (*configConnectorConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigConnectorConfig)(nil)).Elem()
}

func (i *configConnectorConfigPtrType) ToConfigConnectorConfigPtrOutput() ConfigConnectorConfigPtrOutput {
	return i.ToConfigConnectorConfigPtrOutputWithContext(context.Background())
}

func (i *configConnectorConfigPtrType) ToConfigConnectorConfigPtrOutputWithContext(ctx context.Context) ConfigConnectorConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigConnectorConfigPtrOutput)
}

// Configuration options for the Config Connector add-on.
type ConfigConnectorConfigOutput struct{ *pulumi.OutputState }

func (ConfigConnectorConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigConnectorConfig)(nil)).Elem()
}

func (o ConfigConnectorConfigOutput) ToConfigConnectorConfigOutput() ConfigConnectorConfigOutput {
	return o
}

func (o ConfigConnectorConfigOutput) ToConfigConnectorConfigOutputWithContext(ctx context.Context) ConfigConnectorConfigOutput {
	return o
}

func (o ConfigConnectorConfigOutput) ToConfigConnectorConfigPtrOutput() ConfigConnectorConfigPtrOutput {
	return o.ToConfigConnectorConfigPtrOutputWithContext(context.Background())
}

func (o ConfigConnectorConfigOutput) ToConfigConnectorConfigPtrOutputWithContext(ctx context.Context) ConfigConnectorConfigPtrOutput {
	return o.ApplyT(func(v ConfigConnectorConfig) *ConfigConnectorConfig {
		return &v
	}).(ConfigConnectorConfigPtrOutput)
}

// Whether Cloud Connector is enabled for this cluster.
func (o ConfigConnectorConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConfigConnectorConfig) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type ConfigConnectorConfigPtrOutput struct{ *pulumi.OutputState }

func (ConfigConnectorConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigConnectorConfig)(nil)).Elem()
}

func (o ConfigConnectorConfigPtrOutput) ToConfigConnectorConfigPtrOutput() ConfigConnectorConfigPtrOutput {
	return o
}

func (o ConfigConnectorConfigPtrOutput) ToConfigConnectorConfigPtrOutputWithContext(ctx context.Context) ConfigConnectorConfigPtrOutput {
	return o
}

func (o ConfigConnectorConfigPtrOutput) Elem() ConfigConnectorConfigOutput {
	return o.ApplyT(func(v *ConfigConnectorConfig) ConfigConnectorConfig { return *v }).(ConfigConnectorConfigOutput)
}

// Whether Cloud Connector is enabled for this cluster.
func (o ConfigConnectorConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConfigConnectorConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Parameters for controlling consumption metering.
type ConsumptionMeteringConfig struct {
	// Whether to enable consumption metering for this cluster. If enabled, a second BigQuery table will be created to hold resource consumption records.
	Enabled *bool `pulumi:"enabled"`
}

// ConsumptionMeteringConfigInput is an input type that accepts ConsumptionMeteringConfigArgs and ConsumptionMeteringConfigOutput values.
// You can construct a concrete instance of `ConsumptionMeteringConfigInput` via:
//
//          ConsumptionMeteringConfigArgs{...}
type ConsumptionMeteringConfigInput interface {
	pulumi.Input

	ToConsumptionMeteringConfigOutput() ConsumptionMeteringConfigOutput
	ToConsumptionMeteringConfigOutputWithContext(context.Context) ConsumptionMeteringConfigOutput
}

// Parameters for controlling consumption metering.
type ConsumptionMeteringConfigArgs struct {
	// Whether to enable consumption metering for this cluster. If enabled, a second BigQuery table will be created to hold resource consumption records.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (ConsumptionMeteringConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConsumptionMeteringConfig)(nil)).Elem()
}

func (i ConsumptionMeteringConfigArgs) ToConsumptionMeteringConfigOutput() ConsumptionMeteringConfigOutput {
	return i.ToConsumptionMeteringConfigOutputWithContext(context.Background())
}

func (i ConsumptionMeteringConfigArgs) ToConsumptionMeteringConfigOutputWithContext(ctx context.Context) ConsumptionMeteringConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumptionMeteringConfigOutput)
}

func (i ConsumptionMeteringConfigArgs) ToConsumptionMeteringConfigPtrOutput() ConsumptionMeteringConfigPtrOutput {
	return i.ToConsumptionMeteringConfigPtrOutputWithContext(context.Background())
}

func (i ConsumptionMeteringConfigArgs) ToConsumptionMeteringConfigPtrOutputWithContext(ctx context.Context) ConsumptionMeteringConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumptionMeteringConfigOutput).ToConsumptionMeteringConfigPtrOutputWithContext(ctx)
}

// ConsumptionMeteringConfigPtrInput is an input type that accepts ConsumptionMeteringConfigArgs, ConsumptionMeteringConfigPtr and ConsumptionMeteringConfigPtrOutput values.
// You can construct a concrete instance of `ConsumptionMeteringConfigPtrInput` via:
//
//          ConsumptionMeteringConfigArgs{...}
//
//  or:
//
//          nil
type ConsumptionMeteringConfigPtrInput interface {
	pulumi.Input

	ToConsumptionMeteringConfigPtrOutput() ConsumptionMeteringConfigPtrOutput
	ToConsumptionMeteringConfigPtrOutputWithContext(context.Context) ConsumptionMeteringConfigPtrOutput
}

type consumptionMeteringConfigPtrType ConsumptionMeteringConfigArgs

func ConsumptionMeteringConfigPtr(v *ConsumptionMeteringConfigArgs) ConsumptionMeteringConfigPtrInput {
	return (*consumptionMeteringConfigPtrType)(v)
}

func (*consumptionMeteringConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConsumptionMeteringConfig)(nil)).Elem()
}

func (i *consumptionMeteringConfigPtrType) ToConsumptionMeteringConfigPtrOutput() ConsumptionMeteringConfigPtrOutput {
	return i.ToConsumptionMeteringConfigPtrOutputWithContext(context.Background())
}

func (i *consumptionMeteringConfigPtrType) ToConsumptionMeteringConfigPtrOutputWithContext(ctx context.Context) ConsumptionMeteringConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumptionMeteringConfigPtrOutput)
}

// Parameters for controlling consumption metering.
type ConsumptionMeteringConfigOutput struct{ *pulumi.OutputState }

func (ConsumptionMeteringConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConsumptionMeteringConfig)(nil)).Elem()
}

func (o ConsumptionMeteringConfigOutput) ToConsumptionMeteringConfigOutput() ConsumptionMeteringConfigOutput {
	return o
}

func (o ConsumptionMeteringConfigOutput) ToConsumptionMeteringConfigOutputWithContext(ctx context.Context) ConsumptionMeteringConfigOutput {
	return o
}

func (o ConsumptionMeteringConfigOutput) ToConsumptionMeteringConfigPtrOutput() ConsumptionMeteringConfigPtrOutput {
	return o.ToConsumptionMeteringConfigPtrOutputWithContext(context.Background())
}

func (o ConsumptionMeteringConfigOutput) ToConsumptionMeteringConfigPtrOutputWithContext(ctx context.Context) ConsumptionMeteringConfigPtrOutput {
	return o.ApplyT(func(v ConsumptionMeteringConfig) *ConsumptionMeteringConfig {
		return &v
	}).(ConsumptionMeteringConfigPtrOutput)
}

// Whether to enable consumption metering for this cluster. If enabled, a second BigQuery table will be created to hold resource consumption records.
func (o ConsumptionMeteringConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConsumptionMeteringConfig) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type ConsumptionMeteringConfigPtrOutput struct{ *pulumi.OutputState }

func (ConsumptionMeteringConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConsumptionMeteringConfig)(nil)).Elem()
}

func (o ConsumptionMeteringConfigPtrOutput) ToConsumptionMeteringConfigPtrOutput() ConsumptionMeteringConfigPtrOutput {
	return o
}

func (o ConsumptionMeteringConfigPtrOutput) ToConsumptionMeteringConfigPtrOutputWithContext(ctx context.Context) ConsumptionMeteringConfigPtrOutput {
	return o
}

func (o ConsumptionMeteringConfigPtrOutput) Elem() ConsumptionMeteringConfigOutput {
	return o.ApplyT(func(v *ConsumptionMeteringConfig) ConsumptionMeteringConfig { return *v }).(ConsumptionMeteringConfigOutput)
}

// Whether to enable consumption metering for this cluster. If enabled, a second BigQuery table will be created to hold resource consumption records.
func (o ConsumptionMeteringConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConsumptionMeteringConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Time window specified for daily maintenance operations.
type DailyMaintenanceWindow struct {
	// [Output only] Duration of the time window, automatically chosen to be smallest possible in the given scenario. Duration will be in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format "PTnHnMnS".
	Duration *string `pulumi:"duration"`
	// Time within the maintenance window to start the maintenance operations. Time format should be in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format "HH:MM", where HH : [00-23] and MM : [00-59] GMT.
	StartTime *string `pulumi:"startTime"`
}

// DailyMaintenanceWindowInput is an input type that accepts DailyMaintenanceWindowArgs and DailyMaintenanceWindowOutput values.
// You can construct a concrete instance of `DailyMaintenanceWindowInput` via:
//
//          DailyMaintenanceWindowArgs{...}
type DailyMaintenanceWindowInput interface {
	pulumi.Input

	ToDailyMaintenanceWindowOutput() DailyMaintenanceWindowOutput
	ToDailyMaintenanceWindowOutputWithContext(context.Context) DailyMaintenanceWindowOutput
}

// Time window specified for daily maintenance operations.
type DailyMaintenanceWindowArgs struct {
	// [Output only] Duration of the time window, automatically chosen to be smallest possible in the given scenario. Duration will be in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format "PTnHnMnS".
	Duration pulumi.StringPtrInput `pulumi:"duration"`
	// Time within the maintenance window to start the maintenance operations. Time format should be in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format "HH:MM", where HH : [00-23] and MM : [00-59] GMT.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
}

func (DailyMaintenanceWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DailyMaintenanceWindow)(nil)).Elem()
}

func (i DailyMaintenanceWindowArgs) ToDailyMaintenanceWindowOutput() DailyMaintenanceWindowOutput {
	return i.ToDailyMaintenanceWindowOutputWithContext(context.Background())
}

func (i DailyMaintenanceWindowArgs) ToDailyMaintenanceWindowOutputWithContext(ctx context.Context) DailyMaintenanceWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DailyMaintenanceWindowOutput)
}

func (i DailyMaintenanceWindowArgs) ToDailyMaintenanceWindowPtrOutput() DailyMaintenanceWindowPtrOutput {
	return i.ToDailyMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (i DailyMaintenanceWindowArgs) ToDailyMaintenanceWindowPtrOutputWithContext(ctx context.Context) DailyMaintenanceWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DailyMaintenanceWindowOutput).ToDailyMaintenanceWindowPtrOutputWithContext(ctx)
}

// DailyMaintenanceWindowPtrInput is an input type that accepts DailyMaintenanceWindowArgs, DailyMaintenanceWindowPtr and DailyMaintenanceWindowPtrOutput values.
// You can construct a concrete instance of `DailyMaintenanceWindowPtrInput` via:
//
//          DailyMaintenanceWindowArgs{...}
//
//  or:
//
//          nil
type DailyMaintenanceWindowPtrInput interface {
	pulumi.Input

	ToDailyMaintenanceWindowPtrOutput() DailyMaintenanceWindowPtrOutput
	ToDailyMaintenanceWindowPtrOutputWithContext(context.Context) DailyMaintenanceWindowPtrOutput
}

type dailyMaintenanceWindowPtrType DailyMaintenanceWindowArgs

func DailyMaintenanceWindowPtr(v *DailyMaintenanceWindowArgs) DailyMaintenanceWindowPtrInput {
	return (*dailyMaintenanceWindowPtrType)(v)
}

func (*dailyMaintenanceWindowPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DailyMaintenanceWindow)(nil)).Elem()
}

func (i *dailyMaintenanceWindowPtrType) ToDailyMaintenanceWindowPtrOutput() DailyMaintenanceWindowPtrOutput {
	return i.ToDailyMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (i *dailyMaintenanceWindowPtrType) ToDailyMaintenanceWindowPtrOutputWithContext(ctx context.Context) DailyMaintenanceWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DailyMaintenanceWindowPtrOutput)
}

// Time window specified for daily maintenance operations.
type DailyMaintenanceWindowOutput struct{ *pulumi.OutputState }

func (DailyMaintenanceWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DailyMaintenanceWindow)(nil)).Elem()
}

func (o DailyMaintenanceWindowOutput) ToDailyMaintenanceWindowOutput() DailyMaintenanceWindowOutput {
	return o
}

func (o DailyMaintenanceWindowOutput) ToDailyMaintenanceWindowOutputWithContext(ctx context.Context) DailyMaintenanceWindowOutput {
	return o
}

func (o DailyMaintenanceWindowOutput) ToDailyMaintenanceWindowPtrOutput() DailyMaintenanceWindowPtrOutput {
	return o.ToDailyMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (o DailyMaintenanceWindowOutput) ToDailyMaintenanceWindowPtrOutputWithContext(ctx context.Context) DailyMaintenanceWindowPtrOutput {
	return o.ApplyT(func(v DailyMaintenanceWindow) *DailyMaintenanceWindow {
		return &v
	}).(DailyMaintenanceWindowPtrOutput)
}

// [Output only] Duration of the time window, automatically chosen to be smallest possible in the given scenario. Duration will be in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format "PTnHnMnS".
func (o DailyMaintenanceWindowOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DailyMaintenanceWindow) *string { return v.Duration }).(pulumi.StringPtrOutput)
}

// Time within the maintenance window to start the maintenance operations. Time format should be in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format "HH:MM", where HH : [00-23] and MM : [00-59] GMT.
func (o DailyMaintenanceWindowOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DailyMaintenanceWindow) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

type DailyMaintenanceWindowPtrOutput struct{ *pulumi.OutputState }

func (DailyMaintenanceWindowPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DailyMaintenanceWindow)(nil)).Elem()
}

func (o DailyMaintenanceWindowPtrOutput) ToDailyMaintenanceWindowPtrOutput() DailyMaintenanceWindowPtrOutput {
	return o
}

func (o DailyMaintenanceWindowPtrOutput) ToDailyMaintenanceWindowPtrOutputWithContext(ctx context.Context) DailyMaintenanceWindowPtrOutput {
	return o
}

func (o DailyMaintenanceWindowPtrOutput) Elem() DailyMaintenanceWindowOutput {
	return o.ApplyT(func(v *DailyMaintenanceWindow) DailyMaintenanceWindow { return *v }).(DailyMaintenanceWindowOutput)
}

// [Output only] Duration of the time window, automatically chosen to be smallest possible in the given scenario. Duration will be in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format "PTnHnMnS".
func (o DailyMaintenanceWindowPtrOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DailyMaintenanceWindow) *string {
		if v == nil {
			return nil
		}
		return v.Duration
	}).(pulumi.StringPtrOutput)
}

// Time within the maintenance window to start the maintenance operations. Time format should be in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format "HH:MM", where HH : [00-23] and MM : [00-59] GMT.
func (o DailyMaintenanceWindowPtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DailyMaintenanceWindow) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Configuration of etcd encryption.
type DatabaseEncryption struct {
	// Name of CloudKMS key to use for the encryption of secrets in etcd. Ex. projects/my-project/locations/global/keyRings/my-ring/cryptoKeys/my-key
	KeyName *string `pulumi:"keyName"`
	// Denotes the state of etcd encryption.
	State *string `pulumi:"state"`
}

// DatabaseEncryptionInput is an input type that accepts DatabaseEncryptionArgs and DatabaseEncryptionOutput values.
// You can construct a concrete instance of `DatabaseEncryptionInput` via:
//
//          DatabaseEncryptionArgs{...}
type DatabaseEncryptionInput interface {
	pulumi.Input

	ToDatabaseEncryptionOutput() DatabaseEncryptionOutput
	ToDatabaseEncryptionOutputWithContext(context.Context) DatabaseEncryptionOutput
}

// Configuration of etcd encryption.
type DatabaseEncryptionArgs struct {
	// Name of CloudKMS key to use for the encryption of secrets in etcd. Ex. projects/my-project/locations/global/keyRings/my-ring/cryptoKeys/my-key
	KeyName pulumi.StringPtrInput `pulumi:"keyName"`
	// Denotes the state of etcd encryption.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (DatabaseEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseEncryption)(nil)).Elem()
}

func (i DatabaseEncryptionArgs) ToDatabaseEncryptionOutput() DatabaseEncryptionOutput {
	return i.ToDatabaseEncryptionOutputWithContext(context.Background())
}

func (i DatabaseEncryptionArgs) ToDatabaseEncryptionOutputWithContext(ctx context.Context) DatabaseEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseEncryptionOutput)
}

func (i DatabaseEncryptionArgs) ToDatabaseEncryptionPtrOutput() DatabaseEncryptionPtrOutput {
	return i.ToDatabaseEncryptionPtrOutputWithContext(context.Background())
}

func (i DatabaseEncryptionArgs) ToDatabaseEncryptionPtrOutputWithContext(ctx context.Context) DatabaseEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseEncryptionOutput).ToDatabaseEncryptionPtrOutputWithContext(ctx)
}

// DatabaseEncryptionPtrInput is an input type that accepts DatabaseEncryptionArgs, DatabaseEncryptionPtr and DatabaseEncryptionPtrOutput values.
// You can construct a concrete instance of `DatabaseEncryptionPtrInput` via:
//
//          DatabaseEncryptionArgs{...}
//
//  or:
//
//          nil
type DatabaseEncryptionPtrInput interface {
	pulumi.Input

	ToDatabaseEncryptionPtrOutput() DatabaseEncryptionPtrOutput
	ToDatabaseEncryptionPtrOutputWithContext(context.Context) DatabaseEncryptionPtrOutput
}

type databaseEncryptionPtrType DatabaseEncryptionArgs

func DatabaseEncryptionPtr(v *DatabaseEncryptionArgs) DatabaseEncryptionPtrInput {
	return (*databaseEncryptionPtrType)(v)
}

func (*databaseEncryptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseEncryption)(nil)).Elem()
}

func (i *databaseEncryptionPtrType) ToDatabaseEncryptionPtrOutput() DatabaseEncryptionPtrOutput {
	return i.ToDatabaseEncryptionPtrOutputWithContext(context.Background())
}

func (i *databaseEncryptionPtrType) ToDatabaseEncryptionPtrOutputWithContext(ctx context.Context) DatabaseEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseEncryptionPtrOutput)
}

// Configuration of etcd encryption.
type DatabaseEncryptionOutput struct{ *pulumi.OutputState }

func (DatabaseEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseEncryption)(nil)).Elem()
}

func (o DatabaseEncryptionOutput) ToDatabaseEncryptionOutput() DatabaseEncryptionOutput {
	return o
}

func (o DatabaseEncryptionOutput) ToDatabaseEncryptionOutputWithContext(ctx context.Context) DatabaseEncryptionOutput {
	return o
}

func (o DatabaseEncryptionOutput) ToDatabaseEncryptionPtrOutput() DatabaseEncryptionPtrOutput {
	return o.ToDatabaseEncryptionPtrOutputWithContext(context.Background())
}

func (o DatabaseEncryptionOutput) ToDatabaseEncryptionPtrOutputWithContext(ctx context.Context) DatabaseEncryptionPtrOutput {
	return o.ApplyT(func(v DatabaseEncryption) *DatabaseEncryption {
		return &v
	}).(DatabaseEncryptionPtrOutput)
}

// Name of CloudKMS key to use for the encryption of secrets in etcd. Ex. projects/my-project/locations/global/keyRings/my-ring/cryptoKeys/my-key
func (o DatabaseEncryptionOutput) KeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseEncryption) *string { return v.KeyName }).(pulumi.StringPtrOutput)
}

// Denotes the state of etcd encryption.
func (o DatabaseEncryptionOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseEncryption) *string { return v.State }).(pulumi.StringPtrOutput)
}

type DatabaseEncryptionPtrOutput struct{ *pulumi.OutputState }

func (DatabaseEncryptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseEncryption)(nil)).Elem()
}

func (o DatabaseEncryptionPtrOutput) ToDatabaseEncryptionPtrOutput() DatabaseEncryptionPtrOutput {
	return o
}

func (o DatabaseEncryptionPtrOutput) ToDatabaseEncryptionPtrOutputWithContext(ctx context.Context) DatabaseEncryptionPtrOutput {
	return o
}

func (o DatabaseEncryptionPtrOutput) Elem() DatabaseEncryptionOutput {
	return o.ApplyT(func(v *DatabaseEncryption) DatabaseEncryption { return *v }).(DatabaseEncryptionOutput)
}

// Name of CloudKMS key to use for the encryption of secrets in etcd. Ex. projects/my-project/locations/global/keyRings/my-ring/cryptoKeys/my-key
func (o DatabaseEncryptionPtrOutput) KeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseEncryption) *string {
		if v == nil {
			return nil
		}
		return v.KeyName
	}).(pulumi.StringPtrOutput)
}

// Denotes the state of etcd encryption.
func (o DatabaseEncryptionPtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseEncryption) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

// DefaultSnatStatus contains the desired state of whether default sNAT should be disabled on the cluster.
type DefaultSnatStatus struct {
	// Disables cluster default sNAT rules.
	Disabled *bool `pulumi:"disabled"`
}

// DefaultSnatStatusInput is an input type that accepts DefaultSnatStatusArgs and DefaultSnatStatusOutput values.
// You can construct a concrete instance of `DefaultSnatStatusInput` via:
//
//          DefaultSnatStatusArgs{...}
type DefaultSnatStatusInput interface {
	pulumi.Input

	ToDefaultSnatStatusOutput() DefaultSnatStatusOutput
	ToDefaultSnatStatusOutputWithContext(context.Context) DefaultSnatStatusOutput
}

// DefaultSnatStatus contains the desired state of whether default sNAT should be disabled on the cluster.
type DefaultSnatStatusArgs struct {
	// Disables cluster default sNAT rules.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
}

func (DefaultSnatStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DefaultSnatStatus)(nil)).Elem()
}

func (i DefaultSnatStatusArgs) ToDefaultSnatStatusOutput() DefaultSnatStatusOutput {
	return i.ToDefaultSnatStatusOutputWithContext(context.Background())
}

func (i DefaultSnatStatusArgs) ToDefaultSnatStatusOutputWithContext(ctx context.Context) DefaultSnatStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultSnatStatusOutput)
}

func (i DefaultSnatStatusArgs) ToDefaultSnatStatusPtrOutput() DefaultSnatStatusPtrOutput {
	return i.ToDefaultSnatStatusPtrOutputWithContext(context.Background())
}

func (i DefaultSnatStatusArgs) ToDefaultSnatStatusPtrOutputWithContext(ctx context.Context) DefaultSnatStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultSnatStatusOutput).ToDefaultSnatStatusPtrOutputWithContext(ctx)
}

// DefaultSnatStatusPtrInput is an input type that accepts DefaultSnatStatusArgs, DefaultSnatStatusPtr and DefaultSnatStatusPtrOutput values.
// You can construct a concrete instance of `DefaultSnatStatusPtrInput` via:
//
//          DefaultSnatStatusArgs{...}
//
//  or:
//
//          nil
type DefaultSnatStatusPtrInput interface {
	pulumi.Input

	ToDefaultSnatStatusPtrOutput() DefaultSnatStatusPtrOutput
	ToDefaultSnatStatusPtrOutputWithContext(context.Context) DefaultSnatStatusPtrOutput
}

type defaultSnatStatusPtrType DefaultSnatStatusArgs

func DefaultSnatStatusPtr(v *DefaultSnatStatusArgs) DefaultSnatStatusPtrInput {
	return (*defaultSnatStatusPtrType)(v)
}

func (*defaultSnatStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DefaultSnatStatus)(nil)).Elem()
}

func (i *defaultSnatStatusPtrType) ToDefaultSnatStatusPtrOutput() DefaultSnatStatusPtrOutput {
	return i.ToDefaultSnatStatusPtrOutputWithContext(context.Background())
}

func (i *defaultSnatStatusPtrType) ToDefaultSnatStatusPtrOutputWithContext(ctx context.Context) DefaultSnatStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultSnatStatusPtrOutput)
}

// DefaultSnatStatus contains the desired state of whether default sNAT should be disabled on the cluster.
type DefaultSnatStatusOutput struct{ *pulumi.OutputState }

func (DefaultSnatStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DefaultSnatStatus)(nil)).Elem()
}

func (o DefaultSnatStatusOutput) ToDefaultSnatStatusOutput() DefaultSnatStatusOutput {
	return o
}

func (o DefaultSnatStatusOutput) ToDefaultSnatStatusOutputWithContext(ctx context.Context) DefaultSnatStatusOutput {
	return o
}

func (o DefaultSnatStatusOutput) ToDefaultSnatStatusPtrOutput() DefaultSnatStatusPtrOutput {
	return o.ToDefaultSnatStatusPtrOutputWithContext(context.Background())
}

func (o DefaultSnatStatusOutput) ToDefaultSnatStatusPtrOutputWithContext(ctx context.Context) DefaultSnatStatusPtrOutput {
	return o.ApplyT(func(v DefaultSnatStatus) *DefaultSnatStatus {
		return &v
	}).(DefaultSnatStatusPtrOutput)
}

// Disables cluster default sNAT rules.
func (o DefaultSnatStatusOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DefaultSnatStatus) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

type DefaultSnatStatusPtrOutput struct{ *pulumi.OutputState }

func (DefaultSnatStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DefaultSnatStatus)(nil)).Elem()
}

func (o DefaultSnatStatusPtrOutput) ToDefaultSnatStatusPtrOutput() DefaultSnatStatusPtrOutput {
	return o
}

func (o DefaultSnatStatusPtrOutput) ToDefaultSnatStatusPtrOutputWithContext(ctx context.Context) DefaultSnatStatusPtrOutput {
	return o
}

func (o DefaultSnatStatusPtrOutput) Elem() DefaultSnatStatusOutput {
	return o.ApplyT(func(v *DefaultSnatStatus) DefaultSnatStatus { return *v }).(DefaultSnatStatusOutput)
}

// Disables cluster default sNAT rules.
func (o DefaultSnatStatusPtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DefaultSnatStatus) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// Configuration for NodeLocal DNSCache
type DnsCacheConfig struct {
	// Whether NodeLocal DNSCache is enabled for this cluster.
	Enabled *bool `pulumi:"enabled"`
}

// DnsCacheConfigInput is an input type that accepts DnsCacheConfigArgs and DnsCacheConfigOutput values.
// You can construct a concrete instance of `DnsCacheConfigInput` via:
//
//          DnsCacheConfigArgs{...}
type DnsCacheConfigInput interface {
	pulumi.Input

	ToDnsCacheConfigOutput() DnsCacheConfigOutput
	ToDnsCacheConfigOutputWithContext(context.Context) DnsCacheConfigOutput
}

// Configuration for NodeLocal DNSCache
type DnsCacheConfigArgs struct {
	// Whether NodeLocal DNSCache is enabled for this cluster.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (DnsCacheConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsCacheConfig)(nil)).Elem()
}

func (i DnsCacheConfigArgs) ToDnsCacheConfigOutput() DnsCacheConfigOutput {
	return i.ToDnsCacheConfigOutputWithContext(context.Background())
}

func (i DnsCacheConfigArgs) ToDnsCacheConfigOutputWithContext(ctx context.Context) DnsCacheConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsCacheConfigOutput)
}

func (i DnsCacheConfigArgs) ToDnsCacheConfigPtrOutput() DnsCacheConfigPtrOutput {
	return i.ToDnsCacheConfigPtrOutputWithContext(context.Background())
}

func (i DnsCacheConfigArgs) ToDnsCacheConfigPtrOutputWithContext(ctx context.Context) DnsCacheConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsCacheConfigOutput).ToDnsCacheConfigPtrOutputWithContext(ctx)
}

// DnsCacheConfigPtrInput is an input type that accepts DnsCacheConfigArgs, DnsCacheConfigPtr and DnsCacheConfigPtrOutput values.
// You can construct a concrete instance of `DnsCacheConfigPtrInput` via:
//
//          DnsCacheConfigArgs{...}
//
//  or:
//
//          nil
type DnsCacheConfigPtrInput interface {
	pulumi.Input

	ToDnsCacheConfigPtrOutput() DnsCacheConfigPtrOutput
	ToDnsCacheConfigPtrOutputWithContext(context.Context) DnsCacheConfigPtrOutput
}

type dnsCacheConfigPtrType DnsCacheConfigArgs

func DnsCacheConfigPtr(v *DnsCacheConfigArgs) DnsCacheConfigPtrInput {
	return (*dnsCacheConfigPtrType)(v)
}

func (*dnsCacheConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsCacheConfig)(nil)).Elem()
}

func (i *dnsCacheConfigPtrType) ToDnsCacheConfigPtrOutput() DnsCacheConfigPtrOutput {
	return i.ToDnsCacheConfigPtrOutputWithContext(context.Background())
}

func (i *dnsCacheConfigPtrType) ToDnsCacheConfigPtrOutputWithContext(ctx context.Context) DnsCacheConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsCacheConfigPtrOutput)
}

// Configuration for NodeLocal DNSCache
type DnsCacheConfigOutput struct{ *pulumi.OutputState }

func (DnsCacheConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsCacheConfig)(nil)).Elem()
}

func (o DnsCacheConfigOutput) ToDnsCacheConfigOutput() DnsCacheConfigOutput {
	return o
}

func (o DnsCacheConfigOutput) ToDnsCacheConfigOutputWithContext(ctx context.Context) DnsCacheConfigOutput {
	return o
}

func (o DnsCacheConfigOutput) ToDnsCacheConfigPtrOutput() DnsCacheConfigPtrOutput {
	return o.ToDnsCacheConfigPtrOutputWithContext(context.Background())
}

func (o DnsCacheConfigOutput) ToDnsCacheConfigPtrOutputWithContext(ctx context.Context) DnsCacheConfigPtrOutput {
	return o.ApplyT(func(v DnsCacheConfig) *DnsCacheConfig {
		return &v
	}).(DnsCacheConfigPtrOutput)
}

// Whether NodeLocal DNSCache is enabled for this cluster.
func (o DnsCacheConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DnsCacheConfig) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type DnsCacheConfigPtrOutput struct{ *pulumi.OutputState }

func (DnsCacheConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsCacheConfig)(nil)).Elem()
}

func (o DnsCacheConfigPtrOutput) ToDnsCacheConfigPtrOutput() DnsCacheConfigPtrOutput {
	return o
}

func (o DnsCacheConfigPtrOutput) ToDnsCacheConfigPtrOutputWithContext(ctx context.Context) DnsCacheConfigPtrOutput {
	return o
}

func (o DnsCacheConfigPtrOutput) Elem() DnsCacheConfigOutput {
	return o.ApplyT(func(v *DnsCacheConfig) DnsCacheConfig { return *v }).(DnsCacheConfigOutput)
}

// Whether NodeLocal DNSCache is enabled for this cluster.
func (o DnsCacheConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DnsCacheConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Configuration for the Compute Engine PD CSI driver.
type GcePersistentDiskCsiDriverConfig struct {
	// Whether the Compute Engine PD CSI driver is enabled for this cluster.
	Enabled *bool `pulumi:"enabled"`
}

// GcePersistentDiskCsiDriverConfigInput is an input type that accepts GcePersistentDiskCsiDriverConfigArgs and GcePersistentDiskCsiDriverConfigOutput values.
// You can construct a concrete instance of `GcePersistentDiskCsiDriverConfigInput` via:
//
//          GcePersistentDiskCsiDriverConfigArgs{...}
type GcePersistentDiskCsiDriverConfigInput interface {
	pulumi.Input

	ToGcePersistentDiskCsiDriverConfigOutput() GcePersistentDiskCsiDriverConfigOutput
	ToGcePersistentDiskCsiDriverConfigOutputWithContext(context.Context) GcePersistentDiskCsiDriverConfigOutput
}

// Configuration for the Compute Engine PD CSI driver.
type GcePersistentDiskCsiDriverConfigArgs struct {
	// Whether the Compute Engine PD CSI driver is enabled for this cluster.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (GcePersistentDiskCsiDriverConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GcePersistentDiskCsiDriverConfig)(nil)).Elem()
}

func (i GcePersistentDiskCsiDriverConfigArgs) ToGcePersistentDiskCsiDriverConfigOutput() GcePersistentDiskCsiDriverConfigOutput {
	return i.ToGcePersistentDiskCsiDriverConfigOutputWithContext(context.Background())
}

func (i GcePersistentDiskCsiDriverConfigArgs) ToGcePersistentDiskCsiDriverConfigOutputWithContext(ctx context.Context) GcePersistentDiskCsiDriverConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcePersistentDiskCsiDriverConfigOutput)
}

func (i GcePersistentDiskCsiDriverConfigArgs) ToGcePersistentDiskCsiDriverConfigPtrOutput() GcePersistentDiskCsiDriverConfigPtrOutput {
	return i.ToGcePersistentDiskCsiDriverConfigPtrOutputWithContext(context.Background())
}

func (i GcePersistentDiskCsiDriverConfigArgs) ToGcePersistentDiskCsiDriverConfigPtrOutputWithContext(ctx context.Context) GcePersistentDiskCsiDriverConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcePersistentDiskCsiDriverConfigOutput).ToGcePersistentDiskCsiDriverConfigPtrOutputWithContext(ctx)
}

// GcePersistentDiskCsiDriverConfigPtrInput is an input type that accepts GcePersistentDiskCsiDriverConfigArgs, GcePersistentDiskCsiDriverConfigPtr and GcePersistentDiskCsiDriverConfigPtrOutput values.
// You can construct a concrete instance of `GcePersistentDiskCsiDriverConfigPtrInput` via:
//
//          GcePersistentDiskCsiDriverConfigArgs{...}
//
//  or:
//
//          nil
type GcePersistentDiskCsiDriverConfigPtrInput interface {
	pulumi.Input

	ToGcePersistentDiskCsiDriverConfigPtrOutput() GcePersistentDiskCsiDriverConfigPtrOutput
	ToGcePersistentDiskCsiDriverConfigPtrOutputWithContext(context.Context) GcePersistentDiskCsiDriverConfigPtrOutput
}

type gcePersistentDiskCsiDriverConfigPtrType GcePersistentDiskCsiDriverConfigArgs

func GcePersistentDiskCsiDriverConfigPtr(v *GcePersistentDiskCsiDriverConfigArgs) GcePersistentDiskCsiDriverConfigPtrInput {
	return (*gcePersistentDiskCsiDriverConfigPtrType)(v)
}

func (*gcePersistentDiskCsiDriverConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GcePersistentDiskCsiDriverConfig)(nil)).Elem()
}

func (i *gcePersistentDiskCsiDriverConfigPtrType) ToGcePersistentDiskCsiDriverConfigPtrOutput() GcePersistentDiskCsiDriverConfigPtrOutput {
	return i.ToGcePersistentDiskCsiDriverConfigPtrOutputWithContext(context.Background())
}

func (i *gcePersistentDiskCsiDriverConfigPtrType) ToGcePersistentDiskCsiDriverConfigPtrOutputWithContext(ctx context.Context) GcePersistentDiskCsiDriverConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcePersistentDiskCsiDriverConfigPtrOutput)
}

// Configuration for the Compute Engine PD CSI driver.
type GcePersistentDiskCsiDriverConfigOutput struct{ *pulumi.OutputState }

func (GcePersistentDiskCsiDriverConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GcePersistentDiskCsiDriverConfig)(nil)).Elem()
}

func (o GcePersistentDiskCsiDriverConfigOutput) ToGcePersistentDiskCsiDriverConfigOutput() GcePersistentDiskCsiDriverConfigOutput {
	return o
}

func (o GcePersistentDiskCsiDriverConfigOutput) ToGcePersistentDiskCsiDriverConfigOutputWithContext(ctx context.Context) GcePersistentDiskCsiDriverConfigOutput {
	return o
}

func (o GcePersistentDiskCsiDriverConfigOutput) ToGcePersistentDiskCsiDriverConfigPtrOutput() GcePersistentDiskCsiDriverConfigPtrOutput {
	return o.ToGcePersistentDiskCsiDriverConfigPtrOutputWithContext(context.Background())
}

func (o GcePersistentDiskCsiDriverConfigOutput) ToGcePersistentDiskCsiDriverConfigPtrOutputWithContext(ctx context.Context) GcePersistentDiskCsiDriverConfigPtrOutput {
	return o.ApplyT(func(v GcePersistentDiskCsiDriverConfig) *GcePersistentDiskCsiDriverConfig {
		return &v
	}).(GcePersistentDiskCsiDriverConfigPtrOutput)
}

// Whether the Compute Engine PD CSI driver is enabled for this cluster.
func (o GcePersistentDiskCsiDriverConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GcePersistentDiskCsiDriverConfig) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type GcePersistentDiskCsiDriverConfigPtrOutput struct{ *pulumi.OutputState }

func (GcePersistentDiskCsiDriverConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GcePersistentDiskCsiDriverConfig)(nil)).Elem()
}

func (o GcePersistentDiskCsiDriverConfigPtrOutput) ToGcePersistentDiskCsiDriverConfigPtrOutput() GcePersistentDiskCsiDriverConfigPtrOutput {
	return o
}

func (o GcePersistentDiskCsiDriverConfigPtrOutput) ToGcePersistentDiskCsiDriverConfigPtrOutputWithContext(ctx context.Context) GcePersistentDiskCsiDriverConfigPtrOutput {
	return o
}

func (o GcePersistentDiskCsiDriverConfigPtrOutput) Elem() GcePersistentDiskCsiDriverConfigOutput {
	return o.ApplyT(func(v *GcePersistentDiskCsiDriverConfig) GcePersistentDiskCsiDriverConfig { return *v }).(GcePersistentDiskCsiDriverConfigOutput)
}

// Whether the Compute Engine PD CSI driver is enabled for this cluster.
func (o GcePersistentDiskCsiDriverConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GcePersistentDiskCsiDriverConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Configuration options for the horizontal pod autoscaling feature, which increases or decreases the number of replica pods a replication controller has based on the resource usage of the existing pods.
type HorizontalPodAutoscaling struct {
	// Whether the Horizontal Pod Autoscaling feature is enabled in the cluster. When enabled, it ensures that metrics are collected into Stackdriver Monitoring.
	Disabled *bool `pulumi:"disabled"`
}

// HorizontalPodAutoscalingInput is an input type that accepts HorizontalPodAutoscalingArgs and HorizontalPodAutoscalingOutput values.
// You can construct a concrete instance of `HorizontalPodAutoscalingInput` via:
//
//          HorizontalPodAutoscalingArgs{...}
type HorizontalPodAutoscalingInput interface {
	pulumi.Input

	ToHorizontalPodAutoscalingOutput() HorizontalPodAutoscalingOutput
	ToHorizontalPodAutoscalingOutputWithContext(context.Context) HorizontalPodAutoscalingOutput
}

// Configuration options for the horizontal pod autoscaling feature, which increases or decreases the number of replica pods a replication controller has based on the resource usage of the existing pods.
type HorizontalPodAutoscalingArgs struct {
	// Whether the Horizontal Pod Autoscaling feature is enabled in the cluster. When enabled, it ensures that metrics are collected into Stackdriver Monitoring.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
}

func (HorizontalPodAutoscalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HorizontalPodAutoscaling)(nil)).Elem()
}

func (i HorizontalPodAutoscalingArgs) ToHorizontalPodAutoscalingOutput() HorizontalPodAutoscalingOutput {
	return i.ToHorizontalPodAutoscalingOutputWithContext(context.Background())
}

func (i HorizontalPodAutoscalingArgs) ToHorizontalPodAutoscalingOutputWithContext(ctx context.Context) HorizontalPodAutoscalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorizontalPodAutoscalingOutput)
}

func (i HorizontalPodAutoscalingArgs) ToHorizontalPodAutoscalingPtrOutput() HorizontalPodAutoscalingPtrOutput {
	return i.ToHorizontalPodAutoscalingPtrOutputWithContext(context.Background())
}

func (i HorizontalPodAutoscalingArgs) ToHorizontalPodAutoscalingPtrOutputWithContext(ctx context.Context) HorizontalPodAutoscalingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorizontalPodAutoscalingOutput).ToHorizontalPodAutoscalingPtrOutputWithContext(ctx)
}

// HorizontalPodAutoscalingPtrInput is an input type that accepts HorizontalPodAutoscalingArgs, HorizontalPodAutoscalingPtr and HorizontalPodAutoscalingPtrOutput values.
// You can construct a concrete instance of `HorizontalPodAutoscalingPtrInput` via:
//
//          HorizontalPodAutoscalingArgs{...}
//
//  or:
//
//          nil
type HorizontalPodAutoscalingPtrInput interface {
	pulumi.Input

	ToHorizontalPodAutoscalingPtrOutput() HorizontalPodAutoscalingPtrOutput
	ToHorizontalPodAutoscalingPtrOutputWithContext(context.Context) HorizontalPodAutoscalingPtrOutput
}

type horizontalPodAutoscalingPtrType HorizontalPodAutoscalingArgs

func HorizontalPodAutoscalingPtr(v *HorizontalPodAutoscalingArgs) HorizontalPodAutoscalingPtrInput {
	return (*horizontalPodAutoscalingPtrType)(v)
}

func (*horizontalPodAutoscalingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HorizontalPodAutoscaling)(nil)).Elem()
}

func (i *horizontalPodAutoscalingPtrType) ToHorizontalPodAutoscalingPtrOutput() HorizontalPodAutoscalingPtrOutput {
	return i.ToHorizontalPodAutoscalingPtrOutputWithContext(context.Background())
}

func (i *horizontalPodAutoscalingPtrType) ToHorizontalPodAutoscalingPtrOutputWithContext(ctx context.Context) HorizontalPodAutoscalingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorizontalPodAutoscalingPtrOutput)
}

// Configuration options for the horizontal pod autoscaling feature, which increases or decreases the number of replica pods a replication controller has based on the resource usage of the existing pods.
type HorizontalPodAutoscalingOutput struct{ *pulumi.OutputState }

func (HorizontalPodAutoscalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HorizontalPodAutoscaling)(nil)).Elem()
}

func (o HorizontalPodAutoscalingOutput) ToHorizontalPodAutoscalingOutput() HorizontalPodAutoscalingOutput {
	return o
}

func (o HorizontalPodAutoscalingOutput) ToHorizontalPodAutoscalingOutputWithContext(ctx context.Context) HorizontalPodAutoscalingOutput {
	return o
}

func (o HorizontalPodAutoscalingOutput) ToHorizontalPodAutoscalingPtrOutput() HorizontalPodAutoscalingPtrOutput {
	return o.ToHorizontalPodAutoscalingPtrOutputWithContext(context.Background())
}

func (o HorizontalPodAutoscalingOutput) ToHorizontalPodAutoscalingPtrOutputWithContext(ctx context.Context) HorizontalPodAutoscalingPtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscaling) *HorizontalPodAutoscaling {
		return &v
	}).(HorizontalPodAutoscalingPtrOutput)
}

// Whether the Horizontal Pod Autoscaling feature is enabled in the cluster. When enabled, it ensures that metrics are collected into Stackdriver Monitoring.
func (o HorizontalPodAutoscalingOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscaling) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

type HorizontalPodAutoscalingPtrOutput struct{ *pulumi.OutputState }

func (HorizontalPodAutoscalingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HorizontalPodAutoscaling)(nil)).Elem()
}

func (o HorizontalPodAutoscalingPtrOutput) ToHorizontalPodAutoscalingPtrOutput() HorizontalPodAutoscalingPtrOutput {
	return o
}

func (o HorizontalPodAutoscalingPtrOutput) ToHorizontalPodAutoscalingPtrOutputWithContext(ctx context.Context) HorizontalPodAutoscalingPtrOutput {
	return o
}

func (o HorizontalPodAutoscalingPtrOutput) Elem() HorizontalPodAutoscalingOutput {
	return o.ApplyT(func(v *HorizontalPodAutoscaling) HorizontalPodAutoscaling { return *v }).(HorizontalPodAutoscalingOutput)
}

// Whether the Horizontal Pod Autoscaling feature is enabled in the cluster. When enabled, it ensures that metrics are collected into Stackdriver Monitoring.
func (o HorizontalPodAutoscalingPtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HorizontalPodAutoscaling) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// Configuration options for the HTTP (L7) load balancing controller addon, which makes it easy to set up HTTP load balancers for services in a cluster.
type HttpLoadBalancing struct {
	// Whether the HTTP Load Balancing controller is enabled in the cluster. When enabled, it runs a small pod in the cluster that manages the load balancers.
	Disabled *bool `pulumi:"disabled"`
}

// HttpLoadBalancingInput is an input type that accepts HttpLoadBalancingArgs and HttpLoadBalancingOutput values.
// You can construct a concrete instance of `HttpLoadBalancingInput` via:
//
//          HttpLoadBalancingArgs{...}
type HttpLoadBalancingInput interface {
	pulumi.Input

	ToHttpLoadBalancingOutput() HttpLoadBalancingOutput
	ToHttpLoadBalancingOutputWithContext(context.Context) HttpLoadBalancingOutput
}

// Configuration options for the HTTP (L7) load balancing controller addon, which makes it easy to set up HTTP load balancers for services in a cluster.
type HttpLoadBalancingArgs struct {
	// Whether the HTTP Load Balancing controller is enabled in the cluster. When enabled, it runs a small pod in the cluster that manages the load balancers.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
}

func (HttpLoadBalancingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpLoadBalancing)(nil)).Elem()
}

func (i HttpLoadBalancingArgs) ToHttpLoadBalancingOutput() HttpLoadBalancingOutput {
	return i.ToHttpLoadBalancingOutputWithContext(context.Background())
}

func (i HttpLoadBalancingArgs) ToHttpLoadBalancingOutputWithContext(ctx context.Context) HttpLoadBalancingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpLoadBalancingOutput)
}

func (i HttpLoadBalancingArgs) ToHttpLoadBalancingPtrOutput() HttpLoadBalancingPtrOutput {
	return i.ToHttpLoadBalancingPtrOutputWithContext(context.Background())
}

func (i HttpLoadBalancingArgs) ToHttpLoadBalancingPtrOutputWithContext(ctx context.Context) HttpLoadBalancingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpLoadBalancingOutput).ToHttpLoadBalancingPtrOutputWithContext(ctx)
}

// HttpLoadBalancingPtrInput is an input type that accepts HttpLoadBalancingArgs, HttpLoadBalancingPtr and HttpLoadBalancingPtrOutput values.
// You can construct a concrete instance of `HttpLoadBalancingPtrInput` via:
//
//          HttpLoadBalancingArgs{...}
//
//  or:
//
//          nil
type HttpLoadBalancingPtrInput interface {
	pulumi.Input

	ToHttpLoadBalancingPtrOutput() HttpLoadBalancingPtrOutput
	ToHttpLoadBalancingPtrOutputWithContext(context.Context) HttpLoadBalancingPtrOutput
}

type httpLoadBalancingPtrType HttpLoadBalancingArgs

func HttpLoadBalancingPtr(v *HttpLoadBalancingArgs) HttpLoadBalancingPtrInput {
	return (*httpLoadBalancingPtrType)(v)
}

func (*httpLoadBalancingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpLoadBalancing)(nil)).Elem()
}

func (i *httpLoadBalancingPtrType) ToHttpLoadBalancingPtrOutput() HttpLoadBalancingPtrOutput {
	return i.ToHttpLoadBalancingPtrOutputWithContext(context.Background())
}

func (i *httpLoadBalancingPtrType) ToHttpLoadBalancingPtrOutputWithContext(ctx context.Context) HttpLoadBalancingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpLoadBalancingPtrOutput)
}

// Configuration options for the HTTP (L7) load balancing controller addon, which makes it easy to set up HTTP load balancers for services in a cluster.
type HttpLoadBalancingOutput struct{ *pulumi.OutputState }

func (HttpLoadBalancingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpLoadBalancing)(nil)).Elem()
}

func (o HttpLoadBalancingOutput) ToHttpLoadBalancingOutput() HttpLoadBalancingOutput {
	return o
}

func (o HttpLoadBalancingOutput) ToHttpLoadBalancingOutputWithContext(ctx context.Context) HttpLoadBalancingOutput {
	return o
}

func (o HttpLoadBalancingOutput) ToHttpLoadBalancingPtrOutput() HttpLoadBalancingPtrOutput {
	return o.ToHttpLoadBalancingPtrOutputWithContext(context.Background())
}

func (o HttpLoadBalancingOutput) ToHttpLoadBalancingPtrOutputWithContext(ctx context.Context) HttpLoadBalancingPtrOutput {
	return o.ApplyT(func(v HttpLoadBalancing) *HttpLoadBalancing {
		return &v
	}).(HttpLoadBalancingPtrOutput)
}

// Whether the HTTP Load Balancing controller is enabled in the cluster. When enabled, it runs a small pod in the cluster that manages the load balancers.
func (o HttpLoadBalancingOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HttpLoadBalancing) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

type HttpLoadBalancingPtrOutput struct{ *pulumi.OutputState }

func (HttpLoadBalancingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpLoadBalancing)(nil)).Elem()
}

func (o HttpLoadBalancingPtrOutput) ToHttpLoadBalancingPtrOutput() HttpLoadBalancingPtrOutput {
	return o
}

func (o HttpLoadBalancingPtrOutput) ToHttpLoadBalancingPtrOutputWithContext(ctx context.Context) HttpLoadBalancingPtrOutput {
	return o
}

func (o HttpLoadBalancingPtrOutput) Elem() HttpLoadBalancingOutput {
	return o.ApplyT(func(v *HttpLoadBalancing) HttpLoadBalancing { return *v }).(HttpLoadBalancingOutput)
}

// Whether the HTTP Load Balancing controller is enabled in the cluster. When enabled, it runs a small pod in the cluster that manages the load balancers.
func (o HttpLoadBalancingPtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HttpLoadBalancing) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// Configuration for controlling how IPs are allocated in the cluster.
type IPAllocationPolicy struct {
	// This field is deprecated, use cluster_ipv4_cidr_block.
	ClusterIpv4Cidr *string `pulumi:"clusterIpv4Cidr"`
	// The IP address range for the cluster pod IPs. If this field is set, then `cluster.cluster_ipv4_cidr` must be left blank. This field is only applicable when `use_ip_aliases` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
	ClusterIpv4CidrBlock *string `pulumi:"clusterIpv4CidrBlock"`
	// The name of the secondary range to be used for the cluster CIDR block. The secondary range will be used for pod IP addresses. This must be an existing secondary range associated with the cluster subnetwork. This field is only applicable with use_ip_aliases is true and create_subnetwork is false.
	ClusterSecondaryRangeName *string `pulumi:"clusterSecondaryRangeName"`
	// Whether a new subnetwork will be created automatically for the cluster. This field is only applicable when `use_ip_aliases` is true.
	CreateSubnetwork *bool `pulumi:"createSubnetwork"`
	// This field is deprecated, use node_ipv4_cidr_block.
	NodeIpv4Cidr *string `pulumi:"nodeIpv4Cidr"`
	// The IP address range of the instance IPs in this cluster. This is applicable only if `create_subnetwork` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
	NodeIpv4CidrBlock *string `pulumi:"nodeIpv4CidrBlock"`
	// This field is deprecated, use services_ipv4_cidr_block.
	ServicesIpv4Cidr *string `pulumi:"servicesIpv4Cidr"`
	// The IP address range of the services IPs in this cluster. If blank, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
	ServicesIpv4CidrBlock *string `pulumi:"servicesIpv4CidrBlock"`
	// The name of the secondary range to be used as for the services CIDR block. The secondary range will be used for service ClusterIPs. This must be an existing secondary range associated with the cluster subnetwork. This field is only applicable with use_ip_aliases is true and create_subnetwork is false.
	ServicesSecondaryRangeName *string `pulumi:"servicesSecondaryRangeName"`
	// A custom subnetwork name to be used if `create_subnetwork` is true. If this field is empty, then an automatic name will be chosen for the new subnetwork.
	SubnetworkName *string `pulumi:"subnetworkName"`
	// The IP address range of the Cloud TPUs in this cluster. If unspecified, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. If unspecified, the range will use the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
	TpuIpv4CidrBlock *string `pulumi:"tpuIpv4CidrBlock"`
	// Whether alias IPs will be used for pod IPs in the cluster. This is used in conjunction with use_routes. It cannot be true if use_routes is true. If both use_ip_aliases and use_routes are false, then the server picks the default IP allocation mode
	UseIpAliases *bool `pulumi:"useIpAliases"`
	// Whether routes will be used for pod IPs in the cluster. This is used in conjunction with use_ip_aliases. It cannot be true if use_ip_aliases is true. If both use_ip_aliases and use_routes are false, then the server picks the default IP allocation mode
	UseRoutes *bool `pulumi:"useRoutes"`
}

// IPAllocationPolicyInput is an input type that accepts IPAllocationPolicyArgs and IPAllocationPolicyOutput values.
// You can construct a concrete instance of `IPAllocationPolicyInput` via:
//
//          IPAllocationPolicyArgs{...}
type IPAllocationPolicyInput interface {
	pulumi.Input

	ToIPAllocationPolicyOutput() IPAllocationPolicyOutput
	ToIPAllocationPolicyOutputWithContext(context.Context) IPAllocationPolicyOutput
}

// Configuration for controlling how IPs are allocated in the cluster.
type IPAllocationPolicyArgs struct {
	// This field is deprecated, use cluster_ipv4_cidr_block.
	ClusterIpv4Cidr pulumi.StringPtrInput `pulumi:"clusterIpv4Cidr"`
	// The IP address range for the cluster pod IPs. If this field is set, then `cluster.cluster_ipv4_cidr` must be left blank. This field is only applicable when `use_ip_aliases` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
	ClusterIpv4CidrBlock pulumi.StringPtrInput `pulumi:"clusterIpv4CidrBlock"`
	// The name of the secondary range to be used for the cluster CIDR block. The secondary range will be used for pod IP addresses. This must be an existing secondary range associated with the cluster subnetwork. This field is only applicable with use_ip_aliases is true and create_subnetwork is false.
	ClusterSecondaryRangeName pulumi.StringPtrInput `pulumi:"clusterSecondaryRangeName"`
	// Whether a new subnetwork will be created automatically for the cluster. This field is only applicable when `use_ip_aliases` is true.
	CreateSubnetwork pulumi.BoolPtrInput `pulumi:"createSubnetwork"`
	// This field is deprecated, use node_ipv4_cidr_block.
	NodeIpv4Cidr pulumi.StringPtrInput `pulumi:"nodeIpv4Cidr"`
	// The IP address range of the instance IPs in this cluster. This is applicable only if `create_subnetwork` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
	NodeIpv4CidrBlock pulumi.StringPtrInput `pulumi:"nodeIpv4CidrBlock"`
	// This field is deprecated, use services_ipv4_cidr_block.
	ServicesIpv4Cidr pulumi.StringPtrInput `pulumi:"servicesIpv4Cidr"`
	// The IP address range of the services IPs in this cluster. If blank, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
	ServicesIpv4CidrBlock pulumi.StringPtrInput `pulumi:"servicesIpv4CidrBlock"`
	// The name of the secondary range to be used as for the services CIDR block. The secondary range will be used for service ClusterIPs. This must be an existing secondary range associated with the cluster subnetwork. This field is only applicable with use_ip_aliases is true and create_subnetwork is false.
	ServicesSecondaryRangeName pulumi.StringPtrInput `pulumi:"servicesSecondaryRangeName"`
	// A custom subnetwork name to be used if `create_subnetwork` is true. If this field is empty, then an automatic name will be chosen for the new subnetwork.
	SubnetworkName pulumi.StringPtrInput `pulumi:"subnetworkName"`
	// The IP address range of the Cloud TPUs in this cluster. If unspecified, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. If unspecified, the range will use the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
	TpuIpv4CidrBlock pulumi.StringPtrInput `pulumi:"tpuIpv4CidrBlock"`
	// Whether alias IPs will be used for pod IPs in the cluster. This is used in conjunction with use_routes. It cannot be true if use_routes is true. If both use_ip_aliases and use_routes are false, then the server picks the default IP allocation mode
	UseIpAliases pulumi.BoolPtrInput `pulumi:"useIpAliases"`
	// Whether routes will be used for pod IPs in the cluster. This is used in conjunction with use_ip_aliases. It cannot be true if use_ip_aliases is true. If both use_ip_aliases and use_routes are false, then the server picks the default IP allocation mode
	UseRoutes pulumi.BoolPtrInput `pulumi:"useRoutes"`
}

func (IPAllocationPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IPAllocationPolicy)(nil)).Elem()
}

func (i IPAllocationPolicyArgs) ToIPAllocationPolicyOutput() IPAllocationPolicyOutput {
	return i.ToIPAllocationPolicyOutputWithContext(context.Background())
}

func (i IPAllocationPolicyArgs) ToIPAllocationPolicyOutputWithContext(ctx context.Context) IPAllocationPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPAllocationPolicyOutput)
}

func (i IPAllocationPolicyArgs) ToIPAllocationPolicyPtrOutput() IPAllocationPolicyPtrOutput {
	return i.ToIPAllocationPolicyPtrOutputWithContext(context.Background())
}

func (i IPAllocationPolicyArgs) ToIPAllocationPolicyPtrOutputWithContext(ctx context.Context) IPAllocationPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPAllocationPolicyOutput).ToIPAllocationPolicyPtrOutputWithContext(ctx)
}

// IPAllocationPolicyPtrInput is an input type that accepts IPAllocationPolicyArgs, IPAllocationPolicyPtr and IPAllocationPolicyPtrOutput values.
// You can construct a concrete instance of `IPAllocationPolicyPtrInput` via:
//
//          IPAllocationPolicyArgs{...}
//
//  or:
//
//          nil
type IPAllocationPolicyPtrInput interface {
	pulumi.Input

	ToIPAllocationPolicyPtrOutput() IPAllocationPolicyPtrOutput
	ToIPAllocationPolicyPtrOutputWithContext(context.Context) IPAllocationPolicyPtrOutput
}

type ipallocationPolicyPtrType IPAllocationPolicyArgs

func IPAllocationPolicyPtr(v *IPAllocationPolicyArgs) IPAllocationPolicyPtrInput {
	return (*ipallocationPolicyPtrType)(v)
}

func (*ipallocationPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IPAllocationPolicy)(nil)).Elem()
}

func (i *ipallocationPolicyPtrType) ToIPAllocationPolicyPtrOutput() IPAllocationPolicyPtrOutput {
	return i.ToIPAllocationPolicyPtrOutputWithContext(context.Background())
}

func (i *ipallocationPolicyPtrType) ToIPAllocationPolicyPtrOutputWithContext(ctx context.Context) IPAllocationPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPAllocationPolicyPtrOutput)
}

// Configuration for controlling how IPs are allocated in the cluster.
type IPAllocationPolicyOutput struct{ *pulumi.OutputState }

func (IPAllocationPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IPAllocationPolicy)(nil)).Elem()
}

func (o IPAllocationPolicyOutput) ToIPAllocationPolicyOutput() IPAllocationPolicyOutput {
	return o
}

func (o IPAllocationPolicyOutput) ToIPAllocationPolicyOutputWithContext(ctx context.Context) IPAllocationPolicyOutput {
	return o
}

func (o IPAllocationPolicyOutput) ToIPAllocationPolicyPtrOutput() IPAllocationPolicyPtrOutput {
	return o.ToIPAllocationPolicyPtrOutputWithContext(context.Background())
}

func (o IPAllocationPolicyOutput) ToIPAllocationPolicyPtrOutputWithContext(ctx context.Context) IPAllocationPolicyPtrOutput {
	return o.ApplyT(func(v IPAllocationPolicy) *IPAllocationPolicy {
		return &v
	}).(IPAllocationPolicyPtrOutput)
}

// This field is deprecated, use cluster_ipv4_cidr_block.
func (o IPAllocationPolicyOutput) ClusterIpv4Cidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPAllocationPolicy) *string { return v.ClusterIpv4Cidr }).(pulumi.StringPtrOutput)
}

// The IP address range for the cluster pod IPs. If this field is set, then `cluster.cluster_ipv4_cidr` must be left blank. This field is only applicable when `use_ip_aliases` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
func (o IPAllocationPolicyOutput) ClusterIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPAllocationPolicy) *string { return v.ClusterIpv4CidrBlock }).(pulumi.StringPtrOutput)
}

// The name of the secondary range to be used for the cluster CIDR block. The secondary range will be used for pod IP addresses. This must be an existing secondary range associated with the cluster subnetwork. This field is only applicable with use_ip_aliases is true and create_subnetwork is false.
func (o IPAllocationPolicyOutput) ClusterSecondaryRangeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPAllocationPolicy) *string { return v.ClusterSecondaryRangeName }).(pulumi.StringPtrOutput)
}

// Whether a new subnetwork will be created automatically for the cluster. This field is only applicable when `use_ip_aliases` is true.
func (o IPAllocationPolicyOutput) CreateSubnetwork() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v IPAllocationPolicy) *bool { return v.CreateSubnetwork }).(pulumi.BoolPtrOutput)
}

// This field is deprecated, use node_ipv4_cidr_block.
func (o IPAllocationPolicyOutput) NodeIpv4Cidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPAllocationPolicy) *string { return v.NodeIpv4Cidr }).(pulumi.StringPtrOutput)
}

// The IP address range of the instance IPs in this cluster. This is applicable only if `create_subnetwork` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
func (o IPAllocationPolicyOutput) NodeIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPAllocationPolicy) *string { return v.NodeIpv4CidrBlock }).(pulumi.StringPtrOutput)
}

// This field is deprecated, use services_ipv4_cidr_block.
func (o IPAllocationPolicyOutput) ServicesIpv4Cidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPAllocationPolicy) *string { return v.ServicesIpv4Cidr }).(pulumi.StringPtrOutput)
}

// The IP address range of the services IPs in this cluster. If blank, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
func (o IPAllocationPolicyOutput) ServicesIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPAllocationPolicy) *string { return v.ServicesIpv4CidrBlock }).(pulumi.StringPtrOutput)
}

// The name of the secondary range to be used as for the services CIDR block. The secondary range will be used for service ClusterIPs. This must be an existing secondary range associated with the cluster subnetwork. This field is only applicable with use_ip_aliases is true and create_subnetwork is false.
func (o IPAllocationPolicyOutput) ServicesSecondaryRangeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPAllocationPolicy) *string { return v.ServicesSecondaryRangeName }).(pulumi.StringPtrOutput)
}

// A custom subnetwork name to be used if `create_subnetwork` is true. If this field is empty, then an automatic name will be chosen for the new subnetwork.
func (o IPAllocationPolicyOutput) SubnetworkName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPAllocationPolicy) *string { return v.SubnetworkName }).(pulumi.StringPtrOutput)
}

// The IP address range of the Cloud TPUs in this cluster. If unspecified, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. If unspecified, the range will use the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
func (o IPAllocationPolicyOutput) TpuIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPAllocationPolicy) *string { return v.TpuIpv4CidrBlock }).(pulumi.StringPtrOutput)
}

// Whether alias IPs will be used for pod IPs in the cluster. This is used in conjunction with use_routes. It cannot be true if use_routes is true. If both use_ip_aliases and use_routes are false, then the server picks the default IP allocation mode
func (o IPAllocationPolicyOutput) UseIpAliases() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v IPAllocationPolicy) *bool { return v.UseIpAliases }).(pulumi.BoolPtrOutput)
}

// Whether routes will be used for pod IPs in the cluster. This is used in conjunction with use_ip_aliases. It cannot be true if use_ip_aliases is true. If both use_ip_aliases and use_routes are false, then the server picks the default IP allocation mode
func (o IPAllocationPolicyOutput) UseRoutes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v IPAllocationPolicy) *bool { return v.UseRoutes }).(pulumi.BoolPtrOutput)
}

type IPAllocationPolicyPtrOutput struct{ *pulumi.OutputState }

func (IPAllocationPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IPAllocationPolicy)(nil)).Elem()
}

func (o IPAllocationPolicyPtrOutput) ToIPAllocationPolicyPtrOutput() IPAllocationPolicyPtrOutput {
	return o
}

func (o IPAllocationPolicyPtrOutput) ToIPAllocationPolicyPtrOutputWithContext(ctx context.Context) IPAllocationPolicyPtrOutput {
	return o
}

func (o IPAllocationPolicyPtrOutput) Elem() IPAllocationPolicyOutput {
	return o.ApplyT(func(v *IPAllocationPolicy) IPAllocationPolicy { return *v }).(IPAllocationPolicyOutput)
}

// This field is deprecated, use cluster_ipv4_cidr_block.
func (o IPAllocationPolicyPtrOutput) ClusterIpv4Cidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IPAllocationPolicy) *string {
		if v == nil {
			return nil
		}
		return v.ClusterIpv4Cidr
	}).(pulumi.StringPtrOutput)
}

// The IP address range for the cluster pod IPs. If this field is set, then `cluster.cluster_ipv4_cidr` must be left blank. This field is only applicable when `use_ip_aliases` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
func (o IPAllocationPolicyPtrOutput) ClusterIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IPAllocationPolicy) *string {
		if v == nil {
			return nil
		}
		return v.ClusterIpv4CidrBlock
	}).(pulumi.StringPtrOutput)
}

// The name of the secondary range to be used for the cluster CIDR block. The secondary range will be used for pod IP addresses. This must be an existing secondary range associated with the cluster subnetwork. This field is only applicable with use_ip_aliases is true and create_subnetwork is false.
func (o IPAllocationPolicyPtrOutput) ClusterSecondaryRangeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IPAllocationPolicy) *string {
		if v == nil {
			return nil
		}
		return v.ClusterSecondaryRangeName
	}).(pulumi.StringPtrOutput)
}

// Whether a new subnetwork will be created automatically for the cluster. This field is only applicable when `use_ip_aliases` is true.
func (o IPAllocationPolicyPtrOutput) CreateSubnetwork() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IPAllocationPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.CreateSubnetwork
	}).(pulumi.BoolPtrOutput)
}

// This field is deprecated, use node_ipv4_cidr_block.
func (o IPAllocationPolicyPtrOutput) NodeIpv4Cidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IPAllocationPolicy) *string {
		if v == nil {
			return nil
		}
		return v.NodeIpv4Cidr
	}).(pulumi.StringPtrOutput)
}

// The IP address range of the instance IPs in this cluster. This is applicable only if `create_subnetwork` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
func (o IPAllocationPolicyPtrOutput) NodeIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IPAllocationPolicy) *string {
		if v == nil {
			return nil
		}
		return v.NodeIpv4CidrBlock
	}).(pulumi.StringPtrOutput)
}

// This field is deprecated, use services_ipv4_cidr_block.
func (o IPAllocationPolicyPtrOutput) ServicesIpv4Cidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IPAllocationPolicy) *string {
		if v == nil {
			return nil
		}
		return v.ServicesIpv4Cidr
	}).(pulumi.StringPtrOutput)
}

// The IP address range of the services IPs in this cluster. If blank, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
func (o IPAllocationPolicyPtrOutput) ServicesIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IPAllocationPolicy) *string {
		if v == nil {
			return nil
		}
		return v.ServicesIpv4CidrBlock
	}).(pulumi.StringPtrOutput)
}

// The name of the secondary range to be used as for the services CIDR block. The secondary range will be used for service ClusterIPs. This must be an existing secondary range associated with the cluster subnetwork. This field is only applicable with use_ip_aliases is true and create_subnetwork is false.
func (o IPAllocationPolicyPtrOutput) ServicesSecondaryRangeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IPAllocationPolicy) *string {
		if v == nil {
			return nil
		}
		return v.ServicesSecondaryRangeName
	}).(pulumi.StringPtrOutput)
}

// A custom subnetwork name to be used if `create_subnetwork` is true. If this field is empty, then an automatic name will be chosen for the new subnetwork.
func (o IPAllocationPolicyPtrOutput) SubnetworkName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IPAllocationPolicy) *string {
		if v == nil {
			return nil
		}
		return v.SubnetworkName
	}).(pulumi.StringPtrOutput)
}

// The IP address range of the Cloud TPUs in this cluster. If unspecified, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. If unspecified, the range will use the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
func (o IPAllocationPolicyPtrOutput) TpuIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IPAllocationPolicy) *string {
		if v == nil {
			return nil
		}
		return v.TpuIpv4CidrBlock
	}).(pulumi.StringPtrOutput)
}

// Whether alias IPs will be used for pod IPs in the cluster. This is used in conjunction with use_routes. It cannot be true if use_routes is true. If both use_ip_aliases and use_routes are false, then the server picks the default IP allocation mode
func (o IPAllocationPolicyPtrOutput) UseIpAliases() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IPAllocationPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.UseIpAliases
	}).(pulumi.BoolPtrOutput)
}

// Whether routes will be used for pod IPs in the cluster. This is used in conjunction with use_ip_aliases. It cannot be true if use_ip_aliases is true. If both use_ip_aliases and use_routes are false, then the server picks the default IP allocation mode
func (o IPAllocationPolicyPtrOutput) UseRoutes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IPAllocationPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.UseRoutes
	}).(pulumi.BoolPtrOutput)
}

// Configuration for the Kubernetes Dashboard.
type KubernetesDashboard struct {
	// Whether the Kubernetes Dashboard is enabled for this cluster.
	Disabled *bool `pulumi:"disabled"`
}

// KubernetesDashboardInput is an input type that accepts KubernetesDashboardArgs and KubernetesDashboardOutput values.
// You can construct a concrete instance of `KubernetesDashboardInput` via:
//
//          KubernetesDashboardArgs{...}
type KubernetesDashboardInput interface {
	pulumi.Input

	ToKubernetesDashboardOutput() KubernetesDashboardOutput
	ToKubernetesDashboardOutputWithContext(context.Context) KubernetesDashboardOutput
}

// Configuration for the Kubernetes Dashboard.
type KubernetesDashboardArgs struct {
	// Whether the Kubernetes Dashboard is enabled for this cluster.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
}

func (KubernetesDashboardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesDashboard)(nil)).Elem()
}

func (i KubernetesDashboardArgs) ToKubernetesDashboardOutput() KubernetesDashboardOutput {
	return i.ToKubernetesDashboardOutputWithContext(context.Background())
}

func (i KubernetesDashboardArgs) ToKubernetesDashboardOutputWithContext(ctx context.Context) KubernetesDashboardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesDashboardOutput)
}

func (i KubernetesDashboardArgs) ToKubernetesDashboardPtrOutput() KubernetesDashboardPtrOutput {
	return i.ToKubernetesDashboardPtrOutputWithContext(context.Background())
}

func (i KubernetesDashboardArgs) ToKubernetesDashboardPtrOutputWithContext(ctx context.Context) KubernetesDashboardPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesDashboardOutput).ToKubernetesDashboardPtrOutputWithContext(ctx)
}

// KubernetesDashboardPtrInput is an input type that accepts KubernetesDashboardArgs, KubernetesDashboardPtr and KubernetesDashboardPtrOutput values.
// You can construct a concrete instance of `KubernetesDashboardPtrInput` via:
//
//          KubernetesDashboardArgs{...}
//
//  or:
//
//          nil
type KubernetesDashboardPtrInput interface {
	pulumi.Input

	ToKubernetesDashboardPtrOutput() KubernetesDashboardPtrOutput
	ToKubernetesDashboardPtrOutputWithContext(context.Context) KubernetesDashboardPtrOutput
}

type kubernetesDashboardPtrType KubernetesDashboardArgs

func KubernetesDashboardPtr(v *KubernetesDashboardArgs) KubernetesDashboardPtrInput {
	return (*kubernetesDashboardPtrType)(v)
}

func (*kubernetesDashboardPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesDashboard)(nil)).Elem()
}

func (i *kubernetesDashboardPtrType) ToKubernetesDashboardPtrOutput() KubernetesDashboardPtrOutput {
	return i.ToKubernetesDashboardPtrOutputWithContext(context.Background())
}

func (i *kubernetesDashboardPtrType) ToKubernetesDashboardPtrOutputWithContext(ctx context.Context) KubernetesDashboardPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesDashboardPtrOutput)
}

// Configuration for the Kubernetes Dashboard.
type KubernetesDashboardOutput struct{ *pulumi.OutputState }

func (KubernetesDashboardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesDashboard)(nil)).Elem()
}

func (o KubernetesDashboardOutput) ToKubernetesDashboardOutput() KubernetesDashboardOutput {
	return o
}

func (o KubernetesDashboardOutput) ToKubernetesDashboardOutputWithContext(ctx context.Context) KubernetesDashboardOutput {
	return o
}

func (o KubernetesDashboardOutput) ToKubernetesDashboardPtrOutput() KubernetesDashboardPtrOutput {
	return o.ToKubernetesDashboardPtrOutputWithContext(context.Background())
}

func (o KubernetesDashboardOutput) ToKubernetesDashboardPtrOutputWithContext(ctx context.Context) KubernetesDashboardPtrOutput {
	return o.ApplyT(func(v KubernetesDashboard) *KubernetesDashboard {
		return &v
	}).(KubernetesDashboardPtrOutput)
}

// Whether the Kubernetes Dashboard is enabled for this cluster.
func (o KubernetesDashboardOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KubernetesDashboard) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

type KubernetesDashboardPtrOutput struct{ *pulumi.OutputState }

func (KubernetesDashboardPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesDashboard)(nil)).Elem()
}

func (o KubernetesDashboardPtrOutput) ToKubernetesDashboardPtrOutput() KubernetesDashboardPtrOutput {
	return o
}

func (o KubernetesDashboardPtrOutput) ToKubernetesDashboardPtrOutputWithContext(ctx context.Context) KubernetesDashboardPtrOutput {
	return o
}

func (o KubernetesDashboardPtrOutput) Elem() KubernetesDashboardOutput {
	return o.ApplyT(func(v *KubernetesDashboard) KubernetesDashboard { return *v }).(KubernetesDashboardOutput)
}

// Whether the Kubernetes Dashboard is enabled for this cluster.
func (o KubernetesDashboardPtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubernetesDashboard) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// Configuration for the legacy Attribute Based Access Control authorization mode.
type LegacyAbac struct {
	// Whether the ABAC authorizer is enabled for this cluster. When enabled, identities in the system, including service accounts, nodes, and controllers, will have statically granted permissions beyond those provided by the RBAC configuration or IAM.
	Enabled *bool `pulumi:"enabled"`
}

// LegacyAbacInput is an input type that accepts LegacyAbacArgs and LegacyAbacOutput values.
// You can construct a concrete instance of `LegacyAbacInput` via:
//
//          LegacyAbacArgs{...}
type LegacyAbacInput interface {
	pulumi.Input

	ToLegacyAbacOutput() LegacyAbacOutput
	ToLegacyAbacOutputWithContext(context.Context) LegacyAbacOutput
}

// Configuration for the legacy Attribute Based Access Control authorization mode.
type LegacyAbacArgs struct {
	// Whether the ABAC authorizer is enabled for this cluster. When enabled, identities in the system, including service accounts, nodes, and controllers, will have statically granted permissions beyond those provided by the RBAC configuration or IAM.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (LegacyAbacArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LegacyAbac)(nil)).Elem()
}

func (i LegacyAbacArgs) ToLegacyAbacOutput() LegacyAbacOutput {
	return i.ToLegacyAbacOutputWithContext(context.Background())
}

func (i LegacyAbacArgs) ToLegacyAbacOutputWithContext(ctx context.Context) LegacyAbacOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LegacyAbacOutput)
}

func (i LegacyAbacArgs) ToLegacyAbacPtrOutput() LegacyAbacPtrOutput {
	return i.ToLegacyAbacPtrOutputWithContext(context.Background())
}

func (i LegacyAbacArgs) ToLegacyAbacPtrOutputWithContext(ctx context.Context) LegacyAbacPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LegacyAbacOutput).ToLegacyAbacPtrOutputWithContext(ctx)
}

// LegacyAbacPtrInput is an input type that accepts LegacyAbacArgs, LegacyAbacPtr and LegacyAbacPtrOutput values.
// You can construct a concrete instance of `LegacyAbacPtrInput` via:
//
//          LegacyAbacArgs{...}
//
//  or:
//
//          nil
type LegacyAbacPtrInput interface {
	pulumi.Input

	ToLegacyAbacPtrOutput() LegacyAbacPtrOutput
	ToLegacyAbacPtrOutputWithContext(context.Context) LegacyAbacPtrOutput
}

type legacyAbacPtrType LegacyAbacArgs

func LegacyAbacPtr(v *LegacyAbacArgs) LegacyAbacPtrInput {
	return (*legacyAbacPtrType)(v)
}

func (*legacyAbacPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LegacyAbac)(nil)).Elem()
}

func (i *legacyAbacPtrType) ToLegacyAbacPtrOutput() LegacyAbacPtrOutput {
	return i.ToLegacyAbacPtrOutputWithContext(context.Background())
}

func (i *legacyAbacPtrType) ToLegacyAbacPtrOutputWithContext(ctx context.Context) LegacyAbacPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LegacyAbacPtrOutput)
}

// Configuration for the legacy Attribute Based Access Control authorization mode.
type LegacyAbacOutput struct{ *pulumi.OutputState }

func (LegacyAbacOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LegacyAbac)(nil)).Elem()
}

func (o LegacyAbacOutput) ToLegacyAbacOutput() LegacyAbacOutput {
	return o
}

func (o LegacyAbacOutput) ToLegacyAbacOutputWithContext(ctx context.Context) LegacyAbacOutput {
	return o
}

func (o LegacyAbacOutput) ToLegacyAbacPtrOutput() LegacyAbacPtrOutput {
	return o.ToLegacyAbacPtrOutputWithContext(context.Background())
}

func (o LegacyAbacOutput) ToLegacyAbacPtrOutputWithContext(ctx context.Context) LegacyAbacPtrOutput {
	return o.ApplyT(func(v LegacyAbac) *LegacyAbac {
		return &v
	}).(LegacyAbacPtrOutput)
}

// Whether the ABAC authorizer is enabled for this cluster. When enabled, identities in the system, including service accounts, nodes, and controllers, will have statically granted permissions beyond those provided by the RBAC configuration or IAM.
func (o LegacyAbacOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LegacyAbac) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type LegacyAbacPtrOutput struct{ *pulumi.OutputState }

func (LegacyAbacPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LegacyAbac)(nil)).Elem()
}

func (o LegacyAbacPtrOutput) ToLegacyAbacPtrOutput() LegacyAbacPtrOutput {
	return o
}

func (o LegacyAbacPtrOutput) ToLegacyAbacPtrOutputWithContext(ctx context.Context) LegacyAbacPtrOutput {
	return o
}

func (o LegacyAbacPtrOutput) Elem() LegacyAbacOutput {
	return o.ApplyT(func(v *LegacyAbac) LegacyAbac { return *v }).(LegacyAbacOutput)
}

// Whether the ABAC authorizer is enabled for this cluster. When enabled, identities in the system, including service accounts, nodes, and controllers, will have statically granted permissions beyond those provided by the RBAC configuration or IAM.
func (o LegacyAbacPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LegacyAbac) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Parameters that can be configured on Linux nodes.
type LinuxNodeConfig struct {
	// The Linux kernel parameters to be applied to the nodes and all pods running on the nodes. The following parameters are supported. net.core.netdev_max_backlog net.core.rmem_max net.core.wmem_default net.core.wmem_max net.core.optmem_max net.core.somaxconn net.ipv4.tcp_rmem net.ipv4.tcp_wmem net.ipv4.tcp_tw_reuse
	Sysctls map[string]string `pulumi:"sysctls"`
}

// LinuxNodeConfigInput is an input type that accepts LinuxNodeConfigArgs and LinuxNodeConfigOutput values.
// You can construct a concrete instance of `LinuxNodeConfigInput` via:
//
//          LinuxNodeConfigArgs{...}
type LinuxNodeConfigInput interface {
	pulumi.Input

	ToLinuxNodeConfigOutput() LinuxNodeConfigOutput
	ToLinuxNodeConfigOutputWithContext(context.Context) LinuxNodeConfigOutput
}

// Parameters that can be configured on Linux nodes.
type LinuxNodeConfigArgs struct {
	// The Linux kernel parameters to be applied to the nodes and all pods running on the nodes. The following parameters are supported. net.core.netdev_max_backlog net.core.rmem_max net.core.wmem_default net.core.wmem_max net.core.optmem_max net.core.somaxconn net.ipv4.tcp_rmem net.ipv4.tcp_wmem net.ipv4.tcp_tw_reuse
	Sysctls pulumi.StringMapInput `pulumi:"sysctls"`
}

func (LinuxNodeConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinuxNodeConfig)(nil)).Elem()
}

func (i LinuxNodeConfigArgs) ToLinuxNodeConfigOutput() LinuxNodeConfigOutput {
	return i.ToLinuxNodeConfigOutputWithContext(context.Background())
}

func (i LinuxNodeConfigArgs) ToLinuxNodeConfigOutputWithContext(ctx context.Context) LinuxNodeConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxNodeConfigOutput)
}

func (i LinuxNodeConfigArgs) ToLinuxNodeConfigPtrOutput() LinuxNodeConfigPtrOutput {
	return i.ToLinuxNodeConfigPtrOutputWithContext(context.Background())
}

func (i LinuxNodeConfigArgs) ToLinuxNodeConfigPtrOutputWithContext(ctx context.Context) LinuxNodeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxNodeConfigOutput).ToLinuxNodeConfigPtrOutputWithContext(ctx)
}

// LinuxNodeConfigPtrInput is an input type that accepts LinuxNodeConfigArgs, LinuxNodeConfigPtr and LinuxNodeConfigPtrOutput values.
// You can construct a concrete instance of `LinuxNodeConfigPtrInput` via:
//
//          LinuxNodeConfigArgs{...}
//
//  or:
//
//          nil
type LinuxNodeConfigPtrInput interface {
	pulumi.Input

	ToLinuxNodeConfigPtrOutput() LinuxNodeConfigPtrOutput
	ToLinuxNodeConfigPtrOutputWithContext(context.Context) LinuxNodeConfigPtrOutput
}

type linuxNodeConfigPtrType LinuxNodeConfigArgs

func LinuxNodeConfigPtr(v *LinuxNodeConfigArgs) LinuxNodeConfigPtrInput {
	return (*linuxNodeConfigPtrType)(v)
}

func (*linuxNodeConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LinuxNodeConfig)(nil)).Elem()
}

func (i *linuxNodeConfigPtrType) ToLinuxNodeConfigPtrOutput() LinuxNodeConfigPtrOutput {
	return i.ToLinuxNodeConfigPtrOutputWithContext(context.Background())
}

func (i *linuxNodeConfigPtrType) ToLinuxNodeConfigPtrOutputWithContext(ctx context.Context) LinuxNodeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxNodeConfigPtrOutput)
}

// Parameters that can be configured on Linux nodes.
type LinuxNodeConfigOutput struct{ *pulumi.OutputState }

func (LinuxNodeConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinuxNodeConfig)(nil)).Elem()
}

func (o LinuxNodeConfigOutput) ToLinuxNodeConfigOutput() LinuxNodeConfigOutput {
	return o
}

func (o LinuxNodeConfigOutput) ToLinuxNodeConfigOutputWithContext(ctx context.Context) LinuxNodeConfigOutput {
	return o
}

func (o LinuxNodeConfigOutput) ToLinuxNodeConfigPtrOutput() LinuxNodeConfigPtrOutput {
	return o.ToLinuxNodeConfigPtrOutputWithContext(context.Background())
}

func (o LinuxNodeConfigOutput) ToLinuxNodeConfigPtrOutputWithContext(ctx context.Context) LinuxNodeConfigPtrOutput {
	return o.ApplyT(func(v LinuxNodeConfig) *LinuxNodeConfig {
		return &v
	}).(LinuxNodeConfigPtrOutput)
}

// The Linux kernel parameters to be applied to the nodes and all pods running on the nodes. The following parameters are supported. net.core.netdev_max_backlog net.core.rmem_max net.core.wmem_default net.core.wmem_max net.core.optmem_max net.core.somaxconn net.ipv4.tcp_rmem net.ipv4.tcp_wmem net.ipv4.tcp_tw_reuse
func (o LinuxNodeConfigOutput) Sysctls() pulumi.StringMapOutput {
	return o.ApplyT(func(v LinuxNodeConfig) map[string]string { return v.Sysctls }).(pulumi.StringMapOutput)
}

type LinuxNodeConfigPtrOutput struct{ *pulumi.OutputState }

func (LinuxNodeConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinuxNodeConfig)(nil)).Elem()
}

func (o LinuxNodeConfigPtrOutput) ToLinuxNodeConfigPtrOutput() LinuxNodeConfigPtrOutput {
	return o
}

func (o LinuxNodeConfigPtrOutput) ToLinuxNodeConfigPtrOutputWithContext(ctx context.Context) LinuxNodeConfigPtrOutput {
	return o
}

func (o LinuxNodeConfigPtrOutput) Elem() LinuxNodeConfigOutput {
	return o.ApplyT(func(v *LinuxNodeConfig) LinuxNodeConfig { return *v }).(LinuxNodeConfigOutput)
}

// The Linux kernel parameters to be applied to the nodes and all pods running on the nodes. The following parameters are supported. net.core.netdev_max_backlog net.core.rmem_max net.core.wmem_default net.core.wmem_max net.core.optmem_max net.core.somaxconn net.ipv4.tcp_rmem net.ipv4.tcp_wmem net.ipv4.tcp_tw_reuse
func (o LinuxNodeConfigPtrOutput) Sysctls() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LinuxNodeConfig) map[string]string {
		if v == nil {
			return nil
		}
		return v.Sysctls
	}).(pulumi.StringMapOutput)
}

// MaintenancePolicy defines the maintenance policy to be used for the cluster.
type MaintenancePolicy struct {
	// A hash identifying the version of this policy, so that updates to fields of the policy won't accidentally undo intermediate changes (and so that users of the API unaware of some fields won't accidentally remove other fields). Make a `get()` request to the cluster to get the current resource version and include it with requests to set the policy.
	ResourceVersion *string `pulumi:"resourceVersion"`
	// Specifies the maintenance window in which maintenance may be performed.
	Window *MaintenanceWindow `pulumi:"window"`
}

// MaintenancePolicyInput is an input type that accepts MaintenancePolicyArgs and MaintenancePolicyOutput values.
// You can construct a concrete instance of `MaintenancePolicyInput` via:
//
//          MaintenancePolicyArgs{...}
type MaintenancePolicyInput interface {
	pulumi.Input

	ToMaintenancePolicyOutput() MaintenancePolicyOutput
	ToMaintenancePolicyOutputWithContext(context.Context) MaintenancePolicyOutput
}

// MaintenancePolicy defines the maintenance policy to be used for the cluster.
type MaintenancePolicyArgs struct {
	// A hash identifying the version of this policy, so that updates to fields of the policy won't accidentally undo intermediate changes (and so that users of the API unaware of some fields won't accidentally remove other fields). Make a `get()` request to the cluster to get the current resource version and include it with requests to set the policy.
	ResourceVersion pulumi.StringPtrInput `pulumi:"resourceVersion"`
	// Specifies the maintenance window in which maintenance may be performed.
	Window MaintenanceWindowPtrInput `pulumi:"window"`
}

func (MaintenancePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenancePolicy)(nil)).Elem()
}

func (i MaintenancePolicyArgs) ToMaintenancePolicyOutput() MaintenancePolicyOutput {
	return i.ToMaintenancePolicyOutputWithContext(context.Background())
}

func (i MaintenancePolicyArgs) ToMaintenancePolicyOutputWithContext(ctx context.Context) MaintenancePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenancePolicyOutput)
}

func (i MaintenancePolicyArgs) ToMaintenancePolicyPtrOutput() MaintenancePolicyPtrOutput {
	return i.ToMaintenancePolicyPtrOutputWithContext(context.Background())
}

func (i MaintenancePolicyArgs) ToMaintenancePolicyPtrOutputWithContext(ctx context.Context) MaintenancePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenancePolicyOutput).ToMaintenancePolicyPtrOutputWithContext(ctx)
}

// MaintenancePolicyPtrInput is an input type that accepts MaintenancePolicyArgs, MaintenancePolicyPtr and MaintenancePolicyPtrOutput values.
// You can construct a concrete instance of `MaintenancePolicyPtrInput` via:
//
//          MaintenancePolicyArgs{...}
//
//  or:
//
//          nil
type MaintenancePolicyPtrInput interface {
	pulumi.Input

	ToMaintenancePolicyPtrOutput() MaintenancePolicyPtrOutput
	ToMaintenancePolicyPtrOutputWithContext(context.Context) MaintenancePolicyPtrOutput
}

type maintenancePolicyPtrType MaintenancePolicyArgs

func MaintenancePolicyPtr(v *MaintenancePolicyArgs) MaintenancePolicyPtrInput {
	return (*maintenancePolicyPtrType)(v)
}

func (*maintenancePolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MaintenancePolicy)(nil)).Elem()
}

func (i *maintenancePolicyPtrType) ToMaintenancePolicyPtrOutput() MaintenancePolicyPtrOutput {
	return i.ToMaintenancePolicyPtrOutputWithContext(context.Background())
}

func (i *maintenancePolicyPtrType) ToMaintenancePolicyPtrOutputWithContext(ctx context.Context) MaintenancePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenancePolicyPtrOutput)
}

// MaintenancePolicy defines the maintenance policy to be used for the cluster.
type MaintenancePolicyOutput struct{ *pulumi.OutputState }

func (MaintenancePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenancePolicy)(nil)).Elem()
}

func (o MaintenancePolicyOutput) ToMaintenancePolicyOutput() MaintenancePolicyOutput {
	return o
}

func (o MaintenancePolicyOutput) ToMaintenancePolicyOutputWithContext(ctx context.Context) MaintenancePolicyOutput {
	return o
}

func (o MaintenancePolicyOutput) ToMaintenancePolicyPtrOutput() MaintenancePolicyPtrOutput {
	return o.ToMaintenancePolicyPtrOutputWithContext(context.Background())
}

func (o MaintenancePolicyOutput) ToMaintenancePolicyPtrOutputWithContext(ctx context.Context) MaintenancePolicyPtrOutput {
	return o.ApplyT(func(v MaintenancePolicy) *MaintenancePolicy {
		return &v
	}).(MaintenancePolicyPtrOutput)
}

// A hash identifying the version of this policy, so that updates to fields of the policy won't accidentally undo intermediate changes (and so that users of the API unaware of some fields won't accidentally remove other fields). Make a `get()` request to the cluster to get the current resource version and include it with requests to set the policy.
func (o MaintenancePolicyOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaintenancePolicy) *string { return v.ResourceVersion }).(pulumi.StringPtrOutput)
}

// Specifies the maintenance window in which maintenance may be performed.
func (o MaintenancePolicyOutput) Window() MaintenanceWindowPtrOutput {
	return o.ApplyT(func(v MaintenancePolicy) *MaintenanceWindow { return v.Window }).(MaintenanceWindowPtrOutput)
}

type MaintenancePolicyPtrOutput struct{ *pulumi.OutputState }

func (MaintenancePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MaintenancePolicy)(nil)).Elem()
}

func (o MaintenancePolicyPtrOutput) ToMaintenancePolicyPtrOutput() MaintenancePolicyPtrOutput {
	return o
}

func (o MaintenancePolicyPtrOutput) ToMaintenancePolicyPtrOutputWithContext(ctx context.Context) MaintenancePolicyPtrOutput {
	return o
}

func (o MaintenancePolicyPtrOutput) Elem() MaintenancePolicyOutput {
	return o.ApplyT(func(v *MaintenancePolicy) MaintenancePolicy { return *v }).(MaintenancePolicyOutput)
}

// A hash identifying the version of this policy, so that updates to fields of the policy won't accidentally undo intermediate changes (and so that users of the API unaware of some fields won't accidentally remove other fields). Make a `get()` request to the cluster to get the current resource version and include it with requests to set the policy.
func (o MaintenancePolicyPtrOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaintenancePolicy) *string {
		if v == nil {
			return nil
		}
		return v.ResourceVersion
	}).(pulumi.StringPtrOutput)
}

// Specifies the maintenance window in which maintenance may be performed.
func (o MaintenancePolicyPtrOutput) Window() MaintenanceWindowPtrOutput {
	return o.ApplyT(func(v *MaintenancePolicy) *MaintenanceWindow {
		if v == nil {
			return nil
		}
		return v.Window
	}).(MaintenanceWindowPtrOutput)
}

// MaintenanceWindow defines the maintenance window to be used for the cluster.
type MaintenanceWindow struct {
	// DailyMaintenanceWindow specifies a daily maintenance operation window.
	DailyMaintenanceWindow *DailyMaintenanceWindow `pulumi:"dailyMaintenanceWindow"`
	// Exceptions to maintenance window. Non-emergency maintenance should not occur in these windows.
	MaintenanceExclusions map[string]string `pulumi:"maintenanceExclusions"`
	// RecurringWindow specifies some number of recurring time periods for maintenance to occur. The time windows may be overlapping. If no maintenance windows are set, maintenance can occur at any time.
	RecurringWindow *RecurringTimeWindow `pulumi:"recurringWindow"`
}

// MaintenanceWindowInput is an input type that accepts MaintenanceWindowArgs and MaintenanceWindowOutput values.
// You can construct a concrete instance of `MaintenanceWindowInput` via:
//
//          MaintenanceWindowArgs{...}
type MaintenanceWindowInput interface {
	pulumi.Input

	ToMaintenanceWindowOutput() MaintenanceWindowOutput
	ToMaintenanceWindowOutputWithContext(context.Context) MaintenanceWindowOutput
}

// MaintenanceWindow defines the maintenance window to be used for the cluster.
type MaintenanceWindowArgs struct {
	// DailyMaintenanceWindow specifies a daily maintenance operation window.
	DailyMaintenanceWindow DailyMaintenanceWindowPtrInput `pulumi:"dailyMaintenanceWindow"`
	// Exceptions to maintenance window. Non-emergency maintenance should not occur in these windows.
	MaintenanceExclusions pulumi.StringMapInput `pulumi:"maintenanceExclusions"`
	// RecurringWindow specifies some number of recurring time periods for maintenance to occur. The time windows may be overlapping. If no maintenance windows are set, maintenance can occur at any time.
	RecurringWindow RecurringTimeWindowPtrInput `pulumi:"recurringWindow"`
}

func (MaintenanceWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceWindow)(nil)).Elem()
}

func (i MaintenanceWindowArgs) ToMaintenanceWindowOutput() MaintenanceWindowOutput {
	return i.ToMaintenanceWindowOutputWithContext(context.Background())
}

func (i MaintenanceWindowArgs) ToMaintenanceWindowOutputWithContext(ctx context.Context) MaintenanceWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowOutput)
}

func (i MaintenanceWindowArgs) ToMaintenanceWindowPtrOutput() MaintenanceWindowPtrOutput {
	return i.ToMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (i MaintenanceWindowArgs) ToMaintenanceWindowPtrOutputWithContext(ctx context.Context) MaintenanceWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowOutput).ToMaintenanceWindowPtrOutputWithContext(ctx)
}

// MaintenanceWindowPtrInput is an input type that accepts MaintenanceWindowArgs, MaintenanceWindowPtr and MaintenanceWindowPtrOutput values.
// You can construct a concrete instance of `MaintenanceWindowPtrInput` via:
//
//          MaintenanceWindowArgs{...}
//
//  or:
//
//          nil
type MaintenanceWindowPtrInput interface {
	pulumi.Input

	ToMaintenanceWindowPtrOutput() MaintenanceWindowPtrOutput
	ToMaintenanceWindowPtrOutputWithContext(context.Context) MaintenanceWindowPtrOutput
}

type maintenanceWindowPtrType MaintenanceWindowArgs

func MaintenanceWindowPtr(v *MaintenanceWindowArgs) MaintenanceWindowPtrInput {
	return (*maintenanceWindowPtrType)(v)
}

func (*maintenanceWindowPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MaintenanceWindow)(nil)).Elem()
}

func (i *maintenanceWindowPtrType) ToMaintenanceWindowPtrOutput() MaintenanceWindowPtrOutput {
	return i.ToMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (i *maintenanceWindowPtrType) ToMaintenanceWindowPtrOutputWithContext(ctx context.Context) MaintenanceWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowPtrOutput)
}

// MaintenanceWindow defines the maintenance window to be used for the cluster.
type MaintenanceWindowOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceWindow)(nil)).Elem()
}

func (o MaintenanceWindowOutput) ToMaintenanceWindowOutput() MaintenanceWindowOutput {
	return o
}

func (o MaintenanceWindowOutput) ToMaintenanceWindowOutputWithContext(ctx context.Context) MaintenanceWindowOutput {
	return o
}

func (o MaintenanceWindowOutput) ToMaintenanceWindowPtrOutput() MaintenanceWindowPtrOutput {
	return o.ToMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (o MaintenanceWindowOutput) ToMaintenanceWindowPtrOutputWithContext(ctx context.Context) MaintenanceWindowPtrOutput {
	return o.ApplyT(func(v MaintenanceWindow) *MaintenanceWindow {
		return &v
	}).(MaintenanceWindowPtrOutput)
}

// DailyMaintenanceWindow specifies a daily maintenance operation window.
func (o MaintenanceWindowOutput) DailyMaintenanceWindow() DailyMaintenanceWindowPtrOutput {
	return o.ApplyT(func(v MaintenanceWindow) *DailyMaintenanceWindow { return v.DailyMaintenanceWindow }).(DailyMaintenanceWindowPtrOutput)
}

// Exceptions to maintenance window. Non-emergency maintenance should not occur in these windows.
func (o MaintenanceWindowOutput) MaintenanceExclusions() pulumi.StringMapOutput {
	return o.ApplyT(func(v MaintenanceWindow) map[string]string { return v.MaintenanceExclusions }).(pulumi.StringMapOutput)
}

// RecurringWindow specifies some number of recurring time periods for maintenance to occur. The time windows may be overlapping. If no maintenance windows are set, maintenance can occur at any time.
func (o MaintenanceWindowOutput) RecurringWindow() RecurringTimeWindowPtrOutput {
	return o.ApplyT(func(v MaintenanceWindow) *RecurringTimeWindow { return v.RecurringWindow }).(RecurringTimeWindowPtrOutput)
}

type MaintenanceWindowPtrOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MaintenanceWindow)(nil)).Elem()
}

func (o MaintenanceWindowPtrOutput) ToMaintenanceWindowPtrOutput() MaintenanceWindowPtrOutput {
	return o
}

func (o MaintenanceWindowPtrOutput) ToMaintenanceWindowPtrOutputWithContext(ctx context.Context) MaintenanceWindowPtrOutput {
	return o
}

func (o MaintenanceWindowPtrOutput) Elem() MaintenanceWindowOutput {
	return o.ApplyT(func(v *MaintenanceWindow) MaintenanceWindow { return *v }).(MaintenanceWindowOutput)
}

// DailyMaintenanceWindow specifies a daily maintenance operation window.
func (o MaintenanceWindowPtrOutput) DailyMaintenanceWindow() DailyMaintenanceWindowPtrOutput {
	return o.ApplyT(func(v *MaintenanceWindow) *DailyMaintenanceWindow {
		if v == nil {
			return nil
		}
		return v.DailyMaintenanceWindow
	}).(DailyMaintenanceWindowPtrOutput)
}

// Exceptions to maintenance window. Non-emergency maintenance should not occur in these windows.
func (o MaintenanceWindowPtrOutput) MaintenanceExclusions() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MaintenanceWindow) map[string]string {
		if v == nil {
			return nil
		}
		return v.MaintenanceExclusions
	}).(pulumi.StringMapOutput)
}

// RecurringWindow specifies some number of recurring time periods for maintenance to occur. The time windows may be overlapping. If no maintenance windows are set, maintenance can occur at any time.
func (o MaintenanceWindowPtrOutput) RecurringWindow() RecurringTimeWindowPtrOutput {
	return o.ApplyT(func(v *MaintenanceWindow) *RecurringTimeWindow {
		if v == nil {
			return nil
		}
		return v.RecurringWindow
	}).(RecurringTimeWindowPtrOutput)
}

// The authentication information for accessing the master endpoint. Authentication can be done using HTTP basic auth or using client certificates.
type MasterAuth struct {
	// [Output only] Base64-encoded public certificate used by clients to authenticate to the cluster endpoint.
	ClientCertificate *string `pulumi:"clientCertificate"`
	// Configuration for client certificate authentication on the cluster. For clusters before v1.12, if no configuration is specified, a client certificate is issued.
	ClientCertificateConfig *ClientCertificateConfig `pulumi:"clientCertificateConfig"`
	// [Output only] Base64-encoded private key used by clients to authenticate to the cluster endpoint.
	ClientKey *string `pulumi:"clientKey"`
	// [Output only] Base64-encoded public certificate that is the root of trust for the cluster.
	ClusterCaCertificate *string `pulumi:"clusterCaCertificate"`
	// The password to use for HTTP basic authentication to the master endpoint. Because the master endpoint is open to the Internet, you should create a strong password. If a password is provided for cluster creation, username must be non-empty. Warning: basic authentication is deprecated, and will be removed in GKE control plane versions 1.19 and newer. For a list of recommended authentication methods, see: https://cloud.google.com/kubernetes-engine/docs/how-to/api-server-authentication
	Password *string `pulumi:"password"`
	// The username to use for HTTP basic authentication to the master endpoint. For clusters v1.6.0 and later, basic authentication can be disabled by leaving username unspecified (or setting it to the empty string). Warning: basic authentication is deprecated, and will be removed in GKE control plane versions 1.19 and newer. For a list of recommended authentication methods, see: https://cloud.google.com/kubernetes-engine/docs/how-to/api-server-authentication
	Username *string `pulumi:"username"`
}

// MasterAuthInput is an input type that accepts MasterAuthArgs and MasterAuthOutput values.
// You can construct a concrete instance of `MasterAuthInput` via:
//
//          MasterAuthArgs{...}
type MasterAuthInput interface {
	pulumi.Input

	ToMasterAuthOutput() MasterAuthOutput
	ToMasterAuthOutputWithContext(context.Context) MasterAuthOutput
}

// The authentication information for accessing the master endpoint. Authentication can be done using HTTP basic auth or using client certificates.
type MasterAuthArgs struct {
	// [Output only] Base64-encoded public certificate used by clients to authenticate to the cluster endpoint.
	ClientCertificate pulumi.StringPtrInput `pulumi:"clientCertificate"`
	// Configuration for client certificate authentication on the cluster. For clusters before v1.12, if no configuration is specified, a client certificate is issued.
	ClientCertificateConfig ClientCertificateConfigPtrInput `pulumi:"clientCertificateConfig"`
	// [Output only] Base64-encoded private key used by clients to authenticate to the cluster endpoint.
	ClientKey pulumi.StringPtrInput `pulumi:"clientKey"`
	// [Output only] Base64-encoded public certificate that is the root of trust for the cluster.
	ClusterCaCertificate pulumi.StringPtrInput `pulumi:"clusterCaCertificate"`
	// The password to use for HTTP basic authentication to the master endpoint. Because the master endpoint is open to the Internet, you should create a strong password. If a password is provided for cluster creation, username must be non-empty. Warning: basic authentication is deprecated, and will be removed in GKE control plane versions 1.19 and newer. For a list of recommended authentication methods, see: https://cloud.google.com/kubernetes-engine/docs/how-to/api-server-authentication
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The username to use for HTTP basic authentication to the master endpoint. For clusters v1.6.0 and later, basic authentication can be disabled by leaving username unspecified (or setting it to the empty string). Warning: basic authentication is deprecated, and will be removed in GKE control plane versions 1.19 and newer. For a list of recommended authentication methods, see: https://cloud.google.com/kubernetes-engine/docs/how-to/api-server-authentication
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (MasterAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MasterAuth)(nil)).Elem()
}

func (i MasterAuthArgs) ToMasterAuthOutput() MasterAuthOutput {
	return i.ToMasterAuthOutputWithContext(context.Background())
}

func (i MasterAuthArgs) ToMasterAuthOutputWithContext(ctx context.Context) MasterAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MasterAuthOutput)
}

func (i MasterAuthArgs) ToMasterAuthPtrOutput() MasterAuthPtrOutput {
	return i.ToMasterAuthPtrOutputWithContext(context.Background())
}

func (i MasterAuthArgs) ToMasterAuthPtrOutputWithContext(ctx context.Context) MasterAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MasterAuthOutput).ToMasterAuthPtrOutputWithContext(ctx)
}

// MasterAuthPtrInput is an input type that accepts MasterAuthArgs, MasterAuthPtr and MasterAuthPtrOutput values.
// You can construct a concrete instance of `MasterAuthPtrInput` via:
//
//          MasterAuthArgs{...}
//
//  or:
//
//          nil
type MasterAuthPtrInput interface {
	pulumi.Input

	ToMasterAuthPtrOutput() MasterAuthPtrOutput
	ToMasterAuthPtrOutputWithContext(context.Context) MasterAuthPtrOutput
}

type masterAuthPtrType MasterAuthArgs

func MasterAuthPtr(v *MasterAuthArgs) MasterAuthPtrInput {
	return (*masterAuthPtrType)(v)
}

func (*masterAuthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MasterAuth)(nil)).Elem()
}

func (i *masterAuthPtrType) ToMasterAuthPtrOutput() MasterAuthPtrOutput {
	return i.ToMasterAuthPtrOutputWithContext(context.Background())
}

func (i *masterAuthPtrType) ToMasterAuthPtrOutputWithContext(ctx context.Context) MasterAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MasterAuthPtrOutput)
}

// The authentication information for accessing the master endpoint. Authentication can be done using HTTP basic auth or using client certificates.
type MasterAuthOutput struct{ *pulumi.OutputState }

func (MasterAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MasterAuth)(nil)).Elem()
}

func (o MasterAuthOutput) ToMasterAuthOutput() MasterAuthOutput {
	return o
}

func (o MasterAuthOutput) ToMasterAuthOutputWithContext(ctx context.Context) MasterAuthOutput {
	return o
}

func (o MasterAuthOutput) ToMasterAuthPtrOutput() MasterAuthPtrOutput {
	return o.ToMasterAuthPtrOutputWithContext(context.Background())
}

func (o MasterAuthOutput) ToMasterAuthPtrOutputWithContext(ctx context.Context) MasterAuthPtrOutput {
	return o.ApplyT(func(v MasterAuth) *MasterAuth {
		return &v
	}).(MasterAuthPtrOutput)
}

// [Output only] Base64-encoded public certificate used by clients to authenticate to the cluster endpoint.
func (o MasterAuthOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MasterAuth) *string { return v.ClientCertificate }).(pulumi.StringPtrOutput)
}

// Configuration for client certificate authentication on the cluster. For clusters before v1.12, if no configuration is specified, a client certificate is issued.
func (o MasterAuthOutput) ClientCertificateConfig() ClientCertificateConfigPtrOutput {
	return o.ApplyT(func(v MasterAuth) *ClientCertificateConfig { return v.ClientCertificateConfig }).(ClientCertificateConfigPtrOutput)
}

// [Output only] Base64-encoded private key used by clients to authenticate to the cluster endpoint.
func (o MasterAuthOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MasterAuth) *string { return v.ClientKey }).(pulumi.StringPtrOutput)
}

// [Output only] Base64-encoded public certificate that is the root of trust for the cluster.
func (o MasterAuthOutput) ClusterCaCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MasterAuth) *string { return v.ClusterCaCertificate }).(pulumi.StringPtrOutput)
}

// The password to use for HTTP basic authentication to the master endpoint. Because the master endpoint is open to the Internet, you should create a strong password. If a password is provided for cluster creation, username must be non-empty. Warning: basic authentication is deprecated, and will be removed in GKE control plane versions 1.19 and newer. For a list of recommended authentication methods, see: https://cloud.google.com/kubernetes-engine/docs/how-to/api-server-authentication
func (o MasterAuthOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MasterAuth) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The username to use for HTTP basic authentication to the master endpoint. For clusters v1.6.0 and later, basic authentication can be disabled by leaving username unspecified (or setting it to the empty string). Warning: basic authentication is deprecated, and will be removed in GKE control plane versions 1.19 and newer. For a list of recommended authentication methods, see: https://cloud.google.com/kubernetes-engine/docs/how-to/api-server-authentication
func (o MasterAuthOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MasterAuth) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type MasterAuthPtrOutput struct{ *pulumi.OutputState }

func (MasterAuthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MasterAuth)(nil)).Elem()
}

func (o MasterAuthPtrOutput) ToMasterAuthPtrOutput() MasterAuthPtrOutput {
	return o
}

func (o MasterAuthPtrOutput) ToMasterAuthPtrOutputWithContext(ctx context.Context) MasterAuthPtrOutput {
	return o
}

func (o MasterAuthPtrOutput) Elem() MasterAuthOutput {
	return o.ApplyT(func(v *MasterAuth) MasterAuth { return *v }).(MasterAuthOutput)
}

// [Output only] Base64-encoded public certificate used by clients to authenticate to the cluster endpoint.
func (o MasterAuthPtrOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MasterAuth) *string {
		if v == nil {
			return nil
		}
		return v.ClientCertificate
	}).(pulumi.StringPtrOutput)
}

// Configuration for client certificate authentication on the cluster. For clusters before v1.12, if no configuration is specified, a client certificate is issued.
func (o MasterAuthPtrOutput) ClientCertificateConfig() ClientCertificateConfigPtrOutput {
	return o.ApplyT(func(v *MasterAuth) *ClientCertificateConfig {
		if v == nil {
			return nil
		}
		return v.ClientCertificateConfig
	}).(ClientCertificateConfigPtrOutput)
}

// [Output only] Base64-encoded private key used by clients to authenticate to the cluster endpoint.
func (o MasterAuthPtrOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MasterAuth) *string {
		if v == nil {
			return nil
		}
		return v.ClientKey
	}).(pulumi.StringPtrOutput)
}

// [Output only] Base64-encoded public certificate that is the root of trust for the cluster.
func (o MasterAuthPtrOutput) ClusterCaCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MasterAuth) *string {
		if v == nil {
			return nil
		}
		return v.ClusterCaCertificate
	}).(pulumi.StringPtrOutput)
}

// The password to use for HTTP basic authentication to the master endpoint. Because the master endpoint is open to the Internet, you should create a strong password. If a password is provided for cluster creation, username must be non-empty. Warning: basic authentication is deprecated, and will be removed in GKE control plane versions 1.19 and newer. For a list of recommended authentication methods, see: https://cloud.google.com/kubernetes-engine/docs/how-to/api-server-authentication
func (o MasterAuthPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MasterAuth) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The username to use for HTTP basic authentication to the master endpoint. For clusters v1.6.0 and later, basic authentication can be disabled by leaving username unspecified (or setting it to the empty string). Warning: basic authentication is deprecated, and will be removed in GKE control plane versions 1.19 and newer. For a list of recommended authentication methods, see: https://cloud.google.com/kubernetes-engine/docs/how-to/api-server-authentication
func (o MasterAuthPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MasterAuth) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

// Configuration options for the master authorized networks feature. Enabled master authorized networks will disallow all external traffic to access Kubernetes master through HTTPS except traffic from the given CIDR blocks, Google Compute Engine Public IPs and Google Prod IPs.
type MasterAuthorizedNetworksConfig struct {
	// cidr_blocks define up to 50 external networks that could access Kubernetes master through HTTPS.
	CidrBlocks []CidrBlock `pulumi:"cidrBlocks"`
	// Whether or not master authorized networks is enabled.
	Enabled *bool `pulumi:"enabled"`
}

// MasterAuthorizedNetworksConfigInput is an input type that accepts MasterAuthorizedNetworksConfigArgs and MasterAuthorizedNetworksConfigOutput values.
// You can construct a concrete instance of `MasterAuthorizedNetworksConfigInput` via:
//
//          MasterAuthorizedNetworksConfigArgs{...}
type MasterAuthorizedNetworksConfigInput interface {
	pulumi.Input

	ToMasterAuthorizedNetworksConfigOutput() MasterAuthorizedNetworksConfigOutput
	ToMasterAuthorizedNetworksConfigOutputWithContext(context.Context) MasterAuthorizedNetworksConfigOutput
}

// Configuration options for the master authorized networks feature. Enabled master authorized networks will disallow all external traffic to access Kubernetes master through HTTPS except traffic from the given CIDR blocks, Google Compute Engine Public IPs and Google Prod IPs.
type MasterAuthorizedNetworksConfigArgs struct {
	// cidr_blocks define up to 50 external networks that could access Kubernetes master through HTTPS.
	CidrBlocks CidrBlockArrayInput `pulumi:"cidrBlocks"`
	// Whether or not master authorized networks is enabled.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (MasterAuthorizedNetworksConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MasterAuthorizedNetworksConfig)(nil)).Elem()
}

func (i MasterAuthorizedNetworksConfigArgs) ToMasterAuthorizedNetworksConfigOutput() MasterAuthorizedNetworksConfigOutput {
	return i.ToMasterAuthorizedNetworksConfigOutputWithContext(context.Background())
}

func (i MasterAuthorizedNetworksConfigArgs) ToMasterAuthorizedNetworksConfigOutputWithContext(ctx context.Context) MasterAuthorizedNetworksConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MasterAuthorizedNetworksConfigOutput)
}

func (i MasterAuthorizedNetworksConfigArgs) ToMasterAuthorizedNetworksConfigPtrOutput() MasterAuthorizedNetworksConfigPtrOutput {
	return i.ToMasterAuthorizedNetworksConfigPtrOutputWithContext(context.Background())
}

func (i MasterAuthorizedNetworksConfigArgs) ToMasterAuthorizedNetworksConfigPtrOutputWithContext(ctx context.Context) MasterAuthorizedNetworksConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MasterAuthorizedNetworksConfigOutput).ToMasterAuthorizedNetworksConfigPtrOutputWithContext(ctx)
}

// MasterAuthorizedNetworksConfigPtrInput is an input type that accepts MasterAuthorizedNetworksConfigArgs, MasterAuthorizedNetworksConfigPtr and MasterAuthorizedNetworksConfigPtrOutput values.
// You can construct a concrete instance of `MasterAuthorizedNetworksConfigPtrInput` via:
//
//          MasterAuthorizedNetworksConfigArgs{...}
//
//  or:
//
//          nil
type MasterAuthorizedNetworksConfigPtrInput interface {
	pulumi.Input

	ToMasterAuthorizedNetworksConfigPtrOutput() MasterAuthorizedNetworksConfigPtrOutput
	ToMasterAuthorizedNetworksConfigPtrOutputWithContext(context.Context) MasterAuthorizedNetworksConfigPtrOutput
}

type masterAuthorizedNetworksConfigPtrType MasterAuthorizedNetworksConfigArgs

func MasterAuthorizedNetworksConfigPtr(v *MasterAuthorizedNetworksConfigArgs) MasterAuthorizedNetworksConfigPtrInput {
	return (*masterAuthorizedNetworksConfigPtrType)(v)
}

func (*masterAuthorizedNetworksConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MasterAuthorizedNetworksConfig)(nil)).Elem()
}

func (i *masterAuthorizedNetworksConfigPtrType) ToMasterAuthorizedNetworksConfigPtrOutput() MasterAuthorizedNetworksConfigPtrOutput {
	return i.ToMasterAuthorizedNetworksConfigPtrOutputWithContext(context.Background())
}

func (i *masterAuthorizedNetworksConfigPtrType) ToMasterAuthorizedNetworksConfigPtrOutputWithContext(ctx context.Context) MasterAuthorizedNetworksConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MasterAuthorizedNetworksConfigPtrOutput)
}

// Configuration options for the master authorized networks feature. Enabled master authorized networks will disallow all external traffic to access Kubernetes master through HTTPS except traffic from the given CIDR blocks, Google Compute Engine Public IPs and Google Prod IPs.
type MasterAuthorizedNetworksConfigOutput struct{ *pulumi.OutputState }

func (MasterAuthorizedNetworksConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MasterAuthorizedNetworksConfig)(nil)).Elem()
}

func (o MasterAuthorizedNetworksConfigOutput) ToMasterAuthorizedNetworksConfigOutput() MasterAuthorizedNetworksConfigOutput {
	return o
}

func (o MasterAuthorizedNetworksConfigOutput) ToMasterAuthorizedNetworksConfigOutputWithContext(ctx context.Context) MasterAuthorizedNetworksConfigOutput {
	return o
}

func (o MasterAuthorizedNetworksConfigOutput) ToMasterAuthorizedNetworksConfigPtrOutput() MasterAuthorizedNetworksConfigPtrOutput {
	return o.ToMasterAuthorizedNetworksConfigPtrOutputWithContext(context.Background())
}

func (o MasterAuthorizedNetworksConfigOutput) ToMasterAuthorizedNetworksConfigPtrOutputWithContext(ctx context.Context) MasterAuthorizedNetworksConfigPtrOutput {
	return o.ApplyT(func(v MasterAuthorizedNetworksConfig) *MasterAuthorizedNetworksConfig {
		return &v
	}).(MasterAuthorizedNetworksConfigPtrOutput)
}

// cidr_blocks define up to 50 external networks that could access Kubernetes master through HTTPS.
func (o MasterAuthorizedNetworksConfigOutput) CidrBlocks() CidrBlockArrayOutput {
	return o.ApplyT(func(v MasterAuthorizedNetworksConfig) []CidrBlock { return v.CidrBlocks }).(CidrBlockArrayOutput)
}

// Whether or not master authorized networks is enabled.
func (o MasterAuthorizedNetworksConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MasterAuthorizedNetworksConfig) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type MasterAuthorizedNetworksConfigPtrOutput struct{ *pulumi.OutputState }

func (MasterAuthorizedNetworksConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MasterAuthorizedNetworksConfig)(nil)).Elem()
}

func (o MasterAuthorizedNetworksConfigPtrOutput) ToMasterAuthorizedNetworksConfigPtrOutput() MasterAuthorizedNetworksConfigPtrOutput {
	return o
}

func (o MasterAuthorizedNetworksConfigPtrOutput) ToMasterAuthorizedNetworksConfigPtrOutputWithContext(ctx context.Context) MasterAuthorizedNetworksConfigPtrOutput {
	return o
}

func (o MasterAuthorizedNetworksConfigPtrOutput) Elem() MasterAuthorizedNetworksConfigOutput {
	return o.ApplyT(func(v *MasterAuthorizedNetworksConfig) MasterAuthorizedNetworksConfig { return *v }).(MasterAuthorizedNetworksConfigOutput)
}

// cidr_blocks define up to 50 external networks that could access Kubernetes master through HTTPS.
func (o MasterAuthorizedNetworksConfigPtrOutput) CidrBlocks() CidrBlockArrayOutput {
	return o.ApplyT(func(v *MasterAuthorizedNetworksConfig) []CidrBlock {
		if v == nil {
			return nil
		}
		return v.CidrBlocks
	}).(CidrBlockArrayOutput)
}

// Whether or not master authorized networks is enabled.
func (o MasterAuthorizedNetworksConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MasterAuthorizedNetworksConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Constraints applied to pods.
type MaxPodsConstraint struct {
	// Constraint enforced on the max num of pods per node.
	MaxPodsPerNode *string `pulumi:"maxPodsPerNode"`
}

// MaxPodsConstraintInput is an input type that accepts MaxPodsConstraintArgs and MaxPodsConstraintOutput values.
// You can construct a concrete instance of `MaxPodsConstraintInput` via:
//
//          MaxPodsConstraintArgs{...}
type MaxPodsConstraintInput interface {
	pulumi.Input

	ToMaxPodsConstraintOutput() MaxPodsConstraintOutput
	ToMaxPodsConstraintOutputWithContext(context.Context) MaxPodsConstraintOutput
}

// Constraints applied to pods.
type MaxPodsConstraintArgs struct {
	// Constraint enforced on the max num of pods per node.
	MaxPodsPerNode pulumi.StringPtrInput `pulumi:"maxPodsPerNode"`
}

func (MaxPodsConstraintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MaxPodsConstraint)(nil)).Elem()
}

func (i MaxPodsConstraintArgs) ToMaxPodsConstraintOutput() MaxPodsConstraintOutput {
	return i.ToMaxPodsConstraintOutputWithContext(context.Background())
}

func (i MaxPodsConstraintArgs) ToMaxPodsConstraintOutputWithContext(ctx context.Context) MaxPodsConstraintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaxPodsConstraintOutput)
}

func (i MaxPodsConstraintArgs) ToMaxPodsConstraintPtrOutput() MaxPodsConstraintPtrOutput {
	return i.ToMaxPodsConstraintPtrOutputWithContext(context.Background())
}

func (i MaxPodsConstraintArgs) ToMaxPodsConstraintPtrOutputWithContext(ctx context.Context) MaxPodsConstraintPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaxPodsConstraintOutput).ToMaxPodsConstraintPtrOutputWithContext(ctx)
}

// MaxPodsConstraintPtrInput is an input type that accepts MaxPodsConstraintArgs, MaxPodsConstraintPtr and MaxPodsConstraintPtrOutput values.
// You can construct a concrete instance of `MaxPodsConstraintPtrInput` via:
//
//          MaxPodsConstraintArgs{...}
//
//  or:
//
//          nil
type MaxPodsConstraintPtrInput interface {
	pulumi.Input

	ToMaxPodsConstraintPtrOutput() MaxPodsConstraintPtrOutput
	ToMaxPodsConstraintPtrOutputWithContext(context.Context) MaxPodsConstraintPtrOutput
}

type maxPodsConstraintPtrType MaxPodsConstraintArgs

func MaxPodsConstraintPtr(v *MaxPodsConstraintArgs) MaxPodsConstraintPtrInput {
	return (*maxPodsConstraintPtrType)(v)
}

func (*maxPodsConstraintPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MaxPodsConstraint)(nil)).Elem()
}

func (i *maxPodsConstraintPtrType) ToMaxPodsConstraintPtrOutput() MaxPodsConstraintPtrOutput {
	return i.ToMaxPodsConstraintPtrOutputWithContext(context.Background())
}

func (i *maxPodsConstraintPtrType) ToMaxPodsConstraintPtrOutputWithContext(ctx context.Context) MaxPodsConstraintPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaxPodsConstraintPtrOutput)
}

// Constraints applied to pods.
type MaxPodsConstraintOutput struct{ *pulumi.OutputState }

func (MaxPodsConstraintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaxPodsConstraint)(nil)).Elem()
}

func (o MaxPodsConstraintOutput) ToMaxPodsConstraintOutput() MaxPodsConstraintOutput {
	return o
}

func (o MaxPodsConstraintOutput) ToMaxPodsConstraintOutputWithContext(ctx context.Context) MaxPodsConstraintOutput {
	return o
}

func (o MaxPodsConstraintOutput) ToMaxPodsConstraintPtrOutput() MaxPodsConstraintPtrOutput {
	return o.ToMaxPodsConstraintPtrOutputWithContext(context.Background())
}

func (o MaxPodsConstraintOutput) ToMaxPodsConstraintPtrOutputWithContext(ctx context.Context) MaxPodsConstraintPtrOutput {
	return o.ApplyT(func(v MaxPodsConstraint) *MaxPodsConstraint {
		return &v
	}).(MaxPodsConstraintPtrOutput)
}

// Constraint enforced on the max num of pods per node.
func (o MaxPodsConstraintOutput) MaxPodsPerNode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaxPodsConstraint) *string { return v.MaxPodsPerNode }).(pulumi.StringPtrOutput)
}

type MaxPodsConstraintPtrOutput struct{ *pulumi.OutputState }

func (MaxPodsConstraintPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MaxPodsConstraint)(nil)).Elem()
}

func (o MaxPodsConstraintPtrOutput) ToMaxPodsConstraintPtrOutput() MaxPodsConstraintPtrOutput {
	return o
}

func (o MaxPodsConstraintPtrOutput) ToMaxPodsConstraintPtrOutputWithContext(ctx context.Context) MaxPodsConstraintPtrOutput {
	return o
}

func (o MaxPodsConstraintPtrOutput) Elem() MaxPodsConstraintOutput {
	return o.ApplyT(func(v *MaxPodsConstraint) MaxPodsConstraint { return *v }).(MaxPodsConstraintOutput)
}

// Constraint enforced on the max num of pods per node.
func (o MaxPodsConstraintPtrOutput) MaxPodsPerNode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaxPodsConstraint) *string {
		if v == nil {
			return nil
		}
		return v.MaxPodsPerNode
	}).(pulumi.StringPtrOutput)
}

// NetworkConfig reports the relative names of network & subnetwork.
type NetworkConfig struct {
	// Whether the cluster disables default in-node sNAT rules. In-node sNAT rules will be disabled when default_snat_status is disabled. When disabled is set to false, default IP masquerade rules will be applied to the nodes to prevent sNAT on cluster internal traffic.
	DefaultSnatStatus *DefaultSnatStatus `pulumi:"defaultSnatStatus"`
	// Whether Intra-node visibility is enabled for this cluster. This makes same node pod to pod traffic visible for VPC network.
	EnableIntraNodeVisibility *bool `pulumi:"enableIntraNodeVisibility"`
	// Output only. The relative name of the Google Compute Engine network(https://cloud.google.com/compute/docs/networks-and-firewalls#networks) to which the cluster is connected. Example: projects/my-project/global/networks/my-network
	Network *string `pulumi:"network"`
	// The desired state of IPv6 connectivity to Google Services. By default, no private IPv6 access to or from Google Services (all access will be via IPv4)
	PrivateIpv6GoogleAccess *string `pulumi:"privateIpv6GoogleAccess"`
	// Output only. The relative name of the Google Compute Engine [subnetwork](https://cloud.google.com/compute/docs/vpc) to which the cluster is connected. Example: projects/my-project/regions/us-central1/subnetworks/my-subnet
	Subnetwork *string `pulumi:"subnetwork"`
}

// NetworkConfigInput is an input type that accepts NetworkConfigArgs and NetworkConfigOutput values.
// You can construct a concrete instance of `NetworkConfigInput` via:
//
//          NetworkConfigArgs{...}
type NetworkConfigInput interface {
	pulumi.Input

	ToNetworkConfigOutput() NetworkConfigOutput
	ToNetworkConfigOutputWithContext(context.Context) NetworkConfigOutput
}

// NetworkConfig reports the relative names of network & subnetwork.
type NetworkConfigArgs struct {
	// Whether the cluster disables default in-node sNAT rules. In-node sNAT rules will be disabled when default_snat_status is disabled. When disabled is set to false, default IP masquerade rules will be applied to the nodes to prevent sNAT on cluster internal traffic.
	DefaultSnatStatus DefaultSnatStatusPtrInput `pulumi:"defaultSnatStatus"`
	// Whether Intra-node visibility is enabled for this cluster. This makes same node pod to pod traffic visible for VPC network.
	EnableIntraNodeVisibility pulumi.BoolPtrInput `pulumi:"enableIntraNodeVisibility"`
	// Output only. The relative name of the Google Compute Engine network(https://cloud.google.com/compute/docs/networks-and-firewalls#networks) to which the cluster is connected. Example: projects/my-project/global/networks/my-network
	Network pulumi.StringPtrInput `pulumi:"network"`
	// The desired state of IPv6 connectivity to Google Services. By default, no private IPv6 access to or from Google Services (all access will be via IPv4)
	PrivateIpv6GoogleAccess pulumi.StringPtrInput `pulumi:"privateIpv6GoogleAccess"`
	// Output only. The relative name of the Google Compute Engine [subnetwork](https://cloud.google.com/compute/docs/vpc) to which the cluster is connected. Example: projects/my-project/regions/us-central1/subnetworks/my-subnet
	Subnetwork pulumi.StringPtrInput `pulumi:"subnetwork"`
}

func (NetworkConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkConfig)(nil)).Elem()
}

func (i NetworkConfigArgs) ToNetworkConfigOutput() NetworkConfigOutput {
	return i.ToNetworkConfigOutputWithContext(context.Background())
}

func (i NetworkConfigArgs) ToNetworkConfigOutputWithContext(ctx context.Context) NetworkConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConfigOutput)
}

func (i NetworkConfigArgs) ToNetworkConfigPtrOutput() NetworkConfigPtrOutput {
	return i.ToNetworkConfigPtrOutputWithContext(context.Background())
}

func (i NetworkConfigArgs) ToNetworkConfigPtrOutputWithContext(ctx context.Context) NetworkConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConfigOutput).ToNetworkConfigPtrOutputWithContext(ctx)
}

// NetworkConfigPtrInput is an input type that accepts NetworkConfigArgs, NetworkConfigPtr and NetworkConfigPtrOutput values.
// You can construct a concrete instance of `NetworkConfigPtrInput` via:
//
//          NetworkConfigArgs{...}
//
//  or:
//
//          nil
type NetworkConfigPtrInput interface {
	pulumi.Input

	ToNetworkConfigPtrOutput() NetworkConfigPtrOutput
	ToNetworkConfigPtrOutputWithContext(context.Context) NetworkConfigPtrOutput
}

type networkConfigPtrType NetworkConfigArgs

func NetworkConfigPtr(v *NetworkConfigArgs) NetworkConfigPtrInput {
	return (*networkConfigPtrType)(v)
}

func (*networkConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkConfig)(nil)).Elem()
}

func (i *networkConfigPtrType) ToNetworkConfigPtrOutput() NetworkConfigPtrOutput {
	return i.ToNetworkConfigPtrOutputWithContext(context.Background())
}

func (i *networkConfigPtrType) ToNetworkConfigPtrOutputWithContext(ctx context.Context) NetworkConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConfigPtrOutput)
}

// NetworkConfig reports the relative names of network & subnetwork.
type NetworkConfigOutput struct{ *pulumi.OutputState }

func (NetworkConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkConfig)(nil)).Elem()
}

func (o NetworkConfigOutput) ToNetworkConfigOutput() NetworkConfigOutput {
	return o
}

func (o NetworkConfigOutput) ToNetworkConfigOutputWithContext(ctx context.Context) NetworkConfigOutput {
	return o
}

func (o NetworkConfigOutput) ToNetworkConfigPtrOutput() NetworkConfigPtrOutput {
	return o.ToNetworkConfigPtrOutputWithContext(context.Background())
}

func (o NetworkConfigOutput) ToNetworkConfigPtrOutputWithContext(ctx context.Context) NetworkConfigPtrOutput {
	return o.ApplyT(func(v NetworkConfig) *NetworkConfig {
		return &v
	}).(NetworkConfigPtrOutput)
}

// Whether the cluster disables default in-node sNAT rules. In-node sNAT rules will be disabled when default_snat_status is disabled. When disabled is set to false, default IP masquerade rules will be applied to the nodes to prevent sNAT on cluster internal traffic.
func (o NetworkConfigOutput) DefaultSnatStatus() DefaultSnatStatusPtrOutput {
	return o.ApplyT(func(v NetworkConfig) *DefaultSnatStatus { return v.DefaultSnatStatus }).(DefaultSnatStatusPtrOutput)
}

// Whether Intra-node visibility is enabled for this cluster. This makes same node pod to pod traffic visible for VPC network.
func (o NetworkConfigOutput) EnableIntraNodeVisibility() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworkConfig) *bool { return v.EnableIntraNodeVisibility }).(pulumi.BoolPtrOutput)
}

// Output only. The relative name of the Google Compute Engine network(https://cloud.google.com/compute/docs/networks-and-firewalls#networks) to which the cluster is connected. Example: projects/my-project/global/networks/my-network
func (o NetworkConfigOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkConfig) *string { return v.Network }).(pulumi.StringPtrOutput)
}

// The desired state of IPv6 connectivity to Google Services. By default, no private IPv6 access to or from Google Services (all access will be via IPv4)
func (o NetworkConfigOutput) PrivateIpv6GoogleAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkConfig) *string { return v.PrivateIpv6GoogleAccess }).(pulumi.StringPtrOutput)
}

// Output only. The relative name of the Google Compute Engine [subnetwork](https://cloud.google.com/compute/docs/vpc) to which the cluster is connected. Example: projects/my-project/regions/us-central1/subnetworks/my-subnet
func (o NetworkConfigOutput) Subnetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkConfig) *string { return v.Subnetwork }).(pulumi.StringPtrOutput)
}

type NetworkConfigPtrOutput struct{ *pulumi.OutputState }

func (NetworkConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkConfig)(nil)).Elem()
}

func (o NetworkConfigPtrOutput) ToNetworkConfigPtrOutput() NetworkConfigPtrOutput {
	return o
}

func (o NetworkConfigPtrOutput) ToNetworkConfigPtrOutputWithContext(ctx context.Context) NetworkConfigPtrOutput {
	return o
}

func (o NetworkConfigPtrOutput) Elem() NetworkConfigOutput {
	return o.ApplyT(func(v *NetworkConfig) NetworkConfig { return *v }).(NetworkConfigOutput)
}

// Whether the cluster disables default in-node sNAT rules. In-node sNAT rules will be disabled when default_snat_status is disabled. When disabled is set to false, default IP masquerade rules will be applied to the nodes to prevent sNAT on cluster internal traffic.
func (o NetworkConfigPtrOutput) DefaultSnatStatus() DefaultSnatStatusPtrOutput {
	return o.ApplyT(func(v *NetworkConfig) *DefaultSnatStatus {
		if v == nil {
			return nil
		}
		return v.DefaultSnatStatus
	}).(DefaultSnatStatusPtrOutput)
}

// Whether Intra-node visibility is enabled for this cluster. This makes same node pod to pod traffic visible for VPC network.
func (o NetworkConfigPtrOutput) EnableIntraNodeVisibility() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworkConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableIntraNodeVisibility
	}).(pulumi.BoolPtrOutput)
}

// Output only. The relative name of the Google Compute Engine network(https://cloud.google.com/compute/docs/networks-and-firewalls#networks) to which the cluster is connected. Example: projects/my-project/global/networks/my-network
func (o NetworkConfigPtrOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkConfig) *string {
		if v == nil {
			return nil
		}
		return v.Network
	}).(pulumi.StringPtrOutput)
}

// The desired state of IPv6 connectivity to Google Services. By default, no private IPv6 access to or from Google Services (all access will be via IPv4)
func (o NetworkConfigPtrOutput) PrivateIpv6GoogleAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkConfig) *string {
		if v == nil {
			return nil
		}
		return v.PrivateIpv6GoogleAccess
	}).(pulumi.StringPtrOutput)
}

// Output only. The relative name of the Google Compute Engine [subnetwork](https://cloud.google.com/compute/docs/vpc) to which the cluster is connected. Example: projects/my-project/regions/us-central1/subnetworks/my-subnet
func (o NetworkConfigPtrOutput) Subnetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkConfig) *string {
		if v == nil {
			return nil
		}
		return v.Subnetwork
	}).(pulumi.StringPtrOutput)
}

// Configuration options for the NetworkPolicy feature. https://kubernetes.io/docs/concepts/services-networking/networkpolicies/
type NetworkPolicy struct {
	// Whether network policy is enabled on the cluster.
	Enabled *bool `pulumi:"enabled"`
	// The selected network policy provider.
	Provider *string `pulumi:"provider"`
}

// NetworkPolicyInput is an input type that accepts NetworkPolicyArgs and NetworkPolicyOutput values.
// You can construct a concrete instance of `NetworkPolicyInput` via:
//
//          NetworkPolicyArgs{...}
type NetworkPolicyInput interface {
	pulumi.Input

	ToNetworkPolicyOutput() NetworkPolicyOutput
	ToNetworkPolicyOutputWithContext(context.Context) NetworkPolicyOutput
}

// Configuration options for the NetworkPolicy feature. https://kubernetes.io/docs/concepts/services-networking/networkpolicies/
type NetworkPolicyArgs struct {
	// Whether network policy is enabled on the cluster.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The selected network policy provider.
	Provider pulumi.StringPtrInput `pulumi:"provider"`
}

func (NetworkPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicy)(nil)).Elem()
}

func (i NetworkPolicyArgs) ToNetworkPolicyOutput() NetworkPolicyOutput {
	return i.ToNetworkPolicyOutputWithContext(context.Background())
}

func (i NetworkPolicyArgs) ToNetworkPolicyOutputWithContext(ctx context.Context) NetworkPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicyOutput)
}

func (i NetworkPolicyArgs) ToNetworkPolicyPtrOutput() NetworkPolicyPtrOutput {
	return i.ToNetworkPolicyPtrOutputWithContext(context.Background())
}

func (i NetworkPolicyArgs) ToNetworkPolicyPtrOutputWithContext(ctx context.Context) NetworkPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicyOutput).ToNetworkPolicyPtrOutputWithContext(ctx)
}

// NetworkPolicyPtrInput is an input type that accepts NetworkPolicyArgs, NetworkPolicyPtr and NetworkPolicyPtrOutput values.
// You can construct a concrete instance of `NetworkPolicyPtrInput` via:
//
//          NetworkPolicyArgs{...}
//
//  or:
//
//          nil
type NetworkPolicyPtrInput interface {
	pulumi.Input

	ToNetworkPolicyPtrOutput() NetworkPolicyPtrOutput
	ToNetworkPolicyPtrOutputWithContext(context.Context) NetworkPolicyPtrOutput
}

type networkPolicyPtrType NetworkPolicyArgs

func NetworkPolicyPtr(v *NetworkPolicyArgs) NetworkPolicyPtrInput {
	return (*networkPolicyPtrType)(v)
}

func (*networkPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkPolicy)(nil)).Elem()
}

func (i *networkPolicyPtrType) ToNetworkPolicyPtrOutput() NetworkPolicyPtrOutput {
	return i.ToNetworkPolicyPtrOutputWithContext(context.Background())
}

func (i *networkPolicyPtrType) ToNetworkPolicyPtrOutputWithContext(ctx context.Context) NetworkPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicyPtrOutput)
}

// Configuration options for the NetworkPolicy feature. https://kubernetes.io/docs/concepts/services-networking/networkpolicies/
type NetworkPolicyOutput struct{ *pulumi.OutputState }

func (NetworkPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicy)(nil)).Elem()
}

func (o NetworkPolicyOutput) ToNetworkPolicyOutput() NetworkPolicyOutput {
	return o
}

func (o NetworkPolicyOutput) ToNetworkPolicyOutputWithContext(ctx context.Context) NetworkPolicyOutput {
	return o
}

func (o NetworkPolicyOutput) ToNetworkPolicyPtrOutput() NetworkPolicyPtrOutput {
	return o.ToNetworkPolicyPtrOutputWithContext(context.Background())
}

func (o NetworkPolicyOutput) ToNetworkPolicyPtrOutputWithContext(ctx context.Context) NetworkPolicyPtrOutput {
	return o.ApplyT(func(v NetworkPolicy) *NetworkPolicy {
		return &v
	}).(NetworkPolicyPtrOutput)
}

// Whether network policy is enabled on the cluster.
func (o NetworkPolicyOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworkPolicy) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The selected network policy provider.
func (o NetworkPolicyOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkPolicy) *string { return v.Provider }).(pulumi.StringPtrOutput)
}

type NetworkPolicyPtrOutput struct{ *pulumi.OutputState }

func (NetworkPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkPolicy)(nil)).Elem()
}

func (o NetworkPolicyPtrOutput) ToNetworkPolicyPtrOutput() NetworkPolicyPtrOutput {
	return o
}

func (o NetworkPolicyPtrOutput) ToNetworkPolicyPtrOutputWithContext(ctx context.Context) NetworkPolicyPtrOutput {
	return o
}

func (o NetworkPolicyPtrOutput) Elem() NetworkPolicyOutput {
	return o.ApplyT(func(v *NetworkPolicy) NetworkPolicy { return *v }).(NetworkPolicyOutput)
}

// Whether network policy is enabled on the cluster.
func (o NetworkPolicyPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworkPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The selected network policy provider.
func (o NetworkPolicyPtrOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkPolicy) *string {
		if v == nil {
			return nil
		}
		return v.Provider
	}).(pulumi.StringPtrOutput)
}

// Configuration for NetworkPolicy. This only tracks whether the addon is enabled or not on the Master, it does not track whether network policy is enabled for the nodes.
type NetworkPolicyConfig struct {
	// Whether NetworkPolicy is enabled for this cluster.
	Disabled *bool `pulumi:"disabled"`
}

// NetworkPolicyConfigInput is an input type that accepts NetworkPolicyConfigArgs and NetworkPolicyConfigOutput values.
// You can construct a concrete instance of `NetworkPolicyConfigInput` via:
//
//          NetworkPolicyConfigArgs{...}
type NetworkPolicyConfigInput interface {
	pulumi.Input

	ToNetworkPolicyConfigOutput() NetworkPolicyConfigOutput
	ToNetworkPolicyConfigOutputWithContext(context.Context) NetworkPolicyConfigOutput
}

// Configuration for NetworkPolicy. This only tracks whether the addon is enabled or not on the Master, it does not track whether network policy is enabled for the nodes.
type NetworkPolicyConfigArgs struct {
	// Whether NetworkPolicy is enabled for this cluster.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
}

func (NetworkPolicyConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicyConfig)(nil)).Elem()
}

func (i NetworkPolicyConfigArgs) ToNetworkPolicyConfigOutput() NetworkPolicyConfigOutput {
	return i.ToNetworkPolicyConfigOutputWithContext(context.Background())
}

func (i NetworkPolicyConfigArgs) ToNetworkPolicyConfigOutputWithContext(ctx context.Context) NetworkPolicyConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicyConfigOutput)
}

func (i NetworkPolicyConfigArgs) ToNetworkPolicyConfigPtrOutput() NetworkPolicyConfigPtrOutput {
	return i.ToNetworkPolicyConfigPtrOutputWithContext(context.Background())
}

func (i NetworkPolicyConfigArgs) ToNetworkPolicyConfigPtrOutputWithContext(ctx context.Context) NetworkPolicyConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicyConfigOutput).ToNetworkPolicyConfigPtrOutputWithContext(ctx)
}

// NetworkPolicyConfigPtrInput is an input type that accepts NetworkPolicyConfigArgs, NetworkPolicyConfigPtr and NetworkPolicyConfigPtrOutput values.
// You can construct a concrete instance of `NetworkPolicyConfigPtrInput` via:
//
//          NetworkPolicyConfigArgs{...}
//
//  or:
//
//          nil
type NetworkPolicyConfigPtrInput interface {
	pulumi.Input

	ToNetworkPolicyConfigPtrOutput() NetworkPolicyConfigPtrOutput
	ToNetworkPolicyConfigPtrOutputWithContext(context.Context) NetworkPolicyConfigPtrOutput
}

type networkPolicyConfigPtrType NetworkPolicyConfigArgs

func NetworkPolicyConfigPtr(v *NetworkPolicyConfigArgs) NetworkPolicyConfigPtrInput {
	return (*networkPolicyConfigPtrType)(v)
}

func (*networkPolicyConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkPolicyConfig)(nil)).Elem()
}

func (i *networkPolicyConfigPtrType) ToNetworkPolicyConfigPtrOutput() NetworkPolicyConfigPtrOutput {
	return i.ToNetworkPolicyConfigPtrOutputWithContext(context.Background())
}

func (i *networkPolicyConfigPtrType) ToNetworkPolicyConfigPtrOutputWithContext(ctx context.Context) NetworkPolicyConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicyConfigPtrOutput)
}

// Configuration for NetworkPolicy. This only tracks whether the addon is enabled or not on the Master, it does not track whether network policy is enabled for the nodes.
type NetworkPolicyConfigOutput struct{ *pulumi.OutputState }

func (NetworkPolicyConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicyConfig)(nil)).Elem()
}

func (o NetworkPolicyConfigOutput) ToNetworkPolicyConfigOutput() NetworkPolicyConfigOutput {
	return o
}

func (o NetworkPolicyConfigOutput) ToNetworkPolicyConfigOutputWithContext(ctx context.Context) NetworkPolicyConfigOutput {
	return o
}

func (o NetworkPolicyConfigOutput) ToNetworkPolicyConfigPtrOutput() NetworkPolicyConfigPtrOutput {
	return o.ToNetworkPolicyConfigPtrOutputWithContext(context.Background())
}

func (o NetworkPolicyConfigOutput) ToNetworkPolicyConfigPtrOutputWithContext(ctx context.Context) NetworkPolicyConfigPtrOutput {
	return o.ApplyT(func(v NetworkPolicyConfig) *NetworkPolicyConfig {
		return &v
	}).(NetworkPolicyConfigPtrOutput)
}

// Whether NetworkPolicy is enabled for this cluster.
func (o NetworkPolicyConfigOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworkPolicyConfig) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

type NetworkPolicyConfigPtrOutput struct{ *pulumi.OutputState }

func (NetworkPolicyConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkPolicyConfig)(nil)).Elem()
}

func (o NetworkPolicyConfigPtrOutput) ToNetworkPolicyConfigPtrOutput() NetworkPolicyConfigPtrOutput {
	return o
}

func (o NetworkPolicyConfigPtrOutput) ToNetworkPolicyConfigPtrOutputWithContext(ctx context.Context) NetworkPolicyConfigPtrOutput {
	return o
}

func (o NetworkPolicyConfigPtrOutput) Elem() NetworkPolicyConfigOutput {
	return o.ApplyT(func(v *NetworkPolicyConfig) NetworkPolicyConfig { return *v }).(NetworkPolicyConfigOutput)
}

// Whether NetworkPolicy is enabled for this cluster.
func (o NetworkPolicyConfigPtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworkPolicyConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// Parameters that describe the nodes in a cluster.
type NodeConfig struct {
	// A list of hardware accelerators to be attached to each node. See https://cloud.google.com/compute/docs/gpus for more information about support for GPUs.
	Accelerators []AcceleratorConfig `pulumi:"accelerators"`
	//  The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption
	BootDiskKmsKey *string `pulumi:"bootDiskKmsKey"`
	// Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the default disk size is 100GB.
	DiskSizeGb *int `pulumi:"diskSizeGb"`
	// Type of the disk attached to each node (e.g. 'pd-standard', 'pd-ssd' or 'pd-balanced') If unspecified, the default disk type is 'pd-standard'
	DiskType *string `pulumi:"diskType"`
	// The image type to use for this node. Note that for a given image type, the latest version of it will be used.
	ImageType *string `pulumi:"imageType"`
	// Node kubelet configs.
	KubeletConfig *NodeKubeletConfig `pulumi:"kubeletConfig"`
	// The map of Kubernetes labels (key/value pairs) to be applied to each node. These will added in addition to any default label(s) that Kubernetes may apply to the node. In case of conflict in label keys, the applied set may differ depending on the Kubernetes version -- it's best to assume the behavior is undefined and conflicts should be avoided. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
	Labels map[string]string `pulumi:"labels"`
	// Parameters that can be configured on Linux nodes.
	LinuxNodeConfig *LinuxNodeConfig `pulumi:"linuxNodeConfig"`
	// The number of local SSD disks to be attached to the node. The limit for this value is dependent upon the maximum number of disks available on a machine per zone. See: https://cloud.google.com/compute/docs/disks/local-ssd for more information.
	LocalSsdCount *int `pulumi:"localSsdCount"`
	// The name of a Google Compute Engine [machine type](https://cloud.google.com/compute/docs/machine-types) If unspecified, the default machine type is `e2-medium`.
	MachineType *string `pulumi:"machineType"`
	// The metadata key/value pairs assigned to instances in the cluster. Keys must conform to the regexp `[a-zA-Z0-9-_]+` and be less than 128 bytes in length. These are reflected as part of a URL in the metadata server. Additionally, to avoid ambiguity, keys must not conflict with any other metadata keys for the project or be one of the reserved keys: - "cluster-location" - "cluster-name" - "cluster-uid" - "configure-sh" - "containerd-configure-sh" - "enable-os-login" - "gci-ensure-gke-docker" - "gci-metrics-enabled" - "gci-update-strategy" - "instance-template" - "kube-env" - "startup-script" - "user-data" - "disable-address-manager" - "windows-startup-script-ps1" - "common-psm1" - "k8s-node-setup-psm1" - "install-ssh-psm1" - "user-profile-psm1" The following keys are reserved for Windows nodes: - "serial-port-logging-enable" Values are free-form strings, and only have meaning as interpreted by the image running in the instance. The only restriction placed on them is that each value's size must be less than or equal to 32 KB. The total size of all keys and values must be less than 512 KB.
	Metadata map[string]string `pulumi:"metadata"`
	// Minimum CPU platform to be used by this instance. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as `minCpuPlatform: "Intel Haswell"` or `minCpuPlatform: "Intel Sandy Bridge"`. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform)
	MinCpuPlatform *string `pulumi:"minCpuPlatform"`
	// Setting this field will assign instances of this pool to run on the specified node group. This is useful for running workloads on [sole tenant nodes](https://cloud.google.com/compute/docs/nodes/sole-tenant-nodes).
	NodeGroup *string `pulumi:"nodeGroup"`
	// The set of Google API scopes to be made available on all of the node VMs under the "default" service account. The following scopes are recommended, but not required, and by default are not included: * `https://www.googleapis.com/auth/compute` is required for mounting persistent storage on your nodes. * `https://www.googleapis.com/auth/devstorage.read_only` is required for communicating with **gcr.io** (the [Google Container Registry](https://cloud.google.com/container-registry/)). If unspecified, no scopes are added, unless Cloud Logging or Cloud Monitoring are enabled, in which case their required scopes will be added.
	OauthScopes []string `pulumi:"oauthScopes"`
	// Whether the nodes are created as preemptible VM instances. See: https://cloud.google.com/compute/docs/instances/preemptible for more information about preemptible VM instances.
	Preemptible *bool `pulumi:"preemptible"`
	// The optional reservation affinity. Setting this field will apply the specified [Zonal Compute Reservation](https://cloud.google.com/compute/docs/instances/reserving-zonal-resources) to this node pool.
	ReservationAffinity *ReservationAffinity `pulumi:"reservationAffinity"`
	// Sandbox configuration for this node.
	SandboxConfig *SandboxConfig `pulumi:"sandboxConfig"`
	// The Google Cloud Platform Service Account to be used by the node VMs. Specify the email address of the Service Account; otherwise, if no Service Account is specified, the "default" service account is used.
	ServiceAccount *string `pulumi:"serviceAccount"`
	// Shielded Instance options.
	ShieldedInstanceConfig *ShieldedInstanceConfig `pulumi:"shieldedInstanceConfig"`
	// The list of instance tags applied to all nodes. Tags are used to identify valid sources or targets for network firewalls and are specified by the client during cluster or node pool creation. Each tag within the list must comply with RFC1035.
	Tags []string `pulumi:"tags"`
	// List of kubernetes taints to be applied to each node. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
	Taints []NodeTaint `pulumi:"taints"`
	// The workload metadata configuration for this node.
	WorkloadMetadataConfig *WorkloadMetadataConfig `pulumi:"workloadMetadataConfig"`
}

// NodeConfigInput is an input type that accepts NodeConfigArgs and NodeConfigOutput values.
// You can construct a concrete instance of `NodeConfigInput` via:
//
//          NodeConfigArgs{...}
type NodeConfigInput interface {
	pulumi.Input

	ToNodeConfigOutput() NodeConfigOutput
	ToNodeConfigOutputWithContext(context.Context) NodeConfigOutput
}

// Parameters that describe the nodes in a cluster.
type NodeConfigArgs struct {
	// A list of hardware accelerators to be attached to each node. See https://cloud.google.com/compute/docs/gpus for more information about support for GPUs.
	Accelerators AcceleratorConfigArrayInput `pulumi:"accelerators"`
	//  The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption
	BootDiskKmsKey pulumi.StringPtrInput `pulumi:"bootDiskKmsKey"`
	// Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the default disk size is 100GB.
	DiskSizeGb pulumi.IntPtrInput `pulumi:"diskSizeGb"`
	// Type of the disk attached to each node (e.g. 'pd-standard', 'pd-ssd' or 'pd-balanced') If unspecified, the default disk type is 'pd-standard'
	DiskType pulumi.StringPtrInput `pulumi:"diskType"`
	// The image type to use for this node. Note that for a given image type, the latest version of it will be used.
	ImageType pulumi.StringPtrInput `pulumi:"imageType"`
	// Node kubelet configs.
	KubeletConfig NodeKubeletConfigPtrInput `pulumi:"kubeletConfig"`
	// The map of Kubernetes labels (key/value pairs) to be applied to each node. These will added in addition to any default label(s) that Kubernetes may apply to the node. In case of conflict in label keys, the applied set may differ depending on the Kubernetes version -- it's best to assume the behavior is undefined and conflicts should be avoided. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// Parameters that can be configured on Linux nodes.
	LinuxNodeConfig LinuxNodeConfigPtrInput `pulumi:"linuxNodeConfig"`
	// The number of local SSD disks to be attached to the node. The limit for this value is dependent upon the maximum number of disks available on a machine per zone. See: https://cloud.google.com/compute/docs/disks/local-ssd for more information.
	LocalSsdCount pulumi.IntPtrInput `pulumi:"localSsdCount"`
	// The name of a Google Compute Engine [machine type](https://cloud.google.com/compute/docs/machine-types) If unspecified, the default machine type is `e2-medium`.
	MachineType pulumi.StringPtrInput `pulumi:"machineType"`
	// The metadata key/value pairs assigned to instances in the cluster. Keys must conform to the regexp `[a-zA-Z0-9-_]+` and be less than 128 bytes in length. These are reflected as part of a URL in the metadata server. Additionally, to avoid ambiguity, keys must not conflict with any other metadata keys for the project or be one of the reserved keys: - "cluster-location" - "cluster-name" - "cluster-uid" - "configure-sh" - "containerd-configure-sh" - "enable-os-login" - "gci-ensure-gke-docker" - "gci-metrics-enabled" - "gci-update-strategy" - "instance-template" - "kube-env" - "startup-script" - "user-data" - "disable-address-manager" - "windows-startup-script-ps1" - "common-psm1" - "k8s-node-setup-psm1" - "install-ssh-psm1" - "user-profile-psm1" The following keys are reserved for Windows nodes: - "serial-port-logging-enable" Values are free-form strings, and only have meaning as interpreted by the image running in the instance. The only restriction placed on them is that each value's size must be less than or equal to 32 KB. The total size of all keys and values must be less than 512 KB.
	Metadata pulumi.StringMapInput `pulumi:"metadata"`
	// Minimum CPU platform to be used by this instance. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as `minCpuPlatform: "Intel Haswell"` or `minCpuPlatform: "Intel Sandy Bridge"`. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform)
	MinCpuPlatform pulumi.StringPtrInput `pulumi:"minCpuPlatform"`
	// Setting this field will assign instances of this pool to run on the specified node group. This is useful for running workloads on [sole tenant nodes](https://cloud.google.com/compute/docs/nodes/sole-tenant-nodes).
	NodeGroup pulumi.StringPtrInput `pulumi:"nodeGroup"`
	// The set of Google API scopes to be made available on all of the node VMs under the "default" service account. The following scopes are recommended, but not required, and by default are not included: * `https://www.googleapis.com/auth/compute` is required for mounting persistent storage on your nodes. * `https://www.googleapis.com/auth/devstorage.read_only` is required for communicating with **gcr.io** (the [Google Container Registry](https://cloud.google.com/container-registry/)). If unspecified, no scopes are added, unless Cloud Logging or Cloud Monitoring are enabled, in which case their required scopes will be added.
	OauthScopes pulumi.StringArrayInput `pulumi:"oauthScopes"`
	// Whether the nodes are created as preemptible VM instances. See: https://cloud.google.com/compute/docs/instances/preemptible for more information about preemptible VM instances.
	Preemptible pulumi.BoolPtrInput `pulumi:"preemptible"`
	// The optional reservation affinity. Setting this field will apply the specified [Zonal Compute Reservation](https://cloud.google.com/compute/docs/instances/reserving-zonal-resources) to this node pool.
	ReservationAffinity ReservationAffinityPtrInput `pulumi:"reservationAffinity"`
	// Sandbox configuration for this node.
	SandboxConfig SandboxConfigPtrInput `pulumi:"sandboxConfig"`
	// The Google Cloud Platform Service Account to be used by the node VMs. Specify the email address of the Service Account; otherwise, if no Service Account is specified, the "default" service account is used.
	ServiceAccount pulumi.StringPtrInput `pulumi:"serviceAccount"`
	// Shielded Instance options.
	ShieldedInstanceConfig ShieldedInstanceConfigPtrInput `pulumi:"shieldedInstanceConfig"`
	// The list of instance tags applied to all nodes. Tags are used to identify valid sources or targets for network firewalls and are specified by the client during cluster or node pool creation. Each tag within the list must comply with RFC1035.
	Tags pulumi.StringArrayInput `pulumi:"tags"`
	// List of kubernetes taints to be applied to each node. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
	Taints NodeTaintArrayInput `pulumi:"taints"`
	// The workload metadata configuration for this node.
	WorkloadMetadataConfig WorkloadMetadataConfigPtrInput `pulumi:"workloadMetadataConfig"`
}

func (NodeConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeConfig)(nil)).Elem()
}

func (i NodeConfigArgs) ToNodeConfigOutput() NodeConfigOutput {
	return i.ToNodeConfigOutputWithContext(context.Background())
}

func (i NodeConfigArgs) ToNodeConfigOutputWithContext(ctx context.Context) NodeConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeConfigOutput)
}

func (i NodeConfigArgs) ToNodeConfigPtrOutput() NodeConfigPtrOutput {
	return i.ToNodeConfigPtrOutputWithContext(context.Background())
}

func (i NodeConfigArgs) ToNodeConfigPtrOutputWithContext(ctx context.Context) NodeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeConfigOutput).ToNodeConfigPtrOutputWithContext(ctx)
}

// NodeConfigPtrInput is an input type that accepts NodeConfigArgs, NodeConfigPtr and NodeConfigPtrOutput values.
// You can construct a concrete instance of `NodeConfigPtrInput` via:
//
//          NodeConfigArgs{...}
//
//  or:
//
//          nil
type NodeConfigPtrInput interface {
	pulumi.Input

	ToNodeConfigPtrOutput() NodeConfigPtrOutput
	ToNodeConfigPtrOutputWithContext(context.Context) NodeConfigPtrOutput
}

type nodeConfigPtrType NodeConfigArgs

func NodeConfigPtr(v *NodeConfigArgs) NodeConfigPtrInput {
	return (*nodeConfigPtrType)(v)
}

func (*nodeConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeConfig)(nil)).Elem()
}

func (i *nodeConfigPtrType) ToNodeConfigPtrOutput() NodeConfigPtrOutput {
	return i.ToNodeConfigPtrOutputWithContext(context.Background())
}

func (i *nodeConfigPtrType) ToNodeConfigPtrOutputWithContext(ctx context.Context) NodeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeConfigPtrOutput)
}

// Parameters that describe the nodes in a cluster.
type NodeConfigOutput struct{ *pulumi.OutputState }

func (NodeConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeConfig)(nil)).Elem()
}

func (o NodeConfigOutput) ToNodeConfigOutput() NodeConfigOutput {
	return o
}

func (o NodeConfigOutput) ToNodeConfigOutputWithContext(ctx context.Context) NodeConfigOutput {
	return o
}

func (o NodeConfigOutput) ToNodeConfigPtrOutput() NodeConfigPtrOutput {
	return o.ToNodeConfigPtrOutputWithContext(context.Background())
}

func (o NodeConfigOutput) ToNodeConfigPtrOutputWithContext(ctx context.Context) NodeConfigPtrOutput {
	return o.ApplyT(func(v NodeConfig) *NodeConfig {
		return &v
	}).(NodeConfigPtrOutput)
}

// A list of hardware accelerators to be attached to each node. See https://cloud.google.com/compute/docs/gpus for more information about support for GPUs.
func (o NodeConfigOutput) Accelerators() AcceleratorConfigArrayOutput {
	return o.ApplyT(func(v NodeConfig) []AcceleratorConfig { return v.Accelerators }).(AcceleratorConfigArrayOutput)
}

//  The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption
func (o NodeConfigOutput) BootDiskKmsKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeConfig) *string { return v.BootDiskKmsKey }).(pulumi.StringPtrOutput)
}

// Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the default disk size is 100GB.
func (o NodeConfigOutput) DiskSizeGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodeConfig) *int { return v.DiskSizeGb }).(pulumi.IntPtrOutput)
}

// Type of the disk attached to each node (e.g. 'pd-standard', 'pd-ssd' or 'pd-balanced') If unspecified, the default disk type is 'pd-standard'
func (o NodeConfigOutput) DiskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeConfig) *string { return v.DiskType }).(pulumi.StringPtrOutput)
}

// The image type to use for this node. Note that for a given image type, the latest version of it will be used.
func (o NodeConfigOutput) ImageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeConfig) *string { return v.ImageType }).(pulumi.StringPtrOutput)
}

// Node kubelet configs.
func (o NodeConfigOutput) KubeletConfig() NodeKubeletConfigPtrOutput {
	return o.ApplyT(func(v NodeConfig) *NodeKubeletConfig { return v.KubeletConfig }).(NodeKubeletConfigPtrOutput)
}

// The map of Kubernetes labels (key/value pairs) to be applied to each node. These will added in addition to any default label(s) that Kubernetes may apply to the node. In case of conflict in label keys, the applied set may differ depending on the Kubernetes version -- it's best to assume the behavior is undefined and conflicts should be avoided. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
func (o NodeConfigOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v NodeConfig) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Parameters that can be configured on Linux nodes.
func (o NodeConfigOutput) LinuxNodeConfig() LinuxNodeConfigPtrOutput {
	return o.ApplyT(func(v NodeConfig) *LinuxNodeConfig { return v.LinuxNodeConfig }).(LinuxNodeConfigPtrOutput)
}

// The number of local SSD disks to be attached to the node. The limit for this value is dependent upon the maximum number of disks available on a machine per zone. See: https://cloud.google.com/compute/docs/disks/local-ssd for more information.
func (o NodeConfigOutput) LocalSsdCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodeConfig) *int { return v.LocalSsdCount }).(pulumi.IntPtrOutput)
}

// The name of a Google Compute Engine [machine type](https://cloud.google.com/compute/docs/machine-types) If unspecified, the default machine type is `e2-medium`.
func (o NodeConfigOutput) MachineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeConfig) *string { return v.MachineType }).(pulumi.StringPtrOutput)
}

// The metadata key/value pairs assigned to instances in the cluster. Keys must conform to the regexp `[a-zA-Z0-9-_]+` and be less than 128 bytes in length. These are reflected as part of a URL in the metadata server. Additionally, to avoid ambiguity, keys must not conflict with any other metadata keys for the project or be one of the reserved keys: - "cluster-location" - "cluster-name" - "cluster-uid" - "configure-sh" - "containerd-configure-sh" - "enable-os-login" - "gci-ensure-gke-docker" - "gci-metrics-enabled" - "gci-update-strategy" - "instance-template" - "kube-env" - "startup-script" - "user-data" - "disable-address-manager" - "windows-startup-script-ps1" - "common-psm1" - "k8s-node-setup-psm1" - "install-ssh-psm1" - "user-profile-psm1" The following keys are reserved for Windows nodes: - "serial-port-logging-enable" Values are free-form strings, and only have meaning as interpreted by the image running in the instance. The only restriction placed on them is that each value's size must be less than or equal to 32 KB. The total size of all keys and values must be less than 512 KB.
func (o NodeConfigOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v NodeConfig) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// Minimum CPU platform to be used by this instance. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as `minCpuPlatform: "Intel Haswell"` or `minCpuPlatform: "Intel Sandy Bridge"`. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform)
func (o NodeConfigOutput) MinCpuPlatform() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeConfig) *string { return v.MinCpuPlatform }).(pulumi.StringPtrOutput)
}

// Setting this field will assign instances of this pool to run on the specified node group. This is useful for running workloads on [sole tenant nodes](https://cloud.google.com/compute/docs/nodes/sole-tenant-nodes).
func (o NodeConfigOutput) NodeGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeConfig) *string { return v.NodeGroup }).(pulumi.StringPtrOutput)
}

// The set of Google API scopes to be made available on all of the node VMs under the "default" service account. The following scopes are recommended, but not required, and by default are not included: * `https://www.googleapis.com/auth/compute` is required for mounting persistent storage on your nodes. * `https://www.googleapis.com/auth/devstorage.read_only` is required for communicating with **gcr.io** (the [Google Container Registry](https://cloud.google.com/container-registry/)). If unspecified, no scopes are added, unless Cloud Logging or Cloud Monitoring are enabled, in which case their required scopes will be added.
func (o NodeConfigOutput) OauthScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NodeConfig) []string { return v.OauthScopes }).(pulumi.StringArrayOutput)
}

// Whether the nodes are created as preemptible VM instances. See: https://cloud.google.com/compute/docs/instances/preemptible for more information about preemptible VM instances.
func (o NodeConfigOutput) Preemptible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NodeConfig) *bool { return v.Preemptible }).(pulumi.BoolPtrOutput)
}

// The optional reservation affinity. Setting this field will apply the specified [Zonal Compute Reservation](https://cloud.google.com/compute/docs/instances/reserving-zonal-resources) to this node pool.
func (o NodeConfigOutput) ReservationAffinity() ReservationAffinityPtrOutput {
	return o.ApplyT(func(v NodeConfig) *ReservationAffinity { return v.ReservationAffinity }).(ReservationAffinityPtrOutput)
}

// Sandbox configuration for this node.
func (o NodeConfigOutput) SandboxConfig() SandboxConfigPtrOutput {
	return o.ApplyT(func(v NodeConfig) *SandboxConfig { return v.SandboxConfig }).(SandboxConfigPtrOutput)
}

// The Google Cloud Platform Service Account to be used by the node VMs. Specify the email address of the Service Account; otherwise, if no Service Account is specified, the "default" service account is used.
func (o NodeConfigOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeConfig) *string { return v.ServiceAccount }).(pulumi.StringPtrOutput)
}

// Shielded Instance options.
func (o NodeConfigOutput) ShieldedInstanceConfig() ShieldedInstanceConfigPtrOutput {
	return o.ApplyT(func(v NodeConfig) *ShieldedInstanceConfig { return v.ShieldedInstanceConfig }).(ShieldedInstanceConfigPtrOutput)
}

// The list of instance tags applied to all nodes. Tags are used to identify valid sources or targets for network firewalls and are specified by the client during cluster or node pool creation. Each tag within the list must comply with RFC1035.
func (o NodeConfigOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NodeConfig) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// List of kubernetes taints to be applied to each node. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
func (o NodeConfigOutput) Taints() NodeTaintArrayOutput {
	return o.ApplyT(func(v NodeConfig) []NodeTaint { return v.Taints }).(NodeTaintArrayOutput)
}

// The workload metadata configuration for this node.
func (o NodeConfigOutput) WorkloadMetadataConfig() WorkloadMetadataConfigPtrOutput {
	return o.ApplyT(func(v NodeConfig) *WorkloadMetadataConfig { return v.WorkloadMetadataConfig }).(WorkloadMetadataConfigPtrOutput)
}

type NodeConfigPtrOutput struct{ *pulumi.OutputState }

func (NodeConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeConfig)(nil)).Elem()
}

func (o NodeConfigPtrOutput) ToNodeConfigPtrOutput() NodeConfigPtrOutput {
	return o
}

func (o NodeConfigPtrOutput) ToNodeConfigPtrOutputWithContext(ctx context.Context) NodeConfigPtrOutput {
	return o
}

func (o NodeConfigPtrOutput) Elem() NodeConfigOutput {
	return o.ApplyT(func(v *NodeConfig) NodeConfig { return *v }).(NodeConfigOutput)
}

// A list of hardware accelerators to be attached to each node. See https://cloud.google.com/compute/docs/gpus for more information about support for GPUs.
func (o NodeConfigPtrOutput) Accelerators() AcceleratorConfigArrayOutput {
	return o.ApplyT(func(v *NodeConfig) []AcceleratorConfig {
		if v == nil {
			return nil
		}
		return v.Accelerators
	}).(AcceleratorConfigArrayOutput)
}

//  The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption
func (o NodeConfigPtrOutput) BootDiskKmsKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *string {
		if v == nil {
			return nil
		}
		return v.BootDiskKmsKey
	}).(pulumi.StringPtrOutput)
}

// Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the default disk size is 100GB.
func (o NodeConfigPtrOutput) DiskSizeGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *int {
		if v == nil {
			return nil
		}
		return v.DiskSizeGb
	}).(pulumi.IntPtrOutput)
}

// Type of the disk attached to each node (e.g. 'pd-standard', 'pd-ssd' or 'pd-balanced') If unspecified, the default disk type is 'pd-standard'
func (o NodeConfigPtrOutput) DiskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *string {
		if v == nil {
			return nil
		}
		return v.DiskType
	}).(pulumi.StringPtrOutput)
}

// The image type to use for this node. Note that for a given image type, the latest version of it will be used.
func (o NodeConfigPtrOutput) ImageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *string {
		if v == nil {
			return nil
		}
		return v.ImageType
	}).(pulumi.StringPtrOutput)
}

// Node kubelet configs.
func (o NodeConfigPtrOutput) KubeletConfig() NodeKubeletConfigPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *NodeKubeletConfig {
		if v == nil {
			return nil
		}
		return v.KubeletConfig
	}).(NodeKubeletConfigPtrOutput)
}

// The map of Kubernetes labels (key/value pairs) to be applied to each node. These will added in addition to any default label(s) that Kubernetes may apply to the node. In case of conflict in label keys, the applied set may differ depending on the Kubernetes version -- it's best to assume the behavior is undefined and conflicts should be avoided. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
func (o NodeConfigPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NodeConfig) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// Parameters that can be configured on Linux nodes.
func (o NodeConfigPtrOutput) LinuxNodeConfig() LinuxNodeConfigPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *LinuxNodeConfig {
		if v == nil {
			return nil
		}
		return v.LinuxNodeConfig
	}).(LinuxNodeConfigPtrOutput)
}

// The number of local SSD disks to be attached to the node. The limit for this value is dependent upon the maximum number of disks available on a machine per zone. See: https://cloud.google.com/compute/docs/disks/local-ssd for more information.
func (o NodeConfigPtrOutput) LocalSsdCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *int {
		if v == nil {
			return nil
		}
		return v.LocalSsdCount
	}).(pulumi.IntPtrOutput)
}

// The name of a Google Compute Engine [machine type](https://cloud.google.com/compute/docs/machine-types) If unspecified, the default machine type is `e2-medium`.
func (o NodeConfigPtrOutput) MachineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *string {
		if v == nil {
			return nil
		}
		return v.MachineType
	}).(pulumi.StringPtrOutput)
}

// The metadata key/value pairs assigned to instances in the cluster. Keys must conform to the regexp `[a-zA-Z0-9-_]+` and be less than 128 bytes in length. These are reflected as part of a URL in the metadata server. Additionally, to avoid ambiguity, keys must not conflict with any other metadata keys for the project or be one of the reserved keys: - "cluster-location" - "cluster-name" - "cluster-uid" - "configure-sh" - "containerd-configure-sh" - "enable-os-login" - "gci-ensure-gke-docker" - "gci-metrics-enabled" - "gci-update-strategy" - "instance-template" - "kube-env" - "startup-script" - "user-data" - "disable-address-manager" - "windows-startup-script-ps1" - "common-psm1" - "k8s-node-setup-psm1" - "install-ssh-psm1" - "user-profile-psm1" The following keys are reserved for Windows nodes: - "serial-port-logging-enable" Values are free-form strings, and only have meaning as interpreted by the image running in the instance. The only restriction placed on them is that each value's size must be less than or equal to 32 KB. The total size of all keys and values must be less than 512 KB.
func (o NodeConfigPtrOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NodeConfig) map[string]string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringMapOutput)
}

// Minimum CPU platform to be used by this instance. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as `minCpuPlatform: "Intel Haswell"` or `minCpuPlatform: "Intel Sandy Bridge"`. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform)
func (o NodeConfigPtrOutput) MinCpuPlatform() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *string {
		if v == nil {
			return nil
		}
		return v.MinCpuPlatform
	}).(pulumi.StringPtrOutput)
}

// Setting this field will assign instances of this pool to run on the specified node group. This is useful for running workloads on [sole tenant nodes](https://cloud.google.com/compute/docs/nodes/sole-tenant-nodes).
func (o NodeConfigPtrOutput) NodeGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *string {
		if v == nil {
			return nil
		}
		return v.NodeGroup
	}).(pulumi.StringPtrOutput)
}

// The set of Google API scopes to be made available on all of the node VMs under the "default" service account. The following scopes are recommended, but not required, and by default are not included: * `https://www.googleapis.com/auth/compute` is required for mounting persistent storage on your nodes. * `https://www.googleapis.com/auth/devstorage.read_only` is required for communicating with **gcr.io** (the [Google Container Registry](https://cloud.google.com/container-registry/)). If unspecified, no scopes are added, unless Cloud Logging or Cloud Monitoring are enabled, in which case their required scopes will be added.
func (o NodeConfigPtrOutput) OauthScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NodeConfig) []string {
		if v == nil {
			return nil
		}
		return v.OauthScopes
	}).(pulumi.StringArrayOutput)
}

// Whether the nodes are created as preemptible VM instances. See: https://cloud.google.com/compute/docs/instances/preemptible for more information about preemptible VM instances.
func (o NodeConfigPtrOutput) Preemptible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Preemptible
	}).(pulumi.BoolPtrOutput)
}

// The optional reservation affinity. Setting this field will apply the specified [Zonal Compute Reservation](https://cloud.google.com/compute/docs/instances/reserving-zonal-resources) to this node pool.
func (o NodeConfigPtrOutput) ReservationAffinity() ReservationAffinityPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *ReservationAffinity {
		if v == nil {
			return nil
		}
		return v.ReservationAffinity
	}).(ReservationAffinityPtrOutput)
}

// Sandbox configuration for this node.
func (o NodeConfigPtrOutput) SandboxConfig() SandboxConfigPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *SandboxConfig {
		if v == nil {
			return nil
		}
		return v.SandboxConfig
	}).(SandboxConfigPtrOutput)
}

// The Google Cloud Platform Service Account to be used by the node VMs. Specify the email address of the Service Account; otherwise, if no Service Account is specified, the "default" service account is used.
func (o NodeConfigPtrOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccount
	}).(pulumi.StringPtrOutput)
}

// Shielded Instance options.
func (o NodeConfigPtrOutput) ShieldedInstanceConfig() ShieldedInstanceConfigPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *ShieldedInstanceConfig {
		if v == nil {
			return nil
		}
		return v.ShieldedInstanceConfig
	}).(ShieldedInstanceConfigPtrOutput)
}

// The list of instance tags applied to all nodes. Tags are used to identify valid sources or targets for network firewalls and are specified by the client during cluster or node pool creation. Each tag within the list must comply with RFC1035.
func (o NodeConfigPtrOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NodeConfig) []string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringArrayOutput)
}

// List of kubernetes taints to be applied to each node. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
func (o NodeConfigPtrOutput) Taints() NodeTaintArrayOutput {
	return o.ApplyT(func(v *NodeConfig) []NodeTaint {
		if v == nil {
			return nil
		}
		return v.Taints
	}).(NodeTaintArrayOutput)
}

// The workload metadata configuration for this node.
func (o NodeConfigPtrOutput) WorkloadMetadataConfig() WorkloadMetadataConfigPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *WorkloadMetadataConfig {
		if v == nil {
			return nil
		}
		return v.WorkloadMetadataConfig
	}).(WorkloadMetadataConfigPtrOutput)
}

// Node kubelet configs.
type NodeKubeletConfig struct {
	// Enable CPU CFS quota enforcement for containers that specify CPU limits. This option is enabled by default which makes kubelet use CFS quota (https://www.kernel.org/doc/Documentation/scheduler/sched-bwc.txt) to enforce container CPU limits. Otherwise, CPU limits will not be enforced at all. Disable this option to mitigate CPU throttling problems while still having your pods to be in Guaranteed QoS class by specifying the CPU limits. The default value is 'true' if unspecified.
	CpuCfsQuota *bool `pulumi:"cpuCfsQuota"`
	// Set the CPU CFS quota period value 'cpu.cfs_period_us'. The string must be a sequence of decimal numbers, each with optional fraction and a unit suffix, such as "300ms". Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h". The value must be a positive duration.
	CpuCfsQuotaPeriod *string `pulumi:"cpuCfsQuotaPeriod"`
	// Control the CPU management policy on the node. See https://kubernetes.io/docs/tasks/administer-cluster/cpu-management-policies/ The following values are allowed. - "none": the default, which represents the existing scheduling behavior. - "static": allows pods with certain resource characteristics to be granted increased CPU affinity and exclusivity on the node. The default value is 'none' if unspecified.
	CpuManagerPolicy *string `pulumi:"cpuManagerPolicy"`
}

// NodeKubeletConfigInput is an input type that accepts NodeKubeletConfigArgs and NodeKubeletConfigOutput values.
// You can construct a concrete instance of `NodeKubeletConfigInput` via:
//
//          NodeKubeletConfigArgs{...}
type NodeKubeletConfigInput interface {
	pulumi.Input

	ToNodeKubeletConfigOutput() NodeKubeletConfigOutput
	ToNodeKubeletConfigOutputWithContext(context.Context) NodeKubeletConfigOutput
}

// Node kubelet configs.
type NodeKubeletConfigArgs struct {
	// Enable CPU CFS quota enforcement for containers that specify CPU limits. This option is enabled by default which makes kubelet use CFS quota (https://www.kernel.org/doc/Documentation/scheduler/sched-bwc.txt) to enforce container CPU limits. Otherwise, CPU limits will not be enforced at all. Disable this option to mitigate CPU throttling problems while still having your pods to be in Guaranteed QoS class by specifying the CPU limits. The default value is 'true' if unspecified.
	CpuCfsQuota pulumi.BoolPtrInput `pulumi:"cpuCfsQuota"`
	// Set the CPU CFS quota period value 'cpu.cfs_period_us'. The string must be a sequence of decimal numbers, each with optional fraction and a unit suffix, such as "300ms". Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h". The value must be a positive duration.
	CpuCfsQuotaPeriod pulumi.StringPtrInput `pulumi:"cpuCfsQuotaPeriod"`
	// Control the CPU management policy on the node. See https://kubernetes.io/docs/tasks/administer-cluster/cpu-management-policies/ The following values are allowed. - "none": the default, which represents the existing scheduling behavior. - "static": allows pods with certain resource characteristics to be granted increased CPU affinity and exclusivity on the node. The default value is 'none' if unspecified.
	CpuManagerPolicy pulumi.StringPtrInput `pulumi:"cpuManagerPolicy"`
}

func (NodeKubeletConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeKubeletConfig)(nil)).Elem()
}

func (i NodeKubeletConfigArgs) ToNodeKubeletConfigOutput() NodeKubeletConfigOutput {
	return i.ToNodeKubeletConfigOutputWithContext(context.Background())
}

func (i NodeKubeletConfigArgs) ToNodeKubeletConfigOutputWithContext(ctx context.Context) NodeKubeletConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeKubeletConfigOutput)
}

func (i NodeKubeletConfigArgs) ToNodeKubeletConfigPtrOutput() NodeKubeletConfigPtrOutput {
	return i.ToNodeKubeletConfigPtrOutputWithContext(context.Background())
}

func (i NodeKubeletConfigArgs) ToNodeKubeletConfigPtrOutputWithContext(ctx context.Context) NodeKubeletConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeKubeletConfigOutput).ToNodeKubeletConfigPtrOutputWithContext(ctx)
}

// NodeKubeletConfigPtrInput is an input type that accepts NodeKubeletConfigArgs, NodeKubeletConfigPtr and NodeKubeletConfigPtrOutput values.
// You can construct a concrete instance of `NodeKubeletConfigPtrInput` via:
//
//          NodeKubeletConfigArgs{...}
//
//  or:
//
//          nil
type NodeKubeletConfigPtrInput interface {
	pulumi.Input

	ToNodeKubeletConfigPtrOutput() NodeKubeletConfigPtrOutput
	ToNodeKubeletConfigPtrOutputWithContext(context.Context) NodeKubeletConfigPtrOutput
}

type nodeKubeletConfigPtrType NodeKubeletConfigArgs

func NodeKubeletConfigPtr(v *NodeKubeletConfigArgs) NodeKubeletConfigPtrInput {
	return (*nodeKubeletConfigPtrType)(v)
}

func (*nodeKubeletConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeKubeletConfig)(nil)).Elem()
}

func (i *nodeKubeletConfigPtrType) ToNodeKubeletConfigPtrOutput() NodeKubeletConfigPtrOutput {
	return i.ToNodeKubeletConfigPtrOutputWithContext(context.Background())
}

func (i *nodeKubeletConfigPtrType) ToNodeKubeletConfigPtrOutputWithContext(ctx context.Context) NodeKubeletConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeKubeletConfigPtrOutput)
}

// Node kubelet configs.
type NodeKubeletConfigOutput struct{ *pulumi.OutputState }

func (NodeKubeletConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeKubeletConfig)(nil)).Elem()
}

func (o NodeKubeletConfigOutput) ToNodeKubeletConfigOutput() NodeKubeletConfigOutput {
	return o
}

func (o NodeKubeletConfigOutput) ToNodeKubeletConfigOutputWithContext(ctx context.Context) NodeKubeletConfigOutput {
	return o
}

func (o NodeKubeletConfigOutput) ToNodeKubeletConfigPtrOutput() NodeKubeletConfigPtrOutput {
	return o.ToNodeKubeletConfigPtrOutputWithContext(context.Background())
}

func (o NodeKubeletConfigOutput) ToNodeKubeletConfigPtrOutputWithContext(ctx context.Context) NodeKubeletConfigPtrOutput {
	return o.ApplyT(func(v NodeKubeletConfig) *NodeKubeletConfig {
		return &v
	}).(NodeKubeletConfigPtrOutput)
}

// Enable CPU CFS quota enforcement for containers that specify CPU limits. This option is enabled by default which makes kubelet use CFS quota (https://www.kernel.org/doc/Documentation/scheduler/sched-bwc.txt) to enforce container CPU limits. Otherwise, CPU limits will not be enforced at all. Disable this option to mitigate CPU throttling problems while still having your pods to be in Guaranteed QoS class by specifying the CPU limits. The default value is 'true' if unspecified.
func (o NodeKubeletConfigOutput) CpuCfsQuota() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NodeKubeletConfig) *bool { return v.CpuCfsQuota }).(pulumi.BoolPtrOutput)
}

// Set the CPU CFS quota period value 'cpu.cfs_period_us'. The string must be a sequence of decimal numbers, each with optional fraction and a unit suffix, such as "300ms". Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h". The value must be a positive duration.
func (o NodeKubeletConfigOutput) CpuCfsQuotaPeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeKubeletConfig) *string { return v.CpuCfsQuotaPeriod }).(pulumi.StringPtrOutput)
}

// Control the CPU management policy on the node. See https://kubernetes.io/docs/tasks/administer-cluster/cpu-management-policies/ The following values are allowed. - "none": the default, which represents the existing scheduling behavior. - "static": allows pods with certain resource characteristics to be granted increased CPU affinity and exclusivity on the node. The default value is 'none' if unspecified.
func (o NodeKubeletConfigOutput) CpuManagerPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeKubeletConfig) *string { return v.CpuManagerPolicy }).(pulumi.StringPtrOutput)
}

type NodeKubeletConfigPtrOutput struct{ *pulumi.OutputState }

func (NodeKubeletConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeKubeletConfig)(nil)).Elem()
}

func (o NodeKubeletConfigPtrOutput) ToNodeKubeletConfigPtrOutput() NodeKubeletConfigPtrOutput {
	return o
}

func (o NodeKubeletConfigPtrOutput) ToNodeKubeletConfigPtrOutputWithContext(ctx context.Context) NodeKubeletConfigPtrOutput {
	return o
}

func (o NodeKubeletConfigPtrOutput) Elem() NodeKubeletConfigOutput {
	return o.ApplyT(func(v *NodeKubeletConfig) NodeKubeletConfig { return *v }).(NodeKubeletConfigOutput)
}

// Enable CPU CFS quota enforcement for containers that specify CPU limits. This option is enabled by default which makes kubelet use CFS quota (https://www.kernel.org/doc/Documentation/scheduler/sched-bwc.txt) to enforce container CPU limits. Otherwise, CPU limits will not be enforced at all. Disable this option to mitigate CPU throttling problems while still having your pods to be in Guaranteed QoS class by specifying the CPU limits. The default value is 'true' if unspecified.
func (o NodeKubeletConfigPtrOutput) CpuCfsQuota() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NodeKubeletConfig) *bool {
		if v == nil {
			return nil
		}
		return v.CpuCfsQuota
	}).(pulumi.BoolPtrOutput)
}

// Set the CPU CFS quota period value 'cpu.cfs_period_us'. The string must be a sequence of decimal numbers, each with optional fraction and a unit suffix, such as "300ms". Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h". The value must be a positive duration.
func (o NodeKubeletConfigPtrOutput) CpuCfsQuotaPeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeKubeletConfig) *string {
		if v == nil {
			return nil
		}
		return v.CpuCfsQuotaPeriod
	}).(pulumi.StringPtrOutput)
}

// Control the CPU management policy on the node. See https://kubernetes.io/docs/tasks/administer-cluster/cpu-management-policies/ The following values are allowed. - "none": the default, which represents the existing scheduling behavior. - "static": allows pods with certain resource characteristics to be granted increased CPU affinity and exclusivity on the node. The default value is 'none' if unspecified.
func (o NodeKubeletConfigPtrOutput) CpuManagerPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeKubeletConfig) *string {
		if v == nil {
			return nil
		}
		return v.CpuManagerPolicy
	}).(pulumi.StringPtrOutput)
}

// NodeManagement defines the set of node management services turned on for the node pool.
type NodeManagement struct {
	// A flag that specifies whether the node auto-repair is enabled for the node pool. If enabled, the nodes in this node pool will be monitored and, if they fail health checks too many times, an automatic repair action will be triggered.
	AutoRepair *bool `pulumi:"autoRepair"`
	// A flag that specifies whether node auto-upgrade is enabled for the node pool. If enabled, node auto-upgrade helps keep the nodes in your node pool up to date with the latest release version of Kubernetes.
	AutoUpgrade *bool `pulumi:"autoUpgrade"`
	// Specifies the Auto Upgrade knobs for the node pool.
	UpgradeOptions *AutoUpgradeOptions `pulumi:"upgradeOptions"`
}

// NodeManagementInput is an input type that accepts NodeManagementArgs and NodeManagementOutput values.
// You can construct a concrete instance of `NodeManagementInput` via:
//
//          NodeManagementArgs{...}
type NodeManagementInput interface {
	pulumi.Input

	ToNodeManagementOutput() NodeManagementOutput
	ToNodeManagementOutputWithContext(context.Context) NodeManagementOutput
}

// NodeManagement defines the set of node management services turned on for the node pool.
type NodeManagementArgs struct {
	// A flag that specifies whether the node auto-repair is enabled for the node pool. If enabled, the nodes in this node pool will be monitored and, if they fail health checks too many times, an automatic repair action will be triggered.
	AutoRepair pulumi.BoolPtrInput `pulumi:"autoRepair"`
	// A flag that specifies whether node auto-upgrade is enabled for the node pool. If enabled, node auto-upgrade helps keep the nodes in your node pool up to date with the latest release version of Kubernetes.
	AutoUpgrade pulumi.BoolPtrInput `pulumi:"autoUpgrade"`
	// Specifies the Auto Upgrade knobs for the node pool.
	UpgradeOptions AutoUpgradeOptionsPtrInput `pulumi:"upgradeOptions"`
}

func (NodeManagementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeManagement)(nil)).Elem()
}

func (i NodeManagementArgs) ToNodeManagementOutput() NodeManagementOutput {
	return i.ToNodeManagementOutputWithContext(context.Background())
}

func (i NodeManagementArgs) ToNodeManagementOutputWithContext(ctx context.Context) NodeManagementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeManagementOutput)
}

func (i NodeManagementArgs) ToNodeManagementPtrOutput() NodeManagementPtrOutput {
	return i.ToNodeManagementPtrOutputWithContext(context.Background())
}

func (i NodeManagementArgs) ToNodeManagementPtrOutputWithContext(ctx context.Context) NodeManagementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeManagementOutput).ToNodeManagementPtrOutputWithContext(ctx)
}

// NodeManagementPtrInput is an input type that accepts NodeManagementArgs, NodeManagementPtr and NodeManagementPtrOutput values.
// You can construct a concrete instance of `NodeManagementPtrInput` via:
//
//          NodeManagementArgs{...}
//
//  or:
//
//          nil
type NodeManagementPtrInput interface {
	pulumi.Input

	ToNodeManagementPtrOutput() NodeManagementPtrOutput
	ToNodeManagementPtrOutputWithContext(context.Context) NodeManagementPtrOutput
}

type nodeManagementPtrType NodeManagementArgs

func NodeManagementPtr(v *NodeManagementArgs) NodeManagementPtrInput {
	return (*nodeManagementPtrType)(v)
}

func (*nodeManagementPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeManagement)(nil)).Elem()
}

func (i *nodeManagementPtrType) ToNodeManagementPtrOutput() NodeManagementPtrOutput {
	return i.ToNodeManagementPtrOutputWithContext(context.Background())
}

func (i *nodeManagementPtrType) ToNodeManagementPtrOutputWithContext(ctx context.Context) NodeManagementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeManagementPtrOutput)
}

// NodeManagement defines the set of node management services turned on for the node pool.
type NodeManagementOutput struct{ *pulumi.OutputState }

func (NodeManagementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeManagement)(nil)).Elem()
}

func (o NodeManagementOutput) ToNodeManagementOutput() NodeManagementOutput {
	return o
}

func (o NodeManagementOutput) ToNodeManagementOutputWithContext(ctx context.Context) NodeManagementOutput {
	return o
}

func (o NodeManagementOutput) ToNodeManagementPtrOutput() NodeManagementPtrOutput {
	return o.ToNodeManagementPtrOutputWithContext(context.Background())
}

func (o NodeManagementOutput) ToNodeManagementPtrOutputWithContext(ctx context.Context) NodeManagementPtrOutput {
	return o.ApplyT(func(v NodeManagement) *NodeManagement {
		return &v
	}).(NodeManagementPtrOutput)
}

// A flag that specifies whether the node auto-repair is enabled for the node pool. If enabled, the nodes in this node pool will be monitored and, if they fail health checks too many times, an automatic repair action will be triggered.
func (o NodeManagementOutput) AutoRepair() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NodeManagement) *bool { return v.AutoRepair }).(pulumi.BoolPtrOutput)
}

// A flag that specifies whether node auto-upgrade is enabled for the node pool. If enabled, node auto-upgrade helps keep the nodes in your node pool up to date with the latest release version of Kubernetes.
func (o NodeManagementOutput) AutoUpgrade() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NodeManagement) *bool { return v.AutoUpgrade }).(pulumi.BoolPtrOutput)
}

// Specifies the Auto Upgrade knobs for the node pool.
func (o NodeManagementOutput) UpgradeOptions() AutoUpgradeOptionsPtrOutput {
	return o.ApplyT(func(v NodeManagement) *AutoUpgradeOptions { return v.UpgradeOptions }).(AutoUpgradeOptionsPtrOutput)
}

type NodeManagementPtrOutput struct{ *pulumi.OutputState }

func (NodeManagementPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeManagement)(nil)).Elem()
}

func (o NodeManagementPtrOutput) ToNodeManagementPtrOutput() NodeManagementPtrOutput {
	return o
}

func (o NodeManagementPtrOutput) ToNodeManagementPtrOutputWithContext(ctx context.Context) NodeManagementPtrOutput {
	return o
}

func (o NodeManagementPtrOutput) Elem() NodeManagementOutput {
	return o.ApplyT(func(v *NodeManagement) NodeManagement { return *v }).(NodeManagementOutput)
}

// A flag that specifies whether the node auto-repair is enabled for the node pool. If enabled, the nodes in this node pool will be monitored and, if they fail health checks too many times, an automatic repair action will be triggered.
func (o NodeManagementPtrOutput) AutoRepair() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NodeManagement) *bool {
		if v == nil {
			return nil
		}
		return v.AutoRepair
	}).(pulumi.BoolPtrOutput)
}

// A flag that specifies whether node auto-upgrade is enabled for the node pool. If enabled, node auto-upgrade helps keep the nodes in your node pool up to date with the latest release version of Kubernetes.
func (o NodeManagementPtrOutput) AutoUpgrade() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NodeManagement) *bool {
		if v == nil {
			return nil
		}
		return v.AutoUpgrade
	}).(pulumi.BoolPtrOutput)
}

// Specifies the Auto Upgrade knobs for the node pool.
func (o NodeManagementPtrOutput) UpgradeOptions() AutoUpgradeOptionsPtrOutput {
	return o.ApplyT(func(v *NodeManagement) *AutoUpgradeOptions {
		if v == nil {
			return nil
		}
		return v.UpgradeOptions
	}).(AutoUpgradeOptionsPtrOutput)
}

// NodePool contains the name and configuration for a cluster's node pool. Node pools are a set of nodes (i.e. VM's), with a common configuration and specification, under the control of the cluster master. They may have a set of Kubernetes labels applied to them, which may be used to reference them during pod scheduling. They may also be resized up or down, to accommodate the workload.
type NodePoolType struct {
	// Autoscaler configuration for this NodePool. Autoscaler is enabled only if a valid configuration is present.
	Autoscaling *NodePoolAutoscaling `pulumi:"autoscaling"`
	// Which conditions caused the current node pool state.
	Conditions []StatusCondition `pulumi:"conditions"`
	// The node configuration of the pool.
	Config *NodeConfig `pulumi:"config"`
	// The initial node count for the pool. You must ensure that your Compute Engine [resource quota](https://cloud.google.com/compute/quotas) is sufficient for this number of instances. You must also have available firewall and routes quota.
	InitialNodeCount *int `pulumi:"initialNodeCount"`
	// [Output only] The resource URLs of the [managed instance groups](https://cloud.google.com/compute/docs/instance-groups/creating-groups-of-managed-instances) associated with this node pool.
	InstanceGroupUrls []string `pulumi:"instanceGroupUrls"`
	// The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the NodePool's nodes should be located. If this value is unspecified during node pool creation, the [Cluster.Locations](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters#Cluster.FIELDS.locations) value will be used, instead. Warning: changing node pool locations will result in nodes being added and/or removed.
	Locations []string `pulumi:"locations"`
	// NodeManagement configuration for this NodePool.
	Management *NodeManagement `pulumi:"management"`
	// The constraint on the maximum number of pods that can be run simultaneously on a node in the node pool.
	MaxPodsConstraint *MaxPodsConstraint `pulumi:"maxPodsConstraint"`
	// The name of the node pool.
	Name *string `pulumi:"name"`
	// [Output only] The pod CIDR block size per node in this node pool.
	PodIpv4CidrSize *int `pulumi:"podIpv4CidrSize"`
	// [Output only] Server-defined URL for the resource.
	SelfLink *string `pulumi:"selfLink"`
	// [Output only] The status of the nodes in this pool instance.
	Status *string `pulumi:"status"`
	// [Output only] Deprecated. Use conditions instead. Additional information about the current status of this node pool instance, if available.
	StatusMessage *string `pulumi:"statusMessage"`
	// Upgrade settings control disruption and speed of the upgrade.
	UpgradeSettings *UpgradeSettings `pulumi:"upgradeSettings"`
	// The version of the Kubernetes of this node.
	Version *string `pulumi:"version"`
}

// NodePoolTypeInput is an input type that accepts NodePoolTypeArgs and NodePoolTypeOutput values.
// You can construct a concrete instance of `NodePoolTypeInput` via:
//
//          NodePoolTypeArgs{...}
type NodePoolTypeInput interface {
	pulumi.Input

	ToNodePoolTypeOutput() NodePoolTypeOutput
	ToNodePoolTypeOutputWithContext(context.Context) NodePoolTypeOutput
}

// NodePool contains the name and configuration for a cluster's node pool. Node pools are a set of nodes (i.e. VM's), with a common configuration and specification, under the control of the cluster master. They may have a set of Kubernetes labels applied to them, which may be used to reference them during pod scheduling. They may also be resized up or down, to accommodate the workload.
type NodePoolTypeArgs struct {
	// Autoscaler configuration for this NodePool. Autoscaler is enabled only if a valid configuration is present.
	Autoscaling NodePoolAutoscalingPtrInput `pulumi:"autoscaling"`
	// Which conditions caused the current node pool state.
	Conditions StatusConditionArrayInput `pulumi:"conditions"`
	// The node configuration of the pool.
	Config NodeConfigPtrInput `pulumi:"config"`
	// The initial node count for the pool. You must ensure that your Compute Engine [resource quota](https://cloud.google.com/compute/quotas) is sufficient for this number of instances. You must also have available firewall and routes quota.
	InitialNodeCount pulumi.IntPtrInput `pulumi:"initialNodeCount"`
	// [Output only] The resource URLs of the [managed instance groups](https://cloud.google.com/compute/docs/instance-groups/creating-groups-of-managed-instances) associated with this node pool.
	InstanceGroupUrls pulumi.StringArrayInput `pulumi:"instanceGroupUrls"`
	// The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the NodePool's nodes should be located. If this value is unspecified during node pool creation, the [Cluster.Locations](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters#Cluster.FIELDS.locations) value will be used, instead. Warning: changing node pool locations will result in nodes being added and/or removed.
	Locations pulumi.StringArrayInput `pulumi:"locations"`
	// NodeManagement configuration for this NodePool.
	Management NodeManagementPtrInput `pulumi:"management"`
	// The constraint on the maximum number of pods that can be run simultaneously on a node in the node pool.
	MaxPodsConstraint MaxPodsConstraintPtrInput `pulumi:"maxPodsConstraint"`
	// The name of the node pool.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [Output only] The pod CIDR block size per node in this node pool.
	PodIpv4CidrSize pulumi.IntPtrInput `pulumi:"podIpv4CidrSize"`
	// [Output only] Server-defined URL for the resource.
	SelfLink pulumi.StringPtrInput `pulumi:"selfLink"`
	// [Output only] The status of the nodes in this pool instance.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// [Output only] Deprecated. Use conditions instead. Additional information about the current status of this node pool instance, if available.
	StatusMessage pulumi.StringPtrInput `pulumi:"statusMessage"`
	// Upgrade settings control disruption and speed of the upgrade.
	UpgradeSettings UpgradeSettingsPtrInput `pulumi:"upgradeSettings"`
	// The version of the Kubernetes of this node.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (NodePoolTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolType)(nil)).Elem()
}

func (i NodePoolTypeArgs) ToNodePoolTypeOutput() NodePoolTypeOutput {
	return i.ToNodePoolTypeOutputWithContext(context.Background())
}

func (i NodePoolTypeArgs) ToNodePoolTypeOutputWithContext(ctx context.Context) NodePoolTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolTypeOutput)
}

func (i NodePoolTypeArgs) ToNodePoolTypePtrOutput() NodePoolTypePtrOutput {
	return i.ToNodePoolTypePtrOutputWithContext(context.Background())
}

func (i NodePoolTypeArgs) ToNodePoolTypePtrOutputWithContext(ctx context.Context) NodePoolTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolTypeOutput).ToNodePoolTypePtrOutputWithContext(ctx)
}

// NodePoolTypePtrInput is an input type that accepts NodePoolTypeArgs, NodePoolTypePtr and NodePoolTypePtrOutput values.
// You can construct a concrete instance of `NodePoolTypePtrInput` via:
//
//          NodePoolTypeArgs{...}
//
//  or:
//
//          nil
type NodePoolTypePtrInput interface {
	pulumi.Input

	ToNodePoolTypePtrOutput() NodePoolTypePtrOutput
	ToNodePoolTypePtrOutputWithContext(context.Context) NodePoolTypePtrOutput
}

type nodePoolTypePtrType NodePoolTypeArgs

func NodePoolTypePtr(v *NodePoolTypeArgs) NodePoolTypePtrInput {
	return (*nodePoolTypePtrType)(v)
}

func (*nodePoolTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodePoolType)(nil)).Elem()
}

func (i *nodePoolTypePtrType) ToNodePoolTypePtrOutput() NodePoolTypePtrOutput {
	return i.ToNodePoolTypePtrOutputWithContext(context.Background())
}

func (i *nodePoolTypePtrType) ToNodePoolTypePtrOutputWithContext(ctx context.Context) NodePoolTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolTypePtrOutput)
}

// NodePoolTypeArrayInput is an input type that accepts NodePoolTypeArray and NodePoolTypeArrayOutput values.
// You can construct a concrete instance of `NodePoolTypeArrayInput` via:
//
//          NodePoolTypeArray{ NodePoolTypeArgs{...} }
type NodePoolTypeArrayInput interface {
	pulumi.Input

	ToNodePoolTypeArrayOutput() NodePoolTypeArrayOutput
	ToNodePoolTypeArrayOutputWithContext(context.Context) NodePoolTypeArrayOutput
}

type NodePoolTypeArray []NodePoolTypeInput

func (NodePoolTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodePoolType)(nil)).Elem()
}

func (i NodePoolTypeArray) ToNodePoolTypeArrayOutput() NodePoolTypeArrayOutput {
	return i.ToNodePoolTypeArrayOutputWithContext(context.Background())
}

func (i NodePoolTypeArray) ToNodePoolTypeArrayOutputWithContext(ctx context.Context) NodePoolTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolTypeArrayOutput)
}

// NodePool contains the name and configuration for a cluster's node pool. Node pools are a set of nodes (i.e. VM's), with a common configuration and specification, under the control of the cluster master. They may have a set of Kubernetes labels applied to them, which may be used to reference them during pod scheduling. They may also be resized up or down, to accommodate the workload.
type NodePoolTypeOutput struct{ *pulumi.OutputState }

func (NodePoolTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolType)(nil)).Elem()
}

func (o NodePoolTypeOutput) ToNodePoolTypeOutput() NodePoolTypeOutput {
	return o
}

func (o NodePoolTypeOutput) ToNodePoolTypeOutputWithContext(ctx context.Context) NodePoolTypeOutput {
	return o
}

func (o NodePoolTypeOutput) ToNodePoolTypePtrOutput() NodePoolTypePtrOutput {
	return o.ToNodePoolTypePtrOutputWithContext(context.Background())
}

func (o NodePoolTypeOutput) ToNodePoolTypePtrOutputWithContext(ctx context.Context) NodePoolTypePtrOutput {
	return o.ApplyT(func(v NodePoolType) *NodePoolType {
		return &v
	}).(NodePoolTypePtrOutput)
}

// Autoscaler configuration for this NodePool. Autoscaler is enabled only if a valid configuration is present.
func (o NodePoolTypeOutput) Autoscaling() NodePoolAutoscalingPtrOutput {
	return o.ApplyT(func(v NodePoolType) *NodePoolAutoscaling { return v.Autoscaling }).(NodePoolAutoscalingPtrOutput)
}

// Which conditions caused the current node pool state.
func (o NodePoolTypeOutput) Conditions() StatusConditionArrayOutput {
	return o.ApplyT(func(v NodePoolType) []StatusCondition { return v.Conditions }).(StatusConditionArrayOutput)
}

// The node configuration of the pool.
func (o NodePoolTypeOutput) Config() NodeConfigPtrOutput {
	return o.ApplyT(func(v NodePoolType) *NodeConfig { return v.Config }).(NodeConfigPtrOutput)
}

// The initial node count for the pool. You must ensure that your Compute Engine [resource quota](https://cloud.google.com/compute/quotas) is sufficient for this number of instances. You must also have available firewall and routes quota.
func (o NodePoolTypeOutput) InitialNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodePoolType) *int { return v.InitialNodeCount }).(pulumi.IntPtrOutput)
}

// [Output only] The resource URLs of the [managed instance groups](https://cloud.google.com/compute/docs/instance-groups/creating-groups-of-managed-instances) associated with this node pool.
func (o NodePoolTypeOutput) InstanceGroupUrls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NodePoolType) []string { return v.InstanceGroupUrls }).(pulumi.StringArrayOutput)
}

// The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the NodePool's nodes should be located. If this value is unspecified during node pool creation, the [Cluster.Locations](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters#Cluster.FIELDS.locations) value will be used, instead. Warning: changing node pool locations will result in nodes being added and/or removed.
func (o NodePoolTypeOutput) Locations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NodePoolType) []string { return v.Locations }).(pulumi.StringArrayOutput)
}

// NodeManagement configuration for this NodePool.
func (o NodePoolTypeOutput) Management() NodeManagementPtrOutput {
	return o.ApplyT(func(v NodePoolType) *NodeManagement { return v.Management }).(NodeManagementPtrOutput)
}

// The constraint on the maximum number of pods that can be run simultaneously on a node in the node pool.
func (o NodePoolTypeOutput) MaxPodsConstraint() MaxPodsConstraintPtrOutput {
	return o.ApplyT(func(v NodePoolType) *MaxPodsConstraint { return v.MaxPodsConstraint }).(MaxPodsConstraintPtrOutput)
}

// The name of the node pool.
func (o NodePoolTypeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodePoolType) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [Output only] The pod CIDR block size per node in this node pool.
func (o NodePoolTypeOutput) PodIpv4CidrSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodePoolType) *int { return v.PodIpv4CidrSize }).(pulumi.IntPtrOutput)
}

// [Output only] Server-defined URL for the resource.
func (o NodePoolTypeOutput) SelfLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodePoolType) *string { return v.SelfLink }).(pulumi.StringPtrOutput)
}

// [Output only] The status of the nodes in this pool instance.
func (o NodePoolTypeOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodePoolType) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// [Output only] Deprecated. Use conditions instead. Additional information about the current status of this node pool instance, if available.
func (o NodePoolTypeOutput) StatusMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodePoolType) *string { return v.StatusMessage }).(pulumi.StringPtrOutput)
}

// Upgrade settings control disruption and speed of the upgrade.
func (o NodePoolTypeOutput) UpgradeSettings() UpgradeSettingsPtrOutput {
	return o.ApplyT(func(v NodePoolType) *UpgradeSettings { return v.UpgradeSettings }).(UpgradeSettingsPtrOutput)
}

// The version of the Kubernetes of this node.
func (o NodePoolTypeOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodePoolType) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type NodePoolTypePtrOutput struct{ *pulumi.OutputState }

func (NodePoolTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodePoolType)(nil)).Elem()
}

func (o NodePoolTypePtrOutput) ToNodePoolTypePtrOutput() NodePoolTypePtrOutput {
	return o
}

func (o NodePoolTypePtrOutput) ToNodePoolTypePtrOutputWithContext(ctx context.Context) NodePoolTypePtrOutput {
	return o
}

func (o NodePoolTypePtrOutput) Elem() NodePoolTypeOutput {
	return o.ApplyT(func(v *NodePoolType) NodePoolType { return *v }).(NodePoolTypeOutput)
}

// Autoscaler configuration for this NodePool. Autoscaler is enabled only if a valid configuration is present.
func (o NodePoolTypePtrOutput) Autoscaling() NodePoolAutoscalingPtrOutput {
	return o.ApplyT(func(v *NodePoolType) *NodePoolAutoscaling {
		if v == nil {
			return nil
		}
		return v.Autoscaling
	}).(NodePoolAutoscalingPtrOutput)
}

// Which conditions caused the current node pool state.
func (o NodePoolTypePtrOutput) Conditions() StatusConditionArrayOutput {
	return o.ApplyT(func(v *NodePoolType) []StatusCondition {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(StatusConditionArrayOutput)
}

// The node configuration of the pool.
func (o NodePoolTypePtrOutput) Config() NodeConfigPtrOutput {
	return o.ApplyT(func(v *NodePoolType) *NodeConfig {
		if v == nil {
			return nil
		}
		return v.Config
	}).(NodeConfigPtrOutput)
}

// The initial node count for the pool. You must ensure that your Compute Engine [resource quota](https://cloud.google.com/compute/quotas) is sufficient for this number of instances. You must also have available firewall and routes quota.
func (o NodePoolTypePtrOutput) InitialNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodePoolType) *int {
		if v == nil {
			return nil
		}
		return v.InitialNodeCount
	}).(pulumi.IntPtrOutput)
}

// [Output only] The resource URLs of the [managed instance groups](https://cloud.google.com/compute/docs/instance-groups/creating-groups-of-managed-instances) associated with this node pool.
func (o NodePoolTypePtrOutput) InstanceGroupUrls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NodePoolType) []string {
		if v == nil {
			return nil
		}
		return v.InstanceGroupUrls
	}).(pulumi.StringArrayOutput)
}

// The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the NodePool's nodes should be located. If this value is unspecified during node pool creation, the [Cluster.Locations](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters#Cluster.FIELDS.locations) value will be used, instead. Warning: changing node pool locations will result in nodes being added and/or removed.
func (o NodePoolTypePtrOutput) Locations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NodePoolType) []string {
		if v == nil {
			return nil
		}
		return v.Locations
	}).(pulumi.StringArrayOutput)
}

// NodeManagement configuration for this NodePool.
func (o NodePoolTypePtrOutput) Management() NodeManagementPtrOutput {
	return o.ApplyT(func(v *NodePoolType) *NodeManagement {
		if v == nil {
			return nil
		}
		return v.Management
	}).(NodeManagementPtrOutput)
}

// The constraint on the maximum number of pods that can be run simultaneously on a node in the node pool.
func (o NodePoolTypePtrOutput) MaxPodsConstraint() MaxPodsConstraintPtrOutput {
	return o.ApplyT(func(v *NodePoolType) *MaxPodsConstraint {
		if v == nil {
			return nil
		}
		return v.MaxPodsConstraint
	}).(MaxPodsConstraintPtrOutput)
}

// The name of the node pool.
func (o NodePoolTypePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodePoolType) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// [Output only] The pod CIDR block size per node in this node pool.
func (o NodePoolTypePtrOutput) PodIpv4CidrSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodePoolType) *int {
		if v == nil {
			return nil
		}
		return v.PodIpv4CidrSize
	}).(pulumi.IntPtrOutput)
}

// [Output only] Server-defined URL for the resource.
func (o NodePoolTypePtrOutput) SelfLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodePoolType) *string {
		if v == nil {
			return nil
		}
		return v.SelfLink
	}).(pulumi.StringPtrOutput)
}

// [Output only] The status of the nodes in this pool instance.
func (o NodePoolTypePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodePoolType) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// [Output only] Deprecated. Use conditions instead. Additional information about the current status of this node pool instance, if available.
func (o NodePoolTypePtrOutput) StatusMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodePoolType) *string {
		if v == nil {
			return nil
		}
		return v.StatusMessage
	}).(pulumi.StringPtrOutput)
}

// Upgrade settings control disruption and speed of the upgrade.
func (o NodePoolTypePtrOutput) UpgradeSettings() UpgradeSettingsPtrOutput {
	return o.ApplyT(func(v *NodePoolType) *UpgradeSettings {
		if v == nil {
			return nil
		}
		return v.UpgradeSettings
	}).(UpgradeSettingsPtrOutput)
}

// The version of the Kubernetes of this node.
func (o NodePoolTypePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodePoolType) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

type NodePoolTypeArrayOutput struct{ *pulumi.OutputState }

func (NodePoolTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodePoolType)(nil)).Elem()
}

func (o NodePoolTypeArrayOutput) ToNodePoolTypeArrayOutput() NodePoolTypeArrayOutput {
	return o
}

func (o NodePoolTypeArrayOutput) ToNodePoolTypeArrayOutputWithContext(ctx context.Context) NodePoolTypeArrayOutput {
	return o
}

func (o NodePoolTypeArrayOutput) Index(i pulumi.IntInput) NodePoolTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodePoolType {
		return vs[0].([]NodePoolType)[vs[1].(int)]
	}).(NodePoolTypeOutput)
}

// NodePoolAutoscaling contains information required by cluster autoscaler to adjust the size of the node pool to the current cluster usage.
type NodePoolAutoscaling struct {
	// Can this node pool be deleted automatically.
	Autoprovisioned *bool `pulumi:"autoprovisioned"`
	// Is autoscaling enabled for this node pool.
	Enabled *bool `pulumi:"enabled"`
	// Maximum number of nodes in the NodePool. Must be >= min_node_count. There has to enough quota to scale up the cluster.
	MaxNodeCount *int `pulumi:"maxNodeCount"`
	// Minimum number of nodes in the NodePool. Must be >= 1 and <= max_node_count.
	MinNodeCount *int `pulumi:"minNodeCount"`
}

// NodePoolAutoscalingInput is an input type that accepts NodePoolAutoscalingArgs and NodePoolAutoscalingOutput values.
// You can construct a concrete instance of `NodePoolAutoscalingInput` via:
//
//          NodePoolAutoscalingArgs{...}
type NodePoolAutoscalingInput interface {
	pulumi.Input

	ToNodePoolAutoscalingOutput() NodePoolAutoscalingOutput
	ToNodePoolAutoscalingOutputWithContext(context.Context) NodePoolAutoscalingOutput
}

// NodePoolAutoscaling contains information required by cluster autoscaler to adjust the size of the node pool to the current cluster usage.
type NodePoolAutoscalingArgs struct {
	// Can this node pool be deleted automatically.
	Autoprovisioned pulumi.BoolPtrInput `pulumi:"autoprovisioned"`
	// Is autoscaling enabled for this node pool.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Maximum number of nodes in the NodePool. Must be >= min_node_count. There has to enough quota to scale up the cluster.
	MaxNodeCount pulumi.IntPtrInput `pulumi:"maxNodeCount"`
	// Minimum number of nodes in the NodePool. Must be >= 1 and <= max_node_count.
	MinNodeCount pulumi.IntPtrInput `pulumi:"minNodeCount"`
}

func (NodePoolAutoscalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolAutoscaling)(nil)).Elem()
}

func (i NodePoolAutoscalingArgs) ToNodePoolAutoscalingOutput() NodePoolAutoscalingOutput {
	return i.ToNodePoolAutoscalingOutputWithContext(context.Background())
}

func (i NodePoolAutoscalingArgs) ToNodePoolAutoscalingOutputWithContext(ctx context.Context) NodePoolAutoscalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolAutoscalingOutput)
}

func (i NodePoolAutoscalingArgs) ToNodePoolAutoscalingPtrOutput() NodePoolAutoscalingPtrOutput {
	return i.ToNodePoolAutoscalingPtrOutputWithContext(context.Background())
}

func (i NodePoolAutoscalingArgs) ToNodePoolAutoscalingPtrOutputWithContext(ctx context.Context) NodePoolAutoscalingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolAutoscalingOutput).ToNodePoolAutoscalingPtrOutputWithContext(ctx)
}

// NodePoolAutoscalingPtrInput is an input type that accepts NodePoolAutoscalingArgs, NodePoolAutoscalingPtr and NodePoolAutoscalingPtrOutput values.
// You can construct a concrete instance of `NodePoolAutoscalingPtrInput` via:
//
//          NodePoolAutoscalingArgs{...}
//
//  or:
//
//          nil
type NodePoolAutoscalingPtrInput interface {
	pulumi.Input

	ToNodePoolAutoscalingPtrOutput() NodePoolAutoscalingPtrOutput
	ToNodePoolAutoscalingPtrOutputWithContext(context.Context) NodePoolAutoscalingPtrOutput
}

type nodePoolAutoscalingPtrType NodePoolAutoscalingArgs

func NodePoolAutoscalingPtr(v *NodePoolAutoscalingArgs) NodePoolAutoscalingPtrInput {
	return (*nodePoolAutoscalingPtrType)(v)
}

func (*nodePoolAutoscalingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodePoolAutoscaling)(nil)).Elem()
}

func (i *nodePoolAutoscalingPtrType) ToNodePoolAutoscalingPtrOutput() NodePoolAutoscalingPtrOutput {
	return i.ToNodePoolAutoscalingPtrOutputWithContext(context.Background())
}

func (i *nodePoolAutoscalingPtrType) ToNodePoolAutoscalingPtrOutputWithContext(ctx context.Context) NodePoolAutoscalingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolAutoscalingPtrOutput)
}

// NodePoolAutoscaling contains information required by cluster autoscaler to adjust the size of the node pool to the current cluster usage.
type NodePoolAutoscalingOutput struct{ *pulumi.OutputState }

func (NodePoolAutoscalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolAutoscaling)(nil)).Elem()
}

func (o NodePoolAutoscalingOutput) ToNodePoolAutoscalingOutput() NodePoolAutoscalingOutput {
	return o
}

func (o NodePoolAutoscalingOutput) ToNodePoolAutoscalingOutputWithContext(ctx context.Context) NodePoolAutoscalingOutput {
	return o
}

func (o NodePoolAutoscalingOutput) ToNodePoolAutoscalingPtrOutput() NodePoolAutoscalingPtrOutput {
	return o.ToNodePoolAutoscalingPtrOutputWithContext(context.Background())
}

func (o NodePoolAutoscalingOutput) ToNodePoolAutoscalingPtrOutputWithContext(ctx context.Context) NodePoolAutoscalingPtrOutput {
	return o.ApplyT(func(v NodePoolAutoscaling) *NodePoolAutoscaling {
		return &v
	}).(NodePoolAutoscalingPtrOutput)
}

// Can this node pool be deleted automatically.
func (o NodePoolAutoscalingOutput) Autoprovisioned() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NodePoolAutoscaling) *bool { return v.Autoprovisioned }).(pulumi.BoolPtrOutput)
}

// Is autoscaling enabled for this node pool.
func (o NodePoolAutoscalingOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NodePoolAutoscaling) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Maximum number of nodes in the NodePool. Must be >= min_node_count. There has to enough quota to scale up the cluster.
func (o NodePoolAutoscalingOutput) MaxNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodePoolAutoscaling) *int { return v.MaxNodeCount }).(pulumi.IntPtrOutput)
}

// Minimum number of nodes in the NodePool. Must be >= 1 and <= max_node_count.
func (o NodePoolAutoscalingOutput) MinNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodePoolAutoscaling) *int { return v.MinNodeCount }).(pulumi.IntPtrOutput)
}

type NodePoolAutoscalingPtrOutput struct{ *pulumi.OutputState }

func (NodePoolAutoscalingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodePoolAutoscaling)(nil)).Elem()
}

func (o NodePoolAutoscalingPtrOutput) ToNodePoolAutoscalingPtrOutput() NodePoolAutoscalingPtrOutput {
	return o
}

func (o NodePoolAutoscalingPtrOutput) ToNodePoolAutoscalingPtrOutputWithContext(ctx context.Context) NodePoolAutoscalingPtrOutput {
	return o
}

func (o NodePoolAutoscalingPtrOutput) Elem() NodePoolAutoscalingOutput {
	return o.ApplyT(func(v *NodePoolAutoscaling) NodePoolAutoscaling { return *v }).(NodePoolAutoscalingOutput)
}

// Can this node pool be deleted automatically.
func (o NodePoolAutoscalingPtrOutput) Autoprovisioned() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NodePoolAutoscaling) *bool {
		if v == nil {
			return nil
		}
		return v.Autoprovisioned
	}).(pulumi.BoolPtrOutput)
}

// Is autoscaling enabled for this node pool.
func (o NodePoolAutoscalingPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NodePoolAutoscaling) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Maximum number of nodes in the NodePool. Must be >= min_node_count. There has to enough quota to scale up the cluster.
func (o NodePoolAutoscalingPtrOutput) MaxNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodePoolAutoscaling) *int {
		if v == nil {
			return nil
		}
		return v.MaxNodeCount
	}).(pulumi.IntPtrOutput)
}

// Minimum number of nodes in the NodePool. Must be >= 1 and <= max_node_count.
func (o NodePoolAutoscalingPtrOutput) MinNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodePoolAutoscaling) *int {
		if v == nil {
			return nil
		}
		return v.MinNodeCount
	}).(pulumi.IntPtrOutput)
}

// Kubernetes taint is comprised of three fields: key, value, and effect. Effect can only be one of three types: NoSchedule, PreferNoSchedule or NoExecute. See [here](https://kubernetes.io/docs/concepts/configuration/taint-and-toleration) for more information, including usage and the valid values.
type NodeTaint struct {
	// Effect for taint.
	Effect *string `pulumi:"effect"`
	// Key for taint.
	Key *string `pulumi:"key"`
	// Value for taint.
	Value *string `pulumi:"value"`
}

// NodeTaintInput is an input type that accepts NodeTaintArgs and NodeTaintOutput values.
// You can construct a concrete instance of `NodeTaintInput` via:
//
//          NodeTaintArgs{...}
type NodeTaintInput interface {
	pulumi.Input

	ToNodeTaintOutput() NodeTaintOutput
	ToNodeTaintOutputWithContext(context.Context) NodeTaintOutput
}

// Kubernetes taint is comprised of three fields: key, value, and effect. Effect can only be one of three types: NoSchedule, PreferNoSchedule or NoExecute. See [here](https://kubernetes.io/docs/concepts/configuration/taint-and-toleration) for more information, including usage and the valid values.
type NodeTaintArgs struct {
	// Effect for taint.
	Effect pulumi.StringPtrInput `pulumi:"effect"`
	// Key for taint.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Value for taint.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (NodeTaintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeTaint)(nil)).Elem()
}

func (i NodeTaintArgs) ToNodeTaintOutput() NodeTaintOutput {
	return i.ToNodeTaintOutputWithContext(context.Background())
}

func (i NodeTaintArgs) ToNodeTaintOutputWithContext(ctx context.Context) NodeTaintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeTaintOutput)
}

// NodeTaintArrayInput is an input type that accepts NodeTaintArray and NodeTaintArrayOutput values.
// You can construct a concrete instance of `NodeTaintArrayInput` via:
//
//          NodeTaintArray{ NodeTaintArgs{...} }
type NodeTaintArrayInput interface {
	pulumi.Input

	ToNodeTaintArrayOutput() NodeTaintArrayOutput
	ToNodeTaintArrayOutputWithContext(context.Context) NodeTaintArrayOutput
}

type NodeTaintArray []NodeTaintInput

func (NodeTaintArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeTaint)(nil)).Elem()
}

func (i NodeTaintArray) ToNodeTaintArrayOutput() NodeTaintArrayOutput {
	return i.ToNodeTaintArrayOutputWithContext(context.Background())
}

func (i NodeTaintArray) ToNodeTaintArrayOutputWithContext(ctx context.Context) NodeTaintArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeTaintArrayOutput)
}

// Kubernetes taint is comprised of three fields: key, value, and effect. Effect can only be one of three types: NoSchedule, PreferNoSchedule or NoExecute. See [here](https://kubernetes.io/docs/concepts/configuration/taint-and-toleration) for more information, including usage and the valid values.
type NodeTaintOutput struct{ *pulumi.OutputState }

func (NodeTaintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeTaint)(nil)).Elem()
}

func (o NodeTaintOutput) ToNodeTaintOutput() NodeTaintOutput {
	return o
}

func (o NodeTaintOutput) ToNodeTaintOutputWithContext(ctx context.Context) NodeTaintOutput {
	return o
}

// Effect for taint.
func (o NodeTaintOutput) Effect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeTaint) *string { return v.Effect }).(pulumi.StringPtrOutput)
}

// Key for taint.
func (o NodeTaintOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeTaint) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Value for taint.
func (o NodeTaintOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeTaint) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type NodeTaintArrayOutput struct{ *pulumi.OutputState }

func (NodeTaintArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeTaint)(nil)).Elem()
}

func (o NodeTaintArrayOutput) ToNodeTaintArrayOutput() NodeTaintArrayOutput {
	return o
}

func (o NodeTaintArrayOutput) ToNodeTaintArrayOutputWithContext(ctx context.Context) NodeTaintArrayOutput {
	return o
}

func (o NodeTaintArrayOutput) Index(i pulumi.IntInput) NodeTaintOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeTaint {
		return vs[0].([]NodeTaint)[vs[1].(int)]
	}).(NodeTaintOutput)
}

// NotificationConfig is the configuration of notifications.
type NotificationConfig struct {
	// Notification config for Pub/Sub.
	Pubsub *PubSub `pulumi:"pubsub"`
}

// NotificationConfigInput is an input type that accepts NotificationConfigArgs and NotificationConfigOutput values.
// You can construct a concrete instance of `NotificationConfigInput` via:
//
//          NotificationConfigArgs{...}
type NotificationConfigInput interface {
	pulumi.Input

	ToNotificationConfigOutput() NotificationConfigOutput
	ToNotificationConfigOutputWithContext(context.Context) NotificationConfigOutput
}

// NotificationConfig is the configuration of notifications.
type NotificationConfigArgs struct {
	// Notification config for Pub/Sub.
	Pubsub PubSubPtrInput `pulumi:"pubsub"`
}

func (NotificationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationConfig)(nil)).Elem()
}

func (i NotificationConfigArgs) ToNotificationConfigOutput() NotificationConfigOutput {
	return i.ToNotificationConfigOutputWithContext(context.Background())
}

func (i NotificationConfigArgs) ToNotificationConfigOutputWithContext(ctx context.Context) NotificationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationConfigOutput)
}

func (i NotificationConfigArgs) ToNotificationConfigPtrOutput() NotificationConfigPtrOutput {
	return i.ToNotificationConfigPtrOutputWithContext(context.Background())
}

func (i NotificationConfigArgs) ToNotificationConfigPtrOutputWithContext(ctx context.Context) NotificationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationConfigOutput).ToNotificationConfigPtrOutputWithContext(ctx)
}

// NotificationConfigPtrInput is an input type that accepts NotificationConfigArgs, NotificationConfigPtr and NotificationConfigPtrOutput values.
// You can construct a concrete instance of `NotificationConfigPtrInput` via:
//
//          NotificationConfigArgs{...}
//
//  or:
//
//          nil
type NotificationConfigPtrInput interface {
	pulumi.Input

	ToNotificationConfigPtrOutput() NotificationConfigPtrOutput
	ToNotificationConfigPtrOutputWithContext(context.Context) NotificationConfigPtrOutput
}

type notificationConfigPtrType NotificationConfigArgs

func NotificationConfigPtr(v *NotificationConfigArgs) NotificationConfigPtrInput {
	return (*notificationConfigPtrType)(v)
}

func (*notificationConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationConfig)(nil)).Elem()
}

func (i *notificationConfigPtrType) ToNotificationConfigPtrOutput() NotificationConfigPtrOutput {
	return i.ToNotificationConfigPtrOutputWithContext(context.Background())
}

func (i *notificationConfigPtrType) ToNotificationConfigPtrOutputWithContext(ctx context.Context) NotificationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationConfigPtrOutput)
}

// NotificationConfig is the configuration of notifications.
type NotificationConfigOutput struct{ *pulumi.OutputState }

func (NotificationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationConfig)(nil)).Elem()
}

func (o NotificationConfigOutput) ToNotificationConfigOutput() NotificationConfigOutput {
	return o
}

func (o NotificationConfigOutput) ToNotificationConfigOutputWithContext(ctx context.Context) NotificationConfigOutput {
	return o
}

func (o NotificationConfigOutput) ToNotificationConfigPtrOutput() NotificationConfigPtrOutput {
	return o.ToNotificationConfigPtrOutputWithContext(context.Background())
}

func (o NotificationConfigOutput) ToNotificationConfigPtrOutputWithContext(ctx context.Context) NotificationConfigPtrOutput {
	return o.ApplyT(func(v NotificationConfig) *NotificationConfig {
		return &v
	}).(NotificationConfigPtrOutput)
}

// Notification config for Pub/Sub.
func (o NotificationConfigOutput) Pubsub() PubSubPtrOutput {
	return o.ApplyT(func(v NotificationConfig) *PubSub { return v.Pubsub }).(PubSubPtrOutput)
}

type NotificationConfigPtrOutput struct{ *pulumi.OutputState }

func (NotificationConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationConfig)(nil)).Elem()
}

func (o NotificationConfigPtrOutput) ToNotificationConfigPtrOutput() NotificationConfigPtrOutput {
	return o
}

func (o NotificationConfigPtrOutput) ToNotificationConfigPtrOutputWithContext(ctx context.Context) NotificationConfigPtrOutput {
	return o
}

func (o NotificationConfigPtrOutput) Elem() NotificationConfigOutput {
	return o.ApplyT(func(v *NotificationConfig) NotificationConfig { return *v }).(NotificationConfigOutput)
}

// Notification config for Pub/Sub.
func (o NotificationConfigPtrOutput) Pubsub() PubSubPtrOutput {
	return o.ApplyT(func(v *NotificationConfig) *PubSub {
		if v == nil {
			return nil
		}
		return v.Pubsub
	}).(PubSubPtrOutput)
}

// Configuration options for private clusters.
type PrivateClusterConfig struct {
	// Whether the master's internal IP address is used as the cluster endpoint.
	EnablePrivateEndpoint *bool `pulumi:"enablePrivateEndpoint"`
	// Whether nodes have internal IP addresses only. If enabled, all nodes are given only RFC 1918 private addresses and communicate with the master via private networking.
	EnablePrivateNodes *bool `pulumi:"enablePrivateNodes"`
	// Controls master global access settings.
	MasterGlobalAccessConfig *PrivateClusterMasterGlobalAccessConfig `pulumi:"masterGlobalAccessConfig"`
	// The IP range in CIDR notation to use for the hosted master network. This range will be used for assigning internal IP addresses to the master or set of masters, as well as the ILB VIP. This range must not overlap with any other ranges in use within the cluster's network.
	MasterIpv4CidrBlock *string `pulumi:"masterIpv4CidrBlock"`
	// Output only. The peering name in the customer VPC used by this cluster.
	PeeringName *string `pulumi:"peeringName"`
	// Output only. The internal IP address of this cluster's master endpoint.
	PrivateEndpoint *string `pulumi:"privateEndpoint"`
	// Output only. The external IP address of this cluster's master endpoint.
	PublicEndpoint *string `pulumi:"publicEndpoint"`
}

// PrivateClusterConfigInput is an input type that accepts PrivateClusterConfigArgs and PrivateClusterConfigOutput values.
// You can construct a concrete instance of `PrivateClusterConfigInput` via:
//
//          PrivateClusterConfigArgs{...}
type PrivateClusterConfigInput interface {
	pulumi.Input

	ToPrivateClusterConfigOutput() PrivateClusterConfigOutput
	ToPrivateClusterConfigOutputWithContext(context.Context) PrivateClusterConfigOutput
}

// Configuration options for private clusters.
type PrivateClusterConfigArgs struct {
	// Whether the master's internal IP address is used as the cluster endpoint.
	EnablePrivateEndpoint pulumi.BoolPtrInput `pulumi:"enablePrivateEndpoint"`
	// Whether nodes have internal IP addresses only. If enabled, all nodes are given only RFC 1918 private addresses and communicate with the master via private networking.
	EnablePrivateNodes pulumi.BoolPtrInput `pulumi:"enablePrivateNodes"`
	// Controls master global access settings.
	MasterGlobalAccessConfig PrivateClusterMasterGlobalAccessConfigPtrInput `pulumi:"masterGlobalAccessConfig"`
	// The IP range in CIDR notation to use for the hosted master network. This range will be used for assigning internal IP addresses to the master or set of masters, as well as the ILB VIP. This range must not overlap with any other ranges in use within the cluster's network.
	MasterIpv4CidrBlock pulumi.StringPtrInput `pulumi:"masterIpv4CidrBlock"`
	// Output only. The peering name in the customer VPC used by this cluster.
	PeeringName pulumi.StringPtrInput `pulumi:"peeringName"`
	// Output only. The internal IP address of this cluster's master endpoint.
	PrivateEndpoint pulumi.StringPtrInput `pulumi:"privateEndpoint"`
	// Output only. The external IP address of this cluster's master endpoint.
	PublicEndpoint pulumi.StringPtrInput `pulumi:"publicEndpoint"`
}

func (PrivateClusterConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateClusterConfig)(nil)).Elem()
}

func (i PrivateClusterConfigArgs) ToPrivateClusterConfigOutput() PrivateClusterConfigOutput {
	return i.ToPrivateClusterConfigOutputWithContext(context.Background())
}

func (i PrivateClusterConfigArgs) ToPrivateClusterConfigOutputWithContext(ctx context.Context) PrivateClusterConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateClusterConfigOutput)
}

func (i PrivateClusterConfigArgs) ToPrivateClusterConfigPtrOutput() PrivateClusterConfigPtrOutput {
	return i.ToPrivateClusterConfigPtrOutputWithContext(context.Background())
}

func (i PrivateClusterConfigArgs) ToPrivateClusterConfigPtrOutputWithContext(ctx context.Context) PrivateClusterConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateClusterConfigOutput).ToPrivateClusterConfigPtrOutputWithContext(ctx)
}

// PrivateClusterConfigPtrInput is an input type that accepts PrivateClusterConfigArgs, PrivateClusterConfigPtr and PrivateClusterConfigPtrOutput values.
// You can construct a concrete instance of `PrivateClusterConfigPtrInput` via:
//
//          PrivateClusterConfigArgs{...}
//
//  or:
//
//          nil
type PrivateClusterConfigPtrInput interface {
	pulumi.Input

	ToPrivateClusterConfigPtrOutput() PrivateClusterConfigPtrOutput
	ToPrivateClusterConfigPtrOutputWithContext(context.Context) PrivateClusterConfigPtrOutput
}

type privateClusterConfigPtrType PrivateClusterConfigArgs

func PrivateClusterConfigPtr(v *PrivateClusterConfigArgs) PrivateClusterConfigPtrInput {
	return (*privateClusterConfigPtrType)(v)
}

func (*privateClusterConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateClusterConfig)(nil)).Elem()
}

func (i *privateClusterConfigPtrType) ToPrivateClusterConfigPtrOutput() PrivateClusterConfigPtrOutput {
	return i.ToPrivateClusterConfigPtrOutputWithContext(context.Background())
}

func (i *privateClusterConfigPtrType) ToPrivateClusterConfigPtrOutputWithContext(ctx context.Context) PrivateClusterConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateClusterConfigPtrOutput)
}

// Configuration options for private clusters.
type PrivateClusterConfigOutput struct{ *pulumi.OutputState }

func (PrivateClusterConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateClusterConfig)(nil)).Elem()
}

func (o PrivateClusterConfigOutput) ToPrivateClusterConfigOutput() PrivateClusterConfigOutput {
	return o
}

func (o PrivateClusterConfigOutput) ToPrivateClusterConfigOutputWithContext(ctx context.Context) PrivateClusterConfigOutput {
	return o
}

func (o PrivateClusterConfigOutput) ToPrivateClusterConfigPtrOutput() PrivateClusterConfigPtrOutput {
	return o.ToPrivateClusterConfigPtrOutputWithContext(context.Background())
}

func (o PrivateClusterConfigOutput) ToPrivateClusterConfigPtrOutputWithContext(ctx context.Context) PrivateClusterConfigPtrOutput {
	return o.ApplyT(func(v PrivateClusterConfig) *PrivateClusterConfig {
		return &v
	}).(PrivateClusterConfigPtrOutput)
}

// Whether the master's internal IP address is used as the cluster endpoint.
func (o PrivateClusterConfigOutput) EnablePrivateEndpoint() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PrivateClusterConfig) *bool { return v.EnablePrivateEndpoint }).(pulumi.BoolPtrOutput)
}

// Whether nodes have internal IP addresses only. If enabled, all nodes are given only RFC 1918 private addresses and communicate with the master via private networking.
func (o PrivateClusterConfigOutput) EnablePrivateNodes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PrivateClusterConfig) *bool { return v.EnablePrivateNodes }).(pulumi.BoolPtrOutput)
}

// Controls master global access settings.
func (o PrivateClusterConfigOutput) MasterGlobalAccessConfig() PrivateClusterMasterGlobalAccessConfigPtrOutput {
	return o.ApplyT(func(v PrivateClusterConfig) *PrivateClusterMasterGlobalAccessConfig {
		return v.MasterGlobalAccessConfig
	}).(PrivateClusterMasterGlobalAccessConfigPtrOutput)
}

// The IP range in CIDR notation to use for the hosted master network. This range will be used for assigning internal IP addresses to the master or set of masters, as well as the ILB VIP. This range must not overlap with any other ranges in use within the cluster's network.
func (o PrivateClusterConfigOutput) MasterIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateClusterConfig) *string { return v.MasterIpv4CidrBlock }).(pulumi.StringPtrOutput)
}

// Output only. The peering name in the customer VPC used by this cluster.
func (o PrivateClusterConfigOutput) PeeringName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateClusterConfig) *string { return v.PeeringName }).(pulumi.StringPtrOutput)
}

// Output only. The internal IP address of this cluster's master endpoint.
func (o PrivateClusterConfigOutput) PrivateEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateClusterConfig) *string { return v.PrivateEndpoint }).(pulumi.StringPtrOutput)
}

// Output only. The external IP address of this cluster's master endpoint.
func (o PrivateClusterConfigOutput) PublicEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateClusterConfig) *string { return v.PublicEndpoint }).(pulumi.StringPtrOutput)
}

type PrivateClusterConfigPtrOutput struct{ *pulumi.OutputState }

func (PrivateClusterConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateClusterConfig)(nil)).Elem()
}

func (o PrivateClusterConfigPtrOutput) ToPrivateClusterConfigPtrOutput() PrivateClusterConfigPtrOutput {
	return o
}

func (o PrivateClusterConfigPtrOutput) ToPrivateClusterConfigPtrOutputWithContext(ctx context.Context) PrivateClusterConfigPtrOutput {
	return o
}

func (o PrivateClusterConfigPtrOutput) Elem() PrivateClusterConfigOutput {
	return o.ApplyT(func(v *PrivateClusterConfig) PrivateClusterConfig { return *v }).(PrivateClusterConfigOutput)
}

// Whether the master's internal IP address is used as the cluster endpoint.
func (o PrivateClusterConfigPtrOutput) EnablePrivateEndpoint() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PrivateClusterConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnablePrivateEndpoint
	}).(pulumi.BoolPtrOutput)
}

// Whether nodes have internal IP addresses only. If enabled, all nodes are given only RFC 1918 private addresses and communicate with the master via private networking.
func (o PrivateClusterConfigPtrOutput) EnablePrivateNodes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PrivateClusterConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnablePrivateNodes
	}).(pulumi.BoolPtrOutput)
}

// Controls master global access settings.
func (o PrivateClusterConfigPtrOutput) MasterGlobalAccessConfig() PrivateClusterMasterGlobalAccessConfigPtrOutput {
	return o.ApplyT(func(v *PrivateClusterConfig) *PrivateClusterMasterGlobalAccessConfig {
		if v == nil {
			return nil
		}
		return v.MasterGlobalAccessConfig
	}).(PrivateClusterMasterGlobalAccessConfigPtrOutput)
}

// The IP range in CIDR notation to use for the hosted master network. This range will be used for assigning internal IP addresses to the master or set of masters, as well as the ILB VIP. This range must not overlap with any other ranges in use within the cluster's network.
func (o PrivateClusterConfigPtrOutput) MasterIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateClusterConfig) *string {
		if v == nil {
			return nil
		}
		return v.MasterIpv4CidrBlock
	}).(pulumi.StringPtrOutput)
}

// Output only. The peering name in the customer VPC used by this cluster.
func (o PrivateClusterConfigPtrOutput) PeeringName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateClusterConfig) *string {
		if v == nil {
			return nil
		}
		return v.PeeringName
	}).(pulumi.StringPtrOutput)
}

// Output only. The internal IP address of this cluster's master endpoint.
func (o PrivateClusterConfigPtrOutput) PrivateEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateClusterConfig) *string {
		if v == nil {
			return nil
		}
		return v.PrivateEndpoint
	}).(pulumi.StringPtrOutput)
}

// Output only. The external IP address of this cluster's master endpoint.
func (o PrivateClusterConfigPtrOutput) PublicEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateClusterConfig) *string {
		if v == nil {
			return nil
		}
		return v.PublicEndpoint
	}).(pulumi.StringPtrOutput)
}

// Configuration for controlling master global access settings.
type PrivateClusterMasterGlobalAccessConfig struct {
	// Whenever master is accessible globally or not.
	Enabled *bool `pulumi:"enabled"`
}

// PrivateClusterMasterGlobalAccessConfigInput is an input type that accepts PrivateClusterMasterGlobalAccessConfigArgs and PrivateClusterMasterGlobalAccessConfigOutput values.
// You can construct a concrete instance of `PrivateClusterMasterGlobalAccessConfigInput` via:
//
//          PrivateClusterMasterGlobalAccessConfigArgs{...}
type PrivateClusterMasterGlobalAccessConfigInput interface {
	pulumi.Input

	ToPrivateClusterMasterGlobalAccessConfigOutput() PrivateClusterMasterGlobalAccessConfigOutput
	ToPrivateClusterMasterGlobalAccessConfigOutputWithContext(context.Context) PrivateClusterMasterGlobalAccessConfigOutput
}

// Configuration for controlling master global access settings.
type PrivateClusterMasterGlobalAccessConfigArgs struct {
	// Whenever master is accessible globally or not.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (PrivateClusterMasterGlobalAccessConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateClusterMasterGlobalAccessConfig)(nil)).Elem()
}

func (i PrivateClusterMasterGlobalAccessConfigArgs) ToPrivateClusterMasterGlobalAccessConfigOutput() PrivateClusterMasterGlobalAccessConfigOutput {
	return i.ToPrivateClusterMasterGlobalAccessConfigOutputWithContext(context.Background())
}

func (i PrivateClusterMasterGlobalAccessConfigArgs) ToPrivateClusterMasterGlobalAccessConfigOutputWithContext(ctx context.Context) PrivateClusterMasterGlobalAccessConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateClusterMasterGlobalAccessConfigOutput)
}

func (i PrivateClusterMasterGlobalAccessConfigArgs) ToPrivateClusterMasterGlobalAccessConfigPtrOutput() PrivateClusterMasterGlobalAccessConfigPtrOutput {
	return i.ToPrivateClusterMasterGlobalAccessConfigPtrOutputWithContext(context.Background())
}

func (i PrivateClusterMasterGlobalAccessConfigArgs) ToPrivateClusterMasterGlobalAccessConfigPtrOutputWithContext(ctx context.Context) PrivateClusterMasterGlobalAccessConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateClusterMasterGlobalAccessConfigOutput).ToPrivateClusterMasterGlobalAccessConfigPtrOutputWithContext(ctx)
}

// PrivateClusterMasterGlobalAccessConfigPtrInput is an input type that accepts PrivateClusterMasterGlobalAccessConfigArgs, PrivateClusterMasterGlobalAccessConfigPtr and PrivateClusterMasterGlobalAccessConfigPtrOutput values.
// You can construct a concrete instance of `PrivateClusterMasterGlobalAccessConfigPtrInput` via:
//
//          PrivateClusterMasterGlobalAccessConfigArgs{...}
//
//  or:
//
//          nil
type PrivateClusterMasterGlobalAccessConfigPtrInput interface {
	pulumi.Input

	ToPrivateClusterMasterGlobalAccessConfigPtrOutput() PrivateClusterMasterGlobalAccessConfigPtrOutput
	ToPrivateClusterMasterGlobalAccessConfigPtrOutputWithContext(context.Context) PrivateClusterMasterGlobalAccessConfigPtrOutput
}

type privateClusterMasterGlobalAccessConfigPtrType PrivateClusterMasterGlobalAccessConfigArgs

func PrivateClusterMasterGlobalAccessConfigPtr(v *PrivateClusterMasterGlobalAccessConfigArgs) PrivateClusterMasterGlobalAccessConfigPtrInput {
	return (*privateClusterMasterGlobalAccessConfigPtrType)(v)
}

func (*privateClusterMasterGlobalAccessConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateClusterMasterGlobalAccessConfig)(nil)).Elem()
}

func (i *privateClusterMasterGlobalAccessConfigPtrType) ToPrivateClusterMasterGlobalAccessConfigPtrOutput() PrivateClusterMasterGlobalAccessConfigPtrOutput {
	return i.ToPrivateClusterMasterGlobalAccessConfigPtrOutputWithContext(context.Background())
}

func (i *privateClusterMasterGlobalAccessConfigPtrType) ToPrivateClusterMasterGlobalAccessConfigPtrOutputWithContext(ctx context.Context) PrivateClusterMasterGlobalAccessConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateClusterMasterGlobalAccessConfigPtrOutput)
}

// Configuration for controlling master global access settings.
type PrivateClusterMasterGlobalAccessConfigOutput struct{ *pulumi.OutputState }

func (PrivateClusterMasterGlobalAccessConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateClusterMasterGlobalAccessConfig)(nil)).Elem()
}

func (o PrivateClusterMasterGlobalAccessConfigOutput) ToPrivateClusterMasterGlobalAccessConfigOutput() PrivateClusterMasterGlobalAccessConfigOutput {
	return o
}

func (o PrivateClusterMasterGlobalAccessConfigOutput) ToPrivateClusterMasterGlobalAccessConfigOutputWithContext(ctx context.Context) PrivateClusterMasterGlobalAccessConfigOutput {
	return o
}

func (o PrivateClusterMasterGlobalAccessConfigOutput) ToPrivateClusterMasterGlobalAccessConfigPtrOutput() PrivateClusterMasterGlobalAccessConfigPtrOutput {
	return o.ToPrivateClusterMasterGlobalAccessConfigPtrOutputWithContext(context.Background())
}

func (o PrivateClusterMasterGlobalAccessConfigOutput) ToPrivateClusterMasterGlobalAccessConfigPtrOutputWithContext(ctx context.Context) PrivateClusterMasterGlobalAccessConfigPtrOutput {
	return o.ApplyT(func(v PrivateClusterMasterGlobalAccessConfig) *PrivateClusterMasterGlobalAccessConfig {
		return &v
	}).(PrivateClusterMasterGlobalAccessConfigPtrOutput)
}

// Whenever master is accessible globally or not.
func (o PrivateClusterMasterGlobalAccessConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PrivateClusterMasterGlobalAccessConfig) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type PrivateClusterMasterGlobalAccessConfigPtrOutput struct{ *pulumi.OutputState }

func (PrivateClusterMasterGlobalAccessConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateClusterMasterGlobalAccessConfig)(nil)).Elem()
}

func (o PrivateClusterMasterGlobalAccessConfigPtrOutput) ToPrivateClusterMasterGlobalAccessConfigPtrOutput() PrivateClusterMasterGlobalAccessConfigPtrOutput {
	return o
}

func (o PrivateClusterMasterGlobalAccessConfigPtrOutput) ToPrivateClusterMasterGlobalAccessConfigPtrOutputWithContext(ctx context.Context) PrivateClusterMasterGlobalAccessConfigPtrOutput {
	return o
}

func (o PrivateClusterMasterGlobalAccessConfigPtrOutput) Elem() PrivateClusterMasterGlobalAccessConfigOutput {
	return o.ApplyT(func(v *PrivateClusterMasterGlobalAccessConfig) PrivateClusterMasterGlobalAccessConfig { return *v }).(PrivateClusterMasterGlobalAccessConfigOutput)
}

// Whenever master is accessible globally or not.
func (o PrivateClusterMasterGlobalAccessConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PrivateClusterMasterGlobalAccessConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Pub/Sub specific notification config.
type PubSub struct {
	// Enable notifications for Pub/Sub.
	Enabled *bool `pulumi:"enabled"`
	// The desired Pub/Sub topic to which notifications will be sent by GKE. Format is `projects/{project}/topics/{topic}`.
	Topic *string `pulumi:"topic"`
}

// PubSubInput is an input type that accepts PubSubArgs and PubSubOutput values.
// You can construct a concrete instance of `PubSubInput` via:
//
//          PubSubArgs{...}
type PubSubInput interface {
	pulumi.Input

	ToPubSubOutput() PubSubOutput
	ToPubSubOutputWithContext(context.Context) PubSubOutput
}

// Pub/Sub specific notification config.
type PubSubArgs struct {
	// Enable notifications for Pub/Sub.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The desired Pub/Sub topic to which notifications will be sent by GKE. Format is `projects/{project}/topics/{topic}`.
	Topic pulumi.StringPtrInput `pulumi:"topic"`
}

func (PubSubArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PubSub)(nil)).Elem()
}

func (i PubSubArgs) ToPubSubOutput() PubSubOutput {
	return i.ToPubSubOutputWithContext(context.Background())
}

func (i PubSubArgs) ToPubSubOutputWithContext(ctx context.Context) PubSubOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PubSubOutput)
}

func (i PubSubArgs) ToPubSubPtrOutput() PubSubPtrOutput {
	return i.ToPubSubPtrOutputWithContext(context.Background())
}

func (i PubSubArgs) ToPubSubPtrOutputWithContext(ctx context.Context) PubSubPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PubSubOutput).ToPubSubPtrOutputWithContext(ctx)
}

// PubSubPtrInput is an input type that accepts PubSubArgs, PubSubPtr and PubSubPtrOutput values.
// You can construct a concrete instance of `PubSubPtrInput` via:
//
//          PubSubArgs{...}
//
//  or:
//
//          nil
type PubSubPtrInput interface {
	pulumi.Input

	ToPubSubPtrOutput() PubSubPtrOutput
	ToPubSubPtrOutputWithContext(context.Context) PubSubPtrOutput
}

type pubSubPtrType PubSubArgs

func PubSubPtr(v *PubSubArgs) PubSubPtrInput {
	return (*pubSubPtrType)(v)
}

func (*pubSubPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PubSub)(nil)).Elem()
}

func (i *pubSubPtrType) ToPubSubPtrOutput() PubSubPtrOutput {
	return i.ToPubSubPtrOutputWithContext(context.Background())
}

func (i *pubSubPtrType) ToPubSubPtrOutputWithContext(ctx context.Context) PubSubPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PubSubPtrOutput)
}

// Pub/Sub specific notification config.
type PubSubOutput struct{ *pulumi.OutputState }

func (PubSubOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PubSub)(nil)).Elem()
}

func (o PubSubOutput) ToPubSubOutput() PubSubOutput {
	return o
}

func (o PubSubOutput) ToPubSubOutputWithContext(ctx context.Context) PubSubOutput {
	return o
}

func (o PubSubOutput) ToPubSubPtrOutput() PubSubPtrOutput {
	return o.ToPubSubPtrOutputWithContext(context.Background())
}

func (o PubSubOutput) ToPubSubPtrOutputWithContext(ctx context.Context) PubSubPtrOutput {
	return o.ApplyT(func(v PubSub) *PubSub {
		return &v
	}).(PubSubPtrOutput)
}

// Enable notifications for Pub/Sub.
func (o PubSubOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PubSub) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The desired Pub/Sub topic to which notifications will be sent by GKE. Format is `projects/{project}/topics/{topic}`.
func (o PubSubOutput) Topic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PubSub) *string { return v.Topic }).(pulumi.StringPtrOutput)
}

type PubSubPtrOutput struct{ *pulumi.OutputState }

func (PubSubPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PubSub)(nil)).Elem()
}

func (o PubSubPtrOutput) ToPubSubPtrOutput() PubSubPtrOutput {
	return o
}

func (o PubSubPtrOutput) ToPubSubPtrOutputWithContext(ctx context.Context) PubSubPtrOutput {
	return o
}

func (o PubSubPtrOutput) Elem() PubSubOutput {
	return o.ApplyT(func(v *PubSub) PubSub { return *v }).(PubSubOutput)
}

// Enable notifications for Pub/Sub.
func (o PubSubPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PubSub) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The desired Pub/Sub topic to which notifications will be sent by GKE. Format is `projects/{project}/topics/{topic}`.
func (o PubSubPtrOutput) Topic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PubSub) *string {
		if v == nil {
			return nil
		}
		return v.Topic
	}).(pulumi.StringPtrOutput)
}

// Represents an arbitrary window of time that recurs.
type RecurringTimeWindow struct {
	// An RRULE (https://tools.ietf.org/html/rfc5545#section-3.8.5.3) for how this window reccurs. They go on for the span of time between the start and end time. For example, to have something repeat every weekday, you'd use: `FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR` To repeat some window daily (equivalent to the DailyMaintenanceWindow): `FREQ=DAILY` For the first weekend of every month: `FREQ=MONTHLY;BYSETPOS=1;BYDAY=SA,SU` This specifies how frequently the window starts. Eg, if you wanted to have a 9-5 UTC-4 window every weekday, you'd use something like: ```start time = 2019-01-01T09:00:00-0400 end time = 2019-01-01T17:00:00-0400 recurrence = FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR``` Windows can span multiple days. Eg, to make the window encompass every weekend from midnight Saturday till the last minute of Sunday UTC: ```start time = 2019-01-05T00:00:00Z end time = 2019-01-07T23:59:00Z recurrence = FREQ=WEEKLY;BYDAY=SA``` Note the start and end time's specific dates are largely arbitrary except to specify duration of the window and when it first starts. The FREQ values of HOURLY, MINUTELY, and SECONDLY are not supported.
	Recurrence *string `pulumi:"recurrence"`
	// The window of the first recurrence.
	Window *TimeWindow `pulumi:"window"`
}

// RecurringTimeWindowInput is an input type that accepts RecurringTimeWindowArgs and RecurringTimeWindowOutput values.
// You can construct a concrete instance of `RecurringTimeWindowInput` via:
//
//          RecurringTimeWindowArgs{...}
type RecurringTimeWindowInput interface {
	pulumi.Input

	ToRecurringTimeWindowOutput() RecurringTimeWindowOutput
	ToRecurringTimeWindowOutputWithContext(context.Context) RecurringTimeWindowOutput
}

// Represents an arbitrary window of time that recurs.
type RecurringTimeWindowArgs struct {
	// An RRULE (https://tools.ietf.org/html/rfc5545#section-3.8.5.3) for how this window reccurs. They go on for the span of time between the start and end time. For example, to have something repeat every weekday, you'd use: `FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR` To repeat some window daily (equivalent to the DailyMaintenanceWindow): `FREQ=DAILY` For the first weekend of every month: `FREQ=MONTHLY;BYSETPOS=1;BYDAY=SA,SU` This specifies how frequently the window starts. Eg, if you wanted to have a 9-5 UTC-4 window every weekday, you'd use something like: ```start time = 2019-01-01T09:00:00-0400 end time = 2019-01-01T17:00:00-0400 recurrence = FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR``` Windows can span multiple days. Eg, to make the window encompass every weekend from midnight Saturday till the last minute of Sunday UTC: ```start time = 2019-01-05T00:00:00Z end time = 2019-01-07T23:59:00Z recurrence = FREQ=WEEKLY;BYDAY=SA``` Note the start and end time's specific dates are largely arbitrary except to specify duration of the window and when it first starts. The FREQ values of HOURLY, MINUTELY, and SECONDLY are not supported.
	Recurrence pulumi.StringPtrInput `pulumi:"recurrence"`
	// The window of the first recurrence.
	Window TimeWindowPtrInput `pulumi:"window"`
}

func (RecurringTimeWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurringTimeWindow)(nil)).Elem()
}

func (i RecurringTimeWindowArgs) ToRecurringTimeWindowOutput() RecurringTimeWindowOutput {
	return i.ToRecurringTimeWindowOutputWithContext(context.Background())
}

func (i RecurringTimeWindowArgs) ToRecurringTimeWindowOutputWithContext(ctx context.Context) RecurringTimeWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurringTimeWindowOutput)
}

func (i RecurringTimeWindowArgs) ToRecurringTimeWindowPtrOutput() RecurringTimeWindowPtrOutput {
	return i.ToRecurringTimeWindowPtrOutputWithContext(context.Background())
}

func (i RecurringTimeWindowArgs) ToRecurringTimeWindowPtrOutputWithContext(ctx context.Context) RecurringTimeWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurringTimeWindowOutput).ToRecurringTimeWindowPtrOutputWithContext(ctx)
}

// RecurringTimeWindowPtrInput is an input type that accepts RecurringTimeWindowArgs, RecurringTimeWindowPtr and RecurringTimeWindowPtrOutput values.
// You can construct a concrete instance of `RecurringTimeWindowPtrInput` via:
//
//          RecurringTimeWindowArgs{...}
//
//  or:
//
//          nil
type RecurringTimeWindowPtrInput interface {
	pulumi.Input

	ToRecurringTimeWindowPtrOutput() RecurringTimeWindowPtrOutput
	ToRecurringTimeWindowPtrOutputWithContext(context.Context) RecurringTimeWindowPtrOutput
}

type recurringTimeWindowPtrType RecurringTimeWindowArgs

func RecurringTimeWindowPtr(v *RecurringTimeWindowArgs) RecurringTimeWindowPtrInput {
	return (*recurringTimeWindowPtrType)(v)
}

func (*recurringTimeWindowPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RecurringTimeWindow)(nil)).Elem()
}

func (i *recurringTimeWindowPtrType) ToRecurringTimeWindowPtrOutput() RecurringTimeWindowPtrOutput {
	return i.ToRecurringTimeWindowPtrOutputWithContext(context.Background())
}

func (i *recurringTimeWindowPtrType) ToRecurringTimeWindowPtrOutputWithContext(ctx context.Context) RecurringTimeWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurringTimeWindowPtrOutput)
}

// Represents an arbitrary window of time that recurs.
type RecurringTimeWindowOutput struct{ *pulumi.OutputState }

func (RecurringTimeWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurringTimeWindow)(nil)).Elem()
}

func (o RecurringTimeWindowOutput) ToRecurringTimeWindowOutput() RecurringTimeWindowOutput {
	return o
}

func (o RecurringTimeWindowOutput) ToRecurringTimeWindowOutputWithContext(ctx context.Context) RecurringTimeWindowOutput {
	return o
}

func (o RecurringTimeWindowOutput) ToRecurringTimeWindowPtrOutput() RecurringTimeWindowPtrOutput {
	return o.ToRecurringTimeWindowPtrOutputWithContext(context.Background())
}

func (o RecurringTimeWindowOutput) ToRecurringTimeWindowPtrOutputWithContext(ctx context.Context) RecurringTimeWindowPtrOutput {
	return o.ApplyT(func(v RecurringTimeWindow) *RecurringTimeWindow {
		return &v
	}).(RecurringTimeWindowPtrOutput)
}

// An RRULE (https://tools.ietf.org/html/rfc5545#section-3.8.5.3) for how this window reccurs. They go on for the span of time between the start and end time. For example, to have something repeat every weekday, you'd use: `FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR` To repeat some window daily (equivalent to the DailyMaintenanceWindow): `FREQ=DAILY` For the first weekend of every month: `FREQ=MONTHLY;BYSETPOS=1;BYDAY=SA,SU` This specifies how frequently the window starts. Eg, if you wanted to have a 9-5 UTC-4 window every weekday, you'd use something like: ```start time = 2019-01-01T09:00:00-0400 end time = 2019-01-01T17:00:00-0400 recurrence = FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR``` Windows can span multiple days. Eg, to make the window encompass every weekend from midnight Saturday till the last minute of Sunday UTC: ```start time = 2019-01-05T00:00:00Z end time = 2019-01-07T23:59:00Z recurrence = FREQ=WEEKLY;BYDAY=SA``` Note the start and end time's specific dates are largely arbitrary except to specify duration of the window and when it first starts. The FREQ values of HOURLY, MINUTELY, and SECONDLY are not supported.
func (o RecurringTimeWindowOutput) Recurrence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecurringTimeWindow) *string { return v.Recurrence }).(pulumi.StringPtrOutput)
}

// The window of the first recurrence.
func (o RecurringTimeWindowOutput) Window() TimeWindowPtrOutput {
	return o.ApplyT(func(v RecurringTimeWindow) *TimeWindow { return v.Window }).(TimeWindowPtrOutput)
}

type RecurringTimeWindowPtrOutput struct{ *pulumi.OutputState }

func (RecurringTimeWindowPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecurringTimeWindow)(nil)).Elem()
}

func (o RecurringTimeWindowPtrOutput) ToRecurringTimeWindowPtrOutput() RecurringTimeWindowPtrOutput {
	return o
}

func (o RecurringTimeWindowPtrOutput) ToRecurringTimeWindowPtrOutputWithContext(ctx context.Context) RecurringTimeWindowPtrOutput {
	return o
}

func (o RecurringTimeWindowPtrOutput) Elem() RecurringTimeWindowOutput {
	return o.ApplyT(func(v *RecurringTimeWindow) RecurringTimeWindow { return *v }).(RecurringTimeWindowOutput)
}

// An RRULE (https://tools.ietf.org/html/rfc5545#section-3.8.5.3) for how this window reccurs. They go on for the span of time between the start and end time. For example, to have something repeat every weekday, you'd use: `FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR` To repeat some window daily (equivalent to the DailyMaintenanceWindow): `FREQ=DAILY` For the first weekend of every month: `FREQ=MONTHLY;BYSETPOS=1;BYDAY=SA,SU` This specifies how frequently the window starts. Eg, if you wanted to have a 9-5 UTC-4 window every weekday, you'd use something like: ```start time = 2019-01-01T09:00:00-0400 end time = 2019-01-01T17:00:00-0400 recurrence = FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR``` Windows can span multiple days. Eg, to make the window encompass every weekend from midnight Saturday till the last minute of Sunday UTC: ```start time = 2019-01-05T00:00:00Z end time = 2019-01-07T23:59:00Z recurrence = FREQ=WEEKLY;BYDAY=SA``` Note the start and end time's specific dates are largely arbitrary except to specify duration of the window and when it first starts. The FREQ values of HOURLY, MINUTELY, and SECONDLY are not supported.
func (o RecurringTimeWindowPtrOutput) Recurrence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurringTimeWindow) *string {
		if v == nil {
			return nil
		}
		return v.Recurrence
	}).(pulumi.StringPtrOutput)
}

// The window of the first recurrence.
func (o RecurringTimeWindowPtrOutput) Window() TimeWindowPtrOutput {
	return o.ApplyT(func(v *RecurringTimeWindow) *TimeWindow {
		if v == nil {
			return nil
		}
		return v.Window
	}).(TimeWindowPtrOutput)
}

// ReleaseChannel indicates which release channel a cluster is subscribed to. Release channels are arranged in order of risk. When a cluster is subscribed to a release channel, Google maintains both the master version and the node version. Node auto-upgrade defaults to true and cannot be disabled.
type ReleaseChannel struct {
	// channel specifies which release channel the cluster is subscribed to.
	Channel *string `pulumi:"channel"`
}

// ReleaseChannelInput is an input type that accepts ReleaseChannelArgs and ReleaseChannelOutput values.
// You can construct a concrete instance of `ReleaseChannelInput` via:
//
//          ReleaseChannelArgs{...}
type ReleaseChannelInput interface {
	pulumi.Input

	ToReleaseChannelOutput() ReleaseChannelOutput
	ToReleaseChannelOutputWithContext(context.Context) ReleaseChannelOutput
}

// ReleaseChannel indicates which release channel a cluster is subscribed to. Release channels are arranged in order of risk. When a cluster is subscribed to a release channel, Google maintains both the master version and the node version. Node auto-upgrade defaults to true and cannot be disabled.
type ReleaseChannelArgs struct {
	// channel specifies which release channel the cluster is subscribed to.
	Channel pulumi.StringPtrInput `pulumi:"channel"`
}

func (ReleaseChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReleaseChannel)(nil)).Elem()
}

func (i ReleaseChannelArgs) ToReleaseChannelOutput() ReleaseChannelOutput {
	return i.ToReleaseChannelOutputWithContext(context.Background())
}

func (i ReleaseChannelArgs) ToReleaseChannelOutputWithContext(ctx context.Context) ReleaseChannelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReleaseChannelOutput)
}

func (i ReleaseChannelArgs) ToReleaseChannelPtrOutput() ReleaseChannelPtrOutput {
	return i.ToReleaseChannelPtrOutputWithContext(context.Background())
}

func (i ReleaseChannelArgs) ToReleaseChannelPtrOutputWithContext(ctx context.Context) ReleaseChannelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReleaseChannelOutput).ToReleaseChannelPtrOutputWithContext(ctx)
}

// ReleaseChannelPtrInput is an input type that accepts ReleaseChannelArgs, ReleaseChannelPtr and ReleaseChannelPtrOutput values.
// You can construct a concrete instance of `ReleaseChannelPtrInput` via:
//
//          ReleaseChannelArgs{...}
//
//  or:
//
//          nil
type ReleaseChannelPtrInput interface {
	pulumi.Input

	ToReleaseChannelPtrOutput() ReleaseChannelPtrOutput
	ToReleaseChannelPtrOutputWithContext(context.Context) ReleaseChannelPtrOutput
}

type releaseChannelPtrType ReleaseChannelArgs

func ReleaseChannelPtr(v *ReleaseChannelArgs) ReleaseChannelPtrInput {
	return (*releaseChannelPtrType)(v)
}

func (*releaseChannelPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReleaseChannel)(nil)).Elem()
}

func (i *releaseChannelPtrType) ToReleaseChannelPtrOutput() ReleaseChannelPtrOutput {
	return i.ToReleaseChannelPtrOutputWithContext(context.Background())
}

func (i *releaseChannelPtrType) ToReleaseChannelPtrOutputWithContext(ctx context.Context) ReleaseChannelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReleaseChannelPtrOutput)
}

// ReleaseChannel indicates which release channel a cluster is subscribed to. Release channels are arranged in order of risk. When a cluster is subscribed to a release channel, Google maintains both the master version and the node version. Node auto-upgrade defaults to true and cannot be disabled.
type ReleaseChannelOutput struct{ *pulumi.OutputState }

func (ReleaseChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReleaseChannel)(nil)).Elem()
}

func (o ReleaseChannelOutput) ToReleaseChannelOutput() ReleaseChannelOutput {
	return o
}

func (o ReleaseChannelOutput) ToReleaseChannelOutputWithContext(ctx context.Context) ReleaseChannelOutput {
	return o
}

func (o ReleaseChannelOutput) ToReleaseChannelPtrOutput() ReleaseChannelPtrOutput {
	return o.ToReleaseChannelPtrOutputWithContext(context.Background())
}

func (o ReleaseChannelOutput) ToReleaseChannelPtrOutputWithContext(ctx context.Context) ReleaseChannelPtrOutput {
	return o.ApplyT(func(v ReleaseChannel) *ReleaseChannel {
		return &v
	}).(ReleaseChannelPtrOutput)
}

// channel specifies which release channel the cluster is subscribed to.
func (o ReleaseChannelOutput) Channel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReleaseChannel) *string { return v.Channel }).(pulumi.StringPtrOutput)
}

type ReleaseChannelPtrOutput struct{ *pulumi.OutputState }

func (ReleaseChannelPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReleaseChannel)(nil)).Elem()
}

func (o ReleaseChannelPtrOutput) ToReleaseChannelPtrOutput() ReleaseChannelPtrOutput {
	return o
}

func (o ReleaseChannelPtrOutput) ToReleaseChannelPtrOutputWithContext(ctx context.Context) ReleaseChannelPtrOutput {
	return o
}

func (o ReleaseChannelPtrOutput) Elem() ReleaseChannelOutput {
	return o.ApplyT(func(v *ReleaseChannel) ReleaseChannel { return *v }).(ReleaseChannelOutput)
}

// channel specifies which release channel the cluster is subscribed to.
func (o ReleaseChannelPtrOutput) Channel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReleaseChannel) *string {
		if v == nil {
			return nil
		}
		return v.Channel
	}).(pulumi.StringPtrOutput)
}

// [ReservationAffinity](https://cloud.google.com/compute/docs/instances/reserving-zonal-resources) is the configuration of desired reservation which instances could take capacity from.
type ReservationAffinity struct {
	// Corresponds to the type of reservation consumption.
	ConsumeReservationType *string `pulumi:"consumeReservationType"`
	// Corresponds to the label key of a reservation resource. To target a SPECIFIC_RESERVATION by name, specify "googleapis.com/reservation-name" as the key and specify the name of your reservation as its value.
	Key *string `pulumi:"key"`
	// Corresponds to the label value(s) of reservation resource(s).
	Values []string `pulumi:"values"`
}

// ReservationAffinityInput is an input type that accepts ReservationAffinityArgs and ReservationAffinityOutput values.
// You can construct a concrete instance of `ReservationAffinityInput` via:
//
//          ReservationAffinityArgs{...}
type ReservationAffinityInput interface {
	pulumi.Input

	ToReservationAffinityOutput() ReservationAffinityOutput
	ToReservationAffinityOutputWithContext(context.Context) ReservationAffinityOutput
}

// [ReservationAffinity](https://cloud.google.com/compute/docs/instances/reserving-zonal-resources) is the configuration of desired reservation which instances could take capacity from.
type ReservationAffinityArgs struct {
	// Corresponds to the type of reservation consumption.
	ConsumeReservationType pulumi.StringPtrInput `pulumi:"consumeReservationType"`
	// Corresponds to the label key of a reservation resource. To target a SPECIFIC_RESERVATION by name, specify "googleapis.com/reservation-name" as the key and specify the name of your reservation as its value.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Corresponds to the label value(s) of reservation resource(s).
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ReservationAffinityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReservationAffinity)(nil)).Elem()
}

func (i ReservationAffinityArgs) ToReservationAffinityOutput() ReservationAffinityOutput {
	return i.ToReservationAffinityOutputWithContext(context.Background())
}

func (i ReservationAffinityArgs) ToReservationAffinityOutputWithContext(ctx context.Context) ReservationAffinityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservationAffinityOutput)
}

func (i ReservationAffinityArgs) ToReservationAffinityPtrOutput() ReservationAffinityPtrOutput {
	return i.ToReservationAffinityPtrOutputWithContext(context.Background())
}

func (i ReservationAffinityArgs) ToReservationAffinityPtrOutputWithContext(ctx context.Context) ReservationAffinityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservationAffinityOutput).ToReservationAffinityPtrOutputWithContext(ctx)
}

// ReservationAffinityPtrInput is an input type that accepts ReservationAffinityArgs, ReservationAffinityPtr and ReservationAffinityPtrOutput values.
// You can construct a concrete instance of `ReservationAffinityPtrInput` via:
//
//          ReservationAffinityArgs{...}
//
//  or:
//
//          nil
type ReservationAffinityPtrInput interface {
	pulumi.Input

	ToReservationAffinityPtrOutput() ReservationAffinityPtrOutput
	ToReservationAffinityPtrOutputWithContext(context.Context) ReservationAffinityPtrOutput
}

type reservationAffinityPtrType ReservationAffinityArgs

func ReservationAffinityPtr(v *ReservationAffinityArgs) ReservationAffinityPtrInput {
	return (*reservationAffinityPtrType)(v)
}

func (*reservationAffinityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReservationAffinity)(nil)).Elem()
}

func (i *reservationAffinityPtrType) ToReservationAffinityPtrOutput() ReservationAffinityPtrOutput {
	return i.ToReservationAffinityPtrOutputWithContext(context.Background())
}

func (i *reservationAffinityPtrType) ToReservationAffinityPtrOutputWithContext(ctx context.Context) ReservationAffinityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservationAffinityPtrOutput)
}

// [ReservationAffinity](https://cloud.google.com/compute/docs/instances/reserving-zonal-resources) is the configuration of desired reservation which instances could take capacity from.
type ReservationAffinityOutput struct{ *pulumi.OutputState }

func (ReservationAffinityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReservationAffinity)(nil)).Elem()
}

func (o ReservationAffinityOutput) ToReservationAffinityOutput() ReservationAffinityOutput {
	return o
}

func (o ReservationAffinityOutput) ToReservationAffinityOutputWithContext(ctx context.Context) ReservationAffinityOutput {
	return o
}

func (o ReservationAffinityOutput) ToReservationAffinityPtrOutput() ReservationAffinityPtrOutput {
	return o.ToReservationAffinityPtrOutputWithContext(context.Background())
}

func (o ReservationAffinityOutput) ToReservationAffinityPtrOutputWithContext(ctx context.Context) ReservationAffinityPtrOutput {
	return o.ApplyT(func(v ReservationAffinity) *ReservationAffinity {
		return &v
	}).(ReservationAffinityPtrOutput)
}

// Corresponds to the type of reservation consumption.
func (o ReservationAffinityOutput) ConsumeReservationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReservationAffinity) *string { return v.ConsumeReservationType }).(pulumi.StringPtrOutput)
}

// Corresponds to the label key of a reservation resource. To target a SPECIFIC_RESERVATION by name, specify "googleapis.com/reservation-name" as the key and specify the name of your reservation as its value.
func (o ReservationAffinityOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReservationAffinity) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Corresponds to the label value(s) of reservation resource(s).
func (o ReservationAffinityOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ReservationAffinity) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ReservationAffinityPtrOutput struct{ *pulumi.OutputState }

func (ReservationAffinityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReservationAffinity)(nil)).Elem()
}

func (o ReservationAffinityPtrOutput) ToReservationAffinityPtrOutput() ReservationAffinityPtrOutput {
	return o
}

func (o ReservationAffinityPtrOutput) ToReservationAffinityPtrOutputWithContext(ctx context.Context) ReservationAffinityPtrOutput {
	return o
}

func (o ReservationAffinityPtrOutput) Elem() ReservationAffinityOutput {
	return o.ApplyT(func(v *ReservationAffinity) ReservationAffinity { return *v }).(ReservationAffinityOutput)
}

// Corresponds to the type of reservation consumption.
func (o ReservationAffinityPtrOutput) ConsumeReservationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReservationAffinity) *string {
		if v == nil {
			return nil
		}
		return v.ConsumeReservationType
	}).(pulumi.StringPtrOutput)
}

// Corresponds to the label key of a reservation resource. To target a SPECIFIC_RESERVATION by name, specify "googleapis.com/reservation-name" as the key and specify the name of your reservation as its value.
func (o ReservationAffinityPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReservationAffinity) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Corresponds to the label value(s) of reservation resource(s).
func (o ReservationAffinityPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ReservationAffinity) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

// Contains information about amount of some resource in the cluster. For memory, value should be in GB.
type ResourceLimit struct {
	// Maximum amount of the resource in the cluster.
	Maximum *string `pulumi:"maximum"`
	// Minimum amount of the resource in the cluster.
	Minimum *string `pulumi:"minimum"`
	// Resource name "cpu", "memory" or gpu-specific string.
	ResourceType *string `pulumi:"resourceType"`
}

// ResourceLimitInput is an input type that accepts ResourceLimitArgs and ResourceLimitOutput values.
// You can construct a concrete instance of `ResourceLimitInput` via:
//
//          ResourceLimitArgs{...}
type ResourceLimitInput interface {
	pulumi.Input

	ToResourceLimitOutput() ResourceLimitOutput
	ToResourceLimitOutputWithContext(context.Context) ResourceLimitOutput
}

// Contains information about amount of some resource in the cluster. For memory, value should be in GB.
type ResourceLimitArgs struct {
	// Maximum amount of the resource in the cluster.
	Maximum pulumi.StringPtrInput `pulumi:"maximum"`
	// Minimum amount of the resource in the cluster.
	Minimum pulumi.StringPtrInput `pulumi:"minimum"`
	// Resource name "cpu", "memory" or gpu-specific string.
	ResourceType pulumi.StringPtrInput `pulumi:"resourceType"`
}

func (ResourceLimitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLimit)(nil)).Elem()
}

func (i ResourceLimitArgs) ToResourceLimitOutput() ResourceLimitOutput {
	return i.ToResourceLimitOutputWithContext(context.Background())
}

func (i ResourceLimitArgs) ToResourceLimitOutputWithContext(ctx context.Context) ResourceLimitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLimitOutput)
}

// ResourceLimitArrayInput is an input type that accepts ResourceLimitArray and ResourceLimitArrayOutput values.
// You can construct a concrete instance of `ResourceLimitArrayInput` via:
//
//          ResourceLimitArray{ ResourceLimitArgs{...} }
type ResourceLimitArrayInput interface {
	pulumi.Input

	ToResourceLimitArrayOutput() ResourceLimitArrayOutput
	ToResourceLimitArrayOutputWithContext(context.Context) ResourceLimitArrayOutput
}

type ResourceLimitArray []ResourceLimitInput

func (ResourceLimitArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceLimit)(nil)).Elem()
}

func (i ResourceLimitArray) ToResourceLimitArrayOutput() ResourceLimitArrayOutput {
	return i.ToResourceLimitArrayOutputWithContext(context.Background())
}

func (i ResourceLimitArray) ToResourceLimitArrayOutputWithContext(ctx context.Context) ResourceLimitArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLimitArrayOutput)
}

// Contains information about amount of some resource in the cluster. For memory, value should be in GB.
type ResourceLimitOutput struct{ *pulumi.OutputState }

func (ResourceLimitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLimit)(nil)).Elem()
}

func (o ResourceLimitOutput) ToResourceLimitOutput() ResourceLimitOutput {
	return o
}

func (o ResourceLimitOutput) ToResourceLimitOutputWithContext(ctx context.Context) ResourceLimitOutput {
	return o
}

// Maximum amount of the resource in the cluster.
func (o ResourceLimitOutput) Maximum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceLimit) *string { return v.Maximum }).(pulumi.StringPtrOutput)
}

// Minimum amount of the resource in the cluster.
func (o ResourceLimitOutput) Minimum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceLimit) *string { return v.Minimum }).(pulumi.StringPtrOutput)
}

// Resource name "cpu", "memory" or gpu-specific string.
func (o ResourceLimitOutput) ResourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceLimit) *string { return v.ResourceType }).(pulumi.StringPtrOutput)
}

type ResourceLimitArrayOutput struct{ *pulumi.OutputState }

func (ResourceLimitArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceLimit)(nil)).Elem()
}

func (o ResourceLimitArrayOutput) ToResourceLimitArrayOutput() ResourceLimitArrayOutput {
	return o
}

func (o ResourceLimitArrayOutput) ToResourceLimitArrayOutputWithContext(ctx context.Context) ResourceLimitArrayOutput {
	return o
}

func (o ResourceLimitArrayOutput) Index(i pulumi.IntInput) ResourceLimitOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceLimit {
		return vs[0].([]ResourceLimit)[vs[1].(int)]
	}).(ResourceLimitOutput)
}

// Configuration for exporting cluster resource usages.
type ResourceUsageExportConfig struct {
	// Configuration to use BigQuery as usage export destination.
	BigqueryDestination *BigQueryDestination `pulumi:"bigqueryDestination"`
	// Configuration to enable resource consumption metering.
	ConsumptionMeteringConfig *ConsumptionMeteringConfig `pulumi:"consumptionMeteringConfig"`
	// Whether to enable network egress metering for this cluster. If enabled, a daemonset will be created in the cluster to meter network egress traffic.
	EnableNetworkEgressMetering *bool `pulumi:"enableNetworkEgressMetering"`
}

// ResourceUsageExportConfigInput is an input type that accepts ResourceUsageExportConfigArgs and ResourceUsageExportConfigOutput values.
// You can construct a concrete instance of `ResourceUsageExportConfigInput` via:
//
//          ResourceUsageExportConfigArgs{...}
type ResourceUsageExportConfigInput interface {
	pulumi.Input

	ToResourceUsageExportConfigOutput() ResourceUsageExportConfigOutput
	ToResourceUsageExportConfigOutputWithContext(context.Context) ResourceUsageExportConfigOutput
}

// Configuration for exporting cluster resource usages.
type ResourceUsageExportConfigArgs struct {
	// Configuration to use BigQuery as usage export destination.
	BigqueryDestination BigQueryDestinationPtrInput `pulumi:"bigqueryDestination"`
	// Configuration to enable resource consumption metering.
	ConsumptionMeteringConfig ConsumptionMeteringConfigPtrInput `pulumi:"consumptionMeteringConfig"`
	// Whether to enable network egress metering for this cluster. If enabled, a daemonset will be created in the cluster to meter network egress traffic.
	EnableNetworkEgressMetering pulumi.BoolPtrInput `pulumi:"enableNetworkEgressMetering"`
}

func (ResourceUsageExportConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceUsageExportConfig)(nil)).Elem()
}

func (i ResourceUsageExportConfigArgs) ToResourceUsageExportConfigOutput() ResourceUsageExportConfigOutput {
	return i.ToResourceUsageExportConfigOutputWithContext(context.Background())
}

func (i ResourceUsageExportConfigArgs) ToResourceUsageExportConfigOutputWithContext(ctx context.Context) ResourceUsageExportConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceUsageExportConfigOutput)
}

func (i ResourceUsageExportConfigArgs) ToResourceUsageExportConfigPtrOutput() ResourceUsageExportConfigPtrOutput {
	return i.ToResourceUsageExportConfigPtrOutputWithContext(context.Background())
}

func (i ResourceUsageExportConfigArgs) ToResourceUsageExportConfigPtrOutputWithContext(ctx context.Context) ResourceUsageExportConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceUsageExportConfigOutput).ToResourceUsageExportConfigPtrOutputWithContext(ctx)
}

// ResourceUsageExportConfigPtrInput is an input type that accepts ResourceUsageExportConfigArgs, ResourceUsageExportConfigPtr and ResourceUsageExportConfigPtrOutput values.
// You can construct a concrete instance of `ResourceUsageExportConfigPtrInput` via:
//
//          ResourceUsageExportConfigArgs{...}
//
//  or:
//
//          nil
type ResourceUsageExportConfigPtrInput interface {
	pulumi.Input

	ToResourceUsageExportConfigPtrOutput() ResourceUsageExportConfigPtrOutput
	ToResourceUsageExportConfigPtrOutputWithContext(context.Context) ResourceUsageExportConfigPtrOutput
}

type resourceUsageExportConfigPtrType ResourceUsageExportConfigArgs

func ResourceUsageExportConfigPtr(v *ResourceUsageExportConfigArgs) ResourceUsageExportConfigPtrInput {
	return (*resourceUsageExportConfigPtrType)(v)
}

func (*resourceUsageExportConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceUsageExportConfig)(nil)).Elem()
}

func (i *resourceUsageExportConfigPtrType) ToResourceUsageExportConfigPtrOutput() ResourceUsageExportConfigPtrOutput {
	return i.ToResourceUsageExportConfigPtrOutputWithContext(context.Background())
}

func (i *resourceUsageExportConfigPtrType) ToResourceUsageExportConfigPtrOutputWithContext(ctx context.Context) ResourceUsageExportConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceUsageExportConfigPtrOutput)
}

// Configuration for exporting cluster resource usages.
type ResourceUsageExportConfigOutput struct{ *pulumi.OutputState }

func (ResourceUsageExportConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceUsageExportConfig)(nil)).Elem()
}

func (o ResourceUsageExportConfigOutput) ToResourceUsageExportConfigOutput() ResourceUsageExportConfigOutput {
	return o
}

func (o ResourceUsageExportConfigOutput) ToResourceUsageExportConfigOutputWithContext(ctx context.Context) ResourceUsageExportConfigOutput {
	return o
}

func (o ResourceUsageExportConfigOutput) ToResourceUsageExportConfigPtrOutput() ResourceUsageExportConfigPtrOutput {
	return o.ToResourceUsageExportConfigPtrOutputWithContext(context.Background())
}

func (o ResourceUsageExportConfigOutput) ToResourceUsageExportConfigPtrOutputWithContext(ctx context.Context) ResourceUsageExportConfigPtrOutput {
	return o.ApplyT(func(v ResourceUsageExportConfig) *ResourceUsageExportConfig {
		return &v
	}).(ResourceUsageExportConfigPtrOutput)
}

// Configuration to use BigQuery as usage export destination.
func (o ResourceUsageExportConfigOutput) BigqueryDestination() BigQueryDestinationPtrOutput {
	return o.ApplyT(func(v ResourceUsageExportConfig) *BigQueryDestination { return v.BigqueryDestination }).(BigQueryDestinationPtrOutput)
}

// Configuration to enable resource consumption metering.
func (o ResourceUsageExportConfigOutput) ConsumptionMeteringConfig() ConsumptionMeteringConfigPtrOutput {
	return o.ApplyT(func(v ResourceUsageExportConfig) *ConsumptionMeteringConfig { return v.ConsumptionMeteringConfig }).(ConsumptionMeteringConfigPtrOutput)
}

// Whether to enable network egress metering for this cluster. If enabled, a daemonset will be created in the cluster to meter network egress traffic.
func (o ResourceUsageExportConfigOutput) EnableNetworkEgressMetering() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceUsageExportConfig) *bool { return v.EnableNetworkEgressMetering }).(pulumi.BoolPtrOutput)
}

type ResourceUsageExportConfigPtrOutput struct{ *pulumi.OutputState }

func (ResourceUsageExportConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceUsageExportConfig)(nil)).Elem()
}

func (o ResourceUsageExportConfigPtrOutput) ToResourceUsageExportConfigPtrOutput() ResourceUsageExportConfigPtrOutput {
	return o
}

func (o ResourceUsageExportConfigPtrOutput) ToResourceUsageExportConfigPtrOutputWithContext(ctx context.Context) ResourceUsageExportConfigPtrOutput {
	return o
}

func (o ResourceUsageExportConfigPtrOutput) Elem() ResourceUsageExportConfigOutput {
	return o.ApplyT(func(v *ResourceUsageExportConfig) ResourceUsageExportConfig { return *v }).(ResourceUsageExportConfigOutput)
}

// Configuration to use BigQuery as usage export destination.
func (o ResourceUsageExportConfigPtrOutput) BigqueryDestination() BigQueryDestinationPtrOutput {
	return o.ApplyT(func(v *ResourceUsageExportConfig) *BigQueryDestination {
		if v == nil {
			return nil
		}
		return v.BigqueryDestination
	}).(BigQueryDestinationPtrOutput)
}

// Configuration to enable resource consumption metering.
func (o ResourceUsageExportConfigPtrOutput) ConsumptionMeteringConfig() ConsumptionMeteringConfigPtrOutput {
	return o.ApplyT(func(v *ResourceUsageExportConfig) *ConsumptionMeteringConfig {
		if v == nil {
			return nil
		}
		return v.ConsumptionMeteringConfig
	}).(ConsumptionMeteringConfigPtrOutput)
}

// Whether to enable network egress metering for this cluster. If enabled, a daemonset will be created in the cluster to meter network egress traffic.
func (o ResourceUsageExportConfigPtrOutput) EnableNetworkEgressMetering() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceUsageExportConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableNetworkEgressMetering
	}).(pulumi.BoolPtrOutput)
}

// SandboxConfig contains configurations of the sandbox to use for the node.
type SandboxConfig struct {
	// Type of the sandbox to use for the node.
	Type *string `pulumi:"type"`
}

// SandboxConfigInput is an input type that accepts SandboxConfigArgs and SandboxConfigOutput values.
// You can construct a concrete instance of `SandboxConfigInput` via:
//
//          SandboxConfigArgs{...}
type SandboxConfigInput interface {
	pulumi.Input

	ToSandboxConfigOutput() SandboxConfigOutput
	ToSandboxConfigOutputWithContext(context.Context) SandboxConfigOutput
}

// SandboxConfig contains configurations of the sandbox to use for the node.
type SandboxConfigArgs struct {
	// Type of the sandbox to use for the node.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (SandboxConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SandboxConfig)(nil)).Elem()
}

func (i SandboxConfigArgs) ToSandboxConfigOutput() SandboxConfigOutput {
	return i.ToSandboxConfigOutputWithContext(context.Background())
}

func (i SandboxConfigArgs) ToSandboxConfigOutputWithContext(ctx context.Context) SandboxConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SandboxConfigOutput)
}

func (i SandboxConfigArgs) ToSandboxConfigPtrOutput() SandboxConfigPtrOutput {
	return i.ToSandboxConfigPtrOutputWithContext(context.Background())
}

func (i SandboxConfigArgs) ToSandboxConfigPtrOutputWithContext(ctx context.Context) SandboxConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SandboxConfigOutput).ToSandboxConfigPtrOutputWithContext(ctx)
}

// SandboxConfigPtrInput is an input type that accepts SandboxConfigArgs, SandboxConfigPtr and SandboxConfigPtrOutput values.
// You can construct a concrete instance of `SandboxConfigPtrInput` via:
//
//          SandboxConfigArgs{...}
//
//  or:
//
//          nil
type SandboxConfigPtrInput interface {
	pulumi.Input

	ToSandboxConfigPtrOutput() SandboxConfigPtrOutput
	ToSandboxConfigPtrOutputWithContext(context.Context) SandboxConfigPtrOutput
}

type sandboxConfigPtrType SandboxConfigArgs

func SandboxConfigPtr(v *SandboxConfigArgs) SandboxConfigPtrInput {
	return (*sandboxConfigPtrType)(v)
}

func (*sandboxConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SandboxConfig)(nil)).Elem()
}

func (i *sandboxConfigPtrType) ToSandboxConfigPtrOutput() SandboxConfigPtrOutput {
	return i.ToSandboxConfigPtrOutputWithContext(context.Background())
}

func (i *sandboxConfigPtrType) ToSandboxConfigPtrOutputWithContext(ctx context.Context) SandboxConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SandboxConfigPtrOutput)
}

// SandboxConfig contains configurations of the sandbox to use for the node.
type SandboxConfigOutput struct{ *pulumi.OutputState }

func (SandboxConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SandboxConfig)(nil)).Elem()
}

func (o SandboxConfigOutput) ToSandboxConfigOutput() SandboxConfigOutput {
	return o
}

func (o SandboxConfigOutput) ToSandboxConfigOutputWithContext(ctx context.Context) SandboxConfigOutput {
	return o
}

func (o SandboxConfigOutput) ToSandboxConfigPtrOutput() SandboxConfigPtrOutput {
	return o.ToSandboxConfigPtrOutputWithContext(context.Background())
}

func (o SandboxConfigOutput) ToSandboxConfigPtrOutputWithContext(ctx context.Context) SandboxConfigPtrOutput {
	return o.ApplyT(func(v SandboxConfig) *SandboxConfig {
		return &v
	}).(SandboxConfigPtrOutput)
}

// Type of the sandbox to use for the node.
func (o SandboxConfigOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SandboxConfig) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type SandboxConfigPtrOutput struct{ *pulumi.OutputState }

func (SandboxConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SandboxConfig)(nil)).Elem()
}

func (o SandboxConfigPtrOutput) ToSandboxConfigPtrOutput() SandboxConfigPtrOutput {
	return o
}

func (o SandboxConfigPtrOutput) ToSandboxConfigPtrOutputWithContext(ctx context.Context) SandboxConfigPtrOutput {
	return o
}

func (o SandboxConfigPtrOutput) Elem() SandboxConfigOutput {
	return o.ApplyT(func(v *SandboxConfig) SandboxConfig { return *v }).(SandboxConfigOutput)
}

// Type of the sandbox to use for the node.
func (o SandboxConfigPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SandboxConfig) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// A set of Shielded Instance options.
type ShieldedInstanceConfig struct {
	// Defines whether the instance has integrity monitoring enabled. Enables monitoring and attestation of the boot integrity of the instance. The attestation is performed against the integrity policy baseline. This baseline is initially derived from the implicitly trusted boot image when the instance is created.
	EnableIntegrityMonitoring *bool `pulumi:"enableIntegrityMonitoring"`
	// Defines whether the instance has Secure Boot enabled. Secure Boot helps ensure that the system only runs authentic software by verifying the digital signature of all boot components, and halting the boot process if signature verification fails.
	EnableSecureBoot *bool `pulumi:"enableSecureBoot"`
}

// ShieldedInstanceConfigInput is an input type that accepts ShieldedInstanceConfigArgs and ShieldedInstanceConfigOutput values.
// You can construct a concrete instance of `ShieldedInstanceConfigInput` via:
//
//          ShieldedInstanceConfigArgs{...}
type ShieldedInstanceConfigInput interface {
	pulumi.Input

	ToShieldedInstanceConfigOutput() ShieldedInstanceConfigOutput
	ToShieldedInstanceConfigOutputWithContext(context.Context) ShieldedInstanceConfigOutput
}

// A set of Shielded Instance options.
type ShieldedInstanceConfigArgs struct {
	// Defines whether the instance has integrity monitoring enabled. Enables monitoring and attestation of the boot integrity of the instance. The attestation is performed against the integrity policy baseline. This baseline is initially derived from the implicitly trusted boot image when the instance is created.
	EnableIntegrityMonitoring pulumi.BoolPtrInput `pulumi:"enableIntegrityMonitoring"`
	// Defines whether the instance has Secure Boot enabled. Secure Boot helps ensure that the system only runs authentic software by verifying the digital signature of all boot components, and halting the boot process if signature verification fails.
	EnableSecureBoot pulumi.BoolPtrInput `pulumi:"enableSecureBoot"`
}

func (ShieldedInstanceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ShieldedInstanceConfig)(nil)).Elem()
}

func (i ShieldedInstanceConfigArgs) ToShieldedInstanceConfigOutput() ShieldedInstanceConfigOutput {
	return i.ToShieldedInstanceConfigOutputWithContext(context.Background())
}

func (i ShieldedInstanceConfigArgs) ToShieldedInstanceConfigOutputWithContext(ctx context.Context) ShieldedInstanceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShieldedInstanceConfigOutput)
}

func (i ShieldedInstanceConfigArgs) ToShieldedInstanceConfigPtrOutput() ShieldedInstanceConfigPtrOutput {
	return i.ToShieldedInstanceConfigPtrOutputWithContext(context.Background())
}

func (i ShieldedInstanceConfigArgs) ToShieldedInstanceConfigPtrOutputWithContext(ctx context.Context) ShieldedInstanceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShieldedInstanceConfigOutput).ToShieldedInstanceConfigPtrOutputWithContext(ctx)
}

// ShieldedInstanceConfigPtrInput is an input type that accepts ShieldedInstanceConfigArgs, ShieldedInstanceConfigPtr and ShieldedInstanceConfigPtrOutput values.
// You can construct a concrete instance of `ShieldedInstanceConfigPtrInput` via:
//
//          ShieldedInstanceConfigArgs{...}
//
//  or:
//
//          nil
type ShieldedInstanceConfigPtrInput interface {
	pulumi.Input

	ToShieldedInstanceConfigPtrOutput() ShieldedInstanceConfigPtrOutput
	ToShieldedInstanceConfigPtrOutputWithContext(context.Context) ShieldedInstanceConfigPtrOutput
}

type shieldedInstanceConfigPtrType ShieldedInstanceConfigArgs

func ShieldedInstanceConfigPtr(v *ShieldedInstanceConfigArgs) ShieldedInstanceConfigPtrInput {
	return (*shieldedInstanceConfigPtrType)(v)
}

func (*shieldedInstanceConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ShieldedInstanceConfig)(nil)).Elem()
}

func (i *shieldedInstanceConfigPtrType) ToShieldedInstanceConfigPtrOutput() ShieldedInstanceConfigPtrOutput {
	return i.ToShieldedInstanceConfigPtrOutputWithContext(context.Background())
}

func (i *shieldedInstanceConfigPtrType) ToShieldedInstanceConfigPtrOutputWithContext(ctx context.Context) ShieldedInstanceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShieldedInstanceConfigPtrOutput)
}

// A set of Shielded Instance options.
type ShieldedInstanceConfigOutput struct{ *pulumi.OutputState }

func (ShieldedInstanceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ShieldedInstanceConfig)(nil)).Elem()
}

func (o ShieldedInstanceConfigOutput) ToShieldedInstanceConfigOutput() ShieldedInstanceConfigOutput {
	return o
}

func (o ShieldedInstanceConfigOutput) ToShieldedInstanceConfigOutputWithContext(ctx context.Context) ShieldedInstanceConfigOutput {
	return o
}

func (o ShieldedInstanceConfigOutput) ToShieldedInstanceConfigPtrOutput() ShieldedInstanceConfigPtrOutput {
	return o.ToShieldedInstanceConfigPtrOutputWithContext(context.Background())
}

func (o ShieldedInstanceConfigOutput) ToShieldedInstanceConfigPtrOutputWithContext(ctx context.Context) ShieldedInstanceConfigPtrOutput {
	return o.ApplyT(func(v ShieldedInstanceConfig) *ShieldedInstanceConfig {
		return &v
	}).(ShieldedInstanceConfigPtrOutput)
}

// Defines whether the instance has integrity monitoring enabled. Enables monitoring and attestation of the boot integrity of the instance. The attestation is performed against the integrity policy baseline. This baseline is initially derived from the implicitly trusted boot image when the instance is created.
func (o ShieldedInstanceConfigOutput) EnableIntegrityMonitoring() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ShieldedInstanceConfig) *bool { return v.EnableIntegrityMonitoring }).(pulumi.BoolPtrOutput)
}

// Defines whether the instance has Secure Boot enabled. Secure Boot helps ensure that the system only runs authentic software by verifying the digital signature of all boot components, and halting the boot process if signature verification fails.
func (o ShieldedInstanceConfigOutput) EnableSecureBoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ShieldedInstanceConfig) *bool { return v.EnableSecureBoot }).(pulumi.BoolPtrOutput)
}

type ShieldedInstanceConfigPtrOutput struct{ *pulumi.OutputState }

func (ShieldedInstanceConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ShieldedInstanceConfig)(nil)).Elem()
}

func (o ShieldedInstanceConfigPtrOutput) ToShieldedInstanceConfigPtrOutput() ShieldedInstanceConfigPtrOutput {
	return o
}

func (o ShieldedInstanceConfigPtrOutput) ToShieldedInstanceConfigPtrOutputWithContext(ctx context.Context) ShieldedInstanceConfigPtrOutput {
	return o
}

func (o ShieldedInstanceConfigPtrOutput) Elem() ShieldedInstanceConfigOutput {
	return o.ApplyT(func(v *ShieldedInstanceConfig) ShieldedInstanceConfig { return *v }).(ShieldedInstanceConfigOutput)
}

// Defines whether the instance has integrity monitoring enabled. Enables monitoring and attestation of the boot integrity of the instance. The attestation is performed against the integrity policy baseline. This baseline is initially derived from the implicitly trusted boot image when the instance is created.
func (o ShieldedInstanceConfigPtrOutput) EnableIntegrityMonitoring() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ShieldedInstanceConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableIntegrityMonitoring
	}).(pulumi.BoolPtrOutput)
}

// Defines whether the instance has Secure Boot enabled. Secure Boot helps ensure that the system only runs authentic software by verifying the digital signature of all boot components, and halting the boot process if signature verification fails.
func (o ShieldedInstanceConfigPtrOutput) EnableSecureBoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ShieldedInstanceConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableSecureBoot
	}).(pulumi.BoolPtrOutput)
}

// Configuration of Shielded Nodes feature.
type ShieldedNodes struct {
	// Whether Shielded Nodes features are enabled on all nodes in this cluster.
	Enabled *bool `pulumi:"enabled"`
}

// ShieldedNodesInput is an input type that accepts ShieldedNodesArgs and ShieldedNodesOutput values.
// You can construct a concrete instance of `ShieldedNodesInput` via:
//
//          ShieldedNodesArgs{...}
type ShieldedNodesInput interface {
	pulumi.Input

	ToShieldedNodesOutput() ShieldedNodesOutput
	ToShieldedNodesOutputWithContext(context.Context) ShieldedNodesOutput
}

// Configuration of Shielded Nodes feature.
type ShieldedNodesArgs struct {
	// Whether Shielded Nodes features are enabled on all nodes in this cluster.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (ShieldedNodesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ShieldedNodes)(nil)).Elem()
}

func (i ShieldedNodesArgs) ToShieldedNodesOutput() ShieldedNodesOutput {
	return i.ToShieldedNodesOutputWithContext(context.Background())
}

func (i ShieldedNodesArgs) ToShieldedNodesOutputWithContext(ctx context.Context) ShieldedNodesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShieldedNodesOutput)
}

func (i ShieldedNodesArgs) ToShieldedNodesPtrOutput() ShieldedNodesPtrOutput {
	return i.ToShieldedNodesPtrOutputWithContext(context.Background())
}

func (i ShieldedNodesArgs) ToShieldedNodesPtrOutputWithContext(ctx context.Context) ShieldedNodesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShieldedNodesOutput).ToShieldedNodesPtrOutputWithContext(ctx)
}

// ShieldedNodesPtrInput is an input type that accepts ShieldedNodesArgs, ShieldedNodesPtr and ShieldedNodesPtrOutput values.
// You can construct a concrete instance of `ShieldedNodesPtrInput` via:
//
//          ShieldedNodesArgs{...}
//
//  or:
//
//          nil
type ShieldedNodesPtrInput interface {
	pulumi.Input

	ToShieldedNodesPtrOutput() ShieldedNodesPtrOutput
	ToShieldedNodesPtrOutputWithContext(context.Context) ShieldedNodesPtrOutput
}

type shieldedNodesPtrType ShieldedNodesArgs

func ShieldedNodesPtr(v *ShieldedNodesArgs) ShieldedNodesPtrInput {
	return (*shieldedNodesPtrType)(v)
}

func (*shieldedNodesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ShieldedNodes)(nil)).Elem()
}

func (i *shieldedNodesPtrType) ToShieldedNodesPtrOutput() ShieldedNodesPtrOutput {
	return i.ToShieldedNodesPtrOutputWithContext(context.Background())
}

func (i *shieldedNodesPtrType) ToShieldedNodesPtrOutputWithContext(ctx context.Context) ShieldedNodesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShieldedNodesPtrOutput)
}

// Configuration of Shielded Nodes feature.
type ShieldedNodesOutput struct{ *pulumi.OutputState }

func (ShieldedNodesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ShieldedNodes)(nil)).Elem()
}

func (o ShieldedNodesOutput) ToShieldedNodesOutput() ShieldedNodesOutput {
	return o
}

func (o ShieldedNodesOutput) ToShieldedNodesOutputWithContext(ctx context.Context) ShieldedNodesOutput {
	return o
}

func (o ShieldedNodesOutput) ToShieldedNodesPtrOutput() ShieldedNodesPtrOutput {
	return o.ToShieldedNodesPtrOutputWithContext(context.Background())
}

func (o ShieldedNodesOutput) ToShieldedNodesPtrOutputWithContext(ctx context.Context) ShieldedNodesPtrOutput {
	return o.ApplyT(func(v ShieldedNodes) *ShieldedNodes {
		return &v
	}).(ShieldedNodesPtrOutput)
}

// Whether Shielded Nodes features are enabled on all nodes in this cluster.
func (o ShieldedNodesOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ShieldedNodes) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type ShieldedNodesPtrOutput struct{ *pulumi.OutputState }

func (ShieldedNodesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ShieldedNodes)(nil)).Elem()
}

func (o ShieldedNodesPtrOutput) ToShieldedNodesPtrOutput() ShieldedNodesPtrOutput {
	return o
}

func (o ShieldedNodesPtrOutput) ToShieldedNodesPtrOutputWithContext(ctx context.Context) ShieldedNodesPtrOutput {
	return o
}

func (o ShieldedNodesPtrOutput) Elem() ShieldedNodesOutput {
	return o.ApplyT(func(v *ShieldedNodes) ShieldedNodes { return *v }).(ShieldedNodesOutput)
}

// Whether Shielded Nodes features are enabled on all nodes in this cluster.
func (o ShieldedNodesPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ShieldedNodes) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED).
type StatusCondition struct {
	// Canonical code of the condition.
	CanonicalCode *string `pulumi:"canonicalCode"`
	// Machine-friendly representation of the condition Deprecated. Use canonical_code instead.
	Code *string `pulumi:"code"`
	// Human-friendly representation of the condition
	Message *string `pulumi:"message"`
}

// StatusConditionInput is an input type that accepts StatusConditionArgs and StatusConditionOutput values.
// You can construct a concrete instance of `StatusConditionInput` via:
//
//          StatusConditionArgs{...}
type StatusConditionInput interface {
	pulumi.Input

	ToStatusConditionOutput() StatusConditionOutput
	ToStatusConditionOutputWithContext(context.Context) StatusConditionOutput
}

// StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED).
type StatusConditionArgs struct {
	// Canonical code of the condition.
	CanonicalCode pulumi.StringPtrInput `pulumi:"canonicalCode"`
	// Machine-friendly representation of the condition Deprecated. Use canonical_code instead.
	Code pulumi.StringPtrInput `pulumi:"code"`
	// Human-friendly representation of the condition
	Message pulumi.StringPtrInput `pulumi:"message"`
}

func (StatusConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusCondition)(nil)).Elem()
}

func (i StatusConditionArgs) ToStatusConditionOutput() StatusConditionOutput {
	return i.ToStatusConditionOutputWithContext(context.Background())
}

func (i StatusConditionArgs) ToStatusConditionOutputWithContext(ctx context.Context) StatusConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusConditionOutput)
}

// StatusConditionArrayInput is an input type that accepts StatusConditionArray and StatusConditionArrayOutput values.
// You can construct a concrete instance of `StatusConditionArrayInput` via:
//
//          StatusConditionArray{ StatusConditionArgs{...} }
type StatusConditionArrayInput interface {
	pulumi.Input

	ToStatusConditionArrayOutput() StatusConditionArrayOutput
	ToStatusConditionArrayOutputWithContext(context.Context) StatusConditionArrayOutput
}

type StatusConditionArray []StatusConditionInput

func (StatusConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StatusCondition)(nil)).Elem()
}

func (i StatusConditionArray) ToStatusConditionArrayOutput() StatusConditionArrayOutput {
	return i.ToStatusConditionArrayOutputWithContext(context.Background())
}

func (i StatusConditionArray) ToStatusConditionArrayOutputWithContext(ctx context.Context) StatusConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusConditionArrayOutput)
}

// StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED).
type StatusConditionOutput struct{ *pulumi.OutputState }

func (StatusConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusCondition)(nil)).Elem()
}

func (o StatusConditionOutput) ToStatusConditionOutput() StatusConditionOutput {
	return o
}

func (o StatusConditionOutput) ToStatusConditionOutputWithContext(ctx context.Context) StatusConditionOutput {
	return o
}

// Canonical code of the condition.
func (o StatusConditionOutput) CanonicalCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StatusCondition) *string { return v.CanonicalCode }).(pulumi.StringPtrOutput)
}

// Machine-friendly representation of the condition Deprecated. Use canonical_code instead.
func (o StatusConditionOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StatusCondition) *string { return v.Code }).(pulumi.StringPtrOutput)
}

// Human-friendly representation of the condition
func (o StatusConditionOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StatusCondition) *string { return v.Message }).(pulumi.StringPtrOutput)
}

type StatusConditionArrayOutput struct{ *pulumi.OutputState }

func (StatusConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StatusCondition)(nil)).Elem()
}

func (o StatusConditionArrayOutput) ToStatusConditionArrayOutput() StatusConditionArrayOutput {
	return o
}

func (o StatusConditionArrayOutput) ToStatusConditionArrayOutputWithContext(ctx context.Context) StatusConditionArrayOutput {
	return o
}

func (o StatusConditionArrayOutput) Index(i pulumi.IntInput) StatusConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StatusCondition {
		return vs[0].([]StatusCondition)[vs[1].(int)]
	}).(StatusConditionOutput)
}

// Represents an arbitrary window of time.
type TimeWindow struct {
	// The time that the window ends. The end time should take place after the start time.
	EndTime *string `pulumi:"endTime"`
	// The time that the window first starts.
	StartTime *string `pulumi:"startTime"`
}

// TimeWindowInput is an input type that accepts TimeWindowArgs and TimeWindowOutput values.
// You can construct a concrete instance of `TimeWindowInput` via:
//
//          TimeWindowArgs{...}
type TimeWindowInput interface {
	pulumi.Input

	ToTimeWindowOutput() TimeWindowOutput
	ToTimeWindowOutputWithContext(context.Context) TimeWindowOutput
}

// Represents an arbitrary window of time.
type TimeWindowArgs struct {
	// The time that the window ends. The end time should take place after the start time.
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// The time that the window first starts.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
}

func (TimeWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeWindow)(nil)).Elem()
}

func (i TimeWindowArgs) ToTimeWindowOutput() TimeWindowOutput {
	return i.ToTimeWindowOutputWithContext(context.Background())
}

func (i TimeWindowArgs) ToTimeWindowOutputWithContext(ctx context.Context) TimeWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeWindowOutput)
}

func (i TimeWindowArgs) ToTimeWindowPtrOutput() TimeWindowPtrOutput {
	return i.ToTimeWindowPtrOutputWithContext(context.Background())
}

func (i TimeWindowArgs) ToTimeWindowPtrOutputWithContext(ctx context.Context) TimeWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeWindowOutput).ToTimeWindowPtrOutputWithContext(ctx)
}

// TimeWindowPtrInput is an input type that accepts TimeWindowArgs, TimeWindowPtr and TimeWindowPtrOutput values.
// You can construct a concrete instance of `TimeWindowPtrInput` via:
//
//          TimeWindowArgs{...}
//
//  or:
//
//          nil
type TimeWindowPtrInput interface {
	pulumi.Input

	ToTimeWindowPtrOutput() TimeWindowPtrOutput
	ToTimeWindowPtrOutputWithContext(context.Context) TimeWindowPtrOutput
}

type timeWindowPtrType TimeWindowArgs

func TimeWindowPtr(v *TimeWindowArgs) TimeWindowPtrInput {
	return (*timeWindowPtrType)(v)
}

func (*timeWindowPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TimeWindow)(nil)).Elem()
}

func (i *timeWindowPtrType) ToTimeWindowPtrOutput() TimeWindowPtrOutput {
	return i.ToTimeWindowPtrOutputWithContext(context.Background())
}

func (i *timeWindowPtrType) ToTimeWindowPtrOutputWithContext(ctx context.Context) TimeWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeWindowPtrOutput)
}

// Represents an arbitrary window of time.
type TimeWindowOutput struct{ *pulumi.OutputState }

func (TimeWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeWindow)(nil)).Elem()
}

func (o TimeWindowOutput) ToTimeWindowOutput() TimeWindowOutput {
	return o
}

func (o TimeWindowOutput) ToTimeWindowOutputWithContext(ctx context.Context) TimeWindowOutput {
	return o
}

func (o TimeWindowOutput) ToTimeWindowPtrOutput() TimeWindowPtrOutput {
	return o.ToTimeWindowPtrOutputWithContext(context.Background())
}

func (o TimeWindowOutput) ToTimeWindowPtrOutputWithContext(ctx context.Context) TimeWindowPtrOutput {
	return o.ApplyT(func(v TimeWindow) *TimeWindow {
		return &v
	}).(TimeWindowPtrOutput)
}

// The time that the window ends. The end time should take place after the start time.
func (o TimeWindowOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimeWindow) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// The time that the window first starts.
func (o TimeWindowOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimeWindow) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

type TimeWindowPtrOutput struct{ *pulumi.OutputState }

func (TimeWindowPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TimeWindow)(nil)).Elem()
}

func (o TimeWindowPtrOutput) ToTimeWindowPtrOutput() TimeWindowPtrOutput {
	return o
}

func (o TimeWindowPtrOutput) ToTimeWindowPtrOutputWithContext(ctx context.Context) TimeWindowPtrOutput {
	return o
}

func (o TimeWindowPtrOutput) Elem() TimeWindowOutput {
	return o.ApplyT(func(v *TimeWindow) TimeWindow { return *v }).(TimeWindowOutput)
}

// The time that the window ends. The end time should take place after the start time.
func (o TimeWindowPtrOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TimeWindow) *string {
		if v == nil {
			return nil
		}
		return v.EndTime
	}).(pulumi.StringPtrOutput)
}

// The time that the window first starts.
func (o TimeWindowPtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TimeWindow) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// These upgrade settings control the level of parallelism and the level of disruption caused by an upgrade. maxUnavailable controls the number of nodes that can be simultaneously unavailable. maxSurge controls the number of additional nodes that can be added to the node pool temporarily for the time of the upgrade to increase the number of available nodes. (maxUnavailable + maxSurge) determines the level of parallelism (how many nodes are being upgraded at the same time). Note: upgrades inevitably introduce some disruption since workloads need to be moved from old nodes to new, upgraded ones. Even if maxUnavailable=0, this holds true. (Disruption stays within the limits of PodDisruptionBudget, if it is configured.) Consider a hypothetical node pool with 5 nodes having maxSurge=2, maxUnavailable=1. This means the upgrade process upgrades 3 nodes simultaneously. It creates 2 additional (upgraded) nodes, then it brings down 3 old (not yet upgraded) nodes at the same time. This ensures that there are always at least 4 nodes available.
type UpgradeSettings struct {
	// The maximum number of nodes that can be created beyond the current size of the node pool during the upgrade process.
	MaxSurge *int `pulumi:"maxSurge"`
	// The maximum number of nodes that can be simultaneously unavailable during the upgrade process. A node is considered available if its status is Ready.
	MaxUnavailable *int `pulumi:"maxUnavailable"`
}

// UpgradeSettingsInput is an input type that accepts UpgradeSettingsArgs and UpgradeSettingsOutput values.
// You can construct a concrete instance of `UpgradeSettingsInput` via:
//
//          UpgradeSettingsArgs{...}
type UpgradeSettingsInput interface {
	pulumi.Input

	ToUpgradeSettingsOutput() UpgradeSettingsOutput
	ToUpgradeSettingsOutputWithContext(context.Context) UpgradeSettingsOutput
}

// These upgrade settings control the level of parallelism and the level of disruption caused by an upgrade. maxUnavailable controls the number of nodes that can be simultaneously unavailable. maxSurge controls the number of additional nodes that can be added to the node pool temporarily for the time of the upgrade to increase the number of available nodes. (maxUnavailable + maxSurge) determines the level of parallelism (how many nodes are being upgraded at the same time). Note: upgrades inevitably introduce some disruption since workloads need to be moved from old nodes to new, upgraded ones. Even if maxUnavailable=0, this holds true. (Disruption stays within the limits of PodDisruptionBudget, if it is configured.) Consider a hypothetical node pool with 5 nodes having maxSurge=2, maxUnavailable=1. This means the upgrade process upgrades 3 nodes simultaneously. It creates 2 additional (upgraded) nodes, then it brings down 3 old (not yet upgraded) nodes at the same time. This ensures that there are always at least 4 nodes available.
type UpgradeSettingsArgs struct {
	// The maximum number of nodes that can be created beyond the current size of the node pool during the upgrade process.
	MaxSurge pulumi.IntPtrInput `pulumi:"maxSurge"`
	// The maximum number of nodes that can be simultaneously unavailable during the upgrade process. A node is considered available if its status is Ready.
	MaxUnavailable pulumi.IntPtrInput `pulumi:"maxUnavailable"`
}

func (UpgradeSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UpgradeSettings)(nil)).Elem()
}

func (i UpgradeSettingsArgs) ToUpgradeSettingsOutput() UpgradeSettingsOutput {
	return i.ToUpgradeSettingsOutputWithContext(context.Background())
}

func (i UpgradeSettingsArgs) ToUpgradeSettingsOutputWithContext(ctx context.Context) UpgradeSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradeSettingsOutput)
}

func (i UpgradeSettingsArgs) ToUpgradeSettingsPtrOutput() UpgradeSettingsPtrOutput {
	return i.ToUpgradeSettingsPtrOutputWithContext(context.Background())
}

func (i UpgradeSettingsArgs) ToUpgradeSettingsPtrOutputWithContext(ctx context.Context) UpgradeSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradeSettingsOutput).ToUpgradeSettingsPtrOutputWithContext(ctx)
}

// UpgradeSettingsPtrInput is an input type that accepts UpgradeSettingsArgs, UpgradeSettingsPtr and UpgradeSettingsPtrOutput values.
// You can construct a concrete instance of `UpgradeSettingsPtrInput` via:
//
//          UpgradeSettingsArgs{...}
//
//  or:
//
//          nil
type UpgradeSettingsPtrInput interface {
	pulumi.Input

	ToUpgradeSettingsPtrOutput() UpgradeSettingsPtrOutput
	ToUpgradeSettingsPtrOutputWithContext(context.Context) UpgradeSettingsPtrOutput
}

type upgradeSettingsPtrType UpgradeSettingsArgs

func UpgradeSettingsPtr(v *UpgradeSettingsArgs) UpgradeSettingsPtrInput {
	return (*upgradeSettingsPtrType)(v)
}

func (*upgradeSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UpgradeSettings)(nil)).Elem()
}

func (i *upgradeSettingsPtrType) ToUpgradeSettingsPtrOutput() UpgradeSettingsPtrOutput {
	return i.ToUpgradeSettingsPtrOutputWithContext(context.Background())
}

func (i *upgradeSettingsPtrType) ToUpgradeSettingsPtrOutputWithContext(ctx context.Context) UpgradeSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradeSettingsPtrOutput)
}

// These upgrade settings control the level of parallelism and the level of disruption caused by an upgrade. maxUnavailable controls the number of nodes that can be simultaneously unavailable. maxSurge controls the number of additional nodes that can be added to the node pool temporarily for the time of the upgrade to increase the number of available nodes. (maxUnavailable + maxSurge) determines the level of parallelism (how many nodes are being upgraded at the same time). Note: upgrades inevitably introduce some disruption since workloads need to be moved from old nodes to new, upgraded ones. Even if maxUnavailable=0, this holds true. (Disruption stays within the limits of PodDisruptionBudget, if it is configured.) Consider a hypothetical node pool with 5 nodes having maxSurge=2, maxUnavailable=1. This means the upgrade process upgrades 3 nodes simultaneously. It creates 2 additional (upgraded) nodes, then it brings down 3 old (not yet upgraded) nodes at the same time. This ensures that there are always at least 4 nodes available.
type UpgradeSettingsOutput struct{ *pulumi.OutputState }

func (UpgradeSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpgradeSettings)(nil)).Elem()
}

func (o UpgradeSettingsOutput) ToUpgradeSettingsOutput() UpgradeSettingsOutput {
	return o
}

func (o UpgradeSettingsOutput) ToUpgradeSettingsOutputWithContext(ctx context.Context) UpgradeSettingsOutput {
	return o
}

func (o UpgradeSettingsOutput) ToUpgradeSettingsPtrOutput() UpgradeSettingsPtrOutput {
	return o.ToUpgradeSettingsPtrOutputWithContext(context.Background())
}

func (o UpgradeSettingsOutput) ToUpgradeSettingsPtrOutputWithContext(ctx context.Context) UpgradeSettingsPtrOutput {
	return o.ApplyT(func(v UpgradeSettings) *UpgradeSettings {
		return &v
	}).(UpgradeSettingsPtrOutput)
}

// The maximum number of nodes that can be created beyond the current size of the node pool during the upgrade process.
func (o UpgradeSettingsOutput) MaxSurge() pulumi.IntPtrOutput {
	return o.ApplyT(func(v UpgradeSettings) *int { return v.MaxSurge }).(pulumi.IntPtrOutput)
}

// The maximum number of nodes that can be simultaneously unavailable during the upgrade process. A node is considered available if its status is Ready.
func (o UpgradeSettingsOutput) MaxUnavailable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v UpgradeSettings) *int { return v.MaxUnavailable }).(pulumi.IntPtrOutput)
}

type UpgradeSettingsPtrOutput struct{ *pulumi.OutputState }

func (UpgradeSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UpgradeSettings)(nil)).Elem()
}

func (o UpgradeSettingsPtrOutput) ToUpgradeSettingsPtrOutput() UpgradeSettingsPtrOutput {
	return o
}

func (o UpgradeSettingsPtrOutput) ToUpgradeSettingsPtrOutputWithContext(ctx context.Context) UpgradeSettingsPtrOutput {
	return o
}

func (o UpgradeSettingsPtrOutput) Elem() UpgradeSettingsOutput {
	return o.ApplyT(func(v *UpgradeSettings) UpgradeSettings { return *v }).(UpgradeSettingsOutput)
}

// The maximum number of nodes that can be created beyond the current size of the node pool during the upgrade process.
func (o UpgradeSettingsPtrOutput) MaxSurge() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *UpgradeSettings) *int {
		if v == nil {
			return nil
		}
		return v.MaxSurge
	}).(pulumi.IntPtrOutput)
}

// The maximum number of nodes that can be simultaneously unavailable during the upgrade process. A node is considered available if its status is Ready.
func (o UpgradeSettingsPtrOutput) MaxUnavailable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *UpgradeSettings) *int {
		if v == nil {
			return nil
		}
		return v.MaxUnavailable
	}).(pulumi.IntPtrOutput)
}

// VerticalPodAutoscaling contains global, per-cluster information required by Vertical Pod Autoscaler to automatically adjust the resources of pods controlled by it.
type VerticalPodAutoscaling struct {
	// Enables vertical pod autoscaling.
	Enabled *bool `pulumi:"enabled"`
}

// VerticalPodAutoscalingInput is an input type that accepts VerticalPodAutoscalingArgs and VerticalPodAutoscalingOutput values.
// You can construct a concrete instance of `VerticalPodAutoscalingInput` via:
//
//          VerticalPodAutoscalingArgs{...}
type VerticalPodAutoscalingInput interface {
	pulumi.Input

	ToVerticalPodAutoscalingOutput() VerticalPodAutoscalingOutput
	ToVerticalPodAutoscalingOutputWithContext(context.Context) VerticalPodAutoscalingOutput
}

// VerticalPodAutoscaling contains global, per-cluster information required by Vertical Pod Autoscaler to automatically adjust the resources of pods controlled by it.
type VerticalPodAutoscalingArgs struct {
	// Enables vertical pod autoscaling.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (VerticalPodAutoscalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VerticalPodAutoscaling)(nil)).Elem()
}

func (i VerticalPodAutoscalingArgs) ToVerticalPodAutoscalingOutput() VerticalPodAutoscalingOutput {
	return i.ToVerticalPodAutoscalingOutputWithContext(context.Background())
}

func (i VerticalPodAutoscalingArgs) ToVerticalPodAutoscalingOutputWithContext(ctx context.Context) VerticalPodAutoscalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VerticalPodAutoscalingOutput)
}

func (i VerticalPodAutoscalingArgs) ToVerticalPodAutoscalingPtrOutput() VerticalPodAutoscalingPtrOutput {
	return i.ToVerticalPodAutoscalingPtrOutputWithContext(context.Background())
}

func (i VerticalPodAutoscalingArgs) ToVerticalPodAutoscalingPtrOutputWithContext(ctx context.Context) VerticalPodAutoscalingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VerticalPodAutoscalingOutput).ToVerticalPodAutoscalingPtrOutputWithContext(ctx)
}

// VerticalPodAutoscalingPtrInput is an input type that accepts VerticalPodAutoscalingArgs, VerticalPodAutoscalingPtr and VerticalPodAutoscalingPtrOutput values.
// You can construct a concrete instance of `VerticalPodAutoscalingPtrInput` via:
//
//          VerticalPodAutoscalingArgs{...}
//
//  or:
//
//          nil
type VerticalPodAutoscalingPtrInput interface {
	pulumi.Input

	ToVerticalPodAutoscalingPtrOutput() VerticalPodAutoscalingPtrOutput
	ToVerticalPodAutoscalingPtrOutputWithContext(context.Context) VerticalPodAutoscalingPtrOutput
}

type verticalPodAutoscalingPtrType VerticalPodAutoscalingArgs

func VerticalPodAutoscalingPtr(v *VerticalPodAutoscalingArgs) VerticalPodAutoscalingPtrInput {
	return (*verticalPodAutoscalingPtrType)(v)
}

func (*verticalPodAutoscalingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VerticalPodAutoscaling)(nil)).Elem()
}

func (i *verticalPodAutoscalingPtrType) ToVerticalPodAutoscalingPtrOutput() VerticalPodAutoscalingPtrOutput {
	return i.ToVerticalPodAutoscalingPtrOutputWithContext(context.Background())
}

func (i *verticalPodAutoscalingPtrType) ToVerticalPodAutoscalingPtrOutputWithContext(ctx context.Context) VerticalPodAutoscalingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VerticalPodAutoscalingPtrOutput)
}

// VerticalPodAutoscaling contains global, per-cluster information required by Vertical Pod Autoscaler to automatically adjust the resources of pods controlled by it.
type VerticalPodAutoscalingOutput struct{ *pulumi.OutputState }

func (VerticalPodAutoscalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VerticalPodAutoscaling)(nil)).Elem()
}

func (o VerticalPodAutoscalingOutput) ToVerticalPodAutoscalingOutput() VerticalPodAutoscalingOutput {
	return o
}

func (o VerticalPodAutoscalingOutput) ToVerticalPodAutoscalingOutputWithContext(ctx context.Context) VerticalPodAutoscalingOutput {
	return o
}

func (o VerticalPodAutoscalingOutput) ToVerticalPodAutoscalingPtrOutput() VerticalPodAutoscalingPtrOutput {
	return o.ToVerticalPodAutoscalingPtrOutputWithContext(context.Background())
}

func (o VerticalPodAutoscalingOutput) ToVerticalPodAutoscalingPtrOutputWithContext(ctx context.Context) VerticalPodAutoscalingPtrOutput {
	return o.ApplyT(func(v VerticalPodAutoscaling) *VerticalPodAutoscaling {
		return &v
	}).(VerticalPodAutoscalingPtrOutput)
}

// Enables vertical pod autoscaling.
func (o VerticalPodAutoscalingOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VerticalPodAutoscaling) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type VerticalPodAutoscalingPtrOutput struct{ *pulumi.OutputState }

func (VerticalPodAutoscalingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VerticalPodAutoscaling)(nil)).Elem()
}

func (o VerticalPodAutoscalingPtrOutput) ToVerticalPodAutoscalingPtrOutput() VerticalPodAutoscalingPtrOutput {
	return o
}

func (o VerticalPodAutoscalingPtrOutput) ToVerticalPodAutoscalingPtrOutputWithContext(ctx context.Context) VerticalPodAutoscalingPtrOutput {
	return o
}

func (o VerticalPodAutoscalingPtrOutput) Elem() VerticalPodAutoscalingOutput {
	return o.ApplyT(func(v *VerticalPodAutoscaling) VerticalPodAutoscaling { return *v }).(VerticalPodAutoscalingOutput)
}

// Enables vertical pod autoscaling.
func (o VerticalPodAutoscalingPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VerticalPodAutoscaling) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Configuration for the use of Kubernetes Service Accounts in GCP IAM policies.
type WorkloadIdentityConfig struct {
	// The workload pool to attach all Kubernetes service accounts to.
	WorkloadPool *string `pulumi:"workloadPool"`
}

// WorkloadIdentityConfigInput is an input type that accepts WorkloadIdentityConfigArgs and WorkloadIdentityConfigOutput values.
// You can construct a concrete instance of `WorkloadIdentityConfigInput` via:
//
//          WorkloadIdentityConfigArgs{...}
type WorkloadIdentityConfigInput interface {
	pulumi.Input

	ToWorkloadIdentityConfigOutput() WorkloadIdentityConfigOutput
	ToWorkloadIdentityConfigOutputWithContext(context.Context) WorkloadIdentityConfigOutput
}

// Configuration for the use of Kubernetes Service Accounts in GCP IAM policies.
type WorkloadIdentityConfigArgs struct {
	// The workload pool to attach all Kubernetes service accounts to.
	WorkloadPool pulumi.StringPtrInput `pulumi:"workloadPool"`
}

func (WorkloadIdentityConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkloadIdentityConfig)(nil)).Elem()
}

func (i WorkloadIdentityConfigArgs) ToWorkloadIdentityConfigOutput() WorkloadIdentityConfigOutput {
	return i.ToWorkloadIdentityConfigOutputWithContext(context.Background())
}

func (i WorkloadIdentityConfigArgs) ToWorkloadIdentityConfigOutputWithContext(ctx context.Context) WorkloadIdentityConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadIdentityConfigOutput)
}

func (i WorkloadIdentityConfigArgs) ToWorkloadIdentityConfigPtrOutput() WorkloadIdentityConfigPtrOutput {
	return i.ToWorkloadIdentityConfigPtrOutputWithContext(context.Background())
}

func (i WorkloadIdentityConfigArgs) ToWorkloadIdentityConfigPtrOutputWithContext(ctx context.Context) WorkloadIdentityConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadIdentityConfigOutput).ToWorkloadIdentityConfigPtrOutputWithContext(ctx)
}

// WorkloadIdentityConfigPtrInput is an input type that accepts WorkloadIdentityConfigArgs, WorkloadIdentityConfigPtr and WorkloadIdentityConfigPtrOutput values.
// You can construct a concrete instance of `WorkloadIdentityConfigPtrInput` via:
//
//          WorkloadIdentityConfigArgs{...}
//
//  or:
//
//          nil
type WorkloadIdentityConfigPtrInput interface {
	pulumi.Input

	ToWorkloadIdentityConfigPtrOutput() WorkloadIdentityConfigPtrOutput
	ToWorkloadIdentityConfigPtrOutputWithContext(context.Context) WorkloadIdentityConfigPtrOutput
}

type workloadIdentityConfigPtrType WorkloadIdentityConfigArgs

func WorkloadIdentityConfigPtr(v *WorkloadIdentityConfigArgs) WorkloadIdentityConfigPtrInput {
	return (*workloadIdentityConfigPtrType)(v)
}

func (*workloadIdentityConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkloadIdentityConfig)(nil)).Elem()
}

func (i *workloadIdentityConfigPtrType) ToWorkloadIdentityConfigPtrOutput() WorkloadIdentityConfigPtrOutput {
	return i.ToWorkloadIdentityConfigPtrOutputWithContext(context.Background())
}

func (i *workloadIdentityConfigPtrType) ToWorkloadIdentityConfigPtrOutputWithContext(ctx context.Context) WorkloadIdentityConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadIdentityConfigPtrOutput)
}

// Configuration for the use of Kubernetes Service Accounts in GCP IAM policies.
type WorkloadIdentityConfigOutput struct{ *pulumi.OutputState }

func (WorkloadIdentityConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkloadIdentityConfig)(nil)).Elem()
}

func (o WorkloadIdentityConfigOutput) ToWorkloadIdentityConfigOutput() WorkloadIdentityConfigOutput {
	return o
}

func (o WorkloadIdentityConfigOutput) ToWorkloadIdentityConfigOutputWithContext(ctx context.Context) WorkloadIdentityConfigOutput {
	return o
}

func (o WorkloadIdentityConfigOutput) ToWorkloadIdentityConfigPtrOutput() WorkloadIdentityConfigPtrOutput {
	return o.ToWorkloadIdentityConfigPtrOutputWithContext(context.Background())
}

func (o WorkloadIdentityConfigOutput) ToWorkloadIdentityConfigPtrOutputWithContext(ctx context.Context) WorkloadIdentityConfigPtrOutput {
	return o.ApplyT(func(v WorkloadIdentityConfig) *WorkloadIdentityConfig {
		return &v
	}).(WorkloadIdentityConfigPtrOutput)
}

// The workload pool to attach all Kubernetes service accounts to.
func (o WorkloadIdentityConfigOutput) WorkloadPool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkloadIdentityConfig) *string { return v.WorkloadPool }).(pulumi.StringPtrOutput)
}

type WorkloadIdentityConfigPtrOutput struct{ *pulumi.OutputState }

func (WorkloadIdentityConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkloadIdentityConfig)(nil)).Elem()
}

func (o WorkloadIdentityConfigPtrOutput) ToWorkloadIdentityConfigPtrOutput() WorkloadIdentityConfigPtrOutput {
	return o
}

func (o WorkloadIdentityConfigPtrOutput) ToWorkloadIdentityConfigPtrOutputWithContext(ctx context.Context) WorkloadIdentityConfigPtrOutput {
	return o
}

func (o WorkloadIdentityConfigPtrOutput) Elem() WorkloadIdentityConfigOutput {
	return o.ApplyT(func(v *WorkloadIdentityConfig) WorkloadIdentityConfig { return *v }).(WorkloadIdentityConfigOutput)
}

// The workload pool to attach all Kubernetes service accounts to.
func (o WorkloadIdentityConfigPtrOutput) WorkloadPool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkloadIdentityConfig) *string {
		if v == nil {
			return nil
		}
		return v.WorkloadPool
	}).(pulumi.StringPtrOutput)
}

// WorkloadMetadataConfig defines the metadata configuration to expose to workloads on the node pool.
type WorkloadMetadataConfig struct {
	// Mode is the configuration for how to expose metadata to workloads running on the node pool.
	Mode *string `pulumi:"mode"`
}

// WorkloadMetadataConfigInput is an input type that accepts WorkloadMetadataConfigArgs and WorkloadMetadataConfigOutput values.
// You can construct a concrete instance of `WorkloadMetadataConfigInput` via:
//
//          WorkloadMetadataConfigArgs{...}
type WorkloadMetadataConfigInput interface {
	pulumi.Input

	ToWorkloadMetadataConfigOutput() WorkloadMetadataConfigOutput
	ToWorkloadMetadataConfigOutputWithContext(context.Context) WorkloadMetadataConfigOutput
}

// WorkloadMetadataConfig defines the metadata configuration to expose to workloads on the node pool.
type WorkloadMetadataConfigArgs struct {
	// Mode is the configuration for how to expose metadata to workloads running on the node pool.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
}

func (WorkloadMetadataConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkloadMetadataConfig)(nil)).Elem()
}

func (i WorkloadMetadataConfigArgs) ToWorkloadMetadataConfigOutput() WorkloadMetadataConfigOutput {
	return i.ToWorkloadMetadataConfigOutputWithContext(context.Background())
}

func (i WorkloadMetadataConfigArgs) ToWorkloadMetadataConfigOutputWithContext(ctx context.Context) WorkloadMetadataConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadMetadataConfigOutput)
}

func (i WorkloadMetadataConfigArgs) ToWorkloadMetadataConfigPtrOutput() WorkloadMetadataConfigPtrOutput {
	return i.ToWorkloadMetadataConfigPtrOutputWithContext(context.Background())
}

func (i WorkloadMetadataConfigArgs) ToWorkloadMetadataConfigPtrOutputWithContext(ctx context.Context) WorkloadMetadataConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadMetadataConfigOutput).ToWorkloadMetadataConfigPtrOutputWithContext(ctx)
}

// WorkloadMetadataConfigPtrInput is an input type that accepts WorkloadMetadataConfigArgs, WorkloadMetadataConfigPtr and WorkloadMetadataConfigPtrOutput values.
// You can construct a concrete instance of `WorkloadMetadataConfigPtrInput` via:
//
//          WorkloadMetadataConfigArgs{...}
//
//  or:
//
//          nil
type WorkloadMetadataConfigPtrInput interface {
	pulumi.Input

	ToWorkloadMetadataConfigPtrOutput() WorkloadMetadataConfigPtrOutput
	ToWorkloadMetadataConfigPtrOutputWithContext(context.Context) WorkloadMetadataConfigPtrOutput
}

type workloadMetadataConfigPtrType WorkloadMetadataConfigArgs

func WorkloadMetadataConfigPtr(v *WorkloadMetadataConfigArgs) WorkloadMetadataConfigPtrInput {
	return (*workloadMetadataConfigPtrType)(v)
}

func (*workloadMetadataConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkloadMetadataConfig)(nil)).Elem()
}

func (i *workloadMetadataConfigPtrType) ToWorkloadMetadataConfigPtrOutput() WorkloadMetadataConfigPtrOutput {
	return i.ToWorkloadMetadataConfigPtrOutputWithContext(context.Background())
}

func (i *workloadMetadataConfigPtrType) ToWorkloadMetadataConfigPtrOutputWithContext(ctx context.Context) WorkloadMetadataConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadMetadataConfigPtrOutput)
}

// WorkloadMetadataConfig defines the metadata configuration to expose to workloads on the node pool.
type WorkloadMetadataConfigOutput struct{ *pulumi.OutputState }

func (WorkloadMetadataConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkloadMetadataConfig)(nil)).Elem()
}

func (o WorkloadMetadataConfigOutput) ToWorkloadMetadataConfigOutput() WorkloadMetadataConfigOutput {
	return o
}

func (o WorkloadMetadataConfigOutput) ToWorkloadMetadataConfigOutputWithContext(ctx context.Context) WorkloadMetadataConfigOutput {
	return o
}

func (o WorkloadMetadataConfigOutput) ToWorkloadMetadataConfigPtrOutput() WorkloadMetadataConfigPtrOutput {
	return o.ToWorkloadMetadataConfigPtrOutputWithContext(context.Background())
}

func (o WorkloadMetadataConfigOutput) ToWorkloadMetadataConfigPtrOutputWithContext(ctx context.Context) WorkloadMetadataConfigPtrOutput {
	return o.ApplyT(func(v WorkloadMetadataConfig) *WorkloadMetadataConfig {
		return &v
	}).(WorkloadMetadataConfigPtrOutput)
}

// Mode is the configuration for how to expose metadata to workloads running on the node pool.
func (o WorkloadMetadataConfigOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkloadMetadataConfig) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

type WorkloadMetadataConfigPtrOutput struct{ *pulumi.OutputState }

func (WorkloadMetadataConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkloadMetadataConfig)(nil)).Elem()
}

func (o WorkloadMetadataConfigPtrOutput) ToWorkloadMetadataConfigPtrOutput() WorkloadMetadataConfigPtrOutput {
	return o
}

func (o WorkloadMetadataConfigPtrOutput) ToWorkloadMetadataConfigPtrOutputWithContext(ctx context.Context) WorkloadMetadataConfigPtrOutput {
	return o
}

func (o WorkloadMetadataConfigPtrOutput) Elem() WorkloadMetadataConfigOutput {
	return o.ApplyT(func(v *WorkloadMetadataConfig) WorkloadMetadataConfig { return *v }).(WorkloadMetadataConfigOutput)
}

// Mode is the configuration for how to expose metadata to workloads running on the node pool.
func (o WorkloadMetadataConfigPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkloadMetadataConfig) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AcceleratorConfigOutput{})
	pulumi.RegisterOutputType(AcceleratorConfigArrayOutput{})
	pulumi.RegisterOutputType(AddonsConfigOutput{})
	pulumi.RegisterOutputType(AddonsConfigPtrOutput{})
	pulumi.RegisterOutputType(AuthenticatorGroupsConfigOutput{})
	pulumi.RegisterOutputType(AuthenticatorGroupsConfigPtrOutput{})
	pulumi.RegisterOutputType(AutoUpgradeOptionsOutput{})
	pulumi.RegisterOutputType(AutoUpgradeOptionsPtrOutput{})
	pulumi.RegisterOutputType(AutopilotOutput{})
	pulumi.RegisterOutputType(AutopilotPtrOutput{})
	pulumi.RegisterOutputType(AutoprovisioningNodePoolDefaultsOutput{})
	pulumi.RegisterOutputType(AutoprovisioningNodePoolDefaultsPtrOutput{})
	pulumi.RegisterOutputType(BigQueryDestinationOutput{})
	pulumi.RegisterOutputType(BigQueryDestinationPtrOutput{})
	pulumi.RegisterOutputType(BinaryAuthorizationOutput{})
	pulumi.RegisterOutputType(BinaryAuthorizationPtrOutput{})
	pulumi.RegisterOutputType(CidrBlockOutput{})
	pulumi.RegisterOutputType(CidrBlockArrayOutput{})
	pulumi.RegisterOutputType(ClientCertificateConfigOutput{})
	pulumi.RegisterOutputType(ClientCertificateConfigPtrOutput{})
	pulumi.RegisterOutputType(CloudRunConfigOutput{})
	pulumi.RegisterOutputType(CloudRunConfigPtrOutput{})
	pulumi.RegisterOutputType(ClusterTypeOutput{})
	pulumi.RegisterOutputType(ClusterTypePtrOutput{})
	pulumi.RegisterOutputType(ClusterAutoscalingOutput{})
	pulumi.RegisterOutputType(ClusterAutoscalingPtrOutput{})
	pulumi.RegisterOutputType(ConfigConnectorConfigOutput{})
	pulumi.RegisterOutputType(ConfigConnectorConfigPtrOutput{})
	pulumi.RegisterOutputType(ConsumptionMeteringConfigOutput{})
	pulumi.RegisterOutputType(ConsumptionMeteringConfigPtrOutput{})
	pulumi.RegisterOutputType(DailyMaintenanceWindowOutput{})
	pulumi.RegisterOutputType(DailyMaintenanceWindowPtrOutput{})
	pulumi.RegisterOutputType(DatabaseEncryptionOutput{})
	pulumi.RegisterOutputType(DatabaseEncryptionPtrOutput{})
	pulumi.RegisterOutputType(DefaultSnatStatusOutput{})
	pulumi.RegisterOutputType(DefaultSnatStatusPtrOutput{})
	pulumi.RegisterOutputType(DnsCacheConfigOutput{})
	pulumi.RegisterOutputType(DnsCacheConfigPtrOutput{})
	pulumi.RegisterOutputType(GcePersistentDiskCsiDriverConfigOutput{})
	pulumi.RegisterOutputType(GcePersistentDiskCsiDriverConfigPtrOutput{})
	pulumi.RegisterOutputType(HorizontalPodAutoscalingOutput{})
	pulumi.RegisterOutputType(HorizontalPodAutoscalingPtrOutput{})
	pulumi.RegisterOutputType(HttpLoadBalancingOutput{})
	pulumi.RegisterOutputType(HttpLoadBalancingPtrOutput{})
	pulumi.RegisterOutputType(IPAllocationPolicyOutput{})
	pulumi.RegisterOutputType(IPAllocationPolicyPtrOutput{})
	pulumi.RegisterOutputType(KubernetesDashboardOutput{})
	pulumi.RegisterOutputType(KubernetesDashboardPtrOutput{})
	pulumi.RegisterOutputType(LegacyAbacOutput{})
	pulumi.RegisterOutputType(LegacyAbacPtrOutput{})
	pulumi.RegisterOutputType(LinuxNodeConfigOutput{})
	pulumi.RegisterOutputType(LinuxNodeConfigPtrOutput{})
	pulumi.RegisterOutputType(MaintenancePolicyOutput{})
	pulumi.RegisterOutputType(MaintenancePolicyPtrOutput{})
	pulumi.RegisterOutputType(MaintenanceWindowOutput{})
	pulumi.RegisterOutputType(MaintenanceWindowPtrOutput{})
	pulumi.RegisterOutputType(MasterAuthOutput{})
	pulumi.RegisterOutputType(MasterAuthPtrOutput{})
	pulumi.RegisterOutputType(MasterAuthorizedNetworksConfigOutput{})
	pulumi.RegisterOutputType(MasterAuthorizedNetworksConfigPtrOutput{})
	pulumi.RegisterOutputType(MaxPodsConstraintOutput{})
	pulumi.RegisterOutputType(MaxPodsConstraintPtrOutput{})
	pulumi.RegisterOutputType(NetworkConfigOutput{})
	pulumi.RegisterOutputType(NetworkConfigPtrOutput{})
	pulumi.RegisterOutputType(NetworkPolicyOutput{})
	pulumi.RegisterOutputType(NetworkPolicyPtrOutput{})
	pulumi.RegisterOutputType(NetworkPolicyConfigOutput{})
	pulumi.RegisterOutputType(NetworkPolicyConfigPtrOutput{})
	pulumi.RegisterOutputType(NodeConfigOutput{})
	pulumi.RegisterOutputType(NodeConfigPtrOutput{})
	pulumi.RegisterOutputType(NodeKubeletConfigOutput{})
	pulumi.RegisterOutputType(NodeKubeletConfigPtrOutput{})
	pulumi.RegisterOutputType(NodeManagementOutput{})
	pulumi.RegisterOutputType(NodeManagementPtrOutput{})
	pulumi.RegisterOutputType(NodePoolTypeOutput{})
	pulumi.RegisterOutputType(NodePoolTypePtrOutput{})
	pulumi.RegisterOutputType(NodePoolTypeArrayOutput{})
	pulumi.RegisterOutputType(NodePoolAutoscalingOutput{})
	pulumi.RegisterOutputType(NodePoolAutoscalingPtrOutput{})
	pulumi.RegisterOutputType(NodeTaintOutput{})
	pulumi.RegisterOutputType(NodeTaintArrayOutput{})
	pulumi.RegisterOutputType(NotificationConfigOutput{})
	pulumi.RegisterOutputType(NotificationConfigPtrOutput{})
	pulumi.RegisterOutputType(PrivateClusterConfigOutput{})
	pulumi.RegisterOutputType(PrivateClusterConfigPtrOutput{})
	pulumi.RegisterOutputType(PrivateClusterMasterGlobalAccessConfigOutput{})
	pulumi.RegisterOutputType(PrivateClusterMasterGlobalAccessConfigPtrOutput{})
	pulumi.RegisterOutputType(PubSubOutput{})
	pulumi.RegisterOutputType(PubSubPtrOutput{})
	pulumi.RegisterOutputType(RecurringTimeWindowOutput{})
	pulumi.RegisterOutputType(RecurringTimeWindowPtrOutput{})
	pulumi.RegisterOutputType(ReleaseChannelOutput{})
	pulumi.RegisterOutputType(ReleaseChannelPtrOutput{})
	pulumi.RegisterOutputType(ReservationAffinityOutput{})
	pulumi.RegisterOutputType(ReservationAffinityPtrOutput{})
	pulumi.RegisterOutputType(ResourceLimitOutput{})
	pulumi.RegisterOutputType(ResourceLimitArrayOutput{})
	pulumi.RegisterOutputType(ResourceUsageExportConfigOutput{})
	pulumi.RegisterOutputType(ResourceUsageExportConfigPtrOutput{})
	pulumi.RegisterOutputType(SandboxConfigOutput{})
	pulumi.RegisterOutputType(SandboxConfigPtrOutput{})
	pulumi.RegisterOutputType(ShieldedInstanceConfigOutput{})
	pulumi.RegisterOutputType(ShieldedInstanceConfigPtrOutput{})
	pulumi.RegisterOutputType(ShieldedNodesOutput{})
	pulumi.RegisterOutputType(ShieldedNodesPtrOutput{})
	pulumi.RegisterOutputType(StatusConditionOutput{})
	pulumi.RegisterOutputType(StatusConditionArrayOutput{})
	pulumi.RegisterOutputType(TimeWindowOutput{})
	pulumi.RegisterOutputType(TimeWindowPtrOutput{})
	pulumi.RegisterOutputType(UpgradeSettingsOutput{})
	pulumi.RegisterOutputType(UpgradeSettingsPtrOutput{})
	pulumi.RegisterOutputType(VerticalPodAutoscalingOutput{})
	pulumi.RegisterOutputType(VerticalPodAutoscalingPtrOutput{})
	pulumi.RegisterOutputType(WorkloadIdentityConfigOutput{})
	pulumi.RegisterOutputType(WorkloadIdentityConfigPtrOutput{})
	pulumi.RegisterOutputType(WorkloadMetadataConfigOutput{})
	pulumi.RegisterOutputType(WorkloadMetadataConfigPtrOutput{})
}
